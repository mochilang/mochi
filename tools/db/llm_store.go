//go:build !tinygo

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"time"

	"github.com/google/uuid"
)

type llmStore struct {
	db *sql.DB
}

type LLMModel struct {
	ID        int64  // primary key
	SessionID string // UUID, autogenerated if not set
	Agent     string // agent name
	Model     string // model name
	Request   json.RawMessage
	Response  json.RawMessage
	Prompt    string
	Reply     string
	PromptTok int
	ReplyTok  int
	TotalTok  int
	Duration  time.Duration
	Status    string // success, error, etc
	CreatedAt time.Time
}

func (s *llmStore) Insert(ctx context.Context, m *LLMModel) error {
	if m.SessionID == "" {
		m.SessionID = uuid.NewString()
	}
	if m.CreatedAt.IsZero() {
		m.CreatedAt = time.Now()
	}

	// Ensure request/response JSON are not nil and are valid
	var reqJSON, respJSON []byte
	var err error

	if m.Request != nil {
		reqJSON = m.Request
	} else {
		reqJSON = []byte("null")
	}

	if m.Response != nil {
		respJSON = m.Response
	} else {
		respJSON = []byte("null")
	}

	duration := fmt.Sprintf("%.9f seconds", m.Duration.Seconds())

	_, err = s.db.ExecContext(ctx, `
		INSERT INTO llm (
			session_id, agent, model, request, response,
			prompt, reply, prompt_tok, reply_tok, total_tok,
			duration, status, created_at
		) VALUES (
			$1, $2, $3, $4::jsonb, $5::jsonb,
			$6, $7, $8, $9, $10,
			$11::interval, $12, $13
		)
	`,
		m.SessionID, m.Agent, m.Model, reqJSON, respJSON,
		m.Prompt, m.Reply, m.PromptTok, m.ReplyTok, m.TotalTok,
		duration, m.Status, m.CreatedAt,
	)
	return err
}

func (s *llmStore) ensureTable() error {
	_, err := s.db.Exec(`
		CREATE TABLE IF NOT EXISTS llm (
			id BIGSERIAL PRIMARY KEY,
			session_id UUID NOT NULL,
			agent TEXT,
			model TEXT,
			request JSONB,
			response JSONB,
			prompt TEXT,
			reply TEXT,
			prompt_tok INT,
			reply_tok INT,
			total_tok INT,
			duration INTERVAL,
			status TEXT,
			created_at TIMESTAMPTZ DEFAULT now()
		);
		CREATE INDEX IF NOT EXISTS idx_llm_session ON llm(session_id);
		CREATE INDEX IF NOT EXISTS idx_llm_created ON llm(created_at);
	`)
	return err
}

func LogLLM(ctx context.Context, m *LLMModel) {
	if llm == nil {
		return
	}
	if ctx == nil {
		ctx = context.Background()
	}
	if err := llm.Insert(ctx, m); err != nil {
		log.Printf("[llm] insert: %v", err)
	}
}
