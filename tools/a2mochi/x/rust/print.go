//go:build slow

package rust

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"

	mochiast "mochi/ast"
)

func repoRoot() string {
	dir, _ := os.Getwd()
	for i := 0; i < 10; i++ {
		if _, err := os.Stat(filepath.Join(dir, "go.mod")); err == nil {
			return dir
		}
		parent := filepath.Dir(dir)
		if parent == dir {
			break
		}
		dir = parent
	}
	return "."
}

func version() string {
	b, err := os.ReadFile(filepath.Join(repoRoot(), "VERSION"))
	if err != nil {
		return "dev"
	}
	return strings.TrimSpace(string(b))
}

func withHeader(src string, code []byte) string {
	tz := time.FixedZone("GMT+7", 7*3600)
	header := fmt.Sprintf("// Generated by Mochi a2mochi v%s on %s", version(), time.Now().In(tz).Format("2006-01-02 15:04 -0700"))
	var b strings.Builder
	b.WriteString(header)
	b.WriteByte('\n')
	b.WriteString("/*\n")
	b.WriteString(src)
	if !strings.HasSuffix(src, "\n") {
		b.WriteByte('\n')
	}
	b.WriteString("*/\n")
	b.Write(code)
	return b.String()
}

// Print writes a Mochi AST node to source code.
func Print(node *mochiast.Node) (string, error) {
	var buf bytes.Buffer
	if err := mochiast.Fprint(&buf, node); err != nil {
		return "", err
	}
	// trim trailing whitespace to keep output stable
	out := strings.TrimRight(buf.String(), " \n") + "\n"
	return out, nil
}

// PrintWithHeader prints the Mochi AST and prepends a generated header with the
// original Rust source code.
func PrintWithHeader(src string, node *mochiast.Node) (string, error) {
	code, err := Print(node)
	if err != nil {
		return "", err
	}
	return withHeader(src, []byte(code)), nil
}

// WriteFile writes the Mochi code to the given path.
func WriteFile(path string, node *mochiast.Node) error {
	code, err := Print(node)
	if err != nil {
		return err
	}
	return os.WriteFile(path, []byte(code), 0o644)
}

// WriteFileWithHeader writes the Mochi code with a header and original source
// to the given path.
func WriteFileWithHeader(path, src string, node *mochiast.Node) error {
	code, err := PrintWithHeader(src, node)
	if err != nil {
		return err
	}
	return os.WriteFile(path, []byte(code), 0o644)
}
