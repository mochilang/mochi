//go:build slow

package gox

import (
	"fmt"
	"go/ast"
	goparser "go/parser"
	"go/token"
	"os"
	"strings"
)

// Program wraps a parsed Go file and its original lines.
type Program struct {
	File  *ast.File
	Fset  *token.FileSet
	Lines []string
}

// Parse parses Go source code into a Program.
func Parse(src string) (*Program, error) {
	if strings.TrimSpace(src) == "" {
		return nil, fmt.Errorf("empty source")
	}
	src = strings.ReplaceAll(src, "\r\n", "\n")
	src = stripShebang(src)
	src = stripBuildTag(src)
	src = stripGenerated(src)
	fset := token.NewFileSet()
	file, err := goparser.ParseFile(fset, "", src, goparser.ParseComments)
	if err != nil {
		return nil, err
	}
	return &Program{File: file, Fset: fset, Lines: strings.Split(src, "\n")}, nil
}

// ParseFile reads a Go source file from disk and parses it.
func ParseFile(path string) (*Program, error) {
	data, err := os.ReadFile(path)
	if err != nil {
		return nil, err
	}
	return Parse(string(data))
}

// stripBuildTag removes the //go:build line so tests don't depend on it.
func stripBuildTag(src string) string {
	lines := strings.Split(src, "\n")
	if len(lines) > 0 && strings.HasPrefix(lines[0], "//go:build") {
		i := 1
		for i < len(lines) && strings.TrimSpace(lines[i]) == "" {
			i++
		}
		lines = lines[i:]
	}
	return strings.Join(lines, "\n")
}

// stripGenerated removes the `// Generated by Mochi` comment header so tests
// don't depend on it.
func stripGenerated(src string) string {
	lines := strings.Split(src, "\n")
	if len(lines) > 0 && strings.HasPrefix(lines[0], "// Generated by Mochi") {
		i := 1
		for i < len(lines) && strings.TrimSpace(lines[i]) == "" {
			i++
		}
		lines = lines[i:]
	}
	return strings.Join(lines, "\n")
}

// stripShebang removes a leading shebang line.
func stripShebang(src string) string {
	lines := strings.Split(src, "\n")
	if len(lines) > 0 && strings.HasPrefix(lines[0], "#!") {
		lines = lines[1:]
	}
	return strings.Join(lines, "\n")
}
