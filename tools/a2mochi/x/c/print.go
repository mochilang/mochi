//go:build slow

package c

import (
	"fmt"
	"os"
	"path/filepath"
	"runtime"
	"strconv"
	"strings"
	"time"

	"mochi/ast"
)

var version = func() string {
	_, file, _, ok := runtime.Caller(0)
	if ok {
		data, err := os.ReadFile(filepath.Join(filepath.Dir(file), "../../..", "VERSION"))
		if err == nil {
			return strings.TrimSpace(string(data))
		}
	}
	return "dev"
}()

func header(src string) string {
	tz := time.FixedZone("GMT", 0)
	t := gitTime().In(tz)
	var b strings.Builder
	fmt.Fprintf(&b, "// Generated by a2mochi v%s on %s GMT\n", version, t.Format("2006-01-02 15:04:05"))
	if src != "" {
		b.WriteString("/*\n")
		b.WriteString(src)
		if !strings.HasSuffix(src, "\n") {
			b.WriteByte('\n')
		}
		b.WriteString("*/\n")
	}
	return b.String()
}

// Print returns Mochi source code for n with the standard header and original source.
func Print(p *Program, n *ast.Node) (string, error) {
	if n == nil {
		return header(p.Source), nil
	}
	var b strings.Builder
	b.WriteString(header(p.Source))
	if err := ast.Fprint(&b, n); err != nil {
		return "", err
	}
	if !strings.HasSuffix(b.String(), "\n") {
		b.WriteByte('\n')
	}
	return b.String(), nil
}

func gitTime() time.Time {
	if epoch := os.Getenv("SOURCE_DATE_EPOCH"); epoch != "" {
		if secs, err := strconv.ParseInt(epoch, 10, 64); err == nil {
			return time.Unix(secs, 0)
		}
	}
	return time.Now()
}
