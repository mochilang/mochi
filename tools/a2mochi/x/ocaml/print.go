//go:build slow

package ocaml

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"

	"mochi/ast"
)

// Print emits Mochi source code for the given AST node along with a standard
// header.
func Print(n *ast.Node) (string, error) {
	var code strings.Builder
	if err := ast.Fprint(&code, n); err != nil {
		return "", err
	}
	var out strings.Builder
	out.WriteString(header(""))
	out.WriteString(code.String())
	out.WriteByte('\n')
	return out.String(), nil
}

func header(src string) string {
	loc := time.FixedZone("GMT+7", 7*3600)
	t := gitTime().In(loc)
	var b strings.Builder
	fmt.Fprintf(&b, "// Generated by a2mochi OCaml converter v%s on %s\n", version(), t.Format("2006-01-02 15:04 -0700"))
	if src != "" {
		b.WriteString("/*\n")
		b.WriteString(src)
		if !strings.HasSuffix(src, "\n") {
			b.WriteByte('\n')
		}
		b.WriteString("*/\n")
	}
	return b.String()
}

func version() string {
	root, _ := repoRoot()
	if root == "" {
		return "dev"
	}
	data, err := os.ReadFile(filepath.Join(root, "VERSION"))
	if err != nil {
		return "dev"
	}
	return strings.TrimSpace(string(data))
}

func gitTime() time.Time {
	root, _ := repoRoot()
	if root == "" {
		return time.Now()
	}
	cmd := exec.Command("git", "-C", root, "log", "-1", "--format=%cI")
	out, err := cmd.Output()
	if err != nil {
		return time.Now()
	}
	t, err := time.Parse(time.RFC3339, strings.TrimSpace(string(out)))
	if err != nil {
		return time.Now()
	}
	return t
}

func repoRoot() (string, error) {
	dir, err := os.Getwd()
	if err != nil {
		return "", err
	}
	for i := 0; i < 10; i++ {
		if _, err := os.Stat(filepath.Join(dir, "go.mod")); err == nil {
			return dir, nil
		}
		parent := filepath.Dir(dir)
		if parent == dir {
			break
		}
		dir = parent
	}
	return "", os.ErrNotExist
}
