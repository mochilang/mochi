//go:build slow

package rosetta

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"testing"

	swift "mochi/compiler/x/swift"
	"mochi/parser"
	"mochi/types"
)

func stripSwiftHeader(b []byte) []byte {
	if i := bytes.IndexByte(b, '\n'); i >= 0 && bytes.HasPrefix(b, []byte("// Generated by Mochi")) {
		return bytes.TrimSpace(b[i+1:])
	}
	return bytes.TrimSpace(b)
}

func TestMochiSwiftGolden(t *testing.T) {
	swiftExe := ensureSwift(t)
	root := findRepoRoot(t)
	srcDir := filepath.Join(root, "tests/rosetta/x/Mochi")
	outDir := filepath.Join(root, "tests/rosetta/out/Swift")

	if err := os.MkdirAll(outDir, 0o755); err != nil {
		t.Fatalf("mkout: %v", err)
	}

	outs, err := filepath.Glob(filepath.Join(srcDir, "*.out"))
	if err != nil {
		t.Fatalf("glob: %v", err)
	}
	if len(outs) == 0 {
		t.Fatal("no Mochi Rosetta tests found")
	}

	for _, out := range outs {
		name := strings.TrimSuffix(filepath.Base(out), ".out")
		srcPath := filepath.Join(srcDir, name+".mochi")
		swiftPath := filepath.Join(outDir, name+".swift")
		if _, err := os.Stat(srcPath); err != nil {
			t.Fatalf("missing source for %s", name)
		}

		t.Run(name, func(t *testing.T) {
			prog, err := parser.Parse(srcPath)
			if err != nil {
				writeSwiftError(outDir, name, fmt.Errorf("parse error: %w", err))
				t.Skip("parse error")
				return
			}
			env := types.NewEnv(nil)
			if errs := types.Check(prog, env); len(errs) > 0 {
				writeSwiftError(outDir, name, fmt.Errorf("type error: %v", errs[0]))
				t.Skip("type error")
				return
			}
			code, err := swift.New(env).Compile(prog)
			if err != nil {
				writeSwiftError(outDir, name, fmt.Errorf("compile error: %w", err))
				t.Skip("compile error")
				return
			}
			gotCode := stripSwiftHeader(code)

			if shouldUpdate() {
				if err := os.WriteFile(swiftPath, append(gotCode, '\n'), 0o644); err != nil {
					t.Fatalf("write swift: %v", err)
				}
			} else {
				wantData, err := os.ReadFile(swiftPath)
				if err != nil {
					t.Fatalf("read swift golden: %v", err)
				}
				wantCode := stripSwiftHeader(wantData)
				if !bytes.Equal(gotCode, bytes.TrimSpace(wantCode)) {
					t.Errorf("%s Swift\n\n--- Got ---\n%s\n\n--- Want ---\n%s\n", name, gotCode, bytes.TrimSpace(wantCode))
				}
			}

			outBytes, err := compileAndRunSwiftSrc(t, swiftExe, code)
			if err != nil {
				writeSwiftError(outDir, name, fmt.Errorf("run error: %v\n%s", err, outBytes))
				t.Skip("run error")
				return
			}
			gotOut := bytes.TrimSpace(outBytes)
			outPath := filepath.Join(outDir, name+".out")
			if shouldUpdate() {
				if err := os.WriteFile(outPath, append(gotOut, '\n'), 0o644); err != nil {
					t.Fatalf("write out: %v", err)
				}
			} else {
				want, err := os.ReadFile(outPath)
				if err != nil {
					t.Fatalf("read golden: %v", err)
				}
				want = bytes.TrimSpace(want)
				if !bytes.Equal(gotOut, want) {
					t.Errorf("%s output\n\n--- Got ---\n%s\n\n--- Want ---\n%s\n", name, gotOut, want)
				}
			}
			_ = os.Remove(filepath.Join(outDir, name+".error"))
		})
	}
}
