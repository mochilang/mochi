//go:build slow

package rosetta

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"testing"

	pycode "mochi/compiler/x/python"
	"mochi/golden"
	"mochi/parser"
	"mochi/types"
)

func stripHeader(b []byte) []byte {
	if i := bytes.IndexByte(b, '\n'); i != -1 && bytes.HasPrefix(b, []byte("# Generated by Mochi")) {
		return b[i+1:]
	}
	return b
}

// TestMochiPythonGolden compiles each Mochi source program under
// tests/rosetta/x/Mochi to Python and verifies the generated code
// matches the golden files in tests/rosetta/out/Python.
func TestMochiPythonGolden(t *testing.T) {
	root := findRepoRoot(t)
	outDir := filepath.Join(root, "tests/rosetta/out/Python")

	if err := os.MkdirAll(outDir, 0o755); err != nil {
		t.Fatalf("mkout: %v", err)
	}

	golden.RunFirstFailure(t, "tests/rosetta/x/Mochi", ".mochi", ".out", func(src string) ([]byte, error) {
		name := strings.TrimSuffix(filepath.Base(src), ".mochi")
		pyPath := filepath.Join(outDir, name+".py")

		prog, err := parser.Parse(src)
		if err != nil {
			writePythonError(outDir, name, fmt.Errorf("parse error: %w", err))
			return nil, err
		}
		env := types.NewEnv(nil)
		if errs := types.Check(prog, env); len(errs) > 0 {
			writePythonError(outDir, name, fmt.Errorf("type error: %v", errs[0]))
			return nil, errs[0]
		}
		code, err := pycode.New(env).Compile(prog)
		if err != nil {
			writePythonError(outDir, name, fmt.Errorf("compile error: %w", err))
			return nil, err
		}
		srcCode := stripHeader(bytes.TrimSpace(code))
		if err := os.WriteFile(pyPath, append(srcCode, '\n'), 0o644); err != nil {
			return nil, err
		}

		cmd := exec.Command("python3", pyPath)
		cmd.Env = append(os.Environ(), "MOCHI_NOW_SEED=1")
		out, err := cmd.CombinedOutput()
		got := bytes.TrimSpace(out)
		if err != nil {
			writePythonError(outDir, name, fmt.Errorf("run error: %v\n%s", err, out))
			return nil, err
		}
		_ = os.Remove(filepath.Join(outDir, name+".error"))

		return got, nil
	})
}
