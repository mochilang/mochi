//go:build slow

package rosetta

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"sort"
	"strconv"
	"strings"
	"testing"

	tscode "mochi/compiler/x/ts"
	"mochi/parser"
	"mochi/runtime/mod"
	"mochi/types"
)

func stripTSHeader(b []byte) []byte {
	if i := bytes.IndexByte(b, '\n'); i != -1 && bytes.HasPrefix(b, []byte("// Generated by Mochi")) {
		return b[i+1:]
	}
	return b
}

func TestMochiTypeScriptRunGolden(t *testing.T) {
	if err := tscode.EnsureDeno(); err != nil {
		t.Skipf("deno not installed: %v", err)
	}

	root := findRepoRoot(t)
	srcDir := filepath.Join(root, "tests/rosetta/x/Mochi")
	outDir := filepath.Join(root, "tests/rosetta/out/TypeScript")
	if err := os.MkdirAll(outDir, 0o755); err != nil {
		t.Fatalf("mkout: %v", err)
	}

	outs, err := filepath.Glob(filepath.Join(srcDir, "*.out"))
	if err != nil {
		t.Fatalf("glob: %v", err)
	}
	sort.Strings(outs)
	if len(outs) == 0 {
		t.Fatal("no Mochi Rosetta tests found")
	}

	limit := 0
	if s := os.Getenv("ROSETTA_LIMIT"); s != "" {
		if v, err := strconv.Atoi(s); err == nil {
			limit = v
		}
	}

	for i, outPath := range outs {
		if limit > 0 && i >= limit {
			break
		}
		name := strings.TrimSuffix(filepath.Base(outPath), ".out")
		srcPath := filepath.Join(srcDir, name+".mochi")
		tsPath := filepath.Join(outDir, name+".ts")
		if _, err := os.Stat(srcPath); err != nil {
			t.Fatalf("missing source for %s", name)
		}
		t.Run(name, func(t *testing.T) {
			prog, err := parser.Parse(srcPath)
			if err != nil {
				writeTSError(outDir, name, fmt.Errorf("parse error: %w", err))
				t.Skip("parse error")
				return
			}
			env := types.NewEnv(nil)
			if errs := types.Check(prog, env); len(errs) > 0 {
				writeTSError(outDir, name, fmt.Errorf("type error: %v", errs[0]))
				t.Skip("type error")
				return
			}
			modRoot, _ := mod.FindRoot(filepath.Dir(srcPath))
			if modRoot == "" {
				modRoot = filepath.Dir(srcPath)
			}
			code, err := tscode.New(env, modRoot).Compile(prog)
			if err != nil {
				writeTSError(outDir, name, fmt.Errorf("compile error: %w", err))
				t.Skip("compile error")
				return
			}
			gotTS := stripTSHeader(bytes.TrimSpace(code))
			if shouldUpdate() {
				if err := os.WriteFile(tsPath, append(gotTS, '\n'), 0o644); err != nil {
					t.Fatalf("write ts: %v", err)
				}
				t.Logf("updated: %s", tsPath)
			} else if data, err := os.ReadFile(tsPath); err == nil {
				want := stripTSHeader(bytes.TrimSpace(data))
				if !bytes.Equal(gotTS, want) {
					t.Errorf("%s TypeScript\n\n--- Got ---\n%s\n\n--- Want ---\n%s\n", name, gotTS, want)
				}
			}

			tmpDir := t.TempDir()
			runFile := filepath.Join(tmpDir, name+".ts")
			if err := os.WriteFile(runFile, code, 0o644); err != nil {
				t.Fatalf("write run ts: %v", err)
			}
			cmd := exec.Command("deno", "run", "--quiet", "--allow-net", "--allow-read", runFile)
			cmd.Env = append(os.Environ(), "DENO_TLS_CA_STORE=system")
			var buf bytes.Buffer
			cmd.Stdout = &buf
			cmd.Stderr = &buf
			if err := cmd.Run(); err != nil {
				writeTSError(outDir, name, fmt.Errorf("run error: %v\n%s", err, buf.Bytes()))
				return
			}
			got := bytes.TrimSpace(buf.Bytes())
			want, err := os.ReadFile(outPath)
			if err != nil {
				t.Fatalf("read golden: %v", err)
			}
			want = bytes.TrimSpace(want)
			if !bytes.Equal(got, want) {
				writeTSError(outDir, name, fmt.Errorf("output mismatch\n-- got --\n%s\n-- want --\n%s", got, want))
				return
			}
			if shouldUpdate() {
				if err := os.WriteFile(filepath.Join(outDir, name+".out"), append(got, '\n'), 0o644); err != nil {
					t.Fatalf("write out: %v", err)
				}
				t.Logf("updated: %s", filepath.Join(outDir, name+".out"))
			}
			_ = os.Remove(filepath.Join(outDir, name+".error"))
		})
	}
}
