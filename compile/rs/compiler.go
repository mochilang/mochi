package rscode

import (
	"bytes"
	"fmt"

	"mochi/parser"
	"mochi/types"
)

// Compiler translates a Mochi AST into Rust source code. It currently
// supports only a very small subset of the language sufficient for
// compiling basic examples like examples/leetcode/1.
type Compiler struct {
	buf    bytes.Buffer
	indent int
	env    *types.Env
}

// New creates a new Rust compiler instance.
func New(env *types.Env) *Compiler {
	return &Compiler{env: env}
}

func (c *Compiler) writeln(s string) {
	for i := 0; i < c.indent; i++ {
		c.buf.WriteByte('\t')
	}
	c.buf.WriteString(s)
	c.buf.WriteByte('\n')
}

// Compile returns Rust source code implementing prog.
func (c *Compiler) Compile(prog *parser.Program) ([]byte, error) {
	c.writeln("// Generated by Mochi Rust compiler (experimental)")
	c.writeln("fn main() {")
	c.indent++
	for _, s := range prog.Statements {
		if s.Fun != nil {
			// function declarations will be emitted after main
			continue
		}
		if err := c.compileStmt(s); err != nil {
			return nil, err
		}
	}
	c.indent--
	c.writeln("}")

	// Append function declarations at top-level after main for simplicity.
	for _, s := range prog.Statements {
		if s.Fun != nil {
			c.writeln("")
			if err := c.compileFunStmt(s.Fun); err != nil {
				return nil, err
			}
		}
	}

	return c.buf.Bytes(), nil
}

func (c *Compiler) compileStmt(s *parser.Statement) error {
	switch {
	case s.Let != nil:
		expr, err := c.compileExpr(s.Let.Value)
		if err != nil {
			return err
		}
		c.writeln(fmt.Sprintf("let mut %s = %s;", s.Let.Name, expr))
	case s.Expr != nil:
		expr, err := c.compileExpr(s.Expr.Expr)
		if err != nil {
			return err
		}
		c.writeln(fmt.Sprintf("%s;", expr))
	case s.For != nil:
		return c.compileForStmt(s.For)
	case s.If != nil:
		return c.compileIfStmt(s.If)
	case s.Return != nil:
		expr, err := c.compileExpr(s.Return.Value)
		if err != nil {
			return err
		}
		c.writeln(fmt.Sprintf("return %s;", expr))
	case s.Fun != nil:
		return c.compileFunStmt(s.Fun)
	default:
		// unsupported statement type
	}
	return nil
}

func (c *Compiler) compileFunStmt(fun *parser.FunStmt) error {
	params := make([]string, len(fun.Params))
	for i, p := range fun.Params {
		params[i] = fmt.Sprintf("%s: Vec<i32>", p.Name)
		if p.Type != nil {
			// if parameter type is int or list<int>
			if p.Type.Simple != nil && *p.Type.Simple == "int" {
				params[i] = fmt.Sprintf("%s: i32", p.Name)
			}
			if p.Type.Generic != nil && p.Type.Generic.Name == "list" {
				params[i] = fmt.Sprintf("%s: Vec<i32>", p.Name)
			}
		}
	}
	ret := "()"
	if fun.Return != nil {
		if fun.Return.Simple != nil && *fun.Return.Simple == "int" {
			ret = "i32"
		}
		if fun.Return.Generic != nil && fun.Return.Generic.Name == "list" {
			ret = "Vec<i32>"
		}
	}
	c.writeln(fmt.Sprintf("fn %s(%s) -> %s {", fun.Name, join(params, ", "), ret))
	c.indent++
	for _, st := range fun.Body {
		switch {
		case st.Let != nil:
			expr, err := c.compileExpr(st.Let.Value)
			if err != nil {
				return err
			}
			c.writeln(fmt.Sprintf("let mut %s = %s;", st.Let.Name, expr))
		case st.For != nil:
			if err := c.compileForStmt(st.For); err != nil {
				return err
			}
		case st.If != nil:
			if err := c.compileIfStmt(st.If); err != nil {
				return err
			}
		case st.Return != nil:
			expr, err := c.compileExpr(st.Return.Value)
			if err != nil {
				return err
			}
			c.writeln(fmt.Sprintf("return %s;", expr))
		}
	}
	c.indent--
	c.writeln("}")
	return nil
}

func (c *Compiler) compileForStmt(f *parser.ForStmt) error {
	start, err := c.compileExpr(f.Source)
	if err != nil {
		return err
	}
	end, err := c.compileExpr(f.RangeEnd)
	if err != nil {
		return err
	}
	c.writeln(fmt.Sprintf("for %s in %s..%s {", f.Name, start, end))
	c.indent++
	for _, st := range f.Body {
		if err := c.compileStmt(st); err != nil {
			return err
		}
	}
	c.indent--
	c.writeln("}")
	return nil
}

func (c *Compiler) compileIfStmt(i *parser.IfStmt) error {
	cond, err := c.compileExpr(i.Cond)
	if err != nil {
		return err
	}
	c.writeln(fmt.Sprintf("if %s {", cond))
	c.indent++
	for _, st := range i.Then {
		if err := c.compileStmt(st); err != nil {
			return err
		}
	}
	c.indent--
	if len(i.Then) == 0 {
		c.writeln("}")
	} else {
		c.writeln("}")
	}
	if i.Else != nil {
		c.writeln("else {")
		c.indent++
		for _, st := range i.Else {
			if err := c.compileStmt(st); err != nil {
				return err
			}
		}
		c.indent--
		c.writeln("}")
	}
	return nil
}

func (c *Compiler) compileExpr(e *parser.Expr) (string, error) {
	if e == nil {
		return "", nil
	}
	b := e.Binary
	lhs, err := c.compileUnary(b.Left)
	if err != nil {
		return "", err
	}
	if len(b.Right) == 0 {
		return lhs, nil
	}
	expr := lhs
	for _, op := range b.Right {
		rhs, err := c.compilePostfix(op.Right)
		if err != nil {
			return "", err
		}
		switch op.Op {
		case "+", "-", "*", "/", "%", "==", "<", ">", "<=", ">=":
			expr = fmt.Sprintf("(%s %s %s)", expr, op.Op, rhs)
		default:
			return "", fmt.Errorf("unsupported binary op: %s", op.Op)
		}
	}
	return expr, nil
}

func (c *Compiler) compileUnary(u *parser.Unary) (string, error) {
	val, err := c.compilePostfix(u.Value)
	if err != nil {
		return "", err
	}
	for i := len(u.Ops) - 1; i >= 0; i-- {
		op := u.Ops[i]
		if op == "-" {
			val = fmt.Sprintf("-%s", val)
		} else if op == "!" {
			val = fmt.Sprintf("!%s", val)
		}
	}
	return val, nil
}

func (c *Compiler) compilePostfix(p *parser.PostfixExpr) (string, error) {
	expr, err := c.compilePrimary(p.Target)
	if err != nil {
		return "", err
	}
	for _, op := range p.Ops {
		if op.Call != nil {
			args := make([]string, len(op.Call.Args))
			for i, a := range op.Call.Args {
				av, err := c.compileExpr(a)
				if err != nil {
					return "", err
				}
				args[i] = av
			}
			if expr == "print" {
				expr = fmt.Sprintf("println!(\"{}\", %s)", join(args, ", "))
			} else if expr == "len" {
				expr = fmt.Sprintf("%s.len()", args[0])
			} else {
				expr = fmt.Sprintf("%s(%s)", expr, join(args, ", "))
			}
		} else if op.Index != nil {
			idx, err := c.compileExpr(op.Index.Start)
			if err != nil {
				return "", err
			}
			expr = fmt.Sprintf("%s[%s as usize]", expr, idx)
		}
	}
	return expr, nil
}

func (c *Compiler) compilePrimary(p *parser.Primary) (string, error) {
	switch {
	case p.Lit != nil:
		return c.compileLiteral(p.Lit)
	case p.List != nil:
		elems := make([]string, len(p.List.Elems))
		for i, e := range p.List.Elems {
			v, err := c.compileExpr(e)
			if err != nil {
				return "", err
			}
			if isSimpleSelector(e) {
				v = fmt.Sprintf("%s as i32", v)
			}
			elems[i] = v
		}
		return fmt.Sprintf("vec![%s]", join(elems, ", ")), nil
	case p.Selector != nil:
		return join(append([]string{p.Selector.Root}, p.Selector.Tail...), "."), nil
	case p.Call != nil:
		args := make([]string, len(p.Call.Args))
		for i, a := range p.Call.Args {
			v, err := c.compileExpr(a)
			if err != nil {
				return "", err
			}
			args[i] = v
		}
		if p.Call.Func == "print" {
			return fmt.Sprintf("println!(\"{}\", %s)", join(args, ", ")), nil
		}
		if p.Call.Func == "len" {
			return fmt.Sprintf("%s.len()", args[0]), nil
		}
		return fmt.Sprintf("%s(%s)", p.Call.Func, join(args, ", ")), nil
	default:
		if p.Group != nil {
			return c.compileExpr(p.Group)
		}
	}
	return "", fmt.Errorf("unsupported expression")
}

func (c *Compiler) compileLiteral(l *parser.Literal) (string, error) {
	switch {
	case l.Int != nil:
		return fmt.Sprintf("%d", *l.Int), nil
	case l.Str != nil:
		return fmt.Sprintf("\"%s\"", *l.Str), nil
	case l.Bool != nil:
		if *l.Bool {
			return "true", nil
		}
		return "false", nil
	}
	return "", fmt.Errorf("unsupported literal")
}

func join(parts []string, sep string) string {
	var buf bytes.Buffer
	for i, p := range parts {
		if i > 0 {
			buf.WriteString(sep)
		}
		buf.WriteString(p)
	}
	return buf.String()
}

func isSimpleSelector(e *parser.Expr) bool {
	if e == nil {
		return false
	}
	if e.Binary == nil || e.Binary.Left == nil {
		return false
	}
	if len(e.Binary.Right) > 0 {
		return false
	}
	u := e.Binary.Left
	if len(u.Ops) > 0 {
		return false
	}
	if u.Value == nil || u.Value.Target == nil {
		return false
	}
	sel := u.Value.Target.Selector
	return sel != nil && len(sel.Tail) == 0
}
