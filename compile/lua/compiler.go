package luacode

import (
	"bytes"
	"fmt"
	"sort"
	"strings"

	"mochi/parser"
)

// Compiler translates a Mochi AST into Lua source code. It implements a very
// small subset of the language sufficient for the compiler tests.
type Compiler struct {
	buf       bytes.Buffer
	indent    int
	helpers   map[string]bool
	loop      int
	loopStack []int
}

// New creates a new Lua compiler.
func New() *Compiler {
	return &Compiler{helpers: make(map[string]bool), loopStack: []int{}}
}

func (c *Compiler) Compile(prog *parser.Program) ([]byte, error) {
	c.buf.Reset()
	c.writeln("-- Generated by Mochi Lua compiler")
	c.writeln("")

	// function declarations
	for _, s := range prog.Statements {
		if s.Fun != nil {
			if err := c.compileFunStmt(s.Fun); err != nil {
				return nil, err
			}
			c.writeln("")
		}
	}

	// test blocks
	for _, s := range prog.Statements {
		if s.Test != nil {
			if err := c.compileTestBlock(s.Test); err != nil {
				return nil, err
			}
			c.writeln("")
		}
	}

	c.writeln("function main()")
	c.indent++
	for _, s := range prog.Statements {
		if s.Fun != nil || s.Test != nil {
			continue
		}
		if err := c.compileStmt(s); err != nil {
			return nil, err
		}
	}
	for _, s := range prog.Statements {
		if s.Test != nil {
			name := sanitizeName(s.Test.Name)
			c.writeln(fmt.Sprintf("%s()", name))
		}
	}
	c.indent--
	c.writeln("end")
	c.writeln("")

	if len(c.helpers) > 0 {
		c.emitRuntime()
	}

	c.writeln("if ... == nil then")
	c.indent++
	c.writeln("main()")
	c.indent--
	c.writeln("end")

	return c.buf.Bytes(), nil
}

// --- Statements ---
func (c *Compiler) compileStmt(s *parser.Statement) error {
	switch {
	case s.Let != nil:
		return c.compileLet(s.Let)
	case s.Var != nil:
		return c.compileLet(&parser.LetStmt{Name: s.Var.Name, Value: s.Var.Value})
	case s.Assign != nil:
		val, err := c.compileExpr(s.Assign.Value)
		if err != nil {
			return err
		}
		c.writeln(fmt.Sprintf("%s = %s", sanitizeName(s.Assign.Name), val))
		return nil
	case s.Return != nil:
		val, err := c.compileExpr(s.Return.Value)
		if err != nil {
			return err
		}
		c.writeln("return " + val)
		return nil
	case s.Expr != nil:
		expr, err := c.compileExpr(s.Expr.Expr)
		if err != nil {
			return err
		}
		c.writeln(expr)
		return nil
	case s.If != nil:
		return c.compileIf(s.If)
	case s.While != nil:
		return c.compileWhile(s.While)
	case s.For != nil:
		return c.compileFor(s.For)
	case s.Break != nil:
		c.writeln("break")
		return nil
	case s.Continue != nil:
		if len(c.loopStack) == 0 {
			return fmt.Errorf("continue not inside loop")
		}
		id := c.loopStack[len(c.loopStack)-1]
		c.writeln(fmt.Sprintf("goto __continue%d", id))
		return nil
	case s.Expect != nil:
		val, err := c.compileExpr(s.Expect.Value)
		if err != nil {
			return err
		}
		c.writeln(fmt.Sprintf("if not (%s) then error('expect failed') end", val))
		return nil
	case s.Stream != nil:
		return c.compileStreamDecl(s.Stream)
	case s.On != nil:
		return c.compileOnHandler(s.On)
	case s.Emit != nil:
		return c.compileEmit(s.Emit)
	default:
		return nil
	}
}

func (c *Compiler) compileLet(s *parser.LetStmt) error {
	val := "nil"
	if s.Value != nil {
		v, err := c.compileExpr(s.Value)
		if err != nil {
			return err
		}
		val = v
	}
	c.writeln(fmt.Sprintf("local %s = %s", sanitizeName(s.Name), val))
	return nil
}

func (c *Compiler) compileIf(stmt *parser.IfStmt) error {
	cond, err := c.compileExpr(stmt.Cond)
	if err != nil {
		return err
	}
	c.writeln("if " + cond + " then")
	c.indent++
	for _, s := range stmt.Then {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	if stmt.ElseIf != nil {
		c.writeln("elseif ")
		return fmt.Errorf("nested else-if not supported")
	}
	if len(stmt.Else) > 0 {
		c.writeln("else")
		c.indent++
		for _, s := range stmt.Else {
			if err := c.compileStmt(s); err != nil {
				return err
			}
		}
		c.indent--
	}
	c.writeln("end")
	return nil
}

func (c *Compiler) compileWhile(stmt *parser.WhileStmt) error {
	id := c.loop
	c.loop++
	c.loopStack = append(c.loopStack, id)
	cond, err := c.compileExpr(stmt.Cond)
	if err != nil {
		return err
	}
	c.writeln("while " + cond + " do")
	c.indent++
	for _, s := range stmt.Body {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.writeln(fmt.Sprintf("::__continue%d::", id))
	c.indent--
	c.writeln("end")
	c.loopStack = c.loopStack[:len(c.loopStack)-1]
	c.loop--
	return nil
}

func (c *Compiler) compileFor(stmt *parser.ForStmt) error {
	id := c.loop
	c.loop++
	c.loopStack = append(c.loopStack, id)
	name := sanitizeName(stmt.Name)
	if stmt.RangeEnd != nil {
		start, err := c.compileExpr(stmt.Source)
		if err != nil {
			return err
		}
		end, err := c.compileExpr(stmt.RangeEnd)
		if err != nil {
			return err
		}
		c.writeln(fmt.Sprintf("for %s = %s, %s - 1 do", name, start, end))
	} else {
		src, err := c.compileExpr(stmt.Source)
		if err != nil {
			return err
		}
		c.use("_iter")
		c.writeln(fmt.Sprintf("for _, %s in ipairs(_iter(%s)) do", name, src))
	}
	c.indent++
	for _, s := range stmt.Body {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.writeln(fmt.Sprintf("::__continue%d::", id))
	c.indent--
	c.writeln("end")
	c.loopStack = c.loopStack[:len(c.loopStack)-1]
	c.loop--
	return nil
}

func (c *Compiler) compileFunStmt(fun *parser.FunStmt) error {
	name := sanitizeName(fun.Name)
	params := make([]string, len(fun.Params))
	for i, p := range fun.Params {
		params[i] = sanitizeName(p.Name)
	}
	c.writeln("function " + name + "(" + strings.Join(params, ", ") + ")")
	c.indent++
	for _, s := range fun.Body {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	c.writeln("end")
	return nil
}

func (c *Compiler) compileTestBlock(t *parser.TestBlock) error {
	name := sanitizeName(t.Name)
	c.writeln("function " + name + "()")
	c.indent++
	for _, s := range t.Body {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	c.writeln("end")
	return nil
}

func (c *Compiler) compileStreamDecl(s *parser.StreamDecl) error {
	varName := unexportName(sanitizeName(s.Name)) + "Stream"
	c.use("_stream")
	c.writeln(fmt.Sprintf("local %s = Stream.new(\"%s\")", varName, s.Name))
	return nil
}

func (c *Compiler) compileOnHandler(h *parser.OnHandler) error {
	streamVar := unexportName(sanitizeName(h.Stream)) + "Stream"
	handlerName := fmt.Sprintf("_handler_%d", c.loop)
	c.loop++
	c.writeln(fmt.Sprintf("local function %s(ev)", handlerName))
	c.indent++
	alias := sanitizeName(h.Alias)
	c.writeln(fmt.Sprintf("local %s = ev", alias))
	for _, stmt := range h.Body {
		if err := c.compileStmt(stmt); err != nil {
			return err
		}
	}
	c.indent--
	c.writeln("end")
	c.writeln(fmt.Sprintf("%s:register(%s)", streamVar, handlerName))
	return nil
}

func (c *Compiler) compileEmit(e *parser.EmitStmt) error {
	streamVar := unexportName(sanitizeName(e.Stream)) + "Stream"
	parts := make([]string, len(e.Fields))
	for i, f := range e.Fields {
		v, err := c.compileExpr(f.Value)
		if err != nil {
			return err
		}
		parts[i] = fmt.Sprintf("%s=%s", sanitizeName(f.Name), v)
	}
	c.writeln(fmt.Sprintf("%s:append({%s})", streamVar, strings.Join(parts, ", ")))
	return nil
}

// --- Expressions ---
func (c *Compiler) compileExpr(e *parser.Expr) (string, error) {
	return c.compileBinaryExpr(e.Binary)
}

func (c *Compiler) compileBinaryExpr(b *parser.BinaryExpr) (string, error) {
	expr, err := c.compileUnary(b.Left)
	if err != nil {
		return "", err
	}
	for _, op := range b.Right {
		r, err := c.compilePostfix(op.Right)
		if err != nil {
			return "", err
		}
		if op.Op == "&&" {
			expr = fmt.Sprintf("(%s and %s)", expr, r)
		} else if op.Op == "||" {
			expr = fmt.Sprintf("(%s or %s)", expr, r)
		} else {
			oper := op.Op
			if oper == "/" {
				oper = "//"
			}
			expr = fmt.Sprintf("(%s %s %s)", expr, oper, r)
		}
	}
	return expr, nil
}

func (c *Compiler) compileUnary(u *parser.Unary) (string, error) {
	val, err := c.compilePostfix(u.Value)
	if err != nil {
		return "", err
	}
	for i := len(u.Ops) - 1; i >= 0; i-- {
		op := u.Ops[i]
		if op == "!" {
			val = fmt.Sprintf("(not %s)", val)
		} else {
			val = fmt.Sprintf("(%s%s)", op, val)
		}
	}
	return val, nil
}

func (c *Compiler) compilePostfix(p *parser.PostfixExpr) (string, error) {
	expr, err := c.compilePrimary(p.Target)
	if err != nil {
		return "", err
	}
	for _, op := range p.Ops {
		if op.Call != nil {
			args := make([]string, len(op.Call.Args))
			for i, a := range op.Call.Args {
				v, err := c.compileExpr(a)
				if err != nil {
					return "", err
				}
				args[i] = v
			}
			expr = fmt.Sprintf("%s(%s)", expr, strings.Join(args, ", "))
		} else if op.Index != nil {
			idx, err := c.compileExpr(op.Index.Start)
			if err != nil {
				return "", err
			}
			c.use("_index")
			expr = fmt.Sprintf("_index(%s, %s)", expr, idx)
		}
	}
	return expr, nil
}

func (c *Compiler) compilePrimary(p *parser.Primary) (string, error) {
	switch {
	case p.Lit != nil:
		return c.compileLiteral(p.Lit)
	case p.List != nil:
		elems := make([]string, len(p.List.Elems))
		for i, e := range p.List.Elems {
			v, err := c.compileExpr(e)
			if err != nil {
				return "", err
			}
			elems[i] = v
		}
		return "{" + strings.Join(elems, ", ") + "}", nil
	case p.Map != nil:
		items := make([]string, len(p.Map.Items))
		for i, it := range p.Map.Items {
			k, err := c.compileExpr(it.Key)
			if err != nil {
				return "", err
			}
			v, err := c.compileExpr(it.Value)
			if err != nil {
				return "", err
			}
			items[i] = fmt.Sprintf("[%s]=%s", k, v)
		}
		return "{" + strings.Join(items, ", ") + "}", nil
	case p.Selector != nil:
		expr := sanitizeName(p.Selector.Root)
		for _, s := range p.Selector.Tail {
			expr += "." + sanitizeName(s)
		}
		return expr, nil
	case p.Call != nil:
		return c.compileCallExpr(p.Call)
	case p.FunExpr != nil:
		return c.compileFunExpr(p.FunExpr)
	case p.Group != nil:
		e, err := c.compileExpr(p.Group)
		if err != nil {
			return "", err
		}
		return "(" + e + ")", nil
	case p.Match != nil:
		return c.compileMatchExpr(p.Match)
	case p.Generate != nil:
		return c.compileGenerateExpr(p.Generate)
	default:
		return "nil", fmt.Errorf("invalid expression")
	}
}

func (c *Compiler) compileCallExpr(call *parser.CallExpr) (string, error) {
	args := make([]string, len(call.Args))
	for i, a := range call.Args {
		v, err := c.compileExpr(a)
		if err != nil {
			return "", err
		}
		args[i] = v
	}
	argStr := strings.Join(args, ", ")
	switch call.Func {
	case "print":
		if len(args) > 1 {
			return fmt.Sprintf("print(%s)", strings.Join(args, " .. \" \" .. ")), nil
		}
		return fmt.Sprintf("print(%s)", argStr), nil
	case "len":
		return fmt.Sprintf("#(%s)", argStr), nil
	default:
		return fmt.Sprintf("%s(%s)", sanitizeName(call.Func), argStr), nil
	}
}

func (c *Compiler) compileGenerateExpr(g *parser.GenerateExpr) (string, error) {
	if g.Target == "embedding" {
		var text string
		for _, f := range g.Fields {
			if f.Name == "text" {
				v, err := c.compileExpr(f.Value)
				if err != nil {
					return "", err
				}
				text = v
			}
		}
		if text == "" {
			text = "\"\""
		}
		c.use("_gen_embed")
		return fmt.Sprintf("_gen_embed(%s)", text), nil
	}
	var prompt string
	for _, f := range g.Fields {
		if f.Name == "prompt" {
			v, err := c.compileExpr(f.Value)
			if err != nil {
				return "", err
			}
			prompt = v
		}
	}
	if prompt == "" {
		prompt = "\"\""
	}
	c.use("_gen_text")
	return fmt.Sprintf("_gen_text(%s)", prompt), nil
}

func (c *Compiler) compileFunExpr(fn *parser.FunExpr) (string, error) {
	params := make([]string, len(fn.Params))
	for i, p := range fn.Params {
		params[i] = sanitizeName(p.Name)
	}
	if fn.ExprBody != nil {
		body, err := c.compileExpr(fn.ExprBody)
		if err != nil {
			return "", err
		}
		return fmt.Sprintf("function(%s) return %s end", strings.Join(params, ", "), body), nil
	}
	return "", fmt.Errorf("block function expressions not supported")
}

func (c *Compiler) compileMatchExpr(m *parser.MatchExpr) (string, error) {
	target, err := c.compileExpr(m.Target)
	if err != nil {
		return "", err
	}
	var b strings.Builder
	b.WriteString("(function(_t)\n")
	for i, cs := range m.Cases {
		pat, err := c.compileExpr(cs.Pattern)
		if err != nil {
			return "", err
		}
		res, err := c.compileExpr(cs.Result)
		if err != nil {
			return "", err
		}
		if i == 0 {
			b.WriteString("  if _t == " + pat + " then\n")
		} else {
			b.WriteString("  elseif _t == " + pat + " then\n")
		}
		b.WriteString("    return " + res + "\n")
	}
	b.WriteString("  else\n    return nil\n  end\nend)(" + target + ")")
	return b.String(), nil
}

func (c *Compiler) compileLiteral(l *parser.Literal) (string, error) {
	switch {
	case l.Int != nil:
		return fmt.Sprintf("%d", *l.Int), nil
	case l.Float != nil:
		return fmt.Sprintf("%f", *l.Float), nil
	case l.Str != nil:
		return fmt.Sprintf("%q", *l.Str), nil
	case l.Bool != nil:
		if *l.Bool {
			return "true", nil
		}
		return "false", nil
	default:
		return "nil", fmt.Errorf("invalid literal")
	}
}

// --- Helpers ---
func (c *Compiler) writeln(s string) {
	c.writeIndent()
	c.buf.WriteString(s)
	c.buf.WriteByte('\n')
}
func (c *Compiler) writeIndent() {
	for i := 0; i < c.indent; i++ {
		c.buf.WriteByte('\t')
	}
}

func (c *Compiler) use(name string) { c.helpers[name] = true }

func (c *Compiler) emitRuntime() {
	names := make([]string, 0, len(c.helpers))
	for n := range c.helpers {
		names = append(names, n)
	}
	sort.Strings(names)
	for _, n := range names {
		c.buf.WriteString(helperMap[n])
	}
}

func sanitizeName(name string) string {
	var b strings.Builder
	for i, r := range name {
		if r == '_' || ('0' <= r && r <= '9' && i > 0) || ('A' <= r && r <= 'Z') || ('a' <= r && r <= 'z') {
			b.WriteRune(r)
		} else {
			b.WriteRune('_')
		}
	}
	s := b.String()
	if s == "" || !((s[0] >= 'A' && s[0] <= 'Z') || (s[0] >= 'a' && s[0] <= 'z') || s[0] == '_') {
		s = "_" + s
	}
	return s
}

func unexportName(name string) string {
	if name == "" {
		return ""
	}
	runes := []rune(name)
	if runes[0] >= 'A' && runes[0] <= 'Z' {
		runes[0] = runes[0] - 'A' + 'a'
	}
	return string(runes)
}

var helperIndex = "function _index(v, k)\n" +
	"  if type(v) == 'table' then\n" +
	"    if v[1] ~= nil then\n" +
	"      if k < 0 then k = #v + k + 1 else k = k + 1 end\n" +
	"      return v[k]\n" +
	"    else\n" +
	"      return v[k]\n" +
	"    end\n" +
	"  elseif type(v) == 'string' then\n" +
	"    if k < 0 then k = #v + k + 1 else k = k + 1 end\n" +
	"    return string.sub(v, k, k)\n" +
	"  end\n" +
	"end\n"

var helperIter = "function _iter(v)\n" +
	"  if type(v) == 'table' then\n" +
	"    if v[1] ~= nil then return v end\n" +
	"    local keys = {}\n" +
	"    local i = 1\n" +
	"    for k,_ in pairs(v) do keys[i]=k; i=i+1 end\n" +
	"    return keys\n" +
	"  elseif type(v) == 'string' then\n" +
	"    local t = {}\n" +
	"    local i = 1\n" +
	"    for c in v:gmatch('.') do t[i]=c; i=i+1 end\n" +
	"    return t\n" +
	"  end\n" +
	"  return v\n" +
	"end\n"

var helperGenText = "function _gen_text(prompt)\n  return prompt\nend\n"
var helperGenEmbed = "function _gen_embed(text)\n  local t={} for i=1,#text do t[i]=text:byte(i) end return t\nend\n"
var helperStream = "Stream = {}\nStream.__index = Stream\nfunction Stream.new(name) return setmetatable({name=name,handlers={}}, Stream) end\nfunction Stream:append(data) for _,h in ipairs(self.handlers) do h(data) end end\nfunction Stream:register(h) table.insert(self.handlers, h) end\n"

var helperMap = map[string]string{
	"_index":     helperIndex,
	"_iter":      helperIter,
	"_gen_text":  helperGenText,
	"_gen_embed": helperGenEmbed,
	"_stream":    helperStream,
}
