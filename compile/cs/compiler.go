package cscode

import (
	"bytes"
	"fmt"
	"strconv"
	"strings"

	"mochi/parser"
	"mochi/types"
)

// Compiler translates a Mochi AST into C# source code.
type Compiler struct {
	buf          bytes.Buffer
	indent       int
	inFun        int
	env          *types.Env
	tempVarCount int
	helpers      map[string]bool
	useLinq      bool
	varTypes     map[string]string
}

// New creates a new C# compiler.
func New(env *types.Env) *Compiler {
	return &Compiler{env: env, helpers: make(map[string]bool), varTypes: make(map[string]string), inFun: 0}
}

func (c *Compiler) writeln(s string) {
	for i := 0; i < c.indent; i++ {
		c.buf.WriteByte('\t')
	}
	c.buf.WriteString(s)
	c.buf.WriteByte('\n')
}

// Compile converts prog into C# source code.
func (c *Compiler) Compile(prog *parser.Program) ([]byte, error) {
	c.buf.Reset()
	c.scanProgram(prog)
	c.writeln("// Generated by Mochi C# compiler")
	c.writeln("using System;")
	c.writeln("using System.Collections.Generic;")
	if c.useLinq {
		c.writeln("using System.Linq;")
	}
	c.writeln("using System.Text.Json;")
	c.writeln("")
	// Type declarations
	for _, s := range prog.Statements {
		if s.Type != nil {
			if err := c.compileTypeDecl(s.Type); err != nil {
				return nil, err
			}
			c.writeln("")
		}
	}

	c.writeln("public class Program {")
	c.indent++

	// Function declarations
	for _, s := range prog.Statements {
		if s.Fun != nil {
			if err := c.compileFunStmt(s.Fun); err != nil {
				return nil, err
			}
			c.writeln("")
		}
	}

	// Test block declarations
	for _, s := range prog.Statements {
		if s.Test != nil {
			if err := c.compileTestBlock(s.Test); err != nil {
				return nil, err
			}
			c.writeln("")
		}
	}

	// Main method
	c.writeln("public static void Main() {")
	c.indent++
	for _, s := range prog.Statements {
		if s.Fun != nil || s.Test != nil || s.Type != nil {
			continue
		}
		if err := c.compileStmt(s); err != nil {
			return nil, err
		}
	}
	for _, s := range prog.Statements {
		if s.Test != nil {
			name := "test_" + sanitizeName(s.Test.Name)
			c.writeln(name + "();")
		}
	}
	c.indent--
	c.writeln("}")
	if len(c.helpers) > 0 {
		for name := range c.helpers {
			switch name {
			case "_count":
				c.writeln("static int _count(dynamic v) {")
				c.indent++
				c.writeln("if (v is string) {")
				c.indent++
				c.writeln("return ((string)v).Length;")
				c.indent--
				c.writeln("}")
				c.writeln("if (v is System.Collections.ICollection c) {")
				c.indent++
				c.writeln("return c.Count;")
				c.indent--
				c.writeln("}")
				c.writeln("throw new Exception(\"count() expects list or string\");")
				c.indent--
				c.writeln("}")
			case "_avg":
				c.writeln("static double _avg(dynamic v) {")
				c.indent++
				c.writeln("if (v == null) return 0.0;")
				c.writeln("int _n = 0;")
				c.writeln("double _sum = 0;")
				c.writeln("foreach (var it in v) {")
				c.indent++
				c.writeln("_sum += Convert.ToDouble(it);")
				c.writeln("_n++;")
				c.indent--
				c.writeln("}")
				c.writeln("return _n == 0 ? 0.0 : _sum / _n;")
				c.indent--
				c.writeln("}")
			case "_in":
				c.writeln("static bool _in(dynamic item, dynamic col) {")
				c.indent++
				c.writeln("if (col is string s && item is string sub) {")
				c.indent++
				c.writeln("return s.Contains(sub);")
				c.indent--
				c.writeln("}")
				c.writeln("if (col is System.Collections.IDictionary d) {")
				c.indent++
				c.writeln("return d.Contains(item);")
				c.indent--
				c.writeln("}")
				c.writeln("if (col is System.Collections.IEnumerable e) {")
				c.indent++
				c.writeln("foreach (var it in e) {")
				c.indent++
				c.writeln("if (Equals(it, item)) return true;")
				c.indent--
				c.writeln("}")
				c.writeln("return false;")
				c.indent--
				c.writeln("}")
				c.writeln("return false;")
				c.indent--
				c.writeln("}")
			case "_cast":
				c.writeln("static T _cast<T>(dynamic v) {")
				c.indent++
				c.writeln("if (v is T tv) return tv;")
				c.writeln("if (typeof(T) == typeof(int)) {")
				c.indent++
				c.writeln("if (v is int) return (T)v;")
				c.writeln("if (v is double) return (T)(object)(int)(double)v;")
				c.writeln("if (v is float) return (T)(object)(int)(float)v;")
				c.indent--
				c.writeln("}")
				c.writeln("if (typeof(T) == typeof(double)) {")
				c.indent++
				c.writeln("if (v is int) return (T)(object)(double)(int)v;")
				c.writeln("if (v is double) return (T)v;")
				c.writeln("if (v is float) return (T)(object)(double)(float)v;")
				c.indent--
				c.writeln("}")
				c.writeln("if (typeof(T) == typeof(float)) {")
				c.indent++
				c.writeln("if (v is int) return (T)(object)(float)(int)v;")
				c.writeln("if (v is double) return (T)(object)(float)(double)v;")
				c.writeln("if (v is float) return (T)v;")
				c.indent--
				c.writeln("}")
				c.writeln("if (v is System.Collections.Generic.IDictionary<object, object> dm) {")
				c.indent++
				c.writeln("var m = new Dictionary<string, object>();")
				c.writeln("foreach (var kv in dm) m[Convert.ToString(kv.Key)] = kv.Value;")
				c.writeln("v = m;")
				c.indent--
				c.writeln("}")
				c.writeln("var json = JsonSerializer.Serialize(v);")
				c.writeln("return JsonSerializer.Deserialize<T>(json);")
				c.indent--
				c.writeln("}")
			case "_indexString":
				c.writeln("static string _indexString(string s, int i) {")
				c.indent++
				c.writeln("if (i < 0) i += s.Length;")
				c.writeln("if (i < 0 || i >= s.Length) throw new Exception(\"index out of range\");")
				c.writeln("return s[i].ToString();")
				c.indent--
				c.writeln("}")
			case "_equal":
				c.writeln("static bool _equal(dynamic a, dynamic b) {")
				c.indent++
				c.writeln("if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string) {")
				c.indent++
				c.writeln("var ea = ae.GetEnumerator();")
				c.writeln("var eb = be.GetEnumerator();")
				c.writeln("while (true) {")
				c.indent++
				c.writeln("bool ha = ea.MoveNext();")
				c.writeln("bool hb = eb.MoveNext();")
				c.writeln("if (ha != hb) return false;")
				c.writeln("if (!ha) break;")
				c.writeln("if (!_equal(ea.Current, eb.Current)) return false;")
				c.indent--
				c.writeln("}")
				c.writeln("return true;")
				c.indent--
				c.writeln("}")
				c.writeln("return Equals(a, b);")
				c.indent--
				c.writeln("}")
			}
			c.writeln("")
		}
	}
	c.indent--
	c.writeln("}")

	code := c.buf.Bytes()
	if _, ok := c.helpers["_cast"]; !ok {
		code = bytes.Replace(code, []byte("using System.Text.Json;\n"), nil, 1)
	}
	return code, nil
}

func (c *Compiler) compileFunStmt(fn *parser.FunStmt) error {
	params := make([]string, len(fn.Params))
	origVars := c.varTypes
	c.varTypes = make(map[string]string)
	for i, p := range fn.Params {
		pType := csType(p.Type)
		name := sanitizeName(p.Name)
		c.varTypes[name] = pType
		params[i] = fmt.Sprintf("%s %s", pType, name)
	}
	ret := csType(fn.Return)
	if ret == "" {
		ret = "void"
	}
	prefix := "static "
	if c.inFun > 0 {
		prefix = ""
	}
	c.writeln(fmt.Sprintf("%s%s %s(%s) {", prefix, ret, sanitizeName(fn.Name), strings.Join(params, ", ")))
	c.indent++
	c.inFun++
	for _, stmt := range fn.Body {
		if err := c.compileStmt(stmt); err != nil {
			return err
		}
	}
	c.inFun--
	c.indent--
	c.writeln("}")
	c.varTypes = origVars
	return nil
}

func (c *Compiler) compileTestBlock(t *parser.TestBlock) error {
	name := "test_" + sanitizeName(t.Name)
	c.writeln(fmt.Sprintf("static void %s() {", name))
	c.indent++
	for _, s := range t.Body {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	c.writeln("}")
	return nil
}

func (c *Compiler) compileExpect(e *parser.ExpectStmt) error {
	expr, err := c.compileExpr(e.Value)
	if err != nil {
		return err
	}
	c.writeln(fmt.Sprintf("if (!(%s)) throw new Exception(\"expect failed\");", expr))
	return nil
}

func (c *Compiler) compileTypeDecl(t *parser.TypeDecl) error {
	name := sanitizeName(t.Name)
	if len(t.Variants) > 0 {
		iface := fmt.Sprintf("public interface %s { void is%s(); }", name, name)
		c.writeln(iface)
		for _, v := range t.Variants {
			vname := sanitizeName(v.Name)
			c.writeln(fmt.Sprintf("public class %s : %s {", vname, name))
			c.indent++
			for _, f := range v.Fields {
				typ := csType(f.Type)
				c.writeln(fmt.Sprintf("public %s %s;", typ, sanitizeName(f.Name)))
			}
			c.writeln(fmt.Sprintf("public void is%s() {}", name))
			c.indent--
			c.writeln("}")
		}
		return nil
	}
	c.writeln(fmt.Sprintf("public class %s {", name))
	c.indent++
	for _, m := range t.Members {
		if m.Field != nil {
			typ := csType(m.Field.Type)
			c.writeln(fmt.Sprintf("public %s %s;", typ, sanitizeName(m.Field.Name)))
		}
	}
	c.indent--
	c.writeln("}")
	return nil
}

func (c *Compiler) scanProgram(prog *parser.Program) {
	var scanExpr func(e *parser.Expr)
	scanExpr = func(e *parser.Expr) {
		if e == nil || c.useLinq {
			return
		}
		u := e.Binary.Left
		if u != nil {
			p := u.Value
			if p.Target != nil && p.Target.Query != nil {
				c.useLinq = true
				return
			}
		}
		for _, r := range e.Binary.Right {
			if r.Right != nil {
				if r.Right.Target != nil && r.Right.Target.Query != nil {
					c.useLinq = true
					return
				}
			}
		}
	}

	for _, s := range prog.Statements {
		if s.Let != nil {
			scanExpr(s.Let.Value)
		}
		if s.Var != nil {
			scanExpr(s.Var.Value)
		}
		if s.Expr != nil {
			scanExpr(s.Expr.Expr)
		}
		if s.Return != nil {
			scanExpr(s.Return.Value)
		}
	}
}

func (c *Compiler) compileStmt(s *parser.Statement) error {
	switch {
	case s.Let != nil:
		expr, err := c.compileExpr(s.Let.Value)
		if err != nil {
			return err
		}
		name := sanitizeName(s.Let.Name)
		if s.Let.Type != nil {
			c.varTypes[name] = csType(s.Let.Type)
		}
		c.writeln(fmt.Sprintf("var %s = %s;", name, expr))
	case s.Var != nil:
		expr, err := c.compileExpr(s.Var.Value)
		if err != nil {
			return err
		}
		name := sanitizeName(s.Var.Name)
		if s.Var.Type != nil {
			c.varTypes[name] = csType(s.Var.Type)
		}
		c.writeln(fmt.Sprintf("var %s = %s;", name, expr))
	case s.Return != nil:
		expr, err := c.compileExpr(s.Return.Value)
		if err != nil {
			return err
		}
		c.writeln("return " + expr + ";")
	case s.Assign != nil:
		if err := c.compileAssign(s.Assign); err != nil {
			return err
		}
	case s.Expect != nil:
		return c.compileExpect(s.Expect)
	case s.Expr != nil:
		expr, err := c.compileExpr(s.Expr.Expr)
		if err != nil {
			return err
		}
		c.writeln(expr + ";")
	case s.Fun != nil:
		if err := c.compileFunStmt(s.Fun); err != nil {
			return err
		}
	case s.For != nil:
		return c.compileFor(s.For)
	case s.If != nil:
		return c.compileIf(s.If)
	case s.While != nil:
		return c.compileWhile(s.While)
	case s.Break != nil:
		c.writeln("break;")
		return nil
	case s.Continue != nil:
		c.writeln("continue;")
		return nil
	default:
		// ignore other statements in minimal compiler
	}
	return nil
}

func (c *Compiler) compileFor(f *parser.ForStmt) error {
	name := sanitizeName(f.Name)
	useVar := name != "_"
	if f.RangeEnd != nil {
		start, err := c.compileExpr(f.Source)
		if err != nil {
			return err
		}
		end, err := c.compileExpr(f.RangeEnd)
		if err != nil {
			return err
		}
		loopVar := name
		if !useVar {
			loopVar = c.newVar()
		}
		c.writeln(fmt.Sprintf("for (var %s = %s; %s < %s; %s++) {", loopVar, start, loopVar, end, loopVar))
		c.indent++
		for _, s := range f.Body {
			if err := c.compileStmt(s); err != nil {
				return err
			}
		}
		c.indent--
		c.writeln("}")
		return nil
	}
	src, err := c.compileExpr(f.Source)
	if err != nil {
		return err
	}
	loopVar := name
	if !useVar {
		loopVar = c.newVar()
	}
	c.writeln(fmt.Sprintf("foreach (var %s in %s) {", loopVar, src))
	c.indent++
	for _, s := range f.Body {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	c.writeln("}")
	return nil
}

func (c *Compiler) compileAssign(a *parser.AssignStmt) error {
	lhs := sanitizeName(a.Name)
	for _, idx := range a.Index {
		iexpr, err := c.compileExpr(idx.Start)
		if err != nil {
			return err
		}
		lhs = fmt.Sprintf("%s[%s]", lhs, iexpr)
	}
	val, err := c.compileExpr(a.Value)
	if err != nil {
		return err
	}
	c.writeln(fmt.Sprintf("%s = %s;", lhs, val))
	return nil
}

func (c *Compiler) compileIf(stmt *parser.IfStmt) error {
	var rec func(s *parser.IfStmt, prefix string) error
	rec = func(s *parser.IfStmt, prefix string) error {
		cond, err := c.compileExpr(s.Cond)
		if err != nil {
			return err
		}
		c.writeln(prefix + "if (" + cond + ") {")
		c.indent++
		for _, st := range s.Then {
			if err := c.compileStmt(st); err != nil {
				return err
			}
		}
		c.indent--
		if s.ElseIf != nil {
			return rec(s.ElseIf, "} else ")
		}
		if len(s.Else) > 0 {
			c.writeln("} else {")
			c.indent++
			for _, st := range s.Else {
				if err := c.compileStmt(st); err != nil {
					return err
				}
			}
			c.indent--
			c.writeln("}")
		} else {
			c.writeln("}")
		}
		return nil
	}
	return rec(stmt, "")
}

func (c *Compiler) compileWhile(w *parser.WhileStmt) error {
	cond, err := c.compileExpr(w.Cond)
	if err != nil {
		return err
	}
	c.writeln("while (" + cond + ") {")
	c.indent++
	for _, s := range w.Body {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	c.writeln("}")
	return nil
}

func (c *Compiler) compileExpr(e *parser.Expr) (string, error) {
	return c.compileBinaryExpr(e.Binary)
}

func (c *Compiler) compileBinaryExpr(b *parser.BinaryExpr) (string, error) {
	if b == nil {
		return "", fmt.Errorf("nil binary expr")
	}

	operands := []string{}
	lists := []bool{}

	first, err := c.compileUnary(b.Left)
	if err != nil {
		return "", err
	}
	operands = append(operands, first)
	lists = append(lists, c.isListUnary(b.Left))

	ops := []string{}
	for _, part := range b.Right {
		r, err := c.compilePostfix(part.Right)
		if err != nil {
			return "", err
		}
		operands = append(operands, r)
		lists = append(lists, c.isListPostfix(part.Right))
		ops = append(ops, part.Op)
	}

	levels := [][]string{
		{"*", "/", "%"},
		{"+", "-"},
		{"<", "<=", ">", ">="},
		{"==", "!=", "in"},
		{"&&"},
		{"||"},
	}

	contains := func(sl []string, s string) bool {
		for _, v := range sl {
			if v == s {
				return true
			}
		}
		return false
	}

	for _, lvl := range levels {
		for i := 0; i < len(ops); {
			if !contains(lvl, ops[i]) {
				i++
				continue
			}
			op := ops[i]
			left := operands[i]
			right := operands[i+1]
			leftList := lists[i]
			rightList := lists[i+1]

			var expr string
			switch op {
			case "+":
				if leftList && rightList {
					c.useLinq = true
					expr = fmt.Sprintf("%s.Concat(%s).ToArray()", left, right)
				} else {
					expr = fmt.Sprintf("(%s + %s)", left, right)
				}
				leftList = leftList && rightList
			case "in":
				c.use("_in")
				expr = fmt.Sprintf("_in(%s, %s)", left, right)
			default:
				expr = fmt.Sprintf("(%s %s %s)", left, op, right)
			}

			operands[i] = expr
			lists[i] = leftList
			operands = append(operands[:i+1], operands[i+2:]...)
			lists = append(lists[:i+1], lists[i+2:]...)
			ops = append(ops[:i], ops[i+1:]...)
		}
	}

	if len(operands) != 1 {
		return "", fmt.Errorf("unexpected state in binary expr")
	}
	return operands[0], nil
}

func (c *Compiler) compileUnary(u *parser.Unary) (string, error) {
	val, err := c.compilePostfix(u.Value)
	if err != nil {
		return "", err
	}
	for i := len(u.Ops) - 1; i >= 0; i-- {
		val = fmt.Sprintf("(%s%s)", u.Ops[i], val)
	}
	return val, nil
}

func (c *Compiler) compilePostfix(p *parser.PostfixExpr) (string, error) {
	expr, err := c.compilePrimary(p.Target)
	if err != nil {
		return "", err
	}
	isStr := c.isStringPostfix(p)
	for _, op := range p.Ops {
		if op.Call != nil {
			args := make([]string, len(op.Call.Args))
			for i, a := range op.Call.Args {
				v, err := c.compileExpr(a)
				if err != nil {
					return "", err
				}
				args[i] = v
			}
			argStr := strings.Join(args, ", ")
			if expr == "print" {
				expr = fmt.Sprintf("Console.WriteLine(%s)", argStr)
			} else if expr == "len" {
				if len(args) != 1 {
					return "", fmt.Errorf("len() expects 1 arg")
				}
				expr = fmt.Sprintf("%s.Length", args[0])
			} else {
				expr = fmt.Sprintf("%s(%s)", expr, argStr)
			}
			continue
		}
		if op.Index != nil {
			idx, err := c.compileExpr(op.Index.Start)
			if err != nil {
				return "", err
			}
			if isStr {
				c.use("_indexString")
				expr = fmt.Sprintf("_indexString(%s, %s)", expr, idx)
			} else {
				expr = fmt.Sprintf("%s[%s]", expr, idx)
			}
			isStr = false
			continue
		}
		if op.Cast != nil {
			typ := csType(op.Cast.Type)
			c.use("_cast")
			expr = fmt.Sprintf("_cast<%s>(%s)", typ, expr)
			continue
		}
	}
	return expr, nil
}

func (c *Compiler) compileQueryExpr(q *parser.QueryExpr) (string, error) {
	c.useLinq = true
	if len(q.Joins) > 0 || q.Group != nil {
		return "", fmt.Errorf("unsupported query expression")
	}
	src, err := c.compileExpr(q.Source)
	if err != nil {
		return "", err
	}
	orig := c.env
	child := types.NewEnv(c.env)
	child.SetVar(q.Var, types.AnyType{}, true)
	c.env = child
	sel, err := c.compileExpr(q.Select)
	if err != nil {
		c.env = orig
		return "", err
	}
	var cond, sortExpr, skipExpr, takeExpr string
	if q.Where != nil {
		cond, err = c.compileExpr(q.Where)
		if err != nil {
			c.env = orig
			return "", err
		}
	}
	if q.Sort != nil {
		sortExpr, err = c.compileExpr(q.Sort)
		if err != nil {
			c.env = orig
			return "", err
		}
	}
	if q.Skip != nil {
		skipExpr, err = c.compileExpr(q.Skip)
		if err != nil {
			c.env = orig
			return "", err
		}
	}
	if q.Take != nil {
		takeExpr, err = c.compileExpr(q.Take)
		if err != nil {
			c.env = orig
			return "", err
		}
	}
	v := sanitizeName(q.Var)

	// handle cross join using nested loops when q.Froms are present
	if len(q.Froms) > 0 {
		fromSrcs := make([]string, len(q.Froms))
		for i, f := range q.Froms {
			fs, err := c.compileExpr(f.Src)
			if err != nil {
				c.env = orig
				return "", err
			}
			fromSrcs[i] = fs
			child.SetVar(f.Var, types.AnyType{}, true)
		}
		c.env = child
		if q.Where != nil {
			cond, err = c.compileExpr(q.Where)
			if err != nil {
				c.env = orig
				return "", err
			}
		}
		sel, err = c.compileExpr(q.Select)
		if err != nil {
			c.env = orig
			return "", err
		}
		c.env = orig

		var buf strings.Builder
		buf.WriteString("new Func<List<dynamic>>(() => {\n")
		buf.WriteString("\tvar _res = new List<dynamic>();\n")
		buf.WriteString(fmt.Sprintf("\tforeach (var %s in %s) {\n", v, src))
		indent := "\t\t"
		for i, f := range q.Froms {
			buf.WriteString(fmt.Sprintf(indent+"foreach (var %s in %s) {\n", sanitizeName(f.Var), fromSrcs[i]))
			indent += "\t"
		}
		if cond != "" {
			buf.WriteString(fmt.Sprintf(indent+"if (%s) {\n", cond))
			indent += "\t"
		}
		buf.WriteString(fmt.Sprintf(indent+"_res.Add(%s);\n", sel))
		if cond != "" {
			indent = indent[:len(indent)-1]
			buf.WriteString(indent + "}\n")
		}
		for i := len(q.Froms) - 1; i >= 0; i-- {
			indent = indent[:len(indent)-1]
			buf.WriteString(indent + "}\n")
		}
		buf.WriteString("\t}\n")
		buf.WriteString("\treturn _res;\n")
		buf.WriteString("})()")
		return buf.String(), nil
	}

	c.env = orig

	parts := []string{src}
	if cond != "" {
		parts = append(parts, fmt.Sprintf("Where(%s => %s)", v, cond))
	}
	if sortExpr != "" {
		parts = append(parts, fmt.Sprintf("OrderBy(%s => %s)", v, sortExpr))
	}
	if skipExpr != "" {
		parts = append(parts, fmt.Sprintf("Skip(%s)", skipExpr))
	}
	if takeExpr != "" {
		parts = append(parts, fmt.Sprintf("Take(%s)", takeExpr))
	}
	parts = append(parts, fmt.Sprintf("Select(%s => %s)", v, sel))
	return "new List<dynamic>(" + strings.Join(parts, ".") + ")", nil
}

func (c *Compiler) compileMatchExpr(m *parser.MatchExpr) (string, error) {
	target, err := c.compileExpr(m.Target)
	if err != nil {
		return "", err
	}
	var buf strings.Builder
	buf.WriteString("new Func<dynamic>(() => {\n")
	buf.WriteString("\t\tvar _t = " + target + ";\n")
	for _, cs := range m.Cases {
		if call, ok := callPattern(cs.Pattern); ok {
			if ut, ok := c.env.FindUnionByVariant(call.Func); ok {
				st := ut.Variants[call.Func]
				varName := c.newVar()
				buf.WriteString(fmt.Sprintf("\t\tif (_t is %s %s) {\n", sanitizeName(call.Func), varName))
				for idx, arg := range call.Args {
					if id, ok := identName(arg); ok && id != "_" {
						field := sanitizeName(st.Order[idx])
						buf.WriteString(fmt.Sprintf("\t\t\tvar %s = %s.%s;\n", sanitizeName(id), varName, field))
					}
				}
				res, err := c.compileExpr(cs.Result)
				if err != nil {
					return "", err
				}
				buf.WriteString("\t\t\treturn " + res + ";\n")
				buf.WriteString("\t\t}\n")
				continue
			}
		}
		if ident, ok := identName(cs.Pattern); ok {
			if _, ok := c.env.FindUnionByVariant(ident); ok {
				res, err := c.compileExpr(cs.Result)
				if err != nil {
					return "", err
				}
				buf.WriteString(fmt.Sprintf("\t\tif (_t is %s) return %s;\n", sanitizeName(ident), res))
				continue
			}
		}
		if isUnderscoreExpr(cs.Pattern) {
			res, err := c.compileExpr(cs.Result)
			if err != nil {
				return "", err
			}
			buf.WriteString("\t\treturn " + res + ";\n")
			buf.WriteString("\t})()")
			return buf.String(), nil
		}
		pat, err := c.compileExpr(cs.Pattern)
		if err != nil {
			return "", err
		}
		res, err := c.compileExpr(cs.Result)
		if err != nil {
			return "", err
		}
		c.use("_equal")
		buf.WriteString(fmt.Sprintf("\t\tif (_equal(_t, %s)) return %s;\n", pat, res))
	}
	buf.WriteString("\t\treturn null;\n")
	buf.WriteString("\t})()")
	return buf.String(), nil
}

func identName(e *parser.Expr) (string, bool) {
	if e == nil || len(e.Binary.Right) != 0 {
		return "", false
	}
	u := e.Binary.Left
	if len(u.Ops) != 0 {
		return "", false
	}
	p := u.Value
	if len(p.Ops) != 0 {
		return "", false
	}
	if p.Target != nil && p.Target.Selector != nil && len(p.Target.Selector.Tail) == 0 {
		return p.Target.Selector.Root, true
	}
	return "", false
}

func isUnderscoreExpr(e *parser.Expr) bool {
	if e == nil || len(e.Binary.Right) != 0 {
		return false
	}
	u := e.Binary.Left
	if len(u.Ops) != 0 {
		return false
	}
	p := u.Value
	if len(p.Ops) != 0 {
		return false
	}
	if p.Target.Selector != nil && p.Target.Selector.Root == "_" && len(p.Target.Selector.Tail) == 0 {
		return true
	}
	return false
}

func callPattern(e *parser.Expr) (*parser.CallExpr, bool) {
	if e == nil || len(e.Binary.Right) != 0 {
		return nil, false
	}
	u := e.Binary.Left
	if len(u.Ops) != 0 {
		return nil, false
	}
	p := u.Value
	if len(p.Ops) != 0 || p.Target.Call == nil {
		return nil, false
	}
	return p.Target.Call, true
}

func (c *Compiler) compilePrimary(p *parser.Primary) (string, error) {
	switch {
	case p.Struct != nil:
		parts := make([]string, len(p.Struct.Fields))
		for i, f := range p.Struct.Fields {
			v, err := c.compileExpr(f.Value)
			if err != nil {
				return "", err
			}
			parts[i] = fmt.Sprintf("%s = %s", sanitizeName(f.Name), v)
		}
		return fmt.Sprintf("new %s { %s }", sanitizeName(p.Struct.Name), strings.Join(parts, ", ")), nil
	case p.Lit != nil:
		return c.compileLiteral(p.Lit)
	case p.List != nil:
		elems := make([]string, len(p.List.Elems))
		for i, e := range p.List.Elems {
			v, err := c.compileExpr(e)
			if err != nil {
				return "", err
			}
			elems[i] = v
		}
		return "new [] { " + strings.Join(elems, ", ") + " }", nil
	case p.Map != nil:
		items := make([]string, len(p.Map.Items))
		for i, it := range p.Map.Items {
			k, err := c.compileExpr(it.Key)
			if err != nil {
				return "", err
			}
			v, err := c.compileExpr(it.Value)
			if err != nil {
				return "", err
			}
			items[i] = fmt.Sprintf("{ %s, %s }", k, v)
		}
		return "new Dictionary<dynamic, dynamic> { " + strings.Join(items, ", ") + " }", nil
	case p.Selector != nil:
		expr := sanitizeName(p.Selector.Root)
		for _, s := range p.Selector.Tail {
			expr += "." + sanitizeName(s)
		}
		return expr, nil
	case p.Call != nil:
		return c.compileCallExpr(p.Call)
	case p.Query != nil:
		return c.compileQueryExpr(p.Query)
	case p.Match != nil:
		return c.compileMatchExpr(p.Match)
	case p.Group != nil:
		e, err := c.compileExpr(p.Group)
		if err != nil {
			return "", err
		}
		return "(" + e + ")", nil
	default:
		return "", fmt.Errorf("unsupported primary expression")
	}
}

func (c *Compiler) compileCallExpr(call *parser.CallExpr) (string, error) {
	args := make([]string, len(call.Args))
	for i, a := range call.Args {
		v, err := c.compileExpr(a)
		if err != nil {
			return "", err
		}
		args[i] = v
	}
	argStr := strings.Join(args, ", ")
	switch call.Func {
	case "print":
		return fmt.Sprintf("Console.WriteLine(%s)", argStr), nil
	case "count":
		if len(args) != 1 {
			return "", fmt.Errorf("count() expects 1 arg")
		}
		c.use("_count")
		return fmt.Sprintf("_count(%s)", argStr), nil
	case "avg":
		if len(args) != 1 {
			return "", fmt.Errorf("avg() expects 1 arg")
		}
		c.use("_avg")
		return fmt.Sprintf("_avg(%s)", argStr), nil
	case "str":
		if len(args) != 1 {
			return "", fmt.Errorf("str() expects 1 arg")
		}
		return fmt.Sprintf("Convert.ToString(%s)", args[0]), nil
	case "input":
		if len(args) != 0 {
			return "", fmt.Errorf("input() expects no args")
		}
		return "Console.ReadLine()", nil
	case "len":
		if len(args) != 1 {
			return "", fmt.Errorf("len() expects 1 arg")
		}
		return fmt.Sprintf("%s.Length", args[0]), nil
	default:
		return fmt.Sprintf("%s(%s)", sanitizeName(call.Func), argStr), nil
	}
}

func (c *Compiler) compileLiteral(l *parser.Literal) (string, error) {
	switch {
	case l.Int != nil:
		return fmt.Sprintf("%d", *l.Int), nil
	case l.Float != nil:
		return fmt.Sprintf("%f", *l.Float), nil
	case l.Bool != nil:
		if *l.Bool {
			return "true", nil
		}
		return "false", nil
	case l.Str != nil:
		return strconv.Quote(*l.Str), nil
	default:
		return "", fmt.Errorf("unknown literal")
	}
}

func csType(t *parser.TypeRef) string {
	if t == nil {
		return "dynamic"
	}
	if t.Simple != nil {
		switch *t.Simple {
		case "int":
			return "int"
		case "float":
			return "double"
		case "string":
			return "string"
		case "bool":
			return "bool"
		case "any":
			return "dynamic"
		case "void":
			return "void"
		default:
			return sanitizeName(*t.Simple)
		}
	}
	if t.Generic != nil {
		if t.Generic.Name == "list" && len(t.Generic.Args) == 1 {
			return csType(t.Generic.Args[0]) + "[]"
		}
		if t.Generic.Name == "map" && len(t.Generic.Args) == 2 {
			return fmt.Sprintf("Dictionary<%s, %s>", csType(t.Generic.Args[0]), csType(t.Generic.Args[1]))
		}
		args := make([]string, len(t.Generic.Args))
		for i, a := range t.Generic.Args {
			args[i] = csType(a)
		}
		return fmt.Sprintf("%s<%s>", sanitizeName(t.Generic.Name), strings.Join(args, ", "))
	}
	return "dynamic"
}

func sanitizeName(name string) string {
	if name == "" {
		return ""
	}
	var b strings.Builder
	for i, r := range name {
		if r == '_' || ('0' <= r && r <= '9' && i > 0) || ('A' <= r && r <= 'Z') || ('a' <= r && r <= 'z') {
			b.WriteRune(r)
		} else {
			b.WriteRune('_')
		}
	}
	s := b.String()
	if s == "" || !((s[0] >= 'A' && s[0] <= 'Z') || (s[0] >= 'a' && s[0] <= 'z') || s[0] == '_') {
		s = "_" + s
	}
	return s
}

func (c *Compiler) varIsList(name string) bool {
	typ, ok := c.varTypes[name]
	return ok && strings.HasSuffix(typ, "[]")
}

func (c *Compiler) varIsString(name string) bool {
	typ, ok := c.varTypes[name]
	return ok && typ == "string"
}

func (c *Compiler) isListUnary(u *parser.Unary) bool {
	if u == nil || len(u.Ops) != 0 {
		return false
	}
	return c.isListPostfix(u.Value)
}

func (c *Compiler) isListPostfix(p *parser.PostfixExpr) bool {
	if p == nil || len(p.Ops) != 0 {
		return false
	}
	if p.Target.List != nil {
		return true
	}
	if p.Target.Selector != nil && len(p.Target.Selector.Tail) == 0 {
		name := sanitizeName(p.Target.Selector.Root)
		if c.varIsList(name) {
			return true
		}
	}
	return false
}

func (c *Compiler) isStringUnary(u *parser.Unary) bool {
	if u == nil || len(u.Ops) != 0 {
		return false
	}
	return c.isStringPostfix(u.Value)
}

func (c *Compiler) isStringPostfix(p *parser.PostfixExpr) bool {
	if p == nil || len(p.Ops) != 0 {
		return false
	}
	if p.Target.Lit != nil && p.Target.Lit.Str != nil {
		return true
	}
	if p.Target.Selector != nil && len(p.Target.Selector.Tail) == 0 {
		name := sanitizeName(p.Target.Selector.Root)
		if c.varIsString(name) {
			return true
		}
	}
	return false
}

func (c *Compiler) newVar() string {
	name := fmt.Sprintf("_tmp%d", c.tempVarCount)
	c.tempVarCount++
	return name
}

func (c *Compiler) use(name string) {
	if c.helpers == nil {
		c.helpers = make(map[string]bool)
	}
	c.helpers[name] = true
}
