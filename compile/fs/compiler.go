package fscode

import (
	"bytes"
	"fmt"
	"strings"

	"mochi/parser"
)

// Compiler is a very small experimental compiler that translates a
// subset of Mochi into F# source code. Only basic expressions and
// function declarations are supported.
type Compiler struct {
	buf    bytes.Buffer
	indent int
}

// New creates a new F# compiler instance.
func New() *Compiler {
	return &Compiler{}
}

// Compile generates F# source code for prog. Only a small subset of
// the language is supported. Unsupported constructs will result in an
// error being returned.
func (c *Compiler) Compile(prog *parser.Program) ([]byte, error) {
	c.writeln("// Generated by Mochi F# compiler")
	c.writeln("")

	// first emit function declarations
	for _, s := range prog.Statements {
		if s.Fun != nil {
			if err := c.compileFunStmt(s.Fun); err != nil {
				return nil, err
			}
			c.writeln("")
		}
	}

	// emit test blocks
	for _, s := range prog.Statements {
		if s.Test != nil {
			if err := c.compileTestBlock(s.Test); err != nil {
				return nil, err
			}
			c.writeln("")
		}
	}

	// emit main entry point
	c.writeln("[<EntryPoint>]")
	c.writeln("let main _argv =")
	c.indent++
	for _, s := range prog.Statements {
		if s.Fun != nil || s.Test != nil {
			continue
		}
		if err := c.compileStmt(s); err != nil {
			return nil, err
		}
	}
	for _, s := range prog.Statements {
		if s.Test != nil {
			name := sanitizeName(s.Test.Name)
			c.writeln(fmt.Sprintf("%s() |> ignore", name))
		}
	}
	c.writeln("0")
	c.indent--
	c.writeln("")

	return c.buf.Bytes(), nil
}

func (c *Compiler) compileFunStmt(fun *parser.FunStmt) error {
	name := sanitizeName(fun.Name)
	c.writeIndent()
	c.buf.WriteString("let rec " + name + "(")
	for i, p := range fun.Params {
		if i > 0 {
			c.buf.WriteString(", ")
		}
		c.buf.WriteString(sanitizeName(p.Name))
	}
	c.buf.WriteString(") =\n")
	c.indent++
	for _, stmt := range fun.Body {
		if err := c.compileStmt(stmt); err != nil {
			return err
		}
	}
	if fun.Return == nil {
		c.writeln("()")
	}
	c.indent--
	return nil
}

func (c *Compiler) compileTestBlock(t *parser.TestBlock) error {
	name := sanitizeName(t.Name)
	c.writeIndent()
	c.buf.WriteString("let " + name + "() =\n")
	c.indent++
	for _, stmt := range t.Body {
		if err := c.compileStmt(stmt); err != nil {
			return err
		}
	}
	c.writeln("()")
	c.indent--
	return nil
}

func (c *Compiler) compileStmt(s *parser.Statement) error {
	switch {
	case s.Let != nil:
		return c.compileLet(s.Let, false)
	case s.Var != nil:
		return c.compileLet(&parser.LetStmt{Name: s.Var.Name, Type: s.Var.Type, Value: s.Var.Value}, true)
	case s.Assign != nil:
		val, err := c.compileExpr(s.Assign.Value)
		if err != nil {
			return err
		}
		c.writeln(fmt.Sprintf("%s <- %s", sanitizeName(s.Assign.Name), val))
		return nil
	case s.Expr != nil:
		expr, err := c.compileExpr(s.Expr.Expr)
		if err != nil {
			return err
		}
		c.writeln(expr)
		return nil
	case s.Return != nil:
		val, err := c.compileExpr(s.Return.Value)
		if err != nil {
			return err
		}
		c.writeln("return " + val)
		return nil
	case s.If != nil:
		return c.compileIf(s.If)
	case s.While != nil:
		return c.compileWhile(s.While)
	default:
		return fmt.Errorf("unsupported statement in F# backend")
	}
}

func (c *Compiler) compileLet(s *parser.LetStmt, mutable bool) error {
	name := sanitizeName(s.Name)
	val := "()"
	if s.Value != nil {
		v, err := c.compileExpr(s.Value)
		if err != nil {
			return err
		}
		val = v
	}
	if mutable {
		c.writeln(fmt.Sprintf("let mutable %s = %s", name, val))
	} else {
		c.writeln(fmt.Sprintf("let %s = %s", name, val))
	}
	return nil
}

func (c *Compiler) compileIf(i *parser.IfStmt) error {
	cond, err := c.compileExpr(i.Cond)
	if err != nil {
		return err
	}
	c.writeln(fmt.Sprintf("if %s then", cond))
	c.indent++
	for _, stmt := range i.Then {
		if err := c.compileStmt(stmt); err != nil {
			return err
		}
	}
	c.indent--
	if i.Else != nil && len(i.Else) > 0 {
		c.writeln("else")
		c.indent++
		for _, stmt := range i.Else {
			if err := c.compileStmt(stmt); err != nil {
				return err
			}
		}
		c.indent--
	}
	return nil
}

func (c *Compiler) compileWhile(w *parser.WhileStmt) error {
	cond, err := c.compileExpr(w.Cond)
	if err != nil {
		return err
	}
	c.writeln(fmt.Sprintf("while %s do", cond))
	c.indent++
	for _, stmt := range w.Body {
		if err := c.compileStmt(stmt); err != nil {
			return err
		}
	}
	c.indent--
	return nil
}

func (c *Compiler) compileExpr(e *parser.Expr) (string, error) {
	return c.compileBinaryExpr(e.Binary)
}

func (c *Compiler) compileBinaryExpr(b *parser.BinaryExpr) (string, error) {
	expr, err := c.compileUnary(b.Left)
	if err != nil {
		return "", err
	}
	for _, op := range b.Right {
		right, err := c.compilePostfix(op.Right)
		if err != nil {
			return "", err
		}
		expr = fmt.Sprintf("(%s %s %s)", expr, op.Op, right)
	}
	return expr, nil
}

func (c *Compiler) compileUnary(u *parser.Unary) (string, error) {
	val, err := c.compilePostfix(u.Value)
	if err != nil {
		return "", err
	}
	for i := len(u.Ops) - 1; i >= 0; i-- {
		op := u.Ops[i]
		val = fmt.Sprintf("(%s%s)", op, val)
	}
	return val, nil
}

func (c *Compiler) compilePostfix(p *parser.PostfixExpr) (string, error) {
	expr, err := c.compilePrimary(p.Target)
	if err != nil {
		return "", err
	}
	for _, op := range p.Ops {
		if op.Call != nil {
			args := make([]string, len(op.Call.Args))
			for i, a := range op.Call.Args {
				v, err := c.compileExpr(a)
				if err != nil {
					return "", err
				}
				args[i] = v
			}
			expr = fmt.Sprintf("%s(%s)", expr, strings.Join(args, ", "))
		} else {
			return "", fmt.Errorf("unsupported postfix operation")
		}
	}
	return expr, nil
}

func (c *Compiler) compilePrimary(p *parser.Primary) (string, error) {
	switch {
	case p.Lit != nil:
		return c.compileLiteral(p.Lit)
	case p.Call != nil:
		args := make([]string, len(p.Call.Args))
		for i, a := range p.Call.Args {
			v, err := c.compileExpr(a)
			if err != nil {
				return "", err
			}
			args[i] = v
		}
		return fmt.Sprintf("%s(%s)", sanitizeName(p.Call.Func), strings.Join(args, ", ")), nil
	case p.Selector != nil:
		expr := sanitizeName(p.Selector.Root)
		for _, part := range p.Selector.Tail {
			expr += "." + sanitizeName(part)
		}
		return expr, nil
	case p.List != nil:
		elems := make([]string, len(p.List.Elems))
		for i, e := range p.List.Elems {
			v, err := c.compileExpr(e)
			if err != nil {
				return "", err
			}
			elems[i] = v
		}
		return "[" + strings.Join(elems, "; ") + "]", nil
	default:
		return "", fmt.Errorf("unsupported expression")
	}
}

func (c *Compiler) compileLiteral(l *parser.Literal) (string, error) {
	switch {
	case l.Int != nil:
		return fmt.Sprintf("%d", *l.Int), nil
	case l.Float != nil:
		return fmt.Sprintf("%f", *l.Float), nil
	case l.Bool != nil:
		if *l.Bool {
			return "true", nil
		}
		return "false", nil
	case l.Str != nil:
		return fmt.Sprintf("\"%s\"", *l.Str), nil
	default:
		return "()", nil
	}
}

func (c *Compiler) writeln(s string) {
	c.writeIndent()
	c.buf.WriteString(s)
	c.buf.WriteByte('\n')
}

func (c *Compiler) writeIndent() {
	for i := 0; i < c.indent; i++ {
		c.buf.WriteString("    ")
	}
}

func sanitizeName(name string) string {
	// F# identifiers can't contain dashes etc.
	out := make([]rune, 0, len(name))
	for _, r := range name {
		if r == '-' {
			out = append(out, '_')
		} else {
			out = append(out, r)
		}
	}
	return string(out)
}
