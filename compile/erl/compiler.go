package erlcode

import (
	"bytes"
	"fmt"
	"strings"

	"mochi/parser"
	"mochi/types"
)

// Compiler translates a Mochi AST into Erlang source code.
type Compiler struct {
	buf    bytes.Buffer
	indent int
	env    *types.Env
}

// New creates a new Erlang compiler instance.
func New(env *types.Env) *Compiler {
	return &Compiler{env: env}
}

func (c *Compiler) writeIndent() {
	for i := 0; i < c.indent; i++ {
		c.buf.WriteString("    ")
	}
}

func (c *Compiler) writeln(s string) {
	c.writeIndent()
	c.buf.WriteString(s)
	c.buf.WriteByte('\n')
}

// Compile generates Erlang code for the given program.
func (c *Compiler) Compile(prog *parser.Program) ([]byte, error) {
	c.writeln("%% Generated by Mochi Erlang compiler")
	c.writeln("-module(main).")
	c.writeln("-export([main/0]).")
	c.writeln("")
	c.writeln("main() ->")
	c.indent++
	for _, s := range prog.Statements {
		if err := c.compileStmt(s); err != nil {
			return nil, err
		}
	}
	c.writeln("ok.")
	c.indent--
	return c.buf.Bytes(), nil
}

func (c *Compiler) compileStmt(s *parser.Statement) error {
	switch {
	case s.Expr != nil:
		expr, err := c.compileExpr(s.Expr.Expr)
		if err != nil {
			return err
		}
		c.writeln(expr + ",")
		return nil
	default:
		return fmt.Errorf("unsupported statement")
	}
}

func (c *Compiler) compileExpr(e *parser.Expr) (string, error) {
	if e == nil || e.Binary == nil {
		return "", fmt.Errorf("invalid expression")
	}
	// Only support single primary expressions without operators.
	if len(e.Binary.Right) > 0 {
		return "", fmt.Errorf("binary operations not supported")
	}
	return c.compileUnary(e.Binary.Left)
}

func (c *Compiler) compileUnary(u *parser.Unary) (string, error) {
	if len(u.Ops) > 0 {
		return "", fmt.Errorf("unary operations not supported")
	}
	return c.compilePostfix(u.Value)
}

func (c *Compiler) compilePostfix(p *parser.PostfixExpr) (string, error) {
	if len(p.Ops) > 0 {
		return "", fmt.Errorf("postfix operations not supported")
	}
	return c.compilePrimary(p.Target)
}

func (c *Compiler) compilePrimary(p *parser.Primary) (string, error) {
	switch {
	case p.Call != nil:
		return c.compileCallExpr(p.Call)
	case p.Lit != nil:
		return c.compileLiteral(p.Lit)
	default:
		return "", fmt.Errorf("unsupported expression")
	}
}

func (c *Compiler) compileLiteral(l *parser.Literal) (string, error) {
	switch {
	case l.Int != nil:
		return fmt.Sprintf("%d", *l.Int), nil
	case l.Float != nil:
		return fmt.Sprintf("%g", *l.Float), nil
	case l.Bool != nil:
		if bool(*l.Bool) {
			return "true", nil
		}
		return "false", nil
	case l.Str != nil:
		s := strings.ReplaceAll(*l.Str, "\"", "\\\"")
		return fmt.Sprintf("\"%s\"", s), nil
	default:
		return "", fmt.Errorf("invalid literal")
	}
}

func (c *Compiler) compileCallExpr(call *parser.CallExpr) (string, error) {
	args := make([]string, len(call.Args))
	for i, a := range call.Args {
		v, err := c.compileExpr(a)
		if err != nil {
			return "", err
		}
		args[i] = v
	}
	switch call.Func {
	case "print":
		formats := make([]string, len(args))
		for i := range args {
			formats[i] = "~p"
		}
		format := strings.Join(formats, " ") + "~n"
		return fmt.Sprintf("io:format(\"%s\", [%s])", format, strings.Join(args, ", ")), nil
	default:
		return "%% unsupported call", nil
	}
}
