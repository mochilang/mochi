// Package excode translates Mochi ASTs into Elixir source code.
package excode

import (
	"bytes"
	"fmt"
	"strconv"
	"strings"

	"mochi/parser"
	"mochi/types"
)

// Compiler translates a Mochi AST into Elixir source code.
type Compiler struct {
	buf    bytes.Buffer
	indent int
	env    *types.Env
}

func New(env *types.Env) *Compiler {
	return &Compiler{env: env}
}

func (c *Compiler) writeln(s string) {
	for i := 0; i < c.indent; i++ {
		c.buf.WriteByte('\t')
	}
	c.buf.WriteString(s)
	c.buf.WriteByte('\n')
}

func (c *Compiler) writeIndent() {
	for i := 0; i < c.indent; i++ {
		c.buf.WriteByte('\t')
	}
}

func (c *Compiler) Compile(prog *parser.Program) ([]byte, error) {
	c.writeln("# Generated by Mochi Elixir compiler")
	c.writeln("defmodule Main do")
	c.indent++
	for _, s := range prog.Statements {
		if s.Fun != nil {
			if err := c.compileFunStmt(s.Fun); err != nil {
				return nil, err
			}
			c.writeln("")
		}
	}
	c.writeln("def main do")
	c.indent++
	for _, s := range prog.Statements {
		if s.Fun == nil {
			if err := c.compileStmt(s); err != nil {
				return nil, err
			}
		}
	}
	c.indent--
	c.writeln("end")
	c.writeln("end")
	c.indent--
	c.writeln("Main.main()")
	return c.buf.Bytes(), nil
}

func (c *Compiler) compileFunStmt(fun *parser.FunStmt) error {
	c.writeIndent()
	c.buf.WriteString("def " + fun.Name + "(")
	for i, p := range fun.Params {
		if i > 0 {
			c.buf.WriteString(", ")
		}
		c.buf.WriteString(p.Name)
	}
	c.buf.WriteString(") do\n")
	c.indent++
	c.writeln("try do")
	c.indent++
	for _, s := range fun.Body {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	c.writeln("catch {:return, v} -> v end")
	c.indent--
	c.writeln("end")
	return nil
}

func (c *Compiler) compileStmt(s *parser.Statement) error {
	switch {
	case s.Let != nil:
		val, err := c.compileExpr(s.Let.Value)
		if err != nil {
			return err
		}
		c.writeln(fmt.Sprintf("%s = %s", s.Let.Name, val))
	case s.Var != nil:
		return c.compileVar(s.Var)
	case s.Assign != nil:
		return c.compileAssign(s.Assign)
	case s.Return != nil:
		val, err := c.compileExpr(s.Return.Value)
		if err != nil {
			return err
		}
		c.writeln(fmt.Sprintf("throw {:return, %s}", val))
	case s.Expr != nil:
		expr, err := c.compileExpr(s.Expr.Expr)
		if err != nil {
			return err
		}
		c.writeln(expr)
	case s.For != nil:
		return c.compileFor(s.For)
	case s.While != nil:
		return c.compileWhile(s.While)
	case s.If != nil:
		return c.compileIf(s.If)
	case s.Break != nil:
		c.writeln("break")
	case s.Continue != nil:
		c.writeln("continue")
	default:
		// ignore
	}
	return nil
}

func (c *Compiler) compileIf(stmt *parser.IfStmt) error {
	cond, err := c.compileExpr(stmt.Cond)
	if err != nil {
		return err
	}
	c.writeln(fmt.Sprintf("if %s do", cond))
	c.indent++
	for _, s := range stmt.Then {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	if stmt.ElseIf != nil || len(stmt.Else) > 0 {
		c.writeln("else")
		c.indent++
		if stmt.ElseIf != nil {
			if err := c.compileIf(stmt.ElseIf); err != nil {
				return err
			}
		} else {
			for _, s := range stmt.Else {
				if err := c.compileStmt(s); err != nil {
					return err
				}
			}
		}
		c.indent--
	}
	c.writeln("end")
	return nil
}

func (c *Compiler) compileWhile(stmt *parser.WhileStmt) error {
	cond, err := c.compileExpr(stmt.Cond)
	if err != nil {
		return err
	}
	c.writeln(fmt.Sprintf("while %s do", cond))
	c.indent++
	for _, s := range stmt.Body {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	c.writeln("end")
	return nil
}

func (c *Compiler) compileFor(stmt *parser.ForStmt) error {
	name := stmt.Name
	if stmt.RangeEnd != nil {
		start, err := c.compileExpr(stmt.Source)
		if err != nil {
			return err
		}
		end, err := c.compileExpr(stmt.RangeEnd)
		if err != nil {
			return err
		}
		c.writeln(fmt.Sprintf("for %s <- %s..(%s - 1) do", name, start, end))
		c.indent++
		for _, s := range stmt.Body {
			if err := c.compileStmt(s); err != nil {
				return err
			}
		}
		c.indent--
		c.writeln("end")
		return nil
	}
	src, err := c.compileExpr(stmt.Source)
	if err != nil {
		return err
	}
	if strings.HasPrefix(src, "\"") && strings.HasSuffix(src, "\"") {
		src = fmt.Sprintf("String.graphemes(%s)", src)
	}
	c.writeln(fmt.Sprintf("for %s <- %s do", name, src))
	c.indent++
	for _, s := range stmt.Body {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	c.writeln("end")
	return nil
}

func (c *Compiler) compileVar(stmt *parser.VarStmt) error {
	value := "nil"
	if stmt.Value != nil {
		v, err := c.compileExpr(stmt.Value)
		if err != nil {
			return err
		}
		value = v
	}
	c.writeln(fmt.Sprintf("%s = %s", stmt.Name, value))
	c.writeln(fmt.Sprintf("_ = %s", stmt.Name))
	return nil
}

func (c *Compiler) compileAssign(stmt *parser.AssignStmt) error {
	value, err := c.compileExpr(stmt.Value)
	if err != nil {
		return err
	}
	if len(stmt.Index) > 0 {
		idx, err := c.compileExpr(stmt.Index[0].Start)
		if err != nil {
			return err
		}
		c.writeln(fmt.Sprintf("%s = Map.put(%s, %s, %s)", stmt.Name, stmt.Name, idx, value))
		return nil
	}
	c.writeln(fmt.Sprintf("%s = %s", stmt.Name, value))
	return nil
}

func (c *Compiler) compileQueryExpr(q *parser.QueryExpr) (string, error) {
	if len(q.Joins) > 0 || q.Group != nil {
		return "", fmt.Errorf("unsupported query expression")
	}
	src, err := c.compileExpr(q.Source)
	if err != nil {
		return "", err
	}
	orig := c.env
	child := types.NewEnv(c.env)
	child.SetVar(q.Var, types.AnyType{}, true)
	for _, f := range q.Froms {
		child.SetVar(f.Var, types.AnyType{}, true)
	}
	c.env = child
	sel, err := c.compileExpr(q.Select)
	if err != nil {
		c.env = orig
		return "", err
	}
	var cond, sortExpr, skipExpr, takeExpr string
	if q.Where != nil {
		cond, err = c.compileExpr(q.Where)
		if err != nil {
			c.env = orig
			return "", err
		}
	}
	if q.Sort != nil {
		sortExpr, err = c.compileExpr(q.Sort)
		if err != nil {
			c.env = orig
			return "", err
		}
	}
	if q.Skip != nil {
		skipExpr, err = c.compileExpr(q.Skip)
		if err != nil {
			c.env = orig
			return "", err
		}
	}
	if q.Take != nil {
		takeExpr, err = c.compileExpr(q.Take)
		if err != nil {
			c.env = orig
			return "", err
		}
	}
	c.env = orig

	if len(q.Froms) > 0 {
		if cond != "" || sortExpr != "" || skipExpr != "" || takeExpr != "" {
			return "", fmt.Errorf("unsupported query expression")
		}
		parts := make([]string, len(q.Froms))
		for i, f := range q.Froms {
			fs, err := c.compileExpr(f.Src)
			if err != nil {
				return "", err
			}
			parts[i] = fmt.Sprintf("%s <- %s", f.Var, fs)
		}
		var b strings.Builder
		b.WriteString("for ")
		b.WriteString(q.Var)
		b.WriteString(" <- ")
		b.WriteString(src)
		for _, p := range parts {
			b.WriteString(", ")
			b.WriteString(p)
		}
		b.WriteString(", do: ")
		b.WriteString(sel)
		return b.String(), nil
	}

	items := src
	if sortExpr != "" {
		items = fmt.Sprintf("Enum.sort_by(%s, fn %s -> %s end)", items, q.Var, sortExpr)
	}
	if skipExpr != "" {
		items = fmt.Sprintf("Enum.drop(%s, %s)", items, skipExpr)
	}
	if takeExpr != "" {
		items = fmt.Sprintf("Enum.take(%s, %s)", items, takeExpr)
	}

	var b strings.Builder
	b.WriteString("for ")
	b.WriteString(q.Var)
	b.WriteString(" <- ")
	b.WriteString(items)
	if cond != "" {
		b.WriteString(", ")
		b.WriteString(cond)
	}
	b.WriteString(", do: ")
	b.WriteString(sel)
	return b.String(), nil
}

func (c *Compiler) compileExpr(e *parser.Expr) (string, error) {
	if e == nil {
		return "", fmt.Errorf("nil expr")
	}
	return c.compileBinary(e.Binary)
}

func (c *Compiler) compileBinary(b *parser.BinaryExpr) (string, error) {
	leftStr, err := c.compileUnary(b.Left)
	if err != nil {
		return "", err
	}
	out := leftStr
	leftIsList := isListUnary(b.Left)
	for _, op := range b.Right {
		rightStr, err := c.compilePostfix(op.Right)
		if err != nil {
			return "", err
		}
		rightIsList := isListPostfix(op.Right)
		switch op.Op {
		case "+":
			if leftIsList || rightIsList {
				out = fmt.Sprintf("%s ++ %s", out, rightStr)
				leftIsList = true
			} else {
				out = fmt.Sprintf("(%s + %s)", out, rightStr)
				leftIsList = false
			}
		case "-", "*", "/", "%", "==", "!=", "<", "<=", ">", ">=":
			out = fmt.Sprintf("(%s %s %s)", out, op.Op, rightStr)
			leftIsList = false
		case "in":
			out = fmt.Sprintf("(if is_map(%s), do: Map.has_key?(%s, %s), else: Enum.member?(%s, %s))", rightStr, rightStr, out, rightStr, out)
			leftIsList = false
		default:
			return "", fmt.Errorf("unsupported operator %s", op.Op)
		}
	}
	return out, nil
}

func isListPostfix(p *parser.PostfixExpr) bool {
	return len(p.Ops) == 0 && p.Target != nil && p.Target.List != nil
}

func isListUnary(u *parser.Unary) bool {
	return len(u.Ops) == 0 && isListPostfix(u.Value)
}

func (c *Compiler) compileUnary(u *parser.Unary) (string, error) {
	expr, err := c.compilePostfix(u.Value)
	if err != nil {
		return "", err
	}
	for i := len(u.Ops) - 1; i >= 0; i-- {
		switch u.Ops[i] {
		case "-":
			expr = "-" + expr
		case "!":
			expr = "!" + expr
		}
	}
	return expr, nil
}

func (c *Compiler) compilePostfix(p *parser.PostfixExpr) (string, error) {
	res, err := c.compilePrimary(p.Target)
	if err != nil {
		return "", err
	}
	for _, op := range p.Ops {
		if op.Index != nil {
			idx, err := c.compileExpr(op.Index.Start)
			if err != nil {
				return "", err
			}
			res = fmt.Sprintf("Enum.at(%s, %s)", res, idx)
		} else if op.Call != nil {
			args := []string{}
			for _, a := range op.Call.Args {
				v, err := c.compileExpr(a)
				if err != nil {
					return "", err
				}
				args = append(args, v)
			}
			argStr := strings.Join(args, ", ")
			switch res {
			case "print":
				res = fmt.Sprintf("IO.puts(%s)", argStr)
			case "len":
				res = fmt.Sprintf("length(%s)", argStr)
			case "count":
				res = fmt.Sprintf("Enum.count(%s)", argStr)
			case "avg":
				res = fmt.Sprintf("if Enum.count(%[1]s) == 0, do: 0, else: Enum.sum(%[1]s) / Enum.count(%[1]s)", argStr)
			case "str":
				res = fmt.Sprintf("to_string(%s)", argStr)
			case "input":
				res = "String.trim(IO.gets(\"\"))"
			default:
				res = fmt.Sprintf("%s(%s)", res, argStr)
			}
		}
	}
	return res, nil
}

func (c *Compiler) compilePrimary(p *parser.Primary) (string, error) {
	switch {
	case p.Lit != nil:
		if p.Lit.Int != nil {
			return strconv.Itoa(*p.Lit.Int), nil
		}
		if p.Lit.Str != nil {
			return strconv.Quote(*p.Lit.Str), nil
		}
		if p.Lit.Bool != nil {
			if bool(*p.Lit.Bool) {
				return "true", nil
			}
			return "false", nil
		}
	case p.List != nil:
		elems := make([]string, len(p.List.Elems))
		for i, e := range p.List.Elems {
			v, err := c.compileExpr(e)
			if err != nil {
				return "", err
			}
			elems[i] = v
		}
		return "[" + strings.Join(elems, ", ") + "]", nil
	case p.Map != nil:
		items := make([]string, len(p.Map.Items))
		for i, it := range p.Map.Items {
			k, err := c.compileExpr(it.Key)
			if err != nil {
				return "", err
			}
			v, err := c.compileExpr(it.Value)
			if err != nil {
				return "", err
			}
			items[i] = fmt.Sprintf("%s => %s", k, v)
		}
		return "%{" + strings.Join(items, ", ") + "}", nil
	case p.Selector != nil:
		name := p.Selector.Root
		if len(p.Selector.Tail) > 0 {
			name += "." + strings.Join(p.Selector.Tail, ".")
		}
		return name, nil
	case p.Struct != nil:
		parts := make([]string, len(p.Struct.Fields))
		for i, f := range p.Struct.Fields {
			v, err := c.compileExpr(f.Value)
			if err != nil {
				return "", err
			}
			parts[i] = fmt.Sprintf("%s: %s", f.Name, v)
		}
		return "%{" + strings.Join(parts, ", ") + "}", nil
	case p.FunExpr != nil:
		return c.compileFunExpr(p.FunExpr)
	case p.Call != nil:
		args := []string{}
		for _, a := range p.Call.Args {
			v, err := c.compileExpr(a)
			if err != nil {
				return "", err
			}
			args = append(args, v)
		}
		argStr := strings.Join(args, ", ")
		switch p.Call.Func {
		case "print":
			return fmt.Sprintf("IO.puts(%s)", argStr), nil
		case "len":
			return fmt.Sprintf("length(%s)", argStr), nil
		case "count":
			return fmt.Sprintf("Enum.count(%s)", argStr), nil
		case "avg":
			return fmt.Sprintf("if Enum.count(%[1]s) == 0, do: 0, else: Enum.sum(%[1]s) / Enum.count(%[1]s)", argStr), nil
		case "str":
			return fmt.Sprintf("to_string(%s)", argStr), nil
		case "input":
			return "String.trim(IO.gets(\"\"))", nil
		default:
			return fmt.Sprintf("%s(%s)", p.Call.Func, argStr), nil
		}
	case p.Query != nil:
		return c.compileQueryExpr(p.Query)
	}
	return "", fmt.Errorf("unsupported expression")
}

func (c *Compiler) compileFunExpr(fn *parser.FunExpr) (string, error) {
	params := make([]string, len(fn.Params))
	for i, p := range fn.Params {
		params[i] = p.Name
	}
	if fn.ExprBody != nil {
		expr, err := c.compileExpr(fn.ExprBody)
		if err != nil {
			return "", err
		}
		return fmt.Sprintf("fn %s -> %s end", strings.Join(params, ", "), expr), nil
	}
	return "", fmt.Errorf("block function expressions not supported")
}
