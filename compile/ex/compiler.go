// Package excode translates Mochi ASTs into Elixir source code.
package excode

import (
	"bytes"
	"fmt"
	"regexp"
	"sort"
	"strconv"
	"strings"

	"mochi/parser"
	"mochi/types"
)

// Compiler translates a Mochi AST into Elixir source code.
type Compiler struct {
	buf     bytes.Buffer
	indent  int
	env     *types.Env
	tmp     int
	helpers map[string]bool
	funcs   map[string]bool
}

var atomIdent = regexp.MustCompile(`^[a-z_][a-zA-Z0-9_]*$`)

var exReserved = map[string]bool{
	"end": true,
}

func sanitizeName(name string) string {
	if exReserved[name] {
		return name + "_"
	}
	return name
}

func assignedVars(stmts []*parser.Statement) []string {
	set := map[string]struct{}{}
	decl := map[string]struct{}{}

	var walkIf func(*parser.IfStmt)
	var walk func([]*parser.Statement)

	walkIf = func(ifst *parser.IfStmt) {
		if ifst == nil {
			return
		}
		walk(ifst.Then)
		walk(ifst.Else)
		walkIf(ifst.ElseIf)
	}

	walk = func(st []*parser.Statement) {
		for _, s := range st {
			if s.Assign != nil {
				set[s.Assign.Name] = struct{}{}
			}
			if s.Var != nil {
				decl[s.Var.Name] = struct{}{}
			}
			if s.Let != nil {
				decl[s.Let.Name] = struct{}{}
			}
			if s.For != nil {
				walk(s.For.Body)
			}
			if s.While != nil {
				walk(s.While.Body)
			}
			if s.If != nil {
				walkIf(s.If)
			}
		}
	}

	walk(stmts)

	for v := range decl {
		delete(set, v)
	}
	vars := make([]string, 0, len(set))
	for v := range set {
		vars = append(vars, v)
	}
	sort.Strings(vars)
	return vars
}

func New(env *types.Env) *Compiler {
	return &Compiler{env: env, helpers: make(map[string]bool), funcs: make(map[string]bool)}
}

func (c *Compiler) writeln(s string) {
	for i := 0; i < c.indent; i++ {
		c.buf.WriteByte('\t')
	}
	c.buf.WriteString(s)
	c.buf.WriteByte('\n')
}

func (c *Compiler) writeIndent() {
	for i := 0; i < c.indent; i++ {
		c.buf.WriteByte('\t')
	}
}

func (c *Compiler) newTemp() string {
	c.tmp++
	return fmt.Sprintf("t%d", c.tmp)
}

func (c *Compiler) Compile(prog *parser.Program) ([]byte, error) {
	c.writeln("# Generated by Mochi Elixir compiler")
	c.writeln("defmodule Main do")
	c.indent++
	for _, s := range prog.Statements {
		if s.Fun != nil {
			if err := c.compileFunStmt(s.Fun); err != nil {
				return nil, err
			}
			c.writeln("")
		}
	}
	c.writeln("def main do")
	c.indent++
	for _, s := range prog.Statements {
		if s.Fun == nil {
			if err := c.compileStmt(s); err != nil {
				return nil, err
			}
		}
	}
	c.indent--
	c.writeln("end")
	c.emitRuntime()
	c.writeln("end")
	c.indent--
	c.writeln("Main.main()")
	return c.buf.Bytes(), nil
}

func (c *Compiler) compileFunStmt(fun *parser.FunStmt) error {
	if c.indent > 1 {
		if c.env != nil {
			c.env.SetVar(fun.Name, types.FuncType{}, false)
		}
		expr, err := c.compileFunExpr(&parser.FunExpr{Params: fun.Params, BlockBody: fun.Body})
		if err != nil {
			return err
		}
		c.writeln(fmt.Sprintf("%s = %s", sanitizeName(fun.Name), expr))
		return nil
	}

	// record top-level function name for call handling
	c.funcs[fun.Name] = true

	c.writeIndent()
	c.buf.WriteString("def " + sanitizeName(fun.Name) + "(")
	for i, p := range fun.Params {
		if i > 0 {
			c.buf.WriteString(", ")
		}
		c.buf.WriteString(sanitizeName(p.Name))
	}
	c.buf.WriteString(") do\n")
	c.indent++
	c.writeln("try do")
	c.indent++
	for _, s := range fun.Body {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	c.writeln("catch {:return, v} -> v end")
	c.indent--
	c.writeln("end")
	return nil
}

func (c *Compiler) compileStmt(s *parser.Statement) error {
	switch {
	case s.Let != nil:
		val, err := c.compileExpr(s.Let.Value)
		if err != nil {
			return err
		}
		name := sanitizeName(s.Let.Name)
		c.writeln(fmt.Sprintf("%s = %s", name, val))
	case s.Var != nil:
		return c.compileVar(s.Var)
	case s.Assign != nil:
		return c.compileAssign(s.Assign)
	case s.Return != nil:
		val, err := c.compileExpr(s.Return.Value)
		if err != nil {
			return err
		}
		c.writeln(fmt.Sprintf("throw {:return, %s}", val))
	case s.Expr != nil:
		expr, err := c.compileExpr(s.Expr.Expr)
		if err != nil {
			return err
		}
		c.writeln(expr)
	case s.For != nil:
		return c.compileFor(s.For)
	case s.While != nil:
		return c.compileWhile(s.While)
	case s.If != nil:
		return c.compileIf(s.If)
	case s.Break != nil:
		c.writeln("throw :break")
	case s.Continue != nil:
		c.writeln("throw :continue")
	case s.Fun != nil:
		return c.compileFunStmt(s.Fun)
	default:
		// ignore
	}
	return nil
}

func (c *Compiler) compileIf(stmt *parser.IfStmt) error {
	cond, err := c.compileExpr(stmt.Cond)
	if err != nil {
		return err
	}
	c.writeln(fmt.Sprintf("if %s do", cond))
	c.indent++
	for _, s := range stmt.Then {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	if stmt.ElseIf != nil || len(stmt.Else) > 0 {
		c.writeln("else")
		c.indent++
		if stmt.ElseIf != nil {
			if err := c.compileIf(stmt.ElseIf); err != nil {
				return err
			}
		} else {
			for _, s := range stmt.Else {
				if err := c.compileStmt(s); err != nil {
					return err
				}
			}
		}
		c.indent--
	}
	c.writeln("end")
	return nil
}

func (c *Compiler) compileWhile(stmt *parser.WhileStmt) error {
	cond, err := c.compileExpr(stmt.Cond)
	if err != nil {
		return err
	}

	vars := assignedVars(stmt.Body)
	for i, v := range vars {
		vars[i] = sanitizeName(v)
	}
	loop := c.newTemp()

	if len(vars) == 0 {
		c.writeln(fmt.Sprintf("%s = fn %s ->", loop, loop))
	} else {
		params := append([]string{loop}, vars...)
		c.writeln(fmt.Sprintf("%s = fn %s ->", loop, strings.Join(params, ", ")))
	}
	c.indent++
	c.writeln("try do")
	c.indent++
	c.writeln(fmt.Sprintf("if %s do", cond))
	c.indent++
	for _, s := range stmt.Body {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	callArgs := append([]string{loop}, vars...)
	c.writeln(fmt.Sprintf("%s.(%s)", loop, strings.Join(callArgs, ", ")))
	c.indent--
	c.writeln("else")
	c.indent++
	if len(vars) == 0 {
		c.writeln(":ok")
	} else {
		c.writeln(fmt.Sprintf("{:ok, %s}", strings.Join(vars, ", ")))
	}
	c.indent--
	c.writeln("end")
	c.indent--
	c.writeln("catch :break ->")
	c.indent++
	if len(vars) == 0 {
		c.writeln(":ok")
	} else {
		c.writeln(fmt.Sprintf("{:ok, %s}", strings.Join(vars, ", ")))
	}
	c.indent--
	c.writeln("end")
	c.indent--
	c.writeln("end")
	if len(vars) == 0 {
		c.writeln(fmt.Sprintf("%s.(%s)", loop, loop))
	} else {
		callArgs := append([]string{loop}, vars...)
		c.writeln(fmt.Sprintf("{_, %s} = %s.(%s)", strings.Join(vars, ", "), loop, strings.Join(callArgs, ", ")))
		for _, v := range vars {
			c.writeln(fmt.Sprintf("_ = %s", v))
		}
	}
	return nil
}

func (c *Compiler) compileFor(stmt *parser.ForStmt) error {
	name := sanitizeName(stmt.Name)
	mutated := assignedVars(stmt.Body)
	for i, v := range mutated {
		mutated[i] = sanitizeName(v)
	}

	srcExpr, err := c.compileExpr(stmt.Source)
	if err != nil {
		return err
	}
	if stmt.RangeEnd != nil {
		end, err := c.compileExpr(stmt.RangeEnd)
		if err != nil {
			return err
		}
		srcExpr = fmt.Sprintf("%s..(%s - 1)", srcExpr, end)
	} else if strings.HasPrefix(srcExpr, "\"") && strings.HasSuffix(srcExpr, "\"") {
		srcExpr = fmt.Sprintf("String.graphemes(%s)", srcExpr)
	}

	if len(mutated) == 0 {
		c.writeln(fmt.Sprintf("for %s <- %s do", name, srcExpr))
		c.indent++
		for _, s := range stmt.Body {
			if err := c.compileStmt(s); err != nil {
				return err
			}
		}
		c.indent--
		c.writeln("end")
		return nil
	}

	tuple := strings.Join(mutated, ", ")
	c.writeln(fmt.Sprintf("{%s} = Enum.reduce(%s, {%s}, fn %s, {%s} ->", tuple, srcExpr, tuple, name, tuple))
	c.indent++
	for _, s := range stmt.Body {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.writeln(fmt.Sprintf("{%s}", tuple))
	c.indent--
	c.writeln("end)")
	for _, v := range mutated {
		c.writeln(fmt.Sprintf("_ = %s", v))
	}
	return nil
}

func (c *Compiler) compileVar(stmt *parser.VarStmt) error {
	name := sanitizeName(stmt.Name)
	value := "nil"
	if stmt.Value != nil {
		v, err := c.compileExpr(stmt.Value)
		if err != nil {
			return err
		}
		value = v
	}
	c.writeln(fmt.Sprintf("%s = %s", name, value))
	c.writeln(fmt.Sprintf("_ = %s", name))
	return nil
}

func (c *Compiler) compileAssign(stmt *parser.AssignStmt) error {
	name := sanitizeName(stmt.Name)
	value, err := c.compileExpr(stmt.Value)
	if err != nil {
		return err
	}
	if len(stmt.Index) > 0 {
		idx, err := c.compileExpr(stmt.Index[0].Start)
		if err != nil {
			return err
		}
		c.writeln(fmt.Sprintf("%s = Map.put(%s, %s, %s)", name, name, idx, value))
		return nil
	}
	c.writeln(fmt.Sprintf("%s = %s", name, value))
	return nil
}

func (c *Compiler) compileQueryExpr(q *parser.QueryExpr) (string, error) {
	if len(q.Joins) > 0 || q.Group != nil {
		return "", fmt.Errorf("unsupported query expression")
	}
	src, err := c.compileExpr(q.Source)
	if err != nil {
		return "", err
	}
	orig := c.env
	child := types.NewEnv(c.env)
	child.SetVar(q.Var, types.AnyType{}, true)
	for _, f := range q.Froms {
		child.SetVar(f.Var, types.AnyType{}, true)
	}
	c.env = child
	sel, err := c.compileExpr(q.Select)
	if err != nil {
		c.env = orig
		return "", err
	}
	var cond, sortExpr, skipExpr, takeExpr string
	if q.Where != nil {
		cond, err = c.compileExpr(q.Where)
		if err != nil {
			c.env = orig
			return "", err
		}
	}
	if q.Sort != nil {
		sortExpr, err = c.compileExpr(q.Sort)
		if err != nil {
			c.env = orig
			return "", err
		}
	}
	if q.Skip != nil {
		skipExpr, err = c.compileExpr(q.Skip)
		if err != nil {
			c.env = orig
			return "", err
		}
	}
	if q.Take != nil {
		takeExpr, err = c.compileExpr(q.Take)
		if err != nil {
			c.env = orig
			return "", err
		}
	}
	c.env = orig

	if len(q.Froms) > 0 {
		if sortExpr != "" || skipExpr != "" || takeExpr != "" {
			return "", fmt.Errorf("unsupported query expression")
		}
		parts := make([]string, len(q.Froms))
		for i, f := range q.Froms {
			fs, err := c.compileExpr(f.Src)
			if err != nil {
				return "", err
			}
			parts[i] = fmt.Sprintf("%s <- %s", f.Var, fs)
		}
		var b strings.Builder
		b.WriteString("for ")
		b.WriteString(q.Var)
		b.WriteString(" <- ")
		b.WriteString(src)
		for _, p := range parts {
			b.WriteString(", ")
			b.WriteString(p)
		}
		if cond != "" {
			b.WriteString(", ")
			b.WriteString(cond)
		}
		b.WriteString(", do: ")
		b.WriteString(sel)
		return b.String(), nil
	}

	items := src
	if sortExpr != "" {
		items = fmt.Sprintf("Enum.sort_by(%s, fn %s -> %s end)", items, q.Var, sortExpr)
	}
	if skipExpr != "" {
		items = fmt.Sprintf("Enum.drop(%s, %s)", items, skipExpr)
	}
	if takeExpr != "" {
		items = fmt.Sprintf("Enum.take(%s, %s)", items, takeExpr)
	}

	var b strings.Builder
	b.WriteString("for ")
	b.WriteString(q.Var)
	b.WriteString(" <- ")
	b.WriteString(items)
	if cond != "" {
		b.WriteString(", ")
		b.WriteString(cond)
	}
	b.WriteString(", do: ")
	b.WriteString(sel)
	return b.String(), nil
}

func (c *Compiler) compileExpr(e *parser.Expr) (string, error) {
	if e == nil {
		return "", fmt.Errorf("nil expr")
	}
	return c.compileBinary(e.Binary)
}

func (c *Compiler) compileBinary(b *parser.BinaryExpr) (string, error) {
	type operand struct {
		expr     string
		isList   bool
		isString bool
	}

	if b == nil {
		return "", fmt.Errorf("nil binary expression")
	}

	ops := []string{}
	operands := []operand{}

	first, err := c.compileUnary(b.Left)
	if err != nil {
		return "", err
	}
	operands = append(operands, operand{expr: first, isList: isListUnary(b.Left, c.env), isString: isStringUnary(b.Left, c.env)})

	for _, part := range b.Right {
		r, err := c.compilePostfix(part.Right)
		if err != nil {
			return "", err
		}
		operands = append(operands, operand{expr: r, isList: isListPostfix(part.Right, c.env), isString: isStringPostfix(part.Right, c.env)})
		ops = append(ops, part.Op)
	}

	levels := [][]string{
		{"*", "/", "%"},
		{"+", "-"},
		{"<", "<=", ">", ">="},
		{"==", "!=", "in"},
		{"&&"},
		{"||"},
	}

	contains := func(sl []string, s string) bool {
		for _, v := range sl {
			if v == s {
				return true
			}
		}
		return false
	}

	for _, level := range levels {
		for i := 0; i < len(ops); {
			if !contains(level, ops[i]) {
				i++
				continue
			}

			op := ops[i]
			l := operands[i]
			r := operands[i+1]

			var expr string
			var isList bool
			var isString bool

			switch op {
			case "+":
				if l.isList || r.isList {
					expr = fmt.Sprintf("%s ++ %s", l.expr, r.expr)
					isList = true
				} else if l.isString || r.isString {
					expr = fmt.Sprintf("(%s <> %s)", l.expr, r.expr)
					isString = true
				} else {
					expr = fmt.Sprintf("(%s + %s)", l.expr, r.expr)
				}
			case "-", "*", "/", "<", "<=", ">", ">=", "&&", "||":
				expr = fmt.Sprintf("(%s %s %s)", l.expr, op, r.expr)
			case "%":
				expr = fmt.Sprintf("rem(%s, %s)", l.expr, r.expr)
			case "==", "!=":
				expr = fmt.Sprintf("(%s %s %s)", l.expr, op, r.expr)
			case "in":
				expr = fmt.Sprintf("(if is_map(%s), do: Map.has_key?(%s, %s), else: Enum.member?(%s, %s))", r.expr, r.expr, l.expr, r.expr, l.expr)
			default:
				return "", fmt.Errorf("unsupported operator %s", op)
			}

			operands[i] = operand{expr: expr, isList: isList, isString: isString}
			operands = append(operands[:i+1], operands[i+2:]...)
			ops = append(ops[:i], ops[i+1:]...)
		}
	}

	if len(operands) != 1 {
		return "", fmt.Errorf("unexpected state in binary expression")
	}

	return operands[0].expr, nil
}

func isListPostfix(p *parser.PostfixExpr, env *types.Env) bool {
	if p == nil || len(p.Ops) > 0 {
		return false
	}
	if p.Target != nil {
		if p.Target.List != nil {
			return true
		}
		if p.Target.Selector != nil && len(p.Target.Selector.Tail) == 0 && env != nil {
			if t, err := env.GetVar(p.Target.Selector.Root); err == nil {
				if _, ok := t.(types.ListType); ok {
					return true
				}
			}
		}
	}
	return false
}

func isListUnary(u *parser.Unary, env *types.Env) bool {
	if u == nil || len(u.Ops) > 0 {
		return false
	}
	return isListPostfix(u.Value, env)
}

func isStringPostfix(p *parser.PostfixExpr, env *types.Env) bool {
	if p == nil || len(p.Ops) > 0 {
		return false
	}
	if p.Target != nil {
		if p.Target.Lit != nil && p.Target.Lit.Str != nil {
			return true
		}
		if p.Target.Selector != nil && len(p.Target.Selector.Tail) == 0 && env != nil {
			if t, err := env.GetVar(p.Target.Selector.Root); err == nil {
				if _, ok := t.(types.StringType); ok {
					return true
				}
			}
		}
	}
	return false
}

func isStringUnary(u *parser.Unary, env *types.Env) bool {
	if u == nil || len(u.Ops) > 0 {
		return false
	}
	return isStringPostfix(u.Value, env)
}

func (c *Compiler) compileUnary(u *parser.Unary) (string, error) {
	expr, err := c.compilePostfix(u.Value)
	if err != nil {
		return "", err
	}
	for i := len(u.Ops) - 1; i >= 0; i-- {
		switch u.Ops[i] {
		case "-":
			expr = "-" + expr
		case "!":
			expr = "!" + expr
		}
	}
	return expr, nil
}

func (c *Compiler) compilePostfix(p *parser.PostfixExpr) (string, error) {
	res, err := c.compilePrimary(p.Target)
	if err != nil {
		return "", err
	}
	var typ types.Type
	if t, ok := c.staticTypeOfPostfix(p); ok {
		typ = t
	} else {
		typ = c.inferPrimaryType(p.Target)
	}
	for _, op := range p.Ops {
		if op.Index != nil {
			idx, err := c.compileExpr(op.Index.Start)
			if err != nil {
				return "", err
			}
			if op.Index.Colon == nil {
				switch tt := typ.(type) {
				case types.MapType:
					res = fmt.Sprintf("Map.get(%s, %s)", res, idx)
					typ = tt.Value
				case types.StringType:
					res = fmt.Sprintf("Enum.at(String.graphemes(%s), %s)", res, idx)
				default:
					res = fmt.Sprintf("Enum.at(%s, %s)", res, idx)
					if lt, ok := tt.(types.ListType); ok {
						typ = lt.Elem
					}
				}
			} else {
				start := idx
				end := "nil"
				if op.Index.End != nil {
					e, err := c.compileExpr(op.Index.End)
					if err != nil {
						return "", err
					}
					end = e
				}
				switch typ.(type) {
				case types.StringType:
					slice := fmt.Sprintf("Enum.slice(String.graphemes(%s), %s, %s == nil and length(String.graphemes(%s)) - %s || (%s - %s))", res, start, end, res, start, end, start)
					res = fmt.Sprintf("Enum.join(%s)", slice)
				default:
					length := fmt.Sprintf("(%s) - %s", end, start)
					if end == "nil" {
						length = fmt.Sprintf("length(%s) - %s", res, start)
					}
					res = fmt.Sprintf("Enum.slice(%s, %s, %s)", res, start, length)
				}
			}
		} else if op.Call != nil {
			args := []string{}
			for _, a := range op.Call.Args {
				v, err := c.compileExpr(a)
				if err != nil {
					return "", err
				}
				args = append(args, v)
			}
			argStr := strings.Join(args, ", ")
			switch res {
			case "print":
				if len(args) == 1 {
					res = fmt.Sprintf("IO.puts(%s)", argStr)
				} else {
					res = fmt.Sprintf("IO.puts(Enum.join(Enum.map([%s], &to_string(&1)), \" \"))", argStr)
				}
			case "len":
				res = fmt.Sprintf("length(%s)", argStr)
			case "count":
				c.use("_count")
				res = fmt.Sprintf("_count(%s)", argStr)
			case "avg":
				c.use("_avg")
				res = fmt.Sprintf("_avg(%s)", argStr)
			case "str":
				res = fmt.Sprintf("to_string(%s)", argStr)
			case "input":
				c.use("_input")
				res = "_input()"
			default:
				if _, ok := typ.(types.FuncType); ok {
					res = fmt.Sprintf("%s.(%s)", res, argStr)
					typ = typ.(types.FuncType).Return
				} else {
					res = fmt.Sprintf("%s(%s)", res, argStr)
				}
			}
		} else if op.Cast != nil {
			if op.Cast.Type != nil {
				t := c.resolveTypeRef(op.Cast.Type)
				if _, ok := t.(types.StructType); ok {
					res = fmt.Sprintf("Map.new(%s, fn {k, v} -> {String.to_atom(to_string(k)), v} end)", res)
				}
				typ = t
			}
		}
	}
	return res, nil
}

func (c *Compiler) compilePrimary(p *parser.Primary) (string, error) {
	switch {
	case p.Lit != nil:
		if p.Lit.Int != nil {
			return strconv.Itoa(*p.Lit.Int), nil
		}
		if p.Lit.Float != nil {
			return strconv.FormatFloat(*p.Lit.Float, 'f', -1, 64), nil
		}
		if p.Lit.Str != nil {
			return strconv.Quote(*p.Lit.Str), nil
		}
		if p.Lit.Bool != nil {
			if bool(*p.Lit.Bool) {
				return "true", nil
			}
			return "false", nil
		}
	case p.List != nil:
		elems := make([]string, len(p.List.Elems))
		for i, e := range p.List.Elems {
			v, err := c.compileExpr(e)
			if err != nil {
				return "", err
			}
			elems[i] = v
		}
		return "[" + strings.Join(elems, ", ") + "]", nil
	case p.Map != nil:
		items := make([]string, len(p.Map.Items))
		for i, it := range p.Map.Items {
			if s, ok := simpleAtomKey(it.Key); ok {
				v, err := c.compileExpr(it.Value)
				if err != nil {
					return "", err
				}
				items[i] = fmt.Sprintf("%s: %s", s, v)
				continue
			}
			k, err := c.compileExpr(it.Key)
			if err != nil {
				return "", err
			}
			v, err := c.compileExpr(it.Value)
			if err != nil {
				return "", err
			}
			items[i] = fmt.Sprintf("%s => %s", k, v)
		}
		return "%{" + strings.Join(items, ", ") + "}", nil
	case p.Selector != nil:
		name := sanitizeName(p.Selector.Root)
		if len(p.Selector.Tail) > 0 {
			name += "." + strings.Join(p.Selector.Tail, ".")
		}
		return name, nil
	case p.Group != nil:
		return c.compileExpr(p.Group)
	case p.Struct != nil:
		parts := make([]string, len(p.Struct.Fields))
		for i, f := range p.Struct.Fields {
			v, err := c.compileExpr(f.Value)
			if err != nil {
				return "", err
			}
			parts[i] = fmt.Sprintf("%s: %s", f.Name, v)
		}
		return "%{" + strings.Join(parts, ", ") + "}", nil
	case p.FunExpr != nil:
		return c.compileFunExpr(p.FunExpr)
	case p.Call != nil:
		args := []string{}
		for _, a := range p.Call.Args {
			v, err := c.compileExpr(a)
			if err != nil {
				return "", err
			}
			args = append(args, v)
		}
		argStr := strings.Join(args, ", ")
		switch p.Call.Func {
		case "print":
			if len(args) == 1 {
				return fmt.Sprintf("IO.puts(%s)", argStr), nil
			}
			return fmt.Sprintf("IO.puts(Enum.join(Enum.map([%s], &to_string(&1)), \" \"))", argStr), nil
		case "len":
			return fmt.Sprintf("length(%s)", argStr), nil
		case "count":
			c.use("_count")
			return fmt.Sprintf("_count(%s)", argStr), nil
		case "avg":
			c.use("_avg")
			return fmt.Sprintf("_avg(%s)", argStr), nil
		case "str":
			return fmt.Sprintf("to_string(%s)", argStr), nil
		case "input":
			c.use("_input")
			return "_input()", nil
		default:
			if c.funcs[p.Call.Func] {
				return fmt.Sprintf("%s(%s)", sanitizeName(p.Call.Func), argStr), nil
			}
			if c.env != nil {
				if t, err := c.env.GetVar(p.Call.Func); err == nil {
					if _, ok := t.(types.FuncType); ok {
						return fmt.Sprintf("%s.(%s)", sanitizeName(p.Call.Func), argStr), nil
					}
				}
			}
			return fmt.Sprintf("%s(%s)", sanitizeName(p.Call.Func), argStr), nil
		}
	case p.Query != nil:
		return c.compileQueryExpr(p.Query)
	}
	return "", fmt.Errorf("unsupported expression")
}

func (c *Compiler) compileFunExpr(fn *parser.FunExpr) (string, error) {
	params := make([]string, len(fn.Params))
	for i, p := range fn.Params {
		params[i] = p.Name
	}
	if fn.ExprBody != nil {
		expr, err := c.compileExpr(fn.ExprBody)
		if err != nil {
			return "", err
		}
		return fmt.Sprintf("fn %s -> %s end", strings.Join(params, ", "), expr), nil
	}
	if len(fn.BlockBody) > 0 {
		sub := &Compiler{env: c.env, indent: c.indent + 1}
		for _, s := range fn.BlockBody {
			if err := sub.compileStmt(s); err != nil {
				return "", err
			}
		}
		body := sub.buf.String()
		var b strings.Builder
		b.WriteString("fn " + strings.Join(params, ", ") + " ->\n")
		b.WriteString(body)
		for i := 0; i < c.indent; i++ {
			b.WriteByte('\t')
		}
		b.WriteString("end")
		return b.String(), nil
	}
	return "", fmt.Errorf("block function expressions not supported")
}

// simpleAtomKey checks if e is a bare identifier or string literal and returns
// its value for use as a map key. This mirrors simpleStringKey in the Go
// backend so that expressions like `{n: 1}` produce `%{n: 1}` rather than using
// the variable value as the key.
func simpleAtomKey(e *parser.Expr) (string, bool) {
	if e == nil || e.Binary == nil || len(e.Binary.Right) != 0 {
		return "", false
	}
	u := e.Binary.Left
	if len(u.Ops) != 0 {
		return "", false
	}
	p := u.Value
	if len(p.Ops) != 0 {
		return "", false
	}
	if p.Target.Selector != nil && len(p.Target.Selector.Tail) == 0 {
		return p.Target.Selector.Root, true
	}
	if p.Target.Lit != nil && p.Target.Lit.Str != nil {
		s := *p.Target.Lit.Str
		if isValidAtom(s) {
			return s, true
		}
	}
	return "", false
}

func isValidAtom(s string) bool {
	return atomIdent.MatchString(s)
}

func (c *Compiler) staticTypeOfPostfix(p *parser.PostfixExpr) (types.Type, bool) {
	if p == nil || len(p.Ops) > 0 {
		return nil, false
	}
	return c.staticTypeOfPrimary(p.Target)
}

func (c *Compiler) staticTypeOfPrimary(p *parser.Primary) (types.Type, bool) {
	if p == nil {
		return nil, false
	}
	switch {
	case p.List != nil:
		return types.ListType{Elem: types.AnyType{}}, true
	case p.Map != nil:
		return types.MapType{Key: types.AnyType{}, Value: types.AnyType{}}, true
	case p.Selector != nil && len(p.Selector.Tail) == 0 && c.env != nil:
		t, err := c.env.GetVar(p.Selector.Root)
		if err == nil {
			return t, true
		}
	}
	return nil, false
}

func (c *Compiler) resolveTypeRef(t *parser.TypeRef) types.Type {
	if t == nil {
		return types.AnyType{}
	}
	if t.Simple != nil {
		switch *t.Simple {
		case "int":
			return types.IntType{}
		case "float":
			return types.FloatType{}
		case "bool":
			return types.BoolType{}
		case "string":
			return types.StringType{}
		default:
			if c.env != nil {
				if st, ok := c.env.GetStruct(*t.Simple); ok {
					return st
				}
				if ut, ok := c.env.GetUnion(*t.Simple); ok {
					return ut
				}
			}
		}
	}
	if t.Generic != nil {
		if t.Generic.Name == "list" && len(t.Generic.Args) == 1 {
			return types.ListType{Elem: c.resolveTypeRef(t.Generic.Args[0])}
		}
		if t.Generic.Name == "map" && len(t.Generic.Args) == 2 {
			return types.MapType{Key: c.resolveTypeRef(t.Generic.Args[0]), Value: c.resolveTypeRef(t.Generic.Args[1])}
		}
	}
	return types.AnyType{}
}

func (c *Compiler) use(name string) { c.helpers[name] = true }

func (c *Compiler) emitRuntime() {
	if len(c.helpers) == 0 {
		return
	}
	names := make([]string, 0, len(c.helpers))
	for n := range c.helpers {
		names = append(names, n)
	}
	sort.Strings(names)
	for _, n := range names {
		c.writeln(helperMap[n])
	}
}
