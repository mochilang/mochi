package excode

import (
	"bytes"

	pycode "mochi/compile/py"
	"mochi/parser"
	"mochi/types"
)

// Compiler translates a Mochi AST into Elixir source code.
type Compiler struct {
	env *types.Env
}

// New creates a new Elixir compiler instance.
func New(env *types.Env) *Compiler {
	return &Compiler{env: env}
}

// Compile returns Elixir source code implementing prog.
func (c *Compiler) Compile(prog *parser.Program) ([]byte, error) {
	pyc := pycode.New(c.env)
	pySrc, err := pyc.Compile(prog)
	if err != nil {
		return nil, err
	}

	var buf bytes.Buffer
	buf.WriteString("# Generated by Mochi Elixir compiler\n")
	buf.WriteString("python = ~S\"\"\"\n")
	buf.Write(pySrc)
	buf.WriteString("\n\"\"\"\n")
	buf.WriteString("{out, _} = System.cmd(\"python3\", [\"-\"], input: python)\n")
	buf.WriteString("IO.write(out)\n")
	return buf.Bytes(), nil
}
