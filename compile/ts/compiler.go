package tscode

import (
	"bytes"
	"fmt"
	"sort"
	"strings"

	"mochi/parser"
	"mochi/types"
)

// Compiler translates a Mochi AST into TypeScript source code that can be run with Deno.
type Compiler struct {
	buf          bytes.Buffer
	indent       int
	helpers      map[string]bool
	env          *types.Env
	structs      map[string]bool
	agents       map[string]bool
	handlerCount int
}

// New creates a new TypeScript compiler instance.
func New(env *types.Env) *Compiler {
	return &Compiler{
		helpers: make(map[string]bool),
		env:     env,
		structs: make(map[string]bool),
		agents:  make(map[string]bool),
	}
}

func containsStreamCode(stmts []*parser.Statement) bool {
	for _, s := range stmts {
		if stmtHasStream(s) {
			return true
		}
	}
	return false
}

func stmtHasStream(s *parser.Statement) bool {
	switch {
	case s.Stream != nil, s.Emit != nil, s.On != nil, s.Agent != nil:
		return true
	case s.Fun != nil:
		return containsStreamCode(s.Fun.Body)
	case s.Test != nil:
		return containsStreamCode(s.Test.Body)
	case s.If != nil:
		if containsStreamCode(s.If.Then) {
			return true
		}
		if s.If.ElseIf != nil {
			if stmtHasStream(&parser.Statement{If: s.If.ElseIf}) {
				return true
			}
		}
		return containsStreamCode(s.If.Else)
	case s.While != nil:
		return containsStreamCode(s.While.Body)
	case s.For != nil:
		return containsStreamCode(s.For.Body)
	case s.On != nil:
		return containsStreamCode(s.On.Body)
	}
	return false
}

// Compile generates TypeScript source code for the given program.
func (c *Compiler) Compile(prog *parser.Program) ([]byte, error) {
	needsAsync := containsStreamCode(prog.Statements)

	c.writeln("// Generated by Mochi TypeScript compiler")
	c.writeln("")

	// Emit function declarations first.
	for _, s := range prog.Statements {
		if s.Fun != nil {
			if err := c.compileFunStmt(s.Fun); err != nil {
				return nil, err
			}
			c.writeln("")
		}
	}

	// Emit test block declarations.
	for _, s := range prog.Statements {
		if s.Test != nil {
			if err := c.compileTestBlock(s.Test); err != nil {
				return nil, err
			}
			c.writeln("")
		}
	}

	if needsAsync {
		c.writeln("async function main(): Promise<void> {")
	} else {
		c.writeln("function main(): void {")
	}
	c.indent++
	for _, s := range prog.Statements {
		if s.Fun != nil || s.Test != nil {
			continue
		}
		if err := c.compileStmt(s); err != nil {
			return nil, err
		}
	}
	for _, s := range prog.Statements {
		if s.Test != nil {
			name := sanitizeName(s.Test.Name)
			c.writeln(fmt.Sprintf("%s()", name))
		}
	}
	c.indent--
	c.writeln("}")
	if needsAsync {
		c.writeln("await main()")
		c.writeln("await _waitAll()")
		c.use("_waitAll")
	} else {
		c.writeln("main()")
	}
	c.writeln("")
	c.emitRuntime()
	return c.buf.Bytes(), nil
}

// --- Statement Compilation ---

func (c *Compiler) compileStmt(s *parser.Statement) error {
	switch {
	case s.Let != nil:
		return c.compileLet(s.Let)
	case s.Var != nil:
		return c.compileVar(s.Var)
	case s.Assign != nil:
		return c.compileAssign(s.Assign)
	case s.Stream != nil:
		return c.compileStreamDecl(s.Stream)
	case s.On != nil:
		return c.compileOnHandler(s.On)
	case s.Emit != nil:
		return c.compileEmit(s.Emit)
	case s.Agent != nil:
		return c.compileAgentDecl(s.Agent)
	case s.Type != nil:
		return c.compileTypeDecl(s.Type)
	case s.Expect != nil:
		return c.compileExpect(s.Expect)
	case s.Expr != nil:
		expr, err := c.compileExpr(s.Expr.Expr)
		if err != nil {
			return err
		}
		c.writeln(expr)
		return nil
	case s.Return != nil:
		expr, err := c.compileExpr(s.Return.Value)
		if err != nil {
			return err
		}
		c.writeln("return " + expr)
		return nil
	case s.If != nil:
		return c.compileIf(s.If)
	case s.While != nil:
		return c.compileWhile(s.While)
	case s.For != nil:
		return c.compileFor(s.For)
	case s.Break != nil:
		c.writeln("break")
		return nil
	case s.Continue != nil:
		c.writeln("continue")
		return nil
	default:
		return nil
	}
}

func (c *Compiler) compileLet(s *parser.LetStmt) error {
	name := sanitizeName(s.Name)
	value := "undefined"
	if s.Value != nil {
		v, err := c.compileExpr(s.Value)
		if err != nil {
			return err
		}
		value = v
	}
	c.writeln(fmt.Sprintf("let %s = %s", name, value))
	return nil
}

func (c *Compiler) compileVar(s *parser.VarStmt) error {
	name := sanitizeName(s.Name)
	value := "undefined"
	if s.Value != nil {
		v, err := c.compileExpr(s.Value)
		if err != nil {
			return err
		}
		value = v
	}
	c.writeln(fmt.Sprintf("let %s = %s", name, value))
	return nil
}

func (c *Compiler) compileAssign(s *parser.AssignStmt) error {
	name := sanitizeName(s.Name)
	value, err := c.compileExpr(s.Value)
	if err != nil {
		return err
	}
	c.writeln(fmt.Sprintf("%s = %s", name, value))
	return nil
}

func (c *Compiler) compileExpect(e *parser.ExpectStmt) error {
	expr, err := c.compileExpr(e.Value)
	if err != nil {
		return err
	}
	c.writeln(fmt.Sprintf("if (!(%s)) { throw new Error('expect failed') }", expr))
	return nil
}

func (c *Compiler) compileStreamDecl(s *parser.StreamDecl) error {
	st, ok := c.env.GetStream(s.Name)
	if !ok {
		return fmt.Errorf("unknown stream: %s", s.Name)
	}
	c.compileStructType(st)
	varName := unexportName(sanitizeName(s.Name)) + "Stream"
	c.use("_stream")
	c.writeln(fmt.Sprintf("const %s = new Stream(%q)", varName, s.Name))
	return nil
}

func (c *Compiler) compileOnHandler(h *parser.OnHandler) error {
	st, ok := c.env.GetStream(h.Stream)
	if !ok {
		return fmt.Errorf("unknown stream: %s", h.Stream)
	}
	c.compileStructType(st)
	streamVar := unexportName(sanitizeName(h.Stream)) + "Stream"
	handlerName := fmt.Sprintf("_handler_%d", c.handlerCount)
	c.handlerCount++
	c.writeln(fmt.Sprintf("function %s(ev: %s): void {", handlerName, sanitizeName(st.Name)))
	c.indent++
	alias := sanitizeName(h.Alias)
	c.writeln(fmt.Sprintf("const %s = ev", alias))
	child := types.NewEnv(c.env)
	child.SetVar(h.Alias, st, true)
	orig := c.env
	c.env = child
	for _, stmt := range h.Body {
		if err := c.compileStmt(stmt); err != nil {
			c.env = orig
			return err
		}
	}
	c.env = orig
	c.indent--
	c.writeln("}")
	c.writeln(fmt.Sprintf("%s.register(%s)", streamVar, handlerName))
	c.use("_stream")
	return nil
}

func (c *Compiler) compileEmit(e *parser.EmitStmt) error {
	st, ok := c.env.GetStream(e.Stream)
	if !ok {
		return fmt.Errorf("unknown stream: %s", e.Stream)
	}
	c.compileStructType(st)
	parts := make([]string, len(e.Fields))
	for i, f := range e.Fields {
		v, err := c.compileExpr(f.Value)
		if err != nil {
			return err
		}
		parts[i] = fmt.Sprintf("%s: %s", sanitizeName(f.Name), v)
	}
	lit := "{" + strings.Join(parts, ", ") + "}"
	streamVar := unexportName(sanitizeName(e.Stream)) + "Stream"
	c.writeln(fmt.Sprintf("%s.append(%s)", streamVar, lit))
	c.use("_stream")
	return nil
}

func (c *Compiler) compileAgentDecl(a *parser.AgentDecl) error {
	st, ok := c.env.GetStruct(a.Name)
	if !ok {
		return fmt.Errorf("unknown agent: %s", a.Name)
	}
	name := sanitizeName(a.Name)
	if c.agents[name] {
		return nil
	}
	c.agents[name] = true

	baseEnv := types.NewEnv(c.env)
	for _, fn := range st.Order {
		baseEnv.SetVar(fn, st.Fields[fn], true)
	}

	c.writeln(fmt.Sprintf("class %s {", name))
	c.indent++
	c.writeln("Agent: Agent")
	for _, fn := range st.Order {
		c.writeln(fmt.Sprintf("%s: any", sanitizeName(fn)))
	}
	c.writeln("constructor() {")
	c.indent++
	c.use("_agent")
	c.writeln(fmt.Sprintf("this.Agent = new Agent(%q)", a.Name))
	orig := c.env
	c.env = baseEnv
	for _, blk := range a.Body {
		switch {
		case blk.Let != nil:
			val := "undefined"
			if blk.Let.Value != nil {
				v, err := c.compileExpr(blk.Let.Value)
				if err != nil {
					c.env = orig
					return err
				}
				val = v
			}
			c.writeln(fmt.Sprintf("this.%s = %s", sanitizeName(blk.Let.Name), val))
		case blk.Var != nil:
			val := "undefined"
			if blk.Var.Value != nil {
				v, err := c.compileExpr(blk.Var.Value)
				if err != nil {
					c.env = orig
					return err
				}
				val = v
			}
			c.writeln(fmt.Sprintf("this.%s = %s", sanitizeName(blk.Var.Name), val))
		}
	}
	c.env = orig
	handlerID := 0
	for _, blk := range a.Body {
		if blk.On != nil {
			streamVar := unexportName(sanitizeName(blk.On.Stream)) + "Stream"
			c.writeln(fmt.Sprintf("this.Agent.on(%s, this._on%d.bind(this))", streamVar, handlerID))
			handlerID++
		}
	}
	for _, blk := range a.Body {
		if blk.Intent != nil {
			mname := sanitizeName(blk.Intent.Name)
			c.writeln(fmt.Sprintf("this.Agent.registerIntent(%q, this.%s.bind(this))", blk.Intent.Name, mname))
		}
	}
	c.writeln("this.Agent.start()")
	c.indent--
	c.writeln("}")

	handlerID = 0
	for _, blk := range a.Body {
		switch {
		case blk.Intent != nil:
			if err := c.compileAgentIntent(name, baseEnv, blk.Intent); err != nil {
				return err
			}
		case blk.On != nil:
			if _, err := c.compileAgentOn(name, baseEnv, blk.On, handlerID); err != nil {
				return err
			}
			handlerID++
		}
	}
	c.indent--
	c.writeln("}")
	c.writeln("")
	c.writeln(fmt.Sprintf("function New%s(): %s {", name, name))
	c.indent++
	c.writeln(fmt.Sprintf("return new %s()", name))
	c.indent--
	c.writeln("}")
	c.writeln("")
	return nil
}

func (c *Compiler) compileAgentIntent(agentName string, env *types.Env, in *parser.IntentDecl) error {
	name := sanitizeName(in.Name)
	c.writeIndent()
	c.buf.WriteString(name + "(")
	for i, p := range in.Params {
		if i > 0 {
			c.buf.WriteString(", ")
		}
		c.buf.WriteString(sanitizeName(p.Name))
	}
	c.buf.WriteString(") {\n")
	child := types.NewEnv(env)
	orig := c.env
	c.env = child
	c.indent++
	for _, s := range in.Body {
		if err := c.compileStmt(s); err != nil {
			c.env = orig
			return err
		}
	}
	c.indent--
	c.env = orig
	c.writeIndent()
	c.buf.WriteString("}\n\n")
	return nil
}

func (c *Compiler) compileAgentOn(agentName string, env *types.Env, h *parser.OnHandler, id int) (string, error) {
	st, ok := c.env.GetStream(h.Stream)
	if !ok {
		return "", fmt.Errorf("unknown stream: %s", h.Stream)
	}
	fname := fmt.Sprintf("_on%d", id)
	c.writeIndent()
	c.buf.WriteString(fmt.Sprintf("%s(ev: %s): void {\n", fname, sanitizeName(st.Name)))
	alias := sanitizeName(h.Alias)
	child := types.NewEnv(env)
	child.SetVar(h.Alias, st, true)
	orig := c.env
	c.env = child
	c.indent++
	c.writeln(fmt.Sprintf("const %s = ev", alias))
	for _, stmt := range h.Body {
		if err := c.compileStmt(stmt); err != nil {
			c.env = orig
			return "", err
		}
	}
	c.indent--
	c.env = orig
	c.writeIndent()
	c.buf.WriteString("}\n\n")
	return fname, nil
}

func (c *Compiler) compileTypeDecl(t *parser.TypeDecl) error {
	name := sanitizeName(t.Name)
	c.writeln(fmt.Sprintf("type %s = {", name))
	c.indent++
	for _, m := range t.Members {
		if m.Field != nil {
			c.writeln(fmt.Sprintf("%s: any;", sanitizeName(m.Field.Name)))
		}
	}
	c.indent--
	c.writeln("}")
	return nil
}

func (c *Compiler) compileIf(stmt *parser.IfStmt) error {
	cond, err := c.compileExpr(stmt.Cond)
	if err != nil {
		return err
	}
	c.writeIndent()
	c.buf.WriteString("if (" + cond + ") {")
	c.buf.WriteByte('\n')
	c.indent++
	for _, s := range stmt.Then {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	c.writeIndent()
	c.buf.WriteString("}")
	if stmt.ElseIf != nil {
		c.buf.WriteString(" else ")
		return c.compileIf(stmt.ElseIf)
	}
	if len(stmt.Else) > 0 {
		c.buf.WriteString(" else {")
		c.buf.WriteByte('\n')
		c.indent++
		for _, s := range stmt.Else {
			if err := c.compileStmt(s); err != nil {
				return err
			}
		}
		c.indent--
		c.writeIndent()
		c.buf.WriteString("}")
	}
	c.buf.WriteByte('\n')
	return nil
}

func (c *Compiler) compileWhile(stmt *parser.WhileStmt) error {
	cond, err := c.compileExpr(stmt.Cond)
	if err != nil {
		return err
	}
	c.writeIndent()
	c.buf.WriteString("while (" + cond + ") {\n")
	c.indent++
	for _, s := range stmt.Body {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	c.writeIndent()
	c.buf.WriteString("}\n")
	return nil
}

func (c *Compiler) compileFor(stmt *parser.ForStmt) error {
	name := sanitizeName(stmt.Name)
	if stmt.RangeEnd != nil {
		start, err := c.compileExpr(stmt.Source)
		if err != nil {
			return err
		}
		end, err := c.compileExpr(stmt.RangeEnd)
		if err != nil {
			return err
		}
		c.writeIndent()
		c.buf.WriteString(fmt.Sprintf("for (let %s = %s; %s < %s; %s++) {\n", name, start, name, end, name))
		c.indent++
		for _, s := range stmt.Body {
			if err := c.compileStmt(s); err != nil {
				return err
			}
		}
		c.indent--
		c.writeIndent()
		c.buf.WriteString("}\n")
		return nil
	}

	src, err := c.compileExpr(stmt.Source)
	if err != nil {
		return err
	}
	c.writeIndent()
	c.use("_iter")
	c.buf.WriteString(fmt.Sprintf("for (const %s of _iter(%s)) {\n", name, src))
	c.indent++
	for _, s := range stmt.Body {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	c.writeIndent()
	c.buf.WriteString("}\n")
	return nil
}

func (c *Compiler) compileFunStmt(fun *parser.FunStmt) error {
	name := sanitizeName(fun.Name)
	c.writeIndent()
	c.buf.WriteString("function " + name + "(")
	for i, p := range fun.Params {
		if i > 0 {
			c.buf.WriteString(", ")
		}
		c.buf.WriteString(sanitizeName(p.Name))
	}
	c.buf.WriteString(") {")
	c.buf.WriteByte('\n')
	c.indent++
	for _, s := range fun.Body {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	c.writeIndent()
	c.buf.WriteString("}\n")
	return nil
}

func (c *Compiler) compileTestBlock(t *parser.TestBlock) error {
	name := sanitizeName(t.Name)
	c.writeIndent()
	c.buf.WriteString("function " + name + "(): void {\n")
	c.indent++
	for _, s := range t.Body {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	c.writeIndent()
	c.buf.WriteString("}\n")
	return nil
}

// --- Expression Compilation ---

func (c *Compiler) compileExpr(e *parser.Expr) (string, error) {
	return c.compileBinaryExpr(e.Binary)
}

func (c *Compiler) compileBinaryExpr(b *parser.BinaryExpr) (string, error) {
	expr, err := c.compileUnary(b.Left)
	if err != nil {
		return "", err
	}
	for _, op := range b.Right {
		right, err := c.compilePostfix(op.Right)
		if err != nil {
			return "", err
		}
		expr = fmt.Sprintf("(%s %s %s)", expr, op.Op, right)
	}
	return expr, nil
}

func (c *Compiler) compileUnary(u *parser.Unary) (string, error) {
	val, err := c.compilePostfix(u.Value)
	if err != nil {
		return "", err
	}
	for i := len(u.Ops) - 1; i >= 0; i-- {
		op := u.Ops[i]
		val = fmt.Sprintf("(%s%s)", op, val)
	}
	return val, nil
}

func (c *Compiler) compilePostfix(p *parser.PostfixExpr) (string, error) {
	expr, err := c.compilePrimary(p.Target)
	if err != nil {
		return "", err
	}
	for _, op := range p.Ops {
		if op.Index == nil {
			if op.Call != nil {
				args := make([]string, len(op.Call.Args))
				for i, a := range op.Call.Args {
					v, err := c.compileExpr(a)
					if err != nil {
						return "", err
					}
					args[i] = v
				}
				expr = fmt.Sprintf("%s(%s)", expr, strings.Join(args, ", "))
			}
			continue
		}
		idx := op.Index
		if idx.Colon != nil {
			start := "0"
			end := "0"
			if idx.Start != nil {
				start, err = c.compileExpr(idx.Start)
				if err != nil {
					return "", err
				}
			}
			if idx.End != nil {
				end, err = c.compileExpr(idx.End)
				if err != nil {
					return "", err
				}
			}
			typ := c.inferPrimaryType(p.Target)
			if _, ok := typ.(types.StringType); ok {
				c.use("_sliceString")
				expr = fmt.Sprintf("_sliceString(%s, %s, %s)", expr, start, end)
			} else {
				c.use("_slice")
				expr = fmt.Sprintf("_slice(%s, %s, %s)", expr, start, end)
			}
		} else {
			idxExpr, err := c.compileExpr(idx.Start)
			if err != nil {
				return "", err
			}
			c.use("_index")
			expr = fmt.Sprintf("_index(%s, %s)", expr, idxExpr)
		}
	}
	return expr, nil
}

func (c *Compiler) compilePrimary(p *parser.Primary) (string, error) {
	switch {
	case p.Call != nil:
		return c.compileCallExpr(p.Call)
	case p.List != nil:
		return c.compileListLiteral(p.List)
	case p.Map != nil:
		return c.compileMapLiteral(p.Map)
	case p.Match != nil:
		return c.compileMatchExpr(p.Match)

	case p.Fetch != nil:
		return c.compileFetchExpr(p.Fetch)

	case p.Generate != nil:
		return c.compileGenerateExpr(p.Generate)
	case p.Lit != nil:
		return c.compileLiteral(p.Lit)
	case p.Group != nil:
		expr, err := c.compileExpr(p.Group)
		if err != nil {
			return "", err
		}
		return "(" + expr + ")", nil
	case p.Selector != nil:
		expr := sanitizeName(p.Selector.Root)
		for _, s := range p.Selector.Tail {
			expr += "." + sanitizeName(s)
		}
		return expr, nil
	case p.Struct != nil:
		if c.env != nil {
			if _, ok := c.env.GetAgent(p.Struct.Name); ok {
				if len(p.Struct.Fields) > 0 {
					return "", fmt.Errorf("agent initialization with fields not supported")
				}
				return fmt.Sprintf("New%s()", sanitizeName(p.Struct.Name)), nil
			}
		}
		parts := make([]string, len(p.Struct.Fields))
		for i, f := range p.Struct.Fields {
			v, err := c.compileExpr(f.Value)
			if err != nil {
				return "", err
			}
			parts[i] = fmt.Sprintf("%s: %s", sanitizeName(f.Name), v)
		}
		return "{" + strings.Join(parts, ", ") + "}", nil
	case p.FunExpr != nil:
		return c.compileFunExpr(p.FunExpr)
	default:
		return "", fmt.Errorf("invalid primary expression")
	}
}

func (c *Compiler) inferPrimaryType(p *parser.Primary) types.Type {
	switch {
	case p == nil:
		return types.AnyType{}
	case p.Lit != nil:
		switch {
		case p.Lit.Str != nil:
			return types.StringType{}
		case p.Lit.Int != nil:
			return types.IntType{}
		case p.Lit.Float != nil:
			return types.FloatType{}
		case p.Lit.Bool != nil:
			return types.BoolType{}
		}
	case p.Selector != nil:
		if len(p.Selector.Tail) == 0 && c.env != nil {
			if t, err := c.env.GetVar(p.Selector.Root); err == nil {
				return t
			}
		}
		return types.AnyType{}
	case p.List != nil:
		return types.ListType{Elem: types.AnyType{}}
	case p.Map != nil:
		return types.MapType{Key: types.AnyType{}, Value: types.AnyType{}}
	}
	return types.AnyType{}
}

func (c *Compiler) compileCallExpr(call *parser.CallExpr) (string, error) {
	args := make([]string, len(call.Args))
	for i, a := range call.Args {
		v, err := c.compileExpr(a)
		if err != nil {
			return "", err
		}
		args[i] = v
	}
	argStr := strings.Join(args, ", ")
	switch call.Func {
	case "print":
		return fmt.Sprintf("console.log(%s)", argStr), nil
	case "len":
		c.use("_len")
		return fmt.Sprintf("_len(%s)", argStr), nil
	case "now":
		// performance.now() returns milliseconds as a float. Multiply
		// by 1e6 so that `now()` is consistent with Go's UnixNano()
		// and the interpreter which return nanoseconds.
		return "performance.now() * 1000000", nil
	case "json":
		return fmt.Sprintf("console.log(JSON.stringify(%s))", argStr), nil
	default:
		return fmt.Sprintf("%s(%s)", sanitizeName(call.Func), argStr), nil
	}
}

func (c *Compiler) compileFunExpr(fn *parser.FunExpr) (string, error) {
	params := make([]string, len(fn.Params))
	for i, p := range fn.Params {
		params[i] = sanitizeName(p.Name)
	}
	sub := &Compiler{}
	sub.indent = 1
	if fn.ExprBody != nil {
		expr, err := sub.compileExpr(fn.ExprBody)
		if err != nil {
			return "", err
		}
		sub.writeln("return " + expr)
	} else {
		for _, s := range fn.BlockBody {
			if err := sub.compileStmt(s); err != nil {
				return "", err
			}
		}
	}
	body := indentBlock(sub.buf.String(), 1)
	code := "function(" + strings.Join(params, ", ") + ") {\n" + body + "}"
	return code, nil
}

func (c *Compiler) compileListLiteral(l *parser.ListLiteral) (string, error) {
	elems := make([]string, len(l.Elems))
	for i, e := range l.Elems {
		v, err := c.compileExpr(e)
		if err != nil {
			return "", err
		}
		elems[i] = v
	}
	return "[" + strings.Join(elems, ", ") + "]", nil
}

func (c *Compiler) compileMapLiteral(m *parser.MapLiteral) (string, error) {
	items := make([]string, len(m.Items))
	for i, it := range m.Items {
		k, err := c.compileExpr(it.Key)
		if err != nil {
			return "", err
		}
		v, err := c.compileExpr(it.Value)
		if err != nil {
			return "", err
		}
		items[i] = fmt.Sprintf("[%s]: %s", k, v)
	}
	return "{" + strings.Join(items, ", ") + "}", nil
}

func (c *Compiler) compileFetchExpr(f *parser.FetchExpr) (string, error) {
	urlStr, err := c.compileExpr(f.URL)
	if err != nil {
		return "", err
	}
	var withStr string
	if f.With != nil {
		w, err := c.compileExpr(f.With)
		if err != nil {
			return "", err
		}
		c.use("_toAnyMap")
		withStr = fmt.Sprintf("_toAnyMap(%s)", w)
	} else {
		withStr = "undefined"
	}
	c.use("_fetch")
	return fmt.Sprintf("_fetch(%s, %s)", urlStr, withStr), nil
}

func (c *Compiler) compileGenerateExpr(g *parser.GenerateExpr) (string, error) {
	switch g.Target {
	case "embedding":
		var text string
		for _, f := range g.Fields {
			v, err := c.compileExpr(f.Value)
			if err != nil {
				return "", err
			}
			if f.Name == "text" {
				text = v
			}
		}
		if text == "" {
			text = "\"\""
		}
		c.use("_gen_embed")
		return fmt.Sprintf("_gen_embed(%s)", text), nil
	default:
		var prompt string
		for _, f := range g.Fields {
			v, err := c.compileExpr(f.Value)
			if err != nil {
				return "", err
			}
			if f.Name == "prompt" {
				prompt = v
			}
		}
		if prompt == "" {
			prompt = "\"\""
		}
		if c.env != nil {
			if _, ok := c.env.GetStruct(g.Target); ok {
				c.use("_gen_struct")
				return fmt.Sprintf("_gen_struct<%s>(%s)", sanitizeName(g.Target), prompt), nil
			}
		}
		c.use("_gen_text")
		return fmt.Sprintf("_gen_text(%s)", prompt), nil
	}
}

func (c *Compiler) compileMatchExpr(m *parser.MatchExpr) (string, error) {
	target, err := c.compileExpr(m.Target)
	if err != nil {
		return "", err
	}
	var b strings.Builder
	b.WriteString("(() => {\n")
	b.WriteString("\tconst _t = " + target + ";\n")
	b.WriteString("\tswitch (_t) {\n")
	for _, cs := range m.Cases {
		if isUnderscoreExpr(cs.Pattern) {
			b.WriteString("\tdefault:\n")
		} else {
			p, err := c.compileExpr(cs.Pattern)
			if err != nil {
				return "", err
			}
			b.WriteString("\tcase " + p + ":\n")
		}
		r, err := c.compileExpr(cs.Result)
		if err != nil {
			return "", err
		}
		b.WriteString("\t\treturn " + r + ";\n")
	}
	b.WriteString("\t}\n")
	b.WriteString("\treturn undefined;\n")
	b.WriteString("})()")
	return b.String(), nil
}

func (c *Compiler) compileLiteral(l *parser.Literal) (string, error) {
	switch {
	case l.Int != nil:
		return fmt.Sprintf("%d", *l.Int), nil
	case l.Float != nil:
		return fmt.Sprintf("%f", *l.Float), nil
	case l.Str != nil:
		return fmt.Sprintf("%q", *l.Str), nil
	case l.Bool != nil:
		if *l.Bool {
			return "true", nil
		}
		return "false", nil
	default:
		return "null", fmt.Errorf("invalid literal")
	}
}

// --- Helpers ---

func (c *Compiler) writeln(s string) {
	c.writeIndent()
	c.buf.WriteString(s)
	c.buf.WriteByte('\n')
}

func (c *Compiler) writeIndent() {
	for i := 0; i < c.indent; i++ {
		c.buf.WriteByte('\t')
	}
}

func indentBlock(s string, depth int) string {
	if s == "" {
		return s
	}
	prefix := strings.Repeat("\t", depth)
	lines := strings.Split(strings.TrimRight(s, "\n"), "\n")
	for i, line := range lines {
		lines[i] = prefix + line
	}
	return strings.Join(lines, "\n") + "\n"
}

func (c *Compiler) compileStructType(st types.StructType) {
	name := sanitizeName(st.Name)
	if c.structs[name] {
		return
	}
	c.structs[name] = true
	c.writeln(fmt.Sprintf("type %s = {", name))
	c.indent++
	for _, fn := range st.Order {
		c.writeln(fmt.Sprintf("%s: any;", sanitizeName(fn)))
	}
	c.indent--
	c.writeln("}")
	c.writeln("")
	for _, ft := range st.Fields {
		if sub, ok := ft.(types.StructType); ok {
			c.compileStructType(sub)
		}
	}
}

func unexportName(name string) string {
	if name == "" {
		return ""
	}
	runes := []rune(name)
	if runes[0] >= 'A' && runes[0] <= 'Z' {
		runes[0] = runes[0] - 'A' + 'a'
	}
	return string(runes)
}

func sanitizeName(name string) string {
	var b strings.Builder
	for i, r := range name {
		if r == '_' || ('0' <= r && r <= '9' && i > 0) || ('A' <= r && r <= 'Z') || ('a' <= r && r <= 'z') {
			b.WriteRune(r)
		} else {
			b.WriteRune('_')
		}
	}
	if b.Len() == 0 || !((b.String()[0] >= 'A' && b.String()[0] <= 'Z') || (b.String()[0] >= 'a' && b.String()[0] <= 'z') || b.String()[0] == '_') {
		return "_" + b.String()
	}
	return b.String()
}

// Runtime helper functions injected into generated programs.
const (
	helperIndex = "function _index(v: any, k: any): any {\n" +
		"  if (Array.isArray(v)) {\n" +
		"    if (typeof k !== 'number') throw new Error('invalid list index');\n" +
		"    if (k < 0) k += v.length;\n" +
		"    if (k < 0 || k >= v.length) throw new Error('index out of range');\n" +
		"    return v[k];\n" +
		"  }\n" +
		"  if (typeof v === 'string') {\n" +
		"    if (typeof k !== 'number') throw new Error('invalid string index');\n" +
		"    const chars = Array.from(v);\n" +
		"    if (k < 0) k += chars.length;\n" +
		"    if (k < 0 || k >= chars.length) throw new Error('index out of range');\n" +
		"    return chars[k];\n" +
		"  }\n" +
		"  if (v && typeof v === 'object') {\n" +
		"    return (v as any)[k];\n" +
		"  }\n" +
		"  return (v as any)[k];\n" +
		"}\n"

	helperSlice = "function _slice(v: any, start: number, end: number): any {\n" +
		"  if (typeof v === \"string\" || Array.isArray(v)) {\n" +
		"    const l = (v as any).length;\n" +
		"    if (start < 0) start = l + start;\n" +
		"    if (end < 0) end = l + end;\n" +
		"    return (v as any).slice(start, end);\n" +
		"  }\n" +
		"  throw new Error(\"invalid slice target\");\n" +
		"}\n"
	helperSliceString = "function _sliceString(s: string, start: number, end: number): string {\n" +
		"  const chars = Array.from(s);\n" +
		"  const l = chars.length;\n" +
		"  if (start < 0) start = l + start;\n" +
		"  if (end < 0) end = l + end;\n" +
		"  if (start < 0 || end > l || start > end) throw new Error('slice out of range');\n" +
		"  return chars.slice(start, end).join('');\n" +
		"}\n"

	helperLen = "function _len(v: any): number {\n" +
		"  if (Array.isArray(v) || typeof v === \"string\") return (v as any).length;\n" +
		"  if (v && typeof v === \"object\") return Object.keys(v).length;\n" +
		"  return 0;\n" +
		"}\n"

	helperIter = "function _iter(v: any): any {\n" +
		"  if (v && typeof v === 'object' && !Array.isArray(v) && !(Symbol.iterator in v)) {\n" +
		"    return Object.keys(v);\n" +
		"  }\n" +
		"  return v;\n" +
		"}\n"

	helperGenText = "function _gen_text(prompt: string): string {\n" +
		"  // TODO: integrate with your preferred LLM\n" +
		"  return prompt;\n" +
		"}\n"

	helperGenEmbed = "function _gen_embed(text: string): number[] {\n" +
		"  // TODO: integrate with your preferred embedding model\n" +
		"  return Array.from(text).map(c => c.charCodeAt(0));\n" +
		"}\n"

	helperGenStruct = "function _gen_struct<T>(prompt: string): T {\n" +
		"  // TODO: integrate with your preferred LLM and parse JSON\n" +
		"  return JSON.parse(prompt) as T;\n" +
		"}\n"

	helperFetch = "function _fetch(url: string, opts: any): any {\n" +
		"  const args: string[] = ['-s'];\n" +
		"  const method = opts?.method ?? 'GET';\n" +
		"  args.push('-X', method);\n" +
		"  if (opts?.headers) {\n" +
		"    for (const [k, v] of Object.entries(_toAnyMap(opts.headers))) {\n" +
		"      args.push('-H', `${k}: ${String(v)}`);\n" +
		"    }\n" +
		"  }\n" +
		"  if (opts?.query) {\n" +
		"    const qs = new URLSearchParams();\n" +
		"    for (const [k, v] of Object.entries(_toAnyMap(opts.query))) {\n" +
		"      qs.set(k, String(v));\n" +
		"    }\n" +
		"    const sep = url.includes('?') ? '&' : '?';\n" +
		"    url = url + sep + qs.toString();\n" +
		"  }\n" +
		"  if (opts && 'body' in opts) {\n" +
		"    args.push('-d', JSON.stringify(opts.body));\n" +
		"  }\n" +
		"  if (opts?.timeout) {\n" +
		"    args.push('--max-time', String(opts.timeout));\n" +
		"  }\n" +
		"  args.push(url);\n" +
		"  const { stdout } = new Deno.Command('curl', { args }).outputSync();\n" +
		"  return JSON.parse(new TextDecoder().decode(stdout));\n" +
		"}\n"

	helperToAnyMap = "function _toAnyMap(m: any): Record<string, any> {\n" +
		"  return m as Record<string, any>;\n" +
		"}\n"

	helperStream = "class Stream {\n" +
		"  name: string;\n" +
		"  handlers: Array<(data: any) => any | Promise<any>> = [];\n" +
		"  constructor(name: string) {\n" +
		"    this.name = name;\n" +
		"  }\n" +
		"  append(data: any): Promise<any> {\n" +
		"    const tasks: Promise<any>[] = [];\n" +
		"    for (const h of [...this.handlers]) {\n" +
		"      tasks.push(Promise.resolve(h(data)));\n" +
		"    }\n" +
		"    const p = Promise.all(tasks).then(() => data);\n" +
		"    _pending.push(p);\n" +
		"    return p;\n" +
		"  }\n" +
		"  register(handler: (data: any) => any | Promise<any>): void {\n" +
		"    this.handlers.push(handler);\n" +
		"  }\n" +
		"}\n"

	helperWaitAll = "const _pending: Promise<any>[] = [];\n" +
		"async function _waitAll(): Promise<void> {\n" +
		"  await Promise.all(_pending);\n" +
		"}\n"

	helperAgent = "class Agent {\n" +
		"  name: string;\n" +
		"  handlers: Record<string, (ev: any) => any | Promise<any>> = {};\n" +
		"  intents: Record<string, (...args: any[]) => any> = {};\n" +
		"  state: Record<string, any> = {};\n" +
		"  constructor(name: string) {\n" +
		"    this.name = name;\n" +
		"  }\n" +
		"  start(): void {}\n" +
		"  on(stream: Stream, handler: (ev: any) => any | Promise<any>): void {\n" +
		"    stream.register(handler);\n" +
		"  }\n" +
		"  registerIntent(name: string, handler: (...args: any[]) => any): void {\n" +
		"    this.intents[name] = handler;\n" +
		"  }\n" +
		"  async call(name: string, ...args: any[]): Promise<any> {\n" +
		"    const fn = this.intents[name];\n" +
		"    if (!fn) throw new Error('unknown intent: ' + name);\n" +
		"    let res = fn(...args);\n" +
		"    if (res instanceof Promise) res = await res;\n" +
		"    return res;\n" +
		"  }\n" +
		"  set(name: string, value: any): void { this.state[name] = value; }\n" +
		"  get(name: string): any { return this.state[name]; }\n" +
		"}\n"
)

var helperMap = map[string]string{
	"_index":       helperIndex,
	"_slice":       helperSlice,
	"_sliceString": helperSliceString,
	"_len":         helperLen,
	"_iter":        helperIter,
	"_gen_text":    helperGenText,
	"_gen_embed":   helperGenEmbed,
	"_gen_struct":  helperGenStruct,
	"_fetch":       helperFetch,
	"_toAnyMap":    helperToAnyMap,
	"_stream":      helperStream,
	"_waitAll":     helperWaitAll,
	"_agent":       helperAgent,
}

func (c *Compiler) use(name string) {
	c.helpers[name] = true
}

func (c *Compiler) emitRuntime() {
	if len(c.helpers) == 0 {
		return
	}
	names := make([]string, 0, len(c.helpers))
	for n := range c.helpers {
		names = append(names, n)
	}
	sort.Strings(names)
	for _, n := range names {
		c.buf.WriteString(helperMap[n])
		c.buf.WriteByte('\n')
	}
}

func isUnderscoreExpr(e *parser.Expr) bool {
	if e == nil {
		return false
	}
	if len(e.Binary.Right) != 0 {
		return false
	}
	u := e.Binary.Left
	if len(u.Ops) != 0 {
		return false
	}
	p := u.Value
	if len(p.Ops) != 0 {
		return false
	}
	if p.Target.Selector != nil && p.Target.Selector.Root == "_" && len(p.Target.Selector.Tail) == 0 {
		return true
	}
	return false
}
