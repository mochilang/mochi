package pycode

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"mochi/interpreter"
	"mochi/parser"
	"mochi/types"
)

// Compiler translates a Mochi AST into Python source code.
type Compiler struct {
	buf          bytes.Buffer
	indent       int
	helpers      map[string]bool
	imports      map[string]string
	env          *types.Env
	structs      map[string]bool
	agents       map[string]bool
	handlerCount int
	models       bool
}

func New(env *types.Env) *Compiler {
	return &Compiler{
		helpers: make(map[string]bool),
		imports: make(map[string]string),
		env:     env,
		structs: make(map[string]bool),
		agents:  make(map[string]bool),
		models:  false,
	}
}

func containsStreamCode(stmts []*parser.Statement) bool {
	for _, s := range stmts {
		if stmtHasStream(s) {
			return true
		}
	}
	return false
}

func stmtHasStream(s *parser.Statement) bool {
	switch {
	case s.Stream != nil, s.Emit != nil, s.On != nil, s.Agent != nil:
		return true
	case s.Fun != nil:
		return containsStreamCode(s.Fun.Body)
	case s.Test != nil:
		return containsStreamCode(s.Test.Body)
	case s.If != nil:
		if containsStreamCode(s.If.Then) {
			return true
		}
		if s.If.ElseIf != nil {
			if stmtHasStream(&parser.Statement{If: s.If.ElseIf}) {
				return true
			}
		}
		return containsStreamCode(s.If.Else)
	case s.While != nil:
		return containsStreamCode(s.While.Body)
	case s.For != nil:
		return containsStreamCode(s.For.Body)
	case s.On != nil:
		return containsStreamCode(s.On.Body)
	}
	return false
}

func (c *Compiler) collectImports(stmts []*parser.Statement) {
	for _, s := range stmts {
		if s.Import != nil && s.Import.Lang != nil && *s.Import.Lang == "python" {
			path := strings.Trim(s.Import.Path, "\"")
			alias := s.Import.As
			if alias == "" {
				alias = parser.AliasFromPath(s.Import.Path)
			}
			alias = sanitizeName(alias)
			c.imports[alias] = path
		}
	}
}

func (c *Compiler) Compile(prog *parser.Program) ([]byte, error) {
	c.buf.Reset()

	// Collect Python imports first so they can be emitted at the top.
	c.collectImports(prog.Statements)

	needsAsync := containsStreamCode(prog.Statements)

	// Function declarations
	for _, s := range prog.Statements {
		if s.Fun != nil {
			if err := c.compileFunStmt(s.Fun); err != nil {
				return nil, err
			}
			c.writeln("")
		}
	}

	// Test blocks
	for _, s := range prog.Statements {
		if s.Test != nil {
			if err := c.compileTestBlock(s.Test); err != nil {
				return nil, err
			}
			c.writeln("")
		}
	}

	// Main function
	if needsAsync {
		c.writeln("async def main():")
	} else {
		c.writeln("def main():")
	}
	c.indent++
	for _, s := range prog.Statements {
		if s.Fun != nil || s.Test != nil {
			continue
		}
		if err := c.compileStmt(s); err != nil {
			return nil, err
		}
	}
	for _, s := range prog.Statements {
		if s.Test != nil {
			name := sanitizeName(s.Test.Name)
			c.writeln(fmt.Sprintf("%s()", name))
		}
	}
	c.indent--
	c.writeln("")

	body := append([]byte(nil), c.buf.Bytes()...)
	c.buf.Reset()

	c.writeln("# Generated by Mochi Python compiler")
	c.writeln("")
	if len(c.imports) > 0 {
		aliases := make([]string, 0, len(c.imports))
		for a := range c.imports {
			aliases = append(aliases, a)
		}
		sort.Strings(aliases)
		for _, alias := range aliases {
			mod := c.imports[alias]
			if alias == mod {
				c.writeln(fmt.Sprintf("import %s", mod))
			} else {
				c.writeln(fmt.Sprintf("import %s as %s", mod, alias))
			}
		}
		c.writeln("")
	}

	if c.models {
		c.writeln("_models = {}")
		c.writeln("")
	}

	if needsAsync {
		c.use("_wait_all")
	}

	c.buf.Write(body)
	if len(c.helpers) > 0 {
		c.emitRuntime()
	}

	if needsAsync {
		c.writeln("async def _run():")
		c.indent++
		c.writeln("await main()")
		c.writeln("await _wait_all()")
		c.indent--
		c.writeln("")

		c.writeln("if __name__ == \"__main__\":")
		c.indent++
		c.writeln("import asyncio")
		c.writeln("asyncio.run(_run())")
		c.indent--
	} else {
		c.writeln("if __name__ == \"__main__\":")
		c.indent++
		c.writeln("main()")
		c.indent--
	}

	return c.buf.Bytes(), nil
}

// --- Statements ---

func (c *Compiler) compileStmt(s *parser.Statement) error {
	switch {
	case s.Let != nil:
		return c.compileLet(s.Let)
	case s.Var != nil:
		return c.compileVar(s.Var)
	case s.Assign != nil:
		return c.compileAssign(s.Assign)
	case s.Type != nil:
		return c.compileTypeDecl(s.Type)
	case s.Expr != nil:
		expr, err := c.compileExpr(s.Expr.Expr)
		if err != nil {
			return err
		}
		c.writeln(expr)
		return nil
	case s.Return != nil:
		expr, err := c.compileExpr(s.Return.Value)
		if err != nil {
			return err
		}
		c.writeln("return " + expr)
		return nil
	case s.Expect != nil:
		return c.compileExpect(s.Expect)
	case s.If != nil:
		return c.compileIf(s.If, "if")
	case s.While != nil:
		return c.compileWhile(s.While)
	case s.For != nil:
		return c.compileFor(s.For)
	case s.Break != nil:
		c.writeln("break")
		return nil
	case s.Continue != nil:
		c.writeln("continue")
		return nil
	case s.Stream != nil:
		return c.compileStreamDecl(s.Stream)
	case s.Model != nil:
		return c.compileModelDecl(s.Model)
	case s.On != nil:
		return c.compileOnHandler(s.On)
	case s.Emit != nil:
		return c.compileEmit(s.Emit)
	case s.Agent != nil:
		return c.compileAgentDecl(s.Agent)
	case s.Import != nil:
		if s.Import.Lang == nil {
			return c.compilePackageImport(s.Import)
		}
		if *s.Import.Lang != "python" {
			return fmt.Errorf("unsupported import language: %v", s.Import.Lang)
		}
		return nil
	case s.ExternVar != nil, s.ExternFun != nil, s.ExternObject != nil, s.ExternType != nil:
		// extern declarations have no runtime effect when compiling to Python
		return nil
	default:
		return fmt.Errorf("unsupported statement")
	}
}

func (c *Compiler) compileLet(s *parser.LetStmt) error {
	name := sanitizeName(s.Name)
	value := "None"
	if s.Value != nil {
		v, err := c.compileExpr(s.Value)
		if err != nil {
			return err
		}
		value = v
	}
	if c.env != nil {
		t, err := c.env.GetVar(s.Name)
		if err != nil {
			if s.Value != nil {
				t = c.inferExprType(s.Value)
			} else {
				t = types.AnyType{}
			}
			c.env.SetVar(s.Name, t, false)
		}
	}
	c.writeln(fmt.Sprintf("%s = %s", name, value))
	return nil
}

func (c *Compiler) compileVar(s *parser.VarStmt) error {
	name := sanitizeName(s.Name)
	value := "None"
	if s.Value != nil {
		v, err := c.compileExpr(s.Value)
		if err != nil {
			return err
		}
		value = v
	}
	if c.env != nil {
		t, err := c.env.GetVar(s.Name)
		if err != nil {
			if s.Value != nil {
				t = c.inferExprType(s.Value)
			} else {
				t = types.AnyType{}
			}
			c.env.SetVar(s.Name, t, true)
		}
	}
	c.writeln(fmt.Sprintf("%s = %s", name, value))
	return nil
}

func (c *Compiler) compileAssign(s *parser.AssignStmt) error {
	lhs := sanitizeName(s.Name)
	for _, idx := range s.Index {
		iexpr, err := c.compileExpr(idx.Start)
		if err != nil {
			return err
		}
		lhs = fmt.Sprintf("%s[%s]", lhs, iexpr)
	}
	val, err := c.compileExpr(s.Value)
	if err != nil {
		return err
	}
	c.writeln(fmt.Sprintf("%s = %s", lhs, val))
	return nil
}

func (c *Compiler) compileStreamDecl(s *parser.StreamDecl) error {
	st, ok := c.env.GetStream(s.Name)
	if !ok {
		return fmt.Errorf("unknown stream: %s", s.Name)
	}
	c.compileStructType(st)
	varName := unexportName(sanitizeName(s.Name)) + "Stream"
	c.use("_stream")
	c.writeln(fmt.Sprintf("%s = Stream(%q)", varName, s.Name))
	return nil
}

func (c *Compiler) compileModelDecl(m *parser.ModelDecl) error {
	c.models = true
	parts := make([]string, len(m.Fields))
	for i, f := range m.Fields {
		v, err := c.compileExpr(f.Value)
		if err != nil {
			return err
		}
		parts[i] = fmt.Sprintf("%q: %s", f.Name, v)
	}
	c.writeln(fmt.Sprintf("_models[%q] = {%s}", m.Name, strings.Join(parts, ", ")))
	return nil
}

func (c *Compiler) compileOnHandler(h *parser.OnHandler) error {
	st, ok := c.env.GetStream(h.Stream)
	if !ok {
		return fmt.Errorf("unknown stream: %s", h.Stream)
	}
	c.compileStructType(st)
	streamVar := unexportName(sanitizeName(h.Stream)) + "Stream"
	handlerName := fmt.Sprintf("_handler_%d", c.handlerCount)
	c.handlerCount++
	c.writeln(fmt.Sprintf("def %s(ev):", handlerName))
	c.indent++
	alias := sanitizeName(h.Alias)
	c.writeln(fmt.Sprintf("%s = ev", alias))
	for _, stmt := range h.Body {
		if err := c.compileStmt(stmt); err != nil {
			c.indent--
			return err
		}
	}
	c.indent--
	c.writeln(fmt.Sprintf("%s.register(%s)", streamVar, handlerName))
	c.use("_stream")
	return nil
}

func (c *Compiler) compileEmit(e *parser.EmitStmt) error {
	st, ok := c.env.GetStream(e.Stream)
	if !ok {
		return fmt.Errorf("unknown stream: %s", e.Stream)
	}
	c.compileStructType(st)
	parts := make([]string, len(e.Fields))
	for i, f := range e.Fields {
		v, err := c.compileExpr(f.Value)
		if err != nil {
			return err
		}
		parts[i] = fmt.Sprintf("%s=%s", sanitizeName(f.Name), v)
	}
	lit := fmt.Sprintf("%s(%s)", sanitizeName(st.Name), strings.Join(parts, ", "))
	streamVar := unexportName(sanitizeName(e.Stream)) + "Stream"
	c.writeln(fmt.Sprintf("%s.append(%s)", streamVar, lit))
	c.use("_stream")
	return nil
}

func (c *Compiler) compileAgentDecl(a *parser.AgentDecl) error {
	st, ok := c.env.GetStruct(a.Name)
	if !ok {
		return fmt.Errorf("unknown agent: %s", a.Name)
	}
	name := sanitizeName(a.Name)
	if c.agents[name] {
		return nil
	}
	c.agents[name] = true

	baseEnv := types.NewEnv(c.env)
	for _, fn := range st.Order {
		baseEnv.SetVar(fn, st.Fields[fn], true)
	}

	c.writeln(fmt.Sprintf("class %s:", name))
	c.indent++
	c.writeln("def __init__(self):")
	c.indent++
	c.use("_agent")
	c.writeln(fmt.Sprintf("self.Agent = Agent(%q)", a.Name))

	origEnv := c.env
	c.env = baseEnv
	for _, blk := range a.Body {
		switch {
		case blk.Let != nil:
			val := "None"
			if blk.Let.Value != nil {
				v, err := c.compileExpr(blk.Let.Value)
				if err != nil {
					c.env = origEnv
					return err
				}
				val = v
			}
			c.writeln(fmt.Sprintf("self.%s = %s", sanitizeName(blk.Let.Name), val))
		case blk.Var != nil:
			val := "None"
			if blk.Var.Value != nil {
				v, err := c.compileExpr(blk.Var.Value)
				if err != nil {
					c.env = origEnv
					return err
				}
				val = v
			}
			c.writeln(fmt.Sprintf("self.%s = %s", sanitizeName(blk.Var.Name), val))
		}
	}
	c.env = origEnv

	handlerID := 0
	for _, blk := range a.Body {
		if blk.On != nil {
			streamVar := unexportName(sanitizeName(blk.On.Stream)) + "Stream"
			c.writeln(fmt.Sprintf("self.Agent.on(%s, self._on%d)", streamVar, handlerID))
			handlerID++
		}
	}
	for _, blk := range a.Body {
		if blk.Intent != nil {
			mname := sanitizeName(blk.Intent.Name)
			c.writeln(fmt.Sprintf("self.Agent.register_intent(%q, self.%s)", blk.Intent.Name, mname))
		}
	}
	c.writeln("self.Agent.start()")
	c.indent--

	handlerID = 0
	for _, blk := range a.Body {
		switch {
		case blk.Intent != nil:
			if err := c.compileAgentIntent(name, baseEnv, blk.Intent); err != nil {
				return err
			}
		case blk.On != nil:
			if _, err := c.compileAgentOn(name, baseEnv, blk.On, handlerID); err != nil {
				return err
			}
			handlerID++
		}
	}
	c.indent--
	c.writeln("")
	c.writeln(fmt.Sprintf("def New%s():", name))
	c.indent++
	c.writeln(fmt.Sprintf("return %s()", name))
	c.indent--
	c.writeln("")
	return nil
}

func (c *Compiler) compileStructType(st types.StructType) {
	name := sanitizeName(st.Name)
	if c.structs[name] {
		return
	}
	c.structs[name] = true
	c.imports["dataclasses"] = "dataclasses"
	c.imports["typing"] = "typing"
	c.writeln("@dataclasses.dataclass")
	c.writeln(fmt.Sprintf("class %s:", name))
	c.indent++
	if len(st.Order) == 0 {
		c.writeln("pass")
	} else {
		for _, fn := range st.Order {
			typStr := pyType(st.Fields[fn])
			c.writeln(fmt.Sprintf("%s: %s", sanitizeName(fn), typStr))
		}
	}
	c.indent--
	c.writeln("")
	for _, ft := range st.Fields {
		if sub, ok := ft.(types.StructType); ok {
			c.compileStructType(sub)
		}
	}
}

func (c *Compiler) compileTypeDecl(t *parser.TypeDecl) error {
	c.imports["dataclasses"] = "dataclasses"
	c.imports["typing"] = "typing"
	name := sanitizeName(t.Name)
	c.writeln("@dataclasses.dataclass")
	c.writeln(fmt.Sprintf("class %s:", name))
	c.indent++
	hasField := false
	for _, m := range t.Members {
		if m.Field != nil {
			hasField = true
			break
		}
	}
	if !hasField {
		c.writeln("pass")
	} else {
		for _, m := range t.Members {
			if m.Field != nil {
				typStr := pyType(resolveTypeRef(m.Field.Type))
				c.writeln(fmt.Sprintf("%s: %s", sanitizeName(m.Field.Name), typStr))
			}
		}
	}
	c.indent--
	return nil
}

func (c *Compiler) compileIf(stmt *parser.IfStmt, kw string) error {
	cond, err := c.compileExpr(stmt.Cond)
	if err != nil {
		return err
	}
	c.writeIndent()
	c.buf.WriteString(fmt.Sprintf("%s %s:\n", kw, cond))
	c.indent++
	for _, s := range stmt.Then {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	if stmt.ElseIf != nil {
		return c.compileIf(stmt.ElseIf, "elif")
	}
	if len(stmt.Else) > 0 {
		c.writeIndent()
		c.buf.WriteString("else:\n")
		c.indent++
		for _, s := range stmt.Else {
			if err := c.compileStmt(s); err != nil {
				return err
			}
		}
		c.indent--
	}
	return nil
}

func (c *Compiler) compileWhile(stmt *parser.WhileStmt) error {
	cond, err := c.compileExpr(stmt.Cond)
	if err != nil {
		return err
	}
	c.writeIndent()
	c.buf.WriteString(fmt.Sprintf("while %s:\n", cond))
	c.indent++
	for _, s := range stmt.Body {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	return nil
}

func (c *Compiler) compileFor(stmt *parser.ForStmt) error {
	name := sanitizeName(stmt.Name)
	if stmt.RangeEnd != nil {
		start, err := c.compileExpr(stmt.Source)
		if err != nil {
			return err
		}
		end, err := c.compileExpr(stmt.RangeEnd)
		if err != nil {
			return err
		}
		c.writeIndent()
		c.buf.WriteString(fmt.Sprintf("for %s in range(%s, %s):\n", name, start, end))
		c.indent++
		for _, s := range stmt.Body {
			if err := c.compileStmt(s); err != nil {
				return err
			}
		}
		c.indent--
		return nil
	}
	src, err := c.compileExpr(stmt.Source)
	if err != nil {
		return err
	}
	t := c.inferExprType(stmt.Source)
	c.writeIndent()
	iter := ""
	switch tt := t.(type) {
	case types.ListType:
		iter = src
		if c.env != nil {
			c.env.SetVar(stmt.Name, tt.Elem, true)
		}
	case types.StringType:
		iter = src
		if c.env != nil {
			c.env.SetVar(stmt.Name, types.StringType{}, true)
		}
	case types.MapType:
		iter = src
		if c.env != nil {
			c.env.SetVar(stmt.Name, tt.Key, true)
		}
	default:
		iter = src
		if c.env != nil {
			c.env.SetVar(stmt.Name, types.AnyType{}, true)
		}
	}
	c.buf.WriteString(fmt.Sprintf("for %s in %s:\n", name, iter))
	c.indent++
	for _, s := range stmt.Body {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	return nil
}

func (c *Compiler) compileFunStmt(fun *parser.FunStmt) error {
	name := sanitizeName(fun.Name)
	c.imports["typing"] = "typing"
	c.writeIndent()
	c.buf.WriteString("def " + name + "(")
	var ft types.FuncType
	if c.env != nil {
		if t, err := c.env.GetVar(fun.Name); err == nil {
			if f, ok := t.(types.FuncType); ok {
				ft = f
			}
		}
	}
	for i, p := range fun.Params {
		if i > 0 {
			c.buf.WriteString(", ")
		}
		c.buf.WriteString(sanitizeName(p.Name))
		var typ types.Type
		if i < len(ft.Params) {
			typ = ft.Params[i]
		} else if p.Type != nil {
			typ = resolveTypeRef(p.Type)
		}
		if typ != nil {
			c.buf.WriteString(": " + pyType(typ))
		}
	}
	retType := "None"
	if ft.Return != nil {
		retType = pyType(ft.Return)
	} else if fun.Return != nil {
		retType = pyType(resolveTypeRef(fun.Return))
	}
	c.buf.WriteString(") -> " + retType + ":\n")
	child := types.NewEnv(c.env)
	for i, p := range fun.Params {
		if i < len(ft.Params) {
			child.SetVar(p.Name, ft.Params[i], true)
		}
	}
	origEnv := c.env
	c.env = child
	c.indent++
	for _, s := range fun.Body {
		if err := c.compileStmt(s); err != nil {
			c.env = origEnv
			return err
		}
	}
	c.indent--
	c.env = origEnv
	return nil
}

func (c *Compiler) compileTestBlock(t *parser.TestBlock) error {
	name := sanitizeName(t.Name)
	c.writeIndent()
	c.buf.WriteString("def " + name + "():\n")
	c.indent++
	for _, s := range t.Body {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	return nil
}

func (c *Compiler) compileAgentIntent(agentName string, env *types.Env, in *parser.IntentDecl) error {
	name := sanitizeName(in.Name)
	c.writeIndent()
	c.buf.WriteString("def " + name + "(self")
	for _, p := range in.Params {
		c.buf.WriteString(", " + sanitizeName(p.Name))
	}
	c.buf.WriteString("):\n")
	child := types.NewEnv(env)
	orig := c.env
	c.env = child
	c.indent++
	for _, s := range in.Body {
		if err := c.compileStmt(s); err != nil {
			c.env = orig
			return err
		}
	}
	c.indent--
	c.env = orig
	return nil
}

func (c *Compiler) compileAgentOn(agentName string, env *types.Env, h *parser.OnHandler, id int) (string, error) {
	st, ok := c.env.GetStream(h.Stream)
	if !ok {
		return "", fmt.Errorf("unknown stream: %s", h.Stream)
	}
	fname := fmt.Sprintf("_on%d", id)
	c.writeIndent()
	c.buf.WriteString("def " + fname + "(self, ev):\n")
	alias := sanitizeName(h.Alias)
	child := types.NewEnv(env)
	child.SetVar(h.Alias, st, true)
	orig := c.env
	c.env = child
	c.indent++
	c.writeln(fmt.Sprintf("%s = ev", alias))
	for _, stmt := range h.Body {
		if err := c.compileStmt(stmt); err != nil {
			c.env = orig
			return "", err
		}
	}
	c.indent--
	c.env = orig
	return fname, nil
}

func (c *Compiler) compileExpect(e *parser.ExpectStmt) error {
	expr, err := c.compileExpr(e.Value)
	if err != nil {
		return err
	}
	c.writeln(fmt.Sprintf("assert %s", expr))
	return nil
}

// --- Expressions ---

func (c *Compiler) compileExpr(e *parser.Expr) (string, error) { return c.compileBinaryExpr(e.Binary) }

func (c *Compiler) compileBinaryExpr(b *parser.BinaryExpr) (string, error) {
	expr, err := c.compileUnary(b.Left)
	if err != nil {
		return "", err
	}
	leftType := c.inferUnaryType(b.Left)
	for _, op := range b.Right {
		r, err := c.compilePostfix(op.Right)
		if err != nil {
			return "", err
		}
		rightType := c.inferPostfixType(op.Right)
		if op.Op == "/" && isInt(leftType) && isInt(rightType) {
			expr = fmt.Sprintf("(%s // %s)", expr, r)
			leftType = types.IntType{}
			continue
		}
		pyOp := op.Op
		switch op.Op {
		case "&&":
			pyOp = "and"
		case "||":
			pyOp = "or"
		case "union", "union_all", "except", "intersect":
			c.use("_" + pyOp)
			expr = fmt.Sprintf("_%s(%s, %s)", pyOp, expr, r)
			leftType = types.ListType{Elem: types.AnyType{}}
			continue
		}
		expr = fmt.Sprintf("(%s %s %s)", expr, pyOp, r)
		switch op.Op {
		case "+", "-", "*", "/", "%":
			// The resulting type roughly mirrors the left operand.
		case "==", "!=", "<", "<=", ">", ">=":
			leftType = types.BoolType{}
		}
	}
	return expr, nil
}

func (c *Compiler) compileUnary(u *parser.Unary) (string, error) {
	val, err := c.compilePostfix(u.Value)
	if err != nil {
		return "", err
	}
	for i := len(u.Ops) - 1; i >= 0; i-- {
		op := u.Ops[i]
		if op == "!" {
			op = "not "
		}
		val = fmt.Sprintf("(%s%s)", op, val)
	}
	return val, nil
}

func (c *Compiler) compilePostfix(p *parser.PostfixExpr) (string, error) {
	expr, err := c.compilePrimary(p.Target)
	if err != nil {
		return "", err
	}
	typ := c.inferPrimaryType(p.Target)
	for _, op := range p.Ops {
		if op.Call != nil {
			args := make([]string, len(op.Call.Args))
			for i, a := range op.Call.Args {
				v, err := c.compileExpr(a)
				if err != nil {
					return "", err
				}
				args[i] = v
			}
			expr = fmt.Sprintf("%s(%s)", expr, strings.Join(args, ", "))
			typ = c.inferPostfixType(&parser.PostfixExpr{Target: &parser.Primary{Call: nil}})
			continue
		}
		if op.Index != nil {
			idx := op.Index
			if idx.Colon != nil {
				start, end := "", ""
				if idx.Start != nil {
					start, err = c.compileExpr(idx.Start)
					if err != nil {
						return "", err
					}
				}
				if idx.End != nil {
					end, err = c.compileExpr(idx.End)
					if err != nil {
						return "", err
					}
				}
				switch typ.(type) {
				case types.ListType, types.StringType:
					expr = fmt.Sprintf("%s[%s:%s]", expr, start, end)
					if _, ok := typ.(types.StringType); ok {
						typ = types.StringType{}
					}
				default:
					startArg, endArg := "0", "0"
					if idx.Start != nil {
						startArg = start
					}
					if idx.End != nil {
						endArg = end
					}
					c.use("_slice")
					expr = fmt.Sprintf("_slice(%s, %s, %s)", expr, startArg, endArg)
					typ = types.AnyType{}
				}
			} else {
				idxExpr, err := c.compileExpr(idx.Start)
				if err != nil {
					return "", err
				}
				switch tt := typ.(type) {
				case types.ListType:
					expr = fmt.Sprintf("%s[%s]", expr, idxExpr)
					typ = tt.Elem
				case types.MapType:
					expr = fmt.Sprintf("%s[%s]", expr, idxExpr)
					typ = tt.Value
				case types.StringType:
					expr = fmt.Sprintf("%s[%s]", expr, idxExpr)
					typ = types.StringType{}
				default:
					expr = fmt.Sprintf("%s[%s]", expr, idxExpr)
					typ = types.AnyType{}
				}
			}
			continue
		}
		if op.Cast != nil {
			typ = resolveTypeRef(op.Cast.Type)
			// Casts are ignored in Python code generation
			continue
		}
	}
	return expr, nil
}

func (c *Compiler) compilePrimary(p *parser.Primary) (string, error) {
	switch {
	case p.Call != nil:
		return c.compileCallExpr(p.Call)
	case p.List != nil:
		return c.compileListLiteral(p.List)
	case p.Map != nil:
		return c.compileMapLiteral(p.Map)
	case p.Query != nil:
		return c.compileQueryExpr(p.Query)
	case p.Match != nil:
		return c.compileMatchExpr(p.Match)

	case p.Fetch != nil:
		return c.compileFetchExpr(p.Fetch)

	case p.Generate != nil:
		return c.compileGenerateExpr(p.Generate)
	case p.Load != nil:
		return c.compileLoadExpr(p.Load)
	case p.Save != nil:
		return c.compileSaveExpr(p.Save)
	case p.Lit != nil:
		return c.compileLiteral(p.Lit)
	case p.Group != nil:
		expr, err := c.compileExpr(p.Group)
		if err != nil {
			return "", err
		}
		return "(" + expr + ")", nil
	case p.Selector != nil:
		expr := sanitizeName(p.Selector.Root)
		for _, s := range p.Selector.Tail {
			expr += "." + sanitizeName(s)
		}
		return expr, nil
	case p.Struct != nil:
		if c.env != nil {
			if _, ok := c.env.GetAgent(p.Struct.Name); ok {
				if len(p.Struct.Fields) > 0 {
					return "", fmt.Errorf("agent initialization with fields not supported")
				}
				return fmt.Sprintf("New%s()", sanitizeName(p.Struct.Name)), nil
			}
		}
		parts := make([]string, len(p.Struct.Fields))
		for i, f := range p.Struct.Fields {
			v, err := c.compileExpr(f.Value)
			if err != nil {
				return "", err
			}
			parts[i] = fmt.Sprintf("%s=%s", sanitizeName(f.Name), v)
		}
		return fmt.Sprintf("%s(%s)", sanitizeName(p.Struct.Name), strings.Join(parts, ", ")), nil
	case p.FunExpr != nil:
		return c.compileFunExpr(p.FunExpr)
	default:
		return "", fmt.Errorf("invalid primary expression")
	}
}

func (c *Compiler) compileCallExpr(call *parser.CallExpr) (string, error) {
	if lit, ok := interpreter.EvalPureCall(call, c.env); ok {
		return c.compileLiteral(lit)
	}
	args := make([]string, len(call.Args))
	for i, a := range call.Args {
		v, err := c.compileExpr(a)
		if err != nil {
			return "", err
		}
		args[i] = v
	}
	argStr := strings.Join(args, ", ")
	switch call.Func {
	case "print":
		return fmt.Sprintf("print(%s)", argStr), nil
	case "len":
		return fmt.Sprintf("len(%s)", argStr), nil
	case "now":
		c.imports["time"] = "time"
		return "time.time_ns()", nil
	case "json":
		c.imports["json"] = "json"
		return fmt.Sprintf("print(json.dumps(%s))", argStr), nil
	case "str":
		return fmt.Sprintf("str(%s)", argStr), nil
	case "count":
		c.use("_count")
		return fmt.Sprintf("_count(%s)", argStr), nil
	case "avg":
		c.use("_avg")
		return fmt.Sprintf("_avg(%s)", argStr), nil
	case "eval":
		return fmt.Sprintf("eval(%s)", argStr), nil
	default:
		return fmt.Sprintf("%s(%s)", sanitizeName(call.Func), argStr), nil
	}
}

func (c *Compiler) compileFunExpr(fn *parser.FunExpr) (string, error) {
	params := make([]string, len(fn.Params))
	for i, p := range fn.Params {
		params[i] = sanitizeName(p.Name)
	}
	if fn.ExprBody != nil {
		expr, err := c.compileExpr(fn.ExprBody)
		if err != nil {
			return "", err
		}
		return fmt.Sprintf("(lambda %s: %s)", strings.Join(params, ", "), expr), nil
	}
	return "None", fmt.Errorf("block function expressions not supported")
}

func (c *Compiler) compileListLiteral(l *parser.ListLiteral) (string, error) {
	elems := make([]string, len(l.Elems))
	for i, e := range l.Elems {
		v, err := c.compileExpr(e)
		if err != nil {
			return "", err
		}
		elems[i] = v
	}
	return "[" + strings.Join(elems, ", ") + "]", nil
}

func (c *Compiler) compileMapLiteral(m *parser.MapLiteral) (string, error) {
	items := make([]string, len(m.Items))
	for i, it := range m.Items {
		k, err := c.compileExpr(it.Key)
		if err != nil {
			return "", err
		}
		v, err := c.compileExpr(it.Value)
		if err != nil {
			return "", err
		}
		items[i] = fmt.Sprintf("%s: %s", k, v)
	}
	return "{" + strings.Join(items, ", ") + "}", nil
}

func (c *Compiler) compileFetchExpr(f *parser.FetchExpr) (string, error) {
	urlStr, err := c.compileExpr(f.URL)
	if err != nil {
		return "", err
	}
	var withStr string
	if f.With != nil {
		w, err := c.compileExpr(f.With)
		if err != nil {
			return "", err
		}
		c.use("_to_any_map")
		withStr = fmt.Sprintf("_to_any_map(%s)", w)
	} else {
		withStr = "None"
	}
	c.imports["urllib.request"] = "urllib.request"
	c.imports["json"] = "json"
	c.use("_fetch")
	return fmt.Sprintf("_fetch(%s, %s)", urlStr, withStr), nil
}

func (c *Compiler) compileLoadExpr(l *parser.LoadExpr) (string, error) {
	var pathStr string
	if l.Path != nil {
		pathStr = fmt.Sprintf("%q", *l.Path)
	} else {
		pathStr = "None"
	}
	optsStr := "None"
	if l.With != nil {
		w, err := c.compileExpr(l.With)
		if err != nil {
			return "", err
		}
		c.use("_to_any_map")
		optsStr = fmt.Sprintf("_to_any_map(%s)", w)
	}
	c.use("_load")
	expr := fmt.Sprintf("_load(%s, %s)", pathStr, optsStr)
	if l.Type != nil && l.Type.Simple != nil {
		tname := sanitizeName(*l.Type.Simple)
		expr = fmt.Sprintf("[ %s(**_it) for _it in %s ]", tname, expr)
	}
	return expr, nil
}

func (c *Compiler) compileSaveExpr(s *parser.SaveExpr) (string, error) {
	src, err := c.compileExpr(s.Src)
	if err != nil {
		return "", err
	}
	var pathStr string
	if s.Path != nil {
		pathStr = fmt.Sprintf("%q", *s.Path)
	} else {
		pathStr = "None"
	}
	optsStr := "None"
	if s.With != nil {
		w, err := c.compileExpr(s.With)
		if err != nil {
			return "", err
		}
		c.use("_to_any_map")
		optsStr = fmt.Sprintf("_to_any_map(%s)", w)
	}
	c.use("_save")
	return fmt.Sprintf("_save(%s, %s, %s)", src, pathStr, optsStr), nil
}

func (c *Compiler) compileQueryExpr(q *parser.QueryExpr) (string, error) {
	src, err := c.compileExpr(q.Source)
	if err != nil {
		return "", err
	}
	sel, err := c.compileExpr(q.Select)
	if err != nil {
		return "", err
	}
	hasSide := false
	for _, j := range q.Joins {
		if j.Side != nil {
			hasSide = true
			break
		}
	}

	child := types.NewEnv(c.env)
	var elemType types.Type = types.AnyType{}
	if lt, ok := c.inferExprType(q.Source).(types.ListType); ok {
		elemType = lt.Elem
	}
	child.SetVar(q.Var, elemType, true)
	for _, f := range q.Froms {
		ft := c.inferExprType(f.Src)
		var fe types.Type = types.AnyType{}
		if lt, ok := ft.(types.ListType); ok {
			fe = lt.Elem
		}
		child.SetVar(f.Var, fe, true)
	}
	for _, j := range q.Joins {
		jt := c.inferExprType(j.Src)
		var je types.Type = types.AnyType{}
		if lt, ok := jt.(types.ListType); ok {
			je = lt.Elem
		}
		child.SetVar(j.Var, je, true)
	}
	orig := c.env
	c.env = child

	if !hasSide {
		loops := []string{fmt.Sprintf("%s in %s", sanitizeName(q.Var), src)}
		for _, f := range q.Froms {
			fs, err := c.compileExpr(f.Src)
			if err != nil {
				c.env = orig
				return "", err
			}
			loops = append(loops, fmt.Sprintf("%s in %s", sanitizeName(f.Var), fs))
		}
		condParts := []string{}
		joinSrcs := make([]string, len(q.Joins))
		for i, j := range q.Joins {
			js, err := c.compileExpr(j.Src)
			if err != nil {
				c.env = orig
				return "", err
			}
			joinSrcs[i] = js
			loops = append(loops, fmt.Sprintf("%s in %s", sanitizeName(j.Var), js))
			on, err := c.compileExpr(j.On)
			if err != nil {
				c.env = orig
				return "", err
			}
			condParts = append(condParts, on)
		}
		if q.Where != nil {
			w, err := c.compileExpr(q.Where)
			if err != nil {
				c.env = orig
				return "", err
			}
			condParts = append(condParts, w)
		}
		c.env = orig
		cond := ""
		if len(condParts) > 0 {
			cond = " if " + strings.Join(condParts, " and ")
		}
		if q.Sort == nil && q.Skip == nil && q.Take == nil {
			return fmt.Sprintf("[ %s for %s%s ]", sel, strings.Join(loops, " for "), cond), nil
		}

		items := fmt.Sprintf("[ %s for %s%s ]", sanitizeName(q.Var), strings.Join(loops, " for "), cond)
		if q.Sort != nil {
			s, err := c.compileExpr(q.Sort)
			if err != nil {
				return "", err
			}
			items = fmt.Sprintf("sorted(%s, key=lambda %s: %s)", items, sanitizeName(q.Var), s)
		}
		if q.Skip != nil {
			sk, err := c.compileExpr(q.Skip)
			if err != nil {
				return "", err
			}
			items = fmt.Sprintf("(%s)[%s:]", items, sk)
		}
		if q.Take != nil {
			tk, err := c.compileExpr(q.Take)
			if err != nil {
				return "", err
			}
			items = fmt.Sprintf("(%s)[:%s]", items, tk)
		}
		return fmt.Sprintf("[ %s for %s in %s ]", sel, sanitizeName(q.Var), items), nil
	}

	fromSrcs := make([]string, len(q.Froms))
	varNames := []string{sanitizeName(q.Var)}
	for i, f := range q.Froms {
		fs, err := c.compileExpr(f.Src)
		if err != nil {
			c.env = orig
			return "", err
		}
		fromSrcs[i] = fs
		varNames = append(varNames, sanitizeName(f.Var))
	}
	joinSrcs := make([]string, len(q.Joins))
	joinOns := make([]string, len(q.Joins))
	paramCopy := append([]string(nil), varNames...)
	for i, j := range q.Joins {
		js, err := c.compileExpr(j.Src)
		if err != nil {
			c.env = orig
			return "", err
		}
		joinSrcs[i] = js
		on, err := c.compileExpr(j.On)
		if err != nil {
			c.env = orig
			return "", err
		}
		joinOns[i] = on
		varNames = append(varNames, sanitizeName(j.Var))
	}
	val, err := c.compileExpr(q.Select)
	if err != nil {
		c.env = orig
		return "", err
	}
	var whereExpr, sortExpr, skipExpr, takeExpr string
	if q.Where != nil {
		whereExpr, err = c.compileExpr(q.Where)
		if err != nil {
			c.env = orig
			return "", err
		}
	}
	if q.Sort != nil {
		sortExpr, err = c.compileExpr(q.Sort)
		if err != nil {
			c.env = orig
			return "", err
		}
	}
	if q.Skip != nil {
		skipExpr, err = c.compileExpr(q.Skip)
		if err != nil {
			c.env = orig
			return "", err
		}
	}
	if q.Take != nil {
		takeExpr, err = c.compileExpr(q.Take)
		if err != nil {
			c.env = orig
			return "", err
		}
	}
	c.env = orig

	joins := make([]string, 0, len(q.Froms)+len(q.Joins))
	params := []string{sanitizeName(q.Var)}
	for i, fs := range fromSrcs {
		joins = append(joins, fmt.Sprintf("{ 'items': %s }", fs))
		params = append(params, sanitizeName(q.Froms[i].Var))
	}
	paramCopy = append([]string(nil), params...)
	for i, js := range joinSrcs {
		onParams := append(paramCopy, sanitizeName(q.Joins[i].Var))
		spec := fmt.Sprintf("{ 'items': %s, 'on': lambda %s: (%s)", js, strings.Join(onParams, ", "), joinOns[i])
		if q.Joins[i].Side != nil {
			side := *q.Joins[i].Side
			if side == "left" || side == "outer" {
				spec += ", 'left': True"
			}
			if side == "right" || side == "outer" {
				spec += ", 'right': True"
			}
		}
		spec += " }"
		joins = append(joins, spec)
		paramCopy = append(paramCopy, sanitizeName(q.Joins[i].Var))
	}
	allParams := strings.Join(paramCopy, ", ")
	selectFn := fmt.Sprintf("lambda %s: %s", allParams, val)
	var whereFn, sortFn string
	if whereExpr != "" {
		whereFn = fmt.Sprintf("lambda %s: (%s)", allParams, whereExpr)
	}
	if sortExpr != "" {
		sortFn = fmt.Sprintf("lambda %s: (%s)", allParams, sortExpr)
	}
	var b strings.Builder
	b.WriteString("(lambda:\n")
	b.WriteString("\t_src = " + src + "\n")
	b.WriteString("\treturn _query(_src, [\n")
	for i, j := range joins {
		b.WriteString("\t\t" + j)
		if i != len(joins)-1 {
			b.WriteString(",")
		}
		b.WriteString("\n")
	}
	b.WriteString("\t], { 'select': " + selectFn)
	if whereFn != "" {
		b.WriteString(", 'where': " + whereFn)
	}
	if sortFn != "" {
		b.WriteString(", 'sortKey': " + sortFn)
	}
	if skipExpr != "" {
		b.WriteString(", 'skip': " + skipExpr)
	}
	if takeExpr != "" {
		b.WriteString(", 'take': " + takeExpr)
	}
	b.WriteString(" })\n")
	b.WriteString(")()")
	c.use("_query")
	return b.String(), nil
}

func (c *Compiler) compileGenerateExpr(g *parser.GenerateExpr) (string, error) {
	var (
		prompt string
		text   string
		model  string
		params []string
	)
	for _, f := range g.Fields {
		v, err := c.compileExpr(f.Value)
		if err != nil {
			return "", err
		}
		switch f.Name {
		case "prompt":
			prompt = v
		case "text":
			text = v
		case "model":
			model = v
		default:
			params = append(params, fmt.Sprintf("%q: %s", f.Name, v))
		}
	}

	if prompt == "" && g.Target != "embedding" {
		prompt = "\"\""
	}
	if text == "" && g.Target == "embedding" {
		text = "\"\""
	}

	paramStr := "None"
	if len(params) > 0 {
		paramStr = fmt.Sprintf("{ %s }", strings.Join(params, ", "))
	}
	if model == "" {
		model = "None"
	}

	if g.Target == "embedding" {
		c.use("_gen_embed")
		return fmt.Sprintf("_gen_embed(%s, %s, %s)", text, model, paramStr), nil
	}

	if c.env != nil {
		if _, ok := c.env.GetStruct(g.Target); ok {
			c.use("_gen_struct")
			return fmt.Sprintf("_gen_struct(%s, %s, %s, %s)", sanitizeName(g.Target), prompt, model, paramStr), nil
		}
	}
	c.use("_gen_text")
	return fmt.Sprintf("_gen_text(%s, %s, %s)", prompt, model, paramStr), nil
}

func (c *Compiler) compileMatchExpr(m *parser.MatchExpr) (string, error) {
	target, err := c.compileExpr(m.Target)
	if err != nil {
		return "", err
	}
	var expr string
	for i, cs := range m.Cases {
		res, err := c.compileExpr(cs.Result)
		if err != nil {
			return "", err
		}
		if isUnderscoreExpr(cs.Pattern) {
			expr += res
			break
		}
		pat, err := c.compileExpr(cs.Pattern)
		if err != nil {
			return "", err
		}
		cond := fmt.Sprintf("_t == %s", pat)
		part := fmt.Sprintf("%s if %s else ", res, cond)
		expr += part
		if i == len(m.Cases)-1 {
			expr += "None"
		}
	}
	return fmt.Sprintf("(lambda _t=%s: %s)()", target, expr), nil
}

func (c *Compiler) compileLiteral(l *parser.Literal) (string, error) {
	switch {
	case l.Int != nil:
		return fmt.Sprintf("%d", *l.Int), nil
	case l.Float != nil:
		return fmt.Sprintf("%f", *l.Float), nil
	case l.Str != nil:
		return fmt.Sprintf("%q", *l.Str), nil
	case l.Bool != nil:
		if *l.Bool {
			return "True", nil
		}
		return "False", nil
	default:
		return "None", fmt.Errorf("invalid literal")
	}
}

// compilePackageImport compiles a Mochi package import. The package directory
// is loaded relative to the importing file and all exported functions are
// returned as attributes on the alias object.
func (c *Compiler) compilePackageImport(im *parser.ImportStmt) error {
	alias := im.As
	if alias == "" {
		alias = parser.AliasFromPath(im.Path)
	}
	alias = sanitizeName(alias)
	path := strings.Trim(im.Path, "\"")
	base := ""
	if strings.HasPrefix(path, "./") || strings.HasPrefix(path, "../") {
		base = filepath.Dir(im.Pos.Filename)
	}
	target := filepath.Join(base, path)

	info, err := os.Stat(target)
	if err != nil {
		if os.IsNotExist(err) && !strings.HasSuffix(target, ".mochi") {
			if fi, err2 := os.Stat(target + ".mochi"); err2 == nil {
				info = fi
				target += ".mochi"
			} else {
				return fmt.Errorf("import package: %w", err)
			}
		} else {
			return fmt.Errorf("import package: %w", err)
		}
	}

	var files []string
	if info.IsDir() {
		entries, err := os.ReadDir(target)
		if err != nil {
			return fmt.Errorf("import package: %w", err)
		}
		for _, e := range entries {
			if !e.IsDir() && strings.HasSuffix(e.Name(), ".mochi") {
				files = append(files, filepath.Join(target, e.Name()))
			}
		}
		sort.Strings(files)
	} else {
		files = []string{target}
	}

	pkgEnv := types.NewEnv(c.env)
	var programs []*parser.Program
	for _, f := range files {
		prog, err := parser.Parse(f)
		if err != nil {
			return err
		}
		c.collectImports(prog.Statements)
		if errs := types.Check(prog, pkgEnv); len(errs) > 0 {
			return errs[0]
		}
		programs = append(programs, prog)
	}

	c.writeln(fmt.Sprintf("def _import_%s():", alias))
	c.indent++
	c.writeln("class _Pkg: pass")
	c.writeln("_pkg = _Pkg()")

	origEnv := c.env
	c.env = pkgEnv
	for _, prog := range programs {
		for _, s := range prog.Statements {
			if s.Fun != nil && s.Fun.Export {
				if err := c.compileFunStmt(s.Fun); err != nil {
					c.env = origEnv
					return err
				}
				name := sanitizeName(s.Fun.Name)
				c.writeln(fmt.Sprintf("_pkg.%s = %s", name, name))
				c.writeln("")
			} else {
				if err := c.compileStmt(s); err != nil {
					c.env = origEnv
					return err
				}
			}
		}
	}
	c.writeln("return _pkg")
	c.env = origEnv
	c.indent--
	c.writeln(fmt.Sprintf("%s = _import_%s()", alias, alias))
	c.writeln("")
	return nil
}
