func main (regs=132)
L15:
  // var left = []
  Const        r0, []
  Move         r1, r0
  // for i in 0..30 {
  Const        r2, 0
  Const        r3, 30
  Move         r4, r2
L1:
  Less         r5, r4, r3
  JumpIfFalse  r5, L0
  // left = append(left, { id: i, val: i })
  Const        r6, "id"
  Const        r7, "val"
  Move         r8, r4
  Move         r9, r4
  MakeMap      r10, 2, r6
  Append       r1, r1, r10
  // for i in 0..30 {
  Const        r12, 1
  Add          r4, r4, r12
  Jump         L1
L0:
  // var right = []
  Const        r15, []
  // for i in 0..30 {
  Move         r4, r2
L3:
  Less         r16, r4, r3
  JumpIfFalse  r16, L2
  // right = append(right, { id: i, info: i * 2 })
  Const        r17, "id"
  Const        r18, "info"
  Const        r19, 2
  MulInt       r20, r4, r19
  MakeMap      r23, 2, r17
  Append       r15, r15, r23
  // for i in 0..30 {
  Const        r25, 1
  Add          r4, r4, r25
  Jump         L3
L2:
  // let repeat = 100
  Const        r27, 100
  // var last = 0
  Move         r28, r2
  // let start = now()
  Now          r29
  // for i in 0..repeat {
  Move         r4, r2
L27:
  Less         r30, r4, r27
  JumpIfFalse  r30, L4
  // let res = from l in left
  Const        r31, []
  IterPrep     r32, r1
  Len          r33, r32
  // join r in right on l.id == r.id
  IterPrep     r34, r15
  Len          r35, r34
  // let res = from l in left
  Const        r36, 0
  EqualInt     r37, r33, r36
  JumpIfTrue   r37, L5
  EqualInt     r38, r35, r36
  JumpIfTrue   r38, L5
  LessEq       r39, r35, r33
  JumpIfFalse  r39, L6
  // join r in right on l.id == r.id
  MakeMap      r40, 0, r0
  Const        r41, 0
L9:
  Less         r42, r41, r35
  JumpIfFalse  r42, L7
  Index        r43, r34, r41
  Move         r44, r43
  Const        r45, "id"
  Index        r46, r44, r45
  Index        r47, r40, r46
  Const        r48, nil
  NotEqual     r49, r47, r48
  JumpIfTrue   r49, L8
  MakeList     r50, 0, r0
  SetIndex     r40, r46, r50
L8:
  Index        r47, r40, r46
  Append       r51, r47, r43
  SetIndex     r40, r46, r51
  Const        r52, 1
  Add          r41, r41, r52
  Jump         L9
L7:
  // let res = from l in left
  Const        r54, 0
L14:
  Less         r55, r54, r33
  JumpIfFalse  r55, L5
  Index        r57, r32, r54
  // join r in right on l.id == r.id
  Index        r58, r57, r45
  // let res = from l in left
  Index        r59, r40, r58
  Const        r60, nil
  NotEqual     r61, r59, r60
  JumpIfFalse  r61, L10
  Len          r62, r59
  Const        r63, 0
L13:
  Less         r64, r63, r62
  JumpIfFalse  r64, L10
  Index        r44, r59, r63
  // where l.val % 2 == 0 && true
  Const        r66, "val"
  Index        r67, r57, r66
  Mod          r68, r67, r19
  Equal        r70, r68, r2
  JumpIfFalse  r70, L11
  Const        r71, true
  Move         r70, r71
L11:
  JumpIfFalse  r70, L12
  // select l.val + r.info
  Index        r72, r57, r66
  Const        r73, "info"
  Index        r74, r44, r73
  Add          r75, r72, r74
  // let res = from l in left
  Append       r31, r31, r75
L12:
  Const        r77, 1
  Add          r63, r63, r77
  Jump         L13
L10:
  Const        r79, 1
  Add          r54, r54, r79
  Jump         L14
L5:
  Jump         L15
L6:
  MakeMap      r81, 0, r0
  Const        r82, 0
L20:
  Less         r83, r82, r33
  JumpIfFalse  r83, L16
  Index        r84, r32, r82
  Move         r57, r84
  // where l.val % 2 == 0 && true
  Index        r85, r57, r66
  Mod          r86, r85, r19
  Equal        r88, r86, r2
  JumpIfFalse  r88, L17
  Move         r88, r71
L17:
  JumpIfFalse  r88, L18
  // join r in right on l.id == r.id
  Index        r89, r57, r45
  // let res = from l in left
  Index        r90, r81, r89
  Const        r91, nil
  NotEqual     r92, r90, r91
  JumpIfTrue   r92, L19
  MakeList     r93, 0, r0
  SetIndex     r81, r89, r93
L19:
  Index        r90, r81, r89
  Append       r94, r90, r84
  SetIndex     r81, r89, r94
L18:
  Const        r95, 1
  Add          r82, r82, r95
  Jump         L20
L16:
  // join r in right on l.id == r.id
  Const        r97, 0
L26:
  Less         r98, r97, r35
  JumpIfFalse  r98, L21
  Index        r44, r34, r97
  Index        r100, r44, r45
  Index        r101, r81, r100
  Const        r102, nil
  NotEqual     r103, r101, r102
  JumpIfFalse  r103, L22
  Len          r104, r101
  Const        r105, 0
L25:
  Less         r106, r105, r104
  JumpIfFalse  r106, L22
  Index        r57, r101, r105
  // where l.val % 2 == 0 && true
  Index        r108, r57, r66
  Mod          r109, r108, r19
  Equal        r111, r109, r2
  JumpIfFalse  r111, L23
  Move         r111, r71
L23:
  JumpIfFalse  r111, L24
  // select l.val + r.info
  Index        r112, r57, r66
  Index        r113, r44, r73
  Add          r114, r112, r113
  // let res = from l in left
  Append       r31, r31, r114
L24:
  // join r in right on l.id == r.id
  Const        r116, 1
  Add          r105, r105, r116
  Jump         L25
L22:
  Const        r118, 1
  Add          r97, r97, r118
  Jump         L26
L21:
  // last = len(res)
  Len          r28, r31
  // for i in 0..repeat {
  Const        r121, 1
  Add          r4, r4, r121
  Jump         L27
L4:
  // let duration = (now() - start) / 1000
  Now          r123
  SubInt       r124, r123, r29
  Const        r125, 1000
  DivInt       r126, r124, r125
  // "duration_us": duration,
  Const        r127, "duration_us"
  // "output": last,
  Const        r128, "output"
  // "duration_us": duration,
  Move         r129, r126
  // "output": last,
  Move         r130, r28
  // json({
  MakeMap      r131, 2, r127
  JSON         r131
  Return       r0
