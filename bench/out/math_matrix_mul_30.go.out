//go:build ignore

// Generated by Mochi compiler v0.10.27 on 2025-07-17T02:37:41Z

package main

import (
	"encoding/json"
	"fmt"
	"time"
)

type v map[string]any

// line 1
func matmul(a [][]int, b [][]int) [][]int {
	n := len(a)
	m := len(b[0])
	p := len(b)
	var result [][]int = [][]int{}
	for i := 0; i < n; i++ {
		var row []int = []int{}
		for j := 0; j < m; j++ {
			var sum int = 0
			for k := 0; k < p; k++ {
				sum = (sum + (a[i][k] * b[k][j]))
			}
			row = append(append([]int{}, row...), []int{sum}...)
		}
		result = append(append([][]int{}, result...), [][]int{row}...)
	}
	return result
}

var a [][]int
var b [][]int

func main() {
	a = [][]int{}
	b = [][]int{}
	size := 30
	repeat := 10
	for i := 0; i < size; i++ {
		var row []int = []int{}
		for j := 0; j < size; j++ {
			row = append(append([]int{}, row...), []int{(i + j)}...)
		}
		a = append(append([][]int{}, a...), [][]int{row}...)
	}
	for i := 0; i < size; i++ {
		var row []int = []int{}
		for j := 0; j < size; j++ {
			row = append(append([]int{}, row...), []int{(i * j)}...)
		}
		b = append(append([][]int{}, b...), [][]int{row}...)
	}
	var last [][]int = [][]int{}
	start := time.Now().UnixNano()
	for i := 0; i < repeat; i++ {
		last = matmul(a, b)
	}
	end := time.Now().UnixNano()
	duration := (int64((int64(end) - int64(start))) / int64(1000))
	func() {
		b, _ := json.Marshal(map[string]int64{"duration_us": duration, "output": int64(last[0][0])})
		fmt.Println(string(b))
	}()
}
