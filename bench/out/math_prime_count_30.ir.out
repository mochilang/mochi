func main (regs=29)
  // let n = 30
  Const        r0, 30
  Move         r0, r0
  SetGlobal    0,0,0,0
  // let repeat = 100
  Const        r1, 100
  Move         r1, r1
  SetGlobal    1,1,0,0
  // var last = 0
  Const        r2, 0
  Move         r2, r2
  SetGlobal    2,2,0,0
  // let start = now()
  Now          r3
  Move         r3, r3
  SetGlobal    3,3,0,0
  // for r in 0..repeat {
  Const        r2, 0
  Const        r1, 100
  Move         r4, r2
L4:
  LessInt      r5, r4, r1
  JumpIfFalse  r5, L0
  // var total = 0
  Const        r2, 0
  Move         r6, r2
  // for i in 2..n {
  Const        r7, 2
  Const        r0, 30
  Move         r8, r7
L3:
  LessInt      r9, r8, r0
  JumpIfFalse  r9, L1
  // if is_prime(i) {
  Move         r10, r8
  Call         r11, is_prime, r10
  JumpIfFalse  r11, L2
  // total = total + 1
  Const        r12, 1
  AddInt       r13, r6, r12
  Move         r6, r13
L2:
  // for i in 2..n {
  Const        r14, 1
  AddInt       r15, r8, r14
  Move         r8, r15
  Jump         L3
L1:
  // last = total
  Move         r2, r6
  SetGlobal    2,2,0,0
  // for r in 0..repeat {
  Const        r16, 1
  AddInt       r17, r4, r16
  Move         r4, r17
  Jump         L4
L0:
  // let end = now()
  Now          r18
  Move         r4, r18
  SetGlobal    4,4,0,0
  // let duration = (end - start) / 1000
  SubInt       r19, r4, r3
  Const        r20, 1000
  DivInt       r21, r19, r20
  Move         r5, r21
  SetGlobal    5,5,0,0
  // "duration_us": duration,
  Const        r22, "duration_us"
  // "output": last,
  Const        r23, "output"
  // "duration_us": duration,
  Move         r24, r22
  Move         r25, r5
  // "output": last,
  Move         r26, r23
  Move         r27, r2
  // json({
  MakeMap      r28, 2, r24
  JSON         r28
  Return       r0

  // fun is_prime(n: int): bool {
func is_prime (regs=20)
  // if n < 2 { return false }
  Const        r7, 2
  Less         r8, r0, r7
  JumpIfFalse  r8, L0
  Const        r9, false
  Return       r9
L0:
  // for i in 2..(n - 1) {
  Const        r7, 2
  Const        r10, 1
  Sub          r11, r0, r10
  Move         r12, r7
L3:
  LessInt      r13, r12, r11
  JumpIfFalse  r13, L1
  // if n % i == 0 {
  Mod          r14, r0, r12
  Const        r15, 0
  Equal        r16, r14, r15
  JumpIfFalse  r16, L2
  // return false
  Const        r9, false
  Return       r9
L2:
  // for i in 2..(n - 1) {
  Const        r17, 1
  AddInt       r18, r12, r17
  Move         r12, r18
  Jump         L3
L1:
  // return true
  Const        r19, true
  Return       r19
