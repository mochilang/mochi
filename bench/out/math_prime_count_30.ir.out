func main (regs=10)
  // let n = 30
  Const        r0, 30
  // let repeat = 100
  Const        r1, 100
  // var last = 0
  Const        r2, 0
  Move         r3, r2
  // let start = now()
  Now          r4
  // for r in 0..repeat {
  Move         r5, r2
L0:
  Less         r6, r5, r1
L2:
  JumpIfFalse  r6, L0
  // var count = 0
  Move         r1, r2
L1:
  // for i in 2..n {
  Const        r2, 2
  Less         r7, r2, r0
  JumpIfFalse  r7, L0
  // if is_prime(i) {
  Move         r8, r2
  Call         r9, is_prime, r8
  JumpIfFalse  r9, L1
  // count = count + 1
  Const        r9, 1
  AddInt       r1, r1, r9
  // for i in 2..n {
  Const        r9, 1
  Add          r2, r2, r9
  Jump         L2
  // last = count
  Move         r3, r1
  // for r in 0..repeat {
  Const        r9, 1
  Add          r5, r5, r9
  Jump         L0
  // let end = now()
  Now          r9
  // let duration = (end - start) / 1000
  SubInt       r6, r9, r4
  Const        r9, 1000
  DivInt       r4, r6, r9
  // "duration_us": duration,
  Const        r9, "duration_us"
  // "output": last,
  Const        r6, "output"
  // "duration_us": duration,
  Move         r5, r9
  Move         r9, r4
  // "output": last,
  Move         r4, r6
  Move         r6, r3
  // json({
  MakeMap      r3, 2, r5
  JSON         r3
  Return       r0

  // fun is_prime(n: int): bool {
func is_prime (regs=6)
  // if n < 2 { return false }
  Const        r1, 2
L3:
  Less         r2, r0, r1
  JumpIfFalse  r2, L0
  Const        r2, false
L0:
  Return       r2
  // for i in 2..(n - 1) {
  Const        r3, 1
  Sub          r4, r0, r3
  Move         r3, r1
  Less         r1, r3, r4
  JumpIfFalse  r1, L1
  // if n % i == 0 {
  Mod          r1, r0, r3
  Const        r4, 0
  Equal        r5, r1, r4
  JumpIfFalse  r5, L2
  // return false
  Return       r2
L2:
  // for i in 2..(n - 1) {
  Const        r5, 1
  Add          r3, r3, r5
  Jump         L3
L1:
  // return true
  Const        r5, true
  Return       r5
