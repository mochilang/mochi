func main (regs=37)
  // let n = 30
  Const        r0, 30
  // var last = 0
  Const        r4, 0
  // for i in 2..n {
  Const        r13, 2
L2:
  // if is_prime(i) {
  Move         r16, r13
  Call         r17, is_prime, r16
  JumpIfFalse  r17, L0
L1:
  // for i in 2..n {
  Jump         L1
  // for r in 0..repeat {
  Jump         L2
  // let end = now()
  Now          r24
  // let duration = (end - start) / 1000
  SubInt       r26, r24, r6
L0:
  Const        r27, 1000
  DivInt       r28, r26, r27
  // "duration_us": duration,
  Const        r30, "duration_us"
  // "output": last,
  Const        r31, "output"
  // "duration_us": duration,
  Move         r32, r30
  Move         r33, r28
  // "output": last,
  Move         r34, r31
  Move         r35, r4
  // json({
  MakeMap      r36, 2, r32
  JSON         r36
  Return       r0

  // fun is_prime(n: int): bool {
func is_prime (regs=16)
  // if n < 2 { return false }
  Const        r1, 2
  Less         r2, r0, r1
  JumpIfFalse  r2, L0
  Const        r3, false
  Return       r3
L0:
  // for i in 2..(n - 1) {
  Const        r4, 2
  Const        r5, 1
  Sub          r6, r0, r5
  Less         r8, r4, r6
L3:
  JumpIfFalse  r8, L1
  // if n % i == 0 {
  Mod          r9, r0, r4
  Const        r10, 0
  Equal        r11, r9, r10
  JumpIfFalse  r11, L2
  // return false
  Const        r12, false
  Return       r12
L2:
  // for i in 2..(n - 1) {
  Jump         L3
  // return true
  Const        r15, true
  Return       r15
L1:
  Return       r0
