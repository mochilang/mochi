func main (regs=12)
  // let n = 30
  Const        r0, 30
L1:
  // let repeat = 100
  Const        r1, 100
L3:
  // var last = 0
  Const        r2, 0
L2:
  // let start = now()
  Now          r3
  // for r in 0..repeat {
  Const        r4, 0
  Less         r5, r4, r1
L4:
  JumpIfFalse  r5, L0
L0:
  // var count = 0
  Const        r1, 0
  // for i in 2..n {
  Const        r5, 2
  Less         r6, r5, r0
  JumpIfFalse  r6, L1
  // if is_prime(i) {
  Move         r6, r5
  Call         r7, is_prime, r6
  JumpIfFalse  r7, L2
  // count = count + 1
  Const        r6, 1
  AddInt       r1, r1, r6
  // for i in 2..n {
  Const        r7, 1
  Add          r5, r5, r7
  Jump         L3
  // for r in 0..repeat {
  Const        r1, 1
  Add          r4, r4, r1
  Jump         L4
  // let end = now()
  Now          r5
  // let duration = (end - start) / 1000
  SubInt       r7, r5, r3
  Const        r4, 1000
  DivInt       r1, r7, r4
  // "duration_us": duration,
  Const        r6, "duration_us"
  // "output": last,
  Const        r3, "output"
  // "duration_us": duration,
  Move         r8, r6
  Move         r9, r1
  // "output": last,
  Move         r10, r3
  Move         r11, r2
  // json({
  MakeMap      r5, 5, r8
  JSON         r5
  Return       r0

  // fun is_prime(n: int): bool {
func is_prime (regs=5)
  // if n < 2 { return false }
  Const        r1, 2
L0:
  Less         r2, r0, r1
  JumpIfFalse  r2, L0
L3:
  Const        r1, false
  Return       r1
  // for i in 2..(n - 1) {
  Const        r2, 2
  Const        r1, 1
  Sub          r3, r0, r1
  Move         r1, r2
  Less         r2, r1, r3
  JumpIfFalse  r2, L1
  // if n % i == 0 {
  Mod          r3, r0, r1
  Const        r2, 0
  Equal        r4, r3, r2
  JumpIfFalse  r4, L2
  // return false
  Const        r2, false
  Return       r2
L2:
  // for i in 2..(n - 1) {
  Const        r4, 1
  Add          r1, r1, r4
  Jump         L3
L1:
  // return true
  Const        r2, true
  Return       r2
