function __add(a, b)
    if type(a) == 'table' and type(b) == 'table' then
        local out = {}
        for i = 1, #a do out[#out+1] = a[i] end
        for i = 1, #b do out[#out+1] = b[i] end
        return out
    elseif type(a) == 'string' or type(b) == 'string' then
        return tostring(a) .. tostring(b)
    else
        return a + b
    end
end
function __div(a, b)
    if math.type and math.type(a) == 'integer' and math.type(b) == 'integer' then
        return a // b
    end
    return a / b
end
function __eq(a, b)
    if type(a) ~= type(b) then return false end
    if type(a) ~= 'table' then return a == b end
    if (a[1] ~= nil or #a > 0) and (b[1] ~= nil or #b > 0) then
        if #a ~= #b then return false end
        for i = 1, #a do if not __eq(a[i], b[i]) then return false end end
        return true
    end
    for k, v in pairs(a) do if not __eq(v, b[k]) then return false end end
    for k, _ in pairs(b) do if a[k] == nil then return false end end
    return true
end
function __json(v)
    local ok, json = pcall(require, 'json')
    if not ok then error('json library not found') end
    print(json.encode(v))
end
function is_prime(n)
	if (n < 2) then
		return false
	end
	for i = 2, (((n - 1)))-1 do
		if __eq((n % i), 0) then
			return false
		end
		::__continue0::
	end
	return true
end

local n = 20
local _repeat = 100
local last = 0
local start = os.time()*1000000000
for r = 0, (_repeat)-1 do
	local count = 0
	for i = 2, (n)-1 do
		if is_prime(i) then
			count = __add(count, 1)
		end
		::__continue2::
	end
	last = count
	::__continue1::
end
local _end = os.time()*1000000000
local duration = __div(((_end - start)), 1000)
__json({["duration_us"]=duration, ["output"]=last})
