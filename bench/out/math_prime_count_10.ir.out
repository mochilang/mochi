func main (regs=32)
  // let n = 10
  Const        r0, 10
  // let repeat = 100
  Const        r1, 100
  // var last = 0
  Const        r3, 0
L3:
  // let start = now()
  Now          r4
  // for r in 0..repeat {
  Const        r6, 0
L4:
  Less         r7, r6, r1
  JumpIfFalse  r7, L0
  // var count = 0
  Const        r9, 0
  // for i in 2..n {
  Const        r11, 2
  Less         r12, r11, r0
  JumpIfFalse  r12, L1
  // if is_prime(i) {
  Move         r13, r11
  Call         r14, is_prime, r13
  JumpIfFalse  r14, L2
  // count = count + 1
  Const        r15, 1
  AddInt       r9, r9, r15
L2:
  // for i in 2..n {
  Const        r17, 1
  Add          r11, r11, r17
  Jump         L3
L1:
  // for r in 0..repeat {
  Const        r19, 1
  Add          r6, r6, r19
  Jump         L4
L0:
  // let end = now()
  Now          r21
  // let duration = (end - start) / 1000
  SubInt       r22, r21, r4
  Const        r23, 1000
  DivInt       r24, r22, r23
  // "duration_us": duration,
  Const        r25, "duration_us"
  // "output": last,
  Const        r26, "output"
  // "duration_us": duration,
  Move         r27, r25
  Move         r28, r24
  // "output": last,
  Move         r29, r26
  Move         r30, r3
  // json({
  MakeMap      r31, 2, r27
  JSON         r31
  Return       r0

  // fun is_prime(n: int): bool {
func is_prime (regs=16)
  // if n < 2 { return false }
  Const        r1, 2
  Less         r2, r0, r1
  JumpIfFalse  r2, L0
  Const        r3, false
  Return       r3
L0:
  // for i in 2..(n - 1) {
  Const        r4, 2
  Const        r5, 1
  Sub          r6, r0, r5
  Move         r7, r4
L3:
  Less         r8, r7, r6
  JumpIfFalse  r8, L1
  // if n % i == 0 {
  Mod          r9, r0, r7
  Const        r10, 0
  Equal        r11, r9, r10
  JumpIfFalse  r11, L2
  // return false
  Const        r12, false
  Return       r12
L2:
  // for i in 2..(n - 1) {
  Const        r13, 1
  Add          r7, r7, r13
  Jump         L3
L1:
  // return true
  Const        r15, true
  Return       r15
