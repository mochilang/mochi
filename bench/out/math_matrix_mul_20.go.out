//go:build ignore

// Generated by Mochi v0.10.40 on 2025-07-26 17:11:50 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"runtime"
	"strconv"
	"time"
)

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return int(nowSeed)
	}
	return int(time.Now().UnixNano())
}

func matmul(a [][]int, b [][]int) [][]int {
	var n int = len(a)
	_ = n
	var m int = len(b[0])
	_ = m
	var p int = len(b)
	_ = p
	var result [][]int = [][]int{}
	_ = result
	for i := 0; i < n; i++ {
		var row []int = []int{}
		_ = row
		for j := 0; j < m; j++ {
			var sum int = 0
			_ = sum
			for k := 0; k < p; k++ {
				sum = (sum + (a[i][k] * b[k][j]))
			}
			row = func() []int {
				res := make([]int, len(row))
				copy(res, row)
				res = append(res, []int{sum}...)
				return res
			}()
		}
		result = func() [][]int {
			res := make([][]int, len(result))
			copy(res, result)
			res = append(res, [][]int{row}...)
			return res
		}()
	}
	return result
}

var size int

var repeat int

var a [][]int

var b [][]int

var last [][]int

var start int

var end int

var duration *big.Int

func main() {
	func() {
		var ms runtime.MemStats
		runtime.ReadMemStats(&ms)
		startMem := ms.Alloc
		benchStart := time.Now().UnixNano()
		size = 20
		repeat = 10
		a = [][]int{}
		for i := 0; i < size; i++ {
			var row []int = []int{}
			_ = row
			for j := 0; j < size; j++ {
				row = func() []int {
					res := make([]int, len(row))
					copy(res, row)
					res = append(res, []int{(i + j)}...)
					return res
				}()
			}
			a = func() [][]int {
				res := make([][]int, len(a))
				copy(res, a)
				res = append(res, [][]int{row}...)
				return res
			}()
		}
		b = [][]int{}
		for i := 0; i < size; i++ {
			var row []int = []int{}
			_ = row
			for j := 0; j < size; j++ {
				row = func() []int {
					res := make([]int, len(row))
					copy(res, row)
					res = append(res, []int{(i * j)}...)
					return res
				}()
			}
			b = func() [][]int {
				res := make([][]int, len(b))
				copy(res, b)
				res = append(res, [][]int{row}...)
				return res
			}()
		}
		last = [][]int{}
		start = _now()
		for i := 0; i < repeat; i++ {
			last = matmul(a, b)
		}
		end = _now()
		duration = big.NewInt(int64(((end - start) / 1000)))
		runtime.ReadMemStats(&ms)
		endMem := ms.Alloc
		benchEnd := time.Now().UnixNano()
		data := map[string]any{"name": "main", "duration_us": (benchEnd - benchStart) / 1000, "memory_bytes": endMem - startMem}
		out, _ := json.MarshalIndent(data, "", "  ")
		fmt.Println(string(out))
	}()
}
