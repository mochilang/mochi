# Generated by Mochi compiler v0.10.33 on 2025-07-21T09:11:18Z
from __future__ import annotations
import json
import time
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()
import sys

sys.set_int_max_str_digits(0)
import os, time

_now_seeded = False
_now_seed = 0


def _now():
    global _now_seeded, _now_seed
    if not _now_seeded:
        s = os.getenv("MOCHI_NOW_SEED")
        if s and s.isdigit():
            _now_seed = int(s)
            _now_seeded = True
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def matmul(a: list[list[int]], b: list[list[int]]) -> list[list[int]]:
    """matmul(a: list[list[int]], b: list[list[int]]) -> list[list[int]]"""
    n: int = len(a)
    m: int = len(b[0])
    p: int = len(b)
    result: list[list[int]] = []
    for i in range(0, n):
        row: list[int] = []
        for j in range(0, m):
            sum: int = 0
            for k in range(0, p):
                sum = sum + a[i][k] * b[k][j]
            row = row + [sum]
        result = result + [row]
    return result


size: int = 10
repeat: int = 10
a: list[list[int]] = []
for i in range(0, size):
    row: list[int] = []
    for j in range(0, size):
        row = row + [i + j]
    a = a + [row]
b: list[list[int]] = []
for i in range(0, size):
    row: list[int] = []
    for j in range(0, size):
        row = row + [i * j]
    b = b + [row]
last: list[list[int]] = []
start: int = _now()
for i in range(0, repeat):
    last = matmul(a, b)
end: int = _now()
duration: int = (end - start) // 1000
print(
    json.dumps(
        {"duration_us": duration, "output": last[0][0]},
        separators=(",", ":"),
        default=lambda o: vars(o),
    )
)
