package main

import (
	"encoding/json"
	"fmt"
	"time"
)

func is_prime(n int) bool {
	if n < 2 {
		return false
	}
	for i := 2; i < (n - 1); i++ {
		if (n % i) == 0 {
			return false
		}
	}
	return true
}

func main() {
	var n int = 30
	var repeat int = 100
	var last int = 0
	var start int64 = time.Now().UnixNano()
	for r := 0; r < repeat; r++ {
		var count int = 0
		for i := 2; i < n; i++ {
			if is_prime(i) {
				count = (count + 1)
			}
		}
		last = count
	}
	var end int64 = time.Now().UnixNano()
	var duration int64 = (int64((int64(end) - int64(start))) / int64(1000))
	func() {
		b, _ := json.Marshal(map[string]int64{"duration_us": duration, "output": int64(last)})
		fmt.Println(string(b))
	}()
}
