func main (regs=24)
  // let size = 30
  Const        r0, 30
  // let repeat = 10
  Const        r1, 10
L4:
  // var a: list<list<int>> = []
  Const        r2, []
  // for i in 0..size {
  Const        r3, 0
  Less         r4, r3, r0
  JumpIfFalse  r4, L0
L6:
  // var row: list<int> = []
  Const        r5, []
  // for j in 0..size {
  Const        r6, 0
L5:
  Less         r7, r6, r0
  JumpIfFalse  r7, L1
L1:
  // row = row + [i + j]
  AddInt       r8, r3, r6
L2:
  MakeList     r9, 1, r8
  Add          r5, r5, r9
  // for j in 0..size {
  Const        r10, 1
L0:
  Add          r6, r6, r10
L3:
  Jump         L2
  // a = a + [row]
  MakeList     r12, 1, r13
L7:
  Add          r2, r2, r12
  // for i in 0..size {
  Const        r14, 1
  Add          r3, r3, r14
  Jump         L3
  // var b: list<list<int>> = []
  Const        r16, []
  // for i in 0..size {
  Const        r3, 0
  Less         r17, r3, r0
  JumpIfFalse  r17, L4
  // var row: list<int> = []
  Const        r18, []
  // for j in 0..size {
  Const        r19, 0
  Less         r4, r19, r0
  JumpIfFalse  r4, L3
  // row = row + [i * j]
  MulInt       r7, r3, r19
  MakeList     r5, 1, r7
  Add          r18, r18, r5
  // for j in 0..size {
  Const        r8, 1
  Add          r19, r19, r8
  Jump         L5
  // b = b + [row]
  MakeList     r6, 1, r9
  Add          r16, r16, r6
  // for i in 0..size {
  Const        r10, 1
  Add          r3, r3, r10
  Jump         L2
  // var last: list<list<int>> = []
  Const        r12, []
  // let start = now()
  Now          r13
  // for i in 0..repeat {
  Const        r3, 0
  Less         r14, r3, r1
  JumpIfFalse  r14, L6
  // last = matmul(a, b)
  Call2        r12, matmul, r2, r16
  // for i in 0..repeat {
  Const        r15, 1
  Add          r3, r3, r15
  Jump         L7
  // let end = now()
  Now          r4
  // let duration = (end - start) / 1000
  SubInt       r18, r4, r13
  Const        r7, 1000
  DivInt       r5, r18, r7
  // "duration_us": duration,
  Const        r19, "duration_us"
  // "output": last[0][0], // last[0][0] type any does not support indexing
  Const        r8, "output"
  Const        r9, 0
  Index        r6, r12, r9
  Const        r10, 0
  Index        r11, r6, r10
  // "duration_us": duration,
  Move         r20, r19
  Move         r21, r5
  // "output": last[0][0], // last[0][0] type any does not support indexing
  Move         r22, r8
  Move         r23, r11
  // json({
  MakeMap      r1, 13, r20
  JSON         r1
  Return       r0

  // fun matmul(a: list<list<int>>, b: list<list<int>>): list<list<int>> {
func matmul (regs=13)
  // let n = len(a)
  Len          r2, r0
  // let m = len(b[0])
  Const        r3, 0
  Index        r4, r1, r3
L0:
  Len          r5, r4
  // let p = len(b)
  Len          r6, r1
L2:
  // var result: list<list<int>> = []
  Const        r7, []
  // for i in 0..n {
  Const        r8, 0
  Less         r9, r8, r2
L1:
  JumpIfFalse  r9, L0
L4:
  // var row: list<int> = []
  Const        r10, []
  // for j in 0..m {
  Const        r11, 0
L3:
  Less         r12, r11, r5
L5:
  JumpIfFalse  r12, L1
  // var sum: int = 0
  Const        r3, 0
  // for k in 0..p {
  Const        r4, 0
  Less         r2, r4, r6
  JumpIfFalse  r2, L2
  // sum = sum + a[i][k] * b[k][j]
  Index        r5, r0, r8
  Index        r12, r5, r4
  Index        r6, r1, r4
  Index        r2, r6, r11
  Mul          r5, r12, r2
  Add          r3, r3, r5
  // for k in 0..p {
  Const        r6, 1
  Add          r4, r4, r6
  Jump         L3
  // row = row + [sum]
  Move         r12, r3
  MakeList     r2, 1, r12
  Add          r10, r10, r2
  // for j in 0..m {
  Const        r5, 1
  Add          r11, r11, r5
  Jump         L4
  // result = result + [row]
  Move         r4, r10
  MakeList     r6, 1, r4
  Add          r7, r7, r6
  // for i in 0..n {
  Const        r3, 1
  Add          r8, r8, r3
  Jump         L5
  // return result
  Return       r7
