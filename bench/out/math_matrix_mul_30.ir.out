func main (regs=63)
  // let size = 30
  Const        r0, 30
  Move         r1, r0
  // let repeat = 10
  Const        r2, 10
  Move         r3, r2
  // var a: list<list<int>> = []
  Const        r4, []
  Move         r5, r4
  // for i in 0..size {
  Const        r6, 0
  Const        r0, 30
  Move         r7, r6
L3:
  LessInt      r8, r7, r0
  JumpIfFalse  r8, L0
  // var row: list<int> = []
  Const        r4, []
  Move         r9, r4
  // for j in 0..size {
  Const        r6, 0
  Const        r0, 30
  Move         r10, r6
L2:
  LessInt      r11, r10, r0
  JumpIfFalse  r11, L1
  // row = row + [i + j]
  AddInt       r13, r7, r10
  Move         r12, r13
  MakeList     r14, 1, r12
  Add          r15, r9, r14
  Move         r9, r15
  // for j in 0..size {
  Const        r16, 1
  AddInt       r17, r10, r16
  Move         r10, r17
  Jump         L2
L1:
  // a = a + [row]
  Move         r18, r9
  MakeList     r19, 1, r18
  Add          r20, r5, r19
  Move         r5, r20
  // for i in 0..size {
  Const        r21, 1
  AddInt       r22, r7, r21
  Move         r7, r22
  Jump         L3
L0:
  // var b: list<list<int>> = []
  Const        r4, []
  Move         r23, r4
  // for i in 0..size {
  Const        r6, 0
  Const        r0, 30
  Move         r7, r6
L7:
  LessInt      r24, r7, r0
  JumpIfFalse  r24, L4
  // var row: list<int> = []
  Const        r4, []
  Move         r25, r4
  // for j in 0..size {
  Const        r6, 0
  Const        r0, 30
  Move         r26, r6
L6:
  LessInt      r27, r26, r0
  JumpIfFalse  r27, L5
  // row = row + [i * j]
  MulInt       r29, r7, r26
  Move         r28, r29
  MakeList     r30, 1, r28
  Add          r31, r25, r30
  Move         r25, r31
  // for j in 0..size {
  Const        r32, 1
  AddInt       r33, r26, r32
  Move         r26, r33
  Jump         L6
L5:
  // b = b + [row]
  Move         r34, r25
  MakeList     r35, 1, r34
  Add          r36, r23, r35
  Move         r23, r36
  // for i in 0..size {
  Const        r37, 1
  AddInt       r38, r7, r37
  Move         r7, r38
  Jump         L7
L4:
  // var last: list<list<int>> = []
  Const        r4, []
  Move         r39, r4
  // let start = now()
  Now          r40
  Move         r41, r40
  // for i in 0..repeat {
  Const        r6, 0
  Const        r2, 10
  Move         r7, r6
L9:
  LessInt      r42, r7, r2
  JumpIfFalse  r42, L8
  // last = matmul(a, b)
  Move         r43, r5
  Move         r44, r23
  Call2        r45, matmul, r43, r44
  Move         r39, r45
  // for i in 0..repeat {
  Const        r46, 1
  AddInt       r47, r7, r46
  Move         r7, r47
  Jump         L9
L8:
  // let end = now()
  Now          r48
  Move         r49, r48
  // let duration = (end - start) / 1000
  SubInt       r50, r49, r41
  Const        r51, 1000
  DivInt       r52, r50, r51
  Move         r53, r52
  // "duration_us": duration,
  Const        r54, "duration_us"
  // "output": last[0][0], // last[0][0] type any does not support indexing
  Const        r55, "output"
  Const        r6, 0
  Index        r56, r39, r6
  Const        r6, 0
  Index        r57, r56, r6
  // "duration_us": duration,
  Move         r58, r54
  Move         r59, r53
  // "output": last[0][0], // last[0][0] type any does not support indexing
  Move         r60, r55
  Move         r61, r57
  // json({
  MakeMap      r62, 2, r58
  JSON         r62
  Return       r0

  // fun matmul(a: list<list<int>>, b: list<list<int>>): list<list<int>> {
func matmul (regs=46)
  // let n = len(a)
  Len          r10, r0
  Move         r11, r10
  // let m = len(b[0])
  Const        r12, 0
  Index        r13, r1, r12
  Len          r14, r13
  Move         r15, r14
  // let p = len(b)
  Len          r16, r1
  Move         r17, r16
  // var result: list<list<int>> = []
  Const        r18, []
  Move         r19, r18
  // for i in 0..n {
  Const        r12, 0
  Move         r20, r12
L5:
  LessInt      r21, r20, r11
  JumpIfFalse  r21, L0
  // var row: list<int> = []
  Const        r18, []
  Move         r22, r18
  // for j in 0..m {
  Const        r12, 0
  Move         r23, r12
L4:
  LessInt      r24, r23, r15
  JumpIfFalse  r24, L1
  // var sum: int = 0
  Const        r12, 0
  Move         r25, r12
  // for k in 0..p {
  Const        r12, 0
  Move         r26, r12
L3:
  LessInt      r27, r26, r17
  JumpIfFalse  r27, L2
  // sum = sum + a[i][k] * b[k][j]
  Index        r28, r0, r20
  Index        r29, r28, r26
  Index        r30, r1, r26
  Index        r31, r30, r23
  Mul          r32, r29, r31
  Add          r33, r25, r32
  Move         r25, r33
  // for k in 0..p {
  Const        r34, 1
  AddInt       r35, r26, r34
  Move         r26, r35
  Jump         L3
L2:
  // row = row + [sum]
  Move         r36, r25
  MakeList     r37, 1, r36
  Add          r38, r22, r37
  Move         r22, r38
  // for j in 0..m {
  Const        r39, 1
  AddInt       r40, r23, r39
  Move         r23, r40
  Jump         L4
L1:
  // result = result + [row]
  Move         r41, r22
  MakeList     r42, 1, r41
  Add          r43, r19, r42
  Move         r19, r43
  // for i in 0..n {
  Const        r44, 1
  AddInt       r45, r20, r44
  Move         r20, r45
  Jump         L5
L0:
  // return result
  Return       r19
