// Generated by Mochi compiler v0.10.25 on 2025-07-13T11:42:49Z
// Source: bench/out/tmp.mochi

function matmul(a: number[][], b: number[][]): number[][] {
  let n = a.length;
  let m = b[0].length;
  let p = b.length;
  var result: number[][] = [];
  for (let i: number = 0; i < n; i++) {
    var row: number[] = [];
    for (let j: number = 0; j < m; j++) {
      var sum: number = 0;
      for (let k: number = 0; k < p; k++) {
        sum = sum + (a[i][k] * b[k][j]);
      }
      row = row.concat([sum]);
    }
    result = result.concat([row]);
  }
  return result;
}

var a: number[][];
var b: number[][];
let duration: number;
let end: number;
var last: number[][];
let repeat: number;
let size: number;
let start: number;

function main(): void {
  size = 20;
  repeat = 10;
  a = [];
  for (let i: number = 0; i < size; i++) {
    var row: number[] = [];
    for (let j: number = 0; j < size; j++) {
      row = row.concat([i + j]);
    }
    a = a.concat([row]);
  }
  b = [];
  for (let i: number = 0; i < size; i++) {
    var row: number[] = [];
    for (let j: number = 0; j < size; j++) {
      row = row.concat([i * j]);
    }
    b = b.concat([row]);
  }
  last = [];
  start = performance.now() * 1000000;
  for (let i: number = 0; i < repeat; i++) {
    last = matmul(a, b);
  }
  end = performance.now() * 1000000;
  duration = Math.trunc((end - start) / 1000);
  console.log(_json({
    "duration_us": duration,
    "output": last[0][0],
  }));
}
function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

main();
