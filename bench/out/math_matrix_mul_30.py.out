# Generated by Mochi Python compiler
from __future__ import annotations

import json
import time
import typing


def matmul(a: list[list[int]], b: list[list[int]]) -> list[list[int]]:
    n = len(a)
    m = len(b[0])
    p = len(b)
    result: list[list[int]] = []
    for i in range(0, n):
        row: list[int] = []
        for j in range(0, m):
            sum: typing.Callable[[typing.Any], float] = 0
            for k in range(0, p):
                sum = sum + (a[i][k] * b[k][j])
            row = row + [sum]
        result = result + [row]
    return result


size: int = 30
repeat: int = 10
a: list[list[int]] = []
b: list[list[int]] = []
last: list[list[int]] = []
start: int = time.time_ns()
end: int = time.time_ns()
duration: int = None


def main():
    global size
    size = 30
    global repeat
    repeat = 10
    global a
    a = []
    for i in range(0, size):
        row: list[int] = []
        for j in range(0, size):
            row = row + [i + j]
        a = a + [row]
    global b
    b = []
    for i in range(0, size):
        row: list[int] = []
        for j in range(0, size):
            row = row + [i * j]
        b = b + [row]
    global last
    last = []
    global start
    start = time.time_ns()
    for i in range(0, repeat):
        last = matmul(a, b)
    global end
    end = time.time_ns()
    global duration
    duration = int(((end - start)) / 1000)
    print(
        json.dumps(
            {"duration_us": duration, "output": last[0][0]}, default=lambda o: vars(o)
        )
    )


if __name__ == "__main__":
    main()
