//go:build ignore

// Generated by Mochi compiler v0.10.33 on 2025-07-21T09:11:24Z

package main

import (
	"encoding/json"
	"fmt"
	"os"
	"strconv"
	"time"
)

type v map[string]any

// line 1
func sum_loop(n int) int {
	var total int = 0
	for i := 1; i < n; i++ {
		total = (total + i)
	}
	return total
}

func main() {
	var n int = 30
	var repeat int = 1000
	var last int = 0
	var start int64 = _now()
	for i := 0; i < repeat; i++ {
		last = sum_loop(n)
	}
	var duration int64 = (int64((int64(_now()) - int64(start))) / int64(1000))
	func() {
		b, _ := json.Marshal(any(map[string]int64{"duration_us": duration, "output": int64(last)}))
		fmt.Println(string(b))
	}()
}

var seededNow bool
var nowSeed int64

func init() {
	if s := os.Getenv("MOCHI_NOW_SEED"); s != "" {
		if v, err := strconv.ParseInt(s, 10, 64); err == nil {
			nowSeed = v
			seededNow = true
		}
	}
}
func _now() int64 {
	if seededNow {
		nowSeed = (nowSeed*1664525 + 1013904223) % 2147483647
		return nowSeed
	}
	return time.Now().UnixNano()
}
