func main (regs=69)
  // var left = []
  Const        r0, []
  Move         r1, r0
  // for i in 0..20 {
  Const        r2, 0
  Const        r3, 20
  Move         r4, r2
L1:
  Less         r5, r4, r3
  JumpIfFalse  r5, L0
  // left = append(left, { id: i, val: i })
  Const        r6, "id"
  Const        r7, "val"
  Move         r8, r4
  Move         r9, r4
  MakeMap      r10, 2, r6
  Append       r1, r1, r10
  // for i in 0..20 {
  Const        r12, 1
  Add          r4, r4, r12
  Jump         L1
L0:
  // var right = []
  Const        r15, []
  // for i in 0..20 {
  Move         r4, r2
L3:
  Less         r16, r4, r3
  JumpIfFalse  r16, L2
  // right = append(right, { id: i, info: i * 2 })
  Const        r17, "id"
  Const        r18, "info"
  Const        r19, 2
  MulInt       r20, r4, r19
  MakeMap      r23, 2, r17
  Append       r15, r15, r23
  // for i in 0..20 {
  Const        r25, 1
  Add          r4, r4, r25
  Jump         L3
L2:
  // let repeat = 100
  Const        r27, 100
  // var last = 0
  Move         r28, r2
  // let start = now()
  Now          r29
  // for i in 0..repeat {
  Move         r4, r2
L11:
  Less         r30, r4, r27
  JumpIfFalse  r30, L4
  // let res = from l in left
  Const        r31, []
  IterPrep     r32, r1
  Len          r33, r32
  // join r in right on (l.id == r.id && true)
  IterPrep     r34, r15
  Len          r35, r34
  Const        r36, "id"
  // select l.val + r.info
  Const        r37, "val"
  Const        r38, "info"
  // let res = from l in left
  Const        r39, 0
L10:
  LessInt      r40, r39, r33
  JumpIfFalse  r40, L5
  Index        r42, r32, r39
  // join r in right on (l.id == r.id && true)
  Const        r43, 0
L9:
  LessInt      r44, r43, r35
  JumpIfFalse  r44, L6
  Index        r46, r34, r43
  Index        r47, r42, r36
  Index        r48, r46, r36
  Equal        r50, r47, r48
  JumpIfFalse  r50, L7
  Const        r50, true
L7:
  JumpIfFalse  r50, L8
  // select l.val + r.info
  Index        r52, r42, r37
  Index        r53, r46, r38
  Add          r54, r52, r53
  // let res = from l in left
  Append       r31, r31, r54
L8:
  // join r in right on (l.id == r.id && true)
  Const        r56, 1
  AddInt       r43, r43, r56
  Jump         L9
L6:
  // let res = from l in left
  AddInt       r39, r39, r56
  Jump         L10
L5:
  // last = len(res)
  Len          r28, r31
  // for i in 0..repeat {
  Const        r58, 1
  Add          r4, r4, r58
  Jump         L11
L4:
  // let duration = (now() - start) / 1000
  Now          r60
  SubInt       r61, r60, r29
  Const        r62, 1000
  DivInt       r63, r61, r62
  // "duration_us": duration,
  Const        r64, "duration_us"
  // "output": last,
  Const        r65, "output"
  // "duration_us": duration,
  Move         r66, r63
  // "output": last,
  Move         r67, r28
  // json({
  MakeMap      r68, 2, r64
  JSON         r68
  Return       r0
