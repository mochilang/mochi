func main (regs=62)
  // let size = 20
  Const        r0, 20
  // let repeat = 10
  Const        r1, 10
  // var a: list<list<int>> = []
  Const        r3, []
  // for i in 0..size {
  Const        r4, 0
  Move         r5, r4
L3:
  Less         r6, r5, r0
  JumpIfFalse  r6, L0
  // var row: list<int> = []
  Const        r8, []
  // for j in 0..size {
  Move         r9, r4
L2:
  Less         r10, r9, r0
  JumpIfFalse  r10, L1
  // row = row + [i + j]
  AddInt       r12, r5, r9
  MakeList     r13, 1, r12
  Add          r8, r8, r13
  // for j in 0..size {
  Const        r15, 1
  Add          r9, r9, r15
  Jump         L2
L1:
  // a = a + [row]
  Move         r17, r8
  MakeList     r18, 1, r17
  Add          r3, r3, r18
  // for i in 0..size {
  Const        r20, 1
  Add          r5, r5, r20
  Jump         L3
L0:
  // var b: list<list<int>> = []
  Const        r23, []
  // for i in 0..size {
  Move         r5, r4
L7:
  Less         r24, r5, r0
  JumpIfFalse  r24, L4
  // var row: list<int> = []
  Const        r26, []
  // for j in 0..size {
  Move         r27, r4
L6:
  Less         r28, r27, r0
  JumpIfFalse  r28, L5
  // row = row + [i * j]
  MulInt       r30, r5, r27
  MakeList     r31, 1, r30
  Add          r26, r26, r31
  // for j in 0..size {
  Const        r33, 1
  Add          r27, r27, r33
  Jump         L6
L5:
  // b = b + [row]
  Move         r35, r26
  MakeList     r36, 1, r35
  Add          r23, r23, r36
  // for i in 0..size {
  Const        r38, 1
  Add          r5, r5, r38
  Jump         L7
L4:
  // var last: list<list<int>> = []
  Const        r41, []
  // let start = now()
  Now          r42
  // for i in 0..repeat {
  Move         r5, r4
L9:
  Less         r43, r5, r1
  JumpIfFalse  r43, L8
  // last = matmul(a, b)
  Call2        r41, matmul, r3, r23
  // for i in 0..repeat {
  Const        r47, 1
  Add          r5, r5, r47
  Jump         L9
L8:
  // let end = now()
  Now          r49
  // let duration = (end - start) / 1000
  SubInt       r50, r49, r42
  Const        r51, 1000
  DivInt       r52, r50, r51
  // "duration_us": duration,
  Const        r53, "duration_us"
  // "output": last[0][0], // last[0][0] type any does not support indexing
  Const        r54, "output"
  Index        r55, r41, r4
  Index        r56, r55, r4
  // "duration_us": duration,
  Move         r57, r53
  Move         r58, r52
  // "output": last[0][0], // last[0][0] type any does not support indexing
  Move         r59, r54
  Move         r60, r56
  // json({
  MakeMap      r61, 2, r57
  JSON         r61
  Return       r0

  // fun matmul(a: list<list<int>>, b: list<list<int>>): list<list<int>> {
func matmul (regs=36)
  // let n = len(a)
  Len          r2, r0
  // let m = len(b[0])
  Const        r3, 0
  Index        r4, r1, r3
  Len          r5, r4
  // let p = len(b)
  Len          r6, r1
  // var result: list<list<int>> = []
  Const        r8, []
  // for i in 0..n {
  Move         r9, r3
L4:
  Less         r10, r9, r2
  JumpIfFalse  r10, L0
  // var row: list<int> = []
  Const        r12, []
  // for j in 0..m {
  Move         r13, r3
L3:
  Less         r14, r13, r5
  JumpIfFalse  r14, L1
  // var sum: int = 0
  Move         r15, r3
  // for k in 0..p {
  Move         r16, r3
  Less         r17, r16, r6
  JumpIfFalse  r17, L2
  // sum = sum + a[i][k] * b[k][j]
  Index        r18, r0, r9
  Index        r19, r18, r16
  Index        r20, r1, r16
  Index        r21, r20, r13
  Mul          r22, r19, r21
  Add          r15, r15, r22
  // for k in 0..p {
  Const        r24, 1
  Add          r16, r16, r24
L2:
  // row = row + [sum]
  MakeList     r27, 1, r26
  Add          r12, r12, r27
  // for j in 0..m {
  Const        r29, 1
  Add          r13, r13, r29
  Jump         L3
L1:
  // result = result + [row]
  Move         r31, r12
  MakeList     r32, 1, r31
  Add          r8, r8, r32
  // for i in 0..n {
  Const        r34, 1
  Add          r9, r9, r34
  Jump         L4
L0:
  // return result
  Return       r8
