func main (regs=58)
  // let size = 20
  Const        r0, 20
  // let repeat = 10
  Const        r1, 10
  // var a: list<list<int>> = []
  Const        r2, []
  Move         r3, r2
  // for i in 0..size {
  Const        r4, 0
  Move         r5, r4
L3:
  Less         r6, r5, r0
  JumpIfFalse  r6, L0
  // var row: list<int> = []
  Move         r7, r2
  // for j in 0..size {
  Move         r8, r4
L2:
  Less         r9, r8, r0
  JumpIfFalse  r9, L1
  // row = row + [i + j]
  AddInt       r10, r5, r8
  Move         r11, r10
  MakeList     r12, 1, r11
  Add          r13, r7, r12
  Move         r7, r13
  // for j in 0..size {
  Const        r14, 1
  Add          r15, r8, r14
  Move         r8, r15
  Jump         L2
L1:
  // a = a + [row]
  Move         r16, r7
  MakeList     r17, 1, r16
  Add          r18, r3, r17
  Move         r3, r18
  // for i in 0..size {
  Const        r19, 1
  Add          r20, r5, r19
  Move         r5, r20
  Jump         L3
L0:
  // var b: list<list<int>> = []
  Move         r21, r2
  // for i in 0..size {
  Move         r5, r4
L7:
  Less         r22, r5, r0
  JumpIfFalse  r22, L4
  // var row: list<int> = []
  Move         r23, r2
  // for j in 0..size {
  Move         r24, r4
L6:
  Less         r25, r24, r0
  JumpIfFalse  r25, L5
  // row = row + [i * j]
  MulInt       r26, r5, r24
  Move         r27, r26
  MakeList     r28, 1, r27
  Add          r29, r23, r28
  Move         r23, r29
  // for j in 0..size {
  Const        r30, 1
  Add          r31, r24, r30
  Move         r24, r31
  Jump         L6
L5:
  // b = b + [row]
  Move         r32, r23
  MakeList     r33, 1, r32
  Add          r34, r21, r33
  Move         r21, r34
  // for i in 0..size {
  Const        r35, 1
  Add          r36, r5, r35
  Move         r5, r36
  Jump         L7
L4:
  // var last: list<list<int>> = []
  Move         r37, r2
  // let start = now()
  Now          r38
  // for i in 0..repeat {
  Move         r5, r4
L9:
  Less         r39, r5, r1
  JumpIfFalse  r39, L8
  // last = matmul(a, b)
  Move         r40, r3
  Move         r41, r21
  Call2        r42, matmul, r40, r41
  Move         r37, r42
  // for i in 0..repeat {
  Const        r43, 1
  Add          r44, r5, r43
  Move         r5, r44
  Jump         L9
L8:
  // let end = now()
  Now          r45
  // let duration = (end - start) / 1000
  SubInt       r46, r45, r38
  Const        r47, 1000
  DivInt       r48, r46, r47
  // "duration_us": duration,
  Const        r49, "duration_us"
  // "output": last[0][0], // last[0][0] type any does not support indexing
  Const        r50, "output"
  Index        r51, r37, r4
  Index        r52, r51, r4
  // "duration_us": duration,
  Move         r53, r49
  Move         r54, r48
  // "output": last[0][0], // last[0][0] type any does not support indexing
  Move         r55, r50
  Move         r56, r52
  // json({
  MakeMap      r57, 2, r53
  JSON         r57
  Return       r0

  // fun matmul(a: list<list<int>>, b: list<list<int>>): list<list<int>> {
func matmul (regs=35)
  // let n = len(a)
  Len          r2, r0
  // let m = len(b[0])
  Const        r3, 0
  Index        r4, r1, r3
  Len          r5, r4
  // let p = len(b)
  Len          r6, r1
  // var result: list<list<int>> = []
  Const        r7, []
  Move         r8, r7
  // for i in 0..n {
  Move         r9, r3
L5:
  Less         r10, r9, r2
  JumpIfFalse  r10, L0
  // var row: list<int> = []
  Move         r11, r7
  // for j in 0..m {
  Move         r12, r3
L4:
  Less         r13, r12, r5
  JumpIfFalse  r13, L1
  // var sum: int = 0
  Move         r14, r3
  // for k in 0..p {
  Move         r15, r3
L3:
  Less         r16, r15, r6
  JumpIfFalse  r16, L2
  // sum = sum + a[i][k] * b[k][j]
  Index        r17, r0, r9
  Index        r18, r17, r15
  Index        r19, r1, r15
  Index        r20, r19, r12
  Mul          r21, r18, r20
  Add          r22, r14, r21
  Move         r14, r22
  // for k in 0..p {
  Const        r23, 1
  Add          r24, r15, r23
  Move         r15, r24
  Jump         L3
L2:
  // row = row + [sum]
  Move         r25, r14
  MakeList     r26, 1, r25
  Add          r27, r11, r26
  Move         r11, r27
  // for j in 0..m {
  Const        r28, 1
  Add          r29, r12, r28
  Move         r12, r29
  Jump         L4
L1:
  // result = result + [row]
  Move         r30, r11
  MakeList     r31, 1, r30
  Add          r32, r8, r31
  Move         r8, r32
  // for i in 0..n {
  Const        r33, 1
  Add          r34, r9, r33
  Move         r9, r34
  Jump         L5
L0:
  // return result
  Return       r8
