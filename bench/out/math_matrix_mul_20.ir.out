func main (regs=64)
  // let size = 20
  Const        r8, 20
  Move         r0, r8
  SetGlobal    0,0,0,0
  // let repeat = 10
  Const        r9, 10
  Move         r1, r9
  SetGlobal    1,1,0,0
  // var a: list<list<int>> = []
  Const        r10, []
  Move         r2, r10
  SetGlobal    2,2,0,0
  // for i in 0..size {
  Const        r11, 0
  Const        r8, 20
  Move         r12, r11
L3:
  LessInt      r13, r12, r8
  JumpIfFalse  r13, L0
  // var row: list<int> = []
  Const        r10, []
  Move         r14, r10
  // for j in 0..size {
  Const        r11, 0
  Const        r8, 20
  Move         r15, r11
L2:
  LessInt      r16, r15, r8
  JumpIfFalse  r16, L1
  // row = row + [i + j]
  AddInt       r18, r12, r15
  Move         r17, r18
  MakeList     r19, 1, r17
  Add          r20, r14, r19
  Move         r14, r20
  // for j in 0..size {
  Const        r21, 1
  AddInt       r22, r15, r21
  Move         r15, r22
  Jump         L2
L1:
  // a = a + [row]
  Move         r23, r14
  MakeList     r24, 1, r23
  Add          r25, r2, r24
  Move         r2, r25
  SetGlobal    2,2,0,0
  // for i in 0..size {
  Const        r26, 1
  AddInt       r27, r12, r26
  Move         r12, r27
  Jump         L3
L0:
  // var b: list<list<int>> = []
  Const        r10, []
  Move         r3, r10
  SetGlobal    3,3,0,0
  // for i in 0..size {
  Const        r11, 0
  Const        r8, 20
  Move         r12, r11
L7:
  LessInt      r28, r12, r8
  JumpIfFalse  r28, L4
  // var row: list<int> = []
  Const        r10, []
  Move         r29, r10
  // for j in 0..size {
  Const        r11, 0
  Const        r8, 20
  Move         r30, r11
L6:
  LessInt      r31, r30, r8
  JumpIfFalse  r31, L5
  // row = row + [i * j]
  MulInt       r33, r12, r30
  Move         r32, r33
  MakeList     r34, 1, r32
  Add          r35, r29, r34
  Move         r29, r35
  // for j in 0..size {
  Const        r36, 1
  AddInt       r37, r30, r36
  Move         r30, r37
  Jump         L6
L5:
  // b = b + [row]
  Move         r38, r29
  MakeList     r39, 1, r38
  Add          r40, r3, r39
  Move         r3, r40
  SetGlobal    3,3,0,0
  // for i in 0..size {
  Const        r41, 1
  AddInt       r42, r12, r41
  Move         r12, r42
  Jump         L7
L4:
  // var last: list<list<int>> = []
  Const        r10, []
  Move         r4, r10
  SetGlobal    4,4,0,0
  // let start = now()
  Now          r43
  Move         r5, r43
  SetGlobal    5,5,0,0
  // for i in 0..repeat {
  Const        r11, 0
  Const        r9, 10
  Move         r12, r11
L9:
  LessInt      r44, r12, r9
  JumpIfFalse  r44, L8
  // last = matmul(a, b)
  Move         r45, r2
  Move         r46, r3
  Call2        r47, matmul, r45, r46
  Move         r4, r47
  SetGlobal    4,4,0,0
  // for i in 0..repeat {
  Const        r48, 1
  AddInt       r49, r12, r48
  Move         r12, r49
  Jump         L9
L8:
  // let end = now()
  Now          r50
  Move         r6, r50
  SetGlobal    6,6,0,0
  // let duration = (end - start) / 1000
  SubInt       r51, r6, r5
  Const        r52, 1000
  DivInt       r53, r51, r52
  Cast         r54, r53, bigint
  Move         r7, r54
  SetGlobal    7,7,0,0
  // "duration_us": duration,
  Const        r55, "duration_us"
  // "output": last[0][0], // last[0][0] type any does not support indexing
  Const        r56, "output"
  Const        r11, 0
  Index        r57, r4, r11
  Const        r11, 0
  Index        r58, r57, r11
  // "duration_us": duration,
  Move         r59, r55
  Move         r60, r7
  // "output": last[0][0], // last[0][0] type any does not support indexing
  Move         r61, r56
  Move         r62, r58
  // json({
  MakeMap      r63, 2, r59
  JSON         r63
  Return       r0

  // fun matmul(a: list<list<int>>, b: list<list<int>>): list<list<int>> {
func matmul (regs=46)
  // let n = len(a)
  Len          r10, r8
  Move         r11, r10
  // let m = len(b[0])
  Const        r12, 0
  Index        r13, r9, r12
  Len          r14, r13
  Move         r15, r14
  // let p = len(b)
  Len          r16, r9
  Move         r17, r16
  // var result: list<list<int>> = []
  Const        r18, []
  Move         r19, r18
  // for i in 0..n {
  Const        r12, 0
  Move         r20, r12
L5:
  LessInt      r21, r20, r11
  JumpIfFalse  r21, L0
  // var row: list<int> = []
  Const        r18, []
  Move         r22, r18
  // for j in 0..m {
  Const        r12, 0
  Move         r23, r12
L4:
  LessInt      r24, r23, r15
  JumpIfFalse  r24, L1
  // var sum: int = 0
  Const        r12, 0
  Move         r25, r12
  // for k in 0..p {
  Const        r12, 0
  Move         r26, r12
L3:
  LessInt      r27, r26, r17
  JumpIfFalse  r27, L2
  // sum = sum + a[i][k] * b[k][j]
  Index        r28, r8, r20
  Index        r29, r28, r26
  Index        r30, r9, r26
  Index        r31, r30, r23
  Mul          r32, r29, r31
  Add          r33, r25, r32
  Move         r25, r33
  // for k in 0..p {
  Const        r34, 1
  AddInt       r35, r26, r34
  Move         r26, r35
  Jump         L3
L2:
  // row = row + [sum]
  Move         r36, r25
  MakeList     r37, 1, r36
  Add          r38, r22, r37
  Move         r22, r38
  // for j in 0..m {
  Const        r39, 1
  AddInt       r40, r23, r39
  Move         r23, r40
  Jump         L4
L1:
  // result = result + [row]
  Move         r41, r22
  MakeList     r42, 1, r41
  Add          r43, r19, r42
  Move         r19, r43
  // for i in 0..n {
  Const        r44, 1
  AddInt       r45, r20, r44
  Move         r20, r45
  Jump         L5
L0:
  // return result
  Return       r19
