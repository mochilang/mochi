function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

var _nowSeed = 0;
var _nowSeeded = false;
{
  const s = typeof Deno !== "undefined"
    ? Deno.env.get("MOCHI_NOW_SEED")
    : (process.env.MOCHI_NOW_SEED || "");
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  return Date.now() * 1000;
}

// Generated by Mochi compiler v0.10.33 on 2025-07-21T09:11:23Z
// Source: bench/out/tmp.mochi

const nil = null;

function is_prime(n: number): boolean {
  if ((n < 2)) {
    return false;
  }
  for (let i: number = 2; i < (n - 1); i++) {
    if (((n % i) == 0)) {
      return false;
    }
  }
  return true;
}

let duration: number;
let end: number;
var last: number;
let n: number;
let repeat: number;
let start: number;

function main(): void {
  let n: number = 30;
  let repeat: number = 100;
  var last: number = 0;
  let start: number = _now();
  for (let r: number = 0; r < repeat; r++) {
    var total = 0;
    for (let i: number = 2; i < n; i++) {
      if (is_prime(i)) {
        total = total + 1;
      }
    }
    last = total;
  }
  let end: number = _now();
  let duration: number = (end - start) / 1000;
  console.log(_json({
    "duration_us": duration,
    "output": last,
  }));
}
main();
