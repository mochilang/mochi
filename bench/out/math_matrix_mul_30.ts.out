// Generated by Mochi v0.10.40 on 2025-07-26 17:11:50 GMT+7

function matmul(a: number[][], b: number[][]): number[][] {
  let n: number = (Array.isArray(a) || typeof a === 'string' ? a.length : Object.keys(a ?? {}).length);
  let m: number = (Array.isArray(b[Math.trunc(0)]) || typeof b[Math.trunc(0)] === 'string' ? b[Math.trunc(0)].length : Object.keys(b[Math.trunc(0)] ?? {}).length);
  let p: number = (Array.isArray(b) || typeof b === 'string' ? b.length : Object.keys(b ?? {}).length);
  let result: number[][] = [];
  for (let i = 0; i < n; i++) {
    let row: number[] = [];
    for (let j = 0; j < m; j++) {
      let sum: number = 0;
      for (let k = 0; k < p; k++) {
        sum = (sum + (a[i][k] * b[k][j]));
      }
      row.push(sum);
    }
    result.push(row);
  }
  return result;
}
let size: number = 30;
let repeat: number = 10;
let a: number[][] = [];
let b: number[][] = [];
let last: number[][] = [];
let start: number = _now();
let end: number = _now();
let duration: number = Math.trunc((end - start) / 1000);
var _nowSeed = 0;
var _nowSeeded = false;
{
  let s = "";
  if (typeof Deno !== "undefined") {
    try {
      s = Deno.env.get("MOCHI_NOW_SEED") ?? "";
    } catch (_e) {
      s = "";
    }
  } else if (typeof process !== "undefined") {
    s = process.env.MOCHI_NOW_SEED || "";
  }
  if (s) {
    const v = parseInt(s, 10);
    if (!isNaN(v)) {
      _nowSeed = v;
      _nowSeeded = true;
    }
  }
}
function _now(): number {
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647;
    return _nowSeed;
  }
  if (typeof Deno !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  if (typeof performance !== 'undefined') {
    return Math.trunc(performance.now() * 1e6);
  }
  return Date.now() * 1000;
}
function _mem(): number {
  if (typeof Deno !== 'undefined') {
    return (Deno.memoryUsage?.().rss ?? 0);
  }
  if (typeof process !== 'undefined') {
    return process.memoryUsage().rss;
  }
  return 0;
}
{
  const _startMem = _mem()
  const _start = _now()
  for (let i = 0; i < size; i++) {
    let row: number[] = [];
    for (let j = 0; j < size; j++) {
      row.push((i + j));
    }
    a.push(row);
  }
  for (let i = 0; i < size; i++) {
    let row: number[] = [];
    for (let j = 0; j < size; j++) {
      row.push((i * j));
    }
    b.push(row);
  }
  for (let i = 0; i < repeat; i++) {
    last = matmul(a, b);
  }
  const _end = _now()
  const _duration = _end - _start
  const _duration_us = Math.trunc(_duration / 1000)
  const _endMem = _mem()
  const _memory_bytes = Math.max(0, _endMem - _startMem)
  console.log(JSON.stringify({
    "duration_us": _duration_us,
    "memory_bytes": _memory_bytes,
    "name": "main"
  }, null, "  "))
}

