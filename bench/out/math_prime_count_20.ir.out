func main (regs=36)
  // let n = 20
  Const        r6, 20
  Move         r0, r6
  SetGlobal    0,0,0,0
  // let repeat = 100
  Const        r7, 100
  Move         r1, r7
  SetGlobal    1,1,0,0
  // var last = 0
  Const        r8, 0
  Move         r2, r8
  SetGlobal    2,2,0,0
  // let start = now()
  Now          r9
  Move         r3, r9
  SetGlobal    3,3,0,0
  // for r in 0..repeat {
  Const        r8, 0
  Const        r7, 100
  Move         r10, r8
L4:
  LessInt      r11, r10, r7
  JumpIfFalse  r11, L0
  // var total = 0
  Const        r8, 0
  Move         r12, r8
  // for i in 2..n {
  Const        r13, 2
  Const        r6, 20
  Move         r14, r13
L3:
  LessInt      r15, r14, r6
  JumpIfFalse  r15, L1
  // if is_prime(i) {
  Move         r16, r14
  Call         r17, is_prime, r16
  JumpIfFalse  r17, L2
  // total = total + 1
  Const        r18, 1
  AddInt       r19, r12, r18
  Move         r12, r19
L2:
  // for i in 2..n {
  Const        r20, 1
  AddInt       r21, r14, r20
  Move         r14, r21
  Jump         L3
L1:
  // last = total
  Move         r2, r12
  SetGlobal    2,2,0,0
  // for r in 0..repeat {
  Const        r22, 1
  AddInt       r23, r10, r22
  Move         r10, r23
  Jump         L4
L0:
  // let end = now()
  Now          r24
  Move         r4, r24
  SetGlobal    4,4,0,0
  // let duration = (end - start) / 1000
  SubInt       r25, r4, r3
  Const        r26, 1000
  DivInt       r27, r25, r26
  Cast         r28, r27, bigint
  Move         r5, r28
  SetGlobal    5,5,0,0
  // "duration_us": duration,
  Const        r29, "duration_us"
  // "output": last,
  Const        r30, "output"
  // "duration_us": duration,
  Move         r31, r29
  Move         r32, r5
  // "output": last,
  Move         r33, r30
  Move         r34, r2
  // json({
  MakeMap      r35, 2, r31
  JSON         r35
  Return       r0

  // fun is_prime(n: int): bool {
func is_prime (regs=20)
  // if n < 2 { return false }
  Const        r7, 2
  Less         r8, r6, r7
  JumpIfFalse  r8, L0
  Const        r9, false
  Return       r9
L0:
  // for i in 2..(n - 1) {
  Const        r7, 2
  Const        r10, 1
  Sub          r11, r6, r10
  Move         r12, r7
L3:
  LessInt      r13, r12, r11
  JumpIfFalse  r13, L1
  // if n % i == 0 {
  Mod          r14, r6, r12
  Const        r15, 0
  Equal        r16, r14, r15
  JumpIfFalse  r16, L2
  // return false
  Const        r9, false
  Return       r9
L2:
  // for i in 2..(n - 1) {
  Const        r17, 1
  AddInt       r18, r12, r17
  Move         r12, r18
  Jump         L3
L1:
  // return true
  Const        r19, true
  Return       r19
