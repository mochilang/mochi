func main (regs=30)
  // let n = 20
  Const        r0, 20
  // let repeat = 100
  Const        r1, 100
  // var last = 0
  Const        r2, 0
  Move         r3, r2
  // let start = now()
  Now          r4
  // for r in 0..repeat {
  Move         r5, r2
L4:
  LessInt      r6, r5, r1
  JumpIfFalse  r6, L0
  // var count = 0
  Move         r7, r2
  // for i in 2..n {
  Const        r8, 2
  Move         r9, r8
L3:
  LessInt      r10, r9, r0
  JumpIfFalse  r10, L1
  // if is_prime(i) {
  Move         r11, r9
  Call         r12, is_prime, r11
  JumpIfFalse  r12, L2
  // count = count + 1
  Const        r13, 1
  AddInt       r14, r7, r13
  Move         r7, r14
L2:
  // for i in 2..n {
  Const        r15, 1
  AddInt       r16, r9, r15
  Move         r9, r16
  Jump         L3
L1:
  // last = count
  Move         r3, r7
  // for r in 0..repeat {
  Const        r17, 1
  AddInt       r18, r5, r17
  Move         r5, r18
  Jump         L4
L0:
  // let end = now()
  Now          r19
  // let duration = (end - start) / 1000
  SubInt       r20, r19, r4
  Const        r21, 1000
  DivInt       r22, r20, r21
  // "duration_us": duration,
  Const        r23, "duration_us"
  // "output": last,
  Const        r24, "output"
  // "duration_us": duration,
  Move         r25, r23
  Move         r26, r22
  // "output": last,
  Move         r27, r24
  Move         r28, r3
  // json({
  MakeMap      r29, 2, r25
  JSON         r29
  Return       r0

  // fun is_prime(n: int): bool {
func is_prime (regs=14)
  // if n < 2 { return false }
  Const        r1, 2
  Less         r2, r0, r1
  JumpIfFalse  r2, L0
  Const        r3, false
  Return       r3
L0:
  // for i in 2..(n - 1) {
  Const        r4, 1
  Sub          r5, r0, r4
  Move         r6, r1
L3:
  LessInt      r7, r6, r5
  JumpIfFalse  r7, L1
  // if n % i == 0 {
  Mod          r8, r0, r6
  Const        r9, 0
  Equal        r10, r8, r9
  JumpIfFalse  r10, L2
  // return false
  Return       r3
L2:
  // for i in 2..(n - 1) {
  Const        r11, 1
  AddInt       r12, r6, r11
  Move         r6, r12
  Jump         L3
L1:
  // return true
  Const        r13, true
  Return       r13
