#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

typedef struct { int len; int *data; } list_int;
static list_int list_int_create(int len) {
    list_int l;
    l.len = len;
    l.data = (int*)malloc(sizeof(int)*len);
    return l;
}
typedef struct { int len; double *data; } list_float;
static list_float list_float_create(int len) {
    list_float l;
    l.len = len;
    l.data = (double*)malloc(sizeof(double)*len);
    return l;
}
typedef struct { int len; char** data; } list_string;
static list_string list_string_create(int len) {
    list_string l;
    l.len = len;
    l.data = (char**)malloc(sizeof(char*)*len);
    return l;
}
typedef struct { int len; list_int *data; } list_list_int;
static list_list_int list_list_int_create(int len) {
    list_list_int l;
    l.len = len;
    l.data = (list_int*)malloc(sizeof(list_int)*len);
    return l;
}
static long long _now() {
    struct timespec ts;
    clock_gettime(CLOCK_REALTIME, &ts);
    return (long long)ts.tv_sec * 1000000000LL + ts.tv_nsec;
}
static void _json_int(int v) { printf("%d", v); }
static void _json_float(double v) { printf("%g", v); }
static void _json_string(char* s) { printf("\"%s\"", s); }
static void _json_list_int(list_int v) {
    printf("[");
    for (int i = 0; i < v.len; i++) { if (i > 0) printf(","); _json_int(v.data[i]); }
    printf("]");
}
static void _json_list_float(list_float v) {
    printf("[");
    for (int i = 0; i < v.len; i++) { if (i > 0) printf(","); _json_float(v.data[i]); }
    printf("]");
}
static void _json_list_string(list_string v) {
    printf("[");
    for (int i = 0; i < v.len; i++) { if (i > 0) printf(","); _json_string(v.data[i]); }
    printf("]");
}
static void _json_list_list_int(list_list_int v) {
    printf("[");
    for (int i = 0; i < v.len; i++) { if (i > 0) printf(","); _json_list_int(v.data[i]); }
    printf("]");
}
int mul(int n){
	int result = 1;
	for (int i = 1; i < n; i++) {
		result = (result * i);
	}
	return result;
}

int main() {
	int n = 30;
	int repeat = 1000;
	int last = 0;
	long long start = _now();
	for (int i = 0; i < repeat; i++) {
		last = mul(n);
	}
	int duration = (((_now() - start)) / 1000);
	printf("{");
	_json_string("duration_us");
	printf(":");
	_json_int(duration);
	printf(",");
	_json_string("output");
	printf(":");
	_json_int(last);
	printf("}\n");
	return 0;
}
