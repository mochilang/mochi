func main (regs=59)
  // let size = 10
  Const        r0, 10
  // var a: list<list<int>> = []
  Const        r2, []
  // for i in 0..size {
  Const        r3, 0
  Move         r4, r3
L2:
  Less         r5, r4, r0
  JumpIfFalse  r5, L0
  // for j in 0..size {
  Jump         L1
  // a = a + [row]
  MakeList     r17, 1, r16
  Add          r2, r2, r17
  // for i in 0..size {
  Jump         L2
L0:
  // var b: list<list<int>> = []
  Const        r22, []
  // for i in 0..size {
  Move         r4, r3
L1:
  Less         r23, r4, r0
  JumpIfFalse  r23, L3
  // var row: list<int> = []
  Const        r25, []
  // for j in 0..size {
  Move         r26, r3
L5:
  Less         r27, r26, r0
  JumpIfFalse  r27, L4
  Const        r32, 1
  Add          r26, r26, r32
  Jump         L5
L4:
  // b = b + [row]
  Move         r34, r25
  MakeList     r35, 1, r34
  Add          r22, r22, r35
  // for i in 0..size {
  Const        r37, 1
  Add          r4, r4, r37
  Jump         L1
L3:
  // var last: list<list<int>> = []
  Const        r40, []
  // for i in 0..repeat {
  Move         r4, r3
L7:
  Less         r42, r4, r0
  JumpIfFalse  r42, L6
  // last = matmul(a, b)
  Call2        r40, matmul, r2, r22
  // for i in 0..repeat {
  Const        r46, 1
  Add          r4, r4, r46
  Jump         L7
L6:
  // "duration_us": duration,
  Const        r52, "duration_us"
  // "output": last[0][0], // last[0][0] type any does not support indexing
  Const        r53, "output"
  Index        r54, r40, r3
  Index        r55, r54, r3
  // json({
  MakeMap      r58, 2, r52
  JSON         r58
  Return       r0

  // fun matmul(a: list<list<int>>, b: list<list<int>>): list<list<int>> {
func matmul (regs=36)
  // let n = len(a)
  Len          r2, r0
  // let m = len(b[0])
  Const        r3, 0
  Index        r4, r1, r3
  Len          r5, r4
  // let p = len(b)
  Len          r6, r1
  // var result: list<list<int>> = []
  Const        r8, []
  // for i in 0..n {
  Move         r9, r3
L4:
  Less         r10, r9, r2
  JumpIfFalse  r10, L0
  // var row: list<int> = []
  Const        r12, []
  // for j in 0..m {
  Move         r13, r3
L3:
  Less         r14, r13, r5
  JumpIfFalse  r14, L1
  // for k in 0..p {
  Less         r17, r3, r6
  JumpIfFalse  r17, L2
L2:
  // row = row + [sum]
  MakeList     r27, 1, r26
  Add          r12, r12, r27
  // for j in 0..m {
  Const        r29, 1
  Add          r13, r13, r29
  Jump         L3
L1:
  // result = result + [row]
  Move         r31, r12
  MakeList     r32, 1, r31
  Add          r8, r8, r32
  // for i in 0..n {
  Const        r34, 1
  Add          r9, r9, r34
  Jump         L4
L0:
  // return result
  Return       r8
  Return       r0
