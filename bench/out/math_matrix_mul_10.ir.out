func main (regs=62)
  // let size = 10
  Const        r0, 10
  Move         r1, r0
  // let repeat = 10
  Const        r0, 10
  Move         r2, r0
  // var a: list<list<int>> = []
  Const        r3, []
  Move         r4, r3
  // for i in 0..size {
  Const        r5, 0
  Const        r0, 10
  Move         r6, r5
L3:
  LessInt      r7, r6, r0
  JumpIfFalse  r7, L0
  // var row: list<int> = []
  Const        r3, []
  Move         r8, r3
  // for j in 0..size {
  Const        r5, 0
  Const        r0, 10
  Move         r9, r5
L2:
  LessInt      r10, r9, r0
  JumpIfFalse  r10, L1
  // row = row + [i + j]
  AddInt       r12, r6, r9
  Move         r11, r12
  MakeList     r13, 1, r11
  Add          r14, r8, r13
  Move         r8, r14
  // for j in 0..size {
  Const        r15, 1
  AddInt       r16, r9, r15
  Move         r9, r16
  Jump         L2
L1:
  // a = a + [row]
  Move         r17, r8
  MakeList     r18, 1, r17
  Add          r19, r4, r18
  Move         r4, r19
  // for i in 0..size {
  Const        r20, 1
  AddInt       r21, r6, r20
  Move         r6, r21
  Jump         L3
L0:
  // var b: list<list<int>> = []
  Const        r3, []
  Move         r22, r3
  // for i in 0..size {
  Const        r5, 0
  Const        r0, 10
  Move         r6, r5
L7:
  LessInt      r23, r6, r0
  JumpIfFalse  r23, L4
  // var row: list<int> = []
  Const        r3, []
  Move         r24, r3
  // for j in 0..size {
  Const        r5, 0
  Const        r0, 10
  Move         r25, r5
L6:
  LessInt      r26, r25, r0
  JumpIfFalse  r26, L5
  // row = row + [i * j]
  MulInt       r28, r6, r25
  Move         r27, r28
  MakeList     r29, 1, r27
  Add          r30, r24, r29
  Move         r24, r30
  // for j in 0..size {
  Const        r31, 1
  AddInt       r32, r25, r31
  Move         r25, r32
  Jump         L6
L5:
  // b = b + [row]
  Move         r33, r24
  MakeList     r34, 1, r33
  Add          r35, r22, r34
  Move         r22, r35
  // for i in 0..size {
  Const        r36, 1
  AddInt       r37, r6, r36
  Move         r6, r37
  Jump         L7
L4:
  // var last: list<list<int>> = []
  Const        r3, []
  Move         r38, r3
  // let start = now()
  Now          r39
  Move         r40, r39
  // for i in 0..repeat {
  Const        r5, 0
  Const        r0, 10
  Move         r6, r5
L9:
  LessInt      r41, r6, r0
  JumpIfFalse  r41, L8
  // last = matmul(a, b)
  Move         r42, r4
  Move         r43, r22
  Call2        r44, matmul, r42, r43
  Move         r38, r44
  // for i in 0..repeat {
  Const        r45, 1
  AddInt       r46, r6, r45
  Move         r6, r46
  Jump         L9
L8:
  // let end = now()
  Now          r47
  Move         r48, r47
  // let duration = (end - start) / 1000
  SubInt       r49, r48, r40
  Const        r50, 1000
  DivInt       r51, r49, r50
  Move         r52, r51
  // "duration_us": duration,
  Const        r53, "duration_us"
  // "output": last[0][0], // last[0][0] type any does not support indexing
  Const        r54, "output"
  Const        r5, 0
  Index        r55, r38, r5
  Const        r5, 0
  Index        r56, r55, r5
  // "duration_us": duration,
  Move         r57, r53
  Move         r58, r52
  // "output": last[0][0], // last[0][0] type any does not support indexing
  Move         r59, r54
  Move         r60, r56
  // json({
  MakeMap      r61, 2, r57
  JSON         r61
  Return       r0

  // fun matmul(a: list<list<int>>, b: list<list<int>>): list<list<int>> {
func matmul (regs=46)
  // let n = len(a)
  Len          r10, r0
  Move         r11, r10
  // let m = len(b[0])
  Const        r12, 0
  Index        r13, r1, r12
  Len          r14, r13
  Move         r15, r14
  // let p = len(b)
  Len          r16, r1
  Move         r17, r16
  // var result: list<list<int>> = []
  Const        r18, []
  Move         r19, r18
  // for i in 0..n {
  Const        r12, 0
  Move         r20, r12
L5:
  LessInt      r21, r20, r11
  JumpIfFalse  r21, L0
  // var row: list<int> = []
  Const        r18, []
  Move         r22, r18
  // for j in 0..m {
  Const        r12, 0
  Move         r23, r12
L4:
  LessInt      r24, r23, r15
  JumpIfFalse  r24, L1
  // var sum: int = 0
  Const        r12, 0
  Move         r25, r12
  // for k in 0..p {
  Const        r12, 0
  Move         r26, r12
L3:
  LessInt      r27, r26, r17
  JumpIfFalse  r27, L2
  // sum = sum + a[i][k] * b[k][j]
  Index        r28, r0, r20
  Index        r29, r28, r26
  Index        r30, r1, r26
  Index        r31, r30, r23
  Mul          r32, r29, r31
  Add          r33, r25, r32
  Move         r25, r33
  // for k in 0..p {
  Const        r34, 1
  AddInt       r35, r26, r34
  Move         r26, r35
  Jump         L3
L2:
  // row = row + [sum]
  Move         r36, r25
  MakeList     r37, 1, r36
  Add          r38, r22, r37
  Move         r22, r38
  // for j in 0..m {
  Const        r39, 1
  AddInt       r40, r23, r39
  Move         r23, r40
  Jump         L4
L1:
  // result = result + [row]
  Move         r41, r22
  MakeList     r42, 1, r41
  Add          r43, r19, r42
  Move         r19, r43
  // for i in 0..n {
  Const        r44, 1
  AddInt       r45, r20, r44
  Move         r20, r45
  Jump         L5
L0:
  // return result
  Return       r19
