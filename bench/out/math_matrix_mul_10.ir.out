func main (regs=61)
  // let size = 10
  Const        r0, 10
  // var a: list<list<int>> = []
  Const        r2, []
  // for i in 0..size {
  Const        r3, 0
  Move         r4, r3
L3:
  Less         r5, r4, r0
  JumpIfFalse  r5, L0
  // var row: list<int> = []
  Const        r7, []
  // for j in 0..size {
  Move         r8, r3
L2:
  Less         r9, r8, r0
  JumpIfFalse  r9, L1
  // row = row + [i + j]
  AddInt       r11, r4, r8
  MakeList     r12, 1, r11
  Add          r7, r7, r12
  // for j in 0..size {
  Const        r14, 1
  Add          r8, r8, r14
  Jump         L2
L1:
  // a = a + [row]
  Move         r16, r7
  MakeList     r17, 1, r16
  Add          r2, r2, r17
  // for i in 0..size {
  Const        r19, 1
  Add          r4, r4, r19
  Jump         L3
L0:
  // var b: list<list<int>> = []
  Const        r22, []
  // for i in 0..size {
  Move         r4, r3
L7:
  Less         r23, r4, r0
  JumpIfFalse  r23, L4
  // var row: list<int> = []
  Const        r25, []
  // for j in 0..size {
  Move         r26, r3
L6:
  Less         r27, r26, r0
  JumpIfFalse  r27, L5
  // row = row + [i * j]
  MulInt       r29, r4, r26
  MakeList     r30, 1, r29
  Add          r25, r25, r30
  // for j in 0..size {
  Const        r32, 1
  Add          r26, r26, r32
  Jump         L6
L5:
  // b = b + [row]
  Move         r34, r25
  MakeList     r35, 1, r34
  Add          r22, r22, r35
  // for i in 0..size {
  Const        r37, 1
  Add          r4, r4, r37
  Jump         L7
L4:
  // var last: list<list<int>> = []
  Const        r40, []
  // let start = now()
  Now          r41
  // for i in 0..repeat {
  Move         r4, r3
L9:
  Less         r42, r4, r0
  JumpIfFalse  r42, L8
  // last = matmul(a, b)
  Call2        r40, matmul, r2, r22
  // for i in 0..repeat {
  Const        r46, 1
  Add          r4, r4, r46
  Jump         L9
L8:
  // let end = now()
  Now          r48
  // let duration = (end - start) / 1000
  SubInt       r49, r48, r41
  Const        r50, 1000
  DivInt       r51, r49, r50
  // "duration_us": duration,
  Const        r52, "duration_us"
  // "output": last[0][0], // last[0][0] type any does not support indexing
  Const        r53, "output"
  Index        r54, r40, r3
  Index        r55, r54, r3
  // "duration_us": duration,
  Move         r56, r52
  Move         r57, r51
  // "output": last[0][0], // last[0][0] type any does not support indexing
  Move         r58, r53
  Move         r59, r55
  // json({
  MakeMap      r60, 2, r56
  JSON         r60
  Return       r0

  // fun matmul(a: list<list<int>>, b: list<list<int>>): list<list<int>> {
func matmul (regs=36)
  // let n = len(a)
  Len          r2, r0
  // let m = len(b[0])
  Const        r3, 0
  Index        r4, r1, r3
  Len          r5, r4
  // let p = len(b)
  Len          r6, r1
  // var result: list<list<int>> = []
  Const        r8, []
  // for i in 0..n {
  Move         r9, r3
L4:
  Less         r10, r9, r2
  JumpIfFalse  r10, L0
  // var row: list<int> = []
  Const        r12, []
  // for j in 0..m {
  Move         r13, r3
L3:
  Less         r14, r13, r5
  JumpIfFalse  r14, L1
  // var sum: int = 0
  Move         r15, r3
  // for k in 0..p {
  Move         r16, r3
  Less         r17, r16, r6
  JumpIfFalse  r17, L2
  // sum = sum + a[i][k] * b[k][j]
  Index        r18, r0, r9
  Index        r19, r18, r16
  Index        r20, r1, r16
  Index        r21, r20, r13
  Mul          r22, r19, r21
  Add          r15, r15, r22
  // for k in 0..p {
  Const        r24, 1
  Add          r16, r16, r24
L2:
  // row = row + [sum]
  MakeList     r27, 1, r26
  Add          r12, r12, r27
  // for j in 0..m {
  Const        r29, 1
  Add          r13, r13, r29
  Jump         L3
L1:
  // result = result + [row]
  Move         r31, r12
  MakeList     r32, 1, r31
  Add          r8, r8, r32
  // for i in 0..n {
  Const        r34, 1
  Add          r9, r9, r34
  Jump         L4
L0:
  // return result
  Return       r8
