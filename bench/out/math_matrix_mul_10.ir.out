func main (regs=54)
  // let size = 10
  Const        r0, 10
  Move         r0, r0
  SetGlobal    0,0,0,0
  // let repeat = 10
  Const        r0, 10
  Move         r1, r0
  SetGlobal    1,1,0,0
  // var a: list<list<int>> = []
  Const        r1, []
  Move         r2, r1
  SetGlobal    2,2,0,0
  // for i in 0..size {
  Const        r2, 0
  Const        r0, 10
  Move         r3, r2
L3:
  LessInt      r4, r3, r0
  JumpIfFalse  r4, L0
  // var row: list<int> = []
  Const        r1, []
  Move         r5, r1
  // for j in 0..size {
  Const        r2, 0
  Const        r0, 10
  Move         r6, r2
L2:
  LessInt      r7, r6, r0
  JumpIfFalse  r7, L1
  // row = row + [i + j]
  AddInt       r9, r3, r6
  Move         r8, r9
  MakeList     r10, 1, r8
  Add          r11, r5, r10
  Move         r5, r11
  // for j in 0..size {
  Const        r12, 1
  AddInt       r13, r6, r12
  Move         r6, r13
  Jump         L2
L1:
  // a = a + [row]
  Move         r14, r5
  MakeList     r15, 1, r14
  Add          r16, r2, r15
  Move         r2, r16
  SetGlobal    2,2,0,0
  // for i in 0..size {
  Const        r17, 1
  AddInt       r18, r3, r17
  Move         r3, r18
  Jump         L3
L0:
  // var b: list<list<int>> = []
  Const        r1, []
  Move         r3, r1
  SetGlobal    3,3,0,0
  // for i in 0..size {
  Const        r2, 0
  Const        r0, 10
  Move         r3, r2
L7:
  LessInt      r19, r3, r0
  JumpIfFalse  r19, L4
  // var row: list<int> = []
  Const        r1, []
  Move         r20, r1
  // for j in 0..size {
  Const        r2, 0
  Const        r0, 10
  Move         r21, r2
L6:
  LessInt      r22, r21, r0
  JumpIfFalse  r22, L5
  // row = row + [i * j]
  MulInt       r24, r3, r21
  Move         r23, r24
  MakeList     r25, 1, r23
  Add          r26, r20, r25
  Move         r20, r26
  // for j in 0..size {
  Const        r27, 1
  AddInt       r28, r21, r27
  Move         r21, r28
  Jump         L6
L5:
  // b = b + [row]
  Move         r29, r20
  MakeList     r30, 1, r29
  Add          r31, r3, r30
  Move         r3, r31
  SetGlobal    3,3,0,0
  // for i in 0..size {
  Const        r32, 1
  AddInt       r33, r3, r32
  Move         r3, r33
  Jump         L7
L4:
  // var last: list<list<int>> = []
  Const        r1, []
  Move         r4, r1
  SetGlobal    4,4,0,0
  // let start = now()
  Now          r34
  Move         r5, r34
  SetGlobal    5,5,0,0
  // for i in 0..repeat {
  Const        r2, 0
  Const        r0, 10
  Move         r3, r2
L9:
  LessInt      r35, r3, r0
  JumpIfFalse  r35, L8
  // last = matmul(a, b)
  Move         r36, r2
  Move         r37, r3
  Call2        r38, matmul, r36, r37
  Move         r4, r38
  SetGlobal    4,4,0,0
  // for i in 0..repeat {
  Const        r39, 1
  AddInt       r40, r3, r39
  Move         r3, r40
  Jump         L9
L8:
  // let end = now()
  Now          r41
  Move         r6, r41
  SetGlobal    6,6,0,0
  // let duration = (end - start) / 1000
  SubInt       r42, r6, r5
  Const        r43, 1000
  DivInt       r44, r42, r43
  Move         r7, r44
  SetGlobal    7,7,0,0
  // "duration_us": duration,
  Const        r45, "duration_us"
  // "output": last[0][0], // last[0][0] type any does not support indexing
  Const        r46, "output"
  Const        r2, 0
  Index        r47, r4, r2
  Const        r2, 0
  Index        r48, r47, r2
  // "duration_us": duration,
  Move         r49, r45
  Move         r50, r7
  // "output": last[0][0], // last[0][0] type any does not support indexing
  Move         r51, r46
  Move         r52, r48
  // json({
  MakeMap      r53, 2, r49
  JSON         r53
  Return       r0

  // fun matmul(a: list<list<int>>, b: list<list<int>>): list<list<int>> {
func matmul (regs=46)
  // let n = len(a)
  Len          r10, r0
  Move         r11, r10
  // let m = len(b[0])
  Const        r12, 0
  Index        r13, r1, r12
  Len          r14, r13
  Move         r15, r14
  // let p = len(b)
  Len          r16, r1
  Move         r17, r16
  // var result: list<list<int>> = []
  Const        r18, []
  Move         r19, r18
  // for i in 0..n {
  Const        r12, 0
  Move         r20, r12
L5:
  LessInt      r21, r20, r11
  JumpIfFalse  r21, L0
  // var row: list<int> = []
  Const        r18, []
  Move         r22, r18
  // for j in 0..m {
  Const        r12, 0
  Move         r23, r12
L4:
  LessInt      r24, r23, r15
  JumpIfFalse  r24, L1
  // var sum: int = 0
  Const        r12, 0
  Move         r25, r12
  // for k in 0..p {
  Const        r12, 0
  Move         r26, r12
L3:
  LessInt      r27, r26, r17
  JumpIfFalse  r27, L2
  // sum = sum + a[i][k] * b[k][j]
  Index        r28, r0, r20
  Index        r29, r28, r26
  Index        r30, r1, r26
  Index        r31, r30, r23
  Mul          r32, r29, r31
  Add          r33, r25, r32
  Move         r25, r33
  // for k in 0..p {
  Const        r34, 1
  AddInt       r35, r26, r34
  Move         r26, r35
  Jump         L3
L2:
  // row = row + [sum]
  Move         r36, r25
  MakeList     r37, 1, r36
  Add          r38, r22, r37
  Move         r22, r38
  // for j in 0..m {
  Const        r39, 1
  AddInt       r40, r23, r39
  Move         r23, r40
  Jump         L4
L1:
  // result = result + [row]
  Move         r41, r22
  MakeList     r42, 1, r41
  Add          r43, r19, r42
  Move         r19, r43
  // for i in 0..n {
  Const        r44, 1
  AddInt       r45, r20, r44
  Move         r20, r45
  Jump         L5
L0:
  // return result
  Return       r19
