func main (regs=57)
  // let size = 10
  Const        r0, 10
  // var a: list<list<int>> = []
  Const        r1, []
  Move         r2, r1
  // for i in 0..size {
  Const        r3, 0
  Move         r4, r3
L3:
  Less         r5, r4, r0
  JumpIfFalse  r5, L0
  // var row: list<int> = []
  Move         r6, r1
  // for j in 0..size {
  Move         r7, r3
L2:
  Less         r8, r7, r0
  JumpIfFalse  r8, L1
  // row = row + [i + j]
  AddInt       r10, r4, r7
  MakeList     r11, 1, r10
  Add          r6, r6, r11
  // for j in 0..size {
  Const        r13, 1
  Add          r7, r7, r13
  Jump         L2
L1:
  // a = a + [row]
  Move         r15, r6
  MakeList     r16, 1, r15
  Add          r2, r2, r16
  // for i in 0..size {
  Const        r18, 1
  Add          r4, r4, r18
  Jump         L3
L0:
  // var b: list<list<int>> = []
  Move         r20, r1
  // for i in 0..size {
  Move         r4, r3
L7:
  Less         r21, r4, r0
  JumpIfFalse  r21, L4
  // var row: list<int> = []
  Move         r22, r1
  // for j in 0..size {
  Move         r23, r3
L6:
  Less         r24, r23, r0
  JumpIfFalse  r24, L5
  // row = row + [i * j]
  MulInt       r26, r4, r23
  MakeList     r27, 1, r26
  Add          r22, r22, r27
  // for j in 0..size {
  Const        r29, 1
  Add          r23, r23, r29
  Jump         L6
L5:
  // b = b + [row]
  Move         r31, r22
  MakeList     r32, 1, r31
  Add          r20, r20, r32
  // for i in 0..size {
  Const        r34, 1
  Add          r4, r4, r34
  Jump         L7
L4:
  // var last: list<list<int>> = []
  Move         r36, r1
  // let start = now()
  Now          r37
  // for i in 0..repeat {
  Move         r4, r3
L9:
  Less         r38, r4, r0
  JumpIfFalse  r38, L8
  // last = matmul(a, b)
  Call2        r36, matmul, r2, r20
  // for i in 0..repeat {
  Const        r42, 1
  Add          r4, r4, r42
  Jump         L9
L8:
  // let end = now()
  Now          r44
  // let duration = (end - start) / 1000
  SubInt       r45, r44, r37
  Const        r46, 1000
  DivInt       r47, r45, r46
  // "duration_us": duration,
  Const        r48, "duration_us"
  // "output": last[0][0], // last[0][0] type any does not support indexing
  Const        r49, "output"
  Index        r50, r36, r3
  Index        r51, r50, r3
  // "duration_us": duration,
  Move         r52, r48
  Move         r53, r47
  // "output": last[0][0], // last[0][0] type any does not support indexing
  Move         r54, r49
  Move         r55, r51
  // json({
  MakeMap      r56, 2, r52
  JSON         r56
  Return       r0

  // fun matmul(a: list<list<int>>, b: list<list<int>>): list<list<int>> {
func matmul (regs=35)
  // let n = len(a)
  Len          r2, r0
  // let m = len(b[0])
  Const        r3, 0
  Index        r4, r1, r3
  Len          r5, r4
  // let p = len(b)
  Len          r6, r1
  // var result: list<list<int>> = []
  Const        r7, []
  Move         r8, r7
  // for i in 0..n {
  Move         r9, r3
L5:
  Less         r10, r9, r2
  JumpIfFalse  r10, L0
  // var row: list<int> = []
  Move         r11, r7
  // for j in 0..m {
  Move         r12, r3
L4:
  Less         r13, r12, r5
  JumpIfFalse  r13, L1
  // var sum: int = 0
  Move         r14, r3
  // for k in 0..p {
  Move         r15, r3
L3:
  Less         r16, r15, r6
  JumpIfFalse  r16, L2
  // sum = sum + a[i][k] * b[k][j]
  Index        r17, r0, r9
  Index        r18, r17, r15
  Index        r19, r1, r15
  Index        r20, r19, r12
  Mul          r21, r18, r20
  Add          r14, r14, r21
  // for k in 0..p {
  Const        r23, 1
  Add          r15, r15, r23
  Jump         L3
L2:
  // row = row + [sum]
  Move         r25, r14
  MakeList     r26, 1, r25
  Add          r11, r11, r26
  // for j in 0..m {
  Const        r28, 1
  Add          r12, r12, r28
  Jump         L4
L1:
  // result = result + [row]
  Move         r30, r11
  MakeList     r31, 1, r30
  Add          r8, r8, r31
  // for i in 0..n {
  Const        r33, 1
  Add          r9, r9, r33
  Jump         L5
L0:
  // return result
  Return       r8
