#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

typedef struct {
  int len;
  int *data;
} list_int;
static list_int list_int_create(int len) {
  list_int l;
  l.len = len;
  l.data = (int *)malloc(sizeof(int) * len);
  return l;
}
typedef struct {
  int len;
  double *data;
} list_float;
static list_float list_float_create(int len) {
  list_float l;
  l.len = len;
  l.data = (double *)malloc(sizeof(double) * len);
  return l;
}
typedef struct {
  int len;
  char **data;
} list_string;
static list_string list_string_create(int len) {
  list_string l;
  l.len = len;
  l.data = (char **)malloc(sizeof(char *) * len);
  return l;
}
typedef struct {
  int len;
  list_int *data;
} list_list_int;
static list_list_int list_list_int_create(int len) {
  list_list_int l;
  l.len = len;
  l.data = (list_int *)malloc(sizeof(list_int) * len);
  return l;
}
static list_int concat_list_int(list_int a, list_int b) {
  list_int r = list_int_create(a.len + b.len);
  for (int i = 0; i < a.len; i++)
    r.data[i] = a.data[i];
  for (int i = 0; i < b.len; i++)
    r.data[a.len + i] = b.data[i];
  return r;
}
static list_list_int concat_list_list_int(list_list_int a, list_list_int b) {
  list_list_int r = list_list_int_create(a.len + b.len);
  for (int i = 0; i < a.len; i++)
    r.data[i] = a.data[i];
  for (int i = 0; i < b.len; i++)
    r.data[a.len + i] = b.data[i];
  return r;
}
static long long _now() {
  struct timespec ts;
  clock_gettime(CLOCK_REALTIME, &ts);
  return (long long)ts.tv_sec * 1000000000LL + ts.tv_nsec;
}
static void _json_int(int v) { printf("%d", v); }
static void _json_float(double v) { printf("%g", v); }
static void _json_string(char *s) { printf("\"%s\"", s); }
static void _json_list_int(list_int v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_int(v.data[i]);
  }
  printf("]");
}
static void _json_list_float(list_float v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_float(v.data[i]);
  }
  printf("]");
}
static void _json_list_string(list_string v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_string(v.data[i]);
  }
  printf("]");
}
static void _json_list_list_int(list_list_int v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_list_int(v.data[i]);
  }
  printf("]");
}
static int size = 20;
static int repeat = 10;

list_list_int matmul(list_list_int a, list_list_int b) {
  int n = a.len;
  int m = b.data[0].len;
  int p = b.len;
  list_list_int _t1 = list_list_int_create(0);
  list_list_int result = _t1;
  for (int i = 0; i < n; i++) {
    list_int _t2 = list_int_create(0);
    list_int row = _t2;
    for (int j = 0; j < m; j++) {
      int sum = 0;
      for (int k = 0; k < p; k++) {
        sum = sum + a.data[i].data[k] * b.data[k].data[j];
      }
      list_int _t3 = list_int_create(1);
      _t3.data[0] = sum;
      list_int _t4 = concat_list_int(row, _t3);
      row = _t4;
    }
    list_list_int _t5 = list_list_int_create(1);
    _t5.data[0] = row;
    list_list_int _t6 = concat_list_list_int(result, _t5);
    result = _t6;
  }
  return result;
}

int main() {
  list_list_int _t7 = list_list_int_create(0);
  list_list_int a = _t7;
  for (int i = 0; i < size; i++) {
    list_int _t8 = list_int_create(0);
    list_int row = _t8;
    for (int j = 0; j < size; j++) {
      list_int _t9 = list_int_create(1);
      _t9.data[0] = i + j;
      list_int _t10 = concat_list_int(row, _t9);
      row = _t10;
    }
    list_list_int _t11 = list_list_int_create(1);
    _t11.data[0] = row;
    list_list_int _t12 = concat_list_list_int(a, _t11);
    a = _t12;
  }
  list_list_int _t13 = list_list_int_create(0);
  list_list_int b = _t13;
  for (int i = 0; i < size; i++) {
    list_int _t14 = list_int_create(0);
    list_int row = _t14;
    for (int j = 0; j < size; j++) {
      list_int _t15 = list_int_create(1);
      _t15.data[0] = i * j;
      list_int _t16 = concat_list_int(row, _t15);
      row = _t16;
    }
    list_list_int _t17 = list_list_int_create(1);
    _t17.data[0] = row;
    list_list_int _t18 = concat_list_list_int(b, _t17);
    b = _t18;
  }
  list_list_int _t19 = list_list_int_create(0);
  list_list_int last = _t19;
  long long start = _now();
  for (int i = 0; i < repeat; i++) {
    last = matmul(a, b);
  }
  long long end = _now();
  double duration = (end - start) / 1000;
  printf("{");
  _json_string("duration_us");
  printf(":");
  _json_float(duration);
  printf(",");
  _json_string("output");
  printf(":");
  _json_int(last.data[0].data[0]);
  printf("}\n");
  return 0;
}
