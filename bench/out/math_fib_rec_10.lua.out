function __add(a, b)
    if type(a) == 'table' and type(b) == 'table' then
        local out = {}
        for i = 1, #a do out[#out+1] = a[i] end
        for i = 1, #b do out[#out+1] = b[i] end
        return out
    elseif type(a) == 'string' or type(b) == 'string' then
        return tostring(a) .. tostring(b)
    else
        return a + b
    end
end
function __div(a, b)
    if math.type and math.type(a) == 'integer' and math.type(b) == 'integer' then
        return a // b
    end
    return a / b
end
function __json(v)
    local ok, json = pcall(require, 'json')
    if not ok then error('json library not found') end
    print(json.encode(v))
end
function fib(n)
	if (n <= 1) then
		return n
	end
	return __add(fib((n - 1)), fib((n - 2)))
end

local n = 10
local start = os.time()*1000000000
local result = fib(n)
local duration = __div(((os.time()*1000000000 - start)), 1000)
__json({["duration_us"]=duration, ["output"]=result})
