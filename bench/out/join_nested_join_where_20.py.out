# Generated by Mochi Python compiler
from __future__ import annotations

import json
import time

left = []
right = []
repeat = 100
last = 0
start = time.time_ns()
duration = None


def main():
    global left
    left = []
    for i in range(0, 20):
        left = append(left, {"id": i, "val": i})
    global right
    right = []
    for i in range(0, 20):
        right = append(right, {"id": i, "info": (i * 2)})
    global repeat
    repeat = 100
    global last
    last = 0
    global start
    start = time.time_ns()
    for i in range(0, repeat):
        res = _query(
            left,
            [{"items": right, "on": lambda l, r: ((l.id == r.id))}],
            {
                "select": lambda l, r: (l.val + r.info),
                "where": lambda l, r: ((((r.info % 2) == 0) and True)),
            },
        )
        last = len(res)
    global duration
    duration = int(((time.time_ns() - start)) / 1000)
    print(
        json.dumps({"duration_us": duration, "output": last}, default=lambda o: vars(o))
    )


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):
        items.sort(key=lambda it: opts["sortKey"](*it))
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


if __name__ == "__main__":
    main()
