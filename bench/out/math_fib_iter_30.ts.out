// Generated by Mochi TypeScript compiler

function fib(n: number): number {
  let a: number = 0;
  let b: number = 1;
  for (let i: number = 0; i < n; i++) {
    let tmp: number = a + b;
    a = b;
    b = tmp;
  }
  return a;
}

function main(): void {
  let n: number = 30;
  let repeat: number = 1000;
  let last: number = 0;
  let start: number = performance.now() * 1000000;
  for (let i: number = 0; i < repeat; i++) {
    last = fib(n);
  }
  let duration: number = Math.trunc(
    (performance.now() * 1000000 - start) / 1000,
  );
  console.log(
    _json({
      duration_us: duration,
      output: last,
    }),
  );
}
function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
