func main (regs=21)
  // let n = 10
  Const        r0, 10
  // let repeat = 1000
  Const        r1, 1000
  // var last = 0
  Const        r2, 0
  Move         r3, r2
  // let start = now()
  Now          r4
  // for i in 0..repeat {
  Const        r2, 0
  Const        r1, 1000
  Move         r5, r2
L1:
  LessInt      r6, r5, r1
  JumpIfFalse  r6, L0
  // last = fib(n)
  Const        r0, 10
  Move         r7, r0
  Call         r8, fib, r7
  Move         r3, r8
  // for i in 0..repeat {
  Const        r9, 1
  AddInt       r10, r5, r9
  Move         r5, r10
  Jump         L1
L0:
  // let duration = (now() - start) / 1000
  Now          r11
  SubInt       r12, r11, r4
  Const        r1, 1000
  DivInt       r13, r12, r1
  // "duration_us": duration,
  Const        r14, "duration_us"
  // "output": last,
  Const        r15, "output"
  // "duration_us": duration,
  Move         r16, r14
  Move         r17, r13
  // "output": last,
  Move         r18, r15
  Move         r19, r3
  // json({
  MakeMap      r20, 2, r16
  JSON         r20
  Return       r0

  // fun fib(n: int): int {
func fib (regs=10)
  // var a = 0
  Const        r1, 0
  Move         r2, r1
  // var b = 1
  Const        r3, 1
  Move         r4, r3
  // for i in 0..n {
  Const        r1, 0
  Move         r5, r1
L1:
  LessInt      r6, r5, r0
  JumpIfFalse  r6, L0
  // let tmp = a + b
  AddInt       r7, r2, r4
  // a = b
  Move         r2, r4
  // b = tmp
  Move         r4, r7
  // for i in 0..n {
  Const        r8, 1
  AddInt       r9, r5, r8
  Move         r5, r9
  Jump         L1
L0:
  // return a
  Return       r2
