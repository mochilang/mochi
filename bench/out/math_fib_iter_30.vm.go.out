package main
import (
	"encoding/json"
	"os"
	"mochi/runtime/vm"
)
var progData = []byte(`{"Funcs":[{"Code":[{"Op":0,"A":0,"B":0,"C":0,"D":0,"Val":{"Tag":1,"Int":30,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":13},{"Op":1,"A":1,"B":0,"C":0,"D":0,"Val":{"Tag":0,"Int":0,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":13},{"Op":1,"A":11,"B":1,"C":0,"D":0,"Val":{"Tag":0,"Int":0,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":19},{"Op":24,"A":12,"B":1,"C":1,"D":11,"Val":{"Tag":0,"Int":0,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":19},{"Op":12,"A":2,"B":0,"C":0,"D":0,"Val":{"Tag":0,"Int":0,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":18},{"Op":29,"A":15,"B":0,"C":0,"D":0,"Val":{"Tag":0,"Int":0,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":21},{"Op":50,"A":16,"B":15,"C":6,"D":0,"Val":{"Tag":0,"Int":0,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":21},{"Op":0,"A":17,"B":0,"C":0,"D":0,"Val":{"Tag":1,"Int":1000,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":21},{"Op":54,"A":18,"B":16,"C":17,"D":0,"Val":{"Tag":0,"Int":0,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":21},{"Op":0,"A":20,"B":0,"C":0,"D":0,"Val":{"Tag":3,"Int":0,"Float":0,"Str":"duration_us","Bool":false,"List":null,"Map":null,"Func":null},"Line":24},{"Op":0,"A":21,"B":0,"C":0,"D":0,"Val":{"Tag":3,"Int":0,"Float":0,"Str":"output","Bool":false,"List":null,"Map":null,"Func":null},"Line":25},{"Op":1,"A":22,"B":20,"C":0,"D":0,"Val":{"Tag":0,"Int":0,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":24},{"Op":1,"A":23,"B":18,"C":0,"D":0,"Val":{"Tag":0,"Int":0,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":24},{"Op":1,"A":24,"B":21,"C":0,"D":0,"Val":{"Tag":0,"Int":0,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":25},{"Op":1,"A":25,"B":12,"C":0,"D":0,"Val":{"Tag":0,"Int":0,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":25},{"Op":19,"A":26,"B":2,"C":22,"D":0,"Val":{"Tag":0,"Int":0,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":23},{"Op":30,"A":26,"B":0,"C":0,"D":0,"Val":{"Tag":0,"Int":0,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":23},{"Op":26,"A":0,"B":0,"C":0,"D":0,"Val":{"Tag":0,"Int":0,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":0}],"NumRegs":27,"NumParams":0,"Name":"main","Line":0},{"Code":[{"Op":0,"A":3,"B":0,"C":0,"D":0,"Val":{"Tag":1,"Int":1,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":3},{"Op":0,"A":5,"B":0,"C":0,"D":0,"Val":{"Tag":1,"Int":0,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":4},{"Op":9,"A":7,"B":5,"C":0,"D":0,"Val":{"Tag":0,"Int":0,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":4},{"Op":13,"A":7,"B":5,"C":0,"D":0,"Val":{"Tag":0,"Int":0,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":4},{"Op":12,"A":4,"B":0,"C":0,"D":0,"Val":{"Tag":0,"Int":0,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":4},{"Op":26,"A":3,"B":0,"C":0,"D":0,"Val":{"Tag":0,"Int":0,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":9},{"Op":26,"A":0,"B":0,"C":0,"D":0,"Val":{"Tag":0,"Int":0,"Float":0,"Str":"","Bool":false,"List":null,"Map":null,"Func":null},"Line":0}],"NumRegs":12,"NumParams":1,"Name":"fib","Line":1}],"Types":null,"file":"bench/out/tmp.mochi","source":["fun fib(n: int): int {","  var a = 0","  var b = 1","  for i in 0..n {","    let tmp = a + b","    a = b","    b = tmp","  }","  return a","}","","// let n = 100","let n = 30","let repeat = 1000","var last = 0","","let start = now()","for i in 0..repeat {","  last = fib(n)","}","let duration = (now() - start) / 1000","","json({","  \"duration_us\": duration,","  \"output\": last,","})",""]}`)
func main() {
	var p vm.Program
	if err := json.Unmarshal(progData, &p); err != nil { panic(err) }
	m := vm.New(&p, os.Stdout)
	if err := m.Run(); err != nil { panic(err) }
}
