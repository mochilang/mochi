// Generated by Mochi TypeScript compiler

let items: Record<string, any>[];
let result: any[];

function main(): void {
  items = [
    {
      "n": 1,
      "v": "a",
    },
    {
      "n": 1,
      "v": "b",
    },
    {
      "n": 2,
      "v": "c",
    },
  ];
  result = (() => {
    const _src = items;
    var _items = [];
    for (const i of _src) {
      _items.push(i);
    }
    let _pairs = _items.map((it) => {
      const i = it;
      return { item: it, key: i.n };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const i of _items) {
      _res.push(i.v);
    }
    return _res;
  })();
  console.log(result);
}
main();
