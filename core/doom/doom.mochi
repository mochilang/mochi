package doom

// Simple ASCII ray-casting renderer written in pure Mochi.
// No external dependencies or FFI calls are used.

export type Player { x: float, y: float, angle: float }

export let PI: float = 3.141592653589793
let TWO_PI: float = 6.283185307179586

fun _mod(x: float, m: float): float {
  return x - float(int(x / m)) * m
}

fun _sin(x: float): float {
  let y = _mod(x + PI, TWO_PI) - PI
  let y2 = y * y
  let y3 = y2 * y
  let y5 = y3 * y2
  let y7 = y5 * y2
  return y - y3/6.0 + y5/120.0 - y7/5040.0
}

fun _cos(x: float): float {
  let y = _mod(x + PI, TWO_PI) - PI
  let y2 = y * y
  let y4 = y2 * y2
  let y6 = y4 * y2
  return 1.0 - y2/2.0 + y4/24.0 - y6/720.0
}

fun _castRay(map: list<string>, px: float, py: float, ang: float, maxDist: float, step: float): float {
  var dist = step
  let rows = len(map)
  let cols = len(map[0])
  var hit = false
  while dist < maxDist && !hit {
    let rx = px + _cos(ang) * dist
    let ry = py + _sin(ang) * dist
    if int(ry) < 0 || int(ry) >= rows || int(rx) < 0 || int(rx) >= cols {
      hit = true
      dist = maxDist
      break
    }
    if map[int(ry)][int(rx)] == '#' {
      hit = true
    } else {
      dist = dist + step
    }
  }
  return dist
}

export fun render(map: list<string>, p: Player, width: int, height: int): list<string> {
  let fov = PI / 3.0 // 60 degrees
  let maxDist = 20.0
  var cols: list<int> = []
  var i = 0
  while i < width {
    let ang = p.angle + (float(i)/float(width) - 0.5) * fov
    let d = _castRay(map, p.x, p.y, ang, maxDist, 0.05)
    var h = int(float(height) / d)
    if h > height { h = height }
    cols = cols + [h]
    i = i + 1
  }

  var screen: list<string> = []
  var y = 0
  while y < height {
    var line = ""
    var x = 0
    while x < width {
      let h = cols[x]
      let top = (height - h) / 2
      let bottom = (height + h) / 2
      var ch = ' '
      if y >= bottom { ch = '.' }
      if y >= top && y < bottom { ch = '#' }
      line = line + ch
      x = x + 1
    }
    screen = screen + [line]
    y = y + 1
  }
  return screen
}
