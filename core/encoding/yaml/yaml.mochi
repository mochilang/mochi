package yaml

// Marshal encodes a value into a simple YAML string.
// This implementation supports lists of maps and basic scalar values.
export fun marshal(v: any): string {
  return _encode(v, 0)
}

fun _indent(n: int): string {
  var out = ""
  var i = 0
  while i < n {
    out = out + " "
    i = i + 1
  }
  return out
}

fun escapeString(s: string): string {
  var out = ""
  var i = 0
  while i < len(s) {
    let ch = s[i]
    if ch == '"' || ch == '\\' {
      out = out + "\\" + ch
    } else if ch == '\n' {
      out = out + "\\n"
    } else if ch == '\r' {
      out = out + "\\r"
    } else if ch == '\t' {
      out = out + "\\t"
    } else {
      out = out + ch
    }
    i = i + 1
  }
  return out
}

fun encodeScalar(v: any): string {
  if v == null { return "null" }
  if v is bool { if v { return "true" } return "false" }
  if v is int { return str(v) }
  if v is float { return str(v) }
  if v is string { return "\"" + escapeString(v) + "\"" }
  return "\"" + escapeString(str(v)) + "\""
}

fun _encode(v: any, indent: int): string {
  if v is list<any> {
    var out = ""
    for item in v {
      out = out + _indent(indent) + "-"
      if item is list<any> || item is map<string, any> {
        out = out + "\n" + _encode(item, indent + 2)
      } else {
        out = out + " " + encodeScalar(item) + "\n"
      }
    }
    return out
  }
  if v is map<string, any> {
    var out = ""
    let ks = keys(v)
    for k in ks {
      let val = v[k]
      out = out + _indent(indent) + k + ":"
      if val is list<any> || val is map<string, any> {
        out = out + "\n" + _encode(val, indent + 2)
      } else {
        out = out + " " + encodeScalar(val) + "\n"
      }
    }
    return out
  }
  return encodeScalar(v)
}

// Unmarshal parses a simple YAML string into a value.
// Only a small subset of YAML is supported.
export fun unmarshal(text: string): any {
  let lines = _splitLines(text)
  var rows: list<map<string, any>> = []
  var current: map<string, any> = {}

  fun finish() {
    if count(keys(current)) > 0 {
      rows = rows + [current]
      current = {}
    }
  }

  for line in lines {
    let l = _trim(line)
    if len(l) == 0 { continue }
    if len(l) >= 2 && l[0] == '-' && l[1] == ' ' {
      finish()
      let idx = _indexOfColon(l, 2)
      if idx >= 0 {
        let k = _trim(l[2:idx])
        let v = _trim(l[idx+1:len(l)])
        current[k] = _parseValue(v)
      }
    } else if _indexOfColon(l, 0) >= 0 {
      let idx = _indexOfColon(l, 0)
      let k = _trim(l[0:idx])
      let v = _trim(l[idx+1:len(l)])
      current[k] = _parseValue(v)
    }
  }
  finish()
  return rows
}

fun _splitLines(s: string): list<string> {
  var lines: list<string> = []
  var i = 0
  var start = 0
  while i < len(s) {
    if s[i] == '\n' {
      lines = lines + [s[start:i]]
      start = i + 1
    }
    i = i + 1
  }
  if start < len(s) { lines = lines + [s[start:len(s)]] }
  return lines
}

fun _trim(s: string): string {
  var start = 0
  while start < len(s) {
    let ch = s[start]
    if ch == ' ' || ch == '\t' { start = start + 1 } else { break }
  }
  var end = len(s)
  while end > start {
    let ch = s[end-1]
    if ch == ' ' || ch == '\t' || ch == '\r' { end = end - 1 } else { break }
  }
  return s[start:end]
}

fun _indexOfColon(s: string, start: int): int {
  var i = start
  while i < len(s) {
    if s[i] == ':' { return i }
    i = i + 1
  }
  return -1
}

fun _parseInt(str: string): int {
  var i = 0
  var neg = false
  if len(str) > 0 && str[0] == '-' {
    neg = true
    i = 1
  }
  var n = 0
  let digits = {
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
  }
  while i < len(str) {
    n = n * 10 + digits[str[i]]
    i = i + 1
  }
  if neg { n = -n }
  return n
}

fun _parseFloat(str: string): float {
  var i = 0
  var neg = false
  if len(str) > 0 && str[0] == '-' {
    neg = true
    i = 1
  }
  var intPart = 0
  while i < len(str) && str[i] != '.' {
    intPart = intPart * 10 + _parseInt(str[i:i+1])
    i = i + 1
  }
  var frac = 0.0
  var scale = 0.1
  if i < len(str) && str[i] == '.' {
    i = i + 1
    while i < len(str) {
      frac = frac + float(_parseInt(str[i:i+1])) * scale
      scale = scale / 10.0
      i = i + 1
    }
  }
  var res = float(intPart) + frac
  if neg { res = -res }
  return res
}

fun _parseValue(s: string): any {
  if len(s) == 0 { return "" }
  if (s[0] == '"' && len(s) >= 2 && s[len(s)-1] == '"') {
    return s[1:len(s)-1]
  }
  var i = 0
  var hasDot = false
  var num = true
  if s[0] == '-' { i = 1 }
  while i < len(s) {
    let ch = s[i]
    if ch == '.' { hasDot = true }
    else if ch < '0' || ch > '9' { num = false; break }
    i = i + 1
  }
  if num {
    if hasDot { return _parseFloat(s) }
    return _parseInt(s)
  }
  return s
}

// simple tests

test "yaml round trip" {
  let yamlData = "- name: Alice\n  age: 30\n  email: alice@example.com\n- name: Bob\n  age: 15\n  email: bob@example.com"
  let data = unmarshal(yamlData)
  let out = marshal(data)
  let data2 = unmarshal(out)
  expect data2 == data
}


// additional tests covering various YAML features

test "yaml scalar types" {
  let text = "- int: 5\n  float: 3.14\n  bool: true\n  str: \"hi\""
  let rows = unmarshal(text)
  expect count(rows) == 1
  let r = rows[0]
  expect r["int"] == 5
  expect r["float"] == 3.14
  expect r["bool"] == true
  expect r["str"] == "hi"
}

test "yaml null value" {
  let rows = unmarshal("- key: null")
  expect rows[0]["key"] == null
}

test "yaml negative numbers" {
  let rows = unmarshal("- a: -10\n  b: -2.5")
  let r = rows[0]
  expect r["a"] == -10
  expect r["b"] == -2.5
}

test "yaml sequence of objects" {
  let text = "- name: A\n  age: 20\n- name: B\n  age: 25"
  let rows = unmarshal(text)
  expect count(rows) == 2
  expect rows[0]["name"] == "A"
  expect rows[1]["age"] == 25
}

