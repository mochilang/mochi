package bmon

// Marshal encodes a value into a BMON string.
export fun marshal(v: any): string {
  return _encode(v)
}

fun _encode(v: any): string {
  if v == null {
    return "_\r\n"
  }
  if v is string {
    return "+" + v + "\r\n"
  }
  if v is bool {
    if v { return "#t\r\n" }
    return "#f\r\n"
  }
  if v is int {
    return ":" + str(v) + "\r\n"
  }
  if v is float {
    return "," + str(v) + "\r\n"
  }
  if v is list<any> {
    var out = "*" + str(count(v)) + "\r\n"
    for item in v {
      out = out + _encode(item)
    }
    return out
  }
  if v is map<string, any> {
    var ks = keys(v)
    var out = "%" + str(count(ks)) + "\r\n"
    for k in ks {
      out = out + _encode(k) + _encode(v[k])
    }
    return out
  }
  // fall back to string representation
  return "+" + str(v) + "\r\n"
}

// Unmarshal decodes a BMON string back into a value.
export fun unmarshal(s: string): any {
  var idx = 0
  fun readLine(): string {
    var j = idx
    while j + 1 < len(s) {
      if s[j] == '\r' && s[j+1] == '\n' {
        let line = s[idx:j]
        idx = j + 2
        return line
      }
      j = j + 1
    }
    let line = s[idx:len(s)]
    idx = len(s)
    return line
  }
  fun expectCRLF() {
    if idx + 1 <= len(s) && s[idx] == '\r' && s[idx+1] == '\n' {
      idx = idx + 2
    }
  }
  fun parseIntStr(str: string): int {
    var i = 0
    var neg = false
    if len(str) > 0 && str[0] == '-' {
      neg = true
      i = 1
    }
    var n = 0
    let digits = {
      '0': 0,
      '1': 1,
      '2': 2,
      '3': 3,
      '4': 4,
      '5': 5,
      '6': 6,
      '7': 7,
      '8': 8,
      '9': 9,
    }
    while i < len(str) {
      n = n * 10 + digits[str[i]]
      i = i + 1
    }
    if neg { n = -n }
    return n
  }
  fun parseFloatStr(str: string): float {
    var i = 0
    var neg = false
    if len(str) > 0 && str[0] == '-' {
      neg = true
      i = 1
    }
    var intPart = 0
    while i < len(str) && str[i] != '.' {
      intPart = intPart * 10 + parseIntStr(str[i:i+1])
      i = i + 1
    }
    var frac = 0.0
    var scale = 0.1
    if i < len(str) && str[i] == '.' {
      i = i + 1
      while i < len(str) {
        frac = frac + float(parseIntStr(str[i:i+1])) * scale
        scale = scale / 10.0
        i = i + 1
      }
    }
    var res = float(intPart) + frac
    if neg { res = -res }
    return res
  }
  fun decode(): any {
    if idx >= len(s) { return null }
    let prefix = s[idx]
    idx = idx + 1
    if prefix == '+' {
      return readLine()
    }
    if prefix == '-' {
      return readLine()
    }
    if prefix == ':' {
      return parseIntStr(readLine())
    }
    if prefix == ',' {
      return parseFloatStr(readLine())
    }
    if prefix == '#' {
      let line = readLine()
      return line == "t"
    }
    if prefix == '_' {
      expectCRLF()
      return null
    }
    if prefix == '*' {
      let n = parseIntStr(readLine())
      var arr: list<any> = []
      var i = 0
      while i < n {
        arr = arr + [decode()]
        i = i + 1
      }
      return arr
    }
    if prefix == '%' {
      let n = parseIntStr(readLine())
      var m: map<string, any> = {}
      var i = 0
      while i < n {
        let k = decode() as string
        let v = decode()
        m[k] = v
        i = i + 1
      }
      return m
    }
    if prefix == '@' {
      return readLine()
    }
    return null
  }
  return decode()
}

test "bmon list" {
  let v = ["ok", 42, 3.14, true, null]
  let data = marshal(v)
  let out = unmarshal(data)
  expect out == v
}

test "bmon map" {
  let m = {"a": 1, "b": "two"}
  let data = marshal(m)
  let out = unmarshal(data)
  expect out == m
}
