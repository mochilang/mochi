package mon

// Marshal encodes a value into a MON string (similar to JSON)
export fun marshal(v: any): string {
  return _encode(v)
}

fun escapeString(s: string): string {
  var out = ""
  var i = 0
  while i < len(s) {
    let ch = s[i]
    if ch == '"' || ch == '\\' {
      out = out + "\\" + ch
    } else if ch == '\n' {
      out = out + "\\n"
    } else if ch == '\r' {
      out = out + "\\r"
    } else if ch == '\t' {
      out = out + "\\t"
    } else {
      out = out + ch
    }
    i = i + 1
  }
  return out
}

fun _encode(v: any): string {
  if v == null {
    return "null"
  }
  if v is string {
    return "\"" + escapeString(v) + "\""
  }
  if v is bool {
    if v { return "true" }
    return "false"
  }
  if v is int {
    return str(v)
  }
  if v is float {
    return str(v)
  }
  if v is list<any> {
    var parts: list<string> = []
    for item in v {
      parts = parts + [_encode(item)]
    }
    var body = ""
    var i = 0
    while i < len(parts) {
      if i > 0 { body = body + "," }
      body = body + parts[i]
      i = i + 1
    }
    return "[" + body + "]"
  }
  if v is map<string, any> {
    var ks = keys(v)
    var parts: list<string> = []
    for k in ks {
      parts = parts + ["\"" + escapeString(k) + "\":" + _encode(v[k])]
    }
    var body = ""
    var i = 0
    while i < len(parts) {
      if i > 0 { body = body + "," }
      body = body + parts[i]
      i = i + 1
    }
    return "{" + body + "}"
  }
  // fallback to string representation
  return "\"" + escapeString(str(v)) + "\""
}

// Unmarshal parses a MON string into a value
export fun unmarshal(s: string): any {
  var idx = 0

  fun skipSpaces() {
    while idx < len(s) {
      let ch = s[idx]
      if ch == ' ' || ch == '\n' || ch == '\r' || ch == '\t' {
        idx = idx + 1
      } else {
        break
      }
    }
  }

  fun parseIntStr(str: string): int {
    var i = 0
    var neg = false
    if len(str) > 0 && str[0] == '-' {
      neg = true
      i = 1
    }
    var n = 0
    let digits = {
      '0': 0,
      '1': 1,
      '2': 2,
      '3': 3,
      '4': 4,
      '5': 5,
      '6': 6,
      '7': 7,
      '8': 8,
      '9': 9,
    }
    while i < len(str) {
      n = n * 10 + digits[str[i]]
      i = i + 1
    }
    if neg { n = -n }
    return n
  }

  fun parseFloatStr(str: string): float {
    var i = 0
    var neg = false
    if len(str) > 0 && str[0] == '-' {
      neg = true
      i = 1
    }
    var intPart = 0
    while i < len(str) && str[i] != '.' {
      intPart = intPart * 10 + parseIntStr(str[i:i+1])
      i = i + 1
    }
    var frac = 0.0
    var scale = 0.1
    if i < len(str) && str[i] == '.' {
      i = i + 1
      while i < len(str) {
        frac = frac + float(parseIntStr(str[i:i+1])) * scale
        scale = scale / 10.0
        i = i + 1
      }
    }
    var res = float(intPart) + frac
    if neg { res = -res }
    return res
  }

  fun parseString(): string {
    idx = idx + 1 // skip opening quote
    var out = ""
    while idx < len(s) && s[idx] != '"' {
      let ch = s[idx]
      if ch == '\\' {
        idx = idx + 1
        if idx >= len(s) { break }
        let esc = s[idx]
        if esc == 'n' { out = out + '\n' }
        else if esc == 'r' { out = out + '\r' }
        else if esc == 't' { out = out + '\t' }
        else { out = out + esc }
      } else {
        out = out + ch
      }
      idx = idx + 1
    }
    idx = idx + 1 // closing quote
    return out
  }

  fun parseNumber(): any {
    var start = idx
    var hasDot = false
    if s[idx] == '-' {
      idx = idx + 1
    }
    while idx < len(s) {
      let ch = s[idx]
      if ch >= '0' && ch <= '9' {
        idx = idx + 1
      } else if ch == '.' {
        hasDot = true
        idx = idx + 1
      } else {
        break
      }
    }
    let numStr = s[start:idx]
    if hasDot {
      return parseFloatStr(numStr)
    }
    return parseIntStr(numStr)
  }

  fun parseArray(): list<any> {
    idx = idx + 1 // skip [
    var arr: list<any> = []
    skipSpaces()
    if idx < len(s) && s[idx] == ']' {
      idx = idx + 1
      return arr
    }
    while idx < len(s) {
      arr = arr + [parseValue()]
      skipSpaces()
      if idx < len(s) && s[idx] == ',' {
        idx = idx + 1
        skipSpaces()
      } else {
        break
      }
    }
    if idx < len(s) && s[idx] == ']' {
      idx = idx + 1
    }
    return arr
  }

  fun parseObject(): map<string, any> {
    idx = idx + 1 // skip {
    var m: map<string, any> = {}
    skipSpaces()
    if idx < len(s) && s[idx] == '}' {
      idx = idx + 1
      return m
    }
    while idx < len(s) {
      let key = parseString()
      skipSpaces()
      if idx < len(s) && s[idx] == ':' {
        idx = idx + 1
      }
      skipSpaces()
      let val = parseValue()
      m[key] = val
      skipSpaces()
      if idx < len(s) && s[idx] == ',' {
        idx = idx + 1
        skipSpaces()
      } else {
        break
      }
    }
    if idx < len(s) && s[idx] == '}' {
      idx = idx + 1
    }
    return m
  }

  fun parseValue(): any {
    skipSpaces()
    if idx >= len(s) { return null }
    let ch = s[idx]
    if ch == '"' { return parseString() }
    if ch == '[' { return parseArray() }
    if ch == '{' { return parseObject() }
    if ch == 't' && idx + 4 <= len(s) && s[idx:idx+4] == "true" {
      idx = idx + 4
      return true
    }
    if ch == 'f' && idx + 5 <= len(s) && s[idx:idx+5] == "false" {
      idx = idx + 5
      return false
    }
    if ch == 'n' && idx + 4 <= len(s) && s[idx:idx+4] == "null" {
      idx = idx + 4
      return null
    }
    return parseNumber()
  }

  let v = parseValue()
  return v
}

// simple tests

test "mon list" {
  let v = ["ok", 42, 3.14, true, null]
  let data = marshal(v)
  let out = unmarshal(data)
  expect out == v
}

test "mon map" {
  let m = {"a": 1, "b": "two"}
  let data = marshal(m)
  let out = unmarshal(data)
  expect out == m
}
