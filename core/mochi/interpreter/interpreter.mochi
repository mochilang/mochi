package interpreter

import "core/mochi/parser/parser.mochi" as mp

// Simple interpreter for the toy AST emitted by parser.mochi.
// It supports integer expressions, unary negation and the operators +, -, *, /,
// % with variable declarations.

type EvalResult {
  val: any
  errs: list<string>
}

type ProgResult {
  env: map<string,any>
  errs: list<string>
}

type FunDef {
  params: list<string>
  body: list<any>
}

fun parseInt(str: string): int {
  var i = 0
  var neg = false
  if len(str) > 0 && str[0] == "-" {
    neg = true
    i = 1
  }
  var n = 0
  let digits = {
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  }
  while i < len(str) {
    n = n * 10 + digits[str[i]]
    i = i + 1
  }
  if neg { n = -n }
  return n
}

fun evalExpr(node: any, env: map<string,any>, funcs: map<string,FunDef>): EvalResult {
  if node.kind == "int" {
    return EvalResult{ val: parseInt(node.value), errs: [] }
  }
  if node.kind == "ident" {
    if node.value in env {
      return EvalResult{ val: env[node.value], errs: [] }
    }
    return EvalResult{ val: 0, errs: ["unknown variable: " + node.value] }
  }
  if node.kind == "unary" {
    let op = node.value
    let inner = evalExpr(node.children[0], env, funcs)
    var val = inner.val
    if op == "neg" { val = -val }
    else if op == "not" { val = !inner.val }
    else { return EvalResult{ val: val, errs: inner.errs + ["unsupported unary: " + op] } }
    return EvalResult{ val: val, errs: inner.errs }
  }
  if node.kind == "binary" {
    let op = node.value
    let l = evalExpr(node.children[0], env, funcs)
    let r = evalExpr(node.children[1], env, funcs)
    var errs = l.errs + r.errs
    var v: any = 0
    if op == "+" { v = l.val + r.val }
    else if op == "-" { v = l.val - r.val }
    else if op == "*" { v = l.val * r.val }
    else if op == "/" { v = l.val / r.val }
    else if op == "%" { v = l.val % r.val }
    else if op == "==" { v = l.val == r.val }
    else if op == "!=" { v = l.val != r.val }
    else if op == "<" { v = l.val < r.val }
    else if op == "<=" { v = l.val <= r.val }
    else if op == ">" { v = l.val > r.val }
    else if op == ">=" { v = l.val >= r.val }
    else if op == "&&" { v = l.val && r.val }
    else if op == "||" { v = l.val || r.val }
    else { errs = errs + ["unsupported operator: " + op] }
    return EvalResult{ val: v, errs: errs }
  }
  if node.kind == "call" {
    if node.value in funcs {
      let fn = funcs[node.value]
      var local: map<string,any> = {}
      var i = 0
      var errs: list<string> = []
      while i < count(fn.params) {
        let argRes = evalExpr(node.children[i], env, funcs)
        if count(argRes.errs) > 0 { errs = errs + argRes.errs }
        local[fn.params[i]] = argRes.val
        i = i + 1
      }
      let res = runBlock(fn.body, local, funcs)
      return EvalResult{ val: res.val, errs: errs + res.errs }
    }
    return EvalResult{ val: 0, errs: ["unknown function: " + node.value] }
  }
  return EvalResult{ val: 0, errs: ["unsupported expr: " + node.kind] }
}

fun runBlock(stmts: list<any>, env: map<string,any>, funcs: map<string,FunDef>): EvalResult {
  var local = env
  var errs: list<string> = []
  var ret = 0
  for stmt in stmts {
    if stmt.kind == "let" || stmt.kind == "var" {
      let res = evalExpr(stmt.children[0], local, funcs)
      if count(res.errs) > 0 { errs = errs + res.errs }
      local[stmt.value] = res.val
    } else if stmt.kind == "assign" {
      let res = evalExpr(stmt.children[0], local, funcs)
      if count(res.errs) > 0 { errs = errs + res.errs }
      if stmt.value in local { local[stmt.value] = res.val } else { errs = errs + ["unknown variable: " + stmt.value] }
    } else if stmt.kind == "return" {
      let res = evalExpr(stmt.children[0], local, funcs)
      return EvalResult{ val: res.val, errs: errs + res.errs }
    }
  }
  return EvalResult{ val: ret, errs: errs }
}

fun runProg(node: any): ProgResult {
  var env: map<string,any> = {}
  var funcs: map<string,FunDef> = {}
  var errs: list<string> = []
  for stmt in node.children {
      if stmt.kind == "fun" {
        var params: list<string> = []
        let paramNode = stmt.children[0]
        for p in paramNode.children { params = params + [p.value] }
        let bodyNode = stmt.children[1]
        funcs[stmt.value] = FunDef{ params: params, body: bodyNode.children }
    } else if stmt.kind == "let" || stmt.kind == "var" {
      let res = evalExpr(stmt.children[0], env, funcs)
      if count(res.errs) > 0 { errs = errs + res.errs }
      env[stmt.value] = res.val
    } else if stmt.kind == "assign" {
      let res = evalExpr(stmt.children[0], env, funcs)
      if count(res.errs) > 0 { errs = errs + res.errs }
      if stmt.value in env {
        env[stmt.value] = res.val
      } else {
        errs = errs + ["unknown variable: " + stmt.value]
      }
    }
  }
  return ProgResult{ env: env, errs: errs }
}

fun sortStrings(xs: list<string>): list<string> {
  var res: list<string> = []
  var tmp = xs
  while count(tmp) > 0 {
    var min = tmp[0]
    var idx = 0
    var i = 1
    while i < count(tmp) {
      if tmp[i] < min {
        min = tmp[i]
        idx = i
      }
      i = i + 1
    }
    res = res + [min]
    var out: list<string> = []
    var j = 0
    while j < count(tmp) {
      if j != idx { out = out + [tmp[j]] }
      j = j + 1
    }
    tmp = out
  }
  return res
}

fun mapKeys(m: map<string,any>): list<string> {
  var ks: list<string> = []
  for k in m {
    ks = ks + [k]
  }
  return ks
}

export fun runString(src: string): string {
  let ast = mp.parseNode(src)
  let res = runProg(ast)
  if count(res.errs) > 0 {
    var out = "‚ùå Runtime Error\n"
    var i = 1
    for e in res.errs {
      out = out + "  " + str(i) + ". " + e + "\n"
      i = i + 1
    }
    return out
  }
  var ks = sortStrings(mapKeys(res.env))
  var out = ""
  for k in ks {
    out = out + k + " = " + str(res.env[k]) + "\n"
  }
  return out
}
