package types

import "core/mochi/parser/parser.mochi" as mp

type Result {
  typ: string
  errs: list<string>
}

type FunInfo {
  params: list<string>
  body: list<any>
}

// Simple type checker for the toy AST used by parser.mochi.
// It supports integers, booleans, unary negation/! and the operators +, -, *, /, %,
// comparison and logical operators with variable declarations.

fun exprType(node: any, env: map<string,string>, funcs: map<string,FunInfo>): Result {
  if node.kind == "int" {
    return Result{ typ: "int", errs: [] }
  }
  if node.kind == "ident" {
    let val = env[node.value]
    if val {
      return Result{ typ: val, errs: [] }
    }
    return Result{ typ: "any", errs: ["unknown variable: " + node.value] }
  }
  if node.kind == "unary" {
    let res = exprType(node.children[0], env, funcs)
    if node.value == "neg" {
      if res.typ == "int" { return Result{ typ: "int", errs: res.errs } }
    } else if node.value == "not" {
      if res.typ == "bool" { return Result{ typ: "bool", errs: res.errs } }
    }
    return Result{ typ: "any", errs: res.errs + ["type mismatch around unary " + node.value] }
  }
  if node.kind == "binary" {
    let op = node.value
    let resL = exprType(node.children[0], env, funcs)
    let resR = exprType(node.children[1], env, funcs)
    var errs = resL.errs + resR.errs
    if op == "+" || op == "-" || op == "*" || op == "/" || op == "%" {
      if resL.typ == "int" && resR.typ == "int" { return Result{ typ: "int", errs: errs } }
    } else if op == "==" || op == "!=" {
      if resL.typ == resR.typ { return Result{ typ: "bool", errs: errs } }
    } else if op == "<" || op == "<=" || op == ">" || op == ">=" {
      if resL.typ == "int" && resR.typ == "int" { return Result{ typ: "bool", errs: errs } }
    } else if op == "&&" || op == "||" {
      if resL.typ == "bool" && resR.typ == "bool" { return Result{ typ: "bool", errs: errs } }
    }
    errs = errs + ["type mismatch around operator " + op]
    return Result{ typ: "any", errs: errs }
  }
  if node.kind == "call" {
    if node.value in funcs {
      var errs: list<string> = []
      for arg in node.children {
        let r = exprType(arg, env, funcs)
        if count(r.errs) > 0 { errs = errs + r.errs }
        if r.typ != "int" { errs = errs + ["type mismatch in call to " + node.value] }
      }
      return Result{ typ: "int", errs: errs }
    }
    return Result{ typ: "any", errs: ["unknown function: " + node.value] }
  }
  return Result{ typ: "any", errs: ["unsupported expr: " + node.kind] }
}

fun checkProg(node: any): list<string> {
  var env: map<string,string> = {}
  var funcs: map<string,FunInfo> = {}
  var errs: list<string> = []
  for stmt in node.children {
      if stmt.kind == "fun" {
        var params: list<string> = []
        let paramNode = stmt.children[0]
        for p in paramNode.children { params = params + [p.value] }
        let bodyNode = stmt.children[1]
        funcs[stmt.value] = FunInfo{ params: params, body: bodyNode.children }
      // check body
      var local: map<string,string> = {}
      for p in params { local[p] = "int" }
      var bodyRes = checkProgInternal(bodyNode.children, local, funcs)
      if count(bodyRes) > 0 { errs = errs + bodyRes }
    } else if stmt.kind == "let" || stmt.kind == "var" {
      let res = exprType(stmt.children[0], env, funcs)
      if count(res.errs) > 0 { errs = errs + res.errs }
      env[stmt.value] = res.typ
    } else if stmt.kind == "assign" {
      let res = exprType(stmt.children[0], env, funcs)
      if count(res.errs) > 0 { errs = errs + res.errs }
      if stmt.value in env {
        let cur = env[stmt.value]
        if cur != res.typ {
          errs = errs + ["type mismatch assigning to " + stmt.value]
        }
        env[stmt.value] = res.typ
      } else {
        errs = errs + ["unknown variable: " + stmt.value]
      }
    }
  }
  return errs
}

fun checkProgInternal(stmts: list<any>, env: map<string,string>, funcs: map<string,FunInfo>): list<string> {
  var errs: list<string> = []
  for stmt in stmts {
    if stmt.kind == "let" || stmt.kind == "var" {
      let res = exprType(stmt.children[0], env, funcs)
      if count(res.errs) > 0 { errs = errs + res.errs }
      env[stmt.value] = res.typ
    } else if stmt.kind == "assign" {
      let res = exprType(stmt.children[0], env, funcs)
      if count(res.errs) > 0 { errs = errs + res.errs }
      if stmt.value in env {
        let cur = env[stmt.value]
        if cur != res.typ {
          errs = errs + ["type mismatch assigning to " + stmt.value]
        }
        env[stmt.value] = res.typ
      } else {
        errs = errs + ["unknown variable: " + stmt.value]
      }
    } else if stmt.kind == "return" {
      let res = exprType(stmt.children[0], env, funcs)
      if count(res.errs) > 0 { errs = errs + res.errs }
    }
  }
  return errs
}

export fun checkString(src: string): string {
  let ast = mp.parseNode(src)
  let errs = checkProg(ast)
  if count(errs) == 0 { return "✅ Type Check Passed" }
  var out = "❌ Type Check Failed\n"
  var i = 1
  for e in errs {
    out = out + "  " + str(i) + ". " + e + "\n"
    i = i + 1
  }
  return out
}
