package parser

// Simple Mochi parser implemented in pure Mochi.
// Supports simple `let` and `var` statements assigning an integer expression
// composed of additions, subtractions, multiplications, divisions and
// remainders with parentheses and unary minus. The pure implementation is used
// for testing the
// language self-hosting and is intentionally small.


type Node {
  kind: string
  value: string
  children: list<Node>
}

fun newNode(kind: string, value: string, children: list<Node>): Node {
  return Node { kind: kind, value: value, children: children }
}

// Convert a Node to a compact string representation similar to ast.Node.String.
fun nodeString(n: Node): string {
  fun write(node: Node, indent: string): string {
    var out = indent + "(" + node.kind
    if node.value != "" {
      out = out + " " + str(node.value)
    }
    if count(node.children) == 0 {
      return out + ")"
    }
    var allLeaf = true
    for c in node.children {
      if count(c.children) > 0 {
        allLeaf = false
        break
      }
    }
    if allLeaf {
      for c in node.children {
        out = out + " (" + c.kind
        if c.value != "" { out = out + " " + str(c.value) }
        out = out + ")"
      }
      return out + ")"
    }
    out = out + "\n"
    for c in node.children {
      out = out + write(c, indent + "  ") + "\n"
    }
    out = out + indent + ")"
    return out
  }
  return write(n, "")
}

type Token {
  kind: string
  value: string
}

fun isDigit(ch: string): bool { return ch >= "0" && ch <= "9" }
fun isAlpha(ch: string): bool { return (ch >= "a" && ch <= "z") || (ch >= "A" && ch <= "Z") }
fun isAlphaNum(ch: string): bool { return isAlpha(ch) || isDigit(ch) || ch == "_" }

fun tokenize(src: string): list<Token> {
  var toks: list<Token> = []
  var i = 0
  while i < len(src) {
    let ch = src[i]
    if ch == " " || ch == "\n" || ch == "\t" || ch == "\r" {
      i = i + 1
      continue
    }
    if isDigit(ch) {
      var j = i
      while j < len(src) && isDigit(src[j]) { j = j + 1 }
      toks = toks + [Token { kind: "int", value: src[i:j] }]
      i = j
      continue
    }
    if ch == "-" && i + 1 < len(src) && isDigit(src[i+1]) {
      var j = i + 1
      while j < len(src) && isDigit(src[j]) { j = j + 1 }
      toks = toks + [Token { kind: "int", value: src[i:j] }]
      i = j
      continue
    }
    if isAlpha(ch) || ch == "_" {
      var j = i
      while j < len(src) && isAlphaNum(src[j]) { j = j + 1 }
      let ident = src[i:j]
      if ident == "let" || ident == "var" || ident == "fun" || ident == "return" {
        toks = toks + [Token { kind: "kw", value: ident }]
      } else {
        toks = toks + [Token { kind: "ident", value: ident }]
      }
      i = j
      continue
    }
    if ch == "/" && i + 1 < len(src) && src[i+1] == "/" {
      // skip line comment
      var j = i + 2
      while j < len(src) && src[j] != "\n" { j = j + 1 }
      i = j
      continue
    }
    if ch == "&" && i + 1 < len(src) && src[i+1] == "&" {
      toks = toks + [Token { kind: "&&", value: "&&" }]
      i = i + 2
      continue
    }
    if ch == "|" && i + 1 < len(src) && src[i+1] == "|" {
      toks = toks + [Token { kind: "||", value: "||" }]
      i = i + 2
      continue
    }
    if (ch == "=" || ch == "!" || ch == "<" || ch == ">") && i + 1 < len(src) && src[i+1] == "=" {
      toks = toks + [Token { kind: str(ch) + "=", value: str(ch) + "=" }]
      i = i + 2
      continue
    }
    if ch == "!" || ch == "<" || ch == ">" {
      toks = toks + [Token { kind: str(ch), value: str(ch) }]
      i = i + 1
      continue
    }
    if ch == "+" || ch == "-" || ch == "*" || ch == "/" || ch == "%" || ch == "=" || ch == "(" || ch == ")" || ch == "," || ch == "{" || ch == "}" {
      toks = toks + [Token { kind: str(ch), value: str(ch) }]
      i = i + 1
      continue
    }
    // skip unknown characters
    i = i + 1
  }
  return toks
}


// parsing helpers operate on a shared token list and index
fun parseTokens(toks: list<Token>): Node {
  var idx = 0

  fun parsePrimary(): Node {
    let tok = toks[idx]
    idx = idx + 1
    if tok.kind == "int" { return newNode("int", tok.value, []) }
    if tok.kind == "(" {
      let expr = parseExpr()
      idx = idx + 1 // skip ')'
      return expr
    }
    if tok.kind == "ident" && idx < count(toks) {
      let nt = toks[idx]
      if nt.kind == "(" {
        idx = idx + 1 // skip '('
        var args: list<Node> = []
        if idx < count(toks) {
          let at = toks[idx]
          if at.kind != ")" {
            args = args + [parseExpr()]
            while idx < count(toks) {
              let sep = toks[idx]
              if sep.kind != "," { break }
              idx = idx + 1
              args = args + [parseExpr()]
            }
          }
        }
        idx = idx + 1 // skip ')'
        return newNode("call", tok.value, args)
      }
    }
    return newNode("ident", tok.value, [])
  }

  fun parseUnary(): Node {
    let tok = toks[idx]
    if tok.kind == "-" || tok.kind == "!" {
      idx = idx + 1
      let expr = parseUnary()
      var op = "neg"
      if tok.kind == "!" { op = "not" }
      return newNode("unary", op, [expr])
    }
    return parsePrimary()
  }

  fun parseTerm(): Node {
    var left = parseUnary()
    while idx < count(toks) {
      let tk = toks[idx]
      if tk.kind != "*" && tk.kind != "/" && tk.kind != "%" { break }
      idx = idx + 1
      let right = parseUnary()
      left = newNode("binary", tk.value, [left, right])
    }
    return left
  }

  fun parseAdd(): Node {
    var left = parseTerm()
    while idx < count(toks) {
      let tk = toks[idx]
      if tk.kind != "+" && tk.kind != "-" { break }
      idx = idx + 1
      let right = parseTerm()
      left = newNode("binary", tk.value, [left, right])
    }
    return left
  }

  fun parseCompare(): Node {
    var left = parseAdd()
    while idx < count(toks) {
      let tk = toks[idx]
      if tk.kind != "==" && tk.kind != "!=" && tk.kind != "<" && tk.kind != "<=" && tk.kind != ">" && tk.kind != ">=" { break }
      idx = idx + 1
      let right = parseAdd()
      left = newNode("binary", tk.value, [left, right])
    }
    return left
  }

  fun parseAnd(): Node {
    var left = parseCompare()
    while idx < count(toks) {
      let tk = toks[idx]
      if tk.kind != "&&" { break }
      idx = idx + 1
      let right = parseCompare()
      left = newNode("binary", tk.value, [left, right])
    }
    return left
  }

  fun parseExpr(): Node {
    var left = parseAnd()
    while idx < count(toks) {
      let tk = toks[idx]
      if tk.kind != "||" { break }
      idx = idx + 1
      let right = parseAnd()
      left = newNode("binary", tk.value, [left, right])
    }
    return left
  }

  fun parseLet(): Node {
    let kw = toks[idx]
    idx = idx + 1 // skip 'let' or 'var'
    let tk = toks[idx]
    let name = tk.value
    idx = idx + 1
    idx = idx + 1 // skip '='
    let expr = parseExpr()
    var kind = "let"
    if kw.value == "var" { kind = "var" }
    return newNode(kind, name, [expr])
  }

  fun parseAssign(name: string): Node {
    idx = idx + 1 // skip '='
    let expr = parseExpr()
    return newNode("assign", name, [expr])
  }

  fun parseReturn(): Node {
    idx = idx + 1 // skip 'return'
    let expr = parseExpr()
    return newNode("return", "", [expr])
  }

  fun parseFun(): Node {
    idx = idx + 1 // skip 'fun'
    let tk = toks[idx]
    let name = tk.value
    idx = idx + 1
    idx = idx + 1 // skip '('
    var params: list<Node> = []
    if idx < count(toks) {
      let pt = toks[idx]
      if pt.kind != ")" {
        params = params + [newNode("param", pt.value, [])]
        idx = idx + 1
        while idx < count(toks) {
          let sep = toks[idx]
          if sep.kind != "," { break }
          idx = idx + 1
          let pv = toks[idx]
          params = params + [newNode("param", pv.value, [])]
          idx = idx + 1
        }
      }
    }
    idx = idx + 1 // skip ')'
    idx = idx + 1 // skip '{'
    var body: list<Node> = []
    while idx < count(toks) {
      let tkb = toks[idx]
      if tkb.kind == "}" { break }
      let stmt = parseStmt()
      if stmt.kind != "noop" { body = body + [stmt] }
    }
    idx = idx + 1 // skip '}'
    return newNode("fun", name, [newNode("params", "", params), newNode("block", "", body)])
  }

  fun parseStmt(): Node {
    if idx >= count(toks) { return newNode("noop", "", []) }
    let tk = toks[idx]
    if tk.kind == "kw" && (tk.value == "let" || tk.value == "var") {
      return parseLet()
    }
    if tk.kind == "kw" && tk.value == "fun" {
      return parseFun()
    }
    if tk.kind == "kw" && tk.value == "return" {
      return parseReturn()
    }
    if tk.kind == "ident" && idx + 1 < count(toks) {
      let next = toks[idx+1]
      if next.kind == "=" {
        let name = tk.value
        idx = idx + 1 // skip ident
        return parseAssign(name)
      }
    }
    // skip unknown token
    idx = idx + 1
    return newNode("noop", "", [])
  }

  fun parseProgram(): Node {
    var stmts: list<Node> = []
    while idx < count(toks) {
      let stmt = parseStmt()
      if stmt.kind != "noop" { stmts = stmts + [stmt] }
    }
    return newNode("program", "", stmts)
  }

  return parseProgram()
}

export fun parseString(src: string): string {
  let toks = tokenize(src)
  let node = parseTokens(toks)
  return nodeString(node)
}

// parseNode is like parseString but returns the AST node instead of its
// formatted representation.  Other pure modules can use this to inspect code.
export fun parseNode(src: string): Node {
  let toks = tokenize(src)
  return parseTokens(toks)
}

export fun parse(path: string): string {
  // For the pure implementation we treat the input as source text.
  // This avoids any dependency on host file I/O.
  return parseString(path)
}

