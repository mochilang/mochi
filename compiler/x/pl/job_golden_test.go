//go:build slow

package pl_test

import (
	"bytes"
	"os"
	"os/exec"
	"path/filepath"
	"testing"

	pl "mochi/compiler/x/pl"
	"mochi/compiler/x/testutil"
	"mochi/parser"
	"mochi/types"
)

func stripHeader(b []byte) []byte {
	if i := bytes.IndexByte(b, '\n'); i != -1 && bytes.HasPrefix(b, []byte("% Generated by Mochi")) {
		return b[i+1:]
	}
	return b
}

func TestPrologCompiler_JOB_Golden(t *testing.T) {
	if _, err := exec.LookPath("swipl"); err != nil {
		t.Skip("swipl not installed")
	}
	root := testutil.FindRepoRoot(t)
	queries := []string{"q1", "q2", "q3", "q4", "q5"}
	for _, q := range queries {
		q := q
		t.Run(q, func(t *testing.T) {
			src := filepath.Join(root, "tests", "dataset", "job", q+".mochi")
			prog, err := parser.Parse(src)
			if err != nil {
				t.Fatalf("parse error: %v", err)
			}
			env := types.NewEnv(nil)
			if errs := types.Check(prog, env); len(errs) > 0 {
				t.Fatalf("type error: %v", errs[0])
			}
			code, err := pl.New().Compile(prog)
			if err != nil {
				t.Fatalf("compile error: %v", err)
			}
			wantCodePath := filepath.Join(root, "tests", "dataset", "job", "compiler", "pl", q+".pl")
			wantCode, err := os.ReadFile(wantCodePath)
			if err != nil {
				t.Fatalf("read golden: %v", err)
			}
			got := stripHeader(bytes.TrimSpace(code))
			want := stripHeader(bytes.TrimSpace(wantCode))
			if !bytes.Equal(got, want) {
				t.Errorf("generated code mismatch for %s.pl\n\n--- Got ---\n%s\n\n--- Want ---\n%s\n", q, got, want)
			}
			dir := t.TempDir()
			file := filepath.Join(dir, "main.pl")
			if err := os.WriteFile(file, code, 0644); err != nil {
				t.Fatalf("write error: %v", err)
			}
			out, err := exec.Command("swipl", "-q", file).CombinedOutput()
			if err != nil {
				t.Fatalf("swipl error: %v\n%s", err, out)
			}
			gotOut := bytes.TrimSpace(out)
			wantOutPath := filepath.Join(root, "tests", "dataset", "job", "compiler", "pl", q+".out")
			wantOut, err := os.ReadFile(wantOutPath)
			if err != nil {
				t.Fatalf("read golden: %v", err)
			}
			if !bytes.Equal(gotOut, bytes.TrimSpace(wantOut)) {
				t.Errorf("output mismatch for %s.out\n\n--- Got ---\n%s\n\n--- Want ---\n%s\n", q, gotOut, bytes.TrimSpace(wantOut))
			}
		})
	}
}
