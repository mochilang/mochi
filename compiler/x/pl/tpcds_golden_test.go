//go:build slow

package pl_test

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"testing"

	pl "mochi/compiler/x/pl"
	"mochi/compiler/x/testutil"
	"mochi/parser"
	"mochi/types"
)

func stripHeaderDS(b []byte) []byte {
	if i := bytes.IndexByte(b, '\n'); i != -1 && bytes.HasPrefix(b, []byte("% Generated by Mochi")) {
		return b[i+1:]
	}
	return b
}

func TestPrologCompiler_TPCDSQueries(t *testing.T) {
	if _, err := exec.LookPath("swipl"); err != nil {
		t.Skip("swipl not installed")
	}
	root := testutil.FindRepoRoot(t)
	for i := 1; i <= 99; i++ {
		base := fmt.Sprintf("q%d", i)
		src := filepath.Join(root, "tests", "dataset", "tpc-ds", base+".mochi")
		codeWant := filepath.Join(root, "tests", "dataset", "tpc-ds", "compiler", "pl", base+".pl")
		outWant := filepath.Join(root, "tests", "dataset", "tpc-ds", "compiler", "pl", base+".out")
		errFile := filepath.Join(root, "tests", "dataset", "tpc-ds", "compiler", "pl", base+".error")
		if _, err := os.Stat(codeWant); err != nil {
			continue
		}
		if _, err := os.Stat(outWant); err != nil {
			continue
		}
		t.Run(base, func(t *testing.T) {
			script := exec.Command("go", "run", "-tags=archive,slow", "./scripts/compile_tpcds_pl.go")
			script.Env = append(os.Environ(), "QUERIES="+fmt.Sprint(i))
			script.Dir = root
			if out, err := script.CombinedOutput(); err != nil {
				t.Fatalf("compile script error: %v\n%s", err, out)
			}
			if b, err := os.ReadFile(errFile); err == nil {
				t.Fatalf("prolog run failed:\n%s", b)
			}
			prog, err := parser.Parse(src)
			if err != nil {
				t.Fatalf("parse error: %v", err)
			}
			env := types.NewEnv(nil)
			if errs := types.Check(prog, env); len(errs) > 0 {
				t.Fatalf("type error: %v", errs[0])
			}
			code, err := pl.New().Compile(prog)
			if err != nil {
				t.Fatalf("compile error: %v", err)
			}
			wantCode, err := os.ReadFile(codeWant)
			if err != nil {
				t.Fatalf("read golden: %v", err)
			}
			got := bytes.TrimSpace(stripHeaderDS(code))
			want := bytes.TrimSpace(stripHeaderDS(wantCode))
			if !bytes.Equal(got, want) {
				t.Errorf("generated code mismatch for %s.pl\n\n--- Got ---\n%s\n\n--- Want ---\n%s", base, got, want)
			}
			file := filepath.Join(os.TempDir(), base+".pl")
			if err := os.WriteFile(file, code, 0644); err != nil {
				t.Fatalf("write error: %v", err)
			}
			defer os.Remove(file)
			out, err := exec.Command("swipl", "-q", "-s", file, "-t", "halt").CombinedOutput()
			if err != nil {
				t.Fatalf("swipl error: %v\n%s", err, out)
			}
			gotOut := bytes.ReplaceAll(bytes.TrimSpace(out), []byte(" "), nil)
			wantOut, err := os.ReadFile(outWant)
			if err != nil {
				t.Fatalf("read golden: %v", err)
			}
			wantNorm := bytes.ReplaceAll(bytes.TrimSpace(wantOut), []byte(" "), nil)
			if !bytes.Equal(gotOut, wantNorm) {
				t.Errorf("output mismatch for %s.out\n\n--- Got ---\n%s\n\n--- Want ---\n%s", base, gotOut, wantNorm)
			}
		})
	}
}
