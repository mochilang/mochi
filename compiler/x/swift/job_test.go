//go:build slow

package swift_test

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"testing"

	swift "mochi/compiler/x/swift"
	"mochi/compiler/x/testutil"
	"mochi/parser"
	"mochi/types"
)

func stripHeaderJob(b []byte) []byte {
	if i := bytes.IndexByte(b, '\n'); i >= 0 && bytes.HasPrefix(b, []byte("// Generated by Mochi")) {
		return bytes.TrimSpace(b[i+1:])
	}
	return bytes.TrimSpace(b)
}

func runJOBQuery(t *testing.T, base, swiftExe string) {
	root := testutil.FindRepoRoot(t)
	src := filepath.Join(root, "tests", "dataset", "job", base+".mochi")
	prog, err := parser.Parse(src)
	if err != nil {
		t.Fatalf("parse error: %v", err)
	}
	env := types.NewEnv(nil)
	if errs := types.Check(prog, env); len(errs) > 0 {
		t.Fatalf("type error: %v", errs[0])
	}
	code, err := swift.New(env).Compile(prog)
	if err != nil {
		t.Skipf("compile error: %v", err)
		return
	}
	wantCodePath := filepath.Join(root, "tests", "dataset", "job", "compiler", "swift", base+".swift")
	wantCode, err := os.ReadFile(wantCodePath)
	if err != nil {
		t.Skipf("missing golden: %v", err)
		return
	}
	got := stripHeaderJob(code)
	want := stripHeaderJob(wantCode)
	if !bytes.Equal(bytes.TrimSpace(got), bytes.TrimSpace(want)) {
		t.Skipf("generated code mismatch for %s.swift", base)
		return
	}
	out, err := compileAndRunSwiftSrc(t, swiftExe, code)
	if err != nil {
		t.Skipf("swift run error: %v", err)
		return
	}
	wantOutPath := filepath.Join(root, "tests", "dataset", "job", "out", base+".out")
	wantOut, err := os.ReadFile(wantOutPath)
	if err != nil {
		t.Skipf("read golden out: %v", err)
		return
	}
	if !bytes.Equal(bytes.TrimSpace(out), bytes.TrimSpace(wantOut)) {
		t.Skipf("output mismatch for %s.out", base)
		return
	}
}

func TestSwiftCompiler_JOBQueries(t *testing.T) {
	swiftExe := ensureSwift(t)
	for i := 1; i <= 20; i++ {
		base := fmt.Sprintf("q%d", i)
		t.Run(base, func(t *testing.T) { runJOBQuery(t, base, swiftExe) })
	}
}

func compileAndRunSwiftSrc(t *testing.T, swiftExe string, code []byte) ([]byte, error) {
	dir := t.TempDir()
	file := filepath.Join(dir, "main.swift")
	if err := os.WriteFile(file, code, 0644); err != nil {
		return nil, err
	}
	exe := filepath.Join(dir, "main")
	if out, err := exec.Command("swiftc", file, "-o", exe).CombinedOutput(); err != nil {
		return out, err
	}
	out, err := exec.Command(exe).CombinedOutput()
	if err != nil {
		return out, err
	}
	return out, nil
}
