//go:build slow

package schemecode_test

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"testing"

	schemecode "mochi/compiler/x/scheme"
	"mochi/compiler/x/testutil"
	"mochi/golden"
	"mochi/parser"
	"mochi/types"
)

func shouldUpdateVM() bool {
	if v, ok := os.LookupEnv("UPDATE"); ok && (v == "1" || v == "true") {
		return true
	}
	return false
}

func stripHeaderVM(b []byte) []byte {
	if i := bytes.IndexByte(b, '\n'); i != -1 && bytes.HasPrefix(b, []byte("; Generated by")) {
		return bytes.TrimSpace(b[i+1:])
	}
	return bytes.TrimSpace(b)
}

// runVMGolden compiles src to Scheme, runs it with chibi-scheme and compares the
// generated code against tests/machine/x/scheme.
func runVMGolden(t *testing.T, src string) ([]byte, error) {
	root := testutil.FindRepoRoot(t)
	name := strings.TrimSuffix(filepath.Base(src), filepath.Ext(src))
	os.Setenv("MOCHI_HEADER_TIME", "2006-01-02T15:04:05Z")
	os.Setenv("SOURCE_DATE_EPOCH", "0")
	defer os.Unsetenv("MOCHI_HEADER_TIME")
	defer os.Unsetenv("SOURCE_DATE_EPOCH")
	prog, err := parser.Parse(src)
	if err != nil {
		return nil, fmt.Errorf("parse error: %w", err)
	}
	env := types.NewEnv(nil)
	if errs := types.Check(prog, env); len(errs) > 0 {
		return nil, fmt.Errorf("type error: %v", errs[0])
	}
	code, err := schemecode.New(env).Compile(prog)
	if err != nil {
		return nil, fmt.Errorf("compile error: %w", err)
	}
	outDir := filepath.Join(root, "tests", "machine", "x", "scheme")
	os.MkdirAll(outDir, 0755)
	codePath := filepath.Join(outDir, name+".scm")
	if shouldUpdateVM() {
		if err := os.WriteFile(codePath, code, 0644); err != nil {
			return nil, fmt.Errorf("write code: %w", err)
		}
	} else if want, err := os.ReadFile(codePath); err == nil {
		got := stripHeaderVM(code)
		want = stripHeaderVM(want)
		if !bytes.Equal(got, want) {
			t.Errorf("generated code mismatch for %s.scm\n\n--- Got ---\n%s\n\n--- Want ---\n%s", name, got, want)
		}
	}
	schemePath, err := schemecode.EnsureScheme()
	if err != nil {
		return nil, fmt.Errorf("scheme not installed: %w", err)
	}
	tmp := filepath.Join(t.TempDir(), name+".scm")
	if err := os.WriteFile(tmp, code, 0644); err != nil {
		return nil, fmt.Errorf("write temp: %w", err)
	}
	cmd := exec.Command(schemePath, "-m", "chibi", tmp)
	cmd.Dir = root
	if inData, err := os.ReadFile(strings.TrimSuffix(src, ".mochi") + ".in"); err == nil {
		cmd.Stdin = bytes.NewReader(inData)
	}
	out, err := cmd.CombinedOutput()
	if err != nil {
		os.WriteFile(filepath.Join(outDir, name+".error"), out, 0644)
		return nil, fmt.Errorf("run error: %w", err)
	}
	os.Remove(filepath.Join(outDir, name+".error"))
	os.WriteFile(filepath.Join(outDir, name+".out"), out, 0644)
	return bytes.TrimSpace(out), nil
}

func TestSchemeCompiler_VMValid_Golden(t *testing.T) {
	if _, err := schemecode.EnsureScheme(); err != nil {
		t.Skipf("scheme not installed: %v", err)
	}
	golden.Run(t, "tests/vm/valid", ".mochi", ".out", func(src string) ([]byte, error) { return runVMGolden(t, src) })
}

func TestMain(m *testing.M) {
	code := m.Run()
	updateReadme()
	os.Exit(code)
}

func updateReadme() {
	root := testutil.FindRepoRoot(&testing.T{})
	srcDir := filepath.Join(root, "tests", "vm", "valid")
	outDir := filepath.Join(root, "tests", "machine", "x", "scheme")
	files, _ := filepath.Glob(filepath.Join(srcDir, "*.mochi"))
	total := len(files)
	compiled := 0
	var lines []string
	for _, f := range files {
		name := strings.TrimSuffix(filepath.Base(f), ".mochi")
		mark := "[ ]"
		if _, err := os.Stat(filepath.Join(outDir, name+".out")); err == nil {
			if _, err2 := os.Stat(filepath.Join(outDir, name+".error")); err2 != nil {
				compiled++
				mark = "[x]"
			}
		}
		lines = append(lines, fmt.Sprintf("- %s %s", mark, name))
	}
	var buf bytes.Buffer
	fmt.Fprintf(&buf, "# Scheme Machine Output (%d/%d compiled and run)\n\n", compiled, total)
	buf.WriteString("This directory contains Scheme code generated from the Mochi programs in `tests/vm/valid`. Each program was executed with chibi-scheme. Successful runs have a `.out` file and failures provide a `.error`.\n\n")
	buf.WriteString("## Program checklist\n")
	buf.WriteString(strings.Join(lines, "\n"))
	buf.WriteString("\n")
	os.WriteFile(filepath.Join(outDir, "README.md"), buf.Bytes(), 0644)
}
