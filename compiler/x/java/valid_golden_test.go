//go:build slow

package javacode_test

import (
	"bytes"
	"flag"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"testing"

	javacode "mochi/compiler/x/java"
	"mochi/parser"
	"mochi/types"
)

func repoRootValid(t *testing.T) string {
	dir, err := os.Getwd()
	if err != nil {
		t.Fatal(err)
	}
	for i := 0; i < 10; i++ {
		if _, err := os.Stat(filepath.Join(dir, "go.mod")); err == nil {
			return dir
		}
		p := filepath.Dir(dir)
		if p == dir {
			break
		}
		dir = p
	}
	t.Fatal("repo root not found")
	return ""
}

func stripHeaderValid(b []byte) []byte {
	if i := bytes.IndexByte(b, '\n'); i != -1 && bytes.HasPrefix(b, []byte("// Generated by Mochi")) {
		return b[i+1:]
	}
	return b
}

func classNameFromVarLocal(s string) string {
	if s == "" {
		return ""
	}
	parts := strings.FieldsFunc(s, func(r rune) bool {
		return r == '_' || r == '-' || r == ' ' || r == '.'
	})
	for i, p := range parts {
		if p == "" {
			continue
		}
		parts[i] = strings.ToUpper(p[:1]) + p[1:]
	}
	name := strings.Join(parts, "")
	if name != "" {
		if c := name[0]; c >= '0' && c <= '9' {
			name = "M" + name
		}
	}
	return name
}

func writeErrValid(path string, err error) {
	_ = os.WriteFile(path, []byte(err.Error()), 0644)
}

func TestJavaCompiler_VMValidPrograms(t *testing.T) {
	if err := javacode.EnsureJavac(); err != nil {
		t.Skipf("javac not installed: %v", err)
	}
	root := repoRootValid(t)
	updating := flag.Lookup("update") != nil && flag.Lookup("update").Value.String() == "true"
	srcDir := filepath.Join(root, "tests", "vm", "valid")
	files, err := filepath.Glob(filepath.Join(srcDir, "*.mochi"))
	if err != nil {
		t.Fatalf("glob error: %v", err)
	}
	outDir := filepath.Join(root, "tests", "machine", "x", "java")
	if err := os.MkdirAll(outDir, 0755); err != nil {
		t.Fatalf("mkdir out: %v", err)
	}
	for _, src := range files {
		name := strings.TrimSuffix(filepath.Base(src), ".mochi")
		codeWant := filepath.Join(outDir, name+".java")
		outWant := filepath.Join(outDir, name+".out")
		errPath := filepath.Join(outDir, name+".error")
		t.Run(name, func(t *testing.T) {
			os.Setenv("MOCHI_HEADER_TIME", "2006-01-02T15:04:05Z")
			os.Setenv("SOURCE_DATE_EPOCH", "0")
			defer os.Unsetenv("MOCHI_HEADER_TIME")
			defer os.Unsetenv("SOURCE_DATE_EPOCH")
			os.Remove(errPath)
			prog, err := parser.Parse(src)
			if err != nil {
				if updating {
					writeErrValid(errPath, fmt.Errorf("parse error: %w", err))
				}
				t.Skipf("parse error: %v", err)
			}
			env := types.NewEnv(nil)
			if errs := types.Check(prog, env); len(errs) > 0 {
				if updating {
					writeErrValid(errPath, fmt.Errorf("type error: %v", errs[0]))
				}
				t.Skipf("type error: %v", errs[0])
			}
			code, err := javacode.New().Compile(prog)
			if err != nil {
				if updating {
					writeErrValid(errPath, fmt.Errorf("compile error: %v", err))
				}
				t.Skipf("compile error: %v", err)
			}
			if updating {
				if err := os.WriteFile(codeWant, code, 0644); err != nil {
					t.Fatalf("write golden: %v", err)
				}
			}
			if !updating {
				if _, err := os.Stat(codeWant); err != nil {
					t.Fatalf("read golden: %v", err)
				}
			}
			dir := t.TempDir()
			className := classNameFromVarLocal(name)
			if className == "" {
				className = "Main"
			}
			file := filepath.Join(dir, className+".java")
			if err := os.WriteFile(file, code, 0644); err != nil {
				t.Fatalf("write error: %v", err)
			}
			if out, err := exec.Command("javac", "-d", dir, file).CombinedOutput(); err != nil {
				if updating {
					writeErrValid(errPath, fmt.Errorf("javac error: %v\n%s", err, out))
				}
				t.Skipf("javac error: %v\n%s", err, out)
			}
			cmd := exec.Command("java", "-cp", dir, className)
			cmd.Env = append(os.Environ(), "MOCHI_ROOT="+root)
			out, err := cmd.CombinedOutput()
			if err != nil {
				if updating {
					writeErrValid(errPath, fmt.Errorf("java run error: %v\n%s", err, out))
				}
				t.Skipf("java run error: %v\n%s", err, out)
			}
			gotOut := bytes.TrimSpace(out)
			if updating {
				if err := os.WriteFile(outWant, gotOut, 0644); err != nil {
					t.Fatalf("write golden: %v", err)
				}
				os.Remove(errPath)
			}
			wantOut, err := os.ReadFile(outWant)
			if err != nil {
				t.Fatalf("read golden: %v", err)
			}
			if !bytes.Equal(gotOut, bytes.TrimSpace(wantOut)) {
				t.Errorf("output mismatch for %s.out\n\n--- Got ---\n%s\n\n--- Want ---\n%s", name, gotOut, bytes.TrimSpace(wantOut))
			}
		})
	}
}
