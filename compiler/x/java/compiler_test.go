//go:build slow

package javacode_test

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"testing"

	javacode "mochi/compiler/x/java"
	"mochi/parser"
)

func context(src string, line int) string {
	data, _ := os.ReadFile(src)
	lines := strings.Split(string(data), "\n")
	if line < 1 {
		line = 1
	}
	start := line - 2
	if start < 0 {
		start = 0
	}
	end := line + 1
	if end > len(lines) {
		end = len(lines)
	}
	var out []string
	for i := start; i < end; i++ {
		out = append(out, fmt.Sprintf("%3d| %s", i+1, lines[i]))
	}
	return strings.Join(out, "\n")
}

func TestCompileValidPrograms(t *testing.T) {
	root := filepath.Join("..", "..", "..")
	dir := filepath.Join(root, "tests", "vm", "valid")
	files, err := filepath.Glob(filepath.Join(dir, "*.mochi"))
	if err != nil {
		t.Fatal(err)
	}
	outDir := filepath.Join(root, "tests", "machine", "x", "java")
	os.MkdirAll(outDir, 0755)
	for _, f := range files {
		name := strings.TrimSuffix(filepath.Base(f), ".mochi")
		t.Run(name, func(t *testing.T) {
			prog, err := parser.Parse(f)
			if err != nil {
				writeError(outDir, name, f, 0, fmt.Sprintf("parse error: %v", err))
				return
			}
			code, err := javacode.New().Compile(prog)
			if err != nil {
				writeError(outDir, name, f, 0, fmt.Sprintf("compile error: %v", err))
				return
			}
			srcFile := filepath.Join(outDir, name+".java")
			if err := os.WriteFile(srcFile, code, 0644); err != nil {
				t.Fatalf("write error: %v", err)
			}
			tmp := t.TempDir()
			mainFile := filepath.Join(tmp, "Main.java")
			os.WriteFile(mainFile, code, 0644)
			if out, err := exec.Command("javac", mainFile).CombinedOutput(); err != nil {
				writeError(outDir, name, f, 0, fmt.Sprintf("javac error: %v\n%s", err, out))
				return
			}
			cmd := exec.Command("java", "-cp", tmp, "Main")
			cmd.Env = append(os.Environ(), "MOCHI_ROOT="+root)
			var buf bytes.Buffer
			cmd.Stdout = &buf
			cmd.Stderr = &buf
			if err := cmd.Run(); err != nil {
				writeError(outDir, name, f, 0, fmt.Sprintf("run error: %v\n%s", err, buf.Bytes()))
				return
			}
			os.WriteFile(filepath.Join(outDir, name+".out"), bytes.TrimSpace(buf.Bytes()), 0644)
			os.Remove(filepath.Join(outDir, name+".error"))
		})
	}
}

func writeError(outDir, name, src string, line int, msg string) {
	ctx := context(src, line)
	full := fmt.Sprintf("line %d: %s\n\n%s", line, msg, ctx)
	os.WriteFile(filepath.Join(outDir, name+".error"), []byte(full), 0644)
}

func TestMain(m *testing.M) {
	code := m.Run()
	updateReadme()
	os.Exit(code)
}

func updateReadme() {
	root := repoRoot()
	srcDir := filepath.Join(root, "tests", "vm", "valid")
	outDir := filepath.Join(root, "tests", "machine", "x", "java")
	files, _ := filepath.Glob(filepath.Join(srcDir, "*.mochi"))
	total := len(files)
	compiled := 0
	var lines []string
	for _, f := range files {
		name := strings.TrimSuffix(filepath.Base(f), ".mochi")
		mark := "[ ]"
		if _, err := os.Stat(filepath.Join(outDir, name+".out")); err == nil {
			compiled++
			mark = "[x]"
		}
		lines = append(lines, fmt.Sprintf("- %s %s.mochi", mark, name))
	}
	var buf bytes.Buffer
	fmt.Fprintf(&buf, "# Mochi to Java Compiler Outputs (%d/%d compiled)\n\n", compiled, total)
	buf.WriteString("This directory contains Java source code generated by the Mochi compiler from the programs in `tests/vm/valid`. Each subtest either produced a `.java` file and an output file (`.out`), or an `.error` file if compilation or execution failed.\n\n")
	buf.WriteString("## Checklist\n")
	buf.WriteString(strings.Join(lines, "\n"))
	buf.WriteString("\n")
	_ = os.WriteFile(filepath.Join(outDir, "README.md"), buf.Bytes(), 0644)
}

func repoRoot() string {
	dir, _ := os.Getwd()
	for i := 0; i < 10; i++ {
		if _, err := os.Stat(filepath.Join(dir, "go.mod")); err == nil {
			return dir
		}
		parent := filepath.Dir(dir)
		if parent == dir {
			break
		}
		dir = parent
	}
	return dir
}
