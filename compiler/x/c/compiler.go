package c

import (
	"bytes"
	"fmt"
	"strings"

	"mochi/parser"
	"mochi/types"
)

// Compiler converts a small subset of Mochi into C source code.
// Only basic statements and expressions used in simple examples are
// supported at the moment. Unsupported constructs return an error so
// the tests can record the failure.
type Compiler struct {
	buf    bytes.Buffer
	indent int
}

// New creates a new Compiler instance.
func New(env *types.Env) *Compiler { return &Compiler{} }

// Compile translates the parsed program into C code.
func (c *Compiler) Compile(p *parser.Program) ([]byte, error) {
	c.buf.Reset()
	c.indent = 0
	c.writeln("// Generated by Mochi experimental C compiler")
	c.writeln("#include <stdio.h>")
	c.writeln("#include <stdbool.h>")
	c.writeln("")

	for _, st := range p.Statements {
		if st.Fun != nil {
			if err := c.compileFun(st.Fun); err != nil {
				return nil, err
			}
			c.writeln("")
		}
	}

	c.writeln("int main() {")
	c.indent++
	for _, st := range p.Statements {
		if st.Fun != nil {
			continue
		}
		if err := c.compileStmt(st); err != nil {
			return nil, err
		}
	}
	c.writeln("return 0;")
	c.indent--
	c.writeln("}")

	return c.buf.Bytes(), nil
}

func (c *Compiler) writeln(s string) {
	for i := 0; i < c.indent; i++ {
		c.buf.WriteString("    ")
	}
	c.buf.WriteString(s)
	c.buf.WriteByte('\n')
}

func (c *Compiler) writeIndent() {
	for i := 0; i < c.indent; i++ {
		c.buf.WriteString("    ")
	}
}

func (c *Compiler) compileFun(fn *parser.FunStmt) error {
	c.writeIndent()
	c.buf.WriteString("int ")
	c.buf.WriteString(fn.Name)
	c.buf.WriteString("(")
	for i, p := range fn.Params {
		if i > 0 {
			c.buf.WriteString(", ")
		}
		c.buf.WriteString("int ")
		c.buf.WriteString(p.Name)
	}
	c.buf.WriteString(") {\n")
	c.indent++
	for _, st := range fn.Body {
		if err := c.compileStmt(st); err != nil {
			return err
		}
	}
	c.indent--
	c.writeln("}")
	return nil
}

func (c *Compiler) compileStmt(s *parser.Statement) error {
	switch {
	case s.Let != nil:
		c.writeIndent()
		c.buf.WriteString("int ")
		c.buf.WriteString(s.Let.Name)
		if s.Let.Value != nil {
			val, err := c.compileExpr(s.Let.Value)
			if err != nil {
				return err
			}
			c.buf.WriteString(" = ")
			c.buf.WriteString(val)
		}
		c.buf.WriteString(";\n")
	case s.Var != nil:
		c.writeIndent()
		c.buf.WriteString("int ")
		c.buf.WriteString(s.Var.Name)
		if s.Var.Value != nil {
			val, err := c.compileExpr(s.Var.Value)
			if err != nil {
				return err
			}
			c.buf.WriteString(" = ")
			c.buf.WriteString(val)
		}
		c.buf.WriteString(";\n")
	case s.Assign != nil:
		if len(s.Assign.Index) > 0 || len(s.Assign.Field) > 0 {
			return fmt.Errorf("complex assignment not supported")
		}
		c.writeIndent()
		val, err := c.compileExpr(s.Assign.Value)
		if err != nil {
			return err
		}
		c.buf.WriteString(s.Assign.Name)
		c.buf.WriteString(" = ")
		c.buf.WriteString(val)
		c.buf.WriteString(";\n")
	case s.Expr != nil:
		c.writeIndent()
		expr, err := c.compileExpr(s.Expr.Expr)
		if err != nil {
			return err
		}
		c.buf.WriteString(expr)
		c.buf.WriteString(";\n")
	case s.While != nil:
		cond, err := c.compileExpr(s.While.Cond)
		if err != nil {
			return err
		}
		c.writeIndent()
		c.buf.WriteString("while (")
		c.buf.WriteString(cond)
		c.buf.WriteString(") {\n")
		c.indent++
		for _, st := range s.While.Body {
			if err := c.compileStmt(st); err != nil {
				return err
			}
		}
		c.indent--
		c.writeln("}")
	default:
		return fmt.Errorf("unsupported statement at line %d", s.Pos.Line)
	}
	return nil
}

func (c *Compiler) compileExpr(e *parser.Expr) (string, error) {
	if e == nil {
		return "", fmt.Errorf("empty expr")
	}
	if e.Binary != nil {
		left, err := c.compileUnary(e.Binary.Left)
		if err != nil {
			return "", err
		}
		out := left
		for _, op := range e.Binary.Right {
			rhs, err := c.compilePostfix(op.Right)
			if err != nil {
				return "", err
			}
			out = fmt.Sprintf("(%s %s %s)", out, op.Op, rhs)
		}
		return out, nil
	}
	return "", fmt.Errorf("unsupported expression at line %d", e.Pos.Line)
}

func (c *Compiler) compileUnary(u *parser.Unary) (string, error) {
	val, err := c.compilePostfix(u.Value)
	if err != nil {
		return "", err
	}
	for i := len(u.Ops) - 1; i >= 0; i-- {
		val = fmt.Sprintf("(%s%s)", u.Ops[i], val)
	}
	return val, nil
}

func (c *Compiler) compilePostfix(p *parser.PostfixExpr) (string, error) {
	expr, err := c.compilePrimary(p.Target)
	if err != nil {
		return "", err
	}
	if len(p.Ops) > 0 {
		return "", fmt.Errorf("postfix operations not supported")
	}
	return expr, nil
}

func (c *Compiler) compilePrimary(p *parser.Primary) (string, error) {
	switch {
	case p.Lit != nil:
		return c.compileLiteral(p.Lit), nil
	case p.Call != nil:
		return c.compileCall(p.Call)
	case p.Selector != nil:
		name := p.Selector.Root
		for _, t := range p.Selector.Tail {
			name += "." + t
		}
		return name, nil
	case p.Group != nil:
		return c.compileExpr(p.Group)
	default:
		return "", fmt.Errorf("unsupported primary at line %d", p.Pos.Line)
	}
}

func (c *Compiler) compileCall(call *parser.CallExpr) (string, error) {
	args := make([]string, len(call.Args))
	for i, a := range call.Args {
		s, err := c.compileExpr(a)
		if err != nil {
			return "", err
		}
		args[i] = s
	}
	if call.Func == "print" {
		if len(args) != 1 {
			return "", fmt.Errorf("print expects one argument")
		}
		arg := args[0]
		if strings.HasPrefix(arg, "\"") {
			return fmt.Sprintf("printf(\"%s\\n\", %s)", "%s", arg), nil
		}
		return fmt.Sprintf("printf(\"%s\\n\", %s)", "%d", arg), nil
	}
	return "", fmt.Errorf("unsupported call %s", call.Func)
}

func (c *Compiler) compileLiteral(l *parser.Literal) string {
	switch {
	case l.Int != nil:
		return fmt.Sprintf("%d", *l.Int)
	case l.Float != nil:
		return fmt.Sprintf("%g", *l.Float)
	case l.Bool != nil:
		if bool(*l.Bool) {
			return "1"
		}
		return "0"
	case l.Str != nil:
		return fmt.Sprintf("%q", *l.Str)
	default:
		return "0"
	}
}
