//go:build slow

package c

import (
	"bytes"
	"fmt"
	"strings"

	"mochi/parser"
	"mochi/types"
)

// Compiler converts a small subset of Mochi into C source code.
// Only basic statements and expressions used in simple examples are
// supported at the moment. Unsupported constructs return an error so
// the tests can record the failure.
type Compiler struct {
	buf           bytes.Buffer
	indent        int
	needString    bool
	needContains  bool
	needSum       bool
	needMin       bool
	needMax       bool
	needSubstring bool
}

// New creates a new Compiler instance.
func New(env *types.Env) *Compiler { return &Compiler{} }

// Compile translates the parsed program into C code.
func (c *Compiler) Compile(p *parser.Program) ([]byte, error) {
	c.buf.Reset()
	c.indent = 0
	c.needString = false
	c.needContains = false
	c.needSum = false
	c.needMin = false
	c.needMax = false
	c.needSubstring = false

	var body bytes.Buffer
	oldBuf := c.buf
	c.buf = body

	for _, st := range p.Statements {
		if st.Fun != nil {
			if err := c.compileFun(st.Fun); err != nil {
				return nil, err
			}
			c.writeln("")
		}
	}

	c.writeln("int main() {")
	c.indent++
	for _, st := range p.Statements {
		if st.Fun != nil {
			continue
		}
		if err := c.compileStmt(st); err != nil {
			return nil, err
		}
	}
	c.writeln("return 0;")
	c.indent--
	c.writeln("}")

	bodyBytes := c.buf.Bytes()
	c.buf = oldBuf
	c.indent = 0

	c.writeln("// Generated by Mochi experimental C compiler")
	c.writeln("#include <stdio.h>")
	c.writeln("#include <stdbool.h>")
	c.writeln("#include <stdlib.h>")
	if c.needString || c.needSubstring {
		c.writeln("#include <string.h>")
	}
	c.writeln("")
	if c.needContains {
		c.writeln("static int contains_int(const int *arr, int n, int v) {")
		c.writeln("    for (int i = 0; i < n; i++) if (arr[i] == v) return 1;")
		c.writeln("    return 0;")
		c.writeln("}")
		c.writeln("")
	}
	if c.needSum {
		c.writeln("static int sum_int(const int *arr, int n) {")
		c.writeln("    int s = 0;")
		c.writeln("    for (int i = 0; i < n; i++) s += arr[i];")
		c.writeln("    return s;")
		c.writeln("}")
		c.writeln("")
	}
	if c.needMin {
		c.writeln("static int min_int(const int *arr, int n) {")
		c.writeln("    int m = arr[0];")
		c.writeln("    for (int i = 1; i < n; i++) if (arr[i] < m) m = arr[i];")
		c.writeln("    return m;")
		c.writeln("}")
		c.writeln("")
	}
	if c.needMax {
		c.writeln("static int max_int(const int *arr, int n) {")
		c.writeln("    int m = arr[0];")
		c.writeln("    for (int i = 1; i < n; i++) if (arr[i] > m) m = arr[i];")
		c.writeln("    return m;")
		c.writeln("}")
		c.writeln("")
	}
	if c.needSubstring {
		c.writeln("static char* substring(const char* s, int start, int end) {")
		c.writeln("    int n = end - start;")
		c.writeln("    char* buf = (char*)malloc(n + 1);")
		c.writeln("    strncpy(buf, s + start, n);")
		c.writeln("    buf[n] = '\\0';")
		c.writeln("    return buf;")
		c.writeln("}")
		c.writeln("")
	}

	c.buf.Write(bodyBytes)
	return c.buf.Bytes(), nil
}

func (c *Compiler) writeln(s string) {
	for i := 0; i < c.indent; i++ {
		c.buf.WriteString("    ")
	}
	c.buf.WriteString(s)
	c.buf.WriteByte('\n')
}

func (c *Compiler) writeIndent() {
	for i := 0; i < c.indent; i++ {
		c.buf.WriteString("    ")
	}
}

func (c *Compiler) compileFun(fn *parser.FunStmt) error {
	c.writeIndent()
	c.buf.WriteString("int ")
	c.buf.WriteString(fn.Name)
	c.buf.WriteString("(")
	for i, p := range fn.Params {
		if i > 0 {
			c.buf.WriteString(", ")
		}
		c.buf.WriteString("int ")
		c.buf.WriteString(p.Name)
	}
	c.buf.WriteString(") {\n")
	c.indent++
	for _, st := range fn.Body {
		if err := c.compileStmt(st); err != nil {
			return err
		}
	}
	c.indent--
	c.writeln("}")
	return nil
}

func (c *Compiler) compileStmt(s *parser.Statement) error {
	switch {
	case s.Let != nil:
		c.writeIndent()
		if lst := listLiteral(s.Let.Value); lst != nil {
			elems := make([]string, len(lst.Elems))
			for i, e := range lst.Elems {
				s, err := c.compileExpr(e)
				if err != nil {
					return err
				}
				elems[i] = s
			}
			fmt.Fprintf(&c.buf, "int %s[] = {%s};\n", s.Let.Name, strings.Join(elems, ", "))
		} else {
			c.buf.WriteString("int ")
			c.buf.WriteString(s.Let.Name)
			if s.Let.Value != nil {
				val, err := c.compileExpr(s.Let.Value)
				if err != nil {
					return err
				}
				c.buf.WriteString(" = ")
				c.buf.WriteString(val)
			}
			c.buf.WriteString(";\n")
		}
	case s.Var != nil:
		c.writeIndent()
		if lst := listLiteral(s.Var.Value); lst != nil {
			elems := make([]string, len(lst.Elems))
			for i, e := range lst.Elems {
				s, err := c.compileExpr(e)
				if err != nil {
					return err
				}
				elems[i] = s
			}
			fmt.Fprintf(&c.buf, "int %s[] = {%s};\n", s.Var.Name, strings.Join(elems, ", "))
		} else {
			c.buf.WriteString("int ")
			c.buf.WriteString(s.Var.Name)
			if s.Var.Value != nil {
				val, err := c.compileExpr(s.Var.Value)
				if err != nil {
					return err
				}
				c.buf.WriteString(" = ")
				c.buf.WriteString(val)
			}
			c.buf.WriteString(";\n")
		}
	case s.Assign != nil:
		c.writeIndent()
		val, err := c.compileExpr(s.Assign.Value)
		if err != nil {
			return err
		}
		target := s.Assign.Name
		if len(s.Assign.Field) > 0 {
			return fmt.Errorf("field assignment not supported")
		}
		for _, idx := range s.Assign.Index {
			i, err := c.compileExpr(idx.Start)
			if err != nil {
				return err
			}
			target += fmt.Sprintf("[%s]", i)
		}
		c.buf.WriteString(target)
		c.buf.WriteString(" = ")
		c.buf.WriteString(val)
		c.buf.WriteString(";\n")
	case s.Expr != nil:
		c.writeIndent()
		expr, err := c.compileExpr(s.Expr.Expr)
		if err != nil {
			return err
		}
		c.buf.WriteString(expr)
		c.buf.WriteString(";\n")
	case s.While != nil:
		cond, err := c.compileExpr(s.While.Cond)
		if err != nil {
			return err
		}
		c.writeIndent()
		c.buf.WriteString("while (")
		c.buf.WriteString(cond)
		c.buf.WriteString(") {\n")
		c.indent++
		for _, st := range s.While.Body {
			if err := c.compileStmt(st); err != nil {
				return err
			}
		}
		c.indent--
		c.writeln("}")
	case s.If != nil:
		if err := c.compileIf(s.If, "if"); err != nil {
			return err
		}
	case s.For != nil:
		if err := c.compileFor(s.For); err != nil {
			return err
		}
	case s.Return != nil:
		c.writeIndent()
		if s.Return.Value != nil {
			val, err := c.compileExpr(s.Return.Value)
			if err != nil {
				return err
			}
			c.buf.WriteString("return ")
			c.buf.WriteString(val)
			c.buf.WriteString(";\n")
		} else {
			c.buf.WriteString("return;\n")
		}
	case s.Break != nil:
		c.writeIndent()
		c.buf.WriteString("break;\n")
	case s.Continue != nil:
		c.writeIndent()
		c.buf.WriteString("continue;\n")
	default:
		return fmt.Errorf("unsupported statement at line %d", s.Pos.Line)
	}
	return nil
}

func (c *Compiler) compileExpr(e *parser.Expr) (string, error) {
	if e == nil {
		return "", fmt.Errorf("empty expr")
	}
	if e.Binary != nil {
		left, err := c.compileUnary(e.Binary.Left)
		if err != nil {
			return "", err
		}
		out := left
		for _, op := range e.Binary.Right {
			rhs, err := c.compilePostfix(op.Right)
			if err != nil {
				return "", err
			}
			if op.Op == "in" {
				c.needContains = true
				ln := c.lenExprPostfix(op.Right, rhs)
				out = fmt.Sprintf("contains_int(%s, %s, %s)", rhs, ln, out)
				continue
			}
			out = fmt.Sprintf("(%s %s %s)", out, op.Op, rhs)
		}
		return out, nil
	}
	return "", fmt.Errorf("unsupported expression at line %d", e.Pos.Line)
}

func (c *Compiler) compileIf(ifst *parser.IfStmt, prefix string) error {
	cond, err := c.compileExpr(ifst.Cond)
	if err != nil {
		return err
	}
	c.writeIndent()
	c.buf.WriteString(prefix)
	c.buf.WriteString(" (")
	c.buf.WriteString(cond)
	c.buf.WriteString(") {\n")
	c.indent++
	for _, st := range ifst.Then {
		if err := c.compileStmt(st); err != nil {
			return err
		}
	}
	c.indent--
	c.writeIndent()
	c.buf.WriteString("}")
	if ifst.ElseIf != nil {
		c.buf.WriteString(" else ")
		return c.compileIf(ifst.ElseIf, "if")
	}
	if len(ifst.Else) > 0 {
		c.buf.WriteString(" else {\n")
		c.indent++
		for _, st := range ifst.Else {
			if err := c.compileStmt(st); err != nil {
				return err
			}
		}
		c.indent--
		c.writeIndent()
		c.buf.WriteString("}\n")
	} else {
		c.buf.WriteByte('\n')
	}
	return nil
}

func (c *Compiler) compileFor(fr *parser.ForStmt) error {
	if fr.RangeEnd != nil {
		start, err := c.compileExpr(fr.Source)
		if err != nil {
			return err
		}
		end, err := c.compileExpr(fr.RangeEnd)
		if err != nil {
			return err
		}
		c.writeIndent()
		fmt.Fprintf(&c.buf, "for (int %s = %s; %s < %s; %s++) {\n", fr.Name, start, fr.Name, end, fr.Name)
		c.indent++
		for _, st := range fr.Body {
			if err := c.compileStmt(st); err != nil {
				return err
			}
		}
		c.indent--
		c.writeln("}")
		return nil
	}

	if fr.Source.Binary == nil {
		return fmt.Errorf("unsupported for source")
	}
	srcU := fr.Source.Binary.Left
	srcP := srcU.Value
	arrExpr, err := c.compilePostfix(srcP)
	if err != nil {
		return err
	}
	var lenExpr string
	if srcP.Target.List != nil {
		lenExpr = fmt.Sprintf("%d", len(srcP.Target.List.Elems))
	} else {
		lenExpr = fmt.Sprintf("sizeof(%s)/sizeof(%s[0])", arrExpr, arrExpr)
	}
	idx := "__i"
	c.writeIndent()
	fmt.Fprintf(&c.buf, "for (int %s = 0; %s < %s; %s++) {\n", idx, idx, lenExpr, idx)
	c.indent++
	c.writeIndent()
	fmt.Fprintf(&c.buf, "int %s = %s[%s];\n", fr.Name, arrExpr, idx)
	for _, st := range fr.Body {
		if err := c.compileStmt(st); err != nil {
			return err
		}
	}
	c.indent--
	c.writeln("}")
	return nil
}

func (c *Compiler) compileUnary(u *parser.Unary) (string, error) {
	val, err := c.compilePostfix(u.Value)
	if err != nil {
		return "", err
	}
	for i := len(u.Ops) - 1; i >= 0; i-- {
		val = fmt.Sprintf("(%s%s)", u.Ops[i], val)
	}
	return val, nil
}

func (c *Compiler) compilePostfix(p *parser.PostfixExpr) (string, error) {
	expr, err := c.compilePrimary(p.Target)
	if err != nil {
		return "", err
	}
	for _, op := range p.Ops {
		switch {
		case op.Cast != nil:
			typ, err := c.compileType(op.Cast.Type)
			if err != nil {
				return "", err
			}
			if typ == "int" && strings.HasPrefix(expr, "\"") {
				expr = fmt.Sprintf("atoi(%s)", expr)
			} else {
				expr = fmt.Sprintf("(%s)(%s)", typ, expr)
			}
		case op.Index != nil:
			if op.Index.Start == nil || op.Index.Colon != nil {
				return "", fmt.Errorf("complex indexing not supported")
			}
			idx, err := c.compileExpr(op.Index.Start)
			if err != nil {
				return "", err
			}
			expr = fmt.Sprintf("%s[%s]", expr, idx)
		default:
			return "", fmt.Errorf("postfix operations not supported")
		}
	}
	return expr, nil
}

func (c *Compiler) compilePrimary(p *parser.Primary) (string, error) {
	switch {
	case p.Lit != nil:
		return c.compileLiteral(p.Lit), nil
	case p.Call != nil:
		return c.compileCall(p.Call)
	case p.Selector != nil:
		name := p.Selector.Root
		for _, t := range p.Selector.Tail {
			name += "." + t
		}
		return name, nil
	case p.List != nil:
		elems := make([]string, len(p.List.Elems))
		for i, e := range p.List.Elems {
			s, err := c.compileExpr(e)
			if err != nil {
				return "", err
			}
			elems[i] = s
		}
		return "(int[]){" + strings.Join(elems, ", ") + "}", nil
	case p.Group != nil:
		return c.compileExpr(p.Group)
	default:
		return "", fmt.Errorf("unsupported primary at line %d", p.Pos.Line)
	}
}

func (c *Compiler) compileCall(call *parser.CallExpr) (string, error) {
	args := make([]string, len(call.Args))
	for i, a := range call.Args {
		s, err := c.compileExpr(a)
		if err != nil {
			return "", err
		}
		args[i] = s
	}
	switch call.Func {
	case "print":
		switch len(args) {
		case 1:
			arg := args[0]
			if strings.HasPrefix(arg, "\"") {
				return fmt.Sprintf("printf(\"%s\\n\", %s)", "%s", arg), nil
			}
			return fmt.Sprintf("printf(\"%s\\n\", %s)", "%d", arg), nil
		case 2:
			if strings.HasPrefix(args[0], "\"") {
				return fmt.Sprintf("printf(\"%%s %%d\\n\", %s, %s)", args[0], args[1]), nil
			}
			return "", fmt.Errorf("print unsupported arguments")
		default:
			return "", fmt.Errorf("print expects one or two arguments")
		}
	case "len", "count":
		if len(args) != 1 {
			return "", fmt.Errorf("len expects 1 arg")
		}
		return c.lenExpr(call.Args[0], args[0]), nil
	case "sum":
		if len(args) != 1 {
			return "", fmt.Errorf("sum expects 1 arg")
		}
		c.needSum = true
		ln := c.lenExpr(call.Args[0], args[0])
		return fmt.Sprintf("sum_int(%s, %s)", args[0], ln), nil
	case "avg":
		if len(args) != 1 {
			return "", fmt.Errorf("avg expects 1 arg")
		}
		c.needSum = true
		ln := c.lenExpr(call.Args[0], args[0])
		return fmt.Sprintf("(double)sum_int(%s, %s) / %s", args[0], ln, ln), nil
	case "min":
		if len(args) != 1 {
			return "", fmt.Errorf("min expects 1 arg")
		}
		c.needMin = true
		ln := c.lenExpr(call.Args[0], args[0])
		return fmt.Sprintf("min_int(%s, %s)", args[0], ln), nil
	case "max":
		if len(args) != 1 {
			return "", fmt.Errorf("max expects 1 arg")
		}
		c.needMax = true
		ln := c.lenExpr(call.Args[0], args[0])
		return fmt.Sprintf("max_int(%s, %s)", args[0], ln), nil
	case "substring":
		if len(args) != 3 {
			return "", fmt.Errorf("substring expects 3 args")
		}
		c.needSubstring = true
		c.needString = true
		return fmt.Sprintf("substring(%s, %s, %s)", args[0], args[1], args[2]), nil
	case "str":
		if len(args) != 1 {
			return "", fmt.Errorf("str expects 1 arg")
		}
		return args[0], nil
	}
	return fmt.Sprintf("%s(%s)", call.Func, strings.Join(args, ", ")), nil
}

func (c *Compiler) compileLiteral(l *parser.Literal) string {
	switch {
	case l.Int != nil:
		return fmt.Sprintf("%d", *l.Int)
	case l.Float != nil:
		return fmt.Sprintf("%g", *l.Float)
	case l.Bool != nil:
		if bool(*l.Bool) {
			return "1"
		}
		return "0"
	case l.Str != nil:
		return fmt.Sprintf("%q", *l.Str)
	default:
		return "0"
	}
}

func (c *Compiler) lenExpr(e *parser.Expr, compiled string) string {
	if list := listLiteral(e); list != nil {
		return fmt.Sprintf("%d", len(list.Elems))
	}
	if strings.HasPrefix(compiled, "\"") {
		c.needString = true
		return fmt.Sprintf("strlen(%s)", compiled)
	}
	return fmt.Sprintf("sizeof(%s)/sizeof(%s[0])", compiled, compiled)
}

func (c *Compiler) lenExprPostfix(p *parser.PostfixExpr, compiled string) string {
	if lst := listLiteralPostfix(p); lst != nil {
		return fmt.Sprintf("%d", len(lst.Elems))
	}
	return fmt.Sprintf("sizeof(%s)/sizeof(%s[0])", compiled, compiled)
}

func listLiteralPostfix(p *parser.PostfixExpr) *parser.ListLiteral {
	if len(p.Ops) > 0 || p.Target == nil {
		return nil
	}
	return p.Target.List
}

func (c *Compiler) compileType(t *parser.TypeRef) (string, error) {
	if t == nil {
		return "int", nil
	}
	if t.Simple != nil {
		switch *t.Simple {
		case "int", "bool":
			return "int", nil
		case "string":
			return "const char*", nil
		}
	}
	return "int", nil
}

func listLiteral(e *parser.Expr) *parser.ListLiteral {
	if e == nil || e.Binary == nil || len(e.Binary.Right) > 0 {
		return nil
	}
	u := e.Binary.Left
	if len(u.Ops) > 0 || u.Value == nil || len(u.Value.Ops) > 0 {
		return nil
	}
	return u.Value.Target.List
}
