//go:build slow

package c

import (
	"bytes"
	"fmt"
	"strings"

	"mochi/parser"
	"mochi/types"
)

// Compiler converts a small subset of Mochi into C source code.
// Only basic statements and expressions used in simple examples are
// supported at the moment. Unsupported constructs return an error so
// the tests can record the failure.
type Compiler struct {
	buf    bytes.Buffer
	indent int
	env    *types.Env
	vars   map[string]string
	arrLen map[string]int

	printList  bool
	containsFn bool
	sumFn      bool
	avgFn      bool
	minFn      bool
	maxFn      bool
	substrFn   bool
	strFn      bool
}

// New creates a new Compiler instance.
func New(env *types.Env) *Compiler {
	return &Compiler{env: env, vars: make(map[string]string), arrLen: make(map[string]int)}
}

// Compile translates the parsed program into C code.
func (c *Compiler) Compile(p *parser.Program) ([]byte, error) {
	c.buf.Reset()
	c.indent = 0
	var body bytes.Buffer
	saved := c.buf
	c.buf = body

	for _, st := range p.Statements {
		if st.Fun != nil {
			if err := c.compileFun(st.Fun); err != nil {
				return nil, err
			}
			c.writeln("")
		}
	}

	c.writeln("int main() {")
	c.indent++
	for _, st := range p.Statements {
		if st.Fun != nil {
			continue
		}
		if err := c.compileStmt(st); err != nil {
			return nil, err
		}
	}
	c.writeln("return 0;")
	c.indent--
	c.writeln("}")

	bodyBytes := c.buf.Bytes()
	c.buf = saved
	c.buf.Reset()
	c.indent = 0
	c.writeln("// Generated by Mochi experimental C compiler")
	c.writeln("#include <stdio.h>")
	c.writeln("#include <stdbool.h>")
	c.writeln("#include <stdlib.h>")
	c.writeln("#include <string.h>")
	c.writeln("")

	if c.printList {
		c.writeln(`static void print_list(const int *a, int n) {`)
		c.indent++
		c.writeln(`printf("[");`)
		c.writeln(`for (int i = 0; i < n; i++) {`)
		c.indent++
		c.writeln(`if (i > 0) printf(", ");`)
		c.writeln(`printf("%d", a[i]);`)
		c.indent--
		c.writeln(`}`)
		c.writeln(`printf("]\n");`)
		c.indent--
		c.writeln(`}`)
		c.writeln("")
	}
	if c.containsFn {
		c.writeln(`static bool contains(const int *a, int n, int v) {`)
		c.indent++
		c.writeln(`for (int i = 0; i < n; i++) {`)
		c.indent++
		c.writeln(`if (a[i] == v) return true;`)
		c.indent--
		c.writeln(`}`)
		c.writeln(`return false;`)
		c.indent--
		c.writeln(`}`)
		c.writeln("")
	}
	if c.sumFn {
		c.writeln(`static int sum_list(const int *a, int n) {`)
		c.indent++
		c.writeln(`int s = 0;`)
		c.writeln(`for (int i = 0; i < n; i++) s += a[i];`)
		c.writeln(`return s;`)
		c.indent--
		c.writeln(`}`)
		c.writeln("")
	}
	if c.avgFn {
		c.writeln(`static double avg_list(const int *a, int n) {`)
		c.indent++
		c.writeln(`return sum_list(a, n) / (double)n;`)
		c.indent--
		c.writeln(`}`)
		c.writeln("")
	}
	if c.minFn {
		c.writeln(`static int min_list(const int *a, int n) {`)
		c.indent++
		c.writeln(`int m = a[0];`)
		c.writeln(`for (int i = 1; i < n; i++) if (a[i] < m) m = a[i];`)
		c.writeln(`return m;`)
		c.indent--
		c.writeln(`}`)
		c.writeln("")
	}
	if c.maxFn {
		c.writeln(`static int max_list(const int *a, int n) {`)
		c.indent++
		c.writeln(`int m = a[0];`)
		c.writeln(`for (int i = 1; i < n; i++) if (a[i] > m) m = a[i];`)
		c.writeln(`return m;`)
		c.indent--
		c.writeln(`}`)
		c.writeln("")
	}
	if c.substrFn {
		c.writeln(`static const char* substring(const char *s, int start, int end) {`)
		c.indent++
		c.writeln(`static char buf[1024];`)
		c.writeln(`int n = end - start;`)
		c.writeln(`strncpy(buf, s + start, n);`)
		c.writeln(`buf[n] = '\0';`)
		c.writeln(`return buf;`)
		c.indent--
		c.writeln(`}`)
		c.writeln("")
	}
	if c.strFn {
		c.writeln(`static const char* str_int(int v) {`)
		c.indent++
		c.writeln(`static char buf[32];`)
		c.writeln(`sprintf(buf, "%d", v);`)
		c.writeln(`return buf;`)
		c.indent--
		c.writeln(`}`)
		c.writeln("")
	}

	c.buf.Write(bodyBytes)
	return c.buf.Bytes(), nil
}

func (c *Compiler) writeln(s string) {
	for i := 0; i < c.indent; i++ {
		c.buf.WriteString("    ")
	}
	c.buf.WriteString(s)
	c.buf.WriteByte('\n')
}

func (c *Compiler) writeIndent() {
	for i := 0; i < c.indent; i++ {
		c.buf.WriteString("    ")
	}
}

func (c *Compiler) compileFun(fn *parser.FunStmt) error {
	old := c.vars
	c.vars = make(map[string]string)
	c.writeIndent()
	ret, _ := c.compileType(fn.Return)
	c.buf.WriteString(ret)
	c.buf.WriteByte(' ')
	c.buf.WriteString(fn.Name)
	c.buf.WriteString("(")
	for i, p := range fn.Params {
		if i > 0 {
			c.buf.WriteString(", ")
		}
		pt, _ := c.compileType(p.Type)
		c.buf.WriteString(pt)
		c.buf.WriteByte(' ')
		c.buf.WriteString(p.Name)
		c.vars[p.Name] = pt
	}
	c.buf.WriteString(") {\n")
	c.indent++
	for _, st := range fn.Body {
		if err := c.compileStmt(st); err != nil {
			c.vars = old
			return err
		}
	}
	c.indent--
	c.writeln("}")
	c.vars = old
	return nil
}

func (c *Compiler) compileStmt(s *parser.Statement) error {
	switch {
	case s.Let != nil:
		c.writeIndent()
		if lst := listLiteral(s.Let.Value); lst != nil {
			elems := make([]string, len(lst.Elems))
			for i, e := range lst.Elems {
				s, err := c.compileExpr(e)
				if err != nil {
					return err
				}
				elems[i] = s
			}
			fmt.Fprintf(&c.buf, "int %s[] = {%s};\n", s.Let.Name, strings.Join(elems, ", "))
			c.vars[s.Let.Name] = "int[]"
			c.arrLen[s.Let.Name] = len(lst.Elems)
		} else {
			typ, _ := c.compileType(s.Let.Type)
			if typ == "int" && isStringLiteral(s.Let.Value) {
				typ = "const char*"
			}
			c.buf.WriteString(typ)
			c.buf.WriteByte(' ')
			c.buf.WriteString(s.Let.Name)
			if s.Let.Value != nil {
				val, err := c.compileExpr(s.Let.Value)
				if err != nil {
					return err
				}
				c.buf.WriteString(" = ")
				c.buf.WriteString(val)
			}
			c.buf.WriteString(";\n")
			c.vars[s.Let.Name] = typ
		}
	case s.Var != nil:
		c.writeIndent()
		if lst := listLiteral(s.Var.Value); lst != nil {
			elems := make([]string, len(lst.Elems))
			for i, e := range lst.Elems {
				s, err := c.compileExpr(e)
				if err != nil {
					return err
				}
				elems[i] = s
			}
			fmt.Fprintf(&c.buf, "int %s[] = {%s};\n", s.Var.Name, strings.Join(elems, ", "))
			c.vars[s.Var.Name] = "int[]"
			c.arrLen[s.Var.Name] = len(lst.Elems)
		} else {
			typ, _ := c.compileType(s.Var.Type)
			if typ == "int" && isStringLiteral(s.Var.Value) {
				typ = "const char*"
			}
			c.buf.WriteString(typ)
			c.buf.WriteByte(' ')
			c.buf.WriteString(s.Var.Name)
			if s.Var.Value != nil {
				val, err := c.compileExpr(s.Var.Value)
				if err != nil {
					return err
				}
				c.buf.WriteString(" = ")
				c.buf.WriteString(val)
			}
			c.buf.WriteString(";\n")
			c.vars[s.Var.Name] = typ
		}
	case s.Assign != nil:
		c.writeIndent()
		val, err := c.compileExpr(s.Assign.Value)
		if err != nil {
			return err
		}
		target := s.Assign.Name
		if len(s.Assign.Field) > 0 {
			return fmt.Errorf("field assignment not supported")
		}
		for _, idx := range s.Assign.Index {
			i, err := c.compileExpr(idx.Start)
			if err != nil {
				return err
			}
			target += fmt.Sprintf("[%s]", i)
		}
		c.buf.WriteString(target)
		c.buf.WriteString(" = ")
		c.buf.WriteString(val)
		c.buf.WriteString(";\n")
	case s.Expr != nil:
		c.writeIndent()
		expr, err := c.compileExpr(s.Expr.Expr)
		if err != nil {
			return err
		}
		c.buf.WriteString(expr)
		c.buf.WriteString(";\n")
	case s.While != nil:
		cond, err := c.compileExpr(s.While.Cond)
		if err != nil {
			return err
		}
		c.writeIndent()
		c.buf.WriteString("while (")
		c.buf.WriteString(cond)
		c.buf.WriteString(") {\n")
		c.indent++
		for _, st := range s.While.Body {
			if err := c.compileStmt(st); err != nil {
				return err
			}
		}
		c.indent--
		c.writeln("}")
	case s.If != nil:
		if err := c.compileIf(s.If, "if"); err != nil {
			return err
		}
	case s.For != nil:
		if err := c.compileFor(s.For); err != nil {
			return err
		}
	case s.Return != nil:
		c.writeIndent()
		if s.Return.Value != nil {
			val, err := c.compileExpr(s.Return.Value)
			if err != nil {
				return err
			}
			c.buf.WriteString("return ")
			c.buf.WriteString(val)
			c.buf.WriteString(";\n")
		} else {
			c.buf.WriteString("return;\n")
		}
	case s.Break != nil:
		c.writeIndent()
		c.buf.WriteString("break;\n")
	case s.Continue != nil:
		c.writeIndent()
		c.buf.WriteString("continue;\n")
	default:
		return fmt.Errorf("unsupported statement at line %d", s.Pos.Line)
	}
	return nil
}

func (c *Compiler) compileExpr(e *parser.Expr) (string, error) {
	if e == nil {
		return "", fmt.Errorf("empty expr")
	}
	if e.Binary != nil {
		// special case: single 'in' operator
		if len(e.Binary.Right) == 1 && e.Binary.Right[0].Op == "in" {
			rhsStr, err := c.compilePostfix(e.Binary.Right[0].Right)
			if err != nil {
				return "", err
			}
			leftStr, err := c.compileUnary(e.Binary.Left)
			if err != nil {
				return "", err
			}
			rhsExpr := exprFromPostfix(e.Binary.Right[0].Right)
			rt := types.TypeOfExpr(rhsExpr, c.env)
			if types.IsStringType(rt) {
				return fmt.Sprintf("(strstr(%s, %s) != NULL)", rhsStr, leftStr), nil
			}
			if _, ok := rt.(types.ListType); ok {
				ln, err := c.lenExpr(rhsExpr)
				if err != nil {
					return "", err
				}
				c.containsFn = true
				return fmt.Sprintf("contains(%s, %s, %s)", rhsStr, ln, leftStr), nil
			}
			return "", fmt.Errorf("in unsupported")
		}

		left, err := c.compileUnary(e.Binary.Left)
		if err != nil {
			return "", err
		}
		out := left
		isStr := types.IsStringType(types.TypeOfUnary(e.Binary.Left, c.env))
		for _, op := range e.Binary.Right {
			rhs, err := c.compilePostfix(op.Right)
			if err != nil {
				return "", err
			}
			rhsE := exprFromPostfix(op.Right)
			if op.Op == "+" && (isStr || c.exprIsString(rhsE)) {
				if isStringLiteralExpr(out) && isStringLiteral(rhsE) {
					out = fmt.Sprintf("%q", strings.Trim(out, "\"")+strings.Trim(rhs, "\""))
				} else {
					return "", fmt.Errorf("string concat unsupported")
				}
				isStr = true
				continue
			}
			out = fmt.Sprintf("(%s %s %s)", out, op.Op, rhs)
			isStr = false
		}
		return out, nil
	}
	return "", fmt.Errorf("unsupported expression at line %d", e.Pos.Line)
}

func (c *Compiler) compileIf(ifst *parser.IfStmt, prefix string) error {
	cond, err := c.compileExpr(ifst.Cond)
	if err != nil {
		return err
	}
	c.writeIndent()
	c.buf.WriteString(prefix)
	c.buf.WriteString(" (")
	c.buf.WriteString(cond)
	c.buf.WriteString(") {\n")
	c.indent++
	for _, st := range ifst.Then {
		if err := c.compileStmt(st); err != nil {
			return err
		}
	}
	c.indent--
	c.writeIndent()
	c.buf.WriteString("}")
	if ifst.ElseIf != nil {
		c.buf.WriteString(" else ")
		return c.compileIf(ifst.ElseIf, "if")
	}
	if len(ifst.Else) > 0 {
		c.buf.WriteString(" else {\n")
		c.indent++
		for _, st := range ifst.Else {
			if err := c.compileStmt(st); err != nil {
				return err
			}
		}
		c.indent--
		c.writeIndent()
		c.buf.WriteString("}\n")
	} else {
		c.buf.WriteByte('\n')
	}
	return nil
}

func (c *Compiler) compileFor(fr *parser.ForStmt) error {
	if fr.RangeEnd != nil {
		start, err := c.compileExpr(fr.Source)
		if err != nil {
			return err
		}
		end, err := c.compileExpr(fr.RangeEnd)
		if err != nil {
			return err
		}
		c.writeIndent()
		fmt.Fprintf(&c.buf, "for (int %s = %s; %s < %s; %s++) {\n", fr.Name, start, fr.Name, end, fr.Name)
		c.indent++
		for _, st := range fr.Body {
			if err := c.compileStmt(st); err != nil {
				return err
			}
		}
		c.indent--
		c.writeln("}")
		return nil
	}

	if fr.Source.Binary == nil {
		return fmt.Errorf("unsupported for source")
	}
	srcU := fr.Source.Binary.Left
	srcP := srcU.Value
	arrExpr, err := c.compilePostfix(srcP)
	if err != nil {
		return err
	}
	var lenExpr string
	if srcP.Target.List != nil {
		lenExpr = fmt.Sprintf("%d", len(srcP.Target.List.Elems))
	} else {
		lenExpr = fmt.Sprintf("sizeof(%s)/sizeof(%s[0])", arrExpr, arrExpr)
	}
	idx := "__i"
	c.writeIndent()
	fmt.Fprintf(&c.buf, "for (int %s = 0; %s < %s; %s++) {\n", idx, idx, lenExpr, idx)
	c.indent++
	c.writeIndent()
	fmt.Fprintf(&c.buf, "int %s = %s[%s];\n", fr.Name, arrExpr, idx)
	for _, st := range fr.Body {
		if err := c.compileStmt(st); err != nil {
			return err
		}
	}
	c.indent--
	c.writeln("}")
	return nil
}

func (c *Compiler) compileUnary(u *parser.Unary) (string, error) {
	val, err := c.compilePostfix(u.Value)
	if err != nil {
		return "", err
	}
	for i := len(u.Ops) - 1; i >= 0; i-- {
		val = fmt.Sprintf("(%s%s)", u.Ops[i], val)
	}
	return val, nil
}

func (c *Compiler) compilePostfix(p *parser.PostfixExpr) (string, error) {
	expr, err := c.compilePrimary(p.Target)
	if err != nil {
		return "", err
	}
	for _, op := range p.Ops {
		switch {
		case op.Cast != nil:
			typ, err := c.compileType(op.Cast.Type)
			if err != nil {
				return "", err
			}
			if typ == "int" && strings.HasPrefix(expr, "\"") {
				expr = fmt.Sprintf("atoi(%s)", expr)
			} else {
				expr = fmt.Sprintf("(%s)(%s)", typ, expr)
			}
		case op.Index != nil:
			if op.Index.Start == nil || op.Index.Colon != nil {
				return "", fmt.Errorf("complex indexing not supported")
			}
			idx, err := c.compileExpr(op.Index.Start)
			if err != nil {
				return "", err
			}
			expr = fmt.Sprintf("%s[%s]", expr, idx)
		default:
			return "", fmt.Errorf("postfix operations not supported")
		}
	}
	return expr, nil
}

func (c *Compiler) compilePrimary(p *parser.Primary) (string, error) {
	switch {
	case p.Lit != nil:
		return c.compileLiteral(p.Lit), nil
	case p.Call != nil:
		return c.compileCall(p.Call)
	case p.Selector != nil:
		name := p.Selector.Root
		for _, t := range p.Selector.Tail {
			name += "." + t
		}
		return name, nil
	case p.List != nil:
		elems := make([]string, len(p.List.Elems))
		for i, e := range p.List.Elems {
			s, err := c.compileExpr(e)
			if err != nil {
				return "", err
			}
			elems[i] = s
		}
		return "(int[]){" + strings.Join(elems, ", ") + "}", nil
	case p.Group != nil:
		return c.compileExpr(p.Group)
	default:
		return "", fmt.Errorf("unsupported primary at line %d", p.Pos.Line)
	}
}

func (c *Compiler) compileCall(call *parser.CallExpr) (string, error) {
	args := make([]string, len(call.Args))
	for i, a := range call.Args {
		s, err := c.compileExpr(a)
		if err != nil {
			return "", err
		}
		args[i] = s
	}
	if call.Func == "print" {
		switch len(args) {
		case 1:
			arg := args[0]
			t := types.TypeOfExpr(call.Args[0], c.env)
			if lt, ok := t.(types.ListType); ok {
				if _, ok := lt.Elem.(types.IntType); ok {
					ln, err := c.lenExpr(call.Args[0])
					if err != nil {
						return "", err
					}
					c.printList = true
					return fmt.Sprintf("print_list(%s, %s)", arg, ln), nil
				}
			}
			if isStringIndex(call.Args[0], c) {
				return fmt.Sprintf("printf(\"%%c\\n\", %s)", arg), nil
			}
			if strings.HasPrefix(arg, "\"") || c.exprIsString(call.Args[0]) {
				return fmt.Sprintf("printf(\"%s\\n\", %s)", "%s", arg), nil
			}
			if _, ok := types.TypeOfExpr(call.Args[0], c.env).(types.FloatType); ok {
				return fmt.Sprintf("printf(\"%s\\n\", %s)", "%g", arg), nil
			}
			return fmt.Sprintf("printf(\"%s\\n\", %s)", "%d", arg), nil
		case 2:
			if strings.HasPrefix(args[0], "\"") {
				return fmt.Sprintf("printf(\"%%s %%d\\n\", %s, %s)", args[0], args[1]), nil
			}
			return "", fmt.Errorf("print unsupported arguments")
		default:
			return "", fmt.Errorf("print expects one or two arguments")
		}
	} else if call.Func == "len" {
		if len(args) != 1 {
			return "", fmt.Errorf("len expects 1 arg")
		}
		if lst := listLiteral(call.Args[0]); lst != nil {
			return fmt.Sprintf("%d", len(lst.Elems)), nil
		}
		if name := simpleIdent(call.Args[0]); name != "" {
			if c.vars[name] == "int[]" {
				return fmt.Sprintf("sizeof(%s)/sizeof(%s[0])", name, name), nil
			}
			if c.vars[name] == "const char*" {
				return fmt.Sprintf("strlen(%s)", name), nil
			}
		}
		if c.exprIsString(call.Args[0]) {
			return fmt.Sprintf("strlen(%s)", args[0]), nil
		}
		return "", fmt.Errorf("len unsupported")
	} else if call.Func == "append" {
		if len(args) != 2 {
			return "", fmt.Errorf("append expects 2 args")
		}
		base := call.Args[0]
		valStr := args[1]
		if lst := listLiteral(base); lst != nil {
			elems := make([]string, len(lst.Elems)+1)
			for i, e := range lst.Elems {
				s, err := c.compileExpr(e)
				if err != nil {
					return "", err
				}
				elems[i] = s
			}
			elems[len(lst.Elems)] = valStr
			return "(int[]){" + strings.Join(elems, ", ") + "}", nil
		}
		if name := simpleIdent(base); name != "" {
			if n, ok := c.arrLen[name]; ok {
				elems := make([]string, n+1)
				for i := 0; i < n; i++ {
					elems[i] = fmt.Sprintf("%s[%d]", name, i)
				}
				elems[n] = valStr
				return "(int[]){" + strings.Join(elems, ", ") + "}", nil
			}
		}
		return "", fmt.Errorf("append unsupported")
	} else if call.Func == "count" {
		if len(args) != 1 {
			return "", fmt.Errorf("count expects 1 arg")
		}
		ln, err := c.lenExpr(call.Args[0])
		if err != nil {
			return "", err
		}
		return ln, nil
	} else if call.Func == "avg" {
		if len(args) != 1 {
			return "", fmt.Errorf("avg expects 1 arg")
		}
		ln, err := c.lenExpr(call.Args[0])
		if err != nil {
			return "", err
		}
		c.avgFn = true
		c.sumFn = true
		return fmt.Sprintf("avg_list(%s, %s)", args[0], ln), nil
	} else if call.Func == "sum" {
		if len(args) != 1 {
			return "", fmt.Errorf("sum expects 1 arg")
		}
		ln, err := c.lenExpr(call.Args[0])
		if err != nil {
			return "", err
		}
		c.sumFn = true
		return fmt.Sprintf("sum_list(%s, %s)", args[0], ln), nil
	} else if call.Func == "min" {
		if len(args) != 1 {
			return "", fmt.Errorf("min expects 1 arg")
		}
		ln, err := c.lenExpr(call.Args[0])
		if err != nil {
			return "", err
		}
		c.minFn = true
		return fmt.Sprintf("min_list(%s, %s)", args[0], ln), nil
	} else if call.Func == "max" {
		if len(args) != 1 {
			return "", fmt.Errorf("max expects 1 arg")
		}
		ln, err := c.lenExpr(call.Args[0])
		if err != nil {
			return "", err
		}
		c.maxFn = true
		return fmt.Sprintf("max_list(%s, %s)", args[0], ln), nil
	} else if call.Func == "substring" {
		if len(args) != 3 {
			return "", fmt.Errorf("substring expects 3 args")
		}
		c.substrFn = true
		return fmt.Sprintf("substring(%s, %s, %s)", args[0], args[1], args[2]), nil
	} else if call.Func == "str" {
		if len(args) != 1 {
			return "", fmt.Errorf("str expects 1 arg")
		}
		if _, ok := types.TypeOfExpr(call.Args[0], c.env).(types.IntType); ok {
			c.strFn = true
			return fmt.Sprintf("str_int(%s)", args[0]), nil
		}
		return args[0], nil
	}
	return fmt.Sprintf("%s(%s)", call.Func, strings.Join(args, ", ")), nil
}

func (c *Compiler) compileLiteral(l *parser.Literal) string {
	switch {
	case l.Int != nil:
		return fmt.Sprintf("%d", *l.Int)
	case l.Float != nil:
		return fmt.Sprintf("%g", *l.Float)
	case l.Bool != nil:
		if bool(*l.Bool) {
			return "1"
		}
		return "0"
	case l.Str != nil:
		return fmt.Sprintf("%q", *l.Str)
	default:
		return "0"
	}
}

func (c *Compiler) compileType(t *parser.TypeRef) (string, error) {
	if t == nil {
		return "int", nil
	}
	if t.Simple != nil {
		switch *t.Simple {
		case "int", "bool":
			return "int", nil
		case "string":
			return "const char*", nil
		}
	}
	return "int", nil
}

func (c *Compiler) lenExpr(e *parser.Expr) (string, error) {
	if lst := listLiteral(e); lst != nil {
		return fmt.Sprintf("%d", len(lst.Elems)), nil
	}
	if name := simpleIdent(e); name != "" {
		if n, ok := c.arrLen[name]; ok {
			return fmt.Sprintf("%d", n), nil
		}
		if c.vars[name] == "int[]" {
			return fmt.Sprintf("sizeof(%s)/sizeof(%s[0])", name, name), nil
		}
	}
	return "", fmt.Errorf("unknown length")
}

func isStringLiteral(e *parser.Expr) bool {
	if e == nil || e.Binary == nil || len(e.Binary.Right) > 0 {
		return false
	}
	u := e.Binary.Left
	if u.Value == nil || len(u.Ops) > 0 || len(u.Value.Ops) > 0 {
		return false
	}
	return u.Value.Target.Lit != nil && u.Value.Target.Lit.Str != nil
}

func isStringLiteralExpr(s string) bool {
	return strings.HasPrefix(s, "\"") && strings.HasSuffix(s, "\"")
}

func simpleIdent(e *parser.Expr) string {
	if e == nil || e.Binary == nil || len(e.Binary.Right) > 0 {
		return ""
	}
	u := e.Binary.Left
	if len(u.Ops) > 0 || u.Value == nil || len(u.Value.Ops) > 0 {
		return ""
	}
	if u.Value.Target.Selector != nil && len(u.Value.Target.Selector.Tail) == 0 {
		return u.Value.Target.Selector.Root
	}
	return ""
}

func (c *Compiler) exprIsString(e *parser.Expr) bool {
	t := types.TypeOfExpr(e, c.env)
	return types.IsStringType(t)
}

func isStringIndex(e *parser.Expr, c *Compiler) bool {
	if e == nil || e.Binary == nil || len(e.Binary.Right) > 0 {
		return false
	}
	u := e.Binary.Left
	if u.Value == nil || len(u.Value.Ops) != 1 {
		return false
	}
	idx := u.Value.Ops[0]
	if idx.Index == nil || idx.Index.Start == nil || idx.Index.Colon != nil {
		return false
	}
	base := u.Value.Target
	if base.Lit != nil && base.Lit.Str != nil {
		return true
	}
	if base.Selector != nil {
		name := base.Selector.Root
		if c.vars[name] == "const char*" {
			return true
		}
	}
	return false
}

func listLiteral(e *parser.Expr) *parser.ListLiteral {
	if e == nil || e.Binary == nil || len(e.Binary.Right) > 0 {
		return nil
	}
	u := e.Binary.Left
	if len(u.Ops) > 0 || u.Value == nil || len(u.Value.Ops) > 0 {
		return nil
	}
	return u.Value.Target.List
}

func exprFromPostfix(p *parser.PostfixExpr) *parser.Expr {
	return &parser.Expr{Binary: &parser.BinaryExpr{Left: &parser.Unary{Value: p}}}
}
