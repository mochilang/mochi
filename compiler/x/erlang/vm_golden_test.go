//go:build slow

package erlang_test

import (
	"bytes"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"testing"

	erlang "mochi/compiler/x/erlang"
	"mochi/compiler/x/testutil"
	"mochi/parser"
	"mochi/types"
)

func stripHeaderVM(b []byte) []byte {
	if bytes.HasPrefix(b, []byte("#!")) {
		if i := bytes.IndexByte(b, '\n'); i != -1 {
			b = b[i+1:]
		}
	}
	if i := bytes.IndexByte(b, '\n'); i != -1 && bytes.HasPrefix(b, []byte("% Generated by Mochi")) {
		return b[i+1:]
	}
	return b
}

func TestErlangCompiler_VMValid(t *testing.T) {
	if _, err := exec.LookPath("escript"); err != nil {
		t.Skip("escript not installed")
	}
	root := testutil.FindRepoRoot(t)
	srcDir := filepath.Join(root, "tests", "vm", "valid")
	outDir := filepath.Join(root, "tests", "machine", "x", "erlang")
	files, err := filepath.Glob(filepath.Join(srcDir, "*.mochi"))
	if err != nil {
		t.Fatalf("glob: %v", err)
	}
	for _, src := range files {
		name := strings.TrimSuffix(filepath.Base(src), ".mochi")
		codeWant := filepath.Join(outDir, name+".erl")
		outWant := filepath.Join(outDir, name+".out")
		errWant := filepath.Join(outDir, name+".error")
		t.Run(name, func(t *testing.T) {
			prog, err := parser.Parse(src)
			if err != nil {
				t.Fatalf("parse error: %v", err)
			}
			env := types.NewEnv(nil)
			if errs := types.Check(prog, env); len(errs) > 0 {
				t.Fatalf("type error: %v", errs[0])
			}
			code, err := erlang.New(src).Compile(prog)
			if err != nil {
				if data, err2 := os.ReadFile(errWant); err2 == nil {
					t.Skipf("compile error: %v\n%s", err, data)
				}
				t.Fatalf("compile error: %v", err)
			}
			if want, err := os.ReadFile(codeWant); err == nil {
				got := bytes.TrimSpace(stripHeaderVM(code))
				wantBytes := bytes.TrimSpace(stripHeaderVM(want))
				if !bytes.Equal(got, wantBytes) {
					t.Errorf("generated code mismatch for %s.erl\n\n--- Got ---\n%s\n\n--- Want ---\n%s", name, got, wantBytes)
				}
			}
			dir := t.TempDir()
			file := filepath.Join(dir, "main.erl")
			if err := os.WriteFile(file, code, 0644); err != nil {
				t.Fatalf("write error: %v", err)
			}
			cmd := exec.Command("escript", file)
			if data, err := os.ReadFile(strings.TrimSuffix(src, ".mochi") + ".in"); err == nil {
				cmd.Stdin = bytes.NewReader(data)
			}
			outBytes, err := cmd.CombinedOutput()
			if err != nil {
				if data, err2 := os.ReadFile(errWant); err2 == nil {
					t.Skipf("escript error: %v\n%s", err, data)
				}
				t.Fatalf("escript error: %v\n%s", err, outBytes)
			}
			gotOut := bytes.TrimSpace(outBytes)
			if wantOut, err := os.ReadFile(outWant); err == nil {
				if !bytes.Equal(gotOut, bytes.TrimSpace(wantOut)) {
					t.Errorf("output mismatch for %s.out\n\n--- Got ---\n%s\n\n--- Want ---\n%s", name, gotOut, bytes.TrimSpace(wantOut))
				}
			}
		})
	}
}
