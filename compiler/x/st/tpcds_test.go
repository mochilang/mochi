//go:build slow

package st_test

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"testing"

	st "mochi/compiler/x/st"
	"mochi/compiler/x/testutil"
	"mochi/parser"
	"mochi/types"
)

func stripHeaderTPCDS(b []byte) []byte {
	if i := bytes.IndexByte(b, '\n'); i != -1 && bytes.HasPrefix(b, []byte("\" Generated by Mochi")) {
		return b[i+1:]
	}
	return b
}

func runTPCDSQuery(t *testing.T, base, gstPath string) {
	root := testutil.FindRepoRoot(t)
	src := filepath.Join(root, "tests", "dataset", "tpc-ds", base+".mochi")
	prog, err := parser.Parse(src)
	if err != nil {
		t.Fatalf("parse error: %v", err)
	}
	env := types.NewEnv(nil)
	if errs := types.Check(prog, env); len(errs) > 0 {
		t.Fatalf("type error: %v", errs[0])
	}
	code, err := st.New().Compile(prog)
	if err != nil {
		t.Fatalf("compile error: %v", err)
	}
	codeWant := filepath.Join(root, "tests", "dataset", "tpc-ds", "compiler", "st", base+".st.out")
	if _, err := os.Stat(codeWant); err != nil {
		t.Skip("missing golden code")
	}
	wantCode, err := os.ReadFile(codeWant)
	if err != nil {
		t.Fatalf("read golden: %v", err)
	}
	got := stripHeaderTPCDS(bytes.TrimSpace(code))
	want := stripHeaderTPCDS(bytes.TrimSpace(wantCode))
	if !bytes.Equal(got, want) {
		t.Errorf("generated code mismatch for %s.st.out\n\n--- Got ---\n%s\n\n--- Want ---\n%s", base, got, want)
	}
	if gstPath == "" {
		t.Skip("gst not installed")
	}
	dir := t.TempDir()
	file := filepath.Join(dir, base+".st")
	if err := os.WriteFile(file, code, 0644); err != nil {
		t.Fatalf("write error: %v", err)
	}
	cmd := exec.Command(gstPath, file)
	out, err := cmd.CombinedOutput()
	if err != nil {
		t.Skipf("gst run error: %v\n%s", err, out)
		return
	}
	gotOut := bytes.TrimSpace(out)
	outWant := filepath.Join(root, "tests", "dataset", "tpc-ds", "compiler", "st", base+".out")
	wantOut, err := os.ReadFile(outWant)
	if err != nil {
		t.Skipf("read golden: %v", err)
		return
	}
	if !bytes.Equal(gotOut, bytes.TrimSpace(wantOut)) {
		t.Errorf("output mismatch for %s.out\n\n--- Got ---\n%s\n\n--- Want ---\n%s", base, gotOut, bytes.TrimSpace(wantOut))
	}
}

func TestSTCompiler_TPCDSQueries(t *testing.T) {
	gstPath := ensureGST()
	root := testutil.FindRepoRoot(t)
	for i := 1; i <= 99; i++ {
		base := fmt.Sprintf("q%d", i)
		if _, err := os.Stat(filepath.Join(root, "tests", "dataset", "tpc-ds", "compiler", "st", base+".st.out")); err != nil {
			continue
		}
		t.Run(base, func(t *testing.T) { runTPCDSQuery(t, base, gstPath) })
	}
}
