//go:build slow

package smalltalk_test

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"testing"

	st "mochi/compiler/x/smalltalk"
	"mochi/compiler/x/testutil"
	"mochi/parser"
	"mochi/types"
)

func shouldUpdate() bool {
	if v, ok := os.LookupEnv("UPDATE"); ok && (v == "1" || v == "true") {
		return true
	}
	return false
}

func stripHeader(b []byte) []byte {
	if i := bytes.IndexByte(b, '\n'); i != -1 && bytes.HasPrefix(b, []byte("\" Generated by Mochi")) {
		return b[i+1:]
	}
	return b
}

func runVMGolden(t *testing.T, srcPath string, gstPath string) {
	root := testutil.FindRepoRoot(t)
	name := strings.TrimSuffix(filepath.Base(srcPath), ".mochi")
	outDir := filepath.Join(root, "tests", "machine", "x", "st")

	prog, err := parser.Parse(srcPath)
	if err != nil {
		t.Fatalf("parse error: %v", err)
	}
	env := types.NewEnv(nil)
	if errs := types.Check(prog, env); len(errs) > 0 {
		t.Fatalf("type error: %v", errs[0])
	}
	code, err := st.New().Compile(prog)
	if err != nil {
		t.Fatalf("compile error: %v", err)
	}

	wantCode := filepath.Join(outDir, name+".st")
	got := stripHeader(bytes.TrimSpace(code))
	if shouldUpdate() {
		if err := os.WriteFile(wantCode, append(got, '\n'), 0644); err != nil {
			t.Fatalf("write golden: %v", err)
		}
	} else if want, err := os.ReadFile(wantCode); err == nil {
		if !bytes.Equal(got, stripHeader(bytes.TrimSpace(want))) {
			t.Errorf("generated code mismatch for %s.st\n\n--- Got ---\n%s\n\n--- Want ---\n%s", name, got, bytes.TrimSpace(stripHeader(want)))
		}
	}

	if gstPath == "" {
		_ = os.WriteFile(filepath.Join(outDir, name+".error"), []byte("gst interpreter not available"), 0644)
		return
	}
	dir := t.TempDir()
	file := filepath.Join(dir, name+".st")
	if err := os.WriteFile(file, code, 0644); err != nil {
		t.Fatalf("write error: %v", err)
	}
	cmd := exec.Command(gstPath, file)
	var buf bytes.Buffer
	cmd.Stderr = &buf
	out, err := cmd.Output()
	if err != nil {
		_ = os.WriteFile(filepath.Join(outDir, name+".error"), []byte(fmt.Sprintf("run: %v\n%s", err, buf.String())), 0644)
		return
	}
	_ = os.Remove(filepath.Join(outDir, name+".error"))
	gotOut := bytes.TrimSpace(out)
	wantOutPath := filepath.Join(outDir, name+".out")
	if shouldUpdate() {
		if err := os.WriteFile(wantOutPath, append(gotOut, '\n'), 0644); err != nil {
			t.Fatalf("write out: %v", err)
		}
	} else if wantOut, err := os.ReadFile(wantOutPath); err == nil {
		if !bytes.Equal(gotOut, bytes.TrimSpace(wantOut)) {
			t.Errorf("output mismatch for %s.out\n\n--- Got ---\n%s\n\n--- Want ---\n%s", name, gotOut, bytes.TrimSpace(wantOut))
		}
	}
}

func TestSmalltalkCompiler_VM_Golden(t *testing.T) {
	gstPath := ensureGST()
	root := testutil.FindRepoRoot(t)
	files, err := filepath.Glob(filepath.Join(root, "tests", "vm", "valid", "*.mochi"))
	if err != nil {
		t.Fatalf("glob: %v", err)
	}
	max := 5
	if len(files) < max {
		max = len(files)
	}
	for _, f := range files[:max] {
		name := strings.TrimSuffix(filepath.Base(f), ".mochi")
		t.Run(name, func(t *testing.T) { runVMGolden(t, f, gstPath) })
	}
}
