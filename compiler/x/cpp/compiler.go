//go:build slow

package cpp

import (
	"bytes"
	"fmt"
	"strings"

	"mochi/parser"
)

// Compiler is a minimal Mochi -> C++ translator used for tests. It only
// supports simple features like arithmetic, loops and function calls.
// Unsupported constructs result in an error so the tests can record the
// failure.
type Compiler struct {
	buf    bytes.Buffer
	indent int
}

// New returns a new compiler instance.
func New() *Compiler { return &Compiler{} }

func (c *Compiler) writeln(s string) {
	for i := 0; i < c.indent; i++ {
		c.buf.WriteByte('\t')
	}
	c.buf.WriteString(s)
	c.buf.WriteByte('\n')
}

func (c *Compiler) writeIndent() {
	for i := 0; i < c.indent; i++ {
		c.buf.WriteByte('\t')
	}
}

// Compile converts a parsed program to C++.
func (c *Compiler) Compile(p *parser.Program) ([]byte, error) {
	c.buf.Reset()
	c.writeln("// Generated by the Mochi experimental C++ compiler")
	c.writeln("#include <bits/stdc++.h>")
	c.writeln("using namespace std;")
	c.writeln("")

	// helpers for a few builtins
	c.writeln("template<typename T> vector<T> mochi_append(vector<T> v, T x) { v.push_back(x); return v; }")
	c.writeln("template<typename T> T mochi_sum(const vector<T>& v) { T s{}; for(const auto& x: v) s += x; return s; }")
	c.writeln("template<typename T> double mochi_avg(const vector<T>& v) { if(v.empty()) return 0; return static_cast<double>(mochi_sum(v)) / v.size(); }")
	c.writeln("template<typename T> void mochi_print(const T& v) { cout << v << endl; }")
	c.writeln("template<typename T> void mochi_print(const vector<T>& v) { for(size_t i=0;i<v.size();++i){ if(i) cout << ' '; cout << v[i]; } cout << endl; }")
	c.writeln("template<typename T> vector<T> mochi_slice(const vector<T>& v, int s, int e) { return vector<T>(v.begin()+s, v.begin()+e); }")
	c.writeln("inline string mochi_slice(const string& s, int st, int ed) { return s.substr(st, ed - st); }")
	c.writeln("")

	for _, st := range p.Statements {
		if st.Fun != nil {
			if err := c.compileFun(st.Fun); err != nil {
				return nil, err
			}
			c.writeln("")
		}
	}

	c.writeln("int main() {")
	c.indent++
	for _, st := range p.Statements {
		if st.Fun != nil {
			continue
		}
		if err := c.compileStmt(st); err != nil {
			return nil, err
		}
	}
	c.writeln("return 0;")
	c.indent--
	c.writeln("}")

	return c.buf.Bytes(), nil
}

func (c *Compiler) compileFun(fn *parser.FunStmt) error {
	c.writeIndent()
	c.buf.WriteString("auto ")
	c.buf.WriteString(fn.Name)
	c.buf.WriteString("(")
	for i, p := range fn.Params {
		if i > 0 {
			c.buf.WriteString(", ")
		}
		c.buf.WriteString("auto ")
		c.buf.WriteString(p.Name)
	}
	c.buf.WriteString(") {\n")
	c.indent++
	for _, st := range fn.Body {
		if err := c.compileStmt(st); err != nil {
			return err
		}
	}
	c.indent--
	c.writeln("}")
	return nil
}

func (c *Compiler) compileStmt(s *parser.Statement) error {
	switch {
	case s.Let != nil:
		c.writeIndent()
		c.buf.WriteString("auto ")
		c.buf.WriteString(s.Let.Name)
		if s.Let.Value != nil {
			c.buf.WriteString(" = ")
			expr, err := c.compileExpr(s.Let.Value)
			if err != nil {
				return err
			}
			c.buf.WriteString(expr)
		}
		c.buf.WriteString(";\n")
	case s.Var != nil:
		c.writeIndent()
		c.buf.WriteString("auto ")
		c.buf.WriteString(s.Var.Name)
		if s.Var.Value != nil {
			c.buf.WriteString(" = ")
			expr, err := c.compileExpr(s.Var.Value)
			if err != nil {
				return err
			}
			c.buf.WriteString(expr)
		}
		c.buf.WriteString(";\n")
	case s.Assign != nil:
		if len(s.Assign.Index) > 0 || len(s.Assign.Field) > 0 {
			return fmt.Errorf("complex assignment not supported")
		}
		c.writeIndent()
		rhs, err := c.compileExpr(s.Assign.Value)
		if err != nil {
			return err
		}
		c.buf.WriteString(s.Assign.Name + " = " + rhs + ";\n")
	case s.Return != nil:
		c.writeIndent()
		expr, err := c.compileExpr(s.Return.Value)
		if err != nil {
			return err
		}
		c.buf.WriteString("return " + expr + ";\n")
	case s.Expr != nil:
		c.writeIndent()
		expr, err := c.compileExpr(s.Expr.Expr)
		if err != nil {
			return err
		}
		c.buf.WriteString(expr + ";\n")
	case s.If != nil:
		return c.compileIf(s.If)
	case s.While != nil:
		cond, err := c.compileExpr(s.While.Cond)
		if err != nil {
			return err
		}
		c.writeIndent()
		c.buf.WriteString("while(" + cond + ") {\n")
		c.indent++
		for _, b := range s.While.Body {
			if err := c.compileStmt(b); err != nil {
				return err
			}
		}
		c.indent--
		c.writeln("}")
	case s.For != nil:
		return c.compileFor(s.For)
	case s.Break != nil:
		c.writeIndent()
		c.writeln("break;")
	case s.Continue != nil:
		c.writeIndent()
		c.writeln("continue;")
	default:
		return fmt.Errorf("unsupported statement at %v", s.Pos)
	}
	return nil
}

func (c *Compiler) compileIf(st *parser.IfStmt) error {
	cond, err := c.compileExpr(st.Cond)
	if err != nil {
		return err
	}
	c.writeIndent()
	c.buf.WriteString("if(" + cond + ") {\n")
	c.indent++
	for _, s := range st.Then {
		if err := c.compileStmt(s); err != nil {
			return err
		}
	}
	c.indent--
	c.writeIndent()
	c.buf.WriteString("}")
	if st.Else != nil {
		c.buf.WriteString(" else {\n")
		c.indent++
		for _, s := range st.Else {
			if err := c.compileStmt(s); err != nil {
				return err
			}
		}
		c.indent--
		c.writeln("}")
	} else {
		c.writeln("")
	}
	return nil
}

func (c *Compiler) compileFor(st *parser.ForStmt) error {
	if st.RangeEnd != nil {
		start, err := c.compileExpr(st.Source)
		if err != nil {
			return err
		}
		end, err := c.compileExpr(st.RangeEnd)
		if err != nil {
			return err
		}
		iter := st.Name
		c.writeIndent()
		c.buf.WriteString(fmt.Sprintf("for(int %s=%s; %s<%s; ++%s) {\n", iter, start, iter, end, iter))
		c.indent++
		for _, b := range st.Body {
			if err := c.compileStmt(b); err != nil {
				return err
			}
		}
		c.indent--
		c.writeln("}")
		return nil
	}
	src, err := c.compileExpr(st.Source)
	if err != nil {
		return err
	}
	iter := st.Name
	c.writeIndent()
	c.buf.WriteString(fmt.Sprintf("for(auto %s : %s) {\n", iter, src))
	c.indent++
	for _, b := range st.Body {
		if err := c.compileStmt(b); err != nil {
			return err
		}
	}
	c.indent--
	c.writeln("}")
	return nil
}

func (c *Compiler) compileExpr(e *parser.Expr) (string, error) {
	if e == nil {
		return "", nil
	}
	if e.Binary != nil {
		left, err := c.compileUnary(e.Binary.Left)
		if err != nil {
			return "", err
		}
		out := left
		for _, op := range e.Binary.Right {
			rhs, err := c.compilePostfix(op.Right)
			if err != nil {
				return "", err
			}
			out = fmt.Sprintf("(%s %s %s)", out, op.Op, rhs)
		}
		return out, nil
	}
	return "", fmt.Errorf("unsupported expression at %v", e.Pos)
}

func (c *Compiler) compileUnary(u *parser.Unary) (string, error) {
	val, err := c.compilePostfix(u.Value)
	if err != nil {
		return "", err
	}
	for i := len(u.Ops) - 1; i >= 0; i-- {
		val = fmt.Sprintf("(%s%s)", u.Ops[i], val)
	}
	return val, nil
}
func (c *Compiler) compilePostfix(pf *parser.PostfixExpr) (string, error) {
	target, err := c.compilePrimary(pf.Target)
	if err != nil {
		return "", err
	}
	expr := target
	for _, op := range pf.Ops {
		if op.Index != nil {
			if op.Index.Colon != nil {
				start, err := c.compileExpr(op.Index.Start)
				if err != nil {
					return "", err
				}
				end, err := c.compileExpr(op.Index.End)
				if err != nil {
					return "", err
				}
				expr = fmt.Sprintf("mochi_slice(%s, %s, %s)", expr, start, end)
			} else {
				idx, err := c.compileExpr(op.Index.Start)
				if err != nil {
					return "", err
				}
				expr = fmt.Sprintf("%s[%s]", expr, idx)
			}
		} else if op.Call != nil {
			args := []string{}
			for _, a := range op.Call.Args {
				s, err := c.compileExpr(a)
				if err != nil {
					return "", err
				}
				args = append(args, s)
			}
			if expr == "print" && len(args) == 1 {
				expr = fmt.Sprintf("mochi_print(%s)", args[0])
			} else if expr == "print" {
				e := "(cout"
				for _, a := range args {
					e += " << " + a
				}
				e += " << endl)"
				expr = e
			} else if expr == "len" && len(args) == 1 {
				if strings.HasPrefix(args[0], "\"") {
					expr = fmt.Sprintf("((int)string(%s).size())", args[0])
				} else {
					expr = fmt.Sprintf("((int)%s.size())", args[0])
				}
			} else if expr == "count" && len(args) == 1 {
				expr = fmt.Sprintf("((int)%s.size())", args[0])
			} else if expr == "min" && len(args) == 1 {
				expr = fmt.Sprintf("(*min_element(%s.begin(), %s.end()))", args[0], args[0])
			} else if expr == "max" && len(args) == 1 {
				expr = fmt.Sprintf("(*max_element(%s.begin(), %s.end()))", args[0], args[0])
			} else if expr == "str" && len(args) == 1 {
				expr = fmt.Sprintf("to_string(%s)", args[0])
			} else if expr == "append" && len(args) == 2 {
				expr = fmt.Sprintf("mochi_append(%s, %s)", args[0], args[1])
			} else if expr == "sum" && len(args) == 1 {
				expr = fmt.Sprintf("mochi_sum(%s)", args[0])
			} else if expr == "avg" && len(args) == 1 {
				expr = fmt.Sprintf("mochi_avg(%s)", args[0])
			} else if expr == "substring" && len(args) == 3 {
				expr = fmt.Sprintf("%s.substr(%s, %s - %s)", args[0], args[1], args[2], args[1])
			} else if strings.HasSuffix(expr, ".contains") && len(args) == 1 {
				base := strings.TrimSuffix(expr, ".contains")
				expr = fmt.Sprintf("(%s.find(%s) != string::npos)", base, args[0])
			} else {
				expr = fmt.Sprintf("%s(%s)", expr, strings.Join(args, ", "))
			}
		} else if op.Field != nil {
			expr = fmt.Sprintf("%s.%s", expr, op.Field.Name)
		} else if op.Cast != nil {
			typ, err := c.compileType(op.Cast.Type)
			if err != nil {
				return "", err
			}
			if typ == "int" && strings.HasPrefix(expr, "\"") {
				expr = fmt.Sprintf("stoi(%s)", expr)
			} else {
				expr = fmt.Sprintf("(%s)(%s)", typ, expr)
			}
		} else {
			return "", fmt.Errorf("unsupported postfix op")
		}
	}
	return expr, nil
}
func (c *Compiler) compilePrimary(p *parser.Primary) (string, error) {
	switch {
	case p.Lit != nil:
		return c.compileLiteral(p.Lit)
	case p.Call != nil:
		args := []string{}
		for _, e := range p.Call.Args {
			s, err := c.compileExpr(e)
			if err != nil {
				return "", err
			}
			args = append(args, s)
		}
		fn := p.Call.Func
		if fn == "print" && len(args) == 1 {
			return fmt.Sprintf("mochi_print(%s)", args[0]), nil
		}
		if fn == "print" {
			out := "(cout"
			for _, a := range args {
				out += " << " + a
			}
			out += " << endl)"
			return out, nil
		}
		if fn == "len" && len(args) == 1 {
			if strings.HasPrefix(args[0], "\"") {
				return fmt.Sprintf("((int)string(%s).size())", args[0]), nil
			}
			return fmt.Sprintf("((int)%s.size())", args[0]), nil
		}
		if fn == "count" && len(args) == 1 {
			return fmt.Sprintf("((int)%s.size())", args[0]), nil
		}
		if fn == "min" && len(args) == 1 {
			return fmt.Sprintf("(*min_element(%s.begin(), %s.end()))", args[0], args[0]), nil
		}
		if fn == "max" && len(args) == 1 {
			return fmt.Sprintf("(*max_element(%s.begin(), %s.end()))", args[0], args[0]), nil
		}
		if fn == "str" && len(args) == 1 {
			return fmt.Sprintf("to_string(%s)", args[0]), nil
		}
		if fn == "append" && len(args) == 2 {
			return fmt.Sprintf("mochi_append(%s, %s)", args[0], args[1]), nil
		}
		if fn == "sum" && len(args) == 1 {
			return fmt.Sprintf("mochi_sum(%s)", args[0]), nil
		}
		if fn == "avg" && len(args) == 1 {
			return fmt.Sprintf("mochi_avg(%s)", args[0]), nil
		}
		if fn == "substring" && len(args) == 3 {
			return fmt.Sprintf("%s.substr(%s, %s - %s)", args[0], args[1], args[2], args[1]), nil
		}
		return fn + "(" + strings.Join(args, ", ") + ")", nil
	case p.List != nil:
		elems := []string{}
		for _, e := range p.List.Elems {
			s, err := c.compileExpr(e)
			if err != nil {
				return "", err
			}
			elems = append(elems, s)
		}
		return "vector<int>{" + strings.Join(elems, ", ") + "}", nil
	case p.Selector != nil:
		name := p.Selector.Root
		for _, t := range p.Selector.Tail {
			name += "." + t
		}
		return name, nil
	case p.Group != nil:
		return c.compileExpr(p.Group)
	default:
		return "", fmt.Errorf("unsupported primary at %v", p.Pos)
	}
}

func (c *Compiler) compileLiteral(l *parser.Literal) (string, error) {
	if l.Int != nil {
		return fmt.Sprint(*l.Int), nil
	}
	if l.Float != nil {
		return fmt.Sprint(*l.Float), nil
	}
	if l.Bool != nil {
		if bool(*l.Bool) {
			return "true", nil
		}
		return "false", nil
	}
	if l.Str != nil {
		return fmt.Sprintf("std::string(%q)", *l.Str), nil
	}
	if l.Null {
		return "nullptr", nil
	}
	return "", fmt.Errorf("unknown literal")
}

func (c *Compiler) compileType(t *parser.TypeRef) (string, error) {
	if t == nil {
		return "auto", nil
	}
	if t.Simple != nil {
		switch *t.Simple {
		case "int":
			return "int", nil
		case "string":
			return "string", nil
		}
	}
	return "auto", fmt.Errorf("unsupported type")
}
