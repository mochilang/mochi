//go:build slow

package cpp_test

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"testing"

	cpp "mochi/compiler/x/cpp"
	"mochi/compiler/x/testutil"
	"mochi/parser"
)

// TestCompilePrograms compiles each Mochi sample to C++ and runs it.
// The generated source and outputs are written under tests/machine/x/cpp.
func TestCompilePrograms(t *testing.T) {
	cxx := ensureCXX(t)
	root := testutil.FindRepoRoot(t)
	files, err := filepath.Glob(filepath.Join(root, "tests", "vm", "valid", "*.mochi"))
	if err != nil {
		t.Fatal(err)
	}
	outDir := filepath.Join(root, "tests", "machine", "x", "cpp")
	os.MkdirAll(outDir, 0755)

	for _, src := range files {
		name := strings.TrimSuffix(filepath.Base(src), ".mochi")
		t.Run(name, func(t *testing.T) { compileOne(t, src, outDir, name, cxx) })
	}
}

func compileOne(t *testing.T, src, outDir, name, cxx string) {
	data, err := os.ReadFile(src)
	if err != nil {
		t.Fatalf("read error: %v", err)
	}
	prog, err := parser.Parse(src)
	if err != nil {
		writeError(outDir, name, 0, fmt.Sprintf("parse error: %v", err), data)
		return
	}
	code, err := cpp.New().Compile(prog)
	if err != nil {
		writeError(outDir, name, 0, fmt.Sprintf("compile error: %v", err), data)
		return
	}
	srcFile := filepath.Join(outDir, name+".cpp")
	if err := os.WriteFile(srcFile, code, 0644); err != nil {
		t.Fatalf("write source: %v", err)
	}
	exe := filepath.Join(outDir, name)
	if out, err := exec.Command(cxx, srcFile, "-std=c++17", "-o", exe).CombinedOutput(); err != nil {
		parseLine := extractLine(string(out))
		writeError(outDir, name, parseLine, string(out), code)
		return
	}
	defer os.Remove(exe)
	run := exec.Command(exe)
	var buf bytes.Buffer
	run.Stdout = &buf
	if err := run.Run(); err != nil {
		writeError(outDir, name, 0, fmt.Sprintf("run error: %v", err), code)
		return
	}
	if err := os.WriteFile(filepath.Join(outDir, name+".out"), buf.Bytes(), 0644); err != nil {
		t.Fatalf("write out: %v", err)
	}
	os.Remove(filepath.Join(outDir, name+".error"))
}

func extractLine(msg string) int {
	for _, line := range strings.Split(msg, "\n") {
		if i := strings.Index(line, ":"); i != -1 {
			var n int
			fmt.Sscanf(line[i+1:], "%d", &n)
			if n > 0 {
				return n
			}
		}
	}
	return 0
}

func writeError(dir, name string, line int, msg string, src []byte) {
	var buf bytes.Buffer
	fmt.Fprintf(&buf, "line %d: %s\n", line, msg)
	if line > 0 {
		lines := bytes.Split(src, []byte("\n"))
		start := line - 2
		if start < 0 {
			start = 0
		}
		end := line + 1
		if end > len(lines) {
			end = len(lines)
		}
		for i := start; i < end; i++ {
			fmt.Fprintf(&buf, "%3d | %s\n", i+1, lines[i])
		}
	}
	os.WriteFile(filepath.Join(dir, name+".error"), buf.Bytes(), 0644)
}

func ensureCXX(t *testing.T) string {
	if env := os.Getenv("CXX"); env != "" {
		if p, err := exec.LookPath(env); err == nil {
			return p
		}
	}
	for _, cxx := range []string{"g++", "c++"} {
		if p, err := exec.LookPath(cxx); err == nil {
			return p
		}
	}
	t.Skip("C++ compiler not found")
	return ""
}

func TestMain(m *testing.M) {
	code := m.Run()
	updateReadme()
	os.Exit(code)
}

func updateReadme() {
	root := testutil.FindRepoRoot(&testing.T{})
	srcDir := filepath.Join(root, "tests", "vm", "valid")
	outDir := filepath.Join(root, "tests", "machine", "x", "cpp")
	files, _ := filepath.Glob(filepath.Join(srcDir, "*.mochi"))
	total := len(files)
	compiled := 0
	var lines []string
	for _, f := range files {
		name := strings.TrimSuffix(filepath.Base(f), ".mochi")
		mark := "[ ]"
		if _, err := os.Stat(filepath.Join(outDir, name+".out")); err == nil {
			compiled++
			mark = "[x]"
		}
		lines = append(lines, fmt.Sprintf("- %s %s.mochi", mark, name))
	}
	var buf bytes.Buffer
	fmt.Fprintf(&buf, "# Mochi to C++ Compiler Outputs (%d/%d compiled)\n\n", compiled, total)
	buf.WriteString("This directory contains C++ source code generated by the Mochi compiler from the programs in `tests/vm/valid`. Each subtest either produced a `.cpp` file and an output file (`.out`), or an `.error` file if compilation or execution failed.\n\n")
	buf.WriteString("## Checklist\n")
	buf.WriteString(strings.Join(lines, "\n"))
	buf.WriteString("\n")
	os.WriteFile(filepath.Join(outDir, "README.md"), buf.Bytes(), 0644)
}
