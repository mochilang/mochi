//go:build slow

package gocode_test

import (
	"bytes"
	"os"
	"os/exec"
	"path/filepath"
	"testing"

	gocode "mochi/compiler/x/go"
	"mochi/parser"
	"mochi/types"
)

func stripHeaderJob(b []byte) []byte {
	if bytes.HasPrefix(b, []byte("//go:build")) {
		if i := bytes.IndexByte(b, '\n'); i != -1 {
			b = b[i+1:]
		}
		b = bytes.TrimLeft(b, "\n")
	}
	if i := bytes.IndexByte(b, '\n'); i != -1 && bytes.HasPrefix(b, []byte("// Generated by Mochi")) {
		return b[i+1:]
	}
	return b
}

func runJOBQuery(t *testing.T, base string) {
	root := repoRoot(t)
	src := filepath.Join(root, "tests", "dataset", "job", base+".mochi")

	prog, err := parser.Parse(src)
	if err != nil {
		t.Fatalf("parse error: %v", err)
	}
	env := types.NewEnv(nil)
	if errs := types.Check(prog, env); len(errs) > 0 {
		t.Fatalf("type error: %v", errs[0])
	}

	code, err := gocode.New(env).Compile(prog)
	if err != nil {
		t.Fatalf("compile error: %v", err)
	}

	codeWant := filepath.Join(root, "tests", "dataset", "job", "compiler", "go", base+".go")
	if want, err := os.ReadFile(codeWant); err == nil {
		got := stripHeaderJob(bytes.TrimSpace(code))
		want = stripHeaderJob(bytes.TrimSpace(want))
		if !bytes.Equal(got, want) {
			t.Errorf("generated code mismatch for %s.go\n\n--- Got ---\n%s\n\n--- Want ---\n%s", base, got, want)
		}
	}

	dir := t.TempDir()
	file := filepath.Join(dir, "main.go")
	if err := os.WriteFile(file, code, 0644); err != nil {
		t.Fatalf("write error: %v", err)
	}
	cmd := exec.Command("go", "run", file)
	out, err := cmd.CombinedOutput()
	if err != nil {
		t.Skipf("go run error: %v\n%s", err, out)
		return
	}
	gotOut := bytes.TrimSpace(out)

	outWant := filepath.Join(root, "tests", "dataset", "job", "compiler", "go", base+".out")
	wantOut, err := os.ReadFile(outWant)
	if err != nil {
		t.Fatalf("read golden: %v", err)
	}
	if !bytes.Equal(gotOut, bytes.TrimSpace(wantOut)) {
		t.Errorf("output mismatch for %s.out\n\n--- Got ---\n%s\n\n--- Want ---\n%s", base, gotOut, bytes.TrimSpace(wantOut))
	}
}

func TestGoCompiler_JOB(t *testing.T) {
	if _, err := exec.LookPath("go"); err != nil {
		t.Skip("go toolchain not installed")
	}
	t.Run("q1", func(t *testing.T) { runJOBQuery(t, "q1") })
}
