//go:build slow

package gocode_test

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
	"testing"

	gocode "mochi/compiler/x/go"
	"mochi/parser"
	"mochi/types"
)

func shouldUpdateRosetta() bool {
	if v, ok := os.LookupEnv("UPDATE"); ok && (v == "1" || v == "true") {
		return true
	}
	return false
}

func stripHeaderLocal(b []byte) []byte {
	if i := bytes.IndexByte(b, '\n'); i != -1 && bytes.HasPrefix(b, []byte("// Generated by Mochi")) {
		return b[i+1:]
	}
	return b
}

func writeErr(root, name string, err error) {
	path := filepath.Join(root, "tests", "rosetta", "out", "Go", name+".error")
	msg := err.Error()
	msg = strings.ReplaceAll(msg, root+"/", "")
	msg = strings.ReplaceAll(msg, root, "")
	msg = regexp.MustCompile(`/tmp/[^/]+`).ReplaceAllString(msg, "/tmp/X")
	_ = os.WriteFile(path, []byte(msg), 0644)
}

func removeErr(root, name string) {
	_ = os.Remove(filepath.Join(root, "tests", "rosetta", "out", "Go", name+".error"))
}

func runRosettaTask(t *testing.T, name string) {
	root := repoRoot(t)
	src := filepath.Join(root, "tests", "rosetta", "x", "Mochi", name+".mochi")
	defer func() {
		if r := recover(); r != nil {
			writeErr(root, name, fmt.Errorf("panic: %v", r))
			t.Skipf("panic: %v", r)
		}
	}()
	prog, err := parser.Parse(src)
	if err != nil {
		writeErr(root, name, fmt.Errorf("parse: %w", err))
		t.Skipf("parse error: %v", err)
		return
	}
	env := types.NewEnv(nil)
	if errs := types.Check(prog, env); len(errs) > 0 {
		writeErr(root, name, fmt.Errorf("type: %v", errs[0]))
		t.Skipf("type error: %v", errs[0])
		return
	}
	code, err := gocode.New(env).Compile(prog)
	if err != nil {
		writeErr(root, name, fmt.Errorf("compile: %w", err))
		t.Skipf("compile error: %v", err)
		return
	}

	codeWant := filepath.Join(root, "tests", "rosetta", "out", "Go", name+".go")
	if shouldUpdateRosetta() {
		_ = os.WriteFile(codeWant, code, 0644)
	} else if want, err := os.ReadFile(codeWant); err == nil {
		got := stripHeaderLocal(bytes.TrimSpace(code))
		want = stripHeaderLocal(bytes.TrimSpace(want))
		if !bytes.Equal(got, want) {
			t.Errorf("generated code mismatch for %s.go\n\n--- Got ---\n%s\n\n--- Want ---\n%s", name, got, want)
		}
	}

	dir := t.TempDir()
	file := filepath.Join(dir, "main.go")
	if err := os.WriteFile(file, code, 0644); err != nil {
		t.Fatalf("write go: %v", err)
	}
	out, err := exec.Command("go", "run", file).CombinedOutput()
	if err != nil {
		writeErr(root, name, fmt.Errorf("run: %v\n%s", err, out))
		t.Skipf("run error: %v", err)
		return
	}
	gotOut := bytes.TrimSpace(out)

	outWant := filepath.Join(root, "tests", "rosetta", "out", "Go", name+".out")
	if shouldUpdateRosetta() {
		_ = os.WriteFile(outWant, append(gotOut, '\n'), 0644)
	} else if want, err := os.ReadFile(outWant); err == nil {
		if !bytes.Equal(gotOut, bytes.TrimSpace(want)) {
			t.Errorf("output mismatch for %s.out\n\n--- Got ---\n%s\n\n--- Want ---\n%s", name, gotOut, bytes.TrimSpace(want))
		}
	}
	removeErr(root, name)
}

func TestGoCompiler_Rosetta_Golden(t *testing.T) {
	if _, err := exec.LookPath("go"); err != nil {
		t.Skip("go toolchain not installed")
	}
	os.Setenv("SOURCE_DATE_EPOCH", "1136214245")
	defer os.Unsetenv("SOURCE_DATE_EPOCH")
	root := repoRoot(t)
	files, err := filepath.Glob(filepath.Join(root, "tests", "rosetta", "x", "Mochi", "*.mochi"))
	if err != nil {
		t.Fatalf("glob: %v", err)
	}
	max := 3
	if v := os.Getenv("ROSETTA_MAX"); v != "" {
		if n, err := strconv.Atoi(v); err == nil {
			max = n
		}
	}
	if len(files) < max {
		max = len(files)
	}
	for _, f := range files[:max] {
		name := strings.TrimSuffix(filepath.Base(f), ".mochi")
		t.Run(name, func(t *testing.T) { runRosettaTask(t, name) })
	}
}
