//go:build slow

package gocode_test

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"testing"

	gocode "mochi/compiler/x/go"
	"mochi/compiler/x/testutil"
	"mochi/golden"
	"mochi/parser"
	"mochi/types"
)

func stripHeaderVM(b []byte) []byte {
	if idx := bytes.Index(b, []byte("// Generated by Mochi")); idx != -1 {
		end := bytes.IndexByte(b[idx:], '\n')
		if end != -1 {
			return append(b[:idx], b[idx+end+1:]...)
		}
		return b[:idx]
	}
	if bytes.HasPrefix(b, []byte("//go:build")) {
		if i := bytes.IndexByte(b, '\n'); i != -1 {
			b = b[i+1:]
		}
	}
	return b
}

// TestGoCompiler_VMValid_GoldenRun compiles each program with the Go backend
// and executes the generated code, comparing output with the .out files.
func TestGoCompiler_VMValid_GoldenRun(t *testing.T) {
	if _, err := exec.LookPath("go"); err != nil {
		t.Skip("go toolchain not installed")
	}
	root := testutil.FindRepoRoot(t)
	outDir := filepath.Join(root, "tests", "machine", "x", "go")
	if err := os.MkdirAll(outDir, 0o755); err != nil {
		t.Fatalf("mkout: %v", err)
	}
	golden.Run(t, "tests/vm/valid", ".mochi", ".out", func(src string) ([]byte, error) {
		name := strings.TrimSuffix(filepath.Base(src), ".mochi")
		prog, err := parser.Parse(src)
		if err != nil {
			_ = os.WriteFile(filepath.Join(outDir, name+".error"), []byte(fmt.Sprintf("parse: %v", err)), 0644)
			return nil, fmt.Errorf("parse error: %w", err)
		}
		env := types.NewEnv(nil)
		if errs := types.Check(prog, env); len(errs) > 0 {
			_ = os.WriteFile(filepath.Join(outDir, name+".error"), []byte(fmt.Sprintf("type: %v", errs[0])), 0644)
			return nil, fmt.Errorf("type error: %v", errs[0])
		}
                code, err := gocode.New(env).Compile(prog)
                if err != nil {
                        _ = os.WriteFile(filepath.Join(outDir, name+".error"), []byte(fmt.Sprintf("compile: %v", err)), 0644)
                        return nil, fmt.Errorf("compile error: %w", err)
                }
                if !bytes.HasPrefix(code, []byte("//go:build ignore")) {
                        return nil, fmt.Errorf("missing ignore build tag")
                }
                goPath := filepath.Join(outDir, name+".go")
                if err := os.WriteFile(goPath, code, 0644); err != nil {
                        return nil, err
                }
		cmd := exec.Command("go", "run", goPath)
		if inData, err := os.ReadFile(strings.TrimSuffix(src, ".mochi") + ".in"); err == nil {
			cmd.Stdin = bytes.NewReader(inData)
		}
		out, err := cmd.CombinedOutput()
		if err != nil {
			_ = os.WriteFile(filepath.Join(outDir, name+".error"), []byte(fmt.Sprintf("run: %v\n%s", err, out)), 0644)
			return nil, fmt.Errorf("go run error: %w", err)
		}
		out = bytes.TrimSpace(out)
		_ = os.WriteFile(filepath.Join(outDir, name+".out"), out, 0644)
		_ = os.Remove(filepath.Join(outDir, name+".error"))
		return out, nil
	})
}
