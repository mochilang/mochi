package meta

import (
	"fmt"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"time"
)

// Version returns the repository version from the VERSION file.
func Version() string {
	root := findRepoRoot()
	if root == "" {
		return "dev"
	}
	data, err := os.ReadFile(filepath.Join(root, "VERSION"))
	if err != nil {
		return "dev"
	}
	return strings.TrimSpace(string(data))
}

// Header returns a formatted generation comment using the provided prefix
// (e.g. "//" or "#").
func Header(prefix string) []byte {
	t := time.Now().UTC()
	if v := os.Getenv("SOURCE_DATE_EPOCH"); v != "" {
		if secs, err := strconv.ParseInt(v, 10, 64); err == nil {
			t = time.Unix(secs, 0).UTC()
		}
	}
	return []byte(fmt.Sprintf("%s Generated by Mochi compiler v%s on %s\n",
		prefix, Version(), t.Format(time.RFC3339)))
}

func findRepoRoot() string {
	dir, err := os.Getwd()
	if err != nil {
		return ""
	}
	for i := 0; i < 10; i++ {
		if _, err := os.Stat(filepath.Join(dir, "go.mod")); err == nil {
			return dir
		}
		parent := filepath.Dir(dir)
		if parent == dir {
			break
		}
		dir = parent
	}
	return ""
}
