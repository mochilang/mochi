Program = Statement* .
Statement = TestBlock | ExpectStmt | AgentDecl | StreamDecl | OnHandler | LetStmt | AssignStmt | FunStmt | ReturnStmt | IfStmt | ForStmt | ExprStmt .
TestBlock = "test" <string> "{" Statement* "}" .
ExpectStmt = "expect" Expr .
Expr = BinaryExpr .
BinaryExpr = Unary BinaryOp* .
Unary = ("-" | "!")* PostfixExpr .
PostfixExpr = Primary IndexOp* .
Primary = FunExpr | CallExpr | SelectorExpr | ListLiteral | MapLiteral | Literal | ("(" Expr ")") .
FunExpr = ("fun" "(" (Param ("," Param)*)? ")" (":" TypeRef)? "=>" Expr) | ("{" Statement* "}") .
Param = <ident> (":" TypeRef)? .
TypeRef = FunType | GenericType | <ident> .
FunType = "fun" "(" (TypeRef ("," TypeRef)*)? ")" (":" TypeRef)? .
GenericType = <ident> "<" TypeRef ("," TypeRef)* ">" .
CallExpr = <ident> "(" (Expr ("," Expr)*)? ")" .
SelectorExpr = <ident> ("." <ident>)* .
ListLiteral = "[" (Expr ("," Expr)*)? ","?? "]" .
MapLiteral = "{" (MapEntry ("," MapEntry)*)? ","?? "}" .
MapEntry = Expr ":" Expr .
Literal = <int> | <float> | ("true" | "false") | <string> .
IndexOp = "[" (Expr (":" Expr (":" Expr)?)?)? "]" .
BinaryOp = ("==" | "!=" | "<" | "<=" | ">" | ">=" | "+" | "-" | "*" | "/" | "%") PostfixExpr .
AgentDecl = "agent" <ident> "{" AgentBlock* "}" .
AgentBlock = LetStmt | AssignStmt | OnHandler | IntentDecl .
LetStmt = "let" <ident> (":" TypeRef)? ("=" Expr)? .
AssignStmt = <ident> "=" Expr .
OnHandler = "on" <ident> "as" <ident> "{" Statement* "}" .
IntentDecl = "intent" <ident> "(" (Param ("," Param)*)? ")" (":" TypeRef)? "{" Statement* "}" .
StreamDecl = "stream" <ident> "{" StreamField* "}" .
StreamField = <ident> ":" TypeRef .
FunStmt = "fun" <ident> "(" (Param ("," Param)*)? ")" (":" TypeRef)? "{" Statement* "}" .
ReturnStmt = "return" Expr .
IfStmt = "if" Expr "{" Statement* "}" (("else" IfStmt) | ("else" "{" Statement* "}"))? .
ForStmt = "for" <ident> "in" Expr (".." Expr)? "{" Statement* "}" .
ExprStmt = Expr .