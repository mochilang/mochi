// Generated by Mochi TypeScript compiler

function groupAnagrams(strs: Array<string>) : Array<Array<string>> {
	let index: Record<any, any> = {}
	let groups: Array<any> = []
	for (const word of strs) {
		let letters: Array<any> = []
		let i: number = 0
		while ((i < word.length)) {
			letters = letters.concat([word[i]])
			i = (i + 1)
		}
		let chars: Array<any> = (() => {
	const _src = letters;
	let _items = [];
	for (const ch of _src) {
		_items.push(ch);
	}
	let _pairs = _items.map(it => { const ch = it; return {item: it, key: ch}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	const _res = [];
	for (const ch of _items) {
		_res.push(ch)
	}
	return _res;
})()
		let key: string = ""
		for (const ch of chars) {
			key = (key + ch)
		}
		if (Object.prototype.hasOwnProperty.call(index, String(key))) {
			let idx: any = index[key]
			groups[idx] = (groups[idx] + [word])
		} else {
			groups = groups.concat([[word]])
			index[key] = (groups.length - 1)
		}
	}
	return groups
}

function example_1(): void {
	let res: Array<Array<string>> = groupAnagrams(["eat", "tea", "tan", "ate", "nat", "bat"])
	let normalize: any = function(g: Array<string>): Array<string> {
		return (() => {
		const _src = g;
		let _items = [];
		for (const x of _src) {
			_items.push(x);
		}
		let _pairs = _items.map(it => { const x = it; return {item: it, key: x}; });
		_pairs.sort((a, b) => {
			const ak = a.key; const bk = b.key;
			if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
			if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
			return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
		});
		_items = _pairs.map(p => p.item);
		const _res = [];
		for (const x of _items) {
			_res.push(x)
		}
		return _res;
	})()
}
	let sorted: Array<any> = (() => {
	const _src = res;
	const _res = [];
	for (const g of _src) {
		_res.push(normalize(g))
	}
	return _res;
})()
	let final: Array<any> = (() => {
	const _src = sorted;
	let _items = [];
	for (const g of _src) {
		_items.push(g);
	}
	let _pairs = _items.map(it => { const g = it; return {item: it, key: (g as any)[0]}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	const _res = [];
	for (const g of _items) {
		_res.push(g)
	}
	return _res;
})()
	let expected: Array<Array<string>> = [["ate", "eat", "tea"], ["bat"], ["nat", "tan"]]
	let expSorted: Array<any> = (() => {
	const _src = expected;
	const _res = [];
	for (const g of _src) {
		_res.push(normalize(g))
	}
	return _res;
})()
	let expFinal: Array<any> = (() => {
	const _src = expSorted;
	let _items = [];
	for (const g of _src) {
		_items.push(g);
	}
	let _pairs = _items.map(it => { const g = it; return {item: it, key: (g as any)[0]}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	const _res = [];
	for (const g of _items) {
		_res.push(g)
	}
	return _res;
})()
	if (!(_equal(final, expFinal))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!(_equal(groupAnagrams([""]), [[""]]))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!(_equal(groupAnagrams(["a"]), [["a"]]))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

