# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def groupAnagrams(strs: list[str]) -> list[list[str]]:
	index = {}
	groups = []
	for word in strs:
		letters = []
		i = 0
		while (i < len(word)):
			letters = (letters + [word[i]])
			i = (i + 1)
		chars = [ ch for ch in sorted([ ch for ch in letters ], key=lambda ch: ch) ]
		key = ""
		for ch in chars:
			key = (key + ch)
		if (key in index):
			idx = index[key]
			groups[idx] = (groups[idx] + [word])
		else:
			groups = (groups + [[word]])
			index[key] = (len(groups) - 1)
	return groups

def example_1():
	res = groupAnagrams(["eat", "tea", "tan", "ate", "nat", "bat"])
	normalize = (lambda g: [ x for x in sorted([ x for x in g ], key=lambda x: x) ])
	_sorted = [ normalize(g) for g in res ]
	final = [ g for g in sorted([ g for g in _sorted ], key=lambda g: g[0]) ]
	expected = [["ate", "eat", "tea"], ["bat"], ["nat", "tan"]]
	expSorted = [ normalize(g) for g in expected ]
	expFinal = [ g for g in sorted([ g for g in expSorted ], key=lambda g: g[0]) ]
	assert (final == expFinal)

def example_2():
	assert (groupAnagrams([""]) == [[""]])

def example_3():
	assert (groupAnagrams(["a"]) == [["a"]])

def main():
	example_1()
	example_2()
	example_3()

if __name__ == "__main__":
	main()
