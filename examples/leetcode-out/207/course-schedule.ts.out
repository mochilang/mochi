// Generated by Mochi TypeScript compiler

function canFinish(numCourses: number, prerequisites: Array<Array<number>>) : boolean {
	let graph: Array<any> = []
	let indegree: Array<any> = []
	for (let _: number = 0; _ < numCourses; _++) {
		graph = graph.concat([[]])
		indegree = indegree.concat([0])
	}
	for (const pair of prerequisites) {
		let a: number = pair[0]
		let b: number = pair[1]
		graph[b] = (graph[b] + [a])
		indegree[a] = (indegree[a] + 1)
	}
	let queue: Array<any> = []
	for (let i: number = 0; i < numCourses; i++) {
		if (_equal(indegree[i], 0)) {
			queue = queue.concat([i])
		}
	}
	let visited: number = 0
	let idx: number = 0
	while ((idx < queue.length)) {
		let course: any = queue[idx]
		idx = (idx + 1)
		visited = (visited + 1)
		for (const next of _iter(graph[course])) {
			indegree[next] = (indegree[next] - 1)
			if (_equal(indegree[next], 0)) {
				queue = queue.concat([next])
			}
		}
	}
	return (visited == numCourses)
}

function simple_acyclic(): void {
	if (!((canFinish(2, [[1, 0]]) == true))) { throw new Error('expect failed') }
}

function simple_cycle(): void {
	if (!((canFinish(2, [[1, 0], [0, 1]]) == false))) { throw new Error('expect failed') }
}

function long_chain(): void {
	if (!((canFinish(4, [[1, 0], [2, 1], [3, 2]]) == true))) { throw new Error('expect failed') }
}

function cycle_with_more_courses(): void {
	if (!((canFinish(3, [[0, 1], [1, 2], [2, 0]]) == false))) { throw new Error('expect failed') }
}

function main(): void {
	simple_acyclic()
	simple_cycle()
	long_chain()
	cycle_with_more_courses()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

function _iter(v: any): any {
  if (v && typeof v === 'object' && !Array.isArray(v) && !(Symbol.iterator in v)) {
    return Object.keys(v);
  }
  return v;
}

main()

