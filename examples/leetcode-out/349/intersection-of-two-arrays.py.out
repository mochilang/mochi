# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def intersection(nums1: list[int], nums2: list[int]) -> list[int]:
	set1 = {}
	for n in nums1:
		set1[n] = True
	seen = {}
	result = []
	for n in nums2:
		if (n in set1):
			if (not ((n in seen))):
				result = (result + [n])
				seen[n] = True
	return result

def example_1():
	out = intersection([1, 2, 2, 1], [2, 2])
	_sorted = [ x for x in sorted([ x for x in out ], key=lambda x: x) ]
	assert (_sorted == [2])

def example_2():
	out = intersection([4, 9, 5], [9, 4, 9, 8, 4])
	_sorted = [ x for x in sorted([ x for x in out ], key=lambda x: x) ]
	assert (_sorted == [4, 9])

def empty_first():
	assert (intersection([], [1, 2]) == [])

def empty_second():
	assert (intersection([1, 2, 3], []) == [])

def main():
	example_1()
	example_2()
	empty_first()
	empty_second()

if __name__ == "__main__":
	main()
