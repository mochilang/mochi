package main

import (
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func nextPermutation(nums []int) []int {
	var i int = (len(nums) - 2)
	for ((i >= 0) && (nums[i] >= nums[(i + 1)])) {
		i = (i - 1)
	}
	if (i >= 0) {
		var j int = (len(nums) - 1)
		for (nums[j] <= nums[i]) {
			j = (j - 1)
		}
		var temp int = nums[i]
		nums[i] = nums[j]
		nums[j] = temp
	}
	var start int = (i + 1)
	var end int = (len(nums) - 1)
	for (start < end) {
		var temp int = nums[start]
		nums[start] = nums[end]
		nums[end] = temp
		start = (start + 1)
		end = (end - 1)
	}
	return nums
}

func example_1() {
	expect(_equal(nextPermutation([]int{1, 2, 3}), []int{1, 3, 2}))
}

func example_2() {
	expect(_equal(nextPermutation([]int{3, 2, 1}), []int{1, 2, 3}))
}

func example_3() {
	expect(_equal(nextPermutation([]int{1, 1, 5}), []int{1, 5, 1}))
}

func single_element() {
	expect(_equal(nextPermutation([]int{1}), []int{1}))
}

func main() {
	example_1()
	example_2()
	example_3()
	single_element()
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

