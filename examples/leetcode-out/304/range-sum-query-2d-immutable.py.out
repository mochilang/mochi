# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def newNumMatrix(matrix: list[list[int]]) -> typing.Any:
	rows = len(matrix)
	if (rows == 0):
		return NumMatrix(sums=[])
	cols = len(matrix[0])
	sums = []
	r = 0
	while (r <= rows):
		row = []
		c = 0
		while (c <= cols):
			row = (row + [0])
			c = (c + 1)
		sums = (sums + [row])
		r = (r + 1)
	r = 1
	while (r <= rows):
		c = 1
		while (c <= cols):
			val = matrix[(r - 1)][(c - 1)]
			sums[r][c] = (((sums[(r - 1)][c] + sums[r][(c - 1)]) - sums[(r - 1)][(c - 1)]) + val)
			c = (c + 1)
		r = (r + 1)
	return NumMatrix(sums=sums)

def sumRegion(nm: NumMatrix, row1: int, col1: int, row2: int, col2: int) -> int:
	s = nm.sums
	return (((s[(row2 + 1)][(col2 + 1)] - s[row1][(col2 + 1)]) - s[(row2 + 1)][col1]) + s[row1][col1])

@dataclasses.dataclass
class NumMatrix:
	sums: list[list[int]]

def example():
	nm = newNumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]])
	assert (sumRegion(nm, 2, 1, 4, 3) == 8)
	assert (sumRegion(nm, 1, 1, 2, 2) == 11)
	assert (sumRegion(nm, 1, 2, 2, 4) == 12)

def main():
	example()

if __name__ == "__main__":
	main()
