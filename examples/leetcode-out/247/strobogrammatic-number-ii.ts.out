// Generated by Mochi TypeScript compiler

function findStrobogrammatic(n: number) : Array<string> {
	function build(len: number, total: number) : Array<string> {
		if ((len == 0)) {
			return [""]
		}
		if ((len == 1)) {
			return ["0", "1", "8"]
		}
		let mids: any = build((len - 2), total)
		let result: Array<any> = []
		for (const s of _iter(mids)) {
			if ((len != total)) {
				result = result.concat([("0" + s) + "0"])
			}
			result = result.concat([("1" + s) + "1"])
			result = result.concat([("6" + s) + "9"])
			result = result.concat([("8" + s) + "8"])
			result = result.concat([("9" + s) + "6"])
		}
		return result
	}
	return build(n, n)
}

function n___1(): void {
	if (!(_equal(findStrobogrammatic(1), ["0", "1", "8"]))) { throw new Error('expect failed') }
}

function n___2(): void {
	if (!(_equal(findStrobogrammatic(2), ["11", "69", "88", "96"]))) { throw new Error('expect failed') }
}

function n___3(): void {
	if (!(_equal(findStrobogrammatic(3), ["101", "609", "808", "906", "111", "619", "818", "916", "181", "689", "888", "986"]))) { throw new Error('expect failed') }
}

function main(): void {
	n___1()
	n___2()
	n___3()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

function _iter(v: any): any {
  if (v && typeof v === 'object' && !Array.isArray(v) && !(Symbol.iterator in v)) {
    return Object.keys(v);
  }
  return v;
}

main()

