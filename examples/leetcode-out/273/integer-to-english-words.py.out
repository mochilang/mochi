# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def convertBelow1000(n: int) -> str:
	ones = ["", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine"]
	teens = ["Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"]
	tens = ["", "", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"]
	words = ""
	num = n
	if (num >= 100):
		hundred = (num // 100)
		words = ((words + ones[hundred]) + " Hundred")
		num = (num % 100)
		if (num > 0):
			words = (words + " ")
	if (num >= 20):
		t = (num // 10)
		words = (words + tens[t])
		num = (num % 10)
		if (num > 0):
			words = ((words + " ") + ones[num])
	elif (num >= 10):
		words = (words + teens[(num - 10)])
	elif (num > 0):
		words = (words + ones[num])
	return words

def numberToWords(num: int) -> str:
	if (num == 0):
		return "Zero"
	groups = ["", "Thousand", "Million", "Billion"]
	parts = []
	n = num
	i = 0
	while (n > 0):
		chunk = (n % 1000)
		if (chunk > 0):
			chunkWords = convertBelow1000(chunk)
			part = chunkWords
			if (groups[i] != ""):
				part = ((part + " ") + groups[i])
			parts = ([part] + parts)
		n = (n // 1000)
		i = (i + 1)
	result = ""
	j = 0
	while (j < len(parts)):
		result = (result + parts[j])
		if (j < (len(parts) - 1)):
			result = (result + " ")
		j = (j + 1)
	return result

def example_1():
	assert (numberToWords(123) == "One Hundred Twenty Three")

def example_2():
	assert (numberToWords(12345) == "Twelve Thousand Three Hundred Forty Five")

def example_3():
	assert (numberToWords(1234567) == "One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven")

def zero():
	assert (numberToWords(0) == "Zero")

def million_and_tens():
	assert (numberToWords(1000010) == "One Million Ten")

def main():
	example_1()
	example_2()
	example_3()
	zero()
	million_and_tens()

if __name__ == "__main__":
	main()
