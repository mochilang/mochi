package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func isMatch(s string, p string) bool {
	var m int = len(s)
	var n int = len(p)
	var memo map[int]bool = map[int]bool{}
	_ = memo
	var dfs func(int, int) bool
	dfs = func(i int, j int) bool {
		var key int = ((i * ((n + 1))) + j)
		_tmp0 := key
		_tmp1 := memo
		_, _tmp2 := _tmp1[_tmp0]
		if _tmp2 {
			return memo[key]
		}
		if (j == n) {
			return (i == m)
		}
		var ans bool = false
		_ = ans
		if (_indexString(p, j) == "*") {
			if dfs(i, (j + 1)) {
				ans = true
			} else 		if ((i < m) && dfs((i + 1), j)) {
				ans = true
			}
		} else {
			if ((i < m) && (((_indexString(p, j) == "?") || (_indexString(p, j) == _indexString(s, i))))) {
				if dfs((i + 1), (j + 1)) {
					ans = true
				}
			}
		}
		memo[key] = ans
		return ans
}
	return dfs(0, 0)
}

func example_1() {
	expect((isMatch("aa", "a") == false))
}

func example_2() {
	expect((isMatch("aa", "*") == true))
}

func example_3() {
	expect((isMatch("cb", "?a") == false))
}

func example_4() {
	expect((isMatch("adceb", "*a*b") == true))
}

func empty_pattern() {
	expect((isMatch("", "") == true))
}

func only_star() {
	expect((isMatch("abc", "*") == true))
}

func main() {
	example_1()
	example_2()
	example_3()
	example_4()
	empty_pattern()
	only_star()
}

func _indexString(s string, i int) string {
    runes := []rune(s)
    if i < 0 {
        i += len(runes)
    }
    if i < 0 || i >= len(runes) {
        panic("index out of range")
    }
    return string(runes[i])
}

