# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def isMatch(s: str, p: str) -> bool:
	m = len(s)
	n = len(p)
	memo = {}
	def dfs(i: int, j: int) -> bool:
		nonlocal memo
		key = ((i * ((n + 1))) + j)
		if (key in memo):
			return memo[key]
		if (j == n):
			return (i == m)
		ans = False
		if (p[j] == "*"):
			if dfs(i, (j + 1)):
				ans = True
			elif ((i < m) and dfs((i + 1), j)):
				ans = True
		else:
			if ((i < m) and (((p[j] == "?") or (p[j] == s[i])))):
				if dfs((i + 1), (j + 1)):
					ans = True
		memo[key] = ans
		return ans
	return dfs(0, 0)

def example_1():
	assert (isMatch("aa", "a") == False)

def example_2():
	assert (isMatch("aa", "*") == True)

def example_3():
	assert (isMatch("cb", "?a") == False)

def example_4():
	assert (isMatch("adceb", "*a*b") == True)

def empty_pattern():
	assert (isMatch("", "") == True)

def only_star():
	assert (isMatch("abc", "*") == True)

def main():
	example_1()
	example_2()
	example_3()
	example_4()
	empty_pattern()
	only_star()

if __name__ == "__main__":
	main()
