// Generated by Mochi TypeScript compiler

function isMatch(s: string, p: string) : boolean {
	let m: number = s.length
	let n: number = p.length
	let memo: Record<any, any> = {}
	function dfs(i: number, j: number) : boolean {
		let key: number = ((i * ((n + 1))) + j)
		if (Object.prototype.hasOwnProperty.call(memo, String(key))) {
			return memo[key]
		}
		if ((j == n)) {
			return (i == m)
		}
		let ans: boolean = false
		if ((p[j] == "*")) {
			if (dfs(i, (j + 1))) {
				ans = true
			} else 			if (((i < m) && dfs((i + 1), j))) {
				ans = true
			}
		} else {
			if (((i < m) && (((p[j] == "?") || (p[j] == s[i]))))) {
				if (dfs((i + 1), (j + 1))) {
					ans = true
				}
			}
		}
		memo[key] = ans
		return ans
	}
	return dfs(0, 0)
}

function example_1(): void {
	if (!((isMatch("aa", "a") == false))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((isMatch("aa", "*") == true))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((isMatch("cb", "?a") == false))) { throw new Error('expect failed') }
}

function example_4(): void {
	if (!((isMatch("adceb", "*a*b") == true))) { throw new Error('expect failed') }
}

function empty_pattern(): void {
	if (!((isMatch("", "") == true))) { throw new Error('expect failed') }
}

function only_star(): void {
	if (!((isMatch("abc", "*") == true))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	example_4()
	empty_pattern()
	only_star()
}
main()

