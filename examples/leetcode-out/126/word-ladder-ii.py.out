# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def findLadders(beginWord: str, endWord: str, wordList: list[str]) -> list[list[str]]:
	_dict = {}
	for w in wordList:
		_dict[w] = True
	if (not ((endWord in _dict))):
		return []
	letters = "abcdefghijklmnopqrstuvwxyz"
	queue = [beginWord]
	visited = {beginWord: 0}
	parents = {}
	step = 0
	found = False
	while (len(queue) > 0):
		if found:
			break
		step = (step + 1)
		next = []
		for word in queue:
			i = 0
			while (i < len(word)):
				j = 0
				while (j < len(letters)):
					ch = letters[j]
					if (ch != word[i]):
						candidate = ((word[0:i] + ch) + word[(i + 1):len(word)])
						if (candidate in _dict):
							if (not ((candidate in visited))):
								visited[candidate] = step
								next = (next + [candidate])
							if (visited[candidate] == step):
								if (candidate in parents):
									parents[candidate] = (parents[candidate] + [word])
								else:
									parents[candidate] = [word]
							if (candidate == endWord):
								found = True
					j = (j + 1)
				i = (i + 1)
		queue = next
	if (not found):
		return []
	results = []
	def rev(lst: list[str]) -> list[str]:
		out = []
		i = (len(lst) - 1)
		while (i >= 0):
			out = (out + [lst[i]])
			i = (i - 1)
		return out
	def backtrack(word: str, path: list[str]) -> None:
		nonlocal results
		if (word == beginWord):
			results = (results + [rev((path + [word]))])
		else:
			ps = parents[word]
			for p in ps:
				backtrack(p, (path + [word]))
	backtrack(endWord, [])
	return results

def example_1():
	res = findLadders("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog"])
	_sorted = [ r for r in sorted([ r for r in res ], key=lambda r: r[2]) ]
	expected = [["hit", "hot", "dot", "dog", "cog"], ["hit", "hot", "lot", "log", "cog"]]
	expSorted = [ r for r in sorted([ r for r in expected ], key=lambda r: r[2]) ]
	assert (_sorted == expSorted)

def example_2():
	assert (findLadders("hit", "cog", ["hot", "dot", "dog", "lot", "log"]) == [])

def main():
	example_1()
	example_2()

if __name__ == "__main__":
	main()
