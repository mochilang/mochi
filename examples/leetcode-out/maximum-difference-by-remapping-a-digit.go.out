package main

import (
	"fmt"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func maxDiff(num int) int {
	var s string = fmt.Sprint(num)
	var digits map[string]int = map[string]int{"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	var digitMax string = ""
	_ = digitMax
	var i int = 0
	_ = i
	for (i < len(s)) {
		if (_indexString(s, i) != "9") {
			digitMax = _indexString(s, i)
			break
		}
		i = (i + 1)
	}
	var maxVal int = 0
	_ = maxVal
	for _, r := range []rune(s) {
		ch := string(r)
		var c string = ch
		_ = c
		if (c == digitMax) {
			c = "9"
		}
		maxVal = ((maxVal * 10) + digits[c])
	}
	var digitMin string = ""
	_ = digitMin
	i = 0
	for (i < len(s)) {
		if (_indexString(s, i) != "0") {
			digitMin = _indexString(s, i)
			break
		}
		i = (i + 1)
	}
	var minVal int = 0
	_ = minVal
	for _, r := range []rune(s) {
		ch := string(r)
		var c string = ch
		_ = c
		if (c == digitMin) {
			c = "0"
		}
		minVal = ((minVal * 10) + digits[c])
	}
	return (maxVal - minVal)
}

func example_1() {
	expect((maxDiff(11891) == 99009))
}

func example_2() {
	expect((maxDiff(90) == 99))
}

func main() {
	example_1()
	example_2()
}

func _indexString(s string, i int) string {
    runes := []rune(s)
    if i < 0 {
        i += len(runes)
    }
    if i < 0 || i >= len(runes) {
        panic("index out of range")
    }
    return string(runes[i])
}

