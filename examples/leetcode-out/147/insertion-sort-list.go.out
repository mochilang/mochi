package main

import (
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func insertionSortList(nums []int) []int {
	var arr []int = nums
	var i int = 1
	for (i < len(arr)) {
		var key int = arr[i]
		var j int = (i - 1)
		for ((j >= 0) && (arr[j] > key)) {
			arr[(j + 1)] = arr[j]
			j = (j - 1)
		}
		arr[(j + 1)] = key
		i = (i + 1)
	}
	return arr
}

func example_1() {
	expect(_equal(insertionSortList([]int{4, 2, 1, 3}), []int{1, 2, 3, 4}))
}

func example_2() {
	expect(_equal(insertionSortList([]int{-1, 5, 3, 4, 0}), []int{-1, 0, 3, 4, 5}))
}

func already_sorted() {
	expect(_equal(insertionSortList([]int{1, 2, 3, 4}), []int{1, 2, 3, 4}))
}

func single_element() {
	expect(_equal(insertionSortList([]int{1}), []int{1}))
}

func empty() {
	expect(_equal(insertionSortList([]int{}), []any{}))
}

func main() {
	example_1()
	example_2()
	already_sorted()
	single_element()
	empty()
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

