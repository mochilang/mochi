// Generated by Mochi TypeScript compiler

function splitComma(s: string) : Array<string> {
	let parts: Array<any> = []
	let current: string = ""
	let i: number = 0
	while ((i < s.length)) {
		let c: string = s[i]
		if ((c == ",")) {
			parts = parts.concat([current])
			current = ""
		} else {
			current = current + c
		}
		i = (i + 1)
	}
	parts = parts.concat([current])
	return parts
}

function isValidSerialization(preorder: string) : boolean {
	let nodes: Array<string> = splitComma(preorder)
	let slots: number = 1
	let i: number = 0
	while ((i < nodes.length)) {
		slots = (slots - 1)
		if ((slots < 0)) {
			return false
		}
		if ((nodes[i] != "#")) {
			slots = (slots + 2)
		}
		i = (i + 1)
	}
	return (slots == 0)
}

function example_1(): void {
	if (!((isValidSerialization("9,3,4,#,#,1,#,#,2,#,6,#,#") == true))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((isValidSerialization("1,#") == false))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((isValidSerialization("9,#,#,1") == false))) { throw new Error('expect failed') }
}

function empty_tree(): void {
	if (!((isValidSerialization("#") == true))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	empty_tree()
}
main()

