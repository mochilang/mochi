package main

import (
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func setZeroes(matrix [][]int) [][]int {
	var rows int = len(matrix)
	if (rows == 0) {
		return matrix
	}
	var cols int = len(matrix[0])
	var zeroRows []bool = []bool{}
	_ = zeroRows
	var zeroCols []bool = []bool{}
	_ = zeroCols
	var r int = 0
	_ = r
	for (r < rows) {
		zeroRows = append(append([]bool{}, zeroRows...), []bool{false}...)
		r = (r + 1)
	}
	var c int = 0
	_ = c
	for (c < cols) {
		zeroCols = append(append([]bool{}, zeroCols...), []bool{false}...)
		c = (c + 1)
	}
	var i int = 0
	_ = i
	for (i < rows) {
		var j int = 0
		_ = j
		for (j < cols) {
			if (matrix[i][j] == 0) {
				zeroRows[i] = true
				zeroCols[j] = true
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	i = 0
	for (i < rows) {
		var j int = 0
		_ = j
		for (j < cols) {
			if (zeroRows[i] || zeroCols[j]) {
				matrix[i][j] = 0
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return matrix
}

func example_1() {
	var m [][]int = [][]int{[]int{1, 1, 1}, []int{1, 0, 1}, []int{1, 1, 1}}
	_ = m
	setZeroes(m)
	expect(_equal(m, [][]int{[]int{1, 0, 1}, []int{0, 0, 0}, []int{1, 0, 1}}))
}

func example_2() {
	var m [][]int = [][]int{[]int{0, 1, 2, 0}, []int{3, 4, 5, 2}, []int{1, 3, 1, 5}}
	_ = m
	setZeroes(m)
	expect(_equal(m, [][]int{[]int{0, 0, 0, 0}, []int{0, 4, 5, 0}, []int{0, 3, 1, 0}}))
}

func main() {
	example_1()
	example_2()
}

func _equal(a, b any) bool {
    return reflect.DeepEqual(a, b)
}

