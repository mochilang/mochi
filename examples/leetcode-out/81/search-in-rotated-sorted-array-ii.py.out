# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def search(nums: list[int], target: int) -> bool:
	left = 0
	right = (len(nums) - 1)
	while (left <= right):
		mid = (((left + right)) // 2)
		if (nums[mid] == target):
			return True
		if (nums[left] == nums[mid]):
			left = (left + 1)
		elif (nums[left] < nums[mid]):
			if ((nums[left] <= target) and (target < nums[mid])):
				right = (mid - 1)
			else:
				left = (mid + 1)
		else:
			if ((nums[mid] < target) and (target <= nums[right])):
				left = (mid + 1)
			else:
				right = (mid - 1)
	return False

def example_1():
	assert (search([2, 5, 6, 0, 0, 1, 2], 0) == True)

def example_2():
	assert (search([2, 5, 6, 0, 0, 1, 2], 3) == False)

def all_duplicates():
	assert (search([1, 1, 1, 1, 1], 2) == False)

def single_element():
	assert (search([1], 1) == True)

def empty_array():
	assert (search([], 5) == False)

def main():
	example_1()
	example_2()
	all_duplicates()
	single_element()
	empty_array()

if __name__ == "__main__":
	main()
