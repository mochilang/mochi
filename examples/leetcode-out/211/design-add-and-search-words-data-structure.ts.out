// Generated by Mochi TypeScript compiler

function Node() : Record<string, any> {
	return {"end": false, "next": {}}
}

function addWord(root: Record<string, any>, word: string) : void {
	let node: Record<string, any> = root
	for (let i: number = 0; i < word.length; i++) {
		let ch: string = word[i]
		let nextMap: Record<string, any> = node["next"]
		let child: any = undefined
		if (Object.prototype.hasOwnProperty.call(nextMap, String(ch))) {
			child = nextMap[ch]
		} else {
			child = Node()
		}
		if ((i == (word.length - 1))) {
			child["end"] = true
		}
		nextMap[ch] = child
		node["next"] = nextMap
		node = child
	}
}

function searchHelper(node: Record<string, any>, word: string, index: number) : boolean {
	if ((index == word.length)) {
		return node["end"]
	}
	let ch: string = word[index]
	let children: Record<string, any> = node["next"]
	if ((ch == ".")) {
		for (const key of Object.keys(children)) {
			let child: Record<string, any> = children[key]
			if (searchHelper(child, word, (index + 1))) {
				return true
			}
		}
		return false
	}
	if (Object.prototype.hasOwnProperty.call(children, String(ch))) {
		return searchHelper(children[ch], word, (index + 1))
	}
	return false
}

function search(root: Record<string, any>, word: string) : boolean {
	return searchHelper(root, word, 0)
}

function example_1(): void {
	let wd: Record<string, any> = Node()
	addWord(wd, "bad")
	addWord(wd, "dad")
	addWord(wd, "mad")
	if (!((search(wd, "pad") == false))) { throw new Error('expect failed') }
	if (!((search(wd, "bad") == true))) { throw new Error('expect failed') }
	if (!((search(wd, ".ad") == true))) { throw new Error('expect failed') }
	if (!((search(wd, "b..") == true))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
}
main()

