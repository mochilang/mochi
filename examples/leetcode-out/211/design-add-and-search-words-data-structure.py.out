# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def Node() -> dict[str, typing.Any]:
	return {"end": False, "next": {}}

def addWord(root: dict[str, typing.Any], word: str) -> None:
	node = root
	for i in range(0, len(word)):
		ch = word[i]
		nextMap = node["next"]
		child = None
		if (ch in nextMap):
			child = nextMap[ch]
		else:
			child = Node()
		if (i == (len(word) - 1)):
			child["end"] = True
		nextMap[ch] = child
		node["next"] = nextMap
		node = child

def searchHelper(node: dict[str, typing.Any], word: str, index: int) -> bool:
	if (index == len(word)):
		return node["end"]
	ch = word[index]
	children = node["next"]
	if (ch == "."):
		for key in children:
			child = children[key]
			if searchHelper(child, word, (index + 1)):
				return True
		return False
	if (ch in children):
		return searchHelper(children[ch], word, (index + 1))
	return False

def search(root: dict[str, typing.Any], word: str) -> bool:
	return searchHelper(root, word, 0)

def example_1():
	wd = Node()
	addWord(wd, "bad")
	addWord(wd, "dad")
	addWord(wd, "mad")
	assert (search(wd, "pad") == False)
	assert (search(wd, "bad") == True)
	assert (search(wd, ".ad") == True)
	assert (search(wd, "b..") == True)

def main():
	example_1()

if __name__ == "__main__":
	main()
