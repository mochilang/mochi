package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func longestConsecutive(nums []int) int {
	var set map[int]bool = map[int]bool{}
	_ = set
	for _, n := range nums {
		set[n] = true
	}
	var best int = 0
	_ = best
	for n := range set {
		_tmp0 := (n - 1)
		_tmp1 := set
		_, _tmp2 := _tmp1[_tmp0]
		if !(_tmp2) {
			var curr int = n
			_ = curr
			var length int = 1
			_ = length
			_tmp3 := (curr + 1)
			_tmp4 := set
			_, _tmp5 := _tmp4[_tmp3]
			for _tmp5 {
				curr = (curr + 1)
				length = (length + 1)
			}
			if (length > best) {
				best = length
			}
		}
	}
	return best
}

func example_1() {
	expect((longestConsecutive([]int{100, 4, 200, 1, 3, 2}) == 4))
}

func example_2() {
	expect((longestConsecutive([]int{0, 3, 7, 2, 5, 8, 4, 6, 0, 1}) == 9))
}

func empty() {
	expect((longestConsecutive([]int{}) == 0))
}

func duplicates() {
	expect((longestConsecutive([]int{1, 2, 0, 1}) == 3))
}

func main() {
	example_1()
	example_2()
	empty()
	duplicates()
}

