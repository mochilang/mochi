// Generated by Mochi TypeScript compiler

function maxSlidingWindow(nums: Array<number>, k: number) : Array<number> {
	let n: number = nums.length
	if ((n == 0)) {
		return []
	}
	let result: Array<any> = []
	let deque: Array<any> = []
	let i: number = 0
	while ((i < n)) {
		while ((deque.length > 0)) {
			let last: any = deque[(deque.length - 1)]
			if ((nums[last] < nums[i])) {
				deque = deque.slice(0, (deque.length - 1))
			} else {
				break
			}
		}
		deque = deque.concat([i])
		if ((deque.length > 0)) {
			if ((deque[0] <= (i - k))) {
				deque = deque.slice(1, deque.length)
			}
		}
		if (((i + 1) >= k)) {
			result = result.concat([nums[deque[0]]])
		}
		i = (i + 1)
	}
	return result
}

function example_1(): void {
	if (!(_equal(maxSlidingWindow([1, 3, (-1), (-3), 5, 3, 6, 7], 3), [3, 3, 5, 5, 6, 7]))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!(_equal(maxSlidingWindow([1], 1), [1]))) { throw new Error('expect failed') }
}

function k_equals_array_length(): void {
	if (!(_equal(maxSlidingWindow([2, 1], 2), [2]))) { throw new Error('expect failed') }
}

function all_decreasing(): void {
	if (!(_equal(maxSlidingWindow([9, 8, 7, 6, 5], 2), [9, 8, 7, 6]))) { throw new Error('expect failed') }
}

function window_size_1(): void {
	if (!(_equal(maxSlidingWindow([4, 2], 1), [4, 2]))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	k_equals_array_length()
	all_decreasing()
	window_size_1()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

