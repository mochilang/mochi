// Generated by Mochi TypeScript compiler

function findOrder(numCourses: number, prerequisites: Array<Array<number>>) : Array<number> {
	let graph: Record<any, any> = {}
	let indegree: Record<any, any> = {}
	let i: number = 0
	while ((i < numCourses)) {
		graph[i] = []
		indegree[i] = 0
		i = (i + 1)
	}
	for (const pair of prerequisites) {
		let dest: number = pair[0]
		let src: number = pair[1]
		graph[src] = (graph[src] + [dest])
		indegree[dest] = (indegree[dest] + 1)
	}
	let queue: Array<any> = []
	let j: number = 0
	while ((j < numCourses)) {
		if (_equal(indegree[j], 0)) {
			queue = queue.concat([j])
		}
		j = (j + 1)
	}
	let order: Array<any> = []
	while ((queue.length > 0)) {
		let next: Array<any> = []
		for (const course of queue) {
			order = order.concat([course])
			for (const neighbor of _iter(graph[course])) {
				indegree[neighbor] = (indegree[neighbor] - 1)
				if (_equal(indegree[neighbor], 0)) {
					next = next.concat([neighbor])
				}
			}
		}
		queue = next
	}
	if ((order.length == numCourses)) {
		return order
	}
	return []
}

function example_1(): void {
	if (!(_equal(findOrder(2, [[1, 0]]), [0, 1]))) { throw new Error('expect failed') }
}

function example_2(): void {
	let order: Array<number> = findOrder(4, [[1, 0], [2, 0], [3, 1], [3, 2]])
	let valid: boolean = true
	if ((order.length == 4)) {
		let idx: Record<any, any> = {}
		let k: number = 0
		while ((k < order.length)) {
			idx[order[k]] = k
			k = (k + 1)
		}
		if (((idx[0] > idx[1]) && (idx[0] > idx[2]))) {
			valid = false
		}
		if ((idx[1] > idx[3])) {
			valid = false
		}
		if ((idx[2] > idx[3])) {
			valid = false
		}
	} else {
		valid = false
	}
	if (!((valid == true))) { throw new Error('expect failed') }
}

function cycle(): void {
	if (!(_equal(findOrder(2, [[0, 1], [1, 0]]), []))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	cycle()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

function _iter(v: any): any {
  if (v && typeof v === 'object' && !Array.isArray(v) && !(Symbol.iterator in v)) {
    return Object.keys(v);
  }
  return v;
}

main()

