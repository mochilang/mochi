# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def Leaf() -> dict[str, typing.Any]:
	return {"__name": "Leaf"}

def Node(left: dict[str, typing.Any], value: int, right: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return {"__name": "Node", "left": left, "value": value, "right": right}

def isLeaf(t: dict[str, typing.Any]) -> bool:
	return (t["__name"] == "Leaf")

def left(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["left"]

def right(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["right"]

def value(t: dict[str, typing.Any]) -> int:
	return t["value"]

def dfs(node: dict[str, typing.Any]) -> dict[str, int]:
	if isLeaf(node):
		return {"rob": 0, "skip": 0}
	l = dfs(left(node))
	r = dfs(right(node))
	take = ((value(node) + l["skip"]) + r["skip"])
	notake = l["rob"]
	if (l["skip"] > notake):
		notake = l["skip"]
	rr = r["rob"]
	if (r["skip"] > rr):
		rr = r["skip"]
	notake2 = (notake + rr)
	return {"rob": take, "skip": notake2}

def rob(root: dict[str, typing.Any]) -> int:
	res = dfs(root)
	m = res["rob"]
	if (res["skip"] > m):
		m = res["skip"]
	return m

example1 = Node(Node(Leaf(), 2, Node(Leaf(), 3, Leaf())), 3, Node(Leaf(), 3, Node(Leaf(), 1, Leaf())))

def example_1():
	assert (rob(example1) == 7)

def example_2():
	assert (rob(example2) == 9)

def single_node():
	assert (rob(Node(Leaf(), 4, Leaf())) == 4)

def empty():
	assert (rob(Leaf()) == 0)

def main():
	example1 = Node(Node(Leaf(), 2, Node(Leaf(), 3, Leaf())), 3, Node(Leaf(), 3, Node(Leaf(), 1, Leaf())))
	example2 = Node(Node(Node(Leaf(), 1, Leaf()), 4, Node(Leaf(), 3, Leaf())), 3, Node(Leaf(), 5, Node(Leaf(), 1, Leaf())))
	example_1()
	example_2()
	single_node()
	empty()

if __name__ == "__main__":
	main()
