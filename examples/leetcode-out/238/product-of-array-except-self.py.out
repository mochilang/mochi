# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def productExceptSelf(nums: list[int]) -> list[int]:
	n = len(nums)
	if (n == 0):
		return []
	result = []
	prefix = 1
	i = 0
	while (i < n):
		result = (result + [prefix])
		prefix = (prefix * nums[i])
		i = (i + 1)
	suffix = 1
	i = (n - 1)
	while (i >= 0):
		result[i] = (result[i] * suffix)
		suffix = (suffix * nums[i])
		i = (i - 1)
	return result

def example_1():
	assert (productExceptSelf([1, 2, 3, 4]) == [24, 12, 8, 6])

def example_2():
	assert (productExceptSelf([0, 1, 2, 3]) == [6, 0, 0, 0])

def example_3():
	assert (productExceptSelf([(-1), 1, 0, (-3), 3]) == [0, 0, 9, 0, 0])

def single_element():
	assert (productExceptSelf([5]) == [1])

def two_zeros():
	assert (productExceptSelf([0, 0]) == [0, 0])

def main():
	example_1()
	example_2()
	example_3()
	single_element()
	two_zeros()

if __name__ == "__main__":
	main()
