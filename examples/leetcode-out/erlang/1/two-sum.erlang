#!/usr/bin/env escript
-module(main).
-export([main/1, twoSum/2]).

twoSum(Nums, Target) ->
	try
		N = length(Nums),
		mochi_foreach(fun(I) ->
			mochi_foreach(fun(J) ->
								case ((lists:nth(I + 1, Nums) + lists:nth(J + 1, Nums)) == Target) of
					true ->
						throw({return, [I, J]})
										; _ -> ok
				end
			end, lists:seq((I + 1), (N)-1))
		end, lists:seq(0, (N)-1)),
		throw({return, [-1, -1]})
	catch
		throw:{return, V} -> V
	end.

main(_) ->
	Result = twoSum([2, 7, 11, 15], 9),
	mochi_print([lists:nth(0 + 1, Result)]),
	mochi_print([lists:nth(1 + 1, Result)]).

mochi_print(Args) ->
	Strs = [ mochi_format(A) || A <- Args ],
	io:format("~s~n", [lists:flatten(Strs)]).

mochi_format(X) when is_integer(X) -> integer_to_list(X);
mochi_format(X) when is_float(X) -> float_to_list(X);
mochi_format(X) when is_list(X) -> X;
mochi_format(X) -> lists:flatten(io_lib:format("~p", [X])).

mochi_count(X) when is_list(X) -> length(X);
mochi_count(X) when is_map(X) -> maps:size(X);
mochi_count(X) when is_binary(X) -> byte_size(X);
mochi_count(_) -> erlang:error(badarg).

mochi_input() ->
	case io:get_line("") of
		eof -> "";
		Line -> string:trim(Line)
	end.

mochi_avg([]) -> 0;
mochi_avg(L) when is_list(L) ->
	Sum = lists:foldl(fun(X, Acc) ->
		case X of
			I when is_integer(I) -> Acc + I;
			F when is_float(F) -> Acc + F;
			_ -> erlang:error(badarg) end
		end, 0, L),
		Sum / length(L);
	mochi_avg(_) -> erlang:error(badarg).
	
	mochi_foreach(F, L) ->
		try mochi_foreach_loop(F, L) catch throw:mochi_break -> ok end.
	
	mochi_foreach_loop(_, []) -> ok;
	mochi_foreach_loop(F, [H|T]) ->
		try F(H) catch
			throw:mochi_continue -> ok;
			throw:mochi_break -> throw(mochi_break)
		end,
		mochi_foreach_loop(F, T).
	
	mochi_while(Cond, Body) ->
		case Cond() of
			true ->
				try Body() catch
					throw:mochi_continue -> ok;
					throw:mochi_break -> ok
				end,
				mochi_while(Cond, Body);
			_ -> ok
		end.
