#!/usr/bin/env escript
-module(main).
-export([main/1, lengthOfLongestSubstring/1]).

lengthOfLongestSubstring(S) ->
	try
		N = length(S),
		Start = 0,
		Best = 0,
		I = 0,
		mochi_while(fun() -> (I < N) end, fun() ->
			J = Start,
			mochi_while(fun() -> (J < I) end, fun() ->
								case (lists:nth(J + 1, S) == lists:nth(I + 1, S)) of
					true ->
						Start_1 = (J + 1),
						throw(mochi_break)
										; _ -> ok
				end,
				J_1 = (J + 1)
			end),
			Length = ((I - Start_1) + 1),
						case (Length > Best) of
				true ->
					Best_1 = Length
								; _ -> ok
			end,
			I_1 = (I + 1)
		end),
		throw({return, Best_1})
	catch
		throw:{return, V} -> V
	end.

main(_) ->
	ok,
	ok,
	ok,
	ok.

mochi_print(Args) ->
	Strs = [ mochi_format(A) || A <- Args ],
	io:format("~s~n", [lists:flatten(Strs)]).

mochi_format(X) when is_integer(X) -> integer_to_list(X);
mochi_format(X) when is_float(X) -> float_to_list(X);
mochi_format(X) when is_list(X) -> X;
mochi_format(X) -> lists:flatten(io_lib:format("~p", [X])).

mochi_count(X) when is_list(X) -> length(X);
mochi_count(X) when is_map(X) -> maps:size(X);
mochi_count(X) when is_binary(X) -> byte_size(X);
mochi_count(_) -> erlang:error(badarg).

mochi_input() ->
	case io:get_line("") of
		eof -> "";
		Line -> string:trim(Line)
	end.

mochi_avg([]) -> 0;
mochi_avg(L) when is_list(L) ->
	Sum = lists:foldl(fun(X, Acc) ->
		case X of
			I when is_integer(I) -> Acc + I;
			F when is_float(F) -> Acc + F;
			_ -> erlang:error(badarg) end
		end, 0, L),
		Sum / length(L);
	mochi_avg(_) -> erlang:error(badarg).
	
	mochi_foreach(F, L) ->
		try mochi_foreach_loop(F, L) catch throw:mochi_break -> ok end.
	
	mochi_foreach_loop(_, []) -> ok;
	mochi_foreach_loop(F, [H|T]) ->
		try F(H) catch
			throw:mochi_continue -> ok;
			throw:mochi_break -> throw(mochi_break)
		end,
		mochi_foreach_loop(F, T).
	
	mochi_while(Cond, Body) ->
		case Cond() of
			true ->
				try Body() catch
					throw:mochi_continue -> ok;
					throw:mochi_break -> ok
				end,
				mochi_while(Cond, Body);
			_ -> ok
		end.
