#!/usr/bin/env escript
-module(main).
-export([main/1, expand/3, longestPalindrome/1]).

expand(S, Left, Right) ->
	try
		L = Left,
		R = Right,
		N = length(S),
		mochi_while(fun() -> ((L >= 0) and (R < N)) end, fun() ->
						case (lists:nth(L + 1, S) /= lists:nth(R + 1, S)) of
				true ->
					throw(mochi_break)
								; _ -> ok
			end,
			L_1 = (L - 1),
			R_1 = (R + 1)
		end),
		throw({return, ((R_1 - L_1) - 1)})
	catch
		throw:{return, V} -> V
	end.

longestPalindrome(S_1) ->
	try
				case (length(S_1) <= 1) of
			true ->
				throw({return, S_1})
						; _ -> ok
		end,
		Start = 0,
		End = 0,
		N_1 = length(S_1),
		mochi_foreach(fun(I) ->
			Len1 = expand(S_1, I, I),
			Len2 = expand(S_1, I, (I + 1)),
			L_2 = Len1,
						case (Len2 > Len1) of
				true ->
					L_3 = Len2
								; _ -> ok
			end,
						case (L_3 > (End - Start)) of
				true ->
					Start_1 = (I - ((L_3 - 1) / 2)),
					End_1 = (I + (L_3 / 2))
								; _ -> ok
			end
		end, lists:seq(0, (N_1)-1)),
		throw({return, lists:nth(Start_1 + 1, S_1)})
	catch
		throw:{return, V} -> V
	end.

main(_) ->
	ok,
	ok,
	ok,
	ok.

mochi_print(Args) ->
	Strs = [ mochi_format(A) || A <- Args ],
	io:format("~s~n", [lists:flatten(Strs)]).

mochi_format(X) when is_integer(X) -> integer_to_list(X);
mochi_format(X) when is_float(X) -> float_to_list(X);
mochi_format(X) when is_list(X) -> X;
mochi_format(X) -> lists:flatten(io_lib:format("~p", [X])).

mochi_count(X) when is_list(X) -> length(X);
mochi_count(X) when is_map(X) -> maps:size(X);
mochi_count(X) when is_binary(X) -> byte_size(X);
mochi_count(_) -> erlang:error(badarg).

mochi_input() ->
	case io:get_line("") of
		eof -> "";
		Line -> string:trim(Line)
	end.

mochi_avg([]) -> 0;
mochi_avg(L) when is_list(L) ->
	Sum = lists:foldl(fun(X, Acc) ->
		case X of
			I when is_integer(I) -> Acc + I;
			F when is_float(F) -> Acc + F;
			_ -> erlang:error(badarg) end
		end, 0, L),
		Sum / length(L);
	mochi_avg(_) -> erlang:error(badarg).
	
	mochi_foreach(F, L) ->
		try mochi_foreach_loop(F, L) catch throw:mochi_break -> ok end.
	
	mochi_foreach_loop(_, []) -> ok;
	mochi_foreach_loop(F, [H|T]) ->
		try F(H) catch
			throw:mochi_continue -> ok;
			throw:mochi_break -> throw(mochi_break)
		end,
		mochi_foreach_loop(F, T).
	
	mochi_while(Cond, Body) ->
		case Cond() of
			true ->
				try Body() catch
					throw:mochi_continue -> ok;
					throw:mochi_break -> ok
				end,
				mochi_while(Cond, Body);
			_ -> ok
		end.
