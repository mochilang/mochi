#!/usr/bin/env escript
-module(main).
-export([main/1, findMedianSortedArrays/2]).

findMedianSortedArrays(Nums1, Nums2) ->
	try
		Merged = [],
		I = 0,
		J = 0,
		mochi_while(fun() -> ((I < length(Nums1)) or (J < length(Nums2))) end, fun() ->
						case (J >= length(Nums2)) of
				true ->
					Merged_1 = lists:append(Merged, [lists:nth(I + 1, Nums1)]),
					I_1 = (I + 1)
								; _ ->
					case (I_1 >= length(Nums1)) of
						true ->
							Merged_2 = lists:append(Merged_1, [lists:nth(J + 1, Nums2)]),
							J_1 = (J + 1)
												; _ ->
							case (lists:nth(I_1 + 1, Nums1) <= lists:nth(J_1 + 1, Nums2)) of
								true ->
									Merged_3 = lists:append(Merged_2, [lists:nth(I_1 + 1, Nums1)]),
									I_2 = (I_1 + 1)
																; _ ->
									Merged_4 = lists:append(Merged_3, [lists:nth(J_1 + 1, Nums2)]),
									J_2 = (J_1 + 1)
							end					end			end
		end),
		Total = length(Merged_4),
				case ((Total % 2) == 1) of
			true ->
				throw({return, lists:nth((Total / 2) + 1, Merged_4)})
						; _ -> ok
		end,
		Mid1 = lists:nth(((Total / 2) - 1) + 1, Merged_4),
		Mid2 = lists:nth((Total / 2) + 1, Merged_4),
		throw({return, ((Mid1 + Mid2) / 2)})
	catch
		throw:{return, V} -> V
	end.

main(_) ->
	ok,
	ok,
	ok,
	ok.

mochi_print(Args) ->
	Strs = [ mochi_format(A) || A <- Args ],
	io:format("~s~n", [lists:flatten(Strs)]).

mochi_format(X) when is_integer(X) -> integer_to_list(X);
mochi_format(X) when is_float(X) -> float_to_list(X);
mochi_format(X) when is_list(X) -> X;
mochi_format(X) -> lists:flatten(io_lib:format("~p", [X])).

mochi_count(X) when is_list(X) -> length(X);
mochi_count(X) when is_map(X) -> maps:size(X);
mochi_count(X) when is_binary(X) -> byte_size(X);
mochi_count(_) -> erlang:error(badarg).

mochi_input() ->
	case io:get_line("") of
		eof -> "";
		Line -> string:trim(Line)
	end.

mochi_avg([]) -> 0;
mochi_avg(L) when is_list(L) ->
	Sum = lists:foldl(fun(X, Acc) ->
		case X of
			I when is_integer(I) -> Acc + I;
			F when is_float(F) -> Acc + F;
			_ -> erlang:error(badarg) end
		end, 0, L),
		Sum / length(L);
	mochi_avg(_) -> erlang:error(badarg).
	
	mochi_foreach(F, L) ->
		try mochi_foreach_loop(F, L) catch throw:mochi_break -> ok end.
	
	mochi_foreach_loop(_, []) -> ok;
	mochi_foreach_loop(F, [H|T]) ->
		try F(H) catch
			throw:mochi_continue -> ok;
			throw:mochi_break -> throw(mochi_break)
		end,
		mochi_foreach_loop(F, T).
	
	mochi_while(Cond, Body) ->
		case Cond() of
			true ->
				try Body() catch
					throw:mochi_continue -> ok;
					throw:mochi_break -> ok
				end,
				mochi_while(Cond, Body);
			_ -> ok
		end.
