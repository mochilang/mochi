package main

import (
	"fmt"
	"reflect"
	"sort"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func exist(board [][]string, word string) bool {
	var m int = len(board)
	if (m == 0) {
		return false
	}
	var n int = len(board[0])
	var visited [][]bool = [][]bool{}
	var r int = 0
	for (r < m) {
		var row []bool = []bool{}
		var c int = 0
		for (c < n) {
			row = append(append([]bool{}, row...), []bool{false}...)
			c = (c + 1)
		}
		visited = append(append([][]bool{}, visited...), [][]bool{row}...)
		r = (r + 1)
	}
	var dfs func(int, int, int) bool
	dfs = func(r int, c int, idx int) bool {
		if (idx == len(word)) {
			return true
		}
		if ((((r < 0) || (r >= m)) || (c < 0)) || (c >= n)) {
			return false
		}
		if visited[r][c] {
			return false
		}
		if (board[r][c] != _indexString(word, idx)) {
			return false
		}
		visited[r][c] = true
		if (((dfs((r + 1), c, (idx + 1)) || dfs((r - 1), c, (idx + 1))) || dfs(r, (c + 1), (idx + 1))) || dfs(r, (c - 1), (idx + 1))) {
			visited[r][c] = false
			return true
		}
		visited[r][c] = false
		return false
}
	for i := 0; i < m; i++ {
		for j := 0; j < n; j++ {
			if dfs(i, j, 0) {
				return true
			}
		}
	}
	return false
}

func findWords(board [][]string, words []string) []string {
	var found []string = []string{}
	for _, w := range words {
		if exist(board, w) {
			found = append(append([]string{}, found...), []string{w}...)
		}
	}
	return found
}

func example() {
	var result []string = func() []string {
	items := []string{}
	for _, w := range findWords(board, words) {
		items = append(items, w)
	}
	type pair struct { item string; key any }
	pairs := make([]pair, len(items))
	for idx, it := range items {
		w := it
		pairs[idx] = pair{item: it, key: w}
	}
	sort.Slice(pairs, func(i, j int) bool {
		a, b := pairs[i].key, pairs[j].key
		switch av := a.(type) {
		case int:
			switch bv := b.(type) {
			case int:
				return av < bv
			case float64:
				return float64(av) < bv
			}
		case float64:
			switch bv := b.(type) {
			case int:
				return av < float64(bv)
			case float64:
				return av < bv
			}
		case string:
			bs, _ := b.(string)
			return av < bs
		}
		return fmt.Sprint(a) < fmt.Sprint(b)
	})
	for idx, p := range pairs {
		items[idx] = p.item
	}
	_res := []string{}
	for _, w := range items {
		_res = append(_res, w)
	}
	return _res
}()
	_ = result
	expect(_equal(result, []string{"eat", "oath"}))
}

var board [][]string = [][]string{[]string{"o", "a", "a", "n"}, []string{"e", "t", "a", "e"}, []string{"i", "h", "k", "r"}, []string{"i", "f", "l", "v"}}
var words []string = []string{"oath", "pea", "eat", "rain"}
func main() {
	example()
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

func _indexString(s string, i int) string {
    runes := []rune(s)
    if i < 0 {
        i += len(runes)
    }
    if i < 0 || i >= len(runes) {
        panic("index out of range")
    }
    return string(runes[i])
}

