# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def ord(ch: str) -> int:
	letters = {"a": 0, "b": 1, "c": 2, "d": 3, "e": 4, "f": 5, "g": 6, "h": 7, "i": 8, "j": 9, "k": 10, "l": 11, "m": 12, "n": 13, "o": 14, "p": 15, "q": 16, "r": 17, "s": 18, "t": 19, "u": 20, "v": 21, "w": 22, "x": 23, "y": 24, "z": 25}
	if (ch in letters):
		return letters[ch]
	return 0

def patternKey(s: str) -> str:
	if (len(s) == 0):
		return ""
	key = ""
	base = ord(s[0])
	i = 0
	while (i < len(s)):
		diff = ((((ord(s[i]) - base) + 26)) % 26)
		key = ((key + str(diff)) + ",")
		i = (i + 1)
	return key

def groupStrings(strings: list[str]) -> list[list[str]]:
	groups = {}
	for s in strings:
		k = patternKey(s)
		lst = []
		if (k in groups):
			lst = groups[k]
		lst = (lst + [s])
		groups[k] = lst
	result = []
	for k in groups:
		result = (result + [groups[k]])
	return result

def example_1():
	input = ["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"]
	res = groupStrings(input)
	assert (len(res) == 4)

def single():
	assert (groupStrings(["a"])[0][0] == "a")

def empty_list():
	res = groupStrings([])
	assert (len(res) == 0)

def main():
	example_1()
	single()
	empty_list()

if __name__ == "__main__":
	main()
