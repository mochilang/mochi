// Generated by Mochi TypeScript compiler

function isOneEditDistance(s: string, t: string) : boolean {
	let m: number = s.length
	let n: number = t.length
	if ((m > n)) {
		return isOneEditDistance(t, s)
	}
	if (((n - m) > 1)) {
		return false
	}
	let i: number = 0
	while ((i < m)) {
		if ((s[i] != t[i])) {
			if ((m == n)) {
				return (s.slice((i + 1), m) == t.slice((i + 1), n))
			}
			return (s.slice(i, m) == t.slice((i + 1), n))
		}
		i = (i + 1)
	}
	return ((n - m) == 1)
}

function example_1(): void {
	if (!((isOneEditDistance("ab", "acb") == true))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((isOneEditDistance("cab", "ad") == false))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((isOneEditDistance("1203", "1213") == true))) { throw new Error('expect failed') }
}

function identical(): void {
	if (!((isOneEditDistance("a", "a") == false))) { throw new Error('expect failed') }
}

function insert_at_end(): void {
	if (!((isOneEditDistance("abc", "abcc") == true))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	identical()
	insert_at_end()
}
main()

