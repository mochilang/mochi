# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def Leaf() -> dict[str, typing.Any]:
	return {"__name": "Leaf"}

def Node(left: dict[str, typing.Any], value: int, right: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return {"__name": "Node", "left": left, "value": value, "right": right}

def isLeaf(t: dict[str, typing.Any]) -> bool:
	return (t["__name"] == "Leaf")

def left(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["left"]

def right(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["right"]

def value(t: dict[str, typing.Any]) -> int:
	return t["value"]

def verticalOrder(root: dict[str, typing.Any]) -> list[list[int]]:
	if isLeaf(root):
		return []
	queue = [root]
	cols = [0]
	table = {}
	minCol = 0
	maxCol = 0
	i = 0
	while (i < len(queue)):
		node = queue[i]
		col = cols[i]
		if (col in table):
			table[col] = (table[col] + [value(node)])
		else:
			table[col] = [value(node)]
		l = left(node)
		r = right(node)
		if (not isLeaf(l)):
			queue = (queue + [l])
			cols = (cols + [(col - 1)])
		if (not isLeaf(r)):
			queue = (queue + [r])
			cols = (cols + [(col + 1)])
		if (col < minCol):
			minCol = col
		if (col > maxCol):
			maxCol = col
		i = (i + 1)
	result = []
	c = minCol
	while (c <= maxCol):
		if (c in table):
			result = (result + [table[c]])
		c = (c + 1)
	return result

example1 = Node(Node(Leaf(), 9, Leaf()), 3, Node(Node(Leaf(), 15, Leaf()), 20, Node(Leaf(), 7, Leaf())))
example2 = Node(Node(Node(Leaf(), 4, Leaf()), 2, Node(Leaf(), 5, Leaf())), 1, Node(Node(Leaf(), 6, Leaf()), 3, Node(Leaf(), 7, Leaf())))

def example_1():
	assert (verticalOrder(example1) == [[9], [3, 15], [20], [7]])

def example_2():
	assert (verticalOrder(example2) == [[4], [2], [1, 5, 6], [3], [7]])

def single_node():
	assert (verticalOrder(Node(Leaf(), 1, Leaf())) == [[1]])

def empty():
	assert (verticalOrder(Leaf()) == [])

def main():
	example1 = Node(Node(Leaf(), 9, Leaf()), 3, Node(Node(Leaf(), 15, Leaf()), 20, Node(Leaf(), 7, Leaf())))
	example2 = Node(Node(Node(Leaf(), 4, Leaf()), 2, Node(Leaf(), 5, Leaf())), 1, Node(Node(Leaf(), 6, Leaf()), 3, Node(Leaf(), 7, Leaf())))
	example_1()
	example_2()
	single_node()
	empty()

if __name__ == "__main__":
	main()
