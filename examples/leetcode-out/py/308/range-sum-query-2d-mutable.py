# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def buildPrefix(matrix: list[list[int]]) -> list[list[int]]:
	rows = len(matrix)
	cols = 0
	if (rows > 0):
		cols = len(matrix[0])
	prefix = []
	i = 0
	while (i <= rows):
		row = []
		j = 0
		while (j <= cols):
			row = (row + [0])
			j = (j + 1)
		prefix = (prefix + [row])
		i = (i + 1)
	i = 1
	while (i <= rows):
		j = 1
		while (j <= cols):
			prefix[i][j] = (((matrix[(i - 1)][(j - 1)] + prefix[(i - 1)][j]) + prefix[i][(j - 1)]) - prefix[(i - 1)][(j - 1)])
			j = (j + 1)
		i = (i + 1)
	return prefix

def NumMatrix(matrix: list[list[int]]) -> dict[str, typing.Any]:
	rows = len(matrix)
	cols = 0
	if (rows > 0):
		cols = len(matrix[0])
	return {"rows": rows, "cols": cols, "data": matrix, "prefix": buildPrefix(matrix)}

def numMatrixUpdate(nm: dict[str, typing.Any], row: int, col: int, val: int) -> None:
	data = nm["data"]
	current = data[row][col]
	diff = (val - current)
	data[row][col] = val
	nm["data"] = data
	prefix = nm["prefix"]
	i = (row + 1)
	while (i <= nm["rows"]):
		j = (col + 1)
		while (j <= nm["cols"]):
			prefix[i][j] = (prefix[i][j] + diff)
			j = (j + 1)
		i = (i + 1)
	nm["prefix"] = prefix

def numMatrixSumRegion(nm: dict[str, typing.Any], row1: int, col1: int, row2: int, col2: int) -> int:
	p = nm["prefix"]
	a = p[(row2 + 1)][(col2 + 1)]
	b = p[row1][(col2 + 1)]
	c = p[(row2 + 1)][col1]
	d = p[row1][col1]
	return (((a - b) - c) + d)

def example():
	nm = NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]])
	assert (numMatrixSumRegion(nm, 2, 1, 4, 3) == 8)
	numMatrixUpdate(nm, 3, 2, 2)
	assert (numMatrixSumRegion(nm, 2, 1, 4, 3) == 10)

def single_element():
	nm = NumMatrix([[1]])
	assert (numMatrixSumRegion(nm, 0, 0, 0, 0) == 1)
	numMatrixUpdate(nm, 0, 0, 5)
	assert (numMatrixSumRegion(nm, 0, 0, 0, 0) == 5)

def main():
	example()
	single_element()

if __name__ == "__main__":
	main()
