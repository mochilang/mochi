# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def newCache(cap: int) -> LRUCache:
	return LRUCache(cap=cap, items=[])

def find(items: list[Entry], k: int) -> int:
	i = 0
	while (i < len(items)):
		e = items[i]
		if (e.key == k):
			return i
		i = (i + 1)
	return (-1)

def get(cache: LRUCache, key: int) -> LookupResult:
	idx = find(cache.items, key)
	if (idx == (0 - 1)):
		return LookupResult(val=(0 - 1), cache=cache)
	entry = cache.items[idx]
	items = (([entry] + cache.items[0:idx]) + cache.items[(idx + 1):len(cache.items)])
	return LookupResult(val=entry.val, cache=LRUCache(cap=cache.cap, items=items))

def put(cache: LRUCache, key: int, value: int) -> LRUCache:
	items = cache.items
	idx = find(items, key)
	if (idx != (0 - 1)):
		items = (items[0:idx] + items[(idx + 1):len(items)])
	items = ([Entry(key=key, val=value)] + items)
	if (len(items) > cache.cap):
		items = items[0:cache.cap]
	return LRUCache(cap=cache.cap, items=items)

@dataclasses.dataclass
class Entry:
	key: int
	val: int

@dataclasses.dataclass
class LRUCache:
	cap: int
	items: list[Entry]

@dataclasses.dataclass
class LookupResult:
	val: int
	cache: LRUCache

def example():
	c = newCache(2)
	r1 = get(c, 1)
	assert (r1.val == (0 - 1))
	c = r1.cache
	c = put(c, 1, 1)
	c = put(c, 2, 2)
	r2 = get(c, 1)
	assert (r2.val == 1)
	c = r2.cache
	c = put(c, 3, 3)
	r3 = get(c, 2)
	assert (r3.val == (0 - 1))
	c = r3.cache
	c = put(c, 4, 4)
	r4 = get(c, 1)
	assert (r4.val == (0 - 1))
	c = r4.cache
	r5 = get(c, 3)
	assert (r5.val == 3)
	c = r5.cache
	r6 = get(c, 4)
	assert (r6.val == 4)

def main():
	example()

if __name__ == "__main__":
	main()
