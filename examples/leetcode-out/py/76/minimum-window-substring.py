# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def minWindow(s: str, t: str) -> str:
	if (len(t) == 0):
		return ""
	need = {}
	for ch in t:
		if (ch in need):
			need[ch] = (need[ch] + 1)
		else:
			need[ch] = 1
	required = len(need)
	have = {}
	formed = 0
	left = 0
	bestStart = 0
	bestLen = (len(s) + 1)
	right = 0
	while (right < len(s)):
		ch = s[right]
		if (ch in need):
			if (ch in have):
				have[ch] = (have[ch] + 1)
			else:
				have[ch] = 1
			if (have[ch] == need[ch]):
				formed = (formed + 1)
		while ((formed == required) and (left <= right)):
			if (((right - left) + 1) < bestLen):
				bestLen = ((right - left) + 1)
				bestStart = left
			leftCh = s[left]
			if (leftCh in need):
				have[leftCh] = (have[leftCh] - 1)
				if (have[leftCh] < need[leftCh]):
					formed = (formed - 1)
			left = (left + 1)
		right = (right + 1)
	if (bestLen == (len(s) + 1)):
		return ""
	return s[bestStart:(bestStart + bestLen)]

def example_1():
	assert (minWindow("ADOBECODEBANC", "ABC") == "BANC")

def example_2():
	assert (minWindow("a", "a") == "a")

def example_3():
	assert (minWindow("a", "aa") == "")

def main():
	example_1()
	example_2()
	example_3()

if __name__ == "__main__":
	main()
