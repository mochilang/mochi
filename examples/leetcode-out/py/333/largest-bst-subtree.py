# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def Leaf() -> dict[str, typing.Any]:
	return {"__name": "Leaf"}

def Node(left: dict[str, typing.Any], value: int, right: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return {"__name": "Node", "left": left, "value": value, "right": right}

def isLeaf(t: dict[str, typing.Any]) -> bool:
	return (t["__name"] == "Leaf")

def left(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["left"]

def right(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["right"]

def value(t: dict[str, typing.Any]) -> int:
	return t["value"]

def minInt(a: int, b: int) -> int:
	if (a < b):
		return a
	return b

def maxInt(a: int, b: int) -> int:
	if (a > b):
		return a
	return b

def helper(node: dict[str, typing.Any]) -> dict[str, typing.Any]:
	if isLeaf(node):
		return {"min": 2147483647, "max": (-2147483648), "size": 0, "largest": 0, "bst": True}
	l = helper(left(node))
	r = helper(right(node))
	minVal = value(node)
	maxVal = value(node)
	if (not isLeaf(left(node))):
		minVal = minInt(minVal, l["min"])
		maxVal = maxInt(maxVal, l["max"])
	if (not isLeaf(right(node))):
		minVal = minInt(minVal, r["min"])
		maxVal = maxInt(maxVal, r["max"])
	size = (((l["size"]) + (r["size"])) + 1)
	bst = False
	if ((((l["bst"]) and (r["bst"])) and (value(node) > (l["max"]))) and (value(node) < (r["min"]))):
		bst = True
	largest = size
	if (not bst):
		ll = l["largest"]
		rl = r["largest"]
		largest = maxInt(ll, rl)
	return {"min": minVal, "max": maxVal, "size": size, "largest": largest, "bst": bst}

def largestBSTSubtree(root: dict[str, typing.Any]) -> int:
	info = helper(root)
	return info["largest"]

example1 = Node(Node(Node(Leaf(), 1, Leaf()), 5, Node(Leaf(), 8, Leaf())), 10, Node(Leaf(), 15, Node(Leaf(), 7, Leaf())))

def example_1():
	assert (largestBSTSubtree(example1) == 3)

def single_node():
	assert (largestBSTSubtree(Node(Leaf(), 1, Leaf())) == 1)

def already_bst():
	tree = Node(Node(Leaf(), 2, Leaf()), 3, Node(Leaf(), 4, Node(Leaf(), 5, Leaf())))
	assert (largestBSTSubtree(tree) == 4)

def empty():
	assert (largestBSTSubtree(Leaf()) == 0)

def main():
	example1 = Node(Node(Node(Leaf(), 1, Leaf()), 5, Node(Leaf(), 8, Leaf())), 10, Node(Leaf(), 15, Node(Leaf(), 7, Leaf())))
	example_1()
	single_node()
	already_bst()
	empty()

if __name__ == "__main__":
	main()
