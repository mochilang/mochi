# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def newCounter() -> HitCounter:
	return HitCounter(data=[])

def clean(c: HitCounter, timestamp: int) -> HitCounter:
	d = c.data
	i = 0
	while (i < len(d)):
		ent = d[i]
		if ((timestamp - ent.ts) >= 300):
			i = (i + 1)
		else:
			break
	d = d[i:len(d)]
	return HitCounter(data=d)

def hit(c: HitCounter, timestamp: int) -> HitCounter:
	counter = clean(c, timestamp)
	d = counter.data
	if (len(d) > 0):
		last = d[(len(d) - 1)]
		if (last.ts == timestamp):
			d = (d[0:(len(d) - 1)] + [Entry(ts=last.ts, cnt=(last.cnt + 1))])
		else:
			d = (d + [Entry(ts=timestamp, cnt=1)])
	else:
		d = (d + [Entry(ts=timestamp, cnt=1)])
	return HitCounter(data=d)

def getHits(c: HitCounter, timestamp: int) -> int:
	counter = clean(c, timestamp)
	sum = 0
	for e in counter.data:
		sum = (sum + e.cnt)
	return sum

@dataclasses.dataclass
class Entry:
	ts: int
	cnt: int

@dataclasses.dataclass
class HitCounter:
	data: list[Entry]

def example():
	c = newCounter()
	c = hit(c, 1)
	c = hit(c, 2)
	c = hit(c, 3)
	assert (getHits(c, 4) == 3)
	c = hit(c, 300)
	assert (getHits(c, 300) == 4)
	assert (getHits(c, 301) == 3)

def expire():
	c = newCounter()
	c = hit(c, 1)
	c = hit(c, 10)
	c = hit(c, 300)
	assert (getHits(c, 300) == 3)
	c = hit(c, 601)
	assert (getHits(c, 601) == 1)

def main():
	example()
	expire()

if __name__ == "__main__":
	main()
