# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def Leaf() -> dict[str, typing.Any]:
	return {"__name": "Leaf"}

def Node(left: dict[str, typing.Any], value: int, right: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return {"__name": "Node", "left": left, "value": value, "right": right}

def isLeaf(t: dict[str, typing.Any]) -> bool:
	return (t["__name"] == "Leaf")

def left(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["left"]

def right(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["right"]

def value(t: dict[str, typing.Any]) -> int:
	return t["value"]

def rightSideView(root: dict[str, typing.Any]) -> list[int]:
	result = []
	queue = []
	if (not isLeaf(root)):
		queue = [root]
	while (len(queue) > 0):
		_next = []
		last = 0
		for node in queue:
			last = value(node)
			l = left(node)
			r = right(node)
			if (not isLeaf(l)):
				_next = (_next + [l])
			if (not isLeaf(r)):
				_next = (_next + [r])
		result = (result + [last])
		queue = _next
	return result

example1 = Node(Node(Leaf(), 2, Node(Leaf(), 5, Leaf())), 1, Node(Leaf(), 3, Node(Leaf(), 4, Leaf())))

def example_1():
	assert (rightSideView(example1) == [1, 3, 4])

def example_2():
	assert (rightSideView(Node(Leaf(), 1, Node(Leaf(), 3, Leaf()))) == [1, 3])

def empty():
	assert (rightSideView(Leaf()) == [])

def main():
	example1 = Node(Node(Leaf(), 2, Node(Leaf(), 5, Leaf())), 1, Node(Leaf(), 3, Node(Leaf(), 4, Leaf())))
	example_1()
	example_2()
	empty()

if __name__ == "__main__":
	main()
