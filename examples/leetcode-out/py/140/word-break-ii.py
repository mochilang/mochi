# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def wordBreak(s: str, wordDict: list[str]) -> list[str]:
	_dict = {}
	for w in wordDict:
		_dict[w] = True
	n = len(s)
	memo = {}
	def dfs(start: int) -> list[str]:
		nonlocal memo
		if (start in memo):
			return memo[start]
		if (start == n):
			return [""]
		res = []
		end = (start + 1)
		while (end <= n):
			word = s[start:end]
			exists = False
			if (word in _dict):
				exists = _dict[word]
			if exists:
				subs = dfs(end)
				for sub in subs:
					if (len(sub) == 0):
						res = (res + [word])
					else:
						res = (res + [((word + " ") + sub)])
			end = (end + 1)
		memo[start] = res
		return res
	ans = dfs(0)
	_sorted = [ x for x in sorted([ x for x in ans ], key=lambda x: x) ]
	return _sorted

dict1 = ["cat", "cats", "and", "sand", "dog"]

def example_1():
	assert (wordBreak("catsanddog", dict1) == ["cat sand dog", "cats and dog"])

def example_2():
	assert (wordBreak("pineapplepenapple", dict2) == ["pine apple pen apple", "pine applepen apple", "pineapple pen apple"])

def example_3():
	assert (wordBreak("catsandog", dict1) == [])

def main():
	dict1 = ["cat", "cats", "and", "sand", "dog"]
	dict2 = ["apple", "pen", "applepen", "pine", "pineapple"]
	example_1()
	example_2()
	example_3()

if __name__ == "__main__":
	main()
