# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def findItinerary(tickets: list[list[str]]) -> list[str]:
	graph = {}
	for t in tickets:
		_from = t[0]
		to = t[1]
		_list = []
		if (_from in graph):
			_list = graph[_from]
		_list = (_list + [to])
		graph[_from] = _list
	for k in graph:
		graph[k] = [ x for x in sorted([ x for x in graph[k] ], key=lambda x: x) ]
	route = []
	def visit(airport: str) -> None:
		nonlocal graph
		nonlocal route
		if (airport in graph):
			while (len(graph[airport]) > 0):
				_next = graph[airport][0]
				graph[airport] = _slice(graph[airport], 1, len(graph[airport]))
				visit(_next)
		route = ([airport] + route)
	visit("JFK")
	return route

def example_1():
	tickets = [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]
	assert (findItinerary(tickets) == ["JFK", "MUC", "LHR", "SFO", "SJC"])

def example_2():
	tickets = [["JFK", "SFO"], ["JFK", "ATL"], ["SFO", "ATL"], ["ATL", "JFK"], ["ATL", "SFO"]]
	assert (findItinerary(tickets) == ["JFK", "ATL", "JFK", "SFO", "ATL", "SFO"])

def main():
	example_1()
	example_2()

if __name__ == "__main__":
	main()
