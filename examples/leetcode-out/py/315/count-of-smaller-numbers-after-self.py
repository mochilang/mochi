# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def countSmaller(nums: list[int]) -> list[int]:
	n = len(nums)
	result = []
	fill = 0
	while (fill < n):
		result = (result + [0])
		fill = (fill + 1)
	if (n == 0):
		return result
	i = (n - 1)
	while (i >= 0):
		count = 0
		j = (i + 1)
		while (j < n):
			if (nums[j] < nums[i]):
				count = (count + 1)
			j = (j + 1)
		result[i] = count
		i = (i - 1)
	return result

def example_1():
	assert (countSmaller([5, 2, 6, 1]) == [2, 1, 1, 0])

def example_2():
	assert (countSmaller([(-1)]) == [0])

def example_3():
	assert (countSmaller([(-1), (-1)]) == [0, 0])

def empty():
	assert (countSmaller([]) == [])

def single_value():
	assert (countSmaller([7]) == [0])

def main():
	example_1()
	example_2()
	example_3()
	empty()
	single_value()

if __name__ == "__main__":
	main()
