# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def generateAbbreviations(word: str) -> list[str]:
	result = []
	def backtrack(pos: int, cur: str, count: int) -> None:
		nonlocal result
		if (pos == len(word)):
			tmp = cur
			if (count > 0):
				tmp = (tmp + str(count))
			result = (result + [tmp])
		else:
			backtrack((pos + 1), cur, (count + 1))
			_next = cur
			if (count > 0):
				_next = (_next + str(count))
			_next = (_next + word[pos])
			backtrack((pos + 1), _next, 0)
	backtrack(0, "", 0)
	return result

def example_1():
	assert (generateAbbreviations("word") == ["4", "3d", "2r1", "2rd", "1o2", "1o1d", "1or1", "1ord", "w3", "w2d", "w1r1", "w1rd", "wo2", "wo1d", "wor1", "word"])

def empty_string():
	assert (generateAbbreviations("") == [""])

def main():
	example_1()
	empty_string()

if __name__ == "__main__":
	main()
