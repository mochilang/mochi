# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def isSameTree(p: Tree, q: Tree) -> bool:
	return (lambda _t0=p: (lambda _t1=q: True if isinstance(_t1, Leaf) else False)() if isinstance(_t0, Leaf) else (lambda pl, pv, pr: (lambda _t2=q: (lambda ql, qv, qr: (((pv == qv) and isSameTree(pl, ql)) and isSameTree(pr, qr)))(_t2.left, _t2.value, _t2.right) if isinstance(_t2, Node) else False)())(_t0.left, _t0.value, _t0.right) if isinstance(_t0, Node) else None)()

class Tree:
	pass
@dataclasses.dataclass
class Leaf(Tree):
	pass
@dataclasses.dataclass
class Node(Tree):
	left: Tree
	value: int
	right: Tree

def example_1():
	p = Node(left=Node(left=Leaf(), value=2, right=Leaf()), value=1, right=Node(left=Leaf(), value=3, right=Leaf()))
	q = Node(left=Node(left=Leaf(), value=2, right=Leaf()), value=1, right=Node(left=Leaf(), value=3, right=Leaf()))
	assert (isSameTree(p, q) == True)

def example_2():
	p = Node(left=Node(left=Leaf(), value=2, right=Leaf()), value=1, right=Leaf())
	q = Node(left=Leaf(), value=1, right=Node(left=Leaf(), value=2, right=Leaf()))
	assert (isSameTree(p, q) == False)

def example_3():
	p = Node(left=Node(left=Leaf(), value=2, right=Leaf()), value=1, right=Node(left=Leaf(), value=1, right=Leaf()))
	q = Node(left=Node(left=Leaf(), value=1, right=Leaf()), value=1, right=Node(left=Leaf(), value=2, right=Leaf()))
	assert (isSameTree(p, q) == False)

def both_empty():
	assert (isSameTree(Leaf(), Leaf()) == True)

def main():
	example_1()
	example_2()
	example_3()
	both_empty()

if __name__ == "__main__":
	main()
