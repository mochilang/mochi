# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def exist(board: list[list[str]], word: str) -> bool:
	m = len(board)
	if (m == 0):
		return False
	n = len(board[0])
	visited = []
	r = 0
	while (r < m):
		row = []
		c = 0
		while (c < n):
			row = (row + [False])
			c = (c + 1)
		visited = (visited + [row])
		r = (r + 1)
	def dfs(r: int, c: int, idx: int) -> bool:
		nonlocal visited
		if (idx == len(word)):
			return True
		if ((((r < 0) or (r >= m)) or (c < 0)) or (c >= n)):
			return False
		if visited[r][c]:
			return False
		if (board[r][c] != word[idx]):
			return False
		visited[r][c] = True
		if (((dfs((r + 1), c, (idx + 1)) or dfs((r - 1), c, (idx + 1))) or dfs(r, (c + 1), (idx + 1))) or dfs(r, (c - 1), (idx + 1))):
			visited[r][c] = False
			return True
		visited[r][c] = False
		return False
	for i in range(0, m):
		for j in range(0, n):
			if dfs(i, j, 0):
				return True
	return False

board = [["A", "B", "C", "E"], ["S", "F", "C", "S"], ["A", "D", "E", "E"]]

def example_1():
	assert (exist(board, "ABCCED") == True)

def example_2():
	assert (exist(board, "SEE") == True)

def example_3():
	assert (exist(board, "ABCB") == False)

def main():
	board = [["A", "B", "C", "E"], ["S", "F", "C", "S"], ["A", "D", "E", "E"]]
	example_1()
	example_2()
	example_3()

if __name__ == "__main__":
	main()
