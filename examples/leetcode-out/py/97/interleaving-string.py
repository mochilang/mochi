# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def isInterleave(s1: str, s2: str, s3: str) -> bool:
	m = len(s1)
	n = len(s2)
	if ((m + n) != len(s3)):
		return False
	dp = []
	i = 0
	while (i <= m):
		row = []
		j = 0
		while (j <= n):
			row = (row + [False])
			j = (j + 1)
		dp = (dp + [row])
		i = (i + 1)
	dp[0][0] = True
	i = 0
	while (i <= m):
		j = 0
		while (j <= n):
			if (i > 0):
				if (dp[(i - 1)][j] and (s1[(i - 1)] == s3[((i + j) - 1)])):
					dp[i][j] = True
			if (j > 0):
				if (dp[i][(j - 1)] and (s2[(j - 1)] == s3[((i + j) - 1)])):
					dp[i][j] = True
			j = (j + 1)
		i = (i + 1)
	return dp[m][n]

def example_1():
	assert (isInterleave("aabcc", "dbbca", "aadbbcbcac") == True)

def example_2():
	assert (isInterleave("aabcc", "dbbca", "aadbbbaccc") == False)

def empty():
	assert (isInterleave("", "", "") == True)

def main():
	example_1()
	example_2()
	empty()

if __name__ == "__main__":
	main()
