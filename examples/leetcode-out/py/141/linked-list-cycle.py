# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def hasCycle(values: list[int], pos: int) -> bool:
	n = len(values)
	def nextIndex(i: int) -> int:
		if (i == (n - 1)):
			if (pos >= 0):
				return pos
			else:
				return n
		else:
			return (i + 1)
	if ((n == 0) or (pos < 0)):
		return False
	slow = 0
	fast = 0
	while True:
		slow = nextIndex(slow)
		fast = nextIndex(fast)
		if (fast >= n):
			return False
		fast = nextIndex(fast)
		if ((slow >= n) or (fast >= n)):
			return False
		if (slow == fast):
			return True
	return False

def example_1():
	assert (hasCycle([3, 2, 0, (-4)], 1) == True)

def example_2():
	assert (hasCycle([1, 2], 0) == True)

def example_3():
	assert (hasCycle([1], (-1)) == False)

def main():
	example_1()
	example_2()
	example_3()

if __name__ == "__main__":
	main()
