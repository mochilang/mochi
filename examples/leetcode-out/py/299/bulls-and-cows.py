# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def getHint(secret: str, guess: str) -> str:
	bulls = 0
	countSecret = {}
	countGuess = {}
	i = 0
	while (i < len(secret)):
		s = secret[i]
		g = guess[i]
		if (s == g):
			bulls = (bulls + 1)
		else:
			if (s in countSecret):
				countSecret[s] = (countSecret[s] + 1)
			else:
				countSecret[s] = 1
			if (g in countGuess):
				countGuess[g] = (countGuess[g] + 1)
			else:
				countGuess[g] = 1
		i = (i + 1)
	cows = 0
	for ch in countSecret:
		if (ch in countGuess):
			a = countSecret[ch]
			b = countGuess[ch]
			if (a < b):
				cows = (cows + a)
			else:
				cows = (cows + b)
	return (((str(bulls) + "A") + str(cows)) + "B")

def example_1():
	assert (getHint("1807", "7810") == "1A3B")

def example_2():
	assert (getHint("1123", "0111") == "1A1B")

def all_bulls():
	assert (getHint("1234", "1234") == "4A0B")

def all_cows():
	assert (getHint("1122", "2211") == "0A4B")

def no_matches():
	assert (getHint("1234", "5678") == "0A0B")

def main():
	example_1()
	example_2()
	all_bulls()
	all_cows()
	no_matches()

if __name__ == "__main__":
	main()
