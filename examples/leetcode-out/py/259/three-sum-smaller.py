# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def threeSumSmaller(nums: list[int], target: int) -> int:
	_sorted = [ x for x in sorted([ x for x in nums ], key=lambda x: x) ]
	n = len(_sorted)
	count = 0
	i = 0
	while (i < (n - 2)):
		left = (i + 1)
		right = (n - 1)
		while (left < right):
			sum = ((_sorted[i] + _sorted[left]) + _sorted[right])
			if (sum < target):
				count = (count + ((right - left)))
				left = (left + 1)
			else:
				right = (right - 1)
		i = (i + 1)
	return count

def example_1():
	assert (threeSumSmaller([(-2), 0, 1, 3], 2) == 2)

def example_2():
	assert (threeSumSmaller([], 0) == 0)

def example_3():
	assert (threeSumSmaller([0], 0) == 0)

def all_negatives():
	assert (threeSumSmaller([(-5), (-4), (-3), (-2)], (-1)) == 4)

def mixed_numbers():
	assert (threeSumSmaller([(-2), 0, 1, 3], 1) == 1)

def main():
	example_1()
	example_2()
	example_3()
	all_negatives()
	mixed_numbers()

if __name__ == "__main__":
	main()
