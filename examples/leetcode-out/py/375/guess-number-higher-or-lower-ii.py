# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def max(a: int, b: int) -> int:
	if (a > b):
		return a
	return b

def getMoneyAmount(n: int) -> int:
	dp = []
	i = 0
	while (i <= n):
		row = []
		j = 0
		while (j <= n):
			row = (row + [0])
			j = (j + 1)
		dp = (dp + [row])
		i = (i + 1)
	_len = 2
	while (_len <= n):
		start = 1
		while (start <= ((n - _len) + 1)):
			end = ((start + _len) - 1)
			best = (n * n)
			guess = start
			while (guess <= end):
				left = 0
				if ((guess - 1) >= start):
					left = dp[start][(guess - 1)]
				right = 0
				if ((guess + 1) <= end):
					right = dp[(guess + 1)][end]
				cost = guess
				if (left > right):
					cost = (cost + left)
				else:
					cost = (cost + right)
				if (cost < best):
					best = cost
				guess = (guess + 1)
			dp[start][end] = best
			start = (start + 1)
		_len = (_len + 1)
	return dp[1][n]

def example_1():
	assert (getMoneyAmount(10) == 16)

def example_2():
	assert (getMoneyAmount(1) == 0)

def example_3():
	assert (getMoneyAmount(2) == 1)

def n_equals_3():
	assert (getMoneyAmount(3) == 2)

def main():
	example_1()
	example_2()
	example_3()
	n_equals_3()

if __name__ == "__main__":
	main()
