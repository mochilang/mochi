# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def IntItem(v: int) -> dict[str, typing.Any]:
	return {"kind": "int", "value": v}

def ListItem(items: list[dict[str, typing.Any]]) -> dict[str, typing.Any]:
	return {"kind": "list", "items": items}

def isInt(item: dict[str, typing.Any]) -> bool:
	return (item["kind"] == "int")

def itemValue(item: dict[str, typing.Any]) -> int:
	return item["value"]

def itemList(item: dict[str, typing.Any]) -> list[dict[str, typing.Any]]:
	return item["items"]

def parseInt(s: str) -> int:
	i = 0
	sign = 1
	if ((len(s) > 0) and (((s[0] == "-") or (s[0] == "+")))):
		if (s[0] == "-"):
			sign = (-1)
		i = 1
	digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	result = 0
	while (i < len(s)):
		result = ((result * 10) + digits[s[i]])
		i = (i + 1)
	return (result * sign)

def parseFrom(s: str, i: int) -> ParseRes:
	if (s[i] == "["):
		items = []
		j = (i + 1)
		while ((j < len(s)) and (s[j] != "]")):
			res = parseFrom(s, j)
			items = (items + [res.val])
			j = res.idx
			if ((j < len(s)) and (s[j] == ",")):
				j = (j + 1)
		return ParseRes(val=ListItem(items), idx=(j + 1))
	else:
		j = i
		numStr = ""
		if (s[j] == "-"):
			numStr = (numStr + "-")
			j = (j + 1)
		while (j < len(s)):
			ch = s[j]
			if ((ch >= "0") and (ch <= "9")):
				numStr = (numStr + ch)
				j = (j + 1)
			else:
				break
		return ParseRes(val=IntItem(parseInt(numStr)), idx=j)

def deserialize(s: str) -> dict[str, typing.Any]:
	if (len(s) == 0):
		return ListItem([])
	res = parseFrom(s, 0)
	return res.val

def serialize(node: dict[str, typing.Any]) -> str:
	if isInt(node):
		return str(itemValue(node))
	else:
		parts = []
		items = itemList(node)
		i = 0
		while (i < len(items)):
			parts = (parts + [serialize(items[i])])
			i = (i + 1)
		body = ""
		j = 0
		while (j < len(parts)):
			if (j > 0):
				body = (body + ",")
			body = (body + parts[j])
			j = (j + 1)
		return (("[" + body) + "]")

@dataclasses.dataclass
class ParseRes:
	val: dict[str, typing.Any]
	idx: int

def single_integer():
	parsed = deserialize("324")
	assert (serialize(parsed) == "324")

def nested_list():
	parsed = deserialize("[123,[456,[789]]]")
	assert (serialize(parsed) == "[123,[456,[789]]]")

def negative():
	parsed = deserialize("[-1]")
	assert (serialize(parsed) == "[-1]")

def main():
	single_integer()
	nested_list()
	negative()

if __name__ == "__main__":
	main()
