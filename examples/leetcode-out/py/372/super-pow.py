# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def powMod(x: int, k: int) -> int:
	base = (x % MOD)
	exp = k
	result = 1
	while (exp > 0):
		if ((exp % 2) == 1):
			result = (((result * base)) % MOD)
		base = (((base * base)) % MOD)
		exp = (exp // 2)
	return result

def superPow(a: int, b: list[int]) -> int:
	result = 1
	for digit in b:
		result = powMod(result, 10)
		part = powMod(a, digit)
		result = (((result * part)) % MOD)
	return result

MOD = 1337

def example_1():
	assert (superPow(2, [3]) == 8)

def example_2():
	assert (superPow(2, [1, 0]) == 1024)

def example_3():
	assert (superPow(1, [4, 3, 3, 8, 5, 2]) == 1)

def large_numbers():
	assert (superPow(2147483647, [2, 0, 0]) == 1198)

def zero_exponent():
	assert (superPow(5, []) == 1)

def main():
	MOD = 1337
	example_1()
	example_2()
	example_3()
	large_numbers()
	zero_exponent()

if __name__ == "__main__":
	main()
