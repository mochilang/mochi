# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def multiply(num1: str, num2: str) -> str:
	if ((num1 == "0") or (num2 == "0")):
		return "0"
	digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	m = len(num1)
	n = len(num2)
	result = {}
	i = m
	while (i > 0):
		i = (i - 1)
		d1 = digits[num1[i]]
		j = n
		while (j > 0):
			j = (j - 1)
			d2 = digits[num2[j]]
			idx1 = ((i + j) + 1)
			existing = 0
			if (idx1 in result):
				existing = result[idx1]
			sum = ((d1 * d2) + existing)
			result[idx1] = (sum % 10)
			carry = (sum // 10)
			idx0 = (i + j)
			prev = 0
			if (idx0 in result):
				prev = result[idx0]
			result[idx0] = (prev + carry)
	out = ""
	k = 0
	while (k < (m + n)):
		digit = 0
		if (k in result):
			digit = result[k]
		if ((out == "") and (digit == 0)):
			pass
		else:
			out = (out + str(digit))
		k = (k + 1)
	if (out == ""):
		return "0"
	return out

def example_1():
	assert (multiply("2", "3") == "6")

def example_2():
	assert (multiply("123", "456") == "56088")

def leading_zeros():
	assert (multiply("0002", "03") == "6")

def large_numbers():
	assert (multiply("999", "999") == "998001")

def main():
	ok = 0
	ok = (ok + 1)
	y = 1
	y = 2
	example_1()
	example_2()
	leading_zeros()
	large_numbers()

if __name__ == "__main__":
	main()
