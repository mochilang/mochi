# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def longestIncreasingPath(matrix: list[list[int]]) -> int:
	m = len(matrix)
	if (m == 0):
		return 0
	n = len(matrix[0])
	memo = []
	i = 0
	while (i < m):
		row = []
		j = 0
		while (j < n):
			row = (row + [0])
			j = (j + 1)
		memo = (memo + [row])
		i = (i + 1)
	def dfs(x: int, y: int) -> int:
		nonlocal memo
		cached = memo[x][y]
		if (cached != 0):
			return cached
		val = matrix[x][y]
		best = 1
		if (x > 0):
			if (matrix[(x - 1)][y] > val):
				candidate = (1 + dfs((x - 1), y))
				if (candidate > best):
					best = candidate
		if ((x + 1) < m):
			if (matrix[(x + 1)][y] > val):
				candidate = (1 + dfs((x + 1), y))
				if (candidate > best):
					best = candidate
		if (y > 0):
			if (matrix[x][(y - 1)] > val):
				candidate = (1 + dfs(x, (y - 1)))
				if (candidate > best):
					best = candidate
		if ((y + 1) < n):
			if (matrix[x][(y + 1)] > val):
				candidate = (1 + dfs(x, (y + 1)))
				if (candidate > best):
					best = candidate
		memo[x][y] = best
		return best
	result = 0
	i = 0
	while (i < m):
		j = 0
		while (j < n):
			length = dfs(i, j)
			if (length > result):
				result = length
			j = (j + 1)
		i = (i + 1)
	return result

def example_1():
	matrix = [[9, 9, 4], [6, 6, 8], [2, 1, 1]]
	assert (longestIncreasingPath(matrix) == 4)

def example_2():
	matrix = [[3, 4, 5], [3, 2, 6], [2, 2, 1]]
	assert (longestIncreasingPath(matrix) == 4)

def single_cell():
	assert (longestIncreasingPath([[1]]) == 1)

def empty():
	assert (longestIncreasingPath([]) == 0)

def main():
	example_1()
	example_2()
	single_cell()
	empty()

if __name__ == "__main__":
	main()
