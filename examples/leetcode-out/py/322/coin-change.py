# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def coinChange(coins: list[int], amount: int) -> int:
	dp = []
	i = 0
	while (i <= amount):
		dp = (dp + [(amount + 1)])
		i = (i + 1)
	dp[0] = 0
	i = 1
	while (i <= amount):
		j = 0
		while (j < len(coins)):
			c = coins[j]
			if ((i - c) >= 0):
				candidate = (dp[(i - c)] + 1)
				if (candidate < dp[i]):
					dp[i] = candidate
			j = (j + 1)
		i = (i + 1)
	if (dp[amount] > amount):
		return (-1)
	return dp[amount]

def example_1():
	assert (coinChange([1, 2, 5], 11) == 3)

def example_2():
	assert (coinChange([2], 3) == ((-1)))

def example_3():
	assert (coinChange([1], 0) == 0)

def single_coin():
	assert (coinChange([2], 4) == 2)

def mixed_coins():
	assert (coinChange([1, 2, 5], 7) == 2)

def main():
	example_1()
	example_2()
	example_3()
	single_coin()
	mixed_coins()

if __name__ == "__main__":
	main()
