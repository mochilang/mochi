# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def inorderSuccessor(tree: list[Node], root: int, p: int) -> int:
	pNode = tree[p]
	targetVal = pNode.val
	current = root
	successor = (-1)
	while (current != ((-1))):
		node = tree[current]
		if (targetVal < node.val):
			successor = current
			current = node.left
		else:
			current = node.right
	return successor

@dataclasses.dataclass
class Node:
	val: int
	left: int
	right: int

example = [Node(val=5, left=1, right=2), Node(val=3, left=3, right=4), Node(val=6, left=(-1), right=(-1)), Node(val=2, left=5, right=(-1)), Node(val=4, left=(-1), right=(-1)), Node(val=1, left=(-1), right=(-1))]

def successor_in_middle():
	assert (inorderSuccessor(example, 0, 1) == 4)

def no_successor():
	assert (inorderSuccessor(example, 0, 2) == ((-1)))

def left_subtree():
	assert (inorderSuccessor(example, 0, 3) == 1)

def single_node():
	tree = [Node(val=1, left=(-1), right=(-1))]
	assert (inorderSuccessor(tree, 0, 0) == ((-1)))

def main():
	example = [Node(val=5, left=1, right=2), Node(val=3, left=3, right=4), Node(val=6, left=(-1), right=(-1)), Node(val=2, left=5, right=(-1)), Node(val=4, left=(-1), right=(-1)), Node(val=1, left=(-1), right=(-1))]
	successor_in_middle()
	no_successor()
	left_subtree()
	single_node()

if __name__ == "__main__":
	main()
