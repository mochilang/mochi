# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def minCostII(costs: list[list[int]]) -> int:
	n = len(costs)
	if (n == 0):
		return 0
	k = len(costs[0])
	prevMin = 0
	prevSecond = 0
	prevColor = (-1)
	i = 0
	while (i < n):
		currMin = 2147483647
		currSecond = 2147483647
		currColor = (-1)
		j = 0
		while (j < k):
			cost = costs[i][j]
			if (j == prevColor):
				cost = (cost + prevSecond)
			else:
				cost = (cost + prevMin)
			if (cost < currMin):
				currSecond = currMin
				currMin = cost
				currColor = j
			elif (cost < currSecond):
				currSecond = cost
			j = (j + 1)
		prevMin = currMin
		prevSecond = currSecond
		prevColor = currColor
		i = (i + 1)
	return prevMin

def example_1():
	assert (minCostII([[1, 5, 3], [2, 9, 4]]) == 5)

def example_2():
	assert (minCostII([[1, 3], [2, 4]]) == 5)

def single_house():
	assert (minCostII([[8, 6, 5]]) == 5)

def main():
	example_1()
	example_2()
	single_house()

if __name__ == "__main__":
	main()
