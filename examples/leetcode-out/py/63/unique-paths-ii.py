# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def uniquePathsWithObstacles(grid: list[list[int]]) -> int:
	m = len(grid)
	if (m == 0):
		return 0
	n = len(grid[0])
	dp = []
	i = 0
	while (i < m):
		row = []
		j = 0
		while (j < n):
			row = (row + [0])
			j = (j + 1)
		dp = (dp + [row])
		i = (i + 1)
	if (grid[0][0] == 1):
		return 0
	dp[0][0] = 1
	i = 0
	while (i < m):
		j = 0
		while (j < n):
			if (grid[i][j] == 1):
				dp[i][j] = 0
			else:
				if (i > 0):
					dp[i][j] = (dp[i][j] + dp[(i - 1)][j])
				if (j > 0):
					dp[i][j] = (dp[i][j] + dp[i][(j - 1)])
			j = (j + 1)
		i = (i + 1)
	return dp[(m - 1)][(n - 1)]

def example_1():
	assert (uniquePathsWithObstacles([[0, 0, 0], [0, 1, 0], [0, 0, 0]]) == 2)

def example_2():
	assert (uniquePathsWithObstacles([[0, 1], [0, 0]]) == 1)

def obstacle_at_start():
	assert (uniquePathsWithObstacles([[1]]) == 0)

def single_open_cell():
	assert (uniquePathsWithObstacles([[0]]) == 1)

def main():
	example_1()
	example_2()
	obstacle_at_start()
	single_open_cell()

if __name__ == "__main__":
	main()
