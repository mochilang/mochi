# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def newPhoneDirectory(maxNumbers: int) -> PhoneDirectory:
	nums = []
	i = 0
	while (i < maxNumbers):
		nums = (nums + [i])
		i = (i + 1)
	return PhoneDirectory(available=nums, used={})

def get(dir: PhoneDirectory) -> GetResult:
	avail = dir.available
	if (len(avail) == 0):
		return GetResult(directory=dir, number=((-1)))
	n = avail[0]
	avail = avail[1:len(avail)]
	used = dir.used
	used[n] = True
	newDir = PhoneDirectory(available=avail, used=used)
	return GetResult(directory=newDir, number=n)

def check(dir: PhoneDirectory, number: int) -> bool:
	if (number in dir.used):
		return (not dir.used[number])
	return True

def release(dir: PhoneDirectory, number: int) -> PhoneDirectory:
	used = dir.used
	if (number in used):
		if used[number]:
			used[number] = False
			avail = dir.available
			avail = (avail + [number])
			return PhoneDirectory(available=avail, used=used)
	return dir

@dataclasses.dataclass
class PhoneDirectory:
	available: list[int]
	used: dict[int, bool]

@dataclasses.dataclass
class GetResult:
	directory: PhoneDirectory
	number: int

def example():
	dir = newPhoneDirectory(3)
	r1 = get(dir)
	dir = r1.directory
	assert (r1.number == 0)
	r2 = get(dir)
	dir = r2.directory
	assert (r2.number == 1)
	assert (check(dir, 2) == True)
	r3 = get(dir)
	dir = r3.directory
	assert (r3.number == 2)
	assert (check(dir, 2) == False)
	dir = release(dir, 2)
	assert (check(dir, 2) == True)

def release_twice():
	dir = newPhoneDirectory(1)
	r1 = get(dir)
	dir = r1.directory
	assert (r1.number == 0)
	dir = release(dir, 0)
	dir = release(dir, 0)
	r2 = get(dir)
	dir = r2.directory
	assert (r2.number == 0)

def get_empty():
	dir = newPhoneDirectory(0)
	r = get(dir)
	assert (r.number == ((-1)))

def main():
	example()
	release_twice()
	get_empty()

if __name__ == "__main__":
	main()
