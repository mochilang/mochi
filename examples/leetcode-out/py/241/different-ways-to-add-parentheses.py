# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def parseInt(s: str) -> int:
	result = 0
	i = 0
	digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	while (i < len(s)):
		result = ((result * 10) + digits[s[i]])
		i = (i + 1)
	return result

def diffWaysToCompute(expr: str) -> list[int]:
	results = []
	i = 0
	while (i < len(expr)):
		ch = expr[i]
		if (((ch == "+") or (ch == "-")) or (ch == "*")):
			leftPart = expr[0:i]
			rightPart = expr[(i + 1):len(expr)]
			leftVals = diffWaysToCompute(leftPart)
			rightVals = diffWaysToCompute(rightPart)
			for a in leftVals:
				for b in rightVals:
					val = 0
					if (ch == "+"):
						val = (a + b)
					elif (ch == "-"):
						val = (a - b)
					else:
						val = (a * b)
					results = (results + [val])
		i = (i + 1)
	if (len(results) == 0):
		results = [parseInt(expr)]
	return results

def example_1():
	res = diffWaysToCompute("2-1-1")
	_sorted = [ x for x in sorted([ x for x in res ], key=lambda x: x) ]
	expected = [0, 2]
	assert (_sorted == expected)

def example_2():
	res = diffWaysToCompute("2*3-4*5")
	_sorted = [ x for x in sorted([ x for x in res ], key=lambda x: x) ]
	expected = [(-34), (-14), (-10), (-10), 10]
	expSorted = [ x for x in sorted([ x for x in expected ], key=lambda x: x) ]
	assert (_sorted == expSorted)

def single_number():
	assert (diffWaysToCompute("3") == [3])

def main():
	example_1()
	example_2()
	single_number()

if __name__ == "__main__":
	main()
