# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def sortedArrayToBST(nums: list[int]) -> Tree:
	def helper(lo: int, hi: int) -> Tree:
		if (lo > hi):
			return Leaf()
		mid = (((lo + hi)) // 2)
		return Node(left=helper(lo, (mid - 1)), value=nums[mid], right=helper((mid + 1), hi))
	return helper(0, (len(nums) - 1))

class Tree:
	pass
@dataclasses.dataclass
class Leaf(Tree):
	pass
@dataclasses.dataclass
class Node(Tree):
	left: Tree
	value: int
	right: Tree

def example_1():
	tree = sortedArrayToBST([(-10), (-3), 0, 5, 9])
	assert (lambda _t0=tree: (lambda v: (v == 0))(_t0.value) if isinstance(_t0, Node) else False)()

def example_2():
	tree = sortedArrayToBST([1, 3])
	assert (lambda _t1=tree: (lambda v: ((v == 1) or (v == 3)))(_t1.value) if isinstance(_t1, Node) else False)()

def main():
	example_1()
	example_2()

if __name__ == "__main__":
	main()
