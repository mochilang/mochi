# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def solveSudoku(board: list[list[str]]) -> list[list[str]]:
	def isValid(row: int, col: int, ch: str) -> bool:
		for i in range(0, 9):
			if (board[row][i] == ch):
				return False
			if (board[i][col] == ch):
				return False
			r = ((((row // 3)) * 3) + (i // 3))
			c = ((((col // 3)) * 3) + (i % 3))
			if (board[r][c] == ch):
				return False
		return True
	def dfs(r: int, c: int) -> bool:
		nonlocal board
		if (r == 9):
			return True
		if (c == 9):
			return dfs((r + 1), 0)
		if (board[r][c] != "."):
			return dfs(r, (c + 1))
		for d in ["1", "2", "3", "4", "5", "6", "7", "8", "9"]:
			if isValid(r, c, d):
				board[r][c] = d
				if dfs(r, (c + 1)):
					return True
				board[r][c] = "."
		return False
	dfs(0, 0)
	return board

board = [["5", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
solvedBoard = solveSudoku(board)
solved = [["5", "3", "4", "6", "7", "8", "9", "1", "2"], ["6", "7", "2", "1", "9", "5", "3", "4", "8"], ["1", "9", "8", "3", "4", "2", "5", "6", "7"], ["8", "5", "9", "7", "6", "1", "4", "2", "3"], ["4", "2", "6", "8", "5", "3", "7", "9", "1"], ["7", "1", "3", "9", "2", "4", "8", "5", "6"], ["9", "6", "1", "5", "3", "7", "2", "8", "4"], ["2", "8", "7", "4", "1", "9", "6", "3", "5"], ["3", "4", "5", "2", "8", "6", "1", "7", "9"]]

def solve():
	assert (solvedBoard == solved)

def main():
	board = [["5", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
	solvedBoard = solveSudoku(board)
	solved = [["5", "3", "4", "6", "7", "8", "9", "1", "2"], ["6", "7", "2", "1", "9", "5", "3", "4", "8"], ["1", "9", "8", "3", "4", "2", "5", "6", "7"], ["8", "5", "9", "7", "6", "1", "4", "2", "3"], ["4", "2", "6", "8", "5", "3", "7", "9", "1"], ["7", "1", "3", "9", "2", "4", "8", "5", "6"], ["9", "6", "1", "5", "3", "7", "2", "8", "4"], ["2", "8", "7", "4", "1", "9", "6", "3", "5"], ["3", "4", "5", "2", "8", "6", "1", "7", "9"]]
	solve()

if __name__ == "__main__":
	main()
