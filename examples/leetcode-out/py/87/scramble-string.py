# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def isScramble(s1: str, s2: str) -> bool:
	if (len(s1) != len(s2)):
		return False
	def sameLetters(a: str, b: str) -> bool:
		if (len(a) != len(b)):
			return False
		count = {}
		i = 0
		while (i < len(a)):
			ch = a[i]
			if (ch in count):
				count[ch] = (count[ch] + 1)
			else:
				count[ch] = 1
			i = (i + 1)
		i = 0
		while (i < len(b)):
			ch = b[i]
			if (ch in count):
				count[ch] = (count[ch] - 1)
			else:
				return False
			i = (i + 1)
		for key in count:
			if (count[key] != 0):
				return False
		return True
	if (not sameLetters(s1, s2)):
		return False
	memo = {}
	n = len(s1)
	def dfs(i1: int, i2: int, length: int) -> bool:
		nonlocal memo
		key = ((((i1 * n) * 31) + (i2 * 31)) + length)
		if (key in memo):
			return memo[key]
		a = s1[i1:(i1 + length)]
		b = s2[i2:(i2 + length)]
		if (a == b):
			memo[key] = True
			return True
		if (not sameLetters(a, b)):
			memo[key] = False
			return False
		k = 1
		while (k < length):
			if (dfs(i1, i2, k) and dfs((i1 + k), (i2 + k), (length - k))):
				memo[key] = True
				return True
			if (dfs(i1, ((i2 + length) - k), k) and dfs((i1 + k), i2, (length - k))):
				memo[key] = True
				return True
			k = (k + 1)
		memo[key] = False
		return False
	return dfs(0, 0, n)

def example_1():
	assert (isScramble("great", "rgeat") == True)

def example_2():
	assert (isScramble("abcde", "caebd") == False)

def example_3():
	assert (isScramble("a", "a") == True)

def main():
	example_1()
	example_2()
	example_3()

if __name__ == "__main__":
	main()
