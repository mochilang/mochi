# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def parseInt(s: str) -> int:
	i = 0
	sign = 1
	if ((len(s) > 0) and (((s[0] == "-") or (s[0] == "+")))):
		if (s[0] == "-"):
			sign = (-1)
		i = 1
	digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	result = 0
	while (i < len(s)):
		ch = s[i]
		result = ((result * 10) + digits[ch])
		i = (i + 1)
	return (result * sign)

def evalRPN(tokens: list[str]) -> int:
	stack = []
	for tok in tokens:
		if ((((tok == "+") or (tok == "-")) or (tok == "*")) or (tok == "/")):
			b = stack[(len(stack) - 1)]
			stack = stack[0:(len(stack) - 1)]
			a = stack[(len(stack) - 1)]
			stack = stack[0:(len(stack) - 1)]
			if (tok == "+"):
				stack = (stack + [(a + b)])
			elif (tok == "-"):
				stack = (stack + [(a - b)])
			elif (tok == "*"):
				stack = (stack + [(a * b)])
			else:
				stack = (stack + [(a / b)])
		else:
			val = parseInt(tok)
			stack = (stack + [val])
	return stack[(len(stack) - 1)]

def example_1():
	assert (evalRPN(["2", "1", "+", "3", "*"]) == 9)

def example_2():
	assert (evalRPN(["4", "13", "5", "/", "+"]) == 6)

def example_3():
	assert (evalRPN(["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]) == 22)

def single_number():
	assert (evalRPN(["42"]) == 42)

def main():
	example_1()
	example_2()
	example_3()
	single_number()

if __name__ == "__main__":
	main()
