# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def newMovingAverage(size: int) -> MovingAverage:
	return MovingAverage(size=size, nums=[], total=0)

def _next(ma: MovingAverage, val: int) -> NextResult:
	nums = ma.nums
	total = ma.total
	if (len(nums) == ma.size):
		total = (total - nums[0])
		nums = nums[1:len(nums)]
	nums = (nums + [val])
	total = (total + val)
	updated = MovingAverage(size=ma.size, nums=nums, total=total)
	avg = ((total) / (len(nums)))
	return NextResult(ma=updated, average=avg)

@dataclasses.dataclass
class MovingAverage:
	size: int
	nums: list[int]
	total: int

@dataclasses.dataclass
class NextResult:
	ma: MovingAverage
	average: float

def example():
	ma = newMovingAverage(3)
	r1 = _next(ma, 1)
	ma = r1.ma
	assert (r1.average == 1)
	r2 = _next(ma, 10)
	ma = r2.ma
	assert (r2.average == 5.5)
	r3 = _next(ma, 3)
	ma = r3.ma
	assert (r3.average == (14 / 3))
	r4 = _next(ma, 5)
	ma = r4.ma
	assert (r4.average == 6)

def single_element_window():
	ma = newMovingAverage(1)
	r = _next(ma, 4)
	ma = r.ma
	assert (r.average == 4)
	r2 = _next(ma, 7)
	ma = r2.ma
	assert (r2.average == 7)

def window_smaller_than_inputs():
	ma = newMovingAverage(2)
	a = _next(ma, 3)
	ma = a.ma
	assert (a.average == 3)
	b = _next(ma, 5)
	ma = b.ma
	assert (b.average == 4)
	c = _next(ma, 7)
	ma = c.ma
	assert (c.average == 6)

def main():
	example()
	single_element_window()
	window_smaller_than_inputs()

if __name__ == "__main__":
	main()
