# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def isLeaf(t: Tree) -> bool:
	return (lambda _t0=t: True if isinstance(_t0, Leaf) else False)()

def hasPathSum(root: Tree, target: int) -> bool:
	def nodeSum(l: Tree, v: int, r: Tree, remaining: int) -> bool:
		leftLeaf = isLeaf(l)
		rightLeaf = isLeaf(r)
		if (leftLeaf and rightLeaf):
			return (remaining == 0)
		return (hasPathSum(l, remaining) or hasPathSum(r, remaining))
	return (lambda _t1=root: False if isinstance(_t1, Leaf) else (lambda l, v, r: nodeSum(l, v, r, (target - v)))(_t1.left, _t1.value, _t1.right) if isinstance(_t1, Node) else None)()

class Tree:
	pass
@dataclasses.dataclass
class Leaf(Tree):
	pass
@dataclasses.dataclass
class Node(Tree):
	left: Tree
	value: int
	right: Tree

def example_1():
	root = Node(left=Node(left=Node(left=Leaf(), value=7, right=Leaf()), value=11, right=Node(left=Leaf(), value=2, right=Leaf())), value=4, right=Leaf())
	tree = Node(left=root, value=5, right=Node(left=Node(left=Leaf(), value=13, right=Leaf()), value=8, right=Node(left=Leaf(), value=4, right=Node(left=Leaf(), value=1, right=Leaf()))))
	assert (hasPathSum(tree, 22) == True)

def example_2():
	tree = Node(left=Node(left=Leaf(), value=2, right=Leaf()), value=1, right=Node(left=Leaf(), value=3, right=Leaf()))
	assert (hasPathSum(tree, 5) == False)

def example_3():
	tree = Node(left=Node(left=Leaf(), value=2, right=Leaf()), value=1, right=Leaf())
	assert (hasPathSum(tree, 0) == False)

def single_node():
	assert (hasPathSum(Node(left=Leaf(), value=5, right=Leaf()), 5) == True)

def empty():
	assert (hasPathSum(Leaf(), 1) == False)

def main():
	example_1()
	example_2()
	example_3()
	single_node()
	empty()

if __name__ == "__main__":
	main()
