# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def largestNumber(nums: list[int]) -> str:
	strs = []
	i = 0
	while (i < len(nums)):
		strs = (strs + [str(nums[i])])
		i = (i + 1)
	j = 0
	while (j < len(strs)):
		k = (j + 1)
		while (k < len(strs)):
			ab = (strs[j] + strs[k])
			ba = (strs[k] + strs[j])
			if (ab < ba):
				tmp = strs[j]
				strs[j] = strs[k]
				strs[k] = tmp
			k = (k + 1)
		j = (j + 1)
	result = ""
	i = 0
	while (i < len(strs)):
		result = (result + strs[i])
		i = (i + 1)
	pos = 0
	while ((pos < (len(result) - 1)) and (result[pos] == "0")):
		pos = (pos + 1)
	return result[pos:len(result)]

def example_1():
	assert (largestNumber([10, 2]) == "210")

def example_2():
	assert (largestNumber([3, 30, 34, 5, 9]) == "9534330")

def multiple_zeros():
	assert (largestNumber([0, 0]) == "0")

def main():
	example_1()
	example_2()
	multiple_zeros()

if __name__ == "__main__":
	main()
