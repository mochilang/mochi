# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def nextPermutation(nums: list[int]) -> list[int]:
	i = (len(nums) - 2)
	while ((i >= 0) and (nums[i] >= nums[(i + 1)])):
		i = (i - 1)
	if (i >= 0):
		j = (len(nums) - 1)
		while (nums[j] <= nums[i]):
			j = (j - 1)
		temp = nums[i]
		nums[i] = nums[j]
		nums[j] = temp
	start = (i + 1)
	end = (len(nums) - 1)
	while (start < end):
		temp = nums[start]
		nums[start] = nums[end]
		nums[end] = temp
		start = (start + 1)
		end = (end - 1)
	return nums

def example_1():
	assert (nextPermutation([1, 2, 3]) == [1, 3, 2])

def example_2():
	assert (nextPermutation([3, 2, 1]) == [1, 2, 3])

def example_3():
	assert (nextPermutation([1, 1, 5]) == [1, 5, 1])

def single_element():
	assert (nextPermutation([1]) == [1])

def main():
	example_1()
	example_2()
	example_3()
	single_element()

if __name__ == "__main__":
	main()
