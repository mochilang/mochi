# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def longestSubstring(s: str, k: int) -> int:
	if (len(s) == 0):
		return 0
	maxLen = 0
	target = 1
	while (target <= 26):
		counts = {}
		left = 0
		right = 0
		unique = 0
		atLeast = 0
		while (right < len(s)):
			ch = s[right]
			if (ch in counts):
				counts[ch] = (counts[ch] + 1)
			else:
				counts[ch] = 1
				unique = (unique + 1)
			if (counts[ch] == k):
				atLeast = (atLeast + 1)
			while (unique > target):
				leftCh = s[left]
				if (counts[leftCh] == k):
					atLeast = (atLeast - 1)
				counts[leftCh] = (counts[leftCh] - 1)
				if (counts[leftCh] == 0):
					unique = (unique - 1)
				left = (left + 1)
			if ((unique == target) and (atLeast == target)):
				length = ((right - left) + 1)
				if (length > maxLen):
					maxLen = length
			right = (right + 1)
		target = (target + 1)
	return maxLen

def example_1():
	assert (longestSubstring("aaabb", 3) == 3)

def example_2():
	assert (longestSubstring("ababbc", 2) == 5)

def all_same():
	assert (longestSubstring("aaaaa", 1) == 5)

def no_valid_substring():
	assert (longestSubstring("abcde", 2) == 0)

def empty_string():
	assert (longestSubstring("", 3) == 0)

def main():
	example_1()
	example_2()
	all_same()
	no_valid_substring()
	empty_string()

if __name__ == "__main__":
	main()
