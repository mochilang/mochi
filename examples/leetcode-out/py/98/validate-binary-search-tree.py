# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def helper(node: Tree, low: MaybeInt, high: MaybeInt) -> bool:
	return (lambda _t0=node: True if isinstance(_t0, Leaf) else (lambda l, v, r: (((((lambda _t1=low: (lambda x: (v > x))(_t1.value) if isinstance(_t1, Some) else True if isinstance(_t1, _None) else None)()) and ((lambda _t2=high: (lambda y: (v < y))(_t2.value) if isinstance(_t2, Some) else True if isinstance(_t2, _None) else None)())) and helper(l, low, Some(value=v))) and helper(r, Some(value=v), high)))(_t0.left, _t0.value, _t0.right) if isinstance(_t0, Node) else None)()

def isValidBST(root: Tree) -> bool:
	return helper(root, _None(), _None())

class Tree:
	pass
@dataclasses.dataclass
class Leaf(Tree):
	pass
@dataclasses.dataclass
class Node(Tree):
	left: Tree
	value: int
	right: Tree

class MaybeInt:
	pass
@dataclasses.dataclass
class _None(MaybeInt):
	pass
@dataclasses.dataclass
class Some(MaybeInt):
	value: int

def example_1():
	tree = Node(left=Node(left=Leaf(), value=1, right=Leaf()), value=2, right=Node(left=Leaf(), value=3, right=Leaf()))
	assert (isValidBST(tree) == True)

def example_2():
	tree = Node(left=Node(left=Leaf(), value=1, right=Leaf()), value=5, right=Node(left=Node(left=Leaf(), value=3, right=Leaf()), value=4, right=Node(left=Leaf(), value=6, right=Leaf())))
	assert (isValidBST(tree) == False)

def main():
	example_1()
	example_2()

if __name__ == "__main__":
	main()
