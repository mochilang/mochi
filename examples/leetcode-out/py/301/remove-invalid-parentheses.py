# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def isValid(s: str) -> bool:
	count = 0
	i = 0
	while (i < len(s)):
		c = s[i]
		if (c == "("):
			count = (count + 1)
		elif (c == ")"):
			if (count == 0):
				return False
			count = (count - 1)
		i = (i + 1)
	return (count == 0)

def removeInvalidParentheses(s: str) -> list[str]:
	result = []
	visited = {}
	queue = [s]
	visited[s] = True
	found = False
	while (len(queue) > 0):
		cur = queue[0]
		queue = queue[1:len(queue)]
		if isValid(cur):
			result = (result + [cur])
			found = True
		if found:
			continue
		i = 0
		while (i < len(cur)):
			ch = cur[i]
			if ((ch != "(") and (ch != ")")):
				i = (i + 1)
				continue
			_next = (cur[0:i] + cur[(i + 1):len(cur)])
			if (not ((_next in visited))):
				queue = (queue + [_next])
				visited[_next] = True
			i = (i + 1)
	if (len(result) == 0):
		return [""]
	return result

def example_1():
	assert (removeInvalidParentheses("()())()") == ["(())()", "()()()"])

def example_2():
	assert (removeInvalidParentheses("(a)())()") == ["(a())()", "(a)()()"])

def example_3():
	assert (removeInvalidParentheses(")(") == [""])

def already_valid():
	assert (removeInvalidParentheses("(a)(b)") == ["(a)(b)"])

def empty():
	assert (removeInvalidParentheses("") == [""])

def main():
	example_1()
	example_2()
	example_3()
	already_valid()
	empty()

if __name__ == "__main__":
	main()
