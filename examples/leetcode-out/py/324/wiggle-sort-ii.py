# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def wiggleSort(nums: list[int]) -> list[int]:
	n = len(nums)
	if (n <= 1):
		return nums
	_sorted = [ x for x in sorted([ x for x in nums ], key=lambda x: x) ]
	left = ((((n + 1)) // 2) - 1)
	right = (n - 1)
	result = []
	while (len(result) < n):
		if (left >= 0):
			result = (result + [_sorted[left]])
			left = (left - 1)
		if ((len(result) < n) and (right >= (((n + 1)) // 2))):
			result = (result + [_sorted[right]])
			right = (right - 1)
	return result

def example_1():
	assert (wiggleSort([1, 5, 1, 1, 6, 4]) == [1, 6, 1, 5, 1, 4])

def example_2():
	assert (wiggleSort([1, 3, 2, 2, 3, 1]) == [2, 3, 1, 3, 1, 2])

def single_element():
	assert (wiggleSort([1]) == [1])

def already_wiggle():
	assert (wiggleSort([2, 5, 1, 6]) == [2, 6, 1, 5])

def main():
	example_1()
	example_2()
	single_element()
	already_wiggle()

if __name__ == "__main__":
	main()
