# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def multiply(A: list[list[int]], B: list[list[int]]) -> list[list[int]]:
	m = len(A)
	if (m == 0):
		return []
	k = len(A[0])
	n = len(B[0])
	result = []
	i = 0
	while (i < m):
		row = []
		j = 0
		while (j < n):
			row = (row + [0])
			j = (j + 1)
		result = (result + [row])
		i = (i + 1)
	i = 0
	while (i < m):
		j = 0
		while (j < k):
			a = A[i][j]
			if (a != 0):
				col = 0
				while (col < n):
					b = B[j][col]
					if (b != 0):
						result[i][col] = (result[i][col] + (a * b))
					col = (col + 1)
			j = (j + 1)
		i = (i + 1)
	return result

def example():
	assert (multiply([[1, 0, 0], [(-1), 0, 3]], [[7, 0, 0], [0, 0, 0], [0, 0, 1]]) == [[7, 0, 0], [(-7), 0, 3]])

def single():
	assert (multiply([[2]], [[3]]) == [[6]])

def zero():
	assert (multiply([[0]], [[1]]) == [[0]])

def _x2():
	assert (multiply([[1, 2], [3, 4]], [[5, 6], [7, 8]]) == [[19, 22], [43, 50]])

def main():
	example()
	single()
	zero()
	_x2()

if __name__ == "__main__":
	main()
