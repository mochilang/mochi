# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def maximalRectangle(matrix: list[list[str]]) -> int:
	if (len(matrix) == 0):
		return 0
	rows = len(matrix)
	cols = len(matrix[0])
	heights = []
	init = 0
	while (init < cols):
		heights = (heights + [0])
		init = (init + 1)
	best = 0
	def largestRectangleArea(hs: list[int]) -> int:
		stack = []
		i = 0
		n = len(hs)
		maxArea = 0
		while (i <= n):
			curr = 0
			if (i < n):
				curr = hs[i]
			while (len(stack) > 0):
				if (curr < hs[stack[(len(stack) - 1)]]):
					h = hs[stack[(len(stack) - 1)]]
					stack = stack[0:(len(stack) - 1)]
					width = i
					if (len(stack) > 0):
						width = ((i - stack[(len(stack) - 1)]) - 1)
					area = (h * width)
					if (area > maxArea):
						maxArea = area
				else:
					break
			stack = (stack + [i])
			i = (i + 1)
		return maxArea
	r = 0
	while (r < rows):
		c = 0
		while (c < cols):
			if (matrix[r][c] == "1"):
				heights[c] = (heights[c] + 1)
			else:
				heights[c] = 0
			c = (c + 1)
		area = largestRectangleArea(heights)
		if (area > best):
			best = area
		r = (r + 1)
	return best

matrix1 = [["1", "0", "1", "0", "0"], ["1", "0", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "0", "0", "1", "0"]]

def example_1():
	assert (maximalRectangle(matrix1) == 6)

def single_zero():
	assert (maximalRectangle([["0"]]) == 0)

def single_one():
	assert (maximalRectangle([["1"]]) == 1)

def main():
	matrix1 = [["1", "0", "1", "0", "0"], ["1", "0", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "0", "0", "1", "0"]]
	example_1()
	single_zero()
	single_one()

if __name__ == "__main__":
	main()
