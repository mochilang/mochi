# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def countComponents(n: int, edges: list[list[int]]) -> int:
	graph = []
	i = 0
	while (i < n):
		graph = (graph + [[]])
		i = (i + 1)
	for e in edges:
		u = e[0]
		v = e[1]
		graph[u] = (graph[u] + [v])
		graph[v] = (graph[v] + [u])
	visited = []
	i = 0
	while (i < n):
		visited = (visited + [False])
		i = (i + 1)
	components = 0
	start = 0
	while (start < n):
		if (not visited[start]):
			components = (components + 1)
			queue = [start]
			visited[start] = True
			idx = 0
			while (idx < len(queue)):
				cur = queue[idx]
				idx = (idx + 1)
				for nei in graph[cur]:
					if (not visited[nei]):
						visited[nei] = True
						queue = (queue + [nei])
		start = (start + 1)
	return components

def example_1():
	assert (countComponents(5, [[0, 1], [1, 2], [3, 4]]) == 2)

def example_2():
	assert (countComponents(5, [[0, 1], [1, 2], [2, 3], [3, 4]]) == 1)

def single_node():
	assert (countComponents(1, []) == 1)

def two_disjoint_edges():
	assert (countComponents(4, [[0, 1], [2, 3]]) == 2)

def no_edges():
	assert (countComponents(4, []) == 4)

def main():
	example_1()
	example_2()
	single_node()
	two_disjoint_edges()
	no_edges()

if __name__ == "__main__":
	main()
