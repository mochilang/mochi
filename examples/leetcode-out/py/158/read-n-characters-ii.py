# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def newReader(s: str) -> Reader:
	return Reader(data=s, index=0, buffer="")

def read4(r: Reader) -> Read4Result:
	i = 0
	chunk = ""
	idx = r.index
	while ((i < 4) and (idx < len(r.data))):
		chunk = (chunk + r.data[idx])
		idx = (idx + 1)
		i = (i + 1)
	newReader = Reader(data=r.data, index=idx, buffer=r.buffer)
	return Read4Result(reader=newReader, chunk=chunk)

def read(reader: Reader, n: int) -> ReadResult:
	r = reader
	output = ""
	total = 0
	while ((total < n) and (len(r.buffer) > 0)):
		output = (output + r.buffer[0])
		r = Reader(data=r.data, index=r.index, buffer=r.buffer[1:len(r.buffer)])
		total = (total + 1)
	while (total < n):
		r4 = read4(r)
		r = r4.reader
		chunk = r4.chunk
		if (len(chunk) == 0):
			break
		i = 0
		while ((i < len(chunk)) and (total < n)):
			output = (output + chunk[i])
			i = (i + 1)
			total = (total + 1)
		r = Reader(data=r.data, index=r.index, buffer=chunk[i:len(chunk)])
	return ReadResult(reader=r, data=output, count=total)

@dataclasses.dataclass
class Reader:
	data: str
	index: int
	buffer: str

@dataclasses.dataclass
class Read4Result:
	reader: Reader
	chunk: str

@dataclasses.dataclass
class ReadResult:
	reader: Reader
	data: str
	count: int

def multiple_calls():
	r = newReader("abc")
	r1 = read(r, 1)
	assert (r1.data == "a")
	r = r1.reader
	r2 = read(r, 2)
	assert (r2.data == "bc")

def leftover_handling():
	r = newReader("abcde")
	r1 = read(r, 2)
	assert (r1.data == "ab")
	r = r1.reader
	r2 = read(r, 3)
	assert (r2.data == "cde")

def request_past_end():
	r = newReader("abcd")
	r1 = read(r, 6)
	assert (r1.data == "abcd")
	assert (r1.count == 4)

def main():
	multiple_calls()
	leftover_handling()
	request_past_end()

if __name__ == "__main__":
	main()
