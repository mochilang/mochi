# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def solve(board: list[list[str]]) -> list[list[str]]:
	rows = len(board)
	if (rows == 0):
		return board
	cols = len(board[0])
	queue = []
	for r in range(0, rows):
		if (board[r][0] == "O"):
			queue = (queue + [[r, 0]])
		if ((cols > 1) and (board[r][(cols - 1)] == "O")):
			queue = (queue + [[r, (cols - 1)]])
	for c in range(0, cols):
		if (board[0][c] == "O"):
			queue = (queue + [[0, c]])
		if ((rows > 1) and (board[(rows - 1)][c] == "O")):
			queue = (queue + [[(rows - 1), c]])
	i = 0
	while (i < len(queue)):
		pos = queue[i]
		r = pos[0]
		c = pos[1]
		if (board[r][c] == "O"):
			board[r][c] = "S"
			if (r > 0):
				if (board[(r - 1)][c] == "O"):
					queue = (queue + [[(r - 1), c]])
			if ((r + 1) < rows):
				if (board[(r + 1)][c] == "O"):
					queue = (queue + [[(r + 1), c]])
			if (c > 0):
				if (board[r][(c - 1)] == "O"):
					queue = (queue + [[r, (c - 1)]])
			if ((c + 1) < cols):
				if (board[r][(c + 1)] == "O"):
					queue = (queue + [[r, (c + 1)]])
		i = (i + 1)
	for r in range(0, rows):
		for c in range(0, cols):
			if (board[r][c] == "O"):
				board[r][c] = "X"
			elif (board[r][c] == "S"):
				board[r][c] = "O"
	return board

def example_1():
	board = [["X", "X", "X", "X"], ["X", "O", "O", "X"], ["X", "X", "O", "X"], ["X", "O", "X", "X"]]
	expected = [["X", "X", "X", "X"], ["X", "X", "X", "X"], ["X", "X", "X", "X"], ["X", "O", "X", "X"]]
	assert (solve(board) == expected)

def no_change():
	board = [["X", "X"], ["X", "X"]]
	assert (solve(board) == board)

def main():
	example_1()
	no_change()

if __name__ == "__main__":
	main()
