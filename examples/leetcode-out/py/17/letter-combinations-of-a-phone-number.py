# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def letterCombinations(digits: str) -> list[str]:
	if (len(digits) == 0):
		return []
	mapping = {"2": ["a", "b", "c"], "3": ["d", "e", "f"], "4": ["g", "h", "i"], "5": ["j", "k", "l"], "6": ["m", "n", "o"], "7": ["p", "q", "r", "s"], "8": ["t", "u", "v"], "9": ["w", "x", "y", "z"]}
	result = [""]
	for d in digits:
		if (not ((d in mapping))):
			continue
		letters = mapping[d]
		_next = [ (p + ch) for p in result for ch in letters ]
		result = _next
	return result

def example_1():
	assert (letterCombinations("23") == ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"])

def example_2():
	assert (letterCombinations("") == [])

def example_3():
	assert (letterCombinations("2") == ["a", "b", "c"])

def single_seven():
	assert (letterCombinations("7") == ["p", "q", "r", "s"])

def mix():
	assert (letterCombinations("79") == ["pw", "px", "py", "pz", "qw", "qx", "qy", "qz", "rw", "rx", "ry", "rz", "sw", "sx", "sy", "sz"])

def main():
	example_1()
	example_2()
	example_3()
	single_seven()
	mix()

if __name__ == "__main__":
	main()
