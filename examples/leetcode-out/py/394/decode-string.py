# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def decodeString(s: str) -> str:
	digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	counts = []
	strs = []
	curr = ""
	num = 0
	i = 0
	n = len(s)
	while (i < n):
		c = s[i]
		if ((c >= "0") and (c <= "9")):
			num = ((num * 10) + digits[c])
		elif (c == "["):
			counts = (counts + [num])
			strs = (strs + [curr])
			curr = ""
			num = 0
		elif (c == "]"):
			repeat = counts[(len(counts) - 1)]
			counts = counts[0:(len(counts) - 1)]
			prev = strs[(len(strs) - 1)]
			strs = strs[0:(len(strs) - 1)]
			repeated = ""
			j = 0
			while (j < repeat):
				repeated = (repeated + curr)
				j = (j + 1)
			curr = (prev + repeated)
		else:
			curr = (curr + c)
		i = (i + 1)
	return curr

def example_1():
	assert (decodeString("3[a]2[bc]") == "aaabcbc")

def example_2():
	assert (decodeString("3[a2[c]]") == "accaccacc")

def example_3():
	assert (decodeString("2[abc]3[cd]ef") == "abcabccdcdcdef")

def plain_text_with_brackets():
	assert (decodeString("abc3[cd]xyz") == "abccdcdcdxyz")

def multi_digit_number():
	assert (decodeString("10[a]") == "aaaaaaaaaa")

def main():
	example_1()
	example_2()
	example_3()
	plain_text_with_brackets()
	multi_digit_number()

if __name__ == "__main__":
	main()
