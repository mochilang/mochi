# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def Leaf() -> dict[str, typing.Any]:
	return {"__name": "Leaf"}

def Node(left: dict[str, typing.Any], value: int, right: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return {"__name": "Node", "left": left, "value": value, "right": right}

def isLeaf(t: dict[str, typing.Any]) -> bool:
	return (t["__name"] == "Leaf")

def left(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["left"]

def right(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["right"]

def value(t: dict[str, typing.Any]) -> int:
	return t["value"]

def absFloat(x: float) -> float:
	if (x < 0):
		return (-x)
	else:
		return x

def closestValue(root: dict[str, typing.Any], target: float) -> int:
	closest = value(root)
	node = root
	while (not isLeaf(node)):
		v = value(node)
		if (absFloat(((v) - target)) < absFloat(((closest) - target))):
			closest = v
		if (target < (v)):
			l = left(node)
			if isLeaf(l):
				break
			node = l
		else:
			r = right(node)
			if isLeaf(r):
				break
			node = r
	return closest

example = Node(Node(Node(Leaf(), 1, Leaf()), 2, Node(Leaf(), 3, Leaf())), 4, Node(Leaf(), 5, Leaf()))

def example_1():
	assert (closestValue(example, 3.714286) == 4)

def target_in_tree():
	assert (closestValue(example, 5) == 5)

def target_below_minimum():
	assert (closestValue(example, 0) == 1)

def main():
	example = Node(Node(Node(Leaf(), 1, Leaf()), 2, Node(Leaf(), 3, Leaf())), 4, Node(Leaf(), 5, Leaf()))
	example_1()
	target_in_tree()
	target_below_minimum()

if __name__ == "__main__":
	main()
