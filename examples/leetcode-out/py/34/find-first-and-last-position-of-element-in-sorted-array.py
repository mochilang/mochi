# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def searchRange(nums: list[int], target: int) -> list[int]:
	n = len(nums)
	left = 0
	right = (n - 1)
	start = (-1)
	end = (-1)
	left = 0
	right = (n - 1)
	while (left <= right):
		mid = (((left + right)) // 2)
		if (nums[mid] == target):
			start = mid
			right = (mid - 1)
		elif (nums[mid] < target):
			left = (mid + 1)
		else:
			right = (mid - 1)
	if (start == ((-1))):
		return [(-1), (-1)]
	left = start
	right = (n - 1)
	while (left <= right):
		mid = (((left + right)) // 2)
		if (nums[mid] == target):
			end = mid
			left = (mid + 1)
		elif (nums[mid] < target):
			left = (mid + 1)
		else:
			right = (mid - 1)
	return [start, end]

def example_1():
	assert (searchRange([5, 7, 7, 8, 8, 10], 8) == [3, 4])

def example_2():
	assert (searchRange([5, 7, 7, 8, 8, 10], 6) == [(-1), (-1)])

def example_3():
	assert (searchRange([], 0) == [(-1), (-1)])

def single_element_match():
	assert (searchRange([1], 1) == [0, 0])

def single_element_missing():
	assert (searchRange([1], 0) == [(-1), (-1)])

def main():
	example_1()
	example_2()
	example_3()
	single_element_match()
	single_element_missing()

if __name__ == "__main__":
	main()
