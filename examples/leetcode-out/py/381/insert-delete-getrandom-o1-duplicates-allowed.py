# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def newCollection() -> RandomizedCollection:
	return RandomizedCollection(values=[], pos={}, seed=1)

def nextSeed(x: int) -> int:
	return ((((x * 1103515245) + 12345)) % 2147483648)

def insert(col: RandomizedCollection, val: int) -> OpResult:
	values = col.values
	posMap = col.pos
	existed = False
	idxs = []
	if (val in posMap):
		existed = (len(posMap[val]) > 0)
		idxs = posMap[val]
	idxs = (idxs + [len(values)])
	posMap[val] = idxs
	values = (values + [val])
	return OpResult(ok=(not existed), col=RandomizedCollection(values=values, pos=posMap, seed=col.seed))

def remove(col: RandomizedCollection, val: int) -> OpResult:
	values = col.values
	posMap = col.pos
	if ((not ((val in posMap))) or (len(posMap[val]) == 0)):
		return OpResult(ok=False, col=col)
	idxs = posMap[val]
	removeIdx = idxs[(len(idxs) - 1)]
	idxs = idxs[0:(len(idxs) - 1)]
	posMap[val] = idxs
	lastIdx = (len(values) - 1)
	lastVal = values[lastIdx]
	values[removeIdx] = lastVal
	values = values[0:lastIdx]
	lastList = posMap[lastVal]
	i = 0
	while (i < len(lastList)):
		if (lastList[i] == lastIdx):
			lastList[i] = removeIdx
			break
		i = (i + 1)
	posMap[lastVal] = lastList
	return OpResult(ok=True, col=RandomizedCollection(values=values, pos=posMap, seed=col.seed))

def getRandom(col: RandomizedCollection) -> RandResult:
	seed = nextSeed(col.seed)
	idx = (seed % len(col.values))
	return RandResult(val=col.values[idx], col=RandomizedCollection(values=col.values, pos=col.pos, seed=seed))

@dataclasses.dataclass
class RandomizedCollection:
	values: list[int]
	pos: dict[int, list[int]]
	seed: int

@dataclasses.dataclass
class OpResult:
	ok: bool
	col: RandomizedCollection

@dataclasses.dataclass
class RandResult:
	val: int
	col: RandomizedCollection

def example_operations():
	c = newCollection()
	r1 = insert(c, 1)
	assert (r1.ok == True)
	c = r1.col
	r2 = insert(c, 1)
	assert (r2.ok == False)
	c = r2.col
	r3 = insert(c, 2)
	assert (r3.ok == True)
	c = r3.col
	g1 = getRandom(c)
	assert ((g1.val == 1) or (g1.val == 2))
	c = g1.col
	r4 = remove(c, 1)
	assert (r4.ok == True)
	c = r4.col
	g2 = getRandom(c)
	assert ((g2.val == 1) or (g2.val == 2))

def main():
	example_operations()

if __name__ == "__main__":
	main()
