# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def toList(s: str) -> list[str]:
	out = []
	for i in range(0, len(s)):
		out = (out + [s[i]])
	return out

def fromList(arr: list[str]) -> str:
	out = ""
	for ch in arr:
		out = (out + ch)
	return out

def reverseWords(chars: list[str]) -> list[str]:
	arr = chars
	left = 0
	right = (len(arr) - 1)
	while (left < right):
		temp = arr[left]
		arr[left] = arr[right]
		arr[right] = temp
		left = (left + 1)
		right = (right - 1)
	start = 0
	i = 0
	n = len(arr)
	while (i <= n):
		if (i == n):
			l = start
			r = (i - 1)
			while (l < r):
				t = arr[l]
				arr[l] = arr[r]
				arr[r] = t
				l = (l + 1)
				r = (r - 1)
		elif (arr[i] == " "):
			l = start
			r = (i - 1)
			while (l < r):
				t = arr[l]
				arr[l] = arr[r]
				arr[r] = t
				l = (l + 1)
				r = (r - 1)
			start = (i + 1)
		i = (i + 1)
	return arr

def example_1():
	input = toList("the sky is blue")
	result = reverseWords(input)
	assert (fromList(result) == "blue is sky the")

def example_2():
	input = toList("hello world")
	result = reverseWords(input)
	assert (fromList(result) == "world hello")

def single_word():
	input = toList("hello")
	result = reverseWords(input)
	assert (fromList(result) == "hello")

def trailing_space():
	input = toList("a b ")
	result = reverseWords(input)
	assert (fromList(result) == " b a")

def main():
	example_1()
	example_2()
	single_word()
	trailing_space()

if __name__ == "__main__":
	main()
