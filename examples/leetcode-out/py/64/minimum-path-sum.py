# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def minPathSum(grid: list[list[int]]) -> int:
	rows = len(grid)
	if (rows == 0):
		return 0
	cols = len(grid[0])
	dp = []
	r = 0
	while (r < rows):
		row = []
		c = 0
		while (c < cols):
			row = (row + [0])
			c = (c + 1)
		dp = (dp + [row])
		r = (r + 1)
	dp[0][0] = grid[0][0]
	c = 1
	while (c < cols):
		dp[0][c] = (dp[0][(c - 1)] + grid[0][c])
		c = (c + 1)
	r = 1
	while (r < rows):
		dp[r][0] = (dp[(r - 1)][0] + grid[r][0])
		c = 1
		while (c < cols):
			top = dp[(r - 1)][c]
			left = dp[r][(c - 1)]
			if (top < left):
				dp[r][c] = (top + grid[r][c])
			else:
				dp[r][c] = (left + grid[r][c])
			c = (c + 1)
		r = (r + 1)
	return dp[(rows - 1)][(cols - 1)]

def example_1():
	assert (minPathSum([[1, 3, 1], [1, 5, 1], [4, 2, 1]]) == 7)

def example_2():
	assert (minPathSum([[1, 2, 3], [4, 5, 6]]) == 12)

def single_cell():
	assert (minPathSum([[1]]) == 1)

def main():
	example_1()
	example_2()
	single_cell()

if __name__ == "__main__":
	main()
