# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def newZigzagIterator(v1: list[int], v2: list[int]) -> ZigzagIterator:
	return ZigzagIterator(v1=v1, v2=v2, i1=0, i2=0, turn=0)

def zigzagHasNext(it: ZigzagIterator) -> bool:
	return ((it.i1 < len(it.v1)) or (it.i2 < len(it.v2)))

def zigzagNext(it: ZigzagIterator) -> NextResult:
	idx1 = it.i1
	idx2 = it.i2
	t = it.turn
	a = it.v1
	b = it.v2
	value = 0
	if (t == 0):
		if (idx1 < len(a)):
			value = a[idx1]
			idx1 = (idx1 + 1)
			if (idx2 < len(b)):
				t = 1
		else:
			value = b[idx2]
			idx2 = (idx2 + 1)
	else:
		if (idx2 < len(b)):
			value = b[idx2]
			idx2 = (idx2 + 1)
			if (idx1 < len(a)):
				t = 0
		else:
			value = a[idx1]
			idx1 = (idx1 + 1)
	return NextResult(it=ZigzagIterator(v1=a, v2=b, i1=idx1, i2=idx2, turn=t), val=value)

@dataclasses.dataclass
class ZigzagIterator:
	v1: list[int]
	v2: list[int]
	i1: int
	i2: int
	turn: int

@dataclasses.dataclass
class NextResult:
	it: ZigzagIterator
	val: int

def example():
	it = newZigzagIterator([1, 2], [3, 4, 5, 6])
	assert (zigzagHasNext(it) == True)
	r1 = zigzagNext(it)
	it = r1.it
	assert (r1.val == 1)
	assert (zigzagHasNext(it) == True)
	r2 = zigzagNext(it)
	it = r2.it
	assert (r2.val == 3)
	assert (zigzagHasNext(it) == True)
	r3 = zigzagNext(it)
	it = r3.it
	assert (r3.val == 2)
	assert (zigzagHasNext(it) == True)
	r4 = zigzagNext(it)
	it = r4.it
	assert (r4.val == 4)
	assert (zigzagHasNext(it) == True)
	r5 = zigzagNext(it)
	it = r5.it
	assert (r5.val == 5)
	assert (zigzagHasNext(it) == True)
	r6 = zigzagNext(it)
	it = r6.it
	assert (r6.val == 6)
	assert (zigzagHasNext(it) == False)

def uneven_lists():
	it = newZigzagIterator([1, 2, 3], [4])
	r1 = zigzagNext(it)
	it = r1.it
	assert (r1.val == 1)
	r2 = zigzagNext(it)
	it = r2.it
	assert (r2.val == 4)
	r3 = zigzagNext(it)
	it = r3.it
	assert (r3.val == 2)
	r4 = zigzagNext(it)
	it = r4.it
	assert (r4.val == 3)
	assert (zigzagHasNext(it) == False)

def empty_second_list():
	it = newZigzagIterator([7, 8], [])
	r1 = zigzagNext(it)
	it = r1.it
	assert (r1.val == 7)
	r2 = zigzagNext(it)
	it = r2.it
	assert (r2.val == 8)
	assert (zigzagHasNext(it) == False)

def main():
	example()
	uneven_lists()
	empty_second_list()

if __name__ == "__main__":
	main()
