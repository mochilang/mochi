# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def isSelfCrossing(distance: list[int]) -> bool:
	n = len(distance)
	if (n < 4):
		return False
	i = 3
	while (i < n):
		if ((distance[i] >= distance[(i - 2)]) and (distance[(i - 1)] <= distance[(i - 3)])):
			return True
		if (((i >= 4) and (distance[(i - 1)] == distance[(i - 3)])) and ((distance[i] + distance[(i - 4)]) >= distance[(i - 2)])):
			return True
		if (((((i >= 5) and (distance[(i - 2)] >= distance[(i - 4)])) and (distance[(i - 1)] <= distance[(i - 3)])) and ((distance[i] + distance[(i - 4)]) >= distance[(i - 2)])) and ((distance[(i - 1)] + distance[(i - 5)]) >= distance[(i - 3)])):
			return True
		i = (i + 1)
	return False

def example_1():
	assert (isSelfCrossing([2, 1, 1, 2]) == True)

def example_2():
	assert (isSelfCrossing([1, 2, 3, 4]) == False)

def example_3():
	assert (isSelfCrossing([1, 1, 1, 2, 1]) == True)

def short():
	assert (isSelfCrossing([1, 2, 1]) == False)

def no_crossing():
	assert (isSelfCrossing([3, 3, 4, 2, 2]) == False)

def cross_late():
	assert (isSelfCrossing([1, 1, 2, 1, 1]) == True)

def main():
	example_1()
	example_2()
	example_3()
	short()
	no_crossing()
	cross_late()

if __name__ == "__main__":
	main()
