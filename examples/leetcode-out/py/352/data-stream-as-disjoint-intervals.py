# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def newSummaryRanges() -> SummaryRanges:
	return SummaryRanges(intervals=[])

def addNum(sr: SummaryRanges, val: int) -> SummaryRanges:
	intervals = sr.intervals
	i = 0
	n = len(intervals)
	result = []
	while (i < n):
		if (intervals[i][1] < (val - 1)):
			result = (result + [intervals[i]])
			i = (i + 1)
		else:
			break
	start = val
	end = val
	if (i < n):
		if (intervals[i][0] <= (val + 1)):
			if (intervals[i][0] < start):
				start = intervals[i][0]
			if (intervals[i][1] > end):
				end = intervals[i][1]
			i = (i + 1)
			while (i < n):
				if (intervals[i][0] <= (end + 1)):
					if (intervals[i][1] > end):
						end = intervals[i][1]
					i = (i + 1)
				else:
					break
	result = (result + [[start, end]])
	while (i < n):
		result = (result + [intervals[i]])
		i = (i + 1)
	return SummaryRanges(intervals=result)

def getIntervals(sr: SummaryRanges) -> list[list[int]]:
	return sr.intervals

@dataclasses.dataclass
class SummaryRanges:
	intervals: list[list[int]]

def example():
	sr = newSummaryRanges()
	sr = addNum(sr, 1)
	assert (getIntervals(sr) == [[1, 1]])
	sr = addNum(sr, 3)
	assert (getIntervals(sr) == [[1, 1], [3, 3]])
	sr = addNum(sr, 7)
	sr = addNum(sr, 2)
	sr = addNum(sr, 6)
	assert (getIntervals(sr) == [[1, 3], [6, 7]])

def duplicate():
	sr = newSummaryRanges()
	sr = addNum(sr, 5)
	sr = addNum(sr, 5)
	assert (getIntervals(sr) == [[5, 5]])

def merge_all():
	sr = newSummaryRanges()
	sr = addNum(sr, 1)
	sr = addNum(sr, 2)
	sr = addNum(sr, 3)
	assert (getIntervals(sr) == [[1, 3]])

def main():
	example()
	duplicate()
	merge_all()

if __name__ == "__main__":
	main()
