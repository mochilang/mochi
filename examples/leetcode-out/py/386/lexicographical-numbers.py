# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def lexicalOrder(n: int) -> list[int]:
	result = []
	curr = 1
	i = 0
	while (i < n):
		result = (result + [curr])
		if ((curr * 10) <= n):
			curr = (curr * 10)
		else:
			if (curr >= n):
				curr = (curr // 10)
			curr = (curr + 1)
			while ((curr % 10) == 0):
				curr = (curr // 10)
		i = (i + 1)
	return result

def example_1():
	assert (lexicalOrder(13) == [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9])

def example_2():
	assert (lexicalOrder(2) == [1, 2])

def example_3():
	assert (lexicalOrder(1) == [1])

def hundred():
	out = lexicalOrder(20)
	assert (len(out) == 20)
	assert (out[0] == 1)
	assert (out[(len(out) - 1)] == 9)

def main():
	example_1()
	example_2()
	example_3()
	hundred()

if __name__ == "__main__":
	main()
