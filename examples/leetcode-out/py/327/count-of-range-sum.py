# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def countRangeSum(nums: list[int], lower: int, upper: int) -> int:
	n = len(nums)
	prefix = [0]
	i = 0
	running = 0
	while (i < n):
		running = (running + nums[i])
		prefix = (prefix + [running])
		i = (i + 1)
	count = 0
	i = 0
	while (i < len(prefix)):
		j = (i + 1)
		while (j < len(prefix)):
			sum = (prefix[j] - prefix[i])
			if ((sum >= lower) and (sum <= upper)):
				count = (count + 1)
			j = (j + 1)
		i = (i + 1)
	return count

def example_1():
	assert (countRangeSum([(-2), 5, (-1)], (-2), 2) == 3)

def example_2():
	assert (countRangeSum([0], 0, 0) == 1)

def empty():
	assert (countRangeSum([], 0, 0) == 0)

def single_outside():
	assert (countRangeSum([3], (-1), 1) == 0)

def main():
	example_1()
	example_2()
	empty()
	single_outside()

if __name__ == "__main__":
	main()
