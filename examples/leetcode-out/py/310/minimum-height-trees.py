# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def findMinHeightTrees(n: int, edges: list[list[int]]) -> list[int]:
	if (n <= 2):
		result = []
		i = 0
		while (i < n):
			result = (result + [i])
			i = (i + 1)
		return result
	graph = []
	degree = []
	i = 0
	while (i < n):
		graph = (graph + [[]])
		degree = (degree + [0])
		i = (i + 1)
	for e in edges:
		a = e[0]
		b = e[1]
		graph[a] = (graph[a] + [b])
		graph[b] = (graph[b] + [a])
		degree[a] = (degree[a] + 1)
		degree[b] = (degree[b] + 1)
	leaves = []
	j = 0
	while (j < n):
		if (degree[j] == 1):
			leaves = (leaves + [j])
		j = (j + 1)
	remaining = n
	while (remaining > 2):
		newLeaves = []
		for leaf in leaves:
			remaining = (remaining - 1)
			for neighbor in graph[leaf]:
				degree[neighbor] = (degree[neighbor] - 1)
				if (degree[neighbor] == 1):
					newLeaves = (newLeaves + [neighbor])
		leaves = newLeaves
	return leaves

def example_1():
	assert (findMinHeightTrees(4, [[1, 0], [1, 2], [1, 3]]) == [1])

def example_2():
	res = findMinHeightTrees(6, [[3, 0], [3, 1], [3, 2], [3, 4], [5, 4]])
	ok = False
	if (len(res) == 2):
		a = res[0]
		b = res[1]
		if ((((a == 3) and (b == 4))) or (((a == 4) and (b == 3)))):
			ok = True
	assert (ok == True)

def single_node():
	assert (findMinHeightTrees(1, []) == [0])

def line():
	assert (findMinHeightTrees(2, [[0, 1]]) == [0, 1])

def main():
	example_1()
	example_2()
	single_node()
	line()

if __name__ == "__main__":
	main()
