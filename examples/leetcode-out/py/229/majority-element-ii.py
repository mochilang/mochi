# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def majorityElement(nums: list[int]) -> list[int]:
	n = len(nums)
	if (n == 0):
		return []
	candidate1 = 0
	candidate2 = 0
	count1 = 0
	count2 = 0
	for num in nums:
		if (num == candidate1):
			count1 = (count1 + 1)
		elif (num == candidate2):
			count2 = (count2 + 1)
		elif (count1 == 0):
			candidate1 = num
			count1 = 1
		elif (count2 == 0):
			candidate2 = num
			count2 = 1
		else:
			count1 = (count1 - 1)
			count2 = (count2 - 1)
	res = []
	c1 = 0
	c2 = 0
	for num in nums:
		if (num == candidate1):
			c1 = (c1 + 1)
		if (num == candidate2):
			c2 = (c2 + 1)
	if (c1 > (n // 3)):
		res = (res + [candidate1])
	if (candidate2 != candidate1):
		if (c2 > (n // 3)):
			res = (res + [candidate2])
	return res

def example_1():
	assert (majorityElement([3, 2, 3]) == [3])

def example_2():
	assert (majorityElement([1]) == [1])

def example_3():
	assert (majorityElement([1, 2]) == [1, 2])

def main():
	example_1()
	example_2()
	example_3()

if __name__ == "__main__":
	main()
