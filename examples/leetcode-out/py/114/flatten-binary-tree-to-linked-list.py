# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def Leaf() -> dict[str, typing.Any]:
	return {"__name": "Leaf"}

def Node(left: dict[str, typing.Any], value: int, right: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return {"__name": "Node", "left": left, "value": value, "right": right}

def isLeaf(t: dict[str, typing.Any]) -> bool:
	return (t["__name"] == "Leaf")

def left(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["left"]

def right(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["right"]

def value(t: dict[str, typing.Any]) -> int:
	return t["value"]

def preorder(t: dict[str, typing.Any]) -> list[int]:
	if isLeaf(t):
		return []
	return (([value(t)] + preorder(left(t))) + preorder(right(t)))

def reverse(xs: list[int]) -> list[int]:
	result = []
	for x in xs:
		result = ([x] + result)
	return result

def flatten(root: dict[str, typing.Any]) -> dict[str, typing.Any]:
	vals = reverse(preorder(root))
	t = Leaf()
	for v in vals:
		t = Node(Leaf(), v, t)
	return t

def equalTrees(a: dict[str, typing.Any], b: dict[str, typing.Any]) -> bool:
	if (isLeaf(a) and isLeaf(b)):
		return True
	if (isLeaf(a) or isLeaf(b)):
		return False
	return (((value(a) == value(b)) and equalTrees(left(a), left(b))) and equalTrees(right(a), right(b)))

example1 = Node(Node(Node(Leaf(), 3, Leaf()), 2, Node(Leaf(), 4, Leaf())), 1, Node(Leaf(), 5, Node(Leaf(), 6, Leaf())))
flattened1 = Node(Leaf(), 1, Node(Leaf(), 2, Node(Leaf(), 3, Node(Leaf(), 4, Node(Leaf(), 5, Node(Leaf(), 6, Leaf()))))))

def example_1():
	assert (equalTrees(flatten(example1), flattened1) == True)

def single_node():
	tree = Node(Leaf(), 0, Leaf())
	assert (equalTrees(flatten(tree), tree) == True)

def empty():
	assert (isLeaf(flatten(Leaf())) == True)

def main():
	example1 = Node(Node(Node(Leaf(), 3, Leaf()), 2, Node(Leaf(), 4, Leaf())), 1, Node(Leaf(), 5, Node(Leaf(), 6, Leaf())))
	flattened1 = Node(Leaf(), 1, Node(Leaf(), 2, Node(Leaf(), 3, Node(Leaf(), 4, Node(Leaf(), 5, Node(Leaf(), 6, Leaf()))))))
	example_1()
	single_node()
	empty()

if __name__ == "__main__":
	main()
