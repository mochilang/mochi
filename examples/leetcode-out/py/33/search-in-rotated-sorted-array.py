# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def search(nums: list[int], target: int) -> int:
	left = 0
	right = (len(nums) - 1)
	while (left <= right):
		mid = (((left + right)) // 2)
		if (nums[mid] == target):
			return mid
		if (nums[left] <= nums[mid]):
			if ((nums[left] <= target) and (target < nums[mid])):
				right = (mid - 1)
			else:
				left = (mid + 1)
		else:
			if ((nums[mid] < target) and (target <= nums[right])):
				left = (mid + 1)
			else:
				right = (mid - 1)
	return (-1)

def example_1():
	assert (search([4, 5, 6, 7, 0, 1, 2], 0) == 4)

def example_2():
	assert (search([4, 5, 6, 7, 0, 1, 2], 3) == ((-1)))

def example_3():
	assert (search([1], 0) == ((-1)))

def single_element_found():
	assert (search([1], 1) == 0)

def two_elements():
	assert (search([3, 1], 1) == 1)

def main():
	example_1()
	example_2()
	example_3()
	single_element_found()
	two_elements()

if __name__ == "__main__":
	main()
