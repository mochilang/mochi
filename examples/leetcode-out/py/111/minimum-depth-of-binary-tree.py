# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def minDepth(root: Tree) -> int:
	def helper(left: Tree, right: Tree) -> int:
		leftDepth = minDepth(left)
		rightDepth = minDepth(right)
		if ((leftDepth == 0) and (rightDepth == 0)):
			return 1
		if (leftDepth == 0):
			return (rightDepth + 1)
		if (rightDepth == 0):
			return (leftDepth + 1)
		if (leftDepth < rightDepth):
			return (leftDepth + 1)
		return (rightDepth + 1)
	return (lambda _t0=root: 0 if isinstance(_t0, Leaf) else (lambda l, r: helper(l, r))(_t0.left, _t0.right) if isinstance(_t0, Node) else None)()

class Tree:
	pass
@dataclasses.dataclass
class Leaf(Tree):
	pass
@dataclasses.dataclass
class Node(Tree):
	left: Tree
	value: int
	right: Tree

def example_1():
	tree = Node(left=Node(left=Leaf(), value=9, right=Leaf()), value=3, right=Node(left=Node(left=Leaf(), value=15, right=Leaf()), value=20, right=Node(left=Leaf(), value=7, right=Leaf())))
	assert (minDepth(tree) == 2)

def example_2():
	tree = Node(left=Leaf(), value=2, right=Node(left=Leaf(), value=3, right=Leaf()))
	assert (minDepth(tree) == 2)

def single_node():
	assert (minDepth(Node(left=Leaf(), value=1, right=Leaf())) == 1)

def empty():
	assert (minDepth(Leaf()) == 0)

def main():
	example_1()
	example_2()
	single_node()
	empty()

if __name__ == "__main__":
	main()
