# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def Leaf() -> dict[str, typing.Any]:
	return {"__name": "Leaf"}

def Node(left: dict[str, typing.Any], value: int, right: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return {"__name": "Node", "left": left, "value": value, "right": right}

def isLeaf(t: dict[str, typing.Any]) -> bool:
	return (t["__name"] == "Leaf")

def left(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["left"]

def right(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["right"]

def value(t: dict[str, typing.Any]) -> int:
	return t["value"]

def inorder(root: dict[str, typing.Any]) -> list[int]:
	if isLeaf(root):
		return []
	return ((inorder(left(root)) + [value(root)]) + inorder(right(root)))

def absFloat(x: float) -> float:
	if (x < 0):
		return (-x)
	else:
		return x

def closestKValues(root: dict[str, typing.Any], target: float, k: int) -> list[int]:
	vals = inorder(root)
	_sorted = [ v for v in sorted([ v for v in vals ], key=lambda v: absFloat(((v) - target))) ]
	return _sorted[0:k]

example = Node(Node(Node(Leaf(), 1, Leaf()), 2, Node(Leaf(), 3, Leaf())), 4, Node(Leaf(), 5, Leaf()))

def example():
	assert (closestKValues(example, 3.714286, 2) == [4, 3])

def single_node():
	assert (closestKValues(Node(Leaf(), 1, Leaf()), 0, 1) == [1])

def main():
	example = Node(Node(Node(Leaf(), 1, Leaf()), 2, Node(Leaf(), 3, Leaf())), 4, Node(Leaf(), 5, Leaf()))
	example()
	single_node()

if __name__ == "__main__":
	main()
