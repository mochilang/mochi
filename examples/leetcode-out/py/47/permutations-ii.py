# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def permuteUnique(nums: list[int]) -> list[list[int]]:
	arr = [ x for x in sorted([ x for x in nums ], key=lambda x: x) ]
	n = len(arr)
	result = []
	used = {}
	def backtrack(path: list[int]) -> None:
		nonlocal used
		nonlocal result
		if (len(path) == n):
			result = (result + [path])
		else:
			i = 0
			while (i < n):
				currentUsed = False
				if (i in used):
					currentUsed = used[i]
				if currentUsed:
					i = (i + 1)
					continue
				if ((i > 0) and (arr[i] == arr[(i - 1)])):
					prevUsed = False
					if ((i - 1) in used):
						prevUsed = used[(i - 1)]
					if (not prevUsed):
						i = (i + 1)
						continue
				used[i] = True
				backtrack((path + [arr[i]]))
				used[i] = False
				i = (i + 1)
	backtrack([])
	return result

def example_1():
	assert (permuteUnique([1, 1, 2]) == [[1, 1, 2], [1, 2, 1], [2, 1, 1]])

def example_2():
	assert (permuteUnique([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]])

def main():
	example_1()
	example_2()

if __name__ == "__main__":
	main()
