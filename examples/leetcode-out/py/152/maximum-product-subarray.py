# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def max(a: int, b: int) -> int:
	if (a > b):
		return a
	return b

def min(a: int, b: int) -> int:
	if (a < b):
		return a
	return b

def maxProduct(nums: list[int]) -> int:
	n = len(nums)
	maxEnding = nums[0]
	minEnding = nums[0]
	result = nums[0]
	i = 1
	while (i < n):
		v = nums[i]
		if (v < 0):
			temp = maxEnding
			maxEnding = minEnding
			minEnding = temp
		maxEnding = max(v, (maxEnding * v))
		minEnding = min(v, (minEnding * v))
		if (maxEnding > result):
			result = maxEnding
		i = (i + 1)
	return result

def example_1():
	assert (maxProduct([2, 3, (-2), 4]) == 6)

def example_2():
	assert (maxProduct([(-2), 0, (-1)]) == 0)

def negatives():
	assert (maxProduct([(-2), 3, (-4)]) == 24)

def single():
	assert (maxProduct([(-2)]) == ((-2)))

def main():
	example_1()
	example_2()
	negatives()
	single()

if __name__ == "__main__":
	main()
