# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def simplifyPath(path: str) -> str:
	stack = []
	part = ""
	i = 0
	n = len(path)
	while (i <= n):
		if (i == n):
			if (part == ".."):
				if (len(stack) > 0):
					stack = stack[0:(len(stack) - 1)]
			elif ((part != "") and (part != ".")):
				stack = (stack + [part])
			part = ""
		elif (path[i] == "/"):
			if (part == ".."):
				if (len(stack) > 0):
					stack = stack[0:(len(stack) - 1)]
			elif ((part != "") and (part != ".")):
				stack = (stack + [part])
			part = ""
		else:
			part = (part + path[i])
		i = (i + 1)
	result = "/"
	j = 0
	while (j < len(stack)):
		result = (result + stack[j])
		if (j < (len(stack) - 1)):
			result = (result + "/")
		j = (j + 1)
	return result

def example_1():
	assert (simplifyPath("/home/") == "/home")

def example_2():
	assert (simplifyPath("/../") == "/")

def example_3():
	assert (simplifyPath("/home//foo/") == "/home/foo")

def complex():
	assert (simplifyPath("/a/./b/../../c/") == "/c")

def dots():
	assert (simplifyPath("/a/../../b/../c//.//") == "/c")

def long():
	assert (simplifyPath("/a//b////c/d//././/..") == "/a/b/c")

def main():
	example_1()
	example_2()
	example_3()
	complex()
	dots()
	long()

if __name__ == "__main__":
	main()
