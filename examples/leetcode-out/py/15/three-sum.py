# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def threeSum(nums: list[int]) -> list[list[int]]:
	_sorted = [ x for x in sorted([ x for x in nums ], key=lambda x: x) ]
	n = len(_sorted)
	res = []
	i = 0
	while (i < n):
		if ((i > 0) and (_sorted[i] == _sorted[(i - 1)])):
			i = (i + 1)
			continue
		left = (i + 1)
		right = (n - 1)
		while (left < right):
			sum = ((_sorted[i] + _sorted[left]) + _sorted[right])
			if (sum == 0):
				res = (res + [[_sorted[i], _sorted[left], _sorted[right]]])
				left = (left + 1)
				while ((left < right) and (_sorted[left] == _sorted[(left - 1)])):
					left = (left + 1)
				right = (right - 1)
				while ((left < right) and (_sorted[right] == _sorted[(right + 1)])):
					right = (right - 1)
			elif (sum < 0):
				left = (left + 1)
			else:
				right = (right - 1)
		i = (i + 1)
	return res

def example_1():
	assert (threeSum([(-1), 0, 1, 2, (-1), (-4)]) == [[(-1), (-1), 2], [(-1), 0, 1]])

def example_2():
	assert (threeSum([0, 1, 1]) == [])

def example_3():
	assert (threeSum([0, 0, 0]) == [[0, 0, 0]])

def main():
	example_1()
	example_2()
	example_3()

if __name__ == "__main__":
	main()
