# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def newNumArray(nums: list[int]) -> NumArray:
	p = [0]
	sum = 0
	n = len(nums)
	for i in range(0, n):
		sum = (sum + nums[i])
		p = (p + [sum])
	return NumArray(prefix=p)

def sumRange(arr: NumArray, left: int, right: int) -> int:
	p = arr.prefix
	return (p[(right + 1)] - p[left])

@dataclasses.dataclass
class NumArray:
	prefix: list[int]

def example():
	arr = newNumArray([(-2), 0, 3, (-5), 2, (-1)])
	assert (sumRange(arr, 0, 2) == 1)
	assert (sumRange(arr, 2, 5) == ((-1)))
	assert (sumRange(arr, 0, 5) == ((-3)))

def single():
	arr = newNumArray([5])
	assert (sumRange(arr, 0, 0) == 5)

def main():
	example()
	single()

if __name__ == "__main__":
	main()
