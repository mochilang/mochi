# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def inorderTraversal(t: Tree) -> list[int]:
	return (lambda _t0=t: [] if isinstance(_t0, Leaf) else (lambda l, v, r: ((inorderTraversal(l) + [v]) + inorderTraversal(r)))(_t0.left, _t0.value, _t0.right) if isinstance(_t0, Node) else None)()

class Tree:
	pass
@dataclasses.dataclass
class Leaf(Tree):
	pass
@dataclasses.dataclass
class Node(Tree):
	left: Tree
	value: int
	right: Tree

example1 = Node(left=Leaf(), value=1, right=Node(left=Node(left=Leaf(), value=3, right=Leaf()), value=2, right=Leaf()))

def example_1():
	assert (inorderTraversal(example1) == [1, 3, 2])

def empty():
	assert (inorderTraversal(Leaf()) == [])

def single_node():
	assert (inorderTraversal(Node(left=Leaf(), value=1, right=Leaf())) == [1])

def main():
	example1 = Node(left=Leaf(), value=1, right=Node(left=Node(left=Leaf(), value=3, right=Leaf()), value=2, right=Leaf()))
	example_1()
	empty()
	single_node()

if __name__ == "__main__":
	main()
