# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def canPermutePalindrome(s: str) -> bool:
	counts = {}
	i = 0
	while (i < len(s)):
		ch = s[i]
		if (ch in counts):
			counts[ch] = (counts[ch] + 1)
		else:
			counts[ch] = 1
		i = (i + 1)
	oddCount = 0
	for key in counts:
		if ((counts[key] % 2) == 1):
			oddCount = (oddCount + 1)
			if (oddCount > 1):
				return False
	return True

def example_1():
	assert (canPermutePalindrome("code") == False)

def example_2():
	assert (canPermutePalindrome("aab") == True)

def example_3():
	assert (canPermutePalindrome("carerac") == True)

def empty_string():
	assert (canPermutePalindrome("") == True)

def single_char():
	assert (canPermutePalindrome("a") == True)

def two_odds():
	assert (canPermutePalindrome("abc") == False)

def main():
	example_1()
	example_2()
	example_3()
	empty_string()
	single_char()
	two_odds()

if __name__ == "__main__":
	main()
