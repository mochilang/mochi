# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def fullJustify(words: list[str], maxWidth: int) -> list[str]:
	result = []
	i = 0
	while (i < len(words)):
		j = i
		lineLen = 0
		while (j < len(words)):
			if (((lineLen + len(words[j])) + ((j - i))) <= maxWidth):
				lineLen = (lineLen + len(words[j]))
				j = (j + 1)
			else:
				break
		line = ""
		numWords = (j - i)
		if ((j == len(words)) or (numWords == 1)):
			k = i
			while (k < j):
				line = (line + words[k])
				if (k < (j - 1)):
					line = (line + " ")
				k = (k + 1)
			while (len(line) < maxWidth):
				line = (line + " ")
		else:
			totalSpaces = (maxWidth - lineLen)
			gaps = (numWords - 1)
			spaceEach = (totalSpaces // gaps)
			extra = (totalSpaces % gaps)
			k = i
			while (k < j):
				line = (line + words[k])
				if (k < (j - 1)):
					s = 0
					while (s < spaceEach):
						line = (line + " ")
						s = (s + 1)
					if (extra > 0):
						line = (line + " ")
						extra = (extra - 1)
				k = (k + 1)
		result = (result + [line])
		i = j
	return result

def example_1():
	words = ["This", "is", "an", "example", "of", "text", "justification."]
	assert (fullJustify(words, 16) == ["This    is    an", "example  of text", "justification.  "])

def example_2():
	words = ["What", "must", "be", "acknowledgment", "shall", "be"]
	assert (fullJustify(words, 16) == ["What   must   be", "acknowledgment  ", "shall be        "])

def example_3():
	words = ["Science", "is", "what", "we", "understand", "well", "enough", "to", "explain", "to", "a", "computer.", "Art", "is", "everything", "else", "we", "do"]
	assert (fullJustify(words, 20) == ["Science  is  what we", "understand      well", "enough to explain to", "a  computer.  Art is", "everything  else  we", "do                  "])

def main():
	example_1()
	example_2()
	example_3()

if __name__ == "__main__":
	main()
