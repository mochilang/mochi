# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def searchMatrix(matrix: list[list[int]], target: int) -> bool:
	m = len(matrix)
	if (m == 0):
		return False
	n = len(matrix[0])
	row = 0
	col = (n - 1)
	while ((row < m) and (col >= 0)):
		value = matrix[row][col]
		if (value == target):
			return True
		elif (value > target):
			col = (col - 1)
		else:
			row = (row + 1)
	return False

def example_1():
	assert (searchMatrix([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 5) == True)

def example_2():
	assert (searchMatrix([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 20) == False)

def single_element_found():
	assert (searchMatrix([[5]], 5) == True)

def single_element_missing():
	assert (searchMatrix([[5]], 3) == False)

def main():
	example_1()
	example_2()
	single_element_found()
	single_element_missing()

if __name__ == "__main__":
	main()
