# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def helper(n: int, total: int) -> list[str]:
	if (n == 0):
		return [""]
	if (n == 1):
		return ["0", "1", "8"]
	prev = helper((n - 2), total)
	result = []
	for x in prev:
		if (n != total):
			result = (result + [(("0" + x) + "0")])
		result = (result + [(("1" + x) + "1")])
		result = (result + [(("6" + x) + "9")])
		result = (result + [(("8" + x) + "8")])
		result = (result + [(("9" + x) + "6")])
	return result

def strobogrammaticInRange(low: str, high: str) -> int:
	m = len(low)
	n = len(high)
	count = 0
	_len = m
	while (_len <= n):
		nums = helper(_len, _len)
		for num in nums:
			if ((_len == m) and (num < low)):
				continue
			if ((_len == n) and (num > high)):
				continue
			if ((_len > 1) and (num[0] == "0")):
				continue
			count = (count + 1)
		_len = (_len + 1)
	return count

def example_1():
	assert (strobogrammaticInRange("50", "100") == 3)

def example_2():
	assert (strobogrammaticInRange("0", "0") == 1)

def example_3():
	assert (strobogrammaticInRange("2", "3") == 0)

def main():
	example_1()
	example_2()
	example_3()

if __name__ == "__main__":
	main()
