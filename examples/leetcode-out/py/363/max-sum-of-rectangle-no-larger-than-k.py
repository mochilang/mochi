# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def maxSumSubmatrix(matrix: list[list[int]], k: int) -> int:
	if ((len(matrix) == 0) or (len(matrix[0]) == 0)):
		return 0
	rows = len(matrix)
	cols = len(matrix[0])
	best = (-2147483648)
	left = 0
	while (left < cols):
		rowSums = []
		r = 0
		while (r < rows):
			rowSums = (rowSums + [0])
			r = (r + 1)
		right = left
		while (right < cols):
			i = 0
			while (i < rows):
				rowSums[i] = (rowSums[i] + matrix[i][right])
				i = (i + 1)
			prefixList = [0]
			prefix = 0
			idx = 0
			while (idx < rows):
				prefix = (prefix + rowSums[idx])
				j = 0
				localBest = (-2147483648)
				while (j < len(prefixList)):
					cand = (prefix - prefixList[j])
					if ((cand <= k) and (cand > localBest)):
						localBest = cand
					j = (j + 1)
				if (localBest > best):
					best = localBest
				prefixList = (prefixList + [prefix])
				idx = (idx + 1)
			right = (right + 1)
		left = (left + 1)
	return best

def example_1():
	matrix = [[1, 0, 1], [0, (-2), 3]]
	assert (maxSumSubmatrix(matrix, 2) == 2)

def example_2():
	matrix = [[2, 2, (-1)]]
	assert (maxSumSubmatrix(matrix, 3) == 3)

def single_element():
	assert (maxSumSubmatrix([[5]], 5) == 5)

def negative_numbers():
	matrix = [[(-1), (-2)], [(-3), (-4)]]
	assert (maxSumSubmatrix(matrix, ((-2))) == ((-2)))

def main():
	example_1()
	example_2()
	single_element()
	negative_numbers()

if __name__ == "__main__":
	main()
