# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def combinationSum2(candidates: list[int], target: int) -> list[list[int]]:
	arr = [ c for c in sorted([ c for c in candidates ], key=lambda c: c) ]
	n = len(arr)
	result = []
	def backtrack(remain: int, start: int, path: list[int]) -> None:
		nonlocal result
		if (remain == 0):
			result = (result + [path])
		else:
			i = start
			while (i < n):
				current = arr[i]
				if (current > remain):
					break
				if ((i > start) and (arr[i] == arr[(i - 1)])):
					i = (i + 1)
					continue
				backtrack((remain - current), (i + 1), (path + [current]))
				i = (i + 1)
	backtrack(target, 0, [])
	return result

def example_1():
	assert (combinationSum2([10, 1, 2, 7, 6, 1, 5], 8) == [[1, 1, 6], [1, 2, 5], [1, 7], [2, 6]])

def example_2():
	assert (combinationSum2([2, 5, 2, 1, 2], 5) == [[1, 2, 2], [5]])

def main():
	example_1()
	example_2()

if __name__ == "__main__":
	main()
