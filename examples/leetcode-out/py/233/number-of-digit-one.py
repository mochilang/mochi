# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def countDigitOne(n: int) -> int:
	count = 0
	i = 1
	while (i <= n):
		high = (n // ((i * 10)))
		current = (((n // i)) % 10)
		low = (n % i)
		if (current == 0):
			count = (count + (high * i))
		elif (current == 1):
			count = ((count + (high * i)) + ((low + 1)))
		else:
			count = (count + (((high + 1)) * i))
		i = (i * 10)
	return count

def example_1():
	assert (countDigitOne(13) == 6)

def example_2():
	assert (countDigitOne(0) == 0)

def single_digit():
	assert (countDigitOne(1) == 1)

def two_digits():
	assert (countDigitOne(20) == 12)

def hundreds():
	assert (countDigitOne(111) == 36)

def main():
	example_1()
	example_2()
	single_digit()
	two_digits()
	hundreds()

if __name__ == "__main__":
	main()
