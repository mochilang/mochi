# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def findSubstring(s: str, words: list[str]) -> list[int]:
	if (len(words) == 0):
		return []
	wordLen = len(words[0])
	wordCount = len(words)
	totalLen = (wordLen * wordCount)
	if (len(s) < totalLen):
		return []
	freq = {}
	for w in words:
		if (w in freq):
			freq[w] = (freq[w] + 1)
		else:
			freq[w] = 1
	result = []
	for offset in range(0, wordLen):
		left = offset
		count = 0
		seen = {}
		j = offset
		while ((j + wordLen) <= len(s)):
			word = s[j:(j + wordLen)]
			j = (j + wordLen)
			if (word in freq):
				if (word in seen):
					seen[word] = (seen[word] + 1)
				else:
					seen[word] = 1
				count = (count + 1)
				while (seen[word] > freq[word]):
					lw = s[left:(left + wordLen)]
					seen[lw] = (seen[lw] - 1)
					left = (left + wordLen)
					count = (count - 1)
				if (count == wordCount):
					result = (result + [left])
					lw = s[left:(left + wordLen)]
					seen[lw] = (seen[lw] - 1)
					left = (left + wordLen)
					count = (count - 1)
			else:
				seen = {}
				count = 0
				left = j
	return result

def example_1():
	assert (findSubstring("barfoothefoobarman", ["foo", "bar"]) == [0, 9])

def example_2():
	assert (findSubstring("wordgoodgoodgoodbestword", ["word", "good", "best", "word"]) == [])

def example_3():
	assert (findSubstring("barfoofoobarthefoobarman", ["bar", "foo", "the"]) == [6, 9, 12])

def main():
	example_1()
	example_2()
	example_3()

if __name__ == "__main__":
	main()
