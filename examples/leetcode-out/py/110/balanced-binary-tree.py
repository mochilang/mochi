# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def max(a: int, b: int) -> int:
	if (a > b):
		return a
	else:
		return b

def abs(x: int) -> int:
	if (x < 0):
		return (-x)
	else:
		return x

def height(tree: list[Node], idx: int) -> int:
	if (idx == ((-1))):
		return 0
	node = tree[idx]
	return (max(height(tree, node.left), height(tree, node.right)) + 1)

def balanced(tree: list[Node], idx: int) -> bool:
	if (idx == ((-1))):
		return True
	node = tree[idx]
	lh = height(tree, node.left)
	rh = height(tree, node.right)
	return ((balanced(tree, node.left) and balanced(tree, node.right)) and (abs((lh - rh)) <= 1))

def isBalanced(tree: list[Node], root: int) -> bool:
	return balanced(tree, root)

@dataclasses.dataclass
class Node:
	value: int
	left: int
	right: int

def example_1():
	tree = [Node(value=3, left=1, right=2), Node(value=9, left=(-1), right=(-1)), Node(value=20, left=3, right=4), Node(value=15, left=(-1), right=(-1)), Node(value=7, left=(-1), right=(-1))]
	assert (isBalanced(tree, 0) == True)

def example_2():
	tree = [Node(value=1, left=1, right=2), Node(value=2, left=3, right=4), Node(value=2, left=(-1), right=(-1)), Node(value=3, left=5, right=6), Node(value=3, left=(-1), right=(-1)), Node(value=4, left=(-1), right=(-1)), Node(value=4, left=(-1), right=(-1))]
	assert (isBalanced(tree, 0) == False)

def single_node():
	tree = [Node(value=1, left=(-1), right=(-1))]
	assert (isBalanced(tree, 0) == True)

def empty():
	empty = []
	assert (isBalanced(empty, (-1)) == True)

def main():
	example_1()
	example_2()
	single_node()
	empty()

if __name__ == "__main__":
	main()
