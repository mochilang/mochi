# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def longestValidParentheses(s: str) -> int:
	n = len(s)
	stack = []
	best = 0
	last = (-1)
	for i in range(0, n):
		c = s[i]
		if (c == "("):
			stack = (stack + [i])
		else:
			if (len(stack) == 0):
				last = i
			else:
				stack = stack[0:(len(stack) - 1)]
				if (len(stack) == 0):
					length = (i - last)
					if (length > best):
						best = length
				else:
					length = (i - stack[(len(stack) - 1)])
					if (length > best):
						best = length
	return best

def example_1():
	assert (longestValidParentheses("(()") == 2)

def example_2():
	assert (longestValidParentheses(")()())") == 4)

def example_3():
	assert (longestValidParentheses("") == 0)

def all_open():
	assert (longestValidParentheses("(((") == 0)

def balanced():
	assert (longestValidParentheses("()()") == 4)

def main():
	example_1()
	example_2()
	example_3()
	all_open()
	balanced()

if __name__ == "__main__":
	main()
