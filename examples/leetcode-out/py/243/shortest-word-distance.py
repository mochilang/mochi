# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def abs(x: int) -> int:
	if (x < 0):
		return (-x)
	else:
		return x

def shortestDistance(words: list[str], word1: str, word2: str) -> int:
	index1 = (-1)
	index2 = (-1)
	result = len(words)
	i = 0
	while (i < len(words)):
		if (words[i] == word1):
			index1 = i
		if (words[i] == word2):
			index2 = i
		if ((index1 >= 0) and (index2 >= 0)):
			dist = abs((index1 - index2))
			if (dist < result):
				result = dist
		i = (i + 1)
	return result

def example_1():
	words = ["practice", "makes", "perfect", "coding", "makes"]
	assert (shortestDistance(words, "coding", "practice") == 3)

def example_2():
	words = ["practice", "makes", "perfect", "coding", "makes"]
	assert (shortestDistance(words, "makes", "coding") == 1)

def same_adjacent():
	words = ["a", "b", "a"]
	assert (shortestDistance(words, "a", "b") == 1)

def main():
	example_1()
	example_2()
	same_adjacent()

if __name__ == "__main__":
	main()
