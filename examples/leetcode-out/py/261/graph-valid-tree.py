# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def validTree(n: int, edges: list[list[int]]) -> bool:
	if (len(edges) != (n - 1)):
		return False
	parent = []
	for i in range(0, n):
		parent = (parent + [i])
	def find(x: int) -> int:
		nonlocal parent
		root = x
		while (parent[root] != root):
			root = parent[root]
		node = x
		while (parent[node] != node):
			_next = parent[node]
			parent[node] = root
			node = _next
		return root
	for e in edges:
		a = e[0]
		b = e[1]
		pa = find(a)
		pb = find(b)
		if (pa == pb):
			return False
		parent[pb] = pa
	return True

def example_1():
	assert (validTree(5, [[0, 1], [0, 2], [0, 3], [1, 4]]) == True)

def example_2():
	assert (validTree(5, [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]]) == False)

def disconnected():
	assert (validTree(4, [[0, 1], [2, 3]]) == False)

def main():
	example_1()
	example_2()
	disconnected()

if __name__ == "__main__":
	main()
