# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def isNumber(s: str) -> bool:
	i = 0
	n = len(s)
	while (i < n):
		if (s[i] == " "):
			i = (i + 1)
		else:
			break
	if ((i < n) and (((s[i] == "+") or (s[i] == "-")))):
		i = (i + 1)
	num = False
	dot = False
	exp = False
	numAfterExp = True
	while (i < n):
		c = s[i]
		if (c == " "):
			break
		if ((c == "+") or (c == "-")):
			return False
		elif (c == "."):
			if (dot or exp):
				return False
			dot = True
		elif ((c == "e") or (c == "E")):
			if (exp or ((not num))):
				return False
			exp = True
			numAfterExp = False
			if ((i + 1) < n):
				if ((s[(i + 1)] == "+") or (s[(i + 1)] == "-")):
					i = (i + 1)
		else:
			digits = {"0": True, "1": True, "2": True, "3": True, "4": True, "5": True, "6": True, "7": True, "8": True, "9": True}
			if (not ((c in digits))):
				return False
			num = True
			if exp:
				numAfterExp = True
		i = (i + 1)
	while (i < n):
		if (s[i] == " "):
			i = (i + 1)
		else:
			break
	return ((num and (((not exp) or numAfterExp))) and (i == n))

def valid_simple():
	assert (isNumber("0") == True)

def invalid_single_e():
	assert (isNumber("e") == False)

def valid_exponent():
	assert (isNumber("2e10") == True)

def invalid_mixed():
	assert (isNumber("99e2.5") == False)

def spaces_around():
	assert (isNumber(" 0.1 ") == True)

def invalid_sign():
	assert (isNumber("--6") == False)

def main():
	valid_simple()
	invalid_single_e()
	valid_exponent()
	invalid_mixed()
	spaces_around()
	invalid_sign()

if __name__ == "__main__":
	main()
