# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def minMeetingRooms(intervals: list[list[int]]) -> int:
	if (len(intervals) == 0):
		return 0
	starts = [ iv[0] for iv in sorted([ iv for iv in intervals ], key=lambda iv: iv[0]) ]
	ends = [ iv[1] for iv in sorted([ iv for iv in intervals ], key=lambda iv: iv[1]) ]
	s = 0
	e = 0
	rooms = 0
	maxRooms = 0
	n = len(intervals)
	while (s < n):
		if (starts[s] < ends[e]):
			rooms = (rooms + 1)
			s = (s + 1)
			if (rooms > maxRooms):
				maxRooms = rooms
		else:
			rooms = (rooms - 1)
			e = (e + 1)
	return maxRooms

def example_1():
	assert (minMeetingRooms([[0, 30], [5, 10], [15, 20]]) == 2)

def example_2():
	assert (minMeetingRooms([[7, 10], [2, 4]]) == 1)

def no_meetings():
	assert (minMeetingRooms([]) == 0)

def same_start_end():
	assert (minMeetingRooms([[0, 10], [10, 20]]) == 1)

def main():
	example_1()
	example_2()
	no_meetings()
	same_start_end()

if __name__ == "__main__":
	main()
