# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def sortTransformedArray(nums: list[int], a: int, b: int, c: int) -> list[int]:
	n = len(nums)
	result = []
	i = 0
	while (i < n):
		result = (result + [0])
		i = (i + 1)
	def transform(x: int) -> int:
		return ((((a * x) * x) + (b * x)) + c)
	left = 0
	right = (n - 1)
	if (a >= 0):
		idx = (n - 1)
		while (left <= right):
			lv = transform(nums[left])
			rv = transform(nums[right])
			if (lv > rv):
				result[idx] = lv
				left = (left + 1)
			else:
				result[idx] = rv
				right = (right - 1)
			idx = (idx - 1)
	else:
		idx = 0
		while (left <= right):
			lv = transform(nums[left])
			rv = transform(nums[right])
			if (lv < rv):
				result[idx] = lv
				left = (left + 1)
			else:
				result[idx] = rv
				right = (right - 1)
			idx = (idx + 1)
	return result

def example_1():
	assert (sortTransformedArray([(-4), (-2), 2, 4], 1, 3, 5) == [3, 9, 15, 33])

def example_2():
	assert (sortTransformedArray([(-4), (-2), 2, 4], (-1), 3, 5) == [(-23), (-5), 1, 7])

def a_zero():
	assert (sortTransformedArray([0, 1, 2, 3], 0, 2, 1) == [1, 3, 5, 7])

def single_element():
	assert (sortTransformedArray([2], 2, (-3), 1) == [3])

def main():
	example_1()
	example_2()
	a_zero()
	single_element()

if __name__ == "__main__":
	main()
