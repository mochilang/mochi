# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def calculateMinimumHP(dungeon: list[list[int]]) -> int:
	m = len(dungeon)
	if (m == 0):
		return 1
	n = len(dungeon[0])
	dp = []
	i = 0
	while (i < m):
		row = []
		j = 0
		while (j < n):
			row = (row + [0])
			j = (j + 1)
		dp = (dp + [row])
		i = (i + 1)
	need = (1 - dungeon[(m - 1)][(n - 1)])
	if (need <= 0):
		need = 1
	dp[(m - 1)][(n - 1)] = need
	col = (n - 2)
	while (col >= 0):
		need = (dp[(m - 1)][(col + 1)] - dungeon[(m - 1)][col])
		if (need <= 0):
			need = 1
		dp[(m - 1)][col] = need
		col = (col - 1)
	rowi = (m - 2)
	while (rowi >= 0):
		need = (dp[(rowi + 1)][(n - 1)] - dungeon[rowi][(n - 1)])
		if (need <= 0):
			need = 1
		dp[rowi][(n - 1)] = need
		rowi = (rowi - 1)
	i = (m - 2)
	while (i >= 0):
		col = (n - 2)
		while (col >= 0):
			best = dp[(i + 1)][col]
			if (dp[i][(col + 1)] < best):
				best = dp[i][(col + 1)]
			need = (best - dungeon[i][col])
			if (need <= 0):
				need = 1
			dp[i][col] = need
			col = (col - 1)
		i = (i - 1)
	return dp[0][0]

def example_1():
	board = [[(-2), (-3), 3], [(-5), (-10), 1], [10, 30, (-5)]]
	assert (calculateMinimumHP(board) == 7)

def single_cell_positive():
	assert (calculateMinimumHP([[5]]) == 1)

def single_cell_negative():
	assert (calculateMinimumHP([[(-5)]]) == 6)

def two_by_two():
	board = [[1, (-2), 3], [2, (-2), (-2)]]
	assert (calculateMinimumHP(board) == 2)

def main():
	example_1()
	single_cell_positive()
	single_cell_negative()
	two_by_two()

if __name__ == "__main__":
	main()
