# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def getPermutation(n: int, k: int) -> str:
	factVal = 1
	for i in range(1, (n + 1)):
		factVal = (factVal * i)
	nums = []
	i = 1
	while (i <= n):
		nums = (nums + [i])
		i = (i + 1)
	k0 = (k - 1)
	result = ""
	i = 0
	while (i < n):
		factVal = (factVal // ((n - i)))
		idx = (k0 // factVal)
		digit = nums[idx]
		result = (result + str(digit))
		nums = (nums[0:idx] + nums[(idx + 1):len(nums)])
		k0 = (k0 % factVal)
		i = (i + 1)
	return result

def example_1():
	assert (getPermutation(3, 3) == "213")

def example_2():
	assert (getPermutation(4, 9) == "2314")

def example_3():
	assert (getPermutation(3, 1) == "123")

def main():
	example_1()
	example_2()
	example_3()

if __name__ == "__main__":
	main()
