# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def pathSum(root: Tree, targetSum: int) -> list[list[int]]:
	def dfs(node: Tree, remaining: int, path: list[int]) -> list[list[int]]:
		def handle(l: Tree, v: int, r: Tree, rem: int, p: list[int]) -> list[list[int]]:
			leftEmpty = (lambda _t0=l: True if isinstance(_t0, Leaf) else False)()
			rightEmpty = (lambda _t1=r: True if isinstance(_t1, Leaf) else False)()
			newRemaining = (rem - v)
			newPath = (p + [v])
			if (leftEmpty and rightEmpty):
				if (newRemaining == 0):
					return [newPath]
				else:
					return []
			return (dfs(l, newRemaining, newPath) + dfs(r, newRemaining, newPath))
		return (lambda _t2=node: [] if isinstance(_t2, Leaf) else (lambda l, v, r: handle(l, v, r, remaining, path))(_t2.left, _t2.value, _t2.right) if isinstance(_t2, Node) else None)()
	return dfs(root, targetSum, [])

class Tree:
	pass
@dataclasses.dataclass
class Leaf(Tree):
	pass
@dataclasses.dataclass
class Node(Tree):
	left: Tree
	value: int
	right: Tree

def example_1():
	rootLeft = Node(left=Node(left=Leaf(), value=7, right=Leaf()), value=11, right=Node(left=Leaf(), value=2, right=Leaf()))
	tree = Node(left=Node(left=rootLeft, value=4, right=Leaf()), value=5, right=Node(left=Node(left=Leaf(), value=13, right=Leaf()), value=8, right=Node(left=Node(left=Leaf(), value=5, right=Leaf()), value=4, right=Node(left=Leaf(), value=1, right=Leaf()))))
	assert (pathSum(tree, 22) == [[5, 4, 11, 2], [5, 8, 4, 5]])

def example_2():
	tree = Node(left=Node(left=Leaf(), value=2, right=Leaf()), value=1, right=Node(left=Leaf(), value=3, right=Leaf()))
	assert (pathSum(tree, 5) == [])

def example_3():
	tree = Node(left=Node(left=Leaf(), value=2, right=Leaf()), value=1, right=Leaf())
	assert (pathSum(tree, 0) == [])

def main():
	example_1()
	example_2()
	example_3()

if __name__ == "__main__":
	main()
