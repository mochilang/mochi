# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def isReflected(points: list[list[int]]) -> bool:
	if (len(points) == 0):
		return True
	pointSet = {}
	minX = points[0][0]
	maxX = points[0][0]
	for p in points:
		x = p[0]
		y = p[1]
		key = ((str(x) + ",") + str(y))
		pointSet[key] = True
		if (x < minX):
			minX = x
		if (x > maxX):
			maxX = x
	sum = (minX + maxX)
	for p in points:
		x = p[0]
		y = p[1]
		rx = (sum - x)
		key = ((str(rx) + ",") + str(y))
		if (not ((key in pointSet))):
			return False
	return True

def example_true():
	assert (isReflected([[1, 1], [(-1), 1]]) == True)

def example_false():
	assert (isReflected([[1, 1], [(-1), (-1)]]) == False)

def three_points():
	assert (isReflected([[1, 1], [0, 1], [(-1), 1]]) == True)

def duplicates():
	assert (isReflected([[0, 0], [0, 0]]) == True)

def empty():
	pts = []
	assert (isReflected(pts) == True)

def main():
	example_true()
	example_false()
	three_points()
	duplicates()
	empty()

if __name__ == "__main__":
	main()
