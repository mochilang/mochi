# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def largestRectangleArea(heights: list[int]) -> int:
	n = len(heights)
	stack = []
	maxArea = 0
	i = 0
	while (i < n):
		while (len(stack) > 0):
			if (heights[i] < heights[stack[(len(stack) - 1)]]):
				h = heights[stack[(len(stack) - 1)]]
				stack = stack[0:(len(stack) - 1)]
				width = i
				if (len(stack) > 0):
					width = ((i - stack[(len(stack) - 1)]) - 1)
				area = (h * width)
				if (area > maxArea):
					maxArea = area
			else:
				break
		stack = (stack + [i])
		i = (i + 1)
	while (len(stack) > 0):
		h = heights[stack[(len(stack) - 1)]]
		stack = stack[0:(len(stack) - 1)]
		width = n
		if (len(stack) > 0):
			width = ((n - stack[(len(stack) - 1)]) - 1)
		area = (h * width)
		if (area > maxArea):
			maxArea = area
	return maxArea

def example_1():
	assert (largestRectangleArea([2, 1, 5, 6, 2, 3]) == 10)

def example_2():
	assert (largestRectangleArea([2, 4]) == 4)

def single_bar():
	assert (largestRectangleArea([1]) == 1)

def valley():
	assert (largestRectangleArea([2, 1, 2]) == 3)

def main():
	example_1()
	example_2()
	single_bar()
	valley()

if __name__ == "__main__":
	main()
