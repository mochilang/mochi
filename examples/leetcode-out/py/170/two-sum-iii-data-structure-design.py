# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def newTwoSum() -> TwoSum:
	return TwoSum(counts={})

def add(ts: TwoSum, number: int) -> TwoSum:
	counts = ts.counts
	current = 0
	if (number in counts):
		current = counts[number]
	counts[number] = (current + 1)
	return TwoSum(counts=counts)

def find(ts: TwoSum, value: int) -> bool:
	for key in ts.counts:
		count = ts.counts[key]
		complement = (value - key)
		if (complement in ts.counts):
			other = ts.counts[complement]
			if (key != complement):
				return True
			else:
				if (other > 1):
					return True
	return False

@dataclasses.dataclass
class TwoSum:
	counts: dict[int, int]

def example():
	ts = newTwoSum()
	ts = add(ts, 1)
	ts = add(ts, 3)
	ts = add(ts, 5)
	assert (find(ts, 4) == True)
	assert (find(ts, 7) == False)

def duplicate_numbers():
	ts = newTwoSum()
	ts = add(ts, 2)
	ts = add(ts, 2)
	assert (find(ts, 4) == True)
	assert (find(ts, 3) == False)

def main():
	example()
	duplicate_numbers()

if __name__ == "__main__":
	main()
