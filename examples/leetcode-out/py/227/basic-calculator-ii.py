# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def calculate(s: str) -> int:
	digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	stack = []
	current = 0
	op = "+"
	i = 0
	n = len(s)
	while (i <= n):
		ch = " "
		if (i < n):
			ch = s[i]
		if (ch in digits):
			current = ((current * 10) + digits[ch])
		if ((((not ((ch in digits))) and (ch != " "))) or (i == n)):
			if (op == "+"):
				stack = (stack + [current])
			elif (op == "-"):
				stack = (stack + [(-current)])
			elif (op == "*"):
				last = stack[(len(stack) - 1)]
				stack = stack[0:(len(stack) - 1)]
				stack = (stack + [(last * current)])
			else:
				last = stack[(len(stack) - 1)]
				stack = stack[0:(len(stack) - 1)]
				stack = (stack + [(last // current)])
			op = ch
			current = 0
		i = (i + 1)
	result = 0
	for num in stack:
		result = (result + num)
	return result

def example_1():
	assert (calculate("3+2*2") == 7)

def example_2():
	assert (calculate(" 3/2 ") == 1)

def example_3():
	assert (calculate(" 3+5 / 2 ") == 5)

def mix_operations():
	assert (calculate("14-3/2") == 13)

def single_number():
	assert (calculate("0") == 0)

def main():
	example_1()
	example_2()
	example_3()
	mix_operations()
	single_number()

if __name__ == "__main__":
	main()
