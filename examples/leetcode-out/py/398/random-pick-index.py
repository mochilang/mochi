# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import time
import typing

def newPicker(nums: list[int]) -> RandomPicker:
	return RandomPicker(nums=nums)

def pick(p: RandomPicker, target: int) -> int:
	matches = []
	i = 0
	while (i < len(p.nums)):
		if (p.nums[i] == target):
			matches = (matches + [i])
		i = (i + 1)
	if (len(matches) == 0):
		return (-1)
	idx = (time.time_ns() % len(matches))
	return matches[idx]

@dataclasses.dataclass
class RandomPicker:
	nums: list[int]

def example():
	p = newPicker([1, 2, 3, 3, 3])
	idx = pick(p, 3)
	assert (((idx == 2) or (idx == 3)) or (idx == 4))

def single_match():
	p = newPicker([2, 5, 7])
	assert (pick(p, 5) == 1)

def no_match():
	p = newPicker([1, 2])
	assert (pick(p, 3) == ((-1)))

def main():
	example()
	single_match()
	no_match()

if __name__ == "__main__":
	main()
