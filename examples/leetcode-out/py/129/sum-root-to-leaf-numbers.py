# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def Leaf() -> dict[str, typing.Any]:
	return {"__name": "Leaf"}

def Node(left: dict[str, typing.Any], value: int, right: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return {"__name": "Node", "left": left, "value": value, "right": right}

def isLeaf(t: dict[str, typing.Any]) -> bool:
	return (t["__name"] == "Leaf")

def left(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["left"]

def right(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["right"]

def value(t: dict[str, typing.Any]) -> int:
	return t["value"]

def sumNumbers(root: dict[str, typing.Any]) -> int:
	total = 0
	def dfs(node: dict[str, typing.Any], current: int) -> None:
		nonlocal total
		if (not isLeaf(node)):
			_next = ((current * 10) + value(node))
			l = left(node)
			r = right(node)
			if (isLeaf(l) and isLeaf(r)):
				total = (total + _next)
			else:
				dfs(l, _next)
				dfs(r, _next)
	dfs(root, 0)
	return total

def example_1():
	tree = Node(Node(Leaf(), 2, Leaf()), 1, Node(Leaf(), 3, Leaf()))
	assert (sumNumbers(tree) == 25)

def example_2():
	tree = Node(Node(Node(Leaf(), 5, Leaf()), 9, Node(Leaf(), 1, Leaf())), 4, Node(Leaf(), 0, Leaf()))
	assert (sumNumbers(tree) == 1026)

def single_zero():
	assert (sumNumbers(Node(Leaf(), 0, Leaf())) == 0)

def main():
	example_1()
	example_2()
	single_zero()

if __name__ == "__main__":
	main()
