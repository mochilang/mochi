# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def generatePalindromes(s: str) -> list[str]:
	letters = []
	i = 0
	while (i < len(s)):
		letters = (letters + [s[i]])
		i = (i + 1)
	counts = [ {ch: g.key, cnt: _count(g)} for ch in letters ]
	odd = 0
	center = ""
	half = []
	for item in counts:
		if ((item.cnt % 2) == 1):
			odd = (odd + 1)
			center = item.ch
		j = 0
		while (j < (item.cnt // 2)):
			half = (half + [item.ch])
			j = (j + 1)
	if (odd > 1):
		return []
	arr = [ x for x in sorted([ x for x in half ], key=lambda x: x) ]
	n = len(arr)
	result = []
	used = {}
	def backtrack(path: list[str]) -> None:
		nonlocal used
		nonlocal result
		if (len(path) == n):
			left = ""
			k = 0
			while (k < n):
				left = (left + path[k])
				k = (k + 1)
			right = ""
			k = (n - 1)
			while (k >= 0):
				right = (right + path[k])
				k = (k - 1)
			pal = left
			if (odd == 1):
				pal = (pal + center)
			pal = (pal + right)
			result = (result + [pal])
		else:
			i = 0
			while (i < n):
				curUsed = False
				if (i in used):
					curUsed = used[i]
				if curUsed:
					i = (i + 1)
					continue
				if ((i > 0) and (arr[i] == arr[(i - 1)])):
					prevUsed = False
					if ((i - 1) in used):
						prevUsed = used[(i - 1)]
					if (not prevUsed):
						i = (i + 1)
						continue
				used[i] = True
				backtrack((path + [arr[i]]))
				used[i] = False
				i = (i + 1)
	backtrack([])
	return result

def example_1():
	ans = generatePalindromes("aabb")
	_sorted = [ x for x in sorted([ x for x in ans ], key=lambda x: x) ]
	assert (_sorted == ["abba", "baab"])

def example_2():
	assert (generatePalindromes("abc") == [])

def single_char():
	assert (generatePalindromes("a") == ["a"])

def triple():
	res = generatePalindromes("aaa")
	assert (res == ["aaa"])

def main():
	example_1()
	example_2()
	single_char()
	triple()

def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, 'Items'):
        return len(v.Items)
    raise Exception('count() expects list or group')
if __name__ == "__main__":
	main()
