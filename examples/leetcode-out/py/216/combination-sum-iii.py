# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def combinationSum3(k: int, n: int) -> list[list[int]]:
	result = []
	def backtrack(start: int, remain: int, path: list[int]) -> None:
		nonlocal result
		if (len(path) == k):
			if (remain == 0):
				result = (result + [path])
		elif (remain > 0):
			i = start
			while (i <= 9):
				if (i > remain):
					break
				backtrack((i + 1), (remain - i), (path + [i]))
				i = (i + 1)
	backtrack(1, n, [])
	return result

def example_1():
	assert (combinationSum3(3, 7) == [[1, 2, 4]])

def example_2():
	assert (combinationSum3(3, 9) == [[1, 2, 6], [1, 3, 5], [2, 3, 4]])

def example_3():
	assert (combinationSum3(4, 1) == [])

def no_combination():
	assert (combinationSum3(3, 2) == [])

def main():
	example_1()
	example_2()
	example_3()
	no_combination()

if __name__ == "__main__":
	main()
