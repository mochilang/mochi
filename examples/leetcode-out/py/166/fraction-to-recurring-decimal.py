# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def fractionToDecimal(numerator: int, denominator: int) -> str:
	if (denominator == 0):
		return ""
	if (numerator == 0):
		return "0"
	result = ""
	minus = str((-1))[0]
	negative = False
	if ((((numerator < 0) and (denominator > 0))) or (((numerator > 0) and (denominator < 0)))):
		negative = True
	if (numerator < 0):
		numerator = (-numerator)
	if (denominator < 0):
		denominator = (-denominator)
	integerPart = (numerator // denominator)
	result = str(integerPart)
	remainder = (numerator % denominator)
	if (remainder == 0):
		if negative:
			return (minus + result)
		return result
	result = (result + ".")
	mapIndex = {}
	decimal = ""
	while (remainder != 0):
		if (remainder in mapIndex):
			idx = mapIndex[remainder]
			prefix = decimal[0:idx]
			suffix = decimal[idx:len(decimal)]
			decimal = (((prefix + "(") + suffix) + ")")
			break
		mapIndex[remainder] = len(decimal)
		remainder = (remainder * 10)
		digit = (remainder // denominator)
		decimal = (decimal + str(digit))
		remainder = (remainder % denominator)
	result = (result + decimal)
	if negative:
		return (minus + result)
	return result

def example_1():
	assert (fractionToDecimal(1, 2) == "0.5")

def example_2():
	assert (fractionToDecimal(2, 1) == "2")

def example_3():
	assert (fractionToDecimal(2, 3) == "0.(6)")

def negative():
	assert (fractionToDecimal((-50), 8) == "-6.25")

def repeat_zeros():
	assert (fractionToDecimal(1, 6) == "0.1(6)")

def main():
	example_1()
	example_2()
	example_3()
	negative()
	repeat_zeros()

if __name__ == "__main__":
	main()
