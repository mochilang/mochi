# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def customersWithoutOrders(customers: list[Customer], orders: list[Order]) -> list[str]:
	result = []
	for c in customers:
		placed = False
		for o in orders:
			if (o.customerId == c.id):
				placed = True
				break
		if (not placed):
			result = (result + [c.name])
	return result

@dataclasses.dataclass
class Customer:
	id: int
	name: str

@dataclasses.dataclass
class Order:
	id: int
	customerId: int

customers = [Customer(id=1, name="Joe"), Customer(id=2, name="Henry"), Customer(id=3, name="Sam"), Customer(id=4, name="Max")]
orders = [Order(id=1, customerId=3), Order(id=2, customerId=1)]

def example():
	assert (customersWithoutOrders(customers, orders) == ["Henry", "Max"])

def all_customers():
	emptyOrders = []
	assert (str(customersWithoutOrders(customers, emptyOrders)) == str(["Joe", "Henry", "Sam", "Max"]))

def none_left():
	allOrders = [Order(id=1, customerId=1), Order(id=2, customerId=2), Order(id=3, customerId=3), Order(id=4, customerId=4)]
	assert (customersWithoutOrders(customers, allOrders) == [])

def main():
	customers = [Customer(id=1, name="Joe"), Customer(id=2, name="Henry"), Customer(id=3, name="Sam"), Customer(id=4, name="Max")]
	orders = [Order(id=1, customerId=3), Order(id=2, customerId=1)]
	example()
	all_customers()
	none_left()

if __name__ == "__main__":
	main()
