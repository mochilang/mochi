# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def abs(x: int) -> int:
	if (x < 0):
		return (-x)
	else:
		return x

def shortestWordDistance(words: list[str], word1: str, word2: str) -> int:
	index1 = ((-1))
	index2 = ((-1))
	minDist = len(words)
	i = 0
	while (i < len(words)):
		w = words[i]
		if (w == word1):
			if (word1 == word2):
				if (index1 != ((-1))):
					d = (i - index1)
					if (d < minDist):
						minDist = d
				index1 = i
			else:
				index1 = i
				if (index2 != ((-1))):
					d = abs((index1 - index2))
					if (d < minDist):
						minDist = d
		elif (w == word2):
			index2 = i
			if (index1 != ((-1))):
				d = abs((index1 - index2))
				if (d < minDist):
					minDist = d
		i = (i + 1)
	return minDist

def example_1():
	assert (shortestWordDistance(["practice", "makes", "perfect", "coding", "makes"], "makes", "coding") == 1)

def example_2():
	assert (shortestWordDistance(["practice", "makes", "perfect", "coding", "makes"], "makes", "makes") == 3)

def example_3():
	assert (shortestWordDistance(["a", "a", "b", "b"], "a", "b") == 1)

def main():
	example_1()
	example_2()
	example_3()

if __name__ == "__main__":
	main()
