// Generated by Mochi TypeScript compiler

function helper(n: number, total: number) : Array<string> {
	if ((n == 0)) {
		return [""]
	}
	if ((n == 1)) {
		return ["0", "1", "8"]
	}
	let prev: Array<string> = helper((n - 2), total)
	let result: Array<any> = []
	for (const x of prev) {
		if ((n != total)) {
			result = result.concat(["0" + x + "0"])
		}
		result = result.concat(["1" + x + "1"])
		result = result.concat(["6" + x + "9"])
		result = result.concat(["8" + x + "8"])
		result = result.concat(["9" + x + "6"])
	}
	return result
}

function strobogrammaticInRange(low: string, high: string) : number {
	let m: number = low.length
	let n: number = high.length
	let count: any = 0
	let len: any = m
	while ((len <= n)) {
		let nums: Array<string> = helper(len, len)
		for (const num of nums) {
			if (((len == m) && (num < low))) {
				continue
			}
			if (((len == n) && (num > high))) {
				continue
			}
			if (((len > 1) && (num[0] == "0"))) {
				continue
			}
			count = (count + 1)
		}
		len = (len + 1)
	}
	return count
}

function example_1(): void {
	if (!((strobogrammaticInRange("50", "100") == 3))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((strobogrammaticInRange("0", "0") == 1))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((strobogrammaticInRange("2", "3") == 0))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
}
main()

