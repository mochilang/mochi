// Generated by Mochi TypeScript compiler

function buildTree(inorder: Array<number>, postorder: Array<number>) : any {
	if ((inorder.length == 0)) {
		return {}
	}
	let rootVal: number = postorder[(postorder.length - 1)]
	let idx: number = 0
	while (((idx < inorder.length) && (inorder[idx] != rootVal))) {
		idx = (idx + 1)
	}
	let leftIn: Array<number> = inorder.slice(0, idx)
	let rightIn: Array<number> = inorder.slice((idx + 1), inorder.length)
	let leftPost: Array<number> = postorder.slice(0, idx)
	let rightPost: Array<number> = postorder.slice(idx, (postorder.length - 1))
	return {left: buildTree(leftIn, leftPost), value: rootVal, right: buildTree(rightIn, rightPost)}
}

function isSameTree(a: any, b: any) : boolean {
	return (() => {
	const _t = a;
	switch (_t) {
	case Leaf:
		return (() => {
	const _t = b;
	switch (_t) {
	case Leaf:
		return true;
	default:
		return false;
	}
	return undefined;
})();
	case Node(al, av, ar):
		return (() => {
	const _t = b;
	switch (_t) {
	case Node(bl, bv, br):
		return ((_equal(av, bv) && isSameTree(al, bl)) && isSameTree(ar, br));
	default:
		return false;
	}
	return undefined;
})();
	}
	return undefined;
})()
}

function example_1(): void {
	let inorder: Array<number> = [9, 3, 15, 20, 7]
	let postorder: Array<number> = [9, 15, 7, 20, 3]
	let expected: Node = {left: {left: {}, value: 9, right: {}}, value: 3, right: {left: {left: {}, value: 15, right: {}}, value: 20, right: {left: {}, value: 7, right: {}}}}
	if (!((isSameTree(buildTree(inorder, postorder), expected) == true))) { throw new Error('expect failed') }
}

function example_2(): void {
	let inorder: Array<number> = [(-1)]
	let postorder: Array<number> = [(-1)]
	let expected: Node = {left: {}, value: (-1), right: {}}
	if (!((isSameTree(buildTree(inorder, postorder), expected) == true))) { throw new Error('expect failed') }
}

function empty(): void {
	let result: any = buildTree([], [])
	if (!((() => {
	const _t = result;
	switch (_t) {
	case Leaf:
		return true;
	default:
		return false;
	}
	return undefined;
})())) { throw new Error('expect failed') }
}

function main(): void {
	type Tree = {
	}
	example_1()
	example_2()
	empty()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

