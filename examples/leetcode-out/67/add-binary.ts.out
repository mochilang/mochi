// Generated by Mochi TypeScript compiler

function addBinary(a: string, b: string) : string {
	let digits: Record<string, number> = {"0": 0, "1": 1}
	let i: number = a.length
	let j: number = b.length
	let carry: number = 0
	let out: string = ""
	while ((((i > 0) || (j > 0)) || (carry > 0))) {
		let x: number = 0
		if ((i > 0)) {
			i = (i - 1)
			x = digits[a[i]]
		}
		let y: number = 0
		if ((j > 0)) {
			j = (j - 1)
			y = digits[b[j]]
		}
		let sum: number = ((x + y) + carry)
		carry = Math.trunc(sum / 2)
		let bit: number = (sum % 2)
		out = String(bit) + out
	}
	return out
}

function example_1(): void {
	if (!((addBinary("11", "1") == "100"))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((addBinary("1010", "1011") == "10101"))) { throw new Error('expect failed') }
}

function zero(): void {
	if (!((addBinary("0", "0") == "0"))) { throw new Error('expect failed') }
}

function different_lengths(): void {
	if (!((addBinary("1", "111") == "1000"))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	zero()
	different_lengths()
}
main()

