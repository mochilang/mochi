// Generated by Mochi TypeScript compiler

function Leaf() : Record<string, any> {
	return {"__name": "Leaf"}
}

function Node(left: Record<string, any>, value: number, right: Record<string, any>) : Record<string, any> {
	return {"__name": "Node", "left": left, "value": value, "right": right}
}

function isLeaf(t: Record<string, any>) : boolean {
	return _equal(t["__name"], "Leaf")
}

function left(t: Record<string, any>) : Record<string, any> {
	return t["left"]
}

function right(t: Record<string, any>) : Record<string, any> {
	return t["right"]
}

function value(t: Record<string, any>) : number {
	return t["value"]
}

function sumNumbers(root: Record<string, any>) : number {
	let total: number = 0
	function dfs(node: Record<string, any>, current: number) : void {
		if ((!isLeaf(node))) {
			let next: number = ((current * 10) + value(node))
			let l: Record<string, any> = left(node)
			let r: Record<string, any> = right(node)
			if ((isLeaf(l) && isLeaf(r))) {
				total = (total + next)
			} else {
				dfs(l, next)
				dfs(r, next)
			}
		}
	}
	dfs(root, 0)
	return total
}

function example_1(): void {
	let tree: Record<string, any> = Node(Node(Leaf(), 2, Leaf()), 1, Node(Leaf(), 3, Leaf()))
	if (!((sumNumbers(tree) == 25))) { throw new Error('expect failed') }
}

function example_2(): void {
	let tree: Record<string, any> = Node(Node(Node(Leaf(), 5, Leaf()), 9, Node(Leaf(), 1, Leaf())), 4, Node(Leaf(), 0, Leaf()))
	if (!((sumNumbers(tree) == 1026))) { throw new Error('expect failed') }
}

function single_zero(): void {
	if (!((sumNumbers(Node(Leaf(), 0, Leaf())) == 0))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	single_zero()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

