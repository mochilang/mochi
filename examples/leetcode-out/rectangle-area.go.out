package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func max(a int, b int) int {
	if (a > b) {
		return a
	}
	return b
}

func min(a int, b int) int {
	if (a < b) {
		return a
	}
	return b
}

func computeArea(ax1 int, ay1 int, ax2 int, ay2 int, bx1 int, by1 int, bx2 int, by2 int) int {
	var areaA int = (((ax2 - ax1)) * ((ay2 - ay1)))
	var areaB int = (((bx2 - bx1)) * ((by2 - by1)))
	var overlapWidth int = (min(ax2, bx2) - max(ax1, bx1))
	var overlapHeight int = (min(ay2, by2) - max(ay1, by1))
	var overlap int = 0
	_ = overlap
	if ((overlapWidth > 0) && (overlapHeight > 0)) {
		overlap = (overlapWidth * overlapHeight)
	}
	return ((areaA + areaB) - overlap)
}

func example_1() {
	expect((computeArea(-3, 0, 3, 4, 0, -1, 9, 2) == 45))
}

func example_2() {
	expect((computeArea(-2, -2, 2, 2, -2, -2, 2, 2) == 16))
}

func no_overlap() {
	expect((computeArea(-1, -1, 1, 1, 2, 2, 3, 3) == 5))
}

func touching_edges() {
	expect((computeArea(0, 0, 1, 1, 1, 0, 2, 1) == 2))
}

func one_inside_another() {
	expect((computeArea(-2, -2, 2, 2, -1, -1, 1, 1) == 16))
}

func main() {
	example_1()
	example_2()
	no_overlap()
	touching_edges()
	one_inside_another()
}

