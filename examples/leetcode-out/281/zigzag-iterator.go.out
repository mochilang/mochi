package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

type ZigzagIterator struct {
	V1 []int `json:"v1"`
	V2 []int `json:"v2"`
	I1 int `json:"i1"`
	I2 int `json:"i2"`
	Turn int `json:"turn"`
}

type NextResult struct {
	It any `json:"it"`
	Val int `json:"val"`
}

func newZigzagIterator(v1 []int, v2 []int) ZigzagIterator {
	return ZigzagIterator{V1: v1, V2: v2, I1: 0, I2: 0, Turn: 0}
}

func zigzagHasNext(it ZigzagIterator) bool {
	return ((it.I1 < len(it.V1)) || (it.I2 < len(it.V2)))
}

func zigzagNext(it ZigzagIterator) NextResult {
	var idx1 int = it.I1
	var idx2 int = it.I2
	var t int = it.Turn
	var a []int = it.V1
	var b []int = it.V2
	var value int = 0
	_ = value
	if (t == 0) {
		if (idx1 < len(a)) {
			value = a[idx1]
			idx1 = (idx1 + 1)
			if (idx2 < len(b)) {
				t = 1
			}
		} else {
			value = b[idx2]
			idx2 = (idx2 + 1)
		}
	} else {
		if (idx2 < len(b)) {
			value = b[idx2]
			idx2 = (idx2 + 1)
			if (idx1 < len(a)) {
				t = 0
			}
		} else {
			value = a[idx1]
			idx1 = (idx1 + 1)
		}
	}
	return NextResult{It: ZigzagIterator{V1: a, V2: b, I1: idx1, I2: idx2, Turn: t}, Val: value}
}

func example() {
	var it ZigzagIterator = newZigzagIterator([]int{1, 2}, []int{3, 4, 5, 6})
	expect((zigzagHasNext(it) == true))
	var r1 NextResult = zigzagNext(it)
	_ = r1
	it = r1.It
	expect((r1.Val == 1))
	expect((zigzagHasNext(it) == true))
	var r2 NextResult = zigzagNext(it)
	_ = r2
	it = r2.It
	expect((r2.Val == 3))
	expect((zigzagHasNext(it) == true))
	var r3 NextResult = zigzagNext(it)
	_ = r3
	it = r3.It
	expect((r3.Val == 2))
	expect((zigzagHasNext(it) == true))
	var r4 NextResult = zigzagNext(it)
	_ = r4
	it = r4.It
	expect((r4.Val == 4))
	expect((zigzagHasNext(it) == true))
	var r5 NextResult = zigzagNext(it)
	_ = r5
	it = r5.It
	expect((r5.Val == 5))
	expect((zigzagHasNext(it) == true))
	var r6 NextResult = zigzagNext(it)
	_ = r6
	it = r6.It
	expect((r6.Val == 6))
	expect((zigzagHasNext(it) == false))
}

func uneven_lists() {
	var it ZigzagIterator = newZigzagIterator([]int{1, 2, 3}, []int{4})
	var r1 NextResult = zigzagNext(it)
	_ = r1
	it = r1.It
	expect((r1.Val == 1))
	var r2 NextResult = zigzagNext(it)
	_ = r2
	it = r2.It
	expect((r2.Val == 4))
	var r3 NextResult = zigzagNext(it)
	_ = r3
	it = r3.It
	expect((r3.Val == 2))
	var r4 NextResult = zigzagNext(it)
	_ = r4
	it = r4.It
	expect((r4.Val == 3))
	expect((zigzagHasNext(it) == false))
}

func empty_second_list() {
	var it ZigzagIterator = newZigzagIterator([]int{7, 8}, []int{})
	var r1 NextResult = zigzagNext(it)
	_ = r1
	it = r1.It
	expect((r1.Val == 7))
	var r2 NextResult = zigzagNext(it)
	_ = r2
	it = r2.It
	expect((r2.Val == 8))
	expect((zigzagHasNext(it) == false))
}

func main() {
	example()
	uneven_lists()
	empty_second_list()
}

