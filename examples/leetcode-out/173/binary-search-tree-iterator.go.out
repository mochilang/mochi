package main

import (
	"encoding/json"
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func Leaf() map[string]any {
	return _cast[map[string]any](map[string]string{"__name": "Leaf"})
}

func Node(left map[string]any, value int, right map[string]any) map[string]any {
	return map[string]any{"__name": "Node", "left": left, "value": value, "right": right}
}

func isLeaf(t map[string]any) bool {
	return _equal(t["__name"], "Leaf")
}

func left(t map[string]any) map[string]any {
	return t["left"]
}

func right(t map[string]any) map[string]any {
	return t["right"]
}

func value(t map[string]any) int {
	return _cast[int](t["value"])
}

func pushLeft(it map[string]any, node map[string]any) {
	var n map[string]any = node
	var st []map[string]any = _cast[[]map[string]any](it["stack"])
	for !isLeaf(n) {
		st = append(append([]map[string]any{}, st...), []map[string]any{n}...)
		n = left(n)
	}
	it["stack"] = st
}

func NewBSTIterator(root map[string]any) map[string]any {
	var it map[string]any = map[string][]map[string]any{"stack": _cast[[]map[string]any]([]any{})}
	pushLeft(it, root)
	return it
}

func bstNext(it map[string]any) int {
	var st []map[string]any = _cast[[]map[string]any](it["stack"])
	var node map[string]any = st[(len(st) - 1)]
	st = st[0:(len(st) - 1)]
	it["stack"] = st
	pushLeft(it, right(node))
	return value(node)
}

func bstHasNext(it map[string]any) bool {
	var st []map[string]any = _cast[[]map[string]any](it["stack"])
	return (len(st) > 0)
}

func example() {
	var iterator map[string]any = NewBSTIterator(Node(Node(Leaf(), 3, Leaf()), 7, Node(Node(Leaf(), 9, Leaf()), 15, Node(Leaf(), 20, Leaf()))))
	_ = iterator
	expect((bstNext(iterator) == 3))
	expect((bstNext(iterator) == 7))
	expect((bstHasNext(iterator) == true))
	expect((bstNext(iterator) == 9))
	expect((bstHasNext(iterator) == true))
	expect((bstNext(iterator) == 15))
	expect((bstHasNext(iterator) == true))
	expect((bstNext(iterator) == 20))
	expect((bstHasNext(iterator) == false))
}

func single_node() {
	var it map[string]any = NewBSTIterator(Node(Leaf(), 5, Leaf()))
	_ = it
	expect((bstNext(it) == 5))
	expect((bstHasNext(it) == false))
}

func main() {
	example()
	single_node()
}

func _cast[T any](v any) T {
    data, err := json.Marshal(v)
    if err != nil { panic(err) }
    var out T
    if err := json.Unmarshal(data, &out); err != nil { panic(err) }
    return out
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

