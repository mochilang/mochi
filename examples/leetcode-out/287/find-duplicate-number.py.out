# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def findDuplicate(nums: list[int]) -> int:
	slow = nums[0]
	fast = nums[0]
	while True:
		slow = nums[slow]
		fast = nums[nums[fast]]
		if (slow == fast):
			break
	ptr1 = nums[0]
	ptr2 = slow
	while (ptr1 != ptr2):
		ptr1 = nums[ptr1]
		ptr2 = nums[ptr2]
	return ptr1

def example_1():
	assert (findDuplicate([1, 3, 4, 2, 2]) == 2)

def example_2():
	assert (findDuplicate([3, 1, 3, 4, 2]) == 3)

def duplicate_at_end():
	assert (findDuplicate([1, 4, 6, 2, 6, 3, 5]) == 6)

def many_duplicates():
	assert (findDuplicate([2, 2, 2, 2, 2]) == 2)

def main():
	example_1()
	example_2()
	duplicate_at_end()
	many_duplicates()

if __name__ == "__main__":
	main()
