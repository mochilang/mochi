// Generated by Mochi TypeScript compiler

function findDuplicate(nums: Array<number>) : number {
	let slow: number = nums[0]
	let fast: number = nums[0]
	while (true) {
		slow = nums[slow]
		fast = nums[nums[fast]]
		if ((slow == fast)) {
			break
		}
	}
	let ptr1: number = nums[0]
	let ptr2: number = slow
	while ((ptr1 != ptr2)) {
		ptr1 = nums[ptr1]
		ptr2 = nums[ptr2]
	}
	return ptr1
}

function example_1(): void {
	if (!((findDuplicate([1, 3, 4, 2, 2]) == 2))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((findDuplicate([3, 1, 3, 4, 2]) == 3))) { throw new Error('expect failed') }
}

function duplicate_at_end(): void {
	if (!((findDuplicate([1, 4, 6, 2, 6, 3, 5]) == 6))) { throw new Error('expect failed') }
}

function many_duplicates(): void {
	if (!((findDuplicate([2, 2, 2, 2, 2]) == 2))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	duplicate_at_end()
	many_duplicates()
}
main()

