package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func containsNearbyDuplicate(nums []int, k int) bool {
	var index map[int]int = map[int]int{}
	_ = index
	var i int = 0
	_ = i
	for (i < len(nums)) {
		var num int = nums[i]
		_tmp0 := num
		_tmp1 := index
		_, _tmp2 := _tmp1[_tmp0]
		if _tmp2 {
			var j int = index[num]
			if ((i - j) <= k) {
				return true
			}
		}
		index[num] = i
		i = (i + 1)
	}
	return false
}

func example_1() {
	expect((containsNearbyDuplicate([]int{1, 2, 3, 1}, 3) == true))
}

func example_2() {
	expect((containsNearbyDuplicate([]int{1, 0, 1, 1}, 1) == true))
}

func example_3() {
	expect((containsNearbyDuplicate([]int{1, 2, 3, 1, 2, 3}, 2) == false))
}

func no_duplicates() {
	expect((containsNearbyDuplicate([]int{1, 2, 3, 4, 5}, 3) == false))
}

func duplicate_at_distance_k() {
	expect((containsNearbyDuplicate([]int{1, 2, 3, 1}, 2) == false))
}

func duplicate_with_k_zero() {
	expect((containsNearbyDuplicate([]int{1, 1}, 0) == false))
}

func main() {
	example_1()
	example_2()
	example_3()
	no_duplicates()
	duplicate_at_distance_k()
	duplicate_with_k_zero()
}

