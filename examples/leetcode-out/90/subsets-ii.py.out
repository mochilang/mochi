# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def subsetsWithDup(nums: list[int]) -> list[list[int]]:
	arr = [ x for x in sorted([ x for x in nums ], key=lambda x: x) ]
	n = len(arr)
	result = []
	def backtrack(start: int, path: list[int]) -> None:
		nonlocal result
		once = 0
		while (once < 1):
			result = (result + [path])
			once = (once + 1)
		i = start
		while (i < n):
			if ((i > start) and (arr[i] == arr[(i - 1)])):
				i = (i + 1)
				continue
			newPath = path
			t = 0
			while (t < 1):
				newPath = (newPath + [arr[i]])
				t = (t + 1)
			backtrack((i + 1), newPath)
			i = (i + 1)
	backtrack(0, [])
	return result

def example_1():
	assert (subsetsWithDup([1, 2, 2]) == [[], [1], [1, 2], [1, 2, 2], [2], [2, 2]])

def example_2():
	assert (subsetsWithDup([0]) == [[], [0]])

def main():
	example_1()
	example_2()

if __name__ == "__main__":
	main()
