# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def countPrimes(n: int) -> int:
	if (n <= 2):
		return 0
	isPrime = []
	i = 0
	while (i < n):
		isPrime = (isPrime + [True])
		i = (i + 1)
	isPrime[0] = False
	isPrime[1] = False
	p = 2
	while ((p * p) < n):
		if isPrime[p]:
			j = (p * p)
			while (j < n):
				isPrime[j] = False
				j = (j + p)
		p = (p + 1)
	count = 0
	k = 0
	while (k < n):
		if isPrime[k]:
			count = (count + 1)
		k = (k + 1)
	return count

def example_1():
	assert (countPrimes(10) == 4)

def example_2():
	assert (countPrimes(0) == 0)

def example_3():
	assert (countPrimes(1) == 0)

def primes_under_20():
	assert (countPrimes(20) == 8)

def larger_input():
	assert (countPrimes(100) == 25)

def main():
	example_1()
	example_2()
	example_3()
	primes_under_20()
	larger_input()

if __name__ == "__main__":
	main()
