// Generated by Mochi TypeScript compiler

function isMatch(s: string, p: string) : boolean {
	let m: number = s.length
	let n: number = p.length
	let memo: Record<any, any> = {}
	function dfs(i: number, j: number) : boolean {
		let key: number = ((i * ((n + 1))) + j)
		if (Object.prototype.hasOwnProperty.call(memo, String(key))) {
			return memo[key]
		}
		if ((j == n)) {
			return (i == m)
		}
		let first: boolean = false
		if ((i < m)) {
			if ((((p[j] == s[i])) || ((p[j] == ".")))) {
				first = true
			}
		}
		let ans: boolean = false
		if (((j + 1) < n)) {
			if ((p[(j + 1)] == "*")) {
				if (dfs(i, (j + 2))) {
					ans = true
				} else 				if ((first && dfs((i + 1), j))) {
					ans = true
				}
			} else {
				if ((first && dfs((i + 1), (j + 1)))) {
					ans = true
				}
			}
		} else {
			if ((first && dfs((i + 1), (j + 1)))) {
				ans = true
			}
		}
		memo[key] = ans
		return ans
	}
	return dfs(0, 0)
}

function example_1(): void {
	if (!((isMatch("aa", "a") == false))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((isMatch("aa", "a*") == true))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((isMatch("ab", ".*") == true))) { throw new Error('expect failed') }
}

function example_4(): void {
	if (!((isMatch("aab", "c*a*b") == true))) { throw new Error('expect failed') }
}

function example_5(): void {
	if (!((isMatch("mississippi", "mis*is*p*.") == false))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	example_4()
	example_5()
}
main()

