# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def isMatch(s: str, p: str) -> bool:
	m = len(s)
	n = len(p)
	memo = {}
	def dfs(i: int, j: int) -> bool:
		nonlocal memo
		key = ((i * ((n + 1))) + j)
		if (key in memo):
			return memo[key]
		if (j == n):
			return (i == m)
		first = False
		if (i < m):
			if (((p[j] == s[i])) or ((p[j] == "."))):
				first = True
		ans = False
		if ((j + 1) < n):
			if (p[(j + 1)] == "*"):
				if dfs(i, (j + 2)):
					ans = True
				elif (first and dfs((i + 1), j)):
					ans = True
			else:
				if (first and dfs((i + 1), (j + 1))):
					ans = True
		else:
			if (first and dfs((i + 1), (j + 1))):
				ans = True
		memo[key] = ans
		return ans
	return dfs(0, 0)

def example_1():
	assert (isMatch("aa", "a") == False)

def example_2():
	assert (isMatch("aa", "a*") == True)

def example_3():
	assert (isMatch("ab", ".*") == True)

def example_4():
	assert (isMatch("aab", "c*a*b") == True)

def example_5():
	assert (isMatch("mississippi", "mis*is*p*.") == False)

def main():
	example_1()
	example_2()
	example_3()
	example_4()
	example_5()

if __name__ == "__main__":
	main()
