// Generated by Mochi TypeScript compiler

function isSameTree(p: any, q: any) : boolean {
	return (() => {
	const _t = p;
	switch (_t) {
	case Leaf:
		return (() => {
	const _t = q;
	switch (_t) {
	case Leaf:
		return true;
	default:
		return false;
	}
	return undefined;
})();
	case Node(pl, pv, pr):
		return (() => {
	const _t = q;
	switch (_t) {
	case Node(ql, qv, qr):
		return ((_equal(pv, qv) && isSameTree(pl, ql)) && isSameTree(pr, qr));
	default:
		return false;
	}
	return undefined;
})();
	}
	return undefined;
})()
}

function example_1(): void {
	let p: Node = {left: {left: {}, value: 2, right: {}}, value: 1, right: {left: {}, value: 3, right: {}}}
	let q: Node = {left: {left: {}, value: 2, right: {}}, value: 1, right: {left: {}, value: 3, right: {}}}
	if (!((isSameTree(p, q) == true))) { throw new Error('expect failed') }
}

function example_2(): void {
	let p: Node = {left: {left: {}, value: 2, right: {}}, value: 1, right: {}}
	let q: Node = {left: {}, value: 1, right: {left: {}, value: 2, right: {}}}
	if (!((isSameTree(p, q) == false))) { throw new Error('expect failed') }
}

function example_3(): void {
	let p: Node = {left: {left: {}, value: 2, right: {}}, value: 1, right: {left: {}, value: 1, right: {}}}
	let q: Node = {left: {left: {}, value: 1, right: {}}, value: 1, right: {left: {}, value: 2, right: {}}}
	if (!((isSameTree(p, q) == false))) { throw new Error('expect failed') }
}

function both_empty(): void {
	if (!((isSameTree({}, {}) == true))) { throw new Error('expect failed') }
}

function main(): void {
	type Tree = {
	}
	example_1()
	example_2()
	example_3()
	both_empty()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

