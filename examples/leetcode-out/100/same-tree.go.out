package main

import (
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

type Tree interface { isTree() }
type Leaf struct {
}
func (Leaf) isTree() {}
type Node struct {
	Left any `json:"left"`
	Value int `json:"value"`
	Right any `json:"right"`
}
func (Node) isTree() {}

func isSameTree(p any, q any) bool {
	return func() bool {
	_t := p
	switch _t {
	case Leaf:
		return func() bool {
	_t := q
	switch _t {
	case Leaf:
		return true
	default:
		return false
	}
}()
	case Node(pl, pv, pr):
		return func() bool {
	_t := q
	switch _t {
	case Node(ql, qv, qr):
		return ((_equal(pv, qv) && isSameTree(pl, ql)) && isSameTree(pr, qr))
	default:
		return false
	}
}()
	}
}()
}

func example_1() {
	var p Node = Node{Left: Node{Left: Leaf{}, Value: 2, Right: Leaf{}}, Value: 1, Right: Node{Left: Leaf{}, Value: 3, Right: Leaf{}}}
	_ = p
	var q Node = Node{Left: Node{Left: Leaf{}, Value: 2, Right: Leaf{}}, Value: 1, Right: Node{Left: Leaf{}, Value: 3, Right: Leaf{}}}
	_ = q
	expect((isSameTree(p, q) == true))
}

func example_2() {
	var p Node = Node{Left: Node{Left: Leaf{}, Value: 2, Right: Leaf{}}, Value: 1, Right: Leaf{}}
	_ = p
	var q Node = Node{Left: Leaf{}, Value: 1, Right: Node{Left: Leaf{}, Value: 2, Right: Leaf{}}}
	_ = q
	expect((isSameTree(p, q) == false))
}

func example_3() {
	var p Node = Node{Left: Node{Left: Leaf{}, Value: 2, Right: Leaf{}}, Value: 1, Right: Node{Left: Leaf{}, Value: 1, Right: Leaf{}}}
	_ = p
	var q Node = Node{Left: Node{Left: Leaf{}, Value: 1, Right: Leaf{}}, Value: 1, Right: Node{Left: Leaf{}, Value: 2, Right: Leaf{}}}
	_ = q
	expect((isSameTree(p, q) == false))
}

func both_empty() {
	expect((isSameTree(Leaf{}, Leaf{}) == true))
}

func main() {
	example_1()
	example_2()
	example_3()
	both_empty()
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

