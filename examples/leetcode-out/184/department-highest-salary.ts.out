// Generated by Mochi TypeScript compiler

let departments: Array<Department> = [{id: 1, name: "IT"}, {id: 2, name: "Sales"}]

let employees: Array<Employee> = [{id: 1, name: "Joe", salary: 70000, departmentId: 1}, {id: 2, name: "Henry", salary: 80000, departmentId: 2}, {id: 3, name: "Sam", salary: 60000, departmentId: 2}, {id: 4, name: "Max", salary: 90000, departmentId: 1}]

function departmentHighestSalary(employees: Array<Employee>, departments: Array<Department>) : Array<Result> {
	let maxSalary: Record<number, number> = {}
	for (const e of employees) {
		let current: number = 0
		if (Object.prototype.hasOwnProperty.call(maxSalary, String(e.departmentId))) {
			current = maxSalary[e.departmentId]
		}
		if ((e.salary > current)) {
			maxSalary[e.departmentId] = e.salary
		}
	}
	let results: Array<any> = []
	for (const d of departments) {
		if (Object.prototype.hasOwnProperty.call(maxSalary, String(d.id))) {
			let highest: number = maxSalary[d.id]
			for (const e of employees) {
				if (((e.departmentId == d.id) && (e.salary == highest))) {
					results = results.concat([{Department: d.name, Employee: e.name, Salary: e.salary}])
				}
			}
		}
	}
	return results
}

function highest_salary(): void {
	let expected: Array<Result> = [{Department: "IT", Employee: "Max", Salary: 90000}, {Department: "Sales", Employee: "Henry", Salary: 80000}]
	if (!((String(departmentHighestSalary(employees, departments)) == String(expected)))) { throw new Error('expect failed') }
}

function main(): void {
	type Department = {
		id: any;
		name: any;
	}
	type Employee = {
		id: any;
		name: any;
		salary: any;
		departmentId: any;
	}
	type Result = {
		Department: any;
		Employee: any;
		Salary: any;
	}
	highest_salary()
}
main()

