# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def newFinder() -> MedianFinder:
	return MedianFinder(values=[])

def addNum(mf: MedianFinder, num: int) -> MedianFinder:
	vals = mf.values
	i = 0
	while (i < len(vals)):
		if (vals[i] < num):
			i = (i + 1)
		else:
			break
	vals = ((vals[0:i] + [num]) + vals[i:len(vals)])
	return MedianFinder(values=vals)

def findMedian(mf: MedianFinder) -> float:
	n = len(mf.values)
	if ((n % 2) == 1):
		return (mf.values[(n // 2)])
	a = mf.values[((n // 2) - 1)]
	b = mf.values[(n // 2)]
	return ((((a) + (b))) / 2)

@dataclasses.dataclass
class MedianFinder:
	values: list[int]

def example():
	mf = newFinder()
	mf = addNum(mf, 1)
	mf = addNum(mf, 2)
	assert (findMedian(mf) == 1.5)
	mf = addNum(mf, 3)
	assert (findMedian(mf) == 2)

def single_value():
	mf = newFinder()
	mf = addNum(mf, 5)
	assert (findMedian(mf) == 5)

def even_count():
	mf = newFinder()
	mf = addNum(mf, 2)
	mf = addNum(mf, 4)
	mf = addNum(mf, 6)
	mf = addNum(mf, 8)
	assert (findMedian(mf) == 5)

def main():
	example()
	single_value()
	even_count()

if __name__ == "__main__":
	main()
