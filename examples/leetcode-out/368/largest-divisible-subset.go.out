package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"sort"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func largestDivisibleSubset(nums []int) []int {
	var n int = len(nums)
	if (n == 0) {
		return _cast[[]int]([]any{})
	}
	var sorted []int = func() []int {
	items := []int{}
	for _, x := range nums {
		items = append(items, x)
	}
	type pair struct { item int; key any }
	pairs := make([]pair, len(items))
	for idx, it := range items {
		x := it
		pairs[idx] = pair{item: it, key: x}
	}
	sort.Slice(pairs, func(i, j int) bool {
		a, b := pairs[i].key, pairs[j].key
		switch av := a.(type) {
		case int:
			switch bv := b.(type) {
			case int:
				return av < bv
			case float64:
				return float64(av) < bv
			}
		case float64:
			switch bv := b.(type) {
			case int:
				return av < float64(bv)
			case float64:
				return av < bv
			}
		case string:
			bs, _ := b.(string)
			return av < bs
		}
		return fmt.Sprint(a) < fmt.Sprint(b)
	})
	for idx, p := range pairs {
		items[idx] = p.item
	}
	_res := []int{}
	for _, x := range items {
		_res = append(_res, x)
	}
	return _res
}()
	var dp []int = []int{}
	var parent []int = []int{}
	var fill int = 0
	for (fill < n) {
		dp = append(append([]int{}, dp...), []int{1}...)
		parent = append(append([]int{}, parent...), []int{-1}...)
		fill = (fill + 1)
	}
	var maxLen int = 1
	var maxIdx int = 0
	var i int = 0
	for (i < n) {
		var j int = 0
		for (j < i) {
			if ((sorted[i] % sorted[j]) == 0) {
				var candidate int = (dp[j] + 1)
				if (candidate > dp[i]) {
					dp[i] = candidate
					parent[i] = j
				}
			}
			j = (j + 1)
		}
		if (dp[i] > maxLen) {
			maxLen = dp[i]
			maxIdx = i
		}
		i = (i + 1)
	}
	var subset []int = []int{}
	var k int = maxIdx
	for (k >= 0) {
		subset = append(append([]int{}, []int{sorted[k]}...), subset...)
		k = parent[k]
	}
	return subset
}

func example_1() {
	expect(_equal(largestDivisibleSubset([]int{1, 2, 3}), []int{1, 2}))
}

func example_2() {
	expect(_equal(largestDivisibleSubset([]int{1, 2, 4, 8}), []int{1, 2, 4, 8}))
}

func empty() {
	expect(_equal(largestDivisibleSubset([]int{}), []any{}))
}

func mixed_numbers() {
	expect(_equal(largestDivisibleSubset([]int{4, 8, 10, 240}), []int{4, 8, 240}))
}

func main() {
	example_1()
	example_2()
	empty()
	mixed_numbers()
}

func _cast[T any](v any) T {
    data, err := json.Marshal(v)
    if err != nil { panic(err) }
    var out T
    if err := json.Unmarshal(data, &out); err != nil { panic(err) }
    return out
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

