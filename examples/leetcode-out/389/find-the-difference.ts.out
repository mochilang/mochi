// Generated by Mochi TypeScript compiler

function findTheDifference(s: string, t: string) : string {
	let counts: Record<any, any> = {}
	let i: number = 0
	while ((i < s.length)) {
		let ch: string = s[i]
		if (Object.prototype.hasOwnProperty.call(counts, String(ch))) {
			counts[ch] = (counts[ch] + 1)
		} else {
			counts[ch] = 1
		}
		i = (i + 1)
	}
	i = 0
	while ((i < t.length)) {
		let ch: string = t[i]
		if (Object.prototype.hasOwnProperty.call(counts, String(ch))) {
			counts[ch] = (counts[ch] - 1)
		} else {
			counts[ch] = (-1)
		}
		i = (i + 1)
	}
	for (const key of Object.keys(counts)) {
		if (!_equal(counts[key], 0)) {
			return key
		}
	}
	return ""
}

function example_1(): void {
	if (!((findTheDifference("abcd", "abcde") == "e"))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((findTheDifference("", "y") == "y"))) { throw new Error('expect failed') }
}

function extra_repeated(): void {
	if (!((findTheDifference("aabb", "aabbb") == "b"))) { throw new Error('expect failed') }
}

function extra_at_beginning(): void {
	if (!((findTheDifference("ae", "aea") == "a"))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	extra_repeated()
	extra_at_beginning()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

