// Generated by Mochi TypeScript compiler

function isPalindromeList(values: Array<number>) : boolean {
	let n: number = values.length
	let i: number = 0
	let j: number = (n - 1)
	while ((i < j)) {
		if ((values[i] != values[j])) {
			return false
		}
		i = (i + 1)
		j = (j - 1)
	}
	return true
}

function example_1(): void {
	if (!((isPalindromeList([1, 2, 2, 1]) == true))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((isPalindromeList([1, 2]) == false))) { throw new Error('expect failed') }
}

function single_element(): void {
	if (!((isPalindromeList([7]) == true))) { throw new Error('expect failed') }
}

function empty_list(): void {
	if (!((isPalindromeList([]) == true))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	single_element()
	empty_list()
}
main()

