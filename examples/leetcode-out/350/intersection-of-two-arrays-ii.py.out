# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def intersect(nums1: list[int], nums2: list[int]) -> list[int]:
	counts = {}
	for n in nums1:
		if (n in counts):
			counts[n] = (counts[n] + 1)
		else:
			counts[n] = 1
	result = []
	for n in nums2:
		if (n in counts):
			c = counts[n]
			if (c > 0):
				result = (result + [n])
				counts[n] = (c - 1)
	return result

def example_1():
	assert (intersect([1, 2, 2, 1], [2, 2]) == [2, 2])

def example_2():
	res = intersect([4, 9, 5], [9, 4, 9, 8, 4])
	_sorted = [ x for x in sorted([ x for x in res ], key=lambda x: x) ]
	assert (_sorted == [4, 9])

def disjoint():
	assert (intersect([1, 2, 3], [4, 5]) == [])

def one_empty():
	assert (intersect([], [1, 2]) == [])

def main():
	example_1()
	example_2()
	disjoint()
	one_empty()

if __name__ == "__main__":
	main()
