# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def lengthOfLongestSubstringTwoDistinct(s: str) -> int:
	left = 0
	best = 0
	counts = {}
	distinct = 0
	right = 0
	while (right < len(s)):
		ch = s[right]
		if (ch in counts):
			if (counts[ch] == 0):
				distinct = (distinct + 1)
			counts[ch] = (counts[ch] + 1)
		else:
			counts[ch] = 1
			distinct = (distinct + 1)
		while (distinct > 2):
			leftCh = s[left]
			counts[leftCh] = (counts[leftCh] - 1)
			if (counts[leftCh] == 0):
				distinct = (distinct - 1)
			left = (left + 1)
		length = ((right - left) + 1)
		if (length > best):
			best = length
		right = (right + 1)
	return best

def example_1():
	assert (lengthOfLongestSubstringTwoDistinct("eceba") == 3)

def example_2():
	assert (lengthOfLongestSubstringTwoDistinct("ccaabbb") == 5)

def empty_string():
	assert (lengthOfLongestSubstringTwoDistinct("") == 0)

def single_char():
	assert (lengthOfLongestSubstringTwoDistinct("aaaa") == 4)

def three_distinct():
	assert (lengthOfLongestSubstringTwoDistinct("abcabc") == 2)

def main():
	example_1()
	example_2()
	empty_string()
	single_char()
	three_distinct()

if __name__ == "__main__":
	main()
