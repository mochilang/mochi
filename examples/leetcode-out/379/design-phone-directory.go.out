package main

import (
	"encoding/json"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

type PhoneDirectory struct {
	Available []int `json:"available"`
	Used map[int]bool `json:"used"`
}

type GetResult struct {
	Directory any `json:"directory"`
	Number int `json:"number"`
}

func newPhoneDirectory(maxNumbers int) PhoneDirectory {
	var nums []int = []int{}
	var i int = 0
	for (i < maxNumbers) {
		nums = append(append([]int{}, nums...), []int{i}...)
		i = (i + 1)
	}
	return PhoneDirectory{Available: nums, Used: _cast[map[int]bool](map[any]any{})}
}

func get(dir PhoneDirectory) GetResult {
	var avail []int = dir.Available
	if (len(avail) == 0) {
		return GetResult{Directory: dir, Number: (-1)}
	}
	var n int = avail[0]
	avail = avail[1:len(avail)]
	var used map[int]bool = dir.Used
	_ = used
	used[n] = true
	var newDir PhoneDirectory = PhoneDirectory{Available: avail, Used: used}
	_ = newDir
	return GetResult{Directory: newDir, Number: n}
}

func check(dir PhoneDirectory, number int) bool {
	_tmp0 := number
	_tmp1 := dir.Used
	_, _tmp2 := _tmp1[_tmp0]
	if _tmp2 {
		return !dir.Used[number]
	}
	return true
}

func release(dir PhoneDirectory, number int) PhoneDirectory {
	var used map[int]bool = dir.Used
	_tmp3 := number
	_tmp4 := used
	_, _tmp5 := _tmp4[_tmp3]
	if _tmp5 {
		if used[number] {
			used[number] = false
			var avail []int = dir.Available
			avail = append(append([]int{}, avail...), []int{number}...)
			return PhoneDirectory{Available: avail, Used: used}
		}
	}
	return dir
}

func example() {
	var dir PhoneDirectory = newPhoneDirectory(3)
	var r1 GetResult = get(dir)
	_ = r1
	dir = r1.Directory
	expect((r1.Number == 0))
	var r2 GetResult = get(dir)
	_ = r2
	dir = r2.Directory
	expect((r2.Number == 1))
	expect((check(dir, 2) == true))
	var r3 GetResult = get(dir)
	_ = r3
	dir = r3.Directory
	expect((r3.Number == 2))
	expect((check(dir, 2) == false))
	dir = release(dir, 2)
	expect((check(dir, 2) == true))
}

func release_twice() {
	var dir PhoneDirectory = newPhoneDirectory(1)
	var r1 GetResult = get(dir)
	_ = r1
	dir = r1.Directory
	expect((r1.Number == 0))
	dir = release(dir, 0)
	dir = release(dir, 0)
	var r2 GetResult = get(dir)
	_ = r2
	dir = r2.Directory
	expect((r2.Number == 0))
}

func get_empty() {
	var dir PhoneDirectory = newPhoneDirectory(0)
	var r GetResult = get(dir)
	_ = r
	expect((r.Number == (-1)))
}

func main() {
	example()
	release_twice()
	get_empty()
}

func _cast[T any](v any) T {
    data, err := json.Marshal(v)
    if err != nil { panic(err) }
    var out T
    if err := json.Unmarshal(data, &out); err != nil { panic(err) }
    return out
}

