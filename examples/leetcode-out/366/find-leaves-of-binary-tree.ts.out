// Generated by Mochi TypeScript compiler

let example1: Record<string, any> = Node(Node(Node(Leaf(), 4, Leaf()), 2, Node(Leaf(), 5, Leaf())), 1, Node(Leaf(), 3, Leaf()))

function Leaf() : Record<string, any> {
	return {"__name": "Leaf"}
}

function Node(left: Record<string, any>, value: number, right: Record<string, any>) : Record<string, any> {
	return {"__name": "Node", "left": left, "value": value, "right": right}
}

function isLeaf(t: Record<string, any>) : boolean {
	return _equal(t["__name"], "Leaf")
}

function left(t: Record<string, any>) : Record<string, any> {
	return t["left"]
}

function right(t: Record<string, any>) : Record<string, any> {
	return t["right"]
}

function value(t: Record<string, any>) : number {
	return t["value"]
}

function max(a: number, b: number) : number {
	if ((a > b)) {
		return a
	} else {
		return b
	}
}

function findLeaves(root: Record<string, any>) : Array<Array<number>> {
	let result: Array<any> = []
	function dfs(node: Record<string, any>) : number {
		if (isLeaf(node)) {
			return (-1)
		}
		let lh: any = dfs(left(node))
		let rh: any = dfs(right(node))
		let h: number = (max(lh, rh) + 1)
		while ((result.length <= h)) {
			result = result.concat([[]])
		}
		result[h] = (result[h] + [value(node)])
		return h
	}
	if (isLeaf(root)) {
		return []
	}
	dfs(root)
	return result
}

function example(): void {
	if (!(_equal(findLeaves(example1), [[4, 5, 3], [2], [1]]))) { throw new Error('expect failed') }
}

function single_node(): void {
	if (!(_equal(findLeaves(Node(Leaf(), 1, Leaf())), [[1]]))) { throw new Error('expect failed') }
}

function main(): void {
	example()
	single_node()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

