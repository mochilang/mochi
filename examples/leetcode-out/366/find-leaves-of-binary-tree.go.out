package main

import (
	"encoding/json"
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func Leaf() map[string]any {
	return _cast[map[string]any](map[string]string{"__name": "Leaf"})
}

func Node(left map[string]any, value int, right map[string]any) map[string]any {
	return map[string]any{"__name": "Node", "left": left, "value": value, "right": right}
}

func isLeaf(t map[string]any) bool {
	return _equal(t["__name"], "Leaf")
}

func left(t map[string]any) map[string]any {
	return t["left"]
}

func right(t map[string]any) map[string]any {
	return t["right"]
}

func value(t map[string]any) int {
	return _cast[int](t["value"])
}

func max(a int, b int) int {
	if (a > b) {
		return a
	} else {
		return b
	}
}

func findLeaves(root map[string]any) [][]int {
	var result [][]int = [][]int{}
	var dfs func(map[string]any) int
	dfs = func(node map[string]any) int {
		if isLeaf(node) {
			return -1
		}
		var lh int = dfs(left(node))
		var rh int = dfs(right(node))
		var h int = (max(lh, rh) + 1)
		for (len(result) <= h) {
			result = append(append([][]int{}, result...), [][]int{_cast[[]int]([]any{})}...)
		}
		result[h] = append(append([]int{}, result[h]...), []int{value(node)}...)
		return h
}
	if isLeaf(root) {
		return _cast[[][]int]([]any{})
	}
	dfs(root)
	return result
}

func example() {
	expect(_equal(findLeaves(example1), [][]int{[]int{4, 5, 3}, []int{2}, []int{1}}))
}

func single_node() {
	expect(_equal(findLeaves(Node(Leaf(), 1, Leaf())), [][]int{[]int{1}}))
}

var example1 map[string]any = Node(Node(Node(Leaf(), 4, Leaf()), 2, Node(Leaf(), 5, Leaf())), 1, Node(Leaf(), 3, Leaf()))
func main() {
	example()
	single_node()
}

func _cast[T any](v any) T {
    data, err := json.Marshal(v)
    if err != nil { panic(err) }
    var out T
    if err := json.Unmarshal(data, &out); err != nil { panic(err) }
    return out
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

