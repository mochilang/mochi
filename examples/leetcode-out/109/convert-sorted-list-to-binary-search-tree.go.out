package main

import (
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

type Tree interface { isTree() }
type Leaf struct {
}
func (Leaf) isTree() {}
type Node struct {
	Left any `json:"left"`
	Value int `json:"value"`
	Right any `json:"right"`
}
func (Node) isTree() {}

func sortedListToBST(nums []int) any {
	var build = func(lo int, hi int) any {
		if (lo >= hi) {
			return Leaf{}
		}
		var mid int = (((lo + hi)) / 2)
		return Node{Left: build(lo, mid), Value: nums[mid], Right: build((mid + 1), hi)}
}
	return build(0, len(nums))
}

func inorder(t any) []int {
	return func() any {
	_t := t
	switch _t {
	case Leaf:
		return []any{}
	case Node(l, v, r):
		return append(append([]any{}, append(append([]any{}, _toAnySlice(inorder(l))...), []any{v}...)...), _toAnySlice(inorder(r))...)
	}
	return nil
}()
}

func example() {
	var nums []int = []int{-10, -3, 0, 5, 9}
	var tree any = sortedListToBST(nums)
	expect(_equal(inorder(tree), nums))
}

func empty() {
	expect(_equal(inorder(sortedListToBST([]int{})), []any{}))
}

func single() {
	expect(_equal(inorder(sortedListToBST([]int{1})), []int{1}))
}

func main() {
	example()
	empty()
	single()
}

func _equal(a, b any) bool {
    return reflect.DeepEqual(a, b)
}

func _toAnySlice[T any](s []T) []any {
    out := make([]any, len(s))
    for i, v := range s { out[i] = v }
    return out
}

