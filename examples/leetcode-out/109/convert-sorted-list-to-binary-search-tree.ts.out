// Generated by Mochi TypeScript compiler

function sortedListToBST(nums: Array<number>) : any {
	function build(lo: number, hi: number) : any {
		if ((lo >= hi)) {
			return {}
		}
		let mid: number = Math.trunc(((lo + hi)) / 2)
		return {left: build(lo, mid), value: nums[mid], right: build((mid + 1), hi)}
	}
	return build(0, nums.length)
}

function inorder(t: any) : Array<number> {
	return (() => {
	const _t = t;
	switch (_t) {
	case Leaf:
		return [];
	case Node(l, v, r):
		return inorder(l).concat([v]).concat(inorder(r));
	}
	return undefined;
})()
}

function example(): void {
	let nums: Array<number> = [(-10), (-3), 0, 5, 9]
	let tree: any = sortedListToBST(nums)
	if (!(_equal(inorder(tree), nums))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!(_equal(inorder(sortedListToBST([])), []))) { throw new Error('expect failed') }
}

function single(): void {
	if (!(_equal(inorder(sortedListToBST([1])), [1]))) { throw new Error('expect failed') }
}

function main(): void {
	type Tree = {
	}
	example()
	empty()
	single()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

