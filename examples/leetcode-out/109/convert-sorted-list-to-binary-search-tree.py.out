# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def sortedListToBST(nums: list[int]) -> Tree:
	def build(lo: int, hi: int) -> typing.Any:
		if (lo >= hi):
			return Leaf()
		mid = (((lo + hi)) // 2)
		return Node(left=build(lo, mid), value=nums[mid], right=build((mid + 1), hi))
	return build(0, len(nums))

def inorder(t: Tree) -> list[int]:
	return (lambda _t=t: [] if isinstance(_t, Leaf) else (lambda l, v, r: ((inorder(l) + [v]) + inorder(r)))(_t.left, _t.value, _t.right) if isinstance(_t, Node) else None)()

class Tree:
	pass
@dataclasses.dataclass
class Leaf(Tree):
	pass
@dataclasses.dataclass
class Node(Tree):
	left: typing.Any
	value: int
	right: typing.Any

def example():
	nums = [(-10), (-3), 0, 5, 9]
	tree = sortedListToBST(nums)
	assert (inorder(tree) == nums)

def empty():
	assert (inorder(sortedListToBST([])) == [])

def single():
	assert (inorder(sortedListToBST([1])) == [1])

def main():
	example()
	empty()
	single()

if __name__ == "__main__":
	main()
