# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def fourSum(nums: list[int], target: int) -> list[list[int]]:
	_sorted = [ n for n in sorted([ n for n in nums ], key=lambda n: n) ]
	n = len(_sorted)
	result = []
	for i in range(0, n):
		if ((i > 0) and (_sorted[i] == _sorted[(i - 1)])):
			continue
		for j in range((i + 1), n):
			if ((j > (i + 1)) and (_sorted[j] == _sorted[(j - 1)])):
				continue
			left = (j + 1)
			right = (n - 1)
			while (left < right):
				sum = (((_sorted[i] + _sorted[j]) + _sorted[left]) + _sorted[right])
				if (sum == target):
					result = (result + [[_sorted[i], _sorted[j], _sorted[left], _sorted[right]]])
					left = (left + 1)
					right = (right - 1)
					while ((left < right) and (_sorted[left] == _sorted[(left - 1)])):
						left = (left + 1)
					while ((left < right) and (_sorted[right] == _sorted[(right + 1)])):
						right = (right - 1)
				elif (sum < target):
					left = (left + 1)
				else:
					right = (right - 1)
	return result

def example_1():
	assert (fourSum([1, 0, (-1), 0, (-2), 2], 0) == [[(-2), (-1), 1, 2], [(-2), 0, 0, 2], [(-1), 0, 0, 1]])

def example_2():
	assert (fourSum([2, 2, 2, 2, 2], 8) == [[2, 2, 2, 2]])

def main():
	example_1()
	example_2()

if __name__ == "__main__":
	main()
