# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def gameOfLife(board: list[list[int]]) -> list[list[int]]:
	m = len(board)
	if (m == 0):
		return board
	n = len(board[0])
	result = []
	i = 0
	while (i < m):
		row = []
		j = 0
		while (j < n):
			live = 0
			di = (-1)
			while (di <= 1):
				dj = (-1)
				while (dj <= 1):
					if (not (((di == 0) and (dj == 0)))):
						ni = (i + di)
						nj = (j + dj)
						if ((((ni >= 0) and (ni < m)) and (nj >= 0)) and (nj < n)):
							if (board[ni][nj] == 1):
								live = (live + 1)
					dj = (dj + 1)
				di = (di + 1)
			cell = board[i][j]
			next = cell
			if (cell == 1):
				if ((live < 2) or (live > 3)):
					next = 0
				else:
					next = 1
			else:
				if (live == 3):
					next = 1
				else:
					next = 0
			row = (row + [next])
			j = (j + 1)
		result = (result + [row])
		i = (i + 1)
	return result

def example_1():
	board = [[0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0]]
	assert (gameOfLife(board) == [[0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0]])

def example_2():
	board = [[1, 1], [1, 0]]
	assert (gameOfLife(board) == [[1, 1], [1, 1]])

def empty_board():
	board = []
	assert (gameOfLife(board) == [])

def single_dead_cell():
	board = [[0]]
	assert (gameOfLife(board) == [[0]])

def main():
	example_1()
	example_2()
	empty_board()
	single_dead_cell()

if __name__ == "__main__":
	main()
