package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

type Reader struct {
	Data string `json:"data"`
	Index int `json:"index"`
	Buffer string `json:"buffer"`
}

type Read4Result struct {
	Reader any `json:"reader"`
	Chunk string `json:"chunk"`
}

type ReadResult struct {
	Reader any `json:"reader"`
	Data string `json:"data"`
	Count int `json:"count"`
}

func newReader(s string) Reader {
	return Reader{Data: s, Index: 0, Buffer: ""}
}

func read4(r Reader) Read4Result {
	var i int = 0
	var chunk string = ""
	var idx int = r.Index
	for ((i < 4) && (idx < len(r.Data))) {
		chunk = chunk + _indexString(r.Data, idx)
		idx = (idx + 1)
		i = (i + 1)
	}
	var newReader Reader = Reader{Data: r.Data, Index: idx, Buffer: r.Buffer}
	_ = newReader
	return Read4Result{Reader: newReader, Chunk: chunk}
}

func read(reader Reader, n int) ReadResult {
	var r Reader = reader
	var output string = ""
	var total int = 0
	for ((total < n) && (len(r.Buffer) > 0)) {
		output = output + _indexString(r.Buffer, 0)
		r = Reader{Data: r.Data, Index: r.Index, Buffer: string([]rune(r.Buffer)[1:len(r.Buffer)])}
		total = (total + 1)
	}
	for (total < n) {
		var r4 Read4Result = read4(r)
		_ = r4
		r = r4.Reader
		var chunk string = r4.Chunk
		if (len(chunk) == 0) {
			break
		}
		var i int = 0
		for ((i < len(chunk)) && (total < n)) {
			output = output + _indexString(chunk, i)
			i = (i + 1)
			total = (total + 1)
		}
		r = Reader{Data: r.Data, Index: r.Index, Buffer: string([]rune(chunk)[i:len(chunk)])}
	}
	return ReadResult{Reader: r, Data: output, Count: total}
}

func multiple_calls() {
	var r Reader = newReader("abc")
	var r1 ReadResult = read(r, 1)
	_ = r1
	expect((r1.Data == "a"))
	r = r1.Reader
	var r2 ReadResult = read(r, 2)
	_ = r2
	expect((r2.Data == "bc"))
}

func leftover_handling() {
	var r Reader = newReader("abcde")
	var r1 ReadResult = read(r, 2)
	_ = r1
	expect((r1.Data == "ab"))
	r = r1.Reader
	var r2 ReadResult = read(r, 3)
	_ = r2
	expect((r2.Data == "cde"))
}

func request_past_end() {
	var r Reader = newReader("abcd")
	var r1 ReadResult = read(r, 6)
	_ = r1
	expect((r1.Data == "abcd"))
	expect((r1.Count == 4))
}

func main() {
	multiple_calls()
	leftover_handling()
	request_past_end()
}

func _indexString(s string, i int) string {
    runes := []rune(s)
    if i < 0 {
        i += len(runes)
    }
    if i < 0 || i >= len(runes) {
        panic("index out of range")
    }
    return string(runes[i])
}

