package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func toList(s string) []string {
	var out []string = []string{}
	_ = out
	for i := 0; i < len(s); i++ {
		out = append(append([]string{}, out...), []string{_indexString(s, i)}...)
	}
	return out
}

func fromList(arr []string) string {
	var out string = ""
	_ = out
	for _, ch := range arr {
		out = out + ch
	}
	return out
}

func reverseWords(chars []string) []string {
	var arr []string = chars
	_ = arr
	var left int = 0
	_ = left
	var right int = (len(arr) - 1)
	_ = right
	for (left < right) {
		var temp string = arr[left]
		arr[left] = arr[right]
		arr[right] = temp
		left = (left + 1)
		right = (right - 1)
	}
	var start int = 0
	_ = start
	var i int = 0
	_ = i
	var n int = len(arr)
	for (i <= n) {
		if (i == n) {
			var l int = start
			_ = l
			var r int = (i - 1)
			_ = r
			for (l < r) {
				var t string = arr[l]
				arr[l] = arr[r]
				arr[r] = t
				l = (l + 1)
				r = (r - 1)
			}
		} else 		if (arr[i] == " ") {
			var l int = start
			_ = l
			var r int = (i - 1)
			_ = r
			for (l < r) {
				var t string = arr[l]
				arr[l] = arr[r]
				arr[r] = t
				l = (l + 1)
				r = (r - 1)
			}
			start = (i + 1)
		}
		i = (i + 1)
	}
	return arr
}

func example_1() {
	var input []string = toList("the sky is blue")
	var result []string = reverseWords(input)
	expect((fromList(result) == "blue is sky the"))
}

func example_2() {
	var input []string = toList("hello world")
	var result []string = reverseWords(input)
	expect((fromList(result) == "world hello"))
}

func single_word() {
	var input []string = toList("hello")
	var result []string = reverseWords(input)
	expect((fromList(result) == "hello"))
}

func trailing_space() {
	var input []string = toList("a b ")
	var result []string = reverseWords(input)
	expect((fromList(result) == " b a"))
}

func main() {
	example_1()
	example_2()
	single_word()
	trailing_space()
}

func _indexString(s string, i int) string {
    runes := []rune(s)
    if i < 0 {
        i += len(runes)
    }
    if i < 0 || i >= len(runes) {
        panic("index out of range")
    }
    return string(runes[i])
}

