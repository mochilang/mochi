// Generated by Mochi TypeScript compiler

function toList(s: string) : Array<string> {
	let out: Array<any> = []
	for (let i: number = 0; i < s.length; i++) {
		out = out.concat([s[i]])
	}
	return out
}

function fromList(arr: Array<string>) : string {
	let out: string = ""
	for (const ch of arr) {
		out = out + ch
	}
	return out
}

function reverseWords(chars: Array<string>) : Array<string> {
	let arr: Array<string> = chars
	let left: number = 0
	let right: number = (arr.length - 1)
	while ((left < right)) {
		let temp: string = arr[left]
		arr[left] = arr[right]
		arr[right] = temp
		left = (left + 1)
		right = (right - 1)
	}
	let start: number = 0
	let i: number = 0
	let n: number = arr.length
	while ((i <= n)) {
		if ((i == n)) {
			let l: number = start
			let r: number = (i - 1)
			while ((l < r)) {
				let t: string = arr[l]
				arr[l] = arr[r]
				arr[r] = t
				l = (l + 1)
				r = (r - 1)
			}
		} else 		if ((arr[i] == " ")) {
			let l: number = start
			let r: number = (i - 1)
			while ((l < r)) {
				let t: string = arr[l]
				arr[l] = arr[r]
				arr[r] = t
				l = (l + 1)
				r = (r - 1)
			}
			start = (i + 1)
		}
		i = (i + 1)
	}
	return arr
}

function example_1(): void {
	let input: Array<string> = toList("the sky is blue")
	let result: Array<string> = reverseWords(input)
	if (!((fromList(result) == "blue is sky the"))) { throw new Error('expect failed') }
}

function example_2(): void {
	let input: Array<string> = toList("hello world")
	let result: Array<string> = reverseWords(input)
	if (!((fromList(result) == "world hello"))) { throw new Error('expect failed') }
}

function single_word(): void {
	let input: Array<string> = toList("hello")
	let result: Array<string> = reverseWords(input)
	if (!((fromList(result) == "hello"))) { throw new Error('expect failed') }
}

function trailing_space(): void {
	let input: Array<string> = toList("a b ")
	let result: Array<string> = reverseWords(input)
	if (!((fromList(result) == " b a"))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	single_word()
	trailing_space()
}
main()

