// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

vector<int> mergeKLists(vector<vector<int>> lists) {
  auto k = lists.size();
  vector<int> indices = vector<int>{};
  auto i = 0;
  while (i < k) {
    indices = ([&](vector<int> a, vector<int> b) {
      a.insert(a.end(), b.begin(), b.end());
      return a;
    })(indices, vector<int>{0});
    i = i + 1;
  }
  vector<int> result = vector<int>{};
  while (true) {
    auto best = 0;
    auto bestList = -1;
    auto found = false;
    auto j = 0;
    while (j < k) {
      auto idx = indices[j];
      if (idx < lists[j].size()) {
        auto val = lists[j][idx];
        if (!found || val < best) {
          best = val;
          bestList = j;
          found = true;
        }
      }
      j = j + 1;
    }
    if (!found) {
      break;
    }
    result = ([&](vector<int> a, vector<int> b) {
      a.insert(a.end(), b.begin(), b.end());
      return a;
    })(result, vector<int>{best});
    indices[bestList] = indices[bestList] + 1;
  }
  return result;
}

int main() {
  auto test_example_1 = [&]() {
    if (!(mergeKLists(vector<vector<int>>{
              vector<int>{1, 4, 5}, vector<int>{1, 3, 4}, vector<int>{2, 6}}) ==
          vector<int>{1, 1, 2, 3, 4, 4, 5, 6})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_1();
  auto test_example_2 = [&]() {
    if (!(mergeKLists(vector<int>{}) == vector<int>{})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_2();
  auto test_example_3 = [&]() {
    if (!(mergeKLists(vector<vector<int>>{vector<int>{}}) == vector<int>{})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_3();
  return 0;
}
