// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

string convert(string s, int numRows) {
  if (numRows <= 1 || numRows >= s.size()) {
    return s;
  }
  vector<string> rows = vector<string>{};
  auto i = 0;
  while (i < numRows) {
    rows = ([&](vector<string> a, vector<string> b) {
      a.insert(a.end(), b.begin(), b.end());
      return a;
    })(rows, vector<string>{string("")});
    i = i + 1;
  }
  auto curr = 0;
  auto step = 1;
  for (auto ch : s) {
    rows[curr] = rows[curr] + to_string(ch);
    if (curr == 0) {
      step = 1;
    } else if (curr == numRows - 1) {
      step = -1;
    }
    curr = curr + step;
  }
  string result = string("");
  for (const string &row : rows) {
    result = result + to_string(row);
  }
  return result;
}

int main() {
  auto test_example_1 = [&]() {
    if (!(convert(string("PAYPALISHIRING"), 3) == string("PAHNAPLSIIGYIR"))) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_1();
  auto test_example_2 = [&]() {
    if (!(convert(string("PAYPALISHIRING"), 4) == string("PINALSIGYAHRPI"))) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_2();
  auto test_single_row = [&]() {
    if (!(convert(string("A"), 1) == string("A"))) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_single_row();
  return 0;
}
