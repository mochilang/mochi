// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

string longestCommonPrefix(vector<string> strs) {
  if (strs.size() == 0) {
    return string("");
  }
  auto prefix = strs[0];
  for (int i = 1; i < strs.size(); i++) {
    auto j = 0;
    auto current = strs[i];
    while (j < prefix.size() && j < current.size()) {
      if (prefix[j] != current[j]) {
        break;
      }
      j = j + 1;
    }
    prefix = prefix.substr(0, j - 0);
    if (prefix == string("")) {
      break;
    }
  }
  return prefix;
}

int main() {
  auto test_example_1 = [&]() {
    if (!(longestCommonPrefix(vector<string>{string("flower"), string("flow"),
                                             string("flight")}) ==
          string("fl"))) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_1();
  auto test_example_2 = [&]() {
    if (!(longestCommonPrefix(vector<string>{string("dog"), string("racecar"),
                                             string("car")}) == string(""))) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_2();
  auto test_single_string = [&]() {
    if (!(longestCommonPrefix(vector<string>{string("single")}) ==
          string("single"))) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_single_string();
  auto test_no_common_prefix = [&]() {
    if (!(longestCommonPrefix(vector<string>{string("a"), string("b"),
                                             string("c")}) == string(""))) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_no_common_prefix();
  return 0;
}
