// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

vector<int> mergeTwoLists(vector<int> l1, vector<int> l2) {
  auto i = 0;
  auto j = 0;
  auto result = vector<int>{};
  while (i < l1.size() && j < l2.size()) {
    if (l1[i] <= l2[j]) {
      result = ([&](vector<int> a, vector<int> b) {
        a.insert(a.end(), b.begin(), b.end());
        return a;
      })(result, vector<int>{l1[i]});
      i = i + 1;
    } else {
      result = ([&](vector<int> a, vector<int> b) {
        a.insert(a.end(), b.begin(), b.end());
        return a;
      })(result, vector<int>{l2[j]});
      j = j + 1;
    }
  }
  while (i < l1.size()) {
    result = ([&](vector<int> a, vector<int> b) {
      a.insert(a.end(), b.begin(), b.end());
      return a;
    })(result, vector<int>{l1[i]});
    i = i + 1;
  }
  while (j < l2.size()) {
    result = ([&](vector<int> a, vector<int> b) {
      a.insert(a.end(), b.begin(), b.end());
      return a;
    })(result, vector<int>{l2[j]});
    j = j + 1;
  }
  return result;
}

int main() {
  auto test_example_1 = [&]() {
    if (!(mergeTwoLists(vector<int>{1, 2, 4}, vector<int>{1, 3, 4}) ==
          vector<int>{1, 1, 2, 3, 4, 4})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_1();
  auto test_example_2 = [&]() {
    if (!(mergeTwoLists(vector<int>{}, vector<int>{}) == vector<int>{})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_2();
  auto test_example_3 = [&]() {
    if (!(mergeTwoLists(vector<int>{}, vector<int>{0}) == vector<int>{0})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_3();
  auto test_different_lengths = [&]() {
    if (!(mergeTwoLists(vector<int>{1, 5, 7}, vector<int>{2, 3, 4, 6, 8}) ==
          vector<int>{1, 2, 3, 4, 5, 6, 7, 8})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_different_lengths();
  auto test_one_list_empty = [&]() {
    if (!(mergeTwoLists(vector<int>{1, 2, 3}, vector<int>{}) ==
          vector<int>{1, 2, 3})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_one_list_empty();
  return 0;
}
