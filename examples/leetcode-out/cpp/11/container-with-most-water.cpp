// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

int maxArea(vector<int> height) {
  auto left = 0;
  auto right = height.size() - 1;
  auto maxArea = 0;
  while (left < right) {
    auto width = right - left;
    auto h = 0;
    if (height[left] < height[right]) {
      h = height[left];
    } else {
      h = height[right];
    }
    auto area = h * width;
    if (area > maxArea) {
      maxArea = area;
    }
    if (height[left] < height[right]) {
      left = left + 1;
    } else {
      right = right - 1;
    }
  }
  return maxArea;
}

int main() {
  auto test_example_1 = [&]() {
    if (!(maxArea(vector<int>{1, 8, 6, 2, 5, 4, 8, 3, 7}) == 49)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_1();
  auto test_example_2 = [&]() {
    if (!(maxArea(vector<int>{1, 1}) == 1)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_2();
  auto test_decreasing_heights = [&]() {
    if (!(maxArea(vector<int>{4, 3, 2, 1, 4}) == 16)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_decreasing_heights();
  auto test_short_array = [&]() {
    if (!(maxArea(vector<int>{1, 2, 1}) == 2)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_short_array();
  return 0;
}
