// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

vector<int> swapPairs(vector<int> nums) {
  auto i = 0;
  auto result = vector<int>{};
  while (i < nums.size()) {
    if (i + 1 < nums.size()) {
      result = ([&](vector<int> a, vector<int> b) {
        a.insert(a.end(), b.begin(), b.end());
        return a;
      })(result, vector<int>{nums[i + 1], nums[i]});
    } else {
      result = ([&](vector<int> a, vector<int> b) {
        a.insert(a.end(), b.begin(), b.end());
        return a;
      })(result, vector<int>{nums[i]});
    }
    i = i + 2;
  }
  return result;
}

int main() {
  auto test_example_1 = [&]() {
    if (!(swapPairs(vector<int>{1, 2, 3, 4}) == vector<int>{2, 1, 4, 3})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_1();
  auto test_example_2 = [&]() {
    if (!(swapPairs(vector<int>{}) == vector<int>{})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_2();
  auto test_example_3 = [&]() {
    if (!(swapPairs(vector<int>{1}) == vector<int>{1})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_3();
  auto test_odd_length = [&]() {
    if (!(swapPairs(vector<int>{1, 2, 3}) == vector<int>{2, 1, 3})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_odd_length();
  return 0;
}
