// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

vector<int> addTwoNumbers(vector<int> l1, vector<int> l2) {
  auto i = 0;
  auto j = 0;
  auto carry = 0;
  vector<int> result = vector<int>{};
  while (i < l1.size() || j < l2.size() || carry > 0) {
    auto x = 0;
    if (i < l1.size()) {
      x = l1[i];
      i = i + 1;
    }
    auto y = 0;
    if (j < l2.size()) {
      y = l2[j];
      j = j + 1;
    }
    auto sum = x + y + carry;
    auto digit = sum % 10;
    carry = sum / 10;
    result = ([&](vector<int> a, vector<int> b) {
      a.insert(a.end(), b.begin(), b.end());
      return a;
    })(result, vector<int>{digit});
  }
  return result;
}

int main() {
  auto test_example_1 = [&]() {
    if (!(addTwoNumbers(vector<int>{2, 4, 3}, vector<int>{5, 6, 4}) ==
          vector<int>{7, 0, 8})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_1();
  auto test_example_2 = [&]() {
    if (!(addTwoNumbers(vector<int>{0}, vector<int>{0}) == vector<int>{0})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_2();
  auto test_example_3 = [&]() {
    if (!(addTwoNumbers(vector<int>{9, 9, 9, 9, 9, 9, 9},
                        vector<int>{9, 9, 9, 9}) ==
          vector<int>{8, 9, 9, 9, 0, 0, 0, 1})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_3();
  return 0;
}
