// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

int removeElement(vector<int> nums, int val) {
  auto k = 0;
  auto i = 0;
  while (i < nums.size()) {
    if (nums[i] != val) {
      nums[k] = nums[i];
      k = k + 1;
    }
    i = i + 1;
  }
  return k;
}

int main() {
  auto test_example_1 = [&]() {
    auto nums = vector<int>{3, 2, 2, 3};
    auto k = removeElement(nums, 3);
    if (!(k == 2)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
    if (!(nums.substr(0, k - 0) == vector<int>{2, 2})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_1();
  auto test_example_2 = [&]() {
    auto nums = vector<int>{0, 1, 2, 2, 3, 0, 4, 2};
    auto k = removeElement(nums, 2);
    if (!(k == 5)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
    if (!(nums.substr(0, k - 0) == vector<int>{0, 1, 3, 0, 4})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_2();
  auto test_no_removal = [&]() {
    auto nums = vector<int>{1, 2, 3};
    auto k = removeElement(nums, 4);
    if (!(k == 3)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
    if (!(nums.substr(0, k - 0) == vector<int>{1, 2, 3})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_no_removal();
  return 0;
}
