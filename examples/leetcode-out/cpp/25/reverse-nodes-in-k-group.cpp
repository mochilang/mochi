// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

vector<int> reverseKGroup(vector<int> nums, int k) {
  auto n = nums.size();
  if (k <= 1) {
    return nums;
  }
  auto result = vector<int>{};
  auto i = 0;
  while (i < n) {
    auto end = i + k;
    if (end <= n) {
      auto j = end - 1;
      while (j >= i) {
        result = ([&](vector<int> a, vector<int> b) {
          a.insert(a.end(), b.begin(), b.end());
          return a;
        })(result, vector<int>{nums[j]});
        j = j - 1;
      }
    } else {
      auto j = i;
      while (j < n) {
        result = ([&](vector<int> a, vector<int> b) {
          a.insert(a.end(), b.begin(), b.end());
          return a;
        })(result, vector<int>{nums[j]});
        j = j + 1;
      }
    }
    i = i + k;
  }
  return result;
}

int main() {
  auto test_example_1 = [&]() {
    if (!(reverseKGroup(vector<int>{1, 2, 3, 4, 5}, 2) ==
          vector<int>{2, 1, 4, 3, 5})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_1();
  auto test_example_2 = [&]() {
    if (!(reverseKGroup(vector<int>{1, 2, 3, 4, 5}, 3) ==
          vector<int>{3, 2, 1, 4, 5})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_2();
  auto test_k_equals_list_length = [&]() {
    if (!(reverseKGroup(vector<int>{1, 2, 3, 4}, 4) ==
          vector<int>{4, 3, 2, 1})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_k_equals_list_length();
  auto test_k_greater_than_length = [&]() {
    if (!(reverseKGroup(vector<int>{1, 2, 3}, 5) == vector<int>{1, 2, 3})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_k_greater_than_length();
  auto test_k_is_one = [&]() {
    if (!(reverseKGroup(vector<int>{1, 2, 3}, 1) == vector<int>{1, 2, 3})) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_k_is_one();
  return 0;
}
