// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

string _indexString(const string &s, int i) {
  int n = s.size();
  if (i < 0)
    i += n;
  if (i < 0 || i >= n)
    throw std::out_of_range("index out of range");
  return string(1, s[i]);
}

bool isPalindrome(int x) {
  if (x < 0) {
    return false;
  }
  string s = to_string(x);
  auto n = s.size();
  for (int i = 0; i < n / 2; i++) {
    if (_indexString(s, i) != _indexString(s, n - 1 - i)) {
      return false;
    }
  }
  return true;
}

int main() {
  auto test_example_1 = [&]() {
    if (!(isPalindrome(121) == true)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_1();
  auto test_example_2 = [&]() {
    if (!(isPalindrome(-121) == false)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_2();
  auto test_example_3 = [&]() {
    if (!(isPalindrome(10) == false)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_3();
  auto test_zero = [&]() {
    if (!(isPalindrome(0) == true)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_zero();
  return 0;
}
