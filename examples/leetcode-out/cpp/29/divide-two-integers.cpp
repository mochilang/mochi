// Generated by Mochi C++ compiler
#include <bits/stdc++.h>
using namespace std;

int divide(int dividend, int divisor) {
  if (dividend == (-2147483647 - 1) && divisor == (-1)) {
    return 2147483647;
  }
  auto negative = false;
  if (dividend < 0) {
    negative = !negative;
    dividend = -dividend;
  }
  if (divisor < 0) {
    negative = !negative;
    divisor = -divisor;
  }
  auto quotient = 0;
  while (dividend >= divisor) {
    auto temp = divisor;
    auto multiple = 1;
    while (dividend >= temp + temp) {
      temp = temp + temp;
      multiple = multiple + multiple;
    }
    dividend = dividend - temp;
    quotient = quotient + multiple;
  }
  if (negative) {
    quotient = -quotient;
  }
  if (quotient > 2147483647) {
    return 2147483647;
  }
  if (quotient < (-2147483647 - 1)) {
    return -2147483648;
  }
  return quotient;
}

int main() {
  auto test_example_1 = [&]() {
    if (!(divide(10, 3) == 3)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_1();
  auto test_example_2 = [&]() {
    if (!(divide(7, -3) == (-2))) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_example_2();
  auto test_overflow = [&]() {
    if (!(divide(-2147483648, -1) == 2147483647)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_overflow();
  auto test_divide_by_1 = [&]() {
    if (!(divide(12345, 1) == 12345)) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_divide_by_1();
  auto test_negative_result = [&]() {
    if (!(divide(-15, 2) == (-7))) {
      std::cerr << "expect failed\n";
      exit(1);
    }
  };
  test_negative_result();
  return 0;
}
