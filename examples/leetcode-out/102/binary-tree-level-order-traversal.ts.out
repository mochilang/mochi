// Generated by Mochi TypeScript compiler

function levelOrder(root: any) : Array<Array<number>> {
	if ((() => {
	const _t = root;
	switch (_t) {
	case Leaf:
		return true;
	default:
		return false;
	}
	return undefined;
})()) {
		return []
	}
	let result: Array<any> = []
	let queue: Array<any> = [root]
	while ((queue.length > 0)) {
		let level: Array<any> = []
		let next: Array<any> = []
		for (const node of queue) {
			if ((() => {
	const _t = node;
	switch (_t) {
	case Leaf:
		return false;
	default:
		return true;
	}
	return undefined;
})()) {
				level = level.concat([node.value])
				if ((() => {
	const _t = node.left;
	switch (_t) {
	case Leaf:
		return false;
	default:
		return true;
	}
	return undefined;
})()) {
					next = next.concat([node.left])
				}
				if ((() => {
	const _t = node.right;
	switch (_t) {
	case Leaf:
		return false;
	default:
		return true;
	}
	return undefined;
})()) {
					next = next.concat([node.right])
				}
			}
		}
		result = result.concat([level])
		queue = next
	}
	return result
}

function example_1(): void {
	let tree: Node = {left: {left: {}, value: 9, right: {}}, value: 3, right: {left: {left: {}, value: 15, right: {}}, value: 20, right: {left: {}, value: 7, right: {}}}}
	if (!(_equal(levelOrder(tree), [[3], [9, 20], [15, 7]]))) { throw new Error('expect failed') }
}

function single_node(): void {
	if (!(_equal(levelOrder({left: {}, value: 1, right: {}}), [[1]]))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!(_equal(levelOrder({}), []))) { throw new Error('expect failed') }
}

function main(): void {
	type Tree = {
	}
	example_1()
	single_node()
	empty()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

