# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def min(a: int, b: int) -> int:
	if (a < b):
		return a
	return b

def minCost(costs: list[list[int]]) -> int:
	n = len(costs)
	if (n == 0):
		return 0
	dpR = costs[0][0]
	dpG = costs[0][1]
	dpB = costs[0][2]
	i = 1
	while (i < n):
		r = (costs[i][0] + min(dpG, dpB))
		g = (costs[i][1] + min(dpR, dpB))
		b = (costs[i][2] + min(dpR, dpG))
		dpR = r
		dpG = g
		dpB = b
		i = (i + 1)
	return min(dpR, min(dpG, dpB))

def example_1():
	assert (minCost([[17, 2, 17], [16, 16, 5], [14, 3, 19]]) == 10)

def example_2():
	assert (minCost([[7, 6, 2]]) == 2)

def main():
	example_1()
	example_2()

if __name__ == "__main__":
	main()
