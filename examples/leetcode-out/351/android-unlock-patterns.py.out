# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def numberOfPatterns(m: int, n: int) -> int:
	jump = []
	i = 0
	while (i < 10):
		row = []
		j = 0
		while (j < 10):
			row = (row + [0])
			j = (j + 1)
		jump = (jump + [row])
		i = (i + 1)
	jump[1][3] = 2
	jump[3][1] = 2
	jump[1][7] = 4
	jump[7][1] = 4
	jump[3][9] = 6
	jump[9][3] = 6
	jump[7][9] = 8
	jump[9][7] = 8
	jump[1][9] = 5
	jump[9][1] = 5
	jump[3][7] = 5
	jump[7][3] = 5
	jump[4][6] = 5
	jump[6][4] = 5
	jump[2][8] = 5
	jump[8][2] = 5
	visited = []
	i = 0
	while (i < 10):
		visited = (visited + [False])
		i = (i + 1)
	def dfs(num: int, remain: int) -> int:
		nonlocal visited
		if (remain == 0):
			return 1
		visited[num] = True
		count = 0
		for next in range(1, 10):
			if (not visited[next]):
				mid = jump[num][next]
				if ((mid == 0) or visited[mid]):
					count = (count + dfs(next, (remain - 1)))
		visited[num] = False
		return count
	total = 0
	_len = m
	while (_len <= n):
		for start in range(1, 10):
			total = (total + dfs(start, (_len - 1)))
		_len = (_len + 1)
	return total

def example_1():
	assert (numberOfPatterns(1, 1) == 9)

def example_2():
	assert (numberOfPatterns(1, 2) == 65)

def example_3():
	assert (numberOfPatterns(2, 2) == 56)

def main():
	example_1()
	example_2()
	example_3()

if __name__ == "__main__":
	main()
