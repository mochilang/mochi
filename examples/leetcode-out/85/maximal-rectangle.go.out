package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func maximalRectangle(matrix [][]string) int {
	if (len(matrix) == 0) {
		return 0
	}
	var rows int = len(matrix)
	var cols int = len(matrix[0])
	var heights []int = []int{}
	_ = heights
	var init int = 0
	_ = init
	for (init < cols) {
		heights = append(append([]int{}, heights...), []int{0}...)
		init = (init + 1)
	}
	var best int = 0
	_ = best
	var largestRectangleArea = func(hs []int) int {
		var stack []int = []int{}
		_ = stack
		var i int = 0
		_ = i
		var n int = len(hs)
		var maxArea int = 0
		_ = maxArea
		for (i <= n) {
			var curr int = 0
			_ = curr
			if (i < n) {
				curr = hs[i]
			}
			for (len(stack) > 0) {
				if (curr < hs[stack[(len(stack) - 1)]]) {
					var h int = hs[stack[(len(stack) - 1)]]
					stack = stack[0:(len(stack) - 1)]
					var width int = i
					_ = width
					if (len(stack) > 0) {
						width = ((i - stack[(len(stack) - 1)]) - 1)
					}
					var area int = (h * width)
					if (area > maxArea) {
						maxArea = area
					}
				} else {
					break
				}
			}
			stack = append(append([]int{}, stack...), []int{i}...)
			i = (i + 1)
		}
		return maxArea
}
	var r int = 0
	_ = r
	for (r < rows) {
		var c int = 0
		_ = c
		for (c < cols) {
			if (matrix[r][c] == "1") {
				heights[c] = (heights[c] + 1)
			} else {
				heights[c] = 0
			}
			c = (c + 1)
		}
		var area int = largestRectangleArea(heights)
		if (area > best) {
			best = area
		}
		r = (r + 1)
	}
	return best
}

func example_1() {
	expect((maximalRectangle(matrix1) == 6))
}

func single_zero() {
	expect((maximalRectangle([][]string{[]string{"0"}}) == 0))
}

func single_one() {
	expect((maximalRectangle([][]string{[]string{"1"}}) == 1))
}

var matrix1 [][]string = [][]string{[]string{"1", "0", "1", "0", "0"}, []string{"1", "0", "1", "1", "1"}, []string{"1", "1", "1", "1", "1"}, []string{"1", "0", "0", "1", "0"}}
func main() {
	example_1()
	single_zero()
	single_one()
}

