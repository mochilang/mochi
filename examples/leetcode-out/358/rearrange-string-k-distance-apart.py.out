# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def rearrangeString(s: str, k: int) -> str:
	if (k <= 1):
		return s
	counts = {}
	i = 0
	while (i < len(s)):
		ch = s[i]
		if (ch in counts):
			counts[ch] = (counts[ch] + 1)
		else:
			counts[ch] = 1
		i = (i + 1)
	cooldown = {}
	result = ""
	step = 0
	n = len(s)
	while (len(result) < n):
		bestChar = ""
		bestCount = (-1)
		for ch in counts:
			remaining = counts[ch]
			next = 0
			if (ch in cooldown):
				next = cooldown[ch]
			if ((remaining > 0) and (next <= step)):
				if (remaining > bestCount):
					bestCount = remaining
					bestChar = ch
		if (bestCount == ((-1))):
			return ""
		result = (result + bestChar)
		counts[bestChar] = (counts[bestChar] - 1)
		cooldown[bestChar] = (step + k)
		step = (step + 1)
	return result

def sortString(t: str) -> str:
	chars = []
	i = 0
	while (i < len(t)):
		chars = (chars + [t[i]])
		i = (i + 1)
	_sorted = [ c for c in sorted([ c for c in chars ], key=lambda c: c) ]
	out = ""
	for c in _sorted:
		out = (out + c)
	return out

def isValid(result: str, original: str, k: int) -> bool:
	if (result == ""):
		return True
	if (sortString(result) != sortString(original)):
		return False
	pos = {}
	i = 0
	while (i < len(result)):
		ch = result[i]
		if (ch in pos):
			if ((i - pos[ch]) < k):
				return False
		pos[ch] = i
		i = (i + 1)
	return True

def example_1():
	res = rearrangeString("aabbcc", 3)
	assert isValid(res, "aabbcc", 3)

def example_2():
	assert (rearrangeString("aaabc", 3) == "")

def example_3():
	res = rearrangeString("aaadbbcc", 2)
	assert isValid(res, "aaadbbcc", 2)

def k_one():
	res = rearrangeString("aab", 1)
	assert (res == "aab")

def single_char():
	assert (rearrangeString("a", 2) == "a")

def impossible():
	assert (rearrangeString("aaa", 2) == "")

def main():
	example_1()
	example_2()
	example_3()
	k_one()
	single_char()
	impossible()

if __name__ == "__main__":
	main()
