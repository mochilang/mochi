// Generated by Mochi TypeScript compiler

function buildTree(preorder: Array<number>, inorder: Array<number>) : any {
	let n: number = preorder.length
	let idxMap: Record<any, any> = {}
	for (let i: number = 0; i < n; i++) {
		idxMap[inorder[i]] = i
	}
	let preIdx: number = 0
	function helper(lo: number, hi: number) : any {
		if ((lo >= hi)) {
			return {}
		}
		let val: number = preorder[preIdx]
		preIdx = (preIdx + 1)
		let mid: any = idxMap[val]
		return {left: helper(lo, mid), value: val, right: helper((mid + 1), hi)}
	}
	return helper(0, n)
}

function preorderTraversal(t: any) : Array<number> {
	return (() => {
	const _t = t;
	switch (_t) {
	case Leaf:
		return [];
	case Node(l, v, r):
		return [v].concat(preorderTraversal(l)).concat(preorderTraversal(r));
	}
	return undefined;
})()
}

function inorderTraversal(t: any) : Array<number> {
	return (() => {
	const _t = t;
	switch (_t) {
	case Leaf:
		return [];
	case Node(l, v, r):
		return inorderTraversal(l).concat([v]).concat(inorderTraversal(r));
	}
	return undefined;
})()
}

function isLeaf(t: any) : boolean {
	return (() => {
	const _t = t;
	switch (_t) {
	case Leaf:
		return true;
	default:
		return false;
	}
	return undefined;
})()
}

function example_1(): void {
	let preorder: Array<number> = [3, 9, 20, 15, 7]
	let inorder: Array<number> = [9, 3, 15, 20, 7]
	let tree: any = buildTree(preorder, inorder)
	if (!(_equal(preorderTraversal(tree), preorder))) { throw new Error('expect failed') }
	if (!(_equal(inorderTraversal(tree), inorder))) { throw new Error('expect failed') }
}

function single_node(): void {
	let preorder: Array<number> = [1]
	let inorder: Array<number> = [1]
	let tree: any = buildTree(preorder, inorder)
	if (!(_equal(preorderTraversal(tree), preorder))) { throw new Error('expect failed') }
	if (!(_equal(inorderTraversal(tree), inorder))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!((isLeaf(buildTree([], [])) == true))) { throw new Error('expect failed') }
}

function main(): void {
	type Tree = {
	}
	example_1()
	single_node()
	empty()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

