# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def buildTree(preorder: list[int], inorder: list[int]) -> Tree:
	n = len(preorder)
	idxMap = {}
	for i in range(0, n):
		idxMap[inorder[i]] = i
	preIdx = 0
	def helper(lo: int, hi: int) -> typing.Any:
		nonlocal preIdx
		if (lo >= hi):
			return Leaf()
		val = preorder[preIdx]
		preIdx = (preIdx + 1)
		mid = idxMap[val]
		return Node(left=helper(lo, mid), value=val, right=helper((mid + 1), hi))
	return helper(0, n)

def preorderTraversal(t: Tree) -> list[int]:
	return (lambda _t=t: [] if isinstance(_t, Leaf) else (lambda l, v, r: (([v] + preorderTraversal(l)) + preorderTraversal(r)))(_t.left, _t.value, _t.right) if isinstance(_t, Node) else None)()

def inorderTraversal(t: Tree) -> list[int]:
	return (lambda _t=t: [] if isinstance(_t, Leaf) else (lambda l, v, r: ((inorderTraversal(l) + [v]) + inorderTraversal(r)))(_t.left, _t.value, _t.right) if isinstance(_t, Node) else None)()

def isLeaf(t: Tree) -> bool:
	return (lambda _t=t: True if isinstance(_t, Leaf) else False)()

class Tree:
	pass
@dataclasses.dataclass
class Leaf(Tree):
	pass
@dataclasses.dataclass
class Node(Tree):
	left: typing.Any
	value: int
	right: typing.Any

def example_1():
	preorder = [3, 9, 20, 15, 7]
	inorder = [9, 3, 15, 20, 7]
	tree = buildTree(preorder, inorder)
	assert (preorderTraversal(tree) == preorder)
	assert (inorderTraversal(tree) == inorder)

def single_node():
	preorder = [1]
	inorder = [1]
	tree = buildTree(preorder, inorder)
	assert (preorderTraversal(tree) == preorder)
	assert (inorderTraversal(tree) == inorder)

def empty():
	assert (isLeaf(buildTree([], [])) == True)

def main():
	example_1()
	single_node()
	empty()

if __name__ == "__main__":
	main()
