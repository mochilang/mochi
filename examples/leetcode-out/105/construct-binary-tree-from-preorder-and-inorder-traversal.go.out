package main

import (
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

type Tree interface { isTree() }
type Leaf struct {
}
func (Leaf) isTree() {}
type Node struct {
	Left any `json:"left"`
	Value int `json:"value"`
	Right any `json:"right"`
}
func (Node) isTree() {}

func buildTree(preorder []int, inorder []int) any {
	var n int = len(preorder)
	var idxMap map[int]int = map[int]int{}
	_ = idxMap
	for i := 0; i < n; i++ {
		idxMap[inorder[i]] = i
	}
	var preIdx int = 0
	_ = preIdx
	var helper = func(lo int, hi int) any {
		if (lo >= hi) {
			return Leaf{}
		}
		var val int = preorder[preIdx]
		preIdx = (preIdx + 1)
		var mid int = idxMap[val]
		return Node{Left: helper(lo, mid), Value: val, Right: helper((mid + 1), hi)}
}
	return helper(0, n)
}

func preorderTraversal(t any) []int {
	return _cast[[]int](func() []any {
	_t := t
	switch _t {
	case Leaf:
		return []any{}
	case Node(l, v, r):
		return append(append([]any{}, append(append([]any{}, []any{v}...), _toAnySlice(preorderTraversal(l))...)...), _toAnySlice(preorderTraversal(r))...)
	}
}())
}

func inorderTraversal(t any) []int {
	return func() any {
	_t := t
	switch _t {
	case Leaf:
		return []any{}
	case Node(l, v, r):
		return append(append([]any{}, append(append([]any{}, _toAnySlice(inorderTraversal(l))...), []any{v}...)...), _toAnySlice(inorderTraversal(r))...)
	}
	return nil
}()
}

func isLeaf(t any) bool {
	return func() bool {
	_t := t
	switch _t {
	case Leaf:
		return true
	default:
		return false
	}
}()
}

func example_1() {
	var preorder []int = []int{3, 9, 20, 15, 7}
	var inorder []int = []int{9, 3, 15, 20, 7}
	var tree any = buildTree(preorder, inorder)
	expect(_equal(preorderTraversal(tree), preorder))
	expect(_equal(inorderTraversal(tree), inorder))
}

func single_node() {
	var preorder []int = []int{1}
	var inorder []int = []int{1}
	var tree any = buildTree(preorder, inorder)
	expect(_equal(preorderTraversal(tree), preorder))
	expect(_equal(inorderTraversal(tree), inorder))
}

func empty() {
	expect((isLeaf(buildTree([]int{}, []int{})) == true))
}

func main() {
	example_1()
	single_node()
	empty()
}

func _cast[T any](v any) T {
    data, err := json.Marshal(v)
    if err != nil { panic(err) }
    var out T
    if err := json.Unmarshal(data, &out); err != nil { panic(err) }
    return out
}

func _equal(a, b any) bool {
    return reflect.DeepEqual(a, b)
}

func _toAnySlice[T any](s []T) []any {
    out := make([]any, len(s))
    for i, v := range s { out[i] = v }
    return out
}

