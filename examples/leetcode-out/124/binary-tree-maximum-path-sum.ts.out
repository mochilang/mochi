// Generated by Mochi TypeScript compiler

function Leaf() : Record<string, any> {
	return {"__name": "Leaf"}
}

function Node(left: Record<string, any>, value: number, right: Record<string, any>) : Record<string, any> {
	return {"__name": "Node", "left": left, "value": value, "right": right}
}

function isLeaf(t: Record<string, any>) : boolean {
	return _equal(t["__name"], "Leaf")
}

function left(t: Record<string, any>) : Record<string, any> {
	return t["left"]
}

function right(t: Record<string, any>) : Record<string, any> {
	return t["right"]
}

function value(t: Record<string, any>) : number {
	return t["value"]
}

function max(a: number, b: number) : number {
	if ((a > b)) {
		return a
	}
	return b
}

function positive(x: number) : number {
	if ((x > 0)) {
		return x
	}
	return 0
}

function maxPathSum(root: Record<string, any>) : number {
	let best: number = (-2147483648)
	function dfs(t: Record<string, any>) : number {
		if (isLeaf(t)) {
			return 0
		}
		let leftVal: any = dfs(left(t))
		let rightVal: any = dfs(right(t))
		let leftPos: number = positive(leftVal)
		let rightPos: number = positive(rightVal)
		let candidate: number = ((value(t) + leftPos) + rightPos)
		if ((candidate > best)) {
			best = candidate
		}
		return positive((value(t) + max(leftPos, rightPos)))
	}
	dfs(root)
	return best
}

function example_1(): void {
	let tree: Record<string, any> = Node(Node(Leaf(), 2, Leaf()), 1, Node(Leaf(), 3, Leaf()))
	if (!((maxPathSum(tree) == 6))) { throw new Error('expect failed') }
}

function example_2(): void {
	let tree: Record<string, any> = Node(Node(Leaf(), 9, Leaf()), (-10), Node(Node(Leaf(), 15, Leaf()), 20, Node(Leaf(), 7, Leaf())))
	if (!((maxPathSum(tree) == 42))) { throw new Error('expect failed') }
}

function single_negative(): void {
	if (!((maxPathSum(Node(Leaf(), (-3), Leaf())) == ((-3))))) { throw new Error('expect failed') }
}

function all_negative(): void {
	let tree: Record<string, any> = Node(Node(Leaf(), (-5), Leaf()), (-2), Node(Leaf(), (-4), Leaf()))
	if (!((maxPathSum(tree) == ((-2))))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	single_negative()
	all_negative()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

