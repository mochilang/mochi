// Generated by Mochi TypeScript compiler

let lefts1: Array<number> = [1, ((-1)), ((-1))]

let rights1: Array<number> = [2, ((-1)), ((-1))]

let values1: Array<number> = [1, 2, 3]

let root1: number = 0

let lefts2: Array<number> = [((-1)), 2, ((-1)), ((-1)), ((-1)), ((-1))]

let rights2: Array<number> = [1, 4, 3, 5, ((-1)), ((-1))]

let values2: Array<number> = [1, 2, 3, 4, 5, 6]

let root2: number = 0

let lefts3: Array<number> = [1, 3, ((-1)), ((-1))]

let rights3: Array<number> = [2, ((-1)), ((-1)), ((-1))]

let values3: Array<number> = [3, 2, 4, 1]

let root3: number = 0

function longestConsecutive(lefts: Array<number>, rights: Array<number>, values: Array<number>, root: number) : number {
	if ((root == ((-1)))) {
		return 0
	}
	function dfs(node: number, parentVal: number, length: number) : number {
		if ((node == ((-1)))) {
			return length
		}
		let curr: number = 1
		if ((values[node] == (parentVal + 1))) {
			curr = (length + 1)
		}
		let leftLen: any = dfs(lefts[node], values[node], curr)
		let rightLen: any = dfs(rights[node], values[node], curr)
		let best: number = curr
		if ((leftLen > best)) {
			best = leftLen
		}
		if ((rightLen > best)) {
			best = rightLen
		}
		return best
	}
	return dfs(root, (values[root] - 1), 0)
}

function simple_chain(): void {
	if (!((longestConsecutive(lefts1, rights1, values1, root1) == 2))) { throw new Error('expect failed') }
}

function increasing_right(): void {
	if (!((longestConsecutive(lefts2, rights2, values2, root2) == 4))) { throw new Error('expect failed') }
}

function mixed_values(): void {
	if (!((longestConsecutive(lefts3, rights3, values3, root3) == 2))) { throw new Error('expect failed') }
}

function main(): void {
	simple_chain()
	increasing_right()
	mixed_values()
}
main()

