// Generated by Mochi TypeScript compiler

function findItinerary(tickets: Array<Array<string>>) : Array<string> {
	let graph: Record<any, any> = {}
	for (const t of tickets) {
		let from: string = t[0]
		let to: string = t[1]
		let list: Array<any> = []
		if (Object.prototype.hasOwnProperty.call(graph, String(from))) {
			list = graph[from]
		}
		list = list.concat([to])
		graph[from] = list
	}
	for (const k of Object.keys(graph)) {
		graph[k] = (() => {
	const _src = graph[k];
	let _items = [];
	for (const x of _src) {
		_items.push(x);
	}
	let _pairs = _items.map(it => { const x = it; return {item: it, key: x}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	const _res = [];
	for (const x of _items) {
		_res.push(x)
	}
	return _res;
})()
	}
	let route: Array<any> = []
	function visit(airport: string) : void {
		if (Object.prototype.hasOwnProperty.call(graph, String(airport))) {
			while (((Array.isArray(graph[airport]) || typeof graph[airport] === 'string' ? (graph[airport] as any).length : (graph[airport] && typeof graph[airport] === 'object' ? Object.keys(graph[airport]).length : 0)) > 0)) {
				let next: any = (graph[airport] as any)[0]
				graph[airport] = _slice(graph[airport], 1, (Array.isArray(graph[airport]) || typeof graph[airport] === 'string' ? (graph[airport] as any).length : (graph[airport] && typeof graph[airport] === 'object' ? Object.keys(graph[airport]).length : 0)))
				visit(next)
			}
		}
		route = [airport].concat(route)
	}
	visit("JFK")
	return route
}

function example_1(): void {
	let tickets: Array<Array<string>> = [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]
	if (!(_equal(findItinerary(tickets), ["JFK", "MUC", "LHR", "SFO", "SJC"]))) { throw new Error('expect failed') }
}

function example_2(): void {
	let tickets: Array<Array<string>> = [["JFK", "SFO"], ["JFK", "ATL"], ["SFO", "ATL"], ["ATL", "JFK"], ["ATL", "SFO"]]
	if (!(_equal(findItinerary(tickets), ["JFK", "ATL", "JFK", "SFO", "ATL", "SFO"]))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}


main()

