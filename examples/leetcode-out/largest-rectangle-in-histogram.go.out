package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func largestRectangleArea(heights []int) int {
	var n int = len(heights)
	var stack []int = []int{}
	_ = stack
	var maxArea int = 0
	_ = maxArea
	var i int = 0
	_ = i
	for (i < n) {
		for (len(stack) > 0) {
			if (heights[i] < heights[stack[(len(stack) - 1)]]) {
				var h int = heights[stack[(len(stack) - 1)]]
				stack = stack[0:(len(stack) - 1)]
				var width int = i
				_ = width
				if (len(stack) > 0) {
					width = ((i - stack[(len(stack) - 1)]) - 1)
				}
				var area int = (h * width)
				if (area > maxArea) {
					maxArea = area
				}
			} else {
				break
			}
		}
		stack = append(append([]int{}, stack...), []int{i}...)
		i = (i + 1)
	}
	for (len(stack) > 0) {
		var h int = heights[stack[(len(stack) - 1)]]
		stack = stack[0:(len(stack) - 1)]
		var width int = n
		_ = width
		if (len(stack) > 0) {
			width = ((n - stack[(len(stack) - 1)]) - 1)
		}
		var area int = (h * width)
		if (area > maxArea) {
			maxArea = area
		}
	}
	return maxArea
}

func example_1() {
	expect((largestRectangleArea([]int{2, 1, 5, 6, 2, 3}) == 10))
}

func example_2() {
	expect((largestRectangleArea([]int{2, 4}) == 4))
}

func single_bar() {
	expect((largestRectangleArea([]int{1}) == 1))
}

func valley() {
	expect((largestRectangleArea([]int{2, 1, 2}) == 3))
}

func main() {
	example_1()
	example_2()
	single_bar()
	valley()
}

