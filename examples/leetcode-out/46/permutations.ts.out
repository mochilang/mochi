// Generated by Mochi TypeScript compiler

function permute(nums: Array<number>) : Array<Array<number>> {
	let result: Array<any> = []
	function backtrack(path: Array<number>, remaining: Array<number>) : void {
		if ((remaining.length == 0)) {
			result = result.concat([path])
		} else {
			for (let i: number = 0; i < remaining.length; i++) {
				let nextPath: Array<number> = path.concat([remaining[i]])
				let nextRemaining: Array<number> = remaining.slice(0, i).concat(remaining.slice((i + 1), remaining.length))
				backtrack(nextPath, nextRemaining)
			}
		}
	}
	backtrack([], nums)
	return result
}

function example_1(): void {
	if (!(_equal(permute([1, 2, 3]), [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!(_equal(permute([0, 1]), [[0, 1], [1, 0]]))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!(_equal(permute([1]), [[1]]))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

