# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def permute(nums: list[int]) -> list[list[int]]:
	result = []
	def backtrack(path: list[int], remaining: list[int]) -> None:
		nonlocal result
		if (len(remaining) == 0):
			result = (result + [path])
		else:
			for i in range(0, len(remaining)):
				nextPath = (path + [remaining[i]])
				nextRemaining = (remaining[0:i] + remaining[(i + 1):len(remaining)])
				backtrack(nextPath, nextRemaining)
	backtrack([], nums)
	return result

def example_1():
	assert (permute([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]])

def example_2():
	assert (permute([0, 1]) == [[0, 1], [1, 0]])

def example_3():
	assert (permute([1]) == [[1]])

def main():
	example_1()
	example_2()
	example_3()

if __name__ == "__main__":
	main()
