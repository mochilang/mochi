package main

import (
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func permute(nums []int) [][]int {
	var result [][]int = [][]int{}
	var backtrack func([]int, []int)
	backtrack = func(path []int, remaining []int) {
		if (len(remaining) == 0) {
			result = append(append([][]int{}, result...), [][]int{path}...)
		} else {
			for i := 0; i < len(remaining); i++ {
				var nextPath []int = append(append([]int{}, path...), []int{remaining[i]}...)
				var nextRemaining []int = append(append([]int{}, remaining[0:i]...), remaining[(i + 1):len(remaining)]...)
				backtrack(nextPath, nextRemaining)
			}
		}
}
	backtrack([]int{}, nums)
	return result
}

func example_1() {
	expect(_equal(permute([]int{1, 2, 3}), [][]int{[]int{1, 2, 3}, []int{1, 3, 2}, []int{2, 1, 3}, []int{2, 3, 1}, []int{3, 1, 2}, []int{3, 2, 1}}))
}

func example_2() {
	expect(_equal(permute([]int{0, 1}), [][]int{[]int{0, 1}, []int{1, 0}}))
}

func example_3() {
	expect(_equal(permute([]int{1}), [][]int{[]int{1}}))
}

func main() {
	example_1()
	example_2()
	example_3()
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

