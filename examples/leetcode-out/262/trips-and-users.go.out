package main

import (
	"encoding/json"
	"fmt"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

type User struct {
	Id int `json:"id"`
	Banned bool `json:"banned"`
	Role string `json:"role"`
}

type Trip struct {
	Id int `json:"id"`
	ClientId int `json:"clientId"`
	DriverId int `json:"driverId"`
	CityId int `json:"cityId"`
	Status string `json:"status"`
	RequestAt string `json:"requestAt"`
}

type Result struct {
	Day string `json:"day"`
	CancellationRate float64 `json:"cancellationRate"`
}

func isUnbanned(id int, users []User) bool {
	for _, u := range users {
		if (u.Id == id) {
			return !u.Banned
		}
	}
	return false
}

func round2(x float64) float64 {
	var scaled float64 = ((x * 100) + 0.5)
	var i int = _cast[int](scaled)
	return (_cast[float64](i) / 100)
}

func cancellationRates(trips []Trip, users []User) []Result {
	var days []string = []string{"2013-10-01", "2013-10-02", "2013-10-03"}
	var results []any = []any{}
	for _, d := range days {
		var total int = 0
		var cancelled int = 0
		for _, t := range trips {
			if (((t.RequestAt == d) && isUnbanned(t.ClientId, users)) && isUnbanned(t.DriverId, users)) {
				total = (total + 1)
				if (t.Status != "completed") {
					cancelled = (cancelled + 1)
				}
			}
		}
		if (total > 0) {
			var rate float64 = ((_cast[float64](cancelled)) / (_cast[float64](total)))
			_ = rate
			results = append(append([]any{}, results...), _toAnySlice([]Result{Result{Day: d, CancellationRate: round2(rate)}})...)
		}
	}
	return _cast[[]Result](results)
}

func sample_data() {
	expect((fmt.Sprint(cancellationRates(trips, users)) == fmt.Sprint(expected)))
}

var users []any = []User{User{Id: 1, Banned: false, Role: "client"}, User{Id: 2, Banned: true, Role: "client"}, User{Id: 3, Banned: false, Role: "client"}, User{Id: 4, Banned: false, Role: "client"}, User{Id: 5, Banned: false, Role: "driver"}, User{Id: 6, Banned: false, Role: "driver"}, User{Id: 7, Banned: true, Role: "driver"}}
var trips []any = []Trip{Trip{Id: 1, ClientId: 1, DriverId: 5, CityId: 1, Status: "completed", RequestAt: "2013-10-01"}, Trip{Id: 2, ClientId: 3, DriverId: 5, CityId: 1, Status: "cancelled_by_driver", RequestAt: "2013-10-01"}, Trip{Id: 3, ClientId: 4, DriverId: 6, CityId: 1, Status: "completed", RequestAt: "2013-10-01"}, Trip{Id: 4, ClientId: 1, DriverId: 5, CityId: 1, Status: "cancelled_by_client", RequestAt: "2013-10-02"}, Trip{Id: 5, ClientId: 3, DriverId: 6, CityId: 1, Status: "completed", RequestAt: "2013-10-02"}, Trip{Id: 6, ClientId: 1, DriverId: 5, CityId: 1, Status: "completed", RequestAt: "2013-10-03"}, Trip{Id: 7, ClientId: 2, DriverId: 7, CityId: 1, Status: "cancelled_by_driver", RequestAt: "2013-10-03"}, Trip{Id: 8, ClientId: 3, DriverId: 6, CityId: 1, Status: "completed", RequestAt: "2013-10-03"}, Trip{Id: 9, ClientId: 4, DriverId: 5, CityId: 1, Status: "cancelled_by_driver", RequestAt: "2013-10-03"}}
var expected []any = []Result{Result{Day: "2013-10-01", CancellationRate: 0.33}, Result{Day: "2013-10-02", CancellationRate: 0.5}, Result{Day: "2013-10-03", CancellationRate: 0.33}}
func main() {
	sample_data()
}

func _cast[T any](v any) T {
    data, err := json.Marshal(v)
    if err != nil { panic(err) }
    var out T
    if err := json.Unmarshal(data, &out); err != nil { panic(err) }
    return out
}

func _toAnySlice[T any](s []T) []any {
    out := make([]any, len(s))
    for i, v := range s { out[i] = v }
    return out
}

