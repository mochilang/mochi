# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def isUnbanned(id: int, users: list[User]) -> bool:
	for u in users:
		if (u.id == id):
			return (not u.banned)
	return False

def round2(x: float) -> float:
	scaled = ((x * 100) + 0.5)
	i = scaled
	return (i / 100)

def cancellationRates(trips: list[Trip], users: list[User]) -> list[Result]:
	days = ["2013-10-01", "2013-10-02", "2013-10-03"]
	results = []
	for d in days:
		total = 0
		cancelled = 0
		for t in trips:
			if (((t.requestAt == d) and isUnbanned(t.clientId, users)) and isUnbanned(t.driverId, users)):
				total = (total + 1)
				if (t.status != "completed"):
					cancelled = (cancelled + 1)
		if (total > 0):
			rate = ((cancelled) / (total))
			results = (results + [Result(day=d, cancellationRate=round2(rate))])
	return results

@dataclasses.dataclass
class User:
	id: int
	banned: bool
	role: str

@dataclasses.dataclass
class Trip:
	id: int
	clientId: int
	driverId: int
	cityId: int
	status: str
	requestAt: str

@dataclasses.dataclass
class Result:
	day: str
	cancellationRate: float

users = [User(id=1, banned=False, role="client"), User(id=2, banned=True, role="client"), User(id=3, banned=False, role="client"), User(id=4, banned=False, role="client"), User(id=5, banned=False, role="driver"), User(id=6, banned=False, role="driver"), User(id=7, banned=True, role="driver")]
trips = [Trip(id=1, clientId=1, driverId=5, cityId=1, status="completed", requestAt="2013-10-01"), Trip(id=2, clientId=3, driverId=5, cityId=1, status="cancelled_by_driver", requestAt="2013-10-01"), Trip(id=3, clientId=4, driverId=6, cityId=1, status="completed", requestAt="2013-10-01"), Trip(id=4, clientId=1, driverId=5, cityId=1, status="cancelled_by_client", requestAt="2013-10-02"), Trip(id=5, clientId=3, driverId=6, cityId=1, status="completed", requestAt="2013-10-02"), Trip(id=6, clientId=1, driverId=5, cityId=1, status="completed", requestAt="2013-10-03"), Trip(id=7, clientId=2, driverId=7, cityId=1, status="cancelled_by_driver", requestAt="2013-10-03"), Trip(id=8, clientId=3, driverId=6, cityId=1, status="completed", requestAt="2013-10-03"), Trip(id=9, clientId=4, driverId=5, cityId=1, status="cancelled_by_driver", requestAt="2013-10-03")]
expected = [Result(day="2013-10-01", cancellationRate=0.33), Result(day="2013-10-02", cancellationRate=0.5), Result(day="2013-10-03", cancellationRate=0.33)]

def sample_data():
	assert (str(cancellationRates(trips, users)) == str(expected))

def main():
	users = [User(id=1, banned=False, role="client"), User(id=2, banned=True, role="client"), User(id=3, banned=False, role="client"), User(id=4, banned=False, role="client"), User(id=5, banned=False, role="driver"), User(id=6, banned=False, role="driver"), User(id=7, banned=True, role="driver")]
	trips = [Trip(id=1, clientId=1, driverId=5, cityId=1, status="completed", requestAt="2013-10-01"), Trip(id=2, clientId=3, driverId=5, cityId=1, status="cancelled_by_driver", requestAt="2013-10-01"), Trip(id=3, clientId=4, driverId=6, cityId=1, status="completed", requestAt="2013-10-01"), Trip(id=4, clientId=1, driverId=5, cityId=1, status="cancelled_by_client", requestAt="2013-10-02"), Trip(id=5, clientId=3, driverId=6, cityId=1, status="completed", requestAt="2013-10-02"), Trip(id=6, clientId=1, driverId=5, cityId=1, status="completed", requestAt="2013-10-03"), Trip(id=7, clientId=2, driverId=7, cityId=1, status="cancelled_by_driver", requestAt="2013-10-03"), Trip(id=8, clientId=3, driverId=6, cityId=1, status="completed", requestAt="2013-10-03"), Trip(id=9, clientId=4, driverId=5, cityId=1, status="cancelled_by_driver", requestAt="2013-10-03")]
	expected = [Result(day="2013-10-01", cancellationRate=0.33), Result(day="2013-10-02", cancellationRate=0.5), Result(day="2013-10-03", cancellationRate=0.33)]
	sample_data()

if __name__ == "__main__":
	main()
