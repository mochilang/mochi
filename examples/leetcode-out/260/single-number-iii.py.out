# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def singleNumber(nums: list[int]) -> list[int]:
	counts = {}
	for n in nums:
		if (n in counts):
			counts[n] = (counts[n] + 1)
		else:
			counts[n] = 1
	result = []
	for n in nums:
		if (counts[n] == 1):
			result = (result + [n])
			if (len(result) == 2):
				break
	return result

def example_1():
	out = [ x for x in sorted([ x for x in singleNumber([1, 2, 1, 3, 2, 5]) ], key=lambda x: x) ]
	assert (out == [3, 5])

def negatives():
	out = [ x for x in sorted([ x for x in singleNumber([(-1), 0]) ], key=lambda x: x) ]
	assert (out == [(-1), 0])

def simple():
	out = [ x for x in sorted([ x for x in singleNumber([0, 1]) ], key=lambda x: x) ]
	assert (out == [0, 1])

def mixed_order():
	out = [ x for x in sorted([ x for x in singleNumber([1, 2, 3, 2, 4, 1]) ], key=lambda x: x) ]
	assert (out == [3, 4])

def main():
	example_1()
	negatives()
	simple()
	mixed_order()

if __name__ == "__main__":
	main()
