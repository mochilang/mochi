// Generated by Mochi TypeScript compiler

function isLeaf(t: any) : boolean {
	return (() => {
	const _t = t;
	switch (_t) {
	case Leaf:
		return true;
	default:
		return false;
	}
	return undefined;
})()
}

function hasPathSum(root: any, target: number) : boolean {
	function nodeSum(l: any, v: number, r: any, remaining: number) : boolean {
		let leftLeaf: boolean = isLeaf(l)
		let rightLeaf: boolean = isLeaf(r)
		if ((leftLeaf && rightLeaf)) {
			return (remaining == 0)
		}
		return (hasPathSum(l, remaining) || hasPathSum(r, remaining))
	}
	return (() => {
	const _t = root;
	switch (_t) {
	case Leaf:
		return false;
	case Node(l, v, r):
		return nodeSum(l, v, r, (target - v));
	}
	return undefined;
})()
}

function example_1(): void {
	let root: Node = {left: {left: {left: {}, value: 7, right: {}}, value: 11, right: {left: {}, value: 2, right: {}}}, value: 4, right: {}}
	let tree: Node = {left: root, value: 5, right: {left: {left: {}, value: 13, right: {}}, value: 8, right: {left: {}, value: 4, right: {left: {}, value: 1, right: {}}}}}
	if (!((hasPathSum(tree, 22) == true))) { throw new Error('expect failed') }
}

function example_2(): void {
	let tree: Node = {left: {left: {}, value: 2, right: {}}, value: 1, right: {left: {}, value: 3, right: {}}}
	if (!((hasPathSum(tree, 5) == false))) { throw new Error('expect failed') }
}

function example_3(): void {
	let tree: Node = {left: {left: {}, value: 2, right: {}}, value: 1, right: {}}
	if (!((hasPathSum(tree, 0) == false))) { throw new Error('expect failed') }
}

function single_node(): void {
	if (!((hasPathSum({left: {}, value: 5, right: {}}, 5) == true))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!((hasPathSum({}, 1) == false))) { throw new Error('expect failed') }
}

function main(): void {
	type Tree = {
	}
	example_1()
	example_2()
	example_3()
	single_node()
	empty()
}
main()

