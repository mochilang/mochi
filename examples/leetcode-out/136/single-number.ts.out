// Generated by Mochi TypeScript compiler

function singleNumber(nums: Array<number>) : number {
	let counts: Record<any, any> = {}
	for (const n of nums) {
		if (Object.prototype.hasOwnProperty.call(counts, String(n))) {
			counts[n] = (counts[n] + 1)
		} else {
			counts[n] = 1
		}
	}
	for (const n of nums) {
		if (_equal(counts[n], 1)) {
			return n
		}
	}
	return 0
}

function example_1(): void {
	if (!((singleNumber([2, 2, 1]) == 1))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((singleNumber([4, 1, 2, 1, 2]) == 4))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((singleNumber([1]) == 1))) { throw new Error('expect failed') }
}

function with_negatives(): void {
	if (!((singleNumber([4, (-1), 2, (-1), 2]) == 4))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	with_negatives()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

