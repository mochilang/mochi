// Generated by Mochi TypeScript compiler

function helper(node: any, low: any, high: any) : boolean {
	return (() => {
	const _t = node;
	switch (_t) {
	case Leaf:
		return true;
	case Node(l, v, r):
		return (((((() => {
	const _t = low;
	switch (_t) {
	case Some(x):
		return (v > x);
	case None:
		return true;
	}
	return undefined;
})()) && ((() => {
	const _t = high;
	switch (_t) {
	case Some(y):
		return (v < y);
	case None:
		return true;
	}
	return undefined;
})())) && helper(l, low, {value: v})) && helper(r, {value: v}, high));
	}
	return undefined;
})()
}

function isValidBST(root: any) : boolean {
	return helper(root, {}, {})
}

function example_1(): void {
	let tree: Node = {left: {left: {}, value: 1, right: {}}, value: 2, right: {left: {}, value: 3, right: {}}}
	if (!((isValidBST(tree) == true))) { throw new Error('expect failed') }
}

function example_2(): void {
	let tree: Node = {left: {left: {}, value: 1, right: {}}, value: 5, right: {left: {left: {}, value: 3, right: {}}, value: 4, right: {left: {}, value: 6, right: {}}}}
	if (!((isValidBST(tree) == false))) { throw new Error('expect failed') }
}

function main(): void {
	type Tree = {
	}
	type MaybeInt = {
	}
	example_1()
	example_2()
}
main()

