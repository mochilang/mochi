package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func digitValue(c string) int {
	var digits map[string]int = map[string]int{"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	return digits[c]
}

func isDigit(c string) bool {
	return ((c >= "0") && (c <= "9"))
}

func calculate(s string) int {
	var i int = 0
	_ = i
	var n int = len(s)
	_ = n
	var result int = 0
	_ = result
	var sign int = 1
	_ = sign
	var num int = 0
	_ = num
	var stack []int = []int{}
	_ = stack
	for (i < n) {
		var c string = _indexString(s, i)
		if isDigit(c) {
			num = ((num * 10) + digitValue(c))
		} else 		if (c == "+") {
			result = (result + (sign * num))
			num = 0
			sign = 1
		} else 		if (c == "-") {
			result = (result + (sign * num))
			num = 0
			sign = -1
		} else 		if (c == "(") {
			stack = append(append([]int{}, stack...), []int{result}...)
			stack = append(append([]int{}, stack...), []int{sign}...)
			result = 0
			sign = 1
		} else 		if (c == ")") {
			result = (result + (sign * num))
			num = 0
			var prevSign int = stack[(len(stack) - 1)]
			stack = stack[0:(len(stack) - 1)]
			var prevResult int = stack[(len(stack) - 1)]
			stack = stack[0:(len(stack) - 1)]
			result = (prevResult + (prevSign * result))
		}
		i = (i + 1)
	}
	result = (result + (sign * num))
	return result
}

func example_1() {
	expect((calculate("1 + 1") == 2))
}

func example_2() {
	expect((calculate(" 2-1 + 2 ") == 3))
}

func example_3() {
	expect((calculate("(1+(4+5+2)-3)+(6+8)") == 23))
}

func nested() {
	expect((calculate("((2+3)-(1-2))") == 6))
}

func single_number() {
	expect((calculate("42") == 42))
}

func main() {
	example_1()
	example_2()
	example_3()
	nested()
	single_number()
}

func _indexString(s string, i int) string {
    runes := []rune(s)
    if i < 0 {
        i += len(runes)
    }
    if i < 0 || i >= len(runes) {
        panic("index out of range")
    }
    return string(runes[i])
}

