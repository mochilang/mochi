# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def generateParenthesis(n: int) -> list[str]:
	result = []
	def backtrack(current: str, open: int, close: int) -> None:
		nonlocal result
		if (len(current) == (n * 2)):
			result = (result + [current])
		else:
			if (open < n):
				backtrack((current + "("), (open + 1), close)
			if (close < open):
				backtrack((current + ")"), open, (close + 1))
	backtrack("", 0, 0)
	return result

def example_1():
	assert (generateParenthesis(3) == ["((()))", "(()())", "(())()", "()(())", "()()()"])

def example_2():
	assert (generateParenthesis(1) == ["()"])

def two_pairs():
	assert (generateParenthesis(2) == ["(())", "()()"])

def main():
	example_1()
	example_2()
	two_pairs()

if __name__ == "__main__":
	main()
