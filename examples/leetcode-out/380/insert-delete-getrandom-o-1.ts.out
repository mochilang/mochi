// Generated by Mochi TypeScript compiler

function newSet() : RandomizedSet {
	return {nums: [], idx: {}}
}

function copyMap(src: Record<number, number>) : Record<number, number> {
	let out: Record<any, any> = {}
	for (const k of Object.keys(src)) {
		out[k] = src[k]
	}
	return out
}

function insert(rs: RandomizedSet, val: number) : InsertResult {
	if (Object.prototype.hasOwnProperty.call(rs.idx, String(val))) {
		return {rs: rs, ok: false}
	}
	let nums: Array<number> = rs.nums.concat([val])
	let idxMap: Record<number, number> = copyMap(rs.idx)
	idxMap[val] = (nums.length - 1)
	return {rs: {nums: nums, idx: idxMap}, ok: true}
}

function remove(rs: RandomizedSet, val: number) : RemoveResult {
	if ((!(Object.prototype.hasOwnProperty.call(rs.idx, String(val))))) {
		return {rs: rs, ok: false}
	}
	let idx: number = rs.idx[val]
	let nums: Array<number> = rs.nums
	let lastVal: number = nums[(nums.length - 1)]
	nums[idx] = lastVal
	nums = nums.slice(0, (nums.length - 1))
	let idxMap: Record<number, number> = copyMap(rs.idx)
	idxMap[lastVal] = idx
	let newMap: Record<any, any> = {}
	for (const k of Object.keys(idxMap)) {
		if ((k != val)) {
			newMap[k] = idxMap[k]
		}
	}
	return {rs: {nums: nums, idx: newMap}, ok: true}
}

function getRandom(rs: RandomizedSet) : number {
	let i: number = (performance.now() * 1000000 % rs.nums.length)
	return rs.nums[i]
}

function example(): void {
	let rs: RandomizedSet = newSet()
	let a: InsertResult = insert(rs, 1)
	rs = a.rs
	if (!((a.ok == true))) { throw new Error('expect failed') }
	let b: RemoveResult = remove(rs, 2)
	rs = b.rs
	if (!((b.ok == false))) { throw new Error('expect failed') }
	let c: InsertResult = insert(rs, 2)
	rs = c.rs
	if (!((c.ok == true))) { throw new Error('expect failed') }
	let r: number = getRandom(rs)
	if (!(((((r == 1) || (r == 2))) == true))) { throw new Error('expect failed') }
	let d: RemoveResult = remove(rs, 1)
	rs = d.rs
	if (!((d.ok == true))) { throw new Error('expect failed') }
	let e: InsertResult = insert(rs, 2)
	rs = e.rs
	if (!((e.ok == false))) { throw new Error('expect failed') }
	if (!((getRandom(rs) == 2))) { throw new Error('expect failed') }
}

function main(): void {
	type RandomizedSet = {
		nums: any;
		idx: any;
	}
	type InsertResult = {
		rs: any;
		ok: any;
	}
	type RemoveResult = {
		rs: any;
		ok: any;
	}
	example()
}
main()

