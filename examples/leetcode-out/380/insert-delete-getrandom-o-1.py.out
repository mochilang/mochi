# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import time
import typing

def newSet() -> RandomizedSet:
	return RandomizedSet(nums=[], idx={})

def copyMap(src: dict[int, int]) -> dict[int, int]:
	out = {}
	for k in src:
		out[k] = src[k]
	return out

def insert(rs: RandomizedSet, val: int) -> InsertResult:
	if (val in rs.idx):
		return InsertResult(rs=rs, ok=False)
	nums = (rs.nums + [val])
	idxMap = copyMap(rs.idx)
	idxMap[val] = (len(nums) - 1)
	return InsertResult(rs=RandomizedSet(nums=nums, idx=idxMap), ok=True)

def remove(rs: RandomizedSet, val: int) -> RemoveResult:
	if (not ((val in rs.idx))):
		return RemoveResult(rs=rs, ok=False)
	idx = rs.idx[val]
	nums = rs.nums
	lastVal = nums[(len(nums) - 1)]
	nums[idx] = lastVal
	nums = nums[0:(len(nums) - 1)]
	idxMap = copyMap(rs.idx)
	idxMap[lastVal] = idx
	newMap = {}
	for k in idxMap:
		if (k != val):
			newMap[k] = idxMap[k]
	return RemoveResult(rs=RandomizedSet(nums=nums, idx=newMap), ok=True)

def getRandom(rs: RandomizedSet) -> int:
	i = (time.time_ns() % len(rs.nums))
	return rs.nums[i]

@dataclasses.dataclass
class RandomizedSet:
	nums: list[int]
	idx: dict[int, int]

@dataclasses.dataclass
class InsertResult:
	rs: typing.Any
	ok: bool

@dataclasses.dataclass
class RemoveResult:
	rs: typing.Any
	ok: bool

def example():
	rs = newSet()
	a = insert(rs, 1)
	rs = a.rs
	assert (a.ok == True)
	b = remove(rs, 2)
	rs = b.rs
	assert (b.ok == False)
	c = insert(rs, 2)
	rs = c.rs
	assert (c.ok == True)
	r = getRandom(rs)
	assert ((((r == 1) or (r == 2))) == True)
	d = remove(rs, 1)
	rs = d.rs
	assert (d.ok == True)
	e = insert(rs, 2)
	rs = e.rs
	assert (e.ok == False)
	assert (getRandom(rs) == 2)

def main():
	example()

if __name__ == "__main__":
	main()
