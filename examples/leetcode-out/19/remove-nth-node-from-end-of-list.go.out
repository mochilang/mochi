package main

import (
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func removeNthFromEnd(nums []int, n int) []int {
	var idx int = (len(nums) - n)
	var result []any = []any{}
	_ = result
	var i int = 0
	_ = i
	for (i < len(nums)) {
		if (i != idx) {
			result = append(append([]any{}, result...), _toAnySlice([]int{nums[i]})...)
		}
		i = (i + 1)
	}
	return _cast[[]int](result)
}

func example_1() {
	expect(_equal(removeNthFromEnd([]int{1, 2, 3, 4, 5}, 2), []int{1, 2, 3, 5}))
}

func example_2() {
	expect(_equal(removeNthFromEnd([]int{1}, 1), []any{}))
}

func example_3() {
	expect(_equal(removeNthFromEnd([]int{1, 2}, 1), []int{1}))
}

func remove_first() {
	expect(_equal(removeNthFromEnd([]int{7, 8, 9}, 3), []int{8, 9}))
}

func remove_last() {
	expect(_equal(removeNthFromEnd([]int{7, 8, 9}, 1), []int{7, 8}))
}

func main() {
	example_1()
	example_2()
	example_3()
	remove_first()
	remove_last()
}

func _cast[T any](v any) T {
    data, err := json.Marshal(v)
    if err != nil { panic(err) }
    var out T
    if err := json.Unmarshal(data, &out); err != nil { panic(err) }
    return out
}

func _equal(a, b any) bool {
    return reflect.DeepEqual(a, b)
}

func _toAnySlice[T any](s []T) []any {
    out := make([]any, len(s))
    for i, v := range s { out[i] = v }
    return out
}

