# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def divide(dividend: int, divisor: int) -> int:
	if ((dividend == (((-2147483647) - 1))) and (divisor == ((-1)))):
		return 2147483647
	negative = False
	if (dividend < 0):
		negative = (not negative)
		dividend = (-dividend)
	if (divisor < 0):
		negative = (not negative)
		divisor = (-divisor)
	quotient = 0
	while (dividend >= divisor):
		temp = divisor
		multiple = 1
		while (dividend >= (temp + temp)):
			temp = (temp + temp)
			multiple = (multiple + multiple)
		dividend = (dividend - temp)
		quotient = (quotient + multiple)
	if negative:
		quotient = (-quotient)
	if (quotient > 2147483647):
		return 2147483647
	if (quotient < (((-2147483647) - 1))):
		return (-2147483648)
	return quotient

def example_1():
	assert (divide(10, 3) == 3)

def example_2():
	assert (divide(7, (-3)) == ((-2)))

def overflow():
	assert (divide((-2147483648), (-1)) == 2147483647)

def divide_by_1():
	assert (divide(12345, 1) == 12345)

def negative_result():
	assert (divide((-15), 2) == ((-7)))

def main():
	example_1()
	example_2()
	overflow()
	divide_by_1()
	negative_result()

if __name__ == "__main__":
	main()
