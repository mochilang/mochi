// Generated by Mochi TypeScript compiler

function findNthDigit(n: number) : number {
	let remaining: number = n
	let digits: number = 1
	let count: any = 9
	let start: number = 1
	while ((remaining > (digits * count))) {
		remaining = (remaining - (digits * count))
		digits = (digits + 1)
		count = (count * 10)
		start = (start * 10)
	}
	let num: number = (start + Math.trunc(((remaining - 1)) / digits))
	let index: number = (((remaining - 1)) % digits)
	let s: string = String(num)
	let values: Record<string, number> = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	let ch: string = s[index]
	return values[ch]
}

function example_1(): void {
	if (!((findNthDigit(3) == 3))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((findNthDigit(11) == 0))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((findNthDigit(12) == 1))) { throw new Error('expect failed') }
}

function end_of_two_digits(): void {
	if (!((findNthDigit(189) == 9))) { throw new Error('expect failed') }
}

function start_of_three_digits(): void {
	if (!((findNthDigit(190) == 1))) { throw new Error('expect failed') }
}

function middle_of_three_digits(): void {
	if (!((findNthDigit(191) == 0))) { throw new Error('expect failed') }
}

function third_of_three_digits(): void {
	if (!((findNthDigit(192) == 0))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	end_of_two_digits()
	start_of_three_digits()
	middle_of_three_digits()
	third_of_three_digits()
}
main()

