// Generated by Mochi TypeScript compiler

function minPathSum(grid: Array<Array<number>>) : number {
	let rows: number = grid.length
	if ((rows == 0)) {
		return 0
	}
	let cols: number = grid[0].length
	let dp: Array<any> = []
	let r: number = 0
	while ((r < rows)) {
		let row: Array<any> = []
		let c: number = 0
		while ((c < cols)) {
			row = row.concat([0])
			c = (c + 1)
		}
		dp = dp.concat([row])
		r = (r + 1)
	}
	dp[0][0] = grid[0][0]
	let c: number = 1
	while ((c < cols)) {
		dp[0][c] = ((dp[0] as any)[(c - 1)] + grid[0][c])
		c = (c + 1)
	}
	r = 1
	while ((r < rows)) {
		dp[r][0] = ((dp[(r - 1)] as any)[0] + grid[r][0])
		let c: number = 1
		while ((c < cols)) {
			let top: any = (dp[(r - 1)] as any)[c]
			let left: any = (dp[r] as any)[(c - 1)]
			if ((top < left)) {
				dp[r][c] = (top + grid[r][c])
			} else {
				dp[r][c] = (left + grid[r][c])
			}
			c = (c + 1)
		}
		r = (r + 1)
	}
	return (dp[(rows - 1)] as any)[(cols - 1)]
}

function example_1(): void {
	if (!((minPathSum([[1, 3, 1], [1, 5, 1], [4, 2, 1]]) == 7))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((minPathSum([[1, 2, 3], [4, 5, 6]]) == 12))) { throw new Error('expect failed') }
}

function single_cell(): void {
	if (!((minPathSum([[1]]) == 1))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	single_cell()
}
main()

