package main

import (
	"fmt"
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func parseInt(s string) int {
	var result int = 0
	var i int = 0
	var digits map[string]int = map[string]int{"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	for (i < len(s)) {
		result = ((result * 10) + digits[_indexString(s, i)])
		i = (i + 1)
	}
	return result
}

func encode(strs []string) string {
	var result string = ""
	var i int = 0
	for (i < len(strs)) {
		var s string = strs[i]
		result = result + fmt.Sprint(len(s)) + "#" + s
		i = (i + 1)
	}
	return result
}

func decode(s string) []string {
	var result []string = []string{}
	var i int = 0
	for (i < len(s)) {
		var j int = i
		for (_indexString(s, j) != "#") {
			j = (j + 1)
		}
		var lenStr string = string([]rune(s)[i:j])
		var n int = parseInt(lenStr)
		var word string = string([]rune(s)[(j + 1):((j + 1) + n)])
		result = append(append([]string{}, result...), []string{word}...)
		i = ((j + 1) + n)
	}
	return result
}

func round_trip() {
	var strs []string = []string{"lint", "code", "love", "you"}
	_ = strs
	expect(_equal(decode(encode(strs)), strs))
}

func empty_list() {
	var strs []string = []string{}
	_ = strs
	expect(_equal(decode(encode(strs)), strs))
}

func main() {
	round_trip()
	empty_list()
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

func _indexString(s string, i int) string {
    runes := []rune(s)
    if i < 0 {
        i += len(runes)
    }
    if i < 0 || i >= len(runes) {
        panic("index out of range")
    }
    return string(runes[i])
}

