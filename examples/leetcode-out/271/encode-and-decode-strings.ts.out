// Generated by Mochi TypeScript compiler

function parseInt(s: string) : number {
	let result: number = 0
	let i: number = 0
	let digits: Record<string, number> = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	while ((i < s.length)) {
		result = ((result * 10) + digits[s[i]])
		i = (i + 1)
	}
	return result
}

function encode(strs: Array<string>) : string {
	let result: string = ""
	let i: number = 0
	while ((i < strs.length)) {
		let s: string = strs[i]
		result = result + String(s.length) + "#" + s
		i = (i + 1)
	}
	return result
}

function decode(s: string) : Array<string> {
	let result: Array<any> = []
	let i: number = 0
	while ((i < s.length)) {
		let j: number = i
		while ((s[j] != "#")) {
			j = (j + 1)
		}
		let lenStr: string = s.slice(i, j)
		let n: number = parseInt(lenStr)
		let word: string = s.slice((j + 1), ((j + 1) + n))
		result = result.concat([word])
		i = ((j + 1) + n)
	}
	return result
}

function round_trip(): void {
	let strs: Array<string> = ["lint", "code", "love", "you"]
	if (!(_equal(decode(encode(strs)), strs))) { throw new Error('expect failed') }
}

function empty_list(): void {
	let strs: Array<string> = []
	if (!(_equal(decode(encode(strs)), strs))) { throw new Error('expect failed') }
}

function main(): void {
	round_trip()
	empty_list()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

