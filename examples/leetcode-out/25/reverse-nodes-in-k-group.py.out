# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def reverseKGroup(nums: list[int], k: int) -> list[int]:
	n = len(nums)
	if (k <= 1):
		return nums
	result = []
	i = 0
	while (i < n):
		end = (i + k)
		if (end <= n):
			j = (end - 1)
			while (j >= i):
				result = (result + [nums[j]])
				j = (j - 1)
		else:
			j = i
			while (j < n):
				result = (result + [nums[j]])
				j = (j + 1)
		i = (i + k)
	return result

def example_1():
	assert (reverseKGroup([1, 2, 3, 4, 5], 2) == [2, 1, 4, 3, 5])

def example_2():
	assert (reverseKGroup([1, 2, 3, 4, 5], 3) == [3, 2, 1, 4, 5])

def k_equals_list_length():
	assert (reverseKGroup([1, 2, 3, 4], 4) == [4, 3, 2, 1])

def k_greater_than_length():
	assert (reverseKGroup([1, 2, 3], 5) == [1, 2, 3])

def k_is_one():
	assert (reverseKGroup([1, 2, 3], 1) == [1, 2, 3])

def main():
	example_1()
	example_2()
	k_equals_list_length()
	k_greater_than_length()
	k_is_one()

if __name__ == "__main__":
	main()
