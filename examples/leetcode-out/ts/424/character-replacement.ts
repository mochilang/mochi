// Generated by Mochi TypeScript compiler

function characterReplacement(s: string, k: number): number {
  let letters: Array<string> = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "O",
    "P",
    "Q",
    "R",
    "S",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z",
  ];
  (globalThis as any).letters = letters;
  let n: number = s.length;
  (globalThis as any).n = n;
  let best: number = 0;
  (globalThis as any).best = best;
  for (let i: number = 0; i < n; i++) {
    for (let j: number = i + 1; j < (n + 1); j++) {
      let length: number = j - i;
      (globalThis as any).length = length;
      if ((length <= best)) {
        continue;
      }
      let sub: string = _sliceString(s, i, j);
      (globalThis as any).sub = sub;
      for (const ch of letters) {
        let diff: number = 0;
        (globalThis as any).diff = diff;
        for (let idx: number = 0; idx < sub.length; idx++) {
          let c: string = _indexString(sub, idx);
          (globalThis as any).c = c;
          if ((c != ch)) {
            diff = diff + 1;
            if ((diff > k)) {
              break;
            }
          }
        }
        if ((diff <= k)) {
          best = length;
          break;
        }
      }
    }
  }
  return best;
}

function main(): void {
  console.log(characterReplacement("ABAB", 2));
  console.log(characterReplacement("AABABBA", 1));
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

function _sliceString(s: string, i: number, j: number): string {
  let start = i;
  let end = j;
  const runes = Array.from(s);
  const n = runes.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (end > n) end = n;
  if (end < start) end = start;
  return runes.slice(start, end).join("");
}

main();
