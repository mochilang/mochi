// Generated by Mochi TypeScript compiler

function abs(x: number): number {
  if ((x < 0)) {
    return (-x);
  } else {
    return x;
  }
}

function containsNearbyAlmostDuplicate(
  nums: Array<number>,
  indexDiff: number,
  valueDiff: number,
): boolean {
  if (((indexDiff <= 0) || (valueDiff < 0))) {
    return false;
  }
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < nums.length)) {
    let j: number = i - 1;
    (globalThis as any).j = j;
    let left: number = 0;
    (globalThis as any).left = left;
    if (((i - indexDiff) > 0)) {
      left = i - indexDiff;
    }
    j = i - 1;
    while ((j >= left)) {
      if ((abs(nums[i] - nums[j]) <= valueDiff)) {
        return true;
      }
      j = j - 1;
    }
    i = i + 1;
  }
  return false;
}

function test_example_1(): void {
  if (
    !(containsNearbyAlmostDuplicate(
      [
        1,
        2,
        3,
        1,
      ],
      3,
      0,
    ) == true)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(containsNearbyAlmostDuplicate(
      [
        1,
        0,
        1,
        1,
      ],
      1,
      2,
    ) == true)
  ) throw new Error("expect failed");
}

function test_example_3(): void {
  if (
    !(containsNearbyAlmostDuplicate(
      [
        1,
        5,
        9,
        1,
        5,
        9,
      ],
      2,
      3,
    ) == false)
  ) throw new Error("expect failed");
}

function test_negative_numbers(): void {
  if (
    !(containsNearbyAlmostDuplicate(
      [
        -3,
        -1,
        -4,
        -2,
      ],
      2,
      1,
    ) == true)
  ) throw new Error("expect failed");
}

function test_no_pairs(): void {
  if (
    !(containsNearbyAlmostDuplicate(
      [
        1,
        2,
        3,
        4,
      ],
      1,
      0,
    ) == false)
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_negative_numbers();
  test_no_pairs();
}
main();
