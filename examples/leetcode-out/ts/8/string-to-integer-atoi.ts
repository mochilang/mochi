// Generated by Mochi TypeScript compiler

function digit(ch: string): number {
  if ((ch == "0")) {
    return 0;
  }
  if ((ch == "1")) {
    return 1;
  }
  if ((ch == "2")) {
    return 2;
  }
  if ((ch == "3")) {
    return 3;
  }
  if ((ch == "4")) {
    return 4;
  }
  if ((ch == "5")) {
    return 5;
  }
  if ((ch == "6")) {
    return 6;
  }
  if ((ch == "7")) {
    return 7;
  }
  if ((ch == "8")) {
    return 8;
  }
  if ((ch == "9")) {
    return 9;
  }
  return (-1);
}

function myAtoi(s: string): number {
  let i: number = 0;
  (globalThis as any).i = i;
  let n: number = s.length;
  (globalThis as any).n = n;
  while (((i < n) && (_indexString(s, i) == _indexString(" ", 0)))) {
    i = i + 1;
  }
  let sign: number = 1;
  (globalThis as any).sign = sign;
  if (
    ((i < n) &&
      ((_indexString(s, i) == _indexString("+", 0)) ||
        (_indexString(s, i) == _indexString("-", 0))))
  ) {
    if ((_indexString(s, i) == _indexString("-", 0))) {
      sign = -1;
    }
    i = i + 1;
  }
  let result: number = 0;
  (globalThis as any).result = result;
  while ((i < n)) {
    let ch: string = _sliceString(s, i, i + 1);
    (globalThis as any).ch = ch;
    let d: number = digit(ch);
    (globalThis as any).d = d;
    if ((d < 0)) {
      break;
    }
    result = (result * 10) + d;
    i = i + 1;
  }
  result = result * sign;
  if ((result > 2147483647)) {
    return 2147483647;
  }
  if ((result < (-2147483648))) {
    return (-2147483648);
  }
  return result;
}

function test_example_1(): void {
  if (!(myAtoi("42") == 42)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(myAtoi("   -42") == (-42))) throw new Error("expect failed");
}

function test_example_3(): void {
  if (!(myAtoi("4193 with words") == 4193)) throw new Error("expect failed");
}

function test_example_4(): void {
  if (!(myAtoi("words and 987") == 0)) throw new Error("expect failed");
}

function test_example_5(): void {
  if (!(myAtoi("-91283472332") == (-2147483648))) {
    throw new Error("expect failed");
  }
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_example_4();
  test_example_5();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

function _sliceString(s: string, i: number, j: number): string {
  let start = i;
  let end = j;
  const runes = Array.from(s);
  const n = runes.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (end > n) end = n;
  if (end < start) end = start;
  return runes.slice(start, end).join("");
}

main();
