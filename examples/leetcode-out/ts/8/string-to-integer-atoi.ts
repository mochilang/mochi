// Generated by Mochi TypeScript compiler

function myAtoi(s: string): number {
  let i: number = 0;
  let n: number = s.length;
  while (i < n && s[i] == " ") {
    i = i + 1;
  }
  let sign: number = 1;
  if (i < n && (s[i] == "+" || s[i] == "-")) {
    if (s[i] == "-") {
      sign = -1;
    }
    i = i + 1;
  }
  let digits: Record<string, number> = {
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  };
  let result: number = 0;
  while (i < n) {
    let ch: string = s[i];
    if (!Object.prototype.hasOwnProperty.call(digits, String(ch))) {
      break;
    }
    let d: number = digits[ch];
    result = result * 10 + d;
    i = i + 1;
  }
  result = result * sign;
  if (result > 2147483647) {
    return 2147483647;
  }
  if (result < -2147483648) {
    return -2147483648;
  }
  return result;
}

function example_1(): void {
  if (!(myAtoi("42") == 42)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(myAtoi("   -42") == -42)) {
    throw new Error("expect failed");
  }
}

function example_3(): void {
  if (!(myAtoi("4193 with words") == 4193)) {
    throw new Error("expect failed");
  }
}

function example_4(): void {
  if (!(myAtoi("words and 987") == 0)) {
    throw new Error("expect failed");
  }
}

function example_5(): void {
  if (!(myAtoi("-91283472332") == -2147483648)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  example_3();
  example_4();
  example_5();
}
main();
