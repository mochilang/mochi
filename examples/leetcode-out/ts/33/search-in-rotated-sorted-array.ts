// Generated by Mochi TypeScript compiler

function search(nums: Array<number>, target: number): number {
  let left: number = 0;
  let right: number = nums.length - 1;
  while (left <= right) {
    let mid: number = Math.trunc((left + right) / 2);
    if (nums[mid] == target) {
      return mid;
    }
    if (nums[left] <= nums[mid]) {
      if (nums[left] <= target && target < nums[mid]) {
        right = mid - 1;
      } else {
        left = mid + 1;
      }
    } else {
      if (nums[mid] < target && target <= nums[right]) {
        left = mid + 1;
      } else {
        right = mid - 1;
      }
    }
  }
  return -1;
}

function example_1(): void {
  if (!(search([4, 5, 6, 7, 0, 1, 2], 0) == 4)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(search([4, 5, 6, 7, 0, 1, 2], 3) == -1)) {
    throw new Error("expect failed");
  }
}

function example_3(): void {
  if (!(search([1], 0) == -1)) {
    throw new Error("expect failed");
  }
}

function single_element_found(): void {
  if (!(search([1], 1) == 0)) {
    throw new Error("expect failed");
  }
}

function two_elements(): void {
  if (!(search([3, 1], 1) == 1)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  example_3();
  single_element_found();
  two_elements();
}
main();
