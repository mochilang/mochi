// Generated by Mochi TypeScript compiler

function isValid(s: string): boolean {
  let count: number = 0;
  let i: number = 0;
  while (i < s.length) {
    let c: string = s[i];
    if (c == "(") {
      count = count + 1;
    } else if (c == ")") {
      if (count == 0) {
        return false;
      }
      count = count - 1;
    }
    i = i + 1;
  }
  return count == 0;
}

function removeInvalidParentheses(s: string): Array<string> {
  let result: Array<string> = [];
  let visited: Record<string, boolean> = {};
  let queue: Array<string> = [s];
  visited[s] = true;
  let found: boolean = false;
  while (queue.length > 0) {
    let cur: string = queue[0];
    queue = queue.slice(1, queue.length);
    if (isValid(cur)) {
      result = result.concat([cur]);
      found = true;
    }
    if (found) {
      continue;
    }
    let i: number = 0;
    while (i < cur.length) {
      let ch: string = cur[i];
      if (ch != "(" && ch != ")") {
        i = i + 1;
        continue;
      }
      let next: string = cur.slice(0, i) + cur.slice(i + 1, cur.length);
      if (!Object.prototype.hasOwnProperty.call(visited, String(next))) {
        queue = queue.concat([next]);
        visited[next] = true;
      }
      i = i + 1;
    }
  }
  if (result.length == 0) {
    return [""];
  }
  return result;
}

function example_1(): void {
  if (!_equal(removeInvalidParentheses("()())()"), ["(())()", "()()()"])) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!_equal(removeInvalidParentheses("(a)())()"), ["(a())()", "(a)()()"])) {
    throw new Error("expect failed");
  }
}

function example_3(): void {
  if (!_equal(removeInvalidParentheses(")("), [""])) {
    throw new Error("expect failed");
  }
}

function already_valid(): void {
  if (!_equal(removeInvalidParentheses("(a)(b)"), ["(a)(b)"])) {
    throw new Error("expect failed");
  }
}

function empty(): void {
  if (!_equal(removeInvalidParentheses(""), [""])) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  example_3();
  already_valid();
  empty();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
