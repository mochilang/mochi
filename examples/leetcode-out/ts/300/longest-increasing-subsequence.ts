// Generated by Mochi TypeScript compiler

function lengthOfLIS(nums: Array<number>): number {
  let n: number = nums.length;
  (globalThis as any).n = n;
  if ((n == 0)) {
    return 0;
  }
  let dp: Array<number> = [];
  (globalThis as any).dp = dp;
  let fill: number = 0;
  (globalThis as any).fill = fill;
  while ((fill < n)) {
    dp = dp.concat([1]);
    fill = fill + 1;
  }
  let i: number = 1;
  (globalThis as any).i = i;
  while ((i < n)) {
    let j: number = 0;
    (globalThis as any).j = j;
    while ((j < i)) {
      if ((nums[i] > nums[j])) {
        let candidate: number = dp[j] + 1;
        (globalThis as any).candidate = candidate;
        if ((candidate > dp[i])) {
          dp[i] = candidate;
        }
      }
      j = j + 1;
    }
    i = i + 1;
  }
  let result: number = dp[0];
  (globalThis as any).result = result;
  let k: number = 1;
  (globalThis as any).k = k;
  while ((k < n)) {
    if ((dp[k] > result)) {
      result = dp[k];
    }
    k = k + 1;
  }
  return result;
}

function test_example_1(): void {
  if (
    !(lengthOfLIS([
      10,
      9,
      2,
      5,
      3,
      7,
      101,
      18,
    ]) == 4)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(lengthOfLIS([
      0,
      1,
      0,
      3,
      2,
      3,
    ]) == 4)
  ) throw new Error("expect failed");
}

function test_example_3(): void {
  if (
    !(lengthOfLIS([
      7,
      7,
      7,
      7,
      7,
      7,
      7,
    ]) == 1)
  ) throw new Error("expect failed");
}

function test_empty(): void {
  if (!(lengthOfLIS([]) == 0)) throw new Error("expect failed");
}

function test_single(): void {
  if (!(lengthOfLIS([5]) == 1)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_empty();
  test_single();
}
main();
