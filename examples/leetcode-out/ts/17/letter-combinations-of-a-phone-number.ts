// Generated by Mochi TypeScript compiler

function letterCombinations(digits: string) : Array<string> {
	if ((digits.length == 0)) {
		return []
	}
	let mapping: Record<string, Array<string>> = {"2": ["a", "b", "c"], "3": ["d", "e", "f"], "4": ["g", "h", "i"], "5": ["j", "k", "l"], "6": ["m", "n", "o"], "7": ["p", "q", "r", "s"], "8": ["t", "u", "v"], "9": ["w", "x", "y", "z"]}
	let result: Array<string> = [""]
	for (const d of digits) {
		if ((!(Object.prototype.hasOwnProperty.call(mapping, String(d))))) {
			continue
		}
		let letters: Array<string> = mapping[d]
		let next: Array<any> = (() => {
	const _src = result;
	const _res = [];
	for (const p of _src) {
		for (const ch of letters) {
			_res.push(p + ch)
		}
	}
	return _res;
})()
		result = next
	}
	return result
}

function example_1(): void {
	if (!(_equal(letterCombinations("23"), ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!(_equal(letterCombinations(""), []))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!(_equal(letterCombinations("2"), ["a", "b", "c"]))) { throw new Error('expect failed') }
}

function single_seven(): void {
	if (!(_equal(letterCombinations("7"), ["p", "q", "r", "s"]))) { throw new Error('expect failed') }
}

function mix(): void {
	if (!(_equal(letterCombinations("79"), ["pw", "px", "py", "pz", "qw", "qx", "qy", "qz", "rw", "rx", "ry", "rz", "sw", "sx", "sy", "sz"]))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	single_seven()
	mix()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

