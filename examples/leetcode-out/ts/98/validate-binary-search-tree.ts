// Generated by Mochi TypeScript compiler

type Leaf = {
  __name: "Leaf";
};

type _Node = {
  __name: "Node";
  left: Tree;
  value: number;
  right: Tree;
};

type Tree = Leaf | _Node;

type None = {
  __name: "None";
};

type Some = {
  __name: "Some";
  value: number;
};

type MaybeInt = None | Some;

function helper(node: Tree, low: MaybeInt, high: MaybeInt): boolean {
  return (() => {
    const _t = node;
    if (_t.__name === "Leaf") return true;
    if (_t.__name === "Node") {
      return ((l, v, r) => (((((() => {
        const _t = low;
        if (_t.__name === "Some") return ((x) => (v > x))(_t.value);
        if (_t.__name === "None") return true;
        return undefined;
      })()) && ((() => {
        const _t = high;
        if (_t.__name === "Some") return ((y) => (v < y))(_t.value);
        if (_t.__name === "None") return true;
        return undefined;
      })())) && helper(l, low, { __name: "Some", value: v })) &&
        helper(r, { __name: "Some", value: v }, high)))(
          _t.left,
          _t.value,
          _t.right,
        );
    }
    return undefined;
  })();
}

function isValidBST(root: Tree): boolean {
  return helper(root, { __name: "None" }, { __name: "None" });
}

function test_example_1(): void {
  let tree: _Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 1,
      right: { __name: "Leaf" },
    },
    value: 2,
    right: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 3,
      right: { __name: "Leaf" },
    },
  };
  (globalThis as any).tree = tree;
  if (!(isValidBST(tree) == true)) throw new Error("expect failed");
}

function test_example_2(): void {
  let tree: _Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 1,
      right: { __name: "Leaf" },
    },
    value: 5,
    right: {
      __name: "Node",
      left: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 3,
        right: { __name: "Leaf" },
      },
      value: 4,
      right: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 6,
        right: { __name: "Leaf" },
      },
    },
  };
  (globalThis as any).tree = tree;
  if (!(isValidBST(tree) == false)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
}
main();
