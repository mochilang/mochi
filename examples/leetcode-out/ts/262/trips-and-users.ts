// Generated by Mochi TypeScript compiler

type User = {
  id: number;
  banned: boolean;
  role: string;
};

type Trip = {
  id: number;
  clientId: number;
  driverId: number;
  cityId: number;
  status: string;
  requestAt: string;
};

type Result = {
  day: string;
  cancellationRate: number;
};

function isUnbanned(id: number, users: Array<User>): boolean {
  for (const u of users) {
    if ((u.id == id)) {
      return (!u.banned);
    }
  }
  return false;
}

function round2(x: number): number {
  let scaled: number = (x * 100) + 0.5;
  (globalThis as any).scaled = scaled;
  let i: number = scaled;
  (globalThis as any).i = i;
  return (i / 100);
}

function cancellationRates(
  trips: Array<Trip>,
  users: Array<User>,
): Array<Result> {
  let days: Array<string> = [
    "2013-10-01",
    "2013-10-02",
    "2013-10-03",
  ];
  (globalThis as any).days = days;
  let results: Array<Result> = [];
  (globalThis as any).results = results;
  for (const d of days) {
    let total: number = 0;
    (globalThis as any).total = total;
    let cancelled: number = 0;
    (globalThis as any).cancelled = cancelled;
    for (const t of trips) {
      if (
        (((t.requestAt == d) && isUnbanned(t.clientId, users)) &&
          isUnbanned(t.driverId, users))
      ) {
        total = total + 1;
        if ((t.status != "completed")) {
          cancelled = cancelled + 1;
        }
      }
    }
    if ((total > 0)) {
      let rate: number = cancelled / total;
      (globalThis as any).rate = rate;
      results = results.concat([
        {
          day: d,
          cancellationRate: round2(rate),
        },
      ]);
    }
  }
  return results;
}

function test_sample_data(): void {
  if (!(String(cancellationRates(trips, users)) == String(expected))) {
    throw new Error("expect failed");
  }
}

function main(): void {
  let users: Array<User> = [
    {
      id: 1,
      banned: false,
      role: "client",
    },
    {
      id: 2,
      banned: true,
      role: "client",
    },
    {
      id: 3,
      banned: false,
      role: "client",
    },
    {
      id: 4,
      banned: false,
      role: "client",
    },
    {
      id: 5,
      banned: false,
      role: "driver",
    },
    {
      id: 6,
      banned: false,
      role: "driver",
    },
    {
      id: 7,
      banned: true,
      role: "driver",
    },
  ];
  (globalThis as any).users = users;
  let trips: Array<Trip> = [
    {
      id: 1,
      clientId: 1,
      driverId: 5,
      cityId: 1,
      status: "completed",
      requestAt: "2013-10-01",
    },
    {
      id: 2,
      clientId: 3,
      driverId: 5,
      cityId: 1,
      status: "cancelled_by_driver",
      requestAt: "2013-10-01",
    },
    {
      id: 3,
      clientId: 4,
      driverId: 6,
      cityId: 1,
      status: "completed",
      requestAt: "2013-10-01",
    },
    {
      id: 4,
      clientId: 1,
      driverId: 5,
      cityId: 1,
      status: "cancelled_by_client",
      requestAt: "2013-10-02",
    },
    {
      id: 5,
      clientId: 3,
      driverId: 6,
      cityId: 1,
      status: "completed",
      requestAt: "2013-10-02",
    },
    {
      id: 6,
      clientId: 1,
      driverId: 5,
      cityId: 1,
      status: "completed",
      requestAt: "2013-10-03",
    },
    {
      id: 7,
      clientId: 2,
      driverId: 7,
      cityId: 1,
      status: "cancelled_by_driver",
      requestAt: "2013-10-03",
    },
    {
      id: 8,
      clientId: 3,
      driverId: 6,
      cityId: 1,
      status: "completed",
      requestAt: "2013-10-03",
    },
    {
      id: 9,
      clientId: 4,
      driverId: 5,
      cityId: 1,
      status: "cancelled_by_driver",
      requestAt: "2013-10-03",
    },
  ];
  (globalThis as any).trips = trips;
  let expected: Array<Result> = [
    {
      day: "2013-10-01",
      cancellationRate: 0.33,
    },
    {
      day: "2013-10-02",
      cancellationRate: 0.5,
    },
    {
      day: "2013-10-03",
      cancellationRate: 0.33,
    },
  ];
  (globalThis as any).expected = expected;
  test_sample_data();
}
main();
