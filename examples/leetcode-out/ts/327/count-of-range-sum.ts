// Generated by Mochi TypeScript compiler

function countRangeSum(nums: Array<number>, lower: number, upper: number) : number {
	let n: number = nums.length
	let prefix: Array<number> = [0]
	let i: number = 0
	let running: number = 0
	while ((i < n)) {
		running = (running + nums[i])
		prefix = prefix.concat([running])
		i = (i + 1)
	}
	let count: number = 0
	i = 0
	while ((i < prefix.length)) {
		let j: number = (i + 1)
		while ((j < prefix.length)) {
			let sum: number = (prefix[j] - prefix[i])
			if (((sum >= lower) && (sum <= upper))) {
				count = (count + 1)
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return count
}

function example_1(): void {
	if (!((countRangeSum([(-2), 5, (-1)], (-2), 2) == 3))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((countRangeSum([0], 0, 0) == 1))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!((countRangeSum([], 0, 0) == 0))) { throw new Error('expect failed') }
}

function single_outside(): void {
	if (!((countRangeSum([3], (-1), 1) == 0))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	empty()
	single_outside()
}
main()

