// Generated by Mochi TypeScript compiler

function isSameTree(p: Tree, q: Tree): boolean {
  return (() => {
    const _t = p;
    if (_t.__name === "Leaf") {
      return (() => {
        const _t = q;
        if (_t.__name === "Leaf") {
          return true;
        }
        return false;
      })();
    }
    if (_t.__name === "Node") {
      return ((pl, pv, pr) =>
        (() => {
          const _t = q;
          if (_t.__name === "Node") {
            return ((ql, qv, qr) =>
              _equal(pv, qv) && isSameTree(pl, ql) && isSameTree(pr, qr))(
              _t.left,
              _t.value,
              _t.right,
            );
          }
          return false;
        })())(_t.left, _t.value, _t.right);
    }
    return undefined;
  })();
}

function example_1(): void {
  let p: Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 2,
      right: { __name: "Leaf" },
    },
    value: 1,
    right: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 3,
      right: { __name: "Leaf" },
    },
  };
  let q: Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 2,
      right: { __name: "Leaf" },
    },
    value: 1,
    right: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 3,
      right: { __name: "Leaf" },
    },
  };
  if (!(isSameTree(p, q) == true)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  let p: Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 2,
      right: { __name: "Leaf" },
    },
    value: 1,
    right: { __name: "Leaf" },
  };
  let q: Node = {
    __name: "Node",
    left: { __name: "Leaf" },
    value: 1,
    right: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 2,
      right: { __name: "Leaf" },
    },
  };
  if (!(isSameTree(p, q) == false)) {
    throw new Error("expect failed");
  }
}

function example_3(): void {
  let p: Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 2,
      right: { __name: "Leaf" },
    },
    value: 1,
    right: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 1,
      right: { __name: "Leaf" },
    },
  };
  let q: Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 1,
      right: { __name: "Leaf" },
    },
    value: 1,
    right: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 2,
      right: { __name: "Leaf" },
    },
  };
  if (!(isSameTree(p, q) == false)) {
    throw new Error("expect failed");
  }
}

function both_empty(): void {
  if (!(isSameTree({ __name: "Leaf" }, { __name: "Leaf" }) == true)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  type Leaf = {
    __name: "Leaf";
  };

  type Node = {
    __name: "Node";
    left: any;
    value: number;
    right: any;
  };

  type Tree = Leaf | Node;
  example_1();
  example_2();
  example_3();
  both_empty();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
