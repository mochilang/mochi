// Generated by Mochi TypeScript compiler

function gameOfLife(board: Array<Array<number>>) : Array<Array<number>> {
	let m: number = board.length
	if ((m == 0)) {
		return board
	}
	let n: number = board[0].length
	let result: Array<Array<number>> = []
	let i: number = 0
	while ((i < m)) {
		let row: Array<number> = []
		let j: number = 0
		while ((j < n)) {
			let live: number = 0
			let di: number = (-1)
			while ((di <= 1)) {
				let dj: number = (-1)
				while ((dj <= 1)) {
					if ((!(((di == 0) && (dj == 0))))) {
						let ni: number = (i + di)
						let nj: number = (j + dj)
						if (((((ni >= 0) && (ni < m)) && (nj >= 0)) && (nj < n))) {
							if ((board[ni][nj] == 1)) {
								live = (live + 1)
							}
						}
					}
					dj = (dj + 1)
				}
				di = (di + 1)
			}
			let cell: number = board[i][j]
			let next: number = cell
			if ((cell == 1)) {
				if (((live < 2) || (live > 3))) {
					next = 0
				} else {
					next = 1
				}
			} else {
				if ((live == 3)) {
					next = 1
				} else {
					next = 0
				}
			}
			row = row.concat([next])
			j = (j + 1)
		}
		result = result.concat([row])
		i = (i + 1)
	}
	return result
}

function example_1(): void {
	let board: Array<Array<number>> = [[0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0]]
	if (!(_equal(gameOfLife(board), [[0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0]]))) { throw new Error('expect failed') }
}

function example_2(): void {
	let board: Array<Array<number>> = [[1, 1], [1, 0]]
	if (!(_equal(gameOfLife(board), [[1, 1], [1, 1]]))) { throw new Error('expect failed') }
}

function empty_board(): void {
	let board: Array<Array<number>> = []
	if (!(_equal(gameOfLife(board), []))) { throw new Error('expect failed') }
}

function single_dead_cell(): void {
	let board: Array<Array<number>> = [[0]]
	if (!(_equal(gameOfLife(board), [[0]]))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	empty_board()
	single_dead_cell()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

