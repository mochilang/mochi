// Generated by Mochi TypeScript compiler

function Leaf(): Record<string, any> {
  return { "__name": "Leaf" };
}

function _Node(
  left: Record<string, any>,
  value: number,
  right: Record<string, any>,
): Record<string, any> {
  return {
    "__name": "Node",
    "left": left,
    "value": value,
    "right": right,
  };
}

function isLeaf(t: Record<string, any>): boolean {
  return _equal(t["__name"], "Leaf");
}

function left(t: Record<string, any>): Record<string, any> {
  return t["left"];
}

function right(t: Record<string, any>): Record<string, any> {
  return t["right"];
}

function value(t: Record<string, any>): number {
  return t["value"];
}

function absFloat(x: number): number {
  if ((x < 0)) {
    return (-x);
  } else {
    return x;
  }
}

function closestValue(root: Record<string, any>, target: number): number {
  let closest: number = value(root);
  (globalThis as any).closest = closest;
  let node: Record<string, any> = root;
  (globalThis as any).node = node;
  while ((!isLeaf(node))) {
    let v: number = value(node);
    (globalThis as any).v = v;
    if ((absFloat(v - target) < absFloat(closest - target))) {
      closest = v;
    }
    if ((target < v)) {
      let l: Record<string, any> = left(node);
      (globalThis as any).l = l;
      if (isLeaf(l)) {
        break;
      }
      node = l;
    } else {
      let r: Record<string, any> = right(node);
      (globalThis as any).r = r;
      if (isLeaf(r)) {
        break;
      }
      node = r;
    }
  }
  return closest;
}

function test_example_1(): void {
  if (!(closestValue(example, 3.714286) == 4)) throw new Error("expect failed");
}

function test_target_in_tree(): void {
  if (!(closestValue(example, 5) == 5)) throw new Error("expect failed");
}

function test_target_below_minimum(): void {
  if (!(closestValue(example, 0) == 1)) throw new Error("expect failed");
}

function main(): void {
  let example: Record<string, any> = _Node(
    _Node(_Node(Leaf(), 1, Leaf()), 2, _Node(Leaf(), 3, Leaf())),
    4,
    _Node(Leaf(), 5, Leaf()),
  );
  (globalThis as any).example = example;
  test_example_1();
  test_target_in_tree();
  test_target_below_minimum();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
