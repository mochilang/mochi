// Generated by Mochi TypeScript compiler

function isRectangleCover(rectangles: Array<Array<number>>) : boolean {
	if ((rectangles.length == 0)) {
		return false
	}
	let minX: number = rectangles[0][0]
	let minY: number = rectangles[0][1]
	let maxX: number = rectangles[0][2]
	let maxY: number = rectangles[0][3]
	let area: number = 0
	let counts: Record<string, number> = {}
	for (const rect of rectangles) {
		let x1: number = rect[0]
		let y1: number = rect[1]
		let x2: number = rect[2]
		let y2: number = rect[3]
		if ((x1 < minX)) {
			minX = x1
		}
		if ((y1 < minY)) {
			minY = y1
		}
		if ((x2 > maxX)) {
			maxX = x2
		}
		if ((y2 > maxY)) {
			maxY = y2
		}
		area = (area + (((x2 - x1)) * ((y2 - y1))))
		let i: number = 0
		let pts: Array<Array<number>> = [[x1, y1], [x1, y2], [x2, y1], [x2, y2]]
		while ((i < 4)) {
			let pt: Array<number> = pts[i]
			let key: string = String(pt[0]) + ":" + String(pt[1])
			if (Object.prototype.hasOwnProperty.call(counts, String(key))) {
				counts[key] = (counts[key] + 1)
			} else {
				counts[key] = 1
			}
			i = (i + 1)
		}
	}
	let expectArea: number = (((maxX - minX)) * ((maxY - minY)))
	if ((area != expectArea)) {
		return false
	}
	let unique: Array<string> = []
	for (const key of Object.keys(counts)) {
		if (((counts[key] % 2) == 1)) {
			unique = unique.concat([key])
		}
	}
	if ((unique.length != 4)) {
		return false
	}
	let needed: Record<string, boolean> = {}
	needed[String(minX) + ":" + String(minY)] = true
	needed[String(minX) + ":" + String(maxY)] = true
	needed[String(maxX) + ":" + String(minY)] = true
	needed[String(maxX) + ":" + String(maxY)] = true
	for (const c of unique) {
		let ok: boolean = false
		if (Object.prototype.hasOwnProperty.call(needed, String(c))) {
			ok = needed[c]
		}
		if ((!ok)) {
			return false
		}
	}
	return true
}

function example_1(): void {
	if (!((isRectangleCover([[1, 1, 3, 3], [3, 1, 4, 2], [3, 2, 4, 4], [1, 3, 2, 4], [2, 3, 3, 4]]) == true))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((isRectangleCover([[1, 1, 2, 3], [1, 3, 2, 4], [3, 1, 4, 2], [3, 2, 4, 4]]) == false))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((isRectangleCover([[1, 1, 3, 3], [3, 1, 4, 2], [1, 3, 2, 4], [3, 2, 4, 4]]) == false))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
}
main()

