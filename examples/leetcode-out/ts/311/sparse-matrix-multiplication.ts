// Generated by Mochi TypeScript compiler

function multiply(
  A: Array<Array<number>>,
  B: Array<Array<number>>,
): Array<Array<number>> {
  let m: number = A.length;
  if (m == 0) {
    return [];
  }
  let k: number = A[0].length;
  let n: number = B[0].length;
  let result: Array<Array<number>> = [];
  let i: number = 0;
  while (i < m) {
    let row: Array<number> = [];
    let j: number = 0;
    while (j < n) {
      row = row.concat([0]);
      j = j + 1;
    }
    result = result.concat([row]);
    i = i + 1;
  }
  i = 0;
  while (i < m) {
    let j: number = 0;
    while (j < k) {
      let a: number = A[i][j];
      if (a != 0) {
        let col: number = 0;
        while (col < n) {
          let b: number = B[j][col];
          if (b != 0) {
            result[i][col] = result[i][col] + a * b;
          }
          col = col + 1;
        }
      }
      j = j + 1;
    }
    i = i + 1;
  }
  return result;
}

function example(): void {
  if (
    !_equal(
      multiply(
        [
          [1, 0, 0],
          [-1, 0, 3],
        ],
        [
          [7, 0, 0],
          [0, 0, 0],
          [0, 0, 1],
        ],
      ),
      [
        [7, 0, 0],
        [-7, 0, 3],
      ],
    )
  ) {
    throw new Error("expect failed");
  }
}

function single(): void {
  if (!_equal(multiply([[2]], [[3]]), [[6]])) {
    throw new Error("expect failed");
  }
}

function zero(): void {
  if (!_equal(multiply([[0]], [[1]]), [[0]])) {
    throw new Error("expect failed");
  }
}

function _x2(): void {
  if (
    !_equal(
      multiply(
        [
          [1, 2],
          [3, 4],
        ],
        [
          [5, 6],
          [7, 8],
        ],
      ),
      [
        [19, 22],
        [43, 50],
      ],
    )
  ) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example();
  single();
  zero();
  _x2();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
