// Generated by Mochi TypeScript compiler

function lengthOfLongestSubstringKDistinct(s: string, k: number): number {
  if ((k <= 0)) {
    return 0;
  }
  let left: number = 0;
  (globalThis as any).left = left;
  let best: number = 0;
  (globalThis as any).best = best;
  let counts: Record<string, number> = {};
  (globalThis as any).counts = counts;
  let distinct: number = 0;
  (globalThis as any).distinct = distinct;
  let right: number = 0;
  (globalThis as any).right = right;
  while ((right < s.length)) {
    let ch: string = _indexString(s, right);
    (globalThis as any).ch = ch;
    if (Object.prototype.hasOwnProperty.call(counts, String(ch))) {
      if ((counts[ch] == 0)) {
        distinct = distinct + 1;
      }
      counts[ch] = counts[ch] + 1;
    } else {
      counts[ch] = 1;
      distinct = distinct + 1;
    }
    while ((distinct > k)) {
      let leftCh: string = _indexString(s, left);
      (globalThis as any).leftCh = leftCh;
      counts[leftCh] = counts[leftCh] - 1;
      if ((counts[leftCh] == 0)) {
        distinct = distinct - 1;
      }
      left = left + 1;
    }
    let length: number = (right - left) + 1;
    (globalThis as any).length = length;
    if ((length > best)) {
      best = length;
    }
    right = right + 1;
  }
  return best;
}

function test_example_1(): void {
  if (!(lengthOfLongestSubstringKDistinct("eceba", 2) == 3)) {
    throw new Error("expect failed");
  }
}

function test_example_2(): void {
  if (!(lengthOfLongestSubstringKDistinct("aa", 1) == 2)) {
    throw new Error("expect failed");
  }
}

function test_empty(): void {
  if (!(lengthOfLongestSubstringKDistinct("", 3) == 0)) {
    throw new Error("expect failed");
  }
}

function test_k_zero(): void {
  if (!(lengthOfLongestSubstringKDistinct("abc", 0) == 0)) {
    throw new Error("expect failed");
  }
}

function test_k_larger_than_distinct(): void {
  if (!(lengthOfLongestSubstringKDistinct("abc", 5) == 3)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  test_example_1();
  test_example_2();
  test_empty();
  test_k_zero();
  test_k_larger_than_distinct();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
