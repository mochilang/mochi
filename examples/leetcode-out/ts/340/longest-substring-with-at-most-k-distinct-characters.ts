// Generated by Mochi TypeScript compiler

function lengthOfLongestSubstringKDistinct(s: string, k: number) : number {
	if ((k <= 0)) {
		return 0
	}
	let left: number = 0
	let best: number = 0
	let counts: Record<string, number> = {}
	let distinct: number = 0
	let right: number = 0
	while ((right < s.length)) {
		let ch: string = s[right]
		if (Object.prototype.hasOwnProperty.call(counts, String(ch))) {
			if ((counts[ch] == 0)) {
				distinct = (distinct + 1)
			}
			counts[ch] = (counts[ch] + 1)
		} else {
			counts[ch] = 1
			distinct = (distinct + 1)
		}
		while ((distinct > k)) {
			let leftCh: string = s[left]
			counts[leftCh] = (counts[leftCh] - 1)
			if ((counts[leftCh] == 0)) {
				distinct = (distinct - 1)
			}
			left = (left + 1)
		}
		let length: number = ((right - left) + 1)
		if ((length > best)) {
			best = length
		}
		right = (right + 1)
	}
	return best
}

function example_1(): void {
	if (!((lengthOfLongestSubstringKDistinct("eceba", 2) == 3))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((lengthOfLongestSubstringKDistinct("aa", 1) == 2))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!((lengthOfLongestSubstringKDistinct("", 3) == 0))) { throw new Error('expect failed') }
}

function k_zero(): void {
	if (!((lengthOfLongestSubstringKDistinct("abc", 0) == 0))) { throw new Error('expect failed') }
}

function k_larger_than_distinct(): void {
	if (!((lengthOfLongestSubstringKDistinct("abc", 5) == 3))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	empty()
	k_zero()
	k_larger_than_distinct()
}
main()

