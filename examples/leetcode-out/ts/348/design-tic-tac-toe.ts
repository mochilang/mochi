// Generated by Mochi TypeScript compiler

function newGame(n: number): TicTacToe {
  let rs: Array<number> = [];
  let cs: Array<number> = [];
  for (let i: number = 0; i < n; i++) {
    rs = rs.concat([0]);
    cs = cs.concat([0]);
  }
  return { n: n, rows: rs, cols: cs, diag: 0, anti: 0 };
}

function setAt(xs: Array<number>, idx: number, val: number): Array<number> {
  return xs
    .slice(0, idx)
    .concat([val])
    .concat(xs.slice(idx + 1, xs.length));
}

function move(
  game: TicTacToe,
  row: number,
  col: number,
  player: number,
): MoveResult {
  let add: number = 0;
  if (player == 1) {
    add = 1;
  } else {
    add = -1;
  }
  let r: number = game.rows[row] + add;
  let c: number = game.cols[col] + add;
  let d: number = game.diag;
  let a: number = game.anti;
  if (row == col) {
    d = d + add;
  }
  if (row + col == game.n - 1) {
    a = a + add;
  }
  let newRows: Array<number> = setAt(game.rows, row, r);
  let newCols: Array<number> = setAt(game.cols, col, c);
  let newBoard: TicTacToe = {
    n: game.n,
    rows: newRows,
    cols: newCols,
    diag: d,
    anti: a,
  };
  let target: number = game.n;
  if (
    r == target ||
    r == -target ||
    c == target ||
    c == -target ||
    d == target ||
    d == -target ||
    a == target ||
    a == -target
  ) {
    return { board: newBoard, winner: player };
  }
  return { board: newBoard, winner: 0 };
}

function example(): void {
  let g: TicTacToe = newGame(3);
  let m1: MoveResult = move(g, 0, 0, 1);
  g = m1.board;
  if (!(m1.winner == 0)) {
    throw new Error("expect failed");
  }
  let m2: MoveResult = move(g, 0, 2, 2);
  g = m2.board;
  if (!(m2.winner == 0)) {
    throw new Error("expect failed");
  }
  let m3: MoveResult = move(g, 2, 2, 1);
  g = m3.board;
  if (!(m3.winner == 0)) {
    throw new Error("expect failed");
  }
  let m4: MoveResult = move(g, 1, 1, 2);
  g = m4.board;
  if (!(m4.winner == 0)) {
    throw new Error("expect failed");
  }
  let m5: MoveResult = move(g, 2, 0, 1);
  g = m5.board;
  if (!(m5.winner == 0)) {
    throw new Error("expect failed");
  }
  let m6: MoveResult = move(g, 1, 0, 2);
  g = m6.board;
  if (!(m6.winner == 0)) {
    throw new Error("expect failed");
  }
  let m7: MoveResult = move(g, 2, 1, 1);
  g = m7.board;
  if (!(m7.winner == 1)) {
    throw new Error("expect failed");
  }
}

function row_win(): void {
  let g: TicTacToe = newGame(3);
  let r1: MoveResult = move(g, 0, 0, 2);
  g = r1.board;
  let r2: MoveResult = move(g, 0, 1, 2);
  g = r2.board;
  let res: MoveResult = move(g, 0, 2, 2);
  g = res.board;
  if (!(res.winner == 2)) {
    throw new Error("expect failed");
  }
}

function column_win(): void {
  let g: TicTacToe = newGame(3);
  let r1: MoveResult = move(g, 0, 1, 1);
  g = r1.board;
  let r2: MoveResult = move(g, 1, 1, 1);
  g = r2.board;
  let res: MoveResult = move(g, 2, 1, 1);
  g = res.board;
  if (!(res.winner == 1)) {
    throw new Error("expect failed");
  }
}

function diagonal_win(): void {
  let g: TicTacToe = newGame(3);
  let r1: MoveResult = move(g, 0, 0, 1);
  g = r1.board;
  let r2: MoveResult = move(g, 1, 1, 1);
  g = r2.board;
  let res: MoveResult = move(g, 2, 2, 1);
  g = res.board;
  if (!(res.winner == 1)) {
    throw new Error("expect failed");
  }
}

function anti_diagonal_win(): void {
  let g: TicTacToe = newGame(3);
  let r1: MoveResult = move(g, 0, 2, 2);
  g = r1.board;
  let r2: MoveResult = move(g, 1, 1, 2);
  g = r2.board;
  let res: MoveResult = move(g, 2, 0, 2);
  g = res.board;
  if (!(res.winner == 2)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  type TicTacToe = {
    n: number;
    rows: Array<number>;
    cols: Array<number>;
    diag: number;
    anti: number;
  };
  type MoveResult = {
    board: any;
    winner: number;
  };
  example();
  row_win();
  column_win();
  diagonal_win();
  anti_diagonal_win();
}
main();
