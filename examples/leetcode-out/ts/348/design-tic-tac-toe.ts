// Generated by Mochi TypeScript compiler

type TicTacToe = {
  n: number;
  rows: Array<number>;
  cols: Array<number>;
  diag: number;
  anti: number;
};

type MoveResult = {
  board: TicTacToe;
  winner: number;
};

function newGame(n: number): TicTacToe {
  let rs: Array<number> = [];
  (globalThis as any).rs = rs;
  let cs: Array<number> = [];
  (globalThis as any).cs = cs;
  for (let i: number = 0; i < n; i++) {
    rs = rs.concat([0]);
    cs = cs.concat([0]);
  }
  return {
    n: n,
    rows: rs,
    cols: cs,
    diag: 0,
    anti: 0,
  };
}

function setAt(xs: Array<number>, idx: number, val: number): Array<number> {
  return xs.slice(0, idx).concat([val]).concat(xs.slice(idx + 1, xs.length));
}

function move(
  game: TicTacToe,
  row: number,
  col: number,
  player: number,
): MoveResult {
  let add: number = 0;
  (globalThis as any).add = add;
  if ((player == 1)) {
    add = 1;
  } else {
    add = -1;
  }
  let r: number = game.rows[row] + add;
  (globalThis as any).r = r;
  let c: number = game.cols[col] + add;
  (globalThis as any).c = c;
  let d: number = game.diag;
  (globalThis as any).d = d;
  let a: number = game.anti;
  (globalThis as any).a = a;
  if ((row == col)) {
    d = d + add;
  }
  if (((row + col) == (game.n - 1))) {
    a = a + add;
  }
  let newRows: Array<number> = setAt(game.rows, row, r);
  (globalThis as any).newRows = newRows;
  let newCols: Array<number> = setAt(game.cols, col, c);
  (globalThis as any).newCols = newCols;
  let newBoard: TicTacToe = {
    n: game.n,
    rows: newRows,
    cols: newCols,
    diag: d,
    anti: a,
  };
  (globalThis as any).newBoard = newBoard;
  let target: number = game.n;
  (globalThis as any).target = target;
  if (
    ((((((((r == target) || (r == (-target))) || (c == target)) ||
      (c == (-target))) || (d == target)) || (d == (-target))) ||
      (a == target)) || (a == (-target)))
  ) {
    return {
      board: newBoard,
      winner: player,
    };
  }
  return {
    board: newBoard,
    winner: 0,
  };
}

function test_example(): void {
  let g: TicTacToe = newGame(3);
  (globalThis as any).g = g;
  let m1: MoveResult = move(g, 0, 0, 1);
  (globalThis as any).m1 = m1;
  g = m1.board;
  if (!(m1.winner == 0)) throw new Error("expect failed");
  let m2: MoveResult = move(g, 0, 2, 2);
  (globalThis as any).m2 = m2;
  g = m2.board;
  if (!(m2.winner == 0)) throw new Error("expect failed");
  let m3: MoveResult = move(g, 2, 2, 1);
  (globalThis as any).m3 = m3;
  g = m3.board;
  if (!(m3.winner == 0)) throw new Error("expect failed");
  let m4: MoveResult = move(g, 1, 1, 2);
  (globalThis as any).m4 = m4;
  g = m4.board;
  if (!(m4.winner == 0)) throw new Error("expect failed");
  let m5: MoveResult = move(g, 2, 0, 1);
  (globalThis as any).m5 = m5;
  g = m5.board;
  if (!(m5.winner == 0)) throw new Error("expect failed");
  let m6: MoveResult = move(g, 1, 0, 2);
  (globalThis as any).m6 = m6;
  g = m6.board;
  if (!(m6.winner == 0)) throw new Error("expect failed");
  let m7: MoveResult = move(g, 2, 1, 1);
  (globalThis as any).m7 = m7;
  g = m7.board;
  if (!(m7.winner == 1)) throw new Error("expect failed");
}

function test_row_win(): void {
  let g: TicTacToe = newGame(3);
  (globalThis as any).g = g;
  let r1: MoveResult = move(g, 0, 0, 2);
  (globalThis as any).r1 = r1;
  g = r1.board;
  let r2: MoveResult = move(g, 0, 1, 2);
  (globalThis as any).r2 = r2;
  g = r2.board;
  let res: MoveResult = move(g, 0, 2, 2);
  (globalThis as any).res = res;
  g = res.board;
  if (!(res.winner == 2)) throw new Error("expect failed");
}

function test_column_win(): void {
  let g: TicTacToe = newGame(3);
  (globalThis as any).g = g;
  let r1: MoveResult = move(g, 0, 1, 1);
  (globalThis as any).r1 = r1;
  g = r1.board;
  let r2: MoveResult = move(g, 1, 1, 1);
  (globalThis as any).r2 = r2;
  g = r2.board;
  let res: MoveResult = move(g, 2, 1, 1);
  (globalThis as any).res = res;
  g = res.board;
  if (!(res.winner == 1)) throw new Error("expect failed");
}

function test_diagonal_win(): void {
  let g: TicTacToe = newGame(3);
  (globalThis as any).g = g;
  let r1: MoveResult = move(g, 0, 0, 1);
  (globalThis as any).r1 = r1;
  g = r1.board;
  let r2: MoveResult = move(g, 1, 1, 1);
  (globalThis as any).r2 = r2;
  g = r2.board;
  let res: MoveResult = move(g, 2, 2, 1);
  (globalThis as any).res = res;
  g = res.board;
  if (!(res.winner == 1)) throw new Error("expect failed");
}

function test_anti_diagonal_win(): void {
  let g: TicTacToe = newGame(3);
  (globalThis as any).g = g;
  let r1: MoveResult = move(g, 0, 2, 2);
  (globalThis as any).r1 = r1;
  g = r1.board;
  let r2: MoveResult = move(g, 1, 1, 2);
  (globalThis as any).r2 = r2;
  g = r2.board;
  let res: MoveResult = move(g, 2, 0, 2);
  (globalThis as any).res = res;
  g = res.board;
  if (!(res.winner == 2)) throw new Error("expect failed");
}

function main(): void {
  test_example();
  test_row_win();
  test_column_win();
  test_diagonal_win();
  test_anti_diagonal_win();
}
main();
