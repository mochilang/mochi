// Generated by Mochi TypeScript compiler

type MovingAverage = {
  size: number;
  nums: Array<number>;
  total: number;
};

type NextResult = {
  ma: MovingAverage;
  average: number;
};

function newMovingAverage(size: number): MovingAverage {
  return {
    size: size,
    nums: [],
    total: 0,
  };
}

function next(ma: MovingAverage, val: number): NextResult {
  let nums: Array<number> = ma.nums;
  (globalThis as any).nums = nums;
  let total: number = ma.total;
  (globalThis as any).total = total;
  if ((nums.length == ma.size)) {
    total = total - nums[0];
    nums = nums.slice(1, nums.length);
  }
  nums = nums.concat([val]);
  total = total + val;
  let updated: MovingAverage = {
    size: ma.size,
    nums: nums,
    total: total,
  };
  (globalThis as any).updated = updated;
  let avg: number = total / (nums.length);
  (globalThis as any).avg = avg;
  return {
    ma: updated,
    average: avg,
  };
}

function test_example(): void {
  let ma: MovingAverage = newMovingAverage(3);
  (globalThis as any).ma = ma;
  let r1: NextResult = next(ma, 1);
  (globalThis as any).r1 = r1;
  ma = r1.ma;
  if (!(r1.average == 1)) throw new Error("expect failed");
  let r2: NextResult = next(ma, 10);
  (globalThis as any).r2 = r2;
  ma = r2.ma;
  if (!(r2.average == 5.5)) throw new Error("expect failed");
  let r3: NextResult = next(ma, 3);
  (globalThis as any).r3 = r3;
  ma = r3.ma;
  if (!(r3.average == (14 / 3))) throw new Error("expect failed");
  let r4: NextResult = next(ma, 5);
  (globalThis as any).r4 = r4;
  ma = r4.ma;
  if (!(r4.average == 6)) throw new Error("expect failed");
}

function test_single_element_window(): void {
  let ma: MovingAverage = newMovingAverage(1);
  (globalThis as any).ma = ma;
  let r: NextResult = next(ma, 4);
  (globalThis as any).r = r;
  ma = r.ma;
  if (!(r.average == 4)) throw new Error("expect failed");
  let r2: NextResult = next(ma, 7);
  (globalThis as any).r2 = r2;
  ma = r2.ma;
  if (!(r2.average == 7)) throw new Error("expect failed");
}

function test_window_smaller_than_inputs(): void {
  let ma: MovingAverage = newMovingAverage(2);
  (globalThis as any).ma = ma;
  let a: NextResult = next(ma, 3);
  (globalThis as any).a = a;
  ma = a.ma;
  if (!(a.average == 3)) throw new Error("expect failed");
  let b: NextResult = next(ma, 5);
  (globalThis as any).b = b;
  ma = b.ma;
  if (!(b.average == 4)) throw new Error("expect failed");
  let c: NextResult = next(ma, 7);
  (globalThis as any).c = c;
  ma = c.ma;
  if (!(c.average == 6)) throw new Error("expect failed");
}

function main(): void {
  test_example();
  test_single_element_window();
  test_window_smaller_than_inputs();
}
main();
