// Generated by Mochi TypeScript compiler

type Entry = {
  key: number;
  val: number;
};

type LRUCache = {
  cap: number;
  items: Array<Entry>;
};

type LookupResult = {
  val: number;
  cache: LRUCache;
};

function newCache(cap: number): LRUCache {
  return {
    cap: cap,
    items: [],
  };
}

function find(items: Array<Entry>, k: number): number {
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < items.length)) {
    let e: Entry = items[i];
    (globalThis as any).e = e;
    if ((e.key == k)) {
      return i;
    }
    i = i + 1;
  }
  return (-1);
}

function get(cache: LRUCache, key: number): LookupResult {
  let idx: number = find(cache.items, key);
  (globalThis as any).idx = idx;
  if ((idx == (0 - 1))) {
    return {
      val: (0 - 1),
      cache: cache,
    };
  }
  let entry: Entry = cache.items[idx];
  (globalThis as any).entry = entry;
  let items: Array<Entry> = [entry].concat(cache.items.slice(0, idx)).concat(
    cache.items.slice(idx + 1, cache.items.length),
  );
  (globalThis as any).items = items;
  return {
    val: entry.val,
    cache: {
      cap: cache.cap,
      items: items,
    },
  };
}

function put(cache: LRUCache, key: number, value: number): LRUCache {
  let items: Array<Entry> = cache.items;
  (globalThis as any).items = items;
  let idx: number = find(items, key);
  (globalThis as any).idx = idx;
  if ((idx != (0 - 1))) {
    items = items.slice(0, idx).concat(items.slice(idx + 1, items.length));
  }
  items = [
    {
      key: key,
      val: value,
    },
  ].concat(items);
  if ((items.length > cache.cap)) {
    items = items.slice(0, cache.cap);
  }
  return {
    cap: cache.cap,
    items: items,
  };
}

function test_example(): void {
  let c: LRUCache = newCache(2);
  (globalThis as any).c = c;
  let r1: LookupResult = get(c, 1);
  (globalThis as any).r1 = r1;
  if (!(r1.val == (0 - 1))) throw new Error("expect failed");
  c = r1.cache;
  c = put(c, 1, 1);
  c = put(c, 2, 2);
  let r2: LookupResult = get(c, 1);
  (globalThis as any).r2 = r2;
  if (!(r2.val == 1)) throw new Error("expect failed");
  c = r2.cache;
  c = put(c, 3, 3);
  let r3: LookupResult = get(c, 2);
  (globalThis as any).r3 = r3;
  if (!(r3.val == (0 - 1))) throw new Error("expect failed");
  c = r3.cache;
  c = put(c, 4, 4);
  let r4: LookupResult = get(c, 1);
  (globalThis as any).r4 = r4;
  if (!(r4.val == (0 - 1))) throw new Error("expect failed");
  c = r4.cache;
  let r5: LookupResult = get(c, 3);
  (globalThis as any).r5 = r5;
  if (!(r5.val == 3)) throw new Error("expect failed");
  c = r5.cache;
  let r6: LookupResult = get(c, 4);
  (globalThis as any).r6 = r6;
  if (!(r6.val == 4)) throw new Error("expect failed");
}

function main(): void {
  test_example();
}
main();
