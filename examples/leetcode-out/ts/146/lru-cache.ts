// Generated by Mochi TypeScript compiler

function newCache(cap: number) : LRUCache {
	return {cap: cap, items: []}
}

function find(items: Array<Entry>, k: number) : number {
	let i: number = 0
	while ((i < items.length)) {
		let e: Entry = items[i]
		if ((e.key == k)) {
			return i
		}
		i = (i + 1)
	}
	return (-1)
}

function get(cache: LRUCache, key: number) : LookupResult {
	let idx: number = find(cache.items, key)
	if ((idx == (0 - 1))) {
		return {val: (0 - 1), cache: cache}
	}
	let entry: Entry = cache.items[idx]
	let items: Array<Entry> = [entry].concat(cache.items.slice(0, idx)).concat(cache.items.slice((idx + 1), cache.items.length))
	return {val: entry.val, cache: {cap: cache.cap, items: items}}
}

function put(cache: LRUCache, key: number, value: number) : LRUCache {
	let items: Array<Entry> = cache.items
	let idx: number = find(items, key)
	if ((idx != (0 - 1))) {
		items = items.slice(0, idx).concat(items.slice((idx + 1), items.length))
	}
	items = [{key: key, val: value}].concat(items)
	if ((items.length > cache.cap)) {
		items = items.slice(0, cache.cap)
	}
	return {cap: cache.cap, items: items}
}

function example(): void {
	let c: LRUCache = newCache(2)
	let r1: LookupResult = get(c, 1)
	if (!((r1.val == (0 - 1)))) { throw new Error('expect failed') }
	c = r1.cache
	c = put(c, 1, 1)
	c = put(c, 2, 2)
	let r2: LookupResult = get(c, 1)
	if (!((r2.val == 1))) { throw new Error('expect failed') }
	c = r2.cache
	c = put(c, 3, 3)
	let r3: LookupResult = get(c, 2)
	if (!((r3.val == (0 - 1)))) { throw new Error('expect failed') }
	c = r3.cache
	c = put(c, 4, 4)
	let r4: LookupResult = get(c, 1)
	if (!((r4.val == (0 - 1)))) { throw new Error('expect failed') }
	c = r4.cache
	let r5: LookupResult = get(c, 3)
	if (!((r5.val == 3))) { throw new Error('expect failed') }
	c = r5.cache
	let r6: LookupResult = get(c, 4)
	if (!((r6.val == 4))) { throw new Error('expect failed') }
}

function main(): void {
	type Entry = {
		key: number;
		val: number;
	}
	type LRUCache = {
		cap: number;
		items: Array<any>;
	}
	type LookupResult = {
		val: number;
		cache: any;
	}
	example()
}
main()

