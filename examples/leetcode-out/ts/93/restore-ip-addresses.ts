// Generated by Mochi TypeScript compiler

function restoreIpAddresses(s: string): Array<string> {
  let result: Array<string> = [];
  let digits: Record<string, number> = {
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  };
  function backtrack(start: number, part: number, current: string): number {
    if (part == 4) {
      if (start == s.length) {
        result = result.concat([current.slice(1, current.length)]);
      }
      return 0;
    }
    for (let l: number = 1; l < 4; l++) {
      if (start + l > s.length) {
        break;
      }
      let segment: string = s.slice(start, start + l);
      if (segment.length > 1 && segment[0] == "0") {
        continue;
      }
      let val: number = 0;
      for (const ch of segment) {
        val = val * 10 + digits[ch];
      }
      if (val > 255) {
        continue;
      }
      backtrack(start + l, part + 1, current + "." + segment);
    }
    return 0;
  }
  backtrack(0, 0, "");
  return result;
}

function example_1(): void {
  if (
    !_equal(restoreIpAddresses("25525511135"), [
      "255.255.11.135",
      "255.255.111.35",
    ])
  ) {
    throw new Error("expect failed");
  }
}

function all_zeros(): void {
  if (!_equal(restoreIpAddresses("0000"), ["0.0.0.0"])) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (
    !_equal(restoreIpAddresses("101023"), [
      "1.0.10.23",
      "1.0.102.3",
      "10.1.0.23",
      "10.10.2.3",
      "101.0.2.3",
    ])
  ) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  all_zeros();
  example_2();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
