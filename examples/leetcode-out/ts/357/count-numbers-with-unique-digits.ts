// Generated by Mochi TypeScript compiler

function countNumbersWithUniqueDigits(n: number): number {
  if ((n == 0)) {
    return 1;
  }
  if ((n > 10)) {
    n = 10;
  }
  let result: number = 10;
  (globalThis as any).result = result;
  let unique: number = 9;
  (globalThis as any).unique = unique;
  let available: number = 9;
  (globalThis as any).available = available;
  let i: number = 2;
  (globalThis as any).i = i;
  while ((i <= n)) {
    unique = unique * available;
    result = result + unique;
    available = available - 1;
    i = i + 1;
  }
  return result;
}

function test_example_1(): void {
  if (!(countNumbersWithUniqueDigits(2) == 91)) {
    throw new Error("expect failed");
  }
}

function test_example_2(): void {
  if (!(countNumbersWithUniqueDigits(0) == 1)) throw new Error("expect failed");
}

function test_three_digits(): void {
  if (!(countNumbersWithUniqueDigits(3) == 739)) {
    throw new Error("expect failed");
  }
}

function test_up_to_ten_digits(): void {
  if (!(countNumbersWithUniqueDigits(10) == 8877691)) {
    throw new Error("expect failed");
  }
}

function test_more_than_ten(): void {
  if (!(countNumbersWithUniqueDigits(11) == 8877691)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  test_example_1();
  test_example_2();
  test_three_digits();
  test_up_to_ten_digits();
  test_more_than_ten();
}
main();
