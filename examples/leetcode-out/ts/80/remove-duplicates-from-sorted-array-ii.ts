// Generated by Mochi TypeScript compiler

function removeDuplicates(nums: Array<number>): number {
  let n: number = nums.length;
  if (n <= 2) {
    return n;
  }
  let write: number = 2;
  let read: number = 2;
  while (read < n) {
    if (nums[read] != nums[write - 2]) {
      nums[write] = nums[read];
      write = write + 1;
    }
    read = read + 1;
  }
  return write;
}

function example_1(): void {
  let nums: Array<number> = [1, 1, 1, 2, 2, 3];
  let k: number = removeDuplicates(nums);
  if (!(k == 5)) {
    throw new Error("expect failed");
  }
  if (!_equal(nums.slice(0, k), [1, 1, 2, 2, 3])) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  let nums: Array<number> = [0, 0, 1, 1, 1, 1, 2, 3, 3];
  let k: number = removeDuplicates(nums);
  if (!(k == 7)) {
    throw new Error("expect failed");
  }
  if (!_equal(nums.slice(0, k), [0, 0, 1, 1, 2, 3, 3])) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
