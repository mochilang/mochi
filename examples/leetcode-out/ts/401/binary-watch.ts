// Generated by Mochi TypeScript compiler

function countBits(n: number): number {
  let bits: number = 0;
  (globalThis as any).bits = bits;
  let x: number = n;
  (globalThis as any).x = x;
  while ((x > 0)) {
    if (((x % 2) == 1)) {
      bits = bits + 1;
    }
    x = Math.trunc(x / 2);
  }
  return bits;
}

function readBinaryWatch(turnedOn: number): Array<string> {
  let out: Array<string> = [];
  (globalThis as any).out = out;
  let h: number = 0;
  (globalThis as any).h = h;
  while ((h < 12)) {
    let m: number = 0;
    (globalThis as any).m = m;
    while ((m < 60)) {
      let total: number = countBits(h) + countBits(m);
      (globalThis as any).total = total;
      if ((total == turnedOn)) {
        let time: string = String(h) + ":";
        (globalThis as any).time = time;
        if ((m < 10)) {
          time = time + "0" + String(m);
        } else {
          time = time + String(m);
        }
        out = out.concat([time]);
      }
      m = m + 1;
    }
    h = h + 1;
  }
  return out;
}

function test_example_1(): void {
  let result: Array<string> = readBinaryWatch(1);
  (globalThis as any).result = result;
  let sorted: Array<string> = (() => {
    const _src = result;
    let _items = [];
    for (const t of _src) {
      _items.push(t);
    }
    let _pairs = _items.map((it) => {
      const t = it;
      return { item: it, key: t };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const t of _items) {
      _res.push(t);
    }
    return _res;
  })();
  (globalThis as any).sorted = sorted;
  if (
    !(_equal(sorted, [
      "0:01",
      "0:02",
      "0:04",
      "0:08",
      "0:16",
      "0:32",
      "1:00",
      "2:00",
      "4:00",
      "8:00",
    ]))
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  let result: Array<string> = readBinaryWatch(9);
  (globalThis as any).result = result;
  if (!(_equal(result, []))) throw new Error("expect failed");
}

function test_zero_leds(): void {
  if (!(_equal(readBinaryWatch(0), ["0:00"]))) throw new Error("expect failed");
}

function test_three_leds(): void {
  let out: Array<string> = readBinaryWatch(3);
  (globalThis as any).out = out;
  if (!(out.length == 112)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_zero_leds();
  test_three_leds();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
