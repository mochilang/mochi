// Generated by Mochi TypeScript compiler

function threeSumSmaller(nums: Array<number>, target: number): number {
  let sorted: Array<any> = (() => {
    const _src = nums;
    let _items = [];
    for (const x of _src) {
      _items.push(x);
    }
    let _pairs = _items.map((it) => {
      const x = it;
      return { item: it, key: x };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string")
        return ak < bk ? -1 : ak > bk ? 1 : 0;
      return String(ak) < String(bk) ? -1 : String(ak) > String(bk) ? 1 : 0;
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const x of _items) {
      _res.push(x);
    }
    return _res;
  })();
  let n: number = sorted.length;
  let count: number = 0;
  let i: number = 0;
  while (i < n - 2) {
    let left: number = i + 1;
    let right: number = n - 1;
    while (left < right) {
      let sum: any = sorted[i] + sorted[left] + sorted[right];
      if (sum < target) {
        count = count + (right - left);
        left = left + 1;
      } else {
        right = right - 1;
      }
    }
    i = i + 1;
  }
  return count;
}

function example_1(): void {
  if (!(threeSumSmaller([-2, 0, 1, 3], 2) == 2)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(threeSumSmaller([], 0) == 0)) {
    throw new Error("expect failed");
  }
}

function example_3(): void {
  if (!(threeSumSmaller([0], 0) == 0)) {
    throw new Error("expect failed");
  }
}

function all_negatives(): void {
  if (!(threeSumSmaller([-5, -4, -3, -2], -1) == 4)) {
    throw new Error("expect failed");
  }
}

function mixed_numbers(): void {
  if (!(threeSumSmaller([-2, 0, 1, 3], 1) == 1)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  example_3();
  all_negatives();
  mixed_numbers();
}
main();
