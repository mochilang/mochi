// Generated by Mochi TypeScript compiler

function threeSumSmaller(nums: Array<number>, target: number): number {
  let sorted: Array<number> = (() => {
    const _src = nums;
    let _items = [];
    for (const x of _src) {
      _items.push(x);
    }
    let _pairs = _items.map((it) => {
      const x = it;
      return { item: it, key: x };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const x of _items) {
      _res.push(x);
    }
    return _res;
  })();
  (globalThis as any).sorted = sorted;
  let n: number = sorted.length;
  (globalThis as any).n = n;
  let count: number = 0;
  (globalThis as any).count = count;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < (n - 2))) {
    let left: number = i + 1;
    (globalThis as any).left = left;
    let right: number = n - 1;
    (globalThis as any).right = right;
    while ((left < right)) {
      let sum: number = (sorted[i] + sorted[left]) + sorted[right];
      (globalThis as any).sum = sum;
      if ((sum < target)) {
        count = count + (right - left);
        left = left + 1;
      } else {
        right = right - 1;
      }
    }
    i = i + 1;
  }
  return count;
}

function test_example_1(): void {
  if (
    !(threeSumSmaller([
      -2,
      0,
      1,
      3,
    ], 2) == 2)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(threeSumSmaller([], 0) == 0)) throw new Error("expect failed");
}

function test_example_3(): void {
  if (!(threeSumSmaller([0], 0) == 0)) throw new Error("expect failed");
}

function test_all_negatives(): void {
  if (
    !(threeSumSmaller([
      -5,
      -4,
      -3,
      -2,
    ], -1) == 4)
  ) throw new Error("expect failed");
}

function test_mixed_numbers(): void {
  if (
    !(threeSumSmaller([
      -2,
      0,
      1,
      3,
    ], 1) == 1)
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_all_negatives();
  test_mixed_numbers();
}
main();
