// Generated by Mochi TypeScript compiler

function minWindow(s: string, t: string): string {
  if ((t.length == 0)) {
    return "";
  }
  let need: Record<string, number> = {};
  (globalThis as any).need = need;
  for (const ch of t) {
    if (Object.prototype.hasOwnProperty.call(need, String(ch))) {
      need[ch] = need[ch] + 1;
    } else {
      need[ch] = 1;
    }
  }
  let required: number = Object.keys(need).length;
  (globalThis as any).required = required;
  let have: Record<string, number> = {};
  (globalThis as any).have = have;
  let formed: number = 0;
  (globalThis as any).formed = formed;
  let left: number = 0;
  (globalThis as any).left = left;
  let bestStart: number = 0;
  (globalThis as any).bestStart = bestStart;
  let bestLen: number = s.length + 1;
  (globalThis as any).bestLen = bestLen;
  let right: number = 0;
  (globalThis as any).right = right;
  while ((right < s.length)) {
    let ch: string = _indexString(s, right);
    (globalThis as any).ch = ch;
    if (Object.prototype.hasOwnProperty.call(need, String(ch))) {
      if (Object.prototype.hasOwnProperty.call(have, String(ch))) {
        have[ch] = have[ch] + 1;
      } else {
        have[ch] = 1;
      }
      if ((have[ch] == need[ch])) {
        formed = formed + 1;
      }
    }
    while (((formed == required) && (left <= right))) {
      if ((((right - left) + 1) < bestLen)) {
        bestLen = (right - left) + 1;
        bestStart = left;
      }
      let leftCh: string = _indexString(s, left);
      (globalThis as any).leftCh = leftCh;
      if (Object.prototype.hasOwnProperty.call(need, String(leftCh))) {
        have[leftCh] = have[leftCh] - 1;
        if ((have[leftCh] < need[leftCh])) {
          formed = formed - 1;
        }
      }
      left = left + 1;
    }
    right = right + 1;
  }
  if ((bestLen == (s.length + 1))) {
    return "";
  }
  return _sliceString(s, bestStart, bestStart + bestLen);
}

function test_example_1(): void {
  if (!(minWindow("ADOBECODEBANC", "ABC") == "BANC")) {
    throw new Error("expect failed");
  }
}

function test_example_2(): void {
  if (!(minWindow("a", "a") == "a")) throw new Error("expect failed");
}

function test_example_3(): void {
  if (!(minWindow("a", "aa") == "")) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

function _sliceString(s: string, i: number, j: number): string {
  let start = i;
  let end = j;
  const runes = Array.from(s);
  const n = runes.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (end > n) end = n;
  if (end < start) end = start;
  return runes.slice(start, end).join("");
}

main();
