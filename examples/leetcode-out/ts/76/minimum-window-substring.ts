// Generated by Mochi TypeScript compiler

function minWindow(s: string, t: string) : string {
	if ((t.length == 0)) {
		return ""
	}
	let need: Record<string, number> = {}
	for (const ch of t) {
		if (Object.prototype.hasOwnProperty.call(need, String(ch))) {
			need[ch] = (need[ch] + 1)
		} else {
			need[ch] = 1
		}
	}
	let required: number = Object.keys(need).length
	let have: Record<string, number> = {}
	let formed: number = 0
	let left: number = 0
	let bestStart: number = 0
	let bestLen: number = (s.length + 1)
	let right: number = 0
	while ((right < s.length)) {
		let ch: string = s[right]
		if (Object.prototype.hasOwnProperty.call(need, String(ch))) {
			if (Object.prototype.hasOwnProperty.call(have, String(ch))) {
				have[ch] = (have[ch] + 1)
			} else {
				have[ch] = 1
			}
			if ((have[ch] == need[ch])) {
				formed = (formed + 1)
			}
		}
		while (((formed == required) && (left <= right))) {
			if ((((right - left) + 1) < bestLen)) {
				bestLen = ((right - left) + 1)
				bestStart = left
			}
			let leftCh: string = s[left]
			if (Object.prototype.hasOwnProperty.call(need, String(leftCh))) {
				have[leftCh] = (have[leftCh] - 1)
				if ((have[leftCh] < need[leftCh])) {
					formed = (formed - 1)
				}
			}
			left = (left + 1)
		}
		right = (right + 1)
	}
	if ((bestLen == (s.length + 1))) {
		return ""
	}
	return s.slice(bestStart, (bestStart + bestLen))
}

function example_1(): void {
	if (!((minWindow("ADOBECODEBANC", "ABC") == "BANC"))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((minWindow("a", "a") == "a"))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((minWindow("a", "aa") == ""))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
}
main()

