// Generated by Mochi TypeScript compiler

function searchMatrix(matrix: Array<Array<number>>, target: number) : boolean {
	let m: number = matrix.length
	if ((m == 0)) {
		return false
	}
	let n: number = matrix[0].length
	let row: number = 0
	let col: number = (n - 1)
	while (((row < m) && (col >= 0))) {
		let value: number = matrix[row][col]
		if ((value == target)) {
			return true
		} else 		if ((value > target)) {
			col = (col - 1)
		} else {
			row = (row + 1)
		}
	}
	return false
}

function example_1(): void {
	if (!((searchMatrix([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 5) == true))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((searchMatrix([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 20) == false))) { throw new Error('expect failed') }
}

function single_element_found(): void {
	if (!((searchMatrix([[5]], 5) == true))) { throw new Error('expect failed') }
}

function single_element_missing(): void {
	if (!((searchMatrix([[5]], 3) == false))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	single_element_found()
	single_element_missing()
}
main()

