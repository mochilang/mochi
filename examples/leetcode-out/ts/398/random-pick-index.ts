// Generated by Mochi TypeScript compiler

type RandomPicker = {
  nums: Array<number>;
};

function newPicker(nums: Array<number>): RandomPicker {
  return { nums: nums };
}

function pick(p: RandomPicker, target: number): number {
  let matches: Array<number> = [];
  (globalThis as any).matches = matches;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < p.nums.length)) {
    if ((p.nums[i] == target)) {
      matches = matches.concat([i]);
    }
    i = i + 1;
  }
  if ((matches.length == 0)) {
    return (-1);
  }
  let idx: number = performance.now() * 1000000 % matches.length;
  (globalThis as any).idx = idx;
  return matches[idx];
}

function test_example(): void {
  let p: RandomPicker = newPicker([
    1,
    2,
    3,
    3,
    3,
  ]);
  (globalThis as any).p = p;
  let idx: number = pick(p, 3);
  (globalThis as any).idx = idx;
  if (!(((idx == 2) || (idx == 3)) || (idx == 4))) {
    throw new Error("expect failed");
  }
}

function test_single_match(): void {
  let p: RandomPicker = newPicker([
    2,
    5,
    7,
  ]);
  (globalThis as any).p = p;
  if (!(pick(p, 5) == 1)) throw new Error("expect failed");
}

function test_no_match(): void {
  let p: RandomPicker = newPicker([
    1,
    2,
  ]);
  (globalThis as any).p = p;
  if (!(pick(p, 3) == (-1))) throw new Error("expect failed");
}

function main(): void {
  test_example();
  test_single_match();
  test_no_match();
}
main();
