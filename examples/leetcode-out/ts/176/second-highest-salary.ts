// Generated by Mochi TypeScript compiler

type Employee = {
  id: number;
  salary: number;
};

function secondHighestSalary(employees: Array<Employee>): number {
  if ((employees.length < 2)) {
    return 0;
  }
  let firstEmp: Employee = employees[0];
  (globalThis as any).firstEmp = firstEmp;
  let first: number = firstEmp.salary;
  (globalThis as any).first = first;
  let second: number = first;
  (globalThis as any).second = second;
  let i: number = 1;
  (globalThis as any).i = i;
  while ((i < employees.length)) {
    let emp: Employee = employees[i];
    (globalThis as any).emp = emp;
    let s: number = emp.salary;
    (globalThis as any).s = s;
    if ((s > first)) {
      second = first;
      first = s;
    } else if (((s != first) && ((second == first) || (s > second)))) {
      second = s;
    }
    i = i + 1;
  }
  if ((second == first)) {
    return 0;
  }
  return second;
}

function test_example(): void {
  if (!(secondHighestSalary(employees) == 200)) {
    throw new Error("expect failed");
  }
}

function test_no_second_salary(): void {
  if (
    !(secondHighestSalary([
      {
        id: 1,
        salary: 100,
      },
    ]) == 0)
  ) throw new Error("expect failed");
}

function test_duplicates(): void {
  let list: Array<Employee> = [
    {
      id: 1,
      salary: 100,
    },
    {
      id: 2,
      salary: 100,
    },
    {
      id: 3,
      salary: 100,
    },
  ];
  (globalThis as any).list = list;
  if (!(secondHighestSalary(list) == 0)) throw new Error("expect failed");
}

function main(): void {
  let employees: Array<Employee> = [
    {
      id: 1,
      salary: 100,
    },
    {
      id: 2,
      salary: 200,
    },
    {
      id: 3,
      salary: 300,
    },
    {
      id: 4,
      salary: 200,
    },
  ];
  (globalThis as any).employees = employees;
  test_example();
  test_no_second_salary();
  test_duplicates();
}
main();
