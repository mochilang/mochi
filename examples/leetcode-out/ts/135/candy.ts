// Generated by Mochi TypeScript compiler

function candy(ratings: Array<number>): number {
  let n: number = ratings.length;
  if (n == 0) {
    return 0;
  }
  let candies: Array<number> = [];
  let i: number = 0;
  while (i < n) {
    candies = candies.concat([1]);
    i = i + 1;
  }
  i = 1;
  while (i < n) {
    if (ratings[i] > ratings[i - 1]) {
      candies[i] = candies[i - 1] + 1;
    }
    i = i + 1;
  }
  let j: number = n - 2;
  while (j >= 0) {
    if (ratings[j] > ratings[j + 1] && candies[j] <= candies[j + 1]) {
      candies[j] = candies[j + 1] + 1;
    }
    j = j - 1;
  }
  let total: number = 0;
  for (const c of candies) {
    total = total + c;
  }
  return total;
}

function example_1(): void {
  if (!(candy([1, 0, 2]) == 5)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(candy([1, 2, 2]) == 4)) {
    throw new Error("expect failed");
  }
}

function all_equal(): void {
  if (!(candy([1, 1, 1]) == 3)) {
    throw new Error("expect failed");
  }
}

function descending(): void {
  if (!(candy([5, 4, 3, 2, 1]) == 15)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  all_equal();
  descending();
}
main();
