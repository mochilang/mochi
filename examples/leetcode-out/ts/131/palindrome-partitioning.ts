// Generated by Mochi TypeScript compiler

function partition(s: string): Array<Array<string>> {
  let n: number = s.length;
  let result: Array<Array<string>> = [];
  function isPal(left: number, right: number): boolean {
    let l: number = left;
    let r: number = right;
    while (l < r) {
      if (s[l] != s[r]) {
        return false;
      }
      l = l + 1;
      r = r - 1;
    }
    return true;
  }
  function dfs(start: number, path: Array<string>): void {
    if (start == n) {
      result = result.concat([path]);
    } else {
      let end: number = start;
      while (end < n) {
        if (isPal(start, end)) {
          dfs(end + 1, path.concat([s.slice(start, end + 1)]));
        }
        end = end + 1;
      }
    }
  }
  dfs(0, []);
  return result;
}

function example_1(): void {
  if (
    !_equal(partition("aab"), [
      ["a", "a", "b"],
      ["aa", "b"],
    ])
  ) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!_equal(partition("a"), [["a"]])) {
    throw new Error("expect failed");
  }
}

function no_palindrome(): void {
  if (!_equal(partition("abc"), [["a", "b", "c"]])) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  no_palindrome();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
