// Generated by Mochi TypeScript compiler

let example: Array<Array<number>> = [[1, 5, 9], [10, 11, 13], [12, 13, 15]]

function kthSmallest(matrix: Array<Array<number>>, k: number) : number {
	let flat: Array<number> = []
	for (const row of matrix) {
		flat = flat.concat(row)
	}
	let nums: Array<any> = (() => {
	const _src = flat;
	let _items = [];
	for (const n of _src) {
		_items.push(n);
	}
	let _pairs = _items.map(it => { const n = it; return {item: it, key: n}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	const _res = [];
	for (const n of _items) {
		_res.push(n)
	}
	return _res;
})()
	return nums[(k - 1)]
}

function example(): void {
	if (!((kthSmallest(example, 8) == 13))) { throw new Error('expect failed') }
}

function single_value(): void {
	if (!((kthSmallest([[7]], 1) == 7))) { throw new Error('expect failed') }
}

function main(): void {
	example()
	single_value()
}
main()

