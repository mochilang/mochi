// Generated by Mochi TypeScript compiler

let trees: Array<Tree> = generateTrees(3);

function build(start: number, end: number): Array<Tree> {
  if (start > end) {
    return [{ __name: "Empty" }];
  }
  let result: Array<any> = [];
  for (let i: number = start; i < end + 1; i++) {
    let leftTrees: Array<Tree> = build(start, i - 1);
    let rightTrees: Array<Tree> = build(i + 1, end);
    for (const l of leftTrees) {
      for (const r of rightTrees) {
        result = result.concat([{ __name: "Node", left: l, val: i, right: r }]);
      }
    }
  }
  return result;
}

function generateTrees(n: number): Array<Tree> {
  if (n == 0) {
    return [];
  }
  return build(1, n);
}

function main(): void {
  type Empty = {
    __name: "Empty";
  };

  type Node = {
    __name: "Node";
    left: any;
    val: number;
    right: any;
  };

  type Tree = Empty | Node;
  console.log(trees.length);
}
main();
