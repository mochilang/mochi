// Generated by Mochi TypeScript compiler

type Empty = {
  __name: "Empty";
};

type _Node = {
  __name: "Node";
  left: Tree;
  val: number;
  right: Tree;
};

type Tree = Empty | _Node;

function build(start: number, end: number): Array<Tree> {
  if ((start > end)) {
    return [{ __name: "Empty" }];
  }
  let result: Array<Tree> = [];
  (globalThis as any).result = result;
  for (let i: number = start; i < (end + 1); i++) {
    let leftTrees: Array<Tree> = build(start, i - 1);
    (globalThis as any).leftTrees = leftTrees;
    let rightTrees: Array<Tree> = build(i + 1, end);
    (globalThis as any).rightTrees = rightTrees;
    for (const l of leftTrees) {
      for (const r of rightTrees) {
        result = result.concat([{ __name: "Node", left: l, val: i, right: r }]);
      }
    }
  }
  return result;
}

function generateTrees(n: number): Array<Tree> {
  if ((n == 0)) {
    return [];
  }
  return build(1, n);
}

function main(): void {
  let trees: Array<Tree> = generateTrees(3);
  (globalThis as any).trees = trees;
  console.log(trees.length);
}
main();
