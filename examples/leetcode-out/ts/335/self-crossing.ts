// Generated by Mochi TypeScript compiler

function isSelfCrossing(distance: Array<number>): boolean {
  let n: number = distance.length;
  (globalThis as any).n = n;
  if ((n < 4)) {
    return false;
  }
  let i: number = 3;
  (globalThis as any).i = i;
  while ((i < n)) {
    if (
      ((distance[i] >= distance[i - 2]) && (distance[i - 1] <= distance[i - 3]))
    ) {
      return true;
    }
    if (
      (((i >= 4) && (distance[i - 1] == distance[i - 3])) &&
        ((distance[i] + distance[i - 4]) >= distance[i - 2]))
    ) {
      return true;
    }
    if (
      (((((i >= 5) && (distance[i - 2] >= distance[i - 4])) &&
        (distance[i - 1] <= distance[i - 3])) &&
        ((distance[i] + distance[i - 4]) >= distance[i - 2])) &&
        ((distance[i - 1] + distance[i - 5]) >= distance[i - 3]))
    ) {
      return true;
    }
    i = i + 1;
  }
  return false;
}

function test_example_1(): void {
  if (
    !(isSelfCrossing([
      2,
      1,
      1,
      2,
    ]) == true)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(isSelfCrossing([
      1,
      2,
      3,
      4,
    ]) == false)
  ) throw new Error("expect failed");
}

function test_example_3(): void {
  if (
    !(isSelfCrossing([
      1,
      1,
      1,
      2,
      1,
    ]) == true)
  ) throw new Error("expect failed");
}

function test_short(): void {
  if (
    !(isSelfCrossing([
      1,
      2,
      1,
    ]) == false)
  ) throw new Error("expect failed");
}

function test_no_crossing(): void {
  if (
    !(isSelfCrossing([
      3,
      3,
      4,
      2,
      2,
    ]) == false)
  ) throw new Error("expect failed");
}

function test_cross_late(): void {
  if (
    !(isSelfCrossing([
      1,
      1,
      2,
      1,
      1,
    ]) == true)
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_short();
  test_no_crossing();
  test_cross_late();
}
main();
