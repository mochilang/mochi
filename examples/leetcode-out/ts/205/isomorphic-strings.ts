// Generated by Mochi TypeScript compiler

function isIsomorphic(s: string, t: string) : boolean {
	let m: number = s.length
	if ((m != t.length)) {
		return false
	}
	let mapST: Record<string, string> = {}
	let mapTS: Record<string, string> = {}
	let i: number = 0
	while ((i < m)) {
		let c1: string = s[i]
		let c2: string = t[i]
		if (Object.prototype.hasOwnProperty.call(mapST, String(c1))) {
			if ((mapST[c1] != c2)) {
				return false
			}
		} else {
			if (Object.prototype.hasOwnProperty.call(mapTS, String(c2))) {
				return false
			}
			mapST[c1] = c2
			mapTS[c2] = c1
		}
		i = (i + 1)
	}
	return true
}

function example_1(): void {
	if (!((isIsomorphic("egg", "add") == true))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((isIsomorphic("foo", "bar") == false))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((isIsomorphic("paper", "title") == true))) { throw new Error('expect failed') }
}

function single_letter(): void {
	if (!((isIsomorphic("a", "b") == true))) { throw new Error('expect failed') }
}

function mismatch_length(): void {
	if (!((isIsomorphic("ab", "a") == false))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	single_letter()
	mismatch_length()
}
main()

