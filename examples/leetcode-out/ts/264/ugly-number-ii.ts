// Generated by Mochi TypeScript compiler

function min3(a: number, b: number, c: number): number {
  let m: number = a;
  if (b < m) {
    m = b;
  }
  if (c < m) {
    m = c;
  }
  return m;
}

function nthUglyNumber(n: number): number {
  let i2: number = 0;
  let i3: number = 0;
  let i5: number = 0;
  let uglies: Array<number> = [1];
  let count: number = 1;
  while (count < n) {
    let next2: number = uglies[i2] * 2;
    let next3: number = uglies[i3] * 3;
    let next5: number = uglies[i5] * 5;
    let nextUgly: number = min3(next2, next3, next5);
    uglies = uglies.concat([nextUgly]);
    if (nextUgly == next2) {
      i2 = i2 + 1;
    }
    if (nextUgly == next3) {
      i3 = i3 + 1;
    }
    if (nextUgly == next5) {
      i5 = i5 + 1;
    }
    count = count + 1;
  }
  return uglies[n - 1];
}

function example_1(): void {
  if (!(nthUglyNumber(10) == 12)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(nthUglyNumber(1) == 1)) {
    throw new Error("expect failed");
  }
}

function example_3(): void {
  if (!(nthUglyNumber(3) == 3)) {
    throw new Error("expect failed");
  }
}

function larger_n(): void {
  if (!(nthUglyNumber(15) == 24)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  example_3();
  larger_n();
}
main();
