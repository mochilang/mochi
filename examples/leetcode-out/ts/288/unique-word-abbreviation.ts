// Generated by Mochi TypeScript compiler

function abbrev(word: string): string {
  let n: number = word.length;
  if (n <= 2) {
    return word;
  }
  return word[0] + String(n - 2) + word[n - 1];
}

function buildAbbrs(
  dict: Array<string>,
): Record<string, Record<string, boolean>> {
  let table: Record<string, Record<string, boolean>> = {};
  for (const w of dict) {
    let a: string = abbrev(w);
    let set: Record<string, boolean> = {};
    if (Object.prototype.hasOwnProperty.call(table, String(a))) {
      set = table[a];
    }
    set[w] = true;
    table[a] = set;
  }
  return table;
}

function isUnique(
  word: string,
  table: Record<string, Record<string, boolean>>,
): boolean {
  let a: string = abbrev(word);
  if (!Object.prototype.hasOwnProperty.call(table, String(a))) {
    return true;
  }
  let words: Record<string, boolean> = table[a];
  let count: number = 0;
  let exists: boolean = false;
  for (const k of Object.keys(words)) {
    count = count + 1;
    if (k == word) {
      exists = true;
    }
  }
  if (count == 1 && exists) {
    return true;
  }
  return false;
}

function unique_1(): void {
  let sample: Record<string, Record<string, boolean>> = buildAbbrs([
    "deer",
    "door",
    "cake",
    "card",
  ]);
  if (!(isUnique("dear", sample) == false)) {
    throw new Error("expect failed");
  }
}

function unique_2(): void {
  let sample: Record<string, Record<string, boolean>> = buildAbbrs([
    "deer",
    "door",
    "cake",
    "card",
  ]);
  if (!(isUnique("cart", sample) == true)) {
    throw new Error("expect failed");
  }
}

function unique_3(): void {
  let sample: Record<string, Record<string, boolean>> = buildAbbrs([
    "deer",
    "door",
    "cake",
    "card",
  ]);
  if (!(isUnique("cane", sample) == false)) {
    throw new Error("expect failed");
  }
}

function unique_4(): void {
  let sample: Record<string, Record<string, boolean>> = buildAbbrs([
    "deer",
    "door",
    "cake",
    "card",
  ]);
  if (!(isUnique("make", sample) == true)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  unique_1();
  unique_2();
  unique_3();
  unique_4();
}
main();
