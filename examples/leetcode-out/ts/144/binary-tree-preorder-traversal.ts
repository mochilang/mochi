// Generated by Mochi TypeScript compiler

type Leaf = {
  __name: "Leaf";
};

type _Node = {
  __name: "Node";
  left: Tree;
  value: number;
  right: Tree;
};

type Tree = Leaf | _Node;

function preorderTraversal(t: Tree): Array<number> {
  return (() => {
    const _t = t;
    if (_t.__name === "Leaf") return [];
    if (_t.__name === "Node") {
      return ((l, v, r) =>
        [v].concat(preorderTraversal(l)).concat(preorderTraversal(r)))(
          _t.left,
          _t.value,
          _t.right,
        );
    }
    return undefined;
  })();
}

function test_example_1(): void {
  if (
    !(_equal(preorderTraversal(example1), [
      1,
      2,
      3,
    ]))
  ) throw new Error("expect failed");
}

function test_empty(): void {
  if (!(_equal(preorderTraversal({ __name: "Leaf" }), []))) {
    throw new Error("expect failed");
  }
}

function test_single_node(): void {
  if (
    !(_equal(
      preorderTraversal({
        __name: "Node",
        left: { __name: "Leaf" },
        value: 1,
        right: { __name: "Leaf" },
      }),
      [1],
    ))
  ) throw new Error("expect failed");
}

function main(): void {
  let example1: _Node = {
    __name: "Node",
    left: { __name: "Leaf" },
    value: 1,
    right: {
      __name: "Node",
      left: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 3,
        right: { __name: "Leaf" },
      },
      value: 2,
      right: { __name: "Leaf" },
    },
  };
  (globalThis as any).example1 = example1;
  test_example_1();
  test_empty();
  test_single_node();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
