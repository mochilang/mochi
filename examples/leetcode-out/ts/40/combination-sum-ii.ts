// Generated by Mochi TypeScript compiler

function combinationSum2(
  candidates: Array<number>,
  target: number,
): Array<Array<number>> {
  let arr: Array<number> = (() => {
    const _src = candidates;
    let _items = [];
    for (const c of _src) {
      _items.push(c);
    }
    let _pairs = _items.map((it) => {
      const c = it;
      return { item: it, key: c };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const c of _items) {
      _res.push(c);
    }
    return _res;
  })();
  (globalThis as any).arr = arr;
  let n: number = arr.length;
  (globalThis as any).n = n;
  let result: Array<Array<number>> = [];
  (globalThis as any).result = result;
  function backtrack(remain: number, start: number, path: Array<number>): void {
    if ((remain == 0)) {
      result = result.concat([path]);
    } else {
      let i: number = start;
      (globalThis as any).i = i;
      while ((i < n)) {
        let current: number = arr[i];
        (globalThis as any).current = current;
        if ((current > remain)) {
          break;
        }
        if (((i > start) && (arr[i] == arr[i - 1]))) {
          i = i + 1;
          continue;
        }
        backtrack(remain - current, i + 1, path.concat([current]));
        i = i + 1;
      }
    }
  }
  backtrack(target, 0, []);
  return result;
}

function test_example_1(): void {
  if (
    !(_equal(
      combinationSum2([
        10,
        1,
        2,
        7,
        6,
        1,
        5,
      ], 8),
      [
        [
          1,
          1,
          6,
        ],
        [
          1,
          2,
          5,
        ],
        [
          1,
          7,
        ],
        [
          2,
          6,
        ],
      ],
    ))
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(_equal(
      combinationSum2([
        2,
        5,
        2,
        1,
        2,
      ], 5),
      [
        [
          1,
          2,
          2,
        ],
        [5],
      ],
    ))
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
