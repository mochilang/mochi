// Generated by Mochi TypeScript compiler

function buildSet(word: string) : Record<string, boolean> {
	let m: Record<string, boolean> = {}
	for (const ch of word) {
		m[ch] = true
	}
	return m
}

function shareLetters(a: Record<string, boolean>, b: Record<string, boolean>) : boolean {
	for (const ch of Object.keys(a)) {
		if (Object.prototype.hasOwnProperty.call(b, String(ch))) {
			return true
		}
	}
	return false
}

function maxProduct(words: Array<string>) : number {
	let n: number = words.length
	let sets: Array<Record<string, boolean>> = []
	let i: number = 0
	while ((i < n)) {
		sets = sets.concat([buildSet(words[i])])
		i = (i + 1)
	}
	let best: number = 0
	i = 0
	while ((i < n)) {
		let j: number = (i + 1)
		while ((j < n)) {
			if ((!shareLetters(sets[i], sets[j]))) {
				let prod: number = (words[i].length * words[j].length)
				if ((prod > best)) {
					best = prod
				}
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return best
}

function example_1(): void {
	if (!((maxProduct(["abcw", "baz", "foo", "bar", "xtfn", "abcdef"]) == 16))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((maxProduct(["a", "ab", "abc", "d", "cd", "bcd", "abcd"]) == 4))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((maxProduct(["a", "aa", "aaa", "aaaa"]) == 0))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
}
main()

