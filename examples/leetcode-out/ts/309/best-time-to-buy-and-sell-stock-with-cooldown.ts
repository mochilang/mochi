// Generated by Mochi TypeScript compiler

function maxProfit(prices: Array<number>): number {
  let n: number = prices.length;
  if (n == 0) {
    return 0;
  }
  let hold: number = -prices[0];
  let sold: number = 0;
  let rest: number = 0;
  let i: number = 1;
  while (i < n) {
    let prevHold: number = hold;
    let prevSold: number = sold;
    let prevRest: number = rest;
    let buy: number = prevRest - prices[i];
    if (buy > prevHold) {
      hold = buy;
    } else {
      hold = prevHold;
    }
    sold = prevHold + prices[i];
    if (prevSold > prevRest) {
      rest = prevSold;
    } else {
      rest = prevRest;
    }
    i = i + 1;
  }
  if (sold > rest) {
    return sold;
  }
  return rest;
}

function example_1(): void {
  if (!(maxProfit([1, 2, 3, 0, 2]) == 3)) {
    throw new Error("expect failed");
  }
}

function cooldown(): void {
  if (!(maxProfit([2, 1, 4]) == 3)) {
    throw new Error("expect failed");
  }
}

function single_day(): void {
  if (!(maxProfit([5]) == 0)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  cooldown();
  single_day();
}
main();
