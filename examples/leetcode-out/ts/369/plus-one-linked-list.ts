// Generated by Mochi TypeScript compiler

function plusOne(head: Array<number>): Array<number> {
  let carry: number = 1;
  (globalThis as any).carry = carry;
  let i: number = head.length - 1;
  (globalThis as any).i = i;
  let result: Array<number> = head;
  (globalThis as any).result = result;
  while (((i >= 0) && (carry > 0))) {
    let sum: number = result[i] + carry;
    (globalThis as any).sum = sum;
    result[i] = sum % 10;
    carry = Math.trunc(sum / 10);
    i = i - 1;
  }
  if ((carry > 0)) {
    return [carry].concat(result);
  }
  return result;
}

function test_example_1(): void {
  if (
    !(_equal(
      plusOne([
        1,
        2,
        3,
      ]),
      [
        1,
        2,
        4,
      ],
    ))
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(_equal(plusOne([0]), [1]))) throw new Error("expect failed");
}

function test_carry_through(): void {
  if (
    !(_equal(
      plusOne([
        9,
        9,
        9,
      ]),
      [
        1,
        0,
        0,
        0,
      ],
    ))
  ) throw new Error("expect failed");
}

function test_middle_carry(): void {
  if (
    !(_equal(
      plusOne([
        1,
        2,
        9,
      ]),
      [
        1,
        3,
        0,
      ],
    ))
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_carry_through();
  test_middle_carry();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
