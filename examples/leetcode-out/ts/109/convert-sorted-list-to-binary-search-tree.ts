// Generated by Mochi TypeScript compiler

type Leaf = {
  __name: "Leaf";
};

type _Node = {
  __name: "Node";
  left: Tree;
  value: number;
  right: Tree;
};

type Tree = Leaf | _Node;

function sortedListToBST(nums: Array<number>): Tree {
  function build(lo: number, hi: number): Tree {
    if ((lo >= hi)) {
      return { __name: "Leaf" };
    }
    let mid: number = Math.trunc((lo + hi) / 2);
    (globalThis as any).mid = mid;
    return {
      __name: "Node",
      left: build(lo, mid),
      value: nums[mid],
      right: build(mid + 1, hi),
    };
  }
  return build(0, nums.length);
}

function inorder(t: Tree): Array<number> {
  return (() => {
    const _t = t;
    if (_t.__name === "Leaf") return [];
    if (_t.__name === "Node") {
      return ((l, v, r) => inorder(l).concat([v]).concat(inorder(r)))(
        _t.left,
        _t.value,
        _t.right,
      );
    }
    return undefined;
  })();
}

function test_example(): void {
  let nums: Array<number> = [
    -10,
    -3,
    0,
    5,
    9,
  ];
  (globalThis as any).nums = nums;
  let tree: Tree = sortedListToBST(nums);
  (globalThis as any).tree = tree;
  if (!(_equal(inorder(tree), nums))) throw new Error("expect failed");
}

function test_empty(): void {
  if (!(_equal(inorder(sortedListToBST([])), []))) {
    throw new Error("expect failed");
  }
}

function test_single(): void {
  if (!(_equal(inorder(sortedListToBST([1])), [1]))) {
    throw new Error("expect failed");
  }
}

function main(): void {
  test_example();
  test_empty();
  test_single();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
