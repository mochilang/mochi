// Generated by Mochi TypeScript compiler

function getFactors(n: number) : Array<Array<number>> {
	if ((n <= 3)) {
		return []
	}
	let result: Array<Array<number>> = []
	function dfs(start: number, num: number, path: Array<number>) : void {
		let i: number = start
		while (((i * i) <= num)) {
			if (((num % i) == 0)) {
				let next: number = Math.trunc(num / i)
				result = result.concat([path.concat([i, next])])
				dfs(i, next, path.concat([i]))
			}
			i = (i + 1)
		}
	}
	dfs(2, n, [])
	return result
}

function example_1(): void {
	if (!(_equal(getFactors(12), [[2, 6], [2, 2, 3], [3, 4]]))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!(_equal(getFactors(15), [[3, 5]]))) { throw new Error('expect failed') }
}

function prime(): void {
	if (!(_equal(getFactors(37), []))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	prime()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

