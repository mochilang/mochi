// Generated by Mochi TypeScript compiler

function findCelebrity(mat: Array<Array<boolean>>) : number {
	let n: number = mat.length
	function knows(a: number, b: number) : boolean {
		return mat[a][b]
	}
	let candidate: number = 0
	let i: number = 1
	while ((i < n)) {
		if (knows(candidate, i)) {
			candidate = i
		}
		i = (i + 1)
	}
	let j: number = 0
	while ((j < n)) {
		if ((j != candidate)) {
			if (knows(candidate, j)) {
				return (-1)
			}
			if ((!knows(j, candidate))) {
				return (-1)
			}
		}
		j = (j + 1)
	}
	return candidate
}

function example_1(): void {
	let mat: Array<Array<boolean>> = [[false, true], [false, false]]
	if (!((findCelebrity(mat) == 1))) { throw new Error('expect failed') }
}

function example_2(): void {
	let mat: Array<Array<boolean>> = [[false, true, false], [false, false, false], [true, true, false]]
	if (!((findCelebrity(mat) == 1))) { throw new Error('expect failed') }
}

function no_celebrity(): void {
	let mat: Array<Array<boolean>> = [[false, true], [true, false]]
	if (!((findCelebrity(mat) == ((-1))))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	no_celebrity()
}
main()

