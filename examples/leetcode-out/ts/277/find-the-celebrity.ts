// Generated by Mochi TypeScript compiler

function findCelebrity(mat: Array<Array<boolean>>): number {
  let n: number = mat.length;
  (globalThis as any).n = n;
  function knows(a: number, b: number): boolean {
    return mat[a][b];
  }
  let candidate: number = 0;
  (globalThis as any).candidate = candidate;
  let i: number = 1;
  (globalThis as any).i = i;
  while ((i < n)) {
    if (knows(candidate, i)) {
      candidate = i;
    }
    i = i + 1;
  }
  let j: number = 0;
  (globalThis as any).j = j;
  while ((j < n)) {
    if ((j != candidate)) {
      if (knows(candidate, j)) {
        return (-1);
      }
      if ((!knows(j, candidate))) {
        return (-1);
      }
    }
    j = j + 1;
  }
  return candidate;
}

function test_example_1(): void {
  let mat: Array<Array<boolean>> = [
    [
      false,
      true,
    ],
    [
      false,
      false,
    ],
  ];
  (globalThis as any).mat = mat;
  if (!(findCelebrity(mat) == 1)) throw new Error("expect failed");
}

function test_example_2(): void {
  let mat: Array<Array<boolean>> = [
    [
      false,
      true,
      false,
    ],
    [
      false,
      false,
      false,
    ],
    [
      true,
      true,
      false,
    ],
  ];
  (globalThis as any).mat = mat;
  if (!(findCelebrity(mat) == 1)) throw new Error("expect failed");
}

function test_no_celebrity(): void {
  let mat: Array<Array<boolean>> = [
    [
      false,
      true,
    ],
    [
      true,
      false,
    ],
  ];
  (globalThis as any).mat = mat;
  if (!(findCelebrity(mat) == (-1))) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_no_celebrity();
}
main();
