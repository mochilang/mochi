// Generated by Mochi TypeScript compiler

function canConstruct(ransomNote: string, magazine: string) : boolean {
	let counts: Record<string, number> = {}
	let i: number = 0
	while ((i < magazine.length)) {
		let ch: string = magazine[i]
		if (Object.prototype.hasOwnProperty.call(counts, String(ch))) {
			counts[ch] = (counts[ch] + 1)
		} else {
			counts[ch] = 1
		}
		i = (i + 1)
	}
	i = 0
	while ((i < ransomNote.length)) {
		let ch: string = ransomNote[i]
		if (Object.prototype.hasOwnProperty.call(counts, String(ch))) {
			counts[ch] = (counts[ch] - 1)
			if ((counts[ch] < 0)) {
				return false
			}
		} else {
			return false
		}
		i = (i + 1)
	}
	return true
}

function example_1(): void {
	if (!((canConstruct("a", "b") == false))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((canConstruct("aa", "ab") == false))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((canConstruct("aa", "aab") == true))) { throw new Error('expect failed') }
}

function empty_ransom(): void {
	if (!((canConstruct("", "abc") == true))) { throw new Error('expect failed') }
}

function not_enough_letters(): void {
	if (!((canConstruct("abc", "ab") == false))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	empty_ransom()
	not_enough_letters()
}
main()

