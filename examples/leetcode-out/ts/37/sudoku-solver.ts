// Generated by Mochi TypeScript compiler

function solveSudoku(board: Array<Array<string>>): Array<Array<string>> {
  function isValid(row: number, col: number, ch: string): boolean {
    for (let i: number = 0; i < 9; i++) {
      if ((board[row][i] == ch)) {
        return false;
      }
      if ((board[i][col] == ch)) {
        return false;
      }
      let r: number = ((Math.trunc(row / 3)) * 3) + Math.trunc(i / 3);
      (globalThis as any).r = r;
      let c: number = ((Math.trunc(col / 3)) * 3) + (i % 3);
      (globalThis as any).c = c;
      if ((board[r][c] == ch)) {
        return false;
      }
    }
    return true;
  }
  function dfs(r: number, c: number): boolean {
    if ((r == 9)) {
      return true;
    }
    if ((c == 9)) {
      return dfs(r + 1, 0);
    }
    if ((board[r][c] != ".")) {
      return dfs(r, c + 1);
    }
    for (
      const d of [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
      ]
    ) {
      if (isValid(r, c, d)) {
        board[r][c] = d;
        if (dfs(r, c + 1)) {
          return true;
        }
        board[r][c] = ".";
      }
    }
    return false;
  }
  dfs(0, 0);
  return board;
}

function test_solve(): void {
  if (!(_equal(solvedBoard, solved))) throw new Error("expect failed");
}

function main(): void {
  let board: Array<Array<string>> = [
    [
      "5",
      "3",
      ".",
      ".",
      "7",
      ".",
      ".",
      ".",
      ".",
    ],
    [
      "6",
      ".",
      ".",
      "1",
      "9",
      "5",
      ".",
      ".",
      ".",
    ],
    [
      ".",
      "9",
      "8",
      ".",
      ".",
      ".",
      ".",
      "6",
      ".",
    ],
    [
      "8",
      ".",
      ".",
      ".",
      "6",
      ".",
      ".",
      ".",
      "3",
    ],
    [
      "4",
      ".",
      ".",
      "8",
      ".",
      "3",
      ".",
      ".",
      "1",
    ],
    [
      "7",
      ".",
      ".",
      ".",
      "2",
      ".",
      ".",
      ".",
      "6",
    ],
    [
      ".",
      "6",
      ".",
      ".",
      ".",
      ".",
      "2",
      "8",
      ".",
    ],
    [
      ".",
      ".",
      ".",
      "4",
      "1",
      "9",
      ".",
      ".",
      "5",
    ],
    [
      ".",
      ".",
      ".",
      ".",
      "8",
      ".",
      ".",
      "7",
      "9",
    ],
  ];
  (globalThis as any).board = board;
  let solvedBoard: Array<Array<string>> = solveSudoku(board);
  (globalThis as any).solvedBoard = solvedBoard;
  let solved: Array<Array<string>> = [
    [
      "5",
      "3",
      "4",
      "6",
      "7",
      "8",
      "9",
      "1",
      "2",
    ],
    [
      "6",
      "7",
      "2",
      "1",
      "9",
      "5",
      "3",
      "4",
      "8",
    ],
    [
      "1",
      "9",
      "8",
      "3",
      "4",
      "2",
      "5",
      "6",
      "7",
    ],
    [
      "8",
      "5",
      "9",
      "7",
      "6",
      "1",
      "4",
      "2",
      "3",
    ],
    [
      "4",
      "2",
      "6",
      "8",
      "5",
      "3",
      "7",
      "9",
      "1",
    ],
    [
      "7",
      "1",
      "3",
      "9",
      "2",
      "4",
      "8",
      "5",
      "6",
    ],
    [
      "9",
      "6",
      "1",
      "5",
      "3",
      "7",
      "2",
      "8",
      "4",
    ],
    [
      "2",
      "8",
      "7",
      "4",
      "1",
      "9",
      "6",
      "3",
      "5",
    ],
    [
      "3",
      "4",
      "5",
      "2",
      "8",
      "6",
      "1",
      "7",
      "9",
    ],
  ];
  (globalThis as any).solved = solved;
  test_solve();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
