// Generated by Mochi TypeScript compiler

function newPeekingIterator(nums: Array<number>): PeekingIterator {
  return { nums: nums, index: 0 };
}

function hasNext(it: PeekingIterator): boolean {
  return it.index < it.nums.length;
}

function peek(it: PeekingIterator): number {
  return it.nums[it.index];
}

function next(it: PeekingIterator): NextResult {
  let v: number = it.nums[it.index];
  let newIt: PeekingIterator = { nums: it.nums, index: it.index + 1 };
  return { iter: newIt, val: v };
}

function example(): void {
  let it: PeekingIterator = newPeekingIterator([1, 2, 3]);
  let r1: NextResult = next(it);
  it = r1.iter;
  if (!(r1.val == 1)) {
    throw new Error("expect failed");
  }
  if (!(peek(it) == 2)) {
    throw new Error("expect failed");
  }
  let r2: NextResult = next(it);
  it = r2.iter;
  if (!(r2.val == 2)) {
    throw new Error("expect failed");
  }
  let r3: NextResult = next(it);
  it = r3.iter;
  if (!(r3.val == 3)) {
    throw new Error("expect failed");
  }
  if (!(hasNext(it) == false)) {
    throw new Error("expect failed");
  }
}

function single_element(): void {
  let it: PeekingIterator = newPeekingIterator([5]);
  if (!(peek(it) == 5)) {
    throw new Error("expect failed");
  }
  let r: NextResult = next(it);
  it = r.iter;
  if (!(r.val == 5)) {
    throw new Error("expect failed");
  }
  if (!(hasNext(it) == false)) {
    throw new Error("expect failed");
  }
}

function empty(): void {
  let it: PeekingIterator = newPeekingIterator([]);
  if (!(hasNext(it) == false)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  type PeekingIterator = {
    nums: Array<number>;
    index: number;
  };
  type NextResult = {
    iter: any;
    val: number;
  };
  example();
  single_element();
  empty();
}
main();
