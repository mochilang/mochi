// Generated by Mochi TypeScript compiler

function splitWords(s: string): Array<string> {
  let i: number = 0;
  (globalThis as any).i = i;
  let words: Array<string> = [];
  (globalThis as any).words = words;
  let current: string = "";
  (globalThis as any).current = current;
  while ((i < s.length)) {
    let c: string = _indexString(s, i);
    (globalThis as any).c = c;
    if ((c == " ")) {
      if ((current.length > 0)) {
        words = words.concat([current]);
        current = "";
      }
    } else {
      current = current + c;
    }
    i = i + 1;
  }
  if ((current.length > 0)) {
    words = words.concat([current]);
  }
  return words;
}

function wordPattern(pattern: string, s: string): boolean {
  let words: Array<string> = splitWords(s);
  (globalThis as any).words = words;
  if ((words.length != pattern.length)) {
    return false;
  }
  let p2w: Record<string, string> = {};
  (globalThis as any).p2w = p2w;
  let w2p: Record<string, string> = {};
  (globalThis as any).w2p = w2p;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < pattern.length)) {
    let pch: string = _indexString(pattern, i);
    (globalThis as any).pch = pch;
    let word: string = words[i];
    (globalThis as any).word = word;
    if (Object.prototype.hasOwnProperty.call(p2w, String(pch))) {
      if ((p2w[pch] != word)) {
        return false;
      }
    } else {
      p2w[pch] = word;
    }
    if (Object.prototype.hasOwnProperty.call(w2p, String(word))) {
      if ((w2p[word] != pch)) {
        return false;
      }
    } else {
      w2p[word] = pch;
    }
    i = i + 1;
  }
  return true;
}

function test_example_1(): void {
  if (!(wordPattern("abba", "dog cat cat dog") == true)) {
    throw new Error("expect failed");
  }
}

function test_example_2(): void {
  if (!(wordPattern("abba", "dog cat cat fish") == false)) {
    throw new Error("expect failed");
  }
}

function test_example_3(): void {
  if (!(wordPattern("aaaa", "dog cat cat dog") == false)) {
    throw new Error("expect failed");
  }
}

function test_example_4(): void {
  if (!(wordPattern("abba", "dog dog dog dog") == false)) {
    throw new Error("expect failed");
  }
}

function test_single_word(): void {
  if (!(wordPattern("a", "dog") == true)) throw new Error("expect failed");
}

function test_mismatch_lengths(): void {
  if (!(wordPattern("ab", "one") == false)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_example_4();
  test_single_word();
  test_mismatch_lengths();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
