// Generated by Mochi TypeScript compiler

function generateParenthesis(n: number): Array<string> {
  let result: Array<string> = [];
  (globalThis as any).result = result;
  function backtrack(current: string, open: number, close: number): void {
    if ((current.length == (n * 2))) {
      result = result.concat([current]);
    } else {
      if ((open < n)) {
        backtrack(current + "(", open + 1, close);
      }
      if ((close < open)) {
        backtrack(current + ")", open, close + 1);
      }
    }
  }
  backtrack("", 0, 0);
  return result;
}

function test_example_1(): void {
  if (
    !(_equal(generateParenthesis(3), [
      "((()))",
      "(()())",
      "(())()",
      "()(())",
      "()()()",
    ]))
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(_equal(generateParenthesis(1), ["()"]))) {
    throw new Error("expect failed");
  }
}

function test_two_pairs(): void {
  if (
    !(_equal(generateParenthesis(2), [
      "(())",
      "()()",
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_two_pairs();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
