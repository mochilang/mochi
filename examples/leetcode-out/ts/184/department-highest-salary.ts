// Generated by Mochi TypeScript compiler

type Department = {
  id: number;
  name: string;
};

type Employee = {
  id: number;
  name: string;
  salary: number;
  departmentId: number;
};

type Result = {
  Department: string;
  Employee: string;
  Salary: number;
};

function departmentHighestSalary(
  employees: Array<Employee>,
  departments: Array<Department>,
): Array<Result> {
  let maxSalary: Record<number, number> = {};
  (globalThis as any).maxSalary = maxSalary;
  for (const e of employees) {
    let current: number = 0;
    (globalThis as any).current = current;
    if (
      Object.prototype.hasOwnProperty.call(maxSalary, String(e.departmentId))
    ) {
      current = maxSalary[e.departmentId];
    }
    if ((e.salary > current)) {
      maxSalary[e.departmentId] = e.salary;
    }
  }
  let results: Array<Result> = [];
  (globalThis as any).results = results;
  for (const d of departments) {
    if (Object.prototype.hasOwnProperty.call(maxSalary, String(d.id))) {
      let highest: number = maxSalary[d.id];
      (globalThis as any).highest = highest;
      for (const e of employees) {
        if (((e.departmentId == d.id) && (e.salary == highest))) {
          results = results.concat([
            {
              Department: d.name,
              Employee: e.name,
              Salary: e.salary,
            },
          ]);
        }
      }
    }
  }
  return results;
}

function test_highest_salary(): void {
  let expected: Array<Result> = [
    {
      Department: "IT",
      Employee: "Max",
      Salary: 90000,
    },
    {
      Department: "Sales",
      Employee: "Henry",
      Salary: 80000,
    },
  ];
  (globalThis as any).expected = expected;
  if (
    !(String(departmentHighestSalary(employees, departments)) ==
      String(expected))
  ) throw new Error("expect failed");
}

function main(): void {
  let departments: Array<Department> = [
    {
      id: 1,
      name: "IT",
    },
    {
      id: 2,
      name: "Sales",
    },
  ];
  (globalThis as any).departments = departments;
  let employees: Array<Employee> = [
    {
      id: 1,
      name: "Joe",
      salary: 70000,
      departmentId: 1,
    },
    {
      id: 2,
      name: "Henry",
      salary: 80000,
      departmentId: 2,
    },
    {
      id: 3,
      name: "Sam",
      salary: 60000,
      departmentId: 2,
    },
    {
      id: 4,
      name: "Max",
      salary: 90000,
      departmentId: 1,
    },
  ];
  (globalThis as any).employees = employees;
  test_highest_salary();
}
main();
