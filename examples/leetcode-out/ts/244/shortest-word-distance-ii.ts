// Generated by Mochi TypeScript compiler

type WordDistance = {
  index: Record<string, Array<number>>;
};

function newWordDistance(words: Array<string>): WordDistance {
  let m: Record<string, Array<number>> = {};
  (globalThis as any).m = m;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < words.length)) {
    let w: string = words[i];
    (globalThis as any).w = w;
    let lst: Array<number> = [];
    (globalThis as any).lst = lst;
    if (Object.prototype.hasOwnProperty.call(m, String(w))) {
      lst = m[w];
    }
    lst = lst.concat([i]);
    m[w] = lst;
    i = i + 1;
  }
  return { index: m };
}

function min(a: number, b: number): number {
  if ((a < b)) {
    return a;
  }
  return b;
}

function shortest(wd: WordDistance, word1: string, word2: string): number {
  let list1: Array<number> = wd.index[word1];
  (globalThis as any).list1 = list1;
  let list2: Array<number> = wd.index[word2];
  (globalThis as any).list2 = list2;
  let i: number = 0;
  (globalThis as any).i = i;
  let j: number = 0;
  (globalThis as any).j = j;
  let best: number = 1000000000;
  (globalThis as any).best = best;
  while (((i < list1.length) && (j < list2.length))) {
    let a: number = list1[i];
    (globalThis as any).a = a;
    let b: number = list2[j];
    (globalThis as any).b = b;
    let diff: number = a - b;
    (globalThis as any).diff = diff;
    if ((diff < 0)) {
      diff = -diff;
    }
    best = _min(best, diff);
    if ((a < b)) {
      i = i + 1;
    } else {
      j = j + 1;
    }
  }
  return best;
}

function test_example(): void {
  let words: Array<string> = [
    "practice",
    "makes",
    "perfect",
    "coding",
    "makes",
  ];
  (globalThis as any).words = words;
  let wd: WordDistance = newWordDistance(words);
  (globalThis as any).wd = wd;
  if (!(shortest(wd, "coding", "practice") == 3)) {
    throw new Error("expect failed");
  }
  if (!(shortest(wd, "makes", "coding") == 1)) throw new Error("expect failed");
}

function test_same_word_many_times(): void {
  let words: Array<string> = [
    "a",
    "a",
    "b",
    "a",
  ];
  (globalThis as any).words = words;
  let wd: WordDistance = newWordDistance(words);
  (globalThis as any).wd = wd;
  if (!(shortest(wd, "a", "b") == 1)) throw new Error("expect failed");
}

function main(): void {
  test_example();
  test_same_word_many_times();
}
function _min(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m = Number(list[0]);
  for (const n of list) {
    const num = Number(n);
    if (num < m) m = num;
  }
  return m;
}

main();
