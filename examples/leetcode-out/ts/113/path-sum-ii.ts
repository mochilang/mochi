// Generated by Mochi TypeScript compiler

type Leaf = {
  __name: "Leaf";
};

type _Node = {
  __name: "Node";
  left: Tree;
  value: number;
  right: Tree;
};

type Tree = Leaf | _Node;

function pathSum(root: Tree, targetSum: number): Array<Array<number>> {
  function dfs(
    node: Tree,
    remaining: number,
    path: Array<number>,
  ): Array<Array<number>> {
    function handle(
      l: Tree,
      v: number,
      r: Tree,
      rem: number,
      p: Array<number>,
    ): Array<Array<number>> {
      let leftEmpty: boolean = (() => {
        const _t = l;
        if (_t.__name === "Leaf") return true;
        return false;
      })();
      (globalThis as any).leftEmpty = leftEmpty;
      let rightEmpty: boolean = (() => {
        const _t = r;
        if (_t.__name === "Leaf") return true;
        return false;
      })();
      (globalThis as any).rightEmpty = rightEmpty;
      let newRemaining: number = rem - v;
      (globalThis as any).newRemaining = newRemaining;
      let newPath: Array<number> = p.concat([v]);
      (globalThis as any).newPath = newPath;
      if ((leftEmpty && rightEmpty)) {
        if ((newRemaining == 0)) {
          return [newPath];
        } else {
          return [];
        }
      }
      return dfs(l, newRemaining, newPath).concat(
        dfs(r, newRemaining, newPath),
      );
    }
    return (() => {
      const _t = node;
      if (_t.__name === "Leaf") return [];
      if (_t.__name === "Node") {
        return ((l, v, r) => handle(l, v, r, remaining, path))(
          _t.left,
          _t.value,
          _t.right,
        );
      }
      return undefined;
    })();
  }
  return dfs(root, targetSum, []);
}

function test_example_1(): void {
  let rootLeft: _Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 7,
      right: { __name: "Leaf" },
    },
    value: 11,
    right: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 2,
      right: { __name: "Leaf" },
    },
  };
  (globalThis as any).rootLeft = rootLeft;
  let tree: _Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: rootLeft,
      value: 4,
      right: { __name: "Leaf" },
    },
    value: 5,
    right: {
      __name: "Node",
      left: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 13,
        right: { __name: "Leaf" },
      },
      value: 8,
      right: {
        __name: "Node",
        left: {
          __name: "Node",
          left: { __name: "Leaf" },
          value: 5,
          right: { __name: "Leaf" },
        },
        value: 4,
        right: {
          __name: "Node",
          left: { __name: "Leaf" },
          value: 1,
          right: { __name: "Leaf" },
        },
      },
    },
  };
  (globalThis as any).tree = tree;
  if (
    !(_equal(pathSum(tree, 22), [
      [
        5,
        4,
        11,
        2,
      ],
      [
        5,
        8,
        4,
        5,
      ],
    ]))
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  let tree: _Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 2,
      right: { __name: "Leaf" },
    },
    value: 1,
    right: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 3,
      right: { __name: "Leaf" },
    },
  };
  (globalThis as any).tree = tree;
  if (!(_equal(pathSum(tree, 5), []))) throw new Error("expect failed");
}

function test_example_3(): void {
  let tree: _Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 2,
      right: { __name: "Leaf" },
    },
    value: 1,
    right: { __name: "Leaf" },
  };
  (globalThis as any).tree = tree;
  if (!(_equal(pathSum(tree, 0), []))) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
