// Generated by Mochi TypeScript compiler

function numIslands(grid: Array<Array<string>>): number {
  let rows: number = grid.length;
  (globalThis as any).rows = rows;
  if ((rows == 0)) {
    return 0;
  }
  let cols: number = grid[0].length;
  (globalThis as any).cols = cols;
  let visited: Array<Array<boolean>> = [];
  (globalThis as any).visited = visited;
  let r: number = 0;
  (globalThis as any).r = r;
  while ((r < rows)) {
    let row: Array<boolean> = [];
    (globalThis as any).row = row;
    let c: number = 0;
    (globalThis as any).c = c;
    while ((c < cols)) {
      row = row.concat([false]);
      c = c + 1;
    }
    visited = visited.concat([row]);
    r = r + 1;
  }
  function dfs(i: number, j: number): number {
    if (((((i < 0) || (i >= rows)) || (j < 0)) || (j >= cols))) {
      return 0;
    }
    if (visited[i][j]) {
      return 0;
    }
    if ((grid[i][j] != "1")) {
      return 0;
    }
    visited[i][j] = true;
    dfs(i + 1, j);
    dfs(i - 1, j);
    dfs(i, j + 1);
    dfs(i, j - 1);
    return 0;
  }
  let count: number = 0;
  (globalThis as any).count = count;
  r = 0;
  while ((r < rows)) {
    let c: number = 0;
    (globalThis as any).c = c;
    while ((c < cols)) {
      if ((grid[r][c] == "1")) {
        if ((!(visited[r][c]))) {
          dfs(r, c);
          count = count + 1;
        }
      }
      c = c + 1;
    }
    r = r + 1;
  }
  return count;
}

function test_example_1(): void {
  if (!(numIslands(grid1) == 1)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(numIslands(grid2) == 3)) throw new Error("expect failed");
}

function test_empty_grid(): void {
  if (!(numIslands([]) == 0)) throw new Error("expect failed");
}

function test_all_water(): void {
  if (
    !(numIslands([
      [
        "0",
        "0",
      ],
      [
        "0",
        "0",
      ],
    ]) == 0)
  ) throw new Error("expect failed");
}

function test_single_island(): void {
  if (!(numIslands([["1"]]) == 1)) throw new Error("expect failed");
}

function main(): void {
  let grid1: Array<Array<string>> = [
    [
      "1",
      "1",
      "1",
      "1",
      "0",
    ],
    [
      "1",
      "1",
      "0",
      "1",
      "0",
    ],
    [
      "1",
      "1",
      "0",
      "0",
      "0",
    ],
    [
      "0",
      "0",
      "0",
      "0",
      "0",
    ],
  ];
  (globalThis as any).grid1 = grid1;
  let grid2: Array<Array<string>> = [
    [
      "1",
      "1",
      "0",
      "0",
      "0",
    ],
    [
      "1",
      "1",
      "0",
      "0",
      "0",
    ],
    [
      "0",
      "0",
      "1",
      "0",
      "0",
    ],
    [
      "0",
      "0",
      "0",
      "1",
      "1",
    ],
  ];
  (globalThis as any).grid2 = grid2;
  test_example_1();
  test_example_2();
  test_empty_grid();
  test_all_water();
  test_single_island();
}
main();
