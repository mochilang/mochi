// Generated by Mochi TypeScript compiler

type NumArray = {
  prefix: Array<number>;
};

function newNumArray(nums: Array<number>): NumArray {
  let p: Array<number> = [0];
  (globalThis as any).p = p;
  let sum: number = 0;
  (globalThis as any).sum = sum;
  let n: number = nums.length;
  (globalThis as any).n = n;
  for (let i: number = 0; i < n; i++) {
    sum = sum + nums[i];
    p = p.concat([sum]);
  }
  return { prefix: p };
}

function sumRange(arr: NumArray, left: number, right: number): number {
  let p: Array<number> = arr.prefix;
  (globalThis as any).p = p;
  return (p[right + 1] - p[left]);
}

function test_example(): void {
  let arr: NumArray = newNumArray([
    -2,
    0,
    3,
    -5,
    2,
    -1,
  ]);
  (globalThis as any).arr = arr;
  if (!(sumRange(arr, 0, 2) == 1)) throw new Error("expect failed");
  if (!(sumRange(arr, 2, 5) == (-1))) throw new Error("expect failed");
  if (!(sumRange(arr, 0, 5) == (-3))) throw new Error("expect failed");
}

function test_single(): void {
  let arr: NumArray = newNumArray([5]);
  (globalThis as any).arr = arr;
  if (!(sumRange(arr, 0, 0) == 5)) throw new Error("expect failed");
}

function main(): void {
  test_example();
  test_single();
}
main();
