// Generated by Mochi TypeScript compiler

function newNumArray(nums: Array<number>): NumArray {
  let p: Array<number> = [0];
  let sum: number = 0;
  let n: number = nums.length;
  for (let i: number = 0; i < n; i++) {
    sum = sum + nums[i];
    p = p.concat([sum]);
  }
  return { prefix: p };
}

function sumRange(arr: NumArray, left: number, right: number): number {
  let p: Array<number> = arr.prefix;
  return p[right + 1] - p[left];
}

function example(): void {
  let arr: NumArray = newNumArray([-2, 0, 3, -5, 2, -1]);
  if (!(sumRange(arr, 0, 2) == 1)) {
    throw new Error("expect failed");
  }
  if (!(sumRange(arr, 2, 5) == -1)) {
    throw new Error("expect failed");
  }
  if (!(sumRange(arr, 0, 5) == -3)) {
    throw new Error("expect failed");
  }
}

function single(): void {
  let arr: NumArray = newNumArray([5]);
  if (!(sumRange(arr, 0, 0) == 5)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  type NumArray = {
    prefix: Array<number>;
  };
  example();
  single();
}
main();
