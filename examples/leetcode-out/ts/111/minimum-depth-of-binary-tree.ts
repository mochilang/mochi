// Generated by Mochi TypeScript compiler

function minDepth(root: Tree): number {
  function helper(left: any, right: any): number {
    let leftDepth: number = minDepth(left);
    let rightDepth: number = minDepth(right);
    if (leftDepth == 0 && rightDepth == 0) {
      return 1;
    }
    if (leftDepth == 0) {
      return rightDepth + 1;
    }
    if (rightDepth == 0) {
      return leftDepth + 1;
    }
    if (leftDepth < rightDepth) {
      return leftDepth + 1;
    }
    return rightDepth + 1;
  }
  return (() => {
    const _t = root;
    if (_t.__name === "Leaf") {
      return 0;
    }
    if (_t.__name === "Node") {
      return ((l, r) => helper(l, r))(_t.left, _t.right);
    }
    return undefined;
  })();
}

function example_1(): void {
  let tree: Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 9,
      right: { __name: "Leaf" },
    },
    value: 3,
    right: {
      __name: "Node",
      left: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 15,
        right: { __name: "Leaf" },
      },
      value: 20,
      right: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 7,
        right: { __name: "Leaf" },
      },
    },
  };
  if (!(minDepth(tree) == 2)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  let tree: Node = {
    __name: "Node",
    left: { __name: "Leaf" },
    value: 2,
    right: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 3,
      right: { __name: "Leaf" },
    },
  };
  if (!(minDepth(tree) == 2)) {
    throw new Error("expect failed");
  }
}

function single_node(): void {
  if (
    !(
      minDepth({
        __name: "Node",
        left: { __name: "Leaf" },
        value: 1,
        right: { __name: "Leaf" },
      }) == 1
    )
  ) {
    throw new Error("expect failed");
  }
}

function empty(): void {
  if (!(minDepth({ __name: "Leaf" }) == 0)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  type Leaf = {
    __name: "Leaf";
  };

  type Node = {
    __name: "Node";
    left: any;
    value: number;
    right: any;
  };

  type Tree = Leaf | Node;
  example_1();
  example_2();
  single_node();
  empty();
}
main();
