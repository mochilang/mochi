// Generated by Mochi TypeScript compiler

type Leaf = {
  __name: "Leaf";
};

type _Node = {
  __name: "Node";
  left: Tree;
  value: number;
  right: Tree;
};

type Tree = Leaf | _Node;

function minDepth(root: Tree): number {
  function helper(left: Tree, right: Tree): number {
    let leftDepth: number = minDepth(left);
    (globalThis as any).leftDepth = leftDepth;
    let rightDepth: number = minDepth(right);
    (globalThis as any).rightDepth = rightDepth;
    if (((leftDepth == 0) && (rightDepth == 0))) {
      return 1;
    }
    if ((leftDepth == 0)) {
      return (rightDepth + 1);
    }
    if ((rightDepth == 0)) {
      return (leftDepth + 1);
    }
    if ((leftDepth < rightDepth)) {
      return (leftDepth + 1);
    }
    return (rightDepth + 1);
  }
  return (() => {
    const _t = root;
    if (_t.__name === "Leaf") return 0;
    if (_t.__name === "Node") {
      return ((l, r) => helper(l, r))(_t.left, _t.right);
    }
    return undefined;
  })();
}

function test_example_1(): void {
  let tree: _Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 9,
      right: { __name: "Leaf" },
    },
    value: 3,
    right: {
      __name: "Node",
      left: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 15,
        right: { __name: "Leaf" },
      },
      value: 20,
      right: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 7,
        right: { __name: "Leaf" },
      },
    },
  };
  (globalThis as any).tree = tree;
  if (!(minDepth(tree) == 2)) throw new Error("expect failed");
}

function test_example_2(): void {
  let tree: _Node = {
    __name: "Node",
    left: { __name: "Leaf" },
    value: 2,
    right: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 3,
      right: { __name: "Leaf" },
    },
  };
  (globalThis as any).tree = tree;
  if (!(minDepth(tree) == 2)) throw new Error("expect failed");
}

function test_single_node(): void {
  if (
    !(minDepth({
      __name: "Node",
      left: { __name: "Leaf" },
      value: 1,
      right: { __name: "Leaf" },
    }) == 1)
  ) throw new Error("expect failed");
}

function test_empty(): void {
  if (!(minDepth({ __name: "Leaf" }) == 0)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_single_node();
  test_empty();
}
main();
