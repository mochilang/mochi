// Generated by Mochi TypeScript compiler

let example1: Array<Array<string>> = [
  ["5", "3", ".", ".", "7", ".", ".", ".", "."],
  ["6", ".", ".", "1", "9", "5", ".", ".", "."],
  [".", "9", "8", ".", ".", ".", ".", "6", "."],
  ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
  ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
  ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
  [".", "6", ".", ".", ".", ".", "2", "8", "."],
  [".", ".", ".", "4", "1", "9", ".", ".", "5"],
  [".", ".", ".", ".", "8", ".", ".", "7", "9"],
];

let example2: Array<Array<string>> = [
  ["8", "3", ".", ".", "7", ".", ".", ".", "."],
  ["6", ".", ".", "1", "9", "5", ".", ".", "."],
  [".", "9", "8", ".", ".", ".", ".", "6", "."],
  ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
  ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
  ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
  [".", "6", ".", ".", ".", ".", "2", "8", "."],
  [".", ".", ".", "4", "1", "9", ".", ".", "5"],
  [".", ".", ".", ".", "8", ".", ".", "7", "9"],
];

function isValidSudoku(board: Array<Array<string>>): boolean {
  for (let r: number = 0; r < 9; r++) {
    let seen: Record<string, boolean> = {};
    for (let c: number = 0; c < 9; c++) {
      let val: string = board[r][c];
      if (val != ".") {
        if (Object.prototype.hasOwnProperty.call(seen, String(val))) {
          return false;
        }
        seen[val] = true;
      }
    }
  }
  for (let c: number = 0; c < 9; c++) {
    let seen: Record<string, boolean> = {} as Record<string, boolean>;
    for (let r: number = 0; r < 9; r++) {
      let val: string = board[r][c];
      if (val != ".") {
        if (Object.prototype.hasOwnProperty.call(seen, String(val))) {
          return false;
        }
        seen[val] = true;
      }
    }
  }
  for (let br: number = 0; br < 3; br++) {
    for (let bc: number = 0; bc < 3; bc++) {
      let seen: Record<string, boolean> = {} as Record<string, boolean>;
      for (let r: number = 0; r < 3; r++) {
        for (let c: number = 0; c < 3; c++) {
          let val: string = board[br * 3 + r][bc * 3 + c];
          if (val != ".") {
            if (Object.prototype.hasOwnProperty.call(seen, String(val))) {
              return false;
            }
            seen[val] = true;
          }
        }
      }
    }
  }
  return true;
}

function example_1(): void {
  if (!(isValidSudoku(example1) == true)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(isValidSudoku(example2) == false)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
}
main();
