// Generated by Mochi TypeScript compiler

function getPermutation(n: number, k: number): string {
  let factVal: number = 1;
  for (let i: number = 1; i < n + 1; i++) {
    factVal = factVal * i;
  }
  let nums: Array<number> = [];
  let i: number = 1;
  while (i <= n) {
    nums = nums.concat([i]);
    i = i + 1;
  }
  let k0: number = k - 1;
  let result: string = "";
  i = 0;
  while (i < n) {
    factVal = Math.trunc(factVal / (n - i));
    let idx: number = Math.trunc(k0 / factVal);
    let digit: number = nums[idx];
    result = result + String(digit);
    nums = nums.slice(0, idx).concat(nums.slice(idx + 1, nums.length));
    k0 = k0 % factVal;
    i = i + 1;
  }
  return result;
}

function example_1(): void {
  if (!(getPermutation(3, 3) == "213")) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(getPermutation(4, 9) == "2314")) {
    throw new Error("expect failed");
  }
}

function example_3(): void {
  if (!(getPermutation(3, 1) == "123")) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  example_3();
}
main();
