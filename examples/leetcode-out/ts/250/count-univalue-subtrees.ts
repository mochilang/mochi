// Generated by Mochi TypeScript compiler

let example1: Record<string, any> = Node(Node(Node(Leaf(), 5, Leaf()), 1, Node(Leaf(), 5, Leaf())), 5, Node(Leaf(), 5, Node(Leaf(), 5, Leaf())))

let example2: Record<string, any> = Node(Node(Node(Leaf(), 5, Leaf()), 5, Node(Leaf(), 5, Leaf())), 5, Node(Leaf(), 5, Node(Leaf(), 5, Leaf())))

function Leaf() : Record<string, any> {
	return {"__name": "Leaf"}
}

function Node(left: Record<string, any>, value: number, right: Record<string, any>) : Record<string, any> {
	return {"__name": "Node", "left": left, "value": value, "right": right}
}

function isLeaf(t: Record<string, any>) : boolean {
	return _equal(t["__name"], "Leaf")
}

function left(t: Record<string, any>) : Record<string, any> {
	return t["left"]
}

function right(t: Record<string, any>) : Record<string, any> {
	return t["right"]
}

function value(t: Record<string, any>) : number {
	return t["value"]
}

function countUnivalSubtrees(root: Record<string, any>) : number {
	let count: number = 0
	function dfs(node: Record<string, any>) : boolean {
		if (isLeaf(node)) {
			return true
		}
		let l: Record<string, any> = left(node)
		let r: Record<string, any> = right(node)
		let leftUni: boolean = dfs(l)
		let rightUni: boolean = dfs(r)
		let isUni: boolean = true
		if ((!isLeaf(l))) {
			if ((!leftUni)) {
				isUni = false
			}
			if ((value(l) != value(node))) {
				isUni = false
			}
		}
		if ((!isLeaf(r))) {
			if ((!rightUni)) {
				isUni = false
			}
			if ((value(r) != value(node))) {
				isUni = false
			}
		}
		if (isUni) {
			count = (count + 1)
			return true
		}
		return false
	}
	if ((!isLeaf(root))) {
		dfs(root)
	}
	return count
}

function example_1(): void {
	if (!((countUnivalSubtrees(example1) == 4))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((countUnivalSubtrees(example2) == 6))) { throw new Error('expect failed') }
}

function single_node(): void {
	if (!((countUnivalSubtrees(Node(Leaf(), 1, Leaf())) == 1))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!((countUnivalSubtrees(Leaf()) == 0))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	single_node()
	empty()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

