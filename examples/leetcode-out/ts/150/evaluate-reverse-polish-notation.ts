// Generated by Mochi TypeScript compiler

function parseInt(s: string) : number {
	let i: number = 0
	let sign: number = 1
	if (((s.length > 0) && (((s[0] == "-") || (s[0] == "+"))))) {
		if ((s[0] == "-")) {
			sign = (-1)
		}
		i = 1
	}
	let digits: Record<string, number> = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	let result: number = 0
	while ((i < s.length)) {
		let ch: string = s[i]
		result = ((result * 10) + digits[ch])
		i = (i + 1)
	}
	return (result * sign)
}

function evalRPN(tokens: Array<string>) : number {
	let stack: Array<number> = []
	for (const tok of tokens) {
		if (((((tok == "+") || (tok == "-")) || (tok == "*")) || (tok == "/"))) {
			let b: number = stack[(stack.length - 1)]
			stack = stack.slice(0, (stack.length - 1))
			let a: number = stack[(stack.length - 1)]
			stack = stack.slice(0, (stack.length - 1))
			if ((tok == "+")) {
				stack = stack.concat([(a + b)])
			} else 			if ((tok == "-")) {
				stack = stack.concat([(a - b)])
			} else 			if ((tok == "*")) {
				stack = stack.concat([(a * b)])
			} else {
				stack = stack.concat([Math.trunc(a / b)])
			}
		} else {
			let val: number = parseInt(tok)
			stack = stack.concat([val])
		}
	}
	return stack[(stack.length - 1)]
}

function example_1(): void {
	if (!((evalRPN(["2", "1", "+", "3", "*"]) == 9))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((evalRPN(["4", "13", "5", "/", "+"]) == 6))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((evalRPN(["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]) == 22))) { throw new Error('expect failed') }
}

function single_number(): void {
	if (!((evalRPN(["42"]) == 42))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	single_number()
}
main()

