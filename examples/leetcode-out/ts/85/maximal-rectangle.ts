// Generated by Mochi TypeScript compiler

function maximalRectangle(matrix: Array<Array<string>>): number {
  if ((matrix.length == 0)) {
    return 0;
  }
  let rows: number = matrix.length;
  (globalThis as any).rows = rows;
  let cols: number = matrix[0].length;
  (globalThis as any).cols = cols;
  let heights: Array<number> = [];
  (globalThis as any).heights = heights;
  let init: number = 0;
  (globalThis as any).init = init;
  while ((init < cols)) {
    heights = heights.concat([0]);
    init = init + 1;
  }
  let best: number = 0;
  (globalThis as any).best = best;
  function largestRectangleArea(hs: Array<number>): number {
    let stack: Array<number> = [];
    (globalThis as any).stack = stack;
    let i: number = 0;
    (globalThis as any).i = i;
    let n: number = hs.length;
    (globalThis as any).n = n;
    let maxArea: number = 0;
    (globalThis as any).maxArea = maxArea;
    while ((i <= n)) {
      let curr: number = 0;
      (globalThis as any).curr = curr;
      if ((i < n)) {
        curr = hs[i];
      }
      while ((stack.length > 0)) {
        if ((curr < hs[stack[stack.length - 1]])) {
          let h: number = hs[stack[stack.length - 1]];
          (globalThis as any).h = h;
          stack = stack.slice(0, stack.length - 1);
          let width: number = i;
          (globalThis as any).width = width;
          if ((stack.length > 0)) {
            width = (i - stack[stack.length - 1]) - 1;
          }
          let area: number = h * width;
          (globalThis as any).area = area;
          if ((area > maxArea)) {
            maxArea = area;
          }
        } else {
          break;
        }
      }
      stack = stack.concat([i]);
      i = i + 1;
    }
    return maxArea;
  }
  let r: number = 0;
  (globalThis as any).r = r;
  while ((r < rows)) {
    let c: number = 0;
    (globalThis as any).c = c;
    while ((c < cols)) {
      if ((matrix[r][c] == "1")) {
        heights[c] = heights[c] + 1;
      } else {
        heights[c] = 0;
      }
      c = c + 1;
    }
    let area: number = largestRectangleArea(heights);
    (globalThis as any).area = area;
    if ((area > best)) {
      best = area;
    }
    r = r + 1;
  }
  return best;
}

function test_example_1(): void {
  if (!(maximalRectangle(matrix1) == 6)) throw new Error("expect failed");
}

function test_single_zero(): void {
  if (!(maximalRectangle([["0"]]) == 0)) throw new Error("expect failed");
}

function test_single_one(): void {
  if (!(maximalRectangle([["1"]]) == 1)) throw new Error("expect failed");
}

function main(): void {
  let matrix1: Array<Array<string>> = [
    [
      "1",
      "0",
      "1",
      "0",
      "0",
    ],
    [
      "1",
      "0",
      "1",
      "1",
      "1",
    ],
    [
      "1",
      "1",
      "1",
      "1",
      "1",
    ],
    [
      "1",
      "0",
      "0",
      "1",
      "0",
    ],
  ];
  (globalThis as any).matrix1 = matrix1;
  test_example_1();
  test_single_zero();
  test_single_one();
}
main();
