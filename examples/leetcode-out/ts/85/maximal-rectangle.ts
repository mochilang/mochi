// Generated by Mochi TypeScript compiler

let matrix1: Array<Array<string>> = [
  ["1", "0", "1", "0", "0"],
  ["1", "0", "1", "1", "1"],
  ["1", "1", "1", "1", "1"],
  ["1", "0", "0", "1", "0"],
];

function maximalRectangle(matrix: Array<Array<string>>): number {
  if (matrix.length == 0) {
    return 0;
  }
  let rows: number = matrix.length;
  let cols: number = matrix[0].length;
  let heights: Array<number> = [];
  let init: number = 0;
  while (init < cols) {
    heights = heights.concat([0]);
    init = init + 1;
  }
  let best: number = 0;
  function largestRectangleArea(hs: Array<number>): number {
    let stack: Array<number> = [];
    let i: number = 0;
    let n: number = hs.length;
    let maxArea: number = 0;
    while (i <= n) {
      let curr: number = 0;
      if (i < n) {
        curr = hs[i];
      }
      while (stack.length > 0) {
        if (curr < hs[stack[stack.length - 1]]) {
          let h: number = hs[stack[stack.length - 1]];
          stack = stack.slice(0, stack.length - 1);
          let width: number = i;
          if (stack.length > 0) {
            width = i - stack[stack.length - 1] - 1;
          }
          let area: number = h * width;
          if (area > maxArea) {
            maxArea = area;
          }
        } else {
          break;
        }
      }
      stack = stack.concat([i]);
      i = i + 1;
    }
    return maxArea;
  }
  let r: number = 0;
  while (r < rows) {
    let c: number = 0;
    while (c < cols) {
      if (matrix[r][c] == "1") {
        heights[c] = heights[c] + 1;
      } else {
        heights[c] = 0;
      }
      c = c + 1;
    }
    let area: number = largestRectangleArea(heights);
    if (area > best) {
      best = area;
    }
    r = r + 1;
  }
  return best;
}

function example_1(): void {
  if (!(maximalRectangle(matrix1) == 6)) {
    throw new Error("expect failed");
  }
}

function single_zero(): void {
  if (!(maximalRectangle([["0"]]) == 0)) {
    throw new Error("expect failed");
  }
}

function single_one(): void {
  if (!(maximalRectangle([["1"]]) == 1)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  single_zero();
  single_one();
}
main();
