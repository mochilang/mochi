// Generated by Mochi TypeScript compiler

function reverseKGroup(nums: Array<number>, k: number): Array<number> {
  let n: number = nums.length;
  if (k <= 1) {
    return nums;
  }
  let result: Array<any> = [];
  let i: number = 0;
  while (i < n) {
    let end: number = i + k;
    if (end <= n) {
      let j: number = end - 1;
      while (j >= i) {
        result = result.concat([nums[j]]);
        j = j - 1;
      }
    } else {
      let j: number = i;
      while (j < n) {
        result = result.concat([nums[j]]);
        j = j + 1;
      }
    }
    i = i + k;
  }
  return result;
}

function example_1(): void {
  if (!_equal(reverseKGroup([1, 2, 3, 4, 5], 2), [2, 1, 4, 3, 5])) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!_equal(reverseKGroup([1, 2, 3, 4, 5], 3), [3, 2, 1, 4, 5])) {
    throw new Error("expect failed");
  }
}

function k_equals_list_length(): void {
  if (!_equal(reverseKGroup([1, 2, 3, 4], 4), [4, 3, 2, 1])) {
    throw new Error("expect failed");
  }
}

function k_greater_than_length(): void {
  if (!_equal(reverseKGroup([1, 2, 3], 5), [1, 2, 3])) {
    throw new Error("expect failed");
  }
}

function k_is_one(): void {
  if (!_equal(reverseKGroup([1, 2, 3], 1), [1, 2, 3])) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  k_equals_list_length();
  k_greater_than_length();
  k_is_one();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
