// Generated by Mochi TypeScript compiler

type ZigzagIterator = {
  v1: Array<number>;
  v2: Array<number>;
  i1: number;
  i2: number;
  turn: number;
};

type NextResult = {
  it: ZigzagIterator;
  val: number;
};

function newZigzagIterator(
  v1: Array<number>,
  v2: Array<number>,
): ZigzagIterator {
  return {
    v1: v1,
    v2: v2,
    i1: 0,
    i2: 0,
    turn: 0,
  };
}

function zigzagHasNext(it: ZigzagIterator): boolean {
  return ((it.i1 < it.v1.length) || (it.i2 < it.v2.length));
}

function zigzagNext(it: ZigzagIterator): NextResult {
  let idx1: number = it.i1;
  (globalThis as any).idx1 = idx1;
  let idx2: number = it.i2;
  (globalThis as any).idx2 = idx2;
  let t: number = it.turn;
  (globalThis as any).t = t;
  let a: Array<number> = it.v1;
  (globalThis as any).a = a;
  let b: Array<number> = it.v2;
  (globalThis as any).b = b;
  let value: number = 0;
  (globalThis as any).value = value;
  if ((t == 0)) {
    if ((idx1 < a.length)) {
      value = a[idx1];
      idx1 = idx1 + 1;
      if ((idx2 < b.length)) {
        t = 1;
      }
    } else {
      value = b[idx2];
      idx2 = idx2 + 1;
    }
  } else {
    if ((idx2 < b.length)) {
      value = b[idx2];
      idx2 = idx2 + 1;
      if ((idx1 < a.length)) {
        t = 0;
      }
    } else {
      value = a[idx1];
      idx1 = idx1 + 1;
    }
  }
  return {
    it: {
      v1: a,
      v2: b,
      i1: idx1,
      i2: idx2,
      turn: t,
    },
    val: value,
  };
}

function test_example(): void {
  let it: ZigzagIterator = newZigzagIterator([
    1,
    2,
  ], [
    3,
    4,
    5,
    6,
  ]);
  (globalThis as any).it = it;
  if (!(zigzagHasNext(it) == true)) throw new Error("expect failed");
  let r1: NextResult = zigzagNext(it);
  (globalThis as any).r1 = r1;
  it = r1.it;
  if (!(r1.val == 1)) throw new Error("expect failed");
  if (!(zigzagHasNext(it) == true)) throw new Error("expect failed");
  let r2: NextResult = zigzagNext(it);
  (globalThis as any).r2 = r2;
  it = r2.it;
  if (!(r2.val == 3)) throw new Error("expect failed");
  if (!(zigzagHasNext(it) == true)) throw new Error("expect failed");
  let r3: NextResult = zigzagNext(it);
  (globalThis as any).r3 = r3;
  it = r3.it;
  if (!(r3.val == 2)) throw new Error("expect failed");
  if (!(zigzagHasNext(it) == true)) throw new Error("expect failed");
  let r4: NextResult = zigzagNext(it);
  (globalThis as any).r4 = r4;
  it = r4.it;
  if (!(r4.val == 4)) throw new Error("expect failed");
  if (!(zigzagHasNext(it) == true)) throw new Error("expect failed");
  let r5: NextResult = zigzagNext(it);
  (globalThis as any).r5 = r5;
  it = r5.it;
  if (!(r5.val == 5)) throw new Error("expect failed");
  if (!(zigzagHasNext(it) == true)) throw new Error("expect failed");
  let r6: NextResult = zigzagNext(it);
  (globalThis as any).r6 = r6;
  it = r6.it;
  if (!(r6.val == 6)) throw new Error("expect failed");
  if (!(zigzagHasNext(it) == false)) throw new Error("expect failed");
}

function test_uneven_lists(): void {
  let it: ZigzagIterator = newZigzagIterator([
    1,
    2,
    3,
  ], [4]);
  (globalThis as any).it = it;
  let r1: NextResult = zigzagNext(it);
  (globalThis as any).r1 = r1;
  it = r1.it;
  if (!(r1.val == 1)) throw new Error("expect failed");
  let r2: NextResult = zigzagNext(it);
  (globalThis as any).r2 = r2;
  it = r2.it;
  if (!(r2.val == 4)) throw new Error("expect failed");
  let r3: NextResult = zigzagNext(it);
  (globalThis as any).r3 = r3;
  it = r3.it;
  if (!(r3.val == 2)) throw new Error("expect failed");
  let r4: NextResult = zigzagNext(it);
  (globalThis as any).r4 = r4;
  it = r4.it;
  if (!(r4.val == 3)) throw new Error("expect failed");
  if (!(zigzagHasNext(it) == false)) throw new Error("expect failed");
}

function test_empty_second_list(): void {
  let it: ZigzagIterator = newZigzagIterator([
    7,
    8,
  ], []);
  (globalThis as any).it = it;
  let r1: NextResult = zigzagNext(it);
  (globalThis as any).r1 = r1;
  it = r1.it;
  if (!(r1.val == 7)) throw new Error("expect failed");
  let r2: NextResult = zigzagNext(it);
  (globalThis as any).r2 = r2;
  it = r2.it;
  if (!(r2.val == 8)) throw new Error("expect failed");
  if (!(zigzagHasNext(it) == false)) throw new Error("expect failed");
}

function main(): void {
  test_example();
  test_uneven_lists();
  test_empty_second_list();
}
main();
