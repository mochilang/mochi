// Generated by Mochi TypeScript compiler

function findMinHeightTrees(
  n: number,
  edges: Array<Array<number>>,
): Array<number> {
  if ((n <= 2)) {
    let result: Array<number> = [];
    (globalThis as any).result = result;
    let i: number = 0;
    (globalThis as any).i = i;
    while ((i < n)) {
      result = result.concat([i]);
      i = i + 1;
    }
    return result;
  }
  let graph: Array<Array<number>> = [];
  (globalThis as any).graph = graph;
  let degree: Array<number> = [];
  (globalThis as any).degree = degree;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < n)) {
    graph = graph.concat([[]]);
    degree = degree.concat([0]);
    i = i + 1;
  }
  for (const e of edges) {
    let a: number = e[0];
    (globalThis as any).a = a;
    let b: number = e[1];
    (globalThis as any).b = b;
    graph[a] = graph[a].concat([b]);
    graph[b] = graph[b].concat([a]);
    degree[a] = degree[a] + 1;
    degree[b] = degree[b] + 1;
  }
  let leaves: Array<number> = [];
  (globalThis as any).leaves = leaves;
  let j: number = 0;
  (globalThis as any).j = j;
  while ((j < n)) {
    if ((degree[j] == 1)) {
      leaves = leaves.concat([j]);
    }
    j = j + 1;
  }
  let remaining: number = n;
  (globalThis as any).remaining = remaining;
  while ((remaining > 2)) {
    let newLeaves: Array<number> = [];
    (globalThis as any).newLeaves = newLeaves;
    for (const leaf of leaves) {
      remaining = remaining - 1;
      for (const neighbor of graph[leaf]) {
        degree[neighbor] = degree[neighbor] - 1;
        if ((degree[neighbor] == 1)) {
          newLeaves = newLeaves.concat([neighbor]);
        }
      }
    }
    leaves = newLeaves;
  }
  return leaves;
}

function test_example_1(): void {
  if (
    !(_equal(
      findMinHeightTrees(4, [
        [
          1,
          0,
        ],
        [
          1,
          2,
        ],
        [
          1,
          3,
        ],
      ]),
      [1],
    ))
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  let res: Array<number> = findMinHeightTrees(6, [
    [
      3,
      0,
    ],
    [
      3,
      1,
    ],
    [
      3,
      2,
    ],
    [
      3,
      4,
    ],
    [
      5,
      4,
    ],
  ]);
  (globalThis as any).res = res;
  let ok: boolean = false;
  (globalThis as any).ok = ok;
  if ((res.length == 2)) {
    let a: number = res[0];
    (globalThis as any).a = a;
    let b: number = res[1];
    (globalThis as any).b = b;
    if ((((a == 3) && (b == 4)) || ((a == 4) && (b == 3)))) {
      ok = true;
    }
  }
  if (!(ok == true)) throw new Error("expect failed");
}

function test_single_node(): void {
  if (!(_equal(findMinHeightTrees(1, []), [0]))) {
    throw new Error("expect failed");
  }
}

function test_line(): void {
  if (
    !(_equal(
      findMinHeightTrees(2, [
        [
          0,
          1,
        ],
      ]),
      [
        0,
        1,
      ],
    ))
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_single_node();
  test_line();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
