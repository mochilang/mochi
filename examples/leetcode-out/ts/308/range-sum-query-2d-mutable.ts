// Generated by Mochi TypeScript compiler

function buildPrefix(matrix: Array<Array<number>>): Array<Array<number>> {
  let rows: number = matrix.length;
  (globalThis as any).rows = rows;
  let cols: number = 0;
  (globalThis as any).cols = cols;
  if ((rows > 0)) {
    cols = matrix[0].length;
  }
  let prefix: Array<Array<number>> = [];
  (globalThis as any).prefix = prefix;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i <= rows)) {
    let row: Array<number> = [];
    (globalThis as any).row = row;
    let j: number = 0;
    (globalThis as any).j = j;
    while ((j <= cols)) {
      row = row.concat([0]);
      j = j + 1;
    }
    prefix = prefix.concat([row]);
    i = i + 1;
  }
  i = 1;
  while ((i <= rows)) {
    let j: number = 1;
    (globalThis as any).j = j;
    while ((j <= cols)) {
      prefix[i][j] =
        ((matrix[i - 1][j - 1] + prefix[i - 1][j]) + prefix[i][j - 1]) -
        prefix[i - 1][j - 1];
      j = j + 1;
    }
    i = i + 1;
  }
  return prefix;
}

function NumMatrix(matrix: Array<Array<number>>): Record<string, any> {
  let rows: number = matrix.length;
  (globalThis as any).rows = rows;
  let cols: number = 0;
  (globalThis as any).cols = cols;
  if ((rows > 0)) {
    cols = matrix[0].length;
  }
  return {
    "rows": rows,
    "cols": cols,
    "data": matrix,
    "prefix": buildPrefix(matrix),
  };
}

function numMatrixUpdate(
  nm: Record<string, any>,
  row: number,
  col: number,
  val: number,
): void {
  let data: Array<Array<number>> = nm["data"];
  (globalThis as any).data = data;
  let current: number = data[row][col];
  (globalThis as any).current = current;
  let diff: number = val - current;
  (globalThis as any).diff = diff;
  data[row][col] = val;
  nm["data"] = data;
  let prefix: Array<Array<number>> = nm["prefix"];
  (globalThis as any).prefix = prefix;
  let i: number = row + 1;
  (globalThis as any).i = i;
  while ((i <= nm["rows"])) {
    let j: number = col + 1;
    (globalThis as any).j = j;
    while ((j <= nm["cols"])) {
      prefix[i][j] = prefix[i][j] + diff;
      j = j + 1;
    }
    i = i + 1;
  }
  nm["prefix"] = prefix;
}

function numMatrixSumRegion(
  nm: Record<string, any>,
  row1: number,
  col1: number,
  row2: number,
  col2: number,
): number {
  let p: Array<Array<number>> = nm["prefix"];
  (globalThis as any).p = p;
  let a: number = p[row2 + 1][col2 + 1];
  (globalThis as any).a = a;
  let b: number = p[row1][col2 + 1];
  (globalThis as any).b = b;
  let c: number = p[row2 + 1][col1];
  (globalThis as any).c = c;
  let d: number = p[row1][col1];
  (globalThis as any).d = d;
  return (((a - b) - c) + d);
}

function test_example(): void {
  let nm: Record<string, any> = NumMatrix([
    [
      3,
      0,
      1,
      4,
      2,
    ],
    [
      5,
      6,
      3,
      2,
      1,
    ],
    [
      1,
      2,
      0,
      1,
      5,
    ],
    [
      4,
      1,
      0,
      1,
      7,
    ],
    [
      1,
      0,
      3,
      0,
      5,
    ],
  ]);
  (globalThis as any).nm = nm;
  if (!(numMatrixSumRegion(nm, 2, 1, 4, 3) == 8)) {
    throw new Error("expect failed");
  }
  numMatrixUpdate(nm, 3, 2, 2);
  if (!(numMatrixSumRegion(nm, 2, 1, 4, 3) == 10)) {
    throw new Error("expect failed");
  }
}

function test_single_element(): void {
  let nm: Record<string, any> = NumMatrix([[1]]);
  (globalThis as any).nm = nm;
  if (!(numMatrixSumRegion(nm, 0, 0, 0, 0) == 1)) {
    throw new Error("expect failed");
  }
  numMatrixUpdate(nm, 0, 0, 5);
  if (!(numMatrixSumRegion(nm, 0, 0, 0, 0) == 5)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  test_example();
  test_single_element();
}
main();
