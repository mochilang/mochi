// Generated by Mochi TypeScript compiler

function buildPrefix(matrix: Array<Array<number>>) : Array<Array<number>> {
	let rows: number = matrix.length
	let cols: number = 0
	if ((rows > 0)) {
		cols = matrix[0].length
	}
	let prefix: Array<Array<number>> = []
	let i: number = 0
	while ((i <= rows)) {
		let row: Array<number> = []
		let j: number = 0
		while ((j <= cols)) {
			row = row.concat([0])
			j = (j + 1)
		}
		prefix = prefix.concat([row])
		i = (i + 1)
	}
	i = 1
	while ((i <= rows)) {
		let j: number = 1
		while ((j <= cols)) {
			prefix[i][j] = (((matrix[(i - 1)][(j - 1)] + prefix[(i - 1)][j]) + prefix[i][(j - 1)]) - prefix[(i - 1)][(j - 1)])
			j = (j + 1)
		}
		i = (i + 1)
	}
	return prefix
}

function NumMatrix(matrix: Array<Array<number>>) : Record<string, any> {
	let rows: number = matrix.length
	let cols: number = 0
	if ((rows > 0)) {
		cols = matrix[0].length
	}
	return {"rows": rows, "cols": cols, "data": matrix, "prefix": buildPrefix(matrix)}
}

function numMatrixUpdate(nm: Record<string, any>, row: number, col: number, val: number) : void {
	let data: Array<Array<number>> = nm["data"]
	let current: number = data[row][col]
	let diff: number = (val - current)
	data[row][col] = val
	nm["data"] = data
	let prefix: Array<Array<number>> = nm["prefix"]
	let i: number = (row + 1)
	while ((i <= nm["rows"])) {
		let j: number = (col + 1)
		while ((j <= nm["cols"])) {
			prefix[i][j] = (prefix[i][j] + diff)
			j = (j + 1)
		}
		i = (i + 1)
	}
	nm["prefix"] = prefix
}

function numMatrixSumRegion(nm: Record<string, any>, row1: number, col1: number, row2: number, col2: number) : number {
	let p: Array<Array<number>> = nm["prefix"]
	let a: number = p[(row2 + 1)][(col2 + 1)]
	let b: number = p[row1][(col2 + 1)]
	let c: number = p[(row2 + 1)][col1]
	let d: number = p[row1][col1]
	return (((a - b) - c) + d)
}

function example(): void {
	let nm: Record<string, any> = NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]])
	if (!((numMatrixSumRegion(nm, 2, 1, 4, 3) == 8))) { throw new Error('expect failed') }
	numMatrixUpdate(nm, 3, 2, 2)
	if (!((numMatrixSumRegion(nm, 2, 1, 4, 3) == 10))) { throw new Error('expect failed') }
}

function single_element(): void {
	let nm: Record<string, any> = NumMatrix([[1]])
	if (!((numMatrixSumRegion(nm, 0, 0, 0, 0) == 1))) { throw new Error('expect failed') }
	numMatrixUpdate(nm, 0, 0, 5)
	if (!((numMatrixSumRegion(nm, 0, 0, 0, 0) == 5))) { throw new Error('expect failed') }
}

function main(): void {
	example()
	single_element()
}
main()

