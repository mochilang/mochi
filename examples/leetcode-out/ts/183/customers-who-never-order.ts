// Generated by Mochi TypeScript compiler

type Customer = {
  id: number;
  name: string;
};

type Order = {
  id: number;
  customerId: number;
};

function customersWithoutOrders(
  customers: Array<Customer>,
  orders: Array<Order>,
): Array<string> {
  let result: Array<string> = [];
  (globalThis as any).result = result;
  for (const c of customers) {
    let placed: boolean = false;
    (globalThis as any).placed = placed;
    for (const o of orders) {
      if ((o.customerId == c.id)) {
        placed = true;
        break;
      }
    }
    if ((!placed)) {
      result = result.concat([c.name]);
    }
  }
  return result;
}

function test_example(): void {
  if (
    !(_equal(customersWithoutOrders(customers, orders), [
      "Henry",
      "Max",
    ]))
  ) throw new Error("expect failed");
}

function test_all_customers(): void {
  let emptyOrders: Array<Order> = [];
  (globalThis as any).emptyOrders = emptyOrders;
  if (
    !(String(customersWithoutOrders(customers, emptyOrders)) == String([
      "Joe",
      "Henry",
      "Sam",
      "Max",
    ]))
  ) throw new Error("expect failed");
}

function test_none_left(): void {
  let allOrders: Array<Order> = [
    {
      id: 1,
      customerId: 1,
    },
    {
      id: 2,
      customerId: 2,
    },
    {
      id: 3,
      customerId: 3,
    },
    {
      id: 4,
      customerId: 4,
    },
  ];
  (globalThis as any).allOrders = allOrders;
  if (!(_equal(customersWithoutOrders(customers, allOrders), []))) {
    throw new Error("expect failed");
  }
}

function main(): void {
  let customers: Array<Customer> = [
    {
      id: 1,
      name: "Joe",
    },
    {
      id: 2,
      name: "Henry",
    },
    {
      id: 3,
      name: "Sam",
    },
    {
      id: 4,
      name: "Max",
    },
  ];
  (globalThis as any).customers = customers;
  let orders: Array<Order> = [
    {
      id: 1,
      customerId: 3,
    },
    {
      id: 2,
      customerId: 1,
    },
  ];
  (globalThis as any).orders = orders;
  test_example();
  test_all_customers();
  test_none_left();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
