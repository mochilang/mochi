// Generated by Mochi TypeScript compiler

function getHint(secret: string, guess: string): string {
  let bulls: number = 0;
  let countSecret: Record<string, number> = {};
  let countGuess: Record<string, number> = {};
  let i: number = 0;
  while (i < secret.length) {
    let s: string = secret[i];
    let g: string = guess[i];
    if (s == g) {
      bulls = bulls + 1;
    } else {
      if (Object.prototype.hasOwnProperty.call(countSecret, String(s))) {
        countSecret[s] = countSecret[s] + 1;
      } else {
        countSecret[s] = 1;
      }
      if (Object.prototype.hasOwnProperty.call(countGuess, String(g))) {
        countGuess[g] = countGuess[g] + 1;
      } else {
        countGuess[g] = 1;
      }
    }
    i = i + 1;
  }
  let cows: number = 0;
  for (const ch of Object.keys(countSecret)) {
    if (Object.prototype.hasOwnProperty.call(countGuess, String(ch))) {
      let a: number = countSecret[ch];
      let b: number = countGuess[ch];
      if (a < b) {
        cows = cows + a;
      } else {
        cows = cows + b;
      }
    }
  }
  return String(bulls) + "A" + String(cows) + "B";
}

function example_1(): void {
  if (!(getHint("1807", "7810") == "1A3B")) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(getHint("1123", "0111") == "1A1B")) {
    throw new Error("expect failed");
  }
}

function all_bulls(): void {
  if (!(getHint("1234", "1234") == "4A0B")) {
    throw new Error("expect failed");
  }
}

function all_cows(): void {
  if (!(getHint("1122", "2211") == "0A4B")) {
    throw new Error("expect failed");
  }
}

function no_matches(): void {
  if (!(getHint("1234", "5678") == "0A0B")) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  all_bulls();
  all_cows();
  no_matches();
}
main();
