// Generated by Mochi TypeScript compiler

function getHint(secret: string, guess: string): string {
  let bulls: number = 0;
  (globalThis as any).bulls = bulls;
  let countSecret: Record<string, number> = {};
  (globalThis as any).countSecret = countSecret;
  let countGuess: Record<string, number> = {};
  (globalThis as any).countGuess = countGuess;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < secret.length)) {
    let s: string = _indexString(secret, i);
    (globalThis as any).s = s;
    let g: string = _indexString(guess, i);
    (globalThis as any).g = g;
    if ((s == g)) {
      bulls = bulls + 1;
    } else {
      if (Object.prototype.hasOwnProperty.call(countSecret, String(s))) {
        countSecret[s] = countSecret[s] + 1;
      } else {
        countSecret[s] = 1;
      }
      if (Object.prototype.hasOwnProperty.call(countGuess, String(g))) {
        countGuess[g] = countGuess[g] + 1;
      } else {
        countGuess[g] = 1;
      }
    }
    i = i + 1;
  }
  let cows: number = 0;
  (globalThis as any).cows = cows;
  for (const ch of Object.keys(countSecret)) {
    if (Object.prototype.hasOwnProperty.call(countGuess, String(ch))) {
      let a: number = countSecret[ch];
      (globalThis as any).a = a;
      let b: number = countGuess[ch];
      (globalThis as any).b = b;
      if ((a < b)) {
        cows = cows + a;
      } else {
        cows = cows + b;
      }
    }
  }
  return String(bulls) + "A" + String(cows) + "B";
}

function test_example_1(): void {
  if (!(getHint("1807", "7810") == "1A3B")) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(getHint("1123", "0111") == "1A1B")) throw new Error("expect failed");
}

function test_all_bulls(): void {
  if (!(getHint("1234", "1234") == "4A0B")) throw new Error("expect failed");
}

function test_all_cows(): void {
  if (!(getHint("1122", "2211") == "0A4B")) throw new Error("expect failed");
}

function test_no_matches(): void {
  if (!(getHint("1234", "5678") == "0A0B")) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_all_bulls();
  test_all_cows();
  test_no_matches();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
