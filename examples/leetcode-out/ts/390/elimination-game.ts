// Generated by Mochi TypeScript compiler

function lastRemaining(n: number): number {
  let head: number = 1;
  (globalThis as any).head = head;
  let step: number = 1;
  (globalThis as any).step = step;
  let remaining: number = n;
  (globalThis as any).remaining = remaining;
  let left: boolean = true;
  (globalThis as any).left = left;
  while ((remaining > 1)) {
    if ((left || ((remaining % 2) == 1))) {
      head = head + step;
    }
    remaining = Math.trunc(remaining / 2);
    step = step * 2;
    left = !left;
  }
  return head;
}

function test_example_1(): void {
  if (!(lastRemaining(9) == 6)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(lastRemaining(1) == 1)) throw new Error("expect failed");
}

function test_even_n(): void {
  if (!(lastRemaining(2) == 2)) throw new Error("expect failed");
}

function test_larger_n(): void {
  if (!(lastRemaining(1000000) == 481110)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_even_n();
  test_larger_n();
}
main();
