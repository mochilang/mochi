// Generated by Mochi TypeScript compiler

function connect(
  lefts: Array<number>,
  rights: Array<number>,
  root: number,
): Array<number> {
  let nexts: Array<number> = [];
  (globalThis as any).nexts = nexts;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < lefts.length)) {
    nexts = nexts.concat([-1]);
    i = i + 1;
  }
  let queue: Array<number> = [];
  (globalThis as any).queue = queue;
  if ((root != (-1))) {
    queue = [root];
  }
  while ((queue.length > 0)) {
    let next: Array<number> = [];
    (globalThis as any).next = next;
    let prev: number = -1;
    (globalThis as any).prev = prev;
    for (const idx of queue) {
      if ((prev != (-1))) {
        nexts[prev] = idx;
      }
      prev = idx;
      if ((lefts[idx] != (-1))) {
        next = next.concat([lefts[idx]]);
      }
      if ((rights[idx] != (-1))) {
        next = next.concat([rights[idx]]);
      }
    }
    queue = next;
  }
  return nexts;
}

function levels(
  lefts: Array<number>,
  rights: Array<number>,
  values: Array<number>,
  root: number,
): Array<Array<number>> {
  let result: Array<Array<number>> = [];
  (globalThis as any).result = result;
  let queue: Array<number> = [];
  (globalThis as any).queue = queue;
  if ((root != (-1))) {
    queue = [root];
  }
  while ((queue.length > 0)) {
    let vals: Array<number> = [];
    (globalThis as any).vals = vals;
    let next: Array<number> = [];
    (globalThis as any).next = next;
    for (const idx of queue) {
      vals = vals.concat([values[idx]]);
      if ((lefts[idx] != (-1))) {
        next = next.concat([lefts[idx]]);
      }
      if ((rights[idx] != (-1))) {
        next = next.concat([rights[idx]]);
      }
    }
    result = result.concat([vals]);
    queue = next;
  }
  return result;
}

function test_example(): void {
  let ns: Array<number> = connect(exLefts, exRights, exRoot);
  (globalThis as any).ns = ns;
  if (
    !(_equal(levels(exLefts, exRights, exValues, exRoot), [
      [1],
      [
        2,
        3,
      ],
      [
        4,
        5,
        6,
        7,
      ],
    ]))
  ) throw new Error("expect failed");
  if (
    !(_equal(ns, [
      -1,
      2,
      -1,
      4,
      5,
      6,
      -1,
    ]))
  ) throw new Error("expect failed");
}

function test_single_node(): void {
  let lefts: Array<number> = [-1];
  (globalThis as any).lefts = lefts;
  let rights: Array<number> = [-1];
  (globalThis as any).rights = rights;
  let values: Array<number> = [1];
  (globalThis as any).values = values;
  let root: number = 0;
  (globalThis as any).root = root;
  let ns: Array<number> = connect(lefts, rights, root);
  (globalThis as any).ns = ns;
  if (!(_equal(levels(lefts, rights, values, root), [[1]]))) {
    throw new Error("expect failed");
  }
  if (!(_equal(ns, [-1]))) throw new Error("expect failed");
}

function test_empty(): void {
  let lefts: Array<number> = [];
  (globalThis as any).lefts = lefts;
  let rights: Array<number> = [];
  (globalThis as any).rights = rights;
  let values: Array<number> = [];
  (globalThis as any).values = values;
  let ns: Array<number> = connect(lefts, rights, -1);
  (globalThis as any).ns = ns;
  if (!(_equal(levels(lefts, rights, values, -1), []))) {
    throw new Error("expect failed");
  }
  if (!(_equal(ns, []))) throw new Error("expect failed");
}

function main(): void {
  let exLefts: Array<number> = [
    1,
    3,
    5,
    -1,
    -1,
    -1,
    -1,
  ];
  (globalThis as any).exLefts = exLefts;
  let exRights: Array<number> = [
    2,
    4,
    6,
    -1,
    -1,
    -1,
    -1,
  ];
  (globalThis as any).exRights = exRights;
  let exValues: Array<number> = [
    1,
    2,
    3,
    4,
    5,
    6,
    7,
  ];
  (globalThis as any).exValues = exValues;
  let exRoot: number = 0;
  (globalThis as any).exRoot = exRoot;
  test_example();
  test_single_node();
  test_empty();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
