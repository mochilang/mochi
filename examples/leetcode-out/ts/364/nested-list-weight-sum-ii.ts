// Generated by Mochi TypeScript compiler

let example1: Array<Record<string, any>> = [List([Int(1), Int(1)]), Int(2), List([Int(1), Int(1)])]

let example2: Array<Record<string, any>> = [Int(1), List([Int(4), List([Int(6)])])]

function Int(val: number) : Record<string, any> {
	return {"__name": "Int", "value": val}
}

function List(items: Array<Record<string, any>>) : Record<string, any> {
	return {"__name": "List", "items": items}
}

function isInt(node: Record<string, any>) : boolean {
	return _equal(node["__name"], "Int")
}

function value(node: Record<string, any>) : number {
	return node["value"]
}

function items(node: Record<string, any>) : Array<Record<string, any>> {
	return node["items"]
}

function depthSumInverse(nested: Array<Record<string, any>>) : number {
	let queue: Array<Record<string, any>> = nested
	let levels: Array<number> = []
	while ((queue.length > 0)) {
		let next: Array<Record<string, any>> = []
		let levelSum: number = 0
		for (const node of queue) {
			if (isInt(node)) {
				levelSum = (levelSum + value(node))
			} else {
				next = next.concat(items(node))
			}
		}
		levels = [levelSum].concat(levels)
		queue = next
	}
	let weight: number = 1
	let total: number = 0
	for (const s of levels) {
		total = (total + (s * weight))
		weight = (weight + 1)
	}
	return total
}

function example_1(): void {
	if (!((depthSumInverse(example1) == 8))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((depthSumInverse(example2) == 17))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!((depthSumInverse([]) == 0))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	empty()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

