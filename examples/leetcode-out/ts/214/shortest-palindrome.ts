// Generated by Mochi TypeScript compiler

function isPalindrome(s: string) : boolean {
	let i: number = 0
	let j: number = (s.length - 1)
	while ((i < j)) {
		if ((s[i] != s[j])) {
			return false
		}
		i = (i + 1)
		j = (j - 1)
	}
	return true
}

function shortestPalindrome(s: string) : string {
	let n: number = s.length
	let i: number = n
	while ((i > 0)) {
		if (isPalindrome(s.slice(0, i))) {
			let suffix: string = s.slice(i, n)
			let rev: string = ""
			let k: number = (suffix.length - 1)
			while ((k >= 0)) {
				rev = rev + suffix[k]
				k = (k - 1)
			}
			return rev + s
		}
		i = (i - 1)
	}
	return s
}

function example_1(): void {
	if (!((shortestPalindrome("aacecaaa") == "aaacecaaa"))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((shortestPalindrome("abcd") == "dcbabcd"))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!((shortestPalindrome("") == ""))) { throw new Error('expect failed') }
}

function already_palindrome(): void {
	if (!((shortestPalindrome("aba") == "aba"))) { throw new Error('expect failed') }
}

function single_char(): void {
	if (!((shortestPalindrome("a") == "a"))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	empty()
	already_palindrome()
	single_char()
}
main()

