// Generated by Mochi TypeScript compiler

function missingNumber(nums: Array<number>): number {
  let n: number = nums.length;
  (globalThis as any).n = n;
  let sum: number = 0;
  (globalThis as any).sum = sum;
  for (const num of nums) {
    sum = sum + num;
  }
  let expected: number = Math.trunc((n * (n + 1)) / 2);
  (globalThis as any).expected = expected;
  return (expected - sum);
}

function test_example_1(): void {
  if (
    !(missingNumber([
      3,
      0,
      1,
    ]) == 2)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(missingNumber([
      0,
      1,
    ]) == 2)
  ) throw new Error("expect failed");
}

function test_example_3(): void {
  if (
    !(missingNumber([
      9,
      6,
      4,
      2,
      3,
      5,
      7,
      0,
      1,
    ]) == 8)
  ) throw new Error("expect failed");
}

function test_single_zero(): void {
  if (!(missingNumber([0]) == 1)) throw new Error("expect failed");
}

function test_already_ordered(): void {
  if (
    !(missingNumber([
      0,
      2,
      1,
      4,
      5,
      6,
      7,
      8,
      9,
    ]) == 3)
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_single_zero();
  test_already_ordered();
}
main();
