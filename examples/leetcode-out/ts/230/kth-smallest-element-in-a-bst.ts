// Generated by Mochi TypeScript compiler

function Leaf(): Record<string, any> {
  return { "__name": "Leaf" };
}

function _Node(
  left: Record<string, any>,
  value: number,
  right: Record<string, any>,
): Record<string, any> {
  return {
    "__name": "Node",
    "left": left,
    "value": value,
    "right": right,
  };
}

function isLeaf(t: Record<string, any>): boolean {
  return _equal(t["__name"], "Leaf");
}

function left(t: Record<string, any>): Record<string, any> {
  return t["left"];
}

function right(t: Record<string, any>): Record<string, any> {
  return t["right"];
}

function value(t: Record<string, any>): number {
  return t["value"];
}

function kthSmallest(root: Record<string, any>, k: number): number {
  let stack: Array<Record<string, any>> = [];
  (globalThis as any).stack = stack;
  let curr: Record<string, any> = root;
  (globalThis as any).curr = curr;
  let count: number = 0;
  (globalThis as any).count = count;
  while (((!isLeaf(curr)) || (stack.length > 0))) {
    while ((!isLeaf(curr))) {
      stack = stack.concat([curr]);
      curr = left(curr);
    }
    let node: Record<string, any> = stack[stack.length - 1];
    (globalThis as any).node = node;
    stack = stack.slice(0, stack.length - 1);
    count = count + 1;
    if ((count == k)) {
      return value(node);
    }
    curr = right(node);
  }
  return 0;
}

function test_example_1(): void {
  if (!(kthSmallest(example1, 1) == 1)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(kthSmallest(example2, 3) == 3)) throw new Error("expect failed");
}

function test_single_node(): void {
  if (!(kthSmallest(_Node(Leaf(), 8, Leaf()), 1) == 8)) {
    throw new Error("expect failed");
  }
}

function test_k_equals_number_of_nodes(): void {
  if (!(kthSmallest(example1, 4) == 4)) throw new Error("expect failed");
}

function main(): void {
  let example1: Record<string, any> = _Node(
    _Node(Leaf(), 1, _Node(Leaf(), 2, Leaf())),
    3,
    _Node(Leaf(), 4, Leaf()),
  );
  (globalThis as any).example1 = example1;
  let example2: Record<string, any> = _Node(
    _Node(
      _Node(Leaf(), 2, _Node(Leaf(), 1, Leaf())),
      3,
      _Node(Leaf(), 4, Leaf()),
    ),
    5,
    _Node(Leaf(), 6, Leaf()),
  );
  (globalThis as any).example2 = example2;
  test_example_1();
  test_example_2();
  test_single_node();
  test_k_equals_number_of_nodes();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
