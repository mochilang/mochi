// Generated by Mochi TypeScript compiler

function newCollection() : RandomizedCollection {
	return {values: [], pos: {}, seed: 1}
}

function nextSeed(x: number) : number {
	return ((((x * 1103515245) + 12345)) % 2147483648)
}

function insert(col: RandomizedCollection, val: number) : OpResult {
	let values: Array<number> = col.values
	let posMap: Record<number, Array<number>> = col.pos
	let existed: boolean = false
	let idxs: Array<number> = []
	if (Object.prototype.hasOwnProperty.call(posMap, String(val))) {
		existed = (posMap[val].length > 0)
		idxs = posMap[val]
	}
	idxs = idxs.concat([values.length])
	posMap[val] = idxs
	values = values.concat([val])
	return {ok: (!existed), col: {values: values, pos: posMap, seed: col.seed}}
}

function remove(col: RandomizedCollection, val: number) : OpResult {
	let values: Array<number> = col.values
	let posMap: Record<number, Array<number>> = col.pos
	if (((!(Object.prototype.hasOwnProperty.call(posMap, String(val)))) || (posMap[val].length == 0))) {
		return {ok: false, col: col}
	}
	let idxs: Array<number> = posMap[val]
	let removeIdx: number = idxs[(idxs.length - 1)]
	idxs = idxs.slice(0, (idxs.length - 1))
	posMap[val] = idxs
	let lastIdx: number = (values.length - 1)
	let lastVal: number = values[lastIdx]
	values[removeIdx] = lastVal
	values = values.slice(0, lastIdx)
	let lastList: Array<number> = posMap[lastVal]
	let i: number = 0
	while ((i < lastList.length)) {
		if ((lastList[i] == lastIdx)) {
			lastList[i] = removeIdx
			break
		}
		i = (i + 1)
	}
	posMap[lastVal] = lastList
	return {ok: true, col: {values: values, pos: posMap, seed: col.seed}}
}

function getRandom(col: RandomizedCollection) : RandResult {
	let seed: number = nextSeed(col.seed)
	let idx: number = (seed % col.values.length)
	return {val: col.values[idx], col: {values: col.values, pos: col.pos, seed: seed}}
}

function example_operations(): void {
	let c: RandomizedCollection = newCollection()
	let r1: OpResult = insert(c, 1)
	if (!((r1.ok == true))) { throw new Error('expect failed') }
	c = r1.col
	let r2: OpResult = insert(c, 1)
	if (!((r2.ok == false))) { throw new Error('expect failed') }
	c = r2.col
	let r3: OpResult = insert(c, 2)
	if (!((r3.ok == true))) { throw new Error('expect failed') }
	c = r3.col
	let g1: RandResult = getRandom(c)
	if (!(((g1.val == 1) || (g1.val == 2)))) { throw new Error('expect failed') }
	c = g1.col
	let r4: OpResult = remove(c, 1)
	if (!((r4.ok == true))) { throw new Error('expect failed') }
	c = r4.col
	let g2: RandResult = getRandom(c)
	if (!(((g2.val == 1) || (g2.val == 2)))) { throw new Error('expect failed') }
}

function main(): void {
	type RandomizedCollection = {
		values: Array<number>;
		pos: Record<number, Array<number>>;
		seed: number;
	}
	type OpResult = {
		ok: boolean;
		col: any;
	}
	type RandResult = {
		val: number;
		col: any;
	}
	example_operations()
}
main()

