// Generated by Mochi TypeScript compiler

type RandomizedCollection = {
  values: Array<number>;
  pos: Record<number, Array<number>>;
  seed: number;
};

type OpResult = {
  ok: boolean;
  col: RandomizedCollection;
};

type RandResult = {
  val: number;
  col: RandomizedCollection;
};

function newCollection(): RandomizedCollection {
  return {
    values: [],
    pos: {},
    seed: 1,
  };
}

function nextSeed(x: number): number {
  return (((x * 1103515245) + 12345) % 2147483648);
}

function insert(col: RandomizedCollection, val: number): OpResult {
  let values: Array<number> = col.values;
  (globalThis as any).values = values;
  let posMap: Record<number, Array<number>> = col.pos;
  (globalThis as any).posMap = posMap;
  let existed: boolean = false;
  (globalThis as any).existed = existed;
  let idxs: Array<number> = [];
  (globalThis as any).idxs = idxs;
  if (Object.prototype.hasOwnProperty.call(posMap, String(val))) {
    existed = posMap[val].length > 0;
    idxs = posMap[val];
  }
  idxs = idxs.concat([values.length]);
  posMap[val] = idxs;
  values = values.concat([val]);
  return {
    ok: (!existed),
    col: {
      values: values,
      pos: posMap,
      seed: col.seed,
    },
  };
}

function remove(col: RandomizedCollection, val: number): OpResult {
  let values: Array<number> = col.values;
  (globalThis as any).values = values;
  let posMap: Record<number, Array<number>> = col.pos;
  (globalThis as any).posMap = posMap;
  if (
    ((!(Object.prototype.hasOwnProperty.call(posMap, String(val)))) ||
      (posMap[val].length == 0))
  ) {
    return {
      ok: false,
      col: col,
    };
  }
  let idxs: Array<number> = posMap[val];
  (globalThis as any).idxs = idxs;
  let removeIdx: number = idxs[idxs.length - 1];
  (globalThis as any).removeIdx = removeIdx;
  idxs = idxs.slice(0, idxs.length - 1);
  posMap[val] = idxs;
  let lastIdx: number = values.length - 1;
  (globalThis as any).lastIdx = lastIdx;
  let lastVal: number = values[lastIdx];
  (globalThis as any).lastVal = lastVal;
  values[removeIdx] = lastVal;
  values = values.slice(0, lastIdx);
  let lastList: Array<number> = posMap[lastVal];
  (globalThis as any).lastList = lastList;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < lastList.length)) {
    if ((lastList[i] == lastIdx)) {
      lastList[i] = removeIdx;
      break;
    }
    i = i + 1;
  }
  posMap[lastVal] = lastList;
  return {
    ok: true,
    col: {
      values: values,
      pos: posMap,
      seed: col.seed,
    },
  };
}

function getRandom(col: RandomizedCollection): RandResult {
  let seed: number = nextSeed(col.seed);
  (globalThis as any).seed = seed;
  let idx: number = seed % col.values.length;
  (globalThis as any).idx = idx;
  return {
    val: col.values[idx],
    col: {
      values: col.values,
      pos: col.pos,
      seed: seed,
    },
  };
}

function test_example_operations(): void {
  let c: RandomizedCollection = newCollection();
  (globalThis as any).c = c;
  let r1: OpResult = insert(c, 1);
  (globalThis as any).r1 = r1;
  if (!(r1.ok == true)) throw new Error("expect failed");
  c = r1.col;
  let r2: OpResult = insert(c, 1);
  (globalThis as any).r2 = r2;
  if (!(r2.ok == false)) throw new Error("expect failed");
  c = r2.col;
  let r3: OpResult = insert(c, 2);
  (globalThis as any).r3 = r3;
  if (!(r3.ok == true)) throw new Error("expect failed");
  c = r3.col;
  let g1: RandResult = getRandom(c);
  (globalThis as any).g1 = g1;
  if (!((g1.val == 1) || (g1.val == 2))) throw new Error("expect failed");
  c = g1.col;
  let r4: OpResult = remove(c, 1);
  (globalThis as any).r4 = r4;
  if (!(r4.ok == true)) throw new Error("expect failed");
  c = r4.col;
  let g2: RandResult = getRandom(c);
  (globalThis as any).g2 = g2;
  if (!((g2.val == 1) || (g2.val == 2))) throw new Error("expect failed");
}

function main(): void {
  test_example_operations();
}
main();
