// Generated by Mochi TypeScript compiler

function maxArea(height: Array<number>): number {
  let left: number = 0;
  (globalThis as any).left = left;
  let right: number = height.length - 1;
  (globalThis as any).right = right;
  let maxArea: number = 0;
  (globalThis as any).maxArea = maxArea;
  while ((left < right)) {
    let width: number = right - left;
    (globalThis as any).width = width;
    let h: number = 0;
    (globalThis as any).h = h;
    if ((height[left] < height[right])) {
      h = height[left];
    } else {
      h = height[right];
    }
    let area: number = h * width;
    (globalThis as any).area = area;
    if ((area > maxArea)) {
      maxArea = area;
    }
    if ((height[left] < height[right])) {
      left = left + 1;
    } else {
      right = right - 1;
    }
  }
  return maxArea;
}

function test_example_1(): void {
  if (
    !(maxArea([
      1,
      8,
      6,
      2,
      5,
      4,
      8,
      3,
      7,
    ]) == 49)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(maxArea([
      1,
      1,
    ]) == 1)
  ) throw new Error("expect failed");
}

function test_decreasing_heights(): void {
  if (
    !(maxArea([
      4,
      3,
      2,
      1,
      4,
    ]) == 16)
  ) throw new Error("expect failed");
}

function test_short_array(): void {
  if (
    !(maxArea([
      1,
      2,
      1,
    ]) == 2)
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_decreasing_heights();
  test_short_array();
}
main();
