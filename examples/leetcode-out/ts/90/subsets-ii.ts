// Generated by Mochi TypeScript compiler

function subsetsWithDup(nums: Array<number>) : Array<Array<number>> {
	let arr: Array<any> = (() => {
	const _src = nums;
	let _items = [];
	for (const x of _src) {
		_items.push(x);
	}
	let _pairs = _items.map(it => { const x = it; return {item: it, key: x}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	const _res = [];
	for (const x of _items) {
		_res.push(x)
	}
	return _res;
})()
	let n: number = arr.length
	let result: Array<Array<number>> = []
	function backtrack(start: number, path: Array<number>) : void {
		let once: number = 0
		while ((once < 1)) {
			result = result.concat([path])
			once = (once + 1)
		}
		let i: number = start
		while ((i < n)) {
			if (((i > start) && _equal(arr[i], arr[(i - 1)]))) {
				i = (i + 1)
				continue
			}
			let newPath: Array<number> = path
			let t: number = 0
			while ((t < 1)) {
				newPath = newPath.concat([arr[i]])
				t = (t + 1)
			}
			backtrack((i + 1), newPath)
			i = (i + 1)
		}
	}
	backtrack(0, [])
	return result
}

function example_1(): void {
	if (!(_equal(subsetsWithDup([1, 2, 2]), [[], [1], [1, 2], [1, 2, 2], [2], [2, 2]]))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!(_equal(subsetsWithDup([0]), [[], [0]]))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

