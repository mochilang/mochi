// Generated by Mochi TypeScript compiler

function merge(nums1: Array<number>, m: number, nums2: Array<number>, n: number) : Array<number> {
	let i: number = (m - 1)
	let j: number = (n - 1)
	let k: number = ((m + n) - 1)
	while ((j >= 0)) {
		if (((i >= 0) && (nums1[i] > nums2[j]))) {
			nums1[k] = nums1[i]
			i = (i - 1)
		} else {
			nums1[k] = nums2[j]
			j = (j - 1)
		}
		k = (k - 1)
	}
	return nums1
}

function example_1(): void {
	if (!(_equal(merge([1, 2, 3, 0, 0, 0], 3, [2, 5, 6], 3), [1, 2, 2, 3, 5, 6]))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!(_equal(merge([1], 1, [], 0), [1]))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!(_equal(merge([0], 0, [1], 1), [1]))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

