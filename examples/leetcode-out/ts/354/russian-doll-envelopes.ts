// Generated by Mochi TypeScript compiler

function maxEnvelopes(envelopes: Array<Array<number>>) : number {
	let n: number = envelopes.length
	if ((n == 0)) {
		return 0
	}
	let byH: Array<any> = (() => {
	const _src = envelopes;
	let _items = [];
	for (const e of _src) {
		_items.push(e);
	}
	let _pairs = _items.map(it => { const e = it; return {item: it, key: (-e[1])}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	const _res = [];
	for (const e of _items) {
		_res.push(e)
	}
	return _res;
})()
	let sorted: Array<any> = (() => {
	const _src = byH;
	let _items = [];
	for (const e of _src) {
		_items.push(e);
	}
	let _pairs = _items.map(it => { const e = it; return {item: it, key: (e as any)[0]}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	const _res = [];
	for (const e of _items) {
		_res.push(e)
	}
	return _res;
})()
	let tails: Array<number> = []
	let fill: number = 0
	while ((fill < n)) {
		tails = tails.concat([0])
		fill = (fill + 1)
	}
	let size: number = 0
	let i: number = 0
	while ((i < n)) {
		let height: any = (sorted[i] as any)[1]
		let lo: number = 0
		let hi: number = size
		while ((lo < hi)) {
			let mid: number = Math.trunc(((lo + hi)) / 2)
			if ((tails[mid] < height)) {
				lo = (mid + 1)
			} else {
				hi = mid
			}
		}
		tails[lo] = height
		if ((lo == size)) {
			size = (size + 1)
		}
		i = (i + 1)
	}
	return size
}

function example_1(): void {
	if (!((maxEnvelopes([[5, 4], [6, 4], [6, 7], [2, 3]]) == 3))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((maxEnvelopes([[1, 1], [1, 1], [1, 1]]) == 1))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!((maxEnvelopes([]) == 0))) { throw new Error('expect failed') }
}

function increasing(): void {
	if (!((maxEnvelopes([[1, 1], [2, 2], [3, 3], [4, 4]]) == 4))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	empty()
	increasing()
}
main()

