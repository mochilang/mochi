// Generated by Mochi TypeScript compiler

function addTwoNumbers(l1: Array<number>, l2: Array<number>): Array<number> {
  let i: number = 0;
  let j: number = 0;
  let carry: number = 0;
  let result: Array<any> = [];
  while (i < l1.length || j < l2.length || carry > 0) {
    let x: number = 0;
    if (i < l1.length) {
      x = l1[i];
      i = i + 1;
    }
    let y: number = 0;
    if (j < l2.length) {
      y = l2[j];
      j = j + 1;
    }
    let sum: number = x + y + carry;
    let digit: number = sum % 10;
    carry = Math.trunc(sum / 10);
    result = result.concat([digit]);
  }
  return result;
}

function example_1(): void {
  if (!_equal(addTwoNumbers([2, 4, 3], [5, 6, 4]), [7, 0, 8])) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!_equal(addTwoNumbers([0], [0]), [0])) {
    throw new Error("expect failed");
  }
}

function example_3(): void {
  if (
    !_equal(
      addTwoNumbers([9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9]),
      [8, 9, 9, 9, 0, 0, 0, 1],
    )
  ) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  example_3();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
