// Generated by Mochi TypeScript compiler

function reverseList(nums: Array<number>): Array<number> {
  let result: Array<number> = [];
  let i: number = nums.length - 1;
  while (i >= 0) {
    result = result.concat([nums[i]]);
    i = i - 1;
  }
  return result;
}

function example_1(): void {
  if (!_equal(reverseList([1, 2, 3, 4, 5]), [5, 4, 3, 2, 1])) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!_equal(reverseList([1, 2]), [2, 1])) {
    throw new Error("expect failed");
  }
}

function single_element(): void {
  if (!_equal(reverseList([1]), [1])) {
    throw new Error("expect failed");
  }
}

function empty_list(): void {
  if (!_equal(reverseList([]), [])) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  single_element();
  empty_list();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
