// Generated by Mochi TypeScript compiler

function mergeSorted(a: Array<number>, b: Array<number>) : Array<number> {
	let i: number = 0
	let j: number = 0
	let result: Array<number> = []
	while (((i < a.length) && (j < b.length))) {
		if ((a[i] <= b[j])) {
			result = result.concat([a[i]])
			i = (i + 1)
		} else {
			result = result.concat([b[j]])
			j = (j + 1)
		}
	}
	while ((i < a.length)) {
		result = result.concat([a[i]])
		i = (i + 1)
	}
	while ((j < b.length)) {
		result = result.concat([b[j]])
		j = (j + 1)
	}
	return result
}

function sortList(nums: Array<number>) : Array<number> {
	if ((nums.length <= 1)) {
		return nums
	}
	let mid: number = Math.trunc(nums.length / 2)
	let left: Array<number> = sortList(nums.slice(0, mid))
	let right: Array<number> = sortList(nums.slice(mid, nums.length))
	return mergeSorted(left, right)
}

function example_1(): void {
	if (!(_equal(sortList([4, 2, 1, 3]), [1, 2, 3, 4]))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!(_equal(sortList([(-1), 5, 3, 4, 0]), [(-1), 0, 3, 4, 5]))) { throw new Error('expect failed') }
}

function single(): void {
	if (!(_equal(sortList([1]), [1]))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!(_equal(sortList([]), []))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	single()
	empty()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

