// Generated by Mochi TypeScript compiler

function Leaf(): Record<string, any> {
  return { "__name": "Leaf" };
}

function _Node(
  left: Record<string, any>,
  value: number,
  right: Record<string, any>,
): Record<string, any> {
  return {
    "__name": "Node",
    "left": left,
    "value": value,
    "right": right,
  };
}

function isLeaf(t: Record<string, any>): boolean {
  return _equal(t["__name"], "Leaf");
}

function left(t: Record<string, any>): Record<string, any> {
  return t["left"];
}

function right(t: Record<string, any>): Record<string, any> {
  return t["right"];
}

function value(t: Record<string, any>): number {
  return t["value"];
}

function invertTree(root: Record<string, any>): Record<string, any> {
  if (isLeaf(root)) {
    return root;
  }
  let l: Record<string, any> = left(root);
  (globalThis as any).l = l;
  let r: Record<string, any> = right(root);
  (globalThis as any).r = r;
  return _Node(invertTree(r), value(root), invertTree(l));
}

function equalTrees(a: Record<string, any>, b: Record<string, any>): boolean {
  if ((isLeaf(a) && isLeaf(b))) {
    return true;
  }
  if ((isLeaf(a) || isLeaf(b))) {
    return false;
  }
  return (((value(a) == value(b)) && equalTrees(left(a), left(b))) &&
    equalTrees(right(a), right(b)));
}

function test_invert_small_tree(): void {
  if (!(equalTrees(invertTree(example), inverted) == true)) {
    throw new Error("expect failed");
  }
}

function test_single_node(): void {
  let t: Record<string, any> = _Node(Leaf(), 1, Leaf());
  (globalThis as any).t = t;
  if (!(equalTrees(invertTree(t), t) == true)) throw new Error("expect failed");
}

function test_empty_tree(): void {
  if (!(isLeaf(invertTree(Leaf())) == true)) throw new Error("expect failed");
}

function main(): void {
  let example: Record<string, any> = _Node(
    _Node(Leaf(), 2, Leaf()),
    1,
    _Node(Leaf(), 3, Leaf()),
  );
  (globalThis as any).example = example;
  let inverted: Record<string, any> = _Node(
    _Node(Leaf(), 3, Leaf()),
    1,
    _Node(Leaf(), 2, Leaf()),
  );
  (globalThis as any).inverted = inverted;
  test_invert_small_tree();
  test_single_node();
  test_empty_tree();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
