// Generated by Mochi TypeScript compiler

function Leaf(): Record<string, any> {
  return { "__name": "Leaf" };
}

function _Node(
  left: Record<string, any>,
  value: number,
  right: Record<string, any>,
): Record<string, any> {
  return {
    "__name": "Node",
    "left": left,
    "value": value,
    "right": right,
  };
}

function isLeaf(t: Record<string, any>): boolean {
  return _equal(t["__name"], "Leaf");
}

function left(t: Record<string, any>): Record<string, any> {
  return t["left"];
}

function right(t: Record<string, any>): Record<string, any> {
  return t["right"];
}

function value(t: Record<string, any>): number {
  return t["value"];
}

function preorder(t: Record<string, any>): Array<number> {
  if (isLeaf(t)) {
    return [];
  }
  return [value(t)].concat(preorder(left(t))).concat(preorder(right(t)));
}

function reverse(xs: Array<number>): Array<number> {
  let result: Array<number> = [];
  (globalThis as any).result = result;
  for (const x of xs) {
    result = [x].concat(result);
  }
  return result;
}

function flatten(root: Record<string, any>): Record<string, any> {
  let vals: Array<number> = reverse(preorder(root));
  (globalThis as any).vals = vals;
  let t: Record<string, any> = Leaf();
  (globalThis as any).t = t;
  for (const v of vals) {
    t = _Node(Leaf(), v, t);
  }
  return t;
}

function equalTrees(a: Record<string, any>, b: Record<string, any>): boolean {
  if ((isLeaf(a) && isLeaf(b))) {
    return true;
  }
  if ((isLeaf(a) || isLeaf(b))) {
    return false;
  }
  return (((value(a) == value(b)) && equalTrees(left(a), left(b))) &&
    equalTrees(right(a), right(b)));
}

function test_example_1(): void {
  if (!(equalTrees(flatten(example1), flattened1) == true)) {
    throw new Error("expect failed");
  }
}

function test_single_node(): void {
  let tree: Record<string, any> = _Node(Leaf(), 0, Leaf());
  (globalThis as any).tree = tree;
  if (!(equalTrees(flatten(tree), tree) == true)) {
    throw new Error("expect failed");
  }
}

function test_empty(): void {
  if (!(isLeaf(flatten(Leaf())) == true)) throw new Error("expect failed");
}

function main(): void {
  let example1: Record<string, any> = _Node(
    _Node(_Node(Leaf(), 3, Leaf()), 2, _Node(Leaf(), 4, Leaf())),
    1,
    _Node(Leaf(), 5, _Node(Leaf(), 6, Leaf())),
  );
  (globalThis as any).example1 = example1;
  let flattened1: Record<string, any> = _Node(
    Leaf(),
    1,
    _Node(
      Leaf(),
      2,
      _Node(
        Leaf(),
        3,
        _Node(Leaf(), 4, _Node(Leaf(), 5, _Node(Leaf(), 6, Leaf()))),
      ),
    ),
  );
  (globalThis as any).flattened1 = flattened1;
  test_example_1();
  test_single_node();
  test_empty();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
