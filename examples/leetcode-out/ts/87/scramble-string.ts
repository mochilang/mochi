// Generated by Mochi TypeScript compiler

function isScramble(s1: string, s2: string): boolean {
  if (s1.length != s2.length) {
    return false;
  }
  function sameLetters(a: string, b: string): boolean {
    if (a.length != b.length) {
      return false;
    }
    let count: Record<string, number> = {};
    let i: number = 0;
    while (i < a.length) {
      let ch: string = a[i];
      if (Object.prototype.hasOwnProperty.call(count, String(ch))) {
        count[ch] = count[ch] + 1;
      } else {
        count[ch] = 1;
      }
      i = i + 1;
    }
    i = 0;
    while (i < b.length) {
      let ch: string = b[i];
      if (Object.prototype.hasOwnProperty.call(count, String(ch))) {
        count[ch] = count[ch] - 1;
      } else {
        return false;
      }
      i = i + 1;
    }
    for (const key of Object.keys(count)) {
      if (count[key] != 0) {
        return false;
      }
    }
    return true;
  }
  if (!sameLetters(s1, s2)) {
    return false;
  }
  let memo: Record<number, boolean> = {};
  let n: number = s1.length;
  function dfs(i1: number, i2: number, length: number): boolean {
    let key: number = i1 * n * 31 + i2 * 31 + length;
    if (Object.prototype.hasOwnProperty.call(memo, String(key))) {
      return memo[key];
    }
    let a: string = s1.slice(i1, i1 + length);
    let b: string = s2.slice(i2, i2 + length);
    if (a == b) {
      memo[key] = true;
      return true;
    }
    if (!sameLetters(a, b)) {
      memo[key] = false;
      return false;
    }
    let k: number = 1;
    while (k < length) {
      if (dfs(i1, i2, k) && dfs(i1 + k, i2 + k, length - k)) {
        memo[key] = true;
        return true;
      }
      if (dfs(i1, i2 + length - k, k) && dfs(i1 + k, i2, length - k)) {
        memo[key] = true;
        return true;
      }
      k = k + 1;
    }
    memo[key] = false;
    return false;
  }
  return dfs(0, 0, n);
}

function example_1(): void {
  if (!(isScramble("great", "rgeat") == true)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(isScramble("abcde", "caebd") == false)) {
    throw new Error("expect failed");
  }
}

function example_3(): void {
  if (!(isScramble("a", "a") == true)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  example_3();
}
main();
