// Generated by Mochi TypeScript compiler

function Leaf(): Record<string, any> {
  return { "__name": "Leaf" };
}

function _Node(
  left: Record<string, any>,
  value: number,
  right: Record<string, any>,
): Record<string, any> {
  return {
    "__name": "Node",
    "left": left,
    "value": value,
    "right": right,
  };
}

function isLeaf(t: Record<string, any>): boolean {
  return _equal(t["__name"], "Leaf");
}

function left(t: Record<string, any>): Record<string, any> {
  return t["left"];
}

function right(t: Record<string, any>): Record<string, any> {
  return t["right"];
}

function value(t: Record<string, any>): number {
  return t["value"];
}

function dfs(node: Record<string, any>): Record<string, number> {
  if (isLeaf(node)) {
    return {
      "rob": 0,
      "skip": 0,
    };
  }
  let l: Record<string, number> = dfs(left(node));
  (globalThis as any).l = l;
  let r: Record<string, number> = dfs(right(node));
  (globalThis as any).r = r;
  let take: number = (value(node) + l["skip"]) + r["skip"];
  (globalThis as any).take = take;
  let notake: number = l["rob"];
  (globalThis as any).notake = notake;
  if ((l["skip"] > notake)) {
    notake = l["skip"];
  }
  let rr: number = r["rob"];
  (globalThis as any).rr = rr;
  if ((r["skip"] > rr)) {
    rr = r["skip"];
  }
  let notake2: number = notake + rr;
  (globalThis as any).notake2 = notake2;
  return {
    "rob": take,
    "skip": notake2,
  };
}

function rob(root: Record<string, any>): number {
  let res: Record<string, number> = dfs(root);
  (globalThis as any).res = res;
  let m: number = res["rob"];
  (globalThis as any).m = m;
  if ((res["skip"] > m)) {
    m = res["skip"];
  }
  return m;
}

function test_example_1(): void {
  if (!(rob(example1) == 7)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(rob(example2) == 9)) throw new Error("expect failed");
}

function test_single_node(): void {
  if (!(rob(_Node(Leaf(), 4, Leaf())) == 4)) throw new Error("expect failed");
}

function test_empty(): void {
  if (!(rob(Leaf()) == 0)) throw new Error("expect failed");
}

function main(): void {
  let example1: Record<string, any> = _Node(
    _Node(Leaf(), 2, _Node(Leaf(), 3, Leaf())),
    3,
    _Node(Leaf(), 3, _Node(Leaf(), 1, Leaf())),
  );
  (globalThis as any).example1 = example1;
  let example2: Record<string, any> = _Node(
    _Node(_Node(Leaf(), 1, Leaf()), 4, _Node(Leaf(), 3, Leaf())),
    3,
    _Node(Leaf(), 5, _Node(Leaf(), 1, Leaf())),
  );
  (globalThis as any).example2 = example2;
  test_example_1();
  test_example_2();
  test_single_node();
  test_empty();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
