// Generated by Mochi TypeScript compiler

let example1: Record<string, any> = Node(
  Node(Leaf(), 2, Node(Leaf(), 3, Leaf())),
  3,
  Node(Leaf(), 3, Node(Leaf(), 1, Leaf())),
);

let example2: Record<string, any> = Node(
  Node(Node(Leaf(), 1, Leaf()), 4, Node(Leaf(), 3, Leaf())),
  3,
  Node(Leaf(), 5, Node(Leaf(), 1, Leaf())),
);

function Leaf(): Record<string, any> {
  return { __name: "Leaf" };
}

function Node(
  left: Record<string, any>,
  value: number,
  right: Record<string, any>,
): Record<string, any> {
  return { __name: "Node", left: left, value: value, right: right };
}

function isLeaf(t: Record<string, any>): boolean {
  return _equal(t["__name"], "Leaf");
}

function left(t: Record<string, any>): Record<string, any> {
  return t["left"];
}

function right(t: Record<string, any>): Record<string, any> {
  return t["right"];
}

function value(t: Record<string, any>): number {
  return t["value"];
}

function dfs(node: Record<string, any>): Record<string, number> {
  if (isLeaf(node)) {
    return { rob: 0, skip: 0 };
  }
  let l: Record<string, number> = dfs(left(node));
  let r: Record<string, number> = dfs(right(node));
  let take: number = value(node) + l["skip"] + r["skip"];
  let notake: number = l["rob"];
  if (l["skip"] > notake) {
    notake = l["skip"];
  }
  let rr: number = r["rob"];
  if (r["skip"] > rr) {
    rr = r["skip"];
  }
  let notake2: number = notake + rr;
  return { rob: take, skip: notake2 };
}

function rob(root: Record<string, any>): number {
  let res: Record<string, number> = dfs(root);
  let m: number = res["rob"];
  if (res["skip"] > m) {
    m = res["skip"];
  }
  return m;
}

function example_1(): void {
  if (!(rob(example1) == 7)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(rob(example2) == 9)) {
    throw new Error("expect failed");
  }
}

function single_node(): void {
  if (!(rob(Node(Leaf(), 4, Leaf())) == 4)) {
    throw new Error("expect failed");
  }
}

function empty(): void {
  if (!(rob(Leaf()) == 0)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  single_node();
  empty();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
