// Generated by Mochi TypeScript compiler

type Entry = {
  ts: number;
  cnt: number;
};

type HitCounter = {
  data: Array<Entry>;
};

function newCounter(): HitCounter {
  return { data: [] };
}

function clean(c: HitCounter, timestamp: number): HitCounter {
  let d: Array<Entry> = c.data;
  (globalThis as any).d = d;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < d.length)) {
    let ent: Entry = d[i];
    (globalThis as any).ent = ent;
    if (((timestamp - ent.ts) >= 300)) {
      i = i + 1;
    } else {
      break;
    }
  }
  d = d.slice(i, d.length);
  return { data: d };
}

function hit(c: HitCounter, timestamp: number): HitCounter {
  let counter: HitCounter = clean(c, timestamp);
  (globalThis as any).counter = counter;
  let d: Array<Entry> = counter.data;
  (globalThis as any).d = d;
  if ((d.length > 0)) {
    let last: Entry = d[d.length - 1];
    (globalThis as any).last = last;
    if ((last.ts == timestamp)) {
      d = d.slice(0, d.length - 1).concat([
        {
          ts: last.ts,
          cnt: (last.cnt + 1),
        },
      ]);
    } else {
      d = d.concat([
        {
          ts: timestamp,
          cnt: 1,
        },
      ]);
    }
  } else {
    d = d.concat([
      {
        ts: timestamp,
        cnt: 1,
      },
    ]);
  }
  return { data: d };
}

function getHits(c: HitCounter, timestamp: number): number {
  let counter: HitCounter = clean(c, timestamp);
  (globalThis as any).counter = counter;
  let sum: number = 0;
  (globalThis as any).sum = sum;
  for (const e of counter.data) {
    sum = sum + e.cnt;
  }
  return sum;
}

function test_example(): void {
  let c: HitCounter = newCounter();
  (globalThis as any).c = c;
  c = hit(c, 1);
  c = hit(c, 2);
  c = hit(c, 3);
  if (!(getHits(c, 4) == 3)) throw new Error("expect failed");
  c = hit(c, 300);
  if (!(getHits(c, 300) == 4)) throw new Error("expect failed");
  if (!(getHits(c, 301) == 3)) throw new Error("expect failed");
}

function test_expire(): void {
  let c: HitCounter = newCounter();
  (globalThis as any).c = c;
  c = hit(c, 1);
  c = hit(c, 10);
  c = hit(c, 300);
  if (!(getHits(c, 300) == 3)) throw new Error("expect failed");
  c = hit(c, 601);
  if (!(getHits(c, 601) == 1)) throw new Error("expect failed");
}

function main(): void {
  test_example();
  test_expire();
}
main();
