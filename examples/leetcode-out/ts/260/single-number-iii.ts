// Generated by Mochi TypeScript compiler

function singleNumber(nums: Array<number>): Array<number> {
  let counts: Record<number, number> = {};
  (globalThis as any).counts = counts;
  for (const n of nums) {
    if (Object.prototype.hasOwnProperty.call(counts, String(n))) {
      counts[n] = counts[n] + 1;
    } else {
      counts[n] = 1;
    }
  }
  let result: Array<number> = [];
  (globalThis as any).result = result;
  for (const n of nums) {
    if ((counts[n] == 1)) {
      result = result.concat([n]);
      if ((result.length == 2)) {
        break;
      }
    }
  }
  return result;
}

function test_example_1(): void {
  let out: Array<number> = (() => {
    const _src = singleNumber([
      1,
      2,
      1,
      3,
      2,
      5,
    ]);
    let _items = [];
    for (const x of _src) {
      _items.push(x);
    }
    let _pairs = _items.map((it) => {
      const x = it;
      return { item: it, key: x };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const x of _items) {
      _res.push(x);
    }
    return _res;
  })();
  (globalThis as any).out = out;
  if (
    !(_equal(out, [
      3,
      5,
    ]))
  ) throw new Error("expect failed");
}

function test_negatives(): void {
  let out: Array<number> = (() => {
    const _src = singleNumber([
      -1,
      0,
    ]);
    let _items = [];
    for (const x of _src) {
      _items.push(x);
    }
    let _pairs = _items.map((it) => {
      const x = it;
      return { item: it, key: x };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const x of _items) {
      _res.push(x);
    }
    return _res;
  })();
  (globalThis as any).out = out;
  if (
    !(_equal(out, [
      -1,
      0,
    ]))
  ) throw new Error("expect failed");
}

function test_simple(): void {
  let out: Array<number> = (() => {
    const _src = singleNumber([
      0,
      1,
    ]);
    let _items = [];
    for (const x of _src) {
      _items.push(x);
    }
    let _pairs = _items.map((it) => {
      const x = it;
      return { item: it, key: x };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const x of _items) {
      _res.push(x);
    }
    return _res;
  })();
  (globalThis as any).out = out;
  if (
    !(_equal(out, [
      0,
      1,
    ]))
  ) throw new Error("expect failed");
}

function test_mixed_order(): void {
  let out: Array<number> = (() => {
    const _src = singleNumber([
      1,
      2,
      3,
      2,
      4,
      1,
    ]);
    let _items = [];
    for (const x of _src) {
      _items.push(x);
    }
    let _pairs = _items.map((it) => {
      const x = it;
      return { item: it, key: x };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const x of _items) {
      _res.push(x);
    }
    return _res;
  })();
  (globalThis as any).out = out;
  if (
    !(_equal(out, [
      3,
      4,
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_negatives();
  test_simple();
  test_mixed_order();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
