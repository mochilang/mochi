// Generated by Mochi TypeScript compiler

function divide(dividend: number, divisor: number): number {
  if (dividend == -2147483647 - 1 && divisor == -1) {
    return 2147483647;
  }
  let negative: boolean = false;
  if (dividend < 0) {
    negative = !negative;
    dividend = -dividend;
  }
  if (divisor < 0) {
    negative = !negative;
    divisor = -divisor;
  }
  let quotient: number = 0;
  while (dividend >= divisor) {
    let temp: number = divisor;
    let multiple: number = 1;
    while (dividend >= temp + temp) {
      temp = temp + temp;
      multiple = multiple + multiple;
    }
    dividend = dividend - temp;
    quotient = quotient + multiple;
  }
  if (negative) {
    quotient = -quotient;
  }
  if (quotient > 2147483647) {
    return 2147483647;
  }
  if (quotient < -2147483647 - 1) {
    return -2147483648;
  }
  return quotient;
}

function example_1(): void {
  if (!(divide(10, 3) == 3)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(divide(7, -3) == -2)) {
    throw new Error("expect failed");
  }
}

function overflow(): void {
  if (!(divide(-2147483648, -1) == 2147483647)) {
    throw new Error("expect failed");
  }
}

function divide_by_1(): void {
  if (!(divide(12345, 1) == 12345)) {
    throw new Error("expect failed");
  }
}

function negative_result(): void {
  if (!(divide(-15, 2) == -7)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  overflow();
  divide_by_1();
  negative_result();
}
main();
