// Generated by Mochi TypeScript compiler

function largestNumber(nums: Array<number>): string {
  let strs: Array<string> = [];
  (globalThis as any).strs = strs;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < nums.length)) {
    strs = strs.concat([String(nums[i])]);
    i = i + 1;
  }
  let j: number = 0;
  (globalThis as any).j = j;
  while ((j < strs.length)) {
    let k: number = j + 1;
    (globalThis as any).k = k;
    while ((k < strs.length)) {
      let ab: string = strs[j] + strs[k];
      (globalThis as any).ab = ab;
      let ba: string = strs[k] + strs[j];
      (globalThis as any).ba = ba;
      if ((ab < ba)) {
        let tmp: string = strs[j];
        (globalThis as any).tmp = tmp;
        strs[j] = strs[k];
        strs[k] = tmp;
      }
      k = k + 1;
    }
    j = j + 1;
  }
  let result: string = "";
  (globalThis as any).result = result;
  i = 0;
  while ((i < strs.length)) {
    result = result + strs[i];
    i = i + 1;
  }
  let pos: number = 0;
  (globalThis as any).pos = pos;
  while (((pos < (result.length - 1)) && (_indexString(result, pos) == "0"))) {
    pos = pos + 1;
  }
  return _sliceString(result, pos, result.length);
}

function test_example_1(): void {
  if (
    !(largestNumber([
      10,
      2,
    ]) == "210")
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(largestNumber([
      3,
      30,
      34,
      5,
      9,
    ]) == "9534330")
  ) throw new Error("expect failed");
}

function test_multiple_zeros(): void {
  if (
    !(largestNumber([
      0,
      0,
    ]) == "0")
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_multiple_zeros();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

function _sliceString(s: string, i: number, j: number): string {
  let start = i;
  let end = j;
  const runes = Array.from(s);
  const n = runes.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (end > n) end = n;
  if (end < start) end = start;
  return runes.slice(start, end).join("");
}

main();
