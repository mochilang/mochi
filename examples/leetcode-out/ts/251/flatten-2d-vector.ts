// Generated by Mochi TypeScript compiler

function newVector2D(v: Array<Array<number>>): Vector2D {
  return { data: v, row: 0, col: 0 };
}

function advance(vec: Vector2D): Vector2D {
  let r: number = vec.row;
  let c: number = vec.col;
  let d: Array<Array<number>> = vec.data;
  while (r < d.length) {
    if (c >= d[r].length) {
      r = r + 1;
      c = 0;
    } else {
      break;
    }
  }
  return { data: d, row: r, col: c };
}

function hasNext(vec: Vector2D): boolean {
  let v: Vector2D = advance(vec);
  return v.row < v.data.length;
}

function next(vec: Vector2D): NextResult {
  let v: Vector2D = advance(vec);
  let value: number = v.data[v.row][v.col];
  v = { data: v.data, row: v.row, col: v.col + 1 };
  return { vec: v, val: value };
}

function example(): void {
  let it: Vector2D = newVector2D([[1, 2], [3], [4]]);
  let r1: NextResult = next(it);
  it = r1.vec;
  if (!(r1.val == 1)) {
    throw new Error("expect failed");
  }
  if (!(hasNext(it) == true)) {
    throw new Error("expect failed");
  }
  let r2: NextResult = next(it);
  it = r2.vec;
  if (!(r2.val == 2)) {
    throw new Error("expect failed");
  }
  if (!(hasNext(it) == true)) {
    throw new Error("expect failed");
  }
  let r3: NextResult = next(it);
  it = r3.vec;
  if (!(r3.val == 3)) {
    throw new Error("expect failed");
  }
  if (!(hasNext(it) == true)) {
    throw new Error("expect failed");
  }
  let r4: NextResult = next(it);
  it = r4.vec;
  if (!(r4.val == 4)) {
    throw new Error("expect failed");
  }
  if (!(hasNext(it) == false)) {
    throw new Error("expect failed");
  }
}

function empty_inner_lists(): void {
  let it: Vector2D = newVector2D([[], [1], [], [2, 3]]);
  if (!(hasNext(it) == true)) {
    throw new Error("expect failed");
  }
  let r1: NextResult = next(it);
  it = r1.vec;
  if (!(r1.val == 1)) {
    throw new Error("expect failed");
  }
  let r2: NextResult = next(it);
  it = r2.vec;
  if (!(r2.val == 2)) {
    throw new Error("expect failed");
  }
  let r3: NextResult = next(it);
  it = r3.vec;
  if (!(r3.val == 3)) {
    throw new Error("expect failed");
  }
  if (!(hasNext(it) == false)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  type Vector2D = {
    data: Array<Array<number>>;
    row: number;
    col: number;
  };
  type NextResult = {
    vec: any;
    val: number;
  };
  example();
  empty_inner_lists();
}
main();
