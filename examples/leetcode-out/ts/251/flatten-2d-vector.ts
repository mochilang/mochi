// Generated by Mochi TypeScript compiler

type Vector2D = {
  data: Array<Array<number>>;
  row: number;
  col: number;
};

type NextResult = {
  vec: Vector2D;
  val: number;
};

function newVector2D(v: Array<Array<number>>): Vector2D {
  return {
    data: v,
    row: 0,
    col: 0,
  };
}

function advance(vec: Vector2D): Vector2D {
  let r: number = vec.row;
  (globalThis as any).r = r;
  let c: number = vec.col;
  (globalThis as any).c = c;
  let d: Array<Array<number>> = vec.data;
  (globalThis as any).d = d;
  while ((r < d.length)) {
    if ((c >= d[r].length)) {
      r = r + 1;
      c = 0;
    } else {
      break;
    }
  }
  return {
    data: d,
    row: r,
    col: c,
  };
}

function hasNext(vec: Vector2D): boolean {
  let v: Vector2D = advance(vec);
  (globalThis as any).v = v;
  return (v.row < v.data.length);
}

function next(vec: Vector2D): NextResult {
  let v: Vector2D = advance(vec);
  (globalThis as any).v = v;
  let value: number = v.data[v.row][v.col];
  (globalThis as any).value = value;
  v = {
    data: v.data,
    row: v.row,
    col: (v.col + 1),
  };
  return {
    vec: v,
    val: value,
  };
}

function test_example(): void {
  let it: Vector2D = newVector2D([
    [
      1,
      2,
    ],
    [3],
    [4],
  ]);
  (globalThis as any).it = it;
  let r1: NextResult = next(it);
  (globalThis as any).r1 = r1;
  it = r1.vec;
  if (!(r1.val == 1)) throw new Error("expect failed");
  if (!(hasNext(it) == true)) throw new Error("expect failed");
  let r2: NextResult = next(it);
  (globalThis as any).r2 = r2;
  it = r2.vec;
  if (!(r2.val == 2)) throw new Error("expect failed");
  if (!(hasNext(it) == true)) throw new Error("expect failed");
  let r3: NextResult = next(it);
  (globalThis as any).r3 = r3;
  it = r3.vec;
  if (!(r3.val == 3)) throw new Error("expect failed");
  if (!(hasNext(it) == true)) throw new Error("expect failed");
  let r4: NextResult = next(it);
  (globalThis as any).r4 = r4;
  it = r4.vec;
  if (!(r4.val == 4)) throw new Error("expect failed");
  if (!(hasNext(it) == false)) throw new Error("expect failed");
}

function test_empty_inner_lists(): void {
  let it: Vector2D = newVector2D([
    [],
    [1],
    [],
    [
      2,
      3,
    ],
  ]);
  (globalThis as any).it = it;
  if (!(hasNext(it) == true)) throw new Error("expect failed");
  let r1: NextResult = next(it);
  (globalThis as any).r1 = r1;
  it = r1.vec;
  if (!(r1.val == 1)) throw new Error("expect failed");
  let r2: NextResult = next(it);
  (globalThis as any).r2 = r2;
  it = r2.vec;
  if (!(r2.val == 2)) throw new Error("expect failed");
  let r3: NextResult = next(it);
  (globalThis as any).r3 = r3;
  it = r3.vec;
  if (!(r3.val == 3)) throw new Error("expect failed");
  if (!(hasNext(it) == false)) throw new Error("expect failed");
}

function main(): void {
  test_example();
  test_empty_inner_lists();
}
main();
