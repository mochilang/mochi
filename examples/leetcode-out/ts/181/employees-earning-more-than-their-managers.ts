// Generated by Mochi TypeScript compiler

let employees: Array<any> = [
  { id: 1, name: "Joe", salary: 70000, managerId: 3 },
  { id: 2, name: "Henry", salary: 80000, managerId: 4 },
  { id: 3, name: "Sam", salary: 60000, managerId: 0 },
  { id: 4, name: "Max", salary: 90000, managerId: 0 },
];

function higherSalaryThanManager(employees: Array<Employee>): Array<string> {
  let result: Array<string> = [];
  for (const e of employees) {
    if (e.managerId != 0) {
      for (const m of employees) {
        if (m.id == e.managerId) {
          if (e.salary > m.salary) {
            result = result.concat([e.name]);
          }
          break;
        }
      }
    }
  }
  return result;
}

function example(): void {
  if (!_equal(higherSalaryThanManager(employees), ["Joe"])) {
    throw new Error("expect failed");
  }
}

function main(): void {
  type Employee = {
    id: number;
    name: string;
    salary: number;
    managerId: number;
  };
  example();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
