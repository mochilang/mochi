// Generated by Mochi TypeScript compiler

function reverseVowels(s: string): string {
  let vowels: Record<string, boolean> = {
    a: true,
    e: true,
    i: true,
    o: true,
    u: true,
    A: true,
    E: true,
    I: true,
    O: true,
    U: true,
  };
  let chars: Array<string> = [];
  for (const ch of s) {
    chars = chars.concat([ch]);
  }
  let i: number = 0;
  let j: number = chars.length - 1;
  while (i < j) {
    while (i < j) {
      if (Object.prototype.hasOwnProperty.call(vowels, String(chars[i]))) {
        break;
      }
      i = i + 1;
    }
    while (i < j) {
      if (Object.prototype.hasOwnProperty.call(vowels, String(chars[j]))) {
        break;
      }
      j = j - 1;
    }
    if (i < j) {
      let tmp: string = chars[i];
      chars[i] = chars[j];
      chars[j] = tmp;
      i = i + 1;
      j = j - 1;
    }
  }
  let result: string = "";
  for (const ch of chars) {
    result = result + ch;
  }
  return result;
}

function example_1(): void {
  if (!(reverseVowels("hello") == "holle")) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(reverseVowels("leetcode") == "leotcede")) {
    throw new Error("expect failed");
  }
}

function mixed_case(): void {
  if (!(reverseVowels("aA") == "Aa")) {
    throw new Error("expect failed");
  }
}

function empty_string(): void {
  if (!(reverseVowels("") == "")) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  mixed_case();
  empty_string();
}
main();
