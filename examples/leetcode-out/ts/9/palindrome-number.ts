// Generated by Mochi TypeScript compiler

function isPalindrome(x: number): boolean {
  if ((x < 0)) {
    return false;
  }
  let s: string = String(x);
  (globalThis as any).s = s;
  let n: number = s.length;
  (globalThis as any).n = n;
  for (let i: number = 0; i < Math.trunc(n / 2); i++) {
    if ((_indexString(s, i) != _indexString(s, (n - 1) - i))) {
      return false;
    }
  }
  return true;
}

function test_example_1(): void {
  if (!(isPalindrome(121) == true)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(isPalindrome(-121) == false)) throw new Error("expect failed");
}

function test_example_3(): void {
  if (!(isPalindrome(10) == false)) throw new Error("expect failed");
}

function test_zero(): void {
  if (!(isPalindrome(0) == true)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_zero();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
