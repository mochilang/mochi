// Generated by Mochi TypeScript compiler

function minArea(image: Array<Array<string>>, x: number, y: number): number {
  let rows: number = image.length;
  (globalThis as any).rows = rows;
  let cols: number = image[0].length;
  (globalThis as any).cols = cols;
  let visited: Array<Array<boolean>> = [];
  (globalThis as any).visited = visited;
  let r: number = 0;
  (globalThis as any).r = r;
  while ((r < rows)) {
    let row: Array<boolean> = [];
    (globalThis as any).row = row;
    let c: number = 0;
    (globalThis as any).c = c;
    while ((c < cols)) {
      row = row.concat([false]);
      c = c + 1;
    }
    visited = visited.concat([row]);
    r = r + 1;
  }
  let minRow: number = x;
  (globalThis as any).minRow = minRow;
  let maxRow: number = x;
  (globalThis as any).maxRow = maxRow;
  let minCol: number = y;
  (globalThis as any).minCol = minCol;
  let maxCol: number = y;
  (globalThis as any).maxCol = maxCol;
  function dfs(i: number, j: number): number {
    if (((((i < 0) || (i >= rows)) || (j < 0)) || (j >= cols))) {
      return 0;
    }
    if (visited[i][j]) {
      return 0;
    }
    if ((image[i][j] != "1")) {
      return 0;
    }
    visited[i][j] = true;
    if ((i < minRow)) {
      minRow = i;
    }
    if ((i > maxRow)) {
      maxRow = i;
    }
    if ((j < minCol)) {
      minCol = j;
    }
    if ((j > maxCol)) {
      maxCol = j;
    }
    dfs(i + 1, j);
    dfs(i - 1, j);
    dfs(i, j + 1);
    dfs(i, j - 1);
    return 0;
  }
  dfs(x, y);
  let height: number = (maxRow - minRow) + 1;
  (globalThis as any).height = height;
  let width: number = (maxCol - minCol) + 1;
  (globalThis as any).width = width;
  return (height * width);
}

function test_example(): void {
  if (!(minArea(example, 0, 2) == 6)) throw new Error("expect failed");
}

function test_single_pixel(): void {
  if (!(minArea([["1"]], 0, 0) == 1)) throw new Error("expect failed");
}

function test_all_ones(): void {
  if (
    !(minArea(
      [
        [
          "1",
          "1",
        ],
        [
          "1",
          "1",
        ],
      ],
      1,
      1,
    ) == 4)
  ) throw new Error("expect failed");
}

function main(): void {
  let example: Array<Array<string>> = [
    [
      "0",
      "0",
      "1",
      "0",
    ],
    [
      "0",
      "1",
      "1",
      "0",
    ],
    [
      "0",
      "1",
      "0",
      "0",
    ],
  ];
  (globalThis as any).example = example;
  test_example();
  test_single_pixel();
  test_all_ones();
}
main();
