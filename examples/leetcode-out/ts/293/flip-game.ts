// Generated by Mochi TypeScript compiler

function generatePossibleNextMoves(s: string) : Array<string> {
	let result: Array<string> = []
	let i: number = 0
	let n: number = s.length
	while (((i + 1) < n)) {
		if (((s[i] == "+") && (s[(i + 1)] == "+"))) {
			let next: string = s.slice(0, i) + "--" + s.slice((i + 2), n)
			result = result.concat([next])
		}
		i = (i + 1)
	}
	return result
}

function example_1(): void {
	if (!(_equal(generatePossibleNextMoves("++++"), ["--++", "+--+", "++--"]))) { throw new Error('expect failed') }
}

function no_moves(): void {
	if (!(_equal(generatePossibleNextMoves("+-"), []))) { throw new Error('expect failed') }
}

function three_plus(): void {
	if (!(_equal(generatePossibleNextMoves("+++"), ["--+", "+--"]))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	no_moves()
	three_plus()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

