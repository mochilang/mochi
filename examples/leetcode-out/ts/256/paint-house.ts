// Generated by Mochi TypeScript compiler

function min(a: number, b: number): number {
  if ((a < b)) {
    return a;
  }
  return b;
}

function minCost(costs: Array<Array<number>>): number {
  let n: number = costs.length;
  (globalThis as any).n = n;
  if ((n == 0)) {
    return 0;
  }
  let dpR: number = costs[0][0];
  (globalThis as any).dpR = dpR;
  let dpG: number = costs[0][1];
  (globalThis as any).dpG = dpG;
  let dpB: number = costs[0][2];
  (globalThis as any).dpB = dpB;
  let i: number = 1;
  (globalThis as any).i = i;
  while ((i < n)) {
    let r: number = costs[i][0] + _min(dpG, dpB);
    (globalThis as any).r = r;
    let g: number = costs[i][1] + _min(dpR, dpB);
    (globalThis as any).g = g;
    let b: number = costs[i][2] + _min(dpR, dpG);
    (globalThis as any).b = b;
    dpR = r;
    dpG = g;
    dpB = b;
    i = i + 1;
  }
  return _min(dpR, _min(dpG, dpB));
}

function test_example_1(): void {
  if (
    !(minCost([
      [
        17,
        2,
        17,
      ],
      [
        16,
        16,
        5,
      ],
      [
        14,
        3,
        19,
      ],
    ]) == 10)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(minCost([
      [
        7,
        6,
        2,
      ],
    ]) == 2)
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
}
function _min(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m = Number(list[0]);
  for (const n of list) {
    const num = Number(n);
    if (num < m) m = num;
  }
  return m;
}

main();
