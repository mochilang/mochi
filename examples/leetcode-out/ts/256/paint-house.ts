// Generated by Mochi TypeScript compiler

function min(a: number, b: number) : number {
	if ((a < b)) {
		return a
	}
	return b
}

function minCost(costs: Array<Array<number>>) : number {
	let n: number = costs.length
	if ((n == 0)) {
		return 0
	}
	let dpR: number = costs[0][0]
	let dpG: number = costs[0][1]
	let dpB: number = costs[0][2]
	let i: number = 1
	while ((i < n)) {
		let r: number = (costs[i][0] + min(dpG, dpB))
		let g: number = (costs[i][1] + min(dpR, dpB))
		let b: number = (costs[i][2] + min(dpR, dpG))
		dpR = r
		dpG = g
		dpB = b
		i = (i + 1)
	}
	return min(dpR, min(dpG, dpB))
}

function example_1(): void {
	if (!((minCost([[17, 2, 17], [16, 16, 5], [14, 3, 19]]) == 10))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((minCost([[7, 6, 2]]) == 2))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
}
main()

