// Generated by Mochi TypeScript compiler

function detectCycle(next: Array<number>): number {
  if ((next.length == 0)) {
    return (-1);
  }
  let slow: number = 0;
  (globalThis as any).slow = slow;
  let fast: number = 0;
  (globalThis as any).fast = fast;
  while (((fast != (-1)) && (next[fast] != (-1)))) {
    slow = next[slow];
    fast = next[next[fast]];
    if ((slow == fast)) {
      break;
    }
  }
  if (((fast == (-1)) || (next[fast] == (-1)))) {
    return (-1);
  }
  let start: number = 0;
  (globalThis as any).start = start;
  while ((start != slow)) {
    start = next[start];
    slow = next[slow];
  }
  return start;
}

function test_example_1(): void {
  if (
    !(detectCycle([
      1,
      2,
      3,
      1,
    ]) == 1)
  ) throw new Error("expect failed");
}

function test_no_cycle(): void {
  if (
    !(detectCycle([
      1,
      2,
      3,
      -1,
    ]) == (-1))
  ) throw new Error("expect failed");
}

function test_cycle_at_head(): void {
  if (!(detectCycle([0]) == 0)) throw new Error("expect failed");
}

function test_single_node_no_cycle(): void {
  if (!(detectCycle([-1]) == (-1))) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_no_cycle();
  test_cycle_at_head();
  test_single_node_no_cycle();
}
main();
