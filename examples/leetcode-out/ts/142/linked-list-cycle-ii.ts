// Generated by Mochi TypeScript compiler

function detectCycle(next: Array<number>) : number {
	if ((next.length == 0)) {
		return (-1)
	}
	let slow: number = 0
	let fast: number = 0
	while (((fast != ((-1))) && (next[fast] != ((-1))))) {
		slow = next[slow]
		fast = next[next[fast]]
		if ((slow == fast)) {
			break
		}
	}
	if (((fast == ((-1))) || (next[fast] == ((-1))))) {
		return (-1)
	}
	let start: number = 0
	while ((start != slow)) {
		start = next[start]
		slow = next[slow]
	}
	return start
}

function example_1(): void {
	if (!((detectCycle([1, 2, 3, 1]) == 1))) { throw new Error('expect failed') }
}

function no_cycle(): void {
	if (!((detectCycle([1, 2, 3, (-1)]) == ((-1))))) { throw new Error('expect failed') }
}

function cycle_at_head(): void {
	if (!((detectCycle([0]) == 0))) { throw new Error('expect failed') }
}

function single_node_no_cycle(): void {
	if (!((detectCycle([(-1)]) == ((-1))))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	no_cycle()
	cycle_at_head()
	single_node_no_cycle()
}
main()

