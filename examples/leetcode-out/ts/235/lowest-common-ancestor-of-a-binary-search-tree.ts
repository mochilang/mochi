// Generated by Mochi TypeScript compiler

type _Node = {
  val: number;
  left: number;
  right: number;
};

function lowestCommonAncestor(
  tree: Array<_Node>,
  root: number,
  p: number,
  q: number,
): number {
  let pNode: _Node = tree[p];
  (globalThis as any).pNode = pNode;
  let qNode: _Node = tree[q];
  (globalThis as any).qNode = qNode;
  let pVal: number = pNode.val;
  (globalThis as any).pVal = pVal;
  let qVal: number = qNode.val;
  (globalThis as any).qVal = qVal;
  let current: number = root;
  (globalThis as any).current = current;
  while (true) {
    let node: _Node = tree[current];
    (globalThis as any).node = node;
    if (((pVal < node.val) && (qVal < node.val))) {
      current = node.left;
    } else if (((pVal > node.val) && (qVal > node.val))) {
      current = node.right;
    } else {
      return current;
    }
  }
}

function test_example_1(): void {
  if (!(lowestCommonAncestor(example, 0, 1, 2) == 0)) {
    throw new Error("expect failed");
  }
}

function test_example_2(): void {
  if (!(lowestCommonAncestor(example, 0, 1, 4) == 1)) {
    throw new Error("expect failed");
  }
}

function test_single_node(): void {
  let single: Array<_Node> = [
    {
      val: 1,
      left: (-1),
      right: (-1),
    },
  ];
  (globalThis as any).single = single;
  if (!(lowestCommonAncestor(single, 0, 0, 0) == 0)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  let example: Array<_Node> = [
    {
      val: 6,
      left: 1,
      right: 2,
    },
    {
      val: 2,
      left: 3,
      right: 4,
    },
    {
      val: 8,
      left: 5,
      right: 6,
    },
    {
      val: 0,
      left: (-1),
      right: (-1),
    },
    {
      val: 4,
      left: 7,
      right: 8,
    },
    {
      val: 7,
      left: (-1),
      right: (-1),
    },
    {
      val: 9,
      left: (-1),
      right: (-1),
    },
    {
      val: 3,
      left: (-1),
      right: (-1),
    },
    {
      val: 5,
      left: (-1),
      right: (-1),
    },
  ];
  (globalThis as any).example = example;
  test_example_1();
  test_example_2();
  test_single_node();
}
main();
