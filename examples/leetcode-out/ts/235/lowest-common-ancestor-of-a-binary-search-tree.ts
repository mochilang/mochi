// Generated by Mochi TypeScript compiler

let example: Array<any> = [{val: 6, left: 1, right: 2}, {val: 2, left: 3, right: 4}, {val: 8, left: 5, right: 6}, {val: 0, left: (-1), right: (-1)}, {val: 4, left: 7, right: 8}, {val: 7, left: (-1), right: (-1)}, {val: 9, left: (-1), right: (-1)}, {val: 3, left: (-1), right: (-1)}, {val: 5, left: (-1), right: (-1)}]

function lowestCommonAncestor(tree: Array<Node>, root: number, p: number, q: number) : number {
	let pNode: Node = tree[p]
	let qNode: Node = tree[q]
	let pVal: number = pNode.val
	let qVal: number = qNode.val
	let current: number = root
	while (true) {
		let node: Node = tree[current]
		if (((pVal < node.val) && (qVal < node.val))) {
			current = node.left
		} else 		if (((pVal > node.val) && (qVal > node.val))) {
			current = node.right
		} else {
			return current
		}
	}
}

function example_1(): void {
	if (!((lowestCommonAncestor(example, 0, 1, 2) == 0))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((lowestCommonAncestor(example, 0, 1, 4) == 1))) { throw new Error('expect failed') }
}

function single_node(): void {
	let single: Array<Node> = [{val: 1, left: (-1), right: (-1)}]
	if (!((lowestCommonAncestor(single, 0, 0, 0) == 0))) { throw new Error('expect failed') }
}

function main(): void {
	type Node = {
		val: number;
		left: number;
		right: number;
	}
	example_1()
	example_2()
	single_node()
}
main()

