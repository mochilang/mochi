// Generated by Mochi TypeScript compiler

function findLadders(
  beginWord: string,
  endWord: string,
  wordList: Array<string>,
): Array<Array<string>> {
  let dict: Record<string, boolean> = {};
  (globalThis as any).dict = dict;
  for (const w of wordList) {
    dict[w] = true;
  }
  if ((!(Object.prototype.hasOwnProperty.call(dict, String(endWord))))) {
    return [];
  }
  let letters: string = "abcdefghijklmnopqrstuvwxyz";
  (globalThis as any).letters = letters;
  let queue: Array<string> = [beginWord];
  (globalThis as any).queue = queue;
  let visited: Record<string, number> = { "beginWord": 0 };
  (globalThis as any).visited = visited;
  let parents: Record<string, Array<string>> = {};
  (globalThis as any).parents = parents;
  let step: number = 0;
  (globalThis as any).step = step;
  let found: boolean = false;
  (globalThis as any).found = found;
  while ((queue.length > 0)) {
    if (found) {
      break;
    }
    step = step + 1;
    let next: Array<string> = [];
    (globalThis as any).next = next;
    for (const word of queue) {
      let i: number = 0;
      (globalThis as any).i = i;
      while ((i < word.length)) {
        let j: number = 0;
        (globalThis as any).j = j;
        while ((j < letters.length)) {
          let ch: string = _indexString(letters, j);
          (globalThis as any).ch = ch;
          if ((ch != _indexString(word, i))) {
            let candidate: string = _sliceString(word, 0, i) + ch +
              _sliceString(word, i + 1, word.length);
            (globalThis as any).candidate = candidate;
            if (Object.prototype.hasOwnProperty.call(dict, String(candidate))) {
              if (
                (!(Object.prototype.hasOwnProperty.call(
                  visited,
                  String(candidate),
                )))
              ) {
                visited[candidate] = step;
                next = next.concat([candidate]);
              }
              if ((visited[candidate] == step)) {
                if (
                  Object.prototype.hasOwnProperty.call(
                    parents,
                    String(candidate),
                  )
                ) {
                  parents[candidate] = parents[candidate].concat([word]);
                } else {
                  parents[candidate] = [word];
                }
              }
              if ((candidate == endWord)) {
                found = true;
              }
            }
          }
          j = j + 1;
        }
        i = i + 1;
      }
    }
    queue = next;
  }
  if ((!found)) {
    return [];
  }
  let results: Array<Array<string>> = [];
  (globalThis as any).results = results;
  function rev(lst: Array<string>): Array<string> {
    let out: Array<string> = [];
    (globalThis as any).out = out;
    let i: number = lst.length - 1;
    (globalThis as any).i = i;
    while ((i >= 0)) {
      out = out.concat([lst[i]]);
      i = i - 1;
    }
    return out;
  }
  function backtrack(word: string, path: Array<string>): void {
    if ((word == beginWord)) {
      results = results.concat([rev(path.concat([word]))]);
    } else {
      let ps: Array<string> = parents[word];
      (globalThis as any).ps = ps;
      for (const p of ps) {
        backtrack(p, path.concat([word]));
      }
    }
  }
  backtrack(endWord, []);
  return results;
}

function test_example_1(): void {
  let res: Array<Array<string>> = findLadders("hit", "cog", [
    "hot",
    "dot",
    "dog",
    "lot",
    "log",
    "cog",
  ]);
  (globalThis as any).res = res;
  let sorted: Array<Array<string>> = (() => {
    const _src = res;
    let _items = [];
    for (const r of _src) {
      _items.push(r);
    }
    let _pairs = _items.map((it) => {
      const r = it;
      return { item: it, key: r[2] };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const r of _items) {
      _res.push(r);
    }
    return _res;
  })();
  (globalThis as any).sorted = sorted;
  let expected: Array<Array<string>> = [
    [
      "hit",
      "hot",
      "dot",
      "dog",
      "cog",
    ],
    [
      "hit",
      "hot",
      "lot",
      "log",
      "cog",
    ],
  ];
  (globalThis as any).expected = expected;
  let expSorted: Array<Array<string>> = (() => {
    const _src = expected;
    let _items = [];
    for (const r of _src) {
      _items.push(r);
    }
    let _pairs = _items.map((it) => {
      const r = it;
      return { item: it, key: r[2] };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const r of _items) {
      _res.push(r);
    }
    return _res;
  })();
  (globalThis as any).expSorted = expSorted;
  if (!(_equal(sorted, expSorted))) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(_equal(
      findLadders("hit", "cog", [
        "hot",
        "dot",
        "dog",
        "lot",
        "log",
      ]),
      [],
    ))
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

function _sliceString(s: string, i: number, j: number): string {
  let start = i;
  let end = j;
  const runes = Array.from(s);
  const n = runes.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (end > n) end = n;
  if (end < start) end = start;
  return runes.slice(start, end).join("");
}

main();
