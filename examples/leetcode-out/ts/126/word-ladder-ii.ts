// Generated by Mochi TypeScript compiler

function findLadders(
  beginWord: string,
  endWord: string,
  wordList: Array<string>,
): Array<Array<string>> {
  let dict: Record<string, boolean> = {};
  for (const w of wordList) {
    dict[w] = true;
  }
  if (!Object.prototype.hasOwnProperty.call(dict, String(endWord))) {
    return [];
  }
  let letters: string = "abcdefghijklmnopqrstuvwxyz";
  let queue: Array<string> = [beginWord];
  let visited: Record<string, number> = { beginWord: 0 };
  let parents: Record<string, Array<string>> = {};
  let step: number = 0;
  let found: boolean = false;
  while (queue.length > 0) {
    if (found) {
      break;
    }
    step = step + 1;
    let next: Array<string> = [];
    for (const word of queue) {
      let i: number = 0;
      while (i < word.length) {
        let j: number = 0;
        while (j < letters.length) {
          let ch: string = letters[j];
          if (ch != word[i]) {
            let candidate: string =
              word.slice(0, i) + ch + word.slice(i + 1, word.length);
            if (Object.prototype.hasOwnProperty.call(dict, String(candidate))) {
              if (
                !Object.prototype.hasOwnProperty.call(
                  visited,
                  String(candidate),
                )
              ) {
                visited[candidate] = step;
                next = next.concat([candidate]);
              }
              if (visited[candidate] == step) {
                if (
                  Object.prototype.hasOwnProperty.call(
                    parents,
                    String(candidate),
                  )
                ) {
                  parents[candidate] = parents[candidate].concat([word]);
                } else {
                  parents[candidate] = [word];
                }
              }
              if (candidate == endWord) {
                found = true;
              }
            }
          }
          j = j + 1;
        }
        i = i + 1;
      }
    }
    queue = next;
  }
  if (!found) {
    return [];
  }
  let results: Array<Array<string>> = [];
  function rev(lst: Array<string>): Array<string> {
    let out: Array<string> = [];
    let i: number = lst.length - 1;
    while (i >= 0) {
      out = out.concat([lst[i]]);
      i = i - 1;
    }
    return out;
  }
  function backtrack(word: string, path: Array<string>): void {
    if (word == beginWord) {
      results = results.concat([rev(path.concat([word]))]);
    } else {
      let ps: Array<string> = parents[word];
      for (const p of ps) {
        backtrack(p, path.concat([word]));
      }
    }
  }
  backtrack(endWord, []);
  return results;
}

function example_1(): void {
  let res: Array<Array<string>> = findLadders("hit", "cog", [
    "hot",
    "dot",
    "dog",
    "lot",
    "log",
    "cog",
  ]);
  let sorted: Array<any> = (() => {
    const _src = res;
    let _items = [];
    for (const r of _src) {
      _items.push(r);
    }
    let _pairs = _items.map((it) => {
      const r = it;
      return { item: it, key: r[2] };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string")
        return ak < bk ? -1 : ak > bk ? 1 : 0;
      return String(ak) < String(bk) ? -1 : String(ak) > String(bk) ? 1 : 0;
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const r of _items) {
      _res.push(r);
    }
    return _res;
  })();
  let expected: Array<Array<string>> = [
    ["hit", "hot", "dot", "dog", "cog"],
    ["hit", "hot", "lot", "log", "cog"],
  ];
  let expSorted: Array<any> = (() => {
    const _src = expected;
    let _items = [];
    for (const r of _src) {
      _items.push(r);
    }
    let _pairs = _items.map((it) => {
      const r = it;
      return { item: it, key: r[2] };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string")
        return ak < bk ? -1 : ak > bk ? 1 : 0;
      return String(ak) < String(bk) ? -1 : String(ak) > String(bk) ? 1 : 0;
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const r of _items) {
      _res.push(r);
    }
    return _res;
  })();
  if (!_equal(sorted, expSorted)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (
    !_equal(findLadders("hit", "cog", ["hot", "dot", "dog", "lot", "log"]), [])
  ) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
