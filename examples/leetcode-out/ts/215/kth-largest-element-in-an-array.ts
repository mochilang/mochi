// Generated by Mochi TypeScript compiler

function findKthLargest(nums: Array<number>, k: number): number {
  let sorted: Array<any> = (() => {
    const _src = nums;
    let _items = [];
    for (const x of _src) {
      _items.push(x);
    }
    let _pairs = _items.map((it) => {
      const x = it;
      return { item: it, key: -x };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string")
        return ak < bk ? -1 : ak > bk ? 1 : 0;
      return String(ak) < String(bk) ? -1 : String(ak) > String(bk) ? 1 : 0;
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const x of _items) {
      _res.push(x);
    }
    return _res;
  })();
  return sorted[k - 1];
}

function example_1(): void {
  if (!(findKthLargest([3, 2, 1, 5, 6, 4], 2) == 5)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(findKthLargest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4)) {
    throw new Error("expect failed");
  }
}

function single_element(): void {
  if (!(findKthLargest([1], 1) == 1)) {
    throw new Error("expect failed");
  }
}

function with_negatives(): void {
  if (!(findKthLargest([-1, -2, -3, -4], 2) == -2)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  single_element();
  with_negatives();
}
main();
