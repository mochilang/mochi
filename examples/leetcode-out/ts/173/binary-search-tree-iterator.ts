// Generated by Mochi TypeScript compiler

function Leaf(): Record<string, any> {
  return { "__name": "Leaf" };
}

function _Node(
  left: Record<string, any>,
  value: number,
  right: Record<string, any>,
): Record<string, any> {
  return {
    "__name": "Node",
    "left": left,
    "value": value,
    "right": right,
  };
}

function isLeaf(t: Record<string, any>): boolean {
  return _equal(t["__name"], "Leaf");
}

function left(t: Record<string, any>): Record<string, any> {
  return t["left"];
}

function right(t: Record<string, any>): Record<string, any> {
  return t["right"];
}

function value(t: Record<string, any>): number {
  return t["value"];
}

function pushLeft(it: Record<string, any>, node: Record<string, any>): void {
  let n: Record<string, any> = node;
  (globalThis as any).n = n;
  let st: Array<Record<string, any>> = it["stack"];
  (globalThis as any).st = st;
  while ((!isLeaf(n))) {
    st = st.concat([n]);
    n = left(n);
  }
  it["stack"] = st;
}

function NewBSTIterator(root: Record<string, any>): Record<string, any> {
  let it: Record<string, any> = { "stack": [] };
  (globalThis as any).it = it;
  pushLeft(it, root);
  return it;
}

function bstNext(it: Record<string, any>): number {
  let st: Array<Record<string, any>> = it["stack"];
  (globalThis as any).st = st;
  let node: Record<string, any> = st[st.length - 1];
  (globalThis as any).node = node;
  st = st.slice(0, st.length - 1);
  it["stack"] = st;
  pushLeft(it, right(node));
  return value(node);
}

function bstHasNext(it: Record<string, any>): boolean {
  let st: Array<Record<string, any>> = it["stack"];
  (globalThis as any).st = st;
  return (st.length > 0);
}

function test_example(): void {
  let iterator: Record<string, any> = NewBSTIterator(
    _Node(
      _Node(Leaf(), 3, Leaf()),
      7,
      _Node(_Node(Leaf(), 9, Leaf()), 15, _Node(Leaf(), 20, Leaf())),
    ),
  );
  (globalThis as any).iterator = iterator;
  if (!(bstNext(iterator) == 3)) throw new Error("expect failed");
  if (!(bstNext(iterator) == 7)) throw new Error("expect failed");
  if (!(bstHasNext(iterator) == true)) throw new Error("expect failed");
  if (!(bstNext(iterator) == 9)) throw new Error("expect failed");
  if (!(bstHasNext(iterator) == true)) throw new Error("expect failed");
  if (!(bstNext(iterator) == 15)) throw new Error("expect failed");
  if (!(bstHasNext(iterator) == true)) throw new Error("expect failed");
  if (!(bstNext(iterator) == 20)) throw new Error("expect failed");
  if (!(bstHasNext(iterator) == false)) throw new Error("expect failed");
}

function test_single_node(): void {
  let it: Record<string, any> = NewBSTIterator(_Node(Leaf(), 5, Leaf()));
  (globalThis as any).it = it;
  if (!(bstNext(it) == 5)) throw new Error("expect failed");
  if (!(bstHasNext(it) == false)) throw new Error("expect failed");
}

function main(): void {
  test_example();
  test_single_node();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
