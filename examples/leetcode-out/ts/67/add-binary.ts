// Generated by Mochi TypeScript compiler

function addBinary(a: string, b: string): string {
  let digits: Record<string, number> = {
    "0": 0,
    "1": 1,
  };
  (globalThis as any).digits = digits;
  let i: number = a.length;
  (globalThis as any).i = i;
  let j: number = b.length;
  (globalThis as any).j = j;
  let carry: number = 0;
  (globalThis as any).carry = carry;
  let out: string = "";
  (globalThis as any).out = out;
  while ((((i > 0) || (j > 0)) || (carry > 0))) {
    let x: number = 0;
    (globalThis as any).x = x;
    if ((i > 0)) {
      i = i - 1;
      x = digits[_indexString(a, i)];
    }
    let y: number = 0;
    (globalThis as any).y = y;
    if ((j > 0)) {
      j = j - 1;
      y = digits[_indexString(b, j)];
    }
    let sum: number = (x + y) + carry;
    (globalThis as any).sum = sum;
    carry = Math.trunc(sum / 2);
    let bit: number = sum % 2;
    (globalThis as any).bit = bit;
    out = String(bit) + out;
  }
  return out;
}

function test_example_1(): void {
  if (!(addBinary("11", "1") == "100")) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(addBinary("1010", "1011") == "10101")) throw new Error("expect failed");
}

function test_zero(): void {
  if (!(addBinary("0", "0") == "0")) throw new Error("expect failed");
}

function test_different_lengths(): void {
  if (!(addBinary("1", "111") == "1000")) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_zero();
  test_different_lengths();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
