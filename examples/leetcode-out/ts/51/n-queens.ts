// Generated by Mochi TypeScript compiler

function solveNQueens(n: number): Array<Array<string>> {
  let results: Array<Array<string>> = [];
  (globalThis as any).results = results;
  let cols: Record<number, boolean> = {};
  (globalThis as any).cols = cols;
  let diag1: Record<number, boolean> = {};
  (globalThis as any).diag1 = diag1;
  let diag2: Record<number, boolean> = {};
  (globalThis as any).diag2 = diag2;
  function backtrack(row: number, board: Array<string>): void {
    if ((row == n)) {
      results = results.concat([board]);
    } else {
      let c: number = 0;
      (globalThis as any).c = c;
      while ((c < n)) {
        let usedCol: boolean = false;
        (globalThis as any).usedCol = usedCol;
        if (Object.prototype.hasOwnProperty.call(cols, String(c))) {
          usedCol = cols[c];
        }
        if (usedCol) {
          c = c + 1;
          continue;
        }
        let d1: number = row - c;
        (globalThis as any).d1 = d1;
        let d2: number = row + c;
        (globalThis as any).d2 = d2;
        let usedD1: boolean = false;
        (globalThis as any).usedD1 = usedD1;
        let usedD2: boolean = false;
        (globalThis as any).usedD2 = usedD2;
        if (Object.prototype.hasOwnProperty.call(diag1, String(d1))) {
          usedD1 = diag1[d1];
        }
        if (Object.prototype.hasOwnProperty.call(diag2, String(d2))) {
          usedD2 = diag2[d2];
        }
        if ((!(usedD1 || usedD2))) {
          cols[c] = true;
          diag1[d1] = true;
          diag2[d2] = true;
          let rowStr: string = "";
          (globalThis as any).rowStr = rowStr;
          let i: number = 0;
          (globalThis as any).i = i;
          while ((i < n)) {
            if ((i == c)) {
              rowStr = rowStr + "Q";
            } else {
              rowStr = rowStr + ".";
            }
            i = i + 1;
          }
          backtrack(row + 1, board.concat([rowStr]));
          cols[c] = false;
          diag1[d1] = false;
          diag2[d2] = false;
        }
        c = c + 1;
      }
    }
  }
  backtrack(0, []);
  return results;
}

function test_n_4(): void {
  if (!(_equal(result4, expected4))) throw new Error("expect failed");
}

function test_n_1(): void {
  if (!(_equal(solveNQueens(1), [["Q"]]))) throw new Error("expect failed");
}

function main(): void {
  let result4: Array<Array<string>> = solveNQueens(4);
  (globalThis as any).result4 = result4;
  let expected4: Array<Array<string>> = [
    [
      ".Q..",
      "...Q",
      "Q...",
      "..Q.",
    ],
    [
      "..Q.",
      "Q...",
      "...Q",
      ".Q..",
    ],
  ];
  (globalThis as any).expected4 = expected4;
  test_n_4();
  test_n_1();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
