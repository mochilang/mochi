// Generated by Mochi TypeScript compiler

function minPatches(nums: Array<number>, n: number): number {
  let miss: number = 1;
  let i: number = 0;
  let patches: number = 0;
  while (miss <= n) {
    if (i < nums.length) {
      if (nums[i] <= miss) {
        miss = miss + nums[i];
        i = i + 1;
      } else {
        miss = miss + miss;
        patches = patches + 1;
      }
    } else {
      miss = miss + miss;
      patches = patches + 1;
    }
  }
  return patches;
}

function example_1(): void {
  if (!(minPatches([1, 3], 6) == 1)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(minPatches([1, 5, 10], 20) == 2)) {
    throw new Error("expect failed");
  }
}

function example_3(): void {
  if (!(minPatches([1, 2, 2], 5) == 0)) {
    throw new Error("expect failed");
  }
}

function no_patches_needed(): void {
  if (!(minPatches([1, 2, 4, 13, 43], 100) == 2)) {
    throw new Error("expect failed");
  }
}

function large_n(): void {
  if (!(minPatches([], 7) == 3)) {
    throw new Error("expect failed");
  }
}

function single_element(): void {
  if (!(minPatches([1], 1) == 0)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  example_3();
  no_patches_needed();
  large_n();
  single_element();
}
main();
