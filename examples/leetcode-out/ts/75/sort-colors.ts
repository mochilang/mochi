// Generated by Mochi TypeScript compiler

function sortColors(nums: Array<number>): Array<number> {
  let low: number = 0;
  (globalThis as any).low = low;
  let mid: number = 0;
  (globalThis as any).mid = mid;
  let high: number = nums.length - 1;
  (globalThis as any).high = high;
  while ((mid <= high)) {
    if ((nums[mid] == 0)) {
      let temp: number = nums[low];
      (globalThis as any).temp = temp;
      nums[low] = nums[mid];
      nums[mid] = temp;
      low = low + 1;
      mid = mid + 1;
    } else if ((nums[mid] == 1)) {
      mid = mid + 1;
    } else {
      let temp: number = nums[mid];
      (globalThis as any).temp = temp;
      nums[mid] = nums[high];
      nums[high] = temp;
      high = high - 1;
    }
  }
  return nums;
}

function test_example_1(): void {
  if (
    !(_equal(
      sortColors([
        2,
        0,
        2,
        1,
        1,
        0,
      ]),
      [
        0,
        0,
        1,
        1,
        2,
        2,
      ],
    ))
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(_equal(
      sortColors([
        2,
        0,
        1,
      ]),
      [
        0,
        1,
        2,
      ],
    ))
  ) throw new Error("expect failed");
}

function test_single_zero(): void {
  if (!(_equal(sortColors([0]), [0]))) throw new Error("expect failed");
}

function test_single_one(): void {
  if (!(_equal(sortColors([1]), [1]))) throw new Error("expect failed");
}

function test_single_two(): void {
  if (!(_equal(sortColors([2]), [2]))) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_single_zero();
  test_single_one();
  test_single_two();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
