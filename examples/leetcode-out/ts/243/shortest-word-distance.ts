// Generated by Mochi TypeScript compiler

function abs(x: number): number {
  if ((x < 0)) {
    return (-x);
  } else {
    return x;
  }
}

function shortestDistance(
  words: Array<string>,
  word1: string,
  word2: string,
): number {
  let index1: number = -1;
  (globalThis as any).index1 = index1;
  let index2: number = -1;
  (globalThis as any).index2 = index2;
  let result: number = words.length;
  (globalThis as any).result = result;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < words.length)) {
    if ((words[i] == word1)) {
      index1 = i;
    }
    if ((words[i] == word2)) {
      index2 = i;
    }
    if (((index1 >= 0) && (index2 >= 0))) {
      let dist: number = abs(index1 - index2);
      (globalThis as any).dist = dist;
      if ((dist < result)) {
        result = dist;
      }
    }
    i = i + 1;
  }
  return result;
}

function test_example_1(): void {
  let words: Array<string> = [
    "practice",
    "makes",
    "perfect",
    "coding",
    "makes",
  ];
  (globalThis as any).words = words;
  if (!(shortestDistance(words, "coding", "practice") == 3)) {
    throw new Error("expect failed");
  }
}

function test_example_2(): void {
  let words: Array<string> = [
    "practice",
    "makes",
    "perfect",
    "coding",
    "makes",
  ];
  (globalThis as any).words = words;
  if (!(shortestDistance(words, "makes", "coding") == 1)) {
    throw new Error("expect failed");
  }
}

function test_same_adjacent(): void {
  let words: Array<string> = [
    "a",
    "b",
    "a",
  ];
  (globalThis as any).words = words;
  if (!(shortestDistance(words, "a", "b") == 1)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  test_example_1();
  test_example_2();
  test_same_adjacent();
}
main();
