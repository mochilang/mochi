// Generated by Mochi TypeScript compiler

function abs(x: number): number {
  if (x < 0) {
    return -x;
  } else {
    return x;
  }
}

function shortestDistance(
  words: Array<string>,
  word1: string,
  word2: string,
): number {
  let index1: number = -1;
  let index2: number = -1;
  let result: number = words.length;
  let i: number = 0;
  while (i < words.length) {
    if (words[i] == word1) {
      index1 = i;
    }
    if (words[i] == word2) {
      index2 = i;
    }
    if (index1 >= 0 && index2 >= 0) {
      let dist: number = abs(index1 - index2);
      if (dist < result) {
        result = dist;
      }
    }
    i = i + 1;
  }
  return result;
}

function example_1(): void {
  let words: Array<string> = [
    "practice",
    "makes",
    "perfect",
    "coding",
    "makes",
  ];
  if (!(shortestDistance(words, "coding", "practice") == 3)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  let words: Array<string> = [
    "practice",
    "makes",
    "perfect",
    "coding",
    "makes",
  ];
  if (!(shortestDistance(words, "makes", "coding") == 1)) {
    throw new Error("expect failed");
  }
}

function same_adjacent(): void {
  let words: Array<string> = ["a", "b", "a"];
  if (!(shortestDistance(words, "a", "b") == 1)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  same_adjacent();
}
main();
