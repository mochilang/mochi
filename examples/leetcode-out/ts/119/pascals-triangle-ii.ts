// Generated by Mochi TypeScript compiler

function getRow(rowIndex: number): Array<number> {
  let row: Array<number> = [1];
  (globalThis as any).row = row;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < rowIndex)) {
    let next: Array<number> = [1];
    (globalThis as any).next = next;
    let j: number = 1;
    (globalThis as any).j = j;
    while ((j < row.length)) {
      next = next.concat([row[j - 1] + row[j]]);
      j = j + 1;
    }
    next = next.concat([1]);
    row = next;
    i = i + 1;
  }
  return row;
}

function test_example_1(): void {
  if (
    !(_equal(getRow(3), [
      1,
      3,
      3,
      1,
    ]))
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(_equal(getRow(0), [1]))) throw new Error("expect failed");
}

function test_example_3(): void {
  if (
    !(_equal(getRow(1), [
      1,
      1,
    ]))
  ) throw new Error("expect failed");
}

function test_row_2(): void {
  if (
    !(_equal(getRow(2), [
      1,
      2,
      1,
    ]))
  ) throw new Error("expect failed");
}

function test_row_4(): void {
  if (
    !(_equal(getRow(4), [
      1,
      4,
      6,
      4,
      1,
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_row_2();
  test_row_4();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
