// Generated by Mochi TypeScript compiler

function hammingWeight(n: number): number {
  let count: number = 0;
  (globalThis as any).count = count;
  let num: number = n;
  (globalThis as any).num = num;
  while ((num > 0)) {
    if (((num % 2) == 1)) {
      count = count + 1;
    }
    num = Math.trunc(num / 2);
  }
  return count;
}

function test_example_1(): void {
  if (!(hammingWeight(11) == 3)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(hammingWeight(128) == 1)) throw new Error("expect failed");
}

function test_example_3(): void {
  if (!(hammingWeight(4294967293) == 31)) throw new Error("expect failed");
}

function test_zero(): void {
  if (!(hammingWeight(0) == 0)) throw new Error("expect failed");
}

function test_all_ones(): void {
  if (!(hammingWeight(4294967295) == 32)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_zero();
  test_all_ones();
}
main();
