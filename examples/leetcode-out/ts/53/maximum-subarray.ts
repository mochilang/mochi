// Generated by Mochi TypeScript compiler

function maxSubArray(nums: Array<number>): number {
  let n: number = nums.length;
  (globalThis as any).n = n;
  let current: number = nums[0];
  (globalThis as any).current = current;
  let best: number = nums[0];
  (globalThis as any).best = best;
  for (let i: number = 1; i < n; i++) {
    let val: number = nums[i];
    (globalThis as any).val = val;
    if (((current + val) > val)) {
      current = current + val;
    } else {
      current = val;
    }
    if ((current > best)) {
      best = current;
    }
  }
  return best;
}

function test_example_1(): void {
  if (
    !(maxSubArray([
      -2,
      1,
      -3,
      4,
      -1,
      2,
      1,
      -5,
      4,
    ]) == 6)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(maxSubArray([1]) == 1)) throw new Error("expect failed");
}

function test_example_3(): void {
  if (
    !(maxSubArray([
      5,
      4,
      -1,
      7,
      8,
    ]) == 23)
  ) throw new Error("expect failed");
}

function test_all_negative(): void {
  if (
    !(maxSubArray([
      -3,
      -2,
      -5,
    ]) == (-2))
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_all_negative();
}
main();
