// Generated by Mochi TypeScript compiler

function maxSlidingWindow(nums: Array<number>, k: number): Array<number> {
  let n: number = nums.length;
  (globalThis as any).n = n;
  if ((n == 0)) {
    return [];
  }
  let result: Array<number> = [];
  (globalThis as any).result = result;
  let deque: Array<number> = [];
  (globalThis as any).deque = deque;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < n)) {
    while ((deque.length > 0)) {
      let last: number = deque[deque.length - 1];
      (globalThis as any).last = last;
      if ((nums[last] < nums[i])) {
        deque = deque.slice(0, deque.length - 1);
      } else {
        break;
      }
    }
    deque = deque.concat([i]);
    if ((deque.length > 0)) {
      if ((deque[0] <= (i - k))) {
        deque = deque.slice(1, deque.length);
      }
    }
    if (((i + 1) >= k)) {
      result = result.concat([nums[deque[0]]]);
    }
    i = i + 1;
  }
  return result;
}

function test_example_1(): void {
  if (
    !(_equal(
      maxSlidingWindow([
        1,
        3,
        -1,
        -3,
        5,
        3,
        6,
        7,
      ], 3),
      [
        3,
        3,
        5,
        5,
        6,
        7,
      ],
    ))
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(_equal(maxSlidingWindow([1], 1), [1]))) {
    throw new Error("expect failed");
  }
}

function test_k_equals_array_length(): void {
  if (
    !(_equal(
      maxSlidingWindow([
        2,
        1,
      ], 2),
      [2],
    ))
  ) throw new Error("expect failed");
}

function test_all_decreasing(): void {
  if (
    !(_equal(
      maxSlidingWindow([
        9,
        8,
        7,
        6,
        5,
      ], 2),
      [
        9,
        8,
        7,
        6,
      ],
    ))
  ) throw new Error("expect failed");
}

function test_window_size_1(): void {
  if (
    !(_equal(
      maxSlidingWindow([
        4,
        2,
      ], 1),
      [
        4,
        2,
      ],
    ))
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_k_equals_array_length();
  test_all_decreasing();
  test_window_size_1();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
