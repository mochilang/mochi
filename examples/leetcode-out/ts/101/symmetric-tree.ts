// Generated by Mochi TypeScript compiler

function isSymmetric(root: Tree): boolean {
  function isMirror(t1: any, t2: any): boolean {
    return (() => {
      const _t = t1;
      if (_t.__name === "Leaf") {
        return (() => {
          const _t = t2;
          if (_t.__name === "Leaf") {
            return true;
          }
          return false;
        })();
      }
      if (_t.__name === "Node") {
        return ((l1, v1, r1) =>
          (() => {
            const _t = t2;
            if (_t.__name === "Node") {
              return ((l2, v2, r2) =>
                _equal(v1, v2) && isMirror(l1, r2) && isMirror(r1, l2))(
                _t.left,
                _t.value,
                _t.right,
              );
            }
            return false;
          })())(_t.left, _t.value, _t.right);
      }
      return undefined;
    })();
  }
  return isMirror(root, root);
}

function example_1(): void {
  let tree: Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 3,
        right: { __name: "Leaf" },
      },
      value: 2,
      right: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 4,
        right: { __name: "Leaf" },
      },
    },
    value: 1,
    right: {
      __name: "Node",
      left: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 4,
        right: { __name: "Leaf" },
      },
      value: 2,
      right: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 3,
        right: { __name: "Leaf" },
      },
    },
  };
  if (!(isSymmetric(tree) == true)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  let tree: Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 2,
      right: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 3,
        right: { __name: "Leaf" },
      },
    },
    value: 1,
    right: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 2,
      right: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 3,
        right: { __name: "Leaf" },
      },
    },
  };
  if (!(isSymmetric(tree) == false)) {
    throw new Error("expect failed");
  }
}

function single_node(): void {
  if (
    !(
      isSymmetric({
        __name: "Node",
        left: { __name: "Leaf" },
        value: 1,
        right: { __name: "Leaf" },
      }) == true
    )
  ) {
    throw new Error("expect failed");
  }
}

function empty(): void {
  if (!(isSymmetric({ __name: "Leaf" }) == true)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  type Leaf = {
    __name: "Leaf";
  };

  type Node = {
    __name: "Node";
    left: any;
    value: number;
    right: any;
  };

  type Tree = Leaf | Node;
  example_1();
  example_2();
  single_node();
  empty();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
