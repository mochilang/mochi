// Generated by Mochi TypeScript compiler

function buildTree(preorder: Array<number>, inorder: Array<number>): Tree {
  let n: number = preorder.length;
  let idxMap: Record<number, number> = {};
  for (let i: number = 0; i < n; i++) {
    idxMap[inorder[i]] = i;
  }
  let preIdx: number = 0;
  function helper(lo: number, hi: number): any {
    if (lo >= hi) {
      return { __name: "Leaf" };
    }
    let val: number = preorder[preIdx];
    preIdx = preIdx + 1;
    let mid: number = idxMap[val];
    return {
      __name: "Node",
      left: helper(lo, mid),
      value: val,
      right: helper(mid + 1, hi),
    };
  }
  return helper(0, n);
}

function preorderTraversal(t: Tree): Array<number> {
  return (() => {
    const _t = t;
    if (_t.__name === "Leaf") {
      return [];
    }
    if (_t.__name === "Node") {
      return ((l, v, r) =>
        [v].concat(preorderTraversal(l)).concat(preorderTraversal(r)))(
        _t.left,
        _t.value,
        _t.right,
      );
    }
    return undefined;
  })();
}

function inorderTraversal(t: Tree): Array<number> {
  return (() => {
    const _t = t;
    if (_t.__name === "Leaf") {
      return [];
    }
    if (_t.__name === "Node") {
      return ((l, v, r) =>
        inorderTraversal(l).concat([v]).concat(inorderTraversal(r)))(
        _t.left,
        _t.value,
        _t.right,
      );
    }
    return undefined;
  })();
}

function isLeaf(t: Tree): boolean {
  return (() => {
    const _t = t;
    if (_t.__name === "Leaf") {
      return true;
    }
    return false;
  })();
}

function example_1(): void {
  let preorder: Array<number> = [3, 9, 20, 15, 7];
  let inorder: Array<number> = [9, 3, 15, 20, 7];
  let tree: Tree = buildTree(preorder, inorder);
  if (!_equal(preorderTraversal(tree), preorder)) {
    throw new Error("expect failed");
  }
  if (!_equal(inorderTraversal(tree), inorder)) {
    throw new Error("expect failed");
  }
}

function single_node(): void {
  let preorder: Array<number> = [1];
  let inorder: Array<number> = [1];
  let tree: Tree = buildTree(preorder, inorder);
  if (!_equal(preorderTraversal(tree), preorder)) {
    throw new Error("expect failed");
  }
  if (!_equal(inorderTraversal(tree), inorder)) {
    throw new Error("expect failed");
  }
}

function empty(): void {
  if (!(isLeaf(buildTree([], [])) == true)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  type Leaf = {
    __name: "Leaf";
  };

  type Node = {
    __name: "Node";
    left: any;
    value: number;
    right: any;
  };

  type Tree = Leaf | Node;
  example_1();
  single_node();
  empty();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
