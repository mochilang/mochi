// Generated by Mochi TypeScript compiler

function numSquares(n: number): number {
  if ((n <= 0)) {
    return 0;
  }
  let dp: Array<number> = [];
  (globalThis as any).dp = dp;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i <= n)) {
    dp = dp.concat([i]);
    i = i + 1;
  }
  i = 1;
  while ((i <= n)) {
    let j: number = 1;
    (globalThis as any).j = j;
    dp[i] = i;
    while (((j * j) <= i)) {
      let candidate: number = dp[i - (j * j)] + 1;
      (globalThis as any).candidate = candidate;
      if ((candidate < dp[i])) {
        dp[i] = candidate;
      }
      j = j + 1;
    }
    i = i + 1;
  }
  return dp[n];
}

function test_example_1(): void {
  if (!(numSquares(12) == 3)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(numSquares(13) == 2)) throw new Error("expect failed");
}

function test_example_3(): void {
  if (!(numSquares(1) == 1)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
}
main();
