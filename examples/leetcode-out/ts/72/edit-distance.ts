// Generated by Mochi TypeScript compiler

function minDistance(word1: string, word2: string): number {
  let m: number = word1.length;
  let n: number = word2.length;
  let dp: Array<Array<number>> = [];
  let i: number = 0;
  while (i <= m) {
    let row: Array<number> = [];
    let j: number = 0;
    while (j <= n) {
      row = row.concat([0]);
      j = j + 1;
    }
    dp = dp.concat([row]);
    i = i + 1;
  }
  i = 0;
  while (i <= m) {
    dp[i][0] = i;
    i = i + 1;
  }
  let j: number = 0;
  while (j <= n) {
    dp[0][j] = j;
    j = j + 1;
  }
  i = 1;
  while (i <= m) {
    j = 1;
    while (j <= n) {
      if (word1[i - 1] == word2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1];
      } else {
        let insert: number = dp[i][j - 1] + 1;
        let _delete: number = dp[i - 1][j] + 1;
        let replace: number = dp[i - 1][j - 1] + 1;
        let best: number = insert;
        if (_delete < best) {
          best = _delete;
        }
        if (replace < best) {
          best = replace;
        }
        dp[i][j] = best;
      }
      j = j + 1;
    }
    i = i + 1;
  }
  return dp[m][n];
}

function example_1(): void {
  if (!(minDistance("horse", "ros") == 3)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(minDistance("intention", "execution") == 5)) {
    throw new Error("expect failed");
  }
}

function identical_strings(): void {
  if (!(minDistance("abc", "abc") == 0)) {
    throw new Error("expect failed");
  }
}

function empty_second(): void {
  if (!(minDistance("abc", "") == 3)) {
    throw new Error("expect failed");
  }
}

function empty_first(): void {
  if (!(minDistance("", "abc") == 3)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  identical_strings();
  empty_second();
  empty_first();
}
main();
