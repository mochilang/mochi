// Generated by Mochi TypeScript compiler

type ParseRes = {
  val: Record<string, any>;
  idx: number;
};

function IntItem(v: number): Record<string, any> {
  return {
    "kind": "int",
    "value": v,
  };
}

function ListItem(items: Array<Record<string, any>>): Record<string, any> {
  return {
    "kind": "list",
    "items": items,
  };
}

function isInt(item: Record<string, any>): boolean {
  return _equal(item["kind"], "int");
}

function itemValue(item: Record<string, any>): number {
  return item["value"];
}

function itemList(item: Record<string, any>): Array<Record<string, any>> {
  return item["items"];
}

function parseInt(s: string): number {
  let i: number = 0;
  (globalThis as any).i = i;
  let sign: number = 1;
  (globalThis as any).sign = sign;
  if (
    ((s.length > 0) &&
      ((_indexString(s, 0) == "-") || (_indexString(s, 0) == "+")))
  ) {
    if ((_indexString(s, 0) == "-")) {
      sign = -1;
    }
    i = 1;
  }
  let digits: Record<string, number> = {
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  };
  (globalThis as any).digits = digits;
  let result: number = 0;
  (globalThis as any).result = result;
  while ((i < s.length)) {
    result = (result * 10) + digits[_indexString(s, i)];
    i = i + 1;
  }
  return (result * sign);
}

function parseFrom(s: string, i: number): ParseRes {
  if ((_indexString(s, i) == "[")) {
    let items: Array<Record<string, any>> = [];
    (globalThis as any).items = items;
    let j: number = i + 1;
    (globalThis as any).j = j;
    while (((j < s.length) && (_indexString(s, j) != "]"))) {
      let res: ParseRes = parseFrom(s, j);
      (globalThis as any).res = res;
      items = items.concat([res.val]);
      j = res.idx;
      if (((j < s.length) && (_indexString(s, j) == ","))) {
        j = j + 1;
      }
    }
    return {
      val: ListItem(items),
      idx: (j + 1),
    };
  } else {
    let j: number = i;
    (globalThis as any).j = j;
    let numStr: string = "";
    (globalThis as any).numStr = numStr;
    if ((_indexString(s, j) == "-")) {
      numStr = numStr + "-";
      j = j + 1;
    }
    while ((j < s.length)) {
      let ch: string = _indexString(s, j);
      (globalThis as any).ch = ch;
      if (((ch >= "0") && (ch <= "9"))) {
        numStr = numStr + ch;
        j = j + 1;
      } else {
        break;
      }
    }
    return {
      val: IntItem(parseInt(numStr)),
      idx: j,
    };
  }
}

function deserialize(s: string): Record<string, any> {
  if ((s.length == 0)) {
    return ListItem([]);
  }
  let res: ParseRes = parseFrom(s, 0);
  (globalThis as any).res = res;
  return res.val;
}

function serialize(node: Record<string, any>): string {
  if (isInt(node)) {
    return String(itemValue(node));
  } else {
    let parts: Array<string> = [];
    (globalThis as any).parts = parts;
    let items: Array<Record<string, any>> = itemList(node);
    (globalThis as any).items = items;
    let i: number = 0;
    (globalThis as any).i = i;
    while ((i < items.length)) {
      parts = parts.concat([serialize(items[i])]);
      i = i + 1;
    }
    let body: string = "";
    (globalThis as any).body = body;
    let j: number = 0;
    (globalThis as any).j = j;
    while ((j < parts.length)) {
      if ((j > 0)) {
        body = body + ",";
      }
      body = body + parts[j];
      j = j + 1;
    }
    return "[" + body + "]";
  }
}

function test_single_integer(): void {
  let parsed: Record<string, any> = deserialize("324");
  (globalThis as any).parsed = parsed;
  if (!(serialize(parsed) == "324")) throw new Error("expect failed");
}

function test_nested_list(): void {
  let parsed: Record<string, any> = deserialize("[123,[456,[789]]]");
  (globalThis as any).parsed = parsed;
  if (!(serialize(parsed) == "[123,[456,[789]]]")) {
    throw new Error("expect failed");
  }
}

function test_negative(): void {
  let parsed: Record<string, any> = deserialize("[-1]");
  (globalThis as any).parsed = parsed;
  if (!(serialize(parsed) == "[-1]")) throw new Error("expect failed");
}

function main(): void {
  test_single_integer();
  test_nested_list();
  test_negative();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
