// Generated by Mochi TypeScript compiler

function maxRotateFunction(nums: Array<number>): number {
  let n: number = nums.length;
  if (n == 0) {
    return 0;
  }
  let total: number = 0;
  let f: number = 0;
  let i: number = 0;
  while (i < n) {
    let val: number = nums[i];
    total = total + val;
    f = f + i * val;
    i = i + 1;
  }
  let best: number = f;
  let k: number = 1;
  while (k < n) {
    f = f + total - n * nums[n - k];
    if (f > best) {
      best = f;
    }
    k = k + 1;
  }
  return best;
}

function example(): void {
  if (!(maxRotateFunction([4, 3, 2, 6]) == 26)) {
    throw new Error("expect failed");
  }
}

function single(): void {
  if (!(maxRotateFunction([100]) == 0)) {
    throw new Error("expect failed");
  }
}

function negatives(): void {
  if (!(maxRotateFunction([-1, -2, -3, -4]) == -12)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example();
  single();
  negatives();
}
main();
