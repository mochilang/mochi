// Generated by Mochi TypeScript compiler

function max(a: number, b: number): number {
  if (a > b) {
    return a;
  }
  return b;
}

function integerBreak(n: number): number {
  if (n <= 2) {
    return 1;
  }
  let dp: Array<number> = [];
  let i: number = 0;
  while (i <= n) {
    dp = dp.concat([0]);
    i = i + 1;
  }
  dp[1] = 1;
  dp[2] = 1;
  i = 3;
  while (i <= n) {
    let j: number = 1;
    let best: number = 0;
    while (j < i) {
      let direct: number = j * (i - j);
      let broken: number = j * dp[i - j];
      let candidate: number = max(direct, broken);
      if (candidate > best) {
        best = candidate;
      }
      j = j + 1;
    }
    dp[i] = best;
    i = i + 1;
  }
  return dp[n];
}

function example_1(): void {
  if (!(integerBreak(2) == 1)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(integerBreak(10) == 36)) {
    throw new Error("expect failed");
  }
}

function n_equals_3(): void {
  if (!(integerBreak(3) == 2)) {
    throw new Error("expect failed");
  }
}

function n_equals_4(): void {
  if (!(integerBreak(4) == 4)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  n_equals_3();
  n_equals_4();
}
main();
