// Generated by Mochi TypeScript compiler

function max(a: number, b: number): number {
  if ((a > b)) {
    return a;
  }
  return b;
}

function integerBreak(n: number): number {
  if ((n <= 2)) {
    return 1;
  }
  let dp: Array<number> = [];
  (globalThis as any).dp = dp;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i <= n)) {
    dp = dp.concat([0]);
    i = i + 1;
  }
  dp[1] = 1;
  dp[2] = 1;
  i = 3;
  while ((i <= n)) {
    let j: number = 1;
    (globalThis as any).j = j;
    let best: number = 0;
    (globalThis as any).best = best;
    while ((j < i)) {
      let direct: number = j * (i - j);
      (globalThis as any).direct = direct;
      let broken: number = j * dp[i - j];
      (globalThis as any).broken = broken;
      let candidate: number = _max(direct, broken);
      (globalThis as any).candidate = candidate;
      if ((candidate > best)) {
        best = candidate;
      }
      j = j + 1;
    }
    dp[i] = best;
    i = i + 1;
  }
  return dp[n];
}

function test_example_1(): void {
  if (!(integerBreak(2) == 1)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(integerBreak(10) == 36)) throw new Error("expect failed");
}

function test_n_equals_3(): void {
  if (!(integerBreak(3) == 2)) throw new Error("expect failed");
}

function test_n_equals_4(): void {
  if (!(integerBreak(4) == 4)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_n_equals_3();
  test_n_equals_4();
}
function _max(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m = Number(list[0]);
  for (const n of list) {
    const num = Number(n);
    if (num > m) m = num;
  }
  return m;
}

main();
