// Generated by Mochi TypeScript compiler

function getIntersectionNode(
  next: Array<number>,
  headA: number,
  headB: number,
): number {
  let a: number = headA;
  (globalThis as any).a = a;
  let b: number = headB;
  (globalThis as any).b = b;
  while ((a != b)) {
    if ((a == (-1))) {
      a = headB;
    } else {
      a = next[a];
    }
    if ((b == (-1))) {
      b = headA;
    } else {
      b = next[b];
    }
  }
  return a;
}

function test_example_1(): void {
  let next: Array<number> = [
    1,
    2,
    3,
    4,
    -1,
    6,
    7,
    2,
  ];
  (globalThis as any).next = next;
  if (!(getIntersectionNode(next, 0, 5) == 2)) throw new Error("expect failed");
}

function test_example_2(): void {
  let next: Array<number> = [
    1,
    2,
    3,
    4,
    -1,
    3,
  ];
  (globalThis as any).next = next;
  if (!(getIntersectionNode(next, 0, 5) == 3)) throw new Error("expect failed");
}

function test_example_3(): void {
  let next: Array<number> = [
    1,
    2,
    -1,
    4,
    -1,
  ];
  (globalThis as any).next = next;
  if (!(getIntersectionNode(next, 0, 3) == (-1))) {
    throw new Error("expect failed");
  }
}

function test_same_head(): void {
  let next: Array<number> = [
    1,
    2,
    3,
    -1,
  ];
  (globalThis as any).next = next;
  if (!(getIntersectionNode(next, 0, 0) == 0)) throw new Error("expect failed");
}

function test_one_empty(): void {
  let next: Array<number> = [
    1,
    -1,
  ];
  (globalThis as any).next = next;
  if (!(getIntersectionNode(next, 0, -1) == (-1))) {
    throw new Error("expect failed");
  }
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_same_head();
  test_one_empty();
}
main();
