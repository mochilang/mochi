// Generated by Mochi TypeScript compiler

function getIntersectionNode(next: Array<number>, headA: number, headB: number) : number {
	let a: number = headA
	let b: number = headB
	while ((a != b)) {
		if ((a == ((-1)))) {
			a = headB
		} else {
			a = next[a]
		}
		if ((b == ((-1)))) {
			b = headA
		} else {
			b = next[b]
		}
	}
	return a
}

function example_1(): void {
	let next: Array<number> = [1, 2, 3, 4, (-1), 6, 7, 2]
	if (!((getIntersectionNode(next, 0, 5) == 2))) { throw new Error('expect failed') }
}

function example_2(): void {
	let next: Array<number> = [1, 2, 3, 4, (-1), 3]
	if (!((getIntersectionNode(next, 0, 5) == 3))) { throw new Error('expect failed') }
}

function example_3(): void {
	let next: Array<number> = [1, 2, (-1), 4, (-1)]
	if (!((getIntersectionNode(next, 0, 3) == ((-1))))) { throw new Error('expect failed') }
}

function same_head(): void {
	let next: Array<number> = [1, 2, 3, (-1)]
	if (!((getIntersectionNode(next, 0, 0) == 0))) { throw new Error('expect failed') }
}

function one_empty(): void {
	let next: Array<number> = [1, (-1)]
	if (!((getIntersectionNode(next, 0, (-1)) == ((-1))))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	same_head()
	one_empty()
}
main()

