// Generated by Mochi TypeScript compiler

function maxProfit(prices: Array<number>): number {
  if ((prices.length == 0)) {
    return 0;
  }
  let minPrice: number = prices[0];
  (globalThis as any).minPrice = minPrice;
  let maxProfit: number = 0;
  (globalThis as any).maxProfit = maxProfit;
  let i: number = 1;
  (globalThis as any).i = i;
  while ((i < prices.length)) {
    let price: number = prices[i];
    (globalThis as any).price = price;
    if ((price < minPrice)) {
      minPrice = price;
    } else {
      let profit: number = price - minPrice;
      (globalThis as any).profit = profit;
      if ((profit > maxProfit)) {
        maxProfit = profit;
      }
    }
    i = i + 1;
  }
  return maxProfit;
}

function test_example_1(): void {
  if (
    !(maxProfit([
      7,
      1,
      5,
      3,
      6,
      4,
    ]) == 5)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(maxProfit([
      7,
      6,
      4,
      3,
      1,
    ]) == 0)
  ) throw new Error("expect failed");
}

function test_single_price(): void {
  if (!(maxProfit([5]) == 0)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_single_price();
}
main();
