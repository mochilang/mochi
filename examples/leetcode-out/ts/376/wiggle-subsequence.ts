// Generated by Mochi TypeScript compiler

function wiggleMaxLength(nums: Array<number>): number {
  let n: number = nums.length;
  (globalThis as any).n = n;
  if ((n < 2)) {
    return n;
  }
  let up: number = 1;
  (globalThis as any).up = up;
  let down: number = 1;
  (globalThis as any).down = down;
  for (let i: number = 1; i < n; i++) {
    if ((nums[i] > nums[i - 1])) {
      up = down + 1;
    } else if ((nums[i] < nums[i - 1])) {
      down = up + 1;
    }
  }
  if ((up > down)) {
    return up;
  }
  return down;
}

function test_example_1(): void {
  if (
    !(wiggleMaxLength([
      1,
      7,
      4,
      9,
      2,
      5,
    ]) == 6)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(wiggleMaxLength([
      1,
      17,
      5,
      10,
      13,
      15,
      10,
      5,
      16,
      8,
    ]) == 7)
  ) throw new Error("expect failed");
}

function test_example_3(): void {
  if (
    !(wiggleMaxLength([
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
    ]) == 2)
  ) throw new Error("expect failed");
}

function test_single_element(): void {
  if (!(wiggleMaxLength([5]) == 1)) throw new Error("expect failed");
}

function test_two_equal(): void {
  if (
    !(wiggleMaxLength([
      3,
      3,
    ]) == 1)
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_single_element();
  test_two_equal();
}
main();
