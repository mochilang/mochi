// Generated by Mochi TypeScript compiler

function moveZeroes(nums: Array<number>): Array<number> {
  let result: Array<number> = nums;
  let n: number = nums.length;
  let insert: number = 0;
  let i: number = 0;
  while (i < n) {
    if (nums[i] != 0) {
      result[insert] = nums[i];
      insert = insert + 1;
    }
    i = i + 1;
  }
  while (insert < n) {
    result[insert] = 0;
    insert = insert + 1;
  }
  return result;
}

function example_1(): void {
  if (!_equal(moveZeroes([0, 1, 0, 3, 12]), [1, 3, 12, 0, 0])) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!_equal(moveZeroes([0]), [0])) {
    throw new Error("expect failed");
  }
}

function all_zeros(): void {
  if (!_equal(moveZeroes([0, 0, 0]), [0, 0, 0])) {
    throw new Error("expect failed");
  }
}

function no_zeros(): void {
  if (!_equal(moveZeroes([1, 2, 3]), [1, 2, 3])) {
    throw new Error("expect failed");
  }
}

function mixed(): void {
  if (!_equal(moveZeroes([4, 0, 5, 0, 6]), [4, 5, 6, 0, 0])) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  all_zeros();
  no_zeros();
  mixed();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
