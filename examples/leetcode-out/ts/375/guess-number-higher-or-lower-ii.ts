// Generated by Mochi TypeScript compiler

function max(a: number, b: number) : number {
	if ((a > b)) {
		return a
	}
	return b
}

function getMoneyAmount(n: number) : number {
	let dp: Array<Array<number>> = []
	let i: number = 0
	while ((i <= n)) {
		let row: Array<number> = []
		let j: number = 0
		while ((j <= n)) {
			row = row.concat([0])
			j = (j + 1)
		}
		dp = dp.concat([row])
		i = (i + 1)
	}
	let len: number = 2
	while ((len <= n)) {
		let start: number = 1
		while ((start <= ((n - len) + 1))) {
			let end: number = ((start + len) - 1)
			let best: number = (n * n)
			let guess: number = start
			while ((guess <= end)) {
				let left: number = 0
				if (((guess - 1) >= start)) {
					left = dp[start][(guess - 1)]
				}
				let right: number = 0
				if (((guess + 1) <= end)) {
					right = dp[(guess + 1)][end]
				}
				let cost: number = guess
				if ((left > right)) {
					cost = (cost + left)
				} else {
					cost = (cost + right)
				}
				if ((cost < best)) {
					best = cost
				}
				guess = (guess + 1)
			}
			dp[start][end] = best
			start = (start + 1)
		}
		len = (len + 1)
	}
	return dp[1][n]
}

function example_1(): void {
	if (!((getMoneyAmount(10) == 16))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((getMoneyAmount(1) == 0))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((getMoneyAmount(2) == 1))) { throw new Error('expect failed') }
}

function n_equals_3(): void {
	if (!((getMoneyAmount(3) == 2))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	n_equals_3()
}
main()

