// Generated by Mochi TypeScript compiler

function convert(s: string, numRows: number): string {
  if (((numRows <= 1) || (numRows >= s.length))) {
    return s;
  }
  let rows: Array<string> = [];
  (globalThis as any).rows = rows;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < numRows)) {
    rows = rows.concat([""]);
    i = i + 1;
  }
  let curr: number = 0;
  (globalThis as any).curr = curr;
  let step: number = 1;
  (globalThis as any).step = step;
  for (const ch of s) {
    rows[curr] = rows[curr] + ch;
    if ((curr == 0)) {
      step = 1;
    } else if ((curr == (numRows - 1))) {
      step = -1;
    }
    curr = curr + step;
  }
  let result: string = "";
  (globalThis as any).result = result;
  for (const row of rows) {
    result = result + row;
  }
  return result;
}

function test_example_1(): void {
  if (!(convert("PAYPALISHIRING", 3) == "PAHNAPLSIIGYIR")) {
    throw new Error("expect failed");
  }
}

function test_example_2(): void {
  if (!(convert("PAYPALISHIRING", 4) == "PINALSIGYAHRPI")) {
    throw new Error("expect failed");
  }
}

function test_single_row(): void {
  if (!(convert("A", 1) == "A")) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_single_row();
}
main();
