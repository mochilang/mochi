// Generated by Mochi TypeScript compiler

function longestCommonPrefix(strs: Array<string>): string {
  if (strs.length == 0) {
    return "";
  }
  let prefix: string = strs[0];
  for (let i: number = 1; i < strs.length; i++) {
    let j: number = 0;
    let current: string = strs[i];
    while (j < prefix.length && j < current.length) {
      if (prefix[j] != current[j]) {
        break;
      }
      j = j + 1;
    }
    prefix = prefix.slice(0, j);
    if (prefix == "") {
      break;
    }
  }
  return prefix;
}

function example_1(): void {
  if (!(longestCommonPrefix(["flower", "flow", "flight"]) == "fl")) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(longestCommonPrefix(["dog", "racecar", "car"]) == "")) {
    throw new Error("expect failed");
  }
}

function single_string(): void {
  if (!(longestCommonPrefix(["single"]) == "single")) {
    throw new Error("expect failed");
  }
}

function no_common_prefix(): void {
  if (!(longestCommonPrefix(["a", "b", "c"]) == "")) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  single_string();
  no_common_prefix();
}
main();
