// Generated by Mochi TypeScript compiler

function longestCommonPrefix(strs: Array<string>): string {
  if ((strs.length == 0)) {
    return "";
  }
  let prefix: string = strs[0];
  (globalThis as any).prefix = prefix;
  for (let i: number = 1; i < strs.length; i++) {
    let j: number = 0;
    (globalThis as any).j = j;
    let current: string = strs[i];
    (globalThis as any).current = current;
    while (((j < prefix.length) && (j < current.length))) {
      if ((_indexString(prefix, j) != _indexString(current, j))) {
        break;
      }
      j = j + 1;
    }
    prefix = _sliceString(prefix, 0, j);
    if ((prefix == "")) {
      break;
    }
  }
  return prefix;
}

function test_example_1(): void {
  if (
    !(longestCommonPrefix([
      "flower",
      "flow",
      "flight",
    ]) == "fl")
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(longestCommonPrefix([
      "dog",
      "racecar",
      "car",
    ]) == "")
  ) throw new Error("expect failed");
}

function test_single_string(): void {
  if (!(longestCommonPrefix(["single"]) == "single")) {
    throw new Error("expect failed");
  }
}

function test_no_common_prefix(): void {
  if (
    !(longestCommonPrefix([
      "a",
      "b",
      "c",
    ]) == "")
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_single_string();
  test_no_common_prefix();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

function _sliceString(s: string, i: number, j: number): string {
  let start = i;
  let end = j;
  const runes = Array.from(s);
  const n = runes.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (end > n) end = n;
  if (end < start) end = start;
  return runes.slice(start, end).join("");
}

main();
