// Generated by Mochi TypeScript compiler

function searchMatrix(matrix: Array<Array<number>>, target: number): boolean {
  let m: number = matrix.length;
  if (m == 0) {
    return false;
  }
  let n: number = matrix[0].length;
  let left: number = 0;
  let right: number = m * n - 1;
  while (left <= right) {
    let mid: number = left + Math.trunc((right - left) / 2);
    let row: number = Math.trunc(mid / n);
    let col: number = mid % n;
    let value: number = matrix[row][col];
    if (value == target) {
      return true;
    } else if (value < target) {
      left = mid + 1;
    } else {
      right = mid - 1;
    }
  }
  return false;
}

function example_1(): void {
  if (
    !(
      searchMatrix(
        [
          [1, 3, 5, 7],
          [10, 11, 16, 20],
          [23, 30, 34, 60],
        ],
        3,
      ) == true
    )
  ) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (
    !(
      searchMatrix(
        [
          [1, 3, 5, 7],
          [10, 11, 16, 20],
          [23, 30, 34, 60],
        ],
        13,
      ) == false
    )
  ) {
    throw new Error("expect failed");
  }
}

function single_row(): void {
  if (!(searchMatrix([[1, 2, 3, 4]], 3) == true)) {
    throw new Error("expect failed");
  }
}

function not_found(): void {
  if (!(searchMatrix([[5]], 1) == false)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  single_row();
  not_found();
}
main();
