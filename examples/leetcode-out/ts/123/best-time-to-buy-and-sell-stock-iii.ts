// Generated by Mochi TypeScript compiler

function maxProfit(prices: Array<number>) : number {
	let n: number = prices.length
	if ((n == 0)) {
		return 0
	}
	let buy1: number = (0 - prices[0])
	let sell1: number = 0
	let buy2: number = (0 - prices[0])
	let sell2: number = 0
	let i: number = 1
	while ((i < n)) {
		let price: number = prices[i]
		let b1: number = (0 - price)
		if ((b1 > buy1)) {
			buy1 = b1
		}
		let s1: number = (buy1 + price)
		if ((s1 > sell1)) {
			sell1 = s1
		}
		let b2: number = (sell1 - price)
		if ((b2 > buy2)) {
			buy2 = b2
		}
		let s2: number = (buy2 + price)
		if ((s2 > sell2)) {
			sell2 = s2
		}
		i = (i + 1)
	}
	return sell2
}

function example_1(): void {
	if (!((maxProfit([3, 3, 5, 0, 0, 3, 1, 4]) == 6))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((maxProfit([1, 2, 3, 4, 5]) == 4))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((maxProfit([7, 6, 4, 3, 1]) == 0))) { throw new Error('expect failed') }
}

function single_price(): void {
	if (!((maxProfit([5]) == 0))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	single_price()
}
main()

