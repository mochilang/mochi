// Generated by Mochi TypeScript compiler

function maxProfit(prices: Array<number>): number {
  let n: number = prices.length;
  (globalThis as any).n = n;
  if ((n == 0)) {
    return 0;
  }
  let buy1: number = 0 - prices[0];
  (globalThis as any).buy1 = buy1;
  let sell1: number = 0;
  (globalThis as any).sell1 = sell1;
  let buy2: number = 0 - prices[0];
  (globalThis as any).buy2 = buy2;
  let sell2: number = 0;
  (globalThis as any).sell2 = sell2;
  let i: number = 1;
  (globalThis as any).i = i;
  while ((i < n)) {
    let price: number = prices[i];
    (globalThis as any).price = price;
    let b1: number = 0 - price;
    (globalThis as any).b1 = b1;
    if ((b1 > buy1)) {
      buy1 = b1;
    }
    let s1: number = buy1 + price;
    (globalThis as any).s1 = s1;
    if ((s1 > sell1)) {
      sell1 = s1;
    }
    let b2: number = sell1 - price;
    (globalThis as any).b2 = b2;
    if ((b2 > buy2)) {
      buy2 = b2;
    }
    let s2: number = buy2 + price;
    (globalThis as any).s2 = s2;
    if ((s2 > sell2)) {
      sell2 = s2;
    }
    i = i + 1;
  }
  return sell2;
}

function test_example_1(): void {
  if (
    !(maxProfit([
      3,
      3,
      5,
      0,
      0,
      3,
      1,
      4,
    ]) == 6)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(maxProfit([
      1,
      2,
      3,
      4,
      5,
    ]) == 4)
  ) throw new Error("expect failed");
}

function test_example_3(): void {
  if (
    !(maxProfit([
      7,
      6,
      4,
      3,
      1,
    ]) == 0)
  ) throw new Error("expect failed");
}

function test_single_price(): void {
  if (!(maxProfit([5]) == 0)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_single_price();
}
main();
