// Generated by Mochi TypeScript compiler

function longestConsecutive(nums: Array<number>): number {
  let set: Record<number, boolean> = {};
  (globalThis as any).set = set;
  for (const n of nums) {
    set[n] = true;
  }
  let best: number = 0;
  (globalThis as any).best = best;
  for (const nKey of Object.keys(set)) {
    const n: number = Number(nKey);
    if ((!(Object.prototype.hasOwnProperty.call(set, String(n - 1))))) {
      let curr: number = n;
      (globalThis as any).curr = curr;
      let length: number = 1;
      (globalThis as any).length = length;
      while (Object.prototype.hasOwnProperty.call(set, String(curr + 1))) {
        curr = curr + 1;
        length = length + 1;
      }
      if ((length > best)) {
        best = length;
      }
    }
  }
  return best;
}

function test_example_1(): void {
  if (
    !(longestConsecutive([
      100,
      4,
      200,
      1,
      3,
      2,
    ]) == 4)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(longestConsecutive([
      0,
      3,
      7,
      2,
      5,
      8,
      4,
      6,
      0,
      1,
    ]) == 9)
  ) throw new Error("expect failed");
}

function test_empty(): void {
  if (!(longestConsecutive([]) == 0)) throw new Error("expect failed");
}

function test_duplicates(): void {
  if (
    !(longestConsecutive([
      1,
      2,
      0,
      1,
    ]) == 3)
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_empty();
  test_duplicates();
}
main();
