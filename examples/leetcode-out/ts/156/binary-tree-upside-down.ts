// Generated by Mochi TypeScript compiler

let example: Record<string, any> = Node(
  Node(Node(Leaf(), 4, Leaf()), 2, Node(Leaf(), 5, Leaf())),
  1,
  Node(Leaf(), 3, Leaf()),
);

function Leaf(): Record<string, any> {
  return { __name: "Leaf" };
}

function Node(
  left: Record<string, any>,
  value: number,
  right: Record<string, any>,
): Record<string, any> {
  return { __name: "Node", left: left, value: value, right: right };
}

function isLeaf(t: Record<string, any>): boolean {
  return _equal(t["__name"], "Leaf");
}

function left(t: Record<string, any>): Record<string, any> {
  return t["left"];
}

function right(t: Record<string, any>): Record<string, any> {
  return t["right"];
}

function value(t: Record<string, any>): number {
  return t["value"];
}

function setLeft(t: Record<string, any>, l: Record<string, any>): void {
  t["left"] = l;
}

function setRight(t: Record<string, any>, r: Record<string, any>): void {
  t["right"] = r;
}

function upsideDown(root: Record<string, any>): Record<string, any> {
  if (isLeaf(root)) {
    return root;
  }
  let curr: Record<string, any> = root;
  let parent: Record<string, any> = Leaf();
  let parentRight: Record<string, any> = Leaf();
  while (!isLeaf(curr)) {
    let next: Record<string, any> = left(curr);
    let oldRight: Record<string, any> = right(curr);
    setLeft(curr, parentRight);
    setRight(curr, parent);
    parentRight = oldRight;
    parent = curr;
    curr = next;
  }
  return parent;
}

function levelOrder(root: Record<string, any>): Array<Array<number>> {
  let result: Array<Array<number>> = [];
  let queue: Array<Record<string, any>> = [];
  if (!isLeaf(root)) {
    queue = [root];
  }
  while (queue.length > 0) {
    let vals: Array<number> = [];
    let next: Array<Record<string, any>> = [];
    for (const node of queue) {
      vals = vals.concat([value(node)]);
      let l: Record<string, any> = left(node);
      let r: Record<string, any> = right(node);
      if (!isLeaf(l)) {
        next = next.concat([l]);
      }
      if (!isLeaf(r)) {
        next = next.concat([r]);
      }
    }
    result = result.concat([vals]);
    queue = next;
  }
  return result;
}

function flip_example(): void {
  let newRoot: Record<string, any> = upsideDown(example);
  if (!_equal(levelOrder(newRoot), [[4], [5, 2], [3, 1]])) {
    throw new Error("expect failed");
  }
}

function single_node(): void {
  let tree: Record<string, any> = Node(Leaf(), 1, Leaf());
  if (!_equal(levelOrder(upsideDown(tree)), [[1]])) {
    throw new Error("expect failed");
  }
}

function empty_tree(): void {
  if (!(isLeaf(upsideDown(Leaf())) == true)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  flip_example();
  single_node();
  empty_tree();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
