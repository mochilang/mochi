// Generated by Mochi TypeScript compiler

function Leaf(): Record<string, any> {
  return { "__name": "Leaf" };
}

function _Node(
  left: Record<string, any>,
  value: number,
  right: Record<string, any>,
): Record<string, any> {
  return {
    "__name": "Node",
    "left": left,
    "value": value,
    "right": right,
  };
}

function isLeaf(t: Record<string, any>): boolean {
  return _equal(t["__name"], "Leaf");
}

function left(t: Record<string, any>): Record<string, any> {
  return t["left"];
}

function right(t: Record<string, any>): Record<string, any> {
  return t["right"];
}

function value(t: Record<string, any>): number {
  return t["value"];
}

function setLeft(t: Record<string, any>, l: Record<string, any>): void {
  t["left"] = l;
}

function setRight(t: Record<string, any>, r: Record<string, any>): void {
  t["right"] = r;
}

function upsideDown(root: Record<string, any>): Record<string, any> {
  if (isLeaf(root)) {
    return root;
  }
  let curr: Record<string, any> = root;
  (globalThis as any).curr = curr;
  let parent: Record<string, any> = Leaf();
  (globalThis as any).parent = parent;
  let parentRight: Record<string, any> = Leaf();
  (globalThis as any).parentRight = parentRight;
  while ((!isLeaf(curr))) {
    let next: Record<string, any> = left(curr);
    (globalThis as any).next = next;
    let oldRight: Record<string, any> = right(curr);
    (globalThis as any).oldRight = oldRight;
    setLeft(curr, parentRight);
    setRight(curr, parent);
    parentRight = oldRight;
    parent = curr;
    curr = next;
  }
  return parent;
}

function levelOrder(root: Record<string, any>): Array<Array<number>> {
  let result: Array<Array<number>> = [];
  (globalThis as any).result = result;
  let queue: Array<Record<string, any>> = [];
  (globalThis as any).queue = queue;
  if ((!isLeaf(root))) {
    queue = [root];
  }
  while ((queue.length > 0)) {
    let vals: Array<number> = [];
    (globalThis as any).vals = vals;
    let next: Array<Record<string, any>> = [];
    (globalThis as any).next = next;
    for (const node of queue) {
      vals = vals.concat([value(node)]);
      let l: Record<string, any> = left(node);
      (globalThis as any).l = l;
      let r: Record<string, any> = right(node);
      (globalThis as any).r = r;
      if ((!isLeaf(l))) {
        next = next.concat([l]);
      }
      if ((!isLeaf(r))) {
        next = next.concat([r]);
      }
    }
    result = result.concat([vals]);
    queue = next;
  }
  return result;
}

function test_flip_example(): void {
  let newRoot: Record<string, any> = upsideDown(example);
  (globalThis as any).newRoot = newRoot;
  if (
    !(_equal(levelOrder(newRoot), [
      [4],
      [
        5,
        2,
      ],
      [
        3,
        1,
      ],
    ]))
  ) throw new Error("expect failed");
}

function test_single_node(): void {
  let tree: Record<string, any> = _Node(Leaf(), 1, Leaf());
  (globalThis as any).tree = tree;
  if (!(_equal(levelOrder(upsideDown(tree)), [[1]]))) {
    throw new Error("expect failed");
  }
}

function test_empty_tree(): void {
  if (!(isLeaf(upsideDown(Leaf())) == true)) throw new Error("expect failed");
}

function main(): void {
  let example: Record<string, any> = _Node(
    _Node(_Node(Leaf(), 4, Leaf()), 2, _Node(Leaf(), 5, Leaf())),
    1,
    _Node(Leaf(), 3, Leaf()),
  );
  (globalThis as any).example = example;
  test_flip_example();
  test_single_node();
  test_empty_tree();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
