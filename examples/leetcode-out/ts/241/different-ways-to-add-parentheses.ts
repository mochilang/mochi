// Generated by Mochi TypeScript compiler

function parseInt(s: string): number {
  let result: number = 0;
  let i: number = 0;
  let digits: Record<string, number> = {
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  };
  while (i < s.length) {
    result = result * 10 + digits[s[i]];
    i = i + 1;
  }
  return result;
}

function diffWaysToCompute(expr: string): Array<number> {
  let results: Array<number> = [];
  let i: number = 0;
  while (i < expr.length) {
    let ch: string = expr[i];
    if (ch == "+" || ch == "-" || ch == "*") {
      let leftPart: string = expr.slice(0, i);
      let rightPart: string = expr.slice(i + 1, expr.length);
      let leftVals: Array<number> = diffWaysToCompute(leftPart);
      let rightVals: Array<number> = diffWaysToCompute(rightPart);
      for (const a of leftVals) {
        for (const b of rightVals) {
          let val: number = 0;
          if (ch == "+") {
            val = a + b;
          } else if (ch == "-") {
            val = a - b;
          } else {
            val = a * b;
          }
          results = results.concat([val]);
        }
      }
    }
    i = i + 1;
  }
  if (results.length == 0) {
    results = [parseInt(expr)];
  }
  return results;
}

function example_1(): void {
  let res: Array<number> = diffWaysToCompute("2-1-1");
  let sorted: Array<any> = (() => {
    const _src = res;
    let _items = [];
    for (const x of _src) {
      _items.push(x);
    }
    let _pairs = _items.map((it) => {
      const x = it;
      return { item: it, key: x };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string")
        return ak < bk ? -1 : ak > bk ? 1 : 0;
      return String(ak) < String(bk) ? -1 : String(ak) > String(bk) ? 1 : 0;
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const x of _items) {
      _res.push(x);
    }
    return _res;
  })();
  let expected: Array<number> = [0, 2];
  if (!_equal(sorted, expected)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  let res: Array<number> = diffWaysToCompute("2*3-4*5");
  let sorted: Array<any> = (() => {
    const _src = res;
    let _items = [];
    for (const x of _src) {
      _items.push(x);
    }
    let _pairs = _items.map((it) => {
      const x = it;
      return { item: it, key: x };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string")
        return ak < bk ? -1 : ak > bk ? 1 : 0;
      return String(ak) < String(bk) ? -1 : String(ak) > String(bk) ? 1 : 0;
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const x of _items) {
      _res.push(x);
    }
    return _res;
  })();
  let expected: Array<number> = [-34, -14, -10, -10, 10];
  let expSorted: Array<any> = (() => {
    const _src = expected;
    let _items = [];
    for (const x of _src) {
      _items.push(x);
    }
    let _pairs = _items.map((it) => {
      const x = it;
      return { item: it, key: x };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string")
        return ak < bk ? -1 : ak > bk ? 1 : 0;
      return String(ak) < String(bk) ? -1 : String(ak) > String(bk) ? 1 : 0;
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const x of _items) {
      _res.push(x);
    }
    return _res;
  })();
  if (!_equal(sorted, expSorted)) {
    throw new Error("expect failed");
  }
}

function single_number(): void {
  if (!_equal(diffWaysToCompute("3"), [3])) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  single_number();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
