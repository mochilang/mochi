// Generated by Mochi TypeScript compiler

function minimumTotal(triangle: Array<Array<number>>): number {
  let n: number = triangle.length;
  if (n == 0) {
    return 0;
  }
  let dp: Array<number> = triangle[n - 1];
  let i: number = n - 2;
  while (i >= 0) {
    let j: number = 0;
    while (j <= i) {
      let left: number = dp[j];
      let right: number = dp[j + 1];
      if (left < right) {
        dp[j] = triangle[i][j] + left;
      } else {
        dp[j] = triangle[i][j] + right;
      }
      j = j + 1;
    }
    i = i - 1;
  }
  return dp[0];
}

function example_1(): void {
  if (!(minimumTotal([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]]) == 11)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(minimumTotal([[-10]]) == -10)) {
    throw new Error("expect failed");
  }
}

function single_level(): void {
  if (!(minimumTotal([[1]]) == 1)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  single_level();
}
main();
