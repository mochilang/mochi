// Generated by Mochi TypeScript compiler

function isReflected(points: Array<Array<number>>): boolean {
  if ((points.length == 0)) {
    return true;
  }
  let pointSet: Record<string, boolean> = {};
  (globalThis as any).pointSet = pointSet;
  let minX: number = points[0][0];
  (globalThis as any).minX = minX;
  let maxX: number = points[0][0];
  (globalThis as any).maxX = maxX;
  for (const p of points) {
    let x: number = p[0];
    (globalThis as any).x = x;
    let y: number = p[1];
    (globalThis as any).y = y;
    let key: string = String(x) + "," + String(y);
    (globalThis as any).key = key;
    pointSet[key] = true;
    if ((x < minX)) {
      minX = x;
    }
    if ((x > maxX)) {
      maxX = x;
    }
  }
  let sum: number = minX + maxX;
  (globalThis as any).sum = sum;
  for (const p of points) {
    let x: number = p[0];
    (globalThis as any).x = x;
    let y: number = p[1];
    (globalThis as any).y = y;
    let rx: number = sum - x;
    (globalThis as any).rx = rx;
    let key: string = String(rx) + "," + String(y);
    (globalThis as any).key = key;
    if ((!(Object.prototype.hasOwnProperty.call(pointSet, String(key))))) {
      return false;
    }
  }
  return true;
}

function test_example_true(): void {
  if (
    !(isReflected([
      [
        1,
        1,
      ],
      [
        -1,
        1,
      ],
    ]) == true)
  ) throw new Error("expect failed");
}

function test_example_false(): void {
  if (
    !(isReflected([
      [
        1,
        1,
      ],
      [
        -1,
        -1,
      ],
    ]) == false)
  ) throw new Error("expect failed");
}

function test_three_points(): void {
  if (
    !(isReflected([
      [
        1,
        1,
      ],
      [
        0,
        1,
      ],
      [
        -1,
        1,
      ],
    ]) == true)
  ) throw new Error("expect failed");
}

function test_duplicates(): void {
  if (
    !(isReflected([
      [
        0,
        0,
      ],
      [
        0,
        0,
      ],
    ]) == true)
  ) throw new Error("expect failed");
}

function test_empty(): void {
  let pts: Array<Array<number>> = [];
  (globalThis as any).pts = pts;
  if (!(isReflected(pts) == true)) throw new Error("expect failed");
}

function main(): void {
  test_example_true();
  test_example_false();
  test_three_points();
  test_duplicates();
  test_empty();
}
main();
