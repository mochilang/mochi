// Generated by Mochi TypeScript compiler

function firstBadVersion(n: number, isBadVersion: any): number {
  let low: number = 1;
  (globalThis as any).low = low;
  let high: number = n;
  (globalThis as any).high = high;
  while ((low < high)) {
    let mid: number = Math.trunc((low + high) / 2);
    (globalThis as any).mid = mid;
    if (isBadVersion(mid)) {
      high = mid;
    } else {
      low = mid + 1;
    }
  }
  return low;
}

function test_example_1(): void {
  let first: number = 4;
  (globalThis as any).first = first;
  let bad: any = function (v: number): boolean {
    return (v >= first);
  };
  (globalThis as any).bad = bad;
  if (!(firstBadVersion(5, bad) == 4)) throw new Error("expect failed");
}

function test_example_2(): void {
  let first: number = 1;
  (globalThis as any).first = first;
  let bad: any = function (v: number): boolean {
    return (v >= first);
  };
  (globalThis as any).bad = bad;
  if (!(firstBadVersion(1, bad) == 1)) throw new Error("expect failed");
}

function test_larger_n(): void {
  let first: number = 123;
  (globalThis as any).first = first;
  let bad: any = function (v: number): boolean {
    return (v >= first);
  };
  (globalThis as any).bad = bad;
  if (!(firstBadVersion(200, bad) == 123)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_larger_n();
}
main();
