// Generated by Mochi TypeScript compiler

function removeKdigits(num: string, k: number): string {
  let stack: Array<string> = [];
  (globalThis as any).stack = stack;
  let rem: number = k;
  (globalThis as any).rem = rem;
  let n: number = num.length;
  (globalThis as any).n = n;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < n)) {
    let c: string = _indexString(num, i);
    (globalThis as any).c = c;
    while (((rem > 0) && (stack.length > 0))) {
      if ((stack[stack.length - 1] > c)) {
        stack = stack.slice(0, stack.length - 1);
        rem = rem - 1;
      } else {
        break;
      }
    }
    stack = stack.concat([c]);
    i = i + 1;
  }
  while (((rem > 0) && (stack.length > 0))) {
    stack = stack.slice(0, stack.length - 1);
    rem = rem - 1;
  }
  let result: string = "";
  (globalThis as any).result = result;
  let started: boolean = false;
  (globalThis as any).started = started;
  for (const ch of stack) {
    if (((ch == "0") && (started == false))) {
      continue;
    }
    started = true;
    result = result + ch;
  }
  if ((result == "")) {
    return "0";
  }
  return result;
}

function test_example_1(): void {
  if (!(removeKdigits("1432219", 3) == "1219")) {
    throw new Error("expect failed");
  }
}

function test_example_2(): void {
  if (!(removeKdigits("10200", 1) == "200")) throw new Error("expect failed");
}

function test_example_3(): void {
  if (!(removeKdigits("10", 2) == "0")) throw new Error("expect failed");
}

function test_no_removal(): void {
  if (!(removeKdigits("9", 0) == "9")) throw new Error("expect failed");
}

function test_remove_all(): void {
  if (!(removeKdigits("123", 3) == "0")) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_no_removal();
  test_remove_all();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
