// Generated by Mochi TypeScript compiler

function newPhoneDirectory(maxNumbers: number): PhoneDirectory {
  let nums: Array<number> = [];
  let i: number = 0;
  while (i < maxNumbers) {
    nums = nums.concat([i]);
    i = i + 1;
  }
  return { available: nums, used: {} };
}

function get(dir: PhoneDirectory): GetResult {
  let avail: Array<number> = dir.available;
  if (avail.length == 0) {
    return { directory: dir, number: -1 };
  }
  let n: number = avail[0];
  avail = avail.slice(1, avail.length);
  let used: Record<number, boolean> = dir.used;
  used[n] = true;
  let newDir: PhoneDirectory = { available: avail, used: used };
  return { directory: newDir, number: n };
}

function check(dir: PhoneDirectory, number: number): boolean {
  if (Object.prototype.hasOwnProperty.call(dir.used, String(number))) {
    return !dir.used[number];
  }
  return true;
}

function release(dir: PhoneDirectory, number: number): PhoneDirectory {
  let used: Record<number, boolean> = dir.used;
  if (Object.prototype.hasOwnProperty.call(used, String(number))) {
    if (used[number]) {
      used[number] = false;
      let avail: Array<number> = dir.available;
      avail = avail.concat([number]);
      return { available: avail, used: used };
    }
  }
  return dir;
}

function example(): void {
  let dir: PhoneDirectory = newPhoneDirectory(3);
  let r1: GetResult = get(dir);
  dir = r1.directory;
  if (!(r1.number == 0)) {
    throw new Error("expect failed");
  }
  let r2: GetResult = get(dir);
  dir = r2.directory;
  if (!(r2.number == 1)) {
    throw new Error("expect failed");
  }
  if (!(check(dir, 2) == true)) {
    throw new Error("expect failed");
  }
  let r3: GetResult = get(dir);
  dir = r3.directory;
  if (!(r3.number == 2)) {
    throw new Error("expect failed");
  }
  if (!(check(dir, 2) == false)) {
    throw new Error("expect failed");
  }
  dir = release(dir, 2);
  if (!(check(dir, 2) == true)) {
    throw new Error("expect failed");
  }
}

function release_twice(): void {
  let dir: PhoneDirectory = newPhoneDirectory(1);
  let r1: GetResult = get(dir);
  dir = r1.directory;
  if (!(r1.number == 0)) {
    throw new Error("expect failed");
  }
  dir = release(dir, 0);
  dir = release(dir, 0);
  let r2: GetResult = get(dir);
  dir = r2.directory;
  if (!(r2.number == 0)) {
    throw new Error("expect failed");
  }
}

function get_empty(): void {
  let dir: PhoneDirectory = newPhoneDirectory(0);
  let r: GetResult = get(dir);
  if (!(r.number == -1)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  type PhoneDirectory = {
    available: Array<number>;
    used: Record<number, boolean>;
  };
  type GetResult = {
    directory: any;
    number: number;
  };
  example();
  release_twice();
  get_empty();
}
main();
