// Generated by Mochi TypeScript compiler

type PhoneDirectory = {
  available: Array<number>;
  used: Record<number, boolean>;
};

type GetResult = {
  directory: PhoneDirectory;
  number: number;
};

function newPhoneDirectory(maxNumbers: number): PhoneDirectory {
  let nums: Array<number> = [];
  (globalThis as any).nums = nums;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < maxNumbers)) {
    nums = nums.concat([i]);
    i = i + 1;
  }
  return {
    available: nums,
    used: {},
  };
}

function get(dir: PhoneDirectory): GetResult {
  let avail: Array<number> = dir.available;
  (globalThis as any).avail = avail;
  if ((avail.length == 0)) {
    return {
      directory: dir,
      number: (-1),
    };
  }
  let n: number = avail[0];
  (globalThis as any).n = n;
  avail = avail.slice(1, avail.length);
  let used: Record<number, boolean> = dir.used;
  (globalThis as any).used = used;
  used[n] = true;
  let newDir: PhoneDirectory = {
    available: avail,
    used: used,
  };
  (globalThis as any).newDir = newDir;
  return {
    directory: newDir,
    number: n,
  };
}

function check(dir: PhoneDirectory, number: number): boolean {
  if (Object.prototype.hasOwnProperty.call(dir.used, String(number))) {
    return (!dir.used[number]);
  }
  return true;
}

function release(dir: PhoneDirectory, number: number): PhoneDirectory {
  let used: Record<number, boolean> = dir.used;
  (globalThis as any).used = used;
  if (Object.prototype.hasOwnProperty.call(used, String(number))) {
    if (used[number]) {
      used[number] = false;
      let avail: Array<number> = dir.available;
      (globalThis as any).avail = avail;
      avail = avail.concat([number]);
      return {
        available: avail,
        used: used,
      };
    }
  }
  return dir;
}

function test_example(): void {
  let dir: PhoneDirectory = newPhoneDirectory(3);
  (globalThis as any).dir = dir;
  let r1: GetResult = get(dir);
  (globalThis as any).r1 = r1;
  dir = r1.directory;
  if (!(r1.number == 0)) throw new Error("expect failed");
  let r2: GetResult = get(dir);
  (globalThis as any).r2 = r2;
  dir = r2.directory;
  if (!(r2.number == 1)) throw new Error("expect failed");
  if (!(check(dir, 2) == true)) throw new Error("expect failed");
  let r3: GetResult = get(dir);
  (globalThis as any).r3 = r3;
  dir = r3.directory;
  if (!(r3.number == 2)) throw new Error("expect failed");
  if (!(check(dir, 2) == false)) throw new Error("expect failed");
  dir = release(dir, 2);
  if (!(check(dir, 2) == true)) throw new Error("expect failed");
}

function test_release_twice(): void {
  let dir: PhoneDirectory = newPhoneDirectory(1);
  (globalThis as any).dir = dir;
  let r1: GetResult = get(dir);
  (globalThis as any).r1 = r1;
  dir = r1.directory;
  if (!(r1.number == 0)) throw new Error("expect failed");
  dir = release(dir, 0);
  dir = release(dir, 0);
  let r2: GetResult = get(dir);
  (globalThis as any).r2 = r2;
  dir = r2.directory;
  if (!(r2.number == 0)) throw new Error("expect failed");
}

function test_get_empty(): void {
  let dir: PhoneDirectory = newPhoneDirectory(0);
  (globalThis as any).dir = dir;
  let r: GetResult = get(dir);
  (globalThis as any).r = r;
  if (!(r.number == (-1))) throw new Error("expect failed");
}

function main(): void {
  test_example();
  test_release_twice();
  test_get_empty();
}
main();
