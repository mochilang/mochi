// Generated by Mochi TypeScript compiler

function newSummaryRanges() : SummaryRanges {
	return {intervals: []}
}

function addNum(sr: SummaryRanges, val: number) : SummaryRanges {
	let intervals: Array<Array<number>> = sr.intervals
	let i: number = 0
	let n: number = intervals.length
	let result: Array<Array<number>> = []
	while ((i < n)) {
		if ((intervals[i][1] < (val - 1))) {
			result = result.concat([intervals[i]])
			i = (i + 1)
		} else {
			break
		}
	}
	let start: number = val
	let end: number = val
	if ((i < n)) {
		if ((intervals[i][0] <= (val + 1))) {
			if ((intervals[i][0] < start)) {
				start = intervals[i][0]
			}
			if ((intervals[i][1] > end)) {
				end = intervals[i][1]
			}
			i = (i + 1)
			while ((i < n)) {
				if ((intervals[i][0] <= (end + 1))) {
					if ((intervals[i][1] > end)) {
						end = intervals[i][1]
					}
					i = (i + 1)
				} else {
					break
				}
			}
		}
	}
	result = result.concat([[start, end]])
	while ((i < n)) {
		result = result.concat([intervals[i]])
		i = (i + 1)
	}
	return {intervals: result}
}

function getIntervals(sr: SummaryRanges) : Array<Array<number>> {
	return sr.intervals
}

function example(): void {
	let sr: SummaryRanges = newSummaryRanges()
	sr = addNum(sr, 1)
	if (!(_equal(getIntervals(sr), [[1, 1]]))) { throw new Error('expect failed') }
	sr = addNum(sr, 3)
	if (!(_equal(getIntervals(sr), [[1, 1], [3, 3]]))) { throw new Error('expect failed') }
	sr = addNum(sr, 7)
	sr = addNum(sr, 2)
	sr = addNum(sr, 6)
	if (!(_equal(getIntervals(sr), [[1, 3], [6, 7]]))) { throw new Error('expect failed') }
}

function duplicate(): void {
	let sr: SummaryRanges = newSummaryRanges()
	sr = addNum(sr, 5)
	sr = addNum(sr, 5)
	if (!(_equal(getIntervals(sr), [[5, 5]]))) { throw new Error('expect failed') }
}

function merge_all(): void {
	let sr: SummaryRanges = newSummaryRanges()
	sr = addNum(sr, 1)
	sr = addNum(sr, 2)
	sr = addNum(sr, 3)
	if (!(_equal(getIntervals(sr), [[1, 3]]))) { throw new Error('expect failed') }
}

function main(): void {
	type SummaryRanges = {
		intervals: Array<Array<number>>;
	}
	example()
	duplicate()
	merge_all()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

