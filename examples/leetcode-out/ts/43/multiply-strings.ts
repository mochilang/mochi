// Generated by Mochi TypeScript compiler

let ok: number = 0

let y: number = 1

function multiply(num1: string, num2: string) : string {
	if (((num1 == "0") || (num2 == "0"))) {
		return "0"
	}
	let digits: Record<string, number> = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	let m: number = num1.length
	let n: number = num2.length
	let result: Record<number, number> = {}
	let i: number = m
	while ((i > 0)) {
		i = (i - 1)
		let d1: number = digits[num1[i]]
		let j: number = n
		while ((j > 0)) {
			j = (j - 1)
			let d2: number = digits[num2[j]]
			let idx1: number = ((i + j) + 1)
			let existing: number = 0
			if (Object.prototype.hasOwnProperty.call(result, String(idx1))) {
				existing = result[idx1]
			}
			let sum: number = ((d1 * d2) + existing)
			result[idx1] = (sum % 10)
			let carry: number = Math.trunc(sum / 10)
			let idx0: number = (i + j)
			let prev: number = 0
			if (Object.prototype.hasOwnProperty.call(result, String(idx0))) {
				prev = result[idx0]
			}
			result[idx0] = (prev + carry)
		}
	}
	let out: string = ""
	let k: number = 0
	while ((k < (m + n))) {
		let digit: number = 0
		if (Object.prototype.hasOwnProperty.call(result, String(k))) {
			digit = result[k]
		}
		if (((out == "") && (digit == 0))) {
		} else {
			out = out + String(digit)
		}
		k = (k + 1)
	}
	if ((out == "")) {
		return "0"
	}
	return out
}

function example_1(): void {
	if (!((multiply("2", "3") == "6"))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((multiply("123", "456") == "56088"))) { throw new Error('expect failed') }
}

function leading_zeros(): void {
	if (!((multiply("0002", "03") == "6"))) { throw new Error('expect failed') }
}

function large_numbers(): void {
	if (!((multiply("999", "999") == "998001"))) { throw new Error('expect failed') }
}

function main(): void {
	ok = (ok + 1)
	y = 2
	example_1()
	example_2()
	leading_zeros()
	large_numbers()
}
main()

