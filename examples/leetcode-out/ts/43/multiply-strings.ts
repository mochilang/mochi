// Generated by Mochi TypeScript compiler

function multiply(num1: string, num2: string): string {
  if (((num1 == "0") || (num2 == "0"))) {
    return "0";
  }
  let digits: Record<string, number> = {
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  };
  (globalThis as any).digits = digits;
  let m: number = num1.length;
  (globalThis as any).m = m;
  let n: number = num2.length;
  (globalThis as any).n = n;
  let result: Record<number, number> = {};
  (globalThis as any).result = result;
  let i: number = m;
  (globalThis as any).i = i;
  while ((i > 0)) {
    i = i - 1;
    let d1: number = digits[_indexString(num1, i)];
    (globalThis as any).d1 = d1;
    let j: number = n;
    (globalThis as any).j = j;
    while ((j > 0)) {
      j = j - 1;
      let d2: number = digits[_indexString(num2, j)];
      (globalThis as any).d2 = d2;
      let idx1: number = (i + j) + 1;
      (globalThis as any).idx1 = idx1;
      let existing: number = 0;
      (globalThis as any).existing = existing;
      if (Object.prototype.hasOwnProperty.call(result, String(idx1))) {
        existing = result[idx1];
      }
      let sum: number = (d1 * d2) + existing;
      (globalThis as any).sum = sum;
      result[idx1] = sum % 10;
      let carry: number = Math.trunc(sum / 10);
      (globalThis as any).carry = carry;
      let idx0: number = i + j;
      (globalThis as any).idx0 = idx0;
      let prev: number = 0;
      (globalThis as any).prev = prev;
      if (Object.prototype.hasOwnProperty.call(result, String(idx0))) {
        prev = result[idx0];
      }
      result[idx0] = prev + carry;
    }
  }
  let out: string = "";
  (globalThis as any).out = out;
  let k: number = 0;
  (globalThis as any).k = k;
  while ((k < (m + n))) {
    let digit: number = 0;
    (globalThis as any).digit = digit;
    if (Object.prototype.hasOwnProperty.call(result, String(k))) {
      digit = result[k];
    }
    if (((out == "") && (digit == 0))) {
    } else {
      out = out + String(digit);
    }
    k = k + 1;
  }
  if ((out == "")) {
    return "0";
  }
  return out;
}

function test_example_1(): void {
  if (!(multiply("2", "3") == "6")) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(multiply("123", "456") == "56088")) throw new Error("expect failed");
}

function test_leading_zeros(): void {
  if (!(multiply("0002", "03") == "6")) throw new Error("expect failed");
}

function test_large_numbers(): void {
  if (!(multiply("999", "999") == "998001")) throw new Error("expect failed");
}

function main(): void {
  let ok: number = 0;
  (globalThis as any).ok = ok;
  ok = ok + 1;
  let y: number = 1;
  (globalThis as any).y = y;
  y = 2;
  test_example_1();
  test_example_2();
  test_leading_zeros();
  test_large_numbers();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
