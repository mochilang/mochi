// Generated by Mochi TypeScript compiler

function longestSubstring(s: string, k: number): number {
  if ((s.length == 0)) {
    return 0;
  }
  let maxLen: number = 0;
  (globalThis as any).maxLen = maxLen;
  let target: number = 1;
  (globalThis as any).target = target;
  while ((target <= 26)) {
    let counts: Record<string, number> = {};
    (globalThis as any).counts = counts;
    let left: number = 0;
    (globalThis as any).left = left;
    let right: number = 0;
    (globalThis as any).right = right;
    let unique: number = 0;
    (globalThis as any).unique = unique;
    let atLeast: number = 0;
    (globalThis as any).atLeast = atLeast;
    while ((right < s.length)) {
      let ch: string = _indexString(s, right);
      (globalThis as any).ch = ch;
      if (Object.prototype.hasOwnProperty.call(counts, String(ch))) {
        counts[ch] = counts[ch] + 1;
      } else {
        counts[ch] = 1;
        unique = unique + 1;
      }
      if ((counts[ch] == k)) {
        atLeast = atLeast + 1;
      }
      while ((unique > target)) {
        let leftCh: string = _indexString(s, left);
        (globalThis as any).leftCh = leftCh;
        if ((counts[leftCh] == k)) {
          atLeast = atLeast - 1;
        }
        counts[leftCh] = counts[leftCh] - 1;
        if ((counts[leftCh] == 0)) {
          unique = unique - 1;
        }
        left = left + 1;
      }
      if (((unique == target) && (atLeast == target))) {
        let length: number = (right - left) + 1;
        (globalThis as any).length = length;
        if ((length > maxLen)) {
          maxLen = length;
        }
      }
      right = right + 1;
    }
    target = target + 1;
  }
  return maxLen;
}

function test_example_1(): void {
  if (!(longestSubstring("aaabb", 3) == 3)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(longestSubstring("ababbc", 2) == 5)) throw new Error("expect failed");
}

function test_all_same(): void {
  if (!(longestSubstring("aaaaa", 1) == 5)) throw new Error("expect failed");
}

function test_no_valid_substring(): void {
  if (!(longestSubstring("abcde", 2) == 0)) throw new Error("expect failed");
}

function test_empty_string(): void {
  if (!(longestSubstring("", 3) == 0)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_all_same();
  test_no_valid_substring();
  test_empty_string();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
