// Generated by Mochi TypeScript compiler

function validUtf8(data: Array<number>): boolean {
  let i: number = 0;
  (globalThis as any).i = i;
  let n: number = data.length;
  (globalThis as any).n = n;
  while ((i < n)) {
    let b: number = data[i];
    (globalThis as any).b = b;
    let count: number = 0;
    (globalThis as any).count = count;
    if ((b < 128)) {
      count = 1;
    } else if (((b >= 192) && (b < 224))) {
      count = 2;
    } else if (((b >= 224) && (b < 240))) {
      count = 3;
    } else if (((b >= 240) && (b < 248))) {
      count = 4;
    } else {
      return false;
    }
    if (((i + count) > n)) {
      return false;
    }
    let j: number = 1;
    (globalThis as any).j = j;
    while ((j < count)) {
      let c: number = data[i + j];
      (globalThis as any).c = c;
      if (((c < 128) || (c >= 192))) {
        return false;
      }
      j = j + 1;
    }
    i = i + count;
  }
  return true;
}

function test_example_1(): void {
  if (
    !(validUtf8([
      197,
      130,
      1,
    ]) == true)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(validUtf8([
      235,
      140,
      4,
    ]) == false)
  ) throw new Error("expect failed");
}

function test_single_byte(): void {
  if (!(validUtf8([0]) == true)) throw new Error("expect failed");
}

function test_invalid_length(): void {
  if (!(validUtf8([237]) == false)) throw new Error("expect failed");
}

function test_starts_with_continuation(): void {
  if (!(validUtf8([145]) == false)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_single_byte();
  test_invalid_length();
  test_starts_with_continuation();
}
main();
