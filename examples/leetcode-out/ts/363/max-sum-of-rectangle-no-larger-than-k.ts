// Generated by Mochi TypeScript compiler

function maxSumSubmatrix(matrix: Array<Array<number>>, k: number): number {
  if (((matrix.length == 0) || (matrix[0].length == 0))) {
    return 0;
  }
  let rows: number = matrix.length;
  (globalThis as any).rows = rows;
  let cols: number = matrix[0].length;
  (globalThis as any).cols = cols;
  let best: number = -2147483648;
  (globalThis as any).best = best;
  let left: number = 0;
  (globalThis as any).left = left;
  while ((left < cols)) {
    let rowSums: Array<number> = [];
    (globalThis as any).rowSums = rowSums;
    let r: number = 0;
    (globalThis as any).r = r;
    while ((r < rows)) {
      rowSums = rowSums.concat([0]);
      r = r + 1;
    }
    let right: number = left;
    (globalThis as any).right = right;
    while ((right < cols)) {
      let i: number = 0;
      (globalThis as any).i = i;
      while ((i < rows)) {
        rowSums[i] = rowSums[i] + matrix[i][right];
        i = i + 1;
      }
      let prefixList: Array<number> = [0];
      (globalThis as any).prefixList = prefixList;
      let prefix: number = 0;
      (globalThis as any).prefix = prefix;
      let idx: number = 0;
      (globalThis as any).idx = idx;
      while ((idx < rows)) {
        prefix = prefix + rowSums[idx];
        let j: number = 0;
        (globalThis as any).j = j;
        let localBest: number = -2147483648;
        (globalThis as any).localBest = localBest;
        while ((j < prefixList.length)) {
          let cand: number = prefix - prefixList[j];
          (globalThis as any).cand = cand;
          if (((cand <= k) && (cand > localBest))) {
            localBest = cand;
          }
          j = j + 1;
        }
        if ((localBest > best)) {
          best = localBest;
        }
        prefixList = prefixList.concat([prefix]);
        idx = idx + 1;
      }
      right = right + 1;
    }
    left = left + 1;
  }
  return best;
}

function test_example_1(): void {
  let matrix: Array<Array<number>> = [
    [
      1,
      0,
      1,
    ],
    [
      0,
      -2,
      3,
    ],
  ];
  (globalThis as any).matrix = matrix;
  if (!(maxSumSubmatrix(matrix, 2) == 2)) throw new Error("expect failed");
}

function test_example_2(): void {
  let matrix: Array<Array<number>> = [
    [
      2,
      2,
      -1,
    ],
  ];
  (globalThis as any).matrix = matrix;
  if (!(maxSumSubmatrix(matrix, 3) == 3)) throw new Error("expect failed");
}

function test_single_element(): void {
  if (!(maxSumSubmatrix([[5]], 5) == 5)) throw new Error("expect failed");
}

function test_negative_numbers(): void {
  let matrix: Array<Array<number>> = [
    [
      -1,
      -2,
    ],
    [
      -3,
      -4,
    ],
  ];
  (globalThis as any).matrix = matrix;
  if (!(maxSumSubmatrix(matrix, -2) == (-2))) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_single_element();
  test_negative_numbers();
}
main();
