// Generated by Mochi TypeScript compiler

function maxSumSubmatrix(matrix: Array<Array<number>>, k: number): number {
  if (matrix.length == 0 || matrix[0].length == 0) {
    return 0;
  }
  let rows: number = matrix.length;
  let cols: number = matrix[0].length;
  let best: number = -2147483648;
  let left: number = 0;
  while (left < cols) {
    let rowSums: Array<number> = [];
    let r: number = 0;
    while (r < rows) {
      rowSums = rowSums.concat([0]);
      r = r + 1;
    }
    let right: number = left;
    while (right < cols) {
      let i: number = 0;
      while (i < rows) {
        rowSums[i] = rowSums[i] + matrix[i][right];
        i = i + 1;
      }
      let prefixList: Array<number> = [0];
      let prefix: number = 0;
      let idx: number = 0;
      while (idx < rows) {
        prefix = prefix + rowSums[idx];
        let j: number = 0;
        let localBest: number = -2147483648;
        while (j < prefixList.length) {
          let cand: number = prefix - prefixList[j];
          if (cand <= k && cand > localBest) {
            localBest = cand;
          }
          j = j + 1;
        }
        if (localBest > best) {
          best = localBest;
        }
        prefixList = prefixList.concat([prefix]);
        idx = idx + 1;
      }
      right = right + 1;
    }
    left = left + 1;
  }
  return best;
}

function example_1(): void {
  let matrix: Array<Array<number>> = [
    [1, 0, 1],
    [0, -2, 3],
  ];
  if (!(maxSumSubmatrix(matrix, 2) == 2)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  let matrix: Array<Array<number>> = [[2, 2, -1]];
  if (!(maxSumSubmatrix(matrix, 3) == 3)) {
    throw new Error("expect failed");
  }
}

function single_element(): void {
  if (!(maxSumSubmatrix([[5]], 5) == 5)) {
    throw new Error("expect failed");
  }
}

function negative_numbers(): void {
  let matrix: Array<Array<number>> = [
    [-1, -2],
    [-3, -4],
  ];
  if (!(maxSumSubmatrix(matrix, -2) == -2)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  single_element();
  negative_numbers();
}
main();
