// Generated by Mochi TypeScript compiler

function isStrobogrammatic(num: string): boolean {
  let pairs: Record<string, string> = {
    "0": "0",
    "1": "1",
    "6": "9",
    "8": "8",
    "9": "6",
  };
  (globalThis as any).pairs = pairs;
  let left: number = 0;
  (globalThis as any).left = left;
  let right: number = num.length - 1;
  (globalThis as any).right = right;
  while ((left <= right)) {
    let a: string = _indexString(num, left);
    (globalThis as any).a = a;
    let b: string = _indexString(num, right);
    (globalThis as any).b = b;
    if ((!(Object.prototype.hasOwnProperty.call(pairs, String(a))))) {
      return false;
    }
    if ((pairs[a] != b)) {
      return false;
    }
    left = left + 1;
    right = right - 1;
  }
  return true;
}

function test_example_1(): void {
  if (!(isStrobogrammatic("69") == true)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(isStrobogrammatic("88") == true)) throw new Error("expect failed");
}

function test_example_3(): void {
  if (!(isStrobogrammatic("962") == false)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
