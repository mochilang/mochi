// Generated by Mochi TypeScript compiler

function insert(
  intervals: Array<Array<number>>,
  newInterval: Array<number>,
): Array<Array<number>> {
  let result: Array<Array<number>> = [];
  let inserted: boolean = false;
  let start: number = newInterval[0];
  let end: number = newInterval[1];
  for (const interval of intervals) {
    let currStart: number = interval[0];
    let currEnd: number = interval[1];
    if (currEnd < start) {
      result = result.concat([interval]);
    } else if (currStart > end) {
      if (!inserted) {
        result = result.concat([[start, end]]);
        inserted = true;
      }
      result = result.concat([interval]);
    } else {
      if (currStart < start) {
        start = currStart;
      }
      if (currEnd > end) {
        end = currEnd;
      }
    }
  }
  if (!inserted) {
    result = result.concat([[start, end]]);
  }
  return result;
}

function example_1(): void {
  if (
    !_equal(
      insert(
        [
          [1, 3],
          [6, 9],
        ],
        [2, 5],
      ),
      [
        [1, 5],
        [6, 9],
      ],
    )
  ) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (
    !_equal(
      insert(
        [
          [1, 2],
          [3, 5],
          [6, 7],
          [8, 10],
          [12, 16],
        ],
        [4, 8],
      ),
      [
        [1, 2],
        [3, 10],
        [12, 16],
      ],
    )
  ) {
    throw new Error("expect failed");
  }
}

function empty_list(): void {
  if (!_equal(insert([], [5, 7]), [[5, 7]])) {
    throw new Error("expect failed");
  }
}

function contained_interval(): void {
  if (!_equal(insert([[1, 5]], [2, 3]), [[1, 5]])) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  empty_list();
  contained_interval();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
