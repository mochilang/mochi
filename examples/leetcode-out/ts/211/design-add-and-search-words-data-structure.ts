// Generated by Mochi TypeScript compiler

function _Node(): Record<string, any> {
  return {
    "end": false,
    "next": {},
  };
}

function addWord(root: Record<string, any>, word: string): void {
  let node: Record<string, any> = root;
  (globalThis as any).node = node;
  for (let i: number = 0; i < word.length; i++) {
    let ch: string = _indexString(word, i);
    (globalThis as any).ch = ch;
    let nextMap: Record<string, any> = node["next"];
    (globalThis as any).nextMap = nextMap;
    let child: Record<string, any> = undefined;
    (globalThis as any).child = child;
    if (Object.prototype.hasOwnProperty.call(nextMap, String(ch))) {
      child = nextMap[ch];
    } else {
      child = _Node();
    }
    if ((i == (word.length - 1))) {
      child["end"] = true;
    }
    nextMap[ch] = child;
    node["next"] = nextMap;
    node = child;
  }
}

function searchHelper(
  node: Record<string, any>,
  word: string,
  index: number,
): boolean {
  if ((index == word.length)) {
    return node["end"];
  }
  let ch: string = _indexString(word, index);
  (globalThis as any).ch = ch;
  let children: Record<string, any> = node["next"];
  (globalThis as any).children = children;
  if ((ch == ".")) {
    for (const key of Object.keys(children)) {
      let child: Record<string, any> = children[key];
      (globalThis as any).child = child;
      if (searchHelper(child, word, index + 1)) {
        return true;
      }
    }
    return false;
  }
  if (Object.prototype.hasOwnProperty.call(children, String(ch))) {
    return searchHelper(children[ch], word, index + 1);
  }
  return false;
}

function search(root: Record<string, any>, word: string): boolean {
  return searchHelper(root, word, 0);
}

function test_example_1(): void {
  let wd: Record<string, any> = _Node();
  (globalThis as any).wd = wd;
  addWord(wd, "bad");
  addWord(wd, "dad");
  addWord(wd, "mad");
  if (!(search(wd, "pad") == false)) throw new Error("expect failed");
  if (!(search(wd, "bad") == true)) throw new Error("expect failed");
  if (!(search(wd, ".ad") == true)) throw new Error("expect failed");
  if (!(search(wd, "b..") == true)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
