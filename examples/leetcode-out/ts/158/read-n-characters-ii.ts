// Generated by Mochi TypeScript compiler

function newReader(s: string) : Reader {
	return {data: s, index: 0, buffer: ""}
}

function read4(r: Reader) : Read4Result {
	let i: number = 0
	let chunk: string = ""
	let idx: number = r.index
	while (((i < 4) && (idx < r.data.length))) {
		chunk = chunk + r.data[idx]
		idx = (idx + 1)
		i = (i + 1)
	}
	let newReader: Reader = {data: r.data, index: idx, buffer: r.buffer}
	return {reader: newReader, chunk: chunk}
}

function read(reader: Reader, n: number) : ReadResult {
	let r: Reader = reader
	let output: string = ""
	let total: number = 0
	while (((total < n) && (r.buffer.length > 0))) {
		output = output + r.buffer[0]
		r = {data: r.data, index: r.index, buffer: r.buffer.slice(1, r.buffer.length)}
		total = (total + 1)
	}
	while ((total < n)) {
		let r4: Read4Result = read4(r)
		r = r4.reader
		let chunk: string = r4.chunk
		if ((chunk.length == 0)) {
			break
		}
		let i: number = 0
		while (((i < chunk.length) && (total < n))) {
			output = output + chunk[i]
			i = (i + 1)
			total = (total + 1)
		}
		r = {data: r.data, index: r.index, buffer: chunk.slice(i, chunk.length)}
	}
	return {reader: r, data: output, count: total}
}

function multiple_calls(): void {
	let r: Reader = newReader("abc")
	let r1: ReadResult = read(r, 1)
	if (!((r1.data == "a"))) { throw new Error('expect failed') }
	r = r1.reader
	let r2: ReadResult = read(r, 2)
	if (!((r2.data == "bc"))) { throw new Error('expect failed') }
}

function leftover_handling(): void {
	let r: Reader = newReader("abcde")
	let r1: ReadResult = read(r, 2)
	if (!((r1.data == "ab"))) { throw new Error('expect failed') }
	r = r1.reader
	let r2: ReadResult = read(r, 3)
	if (!((r2.data == "cde"))) { throw new Error('expect failed') }
}

function request_past_end(): void {
	let r: Reader = newReader("abcd")
	let r1: ReadResult = read(r, 6)
	if (!((r1.data == "abcd"))) { throw new Error('expect failed') }
	if (!((r1.count == 4))) { throw new Error('expect failed') }
}

function main(): void {
	type Reader = {
		data: string;
		index: number;
		buffer: string;
	}
	type Read4Result = {
		reader: any;
		chunk: string;
	}
	type ReadResult = {
		reader: any;
		data: string;
		count: number;
	}
	multiple_calls()
	leftover_handling()
	request_past_end()
}
main()

