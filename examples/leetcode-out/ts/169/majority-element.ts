// Generated by Mochi TypeScript compiler

function majorityElement(nums: Array<number>): number {
  let count: number = 0;
  (globalThis as any).count = count;
  let candidate: number = 0;
  (globalThis as any).candidate = candidate;
  for (const n of nums) {
    if ((count == 0)) {
      candidate = n;
      count = 1;
    } else {
      if ((n == candidate)) {
        count = count + 1;
      } else {
        count = count - 1;
      }
    }
  }
  return candidate;
}

function test_example_1(): void {
  if (
    !(majorityElement([
      3,
      2,
      3,
    ]) == 3)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(majorityElement([
      2,
      2,
      1,
      1,
      1,
      2,
      2,
    ]) == 2)
  ) throw new Error("expect failed");
}

function test_single_element(): void {
  if (!(majorityElement([1]) == 1)) throw new Error("expect failed");
}

function test_large_majority(): void {
  if (
    !(majorityElement([
      1,
      1,
      1,
      2,
      2,
    ]) == 1)
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_single_element();
  test_large_majority();
}
main();
