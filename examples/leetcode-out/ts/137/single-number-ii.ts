// Generated by Mochi TypeScript compiler

function singleNumber(nums: Array<number>): number {
  let counts: Record<number, number> = {};
  (globalThis as any).counts = counts;
  for (const n of nums) {
    if (Object.prototype.hasOwnProperty.call(counts, String(n))) {
      counts[n] = counts[n] + 1;
    } else {
      counts[n] = 1;
    }
  }
  for (const n of nums) {
    if ((counts[n] == 1)) {
      return n;
    }
  }
  return 0;
}

function test_example_1(): void {
  if (
    !(singleNumber([
      2,
      2,
      3,
      2,
    ]) == 3)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(singleNumber([
      0,
      1,
      0,
      1,
      0,
      1,
      99,
    ]) == 99)
  ) throw new Error("expect failed");
}

function test_negative_numbers(): void {
  if (
    !(singleNumber([
      -2,
      -2,
      1,
      -2,
    ]) == 1)
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_negative_numbers();
}
main();
