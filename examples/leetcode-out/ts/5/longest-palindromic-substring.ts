// Generated by Mochi TypeScript compiler

function expand(s: string, left: number, right: number): number {
  let l: number = left;
  (globalThis as any).l = l;
  let r: number = right;
  (globalThis as any).r = r;
  let n: number = s.length;
  (globalThis as any).n = n;
  while (((l >= 0) && (r < n))) {
    if ((_indexString(s, l) != _indexString(s, r))) {
      break;
    }
    l = l - 1;
    r = r + 1;
  }
  return ((r - l) - 1);
}

function longestPalindrome(s: string): string {
  if ((s.length <= 1)) {
    return s;
  }
  let start: number = 0;
  (globalThis as any).start = start;
  let end: number = 0;
  (globalThis as any).end = end;
  let n: number = s.length;
  (globalThis as any).n = n;
  for (let i: number = 0; i < n; i++) {
    let len1: number = expand(s, i, i);
    (globalThis as any).len1 = len1;
    let len2: number = expand(s, i, i + 1);
    (globalThis as any).len2 = len2;
    let l: number = len1;
    (globalThis as any).l = l;
    if ((len2 > len1)) {
      l = len2;
    }
    if ((l > (end - start))) {
      start = i - (Math.trunc((l - 1) / 2));
      end = i + (Math.trunc(l / 2));
    }
  }
  return _sliceString(s, start, end + 1);
}

function test_example_1(): void {
  let ans: string = longestPalindrome("babad");
  (globalThis as any).ans = ans;
  if (!((ans == "bab") || (ans == "aba"))) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(longestPalindrome("cbbd") == "bb")) throw new Error("expect failed");
}

function test_single_char(): void {
  if (!(longestPalindrome("a") == "a")) throw new Error("expect failed");
}

function test_two_chars(): void {
  let ans: string = longestPalindrome("ac");
  (globalThis as any).ans = ans;
  if (!((ans == "a") || (ans == "c"))) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_single_char();
  test_two_chars();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

function _sliceString(s: string, i: number, j: number): string {
  let start = i;
  let end = j;
  const runes = Array.from(s);
  const n = runes.length;
  if (start < 0) start += n;
  if (end < 0) end += n;
  if (start < 0) start = 0;
  if (end > n) end = n;
  if (end < start) end = start;
  return runes.slice(start, end).join("");
}

main();
