// Generated by Mochi TypeScript compiler

function expand(s: string, left: number, right: number) : number {
	let l: number = left
	let r: number = right
	let n: number = s.length
	while (((l >= 0) && (r < n))) {
		if ((s[l] != s[r])) {
			break
		}
		l = (l - 1)
		r = (r + 1)
	}
	return ((r - l) - 1)
}

function longestPalindrome(s: string) : string {
	if ((s.length <= 1)) {
		return s
	}
	let start: number = 0
	let end: number = 0
	let n: number = s.length
	for (let i: number = 0; i < n; i++) {
		let len1: number = expand(s, i, i)
		let len2: number = expand(s, i, (i + 1))
		let l: number = len1
		if ((len2 > len1)) {
			l = len2
		}
		if ((l > (end - start))) {
			start = (i - Math.trunc(((l - 1)) / 2))
			end = (i + Math.trunc(l / 2))
		}
	}
	return s.slice(start, (end + 1))
}

function example_1(): void {
	let ans: string = longestPalindrome("babad")
	if (!(((ans == "bab") || (ans == "aba")))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((longestPalindrome("cbbd") == "bb"))) { throw new Error('expect failed') }
}

function single_char(): void {
	if (!((longestPalindrome("a") == "a"))) { throw new Error('expect failed') }
}

function two_chars(): void {
	let ans: string = longestPalindrome("ac")
	if (!(((ans == "a") || (ans == "c")))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	single_char()
	two_chars()
}
main()

