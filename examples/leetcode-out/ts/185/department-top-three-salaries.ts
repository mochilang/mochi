// Generated by Mochi TypeScript compiler

type Employee = {
  id: number;
  name: string;
  salary: number;
  departmentId: number;
};

type Department = {
  id: number;
  name: string;
};

type Result = {
  Department: string;
  Employee: string;
  Salary: number;
};

function topThreeSalaries(
  employees: Array<Employee>,
  departments: Array<Department>,
): Array<Result> {
  let results: Array<Result> = [];
  (globalThis as any).results = results;
  for (const dept of departments) {
    let salaries: Array<number> = [];
    (globalThis as any).salaries = salaries;
    for (const emp of employees) {
      if ((emp.departmentId == dept.id)) {
        let found: boolean = false;
        (globalThis as any).found = found;
        for (const s of salaries) {
          if ((s == emp.salary)) {
            found = true;
            break;
          }
        }
        if ((!found)) {
          salaries = salaries.concat([emp.salary]);
        }
      }
    }
    let i1: number = 0;
    (globalThis as any).i1 = i1;
    while ((i1 < salaries.length)) {
      let j: number = i1 + 1;
      (globalThis as any).j = j;
      while ((j < salaries.length)) {
        if ((salaries[j] > salaries[i1])) {
          let t: number = salaries[i1];
          (globalThis as any).t = t;
          salaries[i1] = salaries[j];
          salaries[j] = t;
        }
        j = j + 1;
      }
      i1 = i1 + 1;
    }
    let i: number = 0;
    (globalThis as any).i = i;
    while (((i < salaries.length) && (i < 3))) {
      let sal: number = salaries[i];
      (globalThis as any).sal = sal;
      for (const emp of employees) {
        if (((emp.departmentId == dept.id) && (emp.salary == sal))) {
          results = results.concat([
            {
              Department: dept.name,
              Employee: emp.name,
              Salary: sal,
            },
          ]);
        }
      }
      i = i + 1;
    }
  }
  return results;
}

function test_top_three_salaries(): void {
  let res: Array<Result> = topThreeSalaries(employees, departments);
  (globalThis as any).res = res;
  let names: Array<string> = [];
  (globalThis as any).names = names;
  for (const r of res) {
    names = names.concat([r.Employee]);
  }
  if (
    !(String(names) == String([
      "Max",
      "Joe",
      "Randy",
      "Will",
      "Henry",
      "Sam",
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  let employees: Array<Employee> = [
    {
      id: 1,
      name: "Joe",
      salary: 85000,
      departmentId: 1,
    },
    {
      id: 2,
      name: "Henry",
      salary: 80000,
      departmentId: 2,
    },
    {
      id: 3,
      name: "Sam",
      salary: 60000,
      departmentId: 2,
    },
    {
      id: 4,
      name: "Max",
      salary: 90000,
      departmentId: 1,
    },
    {
      id: 5,
      name: "Janet",
      salary: 69000,
      departmentId: 1,
    },
    {
      id: 6,
      name: "Randy",
      salary: 85000,
      departmentId: 1,
    },
    {
      id: 7,
      name: "Will",
      salary: 70000,
      departmentId: 1,
    },
  ];
  (globalThis as any).employees = employees;
  let departments: Array<Department> = [
    {
      id: 1,
      name: "IT",
    },
    {
      id: 2,
      name: "Sales",
    },
  ];
  (globalThis as any).departments = departments;
  test_top_three_salaries();
}
main();
