// Generated by Mochi TypeScript compiler

function max(a: number, b: number): number {
  if ((a > b)) {
    return a;
  }
  return b;
}

function min(a: number, b: number): number {
  if ((a < b)) {
    return a;
  }
  return b;
}

function computeArea(
  ax1: number,
  ay1: number,
  ax2: number,
  ay2: number,
  bx1: number,
  by1: number,
  bx2: number,
  by2: number,
): number {
  let areaA: number = (ax2 - ax1) * (ay2 - ay1);
  (globalThis as any).areaA = areaA;
  let areaB: number = (bx2 - bx1) * (by2 - by1);
  (globalThis as any).areaB = areaB;
  let overlapWidth: number = _min(ax2, bx2) - _max(ax1, bx1);
  (globalThis as any).overlapWidth = overlapWidth;
  let overlapHeight: number = _min(ay2, by2) - _max(ay1, by1);
  (globalThis as any).overlapHeight = overlapHeight;
  let overlap: number = 0;
  (globalThis as any).overlap = overlap;
  if (((overlapWidth > 0) && (overlapHeight > 0))) {
    overlap = overlapWidth * overlapHeight;
  }
  return ((areaA + areaB) - overlap);
}

function test_example_1(): void {
  if (!(computeArea(-3, 0, 3, 4, 0, -1, 9, 2) == 45)) {
    throw new Error("expect failed");
  }
}

function test_example_2(): void {
  if (!(computeArea(-2, -2, 2, 2, -2, -2, 2, 2) == 16)) {
    throw new Error("expect failed");
  }
}

function test_no_overlap(): void {
  if (!(computeArea(-1, -1, 1, 1, 2, 2, 3, 3) == 5)) {
    throw new Error("expect failed");
  }
}

function test_touching_edges(): void {
  if (!(computeArea(0, 0, 1, 1, 1, 0, 2, 1) == 2)) {
    throw new Error("expect failed");
  }
}

function test_one_inside_another(): void {
  if (!(computeArea(-2, -2, 2, 2, -1, -1, 1, 1) == 16)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  test_example_1();
  test_example_2();
  test_no_overlap();
  test_touching_edges();
  test_one_inside_another();
}
function _max(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m = Number(list[0]);
  for (const n of list) {
    const num = Number(n);
    if (num > m) m = num;
  }
  return m;
}

function _min(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m = Number(list[0]);
  for (const n of list) {
    const num = Number(n);
    if (num < m) m = num;
  }
  return m;
}

main();
