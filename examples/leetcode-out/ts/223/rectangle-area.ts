// Generated by Mochi TypeScript compiler

function max(a: number, b: number): number {
  if (a > b) {
    return a;
  }
  return b;
}

function min(a: number, b: number): number {
  if (a < b) {
    return a;
  }
  return b;
}

function computeArea(
  ax1: number,
  ay1: number,
  ax2: number,
  ay2: number,
  bx1: number,
  by1: number,
  bx2: number,
  by2: number,
): number {
  let areaA: number = (ax2 - ax1) * (ay2 - ay1);
  let areaB: number = (bx2 - bx1) * (by2 - by1);
  let overlapWidth: number = min(ax2, bx2) - max(ax1, bx1);
  let overlapHeight: number = min(ay2, by2) - max(ay1, by1);
  let overlap: number = 0;
  if (overlapWidth > 0 && overlapHeight > 0) {
    overlap = overlapWidth * overlapHeight;
  }
  return areaA + areaB - overlap;
}

function example_1(): void {
  if (!(computeArea(-3, 0, 3, 4, 0, -1, 9, 2) == 45)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(computeArea(-2, -2, 2, 2, -2, -2, 2, 2) == 16)) {
    throw new Error("expect failed");
  }
}

function no_overlap(): void {
  if (!(computeArea(-1, -1, 1, 1, 2, 2, 3, 3) == 5)) {
    throw new Error("expect failed");
  }
}

function touching_edges(): void {
  if (!(computeArea(0, 0, 1, 1, 1, 0, 2, 1) == 2)) {
    throw new Error("expect failed");
  }
}

function one_inside_another(): void {
  if (!(computeArea(-2, -2, 2, 2, -1, -1, 1, 1) == 16)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  no_overlap();
  touching_edges();
  one_inside_another();
}
main();
