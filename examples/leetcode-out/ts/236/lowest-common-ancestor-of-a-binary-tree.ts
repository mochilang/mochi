// Generated by Mochi TypeScript compiler

function lca(
  lefts: Array<number>,
  rights: Array<number>,
  root: number,
  p: number,
  q: number,
): number {
  if ((root == (-1))) {
    return (-1);
  }
  if (((root == p) || (root == q))) {
    return root;
  }
  let leftRes: number = lca(lefts, rights, lefts[root], p, q);
  (globalThis as any).leftRes = leftRes;
  let rightRes: number = lca(lefts, rights, rights[root], p, q);
  (globalThis as any).rightRes = rightRes;
  if (((leftRes != (-1)) && (rightRes != (-1)))) {
    return root;
  }
  if ((leftRes != (-1))) {
    return leftRes;
  }
  return rightRes;
}

function test_p_and_q_on_different_sides(): void {
  if (!(lca(lefts, rights, root, 1, 2) == 0)) throw new Error("expect failed");
}

function test_p_is_ancestor_of_q(): void {
  if (!(lca(lefts, rights, root, 1, 8) == 1)) throw new Error("expect failed");
}

function test_same_node(): void {
  if (!(lca(lefts, rights, root, 1, 1) == 1)) throw new Error("expect failed");
}

function test_deep_nodes(): void {
  if (!(lca(lefts, rights, root, 3, 5) == 0)) throw new Error("expect failed");
}

function test_siblings(): void {
  if (!(lca(lefts, rights, root, 7, 8) == 4)) throw new Error("expect failed");
}

function main(): void {
  let lefts: Array<number> = [
    1,
    3,
    5,
    -1,
    7,
    -1,
    -1,
    -1,
    -1,
  ];
  (globalThis as any).lefts = lefts;
  let rights: Array<number> = [
    2,
    4,
    6,
    -1,
    8,
    -1,
    -1,
    -1,
    -1,
  ];
  (globalThis as any).rights = rights;
  let values: Array<number> = [
    3,
    5,
    1,
    6,
    2,
    0,
    8,
    7,
    4,
  ];
  (globalThis as any).values = values;
  let root: number = 0;
  (globalThis as any).root = root;
  test_p_and_q_on_different_sides();
  test_p_is_ancestor_of_q();
  test_same_node();
  test_deep_nodes();
  test_siblings();
}
main();
