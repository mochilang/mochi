// Generated by Mochi TypeScript compiler

let lefts: Array<number> = [1, 3, 5, -1, 7, -1, -1, -1, -1];

let rights: Array<number> = [2, 4, 6, -1, 8, -1, -1, -1, -1];

let values: Array<number> = [3, 5, 1, 6, 2, 0, 8, 7, 4];

let root: number = 0;

function lca(
  lefts: Array<number>,
  rights: Array<number>,
  root: number,
  p: number,
  q: number,
): number {
  if (root == -1) {
    return -1;
  }
  if (root == p || root == q) {
    return root;
  }
  let leftRes: number = lca(lefts, rights, lefts[root], p, q);
  let rightRes: number = lca(lefts, rights, rights[root], p, q);
  if (leftRes != -1 && rightRes != -1) {
    return root;
  }
  if (leftRes != -1) {
    return leftRes;
  }
  return rightRes;
}

function p_and_q_on_different_sides(): void {
  if (!(lca(lefts, rights, root, 1, 2) == 0)) {
    throw new Error("expect failed");
  }
}

function p_is_ancestor_of_q(): void {
  if (!(lca(lefts, rights, root, 1, 8) == 1)) {
    throw new Error("expect failed");
  }
}

function same_node(): void {
  if (!(lca(lefts, rights, root, 1, 1) == 1)) {
    throw new Error("expect failed");
  }
}

function deep_nodes(): void {
  if (!(lca(lefts, rights, root, 3, 5) == 0)) {
    throw new Error("expect failed");
  }
}

function siblings(): void {
  if (!(lca(lefts, rights, root, 7, 8) == 4)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  p_and_q_on_different_sides();
  p_is_ancestor_of_q();
  same_node();
  deep_nodes();
  siblings();
}
main();
