// Generated by Mochi TypeScript compiler

function ladderLength(beginWord: string, endWord: string, wordList: Array<string>) : number {
	let dict: Record<string, boolean> = {}
	for (const w of wordList) {
		dict[w] = true
	}
	if ((!(Object.prototype.hasOwnProperty.call(dict, String(endWord))))) {
		return 0
	}
	let queue: Array<string> = [beginWord]
	let visited: Record<string, boolean> = {"beginWord": true}
	let level: number = 1
	let letters: string = "abcdefghijklmnopqrstuvwxyz"
	while ((queue.length > 0)) {
		let next: Array<string> = []
		for (const word of queue) {
			if ((word == endWord)) {
				return level
			}
			for (let i: number = 0; i < word.length; i++) {
				for (let j: number = 0; j < letters.length; j++) {
					let ch: string = letters[j]
					if ((ch != word[i])) {
						let candidate: string = word.slice(0, i) + ch + word.slice((i + 1), word.length)
						if ((Object.prototype.hasOwnProperty.call(dict, String(candidate)) && _equal((Object.prototype.hasOwnProperty.call(visited, String(candidate))), false))) {
							visited[candidate] = true
							next = next.concat([candidate])
						}
					}
				}
			}
		}
		queue = next
		level = (level + 1)
	}
	return 0
}

function example_1(): void {
	if (!((ladderLength("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog"]) == 5))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((ladderLength("hit", "cog", ["hot", "dot", "dog", "lot", "log"]) == 0))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

