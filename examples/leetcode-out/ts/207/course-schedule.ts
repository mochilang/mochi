// Generated by Mochi TypeScript compiler

function canFinish(numCourses: number, prerequisites: Array<Array<number>>) : boolean {
	let graph: Array<Array<number>> = []
	let indegree: Array<number> = []
	for (let _: number = 0; _ < numCourses; _++) {
		graph = graph.concat([[]])
		indegree = indegree.concat([0])
	}
	for (const pair of prerequisites) {
		let a: number = pair[0]
		let b: number = pair[1]
		graph[b] = graph[b].concat([a])
		indegree[a] = (indegree[a] + 1)
	}
	let queue: Array<number> = []
	for (let i: number = 0; i < numCourses; i++) {
		if ((indegree[i] == 0)) {
			queue = queue.concat([i])
		}
	}
	let visited: number = 0
	let idx: number = 0
	while ((idx < queue.length)) {
		let course: number = queue[idx]
		idx = (idx + 1)
		visited = (visited + 1)
		for (const next of graph[course]) {
			indegree[next] = (indegree[next] - 1)
			if ((indegree[next] == 0)) {
				queue = queue.concat([next])
			}
		}
	}
	return (visited == numCourses)
}

function simple_acyclic(): void {
	if (!((canFinish(2, [[1, 0]]) == true))) { throw new Error('expect failed') }
}

function simple_cycle(): void {
	if (!((canFinish(2, [[1, 0], [0, 1]]) == false))) { throw new Error('expect failed') }
}

function long_chain(): void {
	if (!((canFinish(4, [[1, 0], [2, 1], [3, 2]]) == true))) { throw new Error('expect failed') }
}

function cycle_with_more_courses(): void {
	if (!((canFinish(3, [[0, 1], [1, 2], [2, 0]]) == false))) { throw new Error('expect failed') }
}

function main(): void {
	simple_acyclic()
	simple_cycle()
	long_chain()
	cycle_with_more_courses()
}
main()

