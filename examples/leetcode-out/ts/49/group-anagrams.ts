// Generated by Mochi TypeScript compiler

function groupAnagrams(strs: Array<string>): Array<Array<string>> {
  let index: Record<string, number> = {};
  (globalThis as any).index = index;
  let groups: Array<Array<string>> = [];
  (globalThis as any).groups = groups;
  for (const word of strs) {
    let letters: Array<string> = [];
    (globalThis as any).letters = letters;
    let i: number = 0;
    (globalThis as any).i = i;
    while ((i < word.length)) {
      letters = letters.concat([_indexString(word, i)]);
      i = i + 1;
    }
    let chars: Array<string> = (() => {
      const _src = letters;
      let _items = [];
      for (const ch of _src) {
        _items.push(ch);
      }
      let _pairs = _items.map((it) => {
        const ch = it;
        return { item: it, key: ch };
      });
      _pairs.sort((a, b) => {
        const ak = a.key;
        const bk = b.key;
        if (typeof ak === "number" && typeof bk === "number") return ak - bk;
        if (typeof ak === "string" && typeof bk === "string") {
          return ak < bk
            ? -1
            : (ak > bk ? 1 : 0);
        }
        return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
      });
      _items = _pairs.map((p) => p.item);
      const _res = [];
      for (const ch of _items) {
        _res.push(ch);
      }
      return _res;
    })();
    (globalThis as any).chars = chars;
    let key: string = "";
    (globalThis as any).key = key;
    for (const ch of chars) {
      key = key + ch;
    }
    if (Object.prototype.hasOwnProperty.call(index, String(key))) {
      let idx: number = index[key];
      (globalThis as any).idx = idx;
      groups[idx] = groups[idx].concat([word]);
    } else {
      groups = groups.concat([[word]]);
      index[key] = groups.length - 1;
    }
  }
  return groups;
}

function test_example_1(): void {
  let res: Array<Array<string>> = groupAnagrams([
    "eat",
    "tea",
    "tan",
    "ate",
    "nat",
    "bat",
  ]);
  (globalThis as any).res = res;
  let normalize: any = function (g: Array<string>): Array<string> {
    return (() => {
      const _src = g;
      let _items = [];
      for (const x of _src) {
        _items.push(x);
      }
      let _pairs = _items.map((it) => {
        const x = it;
        return { item: it, key: x };
      });
      _pairs.sort((a, b) => {
        const ak = a.key;
        const bk = b.key;
        if (typeof ak === "number" && typeof bk === "number") return ak - bk;
        if (typeof ak === "string" && typeof bk === "string") {
          return ak < bk
            ? -1
            : (ak > bk ? 1 : 0);
        }
        return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
      });
      _items = _pairs.map((p) => p.item);
      const _res = [];
      for (const x of _items) {
        _res.push(x);
      }
      return _res;
    })();
  };
  (globalThis as any).normalize = normalize;
  let sorted: Array<Array<string>> = res.map((g) => normalize(g));
  (globalThis as any).sorted = sorted;
  let final: Array<Array<string>> = (() => {
    const _src = sorted;
    let _items = [];
    for (const g of _src) {
      _items.push(g);
    }
    let _pairs = _items.map((it) => {
      const g = it;
      return { item: it, key: g[0] };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push(g);
    }
    return _res;
  })();
  (globalThis as any).final = final;
  let expected: Array<Array<string>> = [
    [
      "ate",
      "eat",
      "tea",
    ],
    ["bat"],
    [
      "nat",
      "tan",
    ],
  ];
  (globalThis as any).expected = expected;
  let expSorted: Array<Array<string>> = expected.map((g) => normalize(g));
  (globalThis as any).expSorted = expSorted;
  let expFinal: Array<Array<string>> = (() => {
    const _src = expSorted;
    let _items = [];
    for (const g of _src) {
      _items.push(g);
    }
    let _pairs = _items.map((it) => {
      const g = it;
      return { item: it, key: g[0] };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push(g);
    }
    return _res;
  })();
  (globalThis as any).expFinal = expFinal;
  if (!(_equal(final, expFinal))) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(_equal(groupAnagrams([""]), [[""]]))) throw new Error("expect failed");
}

function test_example_3(): void {
  if (!(_equal(groupAnagrams(["a"]), [["a"]]))) {
    throw new Error("expect failed");
  }
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
