// Generated by Mochi TypeScript compiler

function calculate(s: string) : number {
	let digits: Record<string, number> = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	let stack: Array<number> = []
	let current: number = 0
	let op: string = "+"
	let i: number = 0
	let n: number = s.length
	while ((i <= n)) {
		let ch: string = " "
		if ((i < n)) {
			ch = s[i]
		}
		if (Object.prototype.hasOwnProperty.call(digits, String(ch))) {
			current = ((current * 10) + digits[ch])
		}
		if (((((!(Object.prototype.hasOwnProperty.call(digits, String(ch)))) && (ch != " "))) || (i == n))) {
			if ((op == "+")) {
				stack = stack.concat([current])
			} else 			if ((op == "-")) {
				stack = stack.concat([(-current)])
			} else 			if ((op == "*")) {
				let last: number = stack[(stack.length - 1)]
				stack = stack.slice(0, (stack.length - 1))
				stack = stack.concat([(last * current)])
			} else {
				let last: number = stack[(stack.length - 1)]
				stack = stack.slice(0, (stack.length - 1))
				stack = stack.concat([Math.trunc(last / current)])
			}
			op = ch
			current = 0
		}
		i = (i + 1)
	}
	let result: number = 0
	for (const num of stack) {
		result = (result + num)
	}
	return result
}

function example_1(): void {
	if (!((calculate("3+2*2") == 7))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((calculate(" 3/2 ") == 1))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((calculate(" 3+5 / 2 ") == 5))) { throw new Error('expect failed') }
}

function mix_operations(): void {
	if (!((calculate("14-3/2") == 13))) { throw new Error('expect failed') }
}

function single_number(): void {
	if (!((calculate("0") == 0))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	mix_operations()
	single_number()
}
main()

