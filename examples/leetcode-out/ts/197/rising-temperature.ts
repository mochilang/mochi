// Generated by Mochi TypeScript compiler

type Weather = {
  id: number;
  recordDate: string;
  temperature: number;
};

function risingTemperature(records: Array<Weather>): Array<number> {
  let result: Array<number> = [];
  (globalThis as any).result = result;
  let i: number = 1;
  (globalThis as any).i = i;
  while ((i < records.length)) {
    let today: Weather = records[i];
    (globalThis as any).today = today;
    let yesterday: Weather = records[i - 1];
    (globalThis as any).yesterday = yesterday;
    if ((today.temperature > yesterday.temperature)) {
      result = result.concat([today.id]);
    }
    i = i + 1;
  }
  return result;
}

function test_rising_days(): void {
  if (
    !(_equal(risingTemperature(sampleWeather), [
      2,
      4,
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  let sampleWeather: Array<Weather> = [
    {
      id: 1,
      recordDate: "2015-01-01",
      temperature: 10,
    },
    {
      id: 2,
      recordDate: "2015-01-02",
      temperature: 25,
    },
    {
      id: 3,
      recordDate: "2015-01-03",
      temperature: 20,
    },
    {
      id: 4,
      recordDate: "2015-01-04",
      temperature: 30,
    },
  ];
  (globalThis as any).sampleWeather = sampleWeather;
  test_rising_days();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
