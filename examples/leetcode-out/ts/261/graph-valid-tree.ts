// Generated by Mochi TypeScript compiler

function validTree(n: number, edges: Array<Array<number>>): boolean {
  if ((edges.length != (n - 1))) {
    return false;
  }
  let parent: Array<number> = [];
  (globalThis as any).parent = parent;
  for (let i: number = 0; i < n; i++) {
    parent = parent.concat([i]);
  }
  function find(x: number): number {
    let root: number = x;
    (globalThis as any).root = root;
    while ((parent[root] != root)) {
      root = parent[root];
    }
    let node: number = x;
    (globalThis as any).node = node;
    while ((parent[node] != node)) {
      let next: number = parent[node];
      (globalThis as any).next = next;
      parent[node] = root;
      node = next;
    }
    return root;
  }
  for (const e of edges) {
    let a: number = e[0];
    (globalThis as any).a = a;
    let b: number = e[1];
    (globalThis as any).b = b;
    let pa: number = find(a);
    (globalThis as any).pa = pa;
    let pb: number = find(b);
    (globalThis as any).pb = pb;
    if ((pa == pb)) {
      return false;
    }
    parent[pb] = pa;
  }
  return true;
}

function test_example_1(): void {
  if (
    !(validTree(5, [
      [
        0,
        1,
      ],
      [
        0,
        2,
      ],
      [
        0,
        3,
      ],
      [
        1,
        4,
      ],
    ]) == true)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(validTree(5, [
      [
        0,
        1,
      ],
      [
        1,
        2,
      ],
      [
        2,
        3,
      ],
      [
        1,
        3,
      ],
      [
        1,
        4,
      ],
    ]) == false)
  ) throw new Error("expect failed");
}

function test_disconnected(): void {
  if (
    !(validTree(4, [
      [
        0,
        1,
      ],
      [
        2,
        3,
      ],
    ]) == false)
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_disconnected();
}
main();
