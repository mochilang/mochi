// Generated by Mochi TypeScript compiler

function validTree(n: number, edges: Array<Array<number>>) : boolean {
	if ((edges.length != (n - 1))) {
		return false
	}
	let parent: Array<number> = []
	for (let i: number = 0; i < n; i++) {
		parent = parent.concat([i])
	}
	function find(x: number) : number {
		let root: number = x
		while ((parent[root] != root)) {
			root = parent[root]
		}
		let node: number = x
		while ((parent[node] != node)) {
			let next: number = parent[node]
			parent[node] = root
			node = next
		}
		return root
	}
	for (const e of edges) {
		let a: number = e[0]
		let b: number = e[1]
		let pa: number = find(a)
		let pb: number = find(b)
		if ((pa == pb)) {
			return false
		}
		parent[pb] = pa
	}
	return true
}

function example_1(): void {
	if (!((validTree(5, [[0, 1], [0, 2], [0, 3], [1, 4]]) == true))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((validTree(5, [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]]) == false))) { throw new Error('expect failed') }
}

function disconnected(): void {
	if (!((validTree(4, [[0, 1], [2, 3]]) == false))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	disconnected()
}
main()

