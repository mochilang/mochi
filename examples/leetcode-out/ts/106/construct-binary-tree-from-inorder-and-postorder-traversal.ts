// Generated by Mochi TypeScript compiler

type Leaf = {
  __name: "Leaf";
};

type _Node = {
  __name: "Node";
  left: Tree;
  value: number;
  right: Tree;
};

type Tree = Leaf | _Node;

function buildTree(inorder: Array<number>, postorder: Array<number>): Tree {
  if ((inorder.length == 0)) {
    return { __name: "Leaf" };
  }
  let rootVal: number = postorder[postorder.length - 1];
  (globalThis as any).rootVal = rootVal;
  let idx: number = 0;
  (globalThis as any).idx = idx;
  while (((idx < inorder.length) && (inorder[idx] != rootVal))) {
    idx = idx + 1;
  }
  let leftIn: Array<number> = inorder.slice(0, idx);
  (globalThis as any).leftIn = leftIn;
  let rightIn: Array<number> = inorder.slice(idx + 1, inorder.length);
  (globalThis as any).rightIn = rightIn;
  let leftPost: Array<number> = postorder.slice(0, idx);
  (globalThis as any).leftPost = leftPost;
  let rightPost: Array<number> = postorder.slice(idx, postorder.length - 1);
  (globalThis as any).rightPost = rightPost;
  return {
    __name: "Node",
    left: buildTree(leftIn, leftPost),
    value: rootVal,
    right: buildTree(rightIn, rightPost),
  };
}

function isSameTree(a: Tree, b: Tree): boolean {
  return (() => {
    const _t = a;
    if (_t.__name === "Leaf") {
      return (() => {
        const _t = b;
        if (_t.__name === "Leaf") return true;
        return false;
      })();
    }
    if (_t.__name === "Node") {
      return ((al, av, ar) =>
        (() => {
          const _t = b;
          if (_t.__name === "Node") {
            return ((
              bl,
              bv,
              br,
            ) => ((_equal(av, bv) && isSameTree(al, bl)) &&
              isSameTree(ar, br)))(_t.left, _t.value, _t.right);
          }
          return false;
        })())(_t.left, _t.value, _t.right);
    }
    return undefined;
  })();
}

function test_example_1(): void {
  let inorder: Array<number> = [
    9,
    3,
    15,
    20,
    7,
  ];
  (globalThis as any).inorder = inorder;
  let postorder: Array<number> = [
    9,
    15,
    7,
    20,
    3,
  ];
  (globalThis as any).postorder = postorder;
  let expected: _Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 9,
      right: { __name: "Leaf" },
    },
    value: 3,
    right: {
      __name: "Node",
      left: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 15,
        right: { __name: "Leaf" },
      },
      value: 20,
      right: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 7,
        right: { __name: "Leaf" },
      },
    },
  };
  (globalThis as any).expected = expected;
  if (!(isSameTree(buildTree(inorder, postorder), expected) == true)) {
    throw new Error("expect failed");
  }
}

function test_example_2(): void {
  let inorder: Array<number> = [-1];
  (globalThis as any).inorder = inorder;
  let postorder: Array<number> = [-1];
  (globalThis as any).postorder = postorder;
  let expected: _Node = {
    __name: "Node",
    left: { __name: "Leaf" },
    value: (-1),
    right: { __name: "Leaf" },
  };
  (globalThis as any).expected = expected;
  if (!(isSameTree(buildTree(inorder, postorder), expected) == true)) {
    throw new Error("expect failed");
  }
}

function test_empty(): void {
  let result: Tree = buildTree([], []);
  (globalThis as any).result = result;
  if (
    !((() => {
      const _t = result;
      if (_t.__name === "Leaf") return true;
      return false;
    })())
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_empty();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
