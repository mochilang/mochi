// Generated by Mochi TypeScript compiler

type Logger = {
  log: Record<string, number>;
};

type PrintResult = {
  ok: boolean;
  logger: Logger;
};

function newLogger(): Logger {
  return { log: {} };
}

function shouldPrintMessage(
  logger: Logger,
  timestamp: number,
  message: string,
): PrintResult {
  let log: Record<string, number> = logger.log;
  (globalThis as any).log = log;
  if (Object.prototype.hasOwnProperty.call(log, String(message))) {
    let last: number = log[message];
    (globalThis as any).last = last;
    if (((timestamp - last) < 10)) {
      return {
        ok: false,
        logger: { log: log },
      };
    }
  }
  log[message] = timestamp;
  return {
    ok: true,
    logger: { log: log },
  };
}

function test_example(): void {
  let l: Logger = newLogger();
  (globalThis as any).l = l;
  let r1: PrintResult = shouldPrintMessage(l, 1, "foo");
  (globalThis as any).r1 = r1;
  if (!(r1.ok == true)) throw new Error("expect failed");
  l = r1.logger;
  let r2: PrintResult = shouldPrintMessage(l, 2, "bar");
  (globalThis as any).r2 = r2;
  if (!(r2.ok == true)) throw new Error("expect failed");
  l = r2.logger;
  let r3: PrintResult = shouldPrintMessage(l, 3, "foo");
  (globalThis as any).r3 = r3;
  if (!(r3.ok == false)) throw new Error("expect failed");
  l = r3.logger;
  let r4: PrintResult = shouldPrintMessage(l, 8, "bar");
  (globalThis as any).r4 = r4;
  if (!(r4.ok == false)) throw new Error("expect failed");
  l = r4.logger;
  let r5: PrintResult = shouldPrintMessage(l, 10, "foo");
  (globalThis as any).r5 = r5;
  if (!(r5.ok == false)) throw new Error("expect failed");
  l = r5.logger;
  let r6: PrintResult = shouldPrintMessage(l, 11, "foo");
  (globalThis as any).r6 = r6;
  if (!(r6.ok == true)) throw new Error("expect failed");
}

function main(): void {
  test_example();
}
main();
