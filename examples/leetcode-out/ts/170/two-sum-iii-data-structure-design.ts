// Generated by Mochi TypeScript compiler

function newTwoSum() : TwoSum {
	return {counts: {}}
}

function add(ts: TwoSum, number: number) : TwoSum {
	let counts: Record<number, number> = ts.counts
	let current: number = 0
	if (Object.prototype.hasOwnProperty.call(counts, String(number))) {
		current = counts[number]
	}
	counts[number] = (current + 1)
	return {counts: counts}
}

function find(ts: TwoSum, value: number) : boolean {
	for (const keyKey of Object.keys(ts.counts)) {
		const key: number = Number(keyKey)
		let count: number = ts.counts[key]
		let complement: number = (value - key)
		if (Object.prototype.hasOwnProperty.call(ts.counts, String(complement))) {
			let other: number = ts.counts[complement]
			if ((key != complement)) {
				return true
			} else {
				if ((other > 1)) {
					return true
				}
			}
		}
	}
	return false
}

function example(): void {
	let ts: TwoSum = newTwoSum()
	ts = add(ts, 1)
	ts = add(ts, 3)
	ts = add(ts, 5)
	if (!((find(ts, 4) == true))) { throw new Error('expect failed') }
	if (!((find(ts, 7) == false))) { throw new Error('expect failed') }
}

function duplicate_numbers(): void {
	let ts: TwoSum = newTwoSum()
	ts = add(ts, 2)
	ts = add(ts, 2)
	if (!((find(ts, 4) == true))) { throw new Error('expect failed') }
	if (!((find(ts, 3) == false))) { throw new Error('expect failed') }
}

function main(): void {
	type TwoSum = {
		counts: Record<number, number>;
	}
	example()
	duplicate_numbers()
}
main()

