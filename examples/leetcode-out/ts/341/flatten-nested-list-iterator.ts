// Generated by Mochi TypeScript compiler

type NestedIterator = {
  data: Array<number>;
  index: number;
};

type NextResult = {
  it: NestedIterator;
  val: number;
};

function IntItem(v: number): Record<string, any> {
  return {
    "kind": "int",
    "value": v,
  };
}

function ListItem(items: Array<Record<string, any>>): Record<string, any> {
  return {
    "kind": "list",
    "value": items,
  };
}

function isInt(item: Record<string, any>): boolean {
  return _equal(item["kind"], "int");
}

function itemValue(item: Record<string, any>): number {
  return item["value"];
}

function itemList(item: Record<string, any>): Array<Record<string, any>> {
  return item["value"];
}

function flatten(items: Array<Record<string, any>>): Array<number> {
  let result: Array<number> = [];
  (globalThis as any).result = result;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < items.length)) {
    let it: Record<string, any> = items[i];
    (globalThis as any).it = it;
    if (isInt(it)) {
      result = result.concat([itemValue(it)]);
    } else {
      result = result.concat(flatten(itemList(it)));
    }
    i = i + 1;
  }
  return result;
}

function newNestedIterator(nested: Array<Record<string, any>>): NestedIterator {
  return {
    data: flatten(nested),
    index: 0,
  };
}

function nestedHasNext(it: NestedIterator): boolean {
  return (it.index < it.data.length);
}

function nestedNext(it: NestedIterator): NextResult {
  let value: number = it.data[it.index];
  (globalThis as any).value = value;
  return {
    it: {
      data: it.data,
      index: (it.index + 1),
    },
    val: value,
  };
}

function test_example_1(): void {
  let nested: Array<Record<string, any>> = [
    ListItem([
      IntItem(1),
      IntItem(1),
    ]),
    IntItem(2),
    ListItem([
      IntItem(1),
      IntItem(1),
    ]),
  ];
  (globalThis as any).nested = nested;
  let it: NestedIterator = newNestedIterator(nested);
  (globalThis as any).it = it;
  let r1: NextResult = nestedNext(it);
  (globalThis as any).r1 = r1;
  it = r1.it;
  if (!(r1.val == 1)) throw new Error("expect failed");
  let r2: NextResult = nestedNext(it);
  (globalThis as any).r2 = r2;
  it = r2.it;
  if (!(r2.val == 1)) throw new Error("expect failed");
  let r3: NextResult = nestedNext(it);
  (globalThis as any).r3 = r3;
  it = r3.it;
  if (!(r3.val == 2)) throw new Error("expect failed");
  let r4: NextResult = nestedNext(it);
  (globalThis as any).r4 = r4;
  it = r4.it;
  if (!(r4.val == 1)) throw new Error("expect failed");
  let r5: NextResult = nestedNext(it);
  (globalThis as any).r5 = r5;
  it = r5.it;
  if (!(r5.val == 1)) throw new Error("expect failed");
  if (!(nestedHasNext(it) == false)) throw new Error("expect failed");
}

function test_example_2(): void {
  let nested: Array<Record<string, any>> = [
    IntItem(1),
    ListItem([
      IntItem(4),
      ListItem([IntItem(6)]),
    ]),
  ];
  (globalThis as any).nested = nested;
  let it: NestedIterator = newNestedIterator(nested);
  (globalThis as any).it = it;
  let r1: NextResult = nestedNext(it);
  (globalThis as any).r1 = r1;
  it = r1.it;
  if (!(r1.val == 1)) throw new Error("expect failed");
  let r2: NextResult = nestedNext(it);
  (globalThis as any).r2 = r2;
  it = r2.it;
  if (!(r2.val == 4)) throw new Error("expect failed");
  let r3: NextResult = nestedNext(it);
  (globalThis as any).r3 = r3;
  it = r3.it;
  if (!(r3.val == 6)) throw new Error("expect failed");
  if (!(nestedHasNext(it) == false)) throw new Error("expect failed");
}

function test_empty_list(): void {
  let it: NestedIterator = newNestedIterator([]);
  (globalThis as any).it = it;
  if (!(nestedHasNext(it) == false)) throw new Error("expect failed");
}

function test_empty_inner_lists(): void {
  let nested: Array<Record<string, any>> = [
    ListItem([]),
    IntItem(3),
    ListItem([]),
  ];
  (globalThis as any).nested = nested;
  let it: NestedIterator = newNestedIterator(nested);
  (globalThis as any).it = it;
  let r: NextResult = nestedNext(it);
  (globalThis as any).r = r;
  it = r.it;
  if (!(r.val == 3)) throw new Error("expect failed");
  if (!(nestedHasNext(it) == false)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_empty_list();
  test_empty_inner_lists();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
