// Generated by Mochi TypeScript compiler

function reverseBetween(
  nums: Array<number>,
  left: number,
  right: number,
): Array<number> {
  if ((left >= right)) {
    return nums;
  }
  if (((left < 1) || (right > nums.length))) {
    return nums;
  }
  let result: Array<number> = nums;
  (globalThis as any).result = result;
  let i: number = left - 1;
  (globalThis as any).i = i;
  let j: number = right - 1;
  (globalThis as any).j = j;
  while ((i < j)) {
    let temp: number = result[i];
    (globalThis as any).temp = temp;
    result[i] = result[j];
    result[j] = temp;
    i = i + 1;
    j = j - 1;
  }
  return result;
}

function test_example_1(): void {
  if (
    !(_equal(
      reverseBetween(
        [
          1,
          2,
          3,
          4,
          5,
        ],
        2,
        4,
      ),
      [
        1,
        4,
        3,
        2,
        5,
      ],
    ))
  ) throw new Error("expect failed");
}

function test_left_equals_right(): void {
  if (
    !(_equal(
      reverseBetween(
        [
          1,
          2,
          3,
        ],
        2,
        2,
      ),
      [
        1,
        2,
        3,
      ],
    ))
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_left_equals_right();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
