// Generated by Mochi TypeScript compiler

function mergeTwoLists(l1: Array<number>, l2: Array<number>): Array<number> {
  let i: number = 0;
  let j: number = 0;
  let result: Array<any> = [];
  while (i < l1.length && j < l2.length) {
    if (l1[i] <= l2[j]) {
      result = result.concat([l1[i]]);
      i = i + 1;
    } else {
      result = result.concat([l2[j]]);
      j = j + 1;
    }
  }
  while (i < l1.length) {
    result = result.concat([l1[i]]);
    i = i + 1;
  }
  while (j < l2.length) {
    result = result.concat([l2[j]]);
    j = j + 1;
  }
  return result;
}

function example_1(): void {
  if (!_equal(mergeTwoLists([1, 2, 4], [1, 3, 4]), [1, 1, 2, 3, 4, 4])) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!_equal(mergeTwoLists([], []), [])) {
    throw new Error("expect failed");
  }
}

function example_3(): void {
  if (!_equal(mergeTwoLists([], [0]), [0])) {
    throw new Error("expect failed");
  }
}

function different_lengths(): void {
  if (
    !_equal(mergeTwoLists([1, 5, 7], [2, 3, 4, 6, 8]), [1, 2, 3, 4, 5, 6, 7, 8])
  ) {
    throw new Error("expect failed");
  }
}

function one_list_empty(): void {
  if (!_equal(mergeTwoLists([1, 2, 3], []), [1, 2, 3])) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  example_3();
  different_lengths();
  one_list_empty();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
