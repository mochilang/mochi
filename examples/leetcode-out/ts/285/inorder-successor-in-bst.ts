// Generated by Mochi TypeScript compiler

type _Node = {
  val: number;
  left: number;
  right: number;
};

function inorderSuccessor(tree: Array<_Node>, root: number, p: number): number {
  let pNode: _Node = tree[p];
  (globalThis as any).pNode = pNode;
  let targetVal: number = pNode.val;
  (globalThis as any).targetVal = targetVal;
  let current: number = root;
  (globalThis as any).current = current;
  let successor: number = -1;
  (globalThis as any).successor = successor;
  while ((current != (-1))) {
    let node: _Node = tree[current];
    (globalThis as any).node = node;
    if ((targetVal < node.val)) {
      successor = current;
      current = node.left;
    } else {
      current = node.right;
    }
  }
  return successor;
}

function test_successor_in_middle(): void {
  if (!(inorderSuccessor(example, 0, 1) == 4)) throw new Error("expect failed");
}

function test_no_successor(): void {
  if (!(inorderSuccessor(example, 0, 2) == (-1))) {
    throw new Error("expect failed");
  }
}

function test_left_subtree(): void {
  if (!(inorderSuccessor(example, 0, 3) == 1)) throw new Error("expect failed");
}

function test_single_node(): void {
  let tree: Array<_Node> = [
    {
      val: 1,
      left: (-1),
      right: (-1),
    },
  ];
  (globalThis as any).tree = tree;
  if (!(inorderSuccessor(tree, 0, 0) == (-1))) throw new Error("expect failed");
}

function main(): void {
  let example: Array<_Node> = [
    {
      val: 5,
      left: 1,
      right: 2,
    },
    {
      val: 3,
      left: 3,
      right: 4,
    },
    {
      val: 6,
      left: (-1),
      right: (-1),
    },
    {
      val: 2,
      left: 5,
      right: (-1),
    },
    {
      val: 4,
      left: (-1),
      right: (-1),
    },
    {
      val: 1,
      left: (-1),
      right: (-1),
    },
  ];
  (globalThis as any).example = example;
  test_successor_in_middle();
  test_no_successor();
  test_left_subtree();
  test_single_node();
}
main();
