// Generated by Mochi TypeScript compiler

function maxDiff(num: number): number {
  let s: string = String(num);
  (globalThis as any).s = s;
  let digits: Record<string, number> = {
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  };
  (globalThis as any).digits = digits;
  let digitMax: string = "";
  (globalThis as any).digitMax = digitMax;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < s.length)) {
    if ((_indexString(s, i) != "9")) {
      digitMax = _indexString(s, i);
      break;
    }
    i = i + 1;
  }
  let maxVal: number = 0;
  (globalThis as any).maxVal = maxVal;
  for (const ch of s) {
    let c: string = ch;
    (globalThis as any).c = c;
    if ((c == digitMax)) {
      c = "9";
    }
    maxVal = (maxVal * 10) + digits[c];
  }
  let digitMin: string = "";
  (globalThis as any).digitMin = digitMin;
  i = 0;
  while ((i < s.length)) {
    if ((_indexString(s, i) != "0")) {
      digitMin = _indexString(s, i);
      break;
    }
    i = i + 1;
  }
  let minVal: number = 0;
  (globalThis as any).minVal = minVal;
  for (const ch of s) {
    let c: string = ch;
    (globalThis as any).c = c;
    if ((c == digitMin)) {
      c = "0";
    }
    minVal = (minVal * 10) + digits[c];
  }
  return (maxVal - minVal);
}

function test_example_1(): void {
  if (!(maxDiff(11891) == 99009)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(maxDiff(90) == 99)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
