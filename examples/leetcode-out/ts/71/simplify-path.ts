// Generated by Mochi TypeScript compiler

function simplifyPath(path: string) : string {
	let stack: Array<string> = []
	let part: string = ""
	let i: number = 0
	let n: number = path.length
	while ((i <= n)) {
		if ((i == n)) {
			if ((part == "..")) {
				if ((stack.length > 0)) {
					stack = stack.slice(0, (stack.length - 1))
				}
			} else 			if (((part != "") && (part != "."))) {
				stack = stack.concat([part])
			}
			part = ""
		} else 		if ((path[i] == "/")) {
			if ((part == "..")) {
				if ((stack.length > 0)) {
					stack = stack.slice(0, (stack.length - 1))
				}
			} else 			if (((part != "") && (part != "."))) {
				stack = stack.concat([part])
			}
			part = ""
		} else {
			part = part + path[i]
		}
		i = (i + 1)
	}
	let result: string = "/"
	let j: number = 0
	while ((j < stack.length)) {
		result = result + stack[j]
		if ((j < (stack.length - 1))) {
			result = result + "/"
		}
		j = (j + 1)
	}
	return result
}

function example_1(): void {
	if (!((simplifyPath("/home/") == "/home"))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((simplifyPath("/../") == "/"))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((simplifyPath("/home//foo/") == "/home/foo"))) { throw new Error('expect failed') }
}

function complex(): void {
	if (!((simplifyPath("/a/./b/../../c/") == "/c"))) { throw new Error('expect failed') }
}

function dots(): void {
	if (!((simplifyPath("/a/../../b/../c//.//") == "/c"))) { throw new Error('expect failed') }
}

function long(): void {
	if (!((simplifyPath("/a//b////c/d//././/..") == "/a/b/c"))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	complex()
	dots()
	long()
}
main()

