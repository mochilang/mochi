// Generated by Mochi TypeScript compiler

function deleteDuplicates(nums: Array<number>): Array<number> {
  let n: number = nums.length;
  let result: Array<number> = [];
  let i: number = 0;
  while (i < n) {
    let value: number = nums[i];
    let j: number = i + 1;
    while (j < n) {
      if (nums[j] == value) {
        j = j + 1;
      } else {
        break;
      }
    }
    if (j == i + 1) {
      result = result.concat([value]);
    }
    i = j;
  }
  return result;
}

function example_1(): void {
  if (!_equal(deleteDuplicates([1, 2, 3, 3, 4, 4, 5]), [1, 2, 5])) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!_equal(deleteDuplicates([1, 1, 1, 2, 3]), [2, 3])) {
    throw new Error("expect failed");
  }
}

function empty(): void {
  if (!_equal(deleteDuplicates([]), [])) {
    throw new Error("expect failed");
  }
}

function no_duplicates(): void {
  if (!_equal(deleteDuplicates([1, 2, 3]), [1, 2, 3])) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  empty();
  no_duplicates();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
