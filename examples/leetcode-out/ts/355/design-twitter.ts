// Generated by Mochi TypeScript compiler

function newTwitter() : Twitter {
	return {tweets: {}, follows: {}, time: 0}
}

function postTweet(t: Twitter, userId: number, tweetId: number) : Twitter {
	let tweets: Record<number, Array<Tweet>> = t.tweets
	let list: Array<any> = []
	if (Object.prototype.hasOwnProperty.call(tweets, String(userId))) {
		list = tweets[userId]
	}
	let time: number = (t.time + 1)
	list = [{id: tweetId, time: time}].concat(list)
	tweets[userId] = list
	return {tweets: tweets, follows: t.follows, time: time}
}

function getNewsFeed(t: Twitter, userId: number) : Array<number> {
	let all: Array<any> = []
	if (Object.prototype.hasOwnProperty.call(t.tweets, String(userId))) {
		all = all.concat(t.tweets[userId])
	}
	if (Object.prototype.hasOwnProperty.call(t.follows, String(userId))) {
		for (const fKey of Object.keys(t.follows[userId])) {
			const f: number = Number(fKey)
			if (Object.prototype.hasOwnProperty.call(t.tweets, String(f))) {
				all = all.concat(t.tweets[f])
			}
		}
	}
	let sorted: Array<any> = (() => {
	const _src = all;
	let _items = [];
	for (const tw of _src) {
		_items.push(tw);
	}
	let _pairs = _items.map(it => { const tw = it; return {item: it, key: (-tw.time)}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	const _res = [];
	for (const tw of _items) {
		_res.push(tw)
	}
	return _res;
})()
	let feed: Array<number> = []
	let i: number = 0
	while (((i < sorted.length) && (i < 10))) {
		let t: any = sorted[i]
		feed = feed.concat([t.id])
		i = (i + 1)
	}
	return feed
}

function follow(t: Twitter, followerId: number, followeeId: number) : Twitter {
	let follows: Record<number, Record<number, boolean>> = t.follows
	let set: Record<number, boolean> = {}
	if (Object.prototype.hasOwnProperty.call(follows, String(followerId))) {
		set = follows[followerId]
	}
	set[followeeId] = true
	follows[followerId] = set
	return {tweets: t.tweets, follows: follows, time: t.time}
}

function unfollow(t: Twitter, followerId: number, followeeId: number) : Twitter {
	let follows: Record<number, Record<number, boolean>> = t.follows
	if (Object.prototype.hasOwnProperty.call(follows, String(followerId))) {
		let set: Record<number, boolean> = follows[followerId]
		if (Object.prototype.hasOwnProperty.call(set, String(followeeId))) {
			set = removeKey(set, followeeId)
			follows[followerId] = set
		}
	}
	return {tweets: t.tweets, follows: follows, time: t.time}
}

function removeKey(m: Record<number, boolean>, k: number) : Record<number, boolean> {
	let out: Record<number, boolean> = {}
	for (const keyKey of Object.keys(m)) {
		const key: number = Number(keyKey)
		if ((key != k)) {
			out[key] = m[key]
		}
	}
	return out
}

function example(): void {
	let tw: Twitter = newTwitter()
	tw = postTweet(tw, 1, 5)
	if (!(_equal(getNewsFeed(tw, 1), [5]))) { throw new Error('expect failed') }
	tw = follow(tw, 1, 2)
	tw = postTweet(tw, 2, 6)
	if (!(_equal(getNewsFeed(tw, 1).slice(0, 2), [6, 5]))) { throw new Error('expect failed') }
	tw = unfollow(tw, 1, 2)
	if (!(_equal(getNewsFeed(tw, 1), [5]))) { throw new Error('expect failed') }
}

function empty_feed(): void {
	let tw: Twitter = newTwitter()
	if (!(_equal(getNewsFeed(tw, 1), []))) { throw new Error('expect failed') }
}

function multiple_tweets(): void {
	let tw: Twitter = newTwitter()
	tw = postTweet(tw, 1, 101)
	tw = postTweet(tw, 1, 102)
	if (!(_equal(getNewsFeed(tw, 1), [102, 101]))) { throw new Error('expect failed') }
}

function main(): void {
	type Tweet = {
		id: number;
		time: number;
	}
	type Twitter = {
		tweets: Record<number, Array<any>>;
		follows: Record<number, Record<number, boolean>>;
		time: number;
	}
	example()
	empty_feed()
	multiple_tweets()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

