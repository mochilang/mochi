// Generated by Mochi TypeScript compiler

function combine(n: number, k: number): Array<Array<number>> {
  let result: Array<Array<number>> = [];
  function backtrack(start: number, path: Array<number>): void {
    if (path.length == k) {
      result = result.concat([path]);
    } else {
      let i: number = start;
      while (i <= n) {
        backtrack(i + 1, path.concat([i]));
        i = i + 1;
      }
    }
  }
  backtrack(1, []);
  return result;
}

function example_1(): void {
  if (
    !_equal(combine(4, 2), [
      [1, 2],
      [1, 3],
      [1, 4],
      [2, 3],
      [2, 4],
      [3, 4],
    ])
  ) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!_equal(combine(1, 1), [[1]])) {
    throw new Error("expect failed");
  }
}

function n___3__k___3(): void {
  if (!_equal(combine(3, 3), [[1, 2, 3]])) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  n___3__k___3();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
