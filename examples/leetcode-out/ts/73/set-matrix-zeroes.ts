// Generated by Mochi TypeScript compiler

function setZeroes(matrix: Array<Array<number>>): Array<Array<number>> {
  let rows: number = matrix.length;
  if (rows == 0) {
    return matrix;
  }
  let cols: number = matrix[0].length;
  let zeroRows: Array<boolean> = [];
  let zeroCols: Array<boolean> = [];
  let r: number = 0;
  while (r < rows) {
    zeroRows = zeroRows.concat([false]);
    r = r + 1;
  }
  let c: number = 0;
  while (c < cols) {
    zeroCols = zeroCols.concat([false]);
    c = c + 1;
  }
  let i: number = 0;
  while (i < rows) {
    let j: number = 0;
    while (j < cols) {
      if (matrix[i][j] == 0) {
        zeroRows[i] = true;
        zeroCols[j] = true;
      }
      j = j + 1;
    }
    i = i + 1;
  }
  i = 0;
  while (i < rows) {
    let j: number = 0;
    while (j < cols) {
      if (zeroRows[i] || zeroCols[j]) {
        matrix[i][j] = 0;
      }
      j = j + 1;
    }
    i = i + 1;
  }
  return matrix;
}

function example_1(): void {
  let m: Array<Array<number>> = [
    [1, 1, 1],
    [1, 0, 1],
    [1, 1, 1],
  ];
  setZeroes(m);
  if (
    !_equal(m, [
      [1, 0, 1],
      [0, 0, 0],
      [1, 0, 1],
    ])
  ) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  let m: Array<Array<number>> = [
    [0, 1, 2, 0],
    [3, 4, 5, 2],
    [1, 3, 1, 5],
  ];
  setZeroes(m);
  if (
    !_equal(m, [
      [0, 0, 0, 0],
      [0, 4, 5, 0],
      [0, 3, 1, 0],
    ])
  ) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
