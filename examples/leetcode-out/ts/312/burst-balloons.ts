// Generated by Mochi TypeScript compiler

function maxCoins(nums: Array<number>): number {
  let arr: Array<number> = [1];
  (globalThis as any).arr = arr;
  arr = arr.concat(nums);
  arr = arr.concat([1]);
  let n: number = arr.length;
  (globalThis as any).n = n;
  let dp: Array<Array<number>> = [];
  (globalThis as any).dp = dp;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < n)) {
    let row: Array<number> = [];
    (globalThis as any).row = row;
    let j: number = 0;
    (globalThis as any).j = j;
    while ((j < n)) {
      row = row.concat([0]);
      j = j + 1;
    }
    dp = dp.concat([row]);
    i = i + 1;
  }
  let length: number = 2;
  (globalThis as any).length = length;
  while ((length < n)) {
    let left: number = 0;
    (globalThis as any).left = left;
    while (((left + length) < n)) {
      let right: number = left + length;
      (globalThis as any).right = right;
      let k: number = left + 1;
      (globalThis as any).k = k;
      while ((k < right)) {
        let coins: number =
          (((arr[left] * arr[k]) * arr[right]) + dp[left][k]) + dp[k][right];
        (globalThis as any).coins = coins;
        if ((coins > dp[left][right])) {
          dp[left][right] = coins;
        }
        k = k + 1;
      }
      left = left + 1;
    }
    length = length + 1;
  }
  return dp[0][n - 1];
}

function test_example_1(): void {
  if (
    !(maxCoins([
      3,
      1,
      5,
      8,
    ]) == 167)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(maxCoins([
      1,
      5,
    ]) == 10)
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
}
main();
