// Generated by Mochi TypeScript compiler

function longestConsecutive(
  lefts: Array<number>,
  rights: Array<number>,
  values: Array<number>,
  root: number,
): number {
  if ((root == (-1))) {
    return 0;
  }
  function dfs(node: number, parentVal: number, length: number): number {
    if ((node == (-1))) {
      return length;
    }
    let curr: number = 1;
    (globalThis as any).curr = curr;
    if ((values[node] == (parentVal + 1))) {
      curr = length + 1;
    }
    let leftLen: number = dfs(lefts[node], values[node], curr);
    (globalThis as any).leftLen = leftLen;
    let rightLen: number = dfs(rights[node], values[node], curr);
    (globalThis as any).rightLen = rightLen;
    let best: number = curr;
    (globalThis as any).best = best;
    if ((leftLen > best)) {
      best = leftLen;
    }
    if ((rightLen > best)) {
      best = rightLen;
    }
    return best;
  }
  return dfs(root, values[root] - 1, 0);
}

function test_simple_chain(): void {
  if (!(longestConsecutive(lefts1, rights1, values1, root1) == 2)) {
    throw new Error("expect failed");
  }
}

function test_increasing_right(): void {
  if (!(longestConsecutive(lefts2, rights2, values2, root2) == 4)) {
    throw new Error("expect failed");
  }
}

function test_mixed_values(): void {
  if (!(longestConsecutive(lefts3, rights3, values3, root3) == 2)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  let lefts1: Array<number> = [
    1,
    -1,
    -1,
  ];
  (globalThis as any).lefts1 = lefts1;
  let rights1: Array<number> = [
    2,
    -1,
    -1,
  ];
  (globalThis as any).rights1 = rights1;
  let values1: Array<number> = [
    1,
    2,
    3,
  ];
  (globalThis as any).values1 = values1;
  let root1: number = 0;
  (globalThis as any).root1 = root1;
  let lefts2: Array<number> = [
    -1,
    2,
    -1,
    -1,
    -1,
    -1,
  ];
  (globalThis as any).lefts2 = lefts2;
  let rights2: Array<number> = [
    1,
    4,
    3,
    5,
    -1,
    -1,
  ];
  (globalThis as any).rights2 = rights2;
  let values2: Array<number> = [
    1,
    2,
    3,
    4,
    5,
    6,
  ];
  (globalThis as any).values2 = values2;
  let root2: number = 0;
  (globalThis as any).root2 = root2;
  let lefts3: Array<number> = [
    1,
    3,
    -1,
    -1,
  ];
  (globalThis as any).lefts3 = lefts3;
  let rights3: Array<number> = [
    2,
    -1,
    -1,
    -1,
  ];
  (globalThis as any).rights3 = rights3;
  let values3: Array<number> = [
    3,
    2,
    4,
    1,
  ];
  (globalThis as any).values3 = values3;
  let root3: number = 0;
  (globalThis as any).root3 = root3;
  test_simple_chain();
  test_increasing_right();
  test_mixed_values();
}
main();
