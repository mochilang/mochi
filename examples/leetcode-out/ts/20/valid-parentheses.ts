// Generated by Mochi TypeScript compiler

function isValid(s: string): boolean {
  let stack: Array<string> = [];
  (globalThis as any).stack = stack;
  let n: number = s.length;
  (globalThis as any).n = n;
  for (let i: number = 0; i < n; i++) {
    let c: string = _indexString(s, i);
    (globalThis as any).c = c;
    if ((c == "(")) {
      stack = stack.concat([")"]);
    } else if ((c == "[")) {
      stack = stack.concat(["]"]);
    } else if ((c == "{")) {
      stack = stack.concat(["}"]);
    } else {
      if ((stack.length == 0)) {
        return false;
      }
      let top: string = stack[stack.length - 1];
      (globalThis as any).top = top;
      if ((top != c)) {
        return false;
      }
      stack = stack.slice(0, stack.length - 1);
    }
  }
  return (stack.length == 0);
}

function test_example_1(): void {
  if (!(isValid("()") == true)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(isValid("()[]{}") == true)) throw new Error("expect failed");
}

function test_example_3(): void {
  if (!(isValid("(]") == false)) throw new Error("expect failed");
}

function test_example_4(): void {
  if (!(isValid("([)]") == false)) throw new Error("expect failed");
}

function test_example_5(): void {
  if (!(isValid("{[]}") == true)) throw new Error("expect failed");
}

function test_empty_string(): void {
  if (!(isValid("") == true)) throw new Error("expect failed");
}

function test_single_closing(): void {
  if (!(isValid("]") == false)) throw new Error("expect failed");
}

function test_unmatched_open(): void {
  if (!(isValid("((") == false)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_example_4();
  test_example_5();
  test_empty_string();
  test_single_closing();
  test_unmatched_open();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
