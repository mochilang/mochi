// Generated by Mochi TypeScript compiler

function isValid(s: string) : boolean {
	let stack: Array<any> = []
	let n: number = s.length
	for (let i: number = 0; i < n; i++) {
		let c: string = s[i]
		if ((c == "(")) {
			stack = stack.concat([")"])
		} else 		if ((c == "[")) {
			stack = stack.concat(["]"])
		} else 		if ((c == "{")) {
			stack = stack.concat(["}"])
		} else {
			if ((stack.length == 0)) {
				return false
			}
			let top: any = stack[(stack.length - 1)]
			if (!_equal(top, c)) {
				return false
			}
			stack = stack.slice(0, (stack.length - 1))
		}
	}
	return (stack.length == 0)
}

function example_1(): void {
	if (!((isValid("()") == true))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((isValid("()[]{}") == true))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((isValid("(]") == false))) { throw new Error('expect failed') }
}

function example_4(): void {
	if (!((isValid("([)]") == false))) { throw new Error('expect failed') }
}

function example_5(): void {
	if (!((isValid("{[]}") == true))) { throw new Error('expect failed') }
}

function empty_string(): void {
	if (!((isValid("") == true))) { throw new Error('expect failed') }
}

function single_closing(): void {
	if (!((isValid("]") == false))) { throw new Error('expect failed') }
}

function unmatched_open(): void {
	if (!((isValid("((") == false))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	example_4()
	example_5()
	empty_string()
	single_closing()
	unmatched_open()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

