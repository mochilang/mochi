// Generated by Mochi TypeScript compiler

function wordBreak(s: string, wordDict: Array<string>) : boolean {
	let dict: Record<string, boolean> = {}
	for (const w of wordDict) {
		dict[w] = true
	}
	let n: number = s.length
	let dp: Array<boolean> = []
	let i: number = 0
	while ((i <= n)) {
		dp = dp.concat([false])
		i = (i + 1)
	}
	dp[0] = true
	let idx: number = 1
	while ((idx <= n)) {
		let j: number = 0
		while ((j < idx)) {
			if (dp[j]) {
				let part: string = s.slice(j, idx)
				if (Object.prototype.hasOwnProperty.call(dict, String(part))) {
					dp[idx] = true
					break
				}
			}
			j = (j + 1)
		}
		idx = (idx + 1)
	}
	return dp[n]
}

function example_1(): void {
	if (!((wordBreak("leetcode", ["leet", "code"]) == true))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((wordBreak("applepenapple", ["apple", "pen"]) == true))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((wordBreak("catsandog", ["cats", "dog", "sand", "and", "cat"]) == false))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
}
main()

