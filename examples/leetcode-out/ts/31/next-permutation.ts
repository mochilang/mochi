// Generated by Mochi TypeScript compiler

function nextPermutation(nums: Array<number>): Array<number> {
  let i: number = nums.length - 2;
  while (i >= 0 && nums[i] >= nums[i + 1]) {
    i = i - 1;
  }
  if (i >= 0) {
    let j: number = nums.length - 1;
    while (nums[j] <= nums[i]) {
      j = j - 1;
    }
    let temp: number = nums[i];
    nums[i] = nums[j];
    nums[j] = temp;
  }
  let start: number = i + 1;
  let end: number = nums.length - 1;
  while (start < end) {
    let temp: number = nums[start];
    nums[start] = nums[end];
    nums[end] = temp;
    start = start + 1;
    end = end - 1;
  }
  return nums;
}

function example_1(): void {
  if (!_equal(nextPermutation([1, 2, 3]), [1, 3, 2])) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!_equal(nextPermutation([3, 2, 1]), [1, 2, 3])) {
    throw new Error("expect failed");
  }
}

function example_3(): void {
  if (!_equal(nextPermutation([1, 1, 5]), [1, 5, 1])) {
    throw new Error("expect failed");
  }
}

function single_element(): void {
  if (!_equal(nextPermutation([1]), [1])) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  example_3();
  single_element();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
