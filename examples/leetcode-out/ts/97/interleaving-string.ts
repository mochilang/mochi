// Generated by Mochi TypeScript compiler

function isInterleave(s1: string, s2: string, s3: string) : boolean {
	let m: number = s1.length
	let n: number = s2.length
	if (((m + n) != s3.length)) {
		return false
	}
	let dp: Array<Array<boolean>> = []
	let i: number = 0
	while ((i <= m)) {
		let row: Array<boolean> = []
		let j: number = 0
		while ((j <= n)) {
			row = row.concat([false])
			j = (j + 1)
		}
		dp = dp.concat([row])
		i = (i + 1)
	}
	dp[0][0] = true
	i = 0
	while ((i <= m)) {
		let j: number = 0
		while ((j <= n)) {
			if ((i > 0)) {
				if ((dp[(i - 1)][j] && (s1[(i - 1)] == s3[((i + j) - 1)]))) {
					dp[i][j] = true
				}
			}
			if ((j > 0)) {
				if ((dp[i][(j - 1)] && (s2[(j - 1)] == s3[((i + j) - 1)]))) {
					dp[i][j] = true
				}
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return dp[m][n]
}

function example_1(): void {
	if (!((isInterleave("aabcc", "dbbca", "aadbbcbcac") == true))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((isInterleave("aabcc", "dbbca", "aadbbbaccc") == false))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!((isInterleave("", "", "") == true))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	empty()
}
main()

