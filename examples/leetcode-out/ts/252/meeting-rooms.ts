// Generated by Mochi TypeScript compiler

function canAttendMeetings(intervals: Array<Array<number>>): boolean {
  let sorted: Array<Array<number>> = (() => {
    const _src = intervals;
    let _items = [];
    for (const iv of _src) {
      _items.push(iv);
    }
    let _pairs = _items.map((it) => {
      const iv = it;
      return { item: it, key: iv[0] };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const iv of _items) {
      _res.push(iv);
    }
    return _res;
  })();
  (globalThis as any).sorted = sorted;
  let prevEnd: number = -2147483648;
  (globalThis as any).prevEnd = prevEnd;
  for (const iv of sorted) {
    let start: number = iv[0];
    (globalThis as any).start = start;
    let end: number = iv[1];
    (globalThis as any).end = end;
    if ((start < prevEnd)) {
      return false;
    }
    prevEnd = end;
  }
  return true;
}

function test_example_1(): void {
  if (
    !(canAttendMeetings([
      [
        0,
        30,
      ],
      [
        5,
        10,
      ],
      [
        15,
        20,
      ],
    ]) == false)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(canAttendMeetings([
      [
        7,
        10,
      ],
      [
        2,
        4,
      ],
    ]) == true)
  ) throw new Error("expect failed");
}

function test_empty(): void {
  if (!(canAttendMeetings([]) == true)) throw new Error("expect failed");
}

function test_single_interval(): void {
  if (
    !(canAttendMeetings([
      [
        1,
        2,
      ],
    ]) == true)
  ) throw new Error("expect failed");
}

function test_zero_length(): void {
  if (
    !(canAttendMeetings([
      [
        1,
        1,
      ],
      [
        2,
        2,
      ],
    ]) == true)
  ) throw new Error("expect failed");
}

function test_overlap_at_end(): void {
  if (
    !(canAttendMeetings([
      [
        1,
        4,
      ],
      [
        4,
        5,
      ],
    ]) == true)
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_empty();
  test_single_interval();
  test_zero_length();
  test_overlap_at_end();
}
main();
