// Generated by Mochi TypeScript compiler

function canAttendMeetings(intervals: Array<Array<number>>): boolean {
  let sorted: Array<any> = (() => {
    const _src = intervals;
    let _items = [];
    for (const iv of _src) {
      _items.push(iv);
    }
    let _pairs = _items.map((it) => {
      const iv = it;
      return { item: it, key: iv[0] };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string")
        return ak < bk ? -1 : ak > bk ? 1 : 0;
      return String(ak) < String(bk) ? -1 : String(ak) > String(bk) ? 1 : 0;
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const iv of _items) {
      _res.push(iv);
    }
    return _res;
  })();
  let prevEnd: number = -2147483648;
  for (const iv of sorted) {
    let start: any = (iv as any)[0];
    let end: any = (iv as any)[1];
    if (start < prevEnd) {
      return false;
    }
    prevEnd = end;
  }
  return true;
}

function example_1(): void {
  if (
    !(
      canAttendMeetings([
        [0, 30],
        [5, 10],
        [15, 20],
      ]) == false
    )
  ) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (
    !(
      canAttendMeetings([
        [7, 10],
        [2, 4],
      ]) == true
    )
  ) {
    throw new Error("expect failed");
  }
}

function empty(): void {
  if (!(canAttendMeetings([]) == true)) {
    throw new Error("expect failed");
  }
}

function single_interval(): void {
  if (!(canAttendMeetings([[1, 2]]) == true)) {
    throw new Error("expect failed");
  }
}

function zero_length(): void {
  if (
    !(
      canAttendMeetings([
        [1, 1],
        [2, 2],
      ]) == true
    )
  ) {
    throw new Error("expect failed");
  }
}

function overlap_at_end(): void {
  if (
    !(
      canAttendMeetings([
        [1, 4],
        [4, 5],
      ]) == true
    )
  ) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  empty();
  single_interval();
  zero_length();
  overlap_at_end();
}
main();
