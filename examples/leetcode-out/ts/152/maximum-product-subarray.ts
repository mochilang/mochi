// Generated by Mochi TypeScript compiler

function max(a: number, b: number) : number {
	if ((a > b)) {
		return a
	}
	return b
}

function min(a: number, b: number) : number {
	if ((a < b)) {
		return a
	}
	return b
}

function maxProduct(nums: Array<number>) : number {
	let n: number = nums.length
	let maxEnding: number = nums[0]
	let minEnding: number = nums[0]
	let result: number = nums[0]
	let i: number = 1
	while ((i < n)) {
		let v: number = nums[i]
		if ((v < 0)) {
			let temp: number = maxEnding
			maxEnding = minEnding
			minEnding = temp
		}
		maxEnding = max(v, (maxEnding * v))
		minEnding = min(v, (minEnding * v))
		if ((maxEnding > result)) {
			result = maxEnding
		}
		i = (i + 1)
	}
	return result
}

function example_1(): void {
	if (!((maxProduct([2, 3, (-2), 4]) == 6))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((maxProduct([(-2), 0, (-1)]) == 0))) { throw new Error('expect failed') }
}

function negatives(): void {
	if (!((maxProduct([(-2), 3, (-4)]) == 24))) { throw new Error('expect failed') }
}

function single(): void {
	if (!((maxProduct([(-2)]) == ((-2))))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	negatives()
	single()
}
main()

