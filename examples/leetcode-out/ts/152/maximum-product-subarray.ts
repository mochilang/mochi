// Generated by Mochi TypeScript compiler

function max(a: number, b: number): number {
  if ((a > b)) {
    return a;
  }
  return b;
}

function min(a: number, b: number): number {
  if ((a < b)) {
    return a;
  }
  return b;
}

function maxProduct(nums: Array<number>): number {
  let n: number = nums.length;
  (globalThis as any).n = n;
  let maxEnding: number = nums[0];
  (globalThis as any).maxEnding = maxEnding;
  let minEnding: number = nums[0];
  (globalThis as any).minEnding = minEnding;
  let result: number = nums[0];
  (globalThis as any).result = result;
  let i: number = 1;
  (globalThis as any).i = i;
  while ((i < n)) {
    let v: number = nums[i];
    (globalThis as any).v = v;
    if ((v < 0)) {
      let temp: number = maxEnding;
      (globalThis as any).temp = temp;
      maxEnding = minEnding;
      minEnding = temp;
    }
    maxEnding = _max(v, maxEnding * v);
    minEnding = _min(v, minEnding * v);
    if ((maxEnding > result)) {
      result = maxEnding;
    }
    i = i + 1;
  }
  return result;
}

function test_example_1(): void {
  if (
    !(maxProduct([
      2,
      3,
      -2,
      4,
    ]) == 6)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(maxProduct([
      -2,
      0,
      -1,
    ]) == 0)
  ) throw new Error("expect failed");
}

function test_negatives(): void {
  if (
    !(maxProduct([
      -2,
      3,
      -4,
    ]) == 24)
  ) throw new Error("expect failed");
}

function test_single(): void {
  if (!(maxProduct([-2]) == (-2))) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_negatives();
  test_single();
}
function _max(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m = Number(list[0]);
  for (const n of list) {
    const num = Number(n);
    if (num > m) m = num;
  }
  return m;
}

function _min(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m = Number(list[0]);
  for (const n of list) {
    const num = Number(n);
    if (num < m) m = num;
  }
  return m;
}

main();
