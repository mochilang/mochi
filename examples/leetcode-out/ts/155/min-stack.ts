// Generated by Mochi TypeScript compiler

function newStack() : MinStack {
	return {items: [], mins: []}
}

function push(s: MinStack, x: number) : MinStack {
	let items: Array<number> = s.items.concat([x])
	let mins: Array<number> = s.mins
	if ((mins.length == 0)) {
		mins = [x]
	} else {
		let m: number = mins[(mins.length - 1)]
		if ((x <= m)) {
			mins = mins.concat([x])
		}
	}
	return {items: items, mins: mins}
}

function pop(s: MinStack) : MinStack {
	let items: Array<number> = s.items
	let mins: Array<number> = s.mins
	let val: number = items[(items.length - 1)]
	items = items.slice(0, (items.length - 1))
	if ((val == mins[(mins.length - 1)])) {
		mins = mins.slice(0, (mins.length - 1))
	}
	return {items: items, mins: mins}
}

function top(s: MinStack) : number {
	return s.items[(s.items.length - 1)]
}

function getMin(s: MinStack) : number {
	return s.mins[(s.mins.length - 1)]
}

function example(): void {
	let s: MinStack = newStack()
	s = push(s, (-2))
	s = push(s, 0)
	s = push(s, (-3))
	if (!((getMin(s) == ((-3))))) { throw new Error('expect failed') }
	s = pop(s)
	if (!((top(s) == 0))) { throw new Error('expect failed') }
	if (!((getMin(s) == ((-2))))) { throw new Error('expect failed') }
}

function single_element(): void {
	let s: MinStack = newStack()
	s = push(s, 4)
	if (!((top(s) == 4))) { throw new Error('expect failed') }
	if (!((getMin(s) == 4))) { throw new Error('expect failed') }
}

function increasing(): void {
	let s: MinStack = newStack()
	s = push(s, 1)
	s = push(s, 2)
	s = push(s, 3)
	if (!((getMin(s) == 1))) { throw new Error('expect failed') }
	s = pop(s)
	if (!((getMin(s) == 1))) { throw new Error('expect failed') }
}

function main(): void {
	type MinStack = {
		items: Array<number>;
		mins: Array<number>;
	}
	example()
	single_element()
	increasing()
}
main()

