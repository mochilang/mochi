// Generated by Mochi TypeScript compiler

type RandomPicker = {
  values: Array<number>;
  seed: number;
};

type PickResult = {
  picker: RandomPicker;
  value: number;
};

function newRandomPicker(values: Array<number>, seed: number): RandomPicker {
  return {
    values: values,
    seed: seed,
  };
}

function nextSeed(seed: number): number {
  return (((seed * 1103515245) + 12345) % 2147483648);
}

function getRandom(p: RandomPicker): PickResult {
  let seed2: number = nextSeed(p.seed);
  (globalThis as any).seed2 = seed2;
  let idx: number = seed2 % p.values.length;
  (globalThis as any).idx = idx;
  let np: RandomPicker = {
    values: p.values,
    seed: seed2,
  };
  (globalThis as any).np = np;
  return {
    picker: np,
    value: p.values[idx],
  };
}

function test_single_element(): void {
  let p: RandomPicker = newRandomPicker([5], 1);
  (globalThis as any).p = p;
  let r1: PickResult = getRandom(p);
  (globalThis as any).r1 = r1;
  if (!(r1.value == 5)) throw new Error("expect failed");
  let r2: PickResult = getRandom(r1.picker);
  (globalThis as any).r2 = r2;
  if (!(r2.value == 5)) throw new Error("expect failed");
}

function test_deterministic_sequence(): void {
  let p: RandomPicker = newRandomPicker([
    10,
    20,
    30,
  ], 42);
  (globalThis as any).p = p;
  let r1: PickResult = getRandom(p);
  (globalThis as any).r1 = r1;
  if (!(r1.value == 10)) throw new Error("expect failed");
  p = r1.picker;
  let r2: PickResult = getRandom(p);
  (globalThis as any).r2 = r2;
  if (!(r2.value == 30)) throw new Error("expect failed");
  p = r2.picker;
  let r3: PickResult = getRandom(p);
  (globalThis as any).r3 = r3;
  if (!(r3.value == 30)) throw new Error("expect failed");
}

function main(): void {
  test_single_element();
  test_deterministic_sequence();
}
main();
