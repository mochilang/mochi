// Generated by Mochi TypeScript compiler

function newRandomPicker(values: Array<number>, seed: number) : RandomPicker {
	return {values: values, seed: seed}
}

function nextSeed(seed: number) : number {
	return ((((seed * 1103515245) + 12345)) % 2147483648)
}

function getRandom(p: RandomPicker) : PickResult {
	let seed2: number = nextSeed(p.seed)
	let idx: number = (seed2 % p.values.length)
	let np: RandomPicker = {values: p.values, seed: seed2}
	return {picker: np, value: p.values[idx]}
}

function single_element(): void {
	let p: RandomPicker = newRandomPicker([5], 1)
	let r1: PickResult = getRandom(p)
	if (!((r1.value == 5))) { throw new Error('expect failed') }
	let r2: PickResult = getRandom(r1.picker)
	if (!((r2.value == 5))) { throw new Error('expect failed') }
}

function deterministic_sequence(): void {
	let p: RandomPicker = newRandomPicker([10, 20, 30], 42)
	let r1: PickResult = getRandom(p)
	if (!((r1.value == 10))) { throw new Error('expect failed') }
	p = r1.picker
	let r2: PickResult = getRandom(p)
	if (!((r2.value == 30))) { throw new Error('expect failed') }
	p = r2.picker
	let r3: PickResult = getRandom(p)
	if (!((r3.value == 30))) { throw new Error('expect failed') }
}

function main(): void {
	type RandomPicker = {
		values: Array<number>;
		seed: number;
	}
	type PickResult = {
		picker: any;
		value: number;
	}
	single_element()
	deterministic_sequence()
}
main()

