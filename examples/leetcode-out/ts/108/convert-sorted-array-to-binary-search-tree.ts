// Generated by Mochi TypeScript compiler

type Leaf = {
  __name: "Leaf";
};

type _Node = {
  __name: "Node";
  left: Tree;
  value: number;
  right: Tree;
};

type Tree = Leaf | _Node;

function sortedArrayToBST(nums: Array<number>): Tree {
  function helper(lo: number, hi: number): Tree {
    if ((lo > hi)) {
      return { __name: "Leaf" };
    }
    let mid: number = Math.trunc((lo + hi) / 2);
    (globalThis as any).mid = mid;
    return {
      __name: "Node",
      left: helper(lo, mid - 1),
      value: nums[mid],
      right: helper(mid + 1, hi),
    };
  }
  return helper(0, nums.length - 1);
}

function test_example_1(): void {
  let tree: Tree = sortedArrayToBST([
    -10,
    -3,
    0,
    5,
    9,
  ]);
  (globalThis as any).tree = tree;
  if (
    !((() => {
      const _t = tree;
      if (_t.__name === "Node") return ((v) => _equal(v, 0))(_t.value);
      return false;
    })())
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  let tree: Tree = sortedArrayToBST([
    1,
    3,
  ]);
  (globalThis as any).tree = tree;
  if (
    !((() => {
      const _t = tree;
      if (_t.__name === "Node") {return ((v) => (_equal(v, 1) || _equal(v, 3)))(
          _t.value,
        );}
      return false;
    })())
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
