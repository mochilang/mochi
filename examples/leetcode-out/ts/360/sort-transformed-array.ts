// Generated by Mochi TypeScript compiler

function sortTransformedArray(
  nums: Array<number>,
  a: number,
  b: number,
  c: number,
): Array<number> {
  let n: number = nums.length;
  let result: Array<number> = [];
  let i: number = 0;
  while (i < n) {
    result = result.concat([0]);
    i = i + 1;
  }
  function transform(x: number): number {
    return a * x * x + b * x + c;
  }
  let left: number = 0;
  let right: number = n - 1;
  if (a >= 0) {
    let idx: number = n - 1;
    while (left <= right) {
      let lv: number = transform(nums[left]);
      let rv: number = transform(nums[right]);
      if (lv > rv) {
        result[idx] = lv;
        left = left + 1;
      } else {
        result[idx] = rv;
        right = right - 1;
      }
      idx = idx - 1;
    }
  } else {
    let idx: number = 0;
    while (left <= right) {
      let lv: number = transform(nums[left]);
      let rv: number = transform(nums[right]);
      if (lv < rv) {
        result[idx] = lv;
        left = left + 1;
      } else {
        result[idx] = rv;
        right = right - 1;
      }
      idx = idx + 1;
    }
  }
  return result;
}

function example_1(): void {
  if (!_equal(sortTransformedArray([-4, -2, 2, 4], 1, 3, 5), [3, 9, 15, 33])) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (
    !_equal(sortTransformedArray([-4, -2, 2, 4], -1, 3, 5), [-23, -5, 1, 7])
  ) {
    throw new Error("expect failed");
  }
}

function a_zero(): void {
  if (!_equal(sortTransformedArray([0, 1, 2, 3], 0, 2, 1), [1, 3, 5, 7])) {
    throw new Error("expect failed");
  }
}

function single_element(): void {
  if (!_equal(sortTransformedArray([2], 2, -3, 1), [3])) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  a_zero();
  single_element();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
