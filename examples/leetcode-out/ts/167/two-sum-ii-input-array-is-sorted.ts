// Generated by Mochi TypeScript compiler

function twoSum(numbers: Array<number>, target: number): Array<number> {
  let left: number = 0;
  (globalThis as any).left = left;
  let right: number = numbers.length - 1;
  (globalThis as any).right = right;
  while ((left < right)) {
    let sum: number = numbers[left] + numbers[right];
    (globalThis as any).sum = sum;
    if ((sum == target)) {
      return [
        left + 1,
        right + 1,
      ];
    } else if ((sum < target)) {
      left = left + 1;
    } else {
      right = right - 1;
    }
  }
  return [];
}

function test_example_1(): void {
  if (
    !(_equal(
      twoSum([
        2,
        7,
        11,
        15,
      ], 9),
      [
        1,
        2,
      ],
    ))
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(_equal(
      twoSum([
        2,
        3,
        4,
      ], 6),
      [
        1,
        3,
      ],
    ))
  ) throw new Error("expect failed");
}

function test_example_3(): void {
  if (
    !(_equal(
      twoSum([
        -1,
        0,
      ], -1),
      [
        1,
        2,
      ],
    ))
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
