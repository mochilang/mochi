// Generated by Mochi TypeScript compiler

function findMin(nums: Array<number>): number {
  let left: number = 0;
  (globalThis as any).left = left;
  let right: number = nums.length - 1;
  (globalThis as any).right = right;
  while ((left < right)) {
    let mid: number = left + Math.trunc((right - left) / 2);
    (globalThis as any).mid = mid;
    if ((nums[mid] > nums[right])) {
      left = mid + 1;
    } else {
      right = mid;
    }
  }
  return nums[left];
}

function test_example_1(): void {
  if (
    !(findMin([
      3,
      4,
      5,
      1,
      2,
    ]) == 1)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(findMin([
      4,
      5,
      6,
      7,
      0,
      1,
      2,
    ]) == 0)
  ) throw new Error("expect failed");
}

function test_example_3(): void {
  if (
    !(findMin([
      11,
      13,
      15,
      17,
    ]) == 11)
  ) throw new Error("expect failed");
}

function test_single_element(): void {
  if (!(findMin([5]) == 5)) throw new Error("expect failed");
}

function test_two_elements(): void {
  if (
    !(findMin([
      2,
      1,
    ]) == 1)
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_single_element();
  test_two_elements();
}
main();
