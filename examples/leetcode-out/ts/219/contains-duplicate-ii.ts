// Generated by Mochi TypeScript compiler

function containsNearbyDuplicate(nums: Array<number>, k: number): boolean {
  let index: Record<number, number> = {};
  (globalThis as any).index = index;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < nums.length)) {
    let num: number = nums[i];
    (globalThis as any).num = num;
    if (Object.prototype.hasOwnProperty.call(index, String(num))) {
      let j: number = index[num];
      (globalThis as any).j = j;
      if (((i - j) <= k)) {
        return true;
      }
    }
    index[num] = i;
    i = i + 1;
  }
  return false;
}

function test_example_1(): void {
  if (
    !(containsNearbyDuplicate([
      1,
      2,
      3,
      1,
    ], 3) == true)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(containsNearbyDuplicate([
      1,
      0,
      1,
      1,
    ], 1) == true)
  ) throw new Error("expect failed");
}

function test_example_3(): void {
  if (
    !(containsNearbyDuplicate([
      1,
      2,
      3,
      1,
      2,
      3,
    ], 2) == false)
  ) throw new Error("expect failed");
}

function test_no_duplicates(): void {
  if (
    !(containsNearbyDuplicate([
      1,
      2,
      3,
      4,
      5,
    ], 3) == false)
  ) throw new Error("expect failed");
}

function test_duplicate_at_distance_k(): void {
  if (
    !(containsNearbyDuplicate([
      1,
      2,
      3,
      1,
    ], 2) == false)
  ) throw new Error("expect failed");
}

function test_duplicate_with_k_zero(): void {
  if (
    !(containsNearbyDuplicate([
      1,
      1,
    ], 0) == false)
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_no_duplicates();
  test_duplicate_at_distance_k();
  test_duplicate_with_k_zero();
}
main();
