// Generated by Mochi TypeScript compiler

function minCostCutCake(
  m: number,
  n: number,
  horizontalCut: Array<number>,
  verticalCut: Array<number>,
): number {
  let h: Array<number> = (() => {
    const _src = horizontalCut;
    let _items = [];
    for (const x of _src) {
      _items.push(x);
    }
    let _pairs = _items.map((it) => {
      const x = it;
      return { item: it, key: (-x) };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const x of _items) {
      _res.push(x);
    }
    return _res;
  })();
  (globalThis as any).h = h;
  let v: Array<number> = (() => {
    const _src = verticalCut;
    let _items = [];
    for (const x of _src) {
      _items.push(x);
    }
    let _pairs = _items.map((it) => {
      const x = it;
      return { item: it, key: (-x) };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const x of _items) {
      _res.push(x);
    }
    return _res;
  })();
  (globalThis as any).v = v;
  let hi: number = 0;
  (globalThis as any).hi = hi;
  let vi: number = 0;
  (globalThis as any).vi = vi;
  let hSegments: number = 1;
  (globalThis as any).hSegments = hSegments;
  let vSegments: number = 1;
  (globalThis as any).vSegments = vSegments;
  let cost: number = 0;
  (globalThis as any).cost = cost;
  while (((hi < h.length) && (vi < v.length))) {
    if ((h[hi] > v[vi])) {
      cost = cost + (h[hi] * vSegments);
      hSegments = hSegments + 1;
      hi = hi + 1;
    } else {
      cost = cost + (v[vi] * hSegments);
      vSegments = vSegments + 1;
      vi = vi + 1;
    }
  }
  while ((hi < h.length)) {
    cost = cost + (h[hi] * vSegments);
    hi = hi + 1;
  }
  while ((vi < v.length)) {
    cost = cost + (v[vi] * hSegments);
    vi = vi + 1;
  }
  return cost;
}

function test_example_1(): void {
  if (
    !(minCostCutCake(3, 2, [
      1,
      3,
    ], [5]) == 13)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(minCostCutCake(2, 2, [7], [4]) == 15)) throw new Error("expect failed");
}

function test_mixed_order(): void {
  if (
    !(minCostCutCake(4, 3, [
      2,
      1,
      3,
    ], [
      1,
      4,
    ]) == 20)
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_mixed_order();
}
main();
