// Generated by Mochi TypeScript compiler

function threeSumClosest(nums: Array<number>, target: number) : number {
	let sorted: Array<any> = (() => {
	const _src = nums;
	let _items = [];
	for (const n of _src) {
		_items.push(n);
	}
	let _pairs = _items.map(it => { const n = it; return {item: it, key: n}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	const _res = [];
	for (const n of _items) {
		_res.push(n)
	}
	return _res;
})()
	let n: number = sorted.length
	let best: any = ((sorted[0] + sorted[1]) + sorted[2])
	for (let i: number = 0; i < n; i++) {
		let left: number = (i + 1)
		let right: number = (n - 1)
		while ((left < right)) {
			let sum: any = ((sorted[i] + sorted[left]) + sorted[right])
			if (_equal(sum, target)) {
				return target
			}
			let diff: number = 0
			if ((sum > target)) {
				diff = (sum - target)
			} else {
				diff = (target - sum)
			}
			let bestDiff: number = 0
			if ((best > target)) {
				bestDiff = (best - target)
			} else {
				bestDiff = (target - best)
			}
			if ((diff < bestDiff)) {
				best = sum
			}
			if ((sum < target)) {
				left = (left + 1)
			} else {
				right = (right - 1)
			}
		}
	}
	return best
}

function example_1(): void {
	if (!((threeSumClosest([(-1), 2, 1, (-4)], 1) == 2))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((threeSumClosest([0, 0, 0], 1) == 0))) { throw new Error('expect failed') }
}

function additional(): void {
	if (!((threeSumClosest([1, 1, 1, 0], (-100)) == 2))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	additional()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

