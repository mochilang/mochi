// Generated by Mochi TypeScript compiler

function maxProfit(k: number, prices: Array<number>) : number {
	let n: number = prices.length
	if (((n == 0) || (k == 0))) {
		return 0
	}
	if ((k >= Math.trunc(n / 2))) {
		let profit: number = 0
		for (let i: number = 1; i < n; i++) {
			let diff: number = (prices[i] - prices[(i - 1)])
			if ((diff > 0)) {
				profit = (profit + diff)
			}
		}
		return profit
	}
	let buy: Array<number> = []
	let sell: Array<number> = []
	let idx: number = 0
	while ((idx < k)) {
		buy = buy.concat([(0 - prices[0])])
		sell = sell.concat([0])
		idx = (idx + 1)
	}
	let i: number = 1
	while ((i < n)) {
		let price: number = prices[i]
		let b0: number = (0 - price)
		if ((b0 > buy[0])) {
			buy[0] = b0
		}
		let s0: number = (buy[0] + price)
		if ((s0 > sell[0])) {
			sell[0] = s0
		}
		let j: number = 1
		while ((j < k)) {
			let b: number = (sell[(j - 1)] - price)
			if ((b > buy[j])) {
				buy[j] = b
			}
			let s: number = (buy[j] + price)
			if ((s > sell[j])) {
				sell[j] = s
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return sell[(k - 1)]
}

function example_1(): void {
	if (!((maxProfit(2, [2, 4, 1]) == 2))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((maxProfit(2, [3, 2, 6, 5, 0, 3]) == 7))) { throw new Error('expect failed') }
}

function empty_prices(): void {
	if (!((maxProfit(3, []) == 0))) { throw new Error('expect failed') }
}

function unlimited_transactions(): void {
	if (!((maxProfit(100, [1, 2, 3, 4, 5]) == 4))) { throw new Error('expect failed') }
}

function zero_k(): void {
	if (!((maxProfit(0, [1, 3, 2, 8]) == 0))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	empty_prices()
	unlimited_transactions()
	zero_k()
}
main()

