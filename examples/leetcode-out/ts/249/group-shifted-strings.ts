// Generated by Mochi TypeScript compiler

function ord(ch: string): number {
  let letters: Record<string, number> = {
    "a": 0,
    "b": 1,
    "c": 2,
    "d": 3,
    "e": 4,
    "f": 5,
    "g": 6,
    "h": 7,
    "i": 8,
    "j": 9,
    "k": 10,
    "l": 11,
    "m": 12,
    "n": 13,
    "o": 14,
    "p": 15,
    "q": 16,
    "r": 17,
    "s": 18,
    "t": 19,
    "u": 20,
    "v": 21,
    "w": 22,
    "x": 23,
    "y": 24,
    "z": 25,
  };
  (globalThis as any).letters = letters;
  if (Object.prototype.hasOwnProperty.call(letters, String(ch))) {
    return letters[ch];
  }
  return 0;
}

function patternKey(s: string): string {
  if ((s.length == 0)) {
    return "";
  }
  let key: string = "";
  (globalThis as any).key = key;
  let base: number = ord(_indexString(s, 0));
  (globalThis as any).base = base;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < s.length)) {
    let diff: number = ((ord(_indexString(s, i)) - base) + 26) % 26;
    (globalThis as any).diff = diff;
    key = key + String(diff) + ",";
    i = i + 1;
  }
  return key;
}

function groupStrings(strings: Array<string>): Array<Array<string>> {
  let groups: Record<string, Array<string>> = {};
  (globalThis as any).groups = groups;
  for (const s of strings) {
    let k: string = patternKey(s);
    (globalThis as any).k = k;
    let lst: Array<string> = [];
    (globalThis as any).lst = lst;
    if (Object.prototype.hasOwnProperty.call(groups, String(k))) {
      lst = groups[k];
    }
    lst = lst.concat([s]);
    groups[k] = lst;
  }
  let result: Array<Array<string>> = [];
  (globalThis as any).result = result;
  for (const k of Object.keys(groups)) {
    result = result.concat([groups[k]]);
  }
  return result;
}

function test_example_1(): void {
  let input: Array<string> = [
    "abc",
    "bcd",
    "acef",
    "xyz",
    "az",
    "ba",
    "a",
    "z",
  ];
  (globalThis as any).input = input;
  let res: Array<Array<string>> = groupStrings(input);
  (globalThis as any).res = res;
  if (!(res.length == 4)) throw new Error("expect failed");
}

function test_single(): void {
  if (!(groupStrings(["a"])[0][0] == "a")) throw new Error("expect failed");
}

function test_empty_list(): void {
  let res: Array<Array<string>> = groupStrings([]);
  (globalThis as any).res = res;
  if (!(res.length == 0)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_single();
  test_empty_list();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
