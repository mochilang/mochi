// Generated by Mochi TypeScript compiler

function firstUniqChar(s: string): number {
  let counts: Record<string, number> = {};
  let i: number = 0;
  while (i < s.length) {
    let ch: string = s[i];
    if (Object.prototype.hasOwnProperty.call(counts, String(ch))) {
      counts[ch] = counts[ch] + 1;
    } else {
      counts[ch] = 1;
    }
    i = i + 1;
  }
  i = 0;
  while (i < s.length) {
    let ch: string = s[i];
    if (counts[ch] == 1) {
      return i;
    }
    i = i + 1;
  }
  return -1;
}

function example_1(): void {
  if (!(firstUniqChar("leetcode") == 0)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(firstUniqChar("loveleetcode") == 2)) {
    throw new Error("expect failed");
  }
}

function example_3(): void {
  if (!(firstUniqChar("aabb") == -1)) {
    throw new Error("expect failed");
  }
}

function empty_string(): void {
  if (!(firstUniqChar("") == -1)) {
    throw new Error("expect failed");
  }
}

function single_char(): void {
  if (!(firstUniqChar("z") == 0)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  example_3();
  empty_string();
  single_char();
}
main();
