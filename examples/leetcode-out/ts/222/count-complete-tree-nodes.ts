// Generated by Mochi TypeScript compiler

type Leaf = {
  __name: "Leaf";
};

type _Node = {
  __name: "Node";
  left: Tree;
  value: number;
  right: Tree;
};

type Tree = Leaf | _Node;

function countNodes(root: Tree): number {
  return (() => {
    const _t = root;
    if (_t.__name === "Leaf") return 0;
    if (_t.__name === "Node") {
      return ((l, r) => ((countNodes(l) + countNodes(r)) + 1))(
        _t.left,
        _t.right,
      );
    }
    return undefined;
  })();
}

function test_example_1(): void {
  if (!(countNodes(example1) == 6)) throw new Error("expect failed");
}

function test_single_node(): void {
  if (
    !(countNodes({
      __name: "Node",
      left: { __name: "Leaf" },
      value: 1,
      right: { __name: "Leaf" },
    }) == 1)
  ) throw new Error("expect failed");
}

function test_empty(): void {
  if (!(countNodes({ __name: "Leaf" }) == 0)) throw new Error("expect failed");
}

function main(): void {
  let example1: _Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 4,
        right: { __name: "Leaf" },
      },
      value: 2,
      right: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 5,
        right: { __name: "Leaf" },
      },
    },
    value: 1,
    right: {
      __name: "Node",
      left: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 6,
        right: { __name: "Leaf" },
      },
      value: 3,
      right: { __name: "Leaf" },
    },
  };
  (globalThis as any).example1 = example1;
  test_example_1();
  test_single_node();
  test_empty();
}
main();
