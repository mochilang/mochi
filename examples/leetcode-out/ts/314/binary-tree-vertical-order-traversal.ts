// Generated by Mochi TypeScript compiler

let example1: Record<string, any> = Node(
  Node(Leaf(), 9, Leaf()),
  3,
  Node(Node(Leaf(), 15, Leaf()), 20, Node(Leaf(), 7, Leaf())),
);

let example2: Record<string, any> = Node(
  Node(Node(Leaf(), 4, Leaf()), 2, Node(Leaf(), 5, Leaf())),
  1,
  Node(Node(Leaf(), 6, Leaf()), 3, Node(Leaf(), 7, Leaf())),
);

function Leaf(): Record<string, any> {
  return { __name: "Leaf" };
}

function Node(
  left: Record<string, any>,
  value: number,
  right: Record<string, any>,
): Record<string, any> {
  return { __name: "Node", left: left, value: value, right: right };
}

function isLeaf(t: Record<string, any>): boolean {
  return _equal(t["__name"], "Leaf");
}

function left(t: Record<string, any>): Record<string, any> {
  return t["left"];
}

function right(t: Record<string, any>): Record<string, any> {
  return t["right"];
}

function value(t: Record<string, any>): number {
  return t["value"];
}

function verticalOrder(root: Record<string, any>): Array<Array<number>> {
  if (isLeaf(root)) {
    return [];
  }
  let queue: Array<Record<string, any>> = [root];
  let cols: Array<number> = [0];
  let table: Record<number, Array<number>> = {};
  let minCol: number = 0;
  let maxCol: number = 0;
  let i: number = 0;
  while (i < queue.length) {
    let node: Record<string, any> = queue[i];
    let col: number = cols[i];
    if (Object.prototype.hasOwnProperty.call(table, String(col))) {
      table[col] = table[col].concat([value(node)]);
    } else {
      table[col] = [value(node)];
    }
    let l: Record<string, any> = left(node);
    let r: Record<string, any> = right(node);
    if (!isLeaf(l)) {
      queue = queue.concat([l]);
      cols = cols.concat([col - 1]);
    }
    if (!isLeaf(r)) {
      queue = queue.concat([r]);
      cols = cols.concat([col + 1]);
    }
    if (col < minCol) {
      minCol = col;
    }
    if (col > maxCol) {
      maxCol = col;
    }
    i = i + 1;
  }
  let result: Array<Array<number>> = [];
  let c: number = minCol;
  while (c <= maxCol) {
    if (Object.prototype.hasOwnProperty.call(table, String(c))) {
      result = result.concat([table[c]]);
    }
    c = c + 1;
  }
  return result;
}

function example_1(): void {
  if (!_equal(verticalOrder(example1), [[9], [3, 15], [20], [7]])) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!_equal(verticalOrder(example2), [[4], [2], [1, 5, 6], [3], [7]])) {
    throw new Error("expect failed");
  }
}

function single_node(): void {
  if (!_equal(verticalOrder(Node(Leaf(), 1, Leaf())), [[1]])) {
    throw new Error("expect failed");
  }
}

function empty(): void {
  if (!_equal(verticalOrder(Leaf()), [])) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  single_node();
  empty();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
