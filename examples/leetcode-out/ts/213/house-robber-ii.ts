// Generated by Mochi TypeScript compiler

function robLinear(nums: Array<number>, start: number, end: number) : number {
	let prev1: number = 0
	let prev2: number = 0
	let i: number = start
	while ((i <= end)) {
		let pick: number = (nums[i] + prev2)
		let curr: number = pick
		if ((prev1 > curr)) {
			curr = prev1
		}
		prev2 = prev1
		prev1 = curr
		i = (i + 1)
	}
	return prev1
}

function rob(nums: Array<number>) : number {
	let n: number = nums.length
	if ((n == 0)) {
		return 0
	}
	if ((n == 1)) {
		return nums[0]
	}
	let option1: number = robLinear(nums, 0, (n - 2))
	let option2: number = robLinear(nums, 1, (n - 1))
	if ((option1 > option2)) {
		return option1
	}
	return option2
}

function example_1(): void {
	if (!((rob([2, 3, 2]) == 3))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((rob([1, 2, 3, 1]) == 4))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((rob([1, 2, 3]) == 3))) { throw new Error('expect failed') }
}

function single(): void {
	if (!((rob([5]) == 5))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!((rob([]) == 0))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	single()
	empty()
}
main()

