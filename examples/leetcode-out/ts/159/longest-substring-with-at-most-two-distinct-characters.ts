// Generated by Mochi TypeScript compiler

function lengthOfLongestSubstringTwoDistinct(s: string) : number {
	let left: number = 0
	let best: number = 0
	let counts: Record<string, number> = {}
	let distinct: number = 0
	let right: number = 0
	while ((right < s.length)) {
		let ch: string = s[right]
		if (Object.prototype.hasOwnProperty.call(counts, String(ch))) {
			if ((counts[ch] == 0)) {
				distinct = (distinct + 1)
			}
			counts[ch] = (counts[ch] + 1)
		} else {
			counts[ch] = 1
			distinct = (distinct + 1)
		}
		while ((distinct > 2)) {
			let leftCh: string = s[left]
			counts[leftCh] = (counts[leftCh] - 1)
			if ((counts[leftCh] == 0)) {
				distinct = (distinct - 1)
			}
			left = (left + 1)
		}
		let length: number = ((right - left) + 1)
		if ((length > best)) {
			best = length
		}
		right = (right + 1)
	}
	return best
}

function example_1(): void {
	if (!((lengthOfLongestSubstringTwoDistinct("eceba") == 3))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((lengthOfLongestSubstringTwoDistinct("ccaabbb") == 5))) { throw new Error('expect failed') }
}

function empty_string(): void {
	if (!((lengthOfLongestSubstringTwoDistinct("") == 0))) { throw new Error('expect failed') }
}

function single_char(): void {
	if (!((lengthOfLongestSubstringTwoDistinct("aaaa") == 4))) { throw new Error('expect failed') }
}

function three_distinct(): void {
	if (!((lengthOfLongestSubstringTwoDistinct("abcabc") == 2))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	empty_string()
	single_char()
	three_distinct()
}
main()

