// Generated by Mochi TypeScript compiler

function maxSubArrayLen(nums: Array<number>, k: number): number {
  let prefix: number = 0;
  (globalThis as any).prefix = prefix;
  let firstIndex: Record<number, number> = {};
  (globalThis as any).firstIndex = firstIndex;
  firstIndex[0] = -1;
  let best: number = 0;
  (globalThis as any).best = best;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < nums.length)) {
    prefix = prefix + nums[i];
    let target: number = prefix - k;
    (globalThis as any).target = target;
    if (Object.prototype.hasOwnProperty.call(firstIndex, String(target))) {
      let start: number = firstIndex[target];
      (globalThis as any).start = start;
      let length: number = i - start;
      (globalThis as any).length = length;
      if ((length > best)) {
        best = length;
      }
    }
    if ((!(Object.prototype.hasOwnProperty.call(firstIndex, String(prefix))))) {
      firstIndex[prefix] = i;
    }
    i = i + 1;
  }
  return best;
}

function test_example_1(): void {
  if (
    !(maxSubArrayLen([
      1,
      -1,
      5,
      -2,
      3,
    ], 3) == 4)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(maxSubArrayLen([
      -2,
      -1,
      2,
      1,
    ], 1) == 2)
  ) throw new Error("expect failed");
}

function test_no_subarray(): void {
  if (
    !(maxSubArrayLen([
      1,
      2,
      3,
    ], 7) == 0)
  ) throw new Error("expect failed");
}

function test_entire_array(): void {
  if (
    !(maxSubArrayLen([
      1,
      2,
      3,
    ], 6) == 3)
  ) throw new Error("expect failed");
}

function test_single_negative(): void {
  if (!(maxSubArrayLen([-1], -1) == 1)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_no_subarray();
  test_entire_array();
  test_single_negative();
}
main();
