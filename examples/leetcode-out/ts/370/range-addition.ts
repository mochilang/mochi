// Generated by Mochi TypeScript compiler

let updates1: Array<Array<number>> = [[1, 3, 2], [2, 4, 3], [0, 2, (-2)]]

let res1: Array<number> = getModifiedArray(5, updates1)

let res2: Array<number> = getModifiedArray(3, [])

function getModifiedArray(n: number, updates: Array<Array<number>>) : Array<number> {
	let diff: Array<number> = []
	let i: number = 0
	while ((i < n)) {
		diff = diff.concat([0])
		i = (i + 1)
	}
	let m: number = updates.length
	let j: number = 0
	while ((j < m)) {
		let u: Array<number> = updates[j]
		let start: number = u[0]
		let end: number = u[1]
		let inc: number = u[2]
		diff[start] = (diff[start] + inc)
		if (((end + 1) < n)) {
			diff[(end + 1)] = (diff[(end + 1)] - inc)
		}
		j = (j + 1)
	}
	let result: Array<number> = []
	let sum: number = 0
	let k: number = 0
	while ((k < n)) {
		sum = (sum + diff[k])
		result = result.concat([sum])
		k = (k + 1)
	}
	return result
}

function example_1(): void {
	if (!((res1[0] == ((-2))))) { throw new Error('expect failed') }
	if (!((res1[1] == 0))) { throw new Error('expect failed') }
	if (!((res1[2] == 3))) { throw new Error('expect failed') }
	if (!((res1[3] == 5))) { throw new Error('expect failed') }
	if (!((res1[4] == 3))) { throw new Error('expect failed') }
}

function no_updates(): void {
	if (!((res2[0] == 0))) { throw new Error('expect failed') }
	if (!((res2[1] == 0))) { throw new Error('expect failed') }
	if (!((res2[2] == 0))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	no_updates()
}
main()

