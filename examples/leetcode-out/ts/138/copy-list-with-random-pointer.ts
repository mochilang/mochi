// Generated by Mochi TypeScript compiler

function copyRandomList(nodes: Array<Node>): Array<Node> {
  let result: Array<any> = [];
  for (const n of nodes) {
    result = result.concat([{ val: n.val, next: n.next, random: n.random }]);
  }
  return result;
}

function serialize(nodes: Array<Node>): Array<Array<number>> {
  let out: Array<Array<number>> = [];
  let i: number = 0;
  while (i < nodes.length) {
    let n: Node = nodes[i];
    out = out.concat([[n.val, n.random]]);
    i = i + 1;
  }
  return out;
}

function copy_list(): void {
  let original: Array<Node> = [
    { val: 7, next: 1, random: -1 },
    { val: 13, next: 2, random: 0 },
    { val: 11, next: 3, random: 4 },
    { val: 10, next: 4, random: 2 },
    { val: 1, next: -1, random: 0 },
  ];
  let copied: Array<Node> = copyRandomList(original);
  if (!_equal(serialize(copied), serialize(original))) {
    throw new Error("expect failed");
  }
}

function main(): void {
  type Node = {
    val: number;
    next: number;
    random: number;
  };
  copy_list();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
