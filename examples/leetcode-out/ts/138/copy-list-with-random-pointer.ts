// Generated by Mochi TypeScript compiler

type _Node = {
  val: number;
  next: number;
  random: number;
};

function copyRandomList(nodes: Array<_Node>): Array<_Node> {
  let result: Array<_Node> = [];
  (globalThis as any).result = result;
  for (const n of nodes) {
    result = result.concat([
      {
        val: n.val,
        next: n.next,
        random: n.random,
      },
    ]);
  }
  return result;
}

function serialize(nodes: Array<_Node>): Array<Array<number>> {
  let out: Array<Array<number>> = [];
  (globalThis as any).out = out;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < nodes.length)) {
    let n: _Node = nodes[i];
    (globalThis as any).n = n;
    out = out.concat([
      [
        n.val,
        n.random,
      ],
    ]);
    i = i + 1;
  }
  return out;
}

function test_copy_list(): void {
  let original: Array<_Node> = [
    {
      val: 7,
      next: 1,
      random: (-1),
    },
    {
      val: 13,
      next: 2,
      random: 0,
    },
    {
      val: 11,
      next: 3,
      random: 4,
    },
    {
      val: 10,
      next: 4,
      random: 2,
    },
    {
      val: 1,
      next: (-1),
      random: 0,
    },
  ];
  (globalThis as any).original = original;
  let copied: Array<_Node> = copyRandomList(original);
  (globalThis as any).copied = copied;
  if (!(_equal(serialize(copied), serialize(original)))) {
    throw new Error("expect failed");
  }
}

function main(): void {
  test_copy_list();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
