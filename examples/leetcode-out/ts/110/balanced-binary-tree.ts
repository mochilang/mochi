// Generated by Mochi TypeScript compiler

function max(a: number, b: number) : number {
	if ((a > b)) {
		return a
	} else {
		return b
	}
}

function abs(x: number) : number {
	if ((x < 0)) {
		return (-x)
	} else {
		return x
	}
}

function height(tree: Array<Node>, idx: number) : number {
	if ((idx == ((-1)))) {
		return 0
	}
	let node: Node = tree[idx]
	return (max(height(tree, node.left), height(tree, node.right)) + 1)
}

function balanced(tree: Array<Node>, idx: number) : boolean {
	if ((idx == ((-1)))) {
		return true
	}
	let node: Node = tree[idx]
	let lh: number = height(tree, node.left)
	let rh: number = height(tree, node.right)
	return ((balanced(tree, node.left) && balanced(tree, node.right)) && (abs((lh - rh)) <= 1))
}

function isBalanced(tree: Array<Node>, root: number) : boolean {
	return balanced(tree, root)
}

function example_1(): void {
	let tree: Array<any> = [{value: 3, left: 1, right: 2}, {value: 9, left: (-1), right: (-1)}, {value: 20, left: 3, right: 4}, {value: 15, left: (-1), right: (-1)}, {value: 7, left: (-1), right: (-1)}]
	if (!((isBalanced(tree, 0) == true))) { throw new Error('expect failed') }
}

function example_2(): void {
	let tree: Array<any> = [{value: 1, left: 1, right: 2}, {value: 2, left: 3, right: 4}, {value: 2, left: (-1), right: (-1)}, {value: 3, left: 5, right: 6}, {value: 3, left: (-1), right: (-1)}, {value: 4, left: (-1), right: (-1)}, {value: 4, left: (-1), right: (-1)}]
	if (!((isBalanced(tree, 0) == false))) { throw new Error('expect failed') }
}

function single_node(): void {
	let tree: Array<Node> = [{value: 1, left: (-1), right: (-1)}]
	if (!((isBalanced(tree, 0) == true))) { throw new Error('expect failed') }
}

function empty(): void {
	let empty: Array<any> = []
	if (!((isBalanced(empty, (-1)) == true))) { throw new Error('expect failed') }
}

function main(): void {
	type Node = {
		value: number;
		left: number;
		right: number;
	}
	example_1()
	example_2()
	single_node()
	empty()
}
main()

