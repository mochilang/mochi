// Generated by Mochi TypeScript compiler

type _Node = {
  value: number;
  left: number;
  right: number;
};

function max(a: number, b: number): number {
  if ((a > b)) {
    return a;
  } else {
    return b;
  }
}

function abs(x: number): number {
  if ((x < 0)) {
    return (-x);
  } else {
    return x;
  }
}

function height(tree: Array<_Node>, idx: number): number {
  if ((idx == (-1))) {
    return 0;
  }
  let node: _Node = tree[idx];
  (globalThis as any).node = node;
  return (_max(height(tree, node.left), height(tree, node.right)) + 1);
}

function balanced(tree: Array<_Node>, idx: number): boolean {
  if ((idx == (-1))) {
    return true;
  }
  let node: _Node = tree[idx];
  (globalThis as any).node = node;
  let lh: number = height(tree, node.left);
  (globalThis as any).lh = lh;
  let rh: number = height(tree, node.right);
  (globalThis as any).rh = rh;
  return ((balanced(tree, node.left) && balanced(tree, node.right)) &&
    (abs(lh - rh) <= 1));
}

function isBalanced(tree: Array<_Node>, root: number): boolean {
  return balanced(tree, root);
}

function test_example_1(): void {
  let tree: Array<_Node> = [
    {
      value: 3,
      left: 1,
      right: 2,
    },
    {
      value: 9,
      left: (-1),
      right: (-1),
    },
    {
      value: 20,
      left: 3,
      right: 4,
    },
    {
      value: 15,
      left: (-1),
      right: (-1),
    },
    {
      value: 7,
      left: (-1),
      right: (-1),
    },
  ];
  (globalThis as any).tree = tree;
  if (!(isBalanced(tree, 0) == true)) throw new Error("expect failed");
}

function test_example_2(): void {
  let tree: Array<_Node> = [
    {
      value: 1,
      left: 1,
      right: 2,
    },
    {
      value: 2,
      left: 3,
      right: 4,
    },
    {
      value: 2,
      left: (-1),
      right: (-1),
    },
    {
      value: 3,
      left: 5,
      right: 6,
    },
    {
      value: 3,
      left: (-1),
      right: (-1),
    },
    {
      value: 4,
      left: (-1),
      right: (-1),
    },
    {
      value: 4,
      left: (-1),
      right: (-1),
    },
  ];
  (globalThis as any).tree = tree;
  if (!(isBalanced(tree, 0) == false)) throw new Error("expect failed");
}

function test_single_node(): void {
  let tree: Array<_Node> = [
    {
      value: 1,
      left: (-1),
      right: (-1),
    },
  ];
  (globalThis as any).tree = tree;
  if (!(isBalanced(tree, 0) == true)) throw new Error("expect failed");
}

function test_empty(): void {
  let empty: Array<_Node> = [];
  (globalThis as any).empty = empty;
  if (!(isBalanced(empty, -1) == true)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_single_node();
  test_empty();
}
function _max(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m = Number(list[0]);
  for (const n of list) {
    const num = Number(n);
    if (num > m) m = num;
  }
  return m;
}

main();
