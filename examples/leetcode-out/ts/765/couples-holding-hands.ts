// Generated by Mochi TypeScript compiler

function minSwapsCouples(row: Array<number>): number {
  let n: number = row.length;
  (globalThis as any).n = n;
  let pos: Record<number, number> = {};
  (globalThis as any).pos = pos;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < n)) {
    pos[row[i]] = i;
    i = i + 1;
  }
  let swaps: number = 0;
  (globalThis as any).swaps = swaps;
  let j: number = 0;
  (globalThis as any).j = j;
  while ((j < n)) {
    let first: number = row[j];
    (globalThis as any).first = first;
    let partner: number = 0;
    (globalThis as any).partner = partner;
    if (((first % 2) == 0)) {
      partner = first + 1;
    } else {
      partner = first - 1;
    }
    let second: number = row[j + 1];
    (globalThis as any).second = second;
    if ((second != partner)) {
      let partnerIndex: number = pos[partner];
      (globalThis as any).partnerIndex = partnerIndex;
      row[partnerIndex] = second;
      pos[second] = partnerIndex;
      row[j + 1] = partner;
      pos[partner] = j + 1;
      swaps = swaps + 1;
    }
    j = j + 2;
  }
  return swaps;
}

function test_example_1(): void {
  if (
    !(minSwapsCouples([
      0,
      2,
      1,
      3,
    ]) == 1)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(minSwapsCouples([
      3,
      2,
      0,
      1,
    ]) == 0)
  ) throw new Error("expect failed");
}

function test_scrambled(): void {
  if (
    !(minSwapsCouples([
      4,
      1,
      0,
      3,
      2,
      5,
    ]) == 2)
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_scrambled();
}
main();
