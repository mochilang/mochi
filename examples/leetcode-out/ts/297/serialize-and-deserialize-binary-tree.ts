// Generated by Mochi TypeScript compiler

function parseInt(s: string): number {
  let result: number = 0;
  (globalThis as any).result = result;
  let i: number = 0;
  (globalThis as any).i = i;
  let digits: Record<string, number> = {
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  };
  (globalThis as any).digits = digits;
  while ((i < s.length)) {
    result = (result * 10) + digits[_indexString(s, i)];
    i = i + 1;
  }
  return result;
}

function splitComma(s: string): Array<string> {
  let parts: Array<string> = [];
  (globalThis as any).parts = parts;
  let current: string = "";
  (globalThis as any).current = current;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < s.length)) {
    let c: string = _indexString(s, i);
    (globalThis as any).c = c;
    if ((c == ",")) {
      parts = parts.concat([current]);
      current = "";
    } else {
      current = current + c;
    }
    i = i + 1;
  }
  parts = parts.concat([current]);
  return parts;
}

function join(parts: Array<string>, sep: string): string {
  let result: string = "";
  (globalThis as any).result = result;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < parts.length)) {
    if ((i > 0)) {
      result = result + sep;
    }
    result = result + parts[i];
    i = i + 1;
  }
  return result;
}

function Leaf(): Record<string, any> {
  return { "__name": "Leaf" };
}

function _Node(
  left: Record<string, any>,
  value: number,
  right: Record<string, any>,
): Record<string, any> {
  return {
    "__name": "Node",
    "left": left,
    "value": value,
    "right": right,
  };
}

function isLeaf(t: Record<string, any>): boolean {
  return _equal(t["__name"], "Leaf");
}

function left(t: Record<string, any>): Record<string, any> {
  return t["left"];
}

function right(t: Record<string, any>): Record<string, any> {
  return t["right"];
}

function value(t: Record<string, any>): number {
  return t["value"];
}

function serialize(root: Record<string, any>): string {
  if (isLeaf(root)) {
    return "";
  }
  let queue: Array<Record<string, any>> = [root];
  (globalThis as any).queue = queue;
  let parts: Array<string> = [];
  (globalThis as any).parts = parts;
  while ((queue.length > 0)) {
    let node: Record<string, any> = queue[0];
    (globalThis as any).node = node;
    queue = queue.slice(1, queue.length);
    if (isLeaf(node)) {
      parts = parts.concat(["null"]);
    } else {
      parts = parts.concat([String(value(node))]);
      queue = queue.concat([left(node)]);
      queue = queue.concat([right(node)]);
    }
  }
  let i: number = parts.length - 1;
  (globalThis as any).i = i;
  while (((i >= 0) && (parts[i] == "null"))) {
    i = i - 1;
  }
  parts = parts.slice(0, i + 1);
  return join(parts, ",");
}

function deserialize(data: string): Record<string, any> {
  if ((data == "")) {
    return Leaf();
  }
  let vals: Array<string> = splitComma(data);
  (globalThis as any).vals = vals;
  function build(i: number): Record<string, any> {
    if ((i >= vals.length)) {
      return Leaf();
    }
    let v: string = vals[i];
    (globalThis as any).v = v;
    if ((v == "null")) {
      return Leaf();
    }
    let leftNode: Record<string, any> = build((2 * i) + 1);
    (globalThis as any).leftNode = leftNode;
    let rightNode: Record<string, any> = build((2 * i) + 2);
    (globalThis as any).rightNode = rightNode;
    return _Node(leftNode, parseInt(v), rightNode);
  }
  return build(0);
}

function test_serialize_round_trip(): void {
  let s: string = serialize(example);
  (globalThis as any).s = s;
  let t: Record<string, any> = deserialize(s);
  (globalThis as any).t = t;
  if (!(serialize(t) == s)) throw new Error("expect failed");
}

function test_empty_tree(): void {
  if (!(serialize(Leaf()) == "")) throw new Error("expect failed");
  if (!(isLeaf(deserialize("")) == true)) throw new Error("expect failed");
}

function test_single_node(): void {
  let s: string = serialize(_Node(Leaf(), 7, Leaf()));
  (globalThis as any).s = s;
  if (!(s == "7")) throw new Error("expect failed");
  if (!(serialize(deserialize(s)) == "7")) throw new Error("expect failed");
}

function main(): void {
  let example: Record<string, any> = _Node(
    _Node(Leaf(), 2, Leaf()),
    1,
    _Node(_Node(Leaf(), 4, Leaf()), 3, _Node(Leaf(), 5, Leaf())),
  );
  (globalThis as any).example = example;
  test_serialize_round_trip();
  test_empty_tree();
  test_single_node();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
