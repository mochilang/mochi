// Generated by Mochi TypeScript compiler

function fractionToDecimal(numerator: number, denominator: number) : string {
	if ((denominator == 0)) {
		return ""
	}
	if ((numerator == 0)) {
		return "0"
	}
	let result: string = ""
	let minus: string = String((-1))[0]
	let negative: boolean = false
	if (((((numerator < 0) && (denominator > 0))) || (((numerator > 0) && (denominator < 0))))) {
		negative = true
	}
	if ((numerator < 0)) {
		numerator = (-numerator)
	}
	if ((denominator < 0)) {
		denominator = (-denominator)
	}
	let integerPart: number = Math.trunc(numerator / denominator)
	result = String(integerPart)
	let remainder: number = (numerator % denominator)
	if ((remainder == 0)) {
		if (negative) {
			return minus + result
		}
		return result
	}
	result = result + "."
	let mapIndex: Record<number, number> = {}
	let decimal: string = ""
	while ((remainder != 0)) {
		if (Object.prototype.hasOwnProperty.call(mapIndex, String(remainder))) {
			let idx: number = mapIndex[remainder]
			let prefix: string = decimal.slice(0, idx)
			let suffix: string = decimal.slice(idx, decimal.length)
			decimal = prefix + "(" + suffix + ")"
			break
		}
		mapIndex[remainder] = decimal.length
		remainder = (remainder * 10)
		let digit: number = Math.trunc(remainder / denominator)
		decimal = decimal + String(digit)
		remainder = (remainder % denominator)
	}
	result = result + decimal
	if (negative) {
		return minus + result
	}
	return result
}

function example_1(): void {
	if (!((fractionToDecimal(1, 2) == "0.5"))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((fractionToDecimal(2, 1) == "2"))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((fractionToDecimal(2, 3) == "0.(6)"))) { throw new Error('expect failed') }
}

function negative(): void {
	if (!((fractionToDecimal((-50), 8) == "-6.25"))) { throw new Error('expect failed') }
}

function repeat_zeros(): void {
	if (!((fractionToDecimal(1, 6) == "0.1(6)"))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	negative()
	repeat_zeros()
}
main()

