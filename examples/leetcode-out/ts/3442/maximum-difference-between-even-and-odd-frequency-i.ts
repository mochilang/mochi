// Generated by Mochi TypeScript compiler

function maxDiffEvenOdd(s: string): number {
  let letters: Array<string> = [];
  (globalThis as any).letters = letters;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < s.length)) {
    letters = letters.concat([_indexString(s, i)]);
    i = i + 1;
  }
  let counts: Array<Record<string, any>> = (() => {
    const _src = letters;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    let _items = [];
    for (const ch of _src) {
      const _key = ch;
      const _ks = String(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push(ch);
    }
    let _groups = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "ch": g.key,
        "freq": _count(g),
      });
    }
    return _res;
  })();
  (globalThis as any).counts = counts;
  let maxOdd: number = -1;
  (globalThis as any).maxOdd = maxOdd;
  let minEven: number = 1000000;
  (globalThis as any).minEven = minEven;
  for (const item of counts) {
    if (_equal(item.freq % 2, 1)) {
      if ((item.freq > maxOdd)) {
        maxOdd = item.freq;
      }
    } else {
      if ((item.freq < minEven)) {
        minEven = item.freq;
      }
    }
  }
  return (maxOdd - minEven);
}

function test_example_1(): void {
  if (!(maxDiffEvenOdd("aaaaabbc") == 3)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(maxDiffEvenOdd("abcabcab") == 1)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
}
function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
