// Generated by Mochi TypeScript compiler

function permuteUnique(nums: Array<number>): Array<Array<number>> {
  let arr: Array<any> = (() => {
    const _src = nums;
    let _items = [];
    for (const x of _src) {
      _items.push(x);
    }
    let _pairs = _items.map((it) => {
      const x = it;
      return { item: it, key: x };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string")
        return ak < bk ? -1 : ak > bk ? 1 : 0;
      return String(ak) < String(bk) ? -1 : String(ak) > String(bk) ? 1 : 0;
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const x of _items) {
      _res.push(x);
    }
    return _res;
  })();
  let n: number = arr.length;
  let result: Array<Array<number>> = [];
  let used: Record<number, boolean> = {};
  function backtrack(path: Array<number>): void {
    if (path.length == n) {
      result = result.concat([path]);
    } else {
      let i: number = 0;
      while (i < n) {
        let currentUsed: boolean = false;
        if (Object.prototype.hasOwnProperty.call(used, String(i))) {
          currentUsed = used[i];
        }
        if (currentUsed) {
          i = i + 1;
          continue;
        }
        if (i > 0 && _equal(arr[i], arr[i - 1])) {
          let prevUsed: boolean = false;
          if (Object.prototype.hasOwnProperty.call(used, String(i - 1))) {
            prevUsed = used[i - 1];
          }
          if (!prevUsed) {
            i = i + 1;
            continue;
          }
        }
        used[i] = true;
        backtrack(path.concat([arr[i]]));
        used[i] = false;
        i = i + 1;
      }
    }
  }
  backtrack([]);
  return result;
}

function example_1(): void {
  if (
    !_equal(permuteUnique([1, 1, 2]), [
      [1, 1, 2],
      [1, 2, 1],
      [2, 1, 1],
    ])
  ) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (
    !_equal(permuteUnique([1, 2, 3]), [
      [1, 2, 3],
      [1, 3, 2],
      [2, 1, 3],
      [2, 3, 1],
      [3, 1, 2],
      [3, 2, 1],
    ])
  ) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
