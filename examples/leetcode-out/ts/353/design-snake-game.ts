// Generated by Mochi TypeScript compiler

function newSnakeGame(
  width: number,
  height: number,
  food: Array<Array<number>>,
): SnakeGame {
  let start: Array<number> = [0, 0];
  return {
    width: width,
    height: height,
    food: food,
    index: 0,
    body: [start],
    occupied: { [String(start[0]) + "," + String(start[1])]: true },
  };
}

function move(game: SnakeGame, dir: string): MoveResult {
  let head: Array<number> = game.body[game.body.length - 1];
  let r: number = head[0];
  let c: number = head[1];
  if (dir == "U") {
    r = r - 1;
  } else if (dir == "D") {
    r = r + 1;
  } else if (dir == "L") {
    c = c - 1;
  } else if (dir == "R") {
    c = c + 1;
  } else {
    return { game: game, score: -1 };
  }
  if (r < 0 || r >= game.height || c < 0 || c >= game.width) {
    return { game: game, score: -1 };
  }
  let newBody: Array<Array<number>> = game.body;
  let newOcc: Record<string, boolean> = game.occupied;
  let newIndex: number = game.index;
  let eat: boolean =
    newIndex < game.food.length &&
    game.food[newIndex][0] == r &&
    game.food[newIndex][1] == c;
  if (!eat) {
    let tail: Array<number> = newBody[0];
    let tk: string = String(tail[0]) + "," + String(tail[1]);
    newBody = newBody.slice(1, newBody.length);
    newOcc[tk] = false;
  } else {
    newIndex = newIndex + 1;
  }
  let key: string = String(r) + "," + String(c);
  if (Object.prototype.hasOwnProperty.call(newOcc, String(key))) {
    if (newOcc[key] == true) {
      return { game: game, score: -1 };
    }
  }
  newBody = newBody.concat([[r, c]]);
  newOcc[key] = true;
  let newGame: SnakeGame = {
    width: game.width,
    height: game.height,
    food: game.food,
    index: newIndex,
    body: newBody,
    occupied: newOcc,
  };
  return { game: newGame, score: newIndex };
}

function example(): void {
  let g: SnakeGame = newSnakeGame(3, 2, [
    [1, 2],
    [0, 1],
  ]);
  let r1: MoveResult = move(g, "R");
  g = r1.game;
  if (!(r1.score == 0)) {
    throw new Error("expect failed");
  }
  let r2: MoveResult = move(g, "D");
  g = r2.game;
  if (!(r2.score == 0)) {
    throw new Error("expect failed");
  }
  let r3: MoveResult = move(g, "R");
  g = r3.game;
  if (!(r3.score == 1)) {
    throw new Error("expect failed");
  }
  let r4: MoveResult = move(g, "U");
  g = r4.game;
  if (!(r4.score == 1)) {
    throw new Error("expect failed");
  }
  let r5: MoveResult = move(g, "L");
  g = r5.game;
  if (!(r5.score == 2)) {
    throw new Error("expect failed");
  }
  let r6: MoveResult = move(g, "U");
  g = r6.game;
  if (!(r6.score == 0 - 1)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  type SnakeGame = {
    width: number;
    height: number;
    food: Array<Array<number>>;
    index: number;
    body: Array<Array<number>>;
    occupied: Record<string, boolean>;
  };
  type MoveResult = {
    game: any;
    score: number;
  };
  example();
}
main();
