// Generated by Mochi TypeScript compiler

type SnakeGame = {
  width: number;
  height: number;
  food: Array<Array<number>>;
  index: number;
  body: Array<Array<number>>;
  occupied: Record<string, boolean>;
};

type MoveResult = {
  game: SnakeGame;
  score: number;
};

function newSnakeGame(
  width: number,
  height: number,
  food: Array<Array<number>>,
): SnakeGame {
  let start: Array<number> = [
    0,
    0,
  ];
  (globalThis as any).start = start;
  return {
    width: width,
    height: height,
    food: food,
    index: 0,
    body: [start],
    occupied: { [String(start[0]) + "," + String(start[1])]: true },
  };
}

function move(game: SnakeGame, dir: string): MoveResult {
  let head: Array<number> = game.body[game.body.length - 1];
  (globalThis as any).head = head;
  let r: number = head[0];
  (globalThis as any).r = r;
  let c: number = head[1];
  (globalThis as any).c = c;
  if ((dir == "U")) {
    r = r - 1;
  } else if ((dir == "D")) {
    r = r + 1;
  } else if ((dir == "L")) {
    c = c - 1;
  } else if ((dir == "R")) {
    c = c + 1;
  } else {
    return {
      game: game,
      score: (-1),
    };
  }
  if (((((r < 0) || (r >= game.height)) || (c < 0)) || (c >= game.width))) {
    return {
      game: game,
      score: (-1),
    };
  }
  let newBody: Array<Array<number>> = game.body;
  (globalThis as any).newBody = newBody;
  let newOcc: Record<string, boolean> = game.occupied;
  (globalThis as any).newOcc = newOcc;
  let newIndex: number = game.index;
  (globalThis as any).newIndex = newIndex;
  let eat: boolean =
    ((newIndex < game.food.length) && (game.food[newIndex][0] == r)) &&
    (game.food[newIndex][1] == c);
  (globalThis as any).eat = eat;
  if ((!eat)) {
    let tail: Array<number> = newBody[0];
    (globalThis as any).tail = tail;
    let tk: string = String(tail[0]) + "," + String(tail[1]);
    (globalThis as any).tk = tk;
    newBody = newBody.slice(1, newBody.length);
    newOcc[tk] = false;
  } else {
    newIndex = newIndex + 1;
  }
  let key: string = String(r) + "," + String(c);
  (globalThis as any).key = key;
  if (Object.prototype.hasOwnProperty.call(newOcc, String(key))) {
    if ((newOcc[key] == true)) {
      return {
        game: game,
        score: (-1),
      };
    }
  }
  newBody = newBody.concat([
    [
      r,
      c,
    ],
  ]);
  newOcc[key] = true;
  let newGame: SnakeGame = {
    width: game.width,
    height: game.height,
    food: game.food,
    index: newIndex,
    body: newBody,
    occupied: newOcc,
  };
  (globalThis as any).newGame = newGame;
  return {
    game: newGame,
    score: newIndex,
  };
}

function test_example(): void {
  let g: SnakeGame = newSnakeGame(3, 2, [
    [
      1,
      2,
    ],
    [
      0,
      1,
    ],
  ]);
  (globalThis as any).g = g;
  let r1: MoveResult = move(g, "R");
  (globalThis as any).r1 = r1;
  g = r1.game;
  if (!(r1.score == 0)) throw new Error("expect failed");
  let r2: MoveResult = move(g, "D");
  (globalThis as any).r2 = r2;
  g = r2.game;
  if (!(r2.score == 0)) throw new Error("expect failed");
  let r3: MoveResult = move(g, "R");
  (globalThis as any).r3 = r3;
  g = r3.game;
  if (!(r3.score == 1)) throw new Error("expect failed");
  let r4: MoveResult = move(g, "U");
  (globalThis as any).r4 = r4;
  g = r4.game;
  if (!(r4.score == 1)) throw new Error("expect failed");
  let r5: MoveResult = move(g, "L");
  (globalThis as any).r5 = r5;
  g = r5.game;
  if (!(r5.score == 2)) throw new Error("expect failed");
  let r6: MoveResult = move(g, "U");
  (globalThis as any).r6 = r6;
  g = r6.game;
  if (!(r6.score == (0 - 1))) throw new Error("expect failed");
}

function main(): void {
  test_example();
}
main();
