// Generated by Mochi TypeScript compiler

function lexicalOrder(n: number) : Array<number> {
	let result: Array<number> = []
	let curr: number = 1
	let i: number = 0
	while ((i < n)) {
		result = result.concat([curr])
		if (((curr * 10) <= n)) {
			curr = (curr * 10)
		} else {
			if ((curr >= n)) {
				curr = Math.trunc(curr / 10)
			}
			curr = (curr + 1)
			while (((curr % 10) == 0)) {
				curr = Math.trunc(curr / 10)
			}
		}
		i = (i + 1)
	}
	return result
}

function example_1(): void {
	if (!(_equal(lexicalOrder(13), [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9]))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!(_equal(lexicalOrder(2), [1, 2]))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!(_equal(lexicalOrder(1), [1]))) { throw new Error('expect failed') }
}

function hundred(): void {
	let out: Array<number> = lexicalOrder(20)
	if (!((out.length == 20))) { throw new Error('expect failed') }
	if (!((out[0] == 1))) { throw new Error('expect failed') }
	if (!((out[(out.length - 1)] == 9))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	hundred()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

