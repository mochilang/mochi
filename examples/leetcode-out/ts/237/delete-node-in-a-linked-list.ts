// Generated by Mochi TypeScript compiler

function deleteNode(values: Array<number>, index: number) : Array<number> {
	let arr: Array<number> = values
	let i: number = index
	while ((i < (arr.length - 1))) {
		arr[i] = arr[(i + 1)]
		i = (i + 1)
	}
	return arr.slice(0, (arr.length - 1))
}

function example_1(): void {
	if (!(_equal(deleteNode([4, 5, 1, 9], 1), [4, 1, 9]))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!(_equal(deleteNode([4, 5, 1, 9], 2), [4, 5, 9]))) { throw new Error('expect failed') }
}

function delete_first(): void {
	if (!(_equal(deleteNode([1, 2, 3], 0), [2, 3]))) { throw new Error('expect failed') }
}

function delete_middle(): void {
	if (!(_equal(deleteNode([1, 2, 3, 4], 2), [1, 2, 4]))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	delete_first()
	delete_middle()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

