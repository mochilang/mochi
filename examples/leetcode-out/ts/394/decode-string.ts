// Generated by Mochi TypeScript compiler

function decodeString(s: string): string {
  let digits: Record<string, number> = {
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  };
  (globalThis as any).digits = digits;
  let counts: Array<number> = [];
  (globalThis as any).counts = counts;
  let strs: Array<string> = [];
  (globalThis as any).strs = strs;
  let curr: string = "";
  (globalThis as any).curr = curr;
  let num: number = 0;
  (globalThis as any).num = num;
  let i: number = 0;
  (globalThis as any).i = i;
  let n: number = s.length;
  (globalThis as any).n = n;
  while ((i < n)) {
    let c: string = _indexString(s, i);
    (globalThis as any).c = c;
    if (((c >= "0") && (c <= "9"))) {
      num = (num * 10) + digits[c];
    } else if ((c == "[")) {
      counts = counts.concat([num]);
      strs = strs.concat([curr]);
      curr = "";
      num = 0;
    } else if ((c == "]")) {
      let repeat: number = counts[counts.length - 1];
      (globalThis as any).repeat = repeat;
      counts = counts.slice(0, counts.length - 1);
      let prev: string = strs[strs.length - 1];
      (globalThis as any).prev = prev;
      strs = strs.slice(0, strs.length - 1);
      let repeated: string = "";
      (globalThis as any).repeated = repeated;
      let j: number = 0;
      (globalThis as any).j = j;
      while ((j < repeat)) {
        repeated = repeated + curr;
        j = j + 1;
      }
      curr = prev + repeated;
    } else {
      curr = curr + c;
    }
    i = i + 1;
  }
  return curr;
}

function test_example_1(): void {
  if (!(decodeString("3[a]2[bc]") == "aaabcbc")) {
    throw new Error("expect failed");
  }
}

function test_example_2(): void {
  if (!(decodeString("3[a2[c]]") == "accaccacc")) {
    throw new Error("expect failed");
  }
}

function test_example_3(): void {
  if (!(decodeString("2[abc]3[cd]ef") == "abcabccdcdcdef")) {
    throw new Error("expect failed");
  }
}

function test_plain_text_with_brackets(): void {
  if (!(decodeString("abc3[cd]xyz") == "abccdcdcdxyz")) {
    throw new Error("expect failed");
  }
}

function test_multi_digit_number(): void {
  if (!(decodeString("10[a]") == "aaaaaaaaaa")) {
    throw new Error("expect failed");
  }
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_plain_text_with_brackets();
  test_multi_digit_number();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
