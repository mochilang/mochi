// Generated by Mochi TypeScript compiler

function isNumber(s: string): boolean {
  let i: number = 0;
  (globalThis as any).i = i;
  let n: number = s.length;
  (globalThis as any).n = n;
  while ((i < n)) {
    if ((_indexString(s, i) == " ")) {
      i = i + 1;
    } else {
      break;
    }
  }
  if (
    ((i < n) && ((_indexString(s, i) == "+") || (_indexString(s, i) == "-")))
  ) {
    i = i + 1;
  }
  let num: boolean = false;
  (globalThis as any).num = num;
  let dot: boolean = false;
  (globalThis as any).dot = dot;
  let exp: boolean = false;
  (globalThis as any).exp = exp;
  let numAfterExp: boolean = true;
  (globalThis as any).numAfterExp = numAfterExp;
  while ((i < n)) {
    let c: string = _indexString(s, i);
    (globalThis as any).c = c;
    if ((c == " ")) {
      break;
    }
    if (((c == "+") || (c == "-"))) {
      return false;
    } else if ((c == ".")) {
      if ((dot || exp)) {
        return false;
      }
      dot = true;
    } else if (((c == "e") || (c == "E"))) {
      if ((exp || (!num))) {
        return false;
      }
      exp = true;
      numAfterExp = false;
      if (((i + 1) < n)) {
        if (
          ((_indexString(s, i + 1) == "+") || (_indexString(s, i + 1) == "-"))
        ) {
          i = i + 1;
        }
      }
    } else {
      let digits: Record<string, boolean> = {
        "0": true,
        "1": true,
        "2": true,
        "3": true,
        "4": true,
        "5": true,
        "6": true,
        "7": true,
        "8": true,
        "9": true,
      };
      (globalThis as any).digits = digits;
      if ((!(Object.prototype.hasOwnProperty.call(digits, String(c))))) {
        return false;
      }
      num = true;
      if (exp) {
        numAfterExp = true;
      }
    }
    i = i + 1;
  }
  while ((i < n)) {
    if ((_indexString(s, i) == " ")) {
      i = i + 1;
    } else {
      break;
    }
  }
  return ((num && ((!exp) || numAfterExp)) && (i == n));
}

function test_valid_simple(): void {
  if (!(isNumber("0") == true)) throw new Error("expect failed");
}

function test_invalid_single_e(): void {
  if (!(isNumber("e") == false)) throw new Error("expect failed");
}

function test_valid_exponent(): void {
  if (!(isNumber("2e10") == true)) throw new Error("expect failed");
}

function test_invalid_mixed(): void {
  if (!(isNumber("99e2.5") == false)) throw new Error("expect failed");
}

function test_spaces_around(): void {
  if (!(isNumber(" 0.1 ") == true)) throw new Error("expect failed");
}

function test_invalid_sign(): void {
  if (!(isNumber("--6") == false)) throw new Error("expect failed");
}

function main(): void {
  test_valid_simple();
  test_invalid_single_e();
  test_valid_exponent();
  test_invalid_mixed();
  test_spaces_around();
  test_invalid_sign();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
