// Generated by Mochi TypeScript compiler

function isNumber(s: string): boolean {
  let i: number = 0;
  let n: number = s.length;
  while (i < n) {
    if (s[i] == " ") {
      i = i + 1;
    } else {
      break;
    }
  }
  if (i < n && (s[i] == "+" || s[i] == "-")) {
    i = i + 1;
  }
  let num: boolean = false;
  let dot: boolean = false;
  let exp: boolean = false;
  let numAfterExp: boolean = true;
  while (i < n) {
    let c: string = s[i];
    if (c == " ") {
      break;
    }
    if (c == "+" || c == "-") {
      return false;
    } else if (c == ".") {
      if (dot || exp) {
        return false;
      }
      dot = true;
    } else if (c == "e" || c == "E") {
      if (exp || !num) {
        return false;
      }
      exp = true;
      numAfterExp = false;
      if (i + 1 < n) {
        if (s[i + 1] == "+" || s[i + 1] == "-") {
          i = i + 1;
        }
      }
    } else {
      let digits: Record<string, boolean> = {
        "0": true,
        "1": true,
        "2": true,
        "3": true,
        "4": true,
        "5": true,
        "6": true,
        "7": true,
        "8": true,
        "9": true,
      };
      if (!Object.prototype.hasOwnProperty.call(digits, String(c))) {
        return false;
      }
      num = true;
      if (exp) {
        numAfterExp = true;
      }
    }
    i = i + 1;
  }
  while (i < n) {
    if (s[i] == " ") {
      i = i + 1;
    } else {
      break;
    }
  }
  return num && (!exp || numAfterExp) && i == n;
}

function valid_simple(): void {
  if (!(isNumber("0") == true)) {
    throw new Error("expect failed");
  }
}

function invalid_single_e(): void {
  if (!(isNumber("e") == false)) {
    throw new Error("expect failed");
  }
}

function valid_exponent(): void {
  if (!(isNumber("2e10") == true)) {
    throw new Error("expect failed");
  }
}

function invalid_mixed(): void {
  if (!(isNumber("99e2.5") == false)) {
    throw new Error("expect failed");
  }
}

function spaces_around(): void {
  if (!(isNumber(" 0.1 ") == true)) {
    throw new Error("expect failed");
  }
}

function invalid_sign(): void {
  if (!(isNumber("--6") == false)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  valid_simple();
  invalid_single_e();
  valid_exponent();
  invalid_mixed();
  spaces_around();
  invalid_sign();
}
main();
