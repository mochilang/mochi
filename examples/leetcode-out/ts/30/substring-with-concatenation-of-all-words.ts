// Generated by Mochi TypeScript compiler

function findSubstring(s: string, words: Array<string>): Array<number> {
  if (words.length == 0) {
    return [];
  }
  let wordLen: number = words[0].length;
  let wordCount: number = words.length;
  let totalLen: number = wordLen * wordCount;
  if (s.length < totalLen) {
    return [];
  }
  let freq: Record<string, number> = {};
  for (const w of words) {
    if (Object.prototype.hasOwnProperty.call(freq, String(w))) {
      freq[w] = freq[w] + 1;
    } else {
      freq[w] = 1;
    }
  }
  let result: Array<number> = [];
  for (let offset: number = 0; offset < wordLen; offset++) {
    let left: number = offset;
    let count: number = 0;
    let seen: Record<string, number> = {};
    let j: number = offset;
    while (j + wordLen <= s.length) {
      let word: string = s.slice(j, j + wordLen);
      j = j + wordLen;
      if (Object.prototype.hasOwnProperty.call(freq, String(word))) {
        if (Object.prototype.hasOwnProperty.call(seen, String(word))) {
          seen[word] = seen[word] + 1;
        } else {
          seen[word] = 1;
        }
        count = count + 1;
        while (seen[word] > freq[word]) {
          let lw: string = s.slice(left, left + wordLen);
          seen[lw] = seen[lw] - 1;
          left = left + wordLen;
          count = count - 1;
        }
        if (count == wordCount) {
          result = result.concat([left]);
          let lw: string = s.slice(left, left + wordLen);
          seen[lw] = seen[lw] - 1;
          left = left + wordLen;
          count = count - 1;
        }
      } else {
        seen = {};
        count = 0;
        left = j;
      }
    }
  }
  return result;
}

function example_1(): void {
  if (!_equal(findSubstring("barfoothefoobarman", ["foo", "bar"]), [0, 9])) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (
    !_equal(
      findSubstring("wordgoodgoodgoodbestword", [
        "word",
        "good",
        "best",
        "word",
      ]),
      [],
    )
  ) {
    throw new Error("expect failed");
  }
}

function example_3(): void {
  if (
    !_equal(
      findSubstring("barfoofoobarthefoobarman", ["bar", "foo", "the"]),
      [6, 9, 12],
    )
  ) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  example_3();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
