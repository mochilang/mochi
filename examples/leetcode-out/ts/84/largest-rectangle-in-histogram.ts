// Generated by Mochi TypeScript compiler

function largestRectangleArea(heights: Array<number>) : number {
	let n: number = heights.length
	let stack: Array<number> = []
	let maxArea: number = 0
	let i: number = 0
	while ((i < n)) {
		while ((stack.length > 0)) {
			if ((heights[i] < heights[stack[(stack.length - 1)]])) {
				let h: number = heights[stack[(stack.length - 1)]]
				stack = stack.slice(0, (stack.length - 1))
				let width: number = i
				if ((stack.length > 0)) {
					width = ((i - stack[(stack.length - 1)]) - 1)
				}
				let area: number = (h * width)
				if ((area > maxArea)) {
					maxArea = area
				}
			} else {
				break
			}
		}
		stack = stack.concat([i])
		i = (i + 1)
	}
	while ((stack.length > 0)) {
		let h: number = heights[stack[(stack.length - 1)]]
		stack = stack.slice(0, (stack.length - 1))
		let width: number = n
		if ((stack.length > 0)) {
			width = ((n - stack[(stack.length - 1)]) - 1)
		}
		let area: number = (h * width)
		if ((area > maxArea)) {
			maxArea = area
		}
	}
	return maxArea
}

function example_1(): void {
	if (!((largestRectangleArea([2, 1, 5, 6, 2, 3]) == 10))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((largestRectangleArea([2, 4]) == 4))) { throw new Error('expect failed') }
}

function single_bar(): void {
	if (!((largestRectangleArea([1]) == 1))) { throw new Error('expect failed') }
}

function valley(): void {
	if (!((largestRectangleArea([2, 1, 2]) == 3))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	single_bar()
	valley()
}
main()

