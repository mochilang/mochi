// Generated by Mochi TypeScript compiler

let example1: Node = {
  __name: "Node",
  left: { __name: "Leaf" },
  value: 1,
  right: {
    __name: "Node",
    left: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 3,
      right: { __name: "Leaf" },
    },
    value: 2,
    right: { __name: "Leaf" },
  },
};

function postorderTraversal(t: Tree): Array<number> {
  return (() => {
    const _t = t;
    if (_t.__name === "Leaf") {
      return [];
    }
    if (_t.__name === "Node") {
      return ((l, v, r) =>
        postorderTraversal(l).concat(postorderTraversal(r)).concat([v]))(
        _t.left,
        _t.value,
        _t.right,
      );
    }
    return undefined;
  })();
}

function example_1(): void {
  if (!_equal(postorderTraversal(example1), [3, 2, 1])) {
    throw new Error("expect failed");
  }
}

function single_node(): void {
  if (
    !_equal(
      postorderTraversal({
        __name: "Node",
        left: { __name: "Leaf" },
        value: 1,
        right: { __name: "Leaf" },
      }),
      [1],
    )
  ) {
    throw new Error("expect failed");
  }
}

function empty(): void {
  if (!_equal(postorderTraversal({ __name: "Leaf" }), [])) {
    throw new Error("expect failed");
  }
}

function main(): void {
  type Leaf = {
    __name: "Leaf";
  };

  type Node = {
    __name: "Node";
    left: any;
    value: number;
    right: any;
  };

  type Tree = Leaf | Node;
  example_1();
  single_node();
  empty();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
