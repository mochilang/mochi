// Generated by Mochi TypeScript compiler

function abs(x: number): number {
  if ((x < 0)) {
    return (-x);
  } else {
    return x;
  }
}

function minTotalDistance(grid: Array<Array<number>>): number {
  let rows: Array<number> = [];
  (globalThis as any).rows = rows;
  let cols: Array<number> = [];
  (globalThis as any).cols = cols;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < grid.length)) {
    let j: number = 0;
    (globalThis as any).j = j;
    let row: Array<number> = grid[i];
    (globalThis as any).row = row;
    while ((j < row.length)) {
      if ((row[j] == 1)) {
        rows = rows.concat([i]);
        cols = cols.concat([j]);
      }
      j = j + 1;
    }
    i = i + 1;
  }
  let sortedRows: Array<number> = (() => {
    const _src = rows;
    let _items = [];
    for (const r of _src) {
      _items.push(r);
    }
    let _pairs = _items.map((it) => {
      const r = it;
      return { item: it, key: r };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const r of _items) {
      _res.push(r);
    }
    return _res;
  })();
  (globalThis as any).sortedRows = sortedRows;
  let sortedCols: Array<number> = (() => {
    const _src = cols;
    let _items = [];
    for (const c of _src) {
      _items.push(c);
    }
    let _pairs = _items.map((it) => {
      const c = it;
      return { item: it, key: c };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const c of _items) {
      _res.push(c);
    }
    return _res;
  })();
  (globalThis as any).sortedCols = sortedCols;
  let mid: number = Math.trunc(sortedRows.length / 2);
  (globalThis as any).mid = mid;
  let rowMedian: number = sortedRows[mid];
  (globalThis as any).rowMedian = rowMedian;
  let colMedian: number = sortedCols[mid];
  (globalThis as any).colMedian = colMedian;
  let dist: number = 0;
  (globalThis as any).dist = dist;
  let k: number = 0;
  (globalThis as any).k = k;
  while ((k < sortedRows.length)) {
    dist = dist + abs(sortedRows[k] - rowMedian);
    k = k + 1;
  }
  k = 0;
  while ((k < sortedCols.length)) {
    dist = dist + abs(sortedCols[k] - colMedian);
    k = k + 1;
  }
  return dist;
}

function test_example_1(): void {
  if (
    !(minTotalDistance([
      [
        1,
        0,
        0,
        0,
        1,
      ],
      [
        0,
        0,
        0,
        0,
        0,
      ],
      [
        0,
        0,
        1,
        0,
        0,
      ],
    ]) == 6)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(minTotalDistance([
      [
        1,
        1,
      ],
    ]) == 1)
  ) throw new Error("expect failed");
}

function test_single_column(): void {
  if (
    !(minTotalDistance([
      [1],
      [1],
    ]) == 1)
  ) throw new Error("expect failed");
}

function test_single_cell(): void {
  if (!(minTotalDistance([[1]]) == 0)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_single_column();
  test_single_cell();
}
main();
