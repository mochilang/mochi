// Generated by Mochi TypeScript compiler

function Leaf(): Record<string, any> {
  return { "__name": "Leaf" };
}

function _Node(
  left: Record<string, any>,
  value: number,
  right: Record<string, any>,
): Record<string, any> {
  return {
    "__name": "Node",
    "left": left,
    "value": value,
    "right": right,
  };
}

function isLeaf(t: Record<string, any>): boolean {
  return _equal(t["__name"], "Leaf");
}

function left(t: Record<string, any>): Record<string, any> {
  return t["left"];
}

function right(t: Record<string, any>): Record<string, any> {
  return t["right"];
}

function value(t: Record<string, any>): number {
  return t["value"];
}

function max(a: number, b: number): number {
  if ((a > b)) {
    return a;
  } else {
    return b;
  }
}

function findLeaves(root: Record<string, any>): Array<Array<number>> {
  let result: Array<Array<number>> = [];
  (globalThis as any).result = result;
  function dfs(node: Record<string, any>): number {
    if (isLeaf(node)) {
      return (-1);
    }
    let lh: number = dfs(left(node));
    (globalThis as any).lh = lh;
    let rh: number = dfs(right(node));
    (globalThis as any).rh = rh;
    let h: number = _max(lh, rh) + 1;
    (globalThis as any).h = h;
    while ((result.length <= h)) {
      result = result.concat([[]]);
    }
    result[h] = result[h].concat([value(node)]);
    return h;
  }
  if (isLeaf(root)) {
    return [];
  }
  dfs(root);
  return result;
}

function test_example(): void {
  if (
    !(_equal(findLeaves(example1), [
      [
        4,
        5,
        3,
      ],
      [2],
      [1],
    ]))
  ) throw new Error("expect failed");
}

function test_single_node(): void {
  if (!(_equal(findLeaves(_Node(Leaf(), 1, Leaf())), [[1]]))) {
    throw new Error("expect failed");
  }
}

function main(): void {
  let example1: Record<string, any> = _Node(
    _Node(_Node(Leaf(), 4, Leaf()), 2, _Node(Leaf(), 5, Leaf())),
    1,
    _Node(Leaf(), 3, Leaf()),
  );
  (globalThis as any).example1 = example1;
  test_example();
  test_single_node();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _max(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m = Number(list[0]);
  for (const n of list) {
    const num = Number(n);
    if (num > m) m = num;
  }
  return m;
}

main();
