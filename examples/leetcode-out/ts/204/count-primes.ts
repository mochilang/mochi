// Generated by Mochi TypeScript compiler

function countPrimes(n: number) : number {
	if ((n <= 2)) {
		return 0
	}
	let isPrime: Array<boolean> = []
	let i: number = 0
	while ((i < n)) {
		isPrime = isPrime.concat([true])
		i = (i + 1)
	}
	isPrime[0] = false
	isPrime[1] = false
	let p: number = 2
	while (((p * p) < n)) {
		if (isPrime[p]) {
			let j: number = (p * p)
			while ((j < n)) {
				isPrime[j] = false
				j = (j + p)
			}
		}
		p = (p + 1)
	}
	let count: number = 0
	let k: number = 0
	while ((k < n)) {
		if (isPrime[k]) {
			count = (count + 1)
		}
		k = (k + 1)
	}
	return count
}

function example_1(): void {
	if (!((countPrimes(10) == 4))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((countPrimes(0) == 0))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((countPrimes(1) == 0))) { throw new Error('expect failed') }
}

function primes_under_20(): void {
	if (!((countPrimes(20) == 8))) { throw new Error('expect failed') }
}

function larger_input(): void {
	if (!((countPrimes(100) == 25))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	primes_under_20()
	larger_input()
}
main()

