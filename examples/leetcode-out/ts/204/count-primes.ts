// Generated by Mochi TypeScript compiler

function countPrimes(n: number): number {
  if ((n <= 2)) {
    return 0;
  }
  let isPrime: Array<boolean> = [];
  (globalThis as any).isPrime = isPrime;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < n)) {
    isPrime = isPrime.concat([true]);
    i = i + 1;
  }
  isPrime[0] = false;
  isPrime[1] = false;
  let p: number = 2;
  (globalThis as any).p = p;
  while (((p * p) < n)) {
    if (isPrime[p]) {
      let j: number = p * p;
      (globalThis as any).j = j;
      while ((j < n)) {
        isPrime[j] = false;
        j = j + p;
      }
    }
    p = p + 1;
  }
  let count: number = 0;
  (globalThis as any).count = count;
  let k: number = 0;
  (globalThis as any).k = k;
  while ((k < n)) {
    if (isPrime[k]) {
      count = count + 1;
    }
    k = k + 1;
  }
  return count;
}

function test_example_1(): void {
  if (!(countPrimes(10) == 4)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(countPrimes(0) == 0)) throw new Error("expect failed");
}

function test_example_3(): void {
  if (!(countPrimes(1) == 0)) throw new Error("expect failed");
}

function test_primes_under_20(): void {
  if (!(countPrimes(20) == 8)) throw new Error("expect failed");
}

function test_larger_input(): void {
  if (!(countPrimes(100) == 25)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_primes_under_20();
  test_larger_input();
}
main();
