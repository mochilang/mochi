// Generated by Mochi TypeScript compiler

function hIndex(citations: Array<number>): number {
  let sorted: Array<any> = (() => {
    const _src = citations;
    let _items = [];
    for (const c of _src) {
      _items.push(c);
    }
    let _pairs = _items.map((it) => {
      const c = it;
      return { item: it, key: -c };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string")
        return ak < bk ? -1 : ak > bk ? 1 : 0;
      return String(ak) < String(bk) ? -1 : String(ak) > String(bk) ? 1 : 0;
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const c of _items) {
      _res.push(c);
    }
    return _res;
  })();
  let h: number = 0;
  let i: number = 0;
  while (i < sorted.length) {
    if (sorted[i] >= i + 1) {
      h = i + 1;
    }
    i = i + 1;
  }
  return h;
}

function example_1(): void {
  if (!(hIndex([3, 0, 6, 1, 5]) == 3)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(hIndex([1, 3, 1]) == 1)) {
    throw new Error("expect failed");
  }
}

function all_zeros(): void {
  if (!(hIndex([0, 0, 0]) == 0)) {
    throw new Error("expect failed");
  }
}

function all_high(): void {
  if (!(hIndex([10, 8, 5, 4, 3]) == 4)) {
    throw new Error("expect failed");
  }
}

function empty(): void {
  if (!(hIndex([]) == 0)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  all_zeros();
  all_high();
  empty();
}
main();
