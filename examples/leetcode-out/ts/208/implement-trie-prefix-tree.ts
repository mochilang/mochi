// Generated by Mochi TypeScript compiler

function Node(): Record<string, any> {
  return { children: {}, end: false };
}

function insert(trie: Record<string, any>, word: string): void {
  let node: Record<string, any> = trie;
  let i: number = 0;
  while (i < word.length) {
    let ch: string = word[i];
    let kids: Record<string, Record<string, any>> = node["children"];
    let child: Record<string, any> = {};
    if (Object.prototype.hasOwnProperty.call(kids, String(ch))) {
      child = kids[ch];
    } else {
      child = Node();
    }
    if (i == word.length - 1) {
      child["end"] = true;
    }
    kids[ch] = child;
    node["children"] = kids;
    node = child;
    i = i + 1;
  }
}

function search(trie: Record<string, any>, word: string): boolean {
  let node: Record<string, any> = trie;
  for (const ch of word) {
    let kids: Record<string, Record<string, any>> = node["children"];
    if (!Object.prototype.hasOwnProperty.call(kids, String(ch))) {
      return false;
    }
    node = kids[ch];
  }
  return node["end"];
}

function startsWith(trie: Record<string, any>, prefix: string): boolean {
  let node: Record<string, any> = trie;
  for (const ch of prefix) {
    let kids: Record<string, Record<string, any>> = node["children"];
    if (!Object.prototype.hasOwnProperty.call(kids, String(ch))) {
      return false;
    }
    node = kids[ch];
  }
  return true;
}

function search_apple(): void {
  let t: Record<string, any> = Node();
  insert(t, "apple");
  if (!(search(t, "apple") == true)) {
    throw new Error("expect failed");
  }
}

function search_app(): void {
  let t: Record<string, any> = Node();
  insert(t, "apple");
  if (!(search(t, "app") == false)) {
    throw new Error("expect failed");
  }
}

function startsWith_app(): void {
  let t: Record<string, any> = Node();
  insert(t, "apple");
  if (!(startsWith(t, "app") == true)) {
    throw new Error("expect failed");
  }
}

function search_app_after_insert(): void {
  let t: Record<string, any> = Node();
  insert(t, "apple");
  insert(t, "app");
  if (!(search(t, "app") == true)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  search_apple();
  search_app();
  startsWith_app();
  search_app_after_insert();
}
main();
