// Generated by Mochi TypeScript compiler

function _Node(): Record<string, any> {
  return {
    "children": {},
    "end": false,
  };
}

function insert(trie: Record<string, any>, word: string): void {
  let node: Record<string, any> = trie;
  (globalThis as any).node = node;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < word.length)) {
    let ch: string = _indexString(word, i);
    (globalThis as any).ch = ch;
    let kids: Record<string, Record<string, any>> = node["children"];
    (globalThis as any).kids = kids;
    let child: Record<string, any> = {};
    (globalThis as any).child = child;
    if (Object.prototype.hasOwnProperty.call(kids, String(ch))) {
      child = kids[ch];
    } else {
      child = _Node();
    }
    if ((i == (word.length - 1))) {
      child["end"] = true;
    }
    kids[ch] = child;
    node["children"] = kids;
    node = child;
    i = i + 1;
  }
}

function search(trie: Record<string, any>, word: string): boolean {
  let node: Record<string, any> = trie;
  (globalThis as any).node = node;
  for (const ch of word) {
    let kids: Record<string, Record<string, any>> = node["children"];
    (globalThis as any).kids = kids;
    if ((!(Object.prototype.hasOwnProperty.call(kids, String(ch))))) {
      return false;
    }
    node = kids[ch];
  }
  return node["end"];
}

function startsWith(trie: Record<string, any>, prefix: string): boolean {
  let node: Record<string, any> = trie;
  (globalThis as any).node = node;
  for (const ch of prefix) {
    let kids: Record<string, Record<string, any>> = node["children"];
    (globalThis as any).kids = kids;
    if ((!(Object.prototype.hasOwnProperty.call(kids, String(ch))))) {
      return false;
    }
    node = kids[ch];
  }
  return true;
}

function test_search_apple(): void {
  let t: Record<string, any> = _Node();
  (globalThis as any).t = t;
  insert(t, "apple");
  if (!(search(t, "apple") == true)) throw new Error("expect failed");
}

function test_search_app(): void {
  let t: Record<string, any> = _Node();
  (globalThis as any).t = t;
  insert(t, "apple");
  if (!(search(t, "app") == false)) throw new Error("expect failed");
}

function test_startsWith_app(): void {
  let t: Record<string, any> = _Node();
  (globalThis as any).t = t;
  insert(t, "apple");
  if (!(startsWith(t, "app") == true)) throw new Error("expect failed");
}

function test_search_app_after_insert(): void {
  let t: Record<string, any> = _Node();
  (globalThis as any).t = t;
  insert(t, "apple");
  insert(t, "app");
  if (!(search(t, "app") == true)) throw new Error("expect failed");
}

function main(): void {
  test_search_apple();
  test_search_app();
  test_startsWith_app();
  test_search_app_after_insert();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
