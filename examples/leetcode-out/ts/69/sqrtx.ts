// Generated by Mochi TypeScript compiler

function mySqrt(x: number): number {
  if ((x < 2)) {
    return x;
  }
  let left: number = 1;
  (globalThis as any).left = left;
  let right: number = Math.trunc(x / 2);
  (globalThis as any).right = right;
  let ans: number = 0;
  (globalThis as any).ans = ans;
  while ((left <= right)) {
    let mid: number = left + Math.trunc((right - left) / 2);
    (globalThis as any).mid = mid;
    let sq: number = mid * mid;
    (globalThis as any).sq = sq;
    if ((sq == x)) {
      return mid;
    } else if ((sq < x)) {
      left = mid + 1;
      ans = mid;
    } else {
      right = mid - 1;
    }
  }
  return ans;
}

function test_example_1(): void {
  if (!(mySqrt(4) == 2)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(mySqrt(8) == 2)) throw new Error("expect failed");
}

function test_zero(): void {
  if (!(mySqrt(0) == 0)) throw new Error("expect failed");
}

function test_large(): void {
  if (!(mySqrt(2147395599) == 46339)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_zero();
  test_large();
}
main();
