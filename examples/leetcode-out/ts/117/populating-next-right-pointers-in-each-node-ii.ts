// Generated by Mochi TypeScript compiler

let exLefts: Array<number> = [1, 3, -1, -1, -1, -1];

let exRights: Array<number> = [2, 4, 5, -1, -1, -1];

let exValues: Array<number> = [1, 2, 3, 4, 5, 7];

let exRoot: number = 0;

function connect(
  lefts: Array<number>,
  rights: Array<number>,
  root: number,
): Array<number> {
  let nexts: Array<number> = [];
  let i: number = 0;
  while (i < lefts.length) {
    nexts = nexts.concat([-1]);
    i = i + 1;
  }
  let queue: Array<number> = [];
  if (root != -1) {
    queue = [root];
  }
  while (queue.length > 0) {
    let next: Array<number> = [];
    let prev: number = -1;
    for (const idx of queue) {
      if (prev != -1) {
        nexts[prev] = idx;
      }
      prev = idx;
      if (lefts[idx] != -1) {
        next = next.concat([lefts[idx]]);
      }
      if (rights[idx] != -1) {
        next = next.concat([rights[idx]]);
      }
    }
    queue = next;
  }
  return nexts;
}

function levels(
  lefts: Array<number>,
  rights: Array<number>,
  values: Array<number>,
  root: number,
): Array<Array<number>> {
  let result: Array<Array<number>> = [];
  let queue: Array<number> = [];
  if (root != -1) {
    queue = [root];
  }
  while (queue.length > 0) {
    let vals: Array<number> = [];
    let next: Array<number> = [];
    for (const idx of queue) {
      vals = vals.concat([values[idx]]);
      if (lefts[idx] != -1) {
        next = next.concat([lefts[idx]]);
      }
      if (rights[idx] != -1) {
        next = next.concat([rights[idx]]);
      }
    }
    result = result.concat([vals]);
    queue = next;
  }
  return result;
}

function example(): void {
  let ns: Array<number> = connect(exLefts, exRights, exRoot);
  if (
    !_equal(levels(exLefts, exRights, exValues, exRoot), [
      [1],
      [2, 3],
      [4, 5, 7],
    ])
  ) {
    throw new Error("expect failed");
  }
  if (!_equal(ns, [-1, 2, -1, 4, 5, -1])) {
    throw new Error("expect failed");
  }
}

function single_node(): void {
  let lefts: Array<number> = [-1];
  let rights: Array<number> = [-1];
  let values: Array<number> = [1];
  let root: number = 0;
  let ns: Array<number> = connect(lefts, rights, root);
  if (!_equal(levels(lefts, rights, values, root), [[1]])) {
    throw new Error("expect failed");
  }
  if (!_equal(ns, [-1])) {
    throw new Error("expect failed");
  }
}

function empty(): void {
  let lefts: Array<number> = [];
  let rights: Array<number> = [];
  let values: Array<number> = [];
  let ns: Array<number> = connect(lefts, rights, -1);
  if (!_equal(levels(lefts, rights, values, -1), [])) {
    throw new Error("expect failed");
  }
  if (!_equal(ns, [])) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example();
  single_node();
  empty();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
