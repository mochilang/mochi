// Generated by Mochi TypeScript compiler

function rotate(nums: Array<number>, k: number): Array<number> {
  let n: number = nums.length;
  (globalThis as any).n = n;
  if ((n == 0)) {
    return nums;
  }
  let r: number = k % n;
  (globalThis as any).r = r;
  if ((r == 0)) {
    return nums;
  }
  return nums.slice(n - r, nums.length).concat(nums.slice(0, n - r));
}

function test_example_1(): void {
  if (
    !(_equal(
      rotate([
        1,
        2,
        3,
        4,
        5,
        6,
        7,
      ], 3),
      [
        5,
        6,
        7,
        1,
        2,
        3,
        4,
      ],
    ))
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(_equal(
      rotate([
        -1,
        -100,
        3,
        99,
      ], 2),
      [
        3,
        99,
        -1,
        -100,
      ],
    ))
  ) throw new Error("expect failed");
}

function test_k_greater_than_length(): void {
  if (
    !(_equal(
      rotate([
        1,
        2,
      ], 5),
      [
        2,
        1,
      ],
    ))
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_k_greater_than_length();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
