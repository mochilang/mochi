// Generated by Mochi TypeScript compiler

function searchInsert(nums: Array<number>, target: number): number {
  let left: number = 0;
  let right: number = nums.length;
  while (left < right) {
    let mid: number = Math.trunc((left + right) / 2);
    let value: number = nums[mid];
    if (value < target) {
      left = mid + 1;
    } else {
      right = mid;
    }
  }
  return left;
}

function example_1(): void {
  if (!(searchInsert([1, 3, 5, 6], 5) == 2)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(searchInsert([1, 3, 5, 6], 2) == 1)) {
    throw new Error("expect failed");
  }
}

function example_3(): void {
  if (!(searchInsert([1, 3, 5, 6], 7) == 4)) {
    throw new Error("expect failed");
  }
}

function example_4(): void {
  if (!(searchInsert([1, 3, 5, 6], 0) == 0)) {
    throw new Error("expect failed");
  }
}

function single_element_greater(): void {
  if (!(searchInsert([2], 1) == 0)) {
    throw new Error("expect failed");
  }
}

function single_element_smaller(): void {
  if (!(searchInsert([2], 3) == 1)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  example_3();
  example_4();
  single_element_greater();
  single_element_smaller();
}
main();
