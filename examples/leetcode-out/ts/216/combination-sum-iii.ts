// Generated by Mochi TypeScript compiler

function combinationSum3(k: number, n: number) : Array<Array<number>> {
	let result: Array<Array<number>> = []
	function backtrack(start: number, remain: number, path: Array<number>) : void {
		if ((path.length == k)) {
			if ((remain == 0)) {
				result = result.concat([path])
			}
		} else 		if ((remain > 0)) {
			let i: number = start
			while ((i <= 9)) {
				if ((i > remain)) {
					break
				}
				backtrack((i + 1), (remain - i), path.concat([i]))
				i = (i + 1)
			}
		}
	}
	backtrack(1, n, [])
	return result
}

function example_1(): void {
	if (!(_equal(combinationSum3(3, 7), [[1, 2, 4]]))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!(_equal(combinationSum3(3, 9), [[1, 2, 6], [1, 3, 5], [2, 3, 4]]))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!(_equal(combinationSum3(4, 1), []))) { throw new Error('expect failed') }
}

function no_combination(): void {
	if (!(_equal(combinationSum3(3, 2), []))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	no_combination()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

