// Generated by Mochi TypeScript compiler

function numDecodings(s: string): number {
  let n: number = s.length;
  if (n == 0) {
    return 0;
  }
  let digits: Record<string, number> = {
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  };
  let dp: Array<number> = [];
  let i: number = 0;
  while (i <= n) {
    dp = dp.concat([0]);
    i = i + 1;
  }
  dp[0] = 1;
  if (s[0] != "0") {
    dp[1] = 1;
  }
  let idx: number = 2;
  while (idx <= n) {
    let one: string = s[idx - 1];
    if (one != "0") {
      dp[idx] = dp[idx] + dp[idx - 1];
    }
    let d1: number = digits[s[idx - 2]];
    let d2: number = digits[s[idx - 1]];
    let val: number = d1 * 10 + d2;
    if (val >= 10 && val <= 26) {
      dp[idx] = dp[idx] + dp[idx - 2];
    }
    idx = idx + 1;
  }
  return dp[n];
}

function example_1(): void {
  if (!(numDecodings("12") == 2)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(numDecodings("226") == 3)) {
    throw new Error("expect failed");
  }
}

function example_3(): void {
  if (!(numDecodings("06") == 0)) {
    throw new Error("expect failed");
  }
}

function single_zero(): void {
  if (!(numDecodings("0") == 0)) {
    throw new Error("expect failed");
  }
}

function _101(): void {
  if (!(numDecodings("2101") == 1)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  example_3();
  single_zero();
  _101();
}
main();
