// Generated by Mochi TypeScript compiler

function transpose(rows: Array<Array<number>>): Array<Array<number>> {
  if (rows.length == 0) {
    return [];
  }
  let row_count: number = rows.length;
  let col_count: number = rows[0].length;
  let result: Array<Array<number>> = [];
  let c: number = 0;
  while (c < col_count) {
    let new_row: Array<number> = [];
    let r: number = 0;
    while (r < row_count) {
      new_row = new_row.concat([rows[r][c]]);
      r = r + 1;
    }
    result = result.concat([new_row]);
    c = c + 1;
  }
  return result;
}

function square_matrix(): void {
  if (
    !_equal(
      transpose([
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9],
      ]),
      [
        [1, 4, 7],
        [2, 5, 8],
        [3, 6, 9],
      ],
    )
  ) {
    throw new Error("expect failed");
  }
}

function rectangular_matrix(): void {
  if (
    !_equal(
      transpose([
        [1, 2],
        [3, 4],
        [5, 6],
      ]),
      [
        [1, 3, 5],
        [2, 4, 6],
      ],
    )
  ) {
    throw new Error("expect failed");
  }
}

function main(): void {
  square_matrix();
  rectangular_matrix();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (!_equal(a[i], b[i])) return false;
    }
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k]))
        return false;
    }
    return true;
  }
  return a === b;
}

main();
