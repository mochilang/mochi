// Generated by Mochi TypeScript compiler

function powMod(x: number, k: number): number {
  let base: number = x % MOD;
  (globalThis as any).base = base;
  let exp: number = k;
  (globalThis as any).exp = exp;
  let result: number = 1;
  (globalThis as any).result = result;
  while ((exp > 0)) {
    if (((exp % 2) == 1)) {
      result = (result * base) % MOD;
    }
    base = (base * base) % MOD;
    exp = Math.trunc(exp / 2);
  }
  return result;
}

function superPow(a: number, b: Array<number>): number {
  let result: number = 1;
  (globalThis as any).result = result;
  for (const digit of b) {
    result = powMod(result, 10);
    let part: number = powMod(a, digit);
    (globalThis as any).part = part;
    result = (result * part) % MOD;
  }
  return result;
}

function test_example_1(): void {
  if (!(superPow(2, [3]) == 8)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(superPow(2, [
      1,
      0,
    ]) == 1024)
  ) throw new Error("expect failed");
}

function test_example_3(): void {
  if (
    !(superPow(1, [
      4,
      3,
      3,
      8,
      5,
      2,
    ]) == 1)
  ) throw new Error("expect failed");
}

function test_large_numbers(): void {
  if (
    !(superPow(2147483647, [
      2,
      0,
      0,
    ]) == 1198)
  ) throw new Error("expect failed");
}

function test_zero_exponent(): void {
  if (!(superPow(5, []) == 1)) throw new Error("expect failed");
}

function main(): void {
  let MOD: number = 1337;
  (globalThis as any).MOD = MOD;
  test_example_1();
  test_example_2();
  test_example_3();
  test_large_numbers();
  test_zero_exponent();
}
main();
