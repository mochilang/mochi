// Generated by Mochi TypeScript compiler

function maximalSquare(matrix: Array<Array<string>>): number {
  let rows: number = matrix.length;
  (globalThis as any).rows = rows;
  if ((rows == 0)) {
    return 0;
  }
  let cols: number = matrix[0].length;
  (globalThis as any).cols = cols;
  let dp: Array<Array<number>> = [];
  (globalThis as any).dp = dp;
  let r: number = 0;
  (globalThis as any).r = r;
  while ((r < rows)) {
    let row: Array<number> = [];
    (globalThis as any).row = row;
    let c: number = 0;
    (globalThis as any).c = c;
    while ((c < cols)) {
      row = row.concat([0]);
      c = c + 1;
    }
    dp = dp.concat([row]);
    r = r + 1;
  }
  let maxSide: number = 0;
  (globalThis as any).maxSide = maxSide;
  r = 0;
  while ((r < rows)) {
    let c: number = 0;
    (globalThis as any).c = c;
    while ((c < cols)) {
      if ((matrix[r][c] == "1")) {
        if (((r == 0) || (c == 0))) {
          dp[r][c] = 1;
        } else {
          let top: number = dp[r - 1][c];
          (globalThis as any).top = top;
          let left: number = dp[r][c - 1];
          (globalThis as any).left = left;
          let diag: number = dp[r - 1][c - 1];
          (globalThis as any).diag = diag;
          let small: number = top;
          (globalThis as any).small = small;
          if ((left < small)) {
            small = left;
          }
          if ((diag < small)) {
            small = diag;
          }
          dp[r][c] = small + 1;
        }
        if ((dp[r][c] > maxSide)) {
          maxSide = dp[r][c];
        }
      } else {
        dp[r][c] = 0;
      }
      c = c + 1;
    }
    r = r + 1;
  }
  return (maxSide * maxSide);
}

function test_example_1(): void {
  if (!(maximalSquare(example1) == 4)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(maximalSquare(example2) == 1)) throw new Error("expect failed");
}

function test_single_zero(): void {
  if (!(maximalSquare(example3) == 0)) throw new Error("expect failed");
}

function main(): void {
  let example1: Array<Array<string>> = [
    [
      "1",
      "0",
      "1",
      "0",
      "0",
    ],
    [
      "1",
      "0",
      "1",
      "1",
      "1",
    ],
    [
      "1",
      "1",
      "1",
      "1",
      "1",
    ],
    [
      "1",
      "0",
      "0",
      "1",
      "0",
    ],
  ];
  (globalThis as any).example1 = example1;
  let example2: Array<Array<string>> = [
    [
      "0",
      "1",
    ],
    [
      "1",
      "0",
    ],
  ];
  (globalThis as any).example2 = example2;
  let example3: Array<Array<string>> = [["0"]];
  (globalThis as any).example3 = example3;
  test_example_1();
  test_example_2();
  test_single_zero();
}
main();
