// Generated by Mochi TypeScript compiler

function grayCode(n: number) : Array<number> {
	let result: Array<number> = [0]
	let power: number = 1
	let i: number = 0
	while ((i < n)) {
		let j: number = (result.length - 1)
		while ((j >= 0)) {
			result = result.concat([(result[j] + power)])
			j = (j - 1)
		}
		power = (power * 2)
		i = (i + 1)
	}
	return result
}

function example_1(): void {
	if (!(_equal(grayCode(2), [0, 1, 3, 2]))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!(_equal(grayCode(1), [0, 1]))) { throw new Error('expect failed') }
}

function zero_bits(): void {
	if (!(_equal(grayCode(0), [0]))) { throw new Error('expect failed') }
}

function three_bits(): void {
	if (!(_equal(grayCode(3), [0, 1, 3, 2, 6, 7, 5, 4]))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	zero_bits()
	three_bits()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

