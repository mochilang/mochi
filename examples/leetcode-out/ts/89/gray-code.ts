// Generated by Mochi TypeScript compiler

function grayCode(n: number): Array<number> {
  let result: Array<number> = [0];
  (globalThis as any).result = result;
  let power: number = 1;
  (globalThis as any).power = power;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < n)) {
    let j: number = result.length - 1;
    (globalThis as any).j = j;
    while ((j >= 0)) {
      result = result.concat([result[j] + power]);
      j = j - 1;
    }
    power = power * 2;
    i = i + 1;
  }
  return result;
}

function test_example_1(): void {
  if (
    !(_equal(grayCode(2), [
      0,
      1,
      3,
      2,
    ]))
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(_equal(grayCode(1), [
      0,
      1,
    ]))
  ) throw new Error("expect failed");
}

function test_zero_bits(): void {
  if (!(_equal(grayCode(0), [0]))) throw new Error("expect failed");
}

function test_three_bits(): void {
  if (
    !(_equal(grayCode(3), [
      0,
      1,
      3,
      2,
      6,
      7,
      5,
      4,
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_zero_bits();
  test_three_bits();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
