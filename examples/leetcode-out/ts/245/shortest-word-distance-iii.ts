// Generated by Mochi TypeScript compiler

function abs(x: number): number {
  if ((x < 0)) {
    return (-x);
  } else {
    return x;
  }
}

function shortestWordDistance(
  words: Array<string>,
  word1: string,
  word2: string,
): number {
  let index1: number = -1;
  (globalThis as any).index1 = index1;
  let index2: number = -1;
  (globalThis as any).index2 = index2;
  let minDist: number = words.length;
  (globalThis as any).minDist = minDist;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < words.length)) {
    let w: string = words[i];
    (globalThis as any).w = w;
    if ((w == word1)) {
      if ((word1 == word2)) {
        if ((index1 != (-1))) {
          let d: number = i - index1;
          (globalThis as any).d = d;
          if ((d < minDist)) {
            minDist = d;
          }
        }
        index1 = i;
      } else {
        index1 = i;
        if ((index2 != (-1))) {
          let d: number = abs(index1 - index2);
          (globalThis as any).d = d;
          if ((d < minDist)) {
            minDist = d;
          }
        }
      }
    } else if ((w == word2)) {
      index2 = i;
      if ((index1 != (-1))) {
        let d: number = abs(index1 - index2);
        (globalThis as any).d = d;
        if ((d < minDist)) {
          minDist = d;
        }
      }
    }
    i = i + 1;
  }
  return minDist;
}

function test_example_1(): void {
  if (
    !(shortestWordDistance(
      [
        "practice",
        "makes",
        "perfect",
        "coding",
        "makes",
      ],
      "makes",
      "coding",
    ) == 1)
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(shortestWordDistance(
      [
        "practice",
        "makes",
        "perfect",
        "coding",
        "makes",
      ],
      "makes",
      "makes",
    ) == 3)
  ) throw new Error("expect failed");
}

function test_example_3(): void {
  if (
    !(shortestWordDistance(
      [
        "a",
        "a",
        "b",
        "b",
      ],
      "a",
      "b",
    ) == 1)
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
}
main();
