// Generated by Mochi TypeScript compiler

function maxKilledEnemies(grid: Array<Array<string>>) : number {
	let m: number = grid.length
	if ((m == 0)) {
		return 0
	}
	let n: number = grid[0].length
	let result: number = 0
	let colHits: Array<number> = []
	let i: number = 0
	while ((i < n)) {
		colHits = colHits.concat([0])
		i = (i + 1)
	}
	let rowHits: number = 0
	let r: number = 0
	while ((r < m)) {
		let c: number = 0
		while ((c < n)) {
			if (((c == 0) || (grid[r][(c - 1)] == "W"))) {
				rowHits = 0
				let k: number = c
				while ((k < n)) {
					if ((grid[r][k] == "W")) {
						break
					}
					if ((grid[r][k] == "E")) {
						rowHits = (rowHits + 1)
					}
					k = (k + 1)
				}
			}
			if (((r == 0) || (grid[(r - 1)][c] == "W"))) {
				colHits[c] = 0
				let k: number = r
				while ((k < m)) {
					if ((grid[k][c] == "W")) {
						break
					}
					if ((grid[k][c] == "E")) {
						colHits[c] = (colHits[c] + 1)
					}
					k = (k + 1)
				}
			}
			if ((grid[r][c] == "0")) {
				let total: number = (rowHits + colHits[c])
				if ((total > result)) {
					result = total
				}
			}
			c = (c + 1)
		}
		r = (r + 1)
	}
	return result
}

function example_1(): void {
	let grid: Array<Array<string>> = [["0", "E", "0", "0"], ["E", "0", "W", "E"], ["0", "E", "0", "0"]]
	if (!((maxKilledEnemies(grid) == 3))) { throw new Error('expect failed') }
}

function empty_grid(): void {
	if (!((maxKilledEnemies([]) == 0))) { throw new Error('expect failed') }
}

function all_walls(): void {
	if (!((maxKilledEnemies([["W", "W"], ["W", "W"]]) == 0))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	empty_grid()
	all_walls()
}
main()

