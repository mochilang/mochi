// Generated by Mochi TypeScript compiler

function wordFrequency(lines: Array<string>): Array<WordCount> {
  let counts: Record<string, number> = {};
  for (const line of lines) {
    let i: number = 0;
    let word: string = "";
    let n: number = line.length;
    while (i <= n) {
      let ch: string = "";
      if (i < n) {
        ch = line[i];
      } else {
        ch = " ";
      }
      if (ch == " ") {
        if (word != "") {
          let c: number = 0;
          if (Object.prototype.hasOwnProperty.call(counts, String(word))) {
            c = counts[word];
          }
          counts[word] = c + 1;
          word = "";
        }
      } else {
        word = word + ch;
      }
      i = i + 1;
    }
  }
  let result: Array<any> = [];
  for (const w of Object.keys(counts)) {
    result = result.concat([{ word: w, count: counts[w] }]);
  }
  let alpha: Array<any> = (() => {
    const _src = result;
    let _items = [];
    for (const wc of _src) {
      _items.push(wc);
    }
    let _pairs = _items.map((it) => {
      const wc = it;
      return { item: it, key: wc.word };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string")
        return ak < bk ? -1 : ak > bk ? 1 : 0;
      return String(ak) < String(bk) ? -1 : String(ak) > String(bk) ? 1 : 0;
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const wc of _items) {
      _res.push(wc);
    }
    return _res;
  })();
  let sorted: Array<any> = (() => {
    const _src = alpha;
    let _items = [];
    for (const wc of _src) {
      _items.push(wc);
    }
    let _pairs = _items.map((it) => {
      const wc = it;
      return { item: it, key: -wc.count };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string")
        return ak < bk ? -1 : ak > bk ? 1 : 0;
      return String(ak) < String(bk) ? -1 : String(ak) > String(bk) ? 1 : 0;
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const wc of _items) {
      _res.push(wc);
    }
    return _res;
  })();
  return sorted;
}

function example(): void {
  let lines: Array<string> = ["the day is sunny the the the sunny is is"];
  let res: Array<WordCount> = wordFrequency(lines);
  let e0: WordCount = res[0];
  if (!(e0.word == "the")) {
    throw new Error("expect failed");
  }
  if (!(e0.count == 4)) {
    throw new Error("expect failed");
  }
  let e1: WordCount = res[1];
  if (!(e1.word == "is")) {
    throw new Error("expect failed");
  }
  if (!(e1.count == 3)) {
    throw new Error("expect failed");
  }
  let e2: WordCount = res[2];
  if (!(e2.word == "sunny")) {
    throw new Error("expect failed");
  }
  if (!(e2.count == 2)) {
    throw new Error("expect failed");
  }
  let e3: WordCount = res[3];
  if (!(e3.word == "day")) {
    throw new Error("expect failed");
  }
  if (!(e3.count == 1)) {
    throw new Error("expect failed");
  }
}

function multiple_lines(): void {
  let lines: Array<string> = ["hello world", "hello mochi world"];
  let res: Array<WordCount> = wordFrequency(lines);
  let a0: WordCount = res[0];
  if (!(a0.word == "hello")) {
    throw new Error("expect failed");
  }
  if (!(a0.count == 2)) {
    throw new Error("expect failed");
  }
  let a1: WordCount = res[1];
  if (!(a1.word == "world")) {
    throw new Error("expect failed");
  }
  if (!(a1.count == 2)) {
    throw new Error("expect failed");
  }
  let a2: WordCount = res[2];
  if (!(a2.word == "mochi")) {
    throw new Error("expect failed");
  }
  if (!(a2.count == 1)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  type WordCount = {
    word: string;
    count: number;
  };
  example();
  multiple_lines();
}
main();
