// Generated by Mochi TypeScript compiler

type RandomizedSet = {
  nums: Array<number>;
  idx: Record<number, number>;
};

type InsertResult = {
  rs: RandomizedSet;
  ok: boolean;
};

type RemoveResult = {
  rs: RandomizedSet;
  ok: boolean;
};

function newSet(): RandomizedSet {
  return {
    nums: [],
    idx: {},
  };
}

function copyMap(src: Record<number, number>): Record<number, number> {
  let out: Record<number, number> = {};
  (globalThis as any).out = out;
  for (const kKey of Object.keys(src)) {
    const k: number = Number(kKey);
    out[k] = src[k];
  }
  return out;
}

function insert(rs: RandomizedSet, val: number): InsertResult {
  if (Object.prototype.hasOwnProperty.call(rs.idx, String(val))) {
    return {
      rs: rs,
      ok: false,
    };
  }
  let nums: Array<number> = rs.nums.concat([val]);
  (globalThis as any).nums = nums;
  let idxMap: Record<number, number> = copyMap(rs.idx);
  (globalThis as any).idxMap = idxMap;
  idxMap[val] = nums.length - 1;
  return {
    rs: {
      nums: nums,
      idx: idxMap,
    },
    ok: true,
  };
}

function remove(rs: RandomizedSet, val: number): RemoveResult {
  if ((!(Object.prototype.hasOwnProperty.call(rs.idx, String(val))))) {
    return {
      rs: rs,
      ok: false,
    };
  }
  let idx: number = rs.idx[val];
  (globalThis as any).idx = idx;
  let nums: Array<number> = rs.nums;
  (globalThis as any).nums = nums;
  let lastVal: number = nums[nums.length - 1];
  (globalThis as any).lastVal = lastVal;
  nums[idx] = lastVal;
  nums = nums.slice(0, nums.length - 1);
  let idxMap: Record<number, number> = copyMap(rs.idx);
  (globalThis as any).idxMap = idxMap;
  idxMap[lastVal] = idx;
  let newMap: Record<number, number> = {};
  (globalThis as any).newMap = newMap;
  for (const kKey of Object.keys(idxMap)) {
    const k: number = Number(kKey);
    if ((k != val)) {
      newMap[k] = idxMap[k];
    }
  }
  return {
    rs: {
      nums: nums,
      idx: newMap,
    },
    ok: true,
  };
}

function getRandom(rs: RandomizedSet): number {
  let i: number = performance.now() * 1000000 % rs.nums.length;
  (globalThis as any).i = i;
  return rs.nums[i];
}

function test_example(): void {
  let rs: RandomizedSet = newSet();
  (globalThis as any).rs = rs;
  let a: InsertResult = insert(rs, 1);
  (globalThis as any).a = a;
  rs = a.rs;
  if (!(a.ok == true)) throw new Error("expect failed");
  let b: RemoveResult = remove(rs, 2);
  (globalThis as any).b = b;
  rs = b.rs;
  if (!(b.ok == false)) throw new Error("expect failed");
  let c: InsertResult = insert(rs, 2);
  (globalThis as any).c = c;
  rs = c.rs;
  if (!(c.ok == true)) throw new Error("expect failed");
  let r: number = getRandom(rs);
  (globalThis as any).r = r;
  if (!(((r == 1) || (r == 2)) == true)) throw new Error("expect failed");
  let d: RemoveResult = remove(rs, 1);
  (globalThis as any).d = d;
  rs = d.rs;
  if (!(d.ok == true)) throw new Error("expect failed");
  let e: InsertResult = insert(rs, 2);
  (globalThis as any).e = e;
  rs = e.rs;
  if (!(e.ok == false)) throw new Error("expect failed");
  if (!(getRandom(rs) == 2)) throw new Error("expect failed");
}

function main(): void {
  test_example();
}
main();
