// Generated by Mochi TypeScript compiler

function numWays(n: number, k: number): number {
  if (((n == 0) || (k == 0))) {
    return 0;
  }
  if ((n == 1)) {
    return k;
  }
  let same: number = 0;
  (globalThis as any).same = same;
  let diff: number = k;
  (globalThis as any).diff = diff;
  let i: number = 2;
  (globalThis as any).i = i;
  while ((i <= n)) {
    let prevDiff: number = diff;
    (globalThis as any).prevDiff = prevDiff;
    diff = (same + diff) * (k - 1);
    same = prevDiff;
    i = i + 1;
  }
  return (same + diff);
}

function test_example_1(): void {
  if (!(numWays(3, 2) == 6)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(numWays(1, 1) == 1)) throw new Error("expect failed");
}

function test_no_posts(): void {
  if (!(numWays(0, 5) == 0)) throw new Error("expect failed");
}

function test_one_color(): void {
  if (!(numWays(3, 1) == 0)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_no_posts();
  test_one_color();
}
main();
