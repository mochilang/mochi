// Generated by Mochi TypeScript compiler

function minMeetingRooms(intervals: Array<Array<number>>): number {
  if (intervals.length == 0) {
    return 0;
  }
  let starts: Array<any> = (() => {
    const _src = intervals;
    let _items = [];
    for (const iv of _src) {
      _items.push(iv);
    }
    let _pairs = _items.map((it) => {
      const iv = it;
      return { item: it, key: iv[0] };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string")
        return ak < bk ? -1 : ak > bk ? 1 : 0;
      return String(ak) < String(bk) ? -1 : String(ak) > String(bk) ? 1 : 0;
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const iv of _items) {
      _res.push(iv[0]);
    }
    return _res;
  })();
  let ends: Array<any> = (() => {
    const _src = intervals;
    let _items = [];
    for (const iv of _src) {
      _items.push(iv);
    }
    let _pairs = _items.map((it) => {
      const iv = it;
      return { item: it, key: iv[1] };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string")
        return ak < bk ? -1 : ak > bk ? 1 : 0;
      return String(ak) < String(bk) ? -1 : String(ak) > String(bk) ? 1 : 0;
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const iv of _items) {
      _res.push(iv[1]);
    }
    return _res;
  })();
  let s: number = 0;
  let e: number = 0;
  let rooms: number = 0;
  let maxRooms: number = 0;
  let n: number = intervals.length;
  while (s < n) {
    if (starts[s] < ends[e]) {
      rooms = rooms + 1;
      s = s + 1;
      if (rooms > maxRooms) {
        maxRooms = rooms;
      }
    } else {
      rooms = rooms - 1;
      e = e + 1;
    }
  }
  return maxRooms;
}

function example_1(): void {
  if (
    !(
      minMeetingRooms([
        [0, 30],
        [5, 10],
        [15, 20],
      ]) == 2
    )
  ) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (
    !(
      minMeetingRooms([
        [7, 10],
        [2, 4],
      ]) == 1
    )
  ) {
    throw new Error("expect failed");
  }
}

function no_meetings(): void {
  if (!(minMeetingRooms([]) == 0)) {
    throw new Error("expect failed");
  }
}

function same_start_end(): void {
  if (
    !(
      minMeetingRooms([
        [0, 10],
        [10, 20],
      ]) == 1
    )
  ) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  no_meetings();
  same_start_end();
}
main();
