// Generated by Mochi TypeScript compiler

function wiggleSort(nums: Array<number>) : Array<number> {
	let i: number = 1
	while ((i < nums.length)) {
		if (((i % 2) == 1)) {
			if ((nums[i] < nums[(i - 1)])) {
				let temp: number = nums[i]
				nums[i] = nums[(i - 1)]
				nums[(i - 1)] = temp
			}
		} else {
			if ((nums[i] > nums[(i - 1)])) {
				let temp: number = nums[i]
				nums[i] = nums[(i - 1)]
				nums[(i - 1)] = temp
			}
		}
		i = (i + 1)
	}
	return nums
}

function example_1(): void {
	if (!(_equal(wiggleSort([3, 5, 2, 1, 6, 4]), [3, 5, 1, 6, 2, 4]))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!(_equal(wiggleSort([6, 6, 5, 6, 3, 8]), [6, 6, 5, 6, 3, 8]))) { throw new Error('expect failed') }
}

function already_wiggle(): void {
	if (!(_equal(wiggleSort([1, 3, 2, 4]), [1, 3, 2, 4]))) { throw new Error('expect failed') }
}

function two_elements(): void {
	if (!(_equal(wiggleSort([2, 1]), [1, 2]))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	already_wiggle()
	two_elements()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

