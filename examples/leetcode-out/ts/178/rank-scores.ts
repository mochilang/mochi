// Generated by Mochi TypeScript compiler

function rankScores(scores: Array<number>) : Array<number> {
	let sorted: Array<any> = (() => {
	const _src = scores;
	let _items = [];
	for (const s of _src) {
		_items.push(s);
	}
	let _pairs = _items.map(it => { const s = it; return {item: it, key: (-s)}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	const _res = [];
	for (const s of _items) {
		_res.push(s)
	}
	return _res;
})()
	let rankMap: Record<number, number> = {}
	let rank: number = 1
	let hasPrev: boolean = false
	let prev: number = 0
	for (const s of sorted) {
		if (((!hasPrev) || !_equal(s, prev))) {
			rankMap[s] = rank
			prev = s
			hasPrev = true
		}
		rank = (rank + 1)
	}
	let result: Array<number> = []
	for (const s of scores) {
		result = result.concat([rankMap[s]])
	}
	return result
}

function example_1(): void {
	if (!(_equal(rankScores([100, 90, 90, 80]), [1, 2, 2, 4]))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!(_equal(rankScores([10, 20, 30]), [3, 2, 1]))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

