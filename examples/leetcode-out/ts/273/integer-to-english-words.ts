// Generated by Mochi TypeScript compiler

function convertBelow1000(n: number): string {
  let ones: Array<string> = [
    "",
    "One",
    "Two",
    "Three",
    "Four",
    "Five",
    "Six",
    "Seven",
    "Eight",
    "Nine",
  ];
  (globalThis as any).ones = ones;
  let teens: Array<string> = [
    "Ten",
    "Eleven",
    "Twelve",
    "Thirteen",
    "Fourteen",
    "Fifteen",
    "Sixteen",
    "Seventeen",
    "Eighteen",
    "Nineteen",
  ];
  (globalThis as any).teens = teens;
  let tens: Array<string> = [
    "",
    "",
    "Twenty",
    "Thirty",
    "Forty",
    "Fifty",
    "Sixty",
    "Seventy",
    "Eighty",
    "Ninety",
  ];
  (globalThis as any).tens = tens;
  let words: string = "";
  (globalThis as any).words = words;
  let num: number = n;
  (globalThis as any).num = num;
  if ((num >= 100)) {
    let hundred: number = Math.trunc(num / 100);
    (globalThis as any).hundred = hundred;
    words = words + ones[hundred] + " Hundred";
    num = num % 100;
    if ((num > 0)) {
      words = words + " ";
    }
  }
  if ((num >= 20)) {
    let t: number = Math.trunc(num / 10);
    (globalThis as any).t = t;
    words = words + tens[t];
    num = num % 10;
    if ((num > 0)) {
      words = words + " " + ones[num];
    }
  } else if ((num >= 10)) {
    words = words + teens[num - 10];
  } else if ((num > 0)) {
    words = words + ones[num];
  }
  return words;
}

function numberToWords(num: number): string {
  if ((num == 0)) {
    return "Zero";
  }
  let groups: Array<string> = [
    "",
    "Thousand",
    "Million",
    "Billion",
  ];
  (globalThis as any).groups = groups;
  let parts: Array<string> = [];
  (globalThis as any).parts = parts;
  let n: number = num;
  (globalThis as any).n = n;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((n > 0)) {
    let chunk: number = n % 1000;
    (globalThis as any).chunk = chunk;
    if ((chunk > 0)) {
      let chunkWords: string = convertBelow1000(chunk);
      (globalThis as any).chunkWords = chunkWords;
      let part: string = chunkWords;
      (globalThis as any).part = part;
      if ((groups[i] != "")) {
        part = part + " " + groups[i];
      }
      parts = [part].concat(parts);
    }
    n = Math.trunc(n / 1000);
    i = i + 1;
  }
  let result: string = "";
  (globalThis as any).result = result;
  let j: number = 0;
  (globalThis as any).j = j;
  while ((j < parts.length)) {
    result = result + parts[j];
    if ((j < (parts.length - 1))) {
      result = result + " ";
    }
    j = j + 1;
  }
  return result;
}

function test_example_1(): void {
  if (!(numberToWords(123) == "One Hundred Twenty Three")) {
    throw new Error("expect failed");
  }
}

function test_example_2(): void {
  if (!(numberToWords(12345) == "Twelve Thousand Three Hundred Forty Five")) {
    throw new Error("expect failed");
  }
}

function test_example_3(): void {
  if (
    !(numberToWords(1234567) ==
      "One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven")
  ) throw new Error("expect failed");
}

function test_zero(): void {
  if (!(numberToWords(0) == "Zero")) throw new Error("expect failed");
}

function test_million_and_tens(): void {
  if (!(numberToWords(1000010) == "One Million Ten")) {
    throw new Error("expect failed");
  }
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_zero();
  test_million_and_tens();
}
main();
