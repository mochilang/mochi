// Generated by Mochi TypeScript compiler

function isPowerOfThree(n: number): boolean {
  if (n <= 0) {
    return false;
  }
  let value: number = n;
  while (value % 3 == 0) {
    value = Math.trunc(value / 3);
  }
  return value == 1;
}

function example_1(): void {
  if (!(isPowerOfThree(27) == true)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  if (!(isPowerOfThree(0) == false)) {
    throw new Error("expect failed");
  }
}

function example_3(): void {
  if (!(isPowerOfThree(9) == true)) {
    throw new Error("expect failed");
  }
}

function one_is_power(): void {
  if (!(isPowerOfThree(1) == true)) {
    throw new Error("expect failed");
  }
}

function negative(): void {
  if (!(isPowerOfThree(-3) == false)) {
    throw new Error("expect failed");
  }
}

function not_power(): void {
  if (!(isPowerOfThree(45) == false)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  example_1();
  example_2();
  example_3();
  one_is_power();
  negative();
  not_power();
}
main();
