// Generated by Mochi TypeScript compiler

function isPowerOfThree(n: number): boolean {
  if ((n <= 0)) {
    return false;
  }
  let value: number = n;
  (globalThis as any).value = value;
  while (((value % 3) == 0)) {
    value = Math.trunc(value / 3);
  }
  return (value == 1);
}

function test_example_1(): void {
  if (!(isPowerOfThree(27) == true)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(isPowerOfThree(0) == false)) throw new Error("expect failed");
}

function test_example_3(): void {
  if (!(isPowerOfThree(9) == true)) throw new Error("expect failed");
}

function test_one_is_power(): void {
  if (!(isPowerOfThree(1) == true)) throw new Error("expect failed");
}

function test_negative(): void {
  if (!(isPowerOfThree(-3) == false)) throw new Error("expect failed");
}

function test_not_power(): void {
  if (!(isPowerOfThree(45) == false)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_one_is_power();
  test_negative();
  test_not_power();
}
main();
