// Generated by Mochi TypeScript compiler

function removeElement(nums: Array<number>, val: number) : number {
	let k: number = 0
	let i: number = 0
	while ((i < nums.length)) {
		if ((nums[i] != val)) {
			nums[k] = nums[i]
			k = (k + 1)
		}
		i = (i + 1)
	}
	return k
}

function example_1(): void {
	let nums: Array<number> = [3, 2, 2, 3]
	let k: number = removeElement(nums, 3)
	if (!((k == 2))) { throw new Error('expect failed') }
	if (!(_equal(nums.slice(0, k), [2, 2]))) { throw new Error('expect failed') }
}

function example_2(): void {
	let nums: Array<number> = [0, 1, 2, 2, 3, 0, 4, 2]
	let k: number = removeElement(nums, 2)
	if (!((k == 5))) { throw new Error('expect failed') }
	if (!(_equal(nums.slice(0, k), [0, 1, 3, 0, 4]))) { throw new Error('expect failed') }
}

function no_removal(): void {
	let nums: Array<number> = [1, 2, 3]
	let k: number = removeElement(nums, 4)
	if (!((k == 3))) { throw new Error('expect failed') }
	if (!(_equal(nums.slice(0, k), [1, 2, 3]))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	no_removal()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

