// Generated by Mochi TypeScript compiler

function productExceptSelf(nums: Array<number>): Array<number> {
  let n: number = nums.length;
  (globalThis as any).n = n;
  if ((n == 0)) {
    return [];
  }
  let result: Array<number> = [];
  (globalThis as any).result = result;
  let prefix: number = 1;
  (globalThis as any).prefix = prefix;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < n)) {
    result = result.concat([prefix]);
    prefix = prefix * nums[i];
    i = i + 1;
  }
  let suffix: number = 1;
  (globalThis as any).suffix = suffix;
  i = n - 1;
  while ((i >= 0)) {
    result[i] = result[i] * suffix;
    suffix = suffix * nums[i];
    i = i - 1;
  }
  return result;
}

function test_example_1(): void {
  if (
    !(_equal(
      productExceptSelf([
        1,
        2,
        3,
        4,
      ]),
      [
        24,
        12,
        8,
        6,
      ],
    ))
  ) throw new Error("expect failed");
}

function test_example_2(): void {
  if (
    !(_equal(
      productExceptSelf([
        0,
        1,
        2,
        3,
      ]),
      [
        6,
        0,
        0,
        0,
      ],
    ))
  ) throw new Error("expect failed");
}

function test_example_3(): void {
  if (
    !(_equal(
      productExceptSelf([
        -1,
        1,
        0,
        -3,
        3,
      ]),
      [
        0,
        0,
        9,
        0,
        0,
      ],
    ))
  ) throw new Error("expect failed");
}

function test_single_element(): void {
  if (!(_equal(productExceptSelf([5]), [1]))) throw new Error("expect failed");
}

function test_two_zeros(): void {
  if (
    !(_equal(
      productExceptSelf([
        0,
        0,
      ]),
      [
        0,
        0,
      ],
    ))
  ) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_single_element();
  test_two_zeros();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
