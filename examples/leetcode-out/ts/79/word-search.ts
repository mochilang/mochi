// Generated by Mochi TypeScript compiler

function exist(board: Array<Array<string>>, word: string): boolean {
  let m: number = board.length;
  (globalThis as any).m = m;
  if ((m == 0)) {
    return false;
  }
  let n: number = board[0].length;
  (globalThis as any).n = n;
  let visited: Array<Array<boolean>> = [];
  (globalThis as any).visited = visited;
  let r: number = 0;
  (globalThis as any).r = r;
  while ((r < m)) {
    let row: Array<boolean> = [];
    (globalThis as any).row = row;
    let c: number = 0;
    (globalThis as any).c = c;
    while ((c < n)) {
      row = row.concat([false]);
      c = c + 1;
    }
    visited = visited.concat([row]);
    r = r + 1;
  }
  function dfs(r: number, c: number, idx: number): boolean {
    if ((idx == word.length)) {
      return true;
    }
    if (((((r < 0) || (r >= m)) || (c < 0)) || (c >= n))) {
      return false;
    }
    if (visited[r][c]) {
      return false;
    }
    if ((board[r][c] != _indexString(word, idx))) {
      return false;
    }
    visited[r][c] = true;
    if (
      (((dfs(r + 1, c, idx + 1) || dfs(r - 1, c, idx + 1)) ||
        dfs(r, c + 1, idx + 1)) || dfs(r, c - 1, idx + 1))
    ) {
      visited[r][c] = false;
      return true;
    }
    visited[r][c] = false;
    return false;
  }
  for (let i: number = 0; i < m; i++) {
    for (let j: number = 0; j < n; j++) {
      if (dfs(i, j, 0)) {
        return true;
      }
    }
  }
  return false;
}

function test_example_1(): void {
  if (!(exist(board, "ABCCED") == true)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(exist(board, "SEE") == true)) throw new Error("expect failed");
}

function test_example_3(): void {
  if (!(exist(board, "ABCB") == false)) throw new Error("expect failed");
}

function main(): void {
  let board: Array<Array<string>> = [
    [
      "A",
      "B",
      "C",
      "E",
    ],
    [
      "S",
      "F",
      "C",
      "S",
    ],
    [
      "A",
      "D",
      "E",
      "E",
    ],
  ];
  (globalThis as any).board = board;
  test_example_1();
  test_example_2();
  test_example_3();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
