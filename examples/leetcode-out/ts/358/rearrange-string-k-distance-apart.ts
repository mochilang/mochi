// Generated by Mochi TypeScript compiler

function rearrangeString(s: string, k: number): string {
  if ((k <= 1)) {
    return s;
  }
  let counts: Record<string, number> = {};
  (globalThis as any).counts = counts;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < s.length)) {
    let ch: string = _indexString(s, i);
    (globalThis as any).ch = ch;
    if (Object.prototype.hasOwnProperty.call(counts, String(ch))) {
      counts[ch] = counts[ch] + 1;
    } else {
      counts[ch] = 1;
    }
    i = i + 1;
  }
  let cooldown: Record<string, number> = {};
  (globalThis as any).cooldown = cooldown;
  let result: string = "";
  (globalThis as any).result = result;
  let step: number = 0;
  (globalThis as any).step = step;
  let n: number = s.length;
  (globalThis as any).n = n;
  while ((result.length < n)) {
    let bestChar: string = "";
    (globalThis as any).bestChar = bestChar;
    let bestCount: number = -1;
    (globalThis as any).bestCount = bestCount;
    for (const ch of Object.keys(counts)) {
      let remaining: number = counts[ch];
      (globalThis as any).remaining = remaining;
      let next: number = 0;
      (globalThis as any).next = next;
      if (Object.prototype.hasOwnProperty.call(cooldown, String(ch))) {
        next = cooldown[ch];
      }
      if (((remaining > 0) && (next <= step))) {
        if ((remaining > bestCount)) {
          bestCount = remaining;
          bestChar = ch;
        }
      }
    }
    if ((bestCount == (-1))) {
      return "";
    }
    result = result + bestChar;
    counts[bestChar] = counts[bestChar] - 1;
    cooldown[bestChar] = step + k;
    step = step + 1;
  }
  return result;
}

function sortString(t: string): string {
  let chars: Array<string> = [];
  (globalThis as any).chars = chars;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < t.length)) {
    chars = chars.concat([_indexString(t, i)]);
    i = i + 1;
  }
  let sorted: Array<string> = (() => {
    const _src = chars;
    let _items = [];
    for (const c of _src) {
      _items.push(c);
    }
    let _pairs = _items.map((it) => {
      const c = it;
      return { item: it, key: c };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const c of _items) {
      _res.push(c);
    }
    return _res;
  })();
  (globalThis as any).sorted = sorted;
  let out: string = "";
  (globalThis as any).out = out;
  for (const c of sorted) {
    out = out + c;
  }
  return out;
}

function isValid(result: string, original: string, k: number): boolean {
  if ((result == "")) {
    return true;
  }
  if ((sortString(result) != sortString(original))) {
    return false;
  }
  let pos: Record<string, number> = {};
  (globalThis as any).pos = pos;
  let i: number = 0;
  (globalThis as any).i = i;
  while ((i < result.length)) {
    let ch: string = _indexString(result, i);
    (globalThis as any).ch = ch;
    if (Object.prototype.hasOwnProperty.call(pos, String(ch))) {
      if (((i - pos[ch]) < k)) {
        return false;
      }
    }
    pos[ch] = i;
    i = i + 1;
  }
  return true;
}

function test_example_1(): void {
  let res: string = rearrangeString("aabbcc", 3);
  (globalThis as any).res = res;
  if (!(isValid(res, "aabbcc", 3))) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(rearrangeString("aaabc", 3) == "")) throw new Error("expect failed");
}

function test_example_3(): void {
  let res: string = rearrangeString("aaadbbcc", 2);
  (globalThis as any).res = res;
  if (!(isValid(res, "aaadbbcc", 2))) throw new Error("expect failed");
}

function test_k_one(): void {
  let res: string = rearrangeString("aab", 1);
  (globalThis as any).res = res;
  if (!(res == "aab")) throw new Error("expect failed");
}

function test_single_char(): void {
  if (!(rearrangeString("a", 2) == "a")) throw new Error("expect failed");
}

function test_impossible(): void {
  if (!(rearrangeString("aaa", 2) == "")) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_k_one();
  test_single_char();
  test_impossible();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
