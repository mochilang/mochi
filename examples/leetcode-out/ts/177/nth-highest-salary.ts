// Generated by Mochi TypeScript compiler

let employees: Array<any> = [
  { id: 1, salary: 100 },
  { id: 2, salary: 200 },
  { id: 3, salary: 300 },
  { id: 4, salary: 300 },
];

function nthHighestSalary(employees: Array<Employee>, n: number): number {
  let uniqList: Array<number> = [];
  for (const e of employees) {
    let seen: boolean = false;
    for (const s of uniqList) {
      if (s == e.salary) {
        seen = true;
        break;
      }
    }
    if (!seen) {
      uniqList = uniqList.concat([e.salary]);
    }
  }
  let sorted: Array<any> = (() => {
    const _src = uniqList;
    let _items = [];
    for (const v of _src) {
      _items.push(v);
    }
    let _pairs = _items.map((it) => {
      const v = it;
      return { item: it, key: -v };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string")
        return ak < bk ? -1 : ak > bk ? 1 : 0;
      return String(ak) < String(bk) ? -1 : String(ak) > String(bk) ? 1 : 0;
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const v of _items) {
      _res.push(v);
    }
    return _res;
  })();
  if (n <= sorted.length) {
    return sorted[n - 1];
  }
  return 0;
}

function first_highest(): void {
  if (!(nthHighestSalary(employees, 1) == 300)) {
    throw new Error("expect failed");
  }
}

function second_highest(): void {
  if (!(nthHighestSalary(employees, 2) == 200)) {
    throw new Error("expect failed");
  }
}

function too_high(): void {
  if (!(nthHighestSalary(employees, 5) == 0)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  type Employee = {
    id: number;
    salary: number;
  };
  first_highest();
  second_highest();
  too_high();
}
main();
