// Generated by Mochi TypeScript compiler

function gcd(a: number, b: number): number {
  let x: number = a;
  (globalThis as any).x = x;
  if ((x < 0)) {
    x = -x;
  }
  let y: number = b;
  (globalThis as any).y = y;
  if ((y < 0)) {
    y = -y;
  }
  while ((y != 0)) {
    let temp: number = x % y;
    (globalThis as any).temp = temp;
    x = y;
    y = temp;
  }
  return x;
}

function canMeasureWater(
  jug1Capacity: number,
  jug2Capacity: number,
  targetCapacity: number,
): boolean {
  if ((targetCapacity == 0)) {
    return true;
  }
  if (((jug1Capacity + jug2Capacity) < targetCapacity)) {
    return false;
  }
  if (
    (((jug1Capacity == targetCapacity) || (jug2Capacity == targetCapacity)) ||
      ((jug1Capacity + jug2Capacity) == targetCapacity))
  ) {
    return true;
  }
  let g: number = gcd(jug1Capacity, jug2Capacity);
  (globalThis as any).g = g;
  return ((targetCapacity % g) == 0);
}

function test_example_1(): void {
  if (!(canMeasureWater(3, 5, 4) == true)) throw new Error("expect failed");
}

function test_example_2(): void {
  if (!(canMeasureWater(2, 6, 5) == false)) throw new Error("expect failed");
}

function test_example_3(): void {
  if (!(canMeasureWater(1, 2, 3) == true)) throw new Error("expect failed");
}

function test_zero_target(): void {
  if (!(canMeasureWater(1, 2, 0) == true)) throw new Error("expect failed");
}

function test_unreachable(): void {
  if (!(canMeasureWater(1, 1, 12) == false)) throw new Error("expect failed");
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_zero_target();
  test_unreachable();
}
main();
