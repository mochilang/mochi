// Generated by Mochi TypeScript compiler

function Leaf(): Record<string, any> {
  return { "__name": "Leaf" };
}

function _Node(
  left: Record<string, any>,
  value: number,
  right: Record<string, any>,
): Record<string, any> {
  return {
    "__name": "Node",
    "left": left,
    "value": value,
    "right": right,
  };
}

function isLeaf(t: Record<string, any>): boolean {
  return _equal(t["__name"], "Leaf");
}

function left(t: Record<string, any>): Record<string, any> {
  return t["left"];
}

function right(t: Record<string, any>): Record<string, any> {
  return t["right"];
}

function value(t: Record<string, any>): number {
  return t["value"];
}

function minInt(a: number, b: number): number {
  if ((a < b)) {
    return a;
  }
  return b;
}

function maxInt(a: number, b: number): number {
  if ((a > b)) {
    return a;
  }
  return b;
}

function helper(node: Record<string, any>): Record<string, any> {
  if (isLeaf(node)) {
    return {
      "min": 2147483647,
      "max": (-2147483648),
      "size": 0,
      "largest": 0,
      "bst": true,
    };
  }
  let l: Record<string, any> = helper(left(node));
  (globalThis as any).l = l;
  let r: Record<string, any> = helper(right(node));
  (globalThis as any).r = r;
  let minVal: number = value(node);
  (globalThis as any).minVal = minVal;
  let maxVal: number = value(node);
  (globalThis as any).maxVal = maxVal;
  if ((!isLeaf(left(node)))) {
    minVal = minInt(minVal, l["min"]);
    maxVal = maxInt(maxVal, l["max"]);
  }
  if ((!isLeaf(right(node)))) {
    minVal = minInt(minVal, r["min"]);
    maxVal = maxInt(maxVal, r["max"]);
  }
  let size: number = ((l["size"]) + (r["size"])) + 1;
  (globalThis as any).size = size;
  let bst: boolean = false;
  (globalThis as any).bst = bst;
  if (
    ((((l["bst"]) && (r["bst"])) && (value(node) > (l["max"]))) &&
      (value(node) < (r["min"])))
  ) {
    bst = true;
  }
  let largest: number = size;
  (globalThis as any).largest = largest;
  if ((!bst)) {
    let ll: number = l["largest"];
    (globalThis as any).ll = ll;
    let rl: number = r["largest"];
    (globalThis as any).rl = rl;
    largest = maxInt(ll, rl);
  }
  return {
    "min": minVal,
    "max": maxVal,
    "size": size,
    "largest": largest,
    "bst": bst,
  };
}

function largestBSTSubtree(root: Record<string, any>): number {
  let info: Record<string, any> = helper(root);
  (globalThis as any).info = info;
  return info["largest"];
}

function test_example_1(): void {
  if (!(largestBSTSubtree(example1) == 3)) throw new Error("expect failed");
}

function test_single_node(): void {
  if (!(largestBSTSubtree(_Node(Leaf(), 1, Leaf())) == 1)) {
    throw new Error("expect failed");
  }
}

function test_already_bst(): void {
  let tree: Record<string, any> = _Node(
    _Node(Leaf(), 2, Leaf()),
    3,
    _Node(Leaf(), 4, _Node(Leaf(), 5, Leaf())),
  );
  (globalThis as any).tree = tree;
  if (!(largestBSTSubtree(tree) == 4)) throw new Error("expect failed");
}

function test_empty(): void {
  if (!(largestBSTSubtree(Leaf()) == 0)) throw new Error("expect failed");
}

function main(): void {
  let example1: Record<string, any> = _Node(
    _Node(_Node(Leaf(), 1, Leaf()), 5, _Node(Leaf(), 8, Leaf())),
    10,
    _Node(Leaf(), 15, _Node(Leaf(), 7, Leaf())),
  );
  (globalThis as any).example1 = example1;
  test_example_1();
  test_single_node();
  test_already_bst();
  test_empty();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
