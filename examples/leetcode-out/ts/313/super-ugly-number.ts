// Generated by Mochi TypeScript compiler

function nthSuperUglyNumber(n: number, primes: Array<number>) : number {
	let k: number = primes.length
	let indices: Array<number> = []
	let t: number = 0
	while ((t < k)) {
		indices = indices.concat([0])
		t = (t + 1)
	}
	let uglies: Array<number> = [1]
	let count: number = 1
	while ((count < n)) {
		let next: number = 1000000000
		let i: number = 0
		while ((i < k)) {
			let candidate: number = (primes[i] * uglies[indices[i]])
			if ((candidate < next)) {
				next = candidate
			}
			i = (i + 1)
		}
		uglies = uglies.concat([next])
		let j: number = 0
		while ((j < k)) {
			if (((primes[j] * uglies[indices[j]]) == next)) {
				indices[j] = (indices[j] + 1)
			}
			j = (j + 1)
		}
		count = (count + 1)
	}
	return uglies[(n - 1)]
}

function example_1(): void {
	if (!((nthSuperUglyNumber(12, [2, 7, 13, 19]) == 32))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((nthSuperUglyNumber(1, [2, 3, 5]) == 1))) { throw new Error('expect failed') }
}

function small_primes(): void {
	if (!((nthSuperUglyNumber(3, [2, 3, 5]) == 3))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	small_primes()
}
main()

