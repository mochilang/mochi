// Generated by Mochi TypeScript compiler

function reverseList(xs: Array<number>) : Array<number> {
	let out: Array<number> = []
	let i: number = (xs.length - 1)
	while ((i >= 0)) {
		out = out.concat([xs[i]])
		i = (i - 1)
	}
	return out
}

function zigzagLevelOrder(root: Tree) : Array<Array<number>> {
	if ((() => {
	const _t = root;
	if (_t.__name === "Leaf") { return true }
	return false
})()) {
		return []
	}
	let result: Array<Array<number>> = []
	let queue: Array<any> = [root]
	let level: number = 0
	while ((queue.length > 0)) {
		let vals: Array<number> = []
		let next: Array<any> = []
		for (const node of queue) {
			if ((() => {
	const _t = node;
	if (_t.__name === "Leaf") { return false }
	return true
})()) {
				vals = vals.concat([node.value])
				if ((() => {
	const _t = node.left;
	if (_t.__name === "Leaf") { return false }
	return true
})()) {
					next = next.concat([node.left])
				}
				if ((() => {
	const _t = node.right;
	if (_t.__name === "Leaf") { return false }
	return true
})()) {
					next = next.concat([node.right])
				}
			}
		}
		if (((level % 2) == 1)) {
			vals = reverseList(vals)
		}
		result = result.concat([vals])
		queue = next
		level = (level + 1)
	}
	return result
}

function example_1(): void {
	let tree: Node = {__name: "Node", left: {__name: "Node", left: {__name: "Leaf"}, value: 9, right: {__name: "Leaf"}}, value: 3, right: {__name: "Node", left: {__name: "Node", left: {__name: "Leaf"}, value: 15, right: {__name: "Leaf"}}, value: 20, right: {__name: "Node", left: {__name: "Leaf"}, value: 7, right: {__name: "Leaf"}}}}
	if (!(_equal(zigzagLevelOrder(tree), [[3], [20, 9], [15, 7]]))) { throw new Error('expect failed') }
}

function single_node(): void {
	if (!(_equal(zigzagLevelOrder({__name: "Node", left: {__name: "Leaf"}, value: 1, right: {__name: "Leaf"}}), [[1]]))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!(_equal(zigzagLevelOrder({__name: "Leaf"}), []))) { throw new Error('expect failed') }
}

function unbalanced(): void {
	let tree: Node = {__name: "Node", left: {__name: "Node", left: {__name: "Node", left: {__name: "Leaf"}, value: 4, right: {__name: "Leaf"}}, value: 2, right: {__name: "Leaf"}}, value: 1, right: {__name: "Node", left: {__name: "Leaf"}, value: 3, right: {__name: "Node", left: {__name: "Leaf"}, value: 5, right: {__name: "Leaf"}}}}
	if (!(_equal(zigzagLevelOrder(tree), [[1], [3, 2], [4, 5]]))) { throw new Error('expect failed') }
}

function main(): void {
	type Leaf = {
		__name: "Leaf";
	}
	
	type Node = {
		__name: "Node";
		left: any;
		value: number;
		right: any;
	}
	
	type Tree = Leaf | Node
	example_1()
	single_node()
	empty()
	unbalanced()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

