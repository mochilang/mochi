// Generated by Mochi TypeScript compiler

function isLeaf(t: Tree): boolean {
  return (() => {
    const _t = t;
    if (_t.__name === "Leaf") {
      return true;
    }
    return false;
  })();
}

function hasPathSum(root: Tree, target: number): boolean {
  function nodeSum(l: any, v: number, r: any, remaining: number): boolean {
    let leftLeaf: boolean = isLeaf(l);
    let rightLeaf: boolean = isLeaf(r);
    if (leftLeaf && rightLeaf) {
      return remaining == 0;
    }
    return hasPathSum(l, remaining) || hasPathSum(r, remaining);
  }
  return (() => {
    const _t = root;
    if (_t.__name === "Leaf") {
      return false;
    }
    if (_t.__name === "Node") {
      return ((l, v, r) => nodeSum(l, v, r, target - v))(
        _t.left,
        _t.value,
        _t.right,
      );
    }
    return undefined;
  })();
}

function example_1(): void {
  let root: Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 7,
        right: { __name: "Leaf" },
      },
      value: 11,
      right: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 2,
        right: { __name: "Leaf" },
      },
    },
    value: 4,
    right: { __name: "Leaf" },
  };
  let tree: Node = {
    __name: "Node",
    left: root,
    value: 5,
    right: {
      __name: "Node",
      left: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 13,
        right: { __name: "Leaf" },
      },
      value: 8,
      right: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 4,
        right: {
          __name: "Node",
          left: { __name: "Leaf" },
          value: 1,
          right: { __name: "Leaf" },
        },
      },
    },
  };
  if (!(hasPathSum(tree, 22) == true)) {
    throw new Error("expect failed");
  }
}

function example_2(): void {
  let tree: Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 2,
      right: { __name: "Leaf" },
    },
    value: 1,
    right: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 3,
      right: { __name: "Leaf" },
    },
  };
  if (!(hasPathSum(tree, 5) == false)) {
    throw new Error("expect failed");
  }
}

function example_3(): void {
  let tree: Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 2,
      right: { __name: "Leaf" },
    },
    value: 1,
    right: { __name: "Leaf" },
  };
  if (!(hasPathSum(tree, 0) == false)) {
    throw new Error("expect failed");
  }
}

function single_node(): void {
  if (
    !(
      hasPathSum(
        {
          __name: "Node",
          left: { __name: "Leaf" },
          value: 5,
          right: { __name: "Leaf" },
        },
        5,
      ) == true
    )
  ) {
    throw new Error("expect failed");
  }
}

function empty(): void {
  if (!(hasPathSum({ __name: "Leaf" }, 1) == false)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  type Leaf = {
    __name: "Leaf";
  };

  type Node = {
    __name: "Node";
    left: any;
    value: number;
    right: any;
  };

  type Tree = Leaf | Node;
  example_1();
  example_2();
  example_3();
  single_node();
  empty();
}
main();
