// Generated by Mochi TypeScript compiler

type Leaf = {
  __name: "Leaf";
};

type _Node = {
  __name: "Node";
  left: Tree;
  value: number;
  right: Tree;
};

type Tree = Leaf | _Node;

function isLeaf(t: Tree): boolean {
  return (() => {
    const _t = t;
    if (_t.__name === "Leaf") return true;
    return false;
  })();
}

function hasPathSum(root: Tree, target: number): boolean {
  function nodeSum(l: Tree, v: number, r: Tree, remaining: number): boolean {
    let leftLeaf: boolean = isLeaf(l);
    (globalThis as any).leftLeaf = leftLeaf;
    let rightLeaf: boolean = isLeaf(r);
    (globalThis as any).rightLeaf = rightLeaf;
    if ((leftLeaf && rightLeaf)) {
      return (remaining == 0);
    }
    return (hasPathSum(l, remaining) || hasPathSum(r, remaining));
  }
  return (() => {
    const _t = root;
    if (_t.__name === "Leaf") return false;
    if (_t.__name === "Node") {
      return ((l, v, r) => nodeSum(l, v, r, target - v))(
        _t.left,
        _t.value,
        _t.right,
      );
    }
    return undefined;
  })();
}

function test_example_1(): void {
  let root: _Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 7,
        right: { __name: "Leaf" },
      },
      value: 11,
      right: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 2,
        right: { __name: "Leaf" },
      },
    },
    value: 4,
    right: { __name: "Leaf" },
  };
  (globalThis as any).root = root;
  let tree: _Node = {
    __name: "Node",
    left: root,
    value: 5,
    right: {
      __name: "Node",
      left: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 13,
        right: { __name: "Leaf" },
      },
      value: 8,
      right: {
        __name: "Node",
        left: { __name: "Leaf" },
        value: 4,
        right: {
          __name: "Node",
          left: { __name: "Leaf" },
          value: 1,
          right: { __name: "Leaf" },
        },
      },
    },
  };
  (globalThis as any).tree = tree;
  if (!(hasPathSum(tree, 22) == true)) throw new Error("expect failed");
}

function test_example_2(): void {
  let tree: _Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 2,
      right: { __name: "Leaf" },
    },
    value: 1,
    right: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 3,
      right: { __name: "Leaf" },
    },
  };
  (globalThis as any).tree = tree;
  if (!(hasPathSum(tree, 5) == false)) throw new Error("expect failed");
}

function test_example_3(): void {
  let tree: _Node = {
    __name: "Node",
    left: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 2,
      right: { __name: "Leaf" },
    },
    value: 1,
    right: { __name: "Leaf" },
  };
  (globalThis as any).tree = tree;
  if (!(hasPathSum(tree, 0) == false)) throw new Error("expect failed");
}

function test_single_node(): void {
  if (
    !(hasPathSum({
      __name: "Node",
      left: { __name: "Leaf" },
      value: 5,
      right: { __name: "Leaf" },
    }, 5) == true)
  ) throw new Error("expect failed");
}

function test_empty(): void {
  if (!(hasPathSum({ __name: "Leaf" }, 1) == false)) {
    throw new Error("expect failed");
  }
}

function main(): void {
  test_example_1();
  test_example_2();
  test_example_3();
  test_single_node();
  test_empty();
}
main();
