// Generated by Mochi TypeScript compiler

function countAndSay(n: number): string {
  let term: string = "1";
  (globalThis as any).term = term;
  let i: number = 1;
  (globalThis as any).i = i;
  while ((i < n)) {
    let next: string = "";
    (globalThis as any).next = next;
    let j: number = 0;
    (globalThis as any).j = j;
    while ((j < term.length)) {
      let k: number = j;
      (globalThis as any).k = k;
      while ((k < term.length)) {
        if ((_indexString(term, k) == _indexString(term, j))) {
          k = k + 1;
        } else {
          break;
        }
      }
      let count: number = k - j;
      (globalThis as any).count = count;
      next = next + String(count) + _indexString(term, j);
      j = k;
    }
    term = next;
    i = i + 1;
  }
  return term;
}

function test_n___1(): void {
  if (!(countAndSay(1) == "1")) throw new Error("expect failed");
}

function test_n___4(): void {
  if (!(countAndSay(4) == "1211")) throw new Error("expect failed");
}

function test_n___5(): void {
  if (!(countAndSay(5) == "111221")) throw new Error("expect failed");
}

function main(): void {
  test_n___1();
  test_n___4();
  test_n___5();
}
function _indexString(s: string, i: number): string {
  const runes = Array.from(s);
  if (i < 0) i += runes.length;
  if (i < 0 || i >= runes.length) throw new Error("index out of range");
  return runes[i];
}

main();
