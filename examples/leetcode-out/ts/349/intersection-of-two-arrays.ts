// Generated by Mochi TypeScript compiler

function intersection(nums1: Array<number>, nums2: Array<number>) : Array<number> {
	let set1: Record<number, boolean> = {}
	for (const n of nums1) {
		set1[n] = true
	}
	let seen: Record<number, boolean> = {}
	let result: Array<number> = []
	for (const n of nums2) {
		if (Object.prototype.hasOwnProperty.call(set1, String(n))) {
			if ((!(Object.prototype.hasOwnProperty.call(seen, String(n))))) {
				result = result.concat([n])
				seen[n] = true
			}
		}
	}
	return result
}

function example_1(): void {
	let out: Array<number> = intersection([1, 2, 2, 1], [2, 2])
	let sorted: Array<any> = (() => {
	const _src = out;
	let _items = [];
	for (const x of _src) {
		_items.push(x);
	}
	let _pairs = _items.map(it => { const x = it; return {item: it, key: x}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	const _res = [];
	for (const x of _items) {
		_res.push(x)
	}
	return _res;
})()
	if (!(_equal(sorted, [2]))) { throw new Error('expect failed') }
}

function example_2(): void {
	let out: Array<number> = intersection([4, 9, 5], [9, 4, 9, 8, 4])
	let sorted: Array<any> = (() => {
	const _src = out;
	let _items = [];
	for (const x of _src) {
		_items.push(x);
	}
	let _pairs = _items.map(it => { const x = it; return {item: it, key: x}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	const _res = [];
	for (const x of _items) {
		_res.push(x)
	}
	return _res;
})()
	if (!(_equal(sorted, [4, 9]))) { throw new Error('expect failed') }
}

function empty_first(): void {
	if (!(_equal(intersection([], [1, 2]), []))) { throw new Error('expect failed') }
}

function empty_second(): void {
	if (!(_equal(intersection([1, 2, 3], []), []))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	empty_first()
	empty_second()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

