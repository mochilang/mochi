// Generated by Mochi TypeScript compiler

function subsets(nums: Array<number>) : Array<Array<number>> {
	let result: Array<Array<any>> = [[]]
	for (const num of nums) {
		let newSets: Array<any> = []
		let i: number = 0
		while ((i < result.length)) {
			let subset: Array<any> = result[i]
			newSets = newSets.concat([subset.concat([num])])
			i = (i + 1)
		}
		let j: number = 0
		while ((j < newSets.length)) {
			result = result.concat([newSets[j]])
			j = (j + 1)
		}
	}
	return result
}

function example_1(): void {
	if (!(_equal(subsets([1, 2, 3]), [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!(_equal(subsets([0]), [[], [0]]))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

