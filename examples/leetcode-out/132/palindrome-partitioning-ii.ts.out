// Generated by Mochi TypeScript compiler

function minCut(s: string) : number {
	let n: number = s.length
	if ((n <= 1)) {
		return 0
	}
	let dp: Array<any> = []
	let i: number = 0
	while ((i < n)) {
		dp = dp.concat([i])
		i = (i + 1)
	}
	let isPal: Array<any> = []
	i = 0
	while ((i < n)) {
		let row: Array<any> = []
		let j: number = 0
		while ((j < n)) {
			row = row.concat([false])
			j = (j + 1)
		}
		isPal = isPal.concat([row])
		i = (i + 1)
	}
	i = 0
	while ((i < n)) {
		let j: number = 0
		while ((j <= i)) {
			if ((s[j] == s[i])) {
				if (((i - j) <= 1)) {
					isPal[j][i] = true
				} else 				if ((isPal[(j + 1)] as any)[(i - 1)]) {
					isPal[j][i] = true
				}
				if ((isPal[j] as any)[i]) {
					if ((j == 0)) {
						dp[i] = 0
					} else {
						let candidate: any = (dp[(j - 1)] + 1)
						if ((candidate < dp[i])) {
							dp[i] = candidate
						}
					}
				}
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return dp[(n - 1)]
}

function example_1(): void {
	if (!((minCut("aab") == 1))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((minCut("a") == 0))) { throw new Error('expect failed') }
}

function already_palindrome(): void {
	if (!((minCut("aba") == 0))) { throw new Error('expect failed') }
}

function all_same(): void {
	if (!((minCut("aaaa") == 0))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	already_palindrome()
	all_same()
}
main()

