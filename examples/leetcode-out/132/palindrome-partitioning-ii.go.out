package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func minCut(s string) int {
	var n int = len(s)
	if (n <= 1) {
		return 0
	}
	var dp []int = []int{}
	_ = dp
	var i int = 0
	_ = i
	for (i < n) {
		dp = append(append([]int{}, dp...), []int{i}...)
		i = (i + 1)
	}
	var isPal [][]bool = [][]bool{}
	_ = isPal
	i = 0
	for (i < n) {
		var row []bool = []bool{}
		_ = row
		var j int = 0
		_ = j
		for (j < n) {
			row = append(append([]bool{}, row...), []bool{false}...)
			j = (j + 1)
		}
		isPal = append(append([][]bool{}, isPal...), [][]bool{row}...)
		i = (i + 1)
	}
	i = 0
	for (i < n) {
		var j int = 0
		_ = j
		for (j <= i) {
			if (_indexString(s, j) == _indexString(s, i)) {
				if ((i - j) <= 1) {
					isPal[j][i] = true
				} else 				if isPal[(j + 1)][(i - 1)] {
					isPal[j][i] = true
				}
				if isPal[j][i] {
					if (j == 0) {
						dp[i] = 0
					} else {
						var candidate int = (dp[(j - 1)] + 1)
						if (candidate < dp[i]) {
							dp[i] = candidate
						}
					}
				}
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return dp[(n - 1)]
}

func example_1() {
	expect((minCut("aab") == 1))
}

func example_2() {
	expect((minCut("a") == 0))
}

func already_palindrome() {
	expect((minCut("aba") == 0))
}

func all_same() {
	expect((minCut("aaaa") == 0))
}

func main() {
	example_1()
	example_2()
	already_palindrome()
	all_same()
}

func _indexString(s string, i int) string {
    runes := []rune(s)
    if i < 0 {
        i += len(runes)
    }
    if i < 0 || i >= len(runes) {
        panic("index out of range")
    }
    return string(runes[i])
}

