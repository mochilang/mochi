# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def solveNQueens(n: int) -> list[list[str]]:
	results = []
	cols = {}
	diag1 = {}
	diag2 = {}
	def backtrack(row: int, board: list[str]) -> None:
		nonlocal results
		nonlocal diag1
		nonlocal cols
		nonlocal diag2
		if (row == n):
			results = (results + [board])
		else:
			c = 0
			while (c < n):
				usedCol = False
				if (c in cols):
					usedCol = cols[c]
				if usedCol:
					c = (c + 1)
					continue
				d1 = (row - c)
				d2 = (row + c)
				usedD1 = False
				usedD2 = False
				if (d1 in diag1):
					usedD1 = diag1[d1]
				if (d2 in diag2):
					usedD2 = diag2[d2]
				if (not ((usedD1 or usedD2))):
					cols[c] = True
					diag1[d1] = True
					diag2[d2] = True
					rowStr = ""
					i = 0
					while (i < n):
						if (i == c):
							rowStr = (rowStr + "Q")
						else:
							rowStr = (rowStr + ".")
						i = (i + 1)
					backtrack((row + 1), (board + [rowStr]))
					cols[c] = False
					diag1[d1] = False
					diag2[d2] = False
				c = (c + 1)
	backtrack(0, [])
	return results

result4 = solveNQueens(4)
expected4 = [[".Q..", "...Q", "Q...", "..Q."], ["..Q.", "Q...", "...Q", ".Q.."]]

def n_4():
	assert (result4 == expected4)

def n_1():
	assert (solveNQueens(1) == [["Q"]])

def main():
	result4 = solveNQueens(4)
	expected4 = [[".Q..", "...Q", "Q...", "..Q."], ["..Q.", "Q...", "...Q", ".Q.."]]
	n_4()
	n_1()

if __name__ == "__main__":
	main()
