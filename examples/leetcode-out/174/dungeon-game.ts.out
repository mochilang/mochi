// Generated by Mochi TypeScript compiler

function calculateMinimumHP(dungeon: Array<Array<number>>) : number {
	let m: number = dungeon.length
	if ((m == 0)) {
		return 1
	}
	let n: number = dungeon[0].length
	let dp: Array<any> = []
	let i: number = 0
	while ((i < m)) {
		let row: Array<any> = []
		let j: number = 0
		while ((j < n)) {
			row = row.concat([0])
			j = (j + 1)
		}
		dp = dp.concat([row])
		i = (i + 1)
	}
	let need: number = (1 - dungeon[(m - 1)][(n - 1)])
	if ((need <= 0)) {
		need = 1
	}
	dp[(m - 1)][(n - 1)] = need
	let col: number = (n - 2)
	while ((col >= 0)) {
		need = ((dp[(m - 1)] as any)[(col + 1)] - dungeon[(m - 1)][col])
		if ((need <= 0)) {
			need = 1
		}
		dp[(m - 1)][col] = need
		col = (col - 1)
	}
	let rowi: number = (m - 2)
	while ((rowi >= 0)) {
		need = ((dp[(rowi + 1)] as any)[(n - 1)] - dungeon[rowi][(n - 1)])
		if ((need <= 0)) {
			need = 1
		}
		dp[rowi][(n - 1)] = need
		rowi = (rowi - 1)
	}
	i = (m - 2)
	while ((i >= 0)) {
		col = (n - 2)
		while ((col >= 0)) {
			let best: any = (dp[(i + 1)] as any)[col]
			if (((dp[i] as any)[(col + 1)] < best)) {
				best = (dp[i] as any)[(col + 1)]
			}
			need = (best - dungeon[i][col])
			if ((need <= 0)) {
				need = 1
			}
			dp[i][col] = need
			col = (col - 1)
		}
		i = (i - 1)
	}
	return (dp[0] as any)[0]
}

function example_1(): void {
	let board: Array<Array<number>> = [[(-2), (-3), 3], [(-5), (-10), 1], [10, 30, (-5)]]
	if (!((calculateMinimumHP(board) == 7))) { throw new Error('expect failed') }
}

function single_cell_positive(): void {
	if (!((calculateMinimumHP([[5]]) == 1))) { throw new Error('expect failed') }
}

function single_cell_negative(): void {
	if (!((calculateMinimumHP([[(-5)]]) == 6))) { throw new Error('expect failed') }
}

function two_by_two(): void {
	let board: Array<Array<number>> = [[1, (-2), 3], [2, (-2), (-2)]]
	if (!((calculateMinimumHP(board) == 2))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	single_cell_positive()
	single_cell_negative()
	two_by_two()
}
main()

