// Generated by Mochi TypeScript compiler

let grid1: Array<Array<string>> = [["1", "1", "1", "1", "0"], ["1", "1", "0", "1", "0"], ["1", "1", "0", "0", "0"], ["0", "0", "0", "0", "0"]]

let grid2: Array<Array<string>> = [["1", "1", "0", "0", "0"], ["1", "1", "0", "0", "0"], ["0", "0", "1", "0", "0"], ["0", "0", "0", "1", "1"]]

function numIslands(grid: Array<Array<string>>) : number {
	let rows: number = grid.length
	if ((rows == 0)) {
		return 0
	}
	let cols: number = grid[0].length
	let visited: Array<any> = []
	let r: number = 0
	while ((r < rows)) {
		let row: Array<any> = []
		let c: number = 0
		while ((c < cols)) {
			row = row.concat([false])
			c = (c + 1)
		}
		visited = visited.concat([row])
		r = (r + 1)
	}
	function dfs(i: number, j: number) : number {
		if (((((i < 0) || (i >= rows)) || (j < 0)) || (j >= cols))) {
			return 0
		}
		if ((visited[i] as any)[j]) {
			return 0
		}
		if ((grid[i][j] != "1")) {
			return 0
		}
		visited[i][j] = true
		dfs((i + 1), j)
		dfs((i - 1), j)
		dfs(i, (j + 1))
		dfs(i, (j - 1))
		return 0
	}
	let count: any = 0
	r = 0
	while ((r < rows)) {
		let c: number = 0
		while ((c < cols)) {
			if ((grid[r][c] == "1")) {
				if ((!((visited[r] as any)[c]))) {
					dfs(r, c)
					count = (count + 1)
				}
			}
			c = (c + 1)
		}
		r = (r + 1)
	}
	return count
}

function example_1(): void {
	if (!((numIslands(grid1) == 1))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((numIslands(grid2) == 3))) { throw new Error('expect failed') }
}

function empty_grid(): void {
	if (!((numIslands([]) == 0))) { throw new Error('expect failed') }
}

function all_water(): void {
	if (!((numIslands([["0", "0"], ["0", "0"]]) == 0))) { throw new Error('expect failed') }
}

function single_island(): void {
	if (!((numIslands([["1"]]) == 1))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	empty_grid()
	all_water()
	single_island()
}
main()

