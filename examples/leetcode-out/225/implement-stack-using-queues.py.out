# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def NewStack() -> dict[str, typing.Any]:
	return {"q": []}

def push(stack: dict[str, typing.Any], x: int) -> None:
	q = stack["q"]
	q = (q + [x])
	i = 0
	while (i < (len(q) - 1)):
		q = (q[1:len(q)] + [q[0]])
		i = (i + 1)
	stack["q"] = q

def pop(stack: dict[str, typing.Any]) -> int:
	q = stack["q"]
	v = q[0]
	q = q[1:len(q)]
	stack["q"] = q
	return v

def top(stack: dict[str, typing.Any]) -> int:
	q = stack["q"]
	return q[0]

def empty(stack: dict[str, typing.Any]) -> bool:
	q = stack["q"]
	return (len(q) == 0)

def example():
	st = NewStack()
	push(st, 1)
	push(st, 2)
	assert (top(st) == 2)
	assert (pop(st) == 2)
	assert (empty(st) == False)

def single_push_pop():
	st = NewStack()
	push(st, 5)
	assert (pop(st) == 5)
	assert (empty(st) == True)

def multiple_pushes():
	st = NewStack()
	push(st, 1)
	push(st, 2)
	push(st, 3)
	assert (pop(st) == 3)
	assert (pop(st) == 2)
	assert (pop(st) == 1)
	assert (empty(st) == True)

def main():
	example()
	single_push_pop()
	multiple_pushes()

if __name__ == "__main__":
	main()
