// Generated by Mochi TypeScript compiler

function newPicker(nums: Array<number>) : RandomPicker {
	return {nums: nums}
}

function pick(p: RandomPicker, target: number) : number {
	let matches: Array<any> = []
	let i: number = 0
	while ((i < p.nums.length)) {
		if ((p.nums[i] == target)) {
			matches = matches.concat([i])
		}
		i = (i + 1)
	}
	if ((matches.length == 0)) {
		return (-1)
	}
	let idx: number = (performance.now() * 1000000 % matches.length)
	return matches[idx]
}

function example(): void {
	let p: RandomPicker = newPicker([1, 2, 3, 3, 3])
	let idx: number = pick(p, 3)
	if (!((((idx == 2) || (idx == 3)) || (idx == 4)))) { throw new Error('expect failed') }
}

function single_match(): void {
	let p: RandomPicker = newPicker([2, 5, 7])
	if (!((pick(p, 5) == 1))) { throw new Error('expect failed') }
}

function no_match(): void {
	let p: RandomPicker = newPicker([1, 2])
	if (!((pick(p, 3) == ((-1))))) { throw new Error('expect failed') }
}

function main(): void {
	type RandomPicker = {
		nums: any;
	}
	example()
	single_match()
	no_match()
}
main()

