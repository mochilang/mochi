# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def isPalindrome(s: str) -> bool:
	i = 0
	j = (len(s) - 1)
	while (i < j):
		if (s[i] != s[j]):
			return False
		i = (i + 1)
		j = (j - 1)
	return True

def shortestPalindrome(s: str) -> str:
	n = len(s)
	i = n
	while (i > 0):
		if isPalindrome(s[0:i]):
			suffix = s[i:n]
			rev = ""
			k = (len(suffix) - 1)
			while (k >= 0):
				rev = (rev + suffix[k])
				k = (k - 1)
			return (rev + s)
		i = (i - 1)
	return s

def example_1():
	assert (shortestPalindrome("aacecaaa") == "aaacecaaa")

def example_2():
	assert (shortestPalindrome("abcd") == "dcbabcd")

def empty():
	assert (shortestPalindrome("") == "")

def already_palindrome():
	assert (shortestPalindrome("aba") == "aba")

def single_char():
	assert (shortestPalindrome("a") == "a")

def main():
	example_1()
	example_2()
	empty()
	already_palindrome()
	single_char()

if __name__ == "__main__":
	main()
