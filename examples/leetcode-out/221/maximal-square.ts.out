// Generated by Mochi TypeScript compiler

let example1: Array<Array<string>> = [["1", "0", "1", "0", "0"], ["1", "0", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "0", "0", "1", "0"]]

let example2: Array<Array<string>> = [["0", "1"], ["1", "0"]]

let example3: Array<Array<string>> = [["0"]]

function maximalSquare(matrix: Array<Array<string>>) : number {
	let rows: number = matrix.length
	if ((rows == 0)) {
		return 0
	}
	let cols: number = matrix[0].length
	let dp: Array<any> = []
	let r: number = 0
	while ((r < rows)) {
		let row: Array<any> = []
		let c: number = 0
		while ((c < cols)) {
			row = row.concat([0])
			c = (c + 1)
		}
		dp = dp.concat([row])
		r = (r + 1)
	}
	let maxSide: number = 0
	r = 0
	while ((r < rows)) {
		let c: number = 0
		while ((c < cols)) {
			if ((matrix[r][c] == "1")) {
				if (((r == 0) || (c == 0))) {
					dp[r][c] = 1
				} else {
					let top: any = (dp[(r - 1)] as any)[c]
					let left: any = (dp[r] as any)[(c - 1)]
					let diag: any = (dp[(r - 1)] as any)[(c - 1)]
					let small: any = top
					if ((left < small)) {
						small = left
					}
					if ((diag < small)) {
						small = diag
					}
					dp[r][c] = (small + 1)
				}
				if (((dp[r] as any)[c] > maxSide)) {
					maxSide = (dp[r] as any)[c]
				}
			} else {
				dp[r][c] = 0
			}
			c = (c + 1)
		}
		r = (r + 1)
	}
	return (maxSide * maxSide)
}

function example_1(): void {
	if (!((maximalSquare(example1) == 4))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((maximalSquare(example2) == 1))) { throw new Error('expect failed') }
}

function single_zero(): void {
	if (!((maximalSquare(example3) == 0))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	single_zero()
}
main()

