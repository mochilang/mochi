# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def maximalSquare(matrix: list[list[str]]) -> int:
	rows = len(matrix)
	if (rows == 0):
		return 0
	cols = len(matrix[0])
	dp = []
	r = 0
	while (r < rows):
		row = []
		c = 0
		while (c < cols):
			row = (row + [0])
			c = (c + 1)
		dp = (dp + [row])
		r = (r + 1)
	maxSide = 0
	r = 0
	while (r < rows):
		c = 0
		while (c < cols):
			if (matrix[r][c] == "1"):
				if ((r == 0) or (c == 0)):
					dp[r][c] = 1
				else:
					top = dp[(r - 1)][c]
					left = dp[r][(c - 1)]
					diag = dp[(r - 1)][(c - 1)]
					small = top
					if (left < small):
						small = left
					if (diag < small):
						small = diag
					dp[r][c] = (small + 1)
				if (dp[r][c] > maxSide):
					maxSide = dp[r][c]
			else:
				dp[r][c] = 0
			c = (c + 1)
		r = (r + 1)
	return (maxSide * maxSide)

example1 = [["1", "0", "1", "0", "0"], ["1", "0", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "0", "0", "1", "0"]]

def example_1():
	assert (maximalSquare(example1) == 4)

def example_2():
	assert (maximalSquare(example2) == 1)

def single_zero():
	assert (maximalSquare(example3) == 0)

def main():
	example1 = [["1", "0", "1", "0", "0"], ["1", "0", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "0", "0", "1", "0"]]
	example2 = [["0", "1"], ["1", "0"]]
	example3 = [["0"]]
	example_1()
	example_2()
	single_zero()

if __name__ == "__main__":
	main()
