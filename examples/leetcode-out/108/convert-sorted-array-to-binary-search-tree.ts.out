// Generated by Mochi TypeScript compiler

function sortedArrayToBST(nums: Array<number>) : any {
	function helper(lo: number, hi: number) : any {
		if ((lo > hi)) {
			return {}
		}
		let mid: number = Math.trunc(((lo + hi)) / 2)
		return {left: helper(lo, (mid - 1)), value: nums[mid], right: helper((mid + 1), hi)}
	}
	return helper(0, (nums.length - 1))
}

function example_1(): void {
	let tree: any = sortedArrayToBST([(-10), (-3), 0, 5, 9])
	if (!((() => {
	const _t = tree;
	switch (_t) {
	case Node(_, v, _):
		return _equal(v, 0);
	default:
		return false;
	}
	return undefined;
})())) { throw new Error('expect failed') }
}

function example_2(): void {
	let tree: any = sortedArrayToBST([1, 3])
	if (!((() => {
	const _t = tree;
	switch (_t) {
	case Node(_, v, _):
		return (_equal(v, 1) || _equal(v, 3));
	default:
		return false;
	}
	return undefined;
})())) { throw new Error('expect failed') }
}

function main(): void {
	type Tree = {
	}
	example_1()
	example_2()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

