# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def abbrev(word: str) -> str:
	n = len(word)
	if (n <= 2):
		return word
	return ((word[0] + str((n - 2))) + word[(n - 1)])

def buildAbbrs(_dict: list[str]) -> dict[str, dict[str, bool]]:
	table = {}
	for w in _dict:
		a = abbrev(w)
		_set = {}
		if (a in table):
			_set = table[a]
		_set[w] = True
		table[a] = _set
	return table

def isUnique(word: str, table: dict[str, dict[str, bool]]) -> bool:
	a = abbrev(word)
	if (not ((a in table))):
		return True
	words = table[a]
	count = 0
	exists = False
	for k in words:
		count = (count + 1)
		if (k == word):
			exists = True
	if ((count == 1) and exists):
		return True
	return False

def unique_1():
	sample = buildAbbrs(["deer", "door", "cake", "card"])
	assert (isUnique("dear", sample) == False)

def unique_2():
	sample = buildAbbrs(["deer", "door", "cake", "card"])
	assert (isUnique("cart", sample) == True)

def unique_3():
	sample = buildAbbrs(["deer", "door", "cake", "card"])
	assert (isUnique("cane", sample) == False)

def unique_4():
	sample = buildAbbrs(["deer", "door", "cake", "card"])
	assert (isUnique("make", sample) == True)

def main():
	unique_1()
	unique_2()
	unique_3()
	unique_4()

if __name__ == "__main__":
	main()
