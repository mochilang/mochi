package main

import (
	"fmt"
	"reflect"
	"sort"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func threeSum(nums []int) [][]int {
	var sorted []int = func() []int {
	items := []int{}
	for _, x := range nums {
		items = append(items, x)
	}
	type pair struct { item int; key any }
	pairs := make([]pair, len(items))
	for idx, it := range items {
		x := it
		pairs[idx] = pair{item: it, key: x}
	}
	sort.Slice(pairs, func(i, j int) bool {
		a, b := pairs[i].key, pairs[j].key
		switch av := a.(type) {
		case int:
			switch bv := b.(type) {
			case int:
				return av < bv
			case float64:
				return float64(av) < bv
			}
		case float64:
			switch bv := b.(type) {
			case int:
				return av < float64(bv)
			case float64:
				return av < bv
			}
		case string:
			bs, _ := b.(string)
			return av < bs
		}
		return fmt.Sprint(a) < fmt.Sprint(b)
	})
	for idx, p := range pairs {
		items[idx] = p.item
	}
	_res := []int{}
	for _, x := range items {
		_res = append(_res, x)
	}
	return _res
}()
	var n int = len(sorted)
	var res [][]int = [][]int{}
	var i int = 0
	for (i < n) {
		if ((i > 0) && (sorted[i] == sorted[(i - 1)])) {
			i = (i + 1)
			continue
		}
		var left int = (i + 1)
		var right int = (n - 1)
		for (left < right) {
			var sum int = ((sorted[i] + sorted[left]) + sorted[right])
			if (sum == 0) {
				res = append(append([][]int{}, res...), [][]int{[]int{sorted[i], sorted[left], sorted[right]}}...)
				left = (left + 1)
				for ((left < right) && (sorted[left] == sorted[(left - 1)])) {
					left = (left + 1)
				}
				right = (right - 1)
				for ((left < right) && (sorted[right] == sorted[(right + 1)])) {
					right = (right - 1)
				}
			} else 			if (sum < 0) {
				left = (left + 1)
			} else {
				right = (right - 1)
			}
		}
		i = (i + 1)
	}
	return res
}

func example_1() {
	expect(_equal(threeSum([]int{-1, 0, 1, 2, -1, -4}), [][]int{[]int{-1, -1, 2}, []int{-1, 0, 1}}))
}

func example_2() {
	expect(_equal(threeSum([]int{0, 1, 1}), []any{}))
}

func example_3() {
	expect(_equal(threeSum([]int{0, 0, 0}), [][]int{[]int{0, 0, 0}}))
}

func main() {
	example_1()
	example_2()
	example_3()
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

