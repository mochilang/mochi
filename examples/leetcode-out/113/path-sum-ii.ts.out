// Generated by Mochi TypeScript compiler

function pathSum(root: any, targetSum: number) : Array<Array<number>> {
	function dfs(node: any, remaining: number, path: Array<number>) : Array<Array<number>> {
		function handle(l: any, v: number, r: any, rem: number, p: Array<number>) : Array<Array<number>> {
			let leftEmpty: boolean = (() => {
	const _t = l;
	switch (_t) {
	case Leaf:
		return true;
	default:
		return false;
	}
	return undefined;
})()
			let rightEmpty: boolean = (() => {
	const _t = r;
	switch (_t) {
	case Leaf:
		return true;
	default:
		return false;
	}
	return undefined;
})()
			let newRemaining: number = (rem - v)
			let newPath: Array<number> = p.concat([v])
			if ((leftEmpty && rightEmpty)) {
				if ((newRemaining == 0)) {
					return [newPath]
				} else {
					return []
				}
			}
			return (dfs(l, newRemaining, newPath) + dfs(r, newRemaining, newPath))
		}
		return (() => {
	const _t = node;
	switch (_t) {
	case Leaf:
		return [];
	case Node(l, v, r):
		return handle(l, v, r, remaining, path);
	}
	return undefined;
})()
	}
	return dfs(root, targetSum, [])
}

function example_1(): void {
	let rootLeft: Node = {left: {left: {}, value: 7, right: {}}, value: 11, right: {left: {}, value: 2, right: {}}}
	let tree: Node = {left: {left: rootLeft, value: 4, right: {}}, value: 5, right: {left: {left: {}, value: 13, right: {}}, value: 8, right: {left: {left: {}, value: 5, right: {}}, value: 4, right: {left: {}, value: 1, right: {}}}}}
	if (!(_equal(pathSum(tree, 22), [[5, 4, 11, 2], [5, 8, 4, 5]]))) { throw new Error('expect failed') }
}

function example_2(): void {
	let tree: Node = {left: {left: {}, value: 2, right: {}}, value: 1, right: {left: {}, value: 3, right: {}}}
	if (!(_equal(pathSum(tree, 5), []))) { throw new Error('expect failed') }
}

function example_3(): void {
	let tree: Node = {left: {left: {}, value: 2, right: {}}, value: 1, right: {}}
	if (!(_equal(pathSum(tree, 0), []))) { throw new Error('expect failed') }
}

function main(): void {
	type Tree = {
	}
	example_1()
	example_2()
	example_3()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

