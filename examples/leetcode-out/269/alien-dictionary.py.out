# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def alienOrder(words: list[str]) -> str:
	graph = {}
	indegree = {}
	for w in words:
		for ch in w:
			if (not ((ch in graph))):
				graph[ch] = []
			if (not ((ch in indegree))):
				indegree[ch] = 0
	i = 0
	while (i < (len(words) - 1)):
		w1 = words[i]
		w2 = words[(i + 1)]
		j = 0
		found = False
		while ((j < len(w1)) and (j < len(w2))):
			c1 = w1[j]
			c2 = w2[j]
			if (c1 != c2):
				neighbors = graph[c1]
				exists = False
				for n in neighbors:
					if (n == c2):
						exists = True
				if (not exists):
					graph[c1] = (neighbors + [c2])
					indegree[c2] = (indegree[c2] + 1)
				found = True
				break
			j = (j + 1)
		if ((not found) and (len(w1) > len(w2))):
			return ""
		i = (i + 1)
	queue = []
	for ch in indegree:
		if (indegree[ch] == 0):
			queue = (queue + [ch])
	order = ""
	idx = 0
	while (idx < len(queue)):
		ch = queue[idx]
		idx = (idx + 1)
		order = (order + ch)
		for nxt in graph[ch]:
			indegree[nxt] = (indegree[nxt] - 1)
			if (indegree[nxt] == 0):
				queue = (queue + [nxt])
	if (len(order) != len(indegree)):
		return ""
	return order

def example_1():
	assert (alienOrder(["wrt", "wrf", "er", "ett", "rftt"]) == "wertf")

def example_2():
	assert (alienOrder(["z", "x"]) == "zx")

def invalid_order():
	assert (alienOrder(["z", "x", "z"]) == "")

def main():
	example_1()
	example_2()
	invalid_order()

if __name__ == "__main__":
	main()
