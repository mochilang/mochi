// Generated by Mochi TypeScript compiler

function digitValue(c: string) : number {
	let digits: Record<string, number> = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	return digits[c]
}

function isDigit(c: string) : boolean {
	return ((c >= "0") && (c <= "9"))
}

function calculate(s: string) : number {
	let i: number = 0
	let n: number = s.length
	let result: number = 0
	let sign: number = 1
	let num: number = 0
	let stack: Array<any> = []
	while ((i < n)) {
		let c: string = s[i]
		if (isDigit(c)) {
			num = ((num * 10) + digitValue(c))
		} else 		if ((c == "+")) {
			result = (result + (sign * num))
			num = 0
			sign = 1
		} else 		if ((c == "-")) {
			result = (result + (sign * num))
			num = 0
			sign = (-1)
		} else 		if ((c == "(")) {
			stack = stack.concat([result])
			stack = stack.concat([sign])
			result = 0
			sign = 1
		} else 		if ((c == ")")) {
			result = (result + (sign * num))
			num = 0
			let prevSign: any = stack[(stack.length - 1)]
			stack = stack.slice(0, (stack.length - 1))
			let prevResult: any = stack[(stack.length - 1)]
			stack = stack.slice(0, (stack.length - 1))
			result = (prevResult + (prevSign * result))
		}
		i = (i + 1)
	}
	result = (result + (sign * num))
	return result
}

function example_1(): void {
	if (!((calculate("1 + 1") == 2))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((calculate(" 2-1 + 2 ") == 3))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((calculate("(1+(4+5+2)-3)+(6+8)") == 23))) { throw new Error('expect failed') }
}

function nested(): void {
	if (!((calculate("((2+3)-(1-2))") == 6))) { throw new Error('expect failed') }
}

function single_number(): void {
	if (!((calculate("42") == 42))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	nested()
	single_number()
}
main()

