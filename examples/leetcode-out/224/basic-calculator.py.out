# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def digitValue(c: str) -> int:
	digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	return digits[c]

def isDigit(c: str) -> bool:
	return ((c >= "0") and (c <= "9"))

def calculate(s: str) -> int:
	i = 0
	n = len(s)
	result = 0
	sign = 1
	num = 0
	stack = []
	while (i < n):
		c = s[i]
		if isDigit(c):
			num = ((num * 10) + digitValue(c))
		elif (c == "+"):
			result = (result + (sign * num))
			num = 0
			sign = 1
		elif (c == "-"):
			result = (result + (sign * num))
			num = 0
			sign = (-1)
		elif (c == "("):
			stack = (stack + [result])
			stack = (stack + [sign])
			result = 0
			sign = 1
		elif (c == ")"):
			result = (result + (sign * num))
			num = 0
			prevSign = stack[(len(stack) - 1)]
			stack = stack[0:(len(stack) - 1)]
			prevResult = stack[(len(stack) - 1)]
			stack = stack[0:(len(stack) - 1)]
			result = (prevResult + (prevSign * result))
		i = (i + 1)
	result = (result + (sign * num))
	return result

def example_1():
	assert (calculate("1 + 1") == 2)

def example_2():
	assert (calculate(" 2-1 + 2 ") == 3)

def example_3():
	assert (calculate("(1+(4+5+2)-3)+(6+8)") == 23)

def nested():
	assert (calculate("((2+3)-(1-2))") == 6)

def single_number():
	assert (calculate("42") == 42)

def main():
	example_1()
	example_2()
	example_3()
	nested()
	single_number()

if __name__ == "__main__":
	main()
