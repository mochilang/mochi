# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def IntItem(v: int) -> dict[str, typing.Any]:
	return {"kind": "int", "value": v}

def ListItem(items: list[dict[str, typing.Any]]) -> dict[str, typing.Any]:
	return {"kind": "list", "value": items}

def isInt(item: dict[str, typing.Any]) -> bool:
	return (item["kind"] == "int")

def itemValue(item: dict[str, typing.Any]) -> int:
	return item["value"]

def itemList(item: dict[str, typing.Any]) -> list[dict[str, typing.Any]]:
	return item["value"]

def flatten(items: list[dict[str, typing.Any]]) -> list[int]:
	result = []
	i = 0
	while (i < len(items)):
		it = items[i]
		if isInt(it):
			result = (result + [itemValue(it)])
		else:
			result = (result + flatten(itemList(it)))
		i = (i + 1)
	return result

def newNestedIterator(nested: list[dict[str, typing.Any]]) -> NestedIterator:
	return NestedIterator(data=flatten(nested), index=0)

def nestedHasNext(it: NestedIterator) -> bool:
	return (it.index < len(it.data))

def nestedNext(it: NestedIterator) -> NextResult:
	value = it.data[it.index]
	return NextResult(it=NestedIterator(data=it.data, index=(it.index + 1)), val=value)

@dataclasses.dataclass
class NestedIterator:
	data: list[int]
	index: int

@dataclasses.dataclass
class NextResult:
	it: typing.Any
	val: int

def example_1():
	nested = [ListItem([IntItem(1), IntItem(1)]), IntItem(2), ListItem([IntItem(1), IntItem(1)])]
	it = newNestedIterator(nested)
	r1 = nestedNext(it)
	it = r1.it
	assert (r1.val == 1)
	r2 = nestedNext(it)
	it = r2.it
	assert (r2.val == 1)
	r3 = nestedNext(it)
	it = r3.it
	assert (r3.val == 2)
	r4 = nestedNext(it)
	it = r4.it
	assert (r4.val == 1)
	r5 = nestedNext(it)
	it = r5.it
	assert (r5.val == 1)
	assert (nestedHasNext(it) == False)

def example_2():
	nested = [IntItem(1), ListItem([IntItem(4), ListItem([IntItem(6)])])]
	it = newNestedIterator(nested)
	r1 = nestedNext(it)
	it = r1.it
	assert (r1.val == 1)
	r2 = nestedNext(it)
	it = r2.it
	assert (r2.val == 4)
	r3 = nestedNext(it)
	it = r3.it
	assert (r3.val == 6)
	assert (nestedHasNext(it) == False)

def empty_list():
	it = newNestedIterator([])
	assert (nestedHasNext(it) == False)

def empty_inner_lists():
	nested = [ListItem([]), IntItem(3), ListItem([])]
	it = newNestedIterator(nested)
	r = nestedNext(it)
	it = r.it
	assert (r.val == 3)
	assert (nestedHasNext(it) == False)

def main():
	example_1()
	example_2()
	empty_list()
	empty_inner_lists()

if __name__ == "__main__":
	main()
