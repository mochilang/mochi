// Generated by Mochi TypeScript compiler

function kSmallestPairs(nums1: Array<number>, nums2: Array<number>, k: number) : Array<Array<number>> {
	let pairs: Array<any> = []
	for (const a of nums1) {
		for (const b of nums2) {
			pairs = pairs.concat([[a, b]])
		}
	}
	let sorted: Array<any> = (() => {
	const _src = pairs;
	let _items = [];
	for (const p of _src) {
		_items.push(p);
	}
	let _pairs = _items.map(it => { const p = it; return {item: it, key: ((p as any)[0] + (p as any)[1])}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	const _res = [];
	for (const p of _items) {
		_res.push(p)
	}
	return _res;
})()
	if ((k < sorted.length)) {
		return sorted.slice(0, k)
	}
	return sorted
}

function example_1(): void {
	if (!(_equal(kSmallestPairs([1, 7, 11], [2, 4, 6], 3), [[1, 2], [1, 4], [1, 6]]))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!(_equal(kSmallestPairs([1, 1, 2], [1, 2, 3], 2), [[1, 1], [1, 1]]))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!(_equal(kSmallestPairs([1, 2], [3], 3), [[1, 3], [2, 3]]))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

