# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def nthSuperUglyNumber(n: int, primes: list[int]) -> int:
	k = len(primes)
	indices = []
	t = 0
	while (t < k):
		indices = (indices + [0])
		t = (t + 1)
	uglies = [1]
	count = 1
	while (count < n):
		next = 1000000000
		i = 0
		while (i < k):
			candidate = (primes[i] * uglies[indices[i]])
			if (candidate < next):
				next = candidate
			i = (i + 1)
		uglies = (uglies + [next])
		j = 0
		while (j < k):
			if ((primes[j] * uglies[indices[j]]) == next):
				indices[j] = (indices[j] + 1)
			j = (j + 1)
		count = (count + 1)
	return uglies[(n - 1)]

def example_1():
	assert (nthSuperUglyNumber(12, [2, 7, 13, 19]) == 32)

def example_2():
	assert (nthSuperUglyNumber(1, [2, 3, 5]) == 1)

def small_primes():
	assert (nthSuperUglyNumber(3, [2, 3, 5]) == 3)

def main():
	example_1()
	example_2()
	small_primes()

if __name__ == "__main__":
	main()
