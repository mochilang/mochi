# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def build(start: int, end: int) -> list[Tree]:
	if (start > end):
		return [Empty()]
	result = []
	for i in range(start, (end + 1)):
		leftTrees = build(start, (i - 1))
		rightTrees = build((i + 1), end)
		for l in leftTrees:
			for r in rightTrees:
				result = (result + [Node(left=l, val=i, right=r)])
	return result

def generateTrees(n: int) -> list[Tree]:
	if (n == 0):
		return []
	return build(1, n)

class Tree:
	pass
@dataclasses.dataclass
class Empty(Tree):
	pass
@dataclasses.dataclass
class Node(Tree):
	left: typing.Any
	val: int
	right: typing.Any

trees = generateTrees(3)

def main():
	trees = generateTrees(3)
	print(len(trees))

if __name__ == "__main__":
	main()
