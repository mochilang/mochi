package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func isIsomorphic(s string, t string) bool {
	var m int = len(s)
	if (m != len(t)) {
		return false
	}
	var mapST map[string]string = map[string]string{}
	_ = mapST
	var mapTS map[string]string = map[string]string{}
	_ = mapTS
	var i int = 0
	_ = i
	for (i < m) {
		var c1 string = _indexString(s, i)
		var c2 string = _indexString(t, i)
		_tmp0 := c1
		_tmp1 := mapST
		_, _tmp2 := _tmp1[_tmp0]
		if _tmp2 {
			if (mapST[c1] != c2) {
				return false
			}
		} else {
			_tmp3 := c2
			_tmp4 := mapTS
			_, _tmp5 := _tmp4[_tmp3]
			if _tmp5 {
				return false
			}
			mapST[c1] = c2
			mapTS[c2] = c1
		}
		i = (i + 1)
	}
	return true
}

func example_1() {
	expect((isIsomorphic("egg", "add") == true))
}

func example_2() {
	expect((isIsomorphic("foo", "bar") == false))
}

func example_3() {
	expect((isIsomorphic("paper", "title") == true))
}

func single_letter() {
	expect((isIsomorphic("a", "b") == true))
}

func mismatch_length() {
	expect((isIsomorphic("ab", "a") == false))
}

func main() {
	example_1()
	example_2()
	example_3()
	single_letter()
	mismatch_length()
}

func _indexString(s string, i int) string {
    runes := []rune(s)
    if i < 0 {
        i += len(runes)
    }
    if i < 0 || i >= len(runes) {
        panic("index out of range")
    }
    return string(runes[i])
}

