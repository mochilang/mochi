// Generated by Mochi TypeScript compiler

function findMedianSortedArrays(nums1: Array<number>, nums2: Array<number>) : number {
	let merged: Array<any> = []
	let i: number = 0
	let j: number = 0
	while (((i < nums1.length) || (j < nums2.length))) {
		if ((j >= nums2.length)) {
			merged = merged.concat([nums1[i]])
			i = (i + 1)
		} else 		if ((i >= nums1.length)) {
			merged = merged.concat([nums2[j]])
			j = (j + 1)
		} else 		if ((nums1[i] <= nums2[j])) {
			merged = merged.concat([nums1[i]])
			i = (i + 1)
		} else {
			merged = merged.concat([nums2[j]])
			j = (j + 1)
		}
	}
	let total: number = merged.length
	if (((total % 2) == 1)) {
		return merged[Math.trunc(total / 2)]
	}
	let mid1: any = merged[(Math.trunc(total / 2) - 1)]
	let mid2: any = merged[Math.trunc(total / 2)]
	return (((mid1 + mid2)) / 2.000000)
}

function example_1(): void {
	if (!((findMedianSortedArrays([1, 3], [2]) == 2.000000))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((findMedianSortedArrays([1, 2], [3, 4]) == 2.500000))) { throw new Error('expect failed') }
}

function empty_first(): void {
	if (!((findMedianSortedArrays([], [1]) == 1.000000))) { throw new Error('expect failed') }
}

function empty_second(): void {
	if (!((findMedianSortedArrays([2], []) == 2.000000))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	empty_first()
	empty_second()
}
main()

