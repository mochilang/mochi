# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def findMedianSortedArrays(nums1: list[int], nums2: list[int]) -> float:
	merged = []
	i = 0
	j = 0
	while ((i < len(nums1)) or (j < len(nums2))):
		if (j >= len(nums2)):
			merged = (merged + [nums1[i]])
			i = (i + 1)
		elif (i >= len(nums1)):
			merged = (merged + [nums2[j]])
			j = (j + 1)
		elif (nums1[i] <= nums2[j]):
			merged = (merged + [nums1[i]])
			i = (i + 1)
		else:
			merged = (merged + [nums2[j]])
			j = (j + 1)
	total = len(merged)
	if ((total % 2) == 1):
		return merged[(total // 2)]
	mid1 = merged[((total // 2) - 1)]
	mid2 = merged[(total // 2)]
	return (((mid1 + mid2)) / 2)

def example_1():
	assert (findMedianSortedArrays([1, 3], [2]) == 2)

def example_2():
	assert (findMedianSortedArrays([1, 2], [3, 4]) == 2.5)

def empty_first():
	assert (findMedianSortedArrays([], [1]) == 1)

def empty_second():
	assert (findMedianSortedArrays([2], []) == 2)

def main():
	example_1()
	example_2()
	empty_first()
	empty_second()

if __name__ == "__main__":
	main()
