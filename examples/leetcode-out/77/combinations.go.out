package main

import (
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func combine(n int, k int) [][]int {
	var result [][]int = [][]int{}
	var backtrack func(int, []int)
	backtrack = func(start int, path []int) {
		if (len(path) == k) {
			result = append(append([][]int{}, result...), [][]int{path}...)
		} else {
			var i int = start
			for (i <= n) {
				backtrack((i + 1), append(append([]int{}, path...), []int{i}...))
				i = (i + 1)
			}
		}
}
	backtrack(1, []int{})
	return result
}

func example_1() {
	expect(_equal(combine(4, 2), [][]int{[]int{1, 2}, []int{1, 3}, []int{1, 4}, []int{2, 3}, []int{2, 4}, []int{3, 4}}))
}

func example_2() {
	expect(_equal(combine(1, 1), [][]int{[]int{1}}))
}

func n___3__k___3() {
	expect(_equal(combine(3, 3), [][]int{[]int{1, 2, 3}}))
}

func main() {
	example_1()
	example_2()
	n___3__k___3()
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

