# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def combine(n: int, k: int) -> list[list[int]]:
	result = []
	def backtrack(start: int, path: list[int]) -> None:
		nonlocal result
		if (len(path) == k):
			result = (result + [path])
		else:
			i = start
			while (i <= n):
				backtrack((i + 1), (path + [i]))
				i = (i + 1)
	backtrack(1, [])
	return result

def example_1():
	assert (combine(4, 2) == [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]])

def example_2():
	assert (combine(1, 1) == [[1]])

def n___3__k___3():
	assert (combine(3, 3) == [[1, 2, 3]])

def main():
	example_1()
	example_2()
	n___3__k___3()

if __name__ == "__main__":
	main()
