# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def newPeekingIterator(nums: list[int]) -> PeekingIterator:
	return PeekingIterator(nums=nums, index=0)

def hasNext(it: PeekingIterator) -> bool:
	return (it.index < len(it.nums))

def peek(it: PeekingIterator) -> int:
	return it.nums[it.index]

def next(it: PeekingIterator) -> NextResult:
	v = it.nums[it.index]
	newIt = PeekingIterator(nums=it.nums, index=(it.index + 1))
	return NextResult(iter=newIt, val=v)

@dataclasses.dataclass
class PeekingIterator:
	nums: list[int]
	index: int

@dataclasses.dataclass
class NextResult:
	iter: typing.Any
	val: int

def example():
	it = newPeekingIterator([1, 2, 3])
	r1 = next(it)
	it = r1.iter
	assert (r1.val == 1)
	assert (peek(it) == 2)
	r2 = next(it)
	it = r2.iter
	assert (r2.val == 2)
	r3 = next(it)
	it = r3.iter
	assert (r3.val == 3)
	assert (hasNext(it) == False)

def single_element():
	it = newPeekingIterator([5])
	assert (peek(it) == 5)
	r = next(it)
	it = r.iter
	assert (r.val == 5)
	assert (hasNext(it) == False)

def empty():
	it = newPeekingIterator([])
	assert (hasNext(it) == False)

def main():
	example()
	single_element()
	empty()

if __name__ == "__main__":
	main()
