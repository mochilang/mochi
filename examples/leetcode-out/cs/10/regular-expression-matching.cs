// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;

public class Program {
	static bool isMatch(string s, string p) {
		var m = s.Length;
		var n = p.Length;
		var memo = new Dictionary<dynamic, dynamic> {  };
		bool dfs(long i, long j) {
			var key = ((i * ((n + 1L))) + j);
			if (_in(key, memo)) {
				return memo[key];
			}
			if ((j == n)) {
				return (i == m);
			}
			var first = false;
			if ((i < m)) {
				if ((((_indexString(p, j) == _indexString(s, i))) || ((_indexString(p, j) == ".")))) {
					first = true;
				}
			}
			var ans = false;
			if (((j + 1L) < n)) {
				if ((_indexString(p, (j + 1L)) == "*")) {
					if (dfs(i, (j + 2L))) {
						ans = true;
					} else if ((first && dfs((i + 1L), j))) {
						ans = true;
					}
				} else {
					if ((first && dfs((i + 1L), (j + 1L)))) {
						ans = true;
					}
				}
			} else {
				if ((first && dfs((i + 1L), (j + 1L)))) {
					ans = true;
				}
			}
			memo[key] = ans;
			return ans;
		}
		return dfs(0L, 0L);
	}
	
	static void test_example_1() {
		if (!((isMatch("aa", "a") == false))) throw new Exception("expect failed");
	}
	
	static void test_example_2() {
		if (!((isMatch("aa", "a*") == true))) throw new Exception("expect failed");
	}
	
	static void test_example_3() {
		if (!((isMatch("ab", ".*") == true))) throw new Exception("expect failed");
	}
	
	static void test_example_4() {
		if (!((isMatch("aab", "c*a*b") == true))) throw new Exception("expect failed");
	}
	
	static void test_example_5() {
		if (!((isMatch("mississippi", "mis*is*p*.") == false))) throw new Exception("expect failed");
	}
	
	public static void Main() {
		test_example_1();
		test_example_2();
		test_example_3();
		test_example_4();
		test_example_5();
	}
	static bool _in(dynamic item, dynamic col) {
		if (col is string s && item is string sub) {
			return s.Contains(sub);
		}
		if (col is System.Collections.IDictionary d) {
			return d.Contains(item);
		}
		if (col is System.Collections.IEnumerable e) {
			foreach (var it in e) {
				if (Equals(it, item)) return true;
			}
			return false;
		}
		return false;
	}
	
	static string _indexString(string s, long i) {
		if (i < 0) i += s.Length;
		if (i < 0 || i >= s.Length) throw new Exception("index out of range");
		return s[(int)i].ToString();
	}
	
}
