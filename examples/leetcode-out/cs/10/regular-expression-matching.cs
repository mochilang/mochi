// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;

public class Program {
	static bool isMatch(string s, string p) {
		long m = s.Length;
		long n = p.Length;
		bool[][] dp = new bool[][] { };
		long i = 0L;
		while ((i <= m)) {
			bool[] row = new bool[] { };
			long j = 0L;
			while ((j <= n)) {
				row = row.Concat(new [] { false }).ToArray();
				j = (j + 1L);
			}
			dp = dp.Concat(new [] { row }).ToArray();
			i = (i + 1L);
		}
		dp[m][n] = true;
		var i2 = m;
		while ((i2 >= 0L)) {
			var j2 = (n - 1L);
			while ((j2 >= 0L)) {
				bool first = false;
				if ((i2 < m)) {
					if ((((_indexString(p, j2) == _indexString(s, i2))) || ((_indexString(p, j2) == ".")))) {
						first = true;
					}
				}
				bool star = false;
				if (((j2 + 1L) < n)) {
					if ((_indexString(p, (j2 + 1L)) == "*")) {
						star = true;
					}
				}
				if (star) {
					if ((dp[i2][(j2 + 2L)] || ((first && dp[(i2 + 1L)][j2])))) {
						dp[i2][j2] = true;
					} else {
						dp[i2][j2] = false;
					}
				} else {
					if ((first && dp[(i2 + 1L)][(j2 + 1L)])) {
						dp[i2][j2] = true;
					} else {
						dp[i2][j2] = false;
					}
				}
				j2 = (j2 - 1L);
			}
			i2 = (i2 - 1L);
		}
		return dp[0L][0L];
	}
	
	static void test_example_1() {
		if (!((isMatch("aa", "a") == false))) throw new Exception("expect failed");
	}
	
	static void test_example_2() {
		if (!((isMatch("aa", "a*") == true))) throw new Exception("expect failed");
	}
	
	static void test_example_3() {
		if (!((isMatch("ab", ".*") == true))) throw new Exception("expect failed");
	}
	
	static void test_example_4() {
		if (!((isMatch("aab", "c*a*b") == true))) throw new Exception("expect failed");
	}
	
	static void test_example_5() {
		if (!((isMatch("mississippi", "mis*is*p*.") == false))) throw new Exception("expect failed");
	}
	
	public static void Main() {
		test_example_1();
		test_example_2();
		test_example_3();
		test_example_4();
		test_example_5();
	}
	static string _indexString(string s, long i) {
		if (i < 0) i += s.Length;
		if (i < 0 || i >= s.Length) throw new Exception("index out of range");
		return s[(int)i].ToString();
	}
	
}
