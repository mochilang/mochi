// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;

public class Program {
    static string intToRoman(long num) {
        long[] values = new long[] { 1000L, 900L, 500L, 400L, 100L, 90L, 50L, 40L, 10L, 9L, 5L, 4L, 1L };
        string[] symbols = new string[] { "M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I" };
        string result = "";
        long i = 0L;
        while ((num > 0L)) {
            while ((num >= _indexList(values, i))) {
                result = (result + _indexList(symbols, i));
                num = (num - _indexList(values, i));
            }
            i = (i + 1L);
        }
        return result;
    }
    
    static void test_example_1() {
        expect((intToRoman(3L) == "III"));
    }
    
    static void test_example_2() {
        expect((intToRoman(58L) == "LVIII"));
    }
    
    static void test_example_3() {
        expect((intToRoman(1994L) == "MCMXCIV"));
    }
    
    static void test_small_numbers() {
        expect((intToRoman(4L) == "IV"));
        expect((intToRoman(9L) == "IX"));
    }
    
    public static void Main() {
        test_example_1();
        test_example_2();
        test_example_3();
        test_small_numbers();
    }
    static dynamic _indexList(dynamic l, long i) {
        var list = l as System.Collections.IList;
        if (list == null) throw new Exception("index() expects list");
        if (i < 0) i += list.Count;
        if (i < 0 || i >= list.Count) throw new Exception("index out of range");
        return list[(int)i];
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
}
