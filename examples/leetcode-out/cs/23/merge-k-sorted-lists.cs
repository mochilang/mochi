// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;

public class Program {
	static long[] mergeKLists(long[][] lists) {
		long k = lists.Length;
		long[] indices = new long[] { };
		long i = 0L;
		while ((i < k)) {
			indices = indices.Concat(new [] { 0L }).ToArray();
			i = (i + 1L);
		}
		long[] result = new long[] { };
		while (true) {
			long best = 0L;
			long bestList = (-1L);
			bool found = false;
			long j = 0L;
			while ((j < k)) {
				var idx = indices[j];
				if ((idx < lists[j].Length)) {
					var val = lists[j][idx];
					if (((!found) || (val < best))) {
						best = val;
						bestList = j;
						found = true;
					}
				}
				j = (j + 1L);
			}
			if ((!found)) {
				break;
			}
			result = result.Concat(new [] { best }).ToArray();
			indices[bestList] = (indices[bestList] + 1L);
		}
		return result;
	}
	
	static void test_example_1() {
		if (!(_equal(mergeKLists(new [] { new [] { 1L, 4L, 5L }, new [] { 1L, 3L, 4L }, new [] { 2L, 6L } }), new [] { 1L, 1L, 2L, 3L, 4L, 4L, 5L, 6L }))) throw new Exception("expect failed");
	}
	
	static void test_example_2() {
		if (!(_equal(mergeKLists(new dynamic[] { }), new dynamic[] { }))) throw new Exception("expect failed");
	}
	
	static void test_example_3() {
		if (!(_equal(mergeKLists(new [] { new dynamic[] { } }), new dynamic[] { }))) throw new Exception("expect failed");
	}
	
	public static void Main() {
		test_example_1();
		test_example_2();
		test_example_3();
	}
	static bool _equal(dynamic a, dynamic b) {
		if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string) {
			var ea = ae.GetEnumerator();
			var eb = be.GetEnumerator();
			while (true) {
				bool ha = ea.MoveNext();
				bool hb = eb.MoveNext();
				if (ha != hb) return false;
				if (!ha) break;
				if (!_equal(ea.Current, eb.Current)) return false;
			}
			return true;
		}
		return Equals(a, b);
	}
	
}
