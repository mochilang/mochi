// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;

public class Program {
    static string longestCommonPrefix(string[] strs) {
        if ((strs.Length == 0L)) {
            return "";
        }
        var prefix = _indexList(strs, 0L);
        for (var i = 1L; i < strs.Length; i++) {
            long j = 0L;
            var current = _indexList(strs, i);
            while (((j < prefix.Length) && (j < current.Length))) {
                if ((_indexList(prefix, j) != _indexList(current, j))) {
                    break;
                }
                j = (j + 1L);
            }
            prefix = _sliceList(prefix, 0L, j);
            if ((prefix == "")) {
                break;
            }
        }
        return prefix;
    }
    
    static void test_example_1() {
        expect((longestCommonPrefix(new string[] { "flower", "flow", "flight" }) == "fl"));
    }
    
    static void test_example_2() {
        expect((longestCommonPrefix(new string[] { "dog", "racecar", "car" }) == ""));
    }
    
    static void test_single_string() {
        expect((longestCommonPrefix(new string[] { "single" }) == "single"));
    }
    
    static void test_no_common_prefix() {
        expect((longestCommonPrefix(new string[] { "a", "b", "c" }) == ""));
    }
    
    public static void Main() {
        test_example_1();
        test_example_2();
        test_single_string();
        test_no_common_prefix();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static dynamic _indexList(dynamic l, long i) {
        var list = l as System.Collections.IList;
        if (list == null) throw new Exception("index() expects list");
        if (i < 0) i += list.Count;
        if (i < 0 || i >= list.Count) throw new Exception("index out of range");
        return list[(int)i];
    }
    
    static List<dynamic> _sliceList(dynamic l, long i, long j) {
        var list = l as System.Collections.IList;
        if (list == null) return new List<dynamic>();
        var start = i;
        var end = j;
        var n = list.Count;
        if (start < 0) start += n;
        if (end < 0) end += n;
        if (start < 0) start = 0;
        if (end > n) end = n;
        if (end < start) end = start;
        var res = new List<dynamic>();
        for (int k = (int)start; k < (int)end; k++) res.Add(list[k]);
        return res;
    }
    
}
