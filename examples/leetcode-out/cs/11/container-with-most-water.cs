// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;

public class Program {
    static long maxArea(long[] height) {
        long left = 0L;
        long right = (height.Length - 1L);
        long maxArea = 0L;
        while ((left < right)) {
            var width = (right - left);
            long h = 0L;
            if ((_indexList(height, left) < _indexList(height, right))) {
                h = _indexList(height, left);
            } else {
                h = _indexList(height, right);
            }
            var area = (h * width);
            if ((area > maxArea)) {
                maxArea = area;
            }
            if ((_indexList(height, left) < _indexList(height, right))) {
                left = (left + 1L);
            } else {
                right = (right - 1L);
            }
        }
        return maxArea;
    }
    
    static void test_example_1() {
        expect((maxArea(new long[] { 1L, 8L, 6L, 2L, 5L, 4L, 8L, 3L, 7L }) == 49L));
    }
    
    static void test_example_2() {
        expect((maxArea(new long[] { 1L, 1L }) == 1L));
    }
    
    static void test_decreasing_heights() {
        expect((maxArea(new long[] { 4L, 3L, 2L, 1L, 4L }) == 16L));
    }
    
    static void test_short_array() {
        expect((maxArea(new long[] { 1L, 2L, 1L }) == 2L));
    }
    
    public static void Main() {
        test_example_1();
        test_example_2();
        test_decreasing_heights();
        test_short_array();
    }
    static dynamic _indexList(dynamic l, long i) {
        var list = l as System.Collections.IList;
        if (list == null) throw new Exception("index() expects list");
        if (i < 0) i += list.Count;
        if (i < 0 || i >= list.Count) throw new Exception("index out of range");
        return list[(int)i];
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
}
