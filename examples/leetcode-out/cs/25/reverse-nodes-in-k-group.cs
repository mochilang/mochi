// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;

public class Program {
	static long[] reverseKGroup(long[] nums, long k) {
		long n = nums.Length;
		if ((k <= 1L)) {
			return nums;
		}
		var result = new dynamic[] { };
		long i = 0L;
		while ((i < n)) {
			var end = (i + k);
			if ((end <= n)) {
				var j = (end - 1L);
				while ((j >= i)) {
					result = result.Concat(new [] { nums[j] }).ToArray();
					j = (j - 1L);
				}
			} else {
				var j = i;
				while ((j < n)) {
					result = (result + new [] { nums[j] });
					j = (j + 1L);
				}
			}
			i = (i + k);
		}
		return result;
	}
	
	static void test_example_1() {
		if (!(_equal(reverseKGroup(new [] { 1L, 2L, 3L, 4L, 5L }, 2L), new [] { 2L, 1L, 4L, 3L, 5L }))) throw new Exception("expect failed");
	}
	
	static void test_example_2() {
		if (!(_equal(reverseKGroup(new [] { 1L, 2L, 3L, 4L, 5L }, 3L), new [] { 3L, 2L, 1L, 4L, 5L }))) throw new Exception("expect failed");
	}
	
	static void test_k_equals_list_length() {
		if (!(_equal(reverseKGroup(new [] { 1L, 2L, 3L, 4L }, 4L), new [] { 4L, 3L, 2L, 1L }))) throw new Exception("expect failed");
	}
	
	static void test_k_greater_than_length() {
		if (!(_equal(reverseKGroup(new [] { 1L, 2L, 3L }, 5L), new [] { 1L, 2L, 3L }))) throw new Exception("expect failed");
	}
	
	static void test_k_is_one() {
		if (!(_equal(reverseKGroup(new [] { 1L, 2L, 3L }, 1L), new [] { 1L, 2L, 3L }))) throw new Exception("expect failed");
	}
	
	public static void Main() {
		test_example_1();
		test_example_2();
		test_k_equals_list_length();
		test_k_greater_than_length();
		test_k_is_one();
	}
	static bool _equal(dynamic a, dynamic b) {
		if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string) {
			var ea = ae.GetEnumerator();
			var eb = be.GetEnumerator();
			while (true) {
				bool ha = ea.MoveNext();
				bool hb = eb.MoveNext();
				if (ha != hb) return false;
				if (!ha) break;
				if (!_equal(ea.Current, eb.Current)) return false;
			}
			return true;
		}
		return Equals(a, b);
	}
	
}
