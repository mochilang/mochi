// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;

public class Program {
	static long[] mergeTwoLists(long[] l1, long[] l2) {
		long i = 0L;
		long j = 0L;
		var result = new dynamic[] { };
		while (((i < l1.Length) && (j < l2.Length))) {
			if ((l1[i] <= l2[j])) {
				result = result.Concat(new [] { l1[i] }).ToArray();
				i = (i + 1L);
			} else {
				result = (result + new [] { l2[j] });
				j = (j + 1L);
			}
		}
		while ((i < l1.Length)) {
			result = (result + new [] { l1[i] });
			i = (i + 1L);
		}
		while ((j < l2.Length)) {
			result = (result + new [] { l2[j] });
			j = (j + 1L);
		}
		return result;
	}
	
	static void test_example_1() {
		if (!(_equal(mergeTwoLists(new [] { 1L, 2L, 4L }, new [] { 1L, 3L, 4L }), new [] { 1L, 1L, 2L, 3L, 4L, 4L }))) throw new Exception("expect failed");
	}
	
	static void test_example_2() {
		if (!(_equal(mergeTwoLists(new dynamic[] { }, new dynamic[] { }), new dynamic[] { }))) throw new Exception("expect failed");
	}
	
	static void test_example_3() {
		if (!(_equal(mergeTwoLists(new dynamic[] { }, new [] { 0L }), new [] { 0L }))) throw new Exception("expect failed");
	}
	
	static void test_different_lengths() {
		if (!(_equal(mergeTwoLists(new [] { 1L, 5L, 7L }, new [] { 2L, 3L, 4L, 6L, 8L }), new [] { 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L }))) throw new Exception("expect failed");
	}
	
	static void test_one_list_empty() {
		if (!(_equal(mergeTwoLists(new [] { 1L, 2L, 3L }, new dynamic[] { }), new [] { 1L, 2L, 3L }))) throw new Exception("expect failed");
	}
	
	public static void Main() {
		test_example_1();
		test_example_2();
		test_example_3();
		test_different_lengths();
		test_one_list_empty();
	}
	static bool _equal(dynamic a, dynamic b) {
		if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string) {
			var ea = ae.GetEnumerator();
			var eb = be.GetEnumerator();
			while (true) {
				bool ha = ea.MoveNext();
				bool hb = eb.MoveNext();
				if (ha != hb) return false;
				if (!ha) break;
				if (!_equal(ea.Current, eb.Current)) return false;
			}
			return true;
		}
		return Equals(a, b);
	}
	
}
