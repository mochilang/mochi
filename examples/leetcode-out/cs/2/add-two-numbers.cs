// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;

public class Program {
	static long[] addTwoNumbers(long[] l1, long[] l2) {
		long i = 0L;
		long j = 0L;
		long carry = 0L;
		long[] result = new long[] { };
		while ((((i < l1.Length) || (j < l2.Length)) || (carry > 0L))) {
			long x = 0L;
			if ((i < l1.Length)) {
				x = l1[i];
				i = (i + 1L);
			}
			long y = 0L;
			if ((j < l2.Length)) {
				y = l2[j];
				j = (j + 1L);
			}
			var sum = ((x + y) + carry);
			var digit = (sum % 10L);
			carry = (sum / 10L);
			result = result.Concat(new [] { digit }).ToArray();
		}
		return result;
	}
	
	static void test_example_1() {
		if (!(_equal(addTwoNumbers(new [] { 2L, 4L, 3L }, new [] { 5L, 6L, 4L }), new [] { 7L, 0L, 8L }))) throw new Exception("expect failed");
	}
	
	static void test_example_2() {
		if (!(_equal(addTwoNumbers(new [] { 0L }, new [] { 0L }), new [] { 0L }))) throw new Exception("expect failed");
	}
	
	static void test_example_3() {
		if (!(_equal(addTwoNumbers(new [] { 9L, 9L, 9L, 9L, 9L, 9L, 9L }, new [] { 9L, 9L, 9L, 9L }), new [] { 8L, 9L, 9L, 9L, 0L, 0L, 0L, 1L }))) throw new Exception("expect failed");
	}
	
	public static void Main() {
		test_example_1();
		test_example_2();
		test_example_3();
	}
	static bool _equal(dynamic a, dynamic b) {
		if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string) {
			var ea = ae.GetEnumerator();
			var eb = be.GetEnumerator();
			while (true) {
				bool ha = ea.MoveNext();
				bool hb = eb.MoveNext();
				if (ha != hb) return false;
				if (!ha) break;
				if (!_equal(ea.Current, eb.Current)) return false;
			}
			return true;
		}
		return Equals(a, b);
	}
	
}
