// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;

public class Program {
    static long threeSumClosest(long[] nums, long target) {
        var sorted = new List<dynamic>(nums.OrderBy(n => n).Select(n => n));
        long n = sorted.Length;
        var best = ((_indexList(sorted, 0L) + _indexList(sorted, 1L)) + _indexList(sorted, 2L));
        for (var i = 0L; i < n; i++) {
            var left = (i + 1L);
            var right = (n - 1L);
            while ((left < right)) {
                var sum = ((_indexList(sorted, i) + _indexList(sorted, left)) + _indexList(sorted, right));
                if ((sum == target)) {
                    return target;
                }
                long diff = 0L;
                if ((sum > target)) {
                    diff = (sum - target);
                } else {
                    diff = (target - sum);
                }
                long bestDiff = 0L;
                if ((best > target)) {
                    bestDiff = (best - target);
                } else {
                    bestDiff = (target - best);
                }
                if ((diff < bestDiff)) {
                    best = sum;
                }
                if ((sum < target)) {
                    left = (left + 1L);
                } else {
                    right = (right - 1L);
                }
            }
        }
        return best;
    }
    
    static void test_example_1() {
        expect((threeSumClosest(new long[] { (-1L), 2L, 1L, (-4L) }, 1L) == 2L));
    }
    
    static void test_example_2() {
        expect((threeSumClosest(new long[] { 0L, 0L, 0L }, 1L) == 0L));
    }
    
    static void test_additional() {
        expect((threeSumClosest(new long[] { 1L, 1L, 1L, 0L }, (-100L)) == 2L));
    }
    
    public static void Main() {
        test_example_1();
        test_example_2();
        test_additional();
    }
    static dynamic _indexList(dynamic l, long i) {
        var list = l as System.Collections.IList;
        if (list == null) throw new Exception("index() expects list");
        if (i < 0) i += list.Count;
        if (i < 0 || i >= list.Count) throw new Exception("index out of range");
        return list[(int)i];
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
}
