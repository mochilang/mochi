// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;

public class Program {
	static long threeSumClosest(long[] nums, long target) {
		var sorted = new List<dynamic>(nums.OrderBy(n => n).Select(n => n));
		long n = sorted.Length;
		var best = ((sorted[0L] + sorted[1L]) + sorted[2L]);
		for (var i = 0L; i < n; i++) {
			var left = (i + 1L);
			var right = (n - 1L);
			while ((left < right)) {
				var sum = ((sorted[i] + sorted[left]) + sorted[right]);
				if ((sum == target)) {
					return target;
				}
				long diff = 0L;
				if ((sum > target)) {
					diff = (sum - target);
				} else {
					diff = (target - sum);
				}
				long bestDiff = 0L;
				if ((best > target)) {
					bestDiff = (best - target);
				} else {
					bestDiff = (target - best);
				}
				if ((diff < bestDiff)) {
					best = sum;
				}
				if ((sum < target)) {
					left = (left + 1L);
				} else {
					right = (right - 1L);
				}
			}
		}
		return best;
	}
	
	static void test_example_1() {
		if (!((threeSumClosest(new [] { (-1L), 2L, 1L, (-4L) }, 1L) == 2L))) throw new Exception("expect failed");
	}
	
	static void test_example_2() {
		if (!((threeSumClosest(new [] { 0L, 0L, 0L }, 1L) == 0L))) throw new Exception("expect failed");
	}
	
	static void test_additional() {
		if (!((threeSumClosest(new [] { 1L, 1L, 1L, 0L }, (-100L)) == 2L))) throw new Exception("expect failed");
	}
	
	public static void Main() {
		test_example_1();
		test_example_2();
		test_additional();
	}
}
