// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;

public class Program {
	static long[] swapPairs(long[] nums) {
		long i = 0L;
		var result = new dynamic[] { };
		while ((i < nums.Length)) {
			if (((i + 1L) < nums.Length)) {
				result = result.Concat(new [] { nums[(i + 1L)], nums[i] }).ToArray();
			} else {
				result = (result + new [] { nums[i] });
			}
			i = (i + 2L);
		}
		return result;
	}
	
	static void test_example_1() {
		if (!(_equal(swapPairs(new [] { 1L, 2L, 3L, 4L }), new [] { 2L, 1L, 4L, 3L }))) throw new Exception("expect failed");
	}
	
	static void test_example_2() {
		if (!(_equal(swapPairs(new dynamic[] { }), new dynamic[] { }))) throw new Exception("expect failed");
	}
	
	static void test_example_3() {
		if (!(_equal(swapPairs(new [] { 1L }), new [] { 1L }))) throw new Exception("expect failed");
	}
	
	static void test_odd_length() {
		if (!(_equal(swapPairs(new [] { 1L, 2L, 3L }), new [] { 2L, 1L, 3L }))) throw new Exception("expect failed");
	}
	
	public static void Main() {
		test_example_1();
		test_example_2();
		test_example_3();
		test_odd_length();
	}
	static bool _equal(dynamic a, dynamic b) {
		if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string) {
			var ea = ae.GetEnumerator();
			var eb = be.GetEnumerator();
			while (true) {
				bool ha = ea.MoveNext();
				bool hb = eb.MoveNext();
				if (ha != hb) return false;
				if (!ha) break;
				if (!_equal(ea.Current, eb.Current)) return false;
			}
			return true;
		}
		return Equals(a, b);
	}
	
}
