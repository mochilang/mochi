// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;

public class Program {
	static string[] generateParenthesis(long n) {
		string[] result = new string[] { };
		dynamic backtrack(string current, long open, long close) {
			if ((current.Length == (n * 2L))) {
				result = result.Concat(new [] { current }).ToArray();
			} else {
				if ((open < n)) {
					backtrack((current + "("), (open + 1L), close);
				}
				if ((close < open)) {
					backtrack((current + ")"), open, (close + 1L));
				}
			}
		}
		backtrack("", 0L, 0L);
		return result;
	}
	
	static void test_example_1() {
		if (!(_equal(generateParenthesis(3L), new [] { "((()))", "(()())", "(())()", "()(())", "()()()" }))) throw new Exception("expect failed");
	}
	
	static void test_example_2() {
		if (!(_equal(generateParenthesis(1L), new [] { "()" }))) throw new Exception("expect failed");
	}
	
	static void test_two_pairs() {
		if (!(_equal(generateParenthesis(2L), new [] { "(())", "()()" }))) throw new Exception("expect failed");
	}
	
	public static void Main() {
		test_example_1();
		test_example_2();
		test_two_pairs();
	}
	static bool _equal(dynamic a, dynamic b) {
		if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string) {
			var ea = ae.GetEnumerator();
			var eb = be.GetEnumerator();
			while (true) {
				bool ha = ea.MoveNext();
				bool hb = eb.MoveNext();
				if (ha != hb) return false;
				if (!ha) break;
				if (!_equal(ea.Current, eb.Current)) return false;
			}
			return true;
		}
		return Equals(a, b);
	}
	
}
