// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;

public class Program {
	static long reverse(long x) {
		long sign = 1L;
		var n = x;
		if ((n < 0L)) {
			sign = (-1L);
			n = (-n);
		}
		long rev = 0L;
		while ((n != 0L)) {
			var digit = (n % 10L);
			rev = ((rev * 10L) + digit);
			n = (n / 10L);
		}
		rev = (rev * sign);
		if (((rev < (((-2147483647L) - 1L))) || (rev > 2147483647L))) {
			return 0L;
		}
		return rev;
	}
	
	static void test_example_1() {
		if (!((reverse(123L) == 321L))) throw new Exception("expect failed");
	}
	
	static void test_example_2() {
		if (!((reverse((-123L)) == ((-321L))))) throw new Exception("expect failed");
	}
	
	static void test_example_3() {
		if (!((reverse(120L) == 21L))) throw new Exception("expect failed");
	}
	
	static void test_overflow() {
		if (!((reverse(1534236469L) == 0L))) throw new Exception("expect failed");
	}
	
	public static void Main() {
		test_example_1();
		test_example_2();
		test_example_3();
		test_overflow();
	}
}
