// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;

public class Program {
	static string[] letterCombinations(string digits) {
		if ((digits.Length == 0L)) {
			return new dynamic[] { };
		}
		Dictionary<string, string[]> mapping = new Dictionary<dynamic, dynamic> { { "2", new [] { "a", "b", "c" } }, { "3", new [] { "d", "e", "f" } }, { "4", new [] { "g", "h", "i" } }, { "5", new [] { "j", "k", "l" } }, { "6", new [] { "m", "n", "o" } }, { "7", new [] { "p", "q", "r", "s" } }, { "8", new [] { "t", "u", "v" } }, { "9", new [] { "w", "x", "y", "z" } } };
		string[] result = new [] { "" };
		foreach (var d in digits) {
			if ((!(_in(d, mapping)))) {
				continue;
			}
			var letters = mapping[d];
			var next = new Func<List<dynamic>>(() => {
	var _res = new List<dynamic>();
	foreach (var p in result) {
		foreach (var ch in letters) {
			_res.Add((p + ch));
		}
	}
	return _res;
})();
			result = next;
		}
		return result;
	}
	
	static void test_example_1() {
		if (!(_equal(letterCombinations("23"), new [] { "ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf" }))) throw new Exception("expect failed");
	}
	
	static void test_example_2() {
		if (!(_equal(letterCombinations(""), new dynamic[] { }))) throw new Exception("expect failed");
	}
	
	static void test_example_3() {
		if (!(_equal(letterCombinations("2"), new [] { "a", "b", "c" }))) throw new Exception("expect failed");
	}
	
	static void test_single_seven() {
		if (!(_equal(letterCombinations("7"), new [] { "p", "q", "r", "s" }))) throw new Exception("expect failed");
	}
	
	static void test_mix() {
		if (!(_equal(letterCombinations("79"), new [] { "pw", "px", "py", "pz", "qw", "qx", "qy", "qz", "rw", "rx", "ry", "rz", "sw", "sx", "sy", "sz" }))) throw new Exception("expect failed");
	}
	
	public static void Main() {
		test_example_1();
		test_example_2();
		test_example_3();
		test_single_seven();
		test_mix();
	}
	static bool _in(dynamic item, dynamic col) {
		if (col is string s && item is string sub) {
			return s.Contains(sub);
		}
		if (col is System.Collections.IDictionary d) {
			return d.Contains(item);
		}
		if (col is System.Collections.IEnumerable e) {
			foreach (var it in e) {
				if (Equals(it, item)) return true;
			}
			return false;
		}
		return false;
	}
	
	static bool _equal(dynamic a, dynamic b) {
		if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string) {
			var ea = ae.GetEnumerator();
			var eb = be.GetEnumerator();
			while (true) {
				bool ha = ea.MoveNext();
				bool hb = eb.MoveNext();
				if (ha != hb) return false;
				if (!ha) break;
				if (!_equal(ea.Current, eb.Current)) return false;
			}
			return true;
		}
		return Equals(a, b);
	}
	
}
