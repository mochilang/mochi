// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;

public class Program {
    static string[] letterCombinations(string digits) {
        if ((digits.Length == 0L)) {
            return new dynamic[] { };
        }
        Dictionary<string, string[]> mapping = new Dictionary<string, string[]> { { "2", new string[] { "a", "b", "c" } }, { "3", new string[] { "d", "e", "f" } }, { "4", new string[] { "g", "h", "i" } }, { "5", new string[] { "j", "k", "l" } }, { "6", new string[] { "m", "n", "o" } }, { "7", new string[] { "p", "q", "r", "s" } }, { "8", new string[] { "t", "u", "v" } }, { "9", new string[] { "w", "x", "y", "z" } } };
        string[] result = new string[] { "" };
        foreach (var d in digits) {
            if ((!(_in(d, mapping)))) {
                continue;
            }
            var letters = _indexList(mapping, d);
            var next = new Func<List<dynamic>>(() => {
    var _res = new List<dynamic>();
    foreach (var p in result) {
        foreach (var ch in letters) {
            _res.Add((p + ch));
        }
    }
    return _res;
})();
            result = next;
        }
        return result;
    }
    
    static void test_example_1() {
        expect(_equal(letterCombinations("23"), new string[] { "ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf" }));
    }
    
    static void test_example_2() {
        expect(_equal(letterCombinations(""), new dynamic[] { }));
    }
    
    static void test_example_3() {
        expect(_equal(letterCombinations("2"), new string[] { "a", "b", "c" }));
    }
    
    static void test_single_seven() {
        expect(_equal(letterCombinations("7"), new string[] { "p", "q", "r", "s" }));
    }
    
    static void test_mix() {
        expect(_equal(letterCombinations("79"), new string[] { "pw", "px", "py", "pz", "qw", "qx", "qy", "qz", "rw", "rx", "ry", "rz", "sw", "sx", "sy", "sz" }));
    }
    
    public static void Main() {
        test_example_1();
        test_example_2();
        test_example_3();
        test_single_seven();
        test_mix();
    }
    static bool _in(dynamic item, dynamic col) {
        if (col is string s && item is string sub) {
            return s.Contains(sub);
        }
        if (col is System.Collections.IDictionary d) {
            return d.Contains(item);
        }
        if (col is System.Collections.IEnumerable e) {
            foreach (var it in e) {
                if (Equals(it, item)) return true;
            }
            return false;
        }
        return false;
    }
    
    static dynamic _indexList(dynamic l, long i) {
        var list = l as System.Collections.IList;
        if (list == null) throw new Exception("index() expects list");
        if (i < 0) i += list.Count;
        if (i < 0 || i >= list.Count) throw new Exception("index out of range");
        return list[(int)i];
    }
    
    static bool _equal(dynamic a, dynamic b) {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string) {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true) {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        return Equals(a, b);
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
}
