// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;

public class Program {
	static long divide(long dividend, long divisor) {
		if (((dividend == (((-2147483647L) - 1L))) && (divisor == ((-1L))))) {
			return 2147483647L;
		}
		bool negative = false;
		if ((dividend < 0L)) {
			negative = (!negative);
			dividend = (-dividend);
		}
		if ((divisor < 0L)) {
			negative = (!negative);
			divisor = (-divisor);
		}
		long quotient = 0L;
		while ((dividend >= divisor)) {
			var temp = divisor;
			long multiple = 1L;
			while ((dividend >= (temp + temp))) {
				temp = (temp + temp);
				multiple = (multiple + multiple);
			}
			dividend = (dividend - temp);
			quotient = (quotient + multiple);
		}
		if (negative) {
			quotient = (-quotient);
		}
		if ((quotient > 2147483647L)) {
			return 2147483647L;
		}
		if ((quotient < (((-2147483647L) - 1L)))) {
			return (-2147483648L);
		}
		return quotient;
	}
	
	static void test_example_1() {
		if (!((divide(10L, 3L) == 3L))) throw new Exception("expect failed");
	}
	
	static void test_example_2() {
		if (!((divide(7L, (-3L)) == ((-2L))))) throw new Exception("expect failed");
	}
	
	static void test_overflow() {
		if (!((divide((-2147483648L), (-1L)) == 2147483647L))) throw new Exception("expect failed");
	}
	
	static void test_divide_by_1() {
		if (!((divide(12345L, 1L) == 12345L))) throw new Exception("expect failed");
	}
	
	static void test_negative_result() {
		if (!((divide((-15L), 2L) == ((-7L))))) throw new Exception("expect failed");
	}
	
	public static void Main() {
		test_example_1();
		test_example_2();
		test_overflow();
		test_divide_by_1();
		test_negative_result();
	}
}
