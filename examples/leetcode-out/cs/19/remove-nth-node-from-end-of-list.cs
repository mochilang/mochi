// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;

public class Program {
    static long[] removeNthFromEnd(long[] nums, long n) {
        var idx = (nums.Length - n);
        var result = new dynamic[] { };
        long i = 0L;
        while ((i < nums.Length)) {
            if ((i != idx)) {
                result = result.Concat(new dynamic[] { _indexList(nums, i) }).ToArray();
            }
            i = (i + 1L);
        }
        return result;
    }
    
    static void test_example_1() {
        expect(_equal(removeNthFromEnd(new long[] { 1L, 2L, 3L, 4L, 5L }, 2L), new long[] { 1L, 2L, 3L, 5L }));
    }
    
    static void test_example_2() {
        expect(_equal(removeNthFromEnd(new long[] { 1L }, 1L), new dynamic[] { }));
    }
    
    static void test_example_3() {
        expect(_equal(removeNthFromEnd(new long[] { 1L, 2L }, 1L), new long[] { 1L }));
    }
    
    static void test_remove_first() {
        expect(_equal(removeNthFromEnd(new long[] { 7L, 8L, 9L }, 3L), new long[] { 8L, 9L }));
    }
    
    static void test_remove_last() {
        expect(_equal(removeNthFromEnd(new long[] { 7L, 8L, 9L }, 1L), new long[] { 7L, 8L }));
    }
    
    public static void Main() {
        test_example_1();
        test_example_2();
        test_example_3();
        test_remove_first();
        test_remove_last();
    }
    static dynamic _indexList(dynamic l, long i) {
        var list = l as System.Collections.IList;
        if (list == null) throw new Exception("index() expects list");
        if (i < 0) i += list.Count;
        if (i < 0 || i >= list.Count) throw new Exception("index out of range");
        return list[(int)i];
    }
    
    static bool _equal(dynamic a, dynamic b) {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string) {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true) {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        return Equals(a, b);
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
}
