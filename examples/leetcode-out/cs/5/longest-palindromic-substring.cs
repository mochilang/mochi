// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;

public class Program {
	static int expand(string s, int left, int right) {
		var l = left;
		var r = right;
		var n = s.Length;
		while (((l >= 0) && (r < n))) {
			if ((s[l] != s[r])) {
				break;
			}
			l = (l - 1);
			r = (r + 1);
		}
		return ((r - l) - 1);
	}
	
	static string longestPalindrome(string s) {
		if ((s.Length <= 1)) {
			return s;
		}
		var start = 0;
		var end = 0;
		var n = s.Length;
		for (var i = 0; i < n; i++) {
			var len1 = expand(s, i, i);
			var len2 = expand(s, i, (i + 1));
			var l = len1;
			if ((len2 > len1)) {
				l = len2;
			}
			if ((l > (end - start))) {
				start = (i - (((l - 1)) / 2));
				end = (i + (l / 2));
			}
		}
		var res = "";
		var k = start;
		while ((k <= end)) {
			res = (res + s[k]);
			k = (k + 1);
		}
		return res;
	}
	
	static void test_example_1() {
		var ans = longestPalindrome("babad");
		if (!(((ans == "bab") || (ans == "aba")))) throw new Exception("expect failed");
	}
	
	static void test_example_2() {
		if (!((longestPalindrome("cbbd") == "bb"))) throw new Exception("expect failed");
	}
	
	static void test_single_char() {
		if (!((longestPalindrome("a") == "a"))) throw new Exception("expect failed");
	}
	
	static void test_two_chars() {
		var ans = longestPalindrome("ac");
		if (!(((ans == "a") || (ans == "c")))) throw new Exception("expect failed");
	}
	
	public static void Main() {
		test_example_1();
		test_example_2();
		test_single_char();
		test_two_chars();
	}
}
