// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;

public class Program {
	static long[] findSubstring(string s, string[] words) {
		if ((words.Length == 0L)) {
			return new dynamic[] { };
		}
		long wordLen = words[0L].Length;
		long wordCount = words.Length;
		var totalLen = (wordLen * wordCount);
		if ((s.Length < totalLen)) {
			return new dynamic[] { };
		}
		Dictionary<string, long> freq = new Dictionary<dynamic, dynamic> {  };
		foreach (var w in words) {
			if (_in(w, freq)) {
				freq[w] = (freq[w] + 1L);
			} else {
				freq[w] = 1L;
			}
		}
		long[] result = new long[] { };
		for (var offset = 0L; offset < wordLen; offset++) {
			var left = offset;
			long count = 0L;
			Dictionary<string, long> seen = new Dictionary<dynamic, dynamic> {  };
			var j = offset;
			while (((j + wordLen) <= s.Length)) {
				var word = _sliceString(s, j, (j + wordLen));
				j = (j + wordLen);
				if (_in(word, freq)) {
					if (_in(word, seen)) {
						seen[word] = (seen[word] + 1L);
					} else {
						seen[word] = 1L;
					}
					count = (count + 1L);
					while ((seen[word] > freq[word])) {
						var lw = _sliceString(s, left, (left + wordLen));
						seen[lw] = (seen[lw] - 1L);
						left = (left + wordLen);
						count = (count - 1L);
					}
					if ((count == wordCount)) {
						result = result.Concat(new [] { left }).ToArray();
						var lw = _sliceString(s, left, (left + wordLen));
						seen[lw] = (seen[lw] - 1L);
						left = (left + wordLen);
						count = (count - 1L);
					}
				} else {
					seen = new Dictionary<dynamic, dynamic> {  };
					count = 0L;
					left = j;
				}
			}
		}
		return result;
	}
	
	static void test_example_1() {
		if (!(_equal(findSubstring("barfoothefoobarman", new [] { "foo", "bar" }), new [] { 0L, 9L }))) throw new Exception("expect failed");
	}
	
	static void test_example_2() {
		if (!(_equal(findSubstring("wordgoodgoodgoodbestword", new [] { "word", "good", "best", "word" }), new dynamic[] { }))) throw new Exception("expect failed");
	}
	
	static void test_example_3() {
		if (!(_equal(findSubstring("barfoofoobarthefoobarman", new [] { "bar", "foo", "the" }), new [] { 6L, 9L, 12L }))) throw new Exception("expect failed");
	}
	
	public static void Main() {
		test_example_1();
		test_example_2();
		test_example_3();
	}
	static string _sliceString(string s, long i, long j) {
		var start = i;
		var end = j;
		var n = s.Length;
		if (start < 0) start += n;
		if (end < 0) end += n;
		if (start < 0) start = 0;
		if (end > n) end = n;
		if (end < start) end = start;
		return s.Substring((int)start, (int)(end - start));
	}
	
	static bool _equal(dynamic a, dynamic b) {
		if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string) {
			var ea = ae.GetEnumerator();
			var eb = be.GetEnumerator();
			while (true) {
				bool ha = ea.MoveNext();
				bool hb = eb.MoveNext();
				if (ha != hb) return false;
				if (!ha) break;
				if (!_equal(ea.Current, eb.Current)) return false;
			}
			return true;
		}
		return Equals(a, b);
	}
	
	static bool _in(dynamic item, dynamic col) {
		if (col is string s && item is string sub) {
			return s.Contains(sub);
		}
		if (col is System.Collections.IDictionary d) {
			return d.Contains(item);
		}
		if (col is System.Collections.IEnumerable e) {
			foreach (var it in e) {
				if (Equals(it, item)) return true;
			}
			return false;
		}
		return false;
	}
	
}
