// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;

public class Program {
	static long[][] threeSum(long[] nums) {
		var sorted = new List<dynamic>(nums.OrderBy(x => x).Select(x => x));
		long n = sorted.Length;
		long[][] res = new long[][] { };
		long i = 0L;
		while ((i < n)) {
			if (((i > 0L) && (sorted[i] == sorted[(i - 1L)]))) {
				i = (i + 1L);
				continue;
			}
			var left = (i + 1L);
			var right = (n - 1L);
			while ((left < right)) {
				var sum = ((sorted[i] + sorted[left]) + sorted[right]);
				if ((sum == 0L)) {
					res = res.Concat(new [] { new [] { sorted[i], sorted[left], sorted[right] } }).ToArray();
					left = (left + 1L);
					while (((left < right) && (sorted[left] == sorted[(left - 1L)]))) {
						left = (left + 1L);
					}
					right = (right - 1L);
					while (((left < right) && (sorted[right] == sorted[(right + 1L)]))) {
						right = (right - 1L);
					}
				} else if ((sum < 0L)) {
					left = (left + 1L);
				} else {
					right = (right - 1L);
				}
			}
			i = (i + 1L);
		}
		return res;
	}
	
	static void test_example_1() {
		if (!(_equal(threeSum(new [] { (-1L), 0L, 1L, 2L, (-1L), (-4L) }), new [] { new [] { (-1L), (-1L), 2L }, new [] { (-1L), 0L, 1L } }))) throw new Exception("expect failed");
	}
	
	static void test_example_2() {
		if (!(_equal(threeSum(new [] { 0L, 1L, 1L }), new dynamic[] { }))) throw new Exception("expect failed");
	}
	
	static void test_example_3() {
		if (!(_equal(threeSum(new [] { 0L, 0L, 0L }), new [] { new [] { 0L, 0L, 0L } }))) throw new Exception("expect failed");
	}
	
	public static void Main() {
		test_example_1();
		test_example_2();
		test_example_3();
	}
	static bool _equal(dynamic a, dynamic b) {
		if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string) {
			var ea = ae.GetEnumerator();
			var eb = be.GetEnumerator();
			while (true) {
				bool ha = ea.MoveNext();
				bool hb = eb.MoveNext();
				if (ha != hb) return false;
				if (!ha) break;
				if (!_equal(ea.Current, eb.Current)) return false;
			}
			return true;
		}
		return Equals(a, b);
	}
	
}
