// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;

public class Program {
    static long[][] threeSum(long[] nums) {
        var sorted = new List<dynamic>(nums.OrderBy(x => x).Select(x => x));
        long n = sorted.Length;
        long[][] res = new long[][] { };
        long i = 0L;
        while ((i < n)) {
            if (((i > 0L) && (_indexList(sorted, i) == _indexList(sorted, (i - 1L))))) {
                i = (i + 1L);
                continue;
            }
            var left = (i + 1L);
            var right = (n - 1L);
            while ((left < right)) {
                var sum = ((_indexList(sorted, i) + _indexList(sorted, left)) + _indexList(sorted, right));
                if ((sum == 0L)) {
                    res = res.Concat(new dynamic[][] { new dynamic[] { _indexList(sorted, i), _indexList(sorted, left), _indexList(sorted, right) } }).ToArray();
                    left = (left + 1L);
                    while (((left < right) && (_indexList(sorted, left) == _indexList(sorted, (left - 1L))))) {
                        left = (left + 1L);
                    }
                    right = (right - 1L);
                    while (((left < right) && (_indexList(sorted, right) == _indexList(sorted, (right + 1L))))) {
                        right = (right - 1L);
                    }
                } else if ((sum < 0L)) {
                    left = (left + 1L);
                } else {
                    right = (right - 1L);
                }
            }
            i = (i + 1L);
        }
        return res;
    }
    
    static void test_example_1() {
        expect(_equal(threeSum(new long[] { (-1L), 0L, 1L, 2L, (-1L), (-4L) }), new long[][] { new long[] { (-1L), (-1L), 2L }, new long[] { (-1L), 0L, 1L } }));
    }
    
    static void test_example_2() {
        expect(_equal(threeSum(new long[] { 0L, 1L, 1L }), new dynamic[] { }));
    }
    
    static void test_example_3() {
        expect(_equal(threeSum(new long[] { 0L, 0L, 0L }), new long[][] { new long[] { 0L, 0L, 0L } }));
    }
    
    public static void Main() {
        test_example_1();
        test_example_2();
        test_example_3();
    }
    static dynamic _indexList(dynamic l, long i) {
        var list = l as System.Collections.IList;
        if (list == null) throw new Exception("index() expects list");
        if (i < 0) i += list.Count;
        if (i < 0 || i >= list.Count) throw new Exception("index out of range");
        return list[(int)i];
    }
    
    static bool _equal(dynamic a, dynamic b) {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string) {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true) {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        return Equals(a, b);
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
}
