// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

public class Program {
	static double findMedianSortedArrays(long[] nums1, long[] nums2) {
		long[] merged = new long[] { };
		long i = 0L;
		long j = 0L;
		while (((i < nums1.Length) || (j < nums2.Length))) {
			if ((j >= nums2.Length)) {
				merged = merged.Concat(new [] { nums1[i] }).ToArray();
				i = (i + 1L);
			} else if ((i >= nums1.Length)) {
				merged = merged.Concat(new [] { nums2[j] }).ToArray();
				j = (j + 1L);
			} else if ((nums1[i] <= nums2[j])) {
				merged = merged.Concat(new [] { nums1[i] }).ToArray();
				i = (i + 1L);
			} else {
				merged = merged.Concat(new [] { nums2[j] }).ToArray();
				j = (j + 1L);
			}
		}
		long total = merged.Length;
		if (((total % 2L) == 1L)) {
			return _cast<double>(merged[(total / 2L)]);
		}
		var mid1 = merged[((total / 2L) - 1L)];
		var mid2 = merged[(total / 2L)];
		return (_cast<double>(((mid1 + mid2))) / 2.000000);
	}
	
	static void test_example_1() {
		if (!((findMedianSortedArrays(new [] { 1L, 3L }, new [] { 2L }) == 2.000000))) throw new Exception("expect failed");
	}
	
	static void test_example_2() {
		if (!((findMedianSortedArrays(new [] { 1L, 2L }, new [] { 3L, 4L }) == 2.500000))) throw new Exception("expect failed");
	}
	
	static void test_empty_first() {
		if (!((findMedianSortedArrays(_cast<long[]>(new dynamic[] { }), new [] { 1L }) == 1.000000))) throw new Exception("expect failed");
	}
	
	static void test_empty_second() {
		if (!((findMedianSortedArrays(new [] { 2L }, _cast<long[]>(new dynamic[] { })) == 2.000000))) throw new Exception("expect failed");
	}
	
	public static void Main() {
		test_example_1();
		test_example_2();
		test_empty_first();
		test_empty_second();
	}
	static T _cast<T>(dynamic v) {
		if (v is T tv) return tv;
		if (typeof(T) == typeof(int)) {
			if (v is int) return (T)v;
			if (v is double) return (T)(object)(int)(double)v;
			if (v is float) return (T)(object)(int)(float)v;
		}
		if (typeof(T) == typeof(double)) {
			if (v is int) return (T)(object)(double)(int)v;
			if (v is double) return (T)v;
			if (v is float) return (T)(object)(double)(float)v;
		}
		if (typeof(T) == typeof(float)) {
			if (v is int) return (T)(object)(float)(int)v;
			if (v is double) return (T)(object)(float)(double)v;
			if (v is float) return (T)v;
		}
		if (v is System.Collections.Generic.IDictionary<object, object> dm) {
			var m = new Dictionary<string, object>();
			foreach (var kv in dm) m[Convert.ToString(kv.Key)] = kv.Value;
			v = m;
		}
		var json = JsonSerializer.Serialize(v);
		return JsonSerializer.Deserialize<T>(json);
	}
	
}
