// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;

public class Program {
    static long romanToInt(string s) {
        Dictionary<string, long> values = new Dictionary<string, long> { { "I", 1L }, { "V", 5L }, { "X", 10L }, { "L", 50L }, { "C", 100L }, { "D", 500L }, { "M", 1000L } };
        long total = 0L;
        long i = 0L;
        long n = s.Length;
        while ((i < n)) {
            var curr = _indexList(values, _indexString(s, i));
            if (((i + 1L) < n)) {
                var next = _indexList(values, _indexString(s, (i + 1L)));
                if ((curr < next)) {
                    total = ((total + next) - curr);
                    i = (i + 2L);
                    continue;
                }
            }
            total = (total + curr);
            i = (i + 1L);
        }
        return total;
    }
    
    static void test_example_1() {
        expect((romanToInt("III") == 3L));
    }
    
    static void test_example_2() {
        expect((romanToInt("LVIII") == 58L));
    }
    
    static void test_example_3() {
        expect((romanToInt("MCMXCIV") == 1994L));
    }
    
    static void test_subtractive() {
        expect((romanToInt("IV") == 4L));
        expect((romanToInt("IX") == 9L));
    }
    
    static void test_tens() {
        expect((romanToInt("XL") == 40L));
        expect((romanToInt("XC") == 90L));
    }
    
    public static void Main() {
        test_example_1();
        test_example_2();
        test_example_3();
        test_subtractive();
        test_tens();
    }
    static string _indexString(string s, long i) {
        if (i < 0) i += s.Length;
        if (i < 0 || i >= s.Length) throw new Exception("index out of range");
        return s[(int)i].ToString();
    }
    
    static dynamic _indexList(dynamic l, long i) {
        var list = l as System.Collections.IList;
        if (list == null) throw new Exception("index() expects list");
        if (i < 0) i += list.Count;
        if (i < 0 || i >= list.Count) throw new Exception("index out of range");
        return list[(int)i];
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
}
