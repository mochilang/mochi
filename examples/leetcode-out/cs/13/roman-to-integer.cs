// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;

public class Program {
	static long romanToInt(string s) {
		Dictionary<string, long> values = new Dictionary<dynamic, dynamic> { { "I", 1L }, { "V", 5L }, { "X", 10L }, { "L", 50L }, { "C", 100L }, { "D", 500L }, { "M", 1000L } };
		long total = 0L;
		long i = 0L;
		long n = s.Length;
		while ((i < n)) {
			var curr = values[_indexString(s, i)];
			if (((i + 1L) < n)) {
				var next = values[_indexString(s, (i + 1L))];
				if ((curr < next)) {
					total = ((total + next) - curr);
					i = (i + 2L);
					continue;
				}
			}
			total = (total + curr);
			i = (i + 1L);
		}
		return total;
	}
	
	static void test_example_1() {
		if (!((romanToInt("III") == 3L))) throw new Exception("expect failed");
	}
	
	static void test_example_2() {
		if (!((romanToInt("LVIII") == 58L))) throw new Exception("expect failed");
	}
	
	static void test_example_3() {
		if (!((romanToInt("MCMXCIV") == 1994L))) throw new Exception("expect failed");
	}
	
	static void test_subtractive() {
		if (!((romanToInt("IV") == 4L))) throw new Exception("expect failed");
		if (!((romanToInt("IX") == 9L))) throw new Exception("expect failed");
	}
	
	static void test_tens() {
		if (!((romanToInt("XL") == 40L))) throw new Exception("expect failed");
		if (!((romanToInt("XC") == 90L))) throw new Exception("expect failed");
	}
	
	public static void Main() {
		test_example_1();
		test_example_2();
		test_example_3();
		test_subtractive();
		test_tens();
	}
	static string _indexString(string s, long i) {
		if (i < 0) i += s.Length;
		if (i < 0 || i >= s.Length) throw new Exception("index out of range");
		return s[(int)i].ToString();
	}
	
}
