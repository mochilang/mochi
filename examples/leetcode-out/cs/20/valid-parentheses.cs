// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;

public class Program {
    static bool isValid(string s) {
        string[] stack = new string[] { };
        long n = s.Length;
        for (var i = 0L; i < n; i++) {
            var c = _indexString(s, i);
            if ((c == "(")) {
                stack = stack.Concat(new string[] { ")" }).ToArray();
            } else if ((c == "[")) {
                stack = stack.Concat(new string[] { "]" }).ToArray();
            } else if ((c == "{")) {
                stack = stack.Concat(new string[] { "}" }).ToArray();
            } else {
                if ((stack.Length == 0L)) {
                    return false;
                }
                var top = _indexList(stack, (stack.Length - 1L));
                if ((top != c)) {
                    return false;
                }
                stack = _sliceList(stack, 0L, (stack.Length - 1L));
            }
        }
        return (stack.Length == 0L);
    }
    
    static void test_example_1() {
        expect((isValid("()") == true));
    }
    
    static void test_example_2() {
        expect((isValid("()[]{}") == true));
    }
    
    static void test_example_3() {
        expect((isValid("(]") == false));
    }
    
    static void test_example_4() {
        expect((isValid("([)]") == false));
    }
    
    static void test_example_5() {
        expect((isValid("{[]}") == true));
    }
    
    static void test_empty_string() {
        expect((isValid("") == true));
    }
    
    static void test_single_closing() {
        expect((isValid("]") == false));
    }
    
    static void test_unmatched_open() {
        expect((isValid("((") == false));
    }
    
    public static void Main() {
        test_example_1();
        test_example_2();
        test_example_3();
        test_example_4();
        test_example_5();
        test_empty_string();
        test_single_closing();
        test_unmatched_open();
    }
    static dynamic _indexList(dynamic l, long i) {
        var list = l as System.Collections.IList;
        if (list == null) throw new Exception("index() expects list");
        if (i < 0) i += list.Count;
        if (i < 0 || i >= list.Count) throw new Exception("index out of range");
        return list[(int)i];
    }
    
    static List<dynamic> _sliceList(dynamic l, long i, long j) {
        var list = l as System.Collections.IList;
        if (list == null) return new List<dynamic>();
        var start = i;
        var end = j;
        var n = list.Count;
        if (start < 0) start += n;
        if (end < 0) end += n;
        if (start < 0) start = 0;
        if (end > n) end = n;
        if (end < start) end = start;
        var res = new List<dynamic>();
        for (int k = (int)start; k < (int)end; k++) res.Add(list[k]);
        return res;
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static string _indexString(string s, long i) {
        if (i < 0) i += s.Length;
        if (i < 0 || i >= s.Length) throw new Exception("index out of range");
        return s[(int)i].ToString();
    }
    
}
