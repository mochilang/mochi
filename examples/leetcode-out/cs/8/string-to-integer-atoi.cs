// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;

public class Program {
	static long myAtoi(string s) {
		var i = 0L;
		var n = s.Length;
		while (((i < n) && (_indexString(s, i) == " "))) {
			i = (i + 1L);
		}
		var sign = 1L;
		if (((i < n) && (((_indexString(s, i) == "+") || (_indexString(s, i) == "-"))))) {
			if ((_indexString(s, i) == "-")) {
				sign = (-1L);
			}
			i = (i + 1L);
		}
		var digits = new Dictionary<dynamic, dynamic> { { "0", 0L }, { "1", 1L }, { "2", 2L }, { "3", 3L }, { "4", 4L }, { "5", 5L }, { "6", 6L }, { "7", 7L }, { "8", 8L }, { "9", 9L } };
		var result = 0L;
		while ((i < n)) {
			var ch = _indexString(s, i);
			if ((!(_in(ch, digits)))) {
				break;
			}
			var d = digits[ch];
			result = ((result * 10L) + d);
			i = (i + 1L);
		}
		result = (result * sign);
		if ((result > 2147483647L)) {
			return 2147483647L;
		}
		if ((result < ((-2147483648L)))) {
			return (-2147483648L);
		}
		return result;
	}
	
	static void test_example_1() {
		if (!((myAtoi("42") == 42L))) throw new Exception("expect failed");
	}
	
	static void test_example_2() {
		if (!((myAtoi("   -42") == ((-42L))))) throw new Exception("expect failed");
	}
	
	static void test_example_3() {
		if (!((myAtoi("4193 with words") == 4193L))) throw new Exception("expect failed");
	}
	
	static void test_example_4() {
		if (!((myAtoi("words and 987") == 0L))) throw new Exception("expect failed");
	}
	
	static void test_example_5() {
		if (!((myAtoi("-91283472332") == ((-2147483648L))))) throw new Exception("expect failed");
	}
	
	public static void Main() {
		test_example_1();
		test_example_2();
		test_example_3();
		test_example_4();
		test_example_5();
	}
	static string _indexString(string s, long i) {
		if (i < 0) i += s.Length;
		if (i < 0 || i >= s.Length) throw new Exception("index out of range");
		return s[(int)i].ToString();
	}
	
	static bool _in(dynamic item, dynamic col) {
		if (col is string s && item is string sub) {
			return s.Contains(sub);
		}
		if (col is System.Collections.IDictionary d) {
			return d.Contains(item);
		}
		if (col is System.Collections.IEnumerable e) {
			foreach (var it in e) {
				if (Equals(it, item)) return true;
			}
			return false;
		}
		return false;
	}
	
}
