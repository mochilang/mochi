// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;

public class Program {
	static long digit(string ch) {
		if ((ch == "0")) {
			return 0L;
		}
		if ((ch == "1")) {
			return 1L;
		}
		if ((ch == "2")) {
			return 2L;
		}
		if ((ch == "3")) {
			return 3L;
		}
		if ((ch == "4")) {
			return 4L;
		}
		if ((ch == "5")) {
			return 5L;
		}
		if ((ch == "6")) {
			return 6L;
		}
		if ((ch == "7")) {
			return 7L;
		}
		if ((ch == "8")) {
			return 8L;
		}
		if ((ch == "9")) {
			return 9L;
		}
		return (-1L);
	}
	
	static long myAtoi(string s) {
		long i = 0L;
		long n = s.Length;
		while (((i < n) && (_indexString(s, i) == _indexString(" ", 0L)))) {
			i = (i + 1L);
		}
		long sign = 1L;
		if (((i < n) && (((_indexString(s, i) == _indexString("+", 0L)) || (_indexString(s, i) == _indexString("-", 0L)))))) {
			if ((_indexString(s, i) == _indexString("-", 0L))) {
				sign = (-1L);
			}
			i = (i + 1L);
		}
		long result = 0L;
		while ((i < n)) {
			var ch = _sliceString(s, i, (i + 1L));
			long d = digit(ch);
			if ((d < 0L)) {
				break;
			}
			result = ((result * 10L) + d);
			i = (i + 1L);
		}
		result = (result * sign);
		if ((result > 2147483647L)) {
			return 2147483647L;
		}
		if ((result < ((-2147483648L)))) {
			return (-2147483648L);
		}
		return result;
	}
	
	static void test_example_1() {
		if (!((myAtoi("42") == 42L))) throw new Exception("expect failed");
	}
	
	static void test_example_2() {
		if (!((myAtoi("   -42") == ((-42L))))) throw new Exception("expect failed");
	}
	
	static void test_example_3() {
		if (!((myAtoi("4193 with words") == 4193L))) throw new Exception("expect failed");
	}
	
	static void test_example_4() {
		if (!((myAtoi("words and 987") == 0L))) throw new Exception("expect failed");
	}
	
	static void test_example_5() {
		if (!((myAtoi("-91283472332") == ((-2147483648L))))) throw new Exception("expect failed");
	}
	
	public static void Main() {
		test_example_1();
		test_example_2();
		test_example_3();
		test_example_4();
		test_example_5();
	}
	static string _indexString(string s, long i) {
		if (i < 0) i += s.Length;
		if (i < 0 || i >= s.Length) throw new Exception("index out of range");
		return s[(int)i].ToString();
	}
	
	static string _sliceString(string s, long i, long j) {
		var start = i;
		var end = j;
		var n = s.Length;
		if (start < 0) start += n;
		if (end < 0) end += n;
		if (start < 0) start = 0;
		if (end > n) end = n;
		if (end < start) end = start;
		return s.Substring((int)start, (int)(end - start));
	}
	
}
