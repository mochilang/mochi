# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def reverseList(xs: list[int]) -> list[int]:
	out = []
	i = (len(xs) - 1)
	while (i >= 0):
		out = (out + [xs[i]])
		i = (i - 1)
	return out

def zigzagLevelOrder(root: Tree) -> list[list[int]]:
	if (lambda _t0=root: True if isinstance(_t0, Leaf) else False)():
		return []
	result = []
	queue = [root]
	level = 0
	while (len(queue) > 0):
		vals = []
		_next = []
		for node in queue:
			if (lambda _t1=node: False if isinstance(_t1, Leaf) else True)():
				vals = (vals + [node.value])
				if (lambda _t2=node.left: False if isinstance(_t2, Leaf) else True)():
					_next = (_next + [node.left])
				if (lambda _t3=node.right: False if isinstance(_t3, Leaf) else True)():
					_next = (_next + [node.right])
		if ((level % 2) == 1):
			vals = reverseList(vals)
		result = (result + [vals])
		queue = _next
		level = (level + 1)
	return result

class Tree:
	pass
@dataclasses.dataclass
class Leaf(Tree):
	pass
@dataclasses.dataclass
class Node(Tree):
	left: Tree
	value: int
	right: Tree

def example_1():
	tree = Node(left=Node(left=Leaf(), value=9, right=Leaf()), value=3, right=Node(left=Node(left=Leaf(), value=15, right=Leaf()), value=20, right=Node(left=Leaf(), value=7, right=Leaf())))
	assert (zigzagLevelOrder(tree) == [[3], [20, 9], [15, 7]])

def single_node():
	assert (zigzagLevelOrder(Node(left=Leaf(), value=1, right=Leaf())) == [[1]])

def empty():
	assert (zigzagLevelOrder(Leaf()) == [])

def unbalanced():
	tree = Node(left=Node(left=Node(left=Leaf(), value=4, right=Leaf()), value=2, right=Leaf()), value=1, right=Node(left=Leaf(), value=3, right=Node(left=Leaf(), value=5, right=Leaf())))
	assert (zigzagLevelOrder(tree) == [[1], [3, 2], [4, 5]])

def main():
	example_1()
	single_node()
	empty()
	unbalanced()

if __name__ == "__main__":
	main()
