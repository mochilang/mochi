// Generated by Mochi TypeScript compiler

function minDepth(root: any) : number {
	function helper(left: any, right: any) : number {
		let leftDepth: number = minDepth(left)
		let rightDepth: number = minDepth(right)
		if (((leftDepth == 0) && (rightDepth == 0))) {
			return 1
		}
		if ((leftDepth == 0)) {
			return (rightDepth + 1)
		}
		if ((rightDepth == 0)) {
			return (leftDepth + 1)
		}
		if ((leftDepth < rightDepth)) {
			return (leftDepth + 1)
		}
		return (rightDepth + 1)
	}
	return (() => {
	const _t = root;
	switch (_t) {
	case Leaf:
		return 0;
	case Node(l, _, r):
		return helper(l, r);
	}
	return undefined;
})()
}

function example_1(): void {
	let tree: Node = {left: {left: {}, value: 9, right: {}}, value: 3, right: {left: {left: {}, value: 15, right: {}}, value: 20, right: {left: {}, value: 7, right: {}}}}
	if (!((minDepth(tree) == 2))) { throw new Error('expect failed') }
}

function example_2(): void {
	let tree: Node = {left: {}, value: 2, right: {left: {}, value: 3, right: {}}}
	if (!((minDepth(tree) == 2))) { throw new Error('expect failed') }
}

function single_node(): void {
	if (!((minDepth({left: {}, value: 1, right: {}}) == 1))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!((minDepth({}) == 0))) { throw new Error('expect failed') }
}

function main(): void {
	type Tree = {
	}
	example_1()
	example_2()
	single_node()
	empty()
}
main()

