package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

type Tree interface { isTree() }
type Leaf struct {
}
func (Leaf) isTree() {}
type Node struct {
	Left any `json:"left"`
	Value int `json:"value"`
	Right any `json:"right"`
}
func (Node) isTree() {}

func minDepth(root any) int {
	return func() int {
	_t := root
	switch _t {
	case Leaf:
		return 0
	case Node(l, _, r):
		return helper(l, r)
	}
}()
}

func example_1() {
	var tree Node = Node{Left: Node{Left: Leaf{}, Value: 9, Right: Leaf{}}, Value: 3, Right: Node{Left: Node{Left: Leaf{}, Value: 15, Right: Leaf{}}, Value: 20, Right: Node{Left: Leaf{}, Value: 7, Right: Leaf{}}}}
	expect((minDepth(tree) == 2))
}

func example_2() {
	var tree Node = Node{Left: Leaf{}, Value: 2, Right: Node{Left: Leaf{}, Value: 3, Right: Leaf{}}}
	expect((minDepth(tree) == 2))
}

func single_node() {
	expect((minDepth(Node{Left: Leaf{}, Value: 1, Right: Leaf{}}) == 1))
}

func empty() {
	expect((minDepth(Leaf{}) == 0))
}

func main() {
	example_1()
	example_2()
	single_node()
	empty()
}

