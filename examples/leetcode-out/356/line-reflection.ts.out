// Generated by Mochi TypeScript compiler

function isReflected(points: Array<Array<number>>) : boolean {
	if ((points.length == 0)) {
		return true
	}
	let pointSet: Record<any, any> = {}
	let minX: number = points[0][0]
	let maxX: number = points[0][0]
	for (const p of points) {
		let x: number = p[0]
		let y: number = p[1]
		let key: string = String(x) + "," + String(y)
		pointSet[key] = true
		if ((x < minX)) {
			minX = x
		}
		if ((x > maxX)) {
			maxX = x
		}
	}
	let sum: number = (minX + maxX)
	for (const p of points) {
		let x: number = p[0]
		let y: number = p[1]
		let rx: number = (sum - x)
		let key: string = String(rx) + "," + String(y)
		if ((!(Object.prototype.hasOwnProperty.call(pointSet, String(key))))) {
			return false
		}
	}
	return true
}

function example_true(): void {
	if (!((isReflected([[1, 1], [(-1), 1]]) == true))) { throw new Error('expect failed') }
}

function example_false(): void {
	if (!((isReflected([[1, 1], [(-1), (-1)]]) == false))) { throw new Error('expect failed') }
}

function three_points(): void {
	if (!((isReflected([[1, 1], [0, 1], [(-1), 1]]) == true))) { throw new Error('expect failed') }
}

function duplicates(): void {
	if (!((isReflected([[0, 0], [0, 0]]) == true))) { throw new Error('expect failed') }
}

function empty(): void {
	let pts: Array<any> = []
	if (!((isReflected(pts) == true))) { throw new Error('expect failed') }
}

function main(): void {
	example_true()
	example_false()
	three_points()
	duplicates()
	empty()
}
main()

