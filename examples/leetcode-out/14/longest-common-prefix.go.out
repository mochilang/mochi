package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func longestCommonPrefix(strs []string) string {
	if (len(strs) == 0) {
		return ""
	}
	var prefix string = strs[0]
	_ = prefix
	for i := 1; i < len(strs); i++ {
		var j int = 0
		_ = j
		var current string = strs[i]
		for ((j < len(prefix)) && (j < len(current))) {
			if (_indexString(prefix, j) != _indexString(current, j)) {
				break
			}
			j = (j + 1)
		}
		prefix = string([]rune(prefix)[0:j])
		if (prefix == "") {
			break
		}
	}
	return prefix
}

func example_1() {
	expect((longestCommonPrefix([]string{"flower", "flow", "flight"}) == "fl"))
}

func example_2() {
	expect((longestCommonPrefix([]string{"dog", "racecar", "car"}) == ""))
}

func single_string() {
	expect((longestCommonPrefix([]string{"single"}) == "single"))
}

func no_common_prefix() {
	expect((longestCommonPrefix([]string{"a", "b", "c"}) == ""))
}

func main() {
	example_1()
	example_2()
	single_string()
	no_common_prefix()
}

func _indexString(s string, i int) string {
    runes := []rune(s)
    if i < 0 {
        i += len(runes)
    }
    if i < 0 || i >= len(runes) {
        panic("index out of range")
    }
    return string(runes[i])
}

