# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def maxProfit(k: int, prices: list[int]) -> int:
	n = len(prices)
	if ((n == 0) or (k == 0)):
		return 0
	if (k >= (n // 2)):
		profit = 0
		for i in range(1, n):
			diff = (prices[i] - prices[(i - 1)])
			if (diff > 0):
				profit = (profit + diff)
		return profit
	buy = []
	sell = []
	idx = 0
	while (idx < k):
		buy = (buy + [(0 - prices[0])])
		sell = (sell + [0])
		idx = (idx + 1)
	i = 1
	while (i < n):
		price = prices[i]
		b0 = (0 - price)
		if (b0 > buy[0]):
			buy[0] = b0
		s0 = (buy[0] + price)
		if (s0 > sell[0]):
			sell[0] = s0
		j = 1
		while (j < k):
			b = (sell[(j - 1)] - price)
			if (b > buy[j]):
				buy[j] = b
			s = (buy[j] + price)
			if (s > sell[j]):
				sell[j] = s
			j = (j + 1)
		i = (i + 1)
	return sell[(k - 1)]

def example_1():
	assert (maxProfit(2, [2, 4, 1]) == 2)

def example_2():
	assert (maxProfit(2, [3, 2, 6, 5, 0, 3]) == 7)

def empty_prices():
	assert (maxProfit(3, []) == 0)

def unlimited_transactions():
	assert (maxProfit(100, [1, 2, 3, 4, 5]) == 4)

def zero_k():
	assert (maxProfit(0, [1, 3, 2, 8]) == 0)

def main():
	example_1()
	example_2()
	empty_prices()
	unlimited_transactions()
	zero_k()

if __name__ == "__main__":
	main()
