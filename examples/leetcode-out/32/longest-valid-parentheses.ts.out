// Generated by Mochi TypeScript compiler

function longestValidParentheses(s: string) : number {
	let n: number = s.length
	let stack: Array<any> = []
	let best: number = 0
	let last: number = (-1)
	for (let i: number = 0; i < n; i++) {
		let c: string = s[i]
		if ((c == "(")) {
			stack = stack.concat([i])
		} else {
			if ((stack.length == 0)) {
				last = i
			} else {
				stack = stack.slice(0, (stack.length - 1))
				if ((stack.length == 0)) {
					let length: number = (i - last)
					if ((length > best)) {
						best = length
					}
				} else {
					let length: number = (i - stack[(stack.length - 1)])
					if ((length > best)) {
						best = length
					}
				}
			}
		}
	}
	return best
}

function example_1(): void {
	if (!((longestValidParentheses("(()") == 2))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((longestValidParentheses(")()())") == 4))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((longestValidParentheses("") == 0))) { throw new Error('expect failed') }
}

function all_open(): void {
	if (!((longestValidParentheses("(((") == 0))) { throw new Error('expect failed') }
}

function balanced(): void {
	if (!((longestValidParentheses("()()") == 4))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	all_open()
	balanced()
}
main()

