package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func minSwapsCouples(row []int) int {
	var n int = len(row)
	var pos map[int]int = map[int]int{}
	_ = pos
	var i int = 0
	_ = i
	for (i < n) {
		pos[row[i]] = i
		i = (i + 1)
	}
	var swaps int = 0
	_ = swaps
	var j int = 0
	_ = j
	for (j < n) {
		var first int = row[j]
		var partner int = 0
		_ = partner
		if ((first % 2) == 0) {
			partner = (first + 1)
		} else {
			partner = (first - 1)
		}
		var second int = row[(j + 1)]
		if (second != partner) {
			var partnerIndex int = pos[partner]
			_ = partnerIndex
			row[partnerIndex] = second
			pos[second] = partnerIndex
			row[(j + 1)] = partner
			pos[partner] = (j + 1)
			swaps = (swaps + 1)
		}
		j = (j + 2)
	}
	return swaps
}

func example_1() {
	expect((minSwapsCouples([]int{0, 2, 1, 3}) == 1))
}

func example_2() {
	expect((minSwapsCouples([]int{3, 2, 0, 1}) == 0))
}

func scrambled() {
	expect((minSwapsCouples([]int{4, 1, 0, 3, 2, 5}) == 2))
}

func main() {
	example_1()
	example_2()
	scrambled()
}

