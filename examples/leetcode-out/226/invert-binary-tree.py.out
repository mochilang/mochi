# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def Leaf() -> dict[str, typing.Any]:
	return {"__name": "Leaf"}

def Node(left: dict[str, typing.Any], value: int, right: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return {"__name": "Node", "left": left, "value": value, "right": right}

def isLeaf(t: dict[str, typing.Any]) -> bool:
	return (t["__name"] == "Leaf")

def left(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["left"]

def right(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["right"]

def value(t: dict[str, typing.Any]) -> int:
	return t["value"]

def invertTree(root: dict[str, typing.Any]) -> dict[str, typing.Any]:
	if isLeaf(root):
		return root
	l = left(root)
	r = right(root)
	return Node(invertTree(r), value(root), invertTree(l))

def equalTrees(a: dict[str, typing.Any], b: dict[str, typing.Any]) -> bool:
	if (isLeaf(a) and isLeaf(b)):
		return True
	if (isLeaf(a) or isLeaf(b)):
		return False
	return (((value(a) == value(b)) and equalTrees(left(a), left(b))) and equalTrees(right(a), right(b)))

example = Node(Node(Leaf(), 2, Leaf()), 1, Node(Leaf(), 3, Leaf()))
inverted = Node(Node(Leaf(), 3, Leaf()), 1, Node(Leaf(), 2, Leaf()))

def invert_small_tree():
	assert (equalTrees(invertTree(example), inverted) == True)

def single_node():
	t = Node(Leaf(), 1, Leaf())
	assert (equalTrees(invertTree(t), t) == True)

def empty_tree():
	assert (isLeaf(invertTree(Leaf())) == True)

def main():
	example = Node(Node(Leaf(), 2, Leaf()), 1, Node(Leaf(), 3, Leaf()))
	inverted = Node(Node(Leaf(), 3, Leaf()), 1, Node(Leaf(), 2, Leaf()))
	invert_small_tree()
	single_node()
	empty_tree()

if __name__ == "__main__":
	main()
