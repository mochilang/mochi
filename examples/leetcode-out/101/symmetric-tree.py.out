# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def isSymmetric(root: Tree) -> bool:
	def isMirror(t1: typing.Any, t2: typing.Any) -> bool:
		return (lambda _t=t1: (lambda _t=t2: True if isinstance(_t, Leaf) else False)() if isinstance(_t, Leaf) else (lambda l1, v1, r1: (lambda _t=t2: (lambda l2, v2, r2: (((v1 == v2) and isMirror(l1, r2)) and isMirror(r1, l2)))(_t.left, _t.value, _t.right) if isinstance(_t, Node) else False)())(_t.left, _t.value, _t.right) if isinstance(_t, Node) else None)()
	return isMirror(root, root)

class Tree:
	pass
@dataclasses.dataclass
class Leaf(Tree):
	pass
@dataclasses.dataclass
class Node(Tree):
	left: typing.Any
	value: int
	right: typing.Any

def example_1():
	tree = Node(left=Node(left=Node(left=Leaf(), value=3, right=Leaf()), value=2, right=Node(left=Leaf(), value=4, right=Leaf())), value=1, right=Node(left=Node(left=Leaf(), value=4, right=Leaf()), value=2, right=Node(left=Leaf(), value=3, right=Leaf())))
	assert (isSymmetric(tree) == True)

def example_2():
	tree = Node(left=Node(left=Leaf(), value=2, right=Node(left=Leaf(), value=3, right=Leaf())), value=1, right=Node(left=Leaf(), value=2, right=Node(left=Leaf(), value=3, right=Leaf())))
	assert (isSymmetric(tree) == False)

def single_node():
	assert (isSymmetric(Node(left=Leaf(), value=1, right=Leaf())) == True)

def empty():
	assert (isSymmetric(Leaf()) == True)

def main():
	example_1()
	example_2()
	single_node()
	empty()

if __name__ == "__main__":
	main()
