// Generated by Mochi TypeScript compiler

function isSymmetric(root: any) : boolean {
	function isMirror(t1: any, t2: any) : boolean {
		return (() => {
	const _t = t1;
	switch (_t) {
	case Leaf:
		return (() => {
	const _t = t2;
	switch (_t) {
	case Leaf:
		return true;
	default:
		return false;
	}
	return undefined;
})();
	case Node(l1, v1, r1):
		return (() => {
	const _t = t2;
	switch (_t) {
	case Node(l2, v2, r2):
		return ((_equal(v1, v2) && isMirror(l1, r2)) && isMirror(r1, l2));
	default:
		return false;
	}
	return undefined;
})();
	}
	return undefined;
})()
	}
	return isMirror(root, root)
}

function example_1(): void {
	let tree: Node = {left: {left: {left: {}, value: 3, right: {}}, value: 2, right: {left: {}, value: 4, right: {}}}, value: 1, right: {left: {left: {}, value: 4, right: {}}, value: 2, right: {left: {}, value: 3, right: {}}}}
	if (!((isSymmetric(tree) == true))) { throw new Error('expect failed') }
}

function example_2(): void {
	let tree: Node = {left: {left: {}, value: 2, right: {left: {}, value: 3, right: {}}}, value: 1, right: {left: {}, value: 2, right: {left: {}, value: 3, right: {}}}}
	if (!((isSymmetric(tree) == false))) { throw new Error('expect failed') }
}

function single_node(): void {
	if (!((isSymmetric({left: {}, value: 1, right: {}}) == true))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!((isSymmetric({}) == true))) { throw new Error('expect failed') }
}

function main(): void {
	type Tree = {
	}
	example_1()
	example_2()
	single_node()
	empty()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

