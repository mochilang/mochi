package main

import (
	"fmt"
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func formatRange(start int, end int) string {
	if (start == end) {
		return fmt.Sprint(start)
	}
	return fmt.Sprint(start) + "->" + fmt.Sprint(end)
}

func findMissingRanges(nums []int, lower int, upper int) []string {
	var result []string = []string{}
	var prev int = (lower - 1)
	var i int = 0
	for (i <= len(nums)) {
		var curr int = 0
		if (i == len(nums)) {
			curr = (upper + 1)
		} else {
			curr = nums[i]
		}
		if ((curr - prev) >= 2) {
			result = append(append([]string{}, result...), []string{formatRange((prev + 1), (curr - 1))}...)
		}
		prev = curr
		i = (i + 1)
	}
	return result
}

func example_1() {
	expect(_equal(findMissingRanges([]int{0, 1, 3, 50, 75}, 0, 99), []string{"2", "4->49", "51->74", "76->99"}))
}

func example_2() {
	expect(_equal(findMissingRanges([]int{}, 1, 1), []string{"1"}))
}

func main() {
	example_1()
	example_2()
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

