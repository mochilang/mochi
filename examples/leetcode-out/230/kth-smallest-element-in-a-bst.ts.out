// Generated by Mochi TypeScript compiler

let example1: Record<string, any> = Node(Node(Leaf(), 1, Node(Leaf(), 2, Leaf())), 3, Node(Leaf(), 4, Leaf()))

let example2: Record<string, any> = Node(Node(Node(Leaf(), 2, Node(Leaf(), 1, Leaf())), 3, Node(Leaf(), 4, Leaf())), 5, Node(Leaf(), 6, Leaf()))

function Leaf() : Record<string, any> {
	return {"__name": "Leaf"}
}

function Node(left: Record<string, any>, value: number, right: Record<string, any>) : Record<string, any> {
	return {"__name": "Node", "left": left, "value": value, "right": right}
}

function isLeaf(t: Record<string, any>) : boolean {
	return _equal(t["__name"], "Leaf")
}

function left(t: Record<string, any>) : Record<string, any> {
	return t["left"]
}

function right(t: Record<string, any>) : Record<string, any> {
	return t["right"]
}

function value(t: Record<string, any>) : number {
	return t["value"]
}

function kthSmallest(root: Record<string, any>, k: number) : number {
	let stack: Array<any> = []
	let curr: Record<string, any> = root
	let count: any = 0
	while (((!isLeaf(curr)) || (stack.length > 0))) {
		while ((!isLeaf(curr))) {
			stack = stack.concat([curr])
			curr = left(curr)
		}
		let node: any = stack[(stack.length - 1)]
		stack = stack.slice(0, (stack.length - 1))
		count = (count + 1)
		if ((count == k)) {
			return value(node)
		}
		curr = right(node)
	}
	return 0
}

function example_1(): void {
	if (!((kthSmallest(example1, 1) == 1))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((kthSmallest(example2, 3) == 3))) { throw new Error('expect failed') }
}

function single_node(): void {
	if (!((kthSmallest(Node(Leaf(), 8, Leaf()), 1) == 8))) { throw new Error('expect failed') }
}

function k_equals_number_of_nodes(): void {
	if (!((kthSmallest(example1, 4) == 4))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	single_node()
	k_equals_number_of_nodes()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

