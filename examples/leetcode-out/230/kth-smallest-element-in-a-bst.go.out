package main

import (
	"encoding/json"
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func Leaf() map[string]any {
	return _cast[map[string]any](map[string]string{"__name": "Leaf"})
}

func Node(left map[string]any, value int, right map[string]any) map[string]any {
	return map[string]any{"__name": "Node", "left": left, "value": value, "right": right}
}

func isLeaf(t map[string]any) bool {
	return _equal(t["__name"], "Leaf")
}

func left(t map[string]any) map[string]any {
	return t["left"]
}

func right(t map[string]any) map[string]any {
	return t["right"]
}

func value(t map[string]any) int {
	return _cast[int](t["value"])
}

func kthSmallest(root map[string]any, k int) int {
	var stack []map[string]any = []map[string]any{}
	var curr map[string]any = root
	var count int = 0
	for (!isLeaf(curr) || (len(stack) > 0)) {
		for !isLeaf(curr) {
			stack = append(append([]map[string]any{}, stack...), []map[string]any{curr}...)
			curr = left(curr)
		}
		var node map[string]any = stack[(len(stack) - 1)]
		stack = stack[0:(len(stack) - 1)]
		count = (count + 1)
		if (count == k) {
			return value(node)
		}
		curr = right(node)
	}
	return 0
}

func example_1() {
	expect((kthSmallest(example1, 1) == 1))
}

func example_2() {
	expect((kthSmallest(example2, 3) == 3))
}

func single_node() {
	expect((kthSmallest(Node(Leaf(), 8, Leaf()), 1) == 8))
}

func k_equals_number_of_nodes() {
	expect((kthSmallest(example1, 4) == 4))
}

var example1 map[string]any = Node(Node(Leaf(), 1, Node(Leaf(), 2, Leaf())), 3, Node(Leaf(), 4, Leaf()))
var example2 map[string]any = Node(Node(Node(Leaf(), 2, Node(Leaf(), 1, Leaf())), 3, Node(Leaf(), 4, Leaf())), 5, Node(Leaf(), 6, Leaf()))
func main() {
	example_1()
	example_2()
	single_node()
	k_equals_number_of_nodes()
}

func _cast[T any](v any) T {
    data, err := json.Marshal(v)
    if err != nil { panic(err) }
    var out T
    if err := json.Unmarshal(data, &out); err != nil { panic(err) }
    return out
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

