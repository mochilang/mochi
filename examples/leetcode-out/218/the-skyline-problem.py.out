# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def getSkyline(buildings: list[list[int]]) -> list[list[int]]:
	edges = []
	for b in buildings:
		edges = (edges + [[b[0], (-b[2])]])
		edges = (edges + [[b[1], b[2]]])
	byH = [ e for e in sorted([ e for e in edges ], key=lambda e: e[1]) ]
	_sorted = [ e for e in sorted([ e for e in byH ], key=lambda e: e[0]) ]
	heights = [0]
	prev = 0
	result = []
	for edge in _sorted:
		x = edge[0]
		h = edge[1]
		if (h < 0):
			heights = (heights + [(-h)])
		else:
			idx = (-1)
			for i in range(0, len(heights)):
				if (heights[i] == h):
					idx = i
					break
			if (idx >= 0):
				heights = (heights[0:idx] + heights[(idx + 1):len(heights)])
		curr = 0
		for ht in heights:
			if (ht > curr):
				curr = ht
		if (curr != prev):
			result = (result + [[x, curr]])
			prev = curr
	return result

def example_1():
	assert (getSkyline([[2, 9, 10], [3, 7, 15], [5, 12, 12], [15, 20, 10], [19, 24, 8]]) == [[2, 10], [3, 15], [7, 12], [12, 0], [15, 10], [20, 8], [24, 0]])

def example_2():
	assert (getSkyline([[0, 2, 3], [2, 5, 3]]) == [[0, 3], [5, 0]])

def single_building():
	assert (getSkyline([[1, 5, 4]]) == [[1, 4], [5, 0]])

def overlap():
	assert (getSkyline([[1, 3, 3], [1, 4, 2], [3, 4, 1]]) == [[1, 3], [3, 2], [4, 0]])

def main():
	example_1()
	example_2()
	single_building()
	overlap()

if __name__ == "__main__":
	main()
