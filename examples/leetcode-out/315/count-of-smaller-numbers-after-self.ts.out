// Generated by Mochi TypeScript compiler

function countSmaller(nums: Array<number>) : Array<number> {
	let n: number = nums.length
	let result: Array<any> = []
	let fill: number = 0
	while ((fill < n)) {
		result = result.concat([0])
		fill = (fill + 1)
	}
	if ((n == 0)) {
		return result
	}
	let i: number = (n - 1)
	while ((i >= 0)) {
		let count: any = 0
		let j: number = (i + 1)
		while ((j < n)) {
			if ((nums[j] < nums[i])) {
				count = (count + 1)
			}
			j = (j + 1)
		}
		result[i] = count
		i = (i - 1)
	}
	return result
}

function example_1(): void {
	if (!(_equal(countSmaller([5, 2, 6, 1]), [2, 1, 1, 0]))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!(_equal(countSmaller([(-1)]), [0]))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!(_equal(countSmaller([(-1), (-1)]), [0, 0]))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!(_equal(countSmaller([]), []))) { throw new Error('expect failed') }
}

function single_value(): void {
	if (!(_equal(countSmaller([7]), [0]))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	empty()
	single_value()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

