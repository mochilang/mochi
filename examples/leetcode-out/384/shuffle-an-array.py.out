# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def copyList(xs: list[int]) -> list[int]:
	out = []
	for x in xs:
		out = (out + [x])
	return out

def nextRand(s: Shuffler) -> RandResult:
	newSeed = ((((s.seed * 1103515245) + 12345)) % 2147483648)
	newSh = Shuffler(original=s.original, nums=s.nums, seed=newSeed)
	return RandResult(sh=newSh, value=newSeed)

def newShuffler(nums: list[int]) -> Shuffler:
	return Shuffler(original=nums, nums=copyList(nums), seed=1)

def reset(sh: Shuffler) -> Shuffler:
	return Shuffler(original=sh.original, nums=copyList(sh.original), seed=sh.seed)

def shuffle(sh: Shuffler) -> Shuffler:
	arr = copyList(sh.nums)
	state = sh
	i = (len(arr) - 1)
	while (i > 0):
		r = nextRand(state)
		state = r.sh
		j = (r.value % ((i + 1)))
		tmp = arr[i]
		arr[i] = arr[j]
		arr[j] = tmp
		i = (i - 1)
	return Shuffler(original=state.original, nums=arr, seed=state.seed)

@dataclasses.dataclass
class Shuffler:
	original: list[int]
	nums: list[int]
	seed: int

@dataclasses.dataclass
class RandResult:
	sh: typing.Any
	value: int

def example():
	s = newShuffler([1, 2, 3])
	s = shuffle(s)
	_first = s.nums
	s = reset(s)
	assert (s.nums == [1, 2, 3])
	s = shuffle(s)
	_sorted = [ x for x in sorted([ x for x in s.nums ], key=lambda x: x) ]
	assert (_sorted == [1, 2, 3])

def empty():
	s = newShuffler([])
	s = shuffle(s)
	assert (s.nums == [])
	s = reset(s)
	assert (s.nums == [])

def main():
	example()
	empty()

if __name__ == "__main__":
	main()
