// Generated by Mochi TypeScript compiler

function copyList(xs: Array<number>) : Array<number> {
	let out: Array<any> = []
	for (const x of xs) {
		out = out.concat([x])
	}
	return out
}

function nextRand(s: Shuffler) : RandResult {
	let newSeed: number = ((((s.seed * 1103515245) + 12345)) % 2147483648)
	let newSh: Shuffler = {original: s.original, nums: s.nums, seed: newSeed}
	return {sh: newSh, value: newSeed}
}

function newShuffler(nums: Array<number>) : Shuffler {
	return {original: nums, nums: copyList(nums), seed: 1}
}

function reset(sh: Shuffler) : Shuffler {
	return {original: sh.original, nums: copyList(sh.original), seed: sh.seed}
}

function shuffle(sh: Shuffler) : Shuffler {
	let arr: Array<number> = copyList(sh.nums)
	let state: Shuffler = sh
	let i: number = (arr.length - 1)
	while ((i > 0)) {
		let r: RandResult = nextRand(state)
		state = r.sh
		let j: number = (r.value % ((i + 1)))
		let tmp: number = arr[i]
		arr[i] = arr[j]
		arr[j] = tmp
		i = (i - 1)
	}
	return {original: state.original, nums: arr, seed: state.seed}
}

function example(): void {
	let s: Shuffler = newShuffler([1, 2, 3])
	s = shuffle(s)
	let _first: Array<number> = s.nums
	s = reset(s)
	if (!(_equal(s.nums, [1, 2, 3]))) { throw new Error('expect failed') }
	s = shuffle(s)
	let sorted: Array<any> = (() => {
	const _src = s.nums;
	let _items = [];
	for (const x of _src) {
		_items.push(x);
	}
	let _pairs = _items.map(it => { const x = it; return {item: it, key: x}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	const _res = [];
	for (const x of _items) {
		_res.push(x)
	}
	return _res;
})()
	if (!(_equal(sorted, [1, 2, 3]))) { throw new Error('expect failed') }
}

function empty(): void {
	let s: Shuffler = newShuffler([])
	s = shuffle(s)
	if (!(_equal(s.nums, []))) { throw new Error('expect failed') }
	s = reset(s)
	if (!(_equal(s.nums, []))) { throw new Error('expect failed') }
}

function main(): void {
	type Shuffler = {
		original: any;
		nums: any;
		seed: any;
	}
	type RandResult = {
		sh: any;
		value: any;
	}
	example()
	empty()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

