# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def canConstruct(ransomNote: str, magazine: str) -> bool:
	counts = {}
	i = 0
	while (i < len(magazine)):
		ch = magazine[i]
		if (ch in counts):
			counts[ch] = (counts[ch] + 1)
		else:
			counts[ch] = 1
		i = (i + 1)
	i = 0
	while (i < len(ransomNote)):
		ch = ransomNote[i]
		if (ch in counts):
			counts[ch] = (counts[ch] - 1)
			if (counts[ch] < 0):
				return False
		else:
			return False
		i = (i + 1)
	return True

def example_1():
	assert (canConstruct("a", "b") == False)

def example_2():
	assert (canConstruct("aa", "ab") == False)

def example_3():
	assert (canConstruct("aa", "aab") == True)

def empty_ransom():
	assert (canConstruct("", "abc") == True)

def not_enough_letters():
	assert (canConstruct("abc", "ab") == False)

def main():
	example_1()
	example_2()
	example_3()
	empty_ransom()
	not_enough_letters()

if __name__ == "__main__":
	main()
