package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func numDistinct(s string, t string) int {
	var m int = len(s)
	var n int = len(t)
	var dp [][]int = [][]int{}
	_ = dp
	var i int = 0
	_ = i
	for (i <= m) {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for (j <= n) {
			row = append(append([]int{}, row...), []int{0}...)
			j = (j + 1)
		}
		dp = append(append([][]int{}, dp...), [][]int{row}...)
		i = (i + 1)
	}
	i = 0
	for (i <= m) {
		dp[i][0] = 1
		i = (i + 1)
	}
	i = 1
	for (i <= m) {
		var j int = 1
		_ = j
		for (j <= n) {
			dp[i][j] = dp[(i - 1)][j]
			if (_indexString(s, (i - 1)) == _indexString(t, (j - 1))) {
				dp[i][j] = (dp[i][j] + dp[(i - 1)][(j - 1)])
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return dp[m][n]
}

func example_1() {
	expect((numDistinct("rabbbit", "rabbit") == 3))
}

func example_2() {
	expect((numDistinct("babgbag", "bag") == 5))
}

func empty_target() {
	expect((numDistinct("abc", "") == 1))
}

func no_subsequence() {
	expect((numDistinct("abc", "abcd") == 0))
}

func main() {
	example_1()
	example_2()
	empty_target()
	no_subsequence()
}

func _indexString(s string, i int) string {
    runes := []rune(s)
    if i < 0 {
        i += len(runes)
    }
    if i < 0 || i >= len(runes) {
        panic("index out of range")
    }
    return string(runes[i])
}

