package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func minDistance(word1 string, word2 string) int {
	var m int = len(word1)
	var n int = len(word2)
	var dp [][]int = [][]int{}
	_ = dp
	var i int = 0
	_ = i
	for (i <= m) {
		var row []int = []int{}
		_ = row
		var j int = 0
		_ = j
		for (j <= n) {
			row = append(append([]int{}, row...), []int{0}...)
			j = (j + 1)
		}
		dp = append(append([][]int{}, dp...), [][]int{row}...)
		i = (i + 1)
	}
	i = 0
	for (i <= m) {
		dp[i][0] = i
		i = (i + 1)
	}
	var j int = 0
	_ = j
	for (j <= n) {
		dp[0][j] = j
		j = (j + 1)
	}
	i = 1
	for (i <= m) {
		j = 1
		for (j <= n) {
			if (_indexString(word1, (i - 1)) == _indexString(word2, (j - 1))) {
				dp[i][j] = dp[(i - 1)][(j - 1)]
			} else {
				var insert int = (dp[i][(j - 1)] + 1)
				var delete int = (dp[(i - 1)][j] + 1)
				var replace int = (dp[(i - 1)][(j - 1)] + 1)
				var best int = insert
				_ = best
				if (delete < best) {
					best = delete
				}
				if (replace < best) {
					best = replace
				}
				dp[i][j] = best
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return dp[m][n]
}

func example_1() {
	expect((minDistance("horse", "ros") == 3))
}

func example_2() {
	expect((minDistance("intention", "execution") == 5))
}

func identical_strings() {
	expect((minDistance("abc", "abc") == 0))
}

func empty_second() {
	expect((minDistance("abc", "") == 3))
}

func empty_first() {
	expect((minDistance("", "abc") == 3))
}

func main() {
	example_1()
	example_2()
	identical_strings()
	empty_second()
	empty_first()
}

func _indexString(s string, i int) string {
    runes := []rune(s)
    if i < 0 {
        i += len(runes)
    }
    if i < 0 || i >= len(runes) {
        panic("index out of range")
    }
    return string(runes[i])
}

