# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def isPalindrome(s: str) -> bool:
	left = 0
	right = (len(s) - 1)
	while (left < right):
		if (s[left] != s[right]):
			return False
		left = (left + 1)
		right = (right - 1)
	return True

def palindromePairs(words: list[str]) -> list[list[int]]:
	result = []
	n = len(words)
	i = 0
	while (i < n):
		j = 0
		while (j < n):
			if (i != j):
				combined = (words[i] + words[j])
				if isPalindrome(combined):
					result = (result + [[i, j]])
			j = (j + 1)
		i = (i + 1)
	return result

def example_1():
	words = ["abcd", "dcba", "lls", "s", "sssll"]
	assert (palindromePairs(words) == [[0, 1], [1, 0], [2, 4], [3, 2]])

def example_2():
	words = ["bat", "tab", "cat"]
	assert (palindromePairs(words) == [[0, 1], [1, 0]])

def example_3():
	words = ["a", ""]
	assert (palindromePairs(words) == [[0, 1], [1, 0]])

def main():
	example_1()
	example_2()
	example_3()

if __name__ == "__main__":
	main()
