# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def Leaf() -> dict[str, typing.Any]:
	return {"__name": "Leaf"}

def Node(left: dict[str, typing.Any], value: int, right: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return {"__name": "Node", "left": left, "value": value, "right": right}

def isLeaf(t: dict[str, typing.Any]) -> bool:
	return (t["__name"] == "Leaf")

def left(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["left"]

def right(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["right"]

def value(t: dict[str, typing.Any]) -> int:
	return t["value"]

def countUnivalSubtrees(root: dict[str, typing.Any]) -> int:
	count = 0
	def dfs(node: dict[str, typing.Any]) -> bool:
		nonlocal count
		if isLeaf(node):
			return True
		l = left(node)
		r = right(node)
		leftUni = dfs(l)
		rightUni = dfs(r)
		isUni = True
		if (not isLeaf(l)):
			if (not leftUni):
				isUni = False
			if (value(l) != value(node)):
				isUni = False
		if (not isLeaf(r)):
			if (not rightUni):
				isUni = False
			if (value(r) != value(node)):
				isUni = False
		if isUni:
			count = (count + 1)
			return True
		return False
	if (not isLeaf(root)):
		dfs(root)
	return count

example1 = Node(Node(Node(Leaf(), 5, Leaf()), 1, Node(Leaf(), 5, Leaf())), 5, Node(Leaf(), 5, Node(Leaf(), 5, Leaf())))

def example_1():
	assert (countUnivalSubtrees(example1) == 4)

def example_2():
	assert (countUnivalSubtrees(example2) == 6)

def single_node():
	assert (countUnivalSubtrees(Node(Leaf(), 1, Leaf())) == 1)

def empty():
	assert (countUnivalSubtrees(Leaf()) == 0)

def main():
	example1 = Node(Node(Node(Leaf(), 5, Leaf()), 1, Node(Leaf(), 5, Leaf())), 5, Node(Leaf(), 5, Node(Leaf(), 5, Leaf())))
	example2 = Node(Node(Node(Leaf(), 5, Leaf()), 5, Node(Leaf(), 5, Leaf())), 5, Node(Leaf(), 5, Node(Leaf(), 5, Leaf())))
	example_1()
	example_2()
	single_node()
	empty()

if __name__ == "__main__":
	main()
