# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def threeSumClosest(nums: list[int], target: int) -> int:
	_sorted = [ n for n in sorted([ n for n in nums ], key=lambda n: n) ]
	n = len(_sorted)
	best = ((_sorted[0] + _sorted[1]) + _sorted[2])
	for i in range(0, n):
		left = (i + 1)
		right = (n - 1)
		while (left < right):
			sum = ((_sorted[i] + _sorted[left]) + _sorted[right])
			if (sum == target):
				return target
			diff = 0
			if (sum > target):
				diff = (sum - target)
			else:
				diff = (target - sum)
			bestDiff = 0
			if (best > target):
				bestDiff = (best - target)
			else:
				bestDiff = (target - best)
			if (diff < bestDiff):
				best = sum
			if (sum < target):
				left = (left + 1)
			else:
				right = (right - 1)
	return best

def example_1():
	assert (threeSumClosest([(-1), 2, 1, (-4)], 1) == 2)

def example_2():
	assert (threeSumClosest([0, 0, 0], 1) == 0)

def additional():
	assert (threeSumClosest([1, 1, 1, 0], (-100)) == 2)

def main():
	example_1()
	example_2()
	additional()

if __name__ == "__main__":
	main()
