# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def mergeTwoLists(l1: list[int], l2: list[int]) -> list[int]:
	i = 0
	j = 0
	result = []
	while ((i < len(l1)) and (j < len(l2))):
		if (l1[i] <= l2[j]):
			result = (result + [l1[i]])
			i = (i + 1)
		else:
			result = (result + [l2[j]])
			j = (j + 1)
	while (i < len(l1)):
		result = (result + [l1[i]])
		i = (i + 1)
	while (j < len(l2)):
		result = (result + [l2[j]])
		j = (j + 1)
	return result

def example_1():
	assert (mergeTwoLists([1, 2, 4], [1, 3, 4]) == [1, 1, 2, 3, 4, 4])

def example_2():
	assert (mergeTwoLists([], []) == [])

def example_3():
	assert (mergeTwoLists([], [0]) == [0])

def different_lengths():
	assert (mergeTwoLists([1, 5, 7], [2, 3, 4, 6, 8]) == [1, 2, 3, 4, 5, 6, 7, 8])

def one_list_empty():
	assert (mergeTwoLists([1, 2, 3], []) == [1, 2, 3])

def main():
	example_1()
	example_2()
	example_3()
	different_lengths()
	one_list_empty()

if __name__ == "__main__":
	main()
