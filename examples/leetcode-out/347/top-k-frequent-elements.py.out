# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def topKFrequent(nums: list[int], k: int) -> list[int]:
	counts = {}
	for n in nums:
		c = 0
		if (n in counts):
			c = counts[n]
		counts[n] = (c + 1)
	pairs = []
	for key in counts:
		pairs = (pairs + [[key, counts[key]]])
	_sorted = [ p for p in sorted([ p for p in pairs ], key=lambda p: (-p[1])) ]
	result = []
	i = 0
	while ((i < len(_sorted)) and (i < k)):
		result = (result + [_sorted[i][0]])
		i = (i + 1)
	return result

def example_1():
	assert (topKFrequent([1, 1, 1, 2, 2, 3], 2) == [1, 2])

def example_2():
	assert (topKFrequent([1], 1) == [1])

def main():
	example_1()
	example_2()

if __name__ == "__main__":
	main()
