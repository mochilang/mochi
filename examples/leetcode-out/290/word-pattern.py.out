# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def splitWords(s: str) -> list[str]:
	i = 0
	words = []
	current = ""
	while (i < len(s)):
		c = s[i]
		if (c == " "):
			if (len(current) > 0):
				words = (words + [current])
				current = ""
		else:
			current = (current + c)
		i = (i + 1)
	if (len(current) > 0):
		words = (words + [current])
	return words

def wordPattern(pattern: str, s: str) -> bool:
	words = splitWords(s)
	if (len(words) != len(pattern)):
		return False
	p2w = {}
	w2p = {}
	i = 0
	while (i < len(pattern)):
		pch = pattern[i]
		word = words[i]
		if (pch in p2w):
			if (p2w[pch] != word):
				return False
		else:
			p2w[pch] = word
		if (word in w2p):
			if (w2p[word] != pch):
				return False
		else:
			w2p[word] = pch
		i = (i + 1)
	return True

def example_1():
	assert (wordPattern("abba", "dog cat cat dog") == True)

def example_2():
	assert (wordPattern("abba", "dog cat cat fish") == False)

def example_3():
	assert (wordPattern("aaaa", "dog cat cat dog") == False)

def example_4():
	assert (wordPattern("abba", "dog dog dog dog") == False)

def single_word():
	assert (wordPattern("a", "dog") == True)

def mismatch_lengths():
	assert (wordPattern("ab", "one") == False)

def main():
	example_1()
	example_2()
	example_3()
	example_4()
	single_word()
	mismatch_lengths()

if __name__ == "__main__":
	main()
