// Generated by Mochi TypeScript compiler

function splitWords(s: string) : Array<string> {
	let i: number = 0
	let words: Array<any> = []
	let current: string = ""
	while ((i < s.length)) {
		let c: string = s[i]
		if ((c == " ")) {
			if ((current.length > 0)) {
				words = words.concat([current])
				current = ""
			}
		} else {
			current = current + c
		}
		i = (i + 1)
	}
	if ((current.length > 0)) {
		words = words.concat([current])
	}
	return words
}

function wordPattern(pattern: string, s: string) : boolean {
	let words: Array<string> = splitWords(s)
	if ((words.length != pattern.length)) {
		return false
	}
	let p2w: Record<any, any> = {}
	let w2p: Record<any, any> = {}
	let i: number = 0
	while ((i < pattern.length)) {
		let pch: string = pattern[i]
		let word: string = words[i]
		if (Object.prototype.hasOwnProperty.call(p2w, String(pch))) {
			if (!_equal(p2w[pch], word)) {
				return false
			}
		} else {
			p2w[pch] = word
		}
		if (Object.prototype.hasOwnProperty.call(w2p, String(word))) {
			if (!_equal(w2p[word], pch)) {
				return false
			}
		} else {
			w2p[word] = pch
		}
		i = (i + 1)
	}
	return true
}

function example_1(): void {
	if (!((wordPattern("abba", "dog cat cat dog") == true))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((wordPattern("abba", "dog cat cat fish") == false))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((wordPattern("aaaa", "dog cat cat dog") == false))) { throw new Error('expect failed') }
}

function example_4(): void {
	if (!((wordPattern("abba", "dog dog dog dog") == false))) { throw new Error('expect failed') }
}

function single_word(): void {
	if (!((wordPattern("a", "dog") == true))) { throw new Error('expect failed') }
}

function mismatch_lengths(): void {
	if (!((wordPattern("ab", "one") == false))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	example_4()
	single_word()
	mismatch_lengths()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

