# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def minArea(image: list[list[str]], x: int, y: int) -> int:
	rows = len(image)
	cols = len(image[0])
	visited = []
	r = 0
	while (r < rows):
		row = []
		c = 0
		while (c < cols):
			row = (row + [False])
			c = (c + 1)
		visited = (visited + [row])
		r = (r + 1)
	minRow = x
	maxRow = x
	minCol = y
	maxCol = y
	def dfs(i: int, j: int) -> int:
		nonlocal maxCol
		nonlocal visited
		nonlocal minRow
		nonlocal maxRow
		nonlocal minCol
		if ((((i < 0) or (i >= rows)) or (j < 0)) or (j >= cols)):
			return 0
		if visited[i][j]:
			return 0
		if (image[i][j] != "1"):
			return 0
		visited[i][j] = True
		if (i < minRow):
			minRow = i
		if (i > maxRow):
			maxRow = i
		if (j < minCol):
			minCol = j
		if (j > maxCol):
			maxCol = j
		dfs((i + 1), j)
		dfs((i - 1), j)
		dfs(i, (j + 1))
		dfs(i, (j - 1))
		return 0
	dfs(x, y)
	height = ((maxRow - minRow) + 1)
	width = ((maxCol - minCol) + 1)
	return (height * width)

example = [["0", "0", "1", "0"], ["0", "1", "1", "0"], ["0", "1", "0", "0"]]

def example():
	assert (minArea(example, 0, 2) == 6)

def single_pixel():
	assert (minArea([["1"]], 0, 0) == 1)

def all_ones():
	assert (minArea([["1", "1"], ["1", "1"]], 1, 1) == 4)

def main():
	example = [["0", "0", "1", "0"], ["0", "1", "1", "0"], ["0", "1", "0", "0"]]
	example()
	single_pixel()
	all_ones()

if __name__ == "__main__":
	main()
