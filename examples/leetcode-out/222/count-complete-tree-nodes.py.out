# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def countNodes(root: Tree) -> int:
	return (lambda _t=root: 0 if isinstance(_t, Leaf) else (lambda l, _, r: ((countNodes(l) + countNodes(r)) + 1))(_t.left, _t.value, _t.right) if isinstance(_t, Node) else None)()

class Tree:
	pass
@dataclasses.dataclass
class Leaf(Tree):
	pass
@dataclasses.dataclass
class Node(Tree):
	left: typing.Any
	value: int
	right: typing.Any

example1 = Node(left=Node(left=Node(left=Leaf(), value=4, right=Leaf()), value=2, right=Node(left=Leaf(), value=5, right=Leaf())), value=1, right=Node(left=Node(left=Leaf(), value=6, right=Leaf()), value=3, right=Leaf()))

def example_1():
	assert (countNodes(example1) == 6)

def single_node():
	assert (countNodes(Node(left=Leaf(), value=1, right=Leaf())) == 1)

def empty():
	assert (countNodes(Leaf()) == 0)

def main():
	example1 = Node(left=Node(left=Node(left=Leaf(), value=4, right=Leaf()), value=2, right=Node(left=Leaf(), value=5, right=Leaf())), value=1, right=Node(left=Node(left=Leaf(), value=6, right=Leaf()), value=3, right=Leaf()))
	example_1()
	single_node()
	empty()

if __name__ == "__main__":
	main()
