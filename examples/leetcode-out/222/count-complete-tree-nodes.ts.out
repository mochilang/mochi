// Generated by Mochi TypeScript compiler

let example1: Node = {left: {left: {left: {}, value: 4, right: {}}, value: 2, right: {left: {}, value: 5, right: {}}}, value: 1, right: {left: {left: {}, value: 6, right: {}}, value: 3, right: {}}}

function countNodes(root: any) : number {
	return (() => {
	const _t = root;
	switch (_t) {
	case Leaf:
		return 0;
	case Node(l, _, r):
		return ((countNodes(l) + countNodes(r)) + 1);
	}
	return undefined;
})()
}

function example_1(): void {
	if (!((countNodes(example1) == 6))) { throw new Error('expect failed') }
}

function single_node(): void {
	if (!((countNodes({left: {}, value: 1, right: {}}) == 1))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!((countNodes({}) == 0))) { throw new Error('expect failed') }
}

function main(): void {
	type Tree = {
	}
	example_1()
	single_node()
	empty()
}
main()

