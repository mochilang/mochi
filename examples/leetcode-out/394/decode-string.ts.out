// Generated by Mochi TypeScript compiler

function decodeString(s: string) : string {
	let digits: Record<string, number> = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	let counts: Array<any> = []
	let strs: Array<any> = []
	let curr: string = ""
	let num: number = 0
	let i: number = 0
	let n: number = s.length
	while ((i < n)) {
		let c: string = s[i]
		if (((c >= "0") && (c <= "9"))) {
			num = ((num * 10) + digits[c])
		} else 		if ((c == "[")) {
			counts = counts.concat([num])
			strs = strs.concat([curr])
			curr = ""
			num = 0
		} else 		if ((c == "]")) {
			let repeat: any = counts[(counts.length - 1)]
			counts = counts.slice(0, (counts.length - 1))
			let prev: any = strs[(strs.length - 1)]
			strs = strs.slice(0, (strs.length - 1))
			let repeated: string = ""
			let j: number = 0
			while ((j < repeat)) {
				repeated = repeated + curr
				j = (j + 1)
			}
			curr = (prev + repeated)
		} else {
			curr = curr + c
		}
		i = (i + 1)
	}
	return curr
}

function example_1(): void {
	if (!((decodeString("3[a]2[bc]") == "aaabcbc"))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((decodeString("3[a2[c]]") == "accaccacc"))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((decodeString("2[abc]3[cd]ef") == "abcabccdcdcdef"))) { throw new Error('expect failed') }
}

function plain_text_with_brackets(): void {
	if (!((decodeString("abc3[cd]xyz") == "abccdcdcdxyz"))) { throw new Error('expect failed') }
}

function multi_digit_number(): void {
	if (!((decodeString("10[a]") == "aaaaaaaaaa"))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	plain_text_with_brackets()
	multi_digit_number()
}
main()

