# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def merge(intervals: list[list[int]]) -> list[list[int]]:
	if (len(intervals) == 0):
		return []
	_sorted = [ x for x in sorted([ x for x in intervals ], key=lambda x: x[0]) ]
	result = []
	for inter in _sorted:
		if (len(result) == 0):
			result = (result + [inter])
		elif (result[(len(result) - 1)][1] < inter[0]):
			result = (result + [inter])
		elif (inter[1] > result[(len(result) - 1)][1]):
			result[(len(result) - 1)][1] = inter[1]
	return result

def example_1():
	assert (merge([[1, 3], [2, 6], [8, 10], [15, 18]]) == [[1, 6], [8, 10], [15, 18]])

def example_2():
	assert (merge([[1, 4], [4, 5]]) == [[1, 5]])

def single_interval():
	assert (merge([[1, 4]]) == [[1, 4]])

def empty_list():
	assert (merge([]) == [])

def main():
	example_1()
	example_2()
	single_interval()
	empty_list()

if __name__ == "__main__":
	main()
