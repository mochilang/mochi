# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def expand(s: str, left: int, right: int) -> int:
	l = left
	r = right
	n = len(s)
	while ((l >= 0) and (r < n)):
		if (s[l] != s[r]):
			break
		l = (l - 1)
		r = (r + 1)
	return ((r - l) - 1)

def longestPalindrome(s: str) -> str:
	if (len(s) <= 1):
		return s
	start = 0
	end = 0
	n = len(s)
	for i in range(0, n):
		len1 = expand(s, i, i)
		len2 = expand(s, i, (i + 1))
		l = len1
		if (len2 > len1):
			l = len2
		if (l > (end - start)):
			start = (i - (((l - 1)) // 2))
			end = (i + (l // 2))
	return s[start:(end + 1)]

def example_1():
	ans = longestPalindrome("babad")
	assert ((ans == "bab") or (ans == "aba"))

def example_2():
	assert (longestPalindrome("cbbd") == "bb")

def single_char():
	assert (longestPalindrome("a") == "a")

def two_chars():
	ans = longestPalindrome("ac")
	assert ((ans == "a") or (ans == "c"))

def main():
	example_1()
	example_2()
	single_char()
	two_chars()

if __name__ == "__main__":
	main()
