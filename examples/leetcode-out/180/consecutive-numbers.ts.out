// Generated by Mochi TypeScript compiler

function findConsecutive(nums: Array<number>) : Array<number> {
	let n: number = nums.length
	let result: Array<any> = []
	let i: number = 0
	while (((i + 2) < n)) {
		if (((nums[i] == nums[(i + 1)]) && (nums[(i + 1)] == nums[(i + 2)]))) {
			if ((result.length == 0)) {
				result = result.concat([nums[i]])
			} else 			if (!_equal(result[(result.length - 1)], nums[i])) {
				result = result.concat([nums[i]])
			}
		}
		i = (i + 1)
	}
	return result
}

function example(): void {
	if (!((String(findConsecutive([1, 1, 1, 2, 2, 2, 3])) == String([1, 2])))) { throw new Error('expect failed') }
}

function no_triples(): void {
	if (!((String(findConsecutive([1, 2, 3, 4])) == String([])))) { throw new Error('expect failed') }
}

function long_sequence(): void {
	if (!((String(findConsecutive([4, 4, 4, 4, 4])) == String([4])))) { throw new Error('expect failed') }
}

function main(): void {
	example()
	no_triples()
	long_sequence()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

