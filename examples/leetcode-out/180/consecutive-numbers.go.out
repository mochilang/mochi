package main

import (
	"fmt"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func findConsecutive(nums []int) []int {
	var n int = len(nums)
	var result []int = []int{}
	_ = result
	var i int = 0
	_ = i
	for ((i + 2) < n) {
		if ((nums[i] == nums[(i + 1)]) && (nums[(i + 1)] == nums[(i + 2)])) {
			if (len(result) == 0) {
				result = append(append([]int{}, result...), []int{nums[i]}...)
			} else 			if (result[(len(result) - 1)] != nums[i]) {
				result = append(append([]int{}, result...), []int{nums[i]}...)
			}
		}
		i = (i + 1)
	}
	return result
}

func example() {
	expect((fmt.Sprint(findConsecutive([]int{1, 1, 1, 2, 2, 2, 3})) == fmt.Sprint([]int{1, 2})))
}

func no_triples() {
	expect((fmt.Sprint(findConsecutive([]int{1, 2, 3, 4})) == fmt.Sprint([]any{})))
}

func long_sequence() {
	expect((fmt.Sprint(findConsecutive([]int{4, 4, 4, 4, 4})) == fmt.Sprint([]int{4})))
}

func main() {
	example()
	no_triples()
	long_sequence()
}

