// Generated by Mochi TypeScript compiler

let example1: Node = {left: {}, value: 1, right: {left: {left: {}, value: 3, right: {}}, value: 2, right: {}}}

function preorderTraversal(t: any) : Array<number> {
	return (() => {
	const _t = t;
	switch (_t) {
	case Leaf:
		return [];
	case Node(l, v, r):
		return [v].concat(preorderTraversal(l)).concat(preorderTraversal(r));
	}
	return undefined;
})()
}

function example_1(): void {
	if (!(_equal(preorderTraversal(example1), [1, 2, 3]))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!(_equal(preorderTraversal({}), []))) { throw new Error('expect failed') }
}

function single_node(): void {
	if (!(_equal(preorderTraversal({left: {}, value: 1, right: {}}), [1]))) { throw new Error('expect failed') }
}

function main(): void {
	type Tree = {
	}
	example_1()
	empty()
	single_node()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

