package main

import (
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

type Tree interface { isTree() }
type Leaf struct {
}
func (Leaf) isTree() {}
type Node struct {
	Left any `json:"left"`
	Value int `json:"value"`
	Right any `json:"right"`
}
func (Node) isTree() {}

func preorderTraversal(t any) []int {
	return func() any {
	_t := t
	switch _t {
	case Leaf:
		return _cast[[]int]([]any{})
	case Node(l, v, r):
		return append(append([]any{}, append(append([]any{}, []any{v}...), _toAnySlice(preorderTraversal(l))...)...), _toAnySlice(preorderTraversal(r))...)
	}
	return nil
}()
}

func example_1() {
	expect(_equal(preorderTraversal(example1), []int{1, 2, 3}))
}

func empty() {
	expect(_equal(preorderTraversal(Leaf{}), []any{}))
}

func single_node() {
	expect(_equal(preorderTraversal(Node{Left: Leaf{}, Value: 1, Right: Leaf{}}), []int{1}))
}

var example1 Node = Node{Left: Leaf{}, Value: 1, Right: Node{Left: Node{Left: Leaf{}, Value: 3, Right: Leaf{}}, Value: 2, Right: Leaf{}}}
func main() {
	example_1()
	empty()
	single_node()
}

func _cast[T any](v any) T {
    data, err := json.Marshal(v)
    if err != nil { panic(err) }
    var out T
    if err := json.Unmarshal(data, &out); err != nil { panic(err) }
    return out
}

func _equal(a, b any) bool {
    return reflect.DeepEqual(a, b)
}

func _toAnySlice[T any](s []T) []any {
    out := make([]any, len(s))
    for i, v := range s { out[i] = v }
    return out
}

