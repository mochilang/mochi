# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def isValid(s: str) -> bool:
	stack = []
	n = len(s)
	for i in range(0, n):
		c = s[i]
		if (c == "("):
			stack = (stack + [")"])
		elif (c == "["):
			stack = (stack + ["]"])
		elif (c == "{"):
			stack = (stack + ["}"])
		else:
			if (len(stack) == 0):
				return False
			top = stack[(len(stack) - 1)]
			if (top != c):
				return False
			stack = stack[0:(len(stack) - 1)]
	return (len(stack) == 0)

def example_1():
	assert (isValid("()") == True)

def example_2():
	assert (isValid("()[]{}") == True)

def example_3():
	assert (isValid("(]") == False)

def example_4():
	assert (isValid("([)]") == False)

def example_5():
	assert (isValid("{[]}") == True)

def empty_string():
	assert (isValid("") == True)

def single_closing():
	assert (isValid("]") == False)

def unmatched_open():
	assert (isValid("((") == False)

def main():
	example_1()
	example_2()
	example_3()
	example_4()
	example_5()
	empty_string()
	single_closing()
	unmatched_open()

if __name__ == "__main__":
	main()
