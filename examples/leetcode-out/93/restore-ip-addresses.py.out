# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def restoreIpAddresses(s: str) -> list[str]:
	result = []
	digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	def backtrack(start: int, part: int, current: str) -> int:
		nonlocal result
		if (part == 4):
			if (start == len(s)):
				result = (result + [current[1:len(current)]])
			return 0
		for l in range(1, 4):
			if ((start + l) > len(s)):
				break
			segment = s[start:(start + l)]
			if ((len(segment) > 1) and (segment[0] == "0")):
				continue
			val = 0
			for ch in segment:
				val = ((val * 10) + digits[ch])
			if (val > 255):
				continue
			backtrack((start + l), (part + 1), ((current + ".") + segment))
		return 0
	backtrack(0, 0, "")
	return result

def example_1():
	assert (restoreIpAddresses("25525511135") == ["255.255.11.135", "255.255.111.35"])

def all_zeros():
	assert (restoreIpAddresses("0000") == ["0.0.0.0"])

def example_2():
	assert (restoreIpAddresses("101023") == ["1.0.10.23", "1.0.102.3", "10.1.0.23", "10.10.2.3", "101.0.2.3"])

def main():
	example_1()
	all_zeros()
	example_2()

if __name__ == "__main__":
	main()
