package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func minPatches(nums []int, n int) int {
	var miss int = 1
	var i int = 0
	var patches int = 0
	for (miss <= n) {
		if (i < len(nums)) {
			if (nums[i] <= miss) {
				miss = (miss + nums[i])
				i = (i + 1)
			} else {
				miss = (miss + miss)
				patches = (patches + 1)
			}
		} else {
			miss = (miss + miss)
			patches = (patches + 1)
		}
	}
	return patches
}

func example_1() {
	expect((minPatches([]int{1, 3}, 6) == 1))
}

func example_2() {
	expect((minPatches([]int{1, 5, 10}, 20) == 2))
}

func example_3() {
	expect((minPatches([]int{1, 2, 2}, 5) == 0))
}

func no_patches_needed() {
	expect((minPatches([]int{1, 2, 4, 13, 43}, 100) == 2))
}

func large_n() {
	expect((minPatches([]any{}, 7) == 3))
}

func single_element() {
	expect((minPatches([]int{1}, 1) == 0))
}

func main() {
	example_1()
	example_2()
	example_3()
	no_patches_needed()
	large_n()
	single_element()
}

