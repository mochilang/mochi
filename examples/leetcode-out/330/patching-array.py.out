# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def minPatches(nums: list[int], n: int) -> int:
	miss = 1
	i = 0
	patches = 0
	while (miss <= n):
		if (i < len(nums)):
			if (nums[i] <= miss):
				miss = (miss + nums[i])
				i = (i + 1)
			else:
				miss = (miss + miss)
				patches = (patches + 1)
		else:
			miss = (miss + miss)
			patches = (patches + 1)
	return patches

def example_1():
	assert (minPatches([1, 3], 6) == 1)

def example_2():
	assert (minPatches([1, 5, 10], 20) == 2)

def example_3():
	assert (minPatches([1, 2, 2], 5) == 0)

def no_patches_needed():
	assert (minPatches([1, 2, 4, 13, 43], 100) == 2)

def large_n():
	assert (minPatches([], 7) == 3)

def single_element():
	assert (minPatches([1], 1) == 0)

def main():
	example_1()
	example_2()
	example_3()
	no_patches_needed()
	large_n()
	single_element()

if __name__ == "__main__":
	main()
