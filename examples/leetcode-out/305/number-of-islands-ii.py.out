# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def numIslands2(m: int, n: int, positions: list[list[int]]) -> list[int]:
	parent = []
	rank = []
	land = []
	i = 0
	while (i < (m * n)):
		parent = (parent + [i])
		rank = (rank + [0])
		land = (land + [False])
		i = (i + 1)
	def find(x: int) -> int:
		nonlocal parent
		p = parent[x]
		while (p != parent[p]):
			parent[p] = parent[parent[p]]
			p = parent[p]
		parent[x] = p
		return p
	def unite(a: int, b: int, count: int) -> int:
		nonlocal rank
		nonlocal parent
		pa = find(a)
		pb = find(b)
		if (pa == pb):
			return count
		if (rank[pa] < rank[pb]):
			parent[pa] = pb
		elif (rank[pa] > rank[pb]):
			parent[pb] = pa
		else:
			parent[pb] = pa
			rank[pa] = (rank[pa] + 1)
		return (count - 1)
	result = []
	count = 0
	idx = 0
	while (idx < len(positions)):
		r = positions[idx][0]
		c = positions[idx][1]
		id = ((r * n) + c)
		if (not land[id]):
			land[id] = True
			count = (count + 1)
			if (r > 0):
				up = ((((r - 1)) * n) + c)
				if land[up]:
					count = unite(id, up, count)
			if ((r + 1) < m):
				down = ((((r + 1)) * n) + c)
				if land[down]:
					count = unite(id, down, count)
			if (c > 0):
				left = ((r * n) + ((c - 1)))
				if land[left]:
					count = unite(id, left, count)
			if ((c + 1) < n):
				right = ((r * n) + ((c + 1)))
				if land[right]:
					count = unite(id, right, count)
		result = (result + [count])
		idx = (idx + 1)
	return result

def example_1():
	m = 3
	n = 3
	positions = [[0, 0], [0, 1], [1, 2], [2, 1], [1, 1]]
	assert (numIslands2(m, n, positions) == [1, 1, 2, 3, 1])

def add_same_cell():
	m = 1
	n = 2
	positions = [[0, 0], [0, 1], [0, 1]]
	assert (numIslands2(m, n, positions) == [1, 1, 1])

def single_cell():
	assert (numIslands2(1, 1, [[0, 0]]) == [1])

def main():
	example_1()
	add_same_cell()
	single_cell()

if __name__ == "__main__":
	main()
