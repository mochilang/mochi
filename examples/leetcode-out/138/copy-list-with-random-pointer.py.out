# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def copyRandomList(nodes: list[Node]) -> list[Node]:
	result = []
	for n in nodes:
		result = (result + [Node(val=n.val, next=n.next, random=n.random)])
	return result

def serialize(nodes: list[Node]) -> list[list[int]]:
	out = []
	i = 0
	while (i < len(nodes)):
		n = nodes[i]
		out = (out + [[n.val, n.random]])
		i = (i + 1)
	return out

@dataclasses.dataclass
class Node:
	val: int
	next: int
	random: int

def copy_list():
	original = [Node(val=7, next=1, random=(-1)), Node(val=13, next=2, random=0), Node(val=11, next=3, random=4), Node(val=10, next=4, random=2), Node(val=1, next=(-1), random=0)]
	copied = copyRandomList(original)
	assert (serialize(copied) == serialize(original))

def main():
	copy_list()

if __name__ == "__main__":
	main()
