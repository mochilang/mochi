package main

import (
	"encoding/json"
	"fmt"
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func parseInt(s string) int {
	var result int = 0
	var i int = 0
	var digits map[string]int = map[string]int{"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	for (i < len(s)) {
		result = ((result * 10) + digits[_indexString(s, i)])
		i = (i + 1)
	}
	return result
}

func splitComma(s string) []string {
	var parts []string = []string{}
	var current string = ""
	var i int = 0
	for (i < len(s)) {
		var c string = _indexString(s, i)
		if (c == ",") {
			parts = append(append([]string{}, parts...), []string{current}...)
			current = ""
		} else {
			current = current + c
		}
		i = (i + 1)
	}
	parts = append(append([]string{}, parts...), []string{current}...)
	return parts
}

func join(parts []string, sep string) string {
	var result string = ""
	var i int = 0
	for (i < len(parts)) {
		if (i > 0) {
			result = result + sep
		}
		result = result + parts[i]
		i = (i + 1)
	}
	return result
}

func Leaf() map[string]any {
	return _cast[map[string]any](map[string]string{"__name": "Leaf"})
}

func Node(left map[string]any, value int, right map[string]any) map[string]any {
	return map[string]any{"__name": "Node", "left": left, "value": value, "right": right}
}

func isLeaf(t map[string]any) bool {
	return _equal(t["__name"], "Leaf")
}

func left(t map[string]any) map[string]any {
	return t["left"]
}

func right(t map[string]any) map[string]any {
	return t["right"]
}

func value(t map[string]any) int {
	return _cast[int](t["value"])
}

func serialize(root map[string]any) string {
	if isLeaf(root) {
		return ""
	}
	var queue []map[string]any = []map[string]any{root}
	var parts []string = []string{}
	for (len(queue) > 0) {
		var node map[string]any = queue[0]
		queue = queue[1:len(queue)]
		if isLeaf(node) {
			parts = append(append([]string{}, parts...), []string{"null"}...)
		} else {
			parts = append(append([]string{}, parts...), []string{fmt.Sprint(value(node))}...)
			queue = append(append([]map[string]any{}, queue...), []map[string]any{left(node)}...)
			queue = append(append([]map[string]any{}, queue...), []map[string]any{right(node)}...)
		}
	}
	var i int = (len(parts) - 1)
	for ((i >= 0) && (parts[i] == "null")) {
		i = (i - 1)
	}
	parts = parts[0:(i + 1)]
	return join(parts, ",")
}

func deserialize(data string) map[string]any {
	if (data == "") {
		return Leaf()
	}
	var vals []string = splitComma(data)
	var build func(int) map[string]any
	build = func(i int) map[string]any {
		if (i >= len(vals)) {
			return Leaf()
		}
		var v string = vals[i]
		if (v == "null") {
			return Leaf()
		}
		var leftNode map[string]any = build(((2 * i) + 1))
		var rightNode map[string]any = build(((2 * i) + 2))
		return Node(leftNode, parseInt(v), rightNode)
}
	return build(0)
}

func serialize_round_trip() {
	var s string = serialize(example)
	var t map[string]any = deserialize(s)
	_ = t
	expect((serialize(t) == s))
}

func empty_tree() {
	expect((serialize(Leaf()) == ""))
	expect((isLeaf(deserialize("")) == true))
}

func single_node() {
	var s string = serialize(Node(Leaf(), 7, Leaf()))
	_ = s
	expect((s == "7"))
	expect((serialize(deserialize(s)) == "7"))
}

var example map[string]any = Node(Node(Leaf(), 2, Leaf()), 1, Node(Node(Leaf(), 4, Leaf()), 3, Node(Leaf(), 5, Leaf())))
func main() {
	serialize_round_trip()
	empty_tree()
	single_node()
}

func _cast[T any](v any) T {
    data, err := json.Marshal(v)
    if err != nil { panic(err) }
    var out T
    if err := json.Unmarshal(data, &out); err != nil { panic(err) }
    return out
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

func _indexString(s string, i int) string {
    runes := []rune(s)
    if i < 0 {
        i += len(runes)
    }
    if i < 0 || i >= len(runes) {
        panic("index out of range")
    }
    return string(runes[i])
}

