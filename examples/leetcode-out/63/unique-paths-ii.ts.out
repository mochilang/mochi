// Generated by Mochi TypeScript compiler

function uniquePathsWithObstacles(grid: Array<Array<number>>) : number {
	let m: number = grid.length
	if ((m == 0)) {
		return 0
	}
	let n: number = grid[0].length
	let dp: Array<any> = []
	let i: number = 0
	while ((i < m)) {
		let row: Array<any> = []
		let j: number = 0
		while ((j < n)) {
			row = row.concat([0])
			j = (j + 1)
		}
		dp = dp.concat([row])
		i = (i + 1)
	}
	if ((grid[0][0] == 1)) {
		return 0
	}
	dp[0][0] = 1
	i = 0
	while ((i < m)) {
		let j: number = 0
		while ((j < n)) {
			if ((grid[i][j] == 1)) {
				dp[i][j] = 0
			} else {
				if ((i > 0)) {
					dp[i][j] = ((dp[i] as any)[j] + (dp[(i - 1)] as any)[j])
				}
				if ((j > 0)) {
					dp[i][j] = ((dp[i] as any)[j] + (dp[i] as any)[(j - 1)])
				}
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return (dp[(m - 1)] as any)[(n - 1)]
}

function example_1(): void {
	if (!((uniquePathsWithObstacles([[0, 0, 0], [0, 1, 0], [0, 0, 0]]) == 2))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((uniquePathsWithObstacles([[0, 1], [0, 0]]) == 1))) { throw new Error('expect failed') }
}

function obstacle_at_start(): void {
	if (!((uniquePathsWithObstacles([[1]]) == 0))) { throw new Error('expect failed') }
}

function single_open_cell(): void {
	if (!((uniquePathsWithObstacles([[0]]) == 1))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	obstacle_at_start()
	single_open_cell()
}
main()

