// Generated by Mochi TypeScript compiler

function removeDuplicateLetters(s: string) : string {
	let last: Record<any, any> = {}
	let i: number = 0
	while ((i < s.length)) {
		last[s[i]] = i
		i = (i + 1)
	}
	let stack: Array<any> = []
	let seen: Record<any, any> = {}
	i = 0
	while ((i < s.length)) {
		let c: string = s[i]
		let present: boolean = false
		if (Object.prototype.hasOwnProperty.call(seen, String(c))) {
			present = seen[c]
		}
		if ((!present)) {
			while ((stack.length > 0)) {
				let top: any = stack[(stack.length - 1)]
				if (((top > c) && (last[top] > i))) {
					stack = stack.slice(0, (stack.length - 1))
					seen[top] = false
				} else {
					break
				}
			}
			stack = stack.concat([c])
			seen[c] = true
		}
		i = (i + 1)
	}
	let result: string = ""
	for (const ch of stack) {
		result = (result + ch)
	}
	return result
}

function example_1(): void {
	if (!((removeDuplicateLetters("bcabc") == "abc"))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((removeDuplicateLetters("cbacdcbc") == "acdb"))) { throw new Error('expect failed') }
}

function repeated_letters(): void {
	if (!((removeDuplicateLetters("aaaa") == "a"))) { throw new Error('expect failed') }
}

function leetcode(): void {
	if (!((removeDuplicateLetters("leetcode") == "letcod"))) { throw new Error('expect failed') }
}

function mixed_order(): void {
	if (!((removeDuplicateLetters("ecbacba") == "eacb"))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	repeated_letters()
	leetcode()
	mixed_order()
}
main()

