# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def removeDuplicateLetters(s: str) -> str:
	last = {}
	i = 0
	while (i < len(s)):
		last[s[i]] = i
		i = (i + 1)
	stack = []
	seen = {}
	i = 0
	while (i < len(s)):
		c = s[i]
		present = False
		if (c in seen):
			present = seen[c]
		if (not present):
			while (len(stack) > 0):
				top = stack[(len(stack) - 1)]
				if ((top > c) and (last[top] > i)):
					stack = stack[0:(len(stack) - 1)]
					seen[top] = False
				else:
					break
			stack = (stack + [c])
			seen[c] = True
		i = (i + 1)
	result = ""
	for ch in stack:
		result = (result + ch)
	return result

def example_1():
	assert (removeDuplicateLetters("bcabc") == "abc")

def example_2():
	assert (removeDuplicateLetters("cbacdcbc") == "acdb")

def repeated_letters():
	assert (removeDuplicateLetters("aaaa") == "a")

def leetcode():
	assert (removeDuplicateLetters("leetcode") == "letcod")

def mixed_order():
	assert (removeDuplicateLetters("ecbacba") == "eacb")

def main():
	example_1()
	example_2()
	repeated_letters()
	leetcode()
	mixed_order()

if __name__ == "__main__":
	main()
