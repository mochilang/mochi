package main

import (
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func grayCode(n int) []int {
	var result []int = []int{0}
	var power int = 1
	var i int = 0
	for (i < n) {
		var j int = (len(result) - 1)
		for (j >= 0) {
			result = append(append([]int{}, result...), []int{(result[j] + power)}...)
			j = (j - 1)
		}
		power = (power * 2)
		i = (i + 1)
	}
	return result
}

func example_1() {
	expect(_equal(grayCode(2), []int{0, 1, 3, 2}))
}

func example_2() {
	expect(_equal(grayCode(1), []int{0, 1}))
}

func zero_bits() {
	expect(_equal(grayCode(0), []int{0}))
}

func three_bits() {
	expect(_equal(grayCode(3), []int{0, 1, 3, 2, 6, 7, 5, 4}))
}

func main() {
	example_1()
	example_2()
	zero_bits()
	three_bits()
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

