# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def newGame(n: int) -> TicTacToe:
	rs = []
	cs = []
	for i in range(0, n):
		rs = (rs + [0])
		cs = (cs + [0])
	return TicTacToe(n=n, rows=rs, cols=cs, diag=0, anti=0)

def setAt(xs: list[int], idx: int, val: int) -> list[int]:
	return ((xs[0:idx] + [val]) + xs[(idx + 1):len(xs)])

def move(game: TicTacToe, row: int, col: int, player: int) -> MoveResult:
	add = 0
	if (player == 1):
		add = 1
	else:
		add = (-1)
	r = (game.rows[row] + add)
	c = (game.cols[col] + add)
	d = game.diag
	a = game.anti
	if (row == col):
		d = (d + add)
	if ((row + col) == (game.n - 1)):
		a = (a + add)
	newRows = setAt(game.rows, row, r)
	newCols = setAt(game.cols, col, c)
	newBoard = TicTacToe(n=game.n, rows=newRows, cols=newCols, diag=d, anti=a)
	target = game.n
	if ((((((((r == target) or (r == ((-target)))) or (c == target)) or (c == ((-target)))) or (d == target)) or (d == ((-target)))) or (a == target)) or (a == ((-target)))):
		return MoveResult(board=newBoard, winner=player)
	return MoveResult(board=newBoard, winner=0)

@dataclasses.dataclass
class TicTacToe:
	n: int
	rows: list[int]
	cols: list[int]
	diag: int
	anti: int

@dataclasses.dataclass
class MoveResult:
	board: typing.Any
	winner: int

def example():
	g = newGame(3)
	m1 = move(g, 0, 0, 1)
	g = m1.board
	assert (m1.winner == 0)
	m2 = move(g, 0, 2, 2)
	g = m2.board
	assert (m2.winner == 0)
	m3 = move(g, 2, 2, 1)
	g = m3.board
	assert (m3.winner == 0)
	m4 = move(g, 1, 1, 2)
	g = m4.board
	assert (m4.winner == 0)
	m5 = move(g, 2, 0, 1)
	g = m5.board
	assert (m5.winner == 0)
	m6 = move(g, 1, 0, 2)
	g = m6.board
	assert (m6.winner == 0)
	m7 = move(g, 2, 1, 1)
	g = m7.board
	assert (m7.winner == 1)

def row_win():
	g = newGame(3)
	r1 = move(g, 0, 0, 2)
	g = r1.board
	r2 = move(g, 0, 1, 2)
	g = r2.board
	res = move(g, 0, 2, 2)
	g = res.board
	assert (res.winner == 2)

def column_win():
	g = newGame(3)
	r1 = move(g, 0, 1, 1)
	g = r1.board
	r2 = move(g, 1, 1, 1)
	g = r2.board
	res = move(g, 2, 1, 1)
	g = res.board
	assert (res.winner == 1)

def diagonal_win():
	g = newGame(3)
	r1 = move(g, 0, 0, 1)
	g = r1.board
	r2 = move(g, 1, 1, 1)
	g = r2.board
	res = move(g, 2, 2, 1)
	g = res.board
	assert (res.winner == 1)

def anti_diagonal_win():
	g = newGame(3)
	r1 = move(g, 0, 2, 2)
	g = r1.board
	r2 = move(g, 1, 1, 2)
	g = r2.board
	res = move(g, 2, 0, 2)
	g = res.board
	assert (res.winner == 2)

def main():
	example()
	row_win()
	column_win()
	diagonal_win()
	anti_diagonal_win()

if __name__ == "__main__":
	main()
