package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func minWindow(s string, t string) string {
	if (len(t) == 0) {
		return ""
	}
	var need map[string]int = map[string]int{}
	_ = need
	for _, r := range []rune(t) {
		ch := string(r)
		_tmp0 := ch
		_tmp1 := need
		_, _tmp2 := _tmp1[_tmp0]
		if _tmp2 {
			need[ch] = (need[ch] + 1)
		} else {
			need[ch] = 1
		}
	}
	var required int = len(need)
	var have map[string]int = map[string]int{}
	_ = have
	var formed int = 0
	_ = formed
	var left int = 0
	_ = left
	var bestStart int = 0
	_ = bestStart
	var bestLen int = (len(s) + 1)
	_ = bestLen
	var right int = 0
	_ = right
	for (right < len(s)) {
		var ch string = _indexString(s, right)
		_tmp3 := ch
		_tmp4 := need
		_, _tmp5 := _tmp4[_tmp3]
		if _tmp5 {
			_tmp6 := ch
			_tmp7 := have
			_, _tmp8 := _tmp7[_tmp6]
			if _tmp8 {
				have[ch] = (have[ch] + 1)
			} else {
				have[ch] = 1
			}
			if (have[ch] == need[ch]) {
				formed = (formed + 1)
			}
		}
		for ((formed == required) && (left <= right)) {
			if (((right - left) + 1) < bestLen) {
				bestLen = ((right - left) + 1)
				bestStart = left
			}
			var leftCh string = _indexString(s, left)
			_tmp9 := leftCh
			_tmp10 := need
			_, _tmp11 := _tmp10[_tmp9]
			if _tmp11 {
				have[leftCh] = (have[leftCh] - 1)
				if (have[leftCh] < need[leftCh]) {
					formed = (formed - 1)
				}
			}
			left = (left + 1)
		}
		right = (right + 1)
	}
	if (bestLen == (len(s) + 1)) {
		return ""
	}
	return string([]rune(s)[bestStart:(bestStart + bestLen)])
}

func example_1() {
	expect((minWindow("ADOBECODEBANC", "ABC") == "BANC"))
}

func example_2() {
	expect((minWindow("a", "a") == "a"))
}

func example_3() {
	expect((minWindow("a", "aa") == ""))
}

func main() {
	example_1()
	example_2()
	example_3()
}

func _indexString(s string, i int) string {
    runes := []rune(s)
    if i < 0 {
        i += len(runes)
    }
    if i < 0 || i >= len(runes) {
        panic("index out of range")
    }
    return string(runes[i])
}

