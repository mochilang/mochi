package main

import (
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

type Weather struct {
	Id int `json:"id"`
	RecordDate string `json:"recordDate"`
	Temperature int `json:"temperature"`
}

func risingTemperature(records []Weather) []int {
	var result []int = []int{}
	_ = result
	var i int = 1
	_ = i
	for (i < len(records)) {
		var today Weather = records[i]
		var yesterday Weather = records[(i - 1)]
		if (today.Temperature > yesterday.Temperature) {
			result = append(append([]int{}, result...), []int{today.Id}...)
		}
		i = (i + 1)
	}
	return result
}

func rising_days() {
	expect(_equal(risingTemperature(sampleWeather), []int{2, 4}))
}

var sampleWeather []Weather = []Weather{Weather{Id: 1, RecordDate: "2015-01-01", Temperature: 10}, Weather{Id: 2, RecordDate: "2015-01-02", Temperature: 25}, Weather{Id: 3, RecordDate: "2015-01-03", Temperature: 20}, Weather{Id: 4, RecordDate: "2015-01-04", Temperature: 30}}
func main() {
	rising_days()
}

func _equal(a, b any) bool {
    return reflect.DeepEqual(a, b)
}

