# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def addStrings(a: str, b: str) -> str:
	digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	i = len(a)
	j = len(b)
	carry = 0
	out = ""
	while (((i > 0) or (j > 0)) or (carry > 0)):
		x = 0
		if (i > 0):
			i = (i - 1)
			x = digits[a[i]]
		y = 0
		if (j > 0):
			j = (j - 1)
			y = digits[b[j]]
		sum = ((x + y) + carry)
		carry = (sum // 10)
		digit = (sum % 10)
		out = (str(digit) + out)
	return out

def isAdditiveNumber(num: str) -> bool:
	n = len(num)
	i = 1
	while (i <= (n - 2)):
		if ((num[0] == "0") and (i > 1)):
			break
		j = (i + 1)
		while (j <= (n - 1)):
			if ((num[i] == "0") and ((j - i) > 1)):
				break
			first = num[0:i]
			second = num[i:j]
			k = j
			while (k < n):
				third = addStrings(first, second)
				lenThird = len(third)
				if ((k + lenThird) > n):
					break
				if (num[k:(k + lenThird)] != third):
					break
				first = second
				second = third
				k = (k + lenThird)
			if (k == n):
				return True
			j = (j + 1)
		i = (i + 1)
	return False

def example_1():
	assert (isAdditiveNumber("112358") == True)

def example_2():
	assert (isAdditiveNumber("199100199") == True)

def leading_zero():
	assert (isAdditiveNumber("1023") == False)

def all_zeros():
	assert (isAdditiveNumber("000") == True)

def short_sequence():
	assert (isAdditiveNumber("101") == True)

def main():
	example_1()
	example_2()
	leading_zero()
	all_zeros()
	short_sequence()

if __name__ == "__main__":
	main()
