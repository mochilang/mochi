// Generated by Mochi TypeScript compiler

function addStrings(a: string, b: string) : string {
	let digits: Record<string, number> = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	let i: number = a.length
	let j: number = b.length
	let carry: number = 0
	let out: string = ""
	while ((((i > 0) || (j > 0)) || (carry > 0))) {
		let x: number = 0
		if ((i > 0)) {
			i = (i - 1)
			x = digits[a[i]]
		}
		let y: number = 0
		if ((j > 0)) {
			j = (j - 1)
			y = digits[b[j]]
		}
		let sum: number = ((x + y) + carry)
		carry = Math.trunc(sum / 10)
		let digit: number = (sum % 10)
		out = String(digit) + out
	}
	return out
}

function isAdditiveNumber(num: string) : boolean {
	let n: number = num.length
	let i: number = 1
	while ((i <= (n - 2))) {
		if (((num[0] == "0") && (i > 1))) {
			break
		}
		let j: number = (i + 1)
		while ((j <= (n - 1))) {
			if (((num[i] == "0") && ((j - i) > 1))) {
				break
			}
			let first: string = num.slice(0, i)
			let second: string = num.slice(i, j)
			let k: number = j
			while ((k < n)) {
				let third: string = addStrings(first, second)
				let lenThird: number = third.length
				if (((k + lenThird) > n)) {
					break
				}
				if ((num.slice(k, (k + lenThird)) != third)) {
					break
				}
				first = second
				second = third
				k = (k + lenThird)
			}
			if ((k == n)) {
				return true
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	return false
}

function example_1(): void {
	if (!((isAdditiveNumber("112358") == true))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((isAdditiveNumber("199100199") == true))) { throw new Error('expect failed') }
}

function leading_zero(): void {
	if (!((isAdditiveNumber("1023") == false))) { throw new Error('expect failed') }
}

function all_zeros(): void {
	if (!((isAdditiveNumber("000") == true))) { throw new Error('expect failed') }
}

function short_sequence(): void {
	if (!((isAdditiveNumber("101") == true))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	leading_zero()
	all_zeros()
	short_sequence()
}
main()

