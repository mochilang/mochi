package main

import (
	"encoding/json"
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

type Tree interface { isTree() }
type Leaf struct {
}
func (Leaf) isTree() {}
type Node struct {
	Left any `json:"left"`
	Value int `json:"value"`
	Right any `json:"right"`
}
func (Node) isTree() {}

func postorderTraversal(t any) []int {
	return func() []int {
	_t := t
	switch _t {
	case Leaf:
		return _cast[[]int]([]any{})
	case Node(l, v, r):
		return append(append([]any{}, _toAnySlice(append(append([]int{}, postorderTraversal(l)...), postorderTraversal(r)...))...), []any{v}...)
	}
}()
}

func example_1() {
	expect(_equal(postorderTraversal(example1), []int{3, 2, 1}))
}

func single_node() {
	expect(_equal(postorderTraversal(Node{Left: Leaf{}, Value: 1, Right: Leaf{}}), []int{1}))
}

func empty() {
	expect(_equal(postorderTraversal(Leaf{}), []any{}))
}

var example1 Node = Node{Left: Leaf{}, Value: 1, Right: Node{Left: Node{Left: Leaf{}, Value: 3, Right: Leaf{}}, Value: 2, Right: Leaf{}}}
func main() {
	example_1()
	single_node()
	empty()
}

func _cast[T any](v any) T {
    data, err := json.Marshal(v)
    if err != nil { panic(err) }
    var out T
    if err := json.Unmarshal(data, &out); err != nil { panic(err) }
    return out
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

func _toAnySlice[T any](s []T) []any {
    out := make([]any, len(s))
    for i, v := range s { out[i] = v }
    return out
}

