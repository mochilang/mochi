# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def wordPatternMatch(pattern: str, s: str) -> bool:
	m = len(pattern)
	n = len(s)
	def dfs(pi: int, si: int, mapping: dict[str, str], used: dict[str, bool]) -> bool:
		if ((pi == m) and (si == n)):
			return True
		if ((pi == m) or (si == n)):
			return False
		ch = pattern[pi:(pi + 1)]
		if (ch in mapping):
			word = mapping[ch]
			l = len(word)
			if ((si + l) > n):
				return False
			if (s[si:(si + l)] != word):
				return False
			return dfs((pi + 1), (si + l), mapping, used)
		end = (si + 1)
		while (end <= n):
			word = s[si:end]
			already = False
			if (word in used):
				already = used[word]
			if (not already):
				nextMap = mapping
				nextUsed = used
				nextMap[ch] = word
				nextUsed[word] = True
				if dfs((pi + 1), end, nextMap, nextUsed):
					return True
			end = (end + 1)
		return False
	return dfs(0, 0, {}, {})

def example_1():
	assert (wordPatternMatch("abab", "redblueredblue") == True)

def example_2():
	assert (wordPatternMatch("aaaa", "asdasdasdasd") == True)

def example_3():
	assert (wordPatternMatch("aabb", "xyzabcxzyabc") == False)

def main():
	example_1()
	example_2()
	example_3()

if __name__ == "__main__":
	main()
