// Generated by Mochi TypeScript compiler

function totalNQueens(n: number) : number {
	let cols: Array<any> = []
	let i: number = 0
	while ((i < n)) {
		cols = cols.concat([false])
		i = (i + 1)
	}
	let diag1: Array<any> = []
	i = 0
	while ((i < ((2 * n)))) {
		diag1 = diag1.concat([false])
		i = (i + 1)
	}
	let diag2: Array<any> = []
	i = 0
	while ((i < ((2 * n)))) {
		diag2 = diag2.concat([false])
		i = (i + 1)
	}
	let count: any = 0
	function backtrack(row: number) : void {
		if ((row == n)) {
			count = (count + 1)
		} else {
			for (let col: number = 0; col < n; col++) {
				let d1: number = ((row - col) + n)
				let d2: number = (row + col)
				if (((cols[col] || diag1[d1]) || diag2[d2])) {
					continue
				}
				cols[col] = true
				diag1[d1] = true
				diag2[d2] = true
				backtrack((row + 1))
				cols[col] = false
				diag1[d1] = false
				diag2[d2] = false
			}
		}
	}
	backtrack(0)
	return count
}

function example_1(): void {
	if (!((totalNQueens(1) == 1))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((totalNQueens(4) == 2))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((totalNQueens(5) == 10))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
}
main()

