// Generated by Mochi TypeScript compiler

let example: Array<Node> = [{val: 5, left: 1, right: 2}, {val: 3, left: 3, right: 4}, {val: 6, left: (-1), right: (-1)}, {val: 2, left: 5, right: (-1)}, {val: 4, left: (-1), right: (-1)}, {val: 1, left: (-1), right: (-1)}]

function inorderSuccessor(tree: Array<Node>, root: number, p: number) : number {
	let pNode: Node = tree[p]
	let targetVal: number = pNode.val
	let current: number = root
	let successor: number = (-1)
	while ((current != ((-1)))) {
		let node: Node = tree[current]
		if ((targetVal < node.val)) {
			successor = current
			current = node.left
		} else {
			current = node.right
		}
	}
	return successor
}

function successor_in_middle(): void {
	if (!((inorderSuccessor(example, 0, 1) == 4))) { throw new Error('expect failed') }
}

function no_successor(): void {
	if (!((inorderSuccessor(example, 0, 2) == ((-1))))) { throw new Error('expect failed') }
}

function left_subtree(): void {
	if (!((inorderSuccessor(example, 0, 3) == 1))) { throw new Error('expect failed') }
}

function single_node(): void {
	let tree: Array<Node> = [{val: 1, left: (-1), right: (-1)}]
	if (!((inorderSuccessor(tree, 0, 0) == ((-1))))) { throw new Error('expect failed') }
}

function main(): void {
	type Node = {
		val: any;
		left: any;
		right: any;
	}
	successor_in_middle()
	no_successor()
	left_subtree()
	single_node()
}
main()

