package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

type Node struct {
	Val int `json:"val"`
	Left int `json:"left"`
	Right int `json:"right"`
}

func inorderSuccessor(tree []Node, root int, p int) int {
	var pNode Node = tree[p]
	_ = pNode
	var targetVal int = pNode.Val
	var current int = root
	var successor int = -1
	for (current != (-1)) {
		var node Node = tree[current]
		_ = node
		if (targetVal < node.Val) {
			successor = current
			current = node.Left
		} else {
			current = node.Right
		}
	}
	return successor
}

func successor_in_middle() {
	expect((inorderSuccessor(example, 0, 1) == 4))
}

func no_successor() {
	expect((inorderSuccessor(example, 0, 2) == (-1)))
}

func left_subtree() {
	expect((inorderSuccessor(example, 0, 3) == 1))
}

func single_node() {
	var tree []Node = []Node{Node{Val: 1, Left: -1, Right: -1}}
	_ = tree
	expect((inorderSuccessor(tree, 0, 0) == (-1)))
}

var example []any = []Node{Node{Val: 5, Left: 1, Right: 2}, Node{Val: 3, Left: 3, Right: 4}, Node{Val: 6, Left: -1, Right: -1}, Node{Val: 2, Left: 5, Right: -1}, Node{Val: 4, Left: -1, Right: -1}, Node{Val: 1, Left: -1, Right: -1}}
func main() {
	successor_in_middle()
	no_successor()
	left_subtree()
	single_node()
}

