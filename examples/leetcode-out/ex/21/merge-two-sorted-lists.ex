# Generated by Mochi Elixir compiler
defmodule Main do
	def mergeTwoLists(l1, l2) do
		try do
			i = 0
			_ = i
			j = 0
			_ = j
			result = []
			_ = result
			t1 = fn t1, i, j, result ->
				try do
					if ((i < length(l1)) && (j < length(l2))) do
						if (Enum.at(l1, i) <= Enum.at(l2, j)) do
							result = result ++ [Enum.at(l1, i)]
							i = (i + 1)
						else
							result = result ++ [Enum.at(l2, j)]
							j = (j + 1)
						end
						t1.(t1, i, j, result)
					else
						{:ok, i, j, result}
					end
				catch :break ->
					{:ok, i, j, result}
				end
			end
			{_, i, j, result} = t1.(t1, i, j, result)
			_ = i
			_ = j
			_ = result
			t2 = fn t2, i, result ->
				try do
					if (i < length(l1)) do
						result = result ++ [Enum.at(l1, i)]
						i = (i + 1)
						t2.(t2, i, result)
					else
						{:ok, i, result}
					end
				catch :break ->
					{:ok, i, result}
				end
			end
			{_, i, result} = t2.(t2, i, result)
			_ = i
			_ = result
			t3 = fn t3, j, result ->
				try do
					if (j < length(l2)) do
						result = result ++ [Enum.at(l2, j)]
						j = (j + 1)
						t3.(t3, j, result)
					else
						{:ok, j, result}
					end
				catch :break ->
					{:ok, j, result}
				end
			end
			{_, j, result} = t3.(t3, j, result)
			_ = j
			_ = result
			throw {:return, result}
		catch {:return, v} -> v end
	end
	
	def main do
	end
	end
Main.main()
