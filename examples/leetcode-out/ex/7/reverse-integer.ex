# Generated by Mochi Elixir compiler
defmodule Main do
	reverse = fn x ->
		sign = 1
		_ = sign
		n = x
		_ = n
		if (n < 0) do
			sign = -1
			n = -n
		end
		rev = 0
		_ = rev
		t1 = fn t1, n, rev ->
			try do
				if (n != 0) do
					digit = rem(n, 10)
					rev = ((rev * 10) + digit)
					n = (n / 10)
					t1.(t1, n, rev)
				else
					{:ok, n, rev}
				end
			catch :break ->
				{:ok, n, rev}
			end
		end
		{_, n, rev} = t1.(t1, n, rev)
		_ = n
		_ = rev
		rev = (rev * sign)
		if ((rev < (-2147483647 - 1)) || (rev > 2147483647)) do
			throw {:return, 0}
		end
		throw {:return, rev}
	end
	
	def main do
	end
	end
Main.main()
