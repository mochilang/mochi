# Generated by Mochi Elixir compiler
defmodule Main do
	def divide(dividend, divisor) do
		try do
			if ((dividend == (-2147483647 - 1)) && (divisor == -1)) do
				throw {:return, 2147483647}
			end
			negative = false
			_ = negative
			if (dividend < 0) do
				negative = !negative
				dividend = -dividend
			end
			if (divisor < 0) do
				negative = !negative
				divisor = -divisor
			end
			quotient = 0
			_ = quotient
			t1 = fn t1, dividend, quotient ->
				try do
					if (dividend >= divisor) do
						temp = divisor
						_ = temp
						multiple = 1
						_ = multiple
						t2 = fn t2, multiple, temp ->
							try do
								if (dividend >= (temp + temp)) do
									temp = (temp + temp)
									multiple = (multiple + multiple)
									t2.(t2, multiple, temp)
								else
									{:ok, multiple, temp}
								end
							catch :break ->
								{:ok, multiple, temp}
							end
						end
						{_, multiple, temp} = t2.(t2, multiple, temp)
						_ = multiple
						_ = temp
						dividend = (dividend - temp)
						quotient = (quotient + multiple)
						t1.(t1, dividend, quotient)
					else
						{:ok, dividend, quotient}
					end
				catch :break ->
					{:ok, dividend, quotient}
				end
			end
			{_, dividend, quotient} = t1.(t1, dividend, quotient)
			_ = dividend
			_ = quotient
			if negative do
				quotient = -quotient
			end
			if (quotient > 2147483647) do
				throw {:return, 2147483647}
			end
			if (quotient < (-2147483647 - 1)) do
				throw {:return, -2147483648}
			end
			throw {:return, quotient}
		catch {:return, v} -> v end
	end
	
	def main do
	end
	end
Main.main()
