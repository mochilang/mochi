# Generated by Mochi Elixir compiler
defmodule Main do
	def addTwoNumbers(l1, l2) do
		try do
			i = 0
			_ = i
			j = 0
			_ = j
			carry = 0
			_ = carry
			result = []
			_ = result
			t1 = fn t1, carry, i, j, result ->
				try do
					if (((i < length(l1)) || (j < length(l2))) || (carry > 0)) do
						x = 0
						_ = x
						if (i < length(l1)) do
							x = Enum.at(l1, i)
							i = (i + 1)
						end
						y = 0
						_ = y
						if (j < length(l2)) do
							y = Enum.at(l2, j)
							j = (j + 1)
						end
						sum = ((x + y) + carry)
						digit = rem(sum, 10)
						carry = (sum / 10)
						result = result ++ [digit]
						t1.(t1, carry, i, j, result)
					else
						{:ok, carry, i, j, result}
					end
				catch :break ->
					{:ok, carry, i, j, result}
				end
			end
			{_, carry, i, j, result} = t1.(t1, carry, i, j, result)
			_ = carry
			_ = i
			_ = j
			_ = result
			throw {:return, result}
		catch {:return, v} -> v end
	end
	
	def main do
	end
	end
Main.main()
