# Generated by Mochi Elixir compiler
defmodule Main do
	myAtoi = fn s ->
		i = 0
		_ = i
		n = length(s)
		t1 = fn t1, i ->
			try do
				if ((i < n) && (Enum.at(s, i) == " ")) do
					i = (i + 1)
					t1.(t1, i)
				else
					{:ok, i}
				end
			catch :break ->
				{:ok, i}
			end
		end
		{_, i} = t1.(t1, i)
		_ = i
		sign = 1
		_ = sign
		if ((i < n) && ((Enum.at(s, i) == "+") || (Enum.at(s, i) == "-"))) do
			if (Enum.at(s, i) == "-") do
				sign = -1
			end
			i = (i + 1)
		end
		digits = %{"0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9}
		result = 0
		_ = result
		t2 = fn t2, i, result ->
			try do
				if (i < n) do
					ch = Enum.at(s, i)
					if !(if is_map(digits), do: Map.has_key?(digits, ch), else: Enum.member?(digits, ch)) do
						throw :break
					end
					d = Enum.at(digits, ch)
					result = ((result * 10) + d)
					i = (i + 1)
					t2.(t2, i, result)
				else
					{:ok, i, result}
				end
			catch :break ->
				{:ok, i, result}
			end
		end
		{_, i, result} = t2.(t2, i, result)
		_ = i
		_ = result
		result = (result * sign)
		if (result > 2147483647) do
			throw {:return, 2147483647}
		end
		if (result < -2147483648) do
			throw {:return, -2147483648}
		end
		throw {:return, result}
	end
	
	def main do
	end
	end
Main.main()
