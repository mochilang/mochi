# Generated by Mochi Elixir compiler
defmodule Main do
  def digit(ch) do
    try do
      if ch == "0" do
        throw({:return, 0})
      end

      if ch == "1" do
        throw({:return, 1})
      end

      if ch == "2" do
        throw({:return, 2})
      end

      if ch == "3" do
        throw({:return, 3})
      end

      if ch == "4" do
        throw({:return, 4})
      end

      if ch == "5" do
        throw({:return, 5})
      end

      if ch == "6" do
        throw({:return, 6})
      end

      if ch == "7" do
        throw({:return, 7})
      end

      if ch == "8" do
        throw({:return, 8})
      end

      if ch == "9" do
        throw({:return, 9})
      end

      throw({:return, -1})
    catch
      {:return, v} -> v
    end
  end

  def myAtoi(s) do
    try do
      i = 0
      _ = i
      n = length(s)

      t1 = fn t1, i ->
        try do
          if i < n && Enum.at(s, i) == _index_string(" ", 0) do
            i = i + 1
            t1.(t1, i)
          else
            {:ok, i}
          end
        catch
          :break ->
            {:ok, i}
        end
      end

      {_, i} = t1.(t1, i)
      _ = i
      sign = 1
      _ = sign

      if i < n &&
           (Enum.at(s, i) == _index_string("+", 0) || Enum.at(s, i) == _index_string("-", 0)) do
        if Enum.at(s, i) == _index_string("-", 0) do
          sign = -1
        end

        i = i + 1
      end

      result = 0
      _ = result

      t2 = fn t2, i, result ->
        try do
          if i < n do
            ch = Enum.slice(s, i, i + 1 - i)
            d = digit(ch)

            if d < 0 do
              throw(:break)
            end

            result = result * 10 + d
            i = i + 1
            t2.(t2, i, result)
          else
            {:ok, i, result}
          end
        catch
          :break ->
            {:ok, i, result}
        end
      end

      {_, i, result} = t2.(t2, i, result)
      _ = i
      _ = result
      result = result * sign

      if result > 2_147_483_647 do
        throw({:return, 2_147_483_647})
      end

      if result < -2_147_483_648 do
        throw({:return, -2_147_483_648})
      end

      throw({:return, result})
    catch
      {:return, v} -> v
    end
  end

  def main do
  end

  defp _index_string(s, i) do
    chars = String.graphemes(s)
    idx = if i < 0, do: i + length(chars), else: i
    if idx < 0 or idx >= length(chars), do: raise("index out of range")
    Enum.at(chars, idx)
  end
end

Main.main()
