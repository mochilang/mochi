# Generated by Mochi Elixir compiler
defmodule Main do
  def strStr(haystack, needle) do
    try do
      n = length(haystack)
      m = length(needle)

      if m == 0 do
        throw({:return, 0})
      end

      if m > n do
        throw({:return, -1})
      end

      for i <- 0..(n - m + 1 - 1) do
        j = 0
        _ = j

        t1 = fn t1, j ->
          try do
            if j < m do
              if Enum.at(haystack, i + j) != Enum.at(needle, j) do
                throw(:break)
              end

              j = j + 1
              t1.(t1, j)
            else
              {:ok, j}
            end
          catch
            :break ->
              {:ok, j}
          end
        end

        {_, j} = t1.(t1, j)
        _ = j

        if j == m do
          throw({:return, i})
        end
      end

      throw({:return, -1})
    catch
      {:return, v} -> v
    end
  end

  def main do
  end
end

Main.main()
