# Generated by Mochi Elixir compiler
defmodule Main do
	def isValid(s) do
		try do
			stack = []
			_ = stack
			n = length(s)
			{stack} = Enum.reduce(0..(n - 1), {stack}, fn i, {stack} ->
				c = Enum.at(s, i)
				if (c == "(") do
					stack = stack ++ [")"]
				else
					if (c == "[") do
						stack = stack ++ ["]"]
					else
						if (c == "{") do
							stack = stack ++ ["}"]
						else
							if (length(stack) == 0) do
								throw {:return, false}
							end
							top = Enum.at(stack, (length(stack) - 1))
							if (top != c) do
								throw {:return, false}
							end
							stack = Enum.slice(stack, 0, ((length(stack) - 1)) - 0)
						end
					end
				end
				{stack}
			end)
			_ = stack
			throw {:return, (length(stack) == 0)}
		catch {:return, v} -> v end
	end
	
	def main do
	end
	end
Main.main()
