# Generated by Mochi Elixir compiler
defmodule Main do
  def removeDuplicates(nums) do
    try do
      if length(nums) == 0 do
        throw({:return, 0})
      end

      count = 1
      _ = count
      prev = Enum.at(nums, 0)
      _ = prev
      i = 1
      _ = i

      t1 = fn t1, count, i, prev ->
        try do
          if i < length(nums) do
            cur = Enum.at(nums, i)

            if cur != prev do
              count = count + 1
              prev = cur
            end

            i = i + 1
            t1.(t1, count, i, prev)
          else
            {:ok, count, i, prev}
          end
        catch
          :break ->
            {:ok, count, i, prev}
        end
      end

      {_, count, i, prev} = t1.(t1, count, i, prev)
      _ = count
      _ = i
      _ = prev
      throw({:return, count})
    catch
      {:return, v} -> v
    end
  end

  def main do
  end
end

Main.main()
