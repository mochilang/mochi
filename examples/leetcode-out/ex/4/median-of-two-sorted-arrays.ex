# Generated by Mochi Elixir compiler
defmodule Main do
	findMedianSortedArrays = fn nums1, nums2 ->
		merged = []
		_ = merged
		i = 0
		_ = i
		j = 0
		_ = j
		t1 = fn t1, i, j, merged ->
			try do
				if ((i < length(nums1)) || (j < length(nums2))) do
					if (j >= length(nums2)) do
						merged = merged ++ [Enum.at(nums1, i)]
						i = (i + 1)
					else
						if (i >= length(nums1)) do
							merged = merged ++ [Enum.at(nums2, j)]
							j = (j + 1)
						else
							if (Enum.at(nums1, i) <= Enum.at(nums2, j)) do
								merged = merged ++ [Enum.at(nums1, i)]
								i = (i + 1)
							else
								merged = merged ++ [Enum.at(nums2, j)]
								j = (j + 1)
							end
						end
					end
					t1.(t1, i, j, merged)
				else
					{:ok, i, j, merged}
				end
			catch :break ->
				{:ok, i, j, merged}
			end
		end
		{_, i, j, merged} = t1.(t1, i, j, merged)
		_ = i
		_ = j
		_ = merged
		total = length(merged)
		if (rem(total, 2) == 1) do
			throw {:return, Enum.at(merged, (total / 2))}
		end
		mid1 = Enum.at(merged, ((total / 2) - 1))
		mid2 = Enum.at(merged, (total / 2))
		throw {:return, ((mid1 + mid2) / 2)}
	end
	
	def main do
	end
	end
Main.main()
