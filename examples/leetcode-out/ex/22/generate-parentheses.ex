# Generated by Mochi Elixir compiler
defmodule Main do
  def generateParenthesis(n) do
    try do
      result = []
      _ = result

      backtrack = fn current, open, close ->
        if length(current) == n * 2 do
          result = result ++ [current]
        else
          if open < n do
            backtrack.(current <> "(", open + 1, close)
          end

          if close < open do
            backtrack.(current <> ")", open, close + 1)
          end
        end
      end

      backtrack.("", 0, 0)
      throw({:return, result})
    catch
      {:return, v} -> v
    end
  end

  def main do
  end
end

Main.main()
