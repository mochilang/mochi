# Generated by Mochi Elixir compiler
defmodule Main do
	def reverseKGroup(nums, k) do
		try do
			n = length(nums)
			if (k <= 1) do
				throw {:return, nums}
			end
			result = []
			_ = result
			i = 0
			_ = i
			t1 = fn t1, i, result ->
				try do
					if (i < n) do
						end_ = (i + k)
						if (end_ <= n) do
							j = (end_ - 1)
							_ = j
							t2 = fn t2, j, result ->
								try do
									if (j >= i) do
										result = result ++ [Enum.at(nums, j)]
										j = (j - 1)
										t2.(t2, j, result)
									else
										{:ok, j, result}
									end
								catch :break ->
									{:ok, j, result}
								end
							end
							{_, j, result} = t2.(t2, j, result)
							_ = j
							_ = result
						else
							j = i
							_ = j
							t3 = fn t3, j, result ->
								try do
									if (j < n) do
										result = result ++ [Enum.at(nums, j)]
										j = (j + 1)
										t3.(t3, j, result)
									else
										{:ok, j, result}
									end
								catch :break ->
									{:ok, j, result}
								end
							end
							{_, j, result} = t3.(t3, j, result)
							_ = j
							_ = result
						end
						i = (i + k)
						t1.(t1, i, result)
					else
						{:ok, i, result}
					end
				catch :break ->
					{:ok, i, result}
				end
			end
			{_, i, result} = t1.(t1, i, result)
			_ = i
			_ = result
			throw {:return, result}
		catch {:return, v} -> v end
	end
	
	def main do
	end
	end
Main.main()
