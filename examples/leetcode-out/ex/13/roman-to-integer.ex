# Generated by Mochi Elixir compiler
defmodule Main do
	def romanToInt(s) do
		try do
			values = %{"I" => 1, "V" => 5, "X" => 10, "L" => 50, "C" => 100, "D" => 500, "M" => 1000}
			total = 0
			_ = total
			i = 0
			_ = i
			n = length(s)
			t1 = fn t1, i, total ->
				try do
					if (i < n) do
						curr = Enum.at(values, Enum.at(s, i))
						if ((i + 1) < n) do
							next = Enum.at(values, Enum.at(s, (i + 1)))
							if (curr < next) do
								total = ((total + next) - curr)
								i = (i + 2)
								throw :continue
							end
						end
						total = (total + curr)
						i = (i + 1)
						t1.(t1, i, total)
					else
						{:ok, i, total}
					end
				catch :break ->
					{:ok, i, total}
				end
			end
			{_, i, total} = t1.(t1, i, total)
			_ = i
			_ = total
			throw {:return, total}
		catch {:return, v} -> v end
	end
	
	def main do
	end
	end
Main.main()
