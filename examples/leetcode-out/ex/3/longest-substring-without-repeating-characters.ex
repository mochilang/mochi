# Generated by Mochi Elixir compiler
defmodule Main do
  def lengthOfLongestSubstring(s) do
    try do
      n = length(s)
      start = 0
      _ = start
      best = 0
      _ = best
      i = 0
      _ = i

      t1 = fn t1, best, i, start ->
        try do
          if i < n do
            j = start
            _ = j

            t2 = fn t2, j, start ->
              try do
                if j < i do
                  if Enum.at(s, j) == Enum.at(s, i) do
                    start = j + 1
                    throw(:break)
                  end

                  j = j + 1
                  t2.(t2, j, start)
                else
                  {:ok, j, start}
                end
              catch
                :break ->
                  {:ok, j, start}
              end
            end

            {_, j, start} = t2.(t2, j, start)
            _ = j
            _ = start
            length = i - start + 1

            if length > best do
              best = length
            end

            i = i + 1
            t1.(t1, best, i, start)
          else
            {:ok, best, i, start}
          end
        catch
          :break ->
            {:ok, best, i, start}
        end
      end

      {_, best, i, start} = t1.(t1, best, i, start)
      _ = best
      _ = i
      _ = start
      throw({:return, best})
    catch
      {:return, v} -> v
    end
  end

  def main do
  end
end

Main.main()
