# Generated by Mochi Elixir compiler
defmodule Main do
	def removeElement(nums, val) do
		try do
			k = 0
			_ = k
			i = 0
			_ = i
			t1 = fn t1, i, k, nums ->
				try do
					if (i < length(nums)) do
						if (Enum.at(nums, i) != val) do
							nums = Map.put(nums, k, Enum.at(nums, i))
							k = (k + 1)
						end
						i = (i + 1)
						t1.(t1, i, k, nums)
					else
						{:ok, i, k, nums}
					end
				catch :break ->
					{:ok, i, k, nums}
				end
			end
			{_, i, k, nums} = t1.(t1, i, k, nums)
			_ = i
			_ = k
			_ = nums
			throw {:return, k}
		catch {:return, v} -> v end
	end
	
	def main do
	end
	end
Main.main()
