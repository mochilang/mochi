# Generated by Mochi Elixir compiler
defmodule Main do
  def letterCombinations(digits) do
    try do
      if length(digits) == 0 do
        throw({:return, []})
      end

      mapping = %{
        "2" => ["a", "b", "c"],
        "3" => ["d", "e", "f"],
        "4" => ["g", "h", "i"],
        "5" => ["j", "k", "l"],
        "6" => ["m", "n", "o"],
        "7" => ["p", "q", "r", "s"],
        "8" => ["t", "u", "v"],
        "9" => ["w", "x", "y", "z"]
      }

      result = [""]
      _ = result

      {result} =
        Enum.reduce(_iter(digits), {result}, fn d, {result} ->
          if !if(is_map(mapping), do: Map.has_key?(mapping, d), else: Enum.member?(mapping, d)) do
            throw(:continue)
          end

          letters = Enum.at(mapping, d)
          next = for p <- result, ch <- letters, do: p + ch
          result = next
          {result}
        end)

      _ = result
      throw({:return, result})
    catch
      {:return, v} -> v
    end
  end

  def main do
  end

  defp _iter(v) do
    if is_map(v) do
      Map.keys(v)
    else
      v
    end
  end
end

Main.main()
