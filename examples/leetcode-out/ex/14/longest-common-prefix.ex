# Generated by Mochi Elixir compiler
defmodule Main do
  def longestCommonPrefix(strs) do
    try do
      if length(strs) == 0 do
        throw({:return, ""})
      end

      prefix = Enum.at(strs, 0)
      _ = prefix

      {prefix} =
        Enum.reduce(1..(length(strs) - 1), {prefix}, fn i, {prefix} ->
          j = 0
          _ = j
          current = Enum.at(strs, i)

          t1 = fn t1, j ->
            try do
              if j < length(prefix) && j < length(current) do
                if Enum.at(prefix, j) != Enum.at(current, j) do
                  throw(:break)
                end

                j = j + 1
                t1.(t1, j)
              else
                {:ok, j}
              end
            catch
              :break ->
                {:ok, j}
            end
          end

          {_, j} = t1.(t1, j)
          _ = j
          prefix = Enum.slice(prefix, 0, j - 0)

          if prefix == "" do
            throw(:break)
          end

          {prefix}
        end)

      _ = prefix
      throw({:return, prefix})
    catch
      {:return, v} -> v
    end
  end

  def main do
  end
end

Main.main()
