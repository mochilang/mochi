# Generated by Mochi Elixir compiler
defmodule Main do
  def maxArea(height) do
    try do
      left = 0
      _ = left
      right = length(height) - 1
      _ = right
      maxArea = 0
      _ = maxArea

      t1 = fn t1, left, maxArea, right ->
        try do
          if left < right do
            width = right - left
            h = 0
            _ = h

            if Enum.at(height, left) < Enum.at(height, right) do
              h = Enum.at(height, left)
            else
              h = Enum.at(height, right)
            end

            area = h * width

            if area > maxArea do
              maxArea = area
            end

            if Enum.at(height, left) < Enum.at(height, right) do
              left = left + 1
            else
              right = right - 1
            end

            t1.(t1, left, maxArea, right)
          else
            {:ok, left, maxArea, right}
          end
        catch
          :break ->
            {:ok, left, maxArea, right}
        end
      end

      {_, left, maxArea, right} = t1.(t1, left, maxArea, right)
      _ = left
      _ = maxArea
      _ = right
      throw({:return, maxArea})
    catch
      {:return, v} -> v
    end
  end

  def main do
  end
end

Main.main()
