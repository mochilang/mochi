// Generated by Mochi TypeScript compiler

function romanToInt(s: string) : number {
	let values: Record<string, number> = {"I": 1, "V": 5, "X": 10, "L": 50, "C": 100, "D": 500, "M": 1000}
	let total: number = 0
	let i: number = 0
	let n: number = s.length
	while ((i < n)) {
		let curr: number = values[s[i]]
		if (((i + 1) < n)) {
			let next: number = values[s[(i + 1)]]
			if ((curr < next)) {
				total = ((total + next) - curr)
				i = (i + 2)
				continue
			}
		}
		total = (total + curr)
		i = (i + 1)
	}
	return total
}

function example_1(): void {
	if (!((romanToInt("III") == 3))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((romanToInt("LVIII") == 58))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((romanToInt("MCMXCIV") == 1994))) { throw new Error('expect failed') }
}

function subtractive(): void {
	if (!((romanToInt("IV") == 4))) { throw new Error('expect failed') }
	if (!((romanToInt("IX") == 9))) { throw new Error('expect failed') }
}

function tens(): void {
	if (!((romanToInt("XL") == 40))) { throw new Error('expect failed') }
	if (!((romanToInt("XC") == 90))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	subtractive()
	tens()
}
main()

