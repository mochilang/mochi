# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def combineTables(persons: list[Person], addresses: list[Address]) -> list[Result]:
	results = []
	for p in persons:
		found = False
		for a in addresses:
			if (a.personId == p.personId):
				results = (results + [Result(firstName=p.firstName, lastName=p.lastName, city=a.city, state=a.state)])
				found = True
				break
		if (not found):
			results = (results + [Result(firstName=p.firstName, lastName=p.lastName, city="", state="")])
	return results

@dataclasses.dataclass
class Person:
	personId: int
	firstName: str
	lastName: str

@dataclasses.dataclass
class Address:
	addressId: int
	personId: int
	city: str
	state: str

@dataclasses.dataclass
class Result:
	firstName: str
	lastName: str
	city: str
	state: str

person = [Person(personId=1, firstName="Wang", lastName="Allen"), Person(personId=2, firstName="Alice", lastName="Bob"), Person(personId=3, firstName="Bob", lastName="Brown")]
address = [Address(addressId=1, personId=2, city="New York City", state="New York"), Address(addressId=2, personId=3, city="Leetcode", state="California")]

def combine_tables():
	expected = [Result(firstName="Wang", lastName="Allen", city="", state=""), Result(firstName="Alice", lastName="Bob", city="New York City", state="New York"), Result(firstName="Bob", lastName="Brown", city="Leetcode", state="California")]
	assert (str(combineTables(person, address)) == str(expected))

def main():
	person = [Person(personId=1, firstName="Wang", lastName="Allen"), Person(personId=2, firstName="Alice", lastName="Bob"), Person(personId=3, firstName="Bob", lastName="Brown")]
	address = [Address(addressId=1, personId=2, city="New York City", state="New York"), Address(addressId=2, personId=3, city="Leetcode", state="California")]
	combine_tables()

if __name__ == "__main__":
	main()
