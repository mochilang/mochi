// Generated by Mochi TypeScript compiler

let person: Array<Person> = [{personId: 1, firstName: "Wang", lastName: "Allen"}, {personId: 2, firstName: "Alice", lastName: "Bob"}, {personId: 3, firstName: "Bob", lastName: "Brown"}]

let address: Array<Address> = [{addressId: 1, personId: 2, city: "New York City", state: "New York"}, {addressId: 2, personId: 3, city: "Leetcode", state: "California"}]

function combineTables(persons: Array<Person>, addresses: Array<Address>) : Array<Result> {
	let results: Array<any> = []
	for (const p of persons) {
		let found: boolean = false
		for (const a of addresses) {
			if ((a.personId == p.personId)) {
				results = results.concat([{firstName: p.firstName, lastName: p.lastName, city: a.city, state: a.state}])
				found = true
				break
			}
		}
		if ((!found)) {
			results = results.concat([{firstName: p.firstName, lastName: p.lastName, city: "", state: ""}])
		}
	}
	return results
}

function combine_tables(): void {
	let expected: Array<Result> = [{firstName: "Wang", lastName: "Allen", city: "", state: ""}, {firstName: "Alice", lastName: "Bob", city: "New York City", state: "New York"}, {firstName: "Bob", lastName: "Brown", city: "Leetcode", state: "California"}]
	if (!((String(combineTables(person, address)) == String(expected)))) { throw new Error('expect failed') }
}

function main(): void {
	type Person = {
		personId: any;
		firstName: any;
		lastName: any;
	}
	type Address = {
		addressId: any;
		personId: any;
		city: any;
		state: any;
	}
	type Result = {
		firstName: any;
		lastName: any;
		city: any;
		state: any;
	}
	combine_tables()
}
main()

