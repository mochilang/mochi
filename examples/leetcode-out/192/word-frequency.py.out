# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def wordFrequency(lines: list[str]) -> list[WordCount]:
	counts = {}
	for line in lines:
		i = 0
		word = ""
		n = len(line)
		while (i <= n):
			ch = ""
			if (i < n):
				ch = line[i]
			else:
				ch = " "
			if (ch == " "):
				if (word != ""):
					c = 0
					if (word in counts):
						c = counts[word]
					counts[word] = (c + 1)
					word = ""
			else:
				word = (word + ch)
			i = (i + 1)
	result = []
	for w in counts:
		result = (result + [WordCount(word=w, count=counts[w])])
	alpha = [ wc for wc in sorted([ wc for wc in result ], key=lambda wc: wc.word) ]
	_sorted = [ wc for wc in sorted([ wc for wc in alpha ], key=lambda wc: (-wc.count)) ]
	return _sorted

@dataclasses.dataclass
class WordCount:
	word: str
	count: int

def example():
	lines = ["the day is sunny the the the sunny is is"]
	res = wordFrequency(lines)
	e0 = res[0]
	assert (e0.word == "the")
	assert (e0.count == 4)
	e1 = res[1]
	assert (e1.word == "is")
	assert (e1.count == 3)
	e2 = res[2]
	assert (e2.word == "sunny")
	assert (e2.count == 2)
	e3 = res[3]
	assert (e3.word == "day")
	assert (e3.count == 1)

def multiple_lines():
	lines = ["hello world", "hello mochi world"]
	res = wordFrequency(lines)
	a0 = res[0]
	assert (a0.word == "hello")
	assert (a0.count == 2)
	a1 = res[1]
	assert (a1.word == "world")
	assert (a1.count == 2)
	a2 = res[2]
	assert (a2.word == "mochi")
	assert (a2.count == 1)

def main():
	example()
	multiple_lines()

if __name__ == "__main__":
	main()
