package main

import (
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func mergeKLists(lists [][]int) []int {
	var k int = len(lists)
	var indices []int = []int{}
	var i int = 0
	for (i < k) {
		indices = append(append([]int{}, indices...), []int{0}...)
		i = (i + 1)
	}
	var result []int = []int{}
	for {
		var best int = 0
		var bestList int = -1
		var found bool = false
		var j int = 0
		for (j < k) {
			var idx int = indices[j]
			if (idx < len(lists[j])) {
				var val int = lists[j][idx]
				if (!found || (val < best)) {
					best = val
					bestList = j
					found = true
				}
			}
			j = (j + 1)
		}
		if !found {
			break
		}
		result = append(append([]int{}, result...), []int{best}...)
		indices[bestList] = (indices[bestList] + 1)
	}
	return result
}

func example_1() {
	expect(_equal(mergeKLists([][]int{[]int{1, 4, 5}, []int{1, 3, 4}, []int{2, 6}}), []int{1, 1, 2, 3, 4, 4, 5, 6}))
}

func example_2() {
	expect(_equal(mergeKLists([][]int{}), []any{}))
}

func example_3() {
	expect(_equal(mergeKLists([][]int{[]int{}}), []any{}))
}

func main() {
	example_1()
	example_2()
	example_3()
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

