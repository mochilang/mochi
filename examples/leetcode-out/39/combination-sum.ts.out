// Generated by Mochi TypeScript compiler

function combinationSum(candidates: Array<number>, target: number) : Array<Array<number>> {
	let sorted: Array<any> = (() => {
	const _src = candidates;
	let _items = [];
	for (const c of _src) {
		_items.push(c);
	}
	let _pairs = _items.map(it => { const c = it; return {item: it, key: c}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	const _res = [];
	for (const c of _items) {
		_res.push(c)
	}
	return _res;
})()
	let result: Array<any> = []
	function backtrack(remain: number, start: number, path: Array<number>) : void {
		if ((remain == 0)) {
			result = result.concat([path])
		} else {
			let i: number = start
			let n: number = sorted.length
			while ((i < n)) {
				let current: any = sorted[i]
				if ((current > remain)) {
					break
				}
				backtrack((remain - current), i, path.concat([current]))
				i = (i + 1)
			}
		}
	}
	backtrack(target, 0, [])
	return result
}

function example_1(): void {
	if (!(_equal(combinationSum([2, 3, 6, 7], 7), [[2, 2, 3], [7]]))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!(_equal(combinationSum([2, 3, 5], 8), [[2, 2, 2, 2], [2, 3, 3], [3, 5]]))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!(_equal(combinationSum([2], 1), []))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

