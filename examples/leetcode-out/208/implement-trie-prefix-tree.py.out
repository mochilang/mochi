# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def Node() -> dict[str, typing.Any]:
	return {"children": {}, "end": False}

def insert(trie: dict[str, typing.Any], word: str) -> None:
	node = trie
	i = 0
	while (i < len(word)):
		ch = word[i]
		kids = node["children"]
		child = {}
		if (ch in kids):
			child = kids[ch]
		else:
			child = Node()
		if (i == (len(word) - 1)):
			child["end"] = True
		kids[ch] = child
		node["children"] = kids
		node = child
		i = (i + 1)

def search(trie: dict[str, typing.Any], word: str) -> bool:
	node = trie
	for ch in word:
		kids = node["children"]
		if (not ((ch in kids))):
			return False
		node = kids[ch]
	return node["end"]

def startsWith(trie: dict[str, typing.Any], prefix: str) -> bool:
	node = trie
	for ch in prefix:
		kids = node["children"]
		if (not ((ch in kids))):
			return False
		node = kids[ch]
	return True

def search_apple():
	t = Node()
	insert(t, "apple")
	assert (search(t, "apple") == True)

def search_app():
	t = Node()
	insert(t, "apple")
	assert (search(t, "app") == False)

def startsWith_app():
	t = Node()
	insert(t, "apple")
	assert (startsWith(t, "app") == True)

def search_app_after_insert():
	t = Node()
	insert(t, "apple")
	insert(t, "app")
	assert (search(t, "app") == True)

def main():
	search_apple()
	search_app()
	startsWith_app()
	search_app_after_insert()

if __name__ == "__main__":
	main()
