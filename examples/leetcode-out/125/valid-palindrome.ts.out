// Generated by Mochi TypeScript compiler

function isAlphaNum(ch: string) : boolean {
	if ((("0" <= ch) && (ch <= "9"))) {
		return true
	}
	if ((("a" <= ch) && (ch <= "z"))) {
		return true
	}
	if ((("A" <= ch) && (ch <= "Z"))) {
		return true
	}
	return false
}

function toLower(ch: string) : string {
	let map: Record<string, string> = {"A": "a", "B": "b", "C": "c", "D": "d", "E": "e", "F": "f", "G": "g", "H": "h", "I": "i", "J": "j", "K": "k", "L": "l", "M": "m", "N": "n", "O": "o", "P": "p", "Q": "q", "R": "r", "S": "s", "T": "t", "U": "u", "V": "v", "W": "w", "X": "x", "Y": "y", "Z": "z"}
	if (Object.prototype.hasOwnProperty.call(map, String(ch))) {
		return map[ch]
	}
	return ch
}

function isPalindrome(s: string) : boolean {
	let filtered: Array<any> = []
	for (const ch of s) {
		if (isAlphaNum(ch)) {
			filtered = filtered.concat([toLower(ch)])
		}
	}
	let n: number = filtered.length
	for (let i: number = 0; i < Math.trunc(n / 2); i++) {
		if (!_equal(filtered[i], filtered[((n - 1) - i)])) {
			return false
		}
	}
	return true
}

function example_1(): void {
	if (!((isPalindrome("A man, a plan, a canal: Panama") == true))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((isPalindrome("race a car") == false))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((isPalindrome(" ") == true))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

