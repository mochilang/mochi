# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:
	_dict = {}
	for w in wordList:
		_dict[w] = True
	if (not ((endWord in _dict))):
		return 0
	queue = [beginWord]
	visited = {beginWord: True}
	level = 1
	letters = "abcdefghijklmnopqrstuvwxyz"
	while (len(queue) > 0):
		next = []
		for word in queue:
			if (word == endWord):
				return level
			for i in range(0, len(word)):
				for j in range(0, len(letters)):
					ch = letters[j]
					if (ch != word[i]):
						candidate = ((word[0:i] + ch) + word[(i + 1):len(word)])
						if ((candidate in _dict) and (((candidate in visited)) == False)):
							visited[candidate] = True
							next = (next + [candidate])
		queue = next
		level = (level + 1)
	return 0

def example_1():
	assert (ladderLength("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog"]) == 5)

def example_2():
	assert (ladderLength("hit", "cog", ["hot", "dot", "dog", "lot", "log"]) == 0)

def main():
	example_1()
	example_2()

if __name__ == "__main__":
	main()
