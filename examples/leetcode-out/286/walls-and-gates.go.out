package main

import (
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func wallsAndGates(rooms [][]int) [][]int {
	var rows int = len(rooms)
	if (rows == 0) {
		return rooms
	}
	var cols int = len(rooms[0])
	var queue [][]int = [][]int{}
	for r := 0; r < rows; r++ {
		for c := 0; c < cols; c++ {
			if (rooms[r][c] == 0) {
				queue = append(append([][]int{}, queue...), [][]int{[]int{r, c}}...)
			}
		}
	}
	var idx int = 0
	for (idx < len(queue)) {
		var pos []int = queue[idx]
		idx = (idx + 1)
		var r int = pos[0]
		var c int = pos[1]
		var dist int = rooms[r][c]
		if (r > 0) {
			if (rooms[(r - 1)][c] == 2147483647) {
				rooms[(r - 1)][c] = (dist + 1)
				queue = append(append([][]int{}, queue...), [][]int{[]int{(r - 1), c}}...)
			}
		}
		if ((r + 1) < rows) {
			if (rooms[(r + 1)][c] == 2147483647) {
				rooms[(r + 1)][c] = (dist + 1)
				queue = append(append([][]int{}, queue...), [][]int{[]int{(r + 1), c}}...)
			}
		}
		if (c > 0) {
			if (rooms[r][(c - 1)] == 2147483647) {
				rooms[r][(c - 1)] = (dist + 1)
				queue = append(append([][]int{}, queue...), [][]int{[]int{r, (c - 1)}}...)
			}
		}
		if ((c + 1) < cols) {
			if (rooms[r][(c + 1)] == 2147483647) {
				rooms[r][(c + 1)] = (dist + 1)
				queue = append(append([][]int{}, queue...), [][]int{[]int{r, (c + 1)}}...)
			}
		}
	}
	return rooms
}

func example() {
	var INF int = 2147483647
	var rooms [][]int = [][]int{[]int{INF, -1, 0, INF}, []int{INF, INF, INF, -1}, []int{INF, -1, INF, -1}, []int{0, -1, INF, INF}}
	_ = rooms
	var expected [][]int = [][]int{[]int{3, -1, 0, 1}, []int{2, 2, 1, -1}, []int{1, -1, 2, -1}, []int{0, -1, 3, 4}}
	_ = expected
	expect(_equal(wallsAndGates(rooms), expected))
}

func all_walls() {
	var rooms [][]int = [][]int{[]int{-1, -1}, []int{-1, -1}}
	_ = rooms
	expect(_equal(wallsAndGates(rooms), rooms))
}

func single_gate() {
	var rooms [][]int = [][]int{[]int{2147483647, 0, 2147483647}}
	_ = rooms
	var expected [][]int = [][]int{[]int{1, 0, 1}}
	_ = expected
	expect(_equal(wallsAndGates(rooms), expected))
}

func empty() {
	var rooms [][]int = []any{}
	_ = rooms
	expect(_equal(wallsAndGates(rooms), rooms))
}

func main() {
	example()
	all_walls()
	single_gate()
	empty()
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

