package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func reverseWords(s string) string {
	var i int = (len(s) - 1)
	_ = i
	var words []string = []string{}
	_ = words
	for (i >= 0) {
		for ((i >= 0) && (_indexString(s, i) == " ")) {
			i = (i - 1)
		}
		if (i < 0) {
			break
		}
		var j int = i
		_ = j
		for ((j >= 0) && (_indexString(s, j) != " ")) {
			j = (j - 1)
		}
		words = append(append([]string{}, words...), []string{string([]rune(s)[(j + 1):(i + 1)])}...)
		i = j
	}
	var result string = ""
	_ = result
	var k int = 0
	_ = k
	for (k < len(words)) {
		if (k > 0) {
			result = result + " "
		}
		result = result + words[k]
		k = (k + 1)
	}
	return result
}

func example_1() {
	expect((reverseWords("the sky is blue") == "blue is sky the"))
}

func example_2() {
	expect((reverseWords("  hello world  ") == "world hello"))
}

func example_3() {
	expect((reverseWords("a good   example") == "example good a"))
}

func single_word() {
	expect((reverseWords("hello") == "hello"))
}

func only_spaces() {
	expect((reverseWords("    ") == ""))
}

func main() {
	example_1()
	example_2()
	example_3()
	single_word()
	only_spaces()
}

func _indexString(s string, i int) string {
    runes := []rune(s)
    if i < 0 {
        i += len(runes)
    }
    if i < 0 || i >= len(runes) {
        panic("index out of range")
    }
    return string(runes[i])
}

