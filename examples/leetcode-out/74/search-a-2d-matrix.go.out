package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func searchMatrix(matrix [][]int, target int) bool {
	var m int = len(matrix)
	if (m == 0) {
		return false
	}
	var n int = len(matrix[0])
	var left int = 0
	var right int = ((m * n) - 1)
	for (left <= right) {
		var mid int = ((left + ((right - left))) / 2)
		var row int = (mid / n)
		var col int = (mid % n)
		var value int = matrix[row][col]
		if (value == target) {
			return true
		} else 		if (value < target) {
			left = (mid + 1)
		} else {
			right = (mid - 1)
		}
	}
	return false
}

func example_1() {
	expect((searchMatrix([][]int{[]int{1, 3, 5, 7}, []int{10, 11, 16, 20}, []int{23, 30, 34, 60}}, 3) == true))
}

func example_2() {
	expect((searchMatrix([][]int{[]int{1, 3, 5, 7}, []int{10, 11, 16, 20}, []int{23, 30, 34, 60}}, 13) == false))
}

func single_row() {
	expect((searchMatrix([][]int{[]int{1, 2, 3, 4}}, 3) == true))
}

func not_found() {
	expect((searchMatrix([][]int{[]int{5}}, 1) == false))
}

func main() {
	example_1()
	example_2()
	single_row()
	not_found()
}

