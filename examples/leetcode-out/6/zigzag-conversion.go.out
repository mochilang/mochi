package main

import (
	"fmt"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func convert(s string, numRows int) string {
	if ((numRows <= 1) || (numRows >= len(s))) {
		return s
	}
	var rows []any = []any{}
	_ = rows
	var i int = 0
	_ = i
	for (i < numRows) {
		rows = append(append([]any{}, rows...), _toAnySlice([]string{""})...)
		i = (i + 1)
	}
	var curr int = 0
	_ = curr
	var step int = 1
	_ = step
	for _, r := range []rune(s) {
		ch := string(r)
		rows[curr] = fmt.Sprint(rows[curr]) + ch
		if (curr == 0) {
			step = 1
		} else 		if (curr == (numRows - 1)) {
			step = -1
		}
		curr = (curr + step)
	}
	var result string = ""
	_ = result
	for _, row := range rows {
		result = result + fmt.Sprint(row)
	}
	return result
}

func example_1() {
	expect((convert("PAYPALISHIRING", 3) == "PAHNAPLSIIGYIR"))
}

func example_2() {
	expect((convert("PAYPALISHIRING", 4) == "PINALSIGYAHRPI"))
}

func single_row() {
	expect((convert("A", 1) == "A"))
}

func main() {
	example_1()
	example_2()
	single_row()
}

func _toAnySlice[T any](s []T) []any {
    out := make([]any, len(s))
    for i, v := range s { out[i] = v }
    return out
}

