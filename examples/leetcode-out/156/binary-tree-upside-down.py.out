# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def Leaf() -> dict[str, typing.Any]:
	return {"__name": "Leaf"}

def Node(left: dict[str, typing.Any], value: int, right: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return {"__name": "Node", "left": left, "value": value, "right": right}

def isLeaf(t: dict[str, typing.Any]) -> bool:
	return (t["__name"] == "Leaf")

def left(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["left"]

def right(t: dict[str, typing.Any]) -> dict[str, typing.Any]:
	return t["right"]

def value(t: dict[str, typing.Any]) -> int:
	return t["value"]

def setLeft(t: dict[str, typing.Any], l: dict[str, typing.Any]) -> None:
	t["left"] = l

def setRight(t: dict[str, typing.Any], r: dict[str, typing.Any]) -> None:
	t["right"] = r

def upsideDown(root: dict[str, typing.Any]) -> dict[str, typing.Any]:
	if isLeaf(root):
		return root
	curr = root
	parent = Leaf()
	parentRight = Leaf()
	while (not isLeaf(curr)):
		next = left(curr)
		oldRight = right(curr)
		setLeft(curr, parentRight)
		setRight(curr, parent)
		parentRight = oldRight
		parent = curr
		curr = next
	return parent

def levelOrder(root: dict[str, typing.Any]) -> list[list[int]]:
	result = []
	queue = []
	if (not isLeaf(root)):
		queue = [root]
	while (len(queue) > 0):
		vals = []
		next = []
		for node in queue:
			vals = (vals + [value(node)])
			l = left(node)
			r = right(node)
			if (not isLeaf(l)):
				next = (next + [l])
			if (not isLeaf(r)):
				next = (next + [r])
		result = (result + [vals])
		queue = next
	return result

example = Node(Node(Node(Leaf(), 4, Leaf()), 2, Node(Leaf(), 5, Leaf())), 1, Node(Leaf(), 3, Leaf()))

def flip_example():
	newRoot = upsideDown(example)
	assert (levelOrder(newRoot) == [[4], [5, 2], [3, 1]])

def single_node():
	tree = Node(Leaf(), 1, Leaf())
	assert (levelOrder(upsideDown(tree)) == [[1]])

def empty_tree():
	assert (isLeaf(upsideDown(Leaf())) == True)

def main():
	example = Node(Node(Node(Leaf(), 4, Leaf()), 2, Node(Leaf(), 5, Leaf())), 1, Node(Leaf(), 3, Leaf()))
	flip_example()
	single_node()
	empty_tree()

if __name__ == "__main__":
	main()
