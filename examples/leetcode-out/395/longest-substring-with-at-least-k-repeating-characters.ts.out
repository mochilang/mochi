// Generated by Mochi TypeScript compiler

function longestSubstring(s: string, k: number) : number {
	if ((s.length == 0)) {
		return 0
	}
	let maxLen: number = 0
	let target: number = 1
	while ((target <= 26)) {
		let counts: Record<any, any> = {}
		let left: number = 0
		let right: number = 0
		let unique: number = 0
		let atLeast: number = 0
		while ((right < s.length)) {
			let ch: string = s[right]
			if (Object.prototype.hasOwnProperty.call(counts, String(ch))) {
				counts[ch] = (counts[ch] + 1)
			} else {
				counts[ch] = 1
				unique = (unique + 1)
			}
			if (_equal(counts[ch], k)) {
				atLeast = (atLeast + 1)
			}
			while ((unique > target)) {
				let leftCh: string = s[left]
				if (_equal(counts[leftCh], k)) {
					atLeast = (atLeast - 1)
				}
				counts[leftCh] = (counts[leftCh] - 1)
				if (_equal(counts[leftCh], 0)) {
					unique = (unique - 1)
				}
				left = (left + 1)
			}
			if (((unique == target) && (atLeast == target))) {
				let length: number = ((right - left) + 1)
				if ((length > maxLen)) {
					maxLen = length
				}
			}
			right = (right + 1)
		}
		target = (target + 1)
	}
	return maxLen
}

function example_1(): void {
	if (!((longestSubstring("aaabb", 3) == 3))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((longestSubstring("ababbc", 2) == 5))) { throw new Error('expect failed') }
}

function all_same(): void {
	if (!((longestSubstring("aaaaa", 1) == 5))) { throw new Error('expect failed') }
}

function no_valid_substring(): void {
	if (!((longestSubstring("abcde", 2) == 0))) { throw new Error('expect failed') }
}

function empty_string(): void {
	if (!((longestSubstring("", 3) == 0))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	all_same()
	no_valid_substring()
	empty_string()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

