# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def partition(s: str) -> list[list[str]]:
	n = len(s)
	result = []
	def isPal(left: int, right: int) -> bool:
		l = left
		r = right
		while (l < r):
			if (s[l] != s[r]):
				return False
			l = (l + 1)
			r = (r - 1)
		return True
	def dfs(start: int, path: list[str]) -> None:
		nonlocal result
		if (start == n):
			result = (result + [path])
		else:
			end = start
			while (end < n):
				if isPal(start, end):
					dfs((end + 1), (path + [s[start:(end + 1)]]))
				end = (end + 1)
	dfs(0, [])
	return result

def example_1():
	assert (partition("aab") == [["a", "a", "b"], ["aa", "b"]])

def example_2():
	assert (partition("a") == [["a"]])

def no_palindrome():
	assert (partition("abc") == [["a", "b", "c"]])

def main():
	example_1()
	example_2()
	no_palindrome()

if __name__ == "__main__":
	main()
