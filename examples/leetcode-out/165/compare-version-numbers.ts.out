// Generated by Mochi TypeScript compiler

function parseInt(s: string) : number {
	let result: number = 0
	let digits: Record<string, number> = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	let i: number = 0
	while ((i < s.length)) {
		let ch: string = s[i]
		result = ((result * 10) + digits[ch])
		i = (i + 1)
	}
	return result
}

function parseVersion(v: string) : Array<number> {
	let parts: Array<any> = []
	let start: number = 0
	let i: number = 0
	while ((i < v.length)) {
		if ((v[i] == ".")) {
			let segment: string = v.slice(start, i)
			parts = parts.concat([parseInt(segment)])
			start = (i + 1)
		}
		i = (i + 1)
	}
	let segment: string = v.slice(start, v.length)
	parts = parts.concat([parseInt(segment)])
	return parts
}

function compareVersion(v1: string, v2: string) : number {
	let a1: Array<number> = parseVersion(v1)
	let a2: Array<number> = parseVersion(v2)
	let i: number = 0
	let j: number = 0
	while (((i < a1.length) || (j < a2.length))) {
		let n1: number = 0
		if ((i < a1.length)) {
			n1 = a1[i]
			i = (i + 1)
		}
		let n2: number = 0
		if ((j < a2.length)) {
			n2 = a2[j]
			j = (j + 1)
		}
		if ((n1 > n2)) {
			return 1
		}
		if ((n1 < n2)) {
			return (-1)
		}
	}
	return 0
}

function example_1(): void {
	if (!((compareVersion("1.01", "1.001") == 0))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((compareVersion("1.0", "1.0.0") == 0))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((compareVersion("0.1", "1.1") == ((-1))))) { throw new Error('expect failed') }
}

function example_4(): void {
	if (!((compareVersion("1.0.1", "1") == 1))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	example_4()
}
main()

