# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def parseInt(s: str) -> int:
	result = 0
	digits = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
	i = 0
	while (i < len(s)):
		ch = s[i]
		result = ((result * 10) + digits[ch])
		i = (i + 1)
	return result

def parseVersion(v: str) -> list[int]:
	parts = []
	start = 0
	i = 0
	while (i < len(v)):
		if (v[i] == "."):
			segment = v[start:i]
			parts = (parts + [parseInt(segment)])
			start = (i + 1)
		i = (i + 1)
	segment = v[start:len(v)]
	parts = (parts + [parseInt(segment)])
	return parts

def compareVersion(v1: str, v2: str) -> int:
	a1 = parseVersion(v1)
	a2 = parseVersion(v2)
	i = 0
	j = 0
	while ((i < len(a1)) or (j < len(a2))):
		n1 = 0
		if (i < len(a1)):
			n1 = a1[i]
			i = (i + 1)
		n2 = 0
		if (j < len(a2)):
			n2 = a2[j]
			j = (j + 1)
		if (n1 > n2):
			return 1
		if (n1 < n2):
			return (-1)
	return 0

def example_1():
	assert (compareVersion("1.01", "1.001") == 0)

def example_2():
	assert (compareVersion("1.0", "1.0.0") == 0)

def example_3():
	assert (compareVersion("0.1", "1.1") == ((-1)))

def example_4():
	assert (compareVersion("1.0.1", "1") == 1)

def main():
	example_1()
	example_2()
	example_3()
	example_4()

if __name__ == "__main__":
	main()
