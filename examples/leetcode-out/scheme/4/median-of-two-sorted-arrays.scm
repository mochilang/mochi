(define (findMedianSortedArrays nums1 nums2)
	(call/cc (lambda (return)
		(define i '())
		(define j '())
		(define merged '())
		(define mid1 '())
		(define mid2 '())
		(define total '())
		(set! merged (list ))
		(set! i 0)
		(set! j 0)
		(let loop ()
			(if (< (or (< i (length nums1)) j) (length nums2))
				(begin
					(if (>= j (length nums2))
						(begin
							(set! merged (append merged (list (list-ref nums1 i))))
							(set! i (+ i 1))
						)
						'()
					)
					(loop)
				)
			'())
		)
		(set! total (length merged))
		(if (= (modulo total 2) 1)
			(begin
				(return (exact->inexact (list-ref merged (/ total 2))))
			)
			'()
		)
		(set! mid1 (list-ref merged (- (/ total 2) 1)))
		(set! mid2 (list-ref merged (/ total 2)))
		(return (/ (exact->inexact (+ mid1 mid2)) 2.0))
	))
)

