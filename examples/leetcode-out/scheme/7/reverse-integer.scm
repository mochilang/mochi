(define (reverse x)
	(call/cc (lambda (return)
		(define digit '())
		(define n '())
		(define rev '())
		(define sign '())
		(set! sign 1)
		(set! n x)
		(if (< n 0)
			(begin
				(set! sign (- 1))
				(set! n (- n))
			)
			'()
		)
		(set! rev 0)
		(let loop ()
			(if (not (= n 0))
				(begin
					(set! digit (modulo n 10))
					(set! rev (+ (* rev 10) digit))
					(set! n (/ n 10))
					(loop)
				)
			'())
		)
		(set! rev (* rev sign))
		(if (> (or (< rev (- (- 2147483647) 1)) rev) 2147483647)
			(begin
				(return 0)
			)
			'()
		)
		(return rev)
	))
)

