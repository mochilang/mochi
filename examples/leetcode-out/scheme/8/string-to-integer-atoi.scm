(define (digit ch)
	(call/cc (lambda (return)
		(if (= ch "0")
			(begin
				(return 0)
			)
			'()
		)
		(if (= ch "1")
			(begin
				(return 1)
			)
			'()
		)
		(if (= ch "2")
			(begin
				(return 2)
			)
			'()
		)
		(if (= ch "3")
			(begin
				(return 3)
			)
			'()
		)
		(if (= ch "4")
			(begin
				(return 4)
			)
			'()
		)
		(if (= ch "5")
			(begin
				(return 5)
			)
			'()
		)
		(if (= ch "6")
			(begin
				(return 6)
			)
			'()
		)
		(if (= ch "7")
			(begin
				(return 7)
			)
			'()
		)
		(if (= ch "8")
			(begin
				(return 8)
			)
			'()
		)
		(if (= ch "9")
			(begin
				(return 9)
			)
			'()
		)
		(return (- 1))
	))
)

(define (myAtoi s)
	(call/cc (lambda (return)
		(define ch '())
		(define d '())
		(define i '())
		(define n '())
		(define result '())
		(define sign '())
		(set! i 0)
		(set! n (string-length s))
		(let loop ()
			(if (= (and (< i n) (string-ref s i)) (string-ref " " 0))
				(begin
					(set! i (+ i 1))
					(loop)
				)
			'())
		)
		(set! sign 1)
		(if (and (< i n) (= (or (= (string-ref s i) (string-ref "+" 0)) (string-ref s i)) (string-ref "-" 0)))
			(begin
				(if (= (string-ref s i) (string-ref "-" 0))
					(begin
						(set! sign (- 1))
					)
					'()
				)
				(set! i (+ i 1))
			)
			'()
		)
		(set! result 0)
		(let loop ()
			(if (< i n)
				(begin
					(set! ch (string-ref s i))
					(set! d (digit ch))
					(if (< d 0)
						(begin
						)
						'()
					)
					(set! result (+ (* result 10) d))
					(set! i (+ i 1))
					(loop)
				)
			'())
		)
		(set! result (* result sign))
		(if (> result 2147483647)
			(begin
				(return 2147483647)
			)
			'()
		)
		(if (< result (- 2147483648))
			(begin
				(return (- 2147483648))
			)
			'()
		)
		(return result)
	))
)

