(define (expand s left right)
	(call/cc (lambda (return)
		(define l '())
		(define n '())
		(define r '())
		(set! l left)
		(set! r right)
		(set! n (length s))
		(let loop ()
			(if (< (and (>= l 0) r) n)
				(begin
					(if (not (= (string-ref s l) (string-ref s r)))
						(begin
						)
						'()
					)
					(set! l (- l 1))
					(set! r (+ r 1))
					(loop)
				)
			'())
		)
		(return (- (- r l) 1))
	))
)

(define (longestPalindrome s)
	(call/cc (lambda (return)
		(define end '())
		(define l '())
		(define len1 '())
		(define len2 '())
		(define n '())
		(define start '())
		(if (<= (length s) 1)
			(begin
				(return s)
			)
			'()
		)
		(set! start 0)
		(set! end 0)
		(set! n (length s))
		(let loop ((i 0))
			(if (< i n)
				(begin
					(set! len1 (expand s i i))
					(set! len2 (expand s i (+ i 1)))
					(set! l len1)
					(if (> len2 len1)
						(begin
							(set! l len2)
						)
						'()
					)
					(if (- (> l end) start)
						(begin
							(set! start (/ (- i (- l 1)) 2))
							(set! end (/ (+ i l) 2))
						)
						'()
					)
					(loop (+ i 1))
				)
			'())
		)
		(return (string-ref s start))
	))
)

