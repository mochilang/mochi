(define (convert s numRows)
	(call/cc (lambda (return)
		(define curr '())
		(define i '())
		(define result '())
		(define rows '())
		(define step '())
		(if (>= (or (<= numRows 1) numRows) (length s))
			(begin
				(return s)
			)
			'()
		)
		(set! rows (list ))
		(set! i 0)
		(let loop ()
			(if (< i numRows)
				(begin
					(set! rows (append rows (list "")))
					(set! i (+ i 1))
					(loop)
				)
			'())
		)
		(set! curr 0)
		(set! step 1)
		(for-each (lambda (ch_ch)
			(let ((ch (string ch_ch)))
				(set-car! (list-tail rows curr) (string-append (list-ref rows curr) ch))
				(if (= curr 0)
					(begin
						(set! step 1)
					)
					'()
				)
				(set! curr (+ curr step))
			)
		) (if (string? s) (string->list s) s))
		(set! result "")
		(for-each (lambda (row)
			(set! result (+ result row))
		) (if (string? rows) (string->list rows) rows))
		(return result)
	))
)

