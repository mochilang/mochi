(define (list-set lst idx val)
    (let loop ((i idx) (l lst))
        (if (null? l)
            '()
            (if (= i 0)
                (cons val (cdr l))
                (cons (car l) (loop (- i 1) (cdr l))))))
)
(define (convert s numRows)
	(call/cc (lambda (return)
		(define curr '())
		(define i '())
		(define result '())
		(define rows '())
		(define step '())
		(if (>= (or (<= numRows 1) numRows) (length s))
			(begin
				(return s)
			)
			'()
		)
		(set! rows (list ))
		(set! i 0)
		(let loop ()
			(if (< i numRows)
				(begin
					(set! rows (append rows (list "")))
					(set! i (+ i 1))
					(loop)
				)
			'())
		)
		(set! curr 0)
		(set! step 1)
		(let loop ((ch_idx 0))
			(if (< ch_idx (string-length s))
				(begin
					(let ((ch (string-ref s ch_idx)))
						(set! rows (list-set rows curr (+ (list-ref rows curr) ch)))
						(if (= curr 0)
							(begin
								(set! step 1)
							)
							'()
						)
						(set! curr (+ curr step))
					)
					(loop (+ ch_idx 1))
				)
			'())
		)
		(set! result "")
		(let loop ((row_idx 0))
			(if (< row_idx (length rows))
				(begin
					(let ((row (list-ref rows row_idx)))
						(set! result (+ result row))
					)
					(loop (+ row_idx 1))
				)
			'())
		)
		(return result)
	))
)

