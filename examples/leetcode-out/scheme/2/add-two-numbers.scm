(define (addTwoNumbers l1 l2)
	(call/cc (lambda (return)
		(define carry '())
		(define digit '())
		(define i '())
		(define j '())
		(define result '())
		(define sum '())
		(define x '())
		(define y '())
		(set! i 0)
		(set! j 0)
		(set! carry 0)
		(set! result (list ))
		(let loop ()
			(if (> (or (< (or (< i (length l1)) j) (length l2)) carry) 0)
				(begin
					(set! x 0)
					(if (< i (length l1))
						(begin
							(set! x (list-ref l1 i))
							(set! i (+ i 1))
						)
						'()
					)
					(set! y 0)
					(if (< j (length l2))
						(begin
							(set! y (list-ref l2 j))
							(set! j (+ j 1))
						)
						'()
					)
					(set! sum (+ (+ x y) carry))
					(set! digit (modulo sum 10))
					(set! carry (/ sum 10))
					(set! result (append result (list digit)))
					(loop)
				)
			'())
		)
		(return result)
	))
)

