// Generated by Mochi TypeScript compiler

function generatePalindromes(s: string) : Array<string> {
	let letters: Array<any> = []
	let i: number = 0
	while ((i < s.length)) {
		letters = letters.concat([s[i]])
		i = (i + 1)
	}
	let counts: Array<Record<any, any>> = (() => {
	const _src = letters;
	const _res = [];
	for (const ch of _src) {
		_res.push({"ch": g.key, "cnt": _count(g)})
	}
	return _res;
})()
	let odd: number = 0
	let center: string = ""
	let half: Array<any> = []
	for (const item of counts) {
		if (_equal((item.cnt % 2), 1)) {
			odd = (odd + 1)
			center = item.ch
		}
		let j: number = 0
		while ((j < (item.cnt / 2))) {
			half = half.concat([item.ch])
			j = (j + 1)
		}
	}
	if ((odd > 1)) {
		return []
	}
	let arr: Array<any> = (() => {
	const _src = half;
	let _items = [];
	for (const x of _src) {
		_items.push(x);
	}
	let _pairs = _items.map(it => { const x = it; return {item: it, key: x}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	const _res = [];
	for (const x of _items) {
		_res.push(x)
	}
	return _res;
})()
	let n: number = arr.length
	let result: Array<any> = []
	let used: Record<any, any> = {}
	function backtrack(path: Array<string>) : void {
		if ((path.length == n)) {
			let left: string = ""
			let k: number = 0
			while ((k < n)) {
				left = left + path[k]
				k = (k + 1)
			}
			let right: string = ""
			k = (n - 1)
			while ((k >= 0)) {
				right = right + path[k]
				k = (k - 1)
			}
			let pal: string = left
			if ((odd == 1)) {
				pal = pal + center
			}
			pal = pal + right
			result = result.concat([pal])
		} else {
			let i: number = 0
			while ((i < n)) {
				let curUsed: boolean = false
				if (Object.prototype.hasOwnProperty.call(used, String(i))) {
					curUsed = used[i]
				}
				if (curUsed) {
					i = (i + 1)
					continue
				}
				if (((i > 0) && _equal(arr[i], arr[(i - 1)]))) {
					let prevUsed: boolean = false
					if (Object.prototype.hasOwnProperty.call(used, String((i - 1)))) {
						prevUsed = used[(i - 1)]
					}
					if ((!prevUsed)) {
						i = (i + 1)
						continue
					}
				}
				used[i] = true
				backtrack(path.concat([arr[i]]))
				used[i] = false
				i = (i + 1)
			}
		}
	}
	backtrack([])
	return result
}

function example_1(): void {
	let ans: Array<string> = generatePalindromes("aabb")
	let sorted: Array<any> = (() => {
	const _src = ans;
	let _items = [];
	for (const x of _src) {
		_items.push(x);
	}
	let _pairs = _items.map(it => { const x = it; return {item: it, key: x}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	const _res = [];
	for (const x of _items) {
		_res.push(x)
	}
	return _res;
})()
	if (!(_equal(sorted, ["abba", "baab"]))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!(_equal(generatePalindromes("abc"), []))) { throw new Error('expect failed') }
}

function single_char(): void {
	if (!(_equal(generatePalindromes("a"), ["a"]))) { throw new Error('expect failed') }
}

function triple(): void {
	let res: Array<string> = generatePalindromes("aaa")
	if (!(_equal(res, ["aaa"]))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	single_char()
	triple()
}
function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === 'object') {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

