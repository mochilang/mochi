// Generated by Mochi TypeScript compiler

function splitLines(s: string) : Array<string> {
	let lines: Array<any> = []
	let current: string = ""
	let i: number = 0
	while ((i < s.length)) {
		let c: string = s[i]
		if ((c == "\n")) {
			lines = lines.concat([current])
			current = ""
		} else {
			current = current + c
		}
		i = (i + 1)
	}
	lines = lines.concat([current])
	return lines
}

function lengthLongestPath(input: string) : number {
	if ((input == "")) {
		return 0
	}
	let lines: Array<string> = splitLines(input)
	let maxLen: number = 0
	let levels: Record<any, any> = {}
	let i: number = 0
	while ((i < lines.length)) {
		let line: string = lines[i]
		let depth: number = 0
		while (((depth < line.length) && (line[depth] == "\t"))) {
			depth = (depth + 1)
		}
		let name: string = line.slice(depth, line.length)
		let curr: number = name.length
		if ((depth > 0)) {
			curr = ((levels[(depth - 1)] + 1) + name.length)
		}
		levels[depth] = curr
		if (name.includes(".")) {
			if ((curr > maxLen)) {
				maxLen = curr
			}
		}
		i = (i + 1)
	}
	return maxLen
}

function example_1(): void {
	let input: string = "dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext"
	if (!((lengthLongestPath(input) == 20))) { throw new Error('expect failed') }
}

function example_2(): void {
	let input: string = "dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext"
	if (!((lengthLongestPath(input) == 32))) { throw new Error('expect failed') }
}

function no_files(): void {
	if (!((lengthLongestPath("dir\n\tsubdir") == 0))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	no_files()
}
main()

