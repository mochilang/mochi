package main

import (
	"fmt"
	"reflect"
	"sort"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func permuteUnique(nums []int) [][]int {
	var arr []int = func() []int {
	items := []int{}
	for _, x := range nums {
		items = append(items, x)
	}
	type pair struct { item int; key any }
	pairs := make([]pair, len(items))
	for idx, it := range items {
		x := it
		pairs[idx] = pair{item: it, key: x}
	}
	sort.Slice(pairs, func(i, j int) bool {
		a, b := pairs[i].key, pairs[j].key
		switch av := a.(type) {
		case int:
			switch bv := b.(type) {
			case int:
				return av < bv
			case float64:
				return float64(av) < bv
			}
		case float64:
			switch bv := b.(type) {
			case int:
				return av < float64(bv)
			case float64:
				return av < bv
			}
		case string:
			bs, _ := b.(string)
			return av < bs
		}
		return fmt.Sprint(a) < fmt.Sprint(b)
	})
	for idx, p := range pairs {
		items[idx] = p.item
	}
	_res := []int{}
	for _, x := range items {
		_res = append(_res, x)
	}
	return _res
}()
	var n int = len(arr)
	var result [][]int = [][]int{}
	var used map[int]bool = map[int]bool{}
	var backtrack func([]int)
	backtrack = func(path []int) {
		if (len(path) == n) {
			result = append(append([][]int{}, result...), [][]int{path}...)
		} else {
			var i int = 0
			for (i < n) {
				var currentUsed bool = false
				_tmp0 := i
				_tmp1 := used
				_, _tmp2 := _tmp1[_tmp0]
				if _tmp2 {
					currentUsed = used[i]
				}
				if currentUsed {
					i = (i + 1)
					continue
				}
				if ((i > 0) && (arr[i] == arr[(i - 1)])) {
					var prevUsed bool = false
					_tmp3 := (i - 1)
					_tmp4 := used
					_, _tmp5 := _tmp4[_tmp3]
					if _tmp5 {
						prevUsed = used[(i - 1)]
					}
					if !prevUsed {
						i = (i + 1)
						continue
					}
				}
				used[i] = true
				backtrack(append(append([]int{}, path...), []int{arr[i]}...))
				used[i] = false
				i = (i + 1)
			}
		}
}
	backtrack([]int{})
	return result
}

func example_1() {
	expect(_equal(permuteUnique([]int{1, 1, 2}), [][]int{[]int{1, 1, 2}, []int{1, 2, 1}, []int{2, 1, 1}}))
}

func example_2() {
	expect(_equal(permuteUnique([]int{1, 2, 3}), [][]int{[]int{1, 2, 3}, []int{1, 3, 2}, []int{2, 1, 3}, []int{2, 3, 1}, []int{3, 1, 2}, []int{3, 2, 1}}))
}

func main() {
	example_1()
	example_2()
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

