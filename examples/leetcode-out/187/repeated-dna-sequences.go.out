package main

import (
	"encoding/json"
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func findRepeatedDnaSequences(s string) []string {
	var n int = len(s)
	if (n < 10) {
		return _cast[[]string]([]any{})
	}
	var seen map[string]int = map[string]int{}
	var result []string = []string{}
	var i int = 0
	for ((i + 10) <= n) {
		var sub string = string([]rune(s)[i:(i + 10)])
		var count int = 0
		_tmp0 := sub
		_tmp1 := seen
		_, _tmp2 := _tmp1[_tmp0]
		if _tmp2 {
			count = seen[sub]
		}
		count = (count + 1)
		seen[sub] = count
		if (count == 2) {
			result = append(append([]string{}, result...), []string{sub}...)
		}
		i = (i + 1)
	}
	return result
}

func example_1() {
	expect(_equal(findRepeatedDnaSequences("AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"), []string{"AAAAACCCCC", "CCCCCAAAAA"}))
}

func example_2() {
	expect(_equal(findRepeatedDnaSequences("AAAAAAAAAAAAA"), []string{"AAAAAAAAAA"}))
}

func no_repeats() {
	expect(_equal(findRepeatedDnaSequences("ACGTACGTAC"), []any{}))
}

func short_string() {
	expect(_equal(findRepeatedDnaSequences("AAAAA"), []any{}))
}

func main() {
	example_1()
	example_2()
	no_repeats()
	short_string()
}

func _cast[T any](v any) T {
    data, err := json.Marshal(v)
    if err != nil { panic(err) }
    var out T
    if err := json.Unmarshal(data, &out); err != nil { panic(err) }
    return out
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

