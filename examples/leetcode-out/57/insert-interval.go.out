package main

import (
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func insert(intervals [][]int, newInterval []int) [][]int {
	var result [][]int = [][]int{}
	var inserted bool = false
	var start int = newInterval[0]
	var end int = newInterval[1]
	for _, interval := range intervals {
		var currStart int = interval[0]
		var currEnd int = interval[1]
		if (currEnd < start) {
			result = append(append([][]int{}, result...), [][]int{interval}...)
		} else 		if (currStart > end) {
			if !inserted {
				result = append(append([][]int{}, result...), [][]int{[]int{start, end}}...)
				inserted = true
			}
			result = append(append([][]int{}, result...), [][]int{interval}...)
		} else {
			if (currStart < start) {
				start = currStart
			}
			if (currEnd > end) {
				end = currEnd
			}
		}
	}
	if !inserted {
		result = append(append([][]int{}, result...), [][]int{[]int{start, end}}...)
	}
	return result
}

func example_1() {
	expect(_equal(insert([][]int{[]int{1, 3}, []int{6, 9}}, []int{2, 5}), [][]int{[]int{1, 5}, []int{6, 9}}))
}

func example_2() {
	expect(_equal(insert([][]int{[]int{1, 2}, []int{3, 5}, []int{6, 7}, []int{8, 10}, []int{12, 16}}, []int{4, 8}), [][]int{[]int{1, 2}, []int{3, 10}, []int{12, 16}}))
}

func empty_list() {
	expect(_equal(insert([][]int{}, []int{5, 7}), [][]int{[]int{5, 7}}))
}

func contained_interval() {
	expect(_equal(insert([][]int{[]int{1, 5}}, []int{2, 3}), [][]int{[]int{1, 5}}))
}

func main() {
	example_1()
	example_2()
	empty_list()
	contained_interval()
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

