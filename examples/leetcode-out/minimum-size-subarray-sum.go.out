package main

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func minSubArrayLen(target int, nums []int) int {
	var n int = len(nums)
	var left int = 0
	_ = left
	var sum int = 0
	_ = sum
	var best int = (n + 1)
	_ = best
	var right int = 0
	_ = right
	for (right < n) {
		sum = (sum + nums[right])
		right = (right + 1)
		for (sum >= target) {
			var length int = (right - left)
			if (length < best) {
				best = length
			}
			sum = (sum - nums[left])
			left = (left + 1)
		}
	}
	if (best == (n + 1)) {
		return 0
	}
	return best
}

func example_1() {
	expect((minSubArrayLen(7, []int{2, 3, 1, 2, 4, 3}) == 2))
}

func example_2() {
	expect((minSubArrayLen(4, []int{1, 4, 4}) == 1))
}

func example_3() {
	expect((minSubArrayLen(11, []int{1, 1, 1, 1, 1, 1, 1, 1}) == 0))
}

func entire_array() {
	expect((minSubArrayLen(15, []int{5, 1, 3, 5, 10, 7, 4, 9, 2, 8}) == 2))
}

func main() {
	example_1()
	example_2()
	example_3()
	entire_array()
}

