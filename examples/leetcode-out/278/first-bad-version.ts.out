// Generated by Mochi TypeScript compiler

function firstBadVersion(n: number, isBadVersion: any) : number {
	let low: number = 1
	let high: number = n
	while ((low < high)) {
		let mid: number = Math.trunc(((low + high)) / 2)
		if (isBadVersion(mid)) {
			high = mid
		} else {
			low = (mid + 1)
		}
	}
	return low
}

function example_1(): void {
	let first: number = 4
	let bad: any = function(v: number): boolean {
		return (v >= first)
}
	if (!((firstBadVersion(5, bad) == 4))) { throw new Error('expect failed') }
}

function example_2(): void {
	let first: number = 1
	let bad: any = function(v: number): boolean {
		return (v >= first)
}
	if (!((firstBadVersion(1, bad) == 1))) { throw new Error('expect failed') }
}

function larger_n(): void {
	let first: number = 123
	let bad: any = function(v: number): boolean {
		return (v >= first)
}
	if (!((firstBadVersion(200, bad) == 123))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	larger_n()
}
main()

