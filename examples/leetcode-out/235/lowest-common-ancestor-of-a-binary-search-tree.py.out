# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def lowestCommonAncestor(tree: list[Node], root: int, p: int, q: int) -> int:
	pNode = tree[p]
	qNode = tree[q]
	pVal = pNode.val
	qVal = qNode.val
	current = root
	while True:
		node = tree[current]
		if ((pVal < node.val) and (qVal < node.val)):
			current = node.left
		elif ((pVal > node.val) and (qVal > node.val)):
			current = node.right
		else:
			return current

@dataclasses.dataclass
class Node:
	val: int
	left: int
	right: int

example = None

def example_1():
	assert (lowestCommonAncestor(example, 0, 1, 2) == 0)

def example_2():
	assert (lowestCommonAncestor(example, 0, 1, 4) == 1)

def single_node():
	single = [Node(val=1, left=(-1), right=(-1))]
	assert (lowestCommonAncestor(single, 0, 0, 0) == 0)

def main():
	example = [Node(val=6, left=1, right=2), Node(val=2, left=3, right=4), Node(val=8, left=5, right=6), Node(val=0, left=(-1), right=(-1)), Node(val=4, left=7, right=8), Node(val=7, left=(-1), right=(-1)), Node(val=9, left=(-1), right=(-1)), Node(val=3, left=(-1), right=(-1)), Node(val=5, left=(-1), right=(-1))]
	example_1()
	example_2()
	single_node()

if __name__ == "__main__":
	main()
