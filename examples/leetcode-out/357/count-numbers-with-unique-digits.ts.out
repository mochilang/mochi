// Generated by Mochi TypeScript compiler

function countNumbersWithUniqueDigits(n: number) : number {
	if ((n == 0)) {
		return 1
	}
	if ((n > 10)) {
		n = 10
	}
	let result: number = 10
	let unique: number = 9
	let available: number = 9
	let i: number = 2
	while ((i <= n)) {
		unique = (unique * available)
		result = (result + unique)
		available = (available - 1)
		i = (i + 1)
	}
	return result
}

function example_1(): void {
	if (!((countNumbersWithUniqueDigits(2) == 91))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((countNumbersWithUniqueDigits(0) == 1))) { throw new Error('expect failed') }
}

function three_digits(): void {
	if (!((countNumbersWithUniqueDigits(3) == 739))) { throw new Error('expect failed') }
}

function up_to_ten_digits(): void {
	if (!((countNumbersWithUniqueDigits(10) == 8877691))) { throw new Error('expect failed') }
}

function more_than_ten(): void {
	if (!((countNumbersWithUniqueDigits(11) == 8877691))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	three_digits()
	up_to_ten_digits()
	more_than_ten()
}
main()

