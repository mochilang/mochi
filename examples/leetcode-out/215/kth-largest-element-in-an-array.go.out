package main

import (
	"fmt"
	"sort"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func findKthLargest(nums []int, k int) int {
	var sorted []any = func() []int {
	items := []int{}
	for _, x := range nums {
		items = append(items, x)
	}
	type pair struct { item int; key any }
	pairs := make([]pair, len(items))
	for idx, it := range items {
		x := it
		pairs[idx] = pair{item: it, key: -x}
	}
	sort.Slice(pairs, func(i, j int) bool {
		a, b := pairs[i].key, pairs[j].key
		switch av := a.(type) {
		case int:
			switch bv := b.(type) {
			case int:
				return av < bv
			case float64:
				return float64(av) < bv
			}
		case float64:
			switch bv := b.(type) {
			case int:
				return av < float64(bv)
			case float64:
				return av < bv
			}
		case string:
			bs, _ := b.(string)
			return av < bs
		}
		return fmt.Sprint(a) < fmt.Sprint(b)
	})
	for idx, p := range pairs {
		items[idx] = p.item
	}
	res := []int{}
	for _, x := range items {
		res = append(res, x)
	}
	return res
}()
	return sorted[(k - 1)]
}

func example_1() {
	expect((findKthLargest([]int{3, 2, 1, 5, 6, 4}, 2) == 5))
}

func example_2() {
	expect((findKthLargest([]int{3, 2, 3, 1, 2, 4, 5, 5, 6}, 4) == 4))
}

func single_element() {
	expect((findKthLargest([]int{1}, 1) == 1))
}

func with_negatives() {
	expect((findKthLargest([]int{-1, -2, -3, -4}, 2) == (-2)))
}

func main() {
	example_1()
	example_2()
	single_element()
	with_negatives()
}

