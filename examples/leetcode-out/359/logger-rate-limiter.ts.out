// Generated by Mochi TypeScript compiler

function newLogger() : Logger {
	return {log: {}}
}

function shouldPrintMessage(logger: Logger, timestamp: number, message: string) : PrintResult {
	let log: Record<string, number> = logger.log
	if (Object.prototype.hasOwnProperty.call(log, String(message))) {
		let last: number = log[message]
		if (((timestamp - last) < 10)) {
			return {ok: false, logger: {log: log}}
		}
	}
	log[message] = timestamp
	return {ok: true, logger: {log: log}}
}

function example(): void {
	let l: Logger = newLogger()
	let r1: PrintResult = shouldPrintMessage(l, 1, "foo")
	if (!((r1.ok == true))) { throw new Error('expect failed') }
	l = r1.logger
	let r2: PrintResult = shouldPrintMessage(l, 2, "bar")
	if (!((r2.ok == true))) { throw new Error('expect failed') }
	l = r2.logger
	let r3: PrintResult = shouldPrintMessage(l, 3, "foo")
	if (!((r3.ok == false))) { throw new Error('expect failed') }
	l = r3.logger
	let r4: PrintResult = shouldPrintMessage(l, 8, "bar")
	if (!((r4.ok == false))) { throw new Error('expect failed') }
	l = r4.logger
	let r5: PrintResult = shouldPrintMessage(l, 10, "foo")
	if (!((r5.ok == false))) { throw new Error('expect failed') }
	l = r5.logger
	let r6: PrintResult = shouldPrintMessage(l, 11, "foo")
	if (!((r6.ok == true))) { throw new Error('expect failed') }
}

function main(): void {
	type Logger = {
		log: any;
	}
	type PrintResult = {
		ok: any;
		logger: any;
	}
	example()
}
main()

