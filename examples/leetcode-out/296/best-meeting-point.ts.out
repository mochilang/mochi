// Generated by Mochi TypeScript compiler

function abs(x: number) : number {
	if ((x < 0)) {
		return (-x)
	} else {
		return x
	}
}

function minTotalDistance(grid: Array<Array<number>>) : number {
	let rows: Array<any> = []
	let cols: Array<any> = []
	let i: number = 0
	while ((i < grid.length)) {
		let j: number = 0
		let row: Array<number> = grid[i]
		while ((j < row.length)) {
			if ((row[j] == 1)) {
				rows = rows.concat([i])
				cols = cols.concat([j])
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	let sortedRows: Array<any> = (() => {
	const _src = rows;
	let _items = [];
	for (const r of _src) {
		_items.push(r);
	}
	let _pairs = _items.map(it => { const r = it; return {item: it, key: r}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	const _res = [];
	for (const r of _items) {
		_res.push(r)
	}
	return _res;
})()
	let sortedCols: Array<any> = (() => {
	const _src = cols;
	let _items = [];
	for (const c of _src) {
		_items.push(c);
	}
	let _pairs = _items.map(it => { const c = it; return {item: it, key: c}; });
	_pairs.sort((a, b) => {
		const ak = a.key; const bk = b.key;
		if (typeof ak === 'number' && typeof bk === 'number') return ak - bk;
		if (typeof ak === 'string' && typeof bk === 'string') return ak < bk ? -1 : (ak > bk ? 1 : 0);
		return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
	});
	_items = _pairs.map(p => p.item);
	const _res = [];
	for (const c of _items) {
		_res.push(c)
	}
	return _res;
})()
	let mid: number = Math.trunc(sortedRows.length / 2)
	let rowMedian: any = sortedRows[mid]
	let colMedian: any = sortedCols[mid]
	let dist: number = 0
	let k: number = 0
	while ((k < sortedRows.length)) {
		dist = (dist + abs((sortedRows[k] - rowMedian)))
		k = (k + 1)
	}
	k = 0
	while ((k < sortedCols.length)) {
		dist = (dist + abs((sortedCols[k] - colMedian)))
		k = (k + 1)
	}
	return dist
}

function example_1(): void {
	if (!((minTotalDistance([[1, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0]]) == 6))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((minTotalDistance([[1, 1]]) == 1))) { throw new Error('expect failed') }
}

function single_column(): void {
	if (!((minTotalDistance([[1], [1]]) == 1))) { throw new Error('expect failed') }
}

function single_cell(): void {
	if (!((minTotalDistance([[1]]) == 0))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	single_column()
	single_cell()
}
main()

