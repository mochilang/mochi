# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def levelOrderBottom(root: Tree) -> list[list[int]]:
	if (lambda _t=root: True if isinstance(_t, Leaf) else False)():
		return []
	result = []
	queue = [root]
	while (len(queue) > 0):
		level = []
		next = []
		for node in queue:
			if (lambda _t=node: False if isinstance(_t, Leaf) else True)():
				level = (level + [node.value])
				if (lambda _t=node.left: False if isinstance(_t, Leaf) else True)():
					next = (next + [node.left])
				if (lambda _t=node.right: False if isinstance(_t, Leaf) else True)():
					next = (next + [node.right])
		result = ([level] + result)
		queue = next
	return result

class Tree:
	pass
@dataclasses.dataclass
class Leaf(Tree):
	pass
@dataclasses.dataclass
class Node(Tree):
	left: typing.Any
	value: int
	right: typing.Any

example1 = Node(left=Node(left=Leaf(), value=9, right=Leaf()), value=3, right=Node(left=Node(left=Leaf(), value=15, right=Leaf()), value=20, right=Node(left=Leaf(), value=7, right=Leaf())))

def example_1():
	assert (levelOrderBottom(example1) == [[15, 7], [9, 20], [3]])

def single_node():
	assert (levelOrderBottom(Node(left=Leaf(), value=1, right=Leaf())) == [[1]])

def empty():
	assert (levelOrderBottom(Leaf()) == [])

def main():
	example1 = Node(left=Node(left=Leaf(), value=9, right=Leaf()), value=3, right=Node(left=Node(left=Leaf(), value=15, right=Leaf()), value=20, right=Node(left=Leaf(), value=7, right=Leaf())))
	example_1()
	single_node()
	empty()

if __name__ == "__main__":
	main()
