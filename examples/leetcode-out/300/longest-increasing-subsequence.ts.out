// Generated by Mochi TypeScript compiler

function lengthOfLIS(nums: Array<number>) : number {
	let n: number = nums.length
	if ((n == 0)) {
		return 0
	}
	let dp: Array<any> = []
	let fill: number = 0
	while ((fill < n)) {
		dp = dp.concat([1])
		fill = (fill + 1)
	}
	let i: number = 1
	while ((i < n)) {
		let j: number = 0
		while ((j < i)) {
			if ((nums[i] > nums[j])) {
				let candidate: any = (dp[j] + 1)
				if ((candidate > dp[i])) {
					dp[i] = candidate
				}
			}
			j = (j + 1)
		}
		i = (i + 1)
	}
	let result: any = dp[0]
	let k: number = 1
	while ((k < n)) {
		if ((dp[k] > result)) {
			result = dp[k]
		}
		k = (k + 1)
	}
	return result
}

function example_1(): void {
	if (!((lengthOfLIS([10, 9, 2, 5, 3, 7, 101, 18]) == 4))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((lengthOfLIS([0, 1, 0, 3, 2, 3]) == 4))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((lengthOfLIS([7, 7, 7, 7, 7, 7, 7]) == 1))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!((lengthOfLIS([]) == 0))) { throw new Error('expect failed') }
}

function single(): void {
	if (!((lengthOfLIS([5]) == 1))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	empty()
	single()
}
main()

