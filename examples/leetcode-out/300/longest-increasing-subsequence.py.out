# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def lengthOfLIS(nums: list[int]) -> int:
	n = len(nums)
	if (n == 0):
		return 0
	dp = []
	fill = 0
	while (fill < n):
		dp = (dp + [1])
		fill = (fill + 1)
	i = 1
	while (i < n):
		j = 0
		while (j < i):
			if (nums[i] > nums[j]):
				candidate = (dp[j] + 1)
				if (candidate > dp[i]):
					dp[i] = candidate
			j = (j + 1)
		i = (i + 1)
	result = dp[0]
	k = 1
	while (k < n):
		if (dp[k] > result):
			result = dp[k]
		k = (k + 1)
	return result

def example_1():
	assert (lengthOfLIS([10, 9, 2, 5, 3, 7, 101, 18]) == 4)

def example_2():
	assert (lengthOfLIS([0, 1, 0, 3, 2, 3]) == 4)

def example_3():
	assert (lengthOfLIS([7, 7, 7, 7, 7, 7, 7]) == 1)

def empty():
	assert (lengthOfLIS([]) == 0)

def single():
	assert (lengthOfLIS([5]) == 1)

def main():
	example_1()
	example_2()
	example_3()
	empty()
	single()

if __name__ == "__main__":
	main()
