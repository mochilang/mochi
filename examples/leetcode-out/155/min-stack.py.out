# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import typing

def newStack() -> MinStack:
	return MinStack(items=[], mins=[])

def push(s: MinStack, x: int) -> MinStack:
	items = (s.items + [x])
	mins = s.mins
	if (len(mins) == 0):
		mins = [x]
	else:
		m = mins[(len(mins) - 1)]
		if (x <= m):
			mins = (mins + [x])
	return MinStack(items=items, mins=mins)

def pop(s: MinStack) -> MinStack:
	items = s.items
	mins = s.mins
	val = items[(len(items) - 1)]
	items = items[0:(len(items) - 1)]
	if (val == mins[(len(mins) - 1)]):
		mins = mins[0:(len(mins) - 1)]
	return MinStack(items=items, mins=mins)

def top(s: MinStack) -> int:
	return s.items[(len(s.items) - 1)]

def getMin(s: MinStack) -> int:
	return s.mins[(len(s.mins) - 1)]

@dataclasses.dataclass
class MinStack:
	items: list[int]
	mins: list[int]

def example():
	s = newStack()
	s = push(s, (-2))
	s = push(s, 0)
	s = push(s, (-3))
	assert (getMin(s) == ((-3)))
	s = pop(s)
	assert (top(s) == 0)
	assert (getMin(s) == ((-2)))

def single_element():
	s = newStack()
	s = push(s, 4)
	assert (top(s) == 4)
	assert (getMin(s) == 4)

def increasing():
	s = newStack()
	s = push(s, 1)
	s = push(s, 2)
	s = push(s, 3)
	assert (getMin(s) == 1)
	s = pop(s)
	assert (getMin(s) == 1)

def main():
	example()
	single_element()
	increasing()

if __name__ == "__main__":
	main()
