// Generated by Mochi TypeScript compiler

let customers: Array<Customer> = [{id: 1, name: "Joe"}, {id: 2, name: "Henry"}, {id: 3, name: "Sam"}, {id: 4, name: "Max"}]

let orders: Array<Order> = [{id: 1, customerId: 3}, {id: 2, customerId: 1}]

function customersWithoutOrders(customers: Array<Customer>, orders: Array<Order>) : Array<string> {
	let result: Array<any> = []
	for (const c of customers) {
		let placed: boolean = false
		for (const o of orders) {
			if ((o.customerId == c.id)) {
				placed = true
				break
			}
		}
		if ((!placed)) {
			result = result.concat([c.name])
		}
	}
	return result
}

function example(): void {
	if (!(_equal(customersWithoutOrders(customers, orders), ["Henry", "Max"]))) { throw new Error('expect failed') }
}

function all_customers(): void {
	let emptyOrders: Array<any> = []
	if (!((String(customersWithoutOrders(customers, emptyOrders)) == String(["Joe", "Henry", "Sam", "Max"])))) { throw new Error('expect failed') }
}

function none_left(): void {
	let allOrders: Array<Order> = [{id: 1, customerId: 1}, {id: 2, customerId: 2}, {id: 3, customerId: 3}, {id: 4, customerId: 4}]
	if (!(_equal(customersWithoutOrders(customers, allOrders), []))) { throw new Error('expect failed') }
}

function main(): void {
	type Customer = {
		id: any;
		name: any;
	}
	type Order = {
		id: any;
		customerId: any;
	}
	example()
	all_customers()
	none_left()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

