package main

import (
	"fmt"
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

type Customer struct {
	Id int `json:"id"`
	Name string `json:"name"`
}

type Order struct {
	Id int `json:"id"`
	CustomerId int `json:"customerId"`
}

func customersWithoutOrders(customers []Customer, orders []Order) []string {
	var result []string = []string{}
	_ = result
	for _, c := range customers {
		var placed bool = false
		_ = placed
		for _, o := range orders {
			if (o.CustomerId == c.Id) {
				placed = true
				break
			}
		}
		if !placed {
			result = append(append([]string{}, result...), []string{c.Name}...)
		}
	}
	return result
}

func example() {
	expect(_equal(customersWithoutOrders(customers, orders), []string{"Henry", "Max"}))
}

func all_customers() {
	var emptyOrders []any = []any{}
	expect((fmt.Sprint(customersWithoutOrders(customers, emptyOrders)) == fmt.Sprint([]string{"Joe", "Henry", "Sam", "Max"})))
}

func none_left() {
	var allOrders []Order = []Order{Order{Id: 1, CustomerId: 1}, Order{Id: 2, CustomerId: 2}, Order{Id: 3, CustomerId: 3}, Order{Id: 4, CustomerId: 4}}
	expect(_equal(customersWithoutOrders(customers, allOrders), []any{}))
}

var customers []Customer = []Customer{Customer{Id: 1, Name: "Joe"}, Customer{Id: 2, Name: "Henry"}, Customer{Id: 3, Name: "Sam"}, Customer{Id: 4, Name: "Max"}}
var orders []Order = []Order{Order{Id: 1, CustomerId: 3}, Order{Id: 2, CustomerId: 1}}
func main() {
	example()
	all_customers()
	none_left()
}

func _equal(a, b any) bool {
    return reflect.DeepEqual(a, b)
}

