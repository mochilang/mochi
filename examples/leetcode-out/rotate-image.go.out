package main

import (
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func rotate(matrix [][]int) [][]int {
	var n int = len(matrix)
	var i int = 0
	_ = i
	for (i < n) {
		var j int = i
		_ = j
		for (j < n) {
			var temp int = matrix[i][j]
			matrix[i][j] = matrix[j][i]
			matrix[j][i] = temp
			j = (j + 1)
		}
		i = (i + 1)
	}
	i = 0
	for (i < n) {
		var left int = 0
		_ = left
		var right int = (n - 1)
		_ = right
		for (left < right) {
			var tmp int = matrix[i][left]
			matrix[i][left] = matrix[i][right]
			matrix[i][right] = tmp
			left = (left + 1)
			right = (right - 1)
		}
		i = (i + 1)
	}
	return matrix
}

func example_1() {
	var m [][]int = [][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}
	_ = m
	rotate(m)
	expect(_equal(m, [][]int{[]int{7, 4, 1}, []int{8, 5, 2}, []int{9, 6, 3}}))
}

func example_2() {
	var m [][]int = [][]int{[]int{5, 1, 9, 11}, []int{2, 4, 8, 10}, []int{13, 3, 6, 7}, []int{15, 14, 12, 16}}
	_ = m
	rotate(m)
	expect(_equal(m, [][]int{[]int{15, 13, 2, 5}, []int{14, 3, 4, 1}, []int{12, 6, 8, 9}, []int{16, 7, 10, 11}}))
}

func single_element() {
	var m [][]int = [][]int{[]int{1}}
	_ = m
	rotate(m)
	expect(_equal(m, [][]int{[]int{1}}))
}

func main() {
	example_1()
	example_2()
	single_element()
}

func _equal(a, b any) bool {
    return reflect.DeepEqual(a, b)
}

