package main

import (
	"encoding/json"
	"fmt"
	"reflect"
)

func expect(cond bool) {
	if !cond { panic("expect failed") }
}

func Leaf() map[string]any {
	return _cast[map[string]any](map[string]string{"__name": "Leaf"})
}

func Node(left map[string]any, value int, right map[string]any) map[string]any {
	return map[string]any{"__name": "Node", "left": left, "value": value, "right": right}
}

func isLeaf(t map[string]any) bool {
	return _equal(t["__name"], "Leaf")
}

func left(t map[string]any) map[string]any {
	return t["left"]
}

func right(t map[string]any) map[string]any {
	return t["right"]
}

func value(t map[string]any) int {
	return _cast[int](t["value"])
}

func binaryTreePaths(root map[string]any) []string {
	var dfs func(map[string]any, string) []string
	dfs = func(t map[string]any, path string) []string {
		if isLeaf(t) {
			return _cast[[]string]([]any{})
		}
		var current string = path
		if (path == "") {
			current = fmt.Sprint(value(t))
		} else {
			current = path + "->" + fmt.Sprint(value(t))
		}
		var l map[string]any = left(t)
		var r map[string]any = right(t)
		if (isLeaf(l) && isLeaf(r)) {
			return []string{current}
		}
		var res []string = []string{}
		if !isLeaf(l) {
			res = append(append([]string{}, res...), dfs(l, current)...)
		}
		if !isLeaf(r) {
			res = append(append([]string{}, res...), dfs(r, current)...)
		}
		return res
}
	return dfs(root, "")
}

func example_1() {
	expect(_equal(binaryTreePaths(example1), []string{"1->2->5", "1->3"}))
}

func single_node() {
	expect(_equal(binaryTreePaths(Node(Leaf(), 1, Leaf())), []string{"1"}))
}

func empty() {
	expect(_equal(binaryTreePaths(Leaf()), []any{}))
}

var example1 map[string]any = Node(Node(Leaf(), 2, Node(Leaf(), 5, Leaf())), 1, Node(Leaf(), 3, Leaf()))
func main() {
	example_1()
	single_node()
	empty()
}

func _cast[T any](v any) T {
    data, err := json.Marshal(v)
    if err != nil { panic(err) }
    var out T
    if err := json.Unmarshal(data, &out); err != nil { panic(err) }
    return out
}

func _equal(a, b any) bool {
    av := reflect.ValueOf(a)
    bv := reflect.ValueOf(b)
    if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice && av.Len() == 0 && bv.Len() == 0 {
        return true
    }
    return reflect.DeepEqual(a, b)
}

