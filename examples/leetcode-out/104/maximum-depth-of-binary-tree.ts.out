// Generated by Mochi TypeScript compiler

function max(a: number, b: number) : number {
	if ((a > b)) {
		return a
	} else {
		return b
	}
}

function maxDepth(root: any) : number {
	return (() => {
	const _t = root;
	switch (_t) {
	case Leaf:
		return 0;
	case Node(l, _, r):
		return (max(maxDepth(l), maxDepth(r)) + 1);
	}
	return undefined;
})()
}

function example_1(): void {
	let tree: Node = {left: {left: {}, value: 9, right: {}}, value: 3, right: {left: {left: {}, value: 15, right: {}}, value: 20, right: {left: {}, value: 7, right: {}}}}
	if (!((maxDepth(tree) == 3))) { throw new Error('expect failed') }
}

function example_2(): void {
	let tree: Node = {left: {}, value: 1, right: {left: {}, value: 2, right: {}}}
	if (!((maxDepth(tree) == 2))) { throw new Error('expect failed') }
}

function single_node(): void {
	if (!((maxDepth({left: {}, value: 0, right: {}}) == 1))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!((maxDepth({}) == 0))) { throw new Error('expect failed') }
}

function main(): void {
	type Tree = {
	}
	example_1()
	example_2()
	single_node()
	empty()
}
main()

