# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def verifyPreorder(preorder: list[int]) -> bool:
	stack = []
	lower = (-2147483648)
	for value in preorder:
		if (value < lower):
			return False
		while (len(stack) > 0):
			top = stack[(len(stack) - 1)]
			if (value > top):
				lower = top
				stack = stack[0:(len(stack) - 1)]
			else:
				break
		stack = (stack + [value])
	return True

def example_1():
	assert (verifyPreorder([5, 2, 1, 3, 6]) == True)

def example_2():
	assert (verifyPreorder([5, 2, 6, 1, 3]) == False)

def single_node():
	assert (verifyPreorder([1]) == True)

def empty_list():
	assert (verifyPreorder([]) == True)

def strictly_increasing():
	assert (verifyPreorder([1, 2, 3, 4, 5]) == True)

def main():
	example_1()
	example_2()
	single_node()
	empty_list()
	strictly_increasing()

if __name__ == "__main__":
	main()
