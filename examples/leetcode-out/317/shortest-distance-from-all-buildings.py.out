# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def shortestDistance(grid: list[list[int]]) -> int:
	rows = len(grid)
	if (rows == 0):
		return (-1)
	cols = len(grid[0])
	dist = []
	reach = []
	r = 0
	while (r < rows):
		distRow = []
		reachRow = []
		c = 0
		while (c < cols):
			distRow = (distRow + [0])
			reachRow = (reachRow + [0])
			c = (c + 1)
		dist = (dist + [distRow])
		reach = (reach + [reachRow])
		r = (r + 1)
	dirs = [[1, 0], [(-1), 0], [0, 1], [0, (-1)]]
	total = 0
	r = 0
	while (r < rows):
		c = 0
		while (c < cols):
			if (grid[r][c] == 1):
				total = (total + 1)
				queue = [[r, c]]
				visited = []
				vr = 0
				while (vr < rows):
					row = []
					vc = 0
					while (vc < cols):
						row = (row + [False])
						vc = (vc + 1)
					visited = (visited + [row])
					vr = (vr + 1)
				visited[r][c] = True
				idx = 0
				level = 0
				while (idx < len(queue)):
					size = (len(queue) - idx)
					i = 0
					while (i < size):
						pos = queue[idx]
						idx = (idx + 1)
						pr = pos[0]
						pc = pos[1]
						dist[pr][pc] = (dist[pr][pc] + level)
						reach[pr][pc] = (reach[pr][pc] + 1)
						d = 0
						while (d < len(dirs)):
							nr = (pr + dirs[d][0])
							nc = (pc + dirs[d][1])
							if ((((nr >= 0) and (nr < rows)) and (nc >= 0)) and (nc < cols)):
								if (grid[nr][nc] == 0):
									if (not (visited[nr][nc])):
										visited[nr][nc] = True
										queue = (queue + [[nr, nc]])
							d = (d + 1)
						i = (i + 1)
					level = (level + 1)
			c = (c + 1)
		r = (r + 1)
	best = 2147483647
	r = 0
	while (r < rows):
		c = 0
		while (c < cols):
			if (grid[r][c] == 0):
				if (reach[r][c] == total):
					if (dist[r][c] < best):
						best = dist[r][c]
			c = (c + 1)
		r = (r + 1)
	if (best == 2147483647):
		return (-1)
	return best

grid1 = [[1, 0, 2, 0, 1], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0]]
grid2 = [[1, 0], [0, 0]]
grid3 = []

def example_1():
	assert (shortestDistance(grid1) == 7)

def simple():
	assert (shortestDistance(grid2) == 1)

def empty():
	assert (shortestDistance(grid3) == ((-1)))

def main():
	grid1 = [[1, 0, 2, 0, 1], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0]]
	grid2 = [[1, 0], [0, 0]]
	grid3 = []
	example_1()
	simple()
	empty()

if __name__ == "__main__":
	main()
