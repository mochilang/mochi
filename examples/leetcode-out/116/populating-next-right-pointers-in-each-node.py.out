# Generated by Mochi Python compiler
from __future__ import annotations

import typing

def connect(lefts: list[int], rights: list[int], root: int) -> list[int]:
	nexts = []
	i = 0
	while (i < len(lefts)):
		nexts = (nexts + [((-1))])
		i = (i + 1)
	queue = []
	if (root != ((-1))):
		queue = [root]
	while (len(queue) > 0):
		next = []
		prev = ((-1))
		for idx in queue:
			if (prev != ((-1))):
				nexts[prev] = idx
			prev = idx
			if (lefts[idx] != ((-1))):
				next = (next + [lefts[idx]])
			if (rights[idx] != ((-1))):
				next = (next + [rights[idx]])
		queue = next
	return nexts

def levels(lefts: list[int], rights: list[int], values: list[int], root: int) -> list[list[int]]:
	result = []
	queue = []
	if (root != ((-1))):
		queue = [root]
	while (len(queue) > 0):
		vals = []
		next = []
		for idx in queue:
			vals = (vals + [values[idx]])
			if (lefts[idx] != ((-1))):
				next = (next + [lefts[idx]])
			if (rights[idx] != ((-1))):
				next = (next + [rights[idx]])
		result = (result + [vals])
		queue = next
	return result

exLefts = None
exRights = None
exValues = [1, 2, 3, 4, 5, 6, 7]
exRoot = 0

def example():
	ns = connect(exLefts, exRights, exRoot)
	assert (levels(exLefts, exRights, exValues, exRoot) == [[1], [2, 3], [4, 5, 6, 7]])
	assert (ns == [((-1)), 2, ((-1)), 4, 5, 6, ((-1))])

def single_node():
	lefts = [((-1))]
	rights = [((-1))]
	values = [1]
	root = 0
	ns = connect(lefts, rights, root)
	assert (levels(lefts, rights, values, root) == [[1]])
	assert (ns == [((-1))])

def empty():
	lefts = []
	rights = []
	values = []
	ns = connect(lefts, rights, ((-1)))
	assert (levels(lefts, rights, values, ((-1))) == [])
	assert (ns == [])

def main():
	exLefts = [1, 3, 5, ((-1)), ((-1)), ((-1)), ((-1))]
	exRights = [2, 4, 6, ((-1)), ((-1)), ((-1)), ((-1))]
	exValues = [1, 2, 3, 4, 5, 6, 7]
	exRoot = 0
	example()
	single_node()
	empty()

if __name__ == "__main__":
	main()
