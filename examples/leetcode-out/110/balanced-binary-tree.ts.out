// Generated by Mochi TypeScript compiler

function max(a: number, b: number) : number {
	if ((a > b)) {
		return a
	} else {
		return b
	}
}

function abs(x: number) : number {
	if ((x < 0)) {
		return (-x)
	} else {
		return x
	}
}

function height(t: any) : number {
	return (() => {
	const _t = t;
	switch (_t) {
	case Leaf:
		return 0;
	case Node(l, _, r):
		return (max(height(l), height(r)) + 1);
	}
	return undefined;
})()
}

function balanced(t: any) : boolean {
	return (() => {
	const _t = t;
	switch (_t) {
	case Leaf:
		return true;
	case Node(l, _, r):
		return ((balanced(l) && balanced(r)) && (abs((height(l) - height(r))) <= 1));
	}
	return undefined;
})()
}

function isBalanced(root: any) : boolean {
	return balanced(root)
}

function example_1(): void {
	let tree: Node = {left: {left: {}, value: 9, right: {}}, value: 3, right: {left: {left: {}, value: 15, right: {}}, value: 20, right: {left: {}, value: 7, right: {}}}}
	if (!((isBalanced(tree) == true))) { throw new Error('expect failed') }
}

function example_2(): void {
	let tree: Node = {left: {left: {left: {left: {}, value: 4, right: {}}, value: 3, right: {left: {}, value: 4, right: {}}}, value: 2, right: {left: {}, value: 3, right: {}}}, value: 1, right: {left: {}, value: 2, right: {}}}
	if (!((isBalanced(tree) == false))) { throw new Error('expect failed') }
}

function single_node(): void {
	if (!((isBalanced({left: {}, value: 1, right: {}}) == true))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!((isBalanced({}) == true))) { throw new Error('expect failed') }
}

function main(): void {
	type Tree = {
	}
	type Info = {
		height: any;
		balanced: any;
	}
	example_1()
	example_2()
	single_node()
	empty()
}
main()

