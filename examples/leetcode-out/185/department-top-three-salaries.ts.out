// Generated by Mochi TypeScript compiler

let employees: Array<Employee> = [{id: 1, name: "Joe", salary: 85000, departmentId: 1}, {id: 2, name: "Henry", salary: 80000, departmentId: 2}, {id: 3, name: "Sam", salary: 60000, departmentId: 2}, {id: 4, name: "Max", salary: 90000, departmentId: 1}, {id: 5, name: "Janet", salary: 69000, departmentId: 1}, {id: 6, name: "Randy", salary: 85000, departmentId: 1}, {id: 7, name: "Will", salary: 70000, departmentId: 1}]

let departments: Array<Department> = [{id: 1, name: "IT"}, {id: 2, name: "Sales"}]

function topThreeSalaries(employees: Array<Employee>, departments: Array<Department>) : Array<Result> {
	let results: Array<any> = []
	for (const dept of departments) {
		let salaries: Array<any> = []
		for (const emp of employees) {
			if ((emp.departmentId == dept.id)) {
				let found: boolean = false
				for (const s of salaries) {
					if (_equal(s, emp.salary)) {
						found = true
						break
					}
				}
				if ((!found)) {
					salaries = salaries.concat([emp.salary])
				}
			}
		}
		let i1: number = 0
		while ((i1 < salaries.length)) {
			let j: number = (i1 + 1)
			while ((j < salaries.length)) {
				if ((salaries[j] > salaries[i1])) {
					let t: any = salaries[i1]
					salaries[i1] = salaries[j]
					salaries[j] = t
				}
				j = (j + 1)
			}
			i1 = (i1 + 1)
		}
		let i: number = 0
		while (((i < salaries.length) && (i < 3))) {
			let sal: any = salaries[i]
			for (const emp of employees) {
				if (((emp.departmentId == dept.id) && _equal(emp.salary, sal))) {
					results = results.concat([{Department: dept.name, Employee: emp.name, Salary: sal}])
				}
			}
			i = (i + 1)
		}
	}
	return results
}

function top_three_salaries(): void {
	let res: Array<Result> = topThreeSalaries(employees, departments)
	let names: Array<any> = []
	for (const r of res) {
		names = names.concat([r.Employee])
	}
	if (!((String(names) == String(["Max", "Joe", "Randy", "Will", "Henry", "Sam"])))) { throw new Error('expect failed') }
}

function main(): void {
	type Employee = {
		id: any;
		name: any;
		salary: any;
		departmentId: any;
	}
	type Department = {
		id: any;
		name: any;
	}
	type Result = {
		Department: any;
		Employee: any;
		Salary: any;
	}
	top_three_salaries()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

