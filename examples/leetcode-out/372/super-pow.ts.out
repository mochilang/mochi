// Generated by Mochi TypeScript compiler

let MOD: number = 1337

function powMod(x: number, k: number) : number {
	let base: number = (x % MOD)
	let exp: number = k
	let result: number = 1
	while ((exp > 0)) {
		if (((exp % 2) == 1)) {
			result = (((result * base)) % MOD)
		}
		base = (((base * base)) % MOD)
		exp = Math.trunc(exp / 2)
	}
	return result
}

function superPow(a: number, b: Array<number>) : number {
	let result: number = 1
	for (const digit of b) {
		result = powMod(result, 10)
		let part: number = powMod(a, digit)
		result = (((result * part)) % MOD)
	}
	return result
}

function example_1(): void {
	if (!((superPow(2, [3]) == 8))) { throw new Error('expect failed') }
}

function example_2(): void {
	if (!((superPow(2, [1, 0]) == 1024))) { throw new Error('expect failed') }
}

function example_3(): void {
	if (!((superPow(1, [4, 3, 3, 8, 5, 2]) == 1))) { throw new Error('expect failed') }
}

function large_numbers(): void {
	if (!((superPow(2147483647, [2, 0, 0]) == 1198))) { throw new Error('expect failed') }
}

function zero_exponent(): void {
	if (!((superPow(5, []) == 1))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	example_2()
	example_3()
	large_numbers()
	zero_exponent()
}
main()

