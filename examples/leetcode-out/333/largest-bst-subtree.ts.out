// Generated by Mochi TypeScript compiler

let example1: Record<string, any> = Node(Node(Node(Leaf(), 1, Leaf()), 5, Node(Leaf(), 8, Leaf())), 10, Node(Leaf(), 15, Node(Leaf(), 7, Leaf())))

function Leaf() : Record<string, any> {
	return {"__name": "Leaf"}
}

function Node(left: Record<string, any>, value: number, right: Record<string, any>) : Record<string, any> {
	return {"__name": "Node", "left": left, "value": value, "right": right}
}

function isLeaf(t: Record<string, any>) : boolean {
	return _equal(t["__name"], "Leaf")
}

function left(t: Record<string, any>) : Record<string, any> {
	return t["left"]
}

function right(t: Record<string, any>) : Record<string, any> {
	return t["right"]
}

function value(t: Record<string, any>) : number {
	return t["value"]
}

function minInt(a: number, b: number) : number {
	if ((a < b)) {
		return a
	}
	return b
}

function maxInt(a: number, b: number) : number {
	if ((a > b)) {
		return a
	}
	return b
}

function helper(node: Record<string, any>) : Record<string, any> {
	if (isLeaf(node)) {
		return {"min": 2147483647, "max": (-2147483648), "size": 0, "largest": 0, "bst": true}
	}
	let l: Record<string, any> = helper(left(node))
	let r: Record<string, any> = helper(right(node))
	let minVal: number = value(node)
	let maxVal: number = value(node)
	if ((!isLeaf(left(node)))) {
		minVal = minInt(minVal, l["min"])
		maxVal = maxInt(maxVal, l["max"])
	}
	if ((!isLeaf(right(node)))) {
		minVal = minInt(minVal, r["min"])
		maxVal = maxInt(maxVal, r["max"])
	}
	let size: number = (((l["size"]) + (r["size"])) + 1)
	let bst: boolean = false
	if (((((l["bst"]) && (r["bst"])) && (value(node) > (l["max"]))) && (value(node) < (r["min"])))) {
		bst = true
	}
	let largest: number = size
	if ((!bst)) {
		let ll: number = l["largest"]
		let rl: number = r["largest"]
		largest = maxInt(ll, rl)
	}
	return {"min": minVal, "max": maxVal, "size": size, "largest": largest, "bst": bst}
}

function largestBSTSubtree(root: Record<string, any>) : number {
	let info: Record<string, any> = helper(root)
	return info["largest"]
}

function example_1(): void {
	if (!((largestBSTSubtree(example1) == 3))) { throw new Error('expect failed') }
}

function single_node(): void {
	if (!((largestBSTSubtree(Node(Leaf(), 1, Leaf())) == 1))) { throw new Error('expect failed') }
}

function already_bst(): void {
	let tree: Record<string, any> = Node(Node(Leaf(), 2, Leaf()), 3, Node(Leaf(), 4, Node(Leaf(), 5, Leaf())))
	if (!((largestBSTSubtree(tree) == 4))) { throw new Error('expect failed') }
}

function empty(): void {
	if (!((largestBSTSubtree(Leaf()) == 0))) { throw new Error('expect failed') }
}

function main(): void {
	example_1()
	single_node()
	already_bst()
	empty()
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
    return true;
  }
  if (a && b && typeof a === 'object' && typeof b === 'object') {
    const ak = Object.keys(a); const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) { if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) return false; }
    return true;
  }
  return a === b;
}

main()

