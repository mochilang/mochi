fun nextPermutation(nums: list<int>): list<int> {
  var i = len(nums) - 2
  while i >= 0 && nums[i] >= nums[i+1] {
    i = i - 1
  }
  if i >= 0 {
    var j = len(nums) - 1
    while nums[j] <= nums[i] {
      j = j - 1
    }
    let temp = nums[i]
    nums[i] = nums[j]
    nums[j] = temp
  }
  var start = i + 1
  var end = len(nums) - 1
  while start < end {
    let temp = nums[start]
    nums[start] = nums[end]
    nums[end] = temp
    start = start + 1
    end = end - 1
  }
  return nums
}

// Test cases from LeetCode

test "example 1" {
  expect nextPermutation([1,2,3]) == [1,3,2]
}

test "example 2" {
  expect nextPermutation([3,2,1]) == [1,2,3]
}

test "example 3" {
  expect nextPermutation([1,1,5]) == [1,5,1]
}

// Additional edge cases

test "single element" {
  expect nextPermutation([1]) == [1]
}

/*
Common language errors and fixes:
1. Reassigning an immutable `let` binding:
   let x = 1
   x = 2            // error[E004]: cannot reassign immutable binding
   // Fix: use `var x = 1` instead.

2. Using an undefined function:
   foo()            // error[I001]: undefined function or closure: foo
   // Fix: define `fun foo() {}` before calling it.

3. Passing wrong number of arguments:
   fun add(a: int, b: int): int { a + b }
   add(1)           // error[I002]: function add expects 2 arguments, got 1
   // Fix: call `add(1, 2)` with both parameters.
*/
