fun combinationSum2(candidates: list<int>, target: int): list<list<int>> {
  let arr = from c in candidates sort by c select c
  let n = len(arr)
  var result: list<list<int>> = []

  fun backtrack(remain: int, start: int, path: list<int>) {
    if remain == 0 {
      result = result + [path]
    } else {
      var i = start
      while i < n {
        let current = arr[i]
        if current > remain {
          break
        }
        if i > start && arr[i] == arr[i-1] {
          i = i + 1
          continue
        }
        backtrack(remain - current, i + 1, path + [current])
        i = i + 1
      }
    }
  }

  backtrack(target, 0, [])
  return result
}

// Test cases from LeetCode

test "example 1" {
  expect combinationSum2([10,1,2,7,6,1,5], 8) == [
    [1,1,6],
    [1,2,5],
    [1,7],
    [2,6]
  ]
}

test "example 2" {
  expect combinationSum2([2,5,2,1,2], 5) == [
    [1,2,2],
    [5]
  ]
}
