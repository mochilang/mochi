fun longestConsecutive(nums: list<int>): int {
  var set: map<int, bool> = {}
  for n in nums {
    set[n] = true
  }
  var best = 0
  for n in set {
    if !(n - 1 in set) {
      var curr = n
      var length = 1
      while curr + 1 in set {
        curr = curr + 1
        length = length + 1
      }
      if length > best {
        best = length
      }
    }
  }
  return best
}

// Test cases from LeetCode

test "example 1" {
  expect longestConsecutive([100,4,200,1,3,2]) == 4
}

test "example 2" {
  expect longestConsecutive([0,3,7,2,5,8,4,6,0,1]) == 9
}

// Additional edge cases

test "empty" {
  expect longestConsecutive([]) == 0
}

test "duplicates" {
  expect longestConsecutive([1,2,0,1]) == 3
}

/*
Common Mochi language errors and how to fix them:
1. Creating an empty map without a type causes inference errors:
     var seen = {}                   // ERROR: type cannot be inferred
   Provide the key and value types:
     var seen: map<int, bool> = {}
2. Mixing assignment with comparison:
     if length = best { }            // ERROR: '=' assigns a value
   Use '==' when comparing:
     if length == best { }
3. Using 'let' when the value needs to change:
     let curr = n
     curr = curr + 1                 // ERROR[E004]: cannot reassign
   Declare it with 'var' instead.
*/
