// Solution for LeetCode problem 102 - Binary Tree Level Order Traversal

// Binary tree node definition
// Leaf represents an empty tree
// Node has left, value, and right children

type Tree =
  Leaf
  | Node(left: Tree, value: int, right: Tree)

// Perform a breadth-first traversal returning values level by level
fun levelOrder(root: Tree): list<list<int>> {
  if match root {
       Leaf => true
       _ => false
     } {
    return []
  }
  var result: list<list<int>> = []
  var queue: list<Tree> = [root]
  while len(queue) > 0 {
    var level: list<int> = []
    var next: list<Tree> = []
    for node in queue {
      if match node { Leaf => false _ => true } {
        level = level + [node.value]
        if match node.left { Leaf => false _ => true } {
          next = next + [node.left]
        }
        if match node.right { Leaf => false _ => true } {
          next = next + [node.right]
        }
      }
    }
    result = result + [level]
    queue = next
  }
  return result
}

// Test cases based on LeetCode examples

test "example 1" {
  let tree = Node {
    left: Node { left: Leaf {}, value: 9, right: Leaf {} },
    value: 3,
    right: Node {
      left: Node { left: Leaf {}, value: 15, right: Leaf {} },
      value: 20,
      right: Node { left: Leaf {}, value: 7, right: Leaf {} }
    }
  }
  expect levelOrder(tree) == [[3], [9,20], [15,7]]
}

test "single node" {
  expect levelOrder(Node { left: Leaf {}, value: 1, right: Leaf {} }) == [[1]]
}

test "empty" {
  expect levelOrder(Leaf {}) == []
}

/*
Common Mochi language errors and how to fix them:
1. Using '=' instead of '==' for comparisons.
   if node = Leaf { ... }   // ❌ assignment
   if node == Leaf { ... }  // ✅ comparison
2. Declaring a list without a type and later appending values.
   var q = []               // ❌ type unknown
   var q: list<Tree> = []   // ✅ specify element type
3. Reassigning an immutable binding.
   let level = []
   level = level + [1]      // ❌ cannot assign to 'let'
   // Fix: use 'var level = []' if mutation is needed.
4. Using 'null' for empty trees.
   let t = null             // ❌ undefined value
   // Fix: use 'Leaf' to represent an empty subtree.
*/
