// Solution for LeetCode problem 318 - Maximum Product of Word Lengths
// This implementation avoids union types and `match`.

fun buildSet(word: string): map<string, bool> {
  var m: map<string, bool> = {}
  for ch in word {
    m[ch] = true
  }
  return m
}

fun shareLetters(a: map<string, bool>, b: map<string, bool>): bool {
  for ch in a {
    if ch in b {
      return true
    }
  }
  return false
}

fun maxProduct(words: list<string>): int {
  let n = len(words)
  var sets: list<map<string, bool>> = []
  var i = 0
  while i < n {
    sets = sets + [buildSet(words[i])]
    i = i + 1
  }
  var best = 0
  i = 0
  while i < n {
    var j = i + 1
    while j < n {
      if !shareLetters(sets[i], sets[j]) {
        let prod = len(words[i]) * len(words[j])
        if prod > best {
          best = prod
        }
      }
      j = j + 1
    }
    i = i + 1
  }
  return best
}

// Test cases from LeetCode

test "example 1" {
  expect maxProduct(["abcw","baz","foo","bar","xtfn","abcdef"]) == 16
}

test "example 2" {
  expect maxProduct(["a","ab","abc","d","cd","bcd","abcd"]) == 4
}

test "example 3" {
  expect maxProduct(["a","aa","aaa","aaaa"]) == 0
}

/*
Common Mochi language errors and how to fix them:
1. Creating an empty map without type information:
     var m = {}           // ❌ type cannot be inferred
   Fix: specify the key/value types, e.g. `var m: map<string, bool> = {}`.
2. Using '=' instead of '==' in conditions:
     if prod = best { }
   Fix: use '==' for comparisons.
3. Reassigning a value declared with 'let':
     let n = 0
     n = 1               // ❌ cannot assign
   Use 'var' when the value needs to change.
*/
