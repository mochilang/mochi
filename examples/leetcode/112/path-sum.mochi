// LeetCode 112 - Path Sum

// Binary tree definition used by many LeetCode examples.
type Tree =
  Leaf
  | Node(left: Tree, value: int, right: Tree)

// Determine if the tree has a root-to-leaf path that sums to target.
fun hasPathSum(root: Tree, target: int): bool {
  match root {
    Leaf => false
    Node(l, v, r) => {
      let remaining = target - v
      let leftLeaf = match l {
        Leaf => true
        _ => false
      }
      let rightLeaf = match r {
        Leaf => true
        _ => false
      }
      if leftLeaf && rightLeaf {
        remaining == 0
      } else {
        hasPathSum(l, remaining) || hasPathSum(r, remaining)
      }
    }
  }
}

// Tests from the LeetCode problem statement

test "example 1" {
  let root = Node {
    left: Node {
      left: Node { left: Leaf {}, value: 7, right: Leaf {} },
      value: 11,
      right: Node { left: Leaf {}, value: 2, right: Leaf {} }
    },
    value: 4,
    right: Leaf {}
  }
  let tree = Node {
    left: root,
    value: 5,
    right: Node {
      left: Node { left: Leaf {}, value: 13, right: Leaf {} },
      value: 8,
      right: Node { left: Leaf {}, value: 4, right: Node { left: Leaf {}, value: 1, right: Leaf {} } }
    }
  }
  expect hasPathSum(tree, 22) == true
}

test "example 2" {
  let tree = Node {
    left: Node { left: Leaf {}, value: 2, right: Leaf {} },
    value: 1,
    right: Node { left: Leaf {}, value: 3, right: Leaf {} }
  }
  expect hasPathSum(tree, 5) == false
}

test "example 3" {
  let tree = Node {
    left: Node { left: Leaf {}, value: 2, right: Leaf {} },
    value: 1,
    right: Leaf {}
  }
  expect hasPathSum(tree, 0) == false
}

test "single node" {
  expect hasPathSum(Node { left: Leaf {}, value: 5, right: Leaf {} }, 5) == true
}

test "empty" {
  expect hasPathSum(Leaf {}, 1) == false
}

/*
Common Mochi language errors and how to fix them:
1. Matching on a Leaf node with `Leaf {}` instead of `Leaf`.
   Use `match t { Leaf => ... }` when pattern matching.
2. Using `=` instead of `==` for comparisons inside conditions.
3. Reassigning a binding declared with `let`; use `var` if it should change.
4. Forgetting to construct an empty tree with `Leaf {}` when creating a value.
*/
