// Solution for LeetCode problem 312 - Burst Balloons
// Dynamic programming approach without union types or match

fun maxCoins(nums: list<int>): int {
  // Insert 1 at both ends of the array
  var arr: list<int> = [1]
  arr = arr + nums
  arr = arr + [1]
  let n = len(arr)
  // Initialize dp table with zeros
  var dp: list<list<int>> = []
  var i = 0
  while i < n {
    var row: list<int> = []
    var j = 0
    while j < n {
      row = row + [0]
      j = j + 1
    }
    dp = dp + [row]
    i = i + 1
  }
  // Fill dp table
  var length = 2
  while length < n {
    var left = 0
    while left + length < n {
      let right = left + length
      var k = left + 1
      while k < right {
        let coins = arr[left] * arr[k] * arr[right] + dp[left][k] + dp[k][right]
        if coins > dp[left][right] {
          dp[left][right] = coins
        }
        k = k + 1
      }
      left = left + 1
    }
    length = length + 1
  }
  return dp[0][n-1]
}

// Test cases from LeetCode examples

test "example 1" {
  expect maxCoins([3,1,5,8]) == 167
}

test "example 2" {
  expect maxCoins([1,5]) == 10
}

/*
Common Mochi language errors and how to fix them:
1. Using Python-style for loops. Instead, use while loops or range loops with indices.
2. Forgetting to declare variables as 'var' when they need to be reassigned.
3. Mixing '=' assignment with '==' comparison in conditions.
*/
