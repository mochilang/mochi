// Solution for LeetCode problem 146 - LRU Cache

// Each entry stores a key and value.
type Entry {
  key: int
  val: int
}

// Cache keeps its capacity and a list of entries with the
// most recently used item at the front.
type LRUCache {
  cap: int
  items: list<Entry>
}

fun newCache(cap: int): LRUCache {
  return LRUCache { cap: cap, items: [] as list<Entry> }
}

// Find the index of a key in the item list, or -1 if missing.
fun find(items: list<Entry>, k: int): int {
  var i = 0
  while i < len(items) {
    let e = items[i]
    if e.key == k {
      return i
    }
    i = i + 1
  }
  return -1
}

type LookupResult {
  val: int
  cache: LRUCache
}

fun get(cache: LRUCache, key: int): LookupResult {
  let idx = find(cache.items, key)
  if idx == 0 - 1 {
    return LookupResult { val: 0 - 1, cache: cache }
  }
  // Move the found entry to the front.
  let entry = cache.items[idx]
  var items = [entry] + cache.items[0:idx] + cache.items[idx+1:len(cache.items)]
  return LookupResult { val: entry.val, cache: LRUCache { cap: cache.cap, items: items } }
}

fun put(cache: LRUCache, key: int, value: int): LRUCache {
  var items = cache.items
  let idx = find(items, key)
  if idx != 0 - 1 {
    // Remove old occurrence
    items = items[0:idx] + items[idx+1:len(items)]
  }
  // Insert new entry at the front
  items = [Entry { key: key, val: value }] + items
  if len(items) > cache.cap {
    // Drop least recently used item
    items = items[0:cache.cap]
  }
  return LRUCache { cap: cache.cap, items: items }
}

// Basic test from LeetCode description

test "example" {
  var c = newCache(2)
  let r1 = get(c, 1)
  expect r1.val == 0 - 1
  c = r1.cache

  c = put(c, 1, 1)
  c = put(c, 2, 2)
  let r2 = get(c, 1)
  expect r2.val == 1
  c = r2.cache

  c = put(c, 3, 3)  // evicts key 2
  let r3 = get(c, 2)
  expect r3.val == 0 - 1
  c = r3.cache

  c = put(c, 4, 4)  // evicts key 1
  let r4 = get(c, 1)
  expect r4.val == 0 - 1
  c = r4.cache

  let r5 = get(c, 3)
  expect r5.val == 3
  c = r5.cache

  let r6 = get(c, 4)
  expect r6.val == 4
}

/*
Common Mochi language errors and how to fix them:
1. Reassigning a value declared with `let`.
   let x = 1
   x = 2           // ❌ cannot assign
   var x = 1       // ✅ use `var` if mutation is needed
2. Mixing assignment `=` with comparison `==`.
   if a = b { }    // ❌ always assigns
   if a == b { }   // ✅ compares values
3. Leaving a list type unspecified when empty.
   var xs = []               // ❌ element type unknown
   var xs: list<int> = []    // ✅ specify the type
*/
