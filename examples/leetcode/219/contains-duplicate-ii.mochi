fun containsNearbyDuplicate(nums: list<int>, k: int): bool {
  var index: map<int, int> = {}
  var i = 0
  while i < len(nums) {
    let num = nums[i]
    if num in index {
      let j = index[num]
      if i - j <= k {
        return true
      }
    }
    index[num] = i
    i = i + 1
  }
  return false
}

// Test cases from LeetCode

test "example 1" {
  expect containsNearbyDuplicate([1,2,3,1], 3) == true
}

test "example 2" {
  expect containsNearbyDuplicate([1,0,1,1], 1) == true
}

test "example 3" {
  expect containsNearbyDuplicate([1,2,3,1,2,3], 2) == false
}

// Additional edge cases

test "no duplicates" {
  expect containsNearbyDuplicate([1,2,3,4,5], 3) == false
}

test "duplicate at distance k" {
  expect containsNearbyDuplicate([1,2,3,1], 2) == false
}

test "duplicate with k zero" {
  expect containsNearbyDuplicate([1,1], 0) == false
}

/*
Common Mochi language errors and how to fix them:
1. Using '=' instead of '==' in comparisons.
   if x = 1 { }      // ❌ assignment
   if x == 1 { }     // ✅ comparison
2. Reassigning a variable declared with 'let'.
   let idx = 0
   idx = idx + 1     // ❌ cannot modify immutable binding
   var idx = 0       // ✅ use 'var' for mutable values
3. Reading from a map without checking the key exists.
   let pos = index[num]        // ❌ key may be missing
   if num in index { pos = index[num] } // ✅ check first
*/
