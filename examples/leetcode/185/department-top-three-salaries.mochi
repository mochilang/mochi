// Solution for LeetCode problem 185 - Department Top Three Salaries

// Record types for Employees and result rows

type Employee {
  id: int
  name: string
  salary: int
  departmentId: int
}

type Department {
  id: int
  name: string
}

type Result {
  Department: string
  Employee: string
  Salary: int
}

// Returns the top three unique salaries for each department
fun topThreeSalaries(employees: list<Employee>, departments: list<Department>): list<Result> {
  var results: list<Result> = []
  for dept in departments {
    // Gather salaries for this department
    var salaries: list<int> = []
    for emp in employees {
      if emp.departmentId == dept.id {
        // Skip duplicates
        var found = false
        for s in salaries {
          if s == emp.salary {
            found = true
            break
          }
        }
        if !found {
          salaries = salaries + [emp.salary]
        }
      }
    }
    // Sort salaries descending
    
    var i1 = 0
    while i1 < len(salaries) {
      var j = i1 + 1
      while j < len(salaries) {
        if salaries[j] > salaries[i1] {
          let t = salaries[i1]
          salaries[i1] = salaries[j]
          salaries[j] = t
        }
        j = j + 1
      }
      i1 = i1 + 1
    }
    var i = 0
    while i < len(salaries) && i < 3 {
      let sal = salaries[i]
      // Add all employees with this salary
      for emp in employees {
        if emp.departmentId == dept.id && emp.salary == sal {
          results = results + [Result { Department: dept.name, Employee: emp.name, Salary: sal }]
        }
      }
      i = i + 1
    }
  }
  return results
}

// Example data
let employees: list<Employee> = [
  Employee { id: 1, name: "Joe", salary: 85000, departmentId: 1 },
  Employee { id: 2, name: "Henry", salary: 80000, departmentId: 2 },
  Employee { id: 3, name: "Sam", salary: 60000, departmentId: 2 },
  Employee { id: 4, name: "Max", salary: 90000, departmentId: 1 },
  Employee { id: 5, name: "Janet", salary: 69000, departmentId: 1 },
  Employee { id: 6, name: "Randy", salary: 85000, departmentId: 1 },
  Employee { id: 7, name: "Will", salary: 70000, departmentId: 1 }
]

let departments: list<Department> = [
  Department { id: 1, name: "IT" },
  Department { id: 2, name: "Sales" }
]

// Test cases

test "top three salaries" {
  let res = topThreeSalaries(employees, departments)
  var names: list<string> = []
  for r in res { names = names + [r.Employee] }
  expect str(names) == str(["Max", "Joe", "Randy", "Will", "Henry", "Sam"])
}

/*
Common Mochi language errors and how to fix them:
1. Forgetting to annotate list element types when initializing an empty list.
   var res = []                 // ❌ type cannot be inferred
   var res: list<Result> = []   // ✅ specify element type
2. Using '=' instead of '==' in comparisons.
   if emp.departmentId = 1 { }  // ❌ assignment
   if emp.departmentId == 1 { } // ✅ comparison
3. Attempting to mutate a variable declared with 'let'.
   let count = 0
   count = count + 1            // ❌ cannot reassign
   var count = 0                // ✅ use 'var' if reassignment needed
*/
