// Solution for LeetCode problem 81 - Search in Rotated Sorted Array II

fun search(nums: list<int>, target: int): bool {
  var left = 0
  var right = len(nums) - 1
  while left <= right {
    let mid = (left + right) / 2
    if nums[mid] == target {
      return true
    }
    if nums[left] == nums[mid] {
      left = left + 1
    } else if nums[left] < nums[mid] {
      if nums[left] <= target && target < nums[mid] {
        right = mid - 1
      } else {
        left = mid + 1
      }
    } else {
      if nums[mid] < target && target <= nums[right] {
        left = mid + 1
      } else {
        right = mid - 1
      }
    }
  }
  return false
}

// Test cases from LeetCode

test "example 1" {
  expect search([2,5,6,0,0,1,2], 0) == true
}

test "example 2" {
  expect search([2,5,6,0,0,1,2], 3) == false
}

// Additional edge cases

test "all duplicates" {
  expect search([1,1,1,1,1], 2) == false
}

test "single element" {
  expect search([1], 1) == true
}

test "empty array" {
  expect search([], 5) == false
}

/*
Common Mochi language errors and how to fix them:
1. Using '=' instead of '==' in comparisons.
   if nums[mid] = target { }  // ❌ wrong
   if nums[mid] == target { } // ✅ correct
2. Reassigning a variable declared with 'let'.
   let left = 0
   left = left + 1            // ❌ cannot reassign immutable binding
   var left = 0               // ✅ use 'var' for mutable values
3. Trying Python list methods like 'append'.
   nums.append(1)             // ❌ not supported
   nums = nums + [1]          // ✅ concatenate lists with '+'
4. Off-by-one mistakes in loops.
   while i < len(nums) { ... } // ✅ iterate over valid indices
*/
