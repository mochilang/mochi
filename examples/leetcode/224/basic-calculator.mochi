fun digitValue(c: string): int {
  let digits = {
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  }
  return digits[c]
}

fun isDigit(c: string): bool {
  return c >= "0" && c <= "9"
}

fun calculate(s: string): int {
  var i = 0
  var n = len(s)
  var result = 0
  var sign = 1
  var num = 0
  var stack: list<int> = []

  while i < n {
    let c = s[i]
    if isDigit(c) {
      num = num * 10 + digitValue(c)
    } else if c == "+" {
      result = result + sign * num
      num = 0
      sign = 1
    } else if c == "-" {
      result = result + sign * num
      num = 0
      sign = -1
    } else if c == "(" {
      stack = stack + [result]
      stack = stack + [sign]
      result = 0
      sign = 1
    } else if c == ")" {
      result = result + sign * num
      num = 0
      let prevSign = stack[len(stack) - 1]
      stack = stack[0:len(stack)-1]
      let prevResult = stack[len(stack) - 1]
      stack = stack[0:len(stack)-1]
      result = prevResult + prevSign * result
    }
    i = i + 1
  }
  result = result + sign * num
  return result
}

// Test cases from LeetCode

test "example 1" {
  expect calculate("1 + 1") == 2
}

test "example 2" {
  expect calculate(" 2-1 + 2 ") == 3
}

test "example 3" {
  expect calculate("(1+(4+5+2)-3)+(6+8)") == 23
}

// Additional edge cases

test "nested" {
  expect calculate("((2+3)-(1-2))") == 6
}

test "single number" {
  expect calculate("42") == 42
}

/*
Common Mochi language errors and fixes:
1. Forgetting to update the result when encountering '+' or '-' leads to wrong output.
2. Using Python-style stack.pop() will fail. Instead, slice the list:
     let x = stack[len(stack)-1]
     stack = stack[0:len(stack)-1]
3. Forgetting to multiply by the current sign after closing a parenthesis gives incorrect results.
*/
