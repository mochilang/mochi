fun threeSum(nums: list<int>): list<list<int>> {
  let sorted = from x in nums sort by x select x
  let n = len(sorted)
  var res: list<list<int>> = []
  var i = 0
  while i < n {
    if i > 0 && sorted[i] == sorted[i-1] {
      i = i + 1
      continue
    }
    var left = i + 1
    var right = n - 1
    while left < right {
      let sum = sorted[i] + sorted[left] + sorted[right]
      if sum == 0 {
        res = res + [[sorted[i], sorted[left], sorted[right]]]
        left = left + 1
        while left < right && sorted[left] == sorted[left-1] {
          left = left + 1
        }
        right = right - 1
        while left < right && sorted[right] == sorted[right+1] {
          right = right - 1
        }
      } else if sum < 0 {
        left = left + 1
      } else {
        right = right - 1
      }
    }
    i = i + 1
  }
  return res
}

// Test cases from LeetCode

test "example 1" {
  expect threeSum([-1,0,1,2,-1,-4]) == [[-1,-1,2],[-1,0,1]]
}

test "example 2" {
  expect threeSum([0,1,1]) == []
}

test "example 3" {
  expect threeSum([0,0,0]) == [[0,0,0]]
}
