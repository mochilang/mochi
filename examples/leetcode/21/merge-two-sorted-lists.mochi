fun mergeTwoLists(l1: list<int>, l2: list<int>): list<int> {
  var i = 0
  var j = 0
  var result = []
  while i < len(l1) && j < len(l2) {
    if l1[i] <= l2[j] {
      result = result + [l1[i]]
      i = i + 1
    } else {
      result = result + [l2[j]]
      j = j + 1
    }
  }
  while i < len(l1) {
    result = result + [l1[i]]
    i = i + 1
  }
  while j < len(l2) {
    result = result + [l2[j]]
    j = j + 1
  }
  return result
}

// Test cases from the LeetCode problem statement

test "example 1" {
  expect mergeTwoLists([1,2,4], [1,3,4]) == [1,1,2,3,4,4]
}

test "example 2" {
  expect mergeTwoLists([], []) == []
}

test "example 3" {
  expect mergeTwoLists([], [0]) == [0]
}

// Additional edge cases

test "different lengths" {
  expect mergeTwoLists([1,5,7], [2,3,4,6,8]) == [1,2,3,4,5,6,7,8]
}

test "one list empty" {
  expect mergeTwoLists([1,2,3], []) == [1,2,3]
}
