fun reverseKGroup(nums: list<int>, k: int): list<int> {
  let n = len(nums)
  if k <= 1 {
    return nums
  }
  var result = []
  var i = 0
  while i < n {
    let end = i + k
    if end <= n {
      var j = end - 1
      while j >= i {
        result = result + [nums[j]]
        j = j - 1
      }
    } else {
      var j = i
      while j < n {
        result = result + [nums[j]]
        j = j + 1
      }
    }
    i = i + k
  }
  return result
}

// Test cases from LeetCode

test "example 1" {
  expect reverseKGroup([1,2,3,4,5], 2) == [2,1,4,3,5]
}

test "example 2" {
  expect reverseKGroup([1,2,3,4,5], 3) == [3,2,1,4,5]
}

// Additional edge cases

test "k equals list length" {
  expect reverseKGroup([1,2,3,4], 4) == [4,3,2,1]
}

test "k greater than length" {
  expect reverseKGroup([1,2,3], 5) == [1,2,3]
}

test "k is one" {
  expect reverseKGroup([1,2,3], 1) == [1,2,3]
}
