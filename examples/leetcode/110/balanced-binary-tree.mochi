// LeetCode 110 - Balanced Binary Tree

// Binary tree definition shared across LeetCode examples.
type Tree =
  Leaf
  | Node(left: Tree, value: int, right: Tree)

// Helper record used when checking balance.
type Info {
  height: int
  ok: bool
}

// Determine if a binary tree is height-balanced.
fun isBalanced(root: Tree): bool {
  fun check(t: Tree): Info {
    fun combine(l: Tree, r: Tree): Info {
      let left = check(l)
      let right = check(r)
      var diff = left.height - right.height
      if diff < 0 { diff = -diff }
      var h = left.height
      if right.height > h { h = right.height }
      return Info { height: h + 1, ok: left.ok && right.ok && diff <= 1 }
    }

    return match t {
      Leaf => Info { height: 0, ok: true }
      Node(l, _, r) => combine(l, r)
    }
  }

  let result = check(root)
  return result.ok
}

// Test cases from the LeetCode problem statement

test "example 1" {
  let tree = Node {
    left: Node { left: Leaf {}, value: 9, right: Leaf {} },
    value: 3,
    right: Node {
      left: Node { left: Leaf {}, value: 15, right: Leaf {} },
      value: 20,
      right: Node { left: Leaf {}, value: 7, right: Leaf {} }
    }
  }
  expect isBalanced(tree) == true
}

test "example 2" {
  let tree = Node {
    left: Node {
      left: Node {
        left: Node { left: Leaf {}, value: 4, right: Leaf {} },
        value: 3,
        right: Node { left: Leaf {}, value: 4, right: Leaf {} }
      },
      value: 2,
      right: Node { left: Leaf {}, value: 3, right: Leaf {} }
    },
    value: 1,
    right: Node { left: Leaf {}, value: 2, right: Leaf {} }
  }
  expect isBalanced(tree) == false
}

test "single node" {
  expect isBalanced(Node { left: Leaf {}, value: 1, right: Leaf {} }) == true
}

test "empty" {
  expect isBalanced(Leaf {}) == true
}

/*
Common Mochi language errors and how to fix them:
1. Reassigning a variable declared with 'let':
     let h = 0
     h = 1            // error[E004]
   Use 'var h = 0' when mutation is required.
2. Using '=' instead of '==' in a comparison:
     if diff = 1 { }
   Replace with 'diff == 1'.
3. Forgetting to handle the 'Leaf' case when matching a Tree:
     match t {
       Node(l, v, r) => ...
     }
   Always provide a branch for 'Leaf' as well.
*/
