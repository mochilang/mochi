// Solution for LeetCode problem 244 - Shortest Word Distance II
//
// The WordDistance structure stores the positions of each word
// in the original list so that shortest queries can be answered
// in O(m + n) time where m and n are the counts of the two words.

type WordDistance {
  index: map<string, list<int>>
}

fun newWordDistance(words: list<string>): WordDistance {
  var m: map<string, list<int>> = {}
  var i = 0
  while i < len(words) {
    let w = words[i]
    var lst: list<int> = []
    if w in m {
      lst = m[w]
    }
    lst = lst + [i]
    m[w] = lst
    i = i + 1
  }
  return WordDistance { index: m }
}

fun min(a: int, b: int): int { if a < b { return a } return b }

fun shortest(wd: WordDistance, word1: string, word2: string): int {
  let list1 = wd.index[word1]
  let list2 = wd.index[word2]
  var i = 0
  var j = 0
  var best = 1000000000
  while i < len(list1) && j < len(list2) {
    let a = list1[i]
    let b = list2[j]
    var diff = a - b
    if diff < 0 {
      diff = -diff
    }
    best = min(best, diff)
    if a < b {
      i = i + 1
    } else {
      j = j + 1
    }
  }
  return best
}

// Basic tests based on the LeetCode problem statement

test "example" {
  let words = ["practice","makes","perfect","coding","makes"]
  let wd = newWordDistance(words)
  expect shortest(wd, "coding", "practice") == 3
  expect shortest(wd, "makes", "coding") == 1
}

// Additional edge cases

test "same word many times" {
  let words = ["a","a","b","a"]
  let wd = newWordDistance(words)
  expect shortest(wd, "a", "b") == 1
}

/*
Common Mochi language errors and how to fix them:
1. Omitting the element type when creating an empty list:
     var lst = []            // ❌ type cannot be inferred
   Provide the type instead:
     var lst: list<int> = [] // ✅ specify the element type
2. Using '=' instead of '==' for equality checks:
     if word = other { ... } // ❌ assignment
     if word == other { ... } // ✅ comparison
3. Attempting to mutate a 'let' binding:
     let i = 0
     i = i + 1               // ❌ cannot reassign
   Use 'var' for mutable variables.
*/
