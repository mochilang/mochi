// LeetCode 111 - Minimum Depth of Binary Tree

// Binary tree definition shared across the LeetCode examples.
type Tree =
  Leaf
  | Node(left: Tree, value: int, right: Tree)

// Recursively compute the minimal number of nodes from the root to
// the nearest leaf.
fun minDepth(root: Tree): int {
  match root {
    Leaf => 0
    Node(l, _, r) => {
      let leftDepth = minDepth(l)
      let rightDepth = minDepth(r)
      if leftDepth == 0 && rightDepth == 0 {
        1
      } else if leftDepth == 0 {
        rightDepth + 1
      } else if rightDepth == 0 {
        leftDepth + 1
      } else if leftDepth < rightDepth {
        leftDepth + 1
      } else {
        rightDepth + 1
      }
    }
  }
}

// Test cases from the LeetCode problem statement

test "example 1" {
  let tree = Node {
    left: Node { left: Leaf {}, value: 9, right: Leaf {} },
    value: 3,
    right: Node {
      left: Node { left: Leaf {}, value: 15, right: Leaf {} },
      value: 20,
      right: Node { left: Leaf {}, value: 7, right: Leaf {} }
    }
  }
  expect minDepth(tree) == 2
}

test "example 2" {
  let tree = Node {
    left: Leaf {},
    value: 2,
    right: Node { left: Leaf {}, value: 3, right: Leaf {} }
  }
  expect minDepth(tree) == 2
}

test "single node" {
  expect minDepth(Node { left: Leaf {}, value: 1, right: Leaf {} }) == 1
}

test "empty" {
  expect minDepth(Leaf {}) == 0
}

/*
Common Mochi language errors and how to fix them:
1. Confusing '=' with '==' in conditional checks:
     if depth = 1 { }
   // Use '==' for comparisons.
2. Attempting to reassign a value bound with 'let':
     let d = 0
     d = 1  // error[E004]
   // Use 'var' when the variable should change.
3. Using Python style 'None' instead of the 'Leaf' constructor:
     let t = None  // error[I001]
   // Construct an empty tree with 'Leaf {}'.
4. Forgetting braces when creating a Leaf instance:
     let t = Leaf   // error[T008]
   // The correct form is 'Leaf {}'.
5. Missing a branch when matching on an enum:
     fun f(t: Tree): int {
       match t { Node(_, v, _) => v }  // error[T007]
     }
   // Provide a case for 'Leaf' as well to return a value.
*/
