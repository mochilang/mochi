// Solution for LeetCode problem 370 - Range Addition

// Apply a list of update operations to an array of zeros with length n.
fun getModifiedArray(n: int, updates: list<list<int>>): list<int> {
  var diff: list<int> = []
  var i = 0
  while i < n {
    diff = diff + [0]
    i = i + 1
  }

  let m = len(updates)
  var j = 0
  while j < m {
    let u = updates[j]
    let start = u[0]
    let end = u[1]
    let inc = u[2]
    diff[start] = diff[start] + inc
    if end + 1 < n {
      diff[end + 1] = diff[end + 1] - inc
    }
    j = j + 1
  }

  var result: list<int> = []
  var sum = 0
  var k = 0
  while k < n {
    sum = sum + diff[k]
    result = result + [sum]
    k = k + 1
  }

  return result
}

// Test cases from LeetCode

// Example 1
let updates1: list<list<int>> = [[1,3,2],[2,4,3],[0,2,-2]]
let res1 = getModifiedArray(5, updates1)

// expected result is [-2,0,3,5,3]
test "example 1" {
  expect res1[0] == (-2)
  expect res1[1] == 0
  expect res1[2] == 3
  expect res1[3] == 5
  expect res1[4] == 3
}

// Edge case: no updates
let res2 = getModifiedArray(3, [])

test "no updates" {
  expect res2[0] == 0
  expect res2[1] == 0
  expect res2[2] == 0
}

/*
Common Mochi language errors and how to fix them:
1. Trying to use Python-style list multiplication:
     var diff = [0] * n        // ❌ not valid Mochi syntax
   Use a while loop to append zeros instead.
2. Forgetting to check the end+1 boundary:
     diff[end+1] = diff[end+1] - inc
   Add a guard `if end + 1 < n { ... }` to avoid out of range errors.
3. Mutating a variable declared with `let`:
     let sum = 0
     sum = sum + diff[i]        // ❌ cannot assign
   Declare with `var sum` when you need to change the value.
*/
