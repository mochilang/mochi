// Solution for LeetCode problem 364 - Nested List Weight Sum II
// Avoids union types and match statements by using maps
// with a "__name" field to distinguish Int vs List.

fun Int(val: int): map<string, any> {
  return {"__name": "Int", "value": val}
}

fun List(items: list<map<string, any>>): map<string, any> {
  return {"__name": "List", "items": items}
}

fun isInt(node: map<string, any>): bool {
  return node["__name"] == "Int"
}

fun value(node: map<string, any>): int {
  return node["value"] as int
}

fun items(node: map<string, any>): list<map<string, any>> {
  return node["items"] as list<map<string, any>>
}

fun depthSumInverse(nested: list<map<string, any>>): int {
  var queue = nested
  var levels: list<int> = []
  while len(queue) > 0 {
    var next: list<map<string, any>> = []
    var levelSum = 0
    for node in queue {
      if isInt(node) {
        levelSum = levelSum + value(node)
      } else {
        next = next + items(node)
      }
    }
    levels = [levelSum] + levels
    queue = next
  }
  var weight = 1
  var total = 0
  for s in levels {
    total = total + s * weight
    weight = weight + 1
  }
  return total
}

let example1 = [
  List([Int(1), Int(1)]),
  Int(2),
  List([Int(1), Int(1)])
]

test "example 1" {
  expect depthSumInverse(example1) == 8
}

let example2 = [
  Int(1),
  List([Int(4), List([Int(6)])])
]

test "example 2" {
  expect depthSumInverse(example2) == 17
}

test "empty" {
  expect depthSumInverse([]) == 0
}

/*
Common Mochi language errors and how to fix them:
1. Comparing strings with '=' instead of '==':
   if node["__name"] = "Int" { }  // ❌ assignment
   if node["__name"] == "Int" { } // ✅ comparison
2. Modifying an immutable variable declared with 'let':
   let total = 0
   total = total + 1            // ❌ cannot modify
   var total = 0                // ✅ use 'var' for mutability
3. Appending to a list without reassigning:
   next + items(node)           // ❌ does nothing
   next = next + items(node)    // ✅ assign back the result
*/
