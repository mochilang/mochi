// LeetCode 133 - Clone Graph implementation from scratch

// Node definition for an undirected graph
// A node can be Nil or a record with a value and list of neighbors
// This mirrors the typical LeetCode structure where each node
// is identified by its integer value

type Node =
  Nil
  | N(val: int, neighbors: list<Node>)

// cloneGraph performs a deep copy using DFS with memoization
fun cloneGraph(root: Node): Node {
  var seen: map<int, Node> = {}

  fun dfs(n: Node): Node {
    return match n {
      Nil => Nil {}
      N(v, neigh) => {
        if v in seen { return seen[v] }

        // create placeholder first so cycles don't loop forever
        seen[v] = N { val: v, neighbors: [] }

        var resultNeighbors: list<Node> = []
        for nb in neigh {
          resultNeighbors = resultNeighbors + [dfs(nb)]
        }

        let nodeCopy = N { val: v, neighbors: resultNeighbors }
        seen[v] = nodeCopy
        nodeCopy
      }
    }
  }

  return dfs(root)
}

// Example graph for tests: chain 1 -> 2 -> 3 -> 4
let g4 = N { val: 4, neighbors: [] }
let g3 = N { val: 3, neighbors: [g4] }
let g2 = N { val: 2, neighbors: [g3] }
let g1 = N { val: 1, neighbors: [g2] }

test "clone chain" {
  let c = cloneGraph(g1)
  match c {
    N(v1, neigh1) => {
      expect v1 == 1
      let n2 = neigh1[0]
      match n2 {
        N(v2, neigh2) => {
          expect v2 == 2
          let n3 = neigh2[0]
          match n3 {
            N(v3, neigh3) => {
              expect v3 == 3
              let n4 = neigh3[0]
              match n4 {
                N(v4, _) => { expect v4 == 4 }
                _ => { expect false }
              }
            }
            _ => { expect false }
          }
        }
        _ => { expect false }
      }
    }
    _ => { expect false }
  }
}

test "independent copy" {
  let c = cloneGraph(g1)
  match c {
    N(_, neigh) => {
      match neigh[0] {
        N(v, _) => { expect v == 2 }
        _ => { expect false }
      }
    }
    _ => { expect false }
  }
}

/*
Common Mochi language errors and how to fix them:
1. Using '=' instead of '==' in a condition will assign instead of compare:
     if a = b { }
   Use '==' for equality checks.
2. Reassigning a value defined with 'let':
     let m = {}
     m = {1: N { val: 1, neighbors: [] }} // error[E004]
   Use 'var m: map<int, Node> = {}' when you need mutation.
3. Creating an empty collection without specifying element types:
     var q = []  // error[I012]
   Provide the type, e.g. 'var q: list<Node> = []'.
4. Failing to return a value on every code path:
     fun f(x: int): int {
       if x > 0 { return 1 }
       // missing else branch -> error
     }
   Ensure all branches return the expected type.
*/

