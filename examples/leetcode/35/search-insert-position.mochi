fun searchInsert(nums: list<int>, target: int): int {
  var left = 0
  var right = len(nums)
  while left < right {
    let mid = (left + right) / 2
    let value = nums[mid]
    if value < target {
      left = mid + 1
    } else {
      right = mid
    }
  }
  return left
}

// Test cases from LeetCode problem description

test "example 1" {
  expect searchInsert([1,3,5,6], 5) == 2
}

test "example 2" {
  expect searchInsert([1,3,5,6], 2) == 1
}

test "example 3" {
  expect searchInsert([1,3,5,6], 7) == 4
}

test "example 4" {
  expect searchInsert([1,3,5,6], 0) == 0
}

// Additional edge cases

test "single element greater" {
  expect searchInsert([2], 1) == 0
}

test "single element smaller" {
  expect searchInsert([2], 3) == 1
}
