// Solution for LeetCode 106 - Construct Binary Tree from Inorder and Postorder Traversal

// Binary tree definition
// Leaf represents an empty node
// Node stores a value with left and right children

type Tree =
  Leaf {}
  | Node(left: Tree, value: int, right: Tree)

fun buildTree(inorder: list<int>, postorder: list<int>): Tree {
  if len(inorder) == 0 {
    return Leaf {}
  }

  let rootVal = postorder[len(postorder) - 1]
  var idx = 0
  while idx < len(inorder) && inorder[idx] != rootVal {
    idx = idx + 1
  }

  let leftIn = inorder[0:idx]
  let rightIn = inorder[idx + 1:len(inorder)]
  let leftPost = postorder[0:idx]
  let rightPost = postorder[idx:len(postorder) - 1]

  return Node {
    left: buildTree(leftIn, leftPost),
    value: rootVal,
    right: buildTree(rightIn, rightPost),
  }
}

fun isSameTree(a: Tree, b: Tree): bool {
  return match a {
    Leaf => match b {
      Leaf => true
      _ => false
    }
    Node(al, av, ar) => match b {
      Node(bl, bv, br) => av == bv && isSameTree(al, bl) && isSameTree(ar, br)
      _ => false
    }
  }
}

// Test cases from LeetCode

test "example 1" {
  let inorder = [9,3,15,20,7]
  let postorder = [9,15,7,20,3]
  let expected = Node {
    left: Node { left: Leaf {}, value: 9, right: Leaf {} },
    value: 3,
    right: Node {
      left: Node { left: Leaf {}, value: 15, right: Leaf {} },
      value: 20,
      right: Node { left: Leaf {}, value: 7, right: Leaf {} }
    }
  }
  expect isSameTree(buildTree(inorder, postorder), expected) == true
}

test "example 2" {
  let inorder = [-1]
  let postorder = [-1]
  let expected = Node { left: Leaf {}, value: -1, right: Leaf {} }
  expect isSameTree(buildTree(inorder, postorder), expected) == true
}

test "empty" {
  let result = buildTree([], [])
  expect match result {
    Leaf => true
    _ => false
  }
}



/*
Common Mochi language errors and how to fix them:
1. Using '=' instead of '=='. Example:
   if len(inorder) = 0 { } // ❌ assignment
   if len(inorder) == 0 { } // ✅ comparison
2. Forgetting to mark variables mutable with 'var'.
   idx = idx + 1 // ❌ when 'idx' is a 'let'
   var idx = 0    // ✅ declare as 'var' for mutation
3. Comparing complex data types using '=='.
   result == Leaf // ❌ type error
   match result { Leaf => true, _ => false } // ✅ use pattern matching
4. Slicing beyond list bounds which causes runtime errors.
   list[0:len(list)+1] // ❌ out of bounds
   list[0:len(list)]   // ✅ safe slice
*/
