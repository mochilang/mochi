// Solution for LeetCode problem 229 - Majority Element II

fun majorityElement(nums: list<int>): list<int> {
  let n = len(nums)
  if n == 0 {
    return []
  }
  var candidate1 = 0
  var candidate2 = 0
  var count1 = 0
  var count2 = 0
  for num in nums {
    if num == candidate1 {
      count1 = count1 + 1
    } else if num == candidate2 {
      count2 = count2 + 1
    } else if count1 == 0 {
      candidate1 = num
      count1 = 1
    } else if count2 == 0 {
      candidate2 = num
      count2 = 1
    } else {
      count1 = count1 - 1
      count2 = count2 - 1
    }
  }
  var res: list<int> = []
  var c1 = 0
  var c2 = 0
  for num in nums {
    if num == candidate1 {
      c1 = c1 + 1
    }
    if num == candidate2 {
      c2 = c2 + 1
    }
  }
  if c1 > n / 3 {
    res = res + [candidate1]
  }
  if candidate2 != candidate1 {
    if c2 > n / 3 {
      res = res + [candidate2]
    }
  }
  return res
}

// Test cases from the LeetCode problem statement

test "example 1" {
  expect majorityElement([3,2,3]) == [3]
}

test "example 2" {
  expect majorityElement([1]) == [1]
}

test "example 3" {
  // Order of result does not matter for [1,2], but our implementation returns
  // them in the order encountered
  expect majorityElement([1,2]) == [1,2]
}

/*
Common Mochi language errors and how to fix them:
1. Using '=' in an 'if' condition will assign instead of compare.
   if x = 1 { }    // ❌
   if x == 1 { }   // ✅
2. Forgetting 'var' for mutable bindings leads to errors when reassigning.
   let count = 0
   count = 1       // ❌ cannot modify
   var count = 0   // ✅
3. Mochi doesn't support '++' or '+=' operators. Use explicit addition.
   count += 1      // ❌
   count = count + 1 // ✅
*/
