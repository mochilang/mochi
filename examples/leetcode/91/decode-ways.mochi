fun numDecodings(s: string): int {
  let n = len(s)
  if n == 0 {
    return 0
  }

  // mapping of digits to numeric values
  let digits = {
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  }

  // dp[i] stores the number of ways to decode the prefix of length i
  var dp: list<int> = []
  var i = 0
  while i <= n {
    dp = dp + [0]
    i = i + 1
  }

  dp[0] = 1
  if s[0] != "0" {
    dp[1] = 1
  }

  var idx = 2
  while idx <= n {
    // single digit
    let one = s[idx-1]
    if one != "0" {
      dp[idx] = dp[idx] + dp[idx-1]
    }

    // two digit value from s[idx-2:idx]
    let d1 = digits[s[idx-2]]
    let d2 = digits[s[idx-1]]
    let val = d1 * 10 + d2
    if val >= 10 && val <= 26 {
      dp[idx] = dp[idx] + dp[idx-2]
    }
    idx = idx + 1
  }

  return dp[n]
}

// Test cases from LeetCode

test "example 1" {
  expect numDecodings("12") == 2
}

test "example 2" {
  expect numDecodings("226") == 3
}

test "example 3" {
  expect numDecodings("06") == 0
}

// Additional tests

test "single zero" {
  expect numDecodings("0") == 0
}

test "2101" {
  expect numDecodings("2101") == 1
}

/*
Common Mochi language errors and how to fix them:
1. Reassigning a `let` binding results in an error. Use `var` for mutable values.
2. Writing `i++` to increment is invalid syntax. Use `i = i + 1` instead.
3. Accidentally using `=` instead of `==` in comparisons causes an assignment,
   not a check. Always use `==` within `if` or `while` conditions.
*/
