// Solution for LeetCode problem 366 - Find Leaves of Binary Tree
//
// Basic tree helpers without using union types or pattern matching.
fun Leaf(): map<string, any> {
  return {"__name": "Leaf"}
}

fun Node(left: map<string, any>, value: int, right: map<string, any>): map<string, any> {
  return {"__name": "Node", "left": left, "value": value, "right": right}
}

fun isLeaf(t: map<string, any>): bool {
  return t["__name"] == "Leaf"
}

fun left(t: map<string, any>): map<string, any> { return t["left"] }
fun right(t: map<string, any>): map<string, any> { return t["right"] }
fun value(t: map<string, any>): int { return t["value"] as int }

fun max(a: int, b: int): int {
  if a > b { return a } else { return b }
}

// Collect and remove leaves level by level
fun findLeaves(root: map<string, any>): list<list<int>> {
  var result: list<list<int>> = []

  fun dfs(node: map<string, any>): int {
    if isLeaf(node) { return -1 }
    let lh = dfs(left(node))
    let rh = dfs(right(node))
    let h = max(lh, rh) + 1
    while len(result) <= h {
      result = result + [[] as list<int>]
    }
    result[h] = result[h] + [value(node)]
    return h
  }

  if isLeaf(root) { return [] as list<list<int>> }
  dfs(root)
  return result
}

// Example tree: [1,2,3,4,5]
let example1 = Node(
  Node(Node(Leaf(), 4, Leaf()), 2, Node(Leaf(), 5, Leaf())),
  1,
  Node(Leaf(), 3, Leaf())
)

// Tests based on LeetCode examples

test "example" {
  expect findLeaves(example1) == [[4,5,3],[2],[1]]
}

test "single node" {
  expect findLeaves(Node(Leaf(), 1, Leaf())) == [[1]]
}

/*
Common Mochi language errors and how to fix them:
1. Reassigning a value declared with `let`:
     let x = 0
     x = 1            // ❌ immutable binding
   Use `var x = 0` when mutation is needed.
2. Using '=' instead of '==' when comparing values:
     if h = 0 { }     // ❌ assignment
     if h == 0 { }    // ✅ comparison
3. Forgetting to call Leaf() for empty children:
     Node(Leaf, 1, Leaf) // ❌ not a function call
     Node(Leaf(), 1, Leaf()) // ✅ correct
*/
