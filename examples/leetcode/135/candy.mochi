// Solution for LeetCode problem 135 - Candy

fun candy(ratings: list<int>): int {
  let n = len(ratings)
  if n == 0 {
    return 0
  }
  // start everyone with one candy
  var candies: list<int> = []
  var i = 0
  while i < n {
    candies = candies + [1]
    i = i + 1
  }

  // forward pass
  i = 1
  while i < n {
    if ratings[i] > ratings[i-1] {
      candies[i] = candies[i-1] + 1
    }
    i = i + 1
  }

  // backward pass
  var j = n - 2
  while j >= 0 {
    if ratings[j] > ratings[j+1] && candies[j] <= candies[j+1] {
      candies[j] = candies[j+1] + 1
    }
    j = j - 1
  }

  var total = 0
  for c in candies {
    total = total + c
  }
  return total
}

// Test cases from LeetCode

test "example 1" {
  expect candy([1,0,2]) == 5
}

test "example 2" {
  expect candy([1,2,2]) == 4
}

test "all equal" {
  expect candy([1,1,1]) == 3
}

test "descending" {
  expect candy([5,4,3,2,1]) == 15
}

/*
Common Mochi language errors and how to fix them:
1. Writing Python style loops like `for i in range(n)` causes a parse error.
   Use `for i in 0..n` or a `while` loop instead.
2. Forgetting to declare mutable variables with `var` when assigning:
   let candies = []
   candies = candies + [1]  // ❌ cannot reassign a let binding
   // Fix: use `var candies = []` when the value changes.
3. Mixing assignment `=` with comparison `==` in conditions:
   if ratings[i] = ratings[i-1] { }  // ❌ assignment, not comparison
   // Fix: use `==` when comparing values.
*/
