// LeetCode Problem 265: Paint House II
// Dynamic programming solution.
//
// Common Mochi language mistakes and fixes:
// 1. Mixing '=' assignment with '==' comparison. Use '==' inside 'if'.
// 2. Declaring variables with 'let' when they need to change. Use 'var' for mutable values.
// 3. Forgetting to update loop counters which can create infinite loops.
// 4. Trying Python-style negative indices like list[-1]; use len(list)-1 instead.

fun minCostII(costs: list<list<int>>): int {
  let n = len(costs)
  if n == 0 {
    return 0
  }
  let k = len(costs[0])

  var prevMin = 0
  var prevSecond = 0
  var prevColor = -1

  var i = 0
  while i < n {
    var currMin = 2147483647
    var currSecond = 2147483647
    var currColor = -1

    var j = 0
    while j < k {
      var cost = costs[i][j]
      if j == prevColor {
        cost = cost + prevSecond
      } else {
        cost = cost + prevMin
      }
      if cost < currMin {
        currSecond = currMin
        currMin = cost
        currColor = j
      } else if cost < currSecond {
        currSecond = cost
      }
      j = j + 1
    }

    prevMin = currMin
    prevSecond = currSecond
    prevColor = currColor
    i = i + 1
  }
  return prevMin
}

// Test cases from LeetCode

test "example 1" {
  expect minCostII([[1,5,3],[2,9,4]]) == 5
}

test "example 2" {
  expect minCostII([[1,3],[2,4]]) == 5
}

test "single house" {
  expect minCostII([[8,6,5]]) == 5
}
