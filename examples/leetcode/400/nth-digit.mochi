// Solution for LeetCode problem 400 - Nth Digit
// Find the nth digit in the sequence "123456789101112..." without using union
// types or match statements.

fun findNthDigit(n: int): int {
  var remaining = n
  var digits = 1
  var count = 9
  var start = 1

  // Determine how many digits the target number has
  while remaining > digits * count {
    remaining = remaining - digits * count
    digits = digits + 1
    count = count * 10
    start = start * 10
  }

  let num = start + (remaining - 1) / digits
  let index = (remaining - 1) % digits
  let s = str(num)
  let values = {
    "0": 0, "1": 1, "2": 2, "3": 3, "4": 4,
    "5": 5, "6": 6, "7": 7, "8": 8, "9": 9,
  }
  let ch = s[index]
  return values[ch]
}

// Test cases based on the LeetCode examples

test "example 1" {
  expect findNthDigit(3) == 3
}

test "example 2" {
  expect findNthDigit(11) == 0
}

test "example 3" {
  expect findNthDigit(12) == 1
}

// Additional edge cases

test "end of two digits" {
  expect findNthDigit(189) == 9
}

test "start of three digits" {
  expect findNthDigit(190) == 1
}

test "middle of three digits" {
  expect findNthDigit(191) == 0
}

test "third of three digits" {
  expect findNthDigit(192) == 0
}

/*
Common Mochi language errors and how to fix them:
1. Forgetting to update a variable when subtracting:
   remaining - digits * count       // ❌ doesn't change `remaining`
   remaining = remaining - digits * count  // ✅ assign the result back
2. Using '=' instead of '==' in conditions:
   while remaining = digits { ... }        // ❌ assignment
   while remaining == digits { ... }       // ✅ comparison
3. Reassigning an immutable binding:
   let start = 1
   start = start * 10                      // ❌ cannot modify `let`
   var start = 1                           // ✅ declare with `var` if it needs to change
*/
