fun numIslands(grid: list<list<string>>): int {
  let rows = len(grid)
  if rows == 0 {
    return 0
  }
  let cols = len(grid[0])

  // track visited cells
  var visited: list<list<bool>> = []
  var r = 0
  while r < rows {
    var row: list<bool> = []
    var c = 0
    while c < cols {
      row = row + [false]
      c = c + 1
    }
    visited = visited + [row]
    r = r + 1
  }

  fun dfs(i: int, j: int): int {
    if i < 0 || i >= rows || j < 0 || j >= cols {
      return 0
    }
    if visited[i][j] {
      return 0
    }
    if grid[i][j] != "1" {
      return 0
    }
    visited[i][j] = true
    dfs(i+1, j)
    dfs(i-1, j)
    dfs(i, j+1)
    dfs(i, j-1)
    return 0
  }

  var count = 0
  r = 0
  while r < rows {
    var c = 0
      while c < cols {
        if grid[r][c] == "1" {
          if !(visited[r][c]) {
            dfs(r, c)
            count = count + 1
          }
        }
        c = c + 1
      }
    r = r + 1
  }
  return count
}

// Test cases from LeetCode
let grid1: list<list<string>> = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"],
]

let grid2: list<list<string>> = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"],
]

test "example 1" {
  expect numIslands(grid1) == 1
}

test "example 2" {
  expect numIslands(grid2) == 3
}

// Additional tests

test "empty grid" {
  expect numIslands([]) == 0
}

test "all water" {
  expect numIslands([["0","0"],["0","0"]]) == 0
}

test "single island" {
  expect numIslands([["1"]]) == 1
}

/*
Common Mochi language errors and how to fix them:
1. Using '=' instead of '==' for comparisons.
   if grid[i][j] = "1" { }  // ❌ assignment
   if grid[i][j] == "1" { } // ✅ comparison
2. Reassigning a value defined with 'let'.
   let rows = 0
   rows = 1              // ❌ immutable; use 'var' when mutation is needed.
3. Creating an empty list without a type.
   var visited = []      // ❌ type cannot be inferred.
   var visited: list<list<bool>> = [] // ✅ specify the element type.
4. Forgetting loop bounds. '0..n' iterates while index < n.
   for i in 0..n { }     // ✅ runs n times (0..n-1)
*/
