// LeetCode Problem 47: Permutations II
// This file demonstrates a correct solution in Mochi.
//
// Common mistakes when writing Mochi code:
// 1. Missing return type on a function.
//    For example:
//    fun bad(nums: list<int>) { return [] }
//    // ❌ Error: function result type missing. Fix by specifying
//    // fun bad(nums: list<int>): list<list<int>> { ... }
// 2. Attempting to reassign an immutable `let` binding.
//    let res = []
//    res = res + [1]
//    // ❌ Error: cannot assign to immutable binding. Use `var res` instead.
// 3. Using 1-based indexing. Lists are zero-indexed, so nums[1] is the second element.
//    Accessing nums[len(nums)] causes an out-of-range error.

fun permuteUnique(nums: list<int>): list<list<int>> {
  // Sort to handle duplicates
  let arr = from x in nums sort by x select x
  let n = len(arr)
  var result: list<list<int>> = []

  var used: map<int, bool> = {}

  fun backtrack(path: list<int>) {
    if len(path) == n {
      result = result + [path]
    } else {
      var i = 0
      while i < n {
        var currentUsed = false
        if i in used {
          currentUsed = used[i]
        }
        if currentUsed {
          i = i + 1
          continue
        }
        if i > 0 && arr[i] == arr[i-1] {
          var prevUsed = false
          if i-1 in used {
            prevUsed = used[i-1]
          }
          if !prevUsed {
            i = i + 1
            continue
          }
        }
        used[i] = true
        backtrack(path + [arr[i]])
        used[i] = false
        i = i + 1
      }
    }
  }

  backtrack([])
  return result
}

// Example tests from LeetCode

test "example 1" {
  expect permuteUnique([1,1,2]) == [[1,1,2],[1,2,1],[2,1,1]]
}

test "example 2" {
  expect permuteUnique([1,2,3]) == [
    [1,2,3],[1,3,2],[2,1,3],
    [2,3,1],[3,1,2],[3,2,1]
  ]
}
