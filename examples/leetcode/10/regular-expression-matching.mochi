fun isMatch(s: string, p: string): bool {
  let m = len(s)
  let n = len(p)

  // dp[i][j] means s[i:] matches p[j:]
  var dp: list<list<bool>> = []
  var i = 0
  while i <= m {
    var row: list<bool> = []
    var j = 0
    while j <= n {
      row = row + [false]
      j = j + 1
    }
    dp = dp + [row]
    i = i + 1
  }

  dp[m][n] = true
  var i2 = m
  while i2 >= 0 {
    var j2 = n - 1
    while j2 >= 0 {
      var first = false
      if i2 < m {
        if (p[j2] == s[i2]) || (p[j2] == ".") {
          first = true
        }
      }
      if j2 + 1 < n && p[j2+1] == "*" {
        if dp[i2][j2+2] || (first && dp[i2+1][j2]) {
          dp[i2][j2] = true
        } else {
          dp[i2][j2] = false
        }
      } else {
        if first && dp[i2+1][j2+1] {
          dp[i2][j2] = true
        } else {
          dp[i2][j2] = false
        }
      }
      j2 = j2 - 1
    }
    i2 = i2 - 1
  }

  return dp[0][0]
}

// Test cases from LeetCode

test "example 1" {
  expect isMatch("aa", "a") == false
}

test "example 2" {
  expect isMatch("aa", "a*") == true
}

test "example 3" {
  expect isMatch("ab", ".*") == true
}

test "example 4" {
  expect isMatch("aab", "c*a*b") == true
}

test "example 5" {
  expect isMatch("mississippi", "mis*is*p*.") == false
}
