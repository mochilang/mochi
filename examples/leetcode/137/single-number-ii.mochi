fun singleNumber(nums: list<int>): int {
  var counts: map<int, int> = {}
  for n in nums {
    if n in counts {
      counts[n] = counts[n] + 1
    } else {
      counts[n] = 1
    }
  }
  for n in nums {
    if counts[n] == 1 {
      return n
    }
  }
  return 0
}

// Test cases from LeetCode

test "example 1" {
  expect singleNumber([2,2,3,2]) == 3
}

test "example 2" {
  expect singleNumber([0,1,0,1,0,1,99]) == 99
}

// Additional edge case

test "negative numbers" {
  expect singleNumber([-2,-2,1,-2]) == 1
}

/*
Common language errors and how to fix them:
1. Writing 'if count = 1' instead of 'if count == 1' when checking equality.
2. Forgetting to declare a mutable variable with 'var' when updating counts.
3. Attempting to access counts[n] before checking membership using 'in'.
*/
