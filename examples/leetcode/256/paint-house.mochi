fun min(a: int, b: int): int { if a < b { return a } return b }

fun minCost(costs: list<list<int>>): int {
  let n = len(costs)
  if n == 0 {
    return 0
  }

  var dpR = costs[0][0]
  var dpG = costs[0][1]
  var dpB = costs[0][2]

  var i = 1
  while i < n {
    let r = costs[i][0] + min(dpG, dpB)
    let g = costs[i][1] + min(dpR, dpB)
    let b = costs[i][2] + min(dpR, dpG)
    dpR = r
    dpG = g
    dpB = b
    i = i + 1
  }

  return min(dpR, min(dpG, dpB))
}

// Test cases from LeetCode

test "example 1" {
  expect minCost([[17,2,17],[16,16,5],[14,3,19]]) == 10
}

test "example 2" {
  expect minCost([[7,6,2]]) == 2
}

/*
Common Mochi language errors and how to fix them:
1. Using '=' for comparison instead of '=='.
   if n = 0 { }  // ❌ assignment, not comparison
   if n == 0 { } // ✅ correct
2. Forgetting 'var' when a variable is reassigned.
   let cost = 0
   cost = 5  // ❌ cannot assign to immutable binding
   var cost = 0
   cost = 5  // ✅ allowed
3. Indexing a list outside its bounds due to incorrect loop conditions.
   while i <= len(costs) { ... } // ❌ last index out of range
   while i < len(costs) { ... }  // ✅ correct
*/
