// Solution for LeetCode problem 170 - Two Sum III: Data structure design
//
// The structure maintains a map from number to its count. The `add` function
// updates the counts and `find` checks if any two numbers sum to a target.
//
// Common Mochi language errors and how to fix them:
// 1. Reassigning a value declared with `let`. Use `var` for mutable variables.
//    let m = {} as map<int,int>
//    m[1] = 2           // ❌ cannot assign, `m` is immutable
//    var m2 = {} as map<int,int>  // ✅ mutable map
// 2. Forgetting to check if a key exists in a map before reading it.
//    let x = counts[k]            // ❌ may fail if k not in counts
//    var c = 0
//    if k in counts { c = counts[k] }  // ✅ safe lookup
// 3. Using '=' instead of '==' when comparing values.
//    if a = b { }               // ❌ assignment
//    if a == b { }              // ✅ comparison

// Data structure storing counts of numbers
 type TwoSum {
  counts: map<int, int>
 }

fun newTwoSum(): TwoSum {
  return TwoSum { counts: {} as map<int,int> }
}

fun add(ts: TwoSum, number: int): TwoSum {
  var counts = ts.counts
  var current = 0
  if number in counts {
    current = counts[number]
  }
  counts[number] = current + 1
  return TwoSum { counts: counts }
}

fun find(ts: TwoSum, value: int): bool {
  for key in ts.counts {
    let count = ts.counts[key]
    let complement = value - key
    if complement in ts.counts {
      let other = ts.counts[complement]
      if key != complement {
        return true
      } else {
        if other > 1 {
          return true
        }
      }
    }
  }
  return false
}

// Basic tests from LeetCode examples

test "example" {
  var ts = newTwoSum()
  ts = add(ts, 1)
  ts = add(ts, 3)
  ts = add(ts, 5)
  expect find(ts, 4) == true
  expect find(ts, 7) == false
}

// Additional edge cases

test "duplicate numbers" {
  var ts = newTwoSum()
  ts = add(ts, 2)
  ts = add(ts, 2)
  expect find(ts, 4) == true
  expect find(ts, 3) == false
}
