fun subsets(nums: list<int>): list<list<int>> {
  var result: list<list<int>> = [[]]
  for num in nums {
    var newSets: list<list<int>> = []
    var i = 0
    while i < len(result) {
      let subset = result[i]
      newSets = newSets + [subset + [num]]
      i = i + 1
    }
    var j = 0
    while j < len(newSets) {
      result = result + [newSets[j]]
      j = j + 1
    }
  }
  return result
}

// Test cases from LeetCode

test "example 1" {
  expect subsets([1,2,3]) == [
    [], [1], [2], [1,2], [3], [1,3], [2,3], [1,2,3]
  ]
}

test "example 2" {
  expect subsets([0]) == [[], [0]]
}

/*
Common Mochi language errors and how to fix them:
1. Using '=' instead of '==' for comparison:
     if len(nums) = 0 { ... }    // ❌ assignment, not comparison
   Use '==' to compare values.
2. Reassigning an immutable binding created with 'let':
     let res = []
     res = res + [x]             // ❌ cannot modify 'let'
   Declare with 'var' when mutation is needed.
3. Attempting Python-style 'append' method on lists:
     result.append([num])        // ❌ method does not exist
   Use list concatenation 'result = result + [value]'.
*/
