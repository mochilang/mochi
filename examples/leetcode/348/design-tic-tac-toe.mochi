// Solution for LeetCode problem 348 - Design Tic-Tac-Toe
//
// This implementation maintains row and column counters along with
// diagonal counters. It avoids union types and pattern matching by
// using simple integers and lists.

type TicTacToe {
  n: int
  rows: list<int>
  cols: list<int>
  diag: int
  anti: int
}

fun newGame(n: int): TicTacToe {
  var rs: list<int> = []
  var cs: list<int> = []
  for i in 0..n {
    rs = rs + [0]
    cs = cs + [0]
  }
  return TicTacToe { n: n, rows: rs, cols: cs, diag: 0, anti: 0 }
}

type MoveResult {
  board: TicTacToe
  winner: int
}

fun setAt(xs: list<int>, idx: int, val: int): list<int> {
  return xs[0:idx] + [val] + xs[idx+1:len(xs)]
}

fun move(game: TicTacToe, row: int, col: int, player: int): MoveResult {
  var add = 0
  if player == 1 {
    add = 1
  } else {
    add = -1
  }

  var r = game.rows[row] + add
  var c = game.cols[col] + add
  var d = game.diag
  var a = game.anti

  if row == col {
    d = d + add
  }
  if row + col == game.n - 1 {
    a = a + add
  }

  var newRows = setAt(game.rows, row, r)
  var newCols = setAt(game.cols, col, c)
  let newBoard = TicTacToe { n: game.n, rows: newRows, cols: newCols, diag: d, anti: a }
  let target = game.n
  if r == target || r == (-target) || c == target || c == (-target) || d == target || d == (-target) || a == target || a == (-target) {
    return MoveResult { board: newBoard, winner: player }
  }
  return MoveResult { board: newBoard, winner: 0 }
}

// Test cases based on the LeetCode examples

test "example" {
  var g = newGame(3)
  let m1 = move(g, 0, 0, 1)
  g = m1.board
  expect m1.winner == 0

  let m2 = move(g, 0, 2, 2)
  g = m2.board
  expect m2.winner == 0

  let m3 = move(g, 2, 2, 1)
  g = m3.board
  expect m3.winner == 0

  let m4 = move(g, 1, 1, 2)
  g = m4.board
  expect m4.winner == 0

  let m5 = move(g, 2, 0, 1)
  g = m5.board
  expect m5.winner == 0

  let m6 = move(g, 1, 0, 2)
  g = m6.board
  expect m6.winner == 0

  let m7 = move(g, 2, 1, 1)
  g = m7.board
  expect m7.winner == 1
}

// Additional edge cases

test "row win" {
  var g = newGame(3)
  let r1 = move(g, 0, 0, 2)
  g = r1.board
  let r2 = move(g, 0, 1, 2)
  g = r2.board
  let res = move(g, 0, 2, 2)
  g = res.board
  expect res.winner == 2
}

test "column win" {
  var g = newGame(3)
  let r1 = move(g, 0, 1, 1)
  g = r1.board
  let r2 = move(g, 1, 1, 1)
  g = r2.board
  let res = move(g, 2, 1, 1)
  g = res.board
  expect res.winner == 1
}

test "diagonal win" {
  var g = newGame(3)
  let r1 = move(g, 0, 0, 1)
  g = r1.board
  let r2 = move(g, 1, 1, 1)
  g = r2.board
  let res = move(g, 2, 2, 1)
  g = res.board
  expect res.winner == 1
}

test "anti diagonal win" {
  var g = newGame(3)
  let r1 = move(g, 0, 2, 2)
  g = r1.board
  let r2 = move(g, 1, 1, 2)
  g = r2.board
  let res = move(g, 2, 0, 2)
  g = res.board
  expect res.winner == 2
}

/*
Common Mochi language errors and how to fix them:
1. Trying to change a list element directly:
     game.rows[row] = 1        // ‚ùå cannot assign into immutable list
   Use a helper like 'setAt' to build a new list.
2. Using '=' instead of '==' when checking for equality in tests or conditions.
3. Forgetting to initialize the row and column counters to zero for all positions,
   which leads to out of bounds errors when indexing.
*/
