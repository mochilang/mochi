fun maximumGap(nums: list<int>): int {
  let n = len(nums)
  if n < 2 {
    return 0
  }
  let sorted = from x in nums sort by x select x
  var maxGap = 0
  for i in 1..n {
    let gap = sorted[i] - sorted[i - 1]
    if gap > maxGap {
      maxGap = gap
    }
  }
  return maxGap
}

test "example 1" {
  expect maximumGap([3,6,9,1]) == 3
}

test "example 2" {
  expect maximumGap([10]) == 0
}

test "sorted input" {
  expect maximumGap([1,2,3,4]) == 1
}

test "duplicates" {
  expect maximumGap([1,1,1,1]) == 0
}

/*
Common Mochi language errors and how to fix them:
1. Using '=' instead of '==' for comparisons:
     if gap = maxGap { }        // ❌ assignment
     if gap == maxGap { }       // ✅ use '=='
2. Forgetting to declare a variable as mutable:
     let maxGap = 0
     maxGap = gap               // ❌ 'let' bindings are immutable
     var maxGap = 0             // ✅ use 'var' when the value changes
3. Negative indexing like in Python is not allowed:
     sorted[-1]                 // ❌ will cause an error
     sorted[len(sorted)-1]      // ✅ access the last element
4. Remember Mochi's range syntax for loops:
     for i in range(n) { }      // ❌ invalid
     for i in 0..n { }          // ✅ correct range usage
*/
