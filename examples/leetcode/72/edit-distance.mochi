// LeetCode #72: Edit Distance
// Below are some common Mochi language errors and how to fix them.

// Error 1: Missing ':' before the return type
// minDistance(w1: string, w2: string) int { }
// Fix:
fun minDistance(word1: string, word2: string): int {
  let m = len(word1)
  let n = len(word2)

  // Error 2: Using 'let' for a mutable matrix
  // let dp: list<list<int>> = []
  // Fix:
  var dp: list<list<int>> = []

  var i = 0
  while i <= m {
    var row: list<int> = []
    var j = 0
    while j <= n {
      row = row + [0]
      j = j + 1
    }
    dp = dp + [row]
    i = i + 1
  }

  i = 0
  while i <= m {
    dp[i][0] = i
    i = i + 1
  }

  var j = 0
  while j <= n {
    dp[0][j] = j
    j = j + 1
  }

  i = 1
  while i <= m {
    j = 1
    while j <= n {
      if word1[i-1] == word2[j-1] {
        dp[i][j] = dp[i-1][j-1]
      } else {
        let insert = dp[i][j-1] + 1
        let delete = dp[i-1][j] + 1
        let replace = dp[i-1][j-1] + 1
        var best = insert
        if delete < best {
          best = delete
        }
        if replace < best {
          best = replace
        }
        dp[i][j] = best
      }
      j = j + 1
    }
    i = i + 1
  }

  return dp[m][n]
}

// Test cases from the LeetCode problem statement

test "example 1" {
  expect minDistance("horse", "ros") == 3
}

test "example 2" {
  expect minDistance("intention", "execution") == 5
}

// Additional tests

test "identical strings" {
  expect minDistance("abc", "abc") == 0
}

test "empty second" {
  expect minDistance("abc", "") == 3
}

test "empty first" {
  expect minDistance("", "abc") == 3
}

/*
Common Mochi language errors and how to fix them:
1. Using '=' instead of '==' when comparing characters.
   if word1[i] = word2[j] { }    // ❌ wrong
   // Fix: if word1[i] == word2[j] { }
2. Reassigning a 'let' variable. Use 'var' for values that change.
3. Off-by-one mistakes when indexing strings. Remember indices start at 0 and
   the loop condition should be <= m or <= n when using dp tables of size m+1.
*/
