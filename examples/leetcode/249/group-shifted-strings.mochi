// Solution for LeetCode problem 249 - Group Shifted Strings
//
// Strings are shifted if each letter is moved the same number of
// steps forward in the alphabet, wrapping around from 'z' to 'a'.
// We group strings that share the same shifting pattern.

// Convert a single lowercase letter to a number 0-25
fun ord(ch: string): int {
  let letters = {
    "a": 0, "b": 1, "c": 2, "d": 3, "e": 4, "f": 5, "g": 6,
    "h": 7, "i": 8, "j": 9, "k": 10, "l": 11, "m": 12, "n": 13,
    "o": 14, "p": 15, "q": 16, "r": 17, "s": 18, "t": 19, "u": 20,
    "v": 21, "w": 22, "x": 23, "y": 24, "z": 25
  }
  if ch in letters {
    return letters[ch]
  }
  return 0
}

fun patternKey(s: string): string {
  if len(s) == 0 {
    return ""
  }
  var key = ""
  let base = ord(s[0])
  var i = 0
  while i < len(s) {
    let diff = (ord(s[i]) - base + 26) % 26
    key = key + str(diff) + ","
    i = i + 1
  }
  return key
}

fun groupStrings(strings: list<string>): list<list<string>> {
  var groups: map<string, list<string>> = {}
  for s in strings {
    let k = patternKey(s)
    var lst: list<string> = []
    if k in groups {
      lst = groups[k]
    }
    lst = lst + [s]
    groups[k] = lst
  }

  var result: list<list<string>> = []
  for k in groups {
    result = result + [groups[k]]
  }
  return result
}

// Test cases from LeetCode

test "example 1" {
  let input = ["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"]
  let res = groupStrings(input)
  // Each group should contain shifted variations
  expect len(res) == 4
}

// Additional tests

test "single" {
  expect groupStrings(["a"])[0][0] == "a"
}

test "empty list" {
  let res = groupStrings([])
  expect len(res) == 0
}

/*
Common Mochi language errors and how to fix them:
1. Using '=' instead of '==' when checking keys:
     if k = "" { ... }  // ❌ assignment
     if k == "" { ... } // ✅ comparison
2. Forgetting to declare a variable mutable with 'var':
     let lst = []
     lst = lst + [s]     // ❌ cannot assign to immutable binding
     var lst: list<string> = []
     lst = lst + [s]     // ✅ mutable variable
3. Missing type annotation for an empty map or list:
     var groups = {}                 // ❌ type unknown
     var groups: map<string,list<string>> = {} // ✅ specify types
*/
