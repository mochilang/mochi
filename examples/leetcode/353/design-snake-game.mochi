// Solution for LeetCode problem 353 - Design Snake Game
// No union types or pattern matching are used.

// Game state

type SnakeGame {
  width: int
  height: int
  food: list<list<int>>  // list of [row,col]
  index: int             // next food index
  body: list<list<int>>  // snake body positions from tail to head
  occupied: map<string,bool>
}

type MoveResult {
  game: SnakeGame
  score: int
}

fun newSnakeGame(width: int, height: int, food: list<list<int>>): SnakeGame {
  let start = [0,0]
  return SnakeGame {
    width: width,
    height: height,
    food: food,
    index: 0,
    body: [start],
    occupied: { str(start[0]) + "," + str(start[1]): true }
  }
}

fun move(game: SnakeGame, dir: string): MoveResult {
  let head = game.body[len(game.body)-1]
  var r = head[0]
  var c = head[1]
  if dir == "U" {
    r = r - 1
  } else if dir == "D" {
    r = r + 1
  } else if dir == "L" {
    c = c - 1
  } else if dir == "R" {
    c = c + 1
  } else {
    return MoveResult { game: game, score: -1 }
  }

  if r < 0 || r >= game.height || c < 0 || c >= game.width {
    return MoveResult { game: game, score: -1 }
  }

  var newBody = game.body
  var newOcc = game.occupied
  var newIndex = game.index

  let eat = newIndex < len(game.food) &&
            game.food[newIndex][0] == r &&
            game.food[newIndex][1] == c
  if !eat {
    let tail = newBody[0]
    let tk = str(tail[0]) + "," + str(tail[1])
    newBody = newBody[1:len(newBody)]
    newOcc[tk] = false
  } else {
    newIndex = newIndex + 1
  }

  let key = str(r) + "," + str(c)
  if key in newOcc {
    if newOcc[key] == true {
      return MoveResult { game: game, score: -1 }
    }
  }

  newBody = newBody + [[r,c]]
  newOcc[key] = true

  let newGame = SnakeGame {
    width: game.width,
    height: game.height,
    food: game.food,
    index: newIndex,
    body: newBody,
    occupied: newOcc
  }
  return MoveResult { game: newGame, score: newIndex }
}

// Test cases based on the LeetCode example

test "example" {
  var g = newSnakeGame(3, 2, [[1,2], [0,1]])
  let r1 = move(g, "R")
  g = r1.game
  expect r1.score == 0
  let r2 = move(g, "D")
  g = r2.game
  expect r2.score == 0
  let r3 = move(g, "R")
  g = r3.game
  expect r3.score == 1
  let r4 = move(g, "U")
  g = r4.game
  expect r4.score == 1
  let r5 = move(g, "L")
  g = r5.game
  expect r5.score == 2
  let r6 = move(g, "U")
  g = r6.game
  expect r6.score == (0 - 1)
}

/*
Common Mochi language errors and how to fix them:
1. Forgetting to declare a variable mutable when it needs reassignment:
     let g = newSnakeGame(3,2,[])  // immutable
     g = newSnakeGame(4,4,[])      // ❌ cannot reassign
   Use 'var g = ...' if mutation is required.
2. Trying to use list methods like body.push([1,1]):
     game.body.push([1,1])         // ❌ lists have no methods
   Build a new list instead:
     game.body = game.body + [[1,1]]
3. Using '=' instead of '==' in comparisons:
     if score = -1 { }             // ❌ assignment, not comparison
   Replace with '==' to compare values.
*/
