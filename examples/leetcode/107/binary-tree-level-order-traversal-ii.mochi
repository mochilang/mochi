// Solution for LeetCode problem 107 - Binary Tree Level Order Traversal II

// Define a binary tree where Leaf denotes an empty node
// and Node contains left/right subtrees and a value

type Tree =
  Leaf
  | Node(left: Tree, value: int, right: Tree)

fun levelOrderBottom(root: Tree): list<list<int>> {
  return match root {
    Leaf => []
    Node(_, _, _) => {
      var queue: list<Tree> = [root]
      var result: list<list<int>> = []
      while len(queue) > 0 {
        var level: list<int> = []
        var next: list<Tree> = []
        for node in queue {
          match node {
            Leaf => {}
            Node(l, v, r) => {
              level = level + [v]
              match l {
                Leaf => {}
                _ => { next = next + [l] }
              }
              match r {
                Leaf => {}
                _ => { next = next + [r] }
              }
            }
          }
        }
        result = [level] + result
        queue = next
      }
      result
    }
  }
}

// Example tree: [3,9,20,null,null,15,7]
let example1 = Node {
  left: Node { left: Leaf {}, value: 9, right: Leaf {} },
  value: 3,
  right: Node {
    left: Node { left: Leaf {}, value: 15, right: Leaf {} },
    value: 20,
    right: Node { left: Leaf {}, value: 7, right: Leaf {} }
  }
}

test "example 1" {
  expect levelOrderBottom(example1) == [[15,7],[9,20],[3]]
}

test "single node" {
  expect levelOrderBottom(Node { left: Leaf {}, value: 1, right: Leaf {} }) == [[1]]
}

test "empty" {
  expect levelOrderBottom(Leaf {}) == []
}

/*
Common Mochi language errors and how to fix them:
1. Using '=' instead of '==' in comparisons.
   if len(queue) = 0 { }   // ❌ assignment
   if len(queue) == 0 { }  // ✅ comparison
2. Forgetting to declare mutable variables with 'var'.
   let queue = []
   queue = [root]           // ❌ cannot assign to 'let'
   var queue: list<Tree> = [root] // ✅ mutable
3. Missing type for an empty list.
   var level = []           // ❌ type cannot be inferred
   var level: list<int> = [] // ✅ specify element type
*/
