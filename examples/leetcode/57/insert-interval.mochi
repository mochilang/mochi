// LeetCode Problem 57: Insert Interval
// This Mochi solution inserts a new interval into a list of non-overlapping
// intervals and merges any overlaps.
//
// Common Mochi language mistakes and how to fix them:
// 1. Using parentheses for indexing:
//      start = newInterval(0)     // ❌ invalid syntax
//    Use square brackets instead:
//      start = newInterval[0]     // ✅
// 2. Forgetting to declare variables as mutable with `var` when they are
//    reassigned later.
// 3. Trying to call an `append` method on a list. Lists use `+` to concatenate
//    rather than a method call.

fun insert(intervals: list<list<int>>, newInterval: list<int>): list<list<int>> {
  var result: list<list<int>> = []
  var inserted = false
  var start = newInterval[0]
  var end = newInterval[1]

  for interval in intervals {
    let currStart = interval[0]
    let currEnd = interval[1]
    if currEnd < start {
      // Current interval ends before the new one begins
      result = result + [interval]
    } else if currStart > end {
      // Current interval starts after the new one ends
      if !inserted {
        result = result + [[start, end]]
        inserted = true
      }
      result = result + [interval]
    } else {
      // Overlapping intervals, merge them
      if currStart < start {
        start = currStart
      }
      if currEnd > end {
        end = currEnd
      }
    }
  }

  if !inserted {
    result = result + [[start, end]]
  }

  return result
}

// Example tests from LeetCode

test "example 1" {
  expect insert([[1,3],[6,9]], [2,5]) == [[1,5],[6,9]]
}

test "example 2" {
  expect insert([[1,2],[3,5],[6,7],[8,10],[12,16]], [4,8]) == [[1,2],[3,10],[12,16]]
}

test "empty list" {
  expect insert([], [5,7]) == [[5,7]]
}

test "contained interval" {
  expect insert([[1,5]], [2,3]) == [[1,5]]
}
