fun getRow(rowIndex: int): list<int> {
  var row: list<int> = [1]
  var i = 0
  while i < rowIndex {
    var next: list<int> = [1]
    var j = 1
    while j < len(row) {
      next = next + [row[j-1] + row[j]]
      j = j + 1
    }
    next = next + [1]
    row = next
    i = i + 1
  }
  return row
}

// Test cases from LeetCode

test "example 1" {
  expect getRow(3) == [1,3,3,1]
}

test "example 2" {
  expect getRow(0) == [1]
}

test "example 3" {
  expect getRow(1) == [1,1]
}

// Additional tests

test "row 2" {
  expect getRow(2) == [1,2,1]
}

test "row 4" {
  expect getRow(4) == [1,4,6,4,1]
}

/*
Common Mochi language errors and how to fix them:
1. Using '=' instead of '==' in comparisons.
   if rowIndex = 0 { ... }   // ❌ assignment
   if rowIndex == 0 { ... }  // ✅ comparison
2. Forgetting 'var' for mutable variables.
   let row = [1]
   row = []                 // ❌ cannot assign to immutable binding
   var row: list<int> = [1] // ✅ mutable
3. Missing element type for an empty list.
   var row = []             // ❌ type cannot be inferred
   var row: list<int> = []  // ✅ specify element type
*/
