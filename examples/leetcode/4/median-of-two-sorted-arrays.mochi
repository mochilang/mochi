fun findMedianSortedArrays(nums1: list<int>, nums2: list<int>): float {
  var merged: list<int> = []
  var i = 0
  var j = 0
  while i < len(nums1) || j < len(nums2) {
    if j >= len(nums2) {
      merged = merged + [nums1[i]]
      i = i + 1
    } else if i >= len(nums1) {
      merged = merged + [nums2[j]]
      j = j + 1
    } else if nums1[i] <= nums2[j] {
      merged = merged + [nums1[i]]
      i = i + 1
    } else {
      merged = merged + [nums2[j]]
      j = j + 1
    }
  }
  let total = len(merged)
  if total % 2 == 1 {
    return merged[total / 2] as float
  }
  let mid1 = merged[total / 2 - 1]
  let mid2 = merged[total / 2]
  return (mid1 + mid2) as float / 2.0
}

test "example 1" {
  expect findMedianSortedArrays([1,3], [2]) == 2.0
}

test "example 2" {
  expect findMedianSortedArrays([1,2], [3,4]) == 2.5
}

// additional tests

test "empty first" {
  expect findMedianSortedArrays([] as list<int>, [1]) == 1.0
}

test "empty second" {
  expect findMedianSortedArrays([2], [] as list<int>) == 2.0
}
