// Solution for LeetCode problem 306 - Additive Number

fun addStrings(a: string, b: string): string {
  let digits = {
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  }
  var i = len(a)
  var j = len(b)
  var carry = 0
  var out = ""
  while i > 0 || j > 0 || carry > 0 {
    var x = 0
    if i > 0 {
      i = i - 1
      x = digits[a[i]]
    }
    var y = 0
    if j > 0 {
      j = j - 1
      y = digits[b[j]]
    }
    let sum = x + y + carry
    carry = sum / 10
    let digit = sum % 10
    out = str(digit) + out
  }
  return out
}

fun isAdditiveNumber(num: string): bool {
  let n = len(num)
  var i = 1
  while i <= n - 2 {
    if num[0] == "0" && i > 1 {
      break
    }
    var j = i + 1
    while j <= n - 1 {
      if num[i] == "0" && j - i > 1 {
        break
      }
      var first = num[0:i]
      var second = num[i:j]
      var k = j
      while k < n {
        let third = addStrings(first, second)
        let lenThird = len(third)
        if k + lenThird > n {
          break
        }
        if num[k:k+lenThird] != third {
          break
        }
        first = second
        second = third
        k = k + lenThird
      }
      if k == n {
        return true
      }
      j = j + 1
    }
    i = i + 1
  }
  return false
}

// Test cases from LeetCode

test "example 1" {
  expect isAdditiveNumber("112358") == true
}

test "example 2" {
  expect isAdditiveNumber("199100199") == true
}

// Additional edge cases

test "leading zero" {
  expect isAdditiveNumber("1023") == false
}

test "all zeros" {
  expect isAdditiveNumber("000") == true
}

test "short sequence" {
  expect isAdditiveNumber("101") == true
}

/*
Common Mochi language errors and how to fix them:
1. Using '=' in a condition instead of '==' leads to a compile error.
   if x = 1 { ... }      // ❌ assignment
   if x == 1 { ... }     // ✅ comparison
2. Forgetting 'var' for a mutable variable results in an error.
   let i = 0
   i = i + 1             // ❌ cannot modify 'let'
   var i = 0             // ✅ declare with 'var' when mutation is needed
3. Attempting Python-style iteration over characters.
   for ch in num { ... } // ❌ invalid
   for idx in 0..len(num) { let ch = num[idx] ... } // ✅ use indices
*/
