fun numDistinct(s: string, t: string): int {
  let m = len(s)
  let n = len(t)

  var dp: list<int> = []
  var i = 0
  while i <= n {
    dp = dp + [0]
    i = i + 1
  }

  dp[0] = 1

  var si = 0
  while si < m {
    var j = n - 1
    while j >= 0 {
      if s[si] == t[j] {
        dp[j + 1] = dp[j + 1] + dp[j]
      }
      j = j - 1
    }
    si = si + 1
  }

  return dp[n]
}

// Test cases from LeetCode

test "example 1" {
  expect numDistinct("rabbbit", "rabbit") == 3
}

test "example 2" {
  expect numDistinct("babgbag", "bag") == 5
}

// Additional tests

test "empty target" {
  expect numDistinct("abc", "") == 1
}

test "source shorter" {
  expect numDistinct("a", "aa") == 0
}

/*
Common Mochi language errors and how to fix them:
1. Using '=' instead of '==' to compare characters:
     if s[i] = t[j] { ... }   // ‚ùå assignment
   Fix: use '==' for equality.
2. Declaring 'dp' with 'let' makes it immutable and causes errors when updating.
   Use 'var dp: list<int> = []' so it can be modified.
3. Forgetting that indices start at 0 can lead to out-of-bounds access.
   Ensure loops run while j >= 0 and dp has length n + 1.
4. Writing C-style increments like 'i++' or 'j--'.
   Use 'i = i + 1' and 'j = j - 1' in Mochi.
*/
