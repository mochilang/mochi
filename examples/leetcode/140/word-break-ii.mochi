fun wordBreak(s: string, wordDict: list<string>): list<string> {
  var dict: map<string, bool> = {}
  for w in wordDict {
    dict[w] = true
  }
  let n = len(s)
  var memo: map<int, list<string>> = {}

  fun dfs(start: int): list<string> {
    if start in memo {
      return memo[start]
    }
    if start == n {
      return [""]
    }
    var res: list<string> = []
    var end = start + 1
    while end <= n {
      let word = s[start:end]
      var exists = false
      if word in dict {
        exists = dict[word]
      }
      if exists {
        let subs = dfs(end)
        for sub in subs {
          if len(sub) == 0 {
            res = res + [word]
          } else {
            res = res + [word + " " + sub]
          }
        }
      }
      end = end + 1
    }
    memo[start] = res
    return res
  }

  let ans = dfs(0)
  let sorted = from x in ans sort by x select x
  return sorted
}

// Test cases based on LeetCode examples

let dict1 = ["cat","cats","and","sand","dog"]

test "example 1" {
  expect wordBreak("catsanddog", dict1) == ["cat sand dog","cats and dog"]
}

let dict2 = ["apple","pen","applepen","pine","pineapple"]

test "example 2" {
  expect wordBreak("pineapplepenapple", dict2) == [
    "pine apple pen apple",
    "pine applepen apple",
    "pineapple pen apple"
  ]
}

test "example 3" {
  expect wordBreak("catsandog", dict1) == []
}

/*
Common Mochi language errors and how to fix them:
1. Using '=' instead of '==' for comparisons:
     if word = target { ... }      // ❌ assignment
   Use '==' when comparing values.
2. Forgetting to declare mutable variables with 'var':
     let res: list<string> = []
     res = res + [w]               // ❌ cannot modify immutable binding
   Declare with 'var' when mutation is needed.
3. Omitting type annotation for an empty map or list:
     var memo = {}                 // ❌ type cannot be inferred
   Specify the types explicitly, e.g. 'var memo: map<int, list<string>> = {}'.
*/
