fun hammingWeight(n: int): int {
  var count = 0
  var num = n
  while num > 0 {
    if num % 2 == 1 {
      count = count + 1
    }
    num = num / 2
  }
  return count
}

// Test cases from the LeetCode problem statement

test "example 1" {
  expect hammingWeight(11) == 3
}

test "example 2" {
  expect hammingWeight(128) == 1
}

test "example 3" {
  expect hammingWeight(4294967293) == 31
}

// Additional edge cases

test "zero" {
  expect hammingWeight(0) == 0
}

test "all ones" {
  expect hammingWeight(4294967295) == 32
}

/*
Common Mochi language errors and how to fix them:
1. Reassigning a value bound with 'let':
     let num = n
     num = num / 2       // ‚ùå cannot modify immutable value
   Declare it with 'var num = n' when mutation is required.
2. Using '=' instead of '==' for comparisons:
     if num % 2 = 1 { ... }
   Use '==' to check equality:
     if num % 2 == 1 { ... }
3. Forgetting to update the loop variable leading to an infinite loop.
   Always divide 'num' each iteration.
4. Trying to pattern match or use union types for bit counting.
   Simple integer arithmetic and conditionals are enough.
*/
