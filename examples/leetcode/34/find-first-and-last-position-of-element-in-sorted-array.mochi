fun searchRange(nums: list<int>, target: int): list<int> {
  let n = len(nums)
  var left = 0
  var right = n - 1
  var start = -1
  var end = -1

  // Find the first occurrence
  left = 0
  right = n - 1
  while left <= right {
    let mid = (left + right) / 2
    if nums[mid] == target {
      start = mid
      right = mid - 1
    } else if nums[mid] < target {
      left = mid + 1
    } else {
      right = mid - 1
    }
  }

  if start == (-1) {
    return [-1, -1]
  }

  // Find the last occurrence
  left = start
  right = n - 1
  while left <= right {
    let mid = (left + right) / 2
    if nums[mid] == target {
      end = mid
      left = mid + 1
    } else if nums[mid] < target {
      left = mid + 1
    } else {
      right = mid - 1
    }
  }

  return [start, end]
}

// Test cases from LeetCode

test "example 1" {
  expect searchRange([5,7,7,8,8,10], 8) == [3, 4]
}

test "example 2" {
  expect searchRange([5,7,7,8,8,10], 6) == [-1, -1]
}

test "example 3" {
  expect searchRange([], 0) == [-1, -1]
}

// Additional edge cases

test "single element match" {
  expect searchRange([1], 1) == [0, 0]
}

test "single element missing" {
  expect searchRange([1], 0) == [-1, -1]
}
