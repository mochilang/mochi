fun uniquePathsWithObstacles(grid: list<list<int>>): int {
  let m = len(grid)
  if m == 0 {
    return 0
  }
  let n = len(grid[0])

  // initialize dp matrix with zeros
  var dp: list<list<int>> = []
  var i = 0
  while i < m {
    var row: list<int> = []
    var j = 0
    while j < n {
      row = row + [0]
      j = j + 1
    }
    dp = dp + [row]
    i = i + 1
  }

  if grid[0][0] == 1 {
    return 0
  }
  dp[0][0] = 1

  i = 0
  while i < m {
    var j = 0
    while j < n {
      if grid[i][j] == 1 {
        dp[i][j] = 0
      } else {
        if i > 0 {
          dp[i][j] = dp[i][j] + dp[i-1][j]
        }
        if j > 0 {
          dp[i][j] = dp[i][j] + dp[i][j-1]
        }
      }
      j = j + 1
    }
    i = i + 1
  }

  return dp[m-1][n-1]
}

// Test cases from LeetCode

test "example 1" {
  expect uniquePathsWithObstacles([[0,0,0],[0,1,0],[0,0,0]]) == 2
}

test "example 2" {
  expect uniquePathsWithObstacles([[0,1],[0,0]]) == 1
}

// Additional edge cases

test "obstacle at start" {
  expect uniquePathsWithObstacles([[1]]) == 0
}

test "single open cell" {
  expect uniquePathsWithObstacles([[0]]) == 1
}

/*
Common Mochi language mistakes and fixes:
1. Using '=' instead of '==' for comparison:
   if grid[0][0] = 1 { } // ERROR: '=' assigns; use '=='.
2. Reassigning a 'let' variable:
   let count = 0
   count = 1           // ERROR: cannot reassign immutable binding. Use 'var'.
3. Forgetting that ranges exclude the end value:
   for i in 0..n { ... } // loops while i < n, not <= n.
*/
