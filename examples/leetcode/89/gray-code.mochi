fun grayCode(n: int): list<int> {
  var result: list<int> = [0]
  var power = 1
  var i = 0
  while i < n {
    var j = len(result) - 1
    while j >= 0 {
      result = result + [result[j] + power]
      j = j - 1
    }
    power = power * 2
    i = i + 1
  }
  return result
}

// Test cases from LeetCode

test "example 1" {
  expect grayCode(2) == [0,1,3,2]
}

test "example 2" {
  expect grayCode(1) == [0,1]
}

test "zero bits" {
  expect grayCode(0) == [0]
}

test "three bits" {
  expect grayCode(3) == [0,1,3,2,6,7,5,4]
}

/*
Common Mochi language errors and how to fix them:
1. Using '=' instead of '==' for comparison:
     if n = 1 { ... }   // ❌ assignment
     if n == 1 { ... }  // ✅ equality check
2. Reassigning an immutable 'let' variable:
     let power = 1
     power = 2          // ❌ cannot modify
   Declare with 'var' when a value changes.
3. Forgetting to update loop variables in a while loop leading to infinite loops.
   Always decrement 'j' inside the reverse loop above.
*/
