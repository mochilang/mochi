// Solution for LeetCode problem 194 - Transpose File

// Given a matrix as a list of rows, return its transpose.
fun transpose(rows: list<list<int>>): list<list<int>> {
  if len(rows) == 0 {
    return [] as list<list<int>>
  }
  let row_count = len(rows)
  let col_count = len(rows[0])
  var result: list<list<int>> = []
  var c = 0
  while c < col_count {
    var new_row: list<int> = []
    var r = 0
    while r < row_count {
      new_row = new_row + [rows[r][c]]
      r = r + 1
    }
    result = result + [new_row]
    c = c + 1
  }
  return result
}

// Test cases

test "square matrix" {
  expect transpose([
    [1,2,3],
    [4,5,6],
    [7,8,9]
  ]) == [
    [1,4,7],
    [2,5,8],
    [3,6,9]
  ]
}

test "rectangular matrix" {
  expect transpose([
    [1,2],
    [3,4],
    [5,6]
  ]) == [
    [1,3,5],
    [2,4,6]
  ]
}

/*
Common Mochi language errors and how to fix them:
1. Using '=' instead of '==' when checking for zero:
   if len(rows) = 0 { }  // ❌ assignment
   if len(rows) == 0 { } // ✅ comparison
2. Omitting 'var' on mutable variables:
   new_row = []               // ❌ cannot reassign
   var new_row: list<int> = [] // ✅ declare as mutable
3. Leaving the type of an empty list unspecified:
   var result = []            // ❌ type unknown
   var result: list<list<int>> = [] // ✅ specify the element type
*/
