// LeetCode 236 - Lowest Common Ancestor of a Binary Tree
//
// This solution mirrors the approach used in other array-based tree examples
// under `examples/leetcode`. A tree is represented by parallel arrays of left
// and right child indexes along with the value for each node. A value of (-1)
// indicates the absence of a child.

fun lca(lefts: list<int>, rights: list<int>, root: int, p: int, q: int): int {
  if root == (-1) {
    return (-1)
  }
  if root == p || root == q {
    return root
  }
  let leftRes = lca(lefts, rights, lefts[root], p, q)
  let rightRes = lca(lefts, rights, rights[root], p, q)
  if leftRes != (-1) && rightRes != (-1) {
    return root
  }
  if leftRes != (-1) {
    return leftRes
  }
  return rightRes
}

// Example tree from the LeetCode problem statement
// [3,5,1,6,2,0,8,null,null,7,4]
let lefts  = [1,3,5,(-1),7,(-1),(-1),(-1),(-1)] as list<int>
let rights = [2,4,6,(-1),8,(-1),(-1),(-1),(-1)] as list<int>
let values = [3,5,1,6,2,0,8,7,4] as list<int>
let root = 0

// Basic test cases

test "p and q on different sides" {
  expect lca(lefts, rights, root, 1, 2) == 0
}

test "p is ancestor of q" {
  expect lca(lefts, rights, root, 1, 8) == 1
}

test "same node" {
  expect lca(lefts, rights, root, 1, 1) == 1
}

test "deep nodes" {
  expect lca(lefts, rights, root, 3, 5) == 0
}

test "siblings" {
  expect lca(lefts, rights, root, 7, 8) == 4
}

/*
Common Mochi language errors and how to fix them:
1. Writing 'if a = b' instead of 'if a == b'. '=' assigns while '==' compares.
2. Reassigning an immutable variable:
     let x = 0
     x = 1  // error[E004]
   Use 'var' when mutation is required.
3. Creating an empty list without a type:
     var xs = []          // type cannot be inferred
   Specify the element type, e.g. 'var xs: list<int> = []'.
4. Accessing an index without checking for (-1):
     values[lefts[i]]     // may fail if lefts[i] == (-1)
   Always verify the index before using it.
*/
