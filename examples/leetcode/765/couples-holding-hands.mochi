fun minSwapsCouples(row: list<int>): int {
  let n = len(row)
  var pos: map<int, int> = {}
  var i = 0
  while i < n {
    pos[row[i]] = i
    i = i + 1
  }
  var swaps = 0
  var j = 0
  while j < n {
    let first = row[j]
    var partner = 0
    if first % 2 == 0 {
      partner = first + 1
    } else {
      partner = first - 1
    }
    let second = row[j + 1]
    if second != partner {
      var partnerIndex = pos[partner]
      row[partnerIndex] = second
      pos[second] = partnerIndex
      row[j + 1] = partner
      pos[partner] = j + 1
      swaps = swaps + 1
    }
    j = j + 2
  }
  return swaps
}

// Test cases from LeetCode

test "example 1" {
  expect minSwapsCouples([0,2,1,3]) == 1
}

test "example 2" {
  expect minSwapsCouples([3,2,0,1]) == 0
}

// Additional edge case

test "scrambled" {
  expect minSwapsCouples([4,1,0,3,2,5]) == 2
}

/*
Common language errors and how to fix them:
1. Forgetting to declare a mutable variable with 'var':
   let swaps = 0
   swaps = swaps + 1   // error[E004]: cannot reassign immutable binding
   // Fix: use 'var swaps = 0' when the value changes.
2. Using '=' instead of '==' for comparison:
   if second = partner { ... }  // error[P000]: '=' is assignment
   // Fix: use '==' when comparing values.
3. Accessing an index without bounds checking:
   row[j+1] when j+1 == len(row)  // error[I003]: index out of bounds
   // Fix: ensure j+1 < len(row) before indexing or loop appropriately.
*/
