fun ladderLength(beginWord: string, endWord: string, wordList: list<string>): int {
  // Build a lookup map for fast membership tests
  var dict: map<string, bool> = {}
  for w in wordList { dict[w] = true }

  if !(endWord in dict) {
    return 0
  }

  var queue: list<string> = [beginWord]
  var visited: map<string, bool> = { beginWord: true }
  var level = 1
  let letters = "abcdefghijklmnopqrstuvwxyz"

  while len(queue) > 0 {
    var next: list<string> = []
    for word in queue {
      if word == endWord {
        return level
      }
      for i in 0..len(word) {
        for j in 0..len(letters) {
          let ch = letters[j]
          if ch != word[i] {
            let candidate = word[0:i] + ch + word[i+1:len(word)]
            if candidate in dict && (candidate in visited) == false {
              visited[candidate] = true
              next = next + [candidate]
            }
          }
        }
      }
    }
    queue = next
    level = level + 1
  }

  return 0
}

// Test cases from LeetCode

test "example 1" {
  expect ladderLength("hit", "cog", ["hot","dot","dog","lot","log","cog"]) == 5
}

test "example 2" {
  expect ladderLength("hit", "cog", ["hot","dot","dog","lot","log"]) == 0
}

/*
Common Mochi language errors and how to fix them:
1. Using '=' instead of '==' when comparing strings.
   if word = endWord { }     // ❌ assignment
   if word == endWord { }    // ✅ comparison
2. Reassigning a variable declared with 'let'.
   let level = 1
   level = level + 1         // ❌ cannot modify immutable value
   var level = 1             // ✅ use 'var' for mutable data
3. Off-by-one mistakes when slicing strings.
   word[0:i+1]               // ❌ includes extra char
   word[0:i]                 // ✅ correct prefix
4. Using reserved keywords like 'test' as function names.
   fun test() { }            // ❌ parse error
   fun solve() { }           // ✅ choose a different name
*/
