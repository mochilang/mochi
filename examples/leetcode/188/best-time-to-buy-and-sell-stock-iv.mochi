// Solution for LeetCode problem 188 - Best Time to Buy and Sell Stock IV
// Use dynamic programming to track buy/sell states for up to k transactions.
fun maxProfit(k: int, prices: list<int>): int {
  let n = len(prices)
  if n == 0 || k == 0 {
    return 0
  }
  if k >= n / 2 {
    // Equivalent to unlimited transactions
    var profit = 0
    for i in 1..n {
      let diff = prices[i] - prices[i-1]
      if diff > 0 {
        profit = profit + diff
      }
    }
    return profit
  }

  var buy: list<int> = []
  var sell: list<int> = []
  var idx = 0
  while idx < k {
    buy = buy + [0 - prices[0]]
    sell = sell + [0]
    idx = idx + 1
  }

  var i = 1
  while i < n {
    let price = prices[i]
    // update first transaction
    let b0 = 0 - price
    if b0 > buy[0] {
      buy[0] = b0
    }
    let s0 = buy[0] + price
    if s0 > sell[0] {
      sell[0] = s0
    }
    var j = 1
    while j < k {
      let b = sell[j-1] - price
      if b > buy[j] {
        buy[j] = b
      }
      let s = buy[j] + price
      if s > sell[j] {
        sell[j] = s
      }
      j = j + 1
    }
    i = i + 1
  }
  return sell[k-1]
}

// Test cases from LeetCode problem statement

test "example 1" {
  expect maxProfit(2, [2,4,1]) == 2
}

test "example 2" {
  expect maxProfit(2, [3,2,6,5,0,3]) == 7
}

// Additional tests

test "empty prices" {
  expect maxProfit(3, []) == 0
}

test "unlimited transactions" {
  expect maxProfit(100, [1,2,3,4,5]) == 4
}

test "zero k" {
  expect maxProfit(0, [1,3,2,8]) == 0
}

/*
Common Mochi language errors and how to fix them:
1. Writing `i++` to increment a counter. Use `i = i + 1` instead.
2. Reassigning a variable declared with `let`. Declare mutable bindings with `var`.
3. Using `=` in conditions when you meant `==`. Remember `if x == y {` ... `}`.
4. Attempting Rust-style `match` expressions or union types. Mochi does not
   support them; use `if`/`else` chains to branch on values.
*/
