// Solution for LeetCode problem 209 - Minimum Size Subarray Sum
// Given an array of positive integers nums and a target, return the minimal
// length of a contiguous subarray of which the sum is at least target. If there
// is no such subarray, return 0.

fun minSubArrayLen(target: int, nums: list<int>): int {
  let n = len(nums)
  var left = 0
  var sum = 0
  var best = n + 1
  var right = 0
  while right < n {
    sum = sum + nums[right]
    right = right + 1
    while sum >= target {
      let length = right - left
      if length < best {
        best = length
      }
      sum = sum - nums[left]
      left = left + 1
    }
  }
  if best == n + 1 {
    return 0
  }
  return best
}

// Test cases from the LeetCode problem statement

test "example 1" {
  expect minSubArrayLen(7, [2,3,1,2,4,3]) == 2
}

test "example 2" {
  expect minSubArrayLen(4, [1,4,4]) == 1
}

test "example 3" {
  expect minSubArrayLen(11, [1,1,1,1,1,1,1,1]) == 0
}

// Additional tests

test "entire array" {
  expect minSubArrayLen(15, [5,1,3,5,10,7,4,9,2,8]) == 2
}

/*
Common language errors and how to fix them:
1. Using `==` instead of `=` for assignment:
   var x = 0
   x == 1      // error[P000]: '==' is comparison, use '=' to assign
   // Fix: use `x = 1` when assigning a new value.

2. Forgetting to declare mutable variables with `var`:
   let total = 0
   total = total + 1  // error[E004]: cannot reassign immutable binding
   // Fix: declare `var total = 0` if it needs to change.

3. Accessing an index beyond the length of a list:
   let nums = [1,2,3]
   nums[3]    // error[I003]: index out of bounds
   // Fix: valid indexes for a list of length 3 are 0, 1, and 2.
*/
