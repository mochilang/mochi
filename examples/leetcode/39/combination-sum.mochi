fun combinationSum(candidates: list<int>, target: int): list<list<int>> {
  let sorted = from c in candidates sort by c select c
  var result: list<list<int>> = []

  fun backtrack(remain: int, start: int, path: list<int>) {
    if remain == 0 {
      result = result + [path]
      return
    }
    var i = start
    let n = len(sorted)
    while i < n {
      let current = sorted[i]
      if current > remain {
        break
      }
      backtrack(remain - current, i, path + [current])
      i = i + 1
    }
  }

  backtrack(target, 0, [])
  return result
}

// Test cases from LeetCode

test "example 1" {
  expect combinationSum([2,3,6,7], 7) == [[2,2,3],[7]]
}

test "example 2" {
  expect combinationSum([2,3,5], 8) == [[2,2,2,2],[2,3,3],[3,5]]
}

test "example 3" {
  expect combinationSum([2], 1) == []
}
