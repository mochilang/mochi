// Solution for LeetCode problem 176 - Second Highest Salary

// Employee record containing id and salary

type Employee {
  id: int
  salary: int
}

// Return the second highest distinct salary.
// If it doesn't exist, return 0.
fun secondHighestSalary(employees: list<Employee>): int {
  if len(employees) < 2 {
    return 0
  }
  let firstEmp = employees[0]
  var first = firstEmp.salary
  var second = first
  var i = 1
  while i < len(employees) {
    let emp = employees[i]
    let s = emp.salary
    if s > first {
      second = first
      first = s
    } else if s != first && (second == first || s > second) {
      second = s
    }
    i = i + 1
  }
  if second == first {
    return 0
  }
  return second
}

// Example data
let employees: list<Employee> = [
  Employee { id: 1, salary: 100 },
  Employee { id: 2, salary: 200 },
  Employee { id: 3, salary: 300 },
  Employee { id: 4, salary: 200 }
]

test "example" {
  expect secondHighestSalary(employees) == 200
}

test "no second salary" {
  expect secondHighestSalary([Employee { id: 1, salary: 100 }]) == 0
}

test "duplicates" {
  let list: list<Employee> = [
    Employee { id: 1, salary: 100 },
    Employee { id: 2, salary: 100 },
    Employee { id: 3, salary: 100 }
  ]
  expect secondHighestSalary(list) == 0
}

/*
Common Mochi language errors and how to fix them:
1. Forgetting to provide a type when creating an empty list:
   var xs = []                // ❌ type cannot be inferred
   var xs: list<Employee> = []  // ✅ specify the element type
2. Using '=' instead of '==' in comparisons:
   if a = b { }               // ❌ assignment
   if a == b { }              // ✅ comparison
3. Trying to modify a value bound with 'let':
   let m = 1
   m = 2                     // ❌ cannot reassign
   var m2 = 1                // ✅ use 'var' for mutable variables
*/
