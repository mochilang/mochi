fun sortColors(nums: list<int>): list<int> {
  var low = 0
  var mid = 0
  var high = len(nums) - 1
  while mid <= high {
    if nums[mid] == 0 {
      let temp = nums[low]
      nums[low] = nums[mid]
      nums[mid] = temp
      low = low + 1
      mid = mid + 1
    } else if nums[mid] == 1 {
      mid = mid + 1
    } else {
      let temp = nums[mid]
      nums[mid] = nums[high]
      nums[high] = temp
      high = high - 1
    }
  }
  return nums
}

// Test cases from LeetCode

test "example 1" {
  expect sortColors([2,0,2,1,1,0]) == [0,0,1,1,2,2]
}

test "example 2" {
  expect sortColors([2,0,1]) == [0,1,2]
}

// Additional edge cases

test "single zero" {
  expect sortColors([0]) == [0]
}

test "single one" {
  expect sortColors([1]) == [1]
}

test "single two" {
  expect sortColors([2]) == [2]
}

/*
Common language errors and how to fix them:
1. Forgetting to use `var` when a variable changes:
   let i = 0
   i = i + 1      // error[E004]: cannot reassign immutable binding
   // Fix: declare as `var i = 0`.

2. Mixing up assignment and equality:
   if a = 1 { }    // error[P000]: '=' is assignment, not comparison
   // Fix: use '==' for comparisons, e.g., `if a == 1 { }`.

3. Accessing out-of-bounds indexes:
   nums[len(nums)]  // error[I003]: index out of bounds
   // Fix: use `len(nums) - 1` as the last valid index.
*/
