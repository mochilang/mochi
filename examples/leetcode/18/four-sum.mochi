fun fourSum(nums: list<int>, target: int): list<list<int>> {
  let sorted = from n in nums
               sort by n
               select n
  let n = len(sorted)
  var result: list<list<int>> = []
  for i in 0..n {
    if i > 0 && sorted[i] == sorted[i-1] {
      continue
    }
    for j in i+1..n {
      if j > i+1 && sorted[j] == sorted[j-1] {
        continue
      }
      var left = j + 1
      var right = n - 1
      while left < right {
        let sum = sorted[i] + sorted[j] + sorted[left] + sorted[right]
        if sum == target {
          result = result + [[sorted[i], sorted[j], sorted[left], sorted[right]]]
          left = left + 1
          right = right - 1
          while left < right && sorted[left] == sorted[left-1] {
            left = left + 1
          }
          while left < right && sorted[right] == sorted[right+1] {
            right = right - 1
          }
        } else if sum < target {
          left = left + 1
        } else {
          right = right - 1
        }
      }
    }
  }
  return result
}

// Test cases from LeetCode

test "example 1" {
  expect fourSum([1,0,-1,0,-2,2], 0) == [[-2,-1,1,2], [-2,0,0,2], [-1,0,0,1]]
}

test "example 2" {
  expect fourSum([2,2,2,2,2], 8) == [[2,2,2,2]]
}
