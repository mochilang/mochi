#!/usr/bin/env escript
-module(main).
-export([main/1]).

% Generated by Mochi transpiler v0.10.34 (3e0d18933) on 2025-07-21 23:54 +0700

main(_) ->
    Customers = [#{"id" => 1, "name" => "Alice"}, #{"id" => 2, "name" => "Bob"}, #{"id" => 3, "name" => "Charlie"}],
    Orders = [#{"id" => 100, "customerId" => 1}, #{"id" => 101, "customerId" => 1}, #{"id" => 102, "customerId" => 2}],
    Stats = lists:map(fun(P) ->
        Key = element(1, P),
        Items = element(2, P),
        #{"name" => Key, "count" => length([R ||
        R <- Items,
        (maps:get("o", R) /= nil)])} end, maps:to_list(lists:foldl(fun(P, Acc) ->
        K = element(1, P),
        V = element(2, P),
        maps:put(K, (maps:get(K, Acc, []) ++ [V]), Acc) end, #{}, lists:reverse(lists:foldl(fun(C, Acc0) ->
    {Matched,Acc} = lists:foldl(fun(O, {M,A}) ->
        case (maps:get("customerId", O) == maps:get("id", C)) of
            true -> {true, [{maps:get("name", C), #{"c" => C, "o" => O}}|A]};
            _ -> {M,A}
        end
    end, {false, Acc0}, Orders),
    case Matched of
        true -> Acc;
        false -> [(fun() -> O = nil, {maps:get("name", C), #{"c" => C, "o" => O}} end())|Acc]
    end
end, [], Customers))))),
    io:format("~s~n", ["--- Group Left Join ---"]),
    lists:foreach(fun(S) ->
    io:format("~p ~s ~p~n", [maps:get("name", S), "orders:", maps:get("count", S)])
end, Stats).
