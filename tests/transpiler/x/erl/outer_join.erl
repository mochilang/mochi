#!/usr/bin/env escript
-module(main).
-export([main/1]).

% Generated by Mochi transpiler v0.10.35 (d025bc223) on 2025-07-22 10:54 +0700

main(_) ->
    Customers = [#{"id" => 1, "name" => "Alice"}, #{"id" => 2, "name" => "Bob"}, #{"id" => 3, "name" => "Charlie"}, #{"id" => 4, "name" => "Diana"}],
    Orders = [#{"id" => 100, "customerId" => 1, "total" => 250}, #{"id" => 101, "customerId" => 2, "total" => 125}, #{"id" => 102, "customerId" => 1, "total" => 300}, #{"id" => 103, "customerId" => 5, "total" => 80}],
    Result = lists:reverse(lists:foldl(fun(O, Acc0) ->
    {Matched,Acc} = lists:foldl(fun(C, {M,A}) ->
        case (maps:get("customerId", O) == maps:get("id", C)) of
            true -> {true, [#{"order" => O, "customer" => C}|A]};
            _ -> {M,A}
        end
    end, {false, Acc0}, Customers),
    case Matched of
        true -> Acc;
        false -> [(fun() -> C = nil, #{"order" => O, "customer" => C} end())|Acc]
    end
end, [], Orders)) ++ lists:reverse(lists:foldl(fun(C, Acc0) ->
    Exists = lists:any(fun(O) -> (maps:get("customerId", O) == maps:get("id", C)) end, Orders),
    case Exists of
        true -> Acc0;
        false -> [(fun() -> O = nil, #{"order" => O, "customer" => C} end())|Acc0]
    end
end, [], Customers)),
    io:format("~s~n", ["--- Outer Join using syntax ---"]),
    lists:foreach(fun(Row) ->
    case (maps:get("order", Row) /= nil) of
        true -> case (maps:get("customer", Row) /= nil) of
        true -> io:format("~s ~p ~s ~p ~s ~p~n", ["Order", maps:get("id", maps:get("order", Row)), "by", maps:get("name", maps:get("customer", Row)), "- $", maps:get("total", maps:get("order", Row))]);
        _ -> io:format("~s ~p ~s ~s ~s ~p~n", ["Order", maps:get("id", maps:get("order", Row)), "by", "Unknown", "- $", maps:get("total", maps:get("order", Row))])
    end;
        _ -> io:format("~s ~p ~s~n", ["Customer", maps:get("name", maps:get("customer", Row)), "has no orders"])
    end
end, Result).
