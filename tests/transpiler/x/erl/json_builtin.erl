#!/usr/bin/env escript
-module(main).
-export([main/1]).

% Generated by Mochi transpiler v0.10.32 (3834627bc) on 2025-07-21 08:48 UTC

json_str(V, I) when is_map(V) ->
    Ind = lists:duplicate(I, $ ),
    Ind2 = lists:duplicate(I + 2, $ ),
    Pairs = [
        Ind2 ++ "\"" ++
            (case K of
                A when is_atom(A) -> atom_to_list(A);
                B when is_binary(B) -> binary_to_list(B);
                _ -> K
            end) ++ "\": " ++ json_str(V2, I + 2)
        || {K,V2} <- maps:to_list(V)
    ],
    "{\n" ++ string:join(Pairs, ",\n") ++ "\n" ++ Ind ++ "}";
json_str(V, I) when is_list(V) ->
    case lists:all(fun(X) -> is_integer(X) end, V) of
        true -> "\"" ++ V ++ "\"";
        false ->
            Ind = lists:duplicate(I, $ ),
            Ind2 = lists:duplicate(I + 2, $ ),
            Parts = [Ind2 ++ json_str(E, I + 2) || E <- V],
            "[\n" ++ string:join(Parts, ",\n") ++ "\n" ++ Ind ++ "]"
    end;
json_str(V, _) when is_integer(V) -> integer_to_list(V);
json_str(V, _) when is_float(V) -> float_to_list(V);
json_str(true, _) -> "true";
json_str(false, _) -> "false";
json_str(V, _) when is_binary(V) -> "\"" ++ binary_to_list(V) ++ "\"";
json_str(V, _) when is_atom(V) -> "\"" ++ atom_to_list(V) ++ "\"";
json_str(_, _) -> "null".
main(_) ->
    M = #{"a" => 1, "b" => 2},
    io:format("~s~n", [json_str(M, 0)]).
