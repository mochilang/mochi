#!/usr/bin/env escript
-module(main).
-export([main/1]).

% Generated by Mochi transpiler v0.10.33 (7cdccba00) on 2025-07-21 17:26 +0700

main(_) ->
    Customers = [#{"id" => 1, "name" => "Alice"}, #{"id" => 2, "name" => "Bob"}],
    Orders = [#{"id" => 100, "customerId" => 1}, #{"id" => 101, "customerId" => 1}, #{"id" => 102, "customerId" => 2}],
    Stats = lists:map(fun(P) ->
    try
        Key = element(1, P),
        Items = element(2, P),
        #{"name" => Key, "count" => length(Items)}
    catch
        {return, _V} -> _V
    end end, maps:to_list(lists:foldl(fun(P, Acc) ->
    try
        K = element(1, P),
        V = element(2, P),
        maps:put(K, (maps:get(K, Acc, []) ++ [V]), Acc)
    catch
        {return, _V} -> _V
    end end, #{}, [{maps:get("name", C), O} || O <- Orders, C <- Customers, (maps:get("customerId", O) == maps:get("id", C))]))),
    io:format("~s~n", ["--- Orders per customer ---"]),
    lists:foreach(fun(S) ->
    io:format("~p ~s ~p~n", [maps:get("name", S), "orders:", maps:get("count", S)])
end, Stats).
