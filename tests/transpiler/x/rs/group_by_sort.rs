// Generated by Mochi transpiler v0.10.32 on 2025-07-21 15:26 +0700
use std::collections::HashMap;
#[derive(Clone)]
struct Group<K, V> { key: K, items: Vec<V> }
#[derive(Debug, Clone)]
struct ItemsItem {
    cat: String,
    val: i64,
}
impl std::fmt::Display for ItemsItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"cat\": \"{}\"", self.cat)?;
        write!(f, ", ")?;
        write!(f, "\"val\": {}", self.val)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone)]
struct QueryItem {
    cat: String,
    total: i64,
}
impl std::fmt::Display for QueryItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"cat\": \"{}\"", self.cat)?;
        write!(f, ", ")?;
        write!(f, "\"total\": {}", self.total)?;
        write!(f, "}}")
    }
}

fn main() {
    let items: Vec<ItemsItem> = vec![ItemsItem {cat: String::from("a"), val: 3}, ItemsItem {cat: String::from("a"), val: 1}, ItemsItem {cat: String::from("b"), val: 5}, ItemsItem {cat: String::from("b"), val: 2}];
    let grouped: Vec<QueryItem> = { let mut _q: Vec<QueryItem> = Vec::new(); let mut _tmp: Vec<(i64, QueryItem)> = Vec::new(); let mut _groups: HashMap<String, Group<String, ItemsItem>> = HashMap::new(); let mut _order: Vec<String> = Vec::new(); for i in &items { let key = i.cat.clone(); let ks = format!("{:?}", &key); let e = _groups.entry(ks.clone()).or_insert_with(|| { _order.push(ks.clone()); Group::<String, ItemsItem> { key: key.clone(), items: Vec::new() } }); e.items.push(i.clone()); } for ks in _order { let g = &_groups[&ks]; _tmp.push((-{ let mut _q: Vec<i64> = Vec::new(); for x in g.items.clone() { _q.push(x.val); } _q }.iter().sum::<i64>(), QueryItem {cat: String::from(g.key.clone()), total: { let mut _q: Vec<i64> = Vec::new(); for x in g.items.clone() { _q.push(x.val); } _q }.iter().sum::<i64>()})); } _tmp.sort_by(|a,b| a.0.partial_cmp(&b.0).unwrap()); for (_,v) in _tmp { _q.push(v); } _q };
    println!("{}", { let tmp = grouped; tmp.iter().map(|x| x.to_string()).collect::<Vec<_>>().join(" ") });
}
