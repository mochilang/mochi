// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:06 +0700
use std::collections::HashMap;
#[derive(Clone)]
struct Group<K, V> { key: K, items: Vec<V> }
#[derive(Debug, Clone)]
struct NationItem {
    n_nationkey: i64,
    n_name: String,
}
impl std::fmt::Display for NationItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"n_nationkey\": {}", self.n_nationkey)?;
        write!(f, ", ")?;
        write!(f, "\"n_name\": \"{}\"", self.n_name)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone)]
struct CustomerItem {
    c_custkey: i64,
    c_name: String,
    c_acctbal: f64,
    c_nationkey: i64,
    c_address: String,
    c_phone: String,
    c_comment: String,
}
impl std::fmt::Display for CustomerItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"c_custkey\": {}", self.c_custkey)?;
        write!(f, ", ")?;
        write!(f, "\"c_name\": \"{}\"", self.c_name)?;
        write!(f, ", ")?;
        write!(f, "\"c_acctbal\": {}", self.c_acctbal)?;
        write!(f, ", ")?;
        write!(f, "\"c_nationkey\": {}", self.c_nationkey)?;
        write!(f, ", ")?;
        write!(f, "\"c_address\": \"{}\"", self.c_address)?;
        write!(f, ", ")?;
        write!(f, "\"c_phone\": \"{}\"", self.c_phone)?;
        write!(f, ", ")?;
        write!(f, "\"c_comment\": \"{}\"", self.c_comment)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone)]
struct OrdersItem {
    o_orderkey: i64,
    o_custkey: i64,
    o_orderdate: String,
}
impl std::fmt::Display for OrdersItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"o_orderkey\": {}", self.o_orderkey)?;
        write!(f, ", ")?;
        write!(f, "\"o_custkey\": {}", self.o_custkey)?;
        write!(f, ", ")?;
        write!(f, "\"o_orderdate\": \"{}\"", self.o_orderdate)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone)]
struct LineitemItem {
    l_orderkey: i64,
    l_returnflag: String,
    l_extendedprice: f64,
    l_discount: f64,
}
impl std::fmt::Display for LineitemItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"l_orderkey\": {}", self.l_orderkey)?;
        write!(f, ", ")?;
        write!(f, "\"l_returnflag\": \"{}\"", self.l_returnflag)?;
        write!(f, ", ")?;
        write!(f, "\"l_extendedprice\": {}", self.l_extendedprice)?;
        write!(f, ", ")?;
        write!(f, "\"l_discount\": {}", self.l_discount)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone)]
struct QueryItem {
    c_custkey: i64,
    c_name: i64,
    revenue: f64,
    c_acctbal: i64,
    n_name: i64,
    c_address: i64,
    c_phone: i64,
    c_comment: i64,
}
impl std::fmt::Display for QueryItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"c_custkey\": {}", self.c_custkey)?;
        write!(f, ", ")?;
        write!(f, "\"c_name\": {}", self.c_name)?;
        write!(f, ", ")?;
        write!(f, "\"revenue\": {}", self.revenue)?;
        write!(f, ", ")?;
        write!(f, "\"c_acctbal\": {}", self.c_acctbal)?;
        write!(f, ", ")?;
        write!(f, "\"n_name\": {}", self.n_name)?;
        write!(f, ", ")?;
        write!(f, "\"c_address\": {}", self.c_address)?;
        write!(f, ", ")?;
        write!(f, "\"c_phone\": {}", self.c_phone)?;
        write!(f, ", ")?;
        write!(f, "\"c_comment\": {}", self.c_comment)?;
        write!(f, "}}")
    }
}

fn main() {
    let nation: Vec<NationItem> = vec![NationItem {n_nationkey: 1, n_name: String::from("BRAZIL")}];
    let customer: Vec<CustomerItem> = vec![CustomerItem {c_custkey: 1, c_name: String::from("Alice"), c_acctbal: 100, c_nationkey: 1, c_address: String::from("123 St"), c_phone: String::from("123-456"), c_comment: String::from("Loyal")}];
    let orders: Vec<OrdersItem> = vec![OrdersItem {o_orderkey: 1000, o_custkey: 1, o_orderdate: String::from("1993-10-15")}, OrdersItem {o_orderkey: 2000, o_custkey: 1, o_orderdate: String::from("1994-01-02")}];
    let lineitem: Vec<LineitemItem> = vec![LineitemItem {l_orderkey: 1000, l_returnflag: String::from("R"), l_extendedprice: 1000, l_discount: 0.1}, LineitemItem {l_orderkey: 2000, l_returnflag: String::from("N"), l_extendedprice: 500, l_discount: 0}];
    let start_date = "1993-10-01";
    let end_date = "1994-01-01";
    let result: Vec<QueryItem> = { let mut _q: Vec<QueryItem> = Vec::new(); let mut _tmp: Vec<(i64, QueryItem)> = Vec::new(); let mut _groups: HashMap<String, Group<HashMap<String, i64>, CustomerItem>> = HashMap::new(); let mut _order: Vec<String> = Vec::new(); for c in &customer { for o in &orders { if (o.o_custkey == c.c_custkey) { for l in &lineitem { if (l.l_orderkey == o.o_orderkey) { for n in &nation { if (n.n_nationkey == c.c_nationkey) { if (((o.o_orderdate >= start_date) && (o.o_orderdate < end_date)) && (l.l_returnflag == "R")) { let key = HashMap::from([(c_custkey, c.c_custkey), (c_name, c.c_name), (c_acctbal, c.c_acctbal), (c_address, c.c_address), (c_phone, c.c_phone), (c_comment, c.c_comment), (n_name, n.n_name)]).clone(); let ks = format!("{:?}", &key); let e = _groups.entry(ks.clone()).or_insert_with(|| { _order.push(ks.clone()); Group::<HashMap<String, i64>, CustomerItem> { key: key.clone(), items: Vec::new() } }); e.items.push(c.clone()); } } } } } } } } for ks in _order { let g = &_groups[&ks]; _tmp.push((-{ let mut _q: Vec<i64> = Vec::new(); for x in g.items.clone() { _q.push((x.l.l_extendedprice * (1 - x.l.l_discount))); } _q }.iter().sum::<i64>(), QueryItem {c_custkey: g.key.clone().c_custkey, c_name: g.key.clone().c_name, revenue: { let mut _q: Vec<i64> = Vec::new(); for x in g.items.clone() { _q.push((x.l.l_extendedprice * (1 - x.l.l_discount))); } _q }.iter().sum::<i64>(), c_acctbal: g.key.clone().c_acctbal, n_name: g.key.clone().n_name, c_address: g.key.clone().c_address, c_phone: g.key.clone().c_phone, c_comment: g.key.clone().c_comment})); } _tmp.sort_by(|a,b| a.0.partial_cmp(&b.0).unwrap()); for (_,v) in _tmp { _q.push(v); } _q };
    println!("{}", { let tmp = result; tmp.iter().map(|x| x.to_string()).collect::<Vec<_>>().join(" ") });
}
