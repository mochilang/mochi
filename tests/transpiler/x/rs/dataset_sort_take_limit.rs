// Generated by Mochi transpiler v0.10.32 on 2025-07-21 12:01 +0700
#[derive(Debug, Clone)]
struct ProductsItem {
    name: String,
    price: i64,
}

fn main() {
    let products: Vec<ProductsItem> = vec![ProductsItem {name: String::from("Laptop"), price: 1500}, ProductsItem {name: String::from("Smartphone"), price: 900}, ProductsItem {name: String::from("Tablet"), price: 600}, ProductsItem {name: String::from("Monitor"), price: 300}, ProductsItem {name: String::from("Keyboard"), price: 100}, ProductsItem {name: String::from("Mouse"), price: 50}, ProductsItem {name: String::from("Headphones"), price: 200}];
    let expensive: Vec<ProductsItem> = { let mut _q: Vec<ProductsItem> = Vec::new(); let mut _tmp: Vec<(i64, ProductsItem)> = Vec::new(); for p in &products { _tmp.push((-p.price, p.clone())); } _tmp.sort_by(|a,b| a.0.partial_cmp(&b.0).unwrap()); for (_,v) in _tmp { _q.push(v); } if (1 as usize) < _q.len() { _q = _q[(1 as usize)..].to_vec(); } else { _q = Vec::new(); } if (3 as usize) < _q.len() { _q = _q[..(3 as usize)].to_vec(); } _q };
    println!("{}", "--- Top products (excluding most expensive) ---");
    for item in &expensive {
        println!("{} {} {}", item.name, "costs $", item.price);
    }
}
