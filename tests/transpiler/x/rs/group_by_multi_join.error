rustc: exit status 1
warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/transpiler/x/rs/group_by_multi_join.rs:90:126
   |
90 | ...::new(); for ps in &partsupp { for s in &suppliers { if (s.id == ps.supplier) { for n in &nations { if (n.id == s.nation) { if (n.name...
   |                                                            ^                   ^
   |
   = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
   |
90 -     let filtered: Vec<QueryItem> = { let mut _q: Vec<QueryItem> = Vec::new(); for ps in &partsupp { for s in &suppliers { if (s.id == ps.supplier) { for n in &nations { if (n.id == s.nation) { if (n.name == "A") { _q.push(QueryItem {part: ps.clone().part, value: (ps.clone().cost * ps.clone().qty)}); } } } } } } _q };
90 +     let filtered: Vec<QueryItem> = { let mut _q: Vec<QueryItem> = Vec::new(); for ps in &partsupp { for s in &suppliers { if s.id == ps.supplier { for n in &nations { if (n.id == s.nation) { if (n.name == "A") { _q.push(QueryItem {part: ps.clone().part, value: (ps.clone().cost * ps.clone().qty)}); } } } } } } _q };
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/transpiler/x/rs/group_by_multi_join.rs:90:173
   |
90 | ...liers { if (s.id == ps.supplier) { for n in &nations { if (n.id == s.nation) { if (n.name == "A") { _q.push(QueryItem {part: ps.clone(...
   |                                                              ^                ^
   |
help: remove these parentheses
   |
90 -     let filtered: Vec<QueryItem> = { let mut _q: Vec<QueryItem> = Vec::new(); for ps in &partsupp { for s in &suppliers { if (s.id == ps.supplier) { for n in &nations { if (n.id == s.nation) { if (n.name == "A") { _q.push(QueryItem {part: ps.clone().part, value: (ps.clone().cost * ps.clone().qty)}); } } } } } } _q };
90 +     let filtered: Vec<QueryItem> = { let mut _q: Vec<QueryItem> = Vec::new(); for ps in &partsupp { for s in &suppliers { if (s.id == ps.supplier) { for n in &nations { if n.id == s.nation { if (n.name == "A") { _q.push(QueryItem {part: ps.clone().part, value: (ps.clone().cost * ps.clone().qty)}); } } } } } } _q };
   |

warning: unnecessary parentheses around `if` condition
  --> /workspace/mochi/tests/transpiler/x/rs/group_by_multi_join.rs:90:197
   |
90 | ...supplier) { for n in &nations { if (n.id == s.nation) { if (n.name == "A") { _q.push(QueryItem {part: ps.clone().part, value: (ps.clon...
   |                                                               ^             ^
   |
help: remove these parentheses
   |
90 -     let filtered: Vec<QueryItem> = { let mut _q: Vec<QueryItem> = Vec::new(); for ps in &partsupp { for s in &suppliers { if (s.id == ps.supplier) { for n in &nations { if (n.id == s.nation) { if (n.name == "A") { _q.push(QueryItem {part: ps.clone().part, value: (ps.clone().cost * ps.clone().qty)}); } } } } } } _q };
90 +     let filtered: Vec<QueryItem> = { let mut _q: Vec<QueryItem> = Vec::new(); for ps in &partsupp { for s in &suppliers { if (s.id == ps.supplier) { for n in &nations { if (n.id == s.nation) { if n.name == "A" { _q.push(QueryItem {part: ps.clone().part, value: (ps.clone().cost * ps.clone().qty)}); } } } } } } _q };
   |

error[E0308]: mismatched types
  --> /workspace/mochi/tests/transpiler/x/rs/group_by_multi_join.rs:89:88
   |
89 |     let partsupp: Vec<PartsuppItem> = vec![PartsuppItem {part: 100, supplier: 1, cost: 10, qty: 2}, PartsuppItem {part: 100, supplier: 2,...
   |                                                                                        ^^ expected `f64`, found integer
   |
help: use a float literal
   |
89 |     let partsupp: Vec<PartsuppItem> = vec![PartsuppItem {part: 100, supplier: 1, cost: 10.0, qty: 2}, PartsuppItem {part: 100, supplier: 2, cost: 20, qty: 1}, PartsuppItem {part: 200, supplier: 1, cost: 5, qty: 3}];
   |                                                                                          ++

error[E0308]: mismatched types
  --> /workspace/mochi/tests/transpiler/x/rs/group_by_multi_join.rs:89:145
   |
89 | ...y: 2}, PartsuppItem {part: 100, supplier: 2, cost: 20, qty: 1}, PartsuppItem {part: 200, supplier: 1, cost: 5, qty: 3}];
   |                                                       ^^ expected `f64`, found integer
   |
help: use a float literal
   |
89 |     let partsupp: Vec<PartsuppItem> = vec![PartsuppItem {part: 100, supplier: 1, cost: 10, qty: 2}, PartsuppItem {part: 100, supplier: 2, cost: 20.0, qty: 1}, PartsuppItem {part: 200, supplier: 1, cost: 5, qty: 3}];
   |                                                                                                                                                   ++

error[E0308]: mismatched types
  --> /workspace/mochi/tests/transpiler/x/rs/group_by_multi_join.rs:89:202
   |
89 | ...y: 1}, PartsuppItem {part: 200, supplier: 1, cost: 5, qty: 3}];
   |                                                       ^ expected `f64`, found integer
   |
help: use a float literal
   |
89 |     let partsupp: Vec<PartsuppItem> = vec![PartsuppItem {part: 100, supplier: 1, cost: 10, qty: 2}, PartsuppItem {part: 100, supplier: 2, cost: 20, qty: 1}, PartsuppItem {part: 200, supplier: 1, cost: 5.0, qty: 3}];
   |                                                                                                                                                                                                           ++

error[E0277]: cannot multiply `f64` by `i64`
  --> /workspace/mochi/tests/transpiler/x/rs/group_by_multi_join.rs:90:281
   |
90 | ... {part: ps.clone().part, value: (ps.clone().cost * ps.clone().qty)}); } } } } } } _q };
   |                                                     ^ no implementation for `f64 * i64`
   |
   = help: the trait `Mul<i64>` is not implemented for `f64`
   = help: the following other types implement trait `Mul<Rhs>`:
             `&f64` implements `Mul<f64>`
             `&f64` implements `Mul`
             `f64` implements `Mul<&f64>`
             `f64` implements `Mul`

error[E0608]: cannot index into a value of type `&QueryItem`
  --> /workspace/mochi/tests/transpiler/x/rs/group_by_multi_join.rs:91:239
   |
91 | ...der: Vec<String> = Vec::new(); for x in &filtered { let key = x["part"].clone(); let ks = format!("{:?}", &key); let e = _groups.entry...
   |                                                                   ^^^^^^^^

error[E0308]: mismatched types
  --> /workspace/mochi/tests/transpiler/x/rs/group_by_multi_join.rs:91:460
   |
91 | ..., items: Vec::new() } }); e.items.push(x.clone()); } for ks in _order { let g = &_groups[&ks]; _q.push(QueryItem1 {part: g.key.clone()...
   |                                      ---- ^^^^^^^^^ expected `HashMap<String, i64>`, found `QueryItem`
   |                                      |
   |                                      arguments to this method are incorrect
   |
   = note: expected struct `HashMap<String, i64>`
              found struct `QueryItem`
note: method defined here
  --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/alloc/src/vec/mod.rs:2442:12

error[E0609]: no field `value` on type `HashMap<String, i64>`
  --> /workspace/mochi/tests/transpiler/x/rs/group_by_multi_join.rs:91:638
   |
91 | ...<i64> = Vec::new(); for r in g.items.clone() { _q.push(r.value); } _q }.iter().sum::<i64>()}); } _q };
   |                                                             ^^^^^ unknown field

error[E0308]: mismatched types
  --> /workspace/mochi/tests/transpiler/x/rs/group_by_multi_join.rs:91:564
   |
91 | ...(), total: { let mut _q: Vec<i64> = Vec::new(); for r in g.items.clone() { _q.push(r.value); } _q }.iter().sum::<i64>()}); } _q };
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `i64`

error: aborting due to 8 previous errors; 3 warnings emitted

Some errors have detailed explanations: E0277, E0308, E0608, E0609.
For more information about an error, try `rustc --explain E0277`.
