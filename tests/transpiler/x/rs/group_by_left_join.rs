// Generated by Mochi transpiler v0.10.33 on 2025-07-21 16:07 +0700
use std::collections::HashMap;
#[derive(Clone)]
struct Group<K, V> { key: K, items: Vec<V> }
#[derive(Debug, Clone)]
struct CustomersItem {
    id: i64,
    name: String,
}
impl std::fmt::Display for CustomersItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"id\": {}", self.id)?;
        write!(f, ", ")?;
        write!(f, "\"name\": \"{}\"", self.name)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone)]
struct OrdersItem {
    id: i64,
    customerId: i64,
}
impl std::fmt::Display for OrdersItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"id\": {}", self.id)?;
        write!(f, ", ")?;
        write!(f, "\"customerId\": {}", self.customerId)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone)]
struct QueryItem {
    name: String,
    count: i64,
}
impl std::fmt::Display for QueryItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"name\": \"{}\"", self.name)?;
        write!(f, ", ")?;
        write!(f, "\"count\": {}", self.count)?;
        write!(f, "}}")
    }
}

fn main() {
    let customers: Vec<CustomersItem> = vec![CustomersItem {id: 1, name: String::from("Alice")}, CustomersItem {id: 2, name: String::from("Bob")}, CustomersItem {id: 3, name: String::from("Charlie")}];
    let orders: Vec<OrdersItem> = vec![OrdersItem {id: 100, customerId: 1}, OrdersItem {id: 101, customerId: 1}, OrdersItem {id: 102, customerId: 2}];
    let stats: Vec<QueryItem> = { let mut _q: Vec<QueryItem> = Vec::new(); let mut _groups: HashMap<String, Group<String, CustomersItem>> = HashMap::new(); let mut _order: Vec<String> = Vec::new(); for c in &customers { for o in &orders { if (o.customerId == c.id) { let key = c.name.clone(); let ks = format!("{:?}", &key); let e = _groups.entry(ks.clone()).or_insert_with(|| { _order.push(ks.clone()); Group::<String, CustomersItem> { key: key.clone(), items: Vec::new() } }); e.items.push(c.clone()); } } } for ks in _order { let g = &_groups[&ks]; _q.push(QueryItem {name: String::from(g.key.clone()), count: { let mut _q: Vec<i64> = Vec::new(); for r in g.items.clone() { if r.o { _q.push(r); } } _q }.len()}); } _q };
    println!("{}", "--- Group Left Join ---");
    for s in &stats {
        println!("{}", format!("{} {} {}", s.name, "orders:", s.count).trim_end());
    }
}
