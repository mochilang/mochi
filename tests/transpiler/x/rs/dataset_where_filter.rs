// Generated by Mochi transpiler v0.10.32 on 2025-07-21 10:50 +0700
#[derive(Debug, Clone)]
struct PeopleItem {
    name: String,
    age: i64,
}

#[derive(Debug, Clone)]
struct QueryItem {
    name: String,
    age: i64,
    is_senior: bool,
}

fn main() {
    let people: Vec<PeopleItem> = vec![PeopleItem {name: String::from("Alice"), age: 30}, PeopleItem {name: String::from("Bob"), age: 15}, PeopleItem {name: String::from("Charlie"), age: 65}, PeopleItem {name: String::from("Diana"), age: 45}];
    let adults: Vec<QueryItem> = { let mut _q: Vec<QueryItem> = Vec::new(); for person in &people { if (person.age >= 18) { _q.push(QueryItem {name: person.name.clone(), age: person.age, is_senior: (person.age >= 60)}); } } _q };
    println!("{}", { let v = vec![format!("{}", "--- Adults ---")]; v.into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") });
    for person in &adults {
        println!("{}", { let v = vec![format!("{}", person.name), format!("{}", "is"), format!("{}", person.age), format!("{}", if person.is_senior { " (senior)" } else { "" })]; v.into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") });
    }
}
