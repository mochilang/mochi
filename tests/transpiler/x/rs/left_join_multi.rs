// Generated by Mochi transpiler v0.10.33 on 2025-07-21 16:07 +0700
#[derive(Debug, Clone)]
struct CustomersItem {
    id: i64,
    name: String,
}
impl std::fmt::Display for CustomersItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"id\": {}", self.id)?;
        write!(f, ", ")?;
        write!(f, "\"name\": \"{}\"", self.name)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone)]
struct OrdersItem {
    id: i64,
    customerId: i64,
}
impl std::fmt::Display for OrdersItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"id\": {}", self.id)?;
        write!(f, ", ")?;
        write!(f, "\"customerId\": {}", self.customerId)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone)]
struct ItemsItem {
    orderId: i64,
    sku: String,
}
impl std::fmt::Display for ItemsItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"orderId\": {}", self.orderId)?;
        write!(f, ", ")?;
        write!(f, "\"sku\": \"{}\"", self.sku)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone)]
struct QueryItem {
    orderId: i64,
    name: String,
    item: ItemsItem,
}
impl std::fmt::Display for QueryItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"orderId\": {}", self.orderId)?;
        write!(f, ", ")?;
        write!(f, "\"name\": \"{}\"", self.name)?;
        write!(f, ", ")?;
        write!(f, "\"item\": {}", self.item)?;
        write!(f, "}}")
    }
}

fn main() {
    let customers: Vec<CustomersItem> = vec![CustomersItem {id: 1, name: String::from("Alice")}, CustomersItem {id: 2, name: String::from("Bob")}];
    let orders: Vec<OrdersItem> = vec![OrdersItem {id: 100, customerId: 1}, OrdersItem {id: 101, customerId: 2}];
    let items: Vec<ItemsItem> = vec![ItemsItem {orderId: 100, sku: String::from("a")}];
    let result: Vec<QueryItem> = { let mut _q: Vec<QueryItem> = Vec::new(); for o in &orders { for c in &customers { if (o.customerId == c.id) { for i in &items { if (o.id == i.orderId) { _q.push(QueryItem {orderId: o.clone().id, name: c.clone().name.clone(), item: i.clone()}); } } } } } _q };
    println!("{}", "--- Left Join Multi ---");
    for r in &result {
        println!("{}", format!("{} {} {}", r.orderId, r.name, r.item).trim_end());
    }
}
