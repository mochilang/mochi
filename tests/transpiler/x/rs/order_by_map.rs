// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:06 +0700
use std::collections::HashMap;
#[derive(Debug, Clone)]
struct DataItem {
    a: i64,
    b: i64,
}
impl std::fmt::Display for DataItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"a\": {}", self.a)?;
        write!(f, ", ")?;
        write!(f, "\"b\": {}", self.b)?;
        write!(f, "}}")
    }
}

fn main() {
    let data: Vec<DataItem> = vec![DataItem {a: 1, b: 2}, DataItem {a: 1, b: 1}, DataItem {a: 0, b: 5}];
    let sorted: Vec<DataItem> = { let mut _q: Vec<DataItem> = Vec::new(); let mut _tmp: Vec<(HashMap<i64, i64>, DataItem)> = Vec::new(); for x in &data { _tmp.push((HashMap::from([(a, x.a), (b, x.b)]), x.clone())); } _tmp.sort_by(|a,b| a.0.partial_cmp(&b.0).unwrap()); for (_,v) in _tmp { _q.push(v); } _q };
    println!("{}", { let tmp = sorted; tmp.iter().map(|x| x.to_string()).collect::<Vec<_>>().join(" ") });
}
