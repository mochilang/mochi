// Generated by Mochi transpiler v0.10.32 on 2025-07-21 07:52 +0700
#[derive(Debug, Clone)]
struct CustomersItem {
    id: i64,
    name: String,
}

#[derive(Debug, Clone)]
struct OrdersItem {
    id: i64,
    customerId: i64,
    total: i64,
}

#[derive(Debug, Clone)]
struct QueryItem {
    customerName: String,
    order: OrdersItem,
}

fn main() {
    let customers: Vec<CustomersItem> = vec![CustomersItem {id: 1, name: String::from("Alice")}, CustomersItem {id: 2, name: String::from("Bob")}, CustomersItem {id: 3, name: String::from("Charlie")}, CustomersItem {id: 4, name: String::from("Diana")}];
    let orders: Vec<OrdersItem> = vec![OrdersItem {id: 100, customerId: 1, total: 250}, OrdersItem {id: 101, customerId: 2, total: 125}, OrdersItem {id: 102, customerId: 1, total: 300}];
    let result: Vec<QueryItem> = { let mut _q: Vec<QueryItem> = Vec::new(); for o in &orders { for c in &customers { if (o.customerId == c.id) { _q.push(QueryItem {customerName: c.clone().name.clone(), order: o.clone()}); } } } _q };
    println!("{}", "--- Right Join using syntax ---");
    for entry in &result {
        if true {
            println!("{} {} {} {} {} {}", "Customer", entry.customerName, "has order", entry.order.id, "- $", entry.order.total);
        } else {
            println!("{} {} {}", "Customer", entry.customerName, "has no orders");
        }
    }
}
