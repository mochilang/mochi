// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:06 +0700
#[derive(Debug, Clone)]
struct CustomersItem {
    id: i64,
    name: String,
}
impl std::fmt::Display for CustomersItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"id\": {}", self.id)?;
        write!(f, ", ")?;
        write!(f, "\"name\": \"{}\"", self.name)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone)]
struct OrdersItem {
    id: i64,
    customerId: i64,
    total: i64,
}
impl std::fmt::Display for OrdersItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"id\": {}", self.id)?;
        write!(f, ", ")?;
        write!(f, "\"customerId\": {}", self.customerId)?;
        write!(f, ", ")?;
        write!(f, "\"total\": {}", self.total)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone)]
struct QueryItem {
    orderId: i64,
    orderCustomerId: i64,
    pairedCustomerName: String,
    orderTotal: i64,
}
impl std::fmt::Display for QueryItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"orderId\": {}", self.orderId)?;
        write!(f, ", ")?;
        write!(f, "\"orderCustomerId\": {}", self.orderCustomerId)?;
        write!(f, ", ")?;
        write!(f, "\"pairedCustomerName\": \"{}\"", self.pairedCustomerName)?;
        write!(f, ", ")?;
        write!(f, "\"orderTotal\": {}", self.orderTotal)?;
        write!(f, "}}")
    }
}

fn main() {
    let customers: Vec<CustomersItem> = vec![CustomersItem {id: 1, name: String::from("Alice")}, CustomersItem {id: 2, name: String::from("Bob")}, CustomersItem {id: 3, name: String::from("Charlie")}];
    let orders: Vec<OrdersItem> = vec![OrdersItem {id: 100, customerId: 1, total: 250}, OrdersItem {id: 101, customerId: 2, total: 125}, OrdersItem {id: 102, customerId: 1, total: 300}];
    let result: Vec<QueryItem> = { let mut _q: Vec<QueryItem> = Vec::new(); for o in &orders { for c in &customers { _q.push(QueryItem {orderId: o.clone().id, orderCustomerId: o.clone().customerId, pairedCustomerName: c.clone().name.clone(), orderTotal: o.clone().total}); } } _q };
    println!("{}", "--- Cross Join: All order-customer pairs ---");
    for entry in &result {
        println!("{}", format!("{} {} {} {} {} {} {} {}", "Order", entry.orderId, "(customerId:", entry.orderCustomerId, ", total: $", entry.orderTotal, ") paired with", entry.pairedCustomerName).trim_end());
    }
}
