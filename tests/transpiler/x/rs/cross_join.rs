// Generated by Mochi transpiler v0.10.32 on 2025-07-20 17:38 +0700
use std::collections::HashMap;
#[derive(Debug, Clone)]
struct CustomersItem {
    id: i64,
    name: String,
}

#[derive(Debug, Clone)]
struct OrdersItem {
    id: i64,
    customerId: i64,
    total: i64,
}

#[derive(Debug, Clone)]
struct QueryItem {
    orderId: i64,
    orderCustomerId: i64,
    pairedCustomerName: i64,
    orderTotal: i64,
}

fn main() {
    let customers: Vec<CustomersItem> = vec![CustomersItem {id: 1, name: String::from("Alice")}, CustomersItem {id: 2, name: String::from("Bob")}, CustomersItem {id: 3, name: String::from("Charlie")}];
    let orders: Vec<OrdersItem> = vec![OrdersItem {id: 100, customerId: 1, total: 250}, OrdersItem {id: 101, customerId: 2, total: 125}, OrdersItem {id: 102, customerId: 1, total: 300}];
    let result: Vec<QueryItem> = { let mut _q: Vec<QueryItem> = Vec::new(); for o in orders { for c in customers { _q.push(QueryItem {orderId: o["id"], orderCustomerId: o["customerId"], pairedCustomerName: c["name"], orderTotal: o["total"]}); } } _q };
    println!("{}", "--- Cross Join: All order-customer pairs ---");
    for entry in result {
        println!("{} {} {} {} {} {} {} {}", "Order", entry.orderId, "(customerId:", entry.orderCustomerId, ", total: $", entry.orderTotal, ") paired with", entry.pairedCustomerName);
    }
}
