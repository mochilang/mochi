// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:06 +0700
use std::collections::HashMap;
#[derive(Clone)]
struct Group<K, V> { key: K, items: Vec<V> }
#[derive(Debug, Clone)]
struct PeopleItem {
    name: String,
    city: String,
}
impl std::fmt::Display for PeopleItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"name\": \"{}\"", self.name)?;
        write!(f, ", ")?;
        write!(f, "\"city\": \"{}\"", self.city)?;
        write!(f, "}}")
    }
}

#[derive(Debug, Clone)]
struct QueryItem {
    city: String,
    num: i64,
}
impl std::fmt::Display for QueryItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{{")?;
        write!(f, "\"city\": \"{}\"", self.city)?;
        write!(f, ", ")?;
        write!(f, "\"num\": {}", self.num)?;
        write!(f, "}}")
    }
}

fn main() {
    let people: Vec<PeopleItem> = vec![PeopleItem {name: String::from("Alice"), city: String::from("Paris")}, PeopleItem {name: String::from("Bob"), city: String::from("Hanoi")}, PeopleItem {name: String::from("Charlie"), city: String::from("Paris")}, PeopleItem {name: String::from("Diana"), city: String::from("Hanoi")}, PeopleItem {name: String::from("Eve"), city: String::from("Paris")}, PeopleItem {name: String::from("Frank"), city: String::from("Hanoi")}, PeopleItem {name: String::from("George"), city: String::from("Paris")}];
    let big: Vec<QueryItem> = { let mut _q: Vec<QueryItem> = Vec::new(); let mut _groups: HashMap<String, Group<String, PeopleItem>> = HashMap::new(); let mut _order: Vec<String> = Vec::new(); for p in &people { let key = p.city.clone(); let ks = format!("{:?}", &key); let e = _groups.entry(ks.clone()).or_insert_with(|| { _order.push(ks.clone()); Group::<String, PeopleItem> { key: key.clone(), items: Vec::new() } }); e.items.push(p.clone()); } for ks in _order { let g = &_groups[&ks]; _q.push(QueryItem {city: String::from(g.key.clone()), num: g.items.len() as i64}); } _q };
    json(big);
}
