// Generated by Mochi v0.10.35 on 2025-07-22 14:24:20 GMT+7

export interface Result { id: number; name: string }
export interface Customer { id: number; name: string }
export interface Order { id: number; customerId: number; total: number }
function __show(v:any, nest?:boolean){
  if (v === null || v === undefined) return 'None';
  if (Array.isArray(v)) return '[' + v.map(x => __show(x, true)).join(', ') + ']';
  if (typeof v === 'object') return '{' + Object.keys(v).map(k => "'" + k + "': " + __show(v[k], true)).join(', ') + '}';
  if (typeof v === 'string') return nest ? "'" + v + "'" : v;
  return String(v);
}
const customers: Customer[] = [{id: 1, name: "Alice"}, {id: 2, name: "Bob"}];
const orders: Order[] = [{id: 100, customerId: 1, total: 250}, {id: 101, customerId: 3, total: 80}];
const result: Result[] = (() => {
  const result: Result[] = []
  for (const o of orders) {
    let matched = false
    for (const c of customers) {
      if (!((o["customerId"] == c["id"]))) continue
      matched = true
      result.push({orderId: o["id"], customer: c, total: o["total"]})
    }
    if (!matched) result.push({orderId: o["id"], customer: null, total: o["total"]})
  }
  return result
})();
console.log(["--- Left Join ---"].map(v => __show(v)).join(" "));
for (const entry of result) {
  console.log(["Order", entry["orderId"], "customer", entry["customer"], "total", entry["total"]].map(v => __show(v)).join(" "));
}
