// Generated by Mochi v0.10.34 on 2025-07-22 06:54:38 GMT+7

export interface Result { id: number; name: string }
export interface Customer { id: number; name: string }
export interface Order { id: number; customerId: number; total: number }
const customers: Customer[] = [{"__name": "GenType1", id: 1, name: "Alice"}, {"__name": "GenType1", id: 2, name: "Bob"}];
const orders: Order[] = [{"__name": "GenType1", id: 100, customerId: 1, total: 250}, {"__name": "GenType1", id: 101, customerId: 3, total: 80}];
const result: Result[] = (() => {
  let _items = orders.map(v => [v])
  { const _joined = []
    const _arr = customers
    for (const _left of _items) {
      const [o] = _left;
      let _m = false;
      for (let _ri=0; _ri < _arr.length; _ri++) {
        const c = _arr[_ri];
        if (!((o["customerId"] == c["id"]))) continue;
        _m = true; _joined.push([..._left, c]) }
      if (!_m) _joined.push([..._left, null])
    }
    _items = _joined;
  }
  let _rows = _items
  const result: Result[] = []
  for (const r of _rows) { const [o, c] = r; result.push({"__name": "GenType1", orderId: o["id"], customer: c, total: o["total"]}) }
  return result
})();
console.log((tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)("--- Left Join ---"));
for (const entry of result) {
  console.log((tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)("Order"), (tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)(entry["orderId"]), (tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)("customer"), (tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)(entry["customer"]), (tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)("total"), (tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)(entry["total"]));
}
