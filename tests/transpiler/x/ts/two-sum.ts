// Generated by Mochi v0.10.31 on 2025-07-19 19:59:03 GMT+7
function __len(v:any):number {
  if (Array.isArray(v) || typeof v==='string') return v.length;
  return Object.keys(v||{}).length;
}
function __print(...args:any[]) {
  const out:string[]=[];
  for (const a of args) {
    if (typeof a==='boolean') out.push(a? '1':'0');
    else if (Array.isArray(a)) out.push(a.map(x=>typeof x==='boolean'? (x?'1':'0'):String(x)).join(' '));
    else out.push(String(a));
  }
  console.log(out.join(' '));
}
function __iter(v:any):any[] {
  return Array.isArray(v)? v : Object.keys(v||{});
}
function __append(a:any[], v:any):any[] { const r=a.slice(); r.push(v); return r; }
function __avg(nums:number[]):any { if(nums.length==0) return '0.0'; const v=nums.reduce((a,b)=>a+b,0)/nums.length; return v.toFixed(1); }
function __count(v:any):number { return __len(v); }
function __sum(nums:number[]):number { return nums.reduce((a,b)=>a+b,0); }
function __min(nums:number[]):number { return nums.length? Math.min(...nums):0; }
function __max(nums:number[]):number { return nums.length? Math.max(...nums):0; }
function __values(o:any):any[] { return Object.values(o); }
function __json(v:any){ console.log(JSON.stringify(v)); }
function twoSum(nums, target) {
let n = __len(nums);
for (let i = 0; i < n; i++) {
for (let j = (i + 1); j < n; j++) {
if (((nums[i] + nums[j]) == target)) {
return [i, j];
}
}
}
return [-1, -1];
}

let result = twoSum([2, 7, 11, 15], 9);

__print(result[0]);

__print(result[1]);
