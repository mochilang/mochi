// Generated by Mochi v0.10.34 on 2025-07-22 06:35:15 GMT+7

export interface Result { tag: string; val: number }
export interface Data { tag: string; val: number }
const data: Data[] = [{"__name": "GenType1", tag: "a", val: 1}, {"__name": "GenType1", tag: "a", val: 2}, {"__name": "GenType1", tag: "b", val: 3}];
const groups: any[] = (() => {
  const groups = new Map<string, {key: any; items: any[]}>()
  for (const d of data) {
    const k = d["tag"]
    const ks = JSON.stringify(k)
    let g = groups.get(ks)
    if (!g) { g = {key: k, items: []}; groups.set(ks, g) }
    g.items.push(d)
  }
  let ordered = Array.from(groups.values())
  const result = []
  for (const g of ordered) {
    result.push(g)
  }
  return result
})();
let tmp: any[] = [];
for (const g of groups) {
  let total = 0;
  for (const x of g["items"]) {
    total = (total + x["val"]);
  }
  tmp = [...tmp, {"__name": "GenType1", tag: g["key"], total}];
}
const result: any[] = (() => {
  const result = []
  for (const r of tmp) {
    result.push({k: r["tag"], v: r})
  }
  result.sort((a, b) => {const ak = a.k; const bk = b.k; if (ak < bk) return -1; if (ak > bk) return 1; const sak = JSON.stringify(ak); const sbk = JSON.stringify(bk); return sak < sbk ? -1 : sak > sbk ? 1 : 0})
  const out = result.map(r => r.v)
  return out
})();
console.log("[" + result.map((x) => ((typeof x === "object") ? JSON.stringify(x).replace(RegExp(":", "g"), ": ").replace(RegExp(",", "g"), ", ").replace(RegExp(": ([0-9]+)([,}])", "g"), ": $1.0$2") : String(x))).map(v => { if (typeof v === 'string') return '\'' + v + '\''; if (typeof v === 'number') return Number.isInteger(v) ? String(v) : String(v); if (typeof v === 'boolean') return v ? 'True' : 'False'; if (typeof v === 'object') { if (v && v.__name) { const entries = Object.entries(v).filter(([k]) => k !== '__name'); return v.__name + ' {' + entries.map(([k,val]) => { if (typeof val === 'string') return k + ' = ' + '\'' + val + '\''; if (typeof val === 'number') return k + ' = ' + (Number.isInteger(val) ? String(val) : String(val)); if (typeof val === 'boolean') return k + ' = ' + (val ? 'True' : 'False'); return k + ' = ' + String(val); }).join(', ') + '}'; } let s = JSON.stringify(v).replace(/"/g, '\'' ).replace(/:/g, ': ').replace(/,/g, ', '); s = s.replace(/('[^']*(?:id|key)'\s*: )(-?[0-9]+)\.0([,}])/g, '$1$2$3'); return s } return String(v); }).join(', ') + "]");
