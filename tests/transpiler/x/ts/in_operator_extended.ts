// Generated by Mochi v0.10.34 on 2025-07-22 06:54:38 GMT+7

export interface Result { a: number }
export interface M { a: number }
const xs: number[] = [1, 2, 3];
const ys: number[] = (() => {
  const result = []
  for (const x of xs) {
    if (((x % 2) == 1)) {
      result.push(x)
    }
  }
  const out = result
  return out
})();
console.log((tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)(ys.includes(1)));
console.log((tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)(ys.includes(2)));
const m: M = {"__name": "GenType1", a: 1};
console.log((tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)(("a" in m)));
console.log((tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)(("b" in m)));
const s: string = "hello";
console.log((tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)(s.includes("ell")));
console.log((tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)(s.includes("foo")));
