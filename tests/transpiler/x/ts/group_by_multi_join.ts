// Generated by Mochi v0.10.34 on 2025-07-22 00:29:56 GMT+7

export interface Result { id: number; name: string }
export interface Nation { id: number; name: string }
export interface Supplier { id: number; nation: number }
export interface Partsupp { part: number; supplier: number; cost: number; qty: number }
const nations: Nation[] = [{"__name": "GenType1", id: 1, name: "A"}, {"__name": "GenType1", id: 2, name: "B"}];
const suppliers: Supplier[] = [{"__name": "GenType1", id: 1, nation: 1}, {"__name": "GenType1", id: 2, nation: 2}];
const partsupp: Partsupp[] = [{"__name": "GenType1", part: 100, supplier: 1, cost: 10.0, qty: 2}, {"__name": "GenType1", part: 100, supplier: 2, cost: 20.0, qty: 1}, {"__name": "GenType1", part: 200, supplier: 1, cost: 5.0, qty: 3}];
const filtered: Result[] = (() => {
  const result: Result[] = []
  for (const ps of partsupp) {
  for (const s of suppliers) {
    if (!((s["id"] == ps["supplier"]))) continue
    for (const n of nations) {
      if (!((n["id"] == s["nation"]))) continue
      if (!((n["name"] == "A"))) continue
      result.push({"__name": "GenType1", part: ps["part"], value: (ps["cost"] * ps["qty"])})
    }
  }
  }
  return result
})();
const grouped: Record<string, any>[] = (() => {
  const groups: Record<string, {key: any; items: any[]}> = {}
  const order: string[] = []
  for (const x of filtered) {
    const k = x["part"]
    const ks = JSON.stringify(k)
    let g = groups[ks]
    if (!g) { g = {key: k, items: []}; groups[ks] = g; order.push(ks) }
    g.items.push(x)
  }
  const result: Result[] = []
  for (const ks of order) {
    const g = groups[ks]
    result.push({"__name": "GenType1", part: g["key"], total: (() => {
  const result = []
  for (const r of g["items"]) {
    result.push(r["value"])
  }
  const out = result
  return out
})().reduce((a, b) => a + b, 0.0)})
  }
  return result
})();
console.log("[" + grouped.map(v => { if (typeof v === 'string') return '\'' + v + '\''; if (typeof v === 'number') return Number.isInteger(v) ? String(v) : String(v); if (typeof v === 'boolean') return v ? 'True' : 'False'; if (typeof v === 'object') { if (v && v.__name) { const entries = Object.entries(v).filter(([k]) => k !== '__name'); return v.__name + ' {' + entries.map(([k,val]) => { if (typeof val === 'string') return k + ' = ' + '\'' + val + '\''; if (typeof val === 'number') return k + ' = ' + (Number.isInteger(val) ? String(val) : String(val)); if (typeof val === 'boolean') return k + ' = ' + (val ? 'True' : 'False'); return k + ' = ' + String(val); }).join(', ') + '}'; } let s = JSON.stringify(v).replace(/"/g, '\'' ).replace(/:/g, ': ').replace(/,/g, ', '); s = s.replace(/('[^']*(?:id|key)'\s*: )(-?[0-9]+)\.0([,}])/g, '$1$2$3'); return s } return String(v); }).join(', ') + "]");
