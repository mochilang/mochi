// Generated by Mochi v0.10.33 on 2025-07-21 18:23:25 GMT+7

export interface Item { cat: string; val: number; flag: boolean }
export interface Result { cat: any; share: number }
const items: Item[] = [{cat: "a", val: 10, flag: true}, {cat: "a", val: 5, flag: false}, {cat: "b", val: 20, flag: true}];
const result: Record<string, any>[] = (() => {
  const _groups: Record<string, {key: any; items: any[]}> = {}
  const _order: string[] = []
  for (const i of items) {
    const _k = i["cat"]
    const _ks = JSON.stringify(_k)
    let _g = _groups[_ks]
    if (!_g) { _g = {key: _k, items: []}; _groups[_ks] = _g; _order.push(_ks) }
    _g.items.push(i)
  }
  const result: Result[] = []
  const _pairs = _order.map(ks => { const g = _groups[ks]; return {g: g, key: g["key"]} })
  _pairs.sort((a,b)=>{const ak=a.key;const bk=b.key;if(ak<bk)return -1;if(ak>bk)return 1;const sak=JSON.stringify(ak);const sbk=JSON.stringify(bk);return sak<sbk?-1:sak>sbk?1:0})
  for (const p of _pairs) {
    const g = p.g
    result.push({cat: g["key"], share: Math.trunc((() => {
  const result = []
  for (const x of g["items"]) {
    result.push((x["flag"] ? x["val"] : 0))
  }
  const out = result
  return out
})().reduce((a, b) => a + b, 0.0) / (() => {
  const result = []
  for (const x of g["items"]) {
    result.push(x["val"])
  }
  const out = result
  return out
})().reduce((a, b) => a + b, 0.0))})
  }
  return result
})();
console.log([result.map((x) => JSON.stringify(x).replace(RegExp(":", "g"), ": ").replace(RegExp(",", "g"), ", ")).join(" ")].map(v => v === null ? 'nil' : typeof v === 'object' ? JSON.stringify(v).replace(/:/g, ': ').replace(/,/g, ', ') : v).join(' ').trimEnd());
