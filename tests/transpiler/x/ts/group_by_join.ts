// Generated by Mochi v0.10.33 on 2025-07-21 18:23:26 GMT+7

export interface Customer { id: number; name: string }
export interface Order { id: number; customerId: number }
export interface Result { name: any; count: number }
const customers: Customer[] = [{id: 1, name: "Alice"}, {id: 2, name: "Bob"}];
const orders: Order[] = [{id: 100, customerId: 1}, {id: 101, customerId: 1}, {id: 102, customerId: 2}];
const stats: Record<string, any>[] = (() => {
  const _groups: Record<string, {key: any; items: any[]}> = {}
  const _order: string[] = []
  let _items = orders.map(v => [v])
  { const _joined = []
    const _arr = customers
    for (const _left of _items) {
      const [o] = _left;
      let _m = false;
      for (let _ri=0; _ri < _arr.length; _ri++) {
        const c = _arr[_ri];
        if (!((o["customerId"] == c["id"]))) continue;
        _m = true; _joined.push([..._left, c]) }
    }
    _items = _joined;
  }
  for (const _it of _items) {
    const [o, c] = _it;
    const _k = c["name"]
    const _ks = JSON.stringify(_k)
    let _g = _groups[_ks]
    if (!_g) { _g = {key: _k, items: []}; _groups[_ks] = _g; _order.push(_ks) }
    _g.items.push({o, c})
  }
  const result: Result[] = []
  for (const ks of _order) {
    const g = _groups[ks]
    result.push({name: g["key"], count: (Array.isArray(g["items"]) || typeof g["items"] === 'string' ? g["items"].length : Object.keys(g["items"] ?? {}).length)})
  }
  return result
})();
console.log(["--- Orders per customer ---"].map(v => v === null ? 'nil' : typeof v === 'object' ? JSON.stringify(v).replace(/:/g, ': ').replace(/,/g, ', ') : v).join(' ').trimEnd());
for (const s of stats) {
  console.log([s["name"], "orders:", s["count"]].map(v => v === null ? 'nil' : typeof v === 'object' ? JSON.stringify(v).replace(/:/g, ': ').replace(/,/g, ', ') : v).join(' ').trimEnd());
}
