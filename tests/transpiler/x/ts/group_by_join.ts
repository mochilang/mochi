// Generated by Mochi v0.10.35 on 2025-07-22 14:07:03 GMT+7

export interface Result { id: number; name: string }
export interface Customer { id: number; name: string }
export interface Order { id: number; customerId: number }
const customers: Customer[] = [{id: 1, name: "Alice"}, {id: 2, name: "Bob"}];
const orders: Order[] = [{id: 100, customerId: 1}, {id: 101, customerId: 1}, {id: 102, customerId: 2}];
const stats: Record<string, any>[] = (() => {
  const groups = new Map<string, {key: any; items: any[]}>()
  let rows = orders.map(v => [v])
  { const joined = []
    const arr = customers
    for (const left of rows) {
      const [o] = left;
      let m = false;
      for (let ri=0; ri < arr.length; ri++) {
        const c = arr[ri];
        if (!((o["customerId"] == c["id"]))) continue;
        m = true; joined.push([...left, c]) }
    }
    rows = joined;
  }
  for (const it of rows) {
    const [o, c] = it;
    const k = c["name"]
    const ks = JSON.stringify(k)
    let g = groups.get(ks)
    if (!g) { g = {key: k, items: []}; groups.set(ks, g) }
    g.items.push({o, c})
  }
  let ordered = Array.from(groups.values())
  const result: Result[] = []
  for (const g of ordered) {
    result.push({name: g["key"], count: (Array.isArray(g["items"]) || typeof g["items"] === 'string' ? g["items"].length : Object.keys(g["items"] ?? {}).length)})
  }
  return result
})();
console.log(String("--- Orders per customer ---"));
for (const s of stats) {
  console.log((String(s["name"]) + " " + String("orders:") + " " + String(s["count"])).trim());
}
