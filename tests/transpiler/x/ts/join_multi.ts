// Generated by Mochi v0.10.32 on 2025-07-20 20:36:38 GMT+7

interface Customer { id: number; name: string };
interface Order { id: number; customerId: number };
interface Item { orderId: number; sku: string };
const customers: Customer[] = [{id: 1, name: "Alice"}, {id: 2, name: "Bob"}];
const orders: Order[] = [{id: 100, customerId: 1}, {id: 101, customerId: 2}];
const items: Item[] = [{orderId: 100, sku: "a"}, {orderId: 101, sku: "b"}];
const result: Record<string, any>[] = (() => {
  let _items = orders.map(v => [v])
  { const _joined = []
    const _arr = customers
    for (const _left of _items) {
      let _m = false;
      for (let _ri=0; _ri < _arr.length; _ri++) {
        const c = _arr[_ri];
        if (!((o["customerId"] == c["id"]))) continue;
        _m = true; _joined.push([..._left, c]) }
      }
    }
    _items = _joined }
  { const _joined = []
    const _arr = items
    for (const _left of _items) {
      let _m = false;
      for (let _ri=0; _ri < _arr.length; _ri++) {
        const i = _arr[_ri];
        if (!((o["id"] == i["orderId"]))) continue;
        _m = true; _joined.push([..._left, i]) }
      }
    }
    _items = _joined }
  let _rows = _items
  const result = []
  for (const r of _rows) { const [o, c, i] = r; result.push({name: c["name"], sku: i["sku"]}) }
  return result
})();
console.log("--- Multi Join ---");
for (const r of result) {
  console.log(r["name"], "bought item", r["sku"]);
}
