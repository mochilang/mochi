// Generated by Mochi v0.10.34 on 2025-07-22 06:54:40 GMT+7

export interface Result { id: number; name: string }
export interface Customer { id: number; name: string }
export interface Order { id: number; customerId: number; total: number }
const customers: Customer[] = [{"__name": "GenType1", id: 1, name: "Alice"}, {"__name": "GenType1", id: 2, name: "Bob"}, {"__name": "GenType1", id: 3, name: "Charlie"}, {"__name": "GenType1", id: 4, name: "Diana"}];
const orders: Order[] = [{"__name": "GenType1", id: 100, customerId: 1, total: 250}, {"__name": "GenType1", id: 101, customerId: 2, total: 125}, {"__name": "GenType1", id: 102, customerId: 1, total: 300}, {"__name": "GenType1", id: 103, customerId: 5, total: 80}];
const result: Result[] = (() => {
  let _items = orders.map(v => [v])
  { const _joined = []
    const _arr = customers
    const _matched = new Array(_arr.length).fill(false)
    for (const _left of _items) {
      const [o] = _left;
      let _m = false;
      for (let _ri=0; _ri < _arr.length; _ri++) {
        const c = _arr[_ri];
        if (!((o["customerId"] == c["id"]))) continue;
        _m = true; _matched[_ri] = true; _joined.push([..._left, c]) }
      if (!_m) _joined.push([..._left, null])
    }
    for (let _ri=0; _ri < _arr.length; _ri++) { if (!_matched[_ri]) {
      const _undef = Array(_items[0]?.length || 0).fill(null);
      _joined.push([..._undef, _arr[_ri]]) } }
    _items = _joined;
  }
  let _rows = _items
  const result: Result[] = []
  for (const r of _rows) { const [o, c] = r; result.push({"__name": "GenType1", order: o, customer: c}) }
  return result
})();
console.log((tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)("--- Outer Join using syntax ---"));
for (const row of result) {
  if (row["order"]) {
    if (row["customer"]) {
      console.log((tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)("Order"), (tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)(row["order"]["id"]), (tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)("by"), (tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)(row["customer"]["name"]), (tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)("- $"), (tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)(row["order"]["total"]));
    } else {
      console.log((tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)("Order"), (tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)(row["order"]["id"]), (tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)("by"), (tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)("Unknown"), (tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)("- $"), (tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)(row["order"]["total"]));
    }
  } else {
    console.log((tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)("Customer"), (tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)(row["customer"]["name"]), (tmp => typeof tmp === 'number' && Number.isInteger(tmp) ? tmp.toFixed(1) : tmp)("has no orders"));
  }
}
