// Generated by Mochi v0.10.33 on 2025-07-21 18:23:25 GMT+7

export interface People { name: string; age: number; city: string }
export interface Result { city: any; count: number; avg_age: number }
const people: People[] = [{name: "Alice", age: 30, city: "Paris"}, {name: "Bob", age: 15, city: "Hanoi"}, {name: "Charlie", age: 65, city: "Paris"}, {name: "Diana", age: 45, city: "Hanoi"}, {name: "Eve", age: 70, city: "Paris"}, {name: "Frank", age: 22, city: "Hanoi"}];
const stats: Record<string, any>[] = (() => {
  const _groups: Record<string, {key: any; items: any[]}> = {}
  const _order: string[] = []
  for (const person of people) {
    const _k = person["city"]
    const _ks = JSON.stringify(_k)
    let _g = _groups[_ks]
    if (!_g) { _g = {key: _k, items: []}; _groups[_ks] = _g; _order.push(_ks) }
    _g.items.push(person)
  }
  const result: Result[] = []
  for (const ks of _order) {
    const g = _groups[ks]
    result.push({city: g["key"], count: (Array.isArray(g["items"]) || typeof g["items"] === 'string' ? g["items"].length : Object.keys(g["items"] ?? {}).length), avg_age: (() => { const arr = (() => {
  const result = []
  for (const p of g["items"]) {
    result.push(p["age"])
  }
  const out = result
  return out
})(); return arr.reduce((a, b) => a + b, 0.0) / arr.length; })()})
  }
  return result
})();
console.log(["--- People grouped by city ---"].map(v => v === null ? 'nil' : typeof v === 'object' ? JSON.stringify(v).replace(/:/g, ': ').replace(/,/g, ', ') : v).join(' ').trimEnd());
for (const s of stats) {
  console.log([s["city"], ": count =", s["count"], ", avg_age =", s["avg_age"]].map(v => v === null ? 'nil' : typeof v === 'object' ? JSON.stringify(v).replace(/:/g, ': ').replace(/,/g, ', ') : v).join(' ').trimEnd());
}
