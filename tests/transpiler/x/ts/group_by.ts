// Generated by Mochi v0.10.34 on 2025-07-22 05:30:32 GMT+7

export interface Result { name: string; age: number; city: string }
export interface People { name: string; age: number; city: string }
const people: People[] = [{"__name": "GenType1", name: "Alice", age: 30, city: "Paris"}, {"__name": "GenType1", name: "Bob", age: 15, city: "Hanoi"}, {"__name": "GenType1", name: "Charlie", age: 65, city: "Paris"}, {"__name": "GenType1", name: "Diana", age: 45, city: "Hanoi"}, {"__name": "GenType1", name: "Eve", age: 70, city: "Paris"}, {"__name": "GenType1", name: "Frank", age: 22, city: "Hanoi"}];
const stats: Record<string, any>[] = (() => {
  const groups = new Map<string, {key: any; items: any[]}>()
  for (const person of people) {
    const k = person["city"]
    const ks = JSON.stringify(k)
    let g = groups.get(ks)
    if (!g) { g = {key: k, items: []}; groups.set(ks, g) }
    g.items.push(person)
  }
  let ordered = Array.from(groups.values())
  const result: Result[] = []
  for (const g of ordered) {
    result.push({"__name": "GenType1", city: g["key"], count: (Array.isArray(g["items"]) || typeof g["items"] === 'string' ? g["items"].length : Object.keys(g["items"] ?? {}).length), avg_age: (() => { const arr = (() => {
  const result = []
  for (const p of g["items"]) {
    result.push(p["age"])
  }
  const out = result
  return out
})(); return arr.reduce((a, b) => a + b, 0.0) / arr.length; })()})
  }
  return result
})();
console.log(["--- People grouped by city ---"].map(v => { if (v === null) return 'nil'; if (typeof v === 'boolean') return v ? 'True' : 'False'; if (typeof v === 'number') return Number.isInteger(v) ? v.toFixed(1) : String(v); if (typeof v === 'object') return JSON.stringify(v).replace(/:/g, ': ').replace(/,/g, ', '); if (typeof v === 'string') return '\'' + v + '\''; return String(v); }).join(' ').trimEnd());
for (const s of stats) {
  console.log([s["city"], ": count =", s["count"], ", avg_age =", s["avg_age"]].map(v => { if (v === null) return 'nil'; if (typeof v === 'boolean') return v ? 'True' : 'False'; if (typeof v === 'number') return Number.isInteger(v) ? v.toFixed(1) : String(v); if (typeof v === 'object') return JSON.stringify(v).replace(/:/g, ': ').replace(/,/g, ', '); if (typeof v === 'string') return '\'' + v + '\''; return String(v); }).join(' ').trimEnd());
}
