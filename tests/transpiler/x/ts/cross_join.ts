// Generated by Mochi v0.10.34 on 2025-07-22 10:27:35 GMT+7

export interface Result { id: number; name: string }
export interface Customer { id: number; name: string }
export interface Order { id: number; customerId: number; total: number }
const customers: Customer[] = [{id: 1, name: "Alice"}, {id: 2, name: "Bob"}, {id: 3, name: "Charlie"}];
const orders: Order[] = [{id: 100, customerId: 1, total: 250}, {id: 101, customerId: 2, total: 125}, {id: 102, customerId: 1, total: 300}];
const result: Result[] = (() => {
  let _items = orders.map(v => [v])
  { const _next = []
    for (const it of _items) {
      for (const c of customers) { _next.push([...it, c]) }
    }
    _items = _next }
  let _rows = _items
  const result: Result[] = []
  for (const r of _rows) { const [o, c] = r; result.push({orderId: o["id"], orderCustomerId: o["customerId"], pairedCustomerName: c["name"], orderTotal: o["total"]}) }
  return result
})();
console.log(((v => typeof v === 'string' ? v : JSON.stringify(v))("--- Cross Join: All order-customer pairs ---")));
for (const entry of result) {
  console.log(((v => typeof v === 'string' ? v : JSON.stringify(v))("Order")), ((v => typeof v === 'string' ? v : JSON.stringify(v))(entry["orderId"])), ((v => typeof v === 'string' ? v : JSON.stringify(v))("(customerId:")), ((v => typeof v === 'string' ? v : JSON.stringify(v))(entry["orderCustomerId"])), ((v => typeof v === 'string' ? v : JSON.stringify(v))(", total: $")), ((v => typeof v === 'string' ? v : JSON.stringify(v))(entry["orderTotal"])), ((v => typeof v === 'string' ? v : JSON.stringify(v))(") paired with")), ((v => typeof v === 'string' ? v : JSON.stringify(v))(entry["pairedCustomerName"])));
}
