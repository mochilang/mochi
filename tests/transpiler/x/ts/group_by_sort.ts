// Generated by Mochi v0.10.34 on 2025-07-22 09:09:20 GMT+7

export interface Anon { cat: string; val: number }
export interface Item { cat: string; val: number }
export interface Result { cat: any; total: number }
const items: Item[] = [{"__name": "GenType2", cat: "a", val: 3}, {"__name": "GenType2", cat: "a", val: 1}, {"__name": "GenType2", cat: "b", val: 5}, {"__name": "GenType2", cat: "b", val: 2}];
const grouped: Record<string, any>[] = (() => {
  const groups = new Map<string, {key: any; items: any[]}>()
  for (const i of items) {
    const k = i["cat"]
    const ks = JSON.stringify(k)
    let g = groups.get(ks)
    if (!g) { g = {key: k, items: []}; groups.set(ks, g) }
    g.items.push(i)
  }
  let ordered = Array.from(groups.values())
  const result: Result[] = []
  const pairs = ordered.map(g => ({g, key: -(() => {
  const result = []
  for (const x of g["items"]) {
    result.push(x["val"])
  }
  const out = result
  return out
})().reduce((a, b) => a + b, 0.0)}))
  pairs.sort((a,b)=>{const ak=a.key;const bk=b.key;if(ak<bk)return -1;if(ak>bk)return 1;const sak=JSON.stringify(ak);const sbk=JSON.stringify(bk);return sak<sbk?-1:sak>sbk?1:0})
  ordered = pairs.map(p => p.g)
  for (const g of ordered) {
    result.push({"__name": "GenType3", cat: g["key"], total: (() => {
  const result = []
  for (const x of g["items"]) {
    result.push(x["val"])
  }
  const out = result
  return out
})().reduce((a, b) => a + b, 0.0)})
  }
  return result
})();
console.log("[" + grouped.map(v => {
        if (typeof v === 'number' && Number.isInteger(v)) return String(v);
        if (v && typeof v === 'object' && '__name' in v) {
          const {__name, ...rest} = v as any;
          if (/^GenType\d+$/.test(String(__name))) {
            return '{' + Object.entries(rest).map(([k,val]) => {
              if (typeof val === 'number' && Number.isInteger(val)) return k + ' = ' + String(val);
              if (typeof val === 'string') return k + ' = "' + val + '"';
              return k + ' = ' + String(val);
            }).join(', ') + '}';
          }
          return __name + ' {' + Object.entries(rest).map(([k,val]) => {
            if (typeof val === 'number' && Number.isInteger(val)) return k + ' = ' + String(val);
            if (typeof val === 'string') return k + ' = "' + val + '"';
            return k + ' = ' + String(val);
          }).join(', ') + '}';
        }
        if (typeof v === 'string') return '"' + v + '"';
        return String(v);
      }).join(', ') + "]");
