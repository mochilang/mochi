# Generated by Mochi transpiler on 2025-07-21 22:29 +0700
customers = [%{id: 1, name: "Alice"}, %{id: 2, name: "Bob"}, %{id: 3, name: "Charlie"}, %{id: 4, name: "Diana"}]
orders = [%{id: 100, customerId: 1, total: 250}, %{id: 101, customerId: 2, total: 125}, %{id: 102, customerId: 1, total: 300}, %{id: 103, customerId: 5, total: 80}]
result = Enum.concat([Enum.flat_map(orders, fn o ->
  matches = Enum.filter(customers, fn c -> o.customerId == c.id end)
  list = if Enum.empty?(matches), do: [nil], else: matches
  Enum.map(list, fn c -> %{order: o, customer: c} end)
end), Enum.flat_map(customers, fn c ->
  exists = Enum.any?(orders, fn o -> o.customerId == c.id end)
  if exists do
    []
  else
    o = nil
    [%{order: o, customer: c}]
  end
end)])
IO.puts("--- Outer Join using syntax ---")
Enum.each(result, fn row ->
  if row.order do
    if row.customer do
      IO.puts("Order #{Kernel.inspect(row.order.id)} by #{Kernel.inspect(row.customer.name)} - $ #{Kernel.inspect(row.order.total)}")
    else
      IO.puts("Order #{Kernel.inspect(row.order.id)} by Unknown - $ #{Kernel.inspect(row.order.total)}")
    end
  else
    IO.puts("Customer #{Kernel.inspect(row.customer.name)} has no orders")
  end
end)
