# Generated by Mochi transpiler on 2025-07-21 19:39 +0700
defmodule Main do
  def main() do
    people = [%{name: "Alice", city: "Paris"}, %{name: "Bob", city: "Hanoi"}, %{name: "Charlie", city: "Paris"}, %{name: "Diana", city: "Hanoi"}, %{name: "Eve", city: "Paris"}, %{name: "Frank", city: "Hanoi"}, %{name: "George", city: "Paris"}]
    big = Enum.group_by(people, fn p -> p.city end) |> Enum.map(fn {key, items} -> %{key: key, items: items} end) |> Enum.filter(fn g -> Enum.count(g.items) >= 4 end) |> Enum.map(fn g ->
      g = g
      %{city: g.key, num: Enum.count(g.items)}
    end)
    IO.puts(json_encode(big))
  end
  defp json_encode(v) when is_list(v) do
    "[" <> Enum.map_join(v, ", ", &json_encode/1) <> "]"
  end
  defp json_encode(v) when is_map(v) do
    "{" <> Enum.map_join(v, ", ", fn {k, val} -> "\"" <> to_string(k) <> "\": " <> json_encode(val) end) <> "}"
  end
  defp json_encode(v) when is_binary(v), do: inspect(v)
  defp json_encode(v), do: to_string(v)
end
Main.main()
