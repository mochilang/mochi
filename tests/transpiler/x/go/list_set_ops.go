//go:build ignore

// Generated by Mochi v0.10.31 on 2025-07-19 18:39:52 GMT+7
package main

import (
	"fmt"
	"math"
)

func union(a, b []int) []int {
	m := map[int]bool{}
	res := []int{}
	for _, n := range a {
		if !m[n] {
			m[n] = true
			res = append(res, n)
		}
	}
	for _, n := range b {
		if !m[n] {
			m[n] = true
			res = append(res, n)
		}
	}
	return res
}

func unionAll(a, b []int) []int {
	res := make([]int, len(a))
	copy(res, a)
	res = append(res, b...)
	return res
}

func except(a, b []int) []int {
	m := map[int]bool{}
	for _, n := range b {
		m[n] = true
	}
	res := []int{}
	for _, n := range a {
		if !m[n] {
			res = append(res, n)
		}
	}
	return res
}

func intersect(a, b []int) []int {
	m := map[int]bool{}
	for _, n := range a {
		m[n] = true
	}
	res := []int{}
	for _, n := range b {
		if m[n] {
			res = append(res, n)
		}
	}
	return res
}

func mochiPrint(v ...any) {
	for i, val := range v {
		if i > 0 {
			fmt.Print(" ")
		}
		switch x := val.(type) {
		case bool:
			if x {
				fmt.Print(1)
			} else {
				fmt.Print("nil")
			}
		case float64:
			if math.Trunc(x) == x {
				fmt.Printf("%.1f", x)
			} else {
				fmt.Printf("%v", x)
			}
		case []int:
			for j, n := range x {
				if j > 0 {
					fmt.Print(" ")
				}
				fmt.Print(n)
			}
		default:
			fmt.Print(val)
		}
	}
	fmt.Println()
}

func main() {
	mochiPrint(union([]int{1, 2}, []int{2, 3}))
	mochiPrint(except([]int{1, 2, 3}, []int{2}))
	mochiPrint(intersect([]int{1, 2, 3}, []int{2, 4}))
	mochiPrint(len(unionAll([]int{1, 2}, []int{2, 3})))
}
