//go:build ignore

// Generated by Mochi v0.10.31 on 2025-07-19 20:12:34 GMT+7
package main

import (
	"fmt"
	"strings"
)

func union(a, b []int) []int {
	m := map[int]bool{}
	res := []int{}
	for _, n := range a {
		if !m[n] {
			m[n] = true
			res = append(res, n)
		}
	}
	for _, n := range b {
		if !m[n] {
			m[n] = true
			res = append(res, n)
		}
	}
	return res
}

func unionAll(a, b []int) []int {
	res := make([]int, len(a))
	copy(res, a)
	res = append(res, b...)
	return res
}

func except(a, b []int) []int {
	m := map[int]bool{}
	for _, n := range b {
		m[n] = true
	}
	res := []int{}
	for _, n := range a {
		if !m[n] {
			res = append(res, n)
		}
	}
	return res
}

func intersect(a, b []int) []int {
	m := map[int]bool{}
	for _, n := range a {
		m[n] = true
	}
	res := []int{}
	for _, n := range b {
		if m[n] {
			res = append(res, n)
		}
	}
	return res
}

func formatValue(v any) string {
	if v == nil {
		return "nil"
	}
	switch x := v.(type) {
	case bool:
		if x {
			return "1"
		}
		return "0"
	case []int:
		parts := make([]string, len(x))
		for i, n := range x {
			parts[i] = fmt.Sprint(n)
		}
		return strings.Join(parts, " ")
	default:
		return fmt.Sprint(v)
	}
}

func printValues(vals ...any) {
	out := make([]string, len(vals))
	for i, v := range vals {
		out[i] = formatValue(v)
	}
	fmt.Println(strings.Join(out, " "))
}

func main() {
	printValues(union([]int{1, 2}, []int{2, 3}))
	printValues(except([]int{1, 2, 3}, []int{2}))
	printValues(intersect([]int{1, 2, 3}, []int{2, 4}))
	printValues(len(unionAll([]int{1, 2}, []int{2, 3})))
}
