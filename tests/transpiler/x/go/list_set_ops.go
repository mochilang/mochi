//go:build ignore

// Generated by Mochi v0.10.31 on 2025-07-19 13:38:44 GMT+7
package main

import (
	"fmt"
	"math"
)

func union(a, b []int) []int {
	m := map[int]bool{}
	res := []int{}
	for _, n := range a {
		if !m[n] {
			m[n] = true
			res = append(res, n)
		}
	}
	for _, n := range b {
		if !m[n] {
			m[n] = true
			res = append(res, n)
		}
	}
	return res
}

func unionAll(a, b []int) []int {
	res := make([]int, len(a))
	copy(res, a)
	res = append(res, b...)
	return res
}

func except(a, b []int) []int {
	m := map[int]bool{}
	for _, n := range b {
		m[n] = true
	}
	res := []int{}
	for _, n := range a {
		if !m[n] {
			res = append(res, n)
		}
	}
	return res
}

func intersect(a, b []int) []int {
	m := map[int]bool{}
	for _, n := range a {
		m[n] = true
	}
	res := []int{}
	for _, n := range b {
		if m[n] {
			res = append(res, n)
		}
	}
	return res
}

func mochiPrint(v any) {
	switch x := v.(type) {
	case bool:
		if x {
			fmt.Println(1)
		} else {
			fmt.Println("nil")
		}
	case float64:
		if math.Trunc(x) == x {
			fmt.Printf("%.1f\n", x)
		} else {
			fmt.Printf("%v\n", x)
		}
	case []int:
		for i, n := range x {
			if i > 0 {
				fmt.Print(" ")
			}
			fmt.Print(n)
		}
		fmt.Println()
	default:
		fmt.Println(v)
	}
}

func main() {
	mochiPrint(union([]int{1, 2}, []int{2, 3}))
	mochiPrint(except([]int{1, 2, 3}, []int{2}))
	mochiPrint(intersect([]int{1, 2, 3}, []int{2, 4}))
	mochiPrint(len(unionAll([]int{1, 2}, []int{2, 3})))
}
