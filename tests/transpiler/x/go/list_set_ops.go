//go:build ignore

// Generated by Mochi v0.10.31 on 2025-07-20 08:48:53 GMT+7
package main

import (
	"fmt"
	"strings"
)

func union[T comparable](a, b []T) []T {
	m := map[T]struct{}{}
	res := []T{}
	for _, n := range a {
		if _, ok := m[n]; !ok {
			m[n] = struct{}{}
			res = append(res, n)
		}
	}
	for _, n := range b {
		if _, ok := m[n]; !ok {
			m[n] = struct{}{}
			res = append(res, n)
		}
	}
	return res
}

func unionAll[T comparable](a, b []T) []T {
	res := make([]T, len(a))
	copy(res, a)
	res = append(res, b...)
	return res
}

func except[T comparable](a, b []T) []T {
	m := map[T]struct{}{}
	for _, n := range b {
		m[n] = struct{}{}
	}
	res := []T{}
	for _, n := range a {
		if _, ok := m[n]; !ok {
			res = append(res, n)
		}
	}
	return res
}

func intersect[T comparable](a, b []T) []T {
	m := map[T]struct{}{}
	for _, n := range a {
		m[n] = struct{}{}
	}
	res := []T{}
	for _, n := range b {
		if _, ok := m[n]; ok {
			res = append(res, n)
		}
	}
	return res
}

func main() {
	fmt.Println(strings.Trim(fmt.Sprint(union([]int{1, 2}, []int{2, 3})), "[]"))
	fmt.Println(strings.Trim(fmt.Sprint(except([]int{1, 2, 3}, []int{2})), "[]"))
	fmt.Println(strings.Trim(fmt.Sprint(intersect([]int{1, 2, 3}, []int{2, 4})), "[]"))
	fmt.Println(len(unionAll([]int{1, 2}, []int{2, 3})))
}
