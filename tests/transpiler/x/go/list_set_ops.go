//go:build ignore

// Generated by Mochi v0.10.31 on 2025-07-20 13:57:12 GMT+7
package main

import (
    "fmt"
    "strings"
)

func main() {
    fmt.Println(func() string { var sb strings.Builder; sb.WriteByte('['); for i, v := range func() []int { m := map[int]struct{}{}; res := []int{}; for _, v := range []int{1, 2} { if _, ok := m[v]; !ok { m[v] = struct{}{}; res = append(res, v) } } for _, v := range []int{2, 3} { if _, ok := m[v]; !ok { m[v] = struct{}{}; res = append(res, v) } } return res }() { if i > 0 { sb.WriteString(", ") }; sb.WriteString(fmt.Sprint(v)) }; sb.WriteByte(']'); return sb.String() }())
    fmt.Println(func() string { var sb strings.Builder; sb.WriteByte('['); for i, v := range func() []int { m := map[int]struct{}{}; for _, v := range []int{2} { m[v] = struct{}{} } res := []int{}; for _, v := range []int{1, 2, 3} { if _, ok := m[v]; !ok { res = append(res, v) } } return res }() { if i > 0 { sb.WriteString(", ") }; sb.WriteString(fmt.Sprint(v)) }; sb.WriteByte(']'); return sb.String() }())
    fmt.Println(func() string { var sb strings.Builder; sb.WriteByte('['); for i, v := range func() []int { m := map[int]struct{}{}; for _, v := range []int{1, 2, 3} { m[v] = struct{}{} } res := []int{}; for _, v := range []int{2, 4} { if _, ok := m[v]; ok { res = append(res, v) } } return res }() { if i > 0 { sb.WriteString(", ") }; sb.WriteString(fmt.Sprint(v)) }; sb.WriteByte(']'); return sb.String() }())
    fmt.Println(len(func() []int { res := make([]int, len([]int{1, 2}); copy(res, []int{1, 2}); res = append(res, []int{2, 3}...); return res }()))
}
