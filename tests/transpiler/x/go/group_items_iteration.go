//go:build ignore

// Generated by Mochi v0.10.34 on 2025-07-22 06:50:49 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"sort"
	"strings"
)

var data []Data = []Data{Data{
	Tag: "a",
	Val: 1,
}, Data{
	Tag: "a",
	Val: 2,
}, Data{
	Tag: "b",
	Val: 3,
}}

type Data struct {
	Tag string `json:"tag"`
	Val int    `json:"val"`
}

type GroupGroup struct {
	Key   string `json:"key"`
	Items []Data `json:"items"`
}

var tmp []any = []any{}

func main() {
	var groups []GroupGroup = func() []GroupGroup {
		groups := map[string]GroupGroup{}
		order := []string{}
		for _, d := range data {
			k := fmt.Sprint(d.Tag)
			grp, ok := groups[k]
			if !ok {
				grp = GroupGroup{Key: d.Tag, Items: []Data{}}
				groups[k] = grp
				order = append(order, k)
			}
			grp.Items = append(grp.Items, d)
			groups[k] = grp
		}
		res := []GroupGroup{}
		for _, k := range order {
			g := groups[k]
			res = append(res, g)
		}
		return res
	}()
	for _, g := range groups {
		var total int = 0
		for _, x := range g.Items {
			total = (total + x.Val)
		}
		tmp = append(tmp, map[string]any{"tag": g.Key, "total": total})
	}
	var result []any = func() []any {
		type pair struct {
			Key any
			Val any
		}
		pairs := []pair{}
		for _, r := range tmp {
			pairs = append(pairs, pair{r.(map[string]any)["tag"], r})
		}
		sort.Slice(pairs, func(i, j int) bool { return fmt.Sprint(pairs[i].Key) < fmt.Sprint(pairs[j].Key) })
		res := make([]any, len(pairs))
		for i, p := range pairs {
			res[i] = p.Val
		}
		return res
	}()
	fmt.Println(func() string {
		b, _ := json.Marshal(result)
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		s = strings.ReplaceAll(s, "\"", "'")
		return s
	}())
}
