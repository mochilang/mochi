//go:build ignore

// Generated by Mochi v0.10.33 on 2025-07-21 16:15:44 GMT+7
package main

import (
	"fmt"
	"sort"
	"strings"
)

var data []Data = []Data{Data{
	Tag: "a",
	Val: 1,
}, Data{
	Tag: "a",
	Val: 2,
}, Data{
	Tag: "b",
	Val: 3,
}}

type Data struct {
	Tag string `json:"tag"`
	Val int    `json:"val"`
}

var groups []struct {
	Key   any
	Items []Data
} = func() []struct {
	Key   any
	Items []Data
} { groups := map[string]struct {
	Key   any
	Items []Data
}{}; order := []string{}; for _, d := range data {
	k := fmt.Sprint(d.Tag)
	grp, ok := groups[k]
	if !ok {
		grp = struct {
			Key   any
			Items []Data
		}{Key: d.Tag, Items: []Data{}}
		groups[k] = grp
		order = append(order, k)
	}
	grp.Items = append(grp.Items, d)
	groups[k] = grp
}; res := []struct {
	Key   any
	Items []Data
}{}; for _, k := range order {
	g := groups[k]
	res = append(res, g)
}; return res }()

var tmp []any = []any{}

var result []any = func() []any {
	type pair struct {
		Key any
		Val any
	}
	tmp := []pair{}
	for _, r := range tmp {
		tmp = append(tmp, pair{r.Tag, r})
	}
	sort.Slice(tmp, func(i, j int) bool { return tmp[i].Key < tmp[j].Key })
	res := make([]any, len(tmp))
	for i, p := range tmp {
		res[i] = p.Val
	}
	return res
}()

func main() {
	for _, g := range groups {
		var total int = 0
		for _, x := range g.Items {
			total = (total + x.Val)
		}
		tmp = append(tmp, map[any]any{"tag": g.Key, "total": total})
	}
	fmt.Println(func() string {
		var sb strings.Builder
		sb.WriteByte('[')
		for i, v := range result {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(fmt.Sprint(v))
		}
		sb.WriteByte(']')
		return sb.String()
	}())
}
