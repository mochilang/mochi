//go:build ignore

// Generated by Mochi v0.10.32 on 2025-07-21 12:28:13 GMT+7
package main

import (
	"encoding/json"
	"fmt"
)

var people []People = []People{People{
	Name: "Alice",
	City: "Paris",
}, People{
	Name: "Bob",
	City: "Hanoi",
}, People{
	Name: "Charlie",
	City: "Paris",
}, People{
	Name: "Diana",
	City: "Hanoi",
}, People{
	Name: "Eve",
	City: "Paris",
}, People{
	Name: "Frank",
	City: "Hanoi",
}, People{
	Name: "George",
	City: "Paris",
}}

type People struct {
	Name string `json:"name"`
	City string `json:"city"`
}

var big []Big = func() []Big {
	groups := map[string]*GGroup{}
	order := []string{}
	for _, p := range people {
		key := p.City
		ks := fmt.Sprint(key)
		g, ok := groups[ks]
		if !ok {
			g = &GGroup{Key: key}
			groups[ks] = g
			order = append(order, ks)
		}
		g.Items = append(g.Items, p)
	}
	res := make([]Big, 0, len(order))
	for _, ks := range order {
		g := groups[ks]
		if len(g.Items) >= 4 {
			res = append(res, Big{
				City: g.Key,
				Num:  len(g.Items),
			})
		}
	}
	return res
}()

type GGroup struct {
	Key   string   `json:"key"`
	Items []People `json:"items"`
}

type Big struct {
	City string `json:"city"`
	Num  int    `json:"num"`
}

func main() {
	func() { b, _ := json.MarshalIndent(big, "", "  "); fmt.Println(string(b)) }()
}
