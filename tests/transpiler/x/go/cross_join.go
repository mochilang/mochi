//go:build ignore

// Generated by Mochi v0.10.36 on 2025-07-22 18:26:25 GMT+7
package main

import (
	"fmt"
)

var customers []Customer = []Customer{Customer{
	ID:   1,
	Name: "Alice",
}, Customer{
	ID:   2,
	Name: "Bob",
}, Customer{
	ID:   3,
	Name: "Charlie",
}}

type Customer struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

var orders []Order = []Order{Order{
	ID:         100,
	CustomerID: 1,
	Total:      250,
}, Order{
	ID:         101,
	CustomerID: 2,
	Total:      125,
}, Order{
	ID:         102,
	CustomerID: 1,
	Total:      300,
}}

type Order struct {
	ID         int `json:"id"`
	CustomerID int `json:"customerId"`
	Total      int `json:"total"`
}

type Result struct {
	OrderID            int    `json:"orderId"`
	OrderCustomerID    int    `json:"orderCustomerId"`
	PairedCustomerName string `json:"pairedCustomerName"`
	OrderTotal         int    `json:"orderTotal"`
}

func main() {
	var result []Result = func() []Result {
		res := []Result{}
		for _, o := range orders {
			for _, c := range customers {
				res = append(res, Result{
					OrderID:            o.ID,
					OrderCustomerID:    o.CustomerID,
					PairedCustomerName: c.Name,
					OrderTotal:         o.Total,
				})
			}
		}
		return res
	}()
	fmt.Println("--- Cross Join: All order-customer pairs ---")
	for _, entry := range result {
		fmt.Println("Order", entry.OrderID, "(customerId:", entry.OrderCustomerID, ", total: $", entry.OrderTotal, ") paired with", entry.PairedCustomerName)
	}
}
