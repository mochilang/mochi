//go:build ignore

// Generated by Mochi v0.10.32 on 2025-07-20 21:36:21 GMT+7
package main

import (
	"fmt"
	"strings"
)

var customers []Customer = []Customer{Customer{
	ID:   1,
	Name: "Alice",
}, Customer{
	ID:   2,
	Name: "Bob",
}, Customer{
	ID:   3,
	Name: "Charlie",
}}

type Customer struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

var orders []Order = []Order{Order{
	ID:         100,
	CustomerID: 1,
	Total:      250,
}, Order{
	ID:         101,
	CustomerID: 2,
	Total:      125,
}, Order{
	ID:         102,
	CustomerID: 1,
	Total:      300,
}}

type Order struct {
	ID         int `json:"id"`
	CustomerID int `json:"customerId"`
	Total      int `json:"total"`
}

var result []Result = func() []Result {
	_res := []Result{}
	for _, o := range orders {
		for _, c := range customers {
			_res = append(_res, Result{
				OrderID:            o.ID,
				OrderCustomerID:    o.CustomerID,
				PairedCustomerName: c.Name,
				OrderTotal:         o.Total,
			})
		}
	}
	return _res
}()

type Result struct {
	OrderID            int `json:"orderId"`
	OrderCustomerID    int `json:"orderCustomerId"`
	PairedCustomerName any `json:"pairedCustomerName"`
	OrderTotal         int `json:"orderTotal"`
}

func main() {
	fmt.Println(strings.TrimSpace(fmt.Sprint("--- Cross Join: All order-customer pairs ---")))
	for _, entry := range result {
		fmt.Println(strings.TrimSpace(fmt.Sprint("Order", " ", entry.OrderID, " ", "(customerId:", " ", entry.OrderCustomerID, " ", ", total: $", " ", entry.OrderTotal, " ", ") paired with", " ", entry.PairedCustomerName)))
	}
}
