//go:build ignore

// Generated by Mochi v0.10.36 on 2025-07-22 18:26:29 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"strings"
)

var nations []Nation = []Nation{Nation{
	ID:   1,
	Name: "A",
}, Nation{
	ID:   2,
	Name: "B",
}}

type Nation struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

var suppliers []Supplier = []Supplier{Supplier{
	ID:     1,
	Nation: 1,
}, Supplier{
	ID:     2,
	Nation: 2,
}}

type Supplier struct {
	ID     int `json:"id"`
	Nation int `json:"nation"`
}

var partsupp []Partsupp = []Partsupp{Partsupp{
	Part:     100,
	Supplier: 1,
	Cost:     10.0,
	Qty:      2,
}, Partsupp{
	Part:     100,
	Supplier: 2,
	Cost:     20.0,
	Qty:      1,
}, Partsupp{
	Part:     200,
	Supplier: 1,
	Cost:     5.0,
	Qty:      3,
}}

type Partsupp struct {
	Part     int     `json:"part"`
	Supplier int     `json:"supplier"`
	Cost     float64 `json:"cost"`
	Qty      int     `json:"qty"`
}

type Filtered struct {
	Part  int     `json:"part"`
	Value float64 `json:"value"`
}

type Grouped struct {
	Part  int     `json:"part"`
	Total float64 `json:"total"`
}

func main() {
	var filtered []Filtered = func() []Filtered {
		res := []Filtered{}
		for _, ps := range partsupp {
			for _, s := range suppliers {
				if s.ID == ps.Supplier {
					for _, n := range nations {
						if n.ID == s.Nation {
							if n.Name == "A" {
								res = append(res, Filtered{
									Part:  ps.Part,
									Value: (ps.Cost * float64(ps.Qty)),
								})
							}
						}
					}
				}
			}
		}
		return res
	}()
	var grouped []Grouped = func() []Grouped {
		groups := map[string]struct {
			Key   int
			Items []Filtered
		}{}
		order := []string{}
		for _, x := range filtered {
			k := fmt.Sprint(x.Part)
			grp, ok := groups[k]
			if !ok {
				grp = struct {
					Key   int
					Items []Filtered
				}{Key: x.Part, Items: []Filtered{}}
				groups[k] = grp
				order = append(order, k)
			}
			grp.Items = append(grp.Items, x)
			groups[k] = grp
		}
		res := []Grouped{}
		for _, k := range order {
			g := groups[k]
			res = append(res, Grouped{
				Part: g.Key,
				Total: func() float64 {
					s := 0.0
					for _, n := range func() []float64 {
						res := []float64{}
						for _, r := range g.Items {
							res = append(res, r.Value)
						}
						return res
					}() {
						s += n
					}
					return s
				}(),
			})
		}
		return res
	}()
	fmt.Println(func() string {
		b, _ := json.Marshal(grouped)
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		s = strings.ReplaceAll(s, "\"", "'")
		return s
	}())
}
