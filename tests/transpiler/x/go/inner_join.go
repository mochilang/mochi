//go:build ignore

// Generated by Mochi v0.10.32 on 2025-07-20 21:36:29 GMT+7
package main

import (
	"fmt"
	"strings"
)

var customers []Customer = []Customer{Customer{
	ID:   1,
	Name: "Alice",
}, Customer{
	ID:   2,
	Name: "Bob",
}, Customer{
	ID:   3,
	Name: "Charlie",
}}

type Customer struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

var orders []Order = []Order{Order{
	ID:         100,
	CustomerID: 1,
	Total:      250,
}, Order{
	ID:         101,
	CustomerID: 2,
	Total:      125,
}, Order{
	ID:         102,
	CustomerID: 1,
	Total:      300,
}, Order{
	ID:         103,
	CustomerID: 4,
	Total:      80,
}}

type Order struct {
	ID         int `json:"id"`
	CustomerID int `json:"customerId"`
	Total      int `json:"total"`
}

var result []Result = func() []Result {
	_res := []Result{}
	for _, o := range orders {
		for _, c := range customers {
			if o.CustomerID == c.ID {
				_res = append(_res, Result{
					OrderID:      o.ID,
					CustomerName: c.Name,
					Total:        o.Total,
				})
			}
		}
	}
	return _res
}()

type Result struct {
	OrderID      int `json:"orderId"`
	CustomerName any `json:"customerName"`
	Total        int `json:"total"`
}

func main() {
	fmt.Println(strings.TrimSpace(fmt.Sprint("--- Orders with customer info ---")))
	for _, entry := range result {
		fmt.Println(strings.TrimSpace(fmt.Sprint("Order", " ", entry.OrderID, " ", "by", " ", entry.CustomerName, " ", "- $", " ", entry.Total)))
	}
}
