//go:build ignore

// Generated by Mochi v0.10.34 on 2025-07-22 00:28:06 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"sort"
	"strings"
)

var items []Item = []Item{Item{
	A:   "x",
	B:   1,
	Val: 2,
}, Item{
	A:   "x",
	B:   2,
	Val: 3,
}, Item{
	A:   "y",
	B:   1,
	Val: 4,
}, Item{
	A:   "y",
	B:   2,
	Val: 1,
}}

type Item struct {
	A   string `json:"a"`
	B   int    `json:"b"`
	Val int    `json:"val"`
}

var grouped []Grouped = func() []Grouped {
	groups := map[string]struct {
		Key   GroupedKey
		Items []Item
	}{}
	order := []string{}
	for _, i := range items {
		k := fmt.Sprint(GroupedKey{
			A: i.A,
			B: i.B,
		})
		grp, ok := groups[k]
		if !ok {
			grp = struct {
				Key   GroupedKey
				Items []Item
			}{Key: GroupedKey{
				A: i.A,
				B: i.B,
			}, Items: []Item{}}
			groups[k] = grp
			order = append(order, k)
		}
		grp.Items = append(grp.Items, i)
		groups[k] = grp
	}
	type pair struct {
		Key int
		Val Grouped
	}
	tmp := []pair{}
	for _, k := range order {
		g := groups[k]
		tmp = append(tmp, pair{(0 - func() int {
			s := 0
			for _, n := range func() []int {
				res := []int{}
				for _, x := range g.Items {
					res = append(res, x.Val)
				}
				return res
			}() {
				s += n
			}
			return s
		}()), Grouped{
			A: g.Key.A,
			B: g.Key.B,
			Total: func() int {
				s := 0
				for _, n := range func() []int {
					res := []int{}
					for _, x := range g.Items {
						res = append(res, x.Val)
					}
					return res
				}() {
					s += n
				}
				return s
			}(),
		}})
	}
	sort.Slice(tmp, func(i, j int) bool { return tmp[i].Key < tmp[j].Key })
	res := make([]Grouped, len(tmp))
	for i, p := range tmp {
		res[i] = p.Val
	}
	return res
}()

type GroupedKey struct {
	A string `json:"a"`
	B int    `json:"b"`
}

type Grouped struct {
	A     string `json:"a"`
	B     int    `json:"b"`
	Total int    `json:"total"`
}

func main() {
	fmt.Println(func() string {
		b, _ := json.Marshal(grouped)
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "\"", "'")
		return s
	}())
}
