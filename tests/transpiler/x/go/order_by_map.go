//go:build ignore

// Generated by Mochi v0.10.35 on 2025-07-22 14:42:18 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"sort"
	"strings"
)

var data []Data = []Data{Data{
	A: 1,
	B: 2,
}, Data{
	A: 1,
	B: 1,
}, Data{
	A: 0,
	B: 5,
}}

type Data struct {
	A int `json:"a"`
	B int `json:"b"`
}

func main() {
	var sorted []Data = func() []Data {
		type pair struct {
			Key any
			Val Data
		}
		pairs := []pair{}
		for _, x := range data {
			pairs = append(pairs, pair{map[string]any{"a": x.A, "b": x.B}, x})
		}
		sort.Slice(pairs, func(i, j int) bool { return fmt.Sprint(pairs[i].Key) < fmt.Sprint(pairs[j].Key) })
		res := make([]Data, len(pairs))
		for i, p := range pairs {
			res[i] = p.Val
		}
		return res
	}()
	fmt.Println(func() string {
		b, _ := json.Marshal(sorted)
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		s = strings.ReplaceAll(s, "\"", "'")
		return s
	}())
}
