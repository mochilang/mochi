//go:build ignore

// Generated by Mochi v0.10.32 on 2025-07-21 11:06:08 GMT+7
package main

import (
	"fmt"
	"sort"
	"strings"
)

var data []Data = []Data{Data{
	A: 1,
	B: 2,
}, Data{
	A: 1,
	B: 1,
}, Data{
	A: 0,
	B: 5,
}}

type Data struct {
	A int `json:"a"`
	B int `json:"b"`
}

var sorted []Data = func() []Data {
	type _pair struct {
		Key map[string]int
		Val Data
	}
	_tmp := []_pair{}
	for _, x := range data {
		_tmp = append(_tmp, _pair{map[any]any{"a": x.A, "b": x.B}, x})
	}
	sort.Slice(_tmp, func(i, j int) bool { return _tmp[i].Key < _tmp[j].Key })
	_res := make([]Data, len(_tmp))
	for i, p := range _tmp {
		_res[i] = p.Val
	}
	return _res
}()

func main() {
	fmt.Println(func() string {
		var sb strings.Builder
		sb.WriteByte('[')
		for i, v := range sorted {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(fmt.Sprint(v))
		}
		sb.WriteByte(']')
		return sb.String()
	}())
}
