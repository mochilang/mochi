//go:build ignore

// Generated by Mochi v0.10.36 on 2025-07-22 17:33:16 GMT+7
package main

import (
	"fmt"
	"sort"
	"strings"
)

var data []Data = []Data{Data{
	A: 1,
	B: 2,
}, Data{
	A: 1,
	B: 1,
}, Data{
	A: 0,
	B: 5,
}}

type Data struct {
	A int `json:"a"`
	B int `json:"b"`
}

func main() {
	var sorted []Data = func() []Data {
		type pair struct {
			Key any
			Val Data
		}
		pairs := []pair{}
		for _, x := range data {
			pairs = append(pairs, pair{map[string]any{"a": x.A, "b": x.B}, x})
		}
		sort.Slice(pairs, func(i, j int) bool { return fmt.Sprint(pairs[i].Key) < fmt.Sprint(pairs[j].Key) })
		res := make([]Data, len(pairs))
		for i, p := range pairs {
			res[i] = p.Val
		}
		return res
	}()
	fmt.Println(func() string {
		var sb strings.Builder
		sb.WriteByte('[')
		for i, v := range sorted {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(fmt.Sprint(v))
		}
		sb.WriteByte(']')
		return sb.String()
	}())
}
