//go:build ignore

// Generated by Mochi v0.10.35 on 2025-07-22 12:53:12 GMT+7
package main

import (
	"fmt"
)

type Tree interface{ isTree() }
type Leaf struct {
}

func (Leaf) isTree() {}

type Node struct {
	Left  any `json:"left"`
	Value int `json:"value"`
	Right any `json:"right"`
}

func (Node) isTree() {}

func sum_tree(t any) int {
	return func() int {
		switch v := t.(type) {
		case Leaf:
			return 0
		case Node:
			left := v.Left
			value := v.Value
			right := v.Right
			return ((sum_tree(left) + value) + sum_tree(right))
		default:
			var z int
			return z
		}
	}()
}

var t Node = Node{
	Left:  Leaf{},
	Value: 1,
	Right: Node{
		Left:  Leaf{},
		Value: 2,
		Right: Leaf{},
	},
}

func main() {
	fmt.Println(sum_tree(t))
}
