//go:build ignore

// Generated by Mochi v0.10.32 on 2025-07-20 21:36:40 GMT+7
package main

import (
	"fmt"
	"strings"
)

var customers []Customer = []Customer{Customer{
	ID:   1,
	Name: "Alice",
}, Customer{
	ID:   2,
	Name: "Bob",
}, Customer{
	ID:   3,
	Name: "Charlie",
}, Customer{
	ID:   4,
	Name: "Diana",
}}

type Customer struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

var orders []Order = []Order{Order{
	ID:         100,
	CustomerID: 1,
	Total:      250,
}, Order{
	ID:         101,
	CustomerID: 2,
	Total:      125,
}, Order{
	ID:         102,
	CustomerID: 1,
	Total:      300,
}, Order{
	ID:         103,
	CustomerID: 5,
	Total:      80,
}}

type Order struct {
	ID         int `json:"id"`
	CustomerID int `json:"customerId"`
	Total      int `json:"total"`
}

var result []Result = func() []Result {
	_res := []Result{}
	for _, o := range orders {
		for _, c := range customers {
			if o.CustomerID == c.ID {
				_res = append(_res, Result{
					Order:    o,
					Customer: c,
				})
			}
		}
	}
	return _res
}()

type Result struct {
	Order    map[string]int `json:"order"`
	Customer map[string]any `json:"customer"`
}

func main() {
	fmt.Println(strings.TrimSpace(fmt.Sprint("--- Outer Join using syntax ---")))
	for _, row := range result {
		if row["order"] {
			if row["customer"] {
				fmt.Println(strings.TrimSpace(fmt.Sprint("Order", " ", row.Order.ID, " ", "by", " ", row.Customer.Name, " ", "- $", " ", row.Order.Total)))
			} else {
				fmt.Println(strings.TrimSpace(fmt.Sprint("Order", " ", row.Order.ID, " ", "by", " ", "Unknown", " ", "- $", " ", row.Order.Total)))
			}
		} else {
			fmt.Println(strings.TrimSpace(fmt.Sprint("Customer", " ", row.Customer.Name, " ", "has no orders")))
		}
	}
}
