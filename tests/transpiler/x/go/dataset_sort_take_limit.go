//go:build ignore

// Generated by Mochi v0.10.36 on 2025-07-22 18:26:26 GMT+7
package main

import (
	"fmt"
	"sort"
)

var products []Product = []Product{Product{
	Name:  "Laptop",
	Price: 1500,
}, Product{
	Name:  "Smartphone",
	Price: 900,
}, Product{
	Name:  "Tablet",
	Price: 600,
}, Product{
	Name:  "Monitor",
	Price: 300,
}, Product{
	Name:  "Keyboard",
	Price: 100,
}, Product{
	Name:  "Mouse",
	Price: 50,
}, Product{
	Name:  "Headphones",
	Price: 200,
}}

type Product struct {
	Name  string `json:"name"`
	Price int    `json:"price"`
}

func main() {
	var expensive []Product = func() []Product {
		type pair struct {
			Key int
			Val Product
		}
		pairs := []pair{}
		for _, p := range products {
			pairs = append(pairs, pair{(0 - p.Price), p})
		}
		sort.Slice(pairs, func(i, j int) bool { return pairs[i].Key < pairs[j].Key })
		res := make([]Product, len(pairs))
		for i, p := range pairs {
			res[i] = p.Val
		}
		if 1 < len(res) {
			res = res[1:]
		} else {
			res = []Product{}
		}
		if 3 < len(res) {
			res = res[:3]
		}
		return res
	}()
	fmt.Println("--- Top products (excluding most expensive) ---")
	for _, item := range expensive {
		fmt.Println(item.Name, "costs $", item.Price)
	}
}
