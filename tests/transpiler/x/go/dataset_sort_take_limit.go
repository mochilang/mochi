//go:build ignore

// Generated by Mochi v0.10.32 on 2025-07-21 11:02:11 GMT+7
package main

import (
	"fmt"
	"sort"
)

var products []Product = []Product{Product{
	Name:  "Laptop",
	Price: 1500,
}, Product{
	Name:  "Smartphone",
	Price: 900,
}, Product{
	Name:  "Tablet",
	Price: 600,
}, Product{
	Name:  "Monitor",
	Price: 300,
}, Product{
	Name:  "Keyboard",
	Price: 100,
}, Product{
	Name:  "Mouse",
	Price: 50,
}, Product{
	Name:  "Headphones",
	Price: 200,
}}

type Product struct {
	Name  string `json:"name"`
	Price int    `json:"price"`
}

var expensive []Product = func() []Product {
	type pair struct {
		Key int
		Val Product
	}
	tmp := []pair{}
	for _, p := range products {
		tmp = append(tmp, pair{(0 - p.Price), p})
	}
	sort.Slice(tmp, func(i, j int) bool { return tmp[i].Key < tmp[j].Key })
	res := make([]Product, len(tmp))
	for i, p := range tmp {
		res[i] = p.Val
	}
	if 1 < len(res) {
		res = res[1:]
	} else {
		res = []Product{}
	}
	if 3 < len(res) {
		res = res[:3]
	}
	return res
}()

func main() {
	fmt.Println("--- Top products (excluding most expensive) ---")
	for _, item := range expensive {
		fmt.Println(item.Name, "costs $", item.Price)
	}
}
