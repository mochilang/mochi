//go:build ignore

// Generated by Mochi v0.10.36 on 2025-07-22 18:26:32 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"strings"
)

var customers []Customer = []Customer{Customer{
	ID:   1,
	Name: "Alice",
}, Customer{
	ID:   2,
	Name: "Bob",
}}

type Customer struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

var orders []Order = []Order{Order{
	ID:         100,
	CustomerID: 1,
	Total:      250,
}, Order{
	ID:         101,
	CustomerID: 3,
	Total:      80,
}}

type Order struct {
	ID         int `json:"id"`
	CustomerID int `json:"customerId"`
	Total      int `json:"total"`
}

type Result struct {
	OrderID  int      `json:"orderId"`
	Customer Customer `json:"customer"`
	Total    int      `json:"total"`
}

func main() {
	var result []Result = func() []Result {
		res := []Result{}
		for _, o := range orders {
			for _, c := range customers {
				if o.CustomerID == c.ID {
					res = append(res, Result{
						OrderID:  o.ID,
						Customer: c,
						Total:    o.Total,
					})
				}
			}
		}
		return res
	}()
	fmt.Println("--- Left Join ---")
	for _, entry := range result {
		fmt.Println("Order", entry.OrderID, "customer", func() string {
			b, _ := json.Marshal(entry.Customer)
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}(), "total", entry.Total)
	}
}
