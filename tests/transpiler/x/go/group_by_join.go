//go:build ignore

// Generated by Mochi v0.10.33 on 2025-07-21 16:15:43 GMT+7
package main

import (
	"fmt"
)

var customers []Customer = []Customer{Customer{
	ID:   1,
	Name: "Alice",
}, Customer{
	ID:   2,
	Name: "Bob",
}}

type Customer struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

var orders []Order = []Order{Order{
	ID:         100,
	CustomerID: 1,
}, Order{
	ID:         101,
	CustomerID: 1,
}, Order{
	ID:         102,
	CustomerID: 2,
}}

type Order struct {
	ID         int `json:"id"`
	CustomerID int `json:"customerId"`
}

var stats []Stat = func() []Stat {
	groups := map[string]struct {
		Key   any
		Items []map[string]any
	}{}
	order := []string{}
	for _, o := range orders {
		for _, c := range customers {
			if o.CustomerID == c.ID {
				k := fmt.Sprint(c.Name)
				grp, ok := groups[k]
				if !ok {
					grp = struct {
						Key   any
						Items []map[string]any
					}{Key: c.Name, Items: []map[string]any{}}
					groups[k] = grp
					order = append(order, k)
				}
				grp.Items = append(grp.Items, map[string]any{"o": o, "c": c})
				groups[k] = grp
			}
		}
	}
	res := []Stat{}
	for _, k := range order {
		g := groups[k]
		res = append(res, Stat{
			Name:  g.Key,
			Count: len(g.Items),
		})
	}
	return res
}()

type Stat struct {
	Name  any `json:"name"`
	Count int `json:"count"`
}

func main() {
	fmt.Println("--- Orders per customer ---")
	for _, s := range stats {
		fmt.Println(s.Name, "orders:", s.Count)
	}
}
