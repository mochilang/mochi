//go:build ignore

// Generated by Mochi v0.10.36 on 2025-07-22 18:26:32 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"strings"
)

var customers []Customer = []Customer{Customer{
	ID:   1,
	Name: "Alice",
}, Customer{
	ID:   2,
	Name: "Bob",
}}

type Customer struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

var orders []Order = []Order{Order{
	ID:         100,
	CustomerID: 1,
}, Order{
	ID:         101,
	CustomerID: 2,
}}

type Order struct {
	ID         int `json:"id"`
	CustomerID int `json:"customerId"`
}

var items []Item = []Item{Item{
	OrderID: 100,
	Sku:     "a",
}}

type Item struct {
	OrderID int    `json:"orderId"`
	Sku     string `json:"sku"`
}

type Result struct {
	OrderID int    `json:"orderId"`
	Name    string `json:"name"`
	Item    Item   `json:"item"`
}

func main() {
	var result []Result = func() []Result {
		res := []Result{}
		for _, o := range orders {
			for _, c := range customers {
				if o.CustomerID == c.ID {
					for _, i := range items {
						if o.ID == i.OrderID {
							res = append(res, Result{
								OrderID: o.ID,
								Name:    c.Name,
								Item:    i,
							})
						}
					}
				}
			}
		}
		return res
	}()
	fmt.Println("--- Left Join Multi ---")
	for _, r := range result {
		fmt.Println(r.OrderID, r.Name, func() string {
			b, _ := json.Marshal(r.Item)
			s := string(b)
			s = strings.ReplaceAll(s, ":", ": ")
			s = strings.ReplaceAll(s, ",", ", ")
			s = strings.ReplaceAll(s, "}, {", "},{")
			return s
		}())
	}
}
