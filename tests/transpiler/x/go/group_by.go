//go:build ignore

// Generated by Mochi v0.10.32 on 2025-07-21 12:28:13 GMT+7
package main

import (
	"fmt"
)

var people []People = []People{People{
	Name: "Alice",
	Age:  30,
	City: "Paris",
}, People{
	Name: "Bob",
	Age:  15,
	City: "Hanoi",
}, People{
	Name: "Charlie",
	Age:  65,
	City: "Paris",
}, People{
	Name: "Diana",
	Age:  45,
	City: "Hanoi",
}, People{
	Name: "Eve",
	Age:  70,
	City: "Paris",
}, People{
	Name: "Frank",
	Age:  22,
	City: "Hanoi",
}}

type People struct {
	Name string `json:"name"`
	Age  int    `json:"age"`
	City string `json:"city"`
}

var stats []Stat = func() []Stat {
	groups := map[string]*GGroup{}
	order := []string{}
	for _, person := range people {
		key := person.City
		ks := fmt.Sprint(key)
		g, ok := groups[ks]
		if !ok {
			g = &GGroup{Key: key}
			groups[ks] = g
			order = append(order, ks)
		}
		g.Items = append(g.Items, person)
	}
	res := make([]Stat, 0, len(order))
	for _, ks := range order {
		g := groups[ks]
		res = append(res, Stat{
			City:  g.Key,
			Count: len(g.Items),
			AvgAge: func() float64 {
				sum := 0
				for _, n := range func() []int {
					res := []int{}
					for _, p := range g.Items {
						res = append(res, p.Age)
					}
					return res
				}() {
					sum += n
				}
				return float64(sum) / float64(len(func() []int {
					res := []int{}
					for _, p := range g.Items {
						res = append(res, p.Age)
					}
					return res
				}()))
			}(),
		})
	}
	return res
}()

type GGroup struct {
	Key   string   `json:"key"`
	Items []People `json:"items"`
}

type Stat struct {
	City   string  `json:"city"`
	Count  int     `json:"count"`
	AvgAge float64 `json:"avg_age"`
}

func main() {
	fmt.Println("--- People grouped by city ---")
	for _, s := range stats {
		fmt.Println(s.City, ": count =", s.Count, ", avg_age =", s.AvgAge)
	}
}
