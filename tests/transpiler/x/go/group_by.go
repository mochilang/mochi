//go:build ignore

// Generated by Mochi v0.10.33 on 2025-07-21 16:15:42 GMT+7
package main

import (
	"fmt"
)

var people []People = []People{People{
	Name: "Alice",
	Age:  30,
	City: "Paris",
}, People{
	Name: "Bob",
	Age:  15,
	City: "Hanoi",
}, People{
	Name: "Charlie",
	Age:  65,
	City: "Paris",
}, People{
	Name: "Diana",
	Age:  45,
	City: "Hanoi",
}, People{
	Name: "Eve",
	Age:  70,
	City: "Paris",
}, People{
	Name: "Frank",
	Age:  22,
	City: "Hanoi",
}}

type People struct {
	Name string `json:"name"`
	Age  int    `json:"age"`
	City string `json:"city"`
}

var stats []Stat = func() []Stat {
	groups := map[string]struct {
		Key   any
		Items []People
	}{}
	order := []string{}
	for _, person := range people {
		k := fmt.Sprint(person.City)
		grp, ok := groups[k]
		if !ok {
			grp = struct {
				Key   any
				Items []People
			}{Key: person.City, Items: []People{}}
			groups[k] = grp
			order = append(order, k)
		}
		grp.Items = append(grp.Items, person)
		groups[k] = grp
	}
	res := []Stat{}
	for _, k := range order {
		g := groups[k]
		res = append(res, Stat{
			City:  g.Key,
			Count: len(g.Items),
			AvgAge: func() float64 {
				sum := 0
				for _, n := range func() []int {
					res := []int{}
					for _, p := range g.Items {
						res = append(res, p.Age)
					}
					return res
				}() {
					sum += n
				}
				return float64(sum) / float64(len(func() []int {
					res := []int{}
					for _, p := range g.Items {
						res = append(res, p.Age)
					}
					return res
				}()))
			}(),
		})
	}
	return res
}()

type Stat struct {
	City   any     `json:"city"`
	Count  int     `json:"count"`
	AvgAge float64 `json:"avg_age"`
}

func main() {
	fmt.Println("--- People grouped by city ---")
	for _, s := range stats {
		fmt.Println(s.City, ": count =", s.Count, ", avg_age =", s.AvgAge)
	}
}
