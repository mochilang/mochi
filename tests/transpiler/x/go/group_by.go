//go:build ignore

// Generated by Mochi v0.10.36 on 2025-07-22 18:26:29 GMT+7
package main

import (
	"fmt"
)

var people []People = []People{People{
	Name: "Alice",
	Age:  30,
	City: "Paris",
}, People{
	Name: "Bob",
	Age:  15,
	City: "Hanoi",
}, People{
	Name: "Charlie",
	Age:  65,
	City: "Paris",
}, People{
	Name: "Diana",
	Age:  45,
	City: "Hanoi",
}, People{
	Name: "Eve",
	Age:  70,
	City: "Paris",
}, People{
	Name: "Frank",
	Age:  22,
	City: "Hanoi",
}}

type People struct {
	Name string `json:"name"`
	Age  int    `json:"age"`
	City string `json:"city"`
}

type Stat struct {
	City   string  `json:"city"`
	Count  int     `json:"count"`
	AvgAge float64 `json:"avg_age"`
}

func main() {
	var stats []Stat = func() []Stat {
		groups := map[string]struct {
			Key   string
			Items []People
		}{}
		order := []string{}
		for _, person := range people {
			k := fmt.Sprint(person.City)
			grp, ok := groups[k]
			if !ok {
				grp = struct {
					Key   string
					Items []People
				}{Key: person.City, Items: []People{}}
				groups[k] = grp
				order = append(order, k)
			}
			grp.Items = append(grp.Items, person)
			groups[k] = grp
		}
		res := []Stat{}
		for _, k := range order {
			g := groups[k]
			res = append(res, Stat{
				City:  g.Key,
				Count: len(g.Items),
				AvgAge: func() float64 {
					sum := 0
					for _, n := range func() []int {
						res := []int{}
						for _, p := range g.Items {
							res = append(res, p.Age)
						}
						return res
					}() {
						sum += n
					}
					return float64(sum) / float64(len(func() []int {
						res := []int{}
						for _, p := range g.Items {
							res = append(res, p.Age)
						}
						return res
					}()))
				}(),
			})
		}
		return res
	}()
	fmt.Println("--- People grouped by city ---")
	for _, s := range stats {
		fmt.Println(s.City, ": count =", s.Count, ", avg_age =", func() string {
			f := float64(s.AvgAge)
			if f == float64(int(f)) {
				return fmt.Sprintf("%.1f", f)
			}
			return fmt.Sprint(f)
		}())
	}
}
