//go:build ignore

// Generated by Mochi v0.10.33 on 2025-07-21 17:38:49 GMT+7
package main

import (
	"fmt"
)

var customers []Customer = []Customer{Customer{
	ID:   1,
	Name: "Alice",
}, Customer{
	ID:   2,
	Name: "Bob",
}, Customer{
	ID:   3,
	Name: "Charlie",
}}

type Customer struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

var orders []Order = []Order{Order{
	ID:         100,
	CustomerID: 1,
}, Order{
	ID:         101,
	CustomerID: 1,
}, Order{
	ID:         102,
	CustomerID: 2,
}}

type Order struct {
	ID         int `json:"id"`
	CustomerID int `json:"customerId"`
}

var stats []Stat = func() []Stat {
	groups := map[string]struct {
		Key   any
		Items []GroupItem3
	}{}
	order := []string{}
	for _, c := range customers {
		k := fmt.Sprint(c.Name)
		grp, ok := groups[k]
		if !ok {
			grp = struct {
				Key   any
				Items []GroupItem3
			}{Key: c.Name, Items: []GroupItem3{}}
			groups[k] = grp
			order = append(order, k)
		}
		matched := false
		for _, o := range orders {
			if o.CustomerID == c.ID {
				matched = true
				grp.Items = append(grp.Items, GroupItem3{C: c, O: o})
				groups[k] = grp
				if !matched {
					grp.Items = append(grp.Items, GroupItem3{})
				}
			}
		}
	}
	res := []Stat{}
	for _, k := range order {
		g := groups[k]
		res = append(res, Stat{
			Name: g.Key,
			Count: len(func() []GroupItem3 {
				res := []GroupItem3{}
				for _, r := range g.Items {
					if true {
						res = append(res, r)
					}
				}
				return res
			}()),
		})
	}
	return res
}()

type GroupItem3 struct {
	C Customer `json:"c"`
	O Order    `json:"o"`
}

type Stat struct {
	Name  any `json:"name"`
	Count int `json:"count"`
}

func main() {
	fmt.Println("--- Group Left Join ---")
	for _, s := range stats {
		fmt.Println(s.Name, "orders:", s.Count)
	}
}
