//go:build ignore

// Generated by Mochi v0.10.36 on 2025-07-22 18:26:29 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"sort"
	"strings"
)

var items []Item = []Item{Item{
	Cat:  "a",
	Val:  10,
	Flag: true,
}, Item{
	Cat:  "a",
	Val:  5,
	Flag: false,
}, Item{
	Cat:  "b",
	Val:  20,
	Flag: true,
}}

type Item struct {
	Cat  string `json:"cat"`
	Val  int    `json:"val"`
	Flag bool   `json:"flag"`
}

type Result struct {
	Cat   string `json:"cat"`
	Share int    `json:"share"`
}

func main() {
	var result []Result = func() []Result {
		groups := map[string]struct {
			Key   string
			Items []Item
		}{}
		order := []string{}
		for _, i := range items {
			k := fmt.Sprint(i.Cat)
			grp, ok := groups[k]
			if !ok {
				grp = struct {
					Key   string
					Items []Item
				}{Key: i.Cat, Items: []Item{}}
				groups[k] = grp
				order = append(order, k)
			}
			grp.Items = append(grp.Items, i)
			groups[k] = grp
		}
		type pair struct {
			Key string
			Val Result
		}
		pairs := []pair{}
		for _, k := range order {
			g := groups[k]
			pairs = append(pairs, pair{g.Key, Result{
				Cat: g.Key,
				Share: (func() int {
					s := 0
					for _, n := range func() []int {
						res := []int{}
						for _, x := range g.Items {
							res = append(res, func() int {
								if x.Flag {
									return x.Val
								} else {
									return 0
								}
							}())
						}
						return res
					}() {
						s += n
					}
					return s
				}() / func() int {
					s := 0
					for _, n := range func() []int {
						res := []int{}
						for _, x := range g.Items {
							res = append(res, x.Val)
						}
						return res
					}() {
						s += n
					}
					return s
				}()),
			}})
		}
		sort.Slice(pairs, func(i, j int) bool { return pairs[i].Key < pairs[j].Key })
		res := make([]Result, len(pairs))
		for i, p := range pairs {
			res[i] = p.Val
		}
		return res
	}()
	fmt.Println(func() string {
		b, _ := json.Marshal(result)
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "}, {", "},{")
		s = strings.ReplaceAll(s, "\"", "'")
		return s
	}())
}
