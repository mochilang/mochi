//go:build ignore

// Generated by Mochi v0.10.32 on 2025-07-21 12:28:13 GMT+7
package main

import (
	"fmt"
	"strings"
)

var items []Item = []Item{Item{
	Cat:  "a",
	Val:  10,
	Flag: true,
}, Item{
	Cat:  "a",
	Val:  5,
	Flag: false,
}, Item{
	Cat:  "b",
	Val:  20,
	Flag: true,
}}

type Item struct {
	Cat  string `json:"cat"`
	Val  int    `json:"val"`
	Flag bool   `json:"flag"`
}

var result []Result = func() []Result {
	groups := map[string]*GGroup{}
	order := []string{}
	for _, i := range items {
		key := i.Cat
		ks := fmt.Sprint(key)
		g, ok := groups[ks]
		if !ok {
			g = &GGroup{Key: key}
			groups[ks] = g
			order = append(order, ks)
		}
		g.Items = append(g.Items, i)
	}
	res := make([]Result, 0, len(order))
	for _, ks := range order {
		g := groups[ks]
		res = append(res, Result{
			Cat: g.Key,
			Share: (func() int {
				s := 0
				for _, n := range func() []int {
					res := []int{}
					for _, x := range g.Items {
						res = append(res, func() int {
							if x.Flag {
								return x.Val
							} else {
								return 0
							}
						}())
					}
					return res
				}() {
					s += n
				}
				return s
			}() / func() int {
				s := 0
				for _, n := range func() []int {
					res := []int{}
					for _, x := range g.Items {
						res = append(res, x.Val)
					}
					return res
				}() {
					s += n
				}
				return s
			}()),
		})
	}
	return res
}()

type GGroup struct {
	Key   string `json:"key"`
	Items []Item `json:"items"`
}

type Result struct {
	Cat   string `json:"cat"`
	Share int    `json:"share"`
}

func main() {
	fmt.Println(func() string {
		var sb strings.Builder
		sb.WriteByte('[')
		for i, v := range result {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(fmt.Sprint(v))
		}
		sb.WriteByte(']')
		return sb.String()
	}())
}
