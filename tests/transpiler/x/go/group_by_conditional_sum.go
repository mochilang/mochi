//go:build ignore

// Generated by Mochi v0.10.33 on 2025-07-21 16:15:42 GMT+7
package main

import (
	"fmt"
	"strings"
)

var items []Item = []Item{Item{
	Cat:  "a",
	Val:  10,
	Flag: true,
}, Item{
	Cat:  "a",
	Val:  5,
	Flag: false,
}, Item{
	Cat:  "b",
	Val:  20,
	Flag: true,
}}

type Item struct {
	Cat  string `json:"cat"`
	Val  int    `json:"val"`
	Flag bool   `json:"flag"`
}

var result []Result = func() []Result {
	groups := map[string]struct {
		Key   any
		Items []map[string]any
	}{}
	order := []string{}
	for _, i := range items {
		k := fmt.Sprint(i.Cat)
		grp, ok := groups[k]
		if !ok {
			grp = struct {
				Key   any
				Items []map[string]any
			}{Key: i.Cat, Items: []map[string]any{}}
			groups[k] = grp
			order = append(order, k)
		}
		grp.Items = append(grp.Items, map[string]any{"i": i})
		groups[k] = grp
	}
	res := []Result{}
	for _, k := range order {
		g := groups[k]
		res = append(res, Result{
			Cat: g.Key,
			Share: (func() int {
				s := 0
				for _, n := range func() []any {
					res := []any{}
					for _, x := range g.Items {
						res = append(res, func() any {
							if x.Flag {
								return x.Val
							} else {
								return 0
							}
						}())
					}
					return res
				}() {
					s += n
				}
				return s
			}() / func() int {
				s := 0
				for _, n := range func() []any {
					res := []any{}
					for _, x := range g.Items {
						res = append(res, x.Val)
					}
					return res
				}() {
					s += n
				}
				return s
			}()),
		})
	}
	return res
}()

type Result struct {
	Cat   any     `json:"cat"`
	Share float64 `json:"share"`
}

func main() {
	fmt.Println(func() string {
		var sb strings.Builder
		sb.WriteByte('[')
		for i, v := range result {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(fmt.Sprint(v))
		}
		sb.WriteByte(']')
		return sb.String()
	}())
}
