//go:build ignore

// Generated by Mochi v0.10.34 on 2025-07-21 20:39:14 GMT+7
package main

import (
	"encoding/json"
	"fmt"
	"strings"
)

var items []Item = []Item{Item{
	Cat:  "a",
	Val:  10,
	Flag: true,
}, Item{
	Cat:  "a",
	Val:  5,
	Flag: false,
}, Item{
	Cat:  "b",
	Val:  20,
	Flag: true,
}}

type Item struct {
	Cat  string `json:"cat"`
	Val  int    `json:"val"`
	Flag bool   `json:"flag"`
}

var result []Result = func() []Result {
	groups := map[string]struct {
		Key   string
		Items []Item
	}{}
	order := []string{}
	for _, i := range items {
		k := fmt.Sprint(i.Cat)
		grp, ok := groups[k]
		if !ok {
			grp = struct {
				Key   string
				Items []Item
			}{Key: i.Cat, Items: []Item{}}
			groups[k] = grp
			order = append(order, k)
		}
		grp.Items = append(grp.Items, i)
		groups[k] = grp
	}
	res := []Result{}
	for _, k := range order {
		g := groups[k]
		res = append(res, Result{
			Cat: g.Key,
			Share: (func() int {
				s := 0
				for _, n := range func() []int {
					res := []int{}
					for _, x := range g.Items {
						res = append(res, func() int {
							if x.Flag {
								return x.Val
							} else {
								return 0
							}
						}())
					}
					return res
				}() {
					s += n
				}
				return s
			}() / func() int {
				s := 0
				for _, n := range func() []int {
					res := []int{}
					for _, x := range g.Items {
						res = append(res, x.Val)
					}
					return res
				}() {
					s += n
				}
				return s
			}()),
		})
	}
	return res
}()

type Result struct {
	Cat   string `json:"cat"`
	Share int    `json:"share"`
}

func main() {
	fmt.Println(func() string {
		b, _ := json.Marshal(result)
		s := string(b)
		s = strings.ReplaceAll(s, ":", ": ")
		s = strings.ReplaceAll(s, ",", ", ")
		s = strings.ReplaceAll(s, "\"", "'")
		return s
	}())
}
