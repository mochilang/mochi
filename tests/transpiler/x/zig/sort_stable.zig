// Generated by Mochi Zig transpiler on 2025-07-21 10:58 +0000
const std = @import("std");

const Item = struct {
    n: i64,
    v: []const u8,
};

pub fn main() void {
    const items: [_]Item = [_]Item{.{ .n = 1, .v = "a" }, .{ .n = 1, .v = "b" }, .{ .n = 2, .v = "c" }};
    const result: [][]const u8 = blk: {
    var arr = std.ArrayList(struct{key: i64, val: []const u8}).init(std.heap.page_allocator);
    for (items) |i| {
        arr.append(.{ .key = i.n, .val = i.v }) catch unreachable;
    }
    var tmp = arr.toOwnedSlice() catch unreachable;
    std.sort.sort(struct{key: i64, val: []const u8}, tmp, {}, struct{fn lt(ctx: void, a: struct{key: i64, val: []const u8}, b: struct{key: i64, val: []const u8}) bool { return a.key < b.key; } }.lt);
    var result = std.ArrayList([]const u8).init(std.heap.page_allocator);
    for (tmp) |it| { result.append(it.val) catch unreachable; }
    tmp = result.toOwnedSlice() catch unreachable;
    break :blk tmp;
};
    try std.io.getStdOut().writer().print("{any}\n", .{result});
}
