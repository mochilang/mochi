// Generated by Mochi Zig transpiler on 2025-07-21 06:10 +0000
const std = @import("std");

const People = struct {
    name: []const u8,
    age: i64,
    city: []const u8,
};

const Group0 = struct {
    key: []const u8,
    items: []People,
};

pub fn main() void {
    const people: [_]People = [_]People{.{ .name = "Alice", .age = 30, .city = "Paris" }, .{ .name = "Bob", .age = 15, .city = "Hanoi" }, .{ .name = "Charlie", .age = 65, .city = "Paris" }, .{ .name = "Diana", .age = 45, .city = "Hanoi" }, .{ .name = "Eve", .age = 70, .city = "Paris" }, .{ .name = "Frank", .age = 22, .city = "Hanoi" }};
    const stats = blk: {
    var groups_map = std.AutoHashMap([]const u8, std.ArrayList(People)).init(std.heap.page_allocator);
    for (people) |person| {
        const k = person.city;
        if (groups_map.getPtr(k)) |arr| {
            arr.*.append(person) catch unreachable;
        } else {
            var tmp_arr = std.ArrayList(People).init(std.heap.page_allocator);
            tmp_arr.append(person) catch unreachable;
            groups_map.put(k, tmp_arr) catch unreachable;
        }
    }
    var groups = std.ArrayList(Group0).init(std.heap.page_allocator);
    var it = groups_map.iterator();
    while (it.next()) |kv| {
        groups.append(.{ .key = kv.key.*, .items = kv.value.toOwnedSlice() catch unreachable }) catch unreachable;
    }
    const arr = groups.toOwnedSlice() catch unreachable;
    var result = std.ArrayList(std.StringHashMap(i64)).init(std.heap.page_allocator);
    for (arr) |g| {
        result.append(blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("city", g.key) catch unreachable; m.put("count", std.mem.len(g)) catch unreachable; m.put("avg_age", blk: { var arr = blk: {
    var arr = std.ArrayList(i64).init(std.heap.page_allocator);
    for (g) |p| {
        arr.append(p.age) catch unreachable;
    }
    const tmp = arr.toOwnedSlice() catch unreachable;
    break :blk tmp;
}; if (arr.len == 0) break :blk 0; var sum: f64 = 0; for (arr) |v| { sum += @as(f64, v); } break :blk sum / @as(f64, arr.len); }) catch unreachable; break :blk m; }) catch unreachable;
    }
    const tmp = result.toOwnedSlice() catch unreachable;
    break :blk tmp;
};
    try std.io.getStdOut().writer().print("{s}\n", .{"--- People grouped by city ---"});
    for (stats) |s| {
        try std.io.getStdOut().writer().print("{any} {s} {any} {s} {any}\n", .{s.city, ": count =", s.count, ", avg_age =", s.avg_age});
    }
}
