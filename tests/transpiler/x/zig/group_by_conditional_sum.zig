// Generated by Mochi Zig transpiler on 2025-07-21 10:57 +0000
const std = @import("std");

const Item = struct {
    cat: []const u8,
    val: i64,
    flag: bool,
};

const Group0 = struct {
    key: []const u8,
    items: []Item,
};

pub fn main() void {
    const items: [_]Item = [_]Item{.{ .cat = "a", .val = 10, .flag = true }, .{ .cat = "a", .val = 5, .flag = false }, .{ .cat = "b", .val = 20, .flag = true }};
    const result = blk: {
    var groups_map = std.AutoHashMap([]const u8, std.ArrayList(Item)).init(std.heap.page_allocator);
    for (items) |i| {
        const k = i.cat;
        if (groups_map.getPtr(k)) |arr| {
            arr.*.append(i) catch unreachable;
        } else {
            var tmp_arr = std.ArrayList(Item).init(std.heap.page_allocator);
            tmp_arr.append(i) catch unreachable;
            groups_map.put(k, tmp_arr) catch unreachable;
        }
    }
    var groups = std.ArrayList(Group0).init(std.heap.page_allocator);
    var it = groups_map.iterator();
    while (it.next()) |kv| {
        groups.append(.{ .key = kv.key.*, .items = kv.value.toOwnedSlice() catch unreachable }) catch unreachable;
    }
    const arr = groups.toOwnedSlice() catch unreachable;
    var result = std.ArrayList(std.StringHashMap(i64)).init(std.heap.page_allocator);
    for (arr) |g| {
        result.append(blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("cat", g.key) catch unreachable; m.put("share", sum(blk: {
    var arr = std.ArrayList(i64).init(std.heap.page_allocator);
    for (g) |x| {
        arr.append(if (x.flag) x.val else 0) catch unreachable;
    }
    var tmp = arr.toOwnedSlice() catch unreachable;
    break :blk tmp;
}) / sum(blk: {
    var arr = std.ArrayList(i64).init(std.heap.page_allocator);
    for (g) |x| {
        arr.append(x.val) catch unreachable;
    }
    var tmp = arr.toOwnedSlice() catch unreachable;
    break :blk tmp;
})) catch unreachable; break :blk m; }) catch unreachable;
    }
    var tmp = result.toOwnedSlice() catch unreachable;
    std.sort.sort(Group0, tmp, {}, struct{fn lt(ctx: void, a: Group0, b: Group0) bool { return a.key < b.key; } }.lt);
    break :blk tmp;
};
    try std.io.getStdOut().writer().print("{any}\n", .{result});
}
