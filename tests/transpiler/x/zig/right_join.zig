// Generated by Mochi Zig transpiler on 2025-07-21 03:50 +0000
const std = @import("std");

const Customer = struct {
    id: i64,
    name: []const u8,
};

const Entry = struct {
    customer_name: i64,
    order: std.StringHashMap(i64),
};

pub fn main() void {
    const customers: [_]Customer = [_]Customer{.{ .id = 1, .name = "Alice" }, .{ .id = 2, .name = "Bob" }, .{ .id = 3, .name = "Charlie" }, .{ .id = 4, .name = "Diana" }};
    const orders = [_]std.StringHashMap(i64){blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("id", 100) catch unreachable; m.put("customerId", 1) catch unreachable; m.put("total", 250) catch unreachable; break :blk m; }, blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("id", 101) catch unreachable; m.put("customerId", 2) catch unreachable; m.put("total", 125) catch unreachable; break :blk m; }, blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("id", 102) catch unreachable; m.put("customerId", 1) catch unreachable; m.put("total", 300) catch unreachable; break :blk m; }};
    const result: []Entry = blk: {
    var arr = std.ArrayList(Entry).init(std.heap.page_allocator);
    for (customers) |c| {
        for (orders) |o| {
            if (o.customer_id == c.id) {
                arr.append(.{ .customer_name = c.name, .order = o }) catch unreachable;
            }
        }
    }
    const tmp = arr.toOwnedSlice() catch unreachable;
    break :blk tmp;
};
    try std.io.getStdOut().writer().print("{s}\n", .{"--- Right Join using syntax ---"});
    for (result) |entry| {
        if (entry.order) {
            try std.io.getStdOut().writer().print("{s} {any} {s} {any} {s} {any}\n", .{"Customer", entry.customer_name, "has order", entry.order.id, "- $", entry.order.total});
        } else {
            try std.io.getStdOut().writer().print("{s} {any} {s}\n", .{"Customer", entry.customer_name, "has no orders"});
        }
    }
}

