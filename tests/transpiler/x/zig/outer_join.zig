// Generated by Mochi Zig transpiler on 2025-07-21 10:58 +0000
const std = @import("std");

const Customer = struct {
    id: i64,
    name: []const u8,
};

const Entry = struct {
    order: std.StringHashMap(i64),
    customer: Customer,
};

pub fn main() void {
    const customers: [_]Customer = [_]Customer{.{ .id = 1, .name = "Alice" }, .{ .id = 2, .name = "Bob" }, .{ .id = 3, .name = "Charlie" }, .{ .id = 4, .name = "Diana" }};
    const orders = [_]std.StringHashMap(i64){blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("id", 100) catch unreachable; m.put("customerId", 1) catch unreachable; m.put("total", 250) catch unreachable; break :blk m; }, blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("id", 101) catch unreachable; m.put("customerId", 2) catch unreachable; m.put("total", 125) catch unreachable; break :blk m; }, blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("id", 102) catch unreachable; m.put("customerId", 1) catch unreachable; m.put("total", 300) catch unreachable; break :blk m; }, blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("id", 103) catch unreachable; m.put("customerId", 5) catch unreachable; m.put("total", 80) catch unreachable; break :blk m; }};
    const result: []Entry = blk: {
    var arr = std.ArrayList(Entry).init(std.heap.page_allocator);
    for (orders) |o| {
        for (customers) |c| {
            if (o.customer_id == c.id) {
                arr.append(.{ .order = o, .customer = c }) catch unreachable;
            }
        }
    }
    var tmp = arr.toOwnedSlice() catch unreachable;
    break :blk tmp;
};
    try std.io.getStdOut().writer().print("{s}\n", .{"--- Outer Join using syntax ---"});
    for (result) |row| {
        if (row.order) {
            if (row.customer) {
                try std.io.getStdOut().writer().print("{s} {any} {s} {any} {s} {any}\n", .{"Order", row.order.id, "by", row.customer.name, "- $", row.order.total});
            } else {
                try std.io.getStdOut().writer().print("{s} {any} {s} {s} {s} {any}\n", .{"Order", row.order.id, "by", "Unknown", "- $", row.order.total});
            }
        } else {
            try std.io.getStdOut().writer().print("{s} {any} {s}\n", .{"Customer", row.customer.name, "has no orders"});
        }
    }
}
