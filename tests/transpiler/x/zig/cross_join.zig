// Generated by Mochi Zig transpiler on 2025-07-21 03:56 +0000
const std = @import("std");

const Order = struct {
    id: i64,
    customer_id: i64,
    total: i64,
};

const Entry = struct {
    order_id: i64,
    order_customer_id: i64,
    paired_customer_name: []const u8,
    order_total: i64,
};

const Customer = struct {
    id: i64,
    name: []const u8,
};

pub fn main() !void {
    const customers = [_]Customer{.{ .id = 1, .name = "Alice" }, .{ .id = 2, .name = "Bob" }, .{ .id = 3, .name = "Charlie" }};
    const orders = [_]Order{.{ .id = 100, .customer_id = 1, .total = 250 }, .{ .id = 101, .customer_id = 2, .total = 125 }, .{ .id = 102, .customer_id = 1, .total = 300 }};
    const result: []Entry = blk: {
    var arr = std.ArrayList(Entry).init(std.heap.page_allocator);
    for (orders) |o| {
        for (customers) |c| {
            arr.append(.{ .order_id = o.id, .order_customer_id = o.customer_id, .paired_customer_name = c.name, .order_total = o.total }) catch unreachable;
        }
    }
    const tmp = arr.toOwnedSlice() catch unreachable;
    break :blk tmp;
};
    try std.io.getStdOut().writer().print("{s}\n", .{"--- Cross Join: All order-customer pairs ---"});
    for (result) |entry| {
        try std.io.getStdOut().writer().print("{s} {any} {s} {any} {s} {any} {s} {s}\n", .{"Order", entry.order_id, "(customerId:", entry.order_customer_id, ", total: $", entry.order_total, ") paired with", entry.paired_customer_name});
    }
}
