// Generated by Mochi Zig transpiler on 2025-07-21 10:57 +0000
const std = @import("std");

const Customer = struct {
    id: i64,
    name: []const u8,
};

const Group0 = struct {
    key: []const u8,
    items: []Customer,
};

pub fn main() void {
    const customers: [_]Customer = [_]Customer{.{ .id = 1, .name = "Alice" }, .{ .id = 2, .name = "Bob" }, .{ .id = 3, .name = "Charlie" }};
    const orders = [_]std.StringHashMap(i64){blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("id", 100) catch unreachable; m.put("customerId", 1) catch unreachable; break :blk m; }, blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("id", 101) catch unreachable; m.put("customerId", 1) catch unreachable; break :blk m; }, blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("id", 102) catch unreachable; m.put("customerId", 2) catch unreachable; break :blk m; }};
    const stats = blk: {
    var groups_map = std.AutoHashMap([]const u8, std.ArrayList(Customer)).init(std.heap.page_allocator);
    for (customers) |c| {
        const k = c.name;
        if (groups_map.getPtr(k)) |arr| {
            arr.*.append(c) catch unreachable;
        } else {
            var tmp_arr = std.ArrayList(Customer).init(std.heap.page_allocator);
            tmp_arr.append(c) catch unreachable;
            groups_map.put(k, tmp_arr) catch unreachable;
        }
    }
    var groups = std.ArrayList(Group0).init(std.heap.page_allocator);
    var it = groups_map.iterator();
    while (it.next()) |kv| {
        groups.append(.{ .key = kv.key.*, .items = kv.value.toOwnedSlice() catch unreachable }) catch unreachable;
    }
    const arr = groups.toOwnedSlice() catch unreachable;
    var result = std.ArrayList(std.StringHashMap(i64)).init(std.heap.page_allocator);
    for (arr) |g| {
        result.append(blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("name", g.key) catch unreachable; m.put("count", std.mem.len(blk: {
    var arr = std.ArrayList(Customer).init(std.heap.page_allocator);
    for (g) |r| {
        if (r.o) {
            arr.append(r) catch unreachable;
        }
    }
    var tmp = arr.toOwnedSlice() catch unreachable;
    break :blk tmp;
})) catch unreachable; break :blk m; }) catch unreachable;
    }
    var tmp = result.toOwnedSlice() catch unreachable;
    break :blk tmp;
};
    try std.io.getStdOut().writer().print("{s}\n", .{"--- Group Left Join ---"});
    for (stats) |s| {
        try std.io.getStdOut().writer().print("{any} {s} {any}\n", .{s.name, "orders:", s.count});
    }
}
