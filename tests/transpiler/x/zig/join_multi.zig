// Generated by Mochi Zig transpiler on 2025-07-21 10:57 +0000
const std = @import("std");

const Entry = struct {
    name: []const u8,
    sku: i64,
};

const Customer = struct {
    id: i64,
    name: []const u8,
};

pub fn main() void {
    const customers: [_]Customer = [_]Customer{.{ .id = 1, .name = "Alice" }, .{ .id = 2, .name = "Bob" }};
    const orders = [_]std.StringHashMap(i64){blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("id", 100) catch unreachable; m.put("customerId", 1) catch unreachable; break :blk m; }, blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("id", 101) catch unreachable; m.put("customerId", 2) catch unreachable; break :blk m; }};
    const items = [_]std.StringHashMap(i64){blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("orderId", 100) catch unreachable; m.put("sku", "a") catch unreachable; break :blk m; }, blk: { var m = std.StringHashMap(i64).init(std.heap.page_allocator); m.put("orderId", 101) catch unreachable; m.put("sku", "b") catch unreachable; break :blk m; }};
    const result: []Entry = blk: {
    var arr = std.ArrayList(Entry).init(std.heap.page_allocator);
    for (orders) |o| {
        for (customers) |c| {
            for (items) |i| {
                if (o.customer_id == c.id && o.id == i.order_id) {
                    arr.append(.{ .name = c.name, .sku = i.sku }) catch unreachable;
                }
            }
        }
    }
    var tmp = arr.toOwnedSlice() catch unreachable;
    break :blk tmp;
};
    try std.io.getStdOut().writer().print("{s}\n", .{"--- Multi Join ---"});
    for (result) |r| {
        try std.io.getStdOut().writer().print("{any} {s} {any}\n", .{r.name, "bought item", r.sku});
    }
}
