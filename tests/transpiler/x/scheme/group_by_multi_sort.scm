;; Generated on 2025-07-22 10:07 +0700
(define (to-str x)
  (cond ((and (hash-table? x) (hash-table-exists? x "__name"))
         (let* ((name (hash-table-ref x "__name"))
                (ks (filter (lambda (k) (not (string=? k "__name"))) (hash-table-keys x))))
           (set! ks (list-sort string<? ks))
           (string-append name " {"
                        (string-join (map (lambda (k)
                                            (string-append k " = " (to-str (hash-table-ref x k))))
                                          ks)
                                     ", ")
                        "}")))
        ((pair? x)
         (string-append "[" (string-join (map to-str x) ",") "]"))
        ((string? x) (string-append "\"" x "\""))
        ((boolean? x) (if x "true" "false"))
        (else (number->string x))))
(define items (list (alist->hash-table (list (cons "__name" "GenType1")
 (cons "a" "x")
 (cons "b" 1)
 (cons "val" 2)
)
)
 (alist->hash-table (list (cons "__name" "GenType1")
 (cons "a" "x")
 (cons "b" 2)
 (cons "val" 3)
)
)
 (alist->hash-table (list (cons "__name" "GenType1")
 (cons "a" "y")
 (cons "b" 1)
 (cons "val" 4)
)
)
 (alist->hash-table (list (cons "__name" "GenType1")
 (cons "a" "y")
 (cons "b" 2)
 (cons "val" 1)
)
)
)
)
(define grouped (let ((groups3 (make-hash-table)
)
)
 (begin (for-each (lambda (i)
 (let* ((k5 (alist->hash-table (list (cons "__name" "GenType2")
 (cons "a" (hash-table-ref i "a")
)
 (cons "b" (hash-table-ref i "b")
)
)
)
)
 (g4 (hash-table-ref/default groups3 k5 #f)
)
)
 (begin (if (not g4)
 (begin (set! g4 (alist->hash-table (list (cons "key" k5)
 (cons "items" (list)
)
)
)
)
 (hash-table-set! groups3 k5 g4)
)
 (quote nil)
)
 (hash-table-set! g4 "items" (append (hash-table-ref g4 "items")
 (list i)
)
)
)
)
)
 items)
 (let ((groups_list7 (hash-table-values groups3)
)
 (res6 (list)
)
)
 (begin (set! groups_list7 (list-sort (lambda (a8 b9)
 (< (- (apply + (let ((res2 (list)
)
)
 (begin (for-each (lambda (x)
 (set! res2 (append res2 (list (hash-table-ref x "val")
)
)
)
)
 (hash-table-ref a8 "items")
)
 res2)
)
)
)
 (- (apply + (let ((res2 (list)
)
)
 (begin (for-each (lambda (x)
 (set! res2 (append res2 (list (hash-table-ref x "val")
)
)
)
)
 (hash-table-ref b9 "items")
)
 res2)
)
)
)
)
)
 groups_list7)
)
 (for-each (lambda (g)
 (set! res6 (append res6 (list (alist->hash-table (list (cons "__name" "GenType3")
 (cons "a" (hash-table-ref (hash-table-ref g "key")
 "a")
)
 (cons "b" (hash-table-ref (hash-table-ref g "key")
 "b")
)
 (cons "total" (apply + (let ((res1 (list)
)
)
 (begin (for-each (lambda (x)
 (set! res1 (append res1 (list (hash-table-ref x "val")
)
)
)
)
 (hash-table-ref g "items")
)
 res1)
)
)
)
)
)
)
)
)
)
 groups_list7)
 res6)
)
)
)
)
(display (to-str grouped)
)
(newline)
