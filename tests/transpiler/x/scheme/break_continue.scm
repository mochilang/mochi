;; Generated on 2025-07-22 06:19 +0700
(begin
  (current-error-port (open-output-string))
  (import (scheme base) (srfi 69) (scheme sort) (chibi string)))
(define (to-str x)
  (cond ((and (list? x) (pair? x)
              (pair? (car x)) (string? (car (car x))))
         (string-append "{" (string-join (map (lambda (kv)
                                              (string-append "\"" (car kv) "\": " (to-str (cdr kv))))
                                            x) ", ") "}"))
        ((hash-table? x)
         (let ((pairs (hash-table->alist x)))
           (string-append "{" (string-join (map (lambda (kv)
                                                  (string-append "\"" (car kv) "\": " (to-str (cdr kv))))
                                                pairs) ", ") "}")))
        ((list? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((string? x) (string-append "\"" x "\""))
        ((boolean? x) (if x "true" "false"))
        (else (number->string x))))

(define numbers (list 1 2 3 4 5 6 7 8 9)
)
(call/cc (lambda (break2)
 (letrec ((loop1 (lambda (xs)
 (if (null? xs)
 (quote nil)
 (begin (let ((n (car xs)
)
)
 (begin (if (= (modulo n 2)
 0)
 (begin (loop1 (cdr xs)
)
)
 (quote nil)
)
 (if (> n 7)
 (begin (break2 (quote nil)
)
)
 (quote nil)
)
 (display "odd number:")
 (display " ")
 (display n)
 (newline)
)
)
 (loop1 (cdr xs)
)
)
)
)
)
)
 (loop1 numbers)
)
)
)
