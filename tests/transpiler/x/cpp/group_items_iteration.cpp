// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:19:57 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <unordered_map>
#include <algorithm>
#include <sstream>
#include <iomanip>


struct DataItem {
    std::string tag;
    int val;
};

struct GGroup {
    std::string key;
    std::vector<DataItem> items;
    auto begin() { return items.begin(); }
    auto end() { return items.end(); }
    size_t size() const { return items.size(); }
};

std::vector<DataItem> data = std::vector{DataItem{.tag = std::string("a"), .val = 1}, DataItem{.tag = std::string("a"), .val = 2}, DataItem{.tag = std::string("b"), .val = 3}};
std::vector<GGroup> groups = ([]{ std::vector<GGroup> __items;
std::vector<GGroup> __groups;
std::unordered_map<std::string, size_t> __idx;
for (auto d : data) {
        auto __key = d.tag;
        auto it = __idx.find(__key);
        if(it == __idx.end()) {
            GGroup __g{__key, {}};
            __g.items.push_back(d);
            __idx[__key] = __groups.size();
            __groups.push_back(__g);
        } else {
            __groups[it->second].items.push_back(d);
        }
}
for(auto &__g : __groups) {
    GGroup g = __g;
    __items.push_back(g);
}
return __items; }());
auto tmp = std::vector{};
std::vector<auto> result = ([]{ std::vector<std::pair<auto, auto>> __tmp;
for (auto r : tmp) {
        __tmp.emplace_back(r.tag, r);
}
std::sort(__tmp.begin(), __tmp.end(), [](const auto& a,const auto& b){ return a.first < b.first; });
std::vector<auto> __items;
for(size_t __i=0; __i<__tmp.size(); ++__i){
    __items.push_back(__tmp[__i].second);
}
return __items; }());

int main() {
    for (auto g : groups) {
        int total = 0;
        for (auto x : g.items) {
            total = (total + x.val);
        }
        tmp = ([&]{ auto v = tmp; v.push_back(std::map<auto, auto>{{tag, g.key}, {total, total}}); return v; }());
    }
    std::cout << std::boolalpha << result << std::endl;
    return 0;
}
