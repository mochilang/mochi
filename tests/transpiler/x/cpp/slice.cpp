// Generated by Mochi transpiler v0.10.32 on 2025-07-20 23:06:03 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>

int main() {
    std::cout << std::boolalpha << ([&]{ auto tmp = ([&](const auto& c){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) return c.substr(1, 3 - 1); else return std::vector<typename std::decay_t<decltype(c)>::value_type>(c.begin()+1, c.begin()+3); })(std::vector{1, 2, 3}); if constexpr(std::is_same_v<std::decay_t<decltype(tmp)>, std::string>) return tmp; std::ostringstream ss; for(size_t i=0;i<tmp.size();++i){ if(i>0) ss<<" "; ss<<tmp[i]; } return ss.str(); }()) << std::endl;
    std::cout << std::boolalpha << ([&]{ auto tmp = ([&](const auto& c){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) return c.substr(0, 2 - 0); else return std::vector<typename std::decay_t<decltype(c)>::value_type>(c.begin()+0, c.begin()+2); })(std::vector{1, 2, 3}); if constexpr(std::is_same_v<std::decay_t<decltype(tmp)>, std::string>) return tmp; std::ostringstream ss; for(size_t i=0;i<tmp.size();++i){ if(i>0) ss<<" "; ss<<tmp[i]; } return ss.str(); }()) << std::endl;
    std::cout << std::boolalpha << ([&]{ auto tmp = ([&](const auto& c){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) return c.substr(1, 4 - 1); else return std::vector<typename std::decay_t<decltype(c)>::value_type>(c.begin()+1, c.begin()+4); })(std::string("hello")); if constexpr(std::is_same_v<std::decay_t<decltype(tmp)>, std::string>) return tmp; std::ostringstream ss; for(size_t i=0;i<tmp.size();++i){ if(i>0) ss<<" "; ss<<tmp[i]; } return ss.str(); }()) << std::endl;
    return 0;
}
