// Generated by Mochi transpiler v0.10.32 on 2025-07-21 11:04:59 GMT+7
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <type_traits>

int main() {
    { std::ostringstream __ss; __ss << std::boolalpha; if(false) __ss << " "; __ss << ([&]{ auto tmp = ([&](const auto& c){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) return c.substr(1, 3 - 1); else return std::vector<typename std::decay_t<decltype(c)>::value_type>(c.begin()+1, c.begin()+3); })(std::vector{1, 2, 3}); if constexpr(std::is_same_v<std::decay_t<decltype(tmp)>, std::string>) return tmp; std::ostringstream ss; for(size_t i=0;i<tmp.size();++i){ if(i>0) ss<<" "; ss<<tmp[i]; } return ss.str(); }()); auto __line = __ss.str(); if(!__line.empty() && __line.back() == ' ') __line.pop_back(); std::cout << __line << std::endl; }
    { std::ostringstream __ss; __ss << std::boolalpha; if(false) __ss << " "; __ss << ([&]{ auto tmp = ([&](const auto& c){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) return c.substr(0, 2 - 0); else return std::vector<typename std::decay_t<decltype(c)>::value_type>(c.begin()+0, c.begin()+2); })(std::vector{1, 2, 3}); if constexpr(std::is_same_v<std::decay_t<decltype(tmp)>, std::string>) return tmp; std::ostringstream ss; for(size_t i=0;i<tmp.size();++i){ if(i>0) ss<<" "; ss<<tmp[i]; } return ss.str(); }()); auto __line = __ss.str(); if(!__line.empty() && __line.back() == ' ') __line.pop_back(); std::cout << __line << std::endl; }
    { std::ostringstream __ss; __ss << std::boolalpha; if(false) __ss << " "; __ss << ([&]{ auto tmp = ([&](const auto& c){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) return c.substr(1, 4 - 1); else return std::vector<typename std::decay_t<decltype(c)>::value_type>(c.begin()+1, c.begin()+4); })(std::string("hello")); if constexpr(std::is_same_v<std::decay_t<decltype(tmp)>, std::string>) return tmp; std::ostringstream ss; for(size_t i=0;i<tmp.size();++i){ if(i>0) ss<<" "; ss<<tmp[i]; } return ss.str(); }()); auto __line = __ss.str(); if(!__line.empty() && __line.back() == ' ') __line.pop_back(); std::cout << __line << std::endl; }
    return 0;
}
