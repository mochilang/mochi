// Generated by Mochi transpiler v0.10.31 on 2025-07-20 10:28:45 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>

std::string join(const std::string& s) { return s; }
template<typename T>
std::string join(const std::vector<T>& v) {
    std::string o;
    for (size_t i = 0; i < v.size(); ++i) {
        if (i) o += " ";
        o += std::to_string(v[i]);
    }
    return o;
}

int main() {
    std::cout << ([&]{ auto tmp = ([&](const auto& c){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) return c.substr(1, 3 - 1); else return std::vector<typename std::decay_t<decltype(c)>::value_type>(c.begin()+1, c.begin()+3); })(std::vector{1, 2, 3}); if constexpr(std::is_same_v<std::decay_t<decltype(tmp)>, std::string>) { return tmp; } else { return join(tmp); } }()) << std::endl;
    std::cout << ([&]{ auto tmp = ([&](const auto& c){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) return c.substr(0, 2 - 0); else return std::vector<typename std::decay_t<decltype(c)>::value_type>(c.begin()+0, c.begin()+2); })(std::vector{1, 2, 3}); if constexpr(std::is_same_v<std::decay_t<decltype(tmp)>, std::string>) { return tmp; } else { return join(tmp); } }()) << std::endl;
    std::cout << ([&]{ auto tmp = ([&](const auto& c){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) return c.substr(1, 4 - 1); else return std::vector<typename std::decay_t<decltype(c)>::value_type>(c.begin()+1, c.begin()+4); })(std::string("hello")); if constexpr(std::is_same_v<std::decay_t<decltype(tmp)>, std::string>) { return tmp; } else { return join(tmp); } }()) << std::endl;
    return 0;
}
