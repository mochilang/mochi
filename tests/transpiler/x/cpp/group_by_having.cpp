// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:19:55 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <unordered_map>
#include <sstream>
#include <iomanip>


struct PeopleItem {
    std::string name;
    std::string city;
};

struct GGroup {
    std::string key;
    std::vector<PeopleItem> items;
    auto begin() { return items.begin(); }
    auto end() { return items.end(); }
    size_t size() const { return items.size(); }
};

struct BigItem {
    std::string city;
    int num;
};

std::vector<PeopleItem> people = std::vector{PeopleItem{.name = std::string("Alice"), .city = std::string("Paris")}, PeopleItem{.name = std::string("Bob"), .city = std::string("Hanoi")}, PeopleItem{.name = std::string("Charlie"), .city = std::string("Paris")}, PeopleItem{.name = std::string("Diana"), .city = std::string("Hanoi")}, PeopleItem{.name = std::string("Eve"), .city = std::string("Paris")}, PeopleItem{.name = std::string("Frank"), .city = std::string("Hanoi")}, PeopleItem{.name = std::string("George"), .city = std::string("Paris")}};
std::vector<BigItem> big = ([]{ std::vector<BigItem> __items;
std::vector<GGroup> __groups;
std::unordered_map<std::string, size_t> __idx;
for (auto p : people) {
        auto __key = p.city;
        auto it = __idx.find(__key);
        if(it == __idx.end()) {
            GGroup __g{__key, {}};
            __g.items.push_back(p);
            __idx[__key] = __groups.size();
            __groups.push_back(__g);
        } else {
            __groups[it->second].items.push_back(p);
        }
}
for(auto &__g : __groups) {
    GGroup g = __g;
    __items.push_back(BigItem{.city = g.key, .num = g.size()});
}
return __items; }());

int main() {
    json(big);
    return 0;
}
