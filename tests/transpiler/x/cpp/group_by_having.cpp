// Generated by Mochi transpiler v0.10.32 on 2025-07-21 11:04:40 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>

struct PeopleItem {
    std::string name;
    std::string city;
};

struct GGroup {
    std::string key;
    std::vector<PeopleItem> items;
    auto begin() { return items.begin(); }
    auto end() { return items.end(); }
    size_t size() const { return items.size(); }
};

struct BigItem {
    std::string city;
    int num;
};

std::vector<PeopleItem> people = std::vector{PeopleItem{.name = std::string("Alice"), .city = std::string("Paris")}, PeopleItem{.name = std::string("Bob"), .city = std::string("Hanoi")}, PeopleItem{.name = std::string("Charlie"), .city = std::string("Paris")}, PeopleItem{.name = std::string("Diana"), .city = std::string("Hanoi")}, PeopleItem{.name = std::string("Eve"), .city = std::string("Paris")}, PeopleItem{.name = std::string("Frank"), .city = std::string("Hanoi")}, PeopleItem{.name = std::string("George"), .city = std::string("Paris")}};
std::vector<BigItem> big = ([]{ std::vector<BigItem> __items;
std::map<std::string, std::vector<PeopleItem>> __groups;
for (auto p : people) {
        __groups[p.city].push_back(p);
}
for(auto &__kv : __groups) {
    GGroup g{__kv.first, __kv.second};
    __items.push_back(BigItem{.city = g.key, .num = g.size()});
}
return __items; }());

int main() {
    json(big);
    return 0;
}
