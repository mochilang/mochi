// Generated by Mochi transpiler v0.10.33 on 2025-07-21 16:39:12 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <iomanip>

static std::string format_double(double v) {
    std::ostringstream ss;
    ss << std::fixed << std::setprecision(15) << v;
    auto s = ss.str();
    if(s.find('.') != std::string::npos) {
        while(!s.empty() && s.back()=='0') s.pop_back();
        if(!s.empty() && s.back()=='.') s.push_back('0');
    }
    return s;
}

struct CustomersItem {
    int id;
    std::string name;
};

struct OrdersItem {
    int id;
    int customerId;
    int total;
};

struct ResultItem {
    int orderId;
    int orderCustomerId;
    std::string pairedCustomerName;
    int orderTotal;
};

std::vector<CustomersItem> customers = std::vector{CustomersItem{.id = 1, .name = std::string("Alice")}, CustomersItem{.id = 2, .name = std::string("Bob")}, CustomersItem{.id = 3, .name = std::string("Charlie")}};
std::vector<OrdersItem> orders = std::vector{OrdersItem{.id = 100, .customerId = 1, .total = 250}, OrdersItem{.id = 101, .customerId = 2, .total = 125}, OrdersItem{.id = 102, .customerId = 1, .total = 300}};
std::vector<ResultItem> result = ([]{ std::vector<ResultItem> __items;
for (auto o : orders) {
for (auto c : customers) {
        __items.push_back(ResultItem{.orderId = o.id, .orderCustomerId = o.customerId, .pairedCustomerName = c.name, .orderTotal = o.total});
}
}
return __items; }());

int main() {
    std::cout << std::boolalpha << std::showpoint << std::setprecision(15) << std::string("--- Cross Join: All order-customer pairs ---") << std::endl;
    for (auto entry : result) {
        std::cout << std::boolalpha << std::showpoint << std::setprecision(15) << std::string("Order") << " " << entry.orderId << " " << std::string("(customerId:") << " " << entry.orderCustomerId << " " << std::string(", total: $") << " " << entry.orderTotal << " " << std::string(") paired with") << " " << entry.pairedCustomerName << std::endl;
    }
    return 0;
}
