// Generated by Mochi transpiler v0.10.32 on 2025-07-21 11:04:56 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <sstream>

struct DataItem {
    int a;
    int b;
};

std::vector<DataItem> data = std::vector{DataItem{.a = 1, .b = 2}, DataItem{.a = 1, .b = 1}, DataItem{.a = 0, .b = 5}};
std::vector<DataItem> sorted = ([]{ std::vector<std::pair<std::map<auto, int>, DataItem>> __tmp;
for (auto x : data) {
        __tmp.emplace_back(std::map<auto, auto>{{a, x.a}, {b, x.b}}, x);
}
std::sort(__tmp.begin(), __tmp.end(), [](const auto& a,const auto& b){ return a.first < b.first; });
std::vector<DataItem> __items;
for(size_t __i=0; __i<__tmp.size(); ++__i){
    __items.push_back(__tmp[__i].second);
}
return __items; }());

int main() {
    { std::ostringstream __ss; __ss << std::boolalpha; if(false) __ss << " "; __ss << sorted; auto __line = __ss.str(); if(!__line.empty() && __line.back() == ' ') __line.pop_back(); std::cout << __line << std::endl; }
    return 0;
}
