// Generated by Mochi transpiler v0.10.32 on 2025-07-21 11:04:40 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <sstream>

struct CustomersItem {
    int id;
    std::string name;
};

struct OrdersItem {
    int id;
    int customerId;
};

struct GGroup {
    std::string key;
    std::vector<CustomersItem> items;
    auto begin() { return items.begin(); }
    auto end() { return items.end(); }
    size_t size() const { return items.size(); }
};

struct StatsItem {
    std::string name;
    int count;
};

std::vector<CustomersItem> customers = std::vector{CustomersItem{.id = 1, .name = std::string("Alice")}, CustomersItem{.id = 2, .name = std::string("Bob")}};
std::vector<OrdersItem> orders = std::vector{OrdersItem{.id = 100, .customerId = 1}, OrdersItem{.id = 101, .customerId = 1}, OrdersItem{.id = 102, .customerId = 2}};
std::vector<StatsItem> stats = ([]{ std::vector<StatsItem> __items;
std::map<std::string, std::vector<CustomersItem>> __groups;
for (auto o : orders) {
for (auto c : customers) {
    if((o.customerId == c.id)) {
        __groups[c.name].push_back(c);
    }
}
}
for(auto &__kv : __groups) {
    GGroup g{__kv.first, __kv.second};
    __items.push_back(StatsItem{.name = g.key, .count = g.size()});
}
return __items; }());

int main() {
    { std::ostringstream __ss; __ss << std::boolalpha; if(false) __ss << " "; __ss << std::string("--- Orders per customer ---"); auto __line = __ss.str(); if(!__line.empty() && __line.back() == ' ') __line.pop_back(); std::cout << __line << std::endl; }
    for (auto s : stats) {
        { std::ostringstream __ss; __ss << std::boolalpha; if(false) __ss << " "; __ss << s.name; if(true) __ss << " "; __ss << std::string("orders:"); if(true) __ss << " "; __ss << s.count; auto __line = __ss.str(); if(!__line.empty() && __line.back() == ' ') __line.pop_back(); std::cout << __line << std::endl; }
    }
    return 0;
}
