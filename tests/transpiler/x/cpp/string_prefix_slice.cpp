// Generated by Mochi transpiler v0.10.31 on 2025-07-20 10:28:46 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <type_traits>

std::string join(const std::string& s) { return s; }
template<typename T>
std::string join(const std::vector<T>& v) {
    std::string o;
    for (size_t i = 0; i < v.size(); ++i) {
        if (i) o += " ";
        o += std::to_string(v[i]);
    }
    return o;
}

int main() {
    auto prefix = std::string("fore");
    auto s1 = std::string("forest");
    std::cout << (([&](const auto& c){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) return c.substr(0, prefix.size() - 0); else return std::vector<typename std::decay_t<decltype(c)>::value_type>(c.begin()+0, c.begin()+prefix.size()); })(s1) == prefix) << std::endl;
    auto s2 = std::string("desert");
    std::cout << (([&](const auto& c){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) return c.substr(0, prefix.size() - 0); else return std::vector<typename std::decay_t<decltype(c)>::value_type>(c.begin()+0, c.begin()+prefix.size()); })(s2) == prefix) << std::endl;
    return 0;
}
