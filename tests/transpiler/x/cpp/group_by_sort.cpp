// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:19:57 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <numeric>
#include <unordered_map>
#include <sstream>
#include <iomanip>


struct ItemsItem {
    std::string cat;
    int val;
};

struct GGroup {
    std::string key;
    std::vector<ItemsItem> items;
    auto begin() { return items.begin(); }
    auto end() { return items.end(); }
    size_t size() const { return items.size(); }
};

struct GroupedItem {
    std::string cat;
    auto total;
};

std::vector<ItemsItem> items = std::vector{ItemsItem{.cat = std::string("a"), .val = 3}, ItemsItem{.cat = std::string("a"), .val = 1}, ItemsItem{.cat = std::string("b"), .val = 5}, ItemsItem{.cat = std::string("b"), .val = 2}};
std::vector<GroupedItem> grouped = ([]{ std::vector<GroupedItem> __items;
std::vector<GGroup> __groups;
std::unordered_map<std::string, size_t> __idx;
for (auto i : items) {
        auto __key = i.cat;
        auto it = __idx.find(__key);
        if(it == __idx.end()) {
            GGroup __g{__key, {}};
            __g.items.push_back(i);
            __idx[__key] = __groups.size();
            __groups.push_back(__g);
        } else {
            __groups[it->second].items.push_back(i);
        }
}
for(auto &__g : __groups) {
    GGroup g = __g;
    __items.push_back(GroupedItem{.cat = g.key, .total = std::accumulate(([]{ std::vector<int> __items;
for (auto x : g) {
        __items.push_back(x.val);
}
return __items; }()).begin(), ([]{ std::vector<int> __items;
for (auto x : g) {
        __items.push_back(x.val);
}
return __items; }()).end(), 0)});
}
return __items; }());

int main() {
    std::cout << std::boolalpha << grouped << std::endl;
    return 0;
}
