// Generated by Mochi transpiler v0.10.32 on 2025-07-21 11:04:41 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <numeric>
#include <sstream>

struct ItemsItem {
    std::string cat;
    int val;
};

struct GGroup {
    std::string key;
    std::vector<ItemsItem> items;
    auto begin() { return items.begin(); }
    auto end() { return items.end(); }
    size_t size() const { return items.size(); }
};

struct GroupedItem {
    std::string cat;
    auto total;
};

std::vector<ItemsItem> items = std::vector{ItemsItem{.cat = std::string("a"), .val = 3}, ItemsItem{.cat = std::string("a"), .val = 1}, ItemsItem{.cat = std::string("b"), .val = 5}, ItemsItem{.cat = std::string("b"), .val = 2}};
std::vector<GroupedItem> grouped = ([]{ std::vector<GroupedItem> __items;
std::map<std::string, std::vector<ItemsItem>> __groups;
for (auto i : items) {
        __groups[i.cat].push_back(i);
}
for(auto &__kv : __groups) {
    GGroup g{__kv.first, __kv.second};
    __items.push_back(GroupedItem{.cat = g.key, .total = std::accumulate(([]{ std::vector<auto> __items;
for (auto x : g) {
        __items.push_back(x.val);
}
return __items; }()).begin(), ([]{ std::vector<auto> __items;
for (auto x : g) {
        __items.push_back(x.val);
}
return __items; }()).end(), 0)});
}
return __items; }());

int main() {
    { std::ostringstream __ss; __ss << std::boolalpha; if(false) __ss << " "; __ss << grouped; auto __line = __ss.str(); if(!__line.empty() && __line.back() == ' ') __line.pop_back(); std::cout << __line << std::endl; }
    return 0;
}
