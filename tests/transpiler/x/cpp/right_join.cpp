// Generated by Mochi transpiler v0.10.35 on 2025-07-22 13:21:18 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <optional>
#include <sstream>
#include <iomanip>


struct CustomersItem {
    int id;
    std::string name;
    auto operator<=>(const CustomersItem&) const = default;
};

struct OrdersItem {
    int id;
    int customerId;
    int total;
    auto operator<=>(const OrdersItem&) const = default;
};

struct ResultItem {
    std::string customerName;
    std::optional<OrdersItem> order;
    auto operator<=>(const ResultItem&) const = default;
};

std::ostream& operator<<(std::ostream& os, const CustomersItem& v) {
    os << '{' << "'id': "<< v.id
 << ", " << "'name': "<< "'" << v.name << "'"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const OrdersItem& v) {
    os << '{' << "'id': "<< v.id
 << ", " << "'customerId': "<< v.customerId
 << ", " << "'total': "<< v.total
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const ResultItem& v) {
    os << '{' << "'customerName': "<< "'" << v.customerName << "'"
 << ", " << "'order': "; if(v.order) os << *v.order; else os << "None"; os
 << '}';
    return os;
}

std::vector<CustomersItem> customers = std::vector{CustomersItem{.id = 1, .name = std::string("Alice")}, CustomersItem{.id = 2, .name = std::string("Bob")}, CustomersItem{.id = 3, .name = std::string("Charlie")}, CustomersItem{.id = 4, .name = std::string("Diana")}};
std::vector<OrdersItem> orders = std::vector{OrdersItem{.id = 100, .customerId = 1, .total = 250}, OrdersItem{.id = 101, .customerId = 2, .total = 125}, OrdersItem{.id = 102, .customerId = 1, .total = 300}};
std::vector<ResultItem> result = ([]{ std::vector<ResultItem> __items;
for (auto o : orders) {
    bool __matched = false;
    for (auto __c : customers) {
        auto c = __c;
        if((o.customerId == c.id)) {
            __matched = true;
            { std::optional<CustomersItem> c_opt(c);
            auto c = c_opt;
            __items.push_back(ResultItem{.customerName = c->name, .order = std::optional<OrdersItem>(o)}); }
        }
    }
    if(!__matched) {
        std::optional<CustomersItem> c = std::nullopt;
        __items.push_back(ResultItem{.customerName = c->name, .order = std::optional<OrdersItem>(o)});
    }
}
return __items; }());

int main() {
    std::cout << std::string("--- Right Join using syntax ---");
    std::cout << std::endl;
    for (ResultItem entry : result) {
        if (entry.order) {
            std::cout << std::string("Customer");
            std::cout << " ";
            std::cout << entry.customerName;
            std::cout << " ";
            std::cout << std::string("has order");
            std::cout << " ";
            std::cout << entry.order->id;
            std::cout << " ";
            std::cout << std::string("- $");
            std::cout << " ";
            std::cout << entry.order->total;
            std::cout << std::endl;
        } else {
            std::cout << std::string("Customer");
            std::cout << " ";
            std::cout << entry.customerName;
            std::cout << " ";
            std::cout << std::string("has no orders");
            std::cout << std::endl;
        }
    }
    return 0;
}
