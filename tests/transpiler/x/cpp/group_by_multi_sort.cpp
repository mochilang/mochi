// Generated by Mochi transpiler v0.10.35 on 2025-07-22 14:58:32 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <numeric>
#include <algorithm>
#include <sstream>
#include <iomanip>
#include <optional>


struct ItemsItem {
    std::string a;
    int b;
    int val;
    auto operator<=>(const ItemsItem&) const = default;
};

struct GKey {
    std::string a;
    int b;
    auto operator<=>(const GKey&) const = default;
};

struct GGroup {
    GKey key;
    std::vector<ItemsItem> items;
    auto operator<=>(const GGroup&) const = default;
    auto begin() { return items.begin(); }
    auto end() { return items.end(); }
    size_t size() const { return items.size(); }
};

struct GenType3 {
    std::string a;
    int b;
    int total;
    auto operator<=>(const GenType3&) const = default;
};

std::ostream& operator<<(std::ostream& os, const ItemsItem& v) {
    os << "ItemsItem {" << "a = "<< "\"" << v.a << "\""
 << ", " << "b = "<< v.b
 << ", " << "val = "<< v.val
 << "}";
    return os;
}

std::ostream& operator<<(std::ostream& os, const GKey& v) {
    os << "GKey {" << "a = "<< "\"" << v.a << "\""
 << ", " << "b = "<< v.b
 << "}";
    return os;
}

std::ostream& operator<<(std::ostream& os, const GGroup& v) {
    os << "GGroup {" << "key = "<< v.key
 << ", " << "items = "<< '['; for(size_t i=0;i<v.items.size();++i){ if(i>0) os << ', '; os << v.items[i]; } os << ']'
 << "}";
    return os;
}

std::ostream& operator<<(std::ostream& os, const GenType3& v) {
    os << "GenType3 {" << "a = "<< "\"" << v.a << "\""
 << ", " << "b = "<< v.b
 << ", " << "total = "<< v.total
 << "}";
    return os;
}

std::vector<ItemsItem> items = std::vector{ItemsItem{.a = std::string("x"), .b = 1, .val = 2}, ItemsItem{.a = std::string("x"), .b = 2, .val = 3}, ItemsItem{.a = std::string("y"), .b = 1, .val = 4}, ItemsItem{.a = std::string("y"), .b = 2, .val = 1}};
std::vector<GenType3> grouped = ([]{ std::vector<std::pair<int, GenType3>> __tmp;
std::vector<GGroup> __groups;
for (auto i : items) {
        ItemsItem __row{i};
        auto __key = GKey{.a = i.a, .b = i.b};
        bool __found = false;
        for(auto &__g : __groups) {
            if(__g.key == __key) { __g.items.push_back(__row); __found = true; break; }
        }
        if(!__found) {
            GGroup __g{__key, {}};
            __g.items.push_back(__row);
            __groups.push_back(__g);
        }
}
for(auto &__g : __groups) {
    GGroup g = __g;
    __tmp.emplace_back(([&]{ auto __tmp = ([&]{ std::vector<int> __items;
for (auto x : g) {
        __items.push_back(x.val);
}
return __items; }()); return std::accumulate(__tmp.begin(), __tmp.end(), 0); }()), GenType3{.a = g.key.a, .b = g.key.b, .total = ([&]{ auto __tmp = ([&]{ std::vector<int> __items;
for (auto x : g) {
        __items.push_back(x.val);
}
return __items; }()); return std::accumulate(__tmp.begin(), __tmp.end(), 0); }())});
}
std::sort(__tmp.begin(), __tmp.end(), [](const auto& a,const auto& b){ return a.first > b.first; });
std::vector<GenType3> __items;
for(size_t __i=0; __i<__tmp.size(); ++__i){ __items.push_back(__tmp[__i].second); }
return __items; }());

int main() {
    { auto __tmp = grouped; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ","; std::cout << __tmp[i]; } std::cout << "]"; }
    std::cout << std::endl;
    return 0;
}
