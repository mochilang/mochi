// Generated by Mochi transpiler v0.10.35 on 2025-07-22 15:14:25 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <numeric>
#include <sstream>
#include <iomanip>
#include <optional>



struct ItemsItem {
    std::string a;
    int b;
    int val;
    auto operator<=>(const ItemsItem&) const = default;
};

struct GKey {
    std::string a;
    int b;
    auto operator<=>(const GKey&) const = default;
};

struct GGroup {
    GKey key;
    std::vector<ItemsItem> items;
    auto operator<=>(const GGroup&) const = default;
    auto begin() { return items.begin(); }
    auto end() { return items.end(); }
    size_t size() const { return items.size(); }
};

struct GroupedItem {
    std::string a;
    int b;
    double total;
    auto operator<=>(const GroupedItem&) const = default;
};

std::ostream& operator<<(std::ostream& os, const ItemsItem& v) {
    os << '{' << "'a': "<< "'" << v.a << "'"
 << ", " << "'b': "<< v.b
 << ", " << "'val': "<< v.val
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const GKey& v) {
    os << '{' << "'a': "<< "'" << v.a << "'"
 << ", " << "'b': "<< v.b
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const GGroup& v) {
    os << '{' << "'key': "<< v.key
 << ", " << "'items': "<< "["; for(size_t i=0;i<v.items.size();++i){ if(i>0) os << ", "; os << v.items[i]; } os << "]"
 << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const GroupedItem& v) {
    os << '{' << "'a': "<< "'" << v.a << "'"
 << ", " << "'b': "<< v.b
 << ", " << "'total': "<< std::fixed << std::setprecision(1) << v.total
 << '}';
    return os;
}

std::vector<ItemsItem> items = std::vector{ItemsItem{.a = std::string("x"), .b = 1, .val = 2}, ItemsItem{.a = std::string("x"), .b = 2, .val = 3}, ItemsItem{.a = std::string("y"), .b = 1, .val = 4}, ItemsItem{.a = std::string("y"), .b = 2, .val = 1}};
std::vector<GroupedItem> grouped = ([]{ std::vector<GroupedItem> __items;
std::map<GKey, std::vector<ItemsItem>> __groups;
for (auto i : items) {
        ItemsItem __row{i};
        auto __key = GKey{.a = i.a, .b = i.b};
        __groups[__key].push_back(__row);
}
for(const auto& __kv : __groups) {
    GGroup g{__kv.first, __kv.second};
    __items.push_back(GroupedItem{.a = g.key.a, .b = g.key.b, .total = ([&]{ auto __tmp = ([&]{ std::vector<int> __items;
for (auto x : g) {
        __items.push_back(x.val);
}
return __items; }()); return std::accumulate(__tmp.begin(), __tmp.end(), 0.0); }())});
}
return __items; }());

int main() {
    { auto __tmp = grouped; std::cout << "["; for(size_t i=0;i<__tmp.size();++i){ if(i>0) std::cout << ", "; std::cout << __tmp[i]; } std::cout << "]"; }
    std::cout << std::endl;
    return 0;
}
