// Generated by Mochi transpiler v0.10.32 on 2025-07-20 23:05:54 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <type_traits>

auto nums = std::vector{1, 2, 3};

int main() {
    std::cout << std::boolalpha << ([&](const auto& c, const auto& v){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) { return c.find(v) != std::string::npos; } else if constexpr(requires { c.find(v); }) { return c.find(v) != c.end(); } else { return std::find(c.begin(), c.end(), v) != c.end(); } })(nums, 2) << std::endl;
    std::cout << std::boolalpha << ([&](const auto& c, const auto& v){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) { return c.find(v) != std::string::npos; } else if constexpr(requires { c.find(v); }) { return c.find(v) != c.end(); } else { return std::find(c.begin(), c.end(), v) != c.end(); } })(nums, 4) << std::endl;
    return 0;
}
