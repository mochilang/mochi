// Generated by Mochi transpiler v0.10.32 on 2025-07-21 07:16:20 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <numeric>

struct ItemsItem {
    std::string cat;
    int val;
    bool flag;
};

struct GGroup {
    std::string key;
    std::vector<ItemsItem> items;
    auto begin() { return items.begin(); }
    auto end() { return items.end(); }
    size_t size() const { return items.size(); }
};

struct ResultItem {
    std::string cat;
    auto share;
};

std::vector<ItemsItem> items = std::vector{ItemsItem{.cat = std::string("a"), .val = 10, .flag = true}, ItemsItem{.cat = std::string("a"), .val = 5, .flag = false}, ItemsItem{.cat = std::string("b"), .val = 20, .flag = true}};
std::vector<ResultItem> result = ([]{ std::vector<ResultItem> __items;
std::map<std::string, std::vector<ItemsItem>> __groups;
for (auto i : items) {
        __groups[i.cat].push_back(i);
}
for(auto &__kv : __groups) {
    GGroup g{__kv.first, __kv.second};
    __items.push_back(ResultItem{.cat = g.key, .share = (std::accumulate(([]{ std::vector<auto> __items;
for (auto x : g) {
        __items.push_back((x.flag ? x.val : 0));
}
return __items; }()).begin(), ([]{ std::vector<auto> __items;
for (auto x : g) {
        __items.push_back((x.flag ? x.val : 0));
}
return __items; }()).end(), 0) / std::accumulate(([]{ std::vector<auto> __items;
for (auto x : g) {
        __items.push_back(x.val);
}
return __items; }()).begin(), ([]{ std::vector<auto> __items;
for (auto x : g) {
        __items.push_back(x.val);
}
return __items; }()).end(), 0))});
}
return __items; }());

int main() {
    std::cout << std::boolalpha << result << std::endl;
    return 0;
}
