// Generated by Mochi transpiler v0.10.34 on 2025-07-21 20:45:53 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <optional>
#include <sstream>
#include <iomanip>


template<typename T>
std::ostream& operator<<(std::ostream& os, const std::optional<T>& v) {
    if(v) os << *v; else os << "None";
    return os;
}

struct CustomersItem {
    int id;
    std::string name;
};

struct OrdersItem {
    int id;
    int customerId;
    int total;
};

struct ResultItem {
    int orderId;
    std::optional<CustomersItem> customer;
    int total;
};

std::ostream& operator<<(std::ostream& os, const CustomersItem& v) {
    os << '{' << "'id': " << v.id << ", " << "'name': '" << v.name << "'" << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const OrdersItem& v) {
    os << '{' << "'id': " << v.id << ", " << "'customerId': " << v.customerId << ", " << "'total': " << v.total << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const ResultItem& v) {
    os << '{' << "'orderId': " << v.orderId << ", " << "'customer': " << v.customer << ", " << "'total': " << v.total << '}';
    return os;
}

std::vector<CustomersItem> customers = std::vector{CustomersItem{.id = 1, .name = "Alice"}, CustomersItem{.id = 2, .name = "Bob"}};
std::vector<OrdersItem> orders = std::vector{OrdersItem{.id = 100, .customerId = 1, .total = 250}, OrdersItem{.id = 101, .customerId = 3, .total = 80}};
auto result = ([]{ std::vector<ResultItem> __items;
for (auto o : orders) {
    bool __matched = false;
    for (auto __c : customers) {
        auto c = __c;
        if((o.customerId == c.id)) {
            __matched = true;
            { std::optional<CustomersItem> c_opt(c);
            auto c = c_opt;
            __items.push_back(ResultItem{.orderId = o.id, .customer = c, .total = o.total}); }
        }
    }
    if(!__matched) {
        std::optional<CustomersItem> c = std::nullopt;
        __items.push_back(ResultItem{.orderId = o.id, .customer = c, .total = o.total});
    }
}
return __items; }());

int main() {
    std::cout << ([&]{ std::ostringstream ss; ss<<"--- Left Join ---"; return ss.str(); }()) << std::endl;
    for (auto entry : result) {
        std::cout << ([&]{ std::ostringstream ss; ss<<"Order"; return ss.str(); }()) << ' ' << ([&]{ std::ostringstream ss; ss<<entry.orderId; return ss.str(); }()) << ' ' << ([&]{ std::ostringstream ss; ss<<"customer"; return ss.str(); }()) << ' ' << ([&]{ std::ostringstream ss; ss<<entry.customer; return ss.str(); }()) << ' ' << ([&]{ std::ostringstream ss; ss<<"total"; return ss.str(); }()) << ' ' << ([&]{ std::ostringstream ss; ss<<entry.total; return ss.str(); }()) << std::endl;
    }
    return 0;
}
