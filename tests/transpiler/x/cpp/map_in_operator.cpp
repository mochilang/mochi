// Generated by Mochi transpiler v0.10.31 on 2025-07-20 10:40:29 GMT+7
#include <iostream>
#include <string>
#include <unordered_map>
#include <algorithm>
#include <type_traits>

int main() {
    auto m = std::unordered_map<int, std::string>{{1, std::string("a")}, {2, std::string("b")}};
    std::cout << ([&](const auto& c, const auto& v){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) { return c.find(v) != std::string::npos; } else if constexpr(requires { c.find(v); }) { return c.find(v) != c.end(); } else { return std::find(c.begin(), c.end(), v) != c.end(); } })(m, 1) << std::endl;
    std::cout << ([&](const auto& c, const auto& v){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) { return c.find(v) != std::string::npos; } else if constexpr(requires { c.find(v); }) { return c.find(v) != c.end(); } else { return std::find(c.begin(), c.end(), v) != c.end(); } })(m, 3) << std::endl;
    return 0;
}
