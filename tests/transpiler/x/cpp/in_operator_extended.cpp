// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:20:00 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <algorithm>
#include <type_traits>
#include <map>


auto xs = std::vector{1, 2, 3};
std::vector<int> ys = ([]{ std::vector<int> __items;
for (auto x : xs) {
    if(((x % 2) == 1)) {
        __items.push_back(x);
    }
}
return __items; }());
auto m = std::map<auto, int>{{a, 1}};
auto s = std::string("hello");

int main() {
    std::cout << std::boolalpha << ([&](const auto& c, const auto& v){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) { return c.find(v) != std::string::npos; } else if constexpr(requires { c.find(v); }) { return c.find(v) != c.end(); } else { return std::find(c.begin(), c.end(), v) != c.end(); } })(ys, 1) << std::endl;
    std::cout << std::boolalpha << ([&](const auto& c, const auto& v){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) { return c.find(v) != std::string::npos; } else if constexpr(requires { c.find(v); }) { return c.find(v) != c.end(); } else { return std::find(c.begin(), c.end(), v) != c.end(); } })(ys, 2) << std::endl;
    std::cout << std::boolalpha << ([&](const auto& c, const auto& v){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) { return c.find(v) != std::string::npos; } else if constexpr(requires { c.find(v); }) { return c.find(v) != c.end(); } else { return std::find(c.begin(), c.end(), v) != c.end(); } })(m, std::string("a")) << std::endl;
    std::cout << std::boolalpha << ([&](const auto& c, const auto& v){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) { return c.find(v) != std::string::npos; } else if constexpr(requires { c.find(v); }) { return c.find(v) != c.end(); } else { return std::find(c.begin(), c.end(), v) != c.end(); } })(m, std::string("b")) << std::endl;
    std::cout << std::boolalpha << ([&](const auto& c, const auto& v){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) { return c.find(v) != std::string::npos; } else if constexpr(requires { c.find(v); }) { return c.find(v) != c.end(); } else { return std::find(c.begin(), c.end(), v) != c.end(); } })(s, std::string("ell")) << std::endl;
    std::cout << std::boolalpha << ([&](const auto& c, const auto& v){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) { return c.find(v) != std::string::npos; } else if constexpr(requires { c.find(v); }) { return c.find(v) != c.end(); } else { return std::find(c.begin(), c.end(), v) != c.end(); } })(s, std::string("foo")) << std::endl;
    return 0;
}
