// Generated by Mochi transpiler v0.10.33 on 2025-07-21 17:17:37 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <algorithm>
#include <type_traits>


auto xs = std::vector{1, 2, 3};

int main() {
    { std::ostringstream __os; __os << std::boolalpha << std::showpoint << std::setprecision(15); __os << ([&](const auto& c, const auto& v){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) { return c.find(v) != std::string::npos; } else if constexpr(requires { c.find(v); }) { return c.find(v) != c.end(); } else { return std::find(c.begin(), c.end(), v) != c.end(); } })(xs, 2); auto __str = __os.str(); if(!__str.empty() && __str.back()==' ') __str.pop_back(); std::cout << __str << std::endl; }
    { std::ostringstream __os; __os << std::boolalpha << std::showpoint << std::setprecision(15); __os << (!([&](const auto& c, const auto& v){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) { return c.find(v) != std::string::npos; } else if constexpr(requires { c.find(v); }) { return c.find(v) != c.end(); } else { return std::find(c.begin(), c.end(), v) != c.end(); } })(xs, 5) ? 1 : 0); auto __str = __os.str(); if(!__str.empty() && __str.back()==' ') __str.pop_back(); std::cout << __str << std::endl; }
    return 0;
}
