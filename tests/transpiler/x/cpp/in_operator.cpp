// Generated by Mochi transpiler v0.10.33 on 2025-07-21 16:39:25 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iomanip>
#include <algorithm>
#include <type_traits>

static std::string format_double(double v) {
    std::ostringstream ss;
    ss << std::fixed << std::setprecision(15) << v;
    auto s = ss.str();
    if(s.find('.') != std::string::npos) {
        while(!s.empty() && s.back()=='0') s.pop_back();
        if(!s.empty() && s.back()=='.') s.push_back('0');
    }
    return s;
}

auto xs = std::vector{1, 2, 3};

int main() {
    std::cout << std::boolalpha << std::showpoint << std::setprecision(15) << ([&](const auto& c, const auto& v){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) { return c.find(v) != std::string::npos; } else if constexpr(requires { c.find(v); }) { return c.find(v) != c.end(); } else { return std::find(c.begin(), c.end(), v) != c.end(); } })(xs, 2) << std::endl;
    std::cout << std::boolalpha << std::showpoint << std::setprecision(15) << (!([&](const auto& c, const auto& v){ if constexpr(std::is_same_v<std::decay_t<decltype(c)>, std::string>) { return c.find(v) != std::string::npos; } else if constexpr(requires { c.find(v); }) { return c.find(v) != c.end(); } else { return std::find(c.begin(), c.end(), v) != c.end(); } })(xs, 5) ? 1 : 0) << std::endl;
    return 0;
}
