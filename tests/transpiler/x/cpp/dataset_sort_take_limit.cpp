// Generated by Mochi transpiler v0.10.32 on 2025-07-21 11:04:34 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <sstream>

struct ProductsItem {
    std::string name;
    int price;
};

std::vector<ProductsItem> products = std::vector{ProductsItem{.name = std::string("Laptop"), .price = 1500}, ProductsItem{.name = std::string("Smartphone"), .price = 900}, ProductsItem{.name = std::string("Tablet"), .price = 600}, ProductsItem{.name = std::string("Monitor"), .price = 300}, ProductsItem{.name = std::string("Keyboard"), .price = 100}, ProductsItem{.name = std::string("Mouse"), .price = 50}, ProductsItem{.name = std::string("Headphones"), .price = 200}};
std::vector<ProductsItem> expensive = ([]{ std::vector<std::pair<int, ProductsItem>> __tmp;
for (auto p : products) {
        __tmp.emplace_back(p.price, p);
}
std::sort(__tmp.begin(), __tmp.end(), [](const auto& a,const auto& b){ return a.first > b.first; });
std::vector<ProductsItem> __items;
auto __skip = 1;
auto __take = 3;
for(size_t __i=0; __i<__tmp.size(); ++__i){
    if(__i < static_cast<size_t>(__skip)) continue;
    if(__items.size() >= static_cast<size_t>(__take)) break;
    __items.push_back(__tmp[__i].second);
}
return __items; }());

int main() {
    { std::ostringstream __ss; __ss << std::boolalpha; if(false) __ss << " "; __ss << std::string("--- Top products (excluding most expensive) ---"); auto __line = __ss.str(); if(!__line.empty() && __line.back() == ' ') __line.pop_back(); std::cout << __line << std::endl; }
    for (auto item : expensive) {
        { std::ostringstream __ss; __ss << std::boolalpha; if(false) __ss << " "; __ss << item.name; if(true) __ss << " "; __ss << std::string("costs $"); if(true) __ss << " "; __ss << item.price; auto __line = __ss.str(); if(!__line.empty() && __line.back() == ' ') __line.pop_back(); std::cout << __line << std::endl; }
    }
    return 0;
}
