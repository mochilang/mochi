// Generated by Mochi transpiler v0.10.32 on 2025-07-21 11:04:33 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <sstream>

struct CombosItem {
    int n;
    std::string l;
    bool b;
};

auto nums = std::vector{1, 2};
auto letters = std::vector{std::string("A"), std::string("B")};
auto bools = std::vector{true, false};
std::vector<CombosItem> combos = ([]{ std::vector<CombosItem> __items;
for (auto n : nums) {
for (auto l : letters) {
for (auto b : bools) {
        __items.push_back(CombosItem{.n = n, .l = l, .b = b});
}
}
}
return __items; }());

int main() {
    { std::ostringstream __ss; __ss << std::boolalpha; if(false) __ss << " "; __ss << std::string("--- Cross Join of three lists ---"); auto __line = __ss.str(); if(!__line.empty() && __line.back() == ' ') __line.pop_back(); std::cout << __line << std::endl; }
    for (auto c : combos) {
        { std::ostringstream __ss; __ss << std::boolalpha; if(false) __ss << " "; __ss << c.n; if(true) __ss << " "; __ss << c.l; if(true) __ss << " "; __ss << c.b; auto __line = __ss.str(); if(!__line.empty() && __line.back() == ' ') __line.pop_back(); std::cout << __line << std::endl; }
    }
    return 0;
}
