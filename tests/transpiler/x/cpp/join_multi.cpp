// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:20:01 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <iomanip>


struct CustomersItem {
    int id;
    std::string name;
};

struct OrdersItem {
    int id;
    int customerId;
};

struct ItemsItem {
    int orderId;
    std::string sku;
};

struct ResultItem {
    std::string name;
    std::string sku;
};

std::vector<CustomersItem> customers = std::vector{CustomersItem{.id = 1, .name = std::string("Alice")}, CustomersItem{.id = 2, .name = std::string("Bob")}};
std::vector<OrdersItem> orders = std::vector{OrdersItem{.id = 100, .customerId = 1}, OrdersItem{.id = 101, .customerId = 2}};
std::vector<ItemsItem> items = std::vector{ItemsItem{.orderId = 100, .sku = std::string("a")}, ItemsItem{.orderId = 101, .sku = std::string("b")}};
std::vector<ResultItem> result = ([]{ std::vector<ResultItem> __items;
for (auto o : orders) {
for (auto c : customers) {
for (auto i : items) {
    if(((o.customerId == c.id) && (o.id == i.orderId))) {
        __items.push_back(ResultItem{.name = c.name, .sku = i.sku});
    }
}
}
}
return __items; }());

int main() {
    std::cout << std::boolalpha << std::string("--- Multi Join ---") << std::endl;
    for (auto r : result) {
        std::cout << std::boolalpha << r.name << ' ' << std::string("bought item") << ' ' << r.sku << std::endl;
    }
    return 0;
}
