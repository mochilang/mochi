// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:19:54 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <numeric>
#include <sstream>
#include <iomanip>
#include <unordered_map>


struct PeopleItem {
    std::string name;
    int age;
    std::string city;
};

struct GGroup {
    std::string key;
    std::vector<PeopleItem> items;
    auto begin() { return items.begin(); }
    auto end() { return items.end(); }
    size_t size() const { return items.size(); }
};

struct StatsItem {
    std::string city;
    int count;
    double avg_age;
};

std::vector<PeopleItem> people = std::vector{PeopleItem{.name = std::string("Alice"), .age = 30, .city = std::string("Paris")}, PeopleItem{.name = std::string("Bob"), .age = 15, .city = std::string("Hanoi")}, PeopleItem{.name = std::string("Charlie"), .age = 65, .city = std::string("Paris")}, PeopleItem{.name = std::string("Diana"), .age = 45, .city = std::string("Hanoi")}, PeopleItem{.name = std::string("Eve"), .age = 70, .city = std::string("Paris")}, PeopleItem{.name = std::string("Frank"), .age = 22, .city = std::string("Hanoi")}};
std::vector<StatsItem> stats = ([]{ std::vector<StatsItem> __items;
std::vector<GGroup> __groups;
std::unordered_map<std::string, size_t> __idx;
for (auto person : people) {
        auto __key = person.city;
        auto it = __idx.find(__key);
        if(it == __idx.end()) {
            GGroup __g{__key, {}};
            __g.items.push_back(person);
            __idx[__key] = __groups.size();
            __groups.push_back(__g);
        } else {
            __groups[it->second].items.push_back(person);
        }
}
for(auto &__g : __groups) {
    GGroup g = __g;
    __items.push_back(StatsItem{.city = g.key, .count = g.size(), .avg_age = ([&]{ auto tmp = ([]{ std::vector<int> __items;
for (auto p : g) {
        __items.push_back(p.age);
}
return __items; }()); return tmp.empty() ? 0.0 : std::accumulate(tmp.begin(), tmp.end(), 0.0) / tmp.size(); }())});
}
return __items; }());

int main() {
    std::cout << std::boolalpha << std::string("--- People grouped by city ---") << std::endl;
    for (auto s : stats) {
        std::cout << std::boolalpha << s.city << ' ' << std::string(": count =") << ' ' << s.count << ' ' << std::string(", avg_age =") << ' ' << s.avg_age << std::endl;
    }
    return 0;
}
