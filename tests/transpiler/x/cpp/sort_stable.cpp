// Generated by Mochi transpiler v0.10.32 on 2025-07-20 23:06:04 GMT+7
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <algorithm>

struct ItemsItem {
    int n;
    std::string v;
};

std::vector<ItemsItem> items = std::vector{ItemsItem{.n = 1, .v = std::string("a")}, ItemsItem{.n = 1, .v = std::string("b")}, ItemsItem{.n = 2, .v = std::string("c")}};
std::vector<auto> result = ([]{ std::vector<std::pair<int, auto>> __tmp;
for (auto i : items) {
        __tmp.emplace_back(i.n, i.v);
}
std::sort(__tmp.begin(), __tmp.end(), [](const auto& a,const auto& b){ return a.first < b.first; });
std::vector<auto> __items;
for(size_t __i=0; __i<__tmp.size(); ++__i){
    __items.push_back(__tmp[__i].second);
}
return __items; }());

int main() {
    std::cout << std::boolalpha << result << std::endl;
    return 0;
}
