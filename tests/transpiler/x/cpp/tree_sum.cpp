// Generated by Mochi transpiler v0.10.36 on 2025-07-22 17:44:54 GMT+7
#include <iostream>
#include <string>
#include <memory>
#include <sstream>
#include <iomanip>
#include <optional>
#include <vector>


struct Tree;


struct Tree {
    virtual ~Tree() = default;
};

struct Leaf : Tree {
    auto operator<=>(const Leaf&) const = default;
};

struct Node : Tree {
    std::unique_ptr<Tree> left;
    int value;
    std::unique_ptr<Tree> right;
    auto operator<=>(const Node&) const = default;
};

std::ostream& operator<<(std::ostream& os, const Leaf& v) {
    os << '{' << '}';
    return os;
}

std::ostream& operator<<(std::ostream& os, const Node& v) {
    os << '{' << "'left': "<< v.left
 << ", " << "'value': "<< v.value
 << ", " << "'right': "<< v.right
 << '}';
    return os;
}

int sum_tree(const Tree* t) {
    return ([&]{
    const Leaf* __leaf = dynamic_cast<const Leaf*>(t);
    if (__leaf) {
        return 0;
    }
    const Node* __node = dynamic_cast<const Node*>(t);
    if (__node) {
        Tree* left = __node->left.get();
        int value = __node->value;
        Tree* right = __node->right.get();
        return ((sum_tree(left) + value) + sum_tree(right));
    }
    return 0;
}());
}

Node t = Node{.left = Leaf, .value = 1, .right = Node{.left = Leaf, .value = 2, .right = Leaf}};

int main() {
    std::cout << sum_tree(t);
    std::cout << std::endl;
    return 0;
}
