// Generated by Mochi 0.10.34 on 2025-07-21 21:13 +0700
using System;
using System.Collections.Generic;
using System.Linq;

struct Nation {
    public int n_nationkey;
    public string n_name;
    public override string ToString() => $"{{'n_nationkey': {n_nationkey}, 'n_name': '{n_name}'}}";
}
struct Customer {
    public int c_custkey;
    public string c_name;
    public double c_acctbal;
    public int c_nationkey;
    public string c_address;
    public string c_phone;
    public string c_comment;
    public override string ToString() => $"{{'c_custkey': {c_custkey}, 'c_name': '{c_name}', 'c_acctbal': {c_acctbal.ToString("0.0")}, 'c_nationkey': {c_nationkey}, 'c_address': '{c_address}', 'c_phone': '{c_phone}', 'c_comment': '{c_comment}'}}";
}
struct Order {
    public int o_orderkey;
    public int o_custkey;
    public string o_orderdate;
    public override string ToString() => $"{{'o_orderkey': {o_orderkey}, 'o_custkey': {o_custkey}, 'o_orderdate': '{o_orderdate}'}}";
}
struct Lineitem {
    public int l_orderkey;
    public string l_returnflag;
    public double l_extendedprice;
    public double l_discount;
    public override string ToString() => $"{{'l_orderkey': {l_orderkey}, 'l_returnflag': '{l_returnflag}', 'l_extendedprice': {l_extendedprice.ToString("0.0")}, 'l_discount': {l_discount.ToString("0.0")}}}";
}
struct GKey {
    public int c_custkey;
    public string c_name;
    public double c_acctbal;
    public string c_address;
    public string c_phone;
    public string c_comment;
    public string n_name;
    public override string ToString() => $"{{'c_custkey': {c_custkey}, 'c_name': '{c_name}', 'c_acctbal': {c_acctbal.ToString("0.0")}, 'c_address': '{c_address}', 'c_phone': '{c_phone}', 'c_comment': '{c_comment}', 'n_name': '{n_name}'}}";
}
struct GRow {
    public Customer c;
    public Order o;
    public Lineitem l;
    public Nation n;
    public override string ToString() => $"{{'c': {c}, 'o': {o}, 'l': {l}, 'n': {n}}}";
}
struct GGroup {
    public GKey key;
    public GRow[] items;
    public override string ToString() => $"{{'key': {key}, 'items': {items}}}";
}
struct GResult {
    public int c_custkey;
    public string c_name;
    public double revenue;
    public double c_acctbal;
    public string n_name;
    public string c_address;
    public string c_phone;
    public string c_comment;
    public override string ToString() => $"{{'c_custkey': {c_custkey}, 'c_name': '{c_name}', 'revenue': {revenue.ToString("0.0")}, 'c_acctbal': {c_acctbal.ToString("0.0")}, 'n_name': '{n_name}', 'c_address': '{c_address}', 'c_phone': '{c_phone}', 'c_comment': '{c_comment}'}}";
}
class Program {
    static Nation[] nation = new Nation[]{new Nation{n_nationkey = 1, n_name = "BRAZIL"}};
    static Customer[] customer = new Customer[]{new Customer{c_custkey = 1, c_name = "Alice", c_acctbal = 100, c_nationkey = 1, c_address = "123 St", c_phone = "123-456", c_comment = "Loyal"}};
    static Order[] orders = new Order[]{new Order{o_orderkey = 1000, o_custkey = 1, o_orderdate = "1993-10-15"}, new Order{o_orderkey = 2000, o_custkey = 1, o_orderdate = "1994-01-02"}};
    static Lineitem[] lineitem = new Lineitem[]{new Lineitem{l_orderkey = 1000, l_returnflag = "R", l_extendedprice = 1000, l_discount = 0.1}, new Lineitem{l_orderkey = 2000, l_returnflag = "N", l_extendedprice = 500, l_discount = 0}};
    static string start_date = "1993-10-01";
    static string end_date = "1994-01-01";
    static GResult[] result = (from c in customer join o in orders on c.c_custkey equals o.o_custkey join l in lineitem on o.o_orderkey equals l.l_orderkey join n in nation on c.c_nationkey equals n.n_nationkey where (((string.Compare(o.o_orderdate, start_date) >= 0) && (string.Compare(o.o_orderdate, end_date) < 0)) && (l.l_returnflag == "R")) group new GRow{c = c, o = o, l = l, n = n} by new GKey{c_custkey = c.c_custkey, c_name = c.c_name, c_acctbal = c.c_acctbal, c_address = c.c_address, c_phone = c.c_phone, c_comment = c.c_comment, n_name = n.n_name} into gTmp let g = new GGroup{ key = gTmp.Key, items = gTmp.ToArray() } orderby ((from x in g.items select (x.l.l_extendedprice * (1 - x.l.l_discount))).ToArray().Sum()) descending select new GResult{c_custkey = g.key.c_custkey, c_name = g.key.c_name, revenue = ((from x in g.items select (x.l.l_extendedprice * (1 - x.l.l_discount))).ToArray().Sum()), c_acctbal = g.key.c_acctbal, n_name = g.key.n_name, c_address = g.key.c_address, c_phone = g.key.c_phone, c_comment = g.key.c_comment}).ToArray();
    static void Main() {
        Console.WriteLine(("[" + (string.Join(",", result) + "]")));
    }
}
