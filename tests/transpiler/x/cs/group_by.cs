// Generated by Mochi
using System;
using System.Collections.Generic;
using System.Linq;

class Group<K,T> : IEnumerable<T> {
    public K key;
    List<T> items;
    public Group(K k, IEnumerable<T> it) { key = k; items = new List<T>(it); }
    public IEnumerator<T> GetEnumerator() => items.GetEnumerator();
    System.Collections.IEnumerator IEnumerable.GetEnumerator() => items.GetEnumerator();
}

class Program {
    static Dictionary<string, object>[] people = new[]{new Dictionary<string, object>{{"name", "Alice"}, {"age", 30}, {"city", "Paris"}}, new Dictionary<string, object>{{"name", "Bob"}, {"age", 15}, {"city", "Hanoi"}}, new Dictionary<string, object>{{"name", "Charlie"}, {"age", 65}, {"city", "Paris"}}, new Dictionary<string, object>{{"name", "Diana"}, {"age", 45}, {"city", "Hanoi"}}, new Dictionary<string, object>{{"name", "Eve"}, {"age", 70}, {"city", "Paris"}}, new Dictionary<string, object>{{"name", "Frank"}, {"age", 22}, {"city", "Hanoi"}}};
    static Dictionary<string, object>[] stats = (from person in people group person by ((dynamic)(person["city"])) into gTmp let g = new Group<object, Dictionary<string, object>>(gTmp.Key, gTmp) select new Dictionary<string, object>{{"city", g.key}, {"count", g.Length}, {"avg_age", ((from p in g select ((dynamic)(p["age"]))).ToArray().Average()).ToString("0.0")}}).ToArray();
    static void Main() {
        Console.WriteLine("--- People grouped by city ---");
        foreach (var s in stats) {
    Console.WriteLine(string.Join(" ", new[]{s.city, ": count =", s.count, ", avg_age =", s.avg_age}).TrimEnd());
}
    }
}
