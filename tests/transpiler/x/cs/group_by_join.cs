// Generated by Mochi
using System;
using System.Collections.Generic;
using System.Linq;

class Group<K,T> : IEnumerable<T> {
    public K key;
    List<T> items;
    public Group(K k, IEnumerable<T> it) { key = k; items = new List<T>(it); }
    public IEnumerator<T> GetEnumerator() => items.GetEnumerator();
    System.Collections.IEnumerator IEnumerable.GetEnumerator() => items.GetEnumerator();
}

class Program {
    static Dictionary<string, object>[] customers = new[]{new Dictionary<string, object>{{"id", 1}, {"name", "Alice"}}, new Dictionary<string, object>{{"id", 2}, {"name", "Bob"}}};
    static Dictionary<string, int>[] orders = new[]{new Dictionary<string, int>{{"id", 100}, {"customerId", 1}}, new Dictionary<string, int>{{"id", 101}, {"customerId", 1}}, new Dictionary<string, int>{{"id", 102}, {"customerId", 2}}};
    static Dictionary<string, object>[] stats = (from o in orders join c in customers on ((dynamic)(o["customerId"])) equals c.id group o by ((dynamic)(c["name"])) into gTmp let g = new Group<object, Dictionary<string, int>>(gTmp.Key, gTmp) select new Dictionary<string, object>{{"name", g.key}, {"count", g.Length}}).ToArray();
    static void Main() {
        Console.WriteLine("--- Orders per customer ---");
        foreach (var s in stats) {
    Console.WriteLine(string.Join(" ", new[]{s.name, "orders:", s.count}).TrimEnd());
}
    }
}
