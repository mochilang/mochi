// Generated by Mochi
using System;
using System.Collections.Generic;
using System.Linq;

class Group<K,T> : IEnumerable<T> {
    public K key;
    List<T> items;
    public Group(K k, IEnumerable<T> it) { key = k; items = new List<T>(it); }
    public IEnumerator<T> GetEnumerator() => items.GetEnumerator();
    System.Collections.IEnumerator IEnumerable.GetEnumerator() => items.GetEnumerator();
}

class Program {
    static Dictionary<string, object>[] items = new[]{new Dictionary<string, object>{{"cat", "a"}, {"val", 10}, {"flag", true}}, new Dictionary<string, object>{{"cat", "a"}, {"val", 5}, {"flag", false}}, new Dictionary<string, object>{{"cat", "b"}, {"val", 20}, {"flag", true}}};
    static Dictionary<string, object>[] result = (from i in items group i by ((dynamic)(i["cat"])) into gTmp let g = new Group<object, Dictionary<string, object>>(gTmp.Key, gTmp) orderby g.key select new Dictionary<string, object>{{"cat", g.key}, {"share", (((from x in g select (((dynamic)(x["flag"])) ? ((dynamic)(x["val"])) : 0)).ToArray().Sum()) / ((from x in g select ((dynamic)(x["val"]))).ToArray().Sum()))}}).ToArray();
    static void Main() {
        Console.WriteLine(result);
    }
}
