// Generated by Mochi transpiler
class S1 {
  final dynamic a;
  final dynamic b;
  final num total;
  const S1({required this.a, required this.b, required this.total});
}

class Item {
  final String a;
  final int b;
  final int val;
  const Item({required this.a, required this.b, required this.val});
}

void main() {
  final List<Item> items = [Item(a: "x", b: 1, val: 2), Item(a: "x", b: 2, val: 3), Item(a: "y", b: 1, val: 4), Item(a: "y", b: 2, val: 1)];
  final List<S1> grouped = (() {
  final groups = <String, Map<String, dynamic>>{};
  for (var i in items) {
    var key = {"a": i.a, "b": i.b};
    var ks = key.toString();
    var g = groups[ks];
    if (g == null) {
      g = {'key': key, 'items': []};
      groups[ks] = g;
    }
    (g['items'] as List).add(i);
  }
  final _list = groups.values.toList();
  _list.sort(((a, b) => [for (var x in b.items) x.val].isEmpty ? 0 : ([for (var x in b.items) x.val].reduce((a, b) => a + b)).compareTo([for (var x in a.items) x.val].isEmpty ? 0 : ([for (var x in a.items) x.val].reduce((a, b) => a + b)))));
  final res = <S1>[];
  for (var g in _list) {
    res.add(S1(a: g["key"].a, b: g["key"].b, total: [for (var x in g["items"]) x.val].isEmpty ? 0 : ([for (var x in g["items"]) x.val].reduce((a, b) => a + b))));
  }
  return res;
})();;
  print("[" + grouped.join(', ') + "]");
}
