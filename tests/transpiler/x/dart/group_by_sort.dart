// Generated by Mochi transpiler
class Item {
  final String cat;
  final int val;
  const Item({required this.cat, required this.val});
}

class Grouped {
  final dynamic cat;
  final num total;
  const Grouped({required this.cat, required this.total});
}

void main() {
  final List<Item> items = [Item(cat: "a", val: 3), Item(cat: "a", val: 1), Item(cat: "b", val: 5), Item(cat: "b", val: 2)];
  final List<Grouped> grouped = (() {
  var groups = <String, Map<String, dynamic>>{};
  for (var i in items) {
    var key = i.cat;
    var ks = key.toString();
    var g = groups[ks];
    if (g == null) {
      g = {'key': key, 'items': []};
      groups[ks] = g;
    }
    (g['items'] as List).add(i);
  }
  var _list = groups.values.toList();
  _list.sort(((a, b) => [for (var x in b) x.val].isEmpty ? 0 : ([for (var x in b) x.val].reduce((a, b) => a + b)).compareTo([for (var x in a) x.val].isEmpty ? 0 : ([for (var x in a) x.val].reduce((a, b) => a + b)))));
  var res = <dynamic>[];
  for (var g in _list) {
    res.add(Grouped(cat: g.key, total: [for (var x in g) x.val].isEmpty ? 0 : ([for (var x in g) x.val].reduce((a, b) => a + b))));
  }
  return res;
})();;
  print("[" + grouped.join(', ') + "]");
}
