// Generated by Mochi transpiler
class People {
  final String name;
  final int age;
  final String city;
  const People({required this.name, required this.age, required this.city});
}

class Stat {
  final dynamic city;
  final int count;
  final num avg_age;
  const Stat({required this.city, required this.count, required this.avg_age});
}

void main() {
  final List<People> people = [People(name: "Alice", age: 30, city: "Paris"), People(name: "Bob", age: 15, city: "Hanoi"), People(name: "Charlie", age: 65, city: "Paris"), People(name: "Diana", age: 45, city: "Hanoi"), People(name: "Eve", age: 70, city: "Paris"), People(name: "Frank", age: 22, city: "Hanoi")];
  final List<Stat> stats = (() {
  var _groups = <String, Map<String, dynamic>>{};
  var _order = <String>[];
  for (var person in people) {
    var _key = person.city;
    var _ks = _key.toString();
    var _g = _groups[_ks];
    if (_g == null) {
      _g = {'key': _key, 'items': []};
      _groups[_ks] = _g;
      _order.add(_ks);
    }
    (_g['items'] as List).add(person);
  }
  var _res = [];
  for (var ks in _order) {
    var g = _groups[ks]!;
    _res.add(Stat(city: g.key, count: g.items.length, avg_age: [for (var p in g) p.age].isEmpty ? 0 : ([for (var p in g) p.age].reduce((a, b) => a + b) / [for (var p in g) p.age].length)));
  }
  return _res;
})();;
  print("--- People grouped by city ---");
  for (var s in stats) {
    print([s.city, ": count =", s.count, ", avg_age =", s.avg_age].join(" "));
  }
}
