// Generated by Mochi transpiler
class S1 {
  final dynamic c_custkey;
  final dynamic c_name;
  final num revenue;
  final dynamic c_acctbal;
  final dynamic n_name;
  final dynamic c_address;
  final dynamic c_phone;
  final dynamic c_comment;
  const S1({required this.c_custkey, required this.c_name, required this.revenue, required this.c_acctbal, required this.n_name, required this.c_address, required this.c_phone, required this.c_comment});
}

class Nation {
  final int n_nationkey;
  final String n_name;
  const Nation({required this.n_nationkey, required this.n_name});
}

class Customer {
  final int c_custkey;
  final String c_name;
  final num c_acctbal;
  final int c_nationkey;
  final String c_address;
  final String c_phone;
  final String c_comment;
  const Customer({required this.c_custkey, required this.c_name, required this.c_acctbal, required this.c_nationkey, required this.c_address, required this.c_phone, required this.c_comment});
}

class Order {
  final int o_orderkey;
  final int o_custkey;
  final String o_orderdate;
  const Order({required this.o_orderkey, required this.o_custkey, required this.o_orderdate});
}

class Lineitem {
  final int l_orderkey;
  final String l_returnflag;
  final num l_extendedprice;
  final num l_discount;
  const Lineitem({required this.l_orderkey, required this.l_returnflag, required this.l_extendedprice, required this.l_discount});
}

void main() {
  final List<Nation> nation = [Nation(n_nationkey: 1, n_name: "BRAZIL")];
  final List<Customer> customer = [Customer(c_custkey: 1, c_name: "Alice", c_acctbal: 100.0, c_nationkey: 1, c_address: "123 St", c_phone: "123-456", c_comment: "Loyal")];
  final List<Order> orders = [Order(o_orderkey: 1000, o_custkey: 1, o_orderdate: "1993-10-15"), Order(o_orderkey: 2000, o_custkey: 1, o_orderdate: "1994-01-02")];
  final List<Lineitem> lineitem = [Lineitem(l_orderkey: 1000, l_returnflag: "R", l_extendedprice: 1000.0, l_discount: 0.1), Lineitem(l_orderkey: 2000, l_returnflag: "N", l_extendedprice: 500.0, l_discount: 0.0)];
  final String start_date = "1993-10-01";
  final String end_date = "1994-01-01";
  final List<S1> result = (() {
  var groups = <String, Map<String, dynamic>>{};
  for (var c in customer) {
  for (var o in orders) {
  for (var l in lineitem) {
  for (var n in nation) {
          if (!(o.o_custkey == c.c_custkey && l.l_orderkey == o.o_orderkey && n.n_nationkey == c.c_nationkey && o.o_orderdate >= start_date && o.o_orderdate < end_date && l.l_returnflag == "R")) continue;
          var key = {"c_custkey": c.c_custkey, "c_name": c.c_name, "c_acctbal": c.c_acctbal, "c_address": c.c_address, "c_phone": c.c_phone, "c_comment": c.c_comment, "n_name": n.n_name};
          var ks = key.toString();
          var g = groups[ks];
          if (g == null) {
            g = {'key': key, 'items': []};
            groups[ks] = g;
          }
          (g['items'] as List).add({"c": c, "o": o, "l": l, "n": n});
        }
      }
    }
  }
  var _list = groups.values.toList();
  _list.sort(((a, b) => [for (var x in b.items) x.l.l_extendedprice * (1 - x.l.l_discount)].isEmpty ? 0 : ([for (var x in b.items) x.l.l_extendedprice * (1 - x.l.l_discount)].reduce((a, b) => a + b)).compareTo([for (var x in a.items) x.l.l_extendedprice * (1 - x.l.l_discount)].isEmpty ? 0 : ([for (var x in a.items) x.l.l_extendedprice * (1 - x.l.l_discount)].reduce((a, b) => a + b)))));
  var res = <S1>[];
  for (var g in _list) {
    res.add(S1(c_custkey: g["key"].c_custkey, c_name: g["key"].c_name, revenue: [for (var x in g["items"]) x.l.l_extendedprice * (1 - x.l.l_discount)].isEmpty ? 0 : ([for (var x in g["items"]) x.l.l_extendedprice * (1 - x.l.l_discount)].reduce((a, b) => a + b)), c_acctbal: g["key"].c_acctbal, n_name: g["key"].n_name, c_address: g["key"].c_address, c_phone: g["key"].c_phone, c_comment: g["key"].c_comment));
  }
  return res;
})();;
  print("[" + result.join(', ') + "]");
}
