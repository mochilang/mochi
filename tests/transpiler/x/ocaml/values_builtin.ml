(* Generated by Mochi transpiler v0.10.35 on 2025-07-22 14:18 +0700 *)

let rec __to_json v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
     let hd = field o 0 in
     let tl = field o 1 in
     let rest = list_aux tl in
     let cur = __to_json (obj hd) in
     if rest = "" then cur else cur ^ "," ^ rest
  and map_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
     let hd = field o 0 in
     let tl = field o 1 in
     let k = (magic (field hd 0) : string) in
     let v = __to_json (obj (field hd 1)) in
     let rest = map_aux tl in
     let cur = Printf.sprintf "\"%s\": %s" k v in
     if rest = "" then cur else cur ^ "," ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
    | 0 -> if size r = 0 then "[]" else (
        let hd = field r 0 in
        if tag hd = 0 && size hd = 2 && tag (field hd 0) = 252 then
          "{" ^ map_aux r ^ "}"
        else
          "[" ^ list_aux r ^ "]")
    | 252 -> Printf.sprintf "%S" (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "null"

let () =
  let m = [("a", 1); ("b", 2); ("c", 3)] in
  print_endline (String.concat " " [String.concat " " (List.map string_of_int ((List.map snd m)))]);
