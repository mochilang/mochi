(* Generated by Mochi transpiler v0.10.35 on 2025-07-22 13:20 +0700 *)

let rec __to_json v =
  let open Obj in
  let rec list_aux o =
    if is_int o && (magic (obj o) : int) = 0 then "" else
     let hd = field o 0 in
     let tl = field o 1 in
     let rest = list_aux tl in
     let cur = __to_json (obj hd) in
     if rest = "" then cur else cur ^ "," ^ rest
  in
  let r = repr v in
  if is_int r then string_of_int (magic v) else
  match tag r with
    | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
    | 252 -> Printf.sprintf "%S" (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "null"

let () =
  let people = [[("name", "Alice"); ("city", "Paris")]; [("name", "Bob"); ("city", "Hanoi")]; [("name", "Charlie"); ("city", "Paris")]; [("name", "Diana"); ("city", "Hanoi")]; [("name", "Eve"); ("city", "Paris")]; [("name", "Frank"); ("city", "Hanoi")]; [("name", "George"); ("city", "Paris")]] in
  let big = (let __groups0 = ref [] in
  List.iter (fun p ->
    let key = (List.assoc "city" p) in
    let cur = try List.assoc key !__groups0 with Not_found -> [] in
    __groups0 := (key, p :: cur) :: List.remove_assoc key !__groups0;
  ) people;
  let __res0 = ref [] in
  List.iter (fun (g_key, g_items) ->
    let g = List.rev g_items in
    if (List.length g >= 4) then (
      __res0 := (0, [("city", g_key); ("num", List.length g)]) :: !__res0)
    else ()
  ) !__groups0;
  List.rev (List.map snd !__res0)) in
  print_endline (__to_json big);

