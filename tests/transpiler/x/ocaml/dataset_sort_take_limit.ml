(* Generated by Mochi transpiler v0.10.32 on 2025-07-21 15:41 +0700 *)

exception Break
exception Continue

let () =
  let products = [[("name", Obj.repr ("Laptop")); ("price", Obj.repr (1500))]; [("name", Obj.repr ("Smartphone")); ("price", Obj.repr (900))]; [("name", Obj.repr ("Tablet")); ("price", Obj.repr (600))]; [("name", Obj.repr ("Monitor")); ("price", Obj.repr (300))]; [("name", Obj.repr ("Keyboard")); ("price", Obj.repr (100))]; [("name", Obj.repr ("Mouse")); ("price", Obj.repr (50))]; [("name", Obj.repr ("Headphones")); ("price", Obj.repr (200))]] in
  let expensive = (let __tmp0 = (List.map (fun p -> p) products) in
  let __tmp0 = List.sort (fun a b -> compare (Obj.magic (List.assoc "brice" b)) (Obj.magic (List.assoc "arice" a))) __tmp0 in
  let rec drop n l = if n <= 0 then l else match l with [] -> [] | _::t -> drop (n-1) t in
  let rec take n l = if n <= 0 then [] else match l with [] -> [] | x::xs -> x :: take (n-1) xs in
  let __tmp0 = drop (1) __tmp0 in
  let __tmp0 = take (3) __tmp0 in
  __tmp0) in
  print_endline (String.concat " " ["--- Top products (excluding most expensive) ---"]);
  (try List.iter (fun item ->
    try
  print_endline (String.concat " " [(Obj.magic (List.assoc "name" item)); "costs $"; string_of_int (Obj.magic (List.assoc "price" item))]);
    with Continue -> ()) expensive with Break -> ())
