(* Generated by Mochi transpiler v0.10.32 on 2025-07-21 13:50 +0700 *)

let () =
  let people = [[("name", Obj.repr ("Alice")); ("age", Obj.repr (30)); ("city", Obj.repr ("Paris"))]; [("name", Obj.repr ("Bob")); ("age", Obj.repr (15)); ("city", Obj.repr ("Hanoi"))]; [("name", Obj.repr ("Charlie")); ("age", Obj.repr (65)); ("city", Obj.repr ("Paris"))]; [("name", Obj.repr ("Diana")); ("age", Obj.repr (45)); ("city", Obj.repr ("Hanoi"))]; [("name", Obj.repr ("Eve")); ("age", Obj.repr (70)); ("city", Obj.repr ("Paris"))]; [("name", Obj.repr ("Frank")); ("age", Obj.repr (22)); ("city", Obj.repr ("Hanoi"))]] in
  let stats = (let __groups0 = ref [] in
  List.iter (fun person ->
    let key = (Obj.magic (List.assoc "city" person)) in
    let cur = try List.assoc key !__groups0 with Not_found -> [] in
    __groups0 := (key, person :: cur) :: List.remove_assoc key !__groups0;
  ) people;
  let __res0 = ref [] in
  List.iter (fun (g_key, g_items) ->
    let g = List.rev g_items in
    __res0 := [("city", Obj.repr (g_key)); ("count", Obj.repr (List.length g)); ("avg_age", Obj.repr (((List.fold_left (fun acc x -> acc + x) 0 (List.map (fun p -> (Obj.magic (List.assoc "age" p))) g)) / List.length (List.map (fun p -> (Obj.magic (List.assoc "age" p))) g))))] :: !__res0
  ) !__groups0;
  List.rev !__res0) in
  print_endline (String.concat " " ["--- People grouped by city ---"]);
  List.iter (fun s ->
  print_endline (String.concat " " [(Obj.magic (List.assoc "city" s)); ": count ="; string_of_int (Obj.magic (List.assoc "count" s)); ", avg_age ="; string_of_int (Obj.magic (List.assoc "avg_age" s))]);
  ) stats;
