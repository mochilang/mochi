(* Generated by Mochi transpiler v0.10.32 on 2025-07-21 12:53 +0700 *)

let () =
  let people = [[("name", "Alice"); ("age", 30); ("city", "Paris")]; [("name", "Bob"); ("age", 15); ("city", "Hanoi")]; [("name", "Charlie"); ("age", 65); ("city", "Paris")]; [("name", "Diana"); ("age", 45); ("city", "Hanoi")]; [("name", "Eve"); ("age", 70); ("city", "Paris")]; [("name", "Frank"); ("age", 22); ("city", "Hanoi")]] in
  let stats = (let __groups0 = ref [] in
  List.iter (fun person ->
    let key = (List.assoc "city" person) in
    let cur = try List.assoc key !__groups0 with Not_found -> [] in
    __groups0 := (key, person :: cur) :: List.remove_assoc key !__groups0;
  ) people;
  let __res0 = ref [] in
  List.iter (fun (g_key, g_items) ->
    let g = List.rev g_items in
    __res0 := [("city", g_key); ("count", List.length g); ("avg_age", ((List.fold_left (fun acc x -> acc + x) 0 (List.map (fun p -> (List.assoc "age" p)) g)) / List.length (List.map (fun p -> (List.assoc "age" p)) g)))] :: !__res0
  ) !__groups0;
  List.rev !__res0) in
  print_endline (String.concat " " ["--- People grouped by city ---"]);
  List.iter (fun s ->
  print_endline (String.concat " " [string_of_int (List.assoc "city" s); ": count ="; string_of_int (List.assoc "count" s); ", avg_age ="; string_of_int (List.assoc "avg_age" s)]);
  ) stats;
