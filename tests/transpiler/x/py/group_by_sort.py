# Code generated by Mochi transpiler.
# Version 0.10.36, generated on 2025-07-22 17:46 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

@dataclass
class Item:
    cat: str
    val: int

items = [Item("a", 3), Item("a", 1), Item("b", 5), Item("b", 2)]
@dataclass
class GroupedGroup:
    key: str
    items: list

_grouped_groups = {}
for i in items:
    _g = _grouped_groups.setdefault(i.cat, GroupedGroup(i.cat, []))
    _g.items.append(i)
@dataclass
class Grouped:
    cat: str
    total: any

grouped = [Grouped(g.key, sum([x.val for x in g.items])) for g in sorted(_grouped_groups.values(), key=lambda g: sum([x.val for x in g.items]), reverse=True)]
print([dataclasses.asdict(_x) for _x in grouped])
