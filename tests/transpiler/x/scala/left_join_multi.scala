// Generated by Mochi v0.10.35 on 2025-07-22 13:39:07 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  case class Item(id: Int, name: String)
  
  case class Item1(id: Int, customerId: Int)
  
  case class Item2(orderId: Int, sku: String)
  
  case class QueryItem(orderId: Any, name: Any, item: Any)
  
  def main(args: Array[String]): Unit = {
    val customers: ArrayBuffer[Item] = ArrayBuffer(Item(1, "Alice"), Item(2, "Bob"))
    val orders: ArrayBuffer[Item1] = ArrayBuffer(Item1(100, 1), Item1(101, 2))
    val items: ArrayBuffer[Item2] = ArrayBuffer(Item2(100, "a"))
    val result = ({ val _res = ArrayBuffer[QueryItem]() ; for (o <- orders) { for (c <- customers) { if (o.customerId == c.id) { val _opt = items.find(i => o.id == i.orderId) ; val i = _opt.getOrElse(null) ; _res.append(QueryItem(o.id, c.name, i)) } } } ; _res })
    println("--- Left Join Multi ---")
    for (r <- result) {
      println(List(r.orderId, r.name, r.item).mkString(" "))
    }
  }
}
