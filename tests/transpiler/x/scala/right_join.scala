// Generated by Mochi v0.10.33 on 2025-07-21 16:43:03 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def main(args: Array[String]): Unit = {
    case class Item(id: Int, name: String)
    case class Item1(id: Int, customerId: Int, total: Int)
    val customers: ArrayBuffer[Item] = ArrayBuffer(Item(1, "Alice"), Item(2, "Bob"), Item(3, "Charlie"), Item(4, "Diana"))
    val orders: ArrayBuffer[Item1] = ArrayBuffer(Item1(100, 1, 250), Item1(101, 2, 125), Item1(102, 1, 300))
    val result: ArrayBuffer[Map[String,Any]] = ({ var _res = ArrayBuffer[Map[String,Any]]() ; for (o <- orders) { var matched = false ; for (c <- customers) { if (o.customerId == c.id) { matched = true ; _res.append(Map("customerName" -> c.name, "order" -> o)) } } if (!matched) { var c = null ; _res.append(Map("customerName" -> c.name, "order" -> o)) } } _res })
    println("--- Right Join using syntax ---")
    for (entry <- result) {
    if (entry.order) {
    println(List("Customer", entry.customerName, "has order", entry.order.id, "- $", entry.order.total).mkString(" "))
  } else {
    println(List("Customer", entry.customerName, "has no orders").mkString(" "))
  }
  }
  }
}
