// Generated by Mochi v0.10.33 on 2025-07-21 16:41:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def main(args: Array[String]): Unit = {
    case class Item(id: Int, name: String)
    case class Item1(id: Int, customerId: Int)
    val customers: ArrayBuffer[Item] = ArrayBuffer(Item(1, "Alice"), Item(2, "Bob"))
    val orders: ArrayBuffer[Item1] = ArrayBuffer(Item1(100, 1), Item1(101, 1), Item1(102, 2))
    val stats: ArrayBuffer[Map[String,Any]] = ({ var _groups = Map[Any, Map[String, Any]]() ; var _res = ArrayBuffer[Map[String,Any]]() ; for (o <- orders) { for (c <- customers) { if (o.customerId == c.id) { val _key = c.name ; val _g = _groups.getOrElseUpdate(_key, Map("key" -> _key, "items" -> ArrayBuffer[Any]())) ; _g("items").asInstanceOf[ArrayBuffer[Any]].append(o) } } for (g <- _groups.values) { _res.append(Map("name" -> g("key"), "count" -> g("items").size)) } ; _res })
    println("--- Orders per customer ---")
    for (s <- stats) {
    println(List(s.name, "orders:", s.count).mkString(" "))
  }
  }
}
