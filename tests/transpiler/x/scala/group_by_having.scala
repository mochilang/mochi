// Generated by Mochi v0.10.33 on 2025-07-21 16:41:13 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def main(args: Array[String]): Unit = {
    case class Item(name: String, city: String)
    val people: ArrayBuffer[Item] = ArrayBuffer(Item("Alice", "Paris"), Item("Bob", "Hanoi"), Item("Charlie", "Paris"), Item("Diana", "Hanoi"), Item("Eve", "Paris"), Item("Frank", "Hanoi"), Item("George", "Paris"))
    val big: ArrayBuffer[Map[String,Any]] = ({ var _groups = Map[Any, Map[String, Any]]() ; var _res = ArrayBuffer[Map[String,Any]]() ; for (p <- people) { val _key = p.city ; val _g = _groups.getOrElseUpdate(_key, Map("key" -> _key, "items" -> ArrayBuffer[Any]())) ; _g("items").asInstanceOf[ArrayBuffer[Any]].append(p) for (g <- _groups.values) { if (g("items").size >= 4) { _res.append(Map("city" -> g("key"), "num" -> g("items").size)) } } ; _res })
    json(big)
  }
}
