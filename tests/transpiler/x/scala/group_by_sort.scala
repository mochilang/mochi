// Generated by Mochi v0.10.33 on 2025-07-21 16:41:17 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def main(args: Array[String]): Unit = {
    case class Item(cat: String, val: Int)
    val items: ArrayBuffer[Item] = ArrayBuffer(Item("a", 3), Item("a", 1), Item("b", 5), Item("b", 2))
    val grouped: ArrayBuffer[Map[String,Any]] = ({ var _groups = Map[Any, Map[String, Any]]() ; var _tmp = ArrayBuffer[(Int,Map[String,Any])]() ; var _res = ArrayBuffer[Map[String,Any]]() ; for (i <- items) { val _key = i.cat ; val _g = _groups.getOrElseUpdate(_key, Map("key" -> _key, "items" -> ArrayBuffer[Any]())) ; _g("items").asInstanceOf[ArrayBuffer[Any]].append(i) for (g <- _groups.values) { _tmp.append((0 - ({ var _res = ArrayBuffer[Any]() ; for (x <- g) { _res.append(x.val) }; _res }).sum, Map("cat" -> g("key"), "total" -> ({ var _res = ArrayBuffer[Any]() ; for (x <- g) { _res.append(x.val) }; _res }).sum))) } ; _res = _tmp.sortBy(_._1).map(_._2) ; _res })
    println(grouped)
  }
}
