// Generated by Mochi v0.10.35 on 2025-07-22 13:20:42 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  case class Item(id: Int, name: String)
  
  case class Item1(id: Int, customerId: Int, total: Int)
  
  case class QueryItem(orderId: Any, customer: Any, total: Any)
  
  def main(args: Array[String]): Unit = {
    val customers: ArrayBuffer[Item] = ArrayBuffer(Item(1, "Alice"), Item(2, "Bob"))
    val orders: ArrayBuffer[Item1] = ArrayBuffer(Item1(100, 1, 250), Item1(101, 3, 80))
    val result = ({ val _res = ArrayBuffer[QueryItem]() ; for (o <- orders) { val _opt = customers.find(c => o.customerId == c.id) ; val c = _opt.getOrElse(null) ; _res.append(QueryItem(o.id, c, o.total)) } ; _res })
    println("--- Left Join ---")
    for (entry <- result) {
      println(List("Order", entry.orderId, "customer", entry.customer, "total", entry.total).mkString(" "))
    }
  }
}
