// Generated by Mochi v0.10.33 on 2025-07-21 17:23:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def main(args: Array[String]): Unit = {
    case class Item(id: Int, name: String)
    case class Item1(id: Int, customerId: Int, total: Int)
    val customers: ArrayBuffer[Item] = ArrayBuffer(Item(1, "Alice"), Item(2, "Bob"))
    val orders: ArrayBuffer[Item1] = ArrayBuffer(Item1(100, 1, 250), Item1(101, 3, 80))
    val result = ({ var _res = ArrayBuffer[Map[String,Any]]() ; for (o <- orders) { var matched = false ; for (c <- customers) { if (o.customerId == c.id) { matched = true ; _res.append(Map("orderId" -> o.id, "customer" -> c, "total" -> o.total)) } }; if (!matched) { var c = null ; _res.append(Map("orderId" -> o.id, "customer" -> c, "total" -> o.total)) }
 _res })
    println("--- Left Join ---")
    for (entry <- result) {
    println(List("Order", entry.orderId, "customer", entry.customer, "total", entry.total).mkString(" "))
  }
  }
}
