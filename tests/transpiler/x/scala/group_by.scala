// Generated by Mochi v0.10.33 on 2025-07-21 16:41:10 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
object Main {
  def main(args: Array[String]): Unit = {
    case class Item(name: String, age: Int, city: String)
    val people: ArrayBuffer[Item] = ArrayBuffer(Item("Alice", 30, "Paris"), Item("Bob", 15, "Hanoi"), Item("Charlie", 65, "Paris"), Item("Diana", 45, "Hanoi"), Item("Eve", 70, "Paris"), Item("Frank", 22, "Hanoi"))
    val stats: ArrayBuffer[Map[String,Any]] = ({ var _groups = Map[Any, Map[String, Any]]() ; var _res = ArrayBuffer[Map[String,Any]]() ; for (person <- people) { val _key = person.city ; val _g = _groups.getOrElseUpdate(_key, Map("key" -> _key, "items" -> ArrayBuffer[Any]())) ; _g("items").asInstanceOf[ArrayBuffer[Any]].append(person) for (g <- _groups.values) { _res.append(Map("city" -> g("key"), "count" -> g("items").size, "avg_age" -> ({ var _res = ArrayBuffer[Any]() ; for (p <- g) { _res.append(p.age) }; _res }).sum / ({ var _res = ArrayBuffer[Any]() ; for (p <- g) { _res.append(p.age) }; _res }).size)) } ; _res })
    println("--- People grouped by city ---")
    for (s <- stats) {
    println(List(s.city, ": count =", s.count, ", avg_age =", s.avg_age).mkString(" "))
  }
  }
}
