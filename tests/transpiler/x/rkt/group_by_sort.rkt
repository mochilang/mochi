;; Generated by Mochi 0.10.34 on 2025-07-21 23:34 +0700
#lang racket
(require racket/list racket/string json)

(define items (list (hash "cat" "a" "val" 3) (hash "cat" "a" "val" 1) (hash "cat" "b" "val" 5) (hash "cat" "b" "val" 2)))
(define grouped (let ([_groups (make-hash)] [_res '()])
  (for ([i items])
    (let* ([_key (hash-ref i "cat")][_g (hash-ref _groups _key (lambda () (let ([h (make-hash)]) (hash-set! h "key" _key) (hash-set! h "items" '()) (hash-set! _groups _key h) h)))])
      (hash-set! _g "items" (append (hash-ref _g "items") (list i))))
  )
  (for ([g (hash-values _groups)])
    (let ([val (hash "cat" (hash-ref g "key") "total" (apply + (let ([_res '()])
  (for ([x (hash-ref g "items")])
    (set! _res (append _res (list (hash-ref x "val"))))
  )
  _res)))] [key (- (apply + (let ([_res '()])
  (for ([x (hash-ref g "items")])
    (set! _res (append _res (list (hash-ref x "val"))))
  )
  _res)))])
      (set! _res (append _res (list (cons key val)))))
  )
  (set! _res (sort _res < #:key car))
  (set! _res (map cdr _res))
  _res))
(displayln grouped)
