;; Generated by Mochi 0.10.33 on 2025-07-21 19:10 +0700
#lang racket
(require racket/list racket/string)

(define nations (list (hash "id" 1 "name" "A") (hash "id" 2 "name" "B")))
(define suppliers (list (hash "id" 1 "nation" 1) (hash "id" 2 "nation" 2)))
(define partsupp (list (hash "part" 100 "supplier" 1 "cost" 10 "qty" 2) (hash "part" 100 "supplier" 2 "cost" 20 "qty" 1) (hash "part" 200 "supplier" 1 "cost" 5 "qty" 3)))
(define filtered (let ([_res '()])
  (for ([ps partsupp])
    (for ([s suppliers])
      (for ([n nations])
        (when (and (and (= (hash-ref s "id") (hash-ref ps "supplier")) (= (hash-ref n "id") (hash-ref s "nation"))) (= (hash-ref n "name") "A"))
        (set! _res (append _res (list (hash "part" (hash-ref ps "part") "value" (* (hash-ref ps "cost") (hash-ref ps "qty"))))))
        )
      )
    )
  )
  _res))
(define grouped (let ([_groups (make-hash)] [_res '()])
  (for ([x filtered])
    (let* ([_key (hash-ref x "part")][_g (hash-ref _groups _key (lambda () (let ([h (make-hash)]) (hash-set! h "key" _key) (hash-set! h "items" '()) (hash-set! _groups _key h) h)))])
      (hash-set! _g "items" (append (hash-ref _g "items") (list x))))
  )
  (for ([g (hash-values _groups)])
    (set! _res (append _res (list (hash "part" (hash-ref g "key") "total" (apply + (let ([_res '()])
  (for ([r (hash-ref g "items")])
    (set! _res (append _res (list (hash-ref r "value"))))
  )
  _res))))))
  )
  _res))
(displayln grouped)
