;; Generated by Mochi 0.10.32 on 2025-07-21 10:50 +0700
#lang typed/racket
(require racket/list racket/string)

(: customers (Listof (HashTable String Any)))
(define customers (list (hash "id" 1 "name" "Alice") (hash "id" 2 "name" "Bob") (hash "id" 3 "name" "Charlie") (hash "id" 4 "name" "Diana")))
(: orders (Listof (HashTable String Integer)))
(define orders (list (hash "id" 100 "customerId" 1 "total" 250) (hash "id" 101 "customerId" 2 "total" 125) (hash "id" 102 "customerId" 1 "total" 300)))
(: result (Listof (HashTable String Any)))
(define result (let ([_res '()])
  (for ([o orders])
    (let ([matched #f])
      (for ([c customers])
        (when (= (hash-ref o "customerId") (hash-ref c "id"))
          (set! matched #t)
          (set! _res (append _res (list (hash "customerName" (if c (hash-ref c "name") #f) "order" o))))
      )
      (when (not matched)
        (let ([c #f])
          (set! _res (append _res (list (hash "customerName" (if c (hash-ref c "name") #f) "order" o))))
        )
      )
    ))
  )
  _res))
(displayln "--- Right Join using syntax ---")
(for ([entry result])
(if (hash-ref entry "order") (begin
(displayln (format "~a ~a ~a ~a ~a ~a" "Customer" (hash-ref entry "customerName") "has order" (hash-ref (hash-ref entry "order") "id") "- $" (hash-ref (hash-ref entry "order") "total")))
) (begin
(displayln (format "~a ~a ~a" "Customer" (hash-ref entry "customerName") "has no orders"))
))
)
