;; Generated by Mochi 0.10.33 on 2025-07-21 16:07 +0700
#lang racket
(require racket/list racket/string)
(struct group (key items))

(define customers (list (hash "id" 1 "name" "Alice") (hash "id" 2 "name" "Bob")))
(define orders (list (hash "id" 100 "customerId" 1) (hash "id" 101 "customerId" 1) (hash "id" 102 "customerId" 2)))
(define stats (let ([_groups (make-hash)] [_res '()])
  (for ([o orders])
    (for ([c customers])
      (when (= (hash-ref o "customerId") (hash-ref c "id"))
        (let* ([_key (hash-ref c "name")][_g (hash-ref _groups _key (lambda () (let ([h (make-hash)]) (hash-set! h "key" _key) (hash-set! h "items" '()) (hash-set! _groups _key h) h)))])
          (hash-set! _g "items" (append (hash-ref _g "items") (list (hash "o" o "c" c))))
      )
    )
  )
  (for ([g (hash-values _groups)])
    (set! _res (append _res (list (hash "name" (hash-ref g "key") "count" (cond [(string? (hash-ref g "items")) (string-length (hash-ref g "items"))] [(hash? (hash-ref g "items")) (hash-count (hash-ref g "items"))] [else (length (hash-ref g "items"))])))))
  )
  _res))
(displayln "--- Orders per customer ---")
(for ([s stats])
(displayln (string-join (filter (lambda (s) (not (string=? s ""))) (list (format "~a" (hash-ref s "name")) (format "~a" "orders:") (format "~a" (hash-ref s "count")))) " "))
)
