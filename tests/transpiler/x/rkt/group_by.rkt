;; Generated by Mochi 0.10.33 on 2025-07-21 18:06 +0700
#lang racket
(require racket/list racket/string)
(struct group (key items))

(define people (list (hash "name" "Alice" "age" 30 "city" "Paris") (hash "name" "Bob" "age" 15 "city" "Hanoi") (hash "name" "Charlie" "age" 65 "city" "Paris") (hash "name" "Diana" "age" 45 "city" "Hanoi") (hash "name" "Eve" "age" 70 "city" "Paris") (hash "name" "Frank" "age" 22 "city" "Hanoi")))
(define stats (let ([_groups (make-hash)] [_res '()])
  (for ([person people])
    (let* ([_key (hash-ref person "city")][_g (hash-ref _groups _key (lambda () (let ([h (make-hash)]) (hash-set! h "key" _key) (hash-set! h "items" '()) (hash-set! _groups _key h) h)))])
      (hash-set! _g "items" (append (hash-ref _g "items") (list person))))
  )
  (for ([g (hash-values _groups)])
    (set! _res (append _res (list (hash "city" (hash-ref g "key") "count" (cond [(string? (hash-ref g "items")) (string-length (hash-ref g "items"))] [(hash? (hash-ref g "items")) (hash-count (hash-ref g "items"))] [else (length (hash-ref g "items"))]) "avg_age" (if (null? (let ([_res '()])
  (for ([p (hash-ref g "items")])
    (set! _res (append _res (list (hash-ref p "age"))))
  )
  _res)) 0 (exact->inexact (/ (apply + (let ([_res '()])
  (for ([p (hash-ref g "items")])
    (set! _res (append _res (list (hash-ref p "age"))))
  )
  _res)) (length (let ([_res '()])
  (for ([p (hash-ref g "items")])
    (set! _res (append _res (list (hash-ref p "age"))))
  )
  _res)))))))))
  )
  _res))
(displayln "--- People grouped by city ---")
(for ([s stats])
(displayln (string-join (filter (lambda (s) (not (string=? s ""))) (list (format "~a" (hash-ref s "city")) (format "~a" ": count =") (format "~a" (hash-ref s "count")) (format "~a" ", avg_age =") (format "~a" (hash-ref s "avg_age")))) " "))
)
