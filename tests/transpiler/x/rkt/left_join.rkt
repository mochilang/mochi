;; Generated by Mochi 0.10.33 on 2025-07-21 18:06 +0700
#lang racket
(require racket/list racket/string)
(struct group (key items))

(define customers (list (hash "id" 1 "name" "Alice") (hash "id" 2 "name" "Bob")))
(define orders (list (hash "id" 100 "customerId" 1 "total" 250) (hash "id" 101 "customerId" 3 "total" 80)))
(define result (let ([_res '()])
  (for ([o orders])
    (let ([matched #f])
      (for ([c customers])
        (when (= (hash-ref o "customerId") (hash-ref c "id"))
          (set! matched #t)
          (set! _res (append _res (list (hash "orderId" (hash-ref o "id") "customer" c "total" (hash-ref o "total")))))
      )
      (when (not matched)
        (let ([c #f])
          (set! _res (append _res (list (hash "orderId" (hash-ref o "id") "customer" c "total" (hash-ref o "total")))))
        )
      )
    ))
  )
  _res))
(displayln "--- Left Join ---")
(for ([entry result])
(displayln (string-join (filter (lambda (s) (not (string=? s ""))) (list (format "~a" "Order") (format "~a" (hash-ref entry "orderId")) (format "~a" "customer") (format "~a" (hash-ref entry "customer")) (format "~a" "total") (format "~a" (hash-ref entry "total")))) " "))
)
