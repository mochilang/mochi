;; Generated by Mochi 0.10.33 on 2025-07-21 18:06 +0700
#lang racket
(require racket/list racket/string)
(struct group (key items))

(define customers (list (hash "id" 1 "name" "Alice") (hash "id" 2 "name" "Bob") (hash "id" 3 "name" "Charlie") (hash "id" 4 "name" "Diana")))
(define orders (list (hash "id" 100 "customerId" 1 "total" 250) (hash "id" 101 "customerId" 2 "total" 125) (hash "id" 102 "customerId" 1 "total" 300) (hash "id" 103 "customerId" 5 "total" 80)))
(define result (let ([_res '()])
  (for ([o orders])
    (let ([matched #f])
      (for ([c customers])
        (when (= (hash-ref o "customerId") (hash-ref c "id"))
          (set! matched #t)
          (set! _res (append _res (list (hash "order" o "customer" c))))
      )
      (when (not matched)
        (let ([c #f])
          (set! _res (append _res (list (hash "order" o "customer" c))))
        )
      )
    ))
  )
  (for ([c customers])
    (unless (for/or ([o orders]) (= (hash-ref o "customerId") (hash-ref c "id")))
      (let ([o #f])
        (set! _res (append _res (list (hash "order" o "customer" c))))
      )
    ))
  )
  _res))
(displayln "--- Outer Join using syntax ---")
(for ([row result])
(if (hash-ref row "order") (begin
(if (hash-ref row "customer") (begin
(displayln (string-join (filter (lambda (s) (not (string=? s ""))) (list (format "~a" "Order") (format "~a" (hash-ref (hash-ref row "order") "id")) (format "~a" "by") (format "~a" (hash-ref (hash-ref row "customer") "name")) (format "~a" "- $") (format "~a" (hash-ref (hash-ref row "order") "total")))) " "))
) (begin
(displayln (string-join (filter (lambda (s) (not (string=? s ""))) (list (format "~a" "Order") (format "~a" (hash-ref (hash-ref row "order") "id")) (format "~a" "by") (format "~a" "Unknown") (format "~a" "- $") (format "~a" (hash-ref (hash-ref row "order") "total")))) " "))
))
) (begin
(displayln (string-join (filter (lambda (s) (not (string=? s ""))) (list (format "~a" "Customer") (format "~a" (hash-ref (hash-ref row "customer") "name")) (format "~a" "has no orders"))) " "))
))
)
