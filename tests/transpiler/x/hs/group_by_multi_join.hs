{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedRecordDot #-}
{-# LANGUAGE NoFieldSelectors #-}
import Prelude hiding (cost, id, name, nation, part, qty, supplier)
-- Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:46 GMT+7
import Data.List (intercalate, isInfixOf, union, intersect, nub, sortOn, (\\))
import qualified Data.Map as Map
data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)
data GenType2 = GenType2
  { id :: Int,
    nation :: Int
  } deriving (Show)


data GenType3 = GenType3
  { part :: Int,
    supplier :: Int,
    cost :: Double,
    qty :: Int
  } deriving (Show)


data GenType1 = GenType1
  { id :: Int,
    name :: String
  } deriving (Show)


filtered = [Map.fromList [(part, ps.part), (value, ps.cost * ps.qty)] | ps <- partsupp, s <- suppliers, n <- nations, s.id == ps.supplier && n.id == s.nation && n.name == "A"]

grouped = [Map.fromList [(part, g.key), (total, sum [r.value | r <- g.items])] | g <- [MGroup {key = k, items = [x | x <- filtered, x.part == k]} | k <- nub (map (\x -> x.part) [x | x <- filtered])]]

nations = [GenType1 {id = 1, name = "A"}, GenType1 {id = 2, name = "B"}]

partsupp = [GenType3 {part = 100, supplier = 1, cost = 10, qty = 2}, GenType3 {part = 100, supplier = 2, cost = 20, qty = 1}, GenType3 {part = 200, supplier = 1, cost = 5, qty = 3}]

suppliers = [GenType2 {id = 1, nation = 1}, GenType2 {id = 2, nation = 2}]

main :: IO ()
main = do
    print (grouped)
