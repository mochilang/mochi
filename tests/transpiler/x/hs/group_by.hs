{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedRecordDot #-}
{-# LANGUAGE NoFieldSelectors #-}
import Prelude hiding (age, avg_age, city, count, name)
-- Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:46 GMT+7
import Data.List (intercalate, isInfixOf, union, intersect, nub, sortOn, (\\))
data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)
data GenType1 = GenType1
  { name :: String,
    age :: Int,
    city :: String
  } deriving (Show)


data GenType2 = GenType2
  { city :: String,
    count :: Int,
    avg_age :: Double
  } deriving (Show)


people = [GenType1 {name = "Alice", age = 30, city = "Paris"}, GenType1 {name = "Bob", age = 15, city = "Hanoi"}, GenType1 {name = "Charlie", age = 65, city = "Paris"}, GenType1 {name = "Diana", age = 45, city = "Hanoi"}, GenType1 {name = "Eve", age = 70, city = "Paris"}, GenType1 {name = "Frank", age = 22, city = "Hanoi"}]

stats = [GenType2 {city = g.key, count = length g.items, avg_age = fromIntegral (sum [p.age | p <- g.items]) / fromIntegral (length [p.age | p <- g.items])} | g <- [MGroup {key = k, items = [person | person <- people, person.city == k]} | k <- nub (map (\person -> person.city) [person | person <- people])]]

main :: IO ()
main = do
    putStrLn "--- People grouped by city ---"
    mapM_ (\s -> do
        putStrLn show s.city ++ " " ++ ": count =" ++ " " ++ show s.count ++ " " ++ ", avg_age =" ++ " " ++ show s.avg_age
        ) stats
