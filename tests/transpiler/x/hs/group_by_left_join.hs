{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedRecordDot #-}
{-# LANGUAGE NoFieldSelectors #-}
import Prelude hiding (c, count, customerId, id, name, o)
-- Generated by Mochi transpiler v0.10.34 on 2025-07-21 23:34 GMT+7
import Data.List (intercalate, isInfixOf, union, intersect, nub, sortOn, (\\))
data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)
data GenType1 = GenType1
  { id :: Int,
    name :: String
  } deriving (Show)


data GenType2 = GenType2
  { id :: Int,
    customerId :: Int
  } deriving (Show)


data GenType3 = GenType3
  { c :: GenType1,
    o :: GenType2
  } deriving (Show)


data GenType4 = GenType4
  { name :: String,
    count :: Int
  } deriving (Show)


customers = [GenType1 {id = 1, name = "Alice"}, GenType1 {id = 2, name = "Bob"}, GenType1 {id = 3, name = "Charlie"}]

orders = [GenType2 {id = 100, customerId = 1}, GenType2 {id = 101, customerId = 1}, GenType2 {id = 102, customerId = 2}]

stats = [GenType4 {name = g.key, count = length [r | r <- g.items, r.o]} | g <- [MGroup {key = k, items = [GenType3 {c = c, o = o} | c <- customers, o <- orders, o.customerId == c.id && c.name == k]} | k <- nub ([c.name | c <- customers, o <- orders, o.customerId == c.id])]]

main :: IO ()
main = do
    putStrLn "--- Group Left Join ---"
    mapM_ (\s -> do
        putStrLn (s.name ++ " " ++ "orders:" ++ " " ++ show s.count)
        ) stats
