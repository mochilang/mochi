{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedRecordDot #-}
{-# LANGUAGE NoFieldSelectors #-}
import Prelude hiding (customerId, id, name)
-- Generated by Mochi transpiler v0.10.33 on 2025-07-21 16:07 GMT+7
import Data.List (intercalate, isInfixOf, union, intersect, nub, sortOn, (\\))
import qualified Data.Map as Map
data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)
data GenType2 = GenType2
  { id :: Int,
    customerId :: Int
  } deriving (Show)


data GenType1 = GenType1
  { id :: Int,
    name :: String
  } deriving (Show)


customers = [GenType1 {id = 1, name = "Alice"}, GenType1 {id = 2, name = "Bob"}]

orders = [GenType2 {id = 100, customerId = 1}, GenType2 {id = 101, customerId = 1}, GenType2 {id = 102, customerId = 2}]

stats = [Map.fromList [(name, g.key), (count, length g.items)] | g <- [MGroup {key = k, items = [[o, c] | o <- orders, c <- customers, o.customerId == c.id && c.name == k]} | k <- nub (map (\o c -> c.name) [[o, c] | o <- orders, c <- customers, o.customerId == c.id])]]

main :: IO ()
main = do
    putStrLn ("--- Orders per customer ---")
    mapM_ (\s -> do
        putStrLn (show s.name ++ "orders:" ++ show s.count)
        ) stats
