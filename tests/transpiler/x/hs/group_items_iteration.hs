{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE OverloadedRecordDot #-}
{-# LANGUAGE NoFieldSelectors #-}
import Prelude hiding (tag, val)
-- Generated by Mochi transpiler v0.10.33 on 2025-07-21 16:07 GMT+7
import Data.List (intercalate, isInfixOf, union, intersect, nub, sortOn, (\\))
import qualified Data.Map as Map
data MGroup k a = MGroup {key :: k, items :: [a]} deriving (Show)
data GenType1 = GenType1
  { tag :: String,
    val :: Int
  } deriving (Show)


_data = [GenType1 {tag = "a", val = 1}, GenType1 {tag = "a", val = 2}, GenType1 {tag = "b", val = 3}]

groups = [g.items | g <- [MGroup {key = k, items = [d | d <- _data, d.tag == k]} | k <- nub (map (\d -> d.tag) [d | d <- _data])]]

result = sortOn (\r -> r.tag) [r | r <- tmp]

tmp = []

main :: IO ()
main = do
    mapM_ (\g -> do
        total = 0
        mapM_ (\x -> do
        total = total + x.val
        ) g.items
        tmp = tmp ++ [Map.fromList [(tag, g.key), (total, total)]]
        ) groups
    print (result)
