run: exit status 1

/workspace/mochi/tests/transpiler/x/hs/min_max_builtin.hs:2:9: error:
    • Ambiguous type variable ‘a0’ arising from the literal ‘3’
      prevents the constraint ‘(Num a0)’ from being solved.
      Relevant bindings include
        nums :: [a0]
          (bound at /workspace/mochi/tests/transpiler/x/hs/min_max_builtin.hs:2:1)
      Probable fix: use a type annotation to specify what ‘a0’ should be.
      Potentially matching instances:
        instance Num Integer -- Defined in ‘GHC.Num’
        instance Num Double -- Defined in ‘GHC.Float’
        ...plus three others
        ...plus one instance involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    • In the expression: 3
      In the expression: [3, 1, 4]
      In an equation for ‘nums’: nums = [3, 1, 4]
  |
2 | nums = [3, 1, 4]
  |         ^

/workspace/mochi/tests/transpiler/x/hs/min_max_builtin.hs:6:5: error:
    • No instance for (Show ([a0] -> [a0]))
        arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of a 'do' block: print (min nums)
      In the expression:
        do print (min nums)
           print (max nums)
      In an equation for ‘main’:
          main
            = do print (min nums)
                 print (max nums)
  |
6 |     print (min nums)
  |     ^^^^^

/workspace/mochi/tests/transpiler/x/hs/min_max_builtin.hs:6:12: error:
    • Ambiguous type variable ‘a0’ arising from a use of ‘min’
      prevents the constraint ‘(Ord a0)’ from being solved.
      Probable fix: use a type annotation to specify what ‘a0’ should be.
      Potentially matching instances:
        instance Ord Ordering -- Defined in ‘GHC.Classes’
        instance Ord Integer -- Defined in ‘GHC.Num.Integer’
        ...plus 23 others
        ...plus three instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    • In the first argument of ‘print’, namely ‘(min nums)’
      In a stmt of a 'do' block: print (min nums)
      In the expression:
        do print (min nums)
           print (max nums)
  |
6 |     print (min nums)
  |            ^^^
