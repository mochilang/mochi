// Generated by Mochi compiler v0.10.26 on 2025-07-16T16:27:08Z
open System

type Anon1 = {
    tag: obj
    total: obj
}
type Anon2 = {
    tag: string
    ``val``: int
}
type Anon3 = {
    tag: obj
    total: int
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let data: Anon2 list = [{ tag = "a"; ``val`` = 1 }; { tag = "a"; ``val`` = 2 }; { tag = "b"; ``val`` = 3 }]
let groups: obj list = [ for g in _group_by [ for d in data do yield d ] (fun d -> d.tag) do
    yield g ]
let mutable tmp: Anon1 array = [||]
for g in groups do
    let mutable total: int = 0
    for x in g.items do
        total <- total + x.val
    tmp <- Array.append tmp [|{ tag = g.key; total = total }|]
let result: obj list = [ for r in tmp do yield (r.tag, r) ] |> List.sortBy fst |> List.map snd
printfn "%A" result
