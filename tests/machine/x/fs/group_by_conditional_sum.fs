// Generated by Mochi compiler v0.10.27 on 2025-07-17T07:46:55Z
open System

type Anon1 = {
    cat: string
    ``val``: int
    flag: bool
}
type Anon2 = {
    cat: obj
    share: obj
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups.[ks] ]

let items: Anon1 list = [{ cat = "a"; ``val`` = 10; flag = true }; { cat = "a"; ``val`` = 5; flag = false }; { cat = "b"; ``val`` = 20; flag = true }]
let result: Anon2 list = [ for g in _group_by [ for i in items do yield i ] (fun i -> i.cat) |> List.sortBy (fun gTmp -> let g = gTmp in g.key) do
    yield { cat = g.key; share = List.sum [ for x in g do yield (if x.flag then x.``val`` else 0) ] / List.sum [ for x in g do yield x.``val`` ] } ]
printfn "%A" result
