// Generated by Mochi compiler v0.10.28 on 1970-01-01T00:00:00Z
// left_join_multi.mochi
import java.util.*;

class Customer {
    int id;
    String name;
    Customer(int id, String name) {
        this.id = id;
        this.name = name;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Customer other)) return false;
        return Objects.equals(this.id, other.id) && Objects.equals(this.name, other.name);
    }
    @Override public int hashCode() {
        return Objects.hash(id, name);
    }
    int size() { return 2; }
}
class Order {
    int id;
    int customerId;
    Order(int id, int customerId) {
        this.id = id;
        this.customerId = customerId;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Order other)) return false;
        return Objects.equals(this.id, other.id) && Objects.equals(this.customerId, other.customerId);
    }
    @Override public int hashCode() {
        return Objects.hash(id, customerId);
    }
    int size() { return 2; }
}
class Item {
    int orderId;
    String sku;
    Item(int orderId, String sku) {
        this.orderId = orderId;
        this.sku = sku;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Item other)) return false;
        return Objects.equals(this.orderId, other.orderId) && Objects.equals(this.sku, other.sku);
    }
    @Override public int hashCode() {
        return Objects.hash(orderId, sku);
    }
    int size() { return 2; }
}
class Result {
    int orderId;
    String name;
    Item item;
    Result(int orderId, String name, Item item) {
        this.orderId = orderId;
        this.name = name;
        this.item = item;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Result other)) return false;
        return Objects.equals(this.orderId, other.orderId) && Objects.equals(this.name, other.name) && Objects.equals(this.item, other.item);
    }
    @Override public int hashCode() {
        return Objects.hash(orderId, name, item);
    }
    int size() { return 3; }
}
public class LeftJoinMulti {
    public static void main(String[] args) {
        List<Customer> customers = new ArrayList<>(Arrays.asList(new Customer(1, "Alice"), new Customer(2, "Bob")));
        List<Order> orders = new ArrayList<>(Arrays.asList(new Order(100, 1), new Order(101, 2)));
        List<Item> items = new ArrayList<>(Arrays.asList(new Item(100, "a")));
        List<Result> result = (new java.util.function.Supplier<List<Result>>(){public List<Result> get(){
    List<Result> res0 = new ArrayList<>();
    for (var o : orders) {
        for (var c : customers) {
            if (!(o.customerId == c.id)) continue;
            List<Item> tmp1 = new ArrayList<>();
            for (var it2 : items) {
                var i = it2;
                if (!(o.id == i.orderId)) continue;
                tmp1.add(it2);
            }
            if (tmp1.isEmpty()) tmp1.add(null);
            for (var i : tmp1) {
                res0.add(new Result(o.id, c.name, i));
            }
        }
    }
    return res0;
}}).get();
        System.out.println("--- Left Join Multi ---");
        for (Result r : result) {
            System.out.println(r.orderId + " " + r.name + " " + r.item);
        }
    }
}
