// Generated by Mochi compiler v0.10.27 on 1970-01-01T00:00:00Z
// group_items_iteration.mochi
import java.util.*;

public class GroupItemsIteration {
    static <K,V> Map.Entry<K,V> entry(K k, V v) { return new AbstractMap.SimpleEntry<>(k, v); }
    static <K,V> LinkedHashMap<K,V> mapOfEntries(Map.Entry<? extends K,? extends V>... entries) {
        LinkedHashMap<K,V> m = new LinkedHashMap<>();
        for (var e : entries) m.put(e.getKey(), e.getValue());
        return m;
    }
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    public static void main(String[] args) {
        List<Map<String,Object>> data = new ArrayList<>(Arrays.asList(mapOfEntries(entry("tag", "a"), entry("val", 1)), mapOfEntries(entry("tag", "a"), entry("val", 2)), mapOfEntries(entry("tag", "b"), entry("val", 3))));
        List<Group<Object,Map<String,Object>>> groups = (new java.util.function.Supplier<List<Group<Object,Map<String,Object>>>>(){public List<Group<Object,Map<String,Object>>> get(){
    List<Group<Object,Map<String,Object>>> res0 = new ArrayList<>();
    Map<Object,List<Map<String,Object>>> groups1 = new LinkedHashMap<>();
    for (var d : data) {
        var row2 = d;
        Object key3 = ((Map<String,Object>)d).get("tag");
        List<Map<String,Object>> bucket4 = groups1.get(key3);
        if (bucket4 == null) { bucket4 = new ArrayList<>(); groups1.put(key3, bucket4); }
        bucket4.add(row2);
    }
    for (Map.Entry<Object,List<Map<String,Object>>> __e : groups1.entrySet()) {
        Object g_key = __e.getKey();
        Group<Object,Map<String,Object>> g = new Group<>(g_key, __e.getValue());
        res0.add(g);
    }
    return res0;
}}).get();
        List<Object> tmp = new ArrayList<>(Arrays.asList());
        for (Group<Object,Map<String,Object>> g : groups) {
            int total = 0;
            for (Map<String,Object> x : g.items) {
                total = (int)(total + ((Number)((Map<String,Object>)x).get("val")).doubleValue());
            }
            tmp.add(mapOfEntries(entry("tag", g.key), entry("total", total)));
        }
        List<Object> result = (new java.util.function.Supplier<List<Object>>(){public List<Object> get(){
    List<Object> res5 = new ArrayList<>();
    for (var r : tmp) {
        res5.add(r);
    }
    return res5;
}}).get();
        System.out.println(result);
    }
}
