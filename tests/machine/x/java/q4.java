// Generated by Mochi compiler v0.10.24 on 2025-07-13T02:34:34Z
// q4.mochi
import java.util.*;

class OOrderkeyOOrderdateOOrderpriority {
    int o_orderkey;
    String o_orderdate;
    String o_orderpriority;
    OOrderkeyOOrderdateOOrderpriority(int o_orderkey, String o_orderdate, String o_orderpriority) {
        this.o_orderkey = o_orderkey;
        this.o_orderdate = o_orderdate;
        this.o_orderpriority = o_orderpriority;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof OOrderkeyOOrderdateOOrderpriority other)) return false;
        return Objects.equals(this.o_orderkey, other.o_orderkey) && Objects.equals(this.o_orderdate, other.o_orderdate) && Objects.equals(this.o_orderpriority, other.o_orderpriority);
    }
    @Override public int hashCode() {
        return Objects.hash(o_orderkey, o_orderdate, o_orderpriority);
    }
    int size() { return 3; }
}
class LOrderkeyLCommitdateLReceiptdate {
    int l_orderkey;
    String l_commitdate;
    String l_receiptdate;
    LOrderkeyLCommitdateLReceiptdate(int l_orderkey, String l_commitdate, String l_receiptdate) {
        this.l_orderkey = l_orderkey;
        this.l_commitdate = l_commitdate;
        this.l_receiptdate = l_receiptdate;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof LOrderkeyLCommitdateLReceiptdate other)) return false;
        return Objects.equals(this.l_orderkey, other.l_orderkey) && Objects.equals(this.l_commitdate, other.l_commitdate) && Objects.equals(this.l_receiptdate, other.l_receiptdate);
    }
    @Override public int hashCode() {
        return Objects.hash(l_orderkey, l_commitdate, l_receiptdate);
    }
    int size() { return 3; }
}
class OOrderpriorityOrderCount {
    Object o_orderpriority;
    int order_count;
    OOrderpriorityOrderCount(Object o_orderpriority, int order_count) {
        this.o_orderpriority = o_orderpriority;
        this.order_count = order_count;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof OOrderpriorityOrderCount other)) return false;
        return Objects.equals(this.o_orderpriority, other.o_orderpriority) && Objects.equals(this.order_count, other.order_count);
    }
    @Override public int hashCode() {
        return Objects.hash(o_orderpriority, order_count);
    }
    int size() { return 2; }
}
public class Q4 {
    static class Group<K,V> implements Iterable<V> {
        K key;
        List<V> items;
        Group(K key, List<V> items) { this.key = key; this.items = items; }
        public Iterator<V> iterator() { return items.iterator(); }
        int size() { return items.size(); }
    }
    static String toJson(Object o) {
        if (o instanceof Map<?,?> m) {
            StringJoiner j = new StringJoiner(",", "{", "}");
            for (Map.Entry<?,?> e : m.entrySet()) j.add("\"" + e.getKey() + "\":" + e.getValue());
            return j.toString();
        } else if (o instanceof Collection<?> c) {
            StringJoiner j = new StringJoiner(",", "[", "]");
            for (var x : c) j.add(toJson(x));
            return j.toString();
        } else if (o instanceof String s) {
            return "\"" + s + "\"";
        }
        return String.valueOf(o);
    }
    static void json(Object o) { System.out.println(toJson(o)); }
    public static void main(String[] args) {
    List<OOrderkeyOOrderdateOOrderpriority> orders = new ArrayList<>(Arrays.asList(new OOrderkeyOOrderdateOOrderpriority(1, "1993-07-01", "1-URGENT"), new OOrderkeyOOrderdateOOrderpriority(2, "1993-07-15", "2-HIGH"), new OOrderkeyOOrderdateOOrderpriority(3, "1993-08-01", "3-NORMAL")));
    List<LOrderkeyLCommitdateLReceiptdate> lineitem = new ArrayList<>(Arrays.asList(new LOrderkeyLCommitdateLReceiptdate(1, "1993-07-10", "1993-07-12"), new LOrderkeyLCommitdateLReceiptdate(1, "1993-07-12", "1993-07-10"), new LOrderkeyLCommitdateLReceiptdate(2, "1993-07-20", "1993-07-25"), new LOrderkeyLCommitdateLReceiptdate(3, "1993-08-02", "1993-08-01"), new LOrderkeyLCommitdateLReceiptdate(3, "1993-08-05", "1993-08-10")));
    String start_date = "1993-07-01";
    String end_date = "1993-08-01";
    List<OOrderkeyOOrderdateOOrderpriority> date_filtered_orders = (new java.util.function.Supplier<List<OOrderkeyOOrderdateOOrderpriority>>(){public List<OOrderkeyOOrderdateOOrderpriority> get(){
    List<OOrderkeyOOrderdateOOrderpriority> res0 = new ArrayList<>();
    for (var o : orders) {
        if (!(String.valueOf(o.o_orderdate).compareTo(String.valueOf(start_date)) >= 0 && String.valueOf(o.o_orderdate).compareTo(String.valueOf(end_date)) < 0)) continue;
        res0.add(o);
    }
    return res0;
}}).get();
    List<OOrderkeyOOrderdateOOrderpriority> late_orders = (new java.util.function.Supplier<List<OOrderkeyOOrderdateOOrderpriority>>(){public List<OOrderkeyOOrderdateOOrderpriority> get(){
    List<OOrderkeyOOrderdateOOrderpriority> res1 = new ArrayList<>();
    for (var o : date_filtered_orders) {
        if (!(lineitem.stream().anyMatch(l -> Objects.equals(l.l_orderkey, o.o_orderkey) && String.valueOf(l.l_commitdate).compareTo(String.valueOf(l.l_receiptdate)) < 0))) continue;
        res1.add(o);
    }
    return res1;
}}).get();
    List<OOrderpriorityOrderCount> result = (new java.util.function.Supplier<List<OOrderpriorityOrderCount>>(){public List<OOrderpriorityOrderCount> get(){
    List<OOrderpriorityOrderCount> res2 = new ArrayList<>();
    Map<String,List<OOrderkeyOOrderdateOOrderpriority>> groups3 = new LinkedHashMap<>();
    for (var o : late_orders) {
        var row4 = o;
        String key5 = o.o_orderpriority;
        List<OOrderkeyOOrderdateOOrderpriority> bucket6 = groups3.get(key5);
        if (bucket6 == null) { bucket6 = new ArrayList<>(); groups3.put(key5, bucket6); }
        bucket6.add(row4);
    }
    for (Map.Entry<String,List<OOrderkeyOOrderdateOOrderpriority>> __e : groups3.entrySet()) {
        String g_key = __e.getKey();
        Group<String,OOrderkeyOOrderdateOOrderpriority> g = new Group<>(g_key, __e.getValue());
        res2.add(new OOrderpriorityOrderCount(g.key, g.size()));
    }
    return res2;
}}).get();
    json(result);
    if (!(Objects.equals(result, Arrays.asList(new OOrderpriorityOrderCount("1-URGENT", 1), new OOrderpriorityOrderCount("2-HIGH", 1))))) throw new AssertionError("expect failed");
    }
}
