// Generated by Mochi compiler v0.10.27 on 2025-07-17T08:11:59Z
// left_join.mochi
import java.util.*;

class Customer {
    int id;
    String name;
    Customer(int id, String name) {
        this.id = id;
        this.name = name;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Customer other)) return false;
        return Objects.equals(this.id, other.id) && Objects.equals(this.name, other.name);
    }
    @Override public int hashCode() {
        return Objects.hash(id, name);
    }
    int size() { return 2; }
}
class Order {
    int id;
    int customerId;
    int total;
    Order(int id, int customerId, int total) {
        this.id = id;
        this.customerId = customerId;
        this.total = total;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Order other)) return false;
        return Objects.equals(this.id, other.id) && Objects.equals(this.customerId, other.customerId) && Objects.equals(this.total, other.total);
    }
    @Override public int hashCode() {
        return Objects.hash(id, customerId, total);
    }
    int size() { return 3; }
}
class Result {
    int orderId;
    Customer customer;
    int total;
    Result(int orderId, Customer customer, int total) {
        this.orderId = orderId;
        this.customer = customer;
        this.total = total;
    }
    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Result other)) return false;
        return Objects.equals(this.orderId, other.orderId) && Objects.equals(this.customer, other.customer) && Objects.equals(this.total, other.total);
    }
    @Override public int hashCode() {
        return Objects.hash(orderId, customer, total);
    }
    int size() { return 3; }
}
public class LeftJoin {
    public static void main(String[] args) {
        List<Customer> customers = new ArrayList<>(Arrays.asList(new Customer(1, "Alice"), new Customer(2, "Bob")));
        List<Order> orders = new ArrayList<>(Arrays.asList(new Order(100, 1, 250), new Order(101, 3, 80)));
        List<Result> result = (new java.util.function.Supplier<List<Result>>(){public List<Result> get(){
    Map<Integer,List<Customer>> map1 = new LinkedHashMap<>();
    for (var c : customers) {
        int key = c.id;
        List<Customer> _b = map1.get(key);
        if (_b == null) { _b = new ArrayList<>(); map1.put(key, _b); }
        _b.add(c);
    }
    List<Result> res0 = new ArrayList<>();
    for (var o : orders) {
        List<Customer> _tmp = map1.get(o.customerId);
        if (_tmp == null) _tmp = Arrays.asList((Customer)null);
        for (var c : _tmp) {
            res0.add(new Result(o.id, c, o.total));
        }
    }
    return res0;
}}).get();
        System.out.println("--- Left Join ---");
        for (Result entry : result) {
            System.out.println("Order" + " " + entry.orderId + " " + "customer" + " " + entry.customer + " " + "total" + " " + entry.total);
        }
    }
}
