-- Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
function __print(...)
    local n = select('#', ...)
    if n == 1 then
        local v = ...
        if type(v) == 'string' then
            print(v)
            return
        elseif type(v) == 'table' and (v[1] ~= nil or #v > 0) then
            local parts = {}
            for i=1,#v do parts[#parts+1] = __str(v[i]) end
            print(table.concat(parts, ' '))
            return
        end
    end
    local parts = {}
    for i=1,n do parts[#parts+1] = __str(select(i, ...)) end
    local out = table.concat(parts, ' ')
    out = string.gsub(out, ' +$', '')
    print(out)
end
function __str(v)
    local t = type(v)
    if t == 'table' then
        if v[1] ~= nil or #v > 0 then
            local parts = {}
            for i=1,#v do parts[#parts+1] = __str(v[i]) end
            local body = '['..table.concat(parts, ' ')..']'
            if v.__name then return v.__name..' '..body end
            return body
        else
            local keys = {}
            for k in pairs(v) do if k ~= '__name' then keys[#keys+1] = k end end
            table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
            local parts = {}
            for _,k in ipairs(keys) do
                local val = v[k]
                local vs
                if type(val) == 'string' then
                    vs = string.format('%q', val)
                else
                    vs = __str(val)
                end
                parts[#parts+1] = k..': '..vs
            end
            local body = '{'..table.concat(parts, ', ')..'}'
            if v.__name then return v.__name..' '..body end
            return body
        end
    else
        if t == 'boolean' then return (v and '1' or '0') end
        return tostring(v)
    end
end
local testpkg = {
    Add = function(a,b) return a + b end,
    Pi = 3.14,
    Answer = 42,
    MD5Hex = function(s)
        local tmp = os.tmpname()
        local f = assert(io.open(tmp, 'wb')); f:write(s); f:close()
        local p = assert(io.popen('openssl md5 '..tmp, 'r'))
        local out = p:read('*a'); p:close(); os.remove(tmp)
        return string.match(out, '= ([a-f0-9]+)')
    end,
    FifteenPuzzleExample = function()
        return 'Solution found in 52 moves: rrrulddluuuldrurdddrullulurrrddldluurddlulurruldrdrd'
    end,
}
__print(testpkg.Add(2, 3))
__print(testpkg.Pi)
__print(testpkg.Answer)
