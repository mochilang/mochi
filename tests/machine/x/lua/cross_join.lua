-- Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
function __print(...)
    local n = select('#', ...)
    if n == 1 then
        local v = ...
        if type(v) == 'string' then
            print(v)
            return
        elseif type(v) == 'table' and (v[1] ~= nil or #v > 0) then
            local parts = {}
            for i=1,#v do parts[#parts+1] = __str(v[i]) end
            print(table.concat(parts, ' '))
            return
        end
    end
    local parts = {}
    for i=1,n do parts[#parts+1] = __str(select(i, ...)) end
    local out = table.concat(parts, ' ')
    out = string.gsub(out, ' +$', '')
    print(out)
end
function __str(v)
    local t = type(v)
    if t == 'table' then
        if v[1] ~= nil or #v > 0 then
            local parts = {}
            for i=1,#v do parts[#parts+1] = __str(v[i]) end
            local body = '['..table.concat(parts, ' ')..']'
            if v.__name then return v.__name..' '..body end
            return body
        else
            local keys = {}
            for k in pairs(v) do if k ~= '__name' then keys[#keys+1] = k end end
            table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
            local parts = {}
            for _,k in ipairs(keys) do
                local val = v[k]
                local vs
                if type(val) == 'string' then
                    vs = string.format('%q', val)
                else
                    vs = __str(val)
                end
                parts[#parts+1] = k..': '..vs
            end
            local body = '{'..table.concat(parts, ', ')..'}'
            if v.__name then return v.__name..' '..body end
            return body
        end
    else
        if t == 'boolean' then return (v and '1' or '0') end
        return tostring(v)
    end
end
customers = {{["id"]=1, ["name"]="Alice"}, {["id"]=2, ["name"]="Bob"}, {["id"]=3, ["name"]="Charlie"}}
orders = {{["id"]=100, ["customerId"]=1, ["total"]=250}, {["id"]=101, ["customerId"]=2, ["total"]=125}, {["id"]=102, ["customerId"]=1, ["total"]=300}}
result = (function()
    local _res = {}
    for _, o in ipairs(orders) do
        for _, c in ipairs(customers) do
            _res[#_res+1] = {["orderId"]=o.id, ["orderCustomerId"]=o.customerId, ["pairedCustomerName"]=c.name, ["orderTotal"]=o.total}
        end
    end
    return _res
end)()
__print("--- Cross Join: All order-customer pairs ---")
for _, entry in ipairs(result) do
    __print(__str("Order"), __str(entry.orderId), __str("(customerId:"), __str(entry.orderCustomerId), __str(", total: $"), __str(entry.orderTotal), __str(") paired with"), __str(entry.pairedCustomerName))
end
