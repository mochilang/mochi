-- Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
_Group = {}
function _Group.new(k)
    return {key = k, items = {}}
end
function __group_by(src, keyfn)
    local groups = {}
    local order = {}
    for _, it in ipairs(src) do
        local key = keyfn(it)
        local ks
        if type(key) == 'table' then
            local fields = {}
            for k,_ in pairs(key) do fields[#fields+1] = k end
            table.sort(fields)
            local parts = {}
            for _,k in ipairs(fields) do parts[#parts+1] = tostring(k)..'='..tostring(key[k]) end
            ks = table.concat(parts, ',')
        else
            ks = tostring(key)
        end
        local g = groups[ks]
        if not g then
            g = _Group.new(key)
            groups[ks] = g
            order[#order+1] = ks
        end
        table.insert(g.items, it)
    end
    local res = {}
    for _, ks in ipairs(order) do
        res[#res+1] = groups[ks]
    end
    return res
end
function __avg(v)
    local items
    if type(v) == 'table' and v.items ~= nil then
        items = v.items
    elseif type(v) == 'table' then
        items = v
    else
        error('avg() expects list or group')
    end
    if #items == 0 then return 0 end
    local sum = 0
    for _, it in ipairs(items) do sum = sum + it end
    local res = sum / #items
    if res == math.floor(res) then return math.floor(res) end
    return res
end
people = {{["name"]="Alice", ["age"]=30, ["city"]="Paris"}, {["name"]="Bob", ["age"]=15, ["city"]="Hanoi"}, {["name"]="Charlie", ["age"]=65, ["city"]="Paris"}, {["name"]="Diana", ["age"]=45, ["city"]="Hanoi"}, {["name"]="Eve", ["age"]=70, ["city"]="Paris"}, {["name"]="Frank", ["age"]=22, ["city"]="Hanoi"}};
stats = (function()
    local _groups = __group_by(people, function(person) return person.city end)
    local _res = {}
    for _, g in ipairs(_groups) do
        _res[#_res+1] = {["city"]=g.key, ["count"]=#g.items, ["avg_age"]=__avg((function()
    local _res = {}
    for _, p in ipairs(g.items) do
        _res[#_res+1] = p.age
    end
    return _res
end)())}
    end
    return _res
end)();
print("--- People grouped by city ---");
for _, s in ipairs(stats) do
    print(table.concat({tostring(s.city), ": count =", tostring(s.count), ", avg_age =", tostring(s.avg_age)}, ' '));
end
