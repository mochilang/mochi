-- Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
function __except(a, b)
    local res = {}
    if a then
        for _, v in ipairs(a) do
            local found = false
            if b then
                for _, w in ipairs(b) do
                    if v == w then found = true break end
                end
            end
            if not found then res[#res+1] = v end
        end
    end
    return res
end
function __intersect(a, b)
    local res = {}
    if a and b then
        for _, v in ipairs(a) do
            for _, w in ipairs(b) do
                if v == w then
                    local dup = false
                    for _, r in ipairs(res) do if r == v then dup = true break end end
                    if not dup then res[#res+1] = v end
                    break
                end
            end
        end
    end
    return res
end
function __str(v)
    local t = type(v)
    if t == 'table' then
        if v[1] ~= nil or #v > 0 then
            local parts = {}
            for i=1,#v do parts[#parts+1] = __str(v[i]) end
            local body = '['..table.concat(parts, ' ')..']'
            if v.__name then return v.__name..' '..body end
            return body
        else
            local keys = {}
            for k in pairs(v) do if k ~= '__name' then keys[#keys+1] = k end end
            table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
            local parts = {}
            for _,k in ipairs(keys) do
                local val = v[k]
                local vs
                if type(val) == 'string' then
                    vs = string.format('%q', val)
                else
                    vs = __str(val)
                end
                parts[#parts+1] = k..': '..vs
            end
            local body = '{'..table.concat(parts, ', ')..'}'
            if v.__name then return v.__name..' '..body end
            return body
        end
    else
        if t == 'boolean' then return (v and '1' or '0') end
        return tostring(v)
    end
end
function __union(a, b)
    local res = {}
    local function add(lst)
        if lst then
            for _, v in ipairs(lst) do
                local dup = false
                for _, w in ipairs(res) do
                    if v == w then dup = true break end
                end
                if not dup then res[#res+1] = v end
            end
        end
    end
    add(a); add(b);
    return res
end
function __union_all(a, b)
    local res = {}
    if a then for _, v in ipairs(a) do res[#res+1] = v end end
    if b then for _, v in ipairs(b) do res[#res+1] = v end end
    return res
end
(function(_l0) local p={} for i=1,#_l0 do p[#p+1]=__str(_l0[i]) end print(table.concat(p, ' ')) end)(__union({1, 2}, {2, 3}))
(function(_l1) local p={} for i=1,#_l1 do p[#p+1]=__str(_l1[i]) end print(table.concat(p, ' ')) end)(__except({1, 2, 3}, {2}))
(function(_l2) local p={} for i=1,#_l2 do p[#p+1]=__str(_l2[i]) end print(table.concat(p, ' ')) end)(__intersect({1, 2, 3}, {2, 4}))
print(__str(#__union_all({1, 2}, {2, 3})))
