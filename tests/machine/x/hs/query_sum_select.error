
/workspace/mochi/tests/machine/x/hs/query_sum_select.hs:105:9: error:
    • Ambiguous type variables ‘t0’, ‘a0’ arising from the literal ‘1’
      prevents the constraint ‘(Num (t0 a0))’ from being solved.
      Relevant bindings include
        nums :: [t0 a0]
          (bound at /workspace/mochi/tests/machine/x/hs/query_sum_select.hs:105:1)
      Probable fix: use a type annotation to specify what ‘t0’,
                                                          ‘a0’ should be.
      one instance involving out-of-scope types
      (use -fprint-potential-instances to see them all)
    • In the expression: 1
      In the expression: [1, 2, 3]
      In an equation for ‘nums’: nums = [1, 2, 3]
    |
105 | nums = [1, 2, 3]
    |         ^

/workspace/mochi/tests/machine/x/hs/query_sum_select.hs:107:11: error:
    • Ambiguous type variable ‘t0’ arising from a use of ‘sum’
      prevents the constraint ‘(Foldable t0)’ from being solved.
      Relevant bindings include
        n :: t0 a0
          (bound at /workspace/mochi/tests/machine/x/hs/query_sum_select.hs:107:19)
      Probable fix: use a type annotation to specify what ‘t0’ should be.
      Potentially matching instances:
        instance Foldable (Either a) -- Defined in ‘Data.Foldable’
        instance Foldable (Map.Map k) -- Defined in ‘Data.Map.Internal’
        ...plus four others
        ...plus 26 instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    • In the expression: sum n
      In the expression: [sum n | n <- filter (\ n -> (n > 1)) nums]
      In an equation for ‘result’:
          result = [sum n | n <- filter (\ n -> (n > 1)) nums]
    |
107 | result = [sum n | n <- filter (\n -> (n > 1)) nums]
    |           ^^^

/workspace/mochi/tests/machine/x/hs/query_sum_select.hs:107:41: error:
    • Ambiguous type variables ‘t0’, ‘a0’ arising from a use of ‘>’
      prevents the constraint ‘(Ord (t0 a0))’ from being solved.
      Relevant bindings include
        n :: t0 a0
          (bound at /workspace/mochi/tests/machine/x/hs/query_sum_select.hs:107:33)
        result :: [a0]
          (bound at /workspace/mochi/tests/machine/x/hs/query_sum_select.hs:107:1)
      Probable fix: use a type annotation to specify what ‘t0’,
                                                          ‘a0’ should be.
      Potentially matching instances:
        instance (Ord k, Ord v) => Ord (Map.Map k v)
          -- Defined in ‘Data.Map.Internal’
        instance Ord a => Ord (Maybe a) -- Defined in ‘GHC.Maybe’
        ...plus 16 others
        ...plus two instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    • In the expression: n > 1
      In the first argument of ‘filter’, namely ‘(\ n -> (n > 1))’
      In the expression: filter (\ n -> (n > 1)) nums
    |
107 | result = [sum n | n <- filter (\n -> (n > 1)) nums]
    |                                         ^

/workspace/mochi/tests/machine/x/hs/query_sum_select.hs:107:43: error:
    • Ambiguous type variables ‘t0’, ‘a0’ arising from the literal ‘1’
      prevents the constraint ‘(Num (t0 a0))’ from being solved.
      Relevant bindings include
        n :: t0 a0
          (bound at /workspace/mochi/tests/machine/x/hs/query_sum_select.hs:107:33)
        result :: [a0]
          (bound at /workspace/mochi/tests/machine/x/hs/query_sum_select.hs:107:1)
      Probable fix: use a type annotation to specify what ‘t0’,
                                                          ‘a0’ should be.
      one instance involving out-of-scope types
      (use -fprint-potential-instances to see them all)
    • In the second argument of ‘(>)’, namely ‘1’
      In the expression: n > 1
      In the first argument of ‘filter’, namely ‘(\ n -> (n > 1))’
    |
107 | result = [sum n | n <- filter (\n -> (n > 1)) nums]
    |                                           ^

/workspace/mochi/tests/machine/x/hs/query_sum_select.hs:111:3: error:
    • Ambiguous type variable ‘a0’ arising from a use of ‘print’
      prevents the constraint ‘(Show a0)’ from being solved.
      Probable fix: use a type annotation to specify what ‘a0’ should be.
      Potentially matching instances:
        instance (Show k, Show a) => Show (Map.Map k a)
          -- Defined in ‘Data.Map.Internal’
        instance Show Ordering -- Defined in ‘GHC.Show’
        ...plus 27 others
        ...plus 16 instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    • In a stmt of a 'do' block: print (result)
      In the expression: do print (result)
      In an equation for ‘main’: main = do print (result)
    |
111 |   print (result)
    |   ^^^^^


Context around line 105:
  103|            in map row (drop start ls)
  104| 
  105| nums = [1, 2, 3]
  106| 
  107| result = [sum n | n <- filter (\n -> (n > 1)) nums]
