-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)
import Data.Time.Clock.POSIX (getPOSIXTime)
import GHC.Generics (Generic)

data Tree
  = Leaf
  | Node {left :: (), value :: Int, right :: ()}
  deriving (Eq, Show, Generic)

sum_tree :: () -> Int
sum_tree t = 0

t = Node {left = Leaf, value = 1, right = Node {left = Leaf, value = 2, right = Leaf}}

main :: IO ()
main = do
  print (sum_tree t)
