
/workspace/mochi/tests/machine/x/hs/group_by.hs:186:35: error:
    • Couldn't match expected type: t0 -> Maybe AnyValue -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a0 -> Maybe a0 -> a0) -> [Char]’ has only one
      In the expression:
        show fromMaybe (error "missing") (Map.lookup "city" s)
      In the first argument of ‘unwords’, namely
        ‘[show fromMaybe (error "missing") (Map.lookup "city" s),
          ": count =",
          show fromMaybe (error "missing") (Map.lookup "count" s),
          ", avg_age =", ....]’
    |
186 |   mapM_ (\s -> putStrLn (unwords [show fromMaybe (error "missing") (Map.lookup "city" s), ": count =", show fromMaybe (error "missing") (Map.lookup "count" s), ", avg_age =", show fromMaybe (error "missing") (Map.lookup "avg_age" s)])) stats
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/workspace/mochi/tests/machine/x/hs/group_by.hs:186:104: error:
    • Couldn't match expected type: t1 -> Maybe AnyValue -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a1 -> Maybe a1 -> a1) -> [Char]’ has only one
      In the expression:
        show fromMaybe (error "missing") (Map.lookup "count" s)
      In the first argument of ‘unwords’, namely
        ‘[show fromMaybe (error "missing") (Map.lookup "city" s),
          ": count =",
          show fromMaybe (error "missing") (Map.lookup "count" s),
          ", avg_age =", ....]’
    |
186 |   mapM_ (\s -> putStrLn (unwords [show fromMaybe (error "missing") (Map.lookup "city" s), ": count =", show fromMaybe (error "missing") (Map.lookup "count" s), ", avg_age =", show fromMaybe (error "missing") (Map.lookup "avg_age" s)])) stats
    |                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/workspace/mochi/tests/machine/x/hs/group_by.hs:186:176: error:
    • Couldn't match expected type: t2 -> Maybe AnyValue -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a2 -> Maybe a2 -> a2) -> [Char]’ has only one
      In the expression:
        show fromMaybe (error "missing") (Map.lookup "avg_age" s)
      In the first argument of ‘unwords’, namely
        ‘[show fromMaybe (error "missing") (Map.lookup "city" s),
          ": count =",
          show fromMaybe (error "missing") (Map.lookup "count" s),
          ", avg_age =", ....]’
    |
186 |   mapM_ (\s -> putStrLn (unwords [show fromMaybe (error "missing") (Map.lookup "city" s), ": count =", show fromMaybe (error "missing") (Map.lookup "count" s), ", avg_age =", show fromMaybe (error "missing") (Map.lookup "avg_age" s)])) stats
    |                                                                                                                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Context around line 186:
  184| main = do
  185|   putStrLn ("--- People grouped by city ---")
  186|   mapM_ (\s -> putStrLn (unwords [show fromMaybe (error "missing") (Map.lookup "city" s), ": count =", show fromMaybe (error "missing") (Map.lookup "count" s), ", avg_age =", show fromMaybe (error "missing") (Map.lookup "avg_age" s)])) stats
  187| 
