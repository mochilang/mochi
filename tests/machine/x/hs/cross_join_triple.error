
/workspace/mochi/tests/machine/x/hs/cross_join_triple.hs:190:35: error:
    • Couldn't match expected type: t0 -> Maybe AnyValue -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a0 -> Maybe a0 -> a0) -> [Char]’ has only one
      In the expression:
        show fromMaybe (error "missing") (Map.lookup "n" c)
      In the first argument of ‘unwords’, namely
        ‘[show fromMaybe (error "missing") (Map.lookup "n" c),
          show fromMaybe (error "missing") (Map.lookup "l" c),
          show fromMaybe (error "missing") (Map.lookup "b" c)]’
    |
190 |   mapM_ (\c -> putStrLn (unwords [show fromMaybe (error "missing") (Map.lookup "n" c), show fromMaybe (error "missing") (Map.lookup "l" c), show fromMaybe (error "missing") (Map.lookup "b" c)])) combos
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/workspace/mochi/tests/machine/x/hs/cross_join_triple.hs:190:88: error:
    • Couldn't match expected type: t1 -> Maybe AnyValue -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a1 -> Maybe a1 -> a1) -> [Char]’ has only one
      In the expression:
        show fromMaybe (error "missing") (Map.lookup "l" c)
      In the first argument of ‘unwords’, namely
        ‘[show fromMaybe (error "missing") (Map.lookup "n" c),
          show fromMaybe (error "missing") (Map.lookup "l" c),
          show fromMaybe (error "missing") (Map.lookup "b" c)]’
    |
190 |   mapM_ (\c -> putStrLn (unwords [show fromMaybe (error "missing") (Map.lookup "n" c), show fromMaybe (error "missing") (Map.lookup "l" c), show fromMaybe (error "missing") (Map.lookup "b" c)])) combos
    |                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/workspace/mochi/tests/machine/x/hs/cross_join_triple.hs:190:141: error:
    • Couldn't match expected type: t2 -> Maybe AnyValue -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a2 -> Maybe a2 -> a2) -> [Char]’ has only one
      In the expression:
        show fromMaybe (error "missing") (Map.lookup "b" c)
      In the first argument of ‘unwords’, namely
        ‘[show fromMaybe (error "missing") (Map.lookup "n" c),
          show fromMaybe (error "missing") (Map.lookup "l" c),
          show fromMaybe (error "missing") (Map.lookup "b" c)]’
    |
190 |   mapM_ (\c -> putStrLn (unwords [show fromMaybe (error "missing") (Map.lookup "n" c), show fromMaybe (error "missing") (Map.lookup "l" c), show fromMaybe (error "missing") (Map.lookup "b" c)])) combos
    |                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Context around line 190:
  188| main = do
  189|   putStrLn ("--- Cross Join of three lists ---")
  190|   mapM_ (\c -> putStrLn (unwords [show fromMaybe (error "missing") (Map.lookup "n" c), show fromMaybe (error "missing") (Map.lookup "l" c), show fromMaybe (error "missing") (Map.lookup "b" c)])) combos
  191| 
