
/workspace/mochi/tests/machine/x/hs/map_assign.hs:16:16: error:
    • No instance for (Num (Map.Map String a0))
        arising from the literal ‘2’
    • In the expression: 2
      In an equation for ‘scores’: scores = 2
      In the expression:
        do let scores = 2
           print (fromMaybe (error "missing") (Map.lookup "bob" scores))
   |
16 |   let scores = 2
   |                ^

/workspace/mochi/tests/machine/x/hs/map_assign.hs:17:3: error:
    • Ambiguous type variable ‘a0’ arising from a use of ‘print’
      prevents the constraint ‘(Show a0)’ from being solved.
      Relevant bindings include
        scores :: Map.Map String a0
          (bound at /workspace/mochi/tests/machine/x/hs/map_assign.hs:16:7)
      Probable fix: use a type annotation to specify what ‘a0’ should be.
      Potentially matching instances:
        instance (Show k, Show a) => Show (Map.Map k a)
          -- Defined in ‘Data.Map.Internal’
        instance Show Ordering -- Defined in ‘GHC.Show’
        ...plus 26 others
        ...plus 12 instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    • In a stmt of a 'do' block:
        print (fromMaybe (error "missing") (Map.lookup "bob" scores))
      In the expression:
        do let scores = 2
           print (fromMaybe (error "missing") (Map.lookup "bob" scores))
      In an equation for ‘main’:
          main
            = do let scores = ...
                 print (fromMaybe (error "missing") (Map.lookup "bob" scores))
   |
17 |   print (fromMaybe (error "missing") (Map.lookup "bob" scores))
   |   ^^^^^


Context around line 16:
   14| main :: IO ()
   15| main = do
   16|   let scores = 2
   17|   print (fromMaybe (error "missing") (Map.lookup "bob" scores))
   18| 
