
/workspace/mochi/tests/machine/x/hs/break_continue.hs:109:26: error:
    • Couldn't match expected type ‘IO b0’ with actual type ‘()’
    • In the first argument of ‘fromMaybe’, namely ‘()’
      In the expression:
        fromMaybe
          ()
          (case if ((n `mod` 2) == 0) then Nothing else Nothing of
             Just v -> Just v
             Nothing
               -> case if (n > 7) then Just () else Nothing of
                    Just v -> Just v
                    Nothing -> (let _ = ... in Nothing))
      In the first argument of ‘mapM_’, namely
        ‘(\ n
            -> fromMaybe
                 ()
                 (case if ((n `mod` 2) == 0) then Nothing else Nothing of
                    Just v -> Just v
                    Nothing
                      -> case if (n > 7) then Just () else Nothing of
                           Just v -> Just v
                           Nothing -> (let ... in Nothing)))’
    |
109 |   mapM_ (\n -> fromMaybe () (case if ((n `mod` 2) == 0) then Nothing else Nothing of Just v -> Just v; Nothing -> case if (n > 7) then Just () else Nothing of Just v -> Just v; Nothing -> (let _ = putStrLn (unwords ["odd number:", show n]) in Nothing))) numbers
    |                          ^^

/workspace/mochi/tests/machine/x/hs/break_continue.hs:109:175: error:
    • Couldn't match expected type ‘IO b0’ with actual type ‘()’
    • In the first argument of ‘Just’, namely ‘v’
      In the expression: Just v
      In a case alternative: Just v -> Just v
    |
109 |   mapM_ (\n -> fromMaybe () (case if ((n `mod` 2) == 0) then Nothing else Nothing of Just v -> Just v; Nothing -> case if (n > 7) then Just () else Nothing of Just v -> Just v; Nothing -> (let _ = putStrLn (unwords ["odd number:", show n]) in Nothing))) numbers
    |                                                                                                                                                                               ^


Context around line 109:
  107| main :: IO ()
  108| main = do
  109|   mapM_ (\n -> fromMaybe () (case if ((n `mod` 2) == 0) then Nothing else Nothing of Just v -> Just v; Nothing -> case if (n > 7) then Just () else Nothing of Just v -> Just v; Nothing -> (let _ = putStrLn (unwords ["odd number:", show n]) in Nothing))) numbers
  110| 
