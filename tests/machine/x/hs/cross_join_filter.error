
/workspace/mochi/tests/machine/x/hs/cross_join_filter.hs:109:30: error:
    Data constructor not in scope: VInt :: a3 -> a
    |
109 | pairs = [Map.fromList [("n", VInt (n)), ("l", VString (l))] | n <- nums, l <- letters, ((n `mod` 2) == 0)]
    |                              ^^^^

/workspace/mochi/tests/machine/x/hs/cross_join_filter.hs:109:47: error:
    Data constructor not in scope: VString :: String -> a
    |
109 | pairs = [Map.fromList [("n", VInt (n)), ("l", VString (l))] | n <- nums, l <- letters, ((n `mod` 2) == 0)]
    |                                               ^^^^^^^

/workspace/mochi/tests/machine/x/hs/cross_join_filter.hs:114:35: error:
    • Couldn't match expected type: t0 -> Maybe a0 -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a1 -> Maybe a1 -> a1) -> [Char]’ has only one
      In the expression:
        show fromMaybe (error "missing") (Map.lookup "n" p)
      In the first argument of ‘unwords’, namely
        ‘[show fromMaybe (error "missing") (Map.lookup "n" p),
          show fromMaybe (error "missing") (Map.lookup "l" p)]’
    • Relevant bindings include
        p :: Map.Map String a0
          (bound at /workspace/mochi/tests/machine/x/hs/cross_join_filter.hs:114:11)
    |
114 |   mapM_ (\p -> putStrLn (unwords [show fromMaybe (error "missing") (Map.lookup "n" p), show fromMaybe (error "missing") (Map.lookup "l" p)])) pairs
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/workspace/mochi/tests/machine/x/hs/cross_join_filter.hs:114:88: error:
    • Couldn't match expected type: t1 -> Maybe a0 -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a2 -> Maybe a2 -> a2) -> [Char]’ has only one
      In the expression:
        show fromMaybe (error "missing") (Map.lookup "l" p)
      In the first argument of ‘unwords’, namely
        ‘[show fromMaybe (error "missing") (Map.lookup "n" p),
          show fromMaybe (error "missing") (Map.lookup "l" p)]’
    • Relevant bindings include
        p :: Map.Map String a0
          (bound at /workspace/mochi/tests/machine/x/hs/cross_join_filter.hs:114:11)
    |
114 |   mapM_ (\p -> putStrLn (unwords [show fromMaybe (error "missing") (Map.lookup "n" p), show fromMaybe (error "missing") (Map.lookup "l" p)])) pairs
    |                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Context around line 109:
  107| letters = ["A", "B"]
  108| 
  109| pairs = [Map.fromList [("n", VInt (n)), ("l", VString (l))] | n <- nums, l <- letters, ((n `mod` 2) == 0)]
  110| 
  111| main :: IO ()
