
/workspace/mochi/tests/machine/x/hs/left_join.hs:105:35: error:
    Data constructor not in scope: VInt :: t4 -> a
    |
105 | customers = [Map.fromList [("id", VInt (1)), ("name", VString ("Alice"))], Map.fromList [("id", VInt (2)), ("name", VString ("Bob"))]]
    |                                   ^^^^

/workspace/mochi/tests/machine/x/hs/left_join.hs:105:55: error:
    Data constructor not in scope: VString :: String -> a
    |
105 | customers = [Map.fromList [("id", VInt (1)), ("name", VString ("Alice"))], Map.fromList [("id", VInt (2)), ("name", VString ("Bob"))]]
    |                                                       ^^^^^^^

/workspace/mochi/tests/machine/x/hs/left_join.hs:105:97: error:
    Data constructor not in scope: VInt :: t3 -> a
    |
105 | customers = [Map.fromList [("id", VInt (1)), ("name", VString ("Alice"))], Map.fromList [("id", VInt (2)), ("name", VString ("Bob"))]]
    |                                                                                                 ^^^^

/workspace/mochi/tests/machine/x/hs/left_join.hs:105:117: error:
    Data constructor not in scope: VString :: String -> a
    |
105 | customers = [Map.fromList [("id", VInt (1)), ("name", VString ("Alice"))], Map.fromList [("id", VInt (2)), ("name", VString ("Bob"))]]
    |                                                                                                                     ^^^^^^^

/workspace/mochi/tests/machine/x/hs/left_join.hs:109:37: error:
    Data constructor not in scope: VInt :: a4 -> a
    |
109 | result = [Map.fromList [("orderId", VInt (fromMaybe (error "missing") (Map.lookup "id" o))), ("customer", VString (c)), ("total", VInt (fromMaybe (error "missing") (Map.lookup "total" o)))] | o <- orders, c <- customers, (fromMaybe (error "missing") (Map.lookup "customerId" (o)) == fromMaybe (error "missing") (Map.lookup "id" (c)))]
    |                                     ^^^^

/workspace/mochi/tests/machine/x/hs/left_join.hs:109:107: error:
    Data constructor not in scope: VString :: Map.Map String a4 -> a
    |
109 | result = [Map.fromList [("orderId", VInt (fromMaybe (error "missing") (Map.lookup "id" o))), ("customer", VString (c)), ("total", VInt (fromMaybe (error "missing") (Map.lookup "total" o)))] | o <- orders, c <- customers, (fromMaybe (error "missing") (Map.lookup "customerId" (o)) == fromMaybe (error "missing") (Map.lookup "id" (c)))]
    |                                                                                                           ^^^^^^^

/workspace/mochi/tests/machine/x/hs/left_join.hs:109:131: error:
    Data constructor not in scope: VInt :: a4 -> a
    |
109 | result = [Map.fromList [("orderId", VInt (fromMaybe (error "missing") (Map.lookup "id" o))), ("customer", VString (c)), ("total", VInt (fromMaybe (error "missing") (Map.lookup "total" o)))] | o <- orders, c <- customers, (fromMaybe (error "missing") (Map.lookup "customerId" (o)) == fromMaybe (error "missing") (Map.lookup "id" (c)))]
    |                                                                                                                                   ^^^^

/workspace/mochi/tests/machine/x/hs/left_join.hs:114:48: error:
    • Couldn't match expected type: t0 -> Maybe a0 -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a1 -> Maybe a1 -> a1) -> [Char]’ has only one
      In the expression:
        show fromMaybe (error "missing") (Map.lookup "orderId" entry)
      In the first argument of ‘unwords’, namely
        ‘["Order",
          show fromMaybe (error "missing") (Map.lookup "orderId" entry),
          "customer",
          show fromMaybe (error "missing") (Map.lookup "customer" entry),
          ....]’
    • Relevant bindings include
        entry :: Map.Map String a0
          (bound at /workspace/mochi/tests/machine/x/hs/left_join.hs:114:11)
    |
114 |   mapM_ (\entry -> putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "orderId" entry), "customer", show fromMaybe (error "missing") (Map.lookup "customer" entry), "total", show fromMaybe (error "missing") (Map.lookup "total" entry)])) result
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/workspace/mochi/tests/machine/x/hs/left_join.hs:114:123: error:
    • Couldn't match expected type: t1 -> Maybe a0 -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a2 -> Maybe a2 -> a2) -> [Char]’ has only one
      In the expression:
        show fromMaybe (error "missing") (Map.lookup "customer" entry)
      In the first argument of ‘unwords’, namely
        ‘["Order",
          show fromMaybe (error "missing") (Map.lookup "orderId" entry),
          "customer",
          show fromMaybe (error "missing") (Map.lookup "customer" entry),
          ....]’
    • Relevant bindings include
        entry :: Map.Map String a0
          (bound at /workspace/mochi/tests/machine/x/hs/left_join.hs:114:11)
    |
114 |   mapM_ (\entry -> putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "orderId" entry), "customer", show fromMaybe (error "missing") (Map.lookup "customer" entry), "total", show fromMaybe (error "missing") (Map.lookup "total" entry)])) result
    |                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/workspace/mochi/tests/machine/x/hs/left_join.hs:114:196: error:
    • Couldn't match expected type: t2 -> Maybe a0 -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a3 -> Maybe a3 -> a3) -> [Char]’ has only one
      In the expression:
        show fromMaybe (error "missing") (Map.lookup "total" entry)
      In the first argument of ‘unwords’, namely
        ‘["Order",
          show fromMaybe (error "missing") (Map.lookup "orderId" entry),
          "customer",
          show fromMaybe (error "missing") (Map.lookup "customer" entry),
          ....]’
    • Relevant bindings include
        entry :: Map.Map String a0
          (bound at /workspace/mochi/tests/machine/x/hs/left_join.hs:114:11)
    |
114 |   mapM_ (\entry -> putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "orderId" entry), "customer", show fromMaybe (error "missing") (Map.lookup "customer" entry), "total", show fromMaybe (error "missing") (Map.lookup "total" entry)])) result
    |                                                                                                                                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Context around line 105:
  103|            in map row (drop start ls)
  104| 
  105| customers = [Map.fromList [("id", VInt (1)), ("name", VString ("Alice"))], Map.fromList [("id", VInt (2)), ("name", VString ("Bob"))]]
  106| 
  107| orders = [Map.fromList [("id", 100), ("customerId", 1), ("total", 250)], Map.fromList [("id", 101), ("customerId", 3), ("total", 80)]]
