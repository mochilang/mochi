-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isInfixOf, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)
import Data.Time.Clock.POSIX (getPOSIXTime)

boom :: Int -> Int -> Bool
boom a b = fromMaybe (False) $
  case (let _ = putStrLn ("boom") in Nothing) of Just v -> Just v; Nothing -> Just (True)

main :: IO ()
main = do
  print ((False && boom 1 2))
  print ((True || boom 1 2))
