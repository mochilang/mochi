
/workspace/mochi/tests/machine/x/hs/outer_join.hs:105:35: error:
    Data constructor not in scope: VInt :: t3 -> a
    |
105 | customers = [Map.fromList [("id", VInt (1)), ("name", VString ("Alice"))], Map.fromList [("id", VInt (2)), ("name", VString ("Bob"))], Map.fromList [("id", VInt (3)), ("name", VString ("Charlie"))], Map.fromList [("id", VInt (4)), ("name", VString ("Diana"))]]
    |                                   ^^^^

/workspace/mochi/tests/machine/x/hs/outer_join.hs:105:55: error:
    Data constructor not in scope: VString :: String -> a
    |
105 | customers = [Map.fromList [("id", VInt (1)), ("name", VString ("Alice"))], Map.fromList [("id", VInt (2)), ("name", VString ("Bob"))], Map.fromList [("id", VInt (3)), ("name", VString ("Charlie"))], Map.fromList [("id", VInt (4)), ("name", VString ("Diana"))]]
    |                                                       ^^^^^^^

/workspace/mochi/tests/machine/x/hs/outer_join.hs:105:97: error:
    Data constructor not in scope: VInt :: t2 -> a
    |
105 | customers = [Map.fromList [("id", VInt (1)), ("name", VString ("Alice"))], Map.fromList [("id", VInt (2)), ("name", VString ("Bob"))], Map.fromList [("id", VInt (3)), ("name", VString ("Charlie"))], Map.fromList [("id", VInt (4)), ("name", VString ("Diana"))]]
    |                                                                                                 ^^^^

/workspace/mochi/tests/machine/x/hs/outer_join.hs:105:117: error:
    Data constructor not in scope: VString :: String -> a
    |
105 | customers = [Map.fromList [("id", VInt (1)), ("name", VString ("Alice"))], Map.fromList [("id", VInt (2)), ("name", VString ("Bob"))], Map.fromList [("id", VInt (3)), ("name", VString ("Charlie"))], Map.fromList [("id", VInt (4)), ("name", VString ("Diana"))]]
    |                                                                                                                     ^^^^^^^

/workspace/mochi/tests/machine/x/hs/outer_join.hs:105:157: error:
    Data constructor not in scope: VInt :: t1 -> a
    |
105 | customers = [Map.fromList [("id", VInt (1)), ("name", VString ("Alice"))], Map.fromList [("id", VInt (2)), ("name", VString ("Bob"))], Map.fromList [("id", VInt (3)), ("name", VString ("Charlie"))], Map.fromList [("id", VInt (4)), ("name", VString ("Diana"))]]
    |                                                                                                                                                             ^^^^

/workspace/mochi/tests/machine/x/hs/outer_join.hs:105:177: error:
    Data constructor not in scope: VString :: String -> a
    |
105 | customers = [Map.fromList [("id", VInt (1)), ("name", VString ("Alice"))], Map.fromList [("id", VInt (2)), ("name", VString ("Bob"))], Map.fromList [("id", VInt (3)), ("name", VString ("Charlie"))], Map.fromList [("id", VInt (4)), ("name", VString ("Diana"))]]
    |                                                                                                                                                                                 ^^^^^^^

/workspace/mochi/tests/machine/x/hs/outer_join.hs:105:221: error:
    Data constructor not in scope: VInt :: t0 -> a
    |
105 | customers = [Map.fromList [("id", VInt (1)), ("name", VString ("Alice"))], Map.fromList [("id", VInt (2)), ("name", VString ("Bob"))], Map.fromList [("id", VInt (3)), ("name", VString ("Charlie"))], Map.fromList [("id", VInt (4)), ("name", VString ("Diana"))]]
    |                                                                                                                                                                                                                             ^^^^

/workspace/mochi/tests/machine/x/hs/outer_join.hs:105:241: error:
    Data constructor not in scope: VString :: String -> a
    |
105 | customers = [Map.fromList [("id", VInt (1)), ("name", VString ("Alice"))], Map.fromList [("id", VInt (2)), ("name", VString ("Bob"))], Map.fromList [("id", VInt (3)), ("name", VString ("Charlie"))], Map.fromList [("id", VInt (4)), ("name", VString ("Diana"))]]
    |                                                                                                                                                                                                                                                 ^^^^^^^

/workspace/mochi/tests/machine/x/hs/outer_join.hs:109:35: error:
    Data constructor not in scope: VString :: Map.Map String a0 -> a
    |
109 | result = [Map.fromList [("order", VString (o)), ("customer", VString (c))] | o <- orders, c <- customers, (fromMaybe (error "missing") (Map.lookup "customerId" (o)) == fromMaybe (error "missing") (Map.lookup "id" (c)))]
    |                                   ^^^^^^^

/workspace/mochi/tests/machine/x/hs/outer_join.hs:109:62: error:
    Data constructor not in scope: VString :: Map.Map String a0 -> a
    |
109 | result = [Map.fromList [("order", VString (o)), ("customer", VString (c))] | o <- orders, c <- customers, (fromMaybe (error "missing") (Map.lookup "customerId" (o)) == fromMaybe (error "missing") (Map.lookup "id" (c)))]
    |                                                              ^^^^^^^

/workspace/mochi/tests/machine/x/hs/outer_join.hs:114:28: error:
    • Couldn't match expected type ‘IO b0’ with actual type ‘()’
    • In the first argument of ‘fromMaybe’, namely ‘()’
      In the expression:
        fromMaybe
          ()
          (if fromMaybe (error "missing") (Map.lookup "order" row) then
               if fromMaybe (error "missing") (Map.lookup "customer" row) then
                   (let _ = putStrLn (unwords [...]) in Nothing)
               else
                   (let _ = putStrLn (unwords [...]) in Nothing)
           else
               (let _ = putStrLn (unwords ["Customer", ....]) in Nothing))
      In the first argument of ‘mapM_’, namely
        ‘(\ row
            -> fromMaybe
                 ()
                 (if fromMaybe (error "missing") (Map.lookup "order" row) then
                      if fromMaybe (error "missing") (Map.lookup "customer" row) then
                          (let _ = putStrLn (unwords ...) in Nothing)
                      else
                          (let _ = putStrLn (unwords ...) in Nothing)
                  else
                      (let _ = putStrLn (unwords [...]) in Nothing)))’
    |
114 |   mapM_ (\row -> fromMaybe () (if fromMaybe (error "missing") (Map.lookup "order" row) then if fromMaybe (error "missing") (Map.lookup "customer" row) then (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", "Unknown", "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Customer", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "has no orders"]) in Nothing))) result
    |                            ^^

/workspace/mochi/tests/machine/x/hs/outer_join.hs:114:194: error:
    • Couldn't match expected type: t4 -> t6 -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a7 -> Maybe a7 -> a7) -> [Char]’ has only one
      In the expression:
        show
          fromMaybe (error "missing")
          (Map.lookup
             "id" fromMaybe (error "missing") (Map.lookup "order" row))
      In the first argument of ‘unwords’, namely
        ‘["Order",
          show
            fromMaybe (error "missing")
            (Map.lookup
               "id" fromMaybe (error "missing") (Map.lookup "order" row)),
          "by",
          show
            fromMaybe (error "missing")
            (Map.lookup
               "name" fromMaybe (error "missing") (Map.lookup "customer" row)),
          ....]’
    |
114 |   mapM_ (\row -> fromMaybe () (if fromMaybe (error "missing") (Map.lookup "order" row) then if fromMaybe (error "missing") (Map.lookup "customer" row) then (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", "Unknown", "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Customer", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "has no orders"]) in Nothing))) result
    |                                                                                                                                                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/workspace/mochi/tests/machine/x/hs/outer_join.hs:114:228: error:
    • Couldn't match expected type: t5 -> Maybe Bool -> t6
                  with actual type: Maybe a2
    • The function ‘Map.lookup’ is applied to four value arguments,
        but its type ‘String -> Map.Map String a2 -> Maybe a2’ has only two
      In the third argument of ‘show’, namely
        ‘(Map.lookup
            "id" fromMaybe (error "missing") (Map.lookup "order" row))’
      In the expression:
        show
          fromMaybe (error "missing")
          (Map.lookup
             "id" fromMaybe (error "missing") (Map.lookup "order" row))
    |
114 |   mapM_ (\row -> fromMaybe () (if fromMaybe (error "missing") (Map.lookup "order" row) then if fromMaybe (error "missing") (Map.lookup "customer" row) then (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", "Unknown", "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Customer", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "has no orders"]) in Nothing))) result
    |                                                                                                                                                                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/workspace/mochi/tests/machine/x/hs/outer_join.hs:114:244: error:
    • Couldn't match expected type: Map.Map String a2
                  with actual type: a1 -> Maybe a1 -> a1
    • Probable cause: ‘fromMaybe’ is applied to too few arguments
      In the second argument of ‘Map.lookup’, namely ‘fromMaybe’
      In the third argument of ‘show’, namely
        ‘(Map.lookup
            "id" fromMaybe (error "missing") (Map.lookup "order" row))’
      In the expression:
        show
          fromMaybe (error "missing")
          (Map.lookup
             "id" fromMaybe (error "missing") (Map.lookup "order" row))
    |
114 |   mapM_ (\row -> fromMaybe () (if fromMaybe (error "missing") (Map.lookup "order" row) then if fromMaybe (error "missing") (Map.lookup "customer" row) then (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", "Unknown", "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Customer", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "has no orders"]) in Nothing))) result
    |                                                                                                                                                                                                                                                    ^^^^^^^^^

/workspace/mochi/tests/machine/x/hs/outer_join.hs:114:305: error:
    • Couldn't match expected type: t7 -> t9 -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a8 -> Maybe a8 -> a8) -> [Char]’ has only one
      In the expression:
        show
          fromMaybe (error "missing")
          (Map.lookup
             "name" fromMaybe (error "missing") (Map.lookup "customer" row))
      In the first argument of ‘unwords’, namely
        ‘["Order",
          show
            fromMaybe (error "missing")
            (Map.lookup
               "id" fromMaybe (error "missing") (Map.lookup "order" row)),
          "by",
          show
            fromMaybe (error "missing")
            (Map.lookup
               "name" fromMaybe (error "missing") (Map.lookup "customer" row)),
          ....]’
    |
114 |   mapM_ (\row -> fromMaybe () (if fromMaybe (error "missing") (Map.lookup "order" row) then if fromMaybe (error "missing") (Map.lookup "customer" row) then (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", "Unknown", "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Customer", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "has no orders"]) in Nothing))) result
    |                                                                                                                                                                                                                                                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/workspace/mochi/tests/machine/x/hs/outer_join.hs:114:339: error:
    • Couldn't match expected type: t8 -> Maybe Bool -> t9
                  with actual type: Maybe a4
    • The function ‘Map.lookup’ is applied to four value arguments,
        but its type ‘String -> Map.Map String a4 -> Maybe a4’ has only two
      In the third argument of ‘show’, namely
        ‘(Map.lookup
            "name" fromMaybe (error "missing") (Map.lookup "customer" row))’
      In the expression:
        show
          fromMaybe (error "missing")
          (Map.lookup
             "name" fromMaybe (error "missing") (Map.lookup "customer" row))
    |
114 |   mapM_ (\row -> fromMaybe () (if fromMaybe (error "missing") (Map.lookup "order" row) then if fromMaybe (error "missing") (Map.lookup "customer" row) then (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", "Unknown", "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Customer", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "has no orders"]) in Nothing))) result
    |                                                                                                                                                                                                                                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/workspace/mochi/tests/machine/x/hs/outer_join.hs:114:357: error:
    • Couldn't match expected type: Map.Map String a4
                  with actual type: a3 -> Maybe a3 -> a3
    • Probable cause: ‘fromMaybe’ is applied to too few arguments
      In the second argument of ‘Map.lookup’, namely ‘fromMaybe’
      In the third argument of ‘show’, namely
        ‘(Map.lookup
            "name" fromMaybe (error "missing") (Map.lookup "customer" row))’
      In the expression:
        show
          fromMaybe (error "missing")
          (Map.lookup
             "name" fromMaybe (error "missing") (Map.lookup "customer" row))
    |
114 |   mapM_ (\row -> fromMaybe () (if fromMaybe (error "missing") (Map.lookup "order" row) then if fromMaybe (error "missing") (Map.lookup "customer" row) then (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", "Unknown", "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Customer", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "has no orders"]) in Nothing))) result
    |                                                                                                                                                                                                                                                                                                                                                                     ^^^^^^^^^

/workspace/mochi/tests/machine/x/hs/outer_join.hs:114:422: error:
    • Couldn't match expected type: t10 -> t12 -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a9 -> Maybe a9 -> a9) -> [Char]’ has only one
      In the expression:
        show
          fromMaybe (error "missing")
          (Map.lookup
             "total" fromMaybe (error "missing") (Map.lookup "order" row))
      In the first argument of ‘unwords’, namely
        ‘["Order",
          show
            fromMaybe (error "missing")
            (Map.lookup
               "id" fromMaybe (error "missing") (Map.lookup "order" row)),
          "by",
          show
            fromMaybe (error "missing")
            (Map.lookup
               "name" fromMaybe (error "missing") (Map.lookup "customer" row)),
          ....]’
    |
114 |   mapM_ (\row -> fromMaybe () (if fromMaybe (error "missing") (Map.lookup "order" row) then if fromMaybe (error "missing") (Map.lookup "customer" row) then (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", "Unknown", "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Customer", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "has no orders"]) in Nothing))) result
    |                                                                                                                                                                                                                                                                                                                                                                                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/workspace/mochi/tests/machine/x/hs/outer_join.hs:114:456: error:
    • Couldn't match expected type: t11 -> Maybe Bool -> t12
                  with actual type: Maybe a6
    • The function ‘Map.lookup’ is applied to four value arguments,
        but its type ‘String -> Map.Map String a6 -> Maybe a6’ has only two
      In the third argument of ‘show’, namely
        ‘(Map.lookup
            "total" fromMaybe (error "missing") (Map.lookup "order" row))’
      In the expression:
        show
          fromMaybe (error "missing")
          (Map.lookup
             "total" fromMaybe (error "missing") (Map.lookup "order" row))
    |
114 |   mapM_ (\row -> fromMaybe () (if fromMaybe (error "missing") (Map.lookup "order" row) then if fromMaybe (error "missing") (Map.lookup "customer" row) then (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", "Unknown", "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Customer", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "has no orders"]) in Nothing))) result
    |

/workspace/mochi/tests/machine/x/hs/outer_join.hs:114:475: error:
    • Couldn't match expected type: Map.Map String a6
                  with actual type: a5 -> Maybe a5 -> a5
    • Probable cause: ‘fromMaybe’ is applied to too few arguments
      In the second argument of ‘Map.lookup’, namely ‘fromMaybe’
      In the third argument of ‘show’, namely
        ‘(Map.lookup
            "total" fromMaybe (error "missing") (Map.lookup "order" row))’
      In the expression:
        show
          fromMaybe (error "missing")
          (Map.lookup
             "total" fromMaybe (error "missing") (Map.lookup "order" row))
    |
114 |   mapM_ (\row -> fromMaybe () (if fromMaybe (error "missing") (Map.lookup "order" row) then if fromMaybe (error "missing") (Map.lookup "customer" row) then (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", "Unknown", "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Customer", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "has no orders"]) in Nothing))) result
    |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ^^^^^^^^^

/workspace/mochi/tests/machine/x/hs/outer_join.hs:114:585: error:
    • Couldn't match expected type: t13 -> t15 -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a14 -> Maybe a14 -> a14) -> [Char]’ has only one
      In the expression:
        show
          fromMaybe (error "missing")
          (Map.lookup
             "id" fromMaybe (error "missing") (Map.lookup "order" row))
      In the first argument of ‘unwords’, namely
        ‘["Order",
          show
            fromMaybe (error "missing")
            (Map.lookup
               "id" fromMaybe (error "missing") (Map.lookup "order" row)),
          "by", "Unknown", ....]’
    |
114 |   mapM_ (\row -> fromMaybe () (if fromMaybe (error "missing") (Map.lookup "order" row) then if fromMaybe (error "missing") (Map.lookup "customer" row) then (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", "Unknown", "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Customer", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "has no orders"]) in Nothing))) result
    |

/workspace/mochi/tests/machine/x/hs/outer_join.hs:114:619: error:
    • Couldn't match expected type: t14 -> Maybe Bool -> t15
                  with actual type: Maybe a11
    • The function ‘Map.lookup’ is applied to four value arguments,
        but its type ‘String -> Map.Map String a11 -> Maybe a11’
        has only two
      In the third argument of ‘show’, namely
        ‘(Map.lookup
            "id" fromMaybe (error "missing") (Map.lookup "order" row))’
      In the expression:
        show
          fromMaybe (error "missing")
          (Map.lookup
             "id" fromMaybe (error "missing") (Map.lookup "order" row))
    |
114 |   mapM_ (\row -> fromMaybe () (if fromMaybe (error "missing") (Map.lookup "order" row) then if fromMaybe (error "missing") (Map.lookup "customer" row) then (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", "Unknown", "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Customer", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "has no orders"]) in Nothing))) result
    |

/workspace/mochi/tests/machine/x/hs/outer_join.hs:114:635: error:
    • Couldn't match expected type: Map.Map String a11
                  with actual type: a10 -> Maybe a10 -> a10
    • Probable cause: ‘fromMaybe’ is applied to too few arguments
      In the second argument of ‘Map.lookup’, namely ‘fromMaybe’
      In the third argument of ‘show’, namely
        ‘(Map.lookup
            "id" fromMaybe (error "missing") (Map.lookup "order" row))’
      In the expression:
        show
          fromMaybe (error "missing")
          (Map.lookup
             "id" fromMaybe (error "missing") (Map.lookup "order" row))
    |
114 |   mapM_ (\row -> fromMaybe () (if fromMaybe (error "missing") (Map.lookup "order" row) then if fromMaybe (error "missing") (Map.lookup "customer" row) then (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", "Unknown", "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Customer", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "has no orders"]) in Nothing))) result
    |

/workspace/mochi/tests/machine/x/hs/outer_join.hs:114:714: error:
    • Couldn't match expected type: t16 -> t18 -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a15 -> Maybe a15 -> a15) -> [Char]’ has only one
      In the expression:
        show
          fromMaybe (error "missing")
          (Map.lookup
             "total" fromMaybe (error "missing") (Map.lookup "order" row))
      In the first argument of ‘unwords’, namely
        ‘["Order",
          show
            fromMaybe (error "missing")
            (Map.lookup
               "id" fromMaybe (error "missing") (Map.lookup "order" row)),
          "by", "Unknown", ....]’
    |
114 |   mapM_ (\row -> fromMaybe () (if fromMaybe (error "missing") (Map.lookup "order" row) then if fromMaybe (error "missing") (Map.lookup "customer" row) then (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", "Unknown", "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Customer", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "has no orders"]) in Nothing))) result
    |

/workspace/mochi/tests/machine/x/hs/outer_join.hs:114:748: error:
    • Couldn't match expected type: t17 -> Maybe Bool -> t18
                  with actual type: Maybe a13
    • The function ‘Map.lookup’ is applied to four value arguments,
        but its type ‘String -> Map.Map String a13 -> Maybe a13’
        has only two
      In the third argument of ‘show’, namely
        ‘(Map.lookup
            "total" fromMaybe (error "missing") (Map.lookup "order" row))’
      In the expression:
        show
          fromMaybe (error "missing")
          (Map.lookup
             "total" fromMaybe (error "missing") (Map.lookup "order" row))
    |
114 |   mapM_ (\row -> fromMaybe () (if fromMaybe (error "missing") (Map.lookup "order" row) then if fromMaybe (error "missing") (Map.lookup "customer" row) then (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", "Unknown", "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Customer", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "has no orders"]) in Nothing))) result
    |

/workspace/mochi/tests/machine/x/hs/outer_join.hs:114:767: error:
    • Couldn't match expected type: Map.Map String a13
                  with actual type: a12 -> Maybe a12 -> a12
    • Probable cause: ‘fromMaybe’ is applied to too few arguments
      In the second argument of ‘Map.lookup’, namely ‘fromMaybe’
      In the third argument of ‘show’, namely
        ‘(Map.lookup
            "total" fromMaybe (error "missing") (Map.lookup "order" row))’
      In the expression:
        show
          fromMaybe (error "missing")
          (Map.lookup
             "total" fromMaybe (error "missing") (Map.lookup "order" row))
    |
114 |   mapM_ (\row -> fromMaybe () (if fromMaybe (error "missing") (Map.lookup "order" row) then if fromMaybe (error "missing") (Map.lookup "customer" row) then (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", "Unknown", "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Customer", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "has no orders"]) in Nothing))) result
    |

/workspace/mochi/tests/machine/x/hs/outer_join.hs:114:880: error:
    • Couldn't match expected type: t19 -> t21 -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a18 -> Maybe a18 -> a18) -> [Char]’ has only one
      In the expression:
        show
          fromMaybe (error "missing")
          (Map.lookup
             "name" fromMaybe (error "missing") (Map.lookup "customer" row))
      In the first argument of ‘unwords’, namely
        ‘["Customer",
          show
            fromMaybe (error "missing")
            (Map.lookup
               "name" fromMaybe (error "missing") (Map.lookup "customer" row)),
          "has no orders"]’
    |
114 |   mapM_ (\row -> fromMaybe () (if fromMaybe (error "missing") (Map.lookup "order" row) then if fromMaybe (error "missing") (Map.lookup "customer" row) then (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", "Unknown", "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Customer", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "has no orders"]) in Nothing))) result
    |

/workspace/mochi/tests/machine/x/hs/outer_join.hs:114:914: error:
    • Couldn't match expected type: t20 -> Maybe Bool -> t21
                  with actual type: Maybe a17
    • The function ‘Map.lookup’ is applied to four value arguments,
        but its type ‘String -> Map.Map String a17 -> Maybe a17’
        has only two
      In the third argument of ‘show’, namely
        ‘(Map.lookup
            "name" fromMaybe (error "missing") (Map.lookup "customer" row))’
      In the expression:
        show
          fromMaybe (error "missing")
          (Map.lookup
             "name" fromMaybe (error "missing") (Map.lookup "customer" row))
    |
114 |   mapM_ (\row -> fromMaybe () (if fromMaybe (error "missing") (Map.lookup "order" row) then if fromMaybe (error "missing") (Map.lookup "customer" row) then (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", "Unknown", "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Customer", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "has no orders"]) in Nothing))) result
    |

/workspace/mochi/tests/machine/x/hs/outer_join.hs:114:932: error:
    • Couldn't match expected type: Map.Map String a17
                  with actual type: a16 -> Maybe a16 -> a16
    • Probable cause: ‘fromMaybe’ is applied to too few arguments
      In the second argument of ‘Map.lookup’, namely ‘fromMaybe’
      In the third argument of ‘show’, namely
        ‘(Map.lookup
            "name" fromMaybe (error "missing") (Map.lookup "customer" row))’
      In the expression:
        show
          fromMaybe (error "missing")
          (Map.lookup
             "name" fromMaybe (error "missing") (Map.lookup "customer" row))
    |
114 |   mapM_ (\row -> fromMaybe () (if fromMaybe (error "missing") (Map.lookup "order" row) then if fromMaybe (error "missing") (Map.lookup "customer" row) then (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "id" fromMaybe (error "missing") (Map.lookup "order" row)), "by", "Unknown", "- $", show fromMaybe (error "missing") (Map.lookup "total" fromMaybe (error "missing") (Map.lookup "order" row))]) in Nothing) else (let _ = putStrLn (unwords ["Customer", show fromMaybe (error "missing") (Map.lookup "name" fromMaybe (error "missing") (Map.lookup "customer" row)), "has no orders"]) in Nothing))) result
    |


Context around line 105:
  103|            in map row (drop start ls)
  104| 
  105| customers = [Map.fromList [("id", VInt (1)), ("name", VString ("Alice"))], Map.fromList [("id", VInt (2)), ("name", VString ("Bob"))], Map.fromList [("id", VInt (3)), ("name", VString ("Charlie"))], Map.fromList [("id", VInt (4)), ("name", VString ("Diana"))]]
  106| 
  107| orders = [Map.fromList [("id", 100), ("customerId", 1), ("total", 250)], Map.fromList [("id", 101), ("customerId", 2), ("total", 125)], Map.fromList [("id", 102), ("customerId", 1), ("total", 300)], Map.fromList [("id", 103), ("customerId", 5), ("total", 80)]]
