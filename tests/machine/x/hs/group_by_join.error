
/workspace/mochi/tests/machine/x/hs/group_by_join.hs:105:35: error:
    Data constructor not in scope: VInt :: t3 -> a
    |
105 | customers = [Map.fromList [("id", VInt (1)), ("name", VString ("Alice"))], Map.fromList [("id", VInt (2)), ("name", VString ("Bob"))]]
    |                                   ^^^^

/workspace/mochi/tests/machine/x/hs/group_by_join.hs:105:55: error:
    Data constructor not in scope: VString :: String -> a
    |
105 | customers = [Map.fromList [("id", VInt (1)), ("name", VString ("Alice"))], Map.fromList [("id", VInt (2)), ("name", VString ("Bob"))]]
    |                                                       ^^^^^^^

/workspace/mochi/tests/machine/x/hs/group_by_join.hs:105:97: error:
    Data constructor not in scope: VInt :: t2 -> a
    |
105 | customers = [Map.fromList [("id", VInt (1)), ("name", VString ("Alice"))], Map.fromList [("id", VInt (2)), ("name", VString ("Bob"))]]
    |                                                                                                 ^^^^

/workspace/mochi/tests/machine/x/hs/group_by_join.hs:105:117: error:
    Data constructor not in scope: VString :: String -> a
    |
105 | customers = [Map.fromList [("id", VInt (1)), ("name", VString ("Alice"))], Map.fromList [("id", VInt (2)), ("name", VString ("Bob"))]]
    |                                                                                                                     ^^^^^^^

/workspace/mochi/tests/machine/x/hs/group_by_join.hs:109:33: error:
    Data constructor not in scope: VString :: t4 -> a
    |
109 | stats = [Map.fromList [("name", VString (key (g))), ("count", VInt (length (items g)))] | g <- _group_by [(o, c) | o <- orders, c <- customers, (fromMaybe (error "missing") (Map.lookup "customerId" (o)) == fromMaybe (error "missing") (Map.lookup "id" (c)))] (\(o, c) -> fromMaybe (error "missing") (Map.lookup "name" c)), let g = g]
    |                                 ^^^^^^^

/workspace/mochi/tests/machine/x/hs/group_by_join.hs:109:63: error:
    Data constructor not in scope: VInt :: Int -> a
    |
109 | stats = [Map.fromList [("name", VString (key (g))), ("count", VInt (length (items g)))] | g <- _group_by [(o, c) | o <- orders, c <- customers, (fromMaybe (error "missing") (Map.lookup "customerId" (o)) == fromMaybe (error "missing") (Map.lookup "id" (c)))] (\(o, c) -> fromMaybe (error "missing") (Map.lookup "name" c)), let g = g]
    |                                                               ^^^^

/workspace/mochi/tests/machine/x/hs/group_by_join.hs:114:35: error:
    • Couldn't match expected type: t0 -> Maybe a0 -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a1 -> Maybe a1 -> a1) -> [Char]’ has only one
      In the expression:
        show fromMaybe (error "missing") (Map.lookup "name" s)
      In the first argument of ‘unwords’, namely
        ‘[show fromMaybe (error "missing") (Map.lookup "name" s),
          "orders:",
          show fromMaybe (error "missing") (Map.lookup "count" s)]’
    • Relevant bindings include
        s :: Map.Map String a0
          (bound at /workspace/mochi/tests/machine/x/hs/group_by_join.hs:114:11)
    |
114 |   mapM_ (\s -> putStrLn (unwords [show fromMaybe (error "missing") (Map.lookup "name" s), "orders:", show fromMaybe (error "missing") (Map.lookup "count" s)])) stats
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/workspace/mochi/tests/machine/x/hs/group_by_join.hs:114:102: error:
    • Couldn't match expected type: t1 -> Maybe a0 -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a2 -> Maybe a2 -> a2) -> [Char]’ has only one
      In the expression:
        show fromMaybe (error "missing") (Map.lookup "count" s)
      In the first argument of ‘unwords’, namely
        ‘[show fromMaybe (error "missing") (Map.lookup "name" s),
          "orders:",
          show fromMaybe (error "missing") (Map.lookup "count" s)]’
    • Relevant bindings include
        s :: Map.Map String a0
          (bound at /workspace/mochi/tests/machine/x/hs/group_by_join.hs:114:11)
    |
114 |   mapM_ (\s -> putStrLn (unwords [show fromMaybe (error "missing") (Map.lookup "name" s), "orders:", show fromMaybe (error "missing") (Map.lookup "count" s)])) stats
    |                                                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Context around line 105:
  103|            in map row (drop start ls)
  104| 
  105| customers = [Map.fromList [("id", VInt (1)), ("name", VString ("Alice"))], Map.fromList [("id", VInt (2)), ("name", VString ("Bob"))]]
  106| 
  107| orders = [Map.fromList [("id", 100), ("customerId", 1)], Map.fromList [("id", 101), ("customerId", 1)], Map.fromList [("id", 102), ("customerId", 2)]]
