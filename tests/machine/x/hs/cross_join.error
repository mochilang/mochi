
/workspace/mochi/tests/machine/x/hs/cross_join.hs:183:258: error:
    • Couldn't match type ‘AnyValue’ with ‘[Char]’
      Expected: Map.Map String String
        Actual: Map.Map String AnyValue
    • In the second argument of ‘Map.lookup’, namely ‘c’
      In the second argument of ‘fromMaybe’, namely
        ‘(Map.lookup "name" c)’
      In the first argument of ‘VString’, namely
        ‘(fromMaybe (error "missing") (Map.lookup "name" c))’
    |
183 | result = [Map.fromList [("orderId", VInt (fromMaybe (error "missing") (Map.lookup "id" o))), ("orderCustomerId", VInt (fromMaybe (error "missing") (Map.lookup "customerId" o))), ("pairedCustomerName", VString (fromMaybe (error "missing") (Map.lookup "name" c))), ("orderTotal", VInt (fromMaybe (error "missing") (Map.lookup "total" o)))] | o <- orders, c <- customers]
    |                                                                                                                                                                                                                                                                  ^

/workspace/mochi/tests/machine/x/hs/cross_join.hs:188:48: error:
    • Couldn't match expected type: t0 -> Maybe AnyValue -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a0 -> Maybe a0 -> a0) -> [Char]’ has only one
      In the expression:
        show fromMaybe (error "missing") (Map.lookup "orderId" entry)
      In the first argument of ‘unwords’, namely
        ‘["Order",
          show fromMaybe (error "missing") (Map.lookup "orderId" entry),
          "(customerId:",
          show
            fromMaybe (error "missing") (Map.lookup "orderCustomerId" entry),
          ....]’
    |
188 |   mapM_ (\entry -> putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "orderId" entry), "(customerId:", show fromMaybe (error "missing") (Map.lookup "orderCustomerId" entry), ", total: $", show fromMaybe (error "missing") (Map.lookup "orderTotal" entry), ") paired with", show fromMaybe (error "missing") (Map.lookup "pairedCustomerName" entry)])) result
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/workspace/mochi/tests/machine/x/hs/cross_join.hs:188:127: error:
    • Couldn't match expected type: t1 -> Maybe AnyValue -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a1 -> Maybe a1 -> a1) -> [Char]’ has only one
      In the expression:
        show
          fromMaybe (error "missing") (Map.lookup "orderCustomerId" entry)
      In the first argument of ‘unwords’, namely
        ‘["Order",
          show fromMaybe (error "missing") (Map.lookup "orderId" entry),
          "(customerId:",
          show
            fromMaybe (error "missing") (Map.lookup "orderCustomerId" entry),
          ....]’
    |
188 |   mapM_ (\entry -> putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "orderId" entry), "(customerId:", show fromMaybe (error "missing") (Map.lookup "orderCustomerId" entry), ", total: $", show fromMaybe (error "missing") (Map.lookup "orderTotal" entry), ") paired with", show fromMaybe (error "missing") (Map.lookup "pairedCustomerName" entry)])) result
    |                                                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/workspace/mochi/tests/machine/x/hs/cross_join.hs:188:212: error:
    • Couldn't match expected type: t2 -> Maybe AnyValue -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a2 -> Maybe a2 -> a2) -> [Char]’ has only one
      In the expression:
        show fromMaybe (error "missing") (Map.lookup "orderTotal" entry)
      In the first argument of ‘unwords’, namely
        ‘["Order",
          show fromMaybe (error "missing") (Map.lookup "orderId" entry),
          "(customerId:",
          show
            fromMaybe (error "missing") (Map.lookup "orderCustomerId" entry),
          ....]’
    |
188 |   mapM_ (\entry -> putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "orderId" entry), "(customerId:", show fromMaybe (error "missing") (Map.lookup "orderCustomerId" entry), ", total: $", show fromMaybe (error "missing") (Map.lookup "orderTotal" entry), ") paired with", show fromMaybe (error "missing") (Map.lookup "pairedCustomerName" entry)])) result
    |                                                                                                                                                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/workspace/mochi/tests/machine/x/hs/cross_join.hs:188:295: error:
    • Couldn't match expected type: t3 -> Maybe AnyValue -> String
                  with actual type: [Char]
    • The function ‘show’ is applied to three value arguments,
        but its type ‘(a3 -> Maybe a3 -> a3) -> [Char]’ has only one
      In the expression:
        show
          fromMaybe (error "missing") (Map.lookup "pairedCustomerName" entry)
      In the first argument of ‘unwords’, namely
        ‘["Order",
          show fromMaybe (error "missing") (Map.lookup "orderId" entry),
          "(customerId:",
          show
            fromMaybe (error "missing") (Map.lookup "orderCustomerId" entry),
          ....]’
    |
188 |   mapM_ (\entry -> putStrLn (unwords ["Order", show fromMaybe (error "missing") (Map.lookup "orderId" entry), "(customerId:", show fromMaybe (error "missing") (Map.lookup "orderCustomerId" entry), ", total: $", show fromMaybe (error "missing") (Map.lookup "orderTotal" entry), ") paired with", show fromMaybe (error "missing") (Map.lookup "pairedCustomerName" entry)])) result
    |                                                                                                                                                                                                                                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Context around line 183:
  181| orders = [Map.fromList [("id", 100), ("customerId", 1), ("total", 250)], Map.fromList [("id", 101), ("customerId", 2), ("total", 125)], Map.fromList [("id", 102), ("customerId", 1), ("total", 300)]]
  182| 
  183| result = [Map.fromList [("orderId", VInt (fromMaybe (error "missing") (Map.lookup "id" o))), ("orderCustomerId", VInt (fromMaybe (error "missing") (Map.lookup "customerId" o))), ("pairedCustomerName", VString (fromMaybe (error "missing") (Map.lookup "name" c))), ("orderTotal", VInt (fromMaybe (error "missing") (Map.lookup "total" o)))] | o <- orders, c <- customers]
  184| 
  185| main :: IO ()
