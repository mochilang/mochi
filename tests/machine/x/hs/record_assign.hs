-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Data.List (intercalate, isPrefixOf)
import qualified Data.List as List
import qualified Data.Map as Map
import Data.Maybe (fromMaybe)
import Data.Time.Clock.POSIX (getPOSIXTime)
import GHC.Generics (Generic)

data Counter = Counter
  { n :: Int
  }
  deriving (Eq, Show, Generic)

inc :: Counter -> ()
inc c =
  fromMaybe (()) $
    (let c = (n (c) + 1) in Nothing)

c = Counter {n = 0}

main :: IO ()
main = do
  inc c
  print (n (c))
