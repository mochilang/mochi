-- Code generated by Mochi compiler; DO NOT EDIT.
{-# LANGUAGE DeriveGeneric #-}
module Main where

import Data.Maybe (fromMaybe)
import Data.Time.Clock.POSIX (getPOSIXTime)
import qualified Data.Map as Map
import Data.List (intercalate, isPrefixOf, isInfixOf)
import qualified Data.List as List
import GHC.Generics (Generic)



data Counter = Counter {
    n :: Int
} deriving (Eq, Show, Generic)


inc :: Counter -> ()
inc c = fromMaybe (()) $
    (let c = (n (c) + 1) in Nothing)

c = Counter { n = 0 }

main :: IO ()
main = do
    inc c
    print (n (c))
