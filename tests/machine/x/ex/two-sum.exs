# Generated by Mochi compiler v0.10.27 on 2025-07-17T08:51:05Z
defmodule Main do
  @spec twoSum(list(integer()), integer()) :: list(integer())
  def twoSum(nums, target) do
    try do
      n = _length(nums)

      for i <- 0..(n - 1) do
        for j <- (i + 1)..(n - 1) do
          if Enum.at(nums, i) + Enum.at(nums, j) == target do
            throw({:return, [i, j]})
          end
        end
      end

      throw({:return, [-1, -1]})
    catch
      {:return, v} -> v
    end
  end

  def main do
    # result :: list(integer())
    result = twoSum([2, 7, 11, 15], 9)
    _print([Enum.at(result, 0)])
    _print([Enum.at(result, 1)])
  end

  defp _fmt(v) do
    cond do
      is_list(v) ->
        Enum.map_join(v, " ", &_fmt/1)

      v == nil ->
        "null"

      is_float(v) ->
        if v == Float.floor(v), do: Integer.to_string(trunc(v)), else: Float.to_string(v)

      is_boolean(v) ->
        if v, do: "1", else: "0"

      is_map(v) ->
        "[object Object]"

      true ->
        to_string(v)
    end
  end

  defp _length(v) do
    cond do
      is_binary(v) -> String.length(v)
      is_list(v) -> length(v)
      is_map(v) and Map.has_key?(v, :items) -> length(Map.get(v, :items))
      is_map(v) -> map_size(v)
      true -> raise "len expects list, map or string"
    end
  end

  defp _print(args) do
    IO.puts(Enum.map_join(args, " ", &_fmt/1))
  end
end

Main.main()
