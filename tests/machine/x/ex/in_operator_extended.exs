# Generated by Mochi compiler v0.10.27 on 2025-07-17T08:48:53Z
defmodule Main do
  @xs [1, 2, 3]
  @s "hello"
  def main do
    # ys :: list(integer())
    ys = for x <- @xs, rem(x, 2) == 1, do: x
    _print([if(is_map(ys), do: Map.has_key?(ys, 1), else: Enum.member?(ys, 1))])
    _print([if(is_map(ys), do: Map.has_key?(ys, 2), else: Enum.member?(ys, 2))])
    # m :: map()
    m = %{a: 1}
    _print([if(is_map(m), do: Map.has_key?(m, "a"), else: Enum.member?(m, "a"))])
    _print([if(is_map(m), do: Map.has_key?(m, "b"), else: Enum.member?(m, "b"))])
    _print([String.contains?(@s, "ell")])
    _print([String.contains?(@s, "foo")])
  end

  defp _fmt(v) do
    cond do
      is_list(v) ->
        Enum.map_join(v, " ", &_fmt/1)

      v == nil ->
        "null"

      is_float(v) ->
        if v == Float.floor(v), do: Integer.to_string(trunc(v)), else: Float.to_string(v)

      is_boolean(v) ->
        if v, do: "1", else: "0"

      is_map(v) ->
        "[object Object]"

      true ->
        to_string(v)
    end
  end

  defp _print(args) do
    IO.puts(Enum.map_join(args, " ", &_fmt/1))
  end
end

Main.main()
