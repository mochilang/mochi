# Generated by Mochi compiler v0.10.28 on 2025-07-18T07:03:40Z
defmodule Main do
  def main do
    # people :: list(map())
    people = [
      %{name: "Alice", age: 30, city: "Paris"},
      %{name: "Bob", age: 15, city: "Hanoi"},
      %{name: "Charlie", age: 65, city: "Paris"},
      %{name: "Diana", age: 45, city: "Hanoi"},
      %{name: "Eve", age: 70, city: "Paris"},
      %{name: "Frank", age: 22, city: "Hanoi"}
    ]

    # stats :: list(map())
    stats =
      Enum.map(_group_by(people, fn person -> person.city end), fn g ->
        %{
          city: g.key,
          count: length(g.items),
          avg_age: Enum.sum(for p <- g.items, do: p.age) / Enum.count(for p <- g.items, do: p.age)
        }
      end)

    IO.puts("--- People grouped by city ---")

    for s <- stats do
      IO.puts(
        Enum.join(
          Enum.map([s.city, ": count =", s.count, ", avg_age =", s.avg_age], &inspect(&1)),
          " "
        )
      )
    end
  end

  defmodule Group do
    defstruct key: nil, items: []

    def fetch(g, k) do
      case k do
        :key -> {:ok, g.key}
        :items -> {:ok, g.items}
        _ -> :error
      end
    end

    def get_and_update(g, k, f) do
      case k do
        :key ->
          {v, nv} = f.(g.key)
          {v, %{g | key: nv}}

        :items ->
          {v, nv} = f.(g.items)
          {v, %{g | items: nv}}

        _ ->
          {nil, g}
      end
    end
  end

  defp _group_by(src, keyfn) do
    {groups, order} =
      Enum.reduce(src, {%{}, []}, fn it, {groups, order} ->
        key =
          if is_list(it) do
            arity = :erlang.fun_info(keyfn, :arity) |> elem(1)
            if arity == 1, do: keyfn.(it), else: apply(keyfn, it)
          else
            keyfn.(it)
          end

        ks = :erlang.phash2(key)

        {groups, order} =
          if Map.has_key?(groups, ks) do
            {groups, order}
          else
            {Map.put(groups, ks, %Group{key: key}), order ++ [ks]}
          end

        val = if is_list(it) and length(it) == 1, do: hd(it), else: it
        groups = Map.update!(groups, ks, fn g -> %{g | items: g.items ++ [val]} end)
        {groups, order}
      end)

    Enum.map(order, fn k -> groups[k] end)
  end
end

Main.main()
