# Generated by Mochi compiler v0.10.27 on 2025-07-17T08:47:51Z
defmodule Main do
  def main do
    # customers :: list(map())
    customers = [%{id: 1, name: "Alice"}, %{id: 2, name: "Bob"}, %{id: 3, name: "Charlie"}]
    # orders :: list(map())
    orders = [
      %{id: 100, customerId: 1, total: 250},
      %{id: 101, customerId: 2, total: 125},
      %{id: 102, customerId: 1, total: 300}
    ]

    # result :: list(map())
    result =
      for o <- orders,
          c <- customers,
          do: %{
            orderId: o.id,
            orderCustomerId: o.customerId,
            pairedCustomerName: c.name,
            orderTotal: o.total
          }

    _print(["--- Cross Join: All order-customer pairs ---"])

    for entry <- result do
      _print([
        "Order",
        entry.orderId,
        "(customerId:",
        entry.orderCustomerId,
        ", total: $",
        entry.orderTotal,
        ") paired with",
        entry.pairedCustomerName
      ])
    end
  end

  defp _fmt(v) do
    cond do
      is_list(v) ->
        Enum.map_join(v, " ", &_fmt/1)

      v == nil ->
        "null"

      is_float(v) ->
        if v == Float.floor(v), do: Integer.to_string(trunc(v)), else: Float.to_string(v)

      is_boolean(v) ->
        if v, do: "1", else: "0"

      is_map(v) ->
        "[object Object]"

      true ->
        to_string(v)
    end
  end

  defp _print(args) do
    IO.puts(Enum.map_join(args, " ", &_fmt/1))
  end
end

Main.main()
