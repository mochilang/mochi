# Generated by Mochi compiler v0.10.27 on 2025-07-17T08:48:01Z
defmodule Main do
  def main do
    # people :: list(map())
    people = [
      %{name: "Alice", age: 30},
      %{name: "Bob", age: 15},
      %{name: "Charlie", age: 65},
      %{name: "Diana", age: 45}
    ]

    # adults :: list(map())
    adults =
      for person <- people,
          person.age >= 18,
          do: %{name: person.name, age: person.age, is_senior: person.age >= 60}

    _print(["--- Adults ---"])

    for person <- adults do
      _print([
        person.name,
        "is",
        person.age,
        (fn ->
           if person.is_senior do
             " (senior)"
           else
             ""
           end
         end).()
      ])
    end
  end

  defp _fmt(v) do
    cond do
      is_list(v) ->
        Enum.map_join(v, " ", &_fmt/1)

      v == nil ->
        "null"

      is_float(v) ->
        if v == Float.floor(v), do: Integer.to_string(trunc(v)), else: Float.to_string(v)

      is_boolean(v) ->
        if v, do: "1", else: "0"

      is_map(v) ->
        "[object Object]"

      true ->
        to_string(v)
    end
  end

  defp _print(args) do
    IO.puts(Enum.map_join(args, " ", &_fmt/1))
  end
end

Main.main()
