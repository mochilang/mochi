# Generated by Mochi compiler v0.10.27 on 2025-07-17T08:50:24Z
defmodule Main do
  def main do
    # customers :: list(map())
    customers = [
      %{id: 1, name: "Alice"},
      %{id: 2, name: "Bob"},
      %{id: 3, name: "Charlie"},
      %{id: 4, name: "Diana"}
    ]

    # orders :: list(map())
    orders = [
      %{id: 100, customerId: 1, total: 250},
      %{id: 101, customerId: 2, total: 125},
      %{id: 102, customerId: 1, total: 300}
    ]

    # result :: list(map())
    result =
      for c <- customers do
        o = Enum.find(orders, fn o -> o.customerId == c.id end)
        %{customerName: c.name, order: o}
      end

    _print(["--- Right Join using syntax ---"])

    for entry <- result do
      if entry.order do
        _print([
          "Customer",
          entry.customerName,
          "has order",
          entry.order.id,
          "- $",
          entry.order.total
        ])
      else
        _print(["Customer", entry.customerName, "has no orders"])
      end
    end
  end

  defp _fmt(v) do
    cond do
      is_list(v) ->
        Enum.map_join(v, " ", &_fmt/1)

      v == nil ->
        "null"

      is_float(v) ->
        if v == Float.floor(v), do: Integer.to_string(trunc(v)), else: Float.to_string(v)

      is_boolean(v) ->
        if v, do: "1", else: "0"

      is_map(v) ->
        "[object Object]"

      true ->
        to_string(v)
    end
  end

  defp _print(args) do
    IO.puts(Enum.map_join(args, " ", &_fmt/1))
  end
end

Main.main()
