# Generated by Mochi compiler v0.10.27 on 2025-07-17T08:18:22Z
defmodule Main do
  def main do
    # customers :: list(map())
    customers = [
      %{id: 1, name: "Alice"},
      %{id: 2, name: "Bob"},
      %{id: 3, name: "Charlie"},
      %{id: 4, name: "Diana"}
    ]

    # orders :: list(map())
    orders = [
      %{id: 100, customerId: 1, total: 250},
      %{id: 101, customerId: 2, total: 125},
      %{id: 102, customerId: 1, total: 300}
    ]

    # result :: list(map())
    result =
      for c <- customers do
        o = Enum.find(orders, fn o -> o.customerId == c.id end)
        %{customerName: c.name, order: o}
      end

    IO.puts("--- Right Join using syntax ---")

    for entry <- result do
      if entry.order do
        IO.puts(
          Enum.join(
            Enum.map(
              [
                "Customer",
                entry.customerName,
                "has order",
                entry.order.id,
                "- $",
                entry.order.total
              ],
              &inspect(&1)
            ),
            " "
          )
        )
      else
        IO.puts(
          Enum.join(
            Enum.map(["Customer", entry.customerName, "has no orders"], &inspect(&1)),
            " "
          )
        )
      end
    end
  end
end

Main.main()
