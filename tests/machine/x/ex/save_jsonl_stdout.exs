# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:15:20Z
defmodule Main do
  def main do
    # people :: list(map())
    people = [%{name: "Alice", age: 30}, %{name: "Bob", age: 25}]
    _save(people, "-", %{format: "jsonl"})
  end

  defp _save(data, path, opts \\ nil) do
    rows = _to_map_list(data)
    format = if opts, do: Map.get(opts, "format", "csv"), else: "csv"
    header = if opts && Map.has_key?(opts, "header"), do: opts["header"], else: false

    delim =
      if opts && Map.has_key?(opts, "delimiter"),
        do: String.first(to_string(opts["delimiter"] || ",")),
        else: ","

    out =
      case format do
        "json" -> Jason.encode!(rows)
        "jsonl" -> Enum.map(rows, &Jason.encode!/1) |> Enum.join("\n") |> Kernel.<>("\n")
        "tsv" -> _to_csv(rows, header, "	")
        _ -> _to_csv(rows, header, delim)
      end

    case path do
      nil -> IO.write(:stdio, out)
      "" -> IO.write(:stdio, out)
      "-" -> IO.write(:stdio, out)
      _ -> File.write!(path, out)
    end
  end

  defp _to_csv(rows, header, delim) do
    headers = if rows == [], do: [], else: rows |> hd() |> Map.keys() |> Enum.sort()
    lines = if header, do: [Enum.join(headers, delim)], else: []

    lines =
      lines ++
        Enum.map(rows, fn row ->
          Enum.map(headers, fn h ->
            val = Map.get(row, h)

            cond do
              is_map(val) or is_list(val) -> Jason.encode!(val)
              val == nil -> ""
              true -> to_string(val)
            end
          end)
          |> Enum.join(delim)
        end)

    Enum.join(lines, "\n")
  end

  defp _to_map_list(v) do
    cond do
      is_list(v) and Enum.all?(v, &is_map/1) -> v
      true -> raise "save source must be list of maps"
    end
  end
end

Main.main()
