# Generated by Mochi compiler v0.10.27 on 2025-07-17T08:48:58Z
defmodule Main do
  def main do
    # customers :: list(map())
    customers = [%{id: 1, name: "Alice"}, %{id: 2, name: "Bob"}]
    # orders :: list(map())
    orders = [%{id: 100, customerId: 1}, %{id: 101, customerId: 2}]
    # items :: list(map())
    items = [%{orderId: 100, sku: "a"}, %{orderId: 101, sku: "b"}]
    # result :: list(map())
    result =
      for o <- orders,
          c <- customers,
          i <- items,
          o.customerId == c.id && o.id == i.orderId,
          do: %{name: c.name, sku: i.sku}

    _print(["--- Multi Join ---"])

    for r <- result do
      _print([r.name, "bought item", r.sku])
    end
  end

  defp _fmt(v) do
    cond do
      is_list(v) ->
        Enum.map_join(v, " ", &_fmt/1)

      v == nil ->
        "null"

      is_float(v) ->
        if v == Float.floor(v), do: Integer.to_string(trunc(v)), else: Float.to_string(v)

      is_boolean(v) ->
        if v, do: "1", else: "0"

      is_map(v) ->
        "[object Object]"

      true ->
        to_string(v)
    end
  end

  defp _print(args) do
    IO.puts(Enum.map_join(args, " ", &_fmt/1))
  end
end

Main.main()
