# Generated by Mochi compiler v0.10.27 on 2025-07-17T08:47:40Z
defmodule Main do
  @numbers [1, 2, 3, 4, 5, 6, 7, 8, 9]
  def main do
    _ =
      Enum.reduce_while(@numbers, :ok, fn n, _acc ->
        try do
          if rem(n, 2) == 0 do
            throw(:continue)
          end

          if n > 7 do
            throw(:break)
          end

          _print(["odd number:", n])
          {:cont, :ok}
        catch
          :break -> {:halt, :ok}
          :continue -> {:cont, :ok}
        end
      end)
  end

  defp _fmt(v) do
    cond do
      is_list(v) ->
        Enum.map_join(v, " ", &_fmt/1)

      v == nil ->
        "null"

      is_float(v) ->
        if v == Float.floor(v), do: Integer.to_string(trunc(v)), else: Float.to_string(v)

      is_boolean(v) ->
        if v, do: "1", else: "0"

      is_map(v) ->
        "[object Object]"

      true ->
        to_string(v)
    end
  end

  defp _print(args) do
    IO.puts(Enum.map_join(args, " ", &_fmt/1))
  end
end

Main.main()
