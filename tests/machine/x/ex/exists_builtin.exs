# Generated by Mochi Elixir compiler
defmodule Main do
  @data [1, 2]
  def main do
    # flag :: boolean()
    flag = _exists(for x <- @data, (x == 1), do: x)
    IO.inspect(flag)
  end
  defp _exists(v) do
  cond do
    is_list(v) -> length(v) > 0
    is_map(v) and Map.has_key?(v, :items) -> length(Map.get(v, :items)) > 0
    is_map(v) -> map_size(v) > 0
    is_binary(v) -> String.length(v) > 0
    true -> raise "exists expects list, map or string"
  end
end

  end
Main.main()
