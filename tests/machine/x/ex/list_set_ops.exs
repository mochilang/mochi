# Generated by Mochi compiler v0.10.27 on 2025-07-17T08:21:47Z
defmodule Main do
  def main do
    IO.puts(Enum.map_join(_union([1, 2], [2, 3]), " ", &inspect(&1)))
    IO.puts(Enum.map_join(_except([1, 2, 3], [2]), " ", &inspect(&1)))
    IO.puts(Enum.map_join(_intersect([1, 2, 3], [2, 4]), " ", &inspect(&1)))
    IO.inspect(_length(_union([1, 2], [2, 3])))
  end

  defp _except(a, b) do
    Enum.reject(a, fn x -> Enum.member?(b, x) end)
  end

  defp _intersect(a, b) do
    Enum.filter(a, fn x -> Enum.member?(b, x) end) |> Enum.uniq()
  end

  defp _length(v) do
    cond do
      is_binary(v) -> String.length(v)
      is_list(v) -> length(v)
      is_map(v) and Map.has_key?(v, :items) -> length(Map.get(v, :items))
      is_map(v) -> map_size(v)
      true -> raise "len expects list, map or string"
    end
  end

  defp _union(a, b) do
    Enum.uniq(a ++ b)
  end
end

Main.main()
