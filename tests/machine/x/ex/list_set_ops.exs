# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    IO.inspect(_union(([1, 2]), ([2, 3])))
    IO.inspect(_except(([1, 2, 3]), ([2])))
    IO.inspect(_intersect(([1, 2, 3]), ([2, 4])))
    IO.inspect(length(_union(([1, 2]), ([2, 3]))))
  end
  defp _except(a, b) do
  Enum.reject(a, fn x -> Enum.member?(b, x) end)
end

  defp _intersect(a, b) do
  Enum.filter(a, fn x -> Enum.member?(b, x) end) |> Enum.uniq()
end

  defp _union(a, b) do
  Enum.uniq(a ++ b)
end

  end
Main.main()
