# Generated by Mochi compiler v0.10.27 on 2025-07-17T08:49:24Z
defmodule Main do
  def main do
    _print([_union([1, 2], [2, 3])])
    _print([_except([1, 2, 3], [2])])
    _print([_intersect([1, 2, 3], [2, 4])])
    _print([_length(_union([1, 2], [2, 3]))])
  end

  defp _except(a, b) do
    Enum.reject(a, fn x -> Enum.member?(b, x) end)
  end

  defp _fmt(v) do
    cond do
      is_list(v) ->
        Enum.map_join(v, " ", &_fmt/1)

      v == nil ->
        "null"

      is_float(v) ->
        if v == Float.floor(v), do: Integer.to_string(trunc(v)), else: Float.to_string(v)

      is_boolean(v) ->
        if v, do: "1", else: "0"

      is_map(v) ->
        "[object Object]"

      true ->
        to_string(v)
    end
  end

  defp _intersect(a, b) do
    Enum.filter(a, fn x -> Enum.member?(b, x) end) |> Enum.uniq()
  end

  defp _length(v) do
    cond do
      is_binary(v) -> String.length(v)
      is_list(v) -> length(v)
      is_map(v) and Map.has_key?(v, :items) -> length(Map.get(v, :items))
      is_map(v) -> map_size(v)
      true -> raise "len expects list, map or string"
    end
  end

  defp _print(args) do
    IO.puts(Enum.map_join(args, " ", &_fmt/1))
  end

  defp _union(a, b) do
    Enum.uniq(a ++ b)
  end
end

Main.main()
