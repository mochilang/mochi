# Generated by Mochi Elixir compiler
defmodule Leaf do
  @type t :: %__MODULE__{}
  defstruct []
end

defmodule Node do
  @type t :: %__MODULE__{left: any(), value: integer(), right: any()}
  defstruct left: nil, value: nil, right: nil
end

defmodule Main do
  @spec sum_tree(Tree) :: integer()
  def sum_tree(t) do
    try do
      throw(
        {:return,
         (fn ->
            t1 = t

            case t1 do
              %Leaf{} ->
                0

              %Node{left: left, value: value, right: right} ->
                sum_tree(left) + value + sum_tree(right)

              _ ->
                nil
            end
          end).()}
      )
    catch
      {:return, v} -> v
    end
  end

  def main do
    # t :: Node
    t = %Node{left: %Leaf{}, value: 1, right: %Node{left: %Leaf{}, value: 2, right: %Leaf{}}}
    IO.inspect(sum_tree(t))
  end
end

Main.main()
