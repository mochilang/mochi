# Generated by Mochi compiler v0.10.27 on 2025-07-17T08:51:02Z
defmodule Leaf do
  @type t :: %__MODULE__{}
  defstruct []
end

defmodule Node do
  @type t :: %__MODULE__{left: any(), value: integer(), right: any()}
  defstruct left: nil, value: nil, right: nil
end

defmodule Main do
  @spec sum_tree(Tree) :: integer()
  def sum_tree(t) do
    try do
      throw(
        {:return,
         (fn ->
            t1 = t

            case t1 do
              %Leaf{} ->
                0

              %Node{left: left, value: value, right: right} ->
                sum_tree(left) + value + sum_tree(right)

              _ ->
                nil
            end
          end).()}
      )
    catch
      {:return, v} -> v
    end
  end

  def main do
    # t :: Node
    t = %Node{left: %Leaf{}, value: 1, right: %Node{left: %Leaf{}, value: 2, right: %Leaf{}}}
    _print([sum_tree(t)])
  end

  defp _fmt(v) do
    cond do
      is_list(v) ->
        Enum.map_join(v, " ", &_fmt/1)

      v == nil ->
        "null"

      is_float(v) ->
        if v == Float.floor(v), do: Integer.to_string(trunc(v)), else: Float.to_string(v)

      is_boolean(v) ->
        if v, do: "1", else: "0"

      is_map(v) ->
        "[object Object]"

      true ->
        to_string(v)
    end
  end

  defp _print(args) do
    IO.puts(Enum.map_join(args, " ", &_fmt/1))
  end
end

Main.main()
