# Generated by Mochi Elixir compiler
defmodule Counter do
  @type t :: %__MODULE__{n: integer()}
  defstruct n: nil
end

defmodule Main do
  @spec inc(Counter) :: nil
  def inc(c) do
    try do
      c = %{c | n: c.n + 1}
    catch
      {:return, v} -> v
    end
  end

  def main do
    # c :: Counter
    c = _structify(Counter, %Counter{n: 0})
    _ = c
    inc(c)
    IO.inspect(c.n)
  end

  defp _structify(mod, v) do
    cond do
      is_struct(v) ->
        v

      is_map(v) ->
        m =
          Enum.reduce(v, %{}, fn {k, val}, acc ->
            Map.put(acc, String.to_atom(to_string(k)), _structify(nil, val))
          end)

        if mod, do: struct(mod, m), else: m

      is_list(v) ->
        Enum.map(v, &_structify(nil, &1))

      true ->
        v
    end
  end
end

Main.main()
