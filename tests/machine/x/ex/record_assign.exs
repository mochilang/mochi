# Generated by Mochi compiler v0.10.27 on 2025-07-17T08:50:22Z
defmodule Counter do
  @type t :: %__MODULE__{n: integer()}
  defstruct n: nil
end

defmodule Main do
  @spec inc(Counter) :: nil
  def inc(c) do
    try do
      c = %{c | n: c.n + 1}
    catch
      {:return, v} -> v
    end
  end

  def main do
    # c :: Counter
    c = _structify(Counter, %Counter{n: 0})
    _ = c
    inc(c)
    _print([c.n])
  end

  defp _fmt(v) do
    cond do
      is_list(v) ->
        Enum.map_join(v, " ", &_fmt/1)

      v == nil ->
        "null"

      is_float(v) ->
        if v == Float.floor(v), do: Integer.to_string(trunc(v)), else: Float.to_string(v)

      is_boolean(v) ->
        if v, do: "1", else: "0"

      is_map(v) ->
        "[object Object]"

      true ->
        to_string(v)
    end
  end

  defp _print(args) do
    IO.puts(Enum.map_join(args, " ", &_fmt/1))
  end

  defp _structify(mod, v) do
    cond do
      is_struct(v) ->
        v

      is_map(v) ->
        m =
          Enum.reduce(v, %{}, fn {k, val}, acc ->
            Map.put(acc, String.to_atom(to_string(k)), _structify(nil, val))
          end)

        if mod, do: struct(mod, m), else: m

      is_list(v) ->
        Enum.map(v, &_structify(nil, &1))

      true ->
        v
    end
  end
end

Main.main()
