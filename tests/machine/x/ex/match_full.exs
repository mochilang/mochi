# Generated by Mochi compiler v0.10.27 on 2025-07-17T08:49:48Z
defmodule Main do
  @x 2
  @day "sun"
  @ok true
  @spec classify(integer()) :: String.t()
  def classify(n) do
    try do
      throw(
        {:return,
         (fn ->
            t4 = n

            case t4 do
              0 -> "zero"
              1 -> "one"
              _ -> "many"
            end
          end).()}
      )
    catch
      {:return, v} -> v
    end
  end

  def main do
    # label :: String.t()
    label =
      (fn ->
         t5 = @x

         case t5 do
           1 -> "one"
           2 -> "two"
           3 -> "three"
           _ -> "unknown"
         end
       end).()

    _print([label])
    # mood :: String.t()
    mood =
      (fn ->
         t6 = @day

         case t6 do
           "mon" -> "tired"
           "fri" -> "excited"
           "sun" -> "relaxed"
           _ -> "normal"
         end
       end).()

    _print([mood])
    # status :: String.t()
    status =
      (fn ->
         t7 = @ok

         case t7 do
           true -> "confirmed"
           false -> "denied"
           _ -> nil
         end
       end).()

    _print([status])
    _print([classify(0)])
    _print([classify(5)])
  end

  defp _fmt(v) do
    cond do
      is_list(v) ->
        Enum.map_join(v, " ", &_fmt/1)

      v == nil ->
        "null"

      is_float(v) ->
        if v == Float.floor(v), do: Integer.to_string(trunc(v)), else: Float.to_string(v)

      is_boolean(v) ->
        if v, do: "1", else: "0"

      is_map(v) ->
        "[object Object]"

      true ->
        to_string(v)
    end
  end

  defp _print(args) do
    IO.puts(Enum.map_join(args, " ", &_fmt/1))
  end
end

Main.main()
