# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    # nums :: list(integer())
    nums = [3, 1, 4]
    IO.puts(_min(nums))
    IO.puts(_max(nums))
  end

  defp _max(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> v[:items]
        is_list(v) -> v
        true -> raise "max() expects list or group"
      end

    if Enum.count(list) == 0 do
      0
    else
      hd = hd(list)

      Enum.reduce(tl(list), hd, fn it, acc ->
        cond do
          is_binary(acc) and is_binary(it) -> if it > acc, do: it, else: acc
          true -> if Kernel.>(it, acc), do: it, else: acc
        end
      end)
    end
  end

  defp _min(v) do
    list =
      cond do
        is_map(v) and Map.has_key?(v, :items) -> v[:items]
        is_list(v) -> v
        true -> raise "min() expects list or group"
      end

    if Enum.count(list) == 0 do
      0
    else
      hd = hd(list)

      Enum.reduce(tl(list), hd, fn it, acc ->
        cond do
          is_binary(acc) and is_binary(it) -> if it < acc, do: it, else: acc
          true -> if Kernel.<(it, acc), do: it, else: acc
        end
      end)
    end
  end
end

Main.main()
