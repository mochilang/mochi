# Generated by Mochi Elixir compiler
defmodule Main do
  @spec classify(integer()) :: String.t()
  def classify(n) do
    try do
      throw(
        {:return,
         (fn ->
            t1 = n

            cond do
              t1 == 0 -> "zero"
              t1 == 1 -> "one"
              true -> "many"
            end
          end).()}
      )
    catch
      {:return, v} -> v
    end
  end

  def main do
    # x :: integer()
    x = 2
    # label :: String.t()
    label =
      (fn ->
         t2 = x

         cond do
           t2 == 1 -> "one"
           t2 == 2 -> "two"
           t2 == 3 -> "three"
           true -> "unknown"
         end
       end).()

    IO.puts(label)
    # day :: String.t()
    day = "sun"
    # mood :: String.t()
    mood =
      (fn ->
         t3 = day

         cond do
           t3 == "mon" -> "tired"
           t3 == "fri" -> "excited"
           t3 == "sun" -> "relaxed"
           true -> "normal"
         end
       end).()

    IO.puts(mood)
    # ok :: boolean()
    ok = true
    # status :: String.t()
    status =
      (fn ->
         t4 = ok

         cond do
           t4 == true -> "confirmed"
           t4 == false -> "denied"
           true -> nil
         end
       end).()

    IO.puts(status)
    IO.puts(classify(0))
    IO.puts(classify(5))
  end
end

Main.main()
