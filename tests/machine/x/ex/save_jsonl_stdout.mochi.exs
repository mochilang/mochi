# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    # people :: list(map())
    people = [%{name: "Alice", age: 30}, %{name: "Bob", age: 25}]
    _save(people, "-", %{format: "jsonl"})
  end

  defp _save(data, path, opts \\ nil) do
    rows = _to_map_list(data)
    format = if opts, do: Map.get(opts, "format", "csv"), else: "csv"
    header = if opts && Map.has_key?(opts, "header"), do: opts["header"], else: false

    delim =
      if opts && Map.has_key?(opts, "delimiter"),
        do: String.first(to_string(opts["delimiter"] || ",")),
        else: ","

    out =
      case format do
        "json" -> Jason.encode!(rows)
        "jsonl" -> Enum.map(rows, &Jason.encode!/1) |> (Enum.join("\n") <> "\n")
        "tsv" -> _to_csv(rows, header, "	")
        _ -> _to_csv(rows, header, delim)
      end

    case path do
      nil -> IO.write(:stdio, out)
      "" -> IO.write(:stdio, out)
      "-" -> IO.write(:stdio, out)
      _ -> File.write!(path, out)
    end
  end
end

Main.main()
