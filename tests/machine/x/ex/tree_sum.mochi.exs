# Generated by Mochi Elixir compiler
defmodule Main do
  @spec sum_tree(Tree) :: integer()
  def sum_tree(t) do
    try do
      throw(
        {:return,
         (fn ->
            t1 = t

            cond do
              t1 == Leaf -> 0
              t1 == Node.(left, value, right) -> sum_tree(left) + value + sum_tree(right)
              true -> nil
            end
          end).()}
      )
    catch
      {:return, v} -> v
    end
  end

  def main do
    # t :: Node
    t = %{left: Leaf, value: 1, right: %{left: Leaf, value: 2, right: Leaf}}
    IO.puts(sum_tree(t))
  end
end

Main.main()
