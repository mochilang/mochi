# Generated by Mochi compiler v0.10.27 on 2025-07-17T08:47:58Z
defmodule Main do
  def main do
    # products :: list(map())
    products = [
      %{name: "Laptop", price: 1500},
      %{name: "Smartphone", price: 900},
      %{name: "Tablet", price: 600},
      %{name: "Monitor", price: 300},
      %{name: "Keyboard", price: 100},
      %{name: "Mouse", price: 50},
      %{name: "Headphones", price: 200}
    ]

    # expensive :: list(map())
    expensive =
      for p <- Enum.take(Enum.drop(Enum.sort_by(products, fn p -> -p.price end), 1), 3), do: p

    _print(["--- Top products (excluding most expensive) ---"])

    for item <- expensive do
      _print([item.name, "costs $", item.price])
    end
  end

  defp _fmt(v) do
    cond do
      is_list(v) ->
        Enum.map_join(v, " ", &_fmt/1)

      v == nil ->
        "null"

      is_float(v) ->
        if v == Float.floor(v), do: Integer.to_string(trunc(v)), else: Float.to_string(v)

      is_boolean(v) ->
        if v, do: "1", else: "0"

      is_map(v) ->
        "[object Object]"

      true ->
        to_string(v)
    end
  end

  defp _print(args) do
    IO.puts(Enum.map_join(args, " ", &_fmt/1))
  end
end

Main.main()
