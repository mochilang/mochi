# Generated by Mochi compiler v0.10.27 on 2025-07-17T08:49:03Z
defmodule Main do
  def main do
    # customers :: list(map())
    customers = [%{id: 1, name: "Alice"}, %{id: 2, name: "Bob"}]
    # orders :: list(map())
    orders = [%{id: 100, customerId: 1, total: 250}, %{id: 101, customerId: 3, total: 80}]
    # result :: list(map())
    result =
      for o <- orders do
        c = Enum.find(customers, fn c -> o.customerId == c.id end)
        %{orderId: o.id, customer: c, total: o.total}
      end

    _print(["--- Left Join ---"])

    for entry <- result do
      _print(["Order", entry.orderId, "customer", entry.customer, "total", entry.total])
    end
  end

  defp _fmt(v) do
    cond do
      is_list(v) ->
        Enum.map_join(v, " ", &_fmt/1)

      v == nil ->
        "null"

      is_float(v) ->
        if v == Float.floor(v), do: Integer.to_string(trunc(v)), else: Float.to_string(v)

      is_boolean(v) ->
        if v, do: "1", else: "0"

      is_map(v) ->
        "[object Object]"

      true ->
        to_string(v)
    end
  end

  defp _print(args) do
    IO.puts(Enum.map_join(args, " ", &_fmt/1))
  end
end

Main.main()
