# Generated by Mochi compiler v0.10.27 on 2025-07-17T08:51:15Z
defmodule Person do
  @type t :: %__MODULE__{name: String.t(), age: integer(), status: String.t()}
  defstruct name: nil, age: nil, status: nil
end

defmodule Main do
  def main do
    # people :: list(Person)
    people = [
      %Person{name: "Alice", age: 17, status: "minor"},
      %Person{name: "Bob", age: 25, status: "unknown"},
      %Person{name: "Charlie", age: 18, status: "unknown"},
      %Person{name: "Diana", age: 16, status: "minor"}
    ]

    people =
      Enum.map(people, fn it ->
        %{name: name, age: age, status: status} = it

        if age >= 18 do
          %{it | status: "adult", age: age + 1}
        else
          it
        end
      end)

    _print(["ok"])
  end

  defp _fmt(v) do
    cond do
      is_list(v) ->
        Enum.map_join(v, " ", &_fmt/1)

      v == nil ->
        "null"

      is_float(v) ->
        if v == Float.floor(v), do: Integer.to_string(trunc(v)), else: Float.to_string(v)

      is_boolean(v) ->
        if v, do: "1", else: "0"

      is_map(v) ->
        "[object Object]"

      true ->
        to_string(v)
    end
  end

  defp _print(args) do
    IO.puts(Enum.map_join(args, " ", &_fmt/1))
  end
end

Main.main()
