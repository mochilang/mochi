# Generated by Mochi compiler v0.10.27 on 2025-07-17T08:50:51Z
defmodule Main do
  @prefix "fore"
  @s1 "forest"
  @s2 "desert"
  def main do
    _print([_slice_string(@s1, 0, String.length(@prefix)) == @prefix])
    _print([_slice_string(@s2, 0, String.length(@prefix)) == @prefix])
  end

  defp _fmt(v) do
    cond do
      is_list(v) ->
        Enum.map_join(v, " ", &_fmt/1)

      v == nil ->
        "null"

      is_float(v) ->
        if v == Float.floor(v), do: Integer.to_string(trunc(v)), else: Float.to_string(v)

      is_boolean(v) ->
        if v, do: "1", else: "0"

      is_map(v) ->
        "[object Object]"

      true ->
        to_string(v)
    end
  end

  defp _print(args) do
    IO.puts(Enum.map_join(args, " ", &_fmt/1))
  end

  defp _slice_string(s, i, j) do
    chars = String.graphemes(s)
    n = length(chars)
    start = if i < 0, do: i + n, else: i
    finish = if j < 0, do: j + n, else: j
    start = if start < 0, do: 0, else: start
    finish = if finish > n, do: n, else: finish
    finish = if finish < start, do: start, else: finish
    Enum.slice(chars, start, finish - start) |> Enum.join()
  end
end

Main.main()
