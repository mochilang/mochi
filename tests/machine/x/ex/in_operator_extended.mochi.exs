# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    # xs :: list(integer())
    xs = [1, 2, 3]
    # ys :: list(integer())
    ys = for x <- xs, rem(x, 2) == 1, do: x
    IO.puts(if is_map(ys), do: Map.has_key?(ys, 1), else: Enum.member?(ys, 1))
    IO.puts(if is_map(ys), do: Map.has_key?(ys, 2), else: Enum.member?(ys, 2))
    # m :: map()
    m = %{a: 1}
    IO.puts(String.contains?(m, "a"))
    IO.puts(String.contains?(m, "b"))
    # s :: String.t()
    s = "hello"
    IO.puts(String.contains?(s, "ell"))
    IO.puts(String.contains?(s, "foo"))
  end
end

Main.main()
