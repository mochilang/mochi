# Generated by Mochi compiler v0.10.27 on 2025-07-17T07:44:30Z
defmodule Main do
  def main do
    # customers :: list(map())
    customers = [
      %{id: 1, name: "Alice"},
      %{id: 2, name: "Bob"},
      %{id: 3, name: "Charlie"},
      %{id: 4, name: "Diana"}
    ]

    # orders :: list(map())
    orders = [
      %{id: 100, customerId: 1, total: 250},
      %{id: 101, customerId: 2, total: 125},
      %{id: 102, customerId: 1, total: 300},
      %{id: 103, customerId: 5, total: 80}
    ]

    # result :: list(map())
    result =
      (fn ->
         src = orders

         _query(
           src,
           [
             %{items: customers, on: fn o, c -> o.customerId == c.id end, left: true, right: true}
           ],
           %{select: fn o, c -> %{order: o, customer: c} end}
         )
       end).()

    IO.puts("--- Outer Join using syntax ---")

    for row <- result do
      if row.order do
        if row.customer do
          IO.puts(
            Enum.join(
              Enum.map(
                ["Order", row.order.id, "by", row.customer.name, "- $", row.order.total],
                &inspect(&1)
              ),
              " "
            )
          )
        else
          IO.puts(
            Enum.join(
              Enum.map(
                ["Order", row.order.id, "by", "Unknown", "- $", row.order.total],
                &inspect(&1)
              ),
              " "
            )
          )
        end
      else
        IO.puts(
          Enum.join(Enum.map(["Customer", row.customer.name, "has no orders"], &inspect(&1)), " ")
        )
      end
    end
  end

  defp _query(src, joins, opts \\ %{}) do
    where = Map.get(opts, :where)
    items = Enum.map(src, fn v -> [v] end)

    items =
      Enum.reduce(joins, items, fn j, items ->
        joined =
          cond do
            Map.get(j, :right) && Map.get(j, :left) ->
              matched = for _ <- j[:items], do: false

              {res, matched} =
                Enum.reduce(items, {[], matched}, fn left, {acc, matched} ->
                  {acc, matched, m} =
                    Enum.reduce(Enum.with_index(j[:items]), {acc, matched, false}, fn {right, ri},
                                                                                      {acc,
                                                                                       matched,
                                                                                       m} ->
                      keep =
                        if Map.has_key?(j, :on) and j[:on],
                          do: apply(j[:on], left ++ [right]),
                          else: true

                      if keep do
                        matched = List.replace_at(matched, ri, true)
                        {acc ++ [left ++ [right]], matched, true}
                      else
                        {acc, matched, m}
                      end
                    end)

                  acc = if !m, do: acc ++ [left ++ [nil]], else: acc
                  {acc, matched}
                end)

              Enum.reduce(Enum.with_index(j[:items]), res, fn {right, ri}, acc ->
                if Enum.at(matched, ri) do
                  acc
                else
                  undef = List.duplicate(nil, if(items == [], do: 0, else: length(hd(items))))
                  acc ++ [undef ++ [right]]
                end
              end)

            Map.get(j, :right) ->
              Enum.reduce(j[:items], [], fn right, acc ->
                {acc2, m} =
                  Enum.reduce(items, {acc, false}, fn left, {acc, m} ->
                    keep =
                      if Map.has_key?(j, :on) and j[:on],
                        do: apply(j[:on], left ++ [right]),
                        else: true

                    if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
                  end)

                if !m do
                  undef = List.duplicate(nil, if(items == [], do: 0, else: length(hd(items))))
                  acc2 ++ [undef ++ [right]]
                else
                  acc2
                end
              end)

            true ->
              Enum.reduce(items, [], fn left, acc ->
                {acc2, m} =
                  Enum.reduce(j[:items], {acc, false}, fn right, {acc, m} ->
                    keep =
                      if Map.has_key?(j, :on) and j[:on],
                        do: apply(j[:on], left ++ [right]),
                        else: true

                    if keep, do: {acc ++ [left ++ [right]], true}, else: {acc, m}
                  end)

                if Map.get(j, :left) && !m do
                  acc2 ++ [left ++ [nil]]
                else
                  acc2
                end
              end)
          end

        joined
      end)

    items = if where, do: Enum.filter(items, fn r -> where.(r) end), else: items

    items =
      if Map.has_key?(opts, :sortKey),
        do: Enum.sort_by(items, fn r -> apply(opts[:sortKey], r) end),
        else: items

    items =
      if Map.has_key?(opts, :skip),
        do:
          (
            n = opts[:skip]
            if n < length(items), do: Enum.drop(items, n), else: []
          ),
        else: items

    items =
      if Map.has_key?(opts, :take),
        do:
          (
            n = opts[:take]
            if n < length(items), do: Enum.take(items, n), else: items
          ),
        else: items

    Enum.map(items, fn r -> apply(opts[:select], r) end)
  end
end

Main.main()
