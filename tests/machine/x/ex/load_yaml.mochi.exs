# Generated by Mochi Elixir compiler
defmodule Main do
  def main do
    # people :: list(Person)
    people = _load("../interpreter/valid/people.yaml", %{format: "yaml"})
    # adults :: list(map())
    adults = for p <- people, p.age >= 18, do: %{name: p.name, email: p.email}

    for a <- adults do
      IO.puts(Enum.join(Enum.map([a.name, a.email], &inspect(&1)), " "))
    end
  end

  defp _load(path, opts \\ nil) do
    format = if opts, do: Map.get(opts, "format", "csv"), else: "csv"
    header = if opts && Map.has_key?(opts, "header"), do: opts["header"], else: true

    delim =
      if opts && Map.has_key?(opts, "delimiter"),
        do: String.first(to_string(opts["delimiter"] || ",")),
        else: ","

    text =
      case path do
        nil -> IO.read(:stdio, :eof)
        "" -> IO.read(:stdio, :eof)
        "-" -> IO.read(:stdio, :eof)
        _ -> File.read!(path)
      end

    case format do
      "jsonl" ->
        String.trim(text) |> String.split(~r/\r?\n/, trim: true) |> Enum.map(&Jason.decode!/1)

      "json" ->
        case Jason.decode!(text) do
          list when is_list(list) -> list
          obj -> [obj]
        end

      "tsv" ->
        _parse_csv(text, header, "	")

      _ ->
        _parse_csv(text, header, delim)
    end
  end
end

Main.main()
