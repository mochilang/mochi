line 0: compile: exit status 1
error[E0308]: mismatched types
 --> /workspace/mochi/tests/machine/x/rust/dataset_sort_take_limit.rs:2:119
  |
2 | ...lections::HashMap::new(); m.insert("name", "Laptop"); m.insert("price", 1500); m }, { let mut m = std::collections::HashMap::new(); m....
  |                              -                --------     ------          ^^^^ expected `&str`, found integer
  |                              |                |            |
  |                              |                |            arguments to this method are incorrect
  |                              |                this argument has type `&str`...
  |                              ... which causes `m` to have type `HashMap<&str, &str>`
  |
help: the return type of this call is `{integer}` due to the type of the argument passed
 --> /workspace/mochi/tests/machine/x/rust/dataset_sort_take_limit.rs:2:101
  |
2 | ... m.insert("name", "Laptop"); m.insert("price", 1500); m }, { let mut m = std::collections::HashMap::new(); m.insert("name", "Smartphon...
  |                                 ^^^^^^^^^^^^^^^^^^----^
  |                                                   |
  |                                                   this argument influences the return type of `insert`
note: method defined here
 --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/std/src/collections/hash/map.rs:1201:12

error[E0308]: mismatched types
 --> /workspace/mochi/tests/machine/x/rust/dataset_sort_take_limit.rs:2:229
  |
2 | ...ections::HashMap::new(); m.insert("name", "Smartphone"); m.insert("price", 900); m }, { let mut m = std::collections::HashMap::new(); ...
  |                             -                ------------     ------          ^^^ expected `&str`, found integer
  |                             |                |                |
  |                             |                |                arguments to this method are incorrect
  |                             |                this argument has type `&str`...
  |                             ... which causes `m` to have type `HashMap<&str, &str>`
  |
help: the return type of this call is `{integer}` due to the type of the argument passed
 --> /workspace/mochi/tests/machine/x/rust/dataset_sort_take_limit.rs:2:211
  |
2 | ...insert("name", "Smartphone"); m.insert("price", 900); m }, { let mut m = std::collections::HashMap::new(); m.insert("name", "Tablet");...
  |                                  ^^^^^^^^^^^^^^^^^^---^
  |                                                    |
  |                                                    this argument influences the return type of `insert`
note: method defined here
 --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/std/src/collections/hash/map.rs:1201:12

error[E0308]: mismatched types
 --> /workspace/mochi/tests/machine/x/rust/dataset_sort_take_limit.rs:2:334
  |
2 | ...llections::HashMap::new(); m.insert("name", "Tablet"); m.insert("price", 600); m }, { let mut m = std::collections::HashMap::new(); m....
  |                               -                --------     ------          ^^^ expected `&str`, found integer
  |                               |                |            |
  |                               |                |            arguments to this method are incorrect
  |                               |                this argument has type `&str`...
  |                               ... which causes `m` to have type `HashMap<&str, &str>`
  |
help: the return type of this call is `{integer}` due to the type of the argument passed
 --> /workspace/mochi/tests/machine/x/rust/dataset_sort_take_limit.rs:2:316
  |
2 | ...; m.insert("name", "Tablet"); m.insert("price", 600); m }, { let mut m = std::collections::HashMap::new(); m.insert("name", "Monitor")...
  |                                  ^^^^^^^^^^^^^^^^^^---^
  |                                                    |
  |                                                    this argument influences the return type of `insert`
note: method defined here
 --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/std/src/collections/hash/map.rs:1201:12

error[E0308]: mismatched types
 --> /workspace/mochi/tests/machine/x/rust/dataset_sort_take_limit.rs:2:440
  |
2 | ...lections::HashMap::new(); m.insert("name", "Monitor"); m.insert("price", 300); m }, { let mut m = std::collections::HashMap::new(); m....
  |                              -                ---------     ------          ^^^ expected `&str`, found integer
  |                              |                |             |
  |                              |                |             arguments to this method are incorrect
  |                              |                this argument has type `&str`...
  |                              ... which causes `m` to have type `HashMap<&str, &str>`
  |
help: the return type of this call is `{integer}` due to the type of the argument passed
 --> /workspace/mochi/tests/machine/x/rust/dataset_sort_take_limit.rs:2:422
  |
2 | ... m.insert("name", "Monitor"); m.insert("price", 300); m }, { let mut m = std::collections::HashMap::new(); m.insert("name", "Keyboard"...
  |                                  ^^^^^^^^^^^^^^^^^^---^
  |                                                    |
  |                                                    this argument influences the return type of `insert`
note: method defined here
 --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/std/src/collections/hash/map.rs:1201:12

error[E0308]: mismatched types
 --> /workspace/mochi/tests/machine/x/rust/dataset_sort_take_limit.rs:2:547
  |
2 | ...lections::HashMap::new(); m.insert("name", "Keyboard"); m.insert("price", 100); m }, { let mut m = std::collections::HashMap::new(); m...
  |                              -                ----------     ------          ^^^ expected `&str`, found integer
  |                              |                |              |
  |                              |                |              arguments to this method are incorrect
  |                              |                this argument has type `&str`...
  |                              ... which causes `m` to have type `HashMap<&str, &str>`
  |
help: the return type of this call is `{integer}` due to the type of the argument passed
 --> /workspace/mochi/tests/machine/x/rust/dataset_sort_take_limit.rs:2:529
  |
2 | ...m.insert("name", "Keyboard"); m.insert("price", 100); m }, { let mut m = std::collections::HashMap::new(); m.insert("name", "Mouse"); ...
  |                                  ^^^^^^^^^^^^^^^^^^---^
  |                                                    |
  |                                                    this argument influences the return type of `insert`
note: method defined here
 --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/std/src/collections/hash/map.rs:1201:12

error[E0308]: mismatched types
 --> /workspace/mochi/tests/machine/x/rust/dataset_sort_take_limit.rs:2:651
  |
2 | ...ollections::HashMap::new(); m.insert("name", "Mouse"); m.insert("price", 50); m }, { let mut m = std::collections::HashMap::new(); m.i...
  |                                -                -------     ------          ^^ expected `&str`, found integer
  |                                |                |           |
  |                                |                |           arguments to this method are incorrect
  |                                |                this argument has type `&str`...
  |                                ... which causes `m` to have type `HashMap<&str, &str>`
  |
help: the return type of this call is `{integer}` due to the type of the argument passed
 --> /workspace/mochi/tests/machine/x/rust/dataset_sort_take_limit.rs:2:633
  |
2 | ...); m.insert("name", "Mouse"); m.insert("price", 50); m }, { let mut m = std::collections::HashMap::new(); m.insert("name", "Headphones...
  |                                  ^^^^^^^^^^^^^^^^^^--^
  |                                                    |
  |                                                    this argument influences the return type of `insert`
note: method defined here
 --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/std/src/collections/hash/map.rs:1201:12

error[E0308]: mismatched types
 --> /workspace/mochi/tests/machine/x/rust/dataset_sort_take_limit.rs:2:759
  |
2 | ...ections::HashMap::new(); m.insert("name", "Headphones"); m.insert("price", 200); m }];
  |                             -                ------------     ------          ^^^ expected `&str`, found integer
  |                             |                |                |
  |                             |                |                arguments to this method are incorrect
  |                             |                this argument has type `&str`...
  |                             ... which causes `m` to have type `HashMap<&str, &str>`
  |
help: the return type of this call is `{integer}` due to the type of the argument passed
 --> /workspace/mochi/tests/machine/x/rust/dataset_sort_take_limit.rs:2:741
  |
2 | ...insert("name", "Headphones"); m.insert("price", 200); m }];
  |                                  ^^^^^^^^^^^^^^^^^^---^
  |                                                    |
  |                                                    this argument influences the return type of `insert`
note: method defined here
 --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/std/src/collections/hash/map.rs:1201:12

error[E0609]: no field `price` on type `&HashMap<&str, &str>`
 --> /workspace/mochi/tests/machine/x/rust/dataset_sort_take_limit.rs:3:98
  |
3 |     let expensive = { let mut tmp1 = Vec::new();for p in &products { let tmp2 = p; let tmp3 = -p.price; tmp1.push((tmp3, tmp2)); } tmp1.s...
  |                                                                                                  ^^^^^ unknown field

error: aborting due to 8 previous errors

Some errors have detailed explanations: E0308, E0609.
For more information about an error, try `rustc --explain E0308`.

fn main() {
