// Generated by Mochi compiler v0.10.28 on 1970-01-01T00:00:00Z
fn main() {
    let xs = vec![1, 2, 3];
    let ys = { let mut tmp1 = Vec::new();for &x in &xs { if !(x % 2 == 1) { continue; } tmp1.push(x); } tmp1 };
    println!("{}", vec![format!("{}", if ys.contains(&1) {1} else {0})].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", if ys.contains(&2) {1} else {0})].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    let m = { let mut m = std::collections::BTreeMap::new(); m.insert("a", 1); m };
    println!("{}", vec![format!("{}", if m.contains_key(&"a") {1} else {0})].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", if m.contains_key(&"b") {1} else {0})].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    let s = "hello";
    println!("{}", vec![format!("{}", if s.contains("ell") {1} else {0})].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
    println!("{}", vec![format!("{}", if s.contains("foo") {1} else {0})].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
}
