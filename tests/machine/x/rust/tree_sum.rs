// Generated by Mochi compiler v0.10.27 on 1970-01-01T00:00:00Z
#[derive(Debug, Clone)]
enum Tree {
        Leaf,
        Node { left: Box<Tree>, value: i32, right: Box<Tree> },
}

fn main() {
    fn sum_tree(t: &Tree) -> i32 {
        return match t {Tree::Leaf => 0, Tree::Node { left: left, value: value, right: right } => sum_tree(&left) + value + sum_tree(&right), };
    }
    let t = Tree::Node { left: Box::new(Tree::Leaf), value: 1, right: Box::new(Tree::Node { left: Box::new(Tree::Leaf), value: 2, right: Box::new(Tree::Leaf) }) };
    println!("{}", vec![format!("{}", sum_tree(&t.clone()))].into_iter().filter(|s| !s.is_empty()).collect::<Vec<_>>().join(" ") );
}
