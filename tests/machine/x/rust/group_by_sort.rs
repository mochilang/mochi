// Generated by Mochi compiler v0.10.28 on 1970-01-01T00:00:00Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item {
    cat: &'static str,
    val: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Group {
    key: &'static str,
    items: Vec<Item>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    cat: &'static str,
    total: i32,
}

fn main() {
    let items = vec![Item { cat: "a", val: 3 }, Item { cat: "a", val: 1 }, Item { cat: "b", val: 5 }, Item { cat: "b", val: 2 }];
    let grouped = { let mut tmp1 = std::collections::HashMap::new();for i in &items { let key = i.cat; tmp1.entry(key).or_insert_with(Vec::new).push(i.clone()); } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); tmp2.sort_by(|a,b| (-{ let mut tmp3 = Vec::new();for x in &a.clone().items { tmp3.push(x.val); } tmp3 }.iter().copied().sum::<i32>()).partial_cmp(&(-{ let mut tmp3 = Vec::new();for x in &b.clone().items { tmp3.push(x.val); } tmp3 }.iter().copied().sum::<i32>())).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { cat: g.key, total: { let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.val); } tmp4 }.iter().copied().sum::<i32>() }); } result };
    { for (i, it) in grouped.iter().enumerate() { if i > 0 { print!(" "); } print!("{:?}", it); } println!(); };
}
