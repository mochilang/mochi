#!/usr/bin/env escript
%% Generated by Mochi compiler v0.10.27 on 2025-07-17T08:58:22Z
% group_by_conditional_sum.erl - generated from group_by_conditional_sum.mochi

main(_) ->
    Items = [#{cat => "a", val => 10, flag => true}, #{cat => "a", val => 5, flag => false}, #{cat => "b", val => 20, flag => true}],
    Result = [V || {_, V} <- lists:keysort(1, [{Key0, #{cat => Key0, share => (lists:sum([(case mochi_get(flag, X) of undefined -> 0; false -> 0; _ -> mochi_get(val, X) end) || X <- Val0]) / lists:sum([mochi_get(val, X) || X <- Val0]))}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{mochi_get(cat, I), I} || I <- Items]))])],
    io:format("~p~n", [Result]).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
