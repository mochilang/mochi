#!/usr/bin/env escript
%% Generated by Mochi compiler v0.10.27 on 2025-07-17T07:14:49Z
% left_join_multi.erl - generated from left_join_multi.mochi

main(_) ->
    Customers = [#{id => 1, name => "Alice"}, #{id => 2, name => "Bob"}],
    Orders = [#{id => 100, customerId => 1}, #{id => 101, customerId => 2}],
    Items = [#{orderId => 100, sku => "a"}],
    Result = [#{orderId => mochi_get(id, O), name => mochi_get(name, C), item => I} || O <- Orders, C <- Customers, {O, I} <- mochi_left_join_item(O, Items, fun(O, I) -> (mochi_get(id, O) == mochi_get(orderId, I)) end), (mochi_get(customerId, O) == mochi_get(id, C))],
    io:format("~p~n", ["--- Left Join Multi ---"]),
    lists:foreach(fun(R) -> io:format("~p ~p ~p~n", [mochi_get(orderId, R), mochi_get(name, R), mochi_get(item, R)]) end, Result).

mochi_left_join_item(A, B, Fun) ->
    Matches = [ {A, J} || J <- B, Fun(A, J) ],
    case Matches of
        [] -> [{A, undefined}];
        _ -> Matches
    end.

mochi_left_join(L, R, Fun) ->
    lists:flatmap(fun(X) -> mochi_left_join_item(X, R, Fun) end, L).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
