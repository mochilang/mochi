#!/usr/bin/env escript
%% Generated by Mochi compiler v0.10.27 on 2025-07-17T08:58:23Z
% group_by_join.erl - generated from group_by_join.mochi

main(_) ->
    Customers = [#{id => 1, name => "Alice"}, #{id => 2, name => "Bob"}],
    Orders = [#{id => 100, customerId => 1}, #{id => 101, customerId => 1}, #{id => 102, customerId => 2}],
    Stats = [#{name => Key0, count => (case Val0 of #{items := It0} -> length(It0); _ -> length(Val0) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{mochi_get(name, C), #{o => O, c => C}} || O <- Orders, C <- Customers, (mochi_get(customerId, O) == mochi_get(id, C))]))],
    io:format("~p~n", ["--- Orders per customer ---"]),
    lists:foreach(fun(S) -> io:format("~p ~p ~p~n", [mochi_get(name, S), "orders:", mochi_get(count, S)]) end, Stats).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
