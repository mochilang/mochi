#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.27 on 2025-07-17T01:32:29Z
% group_by.erl - generated from group_by.mochi

main(_) ->
    People = [#{name => "Alice", age => 30, city => "Paris"}, #{name => "Bob", age => 15, city => "Hanoi"}, #{name => "Charlie", age => 65, city => "Paris"}, #{name => "Diana", age => 45, city => "Hanoi"}, #{name => "Eve", age => 70, city => "Paris"}, #{name => "Frank", age => 22, city => "Hanoi"}],
    Stats = [#{city => Key0, count => (case Val0 of #{items := It0} -> length(It0); _ -> length(Val0) end), avg_age => (lists:sum([mochi_get(age, P) || P <- Val0]) / length([mochi_get(age, P) || P <- Val0]))} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{mochi_get(city, Person), Person} || Person <- People]))],
    io:format("~p~n", ["--- People grouped by city ---"]),
    lists:foreach(fun(S) -> io:format("~p ~p ~p ~p ~p~n", [mochi_get(city, S), ": count =", mochi_get(count, S), ", avg_age =", mochi_get(avg_age, S)]) end, Stats).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
