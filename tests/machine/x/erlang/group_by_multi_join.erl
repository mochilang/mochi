#!/usr/bin/env escript
%% Generated by Mochi compiler v0.10.27 on 2025-07-17T08:48:24Z
% group_by_multi_join.erl - generated from group_by_multi_join.mochi

main(_) ->
    Nations = [#{id => 1, name => "A"}, #{id => 2, name => "B"}],
    Suppliers = [#{id => 1, nation => 1}, #{id => 2, nation => 2}],
    Partsupp = [#{part => 100, supplier => 1, cost => 10, qty => 2}, #{part => 100, supplier => 2, cost => 20, qty => 1}, #{part => 200, supplier => 1, cost => 5, qty => 3}],
    Filtered = [#{part => mochi_get(part, Ps), value => (mochi_get(cost, Ps) * mochi_get(qty, Ps))} || Ps <- Partsupp, S <- Suppliers, N <- Nations, (mochi_get(id, S) == mochi_get(supplier, Ps)), (mochi_get(id, N) == mochi_get(nation, S)), (mochi_get(name, N) == "A")],
    Grouped = [#{part => Key0, total => lists:sum([mochi_get(value, R) || R <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{mochi_get(part, X), X} || X <- Filtered]))],
    io:format("~p~n", [Grouped]).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
