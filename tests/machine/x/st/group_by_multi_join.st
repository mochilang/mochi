" Generated by Mochi compiler v0.10.25 on 2025-07-13T05:07:58Z
"
| nations suppliers partsupp filtered grouped |
nations := {Dictionary from:{'id'->1. 'name'->'A'}. Dictionary from:{'id'->2. 'name'->'B'}}.
suppliers := {Dictionary from:{'id'->1. 'nation'->1}. Dictionary from:{'id'->2. 'nation'->2}}.
partsupp := {Dictionary from:{'part'->100. 'supplier'->1. 'cost'->10. 'qty'->2}. Dictionary from:{'part'->100. 'supplier'->2. 'cost'->20. 'qty'->1}. Dictionary from:{'part'->200. 'supplier'->1. 'cost'->5. 'qty'->3}}.
filtered := [ | tmp |
  tmp := OrderedCollection new.
  partsupp do: [:ps |
    suppliers do: [:s |
      nations do: [:n |
        (((((n at: 'name') = 'A') and: [(s.id = ps.supplier)]) and: [(n.id = s.nation)])) ifTrue: [
          tmp add: Dictionary from:{'part'->ps at: 'part'. 'value'->((ps at: 'cost') * (ps at: 'qty'))}.
        ].
      ].
    ].
  ].
  tmp
] value.
grouped := [ | groups tmp |
  groups := Dictionary new.
  tmp := OrderedCollection new.
  filtered do: [:x |
    | g |
    g := groups at: x at: 'part' ifAbsentPut:[OrderedCollection new].
    g add: Dictionary from:{#x->x}.
  ].
  groups keysAndValuesDo: [:k :grp |
    | g |
    g := Dictionary from:{'key'->k. 'items'->grp}.
    tmp add: Dictionary from:{'part'->g.key. 'total'->([ | tmp |
  tmp := OrderedCollection new.
  g do: [:r |
    tmp add: r at: 'value'.
  ].
  tmp
] value inject: 0 into: [:s :x | s + x])}.
  ].
  tmp
] value.
Transcript show: (grouped) printString; cr.
