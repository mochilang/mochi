" Generated by Mochi compiler v0.10.26 on 2025-07-16T17:40:19Z
"
| filtered grouped nations partsupp suppliers |
nations := {Dictionary from: {'id' -> 1. 'name' -> 'A'}. Dictionary from: {'id' -> 2. 'name' -> 'B'}}.
suppliers := {Dictionary from: {'id' -> 1. 'nation' -> 1}. Dictionary from: {'id' -> 2. 'nation' -> 2}}.
partsupp := {Dictionary from: {'part' -> 100. 'supplier' -> 1. 'cost' -> 10. 'qty' -> 2}. Dictionary from: {'part' -> 100. 'supplier' -> 2. 'cost' -> 20. 'qty' -> 1}. Dictionary from: {'part' -> 200. 'supplier' -> 1. 'cost' -> 5. 'qty' -> 3}}.
filtered := [ | tmp |
  tmp := OrderedCollection new.
  partsupp do: [:ps |
    suppliers do: [:s |
      nations do: [:n |
        ((((n.name = 'A') and: [(s.id = ps.supplier)]) and: [(n.id = s.nation)])) ifTrue: [
          tmp add: Dictionary from: {'part' -> ps.part. 'value' -> (ps.cost * ps.qty)}.
        ].
      ].
    ].
  ].
  tmp
] value.
grouped := [ | groups res |
  groups := Dictionary new.
  filtered do: [:x |
    | g k |
    k := x.part.
    g := groups at: k ifAbsentPut: [OrderedCollection new].
    g add: x.
  ]
  res := OrderedCollection new.
  groups keysAndValuesDo: [:k :items |
    | g |
    g := Dictionary from: {#key->k. #items->items}.
    res add: Dictionary from: {'part' -> g.key. 'total' -> ([ | tmp |
  tmp := OrderedCollection new.
  g do: [:r |
    tmp add: r.value.
  ].
  tmp
] value inject: 0 into: [:s :x | s + x])}.
  ].
  res
] value.
Transcript show: (grouped) printString; cr.
