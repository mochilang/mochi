" Generated by Mochi compiler v0.10.26 on 2025-07-16T16:27:27Z
"
| customer end_date lineitem nation orders result start_date |
nation := {Dictionary from: {'n_nationkey' -> 1. 'n_name' -> 'BRAZIL'}}.
customer := {Dictionary from: {'c_custkey' -> 1. 'c_name' -> 'Alice'. 'c_acctbal' -> 100. 'c_nationkey' -> 1. 'c_address' -> '123 St'. 'c_phone' -> '123-456'. 'c_comment' -> 'Loyal'}}.
orders := {Dictionary from: {'o_orderkey' -> 1000. 'o_custkey' -> 1. 'o_orderdate' -> '1993-10-15'}. Dictionary from: {'o_orderkey' -> 2000. 'o_custkey' -> 1. 'o_orderdate' -> '1994-01-02'}}.
lineitem := {Dictionary from: {'l_orderkey' -> 1000. 'l_returnflag' -> 'R'. 'l_extendedprice' -> 1000. 'l_discount' -> 0.1}. Dictionary from: {'l_orderkey' -> 2000. 'l_returnflag' -> 'N'. 'l_extendedprice' -> 500. 'l_discount' -> 0}}.
start_date := '1993-10-01'.
end_date := '1994-01-01'.
result := [ | groups res |
  groups := Dictionary new.
  customer do: [:c |
    orders do: [:o |
      lineitem do: [:l |
        nation do: [:n |
          (((((((o.o_orderdate >= start_date) and: [(o.o_orderdate < end_date)]) and: [(l.l_returnflag = 'R')]) and: [(o.o_custkey = c.c_custkey)]) and: [(l.l_orderkey = o.o_orderkey)]) and: [(n.n_nationkey = c.c_nationkey)])) ifTrue: [
            | g k |
            k := Dictionary from: {'c_custkey' -> c.c_custkey. 'c_name' -> c.c_name. 'c_acctbal' -> c.c_acctbal. 'c_address' -> c.c_address. 'c_phone' -> c.c_phone. 'c_comment' -> c.c_comment. 'n_name' -> n.n_name}.
            g := groups at: k ifAbsentPut: [OrderedCollection new].
            g add: c.
          ]
        ]
      ]
    ]
  ]
  res := OrderedCollection new.
  groups keysAndValuesDo: [:k :items |
    | g |
    g := Dictionary from: {#key->k. #items->items}.
    res add: Dictionary from: {'c_custkey' -> g.key.c_custkey. 'c_name' -> g.key.c_name. 'revenue' -> ([ | tmp |
  tmp := OrderedCollection new.
  g do: [:x |
    tmp add: (x.l.l_extendedprice * (1 - x.l.l_discount)).
  ].
  tmp
] value inject: 0 into: [:s :x | s + x]). 'c_acctbal' -> g.key.c_acctbal. 'n_name' -> g.key.n_name. 'c_address' -> g.key.c_address. 'c_phone' -> g.key.c_phone. 'c_comment' -> g.key.c_comment}.
  ].
  res := res asSortedCollection: [:a :b | -([ | tmp |
  tmp := OrderedCollection new.
  a do: [:x |
    tmp add: (x.l.l_extendedprice * (1 - x.l.l_discount)).
  ].
  tmp
] value inject: 0 into: [:s :x | s + x]) < -([ | tmp |
  tmp := OrderedCollection new.
  b do: [:x |
    tmp add: (x.l.l_extendedprice * (1 - x.l.l_discount)).
  ].
  tmp
] value inject: 0 into: [:s :x | s + x])].
  res
] value.
Transcript show: (result) printString; cr.
