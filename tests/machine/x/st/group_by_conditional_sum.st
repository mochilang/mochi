" Generated by Mochi compiler v0.10.26 on 2025-07-16T17:40:19Z
"
| items result |
items := {Dictionary from: {'cat' -> 'a'. 'val' -> 10. 'flag' -> true}. Dictionary from: {'cat' -> 'a'. 'val' -> 5. 'flag' -> false}. Dictionary from: {'cat' -> 'b'. 'val' -> 20. 'flag' -> true}}.
result := [ | groups res |
  groups := Dictionary new.
  items do: [:i |
    | g k |
    k := i.cat.
    g := groups at: k ifAbsentPut: [OrderedCollection new].
    g add: i.
  ]
  res := OrderedCollection new.
  groups keysAndValuesDo: [:k :items |
    | g |
    g := Dictionary from: {#key->k. #items->items}.
    res add: Dictionary from: {'cat' -> g.key. 'share' -> (([ | tmp |
  tmp := OrderedCollection new.
  g do: [:x |
    tmp add: (x.flag) ifTrue: [x.val] ifFalse: [0].
  ].
  tmp
] value inject: 0 into: [:s :x | s + x]) / ([ | tmp |
  tmp := OrderedCollection new.
  g do: [:x |
    tmp add: x.val.
  ].
  tmp
] value inject: 0 into: [:s :x | s + x]))}.
  ].
  res := res asSortedCollection: [:a :b | a.key < b.key].
  res
] value.
Transcript show: (result) printString; cr.
