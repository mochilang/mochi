" Generated by Mochi compiler v0.10.25 on 2025-07-13T05:07:59Z
"
| customers orders result entry |
customers := {Dictionary from:{'id'->1. 'name'->'Alice'}. Dictionary from:{'id'->2. 'name'->'Bob'}. Dictionary from:{'id'->3. 'name'->'Charlie'}. Dictionary from:{'id'->4. 'name'->'Diana'}}.
orders := {Dictionary from:{'id'->100. 'customerId'->1. 'total'->250}. Dictionary from:{'id'->101. 'customerId'->2. 'total'->125}. Dictionary from:{'id'->102. 'customerId'->1. 'total'->300}}.
result := [ | tmp |
  tmp := OrderedCollection new.
  orders do: [:o |
    | c |
    c := customers detect: [:c | ((o.customerId = c.id)) ] ifAbsent:[nil].
    tmp add: Dictionary from:{'customerName'->c.name. 'order'->o}.
  ].
  tmp
] value.
Transcript show: '--- Right Join using syntax ---'; cr.
result do: [:entry |.
(entry at: 'order') ifTrue: [.
Transcript show: 'Customer'; show: ' '; show: (entry at: 'customerName') printString; show: ' '; show: 'has order'; show: ' '; show: (entry at: 'order' at: 'id') printString; show: ' '; show: '- $'; show: ' '; show: (entry at: 'order' at: 'total') printString; cr.
] ifFalse: [.
Transcript show: 'Customer'; show: ' '; show: (entry at: 'customerName') printString; show: ' '; show: 'has no orders'; cr.
].
].
.
