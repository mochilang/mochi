// Generated by Mochi compiler v0.10.26 on 2025-07-16T18:36:09Z
fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun String.starts_with(prefix: String): Boolean = this.startsWith(prefix)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from group_by_sort.mochi

data class Item(var cat: String, var `val`: Int)

val items = mutableListOf(Item(cat = "a", `val` = 3), Item(cat = "a", `val` = 1), Item(cat = "b", `val` = 5), Item(cat = "b", `val` = 2))

val grouped = run {
    val __groups = mutableMapOf<String, Group<String, Item>>()
    val __order = mutableListOf<String>()
    for (i in items) {
        val __k = i.cat
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<Item>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(i)
    }
    __order.sortByDescending { k ->
        val g = __groups[k]!!
        sum(run {
    val __res = mutableListOf<Int>()
    for (x in g) {
        __res.add(x.`val`)
    }
    __res
}) as Comparable<Any>
    }
    val __res = mutableListOf<Any?>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add(mutableMapOf("cat" to g.key, "total" to sum(run {
    val __res = mutableListOf<Int>()
    for (x in g) {
        __res.add(x.`val`)
    }
    __res
})))
    }
    __res
}

fun main() {
    println(grouped)
}
