// Generated by Mochi compiler v0.10.28 on 2025-07-18T07:10:54Z
data class Nation(var id: Int, var name: String)

data class Partsupp(var part: Int, var supplier: Int, var cost: Double, var qty: Int)

data class Row0(var part: Int, var value: Double)

data class Row1(var ps: Partsupp, var s: Supplier, var n: Nation)

data class Supplier(var id: Int, var nation: Int)

fun sum(list: List<Any?>): Number {
    var s = 0.0
    var allInt = true
    for (n in list) {
        val d = toDouble(n)
        if (d % 1.0 != 0.0) allInt = false
        s += d
    }
    return if (allInt) s.toInt() else s
}

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from group_by_multi_join.mochi

val nations = mutableListOf(Nation(id = 1, name = "A"), Nation(id = 2, name = "B"))

val suppliers = mutableListOf(Supplier(id = 1, nation = 1), Supplier(id = 2, nation = 2))

val partsupp = mutableListOf(Partsupp(part = 100, supplier = 1, cost = 10.0, qty = 2), Partsupp(part = 100, supplier = 2, cost = 20.0, qty = 1), Partsupp(part = 200, supplier = 1, cost = 5.0, qty = 3))

val filtered = run {
    val __res = mutableListOf<Row0>()
    for (ps in partsupp) {
        for (s in suppliers) {
            if (s.id == ps.supplier) {
                for (n in nations) {
                    if (n.id == s.nation) {
                        if (n.name == "A") {
                            __res.add(Row0(part = ps.part, value = ps.cost * (ps.qty).toDouble()))
                        }
                    }
                }
            }
        }
    }
    __res
}

val grouped = run {
    val __groups = mutableMapOf<Int, Group<Int, Row0>>()
    val __order = mutableListOf<Int>()
    for (x in filtered) {
        val __k = x.part
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<Row0>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(x)
    }
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add((mutableMapOf("part" to (g.key), "total" to (sum(run {
    val __res = mutableListOf<Double>()
    for (r in g) {
        __res.add(r.value)
    }
    __res
}))) as MutableMap<String, Any?>))
    }
    __res
}

fun main() {
    println(grouped)
}
