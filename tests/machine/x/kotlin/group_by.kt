// Generated by Mochi compiler v0.10.28 on 2025-07-18T07:10:38Z
data class People(var name: String, var age: Int, var city: String)

fun toDouble(v: Any?): Double = when (v) {
    is Double -> v
    is Int -> v.toDouble()
    is String -> v.toDouble()
    else -> 0.0
}

class Group<K, T>(val key: K, val items: MutableList<T>) : MutableList<T> by items
// Code generated from group_by.mochi

val people = mutableListOf(People(name = "Alice", age = 30, city = "Paris"), People(name = "Bob", age = 15, city = "Hanoi"), People(name = "Charlie", age = 65, city = "Paris"), People(name = "Diana", age = 45, city = "Hanoi"), People(name = "Eve", age = 70, city = "Paris"), People(name = "Frank", age = 22, city = "Hanoi"))

val stats = run {
    val __groups = mutableMapOf<String, Group<String, People>>()
    val __order = mutableListOf<String>()
    for (person in people) {
        val __k = person.city
        var __g = __groups[__k]
        if (__g == null) {
            __g = Group(__k, mutableListOf<People>())
            __groups[__k] = __g
            __order.add(__k)
        }
        __g.add(person)
    }
    val __res = mutableListOf<MutableMap<String, Any?>>()
    for (k in __order) {
        val g = __groups[k]!!
        __res.add((mutableMapOf("city" to (g.key), "count" to (g.size), "avg_age" to (run { val r = run {
    val __res = mutableListOf<Int>()
    for (p in g) {
        __res.add(p.age)
    }
    __res
}.map{ toDouble(it) }.average(); if (r % 1.0 == 0.0) r.toInt() else r })) as MutableMap<String, Any?>))
    }
    __res
}

fun main() {
    println("--- People grouped by city ---")
    for (s in stats) {
        println(listOf((s as MutableMap<String, Any?>)["city"], ": count =", (s as MutableMap<String, Any?>)["count"], ", avg_age =", (s as MutableMap<String, Any?>)["avg_age"]).joinToString(" "))
    }
}
