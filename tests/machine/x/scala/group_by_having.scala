// Generated by Mochi compiler v0.10.27 on 1970-01-01T00:00:00Z
object group_by_having {
  case class Big(city: String, num: Int)
  case class People(name: String, city: String)

  case class _Group[K,T](key: K, items: List[T]) extends Iterable[T] { def iterator: Iterator[T] = items.iterator }

  def main(args: Array[String]): Unit = {
    val people = List(Map("name" -> "Alice", "city" -> "Paris"), Map("name" -> "Bob", "city" -> "Hanoi"), Map("name" -> "Charlie", "city" -> "Paris"), Map("name" -> "Diana", "city" -> "Hanoi"), Map("name" -> "Eve", "city" -> "Paris"), Map("name" -> "Frank", "city" -> "Hanoi"), Map("name" -> "George", "city" -> "Paris"))
    val big = (((for { p <- people } yield (p.city, p)).groupBy(_._1).map{ case(k,list) => _Group(k, list.map(_._2)) }.toList).filter{ g => (g).size >= 4 }).map{ g => Map("city" -> g.key, "num" -> (g).size) }.toList
    println(scala.util.parsing.json.JSONArray(big.asInstanceOf[List[Any]]).toString())
  }
}
