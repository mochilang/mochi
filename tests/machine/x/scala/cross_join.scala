// Generated by Mochi compiler v0.10.27 on 1970-01-01T00:00:00Z
object cross_join {
  case class Customer(id: Int, name: String)
  case class Order(id: Int, customerId: Int, total: Int)
  case class Result(orderId: Int, orderCustomerId: Int, pairedCustomerName: String, orderTotal: Int)

  def main(args: Array[String]): Unit = {
    val customers = List(Map("id" -> 1, "name" -> "Alice"), Map("id" -> 2, "name" -> "Bob"), Map("id" -> 3, "name" -> "Charlie"))
    val orders = List(Map("id" -> 100, "customerId" -> 1, "total" -> 250), Map("id" -> 101, "customerId" -> 2, "total" -> 125), Map("id" -> 102, "customerId" -> 1, "total" -> 300))
    val result = for { o <- orders; c <- customers } yield Map("orderId" -> o.id, "orderCustomerId" -> o.customerId, "pairedCustomerName" -> c.name, "orderTotal" -> o.total)
    println("--- Cross Join: All order-customer pairs ---")
    for(entry <- result) {
      println(s"Order ${entry.orderId} (customerId: ${entry.orderCustomerId}, total: $$${entry.orderTotal}) paired with ${entry.pairedCustomerName}")
    }
  }
}
