// Generated by Mochi compiler v0.10.27 on 1970-01-01T00:00:00Z
object group_items_iteration {
  case class Data(tag: String, `val`: Int)

  case class _Group[K,T](key: K, items: List[T]) extends Iterable[T] { def iterator: Iterator[T] = items.iterator }

  def main(args: Array[String]): Unit = {
    val data = List(Map("tag" -> "a", "val" -> 1), Map("tag" -> "a", "val" -> 2), Map("tag" -> "b", "val" -> 3))
    val groups = ((for { d <- data } yield (d.tag, d)).groupBy(_._1).map{ case(k,list) => _Group(k, list.map(_._2)) }.toList).map{ g => g }.toList
    var tmp = scala.collection.mutable.ArrayBuffer[Any]()
    for(g <- groups) {
      var total = 0
      for(x <- g.items) {
        total += x.`val`
      }
      tmp = tmp :+ Map("tag" -> g.key, "total" -> total)
    }
    val result = (for { r <- tmp } yield r).sortBy(r => r("tag")).map(r => r)
    println(result)
  }
}
