exit status 1
/workspace/mochi/tests/machine/x/scala/group_by_multi_join_sort.scala:20: error: value c_custkey is not a member of scala.collection.immutable.Map[String,Any]
  val result = (((for { c <- customer; o <- orders; if (o.o_custkey).asInstanceOf[Int] == c.c_custkey; l <- lineitem; if (l.l_orderkey).asInstanceOf[Int] == o.o_orderkey; n <- nation; if (n.n_nationkey).asInstanceOf[Int] == c.c_nationkey; if o.o_orderdate >= start_date && o.o_orderdate < end_date && l.l_returnflag == "R" } yield (Map("c_custkey" -> c.c_custkey, "c_name" -> c.c_name, "c_acctbal" -> c.c_acctbal, "c_address" -> c.c_address, "c_phone" -> c.c_phone, "c_comment" -> c.c_comment, "n_name" -> n.n_name), Result(c = c, o = o, l = l, n = n))).groupBy(_._1).map{ case(k,list) => _Group(k, list.map(_._2)) }.toList).sortBy(g => -(for { x <- g } yield x.l.l_extendedprice * (1 - x.l.l_discount)).sum)).map{ g => Result1(c_custkey = g.key.c_custkey, c_name = g.key.c_name, revenue = (for { x <- g } yield x.l.l_extendedprice * (1 - x.l.l_discount)).sum, c_acctbal = g.key.c_acctbal, n_name = g.key.n_name, c_address = g.key.c_address, c_phone = g.key.c_phone, c_comment = g.key.c_comment) }.toList

/workspace/mochi/tests/machine/x/scala/group_by_multi_join_sort.scala:20: error: value c_name is not a member of scala.collection.immutable.Map[String,Any]
  val result = (((for { c <- customer; o <- orders; if (o.o_custkey).asInstanceOf[Int] == c.c_custkey; l <- lineitem; if (l.l_orderkey).asInstanceOf[Int] == o.o_orderkey; n <- nation; if (n.n_nationkey).asInstanceOf[Int] == c.c_nationkey; if o.o_orderdate >= start_date && o.o_orderdate < end_date && l.l_returnflag == "R" } yield (Map("c_custkey" -> c.c_custkey, "c_name" -> c.c_name, "c_acctbal" -> c.c_acctbal, "c_address" -> c.c_address, "c_phone" -> c.c_phone, "c_comment" -> c.c_comment, "n_name" -> n.n_name), Result(c = c, o = o, l = l, n = n))).groupBy(_._1).map{ case(k,list) => _Group(k, list.map(_._2)) }.toList).sortBy(g => -(for { x <- g } yield x.l.l_extendedprice * (1 - x.l.l_discount)).sum)).map{ g => Result1(c_custkey = g.key.c_custkey, c_name = g.key.c_name, revenue = (for { x <- g } yield x.l.l_extendedprice * (1 - x.l.l_discount)).sum, c_acctbal = g.key.c_acctbal, n_name = g.key.n_name, c_address = g.key.c_address, c_phone = g.key.c_phone, c_comment = g.key.c_comment) }.toList

/workspace/mochi/tests/machine/x/scala/group_by_multi_join_sort.scala:20: error: value c_acctbal is not a member of scala.collection.immutable.Map[String,Any]
  val result = (((for { c <- customer; o <- orders; if (o.o_custkey).asInstanceOf[Int] == c.c_custkey; l <- lineitem; if (l.l_orderkey).asInstanceOf[Int] == o.o_orderkey; n <- nation; if (n.n_nationkey).asInstanceOf[Int] == c.c_nationkey; if o.o_orderdate >= start_date && o.o_orderdate < end_date && l.l_returnflag == "R" } yield (Map("c_custkey" -> c.c_custkey, "c_name" -> c.c_name, "c_acctbal" -> c.c_acctbal, "c_address" -> c.c_address, "c_phone" -> c.c_phone, "c_comment" -> c.c_comment, "n_name" -> n.n_name), Result(c = c, o = o, l = l, n = n))).groupBy(_._1).map{ case(k,list) => _Group(k, list.map(_._2)) }.toList).sortBy(g => -(for { x <- g } yield x.l.l_extendedprice * (1 - x.l.l_discount)).sum)).map{ g => Result1(c_custkey = g.key.c_custkey, c_name = g.key.c_name, revenue = (for { x <- g } yield x.l.l_extendedprice * (1 - x.l.l_discount)).sum, c_acctbal = g.key.c_acctbal, n_name = g.key.n_name, c_address = g.key.c_address, c_phone = g.key.c_phone, c_comment = g.key.c_comment) }.toList

/workspace/mochi/tests/machine/x/scala/group_by_multi_join_sort.scala:20: error: value n_name is not a member of scala.collection.immutable.Map[String,Any]
  val result = (((for { c <- customer; o <- orders; if (o.o_custkey).asInstanceOf[Int] == c.c_custkey; l <- lineitem; if (l.l_orderkey).asInstanceOf[Int] == o.o_orderkey; n <- nation; if (n.n_nationkey).asInstanceOf[Int] == c.c_nationkey; if o.o_orderdate >= start_date && o.o_orderdate < end_date && l.l_returnflag == "R" } yield (Map("c_custkey" -> c.c_custkey, "c_name" -> c.c_name, "c_acctbal" -> c.c_acctbal, "c_address" -> c.c_address, "c_phone" -> c.c_phone, "c_comment" -> c.c_comment, "n_name" -> n.n_name), Result(c = c, o = o, l = l, n = n))).groupBy(_._1).map{ case(k,list) => _Group(k, list.map(_._2)) }.toList).sortBy(g => -(for { x <- g } yield x.l.l_extendedprice * (1 - x.l.l_discount)).sum)).map{ g => Result1(c_custkey = g.key.c_custkey, c_name = g.key.c_name, revenue = (for { x <- g } yield x.l.l_extendedprice * (1 - x.l.l_discount)).sum, c_acctbal = g.key.c_acctbal, n_name = g.key.n_name, c_address = g.key.c_address, c_phone = g.key.c_phone, c_comment = g.key.c_comment) }.toList

/workspace/mochi/tests/machine/x/scala/group_by_multi_join_sort.scala:20: error: value c_address is not a member of scala.collection.immutable.Map[String,Any]
  val result = (((for { c <- customer; o <- orders; if (o.o_custkey).asInstanceOf[Int] == c.c_custkey; l <- lineitem; if (l.l_orderkey).asInstanceOf[Int] == o.o_orderkey; n <- nation; if (n.n_nationkey).asInstanceOf[Int] == c.c_nationkey; if o.o_orderdate >= start_date && o.o_orderdate < end_date && l.l_returnflag == "R" } yield (Map("c_custkey" -> c.c_custkey, "c_name" -> c.c_name, "c_acctbal" -> c.c_acctbal, "c_address" -> c.c_address, "c_phone" -> c.c_phone, "c_comment" -> c.c_comment, "n_name" -> n.n_name), Result(c = c, o = o, l = l, n = n))).groupBy(_._1).map{ case(k,list) => _Group(k, list.map(_._2)) }.toList).sortBy(g => -(for { x <- g } yield x.l.l_extendedprice * (1 - x.l.l_discount)).sum)).map{ g => Result1(c_custkey = g.key.c_custkey, c_name = g.key.c_name, revenue = (for { x <- g } yield x.l.l_extendedprice * (1 - x.l.l_discount)).sum, c_acctbal = g.key.c_acctbal, n_name = g.key.n_name, c_address = g.key.c_address, c_phone = g.key.c_phone, c_comment = g.key.c_comment) }.toList

/workspace/mochi/tests/machine/x/scala/group_by_multi_join_sort.scala:20: error: value c_phone is not a member of scala.collection.immutable.Map[String,Any]
  val result = (((for { c <- customer; o <- orders; if (o.o_custkey).asInstanceOf[Int] == c.c_custkey; l <- lineitem; if (l.l_orderkey).asInstanceOf[Int] == o.o_orderkey; n <- nation; if (n.n_nationkey).asInstanceOf[Int] == c.c_nationkey; if o.o_orderdate >= start_date && o.o_orderdate < end_date && l.l_returnflag == "R" } yield (Map("c_custkey" -> c.c_custkey, "c_name" -> c.c_name, "c_acctbal" -> c.c_acctbal, "c_address" -> c.c_address, "c_phone" -> c.c_phone, "c_comment" -> c.c_comment, "n_name" -> n.n_name), Result(c = c, o = o, l = l, n = n))).groupBy(_._1).map{ case(k,list) => _Group(k, list.map(_._2)) }.toList).sortBy(g => -(for { x <- g } yield x.l.l_extendedprice * (1 - x.l.l_discount)).sum)).map{ g => Result1(c_custkey = g.key.c_custkey, c_name = g.key.c_name, revenue = (for { x <- g } yield x.l.l_extendedprice * (1 - x.l.l_discount)).sum, c_acctbal = g.key.c_acctbal, n_name = g.key.n_name, c_address = g.key.c_address, c_phone = g.key.c_phone, c_comment = g.key.c_comment) }.toList
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ^
/workspace/mochi/tests/machine/x/scala/group_by_multi_join_sort.scala:20: error: value c_comment is not a member of scala.collection.immutable.Map[String,Any]
  val result = (((for { c <- customer; o <- orders; if (o.o_custkey).asInstanceOf[Int] == c.c_custkey; l <- lineitem; if (l.l_orderkey).asInstanceOf[Int] == o.o_orderkey; n <- nation; if (n.n_nationkey).asInstanceOf[Int] == c.c_nationkey; if o.o_orderdate >= start_date && o.o_orderdate < end_date && l.l_returnflag == "R" } yield (Map("c_custkey" -> c.c_custkey, "c_name" -> c.c_name, "c_acctbal" -> c.c_acctbal, "c_address" -> c.c_address, "c_phone" -> c.c_phone, "c_comment" -> c.c_comment, "n_name" -> n.n_name), Result(c = c, o = o, l = l, n = n))).groupBy(_._1).map{ case(k,list) => _Group(k, list.map(_._2)) }.toList).sortBy(g => -(for { x <- g } yield x.l.l_extendedprice * (1 - x.l.l_discount)).sum)).map{ g => Result1(c_custkey = g.key.c_custkey, c_name = g.key.c_name, revenue = (for { x <- g } yield x.l.l_extendedprice * (1 - x.l.l_discount)).sum, c_acctbal = g.key.c_acctbal, n_name = g.key.n_name, c_address = g.key.c_address, c_phone = g.key.c_phone, c_comment = g.key.c_comment) }.toList

7 errors found
