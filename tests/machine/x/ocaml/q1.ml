(* Generated by Mochi compiler v0.10.25 on 2025-07-13T05:04:37Z *)
let sum lst = List.fold_left (+) 0 lst
type ('k,'v) group = { key : 'k; items : 'v list }

type record1 = { mutable l_quantity : int; mutable l_extendedprice : float; mutable l_discount : float; mutable l_tax : float; mutable l_returnflag : string; mutable l_linestatus : string; mutable l_shipdate : string }
type record2 = { mutable returnflag : string; mutable linestatus : string }
type record3 = { mutable returnflag : Obj.t; mutable linestatus : Obj.t; mutable sum_qty : float; mutable sum_base_price : float; mutable sum_disc_price : float; mutable sum_charge : float; mutable avg_qty : float; mutable avg_price : float; mutable avg_disc : float; mutable count_order : int }
type record4 = { mutable returnflag : string; mutable linestatus : string; mutable sum_qty : float; mutable sum_base_price : float; mutable sum_disc_price : float; mutable sum_charge : float; mutable avg_qty : float; mutable avg_price : float; mutable avg_disc : float; mutable count_order : int }
type record5 = { mutable returnflag : string; mutable linestatus : string; mutable sum_qty : int; mutable sum_base_price : int; mutable sum_disc_price : float; mutable sum_charge : float; mutable avg_qty : float; mutable avg_price : int; mutable avg_disc : float; mutable count_order : int }

let lineitem : record1 list = [{ l_quantity = 17; l_extendedprice = 1000.; l_discount = 0.05; l_tax = 0.07; l_returnflag = "N"; l_linestatus = "O"; l_shipdate = "1998-08-01" };{ l_quantity = 36; l_extendedprice = 2000.; l_discount = 0.1; l_tax = 0.05; l_returnflag = "N"; l_linestatus = "O"; l_shipdate = "1998-09-01" };{ l_quantity = 25; l_extendedprice = 1500.; l_discount = 0.; l_tax = 0.08; l_returnflag = "R"; l_linestatus = "F"; l_shipdate = "1998-09-03" }]
let result : record4 list = (let (__groups0 : (record2 * record1 list) list ref) = ref [] in
  List.iter (fun (row : record1) ->
      if (row.l_shipdate <= "1998-09-02") then (
      let (key : record2) = { returnflag = row.l_returnflag; linestatus = row.l_linestatus } in
      let cur = try List.assoc key !__groups0 with Not_found -> [] in
      __groups0 := (key, row :: cur) :: List.remove_assoc key !__groups0);
  ) lineitem;
  let __res0 = ref [] in
  List.iter (fun ((gKey : record2), gItems) ->
    let g = { key = gKey; items = List.rev gItems } in
    __res0 := { returnflag = g.key.returnflag; linestatus = g.key.linestatus; sum_qty = (sum (let __res1 = ref [] in
  List.iter (fun x ->
      __res1 := x.l_quantity :: !__res1;
  ) g.items;
List.rev !__res1)
); sum_base_price = (sum (let __res2 = ref [] in
  List.iter (fun x ->
      __res2 := x.l_extendedprice :: !__res2;
  ) g.items;
List.rev !__res2)
); sum_disc_price = (sum (let __res3 = ref [] in
  List.iter (fun x ->
      __res3 := (x.l_extendedprice *. ((1 -. x.l_discount))) :: !__res3;
  ) g.items;
List.rev !__res3)
); sum_charge = (sum (let __res4 = ref [] in
  List.iter (fun x ->
      __res4 := ((x.l_extendedprice *. ((1 -. x.l_discount))) *. ((1 +. x.l_tax))) :: !__res4;
  ) g.items;
List.rev !__res4)
); avg_qty = (float_of_int (List.fold_left (+) 0 (let __res5 = ref [] in
  List.iter (fun x ->
      __res5 := x.l_quantity :: !__res5;
  ) g.items;
List.rev !__res5)
) /. float_of_int (List.length (let __res5 = ref [] in
  List.iter (fun x ->
      __res5 := x.l_quantity :: !__res5;
  ) g.items;
List.rev !__res5)
)); avg_price = (float_of_int (List.fold_left (+) 0 (let __res6 = ref [] in
  List.iter (fun x ->
      __res6 := x.l_extendedprice :: !__res6;
  ) g.items;
List.rev !__res6)
) /. float_of_int (List.length (let __res6 = ref [] in
  List.iter (fun x ->
      __res6 := x.l_extendedprice :: !__res6;
  ) g.items;
List.rev !__res6)
)); avg_disc = (float_of_int (List.fold_left (+) 0 (let __res7 = ref [] in
  List.iter (fun x ->
      __res7 := x.l_discount :: !__res7;
  ) g.items;
List.rev !__res7)
) /. float_of_int (List.length (let __res7 = ref [] in
  List.iter (fun x ->
      __res7 := x.l_discount :: !__res7;
  ) g.items;
List.rev !__res7)
)); count_order = List.length g.items } :: !__res0
  ) !__groups0;
  List.rev !__res0)


let () =
  json result;
  assert ((result = [{ returnflag = "N"; linestatus = "O"; sum_qty = 53; sum_base_price = 3000; sum_disc_price = (950. +. 1800.); sum_charge = (((950. *. 1.07)) +. ((1800. *. 1.05))); avg_qty = 26.5; avg_price = 1500; avg_disc = 0.07500000000000001; count_order = 2 }]))

