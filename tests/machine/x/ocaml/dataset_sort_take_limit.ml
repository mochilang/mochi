(* Generated by Mochi compiler v0.10.25 on 2025-07-13T05:30:35Z *)
  let rec __show v =
    let open Obj in
    let rec list_aux o =
      if is_int o && (magic (obj o) : int) = 0 then "" else
       let hd = field o 0 in
       let tl = field o 1 in
       let rest = list_aux tl in
       if rest = "" then __show (obj hd) else __show (obj hd) ^ "; " ^ rest
    in
    let r = repr v in
    if is_int r then string_of_int (magic v) else
    match tag r with
      | 0 -> if size r = 0 then "[]" else "[" ^ list_aux r ^ "]"
      | 252 -> (magic v : string)
      | 253 -> string_of_float (magic v)
      | _ -> "<value>"

  exception Break
  exception Continue


  type record1 = { mutable name : string; mutable price : int }

let products : record1 list = [{ name = "Laptop"; price = 1500 };{ name = "Smartphone"; price = 900 };{ name = "Tablet"; price = 600 };{ name = "Monitor"; price = 300 };{ name = "Keyboard"; price = 100 };{ name = "Mouse"; price = 50 };{ name = "Headphones"; price = 200 }]
let expensive : record1 list = (let __res0 = ref [] in
  List.iter (fun (p : record1) ->
      __res0 := p :: !__res0;
  ) products;
List.rev !__res0)


let () =
  print_endline "--- Top products (excluding most expensive) ---";
  let rec __loop1 lst =
    match lst with
      | [] -> ()
      | (item : record1)::rest ->
        (try
          print_endline (__show (item.name) ^ " " ^ __show ("costs $") ^ " " ^ __show (item.price));
        with Continue -> ())
        ; __loop1 rest
    in
    try __loop1 expensive with Break -> ()
