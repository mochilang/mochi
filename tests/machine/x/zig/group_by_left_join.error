zig build error: exit status 1
/workspace/mochi/tests/machine/x/zig/group_by_left_join.zig:63:144: error: expected type 'bool', found 'group_by_left_join.OrdersItem'
/workspace/mochi/tests/machine/x/zig/group_by_left_join.zig:31:20: note: struct declared here

// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:29:18Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _equal(a: anytype, b: anytype) bool {
    if (@TypeOf(a) != @TypeOf(b)) return false;
    return std.meta.eql(a, b);
}

const CustomersItem = struct {
    id: i32,
    name: []const u8,
};
const customers = &[_]CustomersItem{
    CustomersItem{
    .id = 1,
    .name = "Alice",
},
    CustomersItem{
    .id = 2,
    .name = "Bob",
},
    CustomersItem{
    .id = 3,
    .name = "Charlie",
},
}; // []const CustomersItem
const OrdersItem = struct {
    id: i32,
    customerId: i32,
};
const orders = &[_]OrdersItem{
    OrdersItem{
    .id = 100,
    .customerId = 1,
},
    OrdersItem{
    .id = 101,
    .customerId = 1,
},
    OrdersItem{
    .id = 102,
    .customerId = 2,
},
}; // []const OrdersItem
const StatsItem = struct {
    name: []const u8,
    count: i32,
};
const ResultStruct5 = struct {
    c: CustomersItem,
    o: OrdersItem,
};
const ResultStruct6 = struct { key: []const u8, Items: std.ArrayList(ResultStruct5) };
var stats: []const StatsItem = undefined; // []const StatsItem

pub fn main() void {
    stats = blk2: { var _tmp7 = std.ArrayList(ResultStruct6).init(std.heap.page_allocator); for (customers) |c| { for (orders) |o| { if (!((o.customerId == c.id))) continue; const _tmp8 = c.name; var _found = false; var _idx: usize = 0; for (_tmp7.items, 0..) |it, i| { if (_equal(it.key, _tmp8)) { _found = true; _idx = i; break; } } if (_found) { _tmp7.items[_idx].Items.append(ResultStruct5{ .c = c, .o = o }) catch |err| handleError(err); } else { var g = ResultStruct6{ .key = _tmp8, .Items = std.ArrayList(ResultStruct5).init(std.heap.page_allocator) }; g.Items.append(ResultStruct5{ .c = c, .o = o }) catch |err| handleError(err); _tmp7.append(g) catch |err| handleError(err); } } } var _tmp9 = std.ArrayList(ResultStruct6).init(std.heap.page_allocator);for (_tmp7.items) |g| { _tmp9.append(g) catch |err| handleError(err); } var _tmp10 = std.ArrayList(StatsItem).init(std.heap.page_allocator);for (_tmp9.items) |g| { _tmp10.append(StatsItem{
    .name = g.key,
    .count = @as(i32, @intCast((blk1: { var _tmp3 = std.ArrayList(CustomersItem).init(std.heap.page_allocator); for (g.Items.items) |r| { if (!(r.o)) continue; _tmp3.append(r) catch |err| handleError(err); } const _tmp4 = _tmp3.toOwnedSlice() catch |err| handleError(err); break :blk1 _tmp4; }).len)),
}) catch |err| handleError(err); } const _tmp10Slice = _tmp10.toOwnedSlice() catch |err| handleError(err); break :blk2 _tmp10Slice; };
    std.debug.print("--- Group Left Join ---\n", .{});
    for (stats) |s| {
        std.debug.print("{any} {s} {any}\n", .{s.name, "orders:", s.count});
    }
}
