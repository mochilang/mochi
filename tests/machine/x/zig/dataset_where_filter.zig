// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:59:22Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

const PeopleItem = struct {
    name: []const u8,
    age: i32,
};
const people = &[_]PeopleItem{
    PeopleItem{
    .name = "Alice",
    .age = 30,
},
    PeopleItem{
    .name = "Bob",
    .age = 15,
},
    PeopleItem{
    .name = "Charlie",
    .age = 65,
},
    PeopleItem{
    .name = "Diana",
    .age = 45,
},
}; // []const PeopleItem
const AdultsItem = struct {
    name: []const u8,
    age: i32,
    is_senior: bool,
};
var adults: []const AdultsItem = undefined; // []const AdultsItem

pub fn main() void {
    adults = blk0: { var _tmp1 = std.ArrayList(AdultsItem).init(std.heap.page_allocator); for (people) |person| { if (!((person.age >= 18))) continue; _tmp1.append(AdultsItem{
    .name = person.name,
    .age = person.age,
    .is_senior = (person.age >= 60),
}) catch |err| handleError(err); } const _tmp2 = _tmp1.toOwnedSlice() catch |err| handleError(err); break :blk0 _tmp2; };
    std.debug.print("--- Adults ---\n", .{});
    for (adults) |person| {
        std.debug.print("{any} {s} {any} {s}\n", .{person.name, "is", person.age, if (person.is_senior) (" (senior)") else ("")});
    }
}
