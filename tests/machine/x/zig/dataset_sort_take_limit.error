Error on line 28: zig build error: exit status 1
/workspace/mochi/tests/machine/x/zig/dataset_sort_take_limit.zig:28:139: error: expected type 'i32', found '*const [4:0]u8'
/tmp/zig-0.12.0/lib/std/hash_map.zig:551:38: note: parameter type declared here
/tmp/zig-0.12.0/lib/std/hash_map.zig:14:13: error: std.auto_hash.autoHash does not allow slices here ([]const u8) because the intent is unclear. Consider using std.StringHashMap for hashing the contents of []const u8. Alternatively, consider using std.auto_hash.hash or providing your own hash function instead.
/tmp/zig-0.12.0/lib/std/hash_map.zig:55:39: note: called from here

27: pub fn main() void {
28:     products = &[_]std.AutoHashMap([]const u8, i32){blk0: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("name", "Laptop") catch unreachable; m.put("price", 1500) catch unreachable; break :blk0 m; }, blk1: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("name", "Smartphone") catch unreachable; m.put("price", 900) catch unreachable; break :blk1 m; }, blk2: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("name", "Tablet") catch unreachable; m.put("price", 600) catch unreachable; break :blk2 m; }, blk3: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("name", "Monitor") catch unreachable; m.put("price", 300) catch unreachable; break :blk3 m; }, blk4: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("name", "Keyboard") catch unreachable; m.put("price", 100) catch unreachable; break :blk4 m; }, blk5: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("name", "Mouse") catch unreachable; m.put("price", 50) catch unreachable; break :blk5 m; }, blk6: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("name", "Headphones") catch unreachable; m.put("price", 200) catch unreachable; break :blk6 m; }};
29:     expensive = blk7: { var _tmp0 = std.ArrayList(struct { item: std.AutoHashMap([]const u8, i32), key: i32 }).init(std.heap.page_allocator); for (products) |p| { _tmp0.append(.{ .item = p, .key = -p.price }) catch unreachable; } for (0.._tmp0.items.len) |i| { for (i+1.._tmp0.items.len) |j| { if (_tmp0.items[j].key < _tmp0.items[i].key) { const t = _tmp0.items[i]; _tmp0.items[i] = _tmp0.items[j]; _tmp0.items[j] = t; } } } var _tmp1 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator);for (_tmp0.items) |p| { _tmp1.append(p.item) catch unreachable; } const _tmp2 = _tmp1.toOwnedSlice() catch unreachable; _tmp2 = _slice_list(std.AutoHashMap([]const u8, i32), _tmp2, 1, (1 + 3), 1); break :blk7 _tmp2; };
