// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:59:22Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _sum_int(v: []const i32) i32 {
    var sum: i32 = 0;
    for (v) |it| { sum += it; }
    return sum;
}

const nums = &[_]i32{
    1,
    2,
    3,
}; // []const i32
var result: f64 = undefined; // f64

pub fn main() void {
    result = blk0: { var _tmp0 = std.ArrayList(i32).init(std.heap.page_allocator); for (nums) |n| { if (!((n > 1))) continue; _tmp0.append(_sum_int(n)) catch |err| handleError(err); } const _tmp1 = _tmp0.toOwnedSlice() catch |err| handleError(err); break :blk0 _tmp1; };
    std.debug.print("{d:.1}\n", .{result});
}
