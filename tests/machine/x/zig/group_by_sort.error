Error on line 29: zig build error: exit status 1
/workspace/mochi/tests/machine/x/zig/group_by_sort.zig:29:136: error: expected type 'i32', found '*const [3:0]u8'
/tmp/zig-0.12.0/lib/std/hash_map.zig:551:38: note: parameter type declared here
/tmp/zig-0.12.0/lib/std/hash_map.zig:14:13: error: std.auto_hash.autoHash does not allow slices here ([]const u8) because the intent is unclear. Consider using std.StringHashMap for hashing the contents of []const u8. Alternatively, consider using std.auto_hash.hash or providing your own hash function instead.
/tmp/zig-0.12.0/lib/std/hash_map.zig:55:39: note: called from here

28: pub fn main() void {
29:     items = &[_]std.AutoHashMap([]const u8, i32){blk0: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("cat", "a") catch unreachable; m.put("val", 3) catch unreachable; break :blk0 m; }, blk1: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("cat", "a") catch unreachable; m.put("val", 1) catch unreachable; break :blk1 m; }, blk2: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("cat", "b") catch unreachable; m.put("val", 5) catch unreachable; break :blk2 m; }, blk3: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("cat", "b") catch unreachable; m.put("val", 2) catch unreachable; break :blk3 m; }};
30:     grouped = blk6: { var _tmp2 = std.ArrayList(struct { key: i32, Items: std.ArrayList(std.AutoHashMap([]const u8, i32)) }).init(std.heap.page_allocator); var _tmp3 = std.AutoHashMap(i32, usize).init(std.heap.page_allocator); for (items) |i| { const _tmp4 = i.cat; if (_tmp3.get(_tmp4)) |idx| { _tmp2.items[idx].Items.append(i) catch unreachable; } else { var g = struct { key: i32, Items: std.ArrayList(std.AutoHashMap([]const u8, i32)) }{ .key = _tmp4, .Items = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator) }; g.Items.append(i) catch unreachable; _tmp2.append(g) catch unreachable; _tmp3.put(_tmp4, _tmp2.items.len - 1) catch unreachable; } } var _tmp5 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator);for (_tmp2.items) |g| { _tmp5.append(blk4: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("cat", g.key) catch unreachable; m.put("total", _sum_int(blk5: { var _tmp0 = std.ArrayList(i32).init(std.heap.page_allocator); for (g) |x| { _tmp0.append(x.val) catch unreachable; } const _tmp1 = _tmp0.toOwnedSlice() catch unreachable; break :blk5 _tmp1; })) catch unreachable; break :blk4 m; }) catch unreachable; } break :blk6 _tmp5.toOwnedSlice() catch unreachable; };
