// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:59:22Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _print_list(comptime T: type, v: []const T) void {
    for (v, 0..) |it, i| {
        if (i > 0) std.debug.print(" ", .{});
        std.debug.print("{any}", .{it});
    }
    std.debug.print("\n", .{});
}

fn _equal(a: anytype, b: anytype) bool {
    if (@TypeOf(a) != @TypeOf(b)) return false;
    return std.meta.eql(a, b);
}

const DataItem = struct {
    tag: []const u8,
    val: i32,
};
const data = &[_]DataItem{
    DataItem{
    .tag = "a",
    .val = 1,
},
    DataItem{
    .tag = "a",
    .val = 2,
},
    DataItem{
    .tag = "b",
    .val = 3,
},
}; // []const DataItem
const ResultStruct0 = struct { key: []const u8, Items: std.ArrayList(DataItem) };
var groups: []const i32 = undefined; // []const i32
var tmp = &[]i32{}; // []const i32
var result: []const i32 = undefined; // []const i32

pub fn main() void {
    groups = blk0: { var _tmp1 = std.ArrayList(ResultStruct0).init(std.heap.page_allocator); for (data) |d| { const _tmp2 = d.tag; var _found = false; var _idx: usize = 0; for (_tmp1.items, 0..) |it, i| { if (_equal(it.key, _tmp2)) { _found = true; _idx = i; break; } } if (_found) { _tmp1.items[_idx].Items.append(d) catch |err| handleError(err); } else { var g = ResultStruct0{ .key = _tmp2, .Items = std.ArrayList(DataItem).init(std.heap.page_allocator) }; g.Items.append(d) catch |err| handleError(err); _tmp1.append(g) catch |err| handleError(err); } } var _tmp3 = std.ArrayList(ResultStruct0).init(std.heap.page_allocator);for (_tmp1.items) |g| { _tmp3.append(g) catch |err| handleError(err); } var _tmp4 = std.ArrayList(i32).init(std.heap.page_allocator);for (_tmp3.items) |g| { _tmp4.append(g) catch |err| handleError(err); } const _tmp4Slice = _tmp4.toOwnedSlice() catch |err| handleError(err); break :blk0 _tmp4Slice; };
    for (groups) |g| {
        var total = 0; // i32
        for (g.items) |x| {
            total = (total + x.val);
        }
        tmp = blk2: { var _tmp8 = std.ArrayList(i32).init(std.heap.page_allocator); defer _tmp8.deinit(); _tmp8.appendSlice(tmp) catch |err| handleError(err); _tmp8.append(struct {
    tag: []const u8,
    total: i32,
}{
    .tag = g.key,
    .total = total,
}) catch |err| handleError(err); const res = _tmp8.toOwnedSlice() catch |err| handleError(err); break :blk2 res; };
    }
    result = blk1: { var _tmp5 = std.ArrayList(struct { item: i32, key: i32 }).init(std.heap.page_allocator); for (tmp) |r| { _tmp5.append(.{ .item = r, .key = r.tag }) catch |err| handleError(err); } for (0.._tmp5.items.len) |i| { for (i+1.._tmp5.items.len) |j| { if (_tmp5.items[j].key < _tmp5.items[i].key) { const t = _tmp5.items[i]; _tmp5.items[i] = _tmp5.items[j]; _tmp5.items[j] = t; } } } var _tmp6 = std.ArrayList(i32).init(std.heap.page_allocator);for (_tmp5.items) |p| { _tmp6.append(p.item) catch |err| handleError(err); } const _tmp7 = _tmp6.toOwnedSlice() catch |err| handleError(err); break :blk1 _tmp7; };
    _print_list(i32, result);
}
