// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:59:22Z
const std = @import("std");

fn handleError(err: anyerror) noreturn {
    std.debug.panic("{any}", .{err});
}

fn _equal(a: anytype, b: anytype) bool {
    if (@TypeOf(a) != @TypeOf(b)) return false;
    return std.meta.eql(a, b);
}

const CustomersItem = struct {
    id: i32,
    name: []const u8,
};
const customers = &[_]CustomersItem{
    CustomersItem{
    .id = 1,
    .name = "Alice",
},
    CustomersItem{
    .id = 2,
    .name = "Bob",
},
}; // []const CustomersItem
const OrdersItem = struct {
    id: i32,
    customerId: i32,
};
const orders = &[_]OrdersItem{
    OrdersItem{
    .id = 100,
    .customerId = 1,
},
    OrdersItem{
    .id = 101,
    .customerId = 1,
},
    OrdersItem{
    .id = 102,
    .customerId = 2,
},
}; // []const OrdersItem
const StatsItem = struct {
    name: []const u8,
    count: i32,
};
const ResultStruct1 = struct {
    o: OrdersItem,
    c: CustomersItem,
};
const ResultStruct2 = struct { key: []const u8, Items: std.ArrayList(ResultStruct1) };
var stats: []const StatsItem = undefined; // []const StatsItem

pub fn main() void {
    stats = blk0: { var _tmp3 = std.ArrayList(ResultStruct2).init(std.heap.page_allocator); for (orders) |o| { for (customers) |c| { if (!((o.customerId == c.id))) continue; const _tmp4 = c.name; var _found = false; var _idx: usize = 0; for (_tmp3.items, 0..) |it, i| { if (_equal(it.key, _tmp4)) { _found = true; _idx = i; break; } } if (_found) { _tmp3.items[_idx].Items.append(ResultStruct1{ .o = o, .c = c }) catch |err| handleError(err); } else { var g = ResultStruct2{ .key = _tmp4, .Items = std.ArrayList(ResultStruct1).init(std.heap.page_allocator) }; g.Items.append(ResultStruct1{ .o = o, .c = c }) catch |err| handleError(err); _tmp3.append(g) catch |err| handleError(err); } } } var _tmp5 = std.ArrayList(ResultStruct2).init(std.heap.page_allocator);for (_tmp3.items) |g| { _tmp5.append(g) catch |err| handleError(err); } var _tmp6 = std.ArrayList(StatsItem).init(std.heap.page_allocator);for (_tmp5.items) |g| { _tmp6.append(StatsItem{
    .name = g.key,
    .count = @as(i32, @intCast(g.Items.items.len)),
}) catch |err| handleError(err); } const _tmp6Slice = _tmp6.toOwnedSlice() catch |err| handleError(err); break :blk0 _tmp6Slice; };
    std.debug.print("--- Orders per customer ---\n", .{});
    for (stats) |s| {
        std.debug.print("{any} {s} {any}\n", .{s.name, "orders:", s.count});
    }
}
