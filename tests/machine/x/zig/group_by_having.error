Error on line 22: zig build error: exit status 1
/workspace/mochi/tests/machine/x/zig/group_by_having.zig:22:144: error: expected type 'i32', found '*const [4:0]u8'
/tmp/zig-0.12.0/lib/std/hash_map.zig:551:38: note: parameter type declared here
/tmp/zig-0.12.0/lib/std/hash_map.zig:14:13: error: std.auto_hash.autoHash does not allow slices here ([]const u8) because the intent is unclear. Consider using std.StringHashMap for hashing the contents of []const u8. Alternatively, consider using std.auto_hash.hash or providing your own hash function instead.
/tmp/zig-0.12.0/lib/std/hash_map.zig:55:39: note: called from here

21: pub fn main() void {
22:     people = &[_]std.AutoHashMap([]const u8, []const u8){blk0: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("name", "Alice") catch unreachable; m.put("city", "Paris") catch unreachable; break :blk0 m; }, blk1: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("name", "Bob") catch unreachable; m.put("city", "Hanoi") catch unreachable; break :blk1 m; }, blk2: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("name", "Charlie") catch unreachable; m.put("city", "Paris") catch unreachable; break :blk2 m; }, blk3: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("name", "Diana") catch unreachable; m.put("city", "Hanoi") catch unreachable; break :blk3 m; }, blk4: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("name", "Eve") catch unreachable; m.put("city", "Paris") catch unreachable; break :blk4 m; }, blk5: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("name", "Frank") catch unreachable; m.put("city", "Hanoi") catch unreachable; break :blk5 m; }, blk6: { var m = std.AutoHashMap(i32, []const u8).init(std.heap.page_allocator); m.put("name", "George") catch unreachable; m.put("city", "Paris") catch unreachable; break :blk6 m; }};
23:     big = blk8: { var _tmp0 = std.ArrayList(struct { key: []const u8, Items: std.ArrayList(std.AutoHashMap([]const u8, []const u8)) }).init(std.heap.page_allocator); var _tmp1 = std.AutoHashMap([]const u8, usize).init(std.heap.page_allocator); for (people) |p| { const _tmp2 = p.city; if (_tmp1.get(_tmp2)) |idx| { _tmp0.items[idx].Items.append(p) catch unreachable; } else { var g = struct { key: []const u8, Items: std.ArrayList(std.AutoHashMap([]const u8, []const u8)) }{ .key = _tmp2, .Items = std.ArrayList(std.AutoHashMap([]const u8, []const u8)).init(std.heap.page_allocator) }; g.Items.append(p) catch unreachable; _tmp0.append(g) catch unreachable; _tmp1.put(_tmp2, _tmp0.items.len - 1) catch unreachable; } } var _tmp3 = std.ArrayList(std.AutoHashMap([]const u8, i32)).init(std.heap.page_allocator);for (_tmp0.items) |g| { _tmp3.append(blk7: { var m = std.AutoHashMap(i32, i32).init(std.heap.page_allocator); m.put("city", g.key) catch unreachable; m.put("num", (g.Items.len)) catch unreachable; break :blk7 m; }) catch unreachable; } break :blk8 _tmp3.toOwnedSlice() catch unreachable; };
