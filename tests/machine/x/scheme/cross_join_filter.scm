(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)

(define nums (list 1 2 3))
(define letters (list "A" "B"))
(define pairs (let ((_res '()))
  (for-each (lambda (n)
    (for-each (lambda (l)
      (when (equal? (modulo n 2) 0)
        (set! _res (append _res (list (list (cons "n" n) (cons "l" l)))))
      )
    ) (if (string? letters) (string->list letters) letters))
  ) (if (string? nums) (string->list nums) nums))
  _res))
(begin (display "--- Even pairs ---") (newline))
(let loop ((p_idx 0))
  (if (< p_idx (length pairs))
    (begin
      (let ((p (list-ref pairs p_idx)))
        (begin (display (map-get p "n")) (display " ") (display (map-get p "l")) (newline))
      )
      (loop (+ p_idx 1))
    )
  '()
)
