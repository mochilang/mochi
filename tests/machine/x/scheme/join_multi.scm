(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)

(define customers (list (list (cons "id" 1) (cons "name" "Alice")) (list (cons "id" 2) (cons "name" "Bob"))))
(define orders (list (list (cons "id" 100) (cons "customerId" 1)) (list (cons "id" 101) (cons "customerId" 2))))
(define items (list (list (cons "orderId" 100) (cons "sku" "a")) (list (cons "orderId" 101) (cons "sku" "b"))))
(define result (let ((_res '()))
  (for-each (lambda (o)
    (for-each (lambda (c)
      (when (equal? (map-get o "customerId") (map-get c "id"))
        (for-each (lambda (i)
          (when (equal? (map-get o "id") (map-get i "orderId"))
            (set! _res (append _res (list (list (cons "name" (map-get c "name")) (cons "sku" (map-get i "sku"))))))
          )) (if (string? items) (string->list items) items))
      )) (if (string? customers) (string->list customers) customers))
  ) (if (string? orders) (string->list orders) orders))
  _res))
(begin (display "--- Multi Join ---") (newline))
(let loop ((r_idx 0))
  (if (< r_idx (length result))
    (begin
      (let ((r (list-ref result r_idx)))
        (begin (display (map-get r "name")) (display " ") (display "bought item") (display " ") (display (map-get r "sku")) (newline))
      )
      (loop (+ r_idx 1))
    )
  '()
  )
)
