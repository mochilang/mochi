; Generated by Mochi compiler v0.10.27 on 2025-07-17T18:04:26Z
(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)

(define customers '())
(define orders '())
(define result '())
(set! customers (list (list (cons 'id 1) (cons 'name "Alice")) (list (cons 'id 2) (cons 'name "Bob")) (list (cons 'id 3) (cons 'name "Charlie")) (list (cons 'id 4) (cons 'name "Diana"))))
(set! orders (list (list (cons 'id 100) (cons 'customerId 1) (cons 'total 250)) (list (cons 'id 101) (cons 'customerId 2) (cons 'total 125)) (list (cons 'id 102) (cons 'customerId 1) (cons 'total 300))))
(set! result (let ((_res '()))
  (for-each (lambda (c)
    (for-each (lambda (o)
      (when (equal? (map-get o 'customerId) (map-get c 'id))
        (set! _res (append _res (list (list (cons 'customerName (map-get c 'name)) (cons 'order o)))))
      )) (if (string? orders) (string->list orders) orders))
  ) (if (string? customers) (string->list customers) customers))
  _res))
(begin (display "--- Right Join using syntax ---") (newline))
(let loop ((entry_idx 0))
  (if (< entry_idx (length result))
    (begin
      (let ((entry (list-ref result entry_idx)))
        (if (map-get entry 'order)
          (begin
            (begin (display "Customer") (display " ") (display (map-get entry 'customerName)) (display " ") (display "has order") (display " ") (display (map-get (map-get entry 'order) 'id)) (display " ") (display "- $") (display " ") (display (map-get (map-get entry 'order) 'total)) (newline))
          )
          (begin
            (begin (display "Customer") (display " ") (display (map-get entry 'customerName)) (display " ") (display "has no orders") (newline))
          )
        )
      )
      (loop (+ entry_idx 1))
    )
  '()
  )
)
