(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))
)

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_min v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (< n m) (set! m n)))
                (cdr lst)))
    m))
(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))

(define people (list (list (cons "name" "Alice") (cons "age" 30) (cons "city" "Paris")) (list (cons "name" "Bob") (cons "age" 15) (cons "city" "Hanoi")) (list (cons "name" "Charlie") (cons "age" 65) (cons "city" "Paris")) (list (cons "name" "Diana") (cons "age" 45) (cons "city" "Hanoi")) (list (cons "name" "Eve") (cons "age" 70) (cons "city" "Paris")) (list (cons "name" "Frank") (cons "age" 22) (cons "city" "Hanoi"))))
(define stats (let ((_tmp '()))
  (for-each (lambda (person)
    (set! _tmp (append _tmp (list person)))
  ) (if (string? people) (string->list people) people))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "city" (map-get g "key")) (cons "count" (_count g)) (cons "avg_age" (_avg (let ((_res '()))
  (for-each (lambda (p)
    (set! _res (append _res (list (map-get p "age"))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (person) (map-get person "city"))))
    _res)))
(begin (display "--- People grouped by city ---") (newline))
(let loop ((s_idx 0))
  (if (< s_idx (length stats))
    (begin
      (let ((s (list-ref stats s_idx)))
        (begin (display (map-get s "city")) (display " ") (display ": count =") (display " ") (display (map-get s "count")) (display " ") (display ", avg_age =") (display " ") (display (map-get s "avg_age")) (newline))
      )
      (loop (+ s_idx 1))
    )
  '()
)
