; Generated by Mochi compiler v0.10.27 on 2025-07-17T18:03:43Z
(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)

(define customers '())
(define orders '())
(define result '())
(set! customers (list (list (cons 'id 1) (cons 'name "Alice")) (list (cons 'id 2) (cons 'name "Bob"))))
(set! orders (list (list (cons 'id 100) (cons 'customerId 1) (cons 'total 250)) (list (cons 'id 101) (cons 'customerId 3) (cons 'total 80))))
(set! result (let ((_res '()))
  (for-each (lambda (o)
    (let ((_ms0 '()) (_m0 #f))
      (for-each (lambda (c)
        (when (equal? (map-get o 'customerId) (map-get c 'id))
          (set! _ms0 (append _ms0 (list c)))
          (set! _m0 #t))
) (if (string? customers) (string->list customers) customers))
      (if _m0
          (for-each (lambda (c)
            (set! _res (append _res (list (list (cons 'orderId (map-get o 'id)) (cons 'customer c) (cons 'total (map-get o 'total))))))
          ) _ms0)
          (let ((c '()))
            (set! _res (append _res (list (list (cons 'orderId (map-get o 'id)) (cons 'customer c) (cons 'total (map-get o 'total))))))
          ))
    )
  ) (if (string? orders) (string->list orders) orders))
  _res))
(begin (display "--- Left Join ---") (newline))
(let loop ((entry_idx 0))
  (if (< entry_idx (length result))
    (begin
      (let ((entry (list-ref result entry_idx)))
        (begin (display "Order") (display " ") (display (map-get entry 'orderId)) (display " ") (display "customer") (display " ") (display (map-get entry 'customer)) (display " ") (display "total") (display " ") (display (map-get entry 'total)) (newline))
      )
      (loop (+ entry_idx 1))
    )
  '()
  )
)
