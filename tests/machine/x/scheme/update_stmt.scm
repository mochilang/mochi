(define (list-set lst idx val)
    (let loop ((i idx) (l lst))
        (if (null? l)
            '()
            (if (= i 0)
                (cons val (cdr l))
                (cons (car l) (loop (- i 1) (cdr l))))))
)
(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-Person name age status)
  (list (cons 'name name) (cons 'age age) (cons 'status status))
)

(define (test_update_adult_status)
  (when (not (equal? people (list (list (cons 'name "Alice") (cons 'age 17) (cons 'status "minor")) (list (cons 'name "Bob") (cons 'age 26) (cons 'status "adult")) (list (cons 'name "Charlie") (cons 'age 19) (cons 'status "adult")) (list (cons 'name "Diana") (cons 'age 16) (cons 'status "minor"))))) (error "expect failed"))
)

(define people (list (list (cons 'name "Alice") (cons 'age 17) (cons 'status "minor")) (list (cons 'name "Bob") (cons 'age 25) (cons 'status "unknown")) (list (cons 'name "Charlie") (cons 'age 18) (cons 'status "unknown")) (list (cons 'name "Diana") (cons 'age 16) (cons 'status "minor"))))
(let loop ((people_idx 0))
  (if (< people_idx (length people))
    (begin
      (let ((item (list-ref people people_idx)))
        (let (
          (name (map-get item 'name))
          (age (map-get item 'age))
          (status (map-get item 'status))
        )
          (when (>= age 18)
            (set! item (map-set item 'status "adult"))
            (set! item (map-set item 'age (+ age 1)))
          )
        )
        (set! people (list-set people people_idx item))
        (loop (+ people_idx 1))
      )
      )
    '()
  )
)
(begin (display "ok") (newline))
(run-test "update adult status" test_update_adult_status)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
