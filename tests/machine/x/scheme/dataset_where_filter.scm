(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)

(define people (list (list (cons "name" "Alice") (cons "age" 30)) (list (cons "name" "Bob") (cons "age" 15)) (list (cons "name" "Charlie") (cons "age" 65)) (list (cons "name" "Diana") (cons "age" 45))))
(define adults (let ((_res '()))
  (for-each (lambda (person)
    (when (>= (map-get person "age") 18)
      (set! _res (append _res (list (list (cons "name" (map-get person "name")) (cons "age" (map-get person "age")) (cons "is_senior" (>= (map-get person "age") 60))))))
    )
  ) (if (string? people) (string->list people) people))
  _res))
(begin (display "--- Adults ---") (newline))
(let loop ((person_idx 0))
  (if (< person_idx (length adults))
    (begin
      (let ((person (list-ref adults person_idx)))
        (begin (display (map-get person "name")) (display " ") (display "is") (display " ") (display (map-get person "age")) (display " ") (display (if (map-get person "is_senior") " (senior)" "")) (newline))
      )
      (loop (+ person_idx 1))
    )
  '()
)
