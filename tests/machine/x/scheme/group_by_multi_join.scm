(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))
)

(define (_exists v)
  (cond
    ((and (pair? v) (assq 'Items v)) (not (null? (cdr (assq 'Items v)))))
    ((string? v) (> (string-length v) 0))
    ((list? v) (not (null? v)))
    (else #f)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_min v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (< n m) (set! m n)))
                (cdr lst)))
    m))
(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (_to_string key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))

(define nations (list (list (cons 'id 1) (cons 'name "A")) (list (cons 'id 2) (cons 'name "B"))))
(define suppliers (list (list (cons 'id 1) (cons 'nation 1)) (list (cons 'id 2) (cons 'nation 2))))
(define partsupp (list (list (cons 'part 100) (cons 'supplier 1) (cons 'cost 10.0) (cons 'qty 2)) (list (cons 'part 100) (cons 'supplier 2) (cons 'cost 20.0) (cons 'qty 1)) (list (cons 'part 200) (cons 'supplier 1) (cons 'cost 5.0) (cons 'qty 3))))
(define filtered (let ((_res '()))
  (for-each (lambda (ps)
    (for-each (lambda (s)
      (when (equal? (map-get s 'id) (map-get ps 'supplier))
        (for-each (lambda (n)
          (when (equal? (map-get n 'id) (map-get s 'nation))
            (when (equal? (map-get n 'name) "A")
              (set! _res (append _res (list (list (cons 'part (map-get ps 'part)) (cons 'value (* (map-get ps 'cost) (map-get ps 'qty)))))))
            )
          )) (if (string? nations) (string->list nations) nations))
      )) (if (string? suppliers) (string->list suppliers) suppliers))
  ) (if (string? partsupp) (string->list partsupp) partsupp))
  _res))
(define grouped (let ((_tmp '()))
  (for-each (lambda (x)
    (set! _tmp (append _tmp (list x)))
  ) (if (string? filtered) (string->list filtered) filtered))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons 'part (map-get g 'key)) (cons 'total (_sum (let ((_res '()))
  (for-each (lambda (r)
    (set! _res (append _res (list (map-get r 'value))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (x) (map-get x 'part))))
    _res)))
(begin (display grouped) (newline))
