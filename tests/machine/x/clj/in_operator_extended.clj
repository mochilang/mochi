; Generated by Mochi compiler v0.10.27 on 2025-07-17T16:35:41Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _print [& args]
  (letfn [(pv [v]
            (cond
              (true? v) (print 1)
              (false? v) (print 0)
              (sequential? v) (doseq [[i x] (map-indexed vector v)]
                                (when (> i 0) (print " "))
                                (pv x))
              :else (print v)))]
    (doseq [[i a] (map-indexed vector args)]
      (when (> i 0) (print " "))
      (pv a))
    (println)))
(declare xs ys m s)

(defn -main []
  (def xs [1 2 3]) ;; list of int
  (def ys (vec (->> (for [x xs :when (_equal (mod x 2) 1)] x)))) ;; list of int
  (_print (some #(= 1 %) ys))
  (_print (some #(= 2 %) ys))
  (def m {:a 1}) ;; map of string to int
  (_print (contains? m "a"))
  (_print (contains? m "b"))
  (def s "hello") ;; string
  (_print (clojure.string/includes? s "ell"))
  (_print (clojure.string/includes? s "foo"))
)

(-main)
