; Generated by Mochi compiler v0.10.28 on 2025-07-18T07:03:47Z
(ns main)

(defn _print [& args]
  (letfn [(pv [v]
            (cond
              (true? v) (print 1)
              (false? v) (print 0)
              (sequential? v) (doseq [[i x] (map-indexed vector v)]
                                (when (> i 0) (print " "))
                                (pv x))
              :else (print v)))]
    (doseq [[i a] (map-indexed vector args)]
      (when (> i 0) (print " "))
      (pv a))
    (println)))
(declare people)

(defn Person [name age status]
  {:__name "Person" :name name :age age :status status}
)


(defn test_update_adult_status []
  (assert (= people [{:__name "Person" :name "Alice" :age 17 :status "minor"} {:__name "Person" :name "Bob" :age 26 :status "adult"} {:__name "Person" :name "Charlie" :age 19 :status "adult"} {:__name "Person" :name "Diana" :age 16 :status "minor"}]) "expect failed")
)

(defn -main []
  (def people [{:__name "Person" :name "Alice" :age 17 :status "minor"} {:__name "Person" :name "Bob" :age 25 :status "unknown"} {:__name "Person" :name "Charlie" :age 18 :status "unknown"} {:__name "Person" :name "Diana" :age 16 :status "minor"}]) ;; list of Person
  (def people
    (vec (map (fn [_tmp0]
      (let [name (:name _tmp0) age (:age _tmp0) status (:status _tmp0)]
        (if (>= age 18) (assoc (assoc _tmp0 :status "adult") :age (+ age 1)) _tmp0)
      )
    ) people))
  )
  (_print "ok")
  (test_update_adult_status)
)

(-main)
