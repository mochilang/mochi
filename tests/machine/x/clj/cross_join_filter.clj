; Generated by Mochi compiler v0.10.28 on 2025-07-18T07:01:57Z
(ns main)

(defn _print [& args]
  (letfn [(pv [v]
            (cond
              (true? v) (print 1)
              (false? v) (print 0)
              (sequential? v) (doseq [[i x] (map-indexed vector v)]
                                (when (> i 0) (print " "))
                                (pv x))
              :else (print v)))]
    (doseq [[i a] (map-indexed vector args)]
      (when (> i 0) (print " "))
      (pv a))
    (println)))
(declare nums letters pairs)

(defn -main []
  (def nums [1 2 3]) ;; list of int
  (def letters ["A" "B"]) ;; list of string
  (def pairs (vec (->> (for [n nums :when (= (mod n 2) 0) l letters] {:n n :l l})))) ;; list of map of string to any
  (_print "--- Even pairs ---")
  (loop [_tmp0 (seq pairs)]
    (when _tmp0
      (let [p (clojure.core/first _tmp0)]
        (let [r (try
          (_print (:n p) (:l p))
          :next
        (catch clojure.lang.ExceptionInfo e
          (cond
            (= (.getMessage e) "continue") :next
            (= (.getMessage e) "break") :break
            :else (throw e))
          )
        )]
      (cond
        (= r :break) nil
        :else (recur (next _tmp0))
      )
    )
  )
)
)
)

(-main)
