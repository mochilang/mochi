; Generated by Mochi compiler v0.10.28 on 2025-07-18T03:24:59Z
(ns main)

(defn _print [& args]
  (letfn [(pv [v]
            (cond
              (true? v) (print 1)
              (false? v) (print 0)
              (sequential? v) (doseq [[i x] (map-indexed vector v)]
                                (when (> i 0) (print " "))
                                (pv x))
              :else (print v)))]
    (doseq [[i a] (map-indexed vector args)]
      (when (> i 0) (print " "))
      (pv a))
    (println)))
(declare t)

(def Leaf {:__name "Leaf"})

(defn Node [left value right]
  {:__name "Node" :left left :value value :right right}
)


;; Function sum_tree takes [t: Tree] and returns int
(defn sum_tree [t]
  (try
    (throw (ex-info "return" {:value (let [t t]
  (cond
    (= (:__name t) "Leaf") 0
    (= (:__name t) "Node") (let [left (:left t) value (:value t) right (:right t)] (+ (+ (sum_tree left) value) (sum_tree right)))
    :else nil
  ))}))
  (catch clojure.lang.ExceptionInfo e
    (if (= (.getMessage e) "return")
      (:value (ex-data e))
    (throw e)))
  )
)

(defn -main []
  (def t {:__name "Node" :left Leaf :value 1 :right {:__name "Node" :left Leaf :value 2 :right Leaf}}) ;; Node
  (_print (sum_tree t))
)

(-main)
