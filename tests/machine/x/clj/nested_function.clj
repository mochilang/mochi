; Generated by Mochi compiler v0.10.28 on 2025-07-18T07:03:07Z
(ns main)

(defn _print [& args]
  (letfn [(pv [v]
            (cond
              (true? v) (print 1)
              (false? v) (print 0)
              (sequential? v) (doseq [[i x] (map-indexed vector v)]
                                (when (> i 0) (print " "))
                                (pv x))
              :else (print v)))]
    (doseq [[i a] (map-indexed vector args)]
      (when (> i 0) (print " "))
      (pv a))
    (println)))
;; Function outer takes [x: int] and returns int
(defn outer [x]
  (try
    ;; Function inner takes [y: int] and returns int
    (defn inner [y]
      (try
        (throw (ex-info "return" {:value (+ x y)}))
      (catch clojure.lang.ExceptionInfo e
        (if (= (.getMessage e) "return")
          (:value (ex-data e))
        (throw e)))
      )
    )
    (throw (ex-info "return" {:value (inner 5)}))
  (catch clojure.lang.ExceptionInfo e
    (if (= (.getMessage e) "return")
      (:value (ex-data e))
    (throw e)))
  )
)

(defn -main []
  (_print (outer 3))
)

(-main)
