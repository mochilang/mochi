; Generated by Mochi compiler v0.10.28 on 2025-07-18T03:24:42Z
(ns main)

(defn _sum [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "sum() expects list or group" {})))]
    (reduce + 0 lst))
  )

(defn _print [& args]
  (letfn [(pv [v]
            (cond
              (true? v) (print 1)
              (false? v) (print 0)
              (sequential? v) (doseq [[i x] (map-indexed vector v)]
                                (when (> i 0) (print " "))
                                (pv x))
              :else (print v)))]
    (doseq [[i a] (map-indexed vector args)]
      (when (> i 0) (print " "))
      (pv a))
    (println)))
(declare nums result)

(defn -main []
  (def nums [1 2 3]) ;; list of int
  (def result (_sum (vec (->> (for [n nums :when (> n 1)] n))))) ;; list of float
  (_print result)
)

(-main)
