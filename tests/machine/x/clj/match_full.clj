; Generated by Mochi compiler v0.10.28 on 2025-07-18T03:23:46Z
(ns main)

(defn _print [& args]
  (letfn [(pv [v]
            (cond
              (true? v) (print 1)
              (false? v) (print 0)
              (sequential? v) (doseq [[i x] (map-indexed vector v)]
                                (when (> i 0) (print " "))
                                (pv x))
              :else (print v)))]
    (doseq [[i a] (map-indexed vector args)]
      (when (> i 0) (print " "))
      (pv a))
    (println)))
(declare x label day mood ok status)

;; Function classify takes [n: int] and returns string
(defn classify [n]
  (try
    (throw (ex-info "return" {:value (let [t n]
  (cond
    (= t 0) "zero"
    (= t 1) "one"
    :else "many"
  ))}))
  (catch clojure.lang.ExceptionInfo e
    (if (= (.getMessage e) "return")
      (:value (ex-data e))
    (throw e)))
  )
)

(defn -main []
  (def x 2) ;; int
  (def label (let [t x]
  (cond
    (= t 1) "one"
    (= t 2) "two"
    (= t 3) "three"
    :else "unknown"
  ))) ;; string
  (_print label)
  (def day "sun") ;; string
  (def mood (let [t day]
  (cond
    (= t "mon") "tired"
    (= t "fri") "excited"
    (= t "sun") "relaxed"
    :else "normal"
  ))) ;; string
  (_print mood)
  (def ok true) ;; bool
  (def status (let [t ok]
  (cond
    (= t true) "confirmed"
    (= t false) "denied"
    :else nil
  ))) ;; string
  (_print status)
  (_print (classify 0))
  (_print (classify 5))
)

(-main)
