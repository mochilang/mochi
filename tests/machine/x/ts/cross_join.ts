// Generated by Mochi TypeScript compiler

let customers: _[];
let orders: _[];
let result: { [key: string]: any }[];

function main(): void {
  customers = [
    {
      "id": 1,
      "name": "Alice",
    },
    {
      "id": 2,
      "name": "Bob",
    },
    {
      "id": 3,
      "name": "Charlie",
    },
  ];
  orders = [
    {
      "id": 100,
      "customerId": 1,
      "total": 250,
    },
    {
      "id": 101,
      "customerId": 2,
      "total": 125,
    },
    {
      "id": 102,
      "customerId": 1,
      "total": 300,
    },
  ];
  result = (() => {
    const _src = orders;
    const _res = [];
    for (const o of _src) {
      for (const c of customers) {
        _res.push({
          "orderId": o.id,
          "orderCustomerId": o.customerId,
          "pairedCustomerName": c.name,
          "orderTotal": o.total,
        });
      }
    }
    return _res;
  })();
  console.log(_fmt("--- Cross Join: All order-customer pairs ---"));
  for (const entry of result) {
    console.log(
      _fmt("Order"),
      _fmt(entry.orderId),
      _fmt("(customerId:"),
      _fmt(entry.orderCustomerId),
      _fmt(", total: $"),
      _fmt(entry.orderTotal),
      _fmt(") paired with"),
      _fmt(entry.pairedCustomerName),
    );
  }
}
function _fmt(v: any): string {
  if (Array.isArray(v)) return v.map(_fmt).join(" ");
  if (v && typeof v === "object") {
    const keys = Object.keys(v).sort();
    const parts = keys.map((k) => k + ":" + _fmt(v[k]));
    return "map[" + parts.join(" ") + "]";
  }
  return String(v);
}

main();
