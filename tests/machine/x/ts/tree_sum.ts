// Generated by Mochi TypeScript compiler

type Leaf = {
  __name: "Leaf";
};

type _Node = {
  __name: "Node";
  left: Tree;
  value: number;
  right: Tree;
};

type Tree = Leaf | _Node;

function sum_tree(t: Tree): number {
  return (() => {
    const _t = t;
    if (_t.__name === "Leaf") return 0;
    if (_t.__name === "Node") {
      return ((
        left,
        value,
        right,
      ) => ((sum_tree(left) + value) + sum_tree(right)))(
        _t.left,
        _t.value,
        _t.right,
      );
    }
    return undefined;
  })();
}

let t: _Node;

function main(): void {
  t = {
    __name: "Node",
    left: { __name: "Leaf" },
    value: 1,
    right: {
      __name: "Node",
      left: { __name: "Leaf" },
      value: 2,
      right: { __name: "Leaf" },
    },
  };
  console.log(_fmt(sum_tree(t)));
}
function _fmt(v: any): string {
  if (Array.isArray(v)) return v.map(_fmt).join(" ");
  if (v && typeof v === "object") {
    const keys = Object.keys(v).sort();
    const parts = keys.map((k) => k + ":" + _fmt(v[k]));
    return "map[" + parts.join(" ") + "]";
  }
  return String(v);
}

main();
