// Generated by Mochi compiler v0.10.27 on 1970-01-01T00:00:00Z
// Source: /workspace/mochi/tests/vm/valid/group_by.mochi

let people: Record<string, any>[];
let stats: Record<string, any>[];

function main(): void {
  people = [
    {
      "name": "Alice",
      "age": 30,
      "city": "Paris",
    },
    {
      "name": "Bob",
      "age": 15,
      "city": "Hanoi",
    },
    {
      "name": "Charlie",
      "age": 65,
      "city": "Paris",
    },
    {
      "name": "Diana",
      "age": 45,
      "city": "Hanoi",
    },
    {
      "name": "Eve",
      "age": 70,
      "city": "Paris",
    },
    {
      "name": "Frank",
      "age": 22,
      "city": "Hanoi",
    },
  ];
  stats = (() => {
    const _src = people;
    const _map = new Map<string, any>();
    var _items = [];
    for (const person of _src) {
      const _key = person.city;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...person, person: person });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "city": g.key,
        "count": g.items.length,
        "avg_age": (g.items.map((p) =>
          p.age
        ).reduce((a, b) => a + Number(b), 0) / g.items.map((p) =>
          p.age
        ).length),
      });
    }
    return _res;
  })();
  _print("--- People grouped by city ---");
  for (const s of stats) {
    _print(s.city, ": count =", s.count, ", avg_age =", s.avg_age);
  }
}
function _print(...args: unknown[]): void {
  const out = args.map((a) => {
    if (Array.isArray(a)) return a.join(" ");
    if (typeof a === "boolean") return a ? "1" : "0";
    return String(a);
  }).join(" ").trimEnd();
  console.log(out);
}

main();
