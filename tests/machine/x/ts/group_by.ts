// Generated by Mochi TypeScript compiler

let people: _[];
let stats: { [key: string]: any }[];

function main(): void {
  people = [
    {
      "name": "Alice",
      "age": 30,
      "city": "Paris",
    },
    {
      "name": "Bob",
      "age": 15,
      "city": "Hanoi",
    },
    {
      "name": "Charlie",
      "age": 65,
      "city": "Paris",
    },
    {
      "name": "Diana",
      "age": 45,
      "city": "Hanoi",
    },
    {
      "name": "Eve",
      "age": 70,
      "city": "Paris",
    },
    {
      "name": "Frank",
      "age": 22,
      "city": "Hanoi",
    },
  ];
  stats = (() => {
    const _src = people;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const person of _src) {
      const _key = person.city;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push({ ...person, person: person });
    }
    let _groups = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "city": g.key,
        "count": _count(g),
        "avg_age": _avg(g.items.map((p) => p.age)),
      });
    }
    return _res;
  })();
  console.log("--- People grouped by city ---");
  for (const s of stats) {
    console.log(s.city, ": count =", s.count, ", avg_age =", s.avg_age);
  }
}
function _avg(v: any): number {
  const c = _count(v);
  return c ? _sum(v) / c : 0;
}

function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
