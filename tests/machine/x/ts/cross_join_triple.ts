// Generated by Mochi TypeScript compiler

let bools: boolean[];
let combos: { [key: string]: any }[];
let letters: string[];
let nums: number[];

function main(): void {
  nums = [
    1,
    2,
  ];
  letters = [
    "A",
    "B",
  ];
  bools = [
    true,
    false,
  ];
  combos = (() => {
    const _src = nums;
    const _res = [];
    for (const n of _src) {
      for (const l of letters) {
        for (const b of bools) {
          _res.push({
            "n": n,
            "l": l,
            "b": b,
          });
        }
      }
    }
    return _res;
  })();
  console.log(_fmt("--- Cross Join of three lists ---"));
  for (const c of combos) {
    console.log(_fmt(c.n), _fmt(c.l), _fmt(c.b));
  }
}
function _fmt(v: any): string {
  if (Array.isArray(v)) return v.map(_fmt).join(" ");
  if (v && typeof v === "object") {
    const keys = Object.keys(v).sort();
    const parts = keys.map((k) => k + ":" + _fmt(v[k]));
    return "map[" + parts.join(" ") + "]";
  }
  return String(v);
}

main();
