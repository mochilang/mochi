// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
// Source: /workspace/mochi/tests/vm/valid/group_items_iteration.mochi

let data: Record<string, any>[];
let groups: any[];
let result: any[];
var tmp: any[];

function main(): void {
  data = [
    {
      "tag": "a",
      "val": 1,
    },
    {
      "tag": "a",
      "val": 2,
    },
    {
      "tag": "b",
      "val": 3,
    },
  ];
  groups = (() => {
    const _src = data;
    const _map = new Map<string, any>();
    var _items = [];
    for (const d of _src) {
      const _key = d.tag;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...d, d: d });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push(g);
    }
    return _res;
  })();
  tmp = [];
  for (const g of groups) {
    var total = 0;
    for (const x of g.items) {
      total = total + x.val;
    }
    tmp = [...tmp, {
      "tag": g.key,
      "total": total,
    }];
  }
  result = (() => {
    const _src = tmp;
    var _items = [];
    for (const r of _src) {
      _items.push({ r: r });
    }
    let _pairs = _items.map((it) => {
      const { r } = it;
      return { item: it, key: r.tag };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const _it of _items) {
      const r = _it.r;
      _res.push(r);
    }
    return _res;
  })();
  console.log(Array.isArray(result) ? result.join(" ") : result);
}
function _cmp(a: any, b: any): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    const order: Record<string, number> = { store: 0, web: 1, catalog: 2 };
    if (order[a] !== undefined && order[b] !== undefined) {
      return order[a] - order[b];
    }
    return a < b ? -1 : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

main();
