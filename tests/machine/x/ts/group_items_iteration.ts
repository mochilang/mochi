// Generated by Mochi TypeScript compiler

let data: _[];
let groups: any[];
let result: any[];
var tmp: any[];

function main(): void {
  data = [
    {
      "tag": "a",
      "val": 1,
    },
    {
      "tag": "a",
      "val": 2,
    },
    {
      "tag": "b",
      "val": 3,
    },
  ];
  groups = (() => {
    const _src = data;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const d of _src) {
      const _key = d.tag;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push({ ...d, d: d });
    }
    let _groups = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _groups) {
      _res.push(g);
    }
    return _res;
  })();
  tmp = [];
  for (const g of groups) {
    var total = 0;
    for (const x of _iter(g.items)) {
      total = total + x.val;
    }
    tmp = _append(tmp, {
      "tag": g.key,
      "total": total,
    });
  }
  result = (() => {
    const _src = tmp;
    var _items = [];
    for (const r of _src) {
      _items.push({ r: r });
    }
    let _pairs = _items.map((it) => {
      const r = it;
      return { item: it, key: r.tag };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const _it of _items) {
      const r = _it.r;
      _res.push(r);
    }
    return _res;
  })();
  console.log(Array.isArray(result) ? result.join(" ") : result);
}
function _append<T>(lst: T[] | null, v: T): T[] {
  const out = lst ? lst.slice() : [];
  out.push(v);
  return out;
}

function _iter<T>(
  v: Iterable<T> | { [key: string]: T } | any,
): Iterable<T | string> {
  if (
    v && typeof v === "object" && !Array.isArray(v) && !(Symbol.iterator in v)
  ) {
    return Object.keys(v);
  }
  return v as Iterable<T>;
}

main();
