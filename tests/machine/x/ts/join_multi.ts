// Generated by Mochi TypeScript compiler

let customers: _[];
let items: _[];
let orders: _[];
let result: { [key: string]: any }[];

function main(): void {
  customers = [
    {
      "id": 1,
      "name": "Alice",
    },
    {
      "id": 2,
      "name": "Bob",
    },
  ];
  orders = [
    {
      "id": 100,
      "customerId": 1,
    },
    {
      "id": 101,
      "customerId": 2,
    },
  ];
  items = [
    {
      "orderId": 100,
      "sku": "a",
    },
    {
      "orderId": 101,
      "sku": "b",
    },
  ];
  result = (() => {
    const _src = orders;
    const _res = [];
    for (const o of _src) {
      for (const c of customers) {
        if (!(o.customerId == c.id)) continue;
        for (const i of items) {
          if (!(o.id == i.orderId)) continue;
          _res.push({
            "name": c.name,
            "sku": i.sku,
          });
        }
      }
    }
    return _res;
  })();
  console.log(_fmt("--- Multi Join ---"));
  for (const r of result) {
    console.log(_fmt(r.name), _fmt("bought item"), _fmt(r.sku));
  }
}
function _fmt(v: any): string {
  if (Array.isArray(v)) return v.map(_fmt).join(" ");
  if (v && typeof v === "object") {
    const keys = Object.keys(v).sort();
    const parts = keys.map((k) => k + ":" + _fmt(v[k]));
    return "map[" + parts.join(" ") + "]";
  }
  return String(v);
}

main();
