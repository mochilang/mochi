// Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
// Source: /workspace/mochi/tests/vm/valid/dataset_sort_take_limit.mochi

let expensive: Record<string, any>[];
let products: Record<string, any>[];

function main(): void {
  products = [
    {
      "name": "Laptop",
      "price": 1500,
    },
    {
      "name": "Smartphone",
      "price": 900,
    },
    {
      "name": "Tablet",
      "price": 600,
    },
    {
      "name": "Monitor",
      "price": 300,
    },
    {
      "name": "Keyboard",
      "price": 100,
    },
    {
      "name": "Mouse",
      "price": 50,
    },
    {
      "name": "Headphones",
      "price": 200,
    },
  ];
  expensive = (() => {
    const _src = products;
    var _items = [];
    for (const p of _src) {
      _items.push({ p: p });
    }
    let _pairs = _items.map((it) => {
      const { p } = it;
      return { item: it, key: (-p.price) };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    _items = _pairs.map((p) => p.item);
    {
      const _n = 1;
      _items = _n < _items.length ? _items.slice(_n) : [];
    }
    {
      const _n = 3;
      if (_n < _items.length) _items = _items.slice(0, _n);
    }
    const _res = [];
    for (const _it of _items) {
      const p = _it.p;
      _res.push(p);
    }
    return _res;
  })();
  _print("--- Top products (excluding most expensive) ---");
  for (const item of expensive) {
    _print(item.name, "costs $", item.price);
  }
}
function _cmp(a: any, b: any): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    const order: Record<string, number> = { store: 0, web: 1, catalog: 2 };
    if (order[a] !== undefined && order[b] !== undefined) {
      return order[a] - order[b];
    }
    return a < b ? -1 : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _print(...args: any[]): void {
  const out = args.map((a) => {
    if (Array.isArray(a)) return a.join(" ");
    if (a && typeof a === "object") return JSON.stringify(a);
    return String(a);
  }).join(" ").trimEnd();
  console.log(out);
}

main();
