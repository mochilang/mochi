// Generated by Mochi compiler v0.10.25 on 2025-07-14T06:17:38Z
// Source: /workspace/mochi/tests/vm/valid/dataset_sort_take_limit.mochi

let expensive: Record<string, any>[];
let products: Record<string, any>[];

function main(): void {
  products = [
    {
      "name": "Laptop",
      "price": 1500,
    },
    {
      "name": "Smartphone",
      "price": 900,
    },
    {
      "name": "Tablet",
      "price": 600,
    },
    {
      "name": "Monitor",
      "price": 300,
    },
    {
      "name": "Keyboard",
      "price": 100,
    },
    {
      "name": "Mouse",
      "price": 50,
    },
    {
      "name": "Headphones",
      "price": 200,
    },
  ];
  expensive = (() => {
    const _src = products;
    var _items = [];
    for (const p of _src) {
      _items.push({ p: p });
    }
    let _pairs = _items.map((it) => {
      const p = it;
      return { item: it, key: (-p.price) };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    {
      const _n = 1;
      _items = _n < _items.length ? _items.slice(_n) : [];
    }
    {
      const _n = 3;
      if (_n < _items.length) _items = _items.slice(0, _n);
    }
    const _res = [];
    for (const _it of _items) {
      const p = _it.p;
      _res.push(p);
    }
    return _res;
  })();
  console.log("--- Top products (excluding most expensive) ---");
  for (const item of expensive) {
    console.log(`${item.name} costs $ ${item.price}`);
  }
}
main();
