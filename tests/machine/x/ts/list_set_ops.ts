// Generated by Mochi TypeScript compiler

function main(): void {
  console.log(_fmt(_union([
    1,
    2,
  ], [
    2,
    3,
  ])));
  console.log(_fmt(_except([
    1,
    2,
    3,
  ], [2])));
  console.log(_fmt(_intersect([
    1,
    2,
    3,
  ], [
    2,
    4,
  ])));
  console.log(_fmt(
    _union_all([
      1,
      2,
    ], [
      2,
      3,
    ]).length,
  ));
}
function _except<T>(a: T[], b: T[]): T[] {
  const remove = new Set<T>(b);
  const res: T[] = [];
  for (const it of a) if (!remove.has(it)) res.push(it);
  return res;
}

function _fmt(v: any): string {
  if (Array.isArray(v)) return v.map(_fmt).join(" ");
  if (v && typeof v === "object") {
    const keys = Object.keys(v).sort();
    const parts = keys.map((k) => k + ":" + _fmt(v[k]));
    return "map[" + parts.join(" ") + "]";
  }
  return String(v);
}

function _intersect<T>(a: T[], b: T[]): T[] {
  const keep = new Set<T>(b);
  const res: T[] = [];
  const seen = new Set<T>();
  for (const it of a) {
    if (keep.has(it) && !seen.has(it)) {
      seen.add(it);
      res.push(it);
    }
  }
  return res;
}

function _union<T>(a: T[], b: T[]): T[] {
  const res: T[] = [];
  const seen = new Set<T>();
  for (const it of a) {
    if (!seen.has(it)) {
      seen.add(it);
      res.push(it);
    }
  }
  for (const it of b) {
    if (!seen.has(it)) {
      seen.add(it);
      res.push(it);
    }
  }
  return res;
}

function _union_all<T>(a: T[], b: T[]): T[] {
  return a.concat(b);
}

main();
