// Generated by Mochi TypeScript compiler

function main(): void {
  console.log(
    Array.isArray(_union([
        1,
        2,
      ], [
        2,
        3,
      ]))
      ? _union([
        1,
        2,
      ], [
        2,
        3,
      ]).join(" ")
      : _union([
        1,
        2,
      ], [
        2,
        3,
      ]),
  );
  console.log(
    Array.isArray(_except([
        1,
        2,
        3,
      ], [2]))
      ? _except([
        1,
        2,
        3,
      ], [2]).join(" ")
      : _except([
        1,
        2,
        3,
      ], [2]),
  );
  console.log(
    Array.isArray(_intersect([
        1,
        2,
        3,
      ], [
        2,
        4,
      ]))
      ? _intersect([
        1,
        2,
        3,
      ], [
        2,
        4,
      ]).join(" ")
      : _intersect([
        1,
        2,
        3,
      ], [
        2,
        4,
      ]),
  );
  console.log(
    _union_all([
      1,
      2,
    ], [
      2,
      3,
    ]).length,
  );
}
function _except<T>(a: T[], b: T[]): T[] {
  const remove = new Set<T>(b);
  const res: T[] = [];
  for (const it of a) if (!remove.has(it)) res.push(it);
  return res;
}

function _intersect<T>(a: T[], b: T[]): T[] {
  const keep = new Set<T>(b);
  const res: T[] = [];
  const seen = new Set<T>();
  for (const it of a) {
    if (keep.has(it) && !seen.has(it)) {
      seen.add(it);
      res.push(it);
    }
  }
  return res;
}

function _union<T>(a: T[], b: T[]): T[] {
  const res: T[] = [];
  const seen = new Set<T>();
  for (const it of a) {
    if (!seen.has(it)) {
      seen.add(it);
      res.push(it);
    }
  }
  for (const it of b) {
    if (!seen.has(it)) {
      seen.add(it);
      res.push(it);
    }
  }
  return res;
}

function _union_all<T>(a: T[], b: T[]): T[] {
  return a.concat(b);
}

main();
