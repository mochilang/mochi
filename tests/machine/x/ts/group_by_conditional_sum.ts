// Generated by Mochi TypeScript compiler

let items: _[];
let result: { [key: string]: any }[];

function main(): void {
  items = [
    {
      "cat": "a",
      "val": 10,
      "flag": true,
    },
    {
      "cat": "a",
      "val": 5,
      "flag": false,
    },
    {
      "cat": "b",
      "val": 20,
      "flag": true,
    },
  ];
  result = (() => {
    const _src = items;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const i of _src) {
      const _key = i.cat;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push({ ...i, i: i });
    }
    let _groups = _order.map((k) => _map.get(k)!);
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return { item: it, key: g.key };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "cat": g.key,
        "share":
          (_sum(g.items.map((x) => (x.flag ? x.val : 0))) /
            _sum(g.items.map((x) => x.val))),
      });
    }
    return _res;
  })();
  console.log(Array.isArray(result) ? result.join(" ") : result);
}
function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
