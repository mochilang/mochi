// Generated by Mochi compiler v0.10.27 on 1970-01-01T00:00:00Z
// Source: /workspace/mochi/tests/vm/valid/group_by_conditional_sum.mochi

let items: Record<string, any>[];
let result: Record<string, any>[];

function main(): void {
  items = [
    {
      "cat": "a",
      "val": 10,
      "flag": true,
    },
    {
      "cat": "a",
      "val": 5,
      "flag": false,
    },
    {
      "cat": "b",
      "val": 20,
      "flag": true,
    },
  ];
  result = (() => {
    const _src = items;
    const _map = new Map<string, any>();
    var _items = [];
    for (const i of _src) {
      const _key = i.cat;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...i, i: i });
    }
    let _groups = Array.from(_map.values());
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return { item: it, key: g.key };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "cat": g.key,
        "share": (g.items.map((x) => (x.flag ? x.val : 0)).reduce((a, b) =>
          a + Number(b), 0) / g.items.map((x) =>
            x.val
          ).reduce((a, b) =>
            a + Number(b), 0)),
      });
    }
    return _res;
  })();
  _print(result);
}
function _cmp(a: unknown, b: unknown): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    const order: Record<string, number> = { store: 0, web: 1, catalog: 2 };
    if (order[a] !== undefined && order[b] !== undefined) {
      return order[a] - order[b];
    }
    return a < b ? -1 : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _print(...args: unknown[]): void {
  const out = args.map((a) => {
    if (Array.isArray(a)) return a.join(" ");
    if (typeof a === "boolean") return a ? "1" : "0";
    return String(a);
  }).join(" ").trimEnd();
  console.log(out);
}

main();
