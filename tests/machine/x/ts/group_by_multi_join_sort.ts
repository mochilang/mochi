// Generated by Mochi compiler v0.10.27 on 1970-01-01T00:00:00Z
// Source: /workspace/mochi/tests/vm/valid/group_by_multi_join_sort.mochi

let customer: Record<string, any>[];
let end_date: string;
let lineitem: Record<string, any>[];
let nation: Record<string, any>[];
let orders: Record<string, any>[];
let result: Record<string, any>[];
let start_date: string;

function main(): void {
  nation = [
    {
      "n_nationkey": 1,
      "n_name": "BRAZIL",
    },
  ];
  customer = [
    {
      "c_custkey": 1,
      "c_name": "Alice",
      "c_acctbal": 100,
      "c_nationkey": 1,
      "c_address": "123 St",
      "c_phone": "123-456",
      "c_comment": "Loyal",
    },
  ];
  orders = [
    {
      "o_orderkey": 1000,
      "o_custkey": 1,
      "o_orderdate": "1993-10-15",
    },
    {
      "o_orderkey": 2000,
      "o_custkey": 1,
      "o_orderdate": "1994-01-02",
    },
  ];
  lineitem = [
    {
      "l_orderkey": 1000,
      "l_returnflag": "R",
      "l_extendedprice": 1000,
      "l_discount": 0.1,
    },
    {
      "l_orderkey": 2000,
      "l_returnflag": "N",
      "l_extendedprice": 500,
      "l_discount": 0,
    },
  ];
  start_date = "1993-10-01";
  end_date = "1994-01-01";
  result = (() => {
    const _src = customer;
    const _map = new Map<string, any>();
    var _items = [];
    for (const c of _src) {
      for (const o of orders) {
        if (!(o.o_custkey == c.c_custkey)) continue;
        for (const l of lineitem) {
          if (!(l.l_orderkey == o.o_orderkey)) continue;
          for (const n of nation) {
            if (!(n.n_nationkey == c.c_nationkey)) continue;
            if (
              !(((o.o_orderdate >= start_date) && (o.o_orderdate < end_date)) &&
                (l.l_returnflag == "R"))
            ) continue;
            const _key = {
              "c_custkey": c.c_custkey,
              "c_name": c.c_name,
              "c_acctbal": c.c_acctbal,
              "c_address": c.c_address,
              "c_phone": c.c_phone,
              "c_comment": c.c_comment,
              "n_name": n.n_name,
            };
            const _ks = JSON.stringify(_key);
            let _g = _map.get(_ks);
            if (!_g) {
              _g = { key: _key, items: [] };
              _map.set(_ks, _g);
            }
            _g.items.push({ ...c, ...o, ...l, ...n, c: c, o: o, l: l, n: n });
          }
        }
      }
    }
    let _groups = Array.from(_map.values());
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return {
        item: it,
        key:
          (-_sum(
            g.items.map((x) => (x.l.l_extendedprice * (1 - x.l.l_discount))),
          )),
      };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "c_custkey": g.key.c_custkey,
        "c_name": g.key.c_name,
        "revenue": _sum(
          g.items.map((x) => (x.l.l_extendedprice * (1 - x.l.l_discount))),
        ),
        "c_acctbal": g.key.c_acctbal,
        "n_name": g.key.n_name,
        "c_address": g.key.c_address,
        "c_phone": g.key.c_phone,
        "c_comment": g.key.c_comment,
      });
    }
    return _res;
  })();
  _print(result);
}
function _cmp(a: any, b: any): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    const order: Record<string, number> = { store: 0, web: 1, catalog: 2 };
    if (order[a] !== undefined && order[b] !== undefined) {
      return order[a] - order[b];
    }
    return a < b ? -1 : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _print(...args: any[]): void {
  const out = args.map((a) => {
    if (Array.isArray(a)) return a.join(" ");
    if (a && typeof a === "object") return JSON.stringify(a);
    return String(a);
  }).join(" ").trimEnd();
  console.log(out);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
