// Generated by Mochi TypeScript compiler

let customers: _[];
let orders: _[];
let result: { [key: string]: any }[];

function main(): void {
  customers = [
    {
      "id": 1,
      "name": "Alice",
    },
    {
      "id": 2,
      "name": "Bob",
    },
    {
      "id": 3,
      "name": "Charlie",
    },
  ];
  orders = [
    {
      "id": 100,
      "customerId": 1,
      "total": 250,
    },
    {
      "id": 101,
      "customerId": 2,
      "total": 125,
    },
    {
      "id": 102,
      "customerId": 1,
      "total": 300,
    },
    {
      "id": 103,
      "customerId": 4,
      "total": 80,
    },
  ];
  result = (() => {
    const _src = orders;
    const _join = customers;
    const _pairs = _hashJoin(_src, _join, (o) => o.customerId, (c) => c.id);
    const _res = [];
    for (const _p of _pairs) {
      const o = _p[0];
      const c = _p[1];
      _res.push({
        "orderId": o.id,
        "customerName": c.name,
        "total": o.total,
      });
    }
    return _res;
  })();
  console.log(_fmt("--- Orders with customer info ---"));
  for (const entry of result) {
    console.log(
      _fmt("Order"),
      _fmt(entry.orderId),
      _fmt("by"),
      _fmt(entry.customerName),
      _fmt("- $"),
      _fmt(entry.total),
    );
  }
}
function _fmt(v: any): string {
  if (Array.isArray(v)) return v.map(_fmt).join(" ");
  if (v && typeof v === "object") {
    const keys = Object.keys(v).sort();
    const parts = keys.map((k) => k + ":" + _fmt(v[k]));
    return "map[" + parts.join(" ") + "]";
  }
  return String(v);
}

function _hashJoin(
  left: any[],
  right: any[],
  lk: (v: any) => any,
  rk: (v: any) => any,
): any[] {
  const idx = new Map<any, any[]>();
  for (const r of right) {
    const k = rk(r);
    const arr = idx.get(k);
    if (arr) arr.push(r);
    else idx.set(k, [r]);
  }
  const out: any[] = [];
  for (const l of left) {
    const arr = idx.get(lk(l));
    if (!arr) continue;
    for (const r of arr) out.push([l, r]);
  }
  return out;
}

main();
