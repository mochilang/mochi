// Generated by Mochi TypeScript compiler

let customers: _[];
let orders: _[];
let result: { [key: string]: any }[];

function main(): void {
  customers = [
    {
      "id": 1,
      "name": "Alice",
    },
    {
      "id": 2,
      "name": "Bob",
    },
    {
      "id": 3,
      "name": "Charlie",
    },
    {
      "id": 4,
      "name": "Diana",
    },
  ];
  orders = [
    {
      "id": 100,
      "customerId": 1,
      "total": 250,
    },
    {
      "id": 101,
      "customerId": 2,
      "total": 125,
    },
    {
      "id": 102,
      "customerId": 1,
      "total": 300,
    },
  ];
  result = (() => {
    const _src = customers;
    const _join = orders;
    const _res = [];
    for (const o of _join) {
      let _m = false;
      for (const c of _src) {
        if (!(o.customerId == c.id)) continue;
        _m = true;
        _res.push({
          "customerName": c.name,
          "order": o,
        });
      }
      if (!_m) {
        const c = null;
        _res.push({
          "customerName": c.name,
          "order": o,
        });
      }
    }
    return _res;
  })();
  console.log(_fmt("--- Right Join using syntax ---"));
  for (const entry of result) {
    if (entry.order) {
      console.log(
        _fmt("Customer"),
        _fmt(entry.customerName),
        _fmt("has order"),
        _fmt(entry.order.id),
        _fmt("- $"),
        _fmt(entry.order.total),
      );
    } else {
      console.log(
        _fmt("Customer"),
        _fmt(entry.customerName),
        _fmt("has no orders"),
      );
    }
  }
}
function _fmt(v: any): string {
  if (Array.isArray(v)) return v.map(_fmt).join(" ");
  if (v && typeof v === "object") {
    const keys = Object.keys(v).sort();
    const parts = keys.map((k) => k + ":" + _fmt(v[k]));
    return "map[" + parts.join(" ") + "]";
  }
  return String(v);
}

main();
