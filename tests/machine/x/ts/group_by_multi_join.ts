// Generated by Mochi compiler v0.10.27 on 1970-01-01T00:00:00Z
// Source: /workspace/mochi/tests/vm/valid/group_by_multi_join.mochi

let filtered: Record<string, any>[];
let grouped: Record<string, any>[];
let nations: Record<string, any>[];
let partsupp: Record<string, any>[];
let suppliers: { [key: string]: number }[];

function main(): void {
  nations = [
    {
      "id": 1,
      "name": "A",
    },
    {
      "id": 2,
      "name": "B",
    },
  ];
  suppliers = [
    {
      "id": 1,
      "nation": 1,
    },
    {
      "id": 2,
      "nation": 2,
    },
  ];
  partsupp = [
    {
      "part": 100,
      "supplier": 1,
      "cost": 10,
      "qty": 2,
    },
    {
      "part": 100,
      "supplier": 2,
      "cost": 20,
      "qty": 1,
    },
    {
      "part": 200,
      "supplier": 1,
      "cost": 5,
      "qty": 3,
    },
  ];
  filtered = (() => {
    const _src = partsupp;
    const _res = [];
    for (const ps of _src) {
      for (const s of suppliers) {
        if (!(s.id == ps.supplier)) continue;
        for (const n of nations) {
          if (!(n.id == s.nation)) continue;
          if (!(n.name == "A")) continue;
          _res.push({
            "part": ps.part,
            "value": (ps.cost * ps.qty),
          });
        }
      }
    }
    return _res;
  })();
  grouped = (() => {
    const _src = filtered;
    const _map = new Map<string, any>();
    var _items = [];
    for (const x of _src) {
      const _key = x.part;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...x, x: x });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "part": g.key,
        "total": g.items.map((r) => r.value).reduce((a, b) => a + Number(b), 0),
      });
    }
    return _res;
  })();
  _print(grouped);
}
function _print(...args: unknown[]): void {
  const out = args.map((a) => {
    if (Array.isArray(a)) return a.join(" ");
    if (typeof a === "boolean") return a ? "1" : "0";
    return String(a);
  }).join(" ").trimEnd();
  console.log(out);
}

main();
