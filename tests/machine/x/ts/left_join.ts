// Generated by Mochi TypeScript compiler

let customers: Record<string, any>[];
let orders: Record<string, number>[];
let result: Record<string, any>[];

function main(): void {
  customers = [
    {
      "id": 1,
      "name": "Alice",
    },
    {
      "id": 2,
      "name": "Bob",
    },
  ];
  orders = [
    {
      "id": 100,
      "customerId": 1,
      "total": 250,
    },
    {
      "id": 101,
      "customerId": 3,
      "total": 80,
    },
  ];
  result = (() => {
    const _src = orders;
    const _join = customers;
    const _res = [];
    for (const o of _src) {
      let _m = false;
      for (const c of _join) {
        if (!(_equal(o.customerId, c.id))) continue;
        _m = true;
        _res.push({
          "orderId": o.id,
          "customer": c,
          "total": o.total,
        });
      }
      if (!_m) {
        const c = null;
        _res.push({
          "orderId": o.id,
          "customer": c,
          "total": o.total,
        });
      }
    }
    return _res;
  })();
  console.log("--- Left Join ---");
  for (const entry of result) {
    console.log(
      "Order",
      entry.orderId,
      "customer",
      entry.customer,
      "total",
      entry.total,
    );
  }
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
