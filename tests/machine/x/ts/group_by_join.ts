// Generated by Mochi compiler v0.10.25 on 2025-07-13T05:14:54Z
// Source: /workspace/mochi/tests/vm/valid/group_by_join.mochi

let customers: Record<string, any>[];
let orders: { [key: string]: number }[];
let stats: Record<string, any>[];

function main(): void {
  customers = [
    {
      "id": 1,
      "name": "Alice",
    },
    {
      "id": 2,
      "name": "Bob",
    },
  ];
  orders = [
    {
      "id": 100,
      "customerId": 1,
    },
    {
      "id": 101,
      "customerId": 1,
    },
    {
      "id": 102,
      "customerId": 2,
    },
  ];
  stats = (() => {
    const _src = orders;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const o of _src) {
      for (const c of customers) {
        if (!(_equal(o.customerId, c.id))) continue;
        const _key = c.name;
        const _ks = JSON.stringify(_key);
        let _g = _map.get(_ks);
        if (!_g) {
          _g = { key: _key, items: [] };
          _map.set(_ks, _g);
          _order.push(_ks);
        }
        _g.items.push({ ...o, ...c, o: o, c: c });
      }
    }
    let _groups = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "name": g.key,
        "count": _count(g),
      });
    }
    return _res;
  })();
  console.log("--- Orders per customer ---");
  for (const s of stats) {
    console.log(s.name, "orders:", s.count);
  }
}
function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

main();
