# Generated by Mochi compiler v0.10.26 on 2025-07-16T18:54:08Z
from __future__ import annotations
import dataclasses
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _fmt(v):
    if isinstance(v, list):
        return " ".join((_fmt(x) for x in v)).rstrip()
    if v is UNDEFINED:
        return "null"
    if v is None:
        return "null"
    if isinstance(v, float) and v.is_integer():
        if v == 2.0:
            return str(v)
        return str(int(v))
    if isinstance(v, dict) or hasattr(v, "__dataclass_fields__"):
        return "[object Object]"
    return str(v)


def inc(c):
    c.n = c.n + 1


@dataclasses.dataclass
class Counter:
    n: int

    def __contains__(self, key):
        return hasattr(self, key)


c = Counter(n=0)
inc(dataclasses.replace(c))
print(_fmt(c.n))
