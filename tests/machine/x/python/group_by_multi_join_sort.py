# Generated by Mochi compiler v0.10.27 on 2025-07-17T11:45:45Z
from __future__ import annotations
import dataclasses


@dataclasses.dataclass
class Auto1:
    c_custkey: object
    c_name: object
    revenue: float
    c_acctbal: object
    n_name: object
    c_address: object
    c_phone: object
    c_comment: object

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    c_custkey: int
    c_name: str
    c_acctbal: float
    c_address: str
    c_phone: str
    c_comment: str
    n_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    c_custkey: int
    c_name: str
    c_acctbal: float
    c_nationkey: int
    c_address: str
    c_phone: str
    c_comment: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Lineitem:
    l_orderkey: int
    l_returnflag: str
    l_extendedprice: float
    l_discount: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Nation:
    n_nationkey: int
    n_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Order:
    o_orderkey: int
    o_custkey: int
    o_orderdate: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, list):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, tuple):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, dict):
        return str(k)
    return k


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


nation = [Nation(n_nationkey=1, n_name="BRAZIL")]
customer = [
    Customer(
        c_custkey=1,
        c_name="Alice",
        c_acctbal=100.0,
        c_nationkey=1,
        c_address="123 St",
        c_phone="123-456",
        c_comment="Loyal",
    )
]
orders = [
    Order(o_orderkey=1000, o_custkey=1, o_orderdate="1993-10-15"),
    Order(o_orderkey=2000, o_custkey=1, o_orderdate="1994-01-02"),
]
lineitem = [
    Lineitem(l_orderkey=1000, l_returnflag="R", l_extendedprice=1000.0, l_discount=0.1),
    Lineitem(l_orderkey=2000, l_returnflag="N", l_extendedprice=500.0, l_discount=0.0),
]
start_date = "1993-10-01"
end_date = "1994-01-01"


def _q0():
    _src = customer
    _rows = _query(
        _src,
        [
            {"items": orders, "on": lambda c, o: o.o_custkey == c.c_custkey},
            {"items": lineitem, "on": lambda c, o, l: l.l_orderkey == o.o_orderkey},
            {"items": nation, "on": lambda c, o, l, n: n.n_nationkey == c.c_nationkey},
        ],
        {
            "select": lambda c, o, l, n: (c, o, l, n),
            "where": lambda c, o, l, n: (
                o.o_orderdate >= start_date and o.o_orderdate < end_date
            )
            and l.l_returnflag == "R",
        },
    )
    _groups = _group_by(
        _rows,
        lambda c, o, l, n: Auto2(
            c_custkey=c.c_custkey,
            c_name=c.c_name,
            c_acctbal=c.c_acctbal,
            c_address=c.c_address,
            c_phone=c.c_phone,
            c_comment=c.c_comment,
            n_name=n.n_name,
        ),
    )
    _items1 = _groups
    _items1 = sorted(
        _items1,
        key=lambda g: _sort_key(
            -_sum([x[2].l_extendedprice * (1 - x[2].l_discount) for x in g])
        ),
    )
    return [
        Auto1(
            c_custkey=g.key["c_custkey"],
            c_name=g.key["c_name"],
            revenue=_sum([x[2].l_extendedprice * (1 - x[2].l_discount) for x in g]),
            c_acctbal=g.key["c_acctbal"],
            n_name=g.key["n_name"],
            c_address=g.key["c_address"],
            c_phone=g.key["c_phone"],
            c_comment=g.key["c_comment"],
        )
        for g in _items1
    ]


result = _q0()
print(result)
