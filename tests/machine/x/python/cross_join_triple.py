# Generated by Mochi compiler v0.10.27 on 2025-07-17T07:49:10Z
from __future__ import annotations
import dataclasses


@dataclasses.dataclass
class Auto1:
    n: int
    l: str
    b: bool

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _fmt(v):
    if isinstance(v, list):
        return " ".join((_fmt(x) for x in v)).rstrip()
    if v is UNDEFINED:
        return "null"
    if v is None:
        return "null"
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return repr(v)
    if isinstance(v, dict) or hasattr(v, "__dataclass_fields__"):
        return "[object Object]"
    return str(v)


nums = [1, 2]
letters = ["A", "B"]
bools = [True, False]
combos = [Auto1(n=n, l=l, b=b) for n in nums for l in letters for b in bools]
print("--- Cross Join of three lists ---")
for c in combos:
    print(" ".join([_fmt(c.n), _fmt(c.l), str(c.b).lower()]).rstrip())
