# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:11:08Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    returnflag: str
    linestatus: str
    sum_qty: int
    sum_base_price: int
    sum_disc_price: float
    sum_charge: float
    avg_qty: float
    avg_price: int
    avg_disc: float
    count_order: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    returnflag: str
    linestatus: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Lineitem:
    l_quantity: int
    l_extendedprice: float
    l_discount: float
    l_tax: float
    l_returnflag: str
    l_linestatus: str
    l_shipdate: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus():
    assert result == [
        Auto1(
            returnflag="N",
            linestatus="O",
            sum_qty=53,
            sum_base_price=3000,
            sum_disc_price=950.0 + 1800.0,
            sum_charge=950.0 * 1.07 + 1800.0 * 1.05,
            avg_qty=26.5,
            avg_price=1500,
            avg_disc=0.07500000000000001,
            count_order=2,
        )
    ]


lineitem = [
    Lineitem(
        l_quantity=17,
        l_extendedprice=1000.0,
        l_discount=0.05,
        l_tax=0.07,
        l_returnflag="N",
        l_linestatus="O",
        l_shipdate="1998-08-01",
    ),
    Lineitem(
        l_quantity=36,
        l_extendedprice=2000.0,
        l_discount=0.1,
        l_tax=0.05,
        l_returnflag="N",
        l_linestatus="O",
        l_shipdate="1998-09-01",
    ),
    Lineitem(
        l_quantity=25,
        l_extendedprice=1500.0,
        l_discount=0.0,
        l_tax=0.08,
        l_returnflag="R",
        l_linestatus="F",
        l_shipdate="1998-09-03",
    ),
]


def _q0():
    _groups = {}
    _order = []
    for row in lineitem:
        if not row.l_shipdate <= "1998-09-02":
            continue
        _k = Auto2(returnflag=row.l_returnflag, linestatus=row.l_linestatus)
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(row)
    _items1 = [_groups[k] for k in _order]
    return [
        Auto1(
            returnflag=g.key["returnflag"],
            linestatus=g.key["linestatus"],
            sum_qty=sum([x.l_quantity for x in g]),
            sum_base_price=sum([x.l_extendedprice for x in g]),
            sum_disc_price=sum([x.l_extendedprice * (1 - x.l_discount) for x in g]),
            sum_charge=sum(
                [x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax) for x in g]
            ),
            avg_qty=(
                sum([x.l_quantity for x in g]) / len([x.l_quantity for x in g])
                if [x.l_quantity for x in g]
                else 0
            ),
            avg_price=(
                sum([x.l_extendedprice for x in g])
                / len([x.l_extendedprice for x in g])
                if [x.l_extendedprice for x in g]
                else 0
            ),
            avg_disc=(
                sum([x.l_discount for x in g]) / len([x.l_discount for x in g])
                if [x.l_discount for x in g]
                else 0
            ),
            count_order=len(g),
        )
        for g in _items1
    ]


result = _q0()
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus()
