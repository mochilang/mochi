# Generated by Mochi compiler v0.10.26 on 2025-07-16T18:29:34Z
from __future__ import annotations
import dataclasses
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _fmt(v):
    if isinstance(v, list):
        return " ".join((_fmt(x) for x in v))
    if v is UNDEFINED:
        return "undefined"
    if v is None:
        return "null"
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    if isinstance(v, dict) or hasattr(v, "__dataclass_fields__"):
        return "[object Object]"
    return str(v)


@dataclasses.dataclass
class Person:
    name: str
    age: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Book:
    title: str
    author: Person

    def __contains__(self, key):
        return hasattr(self, key)


book = Book(title="Go", author=Person(name="Bob", age=42))
print(_fmt(book.author.name))
