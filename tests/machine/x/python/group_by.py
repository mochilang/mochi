# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:31:48Z
from __future__ import annotations
import dataclasses


@dataclasses.dataclass
class Auto1:
    city: object
    count: int
    avg_age: float

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Person:
    name: str
    age: int
    city: str

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _avg(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("avg() expects list or group")
    if not v:
        return 0
    s = 0.0
    for it in v:
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("avg() expects numbers")
    return s / len(v)


def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, "Items"):
        return len(v.Items)
    raise Exception("count() expects list or group")


def _fmt(v):
    if isinstance(v, list):
        return " ".join((_fmt(x) for x in v))
    if v is None:
        return "null"
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    if isinstance(v, dict) or hasattr(v, "__dataclass_fields__"):
        return "[object Object]"
    return str(v)


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


people = [
    Person(name="Alice", age=30, city="Paris"),
    Person(name="Bob", age=15, city="Hanoi"),
    Person(name="Charlie", age=65, city="Paris"),
    Person(name="Diana", age=45, city="Hanoi"),
    Person(name="Eve", age=70, city="Paris"),
    Person(name="Frank", age=22, city="Hanoi"),
]


def _q0():
    _groups = {}
    _order = []
    for person in people:
        _k = person.city
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(person)
    _items1 = [_groups[k] for k in _order]
    return [
        Auto1(
            city=g.key,
            count=len(g),
            avg_age=(
                sum([p.age for p in g]) / len([p.age for p in g])
                if [p.age for p in g]
                else 0
            ),
        )
        for g in _items1
    ]


stats = _q0()
print(_fmt("--- People grouped by city ---"))
for s in stats:
    print(
        " ".join(
            [
                _fmt(s.city),
                _fmt(": count ="),
                _fmt(s.count),
                _fmt(", avg_age ="),
                _fmt(s.avg_age),
            ]
        )
    )
