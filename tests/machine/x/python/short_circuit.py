# Generated by Mochi compiler v0.10.27 on 2025-07-17T02:53:16Z
from __future__ import annotations
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _fmt(v):
    if isinstance(v, list):
        return " ".join((_fmt(x) for x in v)).rstrip()
    if v is UNDEFINED:
        return "null"
    if v is None:
        return "null"
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    if isinstance(v, dict) or hasattr(v, "__dataclass_fields__"):
        return "[object Object]"
    return str(v)


def boom(a, b):
    print("boom")
    return True


print(_fmt(str(False and boom(1, 2)).lower()))
print(_fmt(str(True or boom(1, 2)).lower()))
