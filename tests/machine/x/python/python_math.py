# Generated by Mochi compiler v0.10.25 on 2025-07-14T05:05:35Z
from __future__ import annotations
import math
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


r = 3.0
area = _get(math, "pi") * _get(math, "pow")(r, 2.0)
root = _get(math, "sqrt")(49.0)
sin45 = _get(math, "sin")(_get(math, "pi") / 4.0)
log_e = _get(math, "log")(_get(math, "e"))
print(f"Circle area with r = {r} => {area}")
print(f"Square root of 49: {root}")
print(f"sin(Ï€/4): {sin45}")
print(f"log(e): {log_e}")
