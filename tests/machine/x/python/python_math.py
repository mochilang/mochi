# Generated by Mochi Python compiler
from __future__ import annotations
import math
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


r: float = 3
area: float = _get(math, "pi") * _get(math, "pow")(r, 2)
root: float = _get(math, "sqrt")(49)
sin45: float = _get(math, "sin")(_get(math, "pi") / 4)
log_e: float = _get(math, "log")(_get(math, "e"))
print("Circle area with r =", r, "=>", area)
print("Square root of 49:", root)
print("sin(Ï€/4):", sin45)
print("log(e):", log_e)
