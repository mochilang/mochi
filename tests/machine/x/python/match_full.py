# Generated by Mochi compiler v0.10.27 on 2025-07-17T07:49:35Z
from __future__ import annotations
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _fmt(v):
    if isinstance(v, list):
        return " ".join((_fmt(x) for x in v)).rstrip()
    if v is UNDEFINED:
        return "null"
    if v is None:
        return "null"
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return repr(v)
    if isinstance(v, dict) or hasattr(v, "__dataclass_fields__"):
        return "[object Object]"
    return str(v)


def classify(n):

    def _match0(_t0):
        match _t0:
            case 0:
                return "zero"
            case 1:
                return "one"
            case _:
                return "many"

    return _match0(n)


x = 2


def _match1(_t1):
    match _t1:
        case 1:
            return "one"
        case 2:
            return "two"
        case 3:
            return "three"
        case _:
            return "unknown"


label = _match1(x)
print(_fmt(label))
day = "sun"


def _match2(_t2):
    match _t2:
        case "mon":
            return "tired"
        case "fri":
            return "excited"
        case "sun":
            return "relaxed"
        case _:
            return "normal"


mood = _match2(day)
print(_fmt(mood))
ok = True


def _match3(_t3):
    match _t3:
        case True:
            return "confirmed"
        case False:
            return "denied"
        case _:
            return None


status = _match3(ok)
print(_fmt(status))
print(_fmt(classify(0)))
print(_fmt(classify(5)))
