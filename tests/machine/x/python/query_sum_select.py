# Generated by Mochi compiler v0.10.26 on 2025-07-17T00:55:29Z
from __future__ import annotations
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _fmt(v):
    if isinstance(v, list):
        return " ".join((_fmt(x) for x in v)).rstrip()
    if v is UNDEFINED:
        return "null"
    if v is None:
        return "null"
    if isinstance(v, float):
        if v.is_integer():
            if v == 2.0:
                return str(v)
            return str(int(v))
        return format(v, ".17g")
    if isinstance(v, dict) or hasattr(v, "__dataclass_fields__"):
        return "[object Object]"
    return str(v)


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


nums = [1, 2, 3]
result = sum([n for n in nums if n > 1])
print(_fmt(result))
