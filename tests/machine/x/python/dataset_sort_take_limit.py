# Generated by Mochi compiler v0.10.27 on 2025-07-17T08:51:15Z
from __future__ import annotations
import dataclasses


@dataclasses.dataclass
class Product:
    name: str
    price: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _fmt(v):
    if isinstance(v, list):
        return " ".join((_fmt(x) for x in v)).rstrip()
    if v is UNDEFINED:
        return "null"
    if v is None:
        return "null"
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return repr(v)
    if isinstance(v, dict) or hasattr(v, "__dataclass_fields__"):
        return "[object Object]"
    return str(v)


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, list):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, tuple):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, dict):
        return str(k)
    return k


products = [
    Product(name="Laptop", price=1500),
    Product(name="Smartphone", price=900),
    Product(name="Tablet", price=600),
    Product(name="Monitor", price=300),
    Product(name="Keyboard", price=100),
    Product(name="Mouse", price=50),
    Product(name="Headphones", price=200),
]
expensive = [
    p
    for p in sorted([p for p in products], key=lambda p: _sort_key(-p.price))[
        max(1, 0) :
    ][: max(3, 0)]
]
print("--- Top products (excluding most expensive) ---")
for item in expensive:
    print(" ".join([_fmt(item["name"]), "costs $", _fmt(item["price"])]).rstrip())
