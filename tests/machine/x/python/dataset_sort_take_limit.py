# Generated by Mochi compiler v0.10.25 on 2025-07-13T04:57:12Z
from __future__ import annotations
import dataclasses


@dataclasses.dataclass
class Product:
    name: object
    price: object

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


products = [
    Product(name="Laptop", price=1500),
    Product(name="Smartphone", price=900),
    Product(name="Tablet", price=600),
    Product(name="Monitor", price=300),
    Product(name="Keyboard", price=100),
    Product(name="Mouse", price=50),
    Product(name="Headphones", price=200),
]
expensive = [
    p
    for p in sorted([p for p in products], key=lambda p: _sort_key(-p["price"]))[
        max(1, 0) :
    ][: max(3, 0)]
]
print("--- Top products (excluding most expensive) ---")
for item in expensive:
    print(item["name"], "costs $", item["price"])
