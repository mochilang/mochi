# Generated by Mochi compiler v0.10.25 on 2025-07-14T03:12:22Z
from __future__ import annotations

testpkg = {"Add": lambda a, b: a + b, "Pi": 3.14, "Answer": 42}
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


print(_get(testpkg, "Add")(2, 3))
print(_get(testpkg, "Pi"))
print(_get(testpkg, "Answer"))
