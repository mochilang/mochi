# Generated by Mochi compiler v0.10.27 on 2025-07-17T08:51:52Z
from __future__ import annotations
import dataclasses
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _fmt(v):
    if isinstance(v, list):
        return " ".join((_fmt(x) for x in v)).rstrip()
    if v is UNDEFINED:
        return "null"
    if v is None:
        return "null"
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return repr(v)
    if isinstance(v, dict) or hasattr(v, "__dataclass_fields__"):
        return "[object Object]"
    return str(v)


def sum_tree(t):

    def _match0(_t0):
        match _t0:
            case Leaf():
                return 0
            case Node(left, value, right):
                return sum_tree(left) + value + sum_tree(right)
            case _:
                return None

    return _match0(t)


class Tree:
    pass


@dataclasses.dataclass
class Leaf(Tree):
    pass


@dataclasses.dataclass
class Node(Tree):
    left: Tree
    value: int
    right: Tree


t = Node(left=Leaf(), value=1, right=Node(left=Leaf(), value=2, right=Leaf()))
print(_fmt(sum_tree(t)))
