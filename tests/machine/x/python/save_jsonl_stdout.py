# Generated by Mochi Python compiler
from __future__ import annotations

import typing

from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _save(rows, path, opts):
    import csv, json, sys, dataclasses

    fmt = "csv"
    header = False
    delim = ","
    if opts:
        fmt = opts.get("format", fmt)
        header = opts.get("header", header)
        delim = opts.get("delimiter", delim)
        if isinstance(delim, str) and delim:
            delim = delim[0]
    rows = [dataclasses.asdict(r) if dataclasses.is_dataclass(r) else r for r in rows]
    f = sys.stdout if path is None or path == "-" else open(path, "w")
    try:
        if fmt == "tsv":
            delim = "	"
            fmt = "csv"
        if fmt == "csv":
            w = csv.writer(f, delimiter=delim)
            headers = sorted(rows[0].keys()) if rows else []
            if header:
                w.writerow(headers)
            for row in rows:
                rec = []
                for h in headers:
                    val = row.get(h)
                    if isinstance(val, (dict, list)):
                        rec.append(json.dumps(val))
                    elif val is None:
                        rec.append("")
                    else:
                        rec.append(str(val))
                w.writerow(rec)
            return
        elif fmt == "json":
            json.dump(rows, f)
        elif fmt == "jsonl":
            for row in rows:
                f.write(json.dumps(row))
                f.write("\n")
        elif fmt == "yaml":
            import yaml

            yaml.safe_dump(rows[0] if len(rows) == 1 else rows, f)
        else:
            raise Exception("unknown format: " + fmt)
    finally:
        if path is not None and path != "-":
            f.close()


people: list[dict[str, typing.Any]] = None


def main():
    global people
    people = [{"name": "Alice", "age": 30}, {"name": "Bob", "age": 25}]
    _save(people, "-", dict({"format": "jsonl"}))


if __name__ == "__main__":
    main()
