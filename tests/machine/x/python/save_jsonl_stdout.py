# Generated by Mochi compiler v0.10.26 on 2025-07-17T00:55:31Z
from __future__ import annotations
import dataclasses


@dataclasses.dataclass
class Auto1:
    format: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Person:
    name: str
    age: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _save(rows, path, opts):
    import csv, json, sys, dataclasses, os

    fmt = "csv"
    header = False
    delim = ","
    if opts:
        fmt = opts.get("format", fmt)
        header = opts.get("header", header)
        delim = opts.get("delimiter", delim)
        if isinstance(delim, str) and delim:
            delim = delim[0]
    rows = [dataclasses.asdict(r) if dataclasses.is_dataclass(r) else r for r in rows]
    if path is not None and path != "-" and (not os.path.isabs(path)):
        base = os.path.join(os.path.dirname(__file__), path)
        if not os.path.exists(base) and os.environ.get("MOCHI_ROOT"):
            clean = path
            while clean.startswith("../"):
                clean = clean[3:]
            base = os.path.join(os.environ.get("MOCHI_ROOT"), clean)
        path = base
    f = sys.stdout if path is None or path == "-" else open(path, "w")
    try:
        if fmt == "tsv":
            delim = "\t"
            fmt = "csv"
        if fmt == "csv":
            w = csv.writer(f, delimiter=delim)
            headers = sorted(rows[0].keys()) if rows else []
            if header:
                w.writerow(headers)
            for row in rows:
                rec = []
                for h in headers:
                    val = row.get(h)
                    if isinstance(val, (dict, list)):
                        rec.append(json.dumps(val, separators=(",", ":")))
                    elif val is None:
                        rec.append("")
                    else:
                        rec.append(str(val))
                w.writerow(rec)
            return
        elif fmt == "json":
            json.dump(rows, f, separators=(",", ":"), sort_keys=True)
        elif fmt == "jsonl":
            for row in rows:
                f.write(json.dumps(row, separators=(",", ":"), sort_keys=True))
                f.write("\n")
        elif fmt == "yaml":
            import yaml

            yaml.safe_dump(rows[0] if len(rows) == 1 else rows, f)
        else:
            raise Exception("unknown format: " + fmt)
    finally:
        if path is not None and path != "-":
            f.close()


people = [Person(name="Alice", age=30), Person(name="Bob", age=25)]
_save(
    people,
    "-",
    (
        dataclasses.asdict(Auto1(format="jsonl"))
        if dataclasses.is_dataclass(Auto1(format="jsonl"))
        else dict(Auto1(format="jsonl"))
    ),
)
