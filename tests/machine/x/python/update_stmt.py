# Generated by Mochi compiler v0.10.26 on 2025-07-16T18:54:24Z
from __future__ import annotations
import dataclasses
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _fmt(v):
    if isinstance(v, list):
        return " ".join((_fmt(x) for x in v)).rstrip()
    if v is UNDEFINED:
        return "null"
    if v is None:
        return "null"
    if isinstance(v, float) and v.is_integer():
        if v == 2.0:
            return str(v)
        return str(int(v))
    if isinstance(v, dict) or hasattr(v, "__dataclass_fields__"):
        return "[object Object]"
    return str(v)


@dataclasses.dataclass
class Person:
    name: str
    age: int
    status: str

    def __contains__(self, key):
        return hasattr(self, key)


def test_update_adult_status():
    assert people == [
        Person(name="Alice", age=17, status="minor"),
        Person(name="Bob", age=26, status="adult"),
        Person(name="Charlie", age=19, status="adult"),
        Person(name="Diana", age=16, status="minor"),
    ]


people: list[Person] = [
    Person(name="Alice", age=17, status="minor"),
    Person(name="Bob", age=25, status="unknown"),
    Person(name="Charlie", age=18, status="unknown"),
    Person(name="Diana", age=16, status="minor"),
]
for _i0, _it1 in enumerate(people):
    name = _it1.name
    age = _it1.age
    status = _it1.status
    if age >= 18:
        setattr(_it1, "status", "adult")
        setattr(_it1, "age", age + 1)
    people[_i0] = _it1
print(_fmt("ok"))
test_update_adult_status()
