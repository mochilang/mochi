# Generated by Mochi compiler v0.10.27 on 2025-07-17T06:58:31Z
from __future__ import annotations
import dataclasses


@dataclasses.dataclass
class Auto1:
    a: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _fmt(v):
    if isinstance(v, list):
        return " ".join((_fmt(x) for x in v)).rstrip()
    if v is UNDEFINED:
        return "null"
    if v is None:
        return "null"
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return repr(v)
    if isinstance(v, dict) or hasattr(v, "__dataclass_fields__"):
        return "[object Object]"
    return str(v)


xs = [1, 2, 3]
ys = [x for x in xs if x % 2 == 1]
print(_fmt(int(1 in ys)))
print(_fmt(int(2 in ys)))
m = Auto1(a=1)
print(_fmt(int("a" in m)))
print(_fmt(int("b" in m)))
s = "hello"
print(_fmt(int("ell" in s)))
print(_fmt(int("foo" in s)))
