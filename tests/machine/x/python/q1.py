# Generated by Mochi compiler v0.10.25 on 2025-07-14T03:15:42Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    returnflag: str
    linestatus: str
    sum_qty: int
    sum_base_price: int
    sum_disc_price: float
    sum_charge: float
    avg_qty: float
    avg_price: int
    avg_disc: float
    count_order: int

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto2:
    returnflag: object
    linestatus: object
    sum_qty: float
    sum_base_price: float
    sum_disc_price: float
    sum_charge: float
    avg_qty: float
    avg_price: float
    avg_disc: float
    count_order: int

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto3:
    returnflag: str
    linestatus: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Lineitem:
    l_quantity: int
    l_extendedprice: float
    l_discount: float
    l_tax: float
    l_returnflag: str
    l_linestatus: str
    l_shipdate: str

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _avg(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("avg() expects list or group")
    if not v:
        return 0
    s = 0.0
    for it in v:
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("avg() expects numbers")
    return s / len(v)


def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, "Items"):
        return len(v.Items)
    raise Exception("count() expects list or group")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus():
    assert result == [
        Auto1(
            returnflag="N",
            linestatus="O",
            sum_qty=53,
            sum_base_price=3000,
            sum_disc_price=950.0 + 1800.0,
            sum_charge=950.0 * 1.07 + 1800.0 * 1.05,
            avg_qty=26.5,
            avg_price=1500,
            avg_disc=0.07500000000000001,
            count_order=2,
        )
    ]


lineitem: list[Lineitem] = [
    Lineitem(
        l_quantity=17,
        l_extendedprice=1000.0,
        l_discount=0.05,
        l_tax=0.07,
        l_returnflag="N",
        l_linestatus="O",
        l_shipdate="1998-08-01",
    ),
    Lineitem(
        l_quantity=36,
        l_extendedprice=2000.0,
        l_discount=0.1,
        l_tax=0.05,
        l_returnflag="N",
        l_linestatus="O",
        l_shipdate="1998-09-01",
    ),
    Lineitem(
        l_quantity=25,
        l_extendedprice=1500.0,
        l_discount=0.0,
        l_tax=0.08,
        l_returnflag="R",
        l_linestatus="F",
        l_shipdate="1998-09-03",
    ),
]


def _q0():
    _src = lineitem
    _rows = _query(
        _src,
        [],
        {
            "select": lambda row: row,
            "where": lambda row: row.l_shipdate <= "1998-09-02",
        },
    )
    _groups = _group_by(
        _rows,
        lambda row: Auto3(returnflag=row.l_returnflag, linestatus=row.l_linestatus),
    )
    _items1 = _groups
    return [
        Auto2(
            returnflag=_get(_get(g, "key"), "returnflag"),
            linestatus=_get(_get(g, "key"), "linestatus"),
            sum_qty=_sum([x.l_quantity for x in g]),
            sum_base_price=_sum([x.l_extendedprice for x in g]),
            sum_disc_price=_sum([x.l_extendedprice * (1 - x.l_discount) for x in g]),
            sum_charge=_sum(
                [x.l_extendedprice * (1 - x.l_discount) * (1 + x.l_tax) for x in g]
            ),
            avg_qty=_avg([x.l_quantity for x in g]),
            avg_price=_avg([x.l_extendedprice for x in g]),
            avg_disc=_avg([x.l_discount for x in g]),
            count_order=len(g),
        )
        for g in _items1
    ]


result: list[Auto2] = _q0()
print(json.dumps(result, default=lambda o: vars(o)))
test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus()
