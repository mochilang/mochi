# Generated by Mochi compiler v0.10.26 on 2025-07-16T18:29:14Z
from __future__ import annotations
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _fmt(v):
    if isinstance(v, list):
        return " ".join((_fmt(x) for x in v))
    if v is UNDEFINED:
        return "undefined"
    if v is None:
        return "null"
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    if isinstance(v, dict) or hasattr(v, "__dataclass_fields__"):
        return "[object Object]"
    return str(v)


x = 2


def _match0(_t0):
    match _t0:
        case 1:
            return "one"
        case 2:
            return "two"
        case 3:
            return "three"
        case _:
            return "unknown"


label = _match0(x)
print(_fmt(label))
