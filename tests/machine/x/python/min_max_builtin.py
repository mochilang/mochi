# Generated by Mochi compiler v0.10.27 on 2025-07-17T06:58:44Z
from __future__ import annotations
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _fmt(v):
    if isinstance(v, list):
        return " ".join((_fmt(x) for x in v)).rstrip()
    if v is UNDEFINED:
        return "null"
    if v is None:
        return "null"
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return repr(v)
    if isinstance(v, dict) or hasattr(v, "__dataclass_fields__"):
        return "[object Object]"
    return str(v)


nums = [3, 1, 4]
print(_fmt(min([it for it in nums if it is not None]) if nums else 0))
print(_fmt(max([it for it in nums if it is not None]) if nums else 0))
