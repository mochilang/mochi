# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:09:09Z
from __future__ import annotations
import dataclasses


@dataclasses.dataclass
class Auto1:
    name: str
    sku: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Customer:
    id: int
    name: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Item:
    orderId: int
    sku: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Order:
    id: int
    customerId: int

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _fmt(v):
    if isinstance(v, list):
        return " ".join((_fmt(x) for x in v))
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


customers = [Customer(id=1, name="Alice"), Customer(id=2, name="Bob")]
orders = [Order(id=100, customerId=1), Order(id=101, customerId=2)]
items = [Item(orderId=100, sku="a"), Item(orderId=101, sku="b")]
result = _query(
    orders,
    [
        {"items": customers, "on": lambda o, c: o.customerId == c.id},
        {"items": items, "on": lambda o, c, i: o.id == i.orderId},
    ],
    {"select": lambda o, c, i: Auto1(name=c.name, sku=i.sku)},
)
print(_fmt("--- Multi Join ---"))
for r in result:
    print(" ".join([_fmt(r.name), _fmt("bought item"), _fmt(r.sku)]))
