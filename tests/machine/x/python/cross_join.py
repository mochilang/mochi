# Generated by Mochi compiler v0.10.27 on 2025-07-17T08:51:13Z
from __future__ import annotations
import dataclasses


@dataclasses.dataclass
class Auto1:
    orderId: int
    orderCustomerId: int
    pairedCustomerName: str
    orderTotal: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    id: int
    name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Order:
    id: int
    customerId: int
    total: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _fmt(v):
    if isinstance(v, list):
        return " ".join((_fmt(x) for x in v)).rstrip()
    if v is UNDEFINED:
        return "null"
    if v is None:
        return "null"
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return repr(v)
    if isinstance(v, dict) or hasattr(v, "__dataclass_fields__"):
        return "[object Object]"
    return str(v)


customers = [
    Customer(id=1, name="Alice"),
    Customer(id=2, name="Bob"),
    Customer(id=3, name="Charlie"),
]
orders = [
    Order(id=100, customerId=1, total=250),
    Order(id=101, customerId=2, total=125),
    Order(id=102, customerId=1, total=300),
]
result = [
    Auto1(
        orderId=o.id,
        orderCustomerId=o.customerId,
        pairedCustomerName=c.name,
        orderTotal=o.total,
    )
    for o in orders
    for c in customers
]
print("--- Cross Join: All order-customer pairs ---")
for entry in result:
    print(
        f"Order {_fmt(entry.orderId)} (customerId: {_fmt(entry.orderCustomerId)} , total: $ {_fmt(entry.orderTotal)} ) paired with {_fmt(entry.pairedCustomerName)}"
    )
