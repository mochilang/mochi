# Generated by Mochi compiler v0.10.25 on 2025-07-13T05:18:27Z
from __future__ import annotations
import dataclasses


@dataclasses.dataclass
class Customer:
    id: object
    name: object

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Order:
    id: object
    customerId: object
    total: object

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if name == "items" and hasattr(obj, "Items"):
        return getattr(obj, "Items")
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


customers = [
    Customer(id=1, name="Alice"),
    Customer(id=2, name="Bob"),
    Customer(id=3, name="Charlie"),
    Customer(id=4, name="Diana"),
]
orders = [
    Order(id=100, customerId=1, total=250),
    Order(id=101, customerId=2, total=125),
    Order(id=102, customerId=1, total=300),
]
result = _query(
    customers,
    [{"items": orders, "on": lambda c, o: o["customerId"] == c["id"], "right": True}],
    {"select": lambda c, o: {"customerName": c["name"], "order": o}},
)
print("--- Right Join using syntax ---")
for entry in result:
    if entry["order"]:
        print(
            "Customer",
            entry["customerName"],
            "has order",
            _get(entry["order"], "id"),
            "- $",
            _get(entry["order"], "total"),
        )
    else:
        print("Customer", entry["customerName"], "has no orders")
