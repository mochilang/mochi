# Generated by Mochi Python compiler
from __future__ import annotations
import dataclasses
import typing
from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _load(path: str | None, opts: dict[str, Any] | None) -> list[dict[str, Any]]:
    import csv, json, sys, os

    fmt = "csv"
    header = True
    delim = ","
    if opts:
        fmt = opts.get("format", fmt)
        header = opts.get("header", header)
        delim = opts.get("delimiter", delim)
        if isinstance(delim, str) and delim:
            delim = delim[0]
    if path is not None and (not os.path.isabs(path)):
        base = os.path.join(os.path.dirname(__file__), path)
        if os.path.exists(base):
            path = base
        elif os.environ.get("MOCHI_ROOT"):
            root = os.environ.get("MOCHI_ROOT")
            clean = path
            while clean.startswith("../"):
                clean = clean[3:]
            p = os.path.join(root, "tests", clean)
            if not os.path.exists(p):
                p = os.path.join(root, clean)
            path = os.path.normpath(p)
    f = sys.stdin if path is None or path == "-" else open(path, "r")
    try:
        if fmt == "tsv":
            delim = "\t"
            fmt = "csv"
        if fmt == "csv":
            rows = list(csv.reader(f, delimiter=delim))
            if not rows:
                return []
            if header:
                headers = rows[0]
                rows = rows[1:]
            else:
                m = max((len(r) for r in rows))
                headers = [f"c{i}" for i in range(m)]
            out = []
            for rec in rows:
                row = {}
                for i, h in enumerate(headers):
                    val = rec[i] if i < len(rec) else ""
                    if val.isdigit():
                        row[h] = int(val)
                    else:
                        try:
                            row[h] = float(val)
                        except:
                            row[h] = val
                out.append(row)
            return out
        elif fmt == "json":
            data = json.load(f)
            if isinstance(data, list):
                return [dict(d) for d in data]
            if isinstance(data, dict):
                return [dict(data)]
            return []
        elif fmt == "jsonl":
            return [json.loads(line) for line in f if line.strip()]
        elif fmt == "yaml":
            try:
                import yaml

                data = yaml.safe_load(f)
            except Exception:
                data = []
                cur = None
                for line in f:
                    line = line.rstrip()
                    if not line:
                        continue
                    if line.startswith("- "):
                        if cur is not None:
                            data.append(cur)
                        cur = {}
                        line = line[2:]
                    if ":" in line:
                        k, v = line.split(":", 1)
                        k = k.strip()
                        v = v.strip()
                        if v.isdigit():
                            cur[k] = int(v)
                        else:
                            try:
                                cur[k] = float(v)
                            except:
                                cur[k] = v
                if cur is not None:
                    data.append(cur)
            if isinstance(data, list):
                return [dict(d) for d in data]
            if isinstance(data, dict):
                return [dict(data)]
            return []
        else:
            raise Exception("unknown format: " + fmt)
    finally:
        if path is not None and path != "-":
            f.close()


@dataclasses.dataclass
class Person:
    name: typing.Any
    age: typing.Any
    email: typing.Any


people = [
    Person(**_it)
    for _it in _load(
        "tests/vm/interpreter/valid/people.yaml",
        (
            dataclasses.asdict({"format": "yaml"})
            if dataclasses.is_dataclass({"format": "yaml"})
            else dict({"format": "yaml"})
        ),
    )
]
adults = [{"name": p.name, "email": p.email} for p in people if p.age >= 18]
for a in adults:
    print(a["name"], a["email"])
