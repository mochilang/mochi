# Generated by Mochi compiler v0.10.26 on 2025-07-16T18:53:27Z
from __future__ import annotations
import dataclasses


@dataclasses.dataclass
class Auto1:
    name: str
    age: int
    is_senior: bool

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Person:
    name: str
    age: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _fmt(v):
    if isinstance(v, list):
        return " ".join((_fmt(x) for x in v)).rstrip()
    if v is UNDEFINED:
        return "null"
    if v is None:
        return "null"
    if isinstance(v, float) and v.is_integer():
        if v == 2.0:
            return str(v)
        return str(int(v))
    if isinstance(v, dict) or hasattr(v, "__dataclass_fields__"):
        return "[object Object]"
    return str(v)


people = [
    Person(name="Alice", age=30),
    Person(name="Bob", age=15),
    Person(name="Charlie", age=65),
    Person(name="Diana", age=45),
]
adults = [
    Auto1(name=person.name, age=person.age, is_senior=person.age >= 60)
    for person in people
    if person.age >= 18
]
print(_fmt("--- Adults ---"))
for person in adults:
    print(
        " ".join(
            [
                _fmt(person.name),
                _fmt("is"),
                _fmt(person.age),
                _fmt(" (senior)" if person.is_senior else ""),
            ]
        ).rstrip()
    )
