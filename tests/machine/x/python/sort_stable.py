# Generated by Mochi compiler v0.10.26 on 2025-07-16T17:32:17Z
from __future__ import annotations
import dataclasses


@dataclasses.dataclass
class Item:
    n: int
    v: str

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _fmt(v):
    if isinstance(v, list):
        return " ".join((_fmt(x) for x in v))
    if v is None:
        return "null"
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    if isinstance(v, dict) or hasattr(v, "__dataclass_fields__"):
        return "[object Object]"
    return str(v)


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, list):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, tuple):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, dict):
        return str(k)
    return k


items = [Item(n=1, v="a"), Item(n=1, v="b"), Item(n=2, v="c")]
result = [i.v for i in sorted([i for i in items], key=lambda i: _sort_key(i.n))]
print(_fmt(result))
