# Generated by Mochi Python compiler
from __future__ import annotations
import dataclasses


@dataclasses.dataclass
class Item:
    n: typing.Any
    v: typing.Any

    def __getitem__(self, key):
        return getattr(self, key)

    def __repr__(self):
        return str(self.__dict__)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


items = [Item(n=1, v="a"), Item(n=1, v="b"), Item(n=2, v="c")]
result = [i["v"] for i in sorted([i for i in items], key=lambda i: _sort_key(i["n"]))]
print(result)
