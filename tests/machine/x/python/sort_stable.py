# Generated by Mochi compiler v0.10.25 on 2025-07-14T05:39:18Z
from __future__ import annotations
import dataclasses


@dataclasses.dataclass(eq=False)
class Item:
    n: int
    v: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __iter__(self):
        return iter((self.n, self.v))

    def __eq__(self, other):
        return hasattr(other, "__dict__") and self.__dict__ == other.__dict__


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


items = [Item(n=1, v="a"), Item(n=1, v="b"), Item(n=2, v="c")]
result = [i.v for i in sorted([i for i in items], key=lambda i: _sort_key(i.n))]
print(result)
