# Generated by Mochi compiler v0.10.26 on 2025-07-17T00:55:26Z
from __future__ import annotations
import dataclasses


@dataclasses.dataclass
class Data:
    a: int
    b: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _fmt(v):
    if isinstance(v, list):
        return " ".join((_fmt(x) for x in v)).rstrip()
    if v is UNDEFINED:
        return "null"
    if v is None:
        return "null"
    if isinstance(v, float):
        if v.is_integer():
            if v == 2.0:
                return str(v)
            return str(int(v))
        return format(v, ".17g")
    if isinstance(v, dict) or hasattr(v, "__dataclass_fields__"):
        return "[object Object]"
    return str(v)


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, list):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, tuple):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, dict):
        return str(k)
    return k


data = [Data(a=1, b=2), Data(a=1, b=1), Data(a=0, b=5)]
_sorted = [
    x for x in sorted([x for x in data], key=lambda x: _sort_key(Data(a=x.a, b=x.b)))
]
print(_fmt(_sorted))
