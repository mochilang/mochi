#lang racket
(require racket/list)
(define matrix (list (list 1 2) (list 3 4)))
(set! matrix (cond [(hash? matrix) (hash-set matrix 1 (cond [(hash? (cond [(hash? matrix) (hash-ref matrix 1)] [else (list-ref matrix 1)])) (hash-set (cond [(hash? matrix) (hash-ref matrix 1)] [else (list-ref matrix 1)]) 0 5)] [else (list-set (cond [(hash? matrix) (hash-ref matrix 1)] [else (list-ref matrix 1)]) 0 5)]))] [else (list-set matrix 1 (cond [(hash? (cond [(hash? matrix) (hash-ref matrix 1)] [else (list-ref matrix 1)])) (hash-set (cond [(hash? matrix) (hash-ref matrix 1)] [else (list-ref matrix 1)]) 0 5)] [else (list-set (cond [(hash? matrix) (hash-ref matrix 1)] [else (list-ref matrix 1)]) 0 5)]))]))
(displayln (cond [(string? (cond [(string? matrix) (string-ref matrix 1)] [(hash? matrix) (hash-ref matrix 1)] [else (list-ref matrix 1)])) (string-ref (cond [(string? matrix) (string-ref matrix 1)] [(hash? matrix) (hash-ref matrix 1)] [else (list-ref matrix 1)]) 0)] [(hash? (cond [(string? matrix) (string-ref matrix 1)] [(hash? matrix) (hash-ref matrix 1)] [else (list-ref matrix 1)])) (hash-ref (cond [(string? matrix) (string-ref matrix 1)] [(hash? matrix) (hash-ref matrix 1)] [else (list-ref matrix 1)]) 0)] [else (list-ref (cond [(string? matrix) (string-ref matrix 1)] [(hash? matrix) (hash-ref matrix 1)] [else (list-ref matrix 1)]) 0)]))
