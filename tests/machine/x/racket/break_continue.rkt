; Generated by Mochi compiler v0.10.28 on 2025-07-18T02:57:05Z
#lang racket
(define (_date_number s)
  (let ([parts (string-split s "-")])
    (if (= (length parts) 3)
        (+ (* (string->number (list-ref parts 0)) 10000)
           (* (string->number (list-ref parts 1)) 100)
           (string->number (list-ref parts 2)))
        #f)))
(define (_to_string v)
  (cond
    [(eq? v #t) "true"]
    [(eq? v #f) "false"]
    [(void? v) "<nil>"]
    [(list? v) (string-join (map _to_string v) " ")]
    [else (format "~a" v)]))
(define (_lt a b)
  (cond
    [(and (number? a) (number? b)) (< a b)]
    [(and (string? a) (string? b))
     (let ([da (_date_number a)]
           [db (_date_number b)])
       (if (and da db)
           (< da db)
           (string<? a b)))]
    [(and (list? a) (list? b))
     (cond [(null? a) (not (null? b))]
           [(null? b) #f]
           [else (let ([ka (car a)] [kb (car b)])
                   (if (equal? ka kb)
                       (_lt (cdr a) (cdr b))
                       (_lt ka kb)))])]
    [else (string<? (_to_string a) (_to_string b))]))
(define (_gt a b) (_lt b a))
(define numbers '(1 2 3 4 5 6 7 8 9))
(let/ec break
  (for ([n (if (hash? numbers) (hash-keys numbers) numbers)])
    (let/ec continue
(if (equal? (remainder n 2) 0)
  (begin
(continue)
  )
  (void)
)
(if (_gt n 7)
  (begin
(break)
  )
  (void)
)
(displayln (string-join (map _to_string (list "odd number:" n)) " "))
    )
  )
)
