#lang racket
(require racket/list)
(define xs (list 1 2 3))
(define ys (for*/list ([x xs] #:when (and (equal? (remainder x 2) 1))) x))
(displayln (cond [(string? ys) (regexp-match? (regexp 1) ys)] [(hash? ys) (hash-has-key? ys 1)] [else (member 1 ys)]))
(displayln (cond [(string? ys) (regexp-match? (regexp 2) ys)] [(hash? ys) (hash-has-key? ys 2)] [else (member 2 ys)]))
(define m (hash 'a 1))
(displayln (cond [(string? m) (regexp-match? (regexp "a") m)] [(hash? m) (hash-has-key? m "a")] [else (member "a" m)]))
(displayln (cond [(string? m) (regexp-match? (regexp "b") m)] [(hash? m) (hash-has-key? m "b")] [else (member "b" m)]))
(define s "hello")
(displayln (cond [(string? s) (regexp-match? (regexp "ell") s)] [(hash? s) (hash-has-key? s "ell")] [else (member "ell" s)]))
(displayln (cond [(string? s) (regexp-match? (regexp "foo") s)] [(hash? s) (hash-has-key? s "foo")] [else (member "foo" s)]))
