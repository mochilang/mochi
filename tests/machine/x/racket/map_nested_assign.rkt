#lang racket
(require racket/list)
(define data (hash "outer" (hash "inner" 1)))
(set! data (cond [(hash? data) (hash-set data "outer" (cond [(hash? (cond [(hash? data) (hash-ref data "outer")] [else (list-ref data "outer")])) (hash-set (cond [(hash? data) (hash-ref data "outer")] [else (list-ref data "outer")]) "inner" 2)] [else (list-set (cond [(hash? data) (hash-ref data "outer")] [else (list-ref data "outer")]) "inner" 2)]))] [else (list-set data "outer" (cond [(hash? (cond [(hash? data) (hash-ref data "outer")] [else (list-ref data "outer")])) (hash-set (cond [(hash? data) (hash-ref data "outer")] [else (list-ref data "outer")]) "inner" 2)] [else (list-set (cond [(hash? data) (hash-ref data "outer")] [else (list-ref data "outer")]) "inner" 2)]))]))
(displayln (cond [(string? (cond [(string? data) (string-ref data "outer")] [(hash? data) (hash-ref data "outer")] [else (list-ref data "outer")])) (string-ref (cond [(string? data) (string-ref data "outer")] [(hash? data) (hash-ref data "outer")] [else (list-ref data "outer")]) "inner")] [(hash? (cond [(string? data) (string-ref data "outer")] [(hash? data) (hash-ref data "outer")] [else (list-ref data "outer")])) (hash-ref (cond [(string? data) (string-ref data "outer")] [(hash? data) (hash-ref data "outer")] [else (list-ref data "outer")]) "inner")] [else (list-ref (cond [(string? data) (string-ref data "outer")] [(hash? data) (hash-ref data "outer")] [else (list-ref data "outer")]) "inner")]))
