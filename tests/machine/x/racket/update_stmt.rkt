#lang racket
(require racket/list)
(struct Person (name age status) #:transparent #:mutable)
(define people (list (Person "Alice" 17 "minor") (Person "Bob" 25 "unknown") (Person "Charlie" 18 "unknown") (Person "Diana" 16 "minor")))
(for ([_idx0 (in-range (length people))])
  (let ([_item1 (list-ref people _idx0)])
    (define name (Person-name _item1))
    (define age (Person-age _item1))
    (define status (Person-status _item1))
    (when (cond [(string? age) (string>=? age 18)] [(string? 18) (string>=? age 18)] [else (>= age 18)])
    (set-Person-status! _item1 "adult")
    (set-Person-age! _item1 (+ age 1))
    )
    (set! people (list-set people _idx0 _item1))
  )
)
(when (equal? people (list (Person "Alice" 17 "minor") (Person "Bob" 26 "adult") (Person "Charlie" 19 "adult") (Person "Diana" 16 "minor"))) (displayln "ok"))
(displayln "ok")
