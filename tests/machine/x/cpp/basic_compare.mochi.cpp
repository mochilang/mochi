// Generated by the Mochi experimental C++ compiler
#include <bits/stdc++.h>
using namespace std;

template<typename T> vector<T> mochi_append(vector<T> v, T x) { v.push_back(x); return v; }
template<typename T> T mochi_sum(const vector<T>& v) { T s{}; for(const auto& x: v) s += x; return s; }
template<typename T> double mochi_avg(const vector<T>& v) { if(v.empty()) return 0; return static_cast<double>(mochi_sum(v)) / v.size(); }
template<typename T> void mochi_print(const T& v) { cout << v << endl; }
template<typename T> void mochi_print(const vector<T>& v) { for(size_t i=0;i<v.size();++i){ if(i) cout << ' '; cout << v[i]; } cout << endl; }

int main() {
	auto a = (10 - 3);
	auto b = (2 + 2);
	mochi_print(a);
	mochi_print((a == 7));
	mochi_print((b < 5));
	return 0;
}
