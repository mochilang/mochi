// Generated by Mochi compiler v0.10.24 on 2025-07-13T03:02:24Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Region {
  decltype(0) r_regionkey;
  decltype(std::string("ASIA")) r_name;
};
inline bool operator==(const Region &a, const Region &b) {
  return a.r_regionkey == b.r_regionkey && a.r_name == b.r_name;
}
inline bool operator!=(const Region &a, const Region &b) { return !(a == b); }
struct Nation {
  decltype(10) n_nationkey;
  decltype(0) n_regionkey;
  decltype(std::string("JAPAN")) n_name;
};
inline bool operator==(const Nation &a, const Nation &b) {
  return a.n_nationkey == b.n_nationkey && a.n_regionkey == b.n_regionkey &&
         a.n_name == b.n_name;
}
inline bool operator!=(const Nation &a, const Nation &b) { return !(a == b); }
struct Customer {
  decltype(1) c_custkey;
  decltype(10) c_nationkey;
};
inline bool operator==(const Customer &a, const Customer &b) {
  return a.c_custkey == b.c_custkey && a.c_nationkey == b.c_nationkey;
}
inline bool operator!=(const Customer &a, const Customer &b) {
  return !(a == b);
}
struct Supplier {
  decltype(100) s_suppkey;
  decltype(10) s_nationkey;
};
inline bool operator==(const Supplier &a, const Supplier &b) {
  return a.s_suppkey == b.s_suppkey && a.s_nationkey == b.s_nationkey;
}
inline bool operator!=(const Supplier &a, const Supplier &b) {
  return !(a == b);
}
struct Order {
  decltype(1000) o_orderkey;
  decltype(1) o_custkey;
  decltype(std::string("1994-03-15")) o_orderdate;
};
inline bool operator==(const Order &a, const Order &b) {
  return a.o_orderkey == b.o_orderkey && a.o_custkey == b.o_custkey &&
         a.o_orderdate == b.o_orderdate;
}
inline bool operator!=(const Order &a, const Order &b) { return !(a == b); }
struct Lineitem {
  decltype(1000) l_orderkey;
  decltype(100) l_suppkey;
  decltype(1000) l_extendedprice;
  decltype(0.05) l_discount;
};
inline bool operator==(const Lineitem &a, const Lineitem &b) {
  return a.l_orderkey == b.l_orderkey && a.l_suppkey == b.l_suppkey &&
         a.l_extendedprice == b.l_extendedprice && a.l_discount == b.l_discount;
}
inline bool operator!=(const Lineitem &a, const Lineitem &b) {
  return !(a == b);
}
struct LocalCustomerSupplierOrder {
  decltype(n.n_name) nation;
  decltype((l.l_extendedprice * ((1 - l.l_discount)))) revenue;
};
inline bool operator==(const LocalCustomerSupplierOrder &a,
                       const LocalCustomerSupplierOrder &b) {
  return a.nation == b.nation && a.revenue == b.revenue;
}
inline bool operator!=(const LocalCustomerSupplierOrder &a,
                       const LocalCustomerSupplierOrder &b) {
  return !(a == b);
}
struct __struct8 {
  decltype(std::declval<LocalCustomerSupplierOrder>().nation) key;
  std::vector<LocalCustomerSupplierOrder> items;
};
inline bool operator==(const __struct8 &a, const __struct8 &b) {
  return a.key == b.key && a.items == b.items;
}
inline bool operator!=(const __struct8 &a, const __struct8 &b) {
  return !(a == b);
}
struct Result {
  decltype(std::declval<__struct8>().key) n_name;
  double revenue;
};
inline bool operator==(const Result &a, const Result &b) {
  return a.n_name == b.n_name && a.revenue == b.revenue;
}
inline bool operator!=(const Result &a, const Result &b) { return !(a == b); }
inline void __json(const Customer &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_custkey\":";
  __json(v.c_custkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"c_nationkey\":";
  __json(v.c_nationkey);
  std::cout << "}";
}
inline void __json(const Lineitem &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_orderkey\":";
  __json(v.l_orderkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_suppkey\":";
  __json(v.l_suppkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_extendedprice\":";
  __json(v.l_extendedprice);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"l_discount\":";
  __json(v.l_discount);
  std::cout << "}";
}
inline void __json(const Result &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n_name\":";
  __json(v.n_name);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"revenue\":";
  __json(v.revenue);
  std::cout << "}";
}
inline void __json(const Nation &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n_nationkey\":";
  __json(v.n_nationkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n_regionkey\":";
  __json(v.n_regionkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"n_name\":";
  __json(v.n_name);
  std::cout << "}";
}
inline void __json(const LocalCustomerSupplierOrder &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"nation\":";
  __json(v.nation);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"revenue\":";
  __json(v.revenue);
  std::cout << "}";
}
inline void __json(const Order &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderkey\":";
  __json(v.o_orderkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_custkey\":";
  __json(v.o_custkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"o_orderdate\":";
  __json(v.o_orderdate);
  std::cout << "}";
}
inline void __json(const Region &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"r_regionkey\":";
  __json(v.r_regionkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"r_name\":";
  __json(v.r_name);
  std::cout << "}";
}
inline void __json(const Supplier &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_suppkey\":";
  __json(v.s_suppkey);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"s_nationkey\":";
  __json(v.s_nationkey);
  std::cout << "}";
}
int main() {
  std::vector<Region> region = {Region{0, std::string("ASIA")},
                                Region{1, std::string("EUROPE")}};
  std::vector<Nation> nation = {Nation{10, 0, std::string("JAPAN")},
                                Nation{20, 0, std::string("INDIA")},
                                Nation{30, 1, std::string("FRANCE")}};
  std::vector<Customer> customer = {Customer{1, 10}, Customer{2, 20}};
  std::vector<Supplier> supplier = {Supplier{100, 10}, Supplier{200, 20}};
  std::vector<Order> orders = {Order{1000, 1, std::string("1994-03-15")},
                               Order{2000, 2, std::string("1994-06-10")},
                               Order{3000, 2, std::string("1995-01-01")}};
  std::vector<Lineitem> lineitem = {Lineitem{1000, 100, 1000, 0.05},
                                    Lineitem{2000, 200, 800, 0.1},
                                    Lineitem{3000, 200, 900, 0.05}};
  auto asia_nations = ([&]() {
    std::vector<decltype(n)> __items;
    for (auto r : region) {
      for (auto n : nation) {
        if (!((n.n_regionkey == r.r_regionkey)))
          continue;
        if (!((r.r_name == std::string("ASIA"))))
          continue;
        __items.push_back(n);
      }
    }
    return __items;
  })();
  std::vector<LocalCustomerSupplierOrder> local_customer_supplier_orders =
      ([&]() {
        std::vector<LocalCustomerSupplierOrder> __items;
        for (auto c : customer) {
          for (auto n : asia_nations) {
            if (!((c.c_nationkey == n.n_nationkey)))
              continue;
            for (auto o : orders) {
              if (!((o.o_custkey == c.c_custkey)))
                continue;
              for (auto l : lineitem) {
                if (!((l.l_orderkey == o.o_orderkey)))
                  continue;
                for (auto s : supplier) {
                  if (!((s.s_suppkey == l.l_suppkey)))
                    continue;
                  if (!((((o.o_orderdate >= std::string("1994-01-01")) &&
                          (o.o_orderdate < std::string("1995-01-01"))) &&
                         (s.s_nationkey == c.c_nationkey))))
                    continue;
                  __items.push_back(LocalCustomerSupplierOrder{
                      n.n_name, (l.l_extendedprice * ((1 - l.l_discount)))});
                }
              }
            }
          }
        }
        return __items;
      })();
  std::vector<LocalCustomerSupplierOrder> result = ([&]() {
    std::vector<__struct8> __groups;
    for (auto r : local_customer_supplier_orders) {
      auto __key = r.nation;
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(LocalCustomerSupplierOrder{r});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(
            __struct8{__key, std::vector<LocalCustomerSupplierOrder>{
                                 LocalCustomerSupplierOrder{r}}});
      }
    }
    std::vector<std::pair<double, Result>> __items;
    for (auto &g : __groups) {
      __items.push_back(
          {(-([&](auto v) {
             return std::accumulate(v.begin(), v.end(), 0.0);
           })(([&]() {
             std::vector<
                 decltype(std::declval<LocalCustomerSupplierOrder>().revenue)>
                 __items;
             for (auto x : g.items) {
               __items.push_back(x.revenue);
             }
             return __items;
           })())),
           Result{
               g.key, ([&](auto v) {
                 return std::accumulate(v.begin(), v.end(), 0.0);
               })(([&]() {
                 std::vector<decltype(std::declval<LocalCustomerSupplierOrder>()
                                          .revenue)>
                     __items;
                 for (auto x : g.items) {
                   __items.push_back(x.revenue);
                 }
                 return __items;
               })())}});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<Result> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  (__json(result));
  // test Q5 returns revenue per nation in ASIA with local suppliers
  return 0;
}
