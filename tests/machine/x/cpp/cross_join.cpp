// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <iostream>
#include <string>
#include <vector>

struct Customer {
  int id;
  decltype(std::string("Alice")) name;
};
struct Order {
  int id;
  int customerId;
  int total;
};
struct Result {
  decltype(o.id) orderId;
  decltype(o.customerId) orderCustomerId;
  decltype(c.name) pairedCustomerName;
  decltype(o.total) orderTotal;
};
int main() {
  std::vector<Customer> customers = {Customer{1, std::string("Alice")},
                                     Customer{2, std::string("Bob")},
                                     Customer{3, std::string("Charlie")}};
  std::vector<Order> orders = {Order{100, 1, 250}, Order{101, 2, 125},
                               Order{102, 1, 300}};
  std::vector<Result> result = ([&]() {
    std::vector<Result> __items;
    for (auto o : orders) {
      for (auto c : customers) {
        __items.push_back(Result{o.id, o.customerId, c.name, o.total});
      }
    }
    return __items;
  })();
  std::cout << std::string("--- Cross Join: All order-customer pairs ---")
            << std::endl;
  for (auto entry : result) {
    {
      std::cout << std::string("Order");
      std::cout << ' ';
      std::cout << entry.orderId;
      std::cout << ' ';
      std::cout << std::string("(customerId:");
      std::cout << ' ';
      std::cout << entry.orderCustomerId;
      std::cout << ' ';
      std::cout << std::string(", total: $");
      std::cout << ' ';
      std::cout << entry.orderTotal;
      std::cout << ' ';
      std::cout << std::string(") paired with");
      std::cout << ' ';
      std::cout << entry.pairedCustomerName;
      std::cout << std::endl;
    }
  }
  return 0;
}
