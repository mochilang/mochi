// Generated by Mochi compiler v0.10.27 on 2006-01-02T15:04:05Z
#include <any>
#include <iostream>
#include <string>
#include <vector>

inline bool __any_eq(const std::any &a, const std::any &b) {
  if (a.type() != b.type())
    return false;
  if (a.type() == typeid(int))
    return std::any_cast<int>(a) == std::any_cast<int>(b);
  if (a.type() == typeid(double))
    return std::any_cast<double>(a) == std::any_cast<double>(b);
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) == std::any_cast<bool>(b);
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a) == std::any_cast<std::string>(b);
  return false;
}
inline void __print_any(const std::any &a) {
  if (a.type() == typeid(int))
    std::cout << std::any_cast<int>(a);
  else if (a.type() == typeid(double))
    std::cout << std::any_cast<double>(a);
  else if (a.type() == typeid(bool))
    std::cout << (std::any_cast<bool>(a) ? "true" : "false");
  else if (a.type() == typeid(std::string))
    std::cout << std::any_cast<std::string>(a);
}

struct Customer {
  int id;
  std::any name;
};
struct Order {
  int id;
  int customerId;
  int total;
};
struct Result {
  std::any order;
  std::any customer;
};
int main() {
  std::vector<Customer> customers = {
      Customer{1, std::string("Alice")}, Customer{2, std::string("Bob")},
      Customer{3, std::string("Charlie")}, Customer{4, std::string("Diana")}};
  std::vector<Order> orders = {Order{100, 1, 250}, Order{101, 2, 125},
                               Order{102, 1, 300}, Order{103, 5, 80}};
  std::vector<Result> result = ([&]() {
    std::vector<Result> __items;
    for (auto o : orders) {
      {
        bool __matched0 = false;
        for (auto c : customers) {
          if (!((o.customerId == c.id)))
            continue;
          __matched0 = true;
          __items.push_back(Result{o, c});
        }
        if (!__matched0) {
          auto c = std::decay_t<decltype(*(customers).begin())>{};
          __items.push_back(Result{o, c});
        }
      }
    }
    return __items;
  })();
  std::cout << std::string("--- Outer Join using syntax ---") << std::endl;
  for (auto row : result) {
    if (row.order) {
      if (row.customer) {
        {
          std::cout << std::string("Order");
          std::cout << ' ';
          std::cout << row.order.id;
          std::cout << ' ';
          std::cout << std::string("by");
          std::cout << ' ';
          std::cout << row.customer.name;
          std::cout << ' ';
          std::cout << std::string("- $");
          std::cout << ' ';
          std::cout << row.order.total;
          std::cout << std::endl;
        }
      } else {
        {
          std::cout << std::string("Order");
          std::cout << ' ';
          std::cout << row.order.id;
          std::cout << ' ';
          std::cout << std::string("by");
          std::cout << ' ';
          std::cout << std::string("Unknown");
          std::cout << ' ';
          std::cout << std::string("- $");
          std::cout << ' ';
          std::cout << row.order.total;
          std::cout << std::endl;
        }
      }
    } else {
      {
        std::cout << std::string("Customer");
        std::cout << ' ';
        std::cout << row.customer.name;
        std::cout << ' ';
        std::cout << std::string("has no orders");
        std::cout << std::endl;
      }
    }
  }
  return 0;
}
