// Generated by the Mochi experimental C++ compiler
#include <bits/stdc++.h>
using namespace std;

template<typename T, typename=void> struct has_size : false_type {};
template<typename T> struct has_size<T, void_t<decltype(declval<T>().size()), decltype(declval<T>()[0])>> : true_type {};

auto twoSum(auto nums, auto target) {
	auto n = ((int)nums.size());
	for(int i=0; i<n; ++i) {
		for(int j=(i + 1); j<n; ++j) {
			if(((nums[i] + nums[j]) == target)) {
				return vector<int>{i, j};
			}			
		}
	}
	return vector<int>{(-1), (-1)};
}

int main() {
	auto result = twoSum(vector<int>{2, 7, 11, 15}, 9);
	([&](const auto& __v){ if constexpr(has_size<decay_t<decltype(__v)>>::value){ for(size_t i=0;i<__v.size();++i){ if(i) cout<<' '; cout<<__v[i]; } cout<<endl; } else { cout<<__v<<endl; } })(result[0]);
	([&](const auto& __v){ if constexpr(has_size<decay_t<decltype(__v)>>::value){ for(size_t i=0;i<__v.size();++i){ if(i) cout<<' '; cout<<__v[i]; } cout<<endl; } else { cout<<__v<<endl; } })(result[1]);
	return 0;
}
