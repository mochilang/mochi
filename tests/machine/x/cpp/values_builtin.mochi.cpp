// Generated by the Mochi experimental C++ compiler
#include <bits/stdc++.h>
using namespace std;

template<typename T, typename=void> struct has_size : false_type {};
template<typename T> struct has_size<T, void_t<decltype(declval<T>().size()), decltype(declval<T>()[0])>> : true_type {};
template<typename T, typename=void> struct has_key_type : false_type {};
template<typename T> struct has_key_type<T, void_t<typename T::key_type>> : true_type {};

int main() {
	auto m = unordered_map<string, int>{{std::string("a"), 1}, {std::string("b"), 2}, {std::string("c"), 3}};
	([&](const auto& __v){ if constexpr(has_size<decay_t<decltype(__v)>>::value){ for(size_t i=0;i<__v.size();++i){ if(i) cout<<' '; cout<<__v[i]; } cout<<endl; } else { cout<<__v<<endl; } })(([&](const auto& __m){ vector<decltype(__m.begin()->second)> __v; for(const auto& __kv: __m) __v.push_back(__kv.second); return __v; })(m));
	return 0;
}
