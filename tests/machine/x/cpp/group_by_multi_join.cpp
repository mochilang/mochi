// Generated by Mochi compiler v0.10.24 on 2025-07-13T02:30:22Z
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Nation {
  decltype(1) id;
  decltype(std::string("A")) name;
};
inline bool operator==(const Nation &a, const Nation &b) {
  return a.id == b.id && a.name == b.name;
}
inline bool operator!=(const Nation &a, const Nation &b) { return !(a == b); }
struct Supplier {
  decltype(1) id;
  decltype(1) nation;
};
inline bool operator==(const Supplier &a, const Supplier &b) {
  return a.id == b.id && a.nation == b.nation;
}
inline bool operator!=(const Supplier &a, const Supplier &b) {
  return !(a == b);
}
struct Partsupp {
  decltype(100) part;
  decltype(1) supplier;
  decltype(10) cost;
  decltype(2) qty;
};
inline bool operator==(const Partsupp &a, const Partsupp &b) {
  return a.part == b.part && a.supplier == b.supplier && a.cost == b.cost &&
         a.qty == b.qty;
}
inline bool operator!=(const Partsupp &a, const Partsupp &b) {
  return !(a == b);
}
struct Filtered {
  decltype(ps.part) part;
  decltype((ps.cost * ps.qty)) value;
};
inline bool operator==(const Filtered &a, const Filtered &b) {
  return a.part == b.part && a.value == b.value;
}
inline bool operator!=(const Filtered &a, const Filtered &b) {
  return !(a == b);
}
struct __struct5 {
  decltype(std::declval<Filtered>().part) key;
  std::vector<Filtered> items;
};
inline bool operator==(const __struct5 &a, const __struct5 &b) {
  return a.key == b.key && a.items == b.items;
}
inline bool operator!=(const __struct5 &a, const __struct5 &b) {
  return !(a == b);
}
struct Grouped {
  decltype(std::declval<__struct5>().key) part;
  double total;
};
inline bool operator==(const Grouped &a, const Grouped &b) {
  return a.part == b.part && a.total == b.total;
}
inline bool operator!=(const Grouped &a, const Grouped &b) { return !(a == b); }
inline void __json(const Nation &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"name\":";
  __json(v.name);
  std::cout << "}";
}
inline void __json(const Supplier &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"id\":";
  __json(v.id);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"nation\":";
  __json(v.nation);
  std::cout << "}";
}
inline void __json(const Partsupp &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"part\":";
  __json(v.part);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"supplier\":";
  __json(v.supplier);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cost\":";
  __json(v.cost);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"qty\":";
  __json(v.qty);
  std::cout << "}";
}
inline void __json(const Grouped &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"part\":";
  __json(v.part);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"total\":";
  __json(v.total);
  std::cout << "}";
}
inline void __json(const Filtered &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"part\":";
  __json(v.part);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"value\":";
  __json(v.value);
  std::cout << "}";
}
int main() {
  std::vector<Nation> nations = {Nation{1, std::string("A")},
                                 Nation{2, std::string("B")}};
  std::vector<Supplier> suppliers = {Supplier{1, 1}, Supplier{2, 2}};
  std::vector<Partsupp> partsupp = {
      Partsupp{100, 1, 10, 2}, Partsupp{100, 2, 20, 1}, Partsupp{200, 1, 5, 3}};
  auto filtered = ([&]() {
    std::vector<Filtered> __items;
    for (auto ps : partsupp) {
      for (auto s : suppliers) {
        if (!((s.id == ps.supplier)))
          continue;
        for (auto n : nations) {
          if (!((n.id == s.nation)))
            continue;
          if (!((n.name == std::string("A"))))
            continue;
          __items.push_back(Filtered{ps.part, (ps.cost * ps.qty)});
        }
      }
    }
    return __items;
  })();
  auto grouped = ([&]() {
    std::vector<__struct5> __groups;
    for (auto x : filtered) {
      auto __key = x.part;
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(Filtered{x});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(
            __struct5{__key, std::vector<Filtered>{Filtered{x}}});
      }
    }
    std::vector<Grouped> __items;
    for (auto &g : __groups) {
      __items.push_back(Grouped{
          g.key, ([&](auto v) {
            return std::accumulate(v.begin(), v.end(), 0.0);
          })(([&]() {
            std::vector<decltype(std::declval<Filtered>().value)> __items;
            for (auto r : g.items) {
              __items.push_back(r.value);
            }
            return __items;
          })())});
    }
    return __items;
  })();
  for (size_t i = 0; i < grouped.size(); ++i) {
    if (i)
      std::cout << ' ';
    __json(grouped[i]);
  }
  return 0;
}
