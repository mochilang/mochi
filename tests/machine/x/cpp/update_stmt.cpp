// Generated by Mochi compiler v0.10.27 on 2006-01-02T15:04:05Z
#include <any>
#include <iostream>
#include <string>
#include <vector>

inline bool __any_eq(const std::any &a, const std::any &b) {
  if (a.type() != b.type())
    return false;
  if (a.type() == typeid(int))
    return std::any_cast<int>(a) == std::any_cast<int>(b);
  if (a.type() == typeid(double))
    return std::any_cast<double>(a) == std::any_cast<double>(b);
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) == std::any_cast<bool>(b);
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a) == std::any_cast<std::string>(b);
  return false;
}
inline void __print_any(const std::any &a) {
  if (a.type() == typeid(int))
    std::cout << std::any_cast<int>(a);
  else if (a.type() == typeid(double))
    std::cout << std::any_cast<double>(a);
  else if (a.type() == typeid(bool))
    std::cout << (std::any_cast<bool>(a) ? "true" : "false");
  else if (a.type() == typeid(std::string))
    std::cout << std::any_cast<std::string>(a);
}

struct Person {
  std::string name;
  int age;
  std::string status;
};
int main() {
  auto people = std::vector<Person>{
      Person{std::string("Alice"), 17, std::string("minor")},
      Person{std::string("Bob"), 25, std::string("unknown")},
      Person{std::string("Charlie"), 18, std::string("unknown")},
      Person{std::string("Diana"), 16, std::string("minor")}};
  for (auto &__tmp1 : people) {
    if ((__tmp1.age >= 18)) {
      __tmp1.status = std::string("adult");
      __tmp1.age = (__tmp1.age + 1);
    }
  }
  // test update adult status
  std::cout << std::string("ok") << std::endl;
  return 0;
}
