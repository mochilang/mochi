// Generated by the Mochi experimental C++ compiler
#include <bits/stdc++.h>
using namespace std;

template<typename T, typename=void> struct has_size : false_type {};
template<typename T> struct has_size<T, void_t<decltype(declval<T>().size()), decltype(declval<T>()[0])>> : true_type {};

int main() {
	auto prefix = std::string("fore");
	auto s1 = std::string("forest");
	([&](const auto& __v){ if constexpr(has_size<decay_t<decltype(__v)>>::value){ for(size_t i=0;i<__v.size();++i){ if(i) cout<<' '; cout<<__v[i]; } cout<<endl; } else { cout<<__v<<endl; } })((([&](const auto& __v){ using V=decay_t<decltype(__v)>; if constexpr(is_same_v<V,string>) return __v.substr(0, ((int)prefix.size())-0); else return vector<typename V::value_type>(__v.begin()+0, __v.begin()+((int)prefix.size())); })(s1) == prefix));
	auto s2 = std::string("desert");
	([&](const auto& __v){ if constexpr(has_size<decay_t<decltype(__v)>>::value){ for(size_t i=0;i<__v.size();++i){ if(i) cout<<' '; cout<<__v[i]; } cout<<endl; } else { cout<<__v<<endl; } })((([&](const auto& __v){ using V=decay_t<decltype(__v)>; if constexpr(is_same_v<V,string>) return __v.substr(0, ((int)prefix.size())-0); else return vector<typename V::value_type>(__v.begin()+0, __v.begin()+((int)prefix.size())); })(s2) == prefix));
	return 0;
}
