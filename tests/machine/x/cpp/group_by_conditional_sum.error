line 64: ../../../tests/machine/x/cpp/group_by_conditional_sum.cpp: In lambda function:
../../../tests/machine/x/cpp/group_by_conditional_sum.cpp:64:31: error: ‘g’ is not captured
   64 |                 for (auto x : g.items) {
      |                               ^
../../../tests/machine/x/cpp/group_by_conditional_sum.cpp:62:20: note: the lambda has no capture-default
   62 |               })(([]() {
      |                    ^
../../../tests/machine/x/cpp/group_by_conditional_sum.cpp:44:14: note: ‘__struct2& g’ declared here
   44 |   for (auto &g : __groups) {
      |              ^
../../../tests/machine/x/cpp/group_by_conditional_sum.cpp: In lambda function:
../../../tests/machine/x/cpp/group_by_conditional_sum.cpp:59:25: warning: narrowing conversion of ‘(<lambda closure object><lambda()>::<lambda(auto:1)>().<lambda()>::<lambda(auto:1)>(<lambda()>::<lambda()>()) / <lambda closure object><lambda()>::<lambda(auto:2)>().<lambda()>::<lambda(auto:2)>(<lambda()>::<lambda()>()))’ from ‘int’ to ‘bool’ [-Wnarrowing]
   49 |              (([&](auto v) { return std::accumulate(v.begin(), v.end(), 0); })(
      |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   50 |                   ([&]() {
      |                   ~~~~~~~~
   51 |                     std::vector<decltype((std::declval<__struct1>().flag
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   52 |                                               ? std::declval<__struct1>().val
      |                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   53 |                                               : 0))>
      |                                               ~~~~~~
   54 |                         __items;
      |                         ~~~~~~~~
   55 |                     for (auto x : g.items) {
      |                     ~~~~~~~~~~~~~~~~~~~~~~~~
   56 |                       __items.push_back((x.flag ? x.val : 0));
      |                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   57 |                     }
      |                     ~    
   58 |                     return __items;
      |                     ~~~~~~~~~~~~~~~
   59 |                   })()) /
      |                   ~~~~~~^
   60 |               ([&](auto v) {
      |               ~~~~~~~~~~~~~~
   61 |                 return std::accumulate(v.begin(), v.end(), 0);
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   62 |               })(([]() {
      |               ~~~~~~~~~~ 
   63 |                 std::vector<decltype(std::declval<__struct1>().val)> __items;
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   64 |                 for (auto x : g.items) {
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~
   65 |                   __items.push_back(x.val);
      |                   ~~~~~~~~~~~~~~~~~~~~~~~~~
   66 |                 }
      |                 ~        
   67 |                 return __items;
      |                 ~~~~~~~~~~~~~~~
   68 |               })()))}});
      |               ~~~~~~     

 63 |                 std::vector<decltype(std::declval<__struct1>().val)> __items;
 64 |                 for (auto x : g.items) {
 65 |                   __items.push_back(x.val);
