// Generated by Mochi compiler v0.10.27 on 2006-01-02T15:04:05Z
#include <any>
#include <iostream>
#include <string>
#include <vector>

inline bool __any_eq(const std::any &a, const std::any &b) {
  if (a.type() != b.type())
    return false;
  if (a.type() == typeid(int))
    return std::any_cast<int>(a) == std::any_cast<int>(b);
  if (a.type() == typeid(double))
    return std::any_cast<double>(a) == std::any_cast<double>(b);
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) == std::any_cast<bool>(b);
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a) == std::any_cast<std::string>(b);
  return false;
}
inline void __print_any(const std::any &a) {
  if (a.type() == typeid(int))
    std::cout << std::any_cast<int>(a);
  else if (a.type() == typeid(double))
    std::cout << std::any_cast<double>(a);
  else if (a.type() == typeid(bool))
    std::cout << (std::any_cast<bool>(a) ? "true" : "false");
  else if (a.type() == typeid(std::string))
    std::cout << std::any_cast<std::string>(a);
}

struct People {
  std::string name;
  int age;
  std::string city;
};
struct __struct2 {
  std::any key;
  std::vector<People> items;
};
template <typename T> double __avg(const std::vector<T> &v) {
  if (v.empty())
    return 0;
  double s = 0;
  for (const auto &x : v)
    s += x;
  return s / v.size();
}
struct Stat {
  std::any city;
  int count;
  double avg_age;
};
int main() {
  std::vector<People> people = {
      People{std::string("Alice"), 30, std::string("Paris")},
      People{std::string("Bob"), 15, std::string("Hanoi")},
      People{std::string("Charlie"), 65, std::string("Paris")},
      People{std::string("Diana"), 45, std::string("Hanoi")},
      People{std::string("Eve"), 70, std::string("Paris")},
      People{std::string("Frank"), 22, std::string("Hanoi")}};
  std::vector<Stat> stats = ([&]() {
    std::vector<__struct2> __groups;
    for (auto person : people) {
      auto __key = person.city;
      bool __found = false;
      for (auto &__g : __groups) {
        if (__any_eq(__g.key, __key)) {
          __g.items.push_back(person);
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct2{__key, std::vector<People>{person}});
      }
    }
    std::vector<Stat> __items;
    for (auto &g : __groups) {
      __items.push_back(Stat{g.key, ((int)g.items.size()), __avg(([&]() {
                               std::vector<int> __items;
                               for (auto p : g.items) {
                                 __items.push_back(p.age);
                               }
                               return __items;
                             })())});
    }
    return __items;
  })();
  std::cout << std::string("--- People grouped by city ---") << std::endl;
  for (auto s : stats) {
    {
      __print_any(s.city);
      std::cout << ' ';
      std::cout << std::string(": count =");
      std::cout << ' ';
      std::cout << s.count;
      std::cout << ' ';
      std::cout << std::string(", avg_age =");
      std::cout << ' ';
      std::cout << s.avg_age;
      std::cout << std::endl;
    }
  }
  return 0;
}
