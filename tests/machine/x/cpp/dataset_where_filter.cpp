// Generated by Mochi compiler v0.10.27 on 2006-01-02T15:04:05Z
#include <any>
#include <iostream>
#include <string>
#include <vector>

inline bool __any_eq(const std::any &a, const std::any &b) {
  if (a.type() != b.type())
    return false;
  if (a.type() == typeid(int))
    return std::any_cast<int>(a) == std::any_cast<int>(b);
  if (a.type() == typeid(double))
    return std::any_cast<double>(a) == std::any_cast<double>(b);
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) == std::any_cast<bool>(b);
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a) == std::any_cast<std::string>(b);
  return false;
}
inline void __print_any(const std::any &a) {
  if (a.type() == typeid(int))
    std::cout << std::any_cast<int>(a);
  else if (a.type() == typeid(double))
    std::cout << std::any_cast<double>(a);
  else if (a.type() == typeid(bool))
    std::cout << (std::any_cast<bool>(a) ? "true" : "false");
  else if (a.type() == typeid(std::string))
    std::cout << std::any_cast<std::string>(a);
}

struct People {
  std::any name;
  int age;
};
struct Adult {
  std::any name;
  std::any age;
  bool is_senior;
};
int main() {
  std::vector<People> people = {
      People{std::string("Alice"), 30}, People{std::string("Bob"), 15},
      People{std::string("Charlie"), 65}, People{std::string("Diana"), 45}};
  std::vector<Adult> adults = ([&]() {
    std::vector<Adult> __items;
    for (auto person : people) {
      if (!((person.age >= 18)))
        continue;
      __items.push_back(Adult{person.name, person.age, (person.age >= 60)});
    }
    return __items;
  })();
  std::cout << std::string("--- Adults ---") << std::endl;
  for (auto person : adults) {
    {
      __print_any(person.name);
      std::cout << ' ';
      std::cout << std::string("is");
      std::cout << ' ';
      __print_any(person.age);
      std::cout << ' ';
      std::cout << (person.is_senior ? std::string(" (senior)")
                                     : std::string(""));
      std::cout << std::endl;
    }
  }
  return 0;
}
