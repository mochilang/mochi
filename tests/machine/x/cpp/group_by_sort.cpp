// Generated by Mochi compiler v0.10.24 on 2025-07-13T02:30:22Z
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Item {
  decltype(std::string("a")) cat;
  decltype(3) val;
};
inline bool operator==(const Item &a, const Item &b) {
  return a.cat == b.cat && a.val == b.val;
}
inline bool operator!=(const Item &a, const Item &b) { return !(a == b); }
struct Grouped {
  decltype(i) i;
};
inline bool operator==(const Grouped &a, const Grouped &b) {
  return a.i == b.i;
}
inline bool operator!=(const Grouped &a, const Grouped &b) { return !(a == b); }
struct __struct3 {
  decltype(std::declval<Grouped>().cat) key;
  std::vector<Grouped> items;
};
inline bool operator==(const __struct3 &a, const __struct3 &b) {
  return a.key == b.key && a.items == b.items;
}
inline bool operator!=(const __struct3 &a, const __struct3 &b) {
  return !(a == b);
}
struct __struct4 {
  decltype(std::declval<__struct3>().key) cat;
  double total;
};
inline bool operator==(const __struct4 &a, const __struct4 &b) {
  return a.cat == b.cat && a.total == b.total;
}
inline bool operator!=(const __struct4 &a, const __struct4 &b) {
  return !(a == b);
}
inline void __json(const __struct4 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cat\":";
  __json(v.cat);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"total\":";
  __json(v.total);
  std::cout << "}";
}
inline void __json(const Item &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"cat\":";
  __json(v.cat);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"val\":";
  __json(v.val);
  std::cout << "}";
}
inline void __json(const Grouped &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"i\":";
  __json(v.i);
  std::cout << "}";
}
int main() {
  std::vector<Item> items = {
      Item{std::string("a"), 3}, Item{std::string("a"), 1},
      Item{std::string("b"), 5}, Item{std::string("b"), 2}};
  auto grouped = ([&]() {
    std::vector<__struct3> __groups;
    for (auto i : items) {
      auto __key = i.cat;
      bool __found = false;
      for (auto &__g : __groups) {
        if (__g.key == __key) {
          __g.items.push_back(Grouped{i});
          __found = true;
          break;
        }
      }
      if (!__found) {
        __groups.push_back(__struct3{__key, std::vector<Grouped>{Grouped{i}}});
      }
    }
    std::vector<std::pair<double, __struct4>> __items;
    for (auto &g : __groups) {
      __items.push_back(
          {(-([&](auto v) { return std::accumulate(v.begin(), v.end(), 0.0); })(
               ([&]() {
                 std::vector<decltype(std::declval<Grouped>().val)> __items;
                 for (auto x : g.items) {
                   __items.push_back(x.val);
                 }
                 return __items;
               })())),
           __struct4{
               g.key, ([&](auto v) {
                 return std::accumulate(v.begin(), v.end(), 0.0);
               })(([&]() {
                 std::vector<decltype(std::declval<Grouped>().val)> __items;
                 for (auto x : g.items) {
                   __items.push_back(x.val);
                 }
                 return __items;
               })())}});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<__struct4> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  for (size_t i = 0; i < grouped.size(); ++i) {
    if (i)
      std::cout << ' ';
    __json(grouped[i]);
  }
  return 0;
}
