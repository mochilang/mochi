// Generated by the Mochi experimental C++ compiler
#include <bits/stdc++.h>
using namespace std;

template<typename T, typename=void> struct has_size : false_type {};
template<typename T> struct has_size<T, void_t<decltype(declval<T>().size()), decltype(declval<T>()[0])>> : true_type {};
template<typename T, typename=void> struct has_key_type : false_type {};
template<typename T> struct has_key_type<T, void_t<typename T::key_type>> : true_type {};

int main() {
	auto x = 3;
	auto y = 4;
	auto m = unordered_map<string, int>{{std::string("a"), x}, {std::string("b"), y}};
	([&](){ cout << m[std::string("a")] << m[std::string("b")] << endl; })();
	return 0;
}
