line 21: ../../../tests/machine/x/cpp/group_by_multi_join.cpp:21:13: error: ‘ps’ was not declared in this scope
   21 |   decltype((ps.cost * ps.qty)) value;
      |             ^~
../../../tests/machine/x/cpp/group_by_multi_join.cpp:21:23: error: ‘ps’ was not declared in this scope
   21 |   decltype((ps.cost * ps.qty)) value;
      |                       ^~
../../../tests/machine/x/cpp/group_by_multi_join.cpp:21:13: error: ‘ps’ was not declared in this scope
   21 |   decltype((ps.cost * ps.qty)) value;
      |             ^~
../../../tests/machine/x/cpp/group_by_multi_join.cpp:21:23: error: ‘ps’ was not declared in this scope
   21 |   decltype((ps.cost * ps.qty)) value;
      |                       ^~
../../../tests/machine/x/cpp/group_by_multi_join.cpp:57:18: error: non-local lambda expression cannot have a capture-default
   57 | auto grouped = ([&]() {
      |                  ^
../../../tests/machine/x/cpp/group_by_multi_join.cpp: In lambda function:
../../../tests/machine/x/cpp/group_by_multi_join.cpp:80:25: error: ‘g’ is not captured
   80 |           for (auto r : g.items) {
      |                         ^
../../../tests/machine/x/cpp/group_by_multi_join.cpp:78:76: note: the lambda has no capture-default
   78 |         ([&](auto v) { return std::accumulate(v.begin(), v.end(), 0); })(([]() {
      |                                                                            ^
../../../tests/machine/x/cpp/group_by_multi_join.cpp:75:14: note: ‘__struct5& g’ declared here
   75 |   for (auto &g : __groups) {
      |              ^
../../../tests/machine/x/cpp/group_by_multi_join.cpp: In lambda function:
../../../tests/machine/x/cpp/group_by_multi_join.cpp:78:73: warning: narrowing conversion of ‘<lambda closure object><lambda()>::<lambda(auto:1)>().<lambda()>::<lambda(auto:1)>(<lambda()>::<lambda()>())’ from ‘int’ to ‘bool’ [-Wnarrowing]
   78 |         ([&](auto v) { return std::accumulate(v.begin(), v.end(), 0); })(([]() {
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~
   79 |           std::vector<decltype(std::declval<__struct4>().value)> __items;
      |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   80 |           for (auto r : g.items) {
      |           ~~~~~~~~~~~~~~~~~~~~~~~~                                       
   81 |             __items.push_back(r.value);
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~                                  
   82 |           }
      |           ~                                                              
   83 |           return __items;
      |           ~~~~~~~~~~~~~~~                                                
   84 |         })())});
      |         ~~~~~                                                            

 20 |   decltype(std::declval<__struct3>().part) part;
 21 |   decltype((ps.cost * ps.qty)) value;
 22 | };
