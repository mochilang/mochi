// Generated by Mochi compiler v0.10.27 on 2006-01-02T15:04:05Z
#include <any>
#include <iostream>
#include <string>
#include <vector>

inline bool __any_eq(const std::any &a, const std::any &b) {
  if (a.type() != b.type())
    return false;
  if (a.type() == typeid(int))
    return std::any_cast<int>(a) == std::any_cast<int>(b);
  if (a.type() == typeid(double))
    return std::any_cast<double>(a) == std::any_cast<double>(b);
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) == std::any_cast<bool>(b);
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a) == std::any_cast<std::string>(b);
  return false;
}
inline void __print_any(const std::any &a) {
  if (a.type() == typeid(int))
    std::cout << std::any_cast<int>(a);
  else if (a.type() == typeid(double))
    std::cout << std::any_cast<double>(a);
  else if (a.type() == typeid(bool))
    std::cout << (std::any_cast<bool>(a) ? "true" : "false");
  else if (a.type() == typeid(std::string))
    std::cout << std::any_cast<std::string>(a);
}

struct Customer {
  int id;
  std::any name;
};
struct Order {
  int id;
  int customerId;
};
struct Stat {
  std::any o;
  std::any c;
};
struct __struct4 {
  std::any key;
  std::vector<Stat> items;
};
struct __struct5 {
  std::any name;
  int count;
};
int main() {
  std::vector<Customer> customers = {Customer{1, std::string("Alice")},
                                     Customer{2, std::string("Bob")}};
  std::vector<Order> orders = {Order{100, 1}, Order{101, 1}, Order{102, 2}};
  std::vector<Stat> stats = ([&]() {
    std::vector<__struct4> __groups;
    for (auto o : orders) {
      for (auto c : customers) {
        if (!((o.customerId == c.id)))
          continue;
        auto __key = c.name;
        bool __found = false;
        for (auto &__g : __groups) {
          if (__g.key == __key) {
            __g.items.push_back(Stat{o, c});
            __found = true;
            break;
          }
        }
        if (!__found) {
          __groups.push_back(__struct4{__key, std::vector<Stat>{Stat{o, c}}});
        }
      }
    }
    std::vector<__struct5> __items;
    for (auto &g : __groups) {
      __items.push_back(__struct5{g.key, ((int)g.items.size())});
    }
    return __items;
  })();
  std::cout << std::string("--- Orders per customer ---") << std::endl;
  for (auto s : stats) {
    {
      std::cout << s.name;
      std::cout << ' ';
      std::cout << std::string("orders:");
      std::cout << ' ';
      std::cout << s.count;
      std::cout << std::endl;
    }
  }
  return 0;
}
