// Generated by Mochi compiler v0.10.24 on 2025-07-13T02:30:22Z
#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

template <typename T> void __json(const T &);
inline void __json(int v) { std::cout << v; }
inline void __json(double v) { std::cout << v; }
inline void __json(bool v) { std::cout << (v ? "true" : "false"); }
inline void __json(const std::string &v) { std::cout << "\"" << v << "\""; }
inline void __json(const char *v) { std::cout << "\"" << v << "\""; }
template <typename T> void __json(const std::vector<T> &v) {
  std::cout << "[";
  bool first = true;
  for (const auto &x : v) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(x);
  }
  std::cout << "]";
}
template <typename K, typename V> void __json(const std::map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}
template <typename K, typename V>
void __json(const std::unordered_map<K, V> &m) {
  std::cout << "{";
  bool first = true;
  for (const auto &kv : m) {
    if (!first)
      std::cout << ",";
    first = false;
    __json(kv.first);
    std::cout << ":";
    __json(kv.second);
  }
  std::cout << "}";
}

struct Data {
  decltype(std::string("a")) tag;
  decltype(1) val;
};
inline bool operator==(const Data &a, const Data &b) {
  return a.tag == b.tag && a.val == b.val;
}
inline bool operator!=(const Data &a, const Data &b) { return !(a == b); }
struct __struct2 {
  decltype(d.tag) key;
  std::vector<auto> items;
};
inline bool operator==(const __struct2 &a, const __struct2 &b) {
  return a.key == b.key && a.items == b.items;
}
inline bool operator!=(const __struct2 &a, const __struct2 &b) {
  return !(a == b);
}
struct __struct3 {
  decltype(std::declval<__struct2>().key) tag;
  int total;
};
inline bool operator==(const __struct3 &a, const __struct3 &b) {
  return a.tag == b.tag && a.total == b.total;
}
inline bool operator!=(const __struct3 &a, const __struct3 &b) {
  return !(a == b);
}
inline void __json(const __struct3 &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"tag\":";
  __json(v.tag);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"total\":";
  __json(v.total);
  std::cout << "}";
}
inline void __json(const Data &v) {
  bool first = true;
  std::cout << "{";
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"tag\":";
  __json(v.tag);
  if (!first)
    std::cout << ",";
  first = false;
  std::cout << "\"val\":";
  __json(v.val);
  std::cout << "}";
}
int main() {
  std::vector<Data> data = {Data{std::string("a"), 1},
                            Data{std::string("a"), 2},
                            Data{std::string("b"), 3}};
  auto groups = ([&]() {
    std::map<decltype(d.tag), std::vector<auto>> __groups;
    for (auto d : data) {
      __groups[d.tag].push_back(auto{d});
    }
    std::vector<__struct2> __items;
    for (auto &kv : __groups) {
      __items.push_back(__struct2{kv.first, kv.second});
    }
    return __items;
  })();
  std::vector<int> tmp = {};
  for (auto g : groups) {
    auto total = 0;
    for (auto x : g.items) {
      total = (total + x.val);
    }
    tmp.push_back(__struct3{g.key, total});
  }
  auto result = ([&]() {
    std::vector<std::pair<decltype(std::declval<__struct3>().tag), __struct3>>
        __items;
    for (auto r : tmp) {
      __items.push_back({r.tag, r});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    std::vector<__struct3> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  for (size_t i = 0; i < result.size(); ++i) {
    if (i)
      std::cout << ' ';
    __json(result[i]);
  }
  return 0;
}
