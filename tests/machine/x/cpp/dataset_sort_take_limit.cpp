// Generated by Mochi compiler v0.10.27 on 2006-01-02T15:04:05Z
#include <algorithm>
#include <any>
#include <iostream>
#include <string>
#include <utility>
#include <vector>

inline bool __any_eq(const std::any &a, const std::any &b) {
  if (a.type() != b.type())
    return false;
  if (a.type() == typeid(int))
    return std::any_cast<int>(a) == std::any_cast<int>(b);
  if (a.type() == typeid(double))
    return std::any_cast<double>(a) == std::any_cast<double>(b);
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) == std::any_cast<bool>(b);
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a) == std::any_cast<std::string>(b);
  return false;
}
inline void __print_any(const std::any &a) {
  if (a.type() == typeid(int))
    std::cout << std::any_cast<int>(a);
  else if (a.type() == typeid(double))
    std::cout << std::any_cast<double>(a);
  else if (a.type() == typeid(bool))
    std::cout << (std::any_cast<bool>(a) ? "true" : "false");
  else if (a.type() == typeid(std::string))
    std::cout << std::any_cast<std::string>(a);
}

struct Product {
  std::any name;
  int price;
};
int main() {
  std::vector<Product> products = {Product{std::string("Laptop"), 1500},
                                   Product{std::string("Smartphone"), 900},
                                   Product{std::string("Tablet"), 600},
                                   Product{std::string("Monitor"), 300},
                                   Product{std::string("Keyboard"), 100},
                                   Product{std::string("Mouse"), 50},
                                   Product{std::string("Headphones"), 200}};
  auto expensive = ([&]() {
    std::vector<std::pair<decltype((-p.price)), decltype(p)>> __items;
    for (auto p : products) {
      __items.push_back({(-p.price), p});
    }
    std::sort(__items.begin(), __items.end(),
              [](auto &a, auto &b) { return a.first < b.first; });
    if ((size_t)1 < __items.size())
      __items.erase(__items.begin(), __items.begin() + 1);
    if ((size_t)3 < __items.size())
      __items.resize(3);
    std::vector<decltype(p)> __res;
    for (auto &p : __items)
      __res.push_back(p.second);
    return __res;
  })();
  std::cout << std::string("--- Top products (excluding most expensive) ---")
            << std::endl;
  for (auto item : expensive) {
    {
      std::cout << item.name;
      std::cout << ' ';
      std::cout << std::string("costs $");
      std::cout << ' ';
      std::cout << item.price;
      std::cout << std::endl;
    }
  }
  return 0;
}
