// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
#include <any>
#include <iostream>
#include <string>
#include <vector>

inline bool __any_eq(const std::any &a, const std::any &b) {
  if (a.type() != b.type())
    return false;
  if (a.type() == typeid(int))
    return std::any_cast<int>(a) == std::any_cast<int>(b);
  if (a.type() == typeid(double))
    return std::any_cast<double>(a) == std::any_cast<double>(b);
  if (a.type() == typeid(bool))
    return std::any_cast<bool>(a) == std::any_cast<bool>(b);
  if (a.type() == typeid(std::string))
    return std::any_cast<std::string>(a) == std::any_cast<std::string>(b);
  return false;
}

struct Combo {
  decltype(n) n;
  decltype(l) l;
  decltype(b) b;
};
int main() {
  std::vector<int> nums = {1, 2};
  auto letters = std::vector<std::any>{std::string("A"), std::string("B")};
  std::vector<bool> bools = {true, false};
  std::vector<Combo> combos = ([&]() {
    std::vector<Combo> __items;
    for (auto n : nums) {
      for (auto l : letters) {
        for (auto b : bools) {
          __items.push_back(Combo{n, l, b});
        }
      }
    }
    return __items;
  })();
  std::cout << std::string("--- Cross Join of three lists ---") << std::endl;
  for (auto c : combos) {
    {
      std::cout << c.n;
      std::cout << ' ';
      std::cout << c.l;
      std::cout << ' ';
      std::cout << c.b;
      std::cout << std::endl;
    }
  }
  return 0;
}
