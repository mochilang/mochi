// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
import Foundation

class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
struct People: Equatable {
    var age: Int
    var city: String
    var name: String
}

var people = [People(age: 30, city: "Paris", name: "Alice"), People(age: 15, city: "Hanoi", name: "Bob"), People(age: 65, city: "Paris", name: "Charlie"), People(age: 45, city: "Hanoi", name: "Diana"), People(age: 70, city: "Paris", name: "Eve"), People(age: 22, city: "Hanoi", name: "Frank")]
var stats = { () -> [Any] in
    var _groups: [String:[People]] = [:]
    for person in people {
        let _k = person.city
        _groups[_k, default: []].append(person)
    }
    var _tmp: [(key: String, items: [People])] = []
    for (k, v) in _groups {
        _tmp.append((key: k, items: v))
    }
    return _tmp.map { g in ["city": g.key, "count": g.items.count, "avg_age": _avg(g.items.map { p in p.age })] }
}()
print("--- People grouped by city ---")
for s in stats as! [[String:Any]] {
    print(s["city"]!, ": count =", s["count"]!, ", avg_age =", s["avg_age"]!)
}
