// Generated by Mochi compiler v0.10.26 on 2025-07-16T15:38:17Z
import Foundation

func _save(_ rows: [[String:Any]], path: String, opts: [String:Any]?) {
    let format = (opts?["format"] as? String) ?? "csv"
    if format == "jsonl" {
        var handle: FileHandle
        if path.isEmpty || path == "-" {
            handle = FileHandle.standardOutput
        } else {
            FileManager.default.createFile(atPath: path, contents: nil)
            handle = FileHandle(forWritingAtPath: path)!
        }
        for row in rows {
            if let data = try? JSONSerialization.data(withJSONObject: row),
               let strData = String(data: data, encoding: .utf8)?.data(using: .utf8) {
                handle.write(strData)
                handle.write(Data([0x0a]))
            }
        }
        if handle !== FileHandle.standardOutput {
            handle.closeFile()
        }
    }
}
func _toMapSlice(_ v: Any) -> [[String:Any]]? {
    if let arr = v as? [[String:Any]] { return arr }
    if let arr = v as? [Any] {
        var out: [[String:Any]] = []
        for item in arr {
            if let m = item as? [String:Any] {
                out.append(m)
            } else if let sm = _structMap(item) {
                out.append(sm)
            } else {
                return nil
            }
        }
        return out
    }
    return nil
}
struct People: Equatable {
    var age: Int
    var name: String
}

var people = [People(age: 30, name: "Alice"), People(age: 25, name: "Bob")]
_save(_toMapSlice(people) ?? [], path: "-", opts: ["format": "jsonl"])
