// Generated by Mochi compiler v0.10.28 on 2006-01-02T15:04:05Z
struct Customer: Equatable {
    var id: Int
    var name: String
}

struct OJoin {
    var customer: Customer?
    var order: Order?
}

struct Order: Equatable {
    var customerId: Int
    var id: Int
    var total: Int
}

struct Result {
    var customer: Customer?
    var order: Order
}

var customers: [Customer] = [Customer(id: 1, name: "Alice"), Customer(id: 2, name: "Bob"), Customer(id: 3, name: "Charlie"), Customer(id: 4, name: "Diana")]
var orders: [Order] = [Order(customerId: 1, id: 100, total: 250), Order(customerId: 2, id: 101, total: 125), Order(customerId: 1, id: 102, total: 300), Order(customerId: 5, id: 103, total: 80)]
var result: [Result] = ({
	var _res: [OJoin] = []
	let _src = orders
	let _join = customers
	var _matched = Array(repeating: false, count: _join.count)
	for o in _src {
		var _m = false
		for (ri, c) in _join.enumerated() {
			if !(o.customerId == c.id) { continue }
			_matched[ri] = true
			_m = true
			_res.append(OJoin(customer: c, order: o))
		}
		if !_m {
			let c: Customer? = nil
			_res.append(OJoin(customer: c, order: o))
		}
	}
	for (ri, c) in _join.enumerated() {
		if !_matched[ri] {
			let o: Order? = nil
			let c = c
			_res.append(OJoin(customer: c, order: o))
		}
	}
	return _res
}())
print("--- Outer Join using syntax ---")
for row in result {
    if row.order {
        if row.customer != nil {
            print("Order", row.order.id, "by", row.customer.name, "- $", row.order.total)
        }
        else {
            print("Order", row.order.id, "by", "Unknown", "- $", row.order.total)
        }
    }
    else {
        print("Customer", row.customer.name, "has no orders")
    }
}
