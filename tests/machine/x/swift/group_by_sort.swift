// Generated by Mochi compiler v0.10.27 on 2006-01-02T15:04:05Z
import Foundation

class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Item: Equatable {
    var cat: String
    var val: Int
}

var items = [Item(cat: "a", val: 3), Item(cat: "a", val: 1), Item(cat: "b", val: 5), Item(cat: "b", val: 2)]
var grouped = { () -> [Any] in
    var _groups: [String:[Item]] = [:]
    for i in items {
        let _k = i.cat
        _groups[_k, default: []].append(i)
    }
    var _tmp: [(key: String, items: [Item])] = []
    for (k, v) in _groups {
        _tmp.append((key: k, items: v))
    }
    _tmp.sort { String(describing: _sum($0.items.map { x in x.val })) > String(describing: _sum($1.items.map { x in x.val })) }
    return _tmp.map { g in ["cat": g.key, "total": _sum(g.items.map { x in x.val })] }
}()
print(grouped)
