// Generated by Mochi compiler v0.10.27 on 2006-01-02T15:04:05Z
struct CJoin {
    var customerName: String?
    var order: Order?
}

struct Customer: Equatable {
    var id: Int
    var name: String
}

struct Order: Equatable {
    var customerId: Int
    var id: Int
    var total: Int
}

struct Result: Equatable {
    var customerName: String
    var order: Order
}

var customers = [Customer(id: 1, name: "Alice"), Customer(id: 2, name: "Bob"), Customer(id: 3, name: "Charlie"), Customer(id: 4, name: "Diana")]
var orders = [Order(customerId: 1, id: 100, total: 250), Order(customerId: 2, id: 101, total: 125), Order(customerId: 1, id: 102, total: 300)]
var result = ({
	var _res: [CJoin] = []
	let _src = customers
	let _join = orders
	for o in _join {
		var _m = false
		for c in _src {
			if !(o.customerId == c.id) { continue }
			_m = true
			_res.append(CJoin(customerName: c.name, order: o))
		}
		if !_m {
			let c: Customer? = nil
			_res.append(CJoin(customerName: nil.name, order: o))
		}
	}
	return _res
}())
print("--- Right Join using syntax ---")
for entry in result {
    if entry.order {
        print("Customer", entry.customerName, "has order", (entry.order["id"] as! Int), "- $", (entry.order["total"] as! Int))
    }
    else {
        print("Customer", entry.customerName, "has no orders")
    }
}
