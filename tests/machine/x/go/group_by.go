//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T15:33:55Z

package main

import (
	"fmt"
	"mochi/runtime/data"

	"golang.org/x/exp/constraints"
)

type People struct {
	Name string `json:"name"`
	Age  int    `json:"age"`
	City string `json:"city"`
}

type Stat struct {
	City    any     `json:"city"`
	Count   int     `json:"count"`
	Avg_age float64 `json:"avg_age"`
}

type v map[string]any

func main() {
	people := []People{
		People{
			Name: "Alice",
			Age:  30,
			City: "Paris",
		},
		People{
			Name: "Bob",
			Age:  15,
			City: "Hanoi",
		},
		People{
			Name: "Charlie",
			Age:  65,
			City: "Paris",
		},
		People{
			Name: "Diana",
			Age:  45,
			City: "Hanoi",
		},
		People{
			Name: "Eve",
			Age:  70,
			City: "Paris",
		},
		People{
			Name: "Frank",
			Age:  22,
			City: "Hanoi",
		},
	}
	stats := func() []Stat {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, person := range people {
			key := person.City
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, person)
		}
		results := []Stat{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, Stat{
				City:  g.Key.(any),
				Count: len(g.Items),
				Avg_age: _avgOrdered[int](func() []int {
					results := []int{}
					for _, pRaw := range g.Items {
						p := pRaw.(People)
						results = append(results, p.Age)
					}
					return results
				}()),
			})
		}
		return results
	}()
	fmt.Println("--- People grouped by city ---")
	for _, s := range stats {
		fmt.Println(s.City, ": count =", s.Count, ", avg_age =", s.Avg_age)
	}
}

func _avgOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	if len(s) == 0 {
		return 0
	}
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum / float64(len(s))
}
