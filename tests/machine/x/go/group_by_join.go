//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-14T02:39:19Z

package main

import (
	"fmt"
	"mochi/runtime/data"
)

func main() {
	customers := []Customer{Customer{
		Id:   1,
		Name: "Alice",
	}, Customer{
		Id:   2,
		Name: "Bob",
	}}
	orders := []Order{Order{
		Id:         100,
		CustomerId: 1,
	}, Order{
		Id:         101,
		CustomerId: 1,
	}, Order{
		Id:         102,
		CustomerId: 2,
	}}
	stats := func() []Stat {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, o := range orders {
			for _, c := range customers {
				if !(o.CustomerId == c.Id) {
					continue
				}
				key := c.Name
				ks := fmt.Sprint(key)
				g, ok := groups[ks]
				if !ok {
					g = &data.Group{Key: key}
					groups[ks] = g
					order = append(order, ks)
				}
				_item := map[string]any{}
				_item["id"] = o.Id
				_item["customerId"] = o.CustomerId
				_item["o"] = o
				_item["id"] = c.Id
				_item["name"] = c.Name
				_item["c"] = c
				g.Items = append(g.Items, _item)
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Stat{}
		for _, g := range items {
			results = append(results, Stat{
				Name:  g.Key,
				Count: len(g.Items),
			})
		}
		return results
	}()
	fmt.Println("--- Orders per customer ---")
	for _, s := range stats {
		fmt.Println(s.Name, "orders:", s.Count)
	}
}
