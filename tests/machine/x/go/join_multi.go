//go:build ignore

// Generated by Mochi compiler v0.10.27 on 1970-01-01T00:00:00Z

package main

import (
	"fmt"
	"strings"
)

type Customer struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type Item struct {
	OrderID int    `json:"orderId"`
	Sku     string `json:"sku"`
}

type Order struct {
	ID         int `json:"id"`
	CustomerID int `json:"customerId"`
}

type Result struct {
	Name string `json:"name"`
	Sku  string `json:"sku"`
}

type v = Result

func main() {
	customers := []Customer{Customer{
		ID:   1,
		Name: "Alice",
	}, Customer{
		ID:   2,
		Name: "Bob",
	}}
	orders := []Order{Order{
		ID:         100,
		CustomerID: 1,
	}, Order{
		ID:         101,
		CustomerID: 2,
	}}
	items := []Item{Item{
		OrderID: 100,
		Sku:     "a",
	}, Item{
		OrderID: 101,
		Sku:     "b",
	}}
	result := func() []Result {
		results := []Result{}
		for _, o := range orders {
			for _, c := range customers {
				if !(o.CustomerID == c.ID) {
					continue
				}
				for _, i := range items {
					if !(o.ID == i.OrderID) {
						continue
					}
					results = append(results, Result{
						Name: c.Name,
						Sku:  i.Sku,
					})
				}
			}
		}
		return results
	}()
	fmt.Println(strings.TrimSpace(fmt.Sprintln("--- Multi Join ---")))
	for _, r := range result {
		fmt.Println(strings.TrimSpace(fmt.Sprintln(r.Name, "bought item", r.Sku)))
	}
}
