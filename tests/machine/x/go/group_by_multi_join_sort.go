//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-14T02:39:20Z

package main

import (
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"strings"
)

func main() {
	nation := []Nation{Nation{
		N_nationkey: 1,
		N_name:      "BRAZIL",
	}}
	customer := []Customer{Customer{
		C_custkey:   1,
		C_name:      "Alice",
		C_acctbal:   100.0,
		C_nationkey: 1,
		C_address:   "123 St",
		C_phone:     "123-456",
		C_comment:   "Loyal",
	}}
	orders := []Order{Order{
		O_orderkey:  1000,
		O_custkey:   1,
		O_orderdate: "1993-10-15",
	}, Order{
		O_orderkey:  2000,
		O_custkey:   1,
		O_orderdate: "1994-01-02",
	}}
	lineitem := []Lineitem{Lineitem{
		L_orderkey:      1000,
		L_returnflag:    "R",
		L_extendedprice: 1000.0,
		L_discount:      0.1,
	}, Lineitem{
		L_orderkey:      2000,
		L_returnflag:    "N",
		L_extendedprice: 500.0,
		L_discount:      0.0,
	}}
	start_date := "1993-10-01"
	end_date := "1994-01-01"
	result := func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, c := range customer {
			for _, o := range orders {
				if !(o.O_custkey == c.C_custkey) {
					continue
				}
				for _, l := range lineitem {
					if !(l.L_orderkey == o.O_orderkey) {
						continue
					}
					for _, n := range nation {
						if !(n.N_nationkey == c.C_nationkey) {
							continue
						}
						if ((o.O_orderdate >= start_date) && (o.O_orderdate < end_date)) && (l.L_returnflag == "R") {
							key := v{
								C_custkey: c.C_custkey,
								C_name:    c.C_name,
								C_acctbal: c.C_acctbal,
								C_address: c.C_address,
								C_phone:   c.C_phone,
								C_comment: c.C_comment,
								N_name:    n.N_name,
							}
							ks := fmt.Sprint(key)
							g, ok := groups[ks]
							if !ok {
								g = &data.Group{Key: key}
								groups[ks] = g
								order = append(order, ks)
							}
							_item := map[string]any{}
							_item["c_custkey"] = c.C_custkey
							_item["c_name"] = c.C_name
							_item["c_acctbal"] = c.C_acctbal
							_item["c_nationkey"] = c.C_nationkey
							_item["c_address"] = c.C_address
							_item["c_phone"] = c.C_phone
							_item["c_comment"] = c.C_comment
							_item["c"] = c
							_item["o_orderkey"] = o.O_orderkey
							_item["o_custkey"] = o.O_custkey
							_item["o_orderdate"] = o.O_orderdate
							_item["o"] = o
							_item["l_orderkey"] = l.L_orderkey
							_item["l_returnflag"] = l.L_returnflag
							_item["l_extendedprice"] = l.L_extendedprice
							_item["l_discount"] = l.L_discount
							_item["l"] = l
							_item["n_nationkey"] = n.N_nationkey
							_item["n_name"] = n.N_name
							_item["n"] = n
							g.Items = append(g.Items, _item)
						}
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		type pair struct {
			item *data.Group
			key  any
		}
		pairs := make([]pair, len(items))
		for idx, it := range items {
			g := it
			pairs[idx] = pair{item: it, key: -_sum(func() []any {
				results := []any{}
				for _, x := range g.Items {
					results = append(results, ((_getField(_getField(x, "l"), "l_extendedprice")).(float64) * (float64(1) - (_getField(_getField(x, "l"), "l_discount")).(float64)).(float64)))
				}
				return results
			}())}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for idx, p := range pairs {
			items[idx] = p.item
		}
		results := []Result{}
		for _, g := range items {
			results = append(results, Result{
				C_custkey: _getField(g.Key, "c_custkey"),
				C_name:    _getField(g.Key, "c_name"),
				Revenue: _sum(func() []any {
					results := []any{}
					for _, x := range g.Items {
						results = append(results, ((_getField(_getField(x, "l"), "l_extendedprice")).(float64) * (float64(1) - (_getField(_getField(x, "l"), "l_discount")).(float64)).(float64)))
					}
					return results
				}()),
				C_acctbal: _getField(g.Key, "c_acctbal"),
				N_name:    _getField(g.Key, "n_name"),
				C_address: _getField(g.Key, "c_address"),
				C_phone:   _getField(g.Key, "c_phone"),
				C_comment: _getField(g.Key, "c_comment"),
			})
		}
		return results
	}()
	_print(result)
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}

func _print(args ...any) {
	first := true
	for _, a := range args {
		if !first {
			fmt.Print(" ")
		}
		first = false
		if a == nil {
			fmt.Print("<nil>")
			continue
		}
		rv := reflect.ValueOf(a)
		if (rv.Kind() == reflect.Map || rv.Kind() == reflect.Slice) && rv.IsNil() {
			fmt.Print("<nil>")
			continue
		}
		if rv.Kind() == reflect.Slice && rv.Type().Elem().Kind() != reflect.Uint8 {
			for i := 0; i < rv.Len(); i++ {
				if i > 0 {
					fmt.Print(" ")
				}
				fmt.Print(_sprint(rv.Index(i).Interface()))
			}
			continue
		}
		fmt.Print(_sprint(a))
	}
	fmt.Println()
}

func _sprint(v any) string {
	if v == nil {
		return "<nil>"
	}
	rv := reflect.ValueOf(v)
	if (rv.Kind() == reflect.Map || rv.Kind() == reflect.Slice) && rv.IsNil() {
		return "<nil>"
	}
	return fmt.Sprint(v)
}

func _sum(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		case []float64:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		case []string, []bool:
			panic("sum() expects numbers")
		default:
			panic("sum() expects list or group")
		}
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("sum() expects numbers")
		}
	}
	return sum
}
