//go:build ignore

// Generated by Mochi compiler v0.10.28 on 1970-01-01T00:00:00Z

package main

import (
	"fmt"
	"strings"
)

type v = Result

type Customer struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type Order struct {
	ID         int `json:"id"`
	CustomerID int `json:"customerId"`
	Total      int `json:"total"`
}

type Result struct {
	Order    *Order    `json:"order"`
	Customer *Customer `json:"customer"`
}

func main() {
	customers := []Customer{
		Customer{
			ID:   1,
			Name: "Alice",
		},
		Customer{
			ID:   2,
			Name: "Bob",
		},
		Customer{
			ID:   3,
			Name: "Charlie",
		},
		Customer{
			ID:   4,
			Name: "Diana",
		},
	}
	orders := []Order{
		Order{
			ID:         100,
			CustomerID: 1,
			Total:      250,
		},
		Order{
			ID:         101,
			CustomerID: 2,
			Total:      125,
		},
		Order{
			ID:         102,
			CustomerID: 1,
			Total:      300,
		},
		Order{
			ID:         103,
			CustomerID: 5,
			Total:      80,
		},
	}
	result := func() []Result {
		customerMap := make(map[*Order]*Customer)
		seen := make(map[*Order]bool)
		for _, c := range customers {
			customerMap[c.ID] = &c
		}
		var result []Result
		for _, o := range orders {
			r := Result{Order: &o}
			if v, ok := customerMap[o.CustomerID]; ok {
				seen[o.CustomerID] = true
				r.Customer = v
			}
			result = append(result, r)
		}
		for _, c := range customers {
			if !seen[c.ID] {
				result = append(result, Result{Customer: &c})
			}
		}
		return result
	}()
	fmt.Println(strings.TrimSpace(fmt.Sprintln(any("--- Outer Join using syntax ---"))))
	for _, row := range result {
		if row.Order != nil {
			if row.Customer != nil {
				fmt.Println(strings.TrimSpace(fmt.Sprintln(any("Order"), row.Order.ID, "by", row.Customer.Name, "- $", row.Order.Total)))
			} else {
				fmt.Println(strings.TrimSpace(fmt.Sprintln(any("Order"), row.Order.ID, "by", "Unknown", "- $", row.Order.Total)))
			}
		} else {
			fmt.Println(strings.TrimSpace(fmt.Sprintln(any("Customer"), row.Customer.Name, "has no orders")))
		}
	}
}
