//go:build ignore

// Generated by Mochi compiler v0.10.27 on 1970-01-01T00:00:00Z

package main

import (
	"fmt"
	"strings"
)

type Customer struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type Order struct {
	ID         int `json:"id"`
	CustomerID int `json:"customerId"`
	Total      int `json:"total"`
}

type Result struct {
	OrderID  int      `json:"orderId"`
	Customer Customer `json:"customer"`
	Total    int      `json:"total"`
}

type v = Result

func main() {
	customers := []Customer{Customer{
		ID:   1,
		Name: "Alice",
	}, Customer{
		ID:   2,
		Name: "Bob",
	}}
	orders := []Order{Order{
		ID:         100,
		CustomerID: 1,
		Total:      250,
	}, Order{
		ID:         101,
		CustomerID: 3,
		Total:      80,
	}}
	result := func() []Result {
		customerMap := make(map[int]Customer)
		for _, c := range customers {
			customerMap[c.ID] = c
		}
		var result []Result
		for _, o := range orders {
			r := Result{OrderID: o.ID, Total: o.Total}
			if v, ok := customerMap[o.CustomerID]; ok {
				r.Customer = &v
			} else {
				r.Customer = nil
			}
			result = append(result, r)
		}
		return result
	}()
	fmt.Println(strings.TrimSpace(fmt.Sprintln("--- Left Join ---")))
	for _, entry := range result {
		if entry.Customer != nil {
			fmt.Printf("Order %d customer {id: %d, name: %q} total %d\n", entry.OrderID, entry.Customer.ID, entry.Customer.Name, entry.Total)
		} else {
			fmt.Printf("Order %d customer <nil> total %d\n", entry.OrderID, entry.Total)
		}
	}
}
