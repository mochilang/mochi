//go:build ignore

// Generated by Mochi compiler v0.10.27 on 2025-07-17T08:36:19Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"os"
	"reflect"
	"strings"
)

type v map[string]any

type Person struct {
	Name  string `json:"name"`
	Age   int    `json:"age"`
	Email string `json:"email"`
}
type Adult struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

func main() {
	people := func() []Person {
		rows := _load("tests/interpreter/valid/people.yaml", func() map[string]any {
			m := map[string]any{}
			_copyToMap(m, map[string]string{"format": "yaml"})
			return m
		}())
		out := make([]Person, len(rows))
		for i, r := range rows {
			b, _ := json.Marshal(r)
			_ = json.Unmarshal(b, &out[i])
		}
		return out
	}()
	adults := func() []Adult {
		results := []Adult{}
		for _, p := range people {
			if p.Age >= 18 {
				if p.Age >= 18 {
					results = append(results, Adult{
						Name:  p.Name,
						Email: p.Email,
					})
				}
			}
		}
		return results
	}()
	for _, a := range adults {
		fmt.Println(strings.TrimSpace(fmt.Sprintln(a.Name, a.Email)))
	}
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _copyToMap(dst map[string]any, src any) {
	switch m := src.(type) {
	case map[string]any:
		for k, v := range m {
			dst[k] = v
		}
	case map[string]string:
		for k, v := range m {
			dst[k] = v
		}
	case map[any]any:
		for k, v := range _convertMapAny(m) {
			dst[k] = v
		}
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				name := rt.Field(i).Name
				if tag := rt.Field(i).Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						name = tag
					}
				}
				dst[name] = rv.Field(i).Interface()
			}
		}
	}
}

func _load(path string, opts map[string]any) []map[string]any {
	format := "csv"
	header := false
	delim := ','
	if opts != nil {
		if f, ok := opts["format"].(string); ok {
			format = f
		}
		if h, ok := opts["header"].(bool); ok {
			header = h
		}
		if d, ok := opts["delimiter"].(string); ok && len(d) > 0 {
			delim = rune(d[0])
		}
	}
	var rows []map[string]any
	var err error
	switch format {
	case "jsonl":
		if path == "" || path == "-" {
			rows, err = data.LoadJSONLReader(os.Stdin)
		} else {
			rows, err = data.LoadJSONL(path)
		}
	case "json":
		if path == "" || path == "-" {
			rows, err = data.LoadJSONReader(os.Stdin)
		} else {
			rows, err = data.LoadJSON(path)
		}
	case "yaml":
		if path == "" || path == "-" {
			rows, err = data.LoadYAMLReader(os.Stdin)
		} else {
			rows, err = data.LoadYAML(path)
		}
	case "tsv":
		delim = '	'
		fallthrough
	default:
		if path == "" || path == "-" {
			rows, err = data.LoadCSVReader(os.Stdin, header, delim)
		} else {
			rows, err = data.LoadCSV(path, header, delim)
		}
	}
	if err != nil {
		panic(err)
	}
	return rows
}
