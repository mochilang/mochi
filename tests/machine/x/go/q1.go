//go:build ignore

// Generated by Mochi compiler v0.10.24 on 2025-07-12T18:51:51Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"strings"
	"time"
)

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus() {
	expect(_equal(result, []v{v{
		Returnflag:     "N",
		Linestatus:     "O",
		Sum_qty:        53,
		Sum_base_price: 3000,
		Sum_disc_price: (950.0 + 1800.0),
		Sum_charge:     ((950.0 * 1.07) + (1800.0 * 1.05)),
		Avg_qty:        26.5,
		Avg_price:      1500,
		Avg_disc:       0.07500000000000001,
		Count_order:    2,
	}}))
}

var lineitem []LineitemItem
var result []v

func main() {
	lineitem = _convSlice[v, LineitemItem](_convSlice[v, LineitemItem](_convSlice[v, LineitemItem]([]LineitemItem{LineitemItem{
		17,
		1000.0,
		0.05,
		0.07,
		"N",
		"O",
		"1998-08-01",
	}, LineitemItem{
		36,
		2000.0,
		0.1,
		0.05,
		"N",
		"O",
		"1998-09-01",
	}, LineitemItem{
		25,
		1500.0,
		0.0,
		0.08,
		"R",
		"F",
		"1998-09-03",
	}})))
	result = func() []v {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, row := range lineitem {
			if row.L_shipdate <= "1998-09-02" {
				key := v{
					Returnflag: row.L_returnflag,
					Linestatus: row.L_linestatus,
				}
				ks := fmt.Sprint(key)
				g, ok := groups[ks]
				if !ok {
					g = &data.Group{Key: key}
					groups[ks] = g
					order = append(order, ks)
				}
				_item := map[string]any{}
				_item["l_quantity"] = row.L_quantity
				_item["l_extendedprice"] = row.L_extendedprice
				_item["l_discount"] = row.L_discount
				_item["l_tax"] = row.L_tax
				_item["l_returnflag"] = row.L_returnflag
				_item["l_linestatus"] = row.L_linestatus
				_item["l_shipdate"] = row.L_shipdate
				_item["row"] = row
				g.Items = append(g.Items, _item)
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []v{}
		for _, g := range items {
			results = append(results, v{
				(_toAnyMap(g.Key)["returnflag"]).(string),
				(_toAnyMap(g.Key)["linestatus"]).(string),
				_sum(func() []any {
					results := []any{}
					for _, x := range g.Items {
						results = append(results, _toAnyMap(x)["l_quantity"])
					}
					return results
				}()),
				_sum(func() []any {
					results := []any{}
					for _, x := range g.Items {
						results = append(results, _toAnyMap(x)["l_extendedprice"])
					}
					return results
				}()),
				_sum(func() []any {
					results := []any{}
					for _, x := range g.Items {
						results = append(results, ((_toAnyMap(x)["l_extendedprice"]).(float64) * (float64(1) - (_toAnyMap(x)["l_discount"]).(float64)).(float64)))
					}
					return results
				}()),
				_sum(func() []any {
					results := []any{}
					for _, x := range g.Items {
						results = append(results, (((_toAnyMap(x)["l_extendedprice"]).(float64) * (float64(1) - (_toAnyMap(x)["l_discount"]).(float64)).(float64)) * (float64(1) + (_toAnyMap(x)["l_tax"]).(float64)).(float64)))
					}
					return results
				}()),
				_avg(func() []any {
					results := []any{}
					for _, x := range g.Items {
						results = append(results, _toAnyMap(x)["l_quantity"])
					}
					return results
				}()),
				_avg(func() []any {
					results := []any{}
					for _, x := range g.Items {
						results = append(results, _toAnyMap(x)["l_extendedprice"])
					}
					return results
				}()),
				_avg(func() []any {
					results := []any{}
					for _, x := range g.Items {
						results = append(results, _toAnyMap(x)["l_discount"])
					}
					return results
				}()),
				len(g.Items),
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_Q1_aggregates_revenue_and_quantity_by_returnflag___linestatus()
}

func _avg(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		case []float64:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		case []string:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		case []bool:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		default:
			panic("avg() expects list or group")
		}
	}
	if len(items) == 0 {
		return 0
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("avg() expects numbers")
		}
	}
	return sum / float64(len(items))
}

func _convSlice[T any, U any](s []T) []U {
	out := []U{}
	for _, v := range s {
		out = append(out, any(v).(U))
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _sum(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		case []float64:
			items = []any{}
			for _, v := range s {
				items = append(items, v)
			}
		case []string, []bool:
			panic("sum() expects numbers")
		default:
			panic("sum() expects list or group")
		}
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("sum() expects numbers")
		}
	}
	return sum
}

func _toAnyMap(m any) map[string]any {
	switch v := m.(type) {
	case map[string]any:
		return v
	case map[string]string:
		out := make(map[string]any, len(v))
		for k, vv := range v {
			out[k] = vv
		}
		return out
	default:
		rv := reflect.ValueOf(v)
		if rv.Kind() == reflect.Struct {
			out := make(map[string]any, rv.NumField())
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				name := rt.Field(i).Name
				if tag := rt.Field(i).Tag.Get("json"); tag != "" {
					comma := strings.Index(tag, ",")
					if comma >= 0 {
						tag = tag[:comma]
					}
					if tag != "-" {
						name = tag
					}
				}
				out[name] = rv.Field(i).Interface()
			}
			return out
		}
		return nil
	}
}
