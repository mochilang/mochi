//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-14T02:57:34Z

package main

import (
	"fmt"
	"reflect"
	"time"
)

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

type Person struct {
	Name   string `json:"name"`
	Age    int    `json:"age"`
	Status string `json:"status"`
}

func test_update_adult_status() {
	expect(_equal(people, []Person{
		Person{Name: "Alice", Age: 17, Status: "minor"},
		Person{Name: "Bob", Age: 26, Status: "adult"},
		Person{Name: "Charlie", Age: 19, Status: "adult"},
		Person{Name: "Diana", Age: 16, Status: "minor"},
	}))
}

var people []Person

func main() {
	people = []Person{
		Person{Name: "Alice", Age: 17, Status: "minor"},
		Person{Name: "Bob", Age: 25, Status: "unknown"},
		Person{Name: "Charlie", Age: 18, Status: "unknown"},
		Person{Name: "Diana", Age: 16, Status: "minor"},
	}
	for i0, v1 := range people {
		age := v1.Age
		if !(age >= 18) {
			continue
		}
		v1.Status = "adult"
		v1.Age = (age + 1)
		people[i0] = v1
	}
	fmt.Println("ok")
	test_update_adult_status()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}
