//go:build ignore

// Generated by Mochi compiler v0.10.25 on 2025-07-14T02:39:24Z

package main

import (
	"fmt"
	"reflect"
)

// line 32
func classify(n int) string {
	return func() string {
		_t := n
		if _equal(_t, 0) {
			return "zero"
		}
		if _equal(_t, 1) {
			return "one"
		}
		return "many"
	}()
}

func main() {
	x := 2
	label := func() string {
		_t := x
		if _equal(_t, 1) {
			return "one"
		}
		if _equal(_t, 2) {
			return "two"
		}
		if _equal(_t, 3) {
			return "three"
		}
		return "unknown"
	}()
	fmt.Println(label)
	day := "sun"
	mood := func() string {
		_t := day
		if _equal(_t, "mon") {
			return "tired"
		}
		if _equal(_t, "fri") {
			return "excited"
		}
		if _equal(_t, "sun") {
			return "relaxed"
		}
		return "normal"
	}()
	fmt.Println(mood)
	ok := true
	status := func() string {
		_t := ok
		if _equal(_t, true) {
			return "confirmed"
		}
		if _equal(_t, false) {
			return "denied"
		}
		var zeroVal string
		return zeroVal
	}()
	fmt.Println(status)
	fmt.Println(classify(0))
	fmt.Println(classify(5))
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}
