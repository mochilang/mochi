//go:build ignore

// Generated by Mochi compiler v0.10.27 on 1970-01-01T00:00:00Z

package main

import (
	"fmt"
	"mochi/runtime/data"
	"sort"
	"strings"

	"golang.org/x/exp/constraints"
)

type v map[string]any

type Item struct {
	Cat string `json:"cat"`
	Val int    `json:"val"`
}

type Grouped struct {
	Cat   any     `json:"cat"`
	Total float64 `json:"total"`
}

func main() {
	items := []Item{
		Item{
			Cat: "a",
			Val: 3,
		},
		Item{
			Cat: "a",
			Val: 1,
		},
		Item{
			Cat: "b",
			Val: 5,
		},
		Item{
			Cat: "b",
			Val: 2,
		},
	}
	grouped := func() []Grouped {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, i := range items {
			key := i.Cat
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, i)
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		type pair struct {
			item *data.Group
			key  any
		}
		pairs := make([]pair, len(items))
		for idx, it := range items {
			g := it
			pairs[idx] = pair{item: it, key: -_sumOrdered[int](func() []int {
				results := []int{}
				for _, xRaw := range g.Items {
					x := xRaw.(Item)
					results = append(results, x.Val)
				}
				return results
			}())}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for idx, p := range pairs {
			items[idx] = p.item
		}
		results := []Grouped{}
		for _, g := range items {
			results = append(results, Grouped{
				Cat: g.Key.(any),
				Total: _sumOrdered[int](func() []int {
					results := []int{}
					for _, xRaw := range g.Items {
						x := xRaw.(Item)
						results = append(results, x.Val)
					}
					return results
				}()),
			})
		}
		return results
	}()
	fmt.Println(strings.TrimSpace(strings.Join([]string{strings.Trim(strings.Trim(fmt.Sprint(grouped), "[]"), " ")}, " ")))
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
