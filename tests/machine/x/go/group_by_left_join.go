//go:build ignore

// Generated by Mochi compiler v0.10.27 on 1970-01-01T00:00:00Z

package main

import (
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"strings"
)

type Customer struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type Order struct {
	ID         int `json:"id"`
	CustomerID int `json:"customerId"`
}

type Stat struct {
	Name  any `json:"name"`
	Count int `json:"count"`
}

type v map[string]any

func main() {
	customers := []Customer{Customer{
		ID:   1,
		Name: "Alice",
	}, Customer{
		ID:   2,
		Name: "Bob",
	}, Customer{
		ID:   3,
		Name: "Charlie",
	}}
	orders := []Order{Order{
		ID:         100,
		CustomerID: 1,
	}, Order{
		ID:         101,
		CustomerID: 1,
	}, Order{
		ID:         102,
		CustomerID: 2,
	}}
	stats := func() []Stat {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, c := range customers {
			matched := false
			for _, o := range orders {
				if !(o.CustomerID == c.ID) {
					continue
				}
				matched = true
				key := c.Name
				ks := fmt.Sprint(key)
				g, ok := groups[ks]
				if !ok {
					g = &data.Group{Key: key}
					groups[ks] = g
					order = append(order, ks)
				}
				g.Items = append(g.Items, c)
			}
			if !matched {
				var o Order
				key := c.Name
				ks := fmt.Sprint(key)
				g, ok := groups[ks]
				if !ok {
					g = &data.Group{Key: key}
					groups[ks] = g
					order = append(order, ks)
				}
				g.Items = append(g.Items, c)
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Stat{}
		for _, g := range items {
			results = append(results, Stat{
				Name: g.Key.(any),
				Count: len(func() []Customer {
					results := []Customer{}
					for _, rRaw := range g.Items {
						r := rRaw.(Customer)
						if _exists(r.O) {
							if _exists(r.O) {
								results = append(results, r)
							}
						}
					}
					return results
				}()),
			})
		}
		return results
	}()
	fmt.Println(strings.TrimSpace(fmt.Sprintln("--- Group Left Join ---")))
	for _, s := range stats {
		fmt.Println(strings.TrimSpace(fmt.Sprintln(s.Name, "orders:", s.Count)))
	}
}

func _exists(v any) bool {
	if g, ok := v.(*data.Group); ok {
		return len(g.Items) > 0
	}
	switch s := v.(type) {
	case []any:
		return len(s) > 0
	case []int:
		return len(s) > 0
	case []float64:
		return len(s) > 0
	case []string:
		return len(s) > 0
	case []bool:
		return len(s) > 0
	case bool:
		return s
	case []map[string]any:
		return len(s) > 0
	case map[string]any:
		return len(s) > 0
	case map[string]int:
		return len(s) > 0
	case string:
		return len([]rune(s)) > 0
	}
	rv := reflect.ValueOf(v)
	switch rv.Kind() {
	case reflect.Slice, reflect.Array:
		return rv.Len() > 0
	case reflect.Map:
		return !rv.IsNil() && rv.Len() > 0
	case reflect.Pointer:
		return !rv.IsNil()
	case reflect.Struct:
		return !rv.IsZero()
	}
	return false
}
