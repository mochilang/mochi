// Generated by Mochi compiler v0.10.27 on 2025-07-21T16:28:09Z
program GroupByJoin;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;
  GroupRec = record
    name: Variant;
    count: integer;
  end;
var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, integer>;
  groups: specialize TArray<GroupRec>;
  c: specialize TFPGMap<string, Variant>;
  customers: specialize TArray<specialize TFPGMap<string, Variant>>;
  i0: integer;
  idx0: integer;
  o: specialize TFPGMap<string, integer>;
  orders: specialize TArray<specialize TFPGMap<string, integer>>;
  s: GroupRec;
  stats: specialize TArray<GroupRec>;
begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('id', 1);
  _tmp0.AddOrSetData('name', 'Alice');
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('id', 2);
  _tmp1.AddOrSetData('name', 'Bob');
  customers := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('id', 100);
  _tmp2.AddOrSetData('customerId', 1);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('id', 101);
  _tmp3.AddOrSetData('customerId', 1);
  _tmp4 := specialize TFPGMap<string, integer>.Create;
  _tmp4.AddOrSetData('id', 102);
  _tmp4.AddOrSetData('customerId', 2);
  orders := specialize TArray<specialize TFPGMap<string, integer>>([_tmp2, _tmp3, _tmp4]);
  SetLength(groups, 0);
  for o in orders do
  begin
    for c in customers do
    begin
      if o.KeyData['customerId'] = c.KeyData['id'] then
      begin
        idx0 := -1;
        for i0 := 0 to High(groups) do
          if VarToStr(groups[i0].name) = VarToStr(c.KeyData['name']) then begin idx0 := i0; Break; end;
        if idx0 = -1 then
        begin
          idx0 := Length(groups);
          SetLength(groups, idx0 + 1);
          groups[idx0].name := c.KeyData['name'];
          groups[idx0].count := 1;
        end
        else
          groups[idx0].count := groups[idx0].count + 1;
      end;
    end;
  end;
  stats := groups;
  writeln('--- Orders per customer ---');
  for s in stats do
  begin
    writeln(s.name, ' ', 'orders:', ' ', s.count);
  end;
end.
