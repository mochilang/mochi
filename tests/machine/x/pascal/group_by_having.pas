// Generated by Mochi compiler v0.10.26 on 2025-07-16T15:43:08Z
program GroupByHaving;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

var
  _tmp0: specialize TFPGMap<string, string>;
  _tmp1: specialize TFPGMap<string, string>;
  _tmp10: string;
  _tmp11: integer;
  _tmp12: integer;
  _tmp13: specialize _Group<string, specialize TFPGMap<string, string>>;
  _tmp14: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp15: specialize TFPGMap<string, Variant>;
  _tmp2: specialize TFPGMap<string, string>;
  _tmp3: specialize TFPGMap<string, string>;
  _tmp4: specialize TFPGMap<string, string>;
  _tmp5: specialize TFPGMap<string, string>;
  _tmp6: specialize TFPGMap<string, string>;
  _tmp7: specialize TArray<specialize TFPGMap<string, string>>;
  _tmp8: specialize TArray<specialize _Group<string, specialize TFPGMap<string, string>>>;
  _tmp9: string;
  big: specialize TArray<specialize TFPGMap<string, Variant>>;
  p: specialize TFPGMap<string, string>;
  people: specialize TArray<specialize TFPGMap<string, string>>;

generic _Group<K,T> = record
  Key: K;
  Items: specialize TArray<T>;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

begin
  _tmp0 := specialize TFPGMap<string, string>.Create;
  _tmp0.AddOrSetData('name', 'Alice');
  _tmp0.AddOrSetData('city', 'Paris');
  _tmp1 := specialize TFPGMap<string, string>.Create;
  _tmp1.AddOrSetData('name', 'Bob');
  _tmp1.AddOrSetData('city', 'Hanoi');
  _tmp2 := specialize TFPGMap<string, string>.Create;
  _tmp2.AddOrSetData('name', 'Charlie');
  _tmp2.AddOrSetData('city', 'Paris');
  _tmp3 := specialize TFPGMap<string, string>.Create;
  _tmp3.AddOrSetData('name', 'Diana');
  _tmp3.AddOrSetData('city', 'Hanoi');
  _tmp4 := specialize TFPGMap<string, string>.Create;
  _tmp4.AddOrSetData('name', 'Eve');
  _tmp4.AddOrSetData('city', 'Paris');
  _tmp5 := specialize TFPGMap<string, string>.Create;
  _tmp5.AddOrSetData('name', 'Frank');
  _tmp5.AddOrSetData('city', 'Hanoi');
  _tmp6 := specialize TFPGMap<string, string>.Create;
  _tmp6.AddOrSetData('name', 'George');
  _tmp6.AddOrSetData('city', 'Paris');
  people := specialize TArray<specialize TFPGMap<string, string>>([_tmp0, _tmp1, _tmp2, _tmp3, _tmp4, _tmp5, _tmp6]);
  SetLength(_tmp7, 0);
  for p in people do
  begin
    _tmp7 := Concat(_tmp7, [p]);
  end;
  SetLength(_tmp8, 0);
  for p in _tmp7 do
  begin
    _tmp9 := p.KeyData['city'];
    _tmp10 := VarToStr(_tmp9);
    _tmp11 := -1;
    for _tmp12 := 0 to High(_tmp8) do
      if VarToStr(_tmp8[_tmp12].Key) = _tmp10 then begin _tmp11 := _tmp12; Break; end;
    if _tmp11 = -1 then
    begin
      _tmp11 := Length(_tmp8);
      SetLength(_tmp8, _tmp11 + 1);
      _tmp8[_tmp11].Key := _tmp9;
      SetLength(_tmp8[_tmp11].Items, 0);
    end;
    SetLength(_tmp8[_tmp11].Items, Length(_tmp8[_tmp11].Items)+1);
    _tmp8[_tmp11].Items[High(_tmp8[_tmp11].Items)] := p;
  end;
  SetLength(_tmp14, 0);
  for _tmp13 in _tmp8 do
  begin
    _tmp15 := specialize TFPGMap<string, Variant>.Create;
    _tmp15.AddOrSetData('city', g.key);
    _tmp15.AddOrSetData('num', Length(g));
    _tmp14 := Concat(_tmp14, [_tmp15]);
  end;
  big := _tmp14;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(big);
end.
