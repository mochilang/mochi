// Generated by Mochi compiler v0.10.26 on 2025-07-16T15:43:07Z
program GroupBy;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: integer;
  _tmp11: integer;
  _tmp12: specialize _Group<Variant, specialize TFPGMap<string, Variant>>;
  _tmp13: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp14: specialize TFPGMap<string, Variant>;
  _tmp15: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TFPGMap<string, Variant>;
  _tmp5: specialize TFPGMap<string, Variant>;
  _tmp6: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp7: specialize TArray<specialize _Group<Variant, specialize TFPGMap<string, Variant>>>;
  _tmp8: Variant;
  _tmp9: string;
  p: integer;
  people: specialize TArray<specialize TFPGMap<string, Variant>>;
  person: specialize TFPGMap<string, Variant>;
  s: specialize TFPGMap<string, Variant>;
  stats: specialize TArray<specialize TFPGMap<string, Variant>>;

generic _Group<K,T> = record
  Key: K;
  Items: specialize TArray<T>;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

generic function _avgList<T>(arr: specialize TArray<T>): double;
begin
  if Length(arr) = 0 then exit(0);
  Result := specialize _sumList<T>(arr) / Length(arr);
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('name', 'Alice');
  _tmp0.AddOrSetData('age', 30);
  _tmp0.AddOrSetData('city', 'Paris');
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('name', 'Bob');
  _tmp1.AddOrSetData('age', 15);
  _tmp1.AddOrSetData('city', 'Hanoi');
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('name', 'Charlie');
  _tmp2.AddOrSetData('age', 65);
  _tmp2.AddOrSetData('city', 'Paris');
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('name', 'Diana');
  _tmp3.AddOrSetData('age', 45);
  _tmp3.AddOrSetData('city', 'Hanoi');
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('name', 'Eve');
  _tmp4.AddOrSetData('age', 70);
  _tmp4.AddOrSetData('city', 'Paris');
  _tmp5 := specialize TFPGMap<string, Variant>.Create;
  _tmp5.AddOrSetData('name', 'Frank');
  _tmp5.AddOrSetData('age', 22);
  _tmp5.AddOrSetData('city', 'Hanoi');
  people := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1, _tmp2, _tmp3, _tmp4, _tmp5]);
  SetLength(_tmp6, 0);
  for person in people do
  begin
    _tmp6 := Concat(_tmp6, [person]);
  end;
  SetLength(_tmp7, 0);
  for person in _tmp6 do
  begin
    _tmp8 := person.KeyData['city'];
    _tmp9 := VarToStr(_tmp8);
    _tmp10 := -1;
    for _tmp11 := 0 to High(_tmp7) do
      if VarToStr(_tmp7[_tmp11].Key) = _tmp9 then begin _tmp10 := _tmp11; Break; end;
    if _tmp10 = -1 then
    begin
      _tmp10 := Length(_tmp7);
      SetLength(_tmp7, _tmp10 + 1);
      _tmp7[_tmp10].Key := _tmp8;
      SetLength(_tmp7[_tmp10].Items, 0);
    end;
    SetLength(_tmp7[_tmp10].Items, Length(_tmp7[_tmp10].Items)+1);
    _tmp7[_tmp10].Items[High(_tmp7[_tmp10].Items)] := person;
  end;
  SetLength(_tmp13, 0);
  for _tmp12 in _tmp7 do
  begin
    _tmp14 := specialize TFPGMap<string, Variant>.Create;
    _tmp14.AddOrSetData('city', g.key);
    _tmp14.AddOrSetData('count', Length(g));
    SetLength(_tmp15, 0);
    for p in g do
    begin
      _tmp15 := Concat(_tmp15, [p.age]);
    end;
    _tmp14.AddOrSetData('avg_age', specialize _avgList<Variant>(_tmp15));
    _tmp13 := Concat(_tmp13, [_tmp14]);
  end;
  stats := _tmp13;
  writeln('--- People grouped by city ---');
  for s in stats do
  begin
    writeln(s.KeyData['city'], ' ', ': count =', ' ', s.KeyData['count'], ' ', ', avg_age =', ' ', s.KeyData['avg_age']);
  end;
end.
