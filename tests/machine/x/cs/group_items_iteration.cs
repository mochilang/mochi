// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;

public class Program
{
    public static void Main()
    {
        var data = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "tag", "a" }, { "val", 1 } }, new Dictionary<string, dynamic> { { "tag", "a" }, { "val", 2 } }, new Dictionary<string, dynamic> { { "tag", "b" }, { "val", 3 } } };
        var groups = _group_by(data, d => d["tag"]).Select(g => g).ToList();
        var tmp = new dynamic[] { };
        foreach (var g in groups)
        {
            long total = 0;
            foreach (var x in g.items)
            {
                total = (total + x["val"]);
            }
            tmp = (new Func<List<dynamic>>(() => { var _tmp0 = new List<dynamic>(tmp); _tmp0.Add(new Dictionary<string, dynamic> { { "tag", g.key }, { "total", total } }); return _tmp0; }))();
        }
        var result = tmp.OrderBy(r => r["tag"]).Select(r => r);
        Console.WriteLine(result);
    }
    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn)
    {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src)
        {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g))
            {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }

    public class _Group
    {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }

}
