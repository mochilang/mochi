// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;

public class Program {
    public static void Main() {
        Console.WriteLine(_union(new int[] { 1, 2 }, new int[] { 2, 3 }));
        Console.WriteLine(_except(new int[] { 1, 2, 3 }, new int[] { 2 }));
        Console.WriteLine(_intersect(new int[] { 1, 2, 3 }, new int[] { 2, 4 }));
        Console.WriteLine(_union_all(new int[] { 1, 2 }, new int[] { 2, 3 }).Length);
    }
    static List<dynamic> _union(IEnumerable<dynamic> a, IEnumerable<dynamic> b) {
        var res = new List<dynamic>();
        if (a != null) foreach (var it in a) if (!_in(it, res)) res.Add(it);
        if (b != null) foreach (var it in b) if (!_in(it, res)) res.Add(it);
        return res;
    }
    
    static bool _in(dynamic item, dynamic col) {
        if (col is string s && item is string sub) {
            return s.Contains(sub);
        }
        if (col is System.Collections.IDictionary d) {
            return d.Contains(item);
        }
        if (col is System.Collections.IEnumerable e) {
            foreach (var it in e) {
                if (Equals(it, item)) return true;
            }
            return false;
        }
        return false;
    }
    
    static List<dynamic> _except(IEnumerable<dynamic> a, IEnumerable<dynamic> b) {
        var res = new List<dynamic>();
        if (a != null) foreach (var it in a) if (!_in(it, b)) res.Add(it);
        return res;
    }
    
    static List<dynamic> _intersect(IEnumerable<dynamic> a, IEnumerable<dynamic> b) {
        var res = new List<dynamic>();
        if (a != null) foreach (var it in a) if (_in(it, b) && !_in(it, res)) res.Add(it);
        return res;
    }
    
    static List<dynamic> _union_all(IEnumerable<dynamic> a, IEnumerable<dynamic> b) {
        var res = new List<dynamic>();
        if (a != null) foreach (var it in a) res.Add(it);
        if (b != null) foreach (var it in b) res.Add(it);
        return res;
    }
    
}
