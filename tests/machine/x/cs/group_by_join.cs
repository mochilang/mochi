// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program
{
    public static void Main()
    {
        var customers = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 1L }, { "name", "Alice" } }, new Dictionary<string, dynamic> { { "id", 2L }, { "name", "Bob" } } };
        Dictionary<string, long>[] orders = new Dictionary<string, long>[] { new Dictionary<string, long> { { "id", 100L }, { "customerId", 1L } }, new Dictionary<string, long> { { "id", 101L }, { "customerId", 1L } }, new Dictionary<string, long> { { "id", 102L }, { "customerId", 2L } } };
        var stats = new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var groups = new Dictionary<string, _Group>();
            var order = new List<string>();
            foreach (var o in orders)
            {
                foreach (var c in customers)
                {
                    if (!((o["customerId"] == c["id"]))) continue;
                    var key = c["name"];
                    var ks = Convert.ToString(key);
                    if (!groups.TryGetValue(ks, out var g))
                    {
                        g = new _Group(key);
                        groups[ks] = g;
                        order.Add(ks);
                    }
                    g.Items.Add(o);
                }
            }
            var items = new List<_Group>();
            foreach (var ks in order) items.Add(groups[ks]);
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var g in items)
            {
                _res.Add(new Dictionary<string, long> { { "name", g["key"] }, { "count", _count(g) } });
            }
            return _res;
        })();
        Console.WriteLine("--- Orders per customer ---");
        foreach (var s in stats)
        {
            Console.WriteLine(string.Join(" ", new[] { Convert.ToString(s.name), Convert.ToString("orders:"), Convert.ToString(s.count) }));
        }
    }
    static int _count(dynamic v)
    {
        if (v is string)
        {
            return ((string)v).Length;
        }
        if (v is System.Collections.ICollection c)
        {
            return c.Count;
        }
        throw new Exception("count() expects list or string");
    }

    public class _Group
    {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }

}
