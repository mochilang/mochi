// Generated by Mochi compiler v0.10.27 on 1970-01-01T00:00:00Z
using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static void Main()
    {
        var customers = new List<dynamic> { new Dictionary<string, dynamic> { { "id", 1 }, { "name", "Alice" } }, new Dictionary<string, dynamic> { { "id", 2 }, { "name", "Bob" } } };
        var orders = new List<dynamic> { new Dictionary<string, int> { { "id", 100 }, { "customerId", 1 } }, new Dictionary<string, int> { { "id", 101 }, { "customerId", 1 } }, new Dictionary<string, int> { { "id", 102 }, { "customerId", 2 } } };
        var stats = new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var groups = new Dictionary<string, _Group<dynamic, Dictionary<string, int>>>();
            var order = new List<string>();
            foreach (var o in orders)
            {
                foreach (var c in customers)
                {
                    if (!((o["customerId"] == c["id"]))) continue;
                    var key = c["name"];
                    var ks = Convert.ToString(key);
                    if (!groups.TryGetValue(ks, out var g))
                    {
                        g = new _Group<dynamic, Dictionary<string, int>>(key);
                        groups[ks] = g;
                        order.Add(ks);
                    }
                    g.Items.Add(o);
                }
            }
            var items = new List<_Group<dynamic, Dictionary<string, int>>>();
            foreach (var ks in order) items.Add(groups[ks]);
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var g in items)
            {
                _res.Add(new Dictionary<string, int> { { "name", g["key"] }, { "count", g.Count() } });
            }
            return _res;
        })();
        Console.WriteLine("--- Orders per customer ---");
        foreach (var s in stats)
        {
            Console.WriteLine(string.Join(" ", new[] { Convert.ToString(s["name"]), Convert.ToString("orders:"), Convert.ToString(s["count"]) }));
        }
    }
    public interface _IGroup { System.Collections.IEnumerable Items { get; } }
    public class _Group<TKey, TItem> : _IGroup, IEnumerable<TItem>
    {
        public TKey key;
        public List<TItem> Items = new List<TItem>();
        public _Group(TKey k) { key = k; }
        System.Collections.IEnumerable _IGroup.Items => Items;
        public IEnumerator<TItem> GetEnumerator() => Items.GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => Items.GetEnumerator();
    }

}
