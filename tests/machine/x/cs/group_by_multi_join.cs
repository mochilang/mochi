// Generated by Mochi compiler v0.10.27 on 1970-01-01T00:00:00Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void Main()
    {
        var nations = new List<Nation> { new Dictionary<string, dynamic> { { "id", 1 }, { "name", "A" } }, new Dictionary<string, dynamic> { { "id", 2 }, { "name", "B" } } };
        List<Dictionary<string, int>> suppliers = new List<Supplier> { new Dictionary<string, int> { { "id", 1 }, { "nation", 1 } }, new Dictionary<string, int> { { "id", 2 }, { "nation", 2 } } };
        var partsupp = new List<Partsupp> { new Dictionary<string, dynamic> { { "part", 100 }, { "supplier", 1 }, { "cost", 10.000000 }, { "qty", 2 } }, new Dictionary<string, dynamic> { { "part", 100 }, { "supplier", 2 }, { "cost", 20.000000 }, { "qty", 1 } }, new Dictionary<string, dynamic> { { "part", 200 }, { "supplier", 1 }, { "cost", 5.000000 }, { "qty", 3 } } };
        var filtered = (
    from ps in partsupp
    join s in suppliers on s["id"] equals ps["supplier"]
    join n in nations on n["id"] equals s["nation"]
    select new Dictionary<string, dynamic> { { "part", ps["part"] }, { "value", (ps["cost"] * ps["qty"]) } }
).ToList();
        var grouped = _group_by<dynamic, dynamic>(filtered, x => x["part"]).Select(g => new Dictionary<string, dynamic> { { "part", g.key }, { "total", _sum(g.Items.Select(r => r["value"]).ToList()) } }).ToList();
        Console.WriteLine(JsonSerializer.Serialize(grouped));
    }
    public class Nation
    {
        public int id;
        public string name;
    }


    public class Supplier
    {
        public int id;
        public int nation;
    }


    public class Partsupp
    {
        public int part;
        public int supplier;
        public double cost;
        public int qty;
    }


    public interface _IGroup { System.Collections.IEnumerable Items { get; } }
    public class _Group<TKey, TItem> : _IGroup, IEnumerable<TItem>
    {
        public TKey key;
        public List<TItem> Items = new List<TItem>();
        public _Group(TKey k) { key = k; }
        System.Collections.IEnumerable _IGroup.Items => Items;
        public IEnumerator<TItem> GetEnumerator() => Items.GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => Items.GetEnumerator();
    }

    static List<_Group<TKey, TItem>> _group_by<TItem, TKey>(IEnumerable<TItem> src, Func<TItem, TKey> keyfn)
    {
        var groups = new Dictionary<string, _Group<TKey, TItem>>();
        var order = new List<string>();
        foreach (var it in src)
        {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g))
            {
                g = new _Group<TKey, TItem>(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group<TKey, TItem>>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

}
