// Generated by Mochi compiler v0.10.27 on 1970-01-01T00:00:00Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void Main()
    {
        var items = new List<dynamic> { new Dictionary<string, dynamic> { { "cat", "a" }, { "val", 3 } }, new Dictionary<string, dynamic> { { "cat", "a" }, { "val", 1 } }, new Dictionary<string, dynamic> { { "cat", "b" }, { "val", 5 } }, new Dictionary<string, dynamic> { { "cat", "b" }, { "val", 2 } } };
        var grouped = _group_by<dynamic, dynamic>(items, i => i["cat"]).OrderBy(g => (-_sum(g.Items.Select(x => x["val"]).ToList()))).Select(g => new Dictionary<string, dynamic> { { "cat", g.key }, { "total", _sum(g.Items.Select(x => x["val"]).ToList()) } }).ToList();
        Console.WriteLine(JsonSerializer.Serialize(grouped));
    }
    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

    public interface _IGroup { System.Collections.IEnumerable Items { get; } }
    public class _Group<TKey, TItem> : _IGroup, IEnumerable<TItem>
    {
        public TKey key;
        public List<TItem> Items = new List<TItem>();
        public _Group(TKey k) { key = k; }
        System.Collections.IEnumerable _IGroup.Items => Items;
        public IEnumerator<TItem> GetEnumerator() => Items.GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => Items.GetEnumerator();
    }

    static List<_Group<TKey, TItem>> _group_by<TItem, TKey>(IEnumerable<TItem> src, Func<TItem, TKey> keyfn)
    {
        var groups = new Dictionary<string, _Group<TKey, TItem>>();
        var order = new List<string>();
        foreach (var it in src)
        {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g))
            {
                g = new _Group<TKey, TItem>(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group<TKey, TItem>>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }

}
