// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program
{
    public static void Main()
    {
        var items = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cat", "a" }, { "val", 3L } }, new Dictionary<string, dynamic> { { "cat", "a" }, { "val", 1L } }, new Dictionary<string, dynamic> { { "cat", "b" }, { "val", 5L } }, new Dictionary<string, dynamic> { { "cat", "b" }, { "val", 2L } } };
        var grouped = _group_by(items, i => i["cat"]).Select(g => new Dictionary<string, dynamic> { { "cat", g["key"] }, { "total", _sum(new List<dynamic>(g.Select(x => x.val))) } }).OrderBy(g => (-_sum(new List<dynamic>(g.Select(x => x.val))))).ToList();
        Console.WriteLine(grouped);
    }
    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn)
    {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src)
        {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g))
            {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }

    public class _Group
    {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }

}
