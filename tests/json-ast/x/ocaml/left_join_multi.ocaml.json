{
  "funcs": [],
  "prints": [
    {
      "expr": "let customers = [[(\"id\", 1); (\"name\", \"Alice\")]; [(\"id\", 2); (\"name\", \"Bob\")]] in\n  let orders = [[(\"id\", 100); (\"customerId\", 1)]; [(\"id\", 101); (\"customerId\", 2)]] in\n  let items = [[(\"orderId\", 100); (\"sku\", \"a\")]] in\n  let result = (List.concat (List.map (fun o -\u003e (List.concat (List.map (fun c -\u003e (List.filter_map (fun i -\u003e if (((List.assoc \"customerId\" o) == (List.assoc \"id\" c)) \u0026\u0026 ((List.assoc \"id\" o) == (List.assoc \"orderId\" i))) then Some ([(\"orderId\", (List.assoc \"id\" o)); (\"name\", (List.assoc \"name\" c)); (\"item\", i)]) else None) items)) customers))) orders)) in\n  print_endline (String.concat \" \" (List.filter (fun s -\u003e s \u003c\u003e \"\") [\"--- Left Join Multi ---\"]));\n  (try List.iter (fun r -\u003e\n    try\n  print_endline (String.concat \" \" (List.filter (fun s -\u003e s \u003c\u003e \"\") [string_of_int (List.assoc \"orderId\" r)); (List.assoc \"name\" r); (List.assoc \"item\" r)]));\n    with Continue -\u003e ()) result with Break -\u003e ())",
      "line": 3,
      "col": 1,
      "endLine": 12,
      "endCol": 50,
      "snippet": "let () =\n  let customers = [[(\"id\", 1); (\"name\", \"Alice\")]; [(\"id\", 2); (\"name\", \"Bob\")]] in\n  let orders = [[(\"id\", 100); (\"customerId\", 1)]; [(\"id\", 101); (\"customerId\", 2)]] in\n  let items = [[(\"orderId\", 100); (\"sku\", \"a\")]] in\n  let result = (List.concat (List.map (fun o -\u003e (List.concat (List.map (fun c -\u003e (List.filter_map (fun i -\u003e if (((List.assoc \"customerId\" o) == (List.assoc \"id\" c)) \u0026\u0026 ((List.assoc \"id\" o) == (List.assoc \"orderId\" i))) then Some ([(\"orderId\", (List.assoc \"id\" o)); (\"name\", (List.assoc \"name\" c)); (\"item\", i)]) else None) items)) customers))) orders)) in\n  print_endline (String.concat \" \" (List.filter (fun s -\u003e s \u003c\u003e \"\") [\"--- Left Join Multi ---\"]));\n  (try List.iter (fun r -\u003e\n    try\n  print_endline (String.concat \" \" (List.filter (fun s -\u003e s \u003c\u003e \"\") [string_of_int (List.assoc \"orderId\" r)); (List.assoc \"name\" r); (List.assoc \"item\" r)]));\n    with Continue -\u003e ()) result with Break -\u003e ())"
    }
  ],
  "types": [],
  "vars": []
}
