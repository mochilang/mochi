{
  "funcs": [
    {
      "name": "__to_json",
      "params": [
        "v"
      ],
      "body": "let open Obj in\n  let rec list_aux o =\n    if is_int o \u0026\u0026 (magic (obj o) : int) = 0 then \"\" else\n     let hd = field o 0 in\n     let tl = field o 1 in\n     let rest = list_aux tl in\n     let cur = __to_json (obj hd) in\n     if rest = \"\" then cur else cur ^ \",\" ^ rest\n  in\n  let r = repr v in\n  if is_int r then string_of_int (magic v) else\n  match tag r with\n    | 0 -\u003e if size r = 0 then \"[]\" else \"[\" ^ list_aux r ^ \"]\"\n    | 252 -\u003e Printf.sprintf \"%S\" (magic v : string)\n    | 253 -\u003e string_of_float (magic v)\n    | _ -\u003e \"null\"",
      "line": 3,
      "col": 1,
      "endLine": 19,
      "endCol": 18,
      "snippet": "let rec __to_json v =\n  let open Obj in\n  let rec list_aux o =\n    if is_int o \u0026\u0026 (magic (obj o) : int) = 0 then \"\" else\n     let hd = field o 0 in\n     let tl = field o 1 in\n     let rest = list_aux tl in\n     let cur = __to_json (obj hd) in\n     if rest = \"\" then cur else cur ^ \",\" ^ rest\n  in\n  let r = repr v in\n  if is_int r then string_of_int (magic v) else\n  match tag r with\n    | 0 -\u003e if size r = 0 then \"[]\" else \"[\" ^ list_aux r ^ \"]\"\n    | 252 -\u003e Printf.sprintf \"%S\" (magic v : string)\n    | 253 -\u003e string_of_float (magic v)\n    | _ -\u003e \"null\""
    }
  ],
  "prints": [
    {
      "expr": "let people = [[(\"name\", \"Alice\"); (\"city\", \"Paris\")]; [(\"name\", \"Bob\"); (\"city\", \"Hanoi\")]; [(\"name\", \"Charlie\"); (\"city\", \"Paris\")]; [(\"name\", \"Diana\"); (\"city\", \"Hanoi\")]; [(\"name\", \"Eve\"); (\"city\", \"Paris\")]; [(\"name\", \"Frank\"); (\"city\", \"Hanoi\")]; [(\"name\", \"George\"); (\"city\", \"Paris\")]] in\n  let big = (let __groups0 = ref [] in\n  List.iter (fun p -\u003e\n    let key = (List.assoc \"city\" p) in\n    let cur = try List.assoc key !__groups0 with Not_found -\u003e [] in\n    __groups0 := (key, p :: cur) :: List.remove_assoc key !__groups0;\n  ) people;\n  let __res0 = ref [] in\n  List.iter (fun (g_key, g_items) -\u003e\n    let g = List.rev g_items in\n    if (List.length g \u003e= 4) then (\n      __res0 := (0, [(\"city\", g_key); (\"num\", List.length g)]) :: !__res0)\n    else ()\n  ) !__groups0;\n  List.rev (List.map snd !__res0)) in\n  print_endline (__to_json big)",
      "line": 21,
      "col": 1,
      "endLine": 37,
      "endCol": 33,
      "snippet": "let () =\n  let people = [[(\"name\", \"Alice\"); (\"city\", \"Paris\")]; [(\"name\", \"Bob\"); (\"city\", \"Hanoi\")]; [(\"name\", \"Charlie\"); (\"city\", \"Paris\")]; [(\"name\", \"Diana\"); (\"city\", \"Hanoi\")]; [(\"name\", \"Eve\"); (\"city\", \"Paris\")]; [(\"name\", \"Frank\"); (\"city\", \"Hanoi\")]; [(\"name\", \"George\"); (\"city\", \"Paris\")]] in\n  let big = (let __groups0 = ref [] in\n  List.iter (fun p -\u003e\n    let key = (List.assoc \"city\" p) in\n    let cur = try List.assoc key !__groups0 with Not_found -\u003e [] in\n    __groups0 := (key, p :: cur) :: List.remove_assoc key !__groups0;\n  ) people;\n  let __res0 = ref [] in\n  List.iter (fun (g_key, g_items) -\u003e\n    let g = List.rev g_items in\n    if (List.length g \u003e= 4) then (\n      __res0 := (0, [(\"city\", g_key); (\"num\", List.length g)]) :: !__res0)\n    else ()\n  ) !__groups0;\n  List.rev (List.map snd !__res0)) in\n  print_endline (__to_json big);"
    }
  ],
  "types": [],
  "vars": []
}
