{
  "funcs": [],
  "prints": [
    {
      "expr": "let people = [[(\"name\", \"Alice\"); (\"age\", 30); (\"city\", \"Paris\")]; [(\"name\", \"Bob\"); (\"age\", 15); (\"city\", \"Hanoi\")]; [(\"name\", \"Charlie\"); (\"age\", 65); (\"city\", \"Paris\")]; [(\"name\", \"Diana\"); (\"age\", 45); (\"city\", \"Hanoi\")]; [(\"name\", \"Eve\"); (\"age\", 70); (\"city\", \"Paris\")]; [(\"name\", \"Frank\"); (\"age\", 22); (\"city\", \"Hanoi\")]] in\n  let stats = (let __groups0 = ref [] in\n  List.iter (fun person -\u003e\n    let key = (List.assoc \"city\" person) in\n    let cur = try List.assoc key !__groups0 with Not_found -\u003e [] in\n    __groups0 := (key, person :: cur) :: List.remove_assoc key !__groups0;\n  ) people;\n  let __res0 = ref [] in\n  List.iter (fun (g_key, g_items) -\u003e\n    let g = List.rev g_items in\n    __res0 := [(\"city\", g_key); (\"count\", List.length g); (\"avg_age\", ((List.fold_left (fun acc x -\u003e acc + x) 0 (List.map (fun p -\u003e (List.assoc \"age\" p)) g)) / List.length (List.map (fun p -\u003e (List.assoc \"age\" p)) g)))] :: !__res0\n  ) !__groups0;\n  List.rev !__res0) in\n  print_endline (String.concat \" \" (List.filter (fun s -\u003e s \u003c\u003e \"\") [\"--- People grouped by city ---\"]));\n  (try List.iter (fun s -\u003e\n    try\n  print_endline (String.concat \" \" (List.filter (fun s -\u003e s \u003c\u003e \"\") [(List.assoc \"city\" s); \": count =\"; string_of_int (List.assoc \"count\" s)); \", avg_age =\"; string_of_int (List.assoc \"avg_age\" s))]));\n    with Continue -\u003e ()) stats with Break -\u003e ())",
      "line": 3,
      "col": 1,
      "endLine": 21,
      "endCol": 49,
      "snippet": "let () =\n  let people = [[(\"name\", \"Alice\"); (\"age\", 30); (\"city\", \"Paris\")]; [(\"name\", \"Bob\"); (\"age\", 15); (\"city\", \"Hanoi\")]; [(\"name\", \"Charlie\"); (\"age\", 65); (\"city\", \"Paris\")]; [(\"name\", \"Diana\"); (\"age\", 45); (\"city\", \"Hanoi\")]; [(\"name\", \"Eve\"); (\"age\", 70); (\"city\", \"Paris\")]; [(\"name\", \"Frank\"); (\"age\", 22); (\"city\", \"Hanoi\")]] in\n  let stats = (let __groups0 = ref [] in\n  List.iter (fun person -\u003e\n    let key = (List.assoc \"city\" person) in\n    let cur = try List.assoc key !__groups0 with Not_found -\u003e [] in\n    __groups0 := (key, person :: cur) :: List.remove_assoc key !__groups0;\n  ) people;\n  let __res0 = ref [] in\n  List.iter (fun (g_key, g_items) -\u003e\n    let g = List.rev g_items in\n    __res0 := [(\"city\", g_key); (\"count\", List.length g); (\"avg_age\", ((List.fold_left (fun acc x -\u003e acc + x) 0 (List.map (fun p -\u003e (List.assoc \"age\" p)) g)) / List.length (List.map (fun p -\u003e (List.assoc \"age\" p)) g)))] :: !__res0\n  ) !__groups0;\n  List.rev !__res0) in\n  print_endline (String.concat \" \" (List.filter (fun s -\u003e s \u003c\u003e \"\") [\"--- People grouped by city ---\"]));\n  (try List.iter (fun s -\u003e\n    try\n  print_endline (String.concat \" \" (List.filter (fun s -\u003e s \u003c\u003e \"\") [(List.assoc \"city\" s); \": count =\"; string_of_int (List.assoc \"count\" s)); \", avg_age =\"; string_of_int (List.assoc \"avg_age\" s))]));\n    with Continue -\u003e ()) stats with Break -\u003e ())"
    }
  ],
  "types": [],
  "vars": []
}
