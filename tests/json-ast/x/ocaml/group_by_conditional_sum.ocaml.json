{
  "funcs": [],
  "prints": [
    {
      "expr": "let items = [[(\"cat\", \"a\"); (\"val\", 10); (\"flag\", true)]; [(\"cat\", \"a\"); (\"val\", 5); (\"flag\", false)]; [(\"cat\", \"b\"); (\"val\", 20); (\"flag\", true)]] in\n  let result = (let __groups0 = ref [] in\n  List.iter (fun i -\u003e\n    let key = (List.assoc \"cat\" i) in\n    let cur = try List.assoc key !__groups0 with Not_found -\u003e [] in\n    __groups0 := (key, i :: cur) :: List.remove_assoc key !__groups0;\n  ) items;\n  let __res0 = ref [] in\n  List.iter (fun (g_key, g_items) -\u003e\n    let g = List.rev g_items in\n    __res0 := [(\"cat\", g_key); (\"share\", ((List.fold_left (fun acc x -\u003e acc + x) 0 (List.map (fun x -\u003e if (List.assoc \"flag\" x) then (List.assoc \"val\" x) else 0) g)) / (List.fold_left (fun acc x -\u003e acc + x) 0 (List.map (fun x -\u003e (List.assoc \"val\" x)) g))))] :: !__res0\n  ) !__groups0;\n  List.rev !__res0) in\n  print_endline (String.concat \" \" (List.filter (fun s -\u003e s \u003c\u003e \"\") [result]))",
      "line": 3,
      "col": 1,
      "endLine": 17,
      "endCol": 79,
      "snippet": "let () =\n  let items = [[(\"cat\", \"a\"); (\"val\", 10); (\"flag\", true)]; [(\"cat\", \"a\"); (\"val\", 5); (\"flag\", false)]; [(\"cat\", \"b\"); (\"val\", 20); (\"flag\", true)]] in\n  let result = (let __groups0 = ref [] in\n  List.iter (fun i -\u003e\n    let key = (List.assoc \"cat\" i) in\n    let cur = try List.assoc key !__groups0 with Not_found -\u003e [] in\n    __groups0 := (key, i :: cur) :: List.remove_assoc key !__groups0;\n  ) items;\n  let __res0 = ref [] in\n  List.iter (fun (g_key, g_items) -\u003e\n    let g = List.rev g_items in\n    __res0 := [(\"cat\", g_key); (\"share\", ((List.fold_left (fun acc x -\u003e acc + x) 0 (List.map (fun x -\u003e if (List.assoc \"flag\" x) then (List.assoc \"val\" x) else 0) g)) / (List.fold_left (fun acc x -\u003e acc + x) 0 (List.map (fun x -\u003e (List.assoc \"val\" x)) g))))] :: !__res0\n  ) !__groups0;\n  List.rev !__res0) in\n  print_endline (String.concat \" \" (List.filter (fun s -\u003e s \u003c\u003e \"\") [result]));"
    }
  ],
  "types": [],
  "vars": []
}
