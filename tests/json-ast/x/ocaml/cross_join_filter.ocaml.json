{
  "funcs": [],
  "prints": [
    {
      "expr": "let nums = [1; 2; 3] in\n  let letters = [\"A\"; \"B\"] in\n  let pairs = (List.concat (List.map (fun n -\u003e (List.filter_map (fun l -\u003e if ((n mod 2) == 0) then Some ([(\"n\", n); (\"l\", l)]) else None) letters)) nums)) in\n  print_endline (String.concat \" \" (List.filter (fun s -\u003e s \u003c\u003e \"\") [\"--- Even pairs ---\"]));\n  (try List.iter (fun p -\u003e\n    try\n  print_endline (String.concat \" \" (List.filter (fun s -\u003e s \u003c\u003e \"\") [string_of_int (List.assoc \"n\" p)); (List.assoc \"l\" p)]));\n    with Continue -\u003e ()) pairs with Break -\u003e ())",
      "line": 3,
      "col": 1,
      "endLine": 11,
      "endCol": 49,
      "snippet": "let () =\n  let nums = [1; 2; 3] in\n  let letters = [\"A\"; \"B\"] in\n  let pairs = (List.concat (List.map (fun n -\u003e (List.filter_map (fun l -\u003e if ((n mod 2) == 0) then Some ([(\"n\", n); (\"l\", l)]) else None) letters)) nums)) in\n  print_endline (String.concat \" \" (List.filter (fun s -\u003e s \u003c\u003e \"\") [\"--- Even pairs ---\"]));\n  (try List.iter (fun p -\u003e\n    try\n  print_endline (String.concat \" \" (List.filter (fun s -\u003e s \u003c\u003e \"\") [string_of_int (List.assoc \"n\" p)); (List.assoc \"l\" p)]));\n    with Continue -\u003e ()) pairs with Break -\u003e ())"
    }
  ],
  "types": [],
  "vars": []
}
