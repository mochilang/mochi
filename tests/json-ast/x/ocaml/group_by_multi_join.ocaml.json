{
  "funcs": [],
  "prints": [
    {
      "expr": "let nations = [[(\"id\", 1); (\"name\", \"A\")]; [(\"id\", 2); (\"name\", \"B\")]] in\n  let suppliers = [[(\"id\", 1); (\"nation\", 1)]; [(\"id\", 2); (\"nation\", 2)]] in\n  let partsupp = [[(\"part\", 100); (\"supplier\", 1); (\"cost\", 10.0); (\"qty\", 2)]; [(\"part\", 100); (\"supplier\", 2); (\"cost\", 20.0); (\"qty\", 1)]; [(\"part\", 200); (\"supplier\", 1); (\"cost\", 5.0); (\"qty\", 3)]] in\n  let filtered = (List.concat_map (fun ps -\u003e (List.concat_map (fun s -\u003e (List.filter_map (fun n -\u003e if ((((List.assoc \"id\" s) == (List.assoc \"supplier\" ps)) \u0026\u0026 ((List.assoc \"id\" n) == (List.assoc \"nation\" s))) \u0026\u0026 ((List.assoc \"name\" n) == \"A\")) then Some ([(\"part\", (List.assoc \"part\" ps)); (\"value\", ((List.assoc \"cost\" ps) *. float_of_int ((List.assoc \"qty\" ps))))]) else None) nations)) suppliers)) partsupp) in\n  let grouped = (let __groups0 = ref [] in\n  List.iter (fun x -\u003e\n    let key = (List.assoc \"part\" x) in\n    let cur = try List.assoc key !__groups0 with Not_found -\u003e [] in\n    __groups0 := (key, x :: cur) :: List.remove_assoc key !__groups0;\n  ) filtered;\n  let __res0 = ref [] in\n  List.iter (fun (g_key, g_items) -\u003e\n    let g = List.rev g_items in\n    __res0 := (0, [(\"part\", g_key); (\"total\", (List.fold_left (fun acc x -\u003e acc +. x) 0.0 (List.map (fun r -\u003e (List.assoc \"value\" r)) g)))]) :: !__res0\n  ) !__groups0;\n  List.rev (List.map snd !__res0)) in\n  print_endline (String.concat \" \" [grouped])",
      "line": 3,
      "col": 1,
      "endLine": 20,
      "endCol": 47,
      "snippet": "let () =\n  let nations = [[(\"id\", 1); (\"name\", \"A\")]; [(\"id\", 2); (\"name\", \"B\")]] in\n  let suppliers = [[(\"id\", 1); (\"nation\", 1)]; [(\"id\", 2); (\"nation\", 2)]] in\n  let partsupp = [[(\"part\", 100); (\"supplier\", 1); (\"cost\", 10.0); (\"qty\", 2)]; [(\"part\", 100); (\"supplier\", 2); (\"cost\", 20.0); (\"qty\", 1)]; [(\"part\", 200); (\"supplier\", 1); (\"cost\", 5.0); (\"qty\", 3)]] in\n  let filtered = (List.concat_map (fun ps -\u003e (List.concat_map (fun s -\u003e (List.filter_map (fun n -\u003e if ((((List.assoc \"id\" s) == (List.assoc \"supplier\" ps)) \u0026\u0026 ((List.assoc \"id\" n) == (List.assoc \"nation\" s))) \u0026\u0026 ((List.assoc \"name\" n) == \"A\")) then Some ([(\"part\", (List.assoc \"part\" ps)); (\"value\", ((List.assoc \"cost\" ps) *. float_of_int ((List.assoc \"qty\" ps))))]) else None) nations)) suppliers)) partsupp) in\n  let grouped = (let __groups0 = ref [] in\n  List.iter (fun x -\u003e\n    let key = (List.assoc \"part\" x) in\n    let cur = try List.assoc key !__groups0 with Not_found -\u003e [] in\n    __groups0 := (key, x :: cur) :: List.remove_assoc key !__groups0;\n  ) filtered;\n  let __res0 = ref [] in\n  List.iter (fun (g_key, g_items) -\u003e\n    let g = List.rev g_items in\n    __res0 := (0, [(\"part\", g_key); (\"total\", (List.fold_left (fun acc x -\u003e acc +. x) 0.0 (List.map (fun r -\u003e (List.assoc \"value\" r)) g)))]) :: !__res0\n  ) !__groups0;\n  List.rev (List.map snd !__res0)) in\n  print_endline (String.concat \" \" [grouped]);"
    }
  ],
  "types": [],
  "vars": []
}
