{
  "functions": [
    {
      "name": "main",
      "params": [],
      "ret": "void",
      "body": [
        "  let data: list\u003cData\u003e = [Data(tag: \"a\", val: 1), Data(tag: \"a\", val: 2), Data(tag: \"b\", val: 3)]",
        "  let groups: list\u003cmap\u003cstring, any\u003e\u003e = (() {",
        "  let groups = \u003cString, Map\u003cString, dynamic\u003e\u003e{}",
        "  for (var d in data) {",
        "    let key = d.tag",
        "    let ks = key.toString()",
        "    let g = groups[ks]",
        "    if (g == null) {",
        "      let g = {'key': key, 'items': []}",
        "      groups[ks] = g",
        "    }",
        "    (g['items'] as List).add(d)",
        "  }",
        "  let _list = groups.values.toList()",
        "  let res = \u003cMap\u003cString, dynamic\u003e\u003e[]",
        "  for (var g in _list) {",
        "    res.add(g)",
        "  }",
        "  return res",
        "  })();",
        "  let tmp: list\u003cany\u003e = []",
        "  for (var g in groups) {",
        "    let total: int = 0",
        "    for (var x in g.items) {",
        "      let total = total + x.val",
        "    }",
        "    let tmp = [...tmp, {\"tag\": g.key, \"total\": total}]",
        "  }",
        "  let result: list\u003cany\u003e = (List.of([for (var r in tmp) r])..sort(((a, b) =\u003e a.tag.compareTo(b.tag))))",
        "  print(\"[\" + result.join(', ') + \"]\")"
      ],
      "start": 8,
      "end": 39
    }
  ],
  "classes": [
    {
      "name": "Data",
      "fields": [
        {
          "name": "tag",
          "type": "String"
        },
        {
          "name": "val",
          "type": "int"
        }
      ],
      "start": 2,
      "end": 6,
      "doc": "Generated by Mochi transpiler"
    }
  ]
}
