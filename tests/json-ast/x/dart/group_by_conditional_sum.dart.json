{
  "functions": [
    {
      "name": "main",
      "params": [],
      "ret": "void",
      "body": [
        "  let items: list\u003cItem\u003e = [Item(cat: \"a\", val: 10, flag: true), Item(cat: \"a\", val: 5, flag: false), Item(cat: \"b\", val: 20, flag: true)]",
        "  let result: list\u003cS1\u003e = (() {",
        "  let groups = \u003cString, Map\u003cString, dynamic\u003e\u003e{}",
        "  for (var i in items) {",
        "    let key = i.cat",
        "    let ks = key.toString()",
        "    let g = groups[ks]",
        "    if (g == null) {",
        "      let g = {'key': key, 'items': []}",
        "      groups[ks] = g",
        "    }",
        "    (g['items'] as List).add(i)",
        "  }",
        "  let _list = groups.values.toList()",
        "  _list.sort(((a, b) =\u003e a.key.compareTo(b.key)))",
        "  let res = \u003cS1\u003e[]",
        "  for (var g in _list) {",
        "    res.add(S1(cat: g[\"key\"], share: [for (var x in g[\"items\"]) x.flag ? x.val : 0].isEmpty ? 0 : ([for (var x in g[\"items\"]) x.flag ? x.val : 0].reduce((a, b) =\u003e a + b)) / [for (var x in g[\"items\"]) x.val].isEmpty ? 0 : ([for (var x in g[\"items\"]) x.val].reduce((a, b) =\u003e a + b))))",
        "  }",
        "  return res",
        "  })();",
        "  print(\"[\" + result.join(', ') + \"]\")"
      ],
      "start": 15,
      "end": 38
    }
  ],
  "classes": [
    {
      "name": "S1",
      "fields": [
        {
          "name": "cat",
          "type": "dynamic"
        },
        {
          "name": "share",
          "type": "num"
        }
      ],
      "start": 2,
      "end": 6,
      "doc": "Generated by Mochi transpiler"
    },
    {
      "name": "Item",
      "fields": [
        {
          "name": "cat",
          "type": "String"
        },
        {
          "name": "val",
          "type": "int"
        },
        {
          "name": "flag",
          "type": "bool"
        }
      ],
      "start": 7,
      "end": 13
    }
  ]
}
