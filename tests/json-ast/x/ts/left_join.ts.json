{
  "nodes": [
    {
      "kind": "type",
      "name": "Result",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "id",
          "typ": "number"
        },
        {
          "name": "name",
          "typ": "string"
        }
      ],
      "start": 3,
      "end": 3,
      "endCol": 52,
      "snippet": "export interface Result { id: number; name: string }",
      "startOff": 61,
      "endOff": 113,
      "doc": "// Generated by Mochi v0.10.35 on 2025-07-22 14:24:20 GMT+7"
    },
    {
      "kind": "type",
      "name": "Customer",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "id",
          "typ": "number"
        },
        {
          "name": "name",
          "typ": "string"
        }
      ],
      "start": 4,
      "end": 4,
      "endCol": 54,
      "snippet": "export interface Customer { id: number; name: string }",
      "startOff": 114,
      "endOff": 168
    },
    {
      "kind": "type",
      "name": "Order",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "id",
          "typ": "number"
        },
        {
          "name": "customerId",
          "typ": "number"
        },
        {
          "name": "total",
          "typ": "number"
        }
      ],
      "start": 5,
      "end": 5,
      "endCol": 72,
      "snippet": "export interface Order { id: number; customerId: number; total: number }",
      "startOff": 169,
      "endOff": 241
    },
    {
      "kind": "func",
      "name": "__show",
      "node": "FunctionDeclaration",
      "params": [
        {
          "name": "v",
          "typ": "any"
        },
        {
          "name": "nest",
          "typ": "boolean"
        }
      ],
      "body": "\n  if (v === null || v === undefined) return 'None';\n  if (Array.isArray(v)) return '[' + v.map(x =\u003e __show(x, true)).join(', ') + ']';\n  if (typeof v === 'object') return '{' + Object.keys(v).map(k =\u003e \"'\" + k + \"': \" + __show(v[k], true)).join(', ') + '}';\n  if (typeof v === 'string') return nest ? \"'\" + v + \"'\" : v;\n  return String(v);\n",
      "bodyNodes": [
        {
          "kind": "if",
          "name": "",
          "node": "IfStatement",
          "body": "return 'None';",
          "cond": "v === null || v === undefined",
          "bodyNodes": [
            {
              "kind": "return",
              "name": "",
              "node": "ReturnStatement",
              "expr": "'None'",
              "start": 1,
              "end": 1,
              "endCol": 14,
              "snippet": "return 'None';",
              "endOff": 14
            }
          ],
          "start": 2,
          "startCol": 2,
          "end": 2,
          "endCol": 51,
          "snippet": "if (v === null || v === undefined) return 'None';",
          "startOff": 3,
          "endOff": 52
        },
        {
          "kind": "if",
          "name": "",
          "node": "IfStatement",
          "body": "return '[' + v.map(x =\u003e __show(x, true)).join(', ') + ']';",
          "cond": "Array.isArray(v)",
          "bodyNodes": [
            {
              "kind": "return",
              "name": "",
              "node": "ReturnStatement",
              "expr": "'[' + v.map(x =\u003e __show(x, true)).join(', ') + ']'",
              "start": 1,
              "end": 1,
              "endCol": 58,
              "snippet": "return '[' + v.map(x =\u003e __show(x, true)).join(', ') + ']';",
              "endOff": 58
            }
          ],
          "start": 3,
          "startCol": 2,
          "end": 3,
          "endCol": 82,
          "snippet": "if (Array.isArray(v)) return '[' + v.map(x =\u003e __show(x, true)).join(', ') + ']';",
          "startOff": 55,
          "endOff": 135
        },
        {
          "kind": "if",
          "name": "",
          "node": "IfStatement",
          "body": "return '{' + Object.keys(v).map(k =\u003e \"'\" + k + \"': \" + __show(v[k], true)).join(', ') + '}';",
          "cond": "typeof v === 'object'",
          "bodyNodes": [
            {
              "kind": "return",
              "name": "",
              "node": "ReturnStatement",
              "expr": "'{' + Object.keys(v).map(k =\u003e \"'\" + k + \"': \" + __show(v[k], true)).join(', ') + '}'",
              "start": 1,
              "end": 1,
              "endCol": 92,
              "snippet": "return '{' + Object.keys(v).map(k =\u003e \"'\" + k + \"': \" + __show(v[k], true)).join(', ') + '}';",
              "endOff": 92
            }
          ],
          "start": 4,
          "startCol": 2,
          "end": 4,
          "endCol": 121,
          "snippet": "if (typeof v === 'object') return '{' + Object.keys(v).map(k =\u003e \"'\" + k + \"': \" + __show(v[k], true)).join(', ') + '}';",
          "startOff": 138,
          "endOff": 257
        },
        {
          "kind": "if",
          "name": "",
          "node": "IfStatement",
          "body": "return nest ? \"'\" + v + \"'\" : v;",
          "cond": "typeof v === 'string'",
          "bodyNodes": [
            {
              "kind": "return",
              "name": "",
              "node": "ReturnStatement",
              "expr": "nest ? \"'\" + v + \"'\" : v",
              "start": 1,
              "end": 1,
              "endCol": 32,
              "snippet": "return nest ? \"'\" + v + \"'\" : v;",
              "endOff": 32
            }
          ],
          "start": 5,
          "startCol": 2,
          "end": 5,
          "endCol": 61,
          "snippet": "if (typeof v === 'string') return nest ? \"'\" + v + \"'\" : v;",
          "startOff": 260,
          "endOff": 319
        },
        {
          "kind": "return",
          "name": "",
          "node": "ReturnStatement",
          "expr": "String(v)",
          "start": 6,
          "startCol": 2,
          "end": 6,
          "endCol": 19,
          "snippet": "return String(v);",
          "startOff": 322,
          "endOff": 339
        }
      ],
      "start": 6,
      "end": 12,
      "endCol": 1,
      "snippet": "function __show(v:any, nest?:boolean){\n  if (v === null || v === undefined) return 'None';\n  if (Array.isArray(v)) return '[' + v.map(x =\u003e __show(x, true)).join(', ') + ']';\n  if (typeof v === 'object') return '{' + Object.keys(v).map(k =\u003e \"'\" + k + \"': \" + __show(v[k], true)).join(', ') + '}';\n  if (typeof v === 'string') return nest ? \"'\" + v + \"'\" : v;\n  return String(v);\n}",
      "startOff": 242,
      "endOff": 621
    },
    {
      "kind": "var",
      "name": "customers",
      "node": "VariableDeclaration",
      "ret": "Customer[]",
      "value": "[{id: 1, name: \"Alice\"}, {id: 2, name: \"Bob\"}]",
      "start": 13,
      "end": 13,
      "endCol": 77,
      "snippet": "const customers: Customer[] = [{id: 1, name: \"Alice\"}, {id: 2, name: \"Bob\"}];",
      "startOff": 622,
      "endOff": 699
    },
    {
      "kind": "var",
      "name": "orders",
      "node": "VariableDeclaration",
      "ret": "Order[]",
      "value": "[{id: 100, customerId: 1, total: 250}, {id: 101, customerId: 3, total: 80}]",
      "start": 14,
      "end": 14,
      "endCol": 100,
      "snippet": "const orders: Order[] = [{id: 100, customerId: 1, total: 250}, {id: 101, customerId: 3, total: 80}];",
      "startOff": 700,
      "endOff": 800
    },
    {
      "kind": "var",
      "name": "result",
      "node": "VariableDeclaration",
      "ret": "Result[]",
      "value": "(() =\u003e {\n  const result: Result[] = []\n  for (const o of orders) {\n    let matched = false\n    for (const c of customers) {\n      if (!((o[\"customerId\"] == c[\"id\"]))) continue\n      matched = true\n      result.push({orderId: o[\"id\"], customer: c, total: o[\"total\"]})\n    }\n    if (!matched) result.push({orderId: o[\"id\"], customer: null, total: o[\"total\"]})\n  }\n  return result\n})()",
      "start": 15,
      "end": 27,
      "endCol": 5,
      "snippet": "const result: Result[] = (() =\u003e {\n  const result: Result[] = []\n  for (const o of orders) {\n    let matched = false\n    for (const c of customers) {\n      if (!((o[\"customerId\"] == c[\"id\"]))) continue\n      matched = true\n      result.push({orderId: o[\"id\"], customer: c, total: o[\"total\"]})\n    }\n    if (!matched) result.push({orderId: o[\"id\"], customer: null, total: o[\"total\"]})\n  }\n  return result\n})();",
      "startOff": 801,
      "endOff": 1209
    },
    {
      "kind": "expr",
      "name": "",
      "node": "ExpressionStatement",
      "expr": "console.log([\"--- Left Join ---\"].map(v =\u003e __show(v)).join(\" \"))",
      "start": 28,
      "end": 28,
      "endCol": 65,
      "snippet": "console.log([\"--- Left Join ---\"].map(v =\u003e __show(v)).join(\" \"));",
      "startOff": 1210,
      "endOff": 1275
    },
    {
      "kind": "forof",
      "name": "",
      "node": "ForOfStatement",
      "body": "\n  console.log([\"Order\", entry[\"orderId\"], \"customer\", entry[\"customer\"], \"total\", entry[\"total\"]].map(v =\u003e __show(v)).join(\" \"));\n",
      "iter": "entry",
      "list": "result",
      "bodyNodes": [
        {
          "kind": "expr",
          "name": "",
          "node": "ExpressionStatement",
          "expr": "console.log([\"Order\", entry[\"orderId\"], \"customer\", entry[\"customer\"], \"total\", entry[\"total\"]].map(v =\u003e __show(v)).join(\" \"))",
          "start": 2,
          "startCol": 2,
          "end": 2,
          "endCol": 129,
          "snippet": "console.log([\"Order\", entry[\"orderId\"], \"customer\", entry[\"customer\"], \"total\", entry[\"total\"]].map(v =\u003e __show(v)).join(\" \"));",
          "startOff": 3,
          "endOff": 130
        }
      ],
      "start": 29,
      "end": 31,
      "endCol": 1,
      "snippet": "for (const entry of result) {\n  console.log([\"Order\", entry[\"orderId\"], \"customer\", entry[\"customer\"], \"total\", entry[\"total\"]].map(v =\u003e __show(v)).join(\" \"));\n}",
      "startOff": 1276,
      "endOff": 1437
    }
  ]
}
