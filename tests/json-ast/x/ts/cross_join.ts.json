{
  "nodes": [
    {
      "kind": "type",
      "name": "Result",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "id",
          "typ": "number"
        },
        {
          "name": "name",
          "typ": "string"
        }
      ],
      "start": 3,
      "end": 3,
      "endCol": 52,
      "snippet": "export interface Result { id: number; name: string }",
      "startOff": 61,
      "endOff": 113,
      "doc": "// Generated by Mochi v0.10.35 on 2025-07-22 14:07:01 GMT+7"
    },
    {
      "kind": "type",
      "name": "Customer",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "id",
          "typ": "number"
        },
        {
          "name": "name",
          "typ": "string"
        }
      ],
      "start": 4,
      "end": 4,
      "endCol": 54,
      "snippet": "export interface Customer { id: number; name: string }",
      "startOff": 114,
      "endOff": 168
    },
    {
      "kind": "type",
      "name": "Order",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "id",
          "typ": "number"
        },
        {
          "name": "customerId",
          "typ": "number"
        },
        {
          "name": "total",
          "typ": "number"
        }
      ],
      "start": 5,
      "end": 5,
      "endCol": 72,
      "snippet": "export interface Order { id: number; customerId: number; total: number }",
      "startOff": 169,
      "endOff": 241
    },
    {
      "kind": "var",
      "name": "customers",
      "node": "VariableDeclaration",
      "ret": "Customer[]",
      "value": "[{id: 1, name: \"Alice\"}, {id: 2, name: \"Bob\"}, {id: 3, name: \"Charlie\"}]",
      "start": 6,
      "end": 6,
      "endCol": 103,
      "snippet": "const customers: Customer[] = [{id: 1, name: \"Alice\"}, {id: 2, name: \"Bob\"}, {id: 3, name: \"Charlie\"}];",
      "startOff": 242,
      "endOff": 345
    },
    {
      "kind": "var",
      "name": "orders",
      "node": "VariableDeclaration",
      "ret": "Order[]",
      "value": "[{id: 100, customerId: 1, total: 250}, {id: 101, customerId: 2, total: 125}, {id: 102, customerId: 1, total: 300}]",
      "start": 7,
      "end": 7,
      "endCol": 139,
      "snippet": "const orders: Order[] = [{id: 100, customerId: 1, total: 250}, {id: 101, customerId: 2, total: 125}, {id: 102, customerId: 1, total: 300}];",
      "startOff": 346,
      "endOff": 485
    },
    {
      "kind": "var",
      "name": "result",
      "node": "VariableDeclaration",
      "ret": "Result[]",
      "value": "(() =\u003e {\n  let _items = orders.map(v =\u003e [v])\n  { const _next = []\n    for (const it of _items) {\n      for (const c of customers) { _next.push([...it, c]) }\n    }\n    _items = _next }\n  let _rows = _items\n  const result: Result[] = []\n  for (const r of _rows) { const [o, c] = r; result.push({orderId: o[\"id\"], orderCustomerId: o[\"customerId\"], pairedCustomerName: c[\"name\"], orderTotal: o[\"total\"]}) }\n  return result\n})()",
      "start": 8,
      "end": 19,
      "endCol": 5,
      "snippet": "const result: Result[] = (() =\u003e {\n  let _items = orders.map(v =\u003e [v])\n  { const _next = []\n    for (const it of _items) {\n      for (const c of customers) { _next.push([...it, c]) }\n    }\n    _items = _next }\n  let _rows = _items\n  const result: Result[] = []\n  for (const r of _rows) { const [o, c] = r; result.push({orderId: o[\"id\"], orderCustomerId: o[\"customerId\"], pairedCustomerName: c[\"name\"], orderTotal: o[\"total\"]}) }\n  return result\n})();",
      "startOff": 486,
      "endOff": 935
    },
    {
      "kind": "expr",
      "name": "",
      "node": "ExpressionStatement",
      "expr": "console.log(String(\"--- Cross Join: All order-customer pairs ---\"))",
      "start": 20,
      "end": 20,
      "endCol": 68,
      "snippet": "console.log(String(\"--- Cross Join: All order-customer pairs ---\"));",
      "startOff": 936,
      "endOff": 1004
    },
    {
      "kind": "forof",
      "name": "",
      "node": "ForOfStatement",
      "body": "\n  console.log((String(\"Order\") + \" \" + String(entry[\"orderId\"]) + \" \" + String(\"(customerId:\") + \" \" + String(entry[\"orderCustomerId\"]) + \" \" + String(\", total: $\") + \" \" + String(entry[\"orderTotal\"]) + \" \" + String(\") paired with\") + \" \" + String(entry[\"pairedCustomerName\"])).trim());\n",
      "iter": "entry",
      "list": "result",
      "bodyNodes": [
        {
          "kind": "expr",
          "name": "",
          "node": "ExpressionStatement",
          "expr": "console.log((String(\"Order\") + \" \" + String(entry[\"orderId\"]) + \" \" + String(\"(customerId:\") + \" \" + String(entry[\"orderCustomerId\"]) + \" \" + String(\", total: $\") + \" \" + String(entry[\"orderTotal\"]) + \" \" + String(\") paired with\") + \" \" + String(entry[\"pairedCustomerName\"])).trim())",
          "start": 2,
          "startCol": 2,
          "end": 2,
          "endCol": 286,
          "snippet": "console.log((String(\"Order\") + \" \" + String(entry[\"orderId\"]) + \" \" + String(\"(customerId:\") + \" \" + String(entry[\"orderCustomerId\"]) + \" \" + String(\", total: $\") + \" \" + String(entry[\"orderTotal\"]) + \" \" + String(\") paired with\") + \" \" + String(entry[\"pairedCustomerName\"])).trim());",
          "startOff": 3,
          "endOff": 287
        }
      ],
      "start": 21,
      "end": 23,
      "endCol": 1,
      "snippet": "for (const entry of result) {\n  console.log((String(\"Order\") + \" \" + String(entry[\"orderId\"]) + \" \" + String(\"(customerId:\") + \" \" + String(entry[\"orderCustomerId\"]) + \" \" + String(\", total: $\") + \" \" + String(entry[\"orderTotal\"]) + \" \" + String(\") paired with\") + \" \" + String(entry[\"pairedCustomerName\"])).trim());\n}",
      "startOff": 1005,
      "endOff": 1323
    }
  ]
}
