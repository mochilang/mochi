{
  "nodes": [
    {
      "kind": "type",
      "name": "Result",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "tag",
          "typ": "string"
        },
        {
          "name": "val",
          "typ": "number"
        }
      ],
      "start": 3,
      "end": 3,
      "endCol": 52,
      "snippet": "export interface Result { tag: string; val: number }",
      "startOff": 61,
      "endOff": 113,
      "doc": "// Generated by Mochi v0.10.35 on 2025-07-22 14:07:04 GMT+7"
    },
    {
      "kind": "type",
      "name": "Data",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "tag",
          "typ": "string"
        },
        {
          "name": "val",
          "typ": "number"
        }
      ],
      "start": 4,
      "end": 4,
      "endCol": 50,
      "snippet": "export interface Data { tag: string; val: number }",
      "startOff": 114,
      "endOff": 164
    },
    {
      "kind": "var",
      "name": "data",
      "node": "VariableDeclaration",
      "ret": "Data[]",
      "value": "[{tag: \"a\", val: 1}, {tag: \"a\", val: 2}, {tag: \"b\", val: 3}]",
      "start": 5,
      "end": 5,
      "endCol": 82,
      "snippet": "const data: Data[] = [{tag: \"a\", val: 1}, {tag: \"a\", val: 2}, {tag: \"b\", val: 3}];",
      "startOff": 165,
      "endOff": 247
    },
    {
      "kind": "var",
      "name": "groups",
      "node": "VariableDeclaration",
      "ret": "any[]",
      "value": "(() =\u003e {\n  const groups = new Map\u003cstring, {key: any; items: any[]}\u003e()\n  for (const d of data) {\n    const k = d[\"tag\"]\n    const ks = JSON.stringify(k)\n    let g = groups.get(ks)\n    if (!g) { g = {key: k, items: []}; groups.set(ks, g) }\n    g.items.push(d)\n  }\n  let ordered = Array.from(groups.values())\n  const result = []\n  for (const g of ordered) {\n    result.push(g)\n  }\n  return result\n})()",
      "start": 6,
      "end": 21,
      "endCol": 5,
      "snippet": "const groups: any[] = (() =\u003e {\n  const groups = new Map\u003cstring, {key: any; items: any[]}\u003e()\n  for (const d of data) {\n    const k = d[\"tag\"]\n    const ks = JSON.stringify(k)\n    let g = groups.get(ks)\n    if (!g) { g = {key: k, items: []}; groups.set(ks, g) }\n    g.items.push(d)\n  }\n  let ordered = Array.from(groups.values())\n  const result = []\n  for (const g of ordered) {\n    result.push(g)\n  }\n  return result\n})();",
      "startOff": 248,
      "endOff": 669
    },
    {
      "kind": "var",
      "name": "tmp",
      "node": "VariableDeclaration",
      "ret": "any[]",
      "value": "[]",
      "start": 22,
      "end": 22,
      "endCol": 20,
      "snippet": "let tmp: any[] = [];",
      "startOff": 670,
      "endOff": 690
    },
    {
      "kind": "forof",
      "name": "",
      "node": "ForOfStatement",
      "body": "\n  let total = 0;\n  for (const x of g[\"items\"]) {\n    total = (total + x[\"val\"]);\n  }\n  tmp = [...tmp, {tag: g[\"key\"], total}];\n",
      "iter": "g",
      "list": "groups",
      "bodyNodes": [
        {
          "kind": "var",
          "name": "total",
          "node": "VariableDeclaration",
          "value": "0",
          "start": 2,
          "startCol": 2,
          "end": 2,
          "endCol": 16,
          "snippet": "let total = 0;",
          "startOff": 3,
          "endOff": 17
        },
        {
          "kind": "forof",
          "name": "",
          "node": "ForOfStatement",
          "body": "\n    total = (total + x[\"val\"]);\n  ",
          "iter": "x",
          "list": "g[\"items\"]",
          "bodyNodes": [
            {
              "kind": "expr",
              "name": "",
              "node": "ExpressionStatement",
              "expr": "total = (total + x[\"val\"])",
              "start": 2,
              "startCol": 4,
              "end": 2,
              "endCol": 31,
              "snippet": "total = (total + x[\"val\"]);",
              "startOff": 5,
              "endOff": 32
            }
          ],
          "start": 3,
          "startCol": 2,
          "end": 5,
          "endCol": 3,
          "snippet": "for (const x of g[\"items\"]) {\n    total = (total + x[\"val\"]);\n  }",
          "startOff": 20,
          "endOff": 85
        },
        {
          "kind": "expr",
          "name": "",
          "node": "ExpressionStatement",
          "expr": "tmp = [...tmp, {tag: g[\"key\"], total}]",
          "start": 6,
          "startCol": 2,
          "end": 6,
          "endCol": 41,
          "snippet": "tmp = [...tmp, {tag: g[\"key\"], total}];",
          "startOff": 88,
          "endOff": 127
        }
      ],
      "start": 23,
      "end": 29,
      "endCol": 1,
      "snippet": "for (const g of groups) {\n  let total = 0;\n  for (const x of g[\"items\"]) {\n    total = (total + x[\"val\"]);\n  }\n  tmp = [...tmp, {tag: g[\"key\"], total}];\n}",
      "startOff": 691,
      "endOff": 845
    },
    {
      "kind": "var",
      "name": "result",
      "node": "VariableDeclaration",
      "ret": "any[]",
      "value": "(() =\u003e {\n  const result = []\n  for (const r of tmp) {\n    result.push({k: r[\"tag\"], v: r})\n  }\n  result.sort((a, b) =\u003e {const ak = a.k; const bk = b.k; if (ak \u003c bk) return -1; if (ak \u003e bk) return 1; const sak = JSON.stringify(ak); const sbk = JSON.stringify(bk); return sak \u003c sbk ? -1 : sak \u003e sbk ? 1 : 0})\n  const out = result.map(r =\u003e r.v)\n  return out\n})()",
      "start": 30,
      "end": 38,
      "endCol": 5,
      "snippet": "const result: any[] = (() =\u003e {\n  const result = []\n  for (const r of tmp) {\n    result.push({k: r[\"tag\"], v: r})\n  }\n  result.sort((a, b) =\u003e {const ak = a.k; const bk = b.k; if (ak \u003c bk) return -1; if (ak \u003e bk) return 1; const sak = JSON.stringify(ak); const sbk = JSON.stringify(bk); return sak \u003c sbk ? -1 : sak \u003e sbk ? 1 : 0})\n  const out = result.map(r =\u003e r.v)\n  return out\n})();",
      "startOff": 846,
      "endOff": 1228
    },
    {
      "kind": "expr",
      "name": "",
      "node": "ExpressionStatement",
      "expr": "console.log(String(\"[\" + (result).join(\", \") + \"]\"))",
      "start": 39,
      "end": 39,
      "endCol": 53,
      "snippet": "console.log(String(\"[\" + (result).join(\", \") + \"]\"));",
      "startOff": 1229,
      "endOff": 1282
    }
  ]
}
