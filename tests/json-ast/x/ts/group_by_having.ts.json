{
  "nodes": [
    {
      "kind": "type",
      "name": "Result",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "name",
          "typ": "string"
        },
        {
          "name": "city",
          "typ": "string"
        }
      ],
      "start": 3,
      "end": 3,
      "endCol": 54,
      "snippet": "export interface Result { name: string; city: string }",
      "startOff": 61,
      "endOff": 115,
      "doc": "// Generated by Mochi v0.10.35 on 2025-07-22 14:07:03 GMT+7"
    },
    {
      "kind": "type",
      "name": "People",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "name",
          "typ": "string"
        },
        {
          "name": "city",
          "typ": "string"
        }
      ],
      "start": 4,
      "end": 4,
      "endCol": 54,
      "snippet": "export interface People { name: string; city: string }",
      "startOff": 116,
      "endOff": 170
    },
    {
      "kind": "var",
      "name": "people",
      "node": "VariableDeclaration",
      "ret": "People[]",
      "value": "[{name: \"Alice\", city: \"Paris\"}, {name: \"Bob\", city: \"Hanoi\"}, {name: \"Charlie\", city: \"Paris\"}, {name: \"Diana\", city: \"Hanoi\"}, {name: \"Eve\", city: \"Paris\"}, {name: \"Frank\", city: \"Hanoi\"}, {name: \"George\", city: \"Paris\"}]",
      "start": 5,
      "end": 5,
      "endCol": 249,
      "snippet": "const people: People[] = [{name: \"Alice\", city: \"Paris\"}, {name: \"Bob\", city: \"Hanoi\"}, {name: \"Charlie\", city: \"Paris\"}, {name: \"Diana\", city: \"Hanoi\"}, {name: \"Eve\", city: \"Paris\"}, {name: \"Frank\", city: \"Hanoi\"}, {name: \"George\", city: \"Paris\"}];",
      "startOff": 171,
      "endOff": 420
    },
    {
      "kind": "var",
      "name": "big",
      "node": "VariableDeclaration",
      "ret": "Record\u003cstring, any\u003e[]",
      "value": "(() =\u003e {\n  const groups = new Map\u003cstring, {key: any; items: any[]}\u003e()\n  for (const p of people) {\n    const k = p[\"city\"]\n    const ks = JSON.stringify(k)\n    let g = groups.get(ks)\n    if (!g) { g = {key: k, items: []}; groups.set(ks, g) }\n    g.items.push(p)\n  }\n  let ordered = Array.from(groups.values())\n  const result: Result[] = []\n  for (const g of ordered) {\n    if (((Array.isArray(g[\"items\"]) || typeof g[\"items\"] === 'string' ? g[\"items\"].length : Object.keys(g[\"items\"] ?? {}).length) \u003e= 4)) {\n      result.push({city: g[\"key\"], num: (Array.isArray(g[\"items\"]) || typeof g[\"items\"] === 'string' ? g[\"items\"].length : Object.keys(g[\"items\"] ?? {}).length)})\n    }\n  }\n  return result\n})()",
      "start": 6,
      "end": 23,
      "endCol": 5,
      "snippet": "const big: Record\u003cstring, any\u003e[] = (() =\u003e {\n  const groups = new Map\u003cstring, {key: any; items: any[]}\u003e()\n  for (const p of people) {\n    const k = p[\"city\"]\n    const ks = JSON.stringify(k)\n    let g = groups.get(ks)\n    if (!g) { g = {key: k, items: []}; groups.set(ks, g) }\n    g.items.push(p)\n  }\n  let ordered = Array.from(groups.values())\n  const result: Result[] = []\n  for (const g of ordered) {\n    if (((Array.isArray(g[\"items\"]) || typeof g[\"items\"] === 'string' ? g[\"items\"].length : Object.keys(g[\"items\"] ?? {}).length) \u003e= 4)) {\n      result.push({city: g[\"key\"], num: (Array.isArray(g[\"items\"]) || typeof g[\"items\"] === 'string' ? g[\"items\"].length : Object.keys(g[\"items\"] ?? {}).length)})\n    }\n  }\n  return result\n})();",
      "startOff": 421,
      "endOff": 1157
    },
    {
      "kind": "expr",
      "name": "",
      "node": "ExpressionStatement",
      "expr": "console.log(JSON.stringify(big, null, 2))",
      "start": 24,
      "end": 24,
      "endCol": 42,
      "snippet": "console.log(JSON.stringify(big, null, 2));",
      "startOff": 1158,
      "endOff": 1200
    }
  ]
}
