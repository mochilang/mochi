{
  "nodes": [
    {
      "kind": "type",
      "name": "Result",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "name",
          "typ": "string"
        },
        {
          "name": "age",
          "typ": "number"
        },
        {
          "name": "city",
          "typ": "string"
        }
      ],
      "start": 3,
      "end": 3,
      "endCol": 67,
      "snippet": "export interface Result { name: string; age: number; city: string }",
      "startOff": 61,
      "endOff": 128,
      "doc": "// Generated by Mochi v0.10.35 on 2025-07-22 14:07:03 GMT+7"
    },
    {
      "kind": "type",
      "name": "People",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "name",
          "typ": "string"
        },
        {
          "name": "age",
          "typ": "number"
        },
        {
          "name": "city",
          "typ": "string"
        }
      ],
      "start": 4,
      "end": 4,
      "endCol": 67,
      "snippet": "export interface People { name: string; age: number; city: string }",
      "startOff": 129,
      "endOff": 196
    },
    {
      "kind": "var",
      "name": "people",
      "node": "VariableDeclaration",
      "ret": "People[]",
      "value": "[{name: \"Alice\", age: 30, city: \"Paris\"}, {name: \"Bob\", age: 15, city: \"Hanoi\"}, {name: \"Charlie\", age: 65, city: \"Paris\"}, {name: \"Diana\", age: 45, city: \"Hanoi\"}, {name: \"Eve\", age: 70, city: \"Paris\"}, {name: \"Frank\", age: 22, city: \"Hanoi\"}]",
      "start": 5,
      "end": 5,
      "endCol": 270,
      "snippet": "const people: People[] = [{name: \"Alice\", age: 30, city: \"Paris\"}, {name: \"Bob\", age: 15, city: \"Hanoi\"}, {name: \"Charlie\", age: 65, city: \"Paris\"}, {name: \"Diana\", age: 45, city: \"Hanoi\"}, {name: \"Eve\", age: 70, city: \"Paris\"}, {name: \"Frank\", age: 22, city: \"Hanoi\"}];",
      "startOff": 197,
      "endOff": 467
    },
    {
      "kind": "var",
      "name": "stats",
      "node": "VariableDeclaration",
      "ret": "Record\u003cstring, any\u003e[]",
      "value": "(() =\u003e {\n  const groups = new Map\u003cstring, {key: any; items: any[]}\u003e()\n  for (const person of people) {\n    const k = person[\"city\"]\n    const ks = JSON.stringify(k)\n    let g = groups.get(ks)\n    if (!g) { g = {key: k, items: []}; groups.set(ks, g) }\n    g.items.push(person)\n  }\n  let ordered = Array.from(groups.values())\n  const result: Result[] = []\n  for (const g of ordered) {\n    result.push({city: g[\"key\"], count: (Array.isArray(g[\"items\"]) || typeof g[\"items\"] === 'string' ? g[\"items\"].length : Object.keys(g[\"items\"] ?? {}).length), avg_age: (() =\u003e { const arr = (() =\u003e {\n  const result = []\n  for (const p of g[\"items\"]) {\n    result.push(p[\"age\"])\n  }\n  const out = result\n  return out\n})(); return (arr.reduce((a, b) =\u003e a + b, 0.0) / arr.length).toFixed(1); })()})\n  }\n  return result\n})()",
      "start": 6,
      "end": 28,
      "endCol": 5,
      "snippet": "const stats: Record\u003cstring, any\u003e[] = (() =\u003e {\n  const groups = new Map\u003cstring, {key: any; items: any[]}\u003e()\n  for (const person of people) {\n    const k = person[\"city\"]\n    const ks = JSON.stringify(k)\n    let g = groups.get(ks)\n    if (!g) { g = {key: k, items: []}; groups.set(ks, g) }\n    g.items.push(person)\n  }\n  let ordered = Array.from(groups.values())\n  const result: Result[] = []\n  for (const g of ordered) {\n    result.push({city: g[\"key\"], count: (Array.isArray(g[\"items\"]) || typeof g[\"items\"] === 'string' ? g[\"items\"].length : Object.keys(g[\"items\"] ?? {}).length), avg_age: (() =\u003e { const arr = (() =\u003e {\n  const result = []\n  for (const p of g[\"items\"]) {\n    result.push(p[\"age\"])\n  }\n  const out = result\n  return out\n})(); return (arr.reduce((a, b) =\u003e a + b, 0.0) / arr.length).toFixed(1); })()})\n  }\n  return result\n})();",
      "startOff": 468,
      "endOff": 1310
    },
    {
      "kind": "expr",
      "name": "",
      "node": "ExpressionStatement",
      "expr": "console.log(String(\"--- People grouped by city ---\"))",
      "start": 29,
      "end": 29,
      "endCol": 54,
      "snippet": "console.log(String(\"--- People grouped by city ---\"));",
      "startOff": 1311,
      "endOff": 1365
    },
    {
      "kind": "forof",
      "name": "",
      "node": "ForOfStatement",
      "body": "\n  console.log((String(s[\"city\"]) + \" \" + String(\": count =\") + \" \" + String(s[\"count\"]) + \" \" + String(\", avg_age =\") + \" \" + String(s[\"avg_age\"])).trim());\n",
      "iter": "s",
      "list": "stats",
      "bodyNodes": [
        {
          "kind": "expr",
          "name": "",
          "node": "ExpressionStatement",
          "expr": "console.log((String(s[\"city\"]) + \" \" + String(\": count =\") + \" \" + String(s[\"count\"]) + \" \" + String(\", avg_age =\") + \" \" + String(s[\"avg_age\"])).trim())",
          "start": 2,
          "startCol": 2,
          "end": 2,
          "endCol": 156,
          "snippet": "console.log((String(s[\"city\"]) + \" \" + String(\": count =\") + \" \" + String(s[\"count\"]) + \" \" + String(\", avg_age =\") + \" \" + String(s[\"avg_age\"])).trim());",
          "startOff": 3,
          "endOff": 157
        }
      ],
      "start": 30,
      "end": 32,
      "endCol": 1,
      "snippet": "for (const s of stats) {\n  console.log((String(s[\"city\"]) + \" \" + String(\": count =\") + \" \" + String(s[\"count\"]) + \" \" + String(\", avg_age =\") + \" \" + String(s[\"avg_age\"])).trim());\n}",
      "startOff": 1366,
      "endOff": 1549
    }
  ]
}
