{
  "nodes": [
    {
      "kind": "type",
      "name": "Result",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "n_nationkey",
          "typ": "number"
        },
        {
          "name": "n_name",
          "typ": "string"
        }
      ],
      "start": 3,
      "end": 3,
      "endCol": 63,
      "snippet": "export interface Result { n_nationkey: number; n_name: string }",
      "startOff": 61,
      "endOff": 124,
      "doc": "// Generated by Mochi v0.10.35 on 2025-07-22 14:07:04 GMT+7"
    },
    {
      "kind": "type",
      "name": "Nation",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "n_nationkey",
          "typ": "number"
        },
        {
          "name": "n_name",
          "typ": "string"
        }
      ],
      "start": 4,
      "end": 4,
      "endCol": 63,
      "snippet": "export interface Nation { n_nationkey: number; n_name: string }",
      "startOff": 125,
      "endOff": 188
    },
    {
      "kind": "type",
      "name": "Customer",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "c_custkey",
          "typ": "number"
        },
        {
          "name": "c_name",
          "typ": "string"
        },
        {
          "name": "c_acctbal",
          "typ": "number"
        },
        {
          "name": "c_nationkey",
          "typ": "number"
        },
        {
          "name": "c_address",
          "typ": "string"
        },
        {
          "name": "c_phone",
          "typ": "string"
        },
        {
          "name": "c_comment",
          "typ": "string"
        }
      ],
      "start": 5,
      "end": 5,
      "endCol": 158,
      "snippet": "export interface Customer { c_custkey: number; c_name: string; c_acctbal: number; c_nationkey: number; c_address: string; c_phone: string; c_comment: string }",
      "startOff": 189,
      "endOff": 347
    },
    {
      "kind": "type",
      "name": "Order",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "o_orderkey",
          "typ": "number"
        },
        {
          "name": "o_custkey",
          "typ": "number"
        },
        {
          "name": "o_orderdate",
          "typ": "string"
        }
      ],
      "start": 6,
      "end": 6,
      "endCol": 85,
      "snippet": "export interface Order { o_orderkey: number; o_custkey: number; o_orderdate: string }",
      "startOff": 348,
      "endOff": 433
    },
    {
      "kind": "type",
      "name": "Lineitem",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "l_orderkey",
          "typ": "number"
        },
        {
          "name": "l_returnflag",
          "typ": "string"
        },
        {
          "name": "l_extendedprice",
          "typ": "number"
        },
        {
          "name": "l_discount",
          "typ": "number"
        }
      ],
      "start": 7,
      "end": 7,
      "endCol": 115,
      "snippet": "export interface Lineitem { l_orderkey: number; l_returnflag: string; l_extendedprice: number; l_discount: number }",
      "startOff": 434,
      "endOff": 549
    },
    {
      "kind": "var",
      "name": "nation",
      "node": "VariableDeclaration",
      "ret": "Nation[]",
      "value": "[{n_nationkey: 1, n_name: \"BRAZIL\"}]",
      "start": 8,
      "end": 8,
      "endCol": 62,
      "snippet": "const nation: Nation[] = [{n_nationkey: 1, n_name: \"BRAZIL\"}];",
      "startOff": 550,
      "endOff": 612
    },
    {
      "kind": "var",
      "name": "customer",
      "node": "VariableDeclaration",
      "ret": "Customer[]",
      "value": "[{c_custkey: 1, c_name: \"Alice\", c_acctbal: 100.0, c_nationkey: 1, c_address: \"123 St\", c_phone: \"123-456\", c_comment: \"Loyal\"}]",
      "start": 9,
      "end": 9,
      "endCol": 158,
      "snippet": "const customer: Customer[] = [{c_custkey: 1, c_name: \"Alice\", c_acctbal: 100.0, c_nationkey: 1, c_address: \"123 St\", c_phone: \"123-456\", c_comment: \"Loyal\"}];",
      "startOff": 613,
      "endOff": 771
    },
    {
      "kind": "var",
      "name": "orders",
      "node": "VariableDeclaration",
      "ret": "Order[]",
      "value": "[{o_orderkey: 1000, o_custkey: 1, o_orderdate: \"1993-10-15\"}, {o_orderkey: 2000, o_custkey: 1, o_orderdate: \"1994-01-02\"}]",
      "start": 10,
      "end": 10,
      "endCol": 147,
      "snippet": "const orders: Order[] = [{o_orderkey: 1000, o_custkey: 1, o_orderdate: \"1993-10-15\"}, {o_orderkey: 2000, o_custkey: 1, o_orderdate: \"1994-01-02\"}];",
      "startOff": 772,
      "endOff": 919
    },
    {
      "kind": "var",
      "name": "lineitem",
      "node": "VariableDeclaration",
      "ret": "Lineitem[]",
      "value": "[{l_orderkey: 1000, l_returnflag: \"R\", l_extendedprice: 1000.0, l_discount: 0.1}, {l_orderkey: 2000, l_returnflag: \"N\", l_extendedprice: 500.0, l_discount: 0.0}]",
      "start": 11,
      "end": 11,
      "endCol": 191,
      "snippet": "const lineitem: Lineitem[] = [{l_orderkey: 1000, l_returnflag: \"R\", l_extendedprice: 1000.0, l_discount: 0.1}, {l_orderkey: 2000, l_returnflag: \"N\", l_extendedprice: 500.0, l_discount: 0.0}];",
      "startOff": 920,
      "endOff": 1111
    },
    {
      "kind": "var",
      "name": "start_date",
      "node": "VariableDeclaration",
      "ret": "string",
      "value": "\"1993-10-01\"",
      "start": 12,
      "end": 12,
      "endCol": 40,
      "snippet": "const start_date: string = \"1993-10-01\";",
      "startOff": 1112,
      "endOff": 1152
    },
    {
      "kind": "var",
      "name": "end_date",
      "node": "VariableDeclaration",
      "ret": "string",
      "value": "\"1994-01-01\"",
      "start": 13,
      "end": 13,
      "endCol": 38,
      "snippet": "const end_date: string = \"1994-01-01\";",
      "startOff": 1153,
      "endOff": 1191
    },
    {
      "kind": "var",
      "name": "result",
      "node": "VariableDeclaration",
      "ret": "Record\u003cstring, any\u003e[]",
      "value": "(() =\u003e {\n  const groups = new Map\u003cstring, {key: any; items: any[]}\u003e()\n  let rows = customer.map(v =\u003e [v])\n  { const joined = []\n    const arr = orders\n    for (const left of rows) {\n      const [c] = left;\n      let m = false;\n      for (let ri=0; ri \u003c arr.length; ri++) {\n        const o = arr[ri];\n        if (!((o[\"o_custkey\"] == c[\"c_custkey\"]))) continue;\n        m = true; joined.push([...left, o]) }\n    }\n    rows = joined;\n  }\n  { const joined = []\n    const arr = lineitem\n    for (const left of rows) {\n      const [c, o] = left;\n      let m = false;\n      for (let ri=0; ri \u003c arr.length; ri++) {\n        const l = arr[ri];\n        if (!((l[\"l_orderkey\"] == o[\"o_orderkey\"]))) continue;\n        m = true; joined.push([...left, l]) }\n    }\n    rows = joined;\n  }\n  { const joined = []\n    const arr = nation\n    for (const left of rows) {\n      const [c, o, l] = left;\n      let m = false;\n      for (let ri=0; ri \u003c arr.length; ri++) {\n        const n = arr[ri];\n        if (!((n[\"n_nationkey\"] == c[\"c_nationkey\"]))) continue;\n        m = true; joined.push([...left, n]) }\n    }\n    rows = joined;\n  }\n  for (const it of rows) {\n    const [c, o, l, n] = it;\n    if (!((((o[\"o_orderdate\"] \u003e= start_date) \u0026\u0026 (o[\"o_orderdate\"] \u003c end_date)) \u0026\u0026 (l[\"l_returnflag\"] == \"R\")))) continue\n    const k = {c_custkey: c[\"c_custkey\"], c_name: c[\"c_name\"], c_acctbal: c[\"c_acctbal\"], c_address: c[\"c_address\"], c_phone: c[\"c_phone\"], c_comment: c[\"c_comment\"], n_name: n[\"n_name\"]}\n    const ks = JSON.stringify(k)\n    let g = groups.get(ks)\n    if (!g) { g = {key: k, items: []}; groups.set(ks, g) }\n    g.items.push({c, o, l, n})\n  }\n  let ordered = Array.from(groups.values())\n  const result: Result[] = []\n  const pairs = ordered.map(grp =\u003e { const g = grp; return {g: g, key: -(() =\u003e {\n  const result = []\n  for (const x of g[\"items\"]) {\n    result.push((x[\"l\"][\"l_extendedprice\"] * (1 - x[\"l\"][\"l_discount\"])))\n  }\n  const out = result\n  return out\n})().reduce((a, b) =\u003e a + b, 0.0)} })\n  pairs.sort((a,b)=\u003e{const ak=a.key;const bk=b.key;if(ak\u003cbk)return -1;if(ak\u003ebk)return 1;const sak=JSON.stringify(ak);const sbk=JSON.stringify(bk);return sak\u003csbk?-1:sak\u003esbk?1:0})\n  ordered = pairs.map(p =\u003e p.g)\n  for (const g of ordered) {\n    result.push({c_custkey: g[\"key\"][\"c_custkey\"], c_name: g[\"key\"][\"c_name\"], revenue: (() =\u003e {\n  const result = []\n  for (const x of g[\"items\"]) {\n    result.push((x[\"l\"][\"l_extendedprice\"] * (1 - x[\"l\"][\"l_discount\"])))\n  }\n  const out = result\n  return out\n})().reduce((a, b) =\u003e a + b, 0.0), c_acctbal: g[\"key\"][\"c_acctbal\"], n_name: g[\"key\"][\"n_name\"], c_address: g[\"key\"][\"c_address\"], c_phone: g[\"key\"][\"c_phone\"], c_comment: g[\"key\"][\"c_comment\"]})\n  }\n  return result\n})()",
      "start": 14,
      "end": 85,
      "endCol": 5,
      "snippet": "const result: Record\u003cstring, any\u003e[] = (() =\u003e {\n  const groups = new Map\u003cstring, {key: any; items: any[]}\u003e()\n  let rows = customer.map(v =\u003e [v])\n  { const joined = []\n    const arr = orders\n    for (const left of rows) {\n      const [c] = left;\n      let m = false;\n      for (let ri=0; ri \u003c arr.length; ri++) {\n        const o = arr[ri];\n        if (!((o[\"o_custkey\"] == c[\"c_custkey\"]))) continue;\n        m = true; joined.push([...left, o]) }\n    }\n    rows = joined;\n  }\n  { const joined = []\n    const arr = lineitem\n    for (const left of rows) {\n      const [c, o] = left;\n      let m = false;\n      for (let ri=0; ri \u003c arr.length; ri++) {\n        const l = arr[ri];\n        if (!((l[\"l_orderkey\"] == o[\"o_orderkey\"]))) continue;\n        m = true; joined.push([...left, l]) }\n    }\n    rows = joined;\n  }\n  { const joined = []\n    const arr = nation\n    for (const left of rows) {\n      const [c, o, l] = left;\n      let m = false;\n      for (let ri=0; ri \u003c arr.length; ri++) {\n        const n = arr[ri];\n        if (!((n[\"n_nationkey\"] == c[\"c_nationkey\"]))) continue;\n        m = true; joined.push([...left, n]) }\n    }\n    rows = joined;\n  }\n  for (const it of rows) {\n    const [c, o, l, n] = it;\n    if (!((((o[\"o_orderdate\"] \u003e= start_date) \u0026\u0026 (o[\"o_orderdate\"] \u003c end_date)) \u0026\u0026 (l[\"l_returnflag\"] == \"R\")))) continue\n    const k = {c_custkey: c[\"c_custkey\"], c_name: c[\"c_name\"], c_acctbal: c[\"c_acctbal\"], c_address: c[\"c_address\"], c_phone: c[\"c_phone\"], c_comment: c[\"c_comment\"], n_name: n[\"n_name\"]}\n    const ks = JSON.stringify(k)\n    let g = groups.get(ks)\n    if (!g) { g = {key: k, items: []}; groups.set(ks, g) }\n    g.items.push({c, o, l, n})\n  }\n  let ordered = Array.from(groups.values())\n  const result: Result[] = []\n  const pairs = ordered.map(grp =\u003e { const g = grp; return {g: g, key: -(() =\u003e {\n  const result = []\n  for (const x of g[\"items\"]) {\n    result.push((x[\"l\"][\"l_extendedprice\"] * (1 - x[\"l\"][\"l_discount\"])))\n  }\n  const out = result\n  return out\n})().reduce((a, b) =\u003e a + b, 0.0)} })\n  pairs.sort((a,b)=\u003e{const ak=a.key;const bk=b.key;if(ak\u003cbk)return -1;if(ak\u003ebk)return 1;const sak=JSON.stringify(ak);const sbk=JSON.stringify(bk);return sak\u003csbk?-1:sak\u003esbk?1:0})\n  ordered = pairs.map(p =\u003e p.g)\n  for (const g of ordered) {\n    result.push({c_custkey: g[\"key\"][\"c_custkey\"], c_name: g[\"key\"][\"c_name\"], revenue: (() =\u003e {\n  const result = []\n  for (const x of g[\"items\"]) {\n    result.push((x[\"l\"][\"l_extendedprice\"] * (1 - x[\"l\"][\"l_discount\"])))\n  }\n  const out = result\n  return out\n})().reduce((a, b) =\u003e a + b, 0.0), c_acctbal: g[\"key\"][\"c_acctbal\"], n_name: g[\"key\"][\"n_name\"], c_address: g[\"key\"][\"c_address\"], c_phone: g[\"key\"][\"c_phone\"], c_comment: g[\"key\"][\"c_comment\"]})\n  }\n  return result\n})();",
      "startOff": 1192,
      "endOff": 3940
    },
    {
      "kind": "expr",
      "name": "",
      "node": "ExpressionStatement",
      "expr": "console.log(String(\"[\" + (result).join(\", \") + \"]\"))",
      "start": 86,
      "end": 86,
      "endCol": 53,
      "snippet": "console.log(String(\"[\" + (result).join(\", \") + \"]\"));",
      "startOff": 3941,
      "endOff": 3994
    }
  ]
}
