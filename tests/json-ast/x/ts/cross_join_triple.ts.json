{
  "nodes": [
    {
      "kind": "type",
      "name": "Result",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "n",
          "typ": "number"
        },
        {
          "name": "l",
          "typ": "string"
        },
        {
          "name": "b",
          "typ": "boolean"
        }
      ],
      "start": 3,
      "end": 3,
      "endCol": 60,
      "snippet": "export interface Result { n: number; l: string; b: boolean }",
      "startOff": 61,
      "endOff": 121,
      "doc": "// Generated by Mochi v0.10.35 on 2025-07-22 14:39:02 GMT+7"
    },
    {
      "kind": "var",
      "name": "nums",
      "node": "VariableDeclaration",
      "ret": "number[]",
      "value": "[1, 2]",
      "start": 4,
      "end": 4,
      "endCol": 30,
      "snippet": "const nums: number[] = [1, 2];",
      "startOff": 122,
      "endOff": 152
    },
    {
      "kind": "var",
      "name": "letters",
      "node": "VariableDeclaration",
      "ret": "string[]",
      "value": "[\"A\", \"B\"]",
      "start": 5,
      "end": 5,
      "endCol": 37,
      "snippet": "const letters: string[] = [\"A\", \"B\"];",
      "startOff": 153,
      "endOff": 190
    },
    {
      "kind": "var",
      "name": "bools",
      "node": "VariableDeclaration",
      "ret": "boolean[]",
      "value": "[true, false]",
      "start": 6,
      "end": 6,
      "endCol": 39,
      "snippet": "const bools: boolean[] = [true, false];",
      "startOff": 191,
      "endOff": 230
    },
    {
      "kind": "var",
      "name": "combos",
      "node": "VariableDeclaration",
      "ret": "Result[]",
      "value": "(() =\u003e {\n  let _items = nums.map(v =\u003e [v])\n  { const _next = []\n    for (const it of _items) {\n      for (const l of letters) { _next.push([...it, l]) }\n    }\n    _items = _next }\n  { const _next = []\n    for (const it of _items) {\n      for (const b of bools) { _next.push([...it, b]) }\n    }\n    _items = _next }\n  let _rows = _items\n  const result: Result[] = []\n  for (const r of _rows) { const [n, l, b] = r; result.push({n, l, b}) }\n  return result\n})()",
      "start": 7,
      "end": 23,
      "endCol": 5,
      "snippet": "const combos: Result[] = (() =\u003e {\n  let _items = nums.map(v =\u003e [v])\n  { const _next = []\n    for (const it of _items) {\n      for (const l of letters) { _next.push([...it, l]) }\n    }\n    _items = _next }\n  { const _next = []\n    for (const it of _items) {\n      for (const b of bools) { _next.push([...it, b]) }\n    }\n    _items = _next }\n  let _rows = _items\n  const result: Result[] = []\n  for (const r of _rows) { const [n, l, b] = r; result.push({n, l, b}) }\n  return result\n})();",
      "startOff": 231,
      "endOff": 716
    },
    {
      "kind": "expr",
      "name": "",
      "node": "ExpressionStatement",
      "expr": "console.log(\"--- Cross Join of three lists ---\")",
      "start": 24,
      "end": 24,
      "endCol": 49,
      "snippet": "console.log(\"--- Cross Join of three lists ---\");",
      "startOff": 717,
      "endOff": 766
    },
    {
      "kind": "forof",
      "name": "",
      "node": "ForOfStatement",
      "body": "\n  console.log(c.n, c.l, c.b ? \"True\" : \"False\");\n",
      "iter": "c",
      "list": "combos",
      "bodyNodes": [
        {
          "kind": "expr",
          "name": "",
          "node": "ExpressionStatement",
          "expr": "console.log(c.n, c.l, c.b ? \"True\" : \"False\")",
          "start": 2,
          "startCol": 2,
          "end": 2,
          "endCol": 48,
          "snippet": "console.log(c.n, c.l, c.b ? \"True\" : \"False\");",
          "startOff": 3,
          "endOff": 49
        }
      ],
      "start": 25,
      "end": 27,
      "endCol": 1,
      "snippet": "for (const c of combos) {\n  console.log(c.n, c.l, c.b ? \"True\" : \"False\");\n}",
      "startOff": 767,
      "endOff": 843
    }
  ]
}
