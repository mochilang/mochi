{
  "nodes": [
    {
      "kind": "type",
      "name": "Result",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "id",
          "typ": "number"
        },
        {
          "name": "name",
          "typ": "string"
        }
      ],
      "start": 3,
      "end": 3,
      "endCol": 52,
      "snippet": "export interface Result { id: number; name: string }",
      "startOff": 61,
      "endOff": 113,
      "doc": "// Generated by Mochi v0.10.35 on 2025-07-22 14:07:03 GMT+7"
    },
    {
      "kind": "type",
      "name": "Customer",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "id",
          "typ": "number"
        },
        {
          "name": "name",
          "typ": "string"
        }
      ],
      "start": 4,
      "end": 4,
      "endCol": 54,
      "snippet": "export interface Customer { id: number; name: string }",
      "startOff": 114,
      "endOff": 168
    },
    {
      "kind": "type",
      "name": "Order",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "id",
          "typ": "number"
        },
        {
          "name": "customerId",
          "typ": "number"
        }
      ],
      "start": 5,
      "end": 5,
      "endCol": 57,
      "snippet": "export interface Order { id: number; customerId: number }",
      "startOff": 169,
      "endOff": 226
    },
    {
      "kind": "var",
      "name": "customers",
      "node": "VariableDeclaration",
      "ret": "Customer[]",
      "value": "[{id: 1, name: \"Alice\"}, {id: 2, name: \"Bob\"}]",
      "start": 6,
      "end": 6,
      "endCol": 77,
      "snippet": "const customers: Customer[] = [{id: 1, name: \"Alice\"}, {id: 2, name: \"Bob\"}];",
      "startOff": 227,
      "endOff": 304
    },
    {
      "kind": "var",
      "name": "orders",
      "node": "VariableDeclaration",
      "ret": "Order[]",
      "value": "[{id: 100, customerId: 1}, {id: 101, customerId: 1}, {id: 102, customerId: 2}]",
      "start": 7,
      "end": 7,
      "endCol": 103,
      "snippet": "const orders: Order[] = [{id: 100, customerId: 1}, {id: 101, customerId: 1}, {id: 102, customerId: 2}];",
      "startOff": 305,
      "endOff": 408
    },
    {
      "kind": "var",
      "name": "stats",
      "node": "VariableDeclaration",
      "ret": "Record\u003cstring, any\u003e[]",
      "value": "(() =\u003e {\n  const groups = new Map\u003cstring, {key: any; items: any[]}\u003e()\n  let rows = orders.map(v =\u003e [v])\n  { const joined = []\n    const arr = customers\n    for (const left of rows) {\n      const [o] = left;\n      let m = false;\n      for (let ri=0; ri \u003c arr.length; ri++) {\n        const c = arr[ri];\n        if (!((o[\"customerId\"] == c[\"id\"]))) continue;\n        m = true; joined.push([...left, c]) }\n    }\n    rows = joined;\n  }\n  for (const it of rows) {\n    const [o, c] = it;\n    const k = c[\"name\"]\n    const ks = JSON.stringify(k)\n    let g = groups.get(ks)\n    if (!g) { g = {key: k, items: []}; groups.set(ks, g) }\n    g.items.push({o, c})\n  }\n  let ordered = Array.from(groups.values())\n  const result: Result[] = []\n  for (const g of ordered) {\n    result.push({name: g[\"key\"], count: (Array.isArray(g[\"items\"]) || typeof g[\"items\"] === 'string' ? g[\"items\"].length : Object.keys(g[\"items\"] ?? {}).length)})\n  }\n  return result\n})()",
      "start": 8,
      "end": 37,
      "endCol": 5,
      "snippet": "const stats: Record\u003cstring, any\u003e[] = (() =\u003e {\n  const groups = new Map\u003cstring, {key: any; items: any[]}\u003e()\n  let rows = orders.map(v =\u003e [v])\n  { const joined = []\n    const arr = customers\n    for (const left of rows) {\n      const [o] = left;\n      let m = false;\n      for (let ri=0; ri \u003c arr.length; ri++) {\n        const c = arr[ri];\n        if (!((o[\"customerId\"] == c[\"id\"]))) continue;\n        m = true; joined.push([...left, c]) }\n    }\n    rows = joined;\n  }\n  for (const it of rows) {\n    const [o, c] = it;\n    const k = c[\"name\"]\n    const ks = JSON.stringify(k)\n    let g = groups.get(ks)\n    if (!g) { g = {key: k, items: []}; groups.set(ks, g) }\n    g.items.push({o, c})\n  }\n  let ordered = Array.from(groups.values())\n  const result: Result[] = []\n  for (const g of ordered) {\n    result.push({name: g[\"key\"], count: (Array.isArray(g[\"items\"]) || typeof g[\"items\"] === 'string' ? g[\"items\"].length : Object.keys(g[\"items\"] ?? {}).length)})\n  }\n  return result\n})();",
      "startOff": 409,
      "endOff": 1390
    },
    {
      "kind": "expr",
      "name": "",
      "node": "ExpressionStatement",
      "expr": "console.log(String(\"--- Orders per customer ---\"))",
      "start": 38,
      "end": 38,
      "endCol": 51,
      "snippet": "console.log(String(\"--- Orders per customer ---\"));",
      "startOff": 1391,
      "endOff": 1442
    },
    {
      "kind": "forof",
      "name": "",
      "node": "ForOfStatement",
      "body": "\n  console.log((String(s[\"name\"]) + \" \" + String(\"orders:\") + \" \" + String(s[\"count\"])).trim());\n",
      "iter": "s",
      "list": "stats",
      "bodyNodes": [
        {
          "kind": "expr",
          "name": "",
          "node": "ExpressionStatement",
          "expr": "console.log((String(s[\"name\"]) + \" \" + String(\"orders:\") + \" \" + String(s[\"count\"])).trim())",
          "start": 2,
          "startCol": 2,
          "end": 2,
          "endCol": 95,
          "snippet": "console.log((String(s[\"name\"]) + \" \" + String(\"orders:\") + \" \" + String(s[\"count\"])).trim());",
          "startOff": 3,
          "endOff": 96
        }
      ],
      "start": 39,
      "end": 41,
      "endCol": 1,
      "snippet": "for (const s of stats) {\n  console.log((String(s[\"name\"]) + \" \" + String(\"orders:\") + \" \" + String(s[\"count\"])).trim());\n}",
      "startOff": 1443,
      "endOff": 1565
    }
  ]
}
