{
  "nodes": [
    {
      "kind": "type",
      "name": "Result",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "n",
          "typ": "number"
        },
        {
          "name": "l",
          "typ": "string"
        }
      ],
      "start": 3,
      "end": 3,
      "endCol": 48,
      "snippet": "export interface Result { n: number; l: string }",
      "startOff": 61,
      "endOff": 109,
      "doc": "// Generated by Mochi v0.10.35 on 2025-07-22 14:07:01 GMT+7"
    },
    {
      "kind": "var",
      "name": "nums",
      "node": "VariableDeclaration",
      "ret": "number[]",
      "value": "[1, 2, 3]",
      "start": 4,
      "end": 4,
      "endCol": 33,
      "snippet": "const nums: number[] = [1, 2, 3];",
      "startOff": 110,
      "endOff": 143
    },
    {
      "kind": "var",
      "name": "letters",
      "node": "VariableDeclaration",
      "ret": "string[]",
      "value": "[\"A\", \"B\"]",
      "start": 5,
      "end": 5,
      "endCol": 37,
      "snippet": "const letters: string[] = [\"A\", \"B\"];",
      "startOff": 144,
      "endOff": 181
    },
    {
      "kind": "var",
      "name": "pairs",
      "node": "VariableDeclaration",
      "ret": "Result[]",
      "value": "(() =\u003e {\n  let _items = nums.map(v =\u003e [v])\n  { const _next = []\n    for (const it of _items) {\n      for (const l of letters) { _next.push([...it, l]) }\n    }\n    _items = _next }\n  let _rows = _items\n  _rows = _rows.filter(r =\u003e { const [n, l] = r; return ((n % 2) == 0) })\n  const result: Result[] = []\n  for (const r of _rows) { const [n, l] = r; result.push({n, l}) }\n  return result\n})()",
      "start": 6,
      "end": 18,
      "endCol": 5,
      "snippet": "const pairs: Result[] = (() =\u003e {\n  let _items = nums.map(v =\u003e [v])\n  { const _next = []\n    for (const it of _items) {\n      for (const l of letters) { _next.push([...it, l]) }\n    }\n    _items = _next }\n  let _rows = _items\n  _rows = _rows.filter(r =\u003e { const [n, l] = r; return ((n % 2) == 0) })\n  const result: Result[] = []\n  for (const r of _rows) { const [n, l] = r; result.push({n, l}) }\n  return result\n})();",
      "startOff": 182,
      "endOff": 598
    },
    {
      "kind": "expr",
      "name": "",
      "node": "ExpressionStatement",
      "expr": "console.log(String(\"--- Even pairs ---\"))",
      "start": 19,
      "end": 19,
      "endCol": 42,
      "snippet": "console.log(String(\"--- Even pairs ---\"));",
      "startOff": 599,
      "endOff": 641
    },
    {
      "kind": "forof",
      "name": "",
      "node": "ForOfStatement",
      "body": "\n  console.log((String(p[\"n\"]) + \" \" + String(p[\"l\"])).trim());\n",
      "iter": "p",
      "list": "pairs",
      "bodyNodes": [
        {
          "kind": "expr",
          "name": "",
          "node": "ExpressionStatement",
          "expr": "console.log((String(p[\"n\"]) + \" \" + String(p[\"l\"])).trim())",
          "start": 2,
          "startCol": 2,
          "end": 2,
          "endCol": 62,
          "snippet": "console.log((String(p[\"n\"]) + \" \" + String(p[\"l\"])).trim());",
          "startOff": 3,
          "endOff": 63
        }
      ],
      "start": 20,
      "end": 22,
      "endCol": 1,
      "snippet": "for (const p of pairs) {\n  console.log((String(p[\"n\"]) + \" \" + String(p[\"l\"])).trim());\n}",
      "startOff": 642,
      "endOff": 731
    }
  ]
}
