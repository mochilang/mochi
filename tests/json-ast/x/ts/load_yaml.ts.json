{
  "nodes": [
    {
      "kind": "type",
      "name": "Result",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "name",
          "typ": "string"
        },
        {
          "name": "email",
          "typ": "string"
        }
      ],
      "start": 3,
      "end": 3,
      "endCol": 55,
      "snippet": "export interface Result { name: string; email: string }",
      "startOff": 61,
      "endOff": 116,
      "doc": "// Generated by Mochi v0.10.35 on 2025-07-22 14:07:07 GMT+7"
    },
    {
      "kind": "type",
      "name": "Person",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "name",
          "typ": "string"
        },
        {
          "name": "age",
          "typ": "number"
        },
        {
          "name": "email",
          "typ": "string"
        }
      ],
      "start": 4,
      "end": 4,
      "endCol": 68,
      "snippet": "export interface Person { name: string; age: number; email: string }",
      "startOff": 117,
      "endOff": 185
    },
    {
      "kind": "var",
      "name": "people",
      "node": "VariableDeclaration",
      "ret": "Person[]",
      "value": "(() =\u003e {const _t=Deno.readTextFileSync(new URL(\"../../../interpreter/valid/people.yaml\", import.meta.url).pathname).trim().split(/\\r?\\n/);const _o:any[]=[];let c:any={};for(let line of _t){if(line.startsWith('- ')){if(Object.keys(c).length)_o.push(c);c={};line=line.slice(2);}else if(line.startsWith('  ')){line=line.slice(2);}if(!line)continue;const [k,v]=line.split(':');const val=v.trim();c[k.trim()]=/^\\d+$/.test(val)?+val:val;}if(Object.keys(c).length)_o.push(c);return _o;})()",
      "start": 5,
      "end": 5,
      "endCol": 508,
      "snippet": "const people: Person[] = (() =\u003e {const _t=Deno.readTextFileSync(new URL(\"../../../interpreter/valid/people.yaml\", import.meta.url).pathname).trim().split(/\\r?\\n/);const _o:any[]=[];let c:any={};for(let line of _t){if(line.startsWith('- ')){if(Object.keys(c).length)_o.push(c);c={};line=line.slice(2);}else if(line.startsWith('  ')){line=line.slice(2);}if(!line)continue;const [k,v]=line.split(':');const val=v.trim();c[k.trim()]=/^\\d+$/.test(val)?+val:val;}if(Object.keys(c).length)_o.push(c);return _o;})();",
      "startOff": 186,
      "endOff": 694
    },
    {
      "kind": "var",
      "name": "adults",
      "node": "VariableDeclaration",
      "ret": "Result[]",
      "value": "(() =\u003e {\n  const result: Result[] = []\n  for (const p of people) {\n    if ((p[\"age\"] \u003e= 18)) {\n      result.push({name: p[\"name\"], email: p[\"email\"]})\n    }\n  }\n  const out = result\n  return out\n})()",
      "start": 6,
      "end": 15,
      "endCol": 5,
      "snippet": "const adults: Result[] = (() =\u003e {\n  const result: Result[] = []\n  for (const p of people) {\n    if ((p[\"age\"] \u003e= 18)) {\n      result.push({name: p[\"name\"], email: p[\"email\"]})\n    }\n  }\n  const out = result\n  return out\n})();",
      "startOff": 695,
      "endOff": 920
    },
    {
      "kind": "forof",
      "name": "",
      "node": "ForOfStatement",
      "body": "\n  console.log((String(a[\"name\"]) + \" \" + String(a[\"email\"])).trim());\n",
      "iter": "a",
      "list": "adults",
      "bodyNodes": [
        {
          "kind": "expr",
          "name": "",
          "node": "ExpressionStatement",
          "expr": "console.log((String(a[\"name\"]) + \" \" + String(a[\"email\"])).trim())",
          "start": 2,
          "startCol": 2,
          "end": 2,
          "endCol": 69,
          "snippet": "console.log((String(a[\"name\"]) + \" \" + String(a[\"email\"])).trim());",
          "startOff": 3,
          "endOff": 70
        }
      ],
      "start": 16,
      "end": 18,
      "endCol": 1,
      "snippet": "for (const a of adults) {\n  console.log((String(a[\"name\"]) + \" \" + String(a[\"email\"])).trim());\n}",
      "startOff": 921,
      "endOff": 1018
    }
  ]
}
