{
  "nodes": [
    {
      "kind": "type",
      "name": "Result",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "id",
          "typ": "number"
        },
        {
          "name": "name",
          "typ": "string"
        }
      ],
      "start": 3,
      "end": 3,
      "endCol": 52,
      "snippet": "export interface Result { id: number; name: string }",
      "startOff": 61,
      "endOff": 113,
      "doc": "// Generated by Mochi v0.10.35 on 2025-07-22 14:07:06 GMT+7"
    },
    {
      "kind": "type",
      "name": "Customer",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "id",
          "typ": "number"
        },
        {
          "name": "name",
          "typ": "string"
        }
      ],
      "start": 4,
      "end": 4,
      "endCol": 54,
      "snippet": "export interface Customer { id: number; name: string }",
      "startOff": 114,
      "endOff": 168
    },
    {
      "kind": "type",
      "name": "Order",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "id",
          "typ": "number"
        },
        {
          "name": "customerId",
          "typ": "number"
        }
      ],
      "start": 5,
      "end": 5,
      "endCol": 57,
      "snippet": "export interface Order { id: number; customerId: number }",
      "startOff": 169,
      "endOff": 226
    },
    {
      "kind": "type",
      "name": "Item",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "orderId",
          "typ": "number"
        },
        {
          "name": "sku",
          "typ": "string"
        }
      ],
      "start": 6,
      "end": 6,
      "endCol": 54,
      "snippet": "export interface Item { orderId: number; sku: string }",
      "startOff": 227,
      "endOff": 281
    },
    {
      "kind": "var",
      "name": "customers",
      "node": "VariableDeclaration",
      "ret": "Customer[]",
      "value": "[{id: 1, name: \"Alice\"}, {id: 2, name: \"Bob\"}]",
      "start": 7,
      "end": 7,
      "endCol": 77,
      "snippet": "const customers: Customer[] = [{id: 1, name: \"Alice\"}, {id: 2, name: \"Bob\"}];",
      "startOff": 282,
      "endOff": 359
    },
    {
      "kind": "var",
      "name": "orders",
      "node": "VariableDeclaration",
      "ret": "Order[]",
      "value": "[{id: 100, customerId: 1}, {id: 101, customerId: 2}]",
      "start": 8,
      "end": 8,
      "endCol": 77,
      "snippet": "const orders: Order[] = [{id: 100, customerId: 1}, {id: 101, customerId: 2}];",
      "startOff": 360,
      "endOff": 437
    },
    {
      "kind": "var",
      "name": "items",
      "node": "VariableDeclaration",
      "ret": "Item[]",
      "value": "[{orderId: 100, sku: \"a\"}]",
      "start": 9,
      "end": 9,
      "endCol": 49,
      "snippet": "const items: Item[] = [{orderId: 100, sku: \"a\"}];",
      "startOff": 438,
      "endOff": 487
    },
    {
      "kind": "var",
      "name": "result",
      "node": "VariableDeclaration",
      "ret": "Result[]",
      "value": "(() =\u003e {\n  let _items = orders.map(v =\u003e [v])\n  { const _joined = []\n    const _arr = customers\n    for (const _left of _items) {\n      const [o] = _left;\n      let _m = false;\n      for (let _ri=0; _ri \u003c _arr.length; _ri++) {\n        const c = _arr[_ri];\n        if (!((o[\"customerId\"] == c[\"id\"]))) continue;\n        _m = true; _joined.push([..._left, c]) }\n    }\n    _items = _joined;\n  }\n  { const _joined = []\n    const _arr = items\n    for (const _left of _items) {\n      const [o, c] = _left;\n      let _m = false;\n      for (let _ri=0; _ri \u003c _arr.length; _ri++) {\n        const i = _arr[_ri];\n        if (!((o[\"id\"] == i[\"orderId\"]))) continue;\n        _m = true; _joined.push([..._left, i]) }\n      if (!_m) _joined.push([..._left, null])\n    }\n    _items = _joined;\n  }\n  let _rows = _items\n  const result: Result[] = []\n  for (const r of _rows) { const [o, c, i] = r; result.push({orderId: o[\"id\"], name: c[\"name\"], item: i}) }\n  return result\n})()",
      "start": 10,
      "end": 41,
      "endCol": 5,
      "snippet": "const result: Result[] = (() =\u003e {\n  let _items = orders.map(v =\u003e [v])\n  { const _joined = []\n    const _arr = customers\n    for (const _left of _items) {\n      const [o] = _left;\n      let _m = false;\n      for (let _ri=0; _ri \u003c _arr.length; _ri++) {\n        const c = _arr[_ri];\n        if (!((o[\"customerId\"] == c[\"id\"]))) continue;\n        _m = true; _joined.push([..._left, c]) }\n    }\n    _items = _joined;\n  }\n  { const _joined = []\n    const _arr = items\n    for (const _left of _items) {\n      const [o, c] = _left;\n      let _m = false;\n      for (let _ri=0; _ri \u003c _arr.length; _ri++) {\n        const i = _arr[_ri];\n        if (!((o[\"id\"] == i[\"orderId\"]))) continue;\n        _m = true; _joined.push([..._left, i]) }\n      if (!_m) _joined.push([..._left, null])\n    }\n    _items = _joined;\n  }\n  let _rows = _items\n  const result: Result[] = []\n  for (const r of _rows) { const [o, c, i] = r; result.push({orderId: o[\"id\"], name: c[\"name\"], item: i}) }\n  return result\n})();",
      "startOff": 488,
      "endOff": 1472
    },
    {
      "kind": "expr",
      "name": "",
      "node": "ExpressionStatement",
      "expr": "console.log(String(\"--- Left Join Multi ---\"))",
      "start": 42,
      "end": 42,
      "endCol": 47,
      "snippet": "console.log(String(\"--- Left Join Multi ---\"));",
      "startOff": 1473,
      "endOff": 1520
    },
    {
      "kind": "forof",
      "name": "",
      "node": "ForOfStatement",
      "body": "\n  console.log((String(r[\"orderId\"]) + \" \" + String(r[\"name\"]) + \" \" + String(r[\"item\"])).trim());\n",
      "iter": "r",
      "list": "result",
      "bodyNodes": [
        {
          "kind": "expr",
          "name": "",
          "node": "ExpressionStatement",
          "expr": "console.log((String(r[\"orderId\"]) + \" \" + String(r[\"name\"]) + \" \" + String(r[\"item\"])).trim())",
          "start": 2,
          "startCol": 2,
          "end": 2,
          "endCol": 97,
          "snippet": "console.log((String(r[\"orderId\"]) + \" \" + String(r[\"name\"]) + \" \" + String(r[\"item\"])).trim());",
          "startOff": 3,
          "endOff": 98
        }
      ],
      "start": 43,
      "end": 45,
      "endCol": 1,
      "snippet": "for (const r of result) {\n  console.log((String(r[\"orderId\"]) + \" \" + String(r[\"name\"]) + \" \" + String(r[\"item\"])).trim());\n}",
      "startOff": 1521,
      "endOff": 1646
    }
  ]
}
