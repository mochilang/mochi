{
  "nodes": [
    {
      "kind": "type",
      "name": "Result",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "id",
          "typ": "number"
        },
        {
          "name": "name",
          "typ": "string"
        }
      ],
      "start": 3,
      "end": 3,
      "endCol": 52,
      "snippet": "export interface Result { id: number; name: string }",
      "startOff": 61,
      "endOff": 113,
      "doc": "// Generated by Mochi v0.10.35 on 2025-07-22 14:07:09 GMT+7"
    },
    {
      "kind": "type",
      "name": "Customer",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "id",
          "typ": "number"
        },
        {
          "name": "name",
          "typ": "string"
        }
      ],
      "start": 4,
      "end": 4,
      "endCol": 54,
      "snippet": "export interface Customer { id: number; name: string }",
      "startOff": 114,
      "endOff": 168
    },
    {
      "kind": "type",
      "name": "Order",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "id",
          "typ": "number"
        },
        {
          "name": "customerId",
          "typ": "number"
        },
        {
          "name": "total",
          "typ": "number"
        }
      ],
      "start": 5,
      "end": 5,
      "endCol": 72,
      "snippet": "export interface Order { id: number; customerId: number; total: number }",
      "startOff": 169,
      "endOff": 241
    },
    {
      "kind": "var",
      "name": "customers",
      "node": "VariableDeclaration",
      "ret": "Customer[]",
      "value": "[{id: 1, name: \"Alice\"}, {id: 2, name: \"Bob\"}, {id: 3, name: \"Charlie\"}, {id: 4, name: \"Diana\"}]",
      "start": 6,
      "end": 6,
      "endCol": 127,
      "snippet": "const customers: Customer[] = [{id: 1, name: \"Alice\"}, {id: 2, name: \"Bob\"}, {id: 3, name: \"Charlie\"}, {id: 4, name: \"Diana\"}];",
      "startOff": 242,
      "endOff": 369
    },
    {
      "kind": "var",
      "name": "orders",
      "node": "VariableDeclaration",
      "ret": "Order[]",
      "value": "[{id: 100, customerId: 1, total: 250}, {id: 101, customerId: 2, total: 125}, {id: 102, customerId: 1, total: 300}, {id: 103, customerId: 5, total: 80}]",
      "start": 7,
      "end": 7,
      "endCol": 176,
      "snippet": "const orders: Order[] = [{id: 100, customerId: 1, total: 250}, {id: 101, customerId: 2, total: 125}, {id: 102, customerId: 1, total: 300}, {id: 103, customerId: 5, total: 80}];",
      "startOff": 370,
      "endOff": 546
    },
    {
      "kind": "var",
      "name": "result",
      "node": "VariableDeclaration",
      "ret": "Result[]",
      "value": "(() =\u003e {\n  let _items = orders.map(v =\u003e [v])\n  { const _joined = []\n    const _arr = customers\n    const _matched = new Array(_arr.length).fill(false)\n    for (const _left of _items) {\n      const [o] = _left;\n      let _m = false;\n      for (let _ri=0; _ri \u003c _arr.length; _ri++) {\n        const c = _arr[_ri];\n        if (!((o[\"customerId\"] == c[\"id\"]))) continue;\n        _m = true; _matched[_ri] = true; _joined.push([..._left, c]) }\n      if (!_m) _joined.push([..._left, null])\n    }\n    for (let _ri=0; _ri \u003c _arr.length; _ri++) { if (!_matched[_ri]) {\n      const _undef = Array(_items[0]?.length || 0).fill(null);\n      _joined.push([..._undef, _arr[_ri]]) } }\n    _items = _joined;\n  }\n  let _rows = _items\n  const result: Result[] = []\n  for (const r of _rows) { const [o, c] = r; result.push({order: o, customer: c}) }\n  return result\n})()",
      "start": 8,
      "end": 31,
      "endCol": 5,
      "snippet": "const result: Result[] = (() =\u003e {\n  let _items = orders.map(v =\u003e [v])\n  { const _joined = []\n    const _arr = customers\n    const _matched = new Array(_arr.length).fill(false)\n    for (const _left of _items) {\n      const [o] = _left;\n      let _m = false;\n      for (let _ri=0; _ri \u003c _arr.length; _ri++) {\n        const c = _arr[_ri];\n        if (!((o[\"customerId\"] == c[\"id\"]))) continue;\n        _m = true; _matched[_ri] = true; _joined.push([..._left, c]) }\n      if (!_m) _joined.push([..._left, null])\n    }\n    for (let _ri=0; _ri \u003c _arr.length; _ri++) { if (!_matched[_ri]) {\n      const _undef = Array(_items[0]?.length || 0).fill(null);\n      _joined.push([..._undef, _arr[_ri]]) } }\n    _items = _joined;\n  }\n  let _rows = _items\n  const result: Result[] = []\n  for (const r of _rows) { const [o, c] = r; result.push({order: o, customer: c}) }\n  return result\n})();",
      "startOff": 547,
      "endOff": 1423
    },
    {
      "kind": "expr",
      "name": "",
      "node": "ExpressionStatement",
      "expr": "console.log(String(\"--- Outer Join using syntax ---\"))",
      "start": 32,
      "end": 32,
      "endCol": 55,
      "snippet": "console.log(String(\"--- Outer Join using syntax ---\"));",
      "startOff": 1424,
      "endOff": 1479
    },
    {
      "kind": "forof",
      "name": "",
      "node": "ForOfStatement",
      "body": "\n  if (row[\"order\"]) {\n    if (row[\"customer\"]) {\n      console.log((String(\"Order\") + \" \" + String(row[\"order\"][\"id\"]) + \" \" + String(\"by\") + \" \" + String(row[\"customer\"][\"name\"]) + \" \" + String(\"- $\") + \" \" + String(row[\"order\"][\"total\"])).trim());\n    } else {\n      console.log((String(\"Order\") + \" \" + String(row[\"order\"][\"id\"]) + \" \" + String(\"by\") + \" \" + String(\"Unknown\") + \" \" + String(\"- $\") + \" \" + String(row[\"order\"][\"total\"])).trim());\n    }\n  } else {\n    console.log((String(\"Customer\") + \" \" + String(row[\"customer\"][\"name\"]) + \" \" + String(\"has no orders\")).trim());\n  }\n",
      "iter": "row",
      "list": "result",
      "bodyNodes": [
        {
          "kind": "if",
          "name": "",
          "node": "IfStatement",
          "body": "\n    if (row[\"customer\"]) {\n      console.log((String(\"Order\") + \" \" + String(row[\"order\"][\"id\"]) + \" \" + String(\"by\") + \" \" + String(row[\"customer\"][\"name\"]) + \" \" + String(\"- $\") + \" \" + String(row[\"order\"][\"total\"])).trim());\n    } else {\n      console.log((String(\"Order\") + \" \" + String(row[\"order\"][\"id\"]) + \" \" + String(\"by\") + \" \" + String(\"Unknown\") + \" \" + String(\"- $\") + \" \" + String(row[\"order\"][\"total\"])).trim());\n    }\n  ",
          "cond": "row[\"order\"]",
          "else": "\n    console.log((String(\"Customer\") + \" \" + String(row[\"customer\"][\"name\"]) + \" \" + String(\"has no orders\")).trim());\n  ",
          "bodyNodes": [
            {
              "kind": "if",
              "name": "",
              "node": "IfStatement",
              "body": "\n      console.log((String(\"Order\") + \" \" + String(row[\"order\"][\"id\"]) + \" \" + String(\"by\") + \" \" + String(row[\"customer\"][\"name\"]) + \" \" + String(\"- $\") + \" \" + String(row[\"order\"][\"total\"])).trim());\n    ",
              "cond": "row[\"customer\"]",
              "else": "\n      console.log((String(\"Order\") + \" \" + String(row[\"order\"][\"id\"]) + \" \" + String(\"by\") + \" \" + String(\"Unknown\") + \" \" + String(\"- $\") + \" \" + String(row[\"order\"][\"total\"])).trim());\n    ",
              "bodyNodes": [
                {
                  "kind": "expr",
                  "name": "",
                  "node": "ExpressionStatement",
                  "expr": "console.log((String(\"Order\") + \" \" + String(row[\"order\"][\"id\"]) + \" \" + String(\"by\") + \" \" + String(row[\"customer\"][\"name\"]) + \" \" + String(\"- $\") + \" \" + String(row[\"order\"][\"total\"])).trim())",
                  "start": 2,
                  "startCol": 6,
                  "end": 2,
                  "endCol": 200,
                  "snippet": "console.log((String(\"Order\") + \" \" + String(row[\"order\"][\"id\"]) + \" \" + String(\"by\") + \" \" + String(row[\"customer\"][\"name\"]) + \" \" + String(\"- $\") + \" \" + String(row[\"order\"][\"total\"])).trim());",
                  "startOff": 7,
                  "endOff": 201
                }
              ],
              "elseNodes": [
                {
                  "kind": "expr",
                  "name": "",
                  "node": "ExpressionStatement",
                  "expr": "console.log((String(\"Order\") + \" \" + String(row[\"order\"][\"id\"]) + \" \" + String(\"by\") + \" \" + String(\"Unknown\") + \" \" + String(\"- $\") + \" \" + String(row[\"order\"][\"total\"])).trim())",
                  "start": 2,
                  "startCol": 6,
                  "end": 2,
                  "endCol": 186,
                  "snippet": "console.log((String(\"Order\") + \" \" + String(row[\"order\"][\"id\"]) + \" \" + String(\"by\") + \" \" + String(\"Unknown\") + \" \" + String(\"- $\") + \" \" + String(row[\"order\"][\"total\"])).trim());",
                  "startOff": 7,
                  "endOff": 187
                }
              ],
              "start": 2,
              "startCol": 4,
              "end": 6,
              "endCol": 5,
              "snippet": "if (row[\"customer\"]) {\n      console.log((String(\"Order\") + \" \" + String(row[\"order\"][\"id\"]) + \" \" + String(\"by\") + \" \" + String(row[\"customer\"][\"name\"]) + \" \" + String(\"- $\") + \" \" + String(row[\"order\"][\"total\"])).trim());\n    } else {\n      console.log((String(\"Order\") + \" \" + String(row[\"order\"][\"id\"]) + \" \" + String(\"by\") + \" \" + String(\"Unknown\") + \" \" + String(\"- $\") + \" \" + String(row[\"order\"][\"total\"])).trim());\n    }",
              "startOff": 5,
              "endOff": 434
            }
          ],
          "elseNodes": [
            {
              "kind": "expr",
              "name": "",
              "node": "ExpressionStatement",
              "expr": "console.log((String(\"Customer\") + \" \" + String(row[\"customer\"][\"name\"]) + \" \" + String(\"has no orders\")).trim())",
              "start": 2,
              "startCol": 4,
              "end": 2,
              "endCol": 117,
              "snippet": "console.log((String(\"Customer\") + \" \" + String(row[\"customer\"][\"name\"]) + \" \" + String(\"has no orders\")).trim());",
              "startOff": 5,
              "endOff": 118
            }
          ],
          "start": 2,
          "startCol": 2,
          "end": 10,
          "endCol": 3,
          "snippet": "if (row[\"order\"]) {\n    if (row[\"customer\"]) {\n      console.log((String(\"Order\") + \" \" + String(row[\"order\"][\"id\"]) + \" \" + String(\"by\") + \" \" + String(row[\"customer\"][\"name\"]) + \" \" + String(\"- $\") + \" \" + String(row[\"order\"][\"total\"])).trim());\n    } else {\n      console.log((String(\"Order\") + \" \" + String(row[\"order\"][\"id\"]) + \" \" + String(\"by\") + \" \" + String(\"Unknown\") + \" \" + String(\"- $\") + \" \" + String(row[\"order\"][\"total\"])).trim());\n    }\n  } else {\n    console.log((String(\"Customer\") + \" \" + String(row[\"customer\"][\"name\"]) + \" \" + String(\"has no orders\")).trim());\n  }",
          "startOff": 3,
          "endOff": 589
        }
      ],
      "start": 33,
      "end": 43,
      "endCol": 1,
      "snippet": "for (const row of result) {\n  if (row[\"order\"]) {\n    if (row[\"customer\"]) {\n      console.log((String(\"Order\") + \" \" + String(row[\"order\"][\"id\"]) + \" \" + String(\"by\") + \" \" + String(row[\"customer\"][\"name\"]) + \" \" + String(\"- $\") + \" \" + String(row[\"order\"][\"total\"])).trim());\n    } else {\n      console.log((String(\"Order\") + \" \" + String(row[\"order\"][\"id\"]) + \" \" + String(\"by\") + \" \" + String(\"Unknown\") + \" \" + String(\"- $\") + \" \" + String(row[\"order\"][\"total\"])).trim());\n    }\n  } else {\n    console.log((String(\"Customer\") + \" \" + String(row[\"customer\"][\"name\"]) + \" \" + String(\"has no orders\")).trim());\n  }\n}",
      "startOff": 1480,
      "endOff": 2098
    }
  ]
}
