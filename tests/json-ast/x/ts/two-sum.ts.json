{
  "nodes": [
    {
      "kind": "func",
      "name": "twoSum",
      "node": "FunctionDeclaration",
      "params": [
        {
          "name": "nums",
          "typ": "number[]"
        },
        {
          "name": "target",
          "typ": "number"
        }
      ],
      "ret": "number[]",
      "body": "\n  const n = (Array.isArray(nums) || typeof nums === 'string' ? nums.length : Object.keys(nums ?? {}).length);\n  for (let i = 0; i \u003c n; i++) {\n    for (let j = (i + 1); j \u003c n; j++) {\n      if (((nums[i] + nums[j]) == target)) {\n        return [i, j];\n      }\n    }\n  }\n  return [-1, -1];\n",
      "bodyNodes": [
        {
          "kind": "var",
          "name": "n",
          "node": "VariableDeclaration",
          "value": "(Array.isArray(nums) || typeof nums === 'string' ? nums.length : Object.keys(nums ?? {}).length)",
          "start": 2,
          "startCol": 2,
          "end": 2,
          "endCol": 109,
          "snippet": "const n = (Array.isArray(nums) || typeof nums === 'string' ? nums.length : Object.keys(nums ?? {}).length);",
          "startOff": 3,
          "endOff": 110
        },
        {
          "kind": "for",
          "name": "",
          "node": "ForStatement",
          "body": "\n    for (let j = (i + 1); j \u003c n; j++) {\n      if (((nums[i] + nums[j]) == target)) {\n        return [i, j];\n      }\n    }\n  ",
          "iter": "i",
          "startVal": "0",
          "endVal": "n",
          "bodyNodes": [
            {
              "kind": "for",
              "name": "",
              "node": "ForStatement",
              "body": "\n      if (((nums[i] + nums[j]) == target)) {\n        return [i, j];\n      }\n    ",
              "iter": "j",
              "startVal": "(i + 1)",
              "endVal": "n",
              "bodyNodes": [
                {
                  "kind": "if",
                  "name": "",
                  "node": "IfStatement",
                  "body": "\n        return [i, j];\n      ",
                  "cond": "((nums[i] + nums[j]) == target)",
                  "bodyNodes": [
                    {
                      "kind": "return",
                      "name": "",
                      "node": "ReturnStatement",
                      "expr": "[i, j]",
                      "start": 2,
                      "startCol": 8,
                      "end": 2,
                      "endCol": 22,
                      "snippet": "return [i, j];",
                      "startOff": 9,
                      "endOff": 23
                    }
                  ],
                  "start": 2,
                  "startCol": 6,
                  "end": 4,
                  "endCol": 7,
                  "snippet": "if (((nums[i] + nums[j]) == target)) {\n        return [i, j];\n      }",
                  "startOff": 7,
                  "endOff": 76
                }
              ],
              "start": 2,
              "startCol": 4,
              "end": 6,
              "endCol": 5,
              "snippet": "for (let j = (i + 1); j \u003c n; j++) {\n      if (((nums[i] + nums[j]) == target)) {\n        return [i, j];\n      }\n    }",
              "startOff": 5,
              "endOff": 122
            }
          ],
          "start": 3,
          "startCol": 2,
          "end": 9,
          "endCol": 3,
          "snippet": "for (let i = 0; i \u003c n; i++) {\n    for (let j = (i + 1); j \u003c n; j++) {\n      if (((nums[i] + nums[j]) == target)) {\n        return [i, j];\n      }\n    }\n  }",
          "startOff": 113,
          "endOff": 268
        },
        {
          "kind": "return",
          "name": "",
          "node": "ReturnStatement",
          "expr": "[-1, -1]",
          "start": 10,
          "startCol": 2,
          "end": 10,
          "endCol": 18,
          "snippet": "return [-1, -1];",
          "startOff": 271,
          "endOff": 287
        }
      ],
      "start": 3,
      "end": 13,
      "endCol": 1,
      "snippet": "function twoSum(nums: number[], target: number): number[] {\n  const n = (Array.isArray(nums) || typeof nums === 'string' ? nums.length : Object.keys(nums ?? {}).length);\n  for (let i = 0; i \u003c n; i++) {\n    for (let j = (i + 1); j \u003c n; j++) {\n      if (((nums[i] + nums[j]) == target)) {\n        return [i, j];\n      }\n    }\n  }\n  return [-1, -1];\n}",
      "startOff": 61,
      "endOff": 409,
      "doc": "// Generated by Mochi v0.10.35 on 2025-07-22 14:07:13 GMT+7"
    },
    {
      "kind": "var",
      "name": "result",
      "node": "VariableDeclaration",
      "ret": "number[]",
      "value": "twoSum([2, 7, 11, 15], 9)",
      "start": 14,
      "end": 14,
      "endCol": 51,
      "snippet": "const result: number[] = twoSum([2, 7, 11, 15], 9);",
      "startOff": 410,
      "endOff": 461
    },
    {
      "kind": "expr",
      "name": "",
      "node": "ExpressionStatement",
      "expr": "console.log(String(result[0]))",
      "start": 15,
      "end": 15,
      "endCol": 31,
      "snippet": "console.log(String(result[0]));",
      "startOff": 462,
      "endOff": 493
    },
    {
      "kind": "expr",
      "name": "",
      "node": "ExpressionStatement",
      "expr": "console.log(String(result[1]))",
      "start": 16,
      "end": 16,
      "endCol": 31,
      "snippet": "console.log(String(result[1]));",
      "startOff": 494,
      "endOff": 525
    }
  ]
}
