{
  "nodes": [
    {
      "kind": "type",
      "name": "Result",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "id",
          "typ": "number"
        },
        {
          "name": "name",
          "typ": "string"
        }
      ],
      "start": 3,
      "end": 3,
      "endCol": 52,
      "snippet": "export interface Result { id: number; name: string }",
      "startOff": 61,
      "endOff": 113,
      "doc": "// Generated by Mochi v0.10.35 on 2025-07-22 14:07:04 GMT+7"
    },
    {
      "kind": "type",
      "name": "Nation",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "id",
          "typ": "number"
        },
        {
          "name": "name",
          "typ": "string"
        }
      ],
      "start": 4,
      "end": 4,
      "endCol": 52,
      "snippet": "export interface Nation { id: number; name: string }",
      "startOff": 114,
      "endOff": 166
    },
    {
      "kind": "type",
      "name": "Supplier",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "id",
          "typ": "number"
        },
        {
          "name": "nation",
          "typ": "number"
        }
      ],
      "start": 5,
      "end": 5,
      "endCol": 56,
      "snippet": "export interface Supplier { id: number; nation: number }",
      "startOff": 167,
      "endOff": 223
    },
    {
      "kind": "type",
      "name": "Partsupp",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "part",
          "typ": "number"
        },
        {
          "name": "supplier",
          "typ": "number"
        },
        {
          "name": "cost",
          "typ": "number"
        },
        {
          "name": "qty",
          "typ": "number"
        }
      ],
      "start": 6,
      "end": 6,
      "endCol": 87,
      "snippet": "export interface Partsupp { part: number; supplier: number; cost: number; qty: number }",
      "startOff": 224,
      "endOff": 311
    },
    {
      "kind": "var",
      "name": "nations",
      "node": "VariableDeclaration",
      "ret": "Nation[]",
      "value": "[{id: 1, name: \"A\"}, {id: 2, name: \"B\"}]",
      "start": 7,
      "end": 7,
      "endCol": 67,
      "snippet": "const nations: Nation[] = [{id: 1, name: \"A\"}, {id: 2, name: \"B\"}];",
      "startOff": 312,
      "endOff": 379
    },
    {
      "kind": "var",
      "name": "suppliers",
      "node": "VariableDeclaration",
      "ret": "Supplier[]",
      "value": "[{id: 1, nation: 1}, {id: 2, nation: 2}]",
      "start": 8,
      "end": 8,
      "endCol": 71,
      "snippet": "const suppliers: Supplier[] = [{id: 1, nation: 1}, {id: 2, nation: 2}];",
      "startOff": 380,
      "endOff": 451
    },
    {
      "kind": "var",
      "name": "partsupp",
      "node": "VariableDeclaration",
      "ret": "Partsupp[]",
      "value": "[{part: 100, supplier: 1, cost: 10.0, qty: 2}, {part: 100, supplier: 2, cost: 20.0, qty: 1}, {part: 200, supplier: 1, cost: 5.0, qty: 3}]",
      "start": 9,
      "end": 9,
      "endCol": 167,
      "snippet": "const partsupp: Partsupp[] = [{part: 100, supplier: 1, cost: 10.0, qty: 2}, {part: 100, supplier: 2, cost: 20.0, qty: 1}, {part: 200, supplier: 1, cost: 5.0, qty: 3}];",
      "startOff": 452,
      "endOff": 619
    },
    {
      "kind": "var",
      "name": "filtered",
      "node": "VariableDeclaration",
      "ret": "Result[]",
      "value": "(() =\u003e {\n  const result: Result[] = []\n  for (const ps of partsupp) {\n  for (const s of suppliers) {\n    if (!((s[\"id\"] == ps[\"supplier\"]))) continue\n    for (const n of nations) {\n      if (!((n[\"id\"] == s[\"nation\"]))) continue\n      if (!((n[\"name\"] == \"A\"))) continue\n      result.push({part: ps[\"part\"], value: (ps[\"cost\"] * ps[\"qty\"])})\n    }\n  }\n  }\n  return result\n})()",
      "start": 10,
      "end": 23,
      "endCol": 5,
      "snippet": "const filtered: Result[] = (() =\u003e {\n  const result: Result[] = []\n  for (const ps of partsupp) {\n  for (const s of suppliers) {\n    if (!((s[\"id\"] == ps[\"supplier\"]))) continue\n    for (const n of nations) {\n      if (!((n[\"id\"] == s[\"nation\"]))) continue\n      if (!((n[\"name\"] == \"A\"))) continue\n      result.push({part: ps[\"part\"], value: (ps[\"cost\"] * ps[\"qty\"])})\n    }\n  }\n  }\n  return result\n})();",
      "startOff": 620,
      "endOff": 1024
    },
    {
      "kind": "var",
      "name": "grouped",
      "node": "VariableDeclaration",
      "ret": "Record\u003cstring, any\u003e[]",
      "value": "(() =\u003e {\n  const groups = new Map\u003cstring, {key: any; items: any[]}\u003e()\n  for (const x of filtered) {\n    const k = x[\"part\"]\n    const ks = JSON.stringify(k)\n    let g = groups.get(ks)\n    if (!g) { g = {key: k, items: []}; groups.set(ks, g) }\n    g.items.push(x)\n  }\n  let ordered = Array.from(groups.values())\n  const result: Result[] = []\n  for (const g of ordered) {\n    result.push({part: g[\"key\"], total: (() =\u003e {\n  const result = []\n  for (const r of g[\"items\"]) {\n    result.push(r[\"value\"])\n  }\n  const out = result\n  return out\n})().reduce((a, b) =\u003e a + b, 0.0)})\n  }\n  return result\n})()",
      "start": 24,
      "end": 46,
      "endCol": 5,
      "snippet": "const grouped: Record\u003cstring, any\u003e[] = (() =\u003e {\n  const groups = new Map\u003cstring, {key: any; items: any[]}\u003e()\n  for (const x of filtered) {\n    const k = x[\"part\"]\n    const ks = JSON.stringify(k)\n    let g = groups.get(ks)\n    if (!g) { g = {key: k, items: []}; groups.set(ks, g) }\n    g.items.push(x)\n  }\n  let ordered = Array.from(groups.values())\n  const result: Result[] = []\n  for (const g of ordered) {\n    result.push({part: g[\"key\"], total: (() =\u003e {\n  const result = []\n  for (const r of g[\"items\"]) {\n    result.push(r[\"value\"])\n  }\n  const out = result\n  return out\n})().reduce((a, b) =\u003e a + b, 0.0)})\n  }\n  return result\n})();",
      "startOff": 1025,
      "endOff": 1662
    },
    {
      "kind": "expr",
      "name": "",
      "node": "ExpressionStatement",
      "expr": "console.log(String(\"[\" + (grouped).join(\", \") + \"]\"))",
      "start": 47,
      "end": 47,
      "endCol": 54,
      "snippet": "console.log(String(\"[\" + (grouped).join(\", \") + \"]\"));",
      "startOff": 1663,
      "endOff": 1717
    }
  ]
}
