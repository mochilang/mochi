{
  "nodes": [
    {
      "kind": "type",
      "name": "Result",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "cat",
          "typ": "string"
        },
        {
          "name": "val",
          "typ": "number"
        },
        {
          "name": "flag",
          "typ": "boolean"
        }
      ],
      "start": 3,
      "end": 3,
      "endCol": 67,
      "snippet": "export interface Result { cat: string; val: number; flag: boolean }",
      "startOff": 61,
      "endOff": 128,
      "doc": "// Generated by Mochi v0.10.35 on 2025-07-22 14:07:03 GMT+7"
    },
    {
      "kind": "type",
      "name": "Item",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "cat",
          "typ": "string"
        },
        {
          "name": "val",
          "typ": "number"
        },
        {
          "name": "flag",
          "typ": "boolean"
        }
      ],
      "start": 4,
      "end": 4,
      "endCol": 65,
      "snippet": "export interface Item { cat: string; val: number; flag: boolean }",
      "startOff": 129,
      "endOff": 194
    },
    {
      "kind": "var",
      "name": "items",
      "node": "VariableDeclaration",
      "ret": "Item[]",
      "value": "[{cat: \"a\", val: 10, flag: true}, {cat: \"a\", val: 5, flag: false}, {cat: \"b\", val: 20, flag: true}]",
      "start": 5,
      "end": 5,
      "endCol": 122,
      "snippet": "const items: Item[] = [{cat: \"a\", val: 10, flag: true}, {cat: \"a\", val: 5, flag: false}, {cat: \"b\", val: 20, flag: true}];",
      "startOff": 195,
      "endOff": 317
    },
    {
      "kind": "var",
      "name": "result",
      "node": "VariableDeclaration",
      "ret": "Record\u003cstring, any\u003e[]",
      "value": "(() =\u003e {\n  const groups = new Map\u003cstring, {key: any; items: any[]}\u003e()\n  for (const i of items) {\n    const k = i[\"cat\"]\n    const ks = JSON.stringify(k)\n    let g = groups.get(ks)\n    if (!g) { g = {key: k, items: []}; groups.set(ks, g) }\n    g.items.push(i)\n  }\n  let ordered = Array.from(groups.values())\n  const result: Result[] = []\n  const pairs = ordered.map(grp =\u003e { const g = grp; return {g: g, key: g[\"key\"]} })\n  pairs.sort((a,b)=\u003e{const ak=a.key;const bk=b.key;if(ak\u003cbk)return -1;if(ak\u003ebk)return 1;const sak=JSON.stringify(ak);const sbk=JSON.stringify(bk);return sak\u003csbk?-1:sak\u003esbk?1:0})\n  ordered = pairs.map(p =\u003e p.g)\n  for (const g of ordered) {\n    result.push({cat: g[\"key\"], share: Math.trunc((() =\u003e {\n  const result = []\n  for (const x of g[\"items\"]) {\n    result.push((x[\"flag\"] ? x[\"val\"] : 0))\n  }\n  const out = result\n  return out\n})().reduce((a, b) =\u003e a + b, 0.0) / (() =\u003e {\n  const result = []\n  for (const x of g[\"items\"]) {\n    result.push(x[\"val\"])\n  }\n  const out = result\n  return out\n})().reduce((a, b) =\u003e a + b, 0.0))})\n  }\n  return result\n})()",
      "start": 6,
      "end": 38,
      "endCol": 5,
      "snippet": "const result: Record\u003cstring, any\u003e[] = (() =\u003e {\n  const groups = new Map\u003cstring, {key: any; items: any[]}\u003e()\n  for (const i of items) {\n    const k = i[\"cat\"]\n    const ks = JSON.stringify(k)\n    let g = groups.get(ks)\n    if (!g) { g = {key: k, items: []}; groups.set(ks, g) }\n    g.items.push(i)\n  }\n  let ordered = Array.from(groups.values())\n  const result: Result[] = []\n  const pairs = ordered.map(grp =\u003e { const g = grp; return {g: g, key: g[\"key\"]} })\n  pairs.sort((a,b)=\u003e{const ak=a.key;const bk=b.key;if(ak\u003cbk)return -1;if(ak\u003ebk)return 1;const sak=JSON.stringify(ak);const sbk=JSON.stringify(bk);return sak\u003csbk?-1:sak\u003esbk?1:0})\n  ordered = pairs.map(p =\u003e p.g)\n  for (const g of ordered) {\n    result.push({cat: g[\"key\"], share: Math.trunc((() =\u003e {\n  const result = []\n  for (const x of g[\"items\"]) {\n    result.push((x[\"flag\"] ? x[\"val\"] : 0))\n  }\n  const out = result\n  return out\n})().reduce((a, b) =\u003e a + b, 0.0) / (() =\u003e {\n  const result = []\n  for (const x of g[\"items\"]) {\n    result.push(x[\"val\"])\n  }\n  const out = result\n  return out\n})().reduce((a, b) =\u003e a + b, 0.0))})\n  }\n  return result\n})();",
      "startOff": 318,
      "endOff": 1432
    },
    {
      "kind": "expr",
      "name": "",
      "node": "ExpressionStatement",
      "expr": "console.log(String(\"[\" + (result).join(\", \") + \"]\"))",
      "start": 39,
      "end": 39,
      "endCol": 53,
      "snippet": "console.log(String(\"[\" + (result).join(\", \") + \"]\"));",
      "startOff": 1433,
      "endOff": 1486
    }
  ]
}
