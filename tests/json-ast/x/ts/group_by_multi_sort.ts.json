{
  "nodes": [
    {
      "kind": "type",
      "name": "Result",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "a",
          "typ": "string"
        },
        {
          "name": "b",
          "typ": "number"
        },
        {
          "name": "val",
          "typ": "number"
        }
      ],
      "start": 3,
      "end": 3,
      "endCol": 61,
      "snippet": "export interface Result { a: string; b: number; val: number }",
      "startOff": 61,
      "endOff": 122,
      "doc": "// Generated by Mochi v0.10.35 on 2025-07-22 14:07:04 GMT+7"
    },
    {
      "kind": "type",
      "name": "Item",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "a",
          "typ": "string"
        },
        {
          "name": "b",
          "typ": "number"
        },
        {
          "name": "val",
          "typ": "number"
        }
      ],
      "start": 4,
      "end": 4,
      "endCol": 59,
      "snippet": "export interface Item { a: string; b: number; val: number }",
      "startOff": 123,
      "endOff": 182
    },
    {
      "kind": "var",
      "name": "items",
      "node": "VariableDeclaration",
      "ret": "Item[]",
      "value": "[{a: \"x\", b: 1, val: 2}, {a: \"x\", b: 2, val: 3}, {a: \"y\", b: 1, val: 4}, {a: \"y\", b: 2, val: 1}]",
      "start": 5,
      "end": 5,
      "endCol": 119,
      "snippet": "const items: Item[] = [{a: \"x\", b: 1, val: 2}, {a: \"x\", b: 2, val: 3}, {a: \"y\", b: 1, val: 4}, {a: \"y\", b: 2, val: 1}];",
      "startOff": 183,
      "endOff": 302
    },
    {
      "kind": "var",
      "name": "grouped",
      "node": "VariableDeclaration",
      "ret": "Record\u003cstring, any\u003e[]",
      "value": "(() =\u003e {\n  const groups = new Map\u003cstring, {key: any; items: any[]}\u003e()\n  for (const i of items) {\n    const k = {a: i[\"a\"], b: i[\"b\"]}\n    const ks = JSON.stringify(k)\n    let g = groups.get(ks)\n    if (!g) { g = {key: k, items: []}; groups.set(ks, g) }\n    g.items.push(i)\n  }\n  let ordered = Array.from(groups.values())\n  const result: Result[] = []\n  const pairs = ordered.map(grp =\u003e { const g = grp; return {g: g, key: -(() =\u003e {\n  const result = []\n  for (const x of g[\"items\"]) {\n    result.push(x[\"val\"])\n  }\n  const out = result\n  return out\n})().reduce((a, b) =\u003e a + b, 0.0)} })\n  pairs.sort((a,b)=\u003e{const ak=a.key;const bk=b.key;if(ak\u003cbk)return -1;if(ak\u003ebk)return 1;const sak=JSON.stringify(ak);const sbk=JSON.stringify(bk);return sak\u003csbk?-1:sak\u003esbk?1:0})\n  ordered = pairs.map(p =\u003e p.g)\n  for (const g of ordered) {\n    result.push({a: g[\"key\"][\"a\"], b: g[\"key\"][\"b\"], total: (() =\u003e {\n  const result = []\n  for (const x of g[\"items\"]) {\n    result.push(x[\"val\"])\n  }\n  const out = result\n  return out\n})().reduce((a, b) =\u003e a + b, 0.0)})\n  }\n  return result\n})()",
      "start": 6,
      "end": 38,
      "endCol": 5,
      "snippet": "const grouped: Record\u003cstring, any\u003e[] = (() =\u003e {\n  const groups = new Map\u003cstring, {key: any; items: any[]}\u003e()\n  for (const i of items) {\n    const k = {a: i[\"a\"], b: i[\"b\"]}\n    const ks = JSON.stringify(k)\n    let g = groups.get(ks)\n    if (!g) { g = {key: k, items: []}; groups.set(ks, g) }\n    g.items.push(i)\n  }\n  let ordered = Array.from(groups.values())\n  const result: Result[] = []\n  const pairs = ordered.map(grp =\u003e { const g = grp; return {g: g, key: -(() =\u003e {\n  const result = []\n  for (const x of g[\"items\"]) {\n    result.push(x[\"val\"])\n  }\n  const out = result\n  return out\n})().reduce((a, b) =\u003e a + b, 0.0)} })\n  pairs.sort((a,b)=\u003e{const ak=a.key;const bk=b.key;if(ak\u003cbk)return -1;if(ak\u003ebk)return 1;const sak=JSON.stringify(ak);const sbk=JSON.stringify(bk);return sak\u003csbk?-1:sak\u003esbk?1:0})\n  ordered = pairs.map(p =\u003e p.g)\n  for (const g of ordered) {\n    result.push({a: g[\"key\"][\"a\"], b: g[\"key\"][\"b\"], total: (() =\u003e {\n  const result = []\n  for (const x of g[\"items\"]) {\n    result.push(x[\"val\"])\n  }\n  const out = result\n  return out\n})().reduce((a, b) =\u003e a + b, 0.0)})\n  }\n  return result\n})();",
      "startOff": 303,
      "endOff": 1413
    },
    {
      "kind": "expr",
      "name": "",
      "node": "ExpressionStatement",
      "expr": "console.log(String(\"[\" + (grouped).join(\", \") + \"]\"))",
      "start": 39,
      "end": 39,
      "endCol": 54,
      "snippet": "console.log(String(\"[\" + (grouped).join(\", \") + \"]\"));",
      "startOff": 1414,
      "endOff": 1468
    }
  ]
}
