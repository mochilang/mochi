{
  "nodes": [
    {
      "kind": "type",
      "name": "Result",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "id",
          "typ": "number"
        },
        {
          "name": "name",
          "typ": "string"
        }
      ],
      "start": 3,
      "end": 3,
      "endCol": 52,
      "snippet": "export interface Result { id: number; name: string }",
      "startOff": 61,
      "endOff": 113,
      "doc": "// Generated by Mochi v0.10.35 on 2025-07-22 14:07:11 GMT+7"
    },
    {
      "kind": "type",
      "name": "Customer",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "id",
          "typ": "number"
        },
        {
          "name": "name",
          "typ": "string"
        }
      ],
      "start": 4,
      "end": 4,
      "endCol": 54,
      "snippet": "export interface Customer { id: number; name: string }",
      "startOff": 114,
      "endOff": 168
    },
    {
      "kind": "type",
      "name": "Order",
      "node": "InterfaceDeclaration",
      "fields": [
        {
          "name": "id",
          "typ": "number"
        },
        {
          "name": "customerId",
          "typ": "number"
        },
        {
          "name": "total",
          "typ": "number"
        }
      ],
      "start": 5,
      "end": 5,
      "endCol": 72,
      "snippet": "export interface Order { id: number; customerId: number; total: number }",
      "startOff": 169,
      "endOff": 241
    },
    {
      "kind": "var",
      "name": "customers",
      "node": "VariableDeclaration",
      "ret": "Customer[]",
      "value": "[{id: 1, name: \"Alice\"}, {id: 2, name: \"Bob\"}, {id: 3, name: \"Charlie\"}, {id: 4, name: \"Diana\"}]",
      "start": 6,
      "end": 6,
      "endCol": 127,
      "snippet": "const customers: Customer[] = [{id: 1, name: \"Alice\"}, {id: 2, name: \"Bob\"}, {id: 3, name: \"Charlie\"}, {id: 4, name: \"Diana\"}];",
      "startOff": 242,
      "endOff": 369
    },
    {
      "kind": "var",
      "name": "orders",
      "node": "VariableDeclaration",
      "ret": "Order[]",
      "value": "[{id: 100, customerId: 1, total: 250}, {id: 101, customerId: 2, total: 125}, {id: 102, customerId: 1, total: 300}]",
      "start": 7,
      "end": 7,
      "endCol": 139,
      "snippet": "const orders: Order[] = [{id: 100, customerId: 1, total: 250}, {id: 101, customerId: 2, total: 125}, {id: 102, customerId: 1, total: 300}];",
      "startOff": 370,
      "endOff": 509
    },
    {
      "kind": "var",
      "name": "result",
      "node": "VariableDeclaration",
      "ret": "Result[]",
      "value": "(() =\u003e {\n  let _items = customers.map(v =\u003e [v])\n  { const _joined = []\n    const _arr = orders\n    for (let _ri=0; _ri \u003c _arr.length; _ri++) {\n      const o = _arr[_ri];\n      let _m = false;\n      for (const _left of _items) {\n        const [c] = _left;\n        if (!((o[\"customerId\"] == c[\"id\"]))) continue;\n        _m = true; _joined.push([..._left, o]) }\n      if (!_m) { const _undef = Array(_items[0]?.length || 0).fill(null); _joined.push([..._undef, o]) }\n    }\n    _items = _joined;\n  }\n  let _rows = _items\n  const result: Result[] = []\n  for (const r of _rows) { const [c, o] = r; result.push({customerName: c[\"name\"], order: o}) }\n  return result\n})()",
      "start": 8,
      "end": 27,
      "endCol": 5,
      "snippet": "const result: Result[] = (() =\u003e {\n  let _items = customers.map(v =\u003e [v])\n  { const _joined = []\n    const _arr = orders\n    for (let _ri=0; _ri \u003c _arr.length; _ri++) {\n      const o = _arr[_ri];\n      let _m = false;\n      for (const _left of _items) {\n        const [c] = _left;\n        if (!((o[\"customerId\"] == c[\"id\"]))) continue;\n        _m = true; _joined.push([..._left, o]) }\n      if (!_m) { const _undef = Array(_items[0]?.length || 0).fill(null); _joined.push([..._undef, o]) }\n    }\n    _items = _joined;\n  }\n  let _rows = _items\n  const result: Result[] = []\n  for (const r of _rows) { const [c, o] = r; result.push({customerName: c[\"name\"], order: o}) }\n  return result\n})();",
      "startOff": 510,
      "endOff": 1199
    },
    {
      "kind": "expr",
      "name": "",
      "node": "ExpressionStatement",
      "expr": "console.log(String(\"--- Right Join using syntax ---\"))",
      "start": 28,
      "end": 28,
      "endCol": 55,
      "snippet": "console.log(String(\"--- Right Join using syntax ---\"));",
      "startOff": 1200,
      "endOff": 1255
    },
    {
      "kind": "forof",
      "name": "",
      "node": "ForOfStatement",
      "body": "\n  if (entry[\"order\"]) {\n    console.log((String(\"Customer\") + \" \" + String(entry[\"customerName\"]) + \" \" + String(\"has order\") + \" \" + String(entry[\"order\"][\"id\"]) + \" \" + String(\"- $\") + \" \" + String(entry[\"order\"][\"total\"])).trim());\n  } else {\n    console.log((String(\"Customer\") + \" \" + String(entry[\"customerName\"]) + \" \" + String(\"has no orders\")).trim());\n  }\n",
      "iter": "entry",
      "list": "result",
      "bodyNodes": [
        {
          "kind": "if",
          "name": "",
          "node": "IfStatement",
          "body": "\n    console.log((String(\"Customer\") + \" \" + String(entry[\"customerName\"]) + \" \" + String(\"has order\") + \" \" + String(entry[\"order\"][\"id\"]) + \" \" + String(\"- $\") + \" \" + String(entry[\"order\"][\"total\"])).trim());\n  ",
          "cond": "entry[\"order\"]",
          "else": "\n    console.log((String(\"Customer\") + \" \" + String(entry[\"customerName\"]) + \" \" + String(\"has no orders\")).trim());\n  ",
          "bodyNodes": [
            {
              "kind": "expr",
              "name": "",
              "node": "ExpressionStatement",
              "expr": "console.log((String(\"Customer\") + \" \" + String(entry[\"customerName\"]) + \" \" + String(\"has order\") + \" \" + String(entry[\"order\"][\"id\"]) + \" \" + String(\"- $\") + \" \" + String(entry[\"order\"][\"total\"])).trim())",
              "start": 2,
              "startCol": 4,
              "end": 2,
              "endCol": 210,
              "snippet": "console.log((String(\"Customer\") + \" \" + String(entry[\"customerName\"]) + \" \" + String(\"has order\") + \" \" + String(entry[\"order\"][\"id\"]) + \" \" + String(\"- $\") + \" \" + String(entry[\"order\"][\"total\"])).trim());",
              "startOff": 5,
              "endOff": 211
            }
          ],
          "elseNodes": [
            {
              "kind": "expr",
              "name": "",
              "node": "ExpressionStatement",
              "expr": "console.log((String(\"Customer\") + \" \" + String(entry[\"customerName\"]) + \" \" + String(\"has no orders\")).trim())",
              "start": 2,
              "startCol": 4,
              "end": 2,
              "endCol": 115,
              "snippet": "console.log((String(\"Customer\") + \" \" + String(entry[\"customerName\"]) + \" \" + String(\"has no orders\")).trim());",
              "startOff": 5,
              "endOff": 116
            }
          ],
          "start": 2,
          "startCol": 2,
          "end": 6,
          "endCol": 3,
          "snippet": "if (entry[\"order\"]) {\n    console.log((String(\"Customer\") + \" \" + String(entry[\"customerName\"]) + \" \" + String(\"has order\") + \" \" + String(entry[\"order\"][\"id\"]) + \" \" + String(\"- $\") + \" \" + String(entry[\"order\"][\"total\"])).trim());\n  } else {\n    console.log((String(\"Customer\") + \" \" + String(entry[\"customerName\"]) + \" \" + String(\"has no orders\")).trim());\n  }",
          "startOff": 3,
          "endOff": 366
        }
      ],
      "start": 29,
      "end": 35,
      "endCol": 1,
      "snippet": "for (const entry of result) {\n  if (entry[\"order\"]) {\n    console.log((String(\"Customer\") + \" \" + String(entry[\"customerName\"]) + \" \" + String(\"has order\") + \" \" + String(entry[\"order\"][\"id\"]) + \" \" + String(\"- $\") + \" \" + String(entry[\"order\"][\"total\"])).trim());\n  } else {\n    console.log((String(\"Customer\") + \" \" + String(entry[\"customerName\"]) + \" \" + String(\"has no orders\")).trim());\n  }\n}",
      "startOff": 1256,
      "endOff": 1653
    }
  ]
}
