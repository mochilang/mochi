{
  "tree": "Block(List(Import(Select(Select(Ident(TermName(\"scala\")), TermName(\"collection\")), TermName(\"mutable\")), List(ImportSelector(TermName(\"ArrayBuffer\"), 93, TermName(\"ArrayBuffer\"), 93), ImportSelector(TermName(\"Map\"), 106, TermName(\"Map\"), 106))), Import(Select(Select(Select(Ident(TermName(\"scala\")), TermName(\"util\")), TermName(\"control\")), TermName(\"Breaks\")), List(ImportSelector(termNames.WILDCARD, 144, null, -1))), ModuleDef(Modifiers(), TermName(\"Main\"), Template(List(Select(Ident(scala), TypeName(\"AnyRef\"))), noSelfType, List(DefDef(Modifiers(), termNames.CONSTRUCTOR, List(), List(List()), TypeTree(), Block(List(pendingSuperCall), Literal(Constant(())))), DefDef(Modifiers(), TermName(\"main\"), List(), List(List(ValDef(Modifiers(PARAM), TermName(\"args\"), AppliedTypeTree(Ident(TypeName(\"Array\")), List(Ident(TypeName(\"String\")))), EmptyTree))), Ident(TypeName(\"Unit\")), Block(List(ValDef(Modifiers(), TermName(\"numbers\"), AppliedTypeTree(Ident(TypeName(\"ArrayBuffer\")), List(Ident(TypeName(\"Int\")))), Apply(Ident(TermName(\"ArrayBuffer\")), List(Literal(Constant(1)), Literal(Constant(2)), Literal(Constant(3)), Literal(Constant(4)), Literal(Constant(5)), Literal(Constant(6)), Literal(Constant(7)), Literal(Constant(8)), Literal(Constant(9)))))), Apply(Ident(TermName(\"breakable\")), List(Apply(Select(Ident(TermName(\"numbers\")), TermName(\"foreach\")), List(Function(List(ValDef(Modifiers(PARAM), TermName(\"n\"), TypeTree(), EmptyTree)), Apply(Ident(TermName(\"breakable\")), List(Block(List(If(Apply(Select(Apply(Select(Ident(TermName(\"n\")), TermName(\"$percent\")), List(Literal(Constant(2)))), TermName(\"$eq$eq\")), List(Literal(Constant(0)))), Ident(TermName(\"break\")), Literal(Constant(()))), If(Apply(Select(Ident(TermName(\"n\")), TermName(\"$greater\")), List(Literal(Constant(7)))), Ident(TermName(\"break\")), Literal(Constant(())))), Apply(Ident(TermName(\"println\")), List(Apply(Select(Apply(Ident(TermName(\"List\")), List(Literal(Constant(\"odd number:\")), Ident(TermName(\"n\")))), TermName(\"mkString\")), List(Literal(Constant(\" \")))))))))))))))))))), Literal(Constant(())))"
}
