{
  "funcs": [
    {
      "Name": "__bswap_16",
      "Params": [
        {
          "Name": "__bsx",
          "Typ": "__uint16_t"
        }
      ],
      "Ret": "__uint16_t",
      "Body": "to __bench_mem = __bench_mem_end - __bench_mem_start;\n        std::cout \u003c\u003c \"{\\n  \\\"duration_us\\\": \" \u003c\u003c __bench_dur"
    },
    {
      "Name": "__uint16_identity",
      "Params": [
        {
          "Name": "__x",
          "Typ": "__uint16_t"
        }
      ],
      "Ret": "__uint16_t",
      "Body": "ench_mem = __ben"
    },
    {
      "Name": "__uint32_identity",
      "Params": [
        {
          "Name": "__x",
          "Typ": "__uint32_t"
        }
      ],
      "Ret": "__uint32_t",
      "Body": "tion_us\\\": \" \u003c\u003c "
    },
    {
      "Name": "__uint64_identity",
      "Params": [
        {
          "Name": "__x",
          "Typ": "__uint64_t"
        }
      ],
      "Ret": "__uint64_t",
      "Body": "\\\"name\\\": \\\"simp"
    },
    {
      "Name": "_now",
      "Params": null,
      "Ret": "int",
      "Body": "{\n    static long long seed = 0;\n    static bool seeded = false;\n    if (!seeded) {\n        const char* s = std::getenv(\"MOCHI_NOW_SEED\");\n        if (s \u0026\u0026 *s) { seed = std::atoll(s); seeded = true; }\n    }\n    if (seeded) {\n        seed = (seed * 1664525 + 1013904223) % 2147483647;\n        return static_cast\u003cint\u003e(seed);\n    }\n    return (int)(std::chrono::duration_cast\u003cstd::chrono::microseconds\u003e(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);\n"
    },
    {
      "Name": "_mem",
      "Params": null,
      "Ret": "int",
      "Body": "{\n    struct rusage usage{};\n    getrusage(RUSAGE_SELF, \u0026usage);\n#ifdef __APPLE__\n    return usage.ru_maxrss;\n#else\n    return usage.ru_maxrss * 1024;\n#endif\n"
    },
    {
      "Name": "main",
      "Params": null,
      "Ret": "int",
      "Body": "{\n    {\n        auto __bench_start = _now();\n        auto __bench_mem_start = _mem();\n        int n = 1000;\n        int s = 0;\n        for (int i = 1; i \u003c n; i++ ) {\n            s = (s + i);\n        }\n        auto __bench_end = _now();\n        auto __bench_mem_end = _mem();\n        auto __bench_dur = (__bench_end - __bench_start) / 1000;\n        auto __bench_mem = __bench_mem_end - __bench_mem_start;\n        std::cout \u003c\u003c \"{\\n  \\\"duration_us\\\": \" \u003c\u003c __bench_dur \u003c\u003c \",\\n  \\\"memory_bytes\\\": \" \u003c\u003c __bench_mem \u003c\u003c \",\\n  \\\"name\\\": \\\"simple\\\"\\n}\" \u003c\u003c std::endl;\n    }\n    return 0;\n"
    }
  ],
  "enums": null,
  "structs": null,
  "globals": [
    {
      "Name": "(i",
      "Typ": "for",
      "Value": ""
    },
    {
      "Name": "\\\"na",
      "Typ": "\u003c\u003c \",\\n",
      "Value": ""
    },
    {
      "Name": "td::endl",
      "Typ": "",
      "Value": ""
    }
  ],
  "source": "// Generated by Mochi transpiler v0.10.39 on 2025-07-25 02:17:18 GMT+7\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003csstream\u003e\n#include \u003ciomanip\u003e\n#include \u003ccmath\u003e\n#include \u003coptional\u003e\n#include \u003cvector\u003e\n#include \u003ccstdlib\u003e\n#include \u003cchrono\u003e\n#include \u003csys/resource.h\u003e\n\n\nstatic int _now() {\n    static long long seed = 0;\n    static bool seeded = false;\n    if (!seeded) {\n        const char* s = std::getenv(\"MOCHI_NOW_SEED\");\n        if (s \u0026\u0026 *s) { seed = std::atoll(s); seeded = true; }\n    }\n    if (seeded) {\n        seed = (seed * 1664525 + 1013904223) % 2147483647;\n        return static_cast\u003cint\u003e(seed);\n    }\n    return (int)(std::chrono::duration_cast\u003cstd::chrono::microseconds\u003e(std::chrono::system_clock::now().time_since_epoch()).count() % 2147483647);\n}\nstatic long _mem() {\n    struct rusage usage{};\n    getrusage(RUSAGE_SELF, \u0026usage);\n#ifdef __APPLE__\n    return usage.ru_maxrss;\n#else\n    return usage.ru_maxrss * 1024;\n#endif\n}\n\nint main();\n\nint main() {\n    {\n        auto __bench_start = _now();\n        auto __bench_mem_start = _mem();\n        int n = 1000;\n        int s = 0;\n        for (int i = 1; i \u003c n; i++ ) {\n            s = (s + i);\n        }\n        auto __bench_end = _now();\n        auto __bench_mem_end = _mem();\n        auto __bench_dur = (__bench_end - __bench_start) / 1000;\n        auto __bench_mem = __bench_mem_end - __bench_mem_start;\n        std::cout \u003c\u003c \"{\\n  \\\"duration_us\\\": \" \u003c\u003c __bench_dur \u003c\u003c \",\\n  \\\"memory_bytes\\\": \" \u003c\u003c __bench_mem \u003c\u003c \",\\n  \\\"name\\\": \\\"simple\\\"\\n}\" \u003c\u003c std::endl;\n    }\n    return 0;\n}\n"
}