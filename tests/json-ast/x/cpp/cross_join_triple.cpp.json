{
  "funcs": [
    {
      "Name": "main",
      "Params": null,
      "Ret": "int",
      "Body": "{\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c std::string(\"--- Cross Join of three lists ---\") \u003c\u003c std::endl;\n    for (auto c : combos) {\n        std::cout \u003c\u003c std::boolalpha \u003c\u003c c.n \u003c\u003c ' ' \u003c\u003c c.l \u003c\u003c ' ' \u003c\u003c c.b \u003c\u003c std::endl;\n    }\n    return 0;\n"
    }
  ],
  "enums": null,
  "structs": [
    {
      "Name": "CombosItem",
      "Fields": [
        {
          "Name": "n",
          "Typ": "int"
        },
        {
          "Name": "l",
          "Typ": "string"
        },
        {
          "Name": "b",
          "Typ": "bool"
        }
      ]
    }
  ],
  "globals": [
    {
      "Name": "nums",
      "Typ": "",
      "Value": "std::vector{1, 2}"
    },
    {
      "Name": "letters",
      "Typ": "",
      "Value": "std::vector{std::string(\"A\"), std::string(\"B\")}"
    },
    {
      "Name": "bools",
      "Typ": "",
      "Value": "std::vector{true, false}"
    },
    {
      "Name": "combos",
      "Typ": "list\u003cCombosItem\u003e",
      "Value": "[]{ std::vector\u003cCombosItem\u003e __items;\nfor (auto n : nums) {\nfor (auto l : letters) {\nfor (auto b : bools) {\n        __items.push_back(CombosItem{.n = n, .l = l, .b = b});\n}\n}\n}\nreturn __items; }("
    },
    {
      "Name": "std::vector\u003cCombosItem\u003e",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "n",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "l",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "b",
      "Typ": "",
      "Value": ""
    }
  ],
  "source": "// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:19:48 GMT+7\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003cvector\u003e\n#include \u003cmap\u003e\n#include \u003csstream\u003e\n#include \u003ciomanip\u003e\n\n\nstruct CombosItem {\n    int n;\n    std::string l;\n    bool b;\n};\n\nauto nums = std::vector{1, 2};\nauto letters = std::vector{std::string(\"A\"), std::string(\"B\")};\nauto bools = std::vector{true, false};\nstd::vector\u003cCombosItem\u003e combos = ([]{ std::vector\u003cCombosItem\u003e __items;\nfor (auto n : nums) {\nfor (auto l : letters) {\nfor (auto b : bools) {\n        __items.push_back(CombosItem{.n = n, .l = l, .b = b});\n}\n}\n}\nreturn __items; }());\n\nint main() {\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c std::string(\"--- Cross Join of three lists ---\") \u003c\u003c std::endl;\n    for (auto c : combos) {\n        std::cout \u003c\u003c std::boolalpha \u003c\u003c c.n \u003c\u003c ' ' \u003c\u003c c.l \u003c\u003c ' ' \u003c\u003c c.b \u003c\u003c std::endl;\n    }\n    return 0;\n}\n"
}