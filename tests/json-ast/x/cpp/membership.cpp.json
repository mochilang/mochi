{
  "funcs": [
    {
      "Name": "main",
      "Params": null,
      "Ret": "int",
      "Body": "{\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c ([\u0026](const auto\u0026 c, const auto\u0026 v){ if constexpr(std::is_same_v\u003cstd::decay_t\u003cdecltype(c)\u003e, std::string\u003e) { return c.find(v) != std::string::npos; } else if constexpr(requires { c.find(v); }) { return c.find(v) != c.end(); } else { return std::find(c.begin(), c.end(), v) != c.end(); } })(nums, 2) \u003c\u003c std::endl;\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c ([\u0026](const auto\u0026 c, const auto\u0026 v){ if constexpr(std::is_same_v\u003cstd::decay_t\u003cdecltype(c)\u003e, std::string\u003e) { return c.find(v) != std::string::npos; } else if constexpr(requires { c.find(v); }) { return c.find(v) != c.end(); } else { return std::find(c.begin(), c.end(), v) != c.end(); } })(nums, 4) \u003c\u003c std::endl;\n    return 0;\n"
    }
  ],
  "enums": null,
  "structs": null,
  "globals": [
    {
      "Name": "nums",
      "Typ": "",
      "Value": "std::vector{1, 2, 3}"
    }
  ],
  "source": "// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:20:12 GMT+7\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003cvector\u003e\n#include \u003csstream\u003e\n#include \u003ciomanip\u003e\n#include \u003calgorithm\u003e\n#include \u003ctype_traits\u003e\n\n\nauto nums = std::vector{1, 2, 3};\n\nint main() {\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c ([\u0026](const auto\u0026 c, const auto\u0026 v){ if constexpr(std::is_same_v\u003cstd::decay_t\u003cdecltype(c)\u003e, std::string\u003e) { return c.find(v) != std::string::npos; } else if constexpr(requires { c.find(v); }) { return c.find(v) != c.end(); } else { return std::find(c.begin(), c.end(), v) != c.end(); } })(nums, 2) \u003c\u003c std::endl;\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c ([\u0026](const auto\u0026 c, const auto\u0026 v){ if constexpr(std::is_same_v\u003cstd::decay_t\u003cdecltype(c)\u003e, std::string\u003e) { return c.find(v) != std::string::npos; } else if constexpr(requires { c.find(v); }) { return c.find(v) != c.end(); } else { return std::find(c.begin(), c.end(), v) != c.end(); } })(nums, 4) \u003c\u003c std::endl;\n    return 0;\n}\n"
}