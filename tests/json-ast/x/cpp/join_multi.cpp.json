{
  "funcs": [
    {
      "Name": "__uint16_identity",
      "Params": [
        {
          "Name": "__x",
          "Typ": "__uint16_t"
        }
      ],
      "Ret": "__uint16_t",
      "Body": "ha \u003c\u003c r.name \u003c\u003c "
    },
    {
      "Name": "__uint32_identity",
      "Params": [
        {
          "Name": "__x",
          "Typ": "__uint32_t"
        }
      ],
      "Ret": "__uint32_t",
      "Body": "   }\n    return "
    },
    {
      "Name": "main",
      "Params": null,
      "Ret": "int",
      "Body": "{\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c std::string(\"--- Multi Join ---\") \u003c\u003c std::endl;\n    for (auto r : result) {\n        std::cout \u003c\u003c std::boolalpha \u003c\u003c r.name \u003c\u003c ' ' \u003c\u003c std::string(\"bought item\") \u003c\u003c ' ' \u003c\u003c r.sku \u003c\u003c std::endl;\n    }\n    return 0;\n"
    }
  ],
  "enums": null,
  "structs": [
    {
      "Name": "CustomersItem",
      "Fields": [
        {
          "Name": "id",
          "Typ": "int"
        },
        {
          "Name": "name",
          "Typ": "string"
        }
      ]
    },
    {
      "Name": "OrdersItem",
      "Fields": [
        {
          "Name": "id",
          "Typ": "int"
        },
        {
          "Name": "customerId",
          "Typ": "int"
        }
      ]
    },
    {
      "Name": "ItemsItem",
      "Fields": [
        {
          "Name": "orderId",
          "Typ": "int"
        },
        {
          "Name": "sku",
          "Typ": "string"
        }
      ]
    },
    {
      "Name": "ResultItem",
      "Fields": [
        {
          "Name": "name",
          "Typ": "string"
        },
        {
          "Name": "sku",
          "Typ": "string"
        }
      ]
    }
  ],
  "globals": [
    {
      "Name": "em{.name",
      "Typ": "",
      "Value": "c.name, .sku = i.sku}"
    },
    {
      "Name": "customers",
      "Typ": "list\u003cCustomersItem\u003e",
      "Value": "std::vector{CustomersItem{.id = 1, .name = std::string(\"Alice\")}, CustomersItem{.id = 2, .name = std::string(\"Bob\")}}"
    },
    {
      "Name": "orders",
      "Typ": "list\u003cOrdersItem\u003e",
      "Value": "std::vector{OrdersItem{.id = 100, .customerId = 1}, OrdersItem{.id = 101, .customerId = 2}}"
    },
    {
      "Name": "items",
      "Typ": "list\u003cItemsItem\u003e",
      "Value": "std::vector{ItemsItem{.orderId = 100, .sku = std::string(\"a\")}, ItemsItem{.orderId = 101, .sku = std::string(\"b\")}}"
    },
    {
      "Name": "result",
      "Typ": "list\u003cResultItem\u003e",
      "Value": "[]{ std::vector\u003cResultItem\u003e __items;\nfor (auto o : orders) {\nfor (auto c : customers) {\nfor (auto i : items) {\n    if(((o.customerId == c.id) \u0026\u0026 (o.id == i.orderId))) {\n        __items.push_back(ResultItem{.name = c.name, .sku = i.sku});\n    }\n}\n}\n}\nreturn __items; }("
    },
    {
      "Name": "std::vector\u003cResultItem\u003e",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "o",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "c",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "i",
      "Typ": "",
      "Value": ""
    }
  ],
  "source": "// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:20:01 GMT+7\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003cvector\u003e\n#include \u003cmap\u003e\n#include \u003csstream\u003e\n#include \u003ciomanip\u003e\n\n\nstruct CustomersItem {\n    int id;\n    std::string name;\n};\n\nstruct OrdersItem {\n    int id;\n    int customerId;\n};\n\nstruct ItemsItem {\n    int orderId;\n    std::string sku;\n};\n\nstruct ResultItem {\n    std::string name;\n    std::string sku;\n};\n\nstd::vector\u003cCustomersItem\u003e customers = std::vector{CustomersItem{.id = 1, .name = std::string(\"Alice\")}, CustomersItem{.id = 2, .name = std::string(\"Bob\")}};\nstd::vector\u003cOrdersItem\u003e orders = std::vector{OrdersItem{.id = 100, .customerId = 1}, OrdersItem{.id = 101, .customerId = 2}};\nstd::vector\u003cItemsItem\u003e items = std::vector{ItemsItem{.orderId = 100, .sku = std::string(\"a\")}, ItemsItem{.orderId = 101, .sku = std::string(\"b\")}};\nstd::vector\u003cResultItem\u003e result = ([]{ std::vector\u003cResultItem\u003e __items;\nfor (auto o : orders) {\nfor (auto c : customers) {\nfor (auto i : items) {\n    if(((o.customerId == c.id) \u0026\u0026 (o.id == i.orderId))) {\n        __items.push_back(ResultItem{.name = c.name, .sku = i.sku});\n    }\n}\n}\n}\nreturn __items; }());\n\nint main() {\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c std::string(\"--- Multi Join ---\") \u003c\u003c std::endl;\n    for (auto r : result) {\n        std::cout \u003c\u003c std::boolalpha \u003c\u003c r.name \u003c\u003c ' ' \u003c\u003c std::string(\"bought item\") \u003c\u003c ' ' \u003c\u003c r.sku \u003c\u003c std::endl;\n    }\n    return 0;\n}\n"
}