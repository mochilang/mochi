{
  "funcs": [
    {
      "Name": "main",
      "Params": null,
      "Ret": "int",
      "Body": "{\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c (([\u0026](const auto\u0026 c){ if constexpr(std::is_same_v\u003cstd::decay_t\u003cdecltype(c)\u003e, std::string\u003e) return c.substr(0, prefix.size() - 0); else return std::vector\u003ctypename std::decay_t\u003cdecltype(c)\u003e::value_type\u003e(c.begin()+0, c.begin()+prefix.size()); })(s1) == prefix) \u003c\u003c std::endl;\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c (([\u0026](const auto\u0026 c){ if constexpr(std::is_same_v\u003cstd::decay_t\u003cdecltype(c)\u003e, std::string\u003e) return c.substr(0, prefix.size() - 0); else return std::vector\u003ctypename std::decay_t\u003cdecltype(c)\u003e::value_type\u003e(c.begin()+0, c.begin()+prefix.size()); })(s2) == prefix) \u003c\u003c std::endl;\n    return 0;\n"
    }
  ],
  "enums": null,
  "structs": null,
  "globals": [
    {
      "Name": "prefix",
      "Typ": "",
      "Value": "std::string(\"fore\""
    },
    {
      "Name": "s1",
      "Typ": "",
      "Value": "std::string(\"forest\""
    },
    {
      "Name": "s2",
      "Typ": "",
      "Value": "std::string(\"desert\""
    }
  ],
  "source": "// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:20:21 GMT+7\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003csstream\u003e\n#include \u003ciomanip\u003e\n#include \u003cvector\u003e\n#include \u003ctype_traits\u003e\n\n\nauto prefix = std::string(\"fore\");\nauto s1 = std::string(\"forest\");\nauto s2 = std::string(\"desert\");\n\nint main() {\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c (([\u0026](const auto\u0026 c){ if constexpr(std::is_same_v\u003cstd::decay_t\u003cdecltype(c)\u003e, std::string\u003e) return c.substr(0, prefix.size() - 0); else return std::vector\u003ctypename std::decay_t\u003cdecltype(c)\u003e::value_type\u003e(c.begin()+0, c.begin()+prefix.size()); })(s1) == prefix) \u003c\u003c std::endl;\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c (([\u0026](const auto\u0026 c){ if constexpr(std::is_same_v\u003cstd::decay_t\u003cdecltype(c)\u003e, std::string\u003e) return c.substr(0, prefix.size() - 0); else return std::vector\u003ctypename std::decay_t\u003cdecltype(c)\u003e::value_type\u003e(c.begin()+0, c.begin()+prefix.size()); })(s2) == prefix) \u003c\u003c std::endl;\n    return 0;\n}\n"
}