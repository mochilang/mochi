{
  "funcs": [
    {
      "Name": "__bswap_16",
      "Params": [
        {
          "Name": "__bsx",
          "Typ": "__uint16_t"
        }
      ],
      "Ret": "__uint16_t",
      "Body": "ut \u003c\u003c std::boolalpha \u003c\u003c std::string(\"--- Top products (excluding most expensive) ---\") \u003c\u003c std::endl;\n    for (auto"
    },
    {
      "Name": "__uint16_identity",
      "Params": [
        {
          "Name": "__x",
          "Typ": "__uint16_t"
        }
      ],
      "Ret": "__uint16_t",
      "Body": "std::boolalpha \u003c"
    },
    {
      "Name": "__uint32_identity",
      "Params": [
        {
          "Name": "__x",
          "Typ": "__uint32_t"
        }
      ],
      "Ret": "__uint32_t",
      "Body": "\u003c\u003c std::endl;\n  "
    },
    {
      "Name": "__uint64_identity",
      "Params": [
        {
          "Name": "__x",
          "Typ": "__uint64_t"
        }
      ],
      "Ret": "__uint64_t",
      "Body": "ha \u003c\u003c item.name "
    },
    {
      "Name": "main",
      "Params": null,
      "Ret": "int",
      "Body": "{\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c std::string(\"--- Top products (excluding most expensive) ---\") \u003c\u003c std::endl;\n    for (auto item : expensive) {\n        std::cout \u003c\u003c std::boolalpha \u003c\u003c item.name \u003c\u003c ' ' \u003c\u003c std::string(\"costs $\") \u003c\u003c ' ' \u003c\u003c item.price \u003c\u003c std::endl;\n    }\n    return 0;\n"
    }
  ],
  "enums": [
    {
      "Name": "_Ord",
      "Variants": [
        "equivalent",
        "less",
        "greater"
      ]
    }
  ],
  "structs": [
    {
      "Name": "ProductsItem",
      "Fields": [
        {
          "Name": "name",
          "Typ": "string"
        },
        {
          "Name": "price",
          "Typ": "int"
        }
      ]
    }
  ],
  "globals": [
    {
      "Name": "++_",
      "Typ": ".size();",
      "Value": ""
    },
    {
      "Name": "\u003c",
      "Typ": "::boolalpha",
      "Value": ""
    },
    {
      "Name": "::string(\"cos",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "products",
      "Typ": "list\u003cProductsItem\u003e",
      "Value": "std::vector{ProductsItem{.name = std::string(\"Laptop\"), .price = 1500}, ProductsItem{.name = std::string(\"Smartphone\"), .price = 900}, ProductsItem{.name = std::string(\"Tablet\"), .price = 600}, ProductsItem{.name = std::string(\"Monitor\"), .price = 300}, ProductsItem{.name = std::string(\"Keyboard\"), .price = 100}, ProductsItem{.name = std::string(\"Mouse\"), .price = 50}, ProductsItem{.name = std::string(\"Headphones\"), .price = 200}}"
    },
    {
      "Name": "expensive",
      "Typ": "list\u003cProductsItem\u003e",
      "Value": "[]{ std::vector\u003cstd::pair\u003cint, ProductsItem\u003e\u003e __tmp;\nfor (auto p : products) {\n        __tmp.emplace_back(p.price, p);\n}\nstd::sort(__tmp.begin(), __tmp.end(), [](const auto\u0026 a,const auto\u0026 b){ return a.first \u003e b.first; });\nstd::vector\u003cProductsItem\u003e __items;\nauto __skip = 1;\nauto __take = 3;\nfor(size_t __i=0; __i\u003c__tmp.size(); ++__i){\n    if(__i \u003c static_cast\u003csize_t\u003e(__skip)) continue;\n    if(__items.size() \u003e= static_cast\u003csize_t\u003e(__take)) break;\n    __items.push_back(__tmp[__i].second);\n}\nreturn __items; }("
    },
    {
      "Name": "ProductsItem\u003e\u003e",
      "Typ": "std::vector\u003cstd::pair\u003cint,",
      "Value": ""
    },
    {
      "Name": "p",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "std::vector\u003cProductsItem\u003e",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "__skip",
      "Typ": "",
      "Value": "1"
    },
    {
      "Name": "__take",
      "Typ": "",
      "Value": "3"
    },
    {
      "Name": "__i",
      "Typ": "int",
      "Value": ""
    }
  ],
  "source": "// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:19:49 GMT+7\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003cvector\u003e\n#include \u003cmap\u003e\n#include \u003calgorithm\u003e\n#include \u003csstream\u003e\n#include \u003ciomanip\u003e\n\n\nstruct ProductsItem {\n    std::string name;\n    int price;\n};\n\nstd::vector\u003cProductsItem\u003e products = std::vector{ProductsItem{.name = std::string(\"Laptop\"), .price = 1500}, ProductsItem{.name = std::string(\"Smartphone\"), .price = 900}, ProductsItem{.name = std::string(\"Tablet\"), .price = 600}, ProductsItem{.name = std::string(\"Monitor\"), .price = 300}, ProductsItem{.name = std::string(\"Keyboard\"), .price = 100}, ProductsItem{.name = std::string(\"Mouse\"), .price = 50}, ProductsItem{.name = std::string(\"Headphones\"), .price = 200}};\nstd::vector\u003cProductsItem\u003e expensive = ([]{ std::vector\u003cstd::pair\u003cint, ProductsItem\u003e\u003e __tmp;\nfor (auto p : products) {\n        __tmp.emplace_back(p.price, p);\n}\nstd::sort(__tmp.begin(), __tmp.end(), [](const auto\u0026 a,const auto\u0026 b){ return a.first \u003e b.first; });\nstd::vector\u003cProductsItem\u003e __items;\nauto __skip = 1;\nauto __take = 3;\nfor(size_t __i=0; __i\u003c__tmp.size(); ++__i){\n    if(__i \u003c static_cast\u003csize_t\u003e(__skip)) continue;\n    if(__items.size() \u003e= static_cast\u003csize_t\u003e(__take)) break;\n    __items.push_back(__tmp[__i].second);\n}\nreturn __items; }());\n\nint main() {\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c std::string(\"--- Top products (excluding most expensive) ---\") \u003c\u003c std::endl;\n    for (auto item : expensive) {\n        std::cout \u003c\u003c std::boolalpha \u003c\u003c item.name \u003c\u003c ' ' \u003c\u003c std::string(\"costs $\") \u003c\u003c ' ' \u003c\u003c item.price \u003c\u003c std::endl;\n    }\n    return 0;\n}\n"
}