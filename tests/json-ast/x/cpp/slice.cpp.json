{
  "funcs": [
    {
      "Name": "main",
      "Params": null,
      "Ret": "int",
      "Body": "{\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c ([\u0026](const auto\u0026 c){ if constexpr(std::is_same_v\u003cstd::decay_t\u003cdecltype(c)\u003e, std::string\u003e) return c.substr(1, 3 - 1); else return std::vector\u003ctypename std::decay_t\u003cdecltype(c)\u003e::value_type\u003e(c.begin()+1, c.begin()+3); })(std::vector{1, 2, 3}) \u003c\u003c std::endl;\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c ([\u0026](const auto\u0026 c){ if constexpr(std::is_same_v\u003cstd::decay_t\u003cdecltype(c)\u003e, std::string\u003e) return c.substr(0, 2 - 0); else return std::vector\u003ctypename std::decay_t\u003cdecltype(c)\u003e::value_type\u003e(c.begin()+0, c.begin()+2); })(std::vector{1, 2, 3}) \u003c\u003c std::endl;\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c ([\u0026](const auto\u0026 c){ if constexpr(std::is_same_v\u003cstd::decay_t\u003cdecltype(c)\u003e, std::string\u003e) return c.substr(1, 4 - 1); else return std::vector\u003ctypename std::decay_t\u003cdecltype(c)\u003e::value_type\u003e(c.begin()+1, c.begin()+4); })(std::string(\"hello\")) \u003c\u003c std::endl;\n    return 0;\n"
    }
  ],
  "enums": null,
  "structs": null,
  "globals": null,
  "source": "// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:20:17 GMT+7\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003csstream\u003e\n#include \u003ciomanip\u003e\n#include \u003cvector\u003e\n#include \u003ctype_traits\u003e\n\n\nint main() {\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c ([\u0026](const auto\u0026 c){ if constexpr(std::is_same_v\u003cstd::decay_t\u003cdecltype(c)\u003e, std::string\u003e) return c.substr(1, 3 - 1); else return std::vector\u003ctypename std::decay_t\u003cdecltype(c)\u003e::value_type\u003e(c.begin()+1, c.begin()+3); })(std::vector{1, 2, 3}) \u003c\u003c std::endl;\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c ([\u0026](const auto\u0026 c){ if constexpr(std::is_same_v\u003cstd::decay_t\u003cdecltype(c)\u003e, std::string\u003e) return c.substr(0, 2 - 0); else return std::vector\u003ctypename std::decay_t\u003cdecltype(c)\u003e::value_type\u003e(c.begin()+0, c.begin()+2); })(std::vector{1, 2, 3}) \u003c\u003c std::endl;\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c ([\u0026](const auto\u0026 c){ if constexpr(std::is_same_v\u003cstd::decay_t\u003cdecltype(c)\u003e, std::string\u003e) return c.substr(1, 4 - 1); else return std::vector\u003ctypename std::decay_t\u003cdecltype(c)\u003e::value_type\u003e(c.begin()+1, c.begin()+4); })(std::string(\"hello\")) \u003c\u003c std::endl;\n    return 0;\n}\n"
}