{
  "funcs": [
    {
      "Name": "__bswap_16",
      "Params": [
        {
          "Name": "__bsx",
          "Typ": "__uint16_t"
        }
      ],
      "Ret": "__uint16_t",
      "Body": "out \u003c\u003c std::boolalpha \u003c\u003c std::string(\"Order\") \u003c\u003c ' ' \u003c\u003c entry.orderId \u003c\u003c ' ' \u003c\u003c std::string(\"(customerId:\") \u003c\u003c ' '"
    },
    {
      "Name": "__uint16_identity",
      "Params": [
        {
          "Name": "__x",
          "Typ": "__uint16_t"
        }
      ],
      "Ret": "__uint16_t",
      "Body": " std::boolalpha "
    },
    {
      "Name": "__uint32_identity",
      "Params": [
        {
          "Name": "__x",
          "Typ": "__uint32_t"
        }
      ],
      "Ret": "__uint32_t",
      "Body": "ring(\"(customerI"
    },
    {
      "Name": "__uint64_identity",
      "Params": [
        {
          "Name": "__x",
          "Typ": "__uint64_t"
        }
      ],
      "Ret": "__uint64_t",
      "Body": "al: $\") \u003c\u003c ' ' \u003c"
    },
    {
      "Name": "main",
      "Params": null,
      "Ret": "int",
      "Body": "{\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c std::string(\"--- Cross Join: All order-customer pairs ---\") \u003c\u003c std::endl;\n    for (auto entry : result) {\n        std::cout \u003c\u003c std::boolalpha \u003c\u003c std::string(\"Order\") \u003c\u003c ' ' \u003c\u003c entry.orderId \u003c\u003c ' ' \u003c\u003c std::string(\"(customerId:\") \u003c\u003c ' ' \u003c\u003c entry.orderCustomerId \u003c\u003c ' ' \u003c\u003c std::string(\", total: $\") \u003c\u003c ' ' \u003c\u003c entry.orderTotal \u003c\u003c ' ' \u003c\u003c std::string(\") paired with\") \u003c\u003c ' ' \u003c\u003c entry.pairedCustomerName \u003c\u003c std::endl;\n    }\n    return 0;\n"
    }
  ],
  "enums": [
    {
      "Name": "_Ord",
      "Variants": [
        "equivalent",
        "less",
        "greater"
      ]
    }
  ],
  "structs": [
    {
      "Name": "CustomersItem",
      "Fields": [
        {
          "Name": "id",
          "Typ": "int"
        },
        {
          "Name": "name",
          "Typ": "string"
        }
      ]
    },
    {
      "Name": "OrdersItem",
      "Fields": [
        {
          "Name": "id",
          "Typ": "int"
        },
        {
          "Name": "customerId",
          "Typ": "int"
        },
        {
          "Name": "total",
          "Typ": "int"
        }
      ]
    },
    {
      "Name": "ResultItem",
      "Fields": [
        {
          "Name": "orderId",
          "Typ": "int"
        },
        {
          "Name": "orderCustomerId",
          "Typ": "int"
        },
        {
          "Name": "pairedCustomerName",
          "Typ": "string"
        },
        {
          "Name": "orderTotal",
          "Typ": "int"
        }
      ]
    }
  ],
  "globals": [
    {
      "Name": ".orderTotal",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "total:",
      "Typ": "ng(\",",
      "Value": ""
    },
    {
      "Name": "'",
      "Typ": "Total \u003c\u003c '",
      "Value": ""
    },
    {
      "Name": "customers",
      "Typ": "list\u003cCustomersItem\u003e",
      "Value": "std::vector{CustomersItem{.id = 1, .name = std::string(\"Alice\")}, CustomersItem{.id = 2, .name = std::string(\"Bob\")}, CustomersItem{.id = 3, .name = std::string(\"Charlie\")}}"
    },
    {
      "Name": "orders",
      "Typ": "list\u003cOrdersItem\u003e",
      "Value": "std::vector{OrdersItem{.id = 100, .customerId = 1, .total = 250}, OrdersItem{.id = 101, .customerId = 2, .total = 125}, OrdersItem{.id = 102, .customerId = 1, .total = 300}}"
    },
    {
      "Name": "result",
      "Typ": "list\u003cResultItem\u003e",
      "Value": "[]{ std::vector\u003cResultItem\u003e __items;\nfor (auto o : orders) {\nfor (auto c : customers) {\n        __items.push_back(ResultItem{.orderId = o.id, .orderCustomerId = o.customerId, .pairedCustomerName = c.name, .orderTotal = o.total});\n}\n}\nreturn __items; }("
    },
    {
      "Name": "std::vector\u003cResultItem\u003e",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "o",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "c",
      "Typ": "",
      "Value": ""
    }
  ],
  "source": "// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:19:47 GMT+7\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003cvector\u003e\n#include \u003cmap\u003e\n#include \u003csstream\u003e\n#include \u003ciomanip\u003e\n\n\nstruct CustomersItem {\n    int id;\n    std::string name;\n};\n\nstruct OrdersItem {\n    int id;\n    int customerId;\n    int total;\n};\n\nstruct ResultItem {\n    int orderId;\n    int orderCustomerId;\n    std::string pairedCustomerName;\n    int orderTotal;\n};\n\nstd::vector\u003cCustomersItem\u003e customers = std::vector{CustomersItem{.id = 1, .name = std::string(\"Alice\")}, CustomersItem{.id = 2, .name = std::string(\"Bob\")}, CustomersItem{.id = 3, .name = std::string(\"Charlie\")}};\nstd::vector\u003cOrdersItem\u003e orders = std::vector{OrdersItem{.id = 100, .customerId = 1, .total = 250}, OrdersItem{.id = 101, .customerId = 2, .total = 125}, OrdersItem{.id = 102, .customerId = 1, .total = 300}};\nstd::vector\u003cResultItem\u003e result = ([]{ std::vector\u003cResultItem\u003e __items;\nfor (auto o : orders) {\nfor (auto c : customers) {\n        __items.push_back(ResultItem{.orderId = o.id, .orderCustomerId = o.customerId, .pairedCustomerName = c.name, .orderTotal = o.total});\n}\n}\nreturn __items; }());\n\nint main() {\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c std::string(\"--- Cross Join: All order-customer pairs ---\") \u003c\u003c std::endl;\n    for (auto entry : result) {\n        std::cout \u003c\u003c std::boolalpha \u003c\u003c std::string(\"Order\") \u003c\u003c ' ' \u003c\u003c entry.orderId \u003c\u003c ' ' \u003c\u003c std::string(\"(customerId:\") \u003c\u003c ' ' \u003c\u003c entry.orderCustomerId \u003c\u003c ' ' \u003c\u003c std::string(\", total: $\") \u003c\u003c ' ' \u003c\u003c entry.orderTotal \u003c\u003c ' ' \u003c\u003c std::string(\") paired with\") \u003c\u003c ' ' \u003c\u003c entry.pairedCustomerName \u003c\u003c std::endl;\n    }\n    return 0;\n}\n"
}