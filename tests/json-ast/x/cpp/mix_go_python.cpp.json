{
  "funcs": [
    {
      "Name": "__bswap_16",
      "Params": [
        {
          "Name": "__bsx",
          "Typ": "__uint16_t"
        }
      ],
      "Ret": "__uint16_t",
      "Body": "ringstream __ss; double __dv = area; if(std::floor(__dv) == __dv) { __ss\u003c\u003cstd::fixed\u003c\u003cstd::setprecision(1)\u003c\u003c__dv; "
    },
    {
      "Name": "__uint16_identity",
      "Params": [
        {
          "Name": "__x",
          "Typ": "__uint16_t"
        }
      ],
      "Ret": "__uint16_t",
      "Body": "ream __ss; doubl"
    },
    {
      "Name": "__uint32_identity",
      "Params": [
        {
          "Name": "__x",
          "Typ": "__uint32_t"
        }
      ],
      "Ret": "__uint32_t",
      "Body": "td::setprecision"
    },
    {
      "Name": "__uint64_identity",
      "Params": [
        {
          "Name": "__x",
          "Typ": "__uint64_t"
        }
      ],
      "Ret": "__uint64_t",
      "Body": ")\u003c\u003c__dv; } std::"
    },
    {
      "Name": "main",
      "Params": null,
      "Ret": "int",
      "Body": "{\n    std::cout \u003c\u003c std::string(\"Hello\");\n    std::cout \u003c\u003c \" \";\n    std::cout \u003c\u003c (name + std::string(\"!\"));\n    std::cout \u003c\u003c std::endl;\n    std::cout \u003c\u003c std::string(\"The area of a circle with radius\");\n    std::cout \u003c\u003c \" \";\n    { std::ostringstream __ss; double __dv = radius; if(std::floor(__dv) == __dv) { __ss\u003c\u003cstd::fixed\u003c\u003cstd::setprecision(1)\u003c\u003c__dv; } else { __ss\u003c\u003cstd::defaultfloat\u003c\u003cstd::setprecision(17)\u003c\u003c__dv; } std::cout \u003c\u003c __ss.str(); }\n    std::cout \u003c\u003c \" \";\n    std::cout \u003c\u003c std::string(\"is\");\n    std::cout \u003c\u003c \" \";\n    { std::ostringstream __ss; double __dv = area; if(std::floor(__dv) == __dv) { __ss\u003c\u003cstd::fixed\u003c\u003cstd::setprecision(1)\u003c\u003c__dv; } else { __ss\u003c\u003cstd::defaultfloat\u003c\u003cstd::setprecision(17)\u003c\u003c__dv; } std::cout \u003c\u003c __ss.str(); }\n    std::cout \u003c\u003c std::endl;\n    return 0;\n"
    }
  ],
  "enums": null,
  "structs": null,
  "globals": [
    {
      "Name": "fixed\u003c\u003cstd::",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "cision(17)\u003c\u003c_",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "}",
      "Typ": "str();",
      "Value": ""
    },
    {
      "Name": "rawName",
      "Typ": "string",
      "Value": "std::string(\"   alice  \""
    },
    {
      "Name": "radius",
      "Typ": "float",
      "Value": ""
    },
    {
      "Name": "name",
      "Typ": "string",
      "Value": "[]{ std::string __s = ([]{ std::string __s = rawName; size_t __b = 0; while(__b \u003c __s.size() \u0026\u0026 std::isspace(static_cast\u003cunsigned char\u003e(__s[__b]))) ++__b; size_t __e = __s.size(); while(__e \u003e __b \u0026\u0026 std::isspace(static_cast\u003cunsigned char\u003e(__s[__e-1]))) --__e; return __s.substr(__b, __e-__b); }()); for(auto \u0026__c : __s){ __c = std::toupper(static_cast\u003cunsigned char\u003e(__c)); } return __s; }("
    },
    {
      "Name": "__s",
      "Typ": "string",
      "Value": "[]{ std::string __s = rawName; size_t __b = 0; while(__b \u003c __s.size() \u0026\u0026 std::isspace(static_cast\u003cunsigned char\u003e(__s[__b]))) ++__b; size_t __e = __s.size(); while(__e \u003e __b \u0026\u0026 std::isspace(static_cast\u003cunsigned char\u003e(__s[__e-1]))) --__e; return __s.substr(__b, __e-__b); }("
    },
    {
      "Name": "__s",
      "Typ": "string",
      "Value": ""
    },
    {
      "Name": "__b",
      "Typ": "int",
      "Value": ""
    },
    {
      "Name": "__e",
      "Typ": "int",
      "Value": "__s.size("
    },
    {
      "Name": "\u0026__c",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "area",
      "Typ": "float",
      "Value": "3.141592653589793 * std::pow(radius, 2.0"
    }
  ],
  "source": "// Generated by Mochi transpiler v0.10.36 on 2025-07-22 16:56:01 GMT+7\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003ccctype\u003e\n#include \u003ccmath\u003e\n#include \u003csstream\u003e\n#include \u003ciomanip\u003e\n#include \u003coptional\u003e\n#include \u003cvector\u003e\n\n\n\nstd::string rawName = std::string(\"   alice  \");\ndouble radius = 3.0;\nstd::string name = ([]{ std::string __s = ([]{ std::string __s = rawName; size_t __b = 0; while(__b \u003c __s.size() \u0026\u0026 std::isspace(static_cast\u003cunsigned char\u003e(__s[__b]))) ++__b; size_t __e = __s.size(); while(__e \u003e __b \u0026\u0026 std::isspace(static_cast\u003cunsigned char\u003e(__s[__e-1]))) --__e; return __s.substr(__b, __e-__b); }()); for(auto \u0026__c : __s){ __c = std::toupper(static_cast\u003cunsigned char\u003e(__c)); } return __s; }());\ndouble area = (3.141592653589793 * std::pow(radius, 2.0));\n\nint main() {\n    std::cout \u003c\u003c std::string(\"Hello\");\n    std::cout \u003c\u003c \" \";\n    std::cout \u003c\u003c (name + std::string(\"!\"));\n    std::cout \u003c\u003c std::endl;\n    std::cout \u003c\u003c std::string(\"The area of a circle with radius\");\n    std::cout \u003c\u003c \" \";\n    { std::ostringstream __ss; double __dv = radius; if(std::floor(__dv) == __dv) { __ss\u003c\u003cstd::fixed\u003c\u003cstd::setprecision(1)\u003c\u003c__dv; } else { __ss\u003c\u003cstd::defaultfloat\u003c\u003cstd::setprecision(17)\u003c\u003c__dv; } std::cout \u003c\u003c __ss.str(); }\n    std::cout \u003c\u003c \" \";\n    std::cout \u003c\u003c std::string(\"is\");\n    std::cout \u003c\u003c \" \";\n    { std::ostringstream __ss; double __dv = area; if(std::floor(__dv) == __dv) { __ss\u003c\u003cstd::fixed\u003c\u003cstd::setprecision(1)\u003c\u003c__dv; } else { __ss\u003c\u003cstd::defaultfloat\u003c\u003cstd::setprecision(17)\u003c\u003c__dv; } std::cout \u003c\u003c __ss.str(); }\n    std::cout \u003c\u003c std::endl;\n    return 0;\n}\n"
}