{
  "funcs": [
    {
      "Name": "wcschr",
      "Params": [
        {
          "Name": "__p",
          "Typ": "wchar_t"
        },
        {
          "Name": "__c",
          "Typ": "wchar_t"
        }
      ],
      "Ret": "wchar_t",
      "Body": "::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" "
    },
    {
      "Name": "wcspbrk",
      "Params": [
        {
          "Name": "__s1",
          "Typ": "wchar_t"
        },
        {
          "Name": "__s2",
          "Typ": "wchar_t"
        }
      ],
      "Ret": "wchar_t",
      "Body": "c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c"
    },
    {
      "Name": "wcsrchr",
      "Params": [
        {
          "Name": "__p",
          "Typ": "wchar_t"
        },
        {
          "Name": "__c",
          "Typ": "wchar_t"
        }
      ],
      "Ret": "wchar_t",
      "Body": "';\n    return os;\n}\n\nstd::vector\u003cNationItem\u003e nation = st"
    },
    {
      "Name": "wcsstr",
      "Params": [
        {
          "Name": "__s1",
          "Typ": "wchar_t"
        },
        {
          "Name": "__s2",
          "Typ": "wchar_t"
        }
      ],
      "Ret": "wchar_t",
      "Body": "\")}};\nstd::vector\u003cCustomerItem\u003e customer = std::vector{Cu"
    },
    {
      "Name": "wmemchr",
      "Params": [
        {
          "Name": "__p",
          "Typ": "wchar_t"
        },
        {
          "Name": "__c",
          "Typ": "wchar_t"
        },
        {
          "Name": "__n",
          "Typ": "int"
        }
      ],
      "Ret": "wchar_t",
      "Body": "100.0, .c_nationkey = 1, .c_address = std::string(\"123 St\"), "
    },
    {
      "Name": "operator==",
      "Params": [
        {
          "Name": "__lhs",
          "Typ": "fpos\u003c_StateT\u003e"
        },
        {
          "Name": "__rhs",
          "Typ": "fpos\u003c_StateT\u003e"
        }
      ],
      "Ret": "bool",
      "Body": "        if(!__found) {\n            GGroup __g{_"
    },
    {
      "Name": "operator!=",
      "Params": [
        {
          "Name": "__lhs",
          "Typ": "fpos\u003c_StateT\u003e"
        },
        {
          "Name": "__rhs",
          "Typ": "fpos\u003c_StateT\u003e"
        }
      ],
      "Ret": "bool",
      "Body": "_g : __groups) {\n    GGroup g = __g;\n    __item"
    },
    {
      "Name": "operator new",
      "Params": [
        {
          "Name": "",
          "Typ": "std::size_t"
        },
        {
          "Name": "__p",
          "Typ": ""
        }
      ],
      "Ret": "",
      "Body": "found = true; "
    },
    {
      "Name": "operator new[]",
      "Params": [
        {
          "Name": "",
          "Typ": "std::size_t"
        },
        {
          "Name": "__p",
          "Typ": ""
        }
      ],
      "Ret": "",
      "Body": "ems.push_back("
    },
    {
      "Name": "operator delete",
      "Params": [
        {
          "Name": "",
          "Typ": ""
        },
        {
          "Name": "",
          "Typ": ""
        }
      ],
      "Ret": "",
      "Body": "  "
    },
    {
      "Name": "operator delete[]",
      "Params": [
        {
          "Name": "",
          "Typ": ""
        },
        {
          "Name": "",
          "Typ": ""
        }
      ],
      "Ret": "",
      "Body": " g"
    },
    {
      "Name": "launder",
      "Params": [
        {
          "Name": "__p",
          "Typ": "_Tp"
        }
      ],
      "Ret": "_Tp",
      "Body": "bal, .n_name = g.key.n_name, .c_a"
    },
    {
      "Name": "__addressof",
      "Params": [
        {
          "Name": "__r",
          "Typ": "_Tp"
        }
      ],
      "Ret": "_Tp",
      "Body": " auto operator\u003c=\u003e(const GGroup\u0026) co"
    },
    {
      "Name": "forward",
      "Params": [
        {
          "Name": "__t",
          "Typ": "typename std::remove_reference\u003c_Tp\u003e::type"
        }
      ],
      "Ret": "_Tp",
      "Body": "Item\u0026) const = default;\n};\n\nstd::o"
    },
    {
      "Name": "forward",
      "Params": [
        {
          "Name": "__t",
          "Typ": "typename std::remove_reference\u003c_Tp\u003e::type"
        }
      ],
      "Ret": "_Tp",
      "Body": "ame': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_addre"
    },
    {
      "Name": "move",
      "Params": [
        {
          "Name": "__t",
          "Typ": "_Tp"
        }
      ],
      "Ret": "typename std::remove_reference\u003c_Tp\u003e::type",
      "Body": "\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\ns"
    },
    {
      "Name": "move_if_noexcept",
      "Params": [
        {
          "Name": "__x",
          "Typ": "_Tp"
        }
      ],
      "Ret": "__conditional_t\u003c__move_if_noexcept_cond\u003c_Tp\u003e::value, const _Tp \u0026, _Tp \u0026\u0026\u003e",
      "Body": "comment': '\" \u003c\u003c v.c_comme"
    },
    {
      "Name": "addressof",
      "Params": [
        {
          "Name": "__r",
          "Typ": "_Tp"
        }
      ],
      "Ret": "_Tp",
      "Body": "c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'reven"
    },
    {
      "Name": "__exchange",
      "Params": [
        {
          "Name": "__obj",
          "Typ": "_Tp"
        },
        {
          "Name": "__new_val",
          "Typ": "_Up"
        }
      ],
      "Ret": "_Tp",
      "Body": "eturn os;\n}\n\nstd::vector\u003cNationItem\u003e nation = std::vector{NationItem{.n_nationkey = 1, .n_name = std::string(\"BRAZ"
    },
    {
      "Name": "swap",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Tp"
        },
        {
          "Name": "__b",
          "Typ": "_Tp"
        }
      ],
      "Ret": "typename enable_if\u003c__and_\u003c__not_\u003c__is_tuple_like\u003c_Tp\u003e\u003e, is_move_constructible\u003c_Tp\u003e, is_move_assignable\u003c_Tp\u003e\u003e::value\u003e::type",
      "Body": ";\nstd::vector\u003cGGroup\u003e __groups;\nfor (auto c : customer) {\nfor (auto o : orders) {\nfor (auto l : lineitem) {\nfor (auto n : nation) {\n    if(((((((o.o_orderdate \u003e= start_date) \u0026\u0026 (o.o_orderdate \u003c end_date)) \u0026\u0026 (l.l_returnflag == std::str"
    },
    {
      "Name": "swap",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Tp (\u0026)[_Nm]"
        },
        {
          "Name": "__b",
          "Typ": "_Tp (\u0026)[_Nm]"
        }
      ],
      "Ret": "typename enable_if\u003c__is_swappable\u003c_Tp\u003e::value\u003e::type",
      "Body": "(__g.key == __key) { __g.items.push_back(__row); __found = true; break; }\n    "
    },
    {
      "Name": "swap",
      "Params": [
        {
          "Name": "__lhs",
          "Typ": "exception_ptr"
        },
        {
          "Name": "__rhs",
          "Typ": "exception_ptr"
        }
      ],
      "Ret": "",
      "Body": "_g{__key, {}};\n      "
    },
    {
      "Name": "__dest_thunk",
      "Params": [
        {
          "Name": "__x",
          "Typ": ""
        }
      ],
      "Ret": "",
      "Body": "g;\n    __items.push_back(ResultIte"
    },
    {
      "Name": "throw_with_nested",
      "Params": [
        {
          "Name": "__t",
          "Typ": "_Tp"
        }
      ],
      "Ret": "",
      "Body": "\u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::vector\u003cNationItem\u003e nation = std::vector{NationItem{.n_nationkey = 1, .n_name = std::string(\"BRAZIL\")}};\nstd::vector\u003cCustomerItem\u003e customer = std::vector{CustomerItem{.c_custkey = 1, .c_name = std::string(\"Alice\"), .c_acctbal = 100.0, .c_nationkey = 1, .c_address = std::string(\"123 St\"), .c_phone = std::string(\"123-456\"), .c_comment = std::string(\"Loyal\")}};\nstd::vector\u003cOrdersItem\u003e orders = std::vector{OrdersItem{.o_orderkey = 1000, .o_custkey = 1, .o_orderdate = std::string(\"1993-10-15\")}, OrdersItem{.o_orderkey = 2000, .o_custkey = 1, .o_orderdate "
    },
    {
      "Name": "operator==",
      "Params": [
        {
          "Name": "__v",
          "Typ": "partial_ordering"
        },
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        }
      ],
      "Ret": "bool",
      "Body": "\"'c_custkey': \" \u003c\u003c v.c_custk"
    },
    {
      "Name": "operator\u003c",
      "Params": [
        {
          "Name": "__v",
          "Typ": "partial_ordering"
        },
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        }
      ],
      "Ret": "bool",
      "Body": "\"'c_phone': '\" \u003c\u003c v.c_phone \u003c"
    },
    {
      "Name": "operator\u003e",
      "Params": [
        {
          "Name": "__v",
          "Typ": "partial_ordering"
        },
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        }
      ],
      "Ret": "bool",
      "Body": "m\u0026 os, const OrdersItem\u0026 v) "
    },
    {
      "Name": "operator\u003c=",
      "Params": [
        {
          "Name": "__v",
          "Typ": "partial_ordering"
        },
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        }
      ],
      "Ret": "bool",
      "Body": "': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'"
    },
    {
      "Name": "operator\u003e=",
      "Params": [
        {
          "Name": "__v",
          "Typ": "partial_ordering"
        },
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        }
      ],
      "Ret": "bool",
      "Body": "rderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c"
    },
    {
      "Name": "operator\u003c",
      "Params": [
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        },
        {
          "Name": "__v",
          "Typ": "partial_ordering"
        }
      ],
      "Ret": "bool",
      "Body": " \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c"
    },
    {
      "Name": "operator\u003e",
      "Params": [
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        },
        {
          "Name": "__v",
          "Typ": "partial_ordering"
        }
      ],
      "Ret": "bool",
      "Body": "s, const GKey\u0026 v) {\n    os \u003c\u003c"
    },
    {
      "Name": "operator\u003c=",
      "Params": [
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        },
        {
          "Name": "__v",
          "Typ": "partial_ordering"
        }
      ],
      "Ret": "bool",
      "Body": "fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_"
    },
    {
      "Name": "operator\u003e=",
      "Params": [
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        },
        {
          "Name": "__v",
          "Typ": "partial_ordering"
        }
      ],
      "Ret": "bool",
      "Body": "mment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_"
    },
    {
      "Name": "operator\u003c=\u003e",
      "Params": [
        {
          "Name": "__v",
          "Typ": "partial_ordering"
        },
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        }
      ],
      "Ret": "partial_ordering",
      "Body": " \"'c': \" \u003c\u003c v."
    },
    {
      "Name": "operator\u003c=\u003e",
      "Params": [
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        },
        {
          "Name": "__v",
          "Typ": "partial_ordering"
        }
      ],
      "Ret": "partial_ordering",
      "Body": "std::ostream\u0026 os, const GGroup\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'key': \" \u003c\u003c v.key \u003c\u003c \", \" \u003c\u003c \"'items': \" \u003c\u003c v.items \u003c\u003c '}';\n "
    },
    {
      "Name": "operator==",
      "Params": [
        {
          "Name": "__v",
          "Typ": "weak_ordering"
        },
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        }
      ],
      "Ret": "bool",
      "Body": "-10-15\")}, OrdersItem{.o_ord"
    },
    {
      "Name": "operator\u003c",
      "Params": [
        {
          "Name": "__v",
          "Typ": "weak_ordering"
        },
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        }
      ],
      "Ret": "bool",
      "Body": "unt = 0.1}, LineitemItem{.l"
    },
    {
      "Name": "operator\u003e",
      "Params": [
        {
          "Name": "__v",
          "Typ": "weak_ordering"
        },
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        }
      ],
      "Ret": "bool",
      "Body": "= std::string(\"1993-10-01\")"
    },
    {
      "Name": "operator\u003c=",
      "Params": [
        {
          "Name": "__v",
          "Typ": "weak_ordering"
        },
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        }
      ],
      "Ret": "bool",
      "Body": "\nstd::vector\u003cGGroup\u003e __group"
    },
    {
      "Name": "operator\u003e=",
      "Params": [
        {
          "Name": "__v",
          "Typ": "weak_ordering"
        },
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        }
      ],
      "Ret": "bool",
      "Body": "(o.o_orderdate \u003e= start_date"
    },
    {
      "Name": "operator\u003c",
      "Params": [
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        },
        {
          "Name": "__v",
          "Typ": "weak_ordering"
        }
      ],
      "Ret": "bool",
      "Body": "orderkey == o.o_orderkey)) "
    },
    {
      "Name": "operator\u003e",
      "Params": [
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        },
        {
          "Name": "__v",
          "Typ": "weak_ordering"
        }
      ],
      "Ret": "bool",
      "Body": "custkey, .c_name = c.c_name"
    },
    {
      "Name": "operator\u003c=",
      "Params": [
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        },
        {
          "Name": "__v",
          "Typ": "weak_ordering"
        }
      ],
      "Ret": "bool",
      "Body": "_name};\n        bool __found"
    },
    {
      "Name": "operator\u003e=",
      "Params": [
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        },
        {
          "Name": "__v",
          "Typ": "weak_ordering"
        }
      ],
      "Ret": "bool",
      "Body": "d = true; break; }\n        }"
    },
    {
      "Name": "operator\u003c=\u003e",
      "Params": [
        {
          "Name": "__v",
          "Typ": "weak_ordering"
        },
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        }
      ],
      "Ret": "weak_ordering",
      "Body": "back(__g);\n   "
    },
    {
      "Name": "operator\u003c=\u003e",
      "Params": [
        {
          "Name": "",
          "Typ": "__cmp_cat::__unspec"
        },
        {
          "Name": "__v",
          "Typ": "weak_ordering"
        }
      ],
      "Ret": "weak_ordering",
      "Body": "stkey, .c_name = g.key.c_name, .revenue = ([\u0026]{ auto __t"
    },
    {
      "Name": "__to_address",
      "Params": [
        {
          "Name": "__ptr",
          "Typ": "_Tp"
        }
      ],
      "Ret": "_Tp",
      "Body": "ms.push_back(ResultItem{.c_custkey = g.key.c_custkey, .c_name = g.key.c_name, .revenue = ([\u0026]{ auto __tm"
    },
    {
      "Name": "__to_address",
      "Params": [
        {
          "Name": "__ptr",
          "Typ": "_Ptr"
        }
      ],
      "Ret": "",
      "Body": "tems; }());\n\nint main() {\n    std::cout \u003c\u003c result \u003c\u003c st"
    },
    {
      "Name": "__distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "_InputIterator"
        },
        {
          "Name": "__last",
          "Typ": "_InputIterator"
        },
        {
          "Name": "",
          "Typ": "input_iterator_tag"
        }
      ],
      "Ret": "typename iterator_traits\u003c_InputIterator\u003e::difference_type",
      "Body": "\", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    return os;\n}\n\nstd::ostre"
    },
    {
      "Name": "__distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "_RandomAccessIterator"
        },
        {
          "Name": "__last",
          "Typ": "_RandomAccessIterator"
        },
        {
          "Name": "",
          "Typ": "random_access_iterator_tag"
        }
      ],
      "Ret": "typename iterator_traits\u003c_RandomAccessIterator\u003e::difference_type",
      "Body": "e \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::os"
    },
    {
      "Name": "__distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "string"
        },
        {
          "Name": "__last",
          "Typ": "string"
        },
        {
          "Name": "",
          "Typ": "random_access_iterator_tag"
        }
      ],
      "Ret": "typename iterator_traits\u003cconst char *\u003e::difference_type",
      "Body": "e \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::os"
    },
    {
      "Name": "__distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "NationItem"
        },
        {
          "Name": "__last",
          "Typ": "NationItem"
        },
        {
          "Name": "",
          "Typ": "random_access_iterator_tag"
        }
      ],
      "Ret": "typename iterator_traits\u003cconst NationItem *\u003e::difference_type",
      "Body": "e \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::os"
    },
    {
      "Name": "__distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "string"
        },
        {
          "Name": "__last",
          "Typ": "string"
        },
        {
          "Name": "",
          "Typ": "random_access_iterator_tag"
        }
      ],
      "Ret": "typename iterator_traits\u003cchar *\u003e::difference_type",
      "Body": "e \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::os"
    },
    {
      "Name": "__distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "CustomerItem"
        },
        {
          "Name": "__last",
          "Typ": "CustomerItem"
        },
        {
          "Name": "",
          "Typ": "random_access_iterator_tag"
        }
      ],
      "Ret": "typename iterator_traits\u003cconst CustomerItem *\u003e::difference_type",
      "Body": "e \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::os"
    },
    {
      "Name": "__distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "OrdersItem"
        },
        {
          "Name": "__last",
          "Typ": "OrdersItem"
        },
        {
          "Name": "",
          "Typ": "random_access_iterator_tag"
        }
      ],
      "Ret": "typename iterator_traits\u003cconst OrdersItem *\u003e::difference_type",
      "Body": "e \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::os"
    },
    {
      "Name": "__distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "LineitemItem"
        },
        {
          "Name": "__last",
          "Typ": "LineitemItem"
        },
        {
          "Name": "",
          "Typ": "random_access_iterator_tag"
        }
      ],
      "Ret": "typename iterator_traits\u003cconst LineitemItem *\u003e::difference_type",
      "Body": "e \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::os"
    },
    {
      "Name": "__distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "wchar_t"
        },
        {
          "Name": "__last",
          "Typ": "wchar_t"
        },
        {
          "Name": "",
          "Typ": "random_access_iterator_tag"
        }
      ],
      "Ret": "typename iterator_traits\u003cwchar_t *\u003e::difference_type",
      "Body": "e \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::os"
    },
    {
      "Name": "__distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "wchar_t"
        },
        {
          "Name": "__last",
          "Typ": "wchar_t"
        },
        {
          "Name": "",
          "Typ": "random_access_iterator_tag"
        }
      ],
      "Ret": "typename iterator_traits\u003cconst wchar_t *\u003e::difference_type",
      "Body": "e \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::os"
    },
    {
      "Name": "__distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "char8_t"
        },
        {
          "Name": "__last",
          "Typ": "char8_t"
        },
        {
          "Name": "",
          "Typ": "random_access_iterator_tag"
        }
      ],
      "Ret": "typename iterator_traits\u003cconst char8_t *\u003e::difference_type",
      "Body": "e \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::os"
    },
    {
      "Name": "__distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "string"
        },
        {
          "Name": "__last",
          "Typ": "string"
        },
        {
          "Name": "",
          "Typ": "random_access_iterator_tag"
        }
      ],
      "Ret": "typename iterator_traits\u003cconst char16_t *\u003e::difference_type",
      "Body": "e \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::os"
    },
    {
      "Name": "__distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "string"
        },
        {
          "Name": "__last",
          "Typ": "string"
        },
        {
          "Name": "",
          "Typ": "random_access_iterator_tag"
        }
      ],
      "Ret": "typename iterator_traits\u003cconst char32_t *\u003e::difference_type",
      "Body": "e \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::os"
    },
    {
      "Name": "distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "_InputIterator"
        },
        {
          "Name": "__last",
          "Typ": "_InputIterator"
        }
      ],
      "Ret": "typename iterator_traits\u003c_InputIterator\u003e::difference_type",
      "Body": "neitemItem\u003e lineitem = std::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0.1}, Lineitem"
    },
    {
      "Name": "distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "string"
        },
        {
          "Name": "__last",
          "Typ": "string"
        }
      ],
      "Ret": "typename iterator_traits\u003cconst char *\u003e::difference_type",
      "Body": "neitemItem\u003e lineitem = std::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0.1}, Lineitem"
    },
    {
      "Name": "distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "NationItem"
        },
        {
          "Name": "__last",
          "Typ": "NationItem"
        }
      ],
      "Ret": "typename iterator_traits\u003cconst NationItem *\u003e::difference_type",
      "Body": "neitemItem\u003e lineitem = std::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0.1}, Lineitem"
    },
    {
      "Name": "distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "string"
        },
        {
          "Name": "__last",
          "Typ": "string"
        }
      ],
      "Ret": "typename iterator_traits\u003cchar *\u003e::difference_type",
      "Body": "neitemItem\u003e lineitem = std::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0.1}, Lineitem"
    },
    {
      "Name": "distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "CustomerItem"
        },
        {
          "Name": "__last",
          "Typ": "CustomerItem"
        }
      ],
      "Ret": "typename iterator_traits\u003cconst CustomerItem *\u003e::difference_type",
      "Body": "neitemItem\u003e lineitem = std::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0.1}, Lineitem"
    },
    {
      "Name": "distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "OrdersItem"
        },
        {
          "Name": "__last",
          "Typ": "OrdersItem"
        }
      ],
      "Ret": "typename iterator_traits\u003cconst OrdersItem *\u003e::difference_type",
      "Body": "neitemItem\u003e lineitem = std::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0.1}, Lineitem"
    },
    {
      "Name": "distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "LineitemItem"
        },
        {
          "Name": "__last",
          "Typ": "LineitemItem"
        }
      ],
      "Ret": "typename iterator_traits\u003cconst LineitemItem *\u003e::difference_type",
      "Body": "neitemItem\u003e lineitem = std::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0.1}, Lineitem"
    },
    {
      "Name": "distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "wchar_t"
        },
        {
          "Name": "__last",
          "Typ": "wchar_t"
        }
      ],
      "Ret": "typename iterator_traits\u003cwchar_t *\u003e::difference_type",
      "Body": "neitemItem\u003e lineitem = std::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0.1}, Lineitem"
    },
    {
      "Name": "distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "wchar_t"
        },
        {
          "Name": "__last",
          "Typ": "wchar_t"
        }
      ],
      "Ret": "typename iterator_traits\u003cconst wchar_t *\u003e::difference_type",
      "Body": "neitemItem\u003e lineitem = std::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0.1}, Lineitem"
    },
    {
      "Name": "distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "char8_t"
        },
        {
          "Name": "__last",
          "Typ": "char8_t"
        }
      ],
      "Ret": "typename iterator_traits\u003cconst char8_t *\u003e::difference_type",
      "Body": "neitemItem\u003e lineitem = std::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0.1}, Lineitem"
    },
    {
      "Name": "distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "string"
        },
        {
          "Name": "__last",
          "Typ": "string"
        }
      ],
      "Ret": "typename iterator_traits\u003cconst char16_t *\u003e::difference_type",
      "Body": "neitemItem\u003e lineitem = std::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0.1}, Lineitem"
    },
    {
      "Name": "distance",
      "Params": [
        {
          "Name": "__first",
          "Typ": "string"
        },
        {
          "Name": "__last",
          "Typ": "string"
        }
      ],
      "Ret": "typename iterator_traits\u003cconst char32_t *\u003e::difference_type",
      "Body": "neitemItem\u003e lineitem = std::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0.1}, Lineitem"
    },
    {
      "Name": "__advance",
      "Params": [
        {
          "Name": "__i",
          "Typ": "_InputIterator"
        },
        {
          "Name": "__n",
          "Typ": "_Distance"
        },
        {
          "Name": "",
          "Typ": "input_iterator_tag"
        }
      ],
      "Ret": "",
      "Body": "::string(\"1994-01-01\");\nstd::vector\u003cResultItem\u003e result = ([]{ std::vector\u003cResultItem\u003e __items;\nstd::vector\u003cGGroup\u003e __groups;\nfor (auto c : customer) {\nfor (auto o : orders"
    },
    {
      "Name": "__advance",
      "Params": [
        {
          "Name": "__i",
          "Typ": "_BidirectionalIterator"
        },
        {
          "Name": "__n",
          "Typ": "_Distance"
        },
        {
          "Name": "",
          "Typ": "bidirectional_iterator_tag"
        }
      ],
      "Ret": "",
      "Body": "\u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationkey))) {\n        GRow __row{c, o, l, n};\n        auto __key = GKey{.c_custkey = c.c_custkey, .c_name = c.c_name, .c_acctbal = c.c_acctbal, .c_address = c.c_addr"
    },
    {
      "Name": "__advance",
      "Params": [
        {
          "Name": "__i",
          "Typ": "_RandomAccessIterator"
        },
        {
          "Name": "__n",
          "Typ": "_Distance"
        },
        {
          "Name": "",
          "Typ": "random_access_iterator_tag"
        }
      ],
      "Ret": "",
      "Body": "ound = true; break; }\n        }\n        if(!__found) {\n            GGroup __g{__key, {}};\n            __g.items.push_back(__row);\n            __groups.push_back(__g);\n        }\n    }\n}\n}\n}\n}\nfor(auto \u0026__g : __groups) {\n    GGroup g = __g;\n    __items.push_back(ResultItem{.c"
    },
    {
      "Name": "destroy_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "_Tp"
        }
      ],
      "Ret": "",
      "Body": "\" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    retu"
    },
    {
      "Name": "destroy_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "NationItem"
        }
      ],
      "Ret": "",
      "Body": "\" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    retu"
    },
    {
      "Name": "destroy_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "CustomerItem"
        }
      ],
      "Ret": "",
      "Body": "\" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    retu"
    },
    {
      "Name": "destroy_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "OrdersItem"
        }
      ],
      "Ret": "",
      "Body": "\" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    retu"
    },
    {
      "Name": "destroy_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "LineitemItem"
        }
      ],
      "Ret": "",
      "Body": "\" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    retu"
    },
    {
      "Name": "destroy_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "ResultItem"
        }
      ],
      "Ret": "",
      "Body": "\" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    retu"
    },
    {
      "Name": "destroy_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "GGroup"
        }
      ],
      "Ret": "",
      "Body": "\" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    retu"
    },
    {
      "Name": "destroy_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "GRow"
        }
      ],
      "Ret": "",
      "Body": "\" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    retu"
    },
    {
      "Name": "destroy_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "float"
        }
      ],
      "Ret": "",
      "Body": "\" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    retu"
    },
    {
      "Name": "construct_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "_Tp"
        },
        {
          "Name": "__args",
          "Typ": "_Args \u0026\u0026..."
        }
      ],
      "Ret": "",
      "Body": "s \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_c"
    },
    {
      "Name": "construct_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "string"
        },
        {
          "Name": "__args",
          "Typ": "string"
        }
      ],
      "Ret": "",
      "Body": "s \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_c"
    },
    {
      "Name": "construct_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "string"
        },
        {
          "Name": "__args",
          "Typ": "string"
        }
      ],
      "Ret": "",
      "Body": "s \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_c"
    },
    {
      "Name": "construct_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "wchar_t"
        },
        {
          "Name": "__args",
          "Typ": "wchar_t"
        }
      ],
      "Ret": "",
      "Body": "s \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_c"
    },
    {
      "Name": "construct_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "wchar_t"
        },
        {
          "Name": "__args",
          "Typ": "wchar_t"
        }
      ],
      "Ret": "",
      "Body": "s \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_c"
    },
    {
      "Name": "construct_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "char8_t"
        },
        {
          "Name": "__args",
          "Typ": "char8_t"
        }
      ],
      "Ret": "",
      "Body": "s \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_c"
    },
    {
      "Name": "construct_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "char8_t"
        },
        {
          "Name": "__args",
          "Typ": "char8_t"
        }
      ],
      "Ret": "",
      "Body": "s \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_c"
    },
    {
      "Name": "construct_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "string"
        },
        {
          "Name": "__args",
          "Typ": "string"
        }
      ],
      "Ret": "",
      "Body": "s \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_c"
    },
    {
      "Name": "construct_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "string"
        },
        {
          "Name": "__args",
          "Typ": "string"
        }
      ],
      "Ret": "",
      "Body": "s \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_c"
    },
    {
      "Name": "construct_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "NationItem"
        },
        {
          "Name": "__args",
          "Typ": "NationItem"
        }
      ],
      "Ret": "",
      "Body": "s \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_c"
    },
    {
      "Name": "construct_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "CustomerItem"
        },
        {
          "Name": "__args",
          "Typ": "CustomerItem"
        }
      ],
      "Ret": "",
      "Body": "s \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_c"
    },
    {
      "Name": "construct_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "OrdersItem"
        },
        {
          "Name": "__args",
          "Typ": "OrdersItem"
        }
      ],
      "Ret": "",
      "Body": "s \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_c"
    },
    {
      "Name": "construct_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "LineitemItem"
        },
        {
          "Name": "__args",
          "Typ": "LineitemItem"
        }
      ],
      "Ret": "",
      "Body": "s \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_c"
    },
    {
      "Name": "construct_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "GRow"
        },
        {
          "Name": "__args",
          "Typ": "GRow"
        }
      ],
      "Ret": "",
      "Body": "s \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_c"
    },
    {
      "Name": "construct_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "GRow"
        },
        {
          "Name": "__args",
          "Typ": "GRow"
        }
      ],
      "Ret": "",
      "Body": "s \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_c"
    },
    {
      "Name": "construct_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "GGroup"
        },
        {
          "Name": "__args",
          "Typ": "GGroup"
        }
      ],
      "Ret": "",
      "Body": "s \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_c"
    },
    {
      "Name": "construct_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "GGroup"
        },
        {
          "Name": "__args",
          "Typ": "GGroup"
        }
      ],
      "Ret": "",
      "Body": "s \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_c"
    },
    {
      "Name": "construct_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "float"
        },
        {
          "Name": "__args",
          "Typ": "float"
        }
      ],
      "Ret": "",
      "Body": "s \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_c"
    },
    {
      "Name": "construct_at",
      "Params": [
        {
          "Name": "__location",
          "Typ": "ResultItem"
        },
        {
          "Name": "__args",
          "Typ": "ResultItem"
        }
      ],
      "Ret": "",
      "Body": "s \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_c"
    },
    {
      "Name": "_Construct",
      "Params": [
        {
          "Name": "__p",
          "Typ": "_Tp"
        },
        {
          "Name": "__args",
          "Typ": "_Args \u0026\u0026..."
        }
      ],
      "Ret": "",
      "Body": "\u003c(std::ostream\u0026 os, const GGroup\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'key': \" \u003c\u003c v.key \u003c\u003c \", \" \u003c\u003c \"'items': \" \u003c\u003c v.items \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_na"
    },
    {
      "Name": "_Construct",
      "Params": [
        {
          "Name": "__p",
          "Typ": "NationItem"
        },
        {
          "Name": "__args",
          "Typ": "NationItem"
        }
      ],
      "Ret": "",
      "Body": "\u003c(std::ostream\u0026 os, const GGroup\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'key': \" \u003c\u003c v.key \u003c\u003c \", \" \u003c\u003c \"'items': \" \u003c\u003c v.items \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_na"
    },
    {
      "Name": "_Construct",
      "Params": [
        {
          "Name": "__p",
          "Typ": "CustomerItem"
        },
        {
          "Name": "__args",
          "Typ": "CustomerItem"
        }
      ],
      "Ret": "",
      "Body": "\u003c(std::ostream\u0026 os, const GGroup\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'key': \" \u003c\u003c v.key \u003c\u003c \", \" \u003c\u003c \"'items': \" \u003c\u003c v.items \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_na"
    },
    {
      "Name": "_Construct",
      "Params": [
        {
          "Name": "__p",
          "Typ": "OrdersItem"
        },
        {
          "Name": "__args",
          "Typ": "OrdersItem"
        }
      ],
      "Ret": "",
      "Body": "\u003c(std::ostream\u0026 os, const GGroup\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'key': \" \u003c\u003c v.key \u003c\u003c \", \" \u003c\u003c \"'items': \" \u003c\u003c v.items \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_na"
    },
    {
      "Name": "_Construct",
      "Params": [
        {
          "Name": "__p",
          "Typ": "LineitemItem"
        },
        {
          "Name": "__args",
          "Typ": "LineitemItem"
        }
      ],
      "Ret": "",
      "Body": "\u003c(std::ostream\u0026 os, const GGroup\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'key': \" \u003c\u003c v.key \u003c\u003c \", \" \u003c\u003c \"'items': \" \u003c\u003c v.items \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_na"
    },
    {
      "Name": "_Construct",
      "Params": [
        {
          "Name": "__p",
          "Typ": "GRow"
        },
        {
          "Name": "__args",
          "Typ": "GRow"
        }
      ],
      "Ret": "",
      "Body": "\u003c(std::ostream\u0026 os, const GGroup\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'key': \" \u003c\u003c v.key \u003c\u003c \", \" \u003c\u003c \"'items': \" \u003c\u003c v.items \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_na"
    },
    {
      "Name": "_Construct_novalue",
      "Params": [
        {
          "Name": "__p",
          "Typ": "_T1"
        }
      ],
      "Ret": "",
      "Body": "';\n    return os;\n}\n\nstd:"
    },
    {
      "Name": "_Destroy",
      "Params": [
        {
          "Name": "__first",
          "Typ": "NationItem"
        },
        {
          "Name": "__last",
          "Typ": "NationItem"
        }
      ],
      "Ret": "",
      "Body": " \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o_custkey == c.c_custkey)) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationkey))) {\n        GRow __row{c, o, l, n};\n        auto __key = GKey{.c_custkey = c.c_custkey, .c_name = c.c_name, .c_acctbal = c.c_acctbal, .c_address = c.c_address, .c_phone = c.c_phone, .c_comment = c.c_comment, .n_name = n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.items.push_back(__row); __found = true; break; }\n        }\n        i"
    },
    {
      "Name": "_Destroy",
      "Params": [
        {
          "Name": "__first",
          "Typ": "CustomerItem"
        },
        {
          "Name": "__last",
          "Typ": "CustomerItem"
        }
      ],
      "Ret": "",
      "Body": " \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o_custkey == c.c_custkey)) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationkey))) {\n        GRow __row{c, o, l, n};\n        auto __key = GKey{.c_custkey = c.c_custkey, .c_name = c.c_name, .c_acctbal = c.c_acctbal, .c_address = c.c_address, .c_phone = c.c_phone, .c_comment = c.c_comment, .n_name = n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.items.push_back(__row); __found = true; break; }\n        }\n        i"
    },
    {
      "Name": "_Destroy",
      "Params": [
        {
          "Name": "__first",
          "Typ": "OrdersItem"
        },
        {
          "Name": "__last",
          "Typ": "OrdersItem"
        }
      ],
      "Ret": "",
      "Body": " \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o_custkey == c.c_custkey)) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationkey))) {\n        GRow __row{c, o, l, n};\n        auto __key = GKey{.c_custkey = c.c_custkey, .c_name = c.c_name, .c_acctbal = c.c_acctbal, .c_address = c.c_address, .c_phone = c.c_phone, .c_comment = c.c_comment, .n_name = n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.items.push_back(__row); __found = true; break; }\n        }\n        i"
    },
    {
      "Name": "_Destroy",
      "Params": [
        {
          "Name": "__first",
          "Typ": "LineitemItem"
        },
        {
          "Name": "__last",
          "Typ": "LineitemItem"
        }
      ],
      "Ret": "",
      "Body": " \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o_custkey == c.c_custkey)) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationkey))) {\n        GRow __row{c, o, l, n};\n        auto __key = GKey{.c_custkey = c.c_custkey, .c_name = c.c_name, .c_acctbal = c.c_acctbal, .c_address = c.c_address, .c_phone = c.c_phone, .c_comment = c.c_comment, .n_name = n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.items.push_back(__row); __found = true; break; }\n        }\n        i"
    },
    {
      "Name": "_Destroy",
      "Params": [
        {
          "Name": "__first",
          "Typ": "ResultItem"
        },
        {
          "Name": "__last",
          "Typ": "ResultItem"
        }
      ],
      "Ret": "",
      "Body": " \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o_custkey == c.c_custkey)) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationkey))) {\n        GRow __row{c, o, l, n};\n        auto __key = GKey{.c_custkey = c.c_custkey, .c_name = c.c_name, .c_acctbal = c.c_acctbal, .c_address = c.c_address, .c_phone = c.c_phone, .c_comment = c.c_comment, .n_name = n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.items.push_back(__row); __found = true; break; }\n        }\n        i"
    },
    {
      "Name": "_Destroy",
      "Params": [
        {
          "Name": "__first",
          "Typ": "GGroup"
        },
        {
          "Name": "__last",
          "Typ": "GGroup"
        }
      ],
      "Ret": "",
      "Body": " \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o_custkey == c.c_custkey)) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationkey))) {\n        GRow __row{c, o, l, n};\n        auto __key = GKey{.c_custkey = c.c_custkey, .c_name = c.c_name, .c_acctbal = c.c_acctbal, .c_address = c.c_address, .c_phone = c.c_phone, .c_comment = c.c_comment, .n_name = n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.items.push_back(__row); __found = true; break; }\n        }\n        i"
    },
    {
      "Name": "_Destroy",
      "Params": [
        {
          "Name": "__first",
          "Typ": "GRow"
        },
        {
          "Name": "__last",
          "Typ": "GRow"
        }
      ],
      "Ret": "",
      "Body": " \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o_custkey == c.c_custkey)) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationkey))) {\n        GRow __row{c, o, l, n};\n        auto __key = GKey{.c_custkey = c.c_custkey, .c_name = c.c_name, .c_acctbal = c.c_acctbal, .c_address = c.c_address, .c_phone = c.c_phone, .c_comment = c.c_comment, .n_name = n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.items.push_back(__row); __found = true; break; }\n        }\n        i"
    },
    {
      "Name": "_Destroy",
      "Params": [
        {
          "Name": "__first",
          "Typ": "float"
        },
        {
          "Name": "__last",
          "Typ": "float"
        }
      ],
      "Ret": "",
      "Body": " \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o_custkey == c.c_custkey)) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationkey))) {\n        GRow __row{c, o, l, n};\n        auto __key = GKey{.c_custkey = c.c_custkey, .c_name = c.c_name, .c_acctbal = c.c_acctbal, .c_address = c.c_address, .c_phone = c.c_phone, .c_comment = c.c_comment, .n_name = n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.items.push_back(__row); __found = true; break; }\n        }\n        i"
    },
    {
      "Name": "_Destroy",
      "Params": [
        {
          "Name": "__pointer",
          "Typ": "_Tp"
        }
      ],
      "Ret": "",
      "Body": "= std::string(\"123-456\"), .c_comment = std::string(\"Loyal\")}};\nstd::vector\u003cOrdersItem\u003e orders = std::vec"
    },
    {
      "Name": "_Destroy",
      "Params": [
        {
          "Name": "__pointer",
          "Typ": "NationItem"
        }
      ],
      "Ret": "",
      "Body": "= std::string(\"123-456\"), .c_comment = std::string(\"Loyal\")}};\nstd::vector\u003cOrdersItem\u003e orders = std::vec"
    },
    {
      "Name": "_Destroy",
      "Params": [
        {
          "Name": "__pointer",
          "Typ": "CustomerItem"
        }
      ],
      "Ret": "",
      "Body": "= std::string(\"123-456\"), .c_comment = std::string(\"Loyal\")}};\nstd::vector\u003cOrdersItem\u003e orders = std::vec"
    },
    {
      "Name": "_Destroy",
      "Params": [
        {
          "Name": "__pointer",
          "Typ": "OrdersItem"
        }
      ],
      "Ret": "",
      "Body": "= std::string(\"123-456\"), .c_comment = std::string(\"Loyal\")}};\nstd::vector\u003cOrdersItem\u003e orders = std::vec"
    },
    {
      "Name": "_Destroy",
      "Params": [
        {
          "Name": "__pointer",
          "Typ": "LineitemItem"
        }
      ],
      "Ret": "",
      "Body": "= std::string(\"123-456\"), .c_comment = std::string(\"Loyal\")}};\nstd::vector\u003cOrdersItem\u003e orders = std::vec"
    },
    {
      "Name": "_Destroy",
      "Params": [
        {
          "Name": "__pointer",
          "Typ": "ResultItem"
        }
      ],
      "Ret": "",
      "Body": "= std::string(\"123-456\"), .c_comment = std::string(\"Loyal\")}};\nstd::vector\u003cOrdersItem\u003e orders = std::vec"
    },
    {
      "Name": "_Destroy",
      "Params": [
        {
          "Name": "__pointer",
          "Typ": "GGroup"
        }
      ],
      "Ret": "",
      "Body": "= std::string(\"123-456\"), .c_comment = std::string(\"Loyal\")}};\nstd::vector\u003cOrdersItem\u003e orders = std::vec"
    },
    {
      "Name": "_Destroy",
      "Params": [
        {
          "Name": "__pointer",
          "Typ": "GRow"
        }
      ],
      "Ret": "",
      "Body": "= std::string(\"123-456\"), .c_comment = std::string(\"Loyal\")}};\nstd::vector\u003cOrdersItem\u003e orders = std::vec"
    },
    {
      "Name": "_Destroy",
      "Params": [
        {
          "Name": "__pointer",
          "Typ": "float"
        }
      ],
      "Ret": "",
      "Body": "= std::string(\"123-456\"), .c_comment = std::string(\"Loyal\")}};\nstd::vector\u003cOrdersItem\u003e orders = std::vec"
    },
    {
      "Name": "_Destroy",
      "Params": [
        {
          "Name": "__first",
          "Typ": "_ForwardIterator"
        },
        {
          "Name": "__last",
          "Typ": "_ForwardIterator"
        }
      ],
      "Ret": "",
      "Body": " \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o_custkey == c.c_custkey)) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationkey))) {\n        GRow __row{c, o, l, n};\n        auto __key = GKey{.c_custkey = c.c_custkey, .c_name = c.c_name, .c_acctbal = c.c_acctbal, .c_address = c.c_address, .c_phone = c.c_phone, .c_comment = c.c_comment, .n_name = n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.items.push_back(__row); __found = true; break; }\n        }\n        i"
    },
    {
      "Name": "__convert_from_v",
      "Params": [
        {
          "Name": "__cloc",
          "Typ": "__c_locale"
        },
        {
          "Name": "__out",
          "Typ": "string"
        },
        {
          "Name": "__size",
          "Typ": "int"
        },
        {
          "Name": "__fmt",
          "Typ": "string"
        }
      ],
      "Ret": "int",
      "Body": "{\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const OrdersItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \""
    },
    {
      "Name": "__is_single_threaded",
      "Params": null,
      "Ret": "bool",
      "Body": "  LineitemItem l;\n    NationItem n;\n    auto operator\u003c=\u003e(const GRow\u0026) const = default;\n};\n\nstruct GGroup {\n    GKey key;\n    std::vector\u003cGRow\u003e items;\n    auto operator\u003c="
    },
    {
      "Name": "__exchange_and_add",
      "Params": [
        {
          "Name": "__mem",
          "Typ": "volatile _Atomic_word"
        },
        {
          "Name": "__val",
          "Typ": "int"
        }
      ],
      "Ret": "_Atomic_word",
      "Body": "td::string c_phone;\n    std::string c_comment;\n    auto opera"
    },
    {
      "Name": "__atomic_add",
      "Params": [
        {
          "Name": "__mem",
          "Typ": "volatile _Atomic_word"
        },
        {
          "Name": "__val",
          "Typ": "int"
        }
      ],
      "Ret": "",
      "Body": "\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c"
    },
    {
      "Name": "__exchange_and_add_single",
      "Params": [
        {
          "Name": "__mem",
          "Typ": "_Atomic_word"
        },
        {
          "Name": "__val",
          "Typ": "int"
        }
      ],
      "Ret": "_Atomic_word",
      "Body": "(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_ad"
    },
    {
      "Name": "__atomic_add_single",
      "Params": [
        {
          "Name": "__mem",
          "Typ": "_Atomic_word"
        },
        {
          "Name": "__val",
          "Typ": "int"
        }
      ],
      "Ret": "",
      "Body": "v.c_comment \u003c\u003c \"'\" "
    },
    {
      "Name": "__exchange_and_add_dispatch",
      "Params": [
        {
          "Name": "__mem",
          "Typ": "_Atomic_word"
        },
        {
          "Name": "__val",
          "Typ": "int"
        }
      ],
      "Ret": "_Atomic_word",
      "Body": "\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostr"
    },
    {
      "Name": "__atomic_add_dispatch",
      "Params": [
        {
          "Name": "__mem",
          "Typ": "_Atomic_word"
        },
        {
          "Name": "__val",
          "Typ": "int"
        }
      ],
      "Ret": "",
      "Body": ", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision("
    },
    {
      "Name": "operator==",
      "Params": [
        {
          "Name": "",
          "Typ": "__new_allocator\u003c_Tp\u003e"
        },
        {
          "Name": "",
          "Typ": "__new_allocator\u003c_Up\u003e"
        }
      ],
      "Ret": "bool",
      "Body": "m{.c_custkey = "
    },
    {
      "Name": "operator==",
      "Params": [
        {
          "Name": "",
          "Typ": "allocator\u003ctype-parameter-0-0\u003e"
        },
        {
          "Name": "",
          "Typ": "allocator\u003ctype-parameter-0-0\u003e"
        }
      ],
      "Ret": "bool",
      "Body": "  __items.push_"
    },
    {
      "Name": "__ostream_write",
      "Params": [
        {
          "Name": "__out",
          "Typ": "basic_ostream\u003c_CharT, _Traits\u003e"
        },
        {
          "Name": "__s",
          "Typ": "_CharT"
        },
        {
          "Name": "__n",
          "Typ": "streamsize"
        }
      ],
      "Ret": "",
      "Body": "ult;\n};\n\nstruct GGroup {\n    GKey key;\n    std::vector\u003cGRow\u003e items;\n    auto operator\u003c=\u003e(const GGroup\u0026) const = default;\n    auto begin() { return items.begin(); }\n    auto end() { return items.end(); }\n    size_t size() const { return items.size(); }\n};\n\nstruct Resu"
    },
    {
      "Name": "__ostream_fill",
      "Params": [
        {
          "Name": "__out",
          "Typ": "basic_ostream\u003c_CharT, _Traits\u003e"
        },
        {
          "Name": "__n",
          "Typ": "streamsize"
        }
      ],
      "Ret": "",
      "Body": ";\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_"
    },
    {
      "Name": "__ostream_insert",
      "Params": [
        {
          "Name": "__out",
          "Typ": "basic_ostream\u003c_CharT, _Traits\u003e"
        },
        {
          "Name": "__s",
          "Typ": "_CharT"
        },
        {
          "Name": "__n",
          "Typ": "streamsize"
        }
      ],
      "Ret": "basic_ostream\u003c_CharT, _Traits\u003e",
      "Body": "c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const OrdersItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GKey\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_na"
    },
    {
      "Name": "__is_null_pointer",
      "Params": [
        {
          "Name": "__ptr",
          "Typ": "_Type"
        }
      ],
      "Ret": "bool",
      "Body": "\u003c\u003c v.c \u003c\u003c \", \" \u003c\u003c \"'o"
    },
    {
      "Name": "__is_null_pointer",
      "Params": [
        {
          "Name": "",
          "Typ": "_Type"
        }
      ],
      "Ret": "bool",
      "Body": "\u0026 operator\u003c\u003c(std"
    },
    {
      "Name": "__is_null_pointer",
      "Params": [
        {
          "Name": "",
          "Typ": "std::nullptr_t"
        }
      ],
      "Ret": "bool",
      "Body": "ems': \" \u003c\u003c v.it"
    },
    {
      "Name": "bind1st",
      "Params": [
        {
          "Name": "__fn",
          "Typ": "_Operation"
        },
        {
          "Name": "__x",
          "Typ": "_Tp"
        }
      ],
      "Ret": "binder1st\u003c_Operation\u003e",
      "Body": "r\u003cResultItem\u003e result = ([]{ std::vector\u003cResultItem\u003e __items;\nstd::vector\u003cGGroup\u003e __groups;\nfor (auto c : customer) {\nfor (auto o : o"
    },
    {
      "Name": "bind2nd",
      "Params": [
        {
          "Name": "__fn",
          "Typ": "_Operation"
        },
        {
          "Name": "__x",
          "Typ": "_Tp"
        }
      ],
      "Ret": "binder2nd\u003c_Operation\u003e",
      "Body": ")); return std::accumulate(__tmp.begin(), __tmp.end(), 0.0); }()), .c_acctbal = g.key.c_acctbal, .n_name = g.key.n_name, .c_address ="
    },
    {
      "Name": "__find_uniq_type_in_pack",
      "Params": null,
      "Ret": "int",
      "Body": "tbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GRow\u0026 v) {"
    },
    {
      "Name": "__iter_less_iter",
      "Params": null,
      "Ret": "_Iter_less_iter",
      "Body": "fault;\n};\n\nstruct GGroup {\n "
    },
    {
      "Name": "__iter_less_val",
      "Params": null,
      "Ret": "_Iter_less_val",
      "Body": "sultItem\u0026) const = default;"
    },
    {
      "Name": "__iter_comp_val",
      "Params": [
        {
          "Name": "",
          "Typ": "_Iter_less_iter"
        }
      ],
      "Ret": "_Iter_less_val",
      "Body": " \"'n_nationkey': \" \u003c\u003c v.n_n"
    },
    {
      "Name": "__val_less_iter",
      "Params": null,
      "Ret": "_Val_less_iter",
      "Body": "\" \u003c\u003c \"'c_comment': '\" \u003c\u003c v."
    },
    {
      "Name": "__val_comp_iter",
      "Params": [
        {
          "Name": "",
          "Typ": "_Iter_less_iter"
        }
      ],
      "Ret": "_Val_less_iter",
      "Body": "onst OrdersItem\u0026 v) {\n    o"
    },
    {
      "Name": "__iter_equal_to_iter",
      "Params": null,
      "Ret": "_Iter_equal_to_iter",
      "Body": "ag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\""
    },
    {
      "Name": "__iter_equal_to_val",
      "Params": null,
      "Ret": "_Iter_equal_to_val",
      "Body": " \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_"
    },
    {
      "Name": "__iter_comp_val",
      "Params": [
        {
          "Name": "",
          "Typ": "_Iter_equal_to_iter"
        }
      ],
      "Ret": "_Iter_equal_to_val",
      "Body": "\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_ad"
    },
    {
      "Name": "__iter_comp_iter",
      "Params": [
        {
          "Name": "__comp",
          "Typ": "_Compare"
        }
      ],
      "Ret": "_Iter_comp_iter\u003c_Compare\u003e",
      "Body": ":ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v)"
    },
    {
      "Name": "__iter_comp_val",
      "Params": [
        {
          "Name": "__comp",
          "Typ": "_Compare"
        }
      ],
      "Ret": "_Iter_comp_val\u003c_Compare\u003e",
      "Body": "\u003cOrdersItem\u003e orders = std::vector{OrdersItem{.o_orderkey ="
    },
    {
      "Name": "__iter_comp_val",
      "Params": [
        {
          "Name": "__comp",
          "Typ": "_Iter_comp_iter\u003c_Compare\u003e"
        }
      ],
      "Ret": "_Iter_comp_val\u003c_Compare\u003e",
      "Body": ")}};\nstd::vector\u003cLineitemItem\u003e lineitem = std::vector{Line"
    },
    {
      "Name": "__val_comp_iter",
      "Params": [
        {
          "Name": "__comp",
          "Typ": "_Compare"
        }
      ],
      "Ret": "_Val_comp_iter\u003c_Compare\u003e",
      "Body": "cctbal = c.c_acctbal, .c_address = c.c_address, .c_phone ="
    },
    {
      "Name": "__val_comp_iter",
      "Params": [
        {
          "Name": "__comp",
          "Typ": "_Iter_comp_iter\u003c_Compare\u003e"
        }
      ],
      "Ret": "_Val_comp_iter\u003c_Compare\u003e",
      "Body": "_key) { __g.items.push_back(__row); __found = true; break;"
    },
    {
      "Name": "__iter_equals_val",
      "Params": [
        {
          "Name": "__val",
          "Typ": "_Value"
        }
      ],
      "Ret": "_Iter_equals_val\u003c_Value\u003e",
      "Body": "}\nreturn __items; }()); return std::accumu"
    },
    {
      "Name": "bit_cast",
      "Params": [
        {
          "Name": "__from",
          "Typ": "_From"
        }
      ],
      "Ret": "_To",
      "Body": "': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_"
    },
    {
      "Name": "__rotl",
      "Params": [
        {
          "Name": "__x",
          "Typ": "_Tp"
        },
        {
          "Name": "__s",
          "Typ": "int"
        }
      ],
      "Ret": "_Tp",
      "Body": " \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'revenue': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.revenue \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::vector\u003cNationItem\u003e nation = std::vector{NationItem{.n_nationkey = 1, .n_name = std::string(\"BRAZIL\")}};\nstd::vector\u003cCustomerItem\u003e customer = std::vector{"
    },
    {
      "Name": "__rotr",
      "Params": [
        {
          "Name": "__x",
          "Typ": "_Tp"
        },
        {
          "Name": "__s",
          "Typ": "int"
        }
      ],
      "Ret": "_Tp",
      "Body": "onkey = 1, .c_address = std::string(\"123 St\"), .c_phone = std::string(\"123-456\"), .c_comment = std::string(\"Loyal\")}};\nstd::vector\u003cOrdersItem\u003e orders = std::vector{OrdersItem{.o_orderkey = 1000, .o_custkey = 1, .o_orderdate = std::string(\"1993-10-15\")}, OrdersItem{.o_orderkey = 2000, .o_custkey = 1, .o_orderdate = std::string(\"1994-01-02\")}};\nstd::vector\u003cLineitemItem\u003e lineitem = std::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0.1}, LineitemItem{.l_orderkey = 2000, .l_returnflag = std::string("
    },
    {
      "Name": "__countl_zero",
      "Params": [
        {
          "Name": "__x",
          "Typ": "_Tp"
        }
      ],
      "Ret": "int",
      "Body": "93-10-01\");\nauto end_date = std::string(\"1994-01-01\");\nstd::vector\u003cResultItem\u003e result = ([]{ std::vector\u003cResultItem\u003e __items;\nstd::vector\u003cGGroup\u003e __groups;\nfor (auto c : customer) {\nfor (auto o : orders) {\nfor (auto l : lineitem) {\nfor (auto n : nation) {\n    if(((((((o.o_orderdate \u003e= start_date) \u0026\u0026 (o.o_orderdate \u003c end_date)) \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o_custkey == c.c_custkey)) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationkey))) {\n        GRow __row{c, o, l, n};\n        auto __key = GKey{.c_custkey = c.c_custkey, .c_name = c.c_name, .c_acctbal = c.c_acctbal, .c_address = c.c_address, .c_phone = c.c_phone, .c_comment = c.c_comment, .n_name = n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.items.push_back(__row); __found = true; break; }\n        }\n        if(!__found) {\n            GGroup __g{__key, {}};\n            __g.items.push_back(__row);\n            __groups.push_back(__g);\n        }\n    }\n}\n}\n}\n}\nfor(auto \u0026__g : __groups) {\n    GGroup g = __g;\n    __items.push_back(ResultItem{.c_custkey = g.key.c_custkey, .c_name = g.key.c_name, .revenue = ([\u0026]{ auto __tmp = ([\u0026]{ std::vector\u003cdouble\u003e __items;\nfor "
    },
    {
      "Name": "__countl_one",
      "Params": [
        {
          "Name": "__x",
          "Typ": "_Tp"
        }
      ],
      "Ret": "int",
      "Body": ");\n}\nreturn __items; }()); return std::accumulate(__tmp"
    },
    {
      "Name": "__memcmp",
      "Params": [
        {
          "Name": "__first1",
          "Typ": "_Tp"
        },
        {
          "Name": "__first2",
          "Typ": "_Up"
        },
        {
          "Name": "__num",
          "Typ": "int"
        }
      ],
      "Ret": "int",
      "Body": " \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GKey\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c"
    },
    {
      "Name": "iter_swap",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_ForwardIterator1"
        },
        {
          "Name": "__b",
          "Typ": "_ForwardIterator2"
        }
      ],
      "Ret": "",
      "Body": "St\"), .c_phone = std::string(\"123-456\"), .c_comment = std::string(\"Loyal\")}};\nstd::vector\u003cOrdersItem\u003e orders = std::vector{OrdersItem{.o_orderkey = 1000, .o_custkey = 1, .o_orderdate = std::string(\"1993-10-15\")}, OrdersItem{.o_orderkey = 2000, .o_custkey = 1, .o_orderdate = std::string(\"1994-01-02\")}};\nstd::vector\u003cLineitemItem\u003e lineitem = std::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0.1}, LineitemItem{.l_orderkey = 2000, .l_returnflag = std::string(\"N\"), .l_extendedprice = 500.0, .l_discount = 0.0}};\nauto start_date = std::string(\"1993-10-01\");\nauto end_date = std::string(\"1994-01-01\");\nstd::vector\u003cResultItem\u003e result = ([]{ std::vector\u003cResultItem\u003e __items;\nstd::vector\u003cGGroup\u003e __groups;\nfor (auto c : customer) {\nfor (auto o : orders) {\nfor (auto l : lineitem) {\nfor (auto n : nation) {\n    if(((((((o.o_orderdate \u003e= start_date) \u0026\u0026 (o.o_orderdate \u003c end_date)) \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o_custkey == c.c_custkey)) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationke"
    },
    {
      "Name": "swap_ranges",
      "Params": [
        {
          "Name": "__first1",
          "Typ": "_ForwardIterator1"
        },
        {
          "Name": "__last1",
          "Typ": "_ForwardIterator1"
        },
        {
          "Name": "__first2",
          "Typ": "_ForwardIterator2"
        }
      ],
      "Ret": "_ForwardIterator2",
      "Body": "me, .revenue = ([\u0026]{ auto __tmp = ([\u0026]{ std::vector\u003cdouble\u003e __items;\nfor (auto x : g) {\n        __items.push_back((x.l.l_extendedprice * (1 - x.l.l_discount)));\n}\nreturn __items; }()); return std::accumulate(__tmp.begin(), __tmp.end(), 0.0); }()), .c_acctbal = g.key.c_acctbal, .n_name = g.key.n_name, .c_address = g.key.c_address, .c_phone = g.key.c_phone, .c_comment = g.key.c_comment});\n}\nreturn __ite"
    },
    {
      "Name": "__invfwd",
      "Params": [
        {
          "Name": "__t",
          "Typ": "typename remove_reference\u003c_Tp\u003e::type"
        }
      ],
      "Ret": "_Up",
      "Body": "eturn items.end(); }\n    size_t si"
    },
    {
      "Name": "__invoke_impl",
      "Params": [
        {
          "Name": "",
          "Typ": "__invoke_other"
        },
        {
          "Name": "__f",
          "Typ": "_Fn"
        },
        {
          "Name": "__args",
          "Typ": "_Args \u0026\u0026..."
        }
      ],
      "Ret": "_Res",
      "Body": "std::string n_name;\n    std::string c_address;\n    std::string c_"
    },
    {
      "Name": "__invoke_impl",
      "Params": [
        {
          "Name": "",
          "Typ": "__invoke_memfun_ref"
        },
        {
          "Name": "__f",
          "Typ": "_MemFun"
        },
        {
          "Name": "__t",
          "Typ": "_Tp"
        },
        {
          "Name": "__args",
          "Typ": "_Args \u0026\u0026..."
        }
      ],
      "Ret": "_Res",
      "Body": "': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c"
    },
    {
      "Name": "__invoke_impl",
      "Params": [
        {
          "Name": "",
          "Typ": "__invoke_memfun_deref"
        },
        {
          "Name": "__f",
          "Typ": "_MemFun"
        },
        {
          "Name": "__t",
          "Typ": "_Tp"
        },
        {
          "Name": "__args",
          "Typ": "_Args \u0026\u0026..."
        }
      ],
      "Ret": "_Res",
      "Body": "\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c"
    },
    {
      "Name": "__invoke_impl",
      "Params": [
        {
          "Name": "",
          "Typ": "__invoke_memobj_ref"
        },
        {
          "Name": "__f",
          "Typ": "_MemPtr"
        },
        {
          "Name": "__t",
          "Typ": "_Tp"
        }
      ],
      "Ret": "_Res",
      "Body": "t': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}"
    },
    {
      "Name": "__invoke_impl",
      "Params": [
        {
          "Name": "",
          "Typ": "__invoke_memobj_deref"
        },
        {
          "Name": "__f",
          "Typ": "_MemPtr"
        },
        {
          "Name": "__t",
          "Typ": "_Tp"
        }
      ],
      "Ret": "_Res",
      "Body": "_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'"
    },
    {
      "Name": "__invoke",
      "Params": [
        {
          "Name": "__fn",
          "Typ": "_Callable"
        },
        {
          "Name": "__args",
          "Typ": "_Args \u0026\u0026..."
        }
      ],
      "Ret": "typename __invoke_result\u003c_Callable, _Args...\u003e::type",
      "Body": ": \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GKey\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", "
    },
    {
      "Name": "__invoke_r",
      "Params": [
        {
          "Name": "__fn",
          "Typ": "_Callable"
        },
        {
          "Name": "__args",
          "Typ": "_Args \u0026\u0026..."
        }
      ],
      "Ret": "enable_if_t\u003cis_invocable_r_v\u003c_Res, _Callable, _Args...\u003e, _Res\u003e",
      "Body": "ostream\u0026 os, const GRow\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c': \" \u003c\u003c v.c \u003c\u003c \", \" \u003c\u003c \"'o': \" \u003c\u003c v.o \u003c\u003c \", \" \u003c\u003c \"'l': \" \u003c\u003c v.l \u003c\u003c \", \" \u003c\u003c \"'n': \" \u003c\u003c v.n \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GGroup\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'key': \" \u003c\u003c v.key \u003c\u003c \", \" \u003c\u003c \"'items': \" \u003c\u003c v.items \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \","
    },
    {
      "Name": "begin",
      "Params": [
        {
          "Name": "__ils",
          "Typ": "initializer_list\u003c_Tp\u003e"
        }
      ],
      "Ret": "_Tp",
      "Body": "std::setprecision(1) \u003c\u003c "
    },
    {
      "Name": "end",
      "Params": [
        {
          "Name": "__ils",
          "Typ": "initializer_list\u003c_Tp\u003e"
        }
      ],
      "Ret": "_Tp",
      "Body": " {\n    os \u003c\u003c '{' \u003c\u003c \"'"
    },
    {
      "Name": "begin",
      "Params": [
        {
          "Name": "__cont",
          "Typ": "_Container"
        }
      ],
      "Ret": "",
      "Body": "{ return items.size(); }\n"
    },
    {
      "Name": "begin",
      "Params": [
        {
          "Name": "__cont",
          "Typ": "_Container"
        }
      ],
      "Ret": "",
      "Body": " {\n    os \u003c\u003c '{' \u003c\u003c \"'n_n"
    },
    {
      "Name": "end",
      "Params": [
        {
          "Name": "__cont",
          "Typ": "_Container"
        }
      ],
      "Ret": "",
      "Body": "v.c_acctbal \u003c\u003c \", \" \u003c\u003c "
    },
    {
      "Name": "end",
      "Params": [
        {
          "Name": "__cont",
          "Typ": "_Container"
        }
      ],
      "Ret": "",
      "Body": "stkey': \" \u003c\u003c v.o_custke"
    },
    {
      "Name": "begin",
      "Params": [
        {
          "Name": "__arr",
          "Typ": "_Tp (\u0026)[_Nm]"
        }
      ],
      "Ret": "_Tp",
      "Body": " \" \u003c\u003c std::fixed"
    },
    {
      "Name": "end",
      "Params": [
        {
          "Name": "__arr",
          "Typ": "_Tp (\u0026)[_Nm]"
        }
      ],
      "Ret": "_Tp",
      "Body": "\u003c\u003c \", \" \u003c\u003c \"'c_acctbal"
    },
    {
      "Name": "cbegin",
      "Params": [
        {
          "Name": "__cont",
          "Typ": "_Container"
        }
      ],
      "Ret": "",
      "Body": "e \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'revenue"
    },
    {
      "Name": "cend",
      "Params": [
        {
          "Name": "__cont",
          "Typ": "_Container"
        }
      ],
      "Ret": "",
      "Body": "Item\u003e nation = std::vector{"
    },
    {
      "Name": "rbegin",
      "Params": [
        {
          "Name": "__cont",
          "Typ": "_Container"
        }
      ],
      "Ret": "",
      "Body": "OrdersItem\u003e orders = std::"
    },
    {
      "Name": "rbegin",
      "Params": [
        {
          "Name": "__cont",
          "Typ": "_Container"
        }
      ],
      "Ret": "",
      "Body": " 0.1}, LineitemItem{.l_ord"
    },
    {
      "Name": "rend",
      "Params": [
        {
          "Name": "__cont",
          "Typ": "_Container"
        }
      ],
      "Ret": "",
      "Body": "or (auto l : lineitem) {"
    },
    {
      "Name": "rend",
      "Params": [
        {
          "Name": "__cont",
          "Typ": "_Container"
        }
      ],
      "Ret": "",
      "Body": "me, .c_acctbal = c.c_acc"
    },
    {
      "Name": "rbegin",
      "Params": [
        {
          "Name": "__arr",
          "Typ": "_Tp (\u0026)[_Nm]"
        }
      ],
      "Ret": "reverse_iterator\u003c_Tp *\u003e",
      "Body": "   GGroup __g{__key, {}};\n            __g.item"
    },
    {
      "Name": "rend",
      "Params": [
        {
          "Name": "__arr",
          "Typ": "_Tp (\u0026)[_Nm]"
        }
      ],
      "Ret": "reverse_iterator\u003c_Tp *\u003e",
      "Body": "      __items.push_back((x.l.l_extendedp"
    },
    {
      "Name": "operator+=",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Tp"
        },
        {
          "Name": "__b",
          "Typ": "__max_size_type"
        }
      ],
      "Ret": "_Tp",
      "Body": "_items; }()); return std::accumulate(__tmp.beg"
    },
    {
      "Name": "operator-=",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Tp"
        },
        {
          "Name": "__b",
          "Typ": "__max_size_type"
        }
      ],
      "Ret": "_Tp",
      "Body": "y.c_comment});\n}\nreturn __items; }());\n\nint ma"
    },
    {
      "Name": "__to_unsigned_like",
      "Params": [
        {
          "Name": "__t",
          "Typ": "__max_size_type"
        }
      ],
      "Ret": "__max_size_type",
      "Body": " size_t size()"
    },
    {
      "Name": "__to_unsigned_like",
      "Params": [
        {
          "Name": "__t",
          "Typ": "__max_diff_type"
        }
      ],
      "Ret": "__max_size_type",
      "Body": " c_name;\n    double revenue;\n  "
    },
    {
      "Name": "__to_unsigned_like",
      "Params": [
        {
          "Name": "__t",
          "Typ": "_Tp"
        }
      ],
      "Ret": "",
      "Body": "std::string c_comment;\n    auto operator\u003c=\u003e(const"
    },
    {
      "Name": "__to_unsigned_like",
      "Params": [
        {
          "Name": "__t",
          "Typ": "__int128"
        }
      ],
      "Ret": "__int128",
      "Body": "_nationkey \u003c\u003c "
    },
    {
      "Name": "__to_unsigned_like",
      "Params": [
        {
          "Name": "__t",
          "Typ": "__int128"
        }
      ],
      "Ret": "__int128",
      "Body": "d::ostream\u0026 os"
    },
    {
      "Name": "__sv_check",
      "Params": [
        {
          "Name": "__size",
          "Typ": "int"
        },
        {
          "Name": "__pos",
          "Typ": "int"
        },
        {
          "Name": "__s",
          "Typ": "string"
        }
      ],
      "Ret": "int",
      "Body": "std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::"
    },
    {
      "Name": "__sv_limit",
      "Params": [
        {
          "Name": "__size",
          "Typ": "int"
        },
        {
          "Name": "__pos",
          "Typ": "int"
        },
        {
          "Name": "__off",
          "Typ": "int"
        }
      ],
      "Ret": "int",
      "Body": "td::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c"
    },
    {
      "Name": "__bswap_16",
      "Params": [
        {
          "Name": "__bsx",
          "Typ": "__uint16_t"
        }
      ],
      "Ret": "__uint16_t",
      "Body": "\n};\n\nstruct GKey {\n    int c_custkey;\n    std::string c_name;\n    double c_acctbal;\n    std::string c_address;\n   "
    },
    {
      "Name": "__bswap_32",
      "Params": [
        {
          "Name": "__bsx",
          "Typ": "__uint32_t"
        }
      ],
      "Ret": "__uint32_t",
      "Body": "= default;\n};\n\nstruct GGroup {\n    GKey key;\n    std::vector\u003cGRow\u003e items;\n    auto operator\u003c=\u003e(const GGroup\u0026) cons"
    },
    {
      "Name": "__bswap_64",
      "Params": [
        {
          "Name": "__bsx",
          "Typ": "__uint64_t"
        }
      ],
      "Ret": "__uint64_t",
      "Body": "\"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostr"
    },
    {
      "Name": "__uint16_identity",
      "Params": [
        {
          "Name": "__x",
          "Typ": "__uint16_t"
        }
      ],
      "Ret": "__uint16_t",
      "Body": "truct GKey {\n   "
    },
    {
      "Name": "__uint32_identity",
      "Params": [
        {
          "Name": "__x",
          "Typ": "__uint32_t"
        }
      ],
      "Ret": "__uint32_t",
      "Body": " std::string c_a"
    },
    {
      "Name": "__uint64_identity",
      "Params": [
        {
          "Name": "__x",
          "Typ": "__uint64_t"
        }
      ],
      "Ret": "__uint64_t",
      "Body": "td::string n_nam"
    },
    {
      "Name": "abs",
      "Params": [
        {
          "Name": "__i",
          "Typ": "int"
        }
      ],
      "Ret": "int",
      "Body": "ow\u003e items;\n    auto operator\u003c="
    },
    {
      "Name": "abs",
      "Params": [
        {
          "Name": "__x",
          "Typ": "long long"
        }
      ],
      "Ret": "long long",
      "Body": " auto end() { return items.end()"
    },
    {
      "Name": "abs",
      "Params": [
        {
          "Name": "__x",
          "Typ": "float"
        }
      ],
      "Ret": "float",
      "Body": "\n};\n\nstd::ostream\u0026 operator\u003c\u003c("
    },
    {
      "Name": "abs",
      "Params": [
        {
          "Name": "__x",
          "Typ": "float"
        }
      ],
      "Ret": "float",
      "Body": "\u003c \"'n_nationkey': \" \u003c\u003c v.n_nati"
    },
    {
      "Name": "abs",
      "Params": [
        {
          "Name": "__x",
          "Typ": "long double"
        }
      ],
      "Ret": "long double",
      "Body": " os;\n}\n\nstd::ostream\u0026 operator\u003c"
    },
    {
      "Name": "div",
      "Params": [
        {
          "Name": "__i",
          "Typ": "int"
        },
        {
          "Name": "__j",
          "Typ": "int"
        }
      ],
      "Ret": "ldiv_t",
      "Body": "\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phon"
    },
    {
      "Name": "div",
      "Params": [
        {
          "Name": "__n",
          "Typ": "long long"
        },
        {
          "Name": "__d",
          "Typ": "long long"
        }
      ],
      "Ret": "lldiv_t",
      "Body": ", .o_orderdate = std::string(\"1994-01-02\")}};\nstd::vector\u003cLineitemItem"
    },
    {
      "Name": "__stoa",
      "Params": [
        {
          "Name": "__convf",
          "Typ": "_TRet (*)(const _CharT *, _CharT **, _Base...)"
        },
        {
          "Name": "__name",
          "Typ": "string"
        },
        {
          "Name": "__str",
          "Typ": "_CharT"
        },
        {
          "Name": "__idx",
          "Typ": "std::size_t"
        },
        {
          "Name": "__base",
          "Typ": "_Base..."
        }
      ],
      "Ret": "_Ret",
      "Body": "struct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" "
    },
    {
      "Name": "__stoa",
      "Params": [
        {
          "Name": "__convf",
          "Typ": "long (*)(const char *, char **, int)"
        },
        {
          "Name": "__name",
          "Typ": "string"
        },
        {
          "Name": "__str",
          "Typ": "string"
        },
        {
          "Name": "__idx",
          "Typ": "std::size_t"
        },
        {
          "Name": "__base",
          "Typ": "int"
        }
      ],
      "Ret": "int",
      "Body": "struct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" "
    },
    {
      "Name": "__stoa",
      "Params": [
        {
          "Name": "__convf",
          "Typ": "long (*)(const char *, char **, int)"
        },
        {
          "Name": "__name",
          "Typ": "string"
        },
        {
          "Name": "__str",
          "Typ": "string"
        },
        {
          "Name": "__idx",
          "Typ": "std::size_t"
        },
        {
          "Name": "__base",
          "Typ": "int"
        }
      ],
      "Ret": "int",
      "Body": "struct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" "
    },
    {
      "Name": "__stoa",
      "Params": [
        {
          "Name": "__convf",
          "Typ": "long (*)(const char *, char **, int)"
        },
        {
          "Name": "__name",
          "Typ": "string"
        },
        {
          "Name": "__str",
          "Typ": "string"
        },
        {
          "Name": "__idx",
          "Typ": "std::size_t"
        },
        {
          "Name": "__base",
          "Typ": "int"
        }
      ],
      "Ret": "int",
      "Body": "struct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" "
    },
    {
      "Name": "__stoa",
      "Params": [
        {
          "Name": "__convf",
          "Typ": "long long (*)(const char *, char **, int)"
        },
        {
          "Name": "__name",
          "Typ": "string"
        },
        {
          "Name": "__str",
          "Typ": "string"
        },
        {
          "Name": "__idx",
          "Typ": "std::size_t"
        },
        {
          "Name": "__base",
          "Typ": "int"
        }
      ],
      "Ret": "long long",
      "Body": "struct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" "
    },
    {
      "Name": "__stoa",
      "Params": [
        {
          "Name": "__convf",
          "Typ": "long long (*)(const char *, char **, int)"
        },
        {
          "Name": "__name",
          "Typ": "string"
        },
        {
          "Name": "__str",
          "Typ": "string"
        },
        {
          "Name": "__idx",
          "Typ": "std::size_t"
        },
        {
          "Name": "__base",
          "Typ": "int"
        }
      ],
      "Ret": "long long",
      "Body": "struct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" "
    },
    {
      "Name": "__stoa",
      "Params": [
        {
          "Name": "__convf",
          "Typ": "float (*)(const char *, char **)"
        },
        {
          "Name": "__name",
          "Typ": "string"
        },
        {
          "Name": "__str",
          "Typ": "string"
        },
        {
          "Name": "__idx",
          "Typ": "std::size_t"
        }
      ],
      "Ret": "float",
      "Body": "struct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" "
    },
    {
      "Name": "__stoa",
      "Params": [
        {
          "Name": "__convf",
          "Typ": "double (*)(const char *, char **)"
        },
        {
          "Name": "__name",
          "Typ": "string"
        },
        {
          "Name": "__str",
          "Typ": "string"
        },
        {
          "Name": "__idx",
          "Typ": "std::size_t"
        }
      ],
      "Ret": "float",
      "Body": "struct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" "
    },
    {
      "Name": "__stoa",
      "Params": [
        {
          "Name": "__convf",
          "Typ": "long double (*)(const char *, char **)"
        },
        {
          "Name": "__name",
          "Typ": "string"
        },
        {
          "Name": "__str",
          "Typ": "string"
        },
        {
          "Name": "__idx",
          "Typ": "std::size_t"
        }
      ],
      "Ret": "long double",
      "Body": "struct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" "
    },
    {
      "Name": "__stoa",
      "Params": [
        {
          "Name": "__convf",
          "Typ": "long (*)(const wchar_t *, wchar_t **, int)"
        },
        {
          "Name": "__name",
          "Typ": "string"
        },
        {
          "Name": "__str",
          "Typ": "wchar_t"
        },
        {
          "Name": "__idx",
          "Typ": "std::size_t"
        },
        {
          "Name": "__base",
          "Typ": "int"
        }
      ],
      "Ret": "int",
      "Body": "struct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" "
    },
    {
      "Name": "__stoa",
      "Params": [
        {
          "Name": "__convf",
          "Typ": "long (*)(const wchar_t *, wchar_t **, int)"
        },
        {
          "Name": "__name",
          "Typ": "string"
        },
        {
          "Name": "__str",
          "Typ": "wchar_t"
        },
        {
          "Name": "__idx",
          "Typ": "std::size_t"
        },
        {
          "Name": "__base",
          "Typ": "int"
        }
      ],
      "Ret": "int",
      "Body": "struct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" "
    },
    {
      "Name": "__stoa",
      "Params": [
        {
          "Name": "__convf",
          "Typ": "long (*)(const wchar_t *, wchar_t **, int)"
        },
        {
          "Name": "__name",
          "Typ": "string"
        },
        {
          "Name": "__str",
          "Typ": "wchar_t"
        },
        {
          "Name": "__idx",
          "Typ": "std::size_t"
        },
        {
          "Name": "__base",
          "Typ": "int"
        }
      ],
      "Ret": "int",
      "Body": "struct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" "
    },
    {
      "Name": "__stoa",
      "Params": [
        {
          "Name": "__convf",
          "Typ": "long long (*)(const wchar_t *, wchar_t **, int)"
        },
        {
          "Name": "__name",
          "Typ": "string"
        },
        {
          "Name": "__str",
          "Typ": "wchar_t"
        },
        {
          "Name": "__idx",
          "Typ": "std::size_t"
        },
        {
          "Name": "__base",
          "Typ": "int"
        }
      ],
      "Ret": "long long",
      "Body": "struct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" "
    },
    {
      "Name": "__stoa",
      "Params": [
        {
          "Name": "__convf",
          "Typ": "long long (*)(const wchar_t *, wchar_t **, int)"
        },
        {
          "Name": "__name",
          "Typ": "string"
        },
        {
          "Name": "__str",
          "Typ": "wchar_t"
        },
        {
          "Name": "__idx",
          "Typ": "std::size_t"
        },
        {
          "Name": "__base",
          "Typ": "int"
        }
      ],
      "Ret": "long long",
      "Body": "struct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" "
    },
    {
      "Name": "__stoa",
      "Params": [
        {
          "Name": "__convf",
          "Typ": "float (*)(const wchar_t *, wchar_t **)"
        },
        {
          "Name": "__name",
          "Typ": "string"
        },
        {
          "Name": "__str",
          "Typ": "wchar_t"
        },
        {
          "Name": "__idx",
          "Typ": "std::size_t"
        }
      ],
      "Ret": "float",
      "Body": "struct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" "
    },
    {
      "Name": "__stoa",
      "Params": [
        {
          "Name": "__convf",
          "Typ": "double (*)(const wchar_t *, wchar_t **)"
        },
        {
          "Name": "__name",
          "Typ": "string"
        },
        {
          "Name": "__str",
          "Typ": "wchar_t"
        },
        {
          "Name": "__idx",
          "Typ": "std::size_t"
        }
      ],
      "Ret": "float",
      "Body": "struct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" "
    },
    {
      "Name": "__stoa",
      "Params": [
        {
          "Name": "__convf",
          "Typ": "long double (*)(const wchar_t *, wchar_t **)"
        },
        {
          "Name": "__name",
          "Typ": "string"
        },
        {
          "Name": "__str",
          "Typ": "wchar_t"
        },
        {
          "Name": "__idx",
          "Typ": "std::size_t"
        }
      ],
      "Ret": "long double",
      "Body": "struct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" "
    },
    {
      "Name": "__to_xstring",
      "Params": [
        {
          "Name": "__convf",
          "Typ": "int (*)(_CharT *, std::size_t, const _CharT *, __va_list_tag *)"
        },
        {
          "Name": "__n",
          "Typ": "std::size_t"
        },
        {
          "Name": "__fmt",
          "Typ": "_CharT"
        }
      ],
      "Ret": "_String",
      "Body": "d::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GKey\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c"
    },
    {
      "Name": "__to_xstring",
      "Params": [
        {
          "Name": "__convf",
          "Typ": "int (*)(char *, std::size_t, const char *, __va_list_tag *)"
        },
        {
          "Name": "__n",
          "Typ": "std::size_t"
        },
        {
          "Name": "__fmt",
          "Typ": "string"
        }
      ],
      "Ret": "std::basic_string\u003cchar\u003e",
      "Body": "d::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GKey\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c"
    },
    {
      "Name": "__to_xstring",
      "Params": [
        {
          "Name": "__convf",
          "Typ": "int (*)(wchar_t *, std::size_t, const wchar_t *, __va_list_tag *)"
        },
        {
          "Name": "__n",
          "Typ": "std::size_t"
        },
        {
          "Name": "__fmt",
          "Typ": "wchar_t"
        }
      ],
      "Ret": "std::basic_string\u003cwchar_t\u003e",
      "Body": "d::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GKey\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c"
    },
    {
      "Name": "__to_chars_len",
      "Params": [
        {
          "Name": "__value",
          "Typ": "_Tp"
        },
        {
          "Name": "__base",
          "Typ": "int"
        }
      ],
      "Ret": "int",
      "Body": "{ return items.size(); }\n};\n\nstruct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 op"
    },
    {
      "Name": "__to_chars_len",
      "Params": [
        {
          "Name": "__value",
          "Typ": "int"
        },
        {
          "Name": "__base",
          "Typ": "int"
        }
      ],
      "Ret": "int",
      "Body": "{ return items.size(); }\n};\n\nstruct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 op"
    },
    {
      "Name": "__to_chars_len",
      "Params": [
        {
          "Name": "__value",
          "Typ": "int"
        },
        {
          "Name": "__base",
          "Typ": "int"
        }
      ],
      "Ret": "int",
      "Body": "{ return items.size(); }\n};\n\nstruct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 op"
    },
    {
      "Name": "__to_chars_len",
      "Params": [
        {
          "Name": "__value",
          "Typ": "long long"
        },
        {
          "Name": "__base",
          "Typ": "int"
        }
      ],
      "Ret": "int",
      "Body": "{ return items.size(); }\n};\n\nstruct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 op"
    },
    {
      "Name": "__to_chars_10_impl",
      "Params": [
        {
          "Name": "__first",
          "Typ": "string"
        },
        {
          "Name": "__len",
          "Typ": "int"
        },
        {
          "Name": "__val",
          "Typ": "_Tp"
        }
      ],
      "Ret": "",
      "Body": " '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const OrdersItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GKey\u0026 v) {\n "
    },
    {
      "Name": "__to_chars_10_impl",
      "Params": [
        {
          "Name": "__first",
          "Typ": "string"
        },
        {
          "Name": "__len",
          "Typ": "int"
        },
        {
          "Name": "__val",
          "Typ": "int"
        }
      ],
      "Ret": "",
      "Body": " '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const OrdersItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GKey\u0026 v) {\n "
    },
    {
      "Name": "__to_chars_10_impl",
      "Params": [
        {
          "Name": "__first",
          "Typ": "string"
        },
        {
          "Name": "__len",
          "Typ": "int"
        },
        {
          "Name": "__val",
          "Typ": "int"
        }
      ],
      "Ret": "",
      "Body": " '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const OrdersItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GKey\u0026 v) {\n "
    },
    {
      "Name": "__to_chars_10_impl",
      "Params": [
        {
          "Name": "__first",
          "Typ": "string"
        },
        {
          "Name": "__len",
          "Typ": "int"
        },
        {
          "Name": "__val",
          "Typ": "long long"
        }
      ],
      "Ret": "",
      "Body": " '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const OrdersItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GKey\u0026 v) {\n "
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "__b",
          "Typ": "byte"
        },
        {
          "Name": "__shift",
          "Typ": "_IntegerType"
        }
      ],
      "Ret": "__byte_op_t\u003c_IntegerType\u003e",
      "Body": ": '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v."
    },
    {
      "Name": "operator\u003e\u003e",
      "Params": [
        {
          "Name": "__b",
          "Typ": "byte"
        },
        {
          "Name": "__shift",
          "Typ": "_IntegerType"
        }
      ],
      "Ret": "__byte_op_t\u003c_IntegerType\u003e",
      "Body": " = std::string(\"BRAZIL\")}};\nstd::vector\u003cCustomerItem\u003e cust"
    },
    {
      "Name": "operator|",
      "Params": [
        {
          "Name": "__l",
          "Typ": "byte"
        },
        {
          "Name": "__r",
          "Typ": "byte"
        }
      ],
      "Ret": "byte",
      "Body": ".0, .c_nationkey = 1, .c_address = std::string(\"123 St\"), .c_ph"
    },
    {
      "Name": "operator\u0026",
      "Params": [
        {
          "Name": "__l",
          "Typ": "byte"
        },
        {
          "Name": "__r",
          "Typ": "byte"
        }
      ],
      "Ret": "byte",
      "Body": "s = std::vector{OrdersItem{.o_orderkey = 1000, .o_custkey = 1, "
    },
    {
      "Name": "operator^",
      "Params": [
        {
          "Name": "__l",
          "Typ": "byte"
        },
        {
          "Name": "__r",
          "Typ": "byte"
        }
      ],
      "Ret": "byte",
      "Body": "erdate = std::string(\"1994-01-02\")}};\nstd::vector\u003cLineitemItem\u003e"
    },
    {
      "Name": "operator~",
      "Params": [
        {
          "Name": "__b",
          "Typ": "byte"
        }
      ],
      "Ret": "byte",
      "Body": "R\"), .l_extendedprice = 1000.0, .l_discount = "
    },
    {
      "Name": "operator\u003c\u003c=",
      "Params": [
        {
          "Name": "__b",
          "Typ": "byte"
        },
        {
          "Name": "__shift",
          "Typ": "_IntegerType"
        }
      ],
      "Ret": "__byte_op_t\u003c_IntegerType\u003e",
      "Body": "ate = std::string(\"1994-01-01\")"
    },
    {
      "Name": "operator\u003e\u003e=",
      "Params": [
        {
          "Name": "__b",
          "Typ": "byte"
        },
        {
          "Name": "__shift",
          "Typ": "_IntegerType"
        }
      ],
      "Ret": "__byte_op_t\u003c_IntegerType\u003e",
      "Body": ") {\nfor (auto n : nation) {\n   "
    },
    {
      "Name": "operator|=",
      "Params": [
        {
          "Name": "__l",
          "Typ": "byte"
        },
        {
          "Name": "__r",
          "Typ": "byte"
        }
      ],
      "Ret": "byte",
      "Body": "ring(\"R\"))) \u0026\u0026 (o.o_custke"
    },
    {
      "Name": "operator\u0026=",
      "Params": [
        {
          "Name": "__l",
          "Typ": "byte"
        },
        {
          "Name": "__r",
          "Typ": "byte"
        }
      ],
      "Ret": "byte",
      "Body": "   GRow __row{c, o, l, n};"
    },
    {
      "Name": "operator^=",
      "Params": [
        {
          "Name": "__l",
          "Typ": "byte"
        },
        {
          "Name": "__r",
          "Typ": "byte"
        }
      ],
      "Ret": "byte",
      "Body": ".c_address = c.c_address, "
    },
    {
      "Name": "to_integer",
      "Params": [
        {
          "Name": "__b",
          "Typ": "__byte_op_t\u003c_IntegerType\u003e"
        }
      ],
      "Ret": "_IntegerType",
      "Body": "{ __g.items.push_back(__row)"
    },
    {
      "Name": "__use_alloc",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Alloc"
        }
      ],
      "Ret": "__uses_alloc_t\u003c_Tp, _Alloc, _Args...\u003e",
      "Body": "td::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", "
    },
    {
      "Name": "__uses_allocator_construct_impl",
      "Params": [
        {
          "Name": "",
          "Typ": "__uses_alloc0"
        },
        {
          "Name": "__ptr",
          "Typ": "_Tp"
        },
        {
          "Name": "__args",
          "Typ": "_Args \u0026\u0026..."
        }
      ],
      "Ret": "",
      "Body": ")) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c"
    },
    {
      "Name": "__uses_allocator_construct_impl",
      "Params": [
        {
          "Name": "__a",
          "Typ": "__uses_alloc1\u003c_Alloc\u003e"
        },
        {
          "Name": "__ptr",
          "Typ": "_Tp"
        },
        {
          "Name": "__args",
          "Typ": "_Args \u0026\u0026..."
        }
      ],
      "Ret": "",
      "Body": " .c_phone = c.c_phone, .c_comment = c.c_comment, .n_name = n.n_name};\n        bool __found = false;\n      "
    },
    {
      "Name": "__uses_allocator_construct_impl",
      "Params": [
        {
          "Name": "__a",
          "Typ": "__uses_alloc2\u003c_Alloc\u003e"
        },
        {
          "Name": "__ptr",
          "Typ": "_Tp"
        },
        {
          "Name": "__args",
          "Typ": "_Args \u0026\u0026..."
        }
      ],
      "Ret": "",
      "Body": "{__key, {}};\n            __g.items.push_back(__row);\n            __grou"
    },
    {
      "Name": "__uses_allocator_construct",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Alloc"
        },
        {
          "Name": "__ptr",
          "Typ": "_Tp"
        },
        {
          "Name": "__args",
          "Typ": "_Args \u0026\u0026..."
        }
      ],
      "Ret": "",
      "Body": "= g.key.c_name, .revenue = ([\u0026]{ auto __tmp = ([\u0026]{ std::vector\u003cdouble\u003e __items;\nfor (auto x : g) {\n        __items.push_back((x.l.l_extendedp"
    },
    {
      "Name": "uses_allocator_construction_args",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Alloc"
        },
        {
          "Name": "__args",
          "Typ": "_Args \u0026\u0026..."
        }
      ],
      "Ret": "",
      "Body": "tring c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_c"
    },
    {
      "Name": "uses_allocator_construction_args",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Alloc"
        },
        {
          "Name": "",
          "Typ": "piecewise_construct_t"
        },
        {
          "Name": "__x",
          "Typ": "_Tuple1"
        },
        {
          "Name": "__y",
          "Typ": "_Tuple2"
        }
      ],
      "Ret": "",
      "Body": "sultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'revenue': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.revenue \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::vector\u003cNationItem\u003e nation = std::vector{NationI"
    },
    {
      "Name": "uses_allocator_construction_args",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Alloc"
        }
      ],
      "Ret": "",
      "Body": " .c_name = std::string(\"Alice\"), .c_acctbal = 100.0, .c_nationkey = 1, .c_address = std::string(\"123 St\"), .c_phone = std::string(\"123-456\"), .c_comment = std::string(\"Loyal\")}};\nstd::vector\u003cOrdersItem\u003e orders = std::vector{OrdersItem{.o_orderkey = 1000, "
    },
    {
      "Name": "uses_allocator_construction_args",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Alloc"
        },
        {
          "Name": "__u",
          "Typ": "_Up"
        },
        {
          "Name": "__v",
          "Typ": "_Vp"
        }
      ],
      "Ret": "",
      "Body": "::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0.1}, LineitemItem{.l_orderkey = 2000, .l_returnflag = std::string(\"N\"), .l_extendedprice = 500.0, .l_discount = 0.0}};\nauto start_date = std::string(\"1993-10-01\");\nauto end_date = std::string(\"19"
    },
    {
      "Name": "uses_allocator_construction_args",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Alloc"
        },
        {
          "Name": "__pr",
          "Typ": "pair\u003c_Up, _Vp\u003e"
        }
      ],
      "Ret": "",
      "Body": "n : nation) {\n    if(((((((o.o_orderdate \u003e= start_date) \u0026\u0026 (o.o_orderdate \u003c end_date)) \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o_custkey == c.c_custkey)) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationkey))) {\n        GRow __row{c, o, l, n};\n        auto"
    },
    {
      "Name": "uses_allocator_construction_args",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Alloc"
        },
        {
          "Name": "__pr",
          "Typ": "pair\u003c_Up, _Vp\u003e"
        }
      ],
      "Ret": "",
      "Body": "__found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.items.push_back(__row); __found = true; break; }\n        }\n        if(!__found) {\n            GGroup __g{__key, {}};\n            __g.items.push_back(__row);\n            __groups.push_back(__g);\n        }\n    }\n}\n}\n}\n}\nfor(auto \u0026__g : __groups) {\n    GGroup g = __g;\n    __items.push_back(ResultItem{.c_custkey = g.key.c_custkey, .c_name = g.key.c_name, .revenue = ([\u0026]{ auto __tmp ="
    },
    {
      "Name": "operator==",
      "Params": [
        {
          "Name": "__a",
          "Typ": "memory_resource"
        },
        {
          "Name": "__b",
          "Typ": "memory_resource"
        }
      ],
      "Ret": "bool",
      "Body": "\u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount"
    },
    {
      "Name": "erase_if",
      "Params": [
        {
          "Name": "__cont",
          "Typ": "basic_string\u003c_CharT, _Traits, _Alloc\u003e"
        },
        {
          "Name": "__pred",
          "Typ": "_Predicate"
        }
      ],
      "Ret": "typename basic_string\u003c_CharT, _Traits, _Alloc\u003e::size_type",
      "Body": "o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c"
    },
    {
      "Name": "erase",
      "Params": [
        {
          "Name": "__cont",
          "Typ": "basic_string\u003c_CharT, _Traits, _Alloc\u003e"
        },
        {
          "Name": "__value",
          "Typ": "_Up"
        }
      ],
      "Ret": "typename basic_string\u003c_CharT, _Traits, _Alloc\u003e::size_type",
      "Body": " \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" "
    },
    {
      "Name": "__try_use_facet",
      "Params": [
        {
          "Name": "__loc",
          "Typ": "locale"
        }
      ],
      "Ret": "_Facet",
      "Body": ": '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const OrdersItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GKey\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GRow\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c': \" \u003c\u003c v.c \u003c\u003c \", \" \u003c\u003c \"'o': \" \u003c\u003c v.o \u003c\u003c \", \" \u003c\u003c \"'l': \" \u003c\u003c v.l \u003c\u003c \", \" \u003c\u003c \"'n': \" \u003c\u003c v.n \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GGroup\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'key': \" \u003c\u003c v.key \u003c\u003c \", \" \u003c\u003c \"'items': \" \u003c\u003c v.items \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'revenue': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.revenue \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    "
    },
    {
      "Name": "has_facet",
      "Params": [
        {
          "Name": "__loc",
          "Typ": "locale"
        }
      ],
      "Ret": "bool",
      "Body": "= 1, .o_orderdate = std::string(\"1994-01-02\")}};\nstd::vector\u003cLineitemItem\u003e lineitem = std::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0.1}, LineitemItem{.l_orderkey = 2000, .l_returnflag = std::string(\"N\"), .l_extendedprice = 50"
    },
    {
      "Name": "use_facet",
      "Params": [
        {
          "Name": "__loc",
          "Typ": "locale"
        }
      ],
      "Ret": "_Facet",
      "Body": "e = n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.items.push_back(__row); __found = true; break; }\n        }\n        if(!__found) {\n            GGroup __g{__key, {}};\n            __g.items.push_back(__row);\n            __groups.push_back(__g);\n        }\n    }\n}\n}\n}\n}\nfor(auto \u0026__g "
    },
    {
      "Name": "operator\u0026",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Ios_Fmtflags"
        },
        {
          "Name": "__b",
          "Typ": "_Ios_Fmtflags"
        }
      ],
      "Ret": "_Ios_Fmtflags",
      "Body": "\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment'"
    },
    {
      "Name": "operator|",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Ios_Fmtflags"
        },
        {
          "Name": "__b",
          "Typ": "_Ios_Fmtflags"
        }
      ],
      "Ret": "_Ios_Fmtflags",
      "Body": "onst OrdersItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey"
    },
    {
      "Name": "operator^",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Ios_Fmtflags"
        },
        {
          "Name": "__b",
          "Typ": "_Ios_Fmtflags"
        }
      ],
      "Ret": "_Ios_Fmtflags",
      "Body": "\u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, co"
    },
    {
      "Name": "operator~",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Ios_Fmtflags"
        }
      ],
      "Ret": "_Ios_Fmtflags",
      "Body": " \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \""
    },
    {
      "Name": "operator|=",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Ios_Fmtflags"
        },
        {
          "Name": "__b",
          "Typ": "_Ios_Fmtflags"
        }
      ],
      "Ret": "_Ios_Fmtflags",
      "Body": "edprice \u003c\u003c \", \" \u003c\u003c \"'l_dis"
    },
    {
      "Name": "operator\u0026=",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Ios_Fmtflags"
        },
        {
          "Name": "__b",
          "Typ": "_Ios_Fmtflags"
        }
      ],
      "Ret": "_Ios_Fmtflags",
      "Body": "}\n\nstd::ostream\u0026 operator\u003c"
    },
    {
      "Name": "operator^=",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Ios_Fmtflags"
        },
        {
          "Name": "__b",
          "Typ": "_Ios_Fmtflags"
        }
      ],
      "Ret": "_Ios_Fmtflags",
      "Body": " \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c "
    },
    {
      "Name": "operator\u0026",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Ios_Openmode"
        },
        {
          "Name": "__b",
          "Typ": "_Ios_Openmode"
        }
      ],
      "Ret": "_Ios_Openmode",
      "Body": "l': \" \u003c\u003c v.l \u003c\u003c \", \" \u003c\u003c \"'n': \" \u003c\u003c v.n \u003c\u003c '}';\n    return os;\n}\n\nstd::o"
    },
    {
      "Name": "operator|",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Ios_Openmode"
        },
        {
          "Name": "__b",
          "Typ": "_Ios_Openmode"
        }
      ],
      "Ret": "_Ios_Openmode",
      "Body": " \" \u003c\u003c \"'items': \" \u003c\u003c v.items \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 op"
    },
    {
      "Name": "operator^",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Ios_Openmode"
        },
        {
          "Name": "__b",
          "Typ": "_Ios_Openmode"
        }
      ],
      "Ret": "_Ios_Openmode",
      "Body": " \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'revenue': \" \u003c"
    },
    {
      "Name": "operator~",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Ios_Openmode"
        }
      ],
      "Ret": "_Ios_Openmode",
      "Body": "\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acct"
    },
    {
      "Name": "operator|=",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Ios_Openmode"
        },
        {
          "Name": "__b",
          "Typ": "_Ios_Openmode"
        }
      ],
      "Ret": "_Ios_Openmode",
      "Body": "ess \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_"
    },
    {
      "Name": "operator\u0026=",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Ios_Openmode"
        },
        {
          "Name": "__b",
          "Typ": "_Ios_Openmode"
        }
      ],
      "Ret": "_Ios_Openmode",
      "Body": ";\n    return os;\n}\n\nstd::v"
    },
    {
      "Name": "operator^=",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Ios_Openmode"
        },
        {
          "Name": "__b",
          "Typ": "_Ios_Openmode"
        }
      ],
      "Ret": "_Ios_Openmode",
      "Body": "ng(\"BRAZIL\")}};\nstd::vecto"
    },
    {
      "Name": "operator\u0026",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Ios_Iostate"
        },
        {
          "Name": "__b",
          "Typ": "_Ios_Iostate"
        }
      ],
      "Ret": "_Ios_Iostate",
      "Body": "string(\"1993-10-15\")}, OrdersItem{.o_orderkey = 2000, .o_custkey = 1, "
    },
    {
      "Name": "operator|",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Ios_Iostate"
        },
        {
          "Name": "__b",
          "Typ": "_Ios_Iostate"
        }
      ],
      "Ret": "_Ios_Iostate",
      "Body": "ineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_e"
    },
    {
      "Name": "operator^",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Ios_Iostate"
        },
        {
          "Name": "__b",
          "Typ": "_Ios_Iostate"
        }
      ],
      "Ret": "_Ios_Iostate",
      "Body": "d::string(\"N\"), .l_extendedprice = 500.0, .l_discount = 0.0}};\nauto st"
    },
    {
      "Name": "operator~",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Ios_Iostate"
        }
      ],
      "Ret": "_Ios_Iostate",
      "Body": "1\");\nstd::vector\u003cResultItem\u003e result = ([]{ std:"
    },
    {
      "Name": "operator|=",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Ios_Iostate"
        },
        {
          "Name": "__b",
          "Typ": "_Ios_Iostate"
        }
      ],
      "Ret": "_Ios_Iostate",
      "Body": "\nfor (auto o : orders) {\nf"
    },
    {
      "Name": "operator\u0026=",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Ios_Iostate"
        },
        {
          "Name": "__b",
          "Typ": "_Ios_Iostate"
        }
      ],
      "Ret": "_Ios_Iostate",
      "Body": "_date) \u0026\u0026 (o.o_orderdate \u003c"
    },
    {
      "Name": "operator^=",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Ios_Iostate"
        },
        {
          "Name": "__b",
          "Typ": "_Ios_Iostate"
        }
      ],
      "Ret": "_Ios_Iostate",
      "Body": " \u0026\u0026 (l.l_orderkey == o.o_o"
    },
    {
      "Name": "make_error_code",
      "Params": [
        {
          "Name": "__e",
          "Typ": "io_errc"
        }
      ],
      "Ret": "error_code",
      "Body": "tems.push_back(__row);\n            __groups.push_back(__g);\n     "
    },
    {
      "Name": "make_error_condition",
      "Params": [
        {
          "Name": "__e",
          "Typ": "io_errc"
        }
      ],
      "Ret": "error_condition",
      "Body": "Item{.c_custkey = g.key.c_custkey, .c_name = g.key.c_name, .revenue = "
    },
    {
      "Name": "__copy_streambufs_eof",
      "Params": [
        {
          "Name": "__sbin",
          "Typ": "basic_streambuf\u003c_CharT, _Traits\u003e"
        },
        {
          "Name": "__sbout",
          "Typ": "basic_streambuf\u003c_CharT, _Traits\u003e"
        },
        {
          "Name": "__ineof",
          "Typ": "bool"
        }
      ],
      "Ret": "streamsize",
      "Body": "ision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GKey\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c"
    },
    {
      "Name": "__copy_streambufs",
      "Params": [
        {
          "Name": "__sbin",
          "Typ": "basic_streambuf\u003c_CharT, _Traits\u003e"
        },
        {
          "Name": "__sbout",
          "Typ": "basic_streambuf\u003c_CharT, _Traits\u003e"
        }
      ],
      "Ret": "streamsize",
      "Body": "': \" \u003c\u003c v.c \u003c\u003c \", \" \u003c\u003c \"'o': \" \u003c\u003c v.o \u003c\u003c \", \" \u003c\u003c \"'l': \" \u003c\u003c v.l \u003c\u003c \", \" \u003c\u003c \"'n': \" \u003c\u003c v."
    },
    {
      "Name": "__write",
      "Params": [
        {
          "Name": "__s",
          "Typ": "ostreambuf_iterator\u003c_CharT\u003e"
        },
        {
          "Name": "__ws",
          "Typ": "_CharT"
        },
        {
          "Name": "__len",
          "Typ": "int"
        }
      ],
      "Ret": "ostreambuf_iterator\u003c_CharT\u003e",
      "Body": "m\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GGroup\u0026 v) {\n    "
    },
    {
      "Name": "__write",
      "Params": [
        {
          "Name": "__s",
          "Typ": "_OutIter"
        },
        {
          "Name": "__ws",
          "Typ": "_CharT"
        },
        {
          "Name": "__len",
          "Typ": "int"
        }
      ],
      "Ret": "_OutIter",
      "Body": " \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'revenue': \" \u003c\u003c std:"
    },
    {
      "Name": "__check_facet",
      "Params": [
        {
          "Name": "__f",
          "Typ": "_Facet"
        }
      ],
      "Ret": "_Facet",
      "Body": "ionItem n;\n    auto operator\u003c=\u003e(const GRow\u0026) const = default;\n"
    },
    {
      "Name": "__check_facet",
      "Params": [
        {
          "Name": "__f",
          "Typ": "std::ctype\u003cchar\u003e"
        }
      ],
      "Ret": "std::ctype\u003cchar\u003e",
      "Body": "ionItem n;\n    auto operator\u003c=\u003e(const GRow\u0026) const = default;\n"
    },
    {
      "Name": "__check_constructible",
      "Params": null,
      "Ret": "bool",
      "Body": "m\u0026 os, const OrdersItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fi"
    },
    {
      "Name": "__check_constructible",
      "Params": null,
      "Ret": "bool",
      "Body": "m\u0026 os, const OrdersItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fi"
    },
    {
      "Name": "__check_constructible",
      "Params": null,
      "Ret": "bool",
      "Body": "m\u0026 os, const OrdersItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fi"
    },
    {
      "Name": "__check_constructible",
      "Params": null,
      "Ret": "bool",
      "Body": "m\u0026 os, const OrdersItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fi"
    },
    {
      "Name": "__check_constructible",
      "Params": null,
      "Ret": "bool",
      "Body": "m\u0026 os, const OrdersItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fi"
    },
    {
      "Name": "__check_constructible",
      "Params": null,
      "Ret": "bool",
      "Body": "m\u0026 os, const OrdersItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fi"
    },
    {
      "Name": "__do_uninit_copy",
      "Params": [
        {
          "Name": "__first",
          "Typ": "_InputIterator"
        },
        {
          "Name": "__last",
          "Typ": "_InputIterator"
        },
        {
          "Name": "__result",
          "Typ": "_ForwardIterator"
        }
      ],
      "Ret": "_ForwardIterator",
      "Body": "';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'revenue': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.revenue \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c"
    },
    {
      "Name": "__do_uninit_copy",
      "Params": [
        {
          "Name": "__first",
          "Typ": "NationItem"
        },
        {
          "Name": "__last",
          "Typ": "NationItem"
        },
        {
          "Name": "__result",
          "Typ": "NationItem"
        }
      ],
      "Ret": "NationItem",
      "Body": "';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'revenue': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.revenue \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c"
    },
    {
      "Name": "__do_uninit_copy",
      "Params": [
        {
          "Name": "__first",
          "Typ": "CustomerItem"
        },
        {
          "Name": "__last",
          "Typ": "CustomerItem"
        },
        {
          "Name": "__result",
          "Typ": "CustomerItem"
        }
      ],
      "Ret": "CustomerItem",
      "Body": "';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'revenue': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.revenue \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c"
    },
    {
      "Name": "__do_uninit_copy",
      "Params": [
        {
          "Name": "__first",
          "Typ": "OrdersItem"
        },
        {
          "Name": "__last",
          "Typ": "OrdersItem"
        },
        {
          "Name": "__result",
          "Typ": "OrdersItem"
        }
      ],
      "Ret": "OrdersItem",
      "Body": "';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'revenue': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.revenue \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c"
    },
    {
      "Name": "__do_uninit_copy",
      "Params": [
        {
          "Name": "__first",
          "Typ": "LineitemItem"
        },
        {
          "Name": "__last",
          "Typ": "LineitemItem"
        },
        {
          "Name": "__result",
          "Typ": "LineitemItem"
        }
      ],
      "Ret": "LineitemItem",
      "Body": "';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'revenue': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.revenue \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c"
    },
    {
      "Name": "__do_uninit_copy",
      "Params": [
        {
          "Name": "__first",
          "Typ": "__gnu_cxx::__normal_iterator\u003cconst GRow *, std::vector\u003cGRow\u003e\u003e"
        },
        {
          "Name": "__last",
          "Typ": "__gnu_cxx::__normal_iterator\u003cconst GRow *, std::vector\u003cGRow\u003e\u003e"
        },
        {
          "Name": "__result",
          "Typ": "GRow"
        }
      ],
      "Ret": "GRow",
      "Body": "';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'revenue': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.revenue \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c"
    },
    {
      "Name": "uninitialized_copy",
      "Params": [
        {
          "Name": "__first",
          "Typ": "_InputIterator"
        },
        {
          "Name": "__last",
          "Typ": "_InputIterator"
        },
        {
          "Name": "__result",
          "Typ": "_ForwardIterator"
        }
      ],
      "Ret": "_ForwardIterator",
      "Body": "ng(\"1994-01-01\");\nstd::vector\u003cResultItem\u003e result = ([]{ std::vector\u003cResultItem\u003e __items;\nstd::vector\u003cGGroup\u003e __groups;\nfor (auto c : customer) {\nfor (auto o : orders) {\nfor (auto l : lineitem) {\nfor (auto n : nation) {\n    if(((((((o.o_orderdate \u003e= start_date) \u0026\u0026 (o.o_orderdate \u003c end_date)) \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o_custkey == c.c_custkey)) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationkey))) {\n        GRow __row{c, o, l, n};\n        auto __key = GKey{.c_custkey = c.c_custkey, .c_name = c.c_name, .c_acctbal = c.c_acctbal, .c_address = c.c_address, .c_phone = c.c_phone, .c_comment = c.c_comment, .n_name = n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.item"
    },
    {
      "Name": "uninitialized_copy",
      "Params": [
        {
          "Name": "__first",
          "Typ": "NationItem"
        },
        {
          "Name": "__last",
          "Typ": "NationItem"
        },
        {
          "Name": "__result",
          "Typ": "NationItem"
        }
      ],
      "Ret": "NationItem",
      "Body": "ng(\"1994-01-01\");\nstd::vector\u003cResultItem\u003e result = ([]{ std::vector\u003cResultItem\u003e __items;\nstd::vector\u003cGGroup\u003e __groups;\nfor (auto c : customer) {\nfor (auto o : orders) {\nfor (auto l : lineitem) {\nfor (auto n : nation) {\n    if(((((((o.o_orderdate \u003e= start_date) \u0026\u0026 (o.o_orderdate \u003c end_date)) \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o_custkey == c.c_custkey)) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationkey))) {\n        GRow __row{c, o, l, n};\n        auto __key = GKey{.c_custkey = c.c_custkey, .c_name = c.c_name, .c_acctbal = c.c_acctbal, .c_address = c.c_address, .c_phone = c.c_phone, .c_comment = c.c_comment, .n_name = n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.item"
    },
    {
      "Name": "uninitialized_copy",
      "Params": [
        {
          "Name": "__first",
          "Typ": "CustomerItem"
        },
        {
          "Name": "__last",
          "Typ": "CustomerItem"
        },
        {
          "Name": "__result",
          "Typ": "CustomerItem"
        }
      ],
      "Ret": "CustomerItem",
      "Body": "ng(\"1994-01-01\");\nstd::vector\u003cResultItem\u003e result = ([]{ std::vector\u003cResultItem\u003e __items;\nstd::vector\u003cGGroup\u003e __groups;\nfor (auto c : customer) {\nfor (auto o : orders) {\nfor (auto l : lineitem) {\nfor (auto n : nation) {\n    if(((((((o.o_orderdate \u003e= start_date) \u0026\u0026 (o.o_orderdate \u003c end_date)) \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o_custkey == c.c_custkey)) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationkey))) {\n        GRow __row{c, o, l, n};\n        auto __key = GKey{.c_custkey = c.c_custkey, .c_name = c.c_name, .c_acctbal = c.c_acctbal, .c_address = c.c_address, .c_phone = c.c_phone, .c_comment = c.c_comment, .n_name = n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.item"
    },
    {
      "Name": "uninitialized_copy",
      "Params": [
        {
          "Name": "__first",
          "Typ": "OrdersItem"
        },
        {
          "Name": "__last",
          "Typ": "OrdersItem"
        },
        {
          "Name": "__result",
          "Typ": "OrdersItem"
        }
      ],
      "Ret": "OrdersItem",
      "Body": "ng(\"1994-01-01\");\nstd::vector\u003cResultItem\u003e result = ([]{ std::vector\u003cResultItem\u003e __items;\nstd::vector\u003cGGroup\u003e __groups;\nfor (auto c : customer) {\nfor (auto o : orders) {\nfor (auto l : lineitem) {\nfor (auto n : nation) {\n    if(((((((o.o_orderdate \u003e= start_date) \u0026\u0026 (o.o_orderdate \u003c end_date)) \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o_custkey == c.c_custkey)) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationkey))) {\n        GRow __row{c, o, l, n};\n        auto __key = GKey{.c_custkey = c.c_custkey, .c_name = c.c_name, .c_acctbal = c.c_acctbal, .c_address = c.c_address, .c_phone = c.c_phone, .c_comment = c.c_comment, .n_name = n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.item"
    },
    {
      "Name": "uninitialized_copy",
      "Params": [
        {
          "Name": "__first",
          "Typ": "LineitemItem"
        },
        {
          "Name": "__last",
          "Typ": "LineitemItem"
        },
        {
          "Name": "__result",
          "Typ": "LineitemItem"
        }
      ],
      "Ret": "LineitemItem",
      "Body": "ng(\"1994-01-01\");\nstd::vector\u003cResultItem\u003e result = ([]{ std::vector\u003cResultItem\u003e __items;\nstd::vector\u003cGGroup\u003e __groups;\nfor (auto c : customer) {\nfor (auto o : orders) {\nfor (auto l : lineitem) {\nfor (auto n : nation) {\n    if(((((((o.o_orderdate \u003e= start_date) \u0026\u0026 (o.o_orderdate \u003c end_date)) \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o_custkey == c.c_custkey)) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationkey))) {\n        GRow __row{c, o, l, n};\n        auto __key = GKey{.c_custkey = c.c_custkey, .c_name = c.c_name, .c_acctbal = c.c_acctbal, .c_address = c.c_address, .c_phone = c.c_phone, .c_comment = c.c_comment, .n_name = n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.item"
    },
    {
      "Name": "uninitialized_copy",
      "Params": [
        {
          "Name": "__first",
          "Typ": "__gnu_cxx::__normal_iterator\u003cconst GRow *, std::vector\u003cGRow\u003e\u003e"
        },
        {
          "Name": "__last",
          "Typ": "__gnu_cxx::__normal_iterator\u003cconst GRow *, std::vector\u003cGRow\u003e\u003e"
        },
        {
          "Name": "__result",
          "Typ": "GRow"
        }
      ],
      "Ret": "GRow",
      "Body": "ng(\"1994-01-01\");\nstd::vector\u003cResultItem\u003e result = ([]{ std::vector\u003cResultItem\u003e __items;\nstd::vector\u003cGGroup\u003e __groups;\nfor (auto c : customer) {\nfor (auto o : orders) {\nfor (auto l : lineitem) {\nfor (auto n : nation) {\n    if(((((((o.o_orderdate \u003e= start_date) \u0026\u0026 (o.o_orderdate \u003c end_date)) \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o_custkey == c.c_custkey)) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationkey))) {\n        GRow __row{c, o, l, n};\n        auto __key = GKey{.c_custkey = c.c_custkey, .c_name = c.c_name, .c_acctbal = c.c_acctbal, .c_address = c.c_address, .c_phone = c.c_phone, .c_comment = c.c_comment, .n_name = n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.item"
    },
    {
      "Name": "__do_uninit_fill",
      "Params": [
        {
          "Name": "__first",
          "Typ": "_ForwardIterator"
        },
        {
          "Name": "__last",
          "Typ": "_ForwardIterator"
        },
        {
          "Name": "__x",
          "Typ": "_Tp"
        }
      ],
      "Ret": "",
      "Body": "}\n}\nfor(auto \u0026__g : __groups) {\n    GGroup g = __g;\n    __items.push_back(ResultItem{.c_custkey = g.key.c_custkey, .c_name = g.key.c_name, .revenue = ([\u0026]{ auto __tmp = ([\u0026]{ std::vector\u003cdouble\u003e __items;\nfor (auto x : g) {\n        __items.p"
    },
    {
      "Name": "swap",
      "Params": [
        {
          "Name": "__x",
          "Typ": "_Bit_reference"
        },
        {
          "Name": "__y",
          "Typ": "_Bit_reference"
        }
      ],
      "Ret": "",
      "Body": "tprecision(1) \u003c\u003c v.revenue \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixe"
    },
    {
      "Name": "swap",
      "Params": [
        {
          "Name": "__x",
          "Typ": "_Bit_reference"
        },
        {
          "Name": "__y",
          "Typ": "bool"
        }
      ],
      "Ret": "",
      "Body": "'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c"
    },
    {
      "Name": "swap",
      "Params": [
        {
          "Name": "__x",
          "Typ": "bool"
        },
        {
          "Name": "__y",
          "Typ": "_Bit_reference"
        }
      ],
      "Ret": "",
      "Body": "::vector\u003cNationItem\u003e nation = std::vector{NationItem{.n_nationkey "
    },
    {
      "Name": "operator==",
      "Params": [
        {
          "Name": "__x",
          "Typ": "_Bit_iterator_base"
        },
        {
          "Name": "__y",
          "Typ": "_Bit_iterator_base"
        }
      ],
      "Ret": "bool",
      "Body": ".n_name = n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.items.push_back(_"
    },
    {
      "Name": "operator\u003c=\u003e",
      "Params": [
        {
          "Name": "__x",
          "Typ": "_Bit_iterator_base"
        },
        {
          "Name": "__y",
          "Typ": "_Bit_iterator_base"
        }
      ],
      "Ret": "strong_ordering",
      "Body": "   }\n}\n}\n}\n}\nfor(auto \u0026__g : __groups) {\n    GGroup g = __g;\n    __items.push_back(ResultItem{.c_custkey = g.key.c_custkey, .c_name = g.key.c_name, .revenue = ([\u0026]{ auto __tmp = ([\u0026]{ std::vector\u003cdou"
    },
    {
      "Name": "erase_if",
      "Params": [
        {
          "Name": "__cont",
          "Typ": "vector\u003c_Tp, _Alloc\u003e"
        },
        {
          "Name": "__pred",
          "Typ": "_Predicate"
        }
      ],
      "Ret": "typename vector\u003c_Tp, _Alloc\u003e::size_type",
      "Body": ", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GRow\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c': \" \u003c\u003c v.c \u003c\u003c \", \" \u003c\u003c \"'o': \" \u003c\u003c v.o \u003c\u003c \", \" \u003c\u003c \"'l': \" \u003c\u003c v.l \u003c\u003c \", \" \u003c\u003c \"'n': \" "
    },
    {
      "Name": "erase",
      "Params": [
        {
          "Name": "__cont",
          "Typ": "vector\u003c_Tp, _Alloc\u003e"
        },
        {
          "Name": "__value",
          "Typ": "_Up"
        }
      ],
      "Ret": "typename vector\u003c_Tp, _Alloc\u003e::size_type",
      "Body": "tream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'revenue': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.revenue \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \","
    },
    {
      "Name": "__erase_nodes_if",
      "Params": [
        {
          "Name": "__cont",
          "Typ": "_Container"
        },
        {
          "Name": "__ucont",
          "Typ": "_UnsafeContainer"
        },
        {
          "Name": "__pred",
          "Typ": "_Predicate"
        }
      ],
      "Ret": "typename _Container::size_type",
      "Body": "\n    std::vector\u003cGRow\u003e items;\n    auto operator\u003c=\u003e(const GGroup\u0026) const = default;\n    auto begin() { return items.begin(); }\n    auto end() { return items.end(); }\n    size_t size() const { return items.size(); }\n};\n\nstruct ResultItem {\n    int c_custkey;\n    std::string c_na"
    },
    {
      "Name": "erase_if",
      "Params": [
        {
          "Name": "__cont",
          "Typ": "map\u003c_Key,_Tp, _Compare, _Alloc\u003e"
        },
        {
          "Name": "__pred",
          "Typ": "_Predicate"
        }
      ],
      "Ret": "typename map\u003c_Key, _Tp, _Compare, _Alloc\u003e::size_type",
      "Body": "r\u003c\u003c(std::ostream\u0026 os, const GKey\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_"
    },
    {
      "Name": "erase_if",
      "Params": [
        {
          "Name": "__cont",
          "Typ": "multimap\u003c_Key, _Tp, _Compare, _Alloc\u003e"
        },
        {
          "Name": "__pred",
          "Typ": "_Predicate"
        }
      ],
      "Ret": "typename multimap\u003c_Key, _Tp, _Compare, _Alloc\u003e::size_type",
      "Body": "\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GRow\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c': \" \u003c\u003c v.c \u003c\u003c \", \" \u003c\u003c \"'o': \" \u003c\u003c v.o \u003c\u003c \", \" "
    },
    {
      "Name": "iota",
      "Params": [
        {
          "Name": "__first",
          "Typ": "_ForwardIterator"
        },
        {
          "Name": "__last",
          "Typ": "_ForwardIterator"
        },
        {
          "Name": "__value",
          "Typ": "_Tp"
        }
      ],
      "Ret": "",
      "Body": "lag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GKey\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \","
    },
    {
      "Name": "accumulate",
      "Params": [
        {
          "Name": "__first",
          "Typ": "_InputIterator"
        },
        {
          "Name": "__last",
          "Typ": "_InputIterator"
        },
        {
          "Name": "__init",
          "Typ": "_Tp"
        }
      ],
      "Ret": "_Tp",
      "Body": "e \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';"
    },
    {
      "Name": "accumulate",
      "Params": [
        {
          "Name": "__first",
          "Typ": "__gnu_cxx::__normal_iterator\u003cdouble *, std::vector\u003cdouble\u003e\u003e"
        },
        {
          "Name": "__last",
          "Typ": "__gnu_cxx::__normal_iterator\u003cdouble *, std::vector\u003cdouble\u003e\u003e"
        },
        {
          "Name": "__init",
          "Typ": "float"
        }
      ],
      "Ret": "float",
      "Body": "e \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';"
    },
    {
      "Name": "accumulate",
      "Params": [
        {
          "Name": "__first",
          "Typ": "_InputIterator"
        },
        {
          "Name": "__last",
          "Typ": "_InputIterator"
        },
        {
          "Name": "__init",
          "Typ": "_Tp"
        },
        {
          "Name": "__binary_op",
          "Typ": "_BinaryOperation"
        }
      ],
      "Ret": "_Tp",
      "Body": ", .l_extendedprice = 1000.0, .l_discount = 0.1}, LineitemItem{.l_orderkey = 2000, .l_returnflag = std::string(\"N\"), .l_extendedprice = 500.0, .l_discount = 0.0}};\nauto start_date = std::string(\"1993-10-01\");\nauto end_date = std::string(\"1994-01-01\");\nstd::vector\u003cResultItem\u003e result = ([]{ st"
    },
    {
      "Name": "inner_product",
      "Params": [
        {
          "Name": "__first1",
          "Typ": "_InputIterator1"
        },
        {
          "Name": "__last1",
          "Typ": "_InputIterator1"
        },
        {
          "Name": "__first2",
          "Typ": "_InputIterator2"
        },
        {
          "Name": "__init",
          "Typ": "_Tp"
        }
      ],
      "Ret": "_Tp",
      "Body": "}\n        if(!__found) {\n            GGroup __g{__key, {}};\n            __g.items.push_back(__row);\n            __groups.push_back(__g);\n        }\n    }\n}\n}\n}\n}\nfor(auto \u0026__g : __groups) {\n    GGroup g = __g;\n    __items.push_back(ResultItem{.c_custkey = g.key.c_custkey, .c_name = g.key.c_name, .revenue = ([\u0026]{ auto __tmp = ([\u0026]{ std::vector\u003cdouble\u003e __items;\nfor (auto x : g) {\n        __it"
    },
    {
      "Name": "__abs_r",
      "Params": [
        {
          "Name": "__val",
          "Typ": "_Tp"
        }
      ],
      "Ret": "_Res",
      "Body": " \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GKey\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'"
    },
    {
      "Name": "__gcd",
      "Params": [
        {
          "Name": "__m",
          "Typ": "_Tp"
        },
        {
          "Name": "__n",
          "Typ": "_Tp"
        }
      ],
      "Ret": "_Tp",
      "Body": "\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GRow\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c': \" \u003c\u003c v.c \u003c\u003c \", \" \u003c\u003c \"'o': \" \u003c\u003c v.o \u003c\u003c \", \" \u003c\u003c \"'l': \" \u003c\u003c v.l \u003c\u003c \", \" \u003c\u003c \"'n': \" \u003c\u003c v.n \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GGroup\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'key': \" \u003c\u003c v.key \u003c\u003c \", \" \u003c\u003c \"'items': \" \u003c\u003c v.items \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'"
    },
    {
      "Name": "gcd",
      "Params": [
        {
          "Name": "__m",
          "Typ": "_Mn"
        },
        {
          "Name": "__n",
          "Typ": "_Nn"
        }
      ],
      "Ret": "common_type_t\u003c_Mn, _Nn\u003e",
      "Body": "\u003c '}';\n    return os;\n}\n\nstd::vector\u003cNationItem\u003e nation = std::vector{NationItem{.n_nationkey = 1, .n_name = std::string(\"BRAZIL\")}};\nstd::vector\u003cCustomerItem\u003e customer = std::vector{CustomerItem{.c_custkey = 1, .c_name = std::string(\"Alice\"), .c_acctbal = 100.0, .c_nationkey = 1, .c_address = std::string(\"123 St\"), .c_phone = std::string(\"123-456\"), .c_comment = std::string(\"Loyal\")}};\nstd::vector\u003cOrdersItem\u003e order"
    },
    {
      "Name": "lcm",
      "Params": [
        {
          "Name": "__m",
          "Typ": "_Mn"
        },
        {
          "Name": "__n",
          "Typ": "_Nn"
        }
      ],
      "Ret": "common_type_t\u003c_Mn, _Nn\u003e",
      "Body": " = 1, .o_orderdate = std::string(\"1994-01-02\")}};\nstd::vector\u003cLineitemItem\u003e lineitem = std::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0.1}, LineitemItem{.l_orderkey = 2000, .l_returnflag = std::string(\"N\"), .l_extendedprice = 500.0, .l_discount = 0.0}};\nauto start_date = std::string(\"1993-10-01\");\nauto end_date = std::string(\"1994-01-01\");\nstd::vector\u003cResultItem\u003e result = ([]{ std::vector\u003cResultItem\u003e __items;\nstd::vector\u003cGGroup\u003e __groups;\nfor (auto c : customer) {\nfor (auto o : orders) {\nfor (auto l : lineitem) {\nfor (auto n : nation) {\n    if(((((((o.o_orderdate \u003e= start_date) \u0026\u0026 (o.o_orderdate \u003c end_date)) \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o"
    },
    {
      "Name": "midpoint",
      "Params": [
        {
          "Name": "__a",
          "Typ": "_Tp"
        },
        {
          "Name": "__b",
          "Typ": "_Tp"
        }
      ],
      "Ret": "enable_if_t\u003c__and_v\u003cis_arithmetic\u003c_Tp\u003e, is_same\u003cremove_cv_t\u003c_Tp\u003e, _Tp\u003e, __not_\u003cis_same\u003c_Tp, bool\u003e\u003e\u003e, _Tp\u003e",
      "Body": "n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.items.push_back(__row); __found = true; break; }\n        }\n        if(!__found) {\n            GGroup __g{__key, {}};\n            __g.items.push_back(__row);\n            __groups.push_back(__g);\n        }\n    }\n}\n}\n}\n}\nfor(auto \u0026__g : __groups) {\n    GGroup g = __g;\n    __items.push_back(ResultItem{.c_custkey = g.key.c_custkey, .c_name = g.key.c_name, .revenue = ([\u0026]{ auto __tmp = ([\u0026]{ std::vector\u003cdouble\u003e __items;\nfor (auto x : g) {\n        __items.push_back((x.l.l_extendedprice * (1 - x.l.l_discount)));\n}\nreturn __items; }()); return std::accumulate(__tmp.begin(), __tmp.end(), 0.0); }()), .c_acctbal = g.key.c_acctbal, .n_name = g.key.n_name, .c_address = g.key.c_address, .c_phone = g.key.c_phone, .c"
    },
    {
      "Name": "__do_str_codecvt",
      "Params": [
        {
          "Name": "__first",
          "Typ": "_InChar"
        },
        {
          "Name": "__last",
          "Typ": "_InChar"
        },
        {
          "Name": "__outstr",
          "Typ": "_OutStr"
        },
        {
          "Name": "__cvt",
          "Typ": "_Codecvt"
        },
        {
          "Name": "__state",
          "Typ": "_State"
        },
        {
          "Name": "__count",
          "Typ": "int"
        },
        {
          "Name": "__fn",
          "Typ": "_Fn"
        }
      ],
      "Ret": "bool",
      "Body": "turn items.end(); }\n    size_t size() const { return items.size(); }\n};\n\nstruct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const OrdersItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const LineitemItem\u0026 "
    },
    {
      "Name": "__str_codecvt_in",
      "Params": [
        {
          "Name": "__first",
          "Typ": "string"
        },
        {
          "Name": "__last",
          "Typ": "string"
        },
        {
          "Name": "__outstr",
          "Typ": "basic_string\u003c_CharT, _Traits, _Alloc\u003e"
        },
        {
          "Name": "__cvt",
          "Typ": "codecvt\u003c_CharT, char, _State\u003e"
        },
        {
          "Name": "__state",
          "Typ": "_State"
        },
        {
          "Name": "__count",
          "Typ": "int"
        }
      ],
      "Ret": "bool",
      "Body": " GKey\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_n"
    },
    {
      "Name": "__str_codecvt_in",
      "Params": [
        {
          "Name": "__first",
          "Typ": "string"
        },
        {
          "Name": "__last",
          "Typ": "string"
        },
        {
          "Name": "__outstr",
          "Typ": "basic_string\u003c_CharT, _Traits, _Alloc\u003e"
        },
        {
          "Name": "__cvt",
          "Typ": "codecvt\u003c_CharT, char, _State\u003e"
        }
      ],
      "Ret": "bool",
      "Body": "': \" \u003c\u003c v.key \u003c\u003c \", \" \u003c\u003c \"'items': \" \u003c\u003c v.items \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultI"
    },
    {
      "Name": "__str_codecvt_in_all",
      "Params": [
        {
          "Name": "__first",
          "Typ": "string"
        },
        {
          "Name": "__last",
          "Typ": "string"
        },
        {
          "Name": "__outstr",
          "Typ": "basic_string\u003c_CharT, _Traits, _Alloc\u003e"
        },
        {
          "Name": "__cvt",
          "Typ": "codecvt\u003c_CharT, char, _State\u003e"
        }
      ],
      "Ret": "bool",
      "Body": " '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::vector\u003cNationIt"
    },
    {
      "Name": "__str_codecvt_out",
      "Params": [
        {
          "Name": "__first",
          "Typ": "_CharT"
        },
        {
          "Name": "__last",
          "Typ": "_CharT"
        },
        {
          "Name": "__outstr",
          "Typ": "basic_string\u003cchar, _Traits, _Alloc\u003e"
        },
        {
          "Name": "__cvt",
          "Typ": "codecvt\u003c_CharT, char, _State\u003e"
        },
        {
          "Name": "__state",
          "Typ": "_State"
        },
        {
          "Name": "__count",
          "Typ": "int"
        }
      ],
      "Ret": "bool",
      "Body": "em\u003e orders = std::vector{OrdersItem{.o_orderkey = 1000, .o_custkey = 1, .o_orderdate = std::string(\"1993-10-15\")}, OrdersItem{.o_orderkey = 2000, .o_custkey = 1, .o_orderdate = std::string(\"1994-01-02\")}};\nstd::vector\u003cLineitemItem\u003e lineitem = std::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0"
    },
    {
      "Name": "__str_codecvt_out",
      "Params": [
        {
          "Name": "__first",
          "Typ": "_CharT"
        },
        {
          "Name": "__last",
          "Typ": "_CharT"
        },
        {
          "Name": "__outstr",
          "Typ": "basic_string\u003cchar, _Traits, _Alloc\u003e"
        },
        {
          "Name": "__cvt",
          "Typ": "codecvt\u003c_CharT, char, _State\u003e"
        }
      ],
      "Ret": "bool",
      "Body": "customer) {\nfor (auto o : orders) {\nfor (auto l : lineitem) {\nfor (auto n : nation) {\n    if(((((((o.o_orderdate \u003e= start_date) \u0026\u0026 "
    },
    {
      "Name": "__str_codecvt_out_all",
      "Params": [
        {
          "Name": "__first",
          "Typ": "_CharT"
        },
        {
          "Name": "__last",
          "Typ": "_CharT"
        },
        {
          "Name": "__outstr",
          "Typ": "basic_string\u003cchar, _Traits, _Alloc\u003e"
        },
        {
          "Name": "__cvt",
          "Typ": "codecvt\u003c_CharT, char, _State\u003e"
        }
      ],
      "Ret": "bool",
      "Body": " .c_phone = c.c_phone, .c_comment = c.c_comment, .n_name = n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) "
    },
    {
      "Name": "__str_codecvt_out",
      "Params": [
        {
          "Name": "__first",
          "Typ": "_CharT"
        },
        {
          "Name": "__last",
          "Typ": "_CharT"
        },
        {
          "Name": "__outstr",
          "Typ": "basic_string\u003cchar8_t, _Traits, _Alloc\u003e"
        },
        {
          "Name": "__cvt",
          "Typ": "codecvt\u003c_CharT, char8_t, _State\u003e"
        },
        {
          "Name": "__state",
          "Typ": "_State"
        },
        {
          "Name": "__count",
          "Typ": "int"
        }
      ],
      "Ret": "bool",
      "Body": "vector\u003cdouble\u003e __items;\nfor (auto x : g) {\n        __items.push_back((x.l.l_extendedprice * (1 - x.l.l_discount)));\n}\nreturn __items; }()); return std::accumulate(__tmp.begin(), __tmp.end(), 0.0); }()), .c_acctbal = g.key.c_acctbal, .n_name = g.key.n_name, .c_address = g.key.c_address, .c_phone = g.key.c_phone, .c_comment = g.key.c_comment});\n}\nreturn __items; }());\n\nint main("
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "__os",
          "Typ": "std::basic_ostream\u003c_CharT, _Traits\u003e"
        },
        {
          "Name": "__str",
          "Typ": "_Quoted_string\u003cconst _CharT *, _CharT\u003e"
        }
      ],
      "Ret": "std::basic_ostream\u003c_CharT, _Traits\u003e",
      "Body": "   return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const OrdersItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnfl"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "__os",
          "Typ": "std::basic_ostream\u003c_CharT, _Traits\u003e"
        },
        {
          "Name": "__str",
          "Typ": "_Quoted_string\u003c_String, _CharT\u003e"
        }
      ],
      "Ret": "std::basic_ostream\u003c_CharT, _Traits\u003e",
      "Body": " \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GRow\u0026 v"
    },
    {
      "Name": "operator\u003e\u003e",
      "Params": [
        {
          "Name": "__is",
          "Typ": "std::basic_istream\u003c_CharT, _Traits\u003e"
        },
        {
          "Name": "__str",
          "Typ": "_Quoted_string\u003cbasic_string\u003c_CharT, _Traits, _Alloc\u003e \u0026, _CharT\u003e"
        }
      ],
      "Ret": "std::basic_istream\u003c_CharT, _Traits\u003e",
      "Body": "_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'revenue': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.revenue \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::vector\u003cNationItem\u003e nation = std::vector{NationItem{.n_nationkey = 1, .n_name = std::string(\"BRAZIL\")}};\nstd::vector\u003cCustomerItem\u003e customer = std::vector{CustomerItem{.c_custkey = 1"
    },
    {
      "Name": "resetiosflags",
      "Params": [
        {
          "Name": "__mask",
          "Typ": "ios_base::fmtflags"
        }
      ],
      "Ret": "_Resetiosflags",
      "Body": "ame;\n    double reven"
    },
    {
      "Name": "operator\u003e\u003e",
      "Params": [
        {
          "Name": "__is",
          "Typ": "basic_istream\u003c_CharT, _Traits\u003e"
        },
        {
          "Name": "__f",
          "Typ": "_Resetiosflags"
        }
      ],
      "Ret": "basic_istream\u003c_CharT, _Traits\u003e",
      "Body": "const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationIt"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "__os",
          "Typ": "basic_ostream\u003c_CharT, _Traits\u003e"
        },
        {
          "Name": "__f",
          "Typ": "_Resetiosflags"
        }
      ],
      "Ret": "basic_ostream\u003c_CharT, _Traits\u003e",
      "Body": " os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey "
    },
    {
      "Name": "setiosflags",
      "Params": [
        {
          "Name": "__mask",
          "Typ": "ios_base::fmtflags"
        }
      ],
      "Ret": "_Setiosflags",
      "Body": "'\" \u003c\u003c '}';\n    return"
    },
    {
      "Name": "operator\u003e\u003e",
      "Params": [
        {
          "Name": "__is",
          "Typ": "basic_istream\u003c_CharT, _Traits\u003e"
        },
        {
          "Name": "__f",
          "Typ": "_Setiosflags"
        }
      ],
      "Ret": "basic_istream\u003c_CharT, _Traits\u003e",
      "Body": "\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "__os",
          "Typ": "basic_ostream\u003c_CharT, _Traits\u003e"
        },
        {
          "Name": "__f",
          "Typ": "_Setiosflags"
        }
      ],
      "Ret": "basic_ostream\u003c_CharT, _Traits\u003e",
      "Body": "': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedp"
    },
    {
      "Name": "setbase",
      "Params": [
        {
          "Name": "__base",
          "Typ": "int"
        }
      ],
      "Ret": "_Setbase",
      "Body": ") \u003c\u003c v.c_acctbal \u003c\u003c \""
    },
    {
      "Name": "operator\u003e\u003e",
      "Params": [
        {
          "Name": "__is",
          "Typ": "basic_istream\u003c_CharT, _Traits\u003e"
        },
        {
          "Name": "__f",
          "Typ": "_Setbase"
        }
      ],
      "Ret": "basic_istream\u003c_CharT, _Traits\u003e",
      "Body": " '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GRow\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c': \" \u003c\u003c v.c \u003c\u003c \", \" \u003c\u003c \"'o': \" \u003c\u003c v.o \u003c\u003c \", \" \u003c\u003c \"'l': \" \u003c\u003c v.l \u003c\u003c \", \""
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "__os",
          "Typ": "basic_ostream\u003c_CharT, _Traits\u003e"
        },
        {
          "Name": "__f",
          "Typ": "_Setbase"
        }
      ],
      "Ret": "basic_ostream\u003c_CharT, _Traits\u003e",
      "Body": " \" \u003c\u003c v.items \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c"
    },
    {
      "Name": "setfill",
      "Params": [
        {
          "Name": "__c",
          "Typ": "_CharT"
        }
      ],
      "Ret": "_Setfill\u003c_CharT\u003e",
      "Body": " \u003c\u003c '}';\n    retur"
    },
    {
      "Name": "operator\u003e\u003e",
      "Params": [
        {
          "Name": "__is",
          "Typ": "basic_istream\u003c_CharT, _Traits\u003e"
        },
        {
          "Name": "__f",
          "Typ": "_Setfill\u003c_CharT\u003e"
        }
      ],
      "Ret": "basic_istream\u003c_CharT, _Traits\u003e",
      "Body": "omerItem{.c_custkey = 1, .c_name = std::string(\"Alic"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "__os",
          "Typ": "basic_ostream\u003c_CharT, _Traits\u003e"
        },
        {
          "Name": "__f",
          "Typ": "_Setfill\u003c_CharT\u003e"
        }
      ],
      "Ret": "basic_ostream\u003c_CharT, _Traits\u003e",
      "Body": "em\u003e orders = std::vector{OrdersItem{.o_orderkey = 10"
    },
    {
      "Name": "setprecision",
      "Params": [
        {
          "Name": "__n",
          "Typ": "int"
        }
      ],
      "Ret": "_Setprecision",
      "Body": "e = 1000.0, .l_dis"
    },
    {
      "Name": "operator\u003e\u003e",
      "Params": [
        {
          "Name": "__is",
          "Typ": "basic_istream\u003c_CharT, _Traits\u003e"
        },
        {
          "Name": "__f",
          "Typ": "_Setprecision"
        }
      ],
      "Ret": "basic_istream\u003c_CharT, _Traits\u003e",
      "Body": "1\");\nauto end_date = std::string(\"1994-01-01\");\nstd::vect"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "__os",
          "Typ": "basic_ostream\u003c_CharT, _Traits\u003e"
        },
        {
          "Name": "__f",
          "Typ": "_Setprecision"
        }
      ],
      "Ret": "basic_ostream\u003c_CharT, _Traits\u003e",
      "Body": "for (auto n : nation) {\n    if(((((((o.o_orderdate \u003e= sta"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "__os",
          "Typ": "basic_ostream\u003cchar, char_traits\u003cchar\u003e\u003e"
        },
        {
          "Name": "__f",
          "Typ": "_Setprecision"
        }
      ],
      "Ret": "basic_ostream\u003cchar, char_traits\u003cchar\u003e\u003e",
      "Body": "for (auto n : nation) {\n    if(((((((o.o_orderdate \u003e= sta"
    },
    {
      "Name": "setw",
      "Params": [
        {
          "Name": "__n",
          "Typ": "int"
        }
      ],
      "Ret": "_Setw",
      "Body": "_custkey = c.c_cus"
    },
    {
      "Name": "operator\u003e\u003e",
      "Params": [
        {
          "Name": "__is",
          "Typ": "basic_istream\u003c_CharT, _Traits\u003e"
        },
        {
          "Name": "__f",
          "Typ": "_Setw"
        }
      ],
      "Ret": "basic_istream\u003c_CharT, _Traits\u003e",
      "Body": "__found = false;\n        for(auto \u0026__g : __groups) {\n"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "__os",
          "Typ": "basic_ostream\u003c_CharT, _Traits\u003e"
        },
        {
          "Name": "__f",
          "Typ": "_Setw"
        }
      ],
      "Ret": "basic_ostream\u003c_CharT, _Traits\u003e",
      "Body": "        __g.items.push_back(__row);\n            __gro"
    },
    {
      "Name": "get_money",
      "Params": [
        {
          "Name": "__mon",
          "Typ": "_MoneyT"
        },
        {
          "Name": "__intl",
          "Typ": "bool"
        }
      ],
      "Ret": "_Get_money\u003c_MoneyT\u003e",
      "Body": "ent});\n}\nreturn __items; }()"
    },
    {
      "Name": "__throw_bad_optional_access",
      "Params": null,
      "Ret": "",
      "Body": "ream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "os",
          "Typ": "std::ostream"
        },
        {
          "Name": "v",
          "Typ": "std::optional\u003cT\u003e"
        }
      ],
      "Ret": "std::ostream",
      "Body": "{\n    if(v) os \u003c\u003c *v; else os \u003c\u003c \"None\";\n    return os;\n"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "os",
          "Typ": "std::ostream"
        },
        {
          "Name": "v",
          "Typ": "list\u003cT\u003e"
        }
      ],
      "Ret": "std::ostream",
      "Body": "{\n    os \u003c\u003c '[';\n    bool first = true;\n    for(const auto\u0026 x : v) { if(!first) os \u003c\u003c \", \"; first = false; os \u003c\u003c x; }\n    os \u003c\u003c ']';\n    return os;\n"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "os",
          "Typ": "std::ostream"
        },
        {
          "Name": "v",
          "Typ": "list\u003cGRow\u003e"
        }
      ],
      "Ret": "std::ostream",
      "Body": "{\n    os \u003c\u003c '[';\n    bool first = true;\n    for(const auto\u0026 x : v) { if(!first) os \u003c\u003c \", \"; first = false; os \u003c\u003c x; }\n    os \u003c\u003c ']';\n    return os;\n"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "os",
          "Typ": "std::ostream"
        },
        {
          "Name": "v",
          "Typ": "list\u003cResultItem\u003e"
        }
      ],
      "Ret": "std::ostream",
      "Body": "{\n    os \u003c\u003c '[';\n    bool first = true;\n    for(const auto\u0026 x : v) { if(!first) os \u003c\u003c \", \"; first = false; os \u003c\u003c x; }\n    os \u003c\u003c ']';\n    return os;\n"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "os",
          "Typ": "std::ostream"
        },
        {
          "Name": "v",
          "Typ": "NationItem"
        }
      ],
      "Ret": "std::ostream",
      "Body": "{\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "os",
          "Typ": "std::ostream"
        },
        {
          "Name": "v",
          "Typ": "CustomerItem"
        }
      ],
      "Ret": "std::ostream",
      "Body": "{\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "os",
          "Typ": "std::ostream"
        },
        {
          "Name": "v",
          "Typ": "OrdersItem"
        }
      ],
      "Ret": "std::ostream",
      "Body": "{\n    os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "os",
          "Typ": "std::ostream"
        },
        {
          "Name": "v",
          "Typ": "LineitemItem"
        }
      ],
      "Ret": "std::ostream",
      "Body": "{\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    return os;\n"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "os",
          "Typ": "std::ostream"
        },
        {
          "Name": "v",
          "Typ": "GKey"
        }
      ],
      "Ret": "std::ostream",
      "Body": "{\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "os",
          "Typ": "std::ostream"
        },
        {
          "Name": "v",
          "Typ": "GRow"
        }
      ],
      "Ret": "std::ostream",
      "Body": "{\n    os \u003c\u003c '{' \u003c\u003c \"'c': \" \u003c\u003c v.c \u003c\u003c \", \" \u003c\u003c \"'o': \" \u003c\u003c v.o \u003c\u003c \", \" \u003c\u003c \"'l': \" \u003c\u003c v.l \u003c\u003c \", \" \u003c\u003c \"'n': \" \u003c\u003c v.n \u003c\u003c '}';\n    return os;\n"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "os",
          "Typ": "std::ostream"
        },
        {
          "Name": "v",
          "Typ": "GGroup"
        }
      ],
      "Ret": "std::ostream",
      "Body": "{\n    os \u003c\u003c '{' \u003c\u003c \"'key': \" \u003c\u003c v.key \u003c\u003c \", \" \u003c\u003c \"'items': \" \u003c\u003c v.items \u003c\u003c '}';\n    return os;\n"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "os",
          "Typ": "std::ostream"
        },
        {
          "Name": "v",
          "Typ": "ResultItem"
        }
      ],
      "Ret": "std::ostream",
      "Body": "{\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'revenue': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.revenue \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n"
    },
    {
      "Name": "main",
      "Params": null,
      "Ret": "int",
      "Body": "{\n    std::cout \u003c\u003c result \u003c\u003c std::endl;\n    return 0;\n"
    }
  ],
  "enums": [
    {
      "Name": "_Ord",
      "Variants": [
        "equivalent",
        "less",
        "greater"
      ]
    },
    {
      "Name": "_Ncmp",
      "Variants": [
        "_Unordered"
      ]
    },
    {
      "Name": "errc",
      "Variants": [
        "address_family_not_supported",
        "address_in_use",
        "address_not_available",
        "already_connected",
        "argument_list_too_long",
        "argument_out_of_domain",
        "bad_address",
        "bad_file_descriptor",
        "bad_message",
        "broken_pipe",
        "connection_aborted",
        "connection_already_in_progress",
        "connection_refused",
        "connection_reset",
        "cross_device_link",
        "destination_address_required",
        "device_or_resource_busy",
        "directory_not_empty",
        "executable_format_error",
        "file_exists",
        "file_too_large",
        "filename_too_long",
        "function_not_supported",
        "host_unreachable",
        "identifier_removed",
        "illegal_byte_sequence",
        "inappropriate_io_control_operation",
        "interrupted",
        "invalid_argument",
        "invalid_seek",
        "io_error",
        "is_a_directory",
        "message_size",
        "network_down",
        "network_reset",
        "network_unreachable",
        "no_buffer_space",
        "no_child_process",
        "no_link",
        "no_lock_available",
        "no_message_available",
        "no_message",
        "no_protocol_option",
        "no_space_on_device",
        "no_stream_resources",
        "no_such_device_or_address",
        "no_such_device",
        "no_such_file_or_directory",
        "no_such_process",
        "not_a_directory",
        "not_a_socket",
        "not_a_stream",
        "not_connected",
        "not_enough_memory",
        "not_supported",
        "operation_canceled",
        "operation_in_progress",
        "operation_not_permitted",
        "operation_not_supported",
        "operation_would_block",
        "owner_dead",
        "permission_denied",
        "protocol_error",
        "protocol_not_supported",
        "read_only_file_system",
        "resource_deadlock_would_occur",
        "resource_unavailable_try_again",
        "result_out_of_range",
        "state_not_recoverable",
        "stream_timeout",
        "text_file_busy",
        "timed_out",
        "too_many_files_open_in_system",
        "too_many_files_open",
        "too_many_links",
        "too_many_symbolic_link_levels",
        "value_too_large",
        "wrong_protocol_type"
      ]
    },
    {
      "Name": "_Ios_Fmtflags",
      "Variants": [
        "_S_boolalpha",
        "_S_dec",
        "_S_fixed",
        "_S_hex",
        "_S_internal",
        "_S_left",
        "_S_oct",
        "_S_right",
        "_S_scientific",
        "_S_showbase",
        "_S_showpoint",
        "_S_showpos",
        "_S_skipws",
        "_S_unitbuf",
        "_S_uppercase",
        "_S_adjustfield",
        "_S_basefield",
        "_S_floatfield",
        "_S_ios_fmtflags_end",
        "_S_ios_fmtflags_max",
        "_S_ios_fmtflags_min"
      ]
    },
    {
      "Name": "_Ios_Openmode",
      "Variants": [
        "_S_app",
        "_S_ate",
        "_S_bin",
        "_S_in",
        "_S_out",
        "_S_trunc",
        "_S_noreplace",
        "_S_ios_openmode_end",
        "_S_ios_openmode_max",
        "_S_ios_openmode_min"
      ]
    },
    {
      "Name": "_Ios_Iostate",
      "Variants": [
        "_S_goodbit",
        "_S_badbit",
        "_S_eofbit",
        "_S_failbit",
        "_S_ios_iostate_end",
        "_S_ios_iostate_max",
        "_S_ios_iostate_min"
      ]
    },
    {
      "Name": "_Ios_Seekdir",
      "Variants": [
        "_S_beg",
        "_S_cur",
        "_S_end",
        "_S_ios_seekdir_end"
      ]
    },
    {
      "Name": "io_errc",
      "Variants": [
        "stream"
      ]
    },
    {
      "Name": "_Rb_tree_color",
      "Variants": [
        "_S_red",
        "_S_black"
      ]
    },
    {
      "Name": "float_round_style",
      "Variants": [
        "round_indeterminate",
        "round_toward_zero",
        "round_to_nearest",
        "round_toward_infinity",
        "round_toward_neg_infinity"
      ]
    },
    {
      "Name": "float_denorm_style",
      "Variants": [
        "denorm_indeterminate",
        "denorm_absent",
        "denorm_present"
      ]
    },
    {
      "Name": "dateorder",
      "Variants": [
        "no_order",
        "dmy",
        "mdy",
        "ymd",
        "ydm"
      ]
    },
    {
      "Name": "result",
      "Variants": [
        "ok",
        "partial",
        "error",
        "noconv"
      ]
    },
    {
      "Name": "_Construct",
      "Variants": [
        "_Token"
      ]
    }
  ],
  "structs": [
    {
      "Name": "NationItem",
      "Fields": [
        {
          "Name": "n_nationkey",
          "Typ": "int"
        },
        {
          "Name": "n_name",
          "Typ": "string"
        }
      ]
    },
    {
      "Name": "CustomerItem",
      "Fields": [
        {
          "Name": "c_custkey",
          "Typ": "int"
        },
        {
          "Name": "c_name",
          "Typ": "string"
        },
        {
          "Name": "c_acctbal",
          "Typ": "float"
        },
        {
          "Name": "c_nationkey",
          "Typ": "int"
        },
        {
          "Name": "c_address",
          "Typ": "string"
        },
        {
          "Name": "c_phone",
          "Typ": "string"
        },
        {
          "Name": "c_comment",
          "Typ": "string"
        }
      ]
    },
    {
      "Name": "OrdersItem",
      "Fields": [
        {
          "Name": "o_orderkey",
          "Typ": "int"
        },
        {
          "Name": "o_custkey",
          "Typ": "int"
        },
        {
          "Name": "o_orderdate",
          "Typ": "string"
        }
      ]
    },
    {
      "Name": "LineitemItem",
      "Fields": [
        {
          "Name": "l_orderkey",
          "Typ": "int"
        },
        {
          "Name": "l_returnflag",
          "Typ": "string"
        },
        {
          "Name": "l_extendedprice",
          "Typ": "float"
        },
        {
          "Name": "l_discount",
          "Typ": "float"
        }
      ]
    },
    {
      "Name": "GKey",
      "Fields": [
        {
          "Name": "c_custkey",
          "Typ": "int"
        },
        {
          "Name": "c_name",
          "Typ": "string"
        },
        {
          "Name": "c_acctbal",
          "Typ": "float"
        },
        {
          "Name": "c_address",
          "Typ": "string"
        },
        {
          "Name": "c_phone",
          "Typ": "string"
        },
        {
          "Name": "c_comment",
          "Typ": "string"
        },
        {
          "Name": "n_name",
          "Typ": "string"
        }
      ]
    },
    {
      "Name": "GRow",
      "Fields": [
        {
          "Name": "c",
          "Typ": "CustomerItem"
        },
        {
          "Name": "o",
          "Typ": "OrdersItem"
        },
        {
          "Name": "l",
          "Typ": "LineitemItem"
        },
        {
          "Name": "n",
          "Typ": "NationItem"
        }
      ]
    },
    {
      "Name": "GGroup",
      "Fields": [
        {
          "Name": "key",
          "Typ": "GKey"
        },
        {
          "Name": "items",
          "Typ": "list\u003cGRow\u003e"
        }
      ]
    },
    {
      "Name": "ResultItem",
      "Fields": [
        {
          "Name": "c_custkey",
          "Typ": "int"
        },
        {
          "Name": "c_name",
          "Typ": "string"
        },
        {
          "Name": "revenue",
          "Typ": "float"
        },
        {
          "Name": "c_acctbal",
          "Typ": "float"
        },
        {
          "Name": "n_name",
          "Typ": "string"
        },
        {
          "Name": "c_address",
          "Typ": "string"
        },
        {
          "Name": "c_phone",
          "Typ": "string"
        },
        {
          "Name": "c_comment",
          "Typ": "string"
        }
      ]
    }
  ],
  "globals": [
    {
      "Name": "\u003c\u003c",
      "Typ": "\u003c\u003c v.o \u003c\u003c \", \" \u003c\u003c \"'l': \" \u003c\u003c v.l \u003c\u003c \", \" \u003c\u003c \"'n': \"",
      "Value": ""
    },
    {
      "Name": "\u003c\u003c",
      "Typ": "\u003c\u003c v.o \u003c\u003c \", \" \u003c\u003c \"'l': \" \u003c\u003c v.l \u003c\u003c \", \" \u003c\u003c \"'n': \"",
      "Value": ""
    },
    {
      "Name": "\u003c\u003c",
      "Typ": "\u003c\u003c v.o \u003c\u003c \", \" \u003c\u003c \"'l': \" \u003c\u003c v.l \u003c\u003c \", \" \u003c\u003c \"'n': \"",
      "Value": ""
    },
    {
      "Name": "\u003c\u003c",
      "Typ": "\u003c\u003c v.o \u003c\u003c \", \" \u003c\u003c \"'l': \" \u003c\u003c v.l \u003c\u003c \", \" \u003c\u003c \"'n': \"",
      "Value": ""
    },
    {
      "Name": "\u003c\u003c",
      "Typ": "\u003c\u003c v.o \u003c\u003c \", \" \u003c\u003c \"'l': \" \u003c\u003c v.l \u003c\u003c \", \" \u003c\u003c \"'n': \"",
      "Value": ""
    },
    {
      "Name": "\"'\"",
      "Typ": "\u003c\u003c v.c_address \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "re",
      "Typ": "rn items.end(); } size_t size() const {",
      "Value": ""
    },
    {
      "Name": "re",
      "Typ": "rn items.end(); } size_t size() const {",
      "Value": ""
    },
    {
      "Name": "co",
      "Typ": "rn items.end(); } size_t size()",
      "Value": ""
    },
    {
      "Name": "co",
      "Typ": "rn items.end(); } size_t size()",
      "Value": ""
    },
    {
      "Name": "lineitem",
      "Typ": "}; std::vector\u003cLineitemItem\u003e",
      "Value": "std::v"
    },
    {
      "Name": ".l_returnflag",
      "Typ": "",
      "Value": "std::string(\"R\"), .l_extendedpri"
    },
    {
      "Name": ".revenue",
      "Typ": "name,",
      "Value": "[\u0026]{ auto __tmp = ([\u0026]{ std::vector\u003cdouble\u003e __items"
    },
    {
      "Name": "x.l.l_discount",
      "Typ": "_items.push_back((x.l.l_extendedprice * (1 -",
      "Value": ""
    },
    {
      "Name": "}",
      "Typ": "td::accumulate(__tmp.begin(), __tmp.end(), 0.0);",
      "Value": ""
    },
    {
      "Name": "'}'",
      "Typ": "\u003c(std::ostream\u0026 os, const GRow\u0026 v) { os \u003c\u003c '{' \u003c\u003c \"'c': \" \u003c\u003c v.c \u003c\u003c \", \" \u003c\u003c \"'o': \" \u003c\u003c v.o \u003c\u003c \", \" \u003c\u003c \"'l': \" \u003c\u003c v.l \u003c\u003c \", \" \u003c\u003c \"'n': \" \u003c\u003c v.n \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "'}'",
      "Typ": "GGroup\u0026 v) { os \u003c\u003c '{' \u003c\u003c \"'key': \" \u003c\u003c v.key \u003c\u003c \", \" \u003c\u003c \"'items': \" \u003c\u003c v.items \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "'}'",
      "Typ": "(std::ostream\u0026 os, const ResultItem\u0026 v) { os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'revenue': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.revenue \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "st",
      "Typ": "key \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'revenue': \" \u003c\u003c std::fixed \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "std::setprecisio",
      "Typ": "precision(1) \u003c\u003c v.revenue \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "v.c",
      "Typ": "\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "x.l.l_discount)))",
      "Typ": "or (auto x : g) { __items.push_back((x.l.l_extendedprice * (1 -",
      "Value": ""
    },
    {
      "Name": "__tmp.end(),",
      "Typ": "scount))); } return __items; }()); return std::accumulate(__tmp.begin(),",
      "Value": ""
    },
    {
      "Name": ".c_acctbal",
      "Typ": "}()),",
      "Value": "g.key.c_acctbal, .n_name = g.key.n_name, .c_address = g.key.c"
    },
    {
      "Name": "std::",
      "Typ": "'\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}'; return os; }",
      "Value": ""
    },
    {
      "Name": "std::vector\u003cCustomerItem",
      "Typ": "td::string(\"BRAZIL\")}};",
      "Value": ""
    },
    {
      "Name": "__i",
      "Typ": "list\u003cfloat\u003e",
      "Value": ""
    },
    {
      "Name": "sh_back((x.",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "s",
      "Typ": "; }()); return",
      "Value": ""
    },
    {
      "Name": ".n_name",
      "Typ": ",",
      "Value": "g.key.n_n"
    },
    {
      "Name": "Orders",
      "Typ": "const",
      "Value": ""
    },
    {
      "Name": "lineitem",
      "Typ": "LineitemItem\u003e",
      "Value": ""
    },
    {
      "Name": "lineitem",
      "Typ": "LineitemItem\u003e",
      "Value": ""
    },
    {
      "Name": "std::setprecision(",
      "Typ": "acctbal': \" \u003c\u003c std::fixed \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "\"'c_a",
      "Typ": "_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "co",
      "Typ": "mment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}'; return os; } std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os,",
      "Value": ""
    },
    {
      "Name": "'}'",
      "Typ": "sItem\u0026 v) { os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "std::setprecision(",
      "Typ": "acctbal': \" \u003c\u003c std::fixed \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "\"'c_a",
      "Typ": "_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "co",
      "Typ": "mment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}'; return os; } std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os,",
      "Value": ""
    },
    {
      "Name": "'}'",
      "Typ": "sItem\u0026 v) { os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "std::setprecision(",
      "Typ": "acctbal': \" \u003c\u003c std::fixed \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "\"'c_a",
      "Typ": "_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "co",
      "Typ": "mment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}'; return os; } std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os,",
      "Value": ""
    },
    {
      "Name": "'}'",
      "Typ": "sItem\u0026 v) { os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "std::setprecision(",
      "Typ": "acctbal': \" \u003c\u003c std::fixed \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "\"'c_a",
      "Typ": "_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "co",
      "Typ": "mment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}'; return os; } std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os,",
      "Value": ""
    },
    {
      "Name": "'}'",
      "Typ": "sItem\u0026 v) { os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "std::setprecision(",
      "Typ": "acctbal': \" \u003c\u003c std::fixed \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "\"'c_a",
      "Typ": "_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "co",
      "Typ": "mment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}'; return os; } std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os,",
      "Value": ""
    },
    {
      "Name": "'}'",
      "Typ": "sItem\u0026 v) { os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "std::setprecision(",
      "Typ": "acctbal': \" \u003c\u003c std::fixed \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "\"'c_a",
      "Typ": "_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "co",
      "Typ": "mment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}'; return os; } std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os,",
      "Value": ""
    },
    {
      "Name": "'}'",
      "Typ": "sItem\u0026 v) { os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "std::setprecision(",
      "Typ": "acctbal': \" \u003c\u003c std::fixed \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "\"'c_a",
      "Typ": "_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "co",
      "Typ": "mment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}'; return os; } std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os,",
      "Value": ""
    },
    {
      "Name": "'}'",
      "Typ": "sItem\u0026 v) { os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "std::setprecision(",
      "Typ": "acctbal': \" \u003c\u003c std::fixed \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "\"'c_a",
      "Typ": "_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "co",
      "Typ": "mment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}'; return os; } std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os,",
      "Value": ""
    },
    {
      "Name": "'}'",
      "Typ": "sItem\u0026 v) { os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "\u003c\u003c",
      "Typ": "_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate",
      "Value": ""
    },
    {
      "Name": "Lineite",
      "Typ": "'; return os; } std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const",
      "Value": ""
    },
    {
      "Name": "'}'",
      "Typ": "{ os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "std::se",
      "Typ": "eturnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "y",
      "Typ": "",
      "Value": "= c.c_custkey)) \u0026\u0026 (l.l_order"
    },
    {
      "Name": "y",
      "Typ": "",
      "Value": "= c.c_custkey)) \u0026\u0026 (l.l_order"
    },
    {
      "Name": "y",
      "Typ": "",
      "Value": "= c.c_custkey)) \u0026\u0026 (l.l_order"
    },
    {
      "Name": ".c_acctbal",
      "Typ": "c.c_name,",
      "Value": "c.c_acctbal, .c_address = c.c_address, .c_phone = c."
    },
    {
      "Name": "if(__g.key",
      "Typ": "_groups) {",
      "Value": "= __key) { __g.items.push_back(__row); __found = true"
    },
    {
      "Name": "{}}",
      "Typ": "break; } } if(!__found) { GGroup __g{__key,",
      "Value": ""
    },
    {
      "Name": "\"'l_returnfl",
      "Typ": "y': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "std::se",
      "Typ": "l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "Lineite",
      "Typ": "eam\u0026 operator\u003c\u003c(std::ostream\u0026 os, const",
      "Value": ""
    },
    {
      "Name": "\"'l_returnfl",
      "Typ": "y': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "std::se",
      "Typ": "l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "Lineite",
      "Typ": "eam\u0026 operator\u003c\u003c(std::ostream\u0026 os, const",
      "Value": ""
    },
    {
      "Name": "\"'l_returnfl",
      "Typ": "y': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "std::se",
      "Typ": "l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "Lineite",
      "Typ": "eam\u0026 operator\u003c\u003c(std::ostream\u0026 os, const",
      "Value": ""
    },
    {
      "Name": "\"'l_returnfl",
      "Typ": "y': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "std::se",
      "Typ": "l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "Lineite",
      "Typ": "eam\u0026 operator\u003c\u003c(std::ostream\u0026 os, const",
      "Value": ""
    },
    {
      "Name": "\"'l_returnfl",
      "Typ": "y': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "std::se",
      "Typ": "l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "Lineite",
      "Typ": "eam\u0026 operator\u003c\u003c(std::ostream\u0026 os, const",
      "Value": ""
    },
    {
      "Name": "\"'l_returnfl",
      "Typ": "y': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "std::se",
      "Typ": "l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "Lineite",
      "Typ": "eam\u0026 operator\u003c\u003c(std::ostream\u0026 os, const",
      "Value": ""
    },
    {
      "Name": "\u003c\u003c",
      "Typ": "\", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate",
      "Value": ""
    },
    {
      "Name": "{}}",
      "Typ": "!__found) { GGroup __g{__key,",
      "Value": ""
    },
    {
      "Name": "{}}",
      "Typ": "!__found) { GGroup __g{__key,",
      "Value": ""
    },
    {
      "Name": "{}}",
      "Typ": "!__found) { GGroup __g{__key,",
      "Value": ""
    },
    {
      "Name": "\"'l_returnfl",
      "Typ": "y': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "std::se",
      "Typ": "l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "Lineite",
      "Typ": "eam\u0026 operator\u003c\u003c(std::ostream\u0026 os, const",
      "Value": ""
    },
    {
      "Name": "\"'l_returnfl",
      "Typ": "y': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "std::se",
      "Typ": "l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "Lineite",
      "Typ": "eam\u0026 operator\u003c\u003c(std::ostream\u0026 os, const",
      "Value": ""
    },
    {
      "Name": "\u003c\u003c",
      "Typ": "\", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate",
      "Value": ""
    },
    {
      "Name": "\u003c\u003c",
      "Typ": "\", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate",
      "Value": ""
    },
    {
      "Name": "std::setpreci",
      "Typ": "\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c",
      "Value": ""
    },
    {
      "Name": ".c_name",
      "Typ": "",
      "Value": "c.c_name, .c_acctbal = c.c_"
    },
    {
      "Name": "if(__g.key",
      "Typ": "for(auto \u0026__g : __groups) {",
      "Value": "= __key) { __g.items.push_back(__row"
    },
    {
      "Name": "__g.items.push_back(__row)",
      "Typ": "y, {}};",
      "Value": ""
    },
    {
      "Name": "__gr",
      "Typ": "} } } } } } for(auto \u0026__g :",
      "Value": ""
    },
    {
      "Name": "first",
      "Typ": "// Generated by Mochi transpiler v0.10.34 on 2025-07-22 00:00:41 GMT+7 #include \u003ciostream\u003e #include \u003cstring\u003e #include \u003cvector\u003e #include \u003cmap\u003e #include \u003cnumeric\u003e #include \u003csstream\u003e #include \u003ciomanip\u003e #include \u003coptional\u003e template\u003ctypename T\u003e std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const std::optional\u003cT\u003e\u0026 v) { if(v) os \u003c\u003c *v; else os \u003c\u003c \"None\"; return os; } template\u003ctypename T\u003e std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const std::vector\u003cT\u003e\u0026 v) { os \u003c\u003c '['; bool",
      "Value": "true;\n    for(const auto\u0026 x : v) { if(!first) os \u003c\u003c \", \"; first = false; os \u003c\u003c x; }\n    os \u003c\u003c ']';\n    return os;\n}\n\nstruct NationItem {\n    int n_nationkey;\n    std::string n_name;\n    auto operator\u003c=\u003e(const NationItem\u0026) const = default;\n};\n\nstruct CustomerItem {\n    int c_custkey;\n    std::string c_name;\n    double c_acctbal;\n    int c_nationkey;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const CustomerItem\u0026) const = default;\n};\n\nstruct OrdersItem {\n    int o_orderkey;\n    int o_custkey;\n    std::string o_orderdate;\n    auto operator\u003c=\u003e(const OrdersItem\u0026) const = default;\n};\n\nstruct LineitemItem {\n    int l_orderkey;\n    std::string l_returnflag;\n    double l_extendedprice;\n    double l_discount;\n    auto operator\u003c=\u003e(const LineitemItem\u0026) const = default;\n};\n\nstruct GKey {\n    int c_custkey;\n    std::string c_name;\n    double c_acctbal;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    std::string n_name;\n    auto operator\u003c=\u003e(const GKey\u0026) const = default;\n};\n\nstruct GRow {\n    CustomerItem c;\n    OrdersItem o;\n    LineitemItem l;\n    NationItem n;\n    auto operator\u003c=\u003e(const GRow\u0026) const = default;\n};\n\nstruct GGroup {\n    GKey key;\n    std::vector\u003cGRow\u003e items;\n    auto operator\u003c=\u003e(const GGroup\u0026) const = default;\n    auto begin() { return items.begin(); }\n    auto end() { return items.end(); }\n    size_t size() const { return items.size(); }\n};\n\nstruct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const OrdersItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}'"
    },
    {
      "Name": "\u003c\u003c",
      "Typ": "n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \"",
      "Value": ""
    },
    {
      "Name": "operator\u003c",
      "Typ": "{ GKey key; std::vector\u003cGRow\u003e items; auto",
      "Value": "\u003e(const GGroup\u0026) const = default;\n    auto begin() { return items.begin("
    },
    {
      "Name": "Resul",
      "Typ": "auto end() { return items.end(); } size_t size() const { return items.size(); } }; struct",
      "Value": ""
    },
    {
      "Name": "st",
      "Typ": "e; double revenue; double c_acctbal; std::string n_name; std::string c_address;",
      "Value": ""
    },
    {
      "Name": "operator\u003c",
      "Typ": "nt; auto",
      "Value": "\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ost"
    },
    {
      "Name": "retur",
      "Typ": "{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';",
      "Value": ""
    },
    {
      "Name": "'}'",
      "Typ": ", const CustomerItem\u0026 v) { os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "\"",
      "Typ": ":fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \",",
      "Value": ""
    },
    {
      "Name": "'}'",
      "Typ": "\" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "'}'",
      "Typ": "ostream\u0026 os, const OrdersItem\u0026 v) { os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "os",
      "Typ": "date': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}'; return os; } std::ostream\u0026 operator\u003c\u003c(std::ostream",
      "Value": ""
    },
    {
      "Name": "\"'l_extend",
      "Typ": "rderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "return",
      "Typ": "e \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';",
      "Value": ""
    },
    {
      "Name": "'}'",
      "Typ": "os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "std::setpr",
      "Typ": "cctbal': \" \u003c\u003c std::fixed \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "\"'c_address':",
      "Typ": "on(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "\u003c\u003c",
      "Typ": "v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\"",
      "Value": ""
    },
    {
      "Name": "'\"",
      "Typ": "phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment':",
      "Value": ""
    },
    {
      "Name": "v.",
      "Typ": ".c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "operato",
      "Typ": "e \u003c\u003c \"'\" \u003c\u003c '}'; return os; } std::ostream",
      "Value": ""
    },
    {
      "Name": "'}'",
      "Typ": "td::ostream\u0026 os, const GRow\u0026 v) { os \u003c\u003c '{' \u003c\u003c \"'c': \" \u003c\u003c v.c \u003c\u003c \", \" \u003c\u003c \"'o': \" \u003c\u003c v.o \u003c\u003c \", \" \u003c\u003c \"'l': \" \u003c\u003c v.l \u003c\u003c \", \" \u003c\u003c \"'n': \" \u003c\u003c v.n \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "v.o",
      "Typ": "\u003c\u003c \"'c': \" \u003c\u003c v.c \u003c\u003c \", \" \u003c\u003c \"'o': \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "v.",
      "Typ": ", \" \u003c\u003c \"'l': \" \u003c\u003c v.l \u003c\u003c \", \" \u003c\u003c \"'n': \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "operator\u003c",
      "Typ": "'}'; return os; } std::ostream",
      "Value": ""
    },
    {
      "Name": "'}'",
      "Typ": "::ostream\u0026 os, const GGroup\u0026 v) { os \u003c\u003c '{' \u003c\u003c \"'key': \" \u003c\u003c v.key \u003c\u003c \", \" \u003c\u003c \"'items': \" \u003c\u003c v.items \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "\u003c\u003c",
      "Typ": "\" \u003c\u003c v.key \u003c\u003c \", \" \u003c\u003c \"'items': \" \u003c\u003c v.items",
      "Value": ""
    },
    {
      "Name": "operator\u003c\u003c",
      "Typ": "return os; } std::ostream",
      "Value": ""
    },
    {
      "Name": "operator\u003c",
      "Typ": "uto",
      "Value": "\u003e(const GRow\u0026) const = default"
    },
    {
      "Name": "operator\u003c",
      "Typ": "std::vector\u003cGRow\u003e items; auto",
      "Value": ""
    },
    {
      "Name": "v.c_com",
      "Typ": "\"'c_comment': '\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "v.c_com",
      "Typ": "\"'c_comment': '\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "v.c_com",
      "Typ": "\"'c_comment': '\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "v.c_com",
      "Typ": "\"'c_comment': '\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "v.c_com",
      "Typ": "\"'c_comment': '\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "\"'c_acctb",
      "Typ": "\u003c\u003c",
      "Value": ""
    },
    {
      "Name": "v.c",
      "Typ": "ion(1) \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "\u003c",
      "Typ": "v.c_address",
      "Value": ""
    },
    {
      "Name": "std::",
      "Typ": "nt;",
      "Value": ""
    },
    {
      "Name": "perator\u003c",
      "Typ": "",
      "Value": "\u003e(co"
    },
    {
      "Name": "operator\u003c",
      "Typ": "n; auto",
      "Value": "\u003e(const GRow\u0026) const = default;\n};\n\nstruct GGroup {\n    GKey ke"
    },
    {
      "Name": "c_c",
      "Typ": "ault; auto begin() { return items.begin(); } auto end() { return items.end(); } size_t size() const { return items.size(); } }; struct ResultItem { int",
      "Value": ""
    },
    {
      "Name": "c_c",
      "Typ": "return items.end(); } size_t size() const { return items.size(); } }; struct ResultItem { int",
      "Value": ""
    },
    {
      "Name": "first",
      "Typ": "// Generated by Mochi transpiler v0.10.34 on 2025-07-22 00:00:41 GMT+7 #include \u003ciostream\u003e #include \u003cstring\u003e #include \u003cvector\u003e #include \u003cmap\u003e #include \u003cnumeric\u003e #include \u003csstream\u003e #include \u003ciomanip\u003e #include \u003coptional\u003e template\u003ctypename T\u003e std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const std::optional\u003cT\u003e\u0026 v) { if(v) os \u003c\u003c *v; else os \u003c\u003c \"None\"; return os; } template\u003ctypename T\u003e std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const std::vector\u003cT\u003e\u0026 v) { os \u003c\u003c '['; bool",
      "Value": "true;\n    for(const auto\u0026 x : v) { if(!first) os \u003c\u003c \", \"; first = false; os \u003c\u003c x; }\n    os \u003c\u003c ']';\n    return os;\n}\n\nstruct NationItem {\n    int n_nationkey;\n    std::string n_name;\n    auto operator\u003c=\u003e(const NationItem\u0026) const = default;\n};\n\nstruct CustomerItem {\n    int c_custkey;\n    std::string c_name;\n    double c_acctbal;\n    int c_nationkey;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const CustomerItem\u0026) const = default;\n};\n\nstruct OrdersItem {\n    int o_orderkey;\n    int o_custkey;\n    std::string o_orderdate;\n    auto operator\u003c=\u003e(const OrdersItem\u0026) const = default;\n};\n\nstruct LineitemItem {\n    int l_orderkey;\n    std::string l_returnflag;\n    double l_extendedprice;\n    double l_discount;\n    auto operator\u003c=\u003e(const LineitemItem\u0026) const = default;\n};\n\nstruct GKey {\n    int c_custkey;\n    std::string c_name;\n    double c_acctbal;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    std::string n_name;\n    auto operator\u003c=\u003e(const GKey\u0026) const = default;\n};\n\nstruct GRow {\n    CustomerItem c;\n    OrdersItem o;\n    LineitemItem l;\n    NationItem n;\n    auto operator\u003c=\u003e(const GRow\u0026) const = default;\n};\n\nstruct GGroup {\n    GKey key;\n    std::vector\u003cGRow\u003e items;\n    auto operator\u003c=\u003e(const GGroup\u0026) const = default;\n    auto begin() { return items.begin(); }\n    auto end() { return items.end(); }\n    size_t size() const { return items.size(); }\n};\n\nstruct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default"
    },
    {
      "Name": "'\"",
      "Typ": "tbal \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_address':",
      "Value": ""
    },
    {
      "Name": "first",
      "Typ": "// Generated by Mochi transpiler v0.10.34 on 2025-07-22 00:00:41 GMT+7 #include \u003ciostream\u003e #include \u003cstring\u003e #include \u003cvector\u003e #include \u003cmap\u003e #include \u003cnumeric\u003e #include \u003csstream\u003e #include \u003ciomanip\u003e #include \u003coptional\u003e template\u003ctypename T\u003e std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const std::optional\u003cT\u003e\u0026 v) { if(v) os \u003c\u003c *v; else os \u003c\u003c \"None\"; return os; } template\u003ctypename T\u003e std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const std::vector\u003cT\u003e\u0026 v) { os \u003c\u003c '['; bool",
      "Value": "true;\n    for(const auto\u0026 x : v) { if(!first) os \u003c\u003c \", \"; first = false; os \u003c\u003c x; }\n    os \u003c\u003c ']';\n    return os;\n}\n\nstruct NationItem {\n    int n_nationkey;\n    std::string n_name;\n    auto operator\u003c=\u003e(const NationItem\u0026) const = default;\n};\n\nstruct CustomerItem {\n    int c_custkey;\n    std::string c_name;\n    double c_acctbal;\n    int c_nationkey;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const CustomerItem\u0026) const = default;\n};\n\nstruct OrdersItem {\n    int o_orderkey;\n    int o_custkey;\n    std::string o_orderdate;\n    auto operator\u003c=\u003e(const OrdersItem\u0026) const = default;\n};\n\nstruct LineitemItem {\n    int l_orderkey;\n    std::string l_returnflag;\n    double l_extendedprice;\n    double l_discount;\n    auto operator\u003c=\u003e(const LineitemItem\u0026) const = default;\n};\n\nstruct GKey {\n    int c_custkey;\n    std::string c_name;\n    double c_acctbal;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    std::string n_name;\n    auto operator\u003c=\u003e(const GKey\u0026) const = default;\n};\n\nstruct GRow {\n    CustomerItem c;\n    OrdersItem o;\n    LineitemItem l;\n    NationItem n;\n    auto operator\u003c=\u003e(const GRow\u0026) const = default;\n};\n\nstruct GGroup {\n    GKey key;\n    std::vector\u003cGRow\u003e items;\n    auto operator\u003c=\u003e(const GGroup\u0026) const = default;\n    auto begin() { return items.begin(); }\n    auto end() { return items.end(); }\n    size_t size() const { return items.size(); }\n};\n\nstruct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const OrdersItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GKey\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GRow\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c': \" \u003c\u003c v.c \u003c\u003c \", \" \u003c\u003c \"'o': \" \u003c\u003c v.o \u003c\u003c \", \" \u003c\u003c \"'l': \" \u003c\u003c v.l \u003c\u003c \", \" \u003c\u003c \"'n': \" \u003c\u003c v.n \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GGroup\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'key': \" \u003c\u003c v.key \u003c\u003c \", \" \u003c\u003c \"'items': \" \u003c\u003c v.items \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'revenue': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.revenue \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::vector\u003cNationItem\u003e nation = std::vector{NationItem{.n_nationkey = 1, .n_name = std::string(\"BRAZIL\")}};\nstd::vector\u003cCustomerItem\u003e customer = std::vector{CustomerItem{.c_custkey = 1, .c_name = std::string(\"Alice\"), .c_acctbal = 100.0, .c_nationkey = 1, .c_address = std::string(\"123 St\"), .c_phone = std::string(\"123-456\"), .c_comment = std::string(\"Loyal\")}};\nstd::vector\u003cOrdersItem\u003e orders = std::vector{OrdersItem{.o_orderkey = 1000, .o_custkey = 1, .o_orderdate = std::string(\"1993-10-15\")}, OrdersItem{.o_orderkey = 2000, .o_custkey = 1, .o_orderdate = std::string(\"1994-01-02\")}};\nstd::vector\u003cLineitemItem\u003e lineitem = std::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0.1}, LineitemItem{.l_orderkey = 2000, .l_returnflag = std::string(\"N\"), .l_extendedprice = 500.0, .l_discount = 0.0}}"
    },
    {
      "Name": "first",
      "Typ": "// Generated by Mochi transpiler v0.10.34 on 2025-07-22 00:00:41 GMT+7 #include \u003ciostream\u003e #include \u003cstring\u003e #include \u003cvector\u003e #include \u003cmap\u003e #include \u003cnumeric\u003e #include \u003csstream\u003e #include \u003ciomanip\u003e #include \u003coptional\u003e template\u003ctypename T\u003e std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const std::optional\u003cT\u003e\u0026 v) { if(v) os \u003c\u003c *v; else os \u003c\u003c \"None\"; return os; } template\u003ctypename T\u003e std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const std::vector\u003cT\u003e\u0026 v) { os \u003c\u003c '['; bool",
      "Value": "true;\n    for(const auto\u0026 x : v) { if(!first) os \u003c\u003c \", \"; first = false; os \u003c\u003c x; }\n    os \u003c\u003c ']';\n    return os;\n}\n\nstruct NationItem {\n    int n_nationkey;\n    std::string n_name;\n    auto operator\u003c=\u003e(const NationItem\u0026) const = default;\n};\n\nstruct CustomerItem {\n    int c_custkey;\n    std::string c_name;\n    double c_acctbal;\n    int c_nationkey;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const CustomerItem\u0026) const = default;\n};\n\nstruct OrdersItem {\n    int o_orderkey;\n    int o_custkey;\n    std::string o_orderdate;\n    auto operator\u003c=\u003e(const OrdersItem\u0026) const = default;\n};\n\nstruct LineitemItem {\n    int l_orderkey;\n    std::string l_returnflag;\n    double l_extendedprice;\n    double l_discount;\n    auto operator\u003c=\u003e(const LineitemItem\u0026) const = default;\n};\n\nstruct GKey {\n    int c_custkey;\n    std::string c_name;\n    double c_acctbal;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    std::string n_name;\n    auto operator\u003c=\u003e(const GKey\u0026) const = default;\n};\n\nstruct GRow {\n    CustomerItem c;\n    OrdersItem o;\n    LineitemItem l;\n    NationItem n;\n    auto operator\u003c=\u003e(const GRow\u0026) const = default;\n};\n\nstruct GGroup {\n    GKey key;\n    std::vector\u003cGRow\u003e items;\n    auto operator\u003c=\u003e(const GGroup\u0026) const = default;\n    auto begin() { return items.begin(); }\n    auto end() { return items.end(); }\n    size_t size() const { return items.size(); }\n};\n\nstruct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const OrdersItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GKey\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GRow\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c': \" \u003c\u003c v.c \u003c\u003c \", \" \u003c\u003c \"'o': \" \u003c\u003c v.o \u003c\u003c \", \" \u003c\u003c \"'l': \" \u003c\u003c v.l \u003c\u003c \", \" \u003c\u003c \"'n': \" \u003c\u003c v.n \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GGroup\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'key': \" \u003c\u003c v.key \u003c\u003c \", \" \u003c\u003c \"'items': \" \u003c\u003c v.items \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'revenue': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.revenue \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::vector\u003cNationItem\u003e nation = std::vector{NationItem{.n_nationkey = 1, .n_name = std::string(\"BRAZIL\")}};\nstd::vector\u003cCustomerItem\u003e customer = std::vector{CustomerItem{.c_custkey = 1, .c_name = std::string(\"Alice\"), .c_acctbal = 100.0, .c_nationkey = 1, .c_address = std::string(\"123 St\"), .c_phone = std::string(\"123-456\"), .c_comment = std::string(\"Loyal\")}};\nstd::vector\u003cOrdersItem\u003e orders = std::vector{OrdersItem{.o_orderkey = 1000, .o_custkey = 1, .o_orderdate = std::string(\"1993-10-15\")}, OrdersItem{.o_orderkey = 2000, .o_custkey = 1, .o_orderdate = std::string(\"1994-01-02\")}};\nstd::vector\u003cLineitemItem\u003e lineitem = std::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0.1}, LineitemItem{.l_orderkey = 2000, .l_returnflag = std::string(\"N\"), .l_extendedprice = 500.0, .l_discount = 0.0}};\nauto start_date = std::string(\"1993-10-01\");\nauto end_date = std::string(\"1994-01-01\");\nstd::vector\u003cResultItem\u003e result = ([]{ std::vector\u003cResultItem\u003e __items;\nstd::vector\u003cGGroup\u003e __groups;\nfor (auto c : customer) {\nfor (auto o : orders) {\nfor (auto l : lineitem) {\nfor (auto n : nation) {\n    if(((((((o.o_orderdate \u003e= start_date) \u0026\u0026 (o.o_orderdate \u003c end_date)) \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o_custkey == c.c_custkey)) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationkey))) {\n        GRow __row{c, o, l, n}"
    },
    {
      "Name": "std::",
      "Typ": "string n_name; std::string c_address; std::string c_phone;",
      "Value": ""
    },
    {
      "Name": "const",
      "Typ": "\u003e(const ResultItem\u0026)",
      "Value": "default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, c"
    },
    {
      "Name": "operator\u003c",
      "Typ": "",
      "Value": "\u003e(const GRow\u0026) co"
    },
    {
      "Name": "items.end()",
      "Typ": "(); } auto end() { return",
      "Value": ""
    },
    {
      "Name": "items.size()",
      "Typ": "size_t size() const { return",
      "Value": ""
    },
    {
      "Name": "{",
      "Typ": "} }; struct ResultItem",
      "Value": ""
    },
    {
      "Name": "revenue",
      "Typ": "ustkey; std::string c_name; double",
      "Value": ""
    },
    {
      "Name": "doubl",
      "Typ": "enue;",
      "Value": ""
    },
    {
      "Name": "std::string",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "c_c",
      "Typ": "string",
      "Value": ""
    },
    {
      "Name": "t",
      "Typ": "",
      "Value": "default;\n}"
    },
    {
      "Name": "'}'",
      "Typ": "{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "v.",
      "Typ": "_name': '\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "op",
      "Typ": "std::ostream",
      "Value": ""
    },
    {
      "Name": "'}'",
      "Typ": "os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "first",
      "Typ": "// Generated by Mochi transpiler v0.10.34 on 2025-07-22 00:00:41 GMT+7 #include \u003ciostream\u003e #include \u003cstring\u003e #include \u003cvector\u003e #include \u003cmap\u003e #include \u003cnumeric\u003e #include \u003csstream\u003e #include \u003ciomanip\u003e #include \u003coptional\u003e template\u003ctypename T\u003e std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const std::optional\u003cT\u003e\u0026 v) { if(v) os \u003c\u003c *v; else os \u003c\u003c \"None\"; return os; } template\u003ctypename T\u003e std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const std::vector\u003cT\u003e\u0026 v) { os \u003c\u003c '['; bool",
      "Value": "true;\n    for(const auto\u0026 x : v) { if(!first) os \u003c\u003c \", \"; first = false; os \u003c\u003c x; }\n    os \u003c\u003c ']';\n    return os;\n}\n\nstruct NationItem {\n    int n_nationkey;\n    std::string n_name;\n    auto operator\u003c=\u003e(const NationItem\u0026) const = default;\n};\n\nstruct CustomerItem {\n    int c_custkey;\n    std::string c_name;\n    double c_acctbal;\n    int c_nationkey;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const CustomerItem\u0026) const = default;\n};\n\nstruct OrdersItem {\n    int o_orderkey;\n    int o_custkey;\n    std::string o_orderdate;\n    auto operator\u003c=\u003e(const OrdersItem\u0026) const = default;\n};\n\nstruct LineitemItem {\n    int l_orderkey;\n    std::string l_returnflag;\n    double l_extendedprice;\n    double l_discount;\n    auto operator\u003c=\u003e(const LineitemItem\u0026) const = default;\n};\n\nstruct GKey {\n    int c_custkey;\n    std::string c_name;\n    double c_acctbal;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    std::string n_name;\n    auto operator\u003c=\u003e(const GKey\u0026) const = default;\n};\n\nstruct GRow {\n    CustomerItem c;\n    OrdersItem o;\n    LineitemItem l;\n    NationItem n;\n    auto operator\u003c=\u003e(const GRow\u0026) const = default;\n};\n\nstruct GGroup {\n    GKey key;\n    std::vector\u003cGRow\u003e items;\n    auto operator\u003c=\u003e(const GGroup\u0026) const = default;\n    auto begin() { return items.begin(); }\n    auto end() { return items.end(); }\n    size_t size() const { return items.size(); }\n};\n\nstruct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}'"
    },
    {
      "Name": "first",
      "Typ": "// Generated by Mochi transpiler v0.10.34 on 2025-07-22 00:00:41 GMT+7 #include \u003ciostream\u003e #include \u003cstring\u003e #include \u003cvector\u003e #include \u003cmap\u003e #include \u003cnumeric\u003e #include \u003csstream\u003e #include \u003ciomanip\u003e #include \u003coptional\u003e template\u003ctypename T\u003e std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const std::optional\u003cT\u003e\u0026 v) { if(v) os \u003c\u003c *v; else os \u003c\u003c \"None\"; return os; } template\u003ctypename T\u003e std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const std::vector\u003cT\u003e\u0026 v) { os \u003c\u003c '['; bool",
      "Value": "true;\n    for(const auto\u0026 x : v) { if(!first) os \u003c\u003c \", \"; first = false; os \u003c\u003c x; }\n    os \u003c\u003c ']';\n    return os;\n}\n\nstruct NationItem {\n    int n_nationkey;\n    std::string n_name;\n    auto operator\u003c=\u003e(const NationItem\u0026) const = default;\n};\n\nstruct CustomerItem {\n    int c_custkey;\n    std::string c_name;\n    double c_acctbal;\n    int c_nationkey;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const CustomerItem\u0026) const = default;\n};\n\nstruct OrdersItem {\n    int o_orderkey;\n    int o_custkey;\n    std::string o_orderdate;\n    auto operator\u003c=\u003e(const OrdersItem\u0026) const = default;\n};\n\nstruct LineitemItem {\n    int l_orderkey;\n    std::string l_returnflag;\n    double l_extendedprice;\n    double l_discount;\n    auto operator\u003c=\u003e(const LineitemItem\u0026) const = default;\n};\n\nstruct GKey {\n    int c_custkey;\n    std::string c_name;\n    double c_acctbal;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    std::string n_name;\n    auto operator\u003c=\u003e(const GKey\u0026) const = default;\n};\n\nstruct GRow {\n    CustomerItem c;\n    OrdersItem o;\n    LineitemItem l;\n    NationItem n;\n    auto operator\u003c=\u003e(const GRow\u0026) const = default;\n};\n\nstruct GGroup {\n    GKey key;\n    std::vector\u003cGRow\u003e items;\n    auto operator\u003c=\u003e(const GGroup\u0026) const = default;\n    auto begin() { return items.begin(); }\n    auto end() { return items.end(); }\n    size_t size() const { return items.size(); }\n};\n\nstruct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}'"
    },
    {
      "Name": "first",
      "Typ": "// Generated by Mochi transpiler v0.10.34 on 2025-07-22 00:00:41 GMT+7 #include \u003ciostream\u003e #include \u003cstring\u003e #include \u003cvector\u003e #include \u003cmap\u003e #include \u003cnumeric\u003e #include \u003csstream\u003e #include \u003ciomanip\u003e #include \u003coptional\u003e template\u003ctypename T\u003e std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const std::optional\u003cT\u003e\u0026 v) { if(v) os \u003c\u003c *v; else os \u003c\u003c \"None\"; return os; } template\u003ctypename T\u003e std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const std::vector\u003cT\u003e\u0026 v) { os \u003c\u003c '['; bool",
      "Value": "true;\n    for(const auto\u0026 x : v) { if(!first) os \u003c\u003c \", \"; first = false; os \u003c\u003c x; }\n    os \u003c\u003c ']';\n    return os;\n}\n\nstruct NationItem {\n    int n_nationkey;\n    std::string n_name;\n    auto operator\u003c=\u003e(const NationItem\u0026) const = default;\n};\n\nstruct CustomerItem {\n    int c_custkey;\n    std::string c_name;\n    double c_acctbal;\n    int c_nationkey;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const CustomerItem\u0026) const = default;\n};\n\nstruct OrdersItem {\n    int o_orderkey;\n    int o_custkey;\n    std::string o_orderdate;\n    auto operator\u003c=\u003e(const OrdersItem\u0026) const = default;\n};\n\nstruct LineitemItem {\n    int l_orderkey;\n    std::string l_returnflag;\n    double l_extendedprice;\n    double l_discount;\n    auto operator\u003c=\u003e(const LineitemItem\u0026) const = default;\n};\n\nstruct GKey {\n    int c_custkey;\n    std::string c_name;\n    double c_acctbal;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    std::string n_name;\n    auto operator\u003c=\u003e(const GKey\u0026) const = default;\n};\n\nstruct GRow {\n    CustomerItem c;\n    OrdersItem o;\n    LineitemItem l;\n    NationItem n;\n    auto operator\u003c=\u003e(const GRow\u0026) const = default;\n};\n\nstruct GGroup {\n    GKey key;\n    std::vector\u003cGRow\u003e items;\n    auto operator\u003c=\u003e(const GGroup\u0026) const = default;\n    auto begin() { return items.begin(); }\n    auto end() { return items.end(); }\n    size_t size() const { return items.size(); }\n};\n\nstruct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd"
    },
    {
      "Name": "first",
      "Typ": "// Generated by Mochi transpiler v0.10.34 on 2025-07-22 00:00:41 GMT+7 #include \u003ciostream\u003e #include \u003cstring\u003e #include \u003cvector\u003e #include \u003cmap\u003e #include \u003cnumeric\u003e #include \u003csstream\u003e #include \u003ciomanip\u003e #include \u003coptional\u003e template\u003ctypename T\u003e std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const std::optional\u003cT\u003e\u0026 v) { if(v) os \u003c\u003c *v; else os \u003c\u003c \"None\"; return os; } template\u003ctypename T\u003e std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const std::vector\u003cT\u003e\u0026 v) { os \u003c\u003c '['; bool",
      "Value": "true;\n    for(const auto\u0026 x : v) { if(!first) os \u003c\u003c \", \"; first = false; os \u003c\u003c x; }\n    os \u003c\u003c ']';\n    return os;\n}\n\nstruct NationItem {\n    int n_nationkey;\n    std::string n_name;\n    auto operator\u003c=\u003e(const NationItem\u0026) const = default;\n};\n\nstruct CustomerItem {\n    int c_custkey;\n    std::string c_name;\n    double c_acctbal;\n    int c_nationkey;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const CustomerItem\u0026) const = default;\n};\n\nstruct OrdersItem {\n    int o_orderkey;\n    int o_custkey;\n    std::string o_orderdate;\n    auto operator\u003c=\u003e(const OrdersItem\u0026) const = default;\n};\n\nstruct LineitemItem {\n    int l_orderkey;\n    std::string l_returnflag;\n    double l_extendedprice;\n    double l_discount;\n    auto operator\u003c=\u003e(const LineitemItem\u0026) const = default;\n};\n\nstruct GKey {\n    int c_custkey;\n    std::string c_name;\n    double c_acctbal;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    std::string n_name;\n    auto operator\u003c=\u003e(const GKey\u0026) const = default;\n};\n\nstruct GRow {\n    CustomerItem c;\n    OrdersItem o;\n    LineitemItem l;\n    NationItem n;\n    auto operator\u003c=\u003e(const GRow\u0026) const = default;\n};\n\nstruct GGroup {\n    GKey key;\n    std::vector\u003cGRow\u003e items;\n    auto operator\u003c=\u003e(const GGroup\u0026) const = default;\n    auto begin() { return items.begin(); }\n    auto end() { return items.end(); }\n    size_t size() const { return items.size(); }\n};\n\nstruct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerIt"
    },
    {
      "Name": "operator\u003c\u003c(std",
      "Typ": "': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}'; return os; } std::ostream",
      "Value": ""
    },
    {
      "Name": "}",
      "Typ": "ize() const { return items.size();",
      "Value": ""
    },
    {
      "Name": "}",
      "Typ": "ize() const { return items.size();",
      "Value": ""
    },
    {
      "Name": ".c_address",
      "Typ": "",
      "Value": "std::string(\"123 St\"), .c_phone = std::string(\"123-456\"),"
    },
    {
      "Name": "orders",
      "Typ": "}}; std::vector\u003cOrdersItem\u003e",
      "Value": "std::vector{OrdersItem{.o_orderkey = 100"
    },
    {
      "Name": "date",
      "Typ": "",
      "Value": "std::string(\"1993-10-15\")}, OrdersItem{.o_orderkey = 2000, .o_custkey = 1, .o_o"
    },
    {
      "Name": "'}'",
      "Typ": "ream\u0026 os, const NationItem\u0026 v) { os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "v.n_nati",
      "Typ": "'n_nationkey': \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "c_name",
      "Typ": "ct ResultItem { int c_custkey; std::string",
      "Value": ""
    },
    {
      "Name": "revenue",
      "Typ": "c_name; double",
      "Value": ""
    },
    {
      "Name": "'}'",
      "Typ": "GKey\u0026 v) { os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "'\"",
      "Typ": "key \u003c\u003c \", \" \u003c\u003c \"'c_name':",
      "Value": ""
    },
    {
      "Name": "std::string(\"1994-0",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "std::string(\"1994-0",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "std::fix",
      "Typ": "name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "nation",
      "Typ": "list\u003cNationItem\u003e",
      "Value": "std::vector{NationItem{.n_nationkey = 1, .n_name = std::string(\"BRAZIL\")}}"
    },
    {
      "Name": "customer",
      "Typ": "list\u003cCustomerItem\u003e",
      "Value": "std::vector{CustomerItem{.c_custkey = 1, .c_name = std::string(\"Alice\"), .c_acctbal = 100.0, .c_nationkey = 1, .c_address = std::string(\"123 St\"), .c_phone = std::string(\"123-456\"), .c_comment = std::string(\"Loyal\")}}"
    },
    {
      "Name": "orders",
      "Typ": "list\u003cOrdersItem\u003e",
      "Value": "std::vector{OrdersItem{.o_orderkey = 1000, .o_custkey = 1, .o_orderdate = std::string(\"1993-10-15\")}, OrdersItem{.o_orderkey = 2000, .o_custkey = 1, .o_orderdate = std::string(\"1994-01-02\")}}"
    },
    {
      "Name": "lineitem",
      "Typ": "list\u003cLineitemItem\u003e",
      "Value": "std::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0.1}, LineitemItem{.l_orderkey = 2000, .l_returnflag = std::string(\"N\"), .l_extendedprice = 500.0, .l_discount = 0.0}}"
    },
    {
      "Name": "start_date",
      "Typ": "",
      "Value": "std::string(\"1993-10-01\""
    },
    {
      "Name": "end_date",
      "Typ": "",
      "Value": "std::string(\"1994-01-01\""
    },
    {
      "Name": "result",
      "Typ": "list\u003cResultItem\u003e",
      "Value": "[]{ std::vector\u003cResultItem\u003e __items;\nstd::vector\u003cGGroup\u003e __groups;\nfor (auto c : customer) {\nfor (auto o : orders) {\nfor (auto l : lineitem) {\nfor (auto n : nation) {\n    if(((((((o.o_orderdate \u003e= start_date) \u0026\u0026 (o.o_orderdate \u003c end_date)) \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o_custkey == c.c_custkey)) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationkey))) {\n        GRow __row{c, o, l, n};\n        auto __key = GKey{.c_custkey = c.c_custkey, .c_name = c.c_name, .c_acctbal = c.c_acctbal, .c_address = c.c_address, .c_phone = c.c_phone, .c_comment = c.c_comment, .n_name = n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.items.push_back(__row); __found = true; break; }\n        }\n        if(!__found) {\n            GGroup __g{__key, {}};\n            __g.items.push_back(__row);\n            __groups.push_back(__g);\n        }\n    }\n}\n}\n}\n}\nfor(auto \u0026__g : __groups) {\n    GGroup g = __g;\n    __items.push_back(ResultItem{.c_custkey = g.key.c_custkey, .c_name = g.key.c_name, .revenue = ([\u0026]{ auto __tmp = ([\u0026]{ std::vector\u003cdouble\u003e __items;\nfor (auto x : g) {\n        __items.push_back((x.l.l_extendedprice * (1 - x.l.l_discount)));\n}\nreturn __items; }()); return std::accumulate(__tmp.begin(), __tmp.end(), 0.0); }()), .c_acctbal = g.key.c_acctbal, .n_name = g.key.n_name, .c_address = g.key.c_address, .c_phone = g.key.c_phone, .c_comment = g.key.c_comment});\n}\nreturn __items; }("
    },
    {
      "Name": "std::vector\u003cResultItem\u003e",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "std::vector\u003cGGroup\u003e",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "c",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "o",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "l",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "n",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "n}",
      "Typ": "GRow __row{c, o, l,",
      "Value": ""
    },
    {
      "Name": "__key",
      "Typ": "",
      "Value": "GKey{.c_custkey = c.c_custkey, .c_name = c.c_name, .c_acctbal = c.c_acctbal, .c_address = c.c_address, .c_phone = c.c_phone, .c_comment = c.c_comment, .n_name = n.n_name}"
    },
    {
      "Name": "__found",
      "Typ": "bool",
      "Value": ""
    },
    {
      "Name": "\u0026__g",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "{}}",
      "Typ": "GGroup __g{__key,",
      "Value": ""
    },
    {
      "Name": "\u0026__g",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "g",
      "Typ": "GGroup",
      "Value": ""
    },
    {
      "Name": "__tmp",
      "Typ": "",
      "Value": "[\u0026]{ std::vector\u003cdouble\u003e __items;\nfor (auto x : g) {\n        __items.push_back((x.l.l_extendedprice * (1 - x.l.l_discount)));\n}\nreturn __items; }("
    },
    {
      "Name": "std::vector\u003cdouble\u003e",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "x",
      "Typ": "",
      "Value": ""
    }
  ],
  "source": "// Generated by Mochi transpiler v0.10.34 on 2025-07-22 00:00:41 GMT+7\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003cvector\u003e\n#include \u003cmap\u003e\n#include \u003cnumeric\u003e\n#include \u003csstream\u003e\n#include \u003ciomanip\u003e\n#include \u003coptional\u003e\n\n\ntemplate\u003ctypename T\u003e\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const std::optional\u003cT\u003e\u0026 v) {\n    if(v) os \u003c\u003c *v; else os \u003c\u003c \"None\";\n    return os;\n}\n\ntemplate\u003ctypename T\u003e\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const std::vector\u003cT\u003e\u0026 v) {\n    os \u003c\u003c '[';\n    bool first = true;\n    for(const auto\u0026 x : v) { if(!first) os \u003c\u003c \", \"; first = false; os \u003c\u003c x; }\n    os \u003c\u003c ']';\n    return os;\n}\n\nstruct NationItem {\n    int n_nationkey;\n    std::string n_name;\n    auto operator\u003c=\u003e(const NationItem\u0026) const = default;\n};\n\nstruct CustomerItem {\n    int c_custkey;\n    std::string c_name;\n    double c_acctbal;\n    int c_nationkey;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const CustomerItem\u0026) const = default;\n};\n\nstruct OrdersItem {\n    int o_orderkey;\n    int o_custkey;\n    std::string o_orderdate;\n    auto operator\u003c=\u003e(const OrdersItem\u0026) const = default;\n};\n\nstruct LineitemItem {\n    int l_orderkey;\n    std::string l_returnflag;\n    double l_extendedprice;\n    double l_discount;\n    auto operator\u003c=\u003e(const LineitemItem\u0026) const = default;\n};\n\nstruct GKey {\n    int c_custkey;\n    std::string c_name;\n    double c_acctbal;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    std::string n_name;\n    auto operator\u003c=\u003e(const GKey\u0026) const = default;\n};\n\nstruct GRow {\n    CustomerItem c;\n    OrdersItem o;\n    LineitemItem l;\n    NationItem n;\n    auto operator\u003c=\u003e(const GRow\u0026) const = default;\n};\n\nstruct GGroup {\n    GKey key;\n    std::vector\u003cGRow\u003e items;\n    auto operator\u003c=\u003e(const GGroup\u0026) const = default;\n    auto begin() { return items.begin(); }\n    auto end() { return items.end(); }\n    size_t size() const { return items.size(); }\n};\n\nstruct ResultItem {\n    int c_custkey;\n    std::string c_name;\n    double revenue;\n    double c_acctbal;\n    std::string n_name;\n    std::string c_address;\n    std::string c_phone;\n    std::string c_comment;\n    auto operator\u003c=\u003e(const ResultItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const NationItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'n_nationkey': \" \u003c\u003c v.n_nationkey \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const CustomerItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_nationkey': \" \u003c\u003c v.c_nationkey \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const OrdersItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'o_orderkey': \" \u003c\u003c v.o_orderkey \u003c\u003c \", \" \u003c\u003c \"'o_custkey': \" \u003c\u003c v.o_custkey \u003c\u003c \", \" \u003c\u003c \"'o_orderdate': '\" \u003c\u003c v.o_orderdate \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const LineitemItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'l_orderkey': \" \u003c\u003c v.l_orderkey \u003c\u003c \", \" \u003c\u003c \"'l_returnflag': '\" \u003c\u003c v.l_returnflag \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'l_extendedprice': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_extendedprice \u003c\u003c \", \" \u003c\u003c \"'l_discount': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.l_discount \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GKey\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GRow\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c': \" \u003c\u003c v.c \u003c\u003c \", \" \u003c\u003c \"'o': \" \u003c\u003c v.o \u003c\u003c \", \" \u003c\u003c \"'l': \" \u003c\u003c v.l \u003c\u003c \", \" \u003c\u003c \"'n': \" \u003c\u003c v.n \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const GGroup\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'key': \" \u003c\u003c v.key \u003c\u003c \", \" \u003c\u003c \"'items': \" \u003c\u003c v.items \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const ResultItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'c_custkey': \" \u003c\u003c v.c_custkey \u003c\u003c \", \" \u003c\u003c \"'c_name': '\" \u003c\u003c v.c_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'revenue': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.revenue \u003c\u003c \", \" \u003c\u003c \"'c_acctbal': \" \u003c\u003c std::fixed \u003c\u003c std::setprecision(1) \u003c\u003c v.c_acctbal \u003c\u003c \", \" \u003c\u003c \"'n_name': '\" \u003c\u003c v.n_name \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_address': '\" \u003c\u003c v.c_address \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_phone': '\" \u003c\u003c v.c_phone \u003c\u003c \"'\" \u003c\u003c \", \" \u003c\u003c \"'c_comment': '\" \u003c\u003c v.c_comment \u003c\u003c \"'\" \u003c\u003c '}';\n    return os;\n}\n\nstd::vector\u003cNationItem\u003e nation = std::vector{NationItem{.n_nationkey = 1, .n_name = std::string(\"BRAZIL\")}};\nstd::vector\u003cCustomerItem\u003e customer = std::vector{CustomerItem{.c_custkey = 1, .c_name = std::string(\"Alice\"), .c_acctbal = 100.0, .c_nationkey = 1, .c_address = std::string(\"123 St\"), .c_phone = std::string(\"123-456\"), .c_comment = std::string(\"Loyal\")}};\nstd::vector\u003cOrdersItem\u003e orders = std::vector{OrdersItem{.o_orderkey = 1000, .o_custkey = 1, .o_orderdate = std::string(\"1993-10-15\")}, OrdersItem{.o_orderkey = 2000, .o_custkey = 1, .o_orderdate = std::string(\"1994-01-02\")}};\nstd::vector\u003cLineitemItem\u003e lineitem = std::vector{LineitemItem{.l_orderkey = 1000, .l_returnflag = std::string(\"R\"), .l_extendedprice = 1000.0, .l_discount = 0.1}, LineitemItem{.l_orderkey = 2000, .l_returnflag = std::string(\"N\"), .l_extendedprice = 500.0, .l_discount = 0.0}};\nauto start_date = std::string(\"1993-10-01\");\nauto end_date = std::string(\"1994-01-01\");\nstd::vector\u003cResultItem\u003e result = ([]{ std::vector\u003cResultItem\u003e __items;\nstd::vector\u003cGGroup\u003e __groups;\nfor (auto c : customer) {\nfor (auto o : orders) {\nfor (auto l : lineitem) {\nfor (auto n : nation) {\n    if(((((((o.o_orderdate \u003e= start_date) \u0026\u0026 (o.o_orderdate \u003c end_date)) \u0026\u0026 (l.l_returnflag == std::string(\"R\"))) \u0026\u0026 (o.o_custkey == c.c_custkey)) \u0026\u0026 (l.l_orderkey == o.o_orderkey)) \u0026\u0026 (n.n_nationkey == c.c_nationkey))) {\n        GRow __row{c, o, l, n};\n        auto __key = GKey{.c_custkey = c.c_custkey, .c_name = c.c_name, .c_acctbal = c.c_acctbal, .c_address = c.c_address, .c_phone = c.c_phone, .c_comment = c.c_comment, .n_name = n.n_name};\n        bool __found = false;\n        for(auto \u0026__g : __groups) {\n            if(__g.key == __key) { __g.items.push_back(__row); __found = true; break; }\n        }\n        if(!__found) {\n            GGroup __g{__key, {}};\n            __g.items.push_back(__row);\n            __groups.push_back(__g);\n        }\n    }\n}\n}\n}\n}\nfor(auto \u0026__g : __groups) {\n    GGroup g = __g;\n    __items.push_back(ResultItem{.c_custkey = g.key.c_custkey, .c_name = g.key.c_name, .revenue = ([\u0026]{ auto __tmp = ([\u0026]{ std::vector\u003cdouble\u003e __items;\nfor (auto x : g) {\n        __items.push_back((x.l.l_extendedprice * (1 - x.l.l_discount)));\n}\nreturn __items; }()); return std::accumulate(__tmp.begin(), __tmp.end(), 0.0); }()), .c_acctbal = g.key.c_acctbal, .n_name = g.key.n_name, .c_address = g.key.c_address, .c_phone = g.key.c_phone, .c_comment = g.key.c_comment});\n}\nreturn __items; }());\n\nint main() {\n    std::cout \u003c\u003c result \u003c\u003c std::endl;\n    return 0;\n}\n"
}