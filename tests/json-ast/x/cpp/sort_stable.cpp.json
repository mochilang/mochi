{
  "funcs": [
    {
      "Name": "main",
      "Params": null,
      "Ret": "int",
      "Body": "{\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c result \u003c\u003c std::endl;\n    return 0;\n"
    }
  ],
  "enums": null,
  "structs": [
    {
      "Name": "ItemsItem",
      "Fields": [
        {
          "Name": "n",
          "Typ": "int"
        },
        {
          "Name": "v",
          "Typ": "string"
        }
      ]
    }
  ],
  "globals": [
    {
      "Name": "items",
      "Typ": "list\u003cItemsItem\u003e",
      "Value": "std::vector{ItemsItem{.n = 1, .v = std::string(\"a\")}, ItemsItem{.n = 1, .v = std::string(\"b\")}, ItemsItem{.n = 2, .v = std::string(\"c\")}}"
    },
    {
      "Name": "result",
      "Typ": "list\u003cstring\u003e",
      "Value": "[]{ std::vector\u003cstd::pair\u003cint, std::string\u003e\u003e __tmp;\nfor (auto i : items) {\n        __tmp.emplace_back(i.n, i.v);\n}\nstd::sort(__tmp.begin(), __tmp.end(), [](const auto\u0026 a,const auto\u0026 b){ return a.first \u003c b.first; });\nstd::vector\u003cstd::string\u003e __items;\nfor(size_t __i=0; __i\u003c__tmp.size(); ++__i){\n    __items.push_back(__tmp[__i].second);\n}\nreturn __items; }("
    },
    {
      "Name": "std::string\u003e\u003e",
      "Typ": "std::vector\u003cstd::pair\u003cint,",
      "Value": ""
    },
    {
      "Name": "i",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "std::vector\u003cstd::string\u003e",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "__i",
      "Typ": "int",
      "Value": ""
    }
  ],
  "source": "// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:20:17 GMT+7\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003cvector\u003e\n#include \u003cmap\u003e\n#include \u003calgorithm\u003e\n#include \u003csstream\u003e\n#include \u003ciomanip\u003e\n\n\nstruct ItemsItem {\n    int n;\n    std::string v;\n};\n\nstd::vector\u003cItemsItem\u003e items = std::vector{ItemsItem{.n = 1, .v = std::string(\"a\")}, ItemsItem{.n = 1, .v = std::string(\"b\")}, ItemsItem{.n = 2, .v = std::string(\"c\")}};\nstd::vector\u003cstd::string\u003e result = ([]{ std::vector\u003cstd::pair\u003cint, std::string\u003e\u003e __tmp;\nfor (auto i : items) {\n        __tmp.emplace_back(i.n, i.v);\n}\nstd::sort(__tmp.begin(), __tmp.end(), [](const auto\u0026 a,const auto\u0026 b){ return a.first \u003c b.first; });\nstd::vector\u003cstd::string\u003e __items;\nfor(size_t __i=0; __i\u003c__tmp.size(); ++__i){\n    __items.push_back(__tmp[__i].second);\n}\nreturn __items; }());\n\nint main() {\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c result \u003c\u003c std::endl;\n    return 0;\n}\n"
}