{
  "funcs": [
    {
      "Name": "__uint16_identity",
      "Params": [
        {
          "Name": "__x",
          "Typ": "__uint16_t"
        }
      ],
      "Ret": "__uint16_t",
      "Body": "in() {\n    std::"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "os",
          "Typ": "std::ostream"
        },
        {
          "Name": "v",
          "Typ": "Leaf"
        }
      ],
      "Ret": "std::ostream",
      "Body": "{\n    os \u003c\u003c '{' \u003c\u003c '}';\n    return os;\n"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "os",
          "Typ": "std::ostream"
        },
        {
          "Name": "v",
          "Typ": "Node"
        }
      ],
      "Ret": "std::ostream",
      "Body": "{\n    os \u003c\u003c '{' \u003c\u003c \"'left': \"\u003c\u003c v.left\n \u003c\u003c \", \" \u003c\u003c \"'value': \"\u003c\u003c v.value\n \u003c\u003c \", \" \u003c\u003c \"'right': \"\u003c\u003c v.right\n \u003c\u003c '}';\n    return os;\n"
    },
    {
      "Name": "sum_tree",
      "Params": [
        {
          "Name": "t",
          "Typ": "Tree"
        }
      ],
      "Ret": "int",
      "Body": "{\n    return ([\u0026]{\n    const Leaf* __leaf = dynamic_cast\u003cconst Leaf*\u003e(t);\n    if (__leaf) {\n        return 0;\n    }\n    const Node* __node = dynamic_cast\u003cconst Node*\u003e(t);\n    if (__node) {\n        Tree* left = __node-\u003eleft.get();\n        int value = __node-\u003evalue;\n        Tree* right = __node-\u003eright.get();\n        return ((sum_tree(left) + value) + sum_tree(right));\n    }\n    return 0;\n}());\n"
    },
    {
      "Name": "main",
      "Params": null,
      "Ret": "int",
      "Body": "{\n    std::cout \u003c\u003c sum_tree(t);\n    std::cout \u003c\u003c std::endl;\n    return 0;\n"
    }
  ],
  "enums": null,
  "structs": [
    {
      "Name": "Node",
      "Fields": [
        {
          "Name": "left",
          "Typ": "std::unique_ptr\u003cTree\u003e"
        },
        {
          "Name": "value",
          "Typ": "int"
        },
        {
          "Name": "right",
          "Typ": "std::unique_ptr\u003cTree\u003e"
        }
      ]
    }
  ],
  "globals": [
    {
      "Name": "right",
      "Typ": "ee",
      "Value": ""
    },
    {
      "Name": "Node",
      "Typ": "",
      "Value": ""
    }
  ],
  "source": "// Generated by Mochi transpiler v0.10.36 on 2025-07-22 17:44:54 GMT+7\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003cmemory\u003e\n#include \u003csstream\u003e\n#include \u003ciomanip\u003e\n#include \u003coptional\u003e\n#include \u003cvector\u003e\n\n\nstruct Tree;\n\n\nstruct Tree {\n    virtual ~Tree() = default;\n};\n\nstruct Leaf : Tree {\n    auto operator\u003c=\u003e(const Leaf\u0026) const = default;\n};\n\nstruct Node : Tree {\n    std::unique_ptr\u003cTree\u003e left;\n    int value;\n    std::unique_ptr\u003cTree\u003e right;\n    auto operator\u003c=\u003e(const Node\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const Leaf\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const Node\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'left': \"\u003c\u003c v.left\n \u003c\u003c \", \" \u003c\u003c \"'value': \"\u003c\u003c v.value\n \u003c\u003c \", \" \u003c\u003c \"'right': \"\u003c\u003c v.right\n \u003c\u003c '}';\n    return os;\n}\n\nint sum_tree(const Tree* t) {\n    return ([\u0026]{\n    const Leaf* __leaf = dynamic_cast\u003cconst Leaf*\u003e(t);\n    if (__leaf) {\n        return 0;\n    }\n    const Node* __node = dynamic_cast\u003cconst Node*\u003e(t);\n    if (__node) {\n        Tree* left = __node-\u003eleft.get();\n        int value = __node-\u003evalue;\n        Tree* right = __node-\u003eright.get();\n        return ((sum_tree(left) + value) + sum_tree(right));\n    }\n    return 0;\n}());\n}\n\nNode t = Node{.left = Leaf, .value = 1, .right = Node{.left = Leaf, .value = 2, .right = Leaf}};\n\nint main() {\n    std::cout \u003c\u003c sum_tree(t);\n    std::cout \u003c\u003c std::endl;\n    return 0;\n}\n"
}