{
  "funcs": [
    {
      "Name": "__bswap_16",
      "Params": [
        {
          "Name": "__bsx",
          "Typ": "__uint16_t"
        }
      ],
      "Ret": "__uint16_t",
      "Body": "(AdultsItem{.name = p.name, .email = p.email});\n    }\n}\nreturn __items; }());\n\nint main() {\n    for (AdultsItem a "
    },
    {
      "Name": "__uint16_identity",
      "Params": [
        {
          "Name": "__x",
          "Typ": "__uint16_t"
        }
      ],
      "Ret": "__uint16_t",
      "Body": "sItem{.name = p."
    },
    {
      "Name": "__uint32_identity",
      "Params": [
        {
          "Name": "__x",
          "Typ": "__uint32_t"
        }
      ],
      "Ret": "__uint32_t",
      "Body": "() {\n    for (Ad"
    },
    {
      "Name": "__uint64_identity",
      "Params": [
        {
          "Name": "__x",
          "Typ": "__uint64_t"
        }
      ],
      "Ret": "__uint64_t",
      "Body": "cout \u003c\u003c \" \";\n   "
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "os",
          "Typ": "std::ostream"
        },
        {
          "Name": "v",
          "Typ": "Person"
        }
      ],
      "Ret": "std::ostream",
      "Body": "{\n    os \u003c\u003c '{' \u003c\u003c \"'name': \"\u003c\u003c \"'\" \u003c\u003c v.name \u003c\u003c \"'\"\n \u003c\u003c \", \" \u003c\u003c \"'age': \"\u003c\u003c v.age\n \u003c\u003c \", \" \u003c\u003c \"'email': \"\u003c\u003c \"'\" \u003c\u003c v.email \u003c\u003c \"'\"\n \u003c\u003c '}';\n    return os;\n"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "os",
          "Typ": "std::ostream"
        },
        {
          "Name": "v",
          "Typ": "AdultsItem"
        }
      ],
      "Ret": "std::ostream",
      "Body": "{\n    os \u003c\u003c '{' \u003c\u003c \"'name': \"\u003c\u003c \"'\" \u003c\u003c v.name \u003c\u003c \"'\"\n \u003c\u003c \", \" \u003c\u003c \"'email': \"\u003c\u003c \"'\" \u003c\u003c v.email \u003c\u003c \"'\"\n \u003c\u003c '}';\n    return os;\n"
    },
    {
      "Name": "main",
      "Params": null,
      "Ret": "int",
      "Body": "{\n    for (AdultsItem a : adults) {\n        std::cout \u003c\u003c a.name;\n        std::cout \u003c\u003c \" \";\n        std::cout \u003c\u003c a.email;\n        std::cout \u003c\u003c std::endl;\n    }\n    return 0;\n"
    }
  ],
  "enums": null,
  "structs": [
    {
      "Name": "Person",
      "Fields": [
        {
          "Name": "name",
          "Typ": "string"
        },
        {
          "Name": "age",
          "Typ": "int"
        },
        {
          "Name": "email",
          "Typ": "string"
        }
      ]
    },
    {
      "Name": "AdultsItem",
      "Fields": [
        {
          "Name": "name",
          "Typ": "string"
        },
        {
          "Name": "email",
          "Typ": "string"
        }
      ]
    }
  ],
  "globals": [
    {
      "Name": "string(\"Char",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "std::cout",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "a.email",
      "Typ": "t \u003c\u003c",
      "Value": ""
    },
    {
      "Name": "people",
      "Typ": "",
      "Value": "std::vector{Person{.name = std::string(\"Alice\"), .age = 30, .email = std::string(\"alice@example.com\")}, Person{.name = std::string(\"Bob\"), .age = 15, .email = std::string(\"bob@example.com\")}, Person{.name = std::string(\"Charlie\"), .age = 20, .email = std::string(\"charlie@example.com\")}}"
    },
    {
      "Name": "adults",
      "Typ": "list\u003cAdultsItem\u003e",
      "Value": "[]{ std::vector\u003cAdultsItem\u003e __items;\nfor (auto p : people) {\n    if((p.age \u003e= 18)) {\n        __items.push_back(AdultsItem{.name = p.name, .email = p.email});\n    }\n}\nreturn __items; }("
    },
    {
      "Name": "std::vector\u003cAdultsItem\u003e",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "p",
      "Typ": "",
      "Value": ""
    }
  ],
  "source": "// Generated by Mochi transpiler v0.10.35 on 2025-07-22 16:28:20 GMT+7\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003cmap\u003e\n#include \u003cvector\u003e\n#include \u003csstream\u003e\n#include \u003ciomanip\u003e\n#include \u003coptional\u003e\n\n\n\nstruct Person {\n    std::string name;\n    int age;\n    std::string email;\n    auto operator\u003c=\u003e(const Person\u0026) const = default;\n};\n\nstruct AdultsItem {\n    std::string name;\n    std::string email;\n    auto operator\u003c=\u003e(const AdultsItem\u0026) const = default;\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const Person\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'name': \"\u003c\u003c \"'\" \u003c\u003c v.name \u003c\u003c \"'\"\n \u003c\u003c \", \" \u003c\u003c \"'age': \"\u003c\u003c v.age\n \u003c\u003c \", \" \u003c\u003c \"'email': \"\u003c\u003c \"'\" \u003c\u003c v.email \u003c\u003c \"'\"\n \u003c\u003c '}';\n    return os;\n}\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const AdultsItem\u0026 v) {\n    os \u003c\u003c '{' \u003c\u003c \"'name': \"\u003c\u003c \"'\" \u003c\u003c v.name \u003c\u003c \"'\"\n \u003c\u003c \", \" \u003c\u003c \"'email': \"\u003c\u003c \"'\" \u003c\u003c v.email \u003c\u003c \"'\"\n \u003c\u003c '}';\n    return os;\n}\n\nauto people = std::vector{Person{.name = std::string(\"Alice\"), .age = 30, .email = std::string(\"alice@example.com\")}, Person{.name = std::string(\"Bob\"), .age = 15, .email = std::string(\"bob@example.com\")}, Person{.name = std::string(\"Charlie\"), .age = 20, .email = std::string(\"charlie@example.com\")}};\nstd::vector\u003cAdultsItem\u003e adults = ([]{ std::vector\u003cAdultsItem\u003e __items;\nfor (auto p : people) {\n    if((p.age \u003e= 18)) {\n        __items.push_back(AdultsItem{.name = p.name, .email = p.email});\n    }\n}\nreturn __items; }());\n\nint main() {\n    for (AdultsItem a : adults) {\n        std::cout \u003c\u003c a.name;\n        std::cout \u003c\u003c \" \";\n        std::cout \u003c\u003c a.email;\n        std::cout \u003c\u003c std::endl;\n    }\n    return 0;\n}\n"
}