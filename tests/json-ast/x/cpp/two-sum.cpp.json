{
  "funcs": [
    {
      "Name": "twoSum",
      "Params": [
        {
          "Name": "nums",
          "Typ": ""
        },
        {
          "Name": "target",
          "Typ": "int"
        }
      ],
      "Ret": "",
      "Body": "{\n    int n = nums.size();\n    for (int i = 0; i \u003c n; i++ ) {\n        for (int j = (i + 1); j \u003c n; j++ ) {\n            if (((nums[i] + nums[j]) == target)) {\n                return std::vector{i, j};\n            }\n        }\n    }\n    return std::vector{-1, -1};\n"
    },
    {
      "Name": "twoSum",
      "Params": [
        {
          "Name": "nums",
          "Typ": "list\u003cint\u003e"
        },
        {
          "Name": "target",
          "Typ": "int"
        }
      ],
      "Ret": "list\u003cint\u003e",
      "Body": "{\n    int n = nums.size();\n    for (int i = 0; i \u003c n; i++ ) {\n        for (int j = (i + 1); j \u003c n; j++ ) {\n            if (((nums[i] + nums[j]) == target)) {\n                return std::vector{i, j};\n            }\n        }\n    }\n    return std::vector{-1, -1};\n"
    },
    {
      "Name": "main",
      "Params": null,
      "Ret": "int",
      "Body": "{\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c result[0] \u003c\u003c std::endl;\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c result[1] \u003c\u003c std::endl;\n    return 0;\n"
    }
  ],
  "enums": null,
  "structs": null,
  "globals": [
    {
      "Name": "result",
      "Typ": "",
      "Value": "twoSum(std::vector{2, 7, 11, 15}, 9"
    }
  ],
  "source": "// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:20:22 GMT+7\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003cvector\u003e\n#include \u003csstream\u003e\n#include \u003ciomanip\u003e\n\n\nauto twoSum(auto nums, int target) {\n    int n = nums.size();\n    for (int i = 0; i \u003c n; i++ ) {\n        for (int j = (i + 1); j \u003c n; j++ ) {\n            if (((nums[i] + nums[j]) == target)) {\n                return std::vector{i, j};\n            }\n        }\n    }\n    return std::vector{-1, -1};\n}\n\nauto result = twoSum(std::vector{2, 7, 11, 15}, 9);\n\nint main() {\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c result[0] \u003c\u003c std::endl;\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c result[1] \u003c\u003c std::endl;\n    return 0;\n}\n"
}