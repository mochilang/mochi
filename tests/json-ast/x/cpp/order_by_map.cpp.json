{
  "funcs": [
    {
      "Name": "main",
      "Params": null,
      "Ret": "int",
      "Body": "{\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c sorted \u003c\u003c std::endl;\n    return 0;\n"
    }
  ],
  "enums": null,
  "structs": [
    {
      "Name": "DataItem",
      "Fields": [
        {
          "Name": "a",
          "Typ": "int"
        },
        {
          "Name": "b",
          "Typ": "int"
        }
      ]
    }
  ],
  "globals": [
    {
      "Name": "data",
      "Typ": "list\u003cDataItem\u003e",
      "Value": "std::vector{DataItem{.a = 1, .b = 2}, DataItem{.a = 1, .b = 1}, DataItem{.a = 0, .b = 5}}"
    },
    {
      "Name": "sorted",
      "Typ": "list\u003cDataItem\u003e",
      "Value": "[]{ std::vector\u003cstd::pair\u003cstd::map\u003cauto, int\u003e, DataItem\u003e\u003e __tmp;\nfor (auto x : data) {\n        __tmp.emplace_back(std::map\u003cauto, auto\u003e{{a, x.a}, {b, x.b}}, x);\n}\nstd::sort(__tmp.begin(), __tmp.end(), [](const auto\u0026 a,const auto\u0026 b){ return a.first \u003c b.first; });\nstd::vector\u003cDataItem\u003e __items;\nfor(size_t __i=0; __i\u003c__tmp.size(); ++__i){\n    __items.push_back(__tmp[__i].second);\n}\nreturn __items; }("
    },
    {
      "Name": "DataItem\u003e\u003e",
      "Typ": "std::vector\u003cstd::pair\u003cstd::map\u003cauto, int\u003e,",
      "Value": ""
    },
    {
      "Name": "x",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "std::vector\u003cDataItem\u003e",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "__i",
      "Typ": "int",
      "Value": ""
    }
  ],
  "source": "// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:20:13 GMT+7\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003cvector\u003e\n#include \u003cmap\u003e\n#include \u003calgorithm\u003e\n#include \u003csstream\u003e\n#include \u003ciomanip\u003e\n\n\nstruct DataItem {\n    int a;\n    int b;\n};\n\nstd::vector\u003cDataItem\u003e data = std::vector{DataItem{.a = 1, .b = 2}, DataItem{.a = 1, .b = 1}, DataItem{.a = 0, .b = 5}};\nstd::vector\u003cDataItem\u003e sorted = ([]{ std::vector\u003cstd::pair\u003cstd::map\u003cauto, int\u003e, DataItem\u003e\u003e __tmp;\nfor (auto x : data) {\n        __tmp.emplace_back(std::map\u003cauto, auto\u003e{{a, x.a}, {b, x.b}}, x);\n}\nstd::sort(__tmp.begin(), __tmp.end(), [](const auto\u0026 a,const auto\u0026 b){ return a.first \u003c b.first; });\nstd::vector\u003cDataItem\u003e __items;\nfor(size_t __i=0; __i\u003c__tmp.size(); ++__i){\n    __items.push_back(__tmp[__i].second);\n}\nreturn __items; }());\n\nint main() {\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c sorted \u003c\u003c std::endl;\n    return 0;\n}\n"
}