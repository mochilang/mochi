{
  "funcs": [
    {
      "Name": "main",
      "Params": null,
      "Ret": "int",
      "Body": "{\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c std::string(\"--- Adults ---\") \u003c\u003c std::endl;\n    for (auto person : adults) {\n        std::cout \u003c\u003c std::boolalpha \u003c\u003c person.name \u003c\u003c ' ' \u003c\u003c std::string(\"is\") \u003c\u003c ' ' \u003c\u003c person.age \u003c\u003c ' ' \u003c\u003c (person.is_senior ? std::string(\" (senior)\") : std::string(\"\")) \u003c\u003c std::endl;\n    }\n    return 0;\n"
    }
  ],
  "enums": null,
  "structs": [
    {
      "Name": "PeopleItem",
      "Fields": [
        {
          "Name": "name",
          "Typ": "string"
        },
        {
          "Name": "age",
          "Typ": "int"
        }
      ]
    },
    {
      "Name": "AdultsItem",
      "Fields": [
        {
          "Name": "name",
          "Typ": "string"
        },
        {
          "Name": "age",
          "Typ": "int"
        },
        {
          "Name": "is_senior",
          "Typ": "bool"
        }
      ]
    }
  ],
  "globals": [
    {
      "Name": "std",
      "Typ": "senior ?",
      "Value": ""
    },
    {
      "Name": "people",
      "Typ": "list\u003cPeopleItem\u003e",
      "Value": "std::vector{PeopleItem{.name = std::string(\"Alice\"), .age = 30}, PeopleItem{.name = std::string(\"Bob\"), .age = 15}, PeopleItem{.name = std::string(\"Charlie\"), .age = 65}, PeopleItem{.name = std::string(\"Diana\"), .age = 45}}"
    },
    {
      "Name": "adults",
      "Typ": "list\u003cAdultsItem\u003e",
      "Value": "[]{ std::vector\u003cAdultsItem\u003e __items;\nfor (auto person : people) {\n    if((person.age \u003e= 18)) {\n        __items.push_back(AdultsItem{.name = person.name, .age = person.age, .is_senior = (person.age \u003e= 60)});\n    }\n}\nreturn __items; }("
    },
    {
      "Name": "std::vector\u003cAdultsItem\u003e",
      "Typ": "",
      "Value": ""
    },
    {
      "Name": "person",
      "Typ": "",
      "Value": ""
    }
  ],
  "source": "// Generated by Mochi transpiler v0.10.33 on 2025-07-21 18:19:50 GMT+7\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003cvector\u003e\n#include \u003cmap\u003e\n#include \u003csstream\u003e\n#include \u003ciomanip\u003e\n\n\nstruct PeopleItem {\n    std::string name;\n    int age;\n};\n\nstruct AdultsItem {\n    std::string name;\n    int age;\n    bool is_senior;\n};\n\nstd::vector\u003cPeopleItem\u003e people = std::vector{PeopleItem{.name = std::string(\"Alice\"), .age = 30}, PeopleItem{.name = std::string(\"Bob\"), .age = 15}, PeopleItem{.name = std::string(\"Charlie\"), .age = 65}, PeopleItem{.name = std::string(\"Diana\"), .age = 45}};\nstd::vector\u003cAdultsItem\u003e adults = ([]{ std::vector\u003cAdultsItem\u003e __items;\nfor (auto person : people) {\n    if((person.age \u003e= 18)) {\n        __items.push_back(AdultsItem{.name = person.name, .age = person.age, .is_senior = (person.age \u003e= 60)});\n    }\n}\nreturn __items; }());\n\nint main() {\n    std::cout \u003c\u003c std::boolalpha \u003c\u003c std::string(\"--- Adults ---\") \u003c\u003c std::endl;\n    for (auto person : adults) {\n        std::cout \u003c\u003c std::boolalpha \u003c\u003c person.name \u003c\u003c ' ' \u003c\u003c std::string(\"is\") \u003c\u003c ' ' \u003c\u003c person.age \u003c\u003c ' ' \u003c\u003c (person.is_senior ? std::string(\" (senior)\") : std::string(\"\")) \u003c\u003c std::endl;\n    }\n    return 0;\n}\n"
}