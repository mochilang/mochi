{
  "funcs": [
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "os",
          "Typ": "std::ostream"
        },
        {
          "Name": "v",
          "Typ": "std::optional\u003cT\u003e"
        }
      ],
      "Ret": "std::ostream",
      "Body": "{\n    if(v) os \u003c\u003c *v; else os \u003c\u003c \"None\";\n    return os;\n"
    },
    {
      "Name": "operator\u003c\u003c",
      "Params": [
        {
          "Name": "os",
          "Typ": "std::ostream"
        },
        {
          "Name": "v",
          "Typ": "list\u003cT\u003e"
        }
      ],
      "Ret": "std::ostream",
      "Body": "{\n    os \u003c\u003c '[';\n    bool first = true;\n    for(const auto\u0026 x : v) { if(!first) os \u003c\u003c \", \"; first = false; os \u003c\u003c x; }\n    os \u003c\u003c ']';\n    return os;\n"
    },
    {
      "Name": "add",
      "Params": [
        {
          "Name": "a",
          "Typ": "int"
        },
        {
          "Name": "b",
          "Typ": "int"
        }
      ],
      "Ret": "int",
      "Body": "{\n    return (a + b);\n"
    },
    {
      "Name": "main",
      "Params": null,
      "Ret": "int",
      "Body": "{\n    std::cout \u003c\u003c add5(3) \u003c\u003c std::endl;\n    return 0;\n"
    }
  ],
  "enums": null,
  "structs": null,
  "globals": [
    {
      "Name": "add5",
      "Typ": "",
      "Value": "[](int b) { return add(5, b); }"
    }
  ],
  "source": "// Generated by Mochi transpiler v0.10.34 on 2025-07-22 09:02:29 GMT+7\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003csstream\u003e\n#include \u003ciomanip\u003e\n#include \u003coptional\u003e\n#include \u003cvector\u003e\n\n\ntemplate\u003ctypename T\u003e\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const std::optional\u003cT\u003e\u0026 v) {\n    if(v) os \u003c\u003c *v; else os \u003c\u003c \"None\";\n    return os;\n}\n\ntemplate\u003ctypename T\u003e\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const std::vector\u003cT\u003e\u0026 v) {\n    os \u003c\u003c '[';\n    bool first = true;\n    for(const auto\u0026 x : v) { if(!first) os \u003c\u003c \", \"; first = false; os \u003c\u003c x; }\n    os \u003c\u003c ']';\n    return os;\n}\n\nint add(int a, int b) {\n    return (a + b);\n}\n\nauto add5 = [](int b) { return add(5, b); };\n\nint main() {\n    std::cout \u003c\u003c add5(3) \u003c\u003c std::endl;\n    return 0;\n}\n\n"
}