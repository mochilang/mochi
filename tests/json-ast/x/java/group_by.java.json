{
  "body": [
    {
      "kind": "VarDecl",
      "name": "people",
      "type": "Data1[]",
      "expr": {
        "kind": "NEW_ARRAY",
        "text": "new Data1[]{new Data1(\"Alice\", 30, \"Paris\"), new Data1(\"Bob\", 15, \"Hanoi\"), new Data1(\"Charlie\", 65, \"Paris\"), new Data1(\"Diana\", 45, \"Hanoi\"), new Data1(\"Eve\", 70, \"Paris\"), new Data1(\"Frank\", 22, \"Hanoi\")}"
      }
    },
    {
      "kind": "VarDecl",
      "name": "stats",
      "type": "java.util.List\u003cResult4\u003e",
      "expr": {
        "kind": "NEW_CLASS",
        "text": "new java.util.ArrayList\u003cResult4\u003e(){\n    {\n        java.util.LinkedHashMap\u003cString, Group2\u003e _groups = new java.util.LinkedHashMap\u003c\u003e();\n        java.util.ArrayList\u003cResult4\u003e _tmp = new java.util.ArrayList\u003c\u003e();\n        for (/*missing*/ person : people) {\n            /*missing*/ _k = ((Integer)(person.get(\"city\")));\n            String _ks = String.valueOf(_k);\n            Group2 g = _groups.get(_ks);\n            if (g == null) {\n                g = new Group2(_k, new java.util.ArrayList\u003c\u003e());\n                _groups.put(_ks, g);\n            }\n            g.items.add(person);\n        }\n        java.util.ArrayList\u003cGroup2\u003e list = new java.util.ArrayList\u003c\u003e(_groups.values());\n        int skip = 0;\n        int take = -1;\n        for (int i = 0; i \u003c list.size(); i++) {\n            if (i \u003c skip) continue;\n            if (take \u003e= 0 \u0026\u0026 i \u003e= skip + take) break;\n            /*missing*/ g = (Group2)list.get(i);\n            _tmp.add(new Result4(g.key, g.items.size(), (((new java.util.ArrayList\u003cInteger\u003e(){\n                {\n                    java.util.ArrayList\u003cInteger\u003e _tmp = new java.util.ArrayList\u003c\u003e();\n                    for (/*missing*/ p : g.items) {\n                        _tmp.add(((Integer)(p.get(\"age\"))));\n                    }\n                    java.util.ArrayList\u003cInteger\u003e list = _tmp;\n                    int skip = 0;\n                    int take = -1;\n                    for (int i = 0; i \u003c list.size(); i++) {\n                        if (i \u003c skip) continue;\n                        if (take \u003e= 0 \u0026\u0026 i \u003e= skip + take) break;\n                        _tmp.add((Integer)list.get(i));\n                    }\n                    addAll(_tmp);\n                }\n            }.stream().mapToDouble((v)-\u003e((Number)v).doubleValue()).average().orElse(0)) % 1 == 0) ? (Object)(int)(new java.util.ArrayList\u003cInteger\u003e(){\n                {\n                    java.util.ArrayList\u003cInteger\u003e _tmp = new java.util.ArrayList\u003c\u003e();\n                    for (/*missing*/ p : g.items) {\n                        _tmp.add(((Integer)(p.get(\"age\"))));\n                    }\n                    java.util.ArrayList\u003cInteger\u003e list = _tmp;\n                    int skip = 0;\n                    int take = -1;\n                    for (int i = 0; i \u003c list.size(); i++) {\n                        if (i \u003c skip) continue;\n                        if (take \u003e= 0 \u0026\u0026 i \u003e= skip + take) break;\n                        _tmp.add((Integer)list.get(i));\n                    }\n                    addAll(_tmp);\n                }\n            }.stream().mapToDouble((v)-\u003e((Number)v).doubleValue()).average().orElse(0)) : (Object)(new java.util.ArrayList\u003cInteger\u003e(){\n                {\n                    java.util.ArrayList\u003cInteger\u003e _tmp = new java.util.ArrayList\u003c\u003e();\n                    for (/*missing*/ p : g.items) {\n                        _tmp.add(((Integer)(p.get(\"age\"))));\n                    }\n                    java.util.ArrayList\u003cInteger\u003e list = _tmp;\n                    int skip = 0;\n                    int take = -1;\n                    for (int i = 0; i \u003c list.size(); i++) {\n                        if (i \u003c skip) continue;\n                        if (take \u003e= 0 \u0026\u0026 i \u003e= skip + take) break;\n                        _tmp.add((Integer)list.get(i));\n                    }\n                    addAll(_tmp);\n                }\n            }.stream().mapToDouble((v)-\u003e((Number)v).doubleValue()).average().orElse(0)))));\n        }\n        addAll(_tmp);\n    }\n}"
      }
    },
    {
      "kind": "Print",
      "expr": {
        "kind": "String",
        "value": "--- People grouped by city ---"
      }
    },
    {
      "kind": "ForEach",
      "name": "s",
      "expr": {
        "kind": "Ident",
        "name": "stats"
      },
      "body": [
        {
          "kind": "Print",
          "expr": {
            "kind": "Binary",
            "left": {
              "kind": "Binary",
              "left": {
                "kind": "Binary",
                "left": {
                  "kind": "Binary",
                  "left": {
                    "kind": "Member",
                    "name": "city",
                    "expr": {
                      "kind": "Ident",
                      "name": "s"
                    }
                  },
                  "right": {
                    "kind": "String",
                    "value": " : count = "
                  },
                  "op": "PLUS"
                },
                "right": {
                  "kind": "Member",
                  "name": "count",
                  "expr": {
                    "kind": "Ident",
                    "name": "s"
                  }
                },
                "op": "PLUS"
              },
              "right": {
                "kind": "String",
                "value": " , avg_age = "
              },
              "op": "PLUS"
            },
            "right": {
              "kind": "Member",
              "name": "avg_age",
              "expr": {
                "kind": "Ident",
                "name": "s"
              }
            },
            "op": "PLUS"
          }
        }
      ]
    }
  ]
}
