{
  "body": [
    {
      "kind": "VarDecl",
      "name": "items",
      "type": "Data1[]",
      "expr": {
        "kind": "NEW_ARRAY",
        "text": "new Data1[]{new Data1(\"x\", 1, 2), new Data1(\"x\", 2, 3), new Data1(\"y\", 1, 4), new Data1(\"y\", 2, 1)}"
      }
    },
    {
      "kind": "VarDecl",
      "name": "grouped",
      "type": "java.util.List\u003cResult5\u003e",
      "expr": {
        "kind": "NEW_CLASS",
        "text": "new java.util.ArrayList\u003cResult5\u003e(){\n    {\n        java.util.LinkedHashMap\u003cString, Group3\u003e _groups = new java.util.LinkedHashMap\u003c\u003e();\n        java.util.ArrayList\u003cResult5\u003e _tmp = new java.util.ArrayList\u003c\u003e();\n        for (/*missing*/ i : items) {\n            /*missing*/ _k = new Data2(i.a, i.b);\n            String _ks = String.valueOf(_k);\n            Group3 g = _groups.get(_ks);\n            if (g == null) {\n                g = new Group3(_k, new java.util.ArrayList\u003c\u003e());\n                _groups.put(_ks, g);\n            }\n            g.items.add(i);\n        }\n        java.util.ArrayList\u003cGroup3\u003e list = new java.util.ArrayList\u003c\u003e(_groups.values());\n        java.util.ArrayList\u003cResult5\u003e _res = new java.util.ArrayList\u003c\u003e();\n        list.sort((a,b)-\u003e{\n            Comparable _va = (Comparable)((((new java.util.ArrayList\u003cInteger\u003e(){\n                {\n                    java.util.ArrayList\u003cInteger\u003e _tmp = new java.util.ArrayList\u003c\u003e();\n                    for (/*missing*/ x : a.items) {\n                        _tmp.add(x.val);\n                    }\n                    java.util.ArrayList\u003cInteger\u003e list = _tmp;\n                    java.util.ArrayList\u003cInteger\u003e _res = new java.util.ArrayList\u003c\u003e();\n                    int skip = 0;\n                    int take = -1;\n                    for (int i = 0; i \u003c list.size(); i++) {\n                        if (i \u003c skip) continue;\n                        if (take \u003e= 0 \u0026\u0026 i \u003e= skip + take) break;\n                        _res.add((Integer)list.get(i));\n                    }\n                    addAll(_res);\n                }\n            }.stream().mapToDouble((v)-\u003e((Number)v).doubleValue()).sum()) % 1 == 0) ? (Object)(int)(new java.util.ArrayList\u003cInteger\u003e(){\n                {\n                    java.util.ArrayList\u003cInteger\u003e _tmp = new java.util.ArrayList\u003c\u003e();\n                    for (/*missing*/ x : a.items) {\n                        _tmp.add(x.val);\n                    }\n                    java.util.ArrayList\u003cInteger\u003e list = _tmp;\n                    java.util.ArrayList\u003cInteger\u003e _res = new java.util.ArrayList\u003c\u003e();\n                    int skip = 0;\n                    int take = -1;\n                    for (int i = 0; i \u003c list.size(); i++) {\n                        if (i \u003c skip) continue;\n                        if (take \u003e= 0 \u0026\u0026 i \u003e= skip + take) break;\n                        _res.add((Integer)list.get(i));\n                    }\n                    addAll(_res);\n                }\n            }.stream().mapToDouble((v)-\u003e((Number)v).doubleValue()).sum()) : (Object)(new java.util.ArrayList\u003cInteger\u003e(){\n                {\n                    java.util.ArrayList\u003cInteger\u003e _tmp = new java.util.ArrayList\u003c\u003e();\n                    for (/*missing*/ x : a.items) {\n                        _tmp.add(x.val);\n                    }\n                    java.util.ArrayList\u003cInteger\u003e list = _tmp;\n                    java.util.ArrayList\u003cInteger\u003e _res = new java.util.ArrayList\u003c\u003e();\n                    int skip = 0;\n                    int take = -1;\n                    for (int i = 0; i \u003c list.size(); i++) {\n                        if (i \u003c skip) continue;\n                        if (take \u003e= 0 \u0026\u0026 i \u003e= skip + take) break;\n                        _res.add((Integer)list.get(i));\n                    }\n                    addAll(_res);\n                }\n            }.stream().mapToDouble((v)-\u003e((Number)v).doubleValue()).sum())));\n            Comparable _vb = (Comparable)((((new java.util.ArrayList\u003cInteger\u003e(){\n                {\n                    java.util.ArrayList\u003cInteger\u003e _tmp = new java.util.ArrayList\u003c\u003e();\n                    for (/*missing*/ x : b.items) {\n                        _tmp.add(x.val);\n                    }\n                    java.util.ArrayList\u003cInteger\u003e list = _tmp;\n                    java.util.ArrayList\u003cInteger\u003e _res = new java.util.ArrayList\u003c\u003e();\n                    int skip = 0;\n                    int take = -1;\n                    for (int i = 0; i \u003c list.size(); i++) {\n                        if (i \u003c skip) continue;\n                        if (take \u003e= 0 \u0026\u0026 i \u003e= skip + take) break;\n                        _res.add((Integer)list.get(i));\n                    }\n                    addAll(_res);\n                }\n            }.stream().mapToDouble((v)-\u003e((Number)v).doubleValue()).sum()) % 1 == 0) ? (Object)(int)(new java.util.ArrayList\u003cInteger\u003e(){\n                {\n                    java.util.ArrayList\u003cInteger\u003e _tmp = new java.util.ArrayList\u003c\u003e();\n                    for (/*missing*/ x : b.items) {\n                        _tmp.add(x.val);\n                    }\n                    java.util.ArrayList\u003cInteger\u003e list = _tmp;\n                    java.util.ArrayList\u003cInteger\u003e _res = new java.util.ArrayList\u003c\u003e();\n                    int skip = 0;\n                    int take = -1;\n                    for (int i = 0; i \u003c list.size(); i++) {\n                        if (i \u003c skip) continue;\n                        if (take \u003e= 0 \u0026\u0026 i \u003e= skip + take) break;\n                        _res.add((Integer)list.get(i));\n                    }\n                    addAll(_res);\n                }\n            }.stream().mapToDouble((v)-\u003e((Number)v).doubleValue()).sum()) : (Object)(new java.util.ArrayList\u003cInteger\u003e(){\n                {\n                    java.util.ArrayList\u003cInteger\u003e _tmp = new java.util.ArrayList\u003c\u003e();\n                    for (/*missing*/ x : b.items) {\n                        _tmp.add(x.val);\n                    }\n                    java.util.ArrayList\u003cInteger\u003e list = _tmp;\n                    java.util.ArrayList\u003cInteger\u003e _res = new java.util.ArrayList\u003c\u003e();\n                    int skip = 0;\n                    int take = -1;\n                    for (int i = 0; i \u003c list.size(); i++) {\n                        if (i \u003c skip) continue;\n                        if (take \u003e= 0 \u0026\u0026 i \u003e= skip + take) break;\n                        _res.add((Integer)list.get(i));\n                    }\n                    addAll(_res);\n                }\n            }.stream().mapToDouble((v)-\u003e((Number)v).doubleValue()).sum())));\n            return _vb.compareTo(_va);\n        });\n        int skip = 0;\n        int take = -1;\n        for (int i = 0; i \u003c list.size(); i++) {\n            if (i \u003c skip) continue;\n            if (take \u003e= 0 \u0026\u0026 i \u003e= skip + take) break;\n            /*missing*/ g = (Group3)list.get(i);\n            _res.add(new Result5(g.key.a, g.key.b, (((new java.util.ArrayList\u003cInteger\u003e(){\n                {\n                    java.util.ArrayList\u003cInteger\u003e _tmp = new java.util.ArrayList\u003c\u003e();\n                    for (/*missing*/ x : g.items) {\n                        _tmp.add(x.val);\n                    }\n                    java.util.ArrayList\u003cInteger\u003e list = _tmp;\n                    java.util.ArrayList\u003cInteger\u003e _res = new java.util.ArrayList\u003c\u003e();\n                    int skip = 0;\n                    int take = -1;\n                    for (int i = 0; i \u003c list.size(); i++) {\n                        if (i \u003c skip) continue;\n                        if (take \u003e= 0 \u0026\u0026 i \u003e= skip + take) break;\n                        _res.add((Integer)list.get(i));\n                    }\n                    addAll(_res);\n                }\n            }.stream().mapToDouble((v)-\u003e((Number)v).doubleValue()).sum()) % 1 == 0) ? (Object)(int)(new java.util.ArrayList\u003cInteger\u003e(){\n                {\n                    java.util.ArrayList\u003cInteger\u003e _tmp = new java.util.ArrayList\u003c\u003e();\n                    for (/*missing*/ x : g.items) {\n                        _tmp.add(x.val);\n                    }\n                    java.util.ArrayList\u003cInteger\u003e list = _tmp;\n                    java.util.ArrayList\u003cInteger\u003e _res = new java.util.ArrayList\u003c\u003e();\n                    int skip = 0;\n                    int take = -1;\n                    for (int i = 0; i \u003c list.size(); i++) {\n                        if (i \u003c skip) continue;\n                        if (take \u003e= 0 \u0026\u0026 i \u003e= skip + take) break;\n                        _res.add((Integer)list.get(i));\n                    }\n                    addAll(_res);\n                }\n            }.stream().mapToDouble((v)-\u003e((Number)v).doubleValue()).sum()) : (Object)(new java.util.ArrayList\u003cInteger\u003e(){\n                {\n                    java.util.ArrayList\u003cInteger\u003e _tmp = new java.util.ArrayList\u003c\u003e();\n                    for (/*missing*/ x : g.items) {\n                        _tmp.add(x.val);\n                    }\n                    java.util.ArrayList\u003cInteger\u003e list = _tmp;\n                    java.util.ArrayList\u003cInteger\u003e _res = new java.util.ArrayList\u003c\u003e();\n                    int skip = 0;\n                    int take = -1;\n                    for (int i = 0; i \u003c list.size(); i++) {\n                        if (i \u003c skip) continue;\n                        if (take \u003e= 0 \u0026\u0026 i \u003e= skip + take) break;\n                        _res.add((Integer)list.get(i));\n                    }\n                    addAll(_res);\n                }\n            }.stream().mapToDouble((v)-\u003e((Number)v).doubleValue()).sum()))));\n        }\n        addAll(_res);\n    }\n}"
      }
    },
    {
      "kind": "FnDecl",
      "name": "q",
      "type": "String",
      "body": [
        {
          "kind": "If",
          "cond": {
            "kind": "INSTANCE_OF",
            "text": "v instanceof String"
          },
          "then": [
            {
              "kind": "Return",
              "expr": {
                "kind": "Binary",
                "left": {
                  "kind": "Binary",
                  "left": {
                    "kind": "String",
                    "value": "'"
                  },
                  "right": {
                    "kind": "Call",
                    "target": {
                      "kind": "Member",
                      "name": "toString",
                      "expr": {
                        "kind": "Ident",
                        "name": "v"
                      }
                    }
                  },
                  "op": "PLUS"
                },
                "right": {
                  "kind": "String",
                  "value": "'"
                },
                "op": "PLUS"
              }
            }
          ]
        },
        {
          "kind": "Return",
          "expr": {
            "kind": "Call",
            "target": {
              "kind": "Member",
              "name": "valueOf",
              "expr": {
                "kind": "Ident",
                "name": "String"
              }
            },
            "args": [
              {
                "kind": "Ident",
                "name": "v"
              }
            ]
          }
        }
      ],
      "params": [
        {
          "name": "v",
          "type": "Object"
        }
      ]
    },
    {
      "kind": "Print",
      "expr": {
        "kind": "Binary",
        "left": {
          "kind": "Binary",
          "left": {
            "kind": "String",
            "value": "["
          },
          "right": {
            "kind": "Call",
            "target": {
              "kind": "Member",
              "name": "collect",
              "expr": {
                "kind": "Call",
                "target": {
                  "kind": "Member",
                  "name": "map",
                  "expr": {
                    "kind": "Call",
                    "target": {
                      "kind": "Member",
                      "name": "stream",
                      "expr": {
                        "kind": "Cast",
                        "value": "java.util.List\u003c?\u003e",
                        "expr": {
                          "kind": "Ident",
                          "name": "grouped"
                        }
                      }
                    }
                  }
                },
                "args": [
                  {
                    "kind": "MEMBER_REFERENCE",
                    "text": "String::valueOf"
                  }
                ]
              }
            },
            "args": [
              {
                "kind": "Call",
                "target": {
                  "kind": "Member",
                  "name": "joining",
                  "expr": {
                    "kind": "Member",
                    "name": "Collectors",
                    "expr": {
                      "kind": "Member",
                      "name": "stream",
                      "expr": {
                        "kind": "Member",
                        "name": "util",
                        "expr": {
                          "kind": "Ident",
                          "name": "java"
                        }
                      }
                    }
                  }
                },
                "args": [
                  {
                    "kind": "String",
                    "value": ", "
                  }
                ]
              }
            ]
          },
          "op": "PLUS"
        },
        "right": {
          "kind": "String",
          "value": "]"
        },
        "op": "PLUS"
      }
    }
  ]
}
