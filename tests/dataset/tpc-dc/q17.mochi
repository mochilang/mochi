import math

let store_sales = [
  {ss_quantity: 10, ss_sold_date_sk: 1, ss_customer_sk: 1, ss_item_sk: 1, ss_ticket_number: 1, ss_store_sk: 1}
]

let store_returns = [
  {sr_return_quantity: 2, sr_customer_sk: 1, sr_item_sk: 1, sr_ticket_number: 1, sr_returned_date_sk: 2}
]

let catalog_sales = [
  {cs_quantity: 3, cs_bill_customer_sk: 1, cs_item_sk: 1, cs_sold_date_sk: 3}
]

let date_dim = [
  {d_date_sk: 1, d_quarter_name: "2001Q1"},
  {d_date_sk: 2, d_quarter_name: "2001Q2"},
  {d_date_sk: 3, d_quarter_name: "2001Q3"}
]

let store = [{s_store_sk: 1, s_state: "TX"}]
let item = [{i_item_sk: 1, i_item_id: "ITEM1", i_item_desc: "Item 1"}]

fn stddev_samp(xs: list<float>) {
  let m = avg(xs)
  let v = sum(from x in xs select (x - m) * (x - m)) / (len(xs) - 1)
  math.sqrt(v)
}

let joined =
  from ss in store_sales
  join sr in store_returns on ss.ss_customer_sk == sr.sr_customer_sk && ss.ss_item_sk == sr.sr_item_sk && ss.ss_ticket_number == sr.sr_ticket_number
  join cs in catalog_sales on sr.sr_customer_sk == cs.cs_bill_customer_sk && sr.sr_item_sk == cs.cs_item_sk
  join d1 in date_dim on ss.ss_sold_date_sk == d1.d_date_sk
  join d2 in date_dim on sr.sr_returned_date_sk == d2.d_date_sk
  join d3 in date_dim on cs.cs_sold_date_sk == d3.d_date_sk
  join s in store on ss.ss_store_sk == s.s_store_sk
  join i in item on ss.ss_item_sk == i.i_item_sk
  where d1.d_quarter_name == "2001Q1" && d2.d_quarter_name in ["2001Q1","2001Q2","2001Q3"] && d3.d_quarter_name in ["2001Q1","2001Q2","2001Q3"]
  select {i_item_id: i.i_item_id, i_item_desc: i.i_item_desc, s_state: s.s_state, ss_quantity: ss.ss_quantity, sr_qty: sr.sr_return_quantity, cs_qty: cs.cs_quantity}
  |> to_list

let result =
  from j in joined
  group by {id: j.i_item_id, desc: j.i_item_desc, state: j.s_state} into g
  let ssq = from x in g select float(x.ss_quantity)
  let srq = from x in g select float(x.sr_qty)
  let csq = from x in g select float(x.cs_qty)
  select {
    i_item_id: g.key.id,
    i_item_desc: g.key.desc,
    s_state: g.key.state,
    store_sales_quantitycount: len(ssq),
    store_sales_quantityave: avg(ssq),
    store_sales_quantitystdev: if len(ssq) > 1 { stddev_samp(ssq) } else { 0.0 },
    store_sales_quantitycov: if avg(ssq) != 0 { (if len(ssq) > 1 { stddev_samp(ssq) } else { 0.0 }) / avg(ssq) } else { 0.0 },
    store_returns_quantitycount: len(srq),
    store_returns_quantityave: avg(srq),
    store_returns_quantitystdev: if len(srq) > 1 { stddev_samp(srq) } else { 0.0 },
    store_returns_quantitycov: if avg(srq) != 0 { (if len(srq) > 1 { stddev_samp(srq) } else { 0.0 }) / avg(srq) } else { 0.0 },
    catalog_sales_quantitycount: len(csq),
    catalog_sales_quantityave: avg(csq),
    catalog_sales_quantitystdev: if len(csq) > 1 { stddev_samp(csq) } else { 0.0 },
    catalog_sales_quantitycov: if avg(csq) != 0 { (if len(csq) > 1 { stddev_samp(csq) } else { 0.0 }) / avg(csq) } else { 0.0 }
  }
  |> to_list

json(result)

test "TPCDC Q17 statistics" {
  expect result == [
    {
      i_item_id: "ITEM1",
      i_item_desc: "Item 1",
      s_state: "TX",
      store_sales_quantitycount: 1,
      store_sales_quantityave: 10.0,
      store_sales_quantitystdev: 0.0,
      store_sales_quantitycov: 0.0,
      store_returns_quantitycount: 1,
      store_returns_quantityave: 2.0,
      store_returns_quantitystdev: 0.0,
      store_returns_quantitycov: 0.0,
      catalog_sales_quantitycount: 1,
      catalog_sales_quantityave: 3.0,
      catalog_sales_quantitystdev: 0.0,
      catalog_sales_quantitycov: 0.0
    }
  ]
}
