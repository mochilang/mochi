// Sales for frequent items purchased by top customers

type StoreSale { ss_customer_sk: int, ss_item_sk: int, ss_sold_date_sk: int, ss_quantity: int, ss_sales_price: float }
type Customer { c_customer_sk: int, c_last_name: string, c_first_name: string }
type Item { i_item_sk: int, i_item_desc: string }
type DateDim { d_date_sk: int, d_year: int, d_moy: int }
type CatalogSale { cs_bill_customer_sk: int, cs_item_sk: int, cs_sold_date_sk: int, cs_quantity: int, cs_list_price: float }
type WebSale { ws_bill_customer_sk: int, ws_item_sk: int, ws_sold_date_sk: int, ws_quantity: int, ws_list_price: float }

let store_sales = [
  { ss_customer_sk: 1, ss_item_sk: 1, ss_sold_date_sk: 1, ss_quantity: 2, ss_sales_price: 10.0 },
  { ss_customer_sk: 1, ss_item_sk: 1, ss_sold_date_sk: 1, ss_quantity: 2, ss_sales_price: 10.0 },
  { ss_customer_sk: 1, ss_item_sk: 1, ss_sold_date_sk: 1, ss_quantity: 2, ss_sales_price: 10.0 },
  { ss_customer_sk: 1, ss_item_sk: 1, ss_sold_date_sk: 1, ss_quantity: 2, ss_sales_price: 10.0 },
  { ss_customer_sk: 1, ss_item_sk: 1, ss_sold_date_sk: 1, ss_quantity: 2, ss_sales_price: 10.0 },
  // extra sales for a different customer/item that do not qualify
  { ss_customer_sk: 2, ss_item_sk: 2, ss_sold_date_sk: 1, ss_quantity: 1, ss_sales_price: 5.0 },
  { ss_customer_sk: 2, ss_item_sk: 2, ss_sold_date_sk: 2, ss_quantity: 1, ss_sales_price: 5.0 }
  // extra qualifying sale different date
  ,{ ss_customer_sk: 1, ss_item_sk: 1, ss_sold_date_sk: 2, ss_quantity: 1, ss_sales_price: 9.0 }
]

let catalog_sales = [
  { cs_bill_customer_sk: 1, cs_item_sk: 1, cs_sold_date_sk: 1, cs_quantity: 1, cs_list_price: 20.0 },
  { cs_bill_customer_sk: 2, cs_item_sk: 2, cs_sold_date_sk: 2, cs_quantity: 2, cs_list_price: 15.0 }
  ,{ cs_bill_customer_sk: 1, cs_item_sk: 1, cs_sold_date_sk: 1, cs_quantity: 2, cs_list_price: 15.0 }
]

let web_sales = [
  { ws_bill_customer_sk: 1, ws_item_sk: 1, ws_sold_date_sk: 1, ws_quantity: 1, ws_list_price: 30.0 },
  { ws_bill_customer_sk: 2, ws_item_sk: 2, ws_sold_date_sk: 2, ws_quantity: 1, ws_list_price: 8.0 }
  ,{ ws_bill_customer_sk: 1, ws_item_sk: 1, ws_sold_date_sk: 1, ws_quantity: 2, ws_list_price: 25.0 }
]

let customer = [
  { c_customer_sk: 1, c_last_name: "Smith", c_first_name: "Ann" },
  { c_customer_sk: 2, c_last_name: "Doe", c_first_name: "Bob" }
]
let item = [
  { i_item_sk: 1, i_item_desc: "Item1" },
  { i_item_sk: 2, i_item_desc: "Item2" }
]
let date_dim = [
  { d_date_sk: 1, d_year: 2000, d_moy: 1 },
  { d_date_sk: 2, d_year: 2000, d_moy: 2 }
]

let frequent_items =
  from ss in store_sales
  group by { item: ss.ss_item_sk, date: ss.ss_sold_date_sk } into g
  where count(g) > 4
  select g.key.item

let sales_by_customer =
  from ss in store_sales
  group by ss.ss_customer_sk into g
  select { cust: g.key, total: sum(from x in g select x.ss_quantity * x.ss_sales_price) }

let max_sales = max(from s in sales_by_customer select s.total)
let best_customers = from s in sales_by_customer where s.total > 0.95 * max_sales select s.cust

let catalog_and_web =
  from cs in catalog_sales
  join d in date_dim on d.d_date_sk == cs.cs_sold_date_sk
  join i in item on i.i_item_sk == cs.cs_item_sk
  where d.d_year == 2000 && d.d_moy == 1 && cs.cs_item_sk in frequent_items && cs.cs_bill_customer_sk in best_customers
  select cs.cs_quantity * cs.cs_list_price
  union all
  from ws in web_sales
  join d in date_dim on d.d_date_sk == ws.ws_sold_date_sk
  join i in item on i.i_item_sk == ws.ws_item_sk
  where d.d_year == 2000 && d.d_moy == 1 && ws.ws_item_sk in frequent_items && ws.ws_bill_customer_sk in best_customers
  select ws.ws_quantity * ws.ws_list_price

let result = sum(catalog_and_web)

json(result)

test "TPCDC Q23 frequent item sales" {
  expect result == 130.0
}
