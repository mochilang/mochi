func main (regs=30)
L0:
  // let part = [
  Const        r0, [{"p_partkey": 1, "p_type": "PROMO LUXURY"}, {"p_partkey": 2, "p_type": "STANDARD BRASS"}]
L1:
  // let lineitem = [
  Const        r1, [{"l_discount": 0.1, "l_extendedprice": 1000, "l_partkey": 1, "l_shipdate": "1995-09-05"}, {"l_discount": 0, "l_extendedprice": 800, "l_partkey": 2, "l_shipdate": "1995-09-20"}, {"l_discount": 0.2, "l_extendedprice": 500, "l_partkey": 1, "l_shipdate": "1995-10-02"}]
  // let start_date = "1995-09-01"
  Const        r2, "1995-09-01"
  // let end_date = "1995-10-01"
  Const        r3, "1995-10-01"
L12:
  // from l in lineitem
  Const        r4, []
  IterPrep     r5, r1
  Len          r1, r5
  // join p in part on p.p_partkey == l.l_partkey
  IterPrep     r6, r0
  Len          r7, r6
L2:
  // from l in lineitem
  Const        r8, 0
  EqualInt     r9, r1, r8
  JumpIfTrue   r9, L0
  EqualInt     r9, r7, r8
L4:
  JumpIfTrue   r9, L0
L3:
  LessEq       r9, r7, r1
  JumpIfFalse  r9, L1
L10:
  // join p in part on p.p_partkey == l.l_partkey
  MakeMap      r9, 0, r0
  Move         r10, r8
  LessInt      r11, r10, r7
L7:
  JumpIfFalse  r11, L2
L6:
  Index        r11, r6, r10
L9:
  Move         r12, r11
  Const        r13, "p_partkey"
  Index        r14, r12, r13
L14:
  Index        r15, r9, r14
L5:
  Const        r16, nil
  NotEqual     r17, r15, r16
L8:
  JumpIfTrue   r17, L3
  MakeList     r17, 0, r0
  SetIndex     r9, r14, r17
  Index        r15, r9, r14
  Append       r17, r15, r11
  SetIndex     r9, r14, r17
  Const        r17, 1
  AddInt       r10, r10, r17
  Jump         L4
  // from l in lineitem
  Move         r10, r8
  LessInt      r15, r10, r1
  JumpIfFalse  r15, L0
  Index        r15, r5, r10
  // join p in part on p.p_partkey == l.l_partkey
  Const        r14, "l_partkey"
  Index        r11, r15, r14
  // from l in lineitem
  Index        r18, r9, r11
  NotEqual     r11, r18, r16
  JumpIfFalse  r11, L3
  Len          r11, r18
  Move         r9, r10
  LessInt      r19, r9, r11
  JumpIfFalse  r19, L3
  Index        r12, r18, r9
  // where l.l_shipdate >= start_date && l.l_shipdate < end_date
  Const        r11, "l_shipdate"
  Index        r18, r15, r11
  LessEq       r20, r2, r18
  Index        r18, r15, r11
  Less         r21, r18, r3
  Move         r18, r20
  JumpIfFalse  r18, L5
  Move         r18, r21
  JumpIfFalse  r18, L4
  // is_promo: "PROMO" in p.p_type,
  Const        r18, "is_promo"
  Const        r21, "PROMO"
  Const        r20, "p_type"
  Index        r22, r12, r20
  In           r23, r21, r22
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Const        r22, "revenue"
  Const        r24, "l_extendedprice"
  Index        r25, r15, r24
  Const        r26, "l_discount"
  Index        r27, r15, r26
  Sub          r28, r17, r27
  Mul          r27, r25, r28
  // is_promo: "PROMO" in p.p_type,
  Move         r28, r18
  Move         r25, r23
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Move         r23, r22
  Move         r29, r27
  // select {
  MakeMap      r27, 2, r28
  // from l in lineitem
  Append       r4, r4, r27
  AddInt       r9, r9, r17
  Jump         L6
  AddInt       r10, r10, r17
  Jump         L7
  MakeMap      r27, 0, r0
  Move         r29, r8
  LessInt      r23, r29, r1
  JumpIfFalse  r23, L8
  Index        r23, r5, r29
  // join p in part on p.p_partkey == l.l_partkey
  Index        r5, r23, r14
  // from l in lineitem
  Index        r14, r27, r5
  Move         r1, r16
  NotEqual     r16, r14, r1
  JumpIfTrue   r16, L9
  MakeList     r16, 0, r0
  SetIndex     r27, r5, r16
  Index        r14, r27, r5
  Append       r16, r14, r23
  SetIndex     r27, r5, r16
  AddInt       r29, r29, r17
  Jump         L10
  // join p in part on p.p_partkey == l.l_partkey
  Move         r16, r8
  LessInt      r14, r16, r7
  JumpIfFalse  r14, L11
  Index        r12, r6, r16
  Index        r14, r12, r13
  Index        r13, r27, r14
  NotEqual     r14, r13, r1
  JumpIfFalse  r14, L10
  Len          r14, r13
  Move         r1, r16
  LessInt      r27, r1, r14
  JumpIfFalse  r27, L10
  Index        r15, r13, r1
  // where l.l_shipdate >= start_date && l.l_shipdate < end_date
  Index        r27, r15, r11
  LessEq       r14, r2, r27
  Index        r27, r15, r11
  Less         r11, r27, r3
  Move         r27, r14
  JumpIfFalse  r27, L12
  Move         r27, r11
  JumpIfFalse  r27, L13
  // is_promo: "PROMO" in p.p_type,
  Move         r27, r18
  Index        r11, r12, r20
  In           r20, r21, r11
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Move         r11, r22
  Index        r21, r15, r24
  Index        r24, r15, r26
  Sub          r26, r17, r24
  Mul          r24, r21, r26
  // is_promo: "PROMO" in p.p_type,
  Move         r26, r27
  Move         r27, r20
  // revenue: l.l_extendedprice * (1 - l.l_discount)
  Move         r20, r11
  Move         r11, r24
  // select {
  MakeMap      r24, 2, r26
  // from l in lineitem
  Append       r4, r4, r24
L13:
  // join p in part on p.p_partkey == l.l_partkey
  AddInt       r1, r1, r17
  Jump         L14
  AddInt       r16, r16, r17
  Jump         L6
L11:
  // let promo_sum = sum(from x in filtered where x.is_promo select x.revenue)
  Const        r20, []
  Move         r16, r18
  Move         r18, r22
  IterPrep     r22, r4
  Len          r11, r22
  Move         r24, r8
L17:
  LessInt      r27, r24, r11
  JumpIfFalse  r27, L15
  Index        r27, r22, r24
  Index        r22, r27, r16
  JumpIfFalse  r22, L16
  Index        r22, r27, r18
  Append       r20, r20, r22
L16:
  AddInt       r24, r24, r17
  Jump         L17
L15:
  Sum          r22, r20
  // let total_sum = sum(from x in filtered select x.revenue)
  Const        r20, []
  IterPrep     r24, r4
  Len          r4, r24
  Move         r16, r8
L19:
  LessInt      r8, r16, r4
  JumpIfFalse  r8, L18
  Index        r27, r24, r16
  Index        r8, r27, r18
  Append       r20, r20, r8
  AddInt       r16, r16, r17
  Jump         L19
L18:
  Sum          r8, r20
  // let result = 100.0 * promo_sum / total_sum
  Const        r20, 100
  MulFloat     r16, r20, r22
  DivFloat     r20, r16, r8
  // json(result)
  JSON         r20
  // let expected = 100.0 * promo / total  // â‰ˆ 52.94
  Const        r16, 52.94117647058823
  // expect result == expected
  EqualFloat   r8, r20, r16
  Expect       r8
  Return       r0
