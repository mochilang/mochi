// Net paid totals for customers by color and market
import go "strings" as strings

type StoreSale { ss_ticket_number: int, ss_item_sk: int, ss_customer_sk: int, ss_store_sk: int, ss_net_paid: float }
type StoreReturn { sr_ticket_number: int, sr_item_sk: int }
type Store { s_store_sk: int, s_store_name: string, s_market_id: int, s_state: string, s_zip: string }
type Item { i_item_sk: int, i_color: string, i_current_price: float, i_manager_id: int, i_units: string, i_size: string }
type Customer { c_customer_sk: int, c_first_name: string, c_last_name: string, c_current_addr_sk: int, c_birth_country: string }
type CustomerAddress { ca_address_sk: int, ca_state: string, ca_country: string, ca_zip: string }

let store_sales = [
  { ss_ticket_number: 1, ss_item_sk: 1, ss_customer_sk: 1, ss_store_sk: 1, ss_net_paid: 100.0 }
]

let store_returns = [ { sr_ticket_number: 1, sr_item_sk: 1 } ]

let store = [ { s_store_sk: 1, s_store_name: "Store1", s_market_id: 5, s_state: "CA", s_zip: "12345" } ]

let item = [ { i_item_sk: 1, i_color: "RED", i_current_price: 10.0, i_manager_id: 1, i_units: "EA", i_size: "M" } ]

let customer = [ { c_customer_sk: 1, c_first_name: "Ann", c_last_name: "Smith", c_current_addr_sk: 1, c_birth_country: "Canada" } ]

let customer_address = [ { ca_address_sk: 1, ca_state: "CA", ca_country: "USA", ca_zip: "12345" } ]

let ssales =
  from ss in store_sales
  join sr in store_returns on ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk
  join s in store on ss.ss_store_sk == s.s_store_sk
  join i in item on ss.ss_item_sk == i.i_item_sk
  join c in customer on ss.ss_customer_sk == c.c_customer_sk
  join ca in customer_address on c.c_current_addr_sk == ca.ca_address_sk
  where c.c_birth_country != strings.ToUpper(ca.ca_country) && s.s_zip == ca.ca_zip && s.s_market_id == 5
  group by {
    last: c.c_last_name,
    first: c.c_first_name,
    store_name: s.s_store_name,
    color: i.i_color
  } into g
  select {
    c_last_name: g.key.last,
    c_first_name: g.key.first,
    s_store_name: g.key.store_name,
    color: g.key.color,
    netpaid: sum(from x in g select x.ss_net_paid)
  }

let avg_paid = avg(from x in ssales select x.netpaid)

let result =
  from x in ssales
  where x.color == "RED" && x.netpaid > 0.05 * avg_paid
  sort by [x.c_last_name, x.c_first_name, x.s_store_name]
  select { c_last_name: x.c_last_name, c_first_name: x.c_first_name, s_store_name: x.s_store_name, paid: x.netpaid }

json(result)

test "TPCDS Q24 customer net paid" {
  expect result == [ { c_last_name: "Smith", c_first_name: "Ann", s_store_name: "Store1", paid: 100.0 } ]
}
