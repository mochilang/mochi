func main (regs=82)
  // let sales = [
  Const        r0, [{"amount": 30, "mgr": 1}, {"amount": 33, "mgr": 2}]
  // from s in sales
  Const        r1, []
  // group by {mgr: s.mgr} into g
  Const        r2, "mgr"
  // select {mgr: g.key.mgr, sum_sales: sum(from x in g select x.amount)}
  Const        r3, "key"
  Const        r4, "sum_sales"
  Const        r5, "amount"
  // from s in sales
  IterPrep     r6, r0
  Len          r7, r6
  Const        r8, 0
  MakeMap      r9, 0, r0
  Const        r11, []
  Move         r10, r11
L2:
  LessInt      r12, r8, r7
  JumpIfFalse  r12, L0
  Index        r13, r6, r8
  Move         r14, r13
  // group by {mgr: s.mgr} into g
  Const        r15, "mgr"
  Index        r16, r14, r2
  Move         r17, r15
  Move         r18, r16
  MakeMap      r19, 1, r17
  Str          r20, r19
  In           r21, r20, r9
  JumpIfTrue   r21, L1
  // from s in sales
  Const        r22, []
  Const        r23, "__group__"
  Const        r24, true
  // group by {mgr: s.mgr} into g
  Move         r25, r19
  // from s in sales
  Const        r26, "items"
  Move         r27, r22
  Const        r28, "count"
  Const        r29, 0
  Move         r30, r23
  Move         r31, r24
  Move         r32, r3
  Move         r33, r25
  Move         r34, r26
  Move         r35, r27
  Move         r36, r28
  Move         r37, r29
  MakeMap      r38, 4, r30
  SetIndex     r9, r20, r38
  Append       r39, r10, r38
  Move         r10, r39
L1:
  Index        r40, r9, r20
  Index        r41, r40, r26
  Append       r42, r41, r13
  SetIndex     r40, r26, r42
  Index        r43, r40, r28
  Const        r44, 1
  AddInt       r45, r43, r44
  SetIndex     r40, r28, r45
  AddInt       r8, r8, r44
  Jump         L2
L0:
  Move         r46, r29
  Len          r47, r10
L6:
  LessInt      r48, r46, r47
  JumpIfFalse  r48, L3
  Index        r49, r10, r46
  Move         r50, r49
  // select {mgr: g.key.mgr, sum_sales: sum(from x in g select x.amount)}
  Const        r51, "mgr"
  Index        r52, r50, r3
  Index        r53, r52, r2
  Const        r54, "sum_sales"
  Const        r55, []
  IterPrep     r56, r50
  Len          r57, r56
  Move         r58, r29
L5:
  LessInt      r59, r58, r57
  JumpIfFalse  r59, L4
  Index        r60, r56, r58
  Move         r61, r60
  Index        r62, r61, r5
  Append       r63, r55, r62
  Move         r55, r63
  AddInt       r58, r58, r44
  Jump         L5
L4:
  Sum          r64, r55
  Move         r65, r51
  Move         r66, r53
  Move         r67, r54
  Move         r68, r64
  MakeMap      r69, 2, r65
  // from s in sales
  Append       r70, r1, r69
  Move         r1, r70
  AddInt       r46, r46, r44
  Jump         L6
L3:
  // let result = sum(from x in by_mgr select x.sum_sales)
  Const        r71, []
  IterPrep     r72, r1
  Len          r73, r72
  Move         r74, r29
L8:
  LessInt      r75, r74, r73
  JumpIfFalse  r75, L7
  Index        r76, r72, r74
  Move         r61, r76
  Index        r77, r61, r4
  Append       r78, r71, r77
  Move         r71, r78
  AddInt       r74, r74, r44
  Jump         L8
L7:
  Sum          r79, r71
  // json(result)
  JSON         r79
  // expect result == 63
  Const        r80, 63
  Equal        r81, r79, r80
  Expect       r81
  Return       r0
