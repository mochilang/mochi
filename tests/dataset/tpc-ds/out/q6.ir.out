func main (regs=210)
  // let customer_address = []
  Const        r0, []
  // let customer = []
  Const        r1, []
  // let store_sales = []
  Const        r2, []
  // let date_dim = []
  Const        r3, []
  // let item = []
  Const        r4, []
  // from d in date_dim
  Const        r5, []
  // where d.d_year == 1999 && d.d_moy == 5
  Const        r6, "d_year"
  Const        r7, "d_moy"
  // select d.d_month_seq
  Const        r8, "d_month_seq"
  // from d in date_dim
  IterPrep     r9, r3
  Len          r10, r9
  Const        r11, 0
L3:
  LessInt      r13, r11, r10
  JumpIfFalse  r13, L0
  Index        r15, r9, r11
  // where d.d_year == 1999 && d.d_moy == 5
  Const        r16, "d_year"
  Index        r17, r15, r16
  Const        r18, 1999
  Equal        r19, r17, r18
  Const        r20, "d_moy"
  Index        r21, r15, r20
  Const        r22, 5
  Equal        r23, r21, r22
  Move         r24, r19
  JumpIfFalse  r24, L1
  Move         r24, r23
L1:
  JumpIfFalse  r24, L2
  // select d.d_month_seq
  Const        r25, "d_month_seq"
  Index        r26, r15, r25
  // from d in date_dim
  Append       r5, r5, r26
L2:
  Const        r28, 1
  AddInt       r11, r11, r28
  Jump         L3
L0:
  // let target_month_seq = max(
  Max          r29, r5
  // from a in customer_address
  Const        r30, []
  // group by a.ca_state into g
  Const        r31, "ca_state"
  // where d.d_month_seq == target_month_seq &&
  Const        r32, "d_month_seq"
  // i.i_current_price > 1.2 * avg(
  Const        r33, "i_current_price"
  // where j.i_category == i.i_category
  Const        r34, "i_category"
  Const        r35, "i_category"
  // select j.i_current_price
  Const        r36, "i_current_price"
  // select { state: g.key, cnt: count(g) }
  Const        r37, "state"
  Const        r38, "key"
  Const        r39, "cnt"
  // sort by [count(g), g.key]
  Const        r40, "key"
  // from a in customer_address
  MakeMap      r41, 0, r0
  Const        r42, []
  IterPrep     r44, r0
  Len          r45, r44
  Const        r46, 0
L19:
  LessInt      r47, r46, r45
  JumpIfFalse  r47, L4
  Index        r49, r44, r46
  // join c in customer on a.ca_address_sk == c.c_current_addr_sk
  IterPrep     r50, r1
  Len          r51, r50
  Const        r52, 0
L18:
  LessInt      r53, r52, r51
  JumpIfFalse  r53, L5
  Index        r55, r50, r52
  Const        r56, "ca_address_sk"
  Index        r57, r49, r56
  Const        r58, "c_current_addr_sk"
  Index        r59, r55, r58
  Equal        r60, r57, r59
  JumpIfFalse  r60, L6
  // join s in store_sales on c.c_customer_sk == s.ss_customer_sk
  IterPrep     r61, r2
  Len          r62, r61
  Const        r63, 0
L17:
  LessInt      r64, r63, r62
  JumpIfFalse  r64, L6
  Index        r66, r61, r63
  Const        r67, "c_customer_sk"
  Index        r68, r55, r67
  Const        r69, "ss_customer_sk"
  Index        r70, r66, r69
  Equal        r71, r68, r70
  JumpIfFalse  r71, L7
  // join d in date_dim on s.ss_sold_date_sk == d.d_date_sk
  IterPrep     r72, r3
  Len          r73, r72
  Const        r74, 0
L16:
  LessInt      r75, r74, r73
  JumpIfFalse  r75, L7
  Index        r15, r72, r74
  Const        r77, "ss_sold_date_sk"
  Index        r78, r66, r77
  Const        r79, "d_date_sk"
  Index        r80, r15, r79
  Equal        r81, r78, r80
  JumpIfFalse  r81, L8
  // join i in item on s.ss_item_sk == i.i_item_sk
  IterPrep     r82, r4
  Len          r83, r82
  Const        r84, 0
L15:
  LessInt      r85, r84, r83
  JumpIfFalse  r85, L8
  Index        r87, r82, r84
  Const        r88, "ss_item_sk"
  Index        r89, r66, r88
  Const        r90, "i_item_sk"
  Index        r91, r87, r90
  Equal        r92, r89, r91
  JumpIfFalse  r92, L9
  // where d.d_month_seq == target_month_seq &&
  Const        r93, "d_month_seq"
  Index        r94, r15, r93
  // i.i_current_price > 1.2 * avg(
  Const        r95, 1.2
  // from j in item
  Const        r96, []
  // where j.i_category == i.i_category
  Const        r97, "i_category"
  Const        r98, "i_category"
  // select j.i_current_price
  Const        r99, "i_current_price"
  // from j in item
  IterPrep     r100, r4
  Len          r101, r100
  Const        r102, 0
L12:
  LessInt      r104, r102, r101
  JumpIfFalse  r104, L10
  Index        r106, r100, r102
  // where j.i_category == i.i_category
  Const        r107, "i_category"
  Index        r108, r106, r107
  Const        r109, "i_category"
  Index        r110, r87, r109
  Equal        r111, r108, r110
  JumpIfFalse  r111, L11
  // select j.i_current_price
  Const        r112, "i_current_price"
  Index        r113, r106, r112
  // from j in item
  Append       r96, r96, r113
L11:
  Const        r115, 1
  AddInt       r102, r102, r115
  Jump         L12
L10:
  // i.i_current_price > 1.2 * avg(
  Avg          r116, r96
  MulFloat     r117, r95, r116
  Const        r118, "i_current_price"
  Index        r119, r87, r118
  LessFloat    r120, r117, r119
  // where d.d_month_seq == target_month_seq &&
  Equal        r122, r94, r29
  JumpIfFalse  r122, L13
  Move         r122, r120
L13:
  JumpIfFalse  r122, L9
  // from a in customer_address
  Const        r123, "a"
  Move         r124, r49
  Const        r125, "c"
  Move         r126, r55
  Const        r127, "s"
  Move         r128, r66
  Const        r129, "d"
  Move         r130, r15
  Const        r131, "i"
  Move         r132, r87
  MakeMap      r133, 5, r123
  // group by a.ca_state into g
  Const        r134, "ca_state"
  Index        r135, r49, r134
  Str          r136, r135
  In           r137, r136, r41
  JumpIfTrue   r137, L14
  // from a in customer_address
  Const        r138, []
  Const        r139, "__group__"
  Const        r140, true
  Const        r141, "key"
  // group by a.ca_state into g
  Move         r142, r135
  // from a in customer_address
  Const        r143, "items"
  Move         r144, r138
  Const        r145, "count"
  Const        r146, 0
  Move         r147, r139
  Move         r148, r140
  Move         r149, r141
  Move         r150, r142
  Move         r151, r143
  Move         r152, r144
  Move         r153, r145
  Move         r154, r146
  MakeMap      r155, 4, r147
  SetIndex     r41, r136, r155
  Append       r42, r42, r155
L14:
  Const        r157, "items"
  Index        r158, r41, r136
  Index        r159, r158, r157
  Append       r160, r159, r133
  SetIndex     r158, r157, r160
  Const        r161, "count"
  Index        r162, r158, r161
  Const        r163, 1
  AddInt       r164, r162, r163
  SetIndex     r158, r161, r164
L9:
  // join i in item on s.ss_item_sk == i.i_item_sk
  Const        r165, 1
  AddInt       r84, r84, r165
  Jump         L15
L8:
  // join d in date_dim on s.ss_sold_date_sk == d.d_date_sk
  Const        r166, 1
  AddInt       r74, r74, r166
  Jump         L16
L7:
  // join s in store_sales on c.c_customer_sk == s.ss_customer_sk
  Const        r167, 1
  AddInt       r63, r63, r167
  Jump         L17
L6:
  // join c in customer on a.ca_address_sk == c.c_current_addr_sk
  Const        r168, 1
  AddInt       r52, r52, r168
  Jump         L18
L5:
  // from a in customer_address
  Const        r169, 1
  AddInt       r46, r46, r169
  Jump         L19
L4:
  Const        r170, 0
  Len          r172, r42
L21:
  LessInt      r173, r170, r172
  JumpIfFalse  r173, L20
  Index        r175, r42, r170
  // having count(g) >= 10
  Const        r176, "count"
  Index        r177, r175, r176
  Const        r178, 10
  LessEq       r179, r178, r177
  JumpIfFalse  r179, L20
  // select { state: g.key, cnt: count(g) }
  Const        r180, "state"
  Const        r181, "key"
  Index        r182, r175, r181
  Const        r183, "cnt"
  Const        r184, "count"
  Index        r185, r175, r184
  Move         r186, r180
  Move         r187, r182
  Move         r188, r183
  Move         r189, r185
  MakeMap      r190, 2, r186
  // sort by [count(g), g.key]
  Const        r191, "count"
  Index        r193, r175, r191
  Const        r194, "key"
  Index        r196, r175, r194
  MakeList     r198, 2, r193
  // from a in customer_address
  Move         r199, r190
  MakeList     r200, 2, r198
  Append       r30, r30, r200
  Const        r202, 1
  AddInt       r170, r170, r202
  Jump         L21
L20:
  // sort by [count(g), g.key]
  Sort         r30, r30
  // from a in customer_address
  Const        r204, 0
  // take 100
  Const        r205, 100
  // from a in customer_address
  Slice        r30, r30, r204, r205
  // json(result)
  JSON         r30
  // expect len(result) == 0
  Len          r207, r30
  Const        r208, 0
  EqualInt     r209, r207, r208
  Expect       r209
  Return       r0
