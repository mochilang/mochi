func main (regs=87)
  // let web_sales = [
  Const        r0, [{"date": 1, "item": 1, "price": 30.0}, {"date": 2, "item": 1, "price": 20.0}]
  // let store_sales = [
  Const        r1, [{"date": 1, "item": 1, "price": 5.0}, {"date": 2, "item": 1, "price": 19.0}]
  // let dms = 1
  Const        r2, 1
  // let web_cum = cumulative((from w in web_sales sort by w.date select {date: w.date, price: w.price}) as list<{date:int, price:float}>)
  Const        r4, []
  Const        r5, "date"
  Const        r6, "price"
  IterPrep     r7, r0
  Len          r8, r7
  Const        r10, 0
  Move         r9, r10
  LessInt      r11, r9, r8
  JumpIfFalse  r11, L0
  Index        r12, r7, r9
L1:
  Move         r13, r12
  Const        r14, "date"
  Const        r5, "date"
  Index        r15, r13, r5
  Const        r16, "price"
  Const        r6, "price"
  Index        r17, r13, r6
  Move         r18, r14
  Move         r19, r15
  Move         r20, r16
  Move         r21, r17
  MakeMap      r22, 2, r18
  Index        r25, r13, r5
  Move         r23, r25
  Move         r24, r22
  MakeList     r26, 2, r23
  Append       r27, r4, r26
  Move         r4, r27
  Const        r2, 1
  AddInt       r9, r9, r2
  Jump         L1
L0:
  Call         r30, cumulative, r3
  // let store_cum = cumulative((from s in store_sales sort by s.date select {date: s.date, price: s.price}) as list<{date:int, price:float}>)
  Const        r32, []
  Const        r5, "date"
  Const        r6, "price"
  IterPrep     r33, r1
  Len          r34, r33
  Const        r10, 0
  Move         r35, r10
  LessInt      r36, r35, r34
  JumpIfFalse  r36, L2
  Index        r37, r33, r35
  Move         r38, r37
  Const        r39, "date"
  Const        r5, "date"
  Index        r40, r38, r5
L3:
  Const        r41, "price"
  Const        r6, "price"
  Index        r42, r38, r6
  Move         r43, r39
  Move         r44, r40
  Move         r45, r41
  Move         r46, r42
  MakeMap      r47, 2, r43
  Index        r50, r38, r5
  Move         r48, r50
  Move         r49, r47
  MakeList     r51, 2, r48
  Append       r52, r32, r51
  Move         r32, r52
  Const        r2, 1
  AddInt       r35, r35, r2
  Jump         L3
L2:
  // join s in store_cum on w.date == s.date
  IterPrep     r59, r55
  Len          r60, r59
  Const        r5, "date"
  // where w.cum > s.cum
  Const        r61, "cum"
  // select {item_sk: 1, d_date: w.date}
  Const        r62, "item_sk"
  Const        r63, "d_date"
  // from w in web_cum
  Const        r64, 0
  LessInt      r65, r64, r58
  JumpIfFalse  r65, L4
  Index        r66, r57, r64
  Move         r13, r66
  // join s in store_cum on w.date == s.date
  Const        r67, 0
  LessInt      r68, r67, r60
  JumpIfFalse  r68, L5
  Index        r69, r59, r67
  Move         r38, r69
  Const        r5, "date"
  Index        r70, r13, r5
  Index        r71, r38, r5
  Equal        r72, r70, r71
  JumpIfFalse  r72, L6
  // where w.cum > s.cum
  Const        r61, "cum"
  Index        r73, r13, r61
L7:
  Index        r74, r38, r61
  Less         r75, r74, r73
  JumpIfFalse  r75, L6
  // select {item_sk: 1, d_date: w.date}
  Const        r76, "item_sk"
  Const        r2, 1
  Const        r77, "d_date"
  Const        r5, "date"
  Index        r78, r13, r5
  Move         r79, r76
  Move         r80, r2
  Move         r81, r77
  Move         r82, r78
  MakeMap      r83, 2, r79
  // from w in web_cum
  Append       r84, r56, r83
  Move         r56, r84
  // join s in store_cum on w.date == s.date
  AddInt       r67, r67, r2
  Jump         L7

  // fun cumulative(xs: list<{date:int, price:float}>): list<{date:int, cum:float}> {
func cumulative (regs=26)
  // var out = []
  Const        r1, []
  Move         r2, r1
  // var acc = 0.0
  Const        r3, 0.0
  Move         r4, r3
  // for x in xs {
  IterPrep     r5, r0
  Len          r6, r5
  Const        r7, 0
L1:
  LessInt      r8, r7, r6
  JumpIfFalse  r8, L0
  Index        r9, r5, r7
  Move         r10, r9
  // acc = acc + x.price
  Const        r11, "price"
  Index        r12, r10, r11
  AddFloat     r13, r4, r12
  Move         r4, r13
  // out = append(out, {date: x.date, cum: acc})
  Const        r14, "date"
  Const        r15, "date"
  Index        r16, r10, r15
  Const        r17, "cum"
  Move         r18, r14
  Move         r19, r16
  Move         r20, r17
  Move         r21, r4
  MakeMap      r22, 2, r18
  Append       r23, r2, r22
  Move         r2, r23
  // for x in xs {
  Const        r24, 1
  AddInt       r25, r7, r24
  Move         r7, r25
  Jump         L1
L0:
  // return out
  Return       r2
