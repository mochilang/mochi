func main (regs=171)
  // let store_returns = []
  Const        r0, []
  // from sr in store_returns
  Const        r1, []
  // group by {customer_sk: sr.sr_customer_sk, store_sk: sr.sr_store_sk} into g
  Const        r2, "customer_sk"
  Const        r3, "sr_customer_sk"
  Const        r4, "store_sk"
  Const        r5, "sr_store_sk"
  // where d.d_year == 1998
  Const        r6, "d_year"
  // ctr_customer_sk: g.key.customer_sk,
  Const        r7, "ctr_customer_sk"
  Const        r8, "key"
  // ctr_store_sk: g.key.store_sk,
  Const        r9, "ctr_store_sk"
  // ctr_total_return: sum(from x in g select x.sr_return_amt)
  Const        r10, "ctr_total_return"
  Const        r11, "sr_return_amt"
  // from sr in store_returns
  MakeMap      r12, 0, r0
  Const        r13, []
  IterPrep     r15, r0
  Len          r16, r15
  Const        r17, 0
L5:
  LessInt      r18, r17, r16
  JumpIfFalse  r18, L0
  Index        r20, r15, r17
  // join d in date_dim on sr.sr_returned_date_sk == d.d_date_sk
  IterPrep     r21, r0
  Len          r22, r21
  Const        r23, 0
L4:
  LessInt      r24, r23, r22
  JumpIfFalse  r24, L1
  Index        r26, r21, r23
  Const        r27, "sr_returned_date_sk"
  Index        r28, r20, r27
  Const        r29, "d_date_sk"
  Index        r30, r26, r29
  Equal        r31, r28, r30
  JumpIfFalse  r31, L2
  // where d.d_year == 1998
  Index        r32, r26, r6
  Const        r33, 1998
  Equal        r34, r32, r33
  JumpIfFalse  r34, L2
  // from sr in store_returns
  Const        r35, "sr"
  Move         r36, r20
  Const        r37, "d"
  Move         r38, r26
  MakeMap      r39, 2, r35
  // group by {customer_sk: sr.sr_customer_sk, store_sk: sr.sr_store_sk} into g
  Const        r40, "customer_sk"
  Index        r41, r20, r3
  Const        r42, "store_sk"
  Index        r43, r20, r5
  Move         r44, r40
  Move         r45, r41
  Move         r46, r42
  Move         r47, r43
  MakeMap      r48, 2, r44
  Str          r49, r48
  In           r50, r49, r12
  JumpIfTrue   r50, L3
  // from sr in store_returns
  Const        r51, []
  Const        r52, "__group__"
  Const        r53, true
  Const        r54, "key"
  // group by {customer_sk: sr.sr_customer_sk, store_sk: sr.sr_store_sk} into g
  Move         r55, r48
  // from sr in store_returns
  Const        r56, "items"
  Move         r57, r51
  Const        r58, "count"
  Const        r59, 0
  Move         r60, r52
  Move         r61, r53
  Move         r62, r54
  Move         r63, r55
  Move         r64, r56
  Move         r65, r57
  Move         r66, r58
  Move         r67, r59
  MakeMap      r68, 4, r60
  SetIndex     r12, r49, r68
  Append       r13, r13, r68
L3:
  Const        r70, "items"
  Index        r71, r12, r49
  Index        r72, r71, r70
  Append       r73, r72, r39
  SetIndex     r71, r70, r73
  Const        r74, "count"
  Index        r75, r71, r74
  Const        r76, 1
  AddInt       r77, r75, r76
  SetIndex     r71, r74, r77
L2:
  // join d in date_dim on sr.sr_returned_date_sk == d.d_date_sk
  AddInt       r23, r23, r76
  Jump         L4
L1:
  // from sr in store_returns
  AddInt       r17, r17, r76
  Jump         L5
L0:
  Const        r79, 0
  Move         r78, r79
  Len          r80, r13
L9:
  LessInt      r81, r78, r80
  JumpIfFalse  r81, L6
  Index        r83, r13, r78
  // ctr_customer_sk: g.key.customer_sk,
  Const        r84, "ctr_customer_sk"
  Index        r85, r83, r8
  Index        r86, r85, r2
  // ctr_store_sk: g.key.store_sk,
  Const        r87, "ctr_store_sk"
  Index        r88, r83, r8
  Index        r89, r88, r4
  // ctr_total_return: sum(from x in g select x.sr_return_amt)
  Const        r90, "ctr_total_return"
  Const        r91, []
  IterPrep     r92, r83
  Len          r93, r92
  Move         r94, r79
L8:
  LessInt      r95, r94, r93
  JumpIfFalse  r95, L7
  Index        r97, r92, r94
  Index        r98, r97, r11
  Append       r91, r91, r98
  AddInt       r94, r94, r76
  Jump         L8
L7:
  Sum          r100, r91
  // ctr_customer_sk: g.key.customer_sk,
  Move         r101, r84
  Move         r102, r86
  // ctr_store_sk: g.key.store_sk,
  Move         r103, r87
  Move         r104, r89
  // ctr_total_return: sum(from x in g select x.sr_return_amt)
  Move         r105, r90
  Move         r106, r100
  // select {
  MakeMap      r107, 3, r101
  // from sr in store_returns
  Append       r1, r1, r107
  AddInt       r78, r78, r76
  Jump         L9
L6:
  // from ctr1 in customer_total_return
  Const        r109, []
  // s.s_state == "TN"
  Const        r110, "s_state"
  // select {c_customer_id: c.c_customer_id}
  Const        r111, "c_customer_id"
  // from ctr1 in customer_total_return
  IterPrep     r112, r1
  Len          r113, r112
  Move         r114, r79
L20:
  LessInt      r115, r114, r113
  JumpIfFalse  r115, L10
  Index        r117, r112, r114
  // join s in store on ctr1.ctr_store_sk == s.s_store_sk
  IterPrep     r118, r0
  Len          r119, r118
  Const        r120, "s_store_sk"
  Move         r121, r79
L19:
  LessInt      r122, r121, r119
  JumpIfFalse  r122, L11
  Index        r124, r118, r121
  Index        r125, r117, r9
  Index        r126, r124, r120
  Equal        r127, r125, r126
  JumpIfFalse  r127, L12
  // join c in customer on ctr1.ctr_customer_sk == c.c_customer_sk
  IterPrep     r128, r0
  Len          r129, r128
  Const        r130, "c_customer_sk"
  Move         r131, r79
L18:
  LessInt      r132, r131, r129
  JumpIfFalse  r132, L12
  Index        r134, r128, r131
  Index        r135, r117, r7
  Index        r136, r134, r130
  Equal        r137, r135, r136
  JumpIfFalse  r137, L13
  // where ctr1.ctr_total_return > avg(
  Index        r138, r117, r10
  // from ctr2 in customer_total_return
  Const        r139, []
  IterPrep     r140, r1
  Len          r141, r140
  Move         r142, r79
L16:
  LessInt      r143, r142, r141
  JumpIfFalse  r143, L14
  Index        r145, r140, r142
  // where ctr1.ctr_store_sk == ctr2.ctr_store_sk
  Index        r146, r117, r9
  Index        r147, r145, r9
  Equal        r148, r146, r147
  JumpIfFalse  r148, L15
  // select ctr2.ctr_total_return
  Index        r149, r145, r10
  // from ctr2 in customer_total_return
  Append       r139, r139, r149
L15:
  AddInt       r142, r142, r76
  Jump         L16
L14:
  // where ctr1.ctr_total_return > avg(
  Avg          r151, r139
  // ) * 1.2 &&
  Const        r152, 1.2
  MulFloat     r153, r151, r152
  // where ctr1.ctr_total_return > avg(
  LessFloat    r154, r153, r138
  // s.s_state == "TN"
  Index        r155, r124, r110
  Const        r156, "TN"
  Equal        r157, r155, r156
  // ) * 1.2 &&
  JumpIfFalse  r154, L17
  Move         r154, r157
L17:
  // where ctr1.ctr_total_return > avg(
  JumpIfFalse  r154, L13
  // select {c_customer_id: c.c_customer_id}
  Const        r158, "c_customer_id"
  Index        r159, r134, r111
  Move         r160, r158
  Move         r161, r159
  MakeMap      r162, 1, r160
  // sort by c.c_customer_id
  Index        r164, r134, r111
  // from ctr1 in customer_total_return
  Move         r165, r162
  MakeList     r166, 2, r164
  Append       r109, r109, r166
L13:
  // join c in customer on ctr1.ctr_customer_sk == c.c_customer_sk
  Add          r131, r131, r76
  Jump         L18
L12:
  // join s in store on ctr1.ctr_store_sk == s.s_store_sk
  Add          r121, r121, r76
  Jump         L19
L11:
  // from ctr1 in customer_total_return
  AddInt       r114, r114, r76
  Jump         L20
L10:
  // sort by c.c_customer_id
  Sort         r109, r109
  // json(result)
  JSON         r109
  // expect len(result) == 0
  Len          r169, r109
  EqualInt     r170, r169, r79
  Expect       r170
  Return       r0
