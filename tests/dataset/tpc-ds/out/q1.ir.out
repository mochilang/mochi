func main (regs=170)
  // let store_returns = []
  Const        r0, []
  // from sr in store_returns
  Const        r1, []
  // group by {customer_sk: sr.sr_customer_sk, store_sk: sr.sr_store_sk} into g
  Const        r2, "customer_sk"
  Const        r3, "sr_customer_sk"
  Const        r4, "store_sk"
  Const        r5, "sr_store_sk"
  // where d.d_year == 1998
  Const        r6, "d_year"
  // ctr_customer_sk: g.key.customer_sk,
  Const        r7, "ctr_customer_sk"
  Const        r8, "key"
  // ctr_store_sk: g.key.store_sk,
  Const        r9, "ctr_store_sk"
  // ctr_total_return: sum(from x in g select x.sr_return_amt)
  Const        r10, "ctr_total_return"
  Const        r11, "sr_return_amt"
  // from sr in store_returns
  MakeMap      r12, 0, r0
  Move         r13, r0
  IterPrep     r14, r0
  Len          r15, r14
  Const        r16, 0
L5:
  LessInt      r17, r16, r15
  JumpIfFalse  r17, L0
  Index        r18, r14, r16
  Move         r19, r18
  // join d in date_dim on sr.sr_returned_date_sk == d.d_date_sk
  IterPrep     r20, r0
  Len          r21, r20
  Const        r22, 0
L4:
  LessInt      r23, r22, r21
  JumpIfFalse  r23, L1
  Index        r24, r20, r22
  Move         r25, r24
  Const        r26, "sr_returned_date_sk"
  Index        r27, r19, r26
  Const        r28, "d_date_sk"
  Index        r29, r25, r28
  Equal        r30, r27, r29
  JumpIfFalse  r30, L2
  // where d.d_year == 1998
  Index        r31, r25, r6
  Const        r32, 1998
  Equal        r33, r31, r32
  JumpIfFalse  r33, L2
  // from sr in store_returns
  Const        r34, "sr"
  Move         r35, r19
  Const        r36, "d"
  Move         r37, r25
  Move         r38, r34
  Move         r39, r35
  Move         r40, r36
  Move         r41, r37
  MakeMap      r42, 2, r38
  // group by {customer_sk: sr.sr_customer_sk, store_sk: sr.sr_store_sk} into g
  Const        r43, "customer_sk"
  Index        r44, r19, r3
  Const        r45, "store_sk"
  Index        r46, r19, r5
  Move         r47, r43
  Move         r48, r44
  Move         r49, r45
  Move         r50, r46
  MakeMap      r51, 2, r47
  Str          r52, r51
  In           r53, r52, r12
  JumpIfTrue   r53, L3
  // from sr in store_returns
  Const        r54, "__group__"
  Const        r55, true
  // group by {customer_sk: sr.sr_customer_sk, store_sk: sr.sr_store_sk} into g
  Move         r56, r51
  // from sr in store_returns
  Const        r57, "items"
  Move         r58, r0
  Const        r59, "count"
  Const        r60, 0
  Move         r61, r54
  Move         r62, r55
  Move         r63, r8
  Move         r64, r56
  Move         r65, r57
  Move         r66, r58
  Move         r67, r59
  Move         r68, r60
  MakeMap      r69, 4, r61
  SetIndex     r12, r52, r69
  Append       r70, r13, r69
  Move         r13, r70
L3:
  Index        r71, r12, r52
  Index        r72, r71, r57
  Append       r73, r72, r42
  SetIndex     r71, r57, r73
  Index        r74, r71, r59
  Const        r75, 1
  AddInt       r76, r74, r75
  SetIndex     r71, r59, r76
L2:
  // join d in date_dim on sr.sr_returned_date_sk == d.d_date_sk
  AddInt       r22, r22, r75
  Jump         L4
L1:
  // from sr in store_returns
  AddInt       r16, r16, r75
  Jump         L5
L0:
  Move         r77, r60
  Len          r78, r13
L9:
  LessInt      r79, r77, r78
  JumpIfFalse  r79, L6
  Index        r80, r13, r77
  Move         r81, r80
  // ctr_customer_sk: g.key.customer_sk,
  Const        r82, "ctr_customer_sk"
  Index        r83, r81, r8
  Index        r84, r83, r2
  // ctr_store_sk: g.key.store_sk,
  Const        r85, "ctr_store_sk"
  Index        r86, r81, r8
  Index        r87, r86, r4
  // ctr_total_return: sum(from x in g select x.sr_return_amt)
  Const        r88, "ctr_total_return"
  Const        r89, []
  IterPrep     r90, r81
  Len          r91, r90
  Move         r92, r60
L8:
  LessInt      r93, r92, r91
  JumpIfFalse  r93, L7
  Index        r94, r90, r92
  Move         r95, r94
  Index        r96, r95, r11
  Append       r97, r89, r96
  Move         r89, r97
  AddInt       r92, r92, r75
  Jump         L8
L7:
  Sum          r98, r89
  // ctr_customer_sk: g.key.customer_sk,
  Move         r99, r82
  Move         r100, r84
  // ctr_store_sk: g.key.store_sk,
  Move         r101, r85
  Move         r102, r87
  // ctr_total_return: sum(from x in g select x.sr_return_amt)
  Move         r103, r88
  Move         r104, r98
  // select {
  MakeMap      r105, 3, r99
  // from sr in store_returns
  Append       r106, r1, r105
  Move         r1, r106
  AddInt       r77, r77, r75
  Jump         L9
L6:
  // from ctr1 in customer_total_return
  Const        r107, []
  // s.s_state == "TN"
  Const        r108, "s_state"
  // select {c_customer_id: c.c_customer_id}
  Const        r109, "c_customer_id"
  // from ctr1 in customer_total_return
  IterPrep     r110, r1
  Len          r111, r110
  Move         r112, r60
L20:
  LessInt      r113, r112, r111
  JumpIfFalse  r113, L10
  Index        r114, r110, r112
  Move         r115, r114
  // join s in store on ctr1.ctr_store_sk == s.s_store_sk
  IterPrep     r116, r0
  Len          r117, r116
  Const        r118, "s_store_sk"
  Move         r119, r60
L19:
  LessInt      r120, r119, r117
  JumpIfFalse  r120, L11
  Index        r121, r116, r119
  Move         r122, r121
  Index        r123, r115, r9
  Index        r124, r122, r118
  Equal        r125, r123, r124
  JumpIfFalse  r125, L12
  // join c in customer on ctr1.ctr_customer_sk == c.c_customer_sk
  IterPrep     r126, r0
  Len          r127, r126
  Const        r128, "c_customer_sk"
  Move         r129, r60
L18:
  LessInt      r130, r129, r127
  JumpIfFalse  r130, L12
  Index        r131, r126, r129
  Move         r132, r131
  Index        r133, r115, r7
  Index        r134, r132, r128
  Equal        r135, r133, r134
  JumpIfFalse  r135, L13
  // where ctr1.ctr_total_return > avg(
  Index        r136, r115, r10
  // from ctr2 in customer_total_return
  Const        r137, []
  IterPrep     r138, r1
  Len          r139, r138
  Move         r140, r60
L16:
  LessInt      r141, r140, r139
  JumpIfFalse  r141, L14
  Index        r142, r138, r140
  Move         r143, r142
  // where ctr1.ctr_store_sk == ctr2.ctr_store_sk
  Index        r144, r115, r9
  Index        r145, r143, r9
  Equal        r146, r144, r145
  JumpIfFalse  r146, L15
  // select ctr2.ctr_total_return
  Index        r147, r143, r10
  // from ctr2 in customer_total_return
  Append       r148, r137, r147
  Move         r137, r148
L15:
  AddInt       r140, r140, r75
  Jump         L16
L14:
  // where ctr1.ctr_total_return > avg(
  Avg          r149, r137
  // ) * 1.2 &&
  Const        r150, 1.2
  MulFloat     r151, r149, r150
  // where ctr1.ctr_total_return > avg(
  LessFloat    r152, r151, r136
  // s.s_state == "TN"
  Index        r153, r122, r108
  Const        r154, "TN"
  Equal        r155, r153, r154
  // ) * 1.2 &&
  Move         r156, r152
  JumpIfFalse  r156, L17
  Move         r156, r155
L17:
  // where ctr1.ctr_total_return > avg(
  JumpIfFalse  r156, L13
  // select {c_customer_id: c.c_customer_id}
  Const        r157, "c_customer_id"
  Index        r158, r132, r109
  Move         r159, r157
  Move         r160, r158
  MakeMap      r161, 1, r159
  // sort by c.c_customer_id
  Index        r162, r132, r109
  Move         r163, r162
  // from ctr1 in customer_total_return
  Move         r164, r161
  MakeList     r165, 2, r163
  Append       r166, r107, r165
  Move         r107, r166
L13:
  // join c in customer on ctr1.ctr_customer_sk == c.c_customer_sk
  Add          r129, r129, r75
  Jump         L18
L12:
  // join s in store on ctr1.ctr_store_sk == s.s_store_sk
  Add          r119, r119, r75
  Jump         L19
L11:
  // from ctr1 in customer_total_return
  AddInt       r112, r112, r75
  Jump         L20
L10:
  // sort by c.c_customer_id
  Sort         r167, r107
  // from ctr1 in customer_total_return
  Move         r107, r167
  // json(result)
  JSON         r107
  // expect len(result) == 0
  Len          r168, r107
  EqualInt     r169, r168, r60
  Expect       r169
  Return       r0
