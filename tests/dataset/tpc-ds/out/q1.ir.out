func main (regs=175)
  // let store_returns = []
  Const        r0, []
  // let date_dim = []
  Move         r1, r0
  // let store = []
  Move         r2, r0
  // let customer = []
  Move         r3, r2
  // from sr in store_returns
  Move         r4, r0
  // group by {customer_sk: sr.sr_customer_sk, store_sk: sr.sr_store_sk} into g
  Const        r5, "customer_sk"
  Const        r6, "sr_customer_sk"
  Const        r7, "store_sk"
  Const        r8, "sr_store_sk"
  // where d.d_year == 1998
  Const        r9, "d_year"
  // ctr_customer_sk: g.key.customer_sk,
  Const        r10, "ctr_customer_sk"
  Const        r11, "key"
  // ctr_store_sk: g.key.store_sk,
  Const        r12, "ctr_store_sk"
  // ctr_total_return: sum(from x in g select x.sr_return_amt)
  Const        r13, "ctr_total_return"
  Const        r14, "sr_return_amt"
  // from sr in store_returns
  MakeMap      r15, 0, r0
  Move         r16, r4
  IterPrep     r18, r0
  Len          r19, r18
  Const        r20, 0
L1:
  LessInt      r21, r20, r19
  JumpIfFalse  r21, L0
  Index        r23, r18, r20
  // join d in date_dim on sr.sr_returned_date_sk == d.d_date_sk
  IterPrep     r24, r1
  Len          r25, r24
  Move         r26, r20
L2:
  LessInt      r27, r26, r25
  JumpIfFalse  r27, L1
  Index        r29, r24, r26
  Const        r30, "sr_returned_date_sk"
  Index        r31, r23, r30
  Const        r32, "d_date_sk"
  Index        r33, r29, r32
  Equal        r34, r31, r33
  JumpIfFalse  r34, L2
  // where d.d_year == 1998
  Index        r35, r29, r9
  Const        r36, 1998
  Equal        r37, r35, r36
  JumpIfFalse  r37, L2
  // from sr in store_returns
  Const        r38, "sr"
  Move         r39, r23
  Const        r40, "d"
  Move         r41, r29
  MakeMap      r42, 2, r38
  // group by {customer_sk: sr.sr_customer_sk, store_sk: sr.sr_store_sk} into g
  Move         r43, r5
  Index        r44, r23, r6
  Move         r45, r7
  Index        r46, r23, r8
  Move         r47, r43
  Move         r48, r44
  Move         r49, r45
  Move         r50, r46
  MakeMap      r51, 2, r47
  Str          r52, r51
  In           r53, r52, r15
  JumpIfTrue   r53, L3
  // from sr in store_returns
  Move         r54, r4
  Const        r55, "__group__"
  Const        r56, true
  Move         r57, r11
  // group by {customer_sk: sr.sr_customer_sk, store_sk: sr.sr_store_sk} into g
  Move         r58, r51
  // from sr in store_returns
  Const        r59, "items"
  Move         r60, r54
  Const        r61, "count"
  Move         r62, r20
  Move         r63, r55
  Move         r64, r56
  Move         r65, r57
  Move         r66, r58
  Move         r67, r59
  Move         r68, r60
  Move         r69, r61
  Move         r70, r62
  MakeMap      r71, 4, r63
  SetIndex     r15, r52, r71
  Append       r16, r16, r71
L3:
  Move         r73, r59
  Index        r74, r15, r52
  Index        r75, r74, r73
  Append       r76, r75, r42
  SetIndex     r74, r73, r76
  Move         r77, r61
  Index        r78, r74, r77
  Const        r79, 1
  AddInt       r80, r78, r79
  SetIndex     r74, r77, r80
  // join d in date_dim on sr.sr_returned_date_sk == d.d_date_sk
  Jump         L2
L0:
  // from sr in store_returns
  Move         r82, r62
  Move         r81, r82
  Len          r83, r16
L7:
  LessInt      r84, r81, r83
  JumpIfFalse  r84, L4
  Index        r86, r16, r81
  // ctr_customer_sk: g.key.customer_sk,
  Move         r87, r10
  Index        r88, r86, r11
  Index        r89, r88, r5
  // ctr_store_sk: g.key.store_sk,
  Move         r90, r12
  Index        r91, r86, r11
  Index        r92, r91, r7
  // ctr_total_return: sum(from x in g select x.sr_return_amt)
  Move         r93, r13
  Move         r94, r54
  IterPrep     r95, r86
  Len          r96, r95
  Move         r97, r82
L6:
  LessInt      r98, r97, r96
  JumpIfFalse  r98, L5
  Index        r100, r95, r97
  Index        r101, r100, r14
  Append       r94, r94, r101
  AddInt       r97, r97, r79
  Jump         L6
L5:
  Sum          r103, r94
  // ctr_customer_sk: g.key.customer_sk,
  Move         r104, r87
  Move         r105, r89
  // ctr_store_sk: g.key.store_sk,
  Move         r106, r90
  Move         r107, r92
  // ctr_total_return: sum(from x in g select x.sr_return_amt)
  Move         r108, r93
  Move         r109, r103
  // select {
  MakeMap      r110, 3, r104
  // from sr in store_returns
  Append       r4, r4, r110
  AddInt       r81, r81, r79
  Jump         L7
L4:
  // from ctr1 in customer_total_return
  Move         r112, r0
  // s.s_state == "TN"
  Const        r113, "s_state"
  // select {c_customer_id: c.c_customer_id}
  Const        r114, "c_customer_id"
  // from ctr1 in customer_total_return
  IterPrep     r115, r4
  Len          r116, r115
  Move         r117, r82
L18:
  LessInt      r118, r117, r116
  JumpIfFalse  r118, L8
  Index        r120, r115, r117
  // join s in store on ctr1.ctr_store_sk == s.s_store_sk
  IterPrep     r121, r2
  Len          r122, r121
  Const        r123, "s_store_sk"
  Move         r124, r82
L17:
  LessInt      r125, r124, r122
  JumpIfFalse  r125, L9
  Index        r127, r121, r124
  Index        r128, r120, r12
  Index        r129, r127, r123
  Equal        r130, r128, r129
  JumpIfFalse  r130, L10
  // join c in customer on ctr1.ctr_customer_sk == c.c_customer_sk
  IterPrep     r131, r3
  Len          r132, r131
  Const        r133, "c_customer_sk"
  Move         r134, r82
L16:
  LessInt      r135, r134, r132
  JumpIfFalse  r135, L10
  Index        r137, r131, r134
  Index        r138, r120, r10
  Index        r139, r137, r133
  Equal        r140, r138, r139
  JumpIfFalse  r140, L11
  // where ctr1.ctr_total_return > avg(
  Index        r141, r120, r13
  // from ctr2 in customer_total_return
  Move         r142, r112
  IterPrep     r143, r4
  Len          r144, r143
  Move         r145, r82
L14:
  LessInt      r146, r145, r144
  JumpIfFalse  r146, L12
  Index        r148, r143, r145
  // where ctr1.ctr_store_sk == ctr2.ctr_store_sk
  Index        r149, r120, r12
  Index        r150, r148, r12
  Equal        r151, r149, r150
  JumpIfFalse  r151, L13
  // select ctr2.ctr_total_return
  Index        r152, r148, r13
  // from ctr2 in customer_total_return
  Append       r142, r142, r152
L13:
  AddInt       r145, r145, r79
  Jump         L14
L12:
  // where ctr1.ctr_total_return > avg(
  Avg          r154, r142
  // ) * 1.2 &&
  Const        r155, 1.2
  MulFloat     r156, r154, r155
  // where ctr1.ctr_total_return > avg(
  LessFloat    r157, r156, r141
  // s.s_state == "TN"
  Index        r158, r127, r113
  Const        r159, "TN"
  Equal        r160, r158, r159
  // ) * 1.2 &&
  Move         r161, r157
  JumpIfFalse  r161, L15
  Move         r161, r160
L15:
  // where ctr1.ctr_total_return > avg(
  JumpIfFalse  r161, L11
  // select {c_customer_id: c.c_customer_id}
  Move         r162, r114
  Index        r163, r137, r114
  Move         r164, r162
  Move         r165, r163
  MakeMap      r166, 1, r164
  // sort by c.c_customer_id
  Index        r168, r137, r114
  // from ctr1 in customer_total_return
  Move         r169, r166
  MakeList     r170, 2, r168
  Append       r112, r112, r170
L11:
  // join c in customer on ctr1.ctr_customer_sk == c.c_customer_sk
  Add          r134, r134, r79
  Jump         L16
L10:
  // join s in store on ctr1.ctr_store_sk == s.s_store_sk
  Add          r124, r124, r79
  Jump         L17
L9:
  // from ctr1 in customer_total_return
  AddInt       r117, r117, r79
  Jump         L18
L8:
  // sort by c.c_customer_id
  Sort         r112, r112
  // json(result)
  JSON         r112
  // expect result == []
  Equal        r174, r112, r0
  Expect       r174
  Return       r0
