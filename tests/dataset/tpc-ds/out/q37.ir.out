func main (regs=164)
  // let item = [
  Const        r0, [{"i_current_price": 30, "i_item_desc": "Item1", "i_item_id": "I1", "i_item_sk": 1, "i_manufact_id": 800}, {"i_current_price": 60, "i_item_desc": "Item2", "i_item_id": "I2", "i_item_sk": 2, "i_manufact_id": 801}]
  // let inventory = [
  Const        r1, [{"inv_date_sk": 1, "inv_item_sk": 1, "inv_quantity_on_hand": 200, "inv_warehouse_sk": 1}, {"inv_date_sk": 1, "inv_item_sk": 2, "inv_quantity_on_hand": 300, "inv_warehouse_sk": 1}]
  // let date_dim = [
  Const        r2, [{"d_date": "2000-01-15", "d_date_sk": 1}]
  // let catalog_sales = [
  Const        r3, [{"cs_item_sk": 1, "cs_sold_date_sk": 1}]
  // from i in item
  Const        r4, []
  // group by {id: i.i_item_id, desc: i.i_item_desc, price: i.i_current_price} into g
  Const        r5, "id"
  Const        r6, "i_item_id"
  Const        r7, "desc"
  Const        r8, "i_item_desc"
  Const        r9, "price"
  Const        r10, "i_current_price"
  // where i.i_current_price >= 20 && i.i_current_price <= 50 && i.i_manufact_id >= 800 && i.i_manufact_id <= 803 && inv.inv_quantity_on_hand >= 100 && inv.inv_quantity_on_hand <= 500
  Const        r11, "i_manufact_id"
  Const        r12, "inv_quantity_on_hand"
  // select {i_item_id: g.key.id, i_item_desc: g.key.desc, i_current_price: g.key.price}
  Const        r13, "key"
  // from i in item
  MakeMap      r14, 0, r0
  Const        r16, []
  Move         r15, r16
  IterPrep     r17, r0
  Len          r18, r17
  Const        r19, 0
L14:
  LessInt      r20, r19, r18
  JumpIfFalse  r20, L0
  Index        r21, r17, r19
  Move         r22, r21
  // join inv in inventory on i.i_item_sk == inv.inv_item_sk
  IterPrep     r23, r1
  Len          r24, r23
  Const        r25, 0
L13:
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L1
  Index        r27, r23, r25
  Move         r28, r27
  Const        r29, "i_item_sk"
  Index        r30, r22, r29
  Const        r31, "inv_item_sk"
  Index        r32, r28, r31
  Equal        r33, r30, r32
  JumpIfFalse  r33, L2
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  IterPrep     r34, r2
  Len          r35, r34
  Const        r36, 0
L12:
  LessInt      r37, r36, r35
  JumpIfFalse  r37, L2
  Index        r38, r34, r36
  Move         r39, r38
  Const        r40, "inv_date_sk"
  Index        r41, r28, r40
  Const        r42, "d_date_sk"
  Index        r43, r39, r42
  Equal        r44, r41, r43
  JumpIfFalse  r44, L3
  // join cs in catalog_sales on cs.cs_item_sk == i.i_item_sk
  IterPrep     r45, r3
  Len          r46, r45
  Const        r47, 0
L11:
  LessInt      r48, r47, r46
  JumpIfFalse  r48, L3
  Index        r49, r45, r47
  Move         r50, r49
  Const        r51, "cs_item_sk"
  Index        r52, r50, r51
  Index        r53, r22, r29
  Equal        r54, r52, r53
  JumpIfFalse  r54, L4
  // where i.i_current_price >= 20 && i.i_current_price <= 50 && i.i_manufact_id >= 800 && i.i_manufact_id <= 803 && inv.inv_quantity_on_hand >= 100 && inv.inv_quantity_on_hand <= 500
  Index        r55, r22, r10
  Const        r56, 20
  LessEq       r57, r56, r55
  Index        r58, r22, r10
  Const        r59, 50
  LessEq       r60, r58, r59
  Index        r61, r22, r11
  Const        r62, 800
  LessEq       r63, r62, r61
  Index        r64, r22, r11
  Const        r65, 803
  LessEq       r66, r64, r65
  Index        r67, r28, r12
  Const        r68, 100
  LessEq       r69, r68, r67
  Index        r70, r28, r12
  Const        r71, 500
  LessEq       r72, r70, r71
  Move         r73, r57
  JumpIfFalse  r73, L5
  Move         r73, r60
L5:
  Move         r74, r73
  JumpIfFalse  r74, L6
  Move         r74, r63
L6:
  Move         r75, r74
  JumpIfFalse  r75, L7
  Move         r75, r66
L7:
  Move         r76, r75
  JumpIfFalse  r76, L8
  Move         r76, r69
L8:
  Move         r77, r76
  JumpIfFalse  r77, L9
  Move         r77, r72
L9:
  JumpIfFalse  r77, L4
  // from i in item
  Const        r78, "i"
  Move         r79, r22
  Const        r80, "inv"
  Move         r81, r28
  Const        r82, "d"
  Move         r83, r39
  Const        r84, "cs"
  Move         r85, r50
  Move         r86, r78
  Move         r87, r79
  Move         r88, r80
  Move         r89, r81
  Move         r90, r82
  Move         r91, r83
  Move         r92, r84
  Move         r93, r85
  MakeMap      r94, 4, r86
  // group by {id: i.i_item_id, desc: i.i_item_desc, price: i.i_current_price} into g
  Const        r95, "id"
  Index        r96, r22, r6
  Const        r97, "desc"
  Index        r98, r22, r8
  Const        r99, "price"
  Index        r100, r22, r10
  Move         r101, r95
  Move         r102, r96
  Move         r103, r97
  Move         r104, r98
  Move         r105, r99
  Move         r106, r100
  MakeMap      r107, 3, r101
  Str          r108, r107
  In           r109, r108, r14
  JumpIfTrue   r109, L10
  // from i in item
  Const        r110, []
  Const        r111, "__group__"
  Const        r112, true
  // group by {id: i.i_item_id, desc: i.i_item_desc, price: i.i_current_price} into g
  Move         r113, r107
  // from i in item
  Const        r114, "items"
  Move         r115, r110
  Const        r116, "count"
  Const        r117, 0
  Move         r118, r111
  Move         r119, r112
  Move         r120, r13
  Move         r121, r113
  Move         r122, r114
  Move         r123, r115
  Move         r124, r116
  Move         r125, r117
  MakeMap      r126, 4, r118
  SetIndex     r14, r108, r126
  Append       r127, r15, r126
  Move         r15, r127
L10:
  Index        r128, r14, r108
  Index        r129, r128, r114
  Append       r130, r129, r94
  SetIndex     r128, r114, r130
  Index        r131, r128, r116
  Const        r132, 1
  AddInt       r133, r131, r132
  SetIndex     r128, r116, r133
L4:
  // join cs in catalog_sales on cs.cs_item_sk == i.i_item_sk
  AddInt       r47, r47, r132
  Jump         L11
L3:
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  AddInt       r36, r36, r132
  Jump         L12
L2:
  // join inv in inventory on i.i_item_sk == inv.inv_item_sk
  AddInt       r25, r25, r132
  Jump         L13
L1:
  // from i in item
  AddInt       r19, r19, r132
  Jump         L14
L0:
  Move         r134, r117
  Len          r135, r15
L16:
  LessInt      r136, r134, r135
  JumpIfFalse  r136, L15
  Index        r137, r15, r134
  Move         r138, r137
  // select {i_item_id: g.key.id, i_item_desc: g.key.desc, i_current_price: g.key.price}
  Const        r139, "i_item_id"
  Index        r140, r138, r13
  Index        r141, r140, r5
  Const        r142, "i_item_desc"
  Index        r143, r138, r13
  Index        r144, r143, r7
  Const        r145, "i_current_price"
  Index        r146, r138, r13
  Index        r147, r146, r9
  Move         r148, r139
  Move         r149, r141
  Move         r150, r142
  Move         r151, r144
  Move         r152, r145
  Move         r153, r147
  MakeMap      r154, 3, r148
  // sort by g.key.id
  Index        r155, r138, r13
  Index        r156, r155, r5
  Move         r157, r156
  // from i in item
  Move         r158, r154
  MakeList     r159, 2, r157
  Append       r160, r4, r159
  Move         r4, r160
  AddInt       r134, r134, r132
  Jump         L16
L15:
  // sort by g.key.id
  Sort         r161, r4
  // from i in item
  Move         r4, r161
  // json(result)
  JSON         r4
  // expect result == [{i_item_id: "I1", i_item_desc: "Item1", i_current_price: 30.0}]
  Const        r162, [{"i_current_price": 30, "i_item_desc": "Item1", "i_item_id": "I1"}]
  Equal        r163, r4, r162
  Expect       r163
  Return       r0
