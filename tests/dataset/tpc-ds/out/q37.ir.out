func main (regs=54)
  // let item = [
  Const        r0, [{"i_current_price": 30.0, "i_item_desc": "Item1", "i_item_id": "I1", "i_item_sk": 1, "i_manufact_id": 800}, {"i_current_price": 60.0, "i_item_desc": "Item2", "i_item_id": "I2", "i_item_sk": 2, "i_manufact_id": 801}]
L8:
  // let inventory = [
  Const        r1, [{"inv_date_sk": 1, "inv_item_sk": 1, "inv_quantity_on_hand": 200, "inv_warehouse_sk": 1}, {"inv_date_sk": 1, "inv_item_sk": 2, "inv_quantity_on_hand": 300, "inv_warehouse_sk": 1}]
L3:
  // let date_dim = [
  Const        r2, [{"d_date": "2000-01-15", "d_date_sk": 1}]
  // let catalog_sales = [
  Const        r3, [{"cs_item_sk": 1, "cs_sold_date_sk": 1}]
  // from i in item
  Const        r4, []
  // group by {id: i.i_item_id, desc: i.i_item_desc, price: i.i_current_price} into g
  Const        r5, "id"
  Const        r6, "i_item_id"
  Const        r7, "desc"
  Const        r8, "i_item_desc"
  Const        r9, "price"
  Const        r10, "i_current_price"
  // where i.i_current_price >= 20 && i.i_current_price <= 50 && i.i_manufact_id >= 800 && i.i_manufact_id <= 803 && inv.inv_quantity_on_hand >= 100 && inv.inv_quantity_on_hand <= 500
  Const        r11, "i_manufact_id"
  Const        r12, "inv_quantity_on_hand"
  // select {i_item_id: g.key.id, i_item_desc: g.key.desc, i_current_price: g.key.price}
  Const        r13, "key"
L2:
  // from i in item
  MakeMap      r14, 0, r0
  Const        r15, []
  Move         r16, r15
  IterPrep     r17, r0
  Len          r18, r17
  Const        r19, 0
L9:
  LessInt      r20, r19, r18
  JumpIfFalse  r20, L0
L1:
  Index        r18, r17, r19
L7:
  Move         r17, r18
  // join inv in inventory on i.i_item_sk == inv.inv_item_sk
  IterPrep     r18, r1
L6:
  Len          r1, r18
  Const        r21, 0
  LessInt      r22, r21, r1
  JumpIfFalse  r22, L1
  Index        r1, r18, r21
  Move         r22, r1
  Const        r18, "i_item_sk"
  Index        r23, r17, r18
  Const        r24, "inv_item_sk"
  Index        r25, r22, r24
  Equal        r24, r23, r25
  JumpIfFalse  r24, L2
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  IterPrep     r23, r2
  Len          r25, r23
  Const        r24, 0
  LessInt      r2, r24, r25
  JumpIfFalse  r2, L2
  Index        r25, r23, r24
  Move         r2, r25
  Const        r23, "inv_date_sk"
  Index        r25, r22, r23
L4:
  Const        r26, "d_date_sk"
  Index        r27, r2, r26
  Equal        r26, r25, r27
L5:
  JumpIfFalse  r26, L3
  // join cs in catalog_sales on cs.cs_item_sk == i.i_item_sk
  IterPrep     r25, r3
  Len          r27, r25
  Const        r26, 0
  LessInt      r3, r26, r27
  JumpIfFalse  r3, L3
  Index        r27, r25, r26
  Move         r3, r27
  Const        r25, "cs_item_sk"
  Index        r27, r3, r25
  Index        r25, r17, r18
  Equal        r18, r27, r25
  JumpIfFalse  r18, L4
  // where i.i_current_price >= 20 && i.i_current_price <= 50 && i.i_manufact_id >= 800 && i.i_manufact_id <= 803 && inv.inv_quantity_on_hand >= 100 && inv.inv_quantity_on_hand <= 500
  Index        r27, r17, r10
  Const        r18, 20
  LessEq       r28, r18, r27
  Index        r27, r17, r10
  Const        r18, 50
  LessEq       r29, r27, r18
  Index        r27, r17, r11
  Const        r18, 800
  LessEq       r30, r18, r27
  Index        r27, r17, r11
  Const        r18, 803
  LessEq       r11, r27, r18
  Index        r27, r22, r12
  Const        r18, 100
  LessEq       r31, r18, r27
  Index        r27, r22, r12
  Const        r18, 500
  LessEq       r12, r27, r18
  Move         r27, r28
  JumpIfFalse  r27, L3
  Move         r27, r29
  JumpIfFalse  r27, L3
  Move         r27, r30
  JumpIfFalse  r27, L3
  Move         r27, r11
  JumpIfFalse  r27, L3
  Move         r27, r31
  JumpIfFalse  r27, L3
  Move         r27, r12
  JumpIfFalse  r27, L4
  // from i in item
  Const        r18, "i"
  Move         r28, r17
  Const        r29, "inv"
  Move         r30, r22
  Const        r11, "d"
  Move         r31, r2
  Const        r12, "cs"
  Move         r27, r3
  Move         r32, r18
  Move         r33, r28
  Move         r34, r29
  Move         r35, r30
  Move         r36, r11
  Move         r37, r31
  Move         r38, r12
  Move         r39, r27
  MakeMap      r22, 4, r32
  // group by {id: i.i_item_id, desc: i.i_item_desc, price: i.i_current_price} into g
  Const        r2, "id"
  Index        r3, r17, r6
  Const        r18, "desc"
  Index        r28, r17, r8
  Const        r29, "price"
  Index        r30, r17, r10
  Move         r32, r2
  Move         r33, r3
  Move         r34, r18
  Move         r35, r28
  Move         r36, r29
  Move         r37, r30
  MakeMap      r11, 3, r32
  Str          r31, r11
  In           r12, r31, r14
  JumpIfTrue   r12, L5
  // from i in item
  Const        r27, "__group__"
  Const        r38, true
  // group by {id: i.i_item_id, desc: i.i_item_desc, price: i.i_current_price} into g
  Move         r39, r11
  // from i in item
  Const        r6, "items"
  Move         r8, r15
  Const        r10, "count"
  Const        r17, 0
  Move         r40, r27
  Move         r41, r38
  Move         r42, r13
  Move         r43, r39
  Move         r44, r6
  Move         r45, r8
  Move         r46, r10
  Move         r47, r17
  MakeMap      r2, 4, r40
  SetIndex     r14, r31, r2
  Append       r3, r16, r2
  Move         r16, r3
  Index        r18, r14, r31
  Index        r28, r18, r6
  Append       r29, r28, r22
  SetIndex     r18, r6, r29
  Index        r30, r18, r10
  Const        r32, 1
  AddInt       r33, r30, r32
  SetIndex     r18, r10, r33
  // join cs in catalog_sales on cs.cs_item_sk == i.i_item_sk
  AddInt       r26, r26, r32
  Jump         L6
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  AddInt       r24, r24, r32
  Jump         L7
  // join inv in inventory on i.i_item_sk == inv.inv_item_sk
  AddInt       r21, r21, r32
  Jump         L8
  // from i in item
  AddInt       r19, r19, r32
  Jump         L9
L0:
  Move         r34, r17
  Len          r35, r16
L11:
  LessInt      r36, r34, r35
  JumpIfFalse  r36, L10
  Index        r37, r16, r34
  Move         r12, r37
  // select {i_item_id: g.key.id, i_item_desc: g.key.desc, i_current_price: g.key.price}
  Const        r11, "i_item_id"
  Index        r15, r12, r13
  Index        r27, r15, r5
  Const        r38, "i_item_desc"
  Index        r39, r12, r13
  Index        r8, r39, r7
  Const        r40, "i_current_price"
  Index        r41, r12, r13
  Index        r42, r41, r9
  Move         r48, r11
  Move         r49, r27
  Move         r50, r38
  Move         r51, r8
  Move         r52, r40
  Move         r53, r42
  MakeMap      r43, 3, r48
  // sort by g.key.id
  Index        r44, r12, r13
  Index        r45, r44, r5
  Move         r46, r45
  // from i in item
  Move         r47, r43
  MakeList     r2, 2, r46
  Append       r3, r4, r2
  Move         r4, r3
  AddInt       r34, r34, r32
  Jump         L11
L10:
  // sort by g.key.id
  Sort         r14, r4
  // from i in item
  Move         r4, r14
  // json(result)
  JSON         r4
  // expect result == [{i_item_id: "I1", i_item_desc: "Item1", i_current_price: 30.0}]
  Const        r31, [{"i_current_price": 30.0, "i_item_desc": "Item1", "i_item_id": "I1"}]
  Equal        r22, r4, r31
  Expect       r22
  Return       r0
