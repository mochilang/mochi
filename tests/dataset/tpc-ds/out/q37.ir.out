func main (regs=155)
  // let item = [
  Const        r0, [{"i_current_price": 30, "i_item_desc": "Item1", "i_item_id": "I1", "i_item_sk": 1, "i_manufact_id": 800}, {"i_current_price": 60, "i_item_desc": "Item2", "i_item_id": "I2", "i_item_sk": 2, "i_manufact_id": 801}]
  // let inventory = [
  Const        r1, [{"inv_date_sk": 1, "inv_item_sk": 1, "inv_quantity_on_hand": 200, "inv_warehouse_sk": 1}, {"inv_date_sk": 1, "inv_item_sk": 2, "inv_quantity_on_hand": 300, "inv_warehouse_sk": 1}]
  // let date_dim = [
  Const        r2, [{"d_date": "2000-01-15", "d_date_sk": 1}]
  // let catalog_sales = [
  Const        r3, [{"cs_item_sk": 1, "cs_sold_date_sk": 1}]
  // from i in item
  Const        r4, []
  // group by {id: i.i_item_id, desc: i.i_item_desc, price: i.i_current_price} into g
  Const        r5, "id"
  Const        r6, "i_item_id"
  Const        r7, "desc"
  Const        r8, "i_item_desc"
  Const        r9, "price"
  Const        r10, "i_current_price"
  // where i.i_current_price >= 20 && i.i_current_price <= 50 && i.i_manufact_id >= 800 && i.i_manufact_id <= 803 && inv.inv_quantity_on_hand >= 100 && inv.inv_quantity_on_hand <= 500
  Const        r11, "i_manufact_id"
  Const        r12, "inv_quantity_on_hand"
  // select {i_item_id: g.key.id, i_item_desc: g.key.desc, i_current_price: g.key.price}
  Const        r13, "key"
  // from i in item
  MakeMap      r14, 0, r0
  Const        r15, []
  IterPrep     r17, r0
  Len          r18, r17
  Const        r19, 0
L10:
  LessInt      r20, r19, r18
  JumpIfFalse  r20, L0
  Index        r22, r17, r19
  // join inv in inventory on i.i_item_sk == inv.inv_item_sk
  IterPrep     r23, r1
  Len          r24, r23
  Const        r25, 0
L9:
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L1
  Index        r28, r23, r25
  Const        r29, "i_item_sk"
  Index        r30, r22, r29
  Const        r31, "inv_item_sk"
  Index        r32, r28, r31
  Equal        r33, r30, r32
  JumpIfFalse  r33, L2
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  IterPrep     r34, r2
  Len          r35, r34
  Const        r36, 0
L8:
  LessInt      r37, r36, r35
  JumpIfFalse  r37, L2
  Index        r39, r34, r36
  Const        r40, "inv_date_sk"
  Index        r41, r28, r40
  Const        r42, "d_date_sk"
  Index        r43, r39, r42
  Equal        r44, r41, r43
  JumpIfFalse  r44, L3
  // join cs in catalog_sales on cs.cs_item_sk == i.i_item_sk
  IterPrep     r45, r3
  Len          r46, r45
  Const        r47, 0
L7:
  LessInt      r48, r47, r46
  JumpIfFalse  r48, L3
  Index        r50, r45, r47
  Const        r51, "cs_item_sk"
  Index        r52, r50, r51
  Index        r53, r22, r29
  Equal        r54, r52, r53
  JumpIfFalse  r54, L4
  // where i.i_current_price >= 20 && i.i_current_price <= 50 && i.i_manufact_id >= 800 && i.i_manufact_id <= 803 && inv.inv_quantity_on_hand >= 100 && inv.inv_quantity_on_hand <= 500
  Index        r55, r22, r10
  Const        r56, 20
  LessEq       r57, r56, r55
  Index        r58, r22, r10
  Const        r59, 50
  LessEq       r60, r58, r59
  Index        r61, r22, r11
  Const        r62, 800
  LessEq       r63, r62, r61
  Index        r64, r22, r11
  Const        r65, 803
  LessEq       r66, r64, r65
  Index        r67, r28, r12
  Const        r68, 100
  LessEq       r69, r68, r67
  Index        r70, r28, r12
  Const        r71, 500
  LessEq       r72, r70, r71
  JumpIfFalse  r57, L5
  Move         r57, r60
  JumpIfFalse  r57, L5
  Move         r57, r63
  JumpIfFalse  r57, L5
  Move         r57, r66
  JumpIfFalse  r57, L5
  Move         r57, r69
  JumpIfFalse  r57, L5
  Move         r57, r72
L5:
  JumpIfFalse  r57, L4
  // from i in item
  Const        r73, "i"
  Move         r74, r22
  Const        r75, "inv"
  Move         r76, r28
  Const        r77, "d"
  Move         r78, r39
  Const        r79, "cs"
  Move         r80, r50
  MakeMap      r81, 4, r73
  // group by {id: i.i_item_id, desc: i.i_item_desc, price: i.i_current_price} into g
  Const        r82, "id"
  Index        r83, r22, r6
  Const        r84, "desc"
  Index        r85, r22, r8
  Const        r86, "price"
  Index        r87, r22, r10
  Move         r88, r82
  Move         r89, r83
  Move         r90, r84
  Move         r91, r85
  Move         r92, r86
  Move         r93, r87
  MakeMap      r94, 3, r88
  Str          r95, r94
  In           r96, r95, r14
  JumpIfTrue   r96, L6
  // from i in item
  Const        r97, []
  Const        r98, "__group__"
  Const        r99, true
  Const        r100, "key"
  // group by {id: i.i_item_id, desc: i.i_item_desc, price: i.i_current_price} into g
  Move         r101, r94
  // from i in item
  Const        r102, "items"
  Move         r103, r97
  Const        r104, "count"
  Const        r105, 0
  Move         r106, r98
  Move         r107, r99
  Move         r108, r100
  Move         r109, r101
  Move         r110, r102
  Move         r111, r103
  Move         r112, r104
  Move         r113, r105
  MakeMap      r114, 4, r106
  SetIndex     r14, r95, r114
  Append       r15, r15, r114
L6:
  Const        r116, "items"
  Index        r117, r14, r95
  Index        r118, r117, r116
  Append       r119, r118, r81
  SetIndex     r117, r116, r119
  Const        r120, "count"
  Index        r121, r117, r120
  Const        r122, 1
  AddInt       r123, r121, r122
  SetIndex     r117, r120, r123
L4:
  // join cs in catalog_sales on cs.cs_item_sk == i.i_item_sk
  AddInt       r47, r47, r122
  Jump         L7
L3:
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  AddInt       r36, r36, r122
  Jump         L8
L2:
  // join inv in inventory on i.i_item_sk == inv.inv_item_sk
  AddInt       r25, r25, r122
  Jump         L9
L1:
  // from i in item
  AddInt       r19, r19, r122
  Jump         L10
L0:
  Const        r124, 0
  Len          r126, r15
L12:
  LessInt      r127, r124, r126
  JumpIfFalse  r127, L11
  Index        r129, r15, r124
  // select {i_item_id: g.key.id, i_item_desc: g.key.desc, i_current_price: g.key.price}
  Const        r130, "i_item_id"
  Index        r131, r129, r13
  Index        r132, r131, r5
  Const        r133, "i_item_desc"
  Index        r134, r129, r13
  Index        r135, r134, r7
  Const        r136, "i_current_price"
  Index        r137, r129, r13
  Index        r138, r137, r9
  Move         r139, r130
  Move         r140, r132
  Move         r141, r133
  Move         r142, r135
  Move         r143, r136
  Move         r144, r138
  MakeMap      r145, 3, r139
  // sort by g.key.id
  Index        r146, r129, r13
  Index        r148, r146, r5
  // from i in item
  Move         r149, r145
  MakeList     r150, 2, r148
  Append       r4, r4, r150
  AddInt       r124, r124, r122
  Jump         L12
L11:
  // sort by g.key.id
  Sort         r4, r4
  // json(result)
  JSON         r4
  // expect result == [{i_item_id: "I1", i_item_desc: "Item1", i_current_price: 30.0}]
  Const        r153, [{"i_current_price": 30, "i_item_desc": "Item1", "i_item_id": "I1"}]
  Equal        r154, r4, r153
  Expect       r154
  Return       r0
