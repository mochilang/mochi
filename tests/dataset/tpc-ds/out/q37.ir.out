func main (regs=159)
  // let item = [
  Const        r0, [{"i_current_price": 30.0, "i_item_desc": "Item1", "i_item_id": "I1", "i_item_sk": 1, "i_manufact_id": 800}, {"i_current_price": 60.0, "i_item_desc": "Item2", "i_item_id": "I2", "i_item_sk": 2, "i_manufact_id": 801}]
  // let inventory = [
  Const        r1, [{"inv_date_sk": 1, "inv_item_sk": 1, "inv_quantity_on_hand": 200, "inv_warehouse_sk": 1}, {"inv_date_sk": 1, "inv_item_sk": 2, "inv_quantity_on_hand": 300, "inv_warehouse_sk": 1}]
  // let date_dim = [
  Const        r2, [{"d_date": "2000-01-15", "d_date_sk": 1}]
  // let catalog_sales = [
  Const        r3, [{"cs_item_sk": 1, "cs_sold_date_sk": 1}]
  // from i in item
  Const        r4, []
  // group by {id: i.i_item_id, desc: i.i_item_desc, price: i.i_current_price} into g
  Const        r5, "id"
  Const        r6, "i_item_id"
  Const        r7, "desc"
  Const        r8, "i_item_desc"
  Const        r9, "price"
  Const        r10, "i_current_price"
  // where i.i_current_price >= 20 && i.i_current_price <= 50 && i.i_manufact_id >= 800 && i.i_manufact_id <= 803 && inv.inv_quantity_on_hand >= 100 && inv.inv_quantity_on_hand <= 500
  Const        r11, "i_manufact_id"
  Const        r12, "inv_quantity_on_hand"
  // select {i_item_id: g.key.id, i_item_desc: g.key.desc, i_current_price: g.key.price}
  Const        r13, "key"
  // from i in item
  MakeMap      r14, 0, r0
  Const        r16, []
  Move         r15, r16
  IterPrep     r17, r0
  Len          r18, r17
  Const        r19, 0
L10:
  LessInt      r20, r19, r18
  JumpIfFalse  r20, L0
  Index        r21, r17, r19
  Move         r22, r21
  // join inv in inventory on i.i_item_sk == inv.inv_item_sk
  IterPrep     r23, r1
  Len          r24, r23
  Const        r25, 0
L9:
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L1
  Index        r27, r23, r25
  Move         r28, r27
  Const        r29, "i_item_sk"
  Index        r30, r22, r29
  Const        r31, "inv_item_sk"
  Index        r32, r28, r31
  Equal        r33, r30, r32
  JumpIfFalse  r33, L2
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  IterPrep     r34, r2
  Len          r35, r34
  Const        r36, 0
L8:
  LessInt      r37, r36, r35
  JumpIfFalse  r37, L2
  Index        r38, r34, r36
  Move         r39, r38
  Const        r40, "inv_date_sk"
  Index        r41, r28, r40
  Const        r42, "d_date_sk"
  Index        r43, r39, r42
  Equal        r44, r41, r43
  JumpIfFalse  r44, L3
  // join cs in catalog_sales on cs.cs_item_sk == i.i_item_sk
  IterPrep     r45, r3
  Len          r46, r45
  Const        r47, 0
L7:
  LessInt      r48, r47, r46
  JumpIfFalse  r48, L3
  Index        r49, r45, r47
  Move         r50, r49
  Const        r51, "cs_item_sk"
  Index        r52, r50, r51
  Index        r53, r22, r29
  Equal        r54, r52, r53
  JumpIfFalse  r54, L4
  // where i.i_current_price >= 20 && i.i_current_price <= 50 && i.i_manufact_id >= 800 && i.i_manufact_id <= 803 && inv.inv_quantity_on_hand >= 100 && inv.inv_quantity_on_hand <= 500
  Index        r55, r22, r10
  Const        r56, 20
  LessEq       r57, r56, r55
  Index        r58, r22, r10
  Const        r59, 50
  LessEq       r60, r58, r59
  Index        r61, r22, r11
  Const        r62, 800
  LessEq       r63, r62, r61
  Index        r64, r22, r11
  Const        r65, 803
  LessEq       r66, r64, r65
  Index        r67, r28, r12
  Const        r68, 100
  LessEq       r69, r68, r67
  Index        r70, r28, r12
  Const        r71, 500
  LessEq       r72, r70, r71
  Move         r73, r57
  JumpIfFalse  r73, L5
  Move         r73, r60
  JumpIfFalse  r73, L5
  Move         r73, r63
  JumpIfFalse  r73, L5
  Move         r73, r66
  JumpIfFalse  r73, L5
  Move         r73, r69
  JumpIfFalse  r73, L5
  Move         r73, r72
L5:
  JumpIfFalse  r73, L4
  // from i in item
  Const        r74, "i"
  Move         r75, r22
  Const        r76, "inv"
  Move         r77, r28
  Const        r78, "d"
  Move         r79, r39
  Const        r80, "cs"
  Move         r81, r50
  Move         r82, r74
  Move         r83, r75
  Move         r84, r76
  Move         r85, r77
  Move         r86, r78
  Move         r87, r79
  Move         r88, r80
  Move         r89, r81
  MakeMap      r90, 4, r82
  // group by {id: i.i_item_id, desc: i.i_item_desc, price: i.i_current_price} into g
  Const        r91, "id"
  Index        r92, r22, r6
  Const        r93, "desc"
  Index        r94, r22, r8
  Const        r95, "price"
  Index        r96, r22, r10
  Move         r97, r91
  Move         r98, r92
  Move         r99, r93
  Move         r100, r94
  Move         r101, r95
  Move         r102, r96
  MakeMap      r103, 3, r97
  Str          r104, r103
  In           r105, r104, r14
  JumpIfTrue   r105, L6
  // from i in item
  Const        r106, "__group__"
  Const        r107, true
  // group by {id: i.i_item_id, desc: i.i_item_desc, price: i.i_current_price} into g
  Move         r108, r103
  // from i in item
  Const        r109, "items"
  Move         r110, r16
  Const        r111, "count"
  Const        r112, 0
  Move         r113, r106
  Move         r114, r107
  Move         r115, r13
  Move         r116, r108
  Move         r117, r109
  Move         r118, r110
  Move         r119, r111
  Move         r120, r112
  MakeMap      r121, 4, r113
  SetIndex     r14, r104, r121
  Append       r122, r15, r121
  Move         r15, r122
L6:
  Index        r123, r14, r104
  Index        r124, r123, r109
  Append       r125, r124, r90
  SetIndex     r123, r109, r125
  Index        r126, r123, r111
  Const        r127, 1
  AddInt       r128, r126, r127
  SetIndex     r123, r111, r128
L4:
  // join cs in catalog_sales on cs.cs_item_sk == i.i_item_sk
  AddInt       r47, r47, r127
  Jump         L7
L3:
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  AddInt       r36, r36, r127
  Jump         L8
L2:
  // join inv in inventory on i.i_item_sk == inv.inv_item_sk
  AddInt       r25, r25, r127
  Jump         L9
L1:
  // from i in item
  AddInt       r19, r19, r127
  Jump         L10
L0:
  Move         r129, r112
  Len          r130, r15
L12:
  LessInt      r131, r129, r130
  JumpIfFalse  r131, L11
  Index        r132, r15, r129
  Move         r133, r132
  // select {i_item_id: g.key.id, i_item_desc: g.key.desc, i_current_price: g.key.price}
  Const        r134, "i_item_id"
  Index        r135, r133, r13
  Index        r136, r135, r5
  Const        r137, "i_item_desc"
  Index        r138, r133, r13
  Index        r139, r138, r7
  Const        r140, "i_current_price"
  Index        r141, r133, r13
  Index        r142, r141, r9
  Move         r143, r134
  Move         r144, r136
  Move         r145, r137
  Move         r146, r139
  Move         r147, r140
  Move         r148, r142
  MakeMap      r149, 3, r143
  // sort by g.key.id
  Index        r150, r133, r13
  Index        r151, r150, r5
  Move         r152, r151
  // from i in item
  Move         r153, r149
  MakeList     r154, 2, r152
  Append       r155, r4, r154
  Move         r4, r155
  AddInt       r129, r129, r127
  Jump         L12
L11:
  // sort by g.key.id
  Sort         r156, r4
  // from i in item
  Move         r4, r156
  // json(result)
  JSON         r4
  // expect result == [{i_item_id: "I1", i_item_desc: "Item1", i_current_price: 30.0}]
  Const        r157, [{"i_current_price": 30.0, "i_item_desc": "Item1", "i_item_id": "I1"}]
  Equal        r158, r4, r157
  Expect       r158
  Return       r0
