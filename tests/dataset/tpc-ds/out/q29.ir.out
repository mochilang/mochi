func main (regs=278)
  // let store_sales = [
  Const        r0, [{"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 10, "ss_sold_date_sk": 1, "ss_store_sk": 1, "ss_ticket_number": 1}]
  // let store_returns = [
  Const        r1, [{"sr_customer_sk": 1, "sr_item_sk": 1, "sr_return_quantity": 2, "sr_returned_date_sk": 2, "sr_ticket_number": 1}]
  // let catalog_sales = [
  Const        r2, [{"cs_bill_customer_sk": 1, "cs_item_sk": 1, "cs_quantity": 5, "cs_sold_date_sk": 3}]
  // let date_dim = [
  Const        r3, [{"d_date_sk": 1, "d_moy": 4, "d_year": 1999}, {"d_date_sk": 2, "d_moy": 5, "d_year": 1999}, {"d_date_sk": 3, "d_moy": 5, "d_year": 2000}]
  // let store = [ { s_store_sk: 1, s_store_id: "S1", s_store_name: "Store1" } ]
  Const        r4, [{"s_store_id": "S1", "s_store_name": "Store1", "s_store_sk": 1}]
  // let item = [ { i_item_sk: 1, i_item_id: "ITEM1", i_item_desc: "Desc1" } ]
  Const        r5, [{"i_item_desc": "Desc1", "i_item_id": "ITEM1", "i_item_sk": 1}]
  // from ss in store_sales
  Const        r6, []
  // where d1.d_moy == 4 && d1.d_year == 1999 && d2.d_moy >= 4 && d2.d_moy <= 7 && d3.d_year in [1999,2000,2001]
  Const        r7, "d_moy"
  Const        r8, "d_year"
  // ss_quantity: ss.ss_quantity,
  Const        r9, "ss_quantity"
  // sr_return_quantity: sr.sr_return_quantity,
  Const        r10, "sr_return_quantity"
  // cs_quantity: cs.cs_quantity,
  Const        r11, "cs_quantity"
  // i_item_id: i.i_item_id,
  Const        r12, "i_item_id"
  // i_item_desc: i.i_item_desc,
  Const        r13, "i_item_desc"
  // s_store_id: s.s_store_id,
  Const        r14, "s_store_id"
  // s_store_name: s.s_store_name,
  Const        r15, "s_store_name"
  // from ss in store_sales
  IterPrep     r16, r0
  Len          r17, r16
  Const        r19, 0
  Move         r18, r19
L19:
  LessInt      r20, r18, r17
  JumpIfFalse  r20, L0
  Index        r22, r16, r18
  // join sr in store_returns on ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk
  IterPrep     r23, r1
  Len          r24, r23
  Const        r25, "ss_ticket_number"
  Const        r26, "sr_ticket_number"
  Const        r27, "ss_item_sk"
  Const        r28, "sr_item_sk"
  Move         r29, r19
L18:
  LessInt      r30, r29, r24
  JumpIfFalse  r30, L1
  Index        r32, r23, r29
  Index        r33, r22, r25
  Index        r34, r32, r26
  Equal        r35, r33, r34
  Index        r36, r22, r27
  Index        r37, r32, r28
  Equal        r38, r36, r37
  JumpIfFalse  r35, L2
  Move         r35, r38
L2:
  JumpIfFalse  r35, L3
  // join cs in catalog_sales on sr.sr_customer_sk == cs.cs_bill_customer_sk && sr.sr_item_sk == cs.cs_item_sk
  IterPrep     r39, r2
  Len          r40, r39
  Const        r41, "sr_customer_sk"
  Const        r42, "cs_bill_customer_sk"
  Const        r43, "cs_item_sk"
  Move         r44, r19
L17:
  LessInt      r45, r44, r40
  JumpIfFalse  r45, L3
  Index        r47, r39, r44
  Index        r48, r32, r41
  Index        r49, r47, r42
  Equal        r50, r48, r49
  Index        r51, r32, r28
  Index        r52, r47, r43
  Equal        r53, r51, r52
  JumpIfFalse  r50, L4
  Move         r50, r53
L4:
  JumpIfFalse  r50, L5
  // join d1 in date_dim on d1.d_date_sk == ss.ss_sold_date_sk
  IterPrep     r54, r3
  Len          r55, r54
  Const        r56, "d_date_sk"
  Const        r57, "ss_sold_date_sk"
  Move         r58, r19
L16:
  LessInt      r59, r58, r55
  JumpIfFalse  r59, L5
  Index        r61, r54, r58
  Index        r62, r61, r56
  Index        r63, r22, r57
  Equal        r64, r62, r63
  JumpIfFalse  r64, L6
  // join d2 in date_dim on d2.d_date_sk == sr.sr_returned_date_sk
  IterPrep     r65, r3
  Len          r66, r65
  Const        r67, "sr_returned_date_sk"
  Move         r68, r19
L15:
  LessInt      r69, r68, r66
  JumpIfFalse  r69, L6
  Index        r71, r65, r68
  Index        r72, r71, r56
  Index        r73, r32, r67
  Equal        r74, r72, r73
  JumpIfFalse  r74, L7
  // join d3 in date_dim on d3.d_date_sk == cs.cs_sold_date_sk
  IterPrep     r75, r3
  Len          r76, r75
  Const        r77, "cs_sold_date_sk"
  Move         r78, r19
L14:
  LessInt      r79, r78, r76
  JumpIfFalse  r79, L7
  Index        r81, r75, r78
  Index        r82, r81, r56
  Index        r83, r47, r77
  Equal        r84, r82, r83
  JumpIfFalse  r84, L8
  // join s in store on s.s_store_sk == ss.ss_store_sk
  IterPrep     r85, r4
  Len          r86, r85
  Const        r87, "s_store_sk"
  Const        r88, "ss_store_sk"
  Move         r89, r19
L13:
  LessInt      r90, r89, r86
  JumpIfFalse  r90, L8
  Index        r92, r85, r89
  Index        r93, r92, r87
  Index        r94, r22, r88
  Equal        r95, r93, r94
  JumpIfFalse  r95, L9
  // join i in item on i.i_item_sk == ss.ss_item_sk
  IterPrep     r96, r5
  Len          r97, r96
  Const        r98, "i_item_sk"
  Move         r99, r19
L12:
  LessInt      r100, r99, r97
  JumpIfFalse  r100, L9
  Index        r102, r96, r99
  Index        r103, r102, r98
  Index        r104, r22, r27
  Equal        r105, r103, r104
  JumpIfFalse  r105, L10
  // where d1.d_moy == 4 && d1.d_year == 1999 && d2.d_moy >= 4 && d2.d_moy <= 7 && d3.d_year in [1999,2000,2001]
  Index        r106, r61, r7
  Index        r107, r71, r7
  Const        r108, 4
  LessEq       r109, r108, r107
  Index        r110, r71, r7
  Const        r111, 7
  LessEq       r112, r110, r111
  Equal        r113, r106, r108
  Index        r114, r61, r8
  Const        r115, 1999
  Equal        r116, r114, r115
  Index        r117, r81, r8
  Const        r118, [1999, 2000, 2001]
  In           r119, r117, r118
  JumpIfFalse  r113, L11
  Move         r113, r116
  JumpIfFalse  r113, L11
  Move         r113, r109
  JumpIfFalse  r113, L11
  Move         r113, r112
  JumpIfFalse  r113, L11
  Move         r113, r119
L11:
  JumpIfFalse  r113, L10
  // ss_quantity: ss.ss_quantity,
  Const        r120, "ss_quantity"
  Index        r121, r22, r9
  // sr_return_quantity: sr.sr_return_quantity,
  Const        r122, "sr_return_quantity"
  Index        r123, r32, r10
  // cs_quantity: cs.cs_quantity,
  Const        r124, "cs_quantity"
  Index        r125, r47, r11
  // i_item_id: i.i_item_id,
  Const        r126, "i_item_id"
  Index        r127, r102, r12
  // i_item_desc: i.i_item_desc,
  Const        r128, "i_item_desc"
  Index        r129, r102, r13
  // s_store_id: s.s_store_id,
  Const        r130, "s_store_id"
  Index        r131, r92, r14
  // s_store_name: s.s_store_name,
  Const        r132, "s_store_name"
  Index        r133, r92, r15
  // ss_quantity: ss.ss_quantity,
  Move         r134, r120
  Move         r135, r121
  // sr_return_quantity: sr.sr_return_quantity,
  Move         r136, r122
  Move         r137, r123
  // cs_quantity: cs.cs_quantity,
  Move         r138, r124
  Move         r139, r125
  // i_item_id: i.i_item_id,
  Move         r140, r126
  Move         r141, r127
  // i_item_desc: i.i_item_desc,
  Move         r142, r128
  Move         r143, r129
  // s_store_id: s.s_store_id,
  Move         r144, r130
  Move         r145, r131
  // s_store_name: s.s_store_name,
  Move         r146, r132
  Move         r147, r133
  // select {
  MakeMap      r148, 7, r134
  // from ss in store_sales
  Append       r6, r6, r148
L10:
  // join i in item on i.i_item_sk == ss.ss_item_sk
  Const        r150, 1
  Add          r99, r99, r150
  Jump         L12
L9:
  // join s in store on s.s_store_sk == ss.ss_store_sk
  Add          r89, r89, r150
  Jump         L13
L8:
  // join d3 in date_dim on d3.d_date_sk == cs.cs_sold_date_sk
  Add          r78, r78, r150
  Jump         L14
L7:
  // join d2 in date_dim on d2.d_date_sk == sr.sr_returned_date_sk
  Add          r68, r68, r150
  Jump         L15
L6:
  // join d1 in date_dim on d1.d_date_sk == ss.ss_sold_date_sk
  Add          r58, r58, r150
  Jump         L16
L5:
  // join cs in catalog_sales on sr.sr_customer_sk == cs.cs_bill_customer_sk && sr.sr_item_sk == cs.cs_item_sk
  Add          r44, r44, r150
  Jump         L17
L3:
  // join sr in store_returns on ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk
  Add          r29, r29, r150
  Jump         L18
L1:
  // from ss in store_sales
  AddInt       r18, r18, r150
  Jump         L19
L0:
  // from b in base
  Const        r151, []
  // group by { item_id: b.i_item_id, item_desc: b.i_item_desc, s_store_id: b.s_store_id, s_store_name: b.s_store_name } into g
  Const        r152, "item_id"
  Const        r153, "item_desc"
  // i_item_id: g.key.item_id,
  Const        r154, "key"
  // store_sales_quantity: sum(from x in g select x.ss_quantity),
  Const        r155, "store_sales_quantity"
  // store_returns_quantity: sum(from x in g select x.sr_return_quantity),
  Const        r156, "store_returns_quantity"
  // catalog_sales_quantity: sum(from x in g select x.cs_quantity)
  Const        r157, "catalog_sales_quantity"
  // from b in base
  IterPrep     r158, r6
  Len          r159, r158
  Const        r160, 0
  MakeMap      r161, 0, r0
  Const        r162, []
L22:
  LessInt      r164, r160, r159
  JumpIfFalse  r164, L20
  Index        r165, r158, r160
  Move         r166, r165
  // group by { item_id: b.i_item_id, item_desc: b.i_item_desc, s_store_id: b.s_store_id, s_store_name: b.s_store_name } into g
  Const        r167, "item_id"
  Index        r168, r166, r12
  Const        r169, "item_desc"
  Index        r170, r166, r13
  Const        r171, "s_store_id"
  Index        r172, r166, r14
  Const        r173, "s_store_name"
  Index        r174, r166, r15
  Move         r175, r167
  Move         r176, r168
  Move         r177, r169
  Move         r178, r170
  Move         r179, r171
  Move         r180, r172
  Move         r181, r173
  Move         r182, r174
  MakeMap      r183, 4, r175
  Str          r184, r183
  In           r185, r184, r161
  JumpIfTrue   r185, L21
  // from b in base
  Const        r186, []
  Const        r187, "__group__"
  Const        r188, true
  Const        r189, "key"
  // group by { item_id: b.i_item_id, item_desc: b.i_item_desc, s_store_id: b.s_store_id, s_store_name: b.s_store_name } into g
  Move         r190, r183
  // from b in base
  Const        r191, "items"
  Move         r192, r186
  Const        r193, "count"
  Const        r194, 0
  Move         r195, r187
  Move         r196, r188
  Move         r197, r189
  Move         r198, r190
  Move         r199, r191
  Move         r200, r192
  Move         r201, r193
  Move         r202, r194
  MakeMap      r203, 4, r195
  SetIndex     r161, r184, r203
  Append       r162, r162, r203
L21:
  Const        r205, "items"
  Index        r206, r161, r184
  Index        r207, r206, r205
  Append       r208, r207, r165
  SetIndex     r206, r205, r208
  Const        r209, "count"
  Index        r210, r206, r209
  AddInt       r211, r210, r150
  SetIndex     r206, r209, r211
  AddInt       r160, r160, r150
  Jump         L22
L20:
  Move         r212, r19
  Len          r213, r162
L30:
  LessInt      r214, r212, r213
  JumpIfFalse  r214, L23
  Index        r216, r162, r212
  // i_item_id: g.key.item_id,
  Const        r217, "i_item_id"
  Index        r218, r216, r154
  Index        r219, r218, r152
  // i_item_desc: g.key.item_desc,
  Const        r220, "i_item_desc"
  Index        r221, r216, r154
  Index        r222, r221, r153
  // s_store_id: g.key.s_store_id,
  Const        r223, "s_store_id"
  Index        r224, r216, r154
  Index        r225, r224, r14
  // s_store_name: g.key.s_store_name,
  Const        r226, "s_store_name"
  Index        r227, r216, r154
  Index        r228, r227, r15
  // store_sales_quantity: sum(from x in g select x.ss_quantity),
  Const        r229, "store_sales_quantity"
  Const        r230, []
  IterPrep     r231, r216
  Len          r232, r231
  Move         r233, r19
L25:
  LessInt      r234, r233, r232
  JumpIfFalse  r234, L24
  Index        r236, r231, r233
  Index        r237, r236, r9
  Append       r230, r230, r237
  AddInt       r233, r233, r150
  Jump         L25
L24:
  Sum          r239, r230
  // store_returns_quantity: sum(from x in g select x.sr_return_quantity),
  Const        r240, "store_returns_quantity"
  Const        r241, []
  IterPrep     r242, r216
  Len          r243, r242
  Move         r244, r19
L27:
  LessInt      r245, r244, r243
  JumpIfFalse  r245, L26
  Index        r236, r242, r244
  Index        r247, r236, r10
  Append       r241, r241, r247
  AddInt       r244, r244, r150
  Jump         L27
L26:
  Sum          r249, r241
  // catalog_sales_quantity: sum(from x in g select x.cs_quantity)
  Const        r250, "catalog_sales_quantity"
  Const        r251, []
  IterPrep     r252, r216
  Len          r253, r252
  Move         r254, r19
L29:
  LessInt      r255, r254, r253
  JumpIfFalse  r255, L28
  Index        r236, r252, r254
  Index        r257, r236, r11
  Append       r251, r251, r257
  AddInt       r254, r254, r150
  Jump         L29
L28:
  Sum          r259, r251
  // i_item_id: g.key.item_id,
  Move         r260, r217
  Move         r261, r219
  // i_item_desc: g.key.item_desc,
  Move         r262, r220
  Move         r263, r222
  // s_store_id: g.key.s_store_id,
  Move         r264, r223
  Move         r265, r225
  // s_store_name: g.key.s_store_name,
  Move         r266, r226
  Move         r267, r228
  // store_sales_quantity: sum(from x in g select x.ss_quantity),
  Move         r268, r229
  Move         r269, r239
  // store_returns_quantity: sum(from x in g select x.sr_return_quantity),
  Move         r270, r240
  Move         r271, r249
  // catalog_sales_quantity: sum(from x in g select x.cs_quantity)
  Move         r272, r250
  Move         r273, r259
  // select {
  MakeMap      r274, 7, r260
  // from b in base
  Append       r151, r151, r274
  AddInt       r212, r212, r150
  Jump         L30
L23:
  // json(result)
  JSON         r151
  // expect result == [
  Const        r276, [{"catalog_sales_quantity": 5, "i_item_desc": "Desc1", "i_item_id": "ITEM1", "s_store_id": "S1", "s_store_name": "Store1", "store_returns_quantity": 2, "store_sales_quantity": 10}]
  Equal        r277, r151, r276
  Expect       r277
  Return       r0
