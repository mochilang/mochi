func main (regs=323)
  // let store_sales = [
  Const        r0, [{"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 10, "ss_sold_date_sk": 1, "ss_store_sk": 1, "ss_ticket_number": 1}, {"ss_customer_sk": 2, "ss_item_sk": 2, "ss_quantity": 4, "ss_sold_date_sk": 1, "ss_store_sk": 1, "ss_ticket_number": 2}]
  // let store_returns = [
  Const        r1, [{"sr_customer_sk": 1, "sr_item_sk": 1, "sr_return_quantity": 2, "sr_returned_date_sk": 2, "sr_ticket_number": 1}, {"sr_customer_sk": 2, "sr_item_sk": 2, "sr_return_quantity": 1, "sr_returned_date_sk": 2, "sr_ticket_number": 2}]
  // let catalog_sales = [
  Const        r2, [{"cs_bill_customer_sk": 1, "cs_item_sk": 1, "cs_quantity": 5, "cs_sold_date_sk": 3}, {"cs_bill_customer_sk": 2, "cs_item_sk": 2, "cs_quantity": 3, "cs_sold_date_sk": 3}]
  // let date_dim = [
  Const        r3, [{"d_date_sk": 1, "d_moy": 4, "d_year": 1999}, {"d_date_sk": 2, "d_moy": 5, "d_year": 1999}, {"d_date_sk": 3, "d_moy": 5, "d_year": 2000}]
  // let store = [ { s_store_sk: 1, s_store_id: "S1", s_store_name: "Store1" } ]
  Const        r4, [{"s_store_id": "S1", "s_store_name": "Store1", "s_store_sk": 1}]
  // let item = [ { i_item_sk: 1, i_item_id: "ITEM1", i_item_desc: "Desc1" }, { i_item_sk: 2, i_item_id: "ITEM2", i_item_desc: "Desc2" } ]
  Const        r5, [{"i_item_desc": "Desc1", "i_item_id": "ITEM1", "i_item_sk": 1}, {"i_item_desc": "Desc2", "i_item_id": "ITEM2", "i_item_sk": 2}]
  // from ss in store_sales
  Const        r6, []
  // group by { item_id: i.i_item_id, item_desc: i.i_item_desc, s_store_id: s.s_store_id, s_store_name: s.s_store_name } into g
  Const        r7, "item_id"
  Const        r8, "i_item_id"
  Const        r9, "item_desc"
  Const        r10, "i_item_desc"
  Const        r11, "s_store_id"
  Const        r12, "s_store_id"
  Const        r13, "s_store_name"
  Const        r14, "s_store_name"
  // where d1.d_moy == 4 && d1.d_year == 1999 && d2.d_moy >= 4 && d2.d_moy <= 7 && d3.d_year in [1999,2000,2001]
  Const        r15, "d_moy"
  Const        r16, "d_year"
  Const        r17, "d_moy"
  Const        r18, "d_moy"
  Const        r19, "d_year"
  // i_item_id: g.key.item_id,
  Const        r20, "i_item_id"
  Const        r21, "key"
  Const        r22, "item_id"
  // i_item_desc: g.key.item_desc,
  Const        r23, "i_item_desc"
  Const        r24, "key"
  Const        r25, "item_desc"
  // s_store_id: g.key.s_store_id,
  Const        r26, "s_store_id"
  Const        r27, "key"
  Const        r28, "s_store_id"
  // s_store_name: g.key.s_store_name,
  Const        r29, "s_store_name"
  Const        r30, "key"
  Const        r31, "s_store_name"
  // store_sales_quantity: sum(from x in g select x.ss_quantity),
  Const        r32, "store_sales_quantity"
  Const        r33, "ss_quantity"
  // store_returns_quantity: sum(from x in g select x.sr_return_quantity),
  Const        r34, "store_returns_quantity"
  Const        r35, "sr_return_quantity"
  // catalog_sales_quantity: sum(from x in g select x.cs_quantity)
  Const        r36, "catalog_sales_quantity"
  Const        r37, "cs_quantity"
  // from ss in store_sales
  MakeMap      r38, 0, r0
  Const        r39, []
  IterPrep     r41, r0
  Len          r42, r41
  Const        r43, 0
L23:
  LessInt      r44, r43, r42
  JumpIfFalse  r44, L0
  Index        r46, r41, r43
  // join sr in store_returns on ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk
  IterPrep     r47, r1
  Len          r48, r47
  Const        r49, 0
L22:
  LessInt      r50, r49, r48
  JumpIfFalse  r50, L1
  Index        r52, r47, r49
  Const        r53, "ss_ticket_number"
  Index        r54, r46, r53
  Const        r55, "sr_ticket_number"
  Index        r56, r52, r55
  Equal        r57, r54, r56
  Const        r58, "ss_item_sk"
  Index        r59, r46, r58
  Const        r60, "sr_item_sk"
  Index        r61, r52, r60
  Equal        r62, r59, r61
  Move         r63, r57
  JumpIfFalse  r63, L2
  Move         r63, r62
L2:
  JumpIfFalse  r63, L3
  // join cs in catalog_sales on sr.sr_customer_sk == cs.cs_bill_customer_sk && sr.sr_item_sk == cs.cs_item_sk
  IterPrep     r64, r2
  Len          r65, r64
  Const        r66, 0
L21:
  LessInt      r67, r66, r65
  JumpIfFalse  r67, L3
  Index        r69, r64, r66
  Const        r70, "sr_customer_sk"
  Index        r71, r52, r70
  Const        r72, "cs_bill_customer_sk"
  Index        r73, r69, r72
  Equal        r74, r71, r73
  Const        r75, "sr_item_sk"
  Index        r76, r52, r75
  Const        r77, "cs_item_sk"
  Index        r78, r69, r77
  Equal        r79, r76, r78
  Move         r80, r74
  JumpIfFalse  r80, L4
  Move         r80, r79
L4:
  JumpIfFalse  r80, L5
  // join d1 in date_dim on d1.d_date_sk == ss.ss_sold_date_sk
  IterPrep     r81, r3
  Len          r82, r81
  Const        r83, 0
L20:
  LessInt      r84, r83, r82
  JumpIfFalse  r84, L5
  Index        r86, r81, r83
  Const        r87, "d_date_sk"
  Index        r88, r86, r87
  Const        r89, "ss_sold_date_sk"
  Index        r90, r46, r89
  Equal        r91, r88, r90
  JumpIfFalse  r91, L6
  // join d2 in date_dim on d2.d_date_sk == sr.sr_returned_date_sk
  IterPrep     r92, r3
  Len          r93, r92
  Const        r94, 0
L19:
  LessInt      r95, r94, r93
  JumpIfFalse  r95, L6
  Index        r97, r92, r94
  Const        r98, "d_date_sk"
  Index        r99, r97, r98
  Const        r100, "sr_returned_date_sk"
  Index        r101, r52, r100
  Equal        r102, r99, r101
  JumpIfFalse  r102, L7
  // join d3 in date_dim on d3.d_date_sk == cs.cs_sold_date_sk
  IterPrep     r103, r3
  Len          r104, r103
  Const        r105, 0
L18:
  LessInt      r106, r105, r104
  JumpIfFalse  r106, L7
  Index        r108, r103, r105
  Const        r109, "d_date_sk"
  Index        r110, r108, r109
  Const        r111, "cs_sold_date_sk"
  Index        r112, r69, r111
  Equal        r113, r110, r112
  JumpIfFalse  r113, L8
  // join s in store on s.s_store_sk == ss.ss_store_sk
  IterPrep     r114, r4
  Len          r115, r114
  Const        r116, 0
L17:
  LessInt      r117, r116, r115
  JumpIfFalse  r117, L8
  Index        r119, r114, r116
  Const        r120, "s_store_sk"
  Index        r121, r119, r120
  Const        r122, "ss_store_sk"
  Index        r123, r46, r122
  Equal        r124, r121, r123
  JumpIfFalse  r124, L9
  // join i in item on i.i_item_sk == ss.ss_item_sk
  IterPrep     r125, r5
  Len          r126, r125
  Const        r127, 0
L16:
  LessInt      r128, r127, r126
  JumpIfFalse  r128, L9
  Index        r130, r125, r127
  Const        r131, "i_item_sk"
  Index        r132, r130, r131
  Const        r133, "ss_item_sk"
  Index        r134, r46, r133
  Equal        r135, r132, r134
  JumpIfFalse  r135, L10
  // where d1.d_moy == 4 && d1.d_year == 1999 && d2.d_moy >= 4 && d2.d_moy <= 7 && d3.d_year in [1999,2000,2001]
  Const        r136, "d_moy"
  Index        r137, r86, r136
  Const        r138, "d_moy"
  Index        r139, r97, r138
  Const        r140, 4
  LessEq       r141, r140, r139
  Const        r142, "d_moy"
  Index        r143, r97, r142
  Const        r144, 7
  LessEq       r145, r143, r144
  Const        r146, 4
  Equal        r147, r137, r146
  Const        r148, "d_year"
  Index        r149, r86, r148
  Const        r150, 1999
  Equal        r151, r149, r150
  Const        r152, "d_year"
  Index        r153, r108, r152
  Const        r154, [1999, 2000, 2001]
  In           r155, r153, r154
  Move         r156, r147
  JumpIfFalse  r156, L11
L11:
  Move         r157, r151
  JumpIfFalse  r157, L12
L12:
  Move         r158, r141
  JumpIfFalse  r158, L13
L13:
  Move         r159, r145
  JumpIfFalse  r159, L14
  Move         r159, r155
L14:
  JumpIfFalse  r159, L10
  // from ss in store_sales
  MakeMap      r160, 0, r0
  Const        r161, "ss"
  SetIndex     r160, r161, r46
  Const        r163, "sr"
  SetIndex     r160, r163, r52
  Const        r165, "cs"
  SetIndex     r160, r165, r69
  Const        r167, "d1"
  SetIndex     r160, r167, r86
  Const        r169, "d2"
  SetIndex     r160, r169, r97
  Const        r171, "d3"
  SetIndex     r160, r171, r108
  Const        r173, "s"
  SetIndex     r160, r173, r119
  Const        r175, "i"
  SetIndex     r160, r175, r130
  // group by { item_id: i.i_item_id, item_desc: i.i_item_desc, s_store_id: s.s_store_id, s_store_name: s.s_store_name } into g
  Const        r177, "item_id"
  Const        r178, "i_item_id"
  Index        r179, r130, r178
  Const        r180, "item_desc"
  Const        r181, "i_item_desc"
  Index        r182, r130, r181
  Const        r183, "s_store_id"
  Const        r184, "s_store_id"
  Index        r185, r119, r184
  Const        r186, "s_store_name"
  Const        r187, "s_store_name"
  Index        r188, r119, r187
  Move         r189, r177
  Move         r190, r179
  Move         r191, r180
  Move         r192, r182
  Move         r193, r183
  Move         r194, r185
  Move         r195, r186
  Move         r196, r188
  MakeMap      r197, 4, r189
  Str          r198, r197
  In           r199, r198, r38
  JumpIfTrue   r199, L15
  // from ss in store_sales
  Const        r200, []
  Const        r201, "__group__"
  Const        r202, true
  Const        r203, "key"
  // group by { item_id: i.i_item_id, item_desc: i.i_item_desc, s_store_id: s.s_store_id, s_store_name: s.s_store_name } into g
  Move         r204, r197
  // from ss in store_sales
  Const        r205, "items"
  Move         r206, r200
  Const        r207, "count"
  Const        r208, 0
  Move         r209, r201
  Move         r210, r202
  Move         r211, r203
  Move         r212, r204
  Move         r213, r205
  Move         r214, r206
  Move         r215, r207
  Move         r216, r208
  MakeMap      r217, 4, r209
  SetIndex     r38, r198, r217
  Append       r39, r39, r217
L15:
  Const        r219, "items"
  Index        r220, r38, r198
  Index        r221, r220, r219
  Append       r222, r221, r160
  SetIndex     r220, r219, r222
  Const        r223, "count"
  Index        r224, r220, r223
  Const        r225, 1
  AddInt       r226, r224, r225
  SetIndex     r220, r223, r226
L10:
  // join i in item on i.i_item_sk == ss.ss_item_sk
  Const        r227, 1
  AddInt       r127, r127, r227
  Jump         L16
L9:
  // join s in store on s.s_store_sk == ss.ss_store_sk
  Const        r228, 1
  AddInt       r116, r116, r228
  Jump         L17
L8:
  // join d3 in date_dim on d3.d_date_sk == cs.cs_sold_date_sk
  Const        r229, 1
  AddInt       r105, r105, r229
  Jump         L18
L7:
  // join d2 in date_dim on d2.d_date_sk == sr.sr_returned_date_sk
  Const        r230, 1
  AddInt       r94, r94, r230
  Jump         L19
L6:
  // join d1 in date_dim on d1.d_date_sk == ss.ss_sold_date_sk
  Const        r231, 1
  AddInt       r83, r83, r231
  Jump         L20
L5:
  // join cs in catalog_sales on sr.sr_customer_sk == cs.cs_bill_customer_sk && sr.sr_item_sk == cs.cs_item_sk
  Const        r232, 1
  AddInt       r66, r66, r232
  Jump         L21
L3:
  // join sr in store_returns on ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk
  Const        r233, 1
  AddInt       r49, r49, r233
  Jump         L22
L1:
  // from ss in store_sales
  Const        r234, 1
  AddInt       r43, r43, r234
  Jump         L23
L0:
  Const        r235, 0
  Len          r237, r39
L31:
  LessInt      r238, r235, r237
  JumpIfFalse  r238, L24
  Index        r240, r39, r235
  // i_item_id: g.key.item_id,
  Const        r241, "i_item_id"
  Const        r242, "key"
  Index        r243, r240, r242
  Const        r244, "item_id"
  Index        r245, r243, r244
  // i_item_desc: g.key.item_desc,
  Const        r246, "i_item_desc"
  Const        r247, "key"
  Index        r248, r240, r247
  Const        r249, "item_desc"
  Index        r250, r248, r249
  // s_store_id: g.key.s_store_id,
  Const        r251, "s_store_id"
  Const        r252, "key"
  Index        r253, r240, r252
  Const        r254, "s_store_id"
  Index        r255, r253, r254
  // s_store_name: g.key.s_store_name,
  Const        r256, "s_store_name"
  Const        r257, "key"
  Index        r258, r240, r257
  Const        r259, "s_store_name"
  Index        r260, r258, r259
  // store_sales_quantity: sum(from x in g select x.ss_quantity),
  Const        r261, "store_sales_quantity"
  Const        r262, []
  Const        r263, "ss_quantity"
  IterPrep     r264, r240
  Len          r265, r264
  Const        r266, 0
L26:
  LessInt      r268, r266, r265
  JumpIfFalse  r268, L25
  Index        r270, r264, r266
  Const        r271, "ss_quantity"
  Index        r272, r270, r271
  Append       r262, r262, r272
  Const        r274, 1
  AddInt       r266, r266, r274
  Jump         L26
L25:
  Sum          r275, r262
  // store_returns_quantity: sum(from x in g select x.sr_return_quantity),
  Const        r276, "store_returns_quantity"
  Const        r277, []
  Const        r278, "sr_return_quantity"
  IterPrep     r279, r240
  Len          r280, r279
  Const        r281, 0
L28:
  LessInt      r283, r281, r280
  JumpIfFalse  r283, L27
  Index        r270, r279, r281
  Const        r285, "sr_return_quantity"
  Index        r286, r270, r285
  Append       r277, r277, r286
  Const        r288, 1
  AddInt       r281, r281, r288
  Jump         L28
L27:
  Sum          r289, r277
  // catalog_sales_quantity: sum(from x in g select x.cs_quantity)
  Const        r290, "catalog_sales_quantity"
  Const        r291, []
  Const        r292, "cs_quantity"
  IterPrep     r293, r240
  Len          r294, r293
  Const        r295, 0
L30:
  LessInt      r297, r295, r294
  JumpIfFalse  r297, L29
  Index        r270, r293, r295
  Const        r299, "cs_quantity"
  Index        r300, r270, r299
  Append       r291, r291, r300
  Const        r302, 1
  AddInt       r295, r295, r302
  Jump         L30
L29:
  Sum          r303, r291
  // i_item_id: g.key.item_id,
  Move         r304, r241
  Move         r305, r245
  // i_item_desc: g.key.item_desc,
  Move         r306, r246
  Move         r307, r250
  // s_store_id: g.key.s_store_id,
  Move         r308, r251
  Move         r309, r255
  // s_store_name: g.key.s_store_name,
  Move         r310, r256
  Move         r311, r260
  // store_sales_quantity: sum(from x in g select x.ss_quantity),
  Move         r312, r261
  Move         r313, r275
  // store_returns_quantity: sum(from x in g select x.sr_return_quantity),
  Move         r314, r276
  Move         r315, r289
  // catalog_sales_quantity: sum(from x in g select x.cs_quantity)
  Move         r316, r290
  Move         r317, r303
  // select {
  MakeMap      r318, 7, r304
  // from ss in store_sales
  Append       r6, r6, r318
  Const        r320, 1
  AddInt       r235, r235, r320
  Jump         L31
L24:
  // json(result)
  JSON         r6
  // expect result == [
  Const        r321, [{"catalog_sales_quantity": 5, "i_item_desc": "Desc1", "i_item_id": "ITEM1", "s_store_id": "S1", "s_store_name": "Store1", "store_returns_quantity": 2, "store_sales_quantity": 10}]
  Equal        r322, r6, r321
  Expect       r322
  Return       r0
