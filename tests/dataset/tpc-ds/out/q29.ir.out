func main (regs=524)
  // let store_sales = [
  Const        r0, [{"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 10, "ss_sold_date_sk": 1, "ss_store_sk": 1, "ss_ticket_number": 1}]
  // let store_returns = [
  Const        r1, [{"sr_customer_sk": 1, "sr_item_sk": 1, "sr_return_quantity": 2, "sr_returned_date_sk": 2, "sr_ticket_number": 1}]
  // let catalog_sales = [
  Const        r2, [{"cs_bill_customer_sk": 1, "cs_item_sk": 1, "cs_quantity": 5, "cs_sold_date_sk": 3}]
  // let date_dim = [
  Const        r3, [{"d_date_sk": 1, "d_moy": 4, "d_year": 1999}, {"d_date_sk": 2, "d_moy": 5, "d_year": 1999}, {"d_date_sk": 3, "d_moy": 5, "d_year": 2000}]
  // let store = [ { s_store_sk: 1, s_store_id: "S1", s_store_name: "Store1" } ]
  Const        r4, [{"s_store_id": "S1", "s_store_name": "Store1", "s_store_sk": 1}]
  // let item = [ { i_item_sk: 1, i_item_id: "ITEM1", i_item_desc: "Desc1" } ]
  Const        r5, [{"i_item_desc": "Desc1", "i_item_id": "ITEM1", "i_item_sk": 1}]
  // from ss in store_sales
  Const        r6, []
  // where d1.d_moy == 4 && d1.d_year == 1999 && d2.d_moy >= 4 && d2.d_moy <= 7 && d3.d_year in [1999,2000,2001]
  Const        r7, "d_moy"
  Const        r8, "d_year"
  Const        r9, "d_moy"
  Const        r10, "d_moy"
  Const        r11, "d_year"
  // ss_quantity: ss.ss_quantity,
  Const        r12, "ss_quantity"
  Const        r13, "ss_quantity"
  // sr_return_quantity: sr.sr_return_quantity,
  Const        r14, "sr_return_quantity"
  Const        r15, "sr_return_quantity"
  // cs_quantity: cs.cs_quantity,
  Const        r16, "cs_quantity"
  Const        r17, "cs_quantity"
  // i_item_id: i.i_item_id,
  Const        r18, "i_item_id"
  Const        r19, "i_item_id"
  // i_item_desc: i.i_item_desc,
  Const        r20, "i_item_desc"
  Const        r21, "i_item_desc"
  // s_store_id: s.s_store_id,
  Const        r22, "s_store_id"
  Const        r23, "s_store_id"
  // s_store_name: s.s_store_name,
  Const        r24, "s_store_name"
  Const        r25, "s_store_name"
  // from ss in store_sales
  IterPrep     r26, r0
  Len          r27, r26
  Const        r28, 0
L22:
  LessInt      r30, r28, r27
  JumpIfFalse  r30, L0
  Index        r32, r26, r28
  // join sr in store_returns on ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk
  IterPrep     r33, r1
  Len          r34, r33
  Const        r35, "ss_ticket_number"
  Const        r36, "sr_ticket_number"
  Const        r37, "ss_item_sk"
  Const        r38, "sr_item_sk"
  // where d1.d_moy == 4 && d1.d_year == 1999 && d2.d_moy >= 4 && d2.d_moy <= 7 && d3.d_year in [1999,2000,2001]
  Const        r39, "d_moy"
  Const        r40, "d_year"
  Const        r41, "d_moy"
  Const        r42, "d_moy"
  Const        r43, "d_year"
  // ss_quantity: ss.ss_quantity,
  Const        r44, "ss_quantity"
  Const        r45, "ss_quantity"
  // sr_return_quantity: sr.sr_return_quantity,
  Const        r46, "sr_return_quantity"
  Const        r47, "sr_return_quantity"
  // cs_quantity: cs.cs_quantity,
  Const        r48, "cs_quantity"
  Const        r49, "cs_quantity"
  // i_item_id: i.i_item_id,
  Const        r50, "i_item_id"
  Const        r51, "i_item_id"
  // i_item_desc: i.i_item_desc,
  Const        r52, "i_item_desc"
  Const        r53, "i_item_desc"
  // s_store_id: s.s_store_id,
  Const        r54, "s_store_id"
  Const        r55, "s_store_id"
  // s_store_name: s.s_store_name,
  Const        r56, "s_store_name"
  Const        r57, "s_store_name"
  // join sr in store_returns on ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk
  Const        r58, 0
L21:
  LessInt      r60, r58, r34
  JumpIfFalse  r60, L1
  Index        r62, r33, r58
  Const        r63, "ss_ticket_number"
  Index        r64, r32, r63
  Const        r65, "sr_ticket_number"
  Index        r66, r62, r65
  Equal        r67, r64, r66
  Const        r68, "ss_item_sk"
  Index        r69, r32, r68
  Const        r70, "sr_item_sk"
  Index        r71, r62, r70
  Equal        r72, r69, r71
  Move         r73, r67
  JumpIfFalse  r73, L2
  Move         r73, r72
L2:
  JumpIfFalse  r73, L3
  // join cs in catalog_sales on sr.sr_customer_sk == cs.cs_bill_customer_sk && sr.sr_item_sk == cs.cs_item_sk
  IterPrep     r74, r2
  Len          r75, r74
  Const        r76, "sr_customer_sk"
  Const        r77, "cs_bill_customer_sk"
  Const        r78, "sr_item_sk"
  Const        r79, "cs_item_sk"
  // where d1.d_moy == 4 && d1.d_year == 1999 && d2.d_moy >= 4 && d2.d_moy <= 7 && d3.d_year in [1999,2000,2001]
  Const        r80, "d_moy"
  Const        r81, "d_year"
  Const        r82, "d_moy"
  Const        r83, "d_moy"
  Const        r84, "d_year"
  // ss_quantity: ss.ss_quantity,
  Const        r85, "ss_quantity"
  Const        r86, "ss_quantity"
  // sr_return_quantity: sr.sr_return_quantity,
  Const        r87, "sr_return_quantity"
  Const        r88, "sr_return_quantity"
  // cs_quantity: cs.cs_quantity,
  Const        r89, "cs_quantity"
  Const        r90, "cs_quantity"
  // i_item_id: i.i_item_id,
  Const        r91, "i_item_id"
  Const        r92, "i_item_id"
  // i_item_desc: i.i_item_desc,
  Const        r93, "i_item_desc"
  Const        r94, "i_item_desc"
  // s_store_id: s.s_store_id,
  Const        r95, "s_store_id"
  Const        r96, "s_store_id"
  // s_store_name: s.s_store_name,
  Const        r97, "s_store_name"
  Const        r98, "s_store_name"
  // join cs in catalog_sales on sr.sr_customer_sk == cs.cs_bill_customer_sk && sr.sr_item_sk == cs.cs_item_sk
  Const        r99, 0
L20:
  LessInt      r101, r99, r75
  JumpIfFalse  r101, L3
  Index        r103, r74, r99
  Const        r104, "sr_customer_sk"
  Index        r105, r62, r104
  Const        r106, "cs_bill_customer_sk"
  Index        r107, r103, r106
  Equal        r108, r105, r107
  Const        r109, "sr_item_sk"
  Index        r110, r62, r109
  Const        r111, "cs_item_sk"
  Index        r112, r103, r111
  Equal        r113, r110, r112
  Move         r114, r108
  JumpIfFalse  r114, L4
  Move         r114, r113
L4:
  JumpIfFalse  r114, L5
  // join d1 in date_dim on d1.d_date_sk == ss.ss_sold_date_sk
  IterPrep     r115, r3
  Len          r116, r115
  Const        r117, "d_date_sk"
  Const        r118, "ss_sold_date_sk"
  // where d1.d_moy == 4 && d1.d_year == 1999 && d2.d_moy >= 4 && d2.d_moy <= 7 && d3.d_year in [1999,2000,2001]
  Const        r119, "d_moy"
  Const        r120, "d_year"
  Const        r121, "d_moy"
  Const        r122, "d_moy"
  Const        r123, "d_year"
  // ss_quantity: ss.ss_quantity,
  Const        r124, "ss_quantity"
  Const        r125, "ss_quantity"
  // sr_return_quantity: sr.sr_return_quantity,
  Const        r126, "sr_return_quantity"
  Const        r127, "sr_return_quantity"
  // cs_quantity: cs.cs_quantity,
  Const        r128, "cs_quantity"
  Const        r129, "cs_quantity"
  // i_item_id: i.i_item_id,
  Const        r130, "i_item_id"
  Const        r131, "i_item_id"
  // i_item_desc: i.i_item_desc,
  Const        r132, "i_item_desc"
  Const        r133, "i_item_desc"
  // s_store_id: s.s_store_id,
  Const        r134, "s_store_id"
  Const        r135, "s_store_id"
  // s_store_name: s.s_store_name,
  Const        r136, "s_store_name"
  Const        r137, "s_store_name"
  // join d1 in date_dim on d1.d_date_sk == ss.ss_sold_date_sk
  Const        r138, 0
L19:
  LessInt      r140, r138, r116
  JumpIfFalse  r140, L5
  Index        r142, r115, r138
  Const        r143, "d_date_sk"
  Index        r144, r142, r143
  Const        r145, "ss_sold_date_sk"
  Index        r146, r32, r145
  Equal        r147, r144, r146
  JumpIfFalse  r147, L6
  // join d2 in date_dim on d2.d_date_sk == sr.sr_returned_date_sk
  IterPrep     r148, r3
  Len          r149, r148
  Const        r150, "d_date_sk"
  Const        r151, "sr_returned_date_sk"
  // where d1.d_moy == 4 && d1.d_year == 1999 && d2.d_moy >= 4 && d2.d_moy <= 7 && d3.d_year in [1999,2000,2001]
  Const        r152, "d_moy"
  Const        r153, "d_year"
  Const        r154, "d_moy"
  Const        r155, "d_moy"
  Const        r156, "d_year"
  // ss_quantity: ss.ss_quantity,
  Const        r157, "ss_quantity"
  Const        r158, "ss_quantity"
  // sr_return_quantity: sr.sr_return_quantity,
  Const        r159, "sr_return_quantity"
  Const        r160, "sr_return_quantity"
  // cs_quantity: cs.cs_quantity,
  Const        r161, "cs_quantity"
  Const        r162, "cs_quantity"
  // i_item_id: i.i_item_id,
  Const        r163, "i_item_id"
  Const        r164, "i_item_id"
  // i_item_desc: i.i_item_desc,
  Const        r165, "i_item_desc"
  Const        r166, "i_item_desc"
  // s_store_id: s.s_store_id,
  Const        r167, "s_store_id"
  Const        r168, "s_store_id"
  // s_store_name: s.s_store_name,
  Const        r169, "s_store_name"
  Const        r170, "s_store_name"
  // join d2 in date_dim on d2.d_date_sk == sr.sr_returned_date_sk
  Const        r171, 0
L18:
  LessInt      r173, r171, r149
  JumpIfFalse  r173, L6
  Index        r175, r148, r171
  Const        r176, "d_date_sk"
  Index        r177, r175, r176
  Const        r178, "sr_returned_date_sk"
  Index        r179, r62, r178
  Equal        r180, r177, r179
  JumpIfFalse  r180, L7
  // join d3 in date_dim on d3.d_date_sk == cs.cs_sold_date_sk
  IterPrep     r181, r3
  Len          r182, r181
  Const        r183, "d_date_sk"
  Const        r184, "cs_sold_date_sk"
  // where d1.d_moy == 4 && d1.d_year == 1999 && d2.d_moy >= 4 && d2.d_moy <= 7 && d3.d_year in [1999,2000,2001]
  Const        r185, "d_moy"
  Const        r186, "d_year"
  Const        r187, "d_moy"
  Const        r188, "d_moy"
  Const        r189, "d_year"
  // ss_quantity: ss.ss_quantity,
  Const        r190, "ss_quantity"
  Const        r191, "ss_quantity"
  // sr_return_quantity: sr.sr_return_quantity,
  Const        r192, "sr_return_quantity"
  Const        r193, "sr_return_quantity"
  // cs_quantity: cs.cs_quantity,
  Const        r194, "cs_quantity"
  Const        r195, "cs_quantity"
  // i_item_id: i.i_item_id,
  Const        r196, "i_item_id"
  Const        r197, "i_item_id"
  // i_item_desc: i.i_item_desc,
  Const        r198, "i_item_desc"
  Const        r199, "i_item_desc"
  // s_store_id: s.s_store_id,
  Const        r200, "s_store_id"
  Const        r201, "s_store_id"
  // s_store_name: s.s_store_name,
  Const        r202, "s_store_name"
  Const        r203, "s_store_name"
  // join d3 in date_dim on d3.d_date_sk == cs.cs_sold_date_sk
  Const        r204, 0
L17:
  LessInt      r206, r204, r182
  JumpIfFalse  r206, L7
  Index        r208, r181, r204
  Const        r209, "d_date_sk"
  Index        r210, r208, r209
  Const        r211, "cs_sold_date_sk"
  Index        r212, r103, r211
  Equal        r213, r210, r212
  JumpIfFalse  r213, L8
  // join s in store on s.s_store_sk == ss.ss_store_sk
  IterPrep     r214, r4
  Len          r215, r214
  Const        r216, "s_store_sk"
  Const        r217, "ss_store_sk"
  // where d1.d_moy == 4 && d1.d_year == 1999 && d2.d_moy >= 4 && d2.d_moy <= 7 && d3.d_year in [1999,2000,2001]
  Const        r218, "d_moy"
  Const        r219, "d_year"
  Const        r220, "d_moy"
  Const        r221, "d_moy"
  Const        r222, "d_year"
  // ss_quantity: ss.ss_quantity,
  Const        r223, "ss_quantity"
  Const        r224, "ss_quantity"
  // sr_return_quantity: sr.sr_return_quantity,
  Const        r225, "sr_return_quantity"
  Const        r226, "sr_return_quantity"
  // cs_quantity: cs.cs_quantity,
  Const        r227, "cs_quantity"
  Const        r228, "cs_quantity"
  // i_item_id: i.i_item_id,
  Const        r229, "i_item_id"
  Const        r230, "i_item_id"
  // i_item_desc: i.i_item_desc,
  Const        r231, "i_item_desc"
  Const        r232, "i_item_desc"
  // s_store_id: s.s_store_id,
  Const        r233, "s_store_id"
  Const        r234, "s_store_id"
  // s_store_name: s.s_store_name,
  Const        r235, "s_store_name"
  Const        r236, "s_store_name"
  // join s in store on s.s_store_sk == ss.ss_store_sk
  Const        r237, 0
L16:
  LessInt      r239, r237, r215
  JumpIfFalse  r239, L8
  Index        r241, r214, r237
  Const        r242, "s_store_sk"
  Index        r243, r241, r242
  Const        r244, "ss_store_sk"
  Index        r245, r32, r244
  Equal        r246, r243, r245
  JumpIfFalse  r246, L9
  // join i in item on i.i_item_sk == ss.ss_item_sk
  IterPrep     r247, r5
  Len          r248, r247
  Const        r249, "i_item_sk"
  Const        r250, "ss_item_sk"
  // where d1.d_moy == 4 && d1.d_year == 1999 && d2.d_moy >= 4 && d2.d_moy <= 7 && d3.d_year in [1999,2000,2001]
  Const        r251, "d_moy"
  Const        r252, "d_year"
  Const        r253, "d_moy"
  Const        r254, "d_moy"
  Const        r255, "d_year"
  // ss_quantity: ss.ss_quantity,
  Const        r256, "ss_quantity"
  Const        r257, "ss_quantity"
  // sr_return_quantity: sr.sr_return_quantity,
  Const        r258, "sr_return_quantity"
  Const        r259, "sr_return_quantity"
  // cs_quantity: cs.cs_quantity,
  Const        r260, "cs_quantity"
  Const        r261, "cs_quantity"
  // i_item_id: i.i_item_id,
  Const        r262, "i_item_id"
  Const        r263, "i_item_id"
  // i_item_desc: i.i_item_desc,
  Const        r264, "i_item_desc"
  Const        r265, "i_item_desc"
  // s_store_id: s.s_store_id,
  Const        r266, "s_store_id"
  Const        r267, "s_store_id"
  // s_store_name: s.s_store_name,
  Const        r268, "s_store_name"
  Const        r269, "s_store_name"
  // join i in item on i.i_item_sk == ss.ss_item_sk
  Const        r270, 0
L15:
  LessInt      r272, r270, r248
  JumpIfFalse  r272, L9
  Index        r274, r247, r270
  Const        r275, "i_item_sk"
  Index        r276, r274, r275
  Const        r277, "ss_item_sk"
  Index        r278, r32, r277
  Equal        r279, r276, r278
  JumpIfFalse  r279, L10
  // where d1.d_moy == 4 && d1.d_year == 1999 && d2.d_moy >= 4 && d2.d_moy <= 7 && d3.d_year in [1999,2000,2001]
  Const        r280, "d_moy"
  Index        r281, r142, r280
  Const        r282, "d_moy"
  Index        r283, r175, r282
  Const        r284, 4
  LessEq       r285, r284, r283
  Const        r286, "d_moy"
  Index        r287, r175, r286
  Const        r288, 7
  LessEq       r289, r287, r288
  Const        r290, 4
  Equal        r291, r281, r290
  Const        r292, "d_year"
  Index        r293, r142, r292
  Const        r294, 1999
  Equal        r295, r293, r294
  Const        r296, "d_year"
  Index        r297, r208, r296
  Const        r298, [1999, 2000, 2001]
  In           r299, r297, r298
  Move         r300, r291
  JumpIfFalse  r300, L11
L11:
  Move         r301, r295
  JumpIfFalse  r301, L12
L12:
  Move         r302, r285
  JumpIfFalse  r302, L13
L13:
  Move         r303, r289
  JumpIfFalse  r303, L14
  Move         r303, r299
L14:
  JumpIfFalse  r303, L10
  // ss_quantity: ss.ss_quantity,
  Const        r304, "ss_quantity"
  Const        r305, "ss_quantity"
  Index        r306, r32, r305
  // sr_return_quantity: sr.sr_return_quantity,
  Const        r307, "sr_return_quantity"
  Const        r308, "sr_return_quantity"
  Index        r309, r62, r308
  // cs_quantity: cs.cs_quantity,
  Const        r310, "cs_quantity"
  Const        r311, "cs_quantity"
  Index        r312, r103, r311
  // i_item_id: i.i_item_id,
  Const        r313, "i_item_id"
  Const        r314, "i_item_id"
  Index        r315, r274, r314
  // i_item_desc: i.i_item_desc,
  Const        r316, "i_item_desc"
  Const        r317, "i_item_desc"
  Index        r318, r274, r317
  // s_store_id: s.s_store_id,
  Const        r319, "s_store_id"
  Const        r320, "s_store_id"
  Index        r321, r241, r320
  // s_store_name: s.s_store_name,
  Const        r322, "s_store_name"
  Const        r323, "s_store_name"
  Index        r324, r241, r323
  // ss_quantity: ss.ss_quantity,
  Move         r325, r304
  Move         r326, r306
  // sr_return_quantity: sr.sr_return_quantity,
  Move         r327, r307
  Move         r328, r309
  // cs_quantity: cs.cs_quantity,
  Move         r329, r310
  Move         r330, r312
  // i_item_id: i.i_item_id,
  Move         r331, r313
  Move         r332, r315
  // i_item_desc: i.i_item_desc,
  Move         r333, r316
  Move         r334, r318
  // s_store_id: s.s_store_id,
  Move         r335, r319
  Move         r336, r321
  // s_store_name: s.s_store_name,
  Move         r337, r322
  Move         r338, r324
  // select {
  MakeMap      r339, 7, r325
  // from ss in store_sales
  Append       r6, r6, r339
L10:
  // join i in item on i.i_item_sk == ss.ss_item_sk
  Const        r341, 1
  Add          r270, r270, r341
  Jump         L15
L9:
  // join s in store on s.s_store_sk == ss.ss_store_sk
  Const        r342, 1
  Add          r237, r237, r342
  Jump         L16
L8:
  // join d3 in date_dim on d3.d_date_sk == cs.cs_sold_date_sk
  Const        r343, 1
  Add          r204, r204, r343
  Jump         L17
L7:
  // join d2 in date_dim on d2.d_date_sk == sr.sr_returned_date_sk
  Const        r344, 1
  Add          r171, r171, r344
  Jump         L18
L6:
  // join d1 in date_dim on d1.d_date_sk == ss.ss_sold_date_sk
  Const        r345, 1
  Add          r138, r138, r345
  Jump         L19
L5:
  // join cs in catalog_sales on sr.sr_customer_sk == cs.cs_bill_customer_sk && sr.sr_item_sk == cs.cs_item_sk
  Const        r346, 1
  Add          r99, r99, r346
  Jump         L20
L3:
  // join sr in store_returns on ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk
  Const        r347, 1
  Add          r58, r58, r347
  Jump         L21
L1:
  // from ss in store_sales
  Const        r348, 1
  AddInt       r28, r28, r348
  Jump         L22
L0:
  // from b in base
  Const        r349, []
  // group by { item_id: b.i_item_id, item_desc: b.i_item_desc, s_store_id: b.s_store_id, s_store_name: b.s_store_name } into g
  Const        r350, "item_id"
  Const        r351, "i_item_id"
  Const        r352, "item_desc"
  Const        r353, "i_item_desc"
  Const        r354, "s_store_id"
  Const        r355, "s_store_id"
  Const        r356, "s_store_name"
  Const        r357, "s_store_name"
  // i_item_id: g.key.item_id,
  Const        r358, "i_item_id"
  Const        r359, "key"
  Const        r360, "item_id"
  // i_item_desc: g.key.item_desc,
  Const        r361, "i_item_desc"
  Const        r362, "key"
  Const        r363, "item_desc"
  // s_store_id: g.key.s_store_id,
  Const        r364, "s_store_id"
  Const        r365, "key"
  Const        r366, "s_store_id"
  // s_store_name: g.key.s_store_name,
  Const        r367, "s_store_name"
  Const        r368, "key"
  Const        r369, "s_store_name"
  // store_sales_quantity: sum(from x in g select x.ss_quantity),
  Const        r370, "store_sales_quantity"
  Const        r371, "ss_quantity"
  // store_returns_quantity: sum(from x in g select x.sr_return_quantity),
  Const        r372, "store_returns_quantity"
  Const        r373, "sr_return_quantity"
  // catalog_sales_quantity: sum(from x in g select x.cs_quantity)
  Const        r374, "catalog_sales_quantity"
  Const        r375, "cs_quantity"
  // from b in base
  IterPrep     r376, r6
  Len          r377, r376
  Const        r378, 0
  MakeMap      r379, 0, r0
  Const        r380, []
L25:
  LessInt      r382, r378, r377
  JumpIfFalse  r382, L23
  Index        r383, r376, r378
  Move         r384, r383
  // group by { item_id: b.i_item_id, item_desc: b.i_item_desc, s_store_id: b.s_store_id, s_store_name: b.s_store_name } into g
  Const        r385, "item_id"
  Const        r386, "i_item_id"
  Index        r387, r384, r386
  Const        r388, "item_desc"
  Const        r389, "i_item_desc"
  Index        r390, r384, r389
  Const        r391, "s_store_id"
  Const        r392, "s_store_id"
  Index        r393, r384, r392
  Const        r394, "s_store_name"
  Const        r395, "s_store_name"
  Index        r396, r384, r395
  Move         r397, r385
  Move         r398, r387
  Move         r399, r388
  Move         r400, r390
  Move         r401, r391
  Move         r402, r393
  Move         r403, r394
  Move         r404, r396
  MakeMap      r405, 4, r397
  Str          r406, r405
  In           r407, r406, r379
  JumpIfTrue   r407, L24
  // from b in base
  Const        r408, []
  Const        r409, "__group__"
  Const        r410, true
  Const        r411, "key"
  // group by { item_id: b.i_item_id, item_desc: b.i_item_desc, s_store_id: b.s_store_id, s_store_name: b.s_store_name } into g
  Move         r412, r405
  // from b in base
  Const        r413, "items"
  Move         r414, r408
  Const        r415, "count"
  Const        r416, 0
  Move         r417, r409
  Move         r418, r410
  Move         r419, r411
  Move         r420, r412
  Move         r421, r413
  Move         r422, r414
  Move         r423, r415
  Move         r424, r416
  MakeMap      r425, 4, r417
  SetIndex     r379, r406, r425
  Append       r380, r380, r425
L24:
  Const        r427, "items"
  Index        r428, r379, r406
  Index        r429, r428, r427
  Append       r430, r429, r383
  SetIndex     r428, r427, r430
  Const        r431, "count"
  Index        r432, r428, r431
  Const        r433, 1
  AddInt       r434, r432, r433
  SetIndex     r428, r431, r434
  Const        r435, 1
  AddInt       r378, r378, r435
  Jump         L25
L23:
  Const        r436, 0
  Len          r438, r380
L33:
  LessInt      r439, r436, r438
  JumpIfFalse  r439, L26
  Index        r441, r380, r436
  // i_item_id: g.key.item_id,
  Const        r442, "i_item_id"
  Const        r443, "key"
  Index        r444, r441, r443
  Const        r445, "item_id"
  Index        r446, r444, r445
  // i_item_desc: g.key.item_desc,
  Const        r447, "i_item_desc"
  Const        r448, "key"
  Index        r449, r441, r448
  Const        r450, "item_desc"
  Index        r451, r449, r450
  // s_store_id: g.key.s_store_id,
  Const        r452, "s_store_id"
  Const        r453, "key"
  Index        r454, r441, r453
  Const        r455, "s_store_id"
  Index        r456, r454, r455
  // s_store_name: g.key.s_store_name,
  Const        r457, "s_store_name"
  Const        r458, "key"
  Index        r459, r441, r458
  Const        r460, "s_store_name"
  Index        r461, r459, r460
  // store_sales_quantity: sum(from x in g select x.ss_quantity),
  Const        r462, "store_sales_quantity"
  Const        r463, []
  Const        r464, "ss_quantity"
  IterPrep     r465, r441
  Len          r466, r465
  Const        r467, 0
L28:
  LessInt      r469, r467, r466
  JumpIfFalse  r469, L27
  Index        r471, r465, r467
  Const        r472, "ss_quantity"
  Index        r473, r471, r472
  Append       r463, r463, r473
  Const        r475, 1
  AddInt       r467, r467, r475
  Jump         L28
L27:
  Sum          r476, r463
  // store_returns_quantity: sum(from x in g select x.sr_return_quantity),
  Const        r477, "store_returns_quantity"
  Const        r478, []
  Const        r479, "sr_return_quantity"
  IterPrep     r480, r441
  Len          r481, r480
  Const        r482, 0
L30:
  LessInt      r484, r482, r481
  JumpIfFalse  r484, L29
  Index        r471, r480, r482
  Const        r486, "sr_return_quantity"
  Index        r487, r471, r486
  Append       r478, r478, r487
  Const        r489, 1
  AddInt       r482, r482, r489
  Jump         L30
L29:
  Sum          r490, r478
  // catalog_sales_quantity: sum(from x in g select x.cs_quantity)
  Const        r491, "catalog_sales_quantity"
  Const        r492, []
  Const        r493, "cs_quantity"
  IterPrep     r494, r441
  Len          r495, r494
  Const        r496, 0
L32:
  LessInt      r498, r496, r495
  JumpIfFalse  r498, L31
  Index        r471, r494, r496
  Const        r500, "cs_quantity"
  Index        r501, r471, r500
  Append       r492, r492, r501
  Const        r503, 1
  AddInt       r496, r496, r503
  Jump         L32
L31:
  Sum          r504, r492
  // i_item_id: g.key.item_id,
  Move         r505, r442
  Move         r506, r446
  // i_item_desc: g.key.item_desc,
  Move         r507, r447
  Move         r508, r451
  // s_store_id: g.key.s_store_id,
  Move         r509, r452
  Move         r510, r456
  // s_store_name: g.key.s_store_name,
  Move         r511, r457
  Move         r512, r461
  // store_sales_quantity: sum(from x in g select x.ss_quantity),
  Move         r513, r462
  Move         r514, r476
  // store_returns_quantity: sum(from x in g select x.sr_return_quantity),
  Move         r515, r477
  Move         r516, r490
  // catalog_sales_quantity: sum(from x in g select x.cs_quantity)
  Move         r517, r491
  Move         r518, r504
  // select {
  MakeMap      r519, 7, r505
  // from b in base
  Append       r349, r349, r519
  Const        r521, 1
  AddInt       r436, r436, r521
  Jump         L33
L26:
  // json(result)
  JSON         r349
  // expect result == [
  Const        r522, [{"catalog_sales_quantity": 5, "i_item_desc": "Desc1", "i_item_id": "ITEM1", "s_store_id": "S1", "s_store_name": "Store1", "store_returns_quantity": 2, "store_sales_quantity": 10}]
  Equal        r523, r349, r522
  Expect       r523
  Return       r0
