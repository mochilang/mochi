func main (regs=61)
  // let customer = [
  Const        r0, [{"c_customer_sk": 1, "c_first_name": "John", "c_last_name": "Smith"}, {"c_customer_sk": 2, "c_first_name": "Alice", "c_last_name": "Jones"}]
  // let store_sales = [
  Const        r1, [{"d_month_seq": 1200, "ss_customer_sk": 1}, {"d_month_seq": 1205, "ss_customer_sk": 2}]
  // let catalog_sales = [
  Const        r2, [{"cs_bill_customer_sk": 1, "d_month_seq": 1203}]
  // let web_sales = [
  Const        r3, [{"d_month_seq": 1206, "ws_bill_customer_sk": 1}]
  // let store_ids = distinct(from s in store_sales where s.d_month_seq >= 1200 && s.d_month_seq <= 1211 select s.ss_customer_sk)
  Const        r4, []
  Const        r5, "d_month_seq"
  Const        r5, "d_month_seq"
  Const        r6, "ss_customer_sk"
  IterPrep     r7, r1
  Len          r8, r7
  Const        r10, 0
  Move         r9, r10
L3:
  LessInt      r11, r9, r8
  JumpIfFalse  r11, L0
  Index        r12, r7, r9
  Move         r13, r12
  Const        r5, "d_month_seq"
  Index        r14, r13, r5
  Const        r15, 1200
  LessEq       r16, r15, r14
  Const        r5, "d_month_seq"
  Index        r17, r13, r5
  Const        r18, 1211
  LessEq       r19, r17, r18
  Move         r20, r16
  JumpIfFalse  r20, L1
  Move         r20, r19
L1:
  JumpIfFalse  r20, L2
  Const        r6, "ss_customer_sk"
  Index        r21, r13, r6
  Append       r22, r4, r21
  Move         r4, r22
L2:
  Const        r23, 1
  AddInt       r9, r9, r23
  Jump         L3
L0:
  Distinct     24,4,0,0
  // let catalog_ids = distinct(from c in catalog_sales where c.d_month_seq >= 1200 && c.d_month_seq <= 1211 select c.cs_bill_customer_sk)
  Const        r25, []
  Const        r5, "d_month_seq"
  Const        r5, "d_month_seq"
  Const        r26, "cs_bill_customer_sk"
  IterPrep     r27, r2
  Len          r28, r27
  Const        r10, 0
  Move         r29, r10
L7:
  LessInt      r30, r29, r28
  JumpIfFalse  r30, L4
  Index        r31, r27, r29
  Move         r32, r31
  Const        r5, "d_month_seq"
  Index        r33, r32, r5
  Const        r15, 1200
  LessEq       r34, r15, r33
  Const        r5, "d_month_seq"
  Index        r35, r32, r5
  Const        r18, 1211
  LessEq       r36, r35, r18
  Move         r37, r34
  JumpIfFalse  r37, L5
  Move         r37, r36
L5:
  JumpIfFalse  r37, L6
  Const        r26, "cs_bill_customer_sk"
  Index        r38, r32, r26
  Append       r39, r25, r38
  Move         r25, r39
L6:
  Const        r23, 1
  AddInt       r29, r29, r23
  Jump         L7
L4:
  Distinct     40,25,0,0
  // let web_ids = distinct(from w in web_sales where w.d_month_seq >= 1200 && w.d_month_seq <= 1211 select w.ws_bill_customer_sk)
  Const        r41, []
  Const        r5, "d_month_seq"
  Const        r5, "d_month_seq"
  Const        r42, "ws_bill_customer_sk"
  IterPrep     r43, r3
  Len          r44, r43
  Const        r10, 0
  Move         r45, r10
L11:
  LessInt      r46, r45, r44
  JumpIfFalse  r46, L8
  Index        r47, r43, r45
  Move         r48, r47
  Const        r5, "d_month_seq"
  Index        r49, r48, r5
  Const        r15, 1200
  LessEq       r50, r15, r49
  Const        r5, "d_month_seq"
  Index        r51, r48, r5
  Const        r18, 1211
  LessEq       r52, r51, r18
  Move         r53, r50
  JumpIfFalse  r53, L9
  Move         r53, r52
L9:
  JumpIfFalse  r53, L10
  Const        r42, "ws_bill_customer_sk"
  Index        r54, r48, r42
  Append       r55, r41, r54
  Move         r41, r55
L10:
  Const        r23, 1
  AddInt       r45, r45, r23
  Jump         L11
L8:
  Distinct     56,41,0,0
  // let hot = store_ids intersect catalog_ids intersect web_ids
  Intersect    r57, r24, r40
  Intersect    r58, r57, r56
  // let result = len(hot)
  Len          r59, r58
  // json(result)
  JSON         r59
  // expect result == 1
  Const        r23, 1
  EqualInt     r60, r59, r23
  Expect       r60
  Return       r0

  // fun distinct(xs: list<any>): list<any> {
func distinct (regs=14)
  // var out = []
  Const        r1, []
  Move         r2, r1
  // for x in xs {
  IterPrep     r3, r0
  Len          r4, r3
  Const        r5, 0
L2:
  LessInt      r6, r5, r4
  JumpIfFalse  r6, L0
  Index        r7, r3, r5
  Move         r8, r7
  // if !contains(out, x) {
  Not          r10, r9
  JumpIfFalse  r10, L1
  // out = append(out, x)
  Append       r11, r2, r8
  Move         r2, r11
L1:
  // for x in xs {
  Const        r12, 1
  AddInt       r13, r5, r12
  Move         r5, r13
  Jump         L2
L0:
  // return out
  Return       r2