func main (regs=131)
  // let store_sales = [
  Const        r0, [{"ss_item_sk": 1, "ss_net_profit": 5, "ss_store_sk": 1}, {"ss_item_sk": 1, "ss_net_profit": 5, "ss_store_sk": 1}, {"ss_item_sk": 2, "ss_net_profit": -1, "ss_store_sk": 1}]
  // let item = [
  Const        r1, [{"i_item_sk": 1, "i_product_name": "ItemA"}, {"i_item_sk": 2, "i_product_name": "ItemB"}]
  // from ss in store_sales
  Const        r2, []
  // group by ss.ss_item_sk into g
  Const        r3, "ss_item_sk"
  // select { item_sk: g.key,
  Const        r4, "item_sk"
  Const        r5, "key"
  // avg_profit: avg(from x in g select x.ss_net_profit) }
  Const        r6, "avg_profit"
  Const        r7, "ss_net_profit"
  // from ss in store_sales
  IterPrep     r8, r0
  Len          r9, r8
  Const        r10, 0
  MakeMap      r11, 0, r0
  Const        r13, []
  Move         r12, r13
L2:
  LessInt      r14, r10, r9
  JumpIfFalse  r14, L0
  Index        r15, r8, r10
  Move         r16, r15
  // group by ss.ss_item_sk into g
  Index        r17, r16, r3
  Str          r18, r17
  In           r19, r18, r11
  JumpIfTrue   r19, L1
  // from ss in store_sales
  Const        r20, []
  Const        r21, "__group__"
  Const        r22, true
  // group by ss.ss_item_sk into g
  Move         r23, r17
  // from ss in store_sales
  Const        r24, "items"
  Move         r25, r20
  Const        r26, "count"
  Const        r27, 0
  Move         r28, r21
  Move         r29, r22
  Move         r30, r5
  Move         r31, r23
  Move         r32, r24
  Move         r33, r25
  Move         r34, r26
  Move         r35, r27
  MakeMap      r36, 4, r28
  SetIndex     r11, r18, r36
  Append       r37, r12, r36
  Move         r12, r37
L1:
  Index        r38, r11, r18
  Index        r39, r38, r24
  Append       r40, r39, r15
  SetIndex     r38, r24, r40
  Index        r41, r38, r26
  Const        r42, 1
  AddInt       r43, r41, r42
  SetIndex     r38, r26, r43
  AddInt       r10, r10, r42
  Jump         L2
L0:
  Move         r44, r27
  Len          r45, r12
L6:
  LessInt      r46, r44, r45
  JumpIfFalse  r46, L3
  Index        r47, r12, r44
  Move         r48, r47
  // select { item_sk: g.key,
  Const        r49, "item_sk"
  Index        r50, r48, r5
  // avg_profit: avg(from x in g select x.ss_net_profit) }
  Const        r51, "avg_profit"
  Const        r52, []
  IterPrep     r53, r48
  Len          r54, r53
  Move         r55, r27
L5:
  LessInt      r56, r55, r54
  JumpIfFalse  r56, L4
  Index        r57, r53, r55
  Move         r58, r57
  Index        r59, r58, r7
  Append       r60, r52, r59
  Move         r52, r60
  AddInt       r55, r55, r42
  Jump         L5
L4:
  Avg          r61, r52
  // select { item_sk: g.key,
  Move         r62, r49
  Move         r63, r50
  // avg_profit: avg(from x in g select x.ss_net_profit) }
  Move         r64, r51
  Move         r65, r61
  // select { item_sk: g.key,
  MakeMap      r66, 2, r62
  // from ss in store_sales
  Append       r67, r2, r66
  Move         r2, r67
  AddInt       r44, r44, r42
  Jump         L6
L3:
  // let best = first(from x in grouped sort by -x.avg_profit select x)
  Const        r68, []
  IterPrep     r69, r2
  Len          r70, r69
  Move         r71, r27
L8:
  LessInt      r72, r71, r70
  JumpIfFalse  r72, L7
  Index        r73, r69, r71
  Move         r58, r73
  Index        r74, r58, r6
  Neg          r75, r74
  Move         r76, r75
  Move         r77, r58
  MakeList     r78, 2, r76
  Append       r79, r68, r78
  Move         r68, r79
  AddInt       r71, r71, r42
  Jump         L8
L7:
  Sort         r80, r68
  Move         r68, r80
  First        r81, r68
  // let worst = first(from x in grouped sort by x.avg_profit select x)
  Const        r82, []
  IterPrep     r83, r2
  Len          r84, r83
  Move         r85, r27
L10:
  LessInt      r86, r85, r84
  JumpIfFalse  r86, L9
  Index        r87, r83, r85
  Move         r58, r87
  Index        r88, r58, r6
  Move         r89, r88
  Move         r90, r58
  MakeList     r91, 2, r89
  Append       r92, r82, r91
  Move         r82, r92
  AddInt       r85, r85, r42
  Jump         L10
L9:
  Sort         r93, r82
  Move         r82, r93
  First        r94, r82
  // let best_name = first(from i in item where i.i_item_sk == best.item_sk select i.i_product_name)
  Const        r95, []
  Const        r96, "i_item_sk"
  Const        r97, "i_product_name"
  IterPrep     r98, r1
  Len          r99, r98
  Move         r100, r27
L13:
  LessInt      r101, r100, r99
  JumpIfFalse  r101, L11
  Index        r102, r98, r100
  Move         r103, r102
  Index        r104, r103, r96
  Index        r105, r81, r4
  Equal        r106, r104, r105
  JumpIfFalse  r106, L12
  Index        r107, r103, r97
  Append       r108, r95, r107
  Move         r95, r108
L12:
  AddInt       r100, r100, r42
  Jump         L13
L11:
  First        r109, r95
  // let worst_name = first(from i in item where i.i_item_sk == worst.item_sk select i.i_product_name)
  Const        r110, []
  IterPrep     r111, r1
  Len          r112, r111
  Move         r113, r27
L16:
  LessInt      r114, r113, r112
  JumpIfFalse  r114, L14
  Index        r115, r111, r113
  Move         r103, r115
  Index        r116, r103, r96
  Index        r117, r94, r4
  Equal        r118, r116, r117
  JumpIfFalse  r118, L15
  Index        r119, r103, r97
  Append       r120, r110, r119
  Move         r110, r120
L15:
  AddInt       r113, r113, r42
  Jump         L16
L14:
  First        r121, r110
  // let result = { best_performing: best_name, worst_performing: worst_name }
  Const        r122, "best_performing"
  Const        r123, "worst_performing"
  Move         r124, r122
  Move         r125, r109
  Move         r126, r123
  Move         r127, r121
  MakeMap      r128, 2, r124
  // json(result)
  JSON         r128
  // expect result == { best_performing: "ItemA", worst_performing: "ItemB" }
  Const        r129, {"best_performing": "ItemA", "worst_performing": "ItemB"}
  Equal        r130, r128, r129
  Expect       r130
  Return       r0
