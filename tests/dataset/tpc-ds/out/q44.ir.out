func main (regs=130)
  // let store_sales = [
  Const        r0, [{"ss_item_sk": 1, "ss_net_profit": 5.0, "ss_store_sk": 1}, {"ss_item_sk": 1, "ss_net_profit": 5.0, "ss_store_sk": 1}, {"ss_item_sk": 2, "ss_net_profit": -1.0, "ss_store_sk": 1}]
  // let item = [
  Const        r1, [{"i_item_sk": 1, "i_product_name": "ItemA"}, {"i_item_sk": 2, "i_product_name": "ItemB"}]
  // from ss in store_sales
  Const        r2, []
  // group by ss.ss_item_sk into g
  Const        r3, "ss_item_sk"
  // select { item_sk: g.key,
  Const        r4, "item_sk"
  Const        r5, "key"
  // avg_profit: avg(from x in g select x.ss_net_profit) }
  Const        r6, "avg_profit"
  Const        r7, "ss_net_profit"
  // from ss in store_sales
  IterPrep     r8, r0
  Len          r9, r8
  Const        r10, 0
  MakeMap      r11, 0, r0
  Const        r13, []
  Move         r12, r13
L2:
  LessInt      r14, r10, r9
  JumpIfFalse  r14, L0
  Index        r15, r8, r10
  Move         r16, r15
  // group by ss.ss_item_sk into g
  Const        r3, "ss_item_sk"
  Index        r17, r16, r3
  Str          r18, r17
  In           r19, r18, r11
  JumpIfTrue   r19, L1
  // from ss in store_sales
  Const        r13, []
  Const        r20, "__group__"
  Const        r21, true
  Const        r5, "key"
  // group by ss.ss_item_sk into g
  Move         r22, r17
  // from ss in store_sales
  Const        r23, "items"
  Move         r24, r13
  Const        r25, "count"
  Const        r26, 0
  Move         r27, r20
  Move         r28, r21
  Move         r29, r5
  Move         r30, r22
  Move         r31, r23
  Move         r32, r24
  Move         r33, r25
  Move         r34, r26
  MakeMap      r35, 4, r27
  SetIndex     r11, r18, r35
  Append       r36, r12, r35
  Move         r12, r36
L1:
  Const        r23, "items"
  Index        r37, r11, r18
  Index        r38, r37, r23
  Append       r39, r38, r15
  SetIndex     r37, r23, r39
  Const        r25, "count"
  Index        r40, r37, r25
  Const        r41, 1
  AddInt       r42, r40, r41
  SetIndex     r37, r25, r42
  Const        r41, 1
  AddInt       r10, r10, r41
  Jump         L2
L0:
  Const        r26, 0
  Move         r43, r26
  Len          r44, r12
L6:
  LessInt      r45, r43, r44
  JumpIfFalse  r45, L3
  Index        r46, r12, r43
  Move         r47, r46
  // select { item_sk: g.key,
  Const        r48, "item_sk"
  Const        r5, "key"
  Index        r49, r47, r5
  // avg_profit: avg(from x in g select x.ss_net_profit) }
  Const        r50, "avg_profit"
  Const        r51, []
  Const        r7, "ss_net_profit"
  IterPrep     r52, r47
  Len          r53, r52
  Const        r26, 0
  Move         r54, r26
L5:
  LessInt      r55, r54, r53
  JumpIfFalse  r55, L4
  Index        r56, r52, r54
  Move         r57, r56
  Const        r7, "ss_net_profit"
  Index        r58, r57, r7
  Append       r59, r51, r58
  Move         r51, r59
  Const        r41, 1
  AddInt       r54, r54, r41
  Jump         L5
L4:
  Avg          r60, r51
  // select { item_sk: g.key,
  Move         r61, r48
  Move         r62, r49
  // avg_profit: avg(from x in g select x.ss_net_profit) }
  Move         r63, r50
  Move         r64, r60
  // select { item_sk: g.key,
  MakeMap      r65, 2, r61
  // from ss in store_sales
  Append       r66, r2, r65
  Move         r2, r66
  Const        r41, 1
  AddInt       r43, r43, r41
  Jump         L6
L3:
  // let best = first(from x in grouped sort by -x.avg_profit select x)
  Const        r67, []
  Const        r6, "avg_profit"
  IterPrep     r68, r2
  Len          r69, r68
  Const        r26, 0
  Move         r70, r26
L8:
  LessInt      r71, r70, r69
  JumpIfFalse  r71, L7
  Index        r72, r68, r70
  Move         r57, r72
  Const        r6, "avg_profit"
  Index        r75, r57, r6
  Neg          r76, r75
  Move         r73, r76
  Move         r74, r57
  MakeList     r77, 2, r73
  Append       r78, r67, r77
  Move         r67, r78
  Const        r41, 1
  AddInt       r70, r70, r41
  Jump         L8
L7:
  Sort         r79, r67
  Move         r67, r79
  First        r80, r67
  // let worst = first(from x in grouped sort by x.avg_profit select x)
  Const        r81, []
  Const        r6, "avg_profit"
  IterPrep     r82, r2
  Len          r83, r82
  Const        r26, 0
  Move         r84, r26
L10:
  LessInt      r85, r84, r83
  JumpIfFalse  r85, L9
  Index        r86, r82, r84
  Move         r57, r86
  Const        r6, "avg_profit"
  Index        r89, r57, r6
  Move         r87, r89
  Move         r88, r57
  MakeList     r90, 2, r87
  Append       r91, r81, r90
  Move         r81, r91
  Const        r41, 1
  AddInt       r84, r84, r41
  Jump         L10
L9:
  Sort         r92, r81
  Move         r81, r92
  First        r93, r81
  // let best_name = first(from i in item where i.i_item_sk == best.item_sk select i.i_product_name)
  Const        r94, []
  Const        r95, "i_item_sk"
  Const        r4, "item_sk"
  Const        r96, "i_product_name"
  IterPrep     r97, r1
  Len          r98, r97
  Const        r26, 0
  Move         r99, r26
L13:
  LessInt      r100, r99, r98
  JumpIfFalse  r100, L11
  Index        r101, r97, r99
  Move         r102, r101
  Const        r95, "i_item_sk"
  Index        r103, r102, r95
  Const        r4, "item_sk"
  Index        r104, r80, r4
  Equal        r105, r103, r104
  JumpIfFalse  r105, L12
  Const        r96, "i_product_name"
  Index        r106, r102, r96
  Append       r107, r94, r106
  Move         r94, r107
L12:
  Const        r41, 1
  AddInt       r99, r99, r41
  Jump         L13
L11:
  First        r108, r94
  // let worst_name = first(from i in item where i.i_item_sk == worst.item_sk select i.i_product_name)
  Const        r109, []
  Const        r95, "i_item_sk"
  Const        r4, "item_sk"
  Const        r96, "i_product_name"
  IterPrep     r110, r1
  Len          r111, r110
  Const        r26, 0
  Move         r112, r26
L16:
  LessInt      r113, r112, r111
  JumpIfFalse  r113, L14
  Index        r114, r110, r112
  Move         r102, r114
  Const        r95, "i_item_sk"
  Index        r115, r102, r95
  Const        r4, "item_sk"
  Index        r116, r93, r4
  Equal        r117, r115, r116
  JumpIfFalse  r117, L15
  Const        r96, "i_product_name"
  Index        r118, r102, r96
  Append       r119, r109, r118
  Move         r109, r119
L15:
  Const        r41, 1
  AddInt       r112, r112, r41
  Jump         L16
L14:
  First        r120, r109
  // let result = { best_performing: best_name, worst_performing: worst_name }
  Const        r121, "best_performing"
  Const        r122, "worst_performing"
  Move         r123, r121
  Move         r124, r108
  Move         r125, r122
  Move         r126, r120
  MakeMap      r127, 2, r123
  // json(result)
  JSON         r127
  // expect result == { best_performing: "ItemA", worst_performing: "ItemB" }
  Const        r128, {"best_performing": "ItemA", "worst_performing": "ItemB"}
  Equal        r129, r127, r128
  Expect       r129
  Return       r0
