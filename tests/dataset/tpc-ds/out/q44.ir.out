func main (regs=165)
  // let store_sales = [
  Const        r0, [{"ss_item_sk": 1, "ss_net_profit": 5, "ss_store_sk": 1}, {"ss_item_sk": 1, "ss_net_profit": 5, "ss_store_sk": 1}, {"ss_item_sk": 2, "ss_net_profit": -1, "ss_store_sk": 1}]
  // let item = [
  Const        r1, [{"i_item_sk": 1, "i_product_name": "ItemA"}, {"i_item_sk": 2, "i_product_name": "ItemB"}]
  // from ss in store_sales
  Const        r2, []
  // group by ss.ss_item_sk into g
  Const        r3, "ss_item_sk"
  // select { item_sk: g.key,
  Const        r4, "item_sk"
  Const        r5, "key"
  // avg_profit: avg(from x in g select x.ss_net_profit) }
  Const        r6, "avg_profit"
  Const        r7, "ss_net_profit"
  // from ss in store_sales
  IterPrep     r8, r0
  Len          r9, r8
  Const        r10, 0
  MakeMap      r11, 0, r0
  Const        r13, []
  Move         r12, r13
L2:
  LessInt      r14, r10, r9
  JumpIfFalse  r14, L0
  Index        r15, r8, r10
  Move         r16, r15
  // group by ss.ss_item_sk into g
  Const        r17, "ss_item_sk"
  Index        r18, r16, r17
  Str          r19, r18
  In           r20, r19, r11
  JumpIfTrue   r20, L1
  // from ss in store_sales
  Const        r21, []
  Const        r22, "__group__"
  Const        r23, true
  Const        r24, "key"
  // group by ss.ss_item_sk into g
  Move         r25, r18
  // from ss in store_sales
  Const        r26, "items"
  Move         r27, r21
  Const        r28, "count"
  Const        r29, 0
  Move         r30, r22
  Move         r31, r23
  Move         r32, r24
  Move         r33, r25
  Move         r34, r26
  Move         r35, r27
  Move         r36, r28
  Move         r37, r29
  MakeMap      r38, 4, r30
  SetIndex     r11, r19, r38
  Append       r39, r12, r38
  Move         r12, r39
L1:
  Const        r40, "items"
  Index        r41, r11, r19
  Index        r42, r41, r40
  Append       r43, r42, r15
  SetIndex     r41, r40, r43
  Const        r44, "count"
  Index        r45, r41, r44
  Const        r46, 1
  AddInt       r47, r45, r46
  SetIndex     r41, r44, r47
  Const        r48, 1
  AddInt       r10, r10, r48
  Jump         L2
L0:
  Const        r50, 0
  Move         r49, r50
  Len          r51, r12
L6:
  LessInt      r52, r49, r51
  JumpIfFalse  r52, L3
  Index        r53, r12, r49
  Move         r54, r53
  // select { item_sk: g.key,
  Const        r55, "item_sk"
  Const        r56, "key"
  Index        r57, r54, r56
  // avg_profit: avg(from x in g select x.ss_net_profit) }
  Const        r58, "avg_profit"
  Const        r59, []
  Const        r60, "ss_net_profit"
  IterPrep     r61, r54
  Len          r62, r61
  Const        r64, 0
  Move         r63, r64
L5:
  LessInt      r65, r63, r62
  JumpIfFalse  r65, L4
  Index        r66, r61, r63
  Move         r67, r66
  Const        r68, "ss_net_profit"
  Index        r69, r67, r68
  Append       r70, r59, r69
  Move         r59, r70
  Const        r71, 1
  AddInt       r63, r63, r71
  Jump         L5
L4:
  Avg          r72, r59
  // select { item_sk: g.key,
  Move         r73, r55
  Move         r74, r57
  // avg_profit: avg(from x in g select x.ss_net_profit) }
  Move         r75, r58
  Move         r76, r72
  // select { item_sk: g.key,
  MakeMap      r77, 2, r73
  // from ss in store_sales
  Append       r78, r2, r77
  Move         r2, r78
  Const        r79, 1
  AddInt       r49, r49, r79
  Jump         L6
L3:
  // let best = first(from x in grouped sort by -x.avg_profit select x)
  Const        r80, []
  Const        r81, "avg_profit"
  IterPrep     r82, r2
  Len          r83, r82
  Const        r85, 0
  Move         r84, r85
L8:
  LessInt      r86, r84, r83
  JumpIfFalse  r86, L7
  Index        r87, r82, r84
  Move         r67, r87
  Const        r88, "avg_profit"
  Index        r89, r67, r88
  Neg          r90, r89
  Move         r91, r90
  Move         r92, r67
  MakeList     r93, 2, r91
  Append       r94, r80, r93
  Move         r80, r94
  Const        r95, 1
  AddInt       r84, r84, r95
  Jump         L8
L7:
  Sort         r96, r80
  Move         r80, r96
  First        r97, r80
  // let worst = first(from x in grouped sort by x.avg_profit select x)
  Const        r98, []
  Const        r99, "avg_profit"
  IterPrep     r100, r2
  Len          r101, r100
  Const        r103, 0
  Move         r102, r103
L10:
  LessInt      r104, r102, r101
  JumpIfFalse  r104, L9
  Index        r105, r100, r102
  Move         r67, r105
  Const        r106, "avg_profit"
  Index        r107, r67, r106
  Move         r108, r107
  Move         r109, r67
  MakeList     r110, 2, r108
  Append       r111, r98, r110
  Move         r98, r111
  Const        r112, 1
  AddInt       r102, r102, r112
  Jump         L10
L9:
  Sort         r113, r98
  Move         r98, r113
  First        r114, r98
  // let best_name = first(from i in item where i.i_item_sk == best.item_sk select i.i_product_name)
  Const        r115, []
  Const        r116, "i_item_sk"
  Const        r117, "item_sk"
  Const        r118, "i_product_name"
  IterPrep     r119, r1
  Len          r120, r119
  Const        r122, 0
  Move         r121, r122
L13:
  LessInt      r123, r121, r120
  JumpIfFalse  r123, L11
  Index        r124, r119, r121
  Move         r125, r124
  Const        r126, "i_item_sk"
  Index        r127, r125, r126
  Const        r128, "item_sk"
  Index        r129, r97, r128
  Equal        r130, r127, r129
  JumpIfFalse  r130, L12
  Const        r131, "i_product_name"
  Index        r132, r125, r131
  Append       r133, r115, r132
  Move         r115, r133
L12:
  Const        r134, 1
  AddInt       r121, r121, r134
  Jump         L13
L11:
  First        r135, r115
  // let worst_name = first(from i in item where i.i_item_sk == worst.item_sk select i.i_product_name)
  Const        r136, []
  Const        r137, "i_item_sk"
  Const        r138, "item_sk"
  Const        r139, "i_product_name"
  IterPrep     r140, r1
  Len          r141, r140
  Const        r143, 0
  Move         r142, r143
L16:
  LessInt      r144, r142, r141
  JumpIfFalse  r144, L14
  Index        r145, r140, r142
  Move         r125, r145
  Const        r146, "i_item_sk"
  Index        r147, r125, r146
  Const        r148, "item_sk"
  Index        r149, r114, r148
  Equal        r150, r147, r149
  JumpIfFalse  r150, L15
  Const        r151, "i_product_name"
  Index        r152, r125, r151
  Append       r153, r136, r152
  Move         r136, r153
L15:
  Const        r154, 1
  AddInt       r142, r142, r154
  Jump         L16
L14:
  First        r155, r136
  // let result = { best_performing: best_name, worst_performing: worst_name }
  Const        r156, "best_performing"
  Const        r157, "worst_performing"
  Move         r158, r156
  Move         r159, r135
  Move         r160, r157
  Move         r161, r155
  MakeMap      r162, 2, r158
  // json(result)
  JSON         r162
  // expect result == { best_performing: "ItemA", worst_performing: "ItemB" }
  Const        r163, {"best_performing": "ItemA", "worst_performing": "ItemB"}
  Equal        r164, r162, r163
  Expect       r164
  Return       r0
