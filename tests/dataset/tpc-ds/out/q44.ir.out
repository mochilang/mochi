func main (regs=135)
  // let store_sales = [
  Const        r0, [{"ss_item_sk": 1, "ss_net_profit": 5, "ss_store_sk": 1}, {"ss_item_sk": 1, "ss_net_profit": 5, "ss_store_sk": 1}, {"ss_item_sk": 2, "ss_net_profit": -1, "ss_store_sk": 1}]
  // let item = [
  Const        r1, [{"i_item_sk": 1, "i_product_name": "ItemA"}, {"i_item_sk": 2, "i_product_name": "ItemB"}]
  // from ss in store_sales
  Const        r2, []
  // group by ss.ss_item_sk into g
  Const        r3, "ss_item_sk"
  // select { item_sk: g.key,
  Const        r4, "item_sk"
  Const        r5, "key"
  // avg_profit: avg(from x in g select x.ss_net_profit) }
  Const        r6, "avg_profit"
  Const        r7, "ss_net_profit"
  // from ss in store_sales
  IterPrep     r8, r0
  Len          r9, r8
  Const        r10, 0
  MakeMap      r11, 0, r0
  Const        r12, []
L2:
  LessInt      r14, r10, r9
  JumpIfFalse  r14, L0
  Index        r15, r8, r10
  // group by ss.ss_item_sk into g
  Index        r17, r15, r3
  Str          r18, r17
  In           r19, r18, r11
  JumpIfTrue   r19, L1
  // from ss in store_sales
  Const        r20, []
  Const        r21, "__group__"
  Const        r22, true
  Const        r23, "key"
  // group by ss.ss_item_sk into g
  Move         r24, r17
  // from ss in store_sales
  Const        r25, "items"
  Move         r26, r20
  Const        r27, "count"
  Const        r28, 0
  Move         r29, r21
  Move         r30, r22
  Move         r31, r23
  Move         r32, r24
  Move         r33, r25
  Move         r34, r26
  Move         r35, r27
  Move         r36, r28
  MakeMap      r37, 4, r29
  SetIndex     r11, r18, r37
  Append       r12, r12, r37
L1:
  Const        r39, "items"
  Index        r40, r11, r18
  Index        r41, r40, r39
  Append       r42, r41, r15
  SetIndex     r40, r39, r42
  Const        r43, "count"
  Index        r44, r40, r43
  Const        r45, 1
  AddInt       r46, r44, r45
  SetIndex     r40, r43, r46
  AddInt       r10, r10, r45
  Jump         L2
L0:
  Const        r48, 0
  Move         r47, r48
  Len          r49, r12
L6:
  LessInt      r50, r47, r49
  JumpIfFalse  r50, L3
  Index        r52, r12, r47
  // select { item_sk: g.key,
  Const        r53, "item_sk"
  Index        r54, r52, r5
  // avg_profit: avg(from x in g select x.ss_net_profit) }
  Const        r55, "avg_profit"
  Const        r56, []
  IterPrep     r57, r52
  Len          r58, r57
  Move         r59, r48
L5:
  LessInt      r60, r59, r58
  JumpIfFalse  r60, L4
  Index        r62, r57, r59
  Index        r63, r62, r7
  Append       r56, r56, r63
  AddInt       r59, r59, r45
  Jump         L5
L4:
  Avg          r65, r56
  // select { item_sk: g.key,
  Move         r66, r53
  Move         r67, r54
  // avg_profit: avg(from x in g select x.ss_net_profit) }
  Move         r68, r55
  Move         r69, r65
  // select { item_sk: g.key,
  MakeMap      r70, 2, r66
  // from ss in store_sales
  Append       r2, r2, r70
  AddInt       r47, r47, r45
  Jump         L6
L3:
  // let best = first(from x in grouped sort by -x.avg_profit select x)
  Const        r72, []
  IterPrep     r73, r2
  Len          r74, r73
  Move         r75, r48
L8:
  LessInt      r76, r75, r74
  JumpIfFalse  r76, L7
  Index        r62, r73, r75
  Index        r78, r62, r6
  Neg          r80, r78
  Move         r81, r62
  MakeList     r82, 2, r80
  Append       r72, r72, r82
  AddInt       r75, r75, r45
  Jump         L8
L7:
  Sort         r72, r72
  First        r85, r72
  // let worst = first(from x in grouped sort by x.avg_profit select x)
  Const        r86, []
  IterPrep     r87, r2
  Len          r88, r87
  Move         r89, r48
L10:
  LessInt      r90, r89, r88
  JumpIfFalse  r90, L9
  Index        r62, r87, r89
  Index        r93, r62, r6
  Move         r94, r62
  MakeList     r95, 2, r93
  Append       r86, r86, r95
  AddInt       r89, r89, r45
  Jump         L10
L9:
  Sort         r86, r86
  First        r98, r86
  // let best_name = first(from i in item where i.i_item_sk == best.item_sk select i.i_product_name)
  Const        r99, []
  Const        r100, "i_item_sk"
  Const        r101, "i_product_name"
  IterPrep     r102, r1
  Len          r103, r102
  Move         r104, r48
L13:
  LessInt      r105, r104, r103
  JumpIfFalse  r105, L11
  Index        r107, r102, r104
  Index        r108, r107, r100
  Index        r109, r85, r4
  Equal        r110, r108, r109
  JumpIfFalse  r110, L12
  Index        r111, r107, r101
  Append       r99, r99, r111
L12:
  AddInt       r104, r104, r45
  Jump         L13
L11:
  First        r113, r99
  // let worst_name = first(from i in item where i.i_item_sk == worst.item_sk select i.i_product_name)
  Const        r114, []
  IterPrep     r115, r1
  Len          r116, r115
  Move         r117, r48
L16:
  LessInt      r118, r117, r116
  JumpIfFalse  r118, L14
  Index        r107, r115, r117
  Index        r120, r107, r100
  Index        r121, r98, r4
  Equal        r122, r120, r121
  JumpIfFalse  r122, L15
  Index        r123, r107, r101
  Append       r114, r114, r123
L15:
  AddInt       r117, r117, r45
  Jump         L16
L14:
  First        r125, r114
  // let result = { best_performing: best_name, worst_performing: worst_name }
  Const        r126, "best_performing"
  Const        r127, "worst_performing"
  Move         r128, r126
  Move         r129, r113
  Move         r130, r127
  Move         r131, r125
  MakeMap      r132, 2, r128
  // json(result)
  JSON         r132
  // expect result == { best_performing: "ItemA", worst_performing: "ItemB" }
  Const        r133, {"best_performing": "ItemA", "worst_performing": "ItemB"}
  Equal        r134, r132, r133
  Expect       r134
  Return       r0
