func main (regs=167)
  // let store_sales = [
  Const        r0, [{"ss_item_sk": 1, "ss_net_profit": 5, "ss_store_sk": 1}, {"ss_item_sk": 1, "ss_net_profit": 5, "ss_store_sk": 1}, {"ss_item_sk": 2, "ss_net_profit": -1, "ss_store_sk": 1}]
  // let item = [
  Const        r1, [{"i_item_sk": 1, "i_product_name": "ItemA"}, {"i_item_sk": 2, "i_product_name": "ItemB"}]
  // let dummy = null
  Const        r2, nil
  // from ss in store_sales
  Const        r3, []
  // group by ss.ss_item_sk into g
  Const        r4, "ss_item_sk"
  // select { item_sk: g.key,
  Const        r5, "item_sk"
  Const        r6, "key"
  // avg_profit: avg(from x in g select x.ss_net_profit) }
  Const        r7, "avg_profit"
  Const        r8, "ss_net_profit"
  // from ss in store_sales
  IterPrep     r9, r0
  Len          r10, r9
  Const        r11, 0
  MakeMap      r12, 0, r0
  Const        r13, []
L2:
  LessInt      r15, r11, r10
  JumpIfFalse  r15, L0
  Index        r16, r9, r11
  Move         r17, r16
  // group by ss.ss_item_sk into g
  Const        r18, "ss_item_sk"
  Index        r19, r17, r18
  Str          r20, r19
  In           r21, r20, r12
  JumpIfTrue   r21, L1
  // from ss in store_sales
  Const        r22, []
  Const        r23, "__group__"
  Const        r24, true
  Const        r25, "key"
  // group by ss.ss_item_sk into g
  Move         r26, r19
  // from ss in store_sales
  Const        r27, "items"
  Move         r28, r22
  Const        r29, "count"
  Const        r30, 0
  Move         r31, r23
  Move         r32, r24
  Move         r33, r25
  Move         r34, r26
  Move         r35, r27
  Move         r36, r28
  Move         r37, r29
  Move         r38, r30
  MakeMap      r39, 4, r31
  SetIndex     r12, r20, r39
  Append       r13, r13, r39
L1:
  Const        r41, "items"
  Index        r42, r12, r20
  Index        r43, r42, r41
  Append       r44, r43, r16
  SetIndex     r42, r41, r44
  Const        r45, "count"
  Index        r46, r42, r45
  Const        r47, 1
  AddInt       r48, r46, r47
  SetIndex     r42, r45, r48
  Const        r49, 1
  AddInt       r11, r11, r49
  Jump         L2
L0:
  Const        r50, 0
  Len          r52, r13
L6:
  LessInt      r53, r50, r52
  JumpIfFalse  r53, L3
  Index        r55, r13, r50
  // select { item_sk: g.key,
  Const        r56, "item_sk"
  Const        r57, "key"
  Index        r58, r55, r57
  // avg_profit: avg(from x in g select x.ss_net_profit) }
  Const        r59, "avg_profit"
  Const        r60, []
  Const        r61, "ss_net_profit"
  IterPrep     r62, r55
  Len          r63, r62
  Const        r64, 0
L5:
  LessInt      r66, r64, r63
  JumpIfFalse  r66, L4
  Index        r68, r62, r64
  Const        r69, "ss_net_profit"
  Index        r70, r68, r69
  Append       r60, r60, r70
  Const        r72, 1
  AddInt       r64, r64, r72
  Jump         L5
L4:
  Avg          r73, r60
  // select { item_sk: g.key,
  Move         r74, r56
  Move         r75, r58
  // avg_profit: avg(from x in g select x.ss_net_profit) }
  Move         r76, r59
  Move         r77, r73
  // select { item_sk: g.key,
  MakeMap      r78, 2, r74
  // from ss in store_sales
  Append       r3, r3, r78
  Const        r80, 1
  AddInt       r50, r50, r80
  Jump         L6
L3:
  // let grouped = concat(dummy, grouped_base)
  UnionAll     r81, r2, r3
  // let best = first(from x in grouped sort by -x.avg_profit select x)
  Const        r82, []
  Const        r83, "avg_profit"
  IterPrep     r84, r81
  Len          r85, r84
  Const        r86, 0
L8:
  LessInt      r88, r86, r85
  JumpIfFalse  r88, L7
  Index        r68, r84, r86
  Const        r90, "avg_profit"
  Index        r91, r68, r90
  Neg          r93, r91
  Move         r94, r68
  MakeList     r95, 2, r93
  Append       r82, r82, r95
  Const        r97, 1
  AddInt       r86, r86, r97
  Jump         L8
L7:
  Sort         r82, r82
  First        r99, r82
  // let worst = first(from x in grouped sort by x.avg_profit select x)
  Const        r100, []
  Const        r101, "avg_profit"
  IterPrep     r102, r81
  Len          r103, r102
  Const        r104, 0
L10:
  LessInt      r106, r104, r103
  JumpIfFalse  r106, L9
  Index        r68, r102, r104
  Const        r108, "avg_profit"
  Index        r110, r68, r108
  Move         r111, r68
  MakeList     r112, 2, r110
  Append       r100, r100, r112
  Const        r114, 1
  AddInt       r104, r104, r114
  Jump         L10
L9:
  Sort         r100, r100
  First        r116, r100
  // let best_name = first(from i in item where i.i_item_sk == best.item_sk select i.i_product_name)
  Const        r117, []
  Const        r118, "i_item_sk"
  Const        r119, "item_sk"
  Const        r120, "i_product_name"
  IterPrep     r121, r1
  Len          r122, r121
  Const        r123, 0
L13:
  LessInt      r125, r123, r122
  JumpIfFalse  r125, L11
  Index        r127, r121, r123
  Const        r128, "i_item_sk"
  Index        r129, r127, r128
  Const        r130, "item_sk"
  Index        r131, r99, r130
  Equal        r132, r129, r131
  JumpIfFalse  r132, L12
  Const        r133, "i_product_name"
  Index        r134, r127, r133
  Append       r117, r117, r134
L12:
  Const        r136, 1
  AddInt       r123, r123, r136
  Jump         L13
L11:
  First        r137, r117
  // let worst_name = first(from i in item where i.i_item_sk == worst.item_sk select i.i_product_name)
  Const        r138, []
  Const        r139, "i_item_sk"
  Const        r140, "item_sk"
  Const        r141, "i_product_name"
  IterPrep     r142, r1
  Len          r143, r142
  Const        r144, 0
L16:
  LessInt      r146, r144, r143
  JumpIfFalse  r146, L14
  Index        r127, r142, r144
  Const        r148, "i_item_sk"
  Index        r149, r127, r148
  Const        r150, "item_sk"
  Index        r151, r116, r150
  Equal        r152, r149, r151
  JumpIfFalse  r152, L15
  Const        r153, "i_product_name"
  Index        r154, r127, r153
  Append       r138, r138, r154
L15:
  Const        r156, 1
  AddInt       r144, r144, r156
  Jump         L16
L14:
  First        r157, r138
  // let result = { best_performing: best_name, worst_performing: worst_name }
  Const        r158, "best_performing"
  Const        r159, "worst_performing"
  Move         r160, r158
  Move         r161, r137
  Move         r162, r159
  Move         r163, r157
  MakeMap      r164, 2, r160
  // json(result)
  JSON         r164
  // expect result == { best_performing: "ItemA", worst_performing: "ItemB" }
  Const        r165, {"best_performing": "ItemA", "worst_performing": "ItemB"}
  Equal        r166, r164, r165
  Expect       r166
  Return       r0
