func main (regs=207)
  // let store_sales = [
  Const        r0, [{"ss_ext_sales_price": 100, "ss_item_sk": 1, "ss_net_profit": 20, "ss_sold_date_sk": 1, "ss_store_sk": 1}, {"ss_ext_sales_price": 200, "ss_item_sk": 2, "ss_net_profit": 50, "ss_sold_date_sk": 1, "ss_store_sk": 1}, {"ss_ext_sales_price": 150, "ss_item_sk": 3, "ss_net_profit": 30, "ss_sold_date_sk": 1, "ss_store_sk": 2}]
  // let item = [
  Const        r1, [{"i_category": "Books", "i_class": "C1", "i_item_sk": 1}, {"i_category": "Books", "i_class": "C2", "i_item_sk": 2}, {"i_category": "Electronics", "i_class": "C3", "i_item_sk": 3}]
  // let store = [
  Const        r2, [{"s_state": "A", "s_store_sk": 1}, {"s_state": "B", "s_store_sk": 2}]
  // let date_dim = [
  Const        r3, [{"d_date_sk": 1, "d_year": 2000}]
  // from ss in store_sales
  Const        r4, []
  // group by {category: i.i_category, class: i.i_class} into g
  Const        r5, "category"
  Const        r6, "i_category"
  Const        r7, "class"
  Const        r8, "i_class"
  // where d.d_year == 2000 && s.s_state in ["A", "B"]
  Const        r9, "d_year"
  Const        r10, "s_state"
  // i_category: g.key.category,
  Const        r11, "i_category"
  Const        r12, "key"
  Const        r13, "category"
  // i_class: g.key.class,
  Const        r14, "i_class"
  Const        r15, "key"
  Const        r16, "class"
  // gross_margin: sum(from x in g select x.ss.ss_net_profit) / sum(from x in g select x.ss.ss_ext_sales_price)
  Const        r17, "gross_margin"
  Const        r18, "ss"
  Const        r19, "ss_net_profit"
  Const        r20, "ss"
  Const        r21, "ss_ext_sales_price"
  // sort by [g.key.category, g.key.class]
  Const        r22, "key"
  Const        r23, "category"
  Const        r24, "key"
  Const        r25, "class"
  // from ss in store_sales
  MakeMap      r26, 0, r0
  Const        r27, []
  IterPrep     r29, r0
  Len          r30, r29
  Const        r31, 0
L10:
  LessInt      r32, r31, r30
  JumpIfFalse  r32, L0
  Index        r34, r29, r31
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  IterPrep     r35, r3
  Len          r36, r35
  Const        r37, 0
L9:
  LessInt      r38, r37, r36
  JumpIfFalse  r38, L1
  Index        r40, r35, r37
  Const        r41, "ss_sold_date_sk"
  Index        r42, r34, r41
  Const        r43, "d_date_sk"
  Index        r44, r40, r43
  Equal        r45, r42, r44
  JumpIfFalse  r45, L2
  // join i in item on ss.ss_item_sk == i.i_item_sk
  IterPrep     r46, r1
  Len          r47, r46
  Const        r48, 0
L8:
  LessInt      r49, r48, r47
  JumpIfFalse  r49, L2
  Index        r51, r46, r48
  Const        r52, "ss_item_sk"
  Index        r53, r34, r52
  Const        r54, "i_item_sk"
  Index        r55, r51, r54
  Equal        r56, r53, r55
  JumpIfFalse  r56, L3
  // join s in store on ss.ss_store_sk == s.s_store_sk
  IterPrep     r57, r2
  Len          r58, r57
  Const        r59, 0
L7:
  LessInt      r60, r59, r58
  JumpIfFalse  r60, L3
  Index        r62, r57, r59
  Const        r63, "ss_store_sk"
  Index        r64, r34, r63
  Const        r65, "s_store_sk"
  Index        r66, r62, r65
  Equal        r67, r64, r66
  JumpIfFalse  r67, L4
  // where d.d_year == 2000 && s.s_state in ["A", "B"]
  Const        r68, "d_year"
  Index        r69, r40, r68
  Const        r70, 2000
  Equal        r71, r69, r70
  Const        r72, "s_state"
  Index        r73, r62, r72
  Const        r74, ["A", "B"]
  In           r75, r73, r74
  Move         r76, r71
  JumpIfFalse  r76, L5
  Move         r76, r75
L5:
  JumpIfFalse  r76, L4
  // from ss in store_sales
  Const        r77, "ss"
  Move         r78, r34
  Const        r79, "d"
  Move         r80, r40
  Const        r81, "i"
  Move         r82, r51
  Const        r83, "s"
  Move         r84, r62
  MakeMap      r85, 4, r77
  // group by {category: i.i_category, class: i.i_class} into g
  Const        r86, "category"
  Const        r87, "i_category"
  Index        r88, r51, r87
  Const        r89, "class"
  Const        r90, "i_class"
  Index        r91, r51, r90
  Move         r92, r86
  Move         r93, r88
  Move         r94, r89
  Move         r95, r91
  MakeMap      r96, 2, r92
  Str          r97, r96
  In           r98, r97, r26
  JumpIfTrue   r98, L6
  // from ss in store_sales
  Const        r99, []
  Const        r100, "__group__"
  Const        r101, true
  Const        r102, "key"
  // group by {category: i.i_category, class: i.i_class} into g
  Move         r103, r96
  // from ss in store_sales
  Const        r104, "items"
  Move         r105, r99
  Const        r106, "count"
  Const        r107, 0
  Move         r108, r100
  Move         r109, r101
  Move         r110, r102
  Move         r111, r103
  Move         r112, r104
  Move         r113, r105
  Move         r114, r106
  Move         r115, r107
  MakeMap      r116, 4, r108
  SetIndex     r26, r97, r116
  Append       r27, r27, r116
L6:
  Const        r118, "items"
  Index        r119, r26, r97
  Index        r120, r119, r118
  Append       r121, r120, r85
  SetIndex     r119, r118, r121
  Const        r122, "count"
  Index        r123, r119, r122
  Const        r124, 1
  AddInt       r125, r123, r124
  SetIndex     r119, r122, r125
L4:
  // join s in store on ss.ss_store_sk == s.s_store_sk
  Const        r126, 1
  AddInt       r59, r59, r126
  Jump         L7
L3:
  // join i in item on ss.ss_item_sk == i.i_item_sk
  Const        r127, 1
  AddInt       r48, r48, r127
  Jump         L8
L2:
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  Const        r128, 1
  AddInt       r37, r37, r128
  Jump         L9
L1:
  // from ss in store_sales
  Const        r129, 1
  AddInt       r31, r31, r129
  Jump         L10
L0:
  Const        r130, 0
  Len          r132, r27
L16:
  LessInt      r133, r130, r132
  JumpIfFalse  r133, L11
  Index        r135, r27, r130
  // i_category: g.key.category,
  Const        r136, "i_category"
  Const        r137, "key"
  Index        r138, r135, r137
  Const        r139, "category"
  Index        r140, r138, r139
  // i_class: g.key.class,
  Const        r141, "i_class"
  Const        r142, "key"
  Index        r143, r135, r142
  Const        r144, "class"
  Index        r145, r143, r144
  // gross_margin: sum(from x in g select x.ss.ss_net_profit) / sum(from x in g select x.ss.ss_ext_sales_price)
  Const        r146, "gross_margin"
  Const        r147, []
  Const        r148, "ss"
  Const        r149, "ss_net_profit"
  IterPrep     r150, r135
  Len          r151, r150
  Const        r152, 0
L13:
  LessInt      r154, r152, r151
  JumpIfFalse  r154, L12
  Index        r156, r150, r152
  Const        r157, "ss"
  Index        r158, r156, r157
  Const        r159, "ss_net_profit"
  Index        r160, r158, r159
  Append       r147, r147, r160
  Const        r162, 1
  AddInt       r152, r152, r162
  Jump         L13
L12:
  Sum          r163, r147
  Const        r164, []
  Const        r165, "ss"
  Const        r166, "ss_ext_sales_price"
  IterPrep     r167, r135
  Len          r168, r167
  Const        r169, 0
L15:
  LessInt      r171, r169, r168
  JumpIfFalse  r171, L14
  Index        r156, r167, r169
  Const        r173, "ss"
  Index        r174, r156, r173
  Const        r175, "ss_ext_sales_price"
  Index        r176, r174, r175
  Append       r164, r164, r176
  Const        r178, 1
  AddInt       r169, r169, r178
  Jump         L15
L14:
  Sum          r179, r164
  Div          r180, r163, r179
  // i_category: g.key.category,
  Move         r181, r136
  Move         r182, r140
  // i_class: g.key.class,
  Move         r183, r141
  Move         r184, r145
  // gross_margin: sum(from x in g select x.ss.ss_net_profit) / sum(from x in g select x.ss.ss_ext_sales_price)
  Move         r185, r146
  Move         r186, r180
  // select {
  MakeMap      r187, 3, r181
  // sort by [g.key.category, g.key.class]
  Const        r188, "key"
  Index        r189, r135, r188
  Const        r190, "category"
  Index        r192, r189, r190
  Const        r193, "key"
  Index        r194, r135, r193
  Const        r195, "class"
  Index        r197, r194, r195
  MakeList     r199, 2, r192
  // from ss in store_sales
  Move         r200, r187
  MakeList     r201, 2, r199
  Append       r4, r4, r201
  Const        r203, 1
  AddInt       r130, r130, r203
  Jump         L16
L11:
  // sort by [g.key.category, g.key.class]
  Sort         r4, r4
  // json(result)
  JSON         r4
  // expect result == [
  Const        r205, [{"gross_margin": 0.2, "i_category": "Books", "i_class": "C1"}, {"gross_margin": 0.25, "i_category": "Books", "i_class": "C2"}, {"gross_margin": 0.2, "i_category": "Electronics", "i_class": "C3"}]
  Equal        r206, r4, r205
  Expect       r206
  Return       r0
