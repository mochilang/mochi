func main (regs=173)
  // let store_sales = [
  Const        r0, [{"ss_ext_sales_price": 100, "ss_item_sk": 1, "ss_net_profit": 20, "ss_sold_date_sk": 1, "ss_store_sk": 1}, {"ss_ext_sales_price": 200, "ss_item_sk": 2, "ss_net_profit": 50, "ss_sold_date_sk": 1, "ss_store_sk": 1}, {"ss_ext_sales_price": 150, "ss_item_sk": 3, "ss_net_profit": 30, "ss_sold_date_sk": 1, "ss_store_sk": 2}]
  // let item = [
  Const        r1, [{"i_category": "Books", "i_class": "C1", "i_item_sk": 1}, {"i_category": "Books", "i_class": "C2", "i_item_sk": 2}, {"i_category": "Electronics", "i_class": "C3", "i_item_sk": 3}]
  // let store = [
  Const        r2, [{"s_state": "A", "s_store_sk": 1}, {"s_state": "B", "s_store_sk": 2}]
  // let date_dim = [
  Const        r3, [{"d_date_sk": 1, "d_year": 2000}]
  // from ss in store_sales
  Const        r4, []
  // group by {category: i.i_category, class: i.i_class} into g
  Const        r5, "category"
  Const        r6, "i_category"
  Const        r7, "class"
  Const        r8, "i_class"
  // where d.d_year == 2000 && (s.s_state == "A" || s.s_state == "B")
  Const        r9, "d_year"
  Const        r10, "s_state"
  // i_category: g.key.category,
  Const        r11, "key"
  // gross_margin: sum(from x in g select x.ss_net_profit) / sum(from x in g select x.ss_ext_sales_price)
  Const        r12, "gross_margin"
  Const        r13, "ss_net_profit"
  Const        r14, "ss_ext_sales_price"
  // from ss in store_sales
  MakeMap      r15, 0, r0
  Const        r17, []
  Move         r16, r17
  IterPrep     r18, r0
  Len          r19, r18
  Const        r20, 0
L11:
  LessInt      r21, r20, r19
  JumpIfFalse  r21, L0
  Index        r22, r18, r20
  Move         r23, r22
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  IterPrep     r24, r3
  Len          r25, r24
  Const        r26, 0
L10:
  LessInt      r27, r26, r25
  JumpIfFalse  r27, L1
  Index        r28, r24, r26
  Move         r29, r28
  Const        r30, "ss_sold_date_sk"
  Index        r31, r23, r30
  Const        r32, "d_date_sk"
  Index        r33, r29, r32
  Equal        r34, r31, r33
  JumpIfFalse  r34, L2
  // join i in item on ss.ss_item_sk == i.i_item_sk
  IterPrep     r35, r1
  Len          r36, r35
  Const        r37, 0
L9:
  LessInt      r38, r37, r36
  JumpIfFalse  r38, L2
  Index        r39, r35, r37
  Move         r40, r39
  Const        r41, "ss_item_sk"
  Index        r42, r23, r41
  Const        r43, "i_item_sk"
  Index        r44, r40, r43
  Equal        r45, r42, r44
  JumpIfFalse  r45, L3
  // join s in store on ss.ss_store_sk == s.s_store_sk
  IterPrep     r46, r2
  Len          r47, r46
  Const        r48, 0
L8:
  LessInt      r49, r48, r47
  JumpIfFalse  r49, L3
  Index        r50, r46, r48
  Move         r51, r50
  Const        r52, "ss_store_sk"
  Index        r53, r23, r52
  Const        r54, "s_store_sk"
  Index        r55, r51, r54
  Equal        r56, r53, r55
  JumpIfFalse  r56, L4
  // where d.d_year == 2000 && (s.s_state == "A" || s.s_state == "B")
  Index        r57, r29, r9
  Const        r58, 2000
  Equal        r59, r57, r58
  Index        r60, r51, r10
  Const        r61, "A"
  Equal        r62, r60, r61
  Index        r63, r51, r10
  Const        r64, "B"
  Equal        r65, r63, r64
  Move         r66, r62
  JumpIfTrue   r66, L5
  Move         r66, r65
L5:
  Move         r67, r59
  JumpIfFalse  r67, L6
  Move         r67, r66
L6:
  JumpIfFalse  r67, L4
  // from ss in store_sales
  Const        r68, "ss"
  Move         r69, r23
  Const        r70, "d"
  Move         r71, r29
  Const        r72, "i"
  Move         r73, r40
  Const        r74, "s"
  Move         r75, r51
  Move         r76, r68
  Move         r77, r69
  Move         r78, r70
  Move         r79, r71
  Move         r80, r72
  Move         r81, r73
  Move         r82, r74
  Move         r83, r75
  MakeMap      r84, 4, r76
  // group by {category: i.i_category, class: i.i_class} into g
  Const        r85, "category"
  Index        r86, r40, r6
  Const        r87, "class"
  Index        r88, r40, r8
  Move         r89, r85
  Move         r90, r86
  Move         r91, r87
  Move         r92, r88
  MakeMap      r93, 2, r89
  Str          r94, r93
  In           r95, r94, r15
  JumpIfTrue   r95, L7
  // from ss in store_sales
  Const        r96, []
  Const        r97, "__group__"
  Const        r98, true
  // group by {category: i.i_category, class: i.i_class} into g
  Move         r99, r93
  // from ss in store_sales
  Const        r100, "items"
  Move         r101, r96
  Const        r102, "count"
  Const        r103, 0
  Move         r104, r97
  Move         r105, r98
  Move         r106, r11
  Move         r107, r99
  Move         r108, r100
  Move         r109, r101
  Move         r110, r102
  Move         r111, r103
  MakeMap      r112, 4, r104
  SetIndex     r15, r94, r112
  Append       r113, r16, r112
  Move         r16, r113
L7:
  Index        r114, r15, r94
  Index        r115, r114, r100
  Append       r116, r115, r84
  SetIndex     r114, r100, r116
  Index        r117, r114, r102
  Const        r118, 1
  AddInt       r119, r117, r118
  SetIndex     r114, r102, r119
L4:
  // join s in store on ss.ss_store_sk == s.s_store_sk
  AddInt       r48, r48, r118
  Jump         L8
L3:
  // join i in item on ss.ss_item_sk == i.i_item_sk
  AddInt       r37, r37, r118
  Jump         L9
L2:
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  AddInt       r26, r26, r118
  Jump         L10
L1:
  // from ss in store_sales
  AddInt       r20, r20, r118
  Jump         L11
L0:
  Move         r120, r103
  Len          r121, r16
L17:
  LessInt      r122, r120, r121
  JumpIfFalse  r122, L12
  Index        r123, r16, r120
  Move         r124, r123
  // i_category: g.key.category,
  Const        r125, "i_category"
  Index        r126, r124, r11
  Index        r127, r126, r5
  // i_class: g.key.class,
  Const        r128, "i_class"
  Index        r129, r124, r11
  Index        r130, r129, r7
  // gross_margin: sum(from x in g select x.ss_net_profit) / sum(from x in g select x.ss_ext_sales_price)
  Const        r131, "gross_margin"
  Const        r132, []
  IterPrep     r133, r124
  Len          r134, r133
  Move         r135, r103
L14:
  LessInt      r136, r135, r134
  JumpIfFalse  r136, L13
  Index        r137, r133, r135
  Move         r138, r137
  Index        r139, r138, r13
  Append       r140, r132, r139
  Move         r132, r140
  AddInt       r135, r135, r118
  Jump         L14
L13:
  Sum          r141, r132
  Const        r142, []
  IterPrep     r143, r124
  Len          r144, r143
  Move         r145, r103
L16:
  LessInt      r146, r145, r144
  JumpIfFalse  r146, L15
  Index        r147, r143, r145
  Move         r138, r147
  Index        r148, r138, r14
  Append       r149, r142, r148
  Move         r142, r149
  AddInt       r145, r145, r118
  Jump         L16
L15:
  Sum          r150, r142
  Div          r151, r141, r150
  // i_category: g.key.category,
  Move         r152, r125
  Move         r153, r127
  // i_class: g.key.class,
  Move         r154, r128
  Move         r155, r130
  // gross_margin: sum(from x in g select x.ss_net_profit) / sum(from x in g select x.ss_ext_sales_price)
  Move         r156, r131
  Move         r157, r151
  // select {
  MakeMap      r158, 3, r152
  // sort by [g.key.category, g.key.class]
  Index        r159, r124, r11
  Index        r160, r159, r5
  Move         r161, r160
  Index        r162, r124, r11
  Index        r163, r162, r7
  Move         r164, r163
  MakeList     r165, 2, r161
  Move         r166, r165
  // from ss in store_sales
  Move         r167, r158
  MakeList     r168, 2, r166
  Append       r169, r4, r168
  Move         r4, r169
  AddInt       r120, r120, r118
  Jump         L17
L12:
  // sort by [g.key.category, g.key.class]
  Sort         r170, r4
  // from ss in store_sales
  Move         r4, r170
  // json(result)
  JSON         r4
  // expect result == [
  Const        r171, [{"gross_margin": 0.2, "i_category": "Books", "i_class": "C1"}, {"gross_margin": 0.25, "i_category": "Books", "i_class": "C2"}, {"gross_margin": 0.2, "i_category": "Electronics", "i_class": "C3"}]
  Equal        r172, r4, r171
  Expect       r172
  Return       r0
