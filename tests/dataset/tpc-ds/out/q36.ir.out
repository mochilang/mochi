func main (regs=205)
  // let store_sales = [
  Const        r0, [{"ss_ext_sales_price": 100, "ss_item_sk": 1, "ss_net_profit": 20, "ss_sold_date_sk": 1, "ss_store_sk": 1}, {"ss_ext_sales_price": 200, "ss_item_sk": 2, "ss_net_profit": 50, "ss_sold_date_sk": 1, "ss_store_sk": 1}, {"ss_ext_sales_price": 150, "ss_item_sk": 3, "ss_net_profit": 30, "ss_sold_date_sk": 1, "ss_store_sk": 2}]
  // let item = [
  Const        r1, [{"i_category": "Books", "i_class": "C1", "i_item_sk": 1}, {"i_category": "Books", "i_class": "C2", "i_item_sk": 2}, {"i_category": "Electronics", "i_class": "C3", "i_item_sk": 3}]
  // let store = [
  Const        r2, [{"s_state": "A", "s_store_sk": 1}, {"s_state": "B", "s_store_sk": 2}]
  // let date_dim = [
  Const        r3, [{"d_date_sk": 1, "d_year": 2000}]
  // from ss in store_sales
  Const        r4, []
  // group by {category: i.i_category, class: i.i_class} into g
  Const        r5, "category"
  Const        r6, "i_category"
  Const        r7, "class"
  Const        r8, "i_class"
  // where d.d_year == 2000 && (s.s_state == "A" || s.s_state == "B")
  Const        r9, "d_year"
  Const        r10, "s_state"
  Const        r11, "s_state"
  // i_category: g.key.category,
  Const        r12, "i_category"
  Const        r13, "key"
  Const        r14, "category"
  // i_class: g.key.class,
  Const        r15, "i_class"
  Const        r16, "key"
  Const        r17, "class"
  // gross_margin: sum(from x in g select x.ss_net_profit) / sum(from x in g select x.ss_ext_sales_price)
  Const        r18, "gross_margin"
  Const        r19, "ss_net_profit"
  Const        r20, "ss_ext_sales_price"
  // sort by [g.key.category, g.key.class]
  Const        r21, "key"
  Const        r22, "category"
  Const        r23, "key"
  Const        r24, "class"
  // from ss in store_sales
  MakeMap      r25, 0, r0
  Const        r26, []
  IterPrep     r28, r0
  Len          r29, r28
  Const        r30, 0
L11:
  LessInt      r31, r30, r29
  JumpIfFalse  r31, L0
  Index        r33, r28, r30
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  IterPrep     r34, r3
  Len          r35, r34
  Const        r36, 0
L10:
  LessInt      r37, r36, r35
  JumpIfFalse  r37, L1
  Index        r39, r34, r36
  Const        r40, "ss_sold_date_sk"
  Index        r41, r33, r40
  Const        r42, "d_date_sk"
  Index        r43, r39, r42
  Equal        r44, r41, r43
  JumpIfFalse  r44, L2
  // join i in item on ss.ss_item_sk == i.i_item_sk
  IterPrep     r45, r1
  Len          r46, r45
  Const        r47, 0
L9:
  LessInt      r48, r47, r46
  JumpIfFalse  r48, L2
  Index        r50, r45, r47
  Const        r51, "ss_item_sk"
  Index        r52, r33, r51
  Const        r53, "i_item_sk"
  Index        r54, r50, r53
  Equal        r55, r52, r54
  JumpIfFalse  r55, L3
  // join s in store on ss.ss_store_sk == s.s_store_sk
  IterPrep     r56, r2
  Len          r57, r56
  Const        r58, 0
L8:
  LessInt      r59, r58, r57
  JumpIfFalse  r59, L3
  Index        r61, r56, r58
  Const        r62, "ss_store_sk"
  Index        r63, r33, r62
  Const        r64, "s_store_sk"
  Index        r65, r61, r64
  Equal        r66, r63, r65
  JumpIfFalse  r66, L4
  // where d.d_year == 2000 && (s.s_state == "A" || s.s_state == "B")
  Const        r67, "d_year"
  Index        r68, r39, r67
  Const        r69, 2000
  Equal        r71, r68, r69
  JumpIfFalse  r71, L5
  Const        r72, "s_state"
  Index        r73, r61, r72
  Const        r74, "A"
  Equal        r75, r73, r74
  Const        r76, "s_state"
  Index        r77, r61, r76
  Const        r78, "B"
  Equal        r79, r77, r78
  Move         r80, r75
  JumpIfTrue   r80, L6
L6:
  Move         r71, r79
L5:
  JumpIfFalse  r71, L4
  // from ss in store_sales
  Const        r81, "ss"
  Move         r82, r33
  Const        r83, "d"
  Move         r84, r39
  Const        r85, "i"
  Move         r86, r50
  Const        r87, "s"
  Move         r88, r61
  MakeMap      r89, 4, r81
  // group by {category: i.i_category, class: i.i_class} into g
  Const        r90, "category"
  Const        r91, "i_category"
  Index        r92, r50, r91
  Const        r93, "class"
  Const        r94, "i_class"
  Index        r95, r50, r94
  Move         r96, r90
  Move         r97, r92
  Move         r98, r93
  Move         r99, r95
  MakeMap      r100, 2, r96
  Str          r101, r100
  In           r102, r101, r25
  JumpIfTrue   r102, L7
  // from ss in store_sales
  Const        r103, []
  Const        r104, "__group__"
  Const        r105, true
  Const        r106, "key"
  // group by {category: i.i_category, class: i.i_class} into g
  Move         r107, r100
  // from ss in store_sales
  Const        r108, "items"
  Move         r109, r103
  Const        r110, "count"
  Const        r111, 0
  Move         r112, r104
  Move         r113, r105
  Move         r114, r106
  Move         r115, r107
  Move         r116, r108
  Move         r117, r109
  Move         r118, r110
  Move         r119, r111
  MakeMap      r120, 4, r112
  SetIndex     r25, r101, r120
  Append       r26, r26, r120
L7:
  Const        r122, "items"
  Index        r123, r25, r101
  Index        r124, r123, r122
  Append       r125, r124, r89
  SetIndex     r123, r122, r125
  Const        r126, "count"
  Index        r127, r123, r126
  Const        r128, 1
  AddInt       r129, r127, r128
  SetIndex     r123, r126, r129
L4:
  // join s in store on ss.ss_store_sk == s.s_store_sk
  Const        r130, 1
  AddInt       r58, r58, r130
  Jump         L8
L3:
  // join i in item on ss.ss_item_sk == i.i_item_sk
  Const        r131, 1
  AddInt       r47, r47, r131
  Jump         L9
L2:
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  Const        r132, 1
  AddInt       r36, r36, r132
  Jump         L10
L1:
  // from ss in store_sales
  Const        r133, 1
  AddInt       r30, r30, r133
  Jump         L11
L0:
  Const        r134, 0
  Len          r136, r26
L17:
  LessInt      r137, r134, r136
  JumpIfFalse  r137, L12
  Index        r139, r26, r134
  // i_category: g.key.category,
  Const        r140, "i_category"
  Const        r141, "key"
  Index        r142, r139, r141
  Const        r143, "category"
  Index        r144, r142, r143
  // i_class: g.key.class,
  Const        r145, "i_class"
  Const        r146, "key"
  Index        r147, r139, r146
  Const        r148, "class"
  Index        r149, r147, r148
  // gross_margin: sum(from x in g select x.ss_net_profit) / sum(from x in g select x.ss_ext_sales_price)
  Const        r150, "gross_margin"
  Const        r151, []
  Const        r152, "ss_net_profit"
  IterPrep     r153, r139
  Len          r154, r153
  Const        r155, 0
L14:
  LessInt      r157, r155, r154
  JumpIfFalse  r157, L13
  Index        r159, r153, r155
  Const        r160, "ss_net_profit"
  Index        r161, r159, r160
  Append       r151, r151, r161
  Const        r163, 1
  AddInt       r155, r155, r163
  Jump         L14
L13:
  Sum          r164, r151
  Const        r165, []
  Const        r166, "ss_ext_sales_price"
  IterPrep     r167, r139
  Len          r168, r167
  Const        r169, 0
L16:
  LessInt      r171, r169, r168
  JumpIfFalse  r171, L15
  Index        r159, r167, r169
  Const        r173, "ss_ext_sales_price"
  Index        r174, r159, r173
  Append       r165, r165, r174
  Const        r176, 1
  AddInt       r169, r169, r176
  Jump         L16
L15:
  Sum          r177, r165
  Div          r178, r164, r177
  // i_category: g.key.category,
  Move         r179, r140
  Move         r180, r144
  // i_class: g.key.class,
  Move         r181, r145
  Move         r182, r149
  // gross_margin: sum(from x in g select x.ss_net_profit) / sum(from x in g select x.ss_ext_sales_price)
  Move         r183, r150
  Move         r184, r178
  // select {
  MakeMap      r185, 3, r179
  // sort by [g.key.category, g.key.class]
  Const        r186, "key"
  Index        r187, r139, r186
  Const        r188, "category"
  Index        r190, r187, r188
  Const        r191, "key"
  Index        r192, r139, r191
  Const        r193, "class"
  Index        r195, r192, r193
  MakeList     r197, 2, r190
  // from ss in store_sales
  Move         r198, r185
  MakeList     r199, 2, r197
  Append       r4, r4, r199
  Const        r201, 1
  AddInt       r134, r134, r201
  Jump         L17
L12:
  // sort by [g.key.category, g.key.class]
  Sort         r4, r4
  // json(result)
  JSON         r4
  // expect result == [
  Const        r203, [{"gross_margin": 0.2, "i_category": "Books", "i_class": "C1"}, {"gross_margin": 0.25, "i_category": "Books", "i_class": "C2"}, {"gross_margin": 0.2, "i_category": "Electronics", "i_class": "C3"}]
  Equal        r204, r4, r203
  Expect       r204
  Return       r0
