func main (regs=310)
  // let inventory = [
  Const        r0, [{"inv_date_sk": 1, "inv_item_sk": 1, "inv_quantity_on_hand": 30, "inv_warehouse_sk": 1}, {"inv_date_sk": 2, "inv_item_sk": 1, "inv_quantity_on_hand": 40, "inv_warehouse_sk": 1}, {"inv_date_sk": 1, "inv_item_sk": 2, "inv_quantity_on_hand": 20, "inv_warehouse_sk": 2}, {"inv_date_sk": 2, "inv_item_sk": 2, "inv_quantity_on_hand": 20, "inv_warehouse_sk": 2}]
  // let warehouse = [
  Const        r1, [{"w_warehouse_name": "Main", "w_warehouse_sk": 1}, {"w_warehouse_name": "Backup", "w_warehouse_sk": 2}]
  // let item = [
  Const        r2, [{"i_item_id": "ITEM1", "i_item_sk": 1}, {"i_item_id": "ITEM2", "i_item_sk": 2}]
  // let date_dim = [
  Const        r3, [{"d_date": "2000-03-01", "d_date_sk": 1}, {"d_date": "2000-03-20", "d_date_sk": 2}]
  // from inv in inventory
  Const        r4, []
  // group by { w: inv.inv_warehouse_sk, i: inv.inv_item_sk } into g
  Const        r5, "w"
  Const        r6, "inv_warehouse_sk"
  Const        r7, "i"
  Const        r8, "inv_item_sk"
  // where d.d_date < "2000-03-15"
  Const        r9, "d_date"
  // select { w: g.key.w, i: g.key.i, qty: sum(from x in g select x.inv_quantity_on_hand) }
  Const        r10, "key"
  Const        r11, "qty"
  Const        r12, "inv_quantity_on_hand"
  // from inv in inventory
  MakeMap      r13, 0, r0
  Const        r14, []
  IterPrep     r16, r0
  Len          r17, r16
  Const        r18, 0
L5:
  LessInt      r19, r18, r17
  JumpIfFalse  r19, L0
  Index        r21, r16, r18
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  IterPrep     r22, r3
  Len          r23, r22
  Const        r24, 0
L4:
  LessInt      r25, r24, r23
  JumpIfFalse  r25, L1
  Index        r27, r22, r24
  Const        r28, "inv_date_sk"
  Index        r29, r21, r28
  Const        r30, "d_date_sk"
  Index        r31, r27, r30
  Equal        r32, r29, r31
  JumpIfFalse  r32, L2
  // where d.d_date < "2000-03-15"
  Index        r33, r27, r9
  Const        r34, "2000-03-15"
  Less         r35, r33, r34
  JumpIfFalse  r35, L2
  // from inv in inventory
  Const        r36, "inv"
  Move         r37, r21
  Const        r38, "d"
  Move         r39, r27
  MakeMap      r40, 2, r36
  // group by { w: inv.inv_warehouse_sk, i: inv.inv_item_sk } into g
  Const        r41, "w"
  Index        r42, r21, r6
  Const        r43, "i"
  Index        r44, r21, r8
  Move         r45, r41
  Move         r46, r42
  Move         r47, r43
  Move         r48, r44
  MakeMap      r49, 2, r45
  Str          r50, r49
  In           r51, r50, r13
  JumpIfTrue   r51, L3
  // from inv in inventory
  Const        r52, []
  Const        r53, "__group__"
  Const        r54, true
  Const        r55, "key"
  // group by { w: inv.inv_warehouse_sk, i: inv.inv_item_sk } into g
  Move         r56, r49
  // from inv in inventory
  Const        r57, "items"
  Move         r58, r52
  Const        r59, "count"
  Const        r60, 0
  Move         r61, r53
  Move         r62, r54
  Move         r63, r55
  Move         r64, r56
  Move         r65, r57
  Move         r66, r58
  Move         r67, r59
  Move         r68, r60
  MakeMap      r69, 4, r61
  SetIndex     r13, r50, r69
  Append       r14, r14, r69
L3:
  Const        r71, "items"
  Index        r72, r13, r50
  Index        r73, r72, r71
  Append       r74, r73, r40
  SetIndex     r72, r71, r74
  Const        r75, "count"
  Index        r76, r72, r75
  Const        r77, 1
  AddInt       r78, r76, r77
  SetIndex     r72, r75, r78
L2:
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  AddInt       r24, r24, r77
  Jump         L4
L1:
  // from inv in inventory
  AddInt       r18, r18, r77
  Jump         L5
L0:
  Const        r80, 0
  Move         r79, r80
  Len          r81, r14
L9:
  LessInt      r82, r79, r81
  JumpIfFalse  r82, L6
  Index        r84, r14, r79
  // select { w: g.key.w, i: g.key.i, qty: sum(from x in g select x.inv_quantity_on_hand) }
  Const        r85, "w"
  Index        r86, r84, r10
  Index        r87, r86, r5
  Const        r88, "i"
  Index        r89, r84, r10
  Index        r90, r89, r7
  Const        r91, "qty"
  Const        r92, []
  IterPrep     r93, r84
  Len          r94, r93
  Move         r95, r80
L8:
  LessInt      r96, r95, r94
  JumpIfFalse  r96, L7
  Index        r98, r93, r95
  Index        r99, r98, r12
  Append       r92, r92, r99
  AddInt       r95, r95, r77
  Jump         L8
L7:
  Sum          r101, r92
  Move         r102, r85
  Move         r103, r87
  Move         r104, r88
  Move         r105, r90
  Move         r106, r91
  Move         r107, r101
  MakeMap      r108, 3, r102
  // from inv in inventory
  Append       r4, r4, r108
  AddInt       r79, r79, r77
  Jump         L9
L6:
  // from inv in inventory
  Const        r110, []
  MakeMap      r111, 0, r0
  Const        r112, []
  IterPrep     r114, r0
  Len          r115, r114
  Const        r116, 0
L15:
  LessInt      r117, r116, r115
  JumpIfFalse  r117, L10
  Index        r21, r114, r116
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  IterPrep     r119, r3
  Len          r120, r119
  Const        r121, 0
L14:
  LessInt      r122, r121, r120
  JumpIfFalse  r122, L11
  Index        r124, r119, r121
  Index        r125, r21, r28
  Index        r126, r124, r30
  Equal        r127, r125, r126
  JumpIfFalse  r127, L12
  // where d.d_date >= "2000-03-15"
  Index        r128, r124, r9
  LessEq       r129, r34, r128
  JumpIfFalse  r129, L12
  // from inv in inventory
  Move         r130, r21
  Move         r131, r124
  MakeMap      r132, 2, r36
  // group by { w: inv.inv_warehouse_sk, i: inv.inv_item_sk } into g
  Const        r133, "w"
  Index        r134, r21, r6
  Const        r135, "i"
  Index        r136, r21, r8
  Move         r137, r133
  Move         r138, r134
  Move         r139, r135
  Move         r140, r136
  MakeMap      r141, 2, r137
  Str          r142, r141
  In           r143, r142, r111
  JumpIfTrue   r143, L13
  // from inv in inventory
  Const        r144, []
  Const        r145, "__group__"
  Const        r146, true
  Const        r147, "key"
  // group by { w: inv.inv_warehouse_sk, i: inv.inv_item_sk } into g
  Move         r148, r141
  // from inv in inventory
  Const        r149, "items"
  Move         r150, r144
  Const        r151, "count"
  Const        r152, 0
  Move         r153, r145
  Move         r154, r146
  Move         r155, r147
  Move         r156, r148
  Move         r157, r149
  Move         r158, r150
  Move         r159, r151
  Move         r160, r152
  MakeMap      r161, 4, r153
  SetIndex     r111, r142, r161
  Append       r112, r112, r161
L13:
  Index        r163, r111, r142
  Index        r164, r163, r71
  Append       r165, r164, r132
  SetIndex     r163, r71, r165
  Index        r166, r163, r75
  AddInt       r167, r166, r77
  SetIndex     r163, r75, r167
L12:
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  AddInt       r121, r121, r77
  Jump         L14
L11:
  // from inv in inventory
  AddInt       r116, r116, r77
  Jump         L15
L10:
  Move         r168, r80
  Len          r169, r112
L19:
  LessInt      r170, r168, r169
  JumpIfFalse  r170, L16
  Index        r84, r112, r168
  // select { w: g.key.w, i: g.key.i, qty: sum(from x in g select x.inv_quantity_on_hand) }
  Const        r172, "w"
  Index        r173, r84, r10
  Index        r174, r173, r5
  Const        r175, "i"
  Index        r176, r84, r10
  Index        r177, r176, r7
  Const        r178, "qty"
  Const        r179, []
  IterPrep     r180, r84
  Len          r181, r180
  Move         r182, r80
L18:
  LessInt      r183, r182, r181
  JumpIfFalse  r183, L17
  Index        r98, r180, r182
  Index        r185, r98, r12
  Append       r179, r179, r185
  AddInt       r182, r182, r77
  Jump         L18
L17:
  Sum          r187, r179
  Move         r188, r172
  Move         r189, r174
  Move         r190, r175
  Move         r191, r177
  Move         r192, r178
  Move         r193, r187
  MakeMap      r194, 3, r188
  // from inv in inventory
  Append       r110, r110, r194
  AddInt       r168, r168, r77
  Jump         L19
L16:
  // from b in before
  Const        r196, []
  // w_name: w.w_warehouse_name,
  Const        r197, "w_name"
  Const        r198, "w_warehouse_name"
  // i_id: it.i_item_id,
  Const        r199, "i_id"
  Const        r200, "i_item_id"
  // before_qty: b.qty,
  Const        r201, "before_qty"
  // after_qty: a.qty,
  Const        r202, "after_qty"
  // ratio: a.qty / b.qty
  Const        r203, "ratio"
  // from b in before
  IterPrep     r204, r4
  Len          r205, r204
  Move         r206, r80
L29:
  LessInt      r207, r206, r205
  JumpIfFalse  r207, L20
  Index        r209, r204, r206
  // join a in after on b.w == a.w && b.i == a.i
  IterPrep     r210, r110
  Len          r211, r210
  Move         r212, r80
L28:
  LessInt      r213, r212, r211
  JumpIfFalse  r213, L21
  Index        r215, r210, r212
  Index        r216, r209, r5
  Index        r217, r215, r5
  Equal        r218, r216, r217
  Index        r219, r209, r7
  Index        r220, r215, r7
  Equal        r221, r219, r220
  JumpIfFalse  r218, L22
  Move         r218, r221
L22:
  JumpIfFalse  r218, L23
  // join w in warehouse on w.w_warehouse_sk == b.w
  IterPrep     r222, r1
  Len          r223, r222
  Const        r224, "w_warehouse_sk"
  Move         r225, r80
L27:
  LessInt      r226, r225, r223
  JumpIfFalse  r226, L23
  Index        r228, r222, r225
  Index        r229, r228, r224
  Index        r230, r209, r5
  Equal        r231, r229, r230
  JumpIfFalse  r231, L24
  // join it in item on it.i_item_sk == b.i
  IterPrep     r232, r2
  Len          r233, r232
  Const        r234, "i_item_sk"
  Move         r235, r80
L26:
  LessInt      r236, r235, r233
  JumpIfFalse  r236, L24
  Index        r238, r232, r235
  Index        r239, r238, r234
  Index        r240, r209, r7
  Equal        r241, r239, r240
  JumpIfFalse  r241, L25
  // w_name: w.w_warehouse_name,
  Const        r242, "w_name"
  Index        r243, r228, r198
  // i_id: it.i_item_id,
  Const        r244, "i_id"
  Index        r245, r238, r200
  // before_qty: b.qty,
  Const        r246, "before_qty"
  Index        r247, r209, r11
  // after_qty: a.qty,
  Const        r248, "after_qty"
  Index        r249, r215, r11
  // ratio: a.qty / b.qty
  Const        r250, "ratio"
  Index        r251, r215, r11
  Index        r252, r209, r11
  Div          r253, r251, r252
  // w_name: w.w_warehouse_name,
  Move         r254, r242
  Move         r255, r243
  // i_id: it.i_item_id,
  Move         r256, r244
  Move         r257, r245
  // before_qty: b.qty,
  Move         r258, r246
  Move         r259, r247
  // after_qty: a.qty,
  Move         r260, r248
  Move         r261, r249
  // ratio: a.qty / b.qty
  Move         r262, r250
  Move         r263, r253
  // select {
  MakeMap      r264, 5, r254
  // from b in before
  Append       r196, r196, r264
L25:
  // join it in item on it.i_item_sk == b.i
  Add          r235, r235, r77
  Jump         L26
L24:
  // join w in warehouse on w.w_warehouse_sk == b.w
  Add          r225, r225, r77
  Jump         L27
L23:
  // join a in after on b.w == a.w && b.i == a.i
  Add          r212, r212, r77
  Jump         L28
L21:
  // from b in before
  AddInt       r206, r206, r77
  Jump         L29
L20:
  // from r in joined
  Const        r266, []
  // select { w_warehouse_name: r.w_name, i_item_id: r.i_id, inv_before: r.before_qty, inv_after: r.after_qty }
  Const        r267, "inv_before"
  Const        r268, "inv_after"
  // from r in joined
  IterPrep     r269, r196
  Len          r270, r269
  Move         r271, r80
L33:
  LessInt      r272, r271, r270
  JumpIfFalse  r272, L30
  Index        r274, r269, r271
  // where r.ratio >= (2.0 / 3.0) && r.ratio <= (3.0 / 2.0)
  Index        r275, r274, r203
  Const        r276, 0.6666666666666666
  LessEqFloat  r277, r276, r275
  Index        r278, r274, r203
  Const        r279, 1.5
  LessEqFloat  r280, r278, r279
  JumpIfFalse  r277, L31
  Move         r277, r280
L31:
  JumpIfFalse  r277, L32
  // select { w_warehouse_name: r.w_name, i_item_id: r.i_id, inv_before: r.before_qty, inv_after: r.after_qty }
  Const        r281, "w_warehouse_name"
  Index        r282, r274, r197
  Const        r283, "i_item_id"
  Index        r284, r274, r199
  Const        r285, "inv_before"
  Index        r286, r274, r201
  Const        r287, "inv_after"
  Index        r288, r274, r202
  Move         r289, r281
  Move         r290, r282
  Move         r291, r283
  Move         r292, r284
  Move         r293, r285
  Move         r294, r286
  Move         r295, r287
  Move         r296, r288
  MakeMap      r297, 4, r289
  // sort by [r.w_name, r.i_id]
  Index        r299, r274, r197
  Index        r300, r274, r199
  Move         r301, r300
  MakeList     r303, 2, r299
  // from r in joined
  Move         r304, r297
  MakeList     r305, 2, r303
  Append       r266, r266, r305
L32:
  AddInt       r271, r271, r77
  Jump         L33
L30:
  // sort by [r.w_name, r.i_id]
  Sort         r266, r266
  // json(result)
  JSON         r266
  // expect result == [
  Const        r308, [{"i_item_id": "ITEM1", "inv_after": 40, "inv_before": 30, "w_warehouse_name": "Main"}]
  Equal        r309, r266, r308
  Expect       r309
  Return       r0
