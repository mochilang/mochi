func main (regs=307)
  // let inventory = [
  Const        r0, [{"inv_date_sk": 1, "inv_item_sk": 1, "inv_quantity_on_hand": 30, "inv_warehouse_sk": 1}, {"inv_date_sk": 2, "inv_item_sk": 1, "inv_quantity_on_hand": 40, "inv_warehouse_sk": 1}, {"inv_date_sk": 1, "inv_item_sk": 2, "inv_quantity_on_hand": 20, "inv_warehouse_sk": 2}, {"inv_date_sk": 2, "inv_item_sk": 2, "inv_quantity_on_hand": 20, "inv_warehouse_sk": 2}]
  // let warehouse = [
  Const        r1, [{"w_warehouse_name": "Main", "w_warehouse_sk": 1}, {"w_warehouse_name": "Backup", "w_warehouse_sk": 2}]
  // let item = [
  Const        r2, [{"i_item_id": "ITEM1", "i_item_sk": 1}, {"i_item_id": "ITEM2", "i_item_sk": 2}]
  // let date_dim = [
  Const        r3, [{"d_date": "2000-03-01", "d_date_sk": 1}, {"d_date": "2000-03-20", "d_date_sk": 2}]
  // from inv in inventory
  Const        r4, []
  // group by { w: inv.inv_warehouse_sk, i: inv.inv_item_sk } into g
  Const        r5, "w"
  Const        r6, "inv_warehouse_sk"
  Const        r7, "i"
  Const        r8, "inv_item_sk"
  // where d.d_date < "2000-03-15"
  Const        r9, "d_date"
  // select { w: g.key.w, i: g.key.i, qty: sum(from x in g select x.inv_quantity_on_hand) }
  Const        r10, "key"
  Const        r11, "qty"
  Const        r12, "inv_quantity_on_hand"
  // from inv in inventory
  MakeMap      r13, 0, r0
  Const        r15, []
  Move         r14, r15
  IterPrep     r16, r0
  Len          r17, r16
  Const        r18, 0
  LessInt      r19, r18, r17
  JumpIfFalse  r19, L0
  Index        r20, r16, r18
  Move         r21, r20
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  IterPrep     r22, r3
  Len          r23, r22
  Const        r24, 0
  LessInt      r25, r24, r23
  JumpIfFalse  r25, L1
  Index        r26, r22, r24
  Move         r27, r26
  Const        r28, "inv_date_sk"
L4:
  Index        r29, r21, r28
  Const        r30, "d_date_sk"
  Index        r31, r27, r30
  Equal        r32, r29, r31
  JumpIfFalse  r32, L2
  // where d.d_date < "2000-03-15"
  Const        r9, "d_date"
  Index        r33, r27, r9
  Const        r34, "2000-03-15"
  Less         r35, r33, r34
  JumpIfFalse  r35, L2
  // from inv in inventory
  Const        r36, "inv"
  Move         r37, r21
  Const        r38, "d"
  Move         r39, r27
  Move         r40, r36
  Move         r41, r37
  Move         r42, r38
  Move         r43, r39
  MakeMap      r44, 2, r40
  // group by { w: inv.inv_warehouse_sk, i: inv.inv_item_sk } into g
  Const        r45, "w"
  Const        r6, "inv_warehouse_sk"
  Index        r46, r21, r6
  Const        r47, "i"
  Const        r8, "inv_item_sk"
  Index        r48, r21, r8
  Move         r49, r45
  Move         r50, r46
  Move         r51, r47
  Move         r52, r48
  MakeMap      r53, 2, r49
  Str          r54, r53
  In           r55, r54, r13
  JumpIfTrue   r55, L3
  // from inv in inventory
  Const        r15, []
  Const        r56, "__group__"
  Const        r57, true
  Const        r10, "key"
  // group by { w: inv.inv_warehouse_sk, i: inv.inv_item_sk } into g
  Move         r58, r53
  // from inv in inventory
  Const        r59, "items"
  Move         r60, r15
  Const        r61, "count"
  Const        r62, 0
  Move         r63, r56
  Move         r64, r57
  Move         r65, r10
  Move         r66, r58
  Move         r67, r59
  Move         r68, r60
  Move         r69, r61
  Move         r70, r62
  MakeMap      r71, 4, r63
  SetIndex     r13, r54, r71
  Append       r72, r14, r71
  Move         r14, r72
  Index        r73, r13, r54
  Index        r74, r73, r59
  Append       r75, r74, r44
  SetIndex     r73, r59, r75
  Index        r76, r73, r61
L3:
  Const        r77, 1
  AddInt       r78, r76, r77
  SetIndex     r73, r61, r78
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  AddInt       r24, r24, r77
  Jump         L4
L2:
  // from inv in inventory
  Len          r80, r14
  LessInt      r81, r79, r80
  JumpIfFalse  r81, L5
L1:
  Index        r82, r14, r79
  Move         r83, r82
  // select { w: g.key.w, i: g.key.i, qty: sum(from x in g select x.inv_quantity_on_hand) }
  Const        r84, "w"
L0:
  Const        r10, "key"
  Index        r85, r83, r10
  Const        r5, "w"
L8:
  Index        r86, r85, r5
  Const        r87, "i"
  Index        r88, r83, r10
  Const        r7, "i"
  Index        r89, r88, r7
  Const        r90, "qty"
  Const        r91, []
  Const        r12, "inv_quantity_on_hand"
  IterPrep     r92, r83
  Len          r93, r92
  Const        r62, 0
  Move         r94, r62
  LessInt      r95, r94, r93
  JumpIfFalse  r95, L6
  Index        r96, r92, r94
  Move         r97, r96
  Const        r12, "inv_quantity_on_hand"
  Index        r98, r97, r12
  Append       r99, r91, r98
  Move         r91, r99
  Const        r77, 1
L7:
  AddInt       r94, r94, r77
  Jump         L7
L6:
  // from inv in inventory
  Move         r4, r108
  Const        r77, 1
  AddInt       r79, r79, r77
  Jump         L8
L5:
  // from inv in inventory
  MakeMap      r110, 0, r0
  Const        r15, []
  Move         r111, r15
  IterPrep     r112, r0
  Len          r113, r112
  Const        r114, 0
  LessInt      r115, r114, r113
  JumpIfFalse  r115, L9
  Index        r116, r112, r114
  Move         r21, r116
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  IterPrep     r117, r3
  Len          r118, r117
  Const        r119, 0
  LessInt      r120, r119, r118
  JumpIfFalse  r120, L10
  Index        r121, r117, r119
  Move         r122, r121
  Const        r28, "inv_date_sk"
  Index        r123, r21, r28
  Const        r30, "d_date_sk"
  Index        r124, r122, r30
  Equal        r125, r123, r124
  JumpIfFalse  r125, L11
  // where d.d_date >= "2000-03-15"
  Const        r9, "d_date"
  Index        r126, r122, r9
  Const        r34, "2000-03-15"
  LessEq       r127, r34, r126
L13:
  JumpIfFalse  r127, L11
  // from inv in inventory
  Const        r36, "inv"
  Move         r128, r21
  Const        r38, "d"
  Move         r129, r122
  Move         r130, r36
  Move         r131, r128
  Move         r132, r38
  Move         r133, r129
  MakeMap      r134, 2, r130
  // group by { w: inv.inv_warehouse_sk, i: inv.inv_item_sk } into g
  Const        r135, "w"
  Const        r6, "inv_warehouse_sk"
  Index        r136, r21, r6
  Const        r137, "i"
  Const        r8, "inv_item_sk"
  Index        r138, r21, r8
  Move         r139, r135
  Move         r140, r136
  Move         r141, r137
  Move         r142, r138
  MakeMap      r143, 2, r139
  Str          r144, r143
  In           r145, r144, r110
  JumpIfTrue   r145, L12
  // from inv in inventory
  Const        r15, []
  Const        r56, "__group__"
  Const        r57, true
  Const        r10, "key"
  // group by { w: inv.inv_warehouse_sk, i: inv.inv_item_sk } into g
  Move         r146, r143
  // from inv in inventory
  Const        r59, "items"
  Move         r147, r15
  Const        r61, "count"
  Const        r62, 0
  Move         r148, r56
  Move         r149, r57
  Move         r150, r10
  Move         r151, r146
  Move         r152, r59
  Move         r153, r147
  Move         r154, r61
  Move         r155, r62
  MakeMap      r156, 4, r148
  SetIndex     r110, r144, r156
  Append       r157, r111, r156
  Move         r111, r157
  Index        r158, r110, r144
  Index        r159, r158, r59
  Append       r160, r159, r134
  SetIndex     r158, r59, r160
  Index        r161, r158, r61
  Const        r77, 1
  AddInt       r162, r161, r77
  SetIndex     r158, r61, r162
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  AddInt       r119, r119, r77
  Jump         L13
L12:
  // from inv in inventory
  Move         r163, r62
  Len          r164, r111
  LessInt      r165, r163, r164
  JumpIfFalse  r165, L14
  Index        r166, r111, r163
  Move         r83, r166
  // select { w: g.key.w, i: g.key.i, qty: sum(from x in g select x.inv_quantity_on_hand) }
  Const        r167, "w"
  Const        r10, "key"
  Index        r168, r83, r10
  Const        r5, "w"
L11:
  Index        r169, r168, r5
  Const        r170, "i"
  Index        r171, r83, r10
L10:
  Const        r7, "i"
  Index        r172, r171, r7
  Const        r173, "qty"
L9:
  Const        r174, []
  Const        r12, "inv_quantity_on_hand"
  IterPrep     r175, r83
L16:
  Len          r176, r175
  Const        r62, 0
  Move         r177, r62
  LessInt      r178, r177, r176
  JumpIfFalse  r178, L15
  Index        r179, r175, r177
  Move         r97, r179
  Const        r12, "inv_quantity_on_hand"
  Index        r180, r97, r12
  Append       r181, r174, r180
  Move         r174, r181
  Const        r77, 1
  AddInt       r177, r177, r77
  MakeMap      r189, 3, r183
  // from inv in inventory
  Append       r190, r109, r189
  Move         r109, r190
  Const        r77, 1
  AddInt       r163, r163, r77
  Jump         L16
L15:
  // before_qty: b.qty,
  Const        r196, "before_qty"
  Const        r11, "qty"
  // after_qty: a.qty,
  Const        r197, "after_qty"
  // ratio: a.qty / b.qty
  Const        r198, "ratio"
  // from b in before
  IterPrep     r199, r4
  Len          r200, r199
  Const        r62, 0
  Move         r201, r62
  LessInt      r202, r201, r200
  JumpIfFalse  r202, L17
  Index        r203, r199, r201
  Move         r204, r203
  // join a in after on b.w == a.w && b.i == a.i
  IterPrep     r205, r109
L14:
  Len          r206, r205
  Const        r5, "w"
  Const        r7, "i"
  // w_name: w.w_warehouse_name,
  Const        r192, "w_name"
  Const        r193, "w_warehouse_name"
  // i_id: it.i_item_id,
  Const        r194, "i_id"
  Const        r195, "i_item_id"
  // before_qty: b.qty,
  Const        r196, "before_qty"
  Const        r11, "qty"
  // after_qty: a.qty,
  Const        r197, "after_qty"
  // ratio: a.qty / b.qty
  Const        r198, "ratio"
  // join a in after on b.w == a.w && b.i == a.i
  Const        r62, 0
  Move         r207, r62
  LessInt      r208, r207, r206
  JumpIfFalse  r208, L18
  Index        r209, r205, r207
  Move         r210, r209
  Const        r5, "w"
  Index        r211, r204, r5
  Index        r212, r210, r5
  Equal        r213, r211, r212
  Const        r7, "i"
  Index        r214, r204, r7
  Index        r215, r210, r7
  Equal        r216, r214, r215
  Move         r217, r213
  JumpIfFalse  r217, L19
  Move         r217, r216
  JumpIfFalse  r217, L20
  // join w in warehouse on w.w_warehouse_sk == b.w
  IterPrep     r218, r1
  Len          r219, r218
  Const        r220, "w_warehouse_sk"
  Const        r5, "w"
  // w_name: w.w_warehouse_name,
  Const        r192, "w_name"
  Const        r193, "w_warehouse_name"
  // i_id: it.i_item_id,
  Const        r194, "i_id"
  Const        r195, "i_item_id"
  // before_qty: b.qty,
  Const        r196, "before_qty"
  Const        r11, "qty"
  // after_qty: a.qty,
  Const        r197, "after_qty"
  // ratio: a.qty / b.qty
  Const        r198, "ratio"
  // join w in warehouse on w.w_warehouse_sk == b.w
  Const        r62, 0
  Move         r221, r62
  LessInt      r222, r221, r219
  JumpIfFalse  r222, L20
  Index        r223, r218, r221
  Move         r224, r223
  Const        r220, "w_warehouse_sk"
  Index        r225, r224, r220
  Const        r5, "w"
  Index        r226, r204, r5
  Equal        r227, r225, r226
  JumpIfFalse  r227, L21
  // join it in item on it.i_item_sk == b.i
  IterPrep     r228, r2
  Len          r229, r228
  Const        r230, "i_item_sk"
L19:
  Const        r7, "i"
  // w_name: w.w_warehouse_name,
  Const        r192, "w_name"
  Const        r193, "w_warehouse_name"
  // i_id: it.i_item_id,
  Const        r194, "i_id"
  Const        r195, "i_item_id"
  // before_qty: b.qty,
  Const        r196, "before_qty"
  Const        r11, "qty"
  // after_qty: a.qty,
  Const        r197, "after_qty"
  // ratio: a.qty / b.qty
  Const        r198, "ratio"
  // join it in item on it.i_item_sk == b.i
  Const        r62, 0
  Move         r231, r62
  LessInt      r232, r231, r229
  JumpIfFalse  r232, L21
  Index        r233, r228, r231
  Move         r234, r233
  Const        r230, "i_item_sk"
  Index        r235, r234, r230
  Const        r7, "i"
  Index        r236, r204, r7
  Equal        r237, r235, r236
  JumpIfFalse  r237, L22
  // w_name: w.w_warehouse_name,
  Const        r238, "w_name"
  Const        r193, "w_warehouse_name"
  Index        r239, r224, r193
  // i_id: it.i_item_id,
  Const        r240, "i_id"
  Const        r195, "i_item_id"
  Index        r241, r234, r195
  // before_qty: b.qty,
  Const        r242, "before_qty"
  Const        r11, "qty"
  Index        r243, r204, r11
  // after_qty: a.qty,
  Const        r244, "after_qty"
  Index        r245, r210, r11
  // ratio: a.qty / b.qty
  Const        r246, "ratio"
  Index        r247, r210, r11
  Index        r248, r204, r11
  Div          r249, r247, r248
  // w_name: w.w_warehouse_name,
  Move         r250, r238
  Move         r251, r239
  // i_id: it.i_item_id,
  Move         r252, r240
  Move         r253, r241
  // before_qty: b.qty,
  Move         r254, r242
  Move         r255, r243
  // after_qty: a.qty,
  Move         r256, r244
  Move         r257, r245
  // ratio: a.qty / b.qty
  Move         r258, r246
L23:
  Move         r259, r249
  // select {
  MakeMap      r260, 5, r250
  // from b in before
  Append       r261, r191, r260
  Move         r191, r261
  // join it in item on it.i_item_sk == b.i
  Const        r77, 1
  Add          r231, r231, r77
  Jump         L23
L22:
  // where r.ratio >= (2.0 / 3.0) && r.ratio <= (3.0 / 2.0)
  Move         r277, r273
  JumpIfFalse  r277, L24
  Move         r277, r276
L21:
  JumpIfFalse  r277, L25
  // select { w_warehouse_name: r.w_name, i_item_id: r.i_id, inv_before: r.before_qty, inv_after: r.after_qty }
  Const        r278, "w_warehouse_name"
  Const        r192, "w_name"
L20:
  Index        r279, r270, r192
  Const        r280, "i_item_id"
  Const        r194, "i_id"
L18:
  Index        r281, r270, r194
  Const        r282, "inv_before"
  Const        r196, "before_qty"
L17:
  Index        r283, r270, r196
  Const        r284, "inv_after"
  Const        r197, "after_qty"
  Index        r285, r270, r197
  Move         r286, r278
  Move         r287, r279
  Move         r288, r280
  Move         r289, r281
  Move         r290, r282
  Move         r291, r283
  Move         r292, r284
  Move         r293, r285
  MakeMap      r294, 4, r286
  // sort by [r.w_name, r.i_id]
  Index        r299, r270, r192
  Move         r297, r299
  Index        r300, r270, r194
  Move         r298, r300
L26:
  MakeList     r301, 2, r297
  Move         r295, r301
  // from r in joined
  Move         r296, r294
  MakeList     r302, 2, r295
  Append       r303, r262, r302
  Move         r262, r303
  Const        r77, 1
  AddInt       r267, r267, r77
  Jump         L26
L24:
  Return       r0
