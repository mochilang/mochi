func main (regs=80)
  // let customer = [
  Const        r0, [{"cdemo": 1, "current_addr": 1, "hdemo": 1, "id": 1}, {"cdemo": 2, "current_addr": 1, "hdemo": 2, "id": 2}, {"cdemo": 3, "current_addr": 1, "hdemo": 1, "id": 3}, {"cdemo": 4, "current_addr": 1, "hdemo": 2, "id": 4}]
  // let customer_address = [
  Const        r1, [{"ca_address_sk": 1, "ca_city": "Springfield"}]
  // let customer_demographics = [
  Const        r2, [{"cd_demo_sk": 1}, {"cd_demo_sk": 2}, {"cd_demo_sk": 3}, {"cd_demo_sk": 4}]
  // let household_demographics = [
  Const        r3, [{"hd_demo_sk": 1, "income_band_sk": 1}, {"hd_demo_sk": 2, "income_band_sk": 1}]
  // let income_band = [
  Const        r4, [{"ib_income_band_sk": 1, "ib_lower_bound": 0, "ib_upper_bound": 50000}]
  // let store_returns = [
  Const        r5, [{"amt": 10.0, "sr_cdemo_sk": 1}, {"amt": 20.0, "sr_cdemo_sk": 2}, {"amt": 30.0, "sr_cdemo_sk": 3}, {"amt": 24.0, "sr_cdemo_sk": 4}]
  // sum(from c in customer
  Const        r6, []
  // select sr.amt)
  Const        r7, "amt"
  // sum(from c in customer
  IterPrep     r8, r0
  Len          r9, r8
  Const        r11, 0
  Move         r10, r11
L13:
  LessInt      r12, r10, r9
  JumpIfFalse  r12, L0
  Index        r13, r8, r10
  Move         r14, r13
  // join ca in customer_address on c.current_addr == ca.ca_address_sk && ca.ca_city == "Springfield"
  IterPrep     r15, r1
  Len          r16, r15
  Const        r17, "current_addr"
  Const        r18, "ca_address_sk"
  Const        r19, "ca_city"
  // select sr.amt)
  Const        r7, "amt"
  // join ca in customer_address on c.current_addr == ca.ca_address_sk && ca.ca_city == "Springfield"
  Const        r11, 0
  Move         r20, r11
L12:
  LessInt      r21, r20, r16
  JumpIfFalse  r21, L1
  Index        r22, r15, r20
  Move         r23, r22
  Const        r17, "current_addr"
  Index        r24, r14, r17
  Const        r18, "ca_address_sk"
  Index        r25, r23, r18
  Equal        r26, r24, r25
  Const        r19, "ca_city"
  Index        r27, r23, r19
  Const        r28, "Springfield"
  Equal        r29, r27, r28
  Move         r30, r26
  JumpIfFalse  r30, L2
  Move         r30, r29
L2:
  JumpIfFalse  r30, L3
  // join cd in customer_demographics on c.cdemo == cd.cd_demo_sk
  IterPrep     r31, r2
  Len          r32, r31
  Const        r33, "cdemo"
  Const        r34, "cd_demo_sk"
  // select sr.amt)
  Const        r7, "amt"
  // join cd in customer_demographics on c.cdemo == cd.cd_demo_sk
  Const        r11, 0
  Move         r35, r11
L11:
  LessInt      r36, r35, r32
  JumpIfFalse  r36, L3
  Index        r37, r31, r35
  Move         r38, r37
  Const        r33, "cdemo"
  Index        r39, r14, r33
  Const        r34, "cd_demo_sk"
  Index        r40, r38, r34
  Equal        r41, r39, r40
  JumpIfFalse  r41, L4
  // join sr in store_returns on cd.cd_demo_sk == sr.sr_cdemo_sk
  IterPrep     r42, r5
  Len          r43, r42
  Const        r34, "cd_demo_sk"
  Const        r44, "sr_cdemo_sk"
  // select sr.amt)
  Const        r7, "amt"
  // join sr in store_returns on cd.cd_demo_sk == sr.sr_cdemo_sk
  Const        r11, 0
  Move         r45, r11
L10:
  LessInt      r46, r45, r43
  JumpIfFalse  r46, L4
  Index        r47, r42, r45
  Move         r48, r47
  Const        r34, "cd_demo_sk"
  Index        r49, r38, r34
  Const        r44, "sr_cdemo_sk"
  Index        r50, r48, r44
  Equal        r51, r49, r50
  JumpIfFalse  r51, L5
  // join hd in household_demographics on c.hdemo == hd.hd_demo_sk
  IterPrep     r52, r3
  Len          r53, r52
  Const        r54, "hdemo"
  Const        r55, "hd_demo_sk"
  // select sr.amt)
  Const        r7, "amt"
  // join hd in household_demographics on c.hdemo == hd.hd_demo_sk
  Const        r11, 0
  Move         r56, r11
L9:
  LessInt      r57, r56, r53
  JumpIfFalse  r57, L5
  Index        r58, r52, r56
  Move         r59, r58
  Const        r54, "hdemo"
  Index        r60, r14, r54
  Const        r55, "hd_demo_sk"
  Index        r61, r59, r55
  Equal        r62, r60, r61
  JumpIfFalse  r62, L6
  // join ib in income_band on hd.income_band_sk == ib.ib_income_band_sk
  IterPrep     r63, r4
  Len          r64, r63
  Const        r65, "income_band_sk"
  Const        r66, "ib_income_band_sk"
  // select sr.amt)
  Const        r7, "amt"
  // join ib in income_band on hd.income_band_sk == ib.ib_income_band_sk
  Const        r11, 0
  Move         r67, r11
L8:
  LessInt      r68, r67, r64
  JumpIfFalse  r68, L6
  Index        r69, r63, r67
  Move         r70, r69
  Const        r65, "income_band_sk"
  Index        r71, r59, r65
  Const        r66, "ib_income_band_sk"
  Index        r72, r70, r66
  Equal        r73, r71, r72
  JumpIfFalse  r73, L7
  // select sr.amt)
  Const        r7, "amt"
  Index        r74, r48, r7
  // sum(from c in customer
  Append       r75, r6, r74
  Move         r6, r75
L7:
  // join ib in income_band on hd.income_band_sk == ib.ib_income_band_sk
  Const        r76, 1
  Add          r67, r67, r76
  Jump         L8
L6:
  // join hd in household_demographics on c.hdemo == hd.hd_demo_sk
  Const        r76, 1
  Add          r56, r56, r76
  Jump         L9
L5:
  // join sr in store_returns on cd.cd_demo_sk == sr.sr_cdemo_sk
  Const        r76, 1
  Add          r45, r45, r76
  Jump         L10
L4:
  // join cd in customer_demographics on c.cdemo == cd.cd_demo_sk
  Const        r76, 1
  Add          r35, r35, r76
  Jump         L11
L3:
  // join ca in customer_address on c.current_addr == ca.ca_address_sk && ca.ca_city == "Springfield"
  Const        r76, 1
  Add          r20, r20, r76
  Jump         L12
L1:
  // sum(from c in customer
  Const        r76, 1
  AddInt       r10, r10, r76
  Jump         L13
L0:
  Sum          r77, r6
  // json(result)
  JSON         r77
  // expect result == 84.0
  Const        r78, 84.0
  EqualFloat   r79, r77, r78
  Expect       r79
  Return       r0
