func main (regs=253)
  // let call_center = [
  Const        r0, [{"cc_call_center_id": "CC1", "cc_call_center_sk": 1, "cc_manager": "Alice", "cc_name": "Main"}]
  // let catalog_returns = [
  Const        r1, [{"cr_call_center_sk": 1, "cr_net_loss": 10, "cr_returned_date_sk": 1, "cr_returning_customer_sk": 1}]
  // let date_dim = [{d_date_sk: 1, d_year: 2001, d_moy: 5}]
  Const        r2, [{"d_date_sk": 1, "d_moy": 5, "d_year": 2001}]
  // let customer = [
  Const        r3, [{"c_current_addr_sk": 1, "c_current_cdemo_sk": 1, "c_current_hdemo_sk": 1, "c_customer_sk": 1}]
  // let customer_demographics = [{cd_demo_sk: 1, cd_marital_status: "M", cd_education_status: "Unknown"}]
  Const        r4, [{"cd_demo_sk": 1, "cd_education_status": "Unknown", "cd_marital_status": "M"}]
  // let household_demographics = [{hd_demo_sk: 1, hd_buy_potential: "1001-5000"}]
  Const        r5, [{"hd_buy_potential": "1001-5000", "hd_demo_sk": 1}]
  // let customer_address = [{ca_address_sk: 1, ca_gmt_offset: -6}]
  Const        r6, [{"ca_address_sk": 1, "ca_gmt_offset": -6}]
  // from cc in call_center
  Const        r7, []
  // group by {id: cc.cc_call_center_id, name: cc.cc_name, mgr: cc.cc_manager} into g
  Const        r8, "id"
  Const        r9, "cc_call_center_id"
  Const        r10, "name"
  Const        r11, "cc_name"
  Const        r12, "mgr"
  Const        r13, "cc_manager"
  // where d.d_year == 2001 && d.d_moy == 5 &&
  Const        r14, "d_year"
  Const        r15, "d_moy"
  // cd.cd_marital_status == "M" && cd.cd_education_status == "Unknown" &&
  Const        r16, "cd_marital_status"
  Const        r17, "cd_education_status"
  // hd.hd_buy_potential == "1001-5000" && ca.ca_gmt_offset == (-6)
  Const        r18, "hd_buy_potential"
  Const        r19, "ca_gmt_offset"
  // Call_Center: g.key.id,
  Const        r20, "Call_Center"
  Const        r21, "key"
  Const        r22, "id"
  // Call_Center_Name: g.key.name,
  Const        r23, "Call_Center_Name"
  Const        r24, "key"
  Const        r25, "name"
  // Manager: g.key.mgr,
  Const        r26, "Manager"
  Const        r27, "key"
  Const        r28, "mgr"
  // Returns_Loss: sum(from x in g select x.cr_net_loss)
  Const        r29, "Returns_Loss"
  Const        r30, "cr_net_loss"
  // from cc in call_center
  MakeMap      r31, 0, r0
  Const        r32, []
  IterPrep     r34, r0
  Len          r35, r34
  Const        r36, 0
L20:
  LessInt      r37, r36, r35
  JumpIfFalse  r37, L0
  Index        r39, r34, r36
  // join cr in catalog_returns on cc.cc_call_center_sk == cr.cr_call_center_sk
  IterPrep     r40, r1
  Len          r41, r40
  Const        r42, 0
L19:
  LessInt      r43, r42, r41
  JumpIfFalse  r43, L1
  Index        r45, r40, r42
  Const        r46, "cc_call_center_sk"
  Index        r47, r39, r46
  Const        r48, "cr_call_center_sk"
  Index        r49, r45, r48
  Equal        r50, r47, r49
  JumpIfFalse  r50, L2
  // join d in date_dim on cr.cr_returned_date_sk == d.d_date_sk
  IterPrep     r51, r2
  Len          r52, r51
  Const        r53, 0
L18:
  LessInt      r54, r53, r52
  JumpIfFalse  r54, L2
  Index        r56, r51, r53
  Const        r57, "cr_returned_date_sk"
  Index        r58, r45, r57
  Const        r59, "d_date_sk"
  Index        r60, r56, r59
  Equal        r61, r58, r60
  JumpIfFalse  r61, L3
  // join c in customer on cr.cr_returning_customer_sk == c.c_customer_sk
  IterPrep     r62, r3
  Len          r63, r62
  Const        r64, 0
L17:
  LessInt      r65, r64, r63
  JumpIfFalse  r65, L3
  Index        r67, r62, r64
  Const        r68, "cr_returning_customer_sk"
  Index        r69, r45, r68
  Const        r70, "c_customer_sk"
  Index        r71, r67, r70
  Equal        r72, r69, r71
  JumpIfFalse  r72, L4
  // join cd in customer_demographics on c.c_current_cdemo_sk == cd.cd_demo_sk
  IterPrep     r73, r4
  Len          r74, r73
  Const        r75, 0
L16:
  LessInt      r76, r75, r74
  JumpIfFalse  r76, L4
  Index        r78, r73, r75
  Const        r79, "c_current_cdemo_sk"
  Index        r80, r67, r79
  Const        r81, "cd_demo_sk"
  Index        r82, r78, r81
  Equal        r83, r80, r82
  JumpIfFalse  r83, L5
  // join hd in household_demographics on c.c_current_hdemo_sk == hd.hd_demo_sk
  IterPrep     r84, r5
  Len          r85, r84
  Const        r86, 0
L15:
  LessInt      r87, r86, r85
  JumpIfFalse  r87, L5
  Index        r89, r84, r86
  Const        r90, "c_current_hdemo_sk"
  Index        r91, r67, r90
  Const        r92, "hd_demo_sk"
  Index        r93, r89, r92
  Equal        r94, r91, r93
  JumpIfFalse  r94, L6
  // join ca in customer_address on c.c_current_addr_sk == ca.ca_address_sk
  IterPrep     r95, r6
  Len          r96, r95
  Const        r97, 0
L14:
  LessInt      r98, r97, r96
  JumpIfFalse  r98, L6
  Index        r100, r95, r97
  Const        r101, "c_current_addr_sk"
  Index        r102, r67, r101
  Const        r103, "ca_address_sk"
  Index        r104, r100, r103
  Equal        r105, r102, r104
  JumpIfFalse  r105, L7
  // where d.d_year == 2001 && d.d_moy == 5 &&
  Const        r106, "d_year"
  Index        r107, r56, r106
  Const        r108, 2001
  Equal        r109, r107, r108
  Const        r110, "d_moy"
  Index        r111, r56, r110
  Const        r112, 5
  Equal        r113, r111, r112
  // cd.cd_marital_status == "M" && cd.cd_education_status == "Unknown" &&
  Const        r114, "cd_marital_status"
  Index        r115, r78, r114
  Const        r116, "M"
  Equal        r117, r115, r116
  Const        r118, "cd_education_status"
  Index        r119, r78, r118
  Const        r120, "Unknown"
  Equal        r121, r119, r120
  // hd.hd_buy_potential == "1001-5000" && ca.ca_gmt_offset == (-6)
  Const        r122, "hd_buy_potential"
  Index        r123, r89, r122
  Const        r124, "1001-5000"
  Equal        r125, r123, r124
  Const        r126, "ca_gmt_offset"
  Index        r127, r100, r126
  Const        r128, 6
  Const        r129, -6
  Equal        r130, r127, r129
  // where d.d_year == 2001 && d.d_moy == 5 &&
  Move         r131, r109
  JumpIfFalse  r131, L8
L8:
  Move         r132, r113
  JumpIfFalse  r132, L9
L9:
  // cd.cd_marital_status == "M" && cd.cd_education_status == "Unknown" &&
  Move         r133, r117
  JumpIfFalse  r133, L10
L10:
  Move         r134, r121
  JumpIfFalse  r134, L11
L11:
  // hd.hd_buy_potential == "1001-5000" && ca.ca_gmt_offset == (-6)
  Move         r135, r125
  JumpIfFalse  r135, L12
  Move         r135, r130
L12:
  // where d.d_year == 2001 && d.d_moy == 5 &&
  JumpIfFalse  r135, L7
  // from cc in call_center
  Const        r136, "cc"
  Move         r137, r39
  Const        r138, "cr"
  Move         r139, r45
  Const        r140, "d"
  Move         r141, r56
  Const        r142, "c"
  Move         r143, r67
  Const        r144, "cd"
  Move         r145, r78
  Const        r146, "hd"
  Move         r147, r89
  Const        r148, "ca"
  Move         r149, r100
  MakeMap      r150, 7, r136
  // group by {id: cc.cc_call_center_id, name: cc.cc_name, mgr: cc.cc_manager} into g
  Const        r151, "id"
  Const        r152, "cc_call_center_id"
  Index        r153, r39, r152
  Const        r154, "name"
  Const        r155, "cc_name"
  Index        r156, r39, r155
  Const        r157, "mgr"
  Const        r158, "cc_manager"
  Index        r159, r39, r158
  Move         r160, r151
  Move         r161, r153
  Move         r162, r154
  Move         r163, r156
  Move         r164, r157
  Move         r165, r159
  MakeMap      r166, 3, r160
  Str          r167, r166
  In           r168, r167, r31
  JumpIfTrue   r168, L13
  // from cc in call_center
  Const        r169, []
  Const        r170, "__group__"
  Const        r171, true
  Const        r172, "key"
  // group by {id: cc.cc_call_center_id, name: cc.cc_name, mgr: cc.cc_manager} into g
  Move         r173, r166
  // from cc in call_center
  Const        r174, "items"
  Move         r175, r169
  Const        r176, "count"
  Const        r177, 0
  Move         r178, r170
  Move         r179, r171
  Move         r180, r172
  Move         r181, r173
  Move         r182, r174
  Move         r183, r175
  Move         r184, r176
  Move         r185, r177
  MakeMap      r186, 4, r178
  SetIndex     r31, r167, r186
  Append       r32, r32, r186
L13:
  Const        r188, "items"
  Index        r189, r31, r167
  Index        r190, r189, r188
  Append       r191, r190, r150
  SetIndex     r189, r188, r191
  Const        r192, "count"
  Index        r193, r189, r192
  Const        r194, 1
  AddInt       r195, r193, r194
  SetIndex     r189, r192, r195
L7:
  // join ca in customer_address on c.c_current_addr_sk == ca.ca_address_sk
  Const        r196, 1
  AddInt       r97, r97, r196
  Jump         L14
L6:
  // join hd in household_demographics on c.c_current_hdemo_sk == hd.hd_demo_sk
  Const        r197, 1
  AddInt       r86, r86, r197
  Jump         L15
L5:
  // join cd in customer_demographics on c.c_current_cdemo_sk == cd.cd_demo_sk
  Const        r198, 1
  AddInt       r75, r75, r198
  Jump         L16
L4:
  // join c in customer on cr.cr_returning_customer_sk == c.c_customer_sk
  Const        r199, 1
  AddInt       r64, r64, r199
  Jump         L17
L3:
  // join d in date_dim on cr.cr_returned_date_sk == d.d_date_sk
  Const        r200, 1
  AddInt       r53, r53, r200
  Jump         L18
L2:
  // join cr in catalog_returns on cc.cc_call_center_sk == cr.cr_call_center_sk
  Const        r201, 1
  AddInt       r42, r42, r201
  Jump         L19
L1:
  // from cc in call_center
  Const        r202, 1
  AddInt       r36, r36, r202
  Jump         L20
L0:
  Const        r203, 0
  Len          r205, r32
L24:
  LessInt      r206, r203, r205
  JumpIfFalse  r206, L21
  Index        r208, r32, r203
  // Call_Center: g.key.id,
  Const        r209, "Call_Center"
  Const        r210, "key"
  Index        r211, r208, r210
  Const        r212, "id"
  Index        r213, r211, r212
  // Call_Center_Name: g.key.name,
  Const        r214, "Call_Center_Name"
  Const        r215, "key"
  Index        r216, r208, r215
  Const        r217, "name"
  Index        r218, r216, r217
  // Manager: g.key.mgr,
  Const        r219, "Manager"
  Const        r220, "key"
  Index        r221, r208, r220
  Const        r222, "mgr"
  Index        r223, r221, r222
  // Returns_Loss: sum(from x in g select x.cr_net_loss)
  Const        r224, "Returns_Loss"
  Const        r225, []
  Const        r226, "cr_net_loss"
  IterPrep     r227, r208
  Len          r228, r227
  Const        r229, 0
L23:
  LessInt      r231, r229, r228
  JumpIfFalse  r231, L22
  Index        r233, r227, r229
  Const        r234, "cr_net_loss"
  Index        r235, r233, r234
  Append       r225, r225, r235
  Const        r237, 1
  AddInt       r229, r229, r237
  Jump         L23
L22:
  Sum          r238, r225
  // Call_Center: g.key.id,
  Move         r239, r209
  Move         r240, r213
  // Call_Center_Name: g.key.name,
  Move         r241, r214
  Move         r242, r218
  // Manager: g.key.mgr,
  Move         r243, r219
  Move         r244, r223
  // Returns_Loss: sum(from x in g select x.cr_net_loss)
  Move         r245, r224
  Move         r246, r238
  // select {
  MakeMap      r247, 4, r239
  // from cc in call_center
  Append       r7, r7, r247
  Const        r249, 1
  AddInt       r203, r203, r249
  Jump         L24
L21:
  // let result = first(
  First        r250, r7
  // json(result)
  JSON         r250
  // expect result == {
  Const        r251, {"Call_Center": "CC1", "Call_Center_Name": "Main", "Manager": "Alice", "Returns_Loss": 10}
  Equal        r252, r250, r251
  Expect       r252
  Return       r0
