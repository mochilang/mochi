func main (regs=215)
  // let call_center = [
  Const        r0, [{"cc_call_center_id": "CC1", "cc_call_center_sk": 1, "cc_manager": "Alice", "cc_name": "Main"}]
  // let catalog_returns = [
  Const        r1, [{"cr_call_center_sk": 1, "cr_net_loss": 10, "cr_returned_date_sk": 1, "cr_returning_customer_sk": 1}]
  // let date_dim = [{d_date_sk: 1, d_year: 2001, d_moy: 5}]
  Const        r2, [{"d_date_sk": 1, "d_moy": 5, "d_year": 2001}]
  // let customer = [
  Const        r3, [{"c_current_addr_sk": 1, "c_current_cdemo_sk": 1, "c_current_hdemo_sk": 1, "c_customer_sk": 1}]
  // let customer_demographics = [{cd_demo_sk: 1, cd_marital_status: "M", cd_education_status: "Unknown"}]
  Const        r4, [{"cd_demo_sk": 1, "cd_education_status": "Unknown", "cd_marital_status": "M"}]
  // let household_demographics = [{hd_demo_sk: 1, hd_buy_potential: "1001-5000"}]
  Const        r5, [{"hd_buy_potential": "1001-5000", "hd_demo_sk": 1}]
  // let customer_address = [{ca_address_sk: 1, ca_gmt_offset: -6}]
  Const        r6, [{"ca_address_sk": 1, "ca_gmt_offset": -6}]
  // from cc in call_center
  Const        r7, []
  // group by {id: cc.cc_call_center_id, name: cc.cc_name, mgr: cc.cc_manager} into g
  Const        r8, "id"
  Const        r9, "cc_call_center_id"
  Const        r10, "name"
  Const        r11, "cc_name"
  Const        r12, "mgr"
  Const        r13, "cc_manager"
  // where d.d_year == 2001 && d.d_moy == 5 &&
  Const        r14, "d_year"
  Const        r15, "d_moy"
  // cd.cd_marital_status == "M" && cd.cd_education_status == "Unknown" &&
  Const        r16, "cd_marital_status"
  Const        r17, "cd_education_status"
  // hd.hd_buy_potential == "1001-5000" && ca.ca_gmt_offset == (-6)
  Const        r18, "hd_buy_potential"
  Const        r19, "ca_gmt_offset"
  // Call_Center: g.key.id,
  Const        r20, "Call_Center"
  Const        r21, "key"
  // Call_Center_Name: g.key.name,
  Const        r22, "Call_Center_Name"
  // Manager: g.key.mgr,
  Const        r23, "Manager"
  // Returns_Loss: sum(from x in g select x.cr_net_loss)
  Const        r24, "Returns_Loss"
  Const        r25, "cr_net_loss"
  // from cc in call_center
  MakeMap      r26, 0, r0
  Const        r27, []
  IterPrep     r29, r0
  Len          r30, r29
  Const        r31, 0
L16:
  LessInt      r32, r31, r30
  JumpIfFalse  r32, L0
  Index        r34, r29, r31
  // join cr in catalog_returns on cc.cc_call_center_sk == cr.cr_call_center_sk
  IterPrep     r35, r1
  Len          r36, r35
  Const        r37, 0
L15:
  LessInt      r38, r37, r36
  JumpIfFalse  r38, L1
  Index        r40, r35, r37
  Const        r41, "cc_call_center_sk"
  Index        r42, r34, r41
  Const        r43, "cr_call_center_sk"
  Index        r44, r40, r43
  Equal        r45, r42, r44
  JumpIfFalse  r45, L2
  // join d in date_dim on cr.cr_returned_date_sk == d.d_date_sk
  IterPrep     r46, r2
  Len          r47, r46
  Const        r48, 0
L14:
  LessInt      r49, r48, r47
  JumpIfFalse  r49, L2
  Index        r51, r46, r48
  Const        r52, "cr_returned_date_sk"
  Index        r53, r40, r52
  Const        r54, "d_date_sk"
  Index        r55, r51, r54
  Equal        r56, r53, r55
  JumpIfFalse  r56, L3
  // join c in customer on cr.cr_returning_customer_sk == c.c_customer_sk
  IterPrep     r57, r3
  Len          r58, r57
  Const        r59, 0
L13:
  LessInt      r60, r59, r58
  JumpIfFalse  r60, L3
  Index        r62, r57, r59
  Const        r63, "cr_returning_customer_sk"
  Index        r64, r40, r63
  Const        r65, "c_customer_sk"
  Index        r66, r62, r65
  Equal        r67, r64, r66
  JumpIfFalse  r67, L4
  // join cd in customer_demographics on c.c_current_cdemo_sk == cd.cd_demo_sk
  IterPrep     r68, r4
  Len          r69, r68
  Const        r70, 0
L12:
  LessInt      r71, r70, r69
  JumpIfFalse  r71, L4
  Index        r73, r68, r70
  Const        r74, "c_current_cdemo_sk"
  Index        r75, r62, r74
  Const        r76, "cd_demo_sk"
  Index        r77, r73, r76
  Equal        r78, r75, r77
  JumpIfFalse  r78, L5
  // join hd in household_demographics on c.c_current_hdemo_sk == hd.hd_demo_sk
  IterPrep     r79, r5
  Len          r80, r79
  Const        r81, 0
L11:
  LessInt      r82, r81, r80
  JumpIfFalse  r82, L5
  Index        r84, r79, r81
  Const        r85, "c_current_hdemo_sk"
  Index        r86, r62, r85
  Const        r87, "hd_demo_sk"
  Index        r88, r84, r87
  Equal        r89, r86, r88
  JumpIfFalse  r89, L6
  // join ca in customer_address on c.c_current_addr_sk == ca.ca_address_sk
  IterPrep     r90, r6
  Len          r91, r90
  Const        r92, 0
L10:
  LessInt      r93, r92, r91
  JumpIfFalse  r93, L6
  Index        r95, r90, r92
  Const        r96, "c_current_addr_sk"
  Index        r97, r62, r96
  Const        r98, "ca_address_sk"
  Index        r99, r95, r98
  Equal        r100, r97, r99
  JumpIfFalse  r100, L7
  // where d.d_year == 2001 && d.d_moy == 5 &&
  Index        r101, r51, r14
  Const        r102, 2001
  Equal        r103, r101, r102
  Index        r104, r51, r15
  Const        r105, 5
  Equal        r106, r104, r105
  // cd.cd_marital_status == "M" && cd.cd_education_status == "Unknown" &&
  Index        r107, r73, r16
  Const        r108, "M"
  Equal        r109, r107, r108
  Index        r110, r73, r17
  Const        r111, "Unknown"
  Equal        r112, r110, r111
  // hd.hd_buy_potential == "1001-5000" && ca.ca_gmt_offset == (-6)
  Index        r113, r84, r18
  Const        r114, "1001-5000"
  Equal        r115, r113, r114
  Index        r116, r95, r19
  Const        r117, -6
  Equal        r118, r116, r117
  // where d.d_year == 2001 && d.d_moy == 5 &&
  JumpIfFalse  r103, L8
  Move         r103, r106
  JumpIfFalse  r103, L8
  Move         r103, r109
  // cd.cd_marital_status == "M" && cd.cd_education_status == "Unknown" &&
  JumpIfFalse  r103, L8
  Move         r103, r112
  JumpIfFalse  r103, L8
  Move         r103, r115
  // hd.hd_buy_potential == "1001-5000" && ca.ca_gmt_offset == (-6)
  JumpIfFalse  r103, L8
  Move         r103, r118
L8:
  // where d.d_year == 2001 && d.d_moy == 5 &&
  JumpIfFalse  r103, L7
  // from cc in call_center
  Const        r119, "cc"
  Move         r120, r34
  Const        r121, "cr"
  Move         r122, r40
  Const        r123, "d"
  Move         r124, r51
  Const        r125, "c"
  Move         r126, r62
  Const        r127, "cd"
  Move         r128, r73
  Const        r129, "hd"
  Move         r130, r84
  Const        r131, "ca"
  Move         r132, r95
  MakeMap      r133, 7, r119
  // group by {id: cc.cc_call_center_id, name: cc.cc_name, mgr: cc.cc_manager} into g
  Const        r134, "id"
  Index        r135, r34, r9
  Const        r136, "name"
  Index        r137, r34, r11
  Const        r138, "mgr"
  Index        r139, r34, r13
  Move         r140, r134
  Move         r141, r135
  Move         r142, r136
  Move         r143, r137
  Move         r144, r138
  Move         r145, r139
  MakeMap      r146, 3, r140
  Str          r147, r146
  In           r148, r147, r26
  JumpIfTrue   r148, L9
  // from cc in call_center
  Const        r149, []
  Const        r150, "__group__"
  Const        r151, true
  Const        r152, "key"
  // group by {id: cc.cc_call_center_id, name: cc.cc_name, mgr: cc.cc_manager} into g
  Move         r153, r146
  // from cc in call_center
  Const        r154, "items"
  Move         r155, r149
  Const        r156, "count"
  Const        r157, 0
  Move         r158, r150
  Move         r159, r151
  Move         r160, r152
  Move         r161, r153
  Move         r162, r154
  Move         r163, r155
  Move         r164, r156
  Move         r165, r157
  MakeMap      r166, 4, r158
  SetIndex     r26, r147, r166
  Append       r27, r27, r166
L9:
  Const        r168, "items"
  Index        r169, r26, r147
  Index        r170, r169, r168
  Append       r171, r170, r133
  SetIndex     r169, r168, r171
  Const        r172, "count"
  Index        r173, r169, r172
  Const        r174, 1
  AddInt       r175, r173, r174
  SetIndex     r169, r172, r175
L7:
  // join ca in customer_address on c.c_current_addr_sk == ca.ca_address_sk
  AddInt       r92, r92, r174
  Jump         L10
L6:
  // join hd in household_demographics on c.c_current_hdemo_sk == hd.hd_demo_sk
  AddInt       r81, r81, r174
  Jump         L11
L5:
  // join cd in customer_demographics on c.c_current_cdemo_sk == cd.cd_demo_sk
  AddInt       r70, r70, r174
  Jump         L12
L4:
  // join c in customer on cr.cr_returning_customer_sk == c.c_customer_sk
  AddInt       r59, r59, r174
  Jump         L13
L3:
  // join d in date_dim on cr.cr_returned_date_sk == d.d_date_sk
  AddInt       r48, r48, r174
  Jump         L14
L2:
  // join cr in catalog_returns on cc.cc_call_center_sk == cr.cr_call_center_sk
  AddInt       r37, r37, r174
  Jump         L15
L1:
  // from cc in call_center
  AddInt       r31, r31, r174
  Jump         L16
L0:
  Const        r177, 0
  Move         r176, r177
  Len          r178, r27
L20:
  LessInt      r179, r176, r178
  JumpIfFalse  r179, L17
  Index        r181, r27, r176
  // Call_Center: g.key.id,
  Const        r182, "Call_Center"
  Index        r183, r181, r21
  Index        r184, r183, r8
  // Call_Center_Name: g.key.name,
  Const        r185, "Call_Center_Name"
  Index        r186, r181, r21
  Index        r187, r186, r10
  // Manager: g.key.mgr,
  Const        r188, "Manager"
  Index        r189, r181, r21
  Index        r190, r189, r12
  // Returns_Loss: sum(from x in g select x.cr_net_loss)
  Const        r191, "Returns_Loss"
  Const        r192, []
  IterPrep     r193, r181
  Len          r194, r193
  Move         r195, r177
L19:
  LessInt      r196, r195, r194
  JumpIfFalse  r196, L18
  Index        r198, r193, r195
  Index        r199, r198, r25
  Append       r192, r192, r199
  AddInt       r195, r195, r174
  Jump         L19
L18:
  Sum          r201, r192
  // Call_Center: g.key.id,
  Move         r202, r182
  Move         r203, r184
  // Call_Center_Name: g.key.name,
  Move         r204, r185
  Move         r205, r187
  // Manager: g.key.mgr,
  Move         r206, r188
  Move         r207, r190
  // Returns_Loss: sum(from x in g select x.cr_net_loss)
  Move         r208, r191
  Move         r209, r201
  // select {
  MakeMap      r210, 4, r202
  // from cc in call_center
  Append       r7, r7, r210
  AddInt       r176, r176, r174
  Jump         L20
L17:
  // let result = first(
  First        r212, r7
  // json(result)
  JSON         r212
  // expect result == {
  Const        r213, {"Call_Center": "CC1", "Call_Center_Name": "Main", "Manager": "Alice", "Returns_Loss": 0}
  Equal        r214, r212, r213
  Expect       r214
  Return       r0
