func main (regs=58)
  // let v2 = [
  Const        r0, [{"avg_monthly_sales": 100, "d_year": 2020, "item": "A", "sum_sales": 120}, {"avg_monthly_sales": 80, "d_year": 2020, "item": "B", "sum_sales": 70}, {"avg_monthly_sales": 50, "d_year": 2019, "item": "C", "sum_sales": 60}]
  // let year = 2020
  Const        r1, 2020
  // let orderby = "item"
  Const        r2, "item"
  // from v in v2
  Const        r3, []
  // where v.d_year == year && v.avg_monthly_sales > 0 && abs(v.sum_sales - v.avg_monthly_sales) / v.avg_monthly_sales > 0.1
  Const        r4, "d_year"
  Const        r5, "avg_monthly_sales"
  Const        r6, "sum_sales"
  Const        r7, "avg_monthly_sales"
  Const        r8, "avg_monthly_sales"
  // sort by [v.sum_sales - v.avg_monthly_sales, v.item]
  Const        r9, "sum_sales"
  Const        r10, "avg_monthly_sales"
  Const        r11, "item"
  // from v in v2
  IterPrep     r12, r0
  Len          r13, r12
  Const        r14, 0
L4:
  LessInt      r16, r14, r13
  JumpIfFalse  r16, L0
  Index        r18, r12, r14
  // where v.d_year == year && v.avg_monthly_sales > 0 && abs(v.sum_sales - v.avg_monthly_sales) / v.avg_monthly_sales > 0.1
  Const        r19, "d_year"
  Index        r20, r18, r19
  Const        r22, "sum_sales"
  Index        r23, r18, r22
  Const        r24, "avg_monthly_sales"
  Index        r25, r18, r24
  Sub          r21, r23, r25
  Call         r27, abs, r21
  Const        r28, "avg_monthly_sales"
  Index        r29, r18, r28
  Div          r30, r27, r29
  Const        r31, "avg_monthly_sales"
  Index        r32, r18, r31
  Const        r33, 0
  Less         r34, r33, r32
  Const        r35, 0.1
  LessFloat    r36, r35, r30
  Equal        r38, r20, r1
  JumpIfFalse  r38, L1
L1:
  Move         r39, r34
  JumpIfFalse  r39, L2
  Move         r39, r36
L2:
  JumpIfFalse  r39, L3
  // sort by [v.sum_sales - v.avg_monthly_sales, v.item]
  Const        r40, "sum_sales"
  Index        r41, r18, r40
  Const        r42, "avg_monthly_sales"
  Index        r43, r18, r42
  Sub          r45, r41, r43
  Const        r46, "item"
  Index        r48, r18, r46
  MakeList     r50, 2, r45
  // from v in v2
  Move         r51, r18
  MakeList     r52, 2, r50
  Append       r3, r3, r52
L3:
  Const        r54, 1
  AddInt       r14, r14, r54
  Jump         L4
L0:
  // sort by [v.sum_sales - v.avg_monthly_sales, v.item]
  Sort         r3, r3
  // json(result)
  JSON         r3
  // expect result == [
  Const        r56, [{"avg_monthly_sales": 50, "d_year": 2019, "item": "C", "sum_sales": 60}, {"avg_monthly_sales": 100, "d_year": 2020, "item": "A", "sum_sales": 120}]
  Equal        r57, r3, r56
  Expect       r57
  Return       r0

  // fun abs(x: float): float {
func abs (regs=4)
  // if x >= 0.0 { x } else { -x }
  Const        r1, 0
  LessEqFloat  r2, r1, r0
  JumpIfFalse  r2, L0
  Jump         L1
L0:
  Neg          r3, r0
L1:
  Return       r0
