func main (regs=60)
  // let v2 = [
  Const        r0, [{"avg_monthly_sales": 100, "d_year": 2020, "item": "A", "sum_sales": 120}, {"avg_monthly_sales": 80, "d_year": 2020, "item": "B", "sum_sales": 70}, {"avg_monthly_sales": 50, "d_year": 2019, "item": "C", "sum_sales": 60}]
  // let year = 2020
  Const        r1, 2020
  // let orderby = "item"
  Const        r2, "item"
  // let dummy = null
  Const        r3, nil
  // from v in v2
  Const        r4, []
  // where v.d_year == year && v.avg_monthly_sales > 0 && abs(v.sum_sales - v.avg_monthly_sales) / v.avg_monthly_sales > 0.1
  Const        r5, "d_year"
  Const        r6, "avg_monthly_sales"
  Const        r7, "sum_sales"
  Const        r8, "avg_monthly_sales"
  Const        r9, "avg_monthly_sales"
  // sort by [v.sum_sales - v.avg_monthly_sales, v.item]
  Const        r10, "sum_sales"
  Const        r11, "avg_monthly_sales"
  Const        r12, "item"
  // from v in v2
  IterPrep     r13, r0
  Len          r14, r13
  Const        r15, 0
L4:
  LessInt      r17, r15, r14
  JumpIfFalse  r17, L0
  Index        r19, r13, r15
  // where v.d_year == year && v.avg_monthly_sales > 0 && abs(v.sum_sales - v.avg_monthly_sales) / v.avg_monthly_sales > 0.1
  Const        r20, "d_year"
  Index        r21, r19, r20
  Const        r23, "sum_sales"
  Index        r24, r19, r23
  Const        r25, "avg_monthly_sales"
  Index        r26, r19, r25
  Sub          r22, r24, r26
  Call         r28, abs, r22
  Const        r29, "avg_monthly_sales"
  Index        r30, r19, r29
  Div          r31, r28, r30
  Const        r32, "avg_monthly_sales"
  Index        r33, r19, r32
  Const        r34, 0
  Less         r35, r34, r33
  Const        r36, 0.1
  LessFloat    r37, r36, r31
  Equal        r39, r21, r1
  JumpIfFalse  r39, L1
L1:
  Move         r40, r35
  JumpIfFalse  r40, L2
  Move         r40, r37
L2:
  JumpIfFalse  r40, L3
  // sort by [v.sum_sales - v.avg_monthly_sales, v.item]
  Const        r41, "sum_sales"
  Index        r42, r19, r41
  Const        r43, "avg_monthly_sales"
  Index        r44, r19, r43
  Sub          r46, r42, r44
  Const        r47, "item"
  Index        r49, r19, r47
  MakeList     r51, 2, r46
  // from v in v2
  Move         r52, r19
  MakeList     r53, 2, r51
  Append       r4, r4, r53
L3:
  Const        r55, 1
  AddInt       r15, r15, r55
  Jump         L4
L0:
  // sort by [v.sum_sales - v.avg_monthly_sales, v.item]
  Sort         r4, r4
  // let result = concat(dummy, base)
  UnionAll     r57, r3, r4
  // json(result)
  JSON         r57
  // expect result == [
  Const        r58, [{"avg_monthly_sales": 50, "d_year": 2019, "item": "C", "sum_sales": 60}, {"avg_monthly_sales": 100, "d_year": 2020, "item": "A", "sum_sales": 120}]
  Equal        r59, r57, r58
  Expect       r59
  Return       r0

  // fun abs(x: float): float {
func abs (regs=4)
  // if x >= 0.0 { x } else { -x }
  Const        r1, 0
  LessEqFloat  r2, r1, r0
  JumpIfFalse  r2, L0
  Jump         L1
L0:
  Neg          r3, r0
L1:
  Return       r0
