func main (regs=44)
  // let v2 = [
  Const        r0, [{"avg_monthly_sales": 100, "d_year": 2020, "item": "A", "sum_sales": 120}, {"avg_monthly_sales": 80, "d_year": 2020, "item": "B", "sum_sales": 70}, {"avg_monthly_sales": 50, "d_year": 2019, "item": "C", "sum_sales": 60}]
  // let year = 2020
  Const        r1, 2020
  // let orderby = "item"
  Const        r2, "item"
  // from v in v2
  Const        r3, []
  // where v.d_year == year && v.avg_monthly_sales > 0 && abs(v.sum_sales - v.avg_monthly_sales) / v.avg_monthly_sales > 0.1
  Const        r4, "d_year"
  Const        r5, "avg_monthly_sales"
  Const        r6, "sum_sales"
  // from v in v2
  IterPrep     r7, r0
  Len          r8, r7
  Const        r10, 0
  Move         r9, r10
L4:
  LessInt      r11, r9, r8
  JumpIfFalse  r11, L0
  Index        r12, r7, r9
  Move         r13, r12
  // where v.d_year == year && v.avg_monthly_sales > 0 && abs(v.sum_sales - v.avg_monthly_sales) / v.avg_monthly_sales > 0.1
  Index        r14, r13, r4
  Index        r16, r13, r6
  Index        r17, r13, r5
  Sub          r18, r16, r17
  Move         r15, r18
  Call         r19, abs, r15
  Index        r20, r13, r5
  Div          r21, r19, r20
  Index        r22, r13, r5
  Less         r23, r10, r22
  Const        r24, 0.1
  LessFloat    r25, r24, r21
  Equal        r26, r14, r1
  Move         r27, r26
  JumpIfFalse  r27, L1
  Move         r27, r23
L1:
  Move         r28, r27
  JumpIfFalse  r28, L2
  Move         r28, r25
L2:
  JumpIfFalse  r28, L3
  // sort by [v.sum_sales - v.avg_monthly_sales, v.item]
  Index        r29, r13, r6
  Index        r30, r13, r5
  Sub          r31, r29, r30
  Move         r32, r31
  Index        r33, r13, r2
  Move         r34, r33
  MakeList     r35, 2, r32
  Move         r36, r35
  // from v in v2
  Move         r37, r13
  MakeList     r38, 2, r36
  Append       r39, r3, r38
  Move         r3, r39
L3:
  Const        r40, 1
  AddInt       r9, r9, r40
  Jump         L4
L0:
  // sort by [v.sum_sales - v.avg_monthly_sales, v.item]
  Sort         r41, r3
  // from v in v2
  Move         r3, r41
  // json(result)
  JSON         r3
  // expect result == [
  Const        r42, [{"avg_monthly_sales": 50, "d_year": 2019, "item": "C", "sum_sales": 60}, {"avg_monthly_sales": 100, "d_year": 2020, "item": "A", "sum_sales": 120}]
  Equal        r43, r3, r42
  Expect       r43
  Return       r0

  // fun abs(x: float): float {
func abs (regs=4)
  // if x >= 0.0 { x } else { -x }
  Const        r1, 0
  LessEqFloat  r2, r1, r0
  JumpIfFalse  r2, L0
  Jump         L1
L0:
  Neg          r3, r0
L1:
  Return       r0
