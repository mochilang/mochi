func main (regs=247)
  // let store_sales = [
  Const        r0, [{"ss_customer_sk": 1, "ss_item_sk": 1}, {"ss_customer_sk": 2, "ss_item_sk": 1}]
  // let catalog_sales = [
  Const        r1, [{"cs_bill_customer_sk": 1, "cs_item_sk": 1}, {"cs_bill_customer_sk": 3, "cs_item_sk": 2}]
  // let ssci = from ss in store_sales group by {customer_sk: ss.ss_customer_sk, item_sk: ss.ss_item_sk} into g select {customer_sk: g.key.customer_sk, item_sk: g.key.item_sk}
  Const        r2, []
  Const        r3, "customer_sk"
  Const        r4, "ss_customer_sk"
  Const        r5, "item_sk"
  Const        r6, "ss_item_sk"
  Const        r7, "key"
  IterPrep     r8, r0
  Len          r9, r8
  Const        r10, 0
  MakeMap      r11, 0, r0
  Const        r12, []
L2:
  LessInt      r14, r10, r9
  JumpIfFalse  r14, L0
  Index        r15, r8, r10
  Move         r16, r15
  Const        r17, "customer_sk"
  Index        r18, r16, r4
  Const        r19, "item_sk"
  Index        r20, r16, r6
  Move         r21, r17
  Move         r22, r18
  Move         r23, r19
  Move         r24, r20
  MakeMap      r25, 2, r21
  Str          r26, r25
  In           r27, r26, r11
  JumpIfTrue   r27, L1
  Const        r28, []
  Const        r29, "__group__"
  Const        r30, true
  Move         r31, r25
  Const        r32, "items"
  Move         r33, r28
  Const        r34, "count"
  Const        r35, 0
  Move         r36, r29
  Move         r37, r30
  Move         r38, r7
  Move         r39, r31
  Move         r40, r32
  Move         r41, r33
  Move         r42, r34
  Move         r43, r35
  MakeMap      r44, 4, r36
  SetIndex     r11, r26, r44
  Append       r12, r12, r44
L1:
  Index        r46, r11, r26
  Index        r47, r46, r32
  Append       r48, r47, r15
  SetIndex     r46, r32, r48
  Index        r49, r46, r34
  Const        r50, 1
  AddInt       r51, r49, r50
  SetIndex     r46, r34, r51
  AddInt       r10, r10, r50
  Jump         L2
L0:
  Move         r52, r35
  Len          r53, r12
L4:
  LessInt      r54, r52, r53
  JumpIfFalse  r54, L3
  Index        r56, r12, r52
  Const        r57, "customer_sk"
  Index        r58, r56, r7
  Index        r59, r58, r3
  Const        r60, "item_sk"
  Index        r61, r56, r7
  Index        r62, r61, r5
  Move         r63, r57
  Move         r64, r59
  Move         r65, r60
  Move         r66, r62
  MakeMap      r67, 2, r63
  Append       r2, r2, r67
  AddInt       r52, r52, r50
  Jump         L4
L3:
  // let csci = from cs in catalog_sales group by {customer_sk: cs.cs_bill_customer_sk, item_sk: cs.cs_item_sk} into g select {customer_sk: g.key.customer_sk, item_sk: g.key.item_sk}
  Const        r69, []
  Const        r70, "cs_bill_customer_sk"
  Const        r71, "cs_item_sk"
  IterPrep     r72, r1
  Len          r73, r72
  Const        r74, 0
  MakeMap      r75, 0, r0
  Const        r76, []
L7:
  LessInt      r78, r74, r73
  JumpIfFalse  r78, L5
  Index        r79, r72, r74
  Move         r80, r79
  Const        r81, "customer_sk"
  Index        r82, r80, r70
  Const        r83, "item_sk"
  Index        r84, r80, r71
  Move         r85, r81
  Move         r86, r82
  Move         r87, r83
  Move         r88, r84
  MakeMap      r89, 2, r85
  Str          r90, r89
  In           r91, r90, r75
  JumpIfTrue   r91, L6
  Move         r92, r89
  Move         r93, r28
  Move         r94, r29
  Move         r95, r30
  Move         r96, r7
  Move         r97, r92
  Move         r98, r32
  Move         r99, r93
  Move         r100, r34
  Move         r101, r35
  MakeMap      r102, 4, r94
  SetIndex     r75, r90, r102
  Append       r76, r76, r102
L6:
  Index        r104, r75, r90
  Index        r105, r104, r32
  Append       r106, r105, r79
  SetIndex     r104, r32, r106
  Index        r107, r104, r34
  AddInt       r108, r107, r50
  SetIndex     r104, r34, r108
  AddInt       r74, r74, r50
  Jump         L7
L5:
  Move         r109, r35
  Len          r110, r76
L9:
  LessInt      r111, r109, r110
  JumpIfFalse  r111, L8
  Index        r56, r76, r109
  Const        r113, "customer_sk"
  Index        r114, r56, r7
  Index        r115, r114, r3
  Const        r116, "item_sk"
  Index        r117, r56, r7
  Index        r118, r117, r5
  Move         r119, r113
  Move         r120, r115
  Move         r121, r116
  Move         r122, r118
  MakeMap      r123, 2, r119
  Append       r69, r69, r123
  AddInt       r109, r109, r50
  Jump         L9
L8:
  // from s in ssci outer join c in csci on s.customer_sk == c.customer_sk && s.item_sk == c.item_sk
  Const        r125, []
  IterPrep     r126, r2
  Len          r127, r126
  IterPrep     r128, r69
  Len          r129, r128
  Const        r132, 0
L22:
  LessInt      r133, r132, r129
  JumpIfFalse  r133, L10
  Index        r130, r128, r132
  Const        r135, false
  Const        r136, 0
L17:
  LessInt      r137, r136, r127
  JumpIfFalse  r137, L11
  Index        r131, r126, r136
  Index        r139, r131, r3
  Index        r140, r130, r3
  Equal        r141, r139, r140
  Index        r142, r131, r5
  Index        r143, r130, r5
  Equal        r144, r142, r143
  JumpIfFalse  r141, L12
  Move         r141, r144
L12:
  JumpIfFalse  r141, L13
  Const        r135, true
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Const        r145, "store_only"
  Index        r146, r131, r3
  Const        r147, nil
  NotEqual     r148, r146, r147
  Index        r149, r130, r3
  Equal        r150, r149, r147
  JumpIfFalse  r148, L14
L14:
  Select       151,150,50,35
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Const        r152, "catalog_only"
  Index        r153, r131, r3
  Equal        r154, r153, r147
  Index        r155, r130, r3
  NotEqual     r156, r155, r147
  JumpIfFalse  r154, L15
L15:
  Select       157,156,50,35
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Const        r158, "both"
  Index        r159, r131, r3
  NotEqual     r160, r159, r147
  Index        r161, r130, r3
  NotEqual     r162, r161, r147
  JumpIfFalse  r160, L16
L16:
  Select       163,162,50,35
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Move         r164, r145
  Move         r165, r151
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Move         r166, r152
  Move         r167, r157
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Move         r168, r158
  Move         r169, r163
  // select {
  MakeMap      r170, 3, r164
  // from s in ssci outer join c in csci on s.customer_sk == c.customer_sk && s.item_sk == c.item_sk
  Append       r125, r125, r170
L13:
  AddInt       r136, r136, r50
  Jump         L17
L11:
  Move         r172, r135
  JumpIfTrue   r172, L18
  Move         r131, r147
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Const        r173, "store_only"
  Index        r174, r131, r3
  NotEqual     r175, r174, r147
  Index        r176, r130, r3
  Equal        r177, r176, r147
  JumpIfFalse  r175, L19
L19:
  Select       178,177,50,35
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Const        r179, "catalog_only"
  Index        r180, r131, r3
  Equal        r181, r180, r147
  Index        r182, r130, r3
  NotEqual     r183, r182, r147
  JumpIfFalse  r181, L20
L20:
  Select       184,183,50,35
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Const        r185, "both"
  Index        r186, r131, r3
  NotEqual     r187, r186, r147
  Index        r188, r130, r3
  NotEqual     r189, r188, r147
  JumpIfFalse  r187, L21
L21:
  Select       190,189,50,35
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Move         r191, r173
  Move         r192, r178
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Move         r193, r179
  Move         r194, r184
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Move         r195, r185
  Move         r196, r190
  // select {
  MakeMap      r197, 3, r191
  // from s in ssci outer join c in csci on s.customer_sk == c.customer_sk && s.item_sk == c.item_sk
  Append       r125, r125, r197
L18:
  AddInt       r132, r132, r50
  Jump         L22
L10:
  // store_only: sum(from x in joined select x.store_only),
  Const        r199, "store_only"
  Const        r200, []
  Const        r201, "store_only"
  IterPrep     r202, r125
  Len          r203, r202
  Move         r204, r35
L24:
  LessInt      r205, r204, r203
  JumpIfFalse  r205, L23
  Index        r207, r202, r204
  Index        r208, r207, r201
  Append       r200, r200, r208
  AddInt       r204, r204, r50
  Jump         L24
L23:
  Sum          r210, r200
  // catalog_only: sum(from x in joined select x.catalog_only),
  Const        r211, "catalog_only"
  Const        r212, []
  Const        r213, "catalog_only"
  IterPrep     r214, r125
  Len          r215, r214
  Move         r216, r35
L26:
  LessInt      r217, r216, r215
  JumpIfFalse  r217, L25
  Index        r207, r214, r216
  Index        r219, r207, r213
  Append       r212, r212, r219
  AddInt       r216, r216, r50
  Jump         L26
L25:
  Sum          r221, r212
  // store_and_catalog: sum(from x in joined select x.both)
  Const        r222, "store_and_catalog"
  Const        r223, []
  Const        r224, "both"
  IterPrep     r225, r125
  Len          r226, r225
  Move         r227, r35
L28:
  LessInt      r228, r227, r226
  JumpIfFalse  r228, L27
  Index        r207, r225, r227
  Index        r230, r207, r224
  Append       r223, r223, r230
  AddInt       r227, r227, r50
  Jump         L28
L27:
  Sum          r232, r223
  // store_only: sum(from x in joined select x.store_only),
  Move         r233, r199
  Move         r234, r210
  // catalog_only: sum(from x in joined select x.catalog_only),
  Move         r235, r211
  Move         r236, r221
  // store_and_catalog: sum(from x in joined select x.both)
  Move         r237, r222
  Move         r238, r232
  // let result = {
  MakeMap      r239, 3, r233
  // json(result)
  JSON         r239
  // expect result.store_only == 1 &&
  Index        r240, r239, r201
  Equal        r241, r240, r50
  // result.catalog_only == 1 &&
  Index        r242, r239, r213
  Equal        r243, r242, r50
  // result.store_and_catalog == 1
  Const        r244, "store_and_catalog"
  Index        r245, r239, r244
  Equal        r246, r245, r50
  // expect result.store_only == 1 &&
  JumpIfFalse  r241, L29
  Move         r241, r243
  // result.catalog_only == 1 &&
  JumpIfFalse  r241, L29
  Move         r241, r246
L29:
  // expect result.store_only == 1 &&
  Expect       r241
  Return       r0
