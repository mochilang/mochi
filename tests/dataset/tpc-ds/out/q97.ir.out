func main (regs=253)
  // let store_sales = [
  Const        r0, [{"ss_customer_sk": 1, "ss_item_sk": 1}, {"ss_customer_sk": 2, "ss_item_sk": 1}]
  // let catalog_sales = [
  Const        r1, [{"cs_bill_customer_sk": 1, "cs_item_sk": 1}, {"cs_bill_customer_sk": 3, "cs_item_sk": 2}]
  // let ssci = from ss in store_sales group by {customer_sk: ss.ss_customer_sk, item_sk: ss.ss_item_sk} into g select {customer_sk: g.key.customer_sk, item_sk: g.key.item_sk}
  Const        r2, []
  Const        r3, "customer_sk"
  Const        r4, "ss_customer_sk"
  Const        r5, "item_sk"
  Const        r6, "ss_item_sk"
  Const        r7, "key"
  IterPrep     r8, r0
  Len          r9, r8
  Const        r10, 0
  MakeMap      r11, 0, r0
  Const        r13, []
  Move         r12, r13
L2:
  LessInt      r14, r10, r9
  JumpIfFalse  r14, L0
  Index        r15, r8, r10
  Move         r16, r15
  Const        r17, "customer_sk"
  Index        r18, r16, r4
  Const        r19, "item_sk"
  Index        r20, r16, r6
  Move         r21, r17
  Move         r22, r18
  Move         r23, r19
  Move         r24, r20
  MakeMap      r25, 2, r21
  Str          r26, r25
  In           r27, r26, r11
  JumpIfTrue   r27, L1
  Const        r28, "__group__"
  Const        r29, true
  Move         r30, r25
  Const        r31, "items"
  Move         r32, r13
  Const        r33, "count"
  Const        r34, 0
  Move         r35, r28
  Move         r36, r29
  Move         r37, r7
  Move         r38, r30
  Move         r39, r31
  Move         r40, r32
  Move         r41, r33
  Move         r42, r34
  MakeMap      r43, 4, r35
  SetIndex     r11, r26, r43
  Append       r44, r12, r43
  Move         r12, r44
L1:
  Index        r45, r11, r26
  Index        r46, r45, r31
  Append       r47, r46, r15
  SetIndex     r45, r31, r47
  Index        r48, r45, r33
  Const        r49, 1
  AddInt       r50, r48, r49
  SetIndex     r45, r33, r50
  AddInt       r10, r10, r49
  Jump         L2
L0:
  Move         r51, r34
  Len          r52, r12
L4:
  LessInt      r53, r51, r52
  JumpIfFalse  r53, L3
  Index        r54, r12, r51
  Move         r55, r54
  Const        r56, "customer_sk"
  Index        r57, r55, r7
  Index        r58, r57, r3
  Const        r59, "item_sk"
  Index        r60, r55, r7
  Index        r61, r60, r5
  Move         r62, r56
  Move         r63, r58
  Move         r64, r59
  Move         r65, r61
  MakeMap      r66, 2, r62
  Append       r67, r2, r66
  Move         r2, r67
  AddInt       r51, r51, r49
  Jump         L4
L3:
  // let csci = from cs in catalog_sales group by {customer_sk: cs.cs_bill_customer_sk, item_sk: cs.cs_item_sk} into g select {customer_sk: g.key.customer_sk, item_sk: g.key.item_sk}
  Const        r68, []
  Const        r69, "cs_bill_customer_sk"
  Const        r70, "cs_item_sk"
  IterPrep     r71, r1
  Len          r72, r71
  Const        r73, 0
  MakeMap      r74, 0, r0
  Move         r75, r13
L7:
  LessInt      r76, r73, r72
  JumpIfFalse  r76, L5
  Index        r77, r71, r73
  Move         r78, r77
  Const        r79, "customer_sk"
  Index        r80, r78, r69
  Const        r81, "item_sk"
  Index        r82, r78, r70
  Move         r83, r79
  Move         r84, r80
  Move         r85, r81
  Move         r86, r82
  MakeMap      r87, 2, r83
  Str          r88, r87
  In           r89, r88, r74
  JumpIfTrue   r89, L6
  Move         r90, r87
  Move         r91, r13
  Move         r92, r28
  Move         r93, r29
  Move         r94, r7
  Move         r95, r90
  Move         r96, r31
  Move         r97, r91
  Move         r98, r33
  Move         r99, r34
  MakeMap      r100, 4, r92
  SetIndex     r74, r88, r100
  Append       r101, r75, r100
  Move         r75, r101
L6:
  Index        r102, r74, r88
  Index        r103, r102, r31
  Append       r104, r103, r77
  SetIndex     r102, r31, r104
  Index        r105, r102, r33
  AddInt       r106, r105, r49
  SetIndex     r102, r33, r106
  AddInt       r73, r73, r49
  Jump         L7
L5:
  Move         r107, r34
  Len          r108, r75
L9:
  LessInt      r109, r107, r108
  JumpIfFalse  r109, L8
  Index        r110, r75, r107
  Move         r55, r110
  Const        r111, "customer_sk"
  Index        r112, r55, r7
  Index        r113, r112, r3
  Const        r114, "item_sk"
  Index        r115, r55, r7
  Index        r116, r115, r5
  Move         r117, r111
  Move         r118, r113
  Move         r119, r114
  Move         r120, r116
  MakeMap      r121, 2, r117
  Append       r122, r68, r121
  Move         r68, r122
  AddInt       r107, r107, r49
  Jump         L9
L8:
  // from s in ssci outer join c in csci on s.customer_sk == c.customer_sk && s.item_sk == c.item_sk
  Const        r123, []
  IterPrep     r124, r2
  Len          r125, r124
  IterPrep     r126, r68
  Len          r127, r126
  Const        r130, 0
L22:
  LessInt      r131, r130, r127
  JumpIfFalse  r131, L10
  Index        r132, r126, r130
  Move         r128, r132
  Const        r133, false
  Const        r134, 0
L17:
  LessInt      r135, r134, r125
  JumpIfFalse  r135, L11
  Index        r136, r124, r134
  Move         r129, r136
  Index        r137, r129, r3
  Index        r138, r128, r3
  Equal        r139, r137, r138
  Index        r140, r129, r5
  Index        r141, r128, r5
  Equal        r142, r140, r141
  Move         r143, r139
  JumpIfFalse  r143, L12
  Move         r143, r142
L12:
  JumpIfFalse  r143, L13
  Const        r133, true
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Const        r144, "store_only"
  Index        r145, r129, r3
  Const        r146, nil
  NotEqual     r147, r145, r146
  Index        r148, r128, r3
  Equal        r149, r148, r146
  Move         r150, r147
  JumpIfFalse  r150, L14
  Move         r150, r149
L14:
  Select       151,150,49,34
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Const        r152, "catalog_only"
  Index        r153, r129, r3
  Equal        r154, r153, r146
  Index        r155, r128, r3
  NotEqual     r156, r155, r146
  Move         r157, r154
  JumpIfFalse  r157, L15
  Move         r157, r156
L15:
  Select       158,157,49,34
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Const        r159, "both"
  Index        r160, r129, r3
  NotEqual     r161, r160, r146
  Index        r162, r128, r3
  NotEqual     r163, r162, r146
  Move         r164, r161
  JumpIfFalse  r164, L16
  Move         r164, r163
L16:
  Select       165,164,49,34
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Move         r166, r144
  Move         r167, r151
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Move         r168, r152
  Move         r169, r158
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Move         r170, r159
  Move         r171, r165
  // select {
  MakeMap      r172, 3, r166
  // from s in ssci outer join c in csci on s.customer_sk == c.customer_sk && s.item_sk == c.item_sk
  Append       r173, r123, r172
  Move         r123, r173
L13:
  AddInt       r134, r134, r49
  Jump         L17
L11:
  Move         r174, r133
  JumpIfTrue   r174, L18
  Move         r129, r146
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Const        r175, "store_only"
  Index        r176, r129, r3
  NotEqual     r177, r176, r146
  Index        r178, r128, r3
  Equal        r179, r178, r146
  Move         r180, r177
  JumpIfFalse  r180, L19
  Move         r180, r179
L19:
  Select       181,180,49,34
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Const        r182, "catalog_only"
  Index        r183, r129, r3
  Equal        r184, r183, r146
  Index        r185, r128, r3
  NotEqual     r186, r185, r146
  Move         r187, r184
  JumpIfFalse  r187, L20
  Move         r187, r186
L20:
  Select       188,187,49,34
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Const        r189, "both"
  Index        r190, r129, r3
  NotEqual     r191, r190, r146
  Index        r192, r128, r3
  NotEqual     r193, r192, r146
  Move         r194, r191
  JumpIfFalse  r194, L21
  Move         r194, r193
L21:
  Select       195,194,49,34
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Move         r196, r175
  Move         r197, r181
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Move         r198, r182
  Move         r199, r188
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Move         r200, r189
  Move         r201, r195
  // select {
  MakeMap      r202, 3, r196
  // from s in ssci outer join c in csci on s.customer_sk == c.customer_sk && s.item_sk == c.item_sk
  Append       r203, r123, r202
  Move         r123, r203
L18:
  AddInt       r130, r130, r49
  Jump         L22
L10:
  // store_only: sum(from x in joined select x.store_only),
  Const        r204, "store_only"
  Const        r205, []
  Const        r206, "store_only"
  IterPrep     r207, r123
  Len          r208, r207
  Move         r209, r34
L24:
  LessInt      r210, r209, r208
  JumpIfFalse  r210, L23
  Index        r211, r207, r209
  Move         r212, r211
  Index        r213, r212, r206
  Append       r214, r205, r213
  Move         r205, r214
  AddInt       r209, r209, r49
  Jump         L24
L23:
  Sum          r215, r205
  // catalog_only: sum(from x in joined select x.catalog_only),
  Const        r216, "catalog_only"
  Const        r217, []
  Const        r218, "catalog_only"
  IterPrep     r219, r123
  Len          r220, r219
  Move         r221, r34
L26:
  LessInt      r222, r221, r220
  JumpIfFalse  r222, L25
  Index        r223, r219, r221
  Move         r212, r223
  Index        r224, r212, r218
  Append       r225, r217, r224
  Move         r217, r225
  AddInt       r221, r221, r49
  Jump         L26
L25:
  Sum          r226, r217
  // store_and_catalog: sum(from x in joined select x.both)
  Const        r227, "store_and_catalog"
  Const        r228, []
  Const        r229, "both"
  IterPrep     r230, r123
  Len          r231, r230
  Move         r232, r34
L28:
  LessInt      r233, r232, r231
  JumpIfFalse  r233, L27
  Index        r234, r230, r232
  Move         r212, r234
  Index        r235, r212, r229
  Append       r236, r228, r235
  Move         r228, r236
  AddInt       r232, r232, r49
  Jump         L28
L27:
  Sum          r237, r228
  // store_only: sum(from x in joined select x.store_only),
  Move         r238, r204
  Move         r239, r215
  // catalog_only: sum(from x in joined select x.catalog_only),
  Move         r240, r216
  Move         r241, r226
  // store_and_catalog: sum(from x in joined select x.both)
  Move         r242, r227
  Move         r243, r237
  // let result = {
  MakeMap      r244, 3, r238
  // json(result)
  JSON         r244
  // expect result.store_only == 1 &&
  Index        r245, r244, r206
  Equal        r246, r245, r49
  // result.catalog_only == 1 &&
  Index        r247, r244, r218
  Equal        r248, r247, r49
  // result.store_and_catalog == 1
  Const        r249, "store_and_catalog"
  Index        r250, r244, r249
  Equal        r251, r250, r49
  // expect result.store_only == 1 &&
  Move         r252, r246
  JumpIfFalse  r252, L29
  Move         r252, r248
  // result.catalog_only == 1 &&
  JumpIfFalse  r252, L29
  Move         r252, r251
L29:
  // expect result.store_only == 1 &&
  Expect       r252
  Return       r0
