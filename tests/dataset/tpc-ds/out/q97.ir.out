func main (regs=213)
  // let store_sales = [
  Const        r0, [{"ss_customer_sk": 1, "ss_item_sk": 1}, {"ss_customer_sk": 2, "ss_item_sk": 1}]
  // let catalog_sales = [
  Const        r1, [{"cs_bill_customer_sk": 1, "cs_item_sk": 1}, {"cs_bill_customer_sk": 3, "cs_item_sk": 2}]
  // let ssci = from ss in store_sales group by {customer_sk: ss.ss_customer_sk, item_sk: ss.ss_item_sk} into g select {customer_sk: g.key.customer_sk, item_sk: g.key.item_sk}
  Const        r2, []
  Const        r3, "customer_sk"
  Const        r4, "ss_customer_sk"
  Const        r5, "item_sk"
  Const        r6, "ss_item_sk"
  Const        r3, "customer_sk"
  Const        r7, "key"
  Const        r3, "customer_sk"
  Const        r5, "item_sk"
  Const        r7, "key"
  Const        r5, "item_sk"
  IterPrep     r8, r0
  Len          r9, r8
  Const        r10, 0
  MakeMap      r11, 0, r0
  Const        r13, []
  Move         r12, r13
L2:
  LessInt      r14, r10, r9
  JumpIfFalse  r14, L0
  Index        r15, r8, r10
  Move         r16, r15
  Const        r17, "customer_sk"
  Const        r4, "ss_customer_sk"
  Index        r18, r16, r4
  Const        r19, "item_sk"
  Const        r6, "ss_item_sk"
  Index        r20, r16, r6
  Move         r21, r17
  Move         r22, r18
  Move         r23, r19
  Move         r24, r20
  MakeMap      r25, 2, r21
  Str          r26, r25
  In           r27, r26, r11
  JumpIfTrue   r27, L1
  Const        r13, []
  Const        r28, "__group__"
  Const        r29, true
  Const        r7, "key"
  Move         r30, r25
  Const        r31, "items"
  Move         r32, r13
  Const        r33, "count"
  Const        r34, 0
  Move         r35, r28
  Move         r36, r29
  Move         r37, r7
  Move         r38, r30
  Move         r39, r31
  Move         r40, r32
  Move         r41, r33
  Move         r42, r34
  MakeMap      r43, 4, r35
  SetIndex     r11, r26, r43
  Append       r44, r12, r43
  Move         r12, r44
L1:
  Const        r31, "items"
  Index        r45, r11, r26
  Index        r46, r45, r31
  Append       r47, r46, r15
  SetIndex     r45, r31, r47
  Const        r33, "count"
  Index        r48, r45, r33
  Const        r49, 1
  AddInt       r50, r48, r49
  SetIndex     r45, r33, r50
  Const        r49, 1
  AddInt       r10, r10, r49
  Jump         L2
L0:
  Const        r34, 0
  Move         r51, r34
  Len          r52, r12
L4:
  LessInt      r53, r51, r52
  JumpIfFalse  r53, L3
  Index        r54, r12, r51
  Move         r55, r54
  Const        r56, "customer_sk"
  Const        r7, "key"
  Index        r57, r55, r7
  Const        r3, "customer_sk"
  Index        r58, r57, r3
  Const        r59, "item_sk"
  Const        r7, "key"
  Index        r60, r55, r7
  Const        r5, "item_sk"
  Index        r61, r60, r5
  Move         r62, r56
  Move         r63, r58
  Move         r64, r59
  Move         r65, r61
  MakeMap      r66, 2, r62
  Append       r67, r2, r66
  Move         r2, r67
  Const        r49, 1
  AddInt       r51, r51, r49
  Jump         L4
L3:
  // let csci = from cs in catalog_sales group by {customer_sk: cs.cs_bill_customer_sk, item_sk: cs.cs_item_sk} into g select {customer_sk: g.key.customer_sk, item_sk: g.key.item_sk}
  Const        r68, []
  Const        r3, "customer_sk"
  Const        r69, "cs_bill_customer_sk"
  Const        r5, "item_sk"
  Const        r70, "cs_item_sk"
  Const        r3, "customer_sk"
  Const        r7, "key"
  Const        r3, "customer_sk"
  Const        r5, "item_sk"
  Const        r7, "key"
  Const        r5, "item_sk"
  IterPrep     r71, r1
  Len          r72, r71
  Const        r73, 0
  MakeMap      r74, 0, r0
  Const        r13, []
  Move         r75, r13
L7:
  LessInt      r76, r73, r72
  JumpIfFalse  r76, L5
  Index        r77, r71, r73
  Move         r78, r77
  Const        r79, "customer_sk"
  Const        r69, "cs_bill_customer_sk"
  Index        r80, r78, r69
  Const        r81, "item_sk"
  Const        r70, "cs_item_sk"
  Index        r82, r78, r70
  Move         r83, r79
  Move         r84, r80
  Move         r85, r81
  Move         r86, r82
  MakeMap      r87, 2, r83
  Str          r88, r87
  In           r89, r88, r74
  JumpIfTrue   r89, L6
  Const        r13, []
  Const        r28, "__group__"
  Const        r29, true
  Const        r7, "key"
  Move         r90, r87
  Const        r31, "items"
  Move         r91, r13
  Const        r33, "count"
  Const        r34, 0
  Move         r92, r28
  Move         r93, r29
  Move         r94, r7
  Move         r95, r90
  Move         r96, r31
  Move         r97, r91
  Move         r98, r33
  Move         r99, r34
  MakeMap      r100, 4, r92
  SetIndex     r74, r88, r100
  Append       r101, r75, r100
  Move         r75, r101
L6:
  Const        r31, "items"
  Index        r102, r74, r88
  Index        r103, r102, r31
  Append       r104, r103, r77
  SetIndex     r102, r31, r104
  Const        r33, "count"
  Index        r105, r102, r33
  Const        r49, 1
  AddInt       r106, r105, r49
  SetIndex     r102, r33, r106
  Const        r49, 1
  AddInt       r73, r73, r49
  Jump         L7
L5:
  Const        r34, 0
  Move         r107, r34
  Len          r108, r75
L9:
  LessInt      r109, r107, r108
  JumpIfFalse  r109, L8
  Index        r110, r75, r107
  Move         r55, r110
  Const        r111, "customer_sk"
  Const        r7, "key"
  Index        r112, r55, r7
  Const        r3, "customer_sk"
  Index        r113, r112, r3
  Const        r114, "item_sk"
  Const        r7, "key"
  Index        r115, r55, r7
  Const        r5, "item_sk"
  Index        r116, r115, r5
  Move         r117, r111
  Move         r118, r113
  Move         r119, r114
  Move         r120, r116
  MakeMap      r121, 2, r117
  Append       r122, r68, r121
  Move         r68, r122
  Const        r49, 1
  AddInt       r107, r107, r49
  Jump         L9
L8:
  // let both = count(from s in ssci join c in csci on s.customer_sk == c.customer_sk && s.item_sk == c.item_sk select 1)
  Const        r123, []
  IterPrep     r124, r2
  Len          r125, r124
  IterPrep     r126, r68
  Len          r127, r126
  Const        r3, "customer_sk"
  Const        r3, "customer_sk"
  Const        r5, "item_sk"
  Const        r5, "item_sk"
  Const        r128, 0
L15:
  LessInt      r129, r128, r125
  JumpIfFalse  r129, L10
  Index        r130, r124, r128
  Move         r131, r130
  Const        r132, 0
L14:
  LessInt      r133, r132, r127
  JumpIfFalse  r133, L11
  Index        r134, r126, r132
  Move         r135, r134
  Const        r3, "customer_sk"
  Index        r136, r131, r3
  Const        r3, "customer_sk"
  Index        r137, r135, r3
  Equal        r138, r136, r137
  Const        r5, "item_sk"
  Index        r139, r131, r5
  Const        r5, "item_sk"
  Index        r140, r135, r5
  Equal        r141, r139, r140
  Move         r142, r138
  JumpIfFalse  r142, L12
  Move         r142, r141
L12:
  JumpIfFalse  r142, L13
  Const        r49, 1
  Append       r143, r123, r49
  Move         r123, r143
L13:
  Const        r49, 1
  AddInt       r132, r132, r49
  Jump         L14
L11:
  Const        r49, 1
  AddInt       r128, r128, r49
  Jump         L15
L10:
  Count        r144, r123
  // let store_only = count(from s in ssci where !(exists(from c in csci where s.customer_sk == c.customer_sk && s.item_sk == c.item_sk select c)) select 1)
  Const        r145, []
  Const        r3, "customer_sk"
  Const        r3, "customer_sk"
  Const        r5, "item_sk"
  Const        r5, "item_sk"
  IterPrep     r146, r2
  Len          r147, r146
  Const        r34, 0
  Move         r148, r34
L22:
  LessInt      r149, r148, r147
  JumpIfFalse  r149, L16
  Index        r150, r146, r148
  Move         r131, r150
  Const        r151, []
  Const        r3, "customer_sk"
  Const        r3, "customer_sk"
  Const        r5, "item_sk"
  Const        r5, "item_sk"
  IterPrep     r152, r68
  Len          r153, r152
  Const        r34, 0
  Move         r154, r34
L20:
  LessInt      r155, r154, r153
  JumpIfFalse  r155, L17
  Index        r156, r152, r154
  Move         r135, r156
  Const        r3, "customer_sk"
  Index        r157, r131, r3
  Const        r3, "customer_sk"
  Index        r158, r135, r3
  Equal        r159, r157, r158
  Const        r5, "item_sk"
  Index        r160, r131, r5
  Const        r5, "item_sk"
  Index        r161, r135, r5
  Equal        r162, r160, r161
  Move         r163, r159
  JumpIfFalse  r163, L18
  Move         r163, r162
L18:
  JumpIfFalse  r163, L19
  Append       r164, r151, r135
  Move         r151, r164
L19:
  Const        r49, 1
  AddInt       r154, r154, r49
  Jump         L20
L17:
  Exists       r165, r151
  Not          r166, r165
  JumpIfFalse  r166, L21
  Const        r49, 1
  Append       r167, r145, r49
  Move         r145, r167
L21:
  Const        r49, 1
  AddInt       r148, r148, r49
  Jump         L22
L16:
  Count        r168, r145
  // let catalog_only = count(from c in csci where !(exists(from s in ssci where s.customer_sk == c.customer_sk && s.item_sk == c.item_sk select s)) select 1)
  Const        r169, []
  Const        r3, "customer_sk"
  Const        r3, "customer_sk"
  Const        r5, "item_sk"
  Const        r5, "item_sk"
  IterPrep     r170, r68
  Len          r171, r170
  Const        r34, 0
  Move         r172, r34
L29:
  LessInt      r173, r172, r171
  JumpIfFalse  r173, L23
  Index        r174, r170, r172
  Move         r135, r174
  Const        r175, []
  Const        r3, "customer_sk"
  Const        r3, "customer_sk"
  Const        r5, "item_sk"
  Const        r5, "item_sk"
  IterPrep     r176, r2
  Len          r177, r176
  Const        r34, 0
  Move         r178, r34
L27:
  LessInt      r179, r178, r177
  JumpIfFalse  r179, L24
  Index        r180, r176, r178
  Move         r131, r180
  Const        r3, "customer_sk"
  Index        r181, r131, r3
  Const        r3, "customer_sk"
  Index        r182, r135, r3
  Equal        r183, r181, r182
  Const        r5, "item_sk"
  Index        r184, r131, r5
  Const        r5, "item_sk"
  Index        r185, r135, r5
  Equal        r186, r184, r185
  Move         r187, r183
  JumpIfFalse  r187, L25
  Move         r187, r186
L25:
  JumpIfFalse  r187, L26
  Append       r188, r175, r131
  Move         r175, r188
L26:
  Const        r49, 1
  AddInt       r178, r178, r49
  Jump         L27
L24:
  Exists       r189, r175
  Not          r190, r189
  JumpIfFalse  r190, L28
  Const        r49, 1
  Append       r191, r169, r49
  Move         r169, r191
L28:
  Const        r49, 1
  AddInt       r172, r172, r49
  Jump         L29
L23:
  Count        r192, r169
  // store_only: store_only,
  Const        r193, "store_only"
  // catalog_only: catalog_only,
  Const        r194, "catalog_only"
  // store_and_catalog: both
  Const        r195, "store_and_catalog"
  // store_only: store_only,
  Move         r196, r193
  Move         r197, r168
  // catalog_only: catalog_only,
  Move         r198, r194
  Move         r199, r192
  // store_and_catalog: both
  Move         r200, r195
  Move         r201, r144
  // let result = {
  MakeMap      r202, 3, r196
  // json(result)
  JSON         r202
  // expect result.store_only == 1 &&
  Const        r203, "store_only"
  Index        r204, r202, r203
  Const        r49, 1
  Equal        r205, r204, r49
  // result.catalog_only == 1 &&
  Const        r206, "catalog_only"
  Index        r207, r202, r206
  Const        r49, 1
  Equal        r208, r207, r49
  // result.store_and_catalog == 1
  Const        r209, "store_and_catalog"
  Index        r210, r202, r209
  Const        r49, 1
  Equal        r211, r210, r49
  // expect result.store_only == 1 &&
  Move         r212, r205
  JumpIfFalse  r212, L30
  Move         r212, r208
  // result.catalog_only == 1 &&
  JumpIfFalse  r212, L30
  Move         r212, r211
L30:
  // expect result.store_only == 1 &&
  Expect       r212
  Return       r0
