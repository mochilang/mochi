func main (regs=310)
  // let store_sales = [
  Const        r0, [{"ss_customer_sk": 1, "ss_item_sk": 1}, {"ss_customer_sk": 2, "ss_item_sk": 1}]
  // let catalog_sales = [
  Const        r1, [{"cs_bill_customer_sk": 1, "cs_item_sk": 1}, {"cs_bill_customer_sk": 3, "cs_item_sk": 2}]
  // let ssci = from ss in store_sales group by {customer_sk: ss.ss_customer_sk, item_sk: ss.ss_item_sk} into g select {customer_sk: g.key.customer_sk, item_sk: g.key.item_sk}
  Const        r2, []
  Const        r3, "customer_sk"
  Const        r4, "ss_customer_sk"
  Const        r5, "item_sk"
  Const        r6, "ss_item_sk"
  Const        r7, "key"
  IterPrep     r8, r0
  Len          r9, r8
  Const        r10, 0
  MakeMap      r11, 0, r0
  Const        r13, []
  Move         r12, r13
L2:
  LessInt      r14, r10, r9
  JumpIfFalse  r14, L0
  Index        r15, r8, r10
  Move         r16, r15
  Const        r17, "customer_sk"
  Index        r18, r16, r4
  Const        r19, "item_sk"
  Index        r20, r16, r6
  Move         r21, r17
  Move         r22, r18
  Move         r23, r19
  Move         r24, r20
  MakeMap      r25, 2, r21
  Str          r26, r25
  In           r27, r26, r11
  JumpIfTrue   r27, L1
  Const        r28, "__group__"
  Const        r29, true
  Move         r30, r25
  Const        r31, "items"
  Move         r32, r13
  Const        r33, "count"
  Const        r34, 0
  Move         r35, r28
  Move         r36, r29
  Move         r37, r7
  Move         r38, r30
  Move         r39, r31
  Move         r40, r32
  Move         r41, r33
  Move         r42, r34
  MakeMap      r43, 4, r35
  SetIndex     r11, r26, r43
  Append       r44, r12, r43
  Move         r12, r44
L1:
  Index        r45, r11, r26
  Index        r46, r45, r31
  Append       r47, r46, r15
  SetIndex     r45, r31, r47
  Index        r48, r45, r33
  Const        r49, 1
  AddInt       r50, r48, r49
  SetIndex     r45, r33, r50
  AddInt       r10, r10, r49
  Jump         L2
L0:
  Move         r51, r34
  Len          r52, r12
L4:
  LessInt      r53, r51, r52
  JumpIfFalse  r53, L3
  Index        r54, r12, r51
  Move         r55, r54
  Const        r56, "customer_sk"
  Index        r57, r55, r7
  Index        r58, r57, r3
  Const        r59, "item_sk"
  Index        r60, r55, r7
  Index        r61, r60, r5
  Move         r62, r56
  Move         r63, r58
  Move         r64, r59
  Move         r65, r61
  MakeMap      r66, 2, r62
  Append       r67, r2, r66
  Move         r2, r67
  AddInt       r51, r51, r49
  Jump         L4
L3:
  // let csci = from cs in catalog_sales group by {customer_sk: cs.cs_bill_customer_sk, item_sk: cs.cs_item_sk} into g select {customer_sk: g.key.customer_sk, item_sk: g.key.item_sk}
  Const        r68, []
  Const        r69, "cs_bill_customer_sk"
  Const        r70, "cs_item_sk"
  IterPrep     r71, r1
  Len          r72, r71
  Const        r73, 0
  MakeMap      r74, 0, r0
  Move         r75, r13
L7:
  LessInt      r76, r73, r72
  JumpIfFalse  r76, L5
  Index        r77, r71, r73
  Move         r78, r77
  Const        r79, "customer_sk"
  Index        r80, r78, r69
  Const        r81, "item_sk"
  Index        r82, r78, r70
  Move         r83, r79
  Move         r84, r80
  Move         r85, r81
  Move         r86, r82
  MakeMap      r87, 2, r83
  Str          r88, r87
  In           r89, r88, r74
  JumpIfTrue   r89, L6
  Move         r90, r87
  Move         r91, r13
  Move         r92, r28
  Move         r93, r29
  Move         r94, r7
  Move         r95, r90
  Move         r96, r31
  Move         r97, r91
  Move         r98, r33
  Move         r99, r34
  MakeMap      r100, 4, r92
  SetIndex     r74, r88, r100
  Append       r101, r75, r100
  Move         r75, r101
L6:
  Index        r102, r74, r88
  Index        r103, r102, r31
  Append       r104, r103, r77
  SetIndex     r102, r31, r104
  Index        r105, r102, r33
  AddInt       r106, r105, r49
  SetIndex     r102, r33, r106
  AddInt       r73, r73, r49
  Jump         L7
L5:
  Move         r107, r34
  Len          r108, r75
L9:
  LessInt      r109, r107, r108
  JumpIfFalse  r109, L8
  Index        r110, r75, r107
  Move         r55, r110
  Const        r111, "customer_sk"
  Index        r112, r55, r7
  Index        r113, r112, r3
  Const        r114, "item_sk"
  Index        r115, r55, r7
  Index        r116, r115, r5
  Move         r117, r111
  Move         r118, r113
  Move         r119, r114
  Move         r120, r116
  MakeMap      r121, 2, r117
  Append       r122, r68, r121
  Move         r68, r122
  AddInt       r107, r107, r49
  Jump         L9
L8:
  // from s in ssci outer join c in csci on s.customer_sk == c.customer_sk && s.item_sk == c.item_sk
  Const        r123, []
  IterPrep     r124, r2
  Len          r125, r124
  IterPrep     r126, r68
  Len          r127, r126
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Const        r128, "store_only"
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Const        r129, "catalog_only"
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Const        r130, "both"
  // from s in ssci outer join c in csci on s.customer_sk == c.customer_sk && s.item_sk == c.item_sk
  Const        r131, 0
L18:
  LessInt      r132, r131, r125
  JumpIfFalse  r132, L10
  Index        r133, r124, r131
  Move         r134, r133
  Const        r135, 0
L17:
  LessInt      r136, r135, r127
  JumpIfFalse  r136, L11
  Index        r137, r126, r135
  Move         r138, r137
  Index        r139, r134, r3
  Index        r140, r138, r3
  Equal        r141, r139, r140
  Index        r142, r134, r5
  Index        r143, r138, r5
  Equal        r144, r142, r143
  Move         r145, r141
  JumpIfFalse  r145, L12
  Move         r145, r144
L12:
  JumpIfFalse  r145, L13
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Const        r146, "store_only"
  Index        r147, r134, r3
  Const        r148, nil
  NotEqual     r149, r147, r148
  Index        r150, r138, r3
  Equal        r151, r150, r148
  Move         r152, r149
  JumpIfFalse  r152, L14
  Move         r152, r151
L14:
  Select       153,152,49,34
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Const        r154, "catalog_only"
  Index        r155, r134, r3
  Equal        r156, r155, r148
  Index        r157, r138, r3
  NotEqual     r158, r157, r148
  Move         r159, r156
  JumpIfFalse  r159, L15
  Move         r159, r158
L15:
  Select       160,159,49,34
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Const        r161, "both"
  Index        r162, r134, r3
  NotEqual     r163, r162, r148
  Index        r164, r138, r3
  NotEqual     r165, r164, r148
  Move         r166, r163
  JumpIfFalse  r166, L16
  Move         r166, r165
L16:
  Select       167,166,49,34
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Move         r168, r146
  Move         r169, r153
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Move         r170, r154
  Move         r171, r160
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Move         r172, r161
  Move         r173, r167
  // select {
  MakeMap      r174, 3, r168
  // from s in ssci outer join c in csci on s.customer_sk == c.customer_sk && s.item_sk == c.item_sk
  Append       r175, r123, r174
  Move         r123, r175
L13:
  AddInt       r135, r135, r49
  Jump         L17
L11:
  AddInt       r131, r131, r49
  Jump         L18
L10:
  Const        r176, 0
L28:
  LessInt      r177, r176, r125
  JumpIfFalse  r177, L19
  Index        r178, r124, r176
  Move         r134, r178
  Const        r179, false
  Const        r180, 0
L23:
  LessInt      r181, r180, r127
  JumpIfFalse  r181, L20
  Index        r182, r126, r180
  Move         r138, r182
  Index        r183, r134, r3
  Index        r184, r138, r3
  Equal        r185, r183, r184
  Index        r186, r134, r5
  Index        r187, r138, r5
  Equal        r188, r186, r187
  Move         r189, r185
  JumpIfFalse  r189, L21
  Move         r189, r188
L21:
  JumpIfFalse  r189, L22
  Const        r179, true
L22:
  AddInt       r180, r180, r49
  Jump         L23
L20:
  Move         r190, r179
  JumpIfTrue   r190, L24
  Move         r138, r148
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Const        r191, "store_only"
  Index        r192, r134, r3
  NotEqual     r193, r192, r148
  Index        r194, r138, r3
  Equal        r195, r194, r148
  Move         r196, r193
  JumpIfFalse  r196, L25
  Move         r196, r195
L25:
  Select       197,196,49,34
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Const        r198, "catalog_only"
  Index        r199, r134, r3
  Equal        r200, r199, r148
  Index        r201, r138, r3
  NotEqual     r202, r201, r148
  Move         r203, r200
  JumpIfFalse  r203, L26
  Move         r203, r202
L26:
  Select       204,203,49,34
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Const        r205, "both"
  Index        r206, r134, r3
  NotEqual     r207, r206, r148
  Index        r208, r138, r3
  NotEqual     r209, r208, r148
  Move         r210, r207
  JumpIfFalse  r210, L27
  Move         r210, r209
L27:
  Select       211,210,49,34
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Move         r212, r191
  Move         r213, r197
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Move         r214, r198
  Move         r215, r204
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Move         r216, r205
  Move         r217, r211
  // select {
  MakeMap      r218, 3, r212
  // from s in ssci outer join c in csci on s.customer_sk == c.customer_sk && s.item_sk == c.item_sk
  Append       r219, r123, r218
  Move         r123, r219
L24:
  AddInt       r176, r176, r49
  Jump         L28
L19:
  Const        r220, 0
L38:
  LessInt      r221, r220, r127
  JumpIfFalse  r221, L29
  Index        r222, r126, r220
  Move         r138, r222
  Const        r223, false
  Const        r224, 0
L33:
  LessInt      r225, r224, r125
  JumpIfFalse  r225, L30
  Index        r226, r124, r224
  Move         r134, r226
  Index        r227, r134, r3
  Index        r228, r138, r3
  Equal        r229, r227, r228
  Index        r230, r134, r5
  Index        r231, r138, r5
  Equal        r232, r230, r231
  Move         r233, r229
  JumpIfFalse  r233, L31
  Move         r233, r232
L31:
  JumpIfFalse  r233, L32
  Const        r223, true
L32:
  AddInt       r224, r224, r49
  Jump         L33
L30:
  Move         r234, r223
  JumpIfTrue   r234, L34
  Move         r134, r148
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Const        r235, "store_only"
  Index        r236, r134, r3
  NotEqual     r237, r236, r148
  Index        r238, r138, r3
  Equal        r239, r238, r148
  Move         r240, r237
  JumpIfFalse  r240, L35
  Move         r240, r239
L35:
  Select       241,240,49,34
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Const        r242, "catalog_only"
  Index        r243, r134, r3
  Equal        r244, r243, r148
  Index        r245, r138, r3
  NotEqual     r246, r245, r148
  Move         r247, r244
  JumpIfFalse  r247, L36
  Move         r247, r246
L36:
  Select       248,247,49,34
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Const        r249, "both"
  Index        r250, r134, r3
  NotEqual     r251, r250, r148
  Index        r252, r138, r3
  NotEqual     r253, r252, r148
  Move         r254, r251
  JumpIfFalse  r254, L37
  Move         r254, r253
L37:
  Select       255,254,49,34
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Move         r256, r235
  Move         r257, r241
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Move         r258, r242
  Move         r259, r248
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Move         r260, r249
  Move         r261, r255
  // select {
  MakeMap      r262, 3, r256
  // from s in ssci outer join c in csci on s.customer_sk == c.customer_sk && s.item_sk == c.item_sk
  Append       r263, r123, r262
  Move         r123, r263
L34:
  AddInt       r220, r220, r49
  Jump         L38
L29:
  // store_only: sum(from x in joined select x.store_only),
  Const        r264, "store_only"
  Const        r265, []
  IterPrep     r266, r123
  Len          r267, r266
  Move         r268, r34
L40:
  LessInt      r269, r268, r267
  JumpIfFalse  r269, L39
  Index        r270, r266, r268
  Move         r271, r270
  Index        r272, r271, r128
  Append       r273, r265, r272
  Move         r265, r273
  AddInt       r268, r268, r49
  Jump         L40
L39:
  Sum          r274, r265
  // catalog_only: sum(from x in joined select x.catalog_only),
  Const        r275, "catalog_only"
  Const        r276, []
  IterPrep     r277, r123
  Len          r278, r277
  Move         r279, r34
L42:
  LessInt      r280, r279, r278
  JumpIfFalse  r280, L41
  Index        r281, r277, r279
  Move         r271, r281
  Index        r282, r271, r129
  Append       r283, r276, r282
  Move         r276, r283
  AddInt       r279, r279, r49
  Jump         L42
L41:
  Sum          r284, r276
  // store_and_catalog: sum(from x in joined select x.both)
  Const        r285, "store_and_catalog"
  Const        r286, []
  IterPrep     r287, r123
  Len          r288, r287
  Move         r289, r34
L44:
  LessInt      r290, r289, r288
  JumpIfFalse  r290, L43
  Index        r291, r287, r289
  Move         r271, r291
  Index        r292, r271, r130
  Append       r293, r286, r292
  Move         r286, r293
  AddInt       r289, r289, r49
  Jump         L44
L43:
  Sum          r294, r286
  // store_only: sum(from x in joined select x.store_only),
  Move         r295, r264
  Move         r296, r274
  // catalog_only: sum(from x in joined select x.catalog_only),
  Move         r297, r275
  Move         r298, r284
  // store_and_catalog: sum(from x in joined select x.both)
  Move         r299, r285
  Move         r300, r294
  // let result = {
  MakeMap      r301, 3, r295
  // json(result)
  JSON         r301
  // expect result.store_only == 1 &&
  Index        r302, r301, r128
  Equal        r303, r302, r49
  // result.catalog_only == 1 &&
  Index        r304, r301, r129
  Equal        r305, r304, r49
  // result.store_and_catalog == 1
  Const        r306, "store_and_catalog"
  Index        r307, r301, r306
  Equal        r308, r307, r49
  // expect result.store_only == 1 &&
  Move         r309, r303
  JumpIfFalse  r309, L45
  Move         r309, r305
  // result.catalog_only == 1 &&
  JumpIfFalse  r309, L45
  Move         r309, r308
L45:
  // expect result.store_only == 1 &&
  Expect       r309
  Return       r0
