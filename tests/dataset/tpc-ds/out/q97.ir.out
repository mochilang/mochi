func main (regs=313)
  // let store_sales = [
  Const        r0, [{"ss_customer_sk": 1, "ss_item_sk": 1}, {"ss_customer_sk": 2, "ss_item_sk": 1}]
  // let catalog_sales = [
  Const        r1, [{"cs_bill_customer_sk": 1, "cs_item_sk": 1}, {"cs_bill_customer_sk": 3, "cs_item_sk": 2}]
  // let ssci = from ss in store_sales group by {customer_sk: ss.ss_customer_sk, item_sk: ss.ss_item_sk} into g select {customer_sk: g.key.customer_sk, item_sk: g.key.item_sk}
  Const        r2, []
  Const        r3, "customer_sk"
  Const        r4, "ss_customer_sk"
  Const        r5, "item_sk"
  Const        r6, "ss_item_sk"
  Const        r7, "key"
  IterPrep     r8, r0
  Len          r9, r8
  Const        r10, 0
  MakeMap      r11, 0, r0
  Const        r13, []
  Move         r12, r13
L2:
  LessInt      r14, r10, r9
  JumpIfFalse  r14, L0
  Index        r15, r8, r10
  Move         r16, r15
  Const        r17, "customer_sk"
  Index        r18, r16, r4
  Const        r19, "item_sk"
  Index        r20, r16, r6
  Move         r21, r17
  Move         r22, r18
  Move         r23, r19
  Move         r24, r20
  MakeMap      r25, 2, r21
  Str          r26, r25
  In           r27, r26, r11
  JumpIfTrue   r27, L1
  Const        r28, []
  Const        r29, "__group__"
  Const        r30, true
  Move         r31, r25
  Const        r32, "items"
  Move         r33, r28
  Const        r34, "count"
  Const        r35, 0
  Move         r36, r29
  Move         r37, r30
  Move         r38, r7
  Move         r39, r31
  Move         r40, r32
  Move         r41, r33
  Move         r42, r34
  Move         r43, r35
  MakeMap      r44, 4, r36
  SetIndex     r11, r26, r44
  Append       r45, r12, r44
  Move         r12, r45
L1:
  Index        r46, r11, r26
  Index        r47, r46, r32
  Append       r48, r47, r15
  SetIndex     r46, r32, r48
  Index        r49, r46, r34
  Const        r50, 1
  AddInt       r51, r49, r50
  SetIndex     r46, r34, r51
  AddInt       r10, r10, r50
  Jump         L2
L0:
  Move         r52, r35
  Len          r53, r12
L4:
  LessInt      r54, r52, r53
  JumpIfFalse  r54, L3
  Index        r55, r12, r52
  Move         r56, r55
  Const        r57, "customer_sk"
  Index        r58, r56, r7
  Index        r59, r58, r3
  Const        r60, "item_sk"
  Index        r61, r56, r7
  Index        r62, r61, r5
  Move         r63, r57
  Move         r64, r59
  Move         r65, r60
  Move         r66, r62
  MakeMap      r67, 2, r63
  Append       r68, r2, r67
  Move         r2, r68
  AddInt       r52, r52, r50
  Jump         L4
L3:
  // let csci = from cs in catalog_sales group by {customer_sk: cs.cs_bill_customer_sk, item_sk: cs.cs_item_sk} into g select {customer_sk: g.key.customer_sk, item_sk: g.key.item_sk}
  Const        r69, []
  Const        r70, "cs_bill_customer_sk"
  Const        r71, "cs_item_sk"
  IterPrep     r72, r1
  Len          r73, r72
  Const        r74, 0
  MakeMap      r75, 0, r0
  Const        r77, []
  Move         r76, r77
L7:
  LessInt      r78, r74, r73
  JumpIfFalse  r78, L5
  Index        r79, r72, r74
  Move         r80, r79
  Const        r81, "customer_sk"
  Index        r82, r80, r70
  Const        r83, "item_sk"
  Index        r84, r80, r71
  Move         r85, r81
  Move         r86, r82
  Move         r87, r83
  Move         r88, r84
  MakeMap      r89, 2, r85
  Str          r90, r89
  In           r91, r90, r75
  JumpIfTrue   r91, L6
  Move         r92, r89
  Move         r93, r28
  Move         r94, r29
  Move         r95, r30
  Move         r96, r7
  Move         r97, r92
  Move         r98, r32
  Move         r99, r93
  Move         r100, r34
  Move         r101, r35
  MakeMap      r102, 4, r94
  SetIndex     r75, r90, r102
  Append       r103, r76, r102
  Move         r76, r103
L6:
  Index        r104, r75, r90
  Index        r105, r104, r32
  Append       r106, r105, r79
  SetIndex     r104, r32, r106
  Index        r107, r104, r34
  AddInt       r108, r107, r50
  SetIndex     r104, r34, r108
  AddInt       r74, r74, r50
  Jump         L7
L5:
  Move         r109, r35
  Len          r110, r76
L9:
  LessInt      r111, r109, r110
  JumpIfFalse  r111, L8
  Index        r112, r76, r109
  Move         r56, r112
  Const        r113, "customer_sk"
  Index        r114, r56, r7
  Index        r115, r114, r3
  Const        r116, "item_sk"
  Index        r117, r56, r7
  Index        r118, r117, r5
  Move         r119, r113
  Move         r120, r115
  Move         r121, r116
  Move         r122, r118
  MakeMap      r123, 2, r119
  Append       r124, r69, r123
  Move         r69, r124
  AddInt       r109, r109, r50
  Jump         L9
L8:
  // from s in ssci outer join c in csci on s.customer_sk == c.customer_sk && s.item_sk == c.item_sk
  Const        r125, []
  IterPrep     r126, r2
  Len          r127, r126
  IterPrep     r128, r69
  Len          r129, r128
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Const        r130, "store_only"
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Const        r131, "catalog_only"
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Const        r132, "both"
  // from s in ssci outer join c in csci on s.customer_sk == c.customer_sk && s.item_sk == c.item_sk
  Const        r133, 0
L18:
  LessInt      r134, r133, r127
  JumpIfFalse  r134, L10
  Index        r135, r126, r133
  Move         r136, r135
  Const        r137, 0
L17:
  LessInt      r138, r137, r129
  JumpIfFalse  r138, L11
  Index        r139, r128, r137
  Move         r140, r139
  Index        r141, r136, r3
  Index        r142, r140, r3
  Equal        r143, r141, r142
  Index        r144, r136, r5
  Index        r145, r140, r5
  Equal        r146, r144, r145
  Move         r147, r143
  JumpIfFalse  r147, L12
  Move         r147, r146
L12:
  JumpIfFalse  r147, L13
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Const        r148, "store_only"
  Index        r149, r136, r3
  Const        r150, nil
  NotEqual     r151, r149, r150
  Index        r152, r140, r3
  Equal        r153, r152, r150
  Move         r154, r151
  JumpIfFalse  r154, L14
  Move         r154, r153
L14:
  Select       155,154,50,35
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Const        r156, "catalog_only"
  Index        r157, r136, r3
  Equal        r158, r157, r150
  Index        r159, r140, r3
  NotEqual     r160, r159, r150
  Move         r161, r158
  JumpIfFalse  r161, L15
  Move         r161, r160
L15:
  Select       162,161,50,35
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Const        r163, "both"
  Index        r164, r136, r3
  NotEqual     r165, r164, r150
  Index        r166, r140, r3
  NotEqual     r167, r166, r150
  Move         r168, r165
  JumpIfFalse  r168, L16
  Move         r168, r167
L16:
  Select       169,168,50,35
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Move         r170, r148
  Move         r171, r155
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Move         r172, r156
  Move         r173, r162
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Move         r174, r163
  Move         r175, r169
  // select {
  MakeMap      r176, 3, r170
  // from s in ssci outer join c in csci on s.customer_sk == c.customer_sk && s.item_sk == c.item_sk
  Append       r177, r125, r176
  Move         r125, r177
L13:
  AddInt       r137, r137, r50
  Jump         L17
L11:
  AddInt       r133, r133, r50
  Jump         L18
L10:
  Const        r178, 0
L28:
  LessInt      r179, r178, r127
  JumpIfFalse  r179, L19
  Index        r180, r126, r178
  Move         r136, r180
  Const        r181, false
  Const        r182, 0
L23:
  LessInt      r183, r182, r129
  JumpIfFalse  r183, L20
  Index        r184, r128, r182
  Move         r140, r184
  Index        r185, r136, r3
  Index        r186, r140, r3
  Equal        r187, r185, r186
  Index        r188, r136, r5
  Index        r189, r140, r5
  Equal        r190, r188, r189
  Move         r191, r187
  JumpIfFalse  r191, L21
  Move         r191, r190
L21:
  JumpIfFalse  r191, L22
  Const        r181, true
L22:
  AddInt       r182, r182, r50
  Jump         L23
L20:
  Move         r192, r181
  JumpIfTrue   r192, L24
  Move         r140, r150
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Const        r193, "store_only"
  Index        r194, r136, r3
  NotEqual     r195, r194, r150
  Index        r196, r140, r3
  Equal        r197, r196, r150
  Move         r198, r195
  JumpIfFalse  r198, L25
  Move         r198, r197
L25:
  Select       199,198,50,35
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Const        r200, "catalog_only"
  Index        r201, r136, r3
  Equal        r202, r201, r150
  Index        r203, r140, r3
  NotEqual     r204, r203, r150
  Move         r205, r202
  JumpIfFalse  r205, L26
  Move         r205, r204
L26:
  Select       206,205,50,35
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Const        r207, "both"
  Index        r208, r136, r3
  NotEqual     r209, r208, r150
  Index        r210, r140, r3
  NotEqual     r211, r210, r150
  Move         r212, r209
  JumpIfFalse  r212, L27
  Move         r212, r211
L27:
  Select       213,212,50,35
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Move         r214, r193
  Move         r215, r199
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Move         r216, r200
  Move         r217, r206
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Move         r218, r207
  Move         r219, r213
  // select {
  MakeMap      r220, 3, r214
  // from s in ssci outer join c in csci on s.customer_sk == c.customer_sk && s.item_sk == c.item_sk
  Append       r221, r125, r220
  Move         r125, r221
L24:
  AddInt       r178, r178, r50
  Jump         L28
L19:
  Const        r222, 0
L38:
  LessInt      r223, r222, r129
  JumpIfFalse  r223, L29
  Index        r224, r128, r222
  Move         r140, r224
  Const        r225, false
  Const        r226, 0
L33:
  LessInt      r227, r226, r127
  JumpIfFalse  r227, L30
  Index        r228, r126, r226
  Move         r136, r228
  Index        r229, r136, r3
  Index        r230, r140, r3
  Equal        r231, r229, r230
  Index        r232, r136, r5
  Index        r233, r140, r5
  Equal        r234, r232, r233
  Move         r235, r231
  JumpIfFalse  r235, L31
  Move         r235, r234
L31:
  JumpIfFalse  r235, L32
  Const        r225, true
L32:
  AddInt       r226, r226, r50
  Jump         L33
L30:
  Move         r236, r225
  JumpIfTrue   r236, L34
  Move         r136, r150
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Const        r237, "store_only"
  Index        r238, r136, r3
  NotEqual     r239, r238, r150
  Index        r240, r140, r3
  Equal        r241, r240, r150
  Move         r242, r239
  JumpIfFalse  r242, L35
  Move         r242, r241
L35:
  Select       243,242,50,35
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Const        r244, "catalog_only"
  Index        r245, r136, r3
  Equal        r246, r245, r150
  Index        r247, r140, r3
  NotEqual     r248, r247, r150
  Move         r249, r246
  JumpIfFalse  r249, L36
  Move         r249, r248
L36:
  Select       250,249,50,35
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Const        r251, "both"
  Index        r252, r136, r3
  NotEqual     r253, r252, r150
  Index        r254, r140, r3
  NotEqual     r255, r254, r150
  Move         r256, r253
  JumpIfFalse  r256, L37
  Move         r256, r255
L37:
  Select       257,256,50,35
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Move         r258, r237
  Move         r259, r243
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Move         r260, r244
  Move         r261, r250
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Move         r262, r251
  Move         r263, r257
  // select {
  MakeMap      r264, 3, r258
  // from s in ssci outer join c in csci on s.customer_sk == c.customer_sk && s.item_sk == c.item_sk
  Append       r265, r125, r264
  Move         r125, r265
L34:
  AddInt       r222, r222, r50
  Jump         L38
L29:
  // store_only: sum(from x in joined select x.store_only),
  Const        r266, "store_only"
  Const        r267, []
  IterPrep     r268, r125
  Len          r269, r268
  Move         r270, r35
L40:
  LessInt      r271, r270, r269
  JumpIfFalse  r271, L39
  Index        r272, r268, r270
  Move         r273, r272
  Index        r274, r273, r130
  Append       r275, r267, r274
  Move         r267, r275
  AddInt       r270, r270, r50
  Jump         L40
L39:
  Sum          r276, r267
  // catalog_only: sum(from x in joined select x.catalog_only),
  Const        r277, "catalog_only"
  Const        r278, []
  IterPrep     r279, r125
  Len          r280, r279
  Move         r281, r35
L42:
  LessInt      r282, r281, r280
  JumpIfFalse  r282, L41
  Index        r283, r279, r281
  Move         r273, r283
  Index        r284, r273, r131
  Append       r285, r278, r284
  Move         r278, r285
  AddInt       r281, r281, r50
  Jump         L42
L41:
  Sum          r286, r278
  // store_and_catalog: sum(from x in joined select x.both)
  Const        r287, "store_and_catalog"
  Const        r288, []
  IterPrep     r289, r125
  Len          r290, r289
  Move         r291, r35
L44:
  LessInt      r292, r291, r290
  JumpIfFalse  r292, L43
  Index        r293, r289, r291
  Move         r273, r293
  Index        r294, r273, r132
  Append       r295, r288, r294
  Move         r288, r295
  AddInt       r291, r291, r50
  Jump         L44
L43:
  Sum          r296, r288
  // store_only: sum(from x in joined select x.store_only),
  Move         r297, r266
  Move         r298, r276
  // catalog_only: sum(from x in joined select x.catalog_only),
  Move         r299, r277
  Move         r300, r286
  // store_and_catalog: sum(from x in joined select x.both)
  Move         r301, r287
  Move         r302, r296
  // let result = {
  MakeMap      r303, 3, r297
  // json(result)
  JSON         r303
  // expect result.store_only == 1 &&
  Index        r304, r303, r130
  Equal        r305, r304, r50
  // result.catalog_only == 1 &&
  Index        r306, r303, r131
  Equal        r307, r306, r50
  // result.store_and_catalog == 1
  Const        r308, "store_and_catalog"
  Index        r309, r303, r308
  Equal        r310, r309, r50
  // expect result.store_only == 1 &&
  Move         r311, r305
  JumpIfFalse  r311, L45
  Move         r311, r307
L45:
  // result.catalog_only == 1 &&
  Move         r312, r311
  JumpIfFalse  r312, L46
  Move         r312, r310
L46:
  // expect result.store_only == 1 &&
  Expect       r312
  Return       r0
