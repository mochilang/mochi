func main (regs=258)
  // let store_sales = [
  Const        r0, [{"ss_customer_sk": 1, "ss_item_sk": 1}, {"ss_customer_sk": 2, "ss_item_sk": 1}]
  // let catalog_sales = [
  Const        r1, [{"cs_bill_customer_sk": 1, "cs_item_sk": 1}, {"cs_bill_customer_sk": 3, "cs_item_sk": 2}]
  // let ssci = from ss in store_sales group by {customer_sk: ss.ss_customer_sk, item_sk: ss.ss_item_sk} into g select {customer_sk: g.key.customer_sk, item_sk: g.key.item_sk}
  Const        r2, []
  Const        r3, "customer_sk"
  Const        r4, "ss_customer_sk"
  Const        r5, "item_sk"
  Const        r6, "ss_item_sk"
  Const        r7, "key"
  IterPrep     r8, r0
  Len          r9, r8
  Const        r10, 0
  MakeMap      r11, 0, r0
  Const        r12, []
L2:
  LessInt      r14, r10, r9
  JumpIfFalse  r14, L0
  Index        r15, r8, r10
  Move         r16, r15
  Const        r17, "customer_sk"
  Index        r18, r16, r4
  Const        r19, "item_sk"
  Index        r20, r16, r6
  Move         r21, r17
  Move         r22, r18
  Move         r23, r19
  Move         r24, r20
  MakeMap      r25, 2, r21
  Str          r26, r25
  In           r27, r26, r11
  JumpIfTrue   r27, L1
  Const        r28, []
  Const        r29, "__group__"
  Const        r30, true
  Const        r31, "key"
  Move         r32, r25
  Const        r33, "items"
  Move         r34, r28
  Const        r35, "count"
  Const        r36, 0
  Move         r37, r29
  Move         r38, r30
  Move         r39, r31
  Move         r40, r32
  Move         r41, r33
  Move         r42, r34
  Move         r43, r35
  Move         r44, r36
  MakeMap      r45, 4, r37
  SetIndex     r11, r26, r45
  Append       r12, r12, r45
L1:
  Const        r47, "items"
  Index        r48, r11, r26
  Index        r49, r48, r47
  Append       r50, r49, r15
  SetIndex     r48, r47, r50
  Const        r51, "count"
  Index        r52, r48, r51
  Const        r53, 1
  AddInt       r54, r52, r53
  SetIndex     r48, r51, r54
  AddInt       r10, r10, r53
  Jump         L2
L0:
  Const        r56, 0
  Move         r55, r56
  Len          r57, r12
L4:
  LessInt      r58, r55, r57
  JumpIfFalse  r58, L3
  Index        r60, r12, r55
  Const        r61, "customer_sk"
  Index        r62, r60, r7
  Index        r63, r62, r3
  Const        r64, "item_sk"
  Index        r65, r60, r7
  Index        r66, r65, r5
  Move         r67, r61
  Move         r68, r63
  Move         r69, r64
  Move         r70, r66
  MakeMap      r71, 2, r67
  Append       r2, r2, r71
  AddInt       r55, r55, r53
  Jump         L4
L3:
  // let csci = from cs in catalog_sales group by {customer_sk: cs.cs_bill_customer_sk, item_sk: cs.cs_item_sk} into g select {customer_sk: g.key.customer_sk, item_sk: g.key.item_sk}
  Const        r73, []
  Const        r74, "cs_bill_customer_sk"
  Const        r75, "cs_item_sk"
  IterPrep     r76, r1
  Len          r77, r76
  Const        r78, 0
  MakeMap      r79, 0, r0
  Const        r80, []
L7:
  LessInt      r82, r78, r77
  JumpIfFalse  r82, L5
  Index        r83, r76, r78
  Move         r84, r83
  Const        r85, "customer_sk"
  Index        r86, r84, r74
  Const        r87, "item_sk"
  Index        r88, r84, r75
  Move         r89, r85
  Move         r90, r86
  Move         r91, r87
  Move         r92, r88
  MakeMap      r93, 2, r89
  Str          r94, r93
  In           r95, r94, r79
  JumpIfTrue   r95, L6
  Const        r96, []
  Const        r97, "__group__"
  Const        r98, true
  Const        r99, "key"
  Move         r100, r93
  Const        r101, "items"
  Move         r102, r96
  Const        r103, "count"
  Const        r104, 0
  Move         r105, r97
  Move         r106, r98
  Move         r107, r99
  Move         r108, r100
  Move         r109, r101
  Move         r110, r102
  Move         r111, r103
  Move         r112, r104
  MakeMap      r113, 4, r105
  SetIndex     r79, r94, r113
  Append       r80, r80, r113
L6:
  Index        r115, r79, r94
  Index        r116, r115, r47
  Append       r117, r116, r83
  SetIndex     r115, r47, r117
  Index        r118, r115, r51
  AddInt       r119, r118, r53
  SetIndex     r115, r51, r119
  AddInt       r78, r78, r53
  Jump         L7
L5:
  Move         r120, r56
  Len          r121, r80
L9:
  LessInt      r122, r120, r121
  JumpIfFalse  r122, L8
  Index        r60, r80, r120
  Const        r124, "customer_sk"
  Index        r125, r60, r7
  Index        r126, r125, r3
  Const        r127, "item_sk"
  Index        r128, r60, r7
  Index        r129, r128, r5
  Move         r130, r124
  Move         r131, r126
  Move         r132, r127
  Move         r133, r129
  MakeMap      r134, 2, r130
  Append       r73, r73, r134
  AddInt       r120, r120, r53
  Jump         L9
L8:
  // from s in ssci outer join c in csci on s.customer_sk == c.customer_sk && s.item_sk == c.item_sk
  Const        r136, []
  IterPrep     r137, r2
  Len          r138, r137
  IterPrep     r139, r73
  Len          r140, r139
  Const        r143, 0
L22:
  LessInt      r144, r143, r140
  JumpIfFalse  r144, L10
  Index        r141, r139, r143
  Const        r146, false
  Const        r147, 0
L17:
  LessInt      r148, r147, r138
  JumpIfFalse  r148, L11
  Index        r142, r137, r147
  Index        r150, r142, r3
  Index        r151, r141, r3
  Equal        r152, r150, r151
  Index        r153, r142, r5
  Index        r154, r141, r5
  Equal        r155, r153, r154
  JumpIfFalse  r152, L12
  Move         r152, r155
L12:
  JumpIfFalse  r152, L13
  Const        r146, true
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Const        r156, "store_only"
  Index        r157, r142, r3
  Const        r158, nil
  NotEqual     r159, r157, r158
  Index        r160, r141, r3
  Equal        r161, r160, r158
  JumpIfFalse  r159, L14
L14:
  Select       162,161,53,56
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Const        r163, "catalog_only"
  Index        r164, r142, r3
  Equal        r165, r164, r158
  Index        r166, r141, r3
  NotEqual     r167, r166, r158
  JumpIfFalse  r165, L15
L15:
  Select       168,167,53,56
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Const        r169, "both"
  Index        r170, r142, r3
  NotEqual     r171, r170, r158
  Index        r172, r141, r3
  NotEqual     r173, r172, r158
  JumpIfFalse  r171, L16
L16:
  Select       174,173,53,56
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Move         r175, r156
  Move         r176, r162
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Move         r177, r163
  Move         r178, r168
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Move         r179, r169
  Move         r180, r174
  // select {
  MakeMap      r181, 3, r175
  // from s in ssci outer join c in csci on s.customer_sk == c.customer_sk && s.item_sk == c.item_sk
  Append       r136, r136, r181
L13:
  AddInt       r147, r147, r53
  Jump         L17
L11:
  Move         r183, r146
  JumpIfTrue   r183, L18
  Move         r142, r158
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Const        r184, "store_only"
  Index        r185, r142, r3
  NotEqual     r186, r185, r158
  Index        r187, r141, r3
  Equal        r188, r187, r158
  JumpIfFalse  r186, L19
L19:
  Select       189,188,53,56
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Const        r190, "catalog_only"
  Index        r191, r142, r3
  Equal        r192, r191, r158
  Index        r193, r141, r3
  NotEqual     r194, r193, r158
  JumpIfFalse  r192, L20
L20:
  Select       195,194,53,56
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Const        r196, "both"
  Index        r197, r142, r3
  NotEqual     r198, r197, r158
  Index        r199, r141, r3
  NotEqual     r200, r199, r158
  JumpIfFalse  r198, L21
L21:
  Select       201,200,53,56
  // store_only: if s.customer_sk != null && c.customer_sk == null {1} else {0},
  Move         r202, r184
  Move         r203, r189
  // catalog_only: if s.customer_sk == null && c.customer_sk != null {1} else {0},
  Move         r204, r190
  Move         r205, r195
  // both: if s.customer_sk != null && c.customer_sk != null {1} else {0}
  Move         r206, r196
  Move         r207, r201
  // select {
  MakeMap      r208, 3, r202
  // from s in ssci outer join c in csci on s.customer_sk == c.customer_sk && s.item_sk == c.item_sk
  Append       r136, r136, r208
L18:
  AddInt       r143, r143, r53
  Jump         L22
L10:
  // store_only: sum(from x in joined select x.store_only),
  Const        r210, "store_only"
  Const        r211, []
  Const        r212, "store_only"
  IterPrep     r213, r136
  Len          r214, r213
  Move         r215, r56
L24:
  LessInt      r216, r215, r214
  JumpIfFalse  r216, L23
  Index        r218, r213, r215
  Index        r219, r218, r212
  Append       r211, r211, r219
  AddInt       r215, r215, r53
  Jump         L24
L23:
  Sum          r221, r211
  // catalog_only: sum(from x in joined select x.catalog_only),
  Const        r222, "catalog_only"
  Const        r223, []
  Const        r224, "catalog_only"
  IterPrep     r225, r136
  Len          r226, r225
  Move         r227, r56
L26:
  LessInt      r228, r227, r226
  JumpIfFalse  r228, L25
  Index        r218, r225, r227
  Index        r230, r218, r224
  Append       r223, r223, r230
  AddInt       r227, r227, r53
  Jump         L26
L25:
  Sum          r232, r223
  // store_and_catalog: sum(from x in joined select x.both)
  Const        r233, "store_and_catalog"
  Const        r234, []
  Const        r235, "both"
  IterPrep     r236, r136
  Len          r237, r236
  Move         r238, r56
L28:
  LessInt      r239, r238, r237
  JumpIfFalse  r239, L27
  Index        r218, r236, r238
  Index        r241, r218, r235
  Append       r234, r234, r241
  AddInt       r238, r238, r53
  Jump         L28
L27:
  Sum          r243, r234
  // store_only: sum(from x in joined select x.store_only),
  Move         r244, r210
  Move         r245, r221
  // catalog_only: sum(from x in joined select x.catalog_only),
  Move         r246, r222
  Move         r247, r232
  // store_and_catalog: sum(from x in joined select x.both)
  Move         r248, r233
  Move         r249, r243
  // let result = {
  MakeMap      r250, 3, r244
  // json(result)
  JSON         r250
  // expect result.store_only == 1 &&
  Index        r251, r250, r212
  Equal        r252, r251, r53
  // result.catalog_only == 1 &&
  Index        r253, r250, r224
  Equal        r254, r253, r53
  // result.store_and_catalog == 1
  Const        r255, "store_and_catalog"
  Index        r256, r250, r255
  Equal        r257, r256, r53
  // expect result.store_only == 1 &&
  JumpIfFalse  r252, L29
  Move         r252, r254
  // result.catalog_only == 1 &&
  JumpIfFalse  r252, L29
  Move         r252, r257
L29:
  // expect result.store_only == 1 &&
  Expect       r252
  Return       r0
