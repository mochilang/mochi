func main (regs=131)
  // let store_sales = [
  Const        r0, [{"item": 1, "price": 10.0, "sold_date": 1}, {"item": 2, "price": 20.0, "sold_date": 1}, {"item": 3, "price": 25.0, "sold_date": 1}]
  // let item = [
  Const        r1, [{"i_brand_id": 10, "i_item_sk": 1, "i_manager_id": 1}, {"i_brand_id": 20, "i_item_sk": 2, "i_manager_id": 1}, {"i_brand_id": 10, "i_item_sk": 3, "i_manager_id": 1}]
  // let date_dim = [ {d_date_sk: 1, d_year: 2001, d_moy: 11} ]
  Const        r2, [{"d_date_sk": 1, "d_moy": 11, "d_year": 2001}]
  // from ss in store_sales
  Const        r3, []
  // group by {brand_id: i.i_brand_id} into g
  Const        r4, "brand_id"
  Const        r5, "i_brand_id"
  // select {brand_id: g.key.brand_id, ext_price: sum(from x in g select x.price)}
  Const        r4, "brand_id"
  Const        r6, "key"
  Const        r4, "brand_id"
  Const        r7, "ext_price"
  Const        r8, "price"
  // from ss in store_sales
  MakeMap      r9, 0, r0
  Const        r11, []
  Move         r10, r11
  IterPrep     r12, r0
  Len          r13, r12
  Const        r14, 0
L8:
  LessInt      r15, r14, r13
  JumpIfFalse  r15, L0
  Index        r16, r12, r14
  Move         r17, r16
  // join i in item on ss.item == i.i_item_sk && i.i_manager_id == 1
  IterPrep     r18, r1
  Len          r19, r18
  Const        r20, 0
L7:
  LessInt      r21, r20, r19
  JumpIfFalse  r21, L1
  Index        r22, r18, r20
  Move         r23, r22
  Const        r24, "item"
  Index        r25, r17, r24
  Const        r26, "i_item_sk"
  Index        r27, r23, r26
  Equal        r28, r25, r27
  Const        r29, "i_manager_id"
  Index        r30, r23, r29
  Const        r31, 1
  Equal        r32, r30, r31
  Move         r33, r28
  JumpIfFalse  r33, L2
  Move         r33, r32
L2:
  JumpIfFalse  r33, L3
  // join d in date_dim on ss.sold_date == d.d_date_sk
  IterPrep     r34, r2
  Len          r35, r34
  Const        r36, 0
L6:
  LessInt      r37, r36, r35
  JumpIfFalse  r37, L3
  Index        r38, r34, r36
  Move         r39, r38
  Const        r40, "sold_date"
  Index        r41, r17, r40
  Const        r42, "d_date_sk"
  Index        r43, r39, r42
  Equal        r44, r41, r43
  JumpIfFalse  r44, L4
  // from ss in store_sales
  Const        r45, "ss"
  Move         r46, r17
  Const        r47, "i"
  Move         r48, r23
  Const        r49, "d"
  Move         r50, r39
  Move         r51, r45
  Move         r52, r46
  Move         r53, r47
  Move         r54, r48
  Move         r55, r49
  Move         r56, r50
  MakeMap      r57, 3, r51
  // group by {brand_id: i.i_brand_id} into g
  Const        r58, "brand_id"
  Const        r5, "i_brand_id"
  Index        r59, r23, r5
  Move         r60, r58
  Move         r61, r59
  MakeMap      r62, 1, r60
  Str          r63, r62
  In           r64, r63, r9
  JumpIfTrue   r64, L5
  // from ss in store_sales
  Const        r11, []
  Const        r65, "__group__"
  Const        r66, true
  Const        r6, "key"
  // group by {brand_id: i.i_brand_id} into g
  Move         r67, r62
  // from ss in store_sales
  Const        r68, "items"
  Move         r69, r11
  Const        r70, "count"
  Const        r71, 0
  Move         r72, r65
  Move         r73, r66
  Move         r74, r6
  Move         r75, r67
  Move         r76, r68
  Move         r77, r69
  Move         r78, r70
  Move         r79, r71
  MakeMap      r80, 4, r72
  SetIndex     r9, r63, r80
  Append       r81, r10, r80
  Move         r10, r81
L5:
  Const        r68, "items"
  Index        r82, r9, r63
  Index        r83, r82, r68
  Append       r84, r83, r57
  SetIndex     r82, r68, r84
  Const        r70, "count"
  Index        r85, r82, r70
  Const        r31, 1
  AddInt       r86, r85, r31
  SetIndex     r82, r70, r86
L4:
  // join d in date_dim on ss.sold_date == d.d_date_sk
  Const        r31, 1
  AddInt       r36, r36, r31
  Jump         L6
L3:
  // join i in item on ss.item == i.i_item_sk && i.i_manager_id == 1
  Const        r31, 1
  AddInt       r20, r20, r31
  Jump         L7
L1:
  // from ss in store_sales
  Const        r31, 1
  AddInt       r14, r14, r31
  Jump         L8
L0:
  Const        r71, 0
  Move         r87, r71
  Len          r88, r10
L12:
  LessInt      r89, r87, r88
  JumpIfFalse  r89, L9
  Index        r90, r10, r87
  Move         r91, r90
  // select {brand_id: g.key.brand_id, ext_price: sum(from x in g select x.price)}
  Const        r92, "brand_id"
  Const        r6, "key"
  Index        r93, r91, r6
  Const        r4, "brand_id"
  Index        r94, r93, r4
  Const        r95, "ext_price"
  Const        r96, []
  Const        r8, "price"
  IterPrep     r97, r91
  Len          r98, r97
  Const        r71, 0
  Move         r99, r71
L11:
  LessInt      r100, r99, r98
  JumpIfFalse  r100, L10
  Index        r101, r97, r99
  Move         r102, r101
  Const        r8, "price"
  Index        r103, r102, r8
  Append       r104, r96, r103
  Move         r96, r104
  Const        r31, 1
  AddInt       r99, r99, r31
  Jump         L11
L10:
  Sum          r105, r96
  Move         r106, r92
  Move         r107, r94
  Move         r108, r95
  Move         r109, r105
  MakeMap      r110, 2, r106
  // from ss in store_sales
  Append       r111, r3, r110
  Move         r3, r111
  Const        r31, 1
  AddInt       r87, r87, r31
  Jump         L12
L9:
  // from g in grouped
  Const        r112, []
  // sort by [-g.ext_price, g.brand_id]
  Const        r7, "ext_price"
  Const        r4, "brand_id"
  // from g in grouped
  IterPrep     r113, r3
  Len          r114, r113
  Const        r71, 0
  Move         r115, r71
L14:
  LessInt      r116, r115, r114
  JumpIfFalse  r116, L13
  Index        r117, r113, r115
  Move         r91, r117
  // sort by [-g.ext_price, g.brand_id]
  Const        r7, "ext_price"
  Index        r122, r91, r7
  Neg          r123, r122
  Move         r120, r123
  Const        r4, "brand_id"
  Index        r124, r91, r4
  Move         r121, r124
  MakeList     r125, 2, r120
  Move         r118, r125
  // from g in grouped
  Move         r119, r91
  MakeList     r126, 2, r118
  Append       r127, r112, r126
  Move         r112, r127
  Const        r31, 1
  AddInt       r115, r115, r31
  Jump         L14
L13:
  // sort by [-g.ext_price, g.brand_id]
  Sort         r128, r112
  // from g in grouped
  Move         r112, r128
  // json(result)
  JSON         r112
  // expect result == [
  Const        r129, [{"brand_id": 10, "ext_price": 35.0}, {"brand_id": 20, "ext_price": 20.0}]
  Equal        r130, r112, r129
  Expect       r130
  Return       r0
