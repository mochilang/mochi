func main (regs=237)
  // let store_sales = [
  Const        r0, [{"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 5, "ss_sales_price": 10.0, "ss_ticket_number": 1}, {"ss_customer_sk": 2, "ss_item_sk": 1, "ss_quantity": 3, "ss_sales_price": 20.0, "ss_ticket_number": 2}]
  // let store_returns = [
  Const        r1, [{"sr_item_sk": 1, "sr_reason_sk": 1, "sr_return_quantity": 1, "sr_ticket_number": 1}]
  // let reason = [{r_reason_sk: 1, r_reason_desc: "ReasonA"}]
  Const        r2, [{"r_reason_desc": "ReasonA", "r_reason_sk": 1}]
  // from ss in store_sales
  Const        r3, []
  // where r == null || r.r_reason_desc == "ReasonA"
  Const        r4, "r_reason_desc"
  // ss_customer_sk: ss.ss_customer_sk,
  Const        r5, "ss_customer_sk"
  // act_sales: if sr != null { (ss.ss_quantity - sr.sr_return_quantity) * ss.ss_sales_price } else { ss.ss_quantity * ss.ss_sales_price }
  Const        r6, "act_sales"
  Const        r7, "ss_quantity"
  Const        r8, "sr_return_quantity"
  Const        r9, "ss_sales_price"
  // from ss in store_sales
  IterPrep     r10, r0
  Len          r11, r10
  Const        r13, 0
  Move         r12, r13
  LessInt      r14, r12, r11
  JumpIfFalse  r14, L0
  Index        r15, r10, r12
L16:
  Move         r16, r15
  // left join sr in store_returns on ss.ss_item_sk == sr.sr_item_sk && ss.ss_ticket_number == sr.sr_ticket_number
  IterPrep     r17, r1
  Len          r18, r17
  Const        r19, "ss_item_sk"
  Const        r20, "sr_item_sk"
  Const        r21, "ss_ticket_number"
  Const        r22, "sr_ticket_number"
  // where r == null || r.r_reason_desc == "ReasonA"
  Const        r4, "r_reason_desc"
  // ss_customer_sk: ss.ss_customer_sk,
  Const        r5, "ss_customer_sk"
  // act_sales: if sr != null { (ss.ss_quantity - sr.sr_return_quantity) * ss.ss_sales_price } else { ss.ss_quantity * ss.ss_sales_price }
  Const        r6, "act_sales"
  Const        r7, "ss_quantity"
  Const        r8, "sr_return_quantity"
  Const        r9, "ss_sales_price"
  // left join sr in store_returns on ss.ss_item_sk == sr.sr_item_sk && ss.ss_ticket_number == sr.sr_ticket_number
  Const        r13, 0
  Move         r23, r13
  LessInt      r24, r23, r18
  JumpIfFalse  r24, L1
  Index        r25, r17, r23
  Move         r26, r25
  Const        r27, false
  Const        r19, "ss_item_sk"
L10:
  Index        r28, r16, r19
  Const        r20, "sr_item_sk"
  Index        r29, r26, r20
  Equal        r30, r28, r29
  Const        r21, "ss_ticket_number"
  Index        r31, r16, r21
  Const        r22, "sr_ticket_number"
  Index        r32, r26, r22
  Equal        r33, r31, r32
  Move         r34, r30
  JumpIfFalse  r34, L2
  Move         r34, r33
  JumpIfFalse  r34, L3
  Const        r27, true
  // left join r in reason on sr != null && sr.sr_reason_sk == r.r_reason_sk
  IterPrep     r35, r2
  Len          r36, r35
  Const        r37, "sr_reason_sk"
  Const        r38, "r_reason_sk"
L2:
  // where r == null || r.r_reason_desc == "ReasonA"
  Const        r4, "r_reason_desc"
  // ss_customer_sk: ss.ss_customer_sk,
  Const        r5, "ss_customer_sk"
  // act_sales: if sr != null { (ss.ss_quantity - sr.sr_return_quantity) * ss.ss_sales_price } else { ss.ss_quantity * ss.ss_sales_price }
  Const        r6, "act_sales"
  Const        r7, "ss_quantity"
  Const        r8, "sr_return_quantity"
  Const        r9, "ss_sales_price"
  // left join r in reason on sr != null && sr.sr_reason_sk == r.r_reason_sk
  Const        r13, 0
  Move         r39, r13
  LessInt      r40, r39, r36
  JumpIfFalse  r40, L4
  Index        r41, r35, r39
  Move         r42, r41
  Const        r43, false
  Const        r44, nil
  NotEqual     r45, r26, r44
  Const        r37, "sr_reason_sk"
  Index        r46, r26, r37
L8:
  Const        r38, "r_reason_sk"
  Index        r47, r42, r38
  Equal        r48, r46, r47
  Move         r49, r45
  JumpIfFalse  r49, L5
  Move         r49, r48
  JumpIfFalse  r49, L6
  Const        r43, true
  // where r == null || r.r_reason_desc == "ReasonA"
  Const        r44, nil
  Equal        r50, r42, r44
  Const        r4, "r_reason_desc"
  Index        r51, r42, r4
  Const        r52, "ReasonA"
  Equal        r53, r51, r52
  Move         r54, r50
L5:
  JumpIfTrue   r54, L7
  Move         r54, r53
  JumpIfFalse  r54, L6
  // ss_customer_sk: ss.ss_customer_sk,
  Const        r55, "ss_customer_sk"
  Const        r5, "ss_customer_sk"
  Index        r56, r16, r5
  // act_sales: if sr != null { (ss.ss_quantity - sr.sr_return_quantity) * ss.ss_sales_price } else { ss.ss_quantity * ss.ss_sales_price }
  Const        r57, "act_sales"
  Const        r44, nil
  NotEqual     r58, r26, r44
  Const        r7, "ss_quantity"
  Index        r59, r16, r7
L7:
  Const        r8, "sr_return_quantity"
  Index        r60, r26, r8
  Sub          r61, r59, r60
  Const        r9, "ss_sales_price"
  Index        r62, r16, r9
  Mul          r63, r61, r62
  Index        r64, r16, r7
  Index        r65, r16, r9
  Mul          r66, r64, r65
  Select       67,58,63,66
  // ss_customer_sk: ss.ss_customer_sk,
  Move         r68, r55
  Move         r69, r56
  // act_sales: if sr != null { (ss.ss_quantity - sr.sr_return_quantity) * ss.ss_sales_price } else { ss.ss_quantity * ss.ss_sales_price }
  Move         r70, r57
  Move         r71, r67
  // select {
  MakeMap      r72, 2, r68
  // from ss in store_sales
  Append       r73, r3, r72
  Move         r3, r73
  // left join r in reason on sr != null && sr.sr_reason_sk == r.r_reason_sk
  Const        r74, 1
  Add          r39, r39, r74
  Jump         L8
L6:
  // where r == null || r.r_reason_desc == "ReasonA"
  Equal        r78, r77, r52
  Move         r79, r76
  JumpIfTrue   r79, L9
L4:
  Move         r79, r78
  JumpIfFalse  r79, L3
  // ss_customer_sk: ss.ss_customer_sk,
  Const        r80, "ss_customer_sk"
  Const        r5, "ss_customer_sk"
  Index        r81, r16, r5
  // act_sales: if sr != null { (ss.ss_quantity - sr.sr_return_quantity) * ss.ss_sales_price } else { ss.ss_quantity * ss.ss_sales_price }
  Const        r82, "act_sales"
  Const        r44, nil
  NotEqual     r83, r26, r44
  Const        r7, "ss_quantity"
  Index        r84, r16, r7
  Const        r8, "sr_return_quantity"
  Index        r85, r26, r8
  Sub          r86, r84, r85
L9:
  Const        r9, "ss_sales_price"
  Index        r87, r16, r9
  Mul          r88, r86, r87
  Index        r89, r16, r7
  Index        r90, r16, r9
  Mul          r91, r89, r90
  Select       92,83,88,91
  // ss_customer_sk: ss.ss_customer_sk,
  Move         r93, r80
  Move         r94, r81
  // act_sales: if sr != null { (ss.ss_quantity - sr.sr_return_quantity) * ss.ss_sales_price } else { ss.ss_quantity * ss.ss_sales_price }
  Move         r95, r82
  Move         r96, r92
  // select {
  MakeMap      r97, 2, r93
  // from ss in store_sales
  Append       r98, r3, r97
  Move         r3, r98
  // left join sr in store_returns on ss.ss_item_sk == sr.sr_item_sk && ss.ss_ticket_number == sr.sr_ticket_number
  Const        r74, 1
  Add          r23, r23, r74
  Jump         L10
L3:
  // act_sales: if sr != null { (ss.ss_quantity - sr.sr_return_quantity) * ss.ss_sales_price } else { ss.ss_quantity * ss.ss_sales_price }
  Const        r7, "ss_quantity"
  Const        r8, "sr_return_quantity"
  Const        r9, "ss_sales_price"
L1:
  // left join r in reason on sr != null && sr.sr_reason_sk == r.r_reason_sk
  Const        r13, 0
  Move         r102, r13
  LessInt      r103, r102, r101
  JumpIfFalse  r103, L11
  Index        r104, r100, r102
  Move         r42, r104
  Const        r105, false
  Const        r44, nil
  NotEqual     r106, r26, r44
  Const        r37, "sr_reason_sk"
  Index        r107, r26, r37
  Const        r38, "r_reason_sk"
  Index        r108, r42, r38
  Equal        r109, r107, r108
  Move         r110, r106
  JumpIfFalse  r110, L12
  Move         r110, r109
  JumpIfFalse  r110, L13
  Const        r105, true
L15:
  // where r == null || r.r_reason_desc == "ReasonA"
  Const        r44, nil
  Equal        r111, r42, r44
  Const        r4, "r_reason_desc"
  Index        r112, r42, r4
  Const        r52, "ReasonA"
  Equal        r113, r112, r52
  Move         r114, r111
  JumpIfTrue   r114, L14
  Move         r114, r113
  JumpIfFalse  r114, L13
  // ss_customer_sk: ss.ss_customer_sk,
  Const        r115, "ss_customer_sk"
  Const        r5, "ss_customer_sk"
  Index        r116, r16, r5
  // act_sales: if sr != null { (ss.ss_quantity - sr.sr_return_quantity) * ss.ss_sales_price } else { ss.ss_quantity * ss.ss_sales_price }
  Const        r117, "act_sales"
  Const        r44, nil
L12:
  NotEqual     r118, r26, r44
  Const        r7, "ss_quantity"
  Index        r119, r16, r7
  Const        r8, "sr_return_quantity"
  Index        r120, r26, r8
  Sub          r121, r119, r120
  Const        r9, "ss_sales_price"
  Index        r122, r16, r9
  Mul          r123, r121, r122
  Index        r124, r16, r7
  Index        r125, r16, r9
L14:
  Mul          r126, r124, r125
  Select       127,118,123,126
  // ss_customer_sk: ss.ss_customer_sk,
  Move         r128, r115
  Move         r129, r116
  // act_sales: if sr != null { (ss.ss_quantity - sr.sr_return_quantity) * ss.ss_sales_price } else { ss.ss_quantity * ss.ss_sales_price }
  Move         r130, r117
  Move         r131, r127
  // select {
  MakeMap      r132, 2, r128
  // from ss in store_sales
  Append       r133, r3, r132
  Move         r3, r133
  // left join r in reason on sr != null && sr.sr_reason_sk == r.r_reason_sk
  Const        r74, 1
  Add          r102, r102, r74
  Jump         L15
L13:
  // act_sales: if sr != null { (ss.ss_quantity - sr.sr_return_quantity) * ss.ss_sales_price } else { ss.ss_quantity * ss.ss_sales_price }
  Const        r141, "act_sales"
  Const        r44, nil
  NotEqual     r142, r26, r44
L11:
  Const        r7, "ss_quantity"
  Index        r143, r16, r7
  Const        r8, "sr_return_quantity"
  Index        r144, r26, r8
  Sub          r145, r143, r144
  Const        r9, "ss_sales_price"
  Index        r146, r16, r9
  Mul          r147, r145, r146
  Index        r148, r16, r7
  Index        r149, r16, r9
  Mul          r150, r148, r149
  Select       151,142,147,150
  // ss_customer_sk: ss.ss_customer_sk,
  Move         r152, r139
  Move         r153, r140
  // act_sales: if sr != null { (ss.ss_quantity - sr.sr_return_quantity) * ss.ss_sales_price } else { ss.ss_quantity * ss.ss_sales_price }
  Move         r154, r141
  Move         r155, r151
  // select {
  MakeMap      r156, 2, r152
  // from ss in store_sales
  Append       r157, r3, r156
  Move         r3, r157
  Const        r74, 1
  AddInt       r12, r12, r74
  Jump         L16
L0:
  // from x in t
  Const        r174, true
  Const        r159, "key"
  // group by x.ss_customer_sk into g
  Move         r175, r170
  // from x in t
  Const        r176, "items"
  Move         r177, r166
  Const        r178, "count"
  Const        r13, 0
  Move         r179, r173
  Move         r180, r174
  Move         r181, r159
  Move         r182, r175
  Move         r183, r176
  Move         r184, r177
  Move         r185, r178
L17:
  Move         r186, r13
  MakeMap      r187, 4, r179
  SetIndex     r164, r171, r187
  Append       r188, r165, r187
  Move         r165, r188
  Index        r189, r164, r171
  Index        r190, r189, r176
  Append       r191, r190, r168
  SetIndex     r189, r176, r191
  Index        r192, r189, r178
  Const        r74, 1
  AddInt       r193, r192, r74
  SetIndex     r189, r178, r193
  AddInt       r163, r163, r74
  Jump         L17
