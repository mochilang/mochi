func main (regs=265)
  // let store_sales = []
  Const        r0, []
  // let customer_demographics = []
  Const        r1, []
  // let date_dim = []
  Const        r2, []
  // let item = []
  Const        r3, []
  // let promotion = []
  Const        r4, []
  // from ss in store_sales
  Const        r5, []
  // group by { i_item_id: i.i_item_id } into g
  Const        r6, "i_item_id"
  Const        r7, "i_item_id"
  // where cd.cd_gender == "M" &&
  Const        r8, "cd_gender"
  // cd.cd_marital_status == "S" &&
  Const        r9, "cd_marital_status"
  // cd.cd_education_status == "College" &&
  Const        r10, "cd_education_status"
  // (p.p_channel_email == "N" || p.p_channel_event == "N") &&
  Const        r11, "p_channel_email"
  Const        r12, "p_channel_event"
  // d.d_year == 1998
  Const        r13, "d_year"
  // i_item_id: g.key.i_item_id,
  Const        r14, "i_item_id"
  Const        r15, "key"
  Const        r16, "i_item_id"
  // agg1: avg(from x in g select x.ss.ss_quantity),
  Const        r17, "agg1"
  Const        r18, "ss"
  Const        r19, "ss_quantity"
  // agg2: avg(from x in g select x.ss.ss_list_price),
  Const        r20, "agg2"
  Const        r21, "ss"
  Const        r22, "ss_list_price"
  // agg3: avg(from x in g select x.ss.ss_coupon_amt),
  Const        r23, "agg3"
  Const        r24, "ss"
  Const        r25, "ss_coupon_amt"
  // agg4: avg(from x in g select x.ss.ss_sales_price)
  Const        r26, "agg4"
  Const        r27, "ss"
  Const        r28, "ss_sales_price"
  // sort by g.key.i_item_id
  Const        r29, "key"
  Const        r30, "i_item_id"
  // from ss in store_sales
  MakeMap      r31, 0, r0
  Const        r32, []
  IterPrep     r34, r0
  Len          r35, r34
  Const        r36, 0
L13:
  LessInt      r37, r36, r35
  JumpIfFalse  r37, L0
  Index        r39, r34, r36
  // join cd in customer_demographics on ss.ss_cdemo_sk == cd.cd_demo_sk
  IterPrep     r40, r1
  Len          r41, r40
  Const        r42, 0
L12:
  LessInt      r43, r42, r41
  JumpIfFalse  r43, L1
  Index        r45, r40, r42
  Const        r46, "ss_cdemo_sk"
  Index        r47, r39, r46
  Const        r48, "cd_demo_sk"
  Index        r49, r45, r48
  Equal        r50, r47, r49
  JumpIfFalse  r50, L2
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  IterPrep     r51, r2
  Len          r52, r51
  Const        r53, 0
L11:
  LessInt      r54, r53, r52
  JumpIfFalse  r54, L2
  Index        r56, r51, r53
  Const        r57, "ss_sold_date_sk"
  Index        r58, r39, r57
  Const        r59, "d_date_sk"
  Index        r60, r56, r59
  Equal        r61, r58, r60
  JumpIfFalse  r61, L3
  // join i in item on ss.ss_item_sk == i.i_item_sk
  IterPrep     r62, r3
  Len          r63, r62
  Const        r64, 0
L10:
  LessInt      r65, r64, r63
  JumpIfFalse  r65, L3
  Index        r67, r62, r64
  Const        r68, "ss_item_sk"
  Index        r69, r39, r68
  Const        r70, "i_item_sk"
  Index        r71, r67, r70
  Equal        r72, r69, r71
  JumpIfFalse  r72, L4
  // join p in promotion on ss.ss_promo_sk == p.p_promo_sk
  IterPrep     r73, r4
  Len          r74, r73
  Const        r75, 0
L9:
  LessInt      r76, r75, r74
  JumpIfFalse  r76, L4
  Index        r78, r73, r75
  Const        r79, "ss_promo_sk"
  Index        r80, r39, r79
  Const        r81, "p_promo_sk"
  Index        r82, r78, r81
  Equal        r83, r80, r82
  JumpIfFalse  r83, L5
  // where cd.cd_gender == "M" &&
  Const        r84, "cd_gender"
  Index        r85, r45, r84
  Const        r86, "M"
  Equal        r87, r85, r86
  // cd.cd_marital_status == "S" &&
  Const        r88, "cd_marital_status"
  Index        r89, r45, r88
  Const        r90, "S"
  Equal        r91, r89, r90
  // cd.cd_education_status == "College" &&
  Const        r92, "cd_education_status"
  Index        r93, r45, r92
  Const        r94, "College"
  Equal        r95, r93, r94
  // d.d_year == 1998
  Const        r96, "d_year"
  Index        r97, r56, r96
  Const        r98, 1998
  Equal        r99, r97, r98
  // where cd.cd_gender == "M" &&
  Move         r100, r87
  JumpIfFalse  r100, L6
  Move         r100, r91
  // cd.cd_marital_status == "S" &&
  JumpIfFalse  r100, L6
  Move         r100, r95
  // cd.cd_education_status == "College" &&
  JumpIfFalse  r100, L6
  // (p.p_channel_email == "N" || p.p_channel_event == "N") &&
  Const        r101, "p_channel_email"
  Index        r102, r78, r101
  Const        r103, "N"
  Equal        r104, r102, r103
  Const        r105, "p_channel_event"
  Index        r106, r78, r105
  Const        r107, "N"
  Equal        r108, r106, r107
  Move         r109, r104
  JumpIfTrue   r109, L7
L7:
  // cd.cd_education_status == "College" &&
  Move         r100, r108
  // (p.p_channel_email == "N" || p.p_channel_event == "N") &&
  JumpIfFalse  r100, L6
  Move         r100, r99
L6:
  // where cd.cd_gender == "M" &&
  JumpIfFalse  r100, L5
  // from ss in store_sales
  Const        r110, "ss"
  Move         r111, r39
  Const        r112, "cd"
  Move         r113, r45
  Const        r114, "d"
  Move         r115, r56
  Const        r116, "i"
  Move         r117, r67
  Const        r118, "p"
  Move         r119, r78
  MakeMap      r120, 5, r110
  // group by { i_item_id: i.i_item_id } into g
  Const        r121, "i_item_id"
  Const        r122, "i_item_id"
  Index        r123, r67, r122
  Move         r124, r121
  Move         r125, r123
  MakeMap      r126, 1, r124
  Str          r127, r126
  In           r128, r127, r31
  JumpIfTrue   r128, L8
  // from ss in store_sales
  Const        r129, []
  Const        r130, "__group__"
  Const        r131, true
  Const        r132, "key"
  // group by { i_item_id: i.i_item_id } into g
  Move         r133, r126
  // from ss in store_sales
  Const        r134, "items"
  Move         r135, r129
  Const        r136, "count"
  Const        r137, 0
  Move         r138, r130
  Move         r139, r131
  Move         r140, r132
  Move         r141, r133
  Move         r142, r134
  Move         r143, r135
  Move         r144, r136
  Move         r145, r137
  MakeMap      r146, 4, r138
  SetIndex     r31, r127, r146
  Append       r32, r32, r146
L8:
  Const        r148, "items"
  Index        r149, r31, r127
  Index        r150, r149, r148
  Append       r151, r150, r120
  SetIndex     r149, r148, r151
  Const        r152, "count"
  Index        r153, r149, r152
  Const        r154, 1
  AddInt       r155, r153, r154
  SetIndex     r149, r152, r155
L5:
  // join p in promotion on ss.ss_promo_sk == p.p_promo_sk
  Const        r156, 1
  AddInt       r75, r75, r156
  Jump         L9
L4:
  // join i in item on ss.ss_item_sk == i.i_item_sk
  Const        r157, 1
  AddInt       r64, r64, r157
  Jump         L10
L3:
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  Const        r158, 1
  AddInt       r53, r53, r158
  Jump         L11
L2:
  // join cd in customer_demographics on ss.ss_cdemo_sk == cd.cd_demo_sk
  Const        r159, 1
  AddInt       r42, r42, r159
  Jump         L12
L1:
  // from ss in store_sales
  Const        r160, 1
  AddInt       r36, r36, r160
  Jump         L13
L0:
  Const        r161, 0
  Len          r163, r32
L23:
  LessInt      r164, r161, r163
  JumpIfFalse  r164, L14
  Index        r166, r32, r161
  // i_item_id: g.key.i_item_id,
  Const        r167, "i_item_id"
  Const        r168, "key"
  Index        r169, r166, r168
  Const        r170, "i_item_id"
  Index        r171, r169, r170
  // agg1: avg(from x in g select x.ss.ss_quantity),
  Const        r172, "agg1"
  Const        r173, []
  Const        r174, "ss"
  Const        r175, "ss_quantity"
  IterPrep     r176, r166
  Len          r177, r176
  Const        r178, 0
L16:
  LessInt      r180, r178, r177
  JumpIfFalse  r180, L15
  Index        r182, r176, r178
  Const        r183, "ss"
  Index        r184, r182, r183
  Const        r185, "ss_quantity"
  Index        r186, r184, r185
  Append       r173, r173, r186
  Const        r188, 1
  AddInt       r178, r178, r188
  Jump         L16
L15:
  Avg          r189, r173
  // agg2: avg(from x in g select x.ss.ss_list_price),
  Const        r190, "agg2"
  Const        r191, []
  Const        r192, "ss"
  Const        r193, "ss_list_price"
  IterPrep     r194, r166
  Len          r195, r194
  Const        r196, 0
L18:
  LessInt      r198, r196, r195
  JumpIfFalse  r198, L17
  Index        r182, r194, r196
  Const        r200, "ss"
  Index        r201, r182, r200
  Const        r202, "ss_list_price"
  Index        r203, r201, r202
  Append       r191, r191, r203
  Const        r205, 1
  AddInt       r196, r196, r205
  Jump         L18
L17:
  Avg          r206, r191
  // agg3: avg(from x in g select x.ss.ss_coupon_amt),
  Const        r207, "agg3"
  Const        r208, []
  Const        r209, "ss"
  Const        r210, "ss_coupon_amt"
  IterPrep     r211, r166
  Len          r212, r211
  Const        r213, 0
L20:
  LessInt      r215, r213, r212
  JumpIfFalse  r215, L19
  Index        r182, r211, r213
  Const        r217, "ss"
  Index        r218, r182, r217
  Const        r219, "ss_coupon_amt"
  Index        r220, r218, r219
  Append       r208, r208, r220
  Const        r222, 1
  AddInt       r213, r213, r222
  Jump         L20
L19:
  Avg          r223, r208
  // agg4: avg(from x in g select x.ss.ss_sales_price)
  Const        r224, "agg4"
  Const        r225, []
  Const        r226, "ss"
  Const        r227, "ss_sales_price"
  IterPrep     r228, r166
  Len          r229, r228
  Const        r230, 0
L22:
  LessInt      r232, r230, r229
  JumpIfFalse  r232, L21
  Index        r182, r228, r230
  Const        r234, "ss"
  Index        r235, r182, r234
  Const        r236, "ss_sales_price"
  Index        r237, r235, r236
  Append       r225, r225, r237
  Const        r239, 1
  AddInt       r230, r230, r239
  Jump         L22
L21:
  Avg          r240, r225
  // i_item_id: g.key.i_item_id,
  Move         r241, r167
  Move         r242, r171
  // agg1: avg(from x in g select x.ss.ss_quantity),
  Move         r243, r172
  Move         r244, r189
  // agg2: avg(from x in g select x.ss.ss_list_price),
  Move         r245, r190
  Move         r246, r206
  // agg3: avg(from x in g select x.ss.ss_coupon_amt),
  Move         r247, r207
  Move         r248, r223
  // agg4: avg(from x in g select x.ss.ss_sales_price)
  Move         r249, r224
  Move         r250, r240
  // select {
  MakeMap      r251, 5, r241
  // sort by g.key.i_item_id
  Const        r252, "key"
  Index        r253, r166, r252
  Const        r254, "i_item_id"
  Index        r256, r253, r254
  // from ss in store_sales
  Move         r257, r251
  MakeList     r258, 2, r256
  Append       r5, r5, r258
  Const        r260, 1
  AddInt       r161, r161, r260
  Jump         L23
L14:
  // sort by g.key.i_item_id
  Sort         r5, r5
  // json(result)
  JSON         r5
  // expect len(result) == 0
  Len          r262, r5
  Const        r263, 0
  EqualInt     r264, r262, r263
  Expect       r264
  Return       r0
