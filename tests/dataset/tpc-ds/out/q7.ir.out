func main (regs=207)
  // let store_sales = []
  Const        r0, []
  // from ss in store_sales
  Const        r1, []
  // group by { i_item_id: i.i_item_id } into g
  Const        r2, "i_item_id"
  // where cd.cd_gender == "M" &&
  Const        r3, "cd_gender"
  // cd.cd_marital_status == "S" &&
  Const        r4, "cd_marital_status"
  // cd.cd_education_status == "College" &&
  Const        r5, "cd_education_status"
  // (p.p_channel_email == "N" || p.p_channel_event == "N") &&
  Const        r6, "p_channel_email"
  Const        r7, "p_channel_event"
  // d.d_year == 1998
  Const        r8, "d_year"
  // i_item_id: g.key.i_item_id,
  Const        r9, "key"
  // agg1: avg(from x in g select x.ss.ss_quantity),
  Const        r10, "agg1"
  Const        r11, "ss"
  Const        r12, "ss_quantity"
  // agg2: avg(from x in g select x.ss.ss_list_price),
  Const        r13, "agg2"
  Const        r14, "ss_list_price"
  // agg3: avg(from x in g select x.ss.ss_coupon_amt),
  Const        r15, "agg3"
  Const        r16, "ss_coupon_amt"
  // agg4: avg(from x in g select x.ss.ss_sales_price)
  Const        r17, "agg4"
  Const        r18, "ss_sales_price"
  // from ss in store_sales
  MakeMap      r19, 0, r0
  Const        r20, []
  IterPrep     r22, r0
  Len          r23, r22
  Const        r24, 0
L13:
  LessInt      r25, r24, r23
  JumpIfFalse  r25, L0
  Index        r27, r22, r24
  // join cd in customer_demographics on ss.ss_cdemo_sk == cd.cd_demo_sk
  IterPrep     r28, r0
  Len          r29, r28
  Const        r30, 0
L12:
  LessInt      r31, r30, r29
  JumpIfFalse  r31, L1
  Index        r33, r28, r30
  Const        r34, "ss_cdemo_sk"
  Index        r35, r27, r34
  Const        r36, "cd_demo_sk"
  Index        r37, r33, r36
  Equal        r38, r35, r37
  JumpIfFalse  r38, L2
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  IterPrep     r39, r0
  Len          r40, r39
  Const        r41, 0
L11:
  LessInt      r42, r41, r40
  JumpIfFalse  r42, L2
  Index        r44, r39, r41
  Const        r45, "ss_sold_date_sk"
  Index        r46, r27, r45
  Const        r47, "d_date_sk"
  Index        r48, r44, r47
  Equal        r49, r46, r48
  JumpIfFalse  r49, L3
  // join i in item on ss.ss_item_sk == i.i_item_sk
  IterPrep     r50, r0
  Len          r51, r50
  Const        r52, 0
L10:
  LessInt      r53, r52, r51
  JumpIfFalse  r53, L3
  Index        r55, r50, r52
  Const        r56, "ss_item_sk"
  Index        r57, r27, r56
  Const        r58, "i_item_sk"
  Index        r59, r55, r58
  Equal        r60, r57, r59
  JumpIfFalse  r60, L4
  // join p in promotion on ss.ss_promo_sk == p.p_promo_sk
  IterPrep     r61, r0
  Len          r62, r61
  Const        r63, 0
L9:
  LessInt      r64, r63, r62
  JumpIfFalse  r64, L4
  Index        r66, r61, r63
  Const        r67, "ss_promo_sk"
  Index        r68, r27, r67
  Const        r69, "p_promo_sk"
  Index        r70, r66, r69
  Equal        r71, r68, r70
  JumpIfFalse  r71, L5
  // where cd.cd_gender == "M" &&
  Index        r72, r33, r3
  Const        r73, "M"
  Equal        r74, r72, r73
  // cd.cd_marital_status == "S" &&
  Index        r75, r33, r4
  Const        r76, "S"
  Equal        r77, r75, r76
  // cd.cd_education_status == "College" &&
  Index        r78, r33, r5
  Const        r79, "College"
  Equal        r80, r78, r79
  // d.d_year == 1998
  Index        r81, r44, r8
  Const        r82, 1998
  Equal        r83, r81, r82
  // where cd.cd_gender == "M" &&
  JumpIfFalse  r74, L6
  Move         r74, r77
  // cd.cd_marital_status == "S" &&
  JumpIfFalse  r74, L6
  Move         r74, r80
  // cd.cd_education_status == "College" &&
  JumpIfFalse  r74, L6
  // (p.p_channel_email == "N" || p.p_channel_event == "N") &&
  Index        r84, r66, r6
  Const        r85, "N"
  Equal        r86, r84, r85
  Index        r87, r66, r7
  Equal        r88, r87, r85
  JumpIfTrue   r86, L7
L7:
  // cd.cd_education_status == "College" &&
  Move         r74, r88
  // (p.p_channel_email == "N" || p.p_channel_event == "N") &&
  JumpIfFalse  r74, L6
  Move         r74, r83
L6:
  // where cd.cd_gender == "M" &&
  JumpIfFalse  r74, L5
  // from ss in store_sales
  Move         r89, r27
  Const        r90, "cd"
  Move         r91, r33
  Const        r92, "d"
  Move         r93, r44
  Const        r94, "i"
  Move         r95, r55
  Const        r96, "p"
  Move         r97, r66
  MakeMap      r98, 5, r11
  // group by { i_item_id: i.i_item_id } into g
  Const        r99, "i_item_id"
  Index        r100, r55, r2
  Move         r101, r99
  Move         r102, r100
  MakeMap      r103, 1, r101
  Str          r104, r103
  In           r105, r104, r19
  JumpIfTrue   r105, L8
  // from ss in store_sales
  Const        r106, []
  Const        r107, "__group__"
  Const        r108, true
  Const        r109, "key"
  // group by { i_item_id: i.i_item_id } into g
  Move         r110, r103
  // from ss in store_sales
  Const        r111, "items"
  Move         r112, r106
  Const        r113, "count"
  Const        r114, 0
  Move         r115, r107
  Move         r116, r108
  Move         r117, r109
  Move         r118, r110
  Move         r119, r111
  Move         r120, r112
  Move         r121, r113
  Move         r122, r114
  MakeMap      r123, 4, r115
  SetIndex     r19, r104, r123
  Append       r20, r20, r123
L8:
  Const        r125, "items"
  Index        r126, r19, r104
  Index        r127, r126, r125
  Append       r128, r127, r98
  SetIndex     r126, r125, r128
  Const        r129, "count"
  Index        r130, r126, r129
  Const        r131, 1
  AddInt       r132, r130, r131
  SetIndex     r126, r129, r132
L5:
  // join p in promotion on ss.ss_promo_sk == p.p_promo_sk
  AddInt       r63, r63, r131
  Jump         L9
L4:
  // join i in item on ss.ss_item_sk == i.i_item_sk
  AddInt       r52, r52, r131
  Jump         L10
L3:
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  AddInt       r41, r41, r131
  Jump         L11
L2:
  // join cd in customer_demographics on ss.ss_cdemo_sk == cd.cd_demo_sk
  AddInt       r30, r30, r131
  Jump         L12
L1:
  // from ss in store_sales
  AddInt       r24, r24, r131
  Jump         L13
L0:
  Const        r134, 0
  Move         r133, r134
  Len          r135, r20
L23:
  LessInt      r136, r133, r135
  JumpIfFalse  r136, L14
  Index        r138, r20, r133
  // i_item_id: g.key.i_item_id,
  Const        r139, "i_item_id"
  Index        r140, r138, r9
  Index        r141, r140, r2
  // agg1: avg(from x in g select x.ss.ss_quantity),
  Const        r142, "agg1"
  Const        r143, []
  IterPrep     r144, r138
  Len          r145, r144
  Move         r146, r134
L16:
  LessInt      r147, r146, r145
  JumpIfFalse  r147, L15
  Index        r149, r144, r146
  Index        r150, r149, r11
  Index        r151, r150, r12
  Append       r143, r143, r151
  AddInt       r146, r146, r131
  Jump         L16
L15:
  Avg          r153, r143
  // agg2: avg(from x in g select x.ss.ss_list_price),
  Const        r154, "agg2"
  Const        r155, []
  IterPrep     r156, r138
  Len          r157, r156
  Move         r158, r134
L18:
  LessInt      r159, r158, r157
  JumpIfFalse  r159, L17
  Index        r149, r156, r158
  Index        r161, r149, r11
  Index        r162, r161, r14
  Append       r155, r155, r162
  AddInt       r158, r158, r131
  Jump         L18
L17:
  Avg          r164, r155
  // agg3: avg(from x in g select x.ss.ss_coupon_amt),
  Const        r165, "agg3"
  Const        r166, []
  IterPrep     r167, r138
  Len          r168, r167
  Move         r169, r134
L20:
  LessInt      r170, r169, r168
  JumpIfFalse  r170, L19
  Index        r149, r167, r169
  Index        r172, r149, r11
  Index        r173, r172, r16
  Append       r166, r166, r173
  AddInt       r169, r169, r131
  Jump         L20
L19:
  Avg          r175, r166
  // agg4: avg(from x in g select x.ss.ss_sales_price)
  Const        r176, "agg4"
  Const        r177, []
  IterPrep     r178, r138
  Len          r179, r178
  Move         r180, r134
L22:
  LessInt      r181, r180, r179
  JumpIfFalse  r181, L21
  Index        r149, r178, r180
  Index        r183, r149, r11
  Index        r184, r183, r18
  Append       r177, r177, r184
  AddInt       r180, r180, r131
  Jump         L22
L21:
  Avg          r186, r177
  // i_item_id: g.key.i_item_id,
  Move         r187, r139
  Move         r188, r141
  // agg1: avg(from x in g select x.ss.ss_quantity),
  Move         r189, r142
  Move         r190, r153
  // agg2: avg(from x in g select x.ss.ss_list_price),
  Move         r191, r154
  Move         r192, r164
  // agg3: avg(from x in g select x.ss.ss_coupon_amt),
  Move         r193, r165
  Move         r194, r175
  // agg4: avg(from x in g select x.ss.ss_sales_price)
  Move         r195, r176
  Move         r196, r186
  // select {
  MakeMap      r197, 5, r187
  // sort by g.key.i_item_id
  Index        r198, r138, r9
  Index        r200, r198, r2
  // from ss in store_sales
  Move         r201, r197
  MakeList     r202, 2, r200
  Append       r1, r1, r202
  AddInt       r133, r133, r131
  Jump         L23
L14:
  // sort by g.key.i_item_id
  Sort         r1, r1
  // json(result)
  JSON         r1
  // expect len(result) == 0
  Len          r205, r1
  EqualInt     r206, r205, r134
  Expect       r206
  Return       r0
