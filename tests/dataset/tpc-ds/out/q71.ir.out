func main (regs=299)
  // let item = [
  Const        r0, [{"i_brand": "BrandA", "i_brand_id": 10, "i_item_sk": 1, "i_manager_id": 1}, {"i_brand": "BrandB", "i_brand_id": 20, "i_item_sk": 2, "i_manager_id": 1}]
  // let time_dim = [
  Const        r1, [{"t_hour": 8, "t_meal_time": "breakfast", "t_minute": 30, "t_time_sk": 1}, {"t_hour": 18, "t_meal_time": "dinner", "t_minute": 0, "t_time_sk": 2}, {"t_hour": 12, "t_meal_time": "lunch", "t_minute": 0, "t_time_sk": 3}]
  // let date_dim = [
  Const        r2, [{"d_date_sk": 1, "d_moy": 12, "d_year": 1998}]
  // let web_sales = [
  Const        r3, [{"ws_ext_sales_price": 100, "ws_item_sk": 1, "ws_sold_date_sk": 1, "ws_sold_time_sk": 1}]
  // let catalog_sales = [
  Const        r4, [{"cs_ext_sales_price": 200, "cs_item_sk": 1, "cs_sold_date_sk": 1, "cs_sold_time_sk": 2}]
  // let store_sales = [
  Const        r5, [{"ss_ext_sales_price": 150, "ss_item_sk": 2, "ss_sold_date_sk": 1, "ss_sold_time_sk": 1}]
  // let month = 12
  Const        r6, 12
  // let year = 1998
  Const        r7, 1998
  // from ws in web_sales join d in date_dim on d.d_date_sk == ws.ws_sold_date_sk where d.d_moy == month && d.d_year == year select {ext_price: ws.ws_ext_sales_price, item_sk: ws.ws_item_sk, time_sk: ws.ws_sold_time_sk},
  Const        r8, []
  IterPrep     r9, r3
  Len          r10, r9
  IterPrep     r11, r2
  Len          r12, r11
  Const        r13, "d_date_sk"
  Const        r14, "ws_sold_date_sk"
  Const        r15, "d_moy"
  Const        r16, "d_year"
  Const        r17, "ext_price"
  Const        r18, "ws_ext_sales_price"
  Const        r19, "item_sk"
  Const        r20, "ws_item_sk"
  Const        r21, "time_sk"
  Const        r22, "ws_sold_time_sk"
  Const        r23, 0
L5:
  LessInt      r24, r23, r10
  JumpIfFalse  r24, L0
  Index        r25, r9, r23
  Move         r26, r25
  Const        r27, 0
L4:
  LessInt      r28, r27, r12
  JumpIfFalse  r28, L1
  Index        r29, r11, r27
  Move         r30, r29
  Index        r31, r30, r13
  Index        r32, r26, r14
  Equal        r33, r31, r32
  JumpIfFalse  r33, L2
  Index        r34, r30, r15
  Equal        r35, r34, r6
  Index        r36, r30, r16
  Equal        r37, r36, r7
  Move         r38, r35
  JumpIfFalse  r38, L3
  Move         r38, r37
L3:
  JumpIfFalse  r38, L2
  Const        r39, "ext_price"
  Index        r40, r26, r18
  Const        r41, "item_sk"
  Index        r42, r26, r20
  Const        r43, "time_sk"
  Index        r44, r26, r22
  Move         r45, r39
  Move         r46, r40
  Move         r47, r41
  Move         r48, r42
  Move         r49, r43
  Move         r50, r44
  MakeMap      r51, 3, r45
  Append       r52, r8, r51
  Move         r8, r52
L2:
  Const        r53, 1
  AddInt       r27, r27, r53
  Jump         L4
L1:
  AddInt       r23, r23, r53
  Jump         L5
L0:
  // from cs in catalog_sales join d in date_dim on d.d_date_sk == cs.cs_sold_date_sk where d.d_moy == month && d.d_year == year select {ext_price: cs.cs_ext_sales_price, item_sk: cs.cs_item_sk, time_sk: cs.cs_sold_time_sk},
  Const        r54, []
  IterPrep     r55, r4
  Len          r56, r55
  IterPrep     r57, r2
  Len          r58, r57
  Const        r59, "cs_sold_date_sk"
  Const        r60, "cs_ext_sales_price"
  Const        r61, "cs_item_sk"
  Const        r62, "cs_sold_time_sk"
  Const        r63, 0
L11:
  LessInt      r64, r63, r56
  JumpIfFalse  r64, L6
  Index        r65, r55, r63
  Move         r66, r65
  Const        r67, 0
L10:
  LessInt      r68, r67, r58
  JumpIfFalse  r68, L7
  Index        r69, r57, r67
  Move         r30, r69
  Index        r70, r30, r13
  Index        r71, r66, r59
  Equal        r72, r70, r71
  JumpIfFalse  r72, L8
  Index        r73, r30, r15
  Equal        r74, r73, r6
  Index        r75, r30, r16
  Equal        r76, r75, r7
  Move         r77, r74
  JumpIfFalse  r77, L9
  Move         r77, r76
L9:
  JumpIfFalse  r77, L8
  Const        r78, "ext_price"
  Index        r79, r66, r60
  Const        r80, "item_sk"
  Index        r81, r66, r61
  Const        r82, "time_sk"
  Index        r83, r66, r62
  Move         r84, r78
  Move         r85, r79
  Move         r86, r80
  Move         r87, r81
  Move         r88, r82
  Move         r89, r83
  MakeMap      r90, 3, r84
  Append       r91, r54, r90
  Move         r54, r91
L8:
  AddInt       r67, r67, r53
  Jump         L10
L7:
  AddInt       r63, r63, r53
  Jump         L11
L6:
  // let union_sales = concat(
  UnionAll     r92, r8, r54
  // from ss in store_sales join d in date_dim on d.d_date_sk == ss.ss_sold_date_sk where d.d_moy == month && d.d_year == year select {ext_price: ss.ss_ext_sales_price, item_sk: ss.ss_item_sk, time_sk: ss.ss_sold_time_sk}
  Const        r93, []
  IterPrep     r94, r5
  Len          r95, r94
  IterPrep     r96, r2
  Len          r97, r96
  Const        r98, "ss_sold_date_sk"
  Const        r99, "ss_ext_sales_price"
  Const        r100, "ss_item_sk"
  Const        r101, "ss_sold_time_sk"
  Const        r102, 0
L17:
  LessInt      r103, r102, r95
  JumpIfFalse  r103, L12
  Index        r104, r94, r102
  Move         r105, r104
  Const        r106, 0
L16:
  LessInt      r107, r106, r97
  JumpIfFalse  r107, L13
  Index        r108, r96, r106
  Move         r30, r108
  Index        r109, r30, r13
  Index        r110, r105, r98
  Equal        r111, r109, r110
  JumpIfFalse  r111, L14
  Index        r112, r30, r15
  Equal        r113, r112, r6
  Index        r114, r30, r16
  Equal        r115, r114, r7
  Move         r116, r113
  JumpIfFalse  r116, L15
  Move         r116, r115
L15:
  JumpIfFalse  r116, L14
  Const        r117, "ext_price"
  Index        r118, r105, r99
  Const        r119, "item_sk"
  Index        r120, r105, r100
  Const        r121, "time_sk"
  Index        r122, r105, r101
  Move         r123, r117
  Move         r124, r118
  Move         r125, r119
  Move         r126, r120
  Move         r127, r121
  Move         r128, r122
  MakeMap      r129, 3, r123
  Append       r130, r93, r129
  Move         r93, r130
L14:
  AddInt       r106, r106, r53
  Jump         L16
L13:
  AddInt       r102, r102, r53
  Jump         L17
L12:
  // let union_sales = concat(
  UnionAll     r131, r92, r93
  // from i in item
  Const        r132, []
  // group by { brand_id: i.i_brand_id, brand: i.i_brand, t_hour: t.t_hour, t_minute: t.t_minute } into g
  Const        r133, "brand_id"
  Const        r134, "i_brand_id"
  Const        r135, "brand"
  Const        r136, "i_brand"
  Const        r137, "t_hour"
  Const        r138, "t_minute"
  // where i.i_manager_id == 1 && (t.t_meal_time == "breakfast" || t.t_meal_time == "dinner")
  Const        r139, "i_manager_id"
  Const        r140, "t_meal_time"
  // i_brand_id: g.key.brand_id,
  Const        r141, "key"
  // ext_price: sum(from x in g select x.s.ext_price)
  Const        r142, "s"
  // from i in item
  MakeMap      r143, 0, r0
  Const        r145, []
  Move         r144, r145
  IterPrep     r146, r0
  Len          r147, r146
  Const        r148, 0
L27:
  LessInt      r149, r148, r147
  JumpIfFalse  r149, L18
  Index        r150, r146, r148
  Move         r151, r150
  // join s in union_sales on s.item_sk == i.i_item_sk
  IterPrep     r152, r131
  Len          r153, r152
  Const        r154, 0
L26:
  LessInt      r155, r154, r153
  JumpIfFalse  r155, L19
  Index        r156, r152, r154
  Move         r157, r156
  Index        r158, r157, r19
  Const        r159, "i_item_sk"
  Index        r160, r151, r159
  Equal        r161, r158, r160
  JumpIfFalse  r161, L20
  // join t in time_dim on t.t_time_sk == s.time_sk
  IterPrep     r162, r1
  Len          r163, r162
  Const        r164, 0
L25:
  LessInt      r165, r164, r163
  JumpIfFalse  r165, L20
  Index        r166, r162, r164
  Move         r167, r166
  Const        r168, "t_time_sk"
  Index        r169, r167, r168
  Index        r170, r157, r21
  Equal        r171, r169, r170
  JumpIfFalse  r171, L21
  // where i.i_manager_id == 1 && (t.t_meal_time == "breakfast" || t.t_meal_time == "dinner")
  Index        r172, r151, r139
  Equal        r173, r172, r53
  Index        r174, r167, r140
  Const        r175, "breakfast"
  Equal        r176, r174, r175
  Index        r177, r167, r140
  Const        r178, "dinner"
  Equal        r179, r177, r178
  Move         r180, r176
  JumpIfTrue   r180, L22
  Move         r180, r179
L22:
  Move         r181, r173
  JumpIfFalse  r181, L23
  Move         r181, r180
L23:
  JumpIfFalse  r181, L21
  // from i in item
  Const        r182, "i"
  Move         r183, r151
  Move         r184, r157
  Const        r185, "t"
  Move         r186, r167
  Move         r187, r182
  Move         r188, r183
  Move         r189, r142
  Move         r190, r184
  Move         r191, r185
  Move         r192, r186
  MakeMap      r193, 3, r187
  // group by { brand_id: i.i_brand_id, brand: i.i_brand, t_hour: t.t_hour, t_minute: t.t_minute } into g
  Const        r194, "brand_id"
  Index        r195, r151, r134
  Const        r196, "brand"
  Index        r197, r151, r136
  Const        r198, "t_hour"
  Index        r199, r167, r137
  Const        r200, "t_minute"
  Index        r201, r167, r138
  Move         r202, r194
  Move         r203, r195
  Move         r204, r196
  Move         r205, r197
  Move         r206, r198
  Move         r207, r199
  Move         r208, r200
  Move         r209, r201
  MakeMap      r210, 4, r202
  Str          r211, r210
  In           r212, r211, r143
  JumpIfTrue   r212, L24
  // from i in item
  Const        r213, []
  Const        r214, "__group__"
  Const        r215, true
  // group by { brand_id: i.i_brand_id, brand: i.i_brand, t_hour: t.t_hour, t_minute: t.t_minute } into g
  Move         r216, r210
  // from i in item
  Const        r217, "items"
  Move         r218, r213
  Const        r219, "count"
  Const        r220, 0
  Move         r221, r214
  Move         r222, r215
  Move         r223, r141
  Move         r224, r216
  Move         r225, r217
  Move         r226, r218
  Move         r227, r219
  Move         r228, r220
  MakeMap      r229, 4, r221
  SetIndex     r143, r211, r229
  Append       r230, r144, r229
  Move         r144, r230
L24:
  Index        r231, r143, r211
  Index        r232, r231, r217
  Append       r233, r232, r193
  SetIndex     r231, r217, r233
  Index        r234, r231, r219
  AddInt       r235, r234, r53
  SetIndex     r231, r219, r235
L21:
  // join t in time_dim on t.t_time_sk == s.time_sk
  AddInt       r164, r164, r53
  Jump         L25
L20:
  // join s in union_sales on s.item_sk == i.i_item_sk
  AddInt       r154, r154, r53
  Jump         L26
L19:
  // from i in item
  AddInt       r148, r148, r53
  Jump         L27
L18:
  Move         r236, r220
  Len          r237, r144
L33:
  LessInt      r238, r236, r237
  JumpIfFalse  r238, L28
  Index        r239, r144, r236
  Move         r240, r239
  // i_brand_id: g.key.brand_id,
  Const        r241, "i_brand_id"
  Index        r242, r240, r141
  Index        r243, r242, r133
  // i_brand: g.key.brand,
  Const        r244, "i_brand"
  Index        r245, r240, r141
  Index        r246, r245, r135
  // t_hour: g.key.t_hour,
  Const        r247, "t_hour"
  Index        r248, r240, r141
  Index        r249, r248, r137
  // t_minute: g.key.t_minute,
  Const        r250, "t_minute"
  Index        r251, r240, r141
  Index        r252, r251, r138
  // ext_price: sum(from x in g select x.s.ext_price)
  Const        r253, "ext_price"
  Const        r254, []
  IterPrep     r255, r240
  Len          r256, r255
  Move         r257, r220
L30:
  LessInt      r258, r257, r256
  JumpIfFalse  r258, L29
  Index        r259, r255, r257
  Move         r260, r259
  Index        r261, r260, r142
  Index        r262, r261, r17
  Append       r263, r254, r262
  Move         r254, r263
  AddInt       r257, r257, r53
  Jump         L30
L29:
  Sum          r264, r254
  // i_brand_id: g.key.brand_id,
  Move         r265, r241
  Move         r266, r243
  // i_brand: g.key.brand,
  Move         r267, r244
  Move         r268, r246
  // t_hour: g.key.t_hour,
  Move         r269, r247
  Move         r270, r249
  // t_minute: g.key.t_minute,
  Move         r271, r250
  Move         r272, r252
  // ext_price: sum(from x in g select x.s.ext_price)
  Move         r273, r253
  Move         r274, r264
  // select {
  MakeMap      r275, 5, r265
  // sort by [-sum(from x in g select x.s.ext_price), g.key.brand_id]
  Const        r276, []
  IterPrep     r277, r240
  Len          r278, r277
  Move         r279, r220
L32:
  LessInt      r280, r279, r278
  JumpIfFalse  r280, L31
  Index        r281, r277, r279
  Move         r260, r281
  Index        r282, r260, r142
  Index        r283, r282, r17
  Append       r284, r276, r283
  Move         r276, r284
  AddInt       r279, r279, r53
  Jump         L32
L31:
  Sum          r285, r276
  Neg          r286, r285
  Move         r287, r286
  Index        r288, r240, r141
  Index        r289, r288, r133
  Move         r290, r289
  MakeList     r291, 2, r287
  Move         r292, r291
  // from i in item
  Move         r293, r275
  MakeList     r294, 2, r292
  Append       r295, r132, r294
  Move         r132, r295
  AddInt       r236, r236, r53
  Jump         L33
L28:
  // sort by [-sum(from x in g select x.s.ext_price), g.key.brand_id]
  Sort         r296, r132
  // from i in item
  Move         r132, r296
  // json(result)
  JSON         r132
  // expect result == [
  Const        r297, [{"ext_price": 200, "i_brand": "BrandA", "i_brand_id": 10, "t_hour": 18, "t_minute": 0}, {"ext_price": 150, "i_brand": "BrandB", "i_brand_id": 20, "t_hour": 8, "t_minute": 30}, {"ext_price": 100, "i_brand": "BrandA", "i_brand_id": 10, "t_hour": 8, "t_minute": 30}]
  Equal        r298, r132, r297
  Expect       r298
  Return       r0
