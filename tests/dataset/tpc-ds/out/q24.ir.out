func main (regs=271)
  // let store_sales = [
  Const        r0, [{"ss_customer_sk": 1, "ss_item_sk": 1, "ss_net_paid": 100, "ss_store_sk": 1, "ss_ticket_number": 1}, {"ss_customer_sk": 2, "ss_item_sk": 2, "ss_net_paid": 50, "ss_store_sk": 1, "ss_ticket_number": 2}]
  // let store_returns = [
  Const        r1, [{"sr_item_sk": 1, "sr_ticket_number": 1}, {"sr_item_sk": 2, "sr_ticket_number": 2}]
  // let store = [ { s_store_sk: 1, s_store_name: "Store1", s_market_id: 5, s_state: "CA", s_zip: "12345" } ]
  Const        r2, [{"s_market_id": 5, "s_state": "CA", "s_store_name": "Store1", "s_store_sk": 1, "s_zip": "12345"}]
  // let item = [
  Const        r3, [{"i_color": "RED", "i_current_price": 10, "i_item_sk": 1, "i_manager_id": 1, "i_size": "M", "i_units": "EA"}, {"i_color": "BLUE", "i_current_price": 20, "i_item_sk": 2, "i_manager_id": 2, "i_size": "L", "i_units": "EA"}]
  // let customer = [
  Const        r4, [{"c_birth_country": "Canada", "c_current_addr_sk": 1, "c_customer_sk": 1, "c_first_name": "Ann", "c_last_name": "Smith"}, {"c_birth_country": "USA", "c_current_addr_sk": 2, "c_customer_sk": 2, "c_first_name": "Bob", "c_last_name": "Jones"}]
  // let customer_address = [
  Const        r5, [{"ca_address_sk": 1, "ca_country": "USA", "ca_state": "CA", "ca_zip": "12345"}, {"ca_address_sk": 2, "ca_country": "USA", "ca_state": "CA", "ca_zip": "54321"}]
  // from ss in store_sales
  Const        r6, []
  // last: c.c_last_name,
  Const        r7, "last"
  Const        r8, "c_last_name"
  // first: c.c_first_name,
  Const        r9, "first"
  Const        r10, "c_first_name"
  // store_name: s.s_store_name,
  Const        r11, "store_name"
  Const        r12, "s_store_name"
  // color: i.i_color
  Const        r13, "color"
  Const        r14, "i_color"
  // where c.c_birth_country != strings.ToUpper(ca.ca_country) && s.s_zip == ca.ca_zip && s.s_market_id == 5
  Const        r15, "c_birth_country"
  Const        r16, "ToUpper"
  Const        r17, "ca_country"
  Const        r18, "s_zip"
  Const        r19, "ca_zip"
  Const        r20, "s_market_id"
  // c_last_name: g.key.last,
  Const        r21, "key"
  // netpaid: sum(from x in g select x.ss_net_paid)
  Const        r22, "netpaid"
  Const        r23, "ss_net_paid"
  // from ss in store_sales
  MakeMap      r24, 0, r0
  Const        r26, []
  Move         r25, r26
  IterPrep     r27, r0
  Len          r28, r27
  Const        r29, 0
L16:
  LessInt      r30, r29, r28
  JumpIfFalse  r30, L0
  Index        r31, r27, r29
  Move         r32, r31
  // join sr in store_returns on ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk
  IterPrep     r33, r1
  Len          r34, r33
  Const        r35, 0
L15:
  LessInt      r36, r35, r34
  JumpIfFalse  r36, L1
  Index        r37, r33, r35
  Move         r38, r37
  Const        r39, "ss_ticket_number"
  Index        r40, r32, r39
  Const        r41, "sr_ticket_number"
  Index        r42, r38, r41
  Equal        r43, r40, r42
  Const        r44, "ss_item_sk"
  Index        r45, r32, r44
  Const        r46, "sr_item_sk"
  Index        r47, r38, r46
  Equal        r48, r45, r47
  Move         r49, r43
  JumpIfFalse  r49, L2
  Move         r49, r48
L2:
  JumpIfFalse  r49, L3
  // join s in store on ss.ss_store_sk == s.s_store_sk
  IterPrep     r50, r2
  Len          r51, r50
  Const        r52, 0
L14:
  LessInt      r53, r52, r51
  JumpIfFalse  r53, L3
  Index        r54, r50, r52
  Move         r55, r54
  Const        r56, "ss_store_sk"
  Index        r57, r32, r56
  Const        r58, "s_store_sk"
  Index        r59, r55, r58
  Equal        r60, r57, r59
  JumpIfFalse  r60, L4
  // join i in item on ss.ss_item_sk == i.i_item_sk
  IterPrep     r61, r3
  Len          r62, r61
  Const        r63, 0
L13:
  LessInt      r64, r63, r62
  JumpIfFalse  r64, L4
  Index        r65, r61, r63
  Move         r66, r65
  Index        r67, r32, r44
  Const        r68, "i_item_sk"
  Index        r69, r66, r68
  Equal        r70, r67, r69
  JumpIfFalse  r70, L5
  // join c in customer on ss.ss_customer_sk == c.c_customer_sk
  IterPrep     r71, r4
  Len          r72, r71
  Const        r73, 0
L12:
  LessInt      r74, r73, r72
  JumpIfFalse  r74, L5
  Index        r75, r71, r73
  Move         r76, r75
  Const        r77, "ss_customer_sk"
  Index        r78, r32, r77
  Const        r79, "c_customer_sk"
  Index        r80, r76, r79
  Equal        r81, r78, r80
  JumpIfFalse  r81, L6
  // join ca in customer_address on c.c_current_addr_sk == ca.ca_address_sk
  IterPrep     r82, r5
  Len          r83, r82
  Const        r84, 0
L11:
  LessInt      r85, r84, r83
  JumpIfFalse  r85, L6
  Index        r86, r82, r84
  Move         r87, r86
  Const        r88, "c_current_addr_sk"
  Index        r89, r76, r88
  Const        r90, "ca_address_sk"
  Index        r91, r87, r90
  Equal        r92, r89, r91
  JumpIfFalse  r92, L7
  // where c.c_birth_country != strings.ToUpper(ca.ca_country) && s.s_zip == ca.ca_zip && s.s_market_id == 5
  Index        r93, r76, r15
  Index        r95, r94, r16
  Index        r97, r87, r17
  Move         r96, r97
  CallV        r98, r95, 1, r96
  NotEqual     r99, r93, r98
  Index        r100, r55, r18
  Index        r101, r87, r19
  Equal        r102, r100, r101
  Index        r103, r55, r20
  Const        r104, 5
  Equal        r105, r103, r104
  Move         r106, r99
  JumpIfFalse  r106, L8
  Move         r106, r102
L8:
  Move         r107, r106
  JumpIfFalse  r107, L9
  Move         r107, r105
L9:
  JumpIfFalse  r107, L7
  // from ss in store_sales
  Const        r108, "ss"
  Move         r109, r32
  Const        r110, "sr"
  Move         r111, r38
  Const        r112, "s"
  Move         r113, r55
  Const        r114, "i"
  Move         r115, r66
  Const        r116, "c"
  Move         r117, r76
  Const        r118, "ca"
  Move         r119, r87
  Move         r120, r108
  Move         r121, r109
  Move         r122, r110
  Move         r123, r111
  Move         r124, r112
  Move         r125, r113
  Move         r126, r114
  Move         r127, r115
  Move         r128, r116
  Move         r129, r117
  Move         r130, r118
  Move         r131, r119
  MakeMap      r132, 6, r120
  // last: c.c_last_name,
  Const        r133, "last"
  Index        r134, r76, r8
  // first: c.c_first_name,
  Const        r135, "first"
  Index        r136, r76, r10
  // store_name: s.s_store_name,
  Const        r137, "store_name"
  Index        r138, r55, r12
  // color: i.i_color
  Const        r139, "color"
  Index        r140, r66, r14
  // last: c.c_last_name,
  Move         r141, r133
  Move         r142, r134
  // first: c.c_first_name,
  Move         r143, r135
  Move         r144, r136
  // store_name: s.s_store_name,
  Move         r145, r137
  Move         r146, r138
  // color: i.i_color
  Move         r147, r139
  Move         r148, r140
  // group by {
  MakeMap      r149, 4, r141
  Str          r150, r149
  In           r151, r150, r24
  JumpIfTrue   r151, L10
  // from ss in store_sales
  Const        r152, []
  Const        r153, "__group__"
  Const        r154, true
  // group by {
  Move         r155, r149
  // from ss in store_sales
  Const        r156, "items"
  Move         r157, r152
  Const        r158, "count"
  Const        r159, 0
  Move         r160, r153
  Move         r161, r154
  Move         r162, r21
  Move         r163, r155
  Move         r164, r156
  Move         r165, r157
  Move         r166, r158
  Move         r167, r159
  MakeMap      r168, 4, r160
  SetIndex     r24, r150, r168
  Append       r169, r25, r168
  Move         r25, r169
L10:
  Index        r170, r24, r150
  Index        r171, r170, r156
  Append       r172, r171, r132
  SetIndex     r170, r156, r172
  Index        r173, r170, r158
  Const        r174, 1
  AddInt       r175, r173, r174
  SetIndex     r170, r158, r175
L7:
  // join ca in customer_address on c.c_current_addr_sk == ca.ca_address_sk
  AddInt       r84, r84, r174
  Jump         L11
L6:
  // join c in customer on ss.ss_customer_sk == c.c_customer_sk
  AddInt       r73, r73, r174
  Jump         L12
L5:
  // join i in item on ss.ss_item_sk == i.i_item_sk
  AddInt       r63, r63, r174
  Jump         L13
L4:
  // join s in store on ss.ss_store_sk == s.s_store_sk
  AddInt       r52, r52, r174
  Jump         L14
L3:
  // join sr in store_returns on ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk
  AddInt       r35, r35, r174
  Jump         L15
L1:
  // from ss in store_sales
  AddInt       r29, r29, r174
  Jump         L16
L0:
  Move         r176, r159
  Len          r177, r25
L20:
  LessInt      r178, r176, r177
  JumpIfFalse  r178, L17
  Index        r179, r25, r176
  Move         r180, r179
  // c_last_name: g.key.last,
  Const        r181, "c_last_name"
  Index        r182, r180, r21
  Index        r183, r182, r7
  // c_first_name: g.key.first,
  Const        r184, "c_first_name"
  Index        r185, r180, r21
  Index        r186, r185, r9
  // s_store_name: g.key.store_name,
  Const        r187, "s_store_name"
  Index        r188, r180, r21
  Index        r189, r188, r11
  // color: g.key.color,
  Const        r190, "color"
  Index        r191, r180, r21
  Index        r192, r191, r13
  // netpaid: sum(from x in g select x.ss_net_paid)
  Const        r193, "netpaid"
  Const        r194, []
  IterPrep     r195, r180
  Len          r196, r195
  Move         r197, r159
L19:
  LessInt      r198, r197, r196
  JumpIfFalse  r198, L18
  Index        r199, r195, r197
  Move         r200, r199
  Index        r201, r200, r23
  Append       r202, r194, r201
  Move         r194, r202
  AddInt       r197, r197, r174
  Jump         L19
L18:
  Sum          r203, r194
  // c_last_name: g.key.last,
  Move         r204, r181
  Move         r205, r183
  // c_first_name: g.key.first,
  Move         r206, r184
  Move         r207, r186
  // s_store_name: g.key.store_name,
  Move         r208, r187
  Move         r209, r189
  // color: g.key.color,
  Move         r210, r190
  Move         r211, r192
  // netpaid: sum(from x in g select x.ss_net_paid)
  Move         r212, r193
  Move         r213, r203
  // select {
  MakeMap      r214, 5, r204
  // from ss in store_sales
  Append       r215, r6, r214
  Move         r6, r215
  AddInt       r176, r176, r174
  Jump         L20
L17:
  // let avg_paid = avg(from x in ssales select x.netpaid)
  Const        r216, []
  IterPrep     r217, r6
  Len          r218, r217
  Move         r219, r159
L22:
  LessInt      r220, r219, r218
  JumpIfFalse  r220, L21
  Index        r221, r217, r219
  Move         r200, r221
  Index        r222, r200, r22
  Append       r223, r216, r222
  Move         r216, r223
  AddInt       r219, r219, r174
  Jump         L22
L21:
  Avg          r224, r216
  // from x in ssales
  Const        r225, []
  // select { c_last_name: x.c_last_name, c_first_name: x.c_first_name, s_store_name: x.s_store_name, paid: x.netpaid }
  Const        r226, "paid"
  // from x in ssales
  IterPrep     r227, r6
  Len          r228, r227
  Move         r229, r159
L26:
  LessInt      r230, r229, r228
  JumpIfFalse  r230, L23
  Index        r231, r227, r229
  Move         r200, r231
  // where x.color == "RED" && x.netpaid > 0.05 * avg_paid
  Index        r232, r200, r13
  Const        r233, 0.05
  MulFloat     r234, r233, r224
  Index        r235, r200, r22
  LessFloat    r236, r234, r235
  Const        r237, "RED"
  Equal        r238, r232, r237
  Move         r239, r238
  JumpIfFalse  r239, L24
  Move         r239, r236
L24:
  JumpIfFalse  r239, L25
  // select { c_last_name: x.c_last_name, c_first_name: x.c_first_name, s_store_name: x.s_store_name, paid: x.netpaid }
  Const        r240, "c_last_name"
  Index        r241, r200, r8
  Const        r242, "c_first_name"
  Index        r243, r200, r10
  Const        r244, "s_store_name"
  Index        r245, r200, r12
  Const        r246, "paid"
  Index        r247, r200, r22
  Move         r248, r240
  Move         r249, r241
  Move         r250, r242
  Move         r251, r243
  Move         r252, r244
  Move         r253, r245
  Move         r254, r246
  Move         r255, r247
  MakeMap      r256, 4, r248
  // sort by [x.c_last_name, x.c_first_name, x.s_store_name]
  Index        r257, r200, r8
  Move         r258, r257
  Index        r259, r200, r10
  Move         r260, r259
  Index        r261, r200, r12
  Move         r262, r261
  MakeList     r263, 3, r258
  Move         r264, r263
  // from x in ssales
  Move         r265, r256
  MakeList     r266, 2, r264
  Append       r267, r225, r266
  Move         r225, r267
L25:
  AddInt       r229, r229, r174
  Jump         L26
L23:
  // sort by [x.c_last_name, x.c_first_name, x.s_store_name]
  Sort         r268, r225
  // from x in ssales
  Move         r225, r268
  // json(result)
  JSON         r225
  // expect result == [ { c_last_name: "Smith", c_first_name: "Ann", s_store_name: "Store1", paid: 100.0 } ]
  Const        r269, [{"c_first_name": "Ann", "c_last_name": "Smith", "paid": 100, "s_store_name": "Store1"}]
  Equal        r270, r225, r269
  Expect       r270
  Return       r0
