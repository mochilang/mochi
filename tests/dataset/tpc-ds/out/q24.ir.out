func main (regs=259)
  // let store_sales = [
  Const        r0, [{"ss_customer_sk": 1, "ss_item_sk": 1, "ss_net_paid": 100, "ss_store_sk": 1, "ss_ticket_number": 1}, {"ss_customer_sk": 2, "ss_item_sk": 2, "ss_net_paid": 50, "ss_store_sk": 1, "ss_ticket_number": 2}]
  // let store_returns = [
  Const        r1, [{"sr_item_sk": 1, "sr_ticket_number": 1}, {"sr_item_sk": 2, "sr_ticket_number": 2}]
  // let store = [ { s_store_sk: 1, s_store_name: "Store1", s_market_id: 5, s_state: "CA", s_zip: "12345" } ]
  Const        r2, [{"s_market_id": 5, "s_state": "CA", "s_store_name": "Store1", "s_store_sk": 1, "s_zip": "12345"}]
  // let item = [
  Const        r3, [{"i_color": "RED", "i_current_price": 10, "i_item_sk": 1, "i_manager_id": 1, "i_size": "M", "i_units": "EA"}, {"i_color": "BLUE", "i_current_price": 20, "i_item_sk": 2, "i_manager_id": 2, "i_size": "L", "i_units": "EA"}]
  // let customer = [
  Const        r4, [{"c_birth_country": "Canada", "c_current_addr_sk": 1, "c_customer_sk": 1, "c_first_name": "Ann", "c_last_name": "Smith"}, {"c_birth_country": "USA", "c_current_addr_sk": 2, "c_customer_sk": 2, "c_first_name": "Bob", "c_last_name": "Jones"}]
  // let customer_address = [
  Const        r5, [{"ca_address_sk": 1, "ca_country": "USA", "ca_state": "CA", "ca_zip": "12345"}, {"ca_address_sk": 2, "ca_country": "USA", "ca_state": "CA", "ca_zip": "54321"}]
  // from ss in store_sales
  Const        r6, []
  // last: c.c_last_name,
  Const        r7, "last"
  Const        r8, "c_last_name"
  // first: c.c_first_name,
  Const        r9, "first"
  Const        r10, "c_first_name"
  // store_name: s.s_store_name,
  Const        r11, "store_name"
  Const        r12, "s_store_name"
  // color: i.i_color
  Const        r13, "color"
  Const        r14, "i_color"
  // where c.c_birth_country != strings.ToUpper(ca.ca_country) && s.s_zip == ca.ca_zip && s.s_market_id == 5
  Const        r15, "c_birth_country"
  Const        r16, "ToUpper"
  Const        r17, "ca_country"
  Const        r18, "s_zip"
  Const        r19, "ca_zip"
  Const        r20, "s_market_id"
  // c_last_name: g.key.last,
  Const        r21, "key"
  // netpaid: sum(from x in g select x.ss_net_paid)
  Const        r22, "netpaid"
  Const        r23, "ss_net_paid"
  // from ss in store_sales
  MakeMap      r24, 0, r0
  Const        r25, []
  IterPrep     r27, r0
  Len          r28, r27
  Const        r29, 0
L15:
  LessInt      r30, r29, r28
  JumpIfFalse  r30, L0
  Index        r32, r27, r29
  // join sr in store_returns on ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk
  IterPrep     r33, r1
  Len          r34, r33
  Const        r35, 0
L14:
  LessInt      r36, r35, r34
  JumpIfFalse  r36, L1
  Index        r38, r33, r35
  Const        r39, "ss_ticket_number"
  Index        r40, r32, r39
  Const        r41, "sr_ticket_number"
  Index        r42, r38, r41
  Equal        r43, r40, r42
  Const        r44, "ss_item_sk"
  Index        r45, r32, r44
  Const        r46, "sr_item_sk"
  Index        r47, r38, r46
  Equal        r48, r45, r47
  JumpIfFalse  r43, L2
  Move         r43, r48
L2:
  JumpIfFalse  r43, L3
  // join s in store on ss.ss_store_sk == s.s_store_sk
  IterPrep     r49, r2
  Len          r50, r49
  Const        r51, 0
L13:
  LessInt      r52, r51, r50
  JumpIfFalse  r52, L3
  Index        r54, r49, r51
  Const        r55, "ss_store_sk"
  Index        r56, r32, r55
  Const        r57, "s_store_sk"
  Index        r58, r54, r57
  Equal        r59, r56, r58
  JumpIfFalse  r59, L4
  // join i in item on ss.ss_item_sk == i.i_item_sk
  IterPrep     r60, r3
  Len          r61, r60
  Const        r62, 0
L12:
  LessInt      r63, r62, r61
  JumpIfFalse  r63, L4
  Index        r65, r60, r62
  Index        r66, r32, r44
  Const        r67, "i_item_sk"
  Index        r68, r65, r67
  Equal        r69, r66, r68
  JumpIfFalse  r69, L5
  // join c in customer on ss.ss_customer_sk == c.c_customer_sk
  IterPrep     r70, r4
  Len          r71, r70
  Const        r72, 0
L11:
  LessInt      r73, r72, r71
  JumpIfFalse  r73, L5
  Index        r75, r70, r72
  Const        r76, "ss_customer_sk"
  Index        r77, r32, r76
  Const        r78, "c_customer_sk"
  Index        r79, r75, r78
  Equal        r80, r77, r79
  JumpIfFalse  r80, L6
  // join ca in customer_address on c.c_current_addr_sk == ca.ca_address_sk
  IterPrep     r81, r5
  Len          r82, r81
  Const        r83, 0
L10:
  LessInt      r84, r83, r82
  JumpIfFalse  r84, L6
  Index        r86, r81, r83
  Const        r87, "c_current_addr_sk"
  Index        r88, r75, r87
  Const        r89, "ca_address_sk"
  Index        r90, r86, r89
  Equal        r91, r88, r90
  JumpIfFalse  r91, L7
  // where c.c_birth_country != strings.ToUpper(ca.ca_country) && s.s_zip == ca.ca_zip && s.s_market_id == 5
  Index        r92, r75, r15
  Index        r94, r93, r16
  Index        r95, r86, r17
  CallV        r97, r94, 1, r95
  NotEqual     r98, r92, r97
  Index        r99, r54, r18
  Index        r100, r86, r19
  Equal        r101, r99, r100
  Index        r102, r54, r20
  Const        r103, 5
  Equal        r104, r102, r103
  JumpIfFalse  r98, L8
  Move         r98, r101
  JumpIfFalse  r98, L8
  Move         r98, r104
L8:
  JumpIfFalse  r98, L7
  // from ss in store_sales
  Const        r105, "ss"
  Move         r106, r32
  Const        r107, "sr"
  Move         r108, r38
  Const        r109, "s"
  Move         r110, r54
  Const        r111, "i"
  Move         r112, r65
  Const        r113, "c"
  Move         r114, r75
  Const        r115, "ca"
  Move         r116, r86
  MakeMap      r117, 6, r105
  // last: c.c_last_name,
  Const        r118, "last"
  Index        r119, r75, r8
  // first: c.c_first_name,
  Const        r120, "first"
  Index        r121, r75, r10
  // store_name: s.s_store_name,
  Const        r122, "store_name"
  Index        r123, r54, r12
  // color: i.i_color
  Const        r124, "color"
  Index        r125, r65, r14
  // last: c.c_last_name,
  Move         r126, r118
  Move         r127, r119
  // first: c.c_first_name,
  Move         r128, r120
  Move         r129, r121
  // store_name: s.s_store_name,
  Move         r130, r122
  Move         r131, r123
  // color: i.i_color
  Move         r132, r124
  Move         r133, r125
  // group by {
  MakeMap      r134, 4, r126
  Str          r135, r134
  In           r136, r135, r24
  JumpIfTrue   r136, L9
  // from ss in store_sales
  Const        r137, []
  Const        r138, "__group__"
  Const        r139, true
  Const        r140, "key"
  // group by {
  Move         r141, r134
  // from ss in store_sales
  Const        r142, "items"
  Move         r143, r137
  Const        r144, "count"
  Const        r145, 0
  Move         r146, r138
  Move         r147, r139
  Move         r148, r140
  Move         r149, r141
  Move         r150, r142
  Move         r151, r143
  Move         r152, r144
  Move         r153, r145
  MakeMap      r154, 4, r146
  SetIndex     r24, r135, r154
  Append       r25, r25, r154
L9:
  Const        r156, "items"
  Index        r157, r24, r135
  Index        r158, r157, r156
  Append       r159, r158, r117
  SetIndex     r157, r156, r159
  Const        r160, "count"
  Index        r161, r157, r160
  Const        r162, 1
  AddInt       r163, r161, r162
  SetIndex     r157, r160, r163
L7:
  // join ca in customer_address on c.c_current_addr_sk == ca.ca_address_sk
  AddInt       r83, r83, r162
  Jump         L10
L6:
  // join c in customer on ss.ss_customer_sk == c.c_customer_sk
  AddInt       r72, r72, r162
  Jump         L11
L5:
  // join i in item on ss.ss_item_sk == i.i_item_sk
  AddInt       r62, r62, r162
  Jump         L12
L4:
  // join s in store on ss.ss_store_sk == s.s_store_sk
  AddInt       r51, r51, r162
  Jump         L13
L3:
  // join sr in store_returns on ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk
  AddInt       r35, r35, r162
  Jump         L14
L1:
  // from ss in store_sales
  AddInt       r29, r29, r162
  Jump         L15
L0:
  Const        r165, 0
  Move         r164, r165
  Len          r166, r25
L19:
  LessInt      r167, r164, r166
  JumpIfFalse  r167, L16
  Index        r169, r25, r164
  // c_last_name: g.key.last,
  Const        r170, "c_last_name"
  Index        r171, r169, r21
  Index        r172, r171, r7
  // c_first_name: g.key.first,
  Const        r173, "c_first_name"
  Index        r174, r169, r21
  Index        r175, r174, r9
  // s_store_name: g.key.store_name,
  Const        r176, "s_store_name"
  Index        r177, r169, r21
  Index        r178, r177, r11
  // color: g.key.color,
  Const        r179, "color"
  Index        r180, r169, r21
  Index        r181, r180, r13
  // netpaid: sum(from x in g select x.ss_net_paid)
  Const        r182, "netpaid"
  Const        r183, []
  IterPrep     r184, r169
  Len          r185, r184
  Move         r186, r165
L18:
  LessInt      r187, r186, r185
  JumpIfFalse  r187, L17
  Index        r189, r184, r186
  Index        r190, r189, r23
  Append       r183, r183, r190
  AddInt       r186, r186, r162
  Jump         L18
L17:
  Sum          r192, r183
  // c_last_name: g.key.last,
  Move         r193, r170
  Move         r194, r172
  // c_first_name: g.key.first,
  Move         r195, r173
  Move         r196, r175
  // s_store_name: g.key.store_name,
  Move         r197, r176
  Move         r198, r178
  // color: g.key.color,
  Move         r199, r179
  Move         r200, r181
  // netpaid: sum(from x in g select x.ss_net_paid)
  Move         r201, r182
  Move         r202, r192
  // select {
  MakeMap      r203, 5, r193
  // from ss in store_sales
  Append       r6, r6, r203
  AddInt       r164, r164, r162
  Jump         L19
L16:
  // let avg_paid = avg(from x in ssales select x.netpaid)
  Const        r205, []
  IterPrep     r206, r6
  Len          r207, r206
  Move         r208, r165
L21:
  LessInt      r209, r208, r207
  JumpIfFalse  r209, L20
  Index        r189, r206, r208
  Index        r211, r189, r22
  Append       r205, r205, r211
  AddInt       r208, r208, r162
  Jump         L21
L20:
  Avg          r213, r205
  // from x in ssales
  Const        r214, []
  // select { c_last_name: x.c_last_name, c_first_name: x.c_first_name, s_store_name: x.s_store_name, paid: x.netpaid }
  Const        r215, "paid"
  // from x in ssales
  IterPrep     r216, r6
  Len          r217, r216
  Move         r218, r165
L25:
  LessInt      r219, r218, r217
  JumpIfFalse  r219, L22
  Index        r189, r216, r218
  // where x.color == "RED" && x.netpaid > 0.05 * avg_paid
  Index        r221, r189, r13
  Const        r222, 0.05
  MulFloat     r223, r222, r213
  Index        r224, r189, r22
  LessFloat    r225, r223, r224
  Const        r226, "RED"
  Equal        r227, r221, r226
  JumpIfFalse  r227, L23
  Move         r227, r225
L23:
  JumpIfFalse  r227, L24
  // select { c_last_name: x.c_last_name, c_first_name: x.c_first_name, s_store_name: x.s_store_name, paid: x.netpaid }
  Const        r228, "c_last_name"
  Index        r229, r189, r8
  Const        r230, "c_first_name"
  Index        r231, r189, r10
  Const        r232, "s_store_name"
  Index        r233, r189, r12
  Const        r234, "paid"
  Index        r235, r189, r22
  Move         r236, r228
  Move         r237, r229
  Move         r238, r230
  Move         r239, r231
  Move         r240, r232
  Move         r241, r233
  Move         r242, r234
  Move         r243, r235
  MakeMap      r244, 4, r236
  // sort by [x.c_last_name, x.c_first_name, x.s_store_name]
  Index        r246, r189, r8
  Index        r247, r189, r10
  Move         r248, r247
  Index        r250, r189, r12
  MakeList     r252, 3, r246
  // from x in ssales
  Move         r253, r244
  MakeList     r254, 2, r252
  Append       r214, r214, r254
L24:
  AddInt       r218, r218, r162
  Jump         L25
L22:
  // sort by [x.c_last_name, x.c_first_name, x.s_store_name]
  Sort         r214, r214
  // json(result)
  JSON         r214
  // expect result == [ { c_last_name: "Smith", c_first_name: "Ann", s_store_name: "Store1", paid: 100.0 } ]
  Const        r257, [{"c_first_name": "Ann", "c_last_name": "Smith", "paid": 100, "s_store_name": "Store1"}]
  Equal        r258, r214, r257
  Expect       r258
  Return       r0
