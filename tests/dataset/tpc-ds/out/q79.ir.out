func main (regs=251)
  // let date_dim = [
  Const        r0, [{"d_date_sk": 1, "d_dow": 1, "d_year": 1999}]
  // let store = [
  Const        r1, [{"s_city": "CityA", "s_number_employees": 250, "s_store_sk": 1}]
  // let household_demographics = [
  Const        r2, [{"hd_demo_sk": 1, "hd_dep_count": 2, "hd_vehicle_count": 1}]
  // let store_sales = [
  Const        r3, [{"ss_coupon_amt": 5, "ss_customer_sk": 1, "ss_hdemo_sk": 1, "ss_net_profit": 10, "ss_sold_date_sk": 1, "ss_store_sk": 1, "ss_ticket_number": 1}]
  // let customer = [
  Const        r4, [{"c_customer_sk": 1, "c_first_name": "Alice", "c_last_name": "Smith"}]
  // from ss in store_sales
  Const        r5, []
  // group by { ticket: ss.ss_ticket_number, customer_sk: ss.ss_customer_sk, city: s.s_city } into g
  Const        r6, "ticket"
  Const        r7, "ss_ticket_number"
  Const        r8, "customer_sk"
  Const        r9, "ss_customer_sk"
  Const        r10, "city"
  Const        r11, "s_city"
  // where (hd.hd_dep_count == 2 || hd.hd_vehicle_count > 1) &&
  Const        r12, "hd_dep_count"
  Const        r13, "hd_vehicle_count"
  // d.d_dow == 1 &&
  Const        r14, "d_dow"
  // (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) &&
  Const        r15, "d_year"
  // s.s_number_employees >= 200 && s.s_number_employees <= 295
  Const        r16, "s_number_employees"
  // select { key: g.key, amt: sum(from x in g select x.ss.ss_coupon_amt), profit: sum(from x in g select x.ss.ss_net_profit) }
  Const        r17, "key"
  Const        r18, "amt"
  Const        r19, "ss"
  Const        r20, "ss_coupon_amt"
  Const        r21, "profit"
  Const        r22, "ss_net_profit"
  // from ss in store_sales
  MakeMap      r23, 0, r0
  Const        r25, []
  Move         r24, r25
  IterPrep     r26, r3
  Len          r27, r26
  Const        r28, 0
L16:
  LessInt      r29, r28, r27
  JumpIfFalse  r29, L0
  Index        r30, r26, r28
  Move         r31, r30
  // join d in date_dim on d.d_date_sk == ss.ss_sold_date_sk
  IterPrep     r32, r0
  Len          r33, r32
  Const        r34, 0
L15:
  LessInt      r35, r34, r33
  JumpIfFalse  r35, L1
  Index        r36, r32, r34
  Move         r37, r36
  Const        r38, "d_date_sk"
  Index        r39, r37, r38
  Const        r40, "ss_sold_date_sk"
  Index        r41, r31, r40
  Equal        r42, r39, r41
  JumpIfFalse  r42, L2
  // join s in store on s.s_store_sk == ss.ss_store_sk
  IterPrep     r43, r1
  Len          r44, r43
  Const        r45, 0
L14:
  LessInt      r46, r45, r44
  JumpIfFalse  r46, L2
  Index        r47, r43, r45
  Move         r48, r47
  Const        r49, "s_store_sk"
  Index        r50, r48, r49
  Const        r51, "ss_store_sk"
  Index        r52, r31, r51
  Equal        r53, r50, r52
  JumpIfFalse  r53, L3
  // join hd in household_demographics on hd.hd_demo_sk == ss.ss_hdemo_sk
  IterPrep     r54, r2
  Len          r55, r54
  Const        r56, 0
L13:
  LessInt      r57, r56, r55
  JumpIfFalse  r57, L3
  Index        r58, r54, r56
  Move         r59, r58
  Const        r60, "hd_demo_sk"
  Index        r61, r59, r60
  Const        r62, "ss_hdemo_sk"
  Index        r63, r31, r62
  Equal        r64, r61, r63
  JumpIfFalse  r64, L4
  // where (hd.hd_dep_count == 2 || hd.hd_vehicle_count > 1) &&
  Index        r65, r59, r12
  Index        r66, r59, r13
  Const        r67, 1
  Less         r68, r67, r66
  Const        r69, 2
  Equal        r70, r65, r69
  Move         r71, r70
  JumpIfTrue   r71, L5
  Move         r71, r68
L5:
  // s.s_number_employees >= 200 && s.s_number_employees <= 295
  Index        r72, r48, r16
  Const        r73, 200
  LessEq       r74, r73, r72
  Index        r75, r48, r16
  Const        r76, 295
  LessEq       r77, r75, r76
  // d.d_dow == 1 &&
  Index        r78, r37, r14
  Equal        r79, r78, r67
  // where (hd.hd_dep_count == 2 || hd.hd_vehicle_count > 1) &&
  Move         r80, r71
  JumpIfFalse  r80, L6
  Move         r80, r79
L6:
  // (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) &&
  Index        r81, r37, r15
  Const        r82, 1998
  Equal        r83, r81, r82
  Index        r84, r37, r15
  Const        r85, 1999
  Equal        r86, r84, r85
  Index        r87, r37, r15
  Const        r88, 2000
  Equal        r89, r87, r88
  Move         r90, r83
  JumpIfTrue   r90, L7
  Move         r90, r86
L7:
  Move         r91, r90
  JumpIfTrue   r91, L8
  Move         r91, r89
L8:
  // d.d_dow == 1 &&
  Move         r92, r80
  JumpIfFalse  r92, L9
  Move         r92, r91
L9:
  // (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) &&
  Move         r93, r92
  JumpIfFalse  r93, L10
  Move         r93, r74
L10:
  // s.s_number_employees >= 200 && s.s_number_employees <= 295
  Move         r94, r93
  JumpIfFalse  r94, L11
  Move         r94, r77
L11:
  // where (hd.hd_dep_count == 2 || hd.hd_vehicle_count > 1) &&
  JumpIfFalse  r94, L4
  // from ss in store_sales
  Move         r95, r31
  Const        r96, "d"
  Move         r97, r37
  Const        r98, "s"
  Move         r99, r48
  Const        r100, "hd"
  Move         r101, r59
  Move         r102, r19
  Move         r103, r95
  Move         r104, r96
  Move         r105, r97
  Move         r106, r98
  Move         r107, r99
  Move         r108, r100
  Move         r109, r101
  MakeMap      r110, 4, r102
  // group by { ticket: ss.ss_ticket_number, customer_sk: ss.ss_customer_sk, city: s.s_city } into g
  Const        r111, "ticket"
  Index        r112, r31, r7
  Const        r113, "customer_sk"
  Index        r114, r31, r9
  Const        r115, "city"
  Index        r116, r48, r11
  Move         r117, r111
  Move         r118, r112
  Move         r119, r113
  Move         r120, r114
  Move         r121, r115
  Move         r122, r116
  MakeMap      r123, 3, r117
  Str          r124, r123
  In           r125, r124, r23
  JumpIfTrue   r125, L12
  // from ss in store_sales
  Const        r126, []
  Const        r127, "__group__"
  Const        r128, true
  // group by { ticket: ss.ss_ticket_number, customer_sk: ss.ss_customer_sk, city: s.s_city } into g
  Move         r129, r123
  // from ss in store_sales
  Const        r130, "items"
  Move         r131, r126
  Const        r132, "count"
  Const        r133, 0
  Move         r134, r127
  Move         r135, r128
  Move         r136, r17
  Move         r137, r129
  Move         r138, r130
  Move         r139, r131
  Move         r140, r132
  Move         r141, r133
  MakeMap      r142, 4, r134
  SetIndex     r23, r124, r142
  Append       r143, r24, r142
  Move         r24, r143
L12:
  Index        r144, r23, r124
  Index        r145, r144, r130
  Append       r146, r145, r110
  SetIndex     r144, r130, r146
  Index        r147, r144, r132
  AddInt       r148, r147, r67
  SetIndex     r144, r132, r148
L4:
  // join hd in household_demographics on hd.hd_demo_sk == ss.ss_hdemo_sk
  AddInt       r56, r56, r67
  Jump         L13
L3:
  // join s in store on s.s_store_sk == ss.ss_store_sk
  AddInt       r45, r45, r67
  Jump         L14
L2:
  // join d in date_dim on d.d_date_sk == ss.ss_sold_date_sk
  AddInt       r34, r34, r67
  Jump         L15
L1:
  // from ss in store_sales
  AddInt       r28, r28, r67
  Jump         L16
L0:
  Move         r149, r133
  Len          r150, r24
L22:
  LessInt      r151, r149, r150
  JumpIfFalse  r151, L17
  Index        r152, r24, r149
  Move         r153, r152
  // select { key: g.key, amt: sum(from x in g select x.ss.ss_coupon_amt), profit: sum(from x in g select x.ss.ss_net_profit) }
  Const        r154, "key"
  Index        r155, r153, r17
  Const        r156, "amt"
  Const        r157, []
  IterPrep     r158, r153
  Len          r159, r158
  Move         r160, r133
L19:
  LessInt      r161, r160, r159
  JumpIfFalse  r161, L18
  Index        r162, r158, r160
  Move         r163, r162
  Index        r164, r163, r19
  Index        r165, r164, r20
  Append       r166, r157, r165
  Move         r157, r166
  AddInt       r160, r160, r67
  Jump         L19
L18:
  Sum          r167, r157
  Const        r168, "profit"
  Const        r169, []
  IterPrep     r170, r153
  Len          r171, r170
  Move         r172, r133
L21:
  LessInt      r173, r172, r171
  JumpIfFalse  r173, L20
  Index        r174, r170, r172
  Move         r163, r174
  Index        r175, r163, r19
  Index        r176, r175, r22
  Append       r177, r169, r176
  Move         r169, r177
  AddInt       r172, r172, r67
  Jump         L21
L20:
  Sum          r178, r169
  Move         r179, r154
  Move         r180, r155
  Move         r181, r156
  Move         r182, r167
  Move         r183, r168
  Move         r184, r178
  MakeMap      r185, 3, r179
  // from ss in store_sales
  Append       r186, r5, r185
  Move         r5, r186
  AddInt       r149, r149, r67
  Jump         L22
L17:
  // from a in agg
  Const        r187, []
  IterPrep     r188, r5
  Len          r189, r188
  // join c in customer on c.c_customer_sk == a.key.customer_sk
  IterPrep     r190, r4
  Len          r191, r190
  Const        r192, "c_customer_sk"
  // select { c_last_name: c.c_last_name, c_first_name: c.c_first_name, s_city: a.key.city, ss_ticket_number: a.key.ticket, amt: a.amt, profit: a.profit }
  Const        r193, "c_last_name"
  Const        r194, "c_first_name"
  // from a in agg
  Const        r195, 0
L27:
  LessInt      r196, r195, r189
  JumpIfFalse  r196, L23
  Index        r197, r188, r195
  Move         r198, r197
  // join c in customer on c.c_customer_sk == a.key.customer_sk
  Const        r199, 0
L26:
  LessInt      r200, r199, r191
  JumpIfFalse  r200, L24
  Index        r201, r190, r199
  Move         r202, r201
  Index        r203, r202, r192
  Index        r204, r198, r17
  Index        r205, r204, r8
  Equal        r206, r203, r205
  JumpIfFalse  r206, L25
  // select { c_last_name: c.c_last_name, c_first_name: c.c_first_name, s_city: a.key.city, ss_ticket_number: a.key.ticket, amt: a.amt, profit: a.profit }
  Const        r207, "c_last_name"
  Index        r208, r202, r193
  Const        r209, "c_first_name"
  Index        r210, r202, r194
  Const        r211, "s_city"
  Index        r212, r198, r17
  Index        r213, r212, r10
  Const        r214, "ss_ticket_number"
  Index        r215, r198, r17
  Index        r216, r215, r6
  Const        r217, "amt"
  Index        r218, r198, r18
  Const        r219, "profit"
  Index        r220, r198, r21
  Move         r221, r207
  Move         r222, r208
  Move         r223, r209
  Move         r224, r210
  Move         r225, r211
  Move         r226, r213
  Move         r227, r214
  Move         r228, r216
  Move         r229, r217
  Move         r230, r218
  Move         r231, r219
  Move         r232, r220
  MakeMap      r233, 6, r221
  // sort by [c.c_last_name, c.c_first_name, a.key.city, a.profit]
  Index        r234, r202, r193
  Move         r235, r234
  Index        r236, r202, r194
  Move         r237, r236
  Index        r238, r198, r17
  Index        r239, r238, r10
  Move         r240, r239
  Index        r241, r198, r21
  Move         r242, r241
  MakeList     r243, 4, r235
  Move         r244, r243
  // from a in agg
  Move         r245, r233
  MakeList     r246, 2, r244
  Append       r247, r187, r246
  Move         r187, r247
L25:
  // join c in customer on c.c_customer_sk == a.key.customer_sk
  AddInt       r199, r199, r67
  Jump         L26
L24:
  // from a in agg
  AddInt       r195, r195, r67
  Jump         L27
L23:
  // sort by [c.c_last_name, c.c_first_name, a.key.city, a.profit]
  Sort         r248, r187
  // from a in agg
  Move         r187, r248
  // json(result)
  JSON         r187
  // expect result == [
  Const        r249, [{"amt": 5, "c_first_name": "Alice", "c_last_name": "Smith", "profit": 10, "s_city": "CityA", "ss_ticket_number": 1}]
  Equal        r250, r187, r249
  Expect       r250
  Return       r0

