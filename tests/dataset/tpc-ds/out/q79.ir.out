func main (regs=240)
  // let date_dim = [
  Const        r0, [{"d_date_sk": 1, "d_dow": 1, "d_year": 1999}]
  // let store = [
  Const        r1, [{"s_city": "CityA", "s_number_employees": 250, "s_store_sk": 1}]
  // let household_demographics = [
  Const        r2, [{"hd_demo_sk": 1, "hd_dep_count": 2, "hd_vehicle_count": 1}]
  // let store_sales = [
  Const        r3, [{"ss_coupon_amt": 5, "ss_customer_sk": 1, "ss_hdemo_sk": 1, "ss_net_profit": 10, "ss_sold_date_sk": 1, "ss_store_sk": 1, "ss_ticket_number": 1}]
  // let customer = [
  Const        r4, [{"c_customer_sk": 1, "c_first_name": "Alice", "c_last_name": "Smith"}]
  // from ss in store_sales
  Const        r5, []
  // group by { ticket: ss.ss_ticket_number, customer_sk: ss.ss_customer_sk, city: s.s_city } into g
  Const        r6, "ticket"
  Const        r7, "ss_ticket_number"
  Const        r8, "customer_sk"
  Const        r9, "ss_customer_sk"
  Const        r10, "city"
  Const        r11, "s_city"
  // where (hd.hd_dep_count == 2 || hd.hd_vehicle_count > 1) &&
  Const        r12, "hd_dep_count"
  Const        r13, "hd_vehicle_count"
  // d.d_dow == 1 &&
  Const        r14, "d_dow"
  // (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) &&
  Const        r15, "d_year"
  // s.s_number_employees >= 200 && s.s_number_employees <= 295
  Const        r16, "s_number_employees"
  // select { key: g.key, amt: sum(from x in g select x.ss.ss_coupon_amt), profit: sum(from x in g select x.ss.ss_net_profit) }
  Const        r17, "key"
  Const        r18, "amt"
  Const        r19, "ss"
  Const        r20, "ss_coupon_amt"
  Const        r21, "profit"
  Const        r22, "ss_net_profit"
  // from ss in store_sales
  MakeMap      r23, 0, r0
  Const        r25, []
  Move         r24, r25
  IterPrep     r26, r3
  Len          r27, r26
  Const        r28, 0
L12:
  LessInt      r29, r28, r27
  JumpIfFalse  r29, L0
  Index        r31, r26, r28
  // join d in date_dim on d.d_date_sk == ss.ss_sold_date_sk
  IterPrep     r32, r0
  Len          r33, r32
  Const        r34, 0
L11:
  LessInt      r35, r34, r33
  JumpIfFalse  r35, L1
  Index        r37, r32, r34
  Const        r38, "d_date_sk"
  Index        r39, r37, r38
  Const        r40, "ss_sold_date_sk"
  Index        r41, r31, r40
  Equal        r42, r39, r41
  JumpIfFalse  r42, L2
  // join s in store on s.s_store_sk == ss.ss_store_sk
  IterPrep     r43, r1
  Len          r44, r43
  Const        r45, 0
L10:
  LessInt      r46, r45, r44
  JumpIfFalse  r46, L2
  Index        r48, r43, r45
  Const        r49, "s_store_sk"
  Index        r50, r48, r49
  Const        r51, "ss_store_sk"
  Index        r52, r31, r51
  Equal        r53, r50, r52
  JumpIfFalse  r53, L3
  // join hd in household_demographics on hd.hd_demo_sk == ss.ss_hdemo_sk
  IterPrep     r54, r2
  Len          r55, r54
  Const        r56, 0
L9:
  LessInt      r57, r56, r55
  JumpIfFalse  r57, L3
  Index        r59, r54, r56
  Const        r60, "hd_demo_sk"
  Index        r61, r59, r60
  Const        r62, "ss_hdemo_sk"
  Index        r63, r31, r62
  Equal        r64, r61, r63
  JumpIfFalse  r64, L4
  // where (hd.hd_dep_count == 2 || hd.hd_vehicle_count > 1) &&
  Index        r65, r59, r12
  Index        r66, r59, r13
  Const        r67, 1
  Less         r68, r67, r66
  Const        r69, 2
  Equal        r70, r65, r69
  JumpIfTrue   r70, L5
  Move         r70, r68
L5:
  // s.s_number_employees >= 200 && s.s_number_employees <= 295
  Index        r71, r48, r16
  Const        r72, 200
  LessEq       r73, r72, r71
  Index        r74, r48, r16
  Const        r75, 295
  LessEq       r76, r74, r75
  // d.d_dow == 1 &&
  Index        r77, r37, r14
  Equal        r78, r77, r67
  // where (hd.hd_dep_count == 2 || hd.hd_vehicle_count > 1) &&
  JumpIfFalse  r70, L6
  Move         r70, r78
  // d.d_dow == 1 &&
  JumpIfFalse  r70, L6
  // (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) &&
  Index        r79, r37, r15
  Const        r80, 1998
  Equal        r81, r79, r80
  Index        r82, r37, r15
  Const        r83, 1999
  Equal        r84, r82, r83
  Index        r85, r37, r15
  Const        r86, 2000
  Equal        r87, r85, r86
  JumpIfTrue   r81, L7
  Move         r81, r84
  JumpIfTrue   r81, L7
L7:
  // d.d_dow == 1 &&
  Move         r70, r87
  // (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) &&
  JumpIfFalse  r70, L6
  Move         r70, r73
  // s.s_number_employees >= 200 && s.s_number_employees <= 295
  JumpIfFalse  r70, L6
  Move         r70, r76
L6:
  // where (hd.hd_dep_count == 2 || hd.hd_vehicle_count > 1) &&
  JumpIfFalse  r70, L4
  // from ss in store_sales
  Move         r88, r31
  Const        r89, "d"
  Move         r90, r37
  Const        r91, "s"
  Move         r92, r48
  Const        r93, "hd"
  Move         r94, r59
  MakeMap      r95, 4, r19
  // group by { ticket: ss.ss_ticket_number, customer_sk: ss.ss_customer_sk, city: s.s_city } into g
  Const        r96, "ticket"
  Index        r97, r31, r7
  Const        r98, "customer_sk"
  Index        r99, r31, r9
  Const        r100, "city"
  Index        r101, r48, r11
  Move         r102, r96
  Move         r103, r97
  Move         r104, r98
  Move         r105, r99
  Move         r106, r100
  Move         r107, r101
  MakeMap      r108, 3, r102
  Str          r109, r108
  In           r110, r109, r23
  JumpIfTrue   r110, L8
  // from ss in store_sales
  Const        r111, []
  Const        r112, "__group__"
  Const        r113, true
  Const        r114, "key"
  // group by { ticket: ss.ss_ticket_number, customer_sk: ss.ss_customer_sk, city: s.s_city } into g
  Move         r115, r108
  // from ss in store_sales
  Const        r116, "items"
  Move         r117, r111
  Const        r118, "count"
  Const        r119, 0
  Move         r120, r112
  Move         r121, r113
  Move         r122, r114
  Move         r123, r115
  Move         r124, r116
  Move         r125, r117
  Move         r126, r118
  Move         r127, r119
  MakeMap      r128, 4, r120
  SetIndex     r23, r109, r128
  Append       r24, r24, r128
L8:
  Const        r130, "items"
  Index        r131, r23, r109
  Index        r132, r131, r130
  Append       r133, r132, r95
  SetIndex     r131, r130, r133
  Const        r134, "count"
  Index        r135, r131, r134
  AddInt       r136, r135, r67
  SetIndex     r131, r134, r136
L4:
  // join hd in household_demographics on hd.hd_demo_sk == ss.ss_hdemo_sk
  AddInt       r56, r56, r67
  Jump         L9
L3:
  // join s in store on s.s_store_sk == ss.ss_store_sk
  AddInt       r45, r45, r67
  Jump         L10
L2:
  // join d in date_dim on d.d_date_sk == ss.ss_sold_date_sk
  AddInt       r34, r34, r67
  Jump         L11
L1:
  // from ss in store_sales
  AddInt       r28, r28, r67
  Jump         L12
L0:
  Const        r138, 0
  Move         r137, r138
  Len          r139, r24
L18:
  LessInt      r140, r137, r139
  JumpIfFalse  r140, L13
  Index        r142, r24, r137
  // select { key: g.key, amt: sum(from x in g select x.ss.ss_coupon_amt), profit: sum(from x in g select x.ss.ss_net_profit) }
  Const        r143, "key"
  Index        r144, r142, r17
  Const        r145, "amt"
  Const        r146, []
  IterPrep     r147, r142
  Len          r148, r147
  Move         r149, r138
L15:
  LessInt      r150, r149, r148
  JumpIfFalse  r150, L14
  Index        r152, r147, r149
  Index        r153, r152, r19
  Index        r154, r153, r20
  Append       r146, r146, r154
  AddInt       r149, r149, r67
  Jump         L15
L14:
  Sum          r156, r146
  Const        r157, "profit"
  Const        r158, []
  IterPrep     r159, r142
  Len          r160, r159
  Move         r161, r138
L17:
  LessInt      r162, r161, r160
  JumpIfFalse  r162, L16
  Index        r152, r159, r161
  Index        r164, r152, r19
  Index        r165, r164, r22
  Append       r158, r158, r165
  AddInt       r161, r161, r67
  Jump         L17
L16:
  Sum          r167, r158
  Move         r168, r143
  Move         r169, r144
  Move         r170, r145
  Move         r171, r156
  Move         r172, r157
  Move         r173, r167
  MakeMap      r174, 3, r168
  // from ss in store_sales
  Append       r5, r5, r174
  AddInt       r137, r137, r67
  Jump         L18
L13:
  // from a in agg
  Const        r176, []
  IterPrep     r177, r5
  Len          r178, r177
  // join c in customer on c.c_customer_sk == a.key.customer_sk
  IterPrep     r179, r4
  Len          r180, r179
  Const        r181, "c_customer_sk"
  // select { c_last_name: c.c_last_name, c_first_name: c.c_first_name, s_city: a.key.city, ss_ticket_number: a.key.ticket, amt: a.amt, profit: a.profit }
  Const        r182, "c_last_name"
  Const        r183, "c_first_name"
  // from a in agg
  Const        r184, 0
L23:
  LessInt      r185, r184, r178
  JumpIfFalse  r185, L19
  Index        r187, r177, r184
  // join c in customer on c.c_customer_sk == a.key.customer_sk
  Const        r188, 0
L22:
  LessInt      r189, r188, r180
  JumpIfFalse  r189, L20
  Index        r191, r179, r188
  Index        r192, r191, r181
  Index        r193, r187, r17
  Index        r194, r193, r8
  Equal        r195, r192, r194
  JumpIfFalse  r195, L21
  // select { c_last_name: c.c_last_name, c_first_name: c.c_first_name, s_city: a.key.city, ss_ticket_number: a.key.ticket, amt: a.amt, profit: a.profit }
  Const        r196, "c_last_name"
  Index        r197, r191, r182
  Const        r198, "c_first_name"
  Index        r199, r191, r183
  Const        r200, "s_city"
  Index        r201, r187, r17
  Index        r202, r201, r10
  Const        r203, "ss_ticket_number"
  Index        r204, r187, r17
  Index        r205, r204, r6
  Const        r206, "amt"
  Index        r207, r187, r18
  Const        r208, "profit"
  Index        r209, r187, r21
  Move         r210, r196
  Move         r211, r197
  Move         r212, r198
  Move         r213, r199
  Move         r214, r200
  Move         r215, r202
  Move         r216, r203
  Move         r217, r205
  Move         r218, r206
  Move         r219, r207
  Move         r220, r208
  Move         r221, r209
  MakeMap      r222, 6, r210
  // sort by [c.c_last_name, c.c_first_name, a.key.city, a.profit]
  Index        r224, r191, r182
  Index        r225, r191, r183
  Move         r226, r225
  Index        r227, r187, r17
  Index        r229, r227, r10
  Index        r231, r187, r21
  MakeList     r233, 4, r224
  // from a in agg
  Move         r234, r222
  MakeList     r235, 2, r233
  Append       r176, r176, r235
L21:
  // join c in customer on c.c_customer_sk == a.key.customer_sk
  AddInt       r188, r188, r67
  Jump         L22
L20:
  // from a in agg
  AddInt       r184, r184, r67
  Jump         L23
L19:
  // sort by [c.c_last_name, c.c_first_name, a.key.city, a.profit]
  Sort         r176, r176
  // json(result)
  JSON         r176
  // expect result == [
  Const        r238, [{"amt": 5, "c_first_name": "Alice", "c_last_name": "Smith", "profit": 10, "s_city": "CityA", "ss_ticket_number": 1}]
  Equal        r239, r176, r238
  Expect       r239
  Return       r0
