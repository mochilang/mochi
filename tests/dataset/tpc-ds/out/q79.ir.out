func main (regs=246)
  // let date_dim = [
  Const        r0, [{"d_date_sk": 1, "d_dow": 1, "d_year": 1999}]
  // let store = [
  Const        r1, [{"s_city": "CityA", "s_number_employees": 250, "s_store_sk": 1}]
  // let household_demographics = [
  Const        r2, [{"hd_demo_sk": 1, "hd_dep_count": 2, "hd_vehicle_count": 1}]
  // let store_sales = [
  Const        r3, [{"ss_coupon_amt": 5.0, "ss_customer_sk": 1, "ss_hdemo_sk": 1, "ss_net_profit": 10.0, "ss_sold_date_sk": 1, "ss_store_sk": 1, "ss_ticket_number": 1}]
  // let customer = [
  Const        r4, [{"c_customer_sk": 1, "c_first_name": "Alice", "c_last_name": "Smith"}]
  // from ss in store_sales
  Const        r5, []
  // group by { ticket: ss.ss_ticket_number, customer_sk: ss.ss_customer_sk, city: s.s_city } into g
  Const        r6, "ticket"
  Const        r7, "ss_ticket_number"
  Const        r8, "customer_sk"
  Const        r9, "ss_customer_sk"
  Const        r10, "city"
  Const        r11, "s_city"
  // where (hd.hd_dep_count == 2 || hd.hd_vehicle_count > 1) &&
  Const        r12, "hd_dep_count"
  Const        r13, "hd_vehicle_count"
  // d.d_dow == 1 &&
  Const        r14, "d_dow"
  // (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) &&
  Const        r15, "d_year"
  // s.s_number_employees >= 200 && s.s_number_employees <= 295
  Const        r16, "s_number_employees"
  // select { key: g.key, amt: sum(from x in g select x.ss.ss_coupon_amt), profit: sum(from x in g select x.ss.ss_net_profit) }
  Const        r17, "key"
  Const        r18, "amt"
  Const        r19, "ss"
  Const        r20, "ss_coupon_amt"
  Const        r21, "profit"
  Const        r22, "ss_net_profit"
  // from ss in store_sales
  MakeMap      r23, 0, r0
  Const        r25, []
  Move         r24, r25
  IterPrep     r26, r3
  Len          r27, r26
  Const        r28, 0
L12:
  LessInt      r29, r28, r27
  JumpIfFalse  r29, L0
  Index        r30, r26, r28
  Move         r31, r30
  // join d in date_dim on d.d_date_sk == ss.ss_sold_date_sk
  IterPrep     r32, r0
  Len          r33, r32
  Const        r34, 0
L11:
  LessInt      r35, r34, r33
  JumpIfFalse  r35, L1
  Index        r36, r32, r34
  Move         r37, r36
  Const        r38, "d_date_sk"
  Index        r39, r37, r38
  Const        r40, "ss_sold_date_sk"
  Index        r41, r31, r40
  Equal        r42, r39, r41
  JumpIfFalse  r42, L2
  // join s in store on s.s_store_sk == ss.ss_store_sk
  IterPrep     r43, r1
  Len          r44, r43
  Const        r45, 0
L10:
  LessInt      r46, r45, r44
  JumpIfFalse  r46, L2
  Index        r47, r43, r45
  Move         r48, r47
  Const        r49, "s_store_sk"
  Index        r50, r48, r49
  Const        r51, "ss_store_sk"
  Index        r52, r31, r51
  Equal        r53, r50, r52
  JumpIfFalse  r53, L3
  // join hd in household_demographics on hd.hd_demo_sk == ss.ss_hdemo_sk
  IterPrep     r54, r2
  Len          r55, r54
  Const        r56, 0
L9:
  LessInt      r57, r56, r55
  JumpIfFalse  r57, L3
  Index        r58, r54, r56
  Move         r59, r58
  Const        r60, "hd_demo_sk"
  Index        r61, r59, r60
  Const        r62, "ss_hdemo_sk"
  Index        r63, r31, r62
  Equal        r64, r61, r63
  JumpIfFalse  r64, L4
  // where (hd.hd_dep_count == 2 || hd.hd_vehicle_count > 1) &&
  Index        r65, r59, r12
  Index        r66, r59, r13
  Const        r67, 1
  Less         r68, r67, r66
  Const        r69, 2
  Equal        r70, r65, r69
  Move         r71, r70
  JumpIfTrue   r71, L5
  Move         r71, r68
L5:
  // s.s_number_employees >= 200 && s.s_number_employees <= 295
  Index        r72, r48, r16
  Const        r73, 200
  LessEq       r74, r73, r72
  Index        r75, r48, r16
  Const        r76, 295
  LessEq       r77, r75, r76
  // d.d_dow == 1 &&
  Index        r78, r37, r14
  Equal        r79, r78, r67
  // where (hd.hd_dep_count == 2 || hd.hd_vehicle_count > 1) &&
  Move         r80, r71
  JumpIfFalse  r80, L6
  Move         r80, r79
  // d.d_dow == 1 &&
  JumpIfFalse  r80, L6
  // (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) &&
  Index        r81, r37, r15
  Const        r82, 1998
  Equal        r83, r81, r82
  Index        r84, r37, r15
  Const        r85, 1999
  Equal        r86, r84, r85
  Index        r87, r37, r15
  Const        r88, 2000
  Equal        r89, r87, r88
  Move         r90, r83
  JumpIfTrue   r90, L7
  Move         r90, r86
  JumpIfTrue   r90, L7
  Move         r90, r89
L7:
  // d.d_dow == 1 &&
  Move         r80, r90
  // (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) &&
  JumpIfFalse  r80, L6
  Move         r80, r74
  // s.s_number_employees >= 200 && s.s_number_employees <= 295
  JumpIfFalse  r80, L6
  Move         r80, r77
L6:
  // where (hd.hd_dep_count == 2 || hd.hd_vehicle_count > 1) &&
  JumpIfFalse  r80, L4
  // from ss in store_sales
  Move         r91, r31
  Const        r92, "d"
  Move         r93, r37
  Const        r94, "s"
  Move         r95, r48
  Const        r96, "hd"
  Move         r97, r59
  Move         r98, r19
  Move         r99, r91
  Move         r100, r92
  Move         r101, r93
  Move         r102, r94
  Move         r103, r95
  Move         r104, r96
  Move         r105, r97
  MakeMap      r106, 4, r98
  // group by { ticket: ss.ss_ticket_number, customer_sk: ss.ss_customer_sk, city: s.s_city } into g
  Const        r107, "ticket"
  Index        r108, r31, r7
  Const        r109, "customer_sk"
  Index        r110, r31, r9
  Const        r111, "city"
  Index        r112, r48, r11
  Move         r113, r107
  Move         r114, r108
  Move         r115, r109
  Move         r116, r110
  Move         r117, r111
  Move         r118, r112
  MakeMap      r119, 3, r113
  Str          r120, r119
  In           r121, r120, r23
  JumpIfTrue   r121, L8
  // from ss in store_sales
  Const        r122, "__group__"
  Const        r123, true
  // group by { ticket: ss.ss_ticket_number, customer_sk: ss.ss_customer_sk, city: s.s_city } into g
  Move         r124, r119
  // from ss in store_sales
  Const        r125, "items"
  Move         r126, r25
  Const        r127, "count"
  Const        r128, 0
  Move         r129, r122
  Move         r130, r123
  Move         r131, r17
  Move         r132, r124
  Move         r133, r125
  Move         r134, r126
  Move         r135, r127
  Move         r136, r128
  MakeMap      r137, 4, r129
  SetIndex     r23, r120, r137
  Append       r138, r24, r137
  Move         r24, r138
L8:
  Index        r139, r23, r120
  Index        r140, r139, r125
  Append       r141, r140, r106
  SetIndex     r139, r125, r141
  Index        r142, r139, r127
  AddInt       r143, r142, r67
  SetIndex     r139, r127, r143
L4:
  // join hd in household_demographics on hd.hd_demo_sk == ss.ss_hdemo_sk
  AddInt       r56, r56, r67
  Jump         L9
L3:
  // join s in store on s.s_store_sk == ss.ss_store_sk
  AddInt       r45, r45, r67
  Jump         L10
L2:
  // join d in date_dim on d.d_date_sk == ss.ss_sold_date_sk
  AddInt       r34, r34, r67
  Jump         L11
L1:
  // from ss in store_sales
  AddInt       r28, r28, r67
  Jump         L12
L0:
  Move         r144, r128
  Len          r145, r24
L18:
  LessInt      r146, r144, r145
  JumpIfFalse  r146, L13
  Index        r147, r24, r144
  Move         r148, r147
  // select { key: g.key, amt: sum(from x in g select x.ss.ss_coupon_amt), profit: sum(from x in g select x.ss.ss_net_profit) }
  Const        r149, "key"
  Index        r150, r148, r17
  Const        r151, "amt"
  Const        r152, []
  IterPrep     r153, r148
  Len          r154, r153
  Move         r155, r128
L15:
  LessInt      r156, r155, r154
  JumpIfFalse  r156, L14
  Index        r157, r153, r155
  Move         r158, r157
  Index        r159, r158, r19
  Index        r160, r159, r20
  Append       r161, r152, r160
  Move         r152, r161
  AddInt       r155, r155, r67
  Jump         L15
L14:
  Sum          r162, r152
  Const        r163, "profit"
  Const        r164, []
  IterPrep     r165, r148
  Len          r166, r165
  Move         r167, r128
L17:
  LessInt      r168, r167, r166
  JumpIfFalse  r168, L16
  Index        r169, r165, r167
  Move         r158, r169
  Index        r170, r158, r19
  Index        r171, r170, r22
  Append       r172, r164, r171
  Move         r164, r172
  AddInt       r167, r167, r67
  Jump         L17
L16:
  Sum          r173, r164
  Move         r174, r149
  Move         r175, r150
  Move         r176, r151
  Move         r177, r162
  Move         r178, r163
  Move         r179, r173
  MakeMap      r180, 3, r174
  // from ss in store_sales
  Append       r181, r5, r180
  Move         r5, r181
  AddInt       r144, r144, r67
  Jump         L18
L13:
  // from a in agg
  Const        r182, []
  IterPrep     r183, r5
  Len          r184, r183
  // join c in customer on c.c_customer_sk == a.key.customer_sk
  IterPrep     r185, r4
  Len          r186, r185
  Const        r187, "c_customer_sk"
  // select { c_last_name: c.c_last_name, c_first_name: c.c_first_name, s_city: a.key.city, ss_ticket_number: a.key.ticket, amt: a.amt, profit: a.profit }
  Const        r188, "c_last_name"
  Const        r189, "c_first_name"
  // from a in agg
  Const        r190, 0
L23:
  LessInt      r191, r190, r184
  JumpIfFalse  r191, L19
  Index        r192, r183, r190
  Move         r193, r192
  // join c in customer on c.c_customer_sk == a.key.customer_sk
  Const        r194, 0
L22:
  LessInt      r195, r194, r186
  JumpIfFalse  r195, L20
  Index        r196, r185, r194
  Move         r197, r196
  Index        r198, r197, r187
  Index        r199, r193, r17
  Index        r200, r199, r8
  Equal        r201, r198, r200
  JumpIfFalse  r201, L21
  // select { c_last_name: c.c_last_name, c_first_name: c.c_first_name, s_city: a.key.city, ss_ticket_number: a.key.ticket, amt: a.amt, profit: a.profit }
  Const        r202, "c_last_name"
  Index        r203, r197, r188
  Const        r204, "c_first_name"
  Index        r205, r197, r189
  Const        r206, "s_city"
  Index        r207, r193, r17
  Index        r208, r207, r10
  Const        r209, "ss_ticket_number"
  Index        r210, r193, r17
  Index        r211, r210, r6
  Const        r212, "amt"
  Index        r213, r193, r18
  Const        r214, "profit"
  Index        r215, r193, r21
  Move         r216, r202
  Move         r217, r203
  Move         r218, r204
  Move         r219, r205
  Move         r220, r206
  Move         r221, r208
  Move         r222, r209
  Move         r223, r211
  Move         r224, r212
  Move         r225, r213
  Move         r226, r214
  Move         r227, r215
  MakeMap      r228, 6, r216
  // sort by [c.c_last_name, c.c_first_name, a.key.city, a.profit]
  Index        r229, r197, r188
  Move         r230, r229
  Index        r231, r197, r189
  Move         r232, r231
  Index        r233, r193, r17
  Index        r234, r233, r10
  Move         r235, r234
  Index        r236, r193, r21
  Move         r237, r236
  MakeList     r238, 4, r230
  Move         r239, r238
  // from a in agg
  Move         r240, r228
  MakeList     r241, 2, r239
  Append       r242, r182, r241
  Move         r182, r242
L21:
  // join c in customer on c.c_customer_sk == a.key.customer_sk
  AddInt       r194, r194, r67
  Jump         L22
L20:
  // from a in agg
  AddInt       r190, r190, r67
  Jump         L23
L19:
  // sort by [c.c_last_name, c.c_first_name, a.key.city, a.profit]
  Sort         r243, r182
  // from a in agg
  Move         r182, r243
  // json(result)
  JSON         r182
  // expect result == [
  Const        r244, [{"amt": 5.0, "c_first_name": "Alice", "c_last_name": "Smith", "profit": 10.0, "s_city": "CityA", "ss_ticket_number": 1}]
  Equal        r245, r182, r244
  Expect       r245
  Return       r0
