func main (regs=398)
L20:
  // let date_dim = [
  Const        r0, [{"d_date_sk": 1, "d_dow": 1, "d_year": 1999}]
  // let store = [
  Const        r1, [{"s_city": "CityA", "s_number_employees": 250, "s_store_sk": 1}]
  // let household_demographics = [
  Const        r2, [{"hd_demo_sk": 1, "hd_dep_count": 2, "hd_vehicle_count": 1}]
  // let store_sales = [
  Const        r3, [{"ss_coupon_amt": 5, "ss_customer_sk": 1, "ss_hdemo_sk": 1, "ss_net_profit": 10, "ss_sold_date_sk": 1, "ss_store_sk": 1, "ss_ticket_number": 1}]
  // let customer = [
  Const        r4, [{"c_customer_sk": 1, "c_first_name": "Alice", "c_last_name": "Smith"}]
  // from ss in store_sales
  Const        r5, []
  MakeMap      r28, 0, r0
  Const        r29, []
  IterPrep     r31, r3
  Len          r32, r31
  Const        r33, 0
L1:
  LessInt      r34, r33, r32
  JumpIfFalse  r34, L0
  Index        r36, r31, r33
  // join d in date_dim on d.d_date_sk == ss.ss_sold_date_sk
  IterPrep     r37, r0
  Len          r38, r37
  Const        r39, 0
L2:
  LessInt      r40, r39, r38
  JumpIfFalse  r40, L1
  Index        r42, r37, r39
  Const        r43, "d_date_sk"
  Index        r44, r42, r43
  Const        r45, "ss_sold_date_sk"
  Index        r46, r36, r45
  Equal        r47, r44, r46
  JumpIfFalse  r47, L2
  // join s in store on s.s_store_sk == ss.ss_store_sk
  IterPrep     r48, r1
  Len          r49, r48
  Const        r50, 0
L13:
  LessInt      r51, r50, r49
  JumpIfFalse  r51, L2
  Index        r53, r48, r50
  Const        r54, "s_store_sk"
  Index        r55, r53, r54
  Const        r56, "ss_store_sk"
  Index        r57, r36, r56
  Equal        r58, r55, r57
  JumpIfFalse  r58, L3
  // join hd in household_demographics on hd.hd_demo_sk == ss.ss_hdemo_sk
  IterPrep     r59, r2
  Len          r60, r59
  Const        r61, 0
L12:
  LessInt      r62, r61, r60
  JumpIfFalse  r62, L3
  Index        r64, r59, r61
  Const        r65, "hd_demo_sk"
  Index        r66, r64, r65
  Const        r67, "ss_hdemo_sk"
  Index        r68, r36, r67
  Equal        r69, r66, r68
  JumpIfFalse  r69, L4
  // where (hd.hd_dep_count == 2 || hd.hd_vehicle_count > 1) &&
  Const        r70, "hd_dep_count"
  Index        r71, r64, r70
  Const        r72, "hd_vehicle_count"
  Index        r73, r64, r72
  Const        r74, 1
  Less         r75, r74, r73
  Const        r76, 2
  Equal        r78, r71, r76
  JumpIfTrue   r78, L5
  Move         r78, r75
L5:
  // s.s_number_employees >= 200 && s.s_number_employees <= 295
  Const        r79, "s_number_employees"
  Index        r80, r53, r79
  Const        r81, 200
  LessEq       r82, r81, r80
  Const        r83, "s_number_employees"
  Index        r84, r53, r83
  Const        r85, 295
  LessEq       r86, r84, r85
  // d.d_dow == 1 &&
  Const        r87, "d_dow"
  Index        r88, r42, r87
  Const        r89, 1
  Equal        r90, r88, r89
  // where (hd.hd_dep_count == 2 || hd.hd_vehicle_count > 1) &&
  Move         r91, r78
  JumpIfFalse  r91, L6
L6:
  // d.d_dow == 1 &&
  Move         r92, r90
  JumpIfFalse  r92, L7
  // (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) &&
  Const        r93, "d_year"
  Index        r94, r42, r93
  Const        r95, 1998
  Equal        r96, r94, r95
  Const        r97, "d_year"
  Index        r98, r42, r97
  Const        r99, 1999
  Equal        r100, r98, r99
  Const        r101, "d_year"
  Index        r102, r42, r101
  Const        r103, 2000
  Equal        r104, r102, r103
  Move         r105, r96
  JumpIfTrue   r105, L8
L8:
  Move         r106, r100
  JumpIfTrue   r106, L7
L7:
  Move         r107, r104
  JumpIfFalse  r107, L9
L9:
  // s.s_number_employees >= 200 && s.s_number_employees <= 295
  Move         r108, r82
  JumpIfFalse  r108, L10
  Move         r108, r86
L10:
  // where (hd.hd_dep_count == 2 || hd.hd_vehicle_count > 1) &&
  JumpIfFalse  r108, L4
  // from ss in store_sales
  Const        r109, "ss"
  Move         r110, r36
  Const        r111, "d"
  Move         r112, r42
  Const        r113, "s"
  Move         r114, r53
  Const        r115, "hd"
  Move         r116, r64
  MakeMap      r117, 4, r109
  // group by { ticket: ss.ss_ticket_number, customer_sk: ss.ss_customer_sk, city: s.s_city } into g
  Const        r118, "ticket"
  Const        r119, "ss_ticket_number"
  Index        r120, r36, r119
  Const        r121, "customer_sk"
  Const        r122, "ss_customer_sk"
  Index        r123, r36, r122
  Const        r124, "city"
  Const        r125, "s_city"
  Index        r126, r53, r125
  Move         r127, r118
  Move         r128, r120
  Move         r129, r121
  Move         r130, r123
  Move         r131, r124
  Move         r132, r126
  MakeMap      r133, 3, r127
  Str          r134, r133
  In           r135, r134, r28
  JumpIfTrue   r135, L11
  // from ss in store_sales
  Const        r136, []
  Const        r137, "__group__"
  Const        r138, true
  Const        r139, "key"
  // group by { ticket: ss.ss_ticket_number, customer_sk: ss.ss_customer_sk, city: s.s_city } into g
  Move         r140, r133
  // from ss in store_sales
  Const        r141, "items"
  Move         r142, r136
  Const        r143, "count"
  Const        r144, 0
  Move         r145, r137
  Move         r146, r138
  Move         r147, r139
  Move         r148, r140
  Move         r149, r141
  Move         r150, r142
  Move         r151, r143
  Move         r152, r144
  MakeMap      r153, 4, r145
  SetIndex     r28, r134, r153
  Append       r29, r29, r153
L11:
  Const        r155, "items"
  Index        r156, r28, r134
  Index        r157, r156, r155
  Append       r158, r157, r117
  SetIndex     r156, r155, r158
  Const        r159, "count"
  Index        r160, r156, r159
  Const        r161, 1
  AddInt       r162, r160, r161
  SetIndex     r156, r159, r162
L4:
  // join hd in household_demographics on hd.hd_demo_sk == ss.ss_hdemo_sk
  Const        r163, 1
  AddInt       r61, r61, r163
  Jump         L12
L3:
  // join s in store on s.s_store_sk == ss.ss_store_sk
  Const        r164, 1
  AddInt       r50, r50, r164
  Jump         L13
L0:
  // from ss in store_sales
  Const        r167, 0
  Len          r169, r29
L19:
  LessInt      r170, r167, r169
  JumpIfFalse  r170, L14
  Index        r172, r29, r167
  // select { key: g.key, amt: sum(from x in g select x.ss.ss_coupon_amt), profit: sum(from x in g select x.ss.ss_net_profit) }
  Const        r173, "key"
  Const        r174, "key"
  Index        r175, r172, r174
  Const        r176, "amt"
  IterPrep     r180, r172
  Len          r181, r180
  Const        r182, 0
L16:
  LessInt      r184, r182, r181
  JumpIfFalse  r184, L15
  Const        r192, 1
  AddInt       r182, r182, r192
  Jump         L16
L15:
  Const        r193, 0
  Const        r194, "profit"
  Const        r195, []
  IterPrep     r198, r172
  Len          r199, r198
  Const        r200, 0
L18:
  LessInt      r202, r200, r199
  JumpIfFalse  r202, L17
  Index        r186, r198, r200
  Const        r204, "ss"
  Index        r205, r186, r204
  Const        r206, "ss_net_profit"
  Index        r207, r205, r206
  Append       r195, r195, r207
  Const        r209, 1
  AddInt       r200, r200, r209
  Jump         L18
L17:
  Sum          r210, r195
  Move         r211, r173
  Move         r212, r175
  Move         r213, r176
  Move         r214, r193
  Move         r215, r194
  Move         r216, r210
  MakeMap      r217, 3, r211
  // from ss in store_sales
  Append       r5, r5, r217
  Const        r219, 1
  AddInt       r167, r167, r219
  Jump         L19
L14:
  // from a in agg
  Const        r220, []
  IterPrep     r221, r5
  Len          r222, r221
  // join c in customer on c.c_customer_sk == a.key.customer_sk
  IterPrep     r223, r4
  Len          r224, r223
  // from a in agg
  Const        r225, 0
  EqualInt     r226, r222, r225
  JumpIfTrue   r226, L20
  EqualInt     r227, r224, r225
  JumpIfTrue   r227, L20
  LessEq       r228, r224, r222
  JumpIfFalse  r228, L21
  // join c in customer on c.c_customer_sk == a.key.customer_sk
  MakeMap      r229, 0, r0
  Const        r230, 0
L24:
  LessInt      r231, r230, r224
  JumpIfFalse  r231, L22
  Index        r232, r223, r230
  Move         r233, r232
  Const        r234, "c_customer_sk"
  Index        r235, r233, r234
  Index        r236, r229, r235
  Const        r237, nil
  NotEqual     r238, r236, r237
  JumpIfTrue   r238, L23
  MakeList     r239, 0, r0
  SetIndex     r229, r235, r239
L23:
  Index        r236, r229, r235
  Append       r240, r236, r232
  SetIndex     r229, r235, r240
  Const        r241, 1
  AddInt       r230, r230, r241
  Jump         L24
L22:
  // from a in agg
  Const        r242, 0
L27:
  LessInt      r243, r242, r222
  JumpIfFalse  r243, L20
  Index        r245, r221, r242
  // join c in customer on c.c_customer_sk == a.key.customer_sk
  Const        r246, "key"
  Index        r247, r245, r246
  Const        r248, "customer_sk"
  Index        r249, r247, r248
  // from a in agg
  Index        r250, r229, r249
  Const        r251, nil
  NotEqual     r252, r250, r251
  JumpIfFalse  r252, L25
  Len          r253, r250
  Const        r254, 0
L26:
  LessInt      r255, r254, r253
  JumpIfFalse  r255, L25
  Index        r233, r250, r254
  // select { c_last_name: c.c_last_name, c_first_name: c.c_first_name, s_city: a.key.city, ss_ticket_number: a.key.ticket, amt: a.amt, profit: a.profit }
  Const        r257, "c_last_name"
  Const        r258, "c_last_name"
  Index        r259, r233, r258
  Const        r260, "c_first_name"
  Const        r261, "c_first_name"
  Index        r262, r233, r261
  Const        r263, "s_city"
  Const        r264, "key"
  Index        r265, r245, r264
  Const        r266, "city"
  Index        r267, r265, r266
  Const        r268, "ss_ticket_number"
  Const        r269, "key"
  Index        r270, r245, r269
  Const        r271, "ticket"
  Index        r272, r270, r271
  Const        r273, "amt"
  Const        r274, "amt"
  Index        r275, r245, r274
  Const        r276, "profit"
  Const        r277, "profit"
  Index        r278, r245, r277
  Move         r279, r257
  Move         r280, r259
  Move         r281, r260
  Move         r282, r262
  Move         r283, r263
  Move         r284, r267
  Move         r285, r268
  Move         r286, r272
  Move         r287, r273
  Move         r288, r275
  Move         r289, r276
  Move         r290, r278
  MakeMap      r291, 6, r279
  // sort by [c.c_last_name, c.c_first_name, a.key.city, a.profit]
  Const        r292, "c_last_name"
  Index        r294, r233, r292
  Const        r295, "c_first_name"
  Index        r296, r233, r295
  Move         r297, r296
  MakeList     r307, 4, r294
  // from a in agg
  Move         r308, r291
  MakeList     r309, 2, r307
  Append       r220, r220, r309
  Jump         L26
L25:
  Const        r312, 1
  AddInt       r242, r242, r312
  Jump         L27
L21:
  MakeMap      r313, 0, r0
  Const        r314, 0
L30:
  LessInt      r315, r314, r222
  JumpIfFalse  r315, L28
  Index        r316, r221, r314
  Move         r245, r316
  // join c in customer on c.c_customer_sk == a.key.customer_sk
  Const        r317, "key"
  Index        r318, r245, r317
  Const        r319, "customer_sk"
  Index        r320, r318, r319
  // from a in agg
  Index        r321, r313, r320
  Const        r322, nil
  NotEqual     r323, r321, r322
  JumpIfTrue   r323, L29
  MakeList     r324, 0, r0
  SetIndex     r313, r320, r324
L29:
  Index        r321, r313, r320
  Append       r325, r321, r316
  SetIndex     r313, r320, r325
  Const        r326, 1
  AddInt       r314, r314, r326
  Jump         L30
L28:
  // join c in customer on c.c_customer_sk == a.key.customer_sk
  Const        r327, 0
L34:
  LessInt      r328, r327, r224
  JumpIfFalse  r328, L31
  Index        r233, r223, r327
  Const        r330, "c_customer_sk"
  Index        r331, r233, r330
  Index        r332, r313, r331
  Const        r333, nil
  NotEqual     r334, r332, r333
  JumpIfFalse  r334, L32
  Len          r335, r332
  Const        r336, 0
L33:
  LessInt      r337, r336, r335
  JumpIfFalse  r337, L32
  Index        r245, r332, r336
  // select { c_last_name: c.c_last_name, c_first_name: c.c_first_name, s_city: a.key.city, ss_ticket_number: a.key.ticket, amt: a.amt, profit: a.profit }
  Const        r339, "c_last_name"
  Const        r340, "c_last_name"
  Index        r341, r233, r340
  Const        r342, "c_first_name"
  Const        r343, "c_first_name"
  Index        r344, r233, r343
  Const        r345, "s_city"
  Const        r346, "key"
  Index        r347, r245, r346
  Const        r348, "city"
  Index        r349, r347, r348
  Const        r350, "ss_ticket_number"
  Const        r351, "key"
  Index        r352, r245, r351
  Const        r353, "ticket"
  Index        r354, r352, r353
  Const        r355, "amt"
  Const        r356, "amt"
  Index        r357, r245, r356
  Const        r358, "profit"
  Const        r359, "profit"
  Index        r360, r245, r359
  Move         r361, r339
  Move         r362, r341
  Move         r363, r342
  Move         r364, r344
  Move         r365, r345
  Move         r366, r349
  Move         r367, r350
  Move         r368, r354
  Move         r369, r355
  Move         r370, r357
  Move         r371, r358
  Move         r372, r360
  MakeMap      r373, 6, r361
  // sort by [c.c_last_name, c.c_first_name, a.key.city, a.profit]
  Const        r374, "c_last_name"
  Index        r376, r233, r374
  Const        r377, "c_first_name"
  Index        r378, r233, r377
  Move         r379, r378
  MakeList     r389, 4, r376
  // from a in agg
  Move         r390, r373
  MakeList     r391, 2, r389
  Append       r220, r220, r391
  // join c in customer on c.c_customer_sk == a.key.customer_sk
  Const        r393, 1
  AddInt       r336, r336, r393
  Jump         L33
L32:
  Const        r394, 1
  AddInt       r327, r327, r394
  Jump         L34
L31:
  // sort by [c.c_last_name, c.c_first_name, a.key.city, a.profit]
  Sort         r220, r220
  // json(result)
  JSON         r220
  // expect result == [
  Const        r396, [{"amt": 5, "c_first_name": "Alice", "c_last_name": "Smith", "profit": 10, "s_city": "CityA", "ss_ticket_number": 1}]
  Equal        r397, r220, r396
  Expect       r397
  Return       r0
