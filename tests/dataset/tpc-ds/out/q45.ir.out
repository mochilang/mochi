func main (regs=176)
  // let web_sales = [
  Const        r0, [{"bill_customer_sk": 1, "item_sk": 1, "sales_price": 50, "sold_date_sk": 1}, {"bill_customer_sk": 2, "item_sk": 2, "sales_price": 30, "sold_date_sk": 1}]
  // let customer = [
  Const        r1, [{"c_current_addr_sk": 1, "c_customer_sk": 1}, {"c_current_addr_sk": 2, "c_customer_sk": 2}]
  // let customer_address = [
  Const        r2, [{"ca_address_sk": 1, "ca_zip": "85669"}, {"ca_address_sk": 2, "ca_zip": "99999"}]
  // let item = [
  Const        r3, [{"i_item_id": "I1", "i_item_sk": 1}, {"i_item_id": "I2", "i_item_sk": 2}]
  // let date_dim = [ { d_date_sk: 1, d_qoy: 1, d_year: 2020 } ]
  Const        r4, [{"d_date_sk": 1, "d_qoy": 1, "d_year": 2020}]
  // let dummy = null
  Const        r5, nil
  // let zip_list = ["85669", "86197", "88274", "83405", "86475", "85392", "85460", "80348", "81792"]
  Const        r6, ["85669", "86197", "88274", "83405", "86475", "85392", "85460", "80348", "81792"]
  // let item_ids = ["I2"]
  Const        r7, ["I2"]
  // let qoy = 1
  Const        r8, 1
  // let year = 2020
  Const        r9, 2020
  // from ws in web_sales
  Const        r10, []
  // group by ca.ca_zip into g
  Const        r11, "ca_zip"
  // where (substr(ca.ca_zip, 0, 5) in zip_list || i.i_item_id in item_ids) &&
  Const        r12, "ca_zip"
  Const        r13, "i_item_id"
  // d.d_qoy == qoy && d.d_year == year
  Const        r14, "d_qoy"
  Const        r15, "d_year"
  // select { ca_zip: g.key, sum_ws_sales_price: sum(from x in g select x.ws.sales_price) }
  Const        r16, "ca_zip"
  Const        r17, "key"
  Const        r18, "sum_ws_sales_price"
  Const        r19, "ws"
  Const        r20, "sales_price"
  // from ws in web_sales
  MakeMap      r21, 0, r0
  Const        r22, []
  IterPrep     r24, r0
  Len          r25, r24
  Const        r26, 0
L14:
  LessInt      r27, r26, r25
  JumpIfFalse  r27, L0
  Index        r29, r24, r26
  // join c in customer on ws.bill_customer_sk == c.c_customer_sk
  IterPrep     r30, r1
  Len          r31, r30
  Const        r32, 0
L13:
  LessInt      r33, r32, r31
  JumpIfFalse  r33, L1
  Index        r35, r30, r32
  Const        r36, "bill_customer_sk"
  Index        r37, r29, r36
  Const        r38, "c_customer_sk"
  Index        r39, r35, r38
  Equal        r40, r37, r39
  JumpIfFalse  r40, L2
  // join ca in customer_address on c.c_current_addr_sk == ca.ca_address_sk
  IterPrep     r41, r2
  Len          r42, r41
  Const        r43, 0
L12:
  LessInt      r44, r43, r42
  JumpIfFalse  r44, L2
  Index        r46, r41, r43
  Const        r47, "c_current_addr_sk"
  Index        r48, r35, r47
  Const        r49, "ca_address_sk"
  Index        r50, r46, r49
  Equal        r51, r48, r50
  JumpIfFalse  r51, L3
  // join i in item on ws.item_sk == i.i_item_sk
  IterPrep     r52, r3
  Len          r53, r52
  Const        r54, 0
L11:
  LessInt      r55, r54, r53
  JumpIfFalse  r55, L3
  Index        r57, r52, r54
  Const        r58, "item_sk"
  Index        r59, r29, r58
  Const        r60, "i_item_sk"
  Index        r61, r57, r60
  Equal        r62, r59, r61
  JumpIfFalse  r62, L4
  // join d in date_dim on ws.sold_date_sk == d.d_date_sk
  IterPrep     r63, r4
  Len          r64, r63
  Const        r65, 0
L10:
  LessInt      r66, r65, r64
  JumpIfFalse  r66, L4
  Index        r68, r63, r65
  Const        r69, "sold_date_sk"
  Index        r70, r29, r69
  Const        r71, "d_date_sk"
  Index        r72, r68, r71
  Equal        r73, r70, r72
  JumpIfFalse  r73, L5
  // where (substr(ca.ca_zip, 0, 5) in zip_list || i.i_item_id in item_ids) &&
  Const        r74, "ca_zip"
  Index        r75, r46, r74
  Const        r76, 0
  Const        r77, 5
  Slice        r78, r75, r76, r77
  In           r79, r78, r6
  Const        r80, "i_item_id"
  Index        r81, r57, r80
  In           r82, r81, r7
  Move         r83, r79
  JumpIfTrue   r83, L6
  Move         r83, r82
L6:
  // d.d_qoy == qoy && d.d_year == year
  Const        r84, "d_qoy"
  Index        r85, r68, r84
  Equal        r86, r85, r8
  Const        r87, "d_year"
  Index        r88, r68, r87
  Equal        r89, r88, r9
  // where (substr(ca.ca_zip, 0, 5) in zip_list || i.i_item_id in item_ids) &&
  Move         r90, r83
  JumpIfFalse  r90, L7
L7:
  // d.d_qoy == qoy && d.d_year == year
  Move         r91, r86
  JumpIfFalse  r91, L8
  Move         r91, r89
L8:
  // where (substr(ca.ca_zip, 0, 5) in zip_list || i.i_item_id in item_ids) &&
  JumpIfFalse  r91, L5
  // from ws in web_sales
  Const        r92, "ws"
  Move         r93, r29
  Const        r94, "c"
  Move         r95, r35
  Const        r96, "ca"
  Move         r97, r46
  Const        r98, "i"
  Move         r99, r57
  Const        r100, "d"
  Move         r101, r68
  MakeMap      r102, 5, r92
  // group by ca.ca_zip into g
  Const        r103, "ca_zip"
  Index        r104, r46, r103
  Str          r105, r104
  In           r106, r105, r21
  JumpIfTrue   r106, L9
  // from ws in web_sales
  Const        r107, []
  Const        r108, "__group__"
  Const        r109, true
  Const        r110, "key"
  // group by ca.ca_zip into g
  Move         r111, r104
  // from ws in web_sales
  Const        r112, "items"
  Move         r113, r107
  Const        r114, "count"
  Const        r115, 0
  Move         r116, r108
  Move         r117, r109
  Move         r118, r110
  Move         r119, r111
  Move         r120, r112
  Move         r121, r113
  Move         r122, r114
  Move         r123, r115
  MakeMap      r124, 4, r116
  SetIndex     r21, r105, r124
  Append       r22, r22, r124
L9:
  Const        r126, "items"
  Index        r127, r21, r105
  Index        r128, r127, r126
  Append       r129, r128, r102
  SetIndex     r127, r126, r129
  Const        r130, "count"
  Index        r131, r127, r130
  Const        r132, 1
  AddInt       r133, r131, r132
  SetIndex     r127, r130, r133
L5:
  // join d in date_dim on ws.sold_date_sk == d.d_date_sk
  Const        r134, 1
  AddInt       r65, r65, r134
  Jump         L10
L4:
  // join i in item on ws.item_sk == i.i_item_sk
  Const        r135, 1
  AddInt       r54, r54, r135
  Jump         L11
L3:
  // join ca in customer_address on c.c_current_addr_sk == ca.ca_address_sk
  Const        r136, 1
  AddInt       r43, r43, r136
  Jump         L12
L2:
  // join c in customer on ws.bill_customer_sk == c.c_customer_sk
  Const        r137, 1
  AddInt       r32, r32, r137
  Jump         L13
L1:
  // from ws in web_sales
  Const        r138, 1
  AddInt       r26, r26, r138
  Jump         L14
L0:
  Const        r139, 0
  Len          r141, r22
L18:
  LessInt      r142, r139, r141
  JumpIfFalse  r142, L15
  Index        r144, r22, r139
  // select { ca_zip: g.key, sum_ws_sales_price: sum(from x in g select x.ws.sales_price) }
  Const        r145, "ca_zip"
  Const        r146, "key"
  Index        r147, r144, r146
  Const        r148, "sum_ws_sales_price"
  Const        r149, []
  Const        r150, "ws"
  Const        r151, "sales_price"
  IterPrep     r152, r144
  Len          r153, r152
  Const        r154, 0
L17:
  LessInt      r156, r154, r153
  JumpIfFalse  r156, L16
  Index        r158, r152, r154
  Const        r159, "ws"
  Index        r160, r158, r159
  Const        r161, "sales_price"
  Index        r162, r160, r161
  Append       r149, r149, r162
  Const        r164, 1
  AddInt       r154, r154, r164
  Jump         L17
L16:
  Sum          r165, r149
  Move         r166, r145
  Move         r167, r147
  Move         r168, r148
  Move         r169, r165
  MakeMap      r170, 2, r166
  // from ws in web_sales
  Append       r10, r10, r170
  Const        r172, 1
  AddInt       r139, r139, r172
  Jump         L18
L15:
  // let records = concat(dummy, base)
  UnionAll     r173, r5, r10
  // json(records)
  JSON         r173
  // expect records == [ { ca_zip: "85669", sum_ws_sales_price: 50.0 }, { ca_zip: "99999", sum_ws_sales_price: 30.0 } ]
  Const        r174, [{"ca_zip": "85669", "sum_ws_sales_price": 50}, {"ca_zip": "99999", "sum_ws_sales_price": 30}]
  Equal        r175, r173, r174
  Expect       r175
  Return       r0
