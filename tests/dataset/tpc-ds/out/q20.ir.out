func main (regs=286)
  // let catalog_sales = [
  Const        r0, [{"cs_ext_sales_price": 100, "cs_item_sk": 1, "cs_sold_date_sk": 1}, {"cs_ext_sales_price": 200, "cs_item_sk": 1, "cs_sold_date_sk": 1}, {"cs_ext_sales_price": 150, "cs_item_sk": 2, "cs_sold_date_sk": 1}, {"cs_ext_sales_price": 300, "cs_item_sk": 1, "cs_sold_date_sk": 2}, {"cs_ext_sales_price": 150, "cs_item_sk": 2, "cs_sold_date_sk": 2}, {"cs_ext_sales_price": 50, "cs_item_sk": 3, "cs_sold_date_sk": 1}]
  // let item = [
  Const        r1, [{"i_category": "A", "i_class": "X", "i_current_price": 10, "i_item_desc": "Item One", "i_item_id": "ITEM1", "i_item_sk": 1}, {"i_category": "A", "i_class": "X", "i_current_price": 20, "i_item_desc": "Item Two", "i_item_id": "ITEM2", "i_item_sk": 2}, {"i_category": "D", "i_class": "Y", "i_current_price": 15, "i_item_desc": "Item Three", "i_item_id": "ITEM3", "i_item_sk": 3}]
  // let date_dim = [
  Const        r2, [{"d_date": "2000-02-10", "d_date_sk": 1}, {"d_date": "2000-02-20", "d_date_sk": 2}]
  // from cs in catalog_sales
  Const        r3, []
  // id: i.i_item_id,
  Const        r4, "id"
  Const        r5, "i_item_id"
  // desc: i.i_item_desc,
  Const        r6, "desc"
  Const        r7, "i_item_desc"
  // cat: i.i_category,
  Const        r8, "cat"
  Const        r9, "i_category"
  // class: i.i_class,
  Const        r10, "class"
  Const        r11, "i_class"
  // price: i.i_current_price
  Const        r12, "price"
  Const        r13, "i_current_price"
  // d.d_date >= "2000-02-01" && d.d_date <= "2000-03-02"
  Const        r14, "d_date"
  // i_item_id: g.key.id,
  Const        r15, "key"
  // itemrevenue: sum(from x in g select x.cs_ext_sales_price)
  Const        r16, "itemrevenue"
  Const        r17, "cs_ext_sales_price"
  // from cs in catalog_sales
  MakeMap      r18, 0, r0
  Const        r19, []
  IterPrep     r21, r0
  Len          r22, r21
  Const        r23, 0
L8:
  LessInt      r24, r23, r22
  JumpIfFalse  r24, L0
  Index        r26, r21, r23
  // join i in item on cs.cs_item_sk == i.i_item_sk
  IterPrep     r27, r1
  Len          r28, r27
  Const        r29, 0
L7:
  LessInt      r30, r29, r28
  JumpIfFalse  r30, L1
  Index        r32, r27, r29
  Const        r33, "cs_item_sk"
  Index        r34, r26, r33
  Const        r35, "i_item_sk"
  Index        r36, r32, r35
  Equal        r37, r34, r36
  JumpIfFalse  r37, L2
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  IterPrep     r38, r2
  Len          r39, r38
  Const        r40, 0
L6:
  LessInt      r41, r40, r39
  JumpIfFalse  r41, L2
  Index        r43, r38, r40
  Const        r44, "cs_sold_date_sk"
  Index        r45, r26, r44
  Const        r46, "d_date_sk"
  Index        r47, r43, r46
  Equal        r48, r45, r47
  JumpIfFalse  r48, L3
  // where i.i_category in ["A", "B", "C"] &&
  Index        r49, r32, r9
  // d.d_date >= "2000-02-01" && d.d_date <= "2000-03-02"
  Index        r50, r43, r14
  Const        r51, "2000-02-01"
  LessEq       r52, r51, r50
  Index        r53, r43, r14
  Const        r54, "2000-03-02"
  LessEq       r55, r53, r54
  // where i.i_category in ["A", "B", "C"] &&
  Const        r56, ["A", "B", "C"]
  In           r57, r49, r56
  JumpIfFalse  r57, L4
  Move         r57, r52
  // d.d_date >= "2000-02-01" && d.d_date <= "2000-03-02"
  JumpIfFalse  r57, L4
  Move         r57, r55
L4:
  // where i.i_category in ["A", "B", "C"] &&
  JumpIfFalse  r57, L3
  // from cs in catalog_sales
  Const        r58, "cs"
  Move         r59, r26
  Const        r60, "i"
  Move         r61, r32
  Const        r62, "d"
  Move         r63, r43
  MakeMap      r64, 3, r58
  // id: i.i_item_id,
  Const        r65, "id"
  Index        r66, r32, r5
  // desc: i.i_item_desc,
  Const        r67, "desc"
  Index        r68, r32, r7
  // cat: i.i_category,
  Const        r69, "cat"
  Index        r70, r32, r9
  // class: i.i_class,
  Const        r71, "class"
  Index        r72, r32, r11
  // price: i.i_current_price
  Const        r73, "price"
  Index        r74, r32, r13
  // id: i.i_item_id,
  Move         r75, r65
  Move         r76, r66
  // desc: i.i_item_desc,
  Move         r77, r67
  Move         r78, r68
  // cat: i.i_category,
  Move         r79, r69
  Move         r80, r70
  // class: i.i_class,
  Move         r81, r71
  Move         r82, r72
  // price: i.i_current_price
  Move         r83, r73
  Move         r84, r74
  // group by {
  MakeMap      r85, 5, r75
  Str          r86, r85
  In           r87, r86, r18
  JumpIfTrue   r87, L5
  // from cs in catalog_sales
  Const        r88, []
  Const        r89, "__group__"
  Const        r90, true
  Const        r91, "key"
  // group by {
  Move         r92, r85
  // from cs in catalog_sales
  Const        r93, "items"
  Move         r94, r88
  Const        r95, "count"
  Const        r96, 0
  Move         r97, r89
  Move         r98, r90
  Move         r99, r91
  Move         r100, r92
  Move         r101, r93
  Move         r102, r94
  Move         r103, r95
  Move         r104, r96
  MakeMap      r105, 4, r97
  SetIndex     r18, r86, r105
  Append       r19, r19, r105
L5:
  Const        r107, "items"
  Index        r108, r18, r86
  Index        r109, r108, r107
  Append       r110, r109, r64
  SetIndex     r108, r107, r110
  Const        r111, "count"
  Index        r112, r108, r111
  Const        r113, 1
  AddInt       r114, r112, r113
  SetIndex     r108, r111, r114
L3:
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  AddInt       r40, r40, r113
  Jump         L6
L2:
  // join i in item on cs.cs_item_sk == i.i_item_sk
  AddInt       r29, r29, r113
  Jump         L7
L1:
  // from cs in catalog_sales
  AddInt       r23, r23, r113
  Jump         L8
L0:
  Const        r116, 0
  Move         r115, r116
  Len          r117, r19
L12:
  LessInt      r118, r115, r117
  JumpIfFalse  r118, L9
  Index        r120, r19, r115
  // i_item_id: g.key.id,
  Const        r121, "i_item_id"
  Index        r122, r120, r15
  Index        r123, r122, r4
  // i_item_desc: g.key.desc,
  Const        r124, "i_item_desc"
  Index        r125, r120, r15
  Index        r126, r125, r6
  // i_category: g.key.cat,
  Const        r127, "i_category"
  Index        r128, r120, r15
  Index        r129, r128, r8
  // i_class: g.key.class,
  Const        r130, "i_class"
  Index        r131, r120, r15
  Index        r132, r131, r10
  // i_current_price: g.key.price,
  Const        r133, "i_current_price"
  Index        r134, r120, r15
  Index        r135, r134, r12
  // itemrevenue: sum(from x in g select x.cs_ext_sales_price)
  Const        r136, "itemrevenue"
  Const        r137, []
  IterPrep     r138, r120
  Len          r139, r138
  Move         r140, r116
L11:
  LessInt      r141, r140, r139
  JumpIfFalse  r141, L10
  Index        r143, r138, r140
  Index        r144, r143, r17
  Append       r137, r137, r144
  AddInt       r140, r140, r113
  Jump         L11
L10:
  Sum          r146, r137
  // i_item_id: g.key.id,
  Move         r147, r121
  Move         r148, r123
  // i_item_desc: g.key.desc,
  Move         r149, r124
  Move         r150, r126
  // i_category: g.key.cat,
  Move         r151, r127
  Move         r152, r129
  // i_class: g.key.class,
  Move         r153, r130
  Move         r154, r132
  // i_current_price: g.key.price,
  Move         r155, r133
  Move         r156, r135
  // itemrevenue: sum(from x in g select x.cs_ext_sales_price)
  Move         r157, r136
  Move         r158, r146
  // select {
  MakeMap      r159, 6, r147
  // from cs in catalog_sales
  Append       r3, r3, r159
  AddInt       r115, r115, r113
  Jump         L12
L9:
  // from f in filtered
  Const        r161, []
  // select { class: g.key, total: sum(from x in g select x.itemrevenue) }
  Const        r162, "total"
  // from f in filtered
  IterPrep     r163, r3
  Len          r164, r163
  Const        r165, 0
  MakeMap      r166, 0, r0
  Const        r167, []
L15:
  LessInt      r169, r165, r164
  JumpIfFalse  r169, L13
  Index        r170, r163, r165
  // group by f.i_class into g
  Index        r172, r170, r11
  Str          r173, r172
  In           r174, r173, r166
  JumpIfTrue   r174, L14
  // from f in filtered
  Const        r175, []
  Const        r176, "__group__"
  Const        r177, true
  Const        r178, "key"
  // group by f.i_class into g
  Move         r179, r172
  // from f in filtered
  Const        r180, "items"
  Move         r181, r175
  Const        r182, "count"
  Const        r183, 0
  Move         r184, r176
  Move         r185, r177
  Move         r186, r178
  Move         r187, r179
  Move         r188, r180
  Move         r189, r181
  Move         r190, r182
  Move         r191, r183
  MakeMap      r192, 4, r184
  SetIndex     r166, r173, r192
  Append       r167, r167, r192
L14:
  Index        r194, r166, r173
  Index        r195, r194, r107
  Append       r196, r195, r170
  SetIndex     r194, r107, r196
  Index        r197, r194, r111
  AddInt       r198, r197, r113
  SetIndex     r194, r111, r198
  AddInt       r165, r165, r113
  Jump         L15
L13:
  Move         r199, r116
  Len          r200, r167
L19:
  LessInt      r201, r199, r200
  JumpIfFalse  r201, L16
  Index        r120, r167, r199
  // select { class: g.key, total: sum(from x in g select x.itemrevenue) }
  Const        r203, "class"
  Index        r204, r120, r15
  Const        r205, "total"
  Const        r206, []
  IterPrep     r207, r120
  Len          r208, r207
  Move         r209, r116
L18:
  LessInt      r210, r209, r208
  JumpIfFalse  r210, L17
  Index        r143, r207, r209
  Index        r212, r143, r16
  Append       r206, r206, r212
  AddInt       r209, r209, r113
  Jump         L18
L17:
  Sum          r214, r206
  Move         r215, r203
  Move         r216, r204
  Move         r217, r205
  Move         r218, r214
  MakeMap      r219, 2, r215
  // from f in filtered
  Append       r161, r161, r219
  AddInt       r199, r199, r113
  Jump         L19
L16:
  // from f in filtered
  Const        r221, []
  IterPrep     r222, r3
  Len          r223, r222
  // join t in class_totals on f.i_class == t.class
  IterPrep     r224, r161
  Len          r225, r224
  // revenueratio: (f.itemrevenue * 100.0) / t.total
  Const        r226, "revenueratio"
  // from f in filtered
  Const        r227, 0
L24:
  LessInt      r228, r227, r223
  JumpIfFalse  r228, L20
  Index        r171, r222, r227
  // join t in class_totals on f.i_class == t.class
  Const        r230, 0
L23:
  LessInt      r231, r230, r225
  JumpIfFalse  r231, L21
  Index        r233, r224, r230
  Index        r234, r171, r11
  Index        r235, r233, r10
  Equal        r236, r234, r235
  JumpIfFalse  r236, L22
  // i_item_id: f.i_item_id,
  Const        r237, "i_item_id"
  Index        r238, r171, r5
  // i_item_desc: f.i_item_desc,
  Const        r239, "i_item_desc"
  Index        r240, r171, r7
  // i_category: f.i_category,
  Const        r241, "i_category"
  Index        r242, r171, r9
  // i_class: f.i_class,
  Const        r243, "i_class"
  Index        r244, r171, r11
  // i_current_price: f.i_current_price,
  Const        r245, "i_current_price"
  Index        r246, r171, r13
  // itemrevenue: f.itemrevenue,
  Const        r247, "itemrevenue"
  Index        r248, r171, r16
  // revenueratio: (f.itemrevenue * 100.0) / t.total
  Const        r249, "revenueratio"
  Index        r250, r171, r16
  Const        r251, 100
  MulFloat     r252, r250, r251
  Index        r253, r233, r162
  DivFloat     r254, r252, r253
  // i_item_id: f.i_item_id,
  Move         r255, r237
  Move         r256, r238
  // i_item_desc: f.i_item_desc,
  Move         r257, r239
  Move         r258, r240
  // i_category: f.i_category,
  Move         r259, r241
  Move         r260, r242
  // i_class: f.i_class,
  Move         r261, r243
  Move         r262, r244
  // i_current_price: f.i_current_price,
  Move         r263, r245
  Move         r264, r246
  // itemrevenue: f.itemrevenue,
  Move         r265, r247
  Move         r266, r248
  // revenueratio: (f.itemrevenue * 100.0) / t.total
  Move         r267, r249
  Move         r268, r254
  // select {
  MakeMap      r269, 7, r255
  // sort by [f.i_category, f.i_class, f.i_item_id, f.i_item_desc]
  Index        r271, r171, r9
  Index        r272, r171, r11
  Move         r273, r272
  Index        r274, r171, r5
  Move         r275, r274
  Index        r277, r171, r7
  MakeList     r279, 4, r271
  // from f in filtered
  Move         r280, r269
  MakeList     r281, 2, r279
  Append       r221, r221, r281
L22:
  // join t in class_totals on f.i_class == t.class
  AddInt       r230, r230, r113
  Jump         L23
L21:
  // from f in filtered
  AddInt       r227, r227, r113
  Jump         L24
L20:
  // sort by [f.i_category, f.i_class, f.i_item_id, f.i_item_desc]
  Sort         r221, r221
  // json(result)
  JSON         r221
  // expect result == [
  Const        r284, [{"i_category": "A", "i_class": "X", "i_current_price": 10, "i_item_desc": "Item One", "i_item_id": "ITEM1", "itemrevenue": 300, "revenueratio": 66.66666666666666}, {"i_category": "A", "i_class": "X", "i_current_price": 20, "i_item_desc": "Item Two", "i_item_id": "ITEM2", "itemrevenue": 150, "revenueratio": 33.33333333333333}]
  Equal        r285, r221, r284
  Expect       r285
  Return       r0
