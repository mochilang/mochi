func main (regs=65)
  // let web_returns = [
  Const        r0, [{"wr_return_amt": 100.0, "wr_returned_date_sk": 1, "wr_returning_addr_sk": 1, "wr_returning_customer_sk": 1}, {"wr_return_amt": 30.0, "wr_returned_date_sk": 1, "wr_returning_addr_sk": 2, "wr_returning_customer_sk": 2}, {"wr_return_amt": 50.0, "wr_returned_date_sk": 1, "wr_returning_addr_sk": 1, "wr_returning_customer_sk": 1}]
L0:
  // let date_dim = [
  Const        r1, [{"d_date_sk": 1, "d_year": 2000}]
  // let customer_address = [
  Const        r2, [{"ca_address_sk": 1, "ca_state": "CA"}, {"ca_address_sk": 2, "ca_state": "CA"}]
  // let customer = [
  Const        r3, [{"c_current_addr_sk": 1, "c_customer_id": "C1", "c_customer_sk": 1, "c_first_name": "John", "c_last_name": "Doe"}, {"c_current_addr_sk": 2, "c_customer_id": "C2", "c_customer_sk": 2, "c_first_name": "Jane", "c_last_name": "Smith"}]
  // from wr in web_returns
  Const        r4, []
L9:
  // group by {cust: wr.wr_returning_customer_sk, state: ca.ca_state} into g
  Const        r5, "cust"
  Const        r6, "wr_returning_customer_sk"
  Const        r7, "state"
  Const        r8, "ca_state"
  // where d.d_year == 2000 && ca.ca_state == "CA"
  Const        r9, "d_year"
  // ctr_customer_sk: g.key.cust,
  Const        r10, "ctr_customer_sk"
  Const        r11, "key"
  // ctr_state: g.key.state,
  Const        r12, "ctr_state"
  // ctr_total_return: sum(from x in g select x.wr_return_amt)
  Const        r13, "ctr_total_return"
  Const        r14, "wr_return_amt"
  // from wr in web_returns
  MakeMap      r15, 0, r0
L14:
  Const        r16, []
  Move         r17, r16
L21:
  IterPrep     r18, r0
L10:
  Len          r19, r18
  Const        r20, 0
L1:
  LessInt      r21, r20, r19
  JumpIfFalse  r21, L0
  Index        r19, r18, r20
L6:
  Move         r18, r19
L3:
  // join d in date_dim on wr.wr_returned_date_sk == d.d_date_sk
  IterPrep     r19, r1
  Len          r1, r19
  Const        r22, 0
  LessInt      r23, r22, r1
  JumpIfFalse  r23, L1
L4:
  Index        r1, r19, r22
  Move         r23, r1
L2:
  Const        r19, "wr_returned_date_sk"
  Index        r24, r18, r19
  Const        r19, "d_date_sk"
  Index        r25, r23, r19
  Equal        r19, r24, r25
  JumpIfFalse  r19, L2
  // join ca in customer_address on wr.wr_returning_addr_sk == ca.ca_address_sk
  IterPrep     r24, r2
L5:
  Len          r25, r24
  Const        r19, 0
  LessInt      r2, r19, r25
L7:
  JumpIfFalse  r2, L2
L11:
  Index        r25, r24, r19
  Move         r2, r25
  Const        r24, "wr_returning_addr_sk"
  Index        r25, r18, r24
  Const        r26, "ca_address_sk"
L13:
  Index        r27, r2, r26
L8:
  Equal        r26, r25, r27
  JumpIfFalse  r26, L3
  // where d.d_year == 2000 && ca.ca_state == "CA"
  Index        r25, r23, r9
  Const        r27, 2000
  Equal        r26, r25, r27
  Index        r9, r2, r8
  Const        r25, "CA"
  Equal        r27, r9, r25
  Move         r9, r26
  JumpIfFalse  r9, L4
  Move         r9, r27
  JumpIfFalse  r9, L3
L12:
  // from wr in web_returns
  Const        r25, "wr"
  Move         r26, r18
  Const        r27, "d"
  Move         r9, r23
  Const        r23, "ca"
  Move         r28, r2
  Move         r29, r25
  Move         r30, r26
  Move         r31, r27
  Move         r32, r9
  Move         r33, r23
  Move         r34, r28
  MakeMap      r25, 3, r29
  // group by {cust: wr.wr_returning_customer_sk, state: ca.ca_state} into g
  Const        r26, "cust"
  Index        r27, r18, r6
  Const        r9, "state"
  Index        r23, r2, r8
  Move         r29, r26
  Move         r30, r27
  Move         r31, r9
  Move         r32, r23
  MakeMap      r28, 2, r29
  Str          r33, r28
  In           r34, r33, r15
  JumpIfTrue   r34, L5
  // from wr in web_returns
  Const        r6, "__group__"
  Const        r18, true
  // group by {cust: wr.wr_returning_customer_sk, state: ca.ca_state} into g
  Move         r8, r28
  // from wr in web_returns
  Const        r2, "items"
  Move         r26, r16
  Const        r27, "count"
  Const        r9, 0
  Move         r35, r6
  Move         r36, r18
  Move         r37, r11
  Move         r38, r8
  Move         r39, r2
  Move         r40, r26
  Move         r41, r27
  Move         r42, r9
  MakeMap      r23, 4, r35
  SetIndex     r15, r33, r23
  Append       r29, r17, r23
  Move         r17, r29
  Index        r30, r15, r33
  Index        r31, r30, r2
  Append       r32, r31, r25
  SetIndex     r30, r2, r32
  Index        r34, r30, r27
  Const        r28, 1
  AddInt       r8, r34, r28
  SetIndex     r30, r27, r8
  // join ca in customer_address on wr.wr_returning_addr_sk == ca.ca_address_sk
  AddInt       r19, r19, r28
  Jump         L6
  // join d in date_dim on wr.wr_returned_date_sk == d.d_date_sk
  AddInt       r22, r22, r28
  Jump         L0
  // from wr in web_returns
  AddInt       r20, r20, r28
  Jump         L1
  Move         r26, r9
  Len          r35, r17
  LessInt      r36, r26, r35
  JumpIfFalse  r36, L7
  Index        r37, r17, r26
  Move         r38, r37
  // ctr_customer_sk: g.key.cust,
  Const        r39, "ctr_customer_sk"
  Index        r40, r38, r11
  Index        r41, r40, r5
  // ctr_state: g.key.state,
  Const        r42, "ctr_state"
  Index        r23, r38, r11
  Index        r29, r23, r7
  // ctr_total_return: sum(from x in g select x.wr_return_amt)
  Const        r15, "ctr_total_return"
  Const        r33, []
  IterPrep     r25, r38
  Len          r31, r25
  Move         r32, r9
  LessInt      r20, r32, r31
  JumpIfFalse  r20, L8
  Index        r21, r25, r32
  Move         r22, r21
  Index        r1, r22, r14
  Append       r19, r33, r1
  Move         r33, r19
  AddInt       r32, r32, r28
  Jump         L6
  Sum          r30, r33
  // ctr_customer_sk: g.key.cust,
  Move         r43, r39
  Move         r44, r41
  // ctr_state: g.key.state,
  Move         r45, r42
  Move         r46, r29
  // ctr_total_return: sum(from x in g select x.wr_return_amt)
  Move         r47, r15
  Move         r48, r30
  // select {
  MakeMap      r34, 3, r43
  // from wr in web_returns
  Append       r8, r4, r34
  Move         r4, r8
  AddInt       r26, r26, r28
  Jump         L4
  // from ctr in customer_total_return
  Const        r35, []
  // select {state: g.key, avg_return: avg(from x in g select x.ctr_total_return)}
  Const        r36, "avg_return"
  // from ctr in customer_total_return
  IterPrep     r17, r4
  Len          r37, r17
  Const        r5, 0
  MakeMap      r40, 0, r0
  Move         r24, r16
  LessInt      r23, r5, r37
  JumpIfFalse  r23, L9
  Index        r31, r17, r5
  Move         r20, r31
  // group by ctr.ctr_state into g
  Index        r25, r20, r12
  Str          r21, r25
  In           r14, r21, r40
  JumpIfTrue   r14, L10
  Move         r32, r25
  // from ctr in customer_total_return
  Move         r1, r16
  Move         r49, r6
  Move         r50, r18
  Move         r51, r11
  Move         r52, r32
  Move         r53, r2
  Move         r54, r1
  Move         r55, r27
  Move         r56, r9
  MakeMap      r19, 4, r49
  SetIndex     r40, r21, r19
  Append       r33, r24, r19
  Move         r24, r33
  Index        r39, r40, r21
  Index        r41, r39, r2
  Append       r42, r41, r31
  SetIndex     r39, r2, r42
  Index        r29, r39, r27
  AddInt       r15, r29, r28
  SetIndex     r39, r27, r15
  AddInt       r5, r5, r28
  Jump         L11
  Move         r44, r9
  Len          r45, r24
  LessInt      r46, r44, r45
  JumpIfFalse  r46, L12
  Index        r47, r24, r44
  Move         r38, r47
  // select {state: g.key, avg_return: avg(from x in g select x.ctr_total_return)}
  Const        r43, "state"
  Index        r48, r38, r11
  Const        r26, "avg_return"
  Const        r30, []
  IterPrep     r34, r38
  Len          r8, r34
  Move         r37, r9
  LessInt      r23, r37, r8
  JumpIfFalse  r23, L13
  Index        r17, r34, r37
  Move         r22, r17
  Index        r14, r22, r13
  Append       r25, r30, r14
  Move         r30, r25
  AddInt       r37, r37, r28
  Jump         L14
  Avg          r6, r30
  Move         r49, r43
  Move         r50, r48
  Move         r51, r26
  Move         r52, r6
  MakeMap      r18, 2, r49
  // from ctr in customer_total_return
  Append       r32, r35, r18
  Move         r35, r32
  AddInt       r44, r44, r28
  Jump         L0
  // from ctr in customer_total_return
  Const        r53, []
  // c_customer_id: c.c_customer_id,
  Const        r54, "c_customer_id"
  // c_first_name: c.c_first_name,
  Const        r55, "c_first_name"
  // c_last_name: c.c_last_name,
  Const        r56, "c_last_name"
  // from ctr in customer_total_return
  IterPrep     r19, r4
  Len          r33, r19
  Move         r40, r9
  LessInt      r21, r40, r33
  JumpIfFalse  r21, L15
  Index        r2, r19, r40
  Move         r20, r2
  // join avg in avg_by_state on ctr.ctr_state == avg.state
  IterPrep     r31, r35
  Len          r41, r31
  Move         r42, r9
L20:
  LessInt      r27, r42, r41
  JumpIfFalse  r27, L16
  Index        r5, r31, r42
  Move         r39, r5
  Index        r1, r20, r12
  Index        r29, r39, r7
  Equal        r15, r1, r29
  JumpIfFalse  r15, L17
  // join c in customer on ctr.ctr_customer_sk == c.c_customer_sk
  IterPrep     r45, r3
  Len          r46, r45
  Const        r24, "c_customer_sk"
  Move         r47, r9
L19:
  LessInt      r11, r47, r46
  JumpIfFalse  r11, L17
  Index        r38, r45, r47
  Move         r8, r38
  Index        r23, r20, r10
  Index        r16, r8, r24
  Equal        r34, r23, r16
  JumpIfFalse  r34, L18
  // where ctr.ctr_total_return > avg.avg_return * 1.2
  Index        r17, r20, r13
  Index        r22, r39, r36
  Const        r37, 1.2
  MulFloat     r14, r22, r37
  LessFloat    r25, r14, r17
  JumpIfFalse  r25, L18
  // c_customer_id: c.c_customer_id,
  Const        r30, "c_customer_id"
  Index        r43, r8, r54
  // c_first_name: c.c_first_name,
  Const        r48, "c_first_name"
  Index        r26, r8, r55
  // c_last_name: c.c_last_name,
  Const        r6, "c_last_name"
  Index        r49, r8, r56
  // ctr_total_return: ctr.ctr_total_return
  Const        r50, "ctr_total_return"
  Index        r51, r20, r13
  // c_customer_id: c.c_customer_id,
  Move         r57, r30
  Move         r58, r43
  // c_first_name: c.c_first_name,
  Move         r59, r48
  Move         r60, r26
  // c_last_name: c.c_last_name,
  Move         r61, r6
  Move         r62, r49
  // ctr_total_return: ctr.ctr_total_return
  Move         r63, r50
  Move         r64, r51
  // select {
  MakeMap      r52, 4, r57
  // from ctr in customer_total_return
  Append       r44, r53, r52
  Move         r53, r44
L18:
  // join c in customer on ctr.ctr_customer_sk == c.c_customer_sk
  Add          r47, r47, r28
  Jump         L19
L17:
  // join avg in avg_by_state on ctr.ctr_state == avg.state
  Add          r42, r42, r28
  Jump         L20
L16:
  // from ctr in customer_total_return
  AddInt       r40, r40, r28
  Jump         L21
L15:
  // json(result)
  JSON         r53
  // expect result == [{c_customer_id: "C1", c_first_name: "John", c_last_name: "Doe", ctr_total_return: 150.0}]
  Const        r32, [{"c_customer_id": "C1", "c_first_name": "John", "c_last_name": "Doe", "ctr_total_return": 150.0}]
  Equal        r18, r53, r32
  Expect       r18
  Return       r0
