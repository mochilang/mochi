func main (regs=237)
  // let web_returns = [
  Const        r0, [{"wr_return_amt": 100, "wr_returned_date_sk": 1, "wr_returning_addr_sk": 1, "wr_returning_customer_sk": 1}, {"wr_return_amt": 30, "wr_returned_date_sk": 1, "wr_returning_addr_sk": 2, "wr_returning_customer_sk": 2}, {"wr_return_amt": 50, "wr_returned_date_sk": 1, "wr_returning_addr_sk": 1, "wr_returning_customer_sk": 1}]
  // let date_dim = [
  Const        r1, [{"d_date_sk": 1, "d_year": 2000}]
  // let customer_address = [
  Const        r2, [{"ca_address_sk": 1, "ca_state": "CA"}, {"ca_address_sk": 2, "ca_state": "CA"}]
  // let customer = [
  Const        r3, [{"c_current_addr_sk": 1, "c_customer_id": "C1", "c_customer_sk": 1, "c_first_name": "John", "c_last_name": "Doe"}, {"c_current_addr_sk": 2, "c_customer_id": "C2", "c_customer_sk": 2, "c_first_name": "Jane", "c_last_name": "Smith"}]
  // from wr in web_returns
  Const        r4, []
  // group by {cust: wr.wr_returning_customer_sk, state: ca.ca_state} into g
  Const        r5, "cust"
  Const        r6, "wr_returning_customer_sk"
  Const        r7, "state"
  Const        r8, "ca_state"
  // where d.d_year == 2000 && ca.ca_state == "CA"
  Const        r9, "d_year"
  // ctr_customer_sk: g.key.cust,
  Const        r10, "ctr_customer_sk"
  Const        r11, "key"
  // ctr_state: g.key.state,
  Const        r12, "ctr_state"
  // ctr_total_return: sum(from x in g select x.wr_return_amt)
  Const        r13, "ctr_total_return"
  Const        r14, "wr_return_amt"
  // from wr in web_returns
  MakeMap      r15, 0, r0
  Const        r17, []
  Move         r16, r17
  IterPrep     r18, r0
  Len          r19, r18
  Const        r20, 0
L8:
  LessInt      r21, r20, r19
  JumpIfFalse  r21, L0
  Index        r22, r18, r20
  Move         r23, r22
  // join d in date_dim on wr.wr_returned_date_sk == d.d_date_sk
  IterPrep     r24, r1
  Len          r25, r24
  Const        r26, 0
L7:
  LessInt      r27, r26, r25
  JumpIfFalse  r27, L1
  Index        r28, r24, r26
  Move         r29, r28
  Const        r30, "wr_returned_date_sk"
  Index        r31, r23, r30
  Const        r32, "d_date_sk"
  Index        r33, r29, r32
  Equal        r34, r31, r33
  JumpIfFalse  r34, L2
  // join ca in customer_address on wr.wr_returning_addr_sk == ca.ca_address_sk
  IterPrep     r35, r2
  Len          r36, r35
  Const        r37, 0
L6:
  LessInt      r38, r37, r36
  JumpIfFalse  r38, L2
  Index        r39, r35, r37
  Move         r40, r39
  Const        r41, "wr_returning_addr_sk"
  Index        r42, r23, r41
  Const        r43, "ca_address_sk"
  Index        r44, r40, r43
  Equal        r45, r42, r44
  JumpIfFalse  r45, L3
  // where d.d_year == 2000 && ca.ca_state == "CA"
  Index        r46, r29, r9
  Const        r47, 2000
  Equal        r48, r46, r47
  Index        r49, r40, r8
  Const        r50, "CA"
  Equal        r51, r49, r50
  Move         r52, r48
  JumpIfFalse  r52, L4
  Move         r52, r51
L4:
  JumpIfFalse  r52, L3
  // from wr in web_returns
  Const        r53, "wr"
  Move         r54, r23
  Const        r55, "d"
  Move         r56, r29
  Const        r57, "ca"
  Move         r58, r40
  Move         r59, r53
  Move         r60, r54
  Move         r61, r55
  Move         r62, r56
  Move         r63, r57
  Move         r64, r58
  MakeMap      r65, 3, r59
  // group by {cust: wr.wr_returning_customer_sk, state: ca.ca_state} into g
  Const        r66, "cust"
  Index        r67, r23, r6
  Const        r68, "state"
  Index        r69, r40, r8
  Move         r70, r66
  Move         r71, r67
  Move         r72, r68
  Move         r73, r69
  MakeMap      r74, 2, r70
  Str          r75, r74
  In           r76, r75, r15
  JumpIfTrue   r76, L5
  // from wr in web_returns
  Const        r77, []
  Const        r78, "__group__"
  Const        r79, true
  // group by {cust: wr.wr_returning_customer_sk, state: ca.ca_state} into g
  Move         r80, r74
  // from wr in web_returns
  Const        r81, "items"
  Move         r82, r77
  Const        r83, "count"
  Const        r84, 0
  Move         r85, r78
  Move         r86, r79
  Move         r87, r11
  Move         r88, r80
  Move         r89, r81
  Move         r90, r82
  Move         r91, r83
  Move         r92, r84
  MakeMap      r93, 4, r85
  SetIndex     r15, r75, r93
  Append       r94, r16, r93
  Move         r16, r94
L5:
  Index        r95, r15, r75
  Index        r96, r95, r81
  Append       r97, r96, r65
  SetIndex     r95, r81, r97
  Index        r98, r95, r83
  Const        r99, 1
  AddInt       r100, r98, r99
  SetIndex     r95, r83, r100
L3:
  // join ca in customer_address on wr.wr_returning_addr_sk == ca.ca_address_sk
  AddInt       r37, r37, r99
  Jump         L6
L2:
  // join d in date_dim on wr.wr_returned_date_sk == d.d_date_sk
  AddInt       r26, r26, r99
  Jump         L7
L1:
  // from wr in web_returns
  AddInt       r20, r20, r99
  Jump         L8
L0:
  Move         r101, r84
  Len          r102, r16
L12:
  LessInt      r103, r101, r102
  JumpIfFalse  r103, L9
  Index        r104, r16, r101
  Move         r105, r104
  // ctr_customer_sk: g.key.cust,
  Const        r106, "ctr_customer_sk"
  Index        r107, r105, r11
  Index        r108, r107, r5
  // ctr_state: g.key.state,
  Const        r109, "ctr_state"
  Index        r110, r105, r11
  Index        r111, r110, r7
  // ctr_total_return: sum(from x in g select x.wr_return_amt)
  Const        r112, "ctr_total_return"
  Const        r113, []
  IterPrep     r114, r105
  Len          r115, r114
  Move         r116, r84
L11:
  LessInt      r117, r116, r115
  JumpIfFalse  r117, L10
  Index        r118, r114, r116
  Move         r119, r118
  Index        r120, r119, r14
  Append       r121, r113, r120
  Move         r113, r121
  AddInt       r116, r116, r99
  Jump         L11
L10:
  Sum          r122, r113
  // ctr_customer_sk: g.key.cust,
  Move         r123, r106
  Move         r124, r108
  // ctr_state: g.key.state,
  Move         r125, r109
  Move         r126, r111
  // ctr_total_return: sum(from x in g select x.wr_return_amt)
  Move         r127, r112
  Move         r128, r122
  // select {
  MakeMap      r129, 3, r123
  // from wr in web_returns
  Append       r130, r4, r129
  Move         r4, r130
  AddInt       r101, r101, r99
  Jump         L12
L9:
  // from ctr in customer_total_return
  Const        r131, []
  // select {state: g.key, avg_return: avg(from x in g select x.ctr_total_return)}
  Const        r132, "avg_return"
  // from ctr in customer_total_return
  IterPrep     r133, r4
  Len          r134, r133
  Const        r135, 0
  MakeMap      r136, 0, r0
  Const        r138, []
  Move         r137, r138
L15:
  LessInt      r139, r135, r134
  JumpIfFalse  r139, L13
  Index        r140, r133, r135
  Move         r141, r140
  // group by ctr.ctr_state into g
  Index        r142, r141, r12
  Str          r143, r142
  In           r144, r143, r136
  JumpIfTrue   r144, L14
  Move         r145, r142
  // from ctr in customer_total_return
  Move         r146, r77
  Move         r147, r78
  Move         r148, r79
  Move         r149, r11
  Move         r150, r145
  Move         r151, r81
  Move         r152, r146
  Move         r153, r83
  Move         r154, r84
  MakeMap      r155, 4, r147
  SetIndex     r136, r143, r155
  Append       r156, r137, r155
  Move         r137, r156
L14:
  Index        r157, r136, r143
  Index        r158, r157, r81
  Append       r159, r158, r140
  SetIndex     r157, r81, r159
  Index        r160, r157, r83
  AddInt       r161, r160, r99
  SetIndex     r157, r83, r161
  AddInt       r135, r135, r99
  Jump         L15
L13:
  Move         r162, r84
  Len          r163, r137
L19:
  LessInt      r164, r162, r163
  JumpIfFalse  r164, L16
  Index        r165, r137, r162
  Move         r105, r165
  // select {state: g.key, avg_return: avg(from x in g select x.ctr_total_return)}
  Const        r166, "state"
  Index        r167, r105, r11
  Const        r168, "avg_return"
  Const        r169, []
  IterPrep     r170, r105
  Len          r171, r170
  Move         r172, r84
L18:
  LessInt      r173, r172, r171
  JumpIfFalse  r173, L17
  Index        r174, r170, r172
  Move         r119, r174
  Index        r175, r119, r13
  Append       r176, r169, r175
  Move         r169, r176
  AddInt       r172, r172, r99
  Jump         L18
L17:
  Avg          r177, r169
  Move         r178, r166
  Move         r179, r167
  Move         r180, r168
  Move         r181, r177
  MakeMap      r182, 2, r178
  // from ctr in customer_total_return
  Append       r183, r131, r182
  Move         r131, r183
  AddInt       r162, r162, r99
  Jump         L19
L16:
  // from ctr in customer_total_return
  Const        r184, []
  // c_customer_id: c.c_customer_id,
  Const        r185, "c_customer_id"
  // c_first_name: c.c_first_name,
  Const        r186, "c_first_name"
  // c_last_name: c.c_last_name,
  Const        r187, "c_last_name"
  // from ctr in customer_total_return
  IterPrep     r188, r4
  Len          r189, r188
  Move         r190, r84
L26:
  LessInt      r191, r190, r189
  JumpIfFalse  r191, L20
  Index        r192, r188, r190
  Move         r141, r192
  // join avg in avg_by_state on ctr.ctr_state == avg.state
  IterPrep     r193, r131
  Len          r194, r193
  Move         r195, r84
L25:
  LessInt      r196, r195, r194
  JumpIfFalse  r196, L21
  Index        r197, r193, r195
  Move         r198, r197
  Index        r199, r141, r12
  Index        r200, r198, r7
  Equal        r201, r199, r200
  JumpIfFalse  r201, L22
  // join c in customer on ctr.ctr_customer_sk == c.c_customer_sk
  IterPrep     r202, r3
  Len          r203, r202
  Const        r204, "c_customer_sk"
  Move         r205, r84
L24:
  LessInt      r206, r205, r203
  JumpIfFalse  r206, L22
  Index        r207, r202, r205
  Move         r208, r207
  Index        r209, r141, r10
  Index        r210, r208, r204
  Equal        r211, r209, r210
  JumpIfFalse  r211, L23
  // where ctr.ctr_total_return > avg.avg_return * 1.2
  Index        r212, r141, r13
  Index        r213, r198, r132
  Const        r214, 1.2
  MulFloat     r215, r213, r214
  LessFloat    r216, r215, r212
  JumpIfFalse  r216, L23
  // c_customer_id: c.c_customer_id,
  Const        r217, "c_customer_id"
  Index        r218, r208, r185
  // c_first_name: c.c_first_name,
  Const        r219, "c_first_name"
  Index        r220, r208, r186
  // c_last_name: c.c_last_name,
  Const        r221, "c_last_name"
  Index        r222, r208, r187
  // ctr_total_return: ctr.ctr_total_return
  Const        r223, "ctr_total_return"
  Index        r224, r141, r13
  // c_customer_id: c.c_customer_id,
  Move         r225, r217
  Move         r226, r218
  // c_first_name: c.c_first_name,
  Move         r227, r219
  Move         r228, r220
  // c_last_name: c.c_last_name,
  Move         r229, r221
  Move         r230, r222
  // ctr_total_return: ctr.ctr_total_return
  Move         r231, r223
  Move         r232, r224
  // select {
  MakeMap      r233, 4, r225
  // from ctr in customer_total_return
  Append       r234, r184, r233
  Move         r184, r234
L23:
  // join c in customer on ctr.ctr_customer_sk == c.c_customer_sk
  Add          r205, r205, r99
  Jump         L24
L22:
  // join avg in avg_by_state on ctr.ctr_state == avg.state
  Add          r195, r195, r99
  Jump         L25
L21:
  // from ctr in customer_total_return
  AddInt       r190, r190, r99
  Jump         L26
L20:
  // json(result)
  JSON         r184
  // expect result == [{c_customer_id: "C1", c_first_name: "John", c_last_name: "Doe", ctr_total_return: 150.0}]
  Const        r235, [{"c_customer_id": "C1", "c_first_name": "John", "c_last_name": "Doe", "ctr_total_return": 150}]
  Equal        r236, r184, r235
  Expect       r236
  Return       r0
