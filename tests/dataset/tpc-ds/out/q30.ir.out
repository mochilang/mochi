func main (regs=328)
  // let web_returns = [
  Const        r0, [{"wr_return_amt": 100, "wr_returned_date_sk": 1, "wr_returning_addr_sk": 1, "wr_returning_customer_sk": 1}, {"wr_return_amt": 30, "wr_returned_date_sk": 1, "wr_returning_addr_sk": 2, "wr_returning_customer_sk": 2}, {"wr_return_amt": 50, "wr_returned_date_sk": 1, "wr_returning_addr_sk": 1, "wr_returning_customer_sk": 1}]
  // let date_dim = [
  Const        r1, [{"d_date_sk": 1, "d_year": 2000}]
  // let customer_address = [
  Const        r2, [{"ca_address_sk": 1, "ca_state": "CA"}, {"ca_address_sk": 2, "ca_state": "CA"}]
  // let customer = [
  Const        r3, [{"c_current_addr_sk": 1, "c_customer_id": "C1", "c_customer_sk": 1, "c_first_name": "John", "c_last_name": "Doe"}, {"c_current_addr_sk": 2, "c_customer_id": "C2", "c_customer_sk": 2, "c_first_name": "Jane", "c_last_name": "Smith"}]
  // from wr in web_returns
  Const        r4, []
  // group by {cust: wr.wr_returning_customer_sk, state: ca.ca_state} into g
  Const        r5, "cust"
  Const        r6, "wr_returning_customer_sk"
  Const        r7, "state"
  Const        r8, "ca_state"
  // where d.d_year == 2000 && ca.ca_state == "CA"
  Const        r9, "d_year"
  Const        r10, "ca_state"
  // ctr_customer_sk: g.key.cust,
  Const        r11, "ctr_customer_sk"
  Const        r12, "key"
  Const        r13, "cust"
  // ctr_state: g.key.state,
  Const        r14, "ctr_state"
  Const        r15, "key"
  Const        r16, "state"
  // ctr_total_return: sum(from x in g select x.wr.wr_return_amt)
  Const        r17, "ctr_total_return"
  Const        r18, "wr"
  Const        r19, "wr_return_amt"
  // from wr in web_returns
  MakeMap      r20, 0, r0
  Const        r21, []
  IterPrep     r23, r0
  Len          r24, r23
  Const        r25, 0
L8:
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L0
  Index        r28, r23, r25
  // join d in date_dim on wr.wr_returned_date_sk == d.d_date_sk
  IterPrep     r29, r1
  Len          r30, r29
  Const        r31, 0
L7:
  LessInt      r32, r31, r30
  JumpIfFalse  r32, L1
  Index        r34, r29, r31
  Const        r35, "wr_returned_date_sk"
  Index        r36, r28, r35
  Const        r37, "d_date_sk"
  Index        r38, r34, r37
  Equal        r39, r36, r38
  JumpIfFalse  r39, L2
  // join ca in customer_address on wr.wr_returning_addr_sk == ca.ca_address_sk
  IterPrep     r40, r2
  Len          r41, r40
  Const        r42, 0
L6:
  LessInt      r43, r42, r41
  JumpIfFalse  r43, L2
  Index        r45, r40, r42
  Const        r46, "wr_returning_addr_sk"
  Index        r47, r28, r46
  Const        r48, "ca_address_sk"
  Index        r49, r45, r48
  Equal        r50, r47, r49
  JumpIfFalse  r50, L3
  // where d.d_year == 2000 && ca.ca_state == "CA"
  Const        r51, "d_year"
  Index        r52, r34, r51
  Const        r53, 2000
  Equal        r54, r52, r53
  Const        r55, "ca_state"
  Index        r56, r45, r55
  Const        r57, "CA"
  Equal        r58, r56, r57
  Move         r59, r54
  JumpIfFalse  r59, L4
  Move         r59, r58
L4:
  JumpIfFalse  r59, L3
  // from wr in web_returns
  Const        r60, "wr"
  Move         r61, r28
  Const        r62, "d"
  Move         r63, r34
  Const        r64, "ca"
  Move         r65, r45
  MakeMap      r66, 3, r60
  // group by {cust: wr.wr_returning_customer_sk, state: ca.ca_state} into g
  Const        r67, "cust"
  Const        r68, "wr_returning_customer_sk"
  Index        r69, r28, r68
  Const        r70, "state"
  Const        r71, "ca_state"
  Index        r72, r45, r71
  Move         r73, r67
  Move         r74, r69
  Move         r75, r70
  Move         r76, r72
  MakeMap      r77, 2, r73
  Str          r78, r77
  In           r79, r78, r20
  JumpIfTrue   r79, L5
  // from wr in web_returns
  Const        r80, []
  Const        r81, "__group__"
  Const        r82, true
  Const        r83, "key"
  // group by {cust: wr.wr_returning_customer_sk, state: ca.ca_state} into g
  Move         r84, r77
  // from wr in web_returns
  Const        r85, "items"
  Move         r86, r80
  Const        r87, "count"
  Const        r88, 0
  Move         r89, r81
  Move         r90, r82
  Move         r91, r83
  Move         r92, r84
  Move         r93, r85
  Move         r94, r86
  Move         r95, r87
  Move         r96, r88
  MakeMap      r97, 4, r89
  SetIndex     r20, r78, r97
  Append       r21, r21, r97
L5:
  Const        r99, "items"
  Index        r100, r20, r78
  Index        r101, r100, r99
  Append       r102, r101, r66
  SetIndex     r100, r99, r102
  Const        r103, "count"
  Index        r104, r100, r103
  Const        r105, 1
  AddInt       r106, r104, r105
  SetIndex     r100, r103, r106
L3:
  // join ca in customer_address on wr.wr_returning_addr_sk == ca.ca_address_sk
  Const        r107, 1
  AddInt       r42, r42, r107
  Jump         L6
L2:
  // join d in date_dim on wr.wr_returned_date_sk == d.d_date_sk
  Const        r108, 1
  AddInt       r31, r31, r108
  Jump         L7
L1:
  // from wr in web_returns
  Const        r109, 1
  AddInt       r25, r25, r109
  Jump         L8
L0:
  Const        r110, 0
  Len          r112, r21
L12:
  LessInt      r113, r110, r112
  JumpIfFalse  r113, L9
  Index        r115, r21, r110
  // ctr_customer_sk: g.key.cust,
  Const        r116, "ctr_customer_sk"
  Const        r117, "key"
  Index        r118, r115, r117
  Const        r119, "cust"
  Index        r120, r118, r119
  // ctr_state: g.key.state,
  Const        r121, "ctr_state"
  Const        r122, "key"
  Index        r123, r115, r122
  Const        r124, "state"
  Index        r125, r123, r124
  // ctr_total_return: sum(from x in g select x.wr.wr_return_amt)
  Const        r126, "ctr_total_return"
  Const        r127, []
  Const        r128, "wr"
  Const        r129, "wr_return_amt"
  IterPrep     r130, r115
  Len          r131, r130
  Const        r132, 0
L11:
  LessInt      r134, r132, r131
  JumpIfFalse  r134, L10
  Index        r136, r130, r132
  Const        r137, "wr"
  Index        r138, r136, r137
  Const        r139, "wr_return_amt"
  Index        r140, r138, r139
  Append       r127, r127, r140
  Const        r142, 1
  AddInt       r132, r132, r142
  Jump         L11
L10:
  Sum          r143, r127
  // ctr_customer_sk: g.key.cust,
  Move         r144, r116
  Move         r145, r120
  // ctr_state: g.key.state,
  Move         r146, r121
  Move         r147, r125
  // ctr_total_return: sum(from x in g select x.wr.wr_return_amt)
  Move         r148, r126
  Move         r149, r143
  // select {
  MakeMap      r150, 3, r144
  // from wr in web_returns
  Append       r4, r4, r150
  Const        r152, 1
  AddInt       r110, r110, r152
  Jump         L12
L9:
  // from ctr in customer_total_return
  Const        r153, []
  // group by ctr.ctr_state into g
  Const        r154, "ctr_state"
  // select {state: g.key, avg_return: avg(from x in g select x.ctr_total_return)}
  Const        r155, "state"
  Const        r156, "key"
  Const        r157, "avg_return"
  Const        r158, "ctr_total_return"
  // from ctr in customer_total_return
  IterPrep     r159, r4
  Len          r160, r159
  Const        r161, 0
  MakeMap      r162, 0, r0
  Const        r163, []
L15:
  LessInt      r165, r161, r160
  JumpIfFalse  r165, L13
  Index        r166, r159, r161
  Move         r167, r166
  // group by ctr.ctr_state into g
  Const        r168, "ctr_state"
  Index        r169, r167, r168
  Str          r170, r169
  In           r171, r170, r162
  JumpIfTrue   r171, L14
  // from ctr in customer_total_return
  Const        r172, []
  Const        r173, "__group__"
  Const        r174, true
  Const        r175, "key"
  // group by ctr.ctr_state into g
  Move         r176, r169
  // from ctr in customer_total_return
  Const        r177, "items"
  Move         r178, r172
  Const        r179, "count"
  Const        r180, 0
  Move         r181, r173
  Move         r182, r174
  Move         r183, r175
  Move         r184, r176
  Move         r185, r177
  Move         r186, r178
  Move         r187, r179
  Move         r188, r180
  MakeMap      r189, 4, r181
  SetIndex     r162, r170, r189
  Append       r163, r163, r189
L14:
  Const        r191, "items"
  Index        r192, r162, r170
  Index        r193, r192, r191
  Append       r194, r193, r166
  SetIndex     r192, r191, r194
  Const        r195, "count"
  Index        r196, r192, r195
  Const        r197, 1
  AddInt       r198, r196, r197
  SetIndex     r192, r195, r198
  Const        r199, 1
  AddInt       r161, r161, r199
  Jump         L15
L13:
  Const        r200, 0
  Len          r202, r163
L19:
  LessInt      r203, r200, r202
  JumpIfFalse  r203, L16
  Index        r115, r163, r200
  // select {state: g.key, avg_return: avg(from x in g select x.ctr_total_return)}
  Const        r205, "state"
  Const        r206, "key"
  Index        r207, r115, r206
  Const        r208, "avg_return"
  Const        r209, []
  Const        r210, "ctr_total_return"
  IterPrep     r211, r115
  Len          r212, r211
  Const        r213, 0
L18:
  LessInt      r215, r213, r212
  JumpIfFalse  r215, L17
  Index        r136, r211, r213
  Const        r217, "ctr_total_return"
  Index        r218, r136, r217
  Append       r209, r209, r218
  Const        r220, 1
  AddInt       r213, r213, r220
  Jump         L18
L17:
  Avg          r221, r209
  Move         r222, r205
  Move         r223, r207
  Move         r224, r208
  Move         r225, r221
  MakeMap      r226, 2, r222
  // from ctr in customer_total_return
  Append       r153, r153, r226
  Const        r228, 1
  AddInt       r200, r200, r228
  Jump         L19
L16:
  // from ctr in customer_total_return
  Const        r229, []
  // where ctr.ctr_total_return > avg.avg_return * 1.2
  Const        r230, "ctr_total_return"
  Const        r231, "avg_return"
  // c_customer_id: c.c_customer_id,
  Const        r232, "c_customer_id"
  Const        r233, "c_customer_id"
  // c_first_name: c.c_first_name,
  Const        r234, "c_first_name"
  Const        r235, "c_first_name"
  // c_last_name: c.c_last_name,
  Const        r236, "c_last_name"
  Const        r237, "c_last_name"
  // ctr_total_return: ctr.ctr_total_return
  Const        r238, "ctr_total_return"
  Const        r239, "ctr_total_return"
  // from ctr in customer_total_return
  IterPrep     r240, r4
  Len          r241, r240
  Const        r242, 0
L26:
  LessInt      r244, r242, r241
  JumpIfFalse  r244, L20
  Index        r167, r240, r242
  // join avg in avg_by_state on ctr.ctr_state == avg.state
  IterPrep     r246, r153
  Len          r247, r246
  Const        r248, "ctr_state"
  Const        r249, "state"
  // where ctr.ctr_total_return > avg.avg_return * 1.2
  Const        r250, "ctr_total_return"
  Const        r251, "avg_return"
  // c_customer_id: c.c_customer_id,
  Const        r252, "c_customer_id"
  Const        r253, "c_customer_id"
  // c_first_name: c.c_first_name,
  Const        r254, "c_first_name"
  Const        r255, "c_first_name"
  // c_last_name: c.c_last_name,
  Const        r256, "c_last_name"
  Const        r257, "c_last_name"
  // ctr_total_return: ctr.ctr_total_return
  Const        r258, "ctr_total_return"
  Const        r259, "ctr_total_return"
  // join avg in avg_by_state on ctr.ctr_state == avg.state
  Const        r260, 0
L25:
  LessInt      r262, r260, r247
  JumpIfFalse  r262, L21
  Index        r264, r246, r260
  Const        r265, "ctr_state"
  Index        r266, r167, r265
  Const        r267, "state"
  Index        r268, r264, r267
  Equal        r269, r266, r268
  JumpIfFalse  r269, L22
  // join c in customer on ctr.ctr_customer_sk == c.c_customer_sk
  IterPrep     r270, r3
  Len          r271, r270
  Const        r272, "ctr_customer_sk"
  Const        r273, "c_customer_sk"
  // where ctr.ctr_total_return > avg.avg_return * 1.2
  Const        r274, "ctr_total_return"
  Const        r275, "avg_return"
  // c_customer_id: c.c_customer_id,
  Const        r276, "c_customer_id"
  Const        r277, "c_customer_id"
  // c_first_name: c.c_first_name,
  Const        r278, "c_first_name"
  Const        r279, "c_first_name"
  // c_last_name: c.c_last_name,
  Const        r280, "c_last_name"
  Const        r281, "c_last_name"
  // ctr_total_return: ctr.ctr_total_return
  Const        r282, "ctr_total_return"
  Const        r283, "ctr_total_return"
  // join c in customer on ctr.ctr_customer_sk == c.c_customer_sk
  Const        r284, 0
L24:
  LessInt      r286, r284, r271
  JumpIfFalse  r286, L22
  Index        r288, r270, r284
  Const        r289, "ctr_customer_sk"
  Index        r290, r167, r289
  Const        r291, "c_customer_sk"
  Index        r292, r288, r291
  Equal        r293, r290, r292
  JumpIfFalse  r293, L23
  // where ctr.ctr_total_return > avg.avg_return * 1.2
  Const        r294, "ctr_total_return"
  Index        r295, r167, r294
  Const        r296, "avg_return"
  Index        r297, r264, r296
  Const        r298, 1.2
  MulFloat     r299, r297, r298
  LessFloat    r300, r299, r295
  JumpIfFalse  r300, L23
  // c_customer_id: c.c_customer_id,
  Const        r301, "c_customer_id"
  Const        r302, "c_customer_id"
  Index        r303, r288, r302
  // c_first_name: c.c_first_name,
  Const        r304, "c_first_name"
  Const        r305, "c_first_name"
  Index        r306, r288, r305
  // c_last_name: c.c_last_name,
  Const        r307, "c_last_name"
  Const        r308, "c_last_name"
  Index        r309, r288, r308
  // ctr_total_return: ctr.ctr_total_return
  Const        r310, "ctr_total_return"
  Const        r311, "ctr_total_return"
  Index        r312, r167, r311
  // c_customer_id: c.c_customer_id,
  Move         r313, r301
  Move         r314, r303
  // c_first_name: c.c_first_name,
  Move         r315, r304
  Move         r316, r306
  // c_last_name: c.c_last_name,
  Move         r317, r307
  Move         r318, r309
  // ctr_total_return: ctr.ctr_total_return
  Move         r319, r310
  Move         r320, r312
  // select {
  MakeMap      r321, 4, r313
  // from ctr in customer_total_return
  Append       r229, r229, r321
L23:
  // join c in customer on ctr.ctr_customer_sk == c.c_customer_sk
  Const        r323, 1
  Add          r284, r284, r323
  Jump         L24
L22:
  // join avg in avg_by_state on ctr.ctr_state == avg.state
  Const        r324, 1
  Add          r260, r260, r324
  Jump         L25
L21:
  // from ctr in customer_total_return
  Const        r325, 1
  AddInt       r242, r242, r325
  Jump         L26
L20:
  // json(result)
  JSON         r229
  // expect result == [{c_customer_id: "C1", c_first_name: "John", c_last_name: "Doe", ctr_total_return: 150.0}]
  Const        r326, [{"c_customer_id": "C1", "c_first_name": "John", "c_last_name": "Doe", "ctr_total_return": 150}]
  Equal        r327, r229, r326
  Expect       r327
  Return       r0
