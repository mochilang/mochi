func main (regs=235)
  // let web_returns = [
  Const        r0, [{"wr_return_amt": 100.0, "wr_returned_date_sk": 1, "wr_returning_addr_sk": 1, "wr_returning_customer_sk": 1}, {"wr_return_amt": 30.0, "wr_returned_date_sk": 1, "wr_returning_addr_sk": 2, "wr_returning_customer_sk": 2}, {"wr_return_amt": 50.0, "wr_returned_date_sk": 1, "wr_returning_addr_sk": 1, "wr_returning_customer_sk": 1}]
  // let date_dim = [
  Const        r1, [{"d_date_sk": 1, "d_year": 2000}]
  // let customer_address = [
  Const        r2, [{"ca_address_sk": 1, "ca_state": "CA"}, {"ca_address_sk": 2, "ca_state": "CA"}]
  // let customer = [
  Const        r3, [{"c_current_addr_sk": 1, "c_customer_id": "C1", "c_customer_sk": 1, "c_first_name": "John", "c_last_name": "Doe"}, {"c_current_addr_sk": 2, "c_customer_id": "C2", "c_customer_sk": 2, "c_first_name": "Jane", "c_last_name": "Smith"}]
  // from wr in web_returns
  Const        r4, []
  // group by {cust: wr.wr_returning_customer_sk, state: ca.ca_state} into g
  Const        r5, "cust"
  Const        r6, "wr_returning_customer_sk"
  Const        r7, "state"
  Const        r8, "ca_state"
  // where d.d_year == 2000 && ca.ca_state == "CA"
  Const        r9, "d_year"
  // ctr_customer_sk: g.key.cust,
  Const        r10, "ctr_customer_sk"
  Const        r11, "key"
  // ctr_state: g.key.state,
  Const        r12, "ctr_state"
  // ctr_total_return: sum(from x in g select x.wr_return_amt)
  Const        r13, "ctr_total_return"
  Const        r14, "wr_return_amt"
  // from wr in web_returns
  MakeMap      r15, 0, r0
  Const        r17, []
  Move         r16, r17
  IterPrep     r18, r0
  Len          r19, r18
  Const        r20, 0
  LessInt      r21, r20, r19
  JumpIfFalse  r21, L0
  Index        r22, r18, r20
  Move         r23, r22
L7:
  // join d in date_dim on wr.wr_returned_date_sk == d.d_date_sk
  IterPrep     r24, r1
  Len          r25, r24
  Const        r26, 0
  LessInt      r27, r26, r25
  JumpIfFalse  r27, L1
  Index        r28, r24, r26
  Move         r29, r28
  Const        r30, "wr_returned_date_sk"
  Index        r31, r23, r30
  Const        r32, "d_date_sk"
  Index        r33, r29, r32
  Equal        r34, r31, r33
  JumpIfFalse  r34, L2
  // join ca in customer_address on wr.wr_returning_addr_sk == ca.ca_address_sk
  IterPrep     r35, r2
  Len          r36, r35
  Const        r37, 0
  LessInt      r38, r37, r36
  JumpIfFalse  r38, L2
  Index        r39, r35, r37
  Move         r40, r39
L6:
  Const        r41, "wr_returning_addr_sk"
  Index        r42, r23, r41
  Const        r43, "ca_address_sk"
  Index        r44, r40, r43
  Equal        r45, r42, r44
  JumpIfFalse  r45, L3
  // where d.d_year == 2000 && ca.ca_state == "CA"
  Const        r9, "d_year"
  Index        r46, r29, r9
  Const        r47, 2000
  Equal        r48, r46, r47
  Const        r8, "ca_state"
  Index        r49, r40, r8
  Const        r50, "CA"
  Equal        r51, r49, r50
  Move         r52, r48
  JumpIfFalse  r52, L4
  Move         r52, r51
  JumpIfFalse  r52, L3
  // from wr in web_returns
  Const        r53, "wr"
  Move         r54, r23
  Const        r55, "d"
L4:
  Move         r56, r29
  Const        r57, "ca"
  Move         r58, r40
  Move         r59, r53
  Move         r60, r54
  Move         r61, r55
  Move         r62, r56
  Move         r63, r57
  Move         r64, r58
  MakeMap      r65, 3, r59
  // group by {cust: wr.wr_returning_customer_sk, state: ca.ca_state} into g
  Const        r66, "cust"
  Const        r6, "wr_returning_customer_sk"
  Index        r67, r23, r6
  Const        r68, "state"
  Const        r8, "ca_state"
  Index        r69, r40, r8
  Move         r70, r66
  Move         r71, r67
  Move         r72, r68
  Move         r73, r69
  MakeMap      r74, 2, r70
  Str          r75, r74
  In           r76, r75, r15
  JumpIfTrue   r76, L5
  // from wr in web_returns
  Const        r17, []
  Const        r77, "__group__"
  Const        r78, true
  Const        r11, "key"
  // group by {cust: wr.wr_returning_customer_sk, state: ca.ca_state} into g
  Move         r79, r74
  // from wr in web_returns
  Const        r80, "items"
  Move         r81, r17
  Const        r82, "count"
  Const        r83, 0
  Move         r84, r77
  Move         r85, r78
  Move         r86, r11
  Move         r87, r79
  Move         r88, r80
  Move         r89, r81
  Move         r90, r82
  Move         r91, r83
  MakeMap      r92, 4, r84
  SetIndex     r15, r75, r92
  Append       r93, r16, r92
  Move         r16, r93
  Index        r94, r15, r75
  Index        r95, r94, r80
  Append       r96, r95, r65
  SetIndex     r94, r80, r96
L5:
  Index        r97, r94, r82
  Const        r98, 1
  AddInt       r99, r97, r98
  SetIndex     r94, r82, r99
  // join ca in customer_address on wr.wr_returning_addr_sk == ca.ca_address_sk
  AddInt       r37, r37, r98
  Jump         L6
L3:
  // from wr in web_returns
  AddInt       r20, r20, r98
  Jump         L7
L2:
  Move         r100, r83
  Len          r101, r16
  LessInt      r102, r100, r101
L1:
  JumpIfFalse  r102, L8
  Index        r103, r16, r100
  Move         r104, r103
L0:
  // ctr_customer_sk: g.key.cust,
  Const        r105, "ctr_customer_sk"
  Const        r11, "key"
  Index        r106, r104, r11
L11:
  Const        r5, "cust"
  Index        r107, r106, r5
  // ctr_state: g.key.state,
  Const        r108, "ctr_state"
  Index        r109, r104, r11
  Const        r7, "state"
  Index        r110, r109, r7
  // ctr_total_return: sum(from x in g select x.wr_return_amt)
  Const        r111, "ctr_total_return"
  Const        r112, []
  Const        r14, "wr_return_amt"
  IterPrep     r113, r104
  Len          r114, r113
  Const        r83, 0
  Move         r115, r83
  LessInt      r116, r115, r114
  JumpIfFalse  r116, L9
  Index        r117, r113, r115
  Move         r118, r117
  Const        r14, "wr_return_amt"
  Index        r119, r118, r14
  Append       r120, r112, r119
  Move         r112, r120
L10:
  Const        r98, 1
  AddInt       r115, r115, r98
  Jump         L10
L9:
  // from wr in web_returns
  Append       r129, r4, r128
  Move         r4, r129
  Const        r98, 1
  AddInt       r100, r100, r98
  Jump         L11
L8:
  // from ctr in customer_total_return
  Const        r134, 0
  MakeMap      r135, 0, r0
  Const        r17, []
  Move         r136, r17
  LessInt      r137, r134, r133
  JumpIfFalse  r137, L12
  Index        r138, r132, r134
  Move         r139, r138
  // group by ctr.ctr_state into g
  Const        r12, "ctr_state"
  Index        r140, r139, r12
  Str          r141, r140
  In           r142, r141, r135
L14:
  JumpIfTrue   r142, L13
  // from ctr in customer_total_return
  Const        r17, []
  Const        r77, "__group__"
  Const        r78, true
  Const        r11, "key"
  // group by ctr.ctr_state into g
  Move         r143, r140
  // from ctr in customer_total_return
  Const        r80, "items"
  Move         r144, r17
  Const        r82, "count"
  Const        r83, 0
  Move         r145, r77
  Move         r146, r78
  Move         r147, r11
  Move         r148, r143
  Move         r149, r80
  Move         r150, r144
  Move         r151, r82
  Move         r152, r83
  MakeMap      r153, 4, r145
  SetIndex     r135, r141, r153
  Append       r154, r136, r153
  Move         r136, r154
  Index        r155, r135, r141
  Index        r156, r155, r80
  Append       r157, r156, r138
  SetIndex     r155, r80, r157
  Index        r158, r155, r82
  Const        r98, 1
  AddInt       r159, r158, r98
  SetIndex     r155, r82, r159
L13:
  AddInt       r134, r134, r98
  Jump         L14
L12:
  // select {state: g.key, avg_return: avg(from x in g select x.ctr_total_return)}
  Const        r167, []
  Const        r13, "ctr_total_return"
  IterPrep     r168, r104
L16:
  Len          r169, r168
  Const        r83, 0
  Move         r170, r83
  LessInt      r171, r170, r169
  JumpIfFalse  r171, L15
  Index        r172, r168, r170
  Move         r118, r172
  Const        r13, "ctr_total_return"
  Index        r173, r118, r13
  Append       r174, r167, r173
  Move         r167, r174
  Const        r98, 1
  AddInt       r170, r170, r98
  Avg          r175, r167
  Move         r176, r164
  Move         r177, r165
  Move         r178, r166
  Move         r179, r175
  MakeMap      r180, 2, r176
  // from ctr in customer_total_return
  Append       r181, r130, r180
  Move         r130, r181
  AddInt       r160, r160, r98
  Jump         L16
L15:
  // where ctr.ctr_total_return > avg.avg_return * 1.2
  Const        r13, "ctr_total_return"
  Const        r131, "avg_return"
  // c_customer_id: c.c_customer_id,
  Const        r183, "c_customer_id"
  // c_first_name: c.c_first_name,
  Const        r184, "c_first_name"
  // c_last_name: c.c_last_name,
  Const        r185, "c_last_name"
  // from ctr in customer_total_return
  IterPrep     r186, r4
  Len          r187, r186
  Const        r83, 0
  Move         r188, r83
  LessInt      r189, r188, r187
  JumpIfFalse  r189, L17
  Index        r190, r186, r188
  Move         r139, r190
  // join avg in avg_by_state on ctr.ctr_state == avg.state
  IterPrep     r191, r130
  Len          r192, r191
  Const        r12, "ctr_state"
  Const        r7, "state"
  // where ctr.ctr_total_return > avg.avg_return * 1.2
  Const        r13, "ctr_total_return"
  Const        r131, "avg_return"
  // c_customer_id: c.c_customer_id,
  Const        r183, "c_customer_id"
  // c_first_name: c.c_first_name,
  Const        r184, "c_first_name"
  // c_last_name: c.c_last_name,
  Const        r185, "c_last_name"
  // join avg in avg_by_state on ctr.ctr_state == avg.state
  Const        r83, 0
  Move         r193, r83
  LessInt      r194, r193, r192
  JumpIfFalse  r194, L18
  Index        r195, r191, r193
  Move         r196, r195
  Const        r12, "ctr_state"
  Index        r197, r139, r12
  Const        r7, "state"
  Index        r198, r196, r7
  Equal        r199, r197, r198
  JumpIfFalse  r199, L19
  // join c in customer on ctr.ctr_customer_sk == c.c_customer_sk
  IterPrep     r200, r3
  Len          r201, r200
  Const        r10, "ctr_customer_sk"
  Const        r202, "c_customer_sk"
  // where ctr.ctr_total_return > avg.avg_return * 1.2
  Const        r13, "ctr_total_return"
  Const        r131, "avg_return"
  // c_customer_id: c.c_customer_id,
  Const        r183, "c_customer_id"
  // c_first_name: c.c_first_name,
  Const        r184, "c_first_name"
  // c_last_name: c.c_last_name,
  Const        r185, "c_last_name"
  // join c in customer on ctr.ctr_customer_sk == c.c_customer_sk
  Const        r83, 0
  Move         r203, r83
  LessInt      r204, r203, r201
  JumpIfFalse  r204, L19
  Index        r205, r200, r203
  Move         r206, r205
  Const        r10, "ctr_customer_sk"
  Index        r207, r139, r10
  Const        r202, "c_customer_sk"
  Index        r208, r206, r202
  Equal        r209, r207, r208
  JumpIfFalse  r209, L20
  // where ctr.ctr_total_return > avg.avg_return * 1.2
  Const        r13, "ctr_total_return"
  Index        r210, r139, r13
  Const        r131, "avg_return"
  Index        r211, r196, r131
  Const        r212, 1.2
  MulFloat     r213, r211, r212
  LessFloat    r214, r213, r210
  JumpIfFalse  r214, L20
  // c_customer_id: c.c_customer_id,
  Const        r215, "c_customer_id"
  Const        r183, "c_customer_id"
  Index        r216, r206, r183
  // c_first_name: c.c_first_name,
  Const        r217, "c_first_name"
  Const        r184, "c_first_name"
  Index        r218, r206, r184
  // c_last_name: c.c_last_name,
  Const        r219, "c_last_name"
  Const        r185, "c_last_name"
  Index        r220, r206, r185
L21:
  // ctr_total_return: ctr.ctr_total_return
  Const        r221, "ctr_total_return"
  Const        r13, "ctr_total_return"
  Index        r222, r139, r13
  // c_customer_id: c.c_customer_id,
  Move         r223, r215
  Move         r224, r216
  // c_first_name: c.c_first_name,
  Move         r225, r217
  Move         r226, r218
  // c_last_name: c.c_last_name,
  Move         r227, r219
  Move         r228, r220
  // ctr_total_return: ctr.ctr_total_return
  Move         r229, r221
  Move         r230, r222
  // select {
  MakeMap      r231, 4, r223
  // from ctr in customer_total_return
  Append       r232, r182, r231
  Move         r182, r232
  // join c in customer on ctr.ctr_customer_sk == c.c_customer_sk
  Const        r98, 1
  Add          r203, r203, r98
  Jump         L21
