func main (regs=324)
  // let web_returns = [
  Const        r0, [{"wr_return_amt": 100, "wr_returned_date_sk": 1, "wr_returning_addr_sk": 1, "wr_returning_customer_sk": 1}, {"wr_return_amt": 30, "wr_returned_date_sk": 1, "wr_returning_addr_sk": 2, "wr_returning_customer_sk": 2}, {"wr_return_amt": 50, "wr_returned_date_sk": 1, "wr_returning_addr_sk": 1, "wr_returning_customer_sk": 1}]
  // let date_dim = [
  Const        r1, [{"d_date_sk": 1, "d_year": 2000}]
  // let customer_address = [
  Const        r2, [{"ca_address_sk": 1, "ca_state": "CA"}, {"ca_address_sk": 2, "ca_state": "CA"}]
  // let customer = [
  Const        r3, [{"c_current_addr_sk": 1, "c_customer_id": "C1", "c_customer_sk": 1, "c_first_name": "John", "c_last_name": "Doe"}, {"c_current_addr_sk": 2, "c_customer_id": "C2", "c_customer_sk": 2, "c_first_name": "Jane", "c_last_name": "Smith"}]
  // from wr in web_returns
  Const        r4, []
  MakeMap      r19, 0, r0
  Const        r20, []
  IterPrep     r22, r0
  Len          r23, r22
  Const        r24, 0
L1:
  LessInt      r25, r24, r23
  JumpIfFalse  r25, L0
  Index        r27, r22, r24
  // join d in date_dim on wr.wr_returned_date_sk == d.d_date_sk
  IterPrep     r28, r1
  Len          r29, r28
  Const        r30, 0
L2:
  LessInt      r31, r30, r29
  JumpIfFalse  r31, L1
  Index        r33, r28, r30
  Const        r34, "wr_returned_date_sk"
  Index        r35, r27, r34
  Const        r36, "d_date_sk"
  Index        r37, r33, r36
  Equal        r38, r35, r37
  JumpIfFalse  r38, L2
  // join ca in customer_address on wr.wr_returning_addr_sk == ca.ca_address_sk
  IterPrep     r39, r2
  Len          r40, r39
  Const        r41, 0
L6:
  LessInt      r42, r41, r40
  JumpIfFalse  r42, L2
  Index        r44, r39, r41
  Const        r45, "wr_returning_addr_sk"
  Index        r46, r27, r45
  Const        r47, "ca_address_sk"
  Index        r48, r44, r47
  Equal        r49, r46, r48
  JumpIfFalse  r49, L3
  // where d.d_year == 2000 && ca.ca_state == "CA"
  Const        r50, "d_year"
  Index        r51, r33, r50
  Const        r52, 2000
  Equal        r53, r51, r52
  Const        r54, "ca_state"
  Index        r55, r44, r54
  Const        r56, "CA"
  Equal        r57, r55, r56
  Move         r58, r53
  JumpIfFalse  r58, L4
  Move         r58, r57
L4:
  JumpIfFalse  r58, L3
  // from wr in web_returns
  Const        r59, "wr"
  Move         r60, r27
  Const        r61, "d"
  Move         r62, r33
  Const        r63, "ca"
  Move         r64, r44
  MakeMap      r65, 3, r59
  // group by {cust: wr.wr_returning_customer_sk, state: ca.ca_state} into g
  Const        r66, "cust"
  Const        r67, "wr_returning_customer_sk"
  Index        r68, r27, r67
  Const        r69, "state"
  Const        r70, "ca_state"
  Index        r71, r44, r70
  Move         r72, r66
  Move         r73, r68
  Move         r74, r69
  Move         r75, r71
  MakeMap      r76, 2, r72
  Str          r77, r76
  In           r78, r77, r19
  JumpIfTrue   r78, L5
  // from wr in web_returns
  Const        r79, []
  Const        r80, "__group__"
  Const        r81, true
  Const        r82, "key"
  // group by {cust: wr.wr_returning_customer_sk, state: ca.ca_state} into g
  Move         r83, r76
  // from wr in web_returns
  Const        r84, "items"
  Move         r85, r79
  Const        r86, "count"
  Const        r87, 0
  Move         r88, r80
  Move         r89, r81
  Move         r90, r82
  Move         r91, r83
  Move         r92, r84
  Move         r93, r85
  Move         r94, r86
  Move         r95, r87
  MakeMap      r96, 4, r88
  SetIndex     r19, r77, r96
  Append       r20, r20, r96
L5:
  Const        r98, "items"
  Index        r99, r19, r77
  Index        r100, r99, r98
  Append       r101, r100, r65
  SetIndex     r99, r98, r101
  Const        r102, "count"
  Index        r103, r99, r102
  Const        r104, 1
  AddInt       r105, r103, r104
  SetIndex     r99, r102, r105
L3:
  // join ca in customer_address on wr.wr_returning_addr_sk == ca.ca_address_sk
  Const        r106, 1
  AddInt       r41, r41, r106
  Jump         L6
L0:
  // from wr in web_returns
  Const        r109, 0
  Len          r111, r20
L10:
  LessInt      r112, r109, r111
  JumpIfFalse  r112, L7
  Index        r114, r20, r109
  // ctr_customer_sk: g.key.cust,
  Const        r115, "ctr_customer_sk"
  Const        r116, "key"
  Index        r117, r114, r116
  Const        r118, "cust"
  Index        r119, r117, r118
  // ctr_state: g.key.state,
  Const        r120, "ctr_state"
  Const        r121, "key"
  Index        r122, r114, r121
  Const        r123, "state"
  Index        r124, r122, r123
  // ctr_total_return: sum(from x in g select x.wr_return_amt)
  Const        r125, "ctr_total_return"
  Const        r126, []
  IterPrep     r128, r114
  Len          r129, r128
  Const        r130, 0
L9:
  LessInt      r132, r130, r129
  JumpIfFalse  r132, L8
  Index        r134, r128, r130
  Const        r135, "wr_return_amt"
  Index        r136, r134, r135
  Append       r126, r126, r136
  Const        r138, 1
  AddInt       r130, r130, r138
  Jump         L9
L8:
  Sum          r139, r126
  // ctr_customer_sk: g.key.cust,
  Move         r140, r115
  Move         r141, r119
  // ctr_state: g.key.state,
  Move         r142, r120
  Move         r143, r124
  // ctr_total_return: sum(from x in g select x.wr_return_amt)
  Move         r144, r125
  Move         r145, r139
  // select {
  MakeMap      r146, 3, r140
  // from wr in web_returns
  Append       r4, r4, r146
  Jump         L10
L7:
  // from ctr in customer_total_return
  Const        r149, []
  IterPrep     r155, r4
  Len          r156, r155
  Const        r157, 0
  MakeMap      r158, 0, r0
  Const        r159, []
L13:
  LessInt      r161, r157, r156
  JumpIfFalse  r161, L11
  Index        r162, r155, r157
  Move         r163, r162
  // group by ctr.ctr_state into g
  Const        r164, "ctr_state"
  Index        r165, r163, r164
  Str          r166, r165
  In           r167, r166, r158
  JumpIfTrue   r167, L12
  // from ctr in customer_total_return
  Const        r168, []
  Const        r169, "__group__"
  Const        r170, true
  Const        r171, "key"
  // group by ctr.ctr_state into g
  Move         r172, r165
  // from ctr in customer_total_return
  Const        r173, "items"
  Move         r174, r168
  Const        r175, "count"
  Const        r176, 0
  Move         r177, r169
  Move         r178, r170
  Move         r179, r171
  Move         r180, r172
  Move         r181, r173
  Move         r182, r174
  Move         r183, r175
  Move         r184, r176
  MakeMap      r185, 4, r177
  SetIndex     r158, r166, r185
  Append       r159, r159, r185
L12:
  Const        r187, "items"
  Index        r188, r158, r166
  Index        r189, r188, r187
  Append       r190, r189, r162
  SetIndex     r188, r187, r190
  Const        r191, "count"
  Index        r192, r188, r191
  Const        r193, 1
  AddInt       r194, r192, r193
  SetIndex     r188, r191, r194
  Const        r195, 1
  AddInt       r157, r157, r195
  Jump         L13
L11:
  Const        r196, 0
  Len          r198, r159
L17:
  LessInt      r199, r196, r198
  JumpIfFalse  r199, L14
  Index        r114, r159, r196
  // select {state: g.key, avg_return: avg(from x in g select x.ctr_total_return)}
  Const        r201, "state"
  Const        r202, "key"
  Index        r203, r114, r202
  Const        r204, "avg_return"
  Const        r205, []
  IterPrep     r207, r114
  Len          r208, r207
  Const        r209, 0
L16:
  LessInt      r211, r209, r208
  JumpIfFalse  r211, L15
  Index        r134, r207, r209
  Const        r213, "ctr_total_return"
  Index        r214, r134, r213
  Append       r205, r205, r214
  Jump         L16
L15:
  Avg          r217, r205
  Move         r218, r201
  Move         r219, r203
  Move         r220, r204
  Move         r221, r217
  MakeMap      r222, 2, r218
  // from ctr in customer_total_return
  Append       r149, r149, r222
  Const        r224, 1
  AddInt       r196, r196, r224
  Jump         L17
L14:
  // from ctr in customer_total_return
  Const        r225, []
  IterPrep     r236, r4
  Len          r237, r236
  Const        r238, 0
L24:
  LessInt      r240, r238, r237
  JumpIfFalse  r240, L18
  Index        r163, r236, r238
  // join avg in avg_by_state on ctr.ctr_state == avg.state
  IterPrep     r242, r149
  Len          r243, r242
  Const        r256, 0
L23:
  LessInt      r258, r256, r243
  JumpIfFalse  r258, L19
  Index        r260, r242, r256
  Const        r261, "ctr_state"
  Index        r262, r163, r261
  Const        r263, "state"
  Index        r264, r260, r263
  Equal        r265, r262, r264
  JumpIfFalse  r265, L20
  // join c in customer on ctr.ctr_customer_sk == c.c_customer_sk
  IterPrep     r266, r3
  Len          r267, r266
  Const        r280, 0
L22:
  LessInt      r282, r280, r267
  JumpIfFalse  r282, L20
  Index        r284, r266, r280
  Const        r285, "ctr_customer_sk"
  Index        r286, r163, r285
  Const        r287, "c_customer_sk"
  Index        r288, r284, r287
  Equal        r289, r286, r288
  JumpIfFalse  r289, L21
  // where ctr.ctr_total_return > avg.avg_return * 1.2
  Const        r290, "ctr_total_return"
  Index        r291, r163, r290
  Const        r292, "avg_return"
  Index        r293, r260, r292
  Const        r294, 1.2
  MulFloat     r295, r293, r294
  LessFloat    r296, r295, r291
  JumpIfFalse  r296, L21
  // c_customer_id: c.c_customer_id,
  Const        r297, "c_customer_id"
  Const        r298, "c_customer_id"
  Index        r299, r284, r298
  // c_first_name: c.c_first_name,
  Const        r300, "c_first_name"
  Const        r301, "c_first_name"
  Index        r302, r284, r301
  // c_last_name: c.c_last_name,
  Const        r303, "c_last_name"
  Const        r304, "c_last_name"
  Index        r305, r284, r304
  // ctr_total_return: ctr.ctr_total_return
  Const        r306, "ctr_total_return"
  Const        r307, "ctr_total_return"
  Index        r308, r163, r307
  // c_customer_id: c.c_customer_id,
  Move         r309, r297
  Move         r310, r299
  // c_first_name: c.c_first_name,
  Move         r311, r300
  Move         r312, r302
  // c_last_name: c.c_last_name,
  Move         r313, r303
  Move         r314, r305
  // ctr_total_return: ctr.ctr_total_return
  Move         r315, r306
  Move         r316, r308
  // select {
  MakeMap      r317, 4, r309
  // from ctr in customer_total_return
  Append       r225, r225, r317
L21:
  // join c in customer on ctr.ctr_customer_sk == c.c_customer_sk
  Const        r319, 1
  Add          r280, r280, r319
  Jump         L22
L20:
  // join avg in avg_by_state on ctr.ctr_state == avg.state
  Const        r320, 1
  Add          r256, r256, r320
  Jump         L23
L19:
  // from ctr in customer_total_return
  Const        r321, 1
  AddInt       r238, r238, r321
  Jump         L24
L18:
  // json(result)
  JSON         r225
  // expect result == [{c_customer_id: "C1", c_first_name: "John", c_last_name: "Doe", ctr_total_return: 150.0}]
  Const        r322, [{"c_customer_id": "C1", "c_first_name": "John", "c_last_name": "Doe", "ctr_total_return": 150}]
  Equal        r323, r225, r322
  Expect       r323
  Return       r0
