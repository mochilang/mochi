func main (regs=189)
  // let store_sales = [
  Const        r0, [{"ss_coupon_amt": 50.0, "ss_list_price": 100.0, "ss_quantity": 3, "ss_wholesale_cost": 30.0}, {"ss_coupon_amt": 10.0, "ss_list_price": 80.0, "ss_quantity": 8, "ss_wholesale_cost": 20.0}, {"ss_coupon_amt": 5.0, "ss_list_price": 60.0, "ss_quantity": 12, "ss_wholesale_cost": 15.0}]
  // from ss in store_sales
  Const        r1, []
  // where ss.ss_quantity >= 0 && ss.ss_quantity <= 5
  Const        r2, "ss_quantity"
  // && ((ss.ss_list_price >= 0 && ss.ss_list_price <= 110) || (ss.ss_coupon_amt >= 0 && ss.ss_coupon_amt <= 1000) || (ss.ss_wholesale_cost >= 0 && ss.ss_wholesale_cost <= 50))
  Const        r3, "ss_list_price"
  Const        r4, "ss_coupon_amt"
  Const        r5, "ss_wholesale_cost"
  // from ss in store_sales
  IterPrep     r6, r0
  Len          r7, r6
  Const        r9, 0
  Move         r8, r9
  LessInt      r10, r8, r7
  JumpIfFalse  r10, L0
  Index        r11, r6, r8
  Move         r12, r11
L7:
  // where ss.ss_quantity >= 0 && ss.ss_quantity <= 5
  Const        r2, "ss_quantity"
  Index        r13, r12, r2
  Const        r9, 0
  LessEq       r14, r9, r13
  Index        r15, r12, r2
  Const        r16, 5
  LessEq       r17, r15, r16
  Move         r18, r14
  JumpIfFalse  r18, L1
  Move         r18, r17
  // && ((ss.ss_list_price >= 0 && ss.ss_list_price <= 110) || (ss.ss_coupon_amt >= 0 && ss.ss_coupon_amt <= 1000) || (ss.ss_wholesale_cost >= 0 && ss.ss_wholesale_cost <= 50))
  JumpIfFalse  r18, L1
  Const        r3, "ss_list_price"
  Index        r19, r12, r3
  Const        r9, 0
  LessEq       r20, r9, r19
  Index        r21, r12, r3
  Const        r22, 110
  LessEq       r23, r21, r22
  Move         r24, r20
  JumpIfFalse  r24, L2
  Move         r24, r23
  Move         r25, r24
  JumpIfTrue   r25, L3
  Const        r4, "ss_coupon_amt"
  Index        r26, r12, r4
  Const        r9, 0
  LessEq       r27, r9, r26
L2:
  Index        r28, r12, r4
  Const        r29, 1000
  LessEq       r30, r28, r29
  Move         r31, r27
  JumpIfFalse  r31, L4
  Move         r31, r30
  Move         r25, r31
  JumpIfTrue   r25, L3
  Const        r5, "ss_wholesale_cost"
  Index        r32, r12, r5
  Const        r9, 0
  LessEq       r33, r9, r32
  Index        r34, r12, r5
L4:
  Const        r35, 50
  LessEq       r36, r34, r35
  Move         r37, r33
  JumpIfFalse  r37, L5
  Move         r37, r36
  Move         r25, r37
  Move         r18, r25
  // where ss.ss_quantity >= 0 && ss.ss_quantity <= 5
  JumpIfFalse  r18, L6
  // from ss in store_sales
  Append       r38, r1, r12
  Move         r1, r38
  Const        r39, 1
  AddInt       r8, r8, r39
  Jump         L7
L5:
  // from ss in store_sales
  Const        r40, []
L3:
  // where ss.ss_quantity >= 6 && ss.ss_quantity <= 10
  Const        r2, "ss_quantity"
L1:
  // && ((ss.ss_list_price >= 0 && ss.ss_list_price <= 110) || (ss.ss_coupon_amt >= 0 && ss.ss_coupon_amt <= 1000) || (ss.ss_wholesale_cost >= 0 && ss.ss_wholesale_cost <= 50))
  Const        r3, "ss_list_price"
  Const        r4, "ss_coupon_amt"
  Const        r5, "ss_wholesale_cost"
L6:
  // from ss in store_sales
  IterPrep     r41, r0
  Len          r42, r41
  Const        r9, 0
L0:
  Move         r43, r9
  LessInt      r44, r43, r42
  JumpIfFalse  r44, L8
  Index        r45, r41, r43
  Move         r12, r45
  // where ss.ss_quantity >= 6 && ss.ss_quantity <= 10
  Const        r2, "ss_quantity"
  Index        r46, r12, r2
  Const        r47, 6
  LessEq       r48, r47, r46
  Index        r49, r12, r2
  Const        r50, 10
  LessEq       r51, r49, r50
  Move         r52, r48
L15:
  JumpIfFalse  r52, L9
  Move         r52, r51
  // && ((ss.ss_list_price >= 0 && ss.ss_list_price <= 110) || (ss.ss_coupon_amt >= 0 && ss.ss_coupon_amt <= 1000) || (ss.ss_wholesale_cost >= 0 && ss.ss_wholesale_cost <= 50))
  JumpIfFalse  r52, L9
  Const        r3, "ss_list_price"
  Index        r53, r12, r3
  Const        r9, 0
  LessEq       r54, r9, r53
  Index        r55, r12, r3
  Const        r22, 110
  LessEq       r56, r55, r22
  Move         r57, r54
  JumpIfFalse  r57, L10
  Move         r57, r56
  Move         r58, r57
  JumpIfTrue   r58, L11
  Const        r4, "ss_coupon_amt"
  Index        r59, r12, r4
  Const        r9, 0
  LessEq       r60, r9, r59
  Index        r61, r12, r4
  Const        r29, 1000
  LessEq       r62, r61, r29
  Move         r63, r60
  JumpIfFalse  r63, L12
  Move         r63, r62
  Move         r58, r63
  JumpIfTrue   r58, L11
L10:
  Const        r5, "ss_wholesale_cost"
  Index        r64, r12, r5
  Const        r9, 0
  LessEq       r65, r9, r64
  Index        r66, r12, r5
  Const        r35, 50
  LessEq       r67, r66, r35
  Move         r68, r65
  JumpIfFalse  r68, L13
  Move         r68, r67
  Move         r58, r68
  Move         r52, r58
  // where ss.ss_quantity >= 6 && ss.ss_quantity <= 10
  JumpIfFalse  r52, L14
L12:
  // from ss in store_sales
  Append       r69, r40, r12
  Move         r40, r69
  Const        r39, 1
  AddInt       r43, r43, r39
  Jump         L15
L13:
  // B1_LP: avg(from x in bucket1 select x.ss_list_price),
  JumpIfFalse  r75, L16
L11:
  Index        r76, r72, r74
L9:
  Move         r77, r76
  Const        r3, "ss_list_price"
  Index        r78, r77, r3
L14:
  Append       r79, r71, r78
  Move         r71, r79
  Const        r39, 1
L8:
  AddInt       r74, r74, r39
  // B1_CNTD: count(from x in bucket1 group by x.ss_list_price into g select g.key),
  Const        r3, "ss_list_price"
  Const        r85, "key"
  IterPrep     r86, r1
  Len          r87, r86
  Const        r88, 0
  MakeMap      r89, 0, r0
  Const        r91, []
  Move         r90, r91
  LessInt      r92, r88, r87
  JumpIfFalse  r92, L17
  Index        r93, r86, r88
L16:
  Move         r77, r93
  Const        r3, "ss_list_price"
  Index        r94, r77, r3
  Str          r95, r94
  In           r96, r95, r89
  JumpIfTrue   r96, L18
  Const        r91, []
  Const        r97, "__group__"
  Const        r98, true
  Const        r85, "key"
  Move         r99, r94
  Const        r100, "items"
  Move         r101, r91
L19:
  Const        r102, "count"
  Const        r9, 0
  Move         r103, r97
  Move         r104, r98
  Move         r105, r85
  Move         r106, r99
  Move         r107, r100
  Move         r108, r101
  Move         r109, r102
  Move         r110, r9
  MakeMap      r111, 4, r103
  SetIndex     r89, r95, r111
  Append       r112, r90, r111
  Move         r90, r112
  Index        r113, r89, r95
  Index        r114, r113, r100
  Append       r115, r114, r93
  SetIndex     r113, r100, r115
  Index        r116, r113, r102
  Const        r39, 1
  AddInt       r117, r116, r39
  SetIndex     r113, r102, r117
  AddInt       r88, r88, r39
  Jump         L19
L18:
  Move         r122, r121
  Const        r85, "key"
  Index        r123, r122, r85
  Append       r124, r84, r123
  Move         r84, r124
  Const        r39, 1
  AddInt       r118, r118, r39
  Jump         L20
L17:
  // B2_LP: avg(from x in bucket2 select x.ss_list_price),
  Len          r129, r128
  Const        r9, 0
  Move         r130, r9
L20:
  LessInt      r131, r130, r129
  JumpIfFalse  r131, L21
  Index        r132, r128, r130
  Move         r77, r132
  Const        r3, "ss_list_price"
  Index        r133, r77, r3
  Append       r134, r127, r133
  Move         r127, r134
  Const        r39, 1
  AddInt       r130, r130, r39
  // B2_CNTD: count(from x in bucket2 group by x.ss_list_price into g select g.key)
  Len          r141, r140
  Const        r142, 0
  MakeMap      r143, 0, r0
  Const        r91, []
  Move         r144, r91
  LessInt      r145, r142, r141
  JumpIfFalse  r145, L22
  Index        r146, r140, r142
  Move         r77, r146
  Const        r3, "ss_list_price"
  Index        r147, r77, r3
L21:
  Str          r148, r147
  In           r149, r148, r143
  JumpIfTrue   r149, L23
  Const        r91, []
  Const        r97, "__group__"
  Const        r98, true
  Const        r85, "key"
  Move         r150, r147
  Const        r100, "items"
  Move         r151, r91
  Const        r102, "count"
  Const        r9, 0
  Move         r152, r97
L24:
  Move         r153, r98
  Move         r154, r85
  Move         r155, r150
  Move         r156, r100
  Move         r157, r151
  Move         r158, r102
  Move         r159, r9
  MakeMap      r160, 4, r152
  SetIndex     r143, r148, r160
  Append       r161, r144, r160
  Move         r144, r161
  Index        r162, r143, r148
  Index        r163, r162, r100
  Append       r164, r163, r146
  SetIndex     r162, r100, r164
  Index        r165, r162, r102
  Const        r39, 1
  AddInt       r166, r165, r39
  SetIndex     r162, r102, r166
  AddInt       r142, r142, r39
  Jump         L24
L23:
  Append       r172, r139, r171
  Move         r139, r172
  Const        r39, 1
  AddInt       r167, r167, r39
  Jump         L25
L22:
  // B2_LP: avg(from x in bucket2 select x.ss_list_price),
  Move         r181, r135
  // B2_CNT: count(bucket2),
  Move         r182, r136
  Move         r183, r137
L25:
  // B2_CNTD: count(from x in bucket2 group by x.ss_list_price into g select g.key)
  Move         r184, r138
  Move         r185, r173
  // let result = {
  MakeMap      r186, 6, r174
  // json(result)
  JSON         r186
  // expect result == {
  Const        r187, {"B1_CNT": 1, "B1_CNTD": 1, "B1_LP": 100.0, "B2_CNT": 1, "B2_CNTD": 1, "B2_LP": 80.0}
  Equal        r188, r186, r187
  Expect       r188
  Return       r0
