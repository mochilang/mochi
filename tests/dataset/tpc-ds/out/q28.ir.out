func main (regs=192)
  // let store_sales = [
  Const        r0, [{"ss_coupon_amt": 50, "ss_list_price": 100, "ss_quantity": 3, "ss_wholesale_cost": 30}, {"ss_coupon_amt": 10, "ss_list_price": 80, "ss_quantity": 8, "ss_wholesale_cost": 20}, {"ss_coupon_amt": 5, "ss_list_price": 60, "ss_quantity": 12, "ss_wholesale_cost": 15}]
  // from ss in store_sales
  Const        r1, []
  // where ss.ss_quantity >= 0 && ss.ss_quantity <= 5
  Const        r2, "ss_quantity"
  // && ((ss.ss_list_price >= 0 && ss.ss_list_price <= 110) || (ss.ss_coupon_amt >= 0 && ss.ss_coupon_amt <= 1000) || (ss.ss_wholesale_cost >= 0 && ss.ss_wholesale_cost <= 50))
  Const        r3, "ss_list_price"
  Const        r4, "ss_coupon_amt"
  Const        r5, "ss_wholesale_cost"
  // from ss in store_sales
  IterPrep     r6, r0
  Len          r7, r6
  Const        r9, 0
  Move         r8, r9
L6:
  LessInt      r10, r8, r7
  JumpIfFalse  r10, L0
  Index        r12, r6, r8
  // where ss.ss_quantity >= 0 && ss.ss_quantity <= 5
  Index        r13, r12, r2
  LessEq       r14, r9, r13
  Index        r15, r12, r2
  Const        r16, 5
  LessEq       r17, r15, r16
  JumpIfFalse  r14, L1
  Move         r14, r17
  // && ((ss.ss_list_price >= 0 && ss.ss_list_price <= 110) || (ss.ss_coupon_amt >= 0 && ss.ss_coupon_amt <= 1000) || (ss.ss_wholesale_cost >= 0 && ss.ss_wholesale_cost <= 50))
  JumpIfFalse  r14, L1
  Index        r18, r12, r3
  LessEq       r19, r9, r18
  Index        r20, r12, r3
  Const        r21, 110
  LessEq       r22, r20, r21
  JumpIfFalse  r19, L2
  Move         r19, r22
L2:
  JumpIfTrue   r19, L3
  Index        r23, r12, r4
  LessEq       r24, r9, r23
  Index        r25, r12, r4
  Const        r26, 1000
  LessEq       r27, r25, r26
  JumpIfFalse  r24, L4
L4:
  Move         r19, r27
  JumpIfTrue   r19, L3
  Index        r28, r12, r5
  LessEq       r29, r9, r28
  Index        r30, r12, r5
  Const        r31, 50
  LessEq       r32, r30, r31
  JumpIfFalse  r29, L3
L3:
  Move         r14, r32
L1:
  // where ss.ss_quantity >= 0 && ss.ss_quantity <= 5
  JumpIfFalse  r14, L5
  // from ss in store_sales
  Append       r1, r1, r12
L5:
  Const        r34, 1
  AddInt       r8, r8, r34
  Jump         L6
L0:
  // from ss in store_sales
  Const        r35, []
  IterPrep     r36, r0
  Len          r37, r36
  Move         r38, r9
L13:
  LessInt      r39, r38, r37
  JumpIfFalse  r39, L7
  Index        r12, r36, r38
  // where ss.ss_quantity >= 6 && ss.ss_quantity <= 10
  Index        r41, r12, r2
  Const        r42, 6
  LessEq       r43, r42, r41
  Index        r44, r12, r2
  Const        r45, 10
  LessEq       r46, r44, r45
  JumpIfFalse  r43, L8
  Move         r43, r46
  // && ((ss.ss_list_price >= 0 && ss.ss_list_price <= 110) || (ss.ss_coupon_amt >= 0 && ss.ss_coupon_amt <= 1000) || (ss.ss_wholesale_cost >= 0 && ss.ss_wholesale_cost <= 50))
  JumpIfFalse  r43, L8
  Index        r47, r12, r3
  LessEq       r48, r9, r47
  Index        r49, r12, r3
  LessEq       r50, r49, r21
  JumpIfFalse  r48, L9
  Move         r48, r50
L9:
  JumpIfTrue   r48, L10
  Index        r51, r12, r4
  LessEq       r52, r9, r51
  Index        r53, r12, r4
  LessEq       r54, r53, r26
  JumpIfFalse  r52, L11
L11:
  Move         r48, r54
  JumpIfTrue   r48, L10
  Index        r55, r12, r5
  LessEq       r56, r9, r55
  Index        r57, r12, r5
  LessEq       r58, r57, r31
  JumpIfFalse  r56, L10
L10:
  Move         r43, r58
L8:
  // where ss.ss_quantity >= 6 && ss.ss_quantity <= 10
  JumpIfFalse  r43, L12
  // from ss in store_sales
  Append       r35, r35, r12
L12:
  AddInt       r38, r38, r34
  Jump         L13
L7:
  // B1_LP: avg(from x in bucket1 select x.ss_list_price),
  Const        r60, "B1_LP"
  Const        r61, []
  IterPrep     r62, r1
  Len          r63, r62
  Move         r64, r9
L15:
  LessInt      r65, r64, r63
  JumpIfFalse  r65, L14
  Index        r67, r62, r64
  Index        r68, r67, r3
  Append       r61, r61, r68
  AddInt       r64, r64, r34
  Jump         L15
L14:
  Avg          r70, r61
  // B1_CNT: count(bucket1),
  Const        r71, "B1_CNT"
  Count        r72, r1
  // B1_CNTD: count(from x in bucket1 group by x.ss_list_price into g select g.key),
  Const        r73, "B1_CNTD"
  Const        r74, []
  Const        r75, "key"
  IterPrep     r76, r1
  Len          r77, r76
  Const        r78, 0
  MakeMap      r79, 0, r0
  Const        r80, []
L18:
  LessInt      r82, r78, r77
  JumpIfFalse  r82, L16
  Index        r83, r76, r78
  Index        r84, r83, r3
  Str          r85, r84
  In           r86, r85, r79
  JumpIfTrue   r86, L17
  Const        r87, []
  Const        r88, "__group__"
  Const        r89, true
  Const        r90, "key"
  Move         r91, r84
  Const        r92, "items"
  Move         r93, r87
  Const        r94, "count"
  Const        r95, 0
  Move         r96, r88
  Move         r97, r89
  Move         r98, r90
  Move         r99, r91
  Move         r100, r92
  Move         r101, r93
  Move         r102, r94
  Move         r103, r95
  MakeMap      r104, 4, r96
  SetIndex     r79, r85, r104
  Append       r80, r80, r104
L17:
  Const        r106, "items"
  Index        r107, r79, r85
  Index        r108, r107, r106
  Append       r109, r108, r83
  SetIndex     r107, r106, r109
  Const        r110, "count"
  Index        r111, r107, r110
  AddInt       r112, r111, r34
  SetIndex     r107, r110, r112
  AddInt       r78, r78, r34
  Jump         L18
L16:
  Move         r113, r9
  Len          r114, r80
L20:
  LessInt      r115, r113, r114
  JumpIfFalse  r115, L19
  Index        r117, r80, r113
  Index        r118, r117, r75
  Append       r74, r74, r118
  AddInt       r113, r113, r34
  Jump         L20
L19:
  Count        r120, r74
  // B2_LP: avg(from x in bucket2 select x.ss_list_price),
  Const        r121, "B2_LP"
  Const        r122, []
  IterPrep     r123, r35
  Len          r124, r123
  Move         r125, r9
L22:
  LessInt      r126, r125, r124
  JumpIfFalse  r126, L21
  Index        r67, r123, r125
  Index        r128, r67, r3
  Append       r122, r122, r128
  AddInt       r125, r125, r34
  Jump         L22
L21:
  Avg          r130, r122
  // B2_CNT: count(bucket2),
  Const        r131, "B2_CNT"
  Count        r132, r35
  // B2_CNTD: count(from x in bucket2 group by x.ss_list_price into g select g.key)
  Const        r133, "B2_CNTD"
  Const        r134, []
  IterPrep     r135, r35
  Len          r136, r135
  Const        r137, 0
  MakeMap      r138, 0, r0
  Const        r139, []
L25:
  LessInt      r141, r137, r136
  JumpIfFalse  r141, L23
  Index        r142, r135, r137
  Index        r143, r142, r3
  Str          r144, r143
  In           r145, r144, r138
  JumpIfTrue   r145, L24
  Const        r146, []
  Const        r147, "__group__"
  Const        r148, true
  Const        r149, "key"
  Move         r150, r143
  Const        r151, "items"
  Move         r152, r146
  Const        r153, "count"
  Const        r154, 0
  Move         r155, r147
  Move         r156, r148
  Move         r157, r149
  Move         r158, r150
  Move         r159, r151
  Move         r160, r152
  Move         r161, r153
  Move         r162, r154
  MakeMap      r163, 4, r155
  SetIndex     r138, r144, r163
  Append       r139, r139, r163
L24:
  Index        r165, r138, r144
  Index        r166, r165, r106
  Append       r167, r166, r142
  SetIndex     r165, r106, r167
  Index        r168, r165, r110
  AddInt       r169, r168, r34
  SetIndex     r165, r110, r169
  AddInt       r137, r137, r34
  Jump         L25
L23:
  Move         r170, r9
  Len          r171, r139
L27:
  LessInt      r172, r170, r171
  JumpIfFalse  r172, L26
  Index        r117, r139, r170
  Index        r174, r117, r75
  Append       r134, r134, r174
  AddInt       r170, r170, r34
  Jump         L27
L26:
  Count        r176, r134
  // B1_LP: avg(from x in bucket1 select x.ss_list_price),
  Move         r177, r60
  Move         r178, r70
  // B1_CNT: count(bucket1),
  Move         r179, r71
  Move         r180, r72
  // B1_CNTD: count(from x in bucket1 group by x.ss_list_price into g select g.key),
  Move         r181, r73
  Move         r182, r120
  // B2_LP: avg(from x in bucket2 select x.ss_list_price),
  Move         r183, r121
  Move         r184, r130
  // B2_CNT: count(bucket2),
  Move         r185, r131
  Move         r186, r132
  // B2_CNTD: count(from x in bucket2 group by x.ss_list_price into g select g.key)
  Move         r187, r133
  Move         r188, r176
  // let result = {
  MakeMap      r189, 6, r177
  // json(result)
  JSON         r189
  // expect result == {
  Const        r190, {"B1_CNT": 1, "B1_CNTD": 1, "B1_LP": 100, "B2_CNT": 1, "B2_CNTD": 1, "B2_LP": 80}
  Equal        r191, r189, r190
  Expect       r191
  Return       r0
