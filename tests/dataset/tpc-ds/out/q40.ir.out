func main (regs=249)
  // let catalog_sales = [
  Const        r0, [{"date_sk": 1, "item_sk": 1, "order": 1, "price": 100, "warehouse_sk": 1}, {"date_sk": 2, "item_sk": 1, "order": 2, "price": 150, "warehouse_sk": 1}]
  // let catalog_returns = [
  Const        r1, [{"item_sk": 1, "order": 2, "refunded": 150}]
  // let item = [
  Const        r2, [{"current_price": 1.2, "item_id": "I1", "item_sk": 1}]
  // let warehouse = [
  Const        r3, [{"state": "CA", "warehouse_sk": 1}]
  // let date_dim = [
  Const        r4, [{"date": "2020-01-10", "date_sk": 1}, {"date": "2020-01-20", "date_sk": 2}]
  // let sales_date = "2020-01-15"
  Const        r5, "2020-01-15"
  // from cs in catalog_sales
  Const        r6, []
  // where i.current_price >= 0.99 && i.current_price <= 1.49
  Const        r7, "current_price"
  // w_state: w.state,
  Const        r8, "w_state"
  Const        r9, "state"
  // i_item_id: i.item_id,
  Const        r10, "i_item_id"
  Const        r11, "item_id"
  // sold_date: d.date,
  Const        r12, "sold_date"
  Const        r13, "date"
  // net: cs.price - (if cr == null { 0.0 } else { cr.refunded })
  Const        r14, "net"
  Const        r15, "price"
  Const        r16, "refunded"
  // from cs in catalog_sales
  IterPrep     r17, r0
  Len          r18, r17
  Const        r20, 0
  Move         r19, r20
L20:
  LessInt      r21, r19, r18
  JumpIfFalse  r21, L0
  Index        r22, r17, r19
  Move         r23, r22
  // left join cr in catalog_returns on cs.order == cr.order && cs.item_sk == cr.item_sk
  IterPrep     r24, r1
  Len          r25, r24
  Const        r26, "order"
  Const        r27, "item_sk"
  Move         r28, r20
L11:
  LessInt      r29, r28, r25
  JumpIfFalse  r29, L1
  Index        r30, r24, r28
  Move         r31, r30
  Const        r32, false
  Index        r33, r23, r26
  Index        r34, r31, r26
  Equal        r35, r33, r34
  Index        r36, r23, r27
  Index        r37, r31, r27
  Equal        r38, r36, r37
  Move         r39, r35
  JumpIfFalse  r39, L2
  Move         r39, r38
L2:
  JumpIfFalse  r39, L3
  Const        r32, true
  // join w in warehouse on cs.warehouse_sk == w.warehouse_sk
  IterPrep     r40, r3
  Len          r41, r40
  Const        r42, "warehouse_sk"
  Move         r43, r20
L10:
  LessInt      r44, r43, r41
  JumpIfFalse  r44, L3
  Index        r45, r40, r43
  Move         r46, r45
  Index        r47, r23, r42
  Index        r48, r46, r42
  Equal        r49, r47, r48
  JumpIfFalse  r49, L4
  // join i in item on cs.item_sk == i.item_sk
  IterPrep     r50, r2
  Len          r51, r50
  Move         r52, r20
L9:
  LessInt      r53, r52, r51
  JumpIfFalse  r53, L4
  Index        r54, r50, r52
  Move         r55, r54
  Index        r56, r23, r27
  Index        r57, r55, r27
  Equal        r58, r56, r57
  JumpIfFalse  r58, L5
  // join d in date_dim on cs.date_sk == d.date_sk
  IterPrep     r59, r4
  Len          r60, r59
  Const        r61, "date_sk"
  Move         r62, r20
L8:
  LessInt      r63, r62, r60
  JumpIfFalse  r63, L5
  Index        r64, r59, r62
  Move         r65, r64
  Index        r66, r23, r61
  Index        r67, r65, r61
  Equal        r68, r66, r67
  JumpIfFalse  r68, L6
  // where i.current_price >= 0.99 && i.current_price <= 1.49
  Index        r69, r55, r7
  Const        r70, 0.99
  LessEqFloat  r71, r70, r69
  Index        r72, r55, r7
  Const        r73, 1.49
  LessEqFloat  r74, r72, r73
  Move         r75, r71
  JumpIfFalse  r75, L7
  Move         r75, r74
L7:
  JumpIfFalse  r75, L6
  // w_state: w.state,
  Const        r76, "w_state"
  Index        r77, r46, r9
  // i_item_id: i.item_id,
  Const        r78, "i_item_id"
  Index        r79, r55, r11
  // sold_date: d.date,
  Const        r80, "sold_date"
  Index        r81, r65, r13
  // net: cs.price - (if cr == null { 0.0 } else { cr.refunded })
  Const        r82, "net"
  Index        r83, r23, r15
  Const        r84, nil
  Equal        r85, r31, r84
  Const        r86, 0
  Index        r87, r31, r16
  Select       88,85,86,87
  Sub          r89, r83, r88
  // w_state: w.state,
  Move         r90, r76
  Move         r91, r77
  // i_item_id: i.item_id,
  Move         r92, r78
  Move         r93, r79
  // sold_date: d.date,
  Move         r94, r80
  Move         r95, r81
  // net: cs.price - (if cr == null { 0.0 } else { cr.refunded })
  Move         r96, r82
  Move         r97, r89
  // select {
  MakeMap      r98, 4, r90
  // from cs in catalog_sales
  Append       r99, r6, r98
  Move         r6, r99
L6:
  // join d in date_dim on cs.date_sk == d.date_sk
  Const        r100, 1
  Add          r62, r62, r100
  Jump         L8
L5:
  // join i in item on cs.item_sk == i.item_sk
  Add          r52, r52, r100
  Jump         L9
L4:
  // join w in warehouse on cs.warehouse_sk == w.warehouse_sk
  Add          r43, r43, r100
  Jump         L10
L3:
  // left join cr in catalog_returns on cs.order == cr.order && cs.item_sk == cr.item_sk
  Add          r28, r28, r100
  Jump         L11
L1:
  Move         r101, r32
  JumpIfTrue   r101, L12
  Move         r31, r84
  // join w in warehouse on cs.warehouse_sk == w.warehouse_sk
  IterPrep     r102, r3
  Len          r103, r102
  Move         r104, r20
L19:
  LessInt      r105, r104, r103
  JumpIfFalse  r105, L12
  Index        r106, r102, r104
  Move         r46, r106
  Index        r107, r23, r42
  Index        r108, r46, r42
  Equal        r109, r107, r108
  JumpIfFalse  r109, L13
  // join i in item on cs.item_sk == i.item_sk
  IterPrep     r110, r2
  Len          r111, r110
  Move         r112, r20
L18:
  LessInt      r113, r112, r111
  JumpIfFalse  r113, L13
  Index        r114, r110, r112
  Move         r55, r114
  Index        r115, r23, r27
  Index        r116, r55, r27
  Equal        r117, r115, r116
  JumpIfFalse  r117, L14
  // join d in date_dim on cs.date_sk == d.date_sk
  IterPrep     r118, r4
  Len          r119, r118
  Move         r120, r20
L17:
  LessInt      r121, r120, r119
  JumpIfFalse  r121, L14
  Index        r122, r118, r120
  Move         r65, r122
  Index        r123, r23, r61
  Index        r124, r65, r61
  Equal        r125, r123, r124
  JumpIfFalse  r125, L15
  // where i.current_price >= 0.99 && i.current_price <= 1.49
  Index        r126, r55, r7
  LessEqFloat  r127, r70, r126
  Index        r128, r55, r7
  LessEqFloat  r129, r128, r73
  Move         r130, r127
  JumpIfFalse  r130, L16
  Move         r130, r129
L16:
  JumpIfFalse  r130, L15
  // w_state: w.state,
  Const        r131, "w_state"
  Index        r132, r46, r9
  // i_item_id: i.item_id,
  Const        r133, "i_item_id"
  Index        r134, r55, r11
  // sold_date: d.date,
  Const        r135, "sold_date"
  Index        r136, r65, r13
  // net: cs.price - (if cr == null { 0.0 } else { cr.refunded })
  Const        r137, "net"
  Index        r138, r23, r15
  Equal        r139, r31, r84
  Index        r140, r31, r16
  Select       141,139,86,140
  Sub          r142, r138, r141
  // w_state: w.state,
  Move         r143, r131
  Move         r144, r132
  // i_item_id: i.item_id,
  Move         r145, r133
  Move         r146, r134
  // sold_date: d.date,
  Move         r147, r135
  Move         r148, r136
  // net: cs.price - (if cr == null { 0.0 } else { cr.refunded })
  Move         r149, r137
  Move         r150, r142
  // select {
  MakeMap      r151, 4, r143
  // from cs in catalog_sales
  Append       r152, r6, r151
  Move         r6, r152
L15:
  // join d in date_dim on cs.date_sk == d.date_sk
  Add          r120, r120, r100
  Jump         L17
L14:
  // join i in item on cs.item_sk == i.item_sk
  Add          r112, r112, r100
  Jump         L18
L13:
  // join w in warehouse on cs.warehouse_sk == w.warehouse_sk
  Add          r104, r104, r100
  Jump         L19
L12:
  // from cs in catalog_sales
  AddInt       r19, r19, r100
  Jump         L20
L0:
  // from r in records
  Const        r153, []
  // w_state: g.key.w_state,
  Const        r154, "key"
  // sales_before: sum(from x in g select if x.sold_date < sales_date { x.net } else { 0.0 }),
  Const        r155, "sales_before"
  // sales_after: sum(from x in g select if x.sold_date >= sales_date { x.net } else { 0.0 })
  Const        r156, "sales_after"
  // from r in records
  IterPrep     r157, r6
  Len          r158, r157
  Const        r159, 0
  MakeMap      r160, 0, r0
  Const        r162, []
  Move         r161, r162
L23:
  LessInt      r163, r159, r158
  JumpIfFalse  r163, L21
  Index        r164, r157, r159
  Move         r165, r164
  // group by { w_state: r.w_state, i_item_id: r.i_item_id } into g
  Const        r166, "w_state"
  Index        r167, r165, r8
  Const        r168, "i_item_id"
  Index        r169, r165, r10
  Move         r170, r166
  Move         r171, r167
  Move         r172, r168
  Move         r173, r169
  MakeMap      r174, 2, r170
  Str          r175, r174
  In           r176, r175, r160
  JumpIfTrue   r176, L22
  // from r in records
  Const        r177, []
  Const        r178, "__group__"
  Const        r179, true
  // group by { w_state: r.w_state, i_item_id: r.i_item_id } into g
  Move         r180, r174
  // from r in records
  Const        r181, "items"
  Move         r182, r177
  Const        r183, "count"
  Move         r184, r178
  Move         r185, r179
  Move         r186, r154
  Move         r187, r180
  Move         r188, r181
  Move         r189, r182
  Move         r190, r183
  Move         r191, r20
  MakeMap      r192, 4, r184
  SetIndex     r160, r175, r192
  Append       r193, r161, r192
  Move         r161, r193
L22:
  Index        r194, r160, r175
  Index        r195, r194, r181
  Append       r196, r195, r164
  SetIndex     r194, r181, r196
  Index        r197, r194, r183
  AddInt       r198, r197, r100
  SetIndex     r194, r183, r198
  AddInt       r159, r159, r100
  Jump         L23
L21:
  Move         r199, r20
  Len          r200, r161
L29:
  LessInt      r201, r199, r200
  JumpIfFalse  r201, L24
  Index        r202, r161, r199
  Move         r203, r202
  // w_state: g.key.w_state,
  Const        r204, "w_state"
  Index        r205, r203, r154
  Index        r206, r205, r8
  // i_item_id: g.key.i_item_id,
  Const        r207, "i_item_id"
  Index        r208, r203, r154
  Index        r209, r208, r10
  // sales_before: sum(from x in g select if x.sold_date < sales_date { x.net } else { 0.0 }),
  Const        r210, "sales_before"
  Const        r211, []
  IterPrep     r212, r203
  Len          r213, r212
  Move         r214, r20
L26:
  LessInt      r215, r214, r213
  JumpIfFalse  r215, L25
  Index        r216, r212, r214
  Move         r217, r216
  Index        r218, r217, r12
  Less         r219, r218, r5
  Index        r220, r217, r14
  Select       221,219,220,86
  Append       r222, r211, r221
  Move         r211, r222
  AddInt       r214, r214, r100
  Jump         L26
L25:
  Sum          r223, r211
  // sales_after: sum(from x in g select if x.sold_date >= sales_date { x.net } else { 0.0 })
  Const        r224, "sales_after"
  Const        r225, []
  IterPrep     r226, r203
  Len          r227, r226
  Move         r228, r20
L28:
  LessInt      r229, r228, r227
  JumpIfFalse  r229, L27
  Index        r230, r226, r228
  Move         r217, r230
  Index        r231, r217, r12
  LessEq       r232, r5, r231
  Index        r233, r217, r14
  Select       234,232,233,86
  Append       r235, r225, r234
  Move         r225, r235
  AddInt       r228, r228, r100
  Jump         L28
L27:
  Sum          r236, r225
  // w_state: g.key.w_state,
  Move         r237, r204
  Move         r238, r206
  // i_item_id: g.key.i_item_id,
  Move         r239, r207
  Move         r240, r209
  // sales_before: sum(from x in g select if x.sold_date < sales_date { x.net } else { 0.0 }),
  Move         r241, r210
  Move         r242, r223
  // sales_after: sum(from x in g select if x.sold_date >= sales_date { x.net } else { 0.0 })
  Move         r243, r224
  Move         r244, r236
  // select {
  MakeMap      r245, 4, r237
  // from r in records
  Append       r246, r153, r245
  Move         r153, r246
  AddInt       r199, r199, r100
  Jump         L29
L24:
  // json(result)
  JSON         r153
  // expect result == [
  Const        r247, [{"i_item_id": "I1", "sales_after": 0, "sales_before": 100, "w_state": "CA"}]
  Equal        r248, r153, r247
  Expect       r248
  Return       r0
