func main (regs=431)
  // let catalog_sales = [
  Const        r0, [{"date_sk": 1, "item_sk": 1, "order": 1, "price": 100, "warehouse_sk": 1}, {"date_sk": 2, "item_sk": 1, "order": 2, "price": 150, "warehouse_sk": 1}]
  // let catalog_returns = [
  Const        r1, [{"item_sk": 1, "order": 2, "refunded": 150}]
  // let item = [
  Const        r2, [{"current_price": 1.2, "item_id": "I1", "item_sk": 1}]
  // let warehouse = [
  Const        r3, [{"state": "CA", "warehouse_sk": 1}]
  // let date_dim = [
  Const        r4, [{"date": "2020-01-10", "date_sk": 1}, {"date": "2020-01-20", "date_sk": 2}]
  // let sales_date = "2020-01-15"
  Const        r5, "2020-01-15"
  // let dummy = null
  Const        r6, nil
  // from cs in catalog_sales
  Const        r7, []
  // where i.current_price >= 0.99 && i.current_price <= 1.49
  Const        r8, "current_price"
  Const        r9, "current_price"
  // w_state: w.state,
  Const        r10, "w_state"
  Const        r11, "state"
  // i_item_id: i.item_id,
  Const        r12, "i_item_id"
  Const        r13, "item_id"
  // sold_date: d.date,
  Const        r14, "sold_date"
  Const        r15, "date"
  // net: cs.price - (if cr == null { 0.0 } else { cr.refunded })
  Const        r16, "net"
  Const        r17, "price"
  Const        r18, "refunded"
  // from cs in catalog_sales
  IterPrep     r19, r0
  Len          r20, r19
  Const        r21, 0
L24:
  LessInt      r23, r21, r20
  JumpIfFalse  r23, L0
  Index        r25, r19, r21
  // left join cr in catalog_returns on cs.order == cr.order && cs.item_sk == cr.item_sk
  IterPrep     r26, r1
  Len          r27, r26
  Const        r28, "order"
  Const        r29, "order"
  Const        r30, "item_sk"
  Const        r31, "item_sk"
  // where i.current_price >= 0.99 && i.current_price <= 1.49
  Const        r32, "current_price"
  Const        r33, "current_price"
  // w_state: w.state,
  Const        r34, "w_state"
  Const        r35, "state"
  // i_item_id: i.item_id,
  Const        r36, "i_item_id"
  Const        r37, "item_id"
  // sold_date: d.date,
  Const        r38, "sold_date"
  Const        r39, "date"
  // net: cs.price - (if cr == null { 0.0 } else { cr.refunded })
  Const        r40, "net"
  Const        r41, "price"
  Const        r42, "refunded"
  // left join cr in catalog_returns on cs.order == cr.order && cs.item_sk == cr.item_sk
  Const        r43, 0
L13:
  LessInt      r45, r43, r27
  JumpIfFalse  r45, L1
  Index        r47, r26, r43
  Const        r48, false
  Const        r49, "order"
  Index        r50, r25, r49
  Const        r51, "order"
  Index        r52, r47, r51
  Equal        r53, r50, r52
  Const        r54, "item_sk"
  Index        r55, r25, r54
  Const        r56, "item_sk"
  Index        r57, r47, r56
  Equal        r58, r55, r57
  Move         r59, r53
  JumpIfFalse  r59, L2
  Move         r59, r58
L2:
  JumpIfFalse  r59, L3
  Const        r48, true
  // join w in warehouse on cs.warehouse_sk == w.warehouse_sk
  IterPrep     r60, r3
  Len          r61, r60
  Const        r62, "warehouse_sk"
  Const        r63, "warehouse_sk"
  // where i.current_price >= 0.99 && i.current_price <= 1.49
  Const        r64, "current_price"
  Const        r65, "current_price"
  // w_state: w.state,
  Const        r66, "w_state"
  Const        r67, "state"
  // i_item_id: i.item_id,
  Const        r68, "i_item_id"
  Const        r69, "item_id"
  // sold_date: d.date,
  Const        r70, "sold_date"
  Const        r71, "date"
  // net: cs.price - (if cr == null { 0.0 } else { cr.refunded })
  Const        r72, "net"
  Const        r73, "price"
  Const        r74, "refunded"
  // join w in warehouse on cs.warehouse_sk == w.warehouse_sk
  Const        r75, 0
L12:
  LessInt      r77, r75, r61
  JumpIfFalse  r77, L3
  Index        r79, r60, r75
  Const        r80, "warehouse_sk"
  Index        r81, r25, r80
  Const        r82, "warehouse_sk"
  Index        r83, r79, r82
  Equal        r84, r81, r83
  JumpIfFalse  r84, L4
  // join i in item on cs.item_sk == i.item_sk
  IterPrep     r85, r2
  Len          r86, r85
  Const        r87, "item_sk"
  Const        r88, "item_sk"
  // where i.current_price >= 0.99 && i.current_price <= 1.49
  Const        r89, "current_price"
  Const        r90, "current_price"
  // w_state: w.state,
  Const        r91, "w_state"
  Const        r92, "state"
  // i_item_id: i.item_id,
  Const        r93, "i_item_id"
  Const        r94, "item_id"
  // sold_date: d.date,
  Const        r95, "sold_date"
  Const        r96, "date"
  // net: cs.price - (if cr == null { 0.0 } else { cr.refunded })
  Const        r97, "net"
  Const        r98, "price"
  Const        r99, "refunded"
  // join i in item on cs.item_sk == i.item_sk
  Const        r100, 0
L11:
  LessInt      r102, r100, r86
  JumpIfFalse  r102, L4
  Index        r104, r85, r100
  Const        r105, "item_sk"
  Index        r106, r25, r105
  Const        r107, "item_sk"
  Index        r108, r104, r107
  Equal        r109, r106, r108
  JumpIfFalse  r109, L5
  // join d in date_dim on cs.date_sk == d.date_sk
  IterPrep     r110, r4
  Len          r111, r110
  Const        r112, "date_sk"
  Const        r113, "date_sk"
  // where i.current_price >= 0.99 && i.current_price <= 1.49
  Const        r114, "current_price"
  Const        r115, "current_price"
  // w_state: w.state,
  Const        r116, "w_state"
  Const        r117, "state"
  // i_item_id: i.item_id,
  Const        r118, "i_item_id"
  Const        r119, "item_id"
  // sold_date: d.date,
  Const        r120, "sold_date"
  Const        r121, "date"
  // net: cs.price - (if cr == null { 0.0 } else { cr.refunded })
  Const        r122, "net"
  Const        r123, "price"
  Const        r124, "refunded"
  // join d in date_dim on cs.date_sk == d.date_sk
  Const        r125, 0
L10:
  LessInt      r127, r125, r111
  JumpIfFalse  r127, L5
  Index        r129, r110, r125
  Const        r130, "date_sk"
  Index        r131, r25, r130
  Const        r132, "date_sk"
  Index        r133, r129, r132
  Equal        r134, r131, r133
  JumpIfFalse  r134, L6
  // where i.current_price >= 0.99 && i.current_price <= 1.49
  Const        r135, "current_price"
  Index        r136, r104, r135
  Const        r137, 0.99
  LessEqFloat  r138, r137, r136
  Const        r139, "current_price"
  Index        r140, r104, r139
  Const        r141, 1.49
  LessEqFloat  r142, r140, r141
  Move         r143, r138
  JumpIfFalse  r143, L7
  Move         r143, r142
L7:
  JumpIfFalse  r143, L6
  // w_state: w.state,
  Const        r144, "w_state"
  Const        r145, "state"
  Index        r146, r79, r145
  // i_item_id: i.item_id,
  Const        r147, "i_item_id"
  Const        r148, "item_id"
  Index        r149, r104, r148
  // sold_date: d.date,
  Const        r150, "sold_date"
  Const        r151, "date"
  Index        r152, r129, r151
  // net: cs.price - (if cr == null { 0.0 } else { cr.refunded })
  Const        r153, "net"
  Const        r154, "price"
  Index        r155, r25, r154
  Const        r156, nil
  Equal        r157, r47, r156
  JumpIfFalse  r157, L8
  Const        r159, 0
  Jump         L9
L8:
  Const        r160, "refunded"
  Index        r159, r47, r160
L9:
  Sub          r162, r155, r159
  // w_state: w.state,
  Move         r163, r144
  Move         r164, r146
  // i_item_id: i.item_id,
  Move         r165, r147
  Move         r166, r149
  // sold_date: d.date,
  Move         r167, r150
  Move         r168, r152
  // net: cs.price - (if cr == null { 0.0 } else { cr.refunded })
  Move         r169, r153
  Move         r170, r162
  // select {
  MakeMap      r171, 4, r163
  // from cs in catalog_sales
  Append       r7, r7, r171
L6:
  // join d in date_dim on cs.date_sk == d.date_sk
  Const        r173, 1
  Add          r125, r125, r173
  Jump         L10
L5:
  // join i in item on cs.item_sk == i.item_sk
  Const        r174, 1
  Add          r100, r100, r174
  Jump         L11
L4:
  // join w in warehouse on cs.warehouse_sk == w.warehouse_sk
  Const        r175, 1
  Add          r75, r75, r175
  Jump         L12
L3:
  // left join cr in catalog_returns on cs.order == cr.order && cs.item_sk == cr.item_sk
  Const        r176, 1
  Add          r43, r43, r176
  Jump         L13
L1:
  Move         r177, r48
  JumpIfTrue   r177, L14
  Const        r47, nil
  // join w in warehouse on cs.warehouse_sk == w.warehouse_sk
  IterPrep     r179, r3
  Len          r180, r179
  Const        r181, "warehouse_sk"
  Const        r182, "warehouse_sk"
  // where i.current_price >= 0.99 && i.current_price <= 1.49
  Const        r183, "current_price"
  Const        r184, "current_price"
  // w_state: w.state,
  Const        r185, "w_state"
  Const        r186, "state"
  // i_item_id: i.item_id,
  Const        r187, "i_item_id"
  Const        r188, "item_id"
  // sold_date: d.date,
  Const        r189, "sold_date"
  Const        r190, "date"
  // net: cs.price - (if cr == null { 0.0 } else { cr.refunded })
  Const        r191, "net"
  Const        r192, "price"
  Const        r193, "refunded"
  // join w in warehouse on cs.warehouse_sk == w.warehouse_sk
  Const        r194, 0
L23:
  LessInt      r196, r194, r180
  JumpIfFalse  r196, L14
  Index        r79, r179, r194
  Const        r198, "warehouse_sk"
  Index        r199, r25, r198
  Const        r200, "warehouse_sk"
  Index        r201, r79, r200
  Equal        r202, r199, r201
  JumpIfFalse  r202, L15
  // join i in item on cs.item_sk == i.item_sk
  IterPrep     r203, r2
  Len          r204, r203
  Const        r205, "item_sk"
  Const        r206, "item_sk"
  // where i.current_price >= 0.99 && i.current_price <= 1.49
  Const        r207, "current_price"
  Const        r208, "current_price"
  // w_state: w.state,
  Const        r209, "w_state"
  Const        r210, "state"
  // i_item_id: i.item_id,
  Const        r211, "i_item_id"
  Const        r212, "item_id"
  // sold_date: d.date,
  Const        r213, "sold_date"
  Const        r214, "date"
  // net: cs.price - (if cr == null { 0.0 } else { cr.refunded })
  Const        r215, "net"
  Const        r216, "price"
  Const        r217, "refunded"
  // join i in item on cs.item_sk == i.item_sk
  Const        r218, 0
L22:
  LessInt      r220, r218, r204
  JumpIfFalse  r220, L15
  Index        r104, r203, r218
  Const        r222, "item_sk"
  Index        r223, r25, r222
  Const        r224, "item_sk"
  Index        r225, r104, r224
  Equal        r226, r223, r225
  JumpIfFalse  r226, L16
  // join d in date_dim on cs.date_sk == d.date_sk
  IterPrep     r227, r4
  Len          r228, r227
  Const        r229, "date_sk"
  Const        r230, "date_sk"
  // where i.current_price >= 0.99 && i.current_price <= 1.49
  Const        r231, "current_price"
  Const        r232, "current_price"
  // w_state: w.state,
  Const        r233, "w_state"
  Const        r234, "state"
  // i_item_id: i.item_id,
  Const        r235, "i_item_id"
  Const        r236, "item_id"
  // sold_date: d.date,
  Const        r237, "sold_date"
  Const        r238, "date"
  // net: cs.price - (if cr == null { 0.0 } else { cr.refunded })
  Const        r239, "net"
  Const        r240, "price"
  Const        r241, "refunded"
  // join d in date_dim on cs.date_sk == d.date_sk
  Const        r242, 0
L21:
  LessInt      r244, r242, r228
  JumpIfFalse  r244, L16
  Index        r129, r227, r242
  Const        r246, "date_sk"
  Index        r247, r25, r246
  Const        r248, "date_sk"
  Index        r249, r129, r248
  Equal        r250, r247, r249
  JumpIfFalse  r250, L17
  // where i.current_price >= 0.99 && i.current_price <= 1.49
  Const        r251, "current_price"
  Index        r252, r104, r251
  Const        r253, 0.99
  LessEqFloat  r254, r253, r252
  Const        r255, "current_price"
  Index        r256, r104, r255
  Const        r257, 1.49
  LessEqFloat  r258, r256, r257
  Move         r259, r254
  JumpIfFalse  r259, L18
  Move         r259, r258
L18:
  JumpIfFalse  r259, L17
  // w_state: w.state,
  Const        r260, "w_state"
  Const        r261, "state"
  Index        r262, r79, r261
  // i_item_id: i.item_id,
  Const        r263, "i_item_id"
  Const        r264, "item_id"
  Index        r265, r104, r264
  // sold_date: d.date,
  Const        r266, "sold_date"
  Const        r267, "date"
  Index        r268, r129, r267
  // net: cs.price - (if cr == null { 0.0 } else { cr.refunded })
  Const        r269, "net"
  Const        r270, "price"
  Index        r271, r25, r270
  Const        r272, nil
  Equal        r273, r47, r272
  JumpIfFalse  r273, L19
  Const        r275, 0
  Jump         L20
L19:
  Const        r276, "refunded"
  Index        r275, r47, r276
L20:
  Sub          r278, r271, r275
  // w_state: w.state,
  Move         r279, r260
  Move         r280, r262
  // i_item_id: i.item_id,
  Move         r281, r263
  Move         r282, r265
  // sold_date: d.date,
  Move         r283, r266
  Move         r284, r268
  // net: cs.price - (if cr == null { 0.0 } else { cr.refunded })
  Move         r285, r269
  Move         r286, r278
  // select {
  MakeMap      r287, 4, r279
  // from cs in catalog_sales
  Append       r7, r7, r287
L17:
  // join d in date_dim on cs.date_sk == d.date_sk
  Const        r289, 1
  Add          r242, r242, r289
  Jump         L21
L16:
  // join i in item on cs.item_sk == i.item_sk
  Const        r290, 1
  Add          r218, r218, r290
  Jump         L22
L15:
  // join w in warehouse on cs.warehouse_sk == w.warehouse_sk
  Const        r291, 1
  Add          r194, r194, r291
  Jump         L23
L14:
  // from cs in catalog_sales
  Const        r292, 1
  AddInt       r21, r21, r292
  Jump         L24
L0:
  // from r in records
  Const        r293, []
  // group by { w_state: r.w_state, i_item_id: r.i_item_id } into g
  Const        r294, "w_state"
  Const        r295, "w_state"
  Const        r296, "i_item_id"
  Const        r297, "i_item_id"
  // w_state: g.key.w_state,
  Const        r298, "w_state"
  Const        r299, "key"
  Const        r300, "w_state"
  // i_item_id: g.key.i_item_id,
  Const        r301, "i_item_id"
  Const        r302, "key"
  Const        r303, "i_item_id"
  // sales_before: sum(from x in g select if x.sold_date < sales_date { x.net } else { 0.0 }),
  Const        r304, "sales_before"
  Const        r305, "sold_date"
  Const        r306, "net"
  // sales_after: sum(from x in g select if x.sold_date >= sales_date { x.net } else { 0.0 })
  Const        r307, "sales_after"
  Const        r308, "sold_date"
  Const        r309, "net"
  // from r in records
  IterPrep     r310, r7
  Len          r311, r310
  Const        r312, 0
  MakeMap      r313, 0, r0
  Const        r314, []
L27:
  LessInt      r316, r312, r311
  JumpIfFalse  r316, L25
  Index        r317, r310, r312
  Move         r318, r317
  // group by { w_state: r.w_state, i_item_id: r.i_item_id } into g
  Const        r319, "w_state"
  Const        r320, "w_state"
  Index        r321, r318, r320
  Const        r322, "i_item_id"
  Const        r323, "i_item_id"
  Index        r324, r318, r323
  Move         r325, r319
  Move         r326, r321
  Move         r327, r322
  Move         r328, r324
  MakeMap      r329, 2, r325
  Str          r330, r329
  In           r331, r330, r313
  JumpIfTrue   r331, L26
  // from r in records
  Const        r332, []
  Const        r333, "__group__"
  Const        r334, true
  Const        r335, "key"
  // group by { w_state: r.w_state, i_item_id: r.i_item_id } into g
  Move         r336, r329
  // from r in records
  Const        r337, "items"
  Move         r338, r332
  Const        r339, "count"
  Const        r340, 0
  Move         r341, r333
  Move         r342, r334
  Move         r343, r335
  Move         r344, r336
  Move         r345, r337
  Move         r346, r338
  Move         r347, r339
  Move         r348, r340
  MakeMap      r349, 4, r341
  SetIndex     r313, r330, r349
  Append       r314, r314, r349
L26:
  Const        r351, "items"
  Index        r352, r313, r330
  Index        r353, r352, r351
  Append       r354, r353, r317
  SetIndex     r352, r351, r354
  Const        r355, "count"
  Index        r356, r352, r355
  Const        r357, 1
  AddInt       r358, r356, r357
  SetIndex     r352, r355, r358
  Const        r359, 1
  AddInt       r312, r312, r359
  Jump         L27
L25:
  Const        r360, 0
  Len          r362, r314
L37:
  LessInt      r363, r360, r362
  JumpIfFalse  r363, L28
  Index        r365, r314, r360
  // w_state: g.key.w_state,
  Const        r366, "w_state"
  Const        r367, "key"
  Index        r368, r365, r367
  Const        r369, "w_state"
  Index        r370, r368, r369
  // i_item_id: g.key.i_item_id,
  Const        r371, "i_item_id"
  Const        r372, "key"
  Index        r373, r365, r372
  Const        r374, "i_item_id"
  Index        r375, r373, r374
  // sales_before: sum(from x in g select if x.sold_date < sales_date { x.net } else { 0.0 }),
  Const        r376, "sales_before"
  Const        r377, []
  Const        r378, "sold_date"
  Const        r379, "net"
  IterPrep     r380, r365
  Len          r381, r380
  Const        r382, 0
L32:
  LessInt      r384, r382, r381
  JumpIfFalse  r384, L29
  Index        r386, r380, r382
  Const        r387, "sold_date"
  Index        r388, r386, r387
  Less         r389, r388, r5
  JumpIfFalse  r389, L30
  Const        r390, "net"
  Index        r392, r386, r390
  Jump         L31
L30:
  Const        r392, 0
L31:
  Append       r377, r377, r392
  Const        r395, 1
  AddInt       r382, r382, r395
  Jump         L32
L29:
  Sum          r396, r377
  // sales_after: sum(from x in g select if x.sold_date >= sales_date { x.net } else { 0.0 })
  Const        r397, "sales_after"
  Const        r398, []
  Const        r399, "sold_date"
  Const        r400, "net"
  IterPrep     r401, r365
  Len          r402, r401
  Const        r403, 0
L36:
  LessInt      r405, r403, r402
  JumpIfFalse  r405, L33
  Index        r386, r401, r403
  Const        r407, "sold_date"
  Index        r408, r386, r407
  LessEq       r409, r5, r408
  JumpIfFalse  r409, L34
  Const        r410, "net"
  Index        r412, r386, r410
  Jump         L35
L34:
  Const        r412, 0
L35:
  Append       r398, r398, r412
  Const        r415, 1
  AddInt       r403, r403, r415
  Jump         L36
L33:
  Sum          r416, r398
  // w_state: g.key.w_state,
  Move         r417, r366
  Move         r418, r370
  // i_item_id: g.key.i_item_id,
  Move         r419, r371
  Move         r420, r375
  // sales_before: sum(from x in g select if x.sold_date < sales_date { x.net } else { 0.0 }),
  Move         r421, r376
  Move         r422, r396
  // sales_after: sum(from x in g select if x.sold_date >= sales_date { x.net } else { 0.0 })
  Move         r423, r397
  Move         r424, r416
  // select {
  MakeMap      r425, 4, r417
  // from r in records
  Append       r293, r293, r425
  Const        r427, 1
  AddInt       r360, r360, r427
  Jump         L37
L28:
  // let result = concat(dummy, base)
  UnionAll     r428, r6, r293
  // json(result)
  JSON         r428
  // expect result == [
  Const        r429, [{"i_item_id": "I1", "sales_after": 0, "sales_before": 100, "w_state": "CA"}]
  Equal        r430, r428, r429
  Expect       r430
  Return       r0
