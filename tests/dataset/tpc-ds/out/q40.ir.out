func main (regs=52)
  // let catalog_sales = [
  Const        r0, [{"date_sk": 1, "item_sk": 1, "order": 1, "price": 100, "warehouse_sk": 1}, {"date_sk": 2, "item_sk": 1, "order": 2, "price": 150, "warehouse_sk": 1}]
L5:
  // let catalog_returns = [
  Const        r1, [{"item_sk": 1, "order": 1, "refunded": 0}, {"item_sk": 1, "order": 2, "refunded": 150}]
  // let item = [
  Const        r2, [{"current_price": 1.2, "item_id": "I1", "item_sk": 1}]
L18:
  // let warehouse = [
  Const        r3, [{"state": "CA", "warehouse_sk": 1}]
L6:
  // let date_dim = [
  Const        r4, [{"date": "2020-01-10", "date_sk": 1}, {"date": "2020-01-20", "date_sk": 2}]
  // let sales_date = "2020-01-15"
  Const        r5, "2020-01-15"
  // from cs in catalog_sales
  Const        r6, []
L0:
  // where i.current_price >= 0.99 && i.current_price <= 1.49
  Const        r7, "current_price"
L11:
  Const        r8, "current_price"
L10:
  // w_state: w.state,
  Const        r9, "w_state"
L8:
  Const        r10, "state"
  // i_item_id: i.item_id,
  Const        r11, "i_item_id"
L9:
  Const        r12, "item_id"
  // sold_date: d.date,
  Const        r13, "sold_date"
L14:
  Const        r14, "date"
  // net: cs.price - cr.refunded
  Const        r15, "net"
L17:
  Const        r16, "price"
L7:
  Const        r17, "refunded"
L4:
  // from cs in catalog_sales
  IterPrep     r18, r0
  Len          r19, r18
  Const        r20, 0
  LessInt      r21, r20, r19
L3:
  JumpIfFalse  r21, L0
  Index        r22, r18, r20
  // join cr in catalog_returns on cs.order == cr.order && cs.item_sk == cr.item_sk
  IterPrep     r23, r1
  Len          r7, r23
L2:
  Const        r8, "order"
  Const        r9, "order"
  Const        r10, "item_sk"
L1:
  Const        r11, "item_sk"
  // where i.current_price >= 0.99 && i.current_price <= 1.49
  Const        r12, "current_price"
  Const        r13, "current_price"
  // w_state: w.state,
  Const        r14, "w_state"
  Const        r15, "state"
L13:
  // i_item_id: i.item_id,
  Const        r16, "i_item_id"
  Const        r17, "item_id"
  // sold_date: d.date,
  Const        r19, "sold_date"
L12:
  Const        r21, "date"
  // net: cs.price - cr.refunded
  Const        r18, "net"
L22:
  Const        r1, "price"
  Const        r8, "refunded"
  // join cr in catalog_returns on cs.order == cr.order && cs.item_sk == cr.item_sk
  Const        r9, 0
  LessInt      r10, r9, r7
  JumpIfFalse  r10, L1
L16:
  Index        r11, r23, r9
  Const        r12, "order"
  Index        r13, r22, r12
  Const        r14, "order"
  Index        r15, r11, r14
  Equal        r16, r13, r15
  Const        r17, "item_sk"
  Index        r19, r22, r17
  Const        r21, "item_sk"
  Index        r18, r11, r21
  Equal        r1, r19, r18
  Move         r8, r16
  JumpIfFalse  r8, L0
  Move         r8, r1
  JumpIfFalse  r8, L2
  // join w in warehouse on cs.warehouse_sk == w.warehouse_sk
  IterPrep     r7, r3
  Len          r10, r7
  Const        r23, "warehouse_sk"
  Const        r12, "warehouse_sk"
  // where i.current_price >= 0.99 && i.current_price <= 1.49
  Const        r14, "current_price"
  Const        r13, "current_price"
  // w_state: w.state,
  Const        r15, "w_state"
  Const        r17, "state"
  // i_item_id: i.item_id,
  Const        r21, "i_item_id"
  Const        r19, "item_id"
  // sold_date: d.date,
  Const        r18, "sold_date"
  Const        r16, "date"
  // net: cs.price - cr.refunded
  Const        r1, "net"
  Const        r8, "price"
  Const        r3, "refunded"
  // join w in warehouse on cs.warehouse_sk == w.warehouse_sk
  Const        r23, 0
  LessInt      r12, r23, r10
  JumpIfFalse  r12, L2
  Index        r14, r7, r23
  Const        r13, "warehouse_sk"
  Index        r15, r22, r13
  Const        r17, "warehouse_sk"
  Index        r21, r14, r17
  Equal        r19, r15, r21
  JumpIfFalse  r19, L3
  // join i in item on cs.item_sk == i.item_sk
  IterPrep     r18, r2
  Len          r16, r18
  Const        r1, "item_sk"
  Const        r8, "item_sk"
  // where i.current_price >= 0.99 && i.current_price <= 1.49
  Const        r3, "current_price"
  Const        r10, "current_price"
  // w_state: w.state,
  Const        r7, "w_state"
  Const        r13, "state"
  // i_item_id: i.item_id,
  Const        r17, "i_item_id"
  Const        r15, "item_id"
  // sold_date: d.date,
  Const        r21, "sold_date"
  Const        r19, "date"
  // net: cs.price - cr.refunded
  Const        r2, "net"
  Const        r1, "price"
  Const        r8, "refunded"
  // join i in item on cs.item_sk == i.item_sk
  Const        r3, 0
  LessInt      r10, r3, r16
  JumpIfFalse  r10, L3
  Index        r7, r18, r3
  Const        r13, "item_sk"
  Index        r17, r22, r13
  Const        r15, "item_sk"
  Index        r21, r7, r15
  Equal        r19, r17, r21
  JumpIfFalse  r19, L4
  // join d in date_dim on cs.date_sk == d.date_sk
  IterPrep     r2, r4
  Len          r1, r2
  Const        r8, "date_sk"
  Const        r16, "date_sk"
  // where i.current_price >= 0.99 && i.current_price <= 1.49
  Const        r18, "current_price"
  Const        r13, "current_price"
  // w_state: w.state,
  Const        r15, "w_state"
  Const        r17, "state"
  // i_item_id: i.item_id,
  Const        r21, "i_item_id"
  Const        r19, "item_id"
  // sold_date: d.date,
  Const        r4, "sold_date"
  Const        r8, "date"
  // net: cs.price - cr.refunded
  Const        r16, "net"
  Const        r18, "price"
  Const        r13, "refunded"
  // join d in date_dim on cs.date_sk == d.date_sk
  Const        r15, 0
  LessInt      r17, r15, r1
  JumpIfFalse  r17, L4
  Index        r21, r2, r15
  Const        r19, "date_sk"
  Index        r4, r22, r19
  Const        r8, "date_sk"
  Index        r16, r21, r8
  Equal        r18, r4, r16
  JumpIfFalse  r18, L5
  // where i.current_price >= 0.99 && i.current_price <= 1.49
  Const        r13, "current_price"
  Index        r1, r7, r13
  Const        r2, 0.99
  LessEqFloat  r19, r2, r1
  Const        r8, "current_price"
  Index        r4, r7, r8
  Const        r16, 1.49
  LessEqFloat  r18, r4, r16
  Move         r13, r19
  JumpIfFalse  r13, L6
  Move         r13, r18
  JumpIfFalse  r13, L5
  // w_state: w.state,
  Const        r1, "w_state"
  Const        r2, "state"
  Index        r8, r14, r2
  // i_item_id: i.item_id,
  Const        r4, "i_item_id"
  Const        r16, "item_id"
  Index        r19, r7, r16
  // sold_date: d.date,
  Const        r18, "sold_date"
  Const        r13, "date"
  Index        r14, r21, r13
  // net: cs.price - cr.refunded
  Const        r2, "net"
  Const        r7, "price"
  Index        r16, r22, r7
  Const        r21, "refunded"
  Index        r13, r11, r21
  Sub          r22, r16, r13
  // w_state: w.state,
  Move         r24, r1
  Move         r25, r8
  // i_item_id: i.item_id,
  Move         r26, r4
  Move         r27, r19
  // sold_date: d.date,
  Move         r28, r18
  Move         r29, r14
  // net: cs.price - cr.refunded
  Move         r30, r2
  Move         r31, r22
  // select {
  MakeMap      r7, 4, r24
  // from cs in catalog_sales
  Append       r6, r6, r7
  // join d in date_dim on cs.date_sk == d.date_sk
  Const        r11, 1
  Add          r15, r15, r11
  Jump         L7
  // join i in item on cs.item_sk == i.item_sk
  Const        r21, 1
  Add          r3, r3, r21
  Jump         L8
  // join w in warehouse on cs.warehouse_sk == w.warehouse_sk
  Const        r16, 1
  Add          r23, r23, r16
  Jump         L9
  // join cr in catalog_returns on cs.order == cr.order && cs.item_sk == cr.item_sk
  Const        r13, 1
  Add          r9, r9, r13
  Jump         L10
  // from cs in catalog_sales
  Const        r1, 1
  AddInt       r20, r20, r1
  Jump         L11
  // from r in records
  Const        r4, []
  // group by { w_state: r.w_state, i_item_id: r.i_item_id } into g
  Const        r19, "w_state"
  Const        r18, "w_state"
  Const        r14, "i_item_id"
  Const        r2, "i_item_id"
  // w_state: g.key.w_state,
  Const        r22, "w_state"
  Const        r24, "key"
  Const        r25, "w_state"
  // i_item_id: g.key.i_item_id,
  Const        r26, "i_item_id"
  Const        r27, "key"
  Const        r28, "i_item_id"
  // sales_before: sum(from x in g select if x.sold_date < sales_date { x.net } else { 0.0 }),
  Const        r29, "sales_before"
  Const        r30, "sold_date"
  Const        r31, "net"
  // sales_after: sum(from x in g select if x.sold_date >= sales_date { x.net } else { 0.0 })
  Const        r7, "sales_after"
  Const        r15, "sold_date"
  Const        r17, "net"
  // from r in records
  IterPrep     r11, r6
  Len          r3, r11
  Const        r10, 0
  MakeMap      r21, 0, r0
  Const        r23, []
  LessInt      r12, r10, r3
  JumpIfFalse  r12, L12
  Index        r16, r11, r10
  Move         r9, r16
  // group by { w_state: r.w_state, i_item_id: r.i_item_id } into g
  Const        r13, "w_state"
  Const        r20, "w_state"
  Index        r1, r9, r20
  Const        r8, "i_item_id"
  Const        r19, "i_item_id"
  Index        r18, r9, r19
  Move         r32, r13
  Move         r33, r1
  Move         r34, r8
  Move         r35, r18
  MakeMap      r14, 2, r32
  Str          r2, r14
  In           r22, r2, r21
  JumpIfTrue   r22, L13
  // from r in records
  Const        r24, []
  Const        r25, "__group__"
  Const        r26, true
  Const        r27, "key"
  // group by { w_state: r.w_state, i_item_id: r.i_item_id } into g
  Move         r28, r14
  // from r in records
  Const        r29, "items"
  Move         r30, r24
  Const        r31, "count"
  Const        r7, 0
  Move         r36, r25
  Move         r37, r26
  Move         r38, r27
  Move         r39, r28
  Move         r40, r29
  Move         r41, r30
  Move         r42, r31
  Move         r43, r7
  MakeMap      r15, 4, r36
  SetIndex     r21, r2, r15
  Append       r23, r23, r15
  Const        r17, "items"
  Index        r6, r21, r2
  Index        r3, r6, r17
  Append       r12, r3, r16
  SetIndex     r6, r17, r12
  Const        r11, "count"
  Index        r20, r6, r11
  Const        r9, 1
  AddInt       r19, r20, r9
  SetIndex     r6, r11, r19
  Const        r13, 1
  AddInt       r10, r10, r13
  Jump         L14
  Const        r1, 0
  Len          r8, r23
  LessInt      r18, r1, r8
  JumpIfFalse  r18, L15
  Index        r32, r23, r1
  // w_state: g.key.w_state,
  Const        r33, "w_state"
  Const        r34, "key"
  Index        r35, r32, r34
  Const        r22, "w_state"
  Index        r24, r35, r22
  // i_item_id: g.key.i_item_id,
  Const        r25, "i_item_id"
  Const        r26, "key"
  Index        r27, r32, r26
  Const        r28, "i_item_id"
  Index        r29, r27, r28
  // sales_before: sum(from x in g select if x.sold_date < sales_date { x.net } else { 0.0 }),
  Const        r30, "sales_before"
  Const        r31, []
  Const        r7, "sold_date"
  Const        r36, "net"
  IterPrep     r37, r32
  Len          r38, r37
  Const        r39, 0
  LessInt      r40, r39, r38
  JumpIfFalse  r40, L16
  Index        r41, r37, r39
  Const        r42, "sold_date"
  Index        r43, r41, r42
  Less         r15, r43, r5
  JumpIfFalse  r15, L13
  Const        r21, "net"
  Index        r2, r41, r21
  Jump         L17
  Const        r2, 0
  Append       r31, r31, r2
  Const        r17, 1
  AddInt       r39, r39, r17
  Jump         L18
  Sum          r12, r31
  // sales_after: sum(from x in g select if x.sold_date >= sales_date { x.net } else { 0.0 })
  Const        r6, "sales_after"
  Const        r11, []
  Const        r20, "sold_date"
  Const        r9, "net"
  IterPrep     r19, r32
  Len          r3, r19
  Const        r10, 0
  LessInt      r14, r10, r3
  JumpIfFalse  r14, L19
  Index        r41, r19, r10
  Const        r13, "sold_date"
  Index        r8, r41, r13
  LessEq       r18, r5, r8
  JumpIfFalse  r18, L20
  Const        r23, "net"
  Index        r34, r41, r23
  Jump         L21
L20:
  Const        r34, 0
L21:
  Append       r11, r11, r34
  Const        r35, 1
  AddInt       r10, r10, r35
  Jump         L3
L19:
  Sum          r26, r11
  // w_state: g.key.w_state,
  Move         r44, r33
  Move         r45, r24
  // i_item_id: g.key.i_item_id,
  Move         r46, r25
  Move         r47, r29
  // sales_before: sum(from x in g select if x.sold_date < sales_date { x.net } else { 0.0 }),
  Move         r48, r30
  Move         r49, r12
  // sales_after: sum(from x in g select if x.sold_date >= sales_date { x.net } else { 0.0 })
  Move         r50, r6
  Move         r51, r26
  // select {
  MakeMap      r22, 4, r44
  // from r in records
  Append       r4, r4, r22
  Const        r27, 1
  AddInt       r1, r1, r27
  Jump         L22
L15:
  // json(result)
  JSON         r4
  // expect result == [
  Const        r28, [{"i_item_id": "I1", "sales_after": 0, "sales_before": 100, "w_state": "CA"}]
  Equal        r7, r4, r28
  Expect       r7
  Return       r0
