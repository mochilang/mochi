func main (regs=258)
  // let store_sales = [
  Const        r0, [{"ss_ext_sales_price": 50, "ss_item_sk": 1, "ss_sold_date_sk": 1}, {"ss_ext_sales_price": 100, "ss_item_sk": 2, "ss_sold_date_sk": 1}]
  // let item = [
  Const        r1, [{"i_category": "CatA", "i_class": "Class1", "i_current_price": 100, "i_item_desc": "desc1", "i_item_id": "I1", "i_item_sk": 1}, {"i_category": "CatB", "i_class": "Class1", "i_current_price": 200, "i_item_desc": "desc2", "i_item_id": "I2", "i_item_sk": 2}]
  // let date_dim = [{d_date_sk: 1, d_date: "2000-02-01"}]
  Const        r2, [{"d_date": "2000-02-01", "d_date_sk": 1}]
  // from ss in store_sales
  Const        r3, []
  // group by {item_id: i.i_item_id, item_desc: i.i_item_desc, category: i.i_category, class: i.i_class, price: i.i_current_price} into g
  Const        r4, "item_id"
  Const        r5, "i_item_id"
  Const        r6, "item_desc"
  Const        r7, "i_item_desc"
  Const        r8, "category"
  Const        r9, "i_category"
  Const        r10, "class"
  Const        r11, "i_class"
  Const        r12, "price"
  Const        r13, "i_current_price"
  // i_item_id: g.key.item_id,
  Const        r14, "key"
  // itemrevenue: sum(from x in g select x.ss_ext_sales_price)
  Const        r15, "itemrevenue"
  Const        r16, "ss_ext_sales_price"
  // from ss in store_sales
  MakeMap      r17, 0, r0
  Const        r18, []
  IterPrep     r20, r0
  Len          r21, r20
  Const        r22, 0
L7:
  LessInt      r23, r22, r21
  JumpIfFalse  r23, L0
  Index        r25, r20, r22
  // join i in item on ss.ss_item_sk == i.i_item_sk
  IterPrep     r26, r1
  Len          r27, r26
  Const        r28, 0
L6:
  LessInt      r29, r28, r27
  JumpIfFalse  r29, L1
  Index        r31, r26, r28
  Const        r32, "ss_item_sk"
  Index        r33, r25, r32
  Const        r34, "i_item_sk"
  Index        r35, r31, r34
  Equal        r36, r33, r35
  JumpIfFalse  r36, L2
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  IterPrep     r37, r2
  Len          r38, r37
  Const        r39, 0
L5:
  LessInt      r40, r39, r38
  JumpIfFalse  r40, L2
  Index        r42, r37, r39
  Const        r43, "ss_sold_date_sk"
  Index        r44, r25, r43
  Const        r45, "d_date_sk"
  Index        r46, r42, r45
  Equal        r47, r44, r46
  JumpIfFalse  r47, L3
  // from ss in store_sales
  Const        r48, "ss"
  Move         r49, r25
  Const        r50, "i"
  Move         r51, r31
  Const        r52, "d"
  Move         r53, r42
  Move         r54, r48
  Move         r55, r49
  Move         r56, r50
  Move         r57, r51
  Move         r58, r52
  Move         r59, r53
  MakeMap      r60, 3, r54
  // group by {item_id: i.i_item_id, item_desc: i.i_item_desc, category: i.i_category, class: i.i_class, price: i.i_current_price} into g
  Const        r61, "item_id"
  Index        r62, r31, r5
  Const        r63, "item_desc"
  Index        r64, r31, r7
  Const        r65, "category"
  Index        r66, r31, r9
  Const        r67, "class"
  Index        r68, r31, r11
  Const        r69, "price"
  Index        r70, r31, r13
  Move         r71, r61
  Move         r72, r62
  Move         r73, r63
  Move         r74, r64
  Move         r75, r65
  Move         r76, r66
  Move         r77, r67
  Move         r78, r68
  Move         r79, r69
  Move         r80, r70
  MakeMap      r81, 5, r71
  Str          r82, r81
  In           r83, r82, r17
  JumpIfTrue   r83, L4
  // from ss in store_sales
  Const        r84, []
  Const        r85, "__group__"
  Const        r86, true
  // group by {item_id: i.i_item_id, item_desc: i.i_item_desc, category: i.i_category, class: i.i_class, price: i.i_current_price} into g
  Move         r87, r81
  // from ss in store_sales
  Const        r88, "items"
  Move         r89, r84
  Const        r90, "count"
  Const        r91, 0
  Move         r92, r85
  Move         r93, r86
  Move         r94, r14
  Move         r95, r87
  Move         r96, r88
  Move         r97, r89
  Move         r98, r90
  Move         r99, r91
  MakeMap      r100, 4, r92
  SetIndex     r17, r82, r100
  Append       r18, r18, r100
L4:
  Index        r102, r17, r82
  Index        r103, r102, r88
  Append       r104, r103, r60
  SetIndex     r102, r88, r104
  Index        r105, r102, r90
  Const        r106, 1
  AddInt       r107, r105, r106
  SetIndex     r102, r90, r107
L3:
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  AddInt       r39, r39, r106
  Jump         L5
L2:
  // join i in item on ss.ss_item_sk == i.i_item_sk
  AddInt       r28, r28, r106
  Jump         L6
L1:
  // from ss in store_sales
  AddInt       r22, r22, r106
  Jump         L7
L0:
  Move         r108, r91
  Len          r109, r18
L11:
  LessInt      r110, r108, r109
  JumpIfFalse  r110, L8
  Index        r112, r18, r108
  // i_item_id: g.key.item_id,
  Const        r113, "i_item_id"
  Index        r114, r112, r14
  Index        r115, r114, r4
  // i_item_desc: g.key.item_desc,
  Const        r116, "i_item_desc"
  Index        r117, r112, r14
  Index        r118, r117, r6
  // i_category: g.key.category,
  Const        r119, "i_category"
  Index        r120, r112, r14
  Index        r121, r120, r8
  // i_class: g.key.class,
  Const        r122, "i_class"
  Index        r123, r112, r14
  Index        r124, r123, r10
  // i_current_price: g.key.price,
  Const        r125, "i_current_price"
  Index        r126, r112, r14
  Index        r127, r126, r12
  // itemrevenue: sum(from x in g select x.ss_ext_sales_price)
  Const        r128, "itemrevenue"
  Const        r129, []
  IterPrep     r130, r112
  Len          r131, r130
  Move         r132, r91
L10:
  LessInt      r133, r132, r131
  JumpIfFalse  r133, L9
  Index        r135, r130, r132
  Index        r136, r135, r16
  Append       r129, r129, r136
  AddInt       r132, r132, r106
  Jump         L10
L9:
  Sum          r138, r129
  // i_item_id: g.key.item_id,
  Move         r139, r113
  Move         r140, r115
  // i_item_desc: g.key.item_desc,
  Move         r141, r116
  Move         r142, r118
  // i_category: g.key.category,
  Move         r143, r119
  Move         r144, r121
  // i_class: g.key.class,
  Move         r145, r122
  Move         r146, r124
  // i_current_price: g.key.price,
  Move         r147, r125
  Move         r148, r127
  // itemrevenue: sum(from x in g select x.ss_ext_sales_price)
  Move         r149, r128
  Move         r150, r138
  // select {
  MakeMap      r151, 6, r139
  // from ss in store_sales
  Append       r3, r3, r151
  AddInt       r108, r108, r106
  Jump         L11
L8:
  // from g in grouped
  Const        r153, []
  // select {class: cg.key, total: sum(from x in cg select x.itemrevenue)}
  Const        r154, "total"
  // from g in grouped
  IterPrep     r155, r3
  Len          r156, r155
  Const        r157, 0
  MakeMap      r158, 0, r0
  Const        r159, []
L14:
  LessInt      r161, r157, r156
  JumpIfFalse  r161, L12
  Index        r162, r155, r157
  // group by g.i_class into cg
  Index        r163, r162, r11
  Str          r164, r163
  In           r165, r164, r158
  JumpIfTrue   r165, L13
  Move         r166, r163
  // from g in grouped
  Move         r167, r84
  Move         r168, r85
  Move         r169, r86
  Move         r170, r14
  Move         r171, r166
  Move         r172, r88
  Move         r173, r167
  Move         r174, r90
  Move         r175, r91
  MakeMap      r176, 4, r168
  SetIndex     r158, r164, r176
  Append       r159, r159, r176
L13:
  Index        r178, r158, r164
  Index        r179, r178, r88
  Append       r180, r179, r162
  SetIndex     r178, r88, r180
  Index        r181, r178, r90
  AddInt       r182, r181, r106
  SetIndex     r178, r90, r182
  AddInt       r157, r157, r106
  Jump         L14
L12:
  Move         r183, r91
  Len          r184, r159
L18:
  LessInt      r185, r183, r184
  JumpIfFalse  r185, L15
  Index        r187, r159, r183
  // select {class: cg.key, total: sum(from x in cg select x.itemrevenue)}
  Const        r188, "class"
  Index        r189, r187, r14
  Const        r190, "total"
  Const        r191, []
  IterPrep     r192, r187
  Len          r193, r192
  Move         r194, r91
L17:
  LessInt      r195, r194, r193
  JumpIfFalse  r195, L16
  Index        r135, r192, r194
  Index        r197, r135, r15
  Append       r191, r191, r197
  AddInt       r194, r194, r106
  Jump         L17
L16:
  Sum          r199, r191
  Move         r200, r188
  Move         r201, r189
  Move         r202, r190
  Move         r203, r199
  MakeMap      r204, 2, r200
  // from g in grouped
  Append       r153, r153, r204
  AddInt       r183, r183, r106
  Jump         L18
L15:
  // from g in grouped
  Const        r206, []
  IterPrep     r207, r3
  Len          r208, r207
  // join t in totals on g.i_class == t.class
  IterPrep     r209, r153
  Len          r210, r209
  // revenueratio: g.itemrevenue * 100 / t.total
  Const        r211, "revenueratio"
  // from g in grouped
  Const        r212, 0
L23:
  LessInt      r213, r212, r208
  JumpIfFalse  r213, L19
  Index        r112, r207, r212
  // join t in totals on g.i_class == t.class
  Const        r215, 0
L22:
  LessInt      r216, r215, r210
  JumpIfFalse  r216, L20
  Index        r218, r209, r215
  Index        r219, r112, r11
  Index        r220, r218, r10
  Equal        r221, r219, r220
  JumpIfFalse  r221, L21
  // i_item_id: g.i_item_id,
  Const        r222, "i_item_id"
  Index        r223, r112, r5
  // i_item_desc: g.i_item_desc,
  Const        r224, "i_item_desc"
  Index        r225, r112, r7
  // i_category: g.i_category,
  Const        r226, "i_category"
  Index        r227, r112, r9
  // i_class: g.i_class,
  Const        r228, "i_class"
  Index        r229, r112, r11
  // i_current_price: g.i_current_price,
  Const        r230, "i_current_price"
  Index        r231, r112, r13
  // itemrevenue: g.itemrevenue,
  Const        r232, "itemrevenue"
  Index        r233, r112, r15
  // revenueratio: g.itemrevenue * 100 / t.total
  Const        r234, "revenueratio"
  Index        r235, r112, r15
  Const        r236, 100
  Mul          r237, r235, r236
  Index        r238, r218, r154
  Div          r239, r237, r238
  // i_item_id: g.i_item_id,
  Move         r240, r222
  Move         r241, r223
  // i_item_desc: g.i_item_desc,
  Move         r242, r224
  Move         r243, r225
  // i_category: g.i_category,
  Move         r244, r226
  Move         r245, r227
  // i_class: g.i_class,
  Move         r246, r228
  Move         r247, r229
  // i_current_price: g.i_current_price,
  Move         r248, r230
  Move         r249, r231
  // itemrevenue: g.itemrevenue,
  Move         r250, r232
  Move         r251, r233
  // revenueratio: g.itemrevenue * 100 / t.total
  Move         r252, r234
  Move         r253, r239
  // select {
  MakeMap      r254, 7, r240
  // from g in grouped
  Append       r206, r206, r254
L21:
  // join t in totals on g.i_class == t.class
  AddInt       r215, r215, r106
  Jump         L22
L20:
  // from g in grouped
  AddInt       r212, r212, r106
  Jump         L23
L19:
  // json(result)
  JSON         r206
  // expect result == [
  Const        r256, [{"i_category": "CatA", "i_class": "Class1", "i_current_price": 100, "i_item_desc": "desc1", "i_item_id": "I1", "itemrevenue": 50, "revenueratio": 33.333333333333336}, {"i_category": "CatB", "i_class": "Class1", "i_current_price": 200, "i_item_desc": "desc2", "i_item_id": "I2", "itemrevenue": 100, "revenueratio": 66.66666666666667}]
  Equal        r257, r206, r256
  Expect       r257
  Return       r0
