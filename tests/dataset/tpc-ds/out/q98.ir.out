func main (regs=263)
  // let store_sales = [
  Const        r0, [{"ss_ext_sales_price": 50, "ss_item_sk": 1, "ss_sold_date_sk": 1}, {"ss_ext_sales_price": 100, "ss_item_sk": 2, "ss_sold_date_sk": 1}]
  // let item = [
  Const        r1, [{"i_category": "CatA", "i_class": "Class1", "i_current_price": 100, "i_item_desc": "desc1", "i_item_id": "I1", "i_item_sk": 1}, {"i_category": "CatB", "i_class": "Class1", "i_current_price": 200, "i_item_desc": "desc2", "i_item_id": "I2", "i_item_sk": 2}]
  // let date_dim = [{d_date_sk: 1, d_date: "2000-02-01"}]
  Const        r2, [{"d_date": "2000-02-01", "d_date_sk": 1}]
  // from ss in store_sales
  Const        r3, []
  // group by {item_id: i.i_item_id, item_desc: i.i_item_desc, category: i.i_category, class: i.i_class, price: i.i_current_price} into g
  Const        r4, "item_id"
  Const        r5, "i_item_id"
  Const        r6, "item_desc"
  Const        r7, "i_item_desc"
  Const        r8, "category"
  Const        r9, "i_category"
  Const        r10, "class"
  Const        r11, "i_class"
  Const        r12, "price"
  Const        r13, "i_current_price"
  // i_item_id: g.key.item_id,
  Const        r14, "key"
  // itemrevenue: sum(from x in g select x.ss_ext_sales_price)
  Const        r15, "itemrevenue"
  Const        r16, "ss_ext_sales_price"
  // from ss in store_sales
  MakeMap      r17, 0, r0
  Const        r18, []
  IterPrep     r20, r0
  Len          r21, r20
  Const        r22, 0
L7:
  LessInt      r23, r22, r21
  JumpIfFalse  r23, L0
  Index        r25, r20, r22
  // join i in item on ss.ss_item_sk == i.i_item_sk
  IterPrep     r26, r1
  Len          r27, r26
  Const        r28, 0
L6:
  LessInt      r29, r28, r27
  JumpIfFalse  r29, L1
  Index        r31, r26, r28
  Const        r32, "ss_item_sk"
  Index        r33, r25, r32
  Const        r34, "i_item_sk"
  Index        r35, r31, r34
  Equal        r36, r33, r35
  JumpIfFalse  r36, L2
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  IterPrep     r37, r2
  Len          r38, r37
  Const        r39, 0
L5:
  LessInt      r40, r39, r38
  JumpIfFalse  r40, L2
  Index        r42, r37, r39
  Const        r43, "ss_sold_date_sk"
  Index        r44, r25, r43
  Const        r45, "d_date_sk"
  Index        r46, r42, r45
  Equal        r47, r44, r46
  JumpIfFalse  r47, L3
  // from ss in store_sales
  Const        r48, "ss"
  Move         r49, r25
  Const        r50, "i"
  Move         r51, r31
  Const        r52, "d"
  Move         r53, r42
  MakeMap      r54, 3, r48
  // group by {item_id: i.i_item_id, item_desc: i.i_item_desc, category: i.i_category, class: i.i_class, price: i.i_current_price} into g
  Const        r55, "item_id"
  Index        r56, r31, r5
  Const        r57, "item_desc"
  Index        r58, r31, r7
  Const        r59, "category"
  Index        r60, r31, r9
  Const        r61, "class"
  Index        r62, r31, r11
  Const        r63, "price"
  Index        r64, r31, r13
  Move         r65, r55
  Move         r66, r56
  Move         r67, r57
  Move         r68, r58
  Move         r69, r59
  Move         r70, r60
  Move         r71, r61
  Move         r72, r62
  Move         r73, r63
  Move         r74, r64
  MakeMap      r75, 5, r65
  Str          r76, r75
  In           r77, r76, r17
  JumpIfTrue   r77, L4
  // from ss in store_sales
  Const        r78, []
  Const        r79, "__group__"
  Const        r80, true
  Const        r81, "key"
  // group by {item_id: i.i_item_id, item_desc: i.i_item_desc, category: i.i_category, class: i.i_class, price: i.i_current_price} into g
  Move         r82, r75
  // from ss in store_sales
  Const        r83, "items"
  Move         r84, r78
  Const        r85, "count"
  Const        r86, 0
  Move         r87, r79
  Move         r88, r80
  Move         r89, r81
  Move         r90, r82
  Move         r91, r83
  Move         r92, r84
  Move         r93, r85
  Move         r94, r86
  MakeMap      r95, 4, r87
  SetIndex     r17, r76, r95
  Append       r18, r18, r95
L4:
  Const        r97, "items"
  Index        r98, r17, r76
  Index        r99, r98, r97
  Append       r100, r99, r54
  SetIndex     r98, r97, r100
  Const        r101, "count"
  Index        r102, r98, r101
  Const        r103, 1
  AddInt       r104, r102, r103
  SetIndex     r98, r101, r104
L3:
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  AddInt       r39, r39, r103
  Jump         L5
L2:
  // join i in item on ss.ss_item_sk == i.i_item_sk
  AddInt       r28, r28, r103
  Jump         L6
L1:
  // from ss in store_sales
  AddInt       r22, r22, r103
  Jump         L7
L0:
  Const        r106, 0
  Move         r105, r106
  Len          r107, r18
L11:
  LessInt      r108, r105, r107
  JumpIfFalse  r108, L8
  Index        r110, r18, r105
  // i_item_id: g.key.item_id,
  Const        r111, "i_item_id"
  Index        r112, r110, r14
  Index        r113, r112, r4
  // i_item_desc: g.key.item_desc,
  Const        r114, "i_item_desc"
  Index        r115, r110, r14
  Index        r116, r115, r6
  // i_category: g.key.category,
  Const        r117, "i_category"
  Index        r118, r110, r14
  Index        r119, r118, r8
  // i_class: g.key.class,
  Const        r120, "i_class"
  Index        r121, r110, r14
  Index        r122, r121, r10
  // i_current_price: g.key.price,
  Const        r123, "i_current_price"
  Index        r124, r110, r14
  Index        r125, r124, r12
  // itemrevenue: sum(from x in g select x.ss_ext_sales_price)
  Const        r126, "itemrevenue"
  Const        r127, []
  IterPrep     r128, r110
  Len          r129, r128
  Move         r130, r106
L10:
  LessInt      r131, r130, r129
  JumpIfFalse  r131, L9
  Index        r133, r128, r130
  Index        r134, r133, r16
  Append       r127, r127, r134
  AddInt       r130, r130, r103
  Jump         L10
L9:
  Sum          r136, r127
  // i_item_id: g.key.item_id,
  Move         r137, r111
  Move         r138, r113
  // i_item_desc: g.key.item_desc,
  Move         r139, r114
  Move         r140, r116
  // i_category: g.key.category,
  Move         r141, r117
  Move         r142, r119
  // i_class: g.key.class,
  Move         r143, r120
  Move         r144, r122
  // i_current_price: g.key.price,
  Move         r145, r123
  Move         r146, r125
  // itemrevenue: sum(from x in g select x.ss_ext_sales_price)
  Move         r147, r126
  Move         r148, r136
  // select {
  MakeMap      r149, 6, r137
  // from ss in store_sales
  Append       r3, r3, r149
  AddInt       r105, r105, r103
  Jump         L11
L8:
  // from g in grouped
  Const        r151, []
  // select {class: cg.key, total: sum(from x in cg select x.itemrevenue)}
  Const        r152, "total"
  // from g in grouped
  IterPrep     r153, r3
  Len          r154, r153
  Const        r155, 0
  MakeMap      r156, 0, r0
  Const        r157, []
L14:
  LessInt      r159, r155, r154
  JumpIfFalse  r159, L12
  Index        r160, r153, r155
  // group by g.i_class into cg
  Index        r161, r160, r11
  Str          r162, r161
  In           r163, r162, r156
  JumpIfTrue   r163, L13
  // from g in grouped
  Const        r164, []
  Const        r165, "__group__"
  Const        r166, true
  Const        r167, "key"
  // group by g.i_class into cg
  Move         r168, r161
  // from g in grouped
  Const        r169, "items"
  Move         r170, r164
  Const        r171, "count"
  Const        r172, 0
  Move         r173, r165
  Move         r174, r166
  Move         r175, r167
  Move         r176, r168
  Move         r177, r169
  Move         r178, r170
  Move         r179, r171
  Move         r180, r172
  MakeMap      r181, 4, r173
  SetIndex     r156, r162, r181
  Append       r157, r157, r181
L13:
  Index        r183, r156, r162
  Index        r184, r183, r97
  Append       r185, r184, r160
  SetIndex     r183, r97, r185
  Index        r186, r183, r101
  AddInt       r187, r186, r103
  SetIndex     r183, r101, r187
  AddInt       r155, r155, r103
  Jump         L14
L12:
  Move         r188, r106
  Len          r189, r157
L18:
  LessInt      r190, r188, r189
  JumpIfFalse  r190, L15
  Index        r192, r157, r188
  // select {class: cg.key, total: sum(from x in cg select x.itemrevenue)}
  Const        r193, "class"
  Index        r194, r192, r14
  Const        r195, "total"
  Const        r196, []
  IterPrep     r197, r192
  Len          r198, r197
  Move         r199, r106
L17:
  LessInt      r200, r199, r198
  JumpIfFalse  r200, L16
  Index        r133, r197, r199
  Index        r202, r133, r15
  Append       r196, r196, r202
  AddInt       r199, r199, r103
  Jump         L17
L16:
  Sum          r204, r196
  Move         r205, r193
  Move         r206, r194
  Move         r207, r195
  Move         r208, r204
  MakeMap      r209, 2, r205
  // from g in grouped
  Append       r151, r151, r209
  AddInt       r188, r188, r103
  Jump         L18
L15:
  // from g in grouped
  Const        r211, []
  IterPrep     r212, r3
  Len          r213, r212
  // join t in totals on g.i_class == t.class
  IterPrep     r214, r151
  Len          r215, r214
  // revenueratio: g.itemrevenue * 100 / t.total
  Const        r216, "revenueratio"
  // from g in grouped
  Const        r217, 0
L23:
  LessInt      r218, r217, r213
  JumpIfFalse  r218, L19
  Index        r110, r212, r217
  // join t in totals on g.i_class == t.class
  Const        r220, 0
L22:
  LessInt      r221, r220, r215
  JumpIfFalse  r221, L20
  Index        r223, r214, r220
  Index        r224, r110, r11
  Index        r225, r223, r10
  Equal        r226, r224, r225
  JumpIfFalse  r226, L21
  // i_item_id: g.i_item_id,
  Const        r227, "i_item_id"
  Index        r228, r110, r5
  // i_item_desc: g.i_item_desc,
  Const        r229, "i_item_desc"
  Index        r230, r110, r7
  // i_category: g.i_category,
  Const        r231, "i_category"
  Index        r232, r110, r9
  // i_class: g.i_class,
  Const        r233, "i_class"
  Index        r234, r110, r11
  // i_current_price: g.i_current_price,
  Const        r235, "i_current_price"
  Index        r236, r110, r13
  // itemrevenue: g.itemrevenue,
  Const        r237, "itemrevenue"
  Index        r238, r110, r15
  // revenueratio: g.itemrevenue * 100 / t.total
  Const        r239, "revenueratio"
  Index        r240, r110, r15
  Const        r241, 100
  Mul          r242, r240, r241
  Index        r243, r223, r152
  Div          r244, r242, r243
  // i_item_id: g.i_item_id,
  Move         r245, r227
  Move         r246, r228
  // i_item_desc: g.i_item_desc,
  Move         r247, r229
  Move         r248, r230
  // i_category: g.i_category,
  Move         r249, r231
  Move         r250, r232
  // i_class: g.i_class,
  Move         r251, r233
  Move         r252, r234
  // i_current_price: g.i_current_price,
  Move         r253, r235
  Move         r254, r236
  // itemrevenue: g.itemrevenue,
  Move         r255, r237
  Move         r256, r238
  // revenueratio: g.itemrevenue * 100 / t.total
  Move         r257, r239
  Move         r258, r244
  // select {
  MakeMap      r259, 7, r245
  // from g in grouped
  Append       r211, r211, r259
L21:
  // join t in totals on g.i_class == t.class
  AddInt       r220, r220, r103
  Jump         L22
L20:
  // from g in grouped
  AddInt       r217, r217, r103
  Jump         L23
L19:
  // json(result)
  JSON         r211
  // expect result == [
  Const        r261, [{"i_category": "CatA", "i_class": "Class1", "i_current_price": 100, "i_item_desc": "desc1", "i_item_id": "I1", "itemrevenue": 50, "revenueratio": 33.333333333333336}, {"i_category": "CatB", "i_class": "Class1", "i_current_price": 200, "i_item_desc": "desc2", "i_item_id": "I2", "itemrevenue": 100, "revenueratio": 66.66666666666667}]
  Equal        r262, r211, r261
  Expect       r262
  Return       r0
