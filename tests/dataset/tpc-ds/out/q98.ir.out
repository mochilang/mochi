func main (regs=267)
  // let store_sales = [
  Const        r0, [{"ss_ext_sales_price": 50.0, "ss_item_sk": 1, "ss_sold_date_sk": 1}, {"ss_ext_sales_price": 100.0, "ss_item_sk": 2, "ss_sold_date_sk": 1}]
  // let item = [
  Const        r1, [{"i_category": "CatA", "i_class": "Class1", "i_current_price": 100.0, "i_item_desc": "desc1", "i_item_id": "I1", "i_item_sk": 1}, {"i_category": "CatB", "i_class": "Class1", "i_current_price": 200.0, "i_item_desc": "desc2", "i_item_id": "I2", "i_item_sk": 2}]
  // let date_dim = [{d_date_sk: 1, d_date: "2000-02-01"}]
  Const        r2, [{"d_date": "2000-02-01", "d_date_sk": 1}]
  // from ss in store_sales
  Const        r3, []
  // group by {item_id: i.i_item_id, item_desc: i.i_item_desc, category: i.i_category, class: i.i_class, price: i.i_current_price} into g
  Const        r4, "item_id"
  Const        r5, "i_item_id"
  Const        r6, "item_desc"
  Const        r7, "i_item_desc"
  Const        r8, "category"
  Const        r9, "i_category"
  Const        r10, "class"
  Const        r11, "i_class"
  Const        r12, "price"
  Const        r13, "i_current_price"
  // i_item_id: g.key.item_id,
  Const        r5, "i_item_id"
  Const        r14, "key"
  Const        r4, "item_id"
  // i_item_desc: g.key.item_desc,
  Const        r7, "i_item_desc"
  Const        r14, "key"
  Const        r6, "item_desc"
  // i_category: g.key.category,
  Const        r9, "i_category"
  Const        r14, "key"
  Const        r8, "category"
  // i_class: g.key.class,
  Const        r11, "i_class"
  Const        r14, "key"
  Const        r10, "class"
  // i_current_price: g.key.price,
  Const        r13, "i_current_price"
  Const        r14, "key"
  Const        r12, "price"
  // itemrevenue: sum(from x in g select x.ss_ext_sales_price)
  Const        r15, "itemrevenue"
  Const        r16, "ss_ext_sales_price"
  // from ss in store_sales
  MakeMap      r17, 0, r0
  Const        r19, []
  Move         r18, r19
  IterPrep     r20, r0
  Len          r21, r20
  Const        r22, 0
L7:
  LessInt      r23, r22, r21
  JumpIfFalse  r23, L0
  Index        r24, r20, r22
  Move         r25, r24
  // join i in item on ss.ss_item_sk == i.i_item_sk
  IterPrep     r26, r1
  Len          r27, r26
  Const        r28, 0
L6:
  LessInt      r29, r28, r27
  JumpIfFalse  r29, L1
  Index        r30, r26, r28
  Move         r31, r30
  Const        r32, "ss_item_sk"
  Index        r33, r25, r32
  Const        r34, "i_item_sk"
  Index        r35, r31, r34
  Equal        r36, r33, r35
  JumpIfFalse  r36, L2
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  IterPrep     r37, r2
  Len          r38, r37
  Const        r39, 0
L5:
  LessInt      r40, r39, r38
  JumpIfFalse  r40, L2
  Index        r41, r37, r39
  Move         r42, r41
  Const        r43, "ss_sold_date_sk"
  Index        r44, r25, r43
  Const        r45, "d_date_sk"
  Index        r46, r42, r45
  Equal        r47, r44, r46
  JumpIfFalse  r47, L3
  // from ss in store_sales
  Const        r48, "ss"
  Move         r49, r25
  Const        r50, "i"
  Move         r51, r31
  Const        r52, "d"
  Move         r53, r42
  Move         r54, r48
  Move         r55, r49
  Move         r56, r50
  Move         r57, r51
  Move         r58, r52
  Move         r59, r53
  MakeMap      r60, 3, r54
  // group by {item_id: i.i_item_id, item_desc: i.i_item_desc, category: i.i_category, class: i.i_class, price: i.i_current_price} into g
  Const        r61, "item_id"
  Const        r5, "i_item_id"
  Index        r62, r31, r5
  Const        r63, "item_desc"
  Const        r7, "i_item_desc"
  Index        r64, r31, r7
  Const        r65, "category"
  Const        r9, "i_category"
  Index        r66, r31, r9
  Const        r67, "class"
  Const        r11, "i_class"
  Index        r68, r31, r11
  Const        r69, "price"
  Const        r13, "i_current_price"
  Index        r70, r31, r13
  Move         r71, r61
  Move         r72, r62
  Move         r73, r63
  Move         r74, r64
  Move         r75, r65
  Move         r76, r66
  Move         r77, r67
  Move         r78, r68
  Move         r79, r69
  Move         r80, r70
  MakeMap      r81, 5, r71
  Str          r82, r81
  In           r83, r82, r17
  JumpIfTrue   r83, L4
  // from ss in store_sales
  Const        r19, []
  Const        r84, "__group__"
  Const        r85, true
  Const        r14, "key"
  // group by {item_id: i.i_item_id, item_desc: i.i_item_desc, category: i.i_category, class: i.i_class, price: i.i_current_price} into g
  Move         r86, r81
  // from ss in store_sales
  Const        r87, "items"
  Move         r88, r19
  Const        r89, "count"
  Const        r90, 0
  Move         r91, r84
  Move         r92, r85
  Move         r93, r14
  Move         r94, r86
  Move         r95, r87
  Move         r96, r88
  Move         r97, r89
  Move         r98, r90
  MakeMap      r99, 4, r91
  SetIndex     r17, r82, r99
  Append       r100, r18, r99
  Move         r18, r100
L4:
  Const        r87, "items"
  Index        r101, r17, r82
  Index        r102, r101, r87
  Append       r103, r102, r60
  SetIndex     r101, r87, r103
  Const        r89, "count"
  Index        r104, r101, r89
  Const        r105, 1
  AddInt       r106, r104, r105
  SetIndex     r101, r89, r106
L3:
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  Const        r105, 1
  AddInt       r39, r39, r105
  Jump         L5
L2:
  // join i in item on ss.ss_item_sk == i.i_item_sk
  Const        r105, 1
  AddInt       r28, r28, r105
  Jump         L6
L1:
  // from ss in store_sales
  Const        r105, 1
  AddInt       r22, r22, r105
  Jump         L7
L0:
  Const        r90, 0
  Move         r107, r90
  Len          r108, r18
L11:
  LessInt      r109, r107, r108
  JumpIfFalse  r109, L8
  Index        r110, r18, r107
  Move         r111, r110
  // i_item_id: g.key.item_id,
  Const        r112, "i_item_id"
  Const        r14, "key"
  Index        r113, r111, r14
  Const        r4, "item_id"
  Index        r114, r113, r4
  // i_item_desc: g.key.item_desc,
  Const        r115, "i_item_desc"
  Const        r14, "key"
  Index        r116, r111, r14
  Const        r6, "item_desc"
  Index        r117, r116, r6
  // i_category: g.key.category,
  Const        r118, "i_category"
  Const        r14, "key"
  Index        r119, r111, r14
  Const        r8, "category"
  Index        r120, r119, r8
  // i_class: g.key.class,
  Const        r121, "i_class"
  Const        r14, "key"
  Index        r122, r111, r14
  Const        r10, "class"
  Index        r123, r122, r10
  // i_current_price: g.key.price,
  Const        r124, "i_current_price"
  Const        r14, "key"
  Index        r125, r111, r14
  Const        r12, "price"
  Index        r126, r125, r12
  // itemrevenue: sum(from x in g select x.ss_ext_sales_price)
  Const        r127, "itemrevenue"
  Const        r128, []
  Const        r16, "ss_ext_sales_price"
  IterPrep     r129, r111
  Len          r130, r129
  Const        r90, 0
  Move         r131, r90
L10:
  LessInt      r132, r131, r130
  JumpIfFalse  r132, L9
  Index        r133, r129, r131
  Move         r134, r133
  Const        r16, "ss_ext_sales_price"
  Index        r135, r134, r16
  Append       r136, r128, r135
  Move         r128, r136
  Const        r105, 1
  AddInt       r131, r131, r105
  Jump         L10
L9:
  Sum          r137, r128
  // i_item_id: g.key.item_id,
  Move         r138, r112
  Move         r139, r114
  // i_item_desc: g.key.item_desc,
  Move         r140, r115
  Move         r141, r117
  // i_category: g.key.category,
  Move         r142, r118
  Move         r143, r120
  // i_class: g.key.class,
  Move         r144, r121
  Move         r145, r123
  // i_current_price: g.key.price,
  Move         r146, r124
  Move         r147, r126
  // itemrevenue: sum(from x in g select x.ss_ext_sales_price)
  Move         r148, r127
  Move         r149, r137
  // select {
  MakeMap      r150, 6, r138
  // from ss in store_sales
  Append       r151, r3, r150
  Move         r3, r151
  Const        r105, 1
  AddInt       r107, r107, r105
  Jump         L11
L8:
  // from g in grouped
  Const        r152, []
  // group by g.i_class into cg
  Const        r11, "i_class"
  // select {class: cg.key, total: sum(from x in cg select x.itemrevenue)}
  Const        r10, "class"
  Const        r14, "key"
  Const        r153, "total"
  Const        r15, "itemrevenue"
  // from g in grouped
  IterPrep     r154, r3
  Len          r155, r154
  Const        r156, 0
  MakeMap      r157, 0, r0
  Const        r19, []
  Move         r158, r19
L14:
  LessInt      r159, r156, r155
  JumpIfFalse  r159, L12
  Index        r160, r154, r156
  Move         r111, r160
  // group by g.i_class into cg
  Const        r11, "i_class"
  Index        r161, r111, r11
  Str          r162, r161
  In           r163, r162, r157
  JumpIfTrue   r163, L13
  // from g in grouped
  Const        r19, []
  Const        r84, "__group__"
  Const        r85, true
  Const        r14, "key"
  // group by g.i_class into cg
  Move         r164, r161
  // from g in grouped
  Const        r87, "items"
  Move         r165, r19
  Const        r89, "count"
  Const        r90, 0
  Move         r166, r84
  Move         r167, r85
  Move         r168, r14
  Move         r169, r164
  Move         r170, r87
  Move         r171, r165
  Move         r172, r89
  Move         r173, r90
  MakeMap      r174, 4, r166
  SetIndex     r157, r162, r174
  Append       r175, r158, r174
  Move         r158, r175
L13:
  Const        r87, "items"
  Index        r176, r157, r162
  Index        r177, r176, r87
  Append       r178, r177, r160
  SetIndex     r176, r87, r178
  Const        r89, "count"
  Index        r179, r176, r89
  Const        r105, 1
  AddInt       r180, r179, r105
  SetIndex     r176, r89, r180
  Const        r105, 1
  AddInt       r156, r156, r105
  Jump         L14
L12:
  Const        r90, 0
  Move         r181, r90
  Len          r182, r158
L18:
  LessInt      r183, r181, r182
  JumpIfFalse  r183, L15
  Index        r184, r158, r181
  Move         r185, r184
  // select {class: cg.key, total: sum(from x in cg select x.itemrevenue)}
  Const        r186, "class"
  Const        r14, "key"
  Index        r187, r185, r14
  Const        r188, "total"
  Const        r189, []
  Const        r15, "itemrevenue"
  IterPrep     r190, r185
  Len          r191, r190
  Const        r90, 0
  Move         r192, r90
L17:
  LessInt      r193, r192, r191
  JumpIfFalse  r193, L16
  Index        r194, r190, r192
  Move         r134, r194
  Const        r15, "itemrevenue"
  Index        r195, r134, r15
  Append       r196, r189, r195
  Move         r189, r196
  Const        r105, 1
  AddInt       r192, r192, r105
  Jump         L17
L16:
  Sum          r197, r189
  Move         r198, r186
  Move         r199, r187
  Move         r200, r188
  Move         r201, r197
  MakeMap      r202, 2, r198
  // from g in grouped
  Append       r203, r152, r202
  Move         r152, r203
  Const        r105, 1
  AddInt       r181, r181, r105
  Jump         L18
L15:
  // from g in grouped
  Const        r204, []
  IterPrep     r205, r3
  Len          r206, r205
  // join t in totals on g.i_class == t.class
  IterPrep     r207, r152
  Len          r208, r207
  Const        r11, "i_class"
  Const        r10, "class"
  // i_item_id: g.i_item_id,
  Const        r5, "i_item_id"
  Const        r5, "i_item_id"
  // i_item_desc: g.i_item_desc,
  Const        r7, "i_item_desc"
  Const        r7, "i_item_desc"
  // i_category: g.i_category,
  Const        r9, "i_category"
  Const        r9, "i_category"
  // i_class: g.i_class,
  Const        r11, "i_class"
  Const        r11, "i_class"
  // i_current_price: g.i_current_price,
  Const        r13, "i_current_price"
  Const        r13, "i_current_price"
  // itemrevenue: g.itemrevenue,
  Const        r15, "itemrevenue"
  Const        r15, "itemrevenue"
  // revenueratio: g.itemrevenue * 100 / t.total
  Const        r209, "revenueratio"
  Const        r15, "itemrevenue"
  Const        r153, "total"
  // sort by [g.i_category, g.i_class, g.i_item_id]
  Const        r9, "i_category"
  Const        r11, "i_class"
  Const        r5, "i_item_id"
  // from g in grouped
  Const        r210, 0
L23:
  LessInt      r211, r210, r206
  JumpIfFalse  r211, L19
  Index        r212, r205, r210
  Move         r111, r212
  // join t in totals on g.i_class == t.class
  Const        r213, 0
L22:
  LessInt      r214, r213, r208
  JumpIfFalse  r214, L20
  Index        r215, r207, r213
  Move         r216, r215
  Const        r11, "i_class"
  Index        r217, r111, r11
  Const        r10, "class"
  Index        r218, r216, r10
  Equal        r219, r217, r218
  JumpIfFalse  r219, L21
  // i_item_id: g.i_item_id,
  Const        r220, "i_item_id"
  Const        r5, "i_item_id"
  Index        r221, r111, r5
  // i_item_desc: g.i_item_desc,
  Const        r222, "i_item_desc"
  Const        r7, "i_item_desc"
  Index        r223, r111, r7
  // i_category: g.i_category,
  Const        r224, "i_category"
  Const        r9, "i_category"
  Index        r225, r111, r9
  // i_class: g.i_class,
  Const        r226, "i_class"
  Const        r11, "i_class"
  Index        r227, r111, r11
  // i_current_price: g.i_current_price,
  Const        r228, "i_current_price"
  Const        r13, "i_current_price"
  Index        r229, r111, r13
  // itemrevenue: g.itemrevenue,
  Const        r230, "itemrevenue"
  Const        r15, "itemrevenue"
  Index        r231, r111, r15
  // revenueratio: g.itemrevenue * 100 / t.total
  Const        r232, "revenueratio"
  Const        r15, "itemrevenue"
  Index        r233, r111, r15
  Const        r234, 100
  Mul          r235, r233, r234
  Const        r153, "total"
  Index        r236, r216, r153
  Div          r237, r235, r236
  // i_item_id: g.i_item_id,
  Move         r238, r220
  Move         r239, r221
  // i_item_desc: g.i_item_desc,
  Move         r240, r222
  Move         r241, r223
  // i_category: g.i_category,
  Move         r242, r224
  Move         r243, r225
  // i_class: g.i_class,
  Move         r244, r226
  Move         r245, r227
  // i_current_price: g.i_current_price,
  Move         r246, r228
  Move         r247, r229
  // itemrevenue: g.itemrevenue,
  Move         r248, r230
  Move         r249, r231
  // revenueratio: g.itemrevenue * 100 / t.total
  Move         r250, r232
  Move         r251, r237
  // select {
  MakeMap      r252, 7, r238
  // sort by [g.i_category, g.i_class, g.i_item_id]
  Const        r9, "i_category"
  Index        r258, r111, r9
  Move         r255, r258
  Const        r11, "i_class"
  Index        r259, r111, r11
  Move         r256, r259
  Const        r5, "i_item_id"
  Index        r260, r111, r5
  Move         r257, r260
  MakeList     r261, 3, r255
  Move         r253, r261
  // from g in grouped
  Move         r254, r252
  MakeList     r262, 2, r253
  Append       r263, r204, r262
  Move         r204, r263
L21:
  // join t in totals on g.i_class == t.class
  Const        r105, 1
  AddInt       r213, r213, r105
  Jump         L22
L20:
  // from g in grouped
  Const        r105, 1
  AddInt       r210, r210, r105
  Jump         L23
L19:
  // sort by [g.i_category, g.i_class, g.i_item_id]
  Sort         r264, r204
  // from g in grouped
  Move         r204, r264
  // json(result)
  JSON         r204
  // expect result == [
  Const        r265, [{"i_category": "CatA", "i_class": "Class1", "i_current_price": 100.0, "i_item_desc": "desc1", "i_item_id": "I1", "itemrevenue": 50.0, "revenueratio": 33.333333333333336}, {"i_category": "CatB", "i_class": "Class1", "i_current_price": 200.0, "i_item_desc": "desc2", "i_item_id": "I2", "itemrevenue": 100.0, "revenueratio": 66.66666666666667}]
  Equal        r266, r204, r265
  Expect       r266
  Return       r0
