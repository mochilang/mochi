func main (regs=205)
  // let web = [
  Const        r0, [{"currency_rank": 1, "currency_ratio": 0.3, "item": "A", "return_rank": 1, "return_ratio": 0.2}, {"currency_rank": 2, "currency_ratio": 0.6, "item": "B", "return_rank": 2, "return_ratio": 0.5}]
  // let catalog = [
  Const        r1, [{"currency_rank": 1, "currency_ratio": 0.4, "item": "A", "return_rank": 1, "return_ratio": 0.3}]
  // let store = [
  Const        r2, [{"currency_rank": 1, "currency_ratio": 0.35, "item": "A", "return_rank": 1, "return_ratio": 0.25}]
  // let dummy = null
  Const        r3, nil
  // from w in web
  Const        r4, []
  // where w.return_rank <= 10 || w.currency_rank <= 10
  Const        r5, "return_rank"
  Const        r6, "currency_rank"
  // select { channel: "web", item: w.item, return_ratio: w.return_ratio, return_rank: w.return_rank, currency_rank: w.currency_rank },
  Const        r7, "channel"
  Const        r8, "item"
  Const        r9, "item"
  Const        r10, "return_ratio"
  Const        r11, "return_ratio"
  Const        r12, "return_rank"
  Const        r13, "return_rank"
  Const        r14, "currency_rank"
  Const        r15, "currency_rank"
  // from w in web
  IterPrep     r16, r0
  Len          r17, r16
  Const        r18, 0
L3:
  LessInt      r20, r18, r17
  JumpIfFalse  r20, L0
  Index        r22, r16, r18
  // where w.return_rank <= 10 || w.currency_rank <= 10
  Const        r23, "return_rank"
  Index        r24, r22, r23
  Const        r25, 10
  LessEq       r26, r24, r25
  Const        r27, "currency_rank"
  Index        r28, r22, r27
  Const        r29, 10
  LessEq       r30, r28, r29
  Move         r31, r26
  JumpIfTrue   r31, L1
  Move         r31, r30
L1:
  JumpIfFalse  r31, L2
  // select { channel: "web", item: w.item, return_ratio: w.return_ratio, return_rank: w.return_rank, currency_rank: w.currency_rank },
  Const        r32, "channel"
  Const        r33, "web"
  Const        r34, "item"
  Const        r35, "item"
  Index        r36, r22, r35
  Const        r37, "return_ratio"
  Const        r38, "return_ratio"
  Index        r39, r22, r38
  Const        r40, "return_rank"
  Const        r41, "return_rank"
  Index        r42, r22, r41
  Const        r43, "currency_rank"
  Const        r44, "currency_rank"
  Index        r45, r22, r44
  Move         r46, r32
  Move         r47, r33
  Move         r48, r34
  Move         r49, r36
  Move         r50, r37
  Move         r51, r39
  Move         r52, r40
  Move         r53, r42
  Move         r54, r43
  Move         r55, r45
  MakeMap      r56, 5, r46
  // from w in web
  Append       r4, r4, r56
L2:
  Const        r58, 1
  AddInt       r18, r18, r58
  Jump         L3
L0:
  // from c in catalog
  Const        r59, []
  // where c.return_rank <= 10 || c.currency_rank <= 10
  Const        r60, "return_rank"
  Const        r61, "currency_rank"
  // select { channel: "catalog", item: c.item, return_ratio: c.return_ratio, return_rank: c.return_rank, currency_rank: c.currency_rank },
  Const        r62, "channel"
  Const        r63, "item"
  Const        r64, "item"
  Const        r65, "return_ratio"
  Const        r66, "return_ratio"
  Const        r67, "return_rank"
  Const        r68, "return_rank"
  Const        r69, "currency_rank"
  Const        r70, "currency_rank"
  // from c in catalog
  IterPrep     r71, r1
  Len          r72, r71
  Const        r73, 0
L7:
  LessInt      r75, r73, r72
  JumpIfFalse  r75, L4
  Index        r77, r71, r73
  // where c.return_rank <= 10 || c.currency_rank <= 10
  Const        r78, "return_rank"
  Index        r79, r77, r78
  Const        r80, 10
  LessEq       r81, r79, r80
  Const        r82, "currency_rank"
  Index        r83, r77, r82
  Const        r84, 10
  LessEq       r85, r83, r84
  Move         r86, r81
  JumpIfTrue   r86, L5
  Move         r86, r85
L5:
  JumpIfFalse  r86, L6
  // select { channel: "catalog", item: c.item, return_ratio: c.return_ratio, return_rank: c.return_rank, currency_rank: c.currency_rank },
  Const        r87, "channel"
  Const        r88, "catalog"
  Const        r89, "item"
  Const        r90, "item"
  Index        r91, r77, r90
  Const        r92, "return_ratio"
  Const        r93, "return_ratio"
  Index        r94, r77, r93
  Const        r95, "return_rank"
  Const        r96, "return_rank"
  Index        r97, r77, r96
  Const        r98, "currency_rank"
  Const        r99, "currency_rank"
  Index        r100, r77, r99
  Move         r101, r87
  Move         r102, r88
  Move         r103, r89
  Move         r104, r91
  Move         r105, r92
  Move         r106, r94
  Move         r107, r95
  Move         r108, r97
  Move         r109, r98
  Move         r110, r100
  MakeMap      r111, 5, r101
  // from c in catalog
  Append       r59, r59, r111
L6:
  Const        r113, 1
  AddInt       r73, r73, r113
  Jump         L7
L4:
  // concat(
  UnionAll     r114, r4, r59
  // from s in store
  Const        r115, []
  // where s.return_rank <= 10 || s.currency_rank <= 10
  Const        r116, "return_rank"
  Const        r117, "currency_rank"
  // select { channel: "store", item: s.item, return_ratio: s.return_ratio, return_rank: s.return_rank, currency_rank: s.currency_rank }
  Const        r118, "channel"
  Const        r119, "item"
  Const        r120, "item"
  Const        r121, "return_ratio"
  Const        r122, "return_ratio"
  Const        r123, "return_rank"
  Const        r124, "return_rank"
  Const        r125, "currency_rank"
  Const        r126, "currency_rank"
  // from s in store
  IterPrep     r127, r2
  Len          r128, r127
  Const        r129, 0
L11:
  LessInt      r131, r129, r128
  JumpIfFalse  r131, L8
  Index        r133, r127, r129
  // where s.return_rank <= 10 || s.currency_rank <= 10
  Const        r134, "return_rank"
  Index        r135, r133, r134
  Const        r136, 10
  LessEq       r137, r135, r136
  Const        r138, "currency_rank"
  Index        r139, r133, r138
  Const        r140, 10
  LessEq       r141, r139, r140
  Move         r142, r137
  JumpIfTrue   r142, L9
  Move         r142, r141
L9:
  JumpIfFalse  r142, L10
  // select { channel: "store", item: s.item, return_ratio: s.return_ratio, return_rank: s.return_rank, currency_rank: s.currency_rank }
  Const        r143, "channel"
  Const        r144, "store"
  Const        r145, "item"
  Const        r146, "item"
  Index        r147, r133, r146
  Const        r148, "return_ratio"
  Const        r149, "return_ratio"
  Index        r150, r133, r149
  Const        r151, "return_rank"
  Const        r152, "return_rank"
  Index        r153, r133, r152
  Const        r154, "currency_rank"
  Const        r155, "currency_rank"
  Index        r156, r133, r155
  Move         r157, r143
  Move         r158, r144
  Move         r159, r145
  Move         r160, r147
  Move         r161, r148
  Move         r162, r150
  Move         r163, r151
  Move         r164, r153
  Move         r165, r154
  Move         r166, r156
  MakeMap      r167, 5, r157
  // from s in store
  Append       r115, r115, r167
L10:
  Const        r169, 1
  AddInt       r129, r129, r169
  Jump         L11
L8:
  // concat(
  UnionAll     r170, r114, r115
  // from r in tmp
  Const        r171, []
  // sort by [r.channel, r.return_rank, r.currency_rank, r.item]
  Const        r172, "channel"
  Const        r173, "return_rank"
  Const        r174, "currency_rank"
  Const        r175, "item"
  // from r in tmp
  IterPrep     r176, r170
  Len          r177, r176
  Const        r178, 0
L13:
  LessInt      r180, r178, r177
  JumpIfFalse  r180, L12
  Index        r182, r176, r178
  // sort by [r.channel, r.return_rank, r.currency_rank, r.item]
  Const        r183, "channel"
  Index        r185, r182, r183
  Const        r186, "return_rank"
  Index        r187, r182, r186
  Move         r188, r187
  Const        r189, "currency_rank"
  Index        r191, r182, r189
  Const        r192, "item"
  Index        r194, r182, r192
  MakeList     r196, 4, r185
  // from r in tmp
  Move         r197, r182
  MakeList     r198, 2, r196
  Append       r171, r171, r198
  Const        r200, 1
  AddInt       r178, r178, r200
  Jump         L13
L12:
  // sort by [r.channel, r.return_rank, r.currency_rank, r.item]
  Sort         r171, r171
  // let result = concat(dummy, base)
  UnionAll     r202, r3, r171
  // json(result)
  JSON         r202
  // expect result == [
  Const        r203, [{"channel": "catalog", "currency_rank": 1, "item": "A", "return_rank": 1, "return_ratio": 0.3}, {"channel": "store", "currency_rank": 1, "item": "A", "return_rank": 1, "return_ratio": 0.25}, {"channel": "web", "currency_rank": 1, "item": "A", "return_rank": 1, "return_ratio": 0.2}, {"channel": "web", "currency_rank": 2, "item": "B", "return_rank": 2, "return_ratio": 0.5}]
  Equal        r204, r202, r203
  Expect       r204
  Return       r0
