func main (regs=135)
  // let web = [
  Const        r0, [{"currency_rank": 1, "currency_ratio": 0.3, "item": "A", "return_rank": 1, "return_ratio": 0.2}, {"currency_rank": 2, "currency_ratio": 0.6, "item": "B", "return_rank": 2, "return_ratio": 0.5}]
  // let catalog = [
  Const        r1, [{"currency_rank": 1, "currency_ratio": 0.4, "item": "A", "return_rank": 1, "return_ratio": 0.3}]
  // let store = [
  Const        r2, [{"currency_rank": 1, "currency_ratio": 0.35, "item": "A", "return_rank": 1, "return_ratio": 0.25}]
  // from w in web
  Const        r3, []
  // where w.return_rank <= 10 || w.currency_rank <= 10
  Const        r4, "return_rank"
  Const        r5, "currency_rank"
  // select { channel: "web", item: w.item, return_ratio: w.return_ratio, return_rank: w.return_rank, currency_rank: w.currency_rank },
  Const        r6, "channel"
  Const        r7, "item"
  Const        r8, "return_ratio"
  // from w in web
  IterPrep     r9, r0
  Len          r10, r9
  Const        r12, 0
  Move         r11, r12
L3:
  LessInt      r13, r11, r10
  JumpIfFalse  r13, L0
  Index        r15, r9, r11
  // where w.return_rank <= 10 || w.currency_rank <= 10
  Index        r16, r15, r4
  Const        r17, 10
  LessEq       r18, r16, r17
  Index        r19, r15, r5
  LessEq       r20, r19, r17
  JumpIfTrue   r18, L1
  Move         r18, r20
L1:
  JumpIfFalse  r18, L2
  // select { channel: "web", item: w.item, return_ratio: w.return_ratio, return_rank: w.return_rank, currency_rank: w.currency_rank },
  Const        r21, "channel"
  Const        r22, "web"
  Const        r23, "item"
  Index        r24, r15, r7
  Const        r25, "return_ratio"
  Index        r26, r15, r8
  Const        r27, "return_rank"
  Index        r28, r15, r4
  Const        r29, "currency_rank"
  Index        r30, r15, r5
  Move         r31, r21
  Move         r32, r22
  Move         r33, r23
  Move         r34, r24
  Move         r35, r25
  Move         r36, r26
  Move         r37, r27
  Move         r38, r28
  Move         r39, r29
  Move         r40, r30
  MakeMap      r41, 5, r31
  // from w in web
  Append       r3, r3, r41
L2:
  Const        r43, 1
  AddInt       r11, r11, r43
  Jump         L3
L0:
  // from c in catalog
  Const        r44, []
  IterPrep     r45, r1
  Len          r46, r45
  Move         r47, r12
L7:
  LessInt      r48, r47, r46
  JumpIfFalse  r48, L4
  Index        r50, r45, r47
  // where c.return_rank <= 10 || c.currency_rank <= 10
  Index        r51, r50, r4
  LessEq       r52, r51, r17
  Index        r53, r50, r5
  LessEq       r54, r53, r17
  JumpIfTrue   r52, L5
  Move         r52, r54
L5:
  JumpIfFalse  r52, L6
  // select { channel: "catalog", item: c.item, return_ratio: c.return_ratio, return_rank: c.return_rank, currency_rank: c.currency_rank },
  Const        r55, "channel"
  Const        r56, "catalog"
  Const        r57, "item"
  Index        r58, r50, r7
  Const        r59, "return_ratio"
  Index        r60, r50, r8
  Const        r61, "return_rank"
  Index        r62, r50, r4
  Const        r63, "currency_rank"
  Index        r64, r50, r5
  Move         r65, r55
  Move         r66, r56
  Move         r67, r57
  Move         r68, r58
  Move         r69, r59
  Move         r70, r60
  Move         r71, r61
  Move         r72, r62
  Move         r73, r63
  Move         r74, r64
  MakeMap      r75, 5, r65
  // from c in catalog
  Append       r44, r44, r75
L6:
  AddInt       r47, r47, r43
  Jump         L7
L4:
  // concat(
  UnionAll     r77, r3, r44
  // from s in store
  Const        r78, []
  IterPrep     r79, r2
  Len          r80, r79
  Move         r81, r12
L11:
  LessInt      r82, r81, r80
  JumpIfFalse  r82, L8
  Index        r84, r79, r81
  // where s.return_rank <= 10 || s.currency_rank <= 10
  Index        r85, r84, r4
  LessEq       r86, r85, r17
  Index        r87, r84, r5
  LessEq       r88, r87, r17
  JumpIfTrue   r86, L9
  Move         r86, r88
L9:
  JumpIfFalse  r86, L10
  // select { channel: "store", item: s.item, return_ratio: s.return_ratio, return_rank: s.return_rank, currency_rank: s.currency_rank }
  Const        r89, "channel"
  Const        r90, "store"
  Const        r91, "item"
  Index        r92, r84, r7
  Const        r93, "return_ratio"
  Index        r94, r84, r8
  Const        r95, "return_rank"
  Index        r96, r84, r4
  Const        r97, "currency_rank"
  Index        r98, r84, r5
  Move         r99, r89
  Move         r100, r90
  Move         r101, r91
  Move         r102, r92
  Move         r103, r93
  Move         r104, r94
  Move         r105, r95
  Move         r106, r96
  Move         r107, r97
  Move         r108, r98
  MakeMap      r109, 5, r99
  // from s in store
  Append       r78, r78, r109
L10:
  AddInt       r81, r81, r43
  Jump         L11
L8:
  // concat(
  UnionAll     r111, r77, r78
  // from r in tmp
  Const        r112, []
  IterPrep     r113, r111
  Len          r114, r113
  Move         r115, r12
L13:
  LessInt      r116, r115, r114
  JumpIfFalse  r116, L12
  Index        r118, r113, r115
  // sort by [r.channel, r.return_rank, r.currency_rank, r.item]
  Index        r120, r118, r6
  Index        r121, r118, r4
  Move         r122, r121
  Index        r123, r118, r5
  Move         r124, r123
  Index        r126, r118, r7
  MakeList     r128, 4, r120
  // from r in tmp
  Move         r129, r118
  MakeList     r130, 2, r128
  Append       r112, r112, r130
  AddInt       r115, r115, r43
  Jump         L13
L12:
  // sort by [r.channel, r.return_rank, r.currency_rank, r.item]
  Sort         r112, r112
  // json(result)
  JSON         r112
  // expect result == [
  Const        r133, [{"channel": "catalog", "currency_rank": 1, "item": "A", "return_rank": 1, "return_ratio": 0.3}, {"channel": "store", "currency_rank": 1, "item": "A", "return_rank": 1, "return_ratio": 0.25}, {"channel": "web", "currency_rank": 1, "item": "A", "return_rank": 1, "return_ratio": 0.2}, {"channel": "web", "currency_rank": 2, "item": "B", "return_rank": 2, "return_ratio": 0.5}]
  Equal        r134, r112, r133
  Expect       r134
  Return       r0
