func main (regs=209)
  // let store_sales = [
  Const        r0, [{"customer": 1, "price": 60.0, "sold_date": 2}, {"customer": 2, "price": 40.0, "sold_date": 2}]
  // let date_dim = [ {d_date_sk: 2, d_month_seq: 5} ]
  Const        r1, [{"d_date_sk": 2, "d_month_seq": 5}]
  // let customer = [ {c_customer_sk: 1, c_current_addr_sk: 1}, {c_customer_sk: 2, c_current_addr_sk: 1} ]
  Const        r2, [{"c_current_addr_sk": 1, "c_customer_sk": 1}, {"c_current_addr_sk": 1, "c_customer_sk": 2}]
  // let customer_address = [ {ca_address_sk: 1, ca_county: "X", ca_state: "Y"} ]
  Const        r3, [{"ca_address_sk": 1, "ca_county": "X", "ca_state": "Y"}]
  // let store = [ {s_store_sk: 1, s_county: "X", s_state: "Y"} ]
  Const        r4, [{"s_county": "X", "s_state": "Y", "s_store_sk": 1}]
  // from ss in store_sales
  Const        r5, []
  // select {customer: c.c_customer_sk, amt: ss.price}
  Const        r6, "customer"
  Const        r7, "c_customer_sk"
  Const        r8, "amt"
  Const        r9, "price"
  // from ss in store_sales
  IterPrep     r10, r0
  Len          r11, r10
  Const        r13, 0
  Move         r12, r13
L1:
  LessInt      r14, r12, r11
  JumpIfFalse  r14, L0
  Index        r15, r10, r12
  Move         r16, r15
  // join d in date_dim on ss.sold_date == d.d_date_sk
  IterPrep     r17, r1
  Len          r18, r17
  Const        r19, "sold_date"
  Const        r20, "d_date_sk"
  // select {customer: c.c_customer_sk, amt: ss.price}
  Const        r6, "customer"
  Const        r7, "c_customer_sk"
  Const        r8, "amt"
  Const        r9, "price"
  // join d in date_dim on ss.sold_date == d.d_date_sk
  Const        r13, 0
  Move         r21, r13
L2:
  LessInt      r22, r21, r18
  JumpIfFalse  r22, L1
  Index        r23, r17, r21
  Move         r24, r23
  Const        r19, "sold_date"
  Index        r25, r16, r19
  Const        r20, "d_date_sk"
  Index        r26, r24, r20
  Equal        r27, r25, r26
  JumpIfFalse  r27, L2
  // join c in customer on ss.customer == c.c_customer_sk
  IterPrep     r28, r2
  Len          r29, r28
  Const        r6, "customer"
  Const        r7, "c_customer_sk"
  // select {customer: c.c_customer_sk, amt: ss.price}
  Const        r8, "amt"
  Const        r9, "price"
  // join c in customer on ss.customer == c.c_customer_sk
  Const        r13, 0
  Move         r30, r13
  LessInt      r31, r30, r29
  JumpIfFalse  r31, L2
L3:
  Index        r32, r28, r30
  Move         r33, r32
  Const        r6, "customer"
  Index        r34, r16, r6
  Const        r7, "c_customer_sk"
  Index        r35, r33, r7
  Equal        r36, r34, r35
  JumpIfFalse  r36, L3
  // join ca in customer_address on c.c_current_addr_sk == ca.ca_address_sk && ca.ca_county == "X" && ca.ca_state == "Y"
  IterPrep     r37, r3
  Len          r38, r37
  Const        r39, "c_current_addr_sk"
  Const        r40, "ca_address_sk"
  Const        r41, "ca_county"
  Const        r42, "ca_state"
  // select {customer: c.c_customer_sk, amt: ss.price}
  Const        r6, "customer"
  Const        r7, "c_customer_sk"
  Const        r8, "amt"
  Const        r9, "price"
  // join ca in customer_address on c.c_current_addr_sk == ca.ca_address_sk && ca.ca_county == "X" && ca.ca_state == "Y"
  Const        r13, 0
  Move         r43, r13
  LessInt      r44, r43, r38
  JumpIfFalse  r44, L3
L5:
  Index        r45, r37, r43
  Move         r46, r45
  Const        r39, "c_current_addr_sk"
  Index        r47, r33, r39
  Const        r40, "ca_address_sk"
  Index        r48, r46, r40
  Equal        r49, r47, r48
  Const        r41, "ca_county"
  Index        r50, r46, r41
  Const        r51, "X"
  Equal        r52, r50, r51
  Const        r42, "ca_state"
  Index        r53, r46, r42
  Const        r54, "Y"
  Equal        r55, r53, r54
  Move         r56, r49
  JumpIfFalse  r56, L4
  Move         r56, r52
  JumpIfFalse  r56, L4
  Move         r56, r55
  JumpIfFalse  r56, L5
  // join s in store on 1 == s.s_store_sk && ca.ca_county == s.s_county && ca.ca_state == s.s_state
  IterPrep     r57, r4
L4:
  Len          r58, r57
  Const        r59, "s_store_sk"
  Const        r41, "ca_county"
  Const        r60, "s_county"
  Const        r42, "ca_state"
  Const        r61, "s_state"
  // select {customer: c.c_customer_sk, amt: ss.price}
  Const        r6, "customer"
  Const        r7, "c_customer_sk"
  Const        r8, "amt"
  Const        r9, "price"
  // join s in store on 1 == s.s_store_sk && ca.ca_county == s.s_county && ca.ca_state == s.s_state
  Const        r13, 0
  Move         r62, r13
  LessInt      r63, r62, r58
  JumpIfFalse  r63, L5
L7:
  Index        r64, r57, r62
  Move         r65, r64
  Const        r66, 1
  Const        r59, "s_store_sk"
  Index        r67, r65, r59
  Equal        r68, r66, r67
  Const        r41, "ca_county"
  Index        r69, r46, r41
  Const        r60, "s_county"
  Index        r70, r65, r60
  Equal        r71, r69, r70
  Const        r42, "ca_state"
  Index        r72, r46, r42
  Const        r61, "s_state"
  Index        r73, r65, r61
  Equal        r74, r72, r73
  Move         r75, r68
  JumpIfFalse  r75, L6
  Move         r75, r71
  JumpIfFalse  r75, L6
  Move         r75, r74
  JumpIfFalse  r75, L7
  // select {customer: c.c_customer_sk, amt: ss.price}
  Const        r76, "customer"
L6:
  Const        r7, "c_customer_sk"
  Index        r77, r33, r7
  Const        r78, "amt"
  Const        r9, "price"
  Index        r79, r16, r9
  Move         r80, r76
  Move         r81, r77
  Move         r82, r78
  Move         r83, r79
  MakeMap      r84, 2, r80
  // from ss in store_sales
  Append       r85, r5, r84
  Move         r5, r85
  // join s in store on 1 == s.s_store_sk && ca.ca_county == s.s_county && ca.ca_state == s.s_state
  Const        r66, 1
  Add          r62, r62, r66
  Jump         L7
L0:
  // select {customer: g.key, revenue: sum(from x in g select x.amt)}
  Const        r87, "key"
  Const        r88, "revenue"
  Const        r8, "amt"
  // from r in revenue
  IterPrep     r89, r5
  Len          r90, r89
  Const        r91, 0
  MakeMap      r92, 0, r0
  Const        r94, []
  Move         r93, r94
  LessInt      r95, r91, r90
  JumpIfFalse  r95, L8
  Index        r96, r89, r91
L10:
  Move         r97, r96
  // group by r.customer into g
  Const        r6, "customer"
  Index        r98, r97, r6
  Str          r99, r98
  In           r100, r99, r92
  JumpIfTrue   r100, L9
  // from r in revenue
  Const        r94, []
  Const        r101, "__group__"
  Const        r102, true
  Const        r87, "key"
  // group by r.customer into g
  Move         r103, r98
  // from r in revenue
  Const        r104, "items"
  Move         r105, r94
  Const        r106, "count"
  Const        r13, 0
  Move         r107, r101
  Move         r108, r102
  Move         r109, r87
  Move         r110, r103
  Move         r111, r104
  Move         r112, r105
  Move         r113, r106
  Move         r114, r13
  MakeMap      r115, 4, r107
  SetIndex     r92, r99, r115
  Append       r116, r93, r115
  Move         r93, r116
  Index        r117, r92, r99
  Index        r118, r117, r104
  Append       r119, r118, r96
L9:
  SetIndex     r117, r104, r119
  Index        r120, r117, r106
  Const        r66, 1
  AddInt       r121, r120, r66
  SetIndex     r117, r106, r121
  AddInt       r91, r91, r66
  Jump         L10
L8:
  Move         r126, r125
  // select {customer: g.key, revenue: sum(from x in g select x.amt)}
  Const        r127, "customer"
  Const        r87, "key"
L13:
  Index        r128, r126, r87
  Const        r129, "revenue"
  Const        r130, []
  Const        r8, "amt"
  IterPrep     r131, r126
  Len          r132, r131
  Const        r13, 0
  Move         r133, r13
  LessInt      r134, r133, r132
  JumpIfFalse  r134, L11
  Index        r135, r131, r133
  Move         r136, r135
  Const        r8, "amt"
  Index        r137, r136, r8
L12:
  Append       r138, r130, r137
  Move         r130, r138
  Const        r66, 1
  AddInt       r133, r133, r66
  Jump         L12
L11:
  // from r in revenue
  Append       r145, r86, r144
  Move         r86, r145
  Const        r66, 1
  AddInt       r122, r122, r66
  Jump         L13

  // fun int(x: float): int {
func int (regs=2)
  // return x as int
  Cast         r1, r0, int
  Return       r1
