func main (regs=70)
  // let item = [
  Const        r0, [{"category": "Women", "color": "blue", "manufact": 1, "manufact_id": 100, "product_name": "Blue Shirt", "size": "M", "units": "pack"}, {"category": "Women", "color": "red", "manufact": 1, "manufact_id": 120, "product_name": "Red Dress", "size": "M", "units": "pack"}, {"category": "Men", "color": "black", "manufact": 2, "manufact_id": 200, "product_name": "Pants", "size": "L", "units": "pair"}]
  // let lower = 100
  Const        r1, 100
  // let dummy = null
  Const        r2, nil
  // from i1 in item
  Const        r3, []
  // where i1.manufact_id >= lower && i1.manufact_id <= lower + 40 &&
  Const        r4, "manufact_id"
  Const        r5, "manufact_id"
  // count(from i2 in item where i2.manufact == i1.manufact && i2.category == i1.category select i2) > 1
  Const        r6, "manufact"
  Const        r7, "manufact"
  Const        r8, "category"
  Const        r9, "category"
  // select i1.product_name
  Const        r10, "product_name"
  // order by i1.product_name
  Const        r11, "product_name"
  // from i1 in item
  IterPrep     r12, r0
  Len          r13, r12
  Const        r14, 0
L8:
  LessInt      r16, r14, r13
  JumpIfFalse  r16, L0
  Index        r18, r12, r14
  // where i1.manufact_id >= lower && i1.manufact_id <= lower + 40 &&
  Const        r19, "manufact_id"
  Index        r20, r18, r19
  Const        r21, 40
  Const        r22, 140
  LessEq       r23, r1, r20
  Const        r24, "manufact_id"
  Index        r25, r18, r24
  LessEq       r26, r25, r22
  // count(from i2 in item where i2.manufact == i1.manufact && i2.category == i1.category select i2) > 1
  Const        r27, []
  Const        r28, "manufact"
  Const        r29, "manufact"
  Const        r30, "category"
  Const        r31, "category"
  IterPrep     r32, r0
  Len          r33, r32
  Const        r34, 0
L4:
  LessInt      r36, r34, r33
  JumpIfFalse  r36, L1
  Index        r38, r32, r34
  Const        r39, "manufact"
  Index        r40, r38, r39
  Const        r41, "manufact"
  Index        r42, r18, r41
  Equal        r43, r40, r42
  Const        r44, "category"
  Index        r45, r38, r44
  Const        r46, "category"
  Index        r47, r18, r46
  Equal        r48, r45, r47
  Move         r49, r43
  JumpIfFalse  r49, L2
  Move         r49, r48
L2:
  JumpIfFalse  r49, L3
  Append       r27, r27, r38
L3:
  Const        r51, 1
  AddInt       r34, r34, r51
  Jump         L4
L1:
  Count        r52, r27
  Const        r53, 1
  LessInt      r54, r53, r52
  // where i1.manufact_id >= lower && i1.manufact_id <= lower + 40 &&
  Move         r55, r23
  JumpIfFalse  r55, L5
L5:
  Move         r56, r26
  JumpIfFalse  r56, L6
  Move         r56, r54
L6:
  JumpIfFalse  r56, L7
  // select i1.product_name
  Const        r57, "product_name"
  Index        r58, r18, r57
  // order by i1.product_name
  Const        r59, "product_name"
  Index        r61, r18, r59
  // from i1 in item
  Move         r62, r58
  MakeList     r63, 2, r61
  Append       r3, r3, r63
L7:
  Const        r65, 1
  AddInt       r14, r14, r65
  Jump         L8
L0:
  // order by i1.product_name
  Sort         r3, r3
  // let result = concat(dummy, base)
  UnionAll     r67, r2, r3
  // json(result)
  JSON         r67
  // expect result == ["Blue Shirt", "Red Dress"]
  Const        r68, ["Blue Shirt", "Red Dress"]
  Equal        r69, r67, r68
  Expect       r69
  Return       r0
