func main (regs=607)
  // let customer = []
  Const        r0, []
  // from c in customer
  Const        r1, []
  // group by {id: c.c_customer_id, first: c.c_first_name, last: c.c_last_name, login: c.c_login, year: d.d_year} into g
  Const        r2, "id"
  Const        r3, "c_customer_id"
  Const        r4, "first"
  Const        r5, "c_first_name"
  Const        r6, "last"
  Const        r7, "c_last_name"
  Const        r8, "login"
  Const        r9, "c_login"
  Const        r10, "year"
  Const        r11, "d_year"
  // customer_id: g.key.id,
  Const        r12, "customer_id"
  Const        r13, "key"
  // customer_first_name: g.key.first,
  Const        r14, "customer_first_name"
  // customer_last_name: g.key.last,
  Const        r15, "customer_last_name"
  // customer_login: g.key.login,
  Const        r16, "customer_login"
  // dyear: g.key.year,
  Const        r17, "dyear"
  // year_total: sum(from x in g select ((x.ss_ext_list_price - x.ss_ext_wholesale_cost - x.ss_ext_discount_amt) + x.ss_ext_sales_price) / 2),
  Const        r18, "year_total"
  Const        r19, "ss_ext_list_price"
  Const        r20, "ss_ext_wholesale_cost"
  Const        r21, "ss_ext_discount_amt"
  Const        r22, "ss_ext_sales_price"
  // sale_type: "s",
  Const        r23, "sale_type"
  // from c in customer
  MakeMap      r24, 0, r0
  Const        r26, []
  Move         r25, r26
  IterPrep     r27, r0
  Len          r28, r27
  Const        r29, 0
L7:
  LessInt      r30, r29, r28
  JumpIfFalse  r30, L0
  Index        r31, r27, r29
  Move         r32, r31
  // join s in store_sales on c.c_customer_sk == s.ss_customer_sk
  IterPrep     r33, r0
  Len          r34, r33
  Const        r35, 0
L6:
  LessInt      r36, r35, r34
  JumpIfFalse  r36, L1
  Index        r37, r33, r35
  Move         r38, r37
  Const        r39, "c_customer_sk"
  Index        r40, r32, r39
  Const        r41, "ss_customer_sk"
  Index        r42, r38, r41
  Equal        r43, r40, r42
  JumpIfFalse  r43, L2
  // join d in date_dim on s.ss_sold_date_sk == d.d_date_sk
  IterPrep     r44, r0
  Len          r45, r44
  Const        r46, 0
L5:
  LessInt      r47, r46, r45
  JumpIfFalse  r47, L2
  Index        r48, r44, r46
  Move         r49, r48
  Const        r50, "ss_sold_date_sk"
  Index        r51, r38, r50
  Const        r52, "d_date_sk"
  Index        r53, r49, r52
  Equal        r54, r51, r53
  JumpIfFalse  r54, L3
  // from c in customer
  Const        r55, "c"
  Move         r56, r32
  Const        r57, "s"
  Move         r58, r38
  Const        r59, "d"
  Move         r60, r49
  Move         r61, r55
  Move         r62, r56
  Move         r63, r57
  Move         r64, r58
  Move         r65, r59
  Move         r66, r60
  MakeMap      r67, 3, r61
  // group by {id: c.c_customer_id, first: c.c_first_name, last: c.c_last_name, login: c.c_login, year: d.d_year} into g
  Const        r68, "id"
  Index        r69, r32, r3
  Const        r70, "first"
  Index        r71, r32, r5
  Const        r72, "last"
  Index        r73, r32, r7
  Const        r74, "login"
  Index        r75, r32, r9
  Const        r76, "year"
  Index        r77, r49, r11
  Move         r78, r68
  Move         r79, r69
  Move         r80, r70
  Move         r81, r71
  Move         r82, r72
  Move         r83, r73
  Move         r84, r74
  Move         r85, r75
  Move         r86, r76
  Move         r87, r77
  MakeMap      r88, 5, r78
  Str          r89, r88
  In           r90, r89, r24
  JumpIfTrue   r90, L4
  // from c in customer
  Const        r91, "__group__"
  Const        r92, true
  // group by {id: c.c_customer_id, first: c.c_first_name, last: c.c_last_name, login: c.c_login, year: d.d_year} into g
  Move         r93, r88
  // from c in customer
  Const        r94, "items"
  Move         r95, r0
  Const        r96, "count"
  Const        r97, 0
  Move         r98, r91
  Move         r99, r92
  Move         r100, r13
  Move         r101, r93
  Move         r102, r94
  Move         r103, r95
  Move         r104, r96
  Move         r105, r97
  MakeMap      r106, 4, r98
  SetIndex     r24, r89, r106
  Append       r107, r25, r106
  Move         r25, r107
L4:
  Index        r108, r24, r89
  Index        r109, r108, r94
  Append       r110, r109, r67
  SetIndex     r108, r94, r110
  Index        r111, r108, r96
  Const        r112, 1
  AddInt       r113, r111, r112
  SetIndex     r108, r96, r113
L3:
  // join d in date_dim on s.ss_sold_date_sk == d.d_date_sk
  AddInt       r46, r46, r112
  Jump         L5
L2:
  // join s in store_sales on c.c_customer_sk == s.ss_customer_sk
  AddInt       r35, r35, r112
  Jump         L6
L1:
  // from c in customer
  AddInt       r29, r29, r112
  Jump         L7
L0:
  Move         r114, r97
  Len          r115, r25
L11:
  LessInt      r116, r114, r115
  JumpIfFalse  r116, L8
  Index        r117, r25, r114
  Move         r118, r117
  // customer_id: g.key.id,
  Const        r119, "customer_id"
  Index        r120, r118, r13
  Index        r121, r120, r2
  // customer_first_name: g.key.first,
  Const        r122, "customer_first_name"
  Index        r123, r118, r13
  Index        r124, r123, r4
  // customer_last_name: g.key.last,
  Const        r125, "customer_last_name"
  Index        r126, r118, r13
  Index        r127, r126, r6
  // customer_login: g.key.login,
  Const        r128, "customer_login"
  Index        r129, r118, r13
  Index        r130, r129, r8
  // dyear: g.key.year,
  Const        r131, "dyear"
  Index        r132, r118, r13
  Index        r133, r132, r10
  // year_total: sum(from x in g select ((x.ss_ext_list_price - x.ss_ext_wholesale_cost - x.ss_ext_discount_amt) + x.ss_ext_sales_price) / 2),
  Const        r134, "year_total"
  Const        r135, []
  IterPrep     r136, r118
  Len          r137, r136
  Move         r138, r97
L10:
  LessInt      r139, r138, r137
  JumpIfFalse  r139, L9
  Index        r140, r136, r138
  Move         r141, r140
  Index        r142, r141, r19
  Index        r143, r141, r20
  Sub          r144, r142, r143
  Index        r145, r141, r21
  Sub          r146, r144, r145
  Index        r147, r141, r22
  Add          r148, r146, r147
  Const        r149, 2
  Div          r150, r148, r149
  Append       r151, r135, r150
  Move         r135, r151
  AddInt       r138, r138, r112
  Jump         L10
L9:
  Sum          r152, r135
  // sale_type: "s",
  Const        r153, "sale_type"
  // customer_id: g.key.id,
  Move         r154, r119
  Move         r155, r121
  // customer_first_name: g.key.first,
  Move         r156, r122
  Move         r157, r124
  // customer_last_name: g.key.last,
  Move         r158, r125
  Move         r159, r127
  // customer_login: g.key.login,
  Move         r160, r128
  Move         r161, r130
  // dyear: g.key.year,
  Move         r162, r131
  Move         r163, r133
  // year_total: sum(from x in g select ((x.ss_ext_list_price - x.ss_ext_wholesale_cost - x.ss_ext_discount_amt) + x.ss_ext_sales_price) / 2),
  Move         r164, r134
  Move         r165, r152
  // sale_type: "s",
  Move         r166, r153
  Move         r167, r57
  // select {
  MakeMap      r168, 7, r154
  // from c in customer
  Append       r169, r1, r168
  Move         r1, r169
  AddInt       r114, r114, r112
  Jump         L11
L8:
  // from c in customer
  Const        r170, []
  // year_total: sum(from x in g select ((x.cs_ext_list_price - x.cs_ext_wholesale_cost - x.cs_ext_discount_amt) + x.cs_ext_sales_price) / 2),
  Const        r171, "cs_ext_list_price"
  Const        r172, "cs_ext_wholesale_cost"
  Const        r173, "cs_ext_discount_amt"
  Const        r174, "cs_ext_sales_price"
  // from c in customer
  MakeMap      r175, 0, r0
  Const        r177, []
  Move         r176, r177
  IterPrep     r178, r0
  Len          r179, r178
  Const        r180, 0
L19:
  LessInt      r181, r180, r179
  JumpIfFalse  r181, L12
  Index        r182, r178, r180
  Move         r32, r182
  // join cs in catalog_sales on c.c_customer_sk == cs.cs_bill_customer_sk
  IterPrep     r183, r0
  Len          r184, r183
  Const        r185, 0
L18:
  LessInt      r186, r185, r184
  JumpIfFalse  r186, L13
  Index        r187, r183, r185
  Move         r188, r187
  Index        r189, r32, r39
  Const        r190, "cs_bill_customer_sk"
  Index        r191, r188, r190
  Equal        r192, r189, r191
  JumpIfFalse  r192, L14
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  IterPrep     r193, r0
  Len          r194, r193
  Const        r195, 0
L17:
  LessInt      r196, r195, r194
  JumpIfFalse  r196, L14
  Index        r197, r193, r195
  Move         r198, r197
  Const        r199, "cs_sold_date_sk"
  Index        r200, r188, r199
  Index        r201, r198, r52
  Equal        r202, r200, r201
  JumpIfFalse  r202, L15
  // from c in customer
  Move         r203, r32
  Const        r204, "cs"
  Move         r205, r188
  Move         r206, r198
  Move         r207, r55
  Move         r208, r203
  Move         r209, r204
  Move         r210, r205
  Move         r211, r59
  Move         r212, r206
  MakeMap      r213, 3, r207
  // group by {id: c.c_customer_id, first: c.c_first_name, last: c.c_last_name, login: c.c_login, year: d.d_year} into g
  Const        r214, "id"
  Index        r215, r32, r3
  Const        r216, "first"
  Index        r217, r32, r5
  Const        r218, "last"
  Index        r219, r32, r7
  Const        r220, "login"
  Index        r221, r32, r9
  Const        r222, "year"
  Index        r223, r198, r11
  Move         r224, r214
  Move         r225, r215
  Move         r226, r216
  Move         r227, r217
  Move         r228, r218
  Move         r229, r219
  Move         r230, r220
  Move         r231, r221
  Move         r232, r222
  Move         r233, r223
  MakeMap      r234, 5, r224
  Str          r235, r234
  In           r236, r235, r175
  JumpIfTrue   r236, L16
  Move         r237, r234
  // from c in customer
  Move         r238, r0
  Move         r239, r91
  Move         r240, r92
  Move         r241, r13
  Move         r242, r237
  Move         r243, r94
  Move         r244, r238
  Move         r245, r96
  Move         r246, r97
  MakeMap      r247, 4, r239
  SetIndex     r175, r235, r247
  Append       r248, r176, r247
  Move         r176, r248
L16:
  Index        r249, r175, r235
  Index        r250, r249, r94
  Append       r251, r250, r213
  SetIndex     r249, r94, r251
  Index        r252, r249, r96
  AddInt       r253, r252, r112
  SetIndex     r249, r96, r253
L15:
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  AddInt       r195, r195, r112
  Jump         L17
L14:
  // join cs in catalog_sales on c.c_customer_sk == cs.cs_bill_customer_sk
  AddInt       r185, r185, r112
  Jump         L18
L13:
  // from c in customer
  AddInt       r180, r180, r112
  Jump         L19
L12:
  Move         r254, r97
  Len          r255, r176
L23:
  LessInt      r256, r254, r255
  JumpIfFalse  r256, L20
  Index        r257, r176, r254
  Move         r118, r257
  // customer_id: g.key.id,
  Const        r258, "customer_id"
  Index        r259, r118, r13
  Index        r260, r259, r2
  // customer_first_name: g.key.first,
  Const        r261, "customer_first_name"
  Index        r262, r118, r13
  Index        r263, r262, r4
  // customer_last_name: g.key.last,
  Const        r264, "customer_last_name"
  Index        r265, r118, r13
  Index        r266, r265, r6
  // customer_login: g.key.login,
  Const        r267, "customer_login"
  Index        r268, r118, r13
  Index        r269, r268, r8
  // dyear: g.key.year,
  Const        r270, "dyear"
  Index        r271, r118, r13
  Index        r272, r271, r10
  // year_total: sum(from x in g select ((x.cs_ext_list_price - x.cs_ext_wholesale_cost - x.cs_ext_discount_amt) + x.cs_ext_sales_price) / 2),
  Const        r273, "year_total"
  Const        r274, []
  IterPrep     r275, r118
  Len          r276, r275
  Move         r277, r97
L22:
  LessInt      r278, r277, r276
  JumpIfFalse  r278, L21
  Index        r279, r275, r277
  Move         r141, r279
  Index        r280, r141, r171
  Index        r281, r141, r172
  Sub          r282, r280, r281
  Index        r283, r141, r173
  Sub          r284, r282, r283
  Index        r285, r141, r174
  Add          r286, r284, r285
  Div          r287, r286, r149
  Append       r288, r274, r287
  Move         r274, r288
  AddInt       r277, r277, r112
  Jump         L22
L21:
  Sum          r289, r274
  // sale_type: "c",
  Const        r290, "sale_type"
  // customer_id: g.key.id,
  Move         r291, r258
  Move         r292, r260
  // customer_first_name: g.key.first,
  Move         r293, r261
  Move         r294, r263
  // customer_last_name: g.key.last,
  Move         r295, r264
  Move         r296, r266
  // customer_login: g.key.login,
  Move         r297, r267
  Move         r298, r269
  // dyear: g.key.year,
  Move         r299, r270
  Move         r300, r272
  // year_total: sum(from x in g select ((x.cs_ext_list_price - x.cs_ext_wholesale_cost - x.cs_ext_discount_amt) + x.cs_ext_sales_price) / 2),
  Move         r301, r273
  Move         r302, r289
  // sale_type: "c",
  Move         r303, r290
  Move         r304, r55
  // select {
  MakeMap      r305, 7, r291
  // from c in customer
  Append       r306, r170, r305
  Move         r170, r306
  AddInt       r254, r254, r112
  Jump         L23
L20:
  // ) union all (
  UnionAll     r307, r1, r170
  // from c in customer
  Const        r308, []
  // year_total: sum(from x in g select ((x.ws_ext_list_price - x.ws_ext_wholesale_cost - x.ws_ext_discount_amt) + x.ws_ext_sales_price) / 2),
  Const        r309, "ws_ext_list_price"
  Const        r310, "ws_ext_wholesale_cost"
  Const        r311, "ws_ext_discount_amt"
  Const        r312, "ws_ext_sales_price"
  // from c in customer
  MakeMap      r313, 0, r0
  Const        r315, []
  Move         r314, r315
  IterPrep     r316, r0
  Len          r317, r316
  Const        r318, 0
L31:
  LessInt      r319, r318, r317
  JumpIfFalse  r319, L24
  Index        r320, r316, r318
  Move         r32, r320
  // join ws in web_sales on c.c_customer_sk == ws.ws_bill_customer_sk
  IterPrep     r321, r0
  Len          r322, r321
  Const        r323, 0
L30:
  LessInt      r324, r323, r322
  JumpIfFalse  r324, L25
  Index        r325, r321, r323
  Move         r326, r325
  Index        r327, r32, r39
  Const        r328, "ws_bill_customer_sk"
  Index        r329, r326, r328
  Equal        r330, r327, r329
  JumpIfFalse  r330, L26
  // join d in date_dim on ws.ws_sold_date_sk == d.d_date_sk
  IterPrep     r331, r0
  Len          r332, r331
  Const        r333, 0
L29:
  LessInt      r334, r333, r332
  JumpIfFalse  r334, L26
  Index        r335, r331, r333
  Move         r336, r335
  Const        r337, "ws_sold_date_sk"
  Index        r338, r326, r337
  Index        r339, r336, r52
  Equal        r340, r338, r339
  JumpIfFalse  r340, L27
  // from c in customer
  Move         r341, r32
  Const        r342, "ws"
  Move         r343, r326
  Move         r344, r336
  Move         r345, r55
  Move         r346, r341
  Move         r347, r342
  Move         r348, r343
  Move         r349, r59
  Move         r350, r344
  MakeMap      r351, 3, r345
  // group by {id: c.c_customer_id, first: c.c_first_name, last: c.c_last_name, login: c.c_login, year: d.d_year} into g
  Const        r352, "id"
  Index        r353, r32, r3
  Const        r354, "first"
  Index        r355, r32, r5
  Const        r356, "last"
  Index        r357, r32, r7
  Const        r358, "login"
  Index        r359, r32, r9
  Const        r360, "year"
  Index        r361, r336, r11
  Move         r362, r352
  Move         r363, r353
  Move         r364, r354
  Move         r365, r355
  Move         r366, r356
  Move         r367, r357
  Move         r368, r358
  Move         r369, r359
  Move         r370, r360
  Move         r371, r361
  MakeMap      r372, 5, r362
  Str          r373, r372
  In           r374, r373, r313
  JumpIfTrue   r374, L28
  Move         r375, r372
  // from c in customer
  Move         r376, r0
  Move         r377, r91
  Move         r378, r92
  Move         r379, r13
  Move         r380, r375
  Move         r381, r94
  Move         r382, r376
  Move         r383, r96
  Move         r384, r97
  MakeMap      r385, 4, r377
  SetIndex     r313, r373, r385
  Append       r386, r314, r385
  Move         r314, r386
L28:
  Index        r387, r313, r373
  Index        r388, r387, r94
  Append       r389, r388, r351
  SetIndex     r387, r94, r389
  Index        r390, r387, r96
  AddInt       r391, r390, r112
  SetIndex     r387, r96, r391
L27:
  // join d in date_dim on ws.ws_sold_date_sk == d.d_date_sk
  AddInt       r333, r333, r112
  Jump         L29
L26:
  // join ws in web_sales on c.c_customer_sk == ws.ws_bill_customer_sk
  AddInt       r323, r323, r112
  Jump         L30
L25:
  // from c in customer
  AddInt       r318, r318, r112
  Jump         L31
L24:
  Move         r392, r97
  Len          r393, r314
L35:
  LessInt      r394, r392, r393
  JumpIfFalse  r394, L32
  Index        r395, r314, r392
  Move         r118, r395
  // customer_id: g.key.id,
  Const        r396, "customer_id"
  Index        r397, r118, r13
  Index        r398, r397, r2
  // customer_first_name: g.key.first,
  Const        r399, "customer_first_name"
  Index        r400, r118, r13
  Index        r401, r400, r4
  // customer_last_name: g.key.last,
  Const        r402, "customer_last_name"
  Index        r403, r118, r13
  Index        r404, r403, r6
  // customer_login: g.key.login,
  Const        r405, "customer_login"
  Index        r406, r118, r13
  Index        r407, r406, r8
  // dyear: g.key.year,
  Const        r408, "dyear"
  Index        r409, r118, r13
  Index        r410, r409, r10
  // year_total: sum(from x in g select ((x.ws_ext_list_price - x.ws_ext_wholesale_cost - x.ws_ext_discount_amt) + x.ws_ext_sales_price) / 2),
  Const        r411, "year_total"
  Const        r412, []
  IterPrep     r413, r118
  Len          r414, r413
  Move         r415, r97
L34:
  LessInt      r416, r415, r414
  JumpIfFalse  r416, L33
  Index        r417, r413, r415
  Move         r141, r417
  Index        r418, r141, r309
  Index        r419, r141, r310
  Sub          r420, r418, r419
  Index        r421, r141, r311
  Sub          r422, r420, r421
  Index        r423, r141, r312
  Add          r424, r422, r423
  Div          r425, r424, r149
  Append       r426, r412, r425
  Move         r412, r426
  AddInt       r415, r415, r112
  Jump         L34
L33:
  Sum          r427, r412
  // sale_type: "w",
  Const        r428, "sale_type"
  Const        r429, "w"
  // customer_id: g.key.id,
  Move         r430, r396
  Move         r431, r398
  // customer_first_name: g.key.first,
  Move         r432, r399
  Move         r433, r401
  // customer_last_name: g.key.last,
  Move         r434, r402
  Move         r435, r404
  // customer_login: g.key.login,
  Move         r436, r405
  Move         r437, r407
  // dyear: g.key.year,
  Move         r438, r408
  Move         r439, r410
  // year_total: sum(from x in g select ((x.ws_ext_list_price - x.ws_ext_wholesale_cost - x.ws_ext_discount_amt) + x.ws_ext_sales_price) / 2),
  Move         r440, r411
  Move         r441, r427
  // sale_type: "w",
  Move         r442, r428
  Move         r443, r429
  // select {
  MakeMap      r444, 7, r430
  // from c in customer
  Append       r445, r308, r444
  Move         r308, r445
  AddInt       r392, r392, r112
  Jump         L35
L32:
  // ) union all (
  UnionAll     r446, r307, r308
  // from s1 in year_total
  Const        r447, []
  IterPrep     r448, r446
  Len          r449, r448
  Move         r450, r97
L64:
  LessInt      r451, r450, r449
  JumpIfFalse  r451, L36
  Index        r452, r448, r450
  Move         r453, r452
  // join s2 in year_total on s2.customer_id == s1.customer_id
  IterPrep     r454, r446
  Len          r455, r454
  Move         r456, r97
L63:
  LessInt      r457, r456, r455
  JumpIfFalse  r457, L37
  Index        r458, r454, r456
  Move         r459, r458
  Index        r460, r459, r12
  Index        r461, r453, r12
  Equal        r462, r460, r461
  JumpIfFalse  r462, L38
  // join c1 in year_total on c1.customer_id == s1.customer_id
  IterPrep     r463, r446
  Len          r464, r463
  Move         r465, r97
L62:
  LessInt      r466, r465, r464
  JumpIfFalse  r466, L38
  Index        r467, r463, r465
  Move         r468, r467
  Index        r469, r468, r12
  Index        r470, r453, r12
  Equal        r471, r469, r470
  JumpIfFalse  r471, L39
  // join c2 in year_total on c2.customer_id == s1.customer_id
  IterPrep     r472, r446
  Len          r473, r472
  Move         r474, r97
L61:
  LessInt      r475, r474, r473
  JumpIfFalse  r475, L39
  Index        r476, r472, r474
  Move         r477, r476
  Index        r478, r477, r12
  Index        r479, r453, r12
  Equal        r480, r478, r479
  JumpIfFalse  r480, L40
  // join w1 in year_total on w1.customer_id == s1.customer_id
  IterPrep     r481, r446
  Len          r482, r481
  Move         r483, r97
L60:
  LessInt      r484, r483, r482
  JumpIfFalse  r484, L40
  Index        r485, r481, r483
  Move         r486, r485
  Index        r487, r486, r12
  Index        r488, r453, r12
  Equal        r489, r487, r488
  JumpIfFalse  r489, L41
  // join w2 in year_total on w2.customer_id == s1.customer_id
  IterPrep     r490, r446
  Len          r491, r490
  Move         r492, r97
L59:
  LessInt      r493, r492, r491
  JumpIfFalse  r493, L41
  Index        r494, r490, r492
  Move         r495, r494
  Index        r496, r495, r12
  Index        r497, r453, r12
  Equal        r498, r496, r497
  JumpIfFalse  r498, L42
  // where s1.sale_type == "s" && c1.sale_type == "c" && w1.sale_type == "w" &&
  Index        r499, r453, r23
  // s1.year_total > 0 && c1.year_total > 0 && w1.year_total > 0 &&
  Index        r500, r453, r18
  Less         r501, r97, r500
  Index        r502, r468, r18
  Less         r503, r97, r502
  Index        r504, r486, r18
  Less         r505, r97, r504
  // (if c1.year_total > 0 { c2.year_total / c1.year_total } else { null }) >
  Index        r506, r468, r18
  Less         r507, r97, r506
  Index        r508, r477, r18
  Index        r509, r468, r18
  Div          r510, r508, r509
  Const        r511, nil
  Select       512,507,510,511
  // (if s1.year_total > 0 { s2.year_total / s1.year_total } else { null }) &&
  Index        r513, r453, r18
  Less         r514, r97, r513
  Index        r515, r459, r18
  Index        r516, r453, r18
  Div          r517, r515, r516
  Select       518,514,517,511
  // (if c1.year_total > 0 { c2.year_total / c1.year_total } else { null }) >
  Less         r519, r518, r512
  // (if c1.year_total > 0 { c2.year_total / c1.year_total } else { null }) >
  Index        r520, r468, r18
  Less         r521, r97, r520
  Index        r522, r477, r18
  Index        r523, r468, r18
  Div          r524, r522, r523
  Select       525,521,524,511
  // (if w1.year_total > 0 { w2.year_total / w1.year_total } else { null })
  Index        r526, r486, r18
  Less         r527, r97, r526
  Index        r528, r495, r18
  Index        r529, r486, r18
  Div          r530, r528, r529
  Select       531,527,530,511
  // (if c1.year_total > 0 { c2.year_total / c1.year_total } else { null }) >
  Less         r532, r531, r525
  // where s1.sale_type == "s" && c1.sale_type == "c" && w1.sale_type == "w" &&
  Equal        r533, r499, r57
  Index        r534, r468, r23
  Equal        r535, r534, r55
  Index        r536, r486, r23
  Equal        r537, r536, r429
  // s2.sale_type == "s" && c2.sale_type == "c" && w2.sale_type == "w" &&
  Index        r538, r459, r23
  Equal        r539, r538, r57
  Index        r540, r477, r23
  Equal        r541, r540, r55
  Index        r542, r495, r23
  Equal        r543, r542, r429
  // s1.dyear == 2001 && s2.dyear == 2002 &&
  Index        r544, r453, r17
  Const        r545, 2001
  Equal        r546, r544, r545
  Index        r547, r459, r17
  Const        r548, 2002
  Equal        r549, r547, r548
  // c1.dyear == 2001 && c2.dyear == 2002 &&
  Index        r550, r468, r17
  Equal        r551, r550, r545
  Index        r552, r477, r17
  Equal        r553, r552, r548
  // w1.dyear == 2001 && w2.dyear == 2002 &&
  Index        r554, r486, r17
  Equal        r555, r554, r545
  Index        r556, r495, r17
  Equal        r557, r556, r548
  // where s1.sale_type == "s" && c1.sale_type == "c" && w1.sale_type == "w" &&
  Move         r558, r533
  JumpIfFalse  r558, L43
  Move         r558, r535
L43:
  Move         r559, r558
  JumpIfFalse  r559, L44
  Move         r559, r537
L44:
  Move         r560, r559
  JumpIfFalse  r560, L45
  Move         r560, r539
L45:
  // s2.sale_type == "s" && c2.sale_type == "c" && w2.sale_type == "w" &&
  Move         r561, r560
  JumpIfFalse  r561, L46
  Move         r561, r541
L46:
  Move         r562, r561
  JumpIfFalse  r562, L47
  Move         r562, r543
L47:
  Move         r563, r562
  JumpIfFalse  r563, L48
  Move         r563, r546
L48:
  // s1.dyear == 2001 && s2.dyear == 2002 &&
  Move         r564, r563
  JumpIfFalse  r564, L49
  Move         r564, r549
L49:
  Move         r565, r564
  JumpIfFalse  r565, L50
  Move         r565, r551
L50:
  // c1.dyear == 2001 && c2.dyear == 2002 &&
  Move         r566, r565
  JumpIfFalse  r566, L51
  Move         r566, r553
L51:
  Move         r567, r566
  JumpIfFalse  r567, L52
  Move         r567, r555
L52:
  // w1.dyear == 2001 && w2.dyear == 2002 &&
  Move         r568, r567
  JumpIfFalse  r568, L53
  Move         r568, r557
L53:
  Move         r569, r568
  JumpIfFalse  r569, L54
  Move         r569, r501
L54:
  // s1.year_total > 0 && c1.year_total > 0 && w1.year_total > 0 &&
  Move         r570, r569
  JumpIfFalse  r570, L55
  Move         r570, r503
L55:
  Move         r571, r570
  JumpIfFalse  r571, L56
  Move         r571, r505
L56:
  Move         r572, r571
  JumpIfFalse  r572, L57
  Move         r572, r519
L57:
  // (if s1.year_total > 0 { s2.year_total / s1.year_total } else { null }) &&
  Move         r573, r572
  JumpIfFalse  r573, L58
  Move         r573, r532
L58:
  // where s1.sale_type == "s" && c1.sale_type == "c" && w1.sale_type == "w" &&
  JumpIfFalse  r573, L42
  // customer_id: s2.customer_id,
  Const        r574, "customer_id"
  Index        r575, r459, r12
  // customer_first_name: s2.customer_first_name,
  Const        r576, "customer_first_name"
  Index        r577, r459, r14
  // customer_last_name: s2.customer_last_name,
  Const        r578, "customer_last_name"
  Index        r579, r459, r15
  // customer_login: s2.customer_login,
  Const        r580, "customer_login"
  Index        r581, r459, r16
  // customer_id: s2.customer_id,
  Move         r582, r574
  Move         r583, r575
  // customer_first_name: s2.customer_first_name,
  Move         r584, r576
  Move         r585, r577
  // customer_last_name: s2.customer_last_name,
  Move         r586, r578
  Move         r587, r579
  // customer_login: s2.customer_login,
  Move         r588, r580
  Move         r589, r581
  // select {
  MakeMap      r590, 4, r582
  // sort by [s2.customer_id, s2.customer_first_name, s2.customer_last_name, s2.customer_login]
  Index        r591, r459, r12
  Move         r592, r591
  Index        r593, r459, r14
  Move         r594, r593
  Index        r595, r459, r15
  Move         r596, r595
  Index        r597, r459, r16
  Move         r598, r597
  MakeList     r599, 4, r592
  Move         r600, r599
  // from s1 in year_total
  Move         r601, r590
  MakeList     r602, 2, r600
  Append       r603, r447, r602
  Move         r447, r603
L42:
  // join w2 in year_total on w2.customer_id == s1.customer_id
  Add          r492, r492, r112
  Jump         L59
L41:
  // join w1 in year_total on w1.customer_id == s1.customer_id
  Add          r483, r483, r112
  Jump         L60
L40:
  // join c2 in year_total on c2.customer_id == s1.customer_id
  Add          r474, r474, r112
  Jump         L61
L39:
  // join c1 in year_total on c1.customer_id == s1.customer_id
  Add          r465, r465, r112
  Jump         L62
L38:
  // join s2 in year_total on s2.customer_id == s1.customer_id
  Add          r456, r456, r112
  Jump         L63
L37:
  // from s1 in year_total
  AddInt       r450, r450, r112
  Jump         L64
L36:
  // sort by [s2.customer_id, s2.customer_first_name, s2.customer_last_name, s2.customer_login]
  Sort         r604, r447
  // from s1 in year_total
  Move         r447, r604
  // json(result)
  JSON         r447
  // expect len(result) == 0
  Len          r605, r447
  EqualInt     r606, r605, r97
  Expect       r606
  Return       r0
