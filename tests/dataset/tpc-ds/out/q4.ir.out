func main (regs=1104)
  // let customer = []
  Const        r0, []
  // let store_sales = []
  Const        r1, []
  // let catalog_sales = []
  Const        r2, []
  // let web_sales = []
  Const        r3, []
  // let date_dim = []
  Const        r4, []
  // from c in customer
  Const        r5, []
  MakeMap      r37, 0, r0
  Const        r38, []
  IterPrep     r40, r0
  Len          r41, r40
  Const        r42, 0
L1:
  LessInt      r43, r42, r41
  JumpIfFalse  r43, L0
  Index        r45, r40, r42
  // join s in store_sales on c.c_customer_sk == s.ss_customer_sk
  IterPrep     r46, r1
  Len          r47, r46
  Const        r48, 0
L2:
  LessInt      r49, r48, r47
  JumpIfFalse  r49, L1
  Index        r51, r46, r48
  Const        r52, "c_customer_sk"
  Index        r53, r45, r52
  Const        r54, "ss_customer_sk"
  Index        r55, r51, r54
  Equal        r56, r53, r55
  JumpIfFalse  r56, L2
  // join d in date_dim on s.ss_sold_date_sk == d.d_date_sk
  IterPrep     r57, r4
  Len          r58, r57
  Const        r59, 0
L5:
  LessInt      r60, r59, r58
  JumpIfFalse  r60, L2
  Index        r62, r57, r59
  Const        r63, "ss_sold_date_sk"
  Index        r64, r51, r63
  Const        r65, "d_date_sk"
  Index        r66, r62, r65
  Equal        r67, r64, r66
  JumpIfFalse  r67, L3
  // from c in customer
  Const        r68, "c"
  Move         r69, r45
  Const        r70, "s"
  Move         r71, r51
  Const        r72, "d"
  Move         r73, r62
  MakeMap      r74, 3, r68
  // group by {id: c.c_customer_id, first: c.c_first_name, last: c.c_last_name, login: c.c_login, year: d.d_year} into g
  Const        r75, "id"
  Const        r76, "c_customer_id"
  Index        r77, r45, r76
  Const        r78, "first"
  Const        r79, "c_first_name"
  Index        r80, r45, r79
  Const        r81, "last"
  Const        r82, "c_last_name"
  Index        r83, r45, r82
  Const        r84, "login"
  Const        r85, "c_login"
  Index        r86, r45, r85
  Const        r87, "year"
  Const        r88, "d_year"
  Index        r89, r62, r88
  Move         r90, r75
  Move         r91, r77
  Move         r92, r78
  Move         r93, r80
  Move         r94, r81
  Move         r95, r83
  Move         r96, r84
  Move         r97, r86
  Move         r98, r87
  Move         r99, r89
  MakeMap      r100, 5, r90
  Str          r101, r100
  In           r102, r101, r37
  JumpIfTrue   r102, L4
  // from c in customer
  Const        r103, []
  Const        r104, "__group__"
  Const        r105, true
  Const        r106, "key"
  // group by {id: c.c_customer_id, first: c.c_first_name, last: c.c_last_name, login: c.c_login, year: d.d_year} into g
  Move         r107, r100
  // from c in customer
  Const        r108, "items"
  Move         r109, r103
  Const        r110, "count"
  Const        r111, 0
  Move         r112, r104
  Move         r113, r105
  Move         r114, r106
  Move         r115, r107
  Move         r116, r108
  Move         r117, r109
  Move         r118, r110
  Move         r119, r111
  MakeMap      r120, 4, r112
  SetIndex     r37, r101, r120
  Append       r38, r38, r120
L4:
  Const        r122, "items"
  Index        r123, r37, r101
  Index        r124, r123, r122
  Append       r125, r124, r74
  SetIndex     r123, r122, r125
  Const        r126, "count"
  Index        r127, r123, r126
  Const        r128, 1
  AddInt       r129, r127, r128
  SetIndex     r123, r126, r129
L3:
  // join d in date_dim on s.ss_sold_date_sk == d.d_date_sk
  Const        r130, 1
  AddInt       r59, r59, r130
  Jump         L5
L0:
  // from c in customer
  Const        r133, 0
  Len          r135, r38
L9:
  LessInt      r136, r133, r135
  JumpIfFalse  r136, L6
  Index        r138, r38, r133
  // customer_id: g.key.id,
  Const        r139, "customer_id"
  Const        r140, "key"
  Index        r141, r138, r140
  Const        r142, "id"
  Index        r143, r141, r142
  // customer_first_name: g.key.first,
  Const        r144, "customer_first_name"
  Const        r145, "key"
  Index        r146, r138, r145
  Const        r147, "first"
  Index        r148, r146, r147
  // customer_last_name: g.key.last,
  Const        r149, "customer_last_name"
  Const        r150, "key"
  Index        r151, r138, r150
  Const        r152, "last"
  Index        r153, r151, r152
  // customer_login: g.key.login,
  Const        r154, "customer_login"
  Const        r155, "key"
  Index        r156, r138, r155
  Const        r157, "login"
  Index        r158, r156, r157
  // dyear: g.key.year,
  Const        r159, "dyear"
  Const        r160, "key"
  Index        r161, r138, r160
  Const        r162, "year"
  Index        r163, r161, r162
  // year_total: sum(from x in g select ((x.ss_ext_list_price - x.ss_ext_wholesale_cost - x.ss_ext_discount_amt) + x.ss_ext_sales_price) / 2),
  Const        r164, "year_total"
  Const        r165, []
  IterPrep     r170, r138
  Len          r171, r170
  Const        r172, 0
L8:
  LessInt      r174, r172, r171
  JumpIfFalse  r174, L7
  Index        r176, r170, r172
  Const        r177, "ss_ext_list_price"
  Index        r178, r176, r177
  Const        r179, "ss_ext_wholesale_cost"
  Index        r180, r176, r179
  Sub          r181, r178, r180
  Const        r182, "ss_ext_discount_amt"
  Index        r183, r176, r182
  Sub          r184, r181, r183
  Const        r185, "ss_ext_sales_price"
  Index        r186, r176, r185
  Add          r187, r184, r186
  Const        r188, 2
  Div          r189, r187, r188
  Append       r165, r165, r189
  Const        r191, 1
  AddInt       r172, r172, r191
  Jump         L8
L7:
  Sum          r192, r165
  // sale_type: "s",
  Const        r193, "sale_type"
  Const        r194, "s"
  // customer_id: g.key.id,
  Move         r195, r139
  Move         r196, r143
  // customer_first_name: g.key.first,
  Move         r197, r144
  Move         r198, r148
  // customer_last_name: g.key.last,
  Move         r199, r149
  Move         r200, r153
  // customer_login: g.key.login,
  Move         r201, r154
  Move         r202, r158
  // dyear: g.key.year,
  Move         r203, r159
  Move         r204, r163
  // year_total: sum(from x in g select ((x.ss_ext_list_price - x.ss_ext_wholesale_cost - x.ss_ext_discount_amt) + x.ss_ext_sales_price) / 2),
  Move         r205, r164
  Move         r206, r192
  // sale_type: "s",
  Move         r207, r193
  Move         r208, r194
  // select {
  MakeMap      r209, 7, r195
  // from c in customer
  Append       r5, r5, r209
  Const        r211, 1
  AddInt       r133, r133, r211
  Jump         L9
L6:
  // from c in customer
  Const        r212, []
  MakeMap      r244, 0, r0
  Const        r245, []
  IterPrep     r247, r0
  Len          r248, r247
  Const        r249, 0
L17:
  LessInt      r250, r249, r248
  JumpIfFalse  r250, L10
  Index        r45, r247, r249
  // join cs in catalog_sales on c.c_customer_sk == cs.cs_bill_customer_sk
  IterPrep     r252, r2
  Len          r253, r252
  Const        r254, 0
L16:
  LessInt      r255, r254, r253
  JumpIfFalse  r255, L11
  Index        r257, r252, r254
  Const        r258, "c_customer_sk"
  Index        r259, r45, r258
  Const        r260, "cs_bill_customer_sk"
  Index        r261, r257, r260
  Equal        r262, r259, r261
  JumpIfFalse  r262, L12
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  IterPrep     r263, r4
  Len          r264, r263
  Const        r265, 0
L15:
  LessInt      r266, r265, r264
  JumpIfFalse  r266, L12
  Index        r268, r263, r265
  Const        r269, "cs_sold_date_sk"
  Index        r270, r257, r269
  Const        r271, "d_date_sk"
  Index        r272, r268, r271
  Equal        r273, r270, r272
  JumpIfFalse  r273, L13
  // from c in customer
  Const        r274, "c"
  Move         r275, r45
  Const        r276, "cs"
  Move         r277, r257
  Const        r278, "d"
  Move         r279, r268
  MakeMap      r280, 3, r274
  // group by {id: c.c_customer_id, first: c.c_first_name, last: c.c_last_name, login: c.c_login, year: d.d_year} into g
  Const        r281, "id"
  Const        r282, "c_customer_id"
  Index        r283, r45, r282
  Const        r284, "first"
  Const        r285, "c_first_name"
  Index        r286, r45, r285
  Const        r287, "last"
  Const        r288, "c_last_name"
  Index        r289, r45, r288
  Const        r290, "login"
  Const        r291, "c_login"
  Index        r292, r45, r291
  Const        r293, "year"
  Const        r294, "d_year"
  Index        r295, r268, r294
  Move         r296, r281
  Move         r297, r283
  Move         r298, r284
  Move         r299, r286
  Move         r300, r287
  Move         r301, r289
  Move         r302, r290
  Move         r303, r292
  Move         r304, r293
  Move         r305, r295
  MakeMap      r306, 5, r296
  Str          r307, r306
  In           r308, r307, r244
  JumpIfTrue   r308, L14
  // from c in customer
  Const        r309, []
  Const        r310, "__group__"
  Const        r311, true
  Const        r312, "key"
  // group by {id: c.c_customer_id, first: c.c_first_name, last: c.c_last_name, login: c.c_login, year: d.d_year} into g
  Move         r313, r306
  // from c in customer
  Const        r314, "items"
  Move         r315, r309
  Const        r316, "count"
  Const        r317, 0
  Move         r318, r310
  Move         r319, r311
  Move         r320, r312
  Move         r321, r313
  Move         r322, r314
  Move         r323, r315
  Move         r324, r316
  Move         r325, r317
  MakeMap      r326, 4, r318
  SetIndex     r244, r307, r326
  Append       r245, r245, r326
L14:
  Const        r328, "items"
  Index        r329, r244, r307
  Index        r330, r329, r328
  Append       r331, r330, r280
  SetIndex     r329, r328, r331
  Const        r332, "count"
  Index        r333, r329, r332
  Const        r334, 1
  AddInt       r335, r333, r334
  SetIndex     r329, r332, r335
L13:
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  Const        r336, 1
  AddInt       r265, r265, r336
  Jump         L15
L12:
  // join cs in catalog_sales on c.c_customer_sk == cs.cs_bill_customer_sk
  Const        r337, 1
  AddInt       r254, r254, r337
  Jump         L16
L11:
  // from c in customer
  Const        r338, 1
  AddInt       r249, r249, r338
  Jump         L17
L10:
  Const        r339, 0
  Len          r341, r245
L21:
  LessInt      r342, r339, r341
  JumpIfFalse  r342, L18
  Index        r138, r245, r339
  // customer_id: g.key.id,
  Const        r344, "customer_id"
  Const        r345, "key"
  Index        r346, r138, r345
  Const        r347, "id"
  Index        r348, r346, r347
  // customer_first_name: g.key.first,
  Const        r349, "customer_first_name"
  Const        r350, "key"
  Index        r351, r138, r350
  Const        r352, "first"
  Index        r353, r351, r352
  // customer_last_name: g.key.last,
  Const        r354, "customer_last_name"
  Const        r355, "key"
  Index        r356, r138, r355
  Const        r357, "last"
  Index        r358, r356, r357
  // customer_login: g.key.login,
  Const        r359, "customer_login"
  Const        r360, "key"
  Index        r361, r138, r360
  Const        r362, "login"
  Index        r363, r361, r362
  // dyear: g.key.year,
  Const        r364, "dyear"
  Const        r365, "key"
  Index        r366, r138, r365
  Const        r367, "year"
  Index        r368, r366, r367
  // year_total: sum(from x in g select ((x.cs_ext_list_price - x.cs_ext_wholesale_cost - x.cs_ext_discount_amt) + x.cs_ext_sales_price) / 2),
  Const        r369, "year_total"
  Const        r370, []
  IterPrep     r375, r138
  Len          r376, r375
  Const        r377, 0
L20:
  LessInt      r379, r377, r376
  JumpIfFalse  r379, L19
  Index        r176, r375, r377
  Const        r381, "cs_ext_list_price"
  Index        r382, r176, r381
  Const        r383, "cs_ext_wholesale_cost"
  Index        r384, r176, r383
  Sub          r385, r382, r384
  Const        r386, "cs_ext_discount_amt"
  Index        r387, r176, r386
  Sub          r388, r385, r387
  Const        r389, "cs_ext_sales_price"
  Index        r390, r176, r389
  Add          r391, r388, r390
  Const        r392, 2
  Div          r393, r391, r392
  Append       r370, r370, r393
  Const        r395, 1
  AddInt       r377, r377, r395
  Jump         L20
L19:
  Sum          r396, r370
  // sale_type: "c",
  Const        r397, "sale_type"
  Const        r398, "c"
  // customer_id: g.key.id,
  Move         r399, r344
  Move         r400, r348
  // customer_first_name: g.key.first,
  Move         r401, r349
  Move         r402, r353
  // customer_last_name: g.key.last,
  Move         r403, r354
  Move         r404, r358
  // customer_login: g.key.login,
  Move         r405, r359
  Move         r406, r363
  // dyear: g.key.year,
  Move         r407, r364
  Move         r408, r368
  // year_total: sum(from x in g select ((x.cs_ext_list_price - x.cs_ext_wholesale_cost - x.cs_ext_discount_amt) + x.cs_ext_sales_price) / 2),
  Move         r409, r369
  Move         r410, r396
  // sale_type: "c",
  Move         r411, r397
  Move         r412, r398
  // select {
  MakeMap      r413, 7, r399
  // from c in customer
  Append       r212, r212, r413
  Const        r415, 1
  AddInt       r339, r339, r415
  Jump         L21
L18:
  // ) union all (
  UnionAll     r416, r5, r212
  // from c in customer
  Const        r417, []
  MakeMap      r449, 0, r0
  Const        r450, []
  IterPrep     r452, r0
  Len          r453, r452
  Const        r454, 0
L29:
  LessInt      r455, r454, r453
  JumpIfFalse  r455, L22
  Index        r45, r452, r454
  // join ws in web_sales on c.c_customer_sk == ws.ws_bill_customer_sk
  IterPrep     r457, r3
  Len          r458, r457
  Const        r459, 0
L28:
  LessInt      r460, r459, r458
  JumpIfFalse  r460, L23
  Index        r462, r457, r459
  Const        r463, "c_customer_sk"
  Index        r464, r45, r463
  Const        r465, "ws_bill_customer_sk"
  Index        r466, r462, r465
  Equal        r467, r464, r466
  JumpIfFalse  r467, L24
  // join d in date_dim on ws.ws_sold_date_sk == d.d_date_sk
  IterPrep     r468, r4
  Len          r469, r468
  Const        r470, 0
L27:
  LessInt      r471, r470, r469
  JumpIfFalse  r471, L24
  Index        r473, r468, r470
  Const        r474, "ws_sold_date_sk"
  Index        r475, r462, r474
  Const        r476, "d_date_sk"
  Index        r477, r473, r476
  Equal        r478, r475, r477
  JumpIfFalse  r478, L25
  // from c in customer
  Const        r479, "c"
  Move         r480, r45
  Const        r481, "ws"
  Move         r482, r462
  Const        r483, "d"
  Move         r484, r473
  MakeMap      r485, 3, r479
  // group by {id: c.c_customer_id, first: c.c_first_name, last: c.c_last_name, login: c.c_login, year: d.d_year} into g
  Const        r486, "id"
  Const        r487, "c_customer_id"
  Index        r488, r45, r487
  Const        r489, "first"
  Const        r490, "c_first_name"
  Index        r491, r45, r490
  Const        r492, "last"
  Const        r493, "c_last_name"
  Index        r494, r45, r493
  Const        r495, "login"
  Const        r496, "c_login"
  Index        r497, r45, r496
  Const        r498, "year"
  Const        r499, "d_year"
  Index        r500, r473, r499
  Move         r501, r486
  Move         r502, r488
  Move         r503, r489
  Move         r504, r491
  Move         r505, r492
  Move         r506, r494
  Move         r507, r495
  Move         r508, r497
  Move         r509, r498
  Move         r510, r500
  MakeMap      r511, 5, r501
  Str          r512, r511
  In           r513, r512, r449
  JumpIfTrue   r513, L26
  // from c in customer
  Const        r514, []
  Const        r515, "__group__"
  Const        r516, true
  Const        r517, "key"
  // group by {id: c.c_customer_id, first: c.c_first_name, last: c.c_last_name, login: c.c_login, year: d.d_year} into g
  Move         r518, r511
  // from c in customer
  Const        r519, "items"
  Move         r520, r514
  Const        r521, "count"
  Const        r522, 0
  Move         r523, r515
  Move         r524, r516
  Move         r525, r517
  Move         r526, r518
  Move         r527, r519
  Move         r528, r520
  Move         r529, r521
  Move         r530, r522
  MakeMap      r531, 4, r523
  SetIndex     r449, r512, r531
  Append       r450, r450, r531
L26:
  Const        r533, "items"
  Index        r534, r449, r512
  Index        r535, r534, r533
  Append       r536, r535, r485
  SetIndex     r534, r533, r536
  Const        r537, "count"
  Index        r538, r534, r537
  Const        r539, 1
  AddInt       r540, r538, r539
  SetIndex     r534, r537, r540
L25:
  // join d in date_dim on ws.ws_sold_date_sk == d.d_date_sk
  Const        r541, 1
  AddInt       r470, r470, r541
  Jump         L27
L24:
  // join ws in web_sales on c.c_customer_sk == ws.ws_bill_customer_sk
  Const        r542, 1
  AddInt       r459, r459, r542
  Jump         L28
L23:
  // from c in customer
  Const        r543, 1
  AddInt       r454, r454, r543
  Jump         L29
L22:
  Const        r544, 0
  Len          r546, r450
L33:
  LessInt      r547, r544, r546
  JumpIfFalse  r547, L30
  Index        r138, r450, r544
  // customer_id: g.key.id,
  Const        r549, "customer_id"
  Const        r550, "key"
  Index        r551, r138, r550
  Const        r552, "id"
  Index        r553, r551, r552
  // customer_first_name: g.key.first,
  Const        r554, "customer_first_name"
  Const        r555, "key"
  Index        r556, r138, r555
  Const        r557, "first"
  Index        r558, r556, r557
  // customer_last_name: g.key.last,
  Const        r559, "customer_last_name"
  Const        r560, "key"
  Index        r561, r138, r560
  Const        r562, "last"
  Index        r563, r561, r562
  // customer_login: g.key.login,
  Const        r564, "customer_login"
  Const        r565, "key"
  Index        r566, r138, r565
  Const        r567, "login"
  Index        r568, r566, r567
  // dyear: g.key.year,
  Const        r569, "dyear"
  Const        r570, "key"
  Index        r571, r138, r570
  Const        r572, "year"
  Index        r573, r571, r572
  // year_total: sum(from x in g select ((x.ws_ext_list_price - x.ws_ext_wholesale_cost - x.ws_ext_discount_amt) + x.ws_ext_sales_price) / 2),
  Const        r574, "year_total"
  Const        r575, []
  IterPrep     r580, r138
  Len          r581, r580
  Const        r582, 0
L32:
  LessInt      r584, r582, r581
  JumpIfFalse  r584, L31
  Index        r176, r580, r582
  Const        r586, "ws_ext_list_price"
  Index        r587, r176, r586
  Const        r588, "ws_ext_wholesale_cost"
  Index        r589, r176, r588
  Sub          r590, r587, r589
  Const        r591, "ws_ext_discount_amt"
  Index        r592, r176, r591
  Sub          r593, r590, r592
  Const        r594, "ws_ext_sales_price"
  Index        r595, r176, r594
  Add          r596, r593, r595
  Const        r597, 2
  Div          r598, r596, r597
  Append       r575, r575, r598
  Const        r600, 1
  AddInt       r582, r582, r600
  Jump         L32
L31:
  Sum          r601, r575
  // sale_type: "w",
  Const        r602, "sale_type"
  Const        r603, "w"
  // customer_id: g.key.id,
  Move         r604, r549
  Move         r605, r553
  // customer_first_name: g.key.first,
  Move         r606, r554
  Move         r607, r558
  // customer_last_name: g.key.last,
  Move         r608, r559
  Move         r609, r563
  // customer_login: g.key.login,
  Move         r610, r564
  Move         r611, r568
  // dyear: g.key.year,
  Move         r612, r569
  Move         r613, r573
  // year_total: sum(from x in g select ((x.ws_ext_list_price - x.ws_ext_wholesale_cost - x.ws_ext_discount_amt) + x.ws_ext_sales_price) / 2),
  Move         r614, r574
  Move         r615, r601
  // sale_type: "w",
  Move         r616, r602
  Move         r617, r603
  // select {
  MakeMap      r618, 7, r604
  // from c in customer
  Append       r417, r417, r618
  Const        r620, 1
  AddInt       r544, r544, r620
  Jump         L33
L30:
  // ) union all (
  UnionAll     r621, r416, r417
  // from s1 in year_total
  Const        r622, []
  IterPrep     r662, r621
  Len          r663, r662
  Const        r664, 0
L70:
  LessInt      r666, r664, r663
  JumpIfFalse  r666, L34
  Index        r668, r662, r664
  // join s2 in year_total on s2.customer_id == s1.customer_id
  IterPrep     r669, r621
  Len          r670, r669
  Const        r712, 0
L69:
  LessInt      r714, r712, r670
  JumpIfFalse  r714, L35
  Index        r716, r669, r712
  Const        r717, "customer_id"
  Index        r718, r716, r717
  Const        r719, "customer_id"
  Index        r720, r668, r719
  Equal        r721, r718, r720
  JumpIfFalse  r721, L36
  // join c1 in year_total on c1.customer_id == s1.customer_id
  IterPrep     r722, r621
  Len          r723, r722
  Const        r765, 0
L68:
  LessInt      r767, r765, r723
  JumpIfFalse  r767, L36
  Index        r769, r722, r765
  Const        r770, "customer_id"
  Index        r771, r769, r770
  Const        r772, "customer_id"
  Index        r773, r668, r772
  Equal        r774, r771, r773
  JumpIfFalse  r774, L37
  // join c2 in year_total on c2.customer_id == s1.customer_id
  IterPrep     r775, r621
  Len          r776, r775
  Const        r818, 0
L67:
  LessInt      r820, r818, r776
  JumpIfFalse  r820, L37
  Index        r822, r775, r818
  Const        r823, "customer_id"
  Index        r824, r822, r823
  Const        r825, "customer_id"
  Index        r826, r668, r825
  Equal        r827, r824, r826
  JumpIfFalse  r827, L38
  // join w1 in year_total on w1.customer_id == s1.customer_id
  IterPrep     r828, r621
  Len          r829, r828
  Const        r871, 0
L66:
  LessInt      r873, r871, r829
  JumpIfFalse  r873, L38
  Index        r875, r828, r871
  Const        r876, "customer_id"
  Index        r877, r875, r876
  Const        r878, "customer_id"
  Index        r879, r668, r878
  Equal        r880, r877, r879
  JumpIfFalse  r880, L39
  // join w2 in year_total on w2.customer_id == s1.customer_id
  IterPrep     r881, r621
  Len          r882, r881
  Const        r924, 0
L65:
  LessInt      r926, r924, r882
  JumpIfFalse  r926, L39
  Index        r928, r881, r924
  Const        r929, "customer_id"
  Index        r930, r928, r929
  Const        r931, "customer_id"
  Index        r932, r668, r931
  Equal        r933, r930, r932
  JumpIfFalse  r933, L40
  // where s1.sale_type == "s" && c1.sale_type == "c" && w1.sale_type == "w" &&
  Const        r934, "sale_type"
  Index        r935, r668, r934
  // s1.year_total > 0 && c1.year_total > 0 && w1.year_total > 0 &&
  Const        r936, "year_total"
  Index        r937, r668, r936
  Const        r938, 0
  Less         r939, r938, r937
  Const        r940, "year_total"
  Index        r941, r769, r940
  Const        r942, 0
  Less         r943, r942, r941
  Const        r944, "year_total"
  Index        r945, r875, r944
  Const        r946, 0
  Less         r947, r946, r945
  // (if c1.year_total > 0 { c2.year_total / c1.year_total } else { null }) >
  Const        r948, "year_total"
  Index        r949, r769, r948
  Const        r950, 0
  Less         r951, r950, r949
  JumpIfFalse  r951, L41
  Const        r952, "year_total"
  Index        r953, r822, r952
  Const        r954, "year_total"
  Index        r955, r769, r954
  Div          r957, r953, r955
  Jump         L42
L41:
  Const        r957, nil
L42:
  // (if s1.year_total > 0 { s2.year_total / s1.year_total } else { null }) &&
  Const        r959, "year_total"
  Index        r960, r668, r959
  Const        r961, 0
  Less         r962, r961, r960
  JumpIfFalse  r962, L43
  Const        r963, "year_total"
  Index        r964, r716, r963
  Const        r965, "year_total"
  Index        r966, r668, r965
  Div          r968, r964, r966
  Jump         L44
L43:
  Const        r968, nil
L44:
  // (if c1.year_total > 0 { c2.year_total / c1.year_total } else { null }) >
  Less         r970, r968, r957
  // (if c1.year_total > 0 { c2.year_total / c1.year_total } else { null }) >
  Const        r971, "year_total"
  Index        r972, r769, r971
  Const        r973, 0
  Less         r974, r973, r972
  JumpIfFalse  r974, L45
  Const        r975, "year_total"
  Index        r976, r822, r975
  Const        r977, "year_total"
  Index        r978, r769, r977
  Div          r980, r976, r978
  Jump         L46
L45:
  Const        r980, nil
L46:
  // (if w1.year_total > 0 { w2.year_total / w1.year_total } else { null })
  Const        r982, "year_total"
  Index        r983, r875, r982
  Const        r984, 0
  Less         r985, r984, r983
  JumpIfFalse  r985, L47
  Const        r986, "year_total"
  Index        r987, r928, r986
  Const        r988, "year_total"
  Index        r989, r875, r988
  Div          r991, r987, r989
  Jump         L48
L47:
  Const        r991, nil
L48:
  // (if c1.year_total > 0 { c2.year_total / c1.year_total } else { null }) >
  Less         r993, r991, r980
  // where s1.sale_type == "s" && c1.sale_type == "c" && w1.sale_type == "w" &&
  Const        r994, "s"
  Equal        r995, r935, r994
  Const        r996, "sale_type"
  Index        r997, r769, r996
  Const        r998, "c"
  Equal        r999, r997, r998
  Const        r1000, "sale_type"
  Index        r1001, r875, r1000
  Const        r1002, "w"
  Equal        r1003, r1001, r1002
  // s2.sale_type == "s" && c2.sale_type == "c" && w2.sale_type == "w" &&
  Const        r1004, "sale_type"
  Index        r1005, r716, r1004
  Const        r1006, "s"
  Equal        r1007, r1005, r1006
  Const        r1008, "sale_type"
  Index        r1009, r822, r1008
  Const        r1010, "c"
  Equal        r1011, r1009, r1010
  Const        r1012, "sale_type"
  Index        r1013, r928, r1012
  Const        r1014, "w"
  Equal        r1015, r1013, r1014
  // s1.dyear == 2001 && s2.dyear == 2002 &&
  Const        r1016, "dyear"
  Index        r1017, r668, r1016
  Const        r1018, 2001
  Equal        r1019, r1017, r1018
  Const        r1020, "dyear"
  Index        r1021, r716, r1020
  Const        r1022, 2002
  Equal        r1023, r1021, r1022
  // c1.dyear == 2001 && c2.dyear == 2002 &&
  Const        r1024, "dyear"
  Index        r1025, r769, r1024
  Const        r1026, 2001
  Equal        r1027, r1025, r1026
  Const        r1028, "dyear"
  Index        r1029, r822, r1028
  Const        r1030, 2002
  Equal        r1031, r1029, r1030
  // w1.dyear == 2001 && w2.dyear == 2002 &&
  Const        r1032, "dyear"
  Index        r1033, r875, r1032
  Const        r1034, 2001
  Equal        r1035, r1033, r1034
  Const        r1036, "dyear"
  Index        r1037, r928, r1036
  Const        r1038, 2002
  Equal        r1039, r1037, r1038
  // where s1.sale_type == "s" && c1.sale_type == "c" && w1.sale_type == "w" &&
  Move         r1040, r995
  JumpIfFalse  r1040, L49
L49:
  Move         r1041, r999
  JumpIfFalse  r1041, L50
L50:
  Move         r1042, r1003
  JumpIfFalse  r1042, L51
L51:
  // s2.sale_type == "s" && c2.sale_type == "c" && w2.sale_type == "w" &&
  Move         r1043, r1007
  JumpIfFalse  r1043, L52
L52:
  Move         r1044, r1011
  JumpIfFalse  r1044, L53
L53:
  Move         r1045, r1015
  JumpIfFalse  r1045, L54
L54:
  // s1.dyear == 2001 && s2.dyear == 2002 &&
  Move         r1046, r1019
  JumpIfFalse  r1046, L55
L55:
  Move         r1047, r1023
  JumpIfFalse  r1047, L56
L56:
  // c1.dyear == 2001 && c2.dyear == 2002 &&
  Move         r1048, r1027
  JumpIfFalse  r1048, L57
L57:
  Move         r1049, r1031
  JumpIfFalse  r1049, L58
L58:
  // w1.dyear == 2001 && w2.dyear == 2002 &&
  Move         r1050, r1035
  JumpIfFalse  r1050, L59
L59:
  Move         r1051, r1039
  JumpIfFalse  r1051, L60
L60:
  // s1.year_total > 0 && c1.year_total > 0 && w1.year_total > 0 &&
  Move         r1052, r939
  JumpIfFalse  r1052, L61
L61:
  Move         r1053, r943
  JumpIfFalse  r1053, L62
L62:
  Move         r1054, r947
  JumpIfFalse  r1054, L63
L63:
  // (if s1.year_total > 0 { s2.year_total / s1.year_total } else { null }) &&
  Move         r1055, r970
  JumpIfFalse  r1055, L64
  Move         r1055, r993
L64:
  // where s1.sale_type == "s" && c1.sale_type == "c" && w1.sale_type == "w" &&
  JumpIfFalse  r1055, L40
  // customer_id: s2.customer_id,
  Const        r1056, "customer_id"
  Const        r1057, "customer_id"
  Index        r1058, r716, r1057
  // customer_first_name: s2.customer_first_name,
  Const        r1059, "customer_first_name"
  Const        r1060, "customer_first_name"
  Index        r1061, r716, r1060
  // customer_last_name: s2.customer_last_name,
  Const        r1062, "customer_last_name"
  Const        r1063, "customer_last_name"
  Index        r1064, r716, r1063
  // customer_login: s2.customer_login,
  Const        r1065, "customer_login"
  Const        r1066, "customer_login"
  Index        r1067, r716, r1066
  // customer_id: s2.customer_id,
  Move         r1068, r1056
  Move         r1069, r1058
  // customer_first_name: s2.customer_first_name,
  Move         r1070, r1059
  Move         r1071, r1061
  // customer_last_name: s2.customer_last_name,
  Move         r1072, r1062
  Move         r1073, r1064
  // customer_login: s2.customer_login,
  Move         r1074, r1065
  Move         r1075, r1067
  // select {
  MakeMap      r1076, 4, r1068
  // sort by [s2.customer_id, s2.customer_first_name, s2.customer_last_name, s2.customer_login]
  Const        r1077, "customer_id"
  Index        r1079, r716, r1077
  Const        r1080, "customer_first_name"
  Index        r1081, r716, r1080
  Move         r1082, r1081
  MakeList     r1090, 4, r1079
  // from s1 in year_total
  Move         r1091, r1076
  MakeList     r1092, 2, r1090
  Append       r622, r622, r1092
L40:
  // join w2 in year_total on w2.customer_id == s1.customer_id
  Const        r1094, 1
  Add          r924, r924, r1094
  Jump         L65
L39:
  // join w1 in year_total on w1.customer_id == s1.customer_id
  Const        r1095, 1
  Add          r871, r871, r1095
  Jump         L66
L38:
  // join c2 in year_total on c2.customer_id == s1.customer_id
  Const        r1096, 1
  Add          r818, r818, r1096
  Jump         L67
L37:
  // join c1 in year_total on c1.customer_id == s1.customer_id
  Const        r1097, 1
  Add          r765, r765, r1097
  Jump         L68
L36:
  // join s2 in year_total on s2.customer_id == s1.customer_id
  Const        r1098, 1
  Add          r712, r712, r1098
  Jump         L69
L35:
  // from s1 in year_total
  Const        r1099, 1
  AddInt       r664, r664, r1099
  Jump         L70
L34:
  // sort by [s2.customer_id, s2.customer_first_name, s2.customer_last_name, s2.customer_login]
  Sort         r622, r622
  // json(result)
  JSON         r622
  // expect len(result) == 0
  Len          r1101, r622
  Const        r1102, 0
  EqualInt     r1103, r1101, r1102
  Expect       r1103
  Return       r0
