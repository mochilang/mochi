func main (regs=255)
  // let store_sales = [
  Const        r0, [{"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 1, "ss_sales_price": 10.0, "ss_sold_date_sk": 1}, {"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 1, "ss_sales_price": 10.0, "ss_sold_date_sk": 1}, {"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 1, "ss_sales_price": 10.0, "ss_sold_date_sk": 1}, {"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 1, "ss_sales_price": 10.0, "ss_sold_date_sk": 1}, {"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 1, "ss_sales_price": 10.0, "ss_sold_date_sk": 1}, {"ss_customer_sk": 2, "ss_item_sk": 2, "ss_quantity": 1, "ss_sales_price": 10.0, "ss_sold_date_sk": 1}, {"ss_customer_sk": 2, "ss_item_sk": 2, "ss_quantity": 1, "ss_sales_price": 10.0, "ss_sold_date_sk": 1}, {"ss_customer_sk": 2, "ss_item_sk": 2, "ss_quantity": 1, "ss_sales_price": 10.0, "ss_sold_date_sk": 1}]
  // let date_dim = [ { d_date_sk: 1, d_year: 2000, d_moy: 1 } ]
  Const        r1, [{"d_date_sk": 1, "d_moy": 1, "d_year": 2000}]
  // let item = [ { i_item_sk: 1 }, { i_item_sk: 2 } ]
  Const        r2, [{"i_item_sk": 1}, {"i_item_sk": 2}]
  // let catalog_sales = [
  Const        r3, [{"cs_bill_customer_sk": 1, "cs_item_sk": 1, "cs_list_price": 10.0, "cs_quantity": 2, "cs_sold_date_sk": 1}, {"cs_bill_customer_sk": 2, "cs_item_sk": 2, "cs_list_price": 10.0, "cs_quantity": 2, "cs_sold_date_sk": 1}]
  // let web_sales = [
  Const        r4, [{"ws_bill_customer_sk": 1, "ws_item_sk": 1, "ws_list_price": 10.0, "ws_quantity": 3, "ws_sold_date_sk": 1}, {"ws_bill_customer_sk": 2, "ws_item_sk": 2, "ws_list_price": 10.0, "ws_quantity": 1, "ws_sold_date_sk": 1}]
  // from ss in store_sales
  Const        r5, []
  // group by { item_sk: i.i_item_sk, date_sk: d.d_date_sk } into g
  Const        r6, "item_sk"
  Const        r7, "i_item_sk"
  Const        r8, "date_sk"
  Const        r9, "d_date_sk"
  // where d.d_year == 2000
  Const        r10, "d_year"
  // select g.key.item_sk
  Const        r11, "key"
  Const        r6, "item_sk"
  // from ss in store_sales
  MakeMap      r12, 0, r0
  Const        r14, []
  Move         r13, r14
  IterPrep     r15, r0
  Len          r16, r15
  Const        r17, 0
L7:
  LessInt      r18, r17, r16
  JumpIfFalse  r18, L0
  Index        r19, r15, r17
  Move         r20, r19
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  IterPrep     r21, r1
  Len          r22, r21
  Const        r23, 0
L6:
  LessInt      r24, r23, r22
  JumpIfFalse  r24, L1
  Index        r25, r21, r23
  Move         r26, r25
  Const        r27, "ss_sold_date_sk"
  Index        r28, r20, r27
  Const        r9, "d_date_sk"
  Index        r29, r26, r9
  Equal        r30, r28, r29
  JumpIfFalse  r30, L2
  // join i in item on ss.ss_item_sk == i.i_item_sk
  IterPrep     r31, r2
  Len          r32, r31
  Const        r33, 0
L5:
  LessInt      r34, r33, r32
  JumpIfFalse  r34, L2
  Index        r35, r31, r33
  Move         r36, r35
  Const        r37, "ss_item_sk"
  Index        r38, r20, r37
  Const        r7, "i_item_sk"
  Index        r39, r36, r7
  Equal        r40, r38, r39
  JumpIfFalse  r40, L3
  // where d.d_year == 2000
  Const        r10, "d_year"
  Index        r41, r26, r10
  Const        r42, 2000
  Equal        r43, r41, r42
  JumpIfFalse  r43, L3
  // from ss in store_sales
  Const        r44, "ss"
  Move         r45, r20
  Const        r46, "d"
  Move         r47, r26
  Const        r48, "i"
  Move         r49, r36
  Move         r50, r44
  Move         r51, r45
  Move         r52, r46
  Move         r53, r47
  Move         r54, r48
  Move         r55, r49
  MakeMap      r56, 3, r50
  // group by { item_sk: i.i_item_sk, date_sk: d.d_date_sk } into g
  Const        r57, "item_sk"
  Const        r7, "i_item_sk"
  Index        r58, r36, r7
  Const        r59, "date_sk"
  Const        r9, "d_date_sk"
  Index        r60, r26, r9
  Move         r61, r57
  Move         r62, r58
  Move         r63, r59
  Move         r64, r60
  MakeMap      r65, 2, r61
  Str          r66, r65
  In           r67, r66, r12
  JumpIfTrue   r67, L4
  // from ss in store_sales
  Const        r14, []
  Const        r68, "__group__"
  Const        r69, true
  Const        r11, "key"
  // group by { item_sk: i.i_item_sk, date_sk: d.d_date_sk } into g
  Move         r70, r65
  // from ss in store_sales
  Const        r71, "items"
  Move         r72, r14
  Const        r73, "count"
  Const        r74, 0
  Move         r75, r68
  Move         r76, r69
  Move         r77, r11
  Move         r78, r70
  Move         r79, r71
  Move         r80, r72
  Move         r81, r73
  Move         r82, r74
  MakeMap      r83, 4, r75
  SetIndex     r12, r66, r83
  Append       r84, r13, r83
  Move         r13, r84
L4:
  Const        r71, "items"
  Index        r85, r12, r66
  Index        r86, r85, r71
  Append       r87, r86, r56
  SetIndex     r85, r71, r87
  Const        r73, "count"
  Index        r88, r85, r73
  Const        r89, 1
  AddInt       r90, r88, r89
  SetIndex     r85, r73, r90
L3:
  // join i in item on ss.ss_item_sk == i.i_item_sk
  Const        r89, 1
  AddInt       r33, r33, r89
  Jump         L5
L2:
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  Const        r89, 1
  AddInt       r23, r23, r89
  Jump         L6
L1:
  // from ss in store_sales
  Const        r89, 1
  AddInt       r17, r17, r89
  Jump         L7
L0:
  Const        r74, 0
  Move         r91, r74
  Len          r92, r13
L9:
  LessInt      r93, r91, r92
  JumpIfFalse  r93, L8
  Index        r94, r13, r91
  Move         r95, r94
  // having count(g) > 4
  Const        r73, "count"
  Index        r96, r95, r73
  Const        r97, 4
  Less         r98, r97, r96
  JumpIfFalse  r98, L8
  // select g.key.item_sk
  Const        r11, "key"
  Index        r99, r95, r11
  Const        r6, "item_sk"
  Index        r100, r99, r6
  // from ss in store_sales
  Append       r101, r5, r100
  Move         r5, r101
  Const        r89, 1
  AddInt       r91, r91, r89
  Jump         L9
L8:
  // from ss in store_sales
  Const        r102, []
  // group by ss.ss_customer_sk into g
  Const        r103, "ss_customer_sk"
  // select { cust: g.key, sales: sum(from x in g select x.ss_quantity * x.ss_sales_price) }
  Const        r104, "cust"
  Const        r11, "key"
  Const        r105, "sales"
  Const        r106, "ss_quantity"
  Const        r107, "ss_sales_price"
  // from ss in store_sales
  IterPrep     r108, r0
  Len          r109, r108
  Const        r110, 0
  MakeMap      r111, 0, r0
  Const        r14, []
  Move         r112, r14
L12:
  LessInt      r113, r110, r109
  JumpIfFalse  r113, L10
  Index        r114, r108, r110
  Move         r20, r114
  // group by ss.ss_customer_sk into g
  Const        r103, "ss_customer_sk"
  Index        r115, r20, r103
  Str          r116, r115
  In           r117, r116, r111
  JumpIfTrue   r117, L11
  // from ss in store_sales
  Const        r14, []
  Const        r68, "__group__"
  Const        r69, true
  Const        r11, "key"
  // group by ss.ss_customer_sk into g
  Move         r118, r115
  // from ss in store_sales
  Const        r71, "items"
  Move         r119, r14
  Const        r73, "count"
  Const        r74, 0
  Move         r120, r68
  Move         r121, r69
  Move         r122, r11
  Move         r123, r118
  Move         r124, r71
  Move         r125, r119
  Move         r126, r73
  Move         r127, r74
  MakeMap      r128, 4, r120
  SetIndex     r111, r116, r128
  Append       r129, r112, r128
  Move         r112, r129
L11:
  Const        r71, "items"
  Index        r130, r111, r116
  Index        r131, r130, r71
  Append       r132, r131, r114
  SetIndex     r130, r71, r132
  Const        r73, "count"
  Index        r133, r130, r73
  Const        r89, 1
  AddInt       r134, r133, r89
  SetIndex     r130, r73, r134
  Const        r89, 1
  AddInt       r110, r110, r89
  Jump         L12
L10:
  Const        r74, 0
  Move         r135, r74
  Len          r136, r112
L16:
  LessInt      r137, r135, r136
  JumpIfFalse  r137, L13
  Index        r138, r112, r135
  Move         r95, r138
  // select { cust: g.key, sales: sum(from x in g select x.ss_quantity * x.ss_sales_price) }
  Const        r139, "cust"
  Const        r11, "key"
  Index        r140, r95, r11
  Const        r141, "sales"
  Const        r142, []
  Const        r106, "ss_quantity"
  Const        r107, "ss_sales_price"
  IterPrep     r143, r95
  Len          r144, r143
  Const        r74, 0
  Move         r145, r74
L15:
  LessInt      r146, r145, r144
  JumpIfFalse  r146, L14
  Index        r147, r143, r145
  Move         r148, r147
  Const        r106, "ss_quantity"
  Index        r149, r148, r106
  Const        r107, "ss_sales_price"
  Index        r150, r148, r107
  Mul          r151, r149, r150
  Append       r152, r142, r151
  Move         r142, r152
  Const        r89, 1
  AddInt       r145, r145, r89
  Jump         L15
L14:
  Sum          r153, r142
  Move         r154, r139
  Move         r155, r140
  Move         r156, r141
  Move         r157, r153
  MakeMap      r158, 2, r154
  // from ss in store_sales
  Append       r159, r102, r158
  Move         r102, r159
  Const        r89, 1
  AddInt       r135, r135, r89
  Jump         L16
L13:
  // let max_sales = max(from c in customer_totals select c.sales)
  Const        r160, []
  Const        r105, "sales"
  IterPrep     r161, r102
  Len          r162, r161
  Const        r74, 0
  Move         r163, r74
L18:
  LessInt      r164, r163, r162
  JumpIfFalse  r164, L17
  Index        r165, r161, r163
  Move         r166, r165
  Const        r105, "sales"
  Index        r167, r166, r105
  Append       r168, r160, r167
  Move         r160, r168
  Const        r89, 1
  AddInt       r163, r163, r89
  Jump         L18
L17:
  Max          r169, r160
  // from c in customer_totals
  Const        r170, []
  // where c.sales > 0.95 * max_sales
  Const        r105, "sales"
  // select c.cust
  Const        r104, "cust"
  // from c in customer_totals
  IterPrep     r171, r102
  Len          r172, r171
  Const        r74, 0
  Move         r173, r74
L21:
  LessInt      r174, r173, r172
  JumpIfFalse  r174, L19
  Index        r175, r171, r173
  Move         r166, r175
  // where c.sales > 0.95 * max_sales
  Const        r105, "sales"
  Index        r176, r166, r105
  Const        r177, 0.95
  MulFloat     r178, r177, r169
  LessFloat    r179, r178, r176
  JumpIfFalse  r179, L20
  // select c.cust
  Const        r104, "cust"
  Index        r180, r166, r104
  // from c in customer_totals
  Append       r181, r170, r180
  Move         r170, r181
L20:
  Const        r89, 1
  AddInt       r173, r173, r89
  Jump         L21
L19:
  // from cs in catalog_sales
  Const        r182, []
  IterPrep     r183, r3
  Len          r184, r183
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  IterPrep     r185, r1
  Len          r186, r185
  Const        r187, "cs_sold_date_sk"
  Const        r9, "d_date_sk"
  // where d.d_year == 2000 && d.d_moy == 1 && cs.cs_bill_customer_sk in best_ss_customer && cs.cs_item_sk in frequent_ss_items
  Const        r10, "d_year"
  Const        r188, "d_moy"
  Const        r189, "cs_bill_customer_sk"
  Const        r190, "cs_item_sk"
  // select cs.cs_quantity * cs.cs_list_price
  Const        r191, "cs_quantity"
  Const        r192, "cs_list_price"
  // from cs in catalog_sales
  Const        r193, 0
L27:
  LessInt      r194, r193, r184
  JumpIfFalse  r194, L22
  Index        r195, r183, r193
  Move         r196, r195
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  Const        r197, 0
L26:
  LessInt      r198, r197, r186
  JumpIfFalse  r198, L23
  Index        r199, r185, r197
  Move         r200, r199
  Const        r187, "cs_sold_date_sk"
  Index        r201, r196, r187
  Const        r9, "d_date_sk"
  Index        r202, r200, r9
  Equal        r203, r201, r202
  JumpIfFalse  r203, L24
  // where d.d_year == 2000 && d.d_moy == 1 && cs.cs_bill_customer_sk in best_ss_customer && cs.cs_item_sk in frequent_ss_items
  Const        r10, "d_year"
  Index        r204, r200, r10
  Const        r42, 2000
  Equal        r205, r204, r42
  Const        r188, "d_moy"
  Index        r206, r200, r188
  Const        r89, 1
  Equal        r207, r206, r89
  Const        r189, "cs_bill_customer_sk"
  Index        r208, r196, r189
  In           r209, r208, r170
  Const        r190, "cs_item_sk"
  Index        r210, r196, r190
  In           r211, r210, r5
  Move         r212, r205
  JumpIfFalse  r212, L25
  Move         r212, r207
  JumpIfFalse  r212, L25
  Move         r212, r209
  JumpIfFalse  r212, L25
  Move         r212, r211
L25:
  JumpIfFalse  r212, L24
  // select cs.cs_quantity * cs.cs_list_price
  Const        r191, "cs_quantity"
  Index        r213, r196, r191
  Const        r192, "cs_list_price"
  Index        r214, r196, r192
  Mul          r215, r213, r214
  // from cs in catalog_sales
  Append       r216, r182, r215
  Move         r182, r216
L24:
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  Const        r89, 1
  AddInt       r197, r197, r89
  Jump         L26
L23:
  // from cs in catalog_sales
  Const        r89, 1
  AddInt       r193, r193, r89
  Jump         L27
L22:
  // from ws in web_sales
  Const        r217, []
  IterPrep     r218, r4
  Len          r219, r218
  // join d in date_dim on ws.ws_sold_date_sk == d.d_date_sk
  IterPrep     r220, r1
  Len          r221, r220
  Const        r222, "ws_sold_date_sk"
  Const        r9, "d_date_sk"
  // where d.d_year == 2000 && d.d_moy == 1 && ws.ws_bill_customer_sk in best_ss_customer && ws.ws_item_sk in frequent_ss_items
  Const        r10, "d_year"
  Const        r188, "d_moy"
  Const        r223, "ws_bill_customer_sk"
  Const        r224, "ws_item_sk"
  // select ws.ws_quantity * ws.ws_list_price
  Const        r225, "ws_quantity"
  Const        r226, "ws_list_price"
  // from ws in web_sales
  Const        r227, 0
L33:
  LessInt      r228, r227, r219
  JumpIfFalse  r228, L28
  Index        r229, r218, r227
  Move         r230, r229
  // join d in date_dim on ws.ws_sold_date_sk == d.d_date_sk
  Const        r231, 0
L32:
  LessInt      r232, r231, r221
  JumpIfFalse  r232, L29
  Index        r233, r220, r231
  Move         r200, r233
  Const        r222, "ws_sold_date_sk"
  Index        r234, r230, r222
  Const        r9, "d_date_sk"
  Index        r235, r200, r9
  Equal        r236, r234, r235
  JumpIfFalse  r236, L30
  // where d.d_year == 2000 && d.d_moy == 1 && ws.ws_bill_customer_sk in best_ss_customer && ws.ws_item_sk in frequent_ss_items
  Const        r10, "d_year"
  Index        r237, r200, r10
  Const        r42, 2000
  Equal        r238, r237, r42
  Const        r188, "d_moy"
  Index        r239, r200, r188
  Const        r89, 1
  Equal        r240, r239, r89
  Const        r223, "ws_bill_customer_sk"
  Index        r241, r230, r223
  In           r242, r241, r170
  Const        r224, "ws_item_sk"
  Index        r243, r230, r224
  In           r244, r243, r5
  Move         r245, r238
  JumpIfFalse  r245, L31
  Move         r245, r240
  JumpIfFalse  r245, L31
  Move         r245, r242
  JumpIfFalse  r245, L31
  Move         r245, r244
L31:
  JumpIfFalse  r245, L30
  // select ws.ws_quantity * ws.ws_list_price
  Const        r225, "ws_quantity"
  Index        r246, r230, r225
  Const        r226, "ws_list_price"
  Index        r247, r230, r226
  Mul          r248, r246, r247
  // from ws in web_sales
  Append       r249, r217, r248
  Move         r217, r249
L30:
  // join d in date_dim on ws.ws_sold_date_sk == d.d_date_sk
  Const        r89, 1
  AddInt       r231, r231, r89
  Jump         L32
L29:
  // from ws in web_sales
  Const        r89, 1
  AddInt       r227, r227, r89
  Jump         L33
L28:
  // let result = sum(catalog) + sum(web)
  Sum          r250, r182
  Sum          r251, r217
  Add          r252, r250, r251
  // json(result)
  JSON         r252
  // expect result == 50.0
  Const        r253, 50.0
  EqualFloat   r254, r252, r253
  Expect       r254
  Return       r0
