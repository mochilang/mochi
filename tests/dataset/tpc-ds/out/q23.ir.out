func main (regs=255)
  // let store_sales = [
  Const        r0, [{"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 1, "ss_sales_price": 10.0, "ss_sold_date_sk": 1}, {"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 1, "ss_sales_price": 10.0, "ss_sold_date_sk": 1}, {"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 1, "ss_sales_price": 10.0, "ss_sold_date_sk": 1}, {"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 1, "ss_sales_price": 10.0, "ss_sold_date_sk": 1}, {"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 1, "ss_sales_price": 10.0, "ss_sold_date_sk": 1}, {"ss_customer_sk": 2, "ss_item_sk": 2, "ss_quantity": 1, "ss_sales_price": 10.0, "ss_sold_date_sk": 1}, {"ss_customer_sk": 2, "ss_item_sk": 2, "ss_quantity": 1, "ss_sales_price": 10.0, "ss_sold_date_sk": 1}, {"ss_customer_sk": 2, "ss_item_sk": 2, "ss_quantity": 1, "ss_sales_price": 10.0, "ss_sold_date_sk": 1}]
  // let date_dim = [ { d_date_sk: 1, d_year: 2000, d_moy: 1 } ]
  Const        r1, [{"d_date_sk": 1, "d_moy": 1, "d_year": 2000}]
  // let item = [ { i_item_sk: 1 }, { i_item_sk: 2 } ]
  Const        r2, [{"i_item_sk": 1}, {"i_item_sk": 2}]
  // let catalog_sales = [
  Const        r3, [{"cs_bill_customer_sk": 1, "cs_item_sk": 1, "cs_list_price": 10.0, "cs_quantity": 2, "cs_sold_date_sk": 1}, {"cs_bill_customer_sk": 2, "cs_item_sk": 2, "cs_list_price": 10.0, "cs_quantity": 2, "cs_sold_date_sk": 1}]
  // let web_sales = [
  Const        r4, [{"ws_bill_customer_sk": 1, "ws_item_sk": 1, "ws_list_price": 10.0, "ws_quantity": 3, "ws_sold_date_sk": 1}, {"ws_bill_customer_sk": 2, "ws_item_sk": 2, "ws_list_price": 10.0, "ws_quantity": 1, "ws_sold_date_sk": 1}]
  // from ss in store_sales
  Const        r5, []
  // group by { item_sk: i.i_item_sk, date_sk: d.d_date_sk } into g
  Const        r6, "item_sk"
  Const        r7, "i_item_sk"
  Const        r8, "date_sk"
  Const        r9, "d_date_sk"
  // where d.d_year == 2000
  Const        r10, "d_year"
  // select g.key.item_sk
  Const        r11, "key"
  // from ss in store_sales
  MakeMap      r12, 0, r0
  Const        r14, []
  Move         r13, r14
  IterPrep     r15, r0
  Len          r16, r15
  Const        r17, 0
  LessInt      r18, r17, r16
L7:
  JumpIfFalse  r18, L0
  Index        r19, r15, r17
  Move         r20, r19
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  IterPrep     r21, r1
  Len          r22, r21
  Const        r23, 0
  LessInt      r24, r23, r22
L6:
  JumpIfFalse  r24, L1
  Index        r25, r21, r23
  Move         r26, r25
  Const        r27, "ss_sold_date_sk"
  Index        r28, r20, r27
  Const        r9, "d_date_sk"
  Index        r29, r26, r9
  Equal        r30, r28, r29
  JumpIfFalse  r30, L2
  // join i in item on ss.ss_item_sk == i.i_item_sk
  IterPrep     r31, r2
  Len          r32, r31
  Const        r33, 0
  LessInt      r34, r33, r32
L5:
  JumpIfFalse  r34, L2
  Index        r35, r31, r33
  Move         r36, r35
  Const        r37, "ss_item_sk"
  Index        r38, r20, r37
  Const        r7, "i_item_sk"
  Index        r39, r36, r7
  Equal        r40, r38, r39
  JumpIfFalse  r40, L3
  // where d.d_year == 2000
  Const        r10, "d_year"
  Index        r41, r26, r10
  Const        r42, 2000
  Equal        r43, r41, r42
  JumpIfFalse  r43, L3
  // from ss in store_sales
  Const        r44, "ss"
  Move         r45, r20
  Const        r46, "d"
  Move         r47, r26
  Const        r48, "i"
  Move         r49, r36
  Move         r50, r44
  Move         r51, r45
  Move         r52, r46
  Move         r53, r47
  Move         r54, r48
  Move         r55, r49
  MakeMap      r56, 3, r50
  // group by { item_sk: i.i_item_sk, date_sk: d.d_date_sk } into g
  Const        r57, "item_sk"
  Const        r7, "i_item_sk"
  Index        r58, r36, r7
  Const        r59, "date_sk"
  Const        r9, "d_date_sk"
  Index        r60, r26, r9
  Move         r61, r57
  Move         r62, r58
  Move         r63, r59
  Move         r64, r60
  MakeMap      r65, 2, r61
  Str          r66, r65
  In           r67, r66, r12
  JumpIfTrue   r67, L4
  // from ss in store_sales
  Const        r14, []
  Const        r68, "__group__"
  Const        r69, true
  Const        r11, "key"
  // group by { item_sk: i.i_item_sk, date_sk: d.d_date_sk } into g
  Move         r70, r65
  // from ss in store_sales
  Const        r71, "items"
  Move         r72, r14
  Const        r73, "count"
  Const        r74, 0
  Move         r75, r68
  Move         r76, r69
  Move         r77, r11
  Move         r78, r70
  Move         r79, r71
  Move         r80, r72
  Move         r81, r73
  Move         r82, r74
  MakeMap      r83, 4, r75
  SetIndex     r12, r66, r83
  Append       r84, r13, r83
  Move         r13, r84
  Index        r85, r12, r66
L4:
  Index        r86, r85, r71
  Append       r87, r86, r56
  SetIndex     r85, r71, r87
  Index        r88, r85, r73
  Const        r89, 1
  AddInt       r90, r88, r89
  SetIndex     r85, r73, r90
  // join i in item on ss.ss_item_sk == i.i_item_sk
  AddInt       r33, r33, r89
  Jump         L5
L3:
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  AddInt       r23, r23, r89
  Jump         L6
L2:
  // from ss in store_sales
  AddInt       r17, r17, r89
  Jump         L7
L1:
  Move         r91, r74
  Len          r92, r13
  LessInt      r93, r91, r92
L0:
  JumpIfFalse  r93, L8
  Index        r94, r13, r91
  Move         r95, r94
L9:
  // having count(g) > 4
  Const        r73, "count"
  Index        r96, r95, r73
  Const        r97, 4
  Less         r98, r97, r96
  JumpIfFalse  r98, L8
  // select g.key.item_sk
  Const        r11, "key"
  Index        r99, r95, r11
  Const        r6, "item_sk"
  Index        r100, r99, r6
  // from ss in store_sales
  Append       r101, r5, r100
  Move         r5, r101
  Const        r89, 1
  AddInt       r91, r91, r89
  Jump         L9
L8:
  // select { cust: g.key, sales: sum(from x in g select x.ss_quantity * x.ss_sales_price) }
  Const        r105, "sales"
  Const        r106, "ss_quantity"
  Const        r107, "ss_sales_price"
  // from ss in store_sales
  IterPrep     r108, r0
  Len          r109, r108
  Const        r110, 0
  MakeMap      r111, 0, r0
  Const        r14, []
  Move         r112, r14
  LessInt      r113, r110, r109
  JumpIfFalse  r113, L10
  Index        r114, r108, r110
  Move         r20, r114
L12:
  // group by ss.ss_customer_sk into g
  Const        r103, "ss_customer_sk"
  Index        r115, r20, r103
  Str          r116, r115
  In           r117, r116, r111
  JumpIfTrue   r117, L11
  // from ss in store_sales
  Const        r14, []
  Const        r68, "__group__"
  Const        r69, true
  Const        r11, "key"
  // group by ss.ss_customer_sk into g
  Move         r118, r115
  // from ss in store_sales
  Const        r71, "items"
  Move         r119, r14
  Const        r73, "count"
  Const        r74, 0
  Move         r120, r68
  Move         r121, r69
  Move         r122, r11
  Move         r123, r118
  Move         r124, r71
  Move         r125, r119
  Move         r126, r73
  Move         r127, r74
  MakeMap      r128, 4, r120
  SetIndex     r111, r116, r128
  Append       r129, r112, r128
  Move         r112, r129
  Index        r130, r111, r116
  Index        r131, r130, r71
  Append       r132, r131, r114
  SetIndex     r130, r71, r132
L11:
  Index        r133, r130, r73
  Const        r89, 1
  AddInt       r134, r133, r89
  SetIndex     r130, r73, r134
  AddInt       r110, r110, r89
  Jump         L12
L10:
  // select { cust: g.key, sales: sum(from x in g select x.ss_quantity * x.ss_sales_price) }
  Const        r139, "cust"
  Const        r11, "key"
  Index        r140, r95, r11
L15:
  Const        r141, "sales"
  Const        r142, []
  Const        r106, "ss_quantity"
  Const        r107, "ss_sales_price"
  IterPrep     r143, r95
  Len          r144, r143
  Const        r74, 0
  Move         r145, r74
  LessInt      r146, r145, r144
  JumpIfFalse  r146, L13
  Index        r147, r143, r145
  Move         r148, r147
  Const        r106, "ss_quantity"
  Index        r149, r148, r106
  Const        r107, "ss_sales_price"
L14:
  Index        r150, r148, r107
  Mul          r151, r149, r150
  Append       r152, r142, r151
  Move         r142, r152
  Const        r89, 1
  AddInt       r145, r145, r89
  Jump         L14
L13:
  // from ss in store_sales
  Move         r102, r159
  Const        r89, 1
  AddInt       r135, r135, r89
  Jump         L15
