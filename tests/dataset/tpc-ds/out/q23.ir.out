func main (regs=260)
  // let store_sales = [
  Const        r0, [{"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 1, "ss_sales_price": 10, "ss_sold_date_sk": 1}, {"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 1, "ss_sales_price": 10, "ss_sold_date_sk": 1}, {"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 1, "ss_sales_price": 10, "ss_sold_date_sk": 1}, {"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 1, "ss_sales_price": 10, "ss_sold_date_sk": 1}, {"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 1, "ss_sales_price": 10, "ss_sold_date_sk": 1}, {"ss_customer_sk": 2, "ss_item_sk": 2, "ss_quantity": 1, "ss_sales_price": 10, "ss_sold_date_sk": 1}, {"ss_customer_sk": 2, "ss_item_sk": 2, "ss_quantity": 1, "ss_sales_price": 10, "ss_sold_date_sk": 1}, {"ss_customer_sk": 2, "ss_item_sk": 2, "ss_quantity": 1, "ss_sales_price": 10, "ss_sold_date_sk": 1}]
  // let date_dim = [ { d_date_sk: 1, d_year: 2000, d_moy: 1 } ]
  Const        r1, [{"d_date_sk": 1, "d_moy": 1, "d_year": 2000}]
  // let item = [ { i_item_sk: 1 }, { i_item_sk: 2 } ]
  Const        r2, [{"i_item_sk": 1}, {"i_item_sk": 2}]
  // let catalog_sales = [
  Const        r3, [{"cs_bill_customer_sk": 1, "cs_item_sk": 1, "cs_list_price": 10, "cs_quantity": 2, "cs_sold_date_sk": 1}, {"cs_bill_customer_sk": 2, "cs_item_sk": 2, "cs_list_price": 10, "cs_quantity": 2, "cs_sold_date_sk": 1}]
  // let web_sales = [
  Const        r4, [{"ws_bill_customer_sk": 1, "ws_item_sk": 1, "ws_list_price": 10, "ws_quantity": 3, "ws_sold_date_sk": 1}, {"ws_bill_customer_sk": 2, "ws_item_sk": 2, "ws_list_price": 10, "ws_quantity": 1, "ws_sold_date_sk": 1}]
  // from ss in store_sales
  Const        r5, []
  // group by { item_sk: i.i_item_sk, date_sk: d.d_date_sk } into g
  Const        r6, "item_sk"
  Const        r7, "i_item_sk"
  Const        r8, "date_sk"
  Const        r9, "d_date_sk"
  // where d.d_year == 2000
  Const        r10, "d_year"
  // select g.key.item_sk
  Const        r11, "key"
  // from ss in store_sales
  MakeMap      r12, 0, r0
  Const        r13, []
  IterPrep     r15, r0
  Len          r16, r15
  Const        r17, 0
L7:
  LessInt      r18, r17, r16
  JumpIfFalse  r18, L0
  Index        r20, r15, r17
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  IterPrep     r21, r1
  Len          r22, r21
  Const        r23, 0
L6:
  LessInt      r24, r23, r22
  JumpIfFalse  r24, L1
  Index        r26, r21, r23
  Const        r27, "ss_sold_date_sk"
  Index        r28, r20, r27
  Index        r29, r26, r9
  Equal        r30, r28, r29
  JumpIfFalse  r30, L2
  // join i in item on ss.ss_item_sk == i.i_item_sk
  IterPrep     r31, r2
  Len          r32, r31
  Const        r33, 0
L5:
  LessInt      r34, r33, r32
  JumpIfFalse  r34, L2
  Index        r36, r31, r33
  Const        r37, "ss_item_sk"
  Index        r38, r20, r37
  Index        r39, r36, r7
  Equal        r40, r38, r39
  JumpIfFalse  r40, L3
  // where d.d_year == 2000
  Index        r41, r26, r10
  Const        r42, 2000
  Equal        r43, r41, r42
  JumpIfFalse  r43, L3
  // from ss in store_sales
  Const        r44, "ss"
  Move         r45, r20
  Const        r46, "d"
  Move         r47, r26
  Const        r48, "i"
  Move         r49, r36
  MakeMap      r50, 3, r44
  // group by { item_sk: i.i_item_sk, date_sk: d.d_date_sk } into g
  Const        r51, "item_sk"
  Index        r52, r36, r7
  Const        r53, "date_sk"
  Index        r54, r26, r9
  Move         r55, r51
  Move         r56, r52
  Move         r57, r53
  Move         r58, r54
  MakeMap      r59, 2, r55
  Str          r60, r59
  In           r61, r60, r12
  JumpIfTrue   r61, L4
  // from ss in store_sales
  Const        r62, []
  Const        r63, "__group__"
  Const        r64, true
  Const        r65, "key"
  // group by { item_sk: i.i_item_sk, date_sk: d.d_date_sk } into g
  Move         r66, r59
  // from ss in store_sales
  Const        r67, "items"
  Move         r68, r62
  Const        r69, "count"
  Const        r70, 0
  Move         r71, r63
  Move         r72, r64
  Move         r73, r65
  Move         r74, r66
  Move         r75, r67
  Move         r76, r68
  Move         r77, r69
  Move         r78, r70
  MakeMap      r79, 4, r71
  SetIndex     r12, r60, r79
  Append       r13, r13, r79
L4:
  Const        r81, "items"
  Index        r82, r12, r60
  Index        r83, r82, r81
  Append       r84, r83, r50
  SetIndex     r82, r81, r84
  Const        r85, "count"
  Index        r86, r82, r85
  Const        r87, 1
  AddInt       r88, r86, r87
  SetIndex     r82, r85, r88
L3:
  // join i in item on ss.ss_item_sk == i.i_item_sk
  AddInt       r33, r33, r87
  Jump         L5
L2:
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  AddInt       r23, r23, r87
  Jump         L6
L1:
  // from ss in store_sales
  AddInt       r17, r17, r87
  Jump         L7
L0:
  Const        r90, 0
  Move         r89, r90
  Len          r91, r13
L9:
  LessInt      r92, r89, r91
  JumpIfFalse  r92, L8
  Index        r94, r13, r89
  // having count(g) > 4
  Index        r95, r94, r85
  Const        r96, 4
  Less         r97, r96, r95
  JumpIfFalse  r97, L8
  // select g.key.item_sk
  Index        r98, r94, r11
  Index        r99, r98, r6
  // from ss in store_sales
  Append       r5, r5, r99
  AddInt       r89, r89, r87
  Jump         L9
L8:
  // from ss in store_sales
  Const        r101, []
  // group by ss.ss_customer_sk into g
  Const        r102, "ss_customer_sk"
  // select { cust: g.key, sales: sum(from x in g select x.ss_quantity * x.ss_sales_price) }
  Const        r103, "cust"
  Const        r104, "sales"
  Const        r105, "ss_quantity"
  Const        r106, "ss_sales_price"
  // from ss in store_sales
  IterPrep     r107, r0
  Len          r108, r107
  Const        r109, 0
  MakeMap      r110, 0, r0
  Const        r111, []
L12:
  LessInt      r113, r109, r108
  JumpIfFalse  r113, L10
  Index        r114, r107, r109
  // group by ss.ss_customer_sk into g
  Index        r115, r114, r102
  Str          r116, r115
  In           r117, r116, r110
  JumpIfTrue   r117, L11
  // from ss in store_sales
  Const        r118, []
  Const        r119, "__group__"
  Const        r120, true
  Const        r121, "key"
  // group by ss.ss_customer_sk into g
  Move         r122, r115
  // from ss in store_sales
  Const        r123, "items"
  Move         r124, r118
  Const        r125, "count"
  Const        r126, 0
  Move         r127, r119
  Move         r128, r120
  Move         r129, r121
  Move         r130, r122
  Move         r131, r123
  Move         r132, r124
  Move         r133, r125
  Move         r134, r126
  MakeMap      r135, 4, r127
  SetIndex     r110, r116, r135
  Append       r111, r111, r135
L11:
  Index        r137, r110, r116
  Index        r138, r137, r81
  Append       r139, r138, r114
  SetIndex     r137, r81, r139
  Index        r140, r137, r85
  AddInt       r141, r140, r87
  SetIndex     r137, r85, r141
  AddInt       r109, r109, r87
  Jump         L12
L10:
  Move         r142, r90
  Len          r143, r111
L16:
  LessInt      r144, r142, r143
  JumpIfFalse  r144, L13
  Index        r94, r111, r142
  // select { cust: g.key, sales: sum(from x in g select x.ss_quantity * x.ss_sales_price) }
  Const        r146, "cust"
  Index        r147, r94, r11
  Const        r148, "sales"
  Const        r149, []
  IterPrep     r150, r94
  Len          r151, r150
  Move         r152, r90
L15:
  LessInt      r153, r152, r151
  JumpIfFalse  r153, L14
  Index        r155, r150, r152
  Index        r156, r155, r105
  Index        r157, r155, r106
  Mul          r158, r156, r157
  Append       r149, r149, r158
  AddInt       r152, r152, r87
  Jump         L15
L14:
  Sum          r160, r149
  Move         r161, r146
  Move         r162, r147
  Move         r163, r148
  Move         r164, r160
  MakeMap      r165, 2, r161
  // from ss in store_sales
  Append       r101, r101, r165
  AddInt       r142, r142, r87
  Jump         L16
L13:
  // let max_sales = max(from c in customer_totals select c.sales)
  Const        r167, []
  IterPrep     r168, r101
  Len          r169, r168
  Move         r170, r90
L18:
  LessInt      r171, r170, r169
  JumpIfFalse  r171, L17
  Index        r173, r168, r170
  Index        r174, r173, r104
  Append       r167, r167, r174
  AddInt       r170, r170, r87
  Jump         L18
L17:
  Max          r176, r167
  // from c in customer_totals
  Const        r177, []
  IterPrep     r178, r101
  Len          r179, r178
  Move         r180, r90
L21:
  LessInt      r181, r180, r179
  JumpIfFalse  r181, L19
  Index        r173, r178, r180
  // where c.sales > 0.95 * max_sales
  Index        r183, r173, r104
  Const        r184, 0.95
  MulFloat     r185, r184, r176
  LessFloat    r186, r185, r183
  JumpIfFalse  r186, L20
  // select c.cust
  Index        r187, r173, r103
  // from c in customer_totals
  Append       r177, r177, r187
L20:
  AddInt       r180, r180, r87
  Jump         L21
L19:
  // from cs in catalog_sales
  Const        r189, []
  IterPrep     r190, r3
  Len          r191, r190
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  IterPrep     r192, r1
  Len          r193, r192
  Const        r194, "cs_sold_date_sk"
  // where d.d_year == 2000 && d.d_moy == 1 && cs.cs_bill_customer_sk in best_ss_customer && cs.cs_item_sk in frequent_ss_items
  Const        r195, "d_moy"
  Const        r196, "cs_bill_customer_sk"
  Const        r197, "cs_item_sk"
  // select cs.cs_quantity * cs.cs_list_price
  Const        r198, "cs_quantity"
  Const        r199, "cs_list_price"
  // from cs in catalog_sales
  Const        r200, 0
L27:
  LessInt      r201, r200, r191
  JumpIfFalse  r201, L22
  Index        r203, r190, r200
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  Const        r204, 0
L26:
  LessInt      r205, r204, r193
  JumpIfFalse  r205, L23
  Index        r207, r192, r204
  Index        r208, r203, r194
  Index        r209, r207, r9
  Equal        r210, r208, r209
  JumpIfFalse  r210, L24
  // where d.d_year == 2000 && d.d_moy == 1 && cs.cs_bill_customer_sk in best_ss_customer && cs.cs_item_sk in frequent_ss_items
  Index        r211, r207, r10
  Equal        r212, r211, r42
  Index        r213, r207, r195
  Equal        r214, r213, r87
  Index        r215, r203, r196
  In           r216, r215, r177
  Index        r217, r203, r197
  In           r218, r217, r5
  JumpIfFalse  r212, L25
  Move         r212, r214
  JumpIfFalse  r212, L25
  Move         r212, r216
  JumpIfFalse  r212, L25
  Move         r212, r218
L25:
  JumpIfFalse  r212, L24
  // select cs.cs_quantity * cs.cs_list_price
  Index        r219, r203, r198
  Index        r220, r203, r199
  Mul          r221, r219, r220
  // from cs in catalog_sales
  Append       r189, r189, r221
L24:
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  AddInt       r204, r204, r87
  Jump         L26
L23:
  // from cs in catalog_sales
  AddInt       r200, r200, r87
  Jump         L27
L22:
  // from ws in web_sales
  Const        r223, []
  IterPrep     r224, r4
  Len          r225, r224
  // join d in date_dim on ws.ws_sold_date_sk == d.d_date_sk
  IterPrep     r226, r1
  Len          r227, r226
  Const        r228, "ws_sold_date_sk"
  // where d.d_year == 2000 && d.d_moy == 1 && ws.ws_bill_customer_sk in best_ss_customer && ws.ws_item_sk in frequent_ss_items
  Const        r229, "ws_bill_customer_sk"
  Const        r230, "ws_item_sk"
  // select ws.ws_quantity * ws.ws_list_price
  Const        r231, "ws_quantity"
  Const        r232, "ws_list_price"
  // from ws in web_sales
  Const        r233, 0
L33:
  LessInt      r234, r233, r225
  JumpIfFalse  r234, L28
  Index        r236, r224, r233
  // join d in date_dim on ws.ws_sold_date_sk == d.d_date_sk
  Const        r237, 0
L32:
  LessInt      r238, r237, r227
  JumpIfFalse  r238, L29
  Index        r207, r226, r237
  Index        r240, r236, r228
  Index        r241, r207, r9
  Equal        r242, r240, r241
  JumpIfFalse  r242, L30
  // where d.d_year == 2000 && d.d_moy == 1 && ws.ws_bill_customer_sk in best_ss_customer && ws.ws_item_sk in frequent_ss_items
  Index        r243, r207, r10
  Equal        r244, r243, r42
  Index        r245, r207, r195
  Equal        r246, r245, r87
  Index        r247, r236, r229
  In           r248, r247, r177
  Index        r249, r236, r230
  In           r250, r249, r5
  JumpIfFalse  r244, L31
  Move         r244, r246
  JumpIfFalse  r244, L31
  Move         r244, r248
  JumpIfFalse  r244, L31
  Move         r244, r250
L31:
  JumpIfFalse  r244, L30
  // select ws.ws_quantity * ws.ws_list_price
  Index        r251, r236, r231
  Index        r252, r236, r232
  Mul          r253, r251, r252
  // from ws in web_sales
  Append       r223, r223, r253
L30:
  // join d in date_dim on ws.ws_sold_date_sk == d.d_date_sk
  AddInt       r237, r237, r87
  Jump         L32
L29:
  // from ws in web_sales
  AddInt       r233, r233, r87
  Jump         L33
L28:
  // let result = sum(catalog) + sum(web)
  Sum          r255, r189
  Sum          r256, r223
  Add          r257, r255, r256
  // json(result)
  JSON         r257
  // expect result == 50.0
  Const        r258, 50
  EqualFloat   r259, r257, r258
  Expect       r259
  Return       r0
