func main (regs=261)
  // let store_sales = [
  Const        r0, [{"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 1, "ss_sales_price": 10, "ss_sold_date_sk": 1}, {"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 1, "ss_sales_price": 10, "ss_sold_date_sk": 1}, {"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 1, "ss_sales_price": 10, "ss_sold_date_sk": 1}, {"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 1, "ss_sales_price": 10, "ss_sold_date_sk": 1}, {"ss_customer_sk": 1, "ss_item_sk": 1, "ss_quantity": 1, "ss_sales_price": 10, "ss_sold_date_sk": 1}, {"ss_customer_sk": 2, "ss_item_sk": 2, "ss_quantity": 1, "ss_sales_price": 10, "ss_sold_date_sk": 1}, {"ss_customer_sk": 2, "ss_item_sk": 2, "ss_quantity": 1, "ss_sales_price": 10, "ss_sold_date_sk": 1}, {"ss_customer_sk": 2, "ss_item_sk": 2, "ss_quantity": 1, "ss_sales_price": 10, "ss_sold_date_sk": 1}]
  // let date_dim = [ { d_date_sk: 1, d_year: 2000, d_moy: 1 } ]
  Const        r1, [{"d_date_sk": 1, "d_moy": 1, "d_year": 2000}]
  // let item = [ { i_item_sk: 1 }, { i_item_sk: 2 } ]
  Const        r2, [{"i_item_sk": 1}, {"i_item_sk": 2}]
  // let catalog_sales = [
  Const        r3, [{"cs_bill_customer_sk": 1, "cs_item_sk": 1, "cs_list_price": 10, "cs_quantity": 2, "cs_sold_date_sk": 1}, {"cs_bill_customer_sk": 2, "cs_item_sk": 2, "cs_list_price": 10, "cs_quantity": 2, "cs_sold_date_sk": 1}]
  // let web_sales = [
  Const        r4, [{"ws_bill_customer_sk": 1, "ws_item_sk": 1, "ws_list_price": 10, "ws_quantity": 3, "ws_sold_date_sk": 1}, {"ws_bill_customer_sk": 2, "ws_item_sk": 2, "ws_list_price": 10, "ws_quantity": 1, "ws_sold_date_sk": 1}]
  // from ss in store_sales
  Const        r5, []
  // group by { item_sk: i.i_item_sk, date_sk: d.d_date_sk } into g
  Const        r6, "item_sk"
  Const        r7, "i_item_sk"
  Const        r8, "date_sk"
  Const        r9, "d_date_sk"
  // where d.d_year == 2000
  Const        r10, "d_year"
  // select g.key.item_sk
  Const        r11, "key"
  // from ss in store_sales
  MakeMap      r12, 0, r0
  Const        r14, []
  Move         r13, r14
  IterPrep     r15, r0
  Len          r16, r15
  Const        r17, 0
L7:
  LessInt      r18, r17, r16
  JumpIfFalse  r18, L0
  Index        r19, r15, r17
  Move         r20, r19
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  IterPrep     r21, r1
  Len          r22, r21
  Const        r23, 0
L6:
  LessInt      r24, r23, r22
  JumpIfFalse  r24, L1
  Index        r25, r21, r23
  Move         r26, r25
  Const        r27, "ss_sold_date_sk"
  Index        r28, r20, r27
  Index        r29, r26, r9
  Equal        r30, r28, r29
  JumpIfFalse  r30, L2
  // join i in item on ss.ss_item_sk == i.i_item_sk
  IterPrep     r31, r2
  Len          r32, r31
  Const        r33, 0
L5:
  LessInt      r34, r33, r32
  JumpIfFalse  r34, L2
  Index        r35, r31, r33
  Move         r36, r35
  Const        r37, "ss_item_sk"
  Index        r38, r20, r37
  Index        r39, r36, r7
  Equal        r40, r38, r39
  JumpIfFalse  r40, L3
  // where d.d_year == 2000
  Index        r41, r26, r10
  Const        r42, 2000
  Equal        r43, r41, r42
  JumpIfFalse  r43, L3
  // from ss in store_sales
  Const        r44, "ss"
  Move         r45, r20
  Const        r46, "d"
  Move         r47, r26
  Const        r48, "i"
  Move         r49, r36
  Move         r50, r44
  Move         r51, r45
  Move         r52, r46
  Move         r53, r47
  Move         r54, r48
  Move         r55, r49
  MakeMap      r56, 3, r50
  // group by { item_sk: i.i_item_sk, date_sk: d.d_date_sk } into g
  Const        r57, "item_sk"
  Index        r58, r36, r7
  Const        r59, "date_sk"
  Index        r60, r26, r9
  Move         r61, r57
  Move         r62, r58
  Move         r63, r59
  Move         r64, r60
  MakeMap      r65, 2, r61
  Str          r66, r65
  In           r67, r66, r12
  JumpIfTrue   r67, L4
  // from ss in store_sales
  Const        r68, []
  Const        r69, "__group__"
  Const        r70, true
  // group by { item_sk: i.i_item_sk, date_sk: d.d_date_sk } into g
  Move         r71, r65
  // from ss in store_sales
  Const        r72, "items"
  Move         r73, r68
  Const        r74, "count"
  Const        r75, 0
  Move         r76, r69
  Move         r77, r70
  Move         r78, r11
  Move         r79, r71
  Move         r80, r72
  Move         r81, r73
  Move         r82, r74
  Move         r83, r75
  MakeMap      r84, 4, r76
  SetIndex     r12, r66, r84
  Append       r85, r13, r84
  Move         r13, r85
L4:
  Index        r86, r12, r66
  Index        r87, r86, r72
  Append       r88, r87, r56
  SetIndex     r86, r72, r88
  Index        r89, r86, r74
  Const        r90, 1
  AddInt       r91, r89, r90
  SetIndex     r86, r74, r91
L3:
  // join i in item on ss.ss_item_sk == i.i_item_sk
  AddInt       r33, r33, r90
  Jump         L5
L2:
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  AddInt       r23, r23, r90
  Jump         L6
L1:
  // from ss in store_sales
  AddInt       r17, r17, r90
  Jump         L7
L0:
  Move         r92, r75
  Len          r93, r13
L9:
  LessInt      r94, r92, r93
  JumpIfFalse  r94, L8
  Index        r95, r13, r92
  Move         r96, r95
  // having count(g) > 4
  Index        r97, r96, r74
  Const        r98, 4
  Less         r99, r98, r97
  JumpIfFalse  r99, L8
  // select g.key.item_sk
  Index        r100, r96, r11
  Index        r101, r100, r6
  // from ss in store_sales
  Append       r102, r5, r101
  Move         r5, r102
  AddInt       r92, r92, r90
  Jump         L9
L8:
  // from ss in store_sales
  Const        r103, []
  // group by ss.ss_customer_sk into g
  Const        r104, "ss_customer_sk"
  // select { cust: g.key, sales: sum(from x in g select x.ss_quantity * x.ss_sales_price) }
  Const        r105, "cust"
  Const        r106, "sales"
  Const        r107, "ss_quantity"
  Const        r108, "ss_sales_price"
  // from ss in store_sales
  IterPrep     r109, r0
  Len          r110, r109
  Const        r111, 0
  MakeMap      r112, 0, r0
  Const        r114, []
  Move         r113, r114
L12:
  LessInt      r115, r111, r110
  JumpIfFalse  r115, L10
  Index        r116, r109, r111
  Move         r20, r116
  // group by ss.ss_customer_sk into g
  Index        r117, r20, r104
  Str          r118, r117
  In           r119, r118, r112
  JumpIfTrue   r119, L11
  Move         r120, r117
  // from ss in store_sales
  Move         r121, r68
  Move         r122, r69
  Move         r123, r70
  Move         r124, r11
  Move         r125, r120
  Move         r126, r72
  Move         r127, r121
  Move         r128, r74
  Move         r129, r75
  MakeMap      r130, 4, r122
  SetIndex     r112, r118, r130
  Append       r131, r113, r130
  Move         r113, r131
L11:
  Index        r132, r112, r118
  Index        r133, r132, r72
  Append       r134, r133, r116
  SetIndex     r132, r72, r134
  Index        r135, r132, r74
  AddInt       r136, r135, r90
  SetIndex     r132, r74, r136
  AddInt       r111, r111, r90
  Jump         L12
L10:
  Move         r137, r75
  Len          r138, r113
L16:
  LessInt      r139, r137, r138
  JumpIfFalse  r139, L13
  Index        r140, r113, r137
  Move         r96, r140
  // select { cust: g.key, sales: sum(from x in g select x.ss_quantity * x.ss_sales_price) }
  Const        r141, "cust"
  Index        r142, r96, r11
  Const        r143, "sales"
  Const        r144, []
  IterPrep     r145, r96
  Len          r146, r145
  Move         r147, r75
L15:
  LessInt      r148, r147, r146
  JumpIfFalse  r148, L14
  Index        r149, r145, r147
  Move         r150, r149
  Index        r151, r150, r107
  Index        r152, r150, r108
  Mul          r153, r151, r152
  Append       r154, r144, r153
  Move         r144, r154
  AddInt       r147, r147, r90
  Jump         L15
L14:
  Sum          r155, r144
  Move         r156, r141
  Move         r157, r142
  Move         r158, r143
  Move         r159, r155
  MakeMap      r160, 2, r156
  // from ss in store_sales
  Append       r161, r103, r160
  Move         r103, r161
  AddInt       r137, r137, r90
  Jump         L16
L13:
  // let max_sales = max(from c in customer_totals select c.sales)
  Const        r162, []
  IterPrep     r163, r103
  Len          r164, r163
  Move         r165, r75
L18:
  LessInt      r166, r165, r164
  JumpIfFalse  r166, L17
  Index        r167, r163, r165
  Move         r168, r167
  Index        r169, r168, r106
  Append       r170, r162, r169
  Move         r162, r170
  AddInt       r165, r165, r90
  Jump         L18
L17:
  Max          r171, r162
  // from c in customer_totals
  Const        r172, []
  IterPrep     r173, r103
  Len          r174, r173
  Move         r175, r75
L21:
  LessInt      r176, r175, r174
  JumpIfFalse  r176, L19
  Index        r177, r173, r175
  Move         r168, r177
  // where c.sales > 0.95 * max_sales
  Index        r178, r168, r106
  Const        r179, 0.95
  MulFloat     r180, r179, r171
  LessFloat    r181, r180, r178
  JumpIfFalse  r181, L20
  // select c.cust
  Index        r182, r168, r105
  // from c in customer_totals
  Append       r183, r172, r182
  Move         r172, r183
L20:
  AddInt       r175, r175, r90
  Jump         L21
L19:
  // from cs in catalog_sales
  Const        r184, []
  IterPrep     r185, r3
  Len          r186, r185
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  IterPrep     r187, r1
  Len          r188, r187
  Const        r189, "cs_sold_date_sk"
  // where d.d_year == 2000 && d.d_moy == 1 && cs.cs_bill_customer_sk in best_ss_customer && cs.cs_item_sk in frequent_ss_items
  Const        r190, "d_moy"
  Const        r191, "cs_bill_customer_sk"
  Const        r192, "cs_item_sk"
  // select cs.cs_quantity * cs.cs_list_price
  Const        r193, "cs_quantity"
  Const        r194, "cs_list_price"
  // from cs in catalog_sales
  Const        r195, 0
L29:
  LessInt      r196, r195, r186
  JumpIfFalse  r196, L22
  Index        r197, r185, r195
  Move         r198, r197
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  Const        r199, 0
L28:
  LessInt      r200, r199, r188
  JumpIfFalse  r200, L23
  Index        r201, r187, r199
  Move         r202, r201
  Index        r203, r198, r189
  Index        r204, r202, r9
  Equal        r205, r203, r204
  JumpIfFalse  r205, L24
  // where d.d_year == 2000 && d.d_moy == 1 && cs.cs_bill_customer_sk in best_ss_customer && cs.cs_item_sk in frequent_ss_items
  Index        r206, r202, r10
  Equal        r207, r206, r42
  Index        r208, r202, r190
  Equal        r209, r208, r90
  Index        r210, r198, r191
  In           r211, r210, r172
  Index        r212, r198, r192
  In           r213, r212, r5
  Move         r214, r207
  JumpIfFalse  r214, L25
  Move         r214, r209
L25:
  Move         r215, r214
  JumpIfFalse  r215, L26
  Move         r215, r211
L26:
  Move         r216, r215
  JumpIfFalse  r216, L27
  Move         r216, r213
L27:
  JumpIfFalse  r216, L24
  // select cs.cs_quantity * cs.cs_list_price
  Index        r217, r198, r193
  Index        r218, r198, r194
  Mul          r219, r217, r218
  // from cs in catalog_sales
  Append       r220, r184, r219
  Move         r184, r220
L24:
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  AddInt       r199, r199, r90
  Jump         L28
L23:
  // from cs in catalog_sales
  AddInt       r195, r195, r90
  Jump         L29
L22:
  // from ws in web_sales
  Const        r221, []
  IterPrep     r222, r4
  Len          r223, r222
  // join d in date_dim on ws.ws_sold_date_sk == d.d_date_sk
  IterPrep     r224, r1
  Len          r225, r224
  Const        r226, "ws_sold_date_sk"
  // where d.d_year == 2000 && d.d_moy == 1 && ws.ws_bill_customer_sk in best_ss_customer && ws.ws_item_sk in frequent_ss_items
  Const        r227, "ws_bill_customer_sk"
  Const        r228, "ws_item_sk"
  // select ws.ws_quantity * ws.ws_list_price
  Const        r229, "ws_quantity"
  Const        r230, "ws_list_price"
  // from ws in web_sales
  Const        r231, 0
L37:
  LessInt      r232, r231, r223
  JumpIfFalse  r232, L30
  Index        r233, r222, r231
  Move         r234, r233
  // join d in date_dim on ws.ws_sold_date_sk == d.d_date_sk
  Const        r235, 0
L36:
  LessInt      r236, r235, r225
  JumpIfFalse  r236, L31
  Index        r237, r224, r235
  Move         r202, r237
  Index        r238, r234, r226
  Index        r239, r202, r9
  Equal        r240, r238, r239
  JumpIfFalse  r240, L32
  // where d.d_year == 2000 && d.d_moy == 1 && ws.ws_bill_customer_sk in best_ss_customer && ws.ws_item_sk in frequent_ss_items
  Index        r241, r202, r10
  Equal        r242, r241, r42
  Index        r243, r202, r190
  Equal        r244, r243, r90
  Index        r245, r234, r227
  In           r246, r245, r172
  Index        r247, r234, r228
  In           r248, r247, r5
  Move         r249, r242
  JumpIfFalse  r249, L33
  Move         r249, r244
L33:
  Move         r250, r249
  JumpIfFalse  r250, L34
  Move         r250, r246
L34:
  Move         r251, r250
  JumpIfFalse  r251, L35
  Move         r251, r248
L35:
  JumpIfFalse  r251, L32
  // select ws.ws_quantity * ws.ws_list_price
  Index        r252, r234, r229
  Index        r253, r234, r230
  Mul          r254, r252, r253
  // from ws in web_sales
  Append       r255, r221, r254
  Move         r221, r255
L32:
  // join d in date_dim on ws.ws_sold_date_sk == d.d_date_sk
  AddInt       r235, r235, r90
  Jump         L36
L31:
  // from ws in web_sales
  AddInt       r231, r231, r90
  Jump         L37
L30:
  // let result = sum(catalog) + sum(web)
  Sum          r256, r184
  Sum          r257, r221
  Add          r258, r256, r257
  // json(result)
  JSON         r258
  // expect result == 50.0
  Const        r259, 50
  EqualFloat   r260, r258, r259
  Expect       r260
  Return       r0
