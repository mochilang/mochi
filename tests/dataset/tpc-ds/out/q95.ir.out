func main (regs=150)
  // let web_sales = [
  Const        r0, [{"ws_ext_ship_cost": 2.0, "ws_net_profit": 5.0, "ws_order_number": 1, "ws_ship_addr_sk": 1, "ws_ship_date_sk": 1, "ws_warehouse_sk": 1, "ws_web_site_sk": 1}, {"ws_ext_ship_cost": 0.0, "ws_net_profit": 0.0, "ws_order_number": 1, "ws_ship_addr_sk": 1, "ws_ship_date_sk": 1, "ws_warehouse_sk": 2, "ws_web_site_sk": 1}]
  // let web_returns = [{wr_order_number: 1}]
  Const        r1, [{"wr_order_number": 1}]
  // let date_dim = [{d_date_sk: 1, d_date: "2001-02-01"}]
  Const        r2, [{"d_date": "2001-02-01", "d_date_sk": 1}]
  // let customer_address = [{ca_address_sk: 1, ca_state: "CA"}]
  Const        r3, [{"ca_address_sk": 1, "ca_state": "CA"}]
  // let web_site = [{web_site_sk: 1, web_company_name: "pri"}]
  Const        r4, [{"web_company_name": "pri", "web_site_sk": 1}]
  // from ws1 in web_sales
  Const        r5, []
  // where ws1.ws_order_number == ws2.ws_order_number && ws1.ws_warehouse_sk != ws2.ws_warehouse_sk
  Const        r6, "ws_order_number"
  Const        r6, "ws_order_number"
  Const        r7, "ws_warehouse_sk"
  Const        r7, "ws_warehouse_sk"
  // select {ws_order_number: ws1.ws_order_number}
  Const        r6, "ws_order_number"
  Const        r6, "ws_order_number"
  // from ws1 in web_sales
  IterPrep     r8, r0
  Len          r9, r8
  Const        r11, 0
  Move         r10, r11
L5:
  LessInt      r12, r10, r9
  JumpIfFalse  r12, L0
  Index        r13, r8, r10
  Move         r14, r13
  // from ws2 in web_sales
  IterPrep     r15, r0
  Len          r16, r15
  Const        r11, 0
  Move         r17, r11
L4:
  LessInt      r18, r17, r16
  JumpIfFalse  r18, L1
  Index        r19, r15, r17
  Move         r20, r19
  // where ws1.ws_order_number == ws2.ws_order_number && ws1.ws_warehouse_sk != ws2.ws_warehouse_sk
  Const        r6, "ws_order_number"
  Index        r21, r14, r6
  Const        r6, "ws_order_number"
  Index        r22, r20, r6
  Equal        r23, r21, r22
  Const        r7, "ws_warehouse_sk"
  Index        r24, r14, r7
  Const        r7, "ws_warehouse_sk"
  Index        r25, r20, r7
  NotEqual     r26, r24, r25
  Move         r27, r23
  JumpIfFalse  r27, L2
  Move         r27, r26
L2:
  JumpIfFalse  r27, L3
  // select {ws_order_number: ws1.ws_order_number}
  Const        r28, "ws_order_number"
  Const        r6, "ws_order_number"
  Index        r29, r14, r6
  Move         r30, r28
  Move         r31, r29
  MakeMap      r32, 1, r30
  // from ws1 in web_sales
  Append       r33, r5, r32
  Move         r5, r33
L3:
  // from ws2 in web_sales
  Const        r34, 1
  AddInt       r17, r17, r34
  Jump         L4
L1:
  // from ws1 in web_sales
  Const        r34, 1
  AddInt       r10, r10, r34
  Jump         L5
L0:
  // from ws in web_sales
  Const        r35, []
  // where ca.ca_state == "CA" && w.web_company_name == "pri" &&
  Const        r36, "ca_state"
  Const        r37, "web_company_name"
  // ws.ws_order_number in (from x in ws_wh select x.ws_order_number) &&
  Const        r6, "ws_order_number"
  Const        r6, "ws_order_number"
  // ws.ws_order_number in (from wr in web_returns select wr.wr_order_number)
  Const        r6, "ws_order_number"
  Const        r38, "wr_order_number"
  // from ws in web_sales
  IterPrep     r39, r0
  Len          r40, r39
  Const        r11, 0
  Move         r41, r11
L19:
  LessInt      r42, r41, r40
  JumpIfFalse  r42, L6
  Index        r43, r39, r41
  Move         r44, r43
  // join d in date_dim on ws.ws_ship_date_sk == d.d_date_sk
  IterPrep     r45, r2
  Len          r46, r45
  Const        r47, "ws_ship_date_sk"
  Const        r48, "d_date_sk"
  // where ca.ca_state == "CA" && w.web_company_name == "pri" &&
  Const        r36, "ca_state"
  Const        r37, "web_company_name"
  // ws.ws_order_number in (from x in ws_wh select x.ws_order_number) &&
  Const        r6, "ws_order_number"
  Const        r6, "ws_order_number"
  // ws.ws_order_number in (from wr in web_returns select wr.wr_order_number)
  Const        r6, "ws_order_number"
  Const        r38, "wr_order_number"
  // join d in date_dim on ws.ws_ship_date_sk == d.d_date_sk
  Const        r11, 0
  Move         r49, r11
L18:
  LessInt      r50, r49, r46
  JumpIfFalse  r50, L7
  Index        r51, r45, r49
  Move         r52, r51
  Const        r47, "ws_ship_date_sk"
  Index        r53, r44, r47
  Const        r48, "d_date_sk"
  Index        r54, r52, r48
  Equal        r55, r53, r54
  JumpIfFalse  r55, L8
  // join ca in customer_address on ws.ws_ship_addr_sk == ca.ca_address_sk
  IterPrep     r56, r3
  Len          r57, r56
  Const        r58, "ws_ship_addr_sk"
  Const        r59, "ca_address_sk"
  // where ca.ca_state == "CA" && w.web_company_name == "pri" &&
  Const        r36, "ca_state"
  Const        r37, "web_company_name"
  // ws.ws_order_number in (from x in ws_wh select x.ws_order_number) &&
  Const        r6, "ws_order_number"
  Const        r6, "ws_order_number"
  // ws.ws_order_number in (from wr in web_returns select wr.wr_order_number)
  Const        r6, "ws_order_number"
  Const        r38, "wr_order_number"
  // join ca in customer_address on ws.ws_ship_addr_sk == ca.ca_address_sk
  Const        r11, 0
  Move         r60, r11
L17:
  LessInt      r61, r60, r57
  JumpIfFalse  r61, L8
  Index        r62, r56, r60
  Move         r63, r62
  Const        r58, "ws_ship_addr_sk"
  Index        r64, r44, r58
  Const        r59, "ca_address_sk"
  Index        r65, r63, r59
  Equal        r66, r64, r65
  JumpIfFalse  r66, L9
  // join w in web_site on ws.ws_web_site_sk == w.web_site_sk
  IterPrep     r67, r4
  Len          r68, r67
  Const        r69, "ws_web_site_sk"
  Const        r70, "web_site_sk"
  // where ca.ca_state == "CA" && w.web_company_name == "pri" &&
  Const        r36, "ca_state"
  Const        r37, "web_company_name"
  // ws.ws_order_number in (from x in ws_wh select x.ws_order_number) &&
  Const        r6, "ws_order_number"
  Const        r6, "ws_order_number"
  // ws.ws_order_number in (from wr in web_returns select wr.wr_order_number)
  Const        r6, "ws_order_number"
  Const        r38, "wr_order_number"
  // join w in web_site on ws.ws_web_site_sk == w.web_site_sk
  Const        r11, 0
  Move         r71, r11
L16:
  LessInt      r72, r71, r68
  JumpIfFalse  r72, L9
  Index        r73, r67, r71
  Move         r74, r73
  Const        r69, "ws_web_site_sk"
  Index        r75, r44, r69
  Const        r70, "web_site_sk"
  Index        r76, r74, r70
  Equal        r77, r75, r76
  JumpIfFalse  r77, L10
  // where ca.ca_state == "CA" && w.web_company_name == "pri" &&
  Const        r36, "ca_state"
  Index        r78, r63, r36
  Const        r79, "CA"
  Equal        r80, r78, r79
  Const        r37, "web_company_name"
  Index        r81, r74, r37
  Const        r82, "pri"
  Equal        r83, r81, r82
  // ws.ws_order_number in (from x in ws_wh select x.ws_order_number) &&
  Const        r6, "ws_order_number"
  Index        r84, r44, r6
  Const        r85, []
  Const        r6, "ws_order_number"
  IterPrep     r86, r5
  Len          r87, r86
  Const        r11, 0
  Move         r88, r11
L12:
  LessInt      r89, r88, r87
  JumpIfFalse  r89, L11
  Index        r90, r86, r88
  Move         r91, r90
  Const        r6, "ws_order_number"
  Index        r92, r91, r6
  Append       r93, r85, r92
  Move         r85, r93
  Const        r34, 1
  AddInt       r88, r88, r34
  Jump         L12
L11:
  In           r94, r84, r85
  // ws.ws_order_number in (from wr in web_returns select wr.wr_order_number)
  Const        r6, "ws_order_number"
  Index        r95, r44, r6
  Const        r96, []
  Const        r38, "wr_order_number"
  IterPrep     r97, r1
  Len          r98, r97
  Const        r11, 0
  Move         r99, r11
L14:
  LessInt      r100, r99, r98
  JumpIfFalse  r100, L13
  Index        r101, r97, r99
  Move         r102, r101
  Const        r38, "wr_order_number"
  Index        r103, r102, r38
  Append       r104, r96, r103
  Move         r96, r104
  Const        r34, 1
  AddInt       r99, r99, r34
  Jump         L14
L13:
  In           r105, r95, r96
  // where ca.ca_state == "CA" && w.web_company_name == "pri" &&
  Move         r106, r80
  JumpIfFalse  r106, L15
  Move         r106, r83
  JumpIfFalse  r106, L15
  Move         r106, r94
  // ws.ws_order_number in (from x in ws_wh select x.ws_order_number) &&
  JumpIfFalse  r106, L15
  Move         r106, r105
L15:
  // where ca.ca_state == "CA" && w.web_company_name == "pri" &&
  JumpIfFalse  r106, L10
  // from ws in web_sales
  Append       r107, r35, r44
  Move         r35, r107
L10:
  // join w in web_site on ws.ws_web_site_sk == w.web_site_sk
  Const        r34, 1
  Add          r71, r71, r34
  Jump         L16
L9:
  // join ca in customer_address on ws.ws_ship_addr_sk == ca.ca_address_sk
  Const        r34, 1
  Add          r60, r60, r34
  Jump         L17
L8:
  // join d in date_dim on ws.ws_ship_date_sk == d.d_date_sk
  Const        r34, 1
  Add          r49, r49, r34
  Jump         L18
L7:
  // from ws in web_sales
  Const        r34, 1
  AddInt       r41, r41, r34
  Jump         L19
L6:
  // order_count: len(distinct(from x in filtered select x.ws_order_number)),
  Const        r108, "order_count"
  Const        r109, []
  Const        r6, "ws_order_number"
  IterPrep     r110, r35
  Len          r111, r110
  Const        r11, 0
  Move         r112, r11
L21:
  LessInt      r113, r112, r111
  JumpIfFalse  r113, L20
  Index        r114, r110, r112
  Move         r91, r114
  Const        r6, "ws_order_number"
  Index        r115, r91, r6
  Append       r116, r109, r115
  Move         r109, r116
  Const        r34, 1
  AddInt       r112, r112, r34
  Jump         L21
L20:
  Distinct     117,109,0,0
  Len          r118, r117
  // total_shipping_cost: sum(from x in filtered select x.ws_ext_ship_cost),
  Const        r119, "total_shipping_cost"
  Const        r120, []
  Const        r121, "ws_ext_ship_cost"
  IterPrep     r122, r35
  Len          r123, r122
  Const        r11, 0
  Move         r124, r11
L23:
  LessInt      r125, r124, r123
  JumpIfFalse  r125, L22
  Index        r126, r122, r124
  Move         r91, r126
  Const        r121, "ws_ext_ship_cost"
  Index        r127, r91, r121
  Append       r128, r120, r127
  Move         r120, r128
  Const        r34, 1
  AddInt       r124, r124, r34
  Jump         L23
L22:
  Sum          r129, r120
  // total_net_profit: sum(from x in filtered select x.ws_net_profit)
  Const        r130, "total_net_profit"
  Const        r131, []
  Const        r132, "ws_net_profit"
  IterPrep     r133, r35
  Len          r134, r133
  Const        r11, 0
  Move         r135, r11
L25:
  LessInt      r136, r135, r134
  JumpIfFalse  r136, L24
  Index        r137, r133, r135
  Move         r91, r137
  Const        r132, "ws_net_profit"
  Index        r138, r91, r132
  Append       r139, r131, r138
  Move         r131, r139
  Const        r34, 1
  AddInt       r135, r135, r34
  Jump         L25
L24:
  Sum          r140, r131
  // order_count: len(distinct(from x in filtered select x.ws_order_number)),
  Move         r141, r108
  Move         r142, r118
  // total_shipping_cost: sum(from x in filtered select x.ws_ext_ship_cost),
  Move         r143, r119
  Move         r144, r129
  // total_net_profit: sum(from x in filtered select x.ws_net_profit)
  Move         r145, r130
  Move         r146, r140
  // let result = {
  MakeMap      r147, 3, r141
  // json(result)
  JSON         r147
  // expect result == {order_count: 1, total_shipping_cost: 2.0, total_net_profit: 5.0}
  Const        r148, {"order_count": 1, "total_net_profit": 5.0, "total_shipping_cost": 2.0}
  Equal        r149, r147, r148
  Expect       r149
  Return       r0

  // fun distinct(xs: list<any>): list<any> {
func distinct (regs=14)
  // var out = []
  Const        r1, []
  Move         r2, r1
  // for x in xs {
  IterPrep     r3, r0
  Len          r4, r3
  Const        r5, 0
L2:
  LessInt      r6, r5, r4
  JumpIfFalse  r6, L0
  Index        r7, r3, r5
  Move         r8, r7
  // if !contains(out, x) {
  Not          r10, r9
  JumpIfFalse  r10, L1
  // out = append(out, x)
  Append       r11, r2, r8
  Move         r2, r11
L1:
  // for x in xs {
  Const        r12, 1
  AddInt       r13, r5, r12
  Move         r5, r13
  Jump         L2
L0:
  // return out
  Return       r2
