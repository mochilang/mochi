func main (regs=148)
  // let web_sales = [
  Const        r0, [{"ws_ext_ship_cost": 2, "ws_net_profit": 5, "ws_order_number": 1, "ws_ship_addr_sk": 1, "ws_ship_date_sk": 1, "ws_warehouse_sk": 1, "ws_web_site_sk": 1}, {"ws_ext_ship_cost": 0, "ws_net_profit": 0, "ws_order_number": 1, "ws_ship_addr_sk": 1, "ws_ship_date_sk": 1, "ws_warehouse_sk": 2, "ws_web_site_sk": 1}]
  // let web_returns = [{wr_order_number: 1}]
  Const        r1, [{"wr_order_number": 1}]
  // let date_dim = [{d_date_sk: 1, d_date: "2001-02-01"}]
  Const        r2, [{"d_date": "2001-02-01", "d_date_sk": 1}]
  // let customer_address = [{ca_address_sk: 1, ca_state: "CA"}]
  Const        r3, [{"ca_address_sk": 1, "ca_state": "CA"}]
  // let web_site = [{web_site_sk: 1, web_company_name: "pri"}]
  Const        r4, [{"web_company_name": "pri", "web_site_sk": 1}]
  // from ws1 in web_sales
  Const        r5, []
  // where ws1.ws_order_number == ws2.ws_order_number && ws1.ws_warehouse_sk != ws2.ws_warehouse_sk
  Const        r6, "ws_order_number"
  Const        r7, "ws_warehouse_sk"
  // from ws1 in web_sales
  IterPrep     r8, r0
  Len          r9, r8
  Const        r11, 0
  Move         r10, r11
L5:
  LessInt      r12, r10, r9
  JumpIfFalse  r12, L0
  Index        r14, r8, r10
  // from ws2 in web_sales
  IterPrep     r15, r0
  Len          r16, r15
  Move         r17, r11
L4:
  LessInt      r18, r17, r16
  JumpIfFalse  r18, L1
  Index        r20, r15, r17
  // where ws1.ws_order_number == ws2.ws_order_number && ws1.ws_warehouse_sk != ws2.ws_warehouse_sk
  Index        r21, r14, r6
  Index        r22, r20, r6
  Equal        r23, r21, r22
  Index        r24, r14, r7
  Index        r25, r20, r7
  NotEqual     r26, r24, r25
  JumpIfFalse  r23, L2
  Move         r23, r26
L2:
  JumpIfFalse  r23, L3
  // select {ws_order_number: ws1.ws_order_number}
  Const        r27, "ws_order_number"
  Index        r28, r14, r6
  Move         r29, r27
  Move         r30, r28
  MakeMap      r31, 1, r29
  // from ws1 in web_sales
  Append       r5, r5, r31
L3:
  // from ws2 in web_sales
  Const        r33, 1
  AddInt       r17, r17, r33
  Jump         L4
L1:
  // from ws1 in web_sales
  AddInt       r10, r10, r33
  Jump         L5
L0:
  // from ws in web_sales
  Const        r34, []
  // where ca.ca_state == "CA" && w.web_company_name == "pri" &&
  Const        r35, "ca_state"
  Const        r36, "web_company_name"
  // ws.ws_order_number in (from wr in web_returns select wr.wr_order_number)
  Const        r37, "wr_order_number"
  // from ws in web_sales
  IterPrep     r38, r0
  Len          r39, r38
  Move         r40, r11
L19:
  LessInt      r41, r40, r39
  JumpIfFalse  r41, L6
  Index        r43, r38, r40
  // join d in date_dim on ws.ws_ship_date_sk == d.d_date_sk
  IterPrep     r44, r2
  Len          r45, r44
  Const        r46, "ws_ship_date_sk"
  Const        r47, "d_date_sk"
  Move         r48, r11
L18:
  LessInt      r49, r48, r45
  JumpIfFalse  r49, L7
  Index        r51, r44, r48
  Index        r52, r43, r46
  Index        r53, r51, r47
  Equal        r54, r52, r53
  JumpIfFalse  r54, L8
  // join ca in customer_address on ws.ws_ship_addr_sk == ca.ca_address_sk
  IterPrep     r55, r3
  Len          r56, r55
  Const        r57, "ws_ship_addr_sk"
  Const        r58, "ca_address_sk"
  Move         r59, r11
L17:
  LessInt      r60, r59, r56
  JumpIfFalse  r60, L8
  Index        r62, r55, r59
  Index        r63, r43, r57
  Index        r64, r62, r58
  Equal        r65, r63, r64
  JumpIfFalse  r65, L9
  // join w in web_site on ws.ws_web_site_sk == w.web_site_sk
  IterPrep     r66, r4
  Len          r67, r66
  Const        r68, "ws_web_site_sk"
  Const        r69, "web_site_sk"
  Move         r70, r11
L16:
  LessInt      r71, r70, r67
  JumpIfFalse  r71, L9
  Index        r73, r66, r70
  Index        r74, r43, r68
  Index        r75, r73, r69
  Equal        r76, r74, r75
  JumpIfFalse  r76, L10
  // where ca.ca_state == "CA" && w.web_company_name == "pri" &&
  Index        r77, r62, r35
  Const        r78, "CA"
  Equal        r79, r77, r78
  Index        r80, r73, r36
  Const        r81, "pri"
  Equal        r82, r80, r81
  // ws.ws_order_number in (from x in ws_wh select x.ws_order_number) &&
  Index        r83, r43, r6
  Const        r84, []
  IterPrep     r85, r5
  Len          r86, r85
  Move         r87, r11
L12:
  LessInt      r88, r87, r86
  JumpIfFalse  r88, L11
  Index        r90, r85, r87
  Index        r91, r90, r6
  Append       r84, r84, r91
  AddInt       r87, r87, r33
  Jump         L12
L11:
  In           r93, r83, r84
  // ws.ws_order_number in (from wr in web_returns select wr.wr_order_number)
  Index        r94, r43, r6
  Const        r95, []
  IterPrep     r96, r1
  Len          r97, r96
  Move         r98, r11
L14:
  LessInt      r99, r98, r97
  JumpIfFalse  r99, L13
  Index        r101, r96, r98
  Index        r102, r101, r37
  Append       r95, r95, r102
  AddInt       r98, r98, r33
  Jump         L14
L13:
  In           r104, r94, r95
  // where ca.ca_state == "CA" && w.web_company_name == "pri" &&
  JumpIfFalse  r79, L15
  Move         r79, r82
  JumpIfFalse  r79, L15
  Move         r79, r93
  // ws.ws_order_number in (from x in ws_wh select x.ws_order_number) &&
  JumpIfFalse  r79, L15
  Move         r79, r104
L15:
  // where ca.ca_state == "CA" && w.web_company_name == "pri" &&
  JumpIfFalse  r79, L10
  // from ws in web_sales
  Append       r34, r34, r43
L10:
  // join w in web_site on ws.ws_web_site_sk == w.web_site_sk
  Add          r70, r70, r33
  Jump         L16
L9:
  // join ca in customer_address on ws.ws_ship_addr_sk == ca.ca_address_sk
  Add          r59, r59, r33
  Jump         L17
L8:
  // join d in date_dim on ws.ws_ship_date_sk == d.d_date_sk
  Add          r48, r48, r33
  Jump         L18
L7:
  // from ws in web_sales
  AddInt       r40, r40, r33
  Jump         L19
L6:
  // order_count: len(distinct(from x in filtered select x.ws_order_number)),
  Const        r106, "order_count"
  Const        r107, []
  IterPrep     r108, r34
  Len          r109, r108
  Move         r110, r11
L21:
  LessInt      r111, r110, r109
  JumpIfFalse  r111, L20
  Index        r90, r108, r110
  Index        r113, r90, r6
  Append       r107, r107, r113
  AddInt       r110, r110, r33
  Jump         L21
L20:
  Distinct     115,107,0,0
  Len          r116, r115
  // total_shipping_cost: sum(from x in filtered select x.ws_ext_ship_cost),
  Const        r117, "total_shipping_cost"
  Const        r118, []
  Const        r119, "ws_ext_ship_cost"
  IterPrep     r120, r34
  Len          r121, r120
  Move         r122, r11
L23:
  LessInt      r123, r122, r121
  JumpIfFalse  r123, L22
  Index        r90, r120, r122
  Index        r125, r90, r119
  Append       r118, r118, r125
  AddInt       r122, r122, r33
  Jump         L23
L22:
  Sum          r127, r118
  // total_net_profit: sum(from x in filtered select x.ws_net_profit)
  Const        r128, "total_net_profit"
  Const        r129, []
  Const        r130, "ws_net_profit"
  IterPrep     r131, r34
  Len          r132, r131
  Move         r133, r11
L25:
  LessInt      r134, r133, r132
  JumpIfFalse  r134, L24
  Index        r90, r131, r133
  Index        r136, r90, r130
  Append       r129, r129, r136
  AddInt       r133, r133, r33
  Jump         L25
L24:
  Sum          r138, r129
  // order_count: len(distinct(from x in filtered select x.ws_order_number)),
  Move         r139, r106
  Move         r140, r116
  // total_shipping_cost: sum(from x in filtered select x.ws_ext_ship_cost),
  Move         r141, r117
  Move         r142, r127
  // total_net_profit: sum(from x in filtered select x.ws_net_profit)
  Move         r143, r128
  Move         r144, r138
  // let result = {
  MakeMap      r145, 3, r139
  // json(result)
  JSON         r145
  // expect result == {order_count: 1, total_shipping_cost: 2.0, total_net_profit: 5.0}
  Const        r146, {"order_count": 1, "total_net_profit": 5, "total_shipping_cost": 2}
  Equal        r147, r145, r146
  Expect       r147
  Return       r0

  // fun distinct(xs: list<any>): list<any> {
func distinct (regs=14)
  // var out = []
  Const        r2, []
  // for x in xs {
  IterPrep     r3, r0
  Len          r4, r3
  Const        r5, 0
L2:
  Less         r6, r5, r4
  JumpIfFalse  r6, L0
  Index        r8, r3, r5
  // if !contains(out, x) {
  Not          r10, r9
  JumpIfFalse  r10, L1
  // out = append(out, x)
  Append       r2, r2, r8
L1:
  // for x in xs {
  Const        r12, 1
  Add          r5, r5, r12
  Jump         L2
L0:
  // return out
  Return       r2
