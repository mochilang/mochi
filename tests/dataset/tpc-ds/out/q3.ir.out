func main (regs=211)
  // let date_dim = []
  Const        r0, []
  // let store_sales = []
  Const        r1, []
  // let item = []
  Const        r2, []
  // from dt in date_dim
  Const        r3, []
  // group by { d_year: dt.d_year, brand_id: i.i_brand_id, brand: i.i_brand } into g
  Const        r4, "d_year"
  Const        r5, "d_year"
  Const        r6, "brand_id"
  Const        r7, "i_brand_id"
  Const        r8, "brand"
  Const        r9, "i_brand"
  // where i.i_manufact_id == 100 && dt.d_moy == 12
  Const        r10, "i_manufact_id"
  Const        r11, "d_moy"
  // d_year: g.key.d_year,
  Const        r12, "d_year"
  Const        r13, "key"
  Const        r14, "d_year"
  // brand_id: g.key.brand_id,
  Const        r15, "brand_id"
  Const        r16, "key"
  Const        r17, "brand_id"
  // brand: g.key.brand,
  Const        r18, "brand"
  Const        r19, "key"
  Const        r20, "brand"
  // sum_agg: sum(from x in g select x.ss.ss_ext_sales_price)
  Const        r21, "sum_agg"
  Const        r22, "ss"
  Const        r23, "ss_ext_sales_price"
  // sort by [g.key.d_year,
  Const        r24, "key"
  Const        r25, "d_year"
  // -sum(from x in g select x.ss.ss_ext_sales_price),
  Const        r26, "ss"
  Const        r27, "ss_ext_sales_price"
  // g.key.brand_id]
  Const        r28, "key"
  Const        r29, "brand_id"
  // from dt in date_dim
  MakeMap      r30, 0, r0
  Const        r31, []
  IterPrep     r33, r0
  Len          r34, r33
  Const        r35, 0
L8:
  LessInt      r36, r35, r34
  JumpIfFalse  r36, L0
  Index        r38, r33, r35
  // join ss in store_sales on dt.d_date_sk == ss.ss_sold_date_sk
  IterPrep     r39, r1
  Len          r40, r39
  Const        r41, 0
L7:
  LessInt      r42, r41, r40
  JumpIfFalse  r42, L1
  Index        r44, r39, r41
  Const        r45, "d_date_sk"
  Index        r46, r38, r45
  Const        r47, "ss_sold_date_sk"
  Index        r48, r44, r47
  Equal        r49, r46, r48
  JumpIfFalse  r49, L2
  // join i in item on ss.ss_item_sk == i.i_item_sk
  IterPrep     r50, r2
  Len          r51, r50
  Const        r52, 0
L6:
  LessInt      r53, r52, r51
  JumpIfFalse  r53, L2
  Index        r55, r50, r52
  Const        r56, "ss_item_sk"
  Index        r57, r44, r56
  Const        r58, "i_item_sk"
  Index        r59, r55, r58
  Equal        r60, r57, r59
  JumpIfFalse  r60, L3
  // where i.i_manufact_id == 100 && dt.d_moy == 12
  Const        r61, "i_manufact_id"
  Index        r62, r55, r61
  Const        r63, 100
  Equal        r64, r62, r63
  Const        r65, "d_moy"
  Index        r66, r38, r65
  Const        r67, 12
  Equal        r68, r66, r67
  Move         r69, r64
  JumpIfFalse  r69, L4
  Move         r69, r68
L4:
  JumpIfFalse  r69, L3
  // from dt in date_dim
  Const        r70, "dt"
  Move         r71, r38
  Const        r72, "ss"
  Move         r73, r44
  Const        r74, "i"
  Move         r75, r55
  MakeMap      r76, 3, r70
  // group by { d_year: dt.d_year, brand_id: i.i_brand_id, brand: i.i_brand } into g
  Const        r77, "d_year"
  Const        r78, "d_year"
  Index        r79, r38, r78
  Const        r80, "brand_id"
  Const        r81, "i_brand_id"
  Index        r82, r55, r81
  Const        r83, "brand"
  Const        r84, "i_brand"
  Index        r85, r55, r84
  Move         r86, r77
  Move         r87, r79
  Move         r88, r80
  Move         r89, r82
  Move         r90, r83
  Move         r91, r85
  MakeMap      r92, 3, r86
  Str          r93, r92
  In           r94, r93, r30
  JumpIfTrue   r94, L5
  // from dt in date_dim
  Const        r95, []
  Const        r96, "__group__"
  Const        r97, true
  Const        r98, "key"
  // group by { d_year: dt.d_year, brand_id: i.i_brand_id, brand: i.i_brand } into g
  Move         r99, r92
  // from dt in date_dim
  Const        r100, "items"
  Move         r101, r95
  Const        r102, "count"
  Const        r103, 0
  Move         r104, r96
  Move         r105, r97
  Move         r106, r98
  Move         r107, r99
  Move         r108, r100
  Move         r109, r101
  Move         r110, r102
  Move         r111, r103
  MakeMap      r112, 4, r104
  SetIndex     r30, r93, r112
  Append       r31, r31, r112
L5:
  Const        r114, "items"
  Index        r115, r30, r93
  Index        r116, r115, r114
  Append       r117, r116, r76
  SetIndex     r115, r114, r117
  Const        r118, "count"
  Index        r119, r115, r118
  Const        r120, 1
  AddInt       r121, r119, r120
  SetIndex     r115, r118, r121
L3:
  // join i in item on ss.ss_item_sk == i.i_item_sk
  Const        r122, 1
  AddInt       r52, r52, r122
  Jump         L6
L2:
  // join ss in store_sales on dt.d_date_sk == ss.ss_sold_date_sk
  Const        r123, 1
  AddInt       r41, r41, r123
  Jump         L7
L1:
  // from dt in date_dim
  Const        r124, 1
  AddInt       r35, r35, r124
  Jump         L8
L0:
  Const        r125, 0
  Len          r127, r31
L14:
  LessInt      r128, r125, r127
  JumpIfFalse  r128, L9
  Index        r130, r31, r125
  // d_year: g.key.d_year,
  Const        r131, "d_year"
  Const        r132, "key"
  Index        r133, r130, r132
  Const        r134, "d_year"
  Index        r135, r133, r134
  // brand_id: g.key.brand_id,
  Const        r136, "brand_id"
  Const        r137, "key"
  Index        r138, r130, r137
  Const        r139, "brand_id"
  Index        r140, r138, r139
  // brand: g.key.brand,
  Const        r141, "brand"
  Const        r142, "key"
  Index        r143, r130, r142
  Const        r144, "brand"
  Index        r145, r143, r144
  // sum_agg: sum(from x in g select x.ss.ss_ext_sales_price)
  Const        r146, "sum_agg"
  Const        r147, []
  Const        r148, "ss"
  Const        r149, "ss_ext_sales_price"
  IterPrep     r150, r130
  Len          r151, r150
  Const        r152, 0
L11:
  LessInt      r154, r152, r151
  JumpIfFalse  r154, L10
  Index        r156, r150, r152
  Const        r157, "ss"
  Index        r158, r156, r157
  Const        r159, "ss_ext_sales_price"
  Index        r160, r158, r159
  Append       r147, r147, r160
  Const        r162, 1
  AddInt       r152, r152, r162
  Jump         L11
L10:
  Sum          r163, r147
  // d_year: g.key.d_year,
  Move         r164, r131
  Move         r165, r135
  // brand_id: g.key.brand_id,
  Move         r166, r136
  Move         r167, r140
  // brand: g.key.brand,
  Move         r168, r141
  Move         r169, r145
  // sum_agg: sum(from x in g select x.ss.ss_ext_sales_price)
  Move         r170, r146
  Move         r171, r163
  // select {
  MakeMap      r172, 4, r164
  // sort by [g.key.d_year,
  Const        r173, "key"
  Index        r174, r130, r173
  Const        r175, "d_year"
  Index        r177, r174, r175
  // -sum(from x in g select x.ss.ss_ext_sales_price),
  Const        r178, []
  Const        r179, "ss"
  Const        r180, "ss_ext_sales_price"
  IterPrep     r181, r130
  Len          r182, r181
  Const        r183, 0
L13:
  LessInt      r185, r183, r182
  JumpIfFalse  r185, L12
  Index        r156, r181, r183
  Const        r187, "ss"
  Index        r188, r156, r187
  Const        r189, "ss_ext_sales_price"
  Index        r190, r188, r189
  Append       r178, r178, r190
  Const        r192, 1
  AddInt       r183, r183, r192
  Jump         L13
L12:
  Sum          r193, r178
  Neg          r195, r193
  // g.key.brand_id]
  Const        r196, "key"
  Index        r197, r130, r196
  Const        r198, "brand_id"
  Index        r200, r197, r198
  // sort by [g.key.d_year,
  MakeList     r202, 3, r177
  // from dt in date_dim
  Move         r203, r172
  MakeList     r204, 2, r202
  Append       r3, r3, r204
  Const        r206, 1
  AddInt       r125, r125, r206
  Jump         L14
L9:
  // sort by [g.key.d_year,
  Sort         r3, r3
  // json(result)
  JSON         r3
  // expect len(result) == 0
  Len          r208, r3
  Const        r209, 0
  EqualInt     r210, r208, r209
  Expect       r210
  Return       r0
