func main (regs=160)
  // let date_dim = []
  Const        r0, []
  // from dt in date_dim
  Const        r1, []
  // group by { d_year: dt.d_year, brand_id: i.i_brand_id, brand: i.i_brand } into g
  Const        r2, "d_year"
  Const        r3, "brand_id"
  Const        r4, "i_brand_id"
  Const        r5, "brand"
  Const        r6, "i_brand"
  // where i.i_manufact_id == 100 && dt.d_moy == 12
  Const        r7, "i_manufact_id"
  Const        r8, "d_moy"
  // d_year: g.key.d_year,
  Const        r9, "key"
  // sum_agg: sum(from x in g select x.ss.ss_ext_sales_price)
  Const        r10, "sum_agg"
  Const        r11, "ss"
  Const        r12, "ss_ext_sales_price"
  // from dt in date_dim
  MakeMap      r13, 0, r0
  Const        r14, []
  IterPrep     r16, r0
  Len          r17, r16
  Const        r18, 0
L8:
  LessInt      r19, r18, r17
  JumpIfFalse  r19, L0
  Index        r21, r16, r18
  // join ss in store_sales on dt.d_date_sk == ss.ss_sold_date_sk
  IterPrep     r22, r0
  Len          r23, r22
  Const        r24, 0
L7:
  LessInt      r25, r24, r23
  JumpIfFalse  r25, L1
  Index        r27, r22, r24
  Const        r28, "d_date_sk"
  Index        r29, r21, r28
  Const        r30, "ss_sold_date_sk"
  Index        r31, r27, r30
  Equal        r32, r29, r31
  JumpIfFalse  r32, L2
  // join i in item on ss.ss_item_sk == i.i_item_sk
  IterPrep     r33, r0
  Len          r34, r33
  Const        r35, 0
L6:
  LessInt      r36, r35, r34
  JumpIfFalse  r36, L2
  Index        r38, r33, r35
  Const        r39, "ss_item_sk"
  Index        r40, r27, r39
  Const        r41, "i_item_sk"
  Index        r42, r38, r41
  Equal        r43, r40, r42
  JumpIfFalse  r43, L3
  // where i.i_manufact_id == 100 && dt.d_moy == 12
  Index        r44, r38, r7
  Const        r45, 100
  Equal        r46, r44, r45
  Index        r47, r21, r8
  Const        r48, 12
  Equal        r49, r47, r48
  JumpIfFalse  r46, L4
  Move         r46, r49
L4:
  JumpIfFalse  r46, L3
  // from dt in date_dim
  Const        r50, "dt"
  Move         r51, r21
  Move         r52, r27
  Const        r53, "i"
  Move         r54, r38
  MakeMap      r55, 3, r50
  // group by { d_year: dt.d_year, brand_id: i.i_brand_id, brand: i.i_brand } into g
  Const        r56, "d_year"
  Index        r57, r21, r2
  Const        r58, "brand_id"
  Index        r59, r38, r4
  Const        r60, "brand"
  Index        r61, r38, r6
  Move         r62, r56
  Move         r63, r57
  Move         r64, r58
  Move         r65, r59
  Move         r66, r60
  Move         r67, r61
  MakeMap      r68, 3, r62
  Str          r69, r68
  In           r70, r69, r13
  JumpIfTrue   r70, L5
  // from dt in date_dim
  Const        r71, []
  Const        r72, "__group__"
  Const        r73, true
  Const        r74, "key"
  // group by { d_year: dt.d_year, brand_id: i.i_brand_id, brand: i.i_brand } into g
  Move         r75, r68
  // from dt in date_dim
  Const        r76, "items"
  Move         r77, r71
  Const        r78, "count"
  Const        r79, 0
  Move         r80, r72
  Move         r81, r73
  Move         r82, r74
  Move         r83, r75
  Move         r84, r76
  Move         r85, r77
  Move         r86, r78
  Move         r87, r79
  MakeMap      r88, 4, r80
  SetIndex     r13, r69, r88
  Append       r14, r14, r88
L5:
  Const        r90, "items"
  Index        r91, r13, r69
  Index        r92, r91, r90
  Append       r93, r92, r55
  SetIndex     r91, r90, r93
  Const        r94, "count"
  Index        r95, r91, r94
  Const        r96, 1
  AddInt       r97, r95, r96
  SetIndex     r91, r94, r97
L3:
  // join i in item on ss.ss_item_sk == i.i_item_sk
  AddInt       r35, r35, r96
  Jump         L6
L2:
  // join ss in store_sales on dt.d_date_sk == ss.ss_sold_date_sk
  AddInt       r24, r24, r96
  Jump         L7
L1:
  // from dt in date_dim
  AddInt       r18, r18, r96
  Jump         L8
L0:
  Const        r99, 0
  Move         r98, r99
  Len          r100, r14
L14:
  LessInt      r101, r98, r100
  JumpIfFalse  r101, L9
  Index        r103, r14, r98
  // d_year: g.key.d_year,
  Const        r104, "d_year"
  Index        r105, r103, r9
  Index        r106, r105, r2
  // brand_id: g.key.brand_id,
  Const        r107, "brand_id"
  Index        r108, r103, r9
  Index        r109, r108, r3
  // brand: g.key.brand,
  Const        r110, "brand"
  Index        r111, r103, r9
  Index        r112, r111, r5
  // sum_agg: sum(from x in g select x.ss.ss_ext_sales_price)
  Const        r113, "sum_agg"
  Const        r114, []
  IterPrep     r115, r103
  Len          r116, r115
  Move         r117, r99
L11:
  LessInt      r118, r117, r116
  JumpIfFalse  r118, L10
  Index        r120, r115, r117
  Index        r121, r120, r11
  Index        r122, r121, r12
  Append       r114, r114, r122
  AddInt       r117, r117, r96
  Jump         L11
L10:
  Sum          r124, r114
  // d_year: g.key.d_year,
  Move         r125, r104
  Move         r126, r106
  // brand_id: g.key.brand_id,
  Move         r127, r107
  Move         r128, r109
  // brand: g.key.brand,
  Move         r129, r110
  Move         r130, r112
  // sum_agg: sum(from x in g select x.ss.ss_ext_sales_price)
  Move         r131, r113
  Move         r132, r124
  // select {
  MakeMap      r133, 4, r125
  // sort by [g.key.d_year,
  Index        r134, r103, r9
  Index        r136, r134, r2
  // -sum(from x in g select x.ss.ss_ext_sales_price),
  Const        r137, []
  IterPrep     r138, r103
  Len          r139, r138
  Move         r140, r99
L13:
  LessInt      r141, r140, r139
  JumpIfFalse  r141, L12
  Index        r120, r138, r140
  Index        r143, r120, r11
  Index        r144, r143, r12
  Append       r137, r137, r144
  AddInt       r140, r140, r96
  Jump         L13
L12:
  Sum          r146, r137
  Neg          r148, r146
  // g.key.brand_id]
  Index        r149, r103, r9
  Index        r151, r149, r3
  // sort by [g.key.d_year,
  MakeList     r153, 3, r136
  // from dt in date_dim
  Move         r154, r133
  MakeList     r155, 2, r153
  Append       r1, r1, r155
  AddInt       r98, r98, r96
  Jump         L14
L9:
  // sort by [g.key.d_year,
  Sort         r1, r1
  // json(result)
  JSON         r1
  // expect len(result) == 0
  Len          r158, r1
  EqualInt     r159, r158, r99
  Expect       r159
  Return       r0
