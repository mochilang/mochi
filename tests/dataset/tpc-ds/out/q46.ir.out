func main (regs=281)
  // let store_sales = [
  Const        r0, [{"ss_addr_sk": 1, "ss_coupon_amt": 5, "ss_customer_sk": 1, "ss_hdemo_sk": 1, "ss_net_profit": 20, "ss_sold_date_sk": 1, "ss_store_sk": 1, "ss_ticket_number": 1}]
  // let date_dim = [ { d_date_sk: 1, d_dow: 6, d_year: 2020 } ]
  Const        r1, [{"d_date_sk": 1, "d_dow": 6, "d_year": 2020}]
  // let store = [ { s_store_sk: 1, s_city: "CityA" } ]
  Const        r2, [{"s_city": "CityA", "s_store_sk": 1}]
  // let household_demographics = [ { hd_demo_sk: 1, hd_dep_count: 2, hd_vehicle_count: 0 } ]
  Const        r3, [{"hd_demo_sk": 1, "hd_dep_count": 2, "hd_vehicle_count": 0}]
  // let customer_address = [ { ca_address_sk: 1, ca_city: "Portland" }, { ca_address_sk: 2, ca_city: "Seattle" } ]
  Const        r4, [{"ca_address_sk": 1, "ca_city": "Portland"}, {"ca_address_sk": 2, "ca_city": "Seattle"}]
  // let customer = [ { c_customer_sk: 1, c_last_name: "Doe", c_first_name: "John", c_current_addr_sk: 2 } ]
  Const        r5, [{"c_current_addr_sk": 2, "c_customer_sk": 1, "c_first_name": "John", "c_last_name": "Doe"}]
  // let depcnt = 2
  Const        r6, 2
  // let vehcnt = 0
  Const        r7, 0
  // let year = 2020
  Const        r8, 2020
  // let cities = ["CityA"]
  Const        r9, ["CityA"]
  // from ss in store_sales
  Const        r10, []
  // group by { ss_ticket_number: ss.ss_ticket_number, ss_customer_sk: ss.ss_customer_sk, ca_city: ca.ca_city } into g
  Const        r11, "ss_ticket_number"
  Const        r12, "ss_customer_sk"
  Const        r13, "ca_city"
  // where (hd.hd_dep_count == depcnt || hd.hd_vehicle_count == vehcnt) &&
  Const        r14, "hd_dep_count"
  Const        r15, "hd_vehicle_count"
  // d.d_dow in [6,0] && d.d_year == year && s.s_city in cities
  Const        r16, "d_dow"
  Const        r17, "d_year"
  Const        r18, "s_city"
  // select { ss_ticket_number: g.key.ss_ticket_number, ss_customer_sk: g.key.ss_customer_sk, bought_city: g.key.ca_city, amt: sum(from x in g select x.ss.ss_coupon_amt), profit: sum(from x in g select x.ss.ss_net_profit) }
  Const        r19, "key"
  Const        r20, "bought_city"
  Const        r21, "amt"
  Const        r22, "ss"
  Const        r23, "ss_coupon_amt"
  Const        r24, "profit"
  Const        r25, "ss_net_profit"
  // from ss in store_sales
  MakeMap      r26, 0, r0
  Const        r28, []
  Move         r27, r28
  IterPrep     r29, r0
  Len          r30, r29
  Const        r31, 0
L15:
  LessInt      r32, r31, r30
  JumpIfFalse  r32, L0
  Index        r33, r29, r31
  Move         r34, r33
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  IterPrep     r35, r1
  Len          r36, r35
  Const        r37, 0
L14:
  LessInt      r38, r37, r36
  JumpIfFalse  r38, L1
  Index        r39, r35, r37
  Move         r40, r39
  Const        r41, "ss_sold_date_sk"
  Index        r42, r34, r41
  Const        r43, "d_date_sk"
  Index        r44, r40, r43
  Equal        r45, r42, r44
  JumpIfFalse  r45, L2
  // join s in store on ss.ss_store_sk == s.s_store_sk
  IterPrep     r46, r2
  Len          r47, r46
  Const        r48, 0
L13:
  LessInt      r49, r48, r47
  JumpIfFalse  r49, L2
  Index        r50, r46, r48
  Move         r51, r50
  Const        r52, "ss_store_sk"
  Index        r53, r34, r52
  Const        r54, "s_store_sk"
  Index        r55, r51, r54
  Equal        r56, r53, r55
  JumpIfFalse  r56, L3
  // join hd in household_demographics on ss.ss_hdemo_sk == hd.hd_demo_sk
  IterPrep     r57, r3
  Len          r58, r57
  Const        r59, 0
L12:
  LessInt      r60, r59, r58
  JumpIfFalse  r60, L3
  Index        r61, r57, r59
  Move         r62, r61
  Const        r63, "ss_hdemo_sk"
  Index        r64, r34, r63
  Const        r65, "hd_demo_sk"
  Index        r66, r62, r65
  Equal        r67, r64, r66
  JumpIfFalse  r67, L4
  // join ca in customer_address on ss.ss_addr_sk == ca.ca_address_sk
  IterPrep     r68, r4
  Len          r69, r68
  Const        r70, 0
L11:
  LessInt      r71, r70, r69
  JumpIfFalse  r71, L4
  Index        r72, r68, r70
  Move         r73, r72
  Const        r74, "ss_addr_sk"
  Index        r75, r34, r74
  Const        r76, "ca_address_sk"
  Index        r77, r73, r76
  Equal        r78, r75, r77
  JumpIfFalse  r78, L5
  // where (hd.hd_dep_count == depcnt || hd.hd_vehicle_count == vehcnt) &&
  Index        r79, r62, r14
  Equal        r80, r79, r6
  Index        r81, r62, r15
  Equal        r82, r81, r7
  Move         r83, r80
  JumpIfTrue   r83, L6
  Move         r83, r82
L6:
  // d.d_dow in [6,0] && d.d_year == year && s.s_city in cities
  Index        r84, r40, r16
  Const        r85, [6, 0]
  In           r86, r84, r85
  Index        r87, r40, r17
  Equal        r88, r87, r8
  Index        r89, r51, r18
  Const        r90, ["CityA"]
  In           r91, r89, r90
  // where (hd.hd_dep_count == depcnt || hd.hd_vehicle_count == vehcnt) &&
  Move         r92, r83
  JumpIfFalse  r92, L7
  Move         r92, r86
L7:
  // d.d_dow in [6,0] && d.d_year == year && s.s_city in cities
  Move         r93, r92
  JumpIfFalse  r93, L8
  Move         r93, r88
L8:
  Move         r94, r93
  JumpIfFalse  r94, L9
  Move         r94, r91
L9:
  // where (hd.hd_dep_count == depcnt || hd.hd_vehicle_count == vehcnt) &&
  JumpIfFalse  r94, L5
  // from ss in store_sales
  Move         r95, r34
  Const        r96, "d"
  Move         r97, r40
  Const        r98, "s"
  Move         r99, r51
  Const        r100, "hd"
  Move         r101, r62
  Const        r102, "ca"
  Move         r103, r73
  Move         r104, r22
  Move         r105, r95
  Move         r106, r96
  Move         r107, r97
  Move         r108, r98
  Move         r109, r99
  Move         r110, r100
  Move         r111, r101
  Move         r112, r102
  Move         r113, r103
  MakeMap      r114, 5, r104
  // group by { ss_ticket_number: ss.ss_ticket_number, ss_customer_sk: ss.ss_customer_sk, ca_city: ca.ca_city } into g
  Const        r115, "ss_ticket_number"
  Index        r116, r34, r11
  Const        r117, "ss_customer_sk"
  Index        r118, r34, r12
  Const        r119, "ca_city"
  Index        r120, r73, r13
  Move         r121, r115
  Move         r122, r116
  Move         r123, r117
  Move         r124, r118
  Move         r125, r119
  Move         r126, r120
  MakeMap      r127, 3, r121
  Str          r128, r127
  In           r129, r128, r26
  JumpIfTrue   r129, L10
  // from ss in store_sales
  Const        r130, []
  Const        r131, "__group__"
  Const        r132, true
  // group by { ss_ticket_number: ss.ss_ticket_number, ss_customer_sk: ss.ss_customer_sk, ca_city: ca.ca_city } into g
  Move         r133, r127
  // from ss in store_sales
  Const        r134, "items"
  Move         r135, r130
  Const        r136, "count"
  Move         r137, r131
  Move         r138, r132
  Move         r139, r19
  Move         r140, r133
  Move         r141, r134
  Move         r142, r135
  Move         r143, r136
  Move         r144, r7
  MakeMap      r145, 4, r137
  SetIndex     r26, r128, r145
  Append       r146, r27, r145
  Move         r27, r146
L10:
  Index        r147, r26, r128
  Index        r148, r147, r134
  Append       r149, r148, r114
  SetIndex     r147, r134, r149
  Index        r150, r147, r136
  Const        r151, 1
  AddInt       r152, r150, r151
  SetIndex     r147, r136, r152
L5:
  // join ca in customer_address on ss.ss_addr_sk == ca.ca_address_sk
  AddInt       r70, r70, r151
  Jump         L11
L4:
  // join hd in household_demographics on ss.ss_hdemo_sk == hd.hd_demo_sk
  AddInt       r59, r59, r151
  Jump         L12
L3:
  // join s in store on ss.ss_store_sk == s.s_store_sk
  AddInt       r48, r48, r151
  Jump         L13
L2:
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  AddInt       r37, r37, r151
  Jump         L14
L1:
  // from ss in store_sales
  AddInt       r31, r31, r151
  Jump         L15
L0:
  Move         r153, r7
  Len          r154, r27
L21:
  LessInt      r155, r153, r154
  JumpIfFalse  r155, L16
  Index        r156, r27, r153
  Move         r157, r156
  // select { ss_ticket_number: g.key.ss_ticket_number, ss_customer_sk: g.key.ss_customer_sk, bought_city: g.key.ca_city, amt: sum(from x in g select x.ss.ss_coupon_amt), profit: sum(from x in g select x.ss.ss_net_profit) }
  Const        r158, "ss_ticket_number"
  Index        r159, r157, r19
  Index        r160, r159, r11
  Const        r161, "ss_customer_sk"
  Index        r162, r157, r19
  Index        r163, r162, r12
  Const        r164, "bought_city"
  Index        r165, r157, r19
  Index        r166, r165, r13
  Const        r167, "amt"
  Const        r168, []
  IterPrep     r169, r157
  Len          r170, r169
  Move         r171, r7
L18:
  LessInt      r172, r171, r170
  JumpIfFalse  r172, L17
  Index        r173, r169, r171
  Move         r174, r173
  Index        r175, r174, r22
  Index        r176, r175, r23
  Append       r177, r168, r176
  Move         r168, r177
  AddInt       r171, r171, r151
  Jump         L18
L17:
  Sum          r178, r168
  Const        r179, "profit"
  Const        r180, []
  IterPrep     r181, r157
  Len          r182, r181
  Move         r183, r7
L20:
  LessInt      r184, r183, r182
  JumpIfFalse  r184, L19
  Index        r185, r181, r183
  Move         r174, r185
  Index        r186, r174, r22
  Index        r187, r186, r25
  Append       r188, r180, r187
  Move         r180, r188
  AddInt       r183, r183, r151
  Jump         L20
L19:
  Sum          r189, r180
  Move         r190, r158
  Move         r191, r160
  Move         r192, r161
  Move         r193, r163
  Move         r194, r164
  Move         r195, r166
  Move         r196, r167
  Move         r197, r178
  Move         r198, r179
  Move         r199, r189
  MakeMap      r200, 5, r190
  // from ss in store_sales
  Append       r201, r10, r200
  Move         r10, r201
  AddInt       r153, r153, r151
  Jump         L21
L16:
  // from dnrec in dn
  Const        r202, []
  // select { c_last_name: c.c_last_name, c_first_name: c.c_first_name, ca_city: current_addr.ca_city, bought_city: dnrec.bought_city, ss_ticket_number: dnrec.ss_ticket_number, amt: dnrec.amt, profit: dnrec.profit }
  Const        r203, "c_last_name"
  Const        r204, "c_first_name"
  // from dnrec in dn
  IterPrep     r205, r10
  Len          r206, r205
  Move         r207, r7
L28:
  LessInt      r208, r207, r206
  JumpIfFalse  r208, L22
  Index        r209, r205, r207
  Move         r210, r209
  // join c in customer on dnrec.ss_customer_sk == c.c_customer_sk
  IterPrep     r211, r5
  Len          r212, r211
  Const        r213, "c_customer_sk"
  Move         r214, r7
L27:
  LessInt      r215, r214, r212
  JumpIfFalse  r215, L23
  Index        r216, r211, r214
  Move         r217, r216
  Index        r218, r210, r12
  Index        r219, r217, r213
  Equal        r220, r218, r219
  JumpIfFalse  r220, L24
  // join current_addr in customer_address on c.c_current_addr_sk == current_addr.ca_address_sk
  IterPrep     r221, r4
  Len          r222, r221
  Const        r223, "c_current_addr_sk"
  Move         r224, r7
L26:
  LessInt      r225, r224, r222
  JumpIfFalse  r225, L24
  Index        r226, r221, r224
  Move         r227, r226
  Index        r228, r217, r223
  Index        r229, r227, r76
  Equal        r230, r228, r229
  JumpIfFalse  r230, L25
  // where current_addr.ca_city != dnrec.bought_city
  Index        r231, r227, r13
  Index        r232, r210, r20
  NotEqual     r233, r231, r232
  JumpIfFalse  r233, L25
  // select { c_last_name: c.c_last_name, c_first_name: c.c_first_name, ca_city: current_addr.ca_city, bought_city: dnrec.bought_city, ss_ticket_number: dnrec.ss_ticket_number, amt: dnrec.amt, profit: dnrec.profit }
  Const        r234, "c_last_name"
  Index        r235, r217, r203
  Const        r236, "c_first_name"
  Index        r237, r217, r204
  Const        r238, "ca_city"
  Index        r239, r227, r13
  Const        r240, "bought_city"
  Index        r241, r210, r20
  Const        r242, "ss_ticket_number"
  Index        r243, r210, r11
  Const        r244, "amt"
  Index        r245, r210, r21
  Const        r246, "profit"
  Index        r247, r210, r24
  Move         r248, r234
  Move         r249, r235
  Move         r250, r236
  Move         r251, r237
  Move         r252, r238
  Move         r253, r239
  Move         r254, r240
  Move         r255, r241
  Move         r256, r242
  Move         r257, r243
  Move         r258, r244
  Move         r259, r245
  Move         r260, r246
  Move         r261, r247
  MakeMap      r262, 7, r248
  // sort by [c.c_last_name, c.c_first_name, current_addr.ca_city, dnrec.bought_city, dnrec.ss_ticket_number]
  Index        r263, r217, r203
  Move         r264, r263
  Index        r265, r217, r204
  Move         r266, r265
  Index        r267, r227, r13
  Move         r268, r267
  Index        r269, r210, r20
  Move         r270, r269
  Index        r271, r210, r11
  Move         r272, r271
  MakeList     r273, 5, r264
  Move         r274, r273
  // from dnrec in dn
  Move         r275, r262
  MakeList     r276, 2, r274
  Append       r277, r202, r276
  Move         r202, r277
L25:
  // join current_addr in customer_address on c.c_current_addr_sk == current_addr.ca_address_sk
  Add          r224, r224, r151
  Jump         L26
L24:
  // join c in customer on dnrec.ss_customer_sk == c.c_customer_sk
  Add          r214, r214, r151
  Jump         L27
L23:
  // from dnrec in dn
  AddInt       r207, r207, r151
  Jump         L28
L22:
  // sort by [c.c_last_name, c.c_first_name, current_addr.ca_city, dnrec.bought_city, dnrec.ss_ticket_number]
  Sort         r278, r202
  // from dnrec in dn
  Move         r202, r278
  // json(result)
  JSON         r202
  // expect result == [
  Const        r279, [{"amt": 5, "bought_city": "Portland", "c_first_name": "John", "c_last_name": "Doe", "ca_city": "Seattle", "profit": 20, "ss_ticket_number": 1}]
  Equal        r280, r202, r279
  Expect       r280
  Return       r0
