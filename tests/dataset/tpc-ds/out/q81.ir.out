func main (regs=96)
  // let catalog_returns = [
  Const        r0, [{"amt": 40.0, "cust": 1, "state": "CA"}, {"amt": 50.0, "cust": 2, "state": "CA"}, {"amt": 81.0, "cust": 3, "state": "CA"}, {"amt": 30.0, "cust": 4, "state": "TX"}, {"amt": 20.0, "cust": 5, "state": "TX"}]
  // from r in catalog_returns
  Const        r1, []
  // group by r.state into g
  Const        r2, "state"
  // select {state: g.key, avg_amt: avg(from x in g select x.amt)}
  Const        r3, "key"
  Const        r4, "avg_amt"
  Const        r5, "amt"
  // from r in catalog_returns
  IterPrep     r6, r0
  Len          r7, r6
  Const        r8, 0
  MakeMap      r9, 0, r0
  Const        r11, []
  Move         r10, r11
L2:
  LessInt      r12, r8, r7
  JumpIfFalse  r12, L0
  Index        r13, r6, r8
  Move         r14, r13
  // group by r.state into g
  Index        r15, r14, r2
  Str          r16, r15
  In           r17, r16, r9
  JumpIfTrue   r17, L1
  // from r in catalog_returns
  Const        r18, "__group__"
  Const        r19, true
  // group by r.state into g
  Move         r20, r15
  // from r in catalog_returns
  Const        r21, "items"
  Move         r22, r11
  Const        r23, "count"
  Const        r24, 0
  Move         r25, r18
  Move         r26, r19
  Move         r27, r3
  Move         r28, r20
  Move         r29, r21
  Move         r30, r22
  Move         r31, r23
  Move         r32, r24
  MakeMap      r33, 4, r25
  SetIndex     r9, r16, r33
  Append       r34, r10, r33
  Move         r10, r34
L1:
  Index        r35, r9, r16
  Index        r36, r35, r21
  Append       r37, r36, r13
  SetIndex     r35, r21, r37
  Index        r38, r35, r23
  Const        r39, 1
  AddInt       r40, r38, r39
  SetIndex     r35, r23, r40
  AddInt       r8, r8, r39
  Jump         L2
L0:
  Move         r41, r24
  Len          r42, r10
L6:
  LessInt      r43, r41, r42
  JumpIfFalse  r43, L3
  Index        r44, r10, r41
  Move         r45, r44
  // select {state: g.key, avg_amt: avg(from x in g select x.amt)}
  Const        r46, "state"
  Index        r47, r45, r3
  Const        r48, "avg_amt"
  Const        r49, []
  IterPrep     r50, r45
  Len          r51, r50
  Move         r52, r24
L5:
  LessInt      r53, r52, r51
  JumpIfFalse  r53, L4
  Index        r54, r50, r52
  Move         r55, r54
  Index        r56, r55, r5
  Append       r57, r49, r56
  Move         r49, r57
  AddInt       r52, r52, r39
  Jump         L5
L4:
  Avg          r58, r49
  Move         r59, r46
  Move         r60, r47
  Move         r61, r48
  Move         r62, r58
  MakeMap      r63, 2, r59
  // from r in catalog_returns
  Append       r64, r1, r63
  Move         r1, r64
  AddInt       r41, r41, r39
  Jump         L6
L3:
  // first(from a in avg_list
  Const        r65, []
  IterPrep     r66, r1
  Len          r67, r66
  Move         r68, r24
L9:
  LessInt      r69, r68, r67
  JumpIfFalse  r69, L7
  Index        r70, r66, r68
  Move         r71, r70
  // where a.state == "CA"
  Index        r72, r71, r2
  Const        r73, "CA"
  Equal        r74, r72, r73
  JumpIfFalse  r74, L8
  // first(from a in avg_list
  Append       r75, r65, r71
  Move         r65, r75
L8:
  AddInt       r68, r68, r39
  Jump         L9
L7:
  First        r76, r65
  // from r in catalog_returns
  Const        r77, []
  IterPrep     r78, r0
  Len          r79, r78
  Move         r80, r24
L13:
  LessInt      r81, r80, r79
  JumpIfFalse  r81, L10
  Index        r82, r78, r80
  Move         r14, r82
  // where r.state == "CA" && r.amt > avg_state.avg_amt * 1.2
  Index        r83, r14, r2
  Index        r84, r76, r4
  Const        r85, 1.2
  MulFloat     r86, r84, r85
  Index        r87, r14, r5
  LessFloat    r88, r86, r87
  Equal        r89, r83, r73
  Move         r90, r89
  JumpIfFalse  r90, L11
  Move         r90, r88
L11:
  JumpIfFalse  r90, L12
  // select r.amt
  Index        r91, r14, r5
  // from r in catalog_returns
  Append       r92, r77, r91
  Move         r77, r92
L12:
  AddInt       r80, r80, r39
  Jump         L13
L10:
  // let result = first(result_list)
  First        r93, r77
  // json(result)
  JSON         r93
  // expect result == 81.0
  Const        r94, 81.0
  EqualFloat   r95, r93, r94
  Expect       r95
  Return       r0
