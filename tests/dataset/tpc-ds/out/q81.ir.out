func main (regs=100)
  // let catalog_returns = [
  Const        r0, [{"amt": 40, "cust": 1, "state": "CA"}, {"amt": 50, "cust": 2, "state": "CA"}, {"amt": 81, "cust": 3, "state": "CA"}, {"amt": 30, "cust": 4, "state": "TX"}, {"amt": 20, "cust": 5, "state": "TX"}]
  // from r in catalog_returns
  Const        r1, []
  // group by r.state into g
  Const        r2, "state"
  // select {state: g.key, avg_amt: avg(from x in g select x.amt)}
  Const        r3, "key"
  Const        r4, "avg_amt"
  Const        r5, "amt"
  // from r in catalog_returns
  IterPrep     r6, r0
  Len          r7, r6
  Const        r8, 0
  MakeMap      r9, 0, r0
  Const        r10, []
L2:
  LessInt      r12, r8, r7
  JumpIfFalse  r12, L0
  Index        r13, r6, r8
  // group by r.state into g
  Index        r15, r13, r2
  Str          r16, r15
  In           r17, r16, r9
  JumpIfTrue   r17, L1
  // from r in catalog_returns
  Const        r18, []
  Const        r19, "__group__"
  Const        r20, true
  Const        r21, "key"
  // group by r.state into g
  Move         r22, r15
  // from r in catalog_returns
  Const        r23, "items"
  Move         r24, r18
  Const        r25, "count"
  Const        r26, 0
  Move         r27, r19
  Move         r28, r20
  Move         r29, r21
  Move         r30, r22
  Move         r31, r23
  Move         r32, r24
  Move         r33, r25
  Move         r34, r26
  MakeMap      r35, 4, r27
  SetIndex     r9, r16, r35
  Append       r10, r10, r35
L1:
  Const        r37, "items"
  Index        r38, r9, r16
  Index        r39, r38, r37
  Append       r40, r39, r13
  SetIndex     r38, r37, r40
  Const        r41, "count"
  Index        r42, r38, r41
  Const        r43, 1
  AddInt       r44, r42, r43
  SetIndex     r38, r41, r44
  AddInt       r8, r8, r43
  Jump         L2
L0:
  Const        r46, 0
  Move         r45, r46
  Len          r47, r10
L6:
  LessInt      r48, r45, r47
  JumpIfFalse  r48, L3
  Index        r50, r10, r45
  // select {state: g.key, avg_amt: avg(from x in g select x.amt)}
  Const        r51, "state"
  Index        r52, r50, r3
  Const        r53, "avg_amt"
  Const        r54, []
  IterPrep     r55, r50
  Len          r56, r55
  Move         r57, r46
L5:
  LessInt      r58, r57, r56
  JumpIfFalse  r58, L4
  Index        r60, r55, r57
  Index        r61, r60, r5
  Append       r54, r54, r61
  AddInt       r57, r57, r43
  Jump         L5
L4:
  Avg          r63, r54
  Move         r64, r51
  Move         r65, r52
  Move         r66, r53
  Move         r67, r63
  MakeMap      r68, 2, r64
  // from r in catalog_returns
  Append       r1, r1, r68
  AddInt       r45, r45, r43
  Jump         L6
L3:
  // first(from a in avg_list
  Const        r70, []
  IterPrep     r71, r1
  Len          r72, r71
  Move         r73, r46
L9:
  LessInt      r74, r73, r72
  JumpIfFalse  r74, L7
  Index        r76, r71, r73
  // where a.state == "CA"
  Index        r77, r76, r2
  Const        r78, "CA"
  Equal        r79, r77, r78
  JumpIfFalse  r79, L8
  // first(from a in avg_list
  Append       r70, r70, r76
L8:
  AddInt       r73, r73, r43
  Jump         L9
L7:
  First        r81, r70
  // from r in catalog_returns
  Const        r82, []
  IterPrep     r83, r0
  Len          r84, r83
  Move         r85, r46
L13:
  LessInt      r86, r85, r84
  JumpIfFalse  r86, L10
  Index        r14, r83, r85
  // where r.state == "CA" && r.amt > avg_state.avg_amt * 1.2
  Index        r88, r14, r2
  Index        r89, r81, r4
  Const        r90, 1.2
  MulFloat     r91, r89, r90
  Index        r92, r14, r5
  LessFloat    r93, r91, r92
  Equal        r94, r88, r78
  JumpIfFalse  r94, L11
  Move         r94, r93
L11:
  JumpIfFalse  r94, L12
  // select r.amt
  Index        r95, r14, r5
  // from r in catalog_returns
  Append       r82, r82, r95
L12:
  AddInt       r85, r85, r43
  Jump         L13
L10:
  // let result = first(result_list)
  First        r97, r82
  // json(result)
  JSON         r97
  // expect result == 81.0
  Const        r98, 81
  EqualFloat   r99, r97, r98
  Expect       r99
  Return       r0
