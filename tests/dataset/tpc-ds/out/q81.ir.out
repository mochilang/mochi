func main (regs=97)
  // let catalog_returns = [
  Const        r0, [{"amt": 40, "cust": 1, "state": "CA"}, {"amt": 50, "cust": 2, "state": "CA"}, {"amt": 81, "cust": 3, "state": "CA"}, {"amt": 30, "cust": 4, "state": "TX"}, {"amt": 20, "cust": 5, "state": "TX"}]
  // from r in catalog_returns
  Const        r1, []
  // group by r.state into g
  Const        r2, "state"
  // select {state: g.key, avg_amt: avg(from x in g select x.amt)}
  Const        r3, "key"
  Const        r4, "avg_amt"
  Const        r5, "amt"
  // from r in catalog_returns
  IterPrep     r6, r0
  Len          r7, r6
  Const        r8, 0
  MakeMap      r9, 0, r0
  Const        r11, []
  Move         r10, r11
L2:
  LessInt      r12, r8, r7
  JumpIfFalse  r12, L0
  Index        r13, r6, r8
  Move         r14, r13
  // group by r.state into g
  Index        r15, r14, r2
  Str          r16, r15
  In           r17, r16, r9
  JumpIfTrue   r17, L1
  // from r in catalog_returns
  Const        r18, []
  Const        r19, "__group__"
  Const        r20, true
  // group by r.state into g
  Move         r21, r15
  // from r in catalog_returns
  Const        r22, "items"
  Move         r23, r18
  Const        r24, "count"
  Const        r25, 0
  Move         r26, r19
  Move         r27, r20
  Move         r28, r3
  Move         r29, r21
  Move         r30, r22
  Move         r31, r23
  Move         r32, r24
  Move         r33, r25
  MakeMap      r34, 4, r26
  SetIndex     r9, r16, r34
  Append       r35, r10, r34
  Move         r10, r35
L1:
  Index        r36, r9, r16
  Index        r37, r36, r22
  Append       r38, r37, r13
  SetIndex     r36, r22, r38
  Index        r39, r36, r24
  Const        r40, 1
  AddInt       r41, r39, r40
  SetIndex     r36, r24, r41
  AddInt       r8, r8, r40
  Jump         L2
L0:
  Move         r42, r25
  Len          r43, r10
L6:
  LessInt      r44, r42, r43
  JumpIfFalse  r44, L3
  Index        r45, r10, r42
  Move         r46, r45
  // select {state: g.key, avg_amt: avg(from x in g select x.amt)}
  Const        r47, "state"
  Index        r48, r46, r3
  Const        r49, "avg_amt"
  Const        r50, []
  IterPrep     r51, r46
  Len          r52, r51
  Move         r53, r25
L5:
  LessInt      r54, r53, r52
  JumpIfFalse  r54, L4
  Index        r55, r51, r53
  Move         r56, r55
  Index        r57, r56, r5
  Append       r58, r50, r57
  Move         r50, r58
  AddInt       r53, r53, r40
  Jump         L5
L4:
  Avg          r59, r50
  Move         r60, r47
  Move         r61, r48
  Move         r62, r49
  Move         r63, r59
  MakeMap      r64, 2, r60
  // from r in catalog_returns
  Append       r65, r1, r64
  Move         r1, r65
  AddInt       r42, r42, r40
  Jump         L6
L3:
  // first(from a in avg_list
  Const        r66, []
  IterPrep     r67, r1
  Len          r68, r67
  Move         r69, r25
L9:
  LessInt      r70, r69, r68
  JumpIfFalse  r70, L7
  Index        r71, r67, r69
  Move         r72, r71
  // where a.state == "CA"
  Index        r73, r72, r2
  Const        r74, "CA"
  Equal        r75, r73, r74
  JumpIfFalse  r75, L8
  // first(from a in avg_list
  Append       r76, r66, r72
  Move         r66, r76
L8:
  AddInt       r69, r69, r40
  Jump         L9
L7:
  First        r77, r66
  // from r in catalog_returns
  Const        r78, []
  IterPrep     r79, r0
  Len          r80, r79
  Move         r81, r25
L13:
  LessInt      r82, r81, r80
  JumpIfFalse  r82, L10
  Index        r83, r79, r81
  Move         r14, r83
  // where r.state == "CA" && r.amt > avg_state.avg_amt * 1.2
  Index        r84, r14, r2
  Index        r85, r77, r4
  Const        r86, 1.2
  MulFloat     r87, r85, r86
  Index        r88, r14, r5
  LessFloat    r89, r87, r88
  Equal        r90, r84, r74
  Move         r91, r90
  JumpIfFalse  r91, L11
  Move         r91, r89
L11:
  JumpIfFalse  r91, L12
  // select r.amt
  Index        r92, r14, r5
  // from r in catalog_returns
  Append       r93, r78, r92
  Move         r78, r93
L12:
  AddInt       r81, r81, r40
  Jump         L13
L10:
  // let result = first(result_list)
  First        r94, r78
  // json(result)
  JSON         r94
  // expect result == 81.0
  Const        r95, 81
  EqualFloat   r96, r94, r95
  Expect       r96
  Return       r0
