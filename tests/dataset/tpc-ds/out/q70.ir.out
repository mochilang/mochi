func main (regs=174)
  // let store = [
  Const        r0, [{"s_county": "Orange", "s_state": "CA", "s_store_sk": 1}, {"s_county": "Orange", "s_state": "CA", "s_store_sk": 2}, {"s_county": "Travis", "s_state": "TX", "s_store_sk": 3}]
  // let date_dim = [
  Const        r1, [{"d_date_sk": 1, "d_month_seq": 1200}, {"d_date_sk": 2, "d_month_seq": 1201}]
  // let store_sales = [
  Const        r2, [{"ss_net_profit": 10, "ss_sold_date_sk": 1, "ss_store_sk": 1}, {"ss_net_profit": 5, "ss_sold_date_sk": 1, "ss_store_sk": 2}, {"ss_net_profit": 20, "ss_sold_date_sk": 2, "ss_store_sk": 3}]
  // let dms = 1200
  Const        r3, 1200
  // from ss in store_sales
  Const        r4, []
  MakeMap      r24, 0, r0
  Const        r25, []
  IterPrep     r27, r2
  Len          r28, r27
  Const        r29, 0
L1:
  LessInt      r30, r29, r28
  JumpIfFalse  r30, L0
  Index        r32, r27, r29
  // join d in date_dim on d.d_date_sk == ss.ss_sold_date_sk
  IterPrep     r33, r1
  Len          r34, r33
  Const        r35, 0
L2:
  LessInt      r36, r35, r34
  JumpIfFalse  r36, L1
  Index        r38, r33, r35
  Const        r39, "d_date_sk"
  Index        r40, r38, r39
  Const        r41, "ss_sold_date_sk"
  Index        r42, r32, r41
  Equal        r43, r40, r42
  JumpIfFalse  r43, L2
  // join s in store on s.s_store_sk == ss.ss_store_sk
  IterPrep     r44, r0
  Len          r45, r44
  Const        r46, 0
L6:
  LessInt      r47, r46, r45
  JumpIfFalse  r47, L2
  Index        r49, r44, r46
  Const        r50, "s_store_sk"
  Index        r51, r49, r50
  Const        r52, "ss_store_sk"
  Index        r53, r32, r52
  Equal        r54, r51, r53
  JumpIfFalse  r54, L3
  // where d.d_month_seq >= dms && d.d_month_seq <= dms + 11
  Const        r55, "d_month_seq"
  Index        r56, r38, r55
  Const        r58, 1211
  LessEq       r59, r3, r56
  Const        r60, "d_month_seq"
  Index        r61, r38, r60
  LessEq       r62, r61, r58
  Move         r63, r59
  JumpIfFalse  r63, L4
  Move         r63, r62
L4:
  JumpIfFalse  r63, L3
  // from ss in store_sales
  Const        r64, "ss"
  Move         r65, r32
  Const        r66, "d"
  Move         r67, r38
  Const        r68, "s"
  Move         r69, r49
  MakeMap      r70, 3, r64
  // group by { state: s.s_state, county: s.s_county } into g
  Const        r71, "state"
  Const        r72, "s_state"
  Index        r73, r49, r72
  Const        r74, "county"
  Const        r75, "s_county"
  Index        r76, r49, r75
  Move         r77, r71
  Move         r78, r73
  Move         r79, r74
  Move         r80, r76
  MakeMap      r81, 2, r77
  Str          r82, r81
  In           r83, r82, r24
  JumpIfTrue   r83, L5
  // from ss in store_sales
  Const        r84, []
  Const        r85, "__group__"
  Const        r86, true
  Const        r87, "key"
  // group by { state: s.s_state, county: s.s_county } into g
  Move         r88, r81
  // from ss in store_sales
  Const        r89, "items"
  Move         r90, r84
  Const        r91, "count"
  Const        r92, 0
  Move         r93, r85
  Move         r94, r86
  Move         r95, r87
  Move         r96, r88
  Move         r97, r89
  Move         r98, r90
  Move         r99, r91
  Move         r100, r92
  MakeMap      r101, 4, r93
  SetIndex     r24, r82, r101
  Append       r25, r25, r101
L5:
  Const        r103, "items"
  Index        r104, r24, r82
  Index        r105, r104, r103
  Append       r106, r105, r70
  SetIndex     r104, r103, r106
  Const        r107, "count"
  Index        r108, r104, r107
  Const        r109, 1
  AddInt       r110, r108, r109
  SetIndex     r104, r107, r110
L3:
  // join s in store on s.s_store_sk == ss.ss_store_sk
  Const        r111, 1
  AddInt       r46, r46, r111
  Jump         L6
L0:
  // from ss in store_sales
  Const        r114, 0
  Len          r116, r25
L10:
  LessInt      r117, r114, r116
  JumpIfFalse  r117, L7
  Index        r119, r25, r114
  // s_state: g.key.state,
  Const        r120, "s_state"
  Const        r121, "key"
  Index        r122, r119, r121
  Const        r123, "state"
  Index        r124, r122, r123
  // s_county: g.key.county,
  Const        r125, "s_county"
  Const        r126, "key"
  Index        r127, r119, r126
  Const        r128, "county"
  Index        r129, r127, r128
  // total_sum: sum(from x in g select x.ss.ss_net_profit)
  Const        r130, "total_sum"
  Const        r131, []
  IterPrep     r134, r119
  Len          r135, r134
  Const        r136, 0
L9:
  LessInt      r138, r136, r135
  JumpIfFalse  r138, L8
  Index        r140, r134, r136
  Const        r141, "ss"
  Index        r142, r140, r141
  Const        r143, "ss_net_profit"
  Index        r144, r142, r143
  Append       r131, r131, r144
  Const        r146, 1
  AddInt       r136, r136, r146
  Jump         L9
L8:
  Sum          r147, r131
  // s_state: g.key.state,
  Move         r148, r120
  Move         r149, r124
  // s_county: g.key.county,
  Move         r150, r125
  Move         r151, r129
  // total_sum: sum(from x in g select x.ss.ss_net_profit)
  Move         r152, r130
  Move         r153, r147
  // select {
  MakeMap      r154, 3, r148
  // sort by [g.key.state, g.key.county]
  Const        r155, "key"
  Index        r156, r119, r155
  Const        r157, "state"
  Index        r159, r156, r157
  Const        r160, "key"
  MakeList     r166, 2, r159
  // from ss in store_sales
  Move         r167, r154
  MakeList     r168, 2, r166
  Append       r4, r4, r168
  Const        r170, 1
  AddInt       r114, r114, r170
  Jump         L10
L7:
  // sort by [g.key.state, g.key.county]
  Sort         r4, r4
  // json(result)
  JSON         r4
  // expect result == [
  Const        r172, [{"s_county": "Orange", "s_state": "CA", "total_sum": 15}, {"s_county": "Travis", "s_state": "TX", "total_sum": 20}]
  Equal        r173, r4, r172
  Expect       r173
  Return       r0
