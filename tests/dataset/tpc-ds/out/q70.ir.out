func main (regs=143)
  // let store = [
  Const        r0, [{"s_county": "Orange", "s_state": "CA", "s_store_sk": 1}, {"s_county": "Orange", "s_state": "CA", "s_store_sk": 2}, {"s_county": "Travis", "s_state": "TX", "s_store_sk": 3}]
  // let date_dim = [
  Const        r1, [{"d_date_sk": 1, "d_month_seq": 1200}, {"d_date_sk": 2, "d_month_seq": 1201}]
  // let store_sales = [
  Const        r2, [{"ss_net_profit": 10, "ss_sold_date_sk": 1, "ss_store_sk": 1}, {"ss_net_profit": 5, "ss_sold_date_sk": 1, "ss_store_sk": 2}, {"ss_net_profit": 20, "ss_sold_date_sk": 2, "ss_store_sk": 3}]
  // let dms = 1200
  Const        r3, 1200
  // from ss in store_sales
  Const        r4, []
  // group by { state: s.s_state, county: s.s_county } into g
  Const        r5, "state"
  Const        r6, "s_state"
  Const        r7, "county"
  Const        r8, "s_county"
  // where d.d_month_seq >= dms && d.d_month_seq <= dms + 11
  Const        r9, "d_month_seq"
  // s_state: g.key.state,
  Const        r10, "key"
  // total_sum: sum(from x in g select x.ss.ss_net_profit)
  Const        r11, "total_sum"
  Const        r12, "ss"
  Const        r13, "ss_net_profit"
  // from ss in store_sales
  MakeMap      r14, 0, r0
  Const        r16, []
  Move         r15, r16
  IterPrep     r17, r2
  Len          r18, r17
  Const        r19, 0
L8:
  LessInt      r20, r19, r18
  JumpIfFalse  r20, L0
  Index        r21, r17, r19
  Move         r22, r21
  // join d in date_dim on d.d_date_sk == ss.ss_sold_date_sk
  IterPrep     r23, r1
  Len          r24, r23
  Const        r25, 0
L7:
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L1
  Index        r27, r23, r25
  Move         r28, r27
  Const        r29, "d_date_sk"
  Index        r30, r28, r29
  Const        r31, "ss_sold_date_sk"
  Index        r32, r22, r31
  Equal        r33, r30, r32
  JumpIfFalse  r33, L2
  // join s in store on s.s_store_sk == ss.ss_store_sk
  IterPrep     r34, r0
  Len          r35, r34
  Const        r36, 0
L6:
  LessInt      r37, r36, r35
  JumpIfFalse  r37, L2
  Index        r38, r34, r36
  Move         r39, r38
  Const        r40, "s_store_sk"
  Index        r41, r39, r40
  Const        r42, "ss_store_sk"
  Index        r43, r22, r42
  Equal        r44, r41, r43
  JumpIfFalse  r44, L3
  // where d.d_month_seq >= dms && d.d_month_seq <= dms + 11
  Index        r45, r28, r9
  Const        r46, 11
  Const        r47, 1211
  LessEq       r48, r3, r45
  Index        r49, r28, r9
  LessEq       r50, r49, r47
  Move         r51, r48
  JumpIfFalse  r51, L4
  Move         r51, r50
L4:
  JumpIfFalse  r51, L3
  // from ss in store_sales
  Move         r52, r22
  Const        r53, "d"
  Move         r54, r28
  Const        r55, "s"
  Move         r56, r39
  Move         r57, r12
  Move         r58, r52
  Move         r59, r53
  Move         r60, r54
  Move         r61, r55
  Move         r62, r56
  MakeMap      r63, 3, r57
  // group by { state: s.s_state, county: s.s_county } into g
  Const        r64, "state"
  Index        r65, r39, r6
  Const        r66, "county"
  Index        r67, r39, r8
  Move         r68, r64
  Move         r69, r65
  Move         r70, r66
  Move         r71, r67
  MakeMap      r72, 2, r68
  Str          r73, r72
  In           r74, r73, r14
  JumpIfTrue   r74, L5
  // from ss in store_sales
  Const        r75, []
  Const        r76, "__group__"
  Const        r77, true
  // group by { state: s.s_state, county: s.s_county } into g
  Move         r78, r72
  // from ss in store_sales
  Const        r79, "items"
  Move         r80, r75
  Const        r81, "count"
  Const        r82, 0
  Move         r83, r76
  Move         r84, r77
  Move         r85, r10
  Move         r86, r78
  Move         r87, r79
  Move         r88, r80
  Move         r89, r81
  Move         r90, r82
  MakeMap      r91, 4, r83
  SetIndex     r14, r73, r91
  Append       r92, r15, r91
  Move         r15, r92
L5:
  Index        r93, r14, r73
  Index        r94, r93, r79
  Append       r95, r94, r63
  SetIndex     r93, r79, r95
  Index        r96, r93, r81
  Const        r97, 1
  AddInt       r98, r96, r97
  SetIndex     r93, r81, r98
L3:
  // join s in store on s.s_store_sk == ss.ss_store_sk
  AddInt       r36, r36, r97
  Jump         L6
L2:
  // join d in date_dim on d.d_date_sk == ss.ss_sold_date_sk
  AddInt       r25, r25, r97
  Jump         L7
L1:
  // from ss in store_sales
  AddInt       r19, r19, r97
  Jump         L8
L0:
  Move         r99, r82
  Len          r100, r15
L12:
  LessInt      r101, r99, r100
  JumpIfFalse  r101, L9
  Index        r102, r15, r99
  Move         r103, r102
  // s_state: g.key.state,
  Const        r104, "s_state"
  Index        r105, r103, r10
  Index        r106, r105, r5
  // s_county: g.key.county,
  Const        r107, "s_county"
  Index        r108, r103, r10
  Index        r109, r108, r7
  // total_sum: sum(from x in g select x.ss.ss_net_profit)
  Const        r110, "total_sum"
  Const        r111, []
  IterPrep     r112, r103
  Len          r113, r112
  Move         r114, r82
L11:
  LessInt      r115, r114, r113
  JumpIfFalse  r115, L10
  Index        r116, r112, r114
  Move         r117, r116
  Index        r118, r117, r12
  Index        r119, r118, r13
  Append       r120, r111, r119
  Move         r111, r120
  AddInt       r114, r114, r97
  Jump         L11
L10:
  Sum          r121, r111
  // s_state: g.key.state,
  Move         r122, r104
  Move         r123, r106
  // s_county: g.key.county,
  Move         r124, r107
  Move         r125, r109
  // total_sum: sum(from x in g select x.ss.ss_net_profit)
  Move         r126, r110
  Move         r127, r121
  // select {
  MakeMap      r128, 3, r122
  // sort by [g.key.state, g.key.county]
  Index        r129, r103, r10
  Index        r130, r129, r5
  Move         r131, r130
  Index        r132, r103, r10
  Index        r133, r132, r7
  Move         r134, r133
  MakeList     r135, 2, r131
  Move         r136, r135
  // from ss in store_sales
  Move         r137, r128
  MakeList     r138, 2, r136
  Append       r139, r4, r138
  Move         r4, r139
  AddInt       r99, r99, r97
  Jump         L12
L9:
  // sort by [g.key.state, g.key.county]
  Sort         r140, r4
  // from ss in store_sales
  Move         r4, r140
  // json(result)
  JSON         r4
  // expect result == [
  Const        r141, [{"s_county": "Orange", "s_state": "CA", "total_sum": 15}, {"s_county": "Travis", "s_state": "TX", "total_sum": 20}]
  Equal        r142, r4, r141
  Expect       r142
  Return       r0
