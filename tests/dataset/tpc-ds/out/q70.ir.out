func main (regs=142)
  // let store = [
  Const        r0, [{"s_county": "Orange", "s_state": "CA", "s_store_sk": 1}, {"s_county": "Orange", "s_state": "CA", "s_store_sk": 2}, {"s_county": "Travis", "s_state": "TX", "s_store_sk": 3}]
  // let date_dim = [
  Const        r1, [{"d_date_sk": 1, "d_month_seq": 1200}, {"d_date_sk": 2, "d_month_seq": 1201}]
  // let store_sales = [
  Const        r2, [{"ss_net_profit": 10.0, "ss_sold_date_sk": 1, "ss_store_sk": 1}, {"ss_net_profit": 5.0, "ss_sold_date_sk": 1, "ss_store_sk": 2}, {"ss_net_profit": 20.0, "ss_sold_date_sk": 2, "ss_store_sk": 3}]
  // let dms = 1200
  Const        r3, 1200
  // from ss in store_sales
  Const        r4, []
  // group by { state: s.s_state, county: s.s_county } into g
  Const        r5, "state"
  Const        r6, "s_state"
  Const        r7, "county"
  Const        r8, "s_county"
  // where d.d_month_seq >= dms && d.d_month_seq <= dms + 11
  Const        r9, "d_month_seq"
  // s_state: g.key.state,
  Const        r10, "key"
  // total_sum: sum(from x in g select x.ss.ss_net_profit)
  Const        r11, "total_sum"
  Const        r12, "ss"
  Const        r13, "ss_net_profit"
  // from ss in store_sales
  MakeMap      r14, 0, r0
  Const        r16, []
  Move         r15, r16
  IterPrep     r17, r2
  Len          r18, r17
  Const        r19, 0
  LessInt      r20, r19, r18
  JumpIfFalse  r20, L0
  Index        r21, r17, r19
  Move         r22, r21
  // join d in date_dim on d.d_date_sk == ss.ss_sold_date_sk
  IterPrep     r23, r1
  Len          r24, r23
  Const        r25, 0
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L1
  Index        r27, r23, r25
  Move         r28, r27
  Const        r29, "d_date_sk"
  Index        r30, r28, r29
  Const        r31, "ss_sold_date_sk"
  Index        r32, r22, r31
  Equal        r33, r30, r32
  JumpIfFalse  r33, L2
L5:
  // join s in store on s.s_store_sk == ss.ss_store_sk
  IterPrep     r34, r0
  Len          r35, r34
  Const        r36, 0
  LessInt      r37, r36, r35
  JumpIfFalse  r37, L2
  Index        r38, r34, r36
  Move         r39, r38
  Const        r40, "s_store_sk"
  Index        r41, r39, r40
  Const        r42, "ss_store_sk"
  Index        r43, r22, r42
  Equal        r44, r41, r43
  JumpIfFalse  r44, L3
L6:
  // where d.d_month_seq >= dms && d.d_month_seq <= dms + 11
  Const        r9, "d_month_seq"
  Index        r45, r28, r9
  Const        r3, 1200
  Const        r46, 11
  AddInt       r47, r3, r46
  LessEq       r48, r3, r45
  Index        r49, r28, r9
  LessEq       r50, r49, r47
  Move         r51, r48
  JumpIfFalse  r51, L4
  Move         r51, r50
  JumpIfFalse  r51, L3
  // from ss in store_sales
  Const        r12, "ss"
  Move         r52, r22
  Const        r53, "d"
  Move         r54, r28
  Const        r55, "s"
  Move         r56, r39
  Move         r57, r12
  Move         r58, r52
  Move         r59, r53
  Move         r60, r54
  Move         r61, r55
L4:
  Move         r62, r56
  MakeMap      r63, 3, r57
  // group by { state: s.s_state, county: s.s_county } into g
  Const        r64, "state"
  Const        r6, "s_state"
  Index        r65, r39, r6
  Const        r66, "county"
  Const        r8, "s_county"
  Index        r67, r39, r8
  Move         r68, r64
  Move         r69, r65
  Move         r70, r66
  Move         r71, r67
  MakeMap      r72, 2, r68
  Str          r73, r72
  In           r74, r73, r14
  JumpIfTrue   r74, L5
  // from ss in store_sales
  Const        r16, []
  Const        r75, "__group__"
  Const        r76, true
  Const        r10, "key"
  // group by { state: s.s_state, county: s.s_county } into g
  Move         r77, r72
  // from ss in store_sales
  Const        r78, "items"
  Move         r79, r16
  Const        r80, "count"
  Const        r81, 0
  Move         r82, r75
  Move         r83, r76
  Move         r84, r10
  Move         r85, r77
  Move         r86, r78
  Move         r87, r79
  Move         r88, r80
  Move         r89, r81
  MakeMap      r90, 4, r82
  SetIndex     r14, r73, r90
  Append       r91, r15, r90
  Move         r15, r91
  Index        r92, r14, r73
  Index        r93, r92, r78
  Append       r94, r93, r63
  SetIndex     r92, r78, r94
  Index        r95, r92, r80
  Const        r96, 1
  AddInt       r97, r95, r96
  SetIndex     r92, r80, r97
  // join s in store on s.s_store_sk == ss.ss_store_sk
  AddInt       r36, r36, r96
  Jump         L6
L3:
  // from ss in store_sales
  Move         r102, r101
  // s_state: g.key.state,
  Const        r103, "s_state"
  Const        r10, "key"
L2:
  Index        r104, r102, r10
  Const        r5, "state"
  Index        r105, r104, r5
L1:
  // s_county: g.key.county,
  Const        r106, "s_county"
  Index        r107, r102, r10
  Const        r7, "county"
L0:
  Index        r108, r107, r7
  // total_sum: sum(from x in g select x.ss.ss_net_profit)
  Const        r109, "total_sum"
  Const        r110, []
L8:
  Const        r12, "ss"
  Const        r13, "ss_net_profit"
  IterPrep     r111, r102
  Len          r112, r111
  Const        r81, 0
  Move         r113, r81
  LessInt      r114, r113, r112
  JumpIfFalse  r114, L7
  Index        r115, r111, r113
  Move         r116, r115
  Const        r12, "ss"
  Index        r117, r116, r12
  Const        r13, "ss_net_profit"
  Index        r118, r117, r13
  Append       r119, r110, r118
  Move         r110, r119
  Const        r96, 1
  AddInt       r113, r113, r96
  // s_county: g.key.county,
  Move         r123, r106
  Move         r124, r108
  // total_sum: sum(from x in g select x.ss.ss_net_profit)
  Move         r125, r109
  Move         r126, r120
  // select {
  MakeMap      r127, 3, r121
  // sort by [g.key.state, g.key.county]
  Const        r10, "key"
  Index        r132, r102, r10
  Const        r5, "state"
  Index        r133, r132, r5
  Move         r130, r133
  Index        r134, r102, r10
  Const        r7, "county"
  Index        r135, r134, r7
L7:
  Move         r131, r135
  MakeList     r136, 2, r130
  Move         r128, r136
  // from ss in store_sales
  Move         r129, r127
  MakeList     r137, 2, r128
  Append       r138, r4, r137
  Move         r4, r138
  Const        r96, 1
  AddInt       r98, r98, r96
  Jump         L8
