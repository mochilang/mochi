func main (regs=140)
  // let store = [
  Const        r0, [{"s_county": "Orange", "s_state": "CA", "s_store_sk": 1}, {"s_county": "Orange", "s_state": "CA", "s_store_sk": 2}, {"s_county": "Travis", "s_state": "TX", "s_store_sk": 3}]
  // let date_dim = [
  Const        r1, [{"d_date_sk": 1, "d_month_seq": 1200}, {"d_date_sk": 2, "d_month_seq": 1201}]
  // let store_sales = [
  Const        r2, [{"ss_net_profit": 10, "ss_sold_date_sk": 1, "ss_store_sk": 1}, {"ss_net_profit": 5, "ss_sold_date_sk": 1, "ss_store_sk": 2}, {"ss_net_profit": 20, "ss_sold_date_sk": 2, "ss_store_sk": 3}]
  // let dms = 1200
  Const        r3, 1200
  // from ss in store_sales
  Const        r4, []
  // group by { state: s.s_state, county: s.s_county } into g
  Const        r5, "state"
  Const        r6, "s_state"
  Const        r7, "county"
  Const        r8, "s_county"
  // where d.d_month_seq >= dms && d.d_month_seq <= dms + 11
  Const        r9, "d_month_seq"
  // s_state: g.key.state,
  Const        r10, "key"
  // total_sum: sum(from x in g select x.ss.ss_net_profit)
  Const        r11, "total_sum"
  Const        r12, "ss"
  Const        r13, "ss_net_profit"
  // from ss in store_sales
  MakeMap      r14, 0, r0
  Const        r16, []
  Move         r15, r16
  IterPrep     r17, r2
  Len          r18, r17
  Const        r19, 0
L8:
  LessInt      r20, r19, r18
  JumpIfFalse  r20, L0
  Index        r22, r17, r19
  // join d in date_dim on d.d_date_sk == ss.ss_sold_date_sk
  IterPrep     r23, r1
  Len          r24, r23
  Const        r25, 0
L7:
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L1
  Index        r28, r23, r25
  Const        r29, "d_date_sk"
  Index        r30, r28, r29
  Const        r31, "ss_sold_date_sk"
  Index        r32, r22, r31
  Equal        r33, r30, r32
  JumpIfFalse  r33, L2
  // join s in store on s.s_store_sk == ss.ss_store_sk
  IterPrep     r34, r0
  Len          r35, r34
  Const        r36, 0
L6:
  LessInt      r37, r36, r35
  JumpIfFalse  r37, L2
  Index        r39, r34, r36
  Const        r40, "s_store_sk"
  Index        r41, r39, r40
  Const        r42, "ss_store_sk"
  Index        r43, r22, r42
  Equal        r44, r41, r43
  JumpIfFalse  r44, L3
  // where d.d_month_seq >= dms && d.d_month_seq <= dms + 11
  Index        r45, r28, r9
  Const        r46, 11
  Const        r47, 1211
  LessEq       r48, r3, r45
  Index        r49, r28, r9
  LessEq       r50, r49, r47
  JumpIfFalse  r48, L4
  Move         r48, r50
L4:
  JumpIfFalse  r48, L3
  // from ss in store_sales
  Move         r51, r22
  Const        r52, "d"
  Move         r53, r28
  Const        r54, "s"
  Move         r55, r39
  MakeMap      r56, 3, r12
  // group by { state: s.s_state, county: s.s_county } into g
  Const        r57, "state"
  Index        r58, r39, r6
  Const        r59, "county"
  Index        r60, r39, r8
  Move         r61, r57
  Move         r62, r58
  Move         r63, r59
  Move         r64, r60
  MakeMap      r65, 2, r61
  Str          r66, r65
  In           r67, r66, r14
  JumpIfTrue   r67, L5
  // from ss in store_sales
  Const        r68, []
  Const        r69, "__group__"
  Const        r70, true
  Const        r71, "key"
  // group by { state: s.s_state, county: s.s_county } into g
  Move         r72, r65
  // from ss in store_sales
  Const        r73, "items"
  Move         r74, r68
  Const        r75, "count"
  Const        r76, 0
  Move         r77, r69
  Move         r78, r70
  Move         r79, r71
  Move         r80, r72
  Move         r81, r73
  Move         r82, r74
  Move         r83, r75
  Move         r84, r76
  MakeMap      r85, 4, r77
  SetIndex     r14, r66, r85
  Append       r15, r15, r85
L5:
  Const        r87, "items"
  Index        r88, r14, r66
  Index        r89, r88, r87
  Append       r90, r89, r56
  SetIndex     r88, r87, r90
  Const        r91, "count"
  Index        r92, r88, r91
  Const        r93, 1
  AddInt       r94, r92, r93
  SetIndex     r88, r91, r94
L3:
  // join s in store on s.s_store_sk == ss.ss_store_sk
  AddInt       r36, r36, r93
  Jump         L6
L2:
  // join d in date_dim on d.d_date_sk == ss.ss_sold_date_sk
  AddInt       r25, r25, r93
  Jump         L7
L1:
  // from ss in store_sales
  AddInt       r19, r19, r93
  Jump         L8
L0:
  Const        r96, 0
  Move         r95, r96
  Len          r97, r15
L12:
  LessInt      r98, r95, r97
  JumpIfFalse  r98, L9
  Index        r100, r15, r95
  // s_state: g.key.state,
  Const        r101, "s_state"
  Index        r102, r100, r10
  Index        r103, r102, r5
  // s_county: g.key.county,
  Const        r104, "s_county"
  Index        r105, r100, r10
  Index        r106, r105, r7
  // total_sum: sum(from x in g select x.ss.ss_net_profit)
  Const        r107, "total_sum"
  Const        r108, []
  IterPrep     r109, r100
  Len          r110, r109
  Move         r111, r96
L11:
  LessInt      r112, r111, r110
  JumpIfFalse  r112, L10
  Index        r114, r109, r111
  Index        r115, r114, r12
  Index        r116, r115, r13
  Append       r108, r108, r116
  AddInt       r111, r111, r93
  Jump         L11
L10:
  Sum          r118, r108
  // s_state: g.key.state,
  Move         r119, r101
  Move         r120, r103
  // s_county: g.key.county,
  Move         r121, r104
  Move         r122, r106
  // total_sum: sum(from x in g select x.ss.ss_net_profit)
  Move         r123, r107
  Move         r124, r118
  // select {
  MakeMap      r125, 3, r119
  // sort by [g.key.state, g.key.county]
  Index        r126, r100, r10
  Index        r128, r126, r5
  Index        r129, r100, r10
  Index        r131, r129, r7
  MakeList     r133, 2, r128
  // from ss in store_sales
  Move         r134, r125
  MakeList     r135, 2, r133
  Append       r4, r4, r135
  AddInt       r95, r95, r93
  Jump         L12
L9:
  // sort by [g.key.state, g.key.county]
  Sort         r4, r4
  // json(result)
  JSON         r4
  // expect result == [
  Const        r138, [{"s_county": "Orange", "s_state": "CA", "total_sum": 15}, {"s_county": "Travis", "s_state": "TX", "total_sum": 20}]
  Equal        r139, r4, r138
  Expect       r139
  Return       r0
