func main (regs=259)
  // let store_sales = [
  Const        r0, [{"ss_customer_sk": 1, "ss_item_sk": 1, "ss_net_profit": 50, "ss_sold_date_sk": 1, "ss_store_sk": 1, "ss_ticket_number": 1}, {"ss_customer_sk": 2, "ss_item_sk": 2, "ss_net_profit": 20, "ss_sold_date_sk": 1, "ss_store_sk": 1, "ss_ticket_number": 2}]
  // let store_returns = [
  Const        r1, [{"sr_customer_sk": 1, "sr_item_sk": 1, "sr_net_loss": 10, "sr_returned_date_sk": 2, "sr_ticket_number": 1}, {"sr_customer_sk": 2, "sr_item_sk": 2, "sr_net_loss": 5, "sr_returned_date_sk": 2, "sr_ticket_number": 2}]
  // let catalog_sales = [
  Const        r2, [{"cs_bill_customer_sk": 1, "cs_item_sk": 1, "cs_net_profit": 30, "cs_sold_date_sk": 3}, {"cs_bill_customer_sk": 2, "cs_item_sk": 2, "cs_net_profit": 15, "cs_sold_date_sk": 3}]
  // let date_dim = [
  Const        r3, [{"d_date_sk": 1, "d_moy": 4, "d_year": 2000}, {"d_date_sk": 2, "d_moy": 5, "d_year": 2000}, {"d_date_sk": 3, "d_moy": 6, "d_year": 2000}]
  // let store = [ { s_store_sk: 1, s_store_id: "S1", s_store_name: "Store1" } ]
  Const        r4, [{"s_store_id": "S1", "s_store_name": "Store1", "s_store_sk": 1}]
  // let item = [
  Const        r5, [{"i_item_desc": "Desc1", "i_item_id": "ITEM1", "i_item_sk": 1}, {"i_item_desc": "Desc2", "i_item_id": "ITEM2", "i_item_sk": 2}]
  // from ss in store_sales
  Const        r6, []
  // group by { item_id: i.i_item_id, item_desc: i.i_item_desc, s_store_id: s.s_store_id, s_store_name: s.s_store_name } into g
  Const        r7, "item_id"
  Const        r8, "i_item_id"
  Const        r9, "item_desc"
  Const        r10, "i_item_desc"
  Const        r11, "s_store_id"
  Const        r12, "s_store_name"
  // where d1.d_moy == 4 && d1.d_year == 2000 && d2.d_moy >= 4 && d2.d_moy <= 10 && d3.d_moy >= 4 && d3.d_moy <= 10
  Const        r13, "d_moy"
  Const        r14, "d_year"
  // i_item_id: g.key.item_id,
  Const        r15, "key"
  // store_sales_profit: sum(from x in g select x.ss_net_profit),
  Const        r16, "store_sales_profit"
  Const        r17, "ss_net_profit"
  // store_returns_loss: sum(from x in g select x.sr_net_loss),
  Const        r18, "store_returns_loss"
  Const        r19, "sr_net_loss"
  // catalog_sales_profit: sum(from x in g select x.cs_net_profit)
  Const        r20, "catalog_sales_profit"
  Const        r21, "cs_net_profit"
  // from ss in store_sales
  MakeMap      r22, 0, r0
  Const        r23, []
  IterPrep     r25, r0
  Len          r26, r25
  Const        r27, 0
L20:
  LessInt      r28, r27, r26
  JumpIfFalse  r28, L0
  Index        r30, r25, r27
  // join sr in store_returns on ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk
  IterPrep     r31, r1
  Len          r32, r31
  Const        r33, 0
L19:
  LessInt      r34, r33, r32
  JumpIfFalse  r34, L1
  Index        r36, r31, r33
  Const        r37, "ss_ticket_number"
  Index        r38, r30, r37
  Const        r39, "sr_ticket_number"
  Index        r40, r36, r39
  Equal        r41, r38, r40
  Const        r42, "ss_item_sk"
  Index        r43, r30, r42
  Const        r44, "sr_item_sk"
  Index        r45, r36, r44
  Equal        r46, r43, r45
  JumpIfFalse  r41, L2
  Move         r41, r46
L2:
  JumpIfFalse  r41, L3
  // join cs in catalog_sales on sr.sr_customer_sk == cs.cs_bill_customer_sk && sr.sr_item_sk == cs.cs_item_sk
  IterPrep     r47, r2
  Len          r48, r47
  Const        r49, 0
L18:
  LessInt      r50, r49, r48
  JumpIfFalse  r50, L3
  Index        r52, r47, r49
  Const        r53, "sr_customer_sk"
  Index        r54, r36, r53
  Const        r55, "cs_bill_customer_sk"
  Index        r56, r52, r55
  Equal        r57, r54, r56
  Index        r58, r36, r44
  Const        r59, "cs_item_sk"
  Index        r60, r52, r59
  Equal        r61, r58, r60
  JumpIfFalse  r57, L4
  Move         r57, r61
L4:
  JumpIfFalse  r57, L5
  // join d1 in date_dim on d1.d_date_sk == ss.ss_sold_date_sk
  IterPrep     r62, r3
  Len          r63, r62
  Const        r64, 0
L17:
  LessInt      r65, r64, r63
  JumpIfFalse  r65, L5
  Index        r67, r62, r64
  Const        r68, "d_date_sk"
  Index        r69, r67, r68
  Const        r70, "ss_sold_date_sk"
  Index        r71, r30, r70
  Equal        r72, r69, r71
  JumpIfFalse  r72, L6
  // join d2 in date_dim on d2.d_date_sk == sr.sr_returned_date_sk
  IterPrep     r73, r3
  Len          r74, r73
  Const        r75, 0
L16:
  LessInt      r76, r75, r74
  JumpIfFalse  r76, L6
  Index        r78, r73, r75
  Index        r79, r78, r68
  Const        r80, "sr_returned_date_sk"
  Index        r81, r36, r80
  Equal        r82, r79, r81
  JumpIfFalse  r82, L7
  // join d3 in date_dim on d3.d_date_sk == cs.cs_sold_date_sk
  IterPrep     r83, r3
  Len          r84, r83
  Const        r85, 0
L15:
  LessInt      r86, r85, r84
  JumpIfFalse  r86, L7
  Index        r88, r83, r85
  Index        r89, r88, r68
  Const        r90, "cs_sold_date_sk"
  Index        r91, r52, r90
  Equal        r92, r89, r91
  JumpIfFalse  r92, L8
  // join s in store on s.s_store_sk == ss.ss_store_sk
  IterPrep     r93, r4
  Len          r94, r93
  Const        r95, 0
L14:
  LessInt      r96, r95, r94
  JumpIfFalse  r96, L8
  Index        r98, r93, r95
  Const        r99, "s_store_sk"
  Index        r100, r98, r99
  Const        r101, "ss_store_sk"
  Index        r102, r30, r101
  Equal        r103, r100, r102
  JumpIfFalse  r103, L9
  // join i in item on i.i_item_sk == ss.ss_item_sk
  IterPrep     r104, r5
  Len          r105, r104
  Const        r106, 0
L13:
  LessInt      r107, r106, r105
  JumpIfFalse  r107, L9
  Index        r109, r104, r106
  Const        r110, "i_item_sk"
  Index        r111, r109, r110
  Index        r112, r30, r42
  Equal        r113, r111, r112
  JumpIfFalse  r113, L10
  // where d1.d_moy == 4 && d1.d_year == 2000 && d2.d_moy >= 4 && d2.d_moy <= 10 && d3.d_moy >= 4 && d3.d_moy <= 10
  Index        r114, r67, r13
  Index        r115, r78, r13
  Const        r116, 4
  LessEq       r117, r116, r115
  Index        r118, r78, r13
  Const        r119, 10
  LessEq       r120, r118, r119
  Index        r121, r88, r13
  LessEq       r122, r116, r121
  Index        r123, r88, r13
  LessEq       r124, r123, r119
  Equal        r125, r114, r116
  Index        r126, r67, r14
  Const        r127, 2000
  Equal        r128, r126, r127
  JumpIfFalse  r125, L11
  Move         r125, r128
  JumpIfFalse  r125, L11
  Move         r125, r117
  JumpIfFalse  r125, L11
  Move         r125, r120
  JumpIfFalse  r125, L11
  Move         r125, r122
  JumpIfFalse  r125, L11
  Move         r125, r124
L11:
  JumpIfFalse  r125, L10
  // from ss in store_sales
  Const        r129, "ss"
  Move         r130, r30
  Const        r131, "sr"
  Move         r132, r36
  Const        r133, "cs"
  Move         r134, r52
  Const        r135, "d1"
  Move         r136, r67
  Const        r137, "d2"
  Move         r138, r78
  Const        r139, "d3"
  Move         r140, r88
  Const        r141, "s"
  Move         r142, r98
  Const        r143, "i"
  Move         r144, r109
  MakeMap      r145, 8, r129
  // group by { item_id: i.i_item_id, item_desc: i.i_item_desc, s_store_id: s.s_store_id, s_store_name: s.s_store_name } into g
  Const        r146, "item_id"
  Index        r147, r109, r8
  Const        r148, "item_desc"
  Index        r149, r109, r10
  Const        r150, "s_store_id"
  Index        r151, r98, r11
  Const        r152, "s_store_name"
  Index        r153, r98, r12
  Move         r154, r146
  Move         r155, r147
  Move         r156, r148
  Move         r157, r149
  Move         r158, r150
  Move         r159, r151
  Move         r160, r152
  Move         r161, r153
  MakeMap      r162, 4, r154
  Str          r163, r162
  In           r164, r163, r22
  JumpIfTrue   r164, L12
  // from ss in store_sales
  Const        r165, []
  Const        r166, "__group__"
  Const        r167, true
  Const        r168, "key"
  // group by { item_id: i.i_item_id, item_desc: i.i_item_desc, s_store_id: s.s_store_id, s_store_name: s.s_store_name } into g
  Move         r169, r162
  // from ss in store_sales
  Const        r170, "items"
  Move         r171, r165
  Const        r172, "count"
  Const        r173, 0
  Move         r174, r166
  Move         r175, r167
  Move         r176, r168
  Move         r177, r169
  Move         r178, r170
  Move         r179, r171
  Move         r180, r172
  Move         r181, r173
  MakeMap      r182, 4, r174
  SetIndex     r22, r163, r182
  Append       r23, r23, r182
L12:
  Const        r184, "items"
  Index        r185, r22, r163
  Index        r186, r185, r184
  Append       r187, r186, r145
  SetIndex     r185, r184, r187
  Const        r188, "count"
  Index        r189, r185, r188
  Const        r190, 1
  AddInt       r191, r189, r190
  SetIndex     r185, r188, r191
L10:
  // join i in item on i.i_item_sk == ss.ss_item_sk
  AddInt       r106, r106, r190
  Jump         L13
L9:
  // join s in store on s.s_store_sk == ss.ss_store_sk
  AddInt       r95, r95, r190
  Jump         L14
L8:
  // join d3 in date_dim on d3.d_date_sk == cs.cs_sold_date_sk
  AddInt       r85, r85, r190
  Jump         L15
L7:
  // join d2 in date_dim on d2.d_date_sk == sr.sr_returned_date_sk
  AddInt       r75, r75, r190
  Jump         L16
L6:
  // join d1 in date_dim on d1.d_date_sk == ss.ss_sold_date_sk
  AddInt       r64, r64, r190
  Jump         L17
L5:
  // join cs in catalog_sales on sr.sr_customer_sk == cs.cs_bill_customer_sk && sr.sr_item_sk == cs.cs_item_sk
  AddInt       r49, r49, r190
  Jump         L18
L3:
  // join sr in store_returns on ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk
  AddInt       r33, r33, r190
  Jump         L19
L1:
  // from ss in store_sales
  AddInt       r27, r27, r190
  Jump         L20
L0:
  Const        r193, 0
  Move         r192, r193
  Len          r194, r23
L28:
  LessInt      r195, r192, r194
  JumpIfFalse  r195, L21
  Index        r197, r23, r192
  // i_item_id: g.key.item_id,
  Const        r198, "i_item_id"
  Index        r199, r197, r15
  Index        r200, r199, r7
  // i_item_desc: g.key.item_desc,
  Const        r201, "i_item_desc"
  Index        r202, r197, r15
  Index        r203, r202, r9
  // s_store_id: g.key.s_store_id,
  Const        r204, "s_store_id"
  Index        r205, r197, r15
  Index        r206, r205, r11
  // s_store_name: g.key.s_store_name,
  Const        r207, "s_store_name"
  Index        r208, r197, r15
  Index        r209, r208, r12
  // store_sales_profit: sum(from x in g select x.ss_net_profit),
  Const        r210, "store_sales_profit"
  Const        r211, []
  IterPrep     r212, r197
  Len          r213, r212
  Move         r214, r193
L23:
  LessInt      r215, r214, r213
  JumpIfFalse  r215, L22
  Index        r217, r212, r214
  Index        r218, r217, r17
  Append       r211, r211, r218
  AddInt       r214, r214, r190
  Jump         L23
L22:
  Sum          r220, r211
  // store_returns_loss: sum(from x in g select x.sr_net_loss),
  Const        r221, "store_returns_loss"
  Const        r222, []
  IterPrep     r223, r197
  Len          r224, r223
  Move         r225, r193
L25:
  LessInt      r226, r225, r224
  JumpIfFalse  r226, L24
  Index        r217, r223, r225
  Index        r228, r217, r19
  Append       r222, r222, r228
  AddInt       r225, r225, r190
  Jump         L25
L24:
  Sum          r230, r222
  // catalog_sales_profit: sum(from x in g select x.cs_net_profit)
  Const        r231, "catalog_sales_profit"
  Const        r232, []
  IterPrep     r233, r197
  Len          r234, r233
  Move         r235, r193
L27:
  LessInt      r236, r235, r234
  JumpIfFalse  r236, L26
  Index        r217, r233, r235
  Index        r238, r217, r21
  Append       r232, r232, r238
  AddInt       r235, r235, r190
  Jump         L27
L26:
  Sum          r240, r232
  // i_item_id: g.key.item_id,
  Move         r241, r198
  Move         r242, r200
  // i_item_desc: g.key.item_desc,
  Move         r243, r201
  Move         r244, r203
  // s_store_id: g.key.s_store_id,
  Move         r245, r204
  Move         r246, r206
  // s_store_name: g.key.s_store_name,
  Move         r247, r207
  Move         r248, r209
  // store_sales_profit: sum(from x in g select x.ss_net_profit),
  Move         r249, r210
  Move         r250, r220
  // store_returns_loss: sum(from x in g select x.sr_net_loss),
  Move         r251, r221
  Move         r252, r230
  // catalog_sales_profit: sum(from x in g select x.cs_net_profit)
  Move         r253, r231
  Move         r254, r240
  // select {
  MakeMap      r255, 7, r241
  // from ss in store_sales
  Append       r6, r6, r255
  AddInt       r192, r192, r190
  Jump         L28
L21:
  // json(result)
  JSON         r6
  // expect result == [
  Const        r257, [{"catalog_sales_profit": 30, "i_item_desc": "Desc1", "i_item_id": "ITEM1", "s_store_id": "S1", "s_store_name": "Store1", "store_returns_loss": 10, "store_sales_profit": 50}]
  Equal        r258, r6, r257
  Expect       r258
  Return       r0
