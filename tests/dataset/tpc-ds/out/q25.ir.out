func main (regs=278)
  // let store_sales = [
  Const        r0, [{"ss_customer_sk": 1, "ss_item_sk": 1, "ss_net_profit": 50, "ss_sold_date_sk": 1, "ss_store_sk": 1, "ss_ticket_number": 1}, {"ss_customer_sk": 2, "ss_item_sk": 2, "ss_net_profit": 20, "ss_sold_date_sk": 1, "ss_store_sk": 1, "ss_ticket_number": 2}]
  // let store_returns = [
  Const        r1, [{"sr_customer_sk": 1, "sr_item_sk": 1, "sr_net_loss": 10, "sr_returned_date_sk": 2, "sr_ticket_number": 1}, {"sr_customer_sk": 2, "sr_item_sk": 2, "sr_net_loss": 5, "sr_returned_date_sk": 2, "sr_ticket_number": 2}]
  // let catalog_sales = [
  Const        r2, [{"cs_bill_customer_sk": 1, "cs_item_sk": 1, "cs_net_profit": 30, "cs_sold_date_sk": 3}, {"cs_bill_customer_sk": 2, "cs_item_sk": 2, "cs_net_profit": 15, "cs_sold_date_sk": 3}]
  // let date_dim = [
  Const        r3, [{"d_date_sk": 1, "d_moy": 4, "d_year": 2000}, {"d_date_sk": 2, "d_moy": 5, "d_year": 2000}, {"d_date_sk": 3, "d_moy": 6, "d_year": 2000}]
  // let store = [ { s_store_sk: 1, s_store_id: "S1", s_store_name: "Store1" } ]
  Const        r4, [{"s_store_id": "S1", "s_store_name": "Store1", "s_store_sk": 1}]
  // let item = [
  Const        r5, [{"i_item_desc": "Desc1", "i_item_id": "ITEM1", "i_item_sk": 1}, {"i_item_desc": "Desc2", "i_item_id": "ITEM2", "i_item_sk": 2}]
  // from ss in store_sales
  Const        r6, []
  // group by { item_id: i.i_item_id, item_desc: i.i_item_desc, s_store_id: s.s_store_id, s_store_name: s.s_store_name } into g
  Const        r7, "item_id"
  Const        r8, "i_item_id"
  Const        r9, "item_desc"
  Const        r10, "i_item_desc"
  Const        r11, "s_store_id"
  Const        r12, "s_store_name"
  // where d1.d_moy == 4 && d1.d_year == 2000 && d2.d_moy >= 4 && d2.d_moy <= 10 && d3.d_moy >= 4 && d3.d_moy <= 10
  Const        r13, "d_moy"
  Const        r14, "d_year"
  // i_item_id: g.key.item_id,
  Const        r15, "key"
  // store_sales_profit: sum(from x in g select x.ss_net_profit),
  Const        r16, "store_sales_profit"
  Const        r17, "ss_net_profit"
  // store_returns_loss: sum(from x in g select x.sr_net_loss),
  Const        r18, "store_returns_loss"
  Const        r19, "sr_net_loss"
  // catalog_sales_profit: sum(from x in g select x.cs_net_profit)
  Const        r20, "catalog_sales_profit"
  Const        r21, "cs_net_profit"
  // from ss in store_sales
  MakeMap      r22, 0, r0
  Const        r24, []
  Move         r23, r24
  IterPrep     r25, r0
  Len          r26, r25
  Const        r27, 0
L24:
  LessInt      r28, r27, r26
  JumpIfFalse  r28, L0
  Index        r29, r25, r27
  Move         r30, r29
  // join sr in store_returns on ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk
  IterPrep     r31, r1
  Len          r32, r31
  Const        r33, 0
L23:
  LessInt      r34, r33, r32
  JumpIfFalse  r34, L1
  Index        r35, r31, r33
  Move         r36, r35
  Const        r37, "ss_ticket_number"
  Index        r38, r30, r37
  Const        r39, "sr_ticket_number"
  Index        r40, r36, r39
  Equal        r41, r38, r40
  Const        r42, "ss_item_sk"
  Index        r43, r30, r42
  Const        r44, "sr_item_sk"
  Index        r45, r36, r44
  Equal        r46, r43, r45
  Move         r47, r41
  JumpIfFalse  r47, L2
  Move         r47, r46
L2:
  JumpIfFalse  r47, L3
  // join cs in catalog_sales on sr.sr_customer_sk == cs.cs_bill_customer_sk && sr.sr_item_sk == cs.cs_item_sk
  IterPrep     r48, r2
  Len          r49, r48
  Const        r50, 0
L22:
  LessInt      r51, r50, r49
  JumpIfFalse  r51, L3
  Index        r52, r48, r50
  Move         r53, r52
  Const        r54, "sr_customer_sk"
  Index        r55, r36, r54
  Const        r56, "cs_bill_customer_sk"
  Index        r57, r53, r56
  Equal        r58, r55, r57
  Index        r59, r36, r44
  Const        r60, "cs_item_sk"
  Index        r61, r53, r60
  Equal        r62, r59, r61
  Move         r63, r58
  JumpIfFalse  r63, L4
  Move         r63, r62
L4:
  JumpIfFalse  r63, L5
  // join d1 in date_dim on d1.d_date_sk == ss.ss_sold_date_sk
  IterPrep     r64, r3
  Len          r65, r64
  Const        r66, 0
L21:
  LessInt      r67, r66, r65
  JumpIfFalse  r67, L5
  Index        r68, r64, r66
  Move         r69, r68
  Const        r70, "d_date_sk"
  Index        r71, r69, r70
  Const        r72, "ss_sold_date_sk"
  Index        r73, r30, r72
  Equal        r74, r71, r73
  JumpIfFalse  r74, L6
  // join d2 in date_dim on d2.d_date_sk == sr.sr_returned_date_sk
  IterPrep     r75, r3
  Len          r76, r75
  Const        r77, 0
L20:
  LessInt      r78, r77, r76
  JumpIfFalse  r78, L6
  Index        r79, r75, r77
  Move         r80, r79
  Index        r81, r80, r70
  Const        r82, "sr_returned_date_sk"
  Index        r83, r36, r82
  Equal        r84, r81, r83
  JumpIfFalse  r84, L7
  // join d3 in date_dim on d3.d_date_sk == cs.cs_sold_date_sk
  IterPrep     r85, r3
  Len          r86, r85
  Const        r87, 0
L19:
  LessInt      r88, r87, r86
  JumpIfFalse  r88, L7
  Index        r89, r85, r87
  Move         r90, r89
  Index        r91, r90, r70
  Const        r92, "cs_sold_date_sk"
  Index        r93, r53, r92
  Equal        r94, r91, r93
  JumpIfFalse  r94, L8
  // join s in store on s.s_store_sk == ss.ss_store_sk
  IterPrep     r95, r4
  Len          r96, r95
  Const        r97, 0
L18:
  LessInt      r98, r97, r96
  JumpIfFalse  r98, L8
  Index        r99, r95, r97
  Move         r100, r99
  Const        r101, "s_store_sk"
  Index        r102, r100, r101
  Const        r103, "ss_store_sk"
  Index        r104, r30, r103
  Equal        r105, r102, r104
  JumpIfFalse  r105, L9
  // join i in item on i.i_item_sk == ss.ss_item_sk
  IterPrep     r106, r5
  Len          r107, r106
  Const        r108, 0
L17:
  LessInt      r109, r108, r107
  JumpIfFalse  r109, L9
  Index        r110, r106, r108
  Move         r111, r110
  Const        r112, "i_item_sk"
  Index        r113, r111, r112
  Index        r114, r30, r42
  Equal        r115, r113, r114
  JumpIfFalse  r115, L10
  // where d1.d_moy == 4 && d1.d_year == 2000 && d2.d_moy >= 4 && d2.d_moy <= 10 && d3.d_moy >= 4 && d3.d_moy <= 10
  Index        r116, r69, r13
  Index        r117, r80, r13
  Const        r118, 4
  LessEq       r119, r118, r117
  Index        r120, r80, r13
  Const        r121, 10
  LessEq       r122, r120, r121
  Index        r123, r90, r13
  LessEq       r124, r118, r123
  Index        r125, r90, r13
  LessEq       r126, r125, r121
  Equal        r127, r116, r118
  Index        r128, r69, r14
  Const        r129, 2000
  Equal        r130, r128, r129
  Move         r131, r127
  JumpIfFalse  r131, L11
  Move         r131, r130
L11:
  Move         r132, r131
  JumpIfFalse  r132, L12
  Move         r132, r119
L12:
  Move         r133, r132
  JumpIfFalse  r133, L13
  Move         r133, r122
L13:
  Move         r134, r133
  JumpIfFalse  r134, L14
  Move         r134, r124
L14:
  Move         r135, r134
  JumpIfFalse  r135, L15
  Move         r135, r126
L15:
  JumpIfFalse  r135, L10
  // from ss in store_sales
  Const        r136, "ss"
  Move         r137, r30
  Const        r138, "sr"
  Move         r139, r36
  Const        r140, "cs"
  Move         r141, r53
  Const        r142, "d1"
  Move         r143, r69
  Const        r144, "d2"
  Move         r145, r80
  Const        r146, "d3"
  Move         r147, r90
  Const        r148, "s"
  Move         r149, r100
  Const        r150, "i"
  Move         r151, r111
  Move         r152, r136
  Move         r153, r137
  Move         r154, r138
  Move         r155, r139
  Move         r156, r140
  Move         r157, r141
  Move         r158, r142
  Move         r159, r143
  Move         r160, r144
  Move         r161, r145
  Move         r162, r146
  Move         r163, r147
  Move         r164, r148
  Move         r165, r149
  Move         r166, r150
  Move         r167, r151
  MakeMap      r168, 8, r152
  // group by { item_id: i.i_item_id, item_desc: i.i_item_desc, s_store_id: s.s_store_id, s_store_name: s.s_store_name } into g
  Const        r169, "item_id"
  Index        r170, r111, r8
  Const        r171, "item_desc"
  Index        r172, r111, r10
  Const        r173, "s_store_id"
  Index        r174, r100, r11
  Const        r175, "s_store_name"
  Index        r176, r100, r12
  Move         r177, r169
  Move         r178, r170
  Move         r179, r171
  Move         r180, r172
  Move         r181, r173
  Move         r182, r174
  Move         r183, r175
  Move         r184, r176
  MakeMap      r185, 4, r177
  Str          r186, r185
  In           r187, r186, r22
  JumpIfTrue   r187, L16
  // from ss in store_sales
  Const        r188, []
  Const        r189, "__group__"
  Const        r190, true
  // group by { item_id: i.i_item_id, item_desc: i.i_item_desc, s_store_id: s.s_store_id, s_store_name: s.s_store_name } into g
  Move         r191, r185
  // from ss in store_sales
  Const        r192, "items"
  Move         r193, r188
  Const        r194, "count"
  Const        r195, 0
  Move         r196, r189
  Move         r197, r190
  Move         r198, r15
  Move         r199, r191
  Move         r200, r192
  Move         r201, r193
  Move         r202, r194
  Move         r203, r195
  MakeMap      r204, 4, r196
  SetIndex     r22, r186, r204
  Append       r205, r23, r204
  Move         r23, r205
L16:
  Index        r206, r22, r186
  Index        r207, r206, r192
  Append       r208, r207, r168
  SetIndex     r206, r192, r208
  Index        r209, r206, r194
  Const        r210, 1
  AddInt       r211, r209, r210
  SetIndex     r206, r194, r211
L10:
  // join i in item on i.i_item_sk == ss.ss_item_sk
  AddInt       r108, r108, r210
  Jump         L17
L9:
  // join s in store on s.s_store_sk == ss.ss_store_sk
  AddInt       r97, r97, r210
  Jump         L18
L8:
  // join d3 in date_dim on d3.d_date_sk == cs.cs_sold_date_sk
  AddInt       r87, r87, r210
  Jump         L19
L7:
  // join d2 in date_dim on d2.d_date_sk == sr.sr_returned_date_sk
  AddInt       r77, r77, r210
  Jump         L20
L6:
  // join d1 in date_dim on d1.d_date_sk == ss.ss_sold_date_sk
  AddInt       r66, r66, r210
  Jump         L21
L5:
  // join cs in catalog_sales on sr.sr_customer_sk == cs.cs_bill_customer_sk && sr.sr_item_sk == cs.cs_item_sk
  AddInt       r50, r50, r210
  Jump         L22
L3:
  // join sr in store_returns on ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk
  AddInt       r33, r33, r210
  Jump         L23
L1:
  // from ss in store_sales
  AddInt       r27, r27, r210
  Jump         L24
L0:
  Move         r212, r195
  Len          r213, r23
L32:
  LessInt      r214, r212, r213
  JumpIfFalse  r214, L25
  Index        r215, r23, r212
  Move         r216, r215
  // i_item_id: g.key.item_id,
  Const        r217, "i_item_id"
  Index        r218, r216, r15
  Index        r219, r218, r7
  // i_item_desc: g.key.item_desc,
  Const        r220, "i_item_desc"
  Index        r221, r216, r15
  Index        r222, r221, r9
  // s_store_id: g.key.s_store_id,
  Const        r223, "s_store_id"
  Index        r224, r216, r15
  Index        r225, r224, r11
  // s_store_name: g.key.s_store_name,
  Const        r226, "s_store_name"
  Index        r227, r216, r15
  Index        r228, r227, r12
  // store_sales_profit: sum(from x in g select x.ss_net_profit),
  Const        r229, "store_sales_profit"
  Const        r230, []
  IterPrep     r231, r216
  Len          r232, r231
  Move         r233, r195
L27:
  LessInt      r234, r233, r232
  JumpIfFalse  r234, L26
  Index        r235, r231, r233
  Move         r236, r235
  Index        r237, r236, r17
  Append       r238, r230, r237
  Move         r230, r238
  AddInt       r233, r233, r210
  Jump         L27
L26:
  Sum          r239, r230
  // store_returns_loss: sum(from x in g select x.sr_net_loss),
  Const        r240, "store_returns_loss"
  Const        r241, []
  IterPrep     r242, r216
  Len          r243, r242
  Move         r244, r195
L29:
  LessInt      r245, r244, r243
  JumpIfFalse  r245, L28
  Index        r246, r242, r244
  Move         r236, r246
  Index        r247, r236, r19
  Append       r248, r241, r247
  Move         r241, r248
  AddInt       r244, r244, r210
  Jump         L29
L28:
  Sum          r249, r241
  // catalog_sales_profit: sum(from x in g select x.cs_net_profit)
  Const        r250, "catalog_sales_profit"
  Const        r251, []
  IterPrep     r252, r216
  Len          r253, r252
  Move         r254, r195
L31:
  LessInt      r255, r254, r253
  JumpIfFalse  r255, L30
  Index        r256, r252, r254
  Move         r236, r256
  Index        r257, r236, r21
  Append       r258, r251, r257
  Move         r251, r258
  AddInt       r254, r254, r210
  Jump         L31
L30:
  Sum          r259, r251
  // i_item_id: g.key.item_id,
  Move         r260, r217
  Move         r261, r219
  // i_item_desc: g.key.item_desc,
  Move         r262, r220
  Move         r263, r222
  // s_store_id: g.key.s_store_id,
  Move         r264, r223
  Move         r265, r225
  // s_store_name: g.key.s_store_name,
  Move         r266, r226
  Move         r267, r228
  // store_sales_profit: sum(from x in g select x.ss_net_profit),
  Move         r268, r229
  Move         r269, r239
  // store_returns_loss: sum(from x in g select x.sr_net_loss),
  Move         r270, r240
  Move         r271, r249
  // catalog_sales_profit: sum(from x in g select x.cs_net_profit)
  Move         r272, r250
  Move         r273, r259
  // select {
  MakeMap      r274, 7, r260
  // from ss in store_sales
  Append       r275, r6, r274
  Move         r6, r275
  AddInt       r212, r212, r210
  Jump         L32
L25:
  // json(result)
  JSON         r6
  // expect result == [
  Const        r276, [{"catalog_sales_profit": 30, "i_item_desc": "Desc1", "i_item_id": "ITEM1", "s_store_id": "S1", "s_store_name": "Store1", "store_returns_loss": 10, "store_sales_profit": 50}]
  Equal        r277, r6, r276
  Expect       r277
  Return       r0
