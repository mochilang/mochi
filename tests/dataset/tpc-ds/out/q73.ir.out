func main (regs=217)
  // let store_sales = [
  Const        r0, [{"ss_customer_sk": 1, "ss_hdemo_sk": 1, "ss_sold_date_sk": 1, "ss_store_sk": 1, "ss_ticket_number": 1}]
  // let date_dim = [
  Const        r1, [{"d_date_sk": 1, "d_dom": 1, "d_year": 1998}]
  // let store = [
  Const        r2, [{"s_county": "A", "s_store_sk": 1}]
  // let household_demographics = [
  Const        r3, [{"hd_buy_potential": "1001-5000", "hd_demo_sk": 1, "hd_dep_count": 3, "hd_vehicle_count": 2}]
  // let customer = [
  Const        r4, [{"c_customer_sk": 1, "c_first_name": "Alice", "c_last_name": "Smith", "c_preferred_cust_flag": "Y", "c_salutation": "Ms."}]
  // from ss in store_sales
  Const        r5, []
  // group by { ticket: ss.ss_ticket_number, cust: ss.ss_customer_sk } into g
  Const        r6, "ticket"
  Const        r7, "ss_ticket_number"
  Const        r8, "cust"
  Const        r9, "ss_customer_sk"
  // where d.d_dom >= 1 && d.d_dom <= 2 &&
  Const        r10, "d_dom"
  // (hd.hd_buy_potential == "1001-5000" || hd.hd_buy_potential == "0-500") &&
  Const        r11, "hd_buy_potential"
  // hd.hd_vehicle_count > 0 &&
  Const        r12, "hd_vehicle_count"
  // hd.hd_dep_count / hd.hd_vehicle_count > 1 &&
  Const        r13, "hd_dep_count"
  // (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) &&
  Const        r14, "d_year"
  // s.s_county == "A"
  Const        r15, "s_county"
  // select { key: g.key, cnt: count(g) }
  Const        r16, "key"
  Const        r17, "cnt"
  // from ss in store_sales
  MakeMap      r18, 0, r0
  Const        r19, []
  IterPrep     r21, r0
  Len          r22, r21
  Const        r23, 0
L12:
  LessInt      r24, r23, r22
  JumpIfFalse  r24, L0
  Index        r26, r21, r23
  // join d in date_dim on d.d_date_sk == ss.ss_sold_date_sk
  IterPrep     r27, r1
  Len          r28, r27
  Const        r29, 0
L11:
  LessInt      r30, r29, r28
  JumpIfFalse  r30, L1
  Index        r32, r27, r29
  Const        r33, "d_date_sk"
  Index        r34, r32, r33
  Const        r35, "ss_sold_date_sk"
  Index        r36, r26, r35
  Equal        r37, r34, r36
  JumpIfFalse  r37, L2
  // join s in store on s.s_store_sk == ss.ss_store_sk
  IterPrep     r38, r2
  Len          r39, r38
  Const        r40, 0
L10:
  LessInt      r41, r40, r39
  JumpIfFalse  r41, L2
  Index        r43, r38, r40
  Const        r44, "s_store_sk"
  Index        r45, r43, r44
  Const        r46, "ss_store_sk"
  Index        r47, r26, r46
  Equal        r48, r45, r47
  JumpIfFalse  r48, L3
  // join hd in household_demographics on hd.hd_demo_sk == ss.ss_hdemo_sk
  IterPrep     r49, r3
  Len          r50, r49
  Const        r51, 0
L9:
  LessInt      r52, r51, r50
  JumpIfFalse  r52, L3
  Index        r54, r49, r51
  Const        r55, "hd_demo_sk"
  Index        r56, r54, r55
  Const        r57, "ss_hdemo_sk"
  Index        r58, r26, r57
  Equal        r59, r56, r58
  JumpIfFalse  r59, L4
  // where d.d_dom >= 1 && d.d_dom <= 2 &&
  Index        r60, r32, r10
  // hd.hd_dep_count / hd.hd_vehicle_count > 1 &&
  Index        r61, r54, r13
  Index        r62, r54, r12
  Div          r63, r61, r62
  // where d.d_dom >= 1 && d.d_dom <= 2 &&
  Const        r64, 1
  LessEq       r65, r64, r60
  Index        r66, r32, r10
  Const        r67, 2
  LessEq       r68, r66, r67
  // hd.hd_vehicle_count > 0 &&
  Index        r69, r54, r12
  Const        r70, 0
  Less         r71, r70, r69
  // hd.hd_dep_count / hd.hd_vehicle_count > 1 &&
  Less         r72, r64, r63
  // s.s_county == "A"
  Index        r73, r43, r15
  Const        r74, "A"
  Equal        r75, r73, r74
  // where d.d_dom >= 1 && d.d_dom <= 2 &&
  JumpIfFalse  r65, L5
  Move         r65, r68
  JumpIfFalse  r65, L5
  // (hd.hd_buy_potential == "1001-5000" || hd.hd_buy_potential == "0-500") &&
  Index        r76, r54, r11
  Const        r77, "1001-5000"
  Equal        r78, r76, r77
  Index        r79, r54, r11
  Const        r80, "0-500"
  Equal        r81, r79, r80
  JumpIfTrue   r78, L6
L6:
  // where d.d_dom >= 1 && d.d_dom <= 2 &&
  Move         r65, r81
  // (hd.hd_buy_potential == "1001-5000" || hd.hd_buy_potential == "0-500") &&
  JumpIfFalse  r65, L5
  Move         r65, r71
  // hd.hd_vehicle_count > 0 &&
  JumpIfFalse  r65, L5
  Move         r65, r72
  // hd.hd_dep_count / hd.hd_vehicle_count > 1 &&
  JumpIfFalse  r65, L5
  // (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) &&
  Index        r82, r32, r14
  Const        r83, 1998
  Equal        r84, r82, r83
  Index        r85, r32, r14
  Const        r86, 1999
  Equal        r87, r85, r86
  Index        r88, r32, r14
  Const        r89, 2000
  Equal        r90, r88, r89
  JumpIfTrue   r84, L7
  Move         r84, r87
  JumpIfTrue   r84, L7
L7:
  // hd.hd_dep_count / hd.hd_vehicle_count > 1 &&
  Move         r65, r90
  // (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) &&
  JumpIfFalse  r65, L5
  Move         r65, r75
L5:
  // where d.d_dom >= 1 && d.d_dom <= 2 &&
  JumpIfFalse  r65, L4
  // from ss in store_sales
  Const        r91, "ss"
  Move         r92, r26
  Const        r93, "d"
  Move         r94, r32
  Const        r95, "s"
  Move         r96, r43
  Const        r97, "hd"
  Move         r98, r54
  MakeMap      r99, 4, r91
  // group by { ticket: ss.ss_ticket_number, cust: ss.ss_customer_sk } into g
  Const        r100, "ticket"
  Index        r101, r26, r7
  Const        r102, "cust"
  Index        r103, r26, r9
  Move         r104, r100
  Move         r105, r101
  Move         r106, r102
  Move         r107, r103
  MakeMap      r108, 2, r104
  Str          r109, r108
  In           r110, r109, r18
  JumpIfTrue   r110, L8
  // from ss in store_sales
  Const        r111, []
  Const        r112, "__group__"
  Const        r113, true
  Const        r114, "key"
  // group by { ticket: ss.ss_ticket_number, cust: ss.ss_customer_sk } into g
  Move         r115, r108
  // from ss in store_sales
  Const        r116, "items"
  Move         r117, r111
  Const        r118, "count"
  Const        r119, 0
  Move         r120, r112
  Move         r121, r113
  Move         r122, r114
  Move         r123, r115
  Move         r124, r116
  Move         r125, r117
  Move         r126, r118
  Move         r127, r119
  MakeMap      r128, 4, r120
  SetIndex     r18, r109, r128
  Append       r19, r19, r128
L8:
  Const        r130, "items"
  Index        r131, r18, r109
  Index        r132, r131, r130
  Append       r133, r132, r99
  SetIndex     r131, r130, r133
  Const        r134, "count"
  Index        r135, r131, r134
  AddInt       r136, r135, r64
  SetIndex     r131, r134, r136
L4:
  // join hd in household_demographics on hd.hd_demo_sk == ss.ss_hdemo_sk
  AddInt       r51, r51, r64
  Jump         L9
L3:
  // join s in store on s.s_store_sk == ss.ss_store_sk
  AddInt       r40, r40, r64
  Jump         L10
L2:
  // join d in date_dim on d.d_date_sk == ss.ss_sold_date_sk
  AddInt       r29, r29, r64
  Jump         L11
L1:
  // from ss in store_sales
  AddInt       r23, r23, r64
  Jump         L12
L0:
  Move         r137, r70
  Len          r138, r19
L14:
  LessInt      r139, r137, r138
  JumpIfFalse  r139, L13
  Index        r141, r19, r137
  // select { key: g.key, cnt: count(g) }
  Const        r142, "key"
  Index        r143, r141, r16
  Const        r144, "cnt"
  Index        r145, r141, r134
  Move         r146, r142
  Move         r147, r143
  Move         r148, r144
  Move         r149, r145
  MakeMap      r150, 2, r146
  // from ss in store_sales
  Append       r5, r5, r150
  AddInt       r137, r137, r64
  Jump         L14
L13:
  // from g in groups
  Const        r152, []
  IterPrep     r153, r5
  Len          r154, r153
  // join c in customer on c.c_customer_sk == g.key.cust
  IterPrep     r155, r4
  Len          r156, r155
  Const        r157, "c_customer_sk"
  // c_last_name: c.c_last_name,
  Const        r158, "c_last_name"
  // c_first_name: c.c_first_name,
  Const        r159, "c_first_name"
  // c_salutation: c.c_salutation,
  Const        r160, "c_salutation"
  // c_preferred_cust_flag: c.c_preferred_cust_flag,
  Const        r161, "c_preferred_cust_flag"
  // from g in groups
  Const        r162, 0
L20:
  LessInt      r163, r162, r154
  JumpIfFalse  r163, L15
  Index        r141, r153, r162
  // join c in customer on c.c_customer_sk == g.key.cust
  Const        r165, 0
L19:
  LessInt      r166, r165, r156
  JumpIfFalse  r166, L16
  Index        r168, r155, r165
  Index        r169, r168, r157
  Index        r170, r141, r16
  Index        r171, r170, r8
  Equal        r172, r169, r171
  JumpIfFalse  r172, L17
  // where g.cnt >= 1 && g.cnt <= 5
  Index        r173, r141, r17
  LessEq       r174, r64, r173
  Index        r175, r141, r17
  Const        r176, 5
  LessEq       r177, r175, r176
  JumpIfFalse  r174, L18
  Move         r174, r177
L18:
  JumpIfFalse  r174, L17
  // c_last_name: c.c_last_name,
  Const        r178, "c_last_name"
  Index        r179, r168, r158
  // c_first_name: c.c_first_name,
  Const        r180, "c_first_name"
  Index        r181, r168, r159
  // c_salutation: c.c_salutation,
  Const        r182, "c_salutation"
  Index        r183, r168, r160
  // c_preferred_cust_flag: c.c_preferred_cust_flag,
  Const        r184, "c_preferred_cust_flag"
  Index        r185, r168, r161
  // ss_ticket_number: g.key.ticket,
  Const        r186, "ss_ticket_number"
  Index        r187, r141, r16
  Index        r188, r187, r6
  // cnt: g.cnt
  Const        r189, "cnt"
  Index        r190, r141, r17
  // c_last_name: c.c_last_name,
  Move         r191, r178
  Move         r192, r179
  // c_first_name: c.c_first_name,
  Move         r193, r180
  Move         r194, r181
  // c_salutation: c.c_salutation,
  Move         r195, r182
  Move         r196, r183
  // c_preferred_cust_flag: c.c_preferred_cust_flag,
  Move         r197, r184
  Move         r198, r185
  // ss_ticket_number: g.key.ticket,
  Move         r199, r186
  Move         r200, r188
  // cnt: g.cnt
  Move         r201, r189
  Move         r202, r190
  // select {
  MakeMap      r203, 6, r191
  // sort by [-g.cnt, c.c_last_name]
  Index        r204, r141, r17
  Neg          r206, r204
  Index        r207, r168, r158
  Move         r208, r207
  MakeList     r210, 2, r206
  // from g in groups
  Move         r211, r203
  MakeList     r212, 2, r210
  Append       r152, r152, r212
L17:
  // join c in customer on c.c_customer_sk == g.key.cust
  AddInt       r165, r165, r64
  Jump         L19
L16:
  // from g in groups
  AddInt       r162, r162, r64
  Jump         L20
L15:
  // sort by [-g.cnt, c.c_last_name]
  Sort         r152, r152
  // json(result)
  JSON         r152
  // expect result == [
  Const        r215, [{"c_first_name": "Alice", "c_last_name": "Smith", "c_preferred_cust_flag": "Y", "c_salutation": "Ms.", "cnt": 1, "ss_ticket_number": 1}]
  Equal        r216, r152, r215
  Expect       r216
  Return       r0
