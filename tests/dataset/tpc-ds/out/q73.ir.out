func main (regs=224)
  // let store_sales = [
  Const        r0, [{"ss_customer_sk": 1, "ss_hdemo_sk": 1, "ss_sold_date_sk": 1, "ss_store_sk": 1, "ss_ticket_number": 1}]
  // let date_dim = [
  Const        r1, [{"d_date_sk": 1, "d_dom": 1, "d_year": 1998}]
  // let store = [
  Const        r2, [{"s_county": "A", "s_store_sk": 1}]
  // let household_demographics = [
  Const        r3, [{"hd_buy_potential": "1001-5000", "hd_demo_sk": 1, "hd_dep_count": 3, "hd_vehicle_count": 2}]
  // let customer = [
  Const        r4, [{"c_customer_sk": 1, "c_first_name": "Alice", "c_last_name": "Smith", "c_preferred_cust_flag": "Y", "c_salutation": "Ms."}]
  // from ss in store_sales
  Const        r5, []
  // group by { ticket: ss.ss_ticket_number, cust: ss.ss_customer_sk } into g
  Const        r6, "ticket"
  Const        r7, "ss_ticket_number"
  Const        r8, "cust"
  Const        r9, "ss_customer_sk"
  // where d.d_dom >= 1 && d.d_dom <= 2 &&
  Const        r10, "d_dom"
  // (hd.hd_buy_potential == "1001-5000" || hd.hd_buy_potential == "0-500") &&
  Const        r11, "hd_buy_potential"
  // hd.hd_vehicle_count > 0 &&
  Const        r12, "hd_vehicle_count"
  // hd.hd_dep_count / hd.hd_vehicle_count > 1 &&
  Const        r13, "hd_dep_count"
  // (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) &&
  Const        r14, "d_year"
  // s.s_county == "A"
  Const        r15, "s_county"
  // select { key: g.key, cnt: count(g) }
  Const        r16, "key"
  Const        r17, "cnt"
  // from ss in store_sales
  MakeMap      r18, 0, r0
  Const        r20, []
  Move         r19, r20
  IterPrep     r21, r0
  Len          r22, r21
  Const        r23, 0
L12:
  LessInt      r24, r23, r22
  JumpIfFalse  r24, L0
  Index        r25, r21, r23
  Move         r26, r25
  // join d in date_dim on d.d_date_sk == ss.ss_sold_date_sk
  IterPrep     r27, r1
  Len          r28, r27
  Const        r29, 0
L11:
  LessInt      r30, r29, r28
  JumpIfFalse  r30, L1
  Index        r31, r27, r29
  Move         r32, r31
  Const        r33, "d_date_sk"
  Index        r34, r32, r33
  Const        r35, "ss_sold_date_sk"
  Index        r36, r26, r35
  Equal        r37, r34, r36
  JumpIfFalse  r37, L2
  // join s in store on s.s_store_sk == ss.ss_store_sk
  IterPrep     r38, r2
  Len          r39, r38
  Const        r40, 0
L10:
  LessInt      r41, r40, r39
  JumpIfFalse  r41, L2
  Index        r42, r38, r40
  Move         r43, r42
  Const        r44, "s_store_sk"
  Index        r45, r43, r44
  Const        r46, "ss_store_sk"
  Index        r47, r26, r46
  Equal        r48, r45, r47
  JumpIfFalse  r48, L3
  // join hd in household_demographics on hd.hd_demo_sk == ss.ss_hdemo_sk
  IterPrep     r49, r3
  Len          r50, r49
  Const        r51, 0
L9:
  LessInt      r52, r51, r50
  JumpIfFalse  r52, L3
  Index        r53, r49, r51
  Move         r54, r53
  Const        r55, "hd_demo_sk"
  Index        r56, r54, r55
  Const        r57, "ss_hdemo_sk"
  Index        r58, r26, r57
  Equal        r59, r56, r58
  JumpIfFalse  r59, L4
  // where d.d_dom >= 1 && d.d_dom <= 2 &&
  Index        r60, r32, r10
  // hd.hd_dep_count / hd.hd_vehicle_count > 1 &&
  Index        r61, r54, r13
  Index        r62, r54, r12
  Div          r63, r61, r62
  // where d.d_dom >= 1 && d.d_dom <= 2 &&
  Const        r64, 1
  LessEq       r65, r64, r60
  Index        r66, r32, r10
  Const        r67, 2
  LessEq       r68, r66, r67
  // hd.hd_vehicle_count > 0 &&
  Index        r69, r54, r12
  Const        r70, 0
  Less         r71, r70, r69
  // hd.hd_dep_count / hd.hd_vehicle_count > 1 &&
  Less         r72, r64, r63
  // s.s_county == "A"
  Index        r73, r43, r15
  Const        r74, "A"
  Equal        r75, r73, r74
  // where d.d_dom >= 1 && d.d_dom <= 2 &&
  Move         r76, r65
  JumpIfFalse  r76, L5
  Move         r76, r68
  JumpIfFalse  r76, L5
  // (hd.hd_buy_potential == "1001-5000" || hd.hd_buy_potential == "0-500") &&
  Index        r77, r54, r11
  Const        r78, "1001-5000"
  Equal        r79, r77, r78
  Index        r80, r54, r11
  Const        r81, "0-500"
  Equal        r82, r80, r81
  Move         r83, r79
  JumpIfTrue   r83, L6
  Move         r83, r82
L6:
  // where d.d_dom >= 1 && d.d_dom <= 2 &&
  Move         r76, r83
  // (hd.hd_buy_potential == "1001-5000" || hd.hd_buy_potential == "0-500") &&
  JumpIfFalse  r76, L5
  Move         r76, r71
  // hd.hd_vehicle_count > 0 &&
  JumpIfFalse  r76, L5
  Move         r76, r72
  // hd.hd_dep_count / hd.hd_vehicle_count > 1 &&
  JumpIfFalse  r76, L5
  // (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) &&
  Index        r84, r32, r14
  Const        r85, 1998
  Equal        r86, r84, r85
  Index        r87, r32, r14
  Const        r88, 1999
  Equal        r89, r87, r88
  Index        r90, r32, r14
  Const        r91, 2000
  Equal        r92, r90, r91
  Move         r93, r86
  JumpIfTrue   r93, L7
  Move         r93, r89
  JumpIfTrue   r93, L7
  Move         r93, r92
L7:
  // hd.hd_dep_count / hd.hd_vehicle_count > 1 &&
  Move         r76, r93
  // (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) &&
  JumpIfFalse  r76, L5
  Move         r76, r75
L5:
  // where d.d_dom >= 1 && d.d_dom <= 2 &&
  JumpIfFalse  r76, L4
  // from ss in store_sales
  Const        r94, "ss"
  Move         r95, r26
  Const        r96, "d"
  Move         r97, r32
  Const        r98, "s"
  Move         r99, r43
  Const        r100, "hd"
  Move         r101, r54
  Move         r102, r94
  Move         r103, r95
  Move         r104, r96
  Move         r105, r97
  Move         r106, r98
  Move         r107, r99
  Move         r108, r100
  Move         r109, r101
  MakeMap      r110, 4, r102
  // group by { ticket: ss.ss_ticket_number, cust: ss.ss_customer_sk } into g
  Const        r111, "ticket"
  Index        r112, r26, r7
  Const        r113, "cust"
  Index        r114, r26, r9
  Move         r115, r111
  Move         r116, r112
  Move         r117, r113
  Move         r118, r114
  MakeMap      r119, 2, r115
  Str          r120, r119
  In           r121, r120, r18
  JumpIfTrue   r121, L8
  // from ss in store_sales
  Const        r122, "__group__"
  Const        r123, true
  // group by { ticket: ss.ss_ticket_number, cust: ss.ss_customer_sk } into g
  Move         r124, r119
  // from ss in store_sales
  Const        r125, "items"
  Move         r126, r20
  Const        r127, "count"
  Move         r128, r122
  Move         r129, r123
  Move         r130, r16
  Move         r131, r124
  Move         r132, r125
  Move         r133, r126
  Move         r134, r127
  Move         r135, r70
  MakeMap      r136, 4, r128
  SetIndex     r18, r120, r136
  Append       r137, r19, r136
  Move         r19, r137
L8:
  Index        r138, r18, r120
  Index        r139, r138, r125
  Append       r140, r139, r110
  SetIndex     r138, r125, r140
  Index        r141, r138, r127
  AddInt       r142, r141, r64
  SetIndex     r138, r127, r142
L4:
  // join hd in household_demographics on hd.hd_demo_sk == ss.ss_hdemo_sk
  AddInt       r51, r51, r64
  Jump         L9
L3:
  // join s in store on s.s_store_sk == ss.ss_store_sk
  AddInt       r40, r40, r64
  Jump         L10
L2:
  // join d in date_dim on d.d_date_sk == ss.ss_sold_date_sk
  AddInt       r29, r29, r64
  Jump         L11
L1:
  // from ss in store_sales
  AddInt       r23, r23, r64
  Jump         L12
L0:
  Move         r143, r70
  Len          r144, r19
L14:
  LessInt      r145, r143, r144
  JumpIfFalse  r145, L13
  Index        r146, r19, r143
  Move         r147, r146
  // select { key: g.key, cnt: count(g) }
  Const        r148, "key"
  Index        r149, r147, r16
  Const        r150, "cnt"
  Index        r151, r147, r127
  Move         r152, r148
  Move         r153, r149
  Move         r154, r150
  Move         r155, r151
  MakeMap      r156, 2, r152
  // from ss in store_sales
  Append       r157, r5, r156
  Move         r5, r157
  AddInt       r143, r143, r64
  Jump         L14
L13:
  // from g in groups
  Const        r158, []
  IterPrep     r159, r5
  Len          r160, r159
  // join c in customer on c.c_customer_sk == g.key.cust
  IterPrep     r161, r4
  Len          r162, r161
  Const        r163, "c_customer_sk"
  // c_last_name: c.c_last_name,
  Const        r164, "c_last_name"
  // c_first_name: c.c_first_name,
  Const        r165, "c_first_name"
  // c_salutation: c.c_salutation,
  Const        r166, "c_salutation"
  // c_preferred_cust_flag: c.c_preferred_cust_flag,
  Const        r167, "c_preferred_cust_flag"
  // from g in groups
  Const        r168, 0
L20:
  LessInt      r169, r168, r160
  JumpIfFalse  r169, L15
  Index        r170, r159, r168
  Move         r147, r170
  // join c in customer on c.c_customer_sk == g.key.cust
  Const        r171, 0
L19:
  LessInt      r172, r171, r162
  JumpIfFalse  r172, L16
  Index        r173, r161, r171
  Move         r174, r173
  Index        r175, r174, r163
  Index        r176, r147, r16
  Index        r177, r176, r8
  Equal        r178, r175, r177
  JumpIfFalse  r178, L17
  // where g.cnt >= 1 && g.cnt <= 5
  Index        r179, r147, r17
  LessEq       r180, r64, r179
  Index        r181, r147, r17
  Const        r182, 5
  LessEq       r183, r181, r182
  Move         r184, r180
  JumpIfFalse  r184, L18
  Move         r184, r183
L18:
  JumpIfFalse  r184, L17
  // c_last_name: c.c_last_name,
  Const        r185, "c_last_name"
  Index        r186, r174, r164
  // c_first_name: c.c_first_name,
  Const        r187, "c_first_name"
  Index        r188, r174, r165
  // c_salutation: c.c_salutation,
  Const        r189, "c_salutation"
  Index        r190, r174, r166
  // c_preferred_cust_flag: c.c_preferred_cust_flag,
  Const        r191, "c_preferred_cust_flag"
  Index        r192, r174, r167
  // ss_ticket_number: g.key.ticket,
  Const        r193, "ss_ticket_number"
  Index        r194, r147, r16
  Index        r195, r194, r6
  // cnt: g.cnt
  Const        r196, "cnt"
  Index        r197, r147, r17
  // c_last_name: c.c_last_name,
  Move         r198, r185
  Move         r199, r186
  // c_first_name: c.c_first_name,
  Move         r200, r187
  Move         r201, r188
  // c_salutation: c.c_salutation,
  Move         r202, r189
  Move         r203, r190
  // c_preferred_cust_flag: c.c_preferred_cust_flag,
  Move         r204, r191
  Move         r205, r192
  // ss_ticket_number: g.key.ticket,
  Move         r206, r193
  Move         r207, r195
  // cnt: g.cnt
  Move         r208, r196
  Move         r209, r197
  // select {
  MakeMap      r210, 6, r198
  // sort by [-g.cnt, c.c_last_name]
  Index        r211, r147, r17
  Neg          r212, r211
  Move         r213, r212
  Index        r214, r174, r164
  Move         r215, r214
  MakeList     r216, 2, r213
  Move         r217, r216
  // from g in groups
  Move         r218, r210
  MakeList     r219, 2, r217
  Append       r220, r158, r219
  Move         r158, r220
L17:
  // join c in customer on c.c_customer_sk == g.key.cust
  AddInt       r171, r171, r64
  Jump         L19
L16:
  // from g in groups
  AddInt       r168, r168, r64
  Jump         L20
L15:
  // sort by [-g.cnt, c.c_last_name]
  Sort         r221, r158
  // from g in groups
  Move         r158, r221
  // json(result)
  JSON         r158
  // expect result == [
  Const        r222, [{"c_first_name": "Alice", "c_last_name": "Smith", "c_preferred_cust_flag": "Y", "c_salutation": "Ms.", "cnt": 1, "ss_ticket_number": 1}]
  Equal        r223, r158, r222
  Expect       r223
  Return       r0
