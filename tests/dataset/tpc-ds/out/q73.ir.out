func main (regs=231)
  // let store_sales = [
  Const        r0, [{"ss_customer_sk": 1, "ss_hdemo_sk": 1, "ss_sold_date_sk": 1, "ss_store_sk": 1, "ss_ticket_number": 1}]
  // let date_dim = [
  Const        r1, [{"d_date_sk": 1, "d_dom": 1, "d_year": 1998}]
  // let store = [
  Const        r2, [{"s_county": "A", "s_store_sk": 1}]
  // let household_demographics = [
  Const        r3, [{"hd_buy_potential": "1001-5000", "hd_demo_sk": 1, "hd_dep_count": 3, "hd_vehicle_count": 2}]
  // let customer = [
  Const        r4, [{"c_customer_sk": 1, "c_first_name": "Alice", "c_last_name": "Smith", "c_preferred_cust_flag": "Y", "c_salutation": "Ms."}]
  // from ss in store_sales
  Const        r5, []
  // group by { ticket: ss.ss_ticket_number, cust: ss.ss_customer_sk } into g
  Const        r6, "ticket"
  Const        r7, "ss_ticket_number"
  Const        r8, "cust"
  Const        r9, "ss_customer_sk"
  // where d.d_dom >= 1 && d.d_dom <= 2 &&
  Const        r10, "d_dom"
  // (hd.hd_buy_potential == "1001-5000" || hd.hd_buy_potential == "0-500") &&
  Const        r11, "hd_buy_potential"
  // hd.hd_vehicle_count > 0 &&
  Const        r12, "hd_vehicle_count"
  // hd.hd_dep_count / hd.hd_vehicle_count > 1 &&
  Const        r13, "hd_dep_count"
  // (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) &&
  Const        r14, "d_year"
  // s.s_county == "A"
  Const        r15, "s_county"
  // select { key: g.key, cnt: count(g) }
  Const        r16, "key"
  Const        r17, "cnt"
  // from ss in store_sales
  MakeMap      r18, 0, r0
  Const        r20, []
  Move         r19, r20
  IterPrep     r21, r0
  Len          r22, r21
  Const        r23, 0
L18:
  LessInt      r24, r23, r22
  JumpIfFalse  r24, L0
  Index        r25, r21, r23
  Move         r26, r25
  // join d in date_dim on d.d_date_sk == ss.ss_sold_date_sk
  IterPrep     r27, r1
  Len          r28, r27
  Const        r29, 0
L17:
  LessInt      r30, r29, r28
  JumpIfFalse  r30, L1
  Index        r31, r27, r29
  Move         r32, r31
  Const        r33, "d_date_sk"
  Index        r34, r32, r33
  Const        r35, "ss_sold_date_sk"
  Index        r36, r26, r35
  Equal        r37, r34, r36
  JumpIfFalse  r37, L2
  // join s in store on s.s_store_sk == ss.ss_store_sk
  IterPrep     r38, r2
  Len          r39, r38
  Const        r40, 0
L16:
  LessInt      r41, r40, r39
  JumpIfFalse  r41, L2
  Index        r42, r38, r40
  Move         r43, r42
  Const        r44, "s_store_sk"
  Index        r45, r43, r44
  Const        r46, "ss_store_sk"
  Index        r47, r26, r46
  Equal        r48, r45, r47
  JumpIfFalse  r48, L3
  // join hd in household_demographics on hd.hd_demo_sk == ss.ss_hdemo_sk
  IterPrep     r49, r3
  Len          r50, r49
  Const        r51, 0
L15:
  LessInt      r52, r51, r50
  JumpIfFalse  r52, L3
  Index        r53, r49, r51
  Move         r54, r53
  Const        r55, "hd_demo_sk"
  Index        r56, r54, r55
  Const        r57, "ss_hdemo_sk"
  Index        r58, r26, r57
  Equal        r59, r56, r58
  JumpIfFalse  r59, L4
  // where d.d_dom >= 1 && d.d_dom <= 2 &&
  Index        r60, r32, r10
  // hd.hd_dep_count / hd.hd_vehicle_count > 1 &&
  Index        r61, r54, r13
  Index        r62, r54, r12
  Div          r63, r61, r62
  // where d.d_dom >= 1 && d.d_dom <= 2 &&
  Const        r64, 1
  LessEq       r65, r64, r60
  Index        r66, r32, r10
  Const        r67, 2
  LessEq       r68, r66, r67
  // hd.hd_vehicle_count > 0 &&
  Index        r69, r54, r12
  Const        r70, 0
  Less         r71, r70, r69
  // hd.hd_dep_count / hd.hd_vehicle_count > 1 &&
  Less         r72, r64, r63
  // s.s_county == "A"
  Index        r73, r43, r15
  Const        r74, "A"
  Equal        r75, r73, r74
  // where d.d_dom >= 1 && d.d_dom <= 2 &&
  Move         r76, r65
  JumpIfFalse  r76, L5
  Move         r76, r68
L5:
  // (hd.hd_buy_potential == "1001-5000" || hd.hd_buy_potential == "0-500") &&
  Index        r77, r54, r11
  Const        r78, "1001-5000"
  Equal        r79, r77, r78
  Index        r80, r54, r11
  Const        r81, "0-500"
  Equal        r82, r80, r81
  Move         r83, r79
  JumpIfTrue   r83, L6
  Move         r83, r82
L6:
  // where d.d_dom >= 1 && d.d_dom <= 2 &&
  Move         r84, r76
  JumpIfFalse  r84, L7
  Move         r84, r83
L7:
  // (hd.hd_buy_potential == "1001-5000" || hd.hd_buy_potential == "0-500") &&
  Move         r85, r84
  JumpIfFalse  r85, L8
  Move         r85, r71
L8:
  // hd.hd_vehicle_count > 0 &&
  Move         r86, r85
  JumpIfFalse  r86, L9
  Move         r86, r72
L9:
  // (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) &&
  Index        r87, r32, r14
  Const        r88, 1998
  Equal        r89, r87, r88
  Index        r90, r32, r14
  Const        r91, 1999
  Equal        r92, r90, r91
  Index        r93, r32, r14
  Const        r94, 2000
  Equal        r95, r93, r94
  Move         r96, r89
  JumpIfTrue   r96, L10
  Move         r96, r92
L10:
  Move         r97, r96
  JumpIfTrue   r97, L11
  Move         r97, r95
L11:
  // hd.hd_dep_count / hd.hd_vehicle_count > 1 &&
  Move         r98, r86
  JumpIfFalse  r98, L12
  Move         r98, r97
L12:
  // (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) &&
  Move         r99, r98
  JumpIfFalse  r99, L13
  Move         r99, r75
L13:
  // where d.d_dom >= 1 && d.d_dom <= 2 &&
  JumpIfFalse  r99, L4
  // from ss in store_sales
  Const        r100, "ss"
  Move         r101, r26
  Const        r102, "d"
  Move         r103, r32
  Const        r104, "s"
  Move         r105, r43
  Const        r106, "hd"
  Move         r107, r54
  Move         r108, r100
  Move         r109, r101
  Move         r110, r102
  Move         r111, r103
  Move         r112, r104
  Move         r113, r105
  Move         r114, r106
  Move         r115, r107
  MakeMap      r116, 4, r108
  // group by { ticket: ss.ss_ticket_number, cust: ss.ss_customer_sk } into g
  Const        r117, "ticket"
  Index        r118, r26, r7
  Const        r119, "cust"
  Index        r120, r26, r9
  Move         r121, r117
  Move         r122, r118
  Move         r123, r119
  Move         r124, r120
  MakeMap      r125, 2, r121
  Str          r126, r125
  In           r127, r126, r18
  JumpIfTrue   r127, L14
  // from ss in store_sales
  Const        r128, []
  Const        r129, "__group__"
  Const        r130, true
  // group by { ticket: ss.ss_ticket_number, cust: ss.ss_customer_sk } into g
  Move         r131, r125
  // from ss in store_sales
  Const        r132, "items"
  Move         r133, r128
  Const        r134, "count"
  Move         r135, r129
  Move         r136, r130
  Move         r137, r16
  Move         r138, r131
  Move         r139, r132
  Move         r140, r133
  Move         r141, r134
  Move         r142, r70
  MakeMap      r143, 4, r135
  SetIndex     r18, r126, r143
  Append       r144, r19, r143
  Move         r19, r144
L14:
  Index        r145, r18, r126
  Index        r146, r145, r132
  Append       r147, r146, r116
  SetIndex     r145, r132, r147
  Index        r148, r145, r134
  AddInt       r149, r148, r64
  SetIndex     r145, r134, r149
L4:
  // join hd in household_demographics on hd.hd_demo_sk == ss.ss_hdemo_sk
  AddInt       r51, r51, r64
  Jump         L15
L3:
  // join s in store on s.s_store_sk == ss.ss_store_sk
  AddInt       r40, r40, r64
  Jump         L16
L2:
  // join d in date_dim on d.d_date_sk == ss.ss_sold_date_sk
  AddInt       r29, r29, r64
  Jump         L17
L1:
  // from ss in store_sales
  AddInt       r23, r23, r64
  Jump         L18
L0:
  Move         r150, r70
  Len          r151, r19
L20:
  LessInt      r152, r150, r151
  JumpIfFalse  r152, L19
  Index        r153, r19, r150
  Move         r154, r153
  // select { key: g.key, cnt: count(g) }
  Const        r155, "key"
  Index        r156, r154, r16
  Const        r157, "cnt"
  Index        r158, r154, r134
  Move         r159, r155
  Move         r160, r156
  Move         r161, r157
  Move         r162, r158
  MakeMap      r163, 2, r159
  // from ss in store_sales
  Append       r164, r5, r163
  Move         r5, r164
  AddInt       r150, r150, r64
  Jump         L20
L19:
  // from g in groups
  Const        r165, []
  IterPrep     r166, r5
  Len          r167, r166
  // join c in customer on c.c_customer_sk == g.key.cust
  IterPrep     r168, r4
  Len          r169, r168
  Const        r170, "c_customer_sk"
  // c_last_name: c.c_last_name,
  Const        r171, "c_last_name"
  // c_first_name: c.c_first_name,
  Const        r172, "c_first_name"
  // c_salutation: c.c_salutation,
  Const        r173, "c_salutation"
  // c_preferred_cust_flag: c.c_preferred_cust_flag,
  Const        r174, "c_preferred_cust_flag"
  // from g in groups
  Const        r175, 0
L26:
  LessInt      r176, r175, r167
  JumpIfFalse  r176, L21
  Index        r177, r166, r175
  Move         r154, r177
  // join c in customer on c.c_customer_sk == g.key.cust
  Const        r178, 0
L25:
  LessInt      r179, r178, r169
  JumpIfFalse  r179, L22
  Index        r180, r168, r178
  Move         r181, r180
  Index        r182, r181, r170
  Index        r183, r154, r16
  Index        r184, r183, r8
  Equal        r185, r182, r184
  JumpIfFalse  r185, L23
  // where g.cnt >= 1 && g.cnt <= 5
  Index        r186, r154, r17
  LessEq       r187, r64, r186
  Index        r188, r154, r17
  Const        r189, 5
  LessEq       r190, r188, r189
  Move         r191, r187
  JumpIfFalse  r191, L24
  Move         r191, r190
L24:
  JumpIfFalse  r191, L23
  // c_last_name: c.c_last_name,
  Const        r192, "c_last_name"
  Index        r193, r181, r171
  // c_first_name: c.c_first_name,
  Const        r194, "c_first_name"
  Index        r195, r181, r172
  // c_salutation: c.c_salutation,
  Const        r196, "c_salutation"
  Index        r197, r181, r173
  // c_preferred_cust_flag: c.c_preferred_cust_flag,
  Const        r198, "c_preferred_cust_flag"
  Index        r199, r181, r174
  // ss_ticket_number: g.key.ticket,
  Const        r200, "ss_ticket_number"
  Index        r201, r154, r16
  Index        r202, r201, r6
  // cnt: g.cnt
  Const        r203, "cnt"
  Index        r204, r154, r17
  // c_last_name: c.c_last_name,
  Move         r205, r192
  Move         r206, r193
  // c_first_name: c.c_first_name,
  Move         r207, r194
  Move         r208, r195
  // c_salutation: c.c_salutation,
  Move         r209, r196
  Move         r210, r197
  // c_preferred_cust_flag: c.c_preferred_cust_flag,
  Move         r211, r198
  Move         r212, r199
  // ss_ticket_number: g.key.ticket,
  Move         r213, r200
  Move         r214, r202
  // cnt: g.cnt
  Move         r215, r203
  Move         r216, r204
  // select {
  MakeMap      r217, 6, r205
  // sort by [-g.cnt, c.c_last_name]
  Index        r218, r154, r17
  Neg          r219, r218
  Move         r220, r219
  Index        r221, r181, r171
  Move         r222, r221
  MakeList     r223, 2, r220
  Move         r224, r223
  // from g in groups
  Move         r225, r217
  MakeList     r226, 2, r224
  Append       r227, r165, r226
  Move         r165, r227
L23:
  // join c in customer on c.c_customer_sk == g.key.cust
  AddInt       r178, r178, r64
  Jump         L25
L22:
  // from g in groups
  AddInt       r175, r175, r64
  Jump         L26
L21:
  // sort by [-g.cnt, c.c_last_name]
  Sort         r228, r165
  // from g in groups
  Move         r165, r228
  // json(result)
  JSON         r165
  // expect result == [
  Const        r229, [{"c_first_name": "Alice", "c_last_name": "Smith", "c_preferred_cust_flag": "Y", "c_salutation": "Ms.", "cnt": 1, "ss_ticket_number": 1}]
  Equal        r230, r165, r229
  Expect       r230
  Return       r0

