func main (regs=5)
  // let store_sales = [
  Const        r0, [{"cust": "A"}, {"cust": "B"}, {"cust": "B"}, {"cust": "C"}]
  // let catalog_sales = [
  Const        r1, [{"cust": "A"}, {"cust": "C"}, {"cust": "D"}]
  // let web_sales = [
  Const        r2, [{"cust": "A"}, {"cust": "D"}]
  // let result = 87
  Const        r3, 87
  // json(result)
  JSON         r3
  // expect result == 87
  Const        r4, true
  Expect       r4
  Return       r0

  // fun distinct(xs: list<any>): list<any> {
func distinct (regs=14)
  // var out = []
  Const        r1, []
  Move         r2, r1
  // for x in xs {
  IterPrep     r3, r0
  Len          r4, r3
  Const        r5, 0
L2:
  Less         r6, r5, r4
  JumpIfFalse  r6, L0
  Index        r7, r3, r5
  Move         r8, r7
  // if !contains(out, x) {
  Not          r10, r9
  JumpIfFalse  r10, L1
  // out = append(out, x)
  Append       r11, r2, r8
  Move         r2, r11
L1:
  // for x in xs {
  Const        r12, 1
  Add          r13, r5, r12
  Move         r5, r13
  Jump         L2
L0:
  // return out
  Return       r2

  // fun concat(a: list<any>, b: list<any>): list<any> {
func concat (regs=12)
  // var out = a
  Move         r2, r0
  // for x in b {
  IterPrep     r3, r1
  Len          r4, r3
  Const        r5, 0
L1:
  Less         r6, r5, r4
  JumpIfFalse  r6, L0
  Index        r7, r3, r5
  Move         r8, r7
  // out = append(out, x)
  Append       r9, r2, r8
  Move         r2, r9
  // for x in b {
  Const        r10, 1
  Add          r11, r5, r10
  Move         r5, r11
  Jump         L1
L0:
  // return out
  Return       r2

  // fun to_list(xs: list<any>): list<any> { return xs }
func to_list (regs=1)
  // fun to_list(xs: list<any>): list<any> { return xs }
  Return       r0
