func main (regs=63)
  // let store_sales = [
  Const        r0, [{"cust": "A"}, {"cust": "B"}, {"cust": "B"}, {"cust": "C"}]
  // let catalog_sales = [
  Const        r1, [{"cust": "A"}, {"cust": "C"}, {"cust": "D"}]
  // let web_sales = [
  Const        r2, [{"cust": "A"}, {"cust": "D"}]
  // let store_customers = distinct(from s in store_sales select s.cust)
  Const        r4, []
  Const        r5, "cust"
  IterPrep     r6, r0
  Len          r7, r6
  Const        r8, 0
L1:
  LessInt      r10, r8, r7
  JumpIfFalse  r10, L0
  Index        r12, r6, r8
  Const        r13, "cust"
  Index        r14, r12, r13
  Append       r4, r4, r14
  Const        r16, 1
  AddInt       r8, r8, r16
  Jump         L1
L0:
  Move         r3, r4
  Call         r17, distinct, r3
  // let other_customers = distinct(concat(from c in catalog_sales select c.cust,
  Const        r19, []
  Const        r20, "cust"
  IterPrep     r21, r1
  Len          r22, r21
  Const        r23, 0
L3:
  LessInt      r25, r23, r22
  JumpIfFalse  r25, L2
  Index        r27, r21, r23
  Const        r28, "cust"
  Index        r29, r27, r28
  Append       r19, r19, r29
  Const        r31, 1
  AddInt       r23, r23, r31
  Jump         L3
L2:
  // from w in web_sales select w.cust))
  Const        r32, []
  Const        r33, "cust"
  IterPrep     r34, r2
  Len          r35, r34
  Const        r36, 0
L5:
  LessInt      r38, r36, r35
  JumpIfFalse  r38, L4
  Index        r40, r34, r36
  Const        r41, "cust"
  Index        r42, r40, r41
  Append       r32, r32, r42
  Const        r44, 1
  AddInt       r36, r36, r44
  Jump         L5
L4:
  // let other_customers = distinct(concat(from c in catalog_sales select c.cust,
  UnionAll     r18, r19, r32
  Call         r46, distinct, r18
  // let diff = []
  Const        r47, []
  // for c in store_customers {
  IterPrep     r48, r17
  Len          r49, r48
  Const        r50, 0
L8:
  Less         r51, r50, r49
  JumpIfFalse  r51, L6
  Index        r27, r48, r50
  // if !contains(other_customers, c) {
  Not          r54, r53
  JumpIfFalse  r54, L7
  // diff = append(diff, c)
  Append       r47, r47, r27
L7:
  // for c in store_customers {
  Const        r56, 1
  Add          r50, r50, r56
  Jump         L8
L6:
  // let result = len(diff) * 87
  Const        r58, 0
  Const        r59, 87
  Const        r60, 0
  // json(result)
  JSON         r60
  // expect result == 87
  Const        r61, 87
  Const        r62, false
  Expect       r62
  Return       r0

  // fun distinct(xs: list<any>): list<any> {
func distinct (regs=14)
  // var out = []
  Const        r2, []
  // for x in xs {
  IterPrep     r3, r0
  Len          r4, r3
  Const        r5, 0
L2:
  Less         r6, r5, r4
  JumpIfFalse  r6, L0
  Index        r8, r3, r5
  // if !contains(out, x) {
  Not          r10, r9
  JumpIfFalse  r10, L1
  // out = append(out, x)
  Append       r2, r2, r8
L1:
  // for x in xs {
  Const        r12, 1
  Add          r5, r5, r12
  Jump         L2
L0:
  // return out
  Return       r2

  // fun concat(a: list<any>, b: list<any>): list<any> {
func concat (regs=12)
  // var out = a
  Move         r2, r0
  // for x in b {
  IterPrep     r3, r1
  Len          r4, r3
  Const        r5, 0
L1:
  Less         r6, r5, r4
  JumpIfFalse  r6, L0
  Index        r8, r3, r5
  // out = append(out, x)
  Append       r2, r2, r8
  // for x in b {
  Const        r10, 1
  Add          r5, r5, r10
  Jump         L1
L0:
  // return out
  Return       r2

  // fun to_list(xs: list<any>): list<any> { return xs }
func to_list (regs=1)
  // fun to_list(xs: list<any>): list<any> { return xs }
  Return       r0
