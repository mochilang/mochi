func main (regs=147)
  // let item = [
  Const        r0, [{"i_item_sk": 1, "i_manufact_id": 1}, {"i_item_sk": 2, "i_manufact_id": 2}]
  // let store_sales = [
  Const        r1, [{"date": 1, "item": 1, "price": 10.0}, {"date": 2, "item": 1, "price": 10.0}, {"date": 1, "item": 2, "price": 30.0}, {"date": 2, "item": 2, "price": 23.0}]
  // let date_dim = [
  Const        r2, [{"d_date_sk": 1, "d_month_seq": 1}, {"d_date_sk": 2, "d_month_seq": 2}]
  // from ss in store_sales
  Const        r3, []
  // group by i.i_manufact_id into g
  Const        r4, "i_manufact_id"
  // select {manu: g.key, sum_sales: sum(from x in g select x.price), avg_sales: avg(from x in g select x.price)}
  Const        r5, "manu"
  Const        r6, "key"
  Const        r7, "sum_sales"
  Const        r8, "price"
  Const        r9, "avg_sales"
  Const        r8, "price"
  // from ss in store_sales
  MakeMap      r10, 0, r0
  Const        r12, []
  Move         r11, r12
  IterPrep     r13, r1
  Len          r14, r13
  Const        r15, 0
L7:
  LessInt      r16, r15, r14
  JumpIfFalse  r16, L0
  Index        r17, r13, r15
  Move         r18, r17
  // join i in item on ss.item == i.i_item_sk
  IterPrep     r19, r0
  Len          r20, r19
  Const        r21, 0
L6:
  LessInt      r22, r21, r20
  JumpIfFalse  r22, L1
  Index        r23, r19, r21
  Move         r24, r23
  Const        r25, "item"
  Index        r26, r18, r25
  Const        r27, "i_item_sk"
  Index        r28, r24, r27
  Equal        r29, r26, r28
  JumpIfFalse  r29, L2
  // join d in date_dim on ss.date == d.d_date_sk
  IterPrep     r30, r2
  Len          r31, r30
  Const        r32, 0
L5:
  LessInt      r33, r32, r31
  JumpIfFalse  r33, L2
  Index        r34, r30, r32
  Move         r35, r34
  Const        r36, "date"
  Index        r37, r18, r36
  Const        r38, "d_date_sk"
  Index        r39, r35, r38
  Equal        r40, r37, r39
  JumpIfFalse  r40, L3
  // from ss in store_sales
  Const        r41, "ss"
  Move         r42, r18
  Const        r43, "i"
  Move         r44, r24
  Const        r45, "d"
  Move         r46, r35
  Move         r47, r41
  Move         r48, r42
  Move         r49, r43
  Move         r50, r44
  Move         r51, r45
  Move         r52, r46
  MakeMap      r53, 3, r47
  // group by i.i_manufact_id into g
  Const        r4, "i_manufact_id"
  Index        r54, r24, r4
  Str          r55, r54
  In           r56, r55, r10
  JumpIfTrue   r56, L4
  // from ss in store_sales
  Const        r12, []
  Const        r57, "__group__"
  Const        r58, true
  Const        r6, "key"
  // group by i.i_manufact_id into g
  Move         r59, r54
  // from ss in store_sales
  Const        r60, "items"
  Move         r61, r12
  Const        r62, "count"
  Const        r63, 0
  Move         r64, r57
  Move         r65, r58
  Move         r66, r6
  Move         r67, r59
  Move         r68, r60
  Move         r69, r61
  Move         r70, r62
  Move         r71, r63
  MakeMap      r72, 4, r64
  SetIndex     r10, r55, r72
  Append       r73, r11, r72
  Move         r11, r73
L4:
  Const        r60, "items"
  Index        r74, r10, r55
  Index        r75, r74, r60
  Append       r76, r75, r53
  SetIndex     r74, r60, r76
  Const        r62, "count"
  Index        r77, r74, r62
  Const        r78, 1
  AddInt       r79, r77, r78
  SetIndex     r74, r62, r79
L3:
  // join d in date_dim on ss.date == d.d_date_sk
  Const        r78, 1
  AddInt       r32, r32, r78
  Jump         L5
L2:
  // join i in item on ss.item == i.i_item_sk
  Const        r78, 1
  AddInt       r21, r21, r78
  Jump         L6
L1:
  // from ss in store_sales
  Const        r78, 1
  AddInt       r15, r15, r78
  Jump         L7
L0:
  Const        r63, 0
  Move         r80, r63
  Len          r81, r11
L13:
  LessInt      r82, r80, r81
  JumpIfFalse  r82, L8
  Index        r83, r11, r80
  Move         r84, r83
  // select {manu: g.key, sum_sales: sum(from x in g select x.price), avg_sales: avg(from x in g select x.price)}
  Const        r85, "manu"
  Const        r6, "key"
  Index        r86, r84, r6
  Const        r87, "sum_sales"
  Const        r88, []
  Const        r8, "price"
  IterPrep     r89, r84
  Len          r90, r89
  Const        r63, 0
  Move         r91, r63
L10:
  LessInt      r92, r91, r90
  JumpIfFalse  r92, L9
  Index        r93, r89, r91
  Move         r94, r93
  Const        r8, "price"
  Index        r95, r94, r8
  Append       r96, r88, r95
  Move         r88, r96
  Const        r78, 1
  AddInt       r91, r91, r78
  Jump         L10
L9:
  Sum          r97, r88
  Const        r98, "avg_sales"
  Const        r99, []
  Const        r8, "price"
  IterPrep     r100, r84
  Len          r101, r100
  Const        r63, 0
  Move         r102, r63
L12:
  LessInt      r103, r102, r101
  JumpIfFalse  r103, L11
  Index        r104, r100, r102
  Move         r94, r104
  Const        r8, "price"
  Index        r105, r94, r8
  Append       r106, r99, r105
  Move         r99, r106
  Const        r78, 1
  AddInt       r102, r102, r78
  Jump         L12
L11:
  Avg          r107, r99
  Move         r108, r85
  Move         r109, r86
  Move         r110, r87
  Move         r111, r97
  Move         r112, r98
  Move         r113, r107
  MakeMap      r114, 3, r108
  // from ss in store_sales
  Append       r115, r3, r114
  Move         r3, r115
  Const        r78, 1
  AddInt       r80, r80, r78
  Jump         L13
L8:
  // from g in grouped
  Const        r116, []
  // where g.avg_sales > 0.0 && abs(g.sum_sales - g.avg_sales) / g.avg_sales > 0.1
  Const        r9, "avg_sales"
  Const        r7, "sum_sales"
  Const        r9, "avg_sales"
  Const        r9, "avg_sales"
  // select {i_manufact_id: g.manu, sum_sales: g.sum_sales}
  Const        r4, "i_manufact_id"
  Const        r5, "manu"
  Const        r7, "sum_sales"
  Const        r7, "sum_sales"
  // from g in grouped
  IterPrep     r117, r3
  Len          r118, r117
  Const        r63, 0
  Move         r119, r63
L17:
  LessInt      r120, r119, r118
  JumpIfFalse  r120, L14
  Index        r121, r117, r119
  Move         r84, r121
  // where g.avg_sales > 0.0 && abs(g.sum_sales - g.avg_sales) / g.avg_sales > 0.1
  Const        r9, "avg_sales"
  Index        r122, r84, r9
  Const        r7, "sum_sales"
  Index        r124, r84, r7
  Const        r9, "avg_sales"
  Index        r125, r84, r9
  Sub          r126, r124, r125
  Move         r123, r126
  Call         r127, abs, r123
  Const        r9, "avg_sales"
  Index        r128, r84, r9
  Div          r129, r127, r128
  Const        r130, 0.0
  LessFloat    r131, r130, r122
  Const        r132, 0.1
  LessFloat    r133, r132, r129
  Move         r134, r131
  JumpIfFalse  r134, L15
  Move         r134, r133
L15:
  JumpIfFalse  r134, L16
  // select {i_manufact_id: g.manu, sum_sales: g.sum_sales}
  Const        r135, "i_manufact_id"
  Const        r5, "manu"
  Index        r136, r84, r5
  Const        r137, "sum_sales"
  Const        r7, "sum_sales"
  Index        r138, r84, r7
  Move         r139, r135
  Move         r140, r136
  Move         r141, r137
  Move         r142, r138
  MakeMap      r143, 2, r139
  // from g in grouped
  Append       r144, r116, r143
  Move         r116, r144
L16:
  Const        r78, 1
  AddInt       r119, r119, r78
  Jump         L17
L14:
  // json(result)
  JSON         r116
  // expect result == [
  Const        r145, [{"i_manufact_id": 1, "sum_sales": 20.0}, {"i_manufact_id": 2, "sum_sales": 53.0}]
  Equal        r146, r116, r145
  Expect       r146
  Return       r0

  // fun abs(x: float): float {
func abs (regs=4)
  // if x >= 0.0 {
  Const        r1, 0.0
  LessEqFloat  r2, r1, r0
  JumpIfFalse  r2, L0
  // return x
  Return       r0
L0:
  // return -x
  Neg          r3, r0
  Return       r3
