func main (regs=60)
  // let catalog_sales = [
  Const        r0, [{"cs_ext_discount_amt": 5.0, "cs_item_sk": 1, "cs_sold_date_sk": 1}, {"cs_ext_discount_amt": 10.0, "cs_item_sk": 1, "cs_sold_date_sk": 2}, {"cs_ext_discount_amt": 20.0, "cs_item_sk": 1, "cs_sold_date_sk": 3}]
  // let item = [
  Const        r1, [{"i_item_sk": 1, "i_manufact_id": 1}]
  // let date_dim = [
  Const        r2, [{"d_date_sk": 1, "d_year": 2000}, {"d_date_sk": 2, "d_year": 2000}, {"d_date_sk": 3, "d_year": 2000}]
  // from cs in catalog_sales
  Const        r3, []
  // where i.i_manufact_id == 1 && d.d_year == 2000
  Const        r4, "i_manufact_id"
  Const        r5, "d_year"
  // select cs.cs_ext_discount_amt
  Const        r6, "cs_ext_discount_amt"
  // from cs in catalog_sales
  IterPrep     r7, r0
  Len          r8, r7
  Const        r10, 0
  Move         r9, r10
L7:
  LessInt      r11, r9, r8
  JumpIfFalse  r11, L0
  Index        r12, r7, r9
  Move         r13, r12
  // join i in item on cs.cs_item_sk == i.i_item_sk
  IterPrep     r14, r1
  Len          r15, r14
  Const        r16, "cs_item_sk"
  Const        r17, "i_item_sk"
  // where i.i_manufact_id == 1 && d.d_year == 2000
  Const        r4, "i_manufact_id"
  Const        r5, "d_year"
  // select cs.cs_ext_discount_amt
  Const        r6, "cs_ext_discount_amt"
  // join i in item on cs.cs_item_sk == i.i_item_sk
  Const        r10, 0
  Move         r18, r10
L6:
  LessInt      r19, r18, r15
  JumpIfFalse  r19, L1
  Index        r20, r14, r18
  Move         r21, r20
  Const        r16, "cs_item_sk"
  Index        r22, r13, r16
  Const        r17, "i_item_sk"
  Index        r23, r21, r17
  Equal        r24, r22, r23
  JumpIfFalse  r24, L2
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  IterPrep     r25, r2
  Len          r26, r25
  Const        r27, "cs_sold_date_sk"
  Const        r28, "d_date_sk"
  // where i.i_manufact_id == 1 && d.d_year == 2000
  Const        r4, "i_manufact_id"
  Const        r5, "d_year"
  // select cs.cs_ext_discount_amt
  Const        r6, "cs_ext_discount_amt"
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  Const        r10, 0
  Move         r29, r10
L5:
  LessInt      r30, r29, r26
  JumpIfFalse  r30, L2
  Index        r31, r25, r29
  Move         r32, r31
  Const        r27, "cs_sold_date_sk"
  Index        r33, r13, r27
  Const        r28, "d_date_sk"
  Index        r34, r32, r28
  Equal        r35, r33, r34
  JumpIfFalse  r35, L3
  // where i.i_manufact_id == 1 && d.d_year == 2000
  Const        r4, "i_manufact_id"
  Index        r36, r21, r4
  Const        r37, 1
  Equal        r38, r36, r37
  Const        r5, "d_year"
  Index        r39, r32, r5
  Const        r40, 2000
  Equal        r41, r39, r40
  Move         r42, r38
  JumpIfFalse  r42, L4
  Move         r42, r41
L4:
  JumpIfFalse  r42, L3
  // select cs.cs_ext_discount_amt
  Const        r6, "cs_ext_discount_amt"
  Index        r43, r13, r6
  // from cs in catalog_sales
  Append       r44, r3, r43
  Move         r3, r44
L3:
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  Const        r37, 1
  Add          r29, r29, r37
  Jump         L5
L2:
  // join i in item on cs.cs_item_sk == i.i_item_sk
  Const        r37, 1
  Add          r18, r18, r37
  Jump         L6
L1:
  // from cs in catalog_sales
  Const        r37, 1
  AddInt       r9, r9, r37
  Jump         L7
L0:
  // let avg_discount = avg(filtered)
  Avg          r45, r3
  // let result = sum(from x in filtered where x > avg_discount * 1.3 select x)
  Const        r46, []
  IterPrep     r47, r3
  Len          r48, r47
  Const        r10, 0
  Move         r49, r10
L10:
  LessInt      r50, r49, r48
  JumpIfFalse  r50, L8
  Index        r51, r47, r49
  Move         r52, r51
  Const        r53, 1.3
  MulFloat     r54, r45, r53
  LessFloat    r55, r54, r52
  JumpIfFalse  r55, L9
  Append       r56, r46, r52
  Move         r46, r56
L9:
  Const        r37, 1
  AddInt       r49, r49, r37
  Jump         L10
L8:
  Sum          r57, r46
  // json(result)
  JSON         r57
  // expect result == 20.0
  Const        r58, 20.0
  EqualFloat   r59, r57, r58
  Expect       r59
  Return       r0
