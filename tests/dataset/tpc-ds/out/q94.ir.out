func main (regs=115)
  // let web_sales = [
  Const        r0, [{"ws_ext_ship_cost": 2, "ws_net_profit": 5, "ws_order_number": 1, "ws_ship_addr_sk": 1, "ws_ship_date_sk": 1, "ws_warehouse_sk": 1, "ws_web_site_sk": 1}, {"ws_ext_ship_cost": 1, "ws_net_profit": 3, "ws_order_number": 2, "ws_ship_addr_sk": 1, "ws_ship_date_sk": 1, "ws_warehouse_sk": 2, "ws_web_site_sk": 1}]
  // let web_returns = [{wr_order_number: 2}]
  Const        r1, [{"wr_order_number": 2}]
  // let date_dim = [{d_date_sk: 1, d_date: "2001-02-01"}]
  Const        r2, [{"d_date": "2001-02-01", "d_date_sk": 1}]
  // let customer_address = [{ca_address_sk: 1, ca_state: "CA"}]
  Const        r3, [{"ca_address_sk": 1, "ca_state": "CA"}]
  // let web_site = [{web_site_sk: 1, web_company_name: "pri"}]
  Const        r4, [{"web_company_name": "pri", "web_site_sk": 1}]
  // from ws in web_sales
  Const        r5, []
  // where ca.ca_state == "CA" && w.web_company_name == "pri" &&
  Const        r6, "ca_state"
  Const        r7, "web_company_name"
  // exists(from wr in web_returns where wr.wr_order_number == ws.ws_order_number select wr) == false
  Const        r8, "wr_order_number"
  Const        r9, "ws_order_number"
  // from ws in web_sales
  IterPrep     r10, r0
  Len          r11, r10
  Const        r13, 0
  Move         r12, r13
L12:
  LessInt      r14, r12, r11
  JumpIfFalse  r14, L0
  Index        r16, r10, r12
  // join d in date_dim on ws.ws_ship_date_sk == d.d_date_sk
  IterPrep     r17, r2
  Len          r18, r17
  Const        r19, "ws_ship_date_sk"
  Const        r20, "d_date_sk"
  Move         r21, r13
L11:
  LessInt      r22, r21, r18
  JumpIfFalse  r22, L1
  Index        r24, r17, r21
  Index        r25, r16, r19
  Index        r26, r24, r20
  Equal        r27, r25, r26
  JumpIfFalse  r27, L2
  // join ca in customer_address on ws.ws_ship_addr_sk == ca.ca_address_sk
  IterPrep     r28, r3
  Len          r29, r28
  Const        r30, "ws_ship_addr_sk"
  Const        r31, "ca_address_sk"
  Move         r32, r13
L10:
  LessInt      r33, r32, r29
  JumpIfFalse  r33, L2
  Index        r35, r28, r32
  Index        r36, r16, r30
  Index        r37, r35, r31
  Equal        r38, r36, r37
  JumpIfFalse  r38, L3
  // join w in web_site on ws.ws_web_site_sk == w.web_site_sk
  IterPrep     r39, r4
  Len          r40, r39
  Const        r41, "ws_web_site_sk"
  Const        r42, "web_site_sk"
  Move         r43, r13
L9:
  LessInt      r44, r43, r40
  JumpIfFalse  r44, L3
  Index        r46, r39, r43
  Index        r47, r16, r41
  Index        r48, r46, r42
  Equal        r49, r47, r48
  JumpIfFalse  r49, L4
  // where ca.ca_state == "CA" && w.web_company_name == "pri" &&
  Index        r50, r35, r6
  Const        r51, "CA"
  Equal        r52, r50, r51
  Index        r53, r46, r7
  Const        r54, "pri"
  Equal        r55, r53, r54
  // exists(from wr in web_returns where wr.wr_order_number == ws.ws_order_number select wr) == false
  Const        r56, []
  IterPrep     r57, r1
  Len          r58, r57
  Move         r59, r13
L7:
  LessInt      r60, r59, r58
  JumpIfFalse  r60, L5
  Index        r62, r57, r59
  Index        r63, r62, r8
  Index        r64, r16, r9
  Equal        r65, r63, r64
  JumpIfFalse  r65, L6
  Append       r56, r56, r62
L6:
  Const        r67, 1
  AddInt       r59, r59, r67
  Jump         L7
L5:
  Exists       r68, r56
  Const        r69, false
  Equal        r70, r68, r69
  // where ca.ca_state == "CA" && w.web_company_name == "pri" &&
  JumpIfFalse  r52, L8
  Move         r52, r55
  JumpIfFalse  r52, L8
  Move         r52, r70
L8:
  JumpIfFalse  r52, L4
  // from ws in web_sales
  Append       r5, r5, r16
L4:
  // join w in web_site on ws.ws_web_site_sk == w.web_site_sk
  Add          r43, r43, r67
  Jump         L9
L3:
  // join ca in customer_address on ws.ws_ship_addr_sk == ca.ca_address_sk
  Add          r32, r32, r67
  Jump         L10
L2:
  // join d in date_dim on ws.ws_ship_date_sk == d.d_date_sk
  Add          r21, r21, r67
  Jump         L11
L1:
  // from ws in web_sales
  AddInt       r12, r12, r67
  Jump         L12
L0:
  // order_count: len(distinct(from x in filtered select x.ws_order_number)),
  Const        r72, "order_count"
  Const        r73, []
  IterPrep     r74, r5
  Len          r75, r74
  Move         r76, r13
L14:
  LessInt      r77, r76, r75
  JumpIfFalse  r77, L13
  Index        r79, r74, r76
  Index        r80, r79, r9
  Append       r73, r73, r80
  AddInt       r76, r76, r67
  Jump         L14
L13:
  Distinct     82,73,0,0
  Len          r83, r82
  // total_shipping_cost: sum(from x in filtered select x.ws_ext_ship_cost),
  Const        r84, "total_shipping_cost"
  Const        r85, []
  Const        r86, "ws_ext_ship_cost"
  IterPrep     r87, r5
  Len          r88, r87
  Move         r89, r13
L16:
  LessInt      r90, r89, r88
  JumpIfFalse  r90, L15
  Index        r79, r87, r89
  Index        r92, r79, r86
  Append       r85, r85, r92
  AddInt       r89, r89, r67
  Jump         L16
L15:
  Sum          r94, r85
  // total_net_profit: sum(from x in filtered select x.ws_net_profit)
  Const        r95, "total_net_profit"
  Const        r96, []
  Const        r97, "ws_net_profit"
  IterPrep     r98, r5
  Len          r99, r98
  Move         r100, r13
L18:
  LessInt      r101, r100, r99
  JumpIfFalse  r101, L17
  Index        r79, r98, r100
  Index        r103, r79, r97
  Append       r96, r96, r103
  AddInt       r100, r100, r67
  Jump         L18
L17:
  Sum          r105, r96
  // order_count: len(distinct(from x in filtered select x.ws_order_number)),
  Move         r106, r72
  Move         r107, r83
  // total_shipping_cost: sum(from x in filtered select x.ws_ext_ship_cost),
  Move         r108, r84
  Move         r109, r94
  // total_net_profit: sum(from x in filtered select x.ws_net_profit)
  Move         r110, r95
  Move         r111, r105
  // let result = {
  MakeMap      r112, 3, r106
  // json(result)
  JSON         r112
  // expect result == {order_count: 1, total_shipping_cost: 2.0, total_net_profit: 5.0}
  Const        r113, {"order_count": 1, "total_net_profit": 5, "total_shipping_cost": 2}
  Equal        r114, r112, r113
  Expect       r114
  Return       r0

  // fun distinct(xs: list<any>): list<any> {
func distinct (regs=14)
  // var out = []
  Const        r2, []
  // for x in xs {
  IterPrep     r3, r0
  Len          r4, r3
  Const        r5, 0
L2:
  Less         r6, r5, r4
  JumpIfFalse  r6, L0
  Index        r8, r3, r5
  // if !contains(out, x) {
  Not          r10, r9
  JumpIfFalse  r10, L1
  // out = append(out, x)
  Append       r2, r2, r8
L1:
  // for x in xs {
  Const        r12, 1
  Add          r5, r5, r12
  Jump         L2
L0:
  // return out
  Return       r2
