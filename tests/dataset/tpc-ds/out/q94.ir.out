func main (regs=159)
  // let web_sales = [
  Const        r0, [{"ws_ext_ship_cost": 2, "ws_net_profit": 5, "ws_order_number": 1, "ws_ship_addr_sk": 1, "ws_ship_date_sk": 1, "ws_warehouse_sk": 1, "ws_web_site_sk": 1}, {"ws_ext_ship_cost": 1, "ws_net_profit": 3, "ws_order_number": 2, "ws_ship_addr_sk": 1, "ws_ship_date_sk": 1, "ws_warehouse_sk": 2, "ws_web_site_sk": 1}]
  // let web_returns = [{wr_order_number: 2}]
  Const        r1, [{"wr_order_number": 2}]
  // let date_dim = [{d_date_sk: 1, d_date: "2001-02-01"}]
  Const        r2, [{"d_date": "2001-02-01", "d_date_sk": 1}]
  // let customer_address = [{ca_address_sk: 1, ca_state: "CA"}]
  Const        r3, [{"ca_address_sk": 1, "ca_state": "CA"}]
  // let web_site = [{web_site_sk: 1, web_company_name: "pri"}]
  Const        r4, [{"web_company_name": "pri", "web_site_sk": 1}]
  // from ws in web_sales
  Const        r5, []
  // where ca.ca_state == "CA" && w.web_company_name == "pri" &&
  Const        r6, "ca_state"
  Const        r7, "web_company_name"
  // exists(from wr in web_returns where wr.wr_order_number == ws.ws_order_number select wr) == false
  Const        r8, "wr_order_number"
  Const        r9, "ws_order_number"
  // from ws in web_sales
  IterPrep     r10, r0
  Len          r11, r10
  Const        r12, 0
L13:
  LessInt      r14, r12, r11
  JumpIfFalse  r14, L0
  Index        r16, r10, r12
  // join d in date_dim on ws.ws_ship_date_sk == d.d_date_sk
  IterPrep     r17, r2
  Len          r18, r17
  Const        r19, "ws_ship_date_sk"
  Const        r20, "d_date_sk"
  // where ca.ca_state == "CA" && w.web_company_name == "pri" &&
  Const        r21, "ca_state"
  Const        r22, "web_company_name"
  // exists(from wr in web_returns where wr.wr_order_number == ws.ws_order_number select wr) == false
  Const        r23, "wr_order_number"
  Const        r24, "ws_order_number"
  // join d in date_dim on ws.ws_ship_date_sk == d.d_date_sk
  Const        r25, 0
L12:
  LessInt      r27, r25, r18
  JumpIfFalse  r27, L1
  Index        r29, r17, r25
  Const        r30, "ws_ship_date_sk"
  Index        r31, r16, r30
  Const        r32, "d_date_sk"
  Index        r33, r29, r32
  Equal        r34, r31, r33
  JumpIfFalse  r34, L2
  // join ca in customer_address on ws.ws_ship_addr_sk == ca.ca_address_sk
  IterPrep     r35, r3
  Len          r36, r35
  Const        r37, "ws_ship_addr_sk"
  Const        r38, "ca_address_sk"
  // where ca.ca_state == "CA" && w.web_company_name == "pri" &&
  Const        r39, "ca_state"
  Const        r40, "web_company_name"
  // exists(from wr in web_returns where wr.wr_order_number == ws.ws_order_number select wr) == false
  Const        r41, "wr_order_number"
  Const        r42, "ws_order_number"
  // join ca in customer_address on ws.ws_ship_addr_sk == ca.ca_address_sk
  Const        r43, 0
L11:
  LessInt      r45, r43, r36
  JumpIfFalse  r45, L2
  Index        r47, r35, r43
  Const        r48, "ws_ship_addr_sk"
  Index        r49, r16, r48
  Const        r50, "ca_address_sk"
  Index        r51, r47, r50
  Equal        r52, r49, r51
  JumpIfFalse  r52, L3
  // join w in web_site on ws.ws_web_site_sk == w.web_site_sk
  IterPrep     r53, r4
  Len          r54, r53
  Const        r55, "ws_web_site_sk"
  Const        r56, "web_site_sk"
  // where ca.ca_state == "CA" && w.web_company_name == "pri" &&
  Const        r57, "ca_state"
  Const        r58, "web_company_name"
  // exists(from wr in web_returns where wr.wr_order_number == ws.ws_order_number select wr) == false
  Const        r59, "wr_order_number"
  Const        r60, "ws_order_number"
  // join w in web_site on ws.ws_web_site_sk == w.web_site_sk
  Const        r61, 0
L10:
  LessInt      r63, r61, r54
  JumpIfFalse  r63, L3
  Index        r65, r53, r61
  Const        r66, "ws_web_site_sk"
  Index        r67, r16, r66
  Const        r68, "web_site_sk"
  Index        r69, r65, r68
  Equal        r70, r67, r69
  JumpIfFalse  r70, L4
  // where ca.ca_state == "CA" && w.web_company_name == "pri" &&
  Const        r71, "ca_state"
  Index        r72, r47, r71
  Const        r73, "CA"
  Equal        r74, r72, r73
  Const        r75, "web_company_name"
  Index        r76, r65, r75
  Const        r77, "pri"
  Equal        r78, r76, r77
  // exists(from wr in web_returns where wr.wr_order_number == ws.ws_order_number select wr) == false
  Const        r79, []
  Const        r80, "wr_order_number"
  Const        r81, "ws_order_number"
  IterPrep     r82, r1
  Len          r83, r82
  Const        r84, 0
L7:
  LessInt      r86, r84, r83
  JumpIfFalse  r86, L5
  Index        r88, r82, r84
  Const        r89, "wr_order_number"
  Index        r90, r88, r89
  Const        r91, "ws_order_number"
  Index        r92, r16, r91
  Equal        r93, r90, r92
  JumpIfFalse  r93, L6
  Append       r79, r79, r88
L6:
  Const        r95, 1
  AddInt       r84, r84, r95
  Jump         L7
L5:
  Exists       r96, r79
  Const        r97, false
  Equal        r98, r96, r97
  // where ca.ca_state == "CA" && w.web_company_name == "pri" &&
  Move         r99, r74
  JumpIfFalse  r99, L8
L8:
  Move         r100, r78
  JumpIfFalse  r100, L9
  Move         r100, r98
L9:
  JumpIfFalse  r100, L4
  // from ws in web_sales
  Append       r5, r5, r16
L4:
  // join w in web_site on ws.ws_web_site_sk == w.web_site_sk
  Const        r102, 1
  Add          r61, r61, r102
  Jump         L10
L3:
  // join ca in customer_address on ws.ws_ship_addr_sk == ca.ca_address_sk
  Const        r103, 1
  Add          r43, r43, r103
  Jump         L11
L2:
  // join d in date_dim on ws.ws_ship_date_sk == d.d_date_sk
  Const        r104, 1
  Add          r25, r25, r104
  Jump         L12
L1:
  // from ws in web_sales
  Const        r105, 1
  AddInt       r12, r12, r105
  Jump         L13
L0:
  // order_count: len(distinct(from x in filtered select x.ws_order_number)),
  Const        r106, "order_count"
  Const        r107, []
  Const        r108, "ws_order_number"
  IterPrep     r109, r5
  Len          r110, r109
  Const        r111, 0
L15:
  LessInt      r113, r111, r110
  JumpIfFalse  r113, L14
  Index        r115, r109, r111
  Const        r116, "ws_order_number"
  Index        r117, r115, r116
  Append       r107, r107, r117
  Const        r119, 1
  AddInt       r111, r111, r119
  Jump         L15
L14:
  Distinct     120,107,0,0
  Len          r121, r120
  // total_shipping_cost: sum(from x in filtered select x.ws_ext_ship_cost),
  Const        r122, "total_shipping_cost"
  Const        r123, []
  Const        r124, "ws_ext_ship_cost"
  IterPrep     r125, r5
  Len          r126, r125
  Const        r127, 0
L17:
  LessInt      r129, r127, r126
  JumpIfFalse  r129, L16
  Index        r115, r125, r127
  Const        r131, "ws_ext_ship_cost"
  Index        r132, r115, r131
  Append       r123, r123, r132
  Const        r134, 1
  AddInt       r127, r127, r134
  Jump         L17
L16:
  Sum          r135, r123
  // total_net_profit: sum(from x in filtered select x.ws_net_profit)
  Const        r136, "total_net_profit"
  Const        r137, []
  Const        r138, "ws_net_profit"
  IterPrep     r139, r5
  Len          r140, r139
  Const        r141, 0
L19:
  LessInt      r143, r141, r140
  JumpIfFalse  r143, L18
  Index        r115, r139, r141
  Const        r145, "ws_net_profit"
  Index        r146, r115, r145
  Append       r137, r137, r146
  Const        r148, 1
  AddInt       r141, r141, r148
  Jump         L19
L18:
  Sum          r149, r137
  // order_count: len(distinct(from x in filtered select x.ws_order_number)),
  Move         r150, r106
  Move         r151, r121
  // total_shipping_cost: sum(from x in filtered select x.ws_ext_ship_cost),
  Move         r152, r122
  Move         r153, r135
  // total_net_profit: sum(from x in filtered select x.ws_net_profit)
  Move         r154, r136
  Move         r155, r149
  // let result = {
  MakeMap      r156, 3, r150
  // json(result)
  JSON         r156
  // expect result == {order_count: 1, total_shipping_cost: 2.0, total_net_profit: 5.0}
  Const        r157, {"order_count": 1, "total_net_profit": 5, "total_shipping_cost": 2}
  Equal        r158, r156, r157
  Expect       r158
  Return       r0

  // fun distinct(xs: list<any>): list<any> {
func distinct (regs=14)
  // var out = []
  Const        r2, []
  // for x in xs {
  IterPrep     r3, r0
  Len          r4, r3
  Const        r5, 0
L2:
  Less         r6, r5, r4
  JumpIfFalse  r6, L0
  Index        r8, r3, r5
  // if !contains(out, x) {
  Not          r10, r9
  JumpIfFalse  r10, L1
  // out = append(out, x)
  Append       r2, r2, r8
L1:
  // for x in xs {
  Const        r12, 1
  Add          r5, r5, r12
  Jump         L2
L0:
  // return out
  Return       r2
