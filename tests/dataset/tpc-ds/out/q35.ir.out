func main (regs=188)
  // let customer = [
  Const        r0, [{"c_current_addr_sk": 1, "c_current_cdemo_sk": 1, "c_customer_sk": 1}, {"c_current_addr_sk": 2, "c_current_cdemo_sk": 2, "c_customer_sk": 2}]
  // let customer_address = [
  Const        r1, [{"ca_address_sk": 1, "ca_state": "CA"}, {"ca_address_sk": 2, "ca_state": "NY"}]
  // let customer_demographics = [
  Const        r2, [{"cd_demo_sk": 1, "cd_dep_college_count": 0, "cd_dep_count": 1, "cd_dep_employed_count": 1, "cd_gender": "M", "cd_marital_status": "S"}, {"cd_demo_sk": 2, "cd_dep_college_count": 1, "cd_dep_count": 2, "cd_dep_employed_count": 1, "cd_gender": "F", "cd_marital_status": "M"}]
  // let store_sales = [
  Const        r3, [{"ss_customer_sk": 1, "ss_sold_date_sk": 1}]
  // let date_dim = [
  Const        r4, [{"d_date_sk": 1, "d_qoy": 1, "d_year": 2000}]
  // from ss in store_sales
  Const        r5, []
  IterPrep     r6, r3
  Len          r7, r6
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  IterPrep     r8, r4
  Len          r9, r8
  Const        r10, "ss_sold_date_sk"
  Const        r11, "d_date_sk"
  // where d.d_year == 2000 && d.d_qoy < 4
  Const        r12, "d_year"
  Const        r13, "d_qoy"
  // select ss.ss_customer_sk
  Const        r14, "ss_customer_sk"
  // from ss in store_sales
  Const        r15, 0
L5:
  LessInt      r16, r15, r7
  JumpIfFalse  r16, L0
  Index        r18, r6, r15
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  Const        r19, 0
L4:
  LessInt      r20, r19, r9
  JumpIfFalse  r20, L1
  Index        r22, r8, r19
  Index        r23, r18, r10
  Index        r24, r22, r11
  Equal        r25, r23, r24
  JumpIfFalse  r25, L2
  // where d.d_year == 2000 && d.d_qoy < 4
  Index        r26, r22, r12
  Index        r27, r22, r13
  Const        r28, 4
  Less         r29, r27, r28
  Const        r30, 2000
  Equal        r31, r26, r30
  JumpIfFalse  r31, L3
  Move         r31, r29
L3:
  JumpIfFalse  r31, L2
  // select ss.ss_customer_sk
  Index        r32, r18, r14
  // from ss in store_sales
  Append       r5, r5, r32
L2:
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  Const        r34, 1
  AddInt       r19, r19, r34
  Jump         L4
L1:
  // from ss in store_sales
  AddInt       r15, r15, r34
  Jump         L5
L0:
  // from c in customer
  Const        r35, []
  // group by {state: ca.ca_state, gender: cd.cd_gender, marital: cd.cd_marital_status, dep: cd.cd_dep_count, emp: cd.cd_dep_employed_count, col: cd.cd_dep_college_count} into g
  Const        r36, "state"
  Const        r37, "ca_state"
  Const        r38, "gender"
  Const        r39, "cd_gender"
  Const        r40, "marital"
  Const        r41, "cd_marital_status"
  Const        r42, "dep"
  Const        r43, "cd_dep_count"
  Const        r44, "emp"
  Const        r45, "cd_dep_employed_count"
  Const        r46, "col"
  Const        r47, "cd_dep_college_count"
  // where c.c_customer_sk in purchased
  Const        r48, "c_customer_sk"
  // ca_state: g.key.state,
  Const        r49, "key"
  // cnt: count(g)
  Const        r50, "cnt"
  // from c in customer
  MakeMap      r51, 0, r0
  Const        r52, []
  IterPrep     r54, r0
  Len          r55, r54
  Const        r56, 0
L13:
  LessInt      r57, r56, r55
  JumpIfFalse  r57, L6
  Index        r59, r54, r56
  // join ca in customer_address on c.c_current_addr_sk == ca.ca_address_sk
  IterPrep     r60, r1
  Len          r61, r60
  Const        r62, 0
L12:
  LessInt      r63, r62, r61
  JumpIfFalse  r63, L7
  Index        r65, r60, r62
  Const        r66, "c_current_addr_sk"
  Index        r67, r59, r66
  Const        r68, "ca_address_sk"
  Index        r69, r65, r68
  Equal        r70, r67, r69
  JumpIfFalse  r70, L8
  // join cd in customer_demographics on c.c_current_cdemo_sk == cd.cd_demo_sk
  IterPrep     r71, r2
  Len          r72, r71
  Const        r73, 0
L11:
  LessInt      r74, r73, r72
  JumpIfFalse  r74, L8
  Index        r76, r71, r73
  Const        r77, "c_current_cdemo_sk"
  Index        r78, r59, r77
  Const        r79, "cd_demo_sk"
  Index        r80, r76, r79
  Equal        r81, r78, r80
  JumpIfFalse  r81, L9
  // where c.c_customer_sk in purchased
  Index        r82, r59, r48
  In           r83, r82, r5
  JumpIfFalse  r83, L9
  // from c in customer
  Const        r84, "c"
  Move         r85, r59
  Const        r86, "ca"
  Move         r87, r65
  Const        r88, "cd"
  Move         r89, r76
  MakeMap      r90, 3, r84
  // group by {state: ca.ca_state, gender: cd.cd_gender, marital: cd.cd_marital_status, dep: cd.cd_dep_count, emp: cd.cd_dep_employed_count, col: cd.cd_dep_college_count} into g
  Const        r91, "state"
  Index        r92, r65, r37
  Const        r93, "gender"
  Index        r94, r76, r39
  Const        r95, "marital"
  Index        r96, r76, r41
  Const        r97, "dep"
  Index        r98, r76, r43
  Const        r99, "emp"
  Index        r100, r76, r45
  Const        r101, "col"
  Index        r102, r76, r47
  Move         r103, r91
  Move         r104, r92
  Move         r105, r93
  Move         r106, r94
  Move         r107, r95
  Move         r108, r96
  Move         r109, r97
  Move         r110, r98
  Move         r111, r99
  Move         r112, r100
  Move         r113, r101
  Move         r114, r102
  MakeMap      r115, 6, r103
  Str          r116, r115
  In           r117, r116, r51
  JumpIfTrue   r117, L10
  // from c in customer
  Const        r118, []
  Const        r119, "__group__"
  Const        r120, true
  Const        r121, "key"
  // group by {state: ca.ca_state, gender: cd.cd_gender, marital: cd.cd_marital_status, dep: cd.cd_dep_count, emp: cd.cd_dep_employed_count, col: cd.cd_dep_college_count} into g
  Move         r122, r115
  // from c in customer
  Const        r123, "items"
  Move         r124, r118
  Const        r125, "count"
  Const        r126, 0
  Move         r127, r119
  Move         r128, r120
  Move         r129, r121
  Move         r130, r122
  Move         r131, r123
  Move         r132, r124
  Move         r133, r125
  Move         r134, r126
  MakeMap      r135, 4, r127
  SetIndex     r51, r116, r135
  Append       r52, r52, r135
L10:
  Const        r137, "items"
  Index        r138, r51, r116
  Index        r139, r138, r137
  Append       r140, r139, r90
  SetIndex     r138, r137, r140
  Const        r141, "count"
  Index        r142, r138, r141
  AddInt       r143, r142, r34
  SetIndex     r138, r141, r143
L9:
  // join cd in customer_demographics on c.c_current_cdemo_sk == cd.cd_demo_sk
  AddInt       r73, r73, r34
  Jump         L11
L8:
  // join ca in customer_address on c.c_current_addr_sk == ca.ca_address_sk
  AddInt       r62, r62, r34
  Jump         L12
L7:
  // from c in customer
  AddInt       r56, r56, r34
  Jump         L13
L6:
  Const        r144, 0
  Len          r146, r52
L15:
  LessInt      r147, r144, r146
  JumpIfFalse  r147, L14
  Index        r149, r52, r144
  // ca_state: g.key.state,
  Const        r150, "ca_state"
  Index        r151, r149, r49
  Index        r152, r151, r36
  // cd_gender: g.key.gender,
  Const        r153, "cd_gender"
  Index        r154, r149, r49
  Index        r155, r154, r38
  // cd_marital_status: g.key.marital,
  Const        r156, "cd_marital_status"
  Index        r157, r149, r49
  Index        r158, r157, r40
  // cd_dep_count: g.key.dep,
  Const        r159, "cd_dep_count"
  Index        r160, r149, r49
  Index        r161, r160, r42
  // cd_dep_employed_count: g.key.emp,
  Const        r162, "cd_dep_employed_count"
  Index        r163, r149, r49
  Index        r164, r163, r44
  // cd_dep_college_count: g.key.col,
  Const        r165, "cd_dep_college_count"
  Index        r166, r149, r49
  Index        r167, r166, r46
  // cnt: count(g)
  Const        r168, "cnt"
  Index        r169, r149, r141
  // ca_state: g.key.state,
  Move         r170, r150
  Move         r171, r152
  // cd_gender: g.key.gender,
  Move         r172, r153
  Move         r173, r155
  // cd_marital_status: g.key.marital,
  Move         r174, r156
  Move         r175, r158
  // cd_dep_count: g.key.dep,
  Move         r176, r159
  Move         r177, r161
  // cd_dep_employed_count: g.key.emp,
  Move         r178, r162
  Move         r179, r164
  // cd_dep_college_count: g.key.col,
  Move         r180, r165
  Move         r181, r167
  // cnt: count(g)
  Move         r182, r168
  Move         r183, r169
  // select {
  MakeMap      r184, 7, r170
  // from c in customer
  Append       r35, r35, r184
  AddInt       r144, r144, r34
  Jump         L15
L14:
  // json(groups)
  JSON         r35
  // expect groups == [{ca_state: "CA", cd_gender: "M", cd_marital_status: "S", cd_dep_count: 1, cd_dep_employed_count: 1, cd_dep_college_count: 0, cnt: 1}]
  Const        r186, [{"ca_state": "CA", "cd_dep_college_count": 0, "cd_dep_count": 1, "cd_dep_employed_count": 1, "cd_gender": "M", "cd_marital_status": "S", "cnt": 1}]
  Equal        r187, r35, r186
  Expect       r187
  Return       r0
