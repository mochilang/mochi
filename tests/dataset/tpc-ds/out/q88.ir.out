func main (regs=84)
L0:
  // let time_dim = [
  Const        r0, [{"hour": 8, "minute": 30, "time_sk": 1}, {"hour": 9, "minute": 0, "time_sk": 2}, {"hour": 11, "minute": 15, "time_sk": 3}]
  // let store_sales = [
  Const        r1, [{"sold_time_sk": 1}, {"sold_time_sk": 2}, {"sold_time_sk": 3}]
  // from s in store_sales
  Const        r2, []
  IterPrep     r3, r1
  Len          r4, r3
  // join t in time_dim on t.time_sk == s.sold_time_sk
  IterPrep     r5, r0
  Len          r6, r5
  // from s in store_sales
  Const        r7, 0
  EqualInt     r8, r4, r7
  JumpIfTrue   r8, L0
  EqualInt     r9, r6, r7
  JumpIfTrue   r9, L0
  LessEq       r10, r6, r4
  JumpIfFalse  r10, L1
  // join t in time_dim on t.time_sk == s.sold_time_sk
  MakeMap      r11, 0, r0
  Const        r12, 0
L5:
  LessInt      r13, r12, r6
  JumpIfFalse  r13, L2
  Index        r14, r5, r12
  Move         r15, r14
  // where t.hour <= 9
  Const        r16, "hour"
  Index        r17, r15, r16
  Const        r18, 9
  LessEq       r19, r17, r18
  JumpIfFalse  r19, L3
  // join t in time_dim on t.time_sk == s.sold_time_sk
  Const        r20, "time_sk"
  Index        r21, r15, r20
  Index        r22, r11, r21
  Const        r23, nil
  NotEqual     r24, r22, r23
  JumpIfTrue   r24, L4
  MakeList     r25, 0, r0
  SetIndex     r11, r21, r25
L4:
  Index        r22, r11, r21
  Append       r26, r22, r14
  SetIndex     r11, r21, r26
L3:
  Const        r27, 1
  AddInt       r12, r12, r27
  Jump         L5
L2:
  // from s in store_sales
  Const        r28, 0
L9:
  LessInt      r29, r28, r4
  JumpIfFalse  r29, L0
  Index        r31, r3, r28
  // join t in time_dim on t.time_sk == s.sold_time_sk
  Const        r32, "sold_time_sk"
  Index        r33, r31, r32
  // from s in store_sales
  Index        r34, r11, r33
  Const        r35, nil
  NotEqual     r36, r34, r35
  JumpIfFalse  r36, L6
  Len          r37, r34
  Const        r38, 0
L8:
  LessInt      r39, r38, r37
  JumpIfFalse  r39, L6
  Index        r15, r34, r38
  // where t.hour <= 9
  Const        r41, "hour"
  Index        r42, r15, r41
  Const        r43, 9
  LessEq       r44, r42, r43
  JumpIfFalse  r44, L7
  // from s in store_sales
  Append       r2, r2, r31
L7:
  Const        r46, 1
  AddInt       r38, r38, r46
  Jump         L8
L6:
  Const        r47, 1
  AddInt       r28, r28, r47
  Jump         L9
L1:
  MakeMap      r48, 0, r0
  Const        r49, 0
L12:
  LessInt      r50, r49, r4
  JumpIfFalse  r50, L10
  Index        r51, r3, r49
  Move         r31, r51
  // join t in time_dim on t.time_sk == s.sold_time_sk
  Const        r52, "sold_time_sk"
  Index        r53, r31, r52
  // from s in store_sales
  Index        r54, r48, r53
  Const        r55, nil
  NotEqual     r56, r54, r55
  JumpIfTrue   r56, L11
  MakeList     r57, 0, r0
  SetIndex     r48, r53, r57
L11:
  Index        r54, r48, r53
  Append       r58, r54, r51
  SetIndex     r48, r53, r58
  Const        r59, 1
  AddInt       r49, r49, r59
  Jump         L12
L10:
  // join t in time_dim on t.time_sk == s.sold_time_sk
  Const        r60, 0
L17:
  LessInt      r61, r60, r6
  JumpIfFalse  r61, L13
  Index        r15, r5, r60
  Const        r63, "time_sk"
  Index        r64, r15, r63
  Index        r65, r48, r64
  Const        r66, nil
  NotEqual     r67, r65, r66
  JumpIfFalse  r67, L14
  Len          r68, r65
  Const        r69, 0
L16:
  LessInt      r70, r69, r68
  JumpIfFalse  r70, L14
  Index        r31, r65, r69
  // where t.hour <= 9
  Const        r72, "hour"
  Index        r73, r15, r72
  Const        r74, 9
  LessEq       r75, r73, r74
  JumpIfFalse  r75, L15
  // from s in store_sales
  Append       r2, r2, r31
L15:
  // join t in time_dim on t.time_sk == s.sold_time_sk
  Const        r77, 1
  AddInt       r69, r69, r77
  Jump         L16
L14:
  Const        r78, 1
  AddInt       r60, r60, r78
  Jump         L17
L13:
  // let morning_sales = count(morning_list)
  Count        r79, r2
  // let result = morning_sales * 44
  Const        r80, 44
  MulInt       r81, r79, r80
  // json(result)
  JSON         r81
  // expect result == 88
  Const        r82, 88
  EqualInt     r83, r81, r82
  Expect       r83
  Return       r0
