func main (regs=59)
  // let item = [
  Const        r0, [{"i_category": "Books", "i_item_sk": 1, "i_manufact_id": 1}, {"i_category": "Books", "i_item_sk": 2, "i_manufact_id": 2}]
  // let date_dim = [
  Const        r1, [{"d_date_sk": 1, "d_moy": 1, "d_year": 2000}]
  // let customer_address = [
  Const        r2, [{"ca_address_sk": 1, "ca_gmt_offset": -5}, {"ca_address_sk": 2, "ca_gmt_offset": -5}]
L7:
  // let store_sales = [
  Const        r3, [{"ss_addr_sk": 1, "ss_ext_sales_price": 100.0, "ss_item_sk": 1, "ss_sold_date_sk": 1}, {"ss_addr_sk": 2, "ss_ext_sales_price": 50.0, "ss_item_sk": 2, "ss_sold_date_sk": 1}]
L2:
  // let catalog_sales = [
  Const        r4, [{"cs_bill_addr_sk": 1, "cs_ext_sales_price": 20.0, "cs_item_sk": 1, "cs_sold_date_sk": 1}]
  // let web_sales = [
  Const        r5, [{"ws_bill_addr_sk": 1, "ws_ext_sales_price": 30.0, "ws_item_sk": 1, "ws_sold_date_sk": 1}]
  // let month = 1
  Const        r6, 1
  // let year = 2000
  Const        r7, 2000
  // from ss in store_sales
  Const        r8, []
  // where i.i_category == "Books" && d.d_year == year && d.d_moy == month && ca.ca_gmt_offset == (-5)
  Const        r9, "i_category"
L19:
  Const        r10, "d_year"
  Const        r11, "d_moy"
  Const        r12, "ca_gmt_offset"
  // select {manu: i.i_manufact_id, price: ss.ss_ext_sales_price},
  Const        r13, "manu"
  Const        r14, "i_manufact_id"
  Const        r15, "price"
L14:
  Const        r16, "ss_ext_sales_price"
L11:
  // from ss in store_sales
  IterPrep     r17, r3
  Len          r3, r17
  Const        r18, 0
L9:
  Move         r19, r18
L8:
  LessInt      r20, r19, r3
L3:
  JumpIfFalse  r20, L0
  Index        r3, r17, r19
  Move         r17, r3
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  IterPrep     r3, r1
  Len          r21, r3
  Const        r22, "ss_sold_date_sk"
  Const        r23, "d_date_sk"
L18:
  Move         r24, r18
L6:
  LessInt      r25, r24, r21
  JumpIfFalse  r25, L1
L4:
  Index        r21, r3, r24
  Move         r25, r21
L22:
  Index        r3, r17, r22
L21:
  Index        r22, r25, r23
L5:
  Equal        r26, r3, r22
  JumpIfFalse  r26, L2
  // join ca in customer_address on ss.ss_addr_sk == ca.ca_address_sk
  IterPrep     r3, r2
L1:
  Len          r22, r3
L0:
  Const        r26, "ss_addr_sk"
  Const        r27, "ca_address_sk"
  Move         r28, r18
L13:
  LessInt      r29, r28, r22
L12:
  JumpIfFalse  r29, L2
  Index        r22, r3, r28
L16:
  Move         r29, r22
L10:
  Index        r3, r17, r26
  Index        r22, r29, r27
  Equal        r26, r3, r22
  JumpIfFalse  r26, L3
L20:
  // join i in item on ss.ss_item_sk == i.i_item_sk
  IterPrep     r22, r0
  Len          r26, r22
  Const        r30, "ss_item_sk"
  Const        r31, "i_item_sk"
  Move         r32, r18
L17:
  LessInt      r33, r32, r26
  JumpIfFalse  r33, L3
L15:
  Index        r26, r22, r32
  Move         r33, r26
  Index        r22, r17, r30
  Index        r26, r33, r31
  Equal        r30, r22, r26
  JumpIfFalse  r30, L4
  // where i.i_category == "Books" && d.d_year == year && d.d_moy == month && ca.ca_gmt_offset == (-5)
  Index        r22, r33, r9
  Const        r26, "Books"
  Equal        r34, r22, r26
  Index        r22, r25, r10
  Equal        r35, r22, r7
  Index        r22, r25, r11
  Equal        r36, r22, r6
  Index        r22, r29, r12
  Const        r37, -5
  Equal        r38, r22, r37
  Move         r22, r34
  JumpIfFalse  r22, L5
  Move         r22, r35
  JumpIfFalse  r22, L5
  Move         r22, r36
  JumpIfFalse  r22, L5
  Move         r22, r38
  JumpIfFalse  r22, L4
  // select {manu: i.i_manufact_id, price: ss.ss_ext_sales_price},
  Const        r34, "manu"
  Index        r35, r33, r14
  Const        r36, "price"
  Index        r38, r17, r16
  Move         r39, r34
  Move         r40, r35
  Move         r41, r36
  Move         r42, r38
  MakeMap      r22, 2, r39
  // from ss in store_sales
  Append       r16, r8, r22
  Move         r8, r16
  // join i in item on ss.ss_item_sk == i.i_item_sk
  Add          r32, r32, r6
  Jump         L6
  // join ca in customer_address on ss.ss_addr_sk == ca.ca_address_sk
  Add          r28, r28, r6
  Jump         L7
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  Add          r24, r24, r6
  Jump         L8
  // from ss in store_sales
  AddInt       r19, r19, r6
  Jump         L9
  // from cs in catalog_sales
  Const        r17, []
  // select {manu: i.i_manufact_id, price: cs.cs_ext_sales_price},
  Const        r34, "cs_ext_sales_price"
  // from cs in catalog_sales
  IterPrep     r35, r4
  Len          r36, r35
  Move         r38, r18
  LessInt      r39, r38, r36
  JumpIfFalse  r39, L10
  Index        r40, r35, r38
  Move         r41, r40
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  IterPrep     r42, r1
  Len          r19, r42
  Const        r20, "cs_sold_date_sk"
  Move         r24, r18
  LessInt      r21, r24, r19
  JumpIfFalse  r21, L11
  Index        r28, r42, r24
  Move         r25, r28
  Index        r3, r41, r20
  Index        r32, r25, r23
  Equal        r30, r3, r32
  JumpIfFalse  r30, L12
  // join ca in customer_address on cs.cs_bill_addr_sk == ca.ca_address_sk
  IterPrep     r22, r2
  Len          r16, r22
  Const        r4, "cs_bill_addr_sk"
  Move         r36, r18
  LessInt      r39, r36, r16
  JumpIfFalse  r39, L12
  Index        r35, r22, r36
  Move         r29, r35
  Index        r40, r41, r4
  Index        r19, r29, r27
  Equal        r21, r40, r19
  JumpIfFalse  r21, L2
  // join i in item on cs.cs_item_sk == i.i_item_sk
  IterPrep     r42, r0
  Len          r28, r42
  Const        r20, "cs_item_sk"
  Move         r3, r18
  LessInt      r32, r3, r28
  JumpIfFalse  r32, L2
  Index        r30, r42, r3
  Move         r33, r30
  Index        r16, r41, r20
  Index        r39, r33, r31
  Equal        r22, r16, r39
  JumpIfFalse  r22, L13
  // where i.i_category == "Books" && d.d_year == year && d.d_moy == month && ca.ca_gmt_offset == (-5)
  Index        r35, r33, r9
  Equal        r4, r35, r26
  Index        r40, r25, r10
  Equal        r19, r40, r7
  Index        r21, r25, r11
  Equal        r28, r21, r6
  Index        r32, r29, r12
  Equal        r42, r32, r37
  Move         r30, r4
  JumpIfFalse  r30, L14
  Move         r30, r19
  JumpIfFalse  r30, L14
  Move         r30, r28
  JumpIfFalse  r30, L14
  Move         r30, r42
  JumpIfFalse  r30, L13
  // select {manu: i.i_manufact_id, price: cs.cs_ext_sales_price},
  Const        r16, "manu"
  Index        r39, r33, r14
  Const        r22, "price"
  Index        r35, r41, r34
  Move         r43, r16
  Move         r44, r39
  Move         r45, r22
  Move         r46, r35
  MakeMap      r40, 2, r43
  // from cs in catalog_sales
  Append       r21, r17, r40
  Move         r17, r21
  // join i in item on cs.cs_item_sk == i.i_item_sk
  Add          r3, r3, r6
  Jump         L4
  // join ca in customer_address on cs.cs_bill_addr_sk == ca.ca_address_sk
  Add          r36, r36, r6
  Jump         L13
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  Add          r24, r24, r6
  Jump         L2
  // from cs in catalog_sales
  AddInt       r38, r38, r6
  Jump         L9
  // let union_sales = concat(
  UnionAll     r19, r8, r17
  // from ws in web_sales
  Const        r28, []
  // select {manu: i.i_manufact_id, price: ws.ws_ext_sales_price}
  Const        r42, "ws_ext_sales_price"
  // from ws in web_sales
  IterPrep     r30, r5
  Len          r34, r30
  Move         r41, r18
  LessInt      r32, r41, r34
  JumpIfFalse  r32, L15
  Index        r16, r30, r41
  Move         r39, r16
  // join d in date_dim on ws.ws_sold_date_sk == d.d_date_sk
  IterPrep     r22, r1
  Len          r35, r22
  Const        r3, "ws_sold_date_sk"
  Move         r40, r18
  LessInt      r21, r40, r35
  JumpIfFalse  r21, L16
  Index        r38, r22, r40
  Move         r25, r38
  Index        r24, r39, r3
  Index        r36, r25, r23
  Equal        r20, r24, r36
  JumpIfFalse  r20, L17
  // join ca in customer_address on ws.ws_bill_addr_sk == ca.ca_address_sk
  IterPrep     r4, r2
  Len          r43, r4
  Const        r44, "ws_bill_addr_sk"
  Move         r45, r18
  LessInt      r46, r45, r43
  JumpIfFalse  r46, L17
  Index        r8, r4, r45
  Move         r29, r8
  Index        r17, r39, r44
  Index        r5, r29, r27
  Equal        r32, r17, r5
  JumpIfFalse  r32, L18
  // join i in item on ws.ws_item_sk == i.i_item_sk
  IterPrep     r34, r0
  Len          r30, r34
  Const        r16, "ws_item_sk"
  Move         r1, r18
  LessInt      r35, r1, r30
  JumpIfFalse  r35, L18
  Index        r21, r34, r1
  Move         r33, r21
  Index        r22, r39, r16
  Index        r38, r33, r31
  Equal        r3, r22, r38
  JumpIfFalse  r3, L19
  // where i.i_category == "Books" && d.d_year == year && d.d_moy == month && ca.ca_gmt_offset == (-5)
  Index        r23, r33, r9
  Equal        r24, r23, r26
  Index        r36, r25, r10
  Equal        r20, r36, r7
  Index        r2, r25, r11
  Equal        r43, r2, r6
  Index        r46, r29, r12
  Equal        r4, r46, r37
  Move         r8, r24
  JumpIfFalse  r8, L20
  Move         r8, r20
  JumpIfFalse  r8, L20
  Move         r8, r43
  JumpIfFalse  r8, L20
  Move         r8, r4
  JumpIfFalse  r8, L19
  // select {manu: i.i_manufact_id, price: ws.ws_ext_sales_price}
  Const        r44, "manu"
  Index        r27, r33, r14
  Const        r17, "price"
  Index        r5, r39, r42
  Move         r47, r44
  Move         r48, r27
  Move         r49, r17
  Move         r50, r5
  MakeMap      r32, 2, r47
  // from ws in web_sales
  Append       r30, r28, r32
  Move         r28, r30
  // join i in item on ws.ws_item_sk == i.i_item_sk
  Add          r1, r1, r6
  Jump         L21
  // join ca in customer_address on ws.ws_bill_addr_sk == ca.ca_address_sk
  Add          r45, r45, r6
  Jump         L22
  // join d in date_dim on ws.ws_sold_date_sk == d.d_date_sk
  Add          r40, r40, r6
  Jump         L8
  // from ws in web_sales
  AddInt       r41, r41, r6
  Jump         L14
  // let union_sales = concat(
  UnionAll     r16, r19, r28
  // from s in union_sales
  Const        r31, []
  // select {i_manufact_id: g.key, total_sales: sum(from x in g select x.price)}
  Const        r22, "key"
  Const        r38, "total_sales"
  // from s in union_sales
  IterPrep     r3, r16
  Len          r9, r3
  Const        r26, 0
  MakeMap      r23, 0, r0
  Const        r10, []
  Move         r21, r10
L25:
  LessInt      r7, r26, r9
  JumpIfFalse  r7, L23
  Index        r36, r3, r26
  Move         r11, r36
  // group by s.manu into g
  Index        r25, r11, r13
  Str          r2, r25
  In           r12, r2, r23
  JumpIfTrue   r12, L24
  // from s in union_sales
  Const        r29, "__group__"
  Const        r37, true
  // group by s.manu into g
  Move         r46, r25
  // from s in union_sales
  Const        r24, "items"
  Move         r34, r10
  Const        r20, "count"
  Move         r51, r29
  Move         r52, r37
  Move         r53, r22
  Move         r54, r46
  Move         r55, r24
  Move         r56, r34
  Move         r57, r20
  Move         r58, r18
  MakeMap      r43, 4, r51
  SetIndex     r23, r2, r43
  Append       r4, r21, r43
  Move         r21, r4
L24:
  Index        r35, r23, r2
  Index        r8, r35, r24
  Append       r14, r8, r36
  SetIndex     r35, r24, r14
  Index        r33, r35, r20
  AddInt       r42, r33, r6
  SetIndex     r35, r20, r42
  AddInt       r26, r26, r6
  Jump         L25
L23:
  Move         r39, r18
  Len          r44, r21
L31:
  LessInt      r27, r39, r44
  JumpIfFalse  r27, L26
  Index        r17, r21, r39
  Move         r5, r17
  // select {i_manufact_id: g.key, total_sales: sum(from x in g select x.price)}
  Const        r47, "i_manufact_id"
  Index        r48, r5, r22
  Const        r49, "total_sales"
  Const        r50, []
  IterPrep     r1, r5
  Len          r32, r1
  Move         r30, r18
L28:
  LessInt      r45, r30, r32
  JumpIfFalse  r45, L27
  Index        r40, r1, r30
  Move         r41, r40
  Index        r19, r41, r15
  Append       r28, r50, r19
  Move         r50, r28
  AddInt       r30, r30, r6
  Jump         L28
L27:
  Sum          r38, r50
  Move         r51, r47
  Move         r52, r48
  Move         r53, r49
  Move         r54, r38
  MakeMap      r16, 2, r51
  // sort by -sum(from x in g select x.price)
  Const        r9, []
  IterPrep     r7, r5
  Len          r3, r7
  Move         r13, r18
L30:
  LessInt      r11, r13, r3
  JumpIfFalse  r11, L29
  Index        r12, r7, r13
  Move         r41, r12
  Index        r25, r41, r15
  Append       r10, r9, r25
  Move         r9, r10
  AddInt       r13, r13, r6
  Jump         L30
L29:
  Sum          r34, r9
  Neg          r29, r34
  Move         r55, r29
  // from s in union_sales
  Move         r56, r16
  MakeList     r37, 2, r55
  Append       r46, r31, r37
  Move         r31, r46
  AddInt       r39, r39, r6
  Jump         L31
L26:
  // sort by -sum(from x in g select x.price)
  Sort         r57, r31
  // from s in union_sales
  Move         r31, r57
  // json(result)
  JSON         r31
  // expect result == [
  Const        r58, [{"i_manufact_id": 1, "total_sales": 150.0}, {"i_manufact_id": 2, "total_sales": 50.0}]
  Equal        r23, r31, r58
  Expect       r23
  Return       r0
