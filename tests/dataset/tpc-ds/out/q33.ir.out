func main (regs=271)
  // let item = [
  Const        r0, [{"i_category": "Books", "i_item_sk": 1, "i_manufact_id": 1}, {"i_category": "Books", "i_item_sk": 2, "i_manufact_id": 2}]
  // let date_dim = [
  Const        r1, [{"d_date_sk": 1, "d_moy": 1, "d_year": 2000}]
  // let customer_address = [
  Const        r2, [{"ca_address_sk": 1, "ca_gmt_offset": -5}, {"ca_address_sk": 2, "ca_gmt_offset": -5}]
  // let store_sales = [
  Const        r3, [{"ss_addr_sk": 1, "ss_ext_sales_price": 100, "ss_item_sk": 1, "ss_sold_date_sk": 1}, {"ss_addr_sk": 2, "ss_ext_sales_price": 50, "ss_item_sk": 2, "ss_sold_date_sk": 1}]
  // let catalog_sales = [
  Const        r4, [{"cs_bill_addr_sk": 1, "cs_ext_sales_price": 20, "cs_item_sk": 1, "cs_sold_date_sk": 1}]
  // let web_sales = [
  Const        r5, [{"ws_bill_addr_sk": 1, "ws_ext_sales_price": 30, "ws_item_sk": 1, "ws_sold_date_sk": 1}]
  // let month = 1
  Const        r6, 1
  // let year = 2000
  Const        r7, 2000
  // from ss in store_sales
  Const        r8, []
  // where i.i_category == "Books" && d.d_year == year && d.d_moy == month && ca.ca_gmt_offset == (-5)
  Const        r9, "i_category"
  Const        r10, "d_year"
  Const        r11, "d_moy"
  Const        r12, "ca_gmt_offset"
  // select {manu: i.i_manufact_id, price: ss.ss_ext_sales_price},
  Const        r13, "manu"
  Const        r14, "i_manufact_id"
  Const        r15, "price"
  Const        r16, "ss_ext_sales_price"
  // from ss in store_sales
  IterPrep     r17, r3
  Len          r18, r17
  Const        r20, 0
  Move         r19, r20
L11:
  LessInt      r21, r19, r18
  JumpIfFalse  r21, L0
  Index        r22, r17, r19
  Move         r23, r22
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  IterPrep     r24, r1
  Len          r25, r24
  Const        r26, "ss_sold_date_sk"
  Const        r27, "d_date_sk"
  Move         r28, r20
L10:
  LessInt      r29, r28, r25
  JumpIfFalse  r29, L1
  Index        r30, r24, r28
  Move         r31, r30
  Index        r32, r23, r26
  Index        r33, r31, r27
  Equal        r34, r32, r33
  JumpIfFalse  r34, L2
  // join ca in customer_address on ss.ss_addr_sk == ca.ca_address_sk
  IterPrep     r35, r2
  Len          r36, r35
  Const        r37, "ss_addr_sk"
  Const        r38, "ca_address_sk"
  Move         r39, r20
L9:
  LessInt      r40, r39, r36
  JumpIfFalse  r40, L2
  Index        r41, r35, r39
  Move         r42, r41
  Index        r43, r23, r37
  Index        r44, r42, r38
  Equal        r45, r43, r44
  JumpIfFalse  r45, L3
  // join i in item on ss.ss_item_sk == i.i_item_sk
  IterPrep     r46, r0
  Len          r47, r46
  Const        r48, "ss_item_sk"
  Const        r49, "i_item_sk"
  Move         r50, r20
L8:
  LessInt      r51, r50, r47
  JumpIfFalse  r51, L3
  Index        r52, r46, r50
  Move         r53, r52
  Index        r54, r23, r48
  Index        r55, r53, r49
  Equal        r56, r54, r55
  JumpIfFalse  r56, L4
  // where i.i_category == "Books" && d.d_year == year && d.d_moy == month && ca.ca_gmt_offset == (-5)
  Index        r57, r53, r9
  Const        r58, "Books"
  Equal        r59, r57, r58
  Index        r60, r31, r10
  Equal        r61, r60, r7
  Index        r62, r31, r11
  Equal        r63, r62, r6
  Index        r64, r42, r12
  Const        r65, -5
  Equal        r66, r64, r65
  Move         r67, r59
  JumpIfFalse  r67, L5
  Move         r67, r61
L5:
  Move         r68, r67
  JumpIfFalse  r68, L6
  Move         r68, r63
L6:
  Move         r69, r68
  JumpIfFalse  r69, L7
  Move         r69, r66
L7:
  JumpIfFalse  r69, L4
  // select {manu: i.i_manufact_id, price: ss.ss_ext_sales_price},
  Const        r70, "manu"
  Index        r71, r53, r14
  Const        r72, "price"
  Index        r73, r23, r16
  Move         r74, r70
  Move         r75, r71
  Move         r76, r72
  Move         r77, r73
  MakeMap      r78, 2, r74
  // from ss in store_sales
  Append       r79, r8, r78
  Move         r8, r79
L4:
  // join i in item on ss.ss_item_sk == i.i_item_sk
  Add          r50, r50, r6
  Jump         L8
L3:
  // join ca in customer_address on ss.ss_addr_sk == ca.ca_address_sk
  Add          r39, r39, r6
  Jump         L9
L2:
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  Add          r28, r28, r6
  Jump         L10
L1:
  // from ss in store_sales
  AddInt       r19, r19, r6
  Jump         L11
L0:
  // from cs in catalog_sales
  Const        r80, []
  // select {manu: i.i_manufact_id, price: cs.cs_ext_sales_price},
  Const        r81, "cs_ext_sales_price"
  // from cs in catalog_sales
  IterPrep     r82, r4
  Len          r83, r82
  Move         r84, r20
L23:
  LessInt      r85, r84, r83
  JumpIfFalse  r85, L12
  Index        r86, r82, r84
  Move         r87, r86
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  IterPrep     r88, r1
  Len          r89, r88
  Const        r90, "cs_sold_date_sk"
  Move         r91, r20
L22:
  LessInt      r92, r91, r89
  JumpIfFalse  r92, L13
  Index        r93, r88, r91
  Move         r31, r93
  Index        r94, r87, r90
  Index        r95, r31, r27
  Equal        r96, r94, r95
  JumpIfFalse  r96, L14
  // join ca in customer_address on cs.cs_bill_addr_sk == ca.ca_address_sk
  IterPrep     r97, r2
  Len          r98, r97
  Const        r99, "cs_bill_addr_sk"
  Move         r100, r20
L21:
  LessInt      r101, r100, r98
  JumpIfFalse  r101, L14
  Index        r102, r97, r100
  Move         r42, r102
  Index        r103, r87, r99
  Index        r104, r42, r38
  Equal        r105, r103, r104
  JumpIfFalse  r105, L15
  // join i in item on cs.cs_item_sk == i.i_item_sk
  IterPrep     r106, r0
  Len          r107, r106
  Const        r108, "cs_item_sk"
  Move         r109, r20
L20:
  LessInt      r110, r109, r107
  JumpIfFalse  r110, L15
  Index        r111, r106, r109
  Move         r53, r111
  Index        r112, r87, r108
  Index        r113, r53, r49
  Equal        r114, r112, r113
  JumpIfFalse  r114, L16
  // where i.i_category == "Books" && d.d_year == year && d.d_moy == month && ca.ca_gmt_offset == (-5)
  Index        r115, r53, r9
  Equal        r116, r115, r58
  Index        r117, r31, r10
  Equal        r118, r117, r7
  Index        r119, r31, r11
  Equal        r120, r119, r6
  Index        r121, r42, r12
  Equal        r122, r121, r65
  Move         r123, r116
  JumpIfFalse  r123, L17
  Move         r123, r118
L17:
  Move         r124, r123
  JumpIfFalse  r124, L18
  Move         r124, r120
L18:
  Move         r125, r124
  JumpIfFalse  r125, L19
  Move         r125, r122
L19:
  JumpIfFalse  r125, L16
  // select {manu: i.i_manufact_id, price: cs.cs_ext_sales_price},
  Const        r126, "manu"
  Index        r127, r53, r14
  Const        r128, "price"
  Index        r129, r87, r81
  Move         r130, r126
  Move         r131, r127
  Move         r132, r128
  Move         r133, r129
  MakeMap      r134, 2, r130
  // from cs in catalog_sales
  Append       r135, r80, r134
  Move         r80, r135
L16:
  // join i in item on cs.cs_item_sk == i.i_item_sk
  Add          r109, r109, r6
  Jump         L20
L15:
  // join ca in customer_address on cs.cs_bill_addr_sk == ca.ca_address_sk
  Add          r100, r100, r6
  Jump         L21
L14:
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  Add          r91, r91, r6
  Jump         L22
L13:
  // from cs in catalog_sales
  AddInt       r84, r84, r6
  Jump         L23
L12:
  // let union_sales = concat(
  UnionAll     r136, r8, r80
  // from ws in web_sales
  Const        r137, []
  // select {manu: i.i_manufact_id, price: ws.ws_ext_sales_price}
  Const        r138, "ws_ext_sales_price"
  // from ws in web_sales
  IterPrep     r139, r5
  Len          r140, r139
  Move         r141, r20
L35:
  LessInt      r142, r141, r140
  JumpIfFalse  r142, L24
  Index        r143, r139, r141
  Move         r144, r143
  // join d in date_dim on ws.ws_sold_date_sk == d.d_date_sk
  IterPrep     r145, r1
  Len          r146, r145
  Const        r147, "ws_sold_date_sk"
  Move         r148, r20
L34:
  LessInt      r149, r148, r146
  JumpIfFalse  r149, L25
  Index        r150, r145, r148
  Move         r31, r150
  Index        r151, r144, r147
  Index        r152, r31, r27
  Equal        r153, r151, r152
  JumpIfFalse  r153, L26
  // join ca in customer_address on ws.ws_bill_addr_sk == ca.ca_address_sk
  IterPrep     r154, r2
  Len          r155, r154
  Const        r156, "ws_bill_addr_sk"
  Move         r157, r20
L33:
  LessInt      r158, r157, r155
  JumpIfFalse  r158, L26
  Index        r159, r154, r157
  Move         r42, r159
  Index        r160, r144, r156
  Index        r161, r42, r38
  Equal        r162, r160, r161
  JumpIfFalse  r162, L27
  // join i in item on ws.ws_item_sk == i.i_item_sk
  IterPrep     r163, r0
  Len          r164, r163
  Const        r165, "ws_item_sk"
  Move         r166, r20
L32:
  LessInt      r167, r166, r164
  JumpIfFalse  r167, L27
  Index        r168, r163, r166
  Move         r53, r168
  Index        r169, r144, r165
  Index        r170, r53, r49
  Equal        r171, r169, r170
  JumpIfFalse  r171, L28
  // where i.i_category == "Books" && d.d_year == year && d.d_moy == month && ca.ca_gmt_offset == (-5)
  Index        r172, r53, r9
  Equal        r173, r172, r58
  Index        r174, r31, r10
  Equal        r175, r174, r7
  Index        r176, r31, r11
  Equal        r177, r176, r6
  Index        r178, r42, r12
  Equal        r179, r178, r65
  Move         r180, r173
  JumpIfFalse  r180, L29
  Move         r180, r175
L29:
  Move         r181, r180
  JumpIfFalse  r181, L30
  Move         r181, r177
L30:
  Move         r182, r181
  JumpIfFalse  r182, L31
  Move         r182, r179
L31:
  JumpIfFalse  r182, L28
  // select {manu: i.i_manufact_id, price: ws.ws_ext_sales_price}
  Const        r183, "manu"
  Index        r184, r53, r14
  Const        r185, "price"
  Index        r186, r144, r138
  Move         r187, r183
  Move         r188, r184
  Move         r189, r185
  Move         r190, r186
  MakeMap      r191, 2, r187
  // from ws in web_sales
  Append       r192, r137, r191
  Move         r137, r192
L28:
  // join i in item on ws.ws_item_sk == i.i_item_sk
  Add          r166, r166, r6
  Jump         L32
L27:
  // join ca in customer_address on ws.ws_bill_addr_sk == ca.ca_address_sk
  Add          r157, r157, r6
  Jump         L33
L26:
  // join d in date_dim on ws.ws_sold_date_sk == d.d_date_sk
  Add          r148, r148, r6
  Jump         L34
L25:
  // from ws in web_sales
  AddInt       r141, r141, r6
  Jump         L35
L24:
  // let union_sales = concat(
  UnionAll     r193, r136, r137
  // from s in union_sales
  Const        r194, []
  // select {i_manufact_id: g.key, total_sales: sum(from x in g select x.price)}
  Const        r195, "key"
  Const        r196, "total_sales"
  // from s in union_sales
  IterPrep     r197, r193
  Len          r198, r197
  Const        r199, 0
  MakeMap      r200, 0, r0
  Const        r202, []
  Move         r201, r202
L38:
  LessInt      r203, r199, r198
  JumpIfFalse  r203, L36
  Index        r204, r197, r199
  Move         r205, r204
  // group by s.manu into g
  Index        r206, r205, r13
  Str          r207, r206
  In           r208, r207, r200
  JumpIfTrue   r208, L37
  // from s in union_sales
  Const        r209, []
  Const        r210, "__group__"
  Const        r211, true
  // group by s.manu into g
  Move         r212, r206
  // from s in union_sales
  Const        r213, "items"
  Move         r214, r209
  Const        r215, "count"
  Move         r216, r210
  Move         r217, r211
  Move         r218, r195
  Move         r219, r212
  Move         r220, r213
  Move         r221, r214
  Move         r222, r215
  Move         r223, r20
  MakeMap      r224, 4, r216
  SetIndex     r200, r207, r224
  Append       r225, r201, r224
  Move         r201, r225
L37:
  Index        r226, r200, r207
  Index        r227, r226, r213
  Append       r228, r227, r204
  SetIndex     r226, r213, r228
  Index        r229, r226, r215
  AddInt       r230, r229, r6
  SetIndex     r226, r215, r230
  AddInt       r199, r199, r6
  Jump         L38
L36:
  Move         r231, r20
  Len          r232, r201
L44:
  LessInt      r233, r231, r232
  JumpIfFalse  r233, L39
  Index        r234, r201, r231
  Move         r235, r234
  // select {i_manufact_id: g.key, total_sales: sum(from x in g select x.price)}
  Const        r236, "i_manufact_id"
  Index        r237, r235, r195
  Const        r238, "total_sales"
  Const        r239, []
  IterPrep     r240, r235
  Len          r241, r240
  Move         r242, r20
L41:
  LessInt      r243, r242, r241
  JumpIfFalse  r243, L40
  Index        r244, r240, r242
  Move         r245, r244
  Index        r246, r245, r15
  Append       r247, r239, r246
  Move         r239, r247
  AddInt       r242, r242, r6
  Jump         L41
L40:
  Sum          r248, r239
  Move         r249, r236
  Move         r250, r237
  Move         r251, r238
  Move         r252, r248
  MakeMap      r253, 2, r249
  // sort by -sum(from x in g select x.price)
  Const        r254, []
  IterPrep     r255, r235
  Len          r256, r255
  Move         r257, r20
L43:
  LessInt      r258, r257, r256
  JumpIfFalse  r258, L42
  Index        r259, r255, r257
  Move         r245, r259
  Index        r260, r245, r15
  Append       r261, r254, r260
  Move         r254, r261
  AddInt       r257, r257, r6
  Jump         L43
L42:
  Sum          r262, r254
  Neg          r263, r262
  Move         r264, r263
  // from s in union_sales
  Move         r265, r253
  MakeList     r266, 2, r264
  Append       r267, r194, r266
  Move         r194, r267
  AddInt       r231, r231, r6
  Jump         L44
L39:
  // sort by -sum(from x in g select x.price)
  Sort         r268, r194
  // from s in union_sales
  Move         r194, r268
  // json(result)
  JSON         r194
  // expect result == [
  Const        r269, [{"i_manufact_id": 1, "total_sales": 150}, {"i_manufact_id": 2, "total_sales": 50}]
  Equal        r270, r194, r269
  Expect       r270
  Return       r0
