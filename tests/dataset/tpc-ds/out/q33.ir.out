func main (regs=266)
  // let item = [
  Const        r0, [{"i_category": "Books", "i_item_sk": 1, "i_manufact_id": 1}, {"i_category": "Books", "i_item_sk": 2, "i_manufact_id": 2}]
  // let date_dim = [
  Const        r1, [{"d_date_sk": 1, "d_moy": 1, "d_year": 2000}]
  // let customer_address = [
  Const        r2, [{"ca_address_sk": 1, "ca_gmt_offset": -5}, {"ca_address_sk": 2, "ca_gmt_offset": -5}]
  // let store_sales = [
  Const        r3, [{"ss_addr_sk": 1, "ss_ext_sales_price": 100, "ss_item_sk": 1, "ss_sold_date_sk": 1}, {"ss_addr_sk": 2, "ss_ext_sales_price": 50, "ss_item_sk": 2, "ss_sold_date_sk": 1}]
  // let catalog_sales = [
  Const        r4, [{"cs_bill_addr_sk": 1, "cs_ext_sales_price": 20, "cs_item_sk": 1, "cs_sold_date_sk": 1}]
  // let web_sales = [
  Const        r5, [{"ws_bill_addr_sk": 1, "ws_ext_sales_price": 30, "ws_item_sk": 1, "ws_sold_date_sk": 1}]
  // let month = 1
  Const        r6, 1
  // let year = 2000
  Const        r7, 2000
  // from ss in store_sales
  Const        r8, []
  // where i.i_category == "Books" && d.d_year == year && d.d_moy == month && ca.ca_gmt_offset == (-5)
  Const        r9, "i_category"
  Const        r10, "d_year"
  Const        r11, "d_moy"
  Const        r12, "ca_gmt_offset"
  // select {manu: i.i_manufact_id, price: ss.ss_ext_sales_price},
  Const        r13, "manu"
  Const        r14, "i_manufact_id"
  Const        r15, "price"
  Const        r16, "ss_ext_sales_price"
  // from ss in store_sales
  IterPrep     r17, r3
  Len          r18, r17
  Const        r20, 0
  Move         r19, r20
L9:
  LessInt      r21, r19, r18
  JumpIfFalse  r21, L0
  Index        r23, r17, r19
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  IterPrep     r24, r1
  Len          r25, r24
  Const        r26, "ss_sold_date_sk"
  Const        r27, "d_date_sk"
  Move         r28, r20
L8:
  LessInt      r29, r28, r25
  JumpIfFalse  r29, L1
  Index        r31, r24, r28
  Index        r32, r23, r26
  Index        r33, r31, r27
  Equal        r34, r32, r33
  JumpIfFalse  r34, L2
  // join ca in customer_address on ss.ss_addr_sk == ca.ca_address_sk
  IterPrep     r35, r2
  Len          r36, r35
  Const        r37, "ss_addr_sk"
  Const        r38, "ca_address_sk"
  Move         r39, r20
L7:
  LessInt      r40, r39, r36
  JumpIfFalse  r40, L2
  Index        r42, r35, r39
  Index        r43, r23, r37
  Index        r44, r42, r38
  Equal        r45, r43, r44
  JumpIfFalse  r45, L3
  // join i in item on ss.ss_item_sk == i.i_item_sk
  IterPrep     r46, r0
  Len          r47, r46
  Const        r48, "ss_item_sk"
  Const        r49, "i_item_sk"
  Move         r50, r20
L6:
  LessInt      r51, r50, r47
  JumpIfFalse  r51, L3
  Index        r53, r46, r50
  Index        r54, r23, r48
  Index        r55, r53, r49
  Equal        r56, r54, r55
  JumpIfFalse  r56, L4
  // where i.i_category == "Books" && d.d_year == year && d.d_moy == month && ca.ca_gmt_offset == (-5)
  Index        r57, r53, r9
  Const        r58, "Books"
  Equal        r59, r57, r58
  Index        r60, r31, r10
  Equal        r61, r60, r7
  Index        r62, r31, r11
  Equal        r63, r62, r6
  Index        r64, r42, r12
  Const        r65, -5
  Equal        r66, r64, r65
  JumpIfFalse  r59, L5
  Move         r59, r61
  JumpIfFalse  r59, L5
  Move         r59, r63
  JumpIfFalse  r59, L5
  Move         r59, r66
L5:
  JumpIfFalse  r59, L4
  // select {manu: i.i_manufact_id, price: ss.ss_ext_sales_price},
  Const        r67, "manu"
  Index        r68, r53, r14
  Const        r69, "price"
  Index        r70, r23, r16
  Move         r71, r67
  Move         r72, r68
  Move         r73, r69
  Move         r74, r70
  MakeMap      r75, 2, r71
  // from ss in store_sales
  Append       r8, r8, r75
L4:
  // join i in item on ss.ss_item_sk == i.i_item_sk
  Add          r50, r50, r6
  Jump         L6
L3:
  // join ca in customer_address on ss.ss_addr_sk == ca.ca_address_sk
  Add          r39, r39, r6
  Jump         L7
L2:
  // join d in date_dim on ss.ss_sold_date_sk == d.d_date_sk
  Add          r28, r28, r6
  Jump         L8
L1:
  // from ss in store_sales
  AddInt       r19, r19, r6
  Jump         L9
L0:
  // from cs in catalog_sales
  Const        r77, []
  // select {manu: i.i_manufact_id, price: cs.cs_ext_sales_price},
  Const        r78, "cs_ext_sales_price"
  // from cs in catalog_sales
  IterPrep     r79, r4
  Len          r80, r79
  Move         r81, r20
L19:
  LessInt      r82, r81, r80
  JumpIfFalse  r82, L10
  Index        r84, r79, r81
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  IterPrep     r85, r1
  Len          r86, r85
  Const        r87, "cs_sold_date_sk"
  Move         r88, r20
L18:
  LessInt      r89, r88, r86
  JumpIfFalse  r89, L11
  Index        r31, r85, r88
  Index        r91, r84, r87
  Index        r92, r31, r27
  Equal        r93, r91, r92
  JumpIfFalse  r93, L12
  // join ca in customer_address on cs.cs_bill_addr_sk == ca.ca_address_sk
  IterPrep     r94, r2
  Len          r95, r94
  Const        r96, "cs_bill_addr_sk"
  Move         r97, r20
L17:
  LessInt      r98, r97, r95
  JumpIfFalse  r98, L12
  Index        r42, r94, r97
  Index        r100, r84, r96
  Index        r101, r42, r38
  Equal        r102, r100, r101
  JumpIfFalse  r102, L13
  // join i in item on cs.cs_item_sk == i.i_item_sk
  IterPrep     r103, r0
  Len          r104, r103
  Const        r105, "cs_item_sk"
  Move         r106, r20
L16:
  LessInt      r107, r106, r104
  JumpIfFalse  r107, L13
  Index        r53, r103, r106
  Index        r109, r84, r105
  Index        r110, r53, r49
  Equal        r111, r109, r110
  JumpIfFalse  r111, L14
  // where i.i_category == "Books" && d.d_year == year && d.d_moy == month && ca.ca_gmt_offset == (-5)
  Index        r112, r53, r9
  Equal        r113, r112, r58
  Index        r114, r31, r10
  Equal        r115, r114, r7
  Index        r116, r31, r11
  Equal        r117, r116, r6
  Index        r118, r42, r12
  Equal        r119, r118, r65
  JumpIfFalse  r113, L15
  Move         r113, r115
  JumpIfFalse  r113, L15
  Move         r113, r117
  JumpIfFalse  r113, L15
  Move         r113, r119
L15:
  JumpIfFalse  r113, L14
  // select {manu: i.i_manufact_id, price: cs.cs_ext_sales_price},
  Const        r120, "manu"
  Index        r121, r53, r14
  Const        r122, "price"
  Index        r123, r84, r78
  Move         r124, r120
  Move         r125, r121
  Move         r126, r122
  Move         r127, r123
  MakeMap      r128, 2, r124
  // from cs in catalog_sales
  Append       r77, r77, r128
L14:
  // join i in item on cs.cs_item_sk == i.i_item_sk
  Add          r106, r106, r6
  Jump         L16
L13:
  // join ca in customer_address on cs.cs_bill_addr_sk == ca.ca_address_sk
  Add          r97, r97, r6
  Jump         L17
L12:
  // join d in date_dim on cs.cs_sold_date_sk == d.d_date_sk
  Add          r88, r88, r6
  Jump         L18
L11:
  // from cs in catalog_sales
  AddInt       r81, r81, r6
  Jump         L19
L10:
  // let union_sales = concat(
  UnionAll     r130, r8, r77
  // from ws in web_sales
  Const        r131, []
  // select {manu: i.i_manufact_id, price: ws.ws_ext_sales_price}
  Const        r132, "ws_ext_sales_price"
  // from ws in web_sales
  IterPrep     r133, r5
  Len          r134, r133
  Move         r135, r20
L29:
  LessInt      r136, r135, r134
  JumpIfFalse  r136, L20
  Index        r138, r133, r135
  // join d in date_dim on ws.ws_sold_date_sk == d.d_date_sk
  IterPrep     r139, r1
  Len          r140, r139
  Const        r141, "ws_sold_date_sk"
  Move         r142, r20
L28:
  LessInt      r143, r142, r140
  JumpIfFalse  r143, L21
  Index        r31, r139, r142
  Index        r145, r138, r141
  Index        r146, r31, r27
  Equal        r147, r145, r146
  JumpIfFalse  r147, L22
  // join ca in customer_address on ws.ws_bill_addr_sk == ca.ca_address_sk
  IterPrep     r148, r2
  Len          r149, r148
  Const        r150, "ws_bill_addr_sk"
  Move         r151, r20
L27:
  LessInt      r152, r151, r149
  JumpIfFalse  r152, L22
  Index        r42, r148, r151
  Index        r154, r138, r150
  Index        r155, r42, r38
  Equal        r156, r154, r155
  JumpIfFalse  r156, L23
  // join i in item on ws.ws_item_sk == i.i_item_sk
  IterPrep     r157, r0
  Len          r158, r157
  Const        r159, "ws_item_sk"
  Move         r160, r20
L26:
  LessInt      r161, r160, r158
  JumpIfFalse  r161, L23
  Index        r53, r157, r160
  Index        r163, r138, r159
  Index        r164, r53, r49
  Equal        r165, r163, r164
  JumpIfFalse  r165, L24
  // where i.i_category == "Books" && d.d_year == year && d.d_moy == month && ca.ca_gmt_offset == (-5)
  Index        r166, r53, r9
  Equal        r167, r166, r58
  Index        r168, r31, r10
  Equal        r169, r168, r7
  Index        r170, r31, r11
  Equal        r171, r170, r6
  Index        r172, r42, r12
  Equal        r173, r172, r65
  JumpIfFalse  r167, L25
  Move         r167, r169
  JumpIfFalse  r167, L25
  Move         r167, r171
  JumpIfFalse  r167, L25
  Move         r167, r173
L25:
  JumpIfFalse  r167, L24
  // select {manu: i.i_manufact_id, price: ws.ws_ext_sales_price}
  Const        r174, "manu"
  Index        r175, r53, r14
  Const        r176, "price"
  Index        r177, r138, r132
  Move         r178, r174
  Move         r179, r175
  Move         r180, r176
  Move         r181, r177
  MakeMap      r182, 2, r178
  // from ws in web_sales
  Append       r131, r131, r182
L24:
  // join i in item on ws.ws_item_sk == i.i_item_sk
  Add          r160, r160, r6
  Jump         L26
L23:
  // join ca in customer_address on ws.ws_bill_addr_sk == ca.ca_address_sk
  Add          r151, r151, r6
  Jump         L27
L22:
  // join d in date_dim on ws.ws_sold_date_sk == d.d_date_sk
  Add          r142, r142, r6
  Jump         L28
L21:
  // from ws in web_sales
  AddInt       r135, r135, r6
  Jump         L29
L20:
  // let union_sales = concat(
  UnionAll     r184, r130, r131
  // from s in union_sales
  Const        r185, []
  // select {i_manufact_id: g.key, total_sales: sum(from x in g select x.price)}
  Const        r186, "key"
  Const        r187, "total_sales"
  // from s in union_sales
  IterPrep     r188, r184
  Len          r189, r188
  Const        r190, 0
  MakeMap      r191, 0, r0
  Const        r192, []
L32:
  LessInt      r194, r190, r189
  JumpIfFalse  r194, L30
  Index        r195, r188, r190
  // group by s.manu into g
  Index        r197, r195, r13
  Str          r198, r197
  In           r199, r198, r191
  JumpIfTrue   r199, L31
  // from s in union_sales
  Const        r200, []
  Const        r201, "__group__"
  Const        r202, true
  Const        r203, "key"
  // group by s.manu into g
  Move         r204, r197
  // from s in union_sales
  Const        r205, "items"
  Move         r206, r200
  Const        r207, "count"
  Const        r208, 0
  Move         r209, r201
  Move         r210, r202
  Move         r211, r203
  Move         r212, r204
  Move         r213, r205
  Move         r214, r206
  Move         r215, r207
  Move         r216, r208
  MakeMap      r217, 4, r209
  SetIndex     r191, r198, r217
  Append       r192, r192, r217
L31:
  Const        r219, "items"
  Index        r220, r191, r198
  Index        r221, r220, r219
  Append       r222, r221, r195
  SetIndex     r220, r219, r222
  Const        r223, "count"
  Index        r224, r220, r223
  AddInt       r225, r224, r6
  SetIndex     r220, r223, r225
  AddInt       r190, r190, r6
  Jump         L32
L30:
  Move         r226, r20
  Len          r227, r192
L38:
  LessInt      r228, r226, r227
  JumpIfFalse  r228, L33
  Index        r230, r192, r226
  // select {i_manufact_id: g.key, total_sales: sum(from x in g select x.price)}
  Const        r231, "i_manufact_id"
  Index        r232, r230, r186
  Const        r233, "total_sales"
  Const        r234, []
  IterPrep     r235, r230
  Len          r236, r235
  Move         r237, r20
L35:
  LessInt      r238, r237, r236
  JumpIfFalse  r238, L34
  Index        r240, r235, r237
  Index        r241, r240, r15
  Append       r234, r234, r241
  AddInt       r237, r237, r6
  Jump         L35
L34:
  Sum          r243, r234
  Move         r244, r231
  Move         r245, r232
  Move         r246, r233
  Move         r247, r243
  MakeMap      r248, 2, r244
  // sort by -sum(from x in g select x.price)
  Const        r249, []
  IterPrep     r250, r230
  Len          r251, r250
  Move         r252, r20
L37:
  LessInt      r253, r252, r251
  JumpIfFalse  r253, L36
  Index        r240, r250, r252
  Index        r255, r240, r15
  Append       r249, r249, r255
  AddInt       r252, r252, r6
  Jump         L37
L36:
  Sum          r257, r249
  Neg          r259, r257
  // from s in union_sales
  Move         r260, r248
  MakeList     r261, 2, r259
  Append       r185, r185, r261
  AddInt       r226, r226, r6
  Jump         L38
L33:
  // sort by -sum(from x in g select x.price)
  Sort         r185, r185
  // json(result)
  JSON         r185
  // expect result == [
  Const        r264, [{"i_manufact_id": 1, "total_sales": 150}, {"i_manufact_id": 2, "total_sales": 50}]
  Equal        r265, r185, r264
  Expect       r265
  Return       r0
