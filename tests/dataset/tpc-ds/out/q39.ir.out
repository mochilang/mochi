func main (regs=244)
  // let inventory = [
  Const        r0, [{"inv_date_sk": 1, "inv_item_sk": 1, "inv_quantity_on_hand": 10, "inv_warehouse_sk": 1}, {"inv_date_sk": 2, "inv_item_sk": 1, "inv_quantity_on_hand": 10, "inv_warehouse_sk": 1}, {"inv_date_sk": 3, "inv_item_sk": 1, "inv_quantity_on_hand": 250, "inv_warehouse_sk": 1}]
  // let item = [
  Const        r1, [{"i_item_sk": 1}]
  // let warehouse = [
  Const        r2, [{"w_warehouse_name": "W1", "w_warehouse_sk": 1}]
  // let date_dim = [
  Const        r3, [{"d_date_sk": 1, "d_moy": 1, "d_year": 2000}, {"d_date_sk": 2, "d_moy": 2, "d_year": 2000}, {"d_date_sk": 3, "d_moy": 3, "d_year": 2000}]
  // from inv in inventory
  Const        r4, []
  // group by {w: w.w_warehouse_sk, i: i.i_item_sk, month: d.d_moy} into g
  Const        r5, "w"
  Const        r6, "w_warehouse_sk"
  Const        r7, "i"
  Const        r8, "i_item_sk"
  Const        r9, "month"
  Const        r10, "d_moy"
  // where d.d_year == 2000
  Const        r11, "d_year"
  // select {w: g.key.w, i: g.key.i, qty: sum(from x in g select x.inv_quantity_on_hand)}
  Const        r12, "key"
  Const        r13, "qty"
  Const        r14, "inv_quantity_on_hand"
  // from inv in inventory
  MakeMap      r15, 0, r0
  Const        r17, []
  Move         r16, r17
  IterPrep     r18, r0
  Len          r19, r18
  Const        r20, 0
L9:
  LessInt      r21, r20, r19
  JumpIfFalse  r21, L0
  Index        r22, r18, r20
  Move         r23, r22
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  IterPrep     r24, r3
  Len          r25, r24
  Const        r26, 0
L8:
  LessInt      r27, r26, r25
  JumpIfFalse  r27, L1
  Index        r28, r24, r26
  Move         r29, r28
  Const        r30, "inv_date_sk"
  Index        r31, r23, r30
  Const        r32, "d_date_sk"
  Index        r33, r29, r32
  Equal        r34, r31, r33
  JumpIfFalse  r34, L2
  // join i in item on inv.inv_item_sk == i.i_item_sk
  IterPrep     r35, r1
  Len          r36, r35
  Const        r37, 0
L7:
  LessInt      r38, r37, r36
  JumpIfFalse  r38, L2
  Index        r39, r35, r37
  Move         r40, r39
  Const        r41, "inv_item_sk"
  Index        r42, r23, r41
  Index        r43, r40, r8
  Equal        r44, r42, r43
  JumpIfFalse  r44, L3
  // join w in warehouse on inv.inv_warehouse_sk == w.w_warehouse_sk
  IterPrep     r45, r2
  Len          r46, r45
  Const        r47, 0
L6:
  LessInt      r48, r47, r46
  JumpIfFalse  r48, L3
  Index        r49, r45, r47
  Move         r50, r49
  Const        r51, "inv_warehouse_sk"
  Index        r52, r23, r51
  Index        r53, r50, r6
  Equal        r54, r52, r53
  JumpIfFalse  r54, L4
  // where d.d_year == 2000
  Index        r55, r29, r11
  Const        r56, 2000
  Equal        r57, r55, r56
  JumpIfFalse  r57, L4
  // from inv in inventory
  Const        r58, "inv"
  Move         r59, r23
  Const        r60, "d"
  Move         r61, r29
  Move         r62, r40
  Move         r63, r50
  Move         r64, r58
  Move         r65, r59
  Move         r66, r60
  Move         r67, r61
  Move         r68, r7
  Move         r69, r62
  Move         r70, r5
  Move         r71, r63
  MakeMap      r72, 4, r64
  // group by {w: w.w_warehouse_sk, i: i.i_item_sk, month: d.d_moy} into g
  Const        r73, "w"
  Index        r74, r50, r6
  Const        r75, "i"
  Index        r76, r40, r8
  Const        r77, "month"
  Index        r78, r29, r10
  Move         r79, r73
  Move         r80, r74
  Move         r81, r75
  Move         r82, r76
  Move         r83, r77
  Move         r84, r78
  MakeMap      r85, 3, r79
  Str          r86, r85
  In           r87, r86, r15
  JumpIfTrue   r87, L5
  // from inv in inventory
  Const        r88, []
  Const        r89, "__group__"
  Const        r90, true
  // group by {w: w.w_warehouse_sk, i: i.i_item_sk, month: d.d_moy} into g
  Move         r91, r85
  // from inv in inventory
  Const        r92, "items"
  Move         r93, r88
  Const        r94, "count"
  Const        r95, 0
  Move         r96, r89
  Move         r97, r90
  Move         r98, r12
  Move         r99, r91
  Move         r100, r92
  Move         r101, r93
  Move         r102, r94
  Move         r103, r95
  MakeMap      r104, 4, r96
  SetIndex     r15, r86, r104
  Append       r105, r16, r104
  Move         r16, r105
L5:
  Index        r106, r15, r86
  Index        r107, r106, r92
  Append       r108, r107, r72
  SetIndex     r106, r92, r108
  Index        r109, r106, r94
  Const        r110, 1
  AddInt       r111, r109, r110
  SetIndex     r106, r94, r111
L4:
  // join w in warehouse on inv.inv_warehouse_sk == w.w_warehouse_sk
  AddInt       r47, r47, r110
  Jump         L6
L3:
  // join i in item on inv.inv_item_sk == i.i_item_sk
  AddInt       r37, r37, r110
  Jump         L7
L2:
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  AddInt       r26, r26, r110
  Jump         L8
L1:
  // from inv in inventory
  AddInt       r20, r20, r110
  Jump         L9
L0:
  Move         r112, r95
  Len          r113, r16
L13:
  LessInt      r114, r112, r113
  JumpIfFalse  r114, L10
  Index        r115, r16, r112
  Move         r116, r115
  // select {w: g.key.w, i: g.key.i, qty: sum(from x in g select x.inv_quantity_on_hand)}
  Const        r117, "w"
  Index        r118, r116, r12
  Index        r119, r118, r5
  Const        r120, "i"
  Index        r121, r116, r12
  Index        r122, r121, r7
  Const        r123, "qty"
  Const        r124, []
  IterPrep     r125, r116
  Len          r126, r125
  Move         r127, r95
L12:
  LessInt      r128, r127, r126
  JumpIfFalse  r128, L11
  Index        r129, r125, r127
  Move         r130, r129
  Index        r131, r130, r14
  Append       r132, r124, r131
  Move         r124, r132
  AddInt       r127, r127, r110
  Jump         L12
L11:
  Sum          r133, r124
  Move         r134, r117
  Move         r135, r119
  Move         r136, r120
  Move         r137, r122
  Move         r138, r123
  Move         r139, r133
  MakeMap      r140, 3, r134
  // from inv in inventory
  Append       r141, r4, r140
  Move         r4, r141
  AddInt       r112, r112, r110
  Jump         L13
L10:
  // var grouped: map<string, map<string, any>> = {}
  Const        r142, {}
  Move         r143, r142
  // for m in monthly {
  IterPrep     r144, r4
  Len          r145, r144
  Const        r146, 0
L17:
  Less         r147, r146, r145
  JumpIfFalse  r147, L14
  Index        r148, r144, r146
  Move         r149, r148
  // let key = str({w: m.w, i: m.i})
  Const        r150, "w"
  Index        r151, r149, r5
  Const        r152, "i"
  Index        r153, r149, r7
  Move         r154, r150
  Move         r155, r151
  Move         r156, r152
  Move         r157, r153
  MakeMap      r158, 2, r154
  Str          r159, r158
  // if key in grouped {
  In           r160, r159, r143
  JumpIfFalse  r160, L15
  // let g = grouped[key]
  Index        r161, r143, r159
  // grouped[key] = {w: g.w, i: g.i, qtys: append(g.qtys, m.qty)}
  Const        r162, "w"
  Index        r163, r161, r5
  Const        r164, "i"
  Index        r165, r161, r7
  Const        r166, "qtys"
  Const        r167, "qtys"
  Index        r168, r161, r167
  Index        r169, r149, r13
  Append       r170, r168, r169
  Move         r171, r162
  Move         r172, r163
  Move         r173, r164
  Move         r174, r165
  Move         r175, r166
  Move         r176, r170
  MakeMap      r177, 3, r171
  SetIndex     r143, r159, r177
  // if key in grouped {
  Jump         L16
L15:
  // grouped[key] = {w: m.w, i: m.i, qtys: [m.qty]}
  Const        r178, "w"
  Index        r179, r149, r5
  Const        r180, "i"
  Index        r181, r149, r7
  Const        r182, "qtys"
  Index        r183, r149, r13
  Move         r184, r183
  MakeList     r185, 1, r184
  Move         r186, r178
  Move         r187, r179
  Move         r188, r180
  Move         r189, r181
  Move         r190, r182
  Move         r191, r185
  MakeMap      r192, 3, r186
  SetIndex     r143, r159, r192
L16:
  // for m in monthly {
  Const        r193, 1
  Add          r194, r146, r193
  Move         r146, r194
  Jump         L17
L14:
  // var summary = []
  Move         r195, r88
  // for g in values(grouped) {
  Const        r196, []
  IterPrep     r197, r196
  Len          r198, r197
  Const        r199, 0
L22:
  Less         r200, r199, r198
  JumpIfFalse  r200, L18
  Index        r201, r197, r199
  Move         r116, r201
  // let mean = avg(g.qtys)
  Index        r202, r116, r167
  Avg          r203, r202
  // var sumsq = 0.0
  Const        r204, 0
  Move         r205, r204
  // for q in g.qtys {
  Index        r206, r116, r167
  IterPrep     r207, r206
  Len          r208, r207
  Const        r209, 0
L20:
  Less         r210, r209, r208
  JumpIfFalse  r210, L19
  Index        r211, r207, r209
  Move         r212, r211
  // sumsq = sumsq + (q - mean) * (q - mean)
  SubFloat     r213, r212, r203
  SubFloat     r214, r212, r203
  MulFloat     r215, r213, r214
  AddFloat     r216, r205, r215
  Move         r205, r216
  // for q in g.qtys {
  Const        r217, 1
  Add          r218, r209, r217
  Move         r209, r218
  Jump         L20
L19:
  // let variance = sumsq / len(g.qtys)
  Index        r219, r116, r167
  Len          r220, r219
  DivFloat     r221, r205, r220
  // let cov = sqrt(variance) / mean
  Move         r222, r221
  Call         r223, sqrt, r222
  DivFloat     r224, r223, r203
  // if cov > 1.5 {
  Const        r225, 1.5
  LessFloat    r226, r225, r224
  JumpIfFalse  r226, L21
  // summary = append(summary, {w_warehouse_sk: g.w, i_item_sk: g.i, cov: cov})
  Const        r227, "w_warehouse_sk"
  Index        r228, r116, r5
  Const        r229, "i_item_sk"
  Index        r230, r116, r7
  Const        r231, "cov"
  Move         r232, r227
  Move         r233, r228
  Move         r234, r229
  Move         r235, r230
  Move         r236, r231
  Move         r237, r224
  MakeMap      r238, 3, r232
  Append       r239, r195, r238
  Move         r195, r239
L21:
  // for g in values(grouped) {
  Const        r240, 1
  Add          r241, r199, r240
  Move         r199, r241
  Jump         L22
L18:
  // json(summary)
  JSON         r195
  // expect summary == [{w_warehouse_sk: 1, i_item_sk: 1, cov: 1.5396007178390022}]
  Const        r242, [{"cov": 1.539600717839002, "i_item_sk": 1, "w_warehouse_sk": 1}]
  Equal        r243, r195, r242
  Expect       r243
  Return       r0

  // fun sqrt(x: float): float {
func sqrt (regs=13)
  // let guess = x / 2.0
  Const        r1, 2
  DivFloat     r2, r0, r1
  // var result = guess
  Move         r3, r2
  // for i in 0..5 {
  Const        r4, 0
  Const        r5, 5
  Move         r6, r4
L1:
  Less         r7, r6, r5
  JumpIfFalse  r7, L0
  // result = (result + x / result) / 2.0
  DivFloat     r8, r0, r3
  AddFloat     r9, r3, r8
  DivFloat     r10, r9, r1
  Move         r3, r10
  // for i in 0..5 {
  Const        r11, 1
  Add          r12, r6, r11
  Move         r6, r12
  Jump         L1
L0:
  // return result
  Return       r3
