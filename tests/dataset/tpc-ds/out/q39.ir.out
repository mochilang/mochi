func main (regs=243)
  // let inventory = [
  Const        r0, [{"inv_date_sk": 1, "inv_item_sk": 1, "inv_quantity_on_hand": 10, "inv_warehouse_sk": 1}, {"inv_date_sk": 2, "inv_item_sk": 1, "inv_quantity_on_hand": 10, "inv_warehouse_sk": 1}, {"inv_date_sk": 3, "inv_item_sk": 1, "inv_quantity_on_hand": 250, "inv_warehouse_sk": 1}]
  // let item = [
  Const        r1, [{"i_item_sk": 1}]
  // let warehouse = [
  Const        r2, [{"w_warehouse_name": "W1", "w_warehouse_sk": 1}]
  // let date_dim = [
  Const        r3, [{"d_date_sk": 1, "d_moy": 1, "d_year": 2000}, {"d_date_sk": 2, "d_moy": 2, "d_year": 2000}, {"d_date_sk": 3, "d_moy": 3, "d_year": 2000}]
  // from inv in inventory
  Const        r4, []
  // group by {w: w.w_warehouse_sk, i: i.i_item_sk, month: d.d_moy} into g
  Const        r5, "w"
  Const        r6, "w_warehouse_sk"
  Const        r7, "i"
  Const        r8, "i_item_sk"
  Const        r9, "month"
  Const        r10, "d_moy"
  // where d.d_year == 2000
  Const        r11, "d_year"
  // select {w: g.key.w, i: g.key.i, qty: sum(from x in g select x.inv_quantity_on_hand)}
  Const        r12, "key"
  Const        r13, "qty"
  Const        r14, "inv_quantity_on_hand"
  // from inv in inventory
  MakeMap      r15, 0, r0
  Const        r17, []
  Move         r16, r17
  IterPrep     r18, r0
  Len          r19, r18
  Const        r20, 0
L9:
  LessInt      r21, r20, r19
  JumpIfFalse  r21, L0
  Index        r22, r18, r20
  Move         r23, r22
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  IterPrep     r24, r3
  Len          r25, r24
  Const        r26, 0
L8:
  LessInt      r27, r26, r25
  JumpIfFalse  r27, L1
  Index        r28, r24, r26
  Move         r29, r28
  Const        r30, "inv_date_sk"
  Index        r31, r23, r30
  Const        r32, "d_date_sk"
  Index        r33, r29, r32
  Equal        r34, r31, r33
  JumpIfFalse  r34, L2
  // join i in item on inv.inv_item_sk == i.i_item_sk
  IterPrep     r35, r1
  Len          r36, r35
  Const        r37, 0
L7:
  LessInt      r38, r37, r36
  JumpIfFalse  r38, L2
  Index        r39, r35, r37
  Move         r40, r39
  Const        r41, "inv_item_sk"
  Index        r42, r23, r41
  Index        r43, r40, r8
  Equal        r44, r42, r43
  JumpIfFalse  r44, L3
  // join w in warehouse on inv.inv_warehouse_sk == w.w_warehouse_sk
  IterPrep     r45, r2
  Len          r46, r45
  Const        r47, 0
L6:
  LessInt      r48, r47, r46
  JumpIfFalse  r48, L3
  Index        r49, r45, r47
  Move         r50, r49
  Const        r51, "inv_warehouse_sk"
  Index        r52, r23, r51
  Index        r53, r50, r6
  Equal        r54, r52, r53
  JumpIfFalse  r54, L4
  // where d.d_year == 2000
  Index        r55, r29, r11
  Const        r56, 2000
  Equal        r57, r55, r56
  JumpIfFalse  r57, L4
  // from inv in inventory
  Const        r58, "inv"
  Move         r59, r23
  Const        r60, "d"
  Move         r61, r29
  Move         r62, r40
  Move         r63, r50
  Move         r64, r58
  Move         r65, r59
  Move         r66, r60
  Move         r67, r61
  Move         r68, r7
  Move         r69, r62
  Move         r70, r5
  Move         r71, r63
  MakeMap      r72, 4, r64
  // group by {w: w.w_warehouse_sk, i: i.i_item_sk, month: d.d_moy} into g
  Const        r73, "w"
  Index        r74, r50, r6
  Const        r75, "i"
  Index        r76, r40, r8
  Const        r77, "month"
  Index        r78, r29, r10
  Move         r79, r73
  Move         r80, r74
  Move         r81, r75
  Move         r82, r76
  Move         r83, r77
  Move         r84, r78
  MakeMap      r85, 3, r79
  Str          r86, r85
  In           r87, r86, r15
  JumpIfTrue   r87, L5
  // from inv in inventory
  Const        r88, "__group__"
  Const        r89, true
  // group by {w: w.w_warehouse_sk, i: i.i_item_sk, month: d.d_moy} into g
  Move         r90, r85
  // from inv in inventory
  Const        r91, "items"
  Move         r92, r17
  Const        r93, "count"
  Const        r94, 0
  Move         r95, r88
  Move         r96, r89
  Move         r97, r12
  Move         r98, r90
  Move         r99, r91
  Move         r100, r92
  Move         r101, r93
  Move         r102, r94
  MakeMap      r103, 4, r95
  SetIndex     r15, r86, r103
  Append       r104, r16, r103
  Move         r16, r104
L5:
  Index        r105, r15, r86
  Index        r106, r105, r91
  Append       r107, r106, r72
  SetIndex     r105, r91, r107
  Index        r108, r105, r93
  Const        r109, 1
  AddInt       r110, r108, r109
  SetIndex     r105, r93, r110
L4:
  // join w in warehouse on inv.inv_warehouse_sk == w.w_warehouse_sk
  AddInt       r47, r47, r109
  Jump         L6
L3:
  // join i in item on inv.inv_item_sk == i.i_item_sk
  AddInt       r37, r37, r109
  Jump         L7
L2:
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  AddInt       r26, r26, r109
  Jump         L8
L1:
  // from inv in inventory
  AddInt       r20, r20, r109
  Jump         L9
L0:
  Move         r111, r94
  Len          r112, r16
L13:
  LessInt      r113, r111, r112
  JumpIfFalse  r113, L10
  Index        r114, r16, r111
  Move         r115, r114
  // select {w: g.key.w, i: g.key.i, qty: sum(from x in g select x.inv_quantity_on_hand)}
  Const        r116, "w"
  Index        r117, r115, r12
  Index        r118, r117, r5
  Const        r119, "i"
  Index        r120, r115, r12
  Index        r121, r120, r7
  Const        r122, "qty"
  Const        r123, []
  IterPrep     r124, r115
  Len          r125, r124
  Move         r126, r94
L12:
  LessInt      r127, r126, r125
  JumpIfFalse  r127, L11
  Index        r128, r124, r126
  Move         r129, r128
  Index        r130, r129, r14
  Append       r131, r123, r130
  Move         r123, r131
  AddInt       r126, r126, r109
  Jump         L12
L11:
  Sum          r132, r123
  Move         r133, r116
  Move         r134, r118
  Move         r135, r119
  Move         r136, r121
  Move         r137, r122
  Move         r138, r132
  MakeMap      r139, 3, r133
  // from inv in inventory
  Append       r140, r4, r139
  Move         r4, r140
  AddInt       r111, r111, r109
  Jump         L13
L10:
  // var grouped: map<string, map<string, any>> = {}
  Const        r141, {}
  Move         r142, r141
  // for m in monthly {
  IterPrep     r143, r4
  Len          r144, r143
  Const        r145, 0
L17:
  LessInt      r146, r145, r144
  JumpIfFalse  r146, L14
  Index        r147, r143, r145
  Move         r148, r147
  // let key = str({w: m.w, i: m.i})
  Const        r149, "w"
  Index        r150, r148, r5
  Const        r151, "i"
  Index        r152, r148, r7
  Move         r153, r149
  Move         r154, r150
  Move         r155, r151
  Move         r156, r152
  MakeMap      r157, 2, r153
  Str          r158, r157
  // if key in grouped {
  In           r159, r158, r142
  JumpIfFalse  r159, L15
  // let g = grouped[key]
  Index        r160, r142, r158
  // grouped[key] = {w: g.w, i: g.i, qtys: append(g.qtys, m.qty)}
  Const        r161, "w"
  Index        r162, r160, r5
  Const        r163, "i"
  Index        r164, r160, r7
  Const        r165, "qtys"
  Const        r166, "qtys"
  Index        r167, r160, r166
  Index        r168, r148, r13
  Append       r169, r167, r168
  Move         r170, r161
  Move         r171, r162
  Move         r172, r163
  Move         r173, r164
  Move         r174, r165
  Move         r175, r169
  MakeMap      r176, 3, r170
  SetIndex     r142, r158, r176
  // if key in grouped {
  Jump         L16
L15:
  // grouped[key] = {w: m.w, i: m.i, qtys: [m.qty]}
  Const        r177, "w"
  Index        r178, r148, r5
  Const        r179, "i"
  Index        r180, r148, r7
  Const        r181, "qtys"
  Index        r182, r148, r13
  Move         r183, r182
  MakeList     r184, 1, r183
  Move         r185, r177
  Move         r186, r178
  Move         r187, r179
  Move         r188, r180
  Move         r189, r181
  Move         r190, r184
  MakeMap      r191, 3, r185
  SetIndex     r142, r158, r191
L16:
  // for m in monthly {
  Const        r192, 1
  AddInt       r193, r145, r192
  Move         r145, r193
  Jump         L17
L14:
  // var summary = []
  Move         r194, r17
  // for g in values(grouped) {
  Const        r195, []
  IterPrep     r196, r195
  Len          r197, r196
  Const        r198, 0
L22:
  LessInt      r199, r198, r197
  JumpIfFalse  r199, L18
  Index        r200, r196, r198
  Move         r115, r200
  // let mean = avg(g.qtys)
  Index        r201, r115, r166
  Avg          r202, r201
  // var sumsq = 0.0
  Const        r203, 0.0
  Move         r204, r203
  // for q in g.qtys {
  Index        r205, r115, r166
  IterPrep     r206, r205
  Len          r207, r206
  Const        r208, 0
L20:
  LessInt      r209, r208, r207
  JumpIfFalse  r209, L19
  Index        r210, r206, r208
  Move         r211, r210
  // sumsq = sumsq + (q - mean) * (q - mean)
  SubFloat     r212, r211, r202
  SubFloat     r213, r211, r202
  MulFloat     r214, r212, r213
  AddFloat     r215, r204, r214
  Move         r204, r215
  // for q in g.qtys {
  Const        r216, 1
  AddInt       r217, r208, r216
  Move         r208, r217
  Jump         L20
L19:
  // let variance = sumsq / len(g.qtys)
  Index        r218, r115, r166
  Len          r219, r218
  DivFloat     r220, r204, r219
  // let cov = sqrt(variance) / mean
  Move         r221, r220
  Call         r222, sqrt, r221
  DivFloat     r223, r222, r202
  // if cov > 1.5 {
  Const        r224, 1.5
  LessFloat    r225, r224, r223
  JumpIfFalse  r225, L21
  // summary = append(summary, {w_warehouse_sk: g.w, i_item_sk: g.i, cov: cov})
  Const        r226, "w_warehouse_sk"
  Index        r227, r115, r5
  Const        r228, "i_item_sk"
  Index        r229, r115, r7
  Const        r230, "cov"
  Move         r231, r226
  Move         r232, r227
  Move         r233, r228
  Move         r234, r229
  Move         r235, r230
  Move         r236, r223
  MakeMap      r237, 3, r231
  Append       r238, r194, r237
  Move         r194, r238
L21:
  // for g in values(grouped) {
  Const        r239, 1
  AddInt       r240, r198, r239
  Move         r198, r240
  Jump         L22
L18:
  // json(summary)
  JSON         r194
  // expect summary == [{w_warehouse_sk: 1, i_item_sk: 1, cov: 1.5396007178390022}]
  Const        r241, [{"cov": 1.539600717839002, "i_item_sk": 1, "w_warehouse_sk": 1}]
  Equal        r242, r194, r241
  Expect       r242
  Return       r0

  // fun sqrt(x: float): float {
func sqrt (regs=13)
  // let guess = x / 2.0
  Const        r1, 2.0
  DivFloat     r2, r0, r1
  // var result = guess
  Move         r3, r2
  // for i in 0..5 {
  Const        r4, 0
  Const        r5, 5
  Move         r6, r4
L1:
  LessInt      r7, r6, r5
  JumpIfFalse  r7, L0
  // result = (result + x / result) / 2.0
  DivFloat     r8, r0, r3
  AddFloat     r9, r3, r8
  DivFloat     r10, r9, r1
  Move         r3, r10
  // for i in 0..5 {
  Const        r11, 1
  AddInt       r12, r6, r11
  Move         r6, r12
  Jump         L1
L0:
  // return result
  Return       r3
