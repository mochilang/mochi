func main (regs=64)
  // let inventory = [
  Const        r0, [{"inv_date_sk": 1, "inv_item_sk": 1, "inv_quantity_on_hand": 10, "inv_warehouse_sk": 1}, {"inv_date_sk": 2, "inv_item_sk": 1, "inv_quantity_on_hand": 10, "inv_warehouse_sk": 1}, {"inv_date_sk": 3, "inv_item_sk": 1, "inv_quantity_on_hand": 250, "inv_warehouse_sk": 1}]
  // let item = [
  Const        r1, [{"i_item_sk": 1}]
  // let warehouse = [
  Const        r2, [{"w_warehouse_name": "W1", "w_warehouse_sk": 1}]
L8:
  // let date_dim = [
  Const        r3, [{"d_date_sk": 1, "d_moy": 1, "d_year": 2000}, {"d_date_sk": 2, "d_moy": 2, "d_year": 2000}, {"d_date_sk": 3, "d_moy": 3, "d_year": 2000}]
  // from inv in inventory
  Const        r4, []
  // group by {w: w.w_warehouse_sk, i: i.i_item_sk, month: d.d_moy} into g
  Const        r5, "w"
  Const        r6, "w_warehouse_sk"
  Const        r7, "i"
  Const        r8, "i_item_sk"
L5:
  Const        r9, "month"
  Const        r9, "d_moy"
  // where d.d_year == 2000
  Const        r10, "d_year"
  // select {w: g.key.w, i: g.key.i, qty: sum(from x in g select x.inv_quantity_on_hand)}
  Const        r11, "key"
  Const        r12, "qty"
L2:
  Const        r13, "inv_quantity_on_hand"
  // from inv in inventory
  MakeMap      r14, 0, r0
L11:
  Const        r15, []
  Move         r16, r15
  IterPrep     r17, r0
  Len          r18, r17
L9:
  Const        r19, 0
  LessInt      r20, r19, r18
  JumpIfFalse  r20, L0
L7:
  Index        r18, r17, r19
L6:
  Move         r17, r18
L1:
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  IterPrep     r18, r3
  Len          r3, r18
  Const        r21, 0
L3:
  LessInt      r22, r21, r3
  JumpIfFalse  r22, L1
  Index        r3, r18, r21
L12:
  Move         r22, r3
L0:
  Const        r18, "inv_date_sk"
  Index        r23, r17, r18
  Const        r18, "d_date_sk"
  Index        r24, r22, r18
  Equal        r18, r23, r24
  JumpIfFalse  r18, L2
  // join i in item on inv.inv_item_sk == i.i_item_sk
  IterPrep     r23, r1
  Len          r24, r23
  Const        r18, 0
  LessInt      r1, r18, r24
  JumpIfFalse  r1, L2
  Index        r24, r23, r18
L4:
  Move         r1, r24
  Const        r23, "inv_item_sk"
  Index        r24, r17, r23
L13:
  Index        r25, r1, r8
  Equal        r26, r24, r25
L14:
  JumpIfFalse  r26, L3
  // join w in warehouse on inv.inv_warehouse_sk == w.w_warehouse_sk
  IterPrep     r24, r2
  Len          r25, r24
L10:
  Const        r26, 0
  LessInt      r2, r26, r25
  JumpIfFalse  r2, L3
  Index        r25, r24, r26
  Move         r2, r25
L15:
  Const        r24, "inv_warehouse_sk"
  Index        r25, r17, r24
  Index        r24, r2, r6
  Equal        r27, r25, r24
  JumpIfFalse  r27, L4
L20:
  // where d.d_year == 2000
  Index        r25, r22, r10
  Const        r27, 2000
  Equal        r10, r25, r27
  JumpIfFalse  r10, L4
  // from inv in inventory
  Const        r25, "inv"
  Move         r27, r17
  Const        r10, "d"
  Move         r17, r22
  Move         r28, r1
  Move         r29, r2
  Move         r30, r25
  Move         r31, r27
  Move         r32, r10
  Move         r33, r17
  Move         r34, r7
  Move         r35, r28
  Move         r36, r5
  Move         r37, r29
  MakeMap      r25, 4, r30
  // group by {w: w.w_warehouse_sk, i: i.i_item_sk, month: d.d_moy} into g
  Const        r27, "w"
  Index        r10, r2, r6
  Const        r17, "i"
  Index        r28, r1, r8
  Const        r29, "month"
  Index        r30, r22, r9
  Move         r31, r27
  Move         r32, r10
  Move         r33, r17
  Move         r34, r28
  Move         r35, r29
  Move         r36, r30
  MakeMap      r37, 3, r31
  Str          r6, r37
  In           r2, r6, r14
  JumpIfTrue   r2, L5
  // from inv in inventory
  Const        r8, "__group__"
  Const        r1, true
  // group by {w: w.w_warehouse_sk, i: i.i_item_sk, month: d.d_moy} into g
  Move         r9, r37
  // from inv in inventory
  Const        r22, "items"
  Move         r27, r15
  Const        r10, "count"
  Const        r17, 0
  Move         r38, r8
  Move         r39, r1
  Move         r40, r11
  Move         r41, r9
  Move         r42, r22
  Move         r43, r27
  Move         r44, r10
  Move         r45, r17
  MakeMap      r28, 4, r38
  SetIndex     r14, r6, r28
  Append       r29, r16, r28
  Move         r16, r29
  Index        r30, r14, r6
  Index        r31, r30, r22
  Append       r32, r31, r25
  SetIndex     r30, r22, r32
  Index        r33, r30, r10
  Const        r34, 1
  AddInt       r35, r33, r34
  SetIndex     r30, r10, r35
  // join w in warehouse on inv.inv_warehouse_sk == w.w_warehouse_sk
  AddInt       r26, r26, r34
  Jump         L6
  // join i in item on inv.inv_item_sk == i.i_item_sk
  AddInt       r18, r18, r34
  Jump         L7
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  AddInt       r21, r21, r34
  Jump         L8
  // from inv in inventory
  AddInt       r19, r19, r34
  Jump         L9
  Move         r36, r17
  Len          r2, r16
  LessInt      r37, r36, r2
  JumpIfFalse  r37, L10
  Index        r8, r16, r36
  Move         r1, r8
  // select {w: g.key.w, i: g.key.i, qty: sum(from x in g select x.inv_quantity_on_hand)}
  Const        r9, "w"
  Index        r27, r1, r11
  Index        r38, r27, r5
  Const        r39, "i"
  Index        r40, r1, r11
  Index        r41, r40, r7
  Const        r42, "qty"
  Const        r43, []
  IterPrep     r44, r1
  Len          r45, r44
  Move         r28, r17
  LessInt      r29, r28, r45
  JumpIfFalse  r29, L11
  Index        r14, r44, r28
  Move         r6, r14
  Index        r25, r6, r13
  Append       r22, r43, r25
  Move         r43, r22
  AddInt       r28, r28, r34
  Jump         L12
  Sum          r32, r43
  Move         r46, r9
  Move         r47, r38
  Move         r48, r39
  Move         r49, r41
  Move         r50, r42
  Move         r51, r32
  MakeMap      r19, 3, r46
  // from inv in inventory
  Append       r20, r4, r19
  Move         r4, r20
  AddInt       r36, r36, r34
  Jump         L13
  // var grouped: map<string, map<string, any>> = {}
  Const        r21, {}
  Move         r3, r21
  // for m in monthly {
  IterPrep     r18, r4
  Len          r23, r18
  Const        r26, 0
  LessInt      r24, r26, r23
  JumpIfFalse  r24, L5
  Index        r10, r18, r26
  Move         r30, r10
  // let key = str({w: m.w, i: m.i})
  Const        r31, "w"
  Index        r33, r30, r5
  Const        r35, "i"
  Index        r2, r30, r7
  Move         r46, r31
  Move         r47, r33
  Move         r48, r35
  Move         r49, r2
  MakeMap      r37, 2, r46
  Str          r16, r37
  // if key in grouped {
  In           r8, r16, r3
  JumpIfFalse  r8, L14
  // let g = grouped[key]
  Index        r27, r3, r16
  // grouped[key] = {w: g.w, i: g.i, qtys: append(g.qtys, m.qty)}
  Const        r11, "w"
  Index        r40, r27, r5
  Const        r17, "i"
  Index        r45, r27, r7
  Const        r29, "qtys"
  Const        r44, "qtys"
  Index        r14, r27, r44
  Index        r13, r30, r12
  Append       r6, r14, r13
  Move         r52, r11
  Move         r53, r40
  Move         r54, r17
  Move         r55, r45
  Move         r56, r29
  Move         r57, r6
  MakeMap      r28, 3, r52
  SetIndex     r3, r16, r28
  // if key in grouped {
  Jump         L1
  // grouped[key] = {w: m.w, i: m.i, qtys: [m.qty]}
  Const        r22, "w"
  Index        r43, r30, r5
  Const        r9, "i"
  Index        r38, r30, r7
  Const        r39, "qtys"
  Index        r41, r30, r12
  Move         r42, r41
  MakeList     r32, 1, r42
  Move         r58, r22
  Move         r59, r43
  Move         r60, r9
  Move         r61, r38
  Move         r62, r39
  Move         r63, r32
  MakeMap      r34, 3, r58
  SetIndex     r3, r16, r34
  // for m in monthly {
  Const        r36, 1
  AddInt       r50, r26, r36
  Move         r26, r50
  Jump         L15
  // var summary = []
  Move         r51, r15
  // for g in values(grouped) {
  Const        r19, []
  IterPrep     r20, r19
  Len          r21, r20
  Const        r4, 0
  LessInt      r23, r4, r21
  JumpIfFalse  r23, L16
  Index        r24, r20, r4
  Move         r1, r24
  // let mean = avg(g.qtys)
  Index        r18, r1, r44
  Avg          r10, r18
  // var sumsq = 0.0
  Const        r31, 0.0
  Move         r33, r31
  // for q in g.qtys {
  Index        r35, r1, r44
  IterPrep     r2, r35
  Len          r46, r2
  Const        r47, 0
L18:
  LessInt      r48, r47, r46
  JumpIfFalse  r48, L17
  Index        r49, r2, r47
  Move         r37, r49
  // sumsq = sumsq + (q - mean) * (q - mean)
  SubFloat     r8, r37, r10
  SubFloat     r27, r37, r10
  MulFloat     r14, r8, r27
  AddFloat     r13, r33, r14
  Move         r33, r13
  // for q in g.qtys {
  Const        r11, 1
  AddInt       r40, r47, r11
  Move         r47, r40
  Jump         L18
L17:
  // let variance = sumsq / len(g.qtys)
  Index        r17, r1, r44
  Len          r45, r17
  DivFloat     r29, r33, r45
  // let cov = sqrt(variance) / mean
  Move         r6, r29
  Call         r28, sqrt, r6
  DivFloat     r12, r28, r10
  // if cov > 1.5 {
  Const        r30, 1.5
  LessFloat    r41, r30, r12
  JumpIfFalse  r41, L19
  // summary = append(summary, {w_warehouse_sk: g.w, i_item_sk: g.i, cov: cov})
  Const        r25, "w_warehouse_sk"
  Index        r42, r1, r5
  Const        r22, "i_item_sk"
  Index        r43, r1, r7
  Const        r9, "cov"
  Move         r58, r25
  Move         r59, r42
  Move         r60, r22
  Move         r61, r43
  Move         r62, r9
  Move         r63, r12
  MakeMap      r38, 3, r58
  Append       r39, r51, r38
  Move         r51, r39
L19:
  // for g in values(grouped) {
  Const        r32, 1
  AddInt       r3, r4, r32
  Move         r4, r3
  Jump         L20
L16:
  // json(summary)
  JSON         r51
  // expect summary == [{w_warehouse_sk: 1, i_item_sk: 1, cov: 1.5396007178390022}]
  Const        r16, [{"cov": 1.539600717839002, "i_item_sk": 1, "w_warehouse_sk": 1}]
  Equal        r34, r51, r16
  Expect       r34
  Return       r0

  // fun sqrt(x: float): float {
func sqrt (regs=6)
  // let guess = x / 2.0
  Const        r1, 2.0
  DivFloat     r2, r0, r1
  // var result = guess
  Move         r3, r2
  // for i in 0..5 {
  Const        r2, 0
  Const        r4, 5
L1:
  Move         r5, r2
  LessInt      r2, r5, r4
  JumpIfFalse  r2, L0
  // result = (result + x / result) / 2.0
  DivFloat     r4, r0, r3
  AddFloat     r2, r3, r4
  DivFloat     r4, r2, r1
  Move         r3, r4
  // for i in 0..5 {
  Const        r1, 1
  AddInt       r2, r5, r1
  Move         r5, r2
  Jump         L1
L0:
  // return result
  Return       r3
