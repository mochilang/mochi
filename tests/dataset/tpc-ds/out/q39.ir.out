func main (regs=351)
  // let inventory = [
  Const        r0, [{"inv_date_sk": 1, "inv_item_sk": 1, "inv_quantity_on_hand": 10, "inv_warehouse_sk": 1}, {"inv_date_sk": 2, "inv_item_sk": 1, "inv_quantity_on_hand": 10, "inv_warehouse_sk": 1}, {"inv_date_sk": 3, "inv_item_sk": 1, "inv_quantity_on_hand": 250, "inv_warehouse_sk": 1}]
  // let item = [
  Const        r1, [{"i_item_sk": 1}]
  // let warehouse = [
  Const        r2, [{"w_warehouse_name": "W1", "w_warehouse_sk": 1}]
  // let date_dim = [
  Const        r3, [{"d_date_sk": 1, "d_moy": 1, "d_year": 2000}, {"d_date_sk": 2, "d_moy": 2, "d_year": 2000}, {"d_date_sk": 3, "d_moy": 3, "d_year": 2000}]
  // from inv in inventory
  Const        r4, []
  // where d.d_year == 2000
  Const        r5, "d_year"
  // select {w: w.w_warehouse_sk, i: i.i_item_sk, month: d.d_moy, qty: inv.inv_quantity_on_hand}
  Const        r6, "w"
  Const        r7, "w_warehouse_sk"
  Const        r8, "i"
  Const        r9, "i_item_sk"
  Const        r10, "month"
  Const        r11, "d_moy"
  Const        r12, "qty"
  Const        r13, "inv_quantity_on_hand"
  // from inv in inventory
  IterPrep     r14, r0
  Len          r15, r14
  Const        r16, 0
L8:
  LessInt      r18, r16, r15
  JumpIfFalse  r18, L0
  Index        r20, r14, r16
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  IterPrep     r21, r3
  Len          r22, r21
  Const        r23, "inv_date_sk"
  Const        r24, "d_date_sk"
  // where d.d_year == 2000
  Const        r25, "d_year"
  // select {w: w.w_warehouse_sk, i: i.i_item_sk, month: d.d_moy, qty: inv.inv_quantity_on_hand}
  Const        r26, "w"
  Const        r27, "w_warehouse_sk"
  Const        r28, "i"
  Const        r29, "i_item_sk"
  Const        r30, "month"
  Const        r31, "d_moy"
  Const        r32, "qty"
  Const        r33, "inv_quantity_on_hand"
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  Const        r34, 0
L7:
  LessInt      r36, r34, r22
  JumpIfFalse  r36, L1
  Index        r38, r21, r34
  Const        r39, "inv_date_sk"
  Index        r40, r20, r39
  Const        r41, "d_date_sk"
  Index        r42, r38, r41
  Equal        r43, r40, r42
  JumpIfFalse  r43, L2
  // join i in item on inv.inv_item_sk == i.i_item_sk
  IterPrep     r44, r1
  Len          r45, r44
  Const        r46, "inv_item_sk"
  Const        r47, "i_item_sk"
  // where d.d_year == 2000
  Const        r48, "d_year"
  // select {w: w.w_warehouse_sk, i: i.i_item_sk, month: d.d_moy, qty: inv.inv_quantity_on_hand}
  Const        r49, "w"
  Const        r50, "w_warehouse_sk"
  Const        r51, "i"
  Const        r52, "i_item_sk"
  Const        r53, "month"
  Const        r54, "d_moy"
  Const        r55, "qty"
  Const        r56, "inv_quantity_on_hand"
  // join i in item on inv.inv_item_sk == i.i_item_sk
  Const        r57, 0
L6:
  LessInt      r59, r57, r45
  JumpIfFalse  r59, L2
  Index        r61, r44, r57
  Const        r62, "inv_item_sk"
  Index        r63, r20, r62
  Const        r64, "i_item_sk"
  Index        r65, r61, r64
  Equal        r66, r63, r65
  JumpIfFalse  r66, L3
  // join w in warehouse on inv.inv_warehouse_sk == w.w_warehouse_sk
  IterPrep     r67, r2
  Len          r68, r67
  Const        r69, "inv_warehouse_sk"
  Const        r70, "w_warehouse_sk"
  // where d.d_year == 2000
  Const        r71, "d_year"
  // select {w: w.w_warehouse_sk, i: i.i_item_sk, month: d.d_moy, qty: inv.inv_quantity_on_hand}
  Const        r72, "w"
  Const        r73, "w_warehouse_sk"
  Const        r74, "i"
  Const        r75, "i_item_sk"
  Const        r76, "month"
  Const        r77, "d_moy"
  Const        r78, "qty"
  Const        r79, "inv_quantity_on_hand"
  // join w in warehouse on inv.inv_warehouse_sk == w.w_warehouse_sk
  Const        r80, 0
L5:
  LessInt      r82, r80, r68
  JumpIfFalse  r82, L3
  Index        r84, r67, r80
  Const        r85, "inv_warehouse_sk"
  Index        r86, r20, r85
  Const        r87, "w_warehouse_sk"
  Index        r88, r84, r87
  Equal        r89, r86, r88
  JumpIfFalse  r89, L4
  // where d.d_year == 2000
  Const        r90, "d_year"
  Index        r91, r38, r90
  Const        r92, 2000
  Equal        r93, r91, r92
  JumpIfFalse  r93, L4
  // select {w: w.w_warehouse_sk, i: i.i_item_sk, month: d.d_moy, qty: inv.inv_quantity_on_hand}
  Const        r94, "w"
  Const        r95, "w_warehouse_sk"
  Index        r96, r84, r95
  Const        r97, "i"
  Const        r98, "i_item_sk"
  Index        r99, r61, r98
  Const        r100, "month"
  Const        r101, "d_moy"
  Index        r102, r38, r101
  Const        r103, "qty"
  Const        r104, "inv_quantity_on_hand"
  Index        r105, r20, r104
  Move         r106, r94
  Move         r107, r96
  Move         r108, r97
  Move         r109, r99
  Move         r110, r100
  Move         r111, r102
  Move         r112, r103
  Move         r113, r105
  MakeMap      r114, 4, r106
  // from inv in inventory
  Append       r4, r4, r114
L4:
  // join w in warehouse on inv.inv_warehouse_sk == w.w_warehouse_sk
  Const        r116, 1
  Add          r80, r80, r116
  Jump         L5
L3:
  // join i in item on inv.inv_item_sk == i.i_item_sk
  Const        r117, 1
  Add          r57, r57, r117
  Jump         L6
L2:
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  Const        r118, 1
  Add          r34, r34, r118
  Jump         L7
L1:
  // from inv in inventory
  Const        r119, 1
  AddInt       r16, r16, r119
  Jump         L8
L0:
  // from m in monthly_rows
  Const        r120, []
  // group by {w: m.w, i: m.i, month: m.month} into g
  Const        r121, "w"
  Const        r122, "w"
  Const        r123, "i"
  Const        r124, "i"
  Const        r125, "month"
  Const        r126, "month"
  // select {w: g.key.w, i: g.key.i, qty: sum(from x in g select x.qty)}
  Const        r127, "w"
  Const        r128, "key"
  Const        r129, "w"
  Const        r130, "i"
  Const        r131, "key"
  Const        r132, "i"
  Const        r133, "qty"
  Const        r134, "qty"
  // from m in monthly_rows
  IterPrep     r135, r4
  Len          r136, r135
  Const        r137, 0
  MakeMap      r138, 0, r0
  Const        r139, []
L11:
  LessInt      r141, r137, r136
  JumpIfFalse  r141, L9
  Index        r142, r135, r137
  Move         r143, r142
  // group by {w: m.w, i: m.i, month: m.month} into g
  Const        r144, "w"
  Const        r145, "w"
  Index        r146, r143, r145
  Const        r147, "i"
  Const        r148, "i"
  Index        r149, r143, r148
  Const        r150, "month"
  Const        r151, "month"
  Index        r152, r143, r151
  Move         r153, r144
  Move         r154, r146
  Move         r155, r147
  Move         r156, r149
  Move         r157, r150
  Move         r158, r152
  MakeMap      r159, 3, r153
  Str          r160, r159
  In           r161, r160, r138
  JumpIfTrue   r161, L10
  // from m in monthly_rows
  Const        r162, []
  Const        r163, "__group__"
  Const        r164, true
  Const        r165, "key"
  // group by {w: m.w, i: m.i, month: m.month} into g
  Move         r166, r159
  // from m in monthly_rows
  Const        r167, "items"
  Move         r168, r162
  Const        r169, "count"
  Const        r170, 0
  Move         r171, r163
  Move         r172, r164
  Move         r173, r165
  Move         r174, r166
  Move         r175, r167
  Move         r176, r168
  Move         r177, r169
  Move         r178, r170
  MakeMap      r179, 4, r171
  SetIndex     r138, r160, r179
  Append       r139, r139, r179
L10:
  Const        r181, "items"
  Index        r182, r138, r160
  Index        r183, r182, r181
  Append       r184, r183, r142
  SetIndex     r182, r181, r184
  Const        r185, "count"
  Index        r186, r182, r185
  Const        r187, 1
  AddInt       r188, r186, r187
  SetIndex     r182, r185, r188
  Const        r189, 1
  AddInt       r137, r137, r189
  Jump         L11
L9:
  Const        r190, 0
  Len          r192, r139
L15:
  LessInt      r193, r190, r192
  JumpIfFalse  r193, L12
  Index        r195, r139, r190
  // select {w: g.key.w, i: g.key.i, qty: sum(from x in g select x.qty)}
  Const        r196, "w"
  Const        r197, "key"
  Index        r198, r195, r197
  Const        r199, "w"
  Index        r200, r198, r199
  Const        r201, "i"
  Const        r202, "key"
  Index        r203, r195, r202
  Const        r204, "i"
  Index        r205, r203, r204
  Const        r206, "qty"
  Const        r207, []
  Const        r208, "qty"
  IterPrep     r209, r195
  Len          r210, r209
  Const        r211, 0
L14:
  LessInt      r213, r211, r210
  JumpIfFalse  r213, L13
  Index        r215, r209, r211
  Const        r216, "qty"
  Index        r217, r215, r216
  Append       r207, r207, r217
  Const        r219, 1
  AddInt       r211, r211, r219
  Jump         L14
L13:
  Sum          r220, r207
  Move         r221, r196
  Move         r222, r200
  Move         r223, r201
  Move         r224, r205
  Move         r225, r206
  Move         r226, r220
  MakeMap      r227, 3, r221
  // from m in monthly_rows
  Append       r120, r120, r227
  Const        r229, 1
  AddInt       r190, r190, r229
  Jump         L15
L12:
  // var index: map<string, int> = {}
  Const        r231, {}
  // var groups = []
  Const        r233, []
  // for m in monthly {
  IterPrep     r234, r120
  Len          r235, r234
  Const        r236, 0
L19:
  Less         r237, r236, r235
  JumpIfFalse  r237, L16
  Index        r143, r234, r236
  // let key = str({w: m.w, i: m.i})
  Const        r239, "w"
  Const        r240, "w"
  Index        r241, r143, r240
  Const        r242, "i"
  Const        r243, "i"
  Index        r244, r143, r243
  Move         r245, r239
  Move         r246, r241
  Move         r247, r242
  Move         r248, r244
  MakeMap      r249, 2, r245
  Str          r250, r249
  // if key in index {
  In           r251, r250, r231
  JumpIfFalse  r251, L17
  // let idx = index[key]
  Index        r252, r231, r250
  // let g = groups[idx]
  Index        r253, r233, r252
  // groups[idx] = {w: g.w, i: g.i, qtys: append(g.qtys, m.qty)}
  Const        r254, "w"
  Const        r255, "w"
  Index        r256, r253, r255
  Const        r257, "i"
  Const        r258, "i"
  Index        r259, r253, r258
  Const        r260, "qtys"
  Const        r261, "qtys"
  Index        r262, r253, r261
  Const        r263, "qty"
  Index        r264, r143, r263
  Append       r265, r262, r264
  Move         r266, r254
  Move         r267, r256
  Move         r268, r257
  Move         r269, r259
  Move         r270, r260
  Move         r271, r265
  MakeMap      r272, 3, r266
  SetIndex     r233, r252, r272
  // if key in index {
  Jump         L18
L17:
  // index[key] = len(groups)
  Len          r273, r233
  SetIndex     r231, r250, r273
  // groups = append(groups, {w: m.w, i: m.i, qtys: [m.qty]})
  Const        r274, "w"
  Const        r275, "w"
  Index        r276, r143, r275
  Const        r277, "i"
  Const        r278, "i"
  Index        r279, r143, r278
  Const        r280, "qtys"
  Const        r281, "qty"
  Index        r283, r143, r281
  MakeList     r284, 1, r283
  Move         r285, r274
  Move         r286, r276
  Move         r287, r277
  Move         r288, r279
  Move         r289, r280
  Move         r290, r284
  MakeMap      r291, 3, r285
  Append       r233, r233, r291
L18:
  // for m in monthly {
  Const        r293, 1
  Add          r236, r236, r293
  Jump         L19
L16:
  // var summary = []
  Const        r296, []
  // for g in groups {
  IterPrep     r297, r233
  Len          r298, r297
  Const        r299, 0
L24:
  Less         r300, r299, r298
  JumpIfFalse  r300, L20
  Index        r195, r297, r299
  // let mean = avg(g.qtys)
  Const        r302, "qtys"
  Index        r303, r195, r302
  Avg          r304, r303
  // var sumsq = 0.0
  Const        r306, 0
  // for q in g.qtys {
  Const        r307, "qtys"
  Index        r308, r195, r307
  IterPrep     r309, r308
  Len          r310, r309
  Const        r311, 0
L22:
  Less         r312, r311, r310
  JumpIfFalse  r312, L21
  Index        r314, r309, r311
  // sumsq = sumsq + (q - mean) * (q - mean)
  SubFloat     r315, r314, r304
  SubFloat     r316, r314, r304
  MulFloat     r317, r315, r316
  AddFloat     r306, r306, r317
  // for q in g.qtys {
  Const        r319, 1
  Add          r311, r311, r319
  Jump         L22
L21:
  // let variance = sumsq / (len(g.qtys) - 1)
  Const        r321, "qtys"
  Index        r322, r195, r321
  Len          r323, r322
  Const        r324, 1
  SubInt       r325, r323, r324
  DivFloat     r327, r306, r325
  // let cov = sqrt(variance) / mean
  Call         r328, sqrt, r327
  DivFloat     r329, r328, r304
  // if cov > 1.5 {
  Const        r330, 1.5
  LessFloat    r331, r330, r329
  JumpIfFalse  r331, L23
  // summary = append(summary, {w_warehouse_sk: g.w, i_item_sk: g.i, cov: cov})
  Const        r332, "w_warehouse_sk"
  Const        r333, "w"
  Index        r334, r195, r333
  Const        r335, "i_item_sk"
  Const        r336, "i"
  Index        r337, r195, r336
  Const        r338, "cov"
  Move         r339, r332
  Move         r340, r334
  Move         r341, r335
  Move         r342, r337
  Move         r343, r338
  Move         r344, r329
  MakeMap      r345, 3, r339
  Append       r296, r296, r345
L23:
  // for g in groups {
  Const        r347, 1
  Add          r299, r299, r347
  Jump         L24
L20:
  // json(summary)
  JSON         r296
  // expect summary == [{w_warehouse_sk: 1, i_item_sk: 1, cov: 1.5396018901626556}]
  Const        r349, [{"cov": 1.5396018901626556, "i_item_sk": 1, "w_warehouse_sk": 1}]
  Equal        r350, r296, r349
  Expect       r350
  Return       r0

  // fun sqrt(x: float): float {
func sqrt (regs=14)
  // let guess = x / 2.0
  Const        r1, 2
  DivFloat     r3, r0, r1
  // for i in 0..9 {
  Const        r4, 0
  Const        r5, 9
  Move         r6, r4
L1:
  Less         r7, r6, r5
  JumpIfFalse  r7, L0
  // result = (result + x / result) / 2.0
  DivFloat     r8, r0, r3
  AddFloat     r9, r3, r8
  Const        r10, 2
  DivFloat     r3, r9, r10
  // for i in 0..9 {
  Const        r12, 1
  Add          r6, r6, r12
  Jump         L1
L0:
  // return result
  Return       r3
