func main (regs=241)
  // let inventory = [
  Const        r0, [{"inv_date_sk": 1, "inv_item_sk": 1, "inv_quantity_on_hand": 10, "inv_warehouse_sk": 1}, {"inv_date_sk": 2, "inv_item_sk": 1, "inv_quantity_on_hand": 10, "inv_warehouse_sk": 1}, {"inv_date_sk": 3, "inv_item_sk": 1, "inv_quantity_on_hand": 250, "inv_warehouse_sk": 1}]
  // let item = [
  Const        r1, [{"i_item_sk": 1}]
  // let warehouse = [
  Const        r2, [{"w_warehouse_name": "W1", "w_warehouse_sk": 1}]
  // let date_dim = [
  Const        r3, [{"d_date_sk": 1, "d_moy": 1, "d_year": 2000}, {"d_date_sk": 2, "d_moy": 2, "d_year": 2000}, {"d_date_sk": 3, "d_moy": 3, "d_year": 2000}]
  // from inv in inventory
  Const        r4, []
  // group by {w: w.w_warehouse_sk, i: i.i_item_sk, month: d.d_moy} into g
  Const        r5, "w"
  Const        r6, "w_warehouse_sk"
  Const        r7, "i"
  Const        r8, "i_item_sk"
  Const        r9, "month"
  Const        r10, "d_moy"
  // where d.d_year == 2000
  Const        r11, "d_year"
  // select {w: g.key.w, i: g.key.i, qty: sum(from x in g select x.inv_quantity_on_hand)}
  Const        r12, "key"
  Const        r13, "qty"
  Const        r14, "inv_quantity_on_hand"
  // from inv in inventory
  MakeMap      r15, 0, r0
  Const        r16, []
  IterPrep     r18, r0
  Len          r19, r18
  Const        r20, 0
L9:
  LessInt      r21, r20, r19
  JumpIfFalse  r21, L0
  Index        r23, r18, r20
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  IterPrep     r24, r3
  Len          r25, r24
  Const        r26, 0
L8:
  LessInt      r27, r26, r25
  JumpIfFalse  r27, L1
  Index        r29, r24, r26
  Const        r30, "inv_date_sk"
  Index        r31, r23, r30
  Const        r32, "d_date_sk"
  Index        r33, r29, r32
  Equal        r34, r31, r33
  JumpIfFalse  r34, L2
  // join i in item on inv.inv_item_sk == i.i_item_sk
  IterPrep     r35, r1
  Len          r36, r35
  Const        r37, 0
L7:
  LessInt      r38, r37, r36
  JumpIfFalse  r38, L2
  Index        r40, r35, r37
  Const        r41, "inv_item_sk"
  Index        r42, r23, r41
  Index        r43, r40, r8
  Equal        r44, r42, r43
  JumpIfFalse  r44, L3
  // join w in warehouse on inv.inv_warehouse_sk == w.w_warehouse_sk
  IterPrep     r45, r2
  Len          r46, r45
  Const        r47, 0
L6:
  LessInt      r48, r47, r46
  JumpIfFalse  r48, L3
  Index        r50, r45, r47
  Const        r51, "inv_warehouse_sk"
  Index        r52, r23, r51
  Index        r53, r50, r6
  Equal        r54, r52, r53
  JumpIfFalse  r54, L4
  // where d.d_year == 2000
  Index        r55, r29, r11
  Const        r56, 2000
  Equal        r57, r55, r56
  JumpIfFalse  r57, L4
  // from inv in inventory
  Const        r58, "inv"
  Move         r59, r23
  Const        r60, "d"
  Move         r61, r29
  Move         r62, r40
  Move         r63, r50
  MakeMap      r64, 4, r58
  // group by {w: w.w_warehouse_sk, i: i.i_item_sk, month: d.d_moy} into g
  Const        r65, "w"
  Index        r66, r50, r6
  Const        r67, "i"
  Index        r68, r40, r8
  Const        r69, "month"
  Index        r70, r29, r10
  Move         r71, r65
  Move         r72, r66
  Move         r73, r67
  Move         r74, r68
  Move         r75, r69
  Move         r76, r70
  MakeMap      r77, 3, r71
  Str          r78, r77
  In           r79, r78, r15
  JumpIfTrue   r79, L5
  // from inv in inventory
  Const        r80, []
  Const        r81, "__group__"
  Const        r82, true
  Const        r83, "key"
  // group by {w: w.w_warehouse_sk, i: i.i_item_sk, month: d.d_moy} into g
  Move         r84, r77
  // from inv in inventory
  Const        r85, "items"
  Move         r86, r80
  Const        r87, "count"
  Const        r88, 0
  Move         r89, r81
  Move         r90, r82
  Move         r91, r83
  Move         r92, r84
  Move         r93, r85
  Move         r94, r86
  Move         r95, r87
  Move         r96, r88
  MakeMap      r97, 4, r89
  SetIndex     r15, r78, r97
  Append       r16, r16, r97
L5:
  Const        r99, "items"
  Index        r100, r15, r78
  Index        r101, r100, r99
  Append       r102, r101, r64
  SetIndex     r100, r99, r102
  Const        r103, "count"
  Index        r104, r100, r103
  Const        r105, 1
  AddInt       r106, r104, r105
  SetIndex     r100, r103, r106
L4:
  // join w in warehouse on inv.inv_warehouse_sk == w.w_warehouse_sk
  AddInt       r47, r47, r105
  Jump         L6
L3:
  // join i in item on inv.inv_item_sk == i.i_item_sk
  AddInt       r37, r37, r105
  Jump         L7
L2:
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  AddInt       r26, r26, r105
  Jump         L8
L1:
  // from inv in inventory
  AddInt       r20, r20, r105
  Jump         L9
L0:
  Const        r108, 0
  Move         r107, r108
  Len          r109, r16
L13:
  LessInt      r110, r107, r109
  JumpIfFalse  r110, L10
  Index        r112, r16, r107
  // select {w: g.key.w, i: g.key.i, qty: sum(from x in g select x.inv_quantity_on_hand)}
  Const        r113, "w"
  Index        r114, r112, r12
  Index        r115, r114, r5
  Const        r116, "i"
  Index        r117, r112, r12
  Index        r118, r117, r7
  Const        r119, "qty"
  Const        r120, []
  IterPrep     r121, r112
  Len          r122, r121
  Move         r123, r108
L12:
  LessInt      r124, r123, r122
  JumpIfFalse  r124, L11
  Index        r126, r121, r123
  Index        r127, r126, r14
  Append       r120, r120, r127
  AddInt       r123, r123, r105
  Jump         L12
L11:
  Sum          r129, r120
  Move         r130, r113
  Move         r131, r115
  Move         r132, r116
  Move         r133, r118
  Move         r134, r119
  Move         r135, r129
  MakeMap      r136, 3, r130
  // from inv in inventory
  Append       r4, r4, r136
  AddInt       r107, r107, r105
  Jump         L13
L10:
  // var grouped: map<string, map<string, any>> = {}
  Const        r139, {}
  // for m in monthly {
  IterPrep     r140, r4
  Len          r141, r140
  Const        r142, 0
L17:
  Less         r143, r142, r141
  JumpIfFalse  r143, L14
  Index        r145, r140, r142
  // let key = str({w: m.w, i: m.i})
  Const        r146, "w"
  Index        r147, r145, r5
  Const        r148, "i"
  Index        r149, r145, r7
  Move         r150, r146
  Move         r151, r147
  Move         r152, r148
  Move         r153, r149
  MakeMap      r154, 2, r150
  Str          r155, r154
  // if key in grouped {
  In           r156, r155, r139
  JumpIfFalse  r156, L15
  // let g = grouped[key]
  Index        r157, r139, r155
  // grouped[key] = {w: g.w, i: g.i, qtys: append(g.qtys, m.qty)}
  Const        r158, "w"
  Index        r159, r157, r5
  Const        r160, "i"
  Index        r161, r157, r7
  Const        r162, "qtys"
  Const        r163, "qtys"
  Index        r164, r157, r163
  Index        r165, r145, r13
  Append       r166, r164, r165
  Move         r167, r158
  Move         r168, r159
  Move         r169, r160
  Move         r170, r161
  Move         r171, r162
  Move         r172, r166
  MakeMap      r173, 3, r167
  SetIndex     r139, r155, r173
  // if key in grouped {
  Jump         L16
L15:
  // grouped[key] = {w: m.w, i: m.i, qtys: [m.qty]}
  Const        r174, "w"
  Index        r175, r145, r5
  Const        r176, "i"
  Index        r177, r145, r7
  Const        r178, "qtys"
  Index        r180, r145, r13
  MakeList     r181, 1, r180
  Move         r182, r174
  Move         r183, r175
  Move         r184, r176
  Move         r185, r177
  Move         r186, r178
  Move         r187, r181
  MakeMap      r188, 3, r182
  SetIndex     r139, r155, r188
L16:
  // for m in monthly {
  Const        r189, 1
  Add          r142, r142, r189
  Jump         L17
L14:
  // var summary = []
  Const        r192, []
  // for g in values(grouped) {
  Const        r193, []
  IterPrep     r194, r193
  Len          r195, r194
  Const        r196, 0
L22:
  Less         r197, r196, r195
  JumpIfFalse  r197, L18
  Index        r112, r194, r196
  // let mean = avg(g.qtys)
  Index        r199, r112, r163
  Avg          r200, r199
  // var sumsq = 0.0
  Const        r202, 0
  // for q in g.qtys {
  Index        r203, r112, r163
  IterPrep     r204, r203
  Len          r205, r204
  Const        r206, 0
L20:
  Less         r207, r206, r205
  JumpIfFalse  r207, L19
  Index        r209, r204, r206
  // sumsq = sumsq + (q - mean) * (q - mean)
  SubFloat     r210, r209, r200
  SubFloat     r211, r209, r200
  MulFloat     r212, r210, r211
  AddFloat     r202, r202, r212
  // for q in g.qtys {
  Const        r214, 1
  Add          r206, r206, r214
  Jump         L20
L19:
  // let variance = sumsq / len(g.qtys)
  Index        r216, r112, r163
  Len          r217, r216
  DivFloat     r219, r202, r217
  // let cov = sqrt(variance) / mean
  Call         r220, sqrt, r219
  DivFloat     r221, r220, r200
  // if cov > 1.5 {
  Const        r222, 1.5
  LessFloat    r223, r222, r221
  JumpIfFalse  r223, L21
  // summary = append(summary, {w_warehouse_sk: g.w, i_item_sk: g.i, cov: cov})
  Const        r224, "w_warehouse_sk"
  Index        r225, r112, r5
  Const        r226, "i_item_sk"
  Index        r227, r112, r7
  Const        r228, "cov"
  Move         r229, r224
  Move         r230, r225
  Move         r231, r226
  Move         r232, r227
  Move         r233, r228
  Move         r234, r221
  MakeMap      r235, 3, r229
  Append       r192, r192, r235
L21:
  // for g in values(grouped) {
  Const        r237, 1
  Add          r196, r196, r237
  Jump         L22
L18:
  // json(summary)
  JSON         r192
  // expect summary == [{w_warehouse_sk: 1, i_item_sk: 1, cov: 1.5396007178390022}]
  Const        r239, [{"cov": 1.539600717839002, "i_item_sk": 1, "w_warehouse_sk": 1}]
  Equal        r240, r192, r239
  Expect       r240
  Return       r0

  // fun sqrt(x: float): float {
func sqrt (regs=13)
  // let guess = x / 2.0
  Const        r1, 2
  DivFloat     r3, r0, r1
  // for i in 0..5 {
  Const        r4, 0
  Const        r5, 5
  Move         r6, r4
L1:
  Less         r7, r6, r5
  JumpIfFalse  r7, L0
  // result = (result + x / result) / 2.0
  DivFloat     r8, r0, r3
  AddFloat     r9, r3, r8
  DivFloat     r3, r9, r1
  // for i in 0..5 {
  Const        r11, 1
  Add          r6, r6, r11
  Jump         L1
L0:
  // return result
  Return       r3
