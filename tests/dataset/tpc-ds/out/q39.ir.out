func main (regs=280)
  // let inventory = [
  Const        r0, [{"inv_date_sk": 1, "inv_item_sk": 1, "inv_quantity_on_hand": 10, "inv_warehouse_sk": 1}, {"inv_date_sk": 2, "inv_item_sk": 1, "inv_quantity_on_hand": 10, "inv_warehouse_sk": 1}, {"inv_date_sk": 3, "inv_item_sk": 1, "inv_quantity_on_hand": 250, "inv_warehouse_sk": 1}]
  // let item = [
  Const        r1, [{"i_item_sk": 1}]
  // let warehouse = [
  Const        r2, [{"w_warehouse_name": "W1", "w_warehouse_sk": 1}]
  // let date_dim = [
  Const        r3, [{"d_date_sk": 1, "d_moy": 1, "d_year": 2000}, {"d_date_sk": 2, "d_moy": 2, "d_year": 2000}, {"d_date_sk": 3, "d_moy": 3, "d_year": 2000}]
  // from inv in inventory
  Const        r4, []
  MakeMap      r20, 0, r0
  Const        r21, []
  IterPrep     r23, r0
  Len          r24, r23
  Const        r25, 0
L1:
  LessInt      r26, r25, r24
  JumpIfFalse  r26, L0
  Index        r28, r23, r25
  // join d in date_dim on inv.inv_date_sk == d.d_date_sk
  IterPrep     r29, r3
  Len          r30, r29
  Const        r31, 0
L2:
  LessInt      r32, r31, r30
  JumpIfFalse  r32, L1
  Index        r34, r29, r31
  Const        r35, "inv_date_sk"
  Index        r36, r28, r35
  Const        r37, "d_date_sk"
  Index        r38, r34, r37
  Equal        r39, r36, r38
  JumpIfFalse  r39, L2
  // join i in item on inv.inv_item_sk == i.i_item_sk
  IterPrep     r40, r1
  Len          r41, r40
  Const        r42, 0
L7:
  LessInt      r43, r42, r41
  JumpIfFalse  r43, L2
  Index        r45, r40, r42
  Const        r46, "inv_item_sk"
  Index        r47, r28, r46
  Const        r48, "i_item_sk"
  Index        r49, r45, r48
  Equal        r50, r47, r49
  JumpIfFalse  r50, L3
  // join w in warehouse on inv.inv_warehouse_sk == w.w_warehouse_sk
  IterPrep     r51, r2
  Len          r52, r51
  Const        r53, 0
L6:
  LessInt      r54, r53, r52
  JumpIfFalse  r54, L3
  Index        r56, r51, r53
  Const        r57, "inv_warehouse_sk"
  Index        r58, r28, r57
  Const        r59, "w_warehouse_sk"
  Index        r60, r56, r59
  Equal        r61, r58, r60
  JumpIfFalse  r61, L4
  // where d.d_year == 2000
  Const        r62, "d_year"
  Index        r63, r34, r62
  Const        r64, 2000
  Equal        r65, r63, r64
  JumpIfFalse  r65, L4
  // from inv in inventory
  Const        r66, "inv"
  Move         r67, r28
  Const        r68, "d"
  Move         r69, r34
  Const        r70, "i"
  Move         r71, r45
  Const        r72, "w"
  Move         r73, r56
  MakeMap      r74, 4, r66
  // group by {w: w.w_warehouse_sk, i: i.i_item_sk, month: d.d_moy} into g
  Const        r75, "w"
  Const        r76, "w_warehouse_sk"
  Index        r77, r56, r76
  Const        r78, "i"
  Const        r79, "i_item_sk"
  Index        r80, r45, r79
  Const        r81, "month"
  Const        r82, "d_moy"
  Index        r83, r34, r82
  Move         r84, r75
  Move         r85, r77
  Move         r86, r78
  Move         r87, r80
  Move         r88, r81
  Move         r89, r83
  MakeMap      r90, 3, r84
  Str          r91, r90
  In           r92, r91, r20
  JumpIfTrue   r92, L5
  // from inv in inventory
  Const        r93, []
  Const        r94, "__group__"
  Const        r95, true
  Const        r96, "key"
  // group by {w: w.w_warehouse_sk, i: i.i_item_sk, month: d.d_moy} into g
  Move         r97, r90
  // from inv in inventory
  Const        r98, "items"
  Move         r99, r93
  Const        r100, "count"
  Const        r101, 0
  Move         r102, r94
  Move         r103, r95
  Move         r104, r96
  Move         r105, r97
  Move         r106, r98
  Move         r107, r99
  Move         r108, r100
  Move         r109, r101
  MakeMap      r110, 4, r102
  SetIndex     r20, r91, r110
  Append       r21, r21, r110
L5:
  Const        r112, "items"
  Index        r113, r20, r91
  Index        r114, r113, r112
  Append       r115, r114, r74
  SetIndex     r113, r112, r115
  Const        r116, "count"
  Index        r117, r113, r116
  Const        r118, 1
  AddInt       r119, r117, r118
  SetIndex     r113, r116, r119
L4:
  // join w in warehouse on inv.inv_warehouse_sk == w.w_warehouse_sk
  Const        r120, 1
  AddInt       r53, r53, r120
  Jump         L6
L3:
  // join i in item on inv.inv_item_sk == i.i_item_sk
  Const        r121, 1
  AddInt       r42, r42, r121
  Jump         L7
L0:
  // from inv in inventory
  Const        r124, 0
  Len          r126, r21
L11:
  LessInt      r127, r124, r126
  JumpIfFalse  r127, L8
  Index        r129, r21, r124
  // select {w: g.key.w, i: g.key.i, qty: sum(from x in g select x.inv_quantity_on_hand)}
  Const        r130, "w"
  Const        r131, "key"
  Index        r132, r129, r131
  Const        r133, "w"
  Index        r134, r132, r133
  Const        r135, "i"
  Const        r136, "key"
  Index        r137, r129, r136
  Const        r138, "i"
  Index        r139, r137, r138
  Const        r140, "qty"
  Const        r141, []
  IterPrep     r143, r129
  Len          r144, r143
  Const        r145, 0
L10:
  LessInt      r147, r145, r144
  JumpIfFalse  r147, L9
  Index        r149, r143, r145
  Const        r150, "inv_quantity_on_hand"
  Index        r151, r149, r150
  Append       r141, r141, r151
  Const        r153, 1
  AddInt       r145, r145, r153
  Jump         L10
L9:
  Sum          r154, r141
  Move         r155, r130
  Move         r156, r134
  Move         r157, r135
  Move         r158, r139
  Move         r159, r140
  Move         r160, r154
  MakeMap      r161, 3, r155
  // from inv in inventory
  Append       r4, r4, r161
  Jump         L11
L8:
  // var grouped: map<string, map<string, any>> = {}
  Const        r165, {}
  // for m in monthly {
  IterPrep     r166, r4
  Len          r167, r166
  Const        r168, 0
L15:
  Less         r169, r168, r167
  JumpIfFalse  r169, L12
  Index        r171, r166, r168
  // let key = str({w: m.w, i: m.i})
  Const        r172, "w"
  Const        r173, "w"
  Index        r174, r171, r173
  Const        r175, "i"
  Const        r176, "i"
  Index        r177, r171, r176
  Move         r178, r172
  Move         r179, r174
  Move         r180, r175
  Move         r181, r177
  MakeMap      r182, 2, r178
  Str          r183, r182
  // if key in grouped {
  In           r184, r183, r165
  JumpIfFalse  r184, L13
  // let g = grouped[key]
  Index        r185, r165, r183
  // grouped[key] = {w: g.w, i: g.i, qtys: append(g.qtys, m.qty)}
  Const        r186, "w"
  Const        r187, "w"
  Index        r188, r185, r187
  Const        r189, "i"
  Const        r190, "i"
  Index        r191, r185, r190
  Const        r192, "qtys"
  Const        r193, "qtys"
  Index        r194, r185, r193
  Const        r195, "qty"
  Index        r196, r171, r195
  Append       r197, r194, r196
  Move         r198, r186
  Move         r199, r188
  Move         r200, r189
  Move         r201, r191
  Move         r202, r192
  Move         r203, r197
  MakeMap      r204, 3, r198
  SetIndex     r165, r183, r204
  // if key in grouped {
  Jump         L14
L13:
  // grouped[key] = {w: m.w, i: m.i, qtys: [m.qty]}
  Const        r205, "w"
  Const        r206, "w"
  Index        r207, r171, r206
  Const        r208, "i"
  Const        r209, "i"
  Index        r210, r171, r209
  Const        r211, "qtys"
  Const        r212, "qty"
  Index        r214, r171, r212
  MakeList     r215, 1, r214
  Move         r216, r205
  Move         r217, r207
  Move         r218, r208
  Move         r219, r210
  Move         r220, r211
  Move         r221, r215
  MakeMap      r222, 3, r216
  SetIndex     r165, r183, r222
L14:
  // for m in monthly {
  Const        r223, 1
  Add          r168, r168, r223
  Jump         L15
L12:
  // var summary = []
  Const        r226, []
  // for g in values(grouped) {
  Const        r227, []
  IterPrep     r228, r227
  Len          r229, r228
  Const        r230, 0
L20:
  Less         r231, r230, r229
  JumpIfFalse  r231, L16
  Index        r129, r228, r230
  // let mean = avg(g.qtys)
  Const        r233, "qtys"
  Index        r234, r129, r233
  Avg          r235, r234
  // var sumsq = 0.0
  Const        r237, 0
  // for q in g.qtys {
  Const        r238, "qtys"
  Index        r239, r129, r238
  IterPrep     r240, r239
  Len          r241, r240
  Const        r242, 0
L18:
  Less         r243, r242, r241
  JumpIfFalse  r243, L17
  Index        r245, r240, r242
  // sumsq = sumsq + (q - mean) * (q - mean)
  SubFloat     r246, r245, r235
  SubFloat     r247, r245, r235
  MulFloat     r248, r246, r247
  AddFloat     r237, r237, r248
  // for q in g.qtys {
  Const        r250, 1
  Add          r242, r242, r250
  Jump         L18
L17:
  // let variance = sumsq / len(g.qtys)
  Const        r252, "qtys"
  Index        r253, r129, r252
  Len          r254, r253
  DivFloat     r256, r237, r254
  // let cov = sqrt(variance) / mean
  Call         r257, sqrt, r256
  DivFloat     r258, r257, r235
  // if cov > 1.5 {
  Const        r259, 1.5
  LessFloat    r260, r259, r258
  JumpIfFalse  r260, L19
L19:
  // for g in values(grouped) {
  Const        r276, 1
  Add          r230, r230, r276
  Jump         L20
L16:
  // json(summary)
  JSON         r226
  // expect summary == [{w_warehouse_sk: 1, i_item_sk: 1, cov: 1.5396007178390022}]
  Const        r278, [{"cov": 1.539600717839002, "i_item_sk": 1, "w_warehouse_sk": 1}]
  Equal        r279, r226, r278
  Expect       r279
  Return       r0

  // fun sqrt(x: float): float {
func sqrt (regs=14)
  // let guess = x / 2.0
  Const        r1, 2
  DivFloat     r3, r0, r1
  // for i in 0..5 {
  Const        r4, 0
  Const        r5, 5
  Move         r6, r4
L1:
  Less         r7, r6, r5
  JumpIfFalse  r7, L0
  // result = (result + x / result) / 2.0
  DivFloat     r8, r0, r3
  AddFloat     r9, r3, r8
  Const        r10, 2
  DivFloat     r3, r9, r10
  // for i in 0..5 {
  Const        r12, 1
  Add          r6, r6, r12
  Jump         L1
L0:
  // return result
  Return       r3
