func main (regs=180)
  // let store_sales = [
  Const        r0, [{"ext_sales_price": 10, "item_sk": 1, "sold_date_sk": 1}, {"ext_sales_price": 20, "item_sk": 2, "sold_date_sk": 1}, {"ext_sales_price": 15, "item_sk": 1, "sold_date_sk": 2}]
  // let item = [
  Const        r1, [{"i_category": "CatA", "i_category_id": 100, "i_item_sk": 1, "i_manager_id": 1}, {"i_category": "CatB", "i_category_id": 200, "i_item_sk": 2, "i_manager_id": 2}]
  // let date_dim = [
  Const        r2, [{"d_date_sk": 1, "d_moy": 5, "d_year": 2020}, {"d_date_sk": 2, "d_moy": 5, "d_year": 2021}]
  // let month = 5
  Const        r3, 5
  // let year = 2020
  Const        r4, 2020
  // from dt in date_dim
  Const        r5, []
  // where it.i_manager_id == 1 && dt.d_moy == month && dt.d_year == year
  Const        r6, "i_manager_id"
  Const        r7, "d_moy"
  Const        r8, "d_year"
  // select { d_year: dt.d_year, i_category_id: it.i_category_id, i_category: it.i_category, price: ss.ext_sales_price }
  Const        r9, "i_category_id"
  Const        r10, "i_category"
  Const        r11, "price"
  Const        r12, "ext_sales_price"
  // from dt in date_dim
  IterPrep     r13, r2
  Len          r14, r13
  Const        r16, 0
  Move         r15, r16
L8:
  LessInt      r17, r15, r14
  JumpIfFalse  r17, L0
  Index        r18, r13, r15
  Move         r19, r18
  // join ss in store_sales on ss.sold_date_sk == dt.d_date_sk
  IterPrep     r20, r0
  Len          r21, r20
  Const        r22, "sold_date_sk"
  Const        r23, "d_date_sk"
  Move         r24, r16
L7:
  LessInt      r25, r24, r21
  JumpIfFalse  r25, L1
  Index        r26, r20, r24
  Move         r27, r26
  Index        r28, r27, r22
  Index        r29, r19, r23
  Equal        r30, r28, r29
  JumpIfFalse  r30, L2
  // join it in item on ss.item_sk == it.i_item_sk
  IterPrep     r31, r1
  Len          r32, r31
  Const        r33, "item_sk"
  Const        r34, "i_item_sk"
  Move         r35, r16
L6:
  LessInt      r36, r35, r32
  JumpIfFalse  r36, L2
  Index        r37, r31, r35
  Move         r38, r37
  Index        r39, r27, r33
  Index        r40, r38, r34
  Equal        r41, r39, r40
  JumpIfFalse  r41, L3
  // where it.i_manager_id == 1 && dt.d_moy == month && dt.d_year == year
  Index        r42, r38, r6
  Const        r43, 1
  Equal        r44, r42, r43
  Index        r45, r19, r7
  Equal        r46, r45, r3
  Index        r47, r19, r8
  Equal        r48, r47, r4
  Move         r49, r44
  JumpIfFalse  r49, L4
  Move         r49, r46
L4:
  Move         r50, r49
  JumpIfFalse  r50, L5
  Move         r50, r48
L5:
  JumpIfFalse  r50, L3
  // select { d_year: dt.d_year, i_category_id: it.i_category_id, i_category: it.i_category, price: ss.ext_sales_price }
  Const        r51, "d_year"
  Index        r52, r19, r8
  Const        r53, "i_category_id"
  Index        r54, r38, r9
  Const        r55, "i_category"
  Index        r56, r38, r10
  Const        r57, "price"
  Index        r58, r27, r12
  Move         r59, r51
  Move         r60, r52
  Move         r61, r53
  Move         r62, r54
  Move         r63, r55
  Move         r64, r56
  Move         r65, r57
  Move         r66, r58
  MakeMap      r67, 4, r59
  // from dt in date_dim
  Append       r68, r5, r67
  Move         r5, r68
L3:
  // join it in item on ss.item_sk == it.i_item_sk
  Add          r35, r35, r43
  Jump         L6
L2:
  // join ss in store_sales on ss.sold_date_sk == dt.d_date_sk
  Add          r24, r24, r43
  Jump         L7
L1:
  // from dt in date_dim
  AddInt       r15, r15, r43
  Jump         L8
L0:
  // from r in records
  Const        r69, []
  // d_year: g.key.d_year,
  Const        r70, "key"
  // sum_ss_ext_sales_price: sum(from x in g select x.price)
  Const        r71, "sum_ss_ext_sales_price"
  // from r in records
  IterPrep     r72, r5
  Len          r73, r72
  Const        r74, 0
  MakeMap      r75, 0, r0
  Const        r77, []
  Move         r76, r77
L11:
  LessInt      r78, r74, r73
  JumpIfFalse  r78, L9
  Index        r79, r72, r74
  Move         r80, r79
  // group by { d_year: r.d_year, i_category_id: r.i_category_id, i_category: r.i_category } into g
  Const        r81, "d_year"
  Index        r82, r80, r8
  Const        r83, "i_category_id"
  Index        r84, r80, r9
  Const        r85, "i_category"
  Index        r86, r80, r10
  Move         r87, r81
  Move         r88, r82
  Move         r89, r83
  Move         r90, r84
  Move         r91, r85
  Move         r92, r86
  MakeMap      r93, 3, r87
  Str          r94, r93
  In           r95, r94, r75
  JumpIfTrue   r95, L10
  // from r in records
  Const        r96, []
  Const        r97, "__group__"
  Const        r98, true
  // group by { d_year: r.d_year, i_category_id: r.i_category_id, i_category: r.i_category } into g
  Move         r99, r93
  // from r in records
  Const        r100, "items"
  Move         r101, r96
  Const        r102, "count"
  Move         r103, r97
  Move         r104, r98
  Move         r105, r70
  Move         r106, r99
  Move         r107, r100
  Move         r108, r101
  Move         r109, r102
  Move         r110, r16
  MakeMap      r111, 4, r103
  SetIndex     r75, r94, r111
  Append       r112, r76, r111
  Move         r76, r112
L10:
  Index        r113, r75, r94
  Index        r114, r113, r100
  Append       r115, r114, r79
  SetIndex     r113, r100, r115
  Index        r116, r113, r102
  AddInt       r117, r116, r43
  SetIndex     r113, r102, r117
  AddInt       r74, r74, r43
  Jump         L11
L9:
  Move         r118, r16
  Len          r119, r76
L17:
  LessInt      r120, r118, r119
  JumpIfFalse  r120, L12
  Index        r121, r76, r118
  Move         r122, r121
  // d_year: g.key.d_year,
  Const        r123, "d_year"
  Index        r124, r122, r70
  Index        r125, r124, r8
  // i_category_id: g.key.i_category_id,
  Const        r126, "i_category_id"
  Index        r127, r122, r70
  Index        r128, r127, r9
  // i_category: g.key.i_category,
  Const        r129, "i_category"
  Index        r130, r122, r70
  Index        r131, r130, r10
  // sum_ss_ext_sales_price: sum(from x in g select x.price)
  Const        r132, "sum_ss_ext_sales_price"
  Const        r133, []
  IterPrep     r134, r122
  Len          r135, r134
  Move         r136, r16
L14:
  LessInt      r137, r136, r135
  JumpIfFalse  r137, L13
  Index        r138, r134, r136
  Move         r139, r138
  Index        r140, r139, r11
  Append       r141, r133, r140
  Move         r133, r141
  AddInt       r136, r136, r43
  Jump         L14
L13:
  Sum          r142, r133
  // d_year: g.key.d_year,
  Move         r143, r123
  Move         r144, r125
  // i_category_id: g.key.i_category_id,
  Move         r145, r126
  Move         r146, r128
  // i_category: g.key.i_category,
  Move         r147, r129
  Move         r148, r131
  // sum_ss_ext_sales_price: sum(from x in g select x.price)
  Move         r149, r132
  Move         r150, r142
  // select {
  MakeMap      r151, 4, r143
  // sort by [-sum(from x in g select x.price), g.key.d_year, g.key.i_category_id, g.key.i_category]
  Const        r152, []
  IterPrep     r153, r122
  Len          r154, r153
  Move         r155, r16
L16:
  LessInt      r156, r155, r154
  JumpIfFalse  r156, L15
  Index        r157, r153, r155
  Move         r139, r157
  Index        r158, r139, r11
  Append       r159, r152, r158
  Move         r152, r159
  AddInt       r155, r155, r43
  Jump         L16
L15:
  Sum          r160, r152
  Neg          r161, r160
  Move         r162, r161
  Index        r163, r122, r70
  Index        r164, r163, r8
  Move         r165, r164
  Index        r166, r122, r70
  Index        r167, r166, r9
  Move         r168, r167
  Index        r169, r122, r70
  Index        r170, r169, r10
  Move         r171, r170
  MakeList     r172, 4, r162
  Move         r173, r172
  // from r in records
  Move         r174, r151
  MakeList     r175, 2, r173
  Append       r176, r69, r175
  Move         r69, r176
  AddInt       r118, r118, r43
  Jump         L17
L12:
  // sort by [-sum(from x in g select x.price), g.key.d_year, g.key.i_category_id, g.key.i_category]
  Sort         r177, r69
  // from r in records
  Move         r69, r177
  // json(result)
  JSON         r69
  // expect result == [
  Const        r178, [{"d_year": 2020, "i_category": "CatB", "i_category_id": 200, "sum_ss_ext_sales_price": 20}, {"d_year": 2020, "i_category": "CatA", "i_category_id": 100, "sum_ss_ext_sales_price": 10}]
  Equal        r179, r69, r178
  Expect       r179
  Return       r0
