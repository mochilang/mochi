func main (regs=277)
  // let store_sales = [
  Const        r0, [{"ext_sales_price": 10, "item_sk": 1, "sold_date_sk": 1}, {"ext_sales_price": 20, "item_sk": 2, "sold_date_sk": 1}, {"ext_sales_price": 15, "item_sk": 1, "sold_date_sk": 2}]
  // let item = [
  Const        r1, [{"i_category": "CatA", "i_category_id": 100, "i_item_sk": 1, "i_manager_id": 1}, {"i_category": "CatB", "i_category_id": 200, "i_item_sk": 2, "i_manager_id": 2}]
  // let date_dim = [
  Const        r2, [{"d_date_sk": 1, "d_moy": 5, "d_year": 2020}, {"d_date_sk": 2, "d_moy": 5, "d_year": 2021}]
  // let month = 5
  Const        r3, 5
  // let year = 2020
  Const        r4, 2020
  // let dummy = null
  Const        r5, nil
  // from dt in date_dim
  Const        r6, []
  // where it.i_manager_id == 1 && dt.d_moy == month && dt.d_year == year
  Const        r7, "i_manager_id"
  Const        r8, "d_moy"
  Const        r9, "d_year"
  // select { d_year: dt.d_year, i_category_id: it.i_category_id, i_category: it.i_category, price: ss.ext_sales_price }
  Const        r10, "d_year"
  Const        r11, "d_year"
  Const        r12, "i_category_id"
  Const        r13, "i_category_id"
  Const        r14, "i_category"
  Const        r15, "i_category"
  Const        r16, "price"
  Const        r17, "ext_sales_price"
  // from dt in date_dim
  IterPrep     r18, r2
  Len          r19, r18
  Const        r20, 0
L8:
  LessInt      r22, r20, r19
  JumpIfFalse  r22, L0
  Index        r24, r18, r20
  // join ss in store_sales on ss.sold_date_sk == dt.d_date_sk
  IterPrep     r25, r0
  Len          r26, r25
  Const        r27, "sold_date_sk"
  Const        r28, "d_date_sk"
  // where it.i_manager_id == 1 && dt.d_moy == month && dt.d_year == year
  Const        r29, "i_manager_id"
  Const        r30, "d_moy"
  Const        r31, "d_year"
  // select { d_year: dt.d_year, i_category_id: it.i_category_id, i_category: it.i_category, price: ss.ext_sales_price }
  Const        r32, "d_year"
  Const        r33, "d_year"
  Const        r34, "i_category_id"
  Const        r35, "i_category_id"
  Const        r36, "i_category"
  Const        r37, "i_category"
  Const        r38, "price"
  Const        r39, "ext_sales_price"
  // join ss in store_sales on ss.sold_date_sk == dt.d_date_sk
  Const        r40, 0
L7:
  LessInt      r42, r40, r26
  JumpIfFalse  r42, L1
  Index        r44, r25, r40
  Const        r45, "sold_date_sk"
  Index        r46, r44, r45
  Const        r47, "d_date_sk"
  Index        r48, r24, r47
  Equal        r49, r46, r48
  JumpIfFalse  r49, L2
  // join it in item on ss.item_sk == it.i_item_sk
  IterPrep     r50, r1
  Len          r51, r50
  Const        r52, "item_sk"
  Const        r53, "i_item_sk"
  // where it.i_manager_id == 1 && dt.d_moy == month && dt.d_year == year
  Const        r54, "i_manager_id"
  Const        r55, "d_moy"
  Const        r56, "d_year"
  // select { d_year: dt.d_year, i_category_id: it.i_category_id, i_category: it.i_category, price: ss.ext_sales_price }
  Const        r57, "d_year"
  Const        r58, "d_year"
  Const        r59, "i_category_id"
  Const        r60, "i_category_id"
  Const        r61, "i_category"
  Const        r62, "i_category"
  Const        r63, "price"
  Const        r64, "ext_sales_price"
  // join it in item on ss.item_sk == it.i_item_sk
  Const        r65, 0
L6:
  LessInt      r67, r65, r51
  JumpIfFalse  r67, L2
  Index        r69, r50, r65
  Const        r70, "item_sk"
  Index        r71, r44, r70
  Const        r72, "i_item_sk"
  Index        r73, r69, r72
  Equal        r74, r71, r73
  JumpIfFalse  r74, L3
  // where it.i_manager_id == 1 && dt.d_moy == month && dt.d_year == year
  Const        r75, "i_manager_id"
  Index        r76, r69, r75
  Const        r77, 1
  Equal        r78, r76, r77
  Const        r79, "d_moy"
  Index        r80, r24, r79
  Equal        r81, r80, r3
  Const        r82, "d_year"
  Index        r83, r24, r82
  Equal        r84, r83, r4
  Move         r85, r78
  JumpIfFalse  r85, L4
L4:
  Move         r86, r81
  JumpIfFalse  r86, L5
  Move         r86, r84
L5:
  JumpIfFalse  r86, L3
  // select { d_year: dt.d_year, i_category_id: it.i_category_id, i_category: it.i_category, price: ss.ext_sales_price }
  Const        r87, "d_year"
  Const        r88, "d_year"
  Index        r89, r24, r88
  Const        r90, "i_category_id"
  Const        r91, "i_category_id"
  Index        r92, r69, r91
  Const        r93, "i_category"
  Const        r94, "i_category"
  Index        r95, r69, r94
  Const        r96, "price"
  Const        r97, "ext_sales_price"
  Index        r98, r44, r97
  Move         r99, r87
  Move         r100, r89
  Move         r101, r90
  Move         r102, r92
  Move         r103, r93
  Move         r104, r95
  Move         r105, r96
  Move         r106, r98
  MakeMap      r107, 4, r99
  // from dt in date_dim
  Append       r6, r6, r107
L3:
  // join it in item on ss.item_sk == it.i_item_sk
  Const        r109, 1
  Add          r65, r65, r109
  Jump         L6
L2:
  // join ss in store_sales on ss.sold_date_sk == dt.d_date_sk
  Const        r110, 1
  Add          r40, r40, r110
  Jump         L7
L1:
  // from dt in date_dim
  Const        r111, 1
  AddInt       r20, r20, r111
  Jump         L8
L0:
  // from r in records
  Const        r112, []
  // group by { d_year: r.d_year, i_category_id: r.i_category_id, i_category: r.i_category } into g
  Const        r113, "d_year"
  Const        r114, "d_year"
  Const        r115, "i_category_id"
  Const        r116, "i_category_id"
  Const        r117, "i_category"
  Const        r118, "i_category"
  // d_year: g.key.d_year,
  Const        r119, "d_year"
  Const        r120, "key"
  Const        r121, "d_year"
  // i_category_id: g.key.i_category_id,
  Const        r122, "i_category_id"
  Const        r123, "key"
  Const        r124, "i_category_id"
  // i_category: g.key.i_category,
  Const        r125, "i_category"
  Const        r126, "key"
  Const        r127, "i_category"
  // sum_ss_ext_sales_price: sum(from x in g select x.price)
  Const        r128, "sum_ss_ext_sales_price"
  Const        r129, "price"
  // sort by [-sum(from x in g select x.price), g.key.d_year, g.key.i_category_id, g.key.i_category]
  Const        r130, "price"
  Const        r131, "key"
  Const        r132, "d_year"
  Const        r133, "key"
  Const        r134, "i_category_id"
  Const        r135, "key"
  Const        r136, "i_category"
  // from r in records
  IterPrep     r137, r6
  Len          r138, r137
  Const        r139, 0
  MakeMap      r140, 0, r0
  Const        r141, []
L11:
  LessInt      r143, r139, r138
  JumpIfFalse  r143, L9
  Index        r144, r137, r139
  Move         r145, r144
  // group by { d_year: r.d_year, i_category_id: r.i_category_id, i_category: r.i_category } into g
  Const        r146, "d_year"
  Const        r147, "d_year"
  Index        r148, r145, r147
  Const        r149, "i_category_id"
  Const        r150, "i_category_id"
  Index        r151, r145, r150
  Const        r152, "i_category"
  Const        r153, "i_category"
  Index        r154, r145, r153
  Move         r155, r146
  Move         r156, r148
  Move         r157, r149
  Move         r158, r151
  Move         r159, r152
  Move         r160, r154
  MakeMap      r161, 3, r155
  Str          r162, r161
  In           r163, r162, r140
  JumpIfTrue   r163, L10
  // from r in records
  Const        r164, []
  Const        r165, "__group__"
  Const        r166, true
  Const        r167, "key"
  // group by { d_year: r.d_year, i_category_id: r.i_category_id, i_category: r.i_category } into g
  Move         r168, r161
  // from r in records
  Const        r169, "items"
  Move         r170, r164
  Const        r171, "count"
  Const        r172, 0
  Move         r173, r165
  Move         r174, r166
  Move         r175, r167
  Move         r176, r168
  Move         r177, r169
  Move         r178, r170
  Move         r179, r171
  Move         r180, r172
  MakeMap      r181, 4, r173
  SetIndex     r140, r162, r181
  Append       r141, r141, r181
L10:
  Const        r183, "items"
  Index        r184, r140, r162
  Index        r185, r184, r183
  Append       r186, r185, r144
  SetIndex     r184, r183, r186
  Const        r187, "count"
  Index        r188, r184, r187
  Const        r189, 1
  AddInt       r190, r188, r189
  SetIndex     r184, r187, r190
  Const        r191, 1
  AddInt       r139, r139, r191
  Jump         L11
L9:
  Const        r192, 0
  Len          r194, r141
L17:
  LessInt      r195, r192, r194
  JumpIfFalse  r195, L12
  Index        r197, r141, r192
  // d_year: g.key.d_year,
  Const        r198, "d_year"
  Const        r199, "key"
  Index        r200, r197, r199
  Const        r201, "d_year"
  Index        r202, r200, r201
  // i_category_id: g.key.i_category_id,
  Const        r203, "i_category_id"
  Const        r204, "key"
  Index        r205, r197, r204
  Const        r206, "i_category_id"
  Index        r207, r205, r206
  // i_category: g.key.i_category,
  Const        r208, "i_category"
  Const        r209, "key"
  Index        r210, r197, r209
  Const        r211, "i_category"
  Index        r212, r210, r211
  // sum_ss_ext_sales_price: sum(from x in g select x.price)
  Const        r213, "sum_ss_ext_sales_price"
  Const        r214, []
  Const        r215, "price"
  IterPrep     r216, r197
  Len          r217, r216
  Const        r218, 0
L14:
  LessInt      r220, r218, r217
  JumpIfFalse  r220, L13
  Index        r222, r216, r218
  Const        r223, "price"
  Index        r224, r222, r223
  Append       r214, r214, r224
  Const        r226, 1
  AddInt       r218, r218, r226
  Jump         L14
L13:
  Sum          r227, r214
  // d_year: g.key.d_year,
  Move         r228, r198
  Move         r229, r202
  // i_category_id: g.key.i_category_id,
  Move         r230, r203
  Move         r231, r207
  // i_category: g.key.i_category,
  Move         r232, r208
  Move         r233, r212
  // sum_ss_ext_sales_price: sum(from x in g select x.price)
  Move         r234, r213
  Move         r235, r227
  // select {
  MakeMap      r236, 4, r228
  // sort by [-sum(from x in g select x.price), g.key.d_year, g.key.i_category_id, g.key.i_category]
  Const        r237, []
  Const        r238, "price"
  IterPrep     r239, r197
  Len          r240, r239
  Const        r241, 0
L16:
  LessInt      r243, r241, r240
  JumpIfFalse  r243, L15
  Index        r222, r239, r241
  Const        r245, "price"
  Index        r246, r222, r245
  Append       r237, r237, r246
  Const        r248, 1
  AddInt       r241, r241, r248
  Jump         L16
L15:
  Sum          r249, r237
  Neg          r251, r249
  Const        r252, "key"
  Index        r253, r197, r252
  Const        r254, "d_year"
  Index        r256, r253, r254
  Const        r257, "key"
  Index        r258, r197, r257
  Const        r259, "i_category_id"
  Index        r261, r258, r259
  Const        r262, "key"
  Index        r263, r197, r262
  Const        r264, "i_category"
  Index        r266, r263, r264
  MakeList     r268, 4, r251
  // from r in records
  Move         r269, r236
  MakeList     r270, 2, r268
  Append       r112, r112, r270
  Const        r272, 1
  AddInt       r192, r192, r272
  Jump         L17
L12:
  // sort by [-sum(from x in g select x.price), g.key.d_year, g.key.i_category_id, g.key.i_category]
  Sort         r112, r112
  // let result = concat(dummy, base)
  UnionAll     r274, r5, r112
  // json(result)
  JSON         r274
  // expect result == [
  Const        r275, [{"d_year": 2020, "i_category": "CatB", "i_category_id": 200, "sum_ss_ext_sales_price": 20}, {"d_year": 2020, "i_category": "CatA", "i_category_id": 100, "sum_ss_ext_sales_price": 10}]
  Equal        r276, r274, r275
  Expect       r276
  Return       r0
