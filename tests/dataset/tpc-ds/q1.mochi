// Minimal schema for TPC-DS Q1
let store_returns = [
  { sr_returned_date_sk: 1, sr_customer_sk: 1, sr_store_sk: 10, sr_return_amt: 20.0 },
  { sr_returned_date_sk: 1, sr_customer_sk: 2, sr_store_sk: 10, sr_return_amt: 50.0 }
]
let date_dim = [ { d_date_sk: 1, d_year: 1998 } ]
let store = [ { s_store_sk: 10, s_state: "TN" } ]
let customer = [
  { c_customer_sk: 1, c_customer_id: "C1" },
  { c_customer_sk: 2, c_customer_id: "C2" }
]

let customer_total_return =
  from sr in store_returns
  join d in date_dim on sr.sr_returned_date_sk == d.d_date_sk && d.d_year == 1998
  group by {customer_sk: sr.sr_customer_sk, store_sk: sr.sr_store_sk} into g
  select {
    ctr_customer_sk: g.key.customer_sk,
    ctr_store_sk: g.key.store_sk,
    ctr_total_return: sum(from x in g select x.sr_return_amt)
  }

let result =
  from ctr1 in customer_total_return
  join s in store on ctr1.ctr_store_sk == s.s_store_sk
  join c in customer on ctr1.ctr_customer_sk == c.c_customer_sk
  where ctr1.ctr_total_return > avg(
          from ctr2 in customer_total_return
          where ctr1.ctr_store_sk == ctr2.ctr_store_sk
          select ctr2.ctr_total_return
        ) * 1.2 &&
        s.s_state == "TN"
  sort by c.c_customer_id
  select {c_customer_id: c.c_customer_id}

json(result)

test "TPCDS Q1 result" {
  expect result == [ { c_customer_id: "C2" } ]
}
