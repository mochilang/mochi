
fun sqrt(x: float): float {
  let guess = x / 2.0
  var result = guess
  for i in 0..9 {
    result = (result + x / result) / 2.0
  }
  return result
}

let inventory = [
  {inv_item_sk: 1, inv_warehouse_sk: 1, inv_date_sk: 1, inv_quantity_on_hand: 10},
  {inv_item_sk: 1, inv_warehouse_sk: 1, inv_date_sk: 2, inv_quantity_on_hand: 10},
  {inv_item_sk: 1, inv_warehouse_sk: 1, inv_date_sk: 3, inv_quantity_on_hand: 250}
]

let item = [
  {i_item_sk: 1}
]

let warehouse = [
  {w_warehouse_sk: 1, w_warehouse_name: "W1"}
]

let date_dim = [
  {d_date_sk: 1, d_year: 2000, d_moy: 1},
  {d_date_sk: 2, d_year: 2000, d_moy: 2},
  {d_date_sk: 3, d_year: 2000, d_moy: 3}
]

let monthly_rows =
  from inv in inventory
  join d in date_dim on inv.inv_date_sk == d.d_date_sk
  join i in item on inv.inv_item_sk == i.i_item_sk
  join w in warehouse on inv.inv_warehouse_sk == w.w_warehouse_sk
  where d.d_year == 2000
  select {w: w.w_warehouse_sk, i: i.i_item_sk, month: d.d_moy, qty: inv.inv_quantity_on_hand}

let monthly =
  from m in monthly_rows
  group by {w: m.w, i: m.i, month: m.month} into g
  select {w: g.key.w, i: g.key.i, qty: sum(from x in g select x.qty)}

var index: map<string, int> = {}
var groups = []
for m in monthly {
  let key = str({w: m.w, i: m.i})
  if key in index {
    let idx = index[key]
    let g = groups[idx]
    groups[idx] = {w: g.w, i: g.i, qtys: append(g.qtys, m.qty)}
  } else {
    index[key] = len(groups)
    groups = append(groups, {w: m.w, i: m.i, qtys: [m.qty]})
  }
}

var summary = []
for g in groups {
  let mean = avg(g.qtys)
  var sumsq = 0.0
  for q in g.qtys {
    sumsq = sumsq + (q - mean) * (q - mean)
  }
  let variance = sumsq / (len(g.qtys) - 1)
  let cov = sqrt(variance) / mean
  if cov > 1.5 {
    summary = append(summary, {w_warehouse_sk: g.w, i_item_sk: g.i, cov: cov})
  }
}
  

json(summary)

test "TPCDS Q39 simplified" {
  expect summary == [{w_warehouse_sk: 1, i_item_sk: 1, cov: 1.5396018901626556}]
}
