// Sales by brand and manufacturer for a manager in a month

type StoreSale { ss_sold_date_sk: int, ss_item_sk: int, ss_customer_sk: int, ss_store_sk: int, ss_ext_sales_price: float }
type DateDim { d_date_sk: int, d_year: int, d_moy: int }
type Item { i_item_sk: int, i_brand_id: int, i_brand: string, i_manufact_id: int, i_manufact: string, i_manager_id: int }
type Customer { c_customer_sk: int, c_current_addr_sk: int }
type CustomerAddress { ca_address_sk: int, ca_zip: string }
type Store { s_store_sk: int, s_zip: string }

let store_sales = [ { ss_sold_date_sk: 1, ss_item_sk: 1, ss_customer_sk: 1, ss_store_sk: 1, ss_ext_sales_price: 100.0 } ]
let date_dim = [ { d_date_sk: 1, d_year: 1999, d_moy: 11 } ]
let item = [ { i_item_sk: 1, i_brand_id: 1, i_brand: "B1", i_manufact_id: 1, i_manufact: "M1", i_manager_id: 10 } ]
let customer = [ { c_customer_sk: 1, c_current_addr_sk: 1 } ]
let customer_address = [ { ca_address_sk: 1, ca_zip: "11111" } ]
let store = [ { s_store_sk: 1, s_zip: "99999" } ]

let result =
  from d in date_dim
  join ss in store_sales on ss.ss_sold_date_sk == d.d_date_sk
  join i in item on ss.ss_item_sk == i.i_item_sk && i.i_manager_id == 10
  join c in customer on ss.ss_customer_sk == c.c_customer_sk
  join ca in customer_address on c.c_current_addr_sk == ca.ca_address_sk
  join s in store on ss.ss_store_sk == s.s_store_sk && substr(ca.ca_zip,0,5) != substr(s.s_zip,0,5)
  where d.d_moy == 11 && d.d_year == 1999
  group by { brand: i.i_brand, brand_id: i.i_brand_id, man_id: i.i_manufact_id, man: i.i_manufact } into g
  sort by [g.key.brand]
  select { i_brand: g.key.brand, i_brand_id: g.key.brand_id, i_manufact_id: g.key.man_id, i_manufact: g.key.man, ext_price: sum(from x in g select x.ss_ext_sales_price) }

json(result)

test "TPCDS Q19 brand" {
  expect result == [ { i_brand: "B1", i_brand_id: 1, i_manufact_id: 1, i_manufact: "M1", ext_price: 100.0 } ]
}
