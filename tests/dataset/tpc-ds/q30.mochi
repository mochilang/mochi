let web_returns = [
  {wr_returning_customer_sk: 1, wr_returned_date_sk: 1, wr_return_amt: 100.0, wr_returning_addr_sk: 1},
  {wr_returning_customer_sk: 2, wr_returned_date_sk: 1, wr_return_amt: 30.0, wr_returning_addr_sk: 2},
  {wr_returning_customer_sk: 1, wr_returned_date_sk: 1, wr_return_amt: 50.0, wr_returning_addr_sk: 1}
]

let date_dim = [
  {d_date_sk: 1, d_year: 2000}
]

let customer_address = [
  {ca_address_sk: 1, ca_state: "CA"},
  {ca_address_sk: 2, ca_state: "CA"}
]

let customer = [
  {c_customer_sk: 1, c_customer_id: "C1", c_first_name: "John", c_last_name: "Doe", c_current_addr_sk: 1},
  {c_customer_sk: 2, c_customer_id: "C2", c_first_name: "Jane", c_last_name: "Smith", c_current_addr_sk: 2}
]

let customer_total_return =
  from wr in web_returns
  join d in date_dim on wr.wr_returned_date_sk == d.d_date_sk
  join ca in customer_address on wr.wr_returning_addr_sk == ca.ca_address_sk
  where d.d_year == 2000 && ca.ca_state == "CA"
  group by {cust: wr.wr_returning_customer_sk, state: ca.ca_state} into g
  select {
    ctr_customer_sk: g.key.cust,
    ctr_state: g.key.state,
    ctr_total_return: sum(from x in g select x.wr_return_amt)
  }

let avg_by_state =
  from ctr in customer_total_return
  group by ctr.ctr_state into g
  select {state: g.key, avg_return: avg(from x in g select x.ctr_total_return)}

let result =
  from ctr in customer_total_return
  join avg in avg_by_state on ctr.ctr_state == avg.state
  join c in customer on ctr.ctr_customer_sk == c.c_customer_sk
  where ctr.ctr_total_return > avg.avg_return * 1.2
  select {
    c_customer_id: c.c_customer_id,
    c_first_name: c.c_first_name,
    c_last_name: c.c_last_name,
    ctr_total_return: ctr.ctr_total_return
  }
  |> to_list

json(result)

test "TPCDS Q30 simplified" {
  expect result == [{c_customer_id: "C1", c_first_name: "John", c_last_name: "Doe", ctr_total_return: 150.0}]
}
