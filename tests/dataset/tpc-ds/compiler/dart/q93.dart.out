// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:07Z
import 'dart:io';
import 'dart:convert';

class StoreSale {
  int ss_item_sk;
  int ss_ticket_number;
  int ss_customer_sk;
  int ss_quantity;
  double ss_sales_price;
  StoreSale(this.ss_item_sk, this.ss_ticket_number, this.ss_customer_sk, this.ss_quantity, this.ss_sales_price);
}

class StoreReturn {
  int sr_item_sk;
  int sr_ticket_number;
  int sr_reason_sk;
  int sr_return_quantity;
  StoreReturn(this.sr_item_sk, this.sr_ticket_number, this.sr_reason_sk, this.sr_return_quantity);
}

class Reason {
  int r_reason_sk;
  String r_reason_desc;
  Reason(this.r_reason_sk, this.r_reason_desc);
}

var store_sales = [{'ss_item_sk': 1, 'ss_ticket_number': 1, 'ss_customer_sk': 1, 'ss_quantity': 5, 'ss_sales_price': 10}, {'ss_item_sk': 1, 'ss_ticket_number': 2, 'ss_customer_sk': 2, 'ss_quantity': 3, 'ss_sales_price': 20}];

var store_returns = [{'sr_item_sk': 1, 'sr_ticket_number': 1, 'sr_reason_sk': 1, 'sr_return_quantity': 1}];

var reason = [{'r_reason_sk': 1, 'r_reason_desc': 'ReasonA'}];

var t = (() {
  var _q0 = <dynamic>[];
  for (var ss in store_sales) {
    var _jt1 = <dynamic>[];
    for (var sr in store_returns) {
      if (!(ss['ss_item_sk'] == sr['sr_item_sk'] && ss['ss_ticket_number'] == sr['sr_ticket_number'])) continue;
      _jt1.add(sr);
    }
    if (_jt1.isEmpty) _jt1.add(null);
    for (var sr in _jt1) {
      var _jt2 = <dynamic>[];
      for (var r in reason) {
        if (!(sr != null && sr['sr_reason_sk'] == r['r_reason_sk'])) continue;
        _jt2.add(r);
      }
      if (_jt2.isEmpty) _jt2.add(null);
      for (var r in _jt2) {
        if (!(r == null || r['r_reason_desc'] == 'ReasonA')) continue;
        _q0.add({'ss_customer_sk': ss['ss_customer_sk'], 'act_sales': (sr != null ? (((ss['ss_quantity'] as num) - (sr['sr_return_quantity'] as num)) as num) * (ss['ss_sales_price'] as num) : (ss['ss_quantity'] as num) * (ss['ss_sales_price'] as num))});
      }
    }
  }
  return _q0;
})();

var result = (() {
  var _q3 = <dynamic>[];
  var _g4 = <String, List<dynamic>>{};
  for (var x in t) {
    var _k6 = x['ss_customer_sk'];
    var _k6_s = jsonEncode(_k6);
    _g4.putIfAbsent(_k6_s, () => <dynamic>[]).add(x);
  }
  for (var entry in _g4.entries) {
    var g = entry.value;
    var _k6 = jsonDecode(entry.key);
    _q3.add([[_sum(g.map((y) => y['act_sales'])), _k6], {'ss_customer_sk': _k6, 'sumsales': _sum(g.map((y) => y['act_sales']))}]);
  }
  _q3.sort((a,b) => (jsonEncode(a[0]) as Comparable).compareTo(jsonEncode(b[0])));
  _q3 = [for (var x in _q3) x[1]];
  return _q3;
})();

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
