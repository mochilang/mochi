import 'dart:io';
import 'dart:convert';

void test_TPCDS_Q9_result() {
  if (!(_equal(result, [{"bucket1": 7, "bucket2": 15, "bucket3": 30, "bucket4": 35, "bucket5": 50}]))) { throw Exception('expect failed'); }
}

void main() {
  int failures = 0;
  List<Map<String, dynamic>> store_sales = [{"ss_quantity": 5, "ss_ext_discount_amt": 5, "ss_net_paid": 7}, {"ss_quantity": 30, "ss_ext_discount_amt": 10, "ss_net_paid": 15}, {"ss_quantity": 50, "ss_ext_discount_amt": 20, "ss_net_paid": 30}, {"ss_quantity": 70, "ss_ext_discount_amt": 25, "ss_net_paid": 35}, {"ss_quantity": 90, "ss_ext_discount_amt": 40, "ss_net_paid": 50}];
  List<Map<String, int>> reason = [{"r_reason_sk": 1}];
  double bucket1 = ((_count((() {
  var _res = [];
  var _src = (store_sales).where((s) => ((s['ss_quantity'] >= 1) && (s['ss_quantity'] <= 20))).toList();
  for (var s in _src) {
    _res.add(s);
  }
  return _res;
})()) > 10) ? _avg((() {
  var _res = [];
  var _src = (store_sales).where((s) => ((s['ss_quantity'] >= 1) && (s['ss_quantity'] <= 20))).toList();
  for (var s in _src) {
    _res.add(s['ss_ext_discount_amt']);
  }
  return _res;
})()) : _avg((() {
  var _res = [];
  var _src = (store_sales).where((s) => ((s['ss_quantity'] >= 1) && (s['ss_quantity'] <= 20))).toList();
  for (var s in _src) {
    _res.add(s['ss_net_paid']);
  }
  return _res;
})()));
  double bucket2 = ((_count((() {
  var _res = [];
  var _src = (store_sales).where((s) => ((s['ss_quantity'] >= 21) && (s['ss_quantity'] <= 40))).toList();
  for (var s in _src) {
    _res.add(s);
  }
  return _res;
})()) > 20) ? _avg((() {
  var _res = [];
  var _src = (store_sales).where((s) => ((s['ss_quantity'] >= 21) && (s['ss_quantity'] <= 40))).toList();
  for (var s in _src) {
    _res.add(s['ss_ext_discount_amt']);
  }
  return _res;
})()) : _avg((() {
  var _res = [];
  var _src = (store_sales).where((s) => ((s['ss_quantity'] >= 21) && (s['ss_quantity'] <= 40))).toList();
  for (var s in _src) {
    _res.add(s['ss_net_paid']);
  }
  return _res;
})()));
  double bucket3 = ((_count((() {
  var _res = [];
  var _src = (store_sales).where((s) => ((s['ss_quantity'] >= 41) && (s['ss_quantity'] <= 60))).toList();
  for (var s in _src) {
    _res.add(s);
  }
  return _res;
})()) > 30) ? _avg((() {
  var _res = [];
  var _src = (store_sales).where((s) => ((s['ss_quantity'] >= 41) && (s['ss_quantity'] <= 60))).toList();
  for (var s in _src) {
    _res.add(s['ss_ext_discount_amt']);
  }
  return _res;
})()) : _avg((() {
  var _res = [];
  var _src = (store_sales).where((s) => ((s['ss_quantity'] >= 41) && (s['ss_quantity'] <= 60))).toList();
  for (var s in _src) {
    _res.add(s['ss_net_paid']);
  }
  return _res;
})()));
  double bucket4 = ((_count((() {
  var _res = [];
  var _src = (store_sales).where((s) => ((s['ss_quantity'] >= 61) && (s['ss_quantity'] <= 80))).toList();
  for (var s in _src) {
    _res.add(s);
  }
  return _res;
})()) > 40) ? _avg((() {
  var _res = [];
  var _src = (store_sales).where((s) => ((s['ss_quantity'] >= 61) && (s['ss_quantity'] <= 80))).toList();
  for (var s in _src) {
    _res.add(s['ss_ext_discount_amt']);
  }
  return _res;
})()) : _avg((() {
  var _res = [];
  var _src = (store_sales).where((s) => ((s['ss_quantity'] >= 61) && (s['ss_quantity'] <= 80))).toList();
  for (var s in _src) {
    _res.add(s['ss_net_paid']);
  }
  return _res;
})()));
  double bucket5 = ((_count((() {
  var _res = [];
  var _src = (store_sales).where((s) => ((s['ss_quantity'] >= 81) && (s['ss_quantity'] <= 100))).toList();
  for (var s in _src) {
    _res.add(s);
  }
  return _res;
})()) > 50) ? _avg((() {
  var _res = [];
  var _src = (store_sales).where((s) => ((s['ss_quantity'] >= 81) && (s['ss_quantity'] <= 100))).toList();
  for (var s in _src) {
    _res.add(s['ss_ext_discount_amt']);
  }
  return _res;
})()) : _avg((() {
  var _res = [];
  var _src = (store_sales).where((s) => ((s['ss_quantity'] >= 81) && (s['ss_quantity'] <= 100))).toList();
  for (var s in _src) {
    _res.add(s['ss_net_paid']);
  }
  return _res;
})()));
  List<Map<String, double>> result = (() {
  var _res = [];
  var _src = (reason).where((r) => (r['r_reason_sk'] == 1)).toList();
  for (var r in _src) {
    _res.add({"bucket1": bucket1, "bucket2": bucket2, "bucket3": bucket3, "bucket4": bucket4, "bucket5": bucket5});
  }
  return _res;
})();
  _json(result);
  if (!_runTest("TPCDS Q9 result", test_TPCDS_Q9_result)) failures++;
  if (failures > 0) {
    print("\n[FAIL] $failures test(s) failed.");
  }
}

double _avg(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else if (v is _Group) list = v.Items;
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var s = 0.0;
    for (var n in list) s += (n as num).toDouble();
    return s / list.length;
}

int _count(dynamic v) {
    if (v is String) return v.runes.length;
    if (v is List) return v.length;
    if (v is Map) return v.length;
    try { var items = (v as dynamic).Items; if (items is List) return items.length; } catch (_) {}
    try { var items = (v as dynamic).items; if (items is List) return items.length; } catch (_) {}
    return 0;
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}


