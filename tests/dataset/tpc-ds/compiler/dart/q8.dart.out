import 'dart:io';
import 'dart:convert';

void test_TPCDS_Q8_result() {
  if (!(_equal(result, [{"s_store_name": "Store1", "net_profit": 10}]))) { throw Exception('expect failed'); }
}

void main() {
  int failures = 0;
  List<Map<String, dynamic>> store_sales = [{"ss_store_sk": 1, "ss_sold_date_sk": 1, "ss_net_profit": 10}];
  List<Map<String, int>> date_dim = [{"d_date_sk": 1, "d_qoy": 1, "d_year": 1998}];
  List<Map<String, dynamic>> store = [{"s_store_sk": 1, "s_store_name": "Store1", "s_zip": "12345"}];
  List<Map<String, dynamic>> customer_address = [{"ca_address_sk": 1, "ca_zip": "12345"}];
  List<Map<String, dynamic>> customer = [{"c_customer_sk": 1, "c_current_addr_sk": 1, "c_preferred_cust_flag": "Y"}];
  reverse(substr("zip", 0, 2));
  List<String> zip_list = ["12345"];
  List<Map<String, dynamic>> result = (() {
  var groups = <String,_Group>{};
  var order = <String>[];
  for (var ss in store_sales) {
    for (var d in date_dim) {
      if (!(((_equal(ss['ss_sold_date_sk'], d['d_date_sk']) && (d['d_qoy'] == 1)) && (d['d_year'] == 1998)))) {
        continue;
      }
      for (var s in store) {
        if (!(_equal(ss['ss_store_sk'], s['s_store_sk']))) {
          continue;
        }
        for (var ca in customer_address) {
          if (!((substr(s['s_zip'], 0, 2) == substr(ca['ca_zip'], 0, 2)))) {
            continue;
          }
          for (var c in customer) {
            if (!((_equal(ca['ca_address_sk'], c['c_current_addr_sk']) && _equal(c['c_preferred_cust_flag'], "Y")))) {
              continue;
            }
            if (!((zip_list.contains(substr(ca['ca_zip'], 0, 5))))) {
              continue;
            }
            var key = s['s_store_name'];
            var ks = key.toString();
            var g = groups[ks];
            if (g == null) {
              g = _Group(key);
              groups[ks] = g;
              order.add(ks);
            }
            g.Items.add(ss);
          }
        }
      }
    }
  }
  var items = [for (var k in order) groups[k]!];
  items.sort((gA, gB) {
    var g = gA;
    var keyA = g.key;
    g = gB;
    var keyB = g.key;
    return Comparable.compare(keyA, keyB);
  });
  var _res = [];
  for (var g in items) {
    _res.add({"s_store_name": g.key, "net_profit": _sum((() {
  var _res = [];
  for (var x in g) {
    _res.add(x.ss.ss_net_profit);
  }
  return _res;
})())});
  }
  return _res;
})();
  _json(result);
  if (!_runTest("TPCDS Q8 result", test_TPCDS_Q8_result)) failures++;
  if (failures > 0) {
    print("\n[FAIL] $failures test(s) failed.");
  }
}

class _Group {
    dynamic key;
    List<dynamic> Items = [];
    _Group(this.key);
    int count() => _count(this);
    double sum() => _sum(this);
    double avg() => _avg(this);
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}

double _sum(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else if (v is _Group) list = v.Items;
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var s = 0.0;
    for (var n in list) s += (n as num).toDouble();
    return s;
}


