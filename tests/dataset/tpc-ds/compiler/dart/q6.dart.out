import 'dart:io';
import 'dart:convert';

void test_TPCDS_Q6_result() {
  if (!(_equal(result, [{"state": "CA", "cnt": 10}]))) { throw Exception('expect failed'); }
}

void main() {
  int failures = 0;
  List<Map<String, dynamic>> customer_address = [{"ca_address_sk": 1, "ca_state": "CA", "ca_zip": "12345"}];
  List<Map<String, int>> customer = [{"c_customer_sk": 1, "c_current_addr_sk": 1}];
  List<Map<String, int>> store_sales = [{"ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_item_sk": 1}, {"ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_item_sk": 1}, {"ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_item_sk": 1}, {"ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_item_sk": 1}, {"ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_item_sk": 1}, {"ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_item_sk": 1}, {"ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_item_sk": 1}, {"ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_item_sk": 1}, {"ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_item_sk": 1}, {"ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_item_sk": 1}];
  List<Map<String, int>> date_dim = [{"d_date_sk": 1, "d_year": 1999, "d_moy": 5, "d_month_seq": 120}];
  List<Map<String, dynamic>> item = [{"i_item_sk": 1, "i_category": "A", "i_current_price": 100}, {"i_item_sk": 2, "i_category": "A", "i_current_price": 50}];
  dynamic target_month_seq = _max((() {
  var _res = [];
  var _src = (date_dim).where((d) => (_equal(d.d_year, 1999) && _equal(d.d_moy, 5))).toList();
  for (var d in _src) {
    _res.add(d.d_month_seq);
  }
  return _res;
})());
  List<Map<String, dynamic>> result = (() {
  var groups = <String,_Group>{};
  var order = <String>[];
  for (var a in customer_address) {
    for (var c in customer) {
      if (!(_equal(a.ca_address_sk, c.c_current_addr_sk))) {
        continue;
      }
      for (var s in store_sales) {
        if (!(_equal(c.c_customer_sk, s.ss_customer_sk))) {
          continue;
        }
        for (var d in date_dim) {
          if (!(_equal(s.ss_sold_date_sk, d.d_date_sk))) {
            continue;
          }
          for (var i in item) {
            if (!(_equal(s.ss_item_sk, i.i_item_sk))) {
              continue;
            }
            if (!((_equal(d.d_month_seq, target_month_seq) && (i.i_current_price > (1.2 * _avg((() {
  var _res = [];
  for (var j in item) {
    if (!(_equal(j.i_category, i.i_category))) {
      continue;
    }
    _res.add(j.i_current_price);
  }
  return _res;
})())))))) {
              continue;
            }
            var key = a.ca_state;
            var ks = key.toString();
            var g = groups[ks];
            if (g == null) {
              g = _Group(key);
              groups[ks] = g;
              order.add(ks);
            }
            g.Items.add(a);
          }
        }
      }
    }
  }
  var items = [for (var k in order) groups[k]!];
  items.sort((gA, gB) {
    var g = gA;
    var keyA = [_count(g), g.key];
    g = gB;
    var keyB = [_count(g), g.key];
    return Comparable.compare(keyA, keyB);
  });
  var take = 100;
  if (take < items.length) {
    items = items.sublist(0, take);
  }
  var _res = [];
  for (var g in items) {
    _res.add({"state": g.key, "cnt": _count(g)});
  }
  return _res;
})();
  _json(result);
  if (!_runTest("TPCDS Q6 result", test_TPCDS_Q6_result)) failures++;
  if (failures > 0) {
    print("\n[FAIL] $failures test(s) failed.");
  }
}

class _Group {
    dynamic key;
    List<dynamic> Items = [];
    _Group(this.key);
    int count() => _count(this);
    double sum() => _sum(this);
    double avg() => _avg(this);
}

double _avg(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else if (v is _Group) list = v.Items;
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var s = 0.0;
    for (var n in list) s += (n as num).toDouble();
    return s / list.length;
}

int _count(dynamic v) {
    if (v is String) return v.runes.length;
    if (v is List) return v.length;
    if (v is Map) return v.length;
    try { var items = (v as dynamic).Items; if (items is List) return items.length; } catch (_) {}
    try { var items = (v as dynamic).items; if (items is List) return items.length; } catch (_) {}
    return 0;
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}

dynamic _max(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else if (v is _Group) list = v.Items;
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) > 0) m = n; }
    return m;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}


