import 'dart:io';
import 'dart:convert';

class StoreSale {
  int ss_sold_date_sk;
  int ss_item_sk;
  int ss_customer_sk;
  int ss_ticket_number;
  int ss_quantity;
  int ss_store_sk;
  StoreSale({required this.ss_sold_date_sk, required this.ss_item_sk, required this.ss_customer_sk, required this.ss_ticket_number, required this.ss_quantity, required this.ss_store_sk});
  factory StoreSale.fromJson(Map<String,dynamic> m) {
    return StoreSale(ss_sold_date_sk: m['ss_sold_date_sk'] as int, ss_item_sk: m['ss_item_sk'] as int, ss_customer_sk: m['ss_customer_sk'] as int, ss_ticket_number: m['ss_ticket_number'] as int, ss_quantity: m['ss_quantity'] as int, ss_store_sk: m['ss_store_sk'] as int);
  }
}
_structParsers['StoreSale'] = (m) => StoreSale.fromJson(m);

class StoreReturn {
  int sr_returned_date_sk;
  int sr_customer_sk;
  int sr_item_sk;
  int sr_ticket_number;
  int sr_return_quantity;
  StoreReturn({required this.sr_returned_date_sk, required this.sr_customer_sk, required this.sr_item_sk, required this.sr_ticket_number, required this.sr_return_quantity});
  factory StoreReturn.fromJson(Map<String,dynamic> m) {
    return StoreReturn(sr_returned_date_sk: m['sr_returned_date_sk'] as int, sr_customer_sk: m['sr_customer_sk'] as int, sr_item_sk: m['sr_item_sk'] as int, sr_ticket_number: m['sr_ticket_number'] as int, sr_return_quantity: m['sr_return_quantity'] as int);
  }
}
_structParsers['StoreReturn'] = (m) => StoreReturn.fromJson(m);

class CatalogSale {
  int cs_sold_date_sk;
  int cs_item_sk;
  int cs_bill_customer_sk;
  int cs_quantity;
  CatalogSale({required this.cs_sold_date_sk, required this.cs_item_sk, required this.cs_bill_customer_sk, required this.cs_quantity});
  factory CatalogSale.fromJson(Map<String,dynamic> m) {
    return CatalogSale(cs_sold_date_sk: m['cs_sold_date_sk'] as int, cs_item_sk: m['cs_item_sk'] as int, cs_bill_customer_sk: m['cs_bill_customer_sk'] as int, cs_quantity: m['cs_quantity'] as int);
  }
}
_structParsers['CatalogSale'] = (m) => CatalogSale.fromJson(m);

class DateDim {
  int d_date_sk;
  String d_quarter_name;
  DateDim({required this.d_date_sk, required this.d_quarter_name});
  factory DateDim.fromJson(Map<String,dynamic> m) {
    return DateDim(d_date_sk: m['d_date_sk'] as int, d_quarter_name: m['d_quarter_name'] as String);
  }
}
_structParsers['DateDim'] = (m) => DateDim.fromJson(m);

class Store {
  int s_store_sk;
  String s_state;
  Store({required this.s_store_sk, required this.s_state});
  factory Store.fromJson(Map<String,dynamic> m) {
    return Store(s_store_sk: m['s_store_sk'] as int, s_state: m['s_state'] as String);
  }
}
_structParsers['Store'] = (m) => Store.fromJson(m);

class Item {
  int i_item_sk;
  String i_item_id;
  String i_item_desc;
  Item({required this.i_item_sk, required this.i_item_id, required this.i_item_desc});
  factory Item.fromJson(Map<String,dynamic> m) {
    return Item(i_item_sk: m['i_item_sk'] as int, i_item_id: m['i_item_id'] as String, i_item_desc: m['i_item_desc'] as String);
  }
}
_structParsers['Item'] = (m) => Item.fromJson(m);

void test_TPCDS_Q17_stats() {
  if (!(_equal(result, [{"i_item_id": "I1", "i_item_desc": "Item 1", "s_state": "CA", "store_sales_quantitycount": 1, "store_sales_quantityave": 10, "store_sales_quantitystdev": 0, "store_sales_quantitycov": 0, "store_returns_quantitycount": 1, "store_returns_quantityave": 2, "store_returns_quantitystdev": 0, "store_returns_quantitycov": 0, "catalog_sales_quantitycount": 1, "catalog_sales_quantityave": 5, "catalog_sales_quantitystdev": 0, "catalog_sales_quantitycov": 0}]))) { throw Exception('expect failed'); }
}

void main() {
  int failures = 0;
  List<Map<String, int>> store_sales = [{"ss_sold_date_sk": 1, "ss_item_sk": 1, "ss_customer_sk": 1, "ss_ticket_number": 1, "ss_quantity": 10, "ss_store_sk": 1}];
  List<Map<String, int>> store_returns = [{"sr_returned_date_sk": 2, "sr_customer_sk": 1, "sr_item_sk": 1, "sr_ticket_number": 1, "sr_return_quantity": 2}];
  List<Map<String, int>> catalog_sales = [{"cs_sold_date_sk": 3, "cs_item_sk": 1, "cs_bill_customer_sk": 1, "cs_quantity": 5}];
  List<Map<String, dynamic>> date_dim = [{"d_date_sk": 1, "d_quarter_name": "1998Q1"}, {"d_date_sk": 2, "d_quarter_name": "1998Q2"}, {"d_date_sk": 3, "d_quarter_name": "1998Q3"}];
  List<Map<String, dynamic>> store = [{"s_store_sk": 1, "s_state": "CA"}];
  List<Map<String, dynamic>> item = [{"i_item_sk": 1, "i_item_id": "I1", "i_item_desc": "Item 1"}];
  List<Map<String, int>> joined = (() {
  var _res = [];
  for (var ss in store_sales) {
    for (var sr in store_returns) {
      if (!(((_equal(ss.ss_customer_sk, sr.sr_customer_sk) && _equal(ss.ss_item_sk, sr.sr_item_sk)) && _equal(ss.ss_ticket_number, sr.sr_ticket_number)))) {
        continue;
      }
      for (var cs in catalog_sales) {
        if (!((_equal(sr.sr_customer_sk, cs.cs_bill_customer_sk) && _equal(sr.sr_item_sk, cs.cs_item_sk)))) {
          continue;
        }
        for (var d1 in date_dim) {
          if (!((_equal(ss.ss_sold_date_sk, d1.d_date_sk) && _equal(d1.d_quarter_name, "1998Q1")))) {
            continue;
          }
          for (var d2 in date_dim) {
            if (!((_equal(sr.sr_returned_date_sk, d2.d_date_sk) && (["1998Q1", "1998Q2", "1998Q3"].contains(d2.d_quarter_name))))) {
              continue;
            }
            for (var d3 in date_dim) {
              if (!((_equal(cs.cs_sold_date_sk, d3.d_date_sk) && (["1998Q1", "1998Q2", "1998Q3"].contains(d3.d_quarter_name))))) {
                continue;
              }
              for (var s in store) {
                if (!(_equal(ss.ss_store_sk, s.s_store_sk))) {
                  continue;
                }
                for (var i in item) {
                  if (!(_equal(ss.ss_item_sk, i.i_item_sk))) {
                    continue;
                  }
                  _res.add({"qty": ss.ss_quantity, "ret": sr.sr_return_quantity, "csq": cs.cs_quantity, "i_item_id": i.i_item_id, "i_item_desc": i.i_item_desc, "s_state": s.s_state});
                }
              }
            }
          }
        }
      }
    }
  }
  return _res;
})();
  List<Map<String, dynamic>> result = _group_by(joined, (j) => {"i_item_id": j.i_item_id, "i_item_desc": j.i_item_desc, "s_state": j.s_state}).map((g) => {"i_item_id": g.key.i_item_id, "i_item_desc": g.key.i_item_desc, "s_state": g.key.s_state, "store_sales_quantitycount": _count((() {
  var _res = [];
  for (var _ in g) {
    _res.add(_);
  }
  return _res;
})()), "store_sales_quantityave": _avg((() {
  var _res = [];
  for (var x in g) {
    _res.add(x.qty);
  }
  return _res;
})()), "store_sales_quantitystdev": 0, "store_sales_quantitycov": 0, "store_returns_quantitycount": _count((() {
  var _res = [];
  for (var _ in g) {
    _res.add(_);
  }
  return _res;
})()), "store_returns_quantityave": _avg((() {
  var _res = [];
  for (var x in g) {
    _res.add(x.ret);
  }
  return _res;
})()), "store_returns_quantitystdev": 0, "store_returns_quantitycov": 0, "catalog_sales_quantitycount": _count((() {
  var _res = [];
  for (var _ in g) {
    _res.add(_);
  }
  return _res;
})()), "catalog_sales_quantityave": _avg((() {
  var _res = [];
  for (var x in g) {
    _res.add(x.csq);
  }
  return _res;
})()), "catalog_sales_quantitystdev": 0, "catalog_sales_quantitycov": 0}).toList();
  _json(result);
  if (!_runTest("TPCDS Q17 stats", test_TPCDS_Q17_stats)) failures++;
  if (failures > 0) {
    print("\n[FAIL] $failures test(s) failed.");
  }
}

class _Group {
    dynamic key;
    List<dynamic> Items = [];
    _Group(this.key);
    int count() => _count(this);
    double sum() => _sum(this);
    double avg() => _avg(this);
}

double _avg(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else if (v is _Group) list = v.Items;
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var s = 0.0;
    for (var n in list) s += (n as num).toDouble();
    return s / list.length;
}

int _count(dynamic v) {
    if (v is String) return v.runes.length;
    if (v is List) return v.length;
    if (v is Map) return v.length;
    try { var items = (v as dynamic).Items; if (items is List) return items.length; } catch (_) {}
    try { var items = (v as dynamic).items; if (items is List) return items.length; } catch (_) {}
    return 0;
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

List<_Group> _group_by(List<dynamic> src, dynamic Function(dynamic) keyfn) {
    var groups = <String,_Group>{};
    var order = <String>[];
    for (var it in src) {
        var key = keyfn(it);
        var ks = key.toString();
        var g = groups[ks];
        if (g == null) {
            g = _Group(key);
            groups[ks] = g;
            order.add(ks);
        }
        g.Items.add(it);
    }
    return [for (var k in order) groups[k]!];
}

void _json(dynamic v) {
    print(jsonEncode(v));
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}


