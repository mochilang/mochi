// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:06Z
import 'dart:io';
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

class StoreSale {
  int ss_sold_date_sk;
  int ss_item_sk;
  int ss_customer_sk;
  int ss_ticket_number;
  int ss_quantity;
  int ss_store_sk;
  StoreSale(this.ss_sold_date_sk, this.ss_item_sk, this.ss_customer_sk, this.ss_ticket_number, this.ss_quantity, this.ss_store_sk);
}

class StoreReturn {
  int sr_returned_date_sk;
  int sr_customer_sk;
  int sr_item_sk;
  int sr_ticket_number;
  int sr_return_quantity;
  StoreReturn(this.sr_returned_date_sk, this.sr_customer_sk, this.sr_item_sk, this.sr_ticket_number, this.sr_return_quantity);
}

class CatalogSale {
  int cs_sold_date_sk;
  int cs_item_sk;
  int cs_bill_customer_sk;
  int cs_quantity;
  CatalogSale(this.cs_sold_date_sk, this.cs_item_sk, this.cs_bill_customer_sk, this.cs_quantity);
}

class DateDim {
  int d_date_sk;
  String d_quarter_name;
  DateDim(this.d_date_sk, this.d_quarter_name);
}

class Store {
  int s_store_sk;
  String s_state;
  Store(this.s_store_sk, this.s_state);
}

class Item {
  int i_item_sk;
  String i_item_id;
  String i_item_desc;
  Item(this.i_item_sk, this.i_item_id, this.i_item_desc);
}

var store_sales = [{'ss_sold_date_sk': 1, 'ss_item_sk': 1, 'ss_customer_sk': 1, 'ss_ticket_number': 1, 'ss_quantity': 10, 'ss_store_sk': 1}];

var store_returns = [{'sr_returned_date_sk': 2, 'sr_customer_sk': 1, 'sr_item_sk': 1, 'sr_ticket_number': 1, 'sr_return_quantity': 2}];

var catalog_sales = [{'cs_sold_date_sk': 3, 'cs_item_sk': 1, 'cs_bill_customer_sk': 1, 'cs_quantity': 5}];

var date_dim = [{'d_date_sk': 1, 'd_quarter_name': '1998Q1'}, {'d_date_sk': 2, 'd_quarter_name': '1998Q2'}, {'d_date_sk': 3, 'd_quarter_name': '1998Q3'}];

var store = [{'s_store_sk': 1, 's_state': 'CA'}];

var item = [{'i_item_sk': 1, 'i_item_id': 'I1', 'i_item_desc': 'Item 1'}];

var joined = (() {
  var _q0 = <dynamic>[];
  for (var ss in store_sales) {
    for (var sr in store_returns) {
      if (!(ss['ss_customer_sk'] == sr['sr_customer_sk'] && ss['ss_item_sk'] == sr['sr_item_sk'] && ss['ss_ticket_number'] == sr['sr_ticket_number'])) continue;
      for (var cs in catalog_sales) {
        if (!(sr['sr_customer_sk'] == cs['cs_bill_customer_sk'] && sr['sr_item_sk'] == cs['cs_item_sk'])) continue;
        for (var d1 in date_dim) {
          if (!(ss['ss_sold_date_sk'] == d1['d_date_sk'] && d1['d_quarter_name'] == '1998Q1')) continue;
          for (var d2 in date_dim) {
            if (!(sr['sr_returned_date_sk'] == d2['d_date_sk'] && _in(d2['d_quarter_name'], ['1998Q1', '1998Q2', '1998Q3']))) continue;
            for (var d3 in date_dim) {
              if (!(cs['cs_sold_date_sk'] == d3['d_date_sk'] && _in(d3['d_quarter_name'], ['1998Q1', '1998Q2', '1998Q3']))) continue;
              for (var s in store) {
                if (!(ss['ss_store_sk'] == s['s_store_sk'])) continue;
                for (var i in item) {
                  if (!(ss['ss_item_sk'] == i['i_item_sk'])) continue;
                  _q0.add({'qty': ss['ss_quantity'], 'ret': sr['sr_return_quantity'], 'csq': cs['cs_quantity'], 'i_item_id': i['i_item_id'], 'i_item_desc': i['i_item_desc'], 's_state': s['s_state']});
                }
              }
            }
          }
        }
      }
    }
  }
  return _q0;
})();

var result = (() {
  var _q1 = <dynamic>[];
  var _g2 = <String, List<dynamic>>{};
  for (var j in joined) {
    var _k12 = {'i_item_id': j['i_item_id'], 'i_item_desc': j['i_item_desc'], 's_state': j['s_state']};
    var _k12_s = jsonEncode(_k12);
    _g2.putIfAbsent(_k12_s, () => <dynamic>[]).add(j);
  }
  for (var entry in _g2.entries) {
    var g = entry.value;
    var _k12 = jsonDecode(entry.key);
    _q1.add({'i_item_id': _k12['i_item_id'], 'i_item_desc': _k12['i_item_desc'], 's_state': _k12['s_state'], 'store_sales_quantitycount': (() {
  var _q13 = <dynamic>[];
  for (var _ in g) {
    _q13.add(_);
  }
  return _q13;
})().length, 'store_sales_quantityave': (() { var _t15 = (() {
  var _q14 = <dynamic>[];
  for (var x in g) {
    _q14.add(x['qty']);
  }
  return _q14;
})(); return (_t15.isEmpty ? 0 : _t15.reduce((a, b) => a + b) / _t15.length); })(), 'store_sales_quantitystdev': 0, 'store_sales_quantitycov': 0, 'store_returns_quantitycount': (() {
  var _q16 = <dynamic>[];
  for (var _ in g) {
    _q16.add(_);
  }
  return _q16;
})().length, 'store_returns_quantityave': (() { var _t18 = (() {
  var _q17 = <dynamic>[];
  for (var x in g) {
    _q17.add(x['ret']);
  }
  return _q17;
})(); return (_t18.isEmpty ? 0 : _t18.reduce((a, b) => a + b) / _t18.length); })(), 'store_returns_quantitystdev': 0, 'store_returns_quantitycov': 0, 'catalog_sales_quantitycount': (() {
  var _q19 = <dynamic>[];
  for (var _ in g) {
    _q19.add(_);
  }
  return _q19;
})().length, 'catalog_sales_quantityave': (() { var _t21 = (() {
  var _q20 = <dynamic>[];
  for (var x in g) {
    _q20.add(x['csq']);
  }
  return _q20;
})(); return (_t21.isEmpty ? 0 : _t21.reduce((a, b) => a + b) / _t21.length); })(), 'catalog_sales_quantitystdev': 0, 'catalog_sales_quantitycov': 0});
  }
  return _q1;
})();

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
