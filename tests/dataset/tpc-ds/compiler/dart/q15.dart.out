// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:06Z
import 'dart:io';
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

class CatalogSale {
  int cs_bill_customer_sk;
  double cs_sales_price;
  int cs_sold_date_sk;
  CatalogSale(this.cs_bill_customer_sk, this.cs_sales_price, this.cs_sold_date_sk);
}

class Customer {
  int c_customer_sk;
  int c_current_addr_sk;
  Customer(this.c_customer_sk, this.c_current_addr_sk);
}

class CustomerAddress {
  int ca_address_sk;
  String ca_zip;
  String ca_state;
  CustomerAddress(this.ca_address_sk, this.ca_zip, this.ca_state);
}

class DateDim {
  int d_date_sk;
  int d_qoy;
  int d_year;
  DateDim(this.d_date_sk, this.d_qoy, this.d_year);
}

var catalog_sales = [{'cs_bill_customer_sk': 1, 'cs_sales_price': 600, 'cs_sold_date_sk': 1}];

var customer = [{'c_customer_sk': 1, 'c_current_addr_sk': 1}];

var customer_address = [{'ca_address_sk': 1, 'ca_zip': '85669', 'ca_state': 'CA'}];

var date_dim = [{'d_date_sk': 1, 'd_qoy': 1, 'd_year': 2000}];

var filtered = (() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var cs in catalog_sales) {
    for (var c in customer) {
      if (!(cs['cs_bill_customer_sk'] == c['c_customer_sk'])) continue;
      for (var ca in customer_address) {
        if (!(c['c_current_addr_sk'] == ca['ca_address_sk'])) continue;
        for (var d in date_dim) {
          if (!(cs['cs_sold_date_sk'] == d['d_date_sk'])) continue;
          if (!((_in(substr(ca['ca_zip'], 0, 5), ['85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792']) || _in(ca['ca_state'], ['CA', 'WA', 'GA']) || cs['cs_sales_price'].toString().compareTo(500.toString()) > 0) && d['d_qoy'] == 1 && d['d_year'] == 2000)) continue;
          var _k3 = {'zip': ca['ca_zip']};
          var _k3_s = jsonEncode(_k3);
          _g1.putIfAbsent(_k3_s, () => <dynamic>[]).add({'cs': cs, 'c': c, 'ca': ca, 'd': d});
        }
      }
    }
  }
  for (var entry in _g1.entries) {
    var g = entry.value;
    var _k3 = jsonDecode(entry.key);
    _q0.add([_k3['zip'], {'ca_zip': _k3['zip'], 'sum_sales': _sum(g.map((x) => x['cs_sales_price']))}]);
  }
  _q0.sort((a,b) => (jsonEncode(a[0]) as Comparable).compareTo(jsonEncode(b[0])));
  _q0 = [for (var x in _q0) x[1]];
  return _q0;
})();

void main() {
  print(jsonEncode(filtered));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
