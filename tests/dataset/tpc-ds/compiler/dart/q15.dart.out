import 'dart:io';
import 'dart:convert';

class CatalogSale {
  int cs_bill_customer_sk;
  double cs_sales_price;
  int cs_sold_date_sk;
  CatalogSale({required this.cs_bill_customer_sk, required this.cs_sales_price, required this.cs_sold_date_sk});
  factory CatalogSale.fromJson(Map<String,dynamic> m) {
    return CatalogSale(cs_bill_customer_sk: m['cs_bill_customer_sk'] as int, cs_sales_price: m['cs_sales_price'] as double, cs_sold_date_sk: m['cs_sold_date_sk'] as int);
  }
}
_structParsers['CatalogSale'] = (m) => CatalogSale.fromJson(m);

class Customer {
  int c_customer_sk;
  int c_current_addr_sk;
  Customer({required this.c_customer_sk, required this.c_current_addr_sk});
  factory Customer.fromJson(Map<String,dynamic> m) {
    return Customer(c_customer_sk: m['c_customer_sk'] as int, c_current_addr_sk: m['c_current_addr_sk'] as int);
  }
}
_structParsers['Customer'] = (m) => Customer.fromJson(m);

class CustomerAddress {
  int ca_address_sk;
  String ca_zip;
  String ca_state;
  CustomerAddress({required this.ca_address_sk, required this.ca_zip, required this.ca_state});
  factory CustomerAddress.fromJson(Map<String,dynamic> m) {
    return CustomerAddress(ca_address_sk: m['ca_address_sk'] as int, ca_zip: m['ca_zip'] as String, ca_state: m['ca_state'] as String);
  }
}
_structParsers['CustomerAddress'] = (m) => CustomerAddress.fromJson(m);

class DateDim {
  int d_date_sk;
  int d_qoy;
  int d_year;
  DateDim({required this.d_date_sk, required this.d_qoy, required this.d_year});
  factory DateDim.fromJson(Map<String,dynamic> m) {
    return DateDim(d_date_sk: m['d_date_sk'] as int, d_qoy: m['d_qoy'] as int, d_year: m['d_year'] as int);
  }
}
_structParsers['DateDim'] = (m) => DateDim.fromJson(m);

void test_TPCDS_Q15_zip() {
  if (!(_equal(filtered, [{"ca_zip": "85669", "sum_sales": 600}]))) { throw Exception('expect failed'); }
}

void main() {
  int failures = 0;
  List<Map<String, dynamic>> catalog_sales = [{"cs_bill_customer_sk": 1, "cs_sales_price": 600, "cs_sold_date_sk": 1}];
  List<Map<String, int>> customer = [{"c_customer_sk": 1, "c_current_addr_sk": 1}];
  List<Map<String, dynamic>> customer_address = [{"ca_address_sk": 1, "ca_zip": "85669", "ca_state": "CA"}];
  List<Map<String, int>> date_dim = [{"d_date_sk": 1, "d_qoy": 1, "d_year": 2000}];
  List<Map<String, dynamic>> filtered = (() {
  var groups = <String,_Group>{};
  var order = <String>[];
  for (var cs in catalog_sales) {
    for (var c in customer) {
      if (!(_equal(cs.cs_bill_customer_sk, c.c_customer_sk))) {
        continue;
      }
      for (var ca in customer_address) {
        if (!(_equal(c.c_current_addr_sk, ca.ca_address_sk))) {
          continue;
        }
        for (var d in date_dim) {
          if (!(_equal(cs.cs_sold_date_sk, d.d_date_sk))) {
            continue;
          }
          if (!(((((((["85669", "86197", "88274", "83405", "86475", "85392", "85460", "80348", "81792"].contains(substr(ca.ca_zip, 0, 5))) || (["CA", "WA", "GA"].contains(ca.ca_state))) || (cs.cs_sales_price > 500))) && _equal(d.d_qoy, 1)) && _equal(d.d_year, 2000)))) {
            continue;
          }
          var key = {"zip": ca.ca_zip};
          var ks = key.toString();
          var g = groups[ks];
          if (g == null) {
            g = _Group(key);
            groups[ks] = g;
            order.add(ks);
          }
          g.Items.add(cs);
        }
      }
    }
  }
  var items = [for (var k in order) groups[k]!];
  items.sort((gA, gB) {
    var g = gA;
    var keyA = g.key.zip;
    g = gB;
    var keyB = g.key.zip;
    return Comparable.compare(keyA, keyB);
  });
  var _res = [];
  for (var g in items) {
    _res.add({"ca_zip": g.key.zip, "sum_sales": _sum((() {
  var _res = [];
  for (var x in g) {
    _res.add(x.cs_sales_price);
  }
  return _res;
})())});
  }
  return _res;
})();
  _json(filtered);
  if (!_runTest("TPCDS Q15 zip", test_TPCDS_Q15_zip)) failures++;
  if (failures > 0) {
    print("\n[FAIL] $failures test(s) failed.");
  }
}

class _Group {
    dynamic key;
    List<dynamic> Items = [];
    _Group(this.key);
    int count() => _count(this);
    double sum() => _sum(this);
    double avg() => _avg(this);
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}

double _sum(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else if (v is _Group) list = v.Items;
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var s = 0.0;
    for (var n in list) s += (n as num).toDouble();
    return s;
}


