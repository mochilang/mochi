// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:06Z
import 'dart:io';
import 'dart:convert';

class CatalogSale {
  int cs_order_number;
  int cs_ship_date_sk;
  int cs_ship_addr_sk;
  int cs_call_center_sk;
  int cs_warehouse_sk;
  double cs_ext_ship_cost;
  double cs_net_profit;
  CatalogSale(this.cs_order_number, this.cs_ship_date_sk, this.cs_ship_addr_sk, this.cs_call_center_sk, this.cs_warehouse_sk, this.cs_ext_ship_cost, this.cs_net_profit);
}

class DateDim {
  int d_date_sk;
  String d_date;
  DateDim(this.d_date_sk, this.d_date);
}

class CustomerAddress {
  int ca_address_sk;
  String ca_state;
  CustomerAddress(this.ca_address_sk, this.ca_state);
}

class CallCenter {
  int cc_call_center_sk;
  String cc_county;
  CallCenter(this.cc_call_center_sk, this.cc_county);
}

class CatalogReturn {
  int cr_order_number;
  CatalogReturn(this.cr_order_number);
}

var catalog_sales = [{'cs_order_number': 1, 'cs_ship_date_sk': 1, 'cs_ship_addr_sk': 1, 'cs_call_center_sk': 1, 'cs_warehouse_sk': 1, 'cs_ext_ship_cost': 5, 'cs_net_profit': 20}, {'cs_order_number': 1, 'cs_ship_date_sk': 1, 'cs_ship_addr_sk': 1, 'cs_call_center_sk': 1, 'cs_warehouse_sk': 2, 'cs_ext_ship_cost': 0, 'cs_net_profit': 0}];

var date_dim = [{'d_date_sk': 1, 'd_date': '2000-03-01'}];

var customer_address = [{'ca_address_sk': 1, 'ca_state': 'CA'}];

var call_center = [{'cc_call_center_sk': 1, 'cc_county': 'CountyA'}];

var catalog_returns = [];

List<any> distinct(List<any> xs) {
  var out = [];
  for (var x in xs) {
    if (!contains(out, x)) {
      out = List.from(out)..add(x);
    }
  }
  return out;
}

var filtered = (() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var cs1 in catalog_sales) {
    for (var d in date_dim) {
      if (!(cs1['cs_ship_date_sk'] == d['d_date_sk'] && d['d_date'].toString().compareTo('2000-03-01') >= 0 && d['d_date'].toString().compareTo('2000-04-30') <= 0)) continue;
      for (var ca in customer_address) {
        if (!(cs1['cs_ship_addr_sk'] == ca['ca_address_sk'] && ca['ca_state'] == 'CA')) continue;
        for (var cc in call_center) {
          if (!(cs1['cs_call_center_sk'] == cc['cc_call_center_sk'] && cc['cc_county'] == 'CountyA')) continue;
          if (!((() {
  var _q2 = <dynamic>[];
  for (var cs2 in catalog_sales) {
    if (!(cs1['cs_order_number'] == cs2['cs_order_number'] && cs1['cs_warehouse_sk'] != cs2['cs_warehouse_sk'])) continue;
    _q2.add(cs2);
  }
  return _q2;
})().isNotEmpty && (() {
  var _q3 = <dynamic>[];
  for (var cr in catalog_returns) {
    if (!(cs1['cs_order_number'] == cr['cr_order_number'])) continue;
    _q3.add(cr);
  }
  return _q3;
})().isNotEmpty == false)) continue;
          var _k7 = {};
          var _k7_s = jsonEncode(_k7);
          _g1.putIfAbsent(_k7_s, () => <dynamic>[]).add({'cs1': cs1, 'd': d, 'ca': ca, 'cc': cc});
        }
      }
    }
  }
  for (var entry in _g1.entries) {
    var g = entry.value;
    var _k7 = jsonDecode(entry.key);
    _q0.add({'order_count': distinct((() {
  var _q8 = <dynamic>[];
  for (var x in g) {
    _q8.add(x['cs_order_number']);
  }
  return _q8;
})()).length, 'total_shipping_cost': _sum(g.map((x) => x['cs_ext_ship_cost'])), 'total_net_profit': _sum(g.map((x) => x['cs_net_profit']))});
  }
  return _q0;
})();

void main() {
  print(jsonEncode(filtered));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
