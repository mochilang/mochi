// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:06Z
import 'dart:io';
import 'dart:convert';

var customer = [{'c_customer_sk': 1, 'c_last_name': 'Smith', 'c_first_name': 'John'}, {'c_customer_sk': 2, 'c_last_name': 'Jones', 'c_first_name': 'Alice'}];

var store_sales = [{'ss_customer_sk': 1, 'd_month_seq': 1200}, {'ss_customer_sk': 2, 'd_month_seq': 1205}];

var catalog_sales = [{'cs_bill_customer_sk': 1, 'd_month_seq': 1203}];

var web_sales = [{'ws_bill_customer_sk': 1, 'd_month_seq': 1206}];

List<any> distinct(List<any> xs) {
  var out = [];
  for (var x in xs) {
    if (!contains(out, x)) {
      out = List.from(out)..add(x);
    }
  }
  return out;
}

var store_ids = distinct((() {
  var _q0 = <dynamic>[];
  for (var s in store_sales) {
    if (!(s['d_month_seq'] >= 1200 && s['d_month_seq'] <= 1211)) continue;
    _q0.add(s['ss_customer_sk']);
  }
  return _q0;
})());

var catalog_ids = distinct((() {
  var _q1 = <dynamic>[];
  for (var c in catalog_sales) {
    if (!(c['d_month_seq'] >= 1200 && c['d_month_seq'] <= 1211)) continue;
    _q1.add(c['cs_bill_customer_sk']);
  }
  return _q1;
})());

var web_ids = distinct((() {
  var _q2 = <dynamic>[];
  for (var w in web_sales) {
    if (!(w['d_month_seq'] >= 1200 && w['d_month_seq'] <= 1211)) continue;
    _q2.add(w['ws_bill_customer_sk']);
  }
  return _q2;
})());

var hot = store_ids.where((x) => catalog_ids.contains(x)).toList().where((x) => web_ids.contains(x)).toList();

var result = hot.length;

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
