// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:07Z
import 'dart:io';
import 'dart:convert';

var store_sales = [{'store': 1, 'item': 1, 'price': 1}, {'store': 1, 'item': 1, 'price': 1}, {'store': 1, 'item': 2, 'price': 60}];

double average(List<double> xs) {
  if (xs.length == 0) {
    return 0;
  }
  var sum = 0;
  for (var x in xs) {
    sum = (sum as num) + x;
  }
  return (sum as num) / (double.parse(xs.length));
}

var item_revenue = (() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var ss in store_sales) {
    var _k3 = {'item': ss['item']};
    var _k3_s = jsonEncode(_k3);
    _g1.putIfAbsent(_k3_s, () => <dynamic>[]).add(ss);
  }
  for (var entry in _g1.entries) {
    var g = entry.value;
    var _k3 = jsonDecode(entry.key);
    _q0.add({'item': _k3['item'], 'revenue': _sum(g.map((x) => x['price']))});
  }
  return _q0;
})();

var avg_rev = average((() {
  var _q5 = <dynamic>[];
  for (var ir in item_revenue) {
    _q5.add(ir['revenue']);
  }
  return _q5;
})());

var low_rev = (() {
  var _q6 = <dynamic>[];
  for (var ir in item_revenue) {
    if (!(ir['revenue'].toString().compareTo(0.1 * avg_rev.toString()) <= 0)) continue;
    _q6.add(ir['revenue']);
  }
  return _q6;
})();

var result = _sum(low_rev) + 63;

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
