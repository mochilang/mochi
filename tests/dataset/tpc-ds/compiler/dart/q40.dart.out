// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:06Z
import 'dart:io';
import 'dart:convert';

var catalog_sales = [{'order': 1, 'item_sk': 1, 'warehouse_sk': 1, 'date_sk': 1, 'price': 100}, {'order': 2, 'item_sk': 1, 'warehouse_sk': 1, 'date_sk': 2, 'price': 150}];

var catalog_returns = [{'order': 2, 'item_sk': 1, 'refunded': 150}];

var item = [{'item_sk': 1, 'item_id': 'I1', 'current_price': 1.2}];

var warehouse = [{'warehouse_sk': 1, 'state': 'CA'}];

var date_dim = [{'date_sk': 1, 'date': '2020-01-10'}, {'date_sk': 2, 'date': '2020-01-20'}];

var sales_date = '2020-01-15';

var records = (() {
  var _q0 = <dynamic>[];
  for (var cs in catalog_sales) {
    var _jt1 = <dynamic>[];
    for (var cr in catalog_returns) {
      if (!(cs['order'] == cr['order'] && cs['item_sk'] == cr['item_sk'])) continue;
      _jt1.add(cr);
    }
    if (_jt1.isEmpty) _jt1.add(null);
    for (var cr in _jt1) {
      for (var w in warehouse) {
        if (!(cs['warehouse_sk'] == w['warehouse_sk'])) continue;
        for (var i in item) {
          if (!(cs['item_sk'] == i['item_sk'])) continue;
          for (var d in date_dim) {
            if (!(cs['date_sk'] == d['date_sk'])) continue;
            if (!(i['current_price'].toString().compareTo(0.99.toString()) >= 0 && i['current_price'].toString().compareTo(1.49.toString()) <= 0)) continue;
            _q0.add({'w_state': w['state'], 'i_item_id': i['item_id'], 'sold_date': d['date'], 'net': (cs['price'] as num) - (((cr == null ? 0 : cr['refunded'])) as num)});
          }
        }
      }
    }
  }
  return _q0;
})();

var result = (() {
  var _q2 = <dynamic>[];
  var _g3 = <String, List<dynamic>>{};
  for (var r in records) {
    var _k6 = {'w_state': r['w_state'], 'i_item_id': r['i_item_id']};
    var _k6_s = jsonEncode(_k6);
    _g3.putIfAbsent(_k6_s, () => <dynamic>[]).add(r);
  }
  for (var entry in _g3.entries) {
    var g = entry.value;
    var _k6 = jsonDecode(entry.key);
    _q2.add({'w_state': _k6['w_state'], 'i_item_id': _k6['i_item_id'], 'sales_before': _sum(g.map((x) => (x['sold_date'].toString().compareTo(sales_date) < 0 ? x['net'] : 0))), 'sales_after': _sum(g.map((x) => (x['sold_date'].toString().compareTo(sales_date) >= 0 ? x['net'] : 0)))});
  }
  return _q2;
})();

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
