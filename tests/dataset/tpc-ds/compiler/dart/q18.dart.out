import 'dart:io';
import 'dart:convert';

class CatalogSale {
  int cs_quantity;
  double cs_list_price;
  double cs_coupon_amt;
  double cs_sales_price;
  double cs_net_profit;
  int cs_bill_cdemo_sk;
  int cs_bill_customer_sk;
  int cs_sold_date_sk;
  int cs_item_sk;
  CatalogSale({required this.cs_quantity, required this.cs_list_price, required this.cs_coupon_amt, required this.cs_sales_price, required this.cs_net_profit, required this.cs_bill_cdemo_sk, required this.cs_bill_customer_sk, required this.cs_sold_date_sk, required this.cs_item_sk});
  factory CatalogSale.fromJson(Map<String,dynamic> m) {
    return CatalogSale(cs_quantity: m['cs_quantity'] as int, cs_list_price: m['cs_list_price'] as double, cs_coupon_amt: m['cs_coupon_amt'] as double, cs_sales_price: m['cs_sales_price'] as double, cs_net_profit: m['cs_net_profit'] as double, cs_bill_cdemo_sk: m['cs_bill_cdemo_sk'] as int, cs_bill_customer_sk: m['cs_bill_customer_sk'] as int, cs_sold_date_sk: m['cs_sold_date_sk'] as int, cs_item_sk: m['cs_item_sk'] as int);
  }
}
_structParsers['CatalogSale'] = (m) => CatalogSale.fromJson(m);

class CustomerDemographics {
  int cd_demo_sk;
  String cd_gender;
  String cd_education_status;
  int cd_dep_count;
  CustomerDemographics({required this.cd_demo_sk, required this.cd_gender, required this.cd_education_status, required this.cd_dep_count});
  factory CustomerDemographics.fromJson(Map<String,dynamic> m) {
    return CustomerDemographics(cd_demo_sk: m['cd_demo_sk'] as int, cd_gender: m['cd_gender'] as String, cd_education_status: m['cd_education_status'] as String, cd_dep_count: m['cd_dep_count'] as int);
  }
}
_structParsers['CustomerDemographics'] = (m) => CustomerDemographics.fromJson(m);

class Customer {
  int c_customer_sk;
  int c_current_cdemo_sk;
  int c_current_addr_sk;
  int c_birth_year;
  int c_birth_month;
  Customer({required this.c_customer_sk, required this.c_current_cdemo_sk, required this.c_current_addr_sk, required this.c_birth_year, required this.c_birth_month});
  factory Customer.fromJson(Map<String,dynamic> m) {
    return Customer(c_customer_sk: m['c_customer_sk'] as int, c_current_cdemo_sk: m['c_current_cdemo_sk'] as int, c_current_addr_sk: m['c_current_addr_sk'] as int, c_birth_year: m['c_birth_year'] as int, c_birth_month: m['c_birth_month'] as int);
  }
}
_structParsers['Customer'] = (m) => Customer.fromJson(m);

class CustomerAddress {
  int ca_address_sk;
  String ca_country;
  String ca_state;
  String ca_county;
  CustomerAddress({required this.ca_address_sk, required this.ca_country, required this.ca_state, required this.ca_county});
  factory CustomerAddress.fromJson(Map<String,dynamic> m) {
    return CustomerAddress(ca_address_sk: m['ca_address_sk'] as int, ca_country: m['ca_country'] as String, ca_state: m['ca_state'] as String, ca_county: m['ca_county'] as String);
  }
}
_structParsers['CustomerAddress'] = (m) => CustomerAddress.fromJson(m);

class DateDim {
  int d_date_sk;
  int d_year;
  DateDim({required this.d_date_sk, required this.d_year});
  factory DateDim.fromJson(Map<String,dynamic> m) {
    return DateDim(d_date_sk: m['d_date_sk'] as int, d_year: m['d_year'] as int);
  }
}
_structParsers['DateDim'] = (m) => DateDim.fromJson(m);

class Item {
  int i_item_sk;
  String i_item_id;
  Item({required this.i_item_sk, required this.i_item_id});
  factory Item.fromJson(Map<String,dynamic> m) {
    return Item(i_item_sk: m['i_item_sk'] as int, i_item_id: m['i_item_id'] as String);
  }
}
_structParsers['Item'] = (m) => Item.fromJson(m);

void test_TPCDS_Q18_averages() {
  if (!(_equal(result, [{"i_item_id": "I1", "ca_country": "US", "ca_state": "CA", "ca_county": "County1", "agg1": 1, "agg2": 10, "agg3": 1, "agg4": 9, "agg5": 2, "agg6": 1980, "agg7": 2}]))) { throw Exception('expect failed'); }
}

void main() {
  int failures = 0;
  List<Map<String, dynamic>> catalog_sales = [{"cs_quantity": 1, "cs_list_price": 10, "cs_coupon_amt": 1, "cs_sales_price": 9, "cs_net_profit": 2, "cs_bill_cdemo_sk": 1, "cs_bill_customer_sk": 1, "cs_sold_date_sk": 1, "cs_item_sk": 1}];
  List<Map<String, dynamic>> customer_demographics = [{"cd_demo_sk": 1, "cd_gender": "M", "cd_education_status": "College", "cd_dep_count": 2}, {"cd_demo_sk": 2, "cd_gender": "F", "cd_education_status": "College", "cd_dep_count": 2}];
  List<Map<String, int>> customer = [{"c_customer_sk": 1, "c_current_cdemo_sk": 2, "c_current_addr_sk": 1, "c_birth_year": 1980, "c_birth_month": 1}];
  List<Map<String, dynamic>> customer_address = [{"ca_address_sk": 1, "ca_country": "US", "ca_state": "CA", "ca_county": "County1"}];
  List<Map<String, int>> date_dim = [{"d_date_sk": 1, "d_year": 1999}];
  List<Map<String, dynamic>> item = [{"i_item_sk": 1, "i_item_id": "I1"}];
  List<Map<String, dynamic>> joined = (() {
  var _res = [];
  for (var cs in catalog_sales) {
    for (var cd1 in customer_demographics) {
      if (!(((_equal(cs['cs_bill_cdemo_sk'], cd1['cd_demo_sk']) && _equal(cd1['cd_gender'], "M")) && _equal(cd1['cd_education_status'], "College")))) {
        continue;
      }
      for (var c in customer) {
        if (!(_equal(cs['cs_bill_customer_sk'], c['c_customer_sk']))) {
          continue;
        }
        for (var cd2 in customer_demographics) {
          if (!(_equal(c['c_current_cdemo_sk'], cd2['cd_demo_sk']))) {
            continue;
          }
          for (var ca in customer_address) {
            if (!(_equal(c['c_current_addr_sk'], ca['ca_address_sk']))) {
              continue;
            }
            for (var d in date_dim) {
              if (!((_equal(cs['cs_sold_date_sk'], d['d_date_sk']) && (d['d_year'] == 1999)))) {
                continue;
              }
              for (var i in item) {
                if (!(_equal(cs['cs_item_sk'], i['i_item_sk']))) {
                  continue;
                }
                _res.add({"i_item_id": i['i_item_id'], "ca_country": ca['ca_country'], "ca_state": ca['ca_state'], "ca_county": ca['ca_county'], "q": cs['cs_quantity'], "lp": cs['cs_list_price'], "cp": cs['cs_coupon_amt'], "sp": cs['cs_sales_price'], "np": cs['cs_net_profit'], "by": c['c_birth_year'], "dep": cd1['cd_dep_count']});
              }
            }
          }
        }
      }
    }
  }
  return _res;
})();
  List<Map<String, dynamic>> result = _group_by(joined, (j) => {"i_item_id": j['i_item_id'], "ca_country": j['ca_country'], "ca_state": j['ca_state'], "ca_county": j['ca_county']}).map((g) => {"i_item_id": g.key.i_item_id, "ca_country": g.key.ca_country, "ca_state": g.key.ca_state, "ca_county": g.key.ca_county, "agg1": _avg((() {
  var _res = [];
  for (var x in g) {
    _res.add(x.q);
  }
  return _res;
})()), "agg2": _avg((() {
  var _res = [];
  for (var x in g) {
    _res.add(x.lp);
  }
  return _res;
})()), "agg3": _avg((() {
  var _res = [];
  for (var x in g) {
    _res.add(x.cp);
  }
  return _res;
})()), "agg4": _avg((() {
  var _res = [];
  for (var x in g) {
    _res.add(x.sp);
  }
  return _res;
})()), "agg5": _avg((() {
  var _res = [];
  for (var x in g) {
    _res.add(x.np);
  }
  return _res;
})()), "agg6": _avg((() {
  var _res = [];
  for (var x in g) {
    _res.add(x.by);
  }
  return _res;
})()), "agg7": _avg((() {
  var _res = [];
  for (var x in g) {
    _res.add(x.dep);
  }
  return _res;
})())}).toList();
  _json(result);
  if (!_runTest("TPCDS Q18 averages", test_TPCDS_Q18_averages)) failures++;
  if (failures > 0) {
    print("\n[FAIL] $failures test(s) failed.");
  }
}

class _Group {
    dynamic key;
    List<dynamic> Items = [];
    _Group(this.key);
    int count() => _count(this);
    double sum() => _sum(this);
    double avg() => _avg(this);
}

double _avg(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else if (v is _Group) list = v.Items;
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var s = 0.0;
    for (var n in list) s += (n as num).toDouble();
    return s / list.length;
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

List<_Group> _group_by(List<dynamic> src, dynamic Function(dynamic) keyfn) {
    var groups = <String,_Group>{};
    var order = <String>[];
    for (var it in src) {
        var key = keyfn(it);
        var ks = key.toString();
        var g = groups[ks];
        if (g == null) {
            g = _Group(key);
            groups[ks] = g;
            order.add(ks);
        }
        g.Items.add(it);
    }
    return [for (var k in order) groups[k]!];
}

void _json(dynamic v) {
    print(jsonEncode(v));
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}


