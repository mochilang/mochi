// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:06Z
import 'dart:io';
import 'dart:convert';

var web_returns = [{'wr_returning_customer_sk': 1, 'wr_returned_date_sk': 1, 'wr_return_amt': 100, 'wr_returning_addr_sk': 1}, {'wr_returning_customer_sk': 2, 'wr_returned_date_sk': 1, 'wr_return_amt': 30, 'wr_returning_addr_sk': 2}, {'wr_returning_customer_sk': 1, 'wr_returned_date_sk': 1, 'wr_return_amt': 50, 'wr_returning_addr_sk': 1}];

var date_dim = [{'d_date_sk': 1, 'd_year': 2000}];

var customer_address = [{'ca_address_sk': 1, 'ca_state': 'CA'}, {'ca_address_sk': 2, 'ca_state': 'CA'}];

var customer = [{'c_customer_sk': 1, 'c_customer_id': 'C1', 'c_first_name': 'John', 'c_last_name': 'Doe', 'c_current_addr_sk': 1}, {'c_customer_sk': 2, 'c_customer_id': 'C2', 'c_first_name': 'Jane', 'c_last_name': 'Smith', 'c_current_addr_sk': 2}];

var customer_total_return = (() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var wr in web_returns) {
    for (var d in date_dim) {
      if (!(wr['wr_returned_date_sk'] == d['d_date_sk'])) continue;
      for (var ca in customer_address) {
        if (!(wr['wr_returning_addr_sk'] == ca['ca_address_sk'])) continue;
        if (!(d['d_year'] == 2000 && ca['ca_state'] == 'CA')) continue;
        var _k3 = {'cust': wr['wr_returning_customer_sk'], 'state': ca['ca_state']};
        var _k3_s = jsonEncode(_k3);
        _g1.putIfAbsent(_k3_s, () => <dynamic>[]).add({'wr': wr, 'd': d, 'ca': ca});
      }
    }
  }
  for (var entry in _g1.entries) {
    var g = entry.value;
    var _k3 = jsonDecode(entry.key);
    _q0.add({'ctr_customer_sk': _k3['cust'], 'ctr_state': _k3['state'], 'ctr_total_return': _sum(g.map((x) => x['wr_return_amt']))});
  }
  return _q0;
})();

var avg_by_state = (() {
  var _q5 = <dynamic>[];
  var _g6 = <String, List<dynamic>>{};
  for (var ctr in customer_total_return) {
    var _k9 = ctr['ctr_state'];
    var _k9_s = jsonEncode(_k9);
    _g6.putIfAbsent(_k9_s, () => <dynamic>[]).add(ctr);
  }
  for (var entry in _g6.entries) {
    var g = entry.value;
    var _k9 = jsonDecode(entry.key);
    _q5.add({'state': _k9, 'avg_return': (() { var _t11 = (() {
  var _q10 = <dynamic>[];
  for (var x in g) {
    _q10.add(x['ctr_total_return']);
  }
  return _q10;
})(); return (_t11.isEmpty ? 0 : _t11.reduce((a, b) => a + b) / _t11.length); })()});
  }
  return _q5;
})();

var result = (() {
  var _q12 = <dynamic>[];
  for (var ctr in customer_total_return) {
    for (var avg in avg_by_state) {
      if (!(ctr['ctr_state'] == avg['state'])) continue;
      for (var c in customer) {
        if (!(ctr['ctr_customer_sk'] == c['c_customer_sk'])) continue;
        if (!(ctr['ctr_total_return'].toString().compareTo((avg['avg_return'] as num) * 1.2.toString()) > 0)) continue;
        _q12.add({'c_customer_id': c['c_customer_id'], 'c_first_name': c['c_first_name'], 'c_last_name': c['c_last_name'], 'ctr_total_return': ctr['ctr_total_return']});
      }
    }
  }
  return _q12;
})();

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
