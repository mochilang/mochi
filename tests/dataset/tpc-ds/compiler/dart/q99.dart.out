// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:07Z
import 'dart:io';
import 'dart:convert';

class CatalogSale {
  int cs_ship_date_sk;
  int cs_sold_date_sk;
  int cs_warehouse_sk;
  int cs_ship_mode_sk;
  int cs_call_center_sk;
  CatalogSale(this.cs_ship_date_sk, this.cs_sold_date_sk, this.cs_warehouse_sk, this.cs_ship_mode_sk, this.cs_call_center_sk);
}

class Warehouse {
  int w_warehouse_sk;
  String w_warehouse_name;
  Warehouse(this.w_warehouse_sk, this.w_warehouse_name);
}

class ShipMode {
  int sm_ship_mode_sk;
  String sm_type;
  ShipMode(this.sm_ship_mode_sk, this.sm_type);
}

class CallCenter {
  int cc_call_center_sk;
  String cc_name;
  CallCenter(this.cc_call_center_sk, this.cc_name);
}

var catalog_sales = [{'cs_ship_date_sk': 31, 'cs_sold_date_sk': 1, 'cs_warehouse_sk': 1, 'cs_ship_mode_sk': 1, 'cs_call_center_sk': 1}, {'cs_ship_date_sk': 51, 'cs_sold_date_sk': 1, 'cs_warehouse_sk': 1, 'cs_ship_mode_sk': 1, 'cs_call_center_sk': 1}, {'cs_ship_date_sk': 71, 'cs_sold_date_sk': 1, 'cs_warehouse_sk': 1, 'cs_ship_mode_sk': 1, 'cs_call_center_sk': 1}, {'cs_ship_date_sk': 101, 'cs_sold_date_sk': 1, 'cs_warehouse_sk': 1, 'cs_ship_mode_sk': 1, 'cs_call_center_sk': 1}, {'cs_ship_date_sk': 131, 'cs_sold_date_sk': 1, 'cs_warehouse_sk': 1, 'cs_ship_mode_sk': 1, 'cs_call_center_sk': 1}];

var warehouse = [{'w_warehouse_sk': 1, 'w_warehouse_name': 'Warehouse1'}];

var ship_mode = [{'sm_ship_mode_sk': 1, 'sm_type': 'EXP'}];

var call_center = [{'cc_call_center_sk': 1, 'cc_name': 'CC1'}];

var grouped = (() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var cs in catalog_sales) {
    for (var w in warehouse) {
      if (!(cs['cs_warehouse_sk'] == w['w_warehouse_sk'])) continue;
      for (var sm in ship_mode) {
        if (!(cs['cs_ship_mode_sk'] == sm['sm_ship_mode_sk'])) continue;
        for (var cc in call_center) {
          if (!(cs['cs_call_center_sk'] == cc['cc_call_center_sk'])) continue;
          var _k7 = {'warehouse': substr(w['w_warehouse_name'], 0, 20), 'sm_type': sm['sm_type'], 'cc_name': cc['cc_name']};
          var _k7_s = jsonEncode(_k7);
          _g1.putIfAbsent(_k7_s, () => <dynamic>[]).add({'cs': cs, 'w': w, 'sm': sm, 'cc': cc});
        }
      }
    }
  }
  for (var entry in _g1.entries) {
    var g = entry.value;
    var _k7 = jsonDecode(entry.key);
    _q0.add({'warehouse': _k7['warehouse'], 'sm_type': _k7['sm_type'], 'cc_name': _k7['cc_name'], 'd30': (() {
  var _q8 = <dynamic>[];
  for (var x in g) {
    if (!((x['cs_ship_date_sk'] as num) - (x['cs_sold_date_sk'] as num).toString().compareTo(30.toString()) <= 0)) continue;
    _q8.add(x);
  }
  return _q8;
})().length, 'd60': (() {
  var _q9 = <dynamic>[];
  for (var x in g) {
    if (!((x['cs_ship_date_sk'] as num) - (x['cs_sold_date_sk'] as num).toString().compareTo(30.toString()) > 0 && (x['cs_ship_date_sk'] as num) - (x['cs_sold_date_sk'] as num).toString().compareTo(60.toString()) <= 0)) continue;
    _q9.add(x);
  }
  return _q9;
})().length, 'd90': (() {
  var _q10 = <dynamic>[];
  for (var x in g) {
    if (!((x['cs_ship_date_sk'] as num) - (x['cs_sold_date_sk'] as num).toString().compareTo(60.toString()) > 0 && (x['cs_ship_date_sk'] as num) - (x['cs_sold_date_sk'] as num).toString().compareTo(90.toString()) <= 0)) continue;
    _q10.add(x);
  }
  return _q10;
})().length, 'd120': (() {
  var _q11 = <dynamic>[];
  for (var x in g) {
    if (!((x['cs_ship_date_sk'] as num) - (x['cs_sold_date_sk'] as num).toString().compareTo(90.toString()) > 0 && (x['cs_ship_date_sk'] as num) - (x['cs_sold_date_sk'] as num).toString().compareTo(120.toString()) <= 0)) continue;
    _q11.add(x);
  }
  return _q11;
})().length, 'dmore': (() {
  var _q12 = <dynamic>[];
  for (var x in g) {
    if (!((x['cs_ship_date_sk'] as num) - (x['cs_sold_date_sk'] as num).toString().compareTo(120.toString()) > 0)) continue;
    _q12.add(x);
  }
  return _q12;
})().length});
  }
  return _q0;
})();

void main() {
  print(jsonEncode(grouped));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
