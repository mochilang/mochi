// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:06Z
import 'dart:io';
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

class StoreSale {
  int ss_item_sk;
  int ss_sold_date_sk;
  int ss_customer_sk;
  int ss_quantity;
  double ss_sales_price;
  StoreSale(this.ss_item_sk, this.ss_sold_date_sk, this.ss_customer_sk, this.ss_quantity, this.ss_sales_price);
}

class DateDim {
  int d_date_sk;
  int d_year;
  int d_moy;
  DateDim(this.d_date_sk, this.d_year, this.d_moy);
}

class Item {
  int i_item_sk;
  Item(this.i_item_sk);
}

class CatalogSale {
  int cs_sold_date_sk;
  int cs_item_sk;
  int cs_bill_customer_sk;
  int cs_quantity;
  double cs_list_price;
  CatalogSale(this.cs_sold_date_sk, this.cs_item_sk, this.cs_bill_customer_sk, this.cs_quantity, this.cs_list_price);
}

class WebSale {
  int ws_sold_date_sk;
  int ws_item_sk;
  int ws_bill_customer_sk;
  int ws_quantity;
  double ws_list_price;
  WebSale(this.ws_sold_date_sk, this.ws_item_sk, this.ws_bill_customer_sk, this.ws_quantity, this.ws_list_price);
}

var store_sales = [{'ss_item_sk': 1, 'ss_sold_date_sk': 1, 'ss_customer_sk': 1, 'ss_quantity': 1, 'ss_sales_price': 10}, {'ss_item_sk': 1, 'ss_sold_date_sk': 1, 'ss_customer_sk': 1, 'ss_quantity': 1, 'ss_sales_price': 10}, {'ss_item_sk': 1, 'ss_sold_date_sk': 1, 'ss_customer_sk': 1, 'ss_quantity': 1, 'ss_sales_price': 10}, {'ss_item_sk': 1, 'ss_sold_date_sk': 1, 'ss_customer_sk': 1, 'ss_quantity': 1, 'ss_sales_price': 10}, {'ss_item_sk': 1, 'ss_sold_date_sk': 1, 'ss_customer_sk': 1, 'ss_quantity': 1, 'ss_sales_price': 10}, {'ss_item_sk': 2, 'ss_sold_date_sk': 1, 'ss_customer_sk': 2, 'ss_quantity': 1, 'ss_sales_price': 10}, {'ss_item_sk': 2, 'ss_sold_date_sk': 1, 'ss_customer_sk': 2, 'ss_quantity': 1, 'ss_sales_price': 10}, {'ss_item_sk': 2, 'ss_sold_date_sk': 1, 'ss_customer_sk': 2, 'ss_quantity': 1, 'ss_sales_price': 10}];

var date_dim = [{'d_date_sk': 1, 'd_year': 2000, 'd_moy': 1}];

var item = [{'i_item_sk': 1}, {'i_item_sk': 2}];

var catalog_sales = [{'cs_sold_date_sk': 1, 'cs_item_sk': 1, 'cs_bill_customer_sk': 1, 'cs_quantity': 2, 'cs_list_price': 10}, {'cs_sold_date_sk': 1, 'cs_item_sk': 2, 'cs_bill_customer_sk': 2, 'cs_quantity': 2, 'cs_list_price': 10}];

var web_sales = [{'ws_sold_date_sk': 1, 'ws_item_sk': 1, 'ws_bill_customer_sk': 1, 'ws_quantity': 3, 'ws_list_price': 10}, {'ws_sold_date_sk': 1, 'ws_item_sk': 2, 'ws_bill_customer_sk': 2, 'ws_quantity': 1, 'ws_list_price': 10}];

var frequent_ss_items = (() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var ss in store_sales) {
    for (var d in date_dim) {
      if (!(ss['ss_sold_date_sk'] == d['d_date_sk'])) continue;
      for (var i in item) {
        if (!(ss['ss_item_sk'] == i['i_item_sk'])) continue;
        if (!(d['d_year'] == 2000)) continue;
        var _k2 = {'item_sk': i['i_item_sk'], 'date_sk': d['d_date_sk']};
        var _k2_s = jsonEncode(_k2);
        _g1.putIfAbsent(_k2_s, () => <dynamic>[]).add({'ss': ss, 'd': d, 'i': i});
      }
    }
  }
  for (var entry in _g1.entries) {
    var g = entry.value;
    var _k2 = jsonDecode(entry.key);
    if (!(g.length > 4)) continue;
    _q0.add(_k2['item_sk']);
  }
  return _q0;
})();

var customer_totals = (() {
  var _q3 = <dynamic>[];
  var _g4 = <String, List<dynamic>>{};
  for (var ss in store_sales) {
    var _k6 = ss['ss_customer_sk'];
    var _k6_s = jsonEncode(_k6);
    _g4.putIfAbsent(_k6_s, () => <dynamic>[]).add(ss);
  }
  for (var entry in _g4.entries) {
    var g = entry.value;
    var _k6 = jsonDecode(entry.key);
    _q3.add({'cust': _k6, 'sales': _sum(g.map((x) => (x['ss_quantity'] as num) * (x['ss_sales_price'] as num)))});
  }
  return _q3;
})();

var max_sales = (() { var _t9 = (() {
  var _q8 = <dynamic>[];
  for (var c in customer_totals) {
    _q8.add(c['sales']);
  }
  return _q8;
})(); return _t9.reduce((a, b) => a > b ? a : b); })();

var best_ss_customer = (() {
  var _q10 = <dynamic>[];
  for (var c in customer_totals) {
    if (!(c['sales'].toString().compareTo(0.95 * (max_sales as num).toString()) > 0)) continue;
    _q10.add(c['cust']);
  }
  return _q10;
})();

var catalog = (() {
  var _q11 = <dynamic>[];
  for (var cs in catalog_sales) {
    for (var d in date_dim) {
      if (!(cs['cs_sold_date_sk'] == d['d_date_sk'])) continue;
      if (!(d['d_year'] == 2000 && d['d_moy'] == 1 && _in(cs['cs_bill_customer_sk'], best_ss_customer) && _in(cs['cs_item_sk'], frequent_ss_items))) continue;
      _q11.add((cs['cs_quantity'] as num) * (cs['cs_list_price'] as num));
    }
  }
  return _q11;
})();

var web = (() {
  var _q12 = <dynamic>[];
  for (var ws in web_sales) {
    for (var d in date_dim) {
      if (!(ws['ws_sold_date_sk'] == d['d_date_sk'])) continue;
      if (!(d['d_year'] == 2000 && d['d_moy'] == 1 && _in(ws['ws_bill_customer_sk'], best_ss_customer) && _in(ws['ws_item_sk'], frequent_ss_items))) continue;
      _q12.add((ws['ws_quantity'] as num) * (ws['ws_list_price'] as num));
    }
  }
  return _q12;
})();

var result = _sum(catalog) + _sum(web);

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
