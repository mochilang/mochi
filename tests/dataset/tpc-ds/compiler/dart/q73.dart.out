// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:07Z
import 'dart:io';
import 'dart:convert';

var store_sales = [{'ss_ticket_number': 1, 'ss_customer_sk': 1, 'ss_sold_date_sk': 1, 'ss_store_sk': 1, 'ss_hdemo_sk': 1}];

var date_dim = [{'d_date_sk': 1, 'd_dom': 1, 'd_year': 1998}];

var store = [{'s_store_sk': 1, 's_county': 'A'}];

var household_demographics = [{'hd_demo_sk': 1, 'hd_buy_potential': '1001-5000', 'hd_vehicle_count': 2, 'hd_dep_count': 3}];

var customer = [{'c_customer_sk': 1, 'c_last_name': 'Smith', 'c_first_name': 'Alice', 'c_salutation': 'Ms.', 'c_preferred_cust_flag': 'Y'}];

var groups = (() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var ss in store_sales) {
    for (var d in date_dim) {
      if (!(d['d_date_sk'] == ss['ss_sold_date_sk'])) continue;
      for (var s in store) {
        if (!(s['s_store_sk'] == ss['ss_store_sk'])) continue;
        for (var hd in household_demographics) {
          if (!(hd['hd_demo_sk'] == ss['ss_hdemo_sk'])) continue;
          if (!(d['d_dom'] >= 1 && d['d_dom'] <= 2 && (hd['hd_buy_potential'] == '1001-5000' || hd['hd_buy_potential'] == '0-500') && hd['hd_vehicle_count'].toString().compareTo(0.toString()) > 0 && (hd['hd_dep_count'] as num) / (hd['hd_vehicle_count'] as num).toString().compareTo(1.toString()) > 0 && (d['d_year'] == 1998 || d['d_year'] == 1999 || d['d_year'] == 2000) && s['s_county'] == 'A')) continue;
          var _k2 = {'ticket': ss['ss_ticket_number'], 'cust': ss['ss_customer_sk']};
          var _k2_s = jsonEncode(_k2);
          _g1.putIfAbsent(_k2_s, () => <dynamic>[]).add({'ss': ss, 'd': d, 's': s, 'hd': hd});
        }
      }
    }
  }
  for (var entry in _g1.entries) {
    var g = entry.value;
    var _k2 = jsonDecode(entry.key);
    _q0.add({'key': _k2, 'cnt': g.length});
  }
  return _q0;
})();

var result = (() {
  var _q3 = <dynamic>[];
  for (var g in groups) {
    for (var c in customer) {
      if (!(c['c_customer_sk'] == g['key']['cust'])) continue;
      if (!(g['cnt'].toString().compareTo(1.toString()) >= 0 && g['cnt'].toString().compareTo(5.toString()) <= 0)) continue;
      _q3.add([[-(g['cnt'] as num), c['c_last_name']], {'c_last_name': c['c_last_name'], 'c_first_name': c['c_first_name'], 'c_salutation': c['c_salutation'], 'c_preferred_cust_flag': c['c_preferred_cust_flag'], 'ss_ticket_number': g['key']['ticket'], 'cnt': g['cnt']}]);
    }
  }
  _q3.sort((a,b) => (jsonEncode(a[0]) as Comparable).compareTo(jsonEncode(b[0])));
  _q3 = [for (var x in _q3) x[1]];
  return _q3;
})();

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
