import 'dart:io';
import 'dart:convert';

class Customer {
  int c_customer_sk;
  int c_current_addr_sk;
  int c_current_cdemo_sk;
  Customer({required this.c_customer_sk, required this.c_current_addr_sk, required this.c_current_cdemo_sk});
  factory Customer.fromJson(Map<String,dynamic> m) {
    return Customer(c_customer_sk: m['c_customer_sk'] as int, c_current_addr_sk: m['c_current_addr_sk'] as int, c_current_cdemo_sk: m['c_current_cdemo_sk'] as int);
  }
}
_structParsers['Customer'] = (m) => Customer.fromJson(m);

class CustomerAddress {
  int ca_address_sk;
  String ca_county;
  CustomerAddress({required this.ca_address_sk, required this.ca_county});
  factory CustomerAddress.fromJson(Map<String,dynamic> m) {
    return CustomerAddress(ca_address_sk: m['ca_address_sk'] as int, ca_county: m['ca_county'] as String);
  }
}
_structParsers['CustomerAddress'] = (m) => CustomerAddress.fromJson(m);

class CustomerDemographics {
  int cd_demo_sk;
  String cd_gender;
  String cd_marital_status;
  String cd_education_status;
  int cd_purchase_estimate;
  String cd_credit_rating;
  int cd_dep_count;
  int cd_dep_employed_count;
  int cd_dep_college_count;
  CustomerDemographics({required this.cd_demo_sk, required this.cd_gender, required this.cd_marital_status, required this.cd_education_status, required this.cd_purchase_estimate, required this.cd_credit_rating, required this.cd_dep_count, required this.cd_dep_employed_count, required this.cd_dep_college_count});
  factory CustomerDemographics.fromJson(Map<String,dynamic> m) {
    return CustomerDemographics(cd_demo_sk: m['cd_demo_sk'] as int, cd_gender: m['cd_gender'] as String, cd_marital_status: m['cd_marital_status'] as String, cd_education_status: m['cd_education_status'] as String, cd_purchase_estimate: m['cd_purchase_estimate'] as int, cd_credit_rating: m['cd_credit_rating'] as String, cd_dep_count: m['cd_dep_count'] as int, cd_dep_employed_count: m['cd_dep_employed_count'] as int, cd_dep_college_count: m['cd_dep_college_count'] as int);
  }
}
_structParsers['CustomerDemographics'] = (m) => CustomerDemographics.fromJson(m);

class StoreSale {
  int ss_customer_sk;
  int ss_sold_date_sk;
  StoreSale({required this.ss_customer_sk, required this.ss_sold_date_sk});
  factory StoreSale.fromJson(Map<String,dynamic> m) {
    return StoreSale(ss_customer_sk: m['ss_customer_sk'] as int, ss_sold_date_sk: m['ss_sold_date_sk'] as int);
  }
}
_structParsers['StoreSale'] = (m) => StoreSale.fromJson(m);

class DateDim {
  int d_date_sk;
  int d_year;
  int d_moy;
  DateDim({required this.d_date_sk, required this.d_year, required this.d_moy});
  factory DateDim.fromJson(Map<String,dynamic> m) {
    return DateDim(d_date_sk: m['d_date_sk'] as int, d_year: m['d_year'] as int, d_moy: m['d_moy'] as int);
  }
}
_structParsers['DateDim'] = (m) => DateDim.fromJson(m);

void test_TPCDS_Q10_demographics_count() {
  if (!(_equal(result, [{"cd_gender": "F", "cd_marital_status": "M", "cd_education_status": "College", "cnt1": 1, "cd_purchase_estimate": 5000, "cnt2": 1, "cd_credit_rating": "Good", "cnt3": 1, "cd_dep_count": 1, "cnt4": 1, "cd_dep_employed_count": 1, "cnt5": 1, "cd_dep_college_count": 0, "cnt6": 1}]))) { throw Exception('expect failed'); }
}

void main() {
  int failures = 0;
  List<Map<String, int>> customer = [{"c_customer_sk": 1, "c_current_addr_sk": 1, "c_current_cdemo_sk": 1}];
  List<Map<String, dynamic>> customer_address = [{"ca_address_sk": 1, "ca_county": "CountyA"}];
  List<Map<String, dynamic>> customer_demographics = [{"cd_demo_sk": 1, "cd_gender": "F", "cd_marital_status": "M", "cd_education_status": "College", "cd_purchase_estimate": 5000, "cd_credit_rating": "Good", "cd_dep_count": 1, "cd_dep_employed_count": 1, "cd_dep_college_count": 0}];
  List<Map<String, int>> store_sales = [{"ss_customer_sk": 1, "ss_sold_date_sk": 1}];
  List web_sales = [];
  List catalog_sales = [];
  List<Map<String, int>> date_dim = [{"d_date_sk": 1, "d_year": 2000, "d_moy": 2}];
  List<Map<String, dynamic>> active = (() {
  var _res = [];
  for (var c in customer) {
    for (var ca in customer_address) {
      if (!((_equal(c['c_current_addr_sk'], ca['ca_address_sk']) && _equal(ca['ca_county'], "CountyA")))) {
        continue;
      }
      for (var cd in customer_demographics) {
        if (!(_equal(c['c_current_cdemo_sk'], cd['cd_demo_sk']))) {
          continue;
        }
        if (!(_exists((() {
  var _res = [];
  for (var ss in store_sales) {
    for (var d in date_dim) {
      if (!((ss['ss_sold_date_sk'] == d['d_date_sk']))) {
        continue;
      }
      if (!(((((ss['ss_customer_sk'] == c['c_customer_sk']) && (d['d_year'] == 2000)) && (d['d_moy'] >= 2)) && (d['d_moy'] <= 5)))) {
        continue;
      }
      _res.add(ss);
    }
  }
  return _res;
})()))) {
          continue;
        }
        _res.add(cd);
      }
    }
  }
  return _res;
})();
  List<Map<String, dynamic>> result = _group_by(active, (a) => {"gender": a['cd_gender'], "marital": a['cd_marital_status'], "education": a['cd_education_status'], "purchase": a['cd_purchase_estimate'], "credit": a['cd_credit_rating'], "dep": a['cd_dep_count'], "depemp": a['cd_dep_employed_count'], "depcol": a['cd_dep_college_count']}).map((g) => {"cd_gender": g.key.gender, "cd_marital_status": g.key.marital, "cd_education_status": g.key.education, "cnt1": _count((() {
  var _res = [];
  for (var _ in g) {
    _res.add(_);
  }
  return _res;
})()), "cd_purchase_estimate": g.key.purchase, "cnt2": _count((() {
  var _res = [];
  for (var _ in g) {
    _res.add(_);
  }
  return _res;
})()), "cd_credit_rating": g.key.credit, "cnt3": _count((() {
  var _res = [];
  for (var _ in g) {
    _res.add(_);
  }
  return _res;
})()), "cd_dep_count": g.key.dep, "cnt4": _count((() {
  var _res = [];
  for (var _ in g) {
    _res.add(_);
  }
  return _res;
})()), "cd_dep_employed_count": g.key.depemp, "cnt5": _count((() {
  var _res = [];
  for (var _ in g) {
    _res.add(_);
  }
  return _res;
})()), "cd_dep_college_count": g.key.depcol, "cnt6": _count((() {
  var _res = [];
  for (var _ in g) {
    _res.add(_);
  }
  return _res;
})())}).toList();
  _json(result);
  if (!_runTest("TPCDS Q10 demographics count", test_TPCDS_Q10_demographics_count)) failures++;
  if (failures > 0) {
    print("\n[FAIL] $failures test(s) failed.");
  }
}

class _Group {
    dynamic key;
    List<dynamic> Items = [];
    _Group(this.key);
    int count() => _count(this);
    double sum() => _sum(this);
    double avg() => _avg(this);
}

int _count(dynamic v) {
    if (v is String) return v.runes.length;
    if (v is List) return v.length;
    if (v is Map) return v.length;
    try { var items = (v as dynamic).Items; if (items is List) return items.length; } catch (_) {}
    try { var items = (v as dynamic).items; if (items is List) return items.length; } catch (_) {}
    return 0;
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

bool _exists(dynamic v) {
    if (v is String) return v.isNotEmpty;
    if (v is List) return v.isNotEmpty;
    if (v is Map) {
        if (v['items'] is List) return (v['items'] as List).isNotEmpty;
        if (v['Items'] is List) return (v['Items'] as List).isNotEmpty;
        return v.isNotEmpty;
    }
    try { var items = (v as dynamic).Items; if (items is List) return items.isNotEmpty; } catch (_) {}
    try { var items = (v as dynamic).items; if (items is List) return items.isNotEmpty; } catch (_) {}
    return false;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

List<_Group> _group_by(List<dynamic> src, dynamic Function(dynamic) keyfn) {
    var groups = <String,_Group>{};
    var order = <String>[];
    for (var it in src) {
        var key = keyfn(it);
        var ks = key.toString();
        var g = groups[ks];
        if (g == null) {
            g = _Group(key);
            groups[ks] = g;
            order.add(ks);
        }
        g.Items.add(it);
    }
    return [for (var k in order) groups[k]!];
}

void _json(dynamic v) {
    print(jsonEncode(v));
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}


