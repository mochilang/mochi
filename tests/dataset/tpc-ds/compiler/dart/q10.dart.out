// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:06Z
import 'dart:io';
import 'dart:convert';

class Customer {
  int c_customer_sk;
  int c_current_addr_sk;
  int c_current_cdemo_sk;
  Customer(this.c_customer_sk, this.c_current_addr_sk, this.c_current_cdemo_sk);
}

class CustomerAddress {
  int ca_address_sk;
  String ca_county;
  CustomerAddress(this.ca_address_sk, this.ca_county);
}

class CustomerDemographics {
  int cd_demo_sk;
  String cd_gender;
  String cd_marital_status;
  String cd_education_status;
  int cd_purchase_estimate;
  String cd_credit_rating;
  int cd_dep_count;
  int cd_dep_employed_count;
  int cd_dep_college_count;
  CustomerDemographics(this.cd_demo_sk, this.cd_gender, this.cd_marital_status, this.cd_education_status, this.cd_purchase_estimate, this.cd_credit_rating, this.cd_dep_count, this.cd_dep_employed_count, this.cd_dep_college_count);
}

class StoreSale {
  int ss_customer_sk;
  int ss_sold_date_sk;
  StoreSale(this.ss_customer_sk, this.ss_sold_date_sk);
}

class DateDim {
  int d_date_sk;
  int d_year;
  int d_moy;
  DateDim(this.d_date_sk, this.d_year, this.d_moy);
}

var customer = [{'c_customer_sk': 1, 'c_current_addr_sk': 1, 'c_current_cdemo_sk': 1}];

var customer_address = [{'ca_address_sk': 1, 'ca_county': 'CountyA'}];

var customer_demographics = [{'cd_demo_sk': 1, 'cd_gender': 'F', 'cd_marital_status': 'M', 'cd_education_status': 'College', 'cd_purchase_estimate': 5000, 'cd_credit_rating': 'Good', 'cd_dep_count': 1, 'cd_dep_employed_count': 1, 'cd_dep_college_count': 0}];

var store_sales = [{'ss_customer_sk': 1, 'ss_sold_date_sk': 1}];

var web_sales = [];

var catalog_sales = [];

var date_dim = [{'d_date_sk': 1, 'd_year': 2000, 'd_moy': 2}];

var active = (() {
  var _q0 = <dynamic>[];
  for (var c in customer) {
    for (var ca in customer_address) {
      if (!(c['c_current_addr_sk'] == ca['ca_address_sk'] && ca['ca_county'] == 'CountyA')) continue;
      for (var cd in customer_demographics) {
        if (!(c['c_current_cdemo_sk'] == cd['cd_demo_sk'])) continue;
        if (!((() {
  var _q1 = <dynamic>[];
  for (var ss in store_sales) {
    for (var d in date_dim) {
      if (!(ss['ss_sold_date_sk'] == d['d_date_sk'])) continue;
      if (!(ss['ss_customer_sk'] == c['c_customer_sk'] && d['d_year'] == 2000 && d['d_moy'] >= 2 && d['d_moy'] <= 5)) continue;
      _q1.add(ss);
    }
  }
  return _q1;
})().isNotEmpty)) continue;
        _q0.add(cd);
      }
    }
  }
  return _q0;
})();

var result = (() {
  var _q2 = <dynamic>[];
  var _g3 = <String, List<dynamic>>{};
  for (var a in active) {
    var _k10 = {'gender': a['cd_gender'], 'marital': a['cd_marital_status'], 'education': a['cd_education_status'], 'purchase': a['cd_purchase_estimate'], 'credit': a['cd_credit_rating'], 'dep': a['cd_dep_count'], 'depemp': a['cd_dep_employed_count'], 'depcol': a['cd_dep_college_count']};
    var _k10_s = jsonEncode(_k10);
    _g3.putIfAbsent(_k10_s, () => <dynamic>[]).add(a);
  }
  for (var entry in _g3.entries) {
    var g = entry.value;
    var _k10 = jsonDecode(entry.key);
    _q2.add({'cd_gender': _k10['gender'], 'cd_marital_status': _k10['marital'], 'cd_education_status': _k10['education'], 'cnt1': (() {
  var _q11 = <dynamic>[];
  for (var _ in g) {
    _q11.add(_);
  }
  return _q11;
})().length, 'cd_purchase_estimate': _k10['purchase'], 'cnt2': (() {
  var _q12 = <dynamic>[];
  for (var _ in g) {
    _q12.add(_);
  }
  return _q12;
})().length, 'cd_credit_rating': _k10['credit'], 'cnt3': (() {
  var _q13 = <dynamic>[];
  for (var _ in g) {
    _q13.add(_);
  }
  return _q13;
})().length, 'cd_dep_count': _k10['dep'], 'cnt4': (() {
  var _q14 = <dynamic>[];
  for (var _ in g) {
    _q14.add(_);
  }
  return _q14;
})().length, 'cd_dep_employed_count': _k10['depemp'], 'cnt5': (() {
  var _q15 = <dynamic>[];
  for (var _ in g) {
    _q15.add(_);
  }
  return _q15;
})().length, 'cd_dep_college_count': _k10['depcol'], 'cnt6': (() {
  var _q16 = <dynamic>[];
  for (var _ in g) {
    _q16.add(_);
  }
  return _q16;
})().length});
  }
  return _q2;
})();

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
