import 'dart:io';
import 'dart:convert';

void test_TPCDS_Q4_result() {
  if (!(_equal(result, [{"customer_id": "C1", "customer_first_name": "Alice", "customer_last_name": "A", "customer_login": "alice"}]))) { throw Exception('expect failed'); }
}

void main() {
  int failures = 0;
  List<Map<String, dynamic>> customer = [{"c_customer_sk": 1, "c_customer_id": "C1", "c_first_name": "Alice", "c_last_name": "A", "c_login": "alice"}];
  List<Map<String, dynamic>> store_sales = [{"ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_ext_list_price": 10, "ss_ext_wholesale_cost": 5, "ss_ext_discount_amt": 0, "ss_ext_sales_price": 10}, {"ss_customer_sk": 1, "ss_sold_date_sk": 2, "ss_ext_list_price": 20, "ss_ext_wholesale_cost": 5, "ss_ext_discount_amt": 0, "ss_ext_sales_price": 20}];
  List<Map<String, dynamic>> catalog_sales = [{"cs_bill_customer_sk": 1, "cs_sold_date_sk": 1, "cs_ext_list_price": 10, "cs_ext_wholesale_cost": 2, "cs_ext_discount_amt": 0, "cs_ext_sales_price": 10}, {"cs_bill_customer_sk": 1, "cs_sold_date_sk": 2, "cs_ext_list_price": 30, "cs_ext_wholesale_cost": 2, "cs_ext_discount_amt": 0, "cs_ext_sales_price": 30}];
  List<Map<String, dynamic>> web_sales = [{"ws_bill_customer_sk": 1, "ws_sold_date_sk": 1, "ws_ext_list_price": 10, "ws_ext_wholesale_cost": 5, "ws_ext_discount_amt": 0, "ws_ext_sales_price": 10}, {"ws_bill_customer_sk": 1, "ws_sold_date_sk": 2, "ws_ext_list_price": 12, "ws_ext_wholesale_cost": 5, "ws_ext_discount_amt": 0, "ws_ext_sales_price": 12}];
  List<Map<String, int>> date_dim = [{"d_date_sk": 1, "d_year": 2001}, {"d_date_sk": 2, "d_year": 2002}];
  List<Map<String, dynamic>> year_total = _union(_union(((() {
  var groups = <String,_Group>{};
  var order = <String>[];
  for (var c in customer) {
    for (var s in store_sales) {
      if (!(_equal(c['c_customer_sk'], s['ss_customer_sk']))) {
        continue;
      }
      for (var d in date_dim) {
        if (!(_equal(s['ss_sold_date_sk'], d['d_date_sk']))) {
          continue;
        }
        var key = {"id": c['c_customer_id'], "first": c['c_first_name'], "last": c['c_last_name'], "login": c['c_login'], "year": d['d_year']};
        var ks = key.toString();
        var g = groups[ks];
        if (g == null) {
          g = _Group(key);
          groups[ks] = g;
          order.add(ks);
        }
        g.Items.add(c);
      }
    }
  }
  var items = [for (var k in order) groups[k]!];
  var _res = [];
  for (var g in items) {
    _res.add({"customer_id": g.key.id, "customer_first_name": g.key.first, "customer_last_name": g.key.last, "customer_login": g.key.login, "dyear": g.key.year, "year_total": _sum((() {
  var _res = [];
  for (var x in g) {
    _res.add(((((((x.ss_ext_list_price - x.ss_ext_wholesale_cost) - x.ss_ext_discount_amt)) + x.ss_ext_sales_price)) ~/ 2));
  }
  return _res;
})()), "sale_type": "s"});
  }
  return _res;
})()), ((() {
  var groups = <String,_Group>{};
  var order = <String>[];
  for (var c in customer) {
    for (var cs in catalog_sales) {
      if (!(_equal(c['c_customer_sk'], cs['cs_bill_customer_sk']))) {
        continue;
      }
      for (var d in date_dim) {
        if (!(_equal(cs['cs_sold_date_sk'], d['d_date_sk']))) {
          continue;
        }
        var key = {"id": c['c_customer_id'], "first": c['c_first_name'], "last": c['c_last_name'], "login": c['c_login'], "year": d['d_year']};
        var ks = key.toString();
        var g = groups[ks];
        if (g == null) {
          g = _Group(key);
          groups[ks] = g;
          order.add(ks);
        }
        g.Items.add(c);
      }
    }
  }
  var items = [for (var k in order) groups[k]!];
  var _res = [];
  for (var g in items) {
    _res.add({"customer_id": g.key.id, "customer_first_name": g.key.first, "customer_last_name": g.key.last, "customer_login": g.key.login, "dyear": g.key.year, "year_total": _sum((() {
  var _res = [];
  for (var x in g) {
    _res.add(((((((x.cs_ext_list_price - x.cs_ext_wholesale_cost) - x.cs_ext_discount_amt)) + x.cs_ext_sales_price)) ~/ 2));
  }
  return _res;
})()), "sale_type": "c"});
  }
  return _res;
})())), ((() {
  var groups = <String,_Group>{};
  var order = <String>[];
  for (var c in customer) {
    for (var ws in web_sales) {
      if (!(_equal(c['c_customer_sk'], ws['ws_bill_customer_sk']))) {
        continue;
      }
      for (var d in date_dim) {
        if (!(_equal(ws['ws_sold_date_sk'], d['d_date_sk']))) {
          continue;
        }
        var key = {"id": c['c_customer_id'], "first": c['c_first_name'], "last": c['c_last_name'], "login": c['c_login'], "year": d['d_year']};
        var ks = key.toString();
        var g = groups[ks];
        if (g == null) {
          g = _Group(key);
          groups[ks] = g;
          order.add(ks);
        }
        g.Items.add(c);
      }
    }
  }
  var items = [for (var k in order) groups[k]!];
  var _res = [];
  for (var g in items) {
    _res.add({"customer_id": g.key.id, "customer_first_name": g.key.first, "customer_last_name": g.key.last, "customer_login": g.key.login, "dyear": g.key.year, "year_total": _sum((() {
  var _res = [];
  for (var x in g) {
    _res.add(((((((x.ws_ext_list_price - x.ws_ext_wholesale_cost) - x.ws_ext_discount_amt)) + x.ws_ext_sales_price)) ~/ 2));
  }
  return _res;
})()), "sale_type": "w"});
  }
  return _res;
})()));
  List<Map<String, dynamic>> result = (() {
  var _res = [];
  for (var s1 in year_total) {
    for (var s2 in year_total) {
      if (!(_equal(s2['customer_id'], s1['customer_id']))) {
        continue;
      }
      for (var c1 in year_total) {
        if (!(_equal(c1['customer_id'], s1['customer_id']))) {
          continue;
        }
        for (var c2 in year_total) {
          if (!(_equal(c2['customer_id'], s1['customer_id']))) {
            continue;
          }
          for (var w1 in year_total) {
            if (!(_equal(w1['customer_id'], s1['customer_id']))) {
              continue;
            }
            for (var w2 in year_total) {
              if (!(_equal(w2['customer_id'], s1['customer_id']))) {
                continue;
              }
              if (!(((((((((((((((((_equal(s1['sale_type'], "s") && _equal(c1['sale_type'], "c")) && _equal(w1['sale_type'], "w")) && _equal(s2['sale_type'], "s")) && _equal(c2['sale_type'], "c")) && _equal(w2['sale_type'], "w")) && _equal(s1['dyear'], 2001)) && _equal(s2['dyear'], 2002)) && _equal(c1['dyear'], 2001)) && _equal(c2['dyear'], 2002)) && _equal(w1['dyear'], 2001)) && _equal(w2['dyear'], 2002)) && (s1['year_total'] > 0)) && (c1['year_total'] > 0)) && (w1['year_total'] > 0)) && ((((c1['year_total'] > 0) ? (c2['year_total'] ~/ c1['year_total']) : null)) > (((s1['year_total'] > 0) ? (s2['year_total'] ~/ s1['year_total']) : null)))) && ((((c1['year_total'] > 0) ? (c2['year_total'] ~/ c1['year_total']) : null)) > (((w1['year_total'] > 0) ? (w2['year_total'] ~/ w1['year_total']) : null)))))) {
                continue;
              }
              _res.add({"customer_id": s2['customer_id'], "customer_first_name": s2['customer_first_name'], "customer_last_name": s2['customer_last_name'], "customer_login": s2['customer_login']});
            }
          }
        }
      }
    }
  }
  var items = List.from(_res);
  items.sort((s1A, s1B) {
    var s1 = s1A;
    var keyA = [s2['customer_id'], s2['customer_first_name'], s2['customer_last_name'], s2['customer_login']];
    s1 = s1B;
    var keyB = [s2['customer_id'], s2['customer_first_name'], s2['customer_last_name'], s2['customer_login']];
    return Comparable.compare(keyA, keyB);
  });
  _res = items;
  return _res;
})();
  _json(result);
  if (!_runTest("TPCDS Q4 result", test_TPCDS_Q4_result)) failures++;
  if (failures > 0) {
    print("\n[FAIL] $failures test(s) failed.");
  }
}

class _Group {
    dynamic key;
    List<dynamic> Items = [];
    _Group(this.key);
    int count() => _count(this);
    double sum() => _sum(this);
    double avg() => _avg(this);
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}

double _sum(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else if (v is _Group) list = v.Items;
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var s = 0.0;
    for (var n in list) s += (n as num).toDouble();
    return s;
}

List<dynamic> _union(List<dynamic> a, List<dynamic> b) {
    var res = [...a];
    for (var it in b) {
        if (!res.contains(it)) {
            res.add(it);
        }
    }
    return res;
}


