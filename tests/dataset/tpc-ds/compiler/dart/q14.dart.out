// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:06Z
import 'dart:io';
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

class StoreSale {
  int ss_item_sk;
  double ss_list_price;
  int ss_quantity;
  int ss_sold_date_sk;
  StoreSale(this.ss_item_sk, this.ss_list_price, this.ss_quantity, this.ss_sold_date_sk);
}

class CatalogSale {
  int cs_item_sk;
  double cs_list_price;
  int cs_quantity;
  int cs_sold_date_sk;
  CatalogSale(this.cs_item_sk, this.cs_list_price, this.cs_quantity, this.cs_sold_date_sk);
}

class WebSale {
  int ws_item_sk;
  double ws_list_price;
  int ws_quantity;
  int ws_sold_date_sk;
  WebSale(this.ws_item_sk, this.ws_list_price, this.ws_quantity, this.ws_sold_date_sk);
}

class Item {
  int i_item_sk;
  int i_brand_id;
  int i_class_id;
  int i_category_id;
  Item(this.i_item_sk, this.i_brand_id, this.i_class_id, this.i_category_id);
}

class DateDim {
  int d_date_sk;
  int d_year;
  int d_moy;
  DateDim(this.d_date_sk, this.d_year, this.d_moy);
}

var store_sales = [{'ss_item_sk': 1, 'ss_list_price': 10, 'ss_quantity': 2, 'ss_sold_date_sk': 1}, {'ss_item_sk': 1, 'ss_list_price': 20, 'ss_quantity': 3, 'ss_sold_date_sk': 2}];

var catalog_sales = [{'cs_item_sk': 1, 'cs_list_price': 10, 'cs_quantity': 2, 'cs_sold_date_sk': 1}];

var web_sales = [{'ws_item_sk': 1, 'ws_list_price': 30, 'ws_quantity': 1, 'ws_sold_date_sk': 1}];

var item = [{'i_item_sk': 1, 'i_brand_id': 1, 'i_class_id': 1, 'i_category_id': 1}];

var date_dim = [{'d_date_sk': 1, 'd_year': 2000, 'd_moy': 12}, {'d_date_sk': 2, 'd_year': 2002, 'd_moy': 11}];

var cross_items = [{'ss_item_sk': 1}];

var avg_sales = (() { var _t0 = [20, 20, 30]; return (_t0.isEmpty ? 0 : _t0.reduce((a, b) => a + b) / _t0.length); })();

var store_filtered = (() {
  var _q1 = <dynamic>[];
  var _g2 = <String, List<dynamic>>{};
  for (var ss in store_sales) {
    for (var d in date_dim) {
      if (!(ss['ss_sold_date_sk'] == d['d_date_sk'] && d['d_year'] == 2002 && d['d_moy'] == 11)) continue;
      if (!(_in(ss['ss_item_sk'], ((() {
  var _q3 = <dynamic>[];
  for (var ci in cross_items) {
    _q3.add(ci['ss_item_sk']);
  }
  return _q3;
})())))) continue;
      var _k6 = {'brand_id': 1, 'class_id': 1, 'category_id': 1};
      var _k6_s = jsonEncode(_k6);
      _g2.putIfAbsent(_k6_s, () => <dynamic>[]).add({'ss': ss, 'd': d});
    }
  }
  for (var entry in _g2.entries) {
    var g = entry.value;
    var _k6 = jsonDecode(entry.key);
    _q1.add({'channel': 'store', 'sales': _sum(g.map((x) => (x['ss_quantity'] as num) * (x['ss_list_price'] as num))), 'number_sales': (() {
  var _q8 = <dynamic>[];
  for (var _ in g) {
    _q8.add(_);
  }
  return _q8;
})().length});
  }
  return _q1;
})();

var result = (() {
  var _q9 = <dynamic>[];
  for (var r in store_filtered) {
    if (!(r['sales'].toString().compareTo(avg_sales.toString()) > 0)) continue;
    _q9.add({'channel': r['channel'], 'i_brand_id': 1, 'i_class_id': 1, 'i_category_id': 1, 'sales': r['sales'], 'number_sales': r['number_sales']});
  }
  return _q9;
})();

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
