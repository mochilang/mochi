// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:07Z
import 'dart:io';
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

var store_sales = [{'ss_ticket_number': 1, 'ss_customer_sk': 1, 'ss_addr_sk': 1, 'ss_hdemo_sk': 1, 'ss_store_sk': 1, 'ss_sold_date_sk': 1, 'ss_coupon_amt': 5, 'ss_net_profit': 20}];

var date_dim = [{'d_date_sk': 1, 'd_dow': 6, 'd_year': 2020}];

var store = [{'s_store_sk': 1, 's_city': 'CityA'}];

var household_demographics = [{'hd_demo_sk': 1, 'hd_dep_count': 2, 'hd_vehicle_count': 0}];

var customer_address = [{'ca_address_sk': 1, 'ca_city': 'Portland'}, {'ca_address_sk': 2, 'ca_city': 'Seattle'}];

var customer = [{'c_customer_sk': 1, 'c_last_name': 'Doe', 'c_first_name': 'John', 'c_current_addr_sk': 2}];

var depcnt = 2;

var vehcnt = 0;

var year = 2020;

var cities = ['CityA'];

var dn = (() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var ss in store_sales) {
    for (var d in date_dim) {
      if (!(ss['ss_sold_date_sk'] == d['d_date_sk'])) continue;
      for (var s in store) {
        if (!(ss['ss_store_sk'] == s['s_store_sk'])) continue;
        for (var hd in household_demographics) {
          if (!(ss['ss_hdemo_sk'] == hd['hd_demo_sk'])) continue;
          for (var ca in customer_address) {
            if (!(ss['ss_addr_sk'] == ca['ca_address_sk'])) continue;
            if (!((hd['hd_dep_count'] == depcnt || hd['hd_vehicle_count'] == vehcnt) && _in(d['d_dow'], [6, 0]) && d['d_year'] == year && _in(s['s_city'], cities))) continue;
            var _k4 = {'ss_ticket_number': ss['ss_ticket_number'], 'ss_customer_sk': ss['ss_customer_sk'], 'ca_city': ca['ca_city']};
            var _k4_s = jsonEncode(_k4);
            _g1.putIfAbsent(_k4_s, () => <dynamic>[]).add({'ss': ss, 'd': d, 's': s, 'hd': hd, 'ca': ca});
          }
        }
      }
    }
  }
  for (var entry in _g1.entries) {
    var g = entry.value;
    var _k4 = jsonDecode(entry.key);
    _q0.add({'ss_ticket_number': _k4['ss_ticket_number'], 'ss_customer_sk': _k4['ss_customer_sk'], 'bought_city': _k4['ca_city'], 'amt': _sum(g.map((x) => x['ss']['ss_coupon_amt'])), 'profit': _sum(g.map((x) => x['ss']['ss_net_profit']))});
  }
  return _q0;
})();

var base = (() {
  var _q7 = <dynamic>[];
  for (var dnrec in dn) {
    for (var c in customer) {
      if (!(dnrec['ss_customer_sk'] == c['c_customer_sk'])) continue;
      for (var current_addr in customer_address) {
        if (!(c['c_current_addr_sk'] == current_addr['ca_address_sk'])) continue;
        if (!(current_addr['ca_city'] != dnrec['bought_city'])) continue;
        _q7.add([[c['c_last_name'], c['c_first_name'], current_addr['ca_city'], dnrec['bought_city'], dnrec['ss_ticket_number']], {'c_last_name': c['c_last_name'], 'c_first_name': c['c_first_name'], 'ca_city': current_addr['ca_city'], 'bought_city': dnrec['bought_city'], 'ss_ticket_number': dnrec['ss_ticket_number'], 'amt': dnrec['amt'], 'profit': dnrec['profit']}]);
      }
    }
  }
  _q7.sort((a,b) => (jsonEncode(a[0]) as Comparable).compareTo(jsonEncode(b[0])));
  _q7 = [for (var x in _q7) x[1]];
  return _q7;
})();

var result = base;

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
