// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:06Z
import 'dart:io';
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

var customer = [{'c_customer_sk': 1, 'c_current_addr_sk': 1, 'c_current_cdemo_sk': 1}, {'c_customer_sk': 2, 'c_current_addr_sk': 2, 'c_current_cdemo_sk': 2}];

var customer_address = [{'ca_address_sk': 1, 'ca_state': 'CA'}, {'ca_address_sk': 2, 'ca_state': 'NY'}];

var customer_demographics = [{'cd_demo_sk': 1, 'cd_gender': 'M', 'cd_marital_status': 'S', 'cd_dep_count': 1, 'cd_dep_employed_count': 1, 'cd_dep_college_count': 0}, {'cd_demo_sk': 2, 'cd_gender': 'F', 'cd_marital_status': 'M', 'cd_dep_count': 2, 'cd_dep_employed_count': 1, 'cd_dep_college_count': 1}];

var store_sales = [{'ss_customer_sk': 1, 'ss_sold_date_sk': 1}];

var date_dim = [{'d_date_sk': 1, 'd_year': 2000, 'd_qoy': 1}];

var purchased = (() {
  var _q0 = <dynamic>[];
  for (var ss in store_sales) {
    for (var d in date_dim) {
      if (!(ss['ss_sold_date_sk'] == d['d_date_sk'])) continue;
      if (!(d['d_year'] == 2000 && d['d_qoy'] < 4)) continue;
      _q0.add(ss['ss_customer_sk']);
    }
  }
  return _q0;
})();

var groups = (() {
  var _q1 = <dynamic>[];
  var _g2 = <String, List<dynamic>>{};
  for (var c in customer) {
    for (var ca in customer_address) {
      if (!(c['c_current_addr_sk'] == ca['ca_address_sk'])) continue;
      for (var cd in customer_demographics) {
        if (!(c['c_current_cdemo_sk'] == cd['cd_demo_sk'])) continue;
        if (!(_in(c['c_customer_sk'], purchased))) continue;
        var _k3 = {'state': ca['ca_state'], 'gender': cd['cd_gender'], 'marital': cd['cd_marital_status'], 'dep': cd['cd_dep_count'], 'emp': cd['cd_dep_employed_count'], 'col': cd['cd_dep_college_count']};
        var _k3_s = jsonEncode(_k3);
        _g2.putIfAbsent(_k3_s, () => <dynamic>[]).add({'c': c, 'ca': ca, 'cd': cd});
      }
    }
  }
  for (var entry in _g2.entries) {
    var g = entry.value;
    var _k3 = jsonDecode(entry.key);
    _q1.add({'ca_state': _k3['state'], 'cd_gender': _k3['gender'], 'cd_marital_status': _k3['marital'], 'cd_dep_count': _k3['dep'], 'cd_dep_employed_count': _k3['emp'], 'cd_dep_college_count': _k3['col'], 'cnt': g.length});
  }
  return _q1;
})();

void main() {
  print(jsonEncode(groups));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
