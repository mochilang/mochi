import 'dart:io';
import 'dart:convert';

class Customer {
  int c_customer_sk;
  String c_customer_id;
  String c_first_name;
  String c_last_name;
  Customer({required this.c_customer_sk, required this.c_customer_id, required this.c_first_name, required this.c_last_name});
  factory Customer.fromJson(Map<String,dynamic> m) {
    return Customer(c_customer_sk: m['c_customer_sk'] as int, c_customer_id: m['c_customer_id'] as String, c_first_name: m['c_first_name'] as String, c_last_name: m['c_last_name'] as String);
  }
}
_structParsers['Customer'] = (m) => Customer.fromJson(m);

class StoreSale {
  int ss_customer_sk;
  int ss_sold_date_sk;
  double ss_ext_list_price;
  StoreSale({required this.ss_customer_sk, required this.ss_sold_date_sk, required this.ss_ext_list_price});
  factory StoreSale.fromJson(Map<String,dynamic> m) {
    return StoreSale(ss_customer_sk: m['ss_customer_sk'] as int, ss_sold_date_sk: m['ss_sold_date_sk'] as int, ss_ext_list_price: m['ss_ext_list_price'] as double);
  }
}
_structParsers['StoreSale'] = (m) => StoreSale.fromJson(m);

class WebSale {
  int ws_bill_customer_sk;
  int ws_sold_date_sk;
  double ws_ext_list_price;
  WebSale({required this.ws_bill_customer_sk, required this.ws_sold_date_sk, required this.ws_ext_list_price});
  factory WebSale.fromJson(Map<String,dynamic> m) {
    return WebSale(ws_bill_customer_sk: m['ws_bill_customer_sk'] as int, ws_sold_date_sk: m['ws_sold_date_sk'] as int, ws_ext_list_price: m['ws_ext_list_price'] as double);
  }
}
_structParsers['WebSale'] = (m) => WebSale.fromJson(m);

void test_TPCDS_Q11_growth() {
  if (!(_equal(result, [{"customer_id": "C1", "customer_first_name": "John", "customer_last_name": "Doe"}]))) { throw Exception('expect failed'); }
}

void main() {
  int failures = 0;
  List<Map<String, dynamic>> customer = [{"c_customer_sk": 1, "c_customer_id": "C1", "c_first_name": "John", "c_last_name": "Doe"}];
  List<Map<String, dynamic>> store_sales = [{"ss_customer_sk": 1, "ss_sold_date_sk": 1998, "ss_ext_list_price": 60}, {"ss_customer_sk": 1, "ss_sold_date_sk": 1999, "ss_ext_list_price": 90}];
  List<Map<String, dynamic>> web_sales = [{"ws_bill_customer_sk": 1, "ws_sold_date_sk": 1998, "ws_ext_list_price": 50}, {"ws_bill_customer_sk": 1, "ws_sold_date_sk": 1999, "ws_ext_list_price": 150}];
  double ss98 = _sum((() {
  var _res = [];
  var _src = (store_sales).where((ss) => _equal(ss['ss_sold_date_sk'], 1998)).toList();
  for (var ss in _src) {
    _res.add(ss['ss_ext_list_price']);
  }
  return _res;
})());
  double ss99 = _sum((() {
  var _res = [];
  var _src = (store_sales).where((ss) => _equal(ss['ss_sold_date_sk'], 1999)).toList();
  for (var ss in _src) {
    _res.add(ss['ss_ext_list_price']);
  }
  return _res;
})());
  double ws98 = _sum((() {
  var _res = [];
  var _src = (web_sales).where((ws) => _equal(ws['ws_sold_date_sk'], 1998)).toList();
  for (var ws in _src) {
    _res.add(ws['ws_ext_list_price']);
  }
  return _res;
})());
  double ws99 = _sum((() {
  var _res = [];
  var _src = (web_sales).where((ws) => _equal(ws['ws_sold_date_sk'], 1999)).toList();
  for (var ws in _src) {
    _res.add(ws['ws_ext_list_price']);
  }
  return _res;
})());
  bool growth_ok = (((ws98 > 0) && (ss98 > 0)) && (((ws99 / ws98)) > ((ss99 / ss98))));
  List<Map<String, String>> result = (growth_ok ? [{"customer_id": "C1", "customer_first_name": "John", "customer_last_name": "Doe"}] : []);
  _json(result);
  if (!_runTest("TPCDS Q11 growth", test_TPCDS_Q11_growth)) failures++;
  if (failures > 0) {
    print("\n[FAIL] $failures test(s) failed.");
  }
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}

double _sum(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else if (v is _Group) list = v.Items;
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var s = 0.0;
    for (var n in list) s += (n as num).toDouble();
    return s;
}


