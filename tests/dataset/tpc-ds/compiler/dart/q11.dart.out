// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:06Z
import 'dart:io';
import 'dart:convert';

class Customer {
  int c_customer_sk;
  String c_customer_id;
  String c_first_name;
  String c_last_name;
  Customer(this.c_customer_sk, this.c_customer_id, this.c_first_name, this.c_last_name);
}

class StoreSale {
  int ss_customer_sk;
  int ss_sold_date_sk;
  double ss_ext_list_price;
  StoreSale(this.ss_customer_sk, this.ss_sold_date_sk, this.ss_ext_list_price);
}

class WebSale {
  int ws_bill_customer_sk;
  int ws_sold_date_sk;
  double ws_ext_list_price;
  WebSale(this.ws_bill_customer_sk, this.ws_sold_date_sk, this.ws_ext_list_price);
}

var customer = [{'c_customer_sk': 1, 'c_customer_id': 'C1', 'c_first_name': 'John', 'c_last_name': 'Doe'}];

var store_sales = [{'ss_customer_sk': 1, 'ss_sold_date_sk': 1998, 'ss_ext_list_price': 60}, {'ss_customer_sk': 1, 'ss_sold_date_sk': 1999, 'ss_ext_list_price': 90}];

var web_sales = [{'ws_bill_customer_sk': 1, 'ws_sold_date_sk': 1998, 'ws_ext_list_price': 50}, {'ws_bill_customer_sk': 1, 'ws_sold_date_sk': 1999, 'ws_ext_list_price': 150}];

var ss98 = (() { var _t1 = (() {
  var _q0 = <dynamic>[];
  for (var ss in store_sales) {
    if (!(ss['ss_sold_date_sk'] == 1998)) continue;
    _q0.add(ss['ss_ext_list_price']);
  }
  return _q0;
})(); return _sum(_t1); })();

var ss99 = (() { var _t3 = (() {
  var _q2 = <dynamic>[];
  for (var ss in store_sales) {
    if (!(ss['ss_sold_date_sk'] == 1999)) continue;
    _q2.add(ss['ss_ext_list_price']);
  }
  return _q2;
})(); return _sum(_t3); })();

var ws98 = (() { var _t5 = (() {
  var _q4 = <dynamic>[];
  for (var ws in web_sales) {
    if (!(ws['ws_sold_date_sk'] == 1998)) continue;
    _q4.add(ws['ws_ext_list_price']);
  }
  return _q4;
})(); return _sum(_t5); })();

var ws99 = (() { var _t7 = (() {
  var _q6 = <dynamic>[];
  for (var ws in web_sales) {
    if (!(ws['ws_sold_date_sk'] == 1999)) continue;
    _q6.add(ws['ws_ext_list_price']);
  }
  return _q6;
})(); return _sum(_t7); })();

var growth_ok = ws98 > 0 && ss98 > 0 && (ws99 / ws98) > (ss99 / ss98);

var result = (growth_ok ? [{'customer_id': 'C1', 'customer_first_name': 'John', 'customer_last_name': 'Doe'}] : []);

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
