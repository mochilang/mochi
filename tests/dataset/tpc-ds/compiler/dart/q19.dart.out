import 'dart:io';
import 'dart:convert';

class StoreSale {
  int ss_sold_date_sk;
  int ss_item_sk;
  int ss_customer_sk;
  int ss_store_sk;
  double ss_ext_sales_price;
  StoreSale({required this.ss_sold_date_sk, required this.ss_item_sk, required this.ss_customer_sk, required this.ss_store_sk, required this.ss_ext_sales_price});
  factory StoreSale.fromJson(Map<String,dynamic> m) {
    return StoreSale(ss_sold_date_sk: m['ss_sold_date_sk'] as int, ss_item_sk: m['ss_item_sk'] as int, ss_customer_sk: m['ss_customer_sk'] as int, ss_store_sk: m['ss_store_sk'] as int, ss_ext_sales_price: m['ss_ext_sales_price'] as double);
  }
}
_structParsers['StoreSale'] = (m) => StoreSale.fromJson(m);

class DateDim {
  int d_date_sk;
  int d_year;
  int d_moy;
  DateDim({required this.d_date_sk, required this.d_year, required this.d_moy});
  factory DateDim.fromJson(Map<String,dynamic> m) {
    return DateDim(d_date_sk: m['d_date_sk'] as int, d_year: m['d_year'] as int, d_moy: m['d_moy'] as int);
  }
}
_structParsers['DateDim'] = (m) => DateDim.fromJson(m);

class Item {
  int i_item_sk;
  int i_brand_id;
  String i_brand;
  int i_manufact_id;
  String i_manufact;
  int i_manager_id;
  Item({required this.i_item_sk, required this.i_brand_id, required this.i_brand, required this.i_manufact_id, required this.i_manufact, required this.i_manager_id});
  factory Item.fromJson(Map<String,dynamic> m) {
    return Item(i_item_sk: m['i_item_sk'] as int, i_brand_id: m['i_brand_id'] as int, i_brand: m['i_brand'] as String, i_manufact_id: m['i_manufact_id'] as int, i_manufact: m['i_manufact'] as String, i_manager_id: m['i_manager_id'] as int);
  }
}
_structParsers['Item'] = (m) => Item.fromJson(m);

class Customer {
  int c_customer_sk;
  int c_current_addr_sk;
  Customer({required this.c_customer_sk, required this.c_current_addr_sk});
  factory Customer.fromJson(Map<String,dynamic> m) {
    return Customer(c_customer_sk: m['c_customer_sk'] as int, c_current_addr_sk: m['c_current_addr_sk'] as int);
  }
}
_structParsers['Customer'] = (m) => Customer.fromJson(m);

class CustomerAddress {
  int ca_address_sk;
  String ca_zip;
  CustomerAddress({required this.ca_address_sk, required this.ca_zip});
  factory CustomerAddress.fromJson(Map<String,dynamic> m) {
    return CustomerAddress(ca_address_sk: m['ca_address_sk'] as int, ca_zip: m['ca_zip'] as String);
  }
}
_structParsers['CustomerAddress'] = (m) => CustomerAddress.fromJson(m);

class Store {
  int s_store_sk;
  String s_zip;
  Store({required this.s_store_sk, required this.s_zip});
  factory Store.fromJson(Map<String,dynamic> m) {
    return Store(s_store_sk: m['s_store_sk'] as int, s_zip: m['s_zip'] as String);
  }
}
_structParsers['Store'] = (m) => Store.fromJson(m);

void test_TPCDS_Q19_brand() {
  if (!(_equal(result, [{"i_brand": "B1", "i_brand_id": 1, "i_manufact_id": 1, "i_manufact": "M1", "ext_price": 100}]))) { throw Exception('expect failed'); }
}

void main() {
  int failures = 0;
  List<Map<String, dynamic>> store_sales = [{"ss_sold_date_sk": 1, "ss_item_sk": 1, "ss_customer_sk": 1, "ss_store_sk": 1, "ss_ext_sales_price": 100}];
  List<Map<String, int>> date_dim = [{"d_date_sk": 1, "d_year": 1999, "d_moy": 11}];
  List<Map<String, dynamic>> item = [{"i_item_sk": 1, "i_brand_id": 1, "i_brand": "B1", "i_manufact_id": 1, "i_manufact": "M1", "i_manager_id": 10}];
  List<Map<String, int>> customer = [{"c_customer_sk": 1, "c_current_addr_sk": 1}];
  List<Map<String, dynamic>> customer_address = [{"ca_address_sk": 1, "ca_zip": "11111"}];
  List<Map<String, dynamic>> store = [{"s_store_sk": 1, "s_zip": "99999"}];
  List<Map<String, dynamic>> result = (() {
  var groups = <String,_Group>{};
  var order = <String>[];
  for (var d in date_dim) {
    for (var ss in store_sales) {
      if (!(_equal(ss.ss_sold_date_sk, d.d_date_sk))) {
        continue;
      }
      for (var i in item) {
        if (!((_equal(ss.ss_item_sk, i.i_item_sk) && _equal(i.i_manager_id, 10)))) {
          continue;
        }
        for (var c in customer) {
          if (!(_equal(ss.ss_customer_sk, c.c_customer_sk))) {
            continue;
          }
          for (var ca in customer_address) {
            if (!(_equal(c.c_current_addr_sk, ca.ca_address_sk))) {
              continue;
            }
            for (var s in store) {
              if (!((_equal(ss.ss_store_sk, s.s_store_sk) && (substr(ca.ca_zip, 0, 5) != substr(s.s_zip, 0, 5))))) {
                continue;
              }
              var key = {"brand": i.i_brand, "brand_id": i.i_brand_id, "man_id": i.i_manufact_id, "man": i.i_manufact};
              var ks = key.toString();
              var g = groups[ks];
              if (g == null) {
                g = _Group(key);
                groups[ks] = g;
                order.add(ks);
              }
              g.Items.add(d);
            }
          }
        }
      }
    }
  }
  var items = [for (var k in order) groups[k]!];
  items.sort((gA, gB) {
    var g = gA;
    var keyA = [g.key.brand];
    g = gB;
    var keyB = [g.key.brand];
    return Comparable.compare(keyA, keyB);
  });
  var _res = [];
  for (var g in items) {
    _res.add({"i_brand": g.key.brand, "i_brand_id": g.key.brand_id, "i_manufact_id": g.key.man_id, "i_manufact": g.key.man, "ext_price": _sum((() {
  var _res = [];
  for (var x in g) {
    _res.add(x.ss_ext_sales_price);
  }
  return _res;
})())});
  }
  return _res;
})();
  _json(result);
  if (!_runTest("TPCDS Q19 brand", test_TPCDS_Q19_brand)) failures++;
  if (failures > 0) {
    print("\n[FAIL] $failures test(s) failed.");
  }
}

class _Group {
    dynamic key;
    List<dynamic> Items = [];
    _Group(this.key);
    int count() => _count(this);
    double sum() => _sum(this);
    double avg() => _avg(this);
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}

double _sum(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else if (v is _Group) list = v.Items;
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var s = 0.0;
    for (var n in list) s += (n as num).toDouble();
    return s;
}


