// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:07Z
import 'dart:io';
import 'dart:convert';

var catalog_sales = [{'item': 1, 'call': 1, 'date': 1, 'price': 20}, {'item': 1, 'call': 1, 'date': 2, 'price': 20}, {'item': 1, 'call': 1, 'date': 3, 'price': 40}];

var item = [{'i_item_sk': 1, 'i_category': 'A', 'i_brand': 'B'}];

var call_center = [{'cc_call_center_sk': 1, 'cc_name': 'C1'}];

var date_dim = [{'d_date_sk': 1, 'd_year': 2000, 'd_moy': 11}, {'d_date_sk': 2, 'd_year': 2000, 'd_moy': 12}, {'d_date_sk': 3, 'd_year': 2001, 'd_moy': 1}];

double abs(double x) {
  if (x >= 0) {
    return x;
  }
  return -x;
}

var grouped = (() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var cs in catalog_sales) {
    for (var i in item) {
      if (!(cs['item'] == i['i_item_sk'])) continue;
      for (var d in date_dim) {
        if (!(cs['date'] == d['d_date_sk'])) continue;
        for (var cc in call_center) {
          if (!(cs['call'] == cc['cc_call_center_sk'])) continue;
          var _k3 = {'cat': i['i_category'], 'call': cc['cc_name'], 'year': d['d_year']};
          var _k3_s = jsonEncode(_k3);
          _g1.putIfAbsent(_k3_s, () => <dynamic>[]).add({'cs': cs, 'i': i, 'd': d, 'cc': cc});
        }
      }
    }
  }
  for (var entry in _g1.entries) {
    var g = entry.value;
    var _k3 = jsonDecode(entry.key);
    _q0.add({'cat': _k3['cat'], 'call': _k3['call'], 'year': _k3['year'], 'sum_sales': _sum(g.map((x) => x['price']))});
  }
  return _q0;
})();

var avg_by_year = (() {
  var _q5 = <dynamic>[];
  var _g6 = <String, List<dynamic>>{};
  for (var g in grouped) {
    var _k9 = {'cat': g['cat'], 'call': g['call']};
    var _k9_s = jsonEncode(_k9);
    _g6.putIfAbsent(_k9_s, () => <dynamic>[]).add(g);
  }
  for (var entry in _g6.entries) {
    var gg = entry.value;
    var _k9 = jsonDecode(entry.key);
    _q5.add({'cat': _k9['cat'], 'call': _k9['call'], 'avg_sales': (() { var _t11 = (() {
  var _q10 = <dynamic>[];
  for (var x in gg) {
    _q10.add(x['sum_sales']);
  }
  return _q10;
})(); return (_t11.isEmpty ? 0 : _t11.reduce((a, b) => a + b) / _t11.length); })()});
  }
  return _q5;
})();

var result = (() {
  var _q12 = <dynamic>[];
  for (var g in grouped) {
    for (var a in avg_by_year) {
      if (!(g['cat'] == a['cat'] && g['call'] == a['call'])) continue;
      if (!(g['year'] == 2001 && a['avg_sales'].toString().compareTo(0.toString()) > 0 && abs((g['sum_sales'] as num) - (a['avg_sales'] as num)) / (a['avg_sales'] as num).toString().compareTo(0.1.toString()) > 0)) continue;
      _q12.add({'i_category': g['cat'], 'sum_sales': g['sum_sales']});
    }
  }
  return _q12;
})();

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
