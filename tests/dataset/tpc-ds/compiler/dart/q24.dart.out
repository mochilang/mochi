// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:06Z
import 'dart:io';
import 'dart:convert';

class StoreSale {
  int ss_ticket_number;
  int ss_item_sk;
  int ss_customer_sk;
  int ss_store_sk;
  double ss_net_paid;
  StoreSale(this.ss_ticket_number, this.ss_item_sk, this.ss_customer_sk, this.ss_store_sk, this.ss_net_paid);
}

class StoreReturn {
  int sr_ticket_number;
  int sr_item_sk;
  StoreReturn(this.sr_ticket_number, this.sr_item_sk);
}

class Store {
  int s_store_sk;
  String s_store_name;
  int s_market_id;
  String s_state;
  String s_zip;
  Store(this.s_store_sk, this.s_store_name, this.s_market_id, this.s_state, this.s_zip);
}

class Item {
  int i_item_sk;
  String i_color;
  double i_current_price;
  int i_manager_id;
  String i_units;
  String i_size;
  Item(this.i_item_sk, this.i_color, this.i_current_price, this.i_manager_id, this.i_units, this.i_size);
}

class Customer {
  int c_customer_sk;
  String c_first_name;
  String c_last_name;
  int c_current_addr_sk;
  String c_birth_country;
  Customer(this.c_customer_sk, this.c_first_name, this.c_last_name, this.c_current_addr_sk, this.c_birth_country);
}

class CustomerAddress {
  int ca_address_sk;
  String ca_state;
  String ca_country;
  String ca_zip;
  CustomerAddress(this.ca_address_sk, this.ca_state, this.ca_country, this.ca_zip);
}

var store_sales = [{'ss_ticket_number': 1, 'ss_item_sk': 1, 'ss_customer_sk': 1, 'ss_store_sk': 1, 'ss_net_paid': 100}, {'ss_ticket_number': 2, 'ss_item_sk': 2, 'ss_customer_sk': 2, 'ss_store_sk': 1, 'ss_net_paid': 50}];

var store_returns = [{'sr_ticket_number': 1, 'sr_item_sk': 1}, {'sr_ticket_number': 2, 'sr_item_sk': 2}];

var store = [{'s_store_sk': 1, 's_store_name': 'Store1', 's_market_id': 5, 's_state': 'CA', 's_zip': '12345'}];

var item = [{'i_item_sk': 1, 'i_color': 'RED', 'i_current_price': 10, 'i_manager_id': 1, 'i_units': 'EA', 'i_size': 'M'}, {'i_item_sk': 2, 'i_color': 'BLUE', 'i_current_price': 20, 'i_manager_id': 2, 'i_units': 'EA', 'i_size': 'L'}];

var customer = [{'c_customer_sk': 1, 'c_first_name': 'Ann', 'c_last_name': 'Smith', 'c_current_addr_sk': 1, 'c_birth_country': 'Canada'}, {'c_customer_sk': 2, 'c_first_name': 'Bob', 'c_last_name': 'Jones', 'c_current_addr_sk': 2, 'c_birth_country': 'USA'}];

var customer_address = [{'ca_address_sk': 1, 'ca_state': 'CA', 'ca_country': 'USA', 'ca_zip': '12345'}, {'ca_address_sk': 2, 'ca_state': 'CA', 'ca_country': 'USA', 'ca_zip': '54321'}];

var ssales = (() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var ss in store_sales) {
    for (var sr in store_returns) {
      if (!(ss['ss_ticket_number'] == sr['sr_ticket_number'] && ss['ss_item_sk'] == sr['sr_item_sk'])) continue;
      for (var s in store) {
        if (!(ss['ss_store_sk'] == s['s_store_sk'])) continue;
        for (var i in item) {
          if (!(ss['ss_item_sk'] == i['i_item_sk'])) continue;
          for (var c in customer) {
            if (!(ss['ss_customer_sk'] == c['c_customer_sk'])) continue;
            for (var ca in customer_address) {
              if (!(c['c_current_addr_sk'] == ca['ca_address_sk'])) continue;
              if (!(c['c_birth_country'] != strings['ToUpper'](ca['ca_country']) && s['s_zip'] == ca['ca_zip'] && s['s_market_id'] == 5)) continue;
              var _k3 = {'last': c['c_last_name'], 'first': c['c_first_name'], 'store_name': s['s_store_name'], 'color': i['i_color']};
              var _k3_s = jsonEncode(_k3);
              _g1.putIfAbsent(_k3_s, () => <dynamic>[]).add({'ss': ss, 'sr': sr, 's': s, 'i': i, 'c': c, 'ca': ca});
            }
          }
        }
      }
    }
  }
  for (var entry in _g1.entries) {
    var g = entry.value;
    var _k3 = jsonDecode(entry.key);
    _q0.add({'c_last_name': _k3['last'], 'c_first_name': _k3['first'], 's_store_name': _k3['store_name'], 'color': _k3['color'], 'netpaid': _sum(g.map((x) => x['ss_net_paid']))});
  }
  return _q0;
})();

var avg_paid = (() { var _t6 = (() {
  var _q5 = <dynamic>[];
  for (var x in ssales) {
    _q5.add(x['netpaid']);
  }
  return _q5;
})(); return (_t6.isEmpty ? 0 : _t6.reduce((a, b) => a + b) / _t6.length); })();

var result = (() {
  var _q7 = <dynamic>[];
  for (var x in ssales) {
    if (!(x['color'] == 'RED' && x['netpaid'].toString().compareTo(0.05 * avg_paid.toString()) > 0)) continue;
    _q7.add([[x['c_last_name'], x['c_first_name'], x['s_store_name']], {'c_last_name': x['c_last_name'], 'c_first_name': x['c_first_name'], 's_store_name': x['s_store_name'], 'paid': x['netpaid']}]);
  }
  _q7.sort((a,b) => (jsonEncode(a[0]) as Comparable).compareTo(jsonEncode(b[0])));
  _q7 = [for (var x in _q7) x[1]];
  return _q7;
})();

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
