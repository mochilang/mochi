// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:07Z
import 'dart:io';
import 'dart:convert';

var web = [{'item': 'A', 'return_ratio': 0.2, 'currency_ratio': 0.3, 'return_rank': 1, 'currency_rank': 1}, {'item': 'B', 'return_ratio': 0.5, 'currency_ratio': 0.6, 'return_rank': 2, 'currency_rank': 2}];

var catalog = [{'item': 'A', 'return_ratio': 0.3, 'currency_ratio': 0.4, 'return_rank': 1, 'currency_rank': 1}];

var store = [{'item': 'A', 'return_ratio': 0.25, 'currency_ratio': 0.35, 'return_rank': 1, 'currency_rank': 1}];

var tmp = (concat((() {
  var _q0 = <dynamic>[];
  for (var w in web) {
    if (!(w['return_rank'].toString().compareTo(10.toString()) <= 0 || w['currency_rank'].toString().compareTo(10.toString()) <= 0)) continue;
    _q0.add({'channel': 'web', 'item': w['item'], 'return_ratio': w['return_ratio'], 'return_rank': w['return_rank'], 'currency_rank': w['currency_rank']});
  }
  return _q0;
})(), (() {
  var _q1 = <dynamic>[];
  for (var c in catalog) {
    if (!(c['return_rank'].toString().compareTo(10.toString()) <= 0 || c['currency_rank'].toString().compareTo(10.toString()) <= 0)) continue;
    _q1.add({'channel': 'catalog', 'item': c['item'], 'return_ratio': c['return_ratio'], 'return_rank': c['return_rank'], 'currency_rank': c['currency_rank']});
  }
  return _q1;
})(), (() {
  var _q2 = <dynamic>[];
  for (var s in store) {
    if (!(s['return_rank'].toString().compareTo(10.toString()) <= 0 || s['currency_rank'].toString().compareTo(10.toString()) <= 0)) continue;
    _q2.add({'channel': 'store', 'item': s['item'], 'return_ratio': s['return_ratio'], 'return_rank': s['return_rank'], 'currency_rank': s['currency_rank']});
  }
  return _q2;
})()));

var result = (() {
  var _q3 = <dynamic>[];
  for (var r in tmp) {
    _q3.add([[r['channel'], r['return_rank'], r['currency_rank'], r['item']], r]);
  }
  _q3.sort((a,b) => (jsonEncode(a[0]) as Comparable).compareTo(jsonEncode(b[0])));
  _q3 = [for (var x in _q3) x[1]];
  return _q3;
})();

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
