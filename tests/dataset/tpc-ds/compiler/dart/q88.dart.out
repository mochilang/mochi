// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:07Z
import 'dart:io';
import 'dart:convert';

var time_dim = [{'time_sk': 1, 'hour': 8, 'minute': 30}, {'time_sk': 2, 'hour': 9, 'minute': 0}, {'time_sk': 3, 'hour': 9, 'minute': 30}, {'time_sk': 4, 'hour': 10, 'minute': 0}, {'time_sk': 5, 'hour': 10, 'minute': 30}, {'time_sk': 6, 'hour': 11, 'minute': 0}, {'time_sk': 7, 'hour': 11, 'minute': 30}, {'time_sk': 8, 'hour': 12, 'minute': 0}];

var household_demographics = [{'hd_demo_sk': 1, 'hd_dep_count': 1, 'hd_vehicle_count': 1}];

var store = [{'s_store_sk': 1, 's_store_name': 'ese'}];

var store_sales = [{'sold_time_sk': 1, 'hdemo_sk': 1, 'store_sk': 1, 'qty': 10}, {'sold_time_sk': 2, 'hdemo_sk': 1, 'store_sk': 1, 'qty': 12}, {'sold_time_sk': 3, 'hdemo_sk': 1, 'store_sk': 1, 'qty': 14}, {'sold_time_sk': 4, 'hdemo_sk': 1, 'store_sk': 1, 'qty': 11}, {'sold_time_sk': 5, 'hdemo_sk': 1, 'store_sk': 1, 'qty': 8}, {'sold_time_sk': 6, 'hdemo_sk': 1, 'store_sk': 1, 'qty': 9}, {'sold_time_sk': 7, 'hdemo_sk': 1, 'store_sk': 1, 'qty': 10}, {'sold_time_sk': 8, 'hdemo_sk': 1, 'store_sk': 1, 'qty': 14}];

double count_range(List<any> ssales, List<any> tdim, int hour, int start_min, int end_min) {
  var total = 0;
  for (var ss in ssales) {
    for (var t in tdim) {
      if (ss['sold_time_sk'] == t['time_sk'] && t['hour'] == hour && t['minute'].toString().compareTo(start_min.toString()) >= 0 && t['minute'].toString().compareTo(end_min.toString()) < 0) {
        total = (total as num) + (ss['qty'] as num);
      }
    }
  }
  return total;
}

var h8_30_to_9 = count_range(store_sales, time_dim, 8, 30, 60);

var h9_to_9_30 = count_range(store_sales, time_dim, 9, 0, 30);

var h9_30_to_10 = count_range(store_sales, time_dim, 9, 30, 60);

var h10_to_10_30 = count_range(store_sales, time_dim, 10, 0, 30);

var h10_30_to_11 = count_range(store_sales, time_dim, 10, 30, 60);

var h11_to_11_30 = count_range(store_sales, time_dim, 11, 0, 30);

var h11_30_to_12 = count_range(store_sales, time_dim, 11, 30, 60);

var h12_to_12_30 = count_range(store_sales, time_dim, 12, 0, 30);

var result = h8_30_to_9 + h9_to_9_30 + h9_30_to_10 + h10_to_10_30 + h10_30_to_11 + h11_to_11_30 + h11_30_to_12 + h12_to_12_30;

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
