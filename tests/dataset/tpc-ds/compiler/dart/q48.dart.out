// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:07Z
import 'dart:io';
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

var store_sales = [{'cdemo_sk': 1, 'addr_sk': 1, 'sold_date_sk': 1, 'sales_price': 120, 'net_profit': 1000, 'quantity': 5}, {'cdemo_sk': 2, 'addr_sk': 2, 'sold_date_sk': 1, 'sales_price': 60, 'net_profit': 2000, 'quantity': 10}, {'cdemo_sk': 3, 'addr_sk': 3, 'sold_date_sk': 1, 'sales_price': 170, 'net_profit': 10000, 'quantity': 20}];

var store = [{'s_store_sk': 1}];

var customer_demographics = [{'cd_demo_sk': 1, 'cd_marital_status': 'S', 'cd_education_status': 'E1'}, {'cd_demo_sk': 2, 'cd_marital_status': 'M', 'cd_education_status': 'E2'}, {'cd_demo_sk': 3, 'cd_marital_status': 'W', 'cd_education_status': 'E3'}];

var customer_address = [{'ca_address_sk': 1, 'ca_country': 'United States', 'ca_state': 'TX'}, {'ca_address_sk': 2, 'ca_country': 'United States', 'ca_state': 'CA'}, {'ca_address_sk': 3, 'ca_country': 'United States', 'ca_state': 'NY'}];

var date_dim = [{'d_date_sk': 1, 'd_year': 2000}];

var year = 2000;

var states1 = ['TX'];

var states2 = ['CA'];

var states3 = ['NY'];

var qty_base = (() {
  var _q0 = <dynamic>[];
  for (var ss in store_sales) {
    for (var cd in customer_demographics) {
      if (!(ss['cdemo_sk'] == cd['cd_demo_sk'])) continue;
      for (var ca in customer_address) {
        if (!(ss['addr_sk'] == ca['ca_address_sk'])) continue;
        for (var d in date_dim) {
          if (!(ss['sold_date_sk'] == d['d_date_sk'])) continue;
          if (!(d['d_year'] == year && ((cd['cd_marital_status'] == 'S' && cd['cd_education_status'] == 'E1' && ss['sales_price'].toString().compareTo(100.toString()) >= 0 && ss['sales_price'].toString().compareTo(150.toString()) <= 0) || (cd['cd_marital_status'] == 'M' && cd['cd_education_status'] == 'E2' && ss['sales_price'].toString().compareTo(50.toString()) >= 0 && ss['sales_price'].toString().compareTo(100.toString()) <= 0) || (cd['cd_marital_status'] == 'W' && cd['cd_education_status'] == 'E3' && ss['sales_price'].toString().compareTo(150.toString()) >= 0 && ss['sales_price'].toString().compareTo(200.toString()) <= 0)) && ((_in(ca['ca_state'], states1) && ss['net_profit'].toString().compareTo(0.toString()) >= 0 && ss['net_profit'].toString().compareTo(2000.toString()) <= 0) || (_in(ca['ca_state'], states2) && ss['net_profit'].toString().compareTo(150.toString()) >= 0 && ss['net_profit'].toString().compareTo(3000.toString()) <= 0) || (_in(ca['ca_state'], states3) && ss['net_profit'].toString().compareTo(50.toString()) >= 0 && ss['net_profit'].toString().compareTo(25000.toString()) <= 0)))) continue;
          _q0.add(ss['quantity']);
        }
      }
    }
  }
  return _q0;
})();

var qty = qty_base;

var result = _sum(qty);

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
