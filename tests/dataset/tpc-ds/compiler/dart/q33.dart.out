// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:06Z
import 'dart:io';
import 'dart:convert';

var item = [{'i_item_sk': 1, 'i_manufact_id': 1, 'i_category': 'Books'}, {'i_item_sk': 2, 'i_manufact_id': 2, 'i_category': 'Books'}];

var date_dim = [{'d_date_sk': 1, 'd_year': 2000, 'd_moy': 1}];

var customer_address = [{'ca_address_sk': 1, 'ca_gmt_offset': -5}, {'ca_address_sk': 2, 'ca_gmt_offset': -5}];

var store_sales = [{'ss_item_sk': 1, 'ss_ext_sales_price': 100, 'ss_sold_date_sk': 1, 'ss_addr_sk': 1}, {'ss_item_sk': 2, 'ss_ext_sales_price': 50, 'ss_sold_date_sk': 1, 'ss_addr_sk': 2}];

var catalog_sales = [{'cs_item_sk': 1, 'cs_ext_sales_price': 20, 'cs_sold_date_sk': 1, 'cs_bill_addr_sk': 1}];

var web_sales = [{'ws_item_sk': 1, 'ws_ext_sales_price': 30, 'ws_sold_date_sk': 1, 'ws_bill_addr_sk': 1}];

var month = 1;

var year = 2000;

var union_sales = concat((() {
  var _q0 = <dynamic>[];
  for (var ss in store_sales) {
    for (var d in date_dim) {
      if (!(ss['ss_sold_date_sk'] == d['d_date_sk'])) continue;
      for (var ca in customer_address) {
        if (!(ss['ss_addr_sk'] == ca['ca_address_sk'])) continue;
        for (var i in item) {
          if (!(ss['ss_item_sk'] == i['i_item_sk'])) continue;
          if (!(i['i_category'] == 'Books' && d['d_year'] == year && d['d_moy'] == month && ca['ca_gmt_offset'] == (-5))) continue;
          _q0.add({'manu': i['i_manufact_id'], 'price': ss['ss_ext_sales_price']});
        }
      }
    }
  }
  return _q0;
})(), (() {
  var _q1 = <dynamic>[];
  for (var cs in catalog_sales) {
    for (var d in date_dim) {
      if (!(cs['cs_sold_date_sk'] == d['d_date_sk'])) continue;
      for (var ca in customer_address) {
        if (!(cs['cs_bill_addr_sk'] == ca['ca_address_sk'])) continue;
        for (var i in item) {
          if (!(cs['cs_item_sk'] == i['i_item_sk'])) continue;
          if (!(i['i_category'] == 'Books' && d['d_year'] == year && d['d_moy'] == month && ca['ca_gmt_offset'] == (-5))) continue;
          _q1.add({'manu': i['i_manufact_id'], 'price': cs['cs_ext_sales_price']});
        }
      }
    }
  }
  return _q1;
})(), (() {
  var _q2 = <dynamic>[];
  for (var ws in web_sales) {
    for (var d in date_dim) {
      if (!(ws['ws_sold_date_sk'] == d['d_date_sk'])) continue;
      for (var ca in customer_address) {
        if (!(ws['ws_bill_addr_sk'] == ca['ca_address_sk'])) continue;
        for (var i in item) {
          if (!(ws['ws_item_sk'] == i['i_item_sk'])) continue;
          if (!(i['i_category'] == 'Books' && d['d_year'] == year && d['d_moy'] == month && ca['ca_gmt_offset'] == (-5))) continue;
          _q2.add({'manu': i['i_manufact_id'], 'price': ws['ws_ext_sales_price']});
        }
      }
    }
  }
  return _q2;
})());

var result = (() {
  var _q3 = <dynamic>[];
  var _g4 = <String, List<dynamic>>{};
  for (var s in union_sales) {
    var _k6 = s['manu'];
    var _k6_s = jsonEncode(_k6);
    _g4.putIfAbsent(_k6_s, () => <dynamic>[]).add(s);
  }
  for (var entry in _g4.entries) {
    var g = entry.value;
    var _k6 = jsonDecode(entry.key);
    _q3.add([-_sum(g.map((x) => x['price'])), {'i_manufact_id': _k6, 'total_sales': _sum(g.map((x) => x['price']))}]);
  }
  _q3.sort((a,b) => (a[0] as Comparable).compareTo(b[0]));
  _q3 = [for (var x in _q3) x[1]];
  return _q3;
})();

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
