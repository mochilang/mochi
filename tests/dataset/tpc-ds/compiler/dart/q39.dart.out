// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:06Z
import 'dart:io';
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

import 'dart:math' as math;

var inventory = [{'inv_item_sk': 1, 'inv_warehouse_sk': 1, 'inv_date_sk': 1, 'inv_quantity_on_hand': 10}, {'inv_item_sk': 1, 'inv_warehouse_sk': 1, 'inv_date_sk': 2, 'inv_quantity_on_hand': 10}, {'inv_item_sk': 1, 'inv_warehouse_sk': 1, 'inv_date_sk': 3, 'inv_quantity_on_hand': 250}];

var item = [{'i_item_sk': 1}];

var warehouse = [{'w_warehouse_sk': 1, 'w_warehouse_name': 'W1'}];

var date_dim = [{'d_date_sk': 1, 'd_year': 2000, 'd_moy': 1}, {'d_date_sk': 2, 'd_year': 2000, 'd_moy': 2}, {'d_date_sk': 3, 'd_year': 2000, 'd_moy': 3}];

var monthly = (() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var inv in inventory) {
    for (var d in date_dim) {
      if (!(inv['inv_date_sk'] == d['d_date_sk'])) continue;
      for (var i in item) {
        if (!(inv['inv_item_sk'] == i['i_item_sk'])) continue;
        for (var w in warehouse) {
          if (!(inv['inv_warehouse_sk'] == w['w_warehouse_sk'])) continue;
          if (!(d['d_year'] == 2000)) continue;
          var _k3 = {'w': w['w_warehouse_sk'], 'i': i['i_item_sk'], 'month': d['d_moy']};
          var _k3_s = jsonEncode(_k3);
          _g1.putIfAbsent(_k3_s, () => <dynamic>[]).add({'inv': inv, 'd': d, 'i': i, 'w': w});
        }
      }
    }
  }
  for (var entry in _g1.entries) {
    var g = entry.value;
    var _k3 = jsonDecode(entry.key);
    _q0.add({'w': _k3['w'], 'i': _k3['i'], 'qty': _sum(g.map((x) => x['inv_quantity_on_hand']))});
  }
  return _q0;
})();

Map<String, Map<String, any>> grouped = {};

var summary = [];

void main() {
  for (var m in monthly) {
    var key = {'w': m['w'], 'i': m['i']}.toString();
    if (_in(key, grouped)) {
      var g = (grouped as Map)[key];
      grouped[key] = {'w': g['w'], 'i': g['i'], 'qtys': List.from(g['qtys'])..add(m['qty'])};
    }
    else {
      grouped[key] = {'w': m['w'], 'i': m['i'], 'qtys': [m['qty']]};
    }
  }
  for (var g in grouped.values.toList()) {
    var mean = (() { var _t5 = g['qtys']; return (_t5.isEmpty ? 0 : _t5.reduce((a, b) => a + b) / _t5.length); })();
    var sumsq = 0;
    var _iter6 = g['qtys'];
    for (var q in (_iter6 is Map ? (_iter6 as Map).keys : _iter6) as Iterable) {
      sumsq = (sumsq as num) + ((((q as num) - (mean as num)) as num) * (((q as num) - (mean as num)) as num) as num);
    }
    var variance = (sumsq as num) / (g['qtys'].length - 1);
    var cov = math['sqrt'](variance) / (mean as num);
    if (cov.toString().compareTo(1.5.toString()) > 0) {
      summary = List.from(summary)..add({'w_warehouse_sk': g['w'], 'i_item_sk': g['i'], 'cov': cov});
    }
  }
  print(jsonEncode(summary));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
