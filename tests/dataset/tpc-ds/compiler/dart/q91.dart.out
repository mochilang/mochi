// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:07Z
import 'dart:io';
import 'dart:convert';

class CallCenter {
  int cc_call_center_sk;
  String cc_call_center_id;
  String cc_name;
  String cc_manager;
  CallCenter(this.cc_call_center_sk, this.cc_call_center_id, this.cc_name, this.cc_manager);
}

class CatalogReturn {
  int cr_call_center_sk;
  int cr_returned_date_sk;
  int cr_returning_customer_sk;
  double cr_net_loss;
  CatalogReturn(this.cr_call_center_sk, this.cr_returned_date_sk, this.cr_returning_customer_sk, this.cr_net_loss);
}

class DateDim {
  int d_date_sk;
  int d_year;
  int d_moy;
  DateDim(this.d_date_sk, this.d_year, this.d_moy);
}

class Customer {
  int c_customer_sk;
  int c_current_cdemo_sk;
  int c_current_hdemo_sk;
  int c_current_addr_sk;
  Customer(this.c_customer_sk, this.c_current_cdemo_sk, this.c_current_hdemo_sk, this.c_current_addr_sk);
}

class CustomerAddress {
  int ca_address_sk;
  int ca_gmt_offset;
  CustomerAddress(this.ca_address_sk, this.ca_gmt_offset);
}

class CustomerDemographics {
  int cd_demo_sk;
  String cd_marital_status;
  String cd_education_status;
  CustomerDemographics(this.cd_demo_sk, this.cd_marital_status, this.cd_education_status);
}

class HouseholdDemographics {
  int hd_demo_sk;
  String hd_buy_potential;
  HouseholdDemographics(this.hd_demo_sk, this.hd_buy_potential);
}

var call_center = [{'cc_call_center_sk': 1, 'cc_call_center_id': 'CC1', 'cc_name': 'Main', 'cc_manager': 'Alice'}];

var catalog_returns = [{'cr_call_center_sk': 1, 'cr_returned_date_sk': 1, 'cr_returning_customer_sk': 1, 'cr_net_loss': 10}];

var date_dim = [{'d_date_sk': 1, 'd_year': 2001, 'd_moy': 5}];

var customer = [{'c_customer_sk': 1, 'c_current_cdemo_sk': 1, 'c_current_hdemo_sk': 1, 'c_current_addr_sk': 1}];

var customer_demographics = [{'cd_demo_sk': 1, 'cd_marital_status': 'M', 'cd_education_status': 'Unknown'}];

var household_demographics = [{'hd_demo_sk': 1, 'hd_buy_potential': '1001-5000'}];

var customer_address = [{'ca_address_sk': 1, 'ca_gmt_offset': -6}];

var result = first((() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var cc in call_center) {
    for (var cr in catalog_returns) {
      if (!(cc['cc_call_center_sk'] == cr['cr_call_center_sk'])) continue;
      for (var d in date_dim) {
        if (!(cr['cr_returned_date_sk'] == d['d_date_sk'])) continue;
        for (var c in customer) {
          if (!(cr['cr_returning_customer_sk'] == c['c_customer_sk'])) continue;
          for (var cd in customer_demographics) {
            if (!(c['c_current_cdemo_sk'] == cd['cd_demo_sk'])) continue;
            for (var hd in household_demographics) {
              if (!(c['c_current_hdemo_sk'] == hd['hd_demo_sk'])) continue;
              for (var ca in customer_address) {
                if (!(c['c_current_addr_sk'] == ca['ca_address_sk'])) continue;
                if (!(d['d_year'] == 2001 && d['d_moy'] == 5 && cd['cd_marital_status'] == 'M' && cd['cd_education_status'] == 'Unknown' && hd['hd_buy_potential'] == '1001-5000' && ca['ca_gmt_offset'] == (-6))) continue;
                var _k3 = {'id': cc['cc_call_center_id'], 'name': cc['cc_name'], 'mgr': cc['cc_manager']};
                var _k3_s = jsonEncode(_k3);
                _g1.putIfAbsent(_k3_s, () => <dynamic>[]).add({'cc': cc, 'cr': cr, 'd': d, 'c': c, 'cd': cd, 'hd': hd, 'ca': ca});
              }
            }
          }
        }
      }
    }
  }
  for (var entry in _g1.entries) {
    var g = entry.value;
    var _k3 = jsonDecode(entry.key);
    _q0.add({'Call_Center': _k3['id'], 'Call_Center_Name': _k3['name'], 'Manager': _k3['mgr'], 'Returns_Loss': _sum(g.map((x) => x['cr_net_loss']))});
  }
  return _q0;
})());

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
