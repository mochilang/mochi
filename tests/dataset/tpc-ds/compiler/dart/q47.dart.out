// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:07Z
import 'dart:io';
import 'dart:convert';

var v2 = [{'d_year': 2020, 'item': 'A', 'avg_monthly_sales': 100, 'sum_sales': 120}, {'d_year': 2020, 'item': 'B', 'avg_monthly_sales': 80, 'sum_sales': 70}, {'d_year': 2019, 'item': 'C', 'avg_monthly_sales': 50, 'sum_sales': 60}];

var year = 2020;

var orderby = 'item';

double abs(double x) {
  if (x >= 0) {
    return x;
  }
  else {
    return -x;
  }
}

var result = (() {
  var _q0 = <dynamic>[];
  for (var v in v2) {
    if (!(v['d_year'].toString().compareTo(year - 1.toString()) >= 0 && v['avg_monthly_sales'].toString().compareTo(0.toString()) > 0 && v['sum_sales'].toString().compareTo(v['avg_monthly_sales'].toString()) > 0 && abs((v['sum_sales'] as num) - (v['avg_monthly_sales'] as num)) / (v['avg_monthly_sales'] as num).toString().compareTo(0.1.toString()) > 0)) continue;
    _q0.add([[(v['sum_sales'] as num) - (v['avg_monthly_sales'] as num), v['item']], {'d_year': v['d_year'], 'item': v['item'], 'avg_monthly_sales': v['avg_monthly_sales'], 'sum_sales': v['sum_sales']}]);
  }
  _q0.sort((a,b) => (jsonEncode(a[0]) as Comparable).compareTo(jsonEncode(b[0])));
  _q0 = [for (var x in _q0) x[1]];
  return _q0;
})();

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
