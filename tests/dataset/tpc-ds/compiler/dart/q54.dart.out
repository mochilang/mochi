// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:07Z
import 'dart:io';
import 'dart:convert';

var store_sales = [{'customer': 1, 'sold_date': 2, 'price': 60}, {'customer': 2, 'sold_date': 2, 'price': 40}];

var date_dim = [{'d_date_sk': 2, 'd_month_seq': 5}];

var customer = [{'c_customer_sk': 1, 'c_current_addr_sk': 1}, {'c_customer_sk': 2, 'c_current_addr_sk': 1}];

var customer_address = [{'ca_address_sk': 1, 'ca_county': 'X', 'ca_state': 'Y'}];

var store = [{'s_store_sk': 1, 's_county': 'X', 's_state': 'Y'}];

int int(double x) {
  return int.parse(x);
}

var revenue = (() {
  var _q0 = <dynamic>[];
  for (var ss in store_sales) {
    for (var d in date_dim) {
      if (!(ss['sold_date'] == d['d_date_sk'])) continue;
      for (var c in customer) {
        if (!(ss['customer'] == c['c_customer_sk'])) continue;
        for (var ca in customer_address) {
          if (!(c['c_current_addr_sk'] == ca['ca_address_sk'] && ca['ca_county'] == 'X' && ca['ca_state'] == 'Y')) continue;
          for (var s in store) {
            if (!(1 == s['s_store_sk'] && ca['ca_county'] == s['s_county'] && ca['ca_state'] == s['s_state'])) continue;
            _q0.add({'customer': c['c_customer_sk'], 'amt': ss['price']});
          }
        }
      }
    }
  }
  return _q0;
})();

var by_customer = (() {
  var _q1 = <dynamic>[];
  var _g2 = <String, List<dynamic>>{};
  for (var r in revenue) {
    var _k4 = r['customer'];
    var _k4_s = jsonEncode(_k4);
    _g2.putIfAbsent(_k4_s, () => <dynamic>[]).add(r);
  }
  for (var entry in _g2.entries) {
    var g = entry.value;
    var _k4 = jsonDecode(entry.key);
    _q1.add({'customer': _k4, 'revenue': _sum(g.map((x) => x['amt']))});
  }
  return _q1;
})();

var segments = (() {
  var _q6 = <dynamic>[];
  var _g7 = <String, List<dynamic>>{};
  for (var r in by_customer) {
    var _k8 = {'seg': int((r['revenue'] as num) / 50)};
    var _k8_s = jsonEncode(_k8);
    _g7.putIfAbsent(_k8_s, () => <dynamic>[]).add(r);
  }
  for (var entry in _g7.entries) {
    var g = entry.value;
    var _k8 = jsonDecode(entry.key);
    _q6.add({'segment': _k8['seg'], 'num_customers': g.length, 'segment_base': (_k8['seg'] as num) * 50});
  }
  return _q6;
})();

var result = segments;

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
