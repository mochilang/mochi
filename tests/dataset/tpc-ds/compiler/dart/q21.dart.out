// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:06Z
import 'dart:io';
import 'dart:convert';

class Inventory {
  int inv_item_sk;
  int inv_warehouse_sk;
  int inv_date_sk;
  int inv_quantity_on_hand;
  Inventory(this.inv_item_sk, this.inv_warehouse_sk, this.inv_date_sk, this.inv_quantity_on_hand);
}

class Warehouse {
  int w_warehouse_sk;
  String w_warehouse_name;
  Warehouse(this.w_warehouse_sk, this.w_warehouse_name);
}

class Item {
  int i_item_sk;
  String i_item_id;
  Item(this.i_item_sk, this.i_item_id);
}

class DateDim {
  int d_date_sk;
  String d_date;
  DateDim(this.d_date_sk, this.d_date);
}

var inventory = [{'inv_item_sk': 1, 'inv_warehouse_sk': 1, 'inv_date_sk': 1, 'inv_quantity_on_hand': 30}, {'inv_item_sk': 1, 'inv_warehouse_sk': 1, 'inv_date_sk': 2, 'inv_quantity_on_hand': 40}, {'inv_item_sk': 2, 'inv_warehouse_sk': 2, 'inv_date_sk': 1, 'inv_quantity_on_hand': 20}, {'inv_item_sk': 2, 'inv_warehouse_sk': 2, 'inv_date_sk': 2, 'inv_quantity_on_hand': 20}];

var warehouse = [{'w_warehouse_sk': 1, 'w_warehouse_name': 'Main'}, {'w_warehouse_sk': 2, 'w_warehouse_name': 'Backup'}];

var item = [{'i_item_sk': 1, 'i_item_id': 'ITEM1'}, {'i_item_sk': 2, 'i_item_id': 'ITEM2'}];

var date_dim = [{'d_date_sk': 1, 'd_date': '2000-03-01'}, {'d_date_sk': 2, 'd_date': '2000-03-20'}];

var before = (() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var inv in inventory) {
    for (var d in date_dim) {
      if (!(inv['inv_date_sk'] == d['d_date_sk'])) continue;
      if (!(d['d_date'].toString().compareTo('2000-03-15') < 0)) continue;
      var _k3 = {'w': inv['inv_warehouse_sk'], 'i': inv['inv_item_sk']};
      var _k3_s = jsonEncode(_k3);
      _g1.putIfAbsent(_k3_s, () => <dynamic>[]).add({'inv': inv, 'd': d});
    }
  }
  for (var entry in _g1.entries) {
    var g = entry.value;
    var _k3 = jsonDecode(entry.key);
    _q0.add({'w': _k3['w'], 'i': _k3['i'], 'qty': _sum(g.map((x) => x['inv_quantity_on_hand']))});
  }
  return _q0;
})();

var after = (() {
  var _q5 = <dynamic>[];
  var _g6 = <String, List<dynamic>>{};
  for (var inv in inventory) {
    for (var d in date_dim) {
      if (!(inv['inv_date_sk'] == d['d_date_sk'])) continue;
      if (!(d['d_date'].toString().compareTo('2000-03-15') >= 0)) continue;
      var _k8 = {'w': inv['inv_warehouse_sk'], 'i': inv['inv_item_sk']};
      var _k8_s = jsonEncode(_k8);
      _g6.putIfAbsent(_k8_s, () => <dynamic>[]).add({'inv': inv, 'd': d});
    }
  }
  for (var entry in _g6.entries) {
    var g = entry.value;
    var _k8 = jsonDecode(entry.key);
    _q5.add({'w': _k8['w'], 'i': _k8['i'], 'qty': _sum(g.map((x) => x['inv_quantity_on_hand']))});
  }
  return _q5;
})();

var joined = (() {
  var _q10 = <dynamic>[];
  for (var b in before) {
    for (var a in after) {
      if (!(b['w'] == a['w'] && b['i'] == a['i'])) continue;
      for (var w in warehouse) {
        if (!(w['w_warehouse_sk'] == b['w'])) continue;
        for (var it in item) {
          if (!(it['i_item_sk'] == b['i'])) continue;
          _q10.add({'w_name': w['w_warehouse_name'], 'i_id': it['i_item_id'], 'before_qty': b['qty'], 'after_qty': a['qty'], 'ratio': (a['qty'] as num) / (b['qty'] as num)});
        }
      }
    }
  }
  return _q10;
})();

var result = (() {
  var _q11 = <dynamic>[];
  for (var r in joined) {
    if (!(r['ratio'].toString().compareTo((2 / 3).toString()) >= 0 && r['ratio'].toString().compareTo((3 / 2).toString()) <= 0)) continue;
    _q11.add([[r['w_name'], r['i_id']], {'w_warehouse_name': r['w_name'], 'i_item_id': r['i_id'], 'inv_before': r['before_qty'], 'inv_after': r['after_qty']}]);
  }
  _q11.sort((a,b) => (jsonEncode(a[0]) as Comparable).compareTo(jsonEncode(b[0])));
  _q11 = [for (var x in _q11) x[1]];
  return _q11;
})();

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
