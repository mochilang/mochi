// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:07Z
import 'dart:io';
import 'dart:convert';

var customer = [{'c_customer_sk': 1, 'c_customer_id': 1, 'c_first_name': 'Alice', 'c_last_name': 'Smith'}];

var date_dim = [{'d_date_sk': 1, 'd_year': 1998}, {'d_date_sk': 2, 'd_year': 1999}];

var store_sales = [{'ss_customer_sk': 1, 'ss_sold_date_sk': 1, 'ss_net_paid': 100}, {'ss_customer_sk': 1, 'ss_sold_date_sk': 2, 'ss_net_paid': 110}];

var web_sales = [{'ws_bill_customer_sk': 1, 'ws_sold_date_sk': 1, 'ws_net_paid': 40}, {'ws_bill_customer_sk': 1, 'ws_sold_date_sk': 2, 'ws_net_paid': 80}];

var year_total = concat((() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var c in customer) {
    for (var ss in store_sales) {
      if (!(c['c_customer_sk'] == ss['ss_customer_sk'])) continue;
      for (var d in date_dim) {
        if (!(d['d_date_sk'] == ss['ss_sold_date_sk'])) continue;
        if (!(d['d_year'] == 1998 || d['d_year'] == 1999)) continue;
        var _k3 = {'id': c['c_customer_id'], 'first': c['c_first_name'], 'last': c['c_last_name'], 'year': d['d_year']};
        var _k3_s = jsonEncode(_k3);
        _g1.putIfAbsent(_k3_s, () => <dynamic>[]).add({'c': c, 'ss': ss, 'd': d});
      }
    }
  }
  for (var entry in _g1.entries) {
    var g = entry.value;
    var _k3 = jsonDecode(entry.key);
    _q0.add({'customer_id': _k3['id'], 'customer_first_name': _k3['first'], 'customer_last_name': _k3['last'], 'year': _k3['year'], 'year_total': _sum(g.map((x) => x['ss']['ss_net_paid'])), 'sale_type': 's'});
  }
  return _q0;
})(), (() {
  var _q5 = <dynamic>[];
  var _g6 = <String, List<dynamic>>{};
  for (var c in customer) {
    for (var ws in web_sales) {
      if (!(c['c_customer_sk'] == ws['ws_bill_customer_sk'])) continue;
      for (var d in date_dim) {
        if (!(d['d_date_sk'] == ws['ws_sold_date_sk'])) continue;
        if (!(d['d_year'] == 1998 || d['d_year'] == 1999)) continue;
        var _k8 = {'id': c['c_customer_id'], 'first': c['c_first_name'], 'last': c['c_last_name'], 'year': d['d_year']};
        var _k8_s = jsonEncode(_k8);
        _g6.putIfAbsent(_k8_s, () => <dynamic>[]).add({'c': c, 'ws': ws, 'd': d});
      }
    }
  }
  for (var entry in _g6.entries) {
    var g = entry.value;
    var _k8 = jsonDecode(entry.key);
    _q5.add({'customer_id': _k8['id'], 'customer_first_name': _k8['first'], 'customer_last_name': _k8['last'], 'year': _k8['year'], 'year_total': _sum(g.map((x) => x['ws']['ws_net_paid'])), 'sale_type': 'w'});
  }
  return _q5;
})());

var s_firstyear = first((() {
  var _q10 = <dynamic>[];
  for (var y in year_total) {
    if (!(y['sale_type'] == 's' && y['year'] == 1998)) continue;
    _q10.add(y);
  }
  return _q10;
})());

var s_secyear = first((() {
  var _q11 = <dynamic>[];
  for (var y in year_total) {
    if (!(y['sale_type'] == 's' && y['year'] == 1999)) continue;
    _q11.add(y);
  }
  return _q11;
})());

var w_firstyear = first((() {
  var _q12 = <dynamic>[];
  for (var y in year_total) {
    if (!(y['sale_type'] == 'w' && y['year'] == 1998)) continue;
    _q12.add(y);
  }
  return _q12;
})());

var w_secyear = first((() {
  var _q13 = <dynamic>[];
  for (var y in year_total) {
    if (!(y['sale_type'] == 'w' && y['year'] == 1999)) continue;
    _q13.add(y);
  }
  return _q13;
})());

var result = (s_firstyear['year_total'].toString().compareTo(0.toString()) > 0 && w_firstyear['year_total'].toString().compareTo(0.toString()) > 0 && ((w_secyear['year_total'] as num) / (w_firstyear['year_total'] as num)).toString().compareTo(((s_secyear['year_total'] as num) / (s_firstyear['year_total'] as num)).toString()) > 0 ? [{'customer_id': s_secyear['customer_id'], 'customer_first_name': s_secyear['customer_first_name'], 'customer_last_name': s_secyear['customer_last_name']}] : []);

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
