// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:07Z
import 'dart:io';
import 'dart:convert';

var date_dim = [{'d_date_sk': 1, 'd_year': 2000}, {'d_date_sk': 2, 'd_year': 2001}];

var store_sales = [{'ss_item_sk': 1, 'ss_quantity': 50, 'ss_sales_price': 500, 'ss_sold_date_sk': 1}, {'ss_item_sk': 1, 'ss_quantity': 40, 'ss_sales_price': 400, 'ss_sold_date_sk': 2}];

var web_sales = [{'ws_item_sk': 1, 'ws_quantity': 30, 'ws_sales_price': 300, 'ws_sold_date_sk': 1}, {'ws_item_sk': 1, 'ws_quantity': 25, 'ws_sales_price': 250, 'ws_sold_date_sk': 2}];

var catalog_sales = [{'cs_item_sk': 1, 'cs_quantity': 20, 'cs_sales_price': 200, 'cs_sold_date_sk': 1}, {'cs_item_sk': 1, 'cs_quantity': 15, 'cs_sales_price': 150, 'cs_sold_date_sk': 2}];

var item = [{'i_item_sk': 1, 'i_brand_id': 1, 'i_class_id': 2, 'i_category_id': 3, 'i_manufact_id': 4, 'i_category': 'Electronics'}];

var sales_detail = concat((() {
  var _q0 = <dynamic>[];
  for (var ss in store_sales) {
    for (var d in date_dim) {
      if (!(d['d_date_sk'] == ss['ss_sold_date_sk'])) continue;
      _q0.add({'d_year': d['d_year'], 'i_item_sk': ss['ss_item_sk'], 'quantity': ss['ss_quantity'], 'amount': ss['ss_sales_price']});
    }
  }
  return _q0;
})(), (() {
  var _q1 = <dynamic>[];
  for (var ws in web_sales) {
    for (var d in date_dim) {
      if (!(d['d_date_sk'] == ws['ws_sold_date_sk'])) continue;
      _q1.add({'d_year': d['d_year'], 'i_item_sk': ws['ws_item_sk'], 'quantity': ws['ws_quantity'], 'amount': ws['ws_sales_price']});
    }
  }
  return _q1;
})(), (() {
  var _q2 = <dynamic>[];
  for (var cs in catalog_sales) {
    for (var d in date_dim) {
      if (!(d['d_date_sk'] == cs['cs_sold_date_sk'])) continue;
      _q2.add({'d_year': d['d_year'], 'i_item_sk': cs['cs_item_sk'], 'quantity': cs['cs_quantity'], 'amount': cs['cs_sales_price']});
    }
  }
  return _q2;
})());

var all_sales = (() {
  var _q3 = <dynamic>[];
  var _g4 = <String, List<dynamic>>{};
  for (var sd in sales_detail) {
    for (var i in item) {
      if (!(i['i_item_sk'] == sd['i_item_sk'])) continue;
      if (!(i['i_category'] == 'Electronics')) continue;
      var _k7 = {'year': sd['d_year'], 'brand_id': i['i_brand_id'], 'class_id': i['i_class_id'], 'category_id': i['i_category_id'], 'manuf_id': i['i_manufact_id']};
      var _k7_s = jsonEncode(_k7);
      _g4.putIfAbsent(_k7_s, () => <dynamic>[]).add({'sd': sd, 'i': i});
    }
  }
  for (var entry in _g4.entries) {
    var g = entry.value;
    var _k7 = jsonDecode(entry.key);
    _q3.add({'d_year': _k7['year'], 'i_brand_id': _k7['brand_id'], 'i_class_id': _k7['class_id'], 'i_category_id': _k7['category_id'], 'i_manufact_id': _k7['manuf_id'], 'sales_cnt': _sum(g.map((x) => x['sd']['quantity'])), 'sales_amt': _sum(g.map((x) => x['sd']['amount']))});
  }
  return _q3;
})();

var prev_yr = first((() {
  var _q10 = <dynamic>[];
  for (var a in all_sales) {
    if (!(a['d_year'] == 2000)) continue;
    _q10.add(a);
  }
  return _q10;
})());

var curr_yr = first((() {
  var _q11 = <dynamic>[];
  for (var a in all_sales) {
    if (!(a['d_year'] == 2001)) continue;
    _q11.add(a);
  }
  return _q11;
})());

var result = (((curr_yr['sales_cnt'] as num) / (prev_yr['sales_cnt'] as num)).toString().compareTo(0.9.toString()) < 0 ? [{'prev_year': prev_yr['d_year'], 'year': curr_yr['d_year'], 'i_brand_id': curr_yr['i_brand_id'], 'i_class_id': curr_yr['i_class_id'], 'i_category_id': curr_yr['i_category_id'], 'i_manufact_id': curr_yr['i_manufact_id'], 'prev_yr_cnt': prev_yr['sales_cnt'], 'curr_yr_cnt': curr_yr['sales_cnt'], 'sales_cnt_diff': (curr_yr['sales_cnt'] as num) - (prev_yr['sales_cnt'] as num), 'sales_amt_diff': (curr_yr['sales_amt'] as num) - (prev_yr['sales_amt'] as num)}] : []);

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
