import 'dart:io';
import 'dart:convert';

class StoreSale {
  int ss_store_sk;
  int ss_sold_date_sk;
  int ss_hdemo_sk;
  int ss_cdemo_sk;
  int ss_addr_sk;
  double ss_sales_price;
  double ss_net_profit;
  int ss_quantity;
  double ss_ext_sales_price;
  double ss_ext_wholesale_cost;
  StoreSale({required this.ss_store_sk, required this.ss_sold_date_sk, required this.ss_hdemo_sk, required this.ss_cdemo_sk, required this.ss_addr_sk, required this.ss_sales_price, required this.ss_net_profit, required this.ss_quantity, required this.ss_ext_sales_price, required this.ss_ext_wholesale_cost});
  factory StoreSale.fromJson(Map<String,dynamic> m) {
    return StoreSale(ss_store_sk: m['ss_store_sk'] as int, ss_sold_date_sk: m['ss_sold_date_sk'] as int, ss_hdemo_sk: m['ss_hdemo_sk'] as int, ss_cdemo_sk: m['ss_cdemo_sk'] as int, ss_addr_sk: m['ss_addr_sk'] as int, ss_sales_price: m['ss_sales_price'] as double, ss_net_profit: m['ss_net_profit'] as double, ss_quantity: m['ss_quantity'] as int, ss_ext_sales_price: m['ss_ext_sales_price'] as double, ss_ext_wholesale_cost: m['ss_ext_wholesale_cost'] as double);
  }
}
_structParsers['StoreSale'] = (m) => StoreSale.fromJson(m);

class Store {
  int s_store_sk;
  String s_state;
  Store({required this.s_store_sk, required this.s_state});
  factory Store.fromJson(Map<String,dynamic> m) {
    return Store(s_store_sk: m['s_store_sk'] as int, s_state: m['s_state'] as String);
  }
}
_structParsers['Store'] = (m) => Store.fromJson(m);

class CustomerDemographics {
  int cd_demo_sk;
  String cd_marital_status;
  String cd_education_status;
  CustomerDemographics({required this.cd_demo_sk, required this.cd_marital_status, required this.cd_education_status});
  factory CustomerDemographics.fromJson(Map<String,dynamic> m) {
    return CustomerDemographics(cd_demo_sk: m['cd_demo_sk'] as int, cd_marital_status: m['cd_marital_status'] as String, cd_education_status: m['cd_education_status'] as String);
  }
}
_structParsers['CustomerDemographics'] = (m) => CustomerDemographics.fromJson(m);

class HouseholdDemographics {
  int hd_demo_sk;
  int hd_dep_count;
  HouseholdDemographics({required this.hd_demo_sk, required this.hd_dep_count});
  factory HouseholdDemographics.fromJson(Map<String,dynamic> m) {
    return HouseholdDemographics(hd_demo_sk: m['hd_demo_sk'] as int, hd_dep_count: m['hd_dep_count'] as int);
  }
}
_structParsers['HouseholdDemographics'] = (m) => HouseholdDemographics.fromJson(m);

class CustomerAddress {
  int ca_address_sk;
  String ca_country;
  String ca_state;
  CustomerAddress({required this.ca_address_sk, required this.ca_country, required this.ca_state});
  factory CustomerAddress.fromJson(Map<String,dynamic> m) {
    return CustomerAddress(ca_address_sk: m['ca_address_sk'] as int, ca_country: m['ca_country'] as String, ca_state: m['ca_state'] as String);
  }
}
_structParsers['CustomerAddress'] = (m) => CustomerAddress.fromJson(m);

class DateDim {
  int d_date_sk;
  int d_year;
  DateDim({required this.d_date_sk, required this.d_year});
  factory DateDim.fromJson(Map<String,dynamic> m) {
    return DateDim(d_date_sk: m['d_date_sk'] as int, d_year: m['d_year'] as int);
  }
}
_structParsers['DateDim'] = (m) => DateDim.fromJson(m);

void test_TPCDS_Q13_averages() {
  if (!(_equal(result, [{"avg_ss_quantity": 10, "avg_ss_ext_sales_price": 100, "avg_ss_ext_wholesale_cost": 50, "sum_ss_ext_wholesale_cost": 50}]))) { throw Exception('expect failed'); }
}

void main() {
  int failures = 0;
  List<Map<String, dynamic>> store_sales = [{"ss_store_sk": 1, "ss_sold_date_sk": 1, "ss_hdemo_sk": 1, "ss_cdemo_sk": 1, "ss_addr_sk": 1, "ss_sales_price": 120, "ss_net_profit": 150, "ss_quantity": 10, "ss_ext_sales_price": 100, "ss_ext_wholesale_cost": 50}];
  List<Map<String, dynamic>> store = [{"s_store_sk": 1, "s_state": "CA"}];
  List<Map<String, dynamic>> customer_demographics = [{"cd_demo_sk": 1, "cd_marital_status": "M1", "cd_education_status": "ES1"}];
  List<Map<String, int>> household_demographics = [{"hd_demo_sk": 1, "hd_dep_count": 3}];
  List<Map<String, dynamic>> customer_address = [{"ca_address_sk": 1, "ca_country": "United States", "ca_state": "CA"}];
  List<Map<String, int>> date_dim = [{"d_date_sk": 1, "d_year": 2001}];
  List<Map<String, dynamic>> filtered = (() {
  var _res = [];
  for (var ss in store_sales) {
    for (var s in store) {
      if (!(_equal(ss.ss_store_sk, s.s_store_sk))) {
        continue;
      }
      for (var cd in customer_demographics) {
        if (!(((_equal(ss.ss_cdemo_sk, cd.cd_demo_sk) && _equal(cd.cd_marital_status, "M1")) && _equal(cd.cd_education_status, "ES1")))) {
          continue;
        }
        for (var hd in household_demographics) {
          if (!((_equal(ss.ss_hdemo_sk, hd.hd_demo_sk) && _equal(hd.hd_dep_count, 3)))) {
            continue;
          }
          for (var ca in customer_address) {
            if (!(((_equal(ss.ss_addr_sk, ca.ca_address_sk) && _equal(ca.ca_country, "United States")) && _equal(ca.ca_state, "CA")))) {
              continue;
            }
            for (var d in date_dim) {
              if (!((_equal(ss.ss_sold_date_sk, d.d_date_sk) && _equal(d.d_year, 2001)))) {
                continue;
              }
              _res.add(ss);
            }
          }
        }
      }
    }
  }
  return _res;
})();
  List<Map<String, double>> result = _group_by(filtered, (r) => {}).map((g) => {"avg_ss_quantity": _avg((() {
  var _res = [];
  for (var x in g) {
    _res.add(x.ss_quantity);
  }
  return _res;
})()), "avg_ss_ext_sales_price": _avg((() {
  var _res = [];
  for (var x in g) {
    _res.add(x.ss_ext_sales_price);
  }
  return _res;
})()), "avg_ss_ext_wholesale_cost": _avg((() {
  var _res = [];
  for (var x in g) {
    _res.add(x.ss_ext_wholesale_cost);
  }
  return _res;
})()), "sum_ss_ext_wholesale_cost": _sum((() {
  var _res = [];
  for (var x in g) {
    _res.add(x.ss_ext_wholesale_cost);
  }
  return _res;
})())}).toList();
  _json(result);
  if (!_runTest("TPCDS Q13 averages", test_TPCDS_Q13_averages)) failures++;
  if (failures > 0) {
    print("\n[FAIL] $failures test(s) failed.");
  }
}

class _Group {
    dynamic key;
    List<dynamic> Items = [];
    _Group(this.key);
    int count() => _count(this);
    double sum() => _sum(this);
    double avg() => _avg(this);
}

double _avg(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else if (v is _Group) list = v.Items;
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var s = 0.0;
    for (var n in list) s += (n as num).toDouble();
    return s / list.length;
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

List<_Group> _group_by(List<dynamic> src, dynamic Function(dynamic) keyfn) {
    var groups = <String,_Group>{};
    var order = <String>[];
    for (var it in src) {
        var key = keyfn(it);
        var ks = key.toString();
        var g = groups[ks];
        if (g == null) {
            g = _Group(key);
            groups[ks] = g;
            order.add(ks);
        }
        g.Items.add(it);
    }
    return [for (var k in order) groups[k]!];
}

void _json(dynamic v) {
    print(jsonEncode(v));
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}

double _sum(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else if (v is _Group) list = v.Items;
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var s = 0.0;
    for (var n in list) s += (n as num).toDouble();
    return s;
}


