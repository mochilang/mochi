// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:06Z
import 'dart:io';
import 'dart:convert';

class StoreSale {
  int ss_store_sk;
  int ss_sold_date_sk;
  int ss_hdemo_sk;
  int ss_cdemo_sk;
  int ss_addr_sk;
  double ss_sales_price;
  double ss_net_profit;
  int ss_quantity;
  double ss_ext_sales_price;
  double ss_ext_wholesale_cost;
  StoreSale(this.ss_store_sk, this.ss_sold_date_sk, this.ss_hdemo_sk, this.ss_cdemo_sk, this.ss_addr_sk, this.ss_sales_price, this.ss_net_profit, this.ss_quantity, this.ss_ext_sales_price, this.ss_ext_wholesale_cost);
}

class Store {
  int s_store_sk;
  String s_state;
  Store(this.s_store_sk, this.s_state);
}

class CustomerDemographics {
  int cd_demo_sk;
  String cd_marital_status;
  String cd_education_status;
  CustomerDemographics(this.cd_demo_sk, this.cd_marital_status, this.cd_education_status);
}

class HouseholdDemographics {
  int hd_demo_sk;
  int hd_dep_count;
  HouseholdDemographics(this.hd_demo_sk, this.hd_dep_count);
}

class CustomerAddress {
  int ca_address_sk;
  String ca_country;
  String ca_state;
  CustomerAddress(this.ca_address_sk, this.ca_country, this.ca_state);
}

class DateDim {
  int d_date_sk;
  int d_year;
  DateDim(this.d_date_sk, this.d_year);
}

var store_sales = [{'ss_store_sk': 1, 'ss_sold_date_sk': 1, 'ss_hdemo_sk': 1, 'ss_cdemo_sk': 1, 'ss_addr_sk': 1, 'ss_sales_price': 120, 'ss_net_profit': 150, 'ss_quantity': 10, 'ss_ext_sales_price': 100, 'ss_ext_wholesale_cost': 50}];

var store = [{'s_store_sk': 1, 's_state': 'CA'}];

var customer_demographics = [{'cd_demo_sk': 1, 'cd_marital_status': 'M1', 'cd_education_status': 'ES1'}];

var household_demographics = [{'hd_demo_sk': 1, 'hd_dep_count': 3}];

var customer_address = [{'ca_address_sk': 1, 'ca_country': 'United States', 'ca_state': 'CA'}];

var date_dim = [{'d_date_sk': 1, 'd_year': 2001}];

var filtered = (() {
  var _q0 = <dynamic>[];
  for (var ss in store_sales) {
    for (var s in store) {
      if (!(ss['ss_store_sk'] == s['s_store_sk'])) continue;
      for (var cd in customer_demographics) {
        if (!(ss['ss_cdemo_sk'] == cd['cd_demo_sk'] && cd['cd_marital_status'] == 'M1' && cd['cd_education_status'] == 'ES1')) continue;
        for (var hd in household_demographics) {
          if (!(ss['ss_hdemo_sk'] == hd['hd_demo_sk'] && hd['hd_dep_count'] == 3)) continue;
          for (var ca in customer_address) {
            if (!(ss['ss_addr_sk'] == ca['ca_address_sk'] && ca['ca_country'] == 'United States' && ca['ca_state'] == 'CA')) continue;
            for (var d in date_dim) {
              if (!(ss['ss_sold_date_sk'] == d['d_date_sk'] && d['d_year'] == 2001)) continue;
              _q0.add(ss);
            }
          }
        }
      }
    }
  }
  return _q0;
})();

var result = (() {
  var _q1 = <dynamic>[];
  var _g2 = <String, List<dynamic>>{};
  for (var r in filtered) {
    var _k10 = {};
    var _k10_s = jsonEncode(_k10);
    _g2.putIfAbsent(_k10_s, () => <dynamic>[]).add(r);
  }
  for (var entry in _g2.entries) {
    var g = entry.value;
    var _k10 = jsonDecode(entry.key);
    _q1.add({'avg_ss_quantity': (() { var _t12 = (() {
  var _q11 = <dynamic>[];
  for (var x in g) {
    _q11.add(x['ss_quantity']);
  }
  return _q11;
})(); return (_t12.isEmpty ? 0 : _t12.reduce((a, b) => a + b) / _t12.length); })(), 'avg_ss_ext_sales_price': (() { var _t14 = (() {
  var _q13 = <dynamic>[];
  for (var x in g) {
    _q13.add(x['ss_ext_sales_price']);
  }
  return _q13;
})(); return (_t14.isEmpty ? 0 : _t14.reduce((a, b) => a + b) / _t14.length); })(), 'avg_ss_ext_wholesale_cost': (() { var _t16 = (() {
  var _q15 = <dynamic>[];
  for (var x in g) {
    _q15.add(x['ss_ext_wholesale_cost']);
  }
  return _q15;
})(); return (_t16.isEmpty ? 0 : _t16.reduce((a, b) => a + b) / _t16.length); })(), 'sum_ss_ext_wholesale_cost': _sum(g.map((x) => x['ss_ext_wholesale_cost']))});
  }
  return _q1;
})();

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
