// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:07Z
import 'dart:io';
import 'dart:convert';

class StoreSale {
  int ss_item_sk;
  int ss_sold_date_sk;
  double ss_ext_sales_price;
  StoreSale(this.ss_item_sk, this.ss_sold_date_sk, this.ss_ext_sales_price);
}

class Item {
  int i_item_sk;
  String i_item_id;
  String i_item_desc;
  String i_category;
  String i_class;
  double i_current_price;
  Item(this.i_item_sk, this.i_item_id, this.i_item_desc, this.i_category, this.i_class, this.i_current_price);
}

class DateDim {
  int d_date_sk;
  String d_date;
  DateDim(this.d_date_sk, this.d_date);
}

var store_sales = [{'ss_item_sk': 1, 'ss_sold_date_sk': 1, 'ss_ext_sales_price': 50}, {'ss_item_sk': 2, 'ss_sold_date_sk': 1, 'ss_ext_sales_price': 100}];

var item = [{'i_item_sk': 1, 'i_item_id': 'I1', 'i_item_desc': 'desc1', 'i_category': 'CatA', 'i_class': 'Class1', 'i_current_price': 100}, {'i_item_sk': 2, 'i_item_id': 'I2', 'i_item_desc': 'desc2', 'i_category': 'CatB', 'i_class': 'Class1', 'i_current_price': 200}];

var date_dim = [{'d_date_sk': 1, 'd_date': '2000-02-01'}];

var grouped = (() {
  var _q0 = <dynamic>[];
  var _g1 = <String, List<dynamic>>{};
  for (var ss in store_sales) {
    for (var i in item) {
      if (!(ss['ss_item_sk'] == i['i_item_sk'])) continue;
      for (var d in date_dim) {
        if (!(ss['ss_sold_date_sk'] == d['d_date_sk'])) continue;
        var _k3 = {'item_id': i['i_item_id'], 'item_desc': i['i_item_desc'], 'category': i['i_category'], 'class': i['i_class'], 'price': i['i_current_price']};
        var _k3_s = jsonEncode(_k3);
        _g1.putIfAbsent(_k3_s, () => <dynamic>[]).add({'ss': ss, 'i': i, 'd': d});
      }
    }
  }
  for (var entry in _g1.entries) {
    var g = entry.value;
    var _k3 = jsonDecode(entry.key);
    _q0.add({'i_item_id': _k3['item_id'], 'i_item_desc': _k3['item_desc'], 'i_category': _k3['category'], 'i_class': _k3['class'], 'i_current_price': _k3['price'], 'itemrevenue': _sum(g.map((x) => x['ss_ext_sales_price']))});
  }
  return _q0;
})();

var totals = (() {
  var _q5 = <dynamic>[];
  var _g6 = <String, List<dynamic>>{};
  for (var g in grouped) {
    var _k8 = g['i_class'];
    var _k8_s = jsonEncode(_k8);
    _g6.putIfAbsent(_k8_s, () => <dynamic>[]).add(g);
  }
  for (var entry in _g6.entries) {
    var cg = entry.value;
    var _k8 = jsonDecode(entry.key);
    _q5.add({'class': _k8, 'total': _sum(cg.map((x) => x['itemrevenue']))});
  }
  return _q5;
})();

var result = (() {
  var _q10 = <dynamic>[];
  for (var g in grouped) {
    for (var t in totals) {
      if (!(g['i_class'] == t['class'])) continue;
      _q10.add([[g['i_category'], g['i_class'], g['i_item_id']], {'i_item_id': g['i_item_id'], 'i_item_desc': g['i_item_desc'], 'i_category': g['i_category'], 'i_class': g['i_class'], 'i_current_price': g['i_current_price'], 'itemrevenue': g['itemrevenue'], 'revenueratio': ((g['itemrevenue'] as num) * 100 as num) / (t['total'] as num)}]);
    }
  }
  _q10.sort((a,b) => (jsonEncode(a[0]) as Comparable).compareTo(jsonEncode(b[0])));
  _q10 = [for (var x in _q10) x[1]];
  return _q10;
})();

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
