// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:07Z
import 'dart:io';
import 'dart:convert';

bool _in(dynamic item, dynamic col) {
  if (col is Map) return col.containsKey(item);
  if (col is Iterable || col is String) return col.contains(item);
  return false;
}

class WebSale {
  int ws_order_number;
  int ws_warehouse_sk;
  int ws_ship_date_sk;
  int ws_ship_addr_sk;
  int ws_web_site_sk;
  double ws_ext_ship_cost;
  double ws_net_profit;
  WebSale(this.ws_order_number, this.ws_warehouse_sk, this.ws_ship_date_sk, this.ws_ship_addr_sk, this.ws_web_site_sk, this.ws_ext_ship_cost, this.ws_net_profit);
}

class WebReturn {
  int wr_order_number;
  WebReturn(this.wr_order_number);
}

class DateDim {
  int d_date_sk;
  String d_date;
  DateDim(this.d_date_sk, this.d_date);
}

class CustomerAddress {
  int ca_address_sk;
  String ca_state;
  CustomerAddress(this.ca_address_sk, this.ca_state);
}

class WebSite {
  int web_site_sk;
  String web_company_name;
  WebSite(this.web_site_sk, this.web_company_name);
}

List<any> distinct(List<any> xs) {
  var out = [];
  for (var x in xs) {
    if (!contains(out, x)) {
      out = List.from(out)..add(x);
    }
  }
  return out;
}

var web_sales = [{'ws_order_number': 1, 'ws_warehouse_sk': 1, 'ws_ship_date_sk': 1, 'ws_ship_addr_sk': 1, 'ws_web_site_sk': 1, 'ws_ext_ship_cost': 2, 'ws_net_profit': 5}, {'ws_order_number': 1, 'ws_warehouse_sk': 2, 'ws_ship_date_sk': 1, 'ws_ship_addr_sk': 1, 'ws_web_site_sk': 1, 'ws_ext_ship_cost': 0, 'ws_net_profit': 0}];

var web_returns = [{'wr_order_number': 1}];

var date_dim = [{'d_date_sk': 1, 'd_date': '2001-02-01'}];

var customer_address = [{'ca_address_sk': 1, 'ca_state': 'CA'}];

var web_site = [{'web_site_sk': 1, 'web_company_name': 'pri'}];

var ws_wh = (() {
  var _q0 = <dynamic>[];
  for (var ws1 in web_sales) {
    for (var ws2 in web_sales) {
      if (!(ws1['ws_order_number'] == ws2['ws_order_number'] && ws1['ws_warehouse_sk'] != ws2['ws_warehouse_sk'])) continue;
      _q0.add({'ws_order_number': ws1['ws_order_number']});
    }
  }
  return _q0;
})();

var filtered = (() {
  var _q1 = <dynamic>[];
  for (var ws in web_sales) {
    for (var d in date_dim) {
      if (!(ws['ws_ship_date_sk'] == d['d_date_sk'])) continue;
      for (var ca in customer_address) {
        if (!(ws['ws_ship_addr_sk'] == ca['ca_address_sk'])) continue;
        for (var w in web_site) {
          if (!(ws['ws_web_site_sk'] == w['web_site_sk'])) continue;
          if (!(ca['ca_state'] == 'CA' && w['web_company_name'] == 'pri' && _in(ws['ws_order_number'], ((() {
  var _q2 = <dynamic>[];
  for (var x in ws_wh) {
    _q2.add(x['ws_order_number']);
  }
  return _q2;
})())) && _in(ws['ws_order_number'], ((() {
  var _q3 = <dynamic>[];
  for (var wr in web_returns) {
    _q3.add(wr['wr_order_number']);
  }
  return _q3;
})())))) continue;
          _q1.add(ws);
        }
      }
    }
  }
  return _q1;
})();

var result = {'order_count': distinct((() {
  var _q4 = <dynamic>[];
  for (var x in filtered) {
    _q4.add(x['ws_order_number']);
  }
  return _q4;
})()).length, 'total_shipping_cost': _sum(filtered.map((x) => x['ws_ext_ship_cost'])), 'total_net_profit': _sum(filtered.map((x) => x['ws_net_profit']))};

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
