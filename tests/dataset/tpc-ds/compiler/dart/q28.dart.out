// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:06Z
import 'dart:io';
import 'dart:convert';

class StoreSale {
  int ss_quantity;
  double ss_list_price;
  double ss_coupon_amt;
  double ss_wholesale_cost;
  StoreSale(this.ss_quantity, this.ss_list_price, this.ss_coupon_amt, this.ss_wholesale_cost);
}

var store_sales = [{'ss_quantity': 3, 'ss_list_price': 100, 'ss_coupon_amt': 50, 'ss_wholesale_cost': 30}, {'ss_quantity': 8, 'ss_list_price': 80, 'ss_coupon_amt': 10, 'ss_wholesale_cost': 20}, {'ss_quantity': 12, 'ss_list_price': 60, 'ss_coupon_amt': 5, 'ss_wholesale_cost': 15}];

var bucket1 = (() {
  var _q0 = <dynamic>[];
  for (var ss in store_sales) {
    if (!(ss['ss_quantity'].toString().compareTo(0.toString()) >= 0 && ss['ss_quantity'].toString().compareTo(5.toString()) <= 0 && ((ss['ss_list_price'].toString().compareTo(0.toString()) >= 0 && ss['ss_list_price'].toString().compareTo(110.toString()) <= 0) || (ss['ss_coupon_amt'].toString().compareTo(0.toString()) >= 0 && ss['ss_coupon_amt'].toString().compareTo(1000.toString()) <= 0) || (ss['ss_wholesale_cost'].toString().compareTo(0.toString()) >= 0 && ss['ss_wholesale_cost'].toString().compareTo(50.toString()) <= 0)))) continue;
    _q0.add(ss);
  }
  return _q0;
})();

var bucket2 = (() {
  var _q1 = <dynamic>[];
  for (var ss in store_sales) {
    if (!(ss['ss_quantity'].toString().compareTo(6.toString()) >= 0 && ss['ss_quantity'].toString().compareTo(10.toString()) <= 0 && ((ss['ss_list_price'].toString().compareTo(0.toString()) >= 0 && ss['ss_list_price'].toString().compareTo(110.toString()) <= 0) || (ss['ss_coupon_amt'].toString().compareTo(0.toString()) >= 0 && ss['ss_coupon_amt'].toString().compareTo(1000.toString()) <= 0) || (ss['ss_wholesale_cost'].toString().compareTo(0.toString()) >= 0 && ss['ss_wholesale_cost'].toString().compareTo(50.toString()) <= 0)))) continue;
    _q1.add(ss);
  }
  return _q1;
})();

var result = {'B1_LP': (() { var _t3 = (() {
  var _q2 = <dynamic>[];
  for (var x in bucket1) {
    _q2.add(x['ss_list_price']);
  }
  return _q2;
})(); return (_t3.isEmpty ? 0 : _t3.reduce((a, b) => a + b) / _t3.length); })(), 'B1_CNT': bucket1.length, 'B1_CNTD': (() {
  var _q4 = <dynamic>[];
  var _g5 = <String, List<dynamic>>{};
  for (var x in bucket1) {
    var _k6 = x['ss_list_price'];
    var _k6_s = jsonEncode(_k6);
    _g5.putIfAbsent(_k6_s, () => <dynamic>[]).add(x);
  }
  for (var entry in _g5.entries) {
    var g = entry.value;
    var _k6 = jsonDecode(entry.key);
    _q4.add(_k6);
  }
  return _q4;
})().length, 'B2_LP': (() { var _t8 = (() {
  var _q7 = <dynamic>[];
  for (var x in bucket2) {
    _q7.add(x['ss_list_price']);
  }
  return _q7;
})(); return (_t8.isEmpty ? 0 : _t8.reduce((a, b) => a + b) / _t8.length); })(), 'B2_CNT': bucket2.length, 'B2_CNTD': (() {
  var _q9 = <dynamic>[];
  var _g10 = <String, List<dynamic>>{};
  for (var x in bucket2) {
    var _k11 = x['ss_list_price'];
    var _k11_s = jsonEncode(_k11);
    _g10.putIfAbsent(_k11_s, () => <dynamic>[]).add(x);
  }
  for (var entry in _g10.entries) {
    var g = entry.value;
    var _k11 = jsonDecode(entry.key);
    _q9.add(_k11);
  }
  return _q9;
})().length};

void main() {
  print(jsonEncode(result));
}

bool _equal(dynamic a, dynamic b) {
    if (a is List && b is List) {
        if (a.length != b.length) return false;
        for (var i = 0; i < a.length; i++) { if (!_equal(a[i], b[i])) return false; }
        return true;
    }
    if (a is Map && b is Map) {
        if (a.length != b.length) return false;
        for (var k in a.keys) { if (!b.containsKey(k) || !_equal(a[k], b[k])) return false; }
        return true;
    }
    return a == b;
}

String _formatDuration(Duration d) {
    if (d.inMicroseconds < 1000) return '${d.inMicroseconds}Âµs';
    if (d.inMilliseconds < 1000) return '${d.inMilliseconds}ms';
    return '${(d.inMilliseconds/1000).toStringAsFixed(2)}s';
}

void _json(dynamic v) {
    print(jsonEncode(v));
}


dynamic _min(dynamic v) {
    List<dynamic>? list;
    if (v is List) list = v;
    else if (v is Map && v['items'] is List) list = (v['items'] as List);
    else if (v is Map && v['Items'] is List) list = (v['Items'] as List);
    else { try { var it = (v as dynamic).items; if (it is List) list = it; } catch (_) {} }
    if (list == null || list.isEmpty) return 0;
    var m = list[0];
    for (var n in list) { if ((n as Comparable).compareTo(m) < 0) m = n; }
    return m;
}

num _sum(dynamic v) {
    Iterable<dynamic>? list;
    if (v is Iterable) list = v;
    else if (v is Map && v['items'] is Iterable) list = (v['items'] as Iterable);
    else if (v is Map && v['Items'] is Iterable) list = (v['Items'] as Iterable);
    else { try { var it = (v as dynamic).items; if (it is Iterable) list = it; } catch (_) {} }
    if (list == null) return 0;
    num s = 0;
    for (var n in list) s += (n as num);
    return s;
}

bool _runTest(String name, void Function() f) {
    stdout.write('   test $name ...');
    var start = DateTime.now();
    try {
        f();
        var d = DateTime.now().difference(start);
        stdout.writeln(' ok (${_formatDuration(d)})');
        return true;
    } catch (e) {
        var d = DateTime.now().difference(start);
        stdout.writeln(' fail $e (${_formatDuration(d)})');
        return false;
    }
}
