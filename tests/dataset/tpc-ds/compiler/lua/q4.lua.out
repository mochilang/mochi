-- Generated by Mochi compiler v0.10.26 on 2025-07-15T07:00:08Z
_Group = {}
function _Group.new(k)
    return {key = k, items = {}}
end
function __group_by_rows(rows, keyfn, valfn)
    local groups = {}
    local order = {}
    for _, r in ipairs(rows) do
        local key = keyfn(table.unpack(r))
        local ks
        if type(key) == 'table' then
            local fields = {}
            for k,_ in pairs(key) do fields[#fields+1] = k end
            table.sort(fields)
            local parts = {}
            for _,k in ipairs(fields) do parts[#parts+1] = tostring(k)..'='..tostring(key[k]) end
            ks = table.concat(parts, ',')
        else
            ks = tostring(key)
        end
        local g = groups[ks]
        if not g then
            g = _Group.new(key)
            groups[ks] = g
            order[#order+1] = ks
        end
        table.insert(g.items, valfn(table.unpack(r)))
    end
    local res = {}
    for _, ks in ipairs(order) do
        res[#res+1] = groups[ks]
    end
    return res
end
function __add(a, b)
    if type(a) == 'table' and type(b) == 'table' then
        local out = {}
        for i = 1, #a do out[#out+1] = a[i] end
        for i = 1, #b do out[#out+1] = b[i] end
        return out
    elseif type(a) == 'string' or type(b) == 'string' then
        return tostring(a) .. tostring(b)
    else
        return a + b
    end
end
function __div(a, b)
    if math.type and math.type(a) == 'integer' and math.type(b) == 'integer' then
        return a // b
    end
    return a / b
end
function __eq(a, b)
    if type(a) ~= type(b) then return false end
    if type(a) == 'number' then return math.abs(a-b) < 1e-9 end
    if type(a) ~= 'table' then return a == b end
    if (a[1] ~= nil or #a > 0) and (b[1] ~= nil or #b > 0) then
        if #a ~= #b then return false end
        for i = 1, #a do if not __eq(a[i], b[i]) then return false end end
        return true
    end
    for k, v in pairs(a) do if not __eq(v, b[k]) then return false end end
    for k, _ in pairs(b) do if a[k] == nil then return false end end
    return true
end
function __json(v)
    if type(v) == 'table' and next(v) == nil then print('[]'); return end
    local function sort(x)
        if type(x) ~= 'table' then return x end
        if x[1] ~= nil or #x > 0 then
            local out = {}
            for i=1,#x do out[i] = sort(x[i]) end
            return out
        end
        local keys = {}
        for k in pairs(x) do keys[#keys+1] = k end
        table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
        local out = {}
        for _,k in ipairs(keys) do out[k] = sort(x[k]) end
        return out
    end
    local function enc(x)
        local t = type(x)
        if t == 'nil' then
            return 'null'
        elseif t == 'boolean' or t == 'number' then
            return tostring(x)
        elseif t == 'string' then
            return string.format('%q', x)
        elseif t == 'table' then
            if x[1] ~= nil or #x > 0 then
                local parts = {}
                for i=1,#x do parts[#parts+1] = enc(x[i]) end
                return '['..table.concat(parts, ',')..']'
            else
                local keys = {}
                for k in pairs(x) do keys[#keys+1] = k end
                table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
                local parts = {}
                for _,k in ipairs(keys) do parts[#parts+1] = enc(k)..':'..enc(x[k]) end
                return '{'..table.concat(parts, ',')..'}'
            end
        else
            return 'null'
        end
    end
    print(enc(sort(v)))
end
function __merge(...)
    local res = {}
    for i=1,select('#', ...) do
        local t = select(i, ...)
        if type(t) == 'table' then
            for k,v in pairs(t) do res[k] = v end
        end
    end
    return res
end
function __query(src, joins, opts)
    local whereFn = opts.where
    local items = {}
    if #joins == 0 and whereFn then
        for _, v in ipairs(src) do if whereFn(v) then items[#items+1] = {v} end end
    else
        for _, v in ipairs(src) do items[#items+1] = {v} end
    end
    for ji, j in ipairs(joins) do
        local joined = {}
        local jitems = j.items or {}
        if j.right and j.left then
            local matched = {}
            for _, left in ipairs(items) do
                local m = false
                for ri, right in ipairs(jitems) do
                    local keep = true
                    if j.on then
                        local args = {table.unpack(left)}
                        args[#args+1] = right
                        keep = j.on(table.unpack(args))
                    end
                    if keep then
                        m = true; matched[ri] = true
                        local row = {table.unpack(left)}
                        row[#row+1] = right
                        if ji == #joins and whereFn and not whereFn(table.unpack(row)) then
                        else
                            joined[#joined+1] = row
                        end
                    end
                end
                if not m then
                    local row = {table.unpack(left)}
                    row[#row+1] = nil
                    if ji == #joins and whereFn and not whereFn(table.unpack(row)) then
                    else
                        joined[#joined+1] = row
                    end
                end
            end
            for ri, right in ipairs(jitems) do
                if not matched[ri] then
                    local row = {}
                    for _=1,ji do row[#row+1] = nil end
                    row[#row+1] = right
                    if ji == #joins and whereFn and not whereFn(table.unpack(row)) then
                    else
                        joined[#joined+1] = row
                    end
                end
            end
        elseif j.right then
            for _, right in ipairs(jitems) do
                local m = false
                for _, left in ipairs(items) do
                    local keep = true
                    if j.on then
                        local args = {table.unpack(left)}
                        args[#args+1] = right
                        keep = j.on(table.unpack(args))
                    end
                    if keep then
                        m = true
                        local row = {table.unpack(left)}
                        row[#row+1] = right
                        if ji == #joins and whereFn and not whereFn(table.unpack(row)) then
                        else
                            joined[#joined+1] = row
                        end
                    end
                end
                if not m then
                    local row = {}
                    for _=1,ji do row[#row+1] = nil end
                    row[#row+1] = right
                    if ji == #joins and whereFn and not whereFn(table.unpack(row)) then
                    else
                        joined[#joined+1] = row
                    end
                end
            end
        else
            for _, left in ipairs(items) do
                local m = false
                for _, right in ipairs(jitems) do
                    local keep = true
                    if j.on then
                        local args = {table.unpack(left)}
                        args[#args+1] = right
                        keep = j.on(table.unpack(args))
                    end
                    if keep then
                        m = true
                        local row = {table.unpack(left)}
                        row[#row+1] = right
                        if ji == #joins and whereFn and not whereFn(table.unpack(row)) then
                        else
                            joined[#joined+1] = row
                        end
                    end
                end
                if j.left and not m then
                    local row = {table.unpack(left)}
                    row[#row+1] = nil
                    if ji == #joins and whereFn and not whereFn(table.unpack(row)) then
                    else
                        joined[#joined+1] = row
                    end
                end
            end
        end
        items = joined
    end
    if opts.sortKey then
        local pairs = {}
        for _, it in ipairs(items) do pairs[#pairs+1] = {item=it, key=opts.sortKey(table.unpack(it))} end
        table.sort(pairs, function(a,b)
            local ak, bk = a.key, b.key
            if type(ak)=='number' and type(bk)=='number' then return ak < bk end
            if type(ak)=='string' and type(bk)=='string' then return ak < bk end
            return tostring(ak) < tostring(bk)
        end)
        items = {}
        for i,p in ipairs(pairs) do items[i] = p.item end
    end
    if opts.skip ~= nil then
        local n = opts.skip
        if n < #items then
            for i=1,n do table.remove(items,1) end
        else
            items = {}
        end
    end
    if opts.take ~= nil then
        local n = opts.take
        if n < #items then
            for i=#items, n+1, -1 do table.remove(items) end
        end
    end
    local res = {}
    for _, r in ipairs(items) do res[#res+1] = opts.selectFn(table.unpack(r)) end
    return res
end
function __run_tests(tests)
    local function format_duration(d)
        if d < 1e-6 then return string.format('%dns', math.floor(d*1e9)) end
        if d < 1e-3 then return string.format('%.1fÂµs', d*1e6) end
        if d < 1 then return string.format('%.1fms', d*1e3) end
        return string.format('%.2fs', d)
    end
    local failures = 0
    for _, t in ipairs(tests) do
        io.write('   test ' .. t.name .. ' ...')
        local start = os.clock()
        local ok, err = pcall(t.fn)
        local dur = os.clock() - start
        if ok then
            io.write(' ok (' .. format_duration(dur) .. ')\n')
        else
            io.write(' fail ' .. tostring(err) .. ' (' .. format_duration(dur) .. ')\n')
            failures = failures + 1
        end
    end
    if failures > 0 then
        io.write('\n[FAIL] ' .. failures .. ' test(s) failed.\n')
    end
end
function __sum(v)
    local items
    if type(v) == 'table' and v.items ~= nil then
        items = v.items
    elseif type(v) == 'table' then
        items = v
    else
        error('sum() expects list or group')
    end
    local sum = 0
    for _, it in ipairs(items) do sum = sum + it end
    return sum
end
function __union_all(a, b)
    local res = {}
    if a then for _, v in ipairs(a) do res[#res+1] = v end end
    if b then for _, v in ipairs(b) do res[#res+1] = v end end
    return res
end
function test_TPCDS_Q4_result()
    if not (__eq(result, {{["customer_id"]="C1", ["customer_first_name"]="Alice", ["customer_last_name"]="A", ["customer_login"]="alice"}})) then error('expect failed') end
end

customer = {{["c_customer_sk"]=1, ["c_customer_id"]="C1", ["c_first_name"]="Alice", ["c_last_name"]="A", ["c_login"]="alice"}}
store_sales = {{["ss_customer_sk"]=1, ["ss_sold_date_sk"]=1, ["ss_ext_list_price"]=10.0, ["ss_ext_wholesale_cost"]=5.0, ["ss_ext_discount_amt"]=0.0, ["ss_ext_sales_price"]=10.0}, {["ss_customer_sk"]=1, ["ss_sold_date_sk"]=2, ["ss_ext_list_price"]=20.0, ["ss_ext_wholesale_cost"]=5.0, ["ss_ext_discount_amt"]=0.0, ["ss_ext_sales_price"]=20.0}}
catalog_sales = {{["cs_bill_customer_sk"]=1, ["cs_sold_date_sk"]=1, ["cs_ext_list_price"]=10.0, ["cs_ext_wholesale_cost"]=2.0, ["cs_ext_discount_amt"]=0.0, ["cs_ext_sales_price"]=10.0}, {["cs_bill_customer_sk"]=1, ["cs_sold_date_sk"]=2, ["cs_ext_list_price"]=30.0, ["cs_ext_wholesale_cost"]=2.0, ["cs_ext_discount_amt"]=0.0, ["cs_ext_sales_price"]=30.0}}
web_sales = {{["ws_bill_customer_sk"]=1, ["ws_sold_date_sk"]=1, ["ws_ext_list_price"]=10.0, ["ws_ext_wholesale_cost"]=5.0, ["ws_ext_discount_amt"]=0.0, ["ws_ext_sales_price"]=10.0}, {["ws_bill_customer_sk"]=1, ["ws_sold_date_sk"]=2, ["ws_ext_list_price"]=12.0, ["ws_ext_wholesale_cost"]=5.0, ["ws_ext_discount_amt"]=0.0, ["ws_ext_sales_price"]=12.0}}
date_dim = {{["d_date_sk"]=1, ["d_year"]=2001}, {["d_date_sk"]=2, ["d_year"]=2002}}
year_total = __union_all(__union_all(((function()
    local _src = customer
    local _rows = __query(_src, {
        { items = store_sales, on = function(c, s) return __eq(c.c_customer_sk, s.ss_customer_sk) end },
        { items = date_dim, on = function(c, s, d) return __eq(s.ss_sold_date_sk, d.d_date_sk) end }
    }, { selectFn = function(c, s, d) return {c, s, d} end })
    local _groups = __group_by_rows(_rows, function(c, s, d) return {["id"]=c.c_customer_id, ["first"]=c.c_first_name, ["last"]=c.c_last_name, ["login"]=c.c_login, ["year"]=d.d_year} end, function(c, s, d) local _row = __merge(c, s, d); _row.c = c; _row.s = s; _row.d = d; return _row end)
    local _res = {}
    for _, g in ipairs(_groups) do
        _res[#_res+1] = {["customer_id"]=g.key.id, ["customer_first_name"]=g.key.first, ["customer_last_name"]=g.key.last, ["customer_login"]=g.key.login, ["dyear"]=g.key.year, ["year_total"]=__sum((function()
    local _res = {}
    for _, x in ipairs(g.items) do
        _res[#_res+1] = __div((__add((((x.ss_ext_list_price - x.ss_ext_wholesale_cost) - x.ss_ext_discount_amt)), x.ss_ext_sales_price)), 2)
    end
    return _res
end)()), ["sale_type"]="s"}
    end
    return _res
end)()), ((function()
    local _src = customer
    local _rows = __query(_src, {
        { items = catalog_sales, on = function(c, cs) return __eq(c.c_customer_sk, cs.cs_bill_customer_sk) end },
        { items = date_dim, on = function(c, cs, d) return __eq(cs.cs_sold_date_sk, d.d_date_sk) end }
    }, { selectFn = function(c, cs, d) return {c, cs, d} end })
    local _groups = __group_by_rows(_rows, function(c, cs, d) return {["id"]=c.c_customer_id, ["first"]=c.c_first_name, ["last"]=c.c_last_name, ["login"]=c.c_login, ["year"]=d.d_year} end, function(c, cs, d) local _row = __merge(c, cs, d); _row.c = c; _row.cs = cs; _row.d = d; return _row end)
    local _res = {}
    for _, g in ipairs(_groups) do
        _res[#_res+1] = {["customer_id"]=g.key.id, ["customer_first_name"]=g.key.first, ["customer_last_name"]=g.key.last, ["customer_login"]=g.key.login, ["dyear"]=g.key.year, ["year_total"]=__sum((function()
    local _res = {}
    for _, x in ipairs(g.items) do
        _res[#_res+1] = __div((__add((((x.cs_ext_list_price - x.cs_ext_wholesale_cost) - x.cs_ext_discount_amt)), x.cs_ext_sales_price)), 2)
    end
    return _res
end)()), ["sale_type"]="c"}
    end
    return _res
end)())), ((function()
    local _src = customer
    local _rows = __query(_src, {
        { items = web_sales, on = function(c, ws) return __eq(c.c_customer_sk, ws.ws_bill_customer_sk) end },
        { items = date_dim, on = function(c, ws, d) return __eq(ws.ws_sold_date_sk, d.d_date_sk) end }
    }, { selectFn = function(c, ws, d) return {c, ws, d} end })
    local _groups = __group_by_rows(_rows, function(c, ws, d) return {["id"]=c.c_customer_id, ["first"]=c.c_first_name, ["last"]=c.c_last_name, ["login"]=c.c_login, ["year"]=d.d_year} end, function(c, ws, d) local _row = __merge(c, ws, d); _row.c = c; _row.ws = ws; _row.d = d; return _row end)
    local _res = {}
    for _, g in ipairs(_groups) do
        _res[#_res+1] = {["customer_id"]=g.key.id, ["customer_first_name"]=g.key.first, ["customer_last_name"]=g.key.last, ["customer_login"]=g.key.login, ["dyear"]=g.key.year, ["year_total"]=__sum((function()
    local _res = {}
    for _, x in ipairs(g.items) do
        _res[#_res+1] = __div((__add((((x.ws_ext_list_price - x.ws_ext_wholesale_cost) - x.ws_ext_discount_amt)), x.ws_ext_sales_price)), 2)
    end
    return _res
end)()), ["sale_type"]="w"}
    end
    return _res
end)()))
result = (function()
    local _src = year_total
    return __query(_src, {
        { items = year_total, on = function(s1, s2) return __eq(s2.customer_id, s1.customer_id) end },
        { items = year_total, on = function(s1, s2, c1) return __eq(c1.customer_id, s1.customer_id) end },
        { items = year_total, on = function(s1, s2, c1, c2) return __eq(c2.customer_id, s1.customer_id) end },
        { items = year_total, on = function(s1, s2, c1, c2, w1) return __eq(w1.customer_id, s1.customer_id) end },
        { items = year_total, on = function(s1, s2, c1, c2, w1, w2) return __eq(w2.customer_id, s1.customer_id) end }
    }, { selectFn = function(s1, s2, c1, c2, w1, w2) return {["customer_id"]=s2.customer_id, ["customer_first_name"]=s2.customer_first_name, ["customer_last_name"]=s2.customer_last_name, ["customer_login"]=s2.customer_login} end, where = function(s1, s2, c1, c2, w1, w2) return (((((((((((((((((__eq(s1.sale_type, "s") and __eq(c1.sale_type, "c")) and __eq(w1.sale_type, "w")) and __eq(s2.sale_type, "s")) and __eq(c2.sale_type, "c")) and __eq(w2.sale_type, "w")) and __eq(s1.dyear, 2001)) and __eq(s2.dyear, 2002)) and __eq(c1.dyear, 2001)) and __eq(c2.dyear, 2002)) and __eq(w1.dyear, 2001)) and __eq(w2.dyear, 2002)) and (s1.year_total > 0)) and (c1.year_total > 0)) and (w1.year_total > 0)) and (((function()
    if (c1.year_total > 0) then
        return __div(c2.year_total, c1.year_total)
    else
        return nil
    end
end)()) > ((function()
    if (s1.year_total > 0) then
        return __div(s2.year_total, s1.year_total)
    else
        return nil
    end
end)()))) and (((function()
    if (c1.year_total > 0) then
        return __div(c2.year_total, c1.year_total)
    else
        return nil
    end
end)()) > ((function()
    if (w1.year_total > 0) then
        return __div(w2.year_total, w1.year_total)
    else
        return nil
    end
end)())))) end, sortKey = function(s1, s2, c1, c2, w1, w2) return ({s2.customer_id, s2.customer_first_name, s2.customer_last_name, s2.customer_login}) end })
end)()
__json(result)
local __tests = {
    {name="TPCDS Q4 result", fn=test_TPCDS_Q4_result},
}
