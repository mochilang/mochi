-- Generated by Mochi compiler v0.10.26 on 2025-07-15T06:41:47Z
function __avg(v)
    local items
    if type(v) == 'table' and v.items ~= nil then
        items = v.items
    elseif type(v) == 'table' then
        items = v
    else
        error('avg() expects list or group')
    end
    if #items == 0 then return 0 end
    local sum = 0
    for _, it in ipairs(items) do sum = sum + it end
    local res = sum / #items
    if res == math.floor(res) then return math.floor(res) end
    return res
end
function __count(v)
    if type(v) == 'table' then
        if v.items ~= nil then return #v.items end
        if v[1] ~= nil or #v > 0 then return #v end
        local n = 0
        for _ in pairs(v) do n = n + 1 end
        return n
    elseif type(v) == 'string' then
        return #v
    else
        error('count() expects list or group')
    end
end
function __eq(a, b)
    if type(a) ~= type(b) then return false end
    if type(a) == 'number' then return math.abs(a-b) < 1e-9 end
    if type(a) ~= 'table' then return a == b end
    if (a[1] ~= nil or #a > 0) and (b[1] ~= nil or #b > 0) then
        if #a ~= #b then return false end
        for i = 1, #a do if not __eq(a[i], b[i]) then return false end end
        return true
    end
    for k, v in pairs(a) do if not __eq(v, b[k]) then return false end end
    for k, _ in pairs(b) do if a[k] == nil then return false end end
    return true
end
function __json(v)
    if type(v) == 'table' and next(v) == nil then print('[]'); return end
    local function sort(x)
        if type(x) ~= 'table' then return x end
        if x[1] ~= nil or #x > 0 then
            local out = {}
            for i=1,#x do out[i] = sort(x[i]) end
            return out
        end
        local keys = {}
        for k in pairs(x) do keys[#keys+1] = k end
        table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
        local out = {}
        for _,k in ipairs(keys) do out[k] = sort(x[k]) end
        return out
    end
    local function enc(x)
        local t = type(x)
        if t == 'nil' then
            return 'null'
        elseif t == 'boolean' or t == 'number' then
            return tostring(x)
        elseif t == 'string' then
            return string.format('%q', x)
        elseif t == 'table' then
            if x[1] ~= nil or #x > 0 then
                local parts = {}
                for i=1,#x do parts[#parts+1] = enc(x[i]) end
                return '['..table.concat(parts, ',')..']'
            else
                local keys = {}
                for k in pairs(x) do keys[#keys+1] = k end
                table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
                local parts = {}
                for _,k in ipairs(keys) do parts[#parts+1] = enc(k)..':'..enc(x[k]) end
                return '{'..table.concat(parts, ',')..'}'
            end
        else
            return 'null'
        end
    end
    print(enc(sort(v)))
end
function __run_tests(tests)
    local function format_duration(d)
        if d < 1e-6 then return string.format('%dns', math.floor(d*1e9)) end
        if d < 1e-3 then return string.format('%.1fÂµs', d*1e6) end
        if d < 1 then return string.format('%.1fms', d*1e3) end
        return string.format('%.2fs', d)
    end
    local failures = 0
    for _, t in ipairs(tests) do
        io.write('   test ' .. t.name .. ' ...')
        local start = os.clock()
        local ok, err = pcall(t.fn)
        local dur = os.clock() - start
        if ok then
            io.write(' ok (' .. format_duration(dur) .. ')\n')
        else
            io.write(' fail ' .. tostring(err) .. ' (' .. format_duration(dur) .. ')\n')
            failures = failures + 1
        end
    end
    if failures > 0 then
        io.write('\n[FAIL] ' .. failures .. ' test(s) failed.\n')
    end
end
function test_TPCDS_Q9_result()
    if not (__eq(result, {{["bucket1"]=7.0, ["bucket2"]=15.0, ["bucket3"]=30.0, ["bucket4"]=35.0, ["bucket5"]=50.0}})) then error('expect failed') end
end

store_sales = {{["ss_quantity"]=5, ["ss_ext_discount_amt"]=5.0, ["ss_net_paid"]=7.0}, {["ss_quantity"]=30, ["ss_ext_discount_amt"]=10.0, ["ss_net_paid"]=15.0}, {["ss_quantity"]=50, ["ss_ext_discount_amt"]=20.0, ["ss_net_paid"]=30.0}, {["ss_quantity"]=70, ["ss_ext_discount_amt"]=25.0, ["ss_net_paid"]=35.0}, {["ss_quantity"]=90, ["ss_ext_discount_amt"]=40.0, ["ss_net_paid"]=50.0}}
reason = {{["r_reason_sk"]=1}}
bucket1 = (function()
    if (__count((function()
    local _res = {}
    for _, s in ipairs(store_sales) do
        if ((s.ss_quantity >= 1) and (s.ss_quantity <= 20)) then
            _res[#_res+1] = s
        end
    end
    return _res
end)()) > 10) then
        return __avg((function()
    local _res = {}
    for _, s in ipairs(store_sales) do
        if ((s.ss_quantity >= 1) and (s.ss_quantity <= 20)) then
            _res[#_res+1] = s.ss_ext_discount_amt
        end
    end
    return _res
end)())
    else
        return __avg((function()
    local _res = {}
    for _, s in ipairs(store_sales) do
        if ((s.ss_quantity >= 1) and (s.ss_quantity <= 20)) then
            _res[#_res+1] = s.ss_net_paid
        end
    end
    return _res
end)())
    end
end)()
bucket2 = (function()
    if (__count((function()
    local _res = {}
    for _, s in ipairs(store_sales) do
        if ((s.ss_quantity >= 21) and (s.ss_quantity <= 40)) then
            _res[#_res+1] = s
        end
    end
    return _res
end)()) > 20) then
        return __avg((function()
    local _res = {}
    for _, s in ipairs(store_sales) do
        if ((s.ss_quantity >= 21) and (s.ss_quantity <= 40)) then
            _res[#_res+1] = s.ss_ext_discount_amt
        end
    end
    return _res
end)())
    else
        return __avg((function()
    local _res = {}
    for _, s in ipairs(store_sales) do
        if ((s.ss_quantity >= 21) and (s.ss_quantity <= 40)) then
            _res[#_res+1] = s.ss_net_paid
        end
    end
    return _res
end)())
    end
end)()
bucket3 = (function()
    if (__count((function()
    local _res = {}
    for _, s in ipairs(store_sales) do
        if ((s.ss_quantity >= 41) and (s.ss_quantity <= 60)) then
            _res[#_res+1] = s
        end
    end
    return _res
end)()) > 30) then
        return __avg((function()
    local _res = {}
    for _, s in ipairs(store_sales) do
        if ((s.ss_quantity >= 41) and (s.ss_quantity <= 60)) then
            _res[#_res+1] = s.ss_ext_discount_amt
        end
    end
    return _res
end)())
    else
        return __avg((function()
    local _res = {}
    for _, s in ipairs(store_sales) do
        if ((s.ss_quantity >= 41) and (s.ss_quantity <= 60)) then
            _res[#_res+1] = s.ss_net_paid
        end
    end
    return _res
end)())
    end
end)()
bucket4 = (function()
    if (__count((function()
    local _res = {}
    for _, s in ipairs(store_sales) do
        if ((s.ss_quantity >= 61) and (s.ss_quantity <= 80)) then
            _res[#_res+1] = s
        end
    end
    return _res
end)()) > 40) then
        return __avg((function()
    local _res = {}
    for _, s in ipairs(store_sales) do
        if ((s.ss_quantity >= 61) and (s.ss_quantity <= 80)) then
            _res[#_res+1] = s.ss_ext_discount_amt
        end
    end
    return _res
end)())
    else
        return __avg((function()
    local _res = {}
    for _, s in ipairs(store_sales) do
        if ((s.ss_quantity >= 61) and (s.ss_quantity <= 80)) then
            _res[#_res+1] = s.ss_net_paid
        end
    end
    return _res
end)())
    end
end)()
bucket5 = (function()
    if (__count((function()
    local _res = {}
    for _, s in ipairs(store_sales) do
        if ((s.ss_quantity >= 81) and (s.ss_quantity <= 100)) then
            _res[#_res+1] = s
        end
    end
    return _res
end)()) > 50) then
        return __avg((function()
    local _res = {}
    for _, s in ipairs(store_sales) do
        if ((s.ss_quantity >= 81) and (s.ss_quantity <= 100)) then
            _res[#_res+1] = s.ss_ext_discount_amt
        end
    end
    return _res
end)())
    else
        return __avg((function()
    local _res = {}
    for _, s in ipairs(store_sales) do
        if ((s.ss_quantity >= 81) and (s.ss_quantity <= 100)) then
            _res[#_res+1] = s.ss_net_paid
        end
    end
    return _res
end)())
    end
end)()
result = (function()
    local _res = {}
    for _, r in ipairs(reason) do
        if (r.r_reason_sk == 1) then
            _res[#_res+1] = {["bucket1"]=bucket1, ["bucket2"]=bucket2, ["bucket3"]=bucket3, ["bucket4"]=bucket4, ["bucket5"]=bucket5}
        end
    end
    return _res
end)()
__json(result)
local __tests = {
    {name="TPCDS Q9 result", fn=test_TPCDS_Q9_result},
}
