-- Generated by Mochi compiler v0.10.26 on 2025-07-15T07:50:43Z
function __add(a, b)
    if type(a) == 'table' and type(b) == 'table' then
        local out = {}
        for i = 1, #a do out[#out+1] = a[i] end
        for i = 1, #b do out[#out+1] = b[i] end
        return out
    elseif type(a) == 'string' or type(b) == 'string' then
        return tostring(a) .. tostring(b)
    else
        return a + b
    end
end
function __eq(a, b)
    if type(a) ~= type(b) then return false end
    if type(a) == 'number' then return math.abs(a-b) < 1e-9 end
    if type(a) ~= 'table' then return a == b end
    if (a[1] ~= nil or #a > 0) and (b[1] ~= nil or #b > 0) then
        if #a ~= #b then return false end
        for i = 1, #a do if not __eq(a[i], b[i]) then return false end end
        return true
    end
    for k, v in pairs(a) do if not __eq(v, b[k]) then return false end end
    for k, _ in pairs(b) do if a[k] == nil then return false end end
    return true
end
function __iter(obj)
    if type(obj) == 'table' then
        if obj[1] ~= nil or #obj > 0 then
            local i = 0
            local n = #obj
            return function()
                i = i + 1
                if i <= n then return i, obj[i] end
            end
        else
            return pairs(obj)
        end
    elseif type(obj) == 'string' then
        local i = 0
        local n = #obj
        return function()
            i = i + 1
            if i <= n then return i, string.sub(obj, i, i) end
        end
    else
        return function() return nil end
    end
end
function __json(v)
    if type(v) == 'table' and next(v) == nil then print('[]'); return end
    local function sort(x)
        if type(x) ~= 'table' then return x end
        if x[1] ~= nil or #x > 0 then
            local out = {}
            for i=1,#x do out[i] = sort(x[i]) end
            return out
        end
        local keys = {}
        for k in pairs(x) do keys[#keys+1] = k end
        table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
        local out = {}
        for _,k in ipairs(keys) do out[k] = sort(x[k]) end
        return out
    end
    local function enc(x)
        local t = type(x)
        if t == 'nil' then
            return 'null'
        elseif t == 'boolean' or t == 'number' then
            return tostring(x)
        elseif t == 'string' then
            return string.format('%q', x)
        elseif t == 'table' then
            if x[1] ~= nil or #x > 0 then
                local parts = {}
                for i=1,#x do parts[#parts+1] = enc(x[i]) end
                return '['..table.concat(parts, ',')..']'
            else
                local keys = {}
                for k in pairs(x) do keys[#keys+1] = k end
                table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
                local parts = {}
                for _,k in ipairs(keys) do parts[#parts+1] = enc(k)..':'..enc(x[k]) end
                return '{'..table.concat(parts, ',')..'}'
            end
        else
            return 'null'
        end
    end
    print(enc(sort(v)))
end
function __run_tests(tests)
    local function format_duration(d)
        if d < 1e-6 then return string.format('%dns', math.floor(d*1e9)) end
        if d < 1e-3 then return string.format('%.1fÂµs', d*1e6) end
        if d < 1 then return string.format('%.1fms', d*1e3) end
        return string.format('%.2fs', d)
    end
    local failures = 0
    for _, t in ipairs(tests) do
        io.write('   test ' .. t.name .. ' ...')
        local start = os.clock()
        local ok, err = pcall(t.fn)
        local dur = os.clock() - start
        if ok then
            io.write(' ok (' .. format_duration(dur) .. ')\n')
        else
            io.write(' fail ' .. tostring(err) .. ' (' .. format_duration(dur) .. ')\n')
            failures = failures + 1
        end
    end
    if failures > 0 then
        io.write('\n[FAIL] ' .. failures .. ' test(s) failed.\n')
    end
end
function count_range(ssales, tdim, hour, start_min, end_min)
    local total = 0.0
    for _, ss in __iter(ssales) do
        for _, t in __iter(tdim) do
            if (((__eq(ss.sold_time_sk, t.time_sk) and __eq(t.hour, hour)) and (t.minute >= start_min)) and (t.minute < end_min)) then
                total = __add(total, ss.qty)
            end
        end
    end
    return total
end

function test_TPCDS_Q88_sample()
    if not ((result == 88)) then error('expect failed') end
end

time_dim = {{["time_sk"]=1, ["hour"]=8, ["minute"]=30}, {["time_sk"]=2, ["hour"]=9, ["minute"]=0}, {["time_sk"]=3, ["hour"]=9, ["minute"]=30}, {["time_sk"]=4, ["hour"]=10, ["minute"]=0}, {["time_sk"]=5, ["hour"]=10, ["minute"]=30}, {["time_sk"]=6, ["hour"]=11, ["minute"]=0}, {["time_sk"]=7, ["hour"]=11, ["minute"]=30}, {["time_sk"]=8, ["hour"]=12, ["minute"]=0}}
household_demographics = {{["hd_demo_sk"]=1, ["hd_dep_count"]=1, ["hd_vehicle_count"]=1}}
store = {{["s_store_sk"]=1, ["s_store_name"]="ese"}}
store_sales = {{["sold_time_sk"]=1, ["hdemo_sk"]=1, ["store_sk"]=1, ["qty"]=10.0}, {["sold_time_sk"]=2, ["hdemo_sk"]=1, ["store_sk"]=1, ["qty"]=12.0}, {["sold_time_sk"]=3, ["hdemo_sk"]=1, ["store_sk"]=1, ["qty"]=14.0}, {["sold_time_sk"]=4, ["hdemo_sk"]=1, ["store_sk"]=1, ["qty"]=11.0}, {["sold_time_sk"]=5, ["hdemo_sk"]=1, ["store_sk"]=1, ["qty"]=8.0}, {["sold_time_sk"]=6, ["hdemo_sk"]=1, ["store_sk"]=1, ["qty"]=9.0}, {["sold_time_sk"]=7, ["hdemo_sk"]=1, ["store_sk"]=1, ["qty"]=10.0}, {["sold_time_sk"]=8, ["hdemo_sk"]=1, ["store_sk"]=1, ["qty"]=14.0}}
h8_30_to_9 = count_range(store_sales, time_dim, 8, 30, 60)
h9_to_9_30 = count_range(store_sales, time_dim, 9, 0, 30)
h9_30_to_10 = count_range(store_sales, time_dim, 9, 30, 60)
h10_to_10_30 = count_range(store_sales, time_dim, 10, 0, 30)
h10_30_to_11 = count_range(store_sales, time_dim, 10, 30, 60)
h11_to_11_30 = count_range(store_sales, time_dim, 11, 0, 30)
h11_30_to_12 = count_range(store_sales, time_dim, 11, 30, 60)
h12_to_12_30 = count_range(store_sales, time_dim, 12, 0, 30)
result = (((((((h8_30_to_9 + h9_to_9_30) + h9_30_to_10) + h10_to_10_30) + h10_30_to_11) + h11_to_11_30) + h11_30_to_12) + h12_to_12_30)
__json(result)
local __tests = {
    {name="TPCDS Q88 sample", fn=test_TPCDS_Q88_sample},
}
