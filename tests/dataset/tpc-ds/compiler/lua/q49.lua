-- Generated by Mochi compiler v0.10.26 on 2025-07-15T07:50:43Z
function __concat(a, b)
    local res = {}
    if a then for i=1,#a do res[#res+1] = a[i] end end
    if b then for i=1,#b do res[#res+1] = b[i] end end
    return res
end
function __eq(a, b)
    if type(a) ~= type(b) then return false end
    if type(a) == 'number' then return math.abs(a-b) < 1e-9 end
    if type(a) ~= 'table' then return a == b end
    if (a[1] ~= nil or #a > 0) and (b[1] ~= nil or #b > 0) then
        if #a ~= #b then return false end
        for i = 1, #a do if not __eq(a[i], b[i]) then return false end end
        return true
    end
    for k, v in pairs(a) do if not __eq(v, b[k]) then return false end end
    for k, _ in pairs(b) do if a[k] == nil then return false end end
    return true
end
function __json(v)
    if type(v) == 'table' and next(v) == nil then print('[]'); return end
    local function sort(x)
        if type(x) ~= 'table' then return x end
        if x[1] ~= nil or #x > 0 then
            local out = {}
            for i=1,#x do out[i] = sort(x[i]) end
            return out
        end
        local keys = {}
        for k in pairs(x) do keys[#keys+1] = k end
        table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
        local out = {}
        for _,k in ipairs(keys) do out[k] = sort(x[k]) end
        return out
    end
    local function enc(x)
        local t = type(x)
        if t == 'nil' then
            return 'null'
        elseif t == 'boolean' or t == 'number' then
            return tostring(x)
        elseif t == 'string' then
            return string.format('%q', x)
        elseif t == 'table' then
            if x[1] ~= nil or #x > 0 then
                local parts = {}
                for i=1,#x do parts[#parts+1] = enc(x[i]) end
                return '['..table.concat(parts, ',')..']'
            else
                local keys = {}
                for k in pairs(x) do keys[#keys+1] = k end
                table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
                local parts = {}
                for _,k in ipairs(keys) do parts[#parts+1] = enc(k)..':'..enc(x[k]) end
                return '{'..table.concat(parts, ',')..'}'
            end
        else
            return 'null'
        end
    end
    print(enc(sort(v)))
end
function __run_tests(tests)
    local function format_duration(d)
        if d < 1e-6 then return string.format('%dns', math.floor(d*1e9)) end
        if d < 1e-3 then return string.format('%.1fÂµs', d*1e6) end
        if d < 1 then return string.format('%.1fms', d*1e3) end
        return string.format('%.2fs', d)
    end
    local failures = 0
    for _, t in ipairs(tests) do
        io.write('   test ' .. t.name .. ' ...')
        local start = os.clock()
        local ok, err = pcall(t.fn)
        local dur = os.clock() - start
        if ok then
            io.write(' ok (' .. format_duration(dur) .. ')\n')
        else
            io.write(' fail ' .. tostring(err) .. ' (' .. format_duration(dur) .. ')\n')
            failures = failures + 1
        end
    end
    if failures > 0 then
        io.write('\n[FAIL] ' .. failures .. ' test(s) failed.\n')
    end
end
function test_TPCDS_Q49_simplified()
    if not (__eq(result, {{["channel"]="catalog", ["item"]="A", ["return_ratio"]=0.3, ["return_rank"]=1, ["currency_rank"]=1}, {["channel"]="store", ["item"]="A", ["return_ratio"]=0.25, ["return_rank"]=1, ["currency_rank"]=1}, {["channel"]="web", ["item"]="A", ["return_ratio"]=0.2, ["return_rank"]=1, ["currency_rank"]=1}, {["channel"]="web", ["item"]="B", ["return_ratio"]=0.5, ["return_rank"]=2, ["currency_rank"]=2}})) then error('expect failed') end
end

web = {{["item"]="A", ["return_ratio"]=0.2, ["currency_ratio"]=0.3, ["return_rank"]=1, ["currency_rank"]=1}, {["item"]="B", ["return_ratio"]=0.5, ["currency_ratio"]=0.6, ["return_rank"]=2, ["currency_rank"]=2}}
catalog = {{["item"]="A", ["return_ratio"]=0.3, ["currency_ratio"]=0.4, ["return_rank"]=1, ["currency_rank"]=1}}
store = {{["item"]="A", ["return_ratio"]=0.25, ["currency_ratio"]=0.35, ["return_rank"]=1, ["currency_rank"]=1}}
tmp = (__concat(__concat((function()
    local _res = {}
    for _, w in ipairs(web) do
        if ((w.return_rank <= 10) or (w.currency_rank <= 10)) then
            _res[#_res+1] = {["channel"]="web", ["item"]=w.item, ["return_ratio"]=w.return_ratio, ["return_rank"]=w.return_rank, ["currency_rank"]=w.currency_rank}
        end
    end
    return _res
end)(), (function()
    local _res = {}
    for _, c in ipairs(catalog) do
        if ((c.return_rank <= 10) or (c.currency_rank <= 10)) then
            _res[#_res+1] = {["channel"]="catalog", ["item"]=c.item, ["return_ratio"]=c.return_ratio, ["return_rank"]=c.return_rank, ["currency_rank"]=c.currency_rank}
        end
    end
    return _res
end)()), (function()
    local _res = {}
    for _, s in ipairs(store) do
        if ((s.return_rank <= 10) or (s.currency_rank <= 10)) then
            _res[#_res+1] = {["channel"]="store", ["item"]=s.item, ["return_ratio"]=s.return_ratio, ["return_rank"]=s.return_rank, ["currency_rank"]=s.currency_rank}
        end
    end
    return _res
end)()))
result = (function()
    local _res = {}
    for _, r in ipairs(tmp) do
        _res[#_res+1] = {__key = {r.channel, r.return_rank, r.currency_rank, r.item}, __val = r}
    end
    local items = _res
    table.sort(items, function(a,b)
        local ak, bk = a.__key, b.__key
        if type(ak)=='number' and type(bk)=='number' then return ak < bk end
        if type(ak)=='string' and type(bk)=='string' then return ak < bk end
        return tostring(ak) < tostring(bk)
    end)
    local tmp = {}
    for _, it in ipairs(items) do tmp[#tmp+1] = it.__val end
    items = tmp
    _res = items
    return _res
end)()
__json(result)
local __tests = {
    {name="TPCDS Q49 simplified", fn=test_TPCDS_Q49_simplified},
}
