-- Generated by Mochi compiler v0.10.26 on 2025-07-15T07:00:09Z
function __add(a, b)
    if type(a) == 'table' and type(b) == 'table' then
        local out = {}
        for i = 1, #a do out[#out+1] = a[i] end
        for i = 1, #b do out[#out+1] = b[i] end
        return out
    elseif type(a) == 'string' or type(b) == 'string' then
        return tostring(a) .. tostring(b)
    else
        return a + b
    end
end
function __div(a, b)
    if math.type and math.type(a) == 'integer' and math.type(b) == 'integer' then
        return a // b
    end
    return a / b
end
function __eq(a, b)
    if type(a) ~= type(b) then return false end
    if type(a) == 'number' then return math.abs(a-b) < 1e-9 end
    if type(a) ~= 'table' then return a == b end
    if (a[1] ~= nil or #a > 0) and (b[1] ~= nil or #b > 0) then
        if #a ~= #b then return false end
        for i = 1, #a do if not __eq(a[i], b[i]) then return false end end
        return true
    end
    for k, v in pairs(a) do if not __eq(v, b[k]) then return false end end
    for k, _ in pairs(b) do if a[k] == nil then return false end end
    return true
end
function __json(v)
    if type(v) == 'table' and next(v) == nil then print('[]'); return end
    local function sort(x)
        if type(x) ~= 'table' then return x end
        if x[1] ~= nil or #x > 0 then
            local out = {}
            for i=1,#x do out[i] = sort(x[i]) end
            return out
        end
        local keys = {}
        for k in pairs(x) do keys[#keys+1] = k end
        table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
        local out = {}
        for _,k in ipairs(keys) do out[k] = sort(x[k]) end
        return out
    end
    local function enc(x)
        local t = type(x)
        if t == 'nil' then
            return 'null'
        elseif t == 'boolean' or t == 'number' then
            return tostring(x)
        elseif t == 'string' then
            return string.format('%q', x)
        elseif t == 'table' then
            if x[1] ~= nil or #x > 0 then
                local parts = {}
                for i=1,#x do parts[#parts+1] = enc(x[i]) end
                return '['..table.concat(parts, ',')..']'
            else
                local keys = {}
                for k in pairs(x) do keys[#keys+1] = k end
                table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
                local parts = {}
                for _,k in ipairs(keys) do parts[#parts+1] = enc(k)..':'..enc(x[k]) end
                return '{'..table.concat(parts, ',')..'}'
            end
        else
            return 'null'
        end
    end
    print(enc(sort(v)))
end
function __query(src, joins, opts)
    local whereFn = opts.where
    local items = {}
    if #joins == 0 and whereFn then
        for _, v in ipairs(src) do if whereFn(v) then items[#items+1] = {v} end end
    else
        for _, v in ipairs(src) do items[#items+1] = {v} end
    end
    for ji, j in ipairs(joins) do
        local joined = {}
        local jitems = j.items or {}
        if j.right and j.left then
            local matched = {}
            for _, left in ipairs(items) do
                local m = false
                for ri, right in ipairs(jitems) do
                    local keep = true
                    if j.on then
                        local args = {table.unpack(left)}
                        args[#args+1] = right
                        keep = j.on(table.unpack(args))
                    end
                    if keep then
                        m = true; matched[ri] = true
                        local row = {table.unpack(left)}
                        row[#row+1] = right
                        if ji == #joins and whereFn and not whereFn(table.unpack(row)) then
                        else
                            joined[#joined+1] = row
                        end
                    end
                end
                if not m then
                    local row = {table.unpack(left)}
                    row[#row+1] = nil
                    if ji == #joins and whereFn and not whereFn(table.unpack(row)) then
                    else
                        joined[#joined+1] = row
                    end
                end
            end
            for ri, right in ipairs(jitems) do
                if not matched[ri] then
                    local row = {}
                    for _=1,ji do row[#row+1] = nil end
                    row[#row+1] = right
                    if ji == #joins and whereFn and not whereFn(table.unpack(row)) then
                    else
                        joined[#joined+1] = row
                    end
                end
            end
        elseif j.right then
            for _, right in ipairs(jitems) do
                local m = false
                for _, left in ipairs(items) do
                    local keep = true
                    if j.on then
                        local args = {table.unpack(left)}
                        args[#args+1] = right
                        keep = j.on(table.unpack(args))
                    end
                    if keep then
                        m = true
                        local row = {table.unpack(left)}
                        row[#row+1] = right
                        if ji == #joins and whereFn and not whereFn(table.unpack(row)) then
                        else
                            joined[#joined+1] = row
                        end
                    end
                end
                if not m then
                    local row = {}
                    for _=1,ji do row[#row+1] = nil end
                    row[#row+1] = right
                    if ji == #joins and whereFn and not whereFn(table.unpack(row)) then
                    else
                        joined[#joined+1] = row
                    end
                end
            end
        else
            for _, left in ipairs(items) do
                local m = false
                for _, right in ipairs(jitems) do
                    local keep = true
                    if j.on then
                        local args = {table.unpack(left)}
                        args[#args+1] = right
                        keep = j.on(table.unpack(args))
                    end
                    if keep then
                        m = true
                        local row = {table.unpack(left)}
                        row[#row+1] = right
                        if ji == #joins and whereFn and not whereFn(table.unpack(row)) then
                        else
                            joined[#joined+1] = row
                        end
                    end
                end
                if j.left and not m then
                    local row = {table.unpack(left)}
                    row[#row+1] = nil
                    if ji == #joins and whereFn and not whereFn(table.unpack(row)) then
                    else
                        joined[#joined+1] = row
                    end
                end
            end
        end
        items = joined
    end
    if opts.sortKey then
        local pairs = {}
        for _, it in ipairs(items) do pairs[#pairs+1] = {item=it, key=opts.sortKey(table.unpack(it))} end
        table.sort(pairs, function(a,b)
            local ak, bk = a.key, b.key
            if type(ak)=='number' and type(bk)=='number' then return ak < bk end
            if type(ak)=='string' and type(bk)=='string' then return ak < bk end
            return tostring(ak) < tostring(bk)
        end)
        items = {}
        for i,p in ipairs(pairs) do items[i] = p.item end
    end
    if opts.skip ~= nil then
        local n = opts.skip
        if n < #items then
            for i=1,n do table.remove(items,1) end
        else
            items = {}
        end
    end
    if opts.take ~= nil then
        local n = opts.take
        if n < #items then
            for i=#items, n+1, -1 do table.remove(items) end
        end
    end
    local res = {}
    for _, r in ipairs(items) do res[#res+1] = opts.selectFn(table.unpack(r)) end
    return res
end
function __run_tests(tests)
    local function format_duration(d)
        if d < 1e-6 then return string.format('%dns', math.floor(d*1e9)) end
        if d < 1e-3 then return string.format('%.1fÂµs', d*1e6) end
        if d < 1 then return string.format('%.1fms', d*1e3) end
        return string.format('%.2fs', d)
    end
    local failures = 0
    for _, t in ipairs(tests) do
        io.write('   test ' .. t.name .. ' ...')
        local start = os.clock()
        local ok, err = pcall(t.fn)
        local dur = os.clock() - start
        if ok then
            io.write(' ok (' .. format_duration(dur) .. ')\n')
        else
            io.write(' fail ' .. tostring(err) .. ' (' .. format_duration(dur) .. ')\n')
            failures = failures + 1
        end
    end
    if failures > 0 then
        io.write('\n[FAIL] ' .. failures .. ' test(s) failed.\n')
    end
end
function test_TPCDS_Q78_simplified()
    if not (__eq(result, {{["ss_sold_year"]=1998, ["ss_item_sk"]=1, ["ss_customer_sk"]=1, ["ratio"]=1.25, ["store_qty"]=10, ["store_wholesale_cost"]=50.0, ["store_sales_price"]=100.0, ["other_chan_qty"]=8, ["other_chan_wholesale_cost"]=40.0, ["other_chan_sales_price"]=80.0}})) then error('expect failed') end
end

ss = {{["ss_sold_year"]=1998, ["ss_item_sk"]=1, ["ss_customer_sk"]=1, ["ss_qty"]=10, ["ss_wc"]=50.0, ["ss_sp"]=100.0}}
ws = {{["ws_sold_year"]=1998, ["ws_item_sk"]=1, ["ws_customer_sk"]=1, ["ws_qty"]=5, ["ws_wc"]=25.0, ["ws_sp"]=50.0}}
cs = {{["cs_sold_year"]=1998, ["cs_item_sk"]=1, ["cs_customer_sk"]=1, ["cs_qty"]=3, ["cs_wc"]=15.0, ["cs_sp"]=30.0}}
result = (function()
    local _src = ss
    return __query(_src, {
        { items = ws, on = function(s, w) return ((__eq(w.ws_sold_year, s.ss_sold_year) and __eq(w.ws_item_sk, s.ss_item_sk)) and __eq(w.ws_customer_sk, s.ss_customer_sk)) end, left = true },
        { items = cs, on = function(s, w, c) return ((__eq(c.cs_sold_year, s.ss_sold_year) and __eq(c.cs_item_sk, s.ss_item_sk)) and __eq(c.cs_customer_sk, s.ss_customer_sk)) end, left = true }
    }, { selectFn = function(s, w, c) return {["ss_sold_year"]=s.ss_sold_year, ["ss_item_sk"]=s.ss_item_sk, ["ss_customer_sk"]=s.ss_customer_sk, ["ratio"]=__div(s.ss_qty, (__add(((function()
    if __eq(w, nil) then
        return 0
    else
        return w.ws_qty
    end
end)()), ((function()
    if __eq(c, nil) then
        return 0
    else
        return c.cs_qty
    end
end)())))), ["store_qty"]=s.ss_qty, ["store_wholesale_cost"]=s.ss_wc, ["store_sales_price"]=s.ss_sp, ["other_chan_qty"]=__add(((function()
    if __eq(w, nil) then
        return 0
    else
        return w.ws_qty
    end
end)()), ((function()
    if __eq(c, nil) then
        return 0
    else
        return c.cs_qty
    end
end)())), ["other_chan_wholesale_cost"]=__add(((function()
    if __eq(w, nil) then
        return 0.0
    else
        return w.ws_wc
    end
end)()), ((function()
    if __eq(c, nil) then
        return 0.0
    else
        return c.cs_wc
    end
end)())), ["other_chan_sales_price"]=__add(((function()
    if __eq(w, nil) then
        return 0.0
    else
        return w.ws_sp
    end
end)()), ((function()
    if __eq(c, nil) then
        return 0.0
    else
        return c.cs_sp
    end
end)()))} end, where = function(s, w, c) return (((((((function()
    if __eq(w, nil) then
        return 0
    else
        return w.ws_qty
    end
end)()) > 0) or (((function()
    if __eq(c, nil) then
        return 0
    else
        return c.cs_qty
    end
end)()) > 0))) and __eq(s.ss_sold_year, 1998))) end })
end)()
__json(result)
local __tests = {
    {name="TPCDS Q78 simplified", fn=test_TPCDS_Q78_simplified},
}
