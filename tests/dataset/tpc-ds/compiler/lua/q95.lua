-- Generated by Mochi compiler v0.10.26 on 2025-07-15T07:01:09Z
function __append(lst, v)
    local out = {}
    if lst then for i = 1, #lst do out[#out+1] = lst[i] end end
    out[#out+1] = v
    return out
end
function __contains(container, item)
    if type(container) == 'table' then
        if container[1] ~= nil or #container > 0 then
            for _, v in ipairs(container) do
                if v == item then return true end
            end
            return false
        else
            return container[item] ~= nil
        end
    elseif type(container) == 'string' then
        return string.find(container, item, 1, true) ~= nil
    else
        return false
    end
end
function __eq(a, b)
    if type(a) ~= type(b) then return false end
    if type(a) == 'number' then return math.abs(a-b) < 1e-9 end
    if type(a) ~= 'table' then return a == b end
    if (a[1] ~= nil or #a > 0) and (b[1] ~= nil or #b > 0) then
        if #a ~= #b then return false end
        for i = 1, #a do if not __eq(a[i], b[i]) then return false end end
        return true
    end
    for k, v in pairs(a) do if not __eq(v, b[k]) then return false end end
    for k, _ in pairs(b) do if a[k] == nil then return false end end
    return true
end
function __iter(obj)
    if type(obj) == 'table' then
        if obj[1] ~= nil or #obj > 0 then
            local i = 0
            local n = #obj
            return function()
                i = i + 1
                if i <= n then return i, obj[i] end
            end
        else
            return pairs(obj)
        end
    elseif type(obj) == 'string' then
        local i = 0
        local n = #obj
        return function()
            i = i + 1
            if i <= n then return i, string.sub(obj, i, i) end
        end
    else
        return function() return nil end
    end
end
function __json(v)
    if type(v) == 'table' and next(v) == nil then print('[]'); return end
    local function sort(x)
        if type(x) ~= 'table' then return x end
        if x[1] ~= nil or #x > 0 then
            local out = {}
            for i=1,#x do out[i] = sort(x[i]) end
            return out
        end
        local keys = {}
        for k in pairs(x) do keys[#keys+1] = k end
        table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
        local out = {}
        for _,k in ipairs(keys) do out[k] = sort(x[k]) end
        return out
    end
    local function enc(x)
        local t = type(x)
        if t == 'nil' then
            return 'null'
        elseif t == 'boolean' or t == 'number' then
            return tostring(x)
        elseif t == 'string' then
            return string.format('%q', x)
        elseif t == 'table' then
            if x[1] ~= nil or #x > 0 then
                local parts = {}
                for i=1,#x do parts[#parts+1] = enc(x[i]) end
                return '['..table.concat(parts, ',')..']'
            else
                local keys = {}
                for k in pairs(x) do keys[#keys+1] = k end
                table.sort(keys, function(a,b) return tostring(a)<tostring(b) end)
                local parts = {}
                for _,k in ipairs(keys) do parts[#parts+1] = enc(k)..':'..enc(x[k]) end
                return '{'..table.concat(parts, ',')..'}'
            end
        else
            return 'null'
        end
    end
    print(enc(sort(v)))
end
function __query(src, joins, opts)
    local whereFn = opts.where
    local items = {}
    if #joins == 0 and whereFn then
        for _, v in ipairs(src) do if whereFn(v) then items[#items+1] = {v} end end
    else
        for _, v in ipairs(src) do items[#items+1] = {v} end
    end
    for ji, j in ipairs(joins) do
        local joined = {}
        local jitems = j.items or {}
        if j.right and j.left then
            local matched = {}
            for _, left in ipairs(items) do
                local m = false
                for ri, right in ipairs(jitems) do
                    local keep = true
                    if j.on then
                        local args = {table.unpack(left)}
                        args[#args+1] = right
                        keep = j.on(table.unpack(args))
                    end
                    if keep then
                        m = true; matched[ri] = true
                        local row = {table.unpack(left)}
                        row[#row+1] = right
                        if ji == #joins and whereFn and not whereFn(table.unpack(row)) then
                        else
                            joined[#joined+1] = row
                        end
                    end
                end
                if not m then
                    local row = {table.unpack(left)}
                    row[#row+1] = nil
                    if ji == #joins and whereFn and not whereFn(table.unpack(row)) then
                    else
                        joined[#joined+1] = row
                    end
                end
            end
            for ri, right in ipairs(jitems) do
                if not matched[ri] then
                    local row = {}
                    for _=1,ji do row[#row+1] = nil end
                    row[#row+1] = right
                    if ji == #joins and whereFn and not whereFn(table.unpack(row)) then
                    else
                        joined[#joined+1] = row
                    end
                end
            end
        elseif j.right then
            for _, right in ipairs(jitems) do
                local m = false
                for _, left in ipairs(items) do
                    local keep = true
                    if j.on then
                        local args = {table.unpack(left)}
                        args[#args+1] = right
                        keep = j.on(table.unpack(args))
                    end
                    if keep then
                        m = true
                        local row = {table.unpack(left)}
                        row[#row+1] = right
                        if ji == #joins and whereFn and not whereFn(table.unpack(row)) then
                        else
                            joined[#joined+1] = row
                        end
                    end
                end
                if not m then
                    local row = {}
                    for _=1,ji do row[#row+1] = nil end
                    row[#row+1] = right
                    if ji == #joins and whereFn and not whereFn(table.unpack(row)) then
                    else
                        joined[#joined+1] = row
                    end
                end
            end
        else
            for _, left in ipairs(items) do
                local m = false
                for _, right in ipairs(jitems) do
                    local keep = true
                    if j.on then
                        local args = {table.unpack(left)}
                        args[#args+1] = right
                        keep = j.on(table.unpack(args))
                    end
                    if keep then
                        m = true
                        local row = {table.unpack(left)}
                        row[#row+1] = right
                        if ji == #joins and whereFn and not whereFn(table.unpack(row)) then
                        else
                            joined[#joined+1] = row
                        end
                    end
                end
                if j.left and not m then
                    local row = {table.unpack(left)}
                    row[#row+1] = nil
                    if ji == #joins and whereFn and not whereFn(table.unpack(row)) then
                    else
                        joined[#joined+1] = row
                    end
                end
            end
        end
        items = joined
    end
    if opts.sortKey then
        local pairs = {}
        for _, it in ipairs(items) do pairs[#pairs+1] = {item=it, key=opts.sortKey(table.unpack(it))} end
        table.sort(pairs, function(a,b)
            local ak, bk = a.key, b.key
            if type(ak)=='number' and type(bk)=='number' then return ak < bk end
            if type(ak)=='string' and type(bk)=='string' then return ak < bk end
            return tostring(ak) < tostring(bk)
        end)
        items = {}
        for i,p in ipairs(pairs) do items[i] = p.item end
    end
    if opts.skip ~= nil then
        local n = opts.skip
        if n < #items then
            for i=1,n do table.remove(items,1) end
        else
            items = {}
        end
    end
    if opts.take ~= nil then
        local n = opts.take
        if n < #items then
            for i=#items, n+1, -1 do table.remove(items) end
        end
    end
    local res = {}
    for _, r in ipairs(items) do res[#res+1] = opts.selectFn(table.unpack(r)) end
    return res
end
function __run_tests(tests)
    local function format_duration(d)
        if d < 1e-6 then return string.format('%dns', math.floor(d*1e9)) end
        if d < 1e-3 then return string.format('%.1fÂµs', d*1e6) end
        if d < 1 then return string.format('%.1fms', d*1e3) end
        return string.format('%.2fs', d)
    end
    local failures = 0
    for _, t in ipairs(tests) do
        io.write('   test ' .. t.name .. ' ...')
        local start = os.clock()
        local ok, err = pcall(t.fn)
        local dur = os.clock() - start
        if ok then
            io.write(' ok (' .. format_duration(dur) .. ')\n')
        else
            io.write(' fail ' .. tostring(err) .. ' (' .. format_duration(dur) .. ')\n')
            failures = failures + 1
        end
    end
    if failures > 0 then
        io.write('\n[FAIL] ' .. failures .. ' test(s) failed.\n')
    end
end
function __sum(v)
    local items
    if type(v) == 'table' and v.items ~= nil then
        items = v.items
    elseif type(v) == 'table' then
        items = v
    else
        error('sum() expects list or group')
    end
    local sum = 0
    for _, it in ipairs(items) do sum = sum + it end
    return sum
end
WebSale = {}
WebSale.__index = WebSale
function WebSale.new(o)
    o = o or {}
    setmetatable(o, WebSale)
    return o
end

WebReturn = {}
WebReturn.__index = WebReturn
function WebReturn.new(o)
    o = o or {}
    setmetatable(o, WebReturn)
    return o
end

DateDim = {}
DateDim.__index = DateDim
function DateDim.new(o)
    o = o or {}
    setmetatable(o, DateDim)
    return o
end

CustomerAddress = {}
CustomerAddress.__index = CustomerAddress
function CustomerAddress.new(o)
    o = o or {}
    setmetatable(o, CustomerAddress)
    return o
end

WebSite = {}
WebSite.__index = WebSite
function WebSite.new(o)
    o = o or {}
    setmetatable(o, WebSite)
    return o
end

function distinct(xs)
    local out = {}
    for _, x in __iter(xs) do
        if not __contains(out, x) then
            out = __append(out, x)
        end
    end
    return out
end

function test_TPCDS_Q95_shipping_returns()
    if not (__eq(result, {["order_count"]=1, ["total_shipping_cost"]=2.0, ["total_net_profit"]=5.0})) then error('expect failed') end
end

web_sales = {{["ws_order_number"]=1, ["ws_warehouse_sk"]=1, ["ws_ship_date_sk"]=1, ["ws_ship_addr_sk"]=1, ["ws_web_site_sk"]=1, ["ws_ext_ship_cost"]=2.0, ["ws_net_profit"]=5.0}, {["ws_order_number"]=1, ["ws_warehouse_sk"]=2, ["ws_ship_date_sk"]=1, ["ws_ship_addr_sk"]=1, ["ws_web_site_sk"]=1, ["ws_ext_ship_cost"]=0.0, ["ws_net_profit"]=0.0}}
web_returns = {{["wr_order_number"]=1}}
date_dim = {{["d_date_sk"]=1, ["d_date"]="2001-02-01"}}
customer_address = {{["ca_address_sk"]=1, ["ca_state"]="CA"}}
web_site = {{["web_site_sk"]=1, ["web_company_name"]="pri"}}
ws_wh = (function()
    local _res = {}
    for _, ws1 in ipairs(web_sales) do
        for _, ws2 in ipairs(web_sales) do
            if (__eq(ws1.ws_order_number, ws2.ws_order_number) and not __eq(ws1.ws_warehouse_sk, ws2.ws_warehouse_sk)) then
                _res[#_res+1] = {["ws_order_number"]=ws1.ws_order_number}
            end
        end
    end
    return _res
end)()
filtered = (function()
    local _src = web_sales
    return __query(_src, {
        { items = date_dim, on = function(ws, d) return __eq(ws.ws_ship_date_sk, d.d_date_sk) end },
        { items = customer_address, on = function(ws, d, ca) return __eq(ws.ws_ship_addr_sk, ca.ca_address_sk) end },
        { items = web_site, on = function(ws, d, ca, w) return __eq(ws.ws_web_site_sk, w.web_site_sk) end }
    }, { selectFn = function(ws, d, ca, w) return ws end, where = function(ws, d, ca, w) return ((((__eq(ca.ca_state, "CA") and __eq(w.web_company_name, "pri")) and __contains(((function()
    local _res = {}
    for _, x in ipairs(ws_wh) do
        _res[#_res+1] = x.ws_order_number
    end
    return _res
end)()), ws.ws_order_number)) and __contains(((function()
    local _res = {}
    for _, wr in ipairs(web_returns) do
        _res[#_res+1] = wr.wr_order_number
    end
    return _res
end)()), ws.ws_order_number))) end })
end)()
result = {["order_count"]=#distinct((function()
    local _res = {}
    for _, x in ipairs(filtered) do
        _res[#_res+1] = x.ws_order_number
    end
    return _res
end)()), ["total_shipping_cost"]=__sum((function()
    local _res = {}
    for _, x in ipairs(filtered) do
        _res[#_res+1] = x.ws_ext_ship_cost
    end
    return _res
end)()), ["total_net_profit"]=__sum((function()
    local _res = {}
    for _, x in ipairs(filtered) do
        _res[#_res+1] = x.ws_net_profit
    end
    return _res
end)())}
__json(result)
local __tests = {
    {name="TPCDS Q95 shipping returns", fn=test_TPCDS_Q95_shipping_returns},
}
