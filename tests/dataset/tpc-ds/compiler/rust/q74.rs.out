// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:30:29Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer {
    c_customer_sk: i32,
    c_customer_id: i32,
    c_first_name: &'static str,
    c_last_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    ss_customer_sk: i32,
    ss_sold_date_sk: i32,
    ss_net_paid: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Web_sale {
    ws_bill_customer_sk: i32,
    ws_sold_date_sk: i32,
    ws_net_paid: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    id: i32,
    first: &'static str,
    last: &'static str,
    year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item {
    c: Customer,
    ss: Store_sale,
    d: Date_dim,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    customer_id: i32,
    customer_first_name: &'static str,
    customer_last_name: &'static str,
    year: i32,
    year_total: f64,
    sale_type: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key1 {
    id: i32,
    first: &'static str,
    last: &'static str,
    year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item2 {
    c: Customer,
    ws: Web_sale,
    d: Date_dim,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group3 {
    key: Key1,
    items: Vec<Item2>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result4 {
    customer_id: i32,
    customer_first_name: &'static str,
    customer_last_name: &'static str,
    year: i32,
    year_total: f64,
    sale_type: &'static str,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let customer = vec![Customer { c_customer_sk: 1, c_customer_id: 1, c_first_name: "Alice", c_last_name: "Smith" }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_year: 1998 }, Date_dim { d_date_sk: 2, d_year: 1999 }];
    let store_sales = vec![Store_sale { ss_customer_sk: 1, ss_sold_date_sk: 1, ss_net_paid: 100.0 }, Store_sale { ss_customer_sk: 1, ss_sold_date_sk: 2, ss_net_paid: 110.0 }];
    let web_sales = vec![Web_sale { ws_bill_customer_sk: 1, ws_sold_date_sk: 1, ws_net_paid: 40.0 }, Web_sale { ws_bill_customer_sk: 1, ws_sold_date_sk: 2, ws_net_paid: 80.0 }];
    let year_total = concat({ let mut tmp1 = std::collections::HashMap::new();for c in &customer { for ss in &store_sales { if !(c.c_customer_sk == ss.ss_customer_sk) { continue; } for d in &date_dim { if !(d.d_date_sk == ss.ss_sold_date_sk) { continue; } if !(d.d_year == 1998 || d.d_year == 1999) { continue; } let key = Key { id: c.c_customer_id, first: c.c_first_name, last: c.c_last_name, year: d.d_year }; tmp1.entry(key).or_insert_with(Vec::new).push(Item {c: c.clone(), ss: ss.clone(), d: d.clone() }); } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { customer_id: g.key.id, customer_first_name: g.key.first, customer_last_name: g.key.last, year: g.key.year, year_total: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.ss.ss_net_paid); } tmp3 }), sale_type: "s" }); } result }, { let mut tmp4 = std::collections::HashMap::new();for c in &customer { for ws in &web_sales { if !(c.c_customer_sk == ws.ws_bill_customer_sk) { continue; } for d in &date_dim { if !(d.d_date_sk == ws.ws_sold_date_sk) { continue; } if !(d.d_year == 1998 || d.d_year == 1999) { continue; } let key = Key1 { id: c.c_customer_id, first: c.c_first_name, last: c.c_last_name, year: d.d_year }; tmp4.entry(key).or_insert_with(Vec::new).push(Item2 {c: c.clone(), ws: ws.clone(), d: d.clone() }); } } } let mut tmp5 = Vec::<Group3>::new(); for (k,v) in tmp4 { tmp5.push(Group3 { key: k, items: v }); } tmp5.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp5 { result.push(Result4 { customer_id: g.key.id, customer_first_name: g.key.first, customer_last_name: g.key.last, year: g.key.year, year_total: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push(x.ws.ws_net_paid); } tmp6 }), sale_type: "w" }); } result });
    let s_firstyear = first({ let mut tmp7 = Vec::new();for y in &year_total { if !(y.sale_type == "s" && y.year == 1998) { continue; } tmp7.push(y.clone()); } tmp7 });
    let s_secyear = first({ let mut tmp8 = Vec::new();for y in &year_total { if !(y.sale_type == "s" && y.year == 1999) { continue; } tmp8.push(y.clone()); } tmp8 });
    let w_firstyear = first({ let mut tmp9 = Vec::new();for y in &year_total { if !(y.sale_type == "w" && y.year == 1998) { continue; } tmp9.push(y.clone()); } tmp9 });
    let w_secyear = first({ let mut tmp10 = Vec::new();for y in &year_total { if !(y.sale_type == "w" && y.year == 1999) { continue; } tmp10.push(y.clone()); } tmp10 });
    let result = if s_firstyear.year_total > 0 && w_firstyear.year_total > 0 && (w_secyear.year_total / w_firstyear.year_total) > (s_secyear.year_total / s_firstyear.year_total) { vec![{ let mut m = std::collections::BTreeMap::new(); m.insert("customer_id", s_secyear.customer_id); m.insert("customer_first_name", s_secyear.customer_first_name); m.insert("customer_last_name", s_secyear.customer_last_name); m }] } else { vec![] };
    _json(&result);
    assert!(result == vec![{ let mut m = std::collections::BTreeMap::new(); m.insert("customer_id", 1); m.insert("customer_first_name", "Alice"); m.insert("customer_last_name", "Smith"); m }]);
}
