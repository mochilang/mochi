// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:10:47Z
#[derive(Default, Debug, Clone, PartialEq)]
struct CatalogSale {
        cs_order_number: i32,
        cs_ship_date_sk: i32,
        cs_ship_addr_sk: i32,
        cs_call_center_sk: i32,
        cs_warehouse_sk: i32,
        cs_ext_ship_cost: f64,
        cs_net_profit: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct DateDim {
        d_date_sk: i32,
        d_date: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct CustomerAddress {
        ca_address_sk: i32,
        ca_state: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct CallCenter {
        cc_call_center_sk: i32,
        cc_county: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct CatalogReturn {
        cr_order_number: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Catalog_sale {
    cs_order_number: i32,
    cs_ship_date_sk: i32,
    cs_ship_addr_sk: i32,
    cs_call_center_sk: i32,
    cs_warehouse_sk: i32,
    cs_ext_ship_cost: f64,
    cs_net_profit: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_date: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer_addres {
    ca_address_sk: i32,
    ca_state: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Call_center {
    cc_call_center_sk: i32,
    cc_county: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item {
    cs1: Catalog_sale,
    d: Date_dim,
    ca: Customer_addres,
    cc: Call_center,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    order_count: i32,
    total_shipping_cost: i32,
    total_net_profit: i32,
}

fn append<T: Clone>(mut v: Vec<T>, item: T) -> Vec<T> {
    v.push(item);
    v
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let catalog_sales = vec![Catalog_sale { cs_order_number: 1, cs_ship_date_sk: 1, cs_ship_addr_sk: 1, cs_call_center_sk: 1, cs_warehouse_sk: 1, cs_ext_ship_cost: 5.0, cs_net_profit: 20.0 }, Catalog_sale { cs_order_number: 1, cs_ship_date_sk: 1, cs_ship_addr_sk: 1, cs_call_center_sk: 1, cs_warehouse_sk: 2, cs_ext_ship_cost: 0.0, cs_net_profit: 0.0 }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_date: "2000-03-01" }];
    let customer_address = vec![Customer_addres { ca_address_sk: 1, ca_state: "CA" }];
    let call_center = vec![Call_center { cc_call_center_sk: 1, cc_county: "CountyA" }];
    let catalog_returns = vec![];
    fn distinct(xs: Vec<any>) -> Vec<any> {
        let mut out = vec![];
        for x in xs {
            if !contains(out, x) {
                out = append(out, x);
            }
        }
        return out;
    }
    let filtered = { let mut tmp3 = std::collections::HashMap::new();for cs1 in &catalog_sales { for d in &date_dim { if !(cs1.cs_ship_date_sk == d.d_date_sk && d.d_date >= "2000-03-01" && d.d_date <= "2000-04-30") { continue; } for ca in &customer_address { if !(cs1.cs_ship_addr_sk == ca.ca_address_sk && ca.ca_state == "CA") { continue; } for cc in &call_center { if !(cs1.cs_call_center_sk == cc.cc_call_center_sk && cc.cc_county == "CountyA") { continue; } if !(({ let mut tmp1 = Vec::new();for cs2 in &catalog_sales { if !(cs1.cs_order_number == cs2.cs_order_number && cs1.cs_warehouse_sk != cs2.cs_warehouse_sk) { continue; } tmp1.push(cs2.clone()); } tmp1 }.len() > 0) && ({ let mut tmp2 = Vec::new();for &cr in &catalog_returns { if !(cs1.cs_order_number == cr.cr_order_number) { continue; } tmp2.push(cr); } tmp2 }.len() > 0) == false) { continue; } let key = Key {  }; tmp3.entry(key).or_insert_with(Vec::new).push(Item {cs1: cs1.clone(), d: d.clone(), ca: ca.clone(), cc: cc.clone() }); } } } } let mut tmp4 = Vec::<Group>::new(); for (k,v) in tmp3 { tmp4.push(Group { key: k, items: v }); } tmp4.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp4 { result.push(Result { order_count: distinct({ let mut tmp5 = Vec::new();for x in &g.clone().items { tmp5.push(x.cs_order_number); } tmp5 }).len() as i32, total_shipping_cost: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push(x.cs_ext_ship_cost); } tmp6 }), total_net_profit: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { tmp7.push(x.cs_net_profit); } tmp7 }) }); } result };
    _json(&filtered);
    assert!(filtered == vec![Result { order_count: 1, total_shipping_cost: 5.0, total_net_profit: 20.0 }]);
}
