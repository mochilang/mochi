rustc: exit status 1
warning: type `Store_sale` should have an upper camel case name
  --> /tmp/q27.rs:41:8
   |
41 | struct Store_sale {
   |        ^^^^^^^^^^ help: convert the identifier to upper camel case: `StoreSale`
   |
   = note: `#[warn(non_camel_case_types)]` on by default

warning: type `Customer_demographic` should have an upper camel case name
  --> /tmp/q27.rs:53:8
   |
53 | struct Customer_demographic {
   |        ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `CustomerDemographic`

warning: type `Date_dim` should have an upper camel case name
  --> /tmp/q27.rs:61:8
   |
61 | struct Date_dim {
   |        ^^^^^^^^ help: convert the identifier to upper camel case: `DateDim`

error[E0277]: can't compare `&str` with `str`
   --> /tmp/q27.rs:124:429
    |
124 | ...tinue; } if !(vec!["CA"].contains(&cd.cd_gender == "F" && cd.cd_marital_status == "M" && cd.cd_education_status == "College" && d.d_ye...
    |                                                    ^^ no implementation for `&str == str`
    |
    = help: the trait `PartialEq<str>` is not implemented for `&str`
    = note: required for `&&str` to implement `PartialEq<&str>`
help: consider removing the borrow
    |
124 -     let result = { let mut tmp1 = std::collections::HashMap::new();for ss in &store_sales { for cd in &customer_demographics { if !(ss.ss_cdemo_sk == cd.cd_demo_sk) { continue; } for d in &date_dim { if !(ss.ss_sold_date_sk == d.d_date_sk) { continue; } for s in &store { if !(ss.ss_store_sk == s.s_store_sk) { continue; } for i in &item { if !(ss.ss_item_sk == i.i_item_sk) { continue; } if !(vec!["CA"].contains(&cd.cd_gender == "F" && cd.cd_marital_status == "M" && cd.cd_education_status == "College" && d.d_year == 2000 && s.s_state)) { continue; } let key = Key { item_id: i.i_item_id, state: s.s_state }; tmp1.entry(key).or_insert_with(Vec::new).push(Item3 {ss: ss.clone(), cd: cd.clone(), d: d.clone(), s: s.clone(), i: i.clone() }); } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); tmp2.sort_by(|a,b| ((a.key.item_id, a.key.state)).partial_cmp(&((b.key.item_id, b.key.state))).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { i_item_id: g.key.item_id, s_state: g.key.state, agg1: avg(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.ss_quantity); } tmp3 }), agg2: avg(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.ss_list_price); } tmp4 }), agg3: avg(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { tmp5.push(x.ss_coupon_amt); } tmp5 }), agg4: avg(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push(x.ss_sales_price); } tmp6 }) }); } result };
124 +     let result = { let mut tmp1 = std::collections::HashMap::new();for ss in &store_sales { for cd in &customer_demographics { if !(ss.ss_cdemo_sk == cd.cd_demo_sk) { continue; } for d in &date_dim { if !(ss.ss_sold_date_sk == d.d_date_sk) { continue; } for s in &store { if !(ss.ss_store_sk == s.s_store_sk) { continue; } for i in &item { if !(ss.ss_item_sk == i.i_item_sk) { continue; } if !(vec!["CA"].contains(cd.cd_gender == "F" && cd.cd_marital_status == "M" && cd.cd_education_status == "College" && d.d_year == 2000 && s.s_state)) { continue; } let key = Key { item_id: i.i_item_id, state: s.s_state }; tmp1.entry(key).or_insert_with(Vec::new).push(Item3 {ss: ss.clone(), cd: cd.clone(), d: d.clone(), s: s.clone(), i: i.clone() }); } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); tmp2.sort_by(|a,b| ((a.key.item_id, a.key.state)).partial_cmp(&((b.key.item_id, b.key.state))).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { i_item_id: g.key.item_id, s_state: g.key.state, agg1: avg(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.ss_quantity); } tmp3 }), agg2: avg(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.ss_list_price); } tmp4 }), agg3: avg(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { tmp5.push(x.ss_coupon_amt); } tmp5 }), agg4: avg(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push(x.ss_sales_price); } tmp6 }) }); } result };
    |

error[E0308]: mismatched types
   --> /tmp/q27.rs:124:529
    |
124 | ...ains(&cd.cd_gender == "F" && cd.cd_marital_status == "M" && cd.cd_education_status == "College" && d.d_year == 2000 && s.s_state)) { c...
    |         --------------------------------------------------------------------------------------------------------------    ^^^^^^^^^ expected `bool`, found `&str`
    |         |
    |         expected because this is `bool`

error[E0308]: mismatched types
   --> /tmp/q27.rs:124:415
    |
124 | ..."].contains(&cd.cd_gender == "F" && cd.cd_marital_status == "M" && cd.cd_education_status == "College" && d.d_year == 2000 && s.s_state)) ...
    |       -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&&str`, found `bool`
    |       |
    |       arguments to this method are incorrect
    |
note: method defined here
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/slice/mod.rs:2549:12

error[E0609]: no field `ss_quantity` on type `&Item3`
   --> /tmp/q27.rs:124:1205
    |
124 | ... = Vec::new();for x in &g.clone().items { tmp3.push(x.ss_quantity); } tmp3 }), agg2: avg(&{ let mut tmp4 = Vec::new();for x in &g.clon...
    |                                                          ^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
124 |     let result = { let mut tmp1 = std::collections::HashMap::new();for ss in &store_sales { for cd in &customer_demographics { if !(ss.ss_cdemo_sk == cd.cd_demo_sk) { continue; } for d in &date_dim { if !(ss.ss_sold_date_sk == d.d_date_sk) { continue; } for s in &store { if !(ss.ss_store_sk == s.s_store_sk) { continue; } for i in &item { if !(ss.ss_item_sk == i.i_item_sk) { continue; } if !(vec!["CA"].contains(&cd.cd_gender == "F" && cd.cd_marital_status == "M" && cd.cd_education_status == "College" && d.d_year == 2000 && s.s_state)) { continue; } let key = Key { item_id: i.i_item_id, state: s.s_state }; tmp1.entry(key).or_insert_with(Vec::new).push(Item3 {ss: ss.clone(), cd: cd.clone(), d: d.clone(), s: s.clone(), i: i.clone() }); } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); tmp2.sort_by(|a,b| ((a.key.item_id, a.key.state)).partial_cmp(&((b.key.item_id, b.key.state))).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { i_item_id: g.key.item_id, s_state: g.key.state, agg1: avg(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.ss.ss_quantity); } tmp3 }), agg2: avg(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.ss_list_price); } tmp4 }), agg3: avg(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { tmp5.push(x.ss_coupon_amt); } tmp5 }), agg4: avg(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push(x.ss_sales_price); } tmp6 }) }); } result };
    |

error[E0609]: no field `ss_list_price` on type `&Item3`
   --> /tmp/q27.rs:124:1309
    |
124 | ...= Vec::new();for x in &g.clone().items { tmp4.push(x.ss_list_price); } tmp4 }), agg3: avg(&{ let mut tmp5 = Vec::new();for x in &g.clo...
    |                                                         ^^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
124 |     let result = { let mut tmp1 = std::collections::HashMap::new();for ss in &store_sales { for cd in &customer_demographics { if !(ss.ss_cdemo_sk == cd.cd_demo_sk) { continue; } for d in &date_dim { if !(ss.ss_sold_date_sk == d.d_date_sk) { continue; } for s in &store { if !(ss.ss_store_sk == s.s_store_sk) { continue; } for i in &item { if !(ss.ss_item_sk == i.i_item_sk) { continue; } if !(vec!["CA"].contains(&cd.cd_gender == "F" && cd.cd_marital_status == "M" && cd.cd_education_status == "College" && d.d_year == 2000 && s.s_state)) { continue; } let key = Key { item_id: i.i_item_id, state: s.s_state }; tmp1.entry(key).or_insert_with(Vec::new).push(Item3 {ss: ss.clone(), cd: cd.clone(), d: d.clone(), s: s.clone(), i: i.clone() }); } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); tmp2.sort_by(|a,b| ((a.key.item_id, a.key.state)).partial_cmp(&((b.key.item_id, b.key.state))).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { i_item_id: g.key.item_id, s_state: g.key.state, agg1: avg(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.ss_quantity); } tmp3 }), agg2: avg(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.ss.ss_list_price); } tmp4 }), agg3: avg(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { tmp5.push(x.ss_coupon_amt); } tmp5 }), agg4: avg(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push(x.ss_sales_price); } tmp6 }) }); } result };
    |

error[E0609]: no field `ss_coupon_amt` on type `&Item3`
   --> /tmp/q27.rs:124:1415
    |
124 | ...= Vec::new();for x in &g.clone().items { tmp5.push(x.ss_coupon_amt); } tmp5 }), agg4: avg(&{ let mut tmp6 = Vec::new();for x in &g.clo...
    |                                                         ^^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
124 |     let result = { let mut tmp1 = std::collections::HashMap::new();for ss in &store_sales { for cd in &customer_demographics { if !(ss.ss_cdemo_sk == cd.cd_demo_sk) { continue; } for d in &date_dim { if !(ss.ss_sold_date_sk == d.d_date_sk) { continue; } for s in &store { if !(ss.ss_store_sk == s.s_store_sk) { continue; } for i in &item { if !(ss.ss_item_sk == i.i_item_sk) { continue; } if !(vec!["CA"].contains(&cd.cd_gender == "F" && cd.cd_marital_status == "M" && cd.cd_education_status == "College" && d.d_year == 2000 && s.s_state)) { continue; } let key = Key { item_id: i.i_item_id, state: s.s_state }; tmp1.entry(key).or_insert_with(Vec::new).push(Item3 {ss: ss.clone(), cd: cd.clone(), d: d.clone(), s: s.clone(), i: i.clone() }); } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); tmp2.sort_by(|a,b| ((a.key.item_id, a.key.state)).partial_cmp(&((b.key.item_id, b.key.state))).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { i_item_id: g.key.item_id, s_state: g.key.state, agg1: avg(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.ss_quantity); } tmp3 }), agg2: avg(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.ss_list_price); } tmp4 }), agg3: avg(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { tmp5.push(x.ss.ss_coupon_amt); } tmp5 }), agg4: avg(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push(x.ss_sales_price); } tmp6 }) }); } result };
    |

error[E0609]: no field `ss_sales_price` on type `&Item3`
   --> /tmp/q27.rs:124:1521
    |
124 | ...= Vec::new();for x in &g.clone().items { tmp6.push(x.ss_sales_price); } tmp6 }) }); } result };
    |                                                         ^^^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
124 |     let result = { let mut tmp1 = std::collections::HashMap::new();for ss in &store_sales { for cd in &customer_demographics { if !(ss.ss_cdemo_sk == cd.cd_demo_sk) { continue; } for d in &date_dim { if !(ss.ss_sold_date_sk == d.d_date_sk) { continue; } for s in &store { if !(ss.ss_store_sk == s.s_store_sk) { continue; } for i in &item { if !(ss.ss_item_sk == i.i_item_sk) { continue; } if !(vec!["CA"].contains(&cd.cd_gender == "F" && cd.cd_marital_status == "M" && cd.cd_education_status == "College" && d.d_year == 2000 && s.s_state)) { continue; } let key = Key { item_id: i.i_item_id, state: s.s_state }; tmp1.entry(key).or_insert_with(Vec::new).push(Item3 {ss: ss.clone(), cd: cd.clone(), d: d.clone(), s: s.clone(), i: i.clone() }); } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); tmp2.sort_by(|a,b| ((a.key.item_id, a.key.state)).partial_cmp(&((b.key.item_id, b.key.state))).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { i_item_id: g.key.item_id, s_state: g.key.state, agg1: avg(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.ss_quantity); } tmp3 }), agg2: avg(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.ss_list_price); } tmp4 }), agg3: avg(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { tmp5.push(x.ss_coupon_amt); } tmp5 }), agg4: avg(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push(x.ss.ss_sales_price); } tmp6 }) }); } result };
    |

error: aborting due to 7 previous errors; 3 warnings emitted

Some errors have detailed explanations: E0277, E0308, E0609.
For more information about an error, try `rustc --explain E0277`.
