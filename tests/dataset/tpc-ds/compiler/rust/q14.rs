// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:40Z
#[derive(Default, Debug, Clone, PartialEq)]
struct StoreSale {
        ss_item_sk: i32,
        ss_list_price: f64,
        ss_quantity: i32,
        ss_sold_date_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq)]
struct CatalogSale {
        cs_item_sk: i32,
        cs_list_price: f64,
        cs_quantity: i32,
        cs_sold_date_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq)]
struct WebSale {
        ws_item_sk: i32,
        ws_list_price: f64,
        ws_quantity: i32,
        ws_sold_date_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct Item {
        i_item_sk: i32,
        i_brand_id: i32,
        i_class_id: i32,
        i_category_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct DateDim {
        d_date_sk: i32,
        d_year: i32,
        d_moy: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    ss_item_sk: i32,
    ss_list_price: f64,
    ss_quantity: i32,
    ss_sold_date_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Catalog_sale {
    cs_item_sk: i32,
    cs_list_price: f64,
    cs_quantity: i32,
    cs_sold_date_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Web_sale {
    ws_item_sk: i32,
    ws_list_price: f64,
    ws_quantity: i32,
    ws_sold_date_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item1 {
    i_item_sk: i32,
    i_brand_id: i32,
    i_class_id: i32,
    i_category_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_year: i32,
    d_moy: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Cross_item {
    ss_item_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    brand_id: i32,
    class_id: i32,
    category_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item2 {
    ss: Store_sale,
    d: Date_dim,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item2>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    channel: &'static str,
    sales: i32,
    number_sales: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result3 {
    channel: &'static str,
    i_brand_id: i32,
    i_class_id: i32,
    i_category_id: i32,
    sales: i32,
    number_sales: i32,
}

fn avg<T>(v: &[T]) -> f64 where T: Into<f64> + Copy {
    let sum: f64 = v.iter().map(|&x| x.into()).sum();
    sum / v.len() as f64
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let store_sales = vec![Store_sale { ss_item_sk: 1, ss_list_price: 10.0, ss_quantity: 2, ss_sold_date_sk: 1 }, Store_sale { ss_item_sk: 1, ss_list_price: 20.0, ss_quantity: 3, ss_sold_date_sk: 2 }];
    let catalog_sales = vec![Catalog_sale { cs_item_sk: 1, cs_list_price: 10.0, cs_quantity: 2, cs_sold_date_sk: 1 }];
    let web_sales = vec![Web_sale { ws_item_sk: 1, ws_list_price: 30.0, ws_quantity: 1, ws_sold_date_sk: 1 }];
    let item = vec![Item1 { i_item_sk: 1, i_brand_id: 1, i_class_id: 1, i_category_id: 1 }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_year: 2000, d_moy: 12 }, Date_dim { d_date_sk: 2, d_year: 2002, d_moy: 11 }];
    let cross_items = vec![Cross_item { ss_item_sk: 1 }];
    let avg_sales = avg(&vec![20.0, 20.0, 30.0]);
    let store_filtered = { let mut tmp2 = std::collections::HashMap::new();for ss in &store_sales { for d in &date_dim { if !(ss.ss_sold_date_sk == d.d_date_sk && d.d_year == 2002 && d.d_moy == 11) { continue; } if !(({ let mut tmp1 = Vec::new();for ci in &cross_items { tmp1.push(ci.ss_item_sk); } tmp1 }).contains(&ss.ss_item_sk)) { continue; } let key = Key { brand_id: 1, class_id: 1, category_id: 1 }; tmp2.entry(key).or_insert_with(Vec::new).push(Item2 {ss: ss.clone(), d: d.clone() }); } } let mut tmp3 = Vec::<Group>::new(); for (k,v) in tmp2 { tmp3.push(Group { key: k, items: v }); } tmp3.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp3 { result.push(Result { channel: "store", sales: sum(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.ss_quantity * x.ss_list_price); } tmp4 }), number_sales: { let mut tmp5 = Vec::new();for _ in &g.clone().items { tmp5.push(_.clone()); } tmp5 }.len() as i32 }); } result };
    let result = { let mut tmp6 = Vec::new();for r in &store_filtered { if !((r.sales as f64) > avg_sales) { continue; } tmp6.push(Result3 { channel: r.channel, i_brand_id: 1, i_class_id: 1, i_category_id: 1, sales: r.sales, number_sales: r.number_sales }); } tmp6 };
    _json(&result);
    assert!(result == vec![Result3 { channel: "store", i_brand_id: 1, i_class_id: 1, i_category_id: 1, sales: 60.0, number_sales: 1 }]);
}
