fn test_TPCDS_Q7_empty() {
    expect(result.len() as i64 == 0);
}

fn main() {
    let mut store_sales = vec![];
    let mut customer_demographics = vec![];
    let mut date_dim = vec![];
    let mut item = vec![];
    let mut promotion = vec![];
    let mut result = {
    let mut _pairs = Vec::new();
    for ss in store_sales.clone() {
        for cd in customer_demographics.clone() {
            if !(_map_get(&ss, &"ss_cdemo_sk".to_string()) == _map_get(&cd, &"cd_demo_sk".to_string())) { continue; }
            for d in date_dim.clone() {
                if !(_map_get(&ss, &"ss_sold_date_sk".to_string()) == _map_get(&d, &"d_date_sk".to_string())) { continue; }
                for i in item.clone() {
                    if !(_map_get(&ss, &"ss_item_sk".to_string()) == _map_get(&i, &"i_item_sk".to_string())) { continue; }
                    for p in promotion.clone() {
                        if !(_map_get(&ss, &"ss_promo_sk".to_string()) == _map_get(&p, &"p_promo_sk".to_string())) { continue; }
                        if _map_get(&ss, &"ss_cdemo_sk".to_string()) == _map_get(&cd, &"cd_demo_sk".to_string()) && _map_get(&ss, &"ss_sold_date_sk".to_string()) == _map_get(&d, &"d_date_sk".to_string()) && _map_get(&ss, &"ss_item_sk".to_string()) == _map_get(&i, &"i_item_sk".to_string()) && _map_get(&ss, &"ss_promo_sk".to_string()) == _map_get(&p, &"p_promo_sk".to_string()) && _map_get(&cd, &"cd_gender".to_string()) == "M" && _map_get(&cd, &"cd_marital_status".to_string()) == "S" && _map_get(&cd, &"cd_education_status".to_string()) == "College" && (_map_get(&p, &"p_channel_email".to_string()) == "N" || _map_get(&p, &"p_channel_event".to_string()) == "N") && _map_get(&d, &"d_year".to_string()) == 1998 {
                            _pairs.push((_map_get(&_map_get(&g, &"key".to_string()), &"i_item_id".to_string()), std::collections::HashMap::from([("i_item_id".to_string(), _map_get(&_map_get(&g, &"key".to_string()), &"i_item_id".to_string())), ("agg1".to_string(), _avg(&{
    let mut _res = Vec::new();
    for x in g {
        _res.push(_map_get(&_map_get(&x, &"ss".to_string()), &"ss_quantity".to_string()));
    }
    _res
})), ("agg2".to_string(), _avg(&{
    let mut _res = Vec::new();
    for x in g {
        _res.push(_map_get(&_map_get(&x, &"ss".to_string()), &"ss_list_price".to_string()));
    }
    _res
})), ("agg3".to_string(), _avg(&{
    let mut _res = Vec::new();
    for x in g {
        _res.push(_map_get(&_map_get(&x, &"ss".to_string()), &"ss_coupon_amt".to_string()));
    }
    _res
})), ("agg4".to_string(), _avg(&{
    let mut _res = Vec::new();
    for x in g {
        _res.push(_map_get(&_map_get(&x, &"ss".to_string()), &"ss_sales_price".to_string()));
    }
    _res
}))])));
                        }
                    }
                }
            }
        }
    }
    _pairs.sort_by(|a, b| a.0.partial_cmp(&b.0).unwrap());
    let mut _res = Vec::new();
    for p in _pairs { _res.push(p.1); }
    _res
};
    json(result);
    test_TPCDS_Q7_empty();
}

fn _avg<T: Into<f64> + Copy>(v: &[T]) -> f64 {
    if v.is_empty() { return 0.0 }
    let mut sum = 0.0;
    for &it in v { sum += Into::<f64>::into(it); }
    sum / v.len() as f64
}
fn _map_get<K: std::cmp::Eq + std::hash::Hash, V: Clone>(m: &std::collections::HashMap<K, V>, k: &K) -> V {
    m.get(k).unwrap().clone()
}
fn expect(cond: bool) {
    if !cond { panic!("expect failed"); }
}
