// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:47Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    date_sk: i32,
    d_day_name: &'static str,
    d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store {
    store_sk: i32,
    store_id: &'static str,
    store_name: &'static str,
    gmt_offset: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    sold_date_sk: i32,
    store_sk: i32,
    sales_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    d_day_name: &'static str,
    s_store_name: &'static str,
    s_store_id: &'static str,
    price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    name: &'static str,
    id: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Result>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result1 {
    s_store_name: &'static str,
    s_store_id: &'static str,
    sun_sales: f64,
    mon_sales: f64,
    tue_sales: f64,
    wed_sales: f64,
    thu_sales: f64,
    fri_sales: f64,
    sat_sales: f64,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let date_dim = vec![Date_dim { date_sk: 1, d_day_name: "Sunday", d_year: 2020 }, Date_dim { date_sk: 2, d_day_name: "Monday", d_year: 2020 }, Date_dim { date_sk: 3, d_day_name: "Tuesday", d_year: 2020 }, Date_dim { date_sk: 4, d_day_name: "Wednesday", d_year: 2020 }, Date_dim { date_sk: 5, d_day_name: "Thursday", d_year: 2020 }, Date_dim { date_sk: 6, d_day_name: "Friday", d_year: 2020 }, Date_dim { date_sk: 7, d_day_name: "Saturday", d_year: 2020 }];
    let store = vec![Store { store_sk: 1, store_id: "S1", store_name: "Main", gmt_offset: 0 }];
    let store_sales = vec![Store_sale { sold_date_sk: 1, store_sk: 1, sales_price: 10.0 }, Store_sale { sold_date_sk: 2, store_sk: 1, sales_price: 20.0 }, Store_sale { sold_date_sk: 3, store_sk: 1, sales_price: 30.0 }, Store_sale { sold_date_sk: 4, store_sk: 1, sales_price: 40.0 }, Store_sale { sold_date_sk: 5, store_sk: 1, sales_price: 50.0 }, Store_sale { sold_date_sk: 6, store_sk: 1, sales_price: 60.0 }, Store_sale { sold_date_sk: 7, store_sk: 1, sales_price: 70.0 }];
    let year = 2020;
    let gmt = 0;
    let records = { let mut tmp1 = Vec::new();for d in &date_dim { for ss in &store_sales { if !(ss.sold_date_sk == d.date_sk) { continue; } for s in &store { if !(ss.store_sk == s.store_sk) { continue; } if !(s.gmt_offset == gmt && d.d_year == year) { continue; } tmp1.push(Result { d_day_name: d.d_day_name, s_store_name: s.store_name, s_store_id: s.store_id, price: ss.sales_price }); } } } tmp1 };
    let base = { let mut tmp2 = std::collections::HashMap::new();for r in &records { let key = Key { name: r.s_store_name, id: r.s_store_id }; tmp2.entry(key).or_insert_with(Vec::new).push(r.clone()); } let mut tmp3 = Vec::<Group>::new(); for (k,v) in tmp2 { tmp3.push(Group { key: k, items: v }); } tmp3.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp3 { result.push(Result1 { s_store_name: g.key.name, s_store_id: g.key.id, sun_sales: sum(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(if x.d_day_name == "Sunday" { x.price } else { 0.0 }); } tmp4 }), mon_sales: sum(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { tmp5.push(if x.d_day_name == "Monday" { x.price } else { 0.0 }); } tmp5 }), tue_sales: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push(if x.d_day_name == "Tuesday" { x.price } else { 0.0 }); } tmp6 }), wed_sales: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { tmp7.push(if x.d_day_name == "Wednesday" { x.price } else { 0.0 }); } tmp7 }), thu_sales: sum(&{ let mut tmp8 = Vec::new();for x in &g.clone().items { tmp8.push(if x.d_day_name == "Thursday" { x.price } else { 0.0 }); } tmp8 }), fri_sales: sum(&{ let mut tmp9 = Vec::new();for x in &g.clone().items { tmp9.push(if x.d_day_name == "Friday" { x.price } else { 0.0 }); } tmp9 }), sat_sales: sum(&{ let mut tmp10 = Vec::new();for x in &g.clone().items { tmp10.push(if x.d_day_name == "Saturday" { x.price } else { 0.0 }); } tmp10 }) }); } result };
    let result = base;
    _json(&result);
    assert!(result == vec![Result1 { s_store_name: "Main", s_store_id: "S1", sun_sales: 10.0, mon_sales: 20.0, tue_sales: 30.0, wed_sales: 40.0, thu_sales: 50.0, fri_sales: 60.0, sat_sales: 70.0 }]);
}
