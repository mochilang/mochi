// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:51Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Sale {
    mgr: i32,
    amount: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    mgr: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Group {
    key: Key,
    items: Vec<Sale>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    mgr: i32,
    sum_sales: i32,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let sales = vec![Sale { mgr: 1, amount: 30 }, Sale { mgr: 2, amount: 33 }];
    let by_mgr = { let mut tmp1 = std::collections::HashMap::new();for s in &sales { let key = Key { mgr: s.mgr }; tmp1.entry(key).or_insert_with(Vec::new).push(s.clone()); } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { mgr: g.key.mgr, sum_sales: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.amount); } tmp3 }) }); } result };
    let result = sum(&{ let mut tmp4 = Vec::new();for x in &by_mgr { tmp4.push(x.sum_sales); } tmp4 });
    _json(&result);
    assert!(result == 63 as f64);
}
