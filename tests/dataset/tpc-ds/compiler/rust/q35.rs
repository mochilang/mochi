// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:44Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer {
    c_customer_sk: i32,
    c_current_addr_sk: i32,
    c_current_cdemo_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer_addres {
    ca_address_sk: i32,
    ca_state: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer_demographic {
    cd_demo_sk: i32,
    cd_gender: &'static str,
    cd_marital_status: &'static str,
    cd_dep_count: i32,
    cd_dep_employed_count: i32,
    cd_dep_college_count: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store_sale {
    ss_customer_sk: i32,
    ss_sold_date_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_year: i32,
    d_qoy: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    state: &'static str,
    gender: &'static str,
    marital: &'static str,
    dep: i32,
    emp: i32,
    col: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item {
    c: Customer,
    ca: Customer_addres,
    cd: Customer_demographic,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Group {
    key: Key,
    items: Vec<Item>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    ca_state: &'static str,
    cd_gender: &'static str,
    cd_marital_status: &'static str,
    cd_dep_count: i32,
    cd_dep_employed_count: i32,
    cd_dep_college_count: i32,
    cnt: i32,
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let customer = vec![Customer { c_customer_sk: 1, c_current_addr_sk: 1, c_current_cdemo_sk: 1 }, Customer { c_customer_sk: 2, c_current_addr_sk: 2, c_current_cdemo_sk: 2 }];
    let customer_address = vec![Customer_addres { ca_address_sk: 1, ca_state: "CA" }, Customer_addres { ca_address_sk: 2, ca_state: "NY" }];
    let customer_demographics = vec![Customer_demographic { cd_demo_sk: 1, cd_gender: "M", cd_marital_status: "S", cd_dep_count: 1, cd_dep_employed_count: 1, cd_dep_college_count: 0 }, Customer_demographic { cd_demo_sk: 2, cd_gender: "F", cd_marital_status: "M", cd_dep_count: 2, cd_dep_employed_count: 1, cd_dep_college_count: 1 }];
    let store_sales = vec![Store_sale { ss_customer_sk: 1, ss_sold_date_sk: 1 }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_year: 2000, d_qoy: 1 }];
    let purchased = { let mut tmp1 = Vec::new();for ss in &store_sales { for d in &date_dim { if !(ss.ss_sold_date_sk == d.d_date_sk) { continue; } if !(d.d_year == 2000 && d.d_qoy < 4) { continue; } tmp1.push(ss.ss_customer_sk); } } tmp1 };
    let groups = { let mut tmp2 = std::collections::HashMap::new();for c in &customer { for ca in &customer_address { if !(c.c_current_addr_sk == ca.ca_address_sk) { continue; } for cd in &customer_demographics { if !(c.c_current_cdemo_sk == cd.cd_demo_sk) { continue; } if !(purchased.contains(&c.c_customer_sk)) { continue; } let key = Key { state: ca.ca_state, gender: cd.cd_gender, marital: cd.cd_marital_status, dep: cd.cd_dep_count, emp: cd.cd_dep_employed_count, col: cd.cd_dep_college_count }; tmp2.entry(key).or_insert_with(Vec::new).push(Item {c: c.clone(), ca: ca.clone(), cd: cd.clone() }); } } } let mut tmp3 = Vec::<Group>::new(); for (k,v) in tmp2 { tmp3.push(Group { key: k, items: v }); } tmp3.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp3 { result.push(Result { ca_state: g.key.state, cd_gender: g.key.gender, cd_marital_status: g.key.marital, cd_dep_count: g.key.dep, cd_dep_employed_count: g.key.emp, cd_dep_college_count: g.key.col, cnt: g.clone().items.len() as i32 }); } result };
    _json(&groups);
    assert!(groups == vec![Result { ca_state: "CA", cd_gender: "M", cd_marital_status: "S", cd_dep_count: 1, cd_dep_employed_count: 1, cd_dep_college_count: 0, cnt: 1 }]);
}
