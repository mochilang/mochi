// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:30:23Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer {
    c_customer_sk: i32,
    c_last_name: &'static str,
    c_first_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store_sale {
    ss_customer_sk: i32,
    d_month_seq: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Catalog_sale {
    cs_bill_customer_sk: i32,
    d_month_seq: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Web_sale {
    ws_bill_customer_sk: i32,
    d_month_seq: i32,
}

fn append<T: Clone>(mut v: Vec<T>, item: T) -> Vec<T> {
    v.push(item);
    v
}

fn _intersect<T: Eq + std::hash::Hash + Clone>(a: Vec<T>, b: Vec<T>) -> Vec<T> {
    use std::collections::HashSet;
    let set: HashSet<T> = b.into_iter().collect();
    a.into_iter().filter(|x| set.contains(x)).collect()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let customer = vec![Customer { c_customer_sk: 1, c_last_name: "Smith", c_first_name: "John" }, Customer { c_customer_sk: 2, c_last_name: "Jones", c_first_name: "Alice" }];
    let store_sales = vec![Store_sale { ss_customer_sk: 1, d_month_seq: 1200 }, Store_sale { ss_customer_sk: 2, d_month_seq: 1205 }];
    let catalog_sales = vec![Catalog_sale { cs_bill_customer_sk: 1, d_month_seq: 1203 }];
    let web_sales = vec![Web_sale { ws_bill_customer_sk: 1, d_month_seq: 1206 }];
    fn distinct(xs: Vec<any>) -> Vec<any> {
        let mut out = vec![];
        for x in xs {
            if !contains(out, x) {
                out = append(out, x);
            }
        }
        return out;
    }
    let store_ids = distinct({ let mut tmp1 = Vec::new();for s in &store_sales { if !(s.d_month_seq >= 1200 && s.d_month_seq <= 1211) { continue; } tmp1.push(s.ss_customer_sk); } tmp1 });
    let catalog_ids = distinct({ let mut tmp2 = Vec::new();for c in &catalog_sales { if !(c.d_month_seq >= 1200 && c.d_month_seq <= 1211) { continue; } tmp2.push(c.cs_bill_customer_sk); } tmp2 });
    let web_ids = distinct({ let mut tmp3 = Vec::new();for w in &web_sales { if !(w.d_month_seq >= 1200 && w.d_month_seq <= 1211) { continue; } tmp3.push(w.ws_bill_customer_sk); } tmp3 });
    let hot = _intersect(_intersect(store_ids, catalog_ids), web_ids);
    let result = hot.len() as i32;
    _json(&result);
    assert!(result == 1);
}
