// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:30:29Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Catalog_sale {
    cs_item_sk: i32,
    cs_order_number: i32,
    cs_quantity: i32,
    cs_sold_date_sk: i32,
    cs_ship_date_sk: i32,
    cs_bill_cdemo_sk: i32,
    cs_bill_hdemo_sk: i32,
    cs_promo_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Inventory {
    inv_item_sk: i32,
    inv_warehouse_sk: i32,
    inv_date_sk: i32,
    inv_quantity_on_hand: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Warehouse {
    w_warehouse_sk: i32,
    w_warehouse_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item {
    i_item_sk: i32,
    i_item_desc: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer_demographic {
    cd_demo_sk: i32,
    cd_marital_status: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Household_demographic {
    hd_demo_sk: i32,
    hd_buy_potential: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_week_seq: i32,
    d_date: i32,
    d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    item_desc: &'static str,
    warehouse: &'static str,
    week_seq: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item1 {
    cs: Catalog_sale,
    inv: Inventory,
    w: Warehouse,
    i: Item,
    cd: Customer_demographic,
    hd: Household_demographic,
    d1: Date_dim,
    d2: Date_dim,
    d3: Date_dim,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Group {
    key: Key,
    items: Vec<Item1>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    i_item_desc: &'static str,
    w_warehouse_name: &'static str,
    d_week_seq: i32,
    no_promo: i32,
    promo: i32,
    total_cnt: i32,
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let catalog_sales = vec![Catalog_sale { cs_item_sk: 1, cs_order_number: 1, cs_quantity: 1, cs_sold_date_sk: 1, cs_ship_date_sk: 3, cs_bill_cdemo_sk: 1, cs_bill_hdemo_sk: 1, cs_promo_sk: () }];
    let inventory = vec![Inventory { inv_item_sk: 1, inv_warehouse_sk: 1, inv_date_sk: 2, inv_quantity_on_hand: 0 }];
    let warehouse = vec![Warehouse { w_warehouse_sk: 1, w_warehouse_name: "Main" }];
    let item = vec![Item { i_item_sk: 1, i_item_desc: "ItemA" }];
    let customer_demographics = vec![Customer_demographic { cd_demo_sk: 1, cd_marital_status: "M" }];
    let household_demographics = vec![Household_demographic { hd_demo_sk: 1, hd_buy_potential: "5001-10000" }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_week_seq: 10, d_date: 1, d_year: 2000 }, Date_dim { d_date_sk: 2, d_week_seq: 10, d_date: 1, d_year: 2000 }, Date_dim { d_date_sk: 3, d_week_seq: 10, d_date: 7, d_year: 2000 }];
    let result = { let mut tmp1 = std::collections::HashMap::new();for cs in &catalog_sales { for inv in &inventory { if !(inv.inv_item_sk == cs.cs_item_sk) { continue; } for w in &warehouse { if !(w.w_warehouse_sk == inv.inv_warehouse_sk) { continue; } for i in &item { if !(i.i_item_sk == cs.cs_item_sk) { continue; } for cd in &customer_demographics { if !(cd.cd_demo_sk == cs.cs_bill_cdemo_sk) { continue; } for hd in &household_demographics { if !(hd.hd_demo_sk == cs.cs_bill_hdemo_sk) { continue; } for d1 in &date_dim { if !(d1.d_date_sk == cs.cs_sold_date_sk) { continue; } for d2 in &date_dim { if !(d2.d_date_sk == inv.inv_date_sk) { continue; } for d3 in &date_dim { if !(d3.d_date_sk == cs.cs_ship_date_sk) { continue; } if !(d1.d_week_seq == d2.d_week_seq && inv.inv_quantity_on_hand < cs.cs_quantity && d3.d_date > d1.d_date + 5 && hd.hd_buy_potential == "5001-10000" && d1.d_year == 2000 && cd.cd_marital_status == "M") { continue; } let key = Key { item_desc: i.i_item_desc, warehouse: w.w_warehouse_name, week_seq: d1.d_week_seq }; tmp1.entry(key).or_insert_with(Vec::new).push(Item1 {cs: cs.clone(), inv: inv.clone(), w: w.clone(), i: i.clone(), cd: cd.clone(), hd: hd.clone(), d1: d1.clone(), d2: d2.clone(), d3: d3.clone() }); } } } } } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { i_item_desc: g.key.item_desc, w_warehouse_name: g.key.warehouse, d_week_seq: g.key.week_seq, no_promo: { let mut tmp3 = Vec::new();for x in &g.clone().items { if !(x.cs_promo_sk == ()) { continue; } tmp3.push(x.clone()); } tmp3 }.len() as i32, promo: { let mut tmp4 = Vec::new();for x in &g.clone().items { if !(x.cs_promo_sk != ()) { continue; } tmp4.push(x.clone()); } tmp4 }.len() as i32, total_cnt: g.clone().items.len() as i32 }); } result };
    _json(&result);
    assert!(result == vec![Result { i_item_desc: "ItemA", w_warehouse_name: "Main", d_week_seq: 10, no_promo: 1, promo: 0, total_cnt: 1 }]);
}
