// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:09:28Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item {
    i_item_sk: i32,
    i_manufact_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    item: i32,
    date: i32,
    price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_month_seq: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item1 {
    ss: Store_sale,
    i: Item,
    d: Date_dim,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: i32,
    items: Vec<Item1>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    manu: i32,
    sum_sales: i32,
    avg_sales: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result2 {
    i_manufact_id: i32,
    sum_sales: i32,
}

fn avg<T>(v: &[T]) -> f64 where T: Into<f64> + Copy {
    let sum: f64 = v.iter().map(|&x| x.into()).sum();
    sum / v.len() as f64
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let item = vec![Item { i_item_sk: 1, i_manufact_id: 1 }, Item { i_item_sk: 2, i_manufact_id: 2 }];
    let store_sales = vec![Store_sale { item: 1, date: 1, price: 10.0 }, Store_sale { item: 1, date: 2, price: 10.0 }, Store_sale { item: 2, date: 1, price: 30.0 }, Store_sale { item: 2, date: 2, price: 23.0 }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_month_seq: 1 }, Date_dim { d_date_sk: 2, d_month_seq: 2 }];
    fn abs(x: f64) -> f64 {
        if x >= 0.0 {
            return x;
        }
        return -x;
    }
    let grouped = { let mut tmp1 = std::collections::HashMap::new();for ss in &store_sales { for i in &item { if !(ss.item == i.i_item_sk) { continue; } for d in &date_dim { if !(ss.date == d.d_date_sk) { continue; } let key = i.i_manufact_id; tmp1.entry(key).or_insert_with(Vec::new).push(Item1 {ss: ss.clone(), i: i.clone(), d: d.clone() }); } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { manu: g.key, sum_sales: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.price); } tmp3 }), avg_sales: avg(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.price); } tmp4 }) }); } result };
    let result = { let mut tmp5 = Vec::new();for g in &grouped { if !(g.avg_sales > 0.0 && abs((g.sum_sales as f64) - g.avg_sales) / g.avg_sales > 0.1) { continue; } tmp5.push(Result2 { i_manufact_id: g.manu, sum_sales: g.sum_sales }); } tmp5 };
    _json(&result);
    assert!(result == vec![Result2 { i_manufact_id: 1, sum_sales: 20.0 }, Result2 { i_manufact_id: 2, sum_sales: 53.0 }]);
}
