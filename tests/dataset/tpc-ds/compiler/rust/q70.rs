// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:52Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store {
    s_store_sk: i32,
    s_state: &'static str,
    s_county: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_month_seq: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    ss_sold_date_sk: i32,
    ss_store_sk: i32,
    ss_net_profit: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    state: &'static str,
    county: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item {
    ss: Store_sale,
    d: Date_dim,
    s: Store,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    s_state: &'static str,
    s_county: &'static str,
    total_sum: f64,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let store = vec![Store { s_store_sk: 1, s_state: "CA", s_county: "Orange" }, Store { s_store_sk: 2, s_state: "CA", s_county: "Orange" }, Store { s_store_sk: 3, s_state: "TX", s_county: "Travis" }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_month_seq: 1200 }, Date_dim { d_date_sk: 2, d_month_seq: 1201 }];
    let store_sales = vec![Store_sale { ss_sold_date_sk: 1, ss_store_sk: 1, ss_net_profit: 10.0 }, Store_sale { ss_sold_date_sk: 1, ss_store_sk: 2, ss_net_profit: 5.0 }, Store_sale { ss_sold_date_sk: 2, ss_store_sk: 3, ss_net_profit: 20.0 }];
    let dms = 1200;
    let result = { let mut tmp1 = std::collections::HashMap::new();for ss in &store_sales { for d in &date_dim { if !(d.d_date_sk == ss.ss_sold_date_sk) { continue; } for s in &store { if !(s.s_store_sk == ss.ss_store_sk) { continue; } if !(d.d_month_seq >= dms && d.d_month_seq <= dms + 11) { continue; } let key = Key { state: s.s_state, county: s.s_county }; tmp1.entry(key).or_insert_with(Vec::new).push(Item {ss: ss.clone(), d: d.clone(), s: s.clone() }); } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); tmp2.sort_by(|a,b| ((a.key.state, a.key.county)).partial_cmp(&((b.key.state, b.key.county))).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { s_state: g.key.state, s_county: g.key.county, total_sum: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.ss.ss_net_profit); } tmp3 }) }); } result };
    _json(&result);
    assert!(result == vec![Result { s_state: "CA", s_county: "Orange", total_sum: 15.0 }, Result { s_state: "TX", s_county: "Travis", total_sum: 20.0 }]);
}
