// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:10:48Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct StoreSale {
        ss_sold_date_sk: i32,
        ss_item_sk: i32,
        ss_customer_sk: i32,
        ss_ticket_number: i32,
        ss_quantity: i32,
        ss_store_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct StoreReturn {
        sr_returned_date_sk: i32,
        sr_customer_sk: i32,
        sr_item_sk: i32,
        sr_ticket_number: i32,
        sr_return_quantity: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct CatalogSale {
        cs_sold_date_sk: i32,
        cs_item_sk: i32,
        cs_bill_customer_sk: i32,
        cs_quantity: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct DateDim {
        d_date_sk: i32,
        d_quarter_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct Store {
        s_store_sk: i32,
        s_state: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct Item {
        i_item_sk: i32,
        i_item_id: &'static str,
        i_item_desc: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store_sale {
    ss_sold_date_sk: i32,
    ss_item_sk: i32,
    ss_customer_sk: i32,
    ss_ticket_number: i32,
    ss_quantity: i32,
    ss_store_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store_return {
    sr_returned_date_sk: i32,
    sr_customer_sk: i32,
    sr_item_sk: i32,
    sr_ticket_number: i32,
    sr_return_quantity: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Catalog_sale {
    cs_sold_date_sk: i32,
    cs_item_sk: i32,
    cs_bill_customer_sk: i32,
    cs_quantity: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_quarter_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store1 {
    s_store_sk: i32,
    s_state: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item2 {
    i_item_sk: i32,
    i_item_id: &'static str,
    i_item_desc: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    qty: i32,
    ret: i32,
    csq: i32,
    i_item_id: &'static str,
    i_item_desc: &'static str,
    s_state: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    i_item_id: &'static str,
    i_item_desc: &'static str,
    s_state: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Group {
    key: Key,
    items: Vec<Result>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result3 {
    i_item_id: &'static str,
    i_item_desc: &'static str,
    s_state: &'static str,
    store_sales_quantitycount: i32,
    store_sales_quantityave: f64,
    store_sales_quantitystdev: f64,
    store_sales_quantitycov: f64,
    store_returns_quantitycount: i32,
    store_returns_quantityave: f64,
    store_returns_quantitystdev: f64,
    store_returns_quantitycov: f64,
    catalog_sales_quantitycount: i32,
    catalog_sales_quantityave: f64,
    catalog_sales_quantitystdev: f64,
    catalog_sales_quantitycov: f64,
}

fn avg<T>(v: &[T]) -> f64 where T: Into<f64> + Copy {
    let sum: f64 = v.iter().map(|&x| x.into()).sum();
    sum / v.len() as f64
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let store_sales = vec![Store_sale { ss_sold_date_sk: 1, ss_item_sk: 1, ss_customer_sk: 1, ss_ticket_number: 1, ss_quantity: 10, ss_store_sk: 1 }];
    let store_returns = vec![Store_return { sr_returned_date_sk: 2, sr_customer_sk: 1, sr_item_sk: 1, sr_ticket_number: 1, sr_return_quantity: 2 }];
    let catalog_sales = vec![Catalog_sale { cs_sold_date_sk: 3, cs_item_sk: 1, cs_bill_customer_sk: 1, cs_quantity: 5 }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_quarter_name: "1998Q1" }, Date_dim { d_date_sk: 2, d_quarter_name: "1998Q2" }, Date_dim { d_date_sk: 3, d_quarter_name: "1998Q3" }];
    let store = vec![Store1 { s_store_sk: 1, s_state: "CA" }];
    let item = vec![Item2 { i_item_sk: 1, i_item_id: "I1", i_item_desc: "Item 1" }];
    let joined = { let mut tmp1 = Vec::new();for ss in &store_sales { for sr in &store_returns { if !(ss.ss_customer_sk == sr.sr_customer_sk && ss.ss_item_sk == sr.sr_item_sk && ss.ss_ticket_number == sr.sr_ticket_number) { continue; } for cs in &catalog_sales { if !(sr.sr_customer_sk == cs.cs_bill_customer_sk && sr.sr_item_sk == cs.cs_item_sk) { continue; } for d1 in &date_dim { if !(ss.ss_sold_date_sk == d1.d_date_sk && d1.d_quarter_name == "1998Q1") { continue; } for d2 in &date_dim { if !(vec!["1998Q1", "1998Q2", "1998Q3"].contains(&sr.sr_returned_date_sk == d2.d_date_sk && d2.d_quarter_name)) { continue; } for d3 in &date_dim { if !(vec!["1998Q1", "1998Q2", "1998Q3"].contains(&cs.cs_sold_date_sk == d3.d_date_sk && d3.d_quarter_name)) { continue; } for s in &store { if !(ss.ss_store_sk == s.s_store_sk) { continue; } for i in &item { if !(ss.ss_item_sk == i.i_item_sk) { continue; } tmp1.push(Result { qty: ss.ss_quantity, ret: sr.sr_return_quantity, csq: cs.cs_quantity, i_item_id: i.i_item_id, i_item_desc: i.i_item_desc, s_state: s.s_state }); } } } } } } } } tmp1 };
    let result = { let mut tmp2 = std::collections::HashMap::new();for j in &joined { let key = Key { i_item_id: j.i_item_id, i_item_desc: j.i_item_desc, s_state: j.s_state }; tmp2.entry(key).or_insert_with(Vec::new).push(j.clone()); } let mut tmp3 = Vec::<Group>::new(); for (k,v) in tmp2 { tmp3.push(Group { key: k, items: v }); } tmp3.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp3 { result.push(Result3 { i_item_id: g.key.i_item_id, i_item_desc: g.key.i_item_desc, s_state: g.key.s_state, store_sales_quantitycount: { let mut tmp4 = Vec::new();for _ in &g.clone().items { tmp4.push(_.clone()); } tmp4 }.len() as i32, store_sales_quantityave: avg(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { tmp5.push(x.qty); } tmp5 }), store_sales_quantitystdev: 0.0, store_sales_quantitycov: 0.0, store_returns_quantitycount: { let mut tmp6 = Vec::new();for _ in &g.clone().items { tmp6.push(_.clone()); } tmp6 }.len() as i32, store_returns_quantityave: avg(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { tmp7.push(x.ret); } tmp7 }), store_returns_quantitystdev: 0.0, store_returns_quantitycov: 0.0, catalog_sales_quantitycount: { let mut tmp8 = Vec::new();for _ in &g.clone().items { tmp8.push(_.clone()); } tmp8 }.len() as i32, catalog_sales_quantityave: avg(&{ let mut tmp9 = Vec::new();for x in &g.clone().items { tmp9.push(x.csq); } tmp9 }), catalog_sales_quantitystdev: 0.0, catalog_sales_quantitycov: 0.0 }); } result };
    _json(&result);
    assert!(result == vec![Result3 { i_item_id: "I1", i_item_desc: "Item 1", s_state: "CA", store_sales_quantitycount: 1, store_sales_quantityave: 10.0, store_sales_quantitystdev: 0.0, store_sales_quantitycov: 0.0, store_returns_quantitycount: 1, store_returns_quantityave: 2.0, store_returns_quantitystdev: 0.0, store_returns_quantitycov: 0.0, catalog_sales_quantitycount: 1, catalog_sales_quantityave: 5.0, catalog_sales_quantitystdev: 0.0, catalog_sales_quantitycov: 0.0 }]);
}
