fn test_TPCDS_Q8_result() {
    expect(result == vec![std::collections::HashMap::from([("s_store_name".to_string(), "Store1"), ("net_profit".to_string(), 10.0)])]);
}

fn main() {
    let mut store_sales = vec![std::collections::HashMap::from([("ss_store_sk".to_string(), 1), ("ss_sold_date_sk".to_string(), 1), ("ss_net_profit".to_string(), 10.0)])];
    let mut date_dim = vec![std::collections::HashMap::from([("d_date_sk".to_string(), 1), ("d_qoy".to_string(), 1), ("d_year".to_string(), 1998)])];
    let mut store = vec![std::collections::HashMap::from([("s_store_sk".to_string(), 1), ("s_store_name".to_string(), "Store1"), ("s_zip".to_string(), "12345")])];
    let mut customer_address = vec![std::collections::HashMap::from([("ca_address_sk".to_string(), 1), ("ca_zip".to_string(), "12345")])];
    let mut customer = vec![std::collections::HashMap::from([("c_customer_sk".to_string(), 1), ("c_current_addr_sk".to_string(), 1), ("c_preferred_cust_flag".to_string(), "Y")])];
    reverse(substr("zip", 0, 2));
    let mut zip_list = vec!["12345".to_string()];
    let mut result = {
    let mut _pairs = Vec::new();
    for ss in store_sales.clone() {
        for d in date_dim.clone() {
            if !(_map_get(&ss, &"ss_sold_date_sk".to_string()) == _map_get(&d, &"d_date_sk".to_string()) && _map_get(&d, &"d_qoy".to_string()) == 1 && _map_get(&d, &"d_year".to_string()) == 1998) { continue; }
            for s in store.clone() {
                if !(_map_get(&ss, &"ss_store_sk".to_string()) == _map_get(&s, &"s_store_sk".to_string())) { continue; }
                for ca in customer_address.clone() {
                    if !(substr(&_map_get(&s, &"s_zip".to_string()), 0, 2) == substr(&_map_get(&ca, &"ca_zip".to_string()), 0, 2)) { continue; }
                    for c in customer.clone() {
                        if !(_map_get(&ca, &"ca_address_sk".to_string()) == _map_get(&c, &"c_current_addr_sk".to_string()) && _map_get(&c, &"c_preferred_cust_flag".to_string()) == "Y") { continue; }
                        if _map_get(&ss, &"ss_sold_date_sk".to_string()) == _map_get(&d, &"d_date_sk".to_string()) && _map_get(&d, &"d_qoy".to_string()) == 1 && _map_get(&d, &"d_year".to_string()) == 1998 && _map_get(&ss, &"ss_store_sk".to_string()) == _map_get(&s, &"s_store_sk".to_string()) && substr(&_map_get(&s, &"s_zip".to_string()), 0, 2) == substr(&_map_get(&ca, &"ca_zip".to_string()), 0, 2) && _map_get(&ca, &"ca_address_sk".to_string()) == _map_get(&c, &"c_current_addr_sk".to_string()) && _map_get(&c, &"c_preferred_cust_flag".to_string()) == "Y" && zip_list.contains(&substr(&_map_get(&ca, &"ca_zip".to_string()), 0, 5)) {
                            _pairs.push((_map_get(&g, &"key".to_string()), std::collections::HashMap::from([("s_store_name".to_string(), _map_get(&g, &"key".to_string())), ("net_profit".to_string(), _sum(&{
    let mut _res = Vec::new();
    for x in g {
        _res.push(_map_get(&_map_get(&x, &"ss".to_string()), &"ss_net_profit".to_string()));
    }
    _res
}))])));
                        }
                    }
                }
            }
        }
    }
    _pairs.sort_by(|a, b| a.0.partial_cmp(&b.0).unwrap());
    let mut _res = Vec::new();
    for p in _pairs { _res.push(p.1); }
    _res
};
    json(result);
    test_TPCDS_Q8_result();
}

fn _map_get<K: std::cmp::Eq + std::hash::Hash, V: Clone>(m: &std::collections::HashMap<K, V>, k: &K) -> V {
    m.get(k).unwrap().clone()
}
fn _sum<T: Into<f64> + Copy>(v: &[T]) -> f64 {
    if v.is_empty() { return 0.0 }
    let mut sum = 0.0;
    for &it in v { sum += Into::<f64>::into(it); }
    sum
}
fn expect(cond: bool) {
    if !cond { panic!("expect failed"); }
}
