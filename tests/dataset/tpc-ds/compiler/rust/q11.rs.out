#[derive(Clone, Debug, Default)]
struct Customer {
    c_customer_sk: i64,
    c_customer_id: String,
    c_first_name: String,
    c_last_name: String,
}

#[derive(Clone, Debug, Default)]
struct StoreSale {
    ss_customer_sk: i64,
    ss_sold_date_sk: i64,
    ss_ext_list_price: f64,
}

#[derive(Clone, Debug, Default)]
struct WebSale {
    ws_bill_customer_sk: i64,
    ws_sold_date_sk: i64,
    ws_ext_list_price: f64,
}

fn test_TPCDS_Q11_growth() {
    expect(result == vec![std::collections::HashMap::from([("customer_id".to_string(), "C1"), ("customer_first_name".to_string(), "John"), ("customer_last_name".to_string(), "Doe")])]);
}

fn main() {
    let mut customer = vec![std::collections::HashMap::from([("c_customer_sk".to_string(), 1), ("c_customer_id".to_string(), "C1"), ("c_first_name".to_string(), "John"), ("c_last_name".to_string(), "Doe")])];
    let mut store_sales = vec![std::collections::HashMap::from([("ss_customer_sk".to_string(), 1), ("ss_sold_date_sk".to_string(), 1998), ("ss_ext_list_price".to_string(), 60.0)]), std::collections::HashMap::from([("ss_customer_sk".to_string(), 1), ("ss_sold_date_sk".to_string(), 1999), ("ss_ext_list_price".to_string(), 90.0)])];
    let mut web_sales = vec![std::collections::HashMap::from([("ws_bill_customer_sk".to_string(), 1), ("ws_sold_date_sk".to_string(), 1998), ("ws_ext_list_price".to_string(), 50.0)]), std::collections::HashMap::from([("ws_bill_customer_sk".to_string(), 1), ("ws_sold_date_sk".to_string(), 1999), ("ws_ext_list_price".to_string(), 150.0)])];
    let mut ss98 = _sum(&{
    let mut _res = Vec::new();
    for ss in store_sales {
        if !(_map_get(&ss, &"ss_sold_date_sk".to_string()) == 1998) { continue; }
        _res.push(_map_get(&ss, &"ss_ext_list_price".to_string()));
    }
    _res
});
    let mut ss99 = _sum(&{
    let mut _res = Vec::new();
    for ss in store_sales {
        if !(_map_get(&ss, &"ss_sold_date_sk".to_string()) == 1999) { continue; }
        _res.push(_map_get(&ss, &"ss_ext_list_price".to_string()));
    }
    _res
});
    let mut ws98 = _sum(&{
    let mut _res = Vec::new();
    for ws in web_sales {
        if !(_map_get(&ws, &"ws_sold_date_sk".to_string()) == 1998) { continue; }
        _res.push(_map_get(&ws, &"ws_ext_list_price".to_string()));
    }
    _res
});
    let mut ws99 = _sum(&{
    let mut _res = Vec::new();
    for ws in web_sales {
        if !(_map_get(&ws, &"ws_sold_date_sk".to_string()) == 1999) { continue; }
        _res.push(_map_get(&ws, &"ws_ext_list_price".to_string()));
    }
    _res
});
    let mut growth_ok = ws98 > 0 && ss98 > 0 && (ws99 / ws98) > (ss99 / ss98);
    let mut result = if growth_ok { vec![std::collections::HashMap::from([("customer_id".to_string(), "C1"), ("customer_first_name".to_string(), "John"), ("customer_last_name".to_string(), "Doe")])] } else { vec![] };
    json(result);
    test_TPCDS_Q11_growth();
}

fn _map_get<K: std::cmp::Eq + std::hash::Hash, V: Clone>(m: &std::collections::HashMap<K, V>, k: &K) -> V {
    m.get(k).unwrap().clone()
}
fn _sum<T: Into<f64> + Copy>(v: &[T]) -> f64 {
    if v.is_empty() { return 0.0 }
    let mut sum = 0.0;
    for &it in v { sum += Into::<f64>::into(it); }
    sum
}
fn expect(cond: bool) {
    if !cond { panic!("expect failed"); }
}
