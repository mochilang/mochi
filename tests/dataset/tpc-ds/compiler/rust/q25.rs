// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:42Z
#[derive(Default, Debug, Clone, PartialEq)]
struct StoreSale {
        ss_sold_date_sk: i32,
        ss_item_sk: i32,
        ss_store_sk: i32,
        ss_customer_sk: i32,
        ss_net_profit: f64,
        ss_ticket_number: i32,
}

#[derive(Default, Debug, Clone, PartialEq)]
struct StoreReturn {
        sr_returned_date_sk: i32,
        sr_item_sk: i32,
        sr_customer_sk: i32,
        sr_ticket_number: i32,
        sr_net_loss: f64,
}

#[derive(Default, Debug, Clone, PartialEq)]
struct CatalogSale {
        cs_sold_date_sk: i32,
        cs_item_sk: i32,
        cs_bill_customer_sk: i32,
        cs_net_profit: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct DateDim {
        d_date_sk: i32,
        d_moy: i32,
        d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct Store {
        s_store_sk: i32,
        s_store_id: &'static str,
        s_store_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct Item {
        i_item_sk: i32,
        i_item_id: &'static str,
        i_item_desc: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    ss_sold_date_sk: i32,
    ss_item_sk: i32,
    ss_store_sk: i32,
    ss_customer_sk: i32,
    ss_net_profit: f64,
    ss_ticket_number: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_return {
    sr_returned_date_sk: i32,
    sr_item_sk: i32,
    sr_customer_sk: i32,
    sr_ticket_number: i32,
    sr_net_loss: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Catalog_sale {
    cs_sold_date_sk: i32,
    cs_item_sk: i32,
    cs_bill_customer_sk: i32,
    cs_net_profit: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_moy: i32,
    d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store1 {
    s_store_sk: i32,
    s_store_id: &'static str,
    s_store_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item2 {
    i_item_sk: i32,
    i_item_id: &'static str,
    i_item_desc: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    item_id: &'static str,
    item_desc: &'static str,
    s_store_id: &'static str,
    s_store_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item3 {
    ss: Store_sale,
    sr: Store_return,
    cs: Catalog_sale,
    d1: Date_dim,
    d2: Date_dim,
    d3: Date_dim,
    s: Store1,
    i: Item2,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item3>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    i_item_id: &'static str,
    i_item_desc: &'static str,
    s_store_id: &'static str,
    s_store_name: &'static str,
    store_sales_profit: i32,
    store_returns_loss: i32,
    catalog_sales_profit: i32,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let store_sales = vec![Store_sale { ss_sold_date_sk: 1, ss_item_sk: 1, ss_store_sk: 1, ss_customer_sk: 1, ss_net_profit: 50.0, ss_ticket_number: 1 }, Store_sale { ss_sold_date_sk: 1, ss_item_sk: 2, ss_store_sk: 1, ss_customer_sk: 2, ss_net_profit: 20.0, ss_ticket_number: 2 }];
    let store_returns = vec![Store_return { sr_returned_date_sk: 2, sr_item_sk: 1, sr_customer_sk: 1, sr_ticket_number: 1, sr_net_loss: 10.0 }, Store_return { sr_returned_date_sk: 2, sr_item_sk: 2, sr_customer_sk: 2, sr_ticket_number: 2, sr_net_loss: 5.0 }];
    let catalog_sales = vec![Catalog_sale { cs_sold_date_sk: 3, cs_item_sk: 1, cs_bill_customer_sk: 1, cs_net_profit: 30.0 }, Catalog_sale { cs_sold_date_sk: 3, cs_item_sk: 2, cs_bill_customer_sk: 2, cs_net_profit: 15.0 }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_moy: 4, d_year: 2000 }, Date_dim { d_date_sk: 2, d_moy: 5, d_year: 2000 }, Date_dim { d_date_sk: 3, d_moy: 6, d_year: 2000 }];
    let store = vec![Store1 { s_store_sk: 1, s_store_id: "S1", s_store_name: "Store1" }];
    let item = vec![Item2 { i_item_sk: 1, i_item_id: "ITEM1", i_item_desc: "Desc1" }, Item2 { i_item_sk: 2, i_item_id: "ITEM2", i_item_desc: "Desc2" }];
    let result = { let mut tmp1 = std::collections::HashMap::new();for ss in &store_sales { for sr in &store_returns { if !(ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk) { continue; } for cs in &catalog_sales { if !(sr.sr_customer_sk == cs.cs_bill_customer_sk && sr.sr_item_sk == cs.cs_item_sk) { continue; } for d1 in &date_dim { if !(d1.d_date_sk == ss.ss_sold_date_sk) { continue; } for d2 in &date_dim { if !(d2.d_date_sk == sr.sr_returned_date_sk) { continue; } for d3 in &date_dim { if !(d3.d_date_sk == cs.cs_sold_date_sk) { continue; } for s in &store { if !(s.s_store_sk == ss.ss_store_sk) { continue; } for i in &item { if !(i.i_item_sk == ss.ss_item_sk) { continue; } if !(d1.d_moy == 4 && d1.d_year == 2000 && d2.d_moy >= 4 && d2.d_moy <= 10 && d3.d_moy >= 4 && d3.d_moy <= 10) { continue; } let key = Key { item_id: i.i_item_id, item_desc: i.i_item_desc, s_store_id: s.s_store_id, s_store_name: s.s_store_name }; tmp1.entry(key).or_insert_with(Vec::new).push(Item3 {ss: ss.clone(), sr: sr.clone(), cs: cs.clone(), d1: d1.clone(), d2: d2.clone(), d3: d3.clone(), s: s.clone(), i: i.clone() }); } } } } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { i_item_id: g.key.item_id, i_item_desc: g.key.item_desc, s_store_id: g.key.s_store_id, s_store_name: g.key.s_store_name, store_sales_profit: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.ss_net_profit); } tmp3 }), store_returns_loss: sum(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.sr_net_loss); } tmp4 }), catalog_sales_profit: sum(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { tmp5.push(x.cs_net_profit); } tmp5 }) }); } result };
    _json(&result);
    assert!(result == vec![Result { i_item_id: "ITEM1", i_item_desc: "Desc1", s_store_id: "S1", s_store_name: "Store1", store_sales_profit: 50.0, store_returns_loss: 10.0, catalog_sales_profit: 30.0 }, Result { i_item_id: "ITEM2", i_item_desc: "Desc2", s_store_id: "S1", s_store_name: "Store1", store_sales_profit: 20.0, store_returns_loss: 5.0, catalog_sales_profit: 15.0 }]);
}
