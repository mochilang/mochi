// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:54Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_dow: i32,
    d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store {
    s_store_sk: i32,
    s_city: &'static str,
    s_number_employees: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Household_demographic {
    hd_demo_sk: i32,
    hd_dep_count: i32,
    hd_vehicle_count: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    ss_sold_date_sk: i32,
    ss_store_sk: i32,
    ss_ticket_number: i32,
    ss_customer_sk: i32,
    ss_hdemo_sk: i32,
    ss_coupon_amt: f64,
    ss_net_profit: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer {
    c_customer_sk: i32,
    c_last_name: &'static str,
    c_first_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    ticket: i32,
    customer_sk: i32,
    city: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item {
    ss: Store_sale,
    d: Date_dim,
    s: Store,
    hd: Household_demographic,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    key: Key,
    amt: f64,
    profit: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result1 {
    c_last_name: &'static str,
    c_first_name: &'static str,
    s_city: &'static str,
    ss_ticket_number: i32,
    amt: f64,
    profit: f64,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let date_dim = vec![Date_dim { d_date_sk: 1, d_dow: 1, d_year: 1999 }];
    let store = vec![Store { s_store_sk: 1, s_city: "CityA", s_number_employees: 250 }];
    let household_demographics = vec![Household_demographic { hd_demo_sk: 1, hd_dep_count: 2, hd_vehicle_count: 1 }];
    let store_sales = vec![Store_sale { ss_sold_date_sk: 1, ss_store_sk: 1, ss_ticket_number: 1, ss_customer_sk: 1, ss_hdemo_sk: 1, ss_coupon_amt: 5.0, ss_net_profit: 10.0 }];
    let customer = vec![Customer { c_customer_sk: 1, c_last_name: "Smith", c_first_name: "Alice" }];
    let agg = { let mut tmp1 = std::collections::HashMap::new();for ss in &store_sales { for d in &date_dim { if !(d.d_date_sk == ss.ss_sold_date_sk) { continue; } for s in &store { if !(s.s_store_sk == ss.ss_store_sk) { continue; } for hd in &household_demographics { if !(hd.hd_demo_sk == ss.ss_hdemo_sk) { continue; } if !((hd.hd_dep_count == 2 || hd.hd_vehicle_count > 1) && d.d_dow == 1 && (d.d_year == 1998 || d.d_year == 1999 || d.d_year == 2000) && s.s_number_employees >= 200 && s.s_number_employees <= 295) { continue; } let key = Key { ticket: ss.ss_ticket_number, customer_sk: ss.ss_customer_sk, city: s.s_city }; tmp1.entry(key).or_insert_with(Vec::new).push(Item {ss: ss.clone(), d: d.clone(), s: s.clone(), hd: hd.clone() }); } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { key: g.key, amt: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.ss.ss_coupon_amt); } tmp3 }), profit: sum(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.ss.ss_net_profit); } tmp4 }) }); } result };
    let result = { let mut tmp5 = Vec::new();for a in &agg { for c in &customer { if !(c.c_customer_sk == a.key.customer_sk) { continue; } let tmp6 = Result1 { c_last_name: c.c_last_name, c_first_name: c.c_first_name, s_city: a.key.city, ss_ticket_number: a.key.ticket, amt: a.amt, profit: a.profit }; let tmp7 = (c.c_last_name, c.c_first_name, a.key.city, a.profit); tmp5.push((tmp7, tmp6)); } } tmp5.sort_by(|a,b| a.0.partial_cmp(&b.0).unwrap()); let mut tmp8 = Vec::new(); for p in tmp5 { tmp8.push(p.1); } tmp8 };
    _json(&result);
    assert!(result == vec![Result1 { c_last_name: "Smith", c_first_name: "Alice", s_city: "CityA", ss_ticket_number: 1, amt: 5.0, profit: 10.0 }]);
}
