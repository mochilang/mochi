// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:09:33Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    ss_item_sk: i32,
    ss_quantity: i32,
    ss_sales_price: f64,
    ss_sold_date_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Web_sale {
    ws_item_sk: i32,
    ws_quantity: i32,
    ws_sales_price: f64,
    ws_sold_date_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Catalog_sale {
    cs_item_sk: i32,
    cs_quantity: i32,
    cs_sales_price: f64,
    cs_sold_date_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item {
    i_item_sk: i32,
    i_brand_id: i32,
    i_class_id: i32,
    i_category_id: i32,
    i_manufact_id: i32,
    i_category: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    d_year: i32,
    i_item_sk: i32,
    quantity: i32,
    amount: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result1 {
    d_year: i32,
    i_item_sk: i32,
    quantity: i32,
    amount: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result2 {
    d_year: i32,
    i_item_sk: i32,
    quantity: i32,
    amount: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    year: i32,
    brand_id: i32,
    class_id: i32,
    category_id: i32,
    manuf_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item3 {
    sd: Result2,
    i: Item,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item3>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result4 {
    d_year: i32,
    i_brand_id: i32,
    i_class_id: i32,
    i_category_id: i32,
    i_manufact_id: i32,
    sales_cnt: i32,
    sales_amt: f64,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let date_dim = vec![Date_dim { d_date_sk: 1, d_year: 2000 }, Date_dim { d_date_sk: 2, d_year: 2001 }];
    let store_sales = vec![Store_sale { ss_item_sk: 1, ss_quantity: 50, ss_sales_price: 500.0, ss_sold_date_sk: 1 }, Store_sale { ss_item_sk: 1, ss_quantity: 40, ss_sales_price: 400.0, ss_sold_date_sk: 2 }];
    let web_sales = vec![Web_sale { ws_item_sk: 1, ws_quantity: 30, ws_sales_price: 300.0, ws_sold_date_sk: 1 }, Web_sale { ws_item_sk: 1, ws_quantity: 25, ws_sales_price: 250.0, ws_sold_date_sk: 2 }];
    let catalog_sales = vec![Catalog_sale { cs_item_sk: 1, cs_quantity: 20, cs_sales_price: 200.0, cs_sold_date_sk: 1 }, Catalog_sale { cs_item_sk: 1, cs_quantity: 15, cs_sales_price: 150.0, cs_sold_date_sk: 2 }];
    let item = vec![Item { i_item_sk: 1, i_brand_id: 1, i_class_id: 2, i_category_id: 3, i_manufact_id: 4, i_category: "Electronics" }];
    let sales_detail = concat({ let mut tmp1 = Vec::new();for ss in &store_sales { for d in &date_dim { if !(d.d_date_sk == ss.ss_sold_date_sk) { continue; } tmp1.push(Result { d_year: d.d_year, i_item_sk: ss.ss_item_sk, quantity: ss.ss_quantity, amount: ss.ss_sales_price }); } } tmp1 }, { let mut tmp2 = Vec::new();for ws in &web_sales { for d in &date_dim { if !(d.d_date_sk == ws.ws_sold_date_sk) { continue; } tmp2.push(Result1 { d_year: d.d_year, i_item_sk: ws.ws_item_sk, quantity: ws.ws_quantity, amount: ws.ws_sales_price }); } } tmp2 }, { let mut tmp3 = Vec::new();for cs in &catalog_sales { for d in &date_dim { if !(d.d_date_sk == cs.cs_sold_date_sk) { continue; } tmp3.push(Result2 { d_year: d.d_year, i_item_sk: cs.cs_item_sk, quantity: cs.cs_quantity, amount: cs.cs_sales_price }); } } tmp3 });
    let all_sales = { let mut tmp4 = std::collections::HashMap::new();for sd in &sales_detail { for i in &item { if !(i.i_item_sk == sd.i_item_sk) { continue; } if !(i.i_category == "Electronics") { continue; } let key = Key { year: sd.d_year, brand_id: i.i_brand_id, class_id: i.i_class_id, category_id: i.i_category_id, manuf_id: i.i_manufact_id }; tmp4.entry(key).or_insert_with(Vec::new).push(Item3 {sd: sd.clone(), i: i.clone() }); } } let mut tmp5 = Vec::<Group>::new(); for (k,v) in tmp4 { tmp5.push(Group { key: k, items: v }); } tmp5.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp5 { result.push(Result4 { d_year: g.key.year, i_brand_id: g.key.brand_id, i_class_id: g.key.class_id, i_category_id: g.key.category_id, i_manufact_id: g.key.manuf_id, sales_cnt: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push(x.sd.quantity); } tmp6 }), sales_amt: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { tmp7.push(x.sd.amount); } tmp7 }) }); } result };
    let prev_yr = first({ let mut tmp8 = Vec::new();for a in &all_sales { if !(a.d_year == 2000) { continue; } tmp8.push(a.clone()); } tmp8 });
    let curr_yr = first({ let mut tmp9 = Vec::new();for a in &all_sales { if !(a.d_year == 2001) { continue; } tmp9.push(a.clone()); } tmp9 });
    let result = if (curr_yr.sales_cnt / prev_yr.sales_cnt) < 0.9 { vec![{ let mut m = std::collections::BTreeMap::new(); m.insert("prev_year", prev_yr.d_year); m.insert("year", curr_yr.d_year); m.insert("i_brand_id", curr_yr.i_brand_id); m.insert("i_class_id", curr_yr.i_class_id); m.insert("i_category_id", curr_yr.i_category_id); m.insert("i_manufact_id", curr_yr.i_manufact_id); m.insert("prev_yr_cnt", prev_yr.sales_cnt); m.insert("curr_yr_cnt", curr_yr.sales_cnt); m.insert("sales_cnt_diff", curr_yr.sales_cnt - prev_yr.sales_cnt); m.insert("sales_amt_diff", curr_yr.sales_amt - prev_yr.sales_amt); m }] } else { vec![] };
    _json(&result);
    assert!(result == vec![{ let mut m = std::collections::BTreeMap::new(); m.insert("prev_year", 2000); m.insert("year", 2001); m.insert("i_brand_id", 1); m.insert("i_class_id", 2); m.insert("i_category_id", 3); m.insert("i_manufact_id", 4); m.insert("prev_yr_cnt", 100); m.insert("curr_yr_cnt", 80); m.insert("sales_cnt_diff", -20); m.insert("sales_amt_diff", -200.0); m }]);
}
