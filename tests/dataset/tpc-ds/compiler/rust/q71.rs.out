// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:30:29Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item {
    i_item_sk: i32,
    i_brand_id: i32,
    i_brand: &'static str,
    i_manager_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Time_dim {
    t_time_sk: i32,
    t_hour: i32,
    t_minute: i32,
    t_meal_time: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_moy: i32,
    d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Web_sale {
    ws_ext_sales_price: f64,
    ws_sold_date_sk: i32,
    ws_item_sk: i32,
    ws_sold_time_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Catalog_sale {
    cs_ext_sales_price: f64,
    cs_sold_date_sk: i32,
    cs_item_sk: i32,
    cs_sold_time_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    ss_ext_sales_price: f64,
    ss_sold_date_sk: i32,
    ss_item_sk: i32,
    ss_sold_time_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    ext_price: f64,
    item_sk: i32,
    time_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result1 {
    ext_price: f64,
    item_sk: i32,
    time_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result2 {
    ext_price: f64,
    item_sk: i32,
    time_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    brand_id: i32,
    brand: &'static str,
    t_hour: i32,
    t_minute: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item3 {
    i: Item,
    s: Result2,
    t: Time_dim,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item3>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result4 {
    i_brand_id: i32,
    i_brand: &'static str,
    t_hour: i32,
    t_minute: i32,
    ext_price: f64,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let item = vec![Item { i_item_sk: 1, i_brand_id: 10, i_brand: "BrandA", i_manager_id: 1 }, Item { i_item_sk: 2, i_brand_id: 20, i_brand: "BrandB", i_manager_id: 1 }];
    let time_dim = vec![Time_dim { t_time_sk: 1, t_hour: 8, t_minute: 30, t_meal_time: "breakfast" }, Time_dim { t_time_sk: 2, t_hour: 18, t_minute: 0, t_meal_time: "dinner" }, Time_dim { t_time_sk: 3, t_hour: 12, t_minute: 0, t_meal_time: "lunch" }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_moy: 12, d_year: 1998 }];
    let web_sales = vec![Web_sale { ws_ext_sales_price: 100.0, ws_sold_date_sk: 1, ws_item_sk: 1, ws_sold_time_sk: 1 }];
    let catalog_sales = vec![Catalog_sale { cs_ext_sales_price: 200.0, cs_sold_date_sk: 1, cs_item_sk: 1, cs_sold_time_sk: 2 }];
    let store_sales = vec![Store_sale { ss_ext_sales_price: 150.0, ss_sold_date_sk: 1, ss_item_sk: 2, ss_sold_time_sk: 1 }];
    let month = 12;
    let year = 1998;
    let union_sales = concat({ let mut tmp1 = Vec::new();for ws in &web_sales { for d in &date_dim { if !(d.d_date_sk == ws.ws_sold_date_sk) { continue; } if !(d.d_moy == month && d.d_year == year) { continue; } tmp1.push(Result { ext_price: ws.ws_ext_sales_price, item_sk: ws.ws_item_sk, time_sk: ws.ws_sold_time_sk }); } } tmp1 }, { let mut tmp2 = Vec::new();for cs in &catalog_sales { for d in &date_dim { if !(d.d_date_sk == cs.cs_sold_date_sk) { continue; } if !(d.d_moy == month && d.d_year == year) { continue; } tmp2.push(Result1 { ext_price: cs.cs_ext_sales_price, item_sk: cs.cs_item_sk, time_sk: cs.cs_sold_time_sk }); } } tmp2 }, { let mut tmp3 = Vec::new();for ss in &store_sales { for d in &date_dim { if !(d.d_date_sk == ss.ss_sold_date_sk) { continue; } if !(d.d_moy == month && d.d_year == year) { continue; } tmp3.push(Result2 { ext_price: ss.ss_ext_sales_price, item_sk: ss.ss_item_sk, time_sk: ss.ss_sold_time_sk }); } } tmp3 });
    let result = { let mut tmp4 = std::collections::HashMap::new();for i in &item { for s in &union_sales { if !(s.item_sk == i.i_item_sk) { continue; } for t in &time_dim { if !(t.t_time_sk == s.time_sk) { continue; } if !(i.i_manager_id == 1 && (t.t_meal_time == "breakfast" || t.t_meal_time == "dinner")) { continue; } let key = Key { brand_id: i.i_brand_id, brand: i.i_brand, t_hour: t.t_hour, t_minute: t.t_minute }; tmp4.entry(key).or_insert_with(Vec::new).push(Item3 {i: i.clone(), s: s.clone(), t: t.clone() }); } } } let mut tmp5 = Vec::<Group>::new(); for (k,v) in tmp4 { tmp5.push(Group { key: k, items: v }); } tmp5.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); tmp5.sort_by(|a,b| ((-sum(&{ let mut tmp6 = Vec::new();for x in &a.clone().items { tmp6.push(x.s.ext_price); } tmp6 }), a.key.brand_id)).partial_cmp(&((-sum(&{ let mut tmp6 = Vec::new();for x in &b.clone().items { tmp6.push(x.s.ext_price); } tmp6 }), b.key.brand_id))).unwrap()); let mut result = Vec::new(); for g in tmp5 { result.push(Result4 { i_brand_id: g.key.brand_id, i_brand: g.key.brand, t_hour: g.key.t_hour, t_minute: g.key.t_minute, ext_price: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { tmp7.push(x.s.ext_price); } tmp7 }) }); } result };
    _json(&result);
    assert!(result == vec![Result4 { i_brand_id: 10, i_brand: "BrandA", t_hour: 18, t_minute: 0, ext_price: 200.0 }, Result4 { i_brand_id: 20, i_brand: "BrandB", t_hour: 8, t_minute: 30, ext_price: 150.0 }, Result4 { i_brand_id: 10, i_brand: "BrandA", t_hour: 8, t_minute: 30, ext_price: 100.0 }]);
}
