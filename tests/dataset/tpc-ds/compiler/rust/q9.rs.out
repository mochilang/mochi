fn test_TPCDS_Q9_result() {
    expect(result == vec![std::collections::HashMap::from([("bucket1".to_string(), 7.0), ("bucket2".to_string(), 15.0), ("bucket3".to_string(), 30.0), ("bucket4".to_string(), 35.0), ("bucket5".to_string(), 50.0)])]);
}

fn main() {
    let mut store_sales = vec![std::collections::HashMap::from([("ss_quantity".to_string(), 5), ("ss_ext_discount_amt".to_string(), 5.0), ("ss_net_paid".to_string(), 7.0)]), std::collections::HashMap::from([("ss_quantity".to_string(), 30), ("ss_ext_discount_amt".to_string(), 10.0), ("ss_net_paid".to_string(), 15.0)]), std::collections::HashMap::from([("ss_quantity".to_string(), 50), ("ss_ext_discount_amt".to_string(), 20.0), ("ss_net_paid".to_string(), 30.0)]), std::collections::HashMap::from([("ss_quantity".to_string(), 70), ("ss_ext_discount_amt".to_string(), 25.0), ("ss_net_paid".to_string(), 35.0)]), std::collections::HashMap::from([("ss_quantity".to_string(), 90), ("ss_ext_discount_amt".to_string(), 40.0), ("ss_net_paid".to_string(), 50.0)])];
    let mut reason = vec![std::collections::HashMap::from([("r_reason_sk".to_string(), 1)])];
    let mut bucket1 = if _count(&{
    let mut _res = Vec::new();
    for s in store_sales {
        if !(_map_get(&s, &"ss_quantity".to_string()) >= 1 && _map_get(&s, &"ss_quantity".to_string()) <= 20) { continue; }
        _res.push(s);
    }
    _res
}) > 10 { _avg(&{
    let mut _res = Vec::new();
    for s in store_sales {
        if !(_map_get(&s, &"ss_quantity".to_string()) >= 1 && _map_get(&s, &"ss_quantity".to_string()) <= 20) { continue; }
        _res.push(_map_get(&s, &"ss_ext_discount_amt".to_string()));
    }
    _res
}) } else { _avg(&{
    let mut _res = Vec::new();
    for s in store_sales {
        if !(_map_get(&s, &"ss_quantity".to_string()) >= 1 && _map_get(&s, &"ss_quantity".to_string()) <= 20) { continue; }
        _res.push(_map_get(&s, &"ss_net_paid".to_string()));
    }
    _res
}) };
    let mut bucket2 = if _count(&{
    let mut _res = Vec::new();
    for s in store_sales {
        if !(_map_get(&s, &"ss_quantity".to_string()) >= 21 && _map_get(&s, &"ss_quantity".to_string()) <= 40) { continue; }
        _res.push(s);
    }
    _res
}) > 20 { _avg(&{
    let mut _res = Vec::new();
    for s in store_sales {
        if !(_map_get(&s, &"ss_quantity".to_string()) >= 21 && _map_get(&s, &"ss_quantity".to_string()) <= 40) { continue; }
        _res.push(_map_get(&s, &"ss_ext_discount_amt".to_string()));
    }
    _res
}) } else { _avg(&{
    let mut _res = Vec::new();
    for s in store_sales {
        if !(_map_get(&s, &"ss_quantity".to_string()) >= 21 && _map_get(&s, &"ss_quantity".to_string()) <= 40) { continue; }
        _res.push(_map_get(&s, &"ss_net_paid".to_string()));
    }
    _res
}) };
    let mut bucket3 = if _count(&{
    let mut _res = Vec::new();
    for s in store_sales {
        if !(_map_get(&s, &"ss_quantity".to_string()) >= 41 && _map_get(&s, &"ss_quantity".to_string()) <= 60) { continue; }
        _res.push(s);
    }
    _res
}) > 30 { _avg(&{
    let mut _res = Vec::new();
    for s in store_sales {
        if !(_map_get(&s, &"ss_quantity".to_string()) >= 41 && _map_get(&s, &"ss_quantity".to_string()) <= 60) { continue; }
        _res.push(_map_get(&s, &"ss_ext_discount_amt".to_string()));
    }
    _res
}) } else { _avg(&{
    let mut _res = Vec::new();
    for s in store_sales {
        if !(_map_get(&s, &"ss_quantity".to_string()) >= 41 && _map_get(&s, &"ss_quantity".to_string()) <= 60) { continue; }
        _res.push(_map_get(&s, &"ss_net_paid".to_string()));
    }
    _res
}) };
    let mut bucket4 = if _count(&{
    let mut _res = Vec::new();
    for s in store_sales {
        if !(_map_get(&s, &"ss_quantity".to_string()) >= 61 && _map_get(&s, &"ss_quantity".to_string()) <= 80) { continue; }
        _res.push(s);
    }
    _res
}) > 40 { _avg(&{
    let mut _res = Vec::new();
    for s in store_sales {
        if !(_map_get(&s, &"ss_quantity".to_string()) >= 61 && _map_get(&s, &"ss_quantity".to_string()) <= 80) { continue; }
        _res.push(_map_get(&s, &"ss_ext_discount_amt".to_string()));
    }
    _res
}) } else { _avg(&{
    let mut _res = Vec::new();
    for s in store_sales {
        if !(_map_get(&s, &"ss_quantity".to_string()) >= 61 && _map_get(&s, &"ss_quantity".to_string()) <= 80) { continue; }
        _res.push(_map_get(&s, &"ss_net_paid".to_string()));
    }
    _res
}) };
    let mut bucket5 = if _count(&{
    let mut _res = Vec::new();
    for s in store_sales {
        if !(_map_get(&s, &"ss_quantity".to_string()) >= 81 && _map_get(&s, &"ss_quantity".to_string()) <= 100) { continue; }
        _res.push(s);
    }
    _res
}) > 50 { _avg(&{
    let mut _res = Vec::new();
    for s in store_sales {
        if !(_map_get(&s, &"ss_quantity".to_string()) >= 81 && _map_get(&s, &"ss_quantity".to_string()) <= 100) { continue; }
        _res.push(_map_get(&s, &"ss_ext_discount_amt".to_string()));
    }
    _res
}) } else { _avg(&{
    let mut _res = Vec::new();
    for s in store_sales {
        if !(_map_get(&s, &"ss_quantity".to_string()) >= 81 && _map_get(&s, &"ss_quantity".to_string()) <= 100) { continue; }
        _res.push(_map_get(&s, &"ss_net_paid".to_string()));
    }
    _res
}) };
    let mut result = {
    let mut _res = Vec::new();
    for r in reason {
        if !(_map_get(&r, &"r_reason_sk".to_string()) == 1) { continue; }
        _res.push(std::collections::HashMap::from([("bucket1".to_string(), bucket1), ("bucket2".to_string(), bucket2), ("bucket3".to_string(), bucket3), ("bucket4".to_string(), bucket4), ("bucket5".to_string(), bucket5)]));
    }
    _res
};
    json(result);
    test_TPCDS_Q9_result();
}

fn _avg<T: Into<f64> + Copy>(v: &[T]) -> f64 {
    if v.is_empty() { return 0.0 }
    let mut sum = 0.0;
    for &it in v { sum += Into::<f64>::into(it); }
    sum / v.len() as f64
}
fn _count<T>(v: &[T]) -> i32 {
    v.len() as i32
}
fn _map_get<K: std::cmp::Eq + std::hash::Hash, V: Clone>(m: &std::collections::HashMap<K, V>, k: &K) -> V {
    m.get(k).unwrap().clone()
}
fn expect(cond: bool) {
    if !cond { panic!("expect failed"); }
}
