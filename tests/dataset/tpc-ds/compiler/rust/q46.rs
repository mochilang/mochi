// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:09:27Z
#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    ss_ticket_number: i32,
    ss_customer_sk: i32,
    ss_addr_sk: i32,
    ss_hdemo_sk: i32,
    ss_store_sk: i32,
    ss_sold_date_sk: i32,
    ss_coupon_amt: f64,
    ss_net_profit: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_dow: i32,
    d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store {
    s_store_sk: i32,
    s_city: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Household_demographic {
    hd_demo_sk: i32,
    hd_dep_count: i32,
    hd_vehicle_count: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer_addres {
    ca_address_sk: i32,
    ca_city: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer {
    c_customer_sk: i32,
    c_last_name: &'static str,
    c_first_name: &'static str,
    c_current_addr_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    ss_ticket_number: i32,
    ss_customer_sk: i32,
    ca_city: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item {
    ss: Store_sale,
    d: Date_dim,
    s: Store,
    hd: Household_demographic,
    ca: Customer_addres,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    ss_ticket_number: i32,
    ss_customer_sk: i32,
    bought_city: &'static str,
    amt: f64,
    profit: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result1 {
    c_last_name: &'static str,
    c_first_name: &'static str,
    ca_city: &'static str,
    bought_city: &'static str,
    ss_ticket_number: i32,
    amt: f64,
    profit: f64,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let store_sales = vec![Store_sale { ss_ticket_number: 1, ss_customer_sk: 1, ss_addr_sk: 1, ss_hdemo_sk: 1, ss_store_sk: 1, ss_sold_date_sk: 1, ss_coupon_amt: 5.0, ss_net_profit: 20.0 }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_dow: 6, d_year: 2020 }];
    let store = vec![Store { s_store_sk: 1, s_city: "CityA" }];
    let household_demographics = vec![Household_demographic { hd_demo_sk: 1, hd_dep_count: 2, hd_vehicle_count: 0 }];
    let customer_address = vec![Customer_addres { ca_address_sk: 1, ca_city: "Portland" }, Customer_addres { ca_address_sk: 2, ca_city: "Seattle" }];
    let customer = vec![Customer { c_customer_sk: 1, c_last_name: "Doe", c_first_name: "John", c_current_addr_sk: 2 }];
    let depcnt = 2;
    let vehcnt = 0;
    let year = 2020;
    let cities = vec!["CityA"];
    let dn = { let mut tmp1 = std::collections::HashMap::new();for ss in &store_sales { for d in &date_dim { if !(ss.ss_sold_date_sk == d.d_date_sk) { continue; } for s in &store { if !(ss.ss_store_sk == s.s_store_sk) { continue; } for hd in &household_demographics { if !(ss.ss_hdemo_sk == hd.hd_demo_sk) { continue; } for ca in &customer_address { if !(ss.ss_addr_sk == ca.ca_address_sk) { continue; } if !(cities.contains(&vec![6, 0].contains(&(hd.hd_dep_count == depcnt || hd.hd_vehicle_count == vehcnt) && d.d_dow) && d.d_year == year && s.s_city)) { continue; } let key = Key { ss_ticket_number: ss.ss_ticket_number, ss_customer_sk: ss.ss_customer_sk, ca_city: ca.ca_city }; tmp1.entry(key).or_insert_with(Vec::new).push(Item {ss: ss.clone(), d: d.clone(), s: s.clone(), hd: hd.clone(), ca: ca.clone() }); } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { ss_ticket_number: g.key.ss_ticket_number, ss_customer_sk: g.key.ss_customer_sk, bought_city: g.key.ca_city, amt: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.ss.ss_coupon_amt); } tmp3 }), profit: sum(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.ss.ss_net_profit); } tmp4 }) }); } result };
    let base = { let mut tmp5 = Vec::new();for dnrec in &dn { for c in &customer { if !(dnrec.ss_customer_sk == c.c_customer_sk) { continue; } for current_addr in &customer_address { if !(c.c_current_addr_sk == current_addr.ca_address_sk) { continue; } if !(current_addr.ca_city != dnrec.bought_city) { continue; } let tmp6 = Result1 { c_last_name: c.c_last_name, c_first_name: c.c_first_name, ca_city: current_addr.ca_city, bought_city: dnrec.bought_city, ss_ticket_number: dnrec.ss_ticket_number, amt: dnrec.amt, profit: dnrec.profit }; let tmp7 = (c.c_last_name, c.c_first_name, current_addr.ca_city, dnrec.bought_city, dnrec.ss_ticket_number); tmp5.push((tmp7, tmp6)); } } } tmp5.sort_by(|a,b| a.0.partial_cmp(&b.0).unwrap()); let mut tmp8 = Vec::new(); for p in tmp5 { tmp8.push(p.1); } tmp8 };
    let result = base;
    _json(&result);
    assert!(result == vec![Result1 { c_last_name: "Doe", c_first_name: "John", ca_city: "Seattle", bought_city: "Portland", ss_ticket_number: 1, amt: 5.0, profit: 20.0 }]);
}
