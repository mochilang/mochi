// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:48Z
#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    ss_item_sk: i32,
    ss_store_sk: i32,
    ss_net_profit: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item {
    i_item_sk: i32,
    i_product_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: i32,
    items: Vec<Store_sale>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    item_sk: i32,
    avg_profit: f64,
}

fn avg<T>(v: &[T]) -> f64 where T: Into<f64> + Copy {
    let sum: f64 = v.iter().map(|&x| x.into()).sum();
    sum / v.len() as f64
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let store_sales = vec![Store_sale { ss_item_sk: 1, ss_store_sk: 1, ss_net_profit: 5.0 }, Store_sale { ss_item_sk: 1, ss_store_sk: 1, ss_net_profit: 5.0 }, Store_sale { ss_item_sk: 2, ss_store_sk: 1, ss_net_profit: -1.0 }];
    let item = vec![Item { i_item_sk: 1, i_product_name: "ItemA" }, Item { i_item_sk: 2, i_product_name: "ItemB" }];
    let grouped_base = ({ let mut tmp1 = std::collections::HashMap::new();for ss in &store_sales { let key = ss.ss_item_sk; tmp1.entry(key).or_insert_with(Vec::new).push(ss.clone()); } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { item_sk: g.key, avg_profit: avg(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.ss_net_profit); } tmp3 }) }); } result });
    let grouped = grouped_base;
    let best = first({ let mut tmp4 = Vec::new();for x in &grouped { let tmp5 = x.clone(); let tmp6 = -x.avg_profit; tmp4.push((tmp6, tmp5)); } tmp4.sort_by(|a,b| a.0.partial_cmp(&b.0).unwrap()); let mut tmp7 = Vec::new(); for p in tmp4 { tmp7.push(p.1); } tmp7 });
    let worst = first({ let mut tmp8 = Vec::new();for x in &grouped { let tmp9 = x.clone(); let tmp10 = x.avg_profit; tmp8.push((tmp10, tmp9)); } tmp8.sort_by(|a,b| a.0.partial_cmp(&b.0).unwrap()); let mut tmp11 = Vec::new(); for p in tmp8 { tmp11.push(p.1); } tmp11 });
    let best_name = first({ let mut tmp12 = Vec::new();for i in &item { if !(i.i_item_sk == best.item_sk) { continue; } tmp12.push(i.i_product_name); } tmp12 });
    let worst_name = first({ let mut tmp13 = Vec::new();for i in &item { if !(i.i_item_sk == worst.item_sk) { continue; } tmp13.push(i.i_product_name); } tmp13 });
    let result = { let mut m = std::collections::BTreeMap::new(); m.insert("best_performing", best_name); m.insert("worst_performing", worst_name); m };
    _json(&result.clone());
    assert!(result.clone() == { let mut m = std::collections::BTreeMap::new(); m.insert("best_performing", "ItemA"); m.insert("worst_performing", "ItemB"); m });
}
