// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:40Z
#[derive(Default, Debug, Clone, PartialEq)]
struct CatalogSale {
        cs_bill_customer_sk: i32,
        cs_sales_price: f64,
        cs_sold_date_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct Customer {
        c_customer_sk: i32,
        c_current_addr_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct CustomerAddress {
        ca_address_sk: i32,
        ca_zip: &'static str,
        ca_state: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct DateDim {
        d_date_sk: i32,
        d_qoy: i32,
        d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Catalog_sale {
    cs_bill_customer_sk: i32,
    cs_sales_price: f64,
    cs_sold_date_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer1 {
    c_customer_sk: i32,
    c_current_addr_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer_addres {
    ca_address_sk: i32,
    ca_zip: &'static str,
    ca_state: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_qoy: i32,
    d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    zip: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item {
    cs: Catalog_sale,
    c: Customer1,
    ca: Customer_addres,
    d: Date_dim,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    ca_zip: &'static str,
    sum_sales: i32,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let catalog_sales = vec![Catalog_sale { cs_bill_customer_sk: 1, cs_sales_price: 600.0, cs_sold_date_sk: 1 }];
    let customer = vec![Customer1 { c_customer_sk: 1, c_current_addr_sk: 1 }];
    let customer_address = vec![Customer_addres { ca_address_sk: 1, ca_zip: "85669", ca_state: "CA" }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_qoy: 1, d_year: 2000 }];
    let filtered = { let mut tmp1 = std::collections::HashMap::new();for cs in &catalog_sales { for c in &customer { if !(cs.cs_bill_customer_sk == c.c_customer_sk) { continue; } for ca in &customer_address { if !(c.c_current_addr_sk == ca.ca_address_sk) { continue; } for d in &date_dim { if !(cs.cs_sold_date_sk == d.d_date_sk) { continue; } if !((vec!["CA", "WA", "GA"].contains(&vec!["85669", "86197", "88274", "83405", "86475", "85392", "85460", "80348", "81792"].contains(&substr(ca.ca_zip, 0, 5)) || ca.ca_state) || cs.cs_sales_price > 500 as f64) && d.d_qoy == 1 && d.d_year == 2000) { continue; } let key = Key { zip: ca.ca_zip }; tmp1.entry(key).or_insert_with(Vec::new).push(Item {cs: cs.clone(), c: c.clone(), ca: ca.clone(), d: d.clone() }); } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); tmp2.sort_by(|a,b| (a.key.zip).partial_cmp(&(b.key.zip)).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { ca_zip: g.key.zip, sum_sales: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.cs_sales_price); } tmp3 }) }); } result };
    _json(&filtered);
    assert!(filtered == vec![Result { ca_zip: "85669", sum_sales: 600.0 }]);
}
