// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:09:20Z
#[derive(Default, Debug, Clone, PartialEq)]
struct CatalogSale {
        cs_item_sk: i32,
        cs_sold_date_sk: i32,
        cs_ext_sales_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq)]
struct Item {
        i_item_sk: i32,
        i_item_id: &'static str,
        i_item_desc: &'static str,
        i_category: &'static str,
        i_class: &'static str,
        i_current_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct DateDim {
        d_date_sk: i32,
        d_date: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Catalog_sale {
    cs_item_sk: i32,
    cs_sold_date_sk: i32,
    cs_ext_sales_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item1 {
    i_item_sk: i32,
    i_item_id: &'static str,
    i_item_desc: &'static str,
    i_category: &'static str,
    i_class: &'static str,
    i_current_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_date: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Key {
    id: &'static str,
    desc: &'static str,
    cat: &'static str,
    class: &'static str,
    price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item2 {
    cs: Catalog_sale,
    i: Item1,
    d: Date_dim,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item2>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    i_item_id: &'static str,
    i_item_desc: &'static str,
    i_category: &'static str,
    i_class: &'static str,
    i_current_price: f64,
    itemrevenue: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group3 {
    key: &'static str,
    items: Vec<Result>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result4 {
    class: &'static str,
    total: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result5 {
    i_item_id: &'static str,
    i_item_desc: &'static str,
    i_category: &'static str,
    i_class: &'static str,
    i_current_price: f64,
    itemrevenue: i32,
    revenueratio: f64,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let catalog_sales = vec![Catalog_sale { cs_item_sk: 1, cs_sold_date_sk: 1, cs_ext_sales_price: 100.0 }, Catalog_sale { cs_item_sk: 1, cs_sold_date_sk: 1, cs_ext_sales_price: 200.0 }, Catalog_sale { cs_item_sk: 2, cs_sold_date_sk: 1, cs_ext_sales_price: 150.0 }, Catalog_sale { cs_item_sk: 1, cs_sold_date_sk: 2, cs_ext_sales_price: 300.0 }, Catalog_sale { cs_item_sk: 2, cs_sold_date_sk: 2, cs_ext_sales_price: 150.0 }, Catalog_sale { cs_item_sk: 3, cs_sold_date_sk: 1, cs_ext_sales_price: 50.0 }];
    let item = vec![Item1 { i_item_sk: 1, i_item_id: "ITEM1", i_item_desc: "Item One", i_category: "A", i_class: "X", i_current_price: 10.0 }, Item1 { i_item_sk: 2, i_item_id: "ITEM2", i_item_desc: "Item Two", i_category: "A", i_class: "X", i_current_price: 20.0 }, Item1 { i_item_sk: 3, i_item_id: "ITEM3", i_item_desc: "Item Three", i_category: "D", i_class: "Y", i_current_price: 15.0 }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_date: "2000-02-10" }, Date_dim { d_date_sk: 2, d_date: "2000-02-20" }];
    let filtered = { let mut tmp2 = Vec::<Group>::new();for cs in &catalog_sales { for i in &item { if !(cs.cs_item_sk == i.i_item_sk) { continue; } for d in &date_dim { if !(cs.cs_sold_date_sk == d.d_date_sk) { continue; } if !(vec!["A", "B", "C"].contains(&i.i_category) && d.d_date >= "2000-02-01" && d.d_date <= "2000-03-02") { continue; } let key = Key { id: i.i_item_id, desc: i.i_item_desc, cat: i.i_category, class: i.i_class, price: i.i_current_price }; if let Some(tmp3) = tmp2.iter_mut().find(|g| g.key == key) { tmp3.items.push(Item2 {cs: cs.clone(), i: i.clone(), d: d.clone() }); } else { tmp2.push(Group { key: key, items: vec![Item2 {cs: cs.clone(), i: i.clone(), d: d.clone() }] }); } } } } let mut result = Vec::new(); for g in tmp2 { result.push(Result { i_item_id: g.key.id, i_item_desc: g.key.desc, i_category: g.key.cat, i_class: g.key.class, i_current_price: g.key.price, itemrevenue: sum(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.cs_ext_sales_price); } tmp4 }) }); } result };
    let class_totals = { let mut tmp5 = std::collections::HashMap::new();for f in &filtered { let key = f.i_class; tmp5.entry(key).or_insert_with(Vec::new).push(f.clone()); } let mut tmp6 = Vec::<Group3>::new(); for (k,v) in tmp5 { tmp6.push(Group3 { key: k, items: v }); } tmp6.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp6 { result.push(Result4 { class: g.key, total: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { tmp7.push(x.itemrevenue); } tmp7 }) }); } result };
    let result = { let mut tmp8 = Vec::new();for f in &filtered { for t in &class_totals { if !(f.i_class == t.class) { continue; } let tmp9 = Result5 { i_item_id: f.i_item_id, i_item_desc: f.i_item_desc, i_category: f.i_category, i_class: f.i_class, i_current_price: f.i_current_price, itemrevenue: f.itemrevenue, revenueratio: ((f.itemrevenue as f64) * 100.0) / t.total as f64 }; let tmp10 = (f.i_category, f.i_class, f.i_item_id, f.i_item_desc); tmp8.push((tmp10, tmp9)); } } tmp8.sort_by(|a,b| a.0.partial_cmp(&b.0).unwrap()); let mut tmp11 = Vec::new(); for p in tmp8 { tmp11.push(p.1); } tmp11 };
    _json(&result);
    assert!(result == vec![Result5 { i_item_id: "ITEM1", i_item_desc: "Item One", i_category: "A", i_class: "X", i_current_price: 10.0, itemrevenue: 600.0, revenueratio: 66.66666666666667 }, Result5 { i_item_id: "ITEM2", i_item_desc: "Item Two", i_category: "A", i_class: "X", i_current_price: 20.0, itemrevenue: 300.0, revenueratio: 33.333333333333336 }]);
}
