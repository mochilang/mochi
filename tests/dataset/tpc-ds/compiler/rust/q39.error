rustc: exit status 1
warning: type `Date_dim` should have an upper camel case name
  --> /tmp/q39.rs:22:8
   |
22 | struct Date_dim {
   |        ^^^^^^^^ help: convert the identifier to upper camel case: `DateDim`
   |
   = note: `#[warn(non_camel_case_types)]` on by default

error[E0609]: no field `inv_quantity_on_hand` on type `&Item1`
  --> /tmp/q39.rs:94:869
   |
94 | ...ec::new();for x in &g.clone().items { tmp3.push(x.inv_quantity_on_hand); } tmp3 }) }); } result };
   |                                                      ^^^^^^^^^^^^^^^^^^^^ unknown field
   |
help: one of the expressions' fields has a field of the same name
   |
94 |     let monthly = { let mut tmp1 = std::collections::HashMap::new();for inv in &inventory { for d in &date_dim { if !(inv.inv_date_sk == d.d_date_sk) { continue; } for i in &item { if !(inv.inv_item_sk == i.i_item_sk) { continue; } for w in &warehouse { if !(inv.inv_warehouse_sk == w.w_warehouse_sk) { continue; } if !(d.d_year == 2000) { continue; } let key = Key { w: w.w_warehouse_sk, i: i.i_item_sk, month: d.d_moy }; tmp1.entry(key).or_insert_with(Vec::new).push(Item1 {inv: inv.clone(), d: d.clone(), i: i.clone(), w: w.clone() }); } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { w: g.key.w, i: g.key.i, qty: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.inv.inv_quantity_on_hand); } tmp3 }) }); } result };
   |

error[E0308]: mismatched types
  --> /tmp/q39.rs:95:159
   |
95 | ...::collections::BTreeMap::new(); m };
   |                                    ^ expected `HashMap<&str, HashMap<&str, i32>>`, found `BTreeMap<_, _>`
   |
   = note: expected struct `HashMap<&'static str, HashMap<&'static str, i32>>`
              found struct `BTreeMap<_, _>`

error[E0609]: no field `w` on type `BTreeMap<&str, _>`
  --> /tmp/q39.rs:97:84
   |
97 |         let key = { let mut m = std::collections::BTreeMap::new(); m.insert("w", m.w); m.insert("i", m.i); m }.to_string();
   |                                                                                    ^ unknown field

error[E0609]: no field `w` on type `BTreeMap<&str, _>`
   --> /tmp/q39.rs:102:98
    |
102 | ...   grouped.insert(key, { let mut m = std::collections::BTreeMap::new(); m.insert("w", m.w); m.insert("i", m.i); m.insert("qtys", vec![...
    |                                                                                            ^ unknown field

error: aborting due to 4 previous errors; 1 warning emitted

Some errors have detailed explanations: E0308, E0609.
For more information about an error, try `rustc --explain E0308`.
