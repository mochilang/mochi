fn test_TPCDS_Q1_empty() {
    expect(result.len() as i64 == 0);
}

fn main() {
    let mut store_returns = vec![];
    let mut date_dim = vec![];
    let mut store = vec![];
    let mut customer = vec![];
    let mut customer_total_return = {
    #[derive(Clone, Debug)]
    struct Group { key: std::collections::HashMap<String, std::boxed::Box<dyn std::any::Any>>, items: Vec<std::boxed::Box<dyn std::any::Any>> }
    let mut groups: std::collections::HashMap<String, Group> = std::collections::HashMap::new();
    let mut order: Vec<String> = Vec::new();
    for sr in store_returns.clone() {
        for d in date_dim.clone() {
            if !(_map_get(&sr, &"sr_returned_date_sk".to_string()) == _map_get(&d, &"d_date_sk".to_string())) { continue; }
            if !(_map_get(&d, &"d_year".to_string()) == 1998) { continue; }
            let key: std::collections::HashMap<String, std::boxed::Box<dyn std::any::Any>> = std::collections::HashMap::from([("customer_sk".to_string(), _map_get(&sr, &"sr_customer_sk".to_string())), ("store_sk".to_string(), _map_get(&sr, &"sr_store_sk".to_string()))]);
            let ks = format!("{:?}", key.clone());
            if !groups.contains_key(&ks) {
                groups.insert(ks.clone(), Group{ key: key.clone(), items: Vec::new() });
                order.push(ks.clone());
            }
            groups.get_mut(&ks).unwrap().items.push(sr.clone());
        }
    }
    let mut _res: Vec<std::collections::HashMap<String, std::boxed::Box<dyn std::any::Any>>> = Vec::new();
    for ks in order {
        let g = groups.get(&ks).unwrap().clone();
        _res.push(std::collections::HashMap::from([("ctr_customer_sk".to_string(), _map_get(&_map_get(&g, &"key".to_string()), &"customer_sk".to_string())), ("ctr_store_sk".to_string(), _map_get(&_map_get(&g, &"key".to_string()), &"store_sk".to_string())), ("ctr_total_return".to_string(), _sum(&{
    let mut _res = Vec::new();
    for x in g {
        _res.push(_map_get(&x, &"sr_return_amt".to_string()));
    }
    _res
}))]));
    }
    _res
}
;
    let mut result = {
    let mut _pairs = Vec::new();
    for ctr1 in customer_total_return.clone() {
        for s in store.clone() {
            if !(_map_get(&ctr1, &"ctr_store_sk".to_string()) == _map_get(&s, &"s_store_sk".to_string())) { continue; }
            for c in customer.clone() {
                if !(_map_get(&ctr1, &"ctr_customer_sk".to_string()) == _map_get(&c, &"c_customer_sk".to_string())) { continue; }
                if _map_get(&ctr1, &"ctr_store_sk".to_string()) == _map_get(&s, &"s_store_sk".to_string()) && _map_get(&ctr1, &"ctr_customer_sk".to_string()) == _map_get(&c, &"c_customer_sk".to_string()) && _map_get(&ctr1, &"ctr_total_return".to_string()) > _avg(&{
    let mut _res = Vec::new();
    for ctr2 in customer_total_return {
        if _map_get(&ctr1, &"ctr_store_sk".to_string()) == _map_get(&ctr2, &"ctr_store_sk".to_string()) {
            _res.push(_map_get(&ctr2, &"ctr_total_return".to_string()));
        }
    }
    _res
}) * 1.2 && _map_get(&s, &"s_state".to_string()) == "TN" {
                    _pairs.push((_map_get(&c, &"c_customer_id".to_string()), std::collections::HashMap::from([("c_customer_id".to_string(), _map_get(&c, &"c_customer_id".to_string()))])));
                }
            }
        }
    }
    _pairs.sort_by(|a, b| a.0.partial_cmp(&b.0).unwrap());
    let mut _res = Vec::new();
    for p in _pairs { _res.push(p.1); }
    _res
};
    json(result);
    test_TPCDS_Q1_empty();
}

fn _avg<T: Into<f64> + Copy>(v: &[T]) -> f64 {
    if v.is_empty() { return 0.0 }
    let mut sum = 0.0;
    for &it in v { sum += Into::<f64>::into(it); }
    sum / v.len() as f64
}
fn _map_get<K: std::cmp::Eq + std::hash::Hash, V: Clone>(m: &std::collections::HashMap<K, V>, k: &K) -> V {
    m.get(k).unwrap().clone()
}
fn _sum<T: Into<f64> + Copy>(v: &[T]) -> f64 {
    if v.is_empty() { return 0.0 }
    let mut sum = 0.0;
    for &it in v { sum += Into::<f64>::into(it); }
    sum
}
fn expect(cond: bool) {
    if !cond { panic!("expect failed"); }
}
