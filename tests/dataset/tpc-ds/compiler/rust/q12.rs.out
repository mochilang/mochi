#[derive(Clone, Debug, Default)]
struct WebSale {
    ws_item_sk: i64,
    ws_sold_date_sk: i64,
    ws_ext_sales_price: f64,
}

#[derive(Clone, Debug, Default)]
struct Item {
    i_item_sk: i64,
    i_item_id: String,
    i_item_desc: String,
    i_category: String,
    i_class: String,
    i_current_price: f64,
}

#[derive(Clone, Debug, Default)]
struct DateDim {
    d_date_sk: i64,
    d_date: String,
}

fn test_TPCDS_Q12_revenue_ratio() {
    expect(result == vec![std::collections::HashMap::from([("i_item_id".to_string(), "ITEM1"), ("i_item_desc".to_string(), "Item One"), ("i_category".to_string(), "A"), ("i_class".to_string(), "C1"), ("i_current_price".to_string(), 10.0), ("itemrevenue".to_string(), 200.0), ("revenueratio".to_string(), 50.0)]), std::collections::HashMap::from([("i_item_id".to_string(), "ITEM2"), ("i_item_desc".to_string(), "Item Two"), ("i_category".to_string(), "A"), ("i_class".to_string(), "C1"), ("i_current_price".to_string(), 20.0), ("itemrevenue".to_string(), 200.0), ("revenueratio".to_string(), 50.0)])]);
}

fn main() {
    let mut web_sales = vec![std::collections::HashMap::from([("ws_item_sk".to_string(), 1), ("ws_sold_date_sk".to_string(), 1), ("ws_ext_sales_price".to_string(), 100.0)]), std::collections::HashMap::from([("ws_item_sk".to_string(), 1), ("ws_sold_date_sk".to_string(), 2), ("ws_ext_sales_price".to_string(), 100.0)]), std::collections::HashMap::from([("ws_item_sk".to_string(), 2), ("ws_sold_date_sk".to_string(), 2), ("ws_ext_sales_price".to_string(), 200.0)]), std::collections::HashMap::from([("ws_item_sk".to_string(), 3), ("ws_sold_date_sk".to_string(), 3), ("ws_ext_sales_price".to_string(), 50.0)])];
    let mut item = vec![std::collections::HashMap::from([("i_item_sk".to_string(), 1), ("i_item_id".to_string(), "ITEM1"), ("i_item_desc".to_string(), "Item One"), ("i_category".to_string(), "A"), ("i_class".to_string(), "C1"), ("i_current_price".to_string(), 10.0)]), std::collections::HashMap::from([("i_item_sk".to_string(), 2), ("i_item_id".to_string(), "ITEM2"), ("i_item_desc".to_string(), "Item Two"), ("i_category".to_string(), "A"), ("i_class".to_string(), "C1"), ("i_current_price".to_string(), 20.0)]), std::collections::HashMap::from([("i_item_sk".to_string(), 3), ("i_item_id".to_string(), "ITEM3"), ("i_item_desc".to_string(), "Item Three"), ("i_category".to_string(), "B"), ("i_class".to_string(), "C2"), ("i_current_price".to_string(), 30.0)])];
    let mut date_dim = vec![std::collections::HashMap::from([("d_date_sk".to_string(), 1), ("d_date".to_string(), "2001-01-20")]), std::collections::HashMap::from([("d_date_sk".to_string(), 2), ("d_date".to_string(), "2001-02-05")]), std::collections::HashMap::from([("d_date_sk".to_string(), 3), ("d_date".to_string(), "2001-03-05")])];
    let mut filtered = {
    #[derive(Clone, Debug)]
    struct Group { key: std::collections::HashMap<String, std::boxed::Box<dyn std::any::Any>>, items: Vec<std::collections::HashMap<String, std::boxed::Box<dyn std::any::Any>>> }
    let mut groups: std::collections::HashMap<String, Group> = std::collections::HashMap::new();
    let mut order: Vec<String> = Vec::new();
    for ws in web_sales.clone() {
        for i in item.clone() {
            if !(_map_get(&ws, &"ws_item_sk".to_string()) == _map_get(&i, &"i_item_sk".to_string())) { continue; }
            for d in date_dim.clone() {
                if !(_map_get(&ws, &"ws_sold_date_sk".to_string()) == _map_get(&d, &"d_date_sk".to_string())) { continue; }
                if !(vec!["A".to_string(), "B".to_string(), "C".to_string()].contains(&_map_get(&i, &"i_category".to_string())) && _map_get(&d, &"d_date".to_string()) >= "2001-01-15" && _map_get(&d, &"d_date".to_string()) <= "2001-02-14") { continue; }
                let key: std::collections::HashMap<String, std::boxed::Box<dyn std::any::Any>> = std::collections::HashMap::from([("id".to_string(), _map_get(&i, &"i_item_id".to_string())), ("desc".to_string(), _map_get(&i, &"i_item_desc".to_string())), ("cat".to_string(), _map_get(&i, &"i_category".to_string())), ("class".to_string(), _map_get(&i, &"i_class".to_string())), ("price".to_string(), _map_get(&i, &"i_current_price".to_string()))]);
                let ks = format!("{:?}", key.clone());
                if !groups.contains_key(&ks) {
                    groups.insert(ks.clone(), Group{ key: key.clone(), items: Vec::new() });
                    order.push(ks.clone());
                }
                groups.get_mut(&ks).unwrap().items.push(ws.clone());
            }
        }
    }
    let mut _res: Vec<std::collections::HashMap<String, std::boxed::Box<dyn std::any::Any>>> = Vec::new();
    for ks in order {
        let g = groups.get(&ks).unwrap().clone();
        _res.push(std::collections::HashMap::from([("i_item_id".to_string(), _map_get(&_map_get(&g, &"key".to_string()), &"id".to_string())), ("i_item_desc".to_string(), _map_get(&_map_get(&g, &"key".to_string()), &"desc".to_string())), ("i_category".to_string(), _map_get(&_map_get(&g, &"key".to_string()), &"cat".to_string())), ("i_class".to_string(), _map_get(&_map_get(&g, &"key".to_string()), &"class".to_string())), ("i_current_price".to_string(), _map_get(&_map_get(&g, &"key".to_string()), &"price".to_string())), ("itemrevenue".to_string(), _sum(&{
    let mut _res = Vec::new();
    for x in g {
        _res.push(_map_get(&x, &"ws_ext_sales_price".to_string()));
    }
    _res
}))]));
    }
    _res
}
;
    let mut class_totals = {
    #[derive(Clone, Debug)]
    struct Group { key: std::boxed::Box<dyn std::any::Any>, items: Vec<std::collections::HashMap<String, std::boxed::Box<dyn std::any::Any>>> }
    let mut groups: std::collections::HashMap<String, Group> = std::collections::HashMap::new();
    let mut order: Vec<String> = Vec::new();
    for f in filtered.clone() {
        let key: std::boxed::Box<dyn std::any::Any> = _map_get(&f, &"i_class".to_string());
        let ks = format!("{:?}", key.clone());
        if !groups.contains_key(&ks) {
            groups.insert(ks.clone(), Group{ key: key.clone(), items: Vec::new() });
            order.push(ks.clone());
        }
        groups.get_mut(&ks).unwrap().items.push(f.clone());
    }
    let mut _res: Vec<std::collections::HashMap<String, std::boxed::Box<dyn std::any::Any>>> = Vec::new();
    for ks in order {
        let g = groups.get(&ks).unwrap().clone();
        _res.push(std::collections::HashMap::from([("class".to_string(), _map_get(&g, &"key".to_string())), ("total".to_string(), _sum(&{
    let mut _res = Vec::new();
    for x in g {
        _res.push(_map_get(&x, &"itemrevenue".to_string()));
    }
    _res
}))]));
    }
    _res
}
;
    let mut result = {
    let mut _pairs = Vec::new();
    for f in filtered.clone() {
        for t in class_totals.clone() {
            if !(_map_get(&f, &"i_class".to_string()) == _map_get(&t, &"class".to_string())) { continue; }
            if _map_get(&f, &"i_class".to_string()) == _map_get(&t, &"class".to_string()) {
                _pairs.push((vec![_map_get(&f, &"i_category".to_string()), _map_get(&f, &"i_class".to_string()), _map_get(&f, &"i_item_id".to_string()), _map_get(&f, &"i_item_desc".to_string())], std::collections::HashMap::from([("i_item_id".to_string(), _map_get(&f, &"i_item_id".to_string())), ("i_item_desc".to_string(), _map_get(&f, &"i_item_desc".to_string())), ("i_category".to_string(), _map_get(&f, &"i_category".to_string())), ("i_class".to_string(), _map_get(&f, &"i_class".to_string())), ("i_current_price".to_string(), _map_get(&f, &"i_current_price".to_string())), ("itemrevenue".to_string(), _map_get(&f, &"itemrevenue".to_string())), ("revenueratio".to_string(), (_map_get(&f, &"itemrevenue".to_string()) * 100.0) / _map_get(&t, &"total".to_string()))])));
            }
        }
    }
    _pairs.sort_by(|a, b| a.0.partial_cmp(&b.0).unwrap());
    let mut _res = Vec::new();
    for p in _pairs { _res.push(p.1); }
    _res
};
    json(result);
    test_TPCDS_Q12_revenue_ratio();
}

fn _map_get<K: std::cmp::Eq + std::hash::Hash, V: Clone>(m: &std::collections::HashMap<K, V>, k: &K) -> V {
    m.get(k).unwrap().clone()
}
fn _sum<T: Into<f64> + Copy>(v: &[T]) -> f64 {
    if v.is_empty() { return 0.0 }
    let mut sum = 0.0;
    for &it in v { sum += Into::<f64>::into(it); }
    sum
}
fn expect(cond: bool) {
    if !cond { panic!("expect failed"); }
}
