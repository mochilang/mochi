// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:30:25Z
#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Web_sale {
    bill_customer_sk: i32,
    item_sk: i32,
    sold_date_sk: i32,
    sales_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer {
    c_customer_sk: i32,
    c_current_addr_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer_addres {
    ca_address_sk: i32,
    ca_zip: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item {
    i_item_sk: i32,
    i_item_id: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_qoy: i32,
    d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item1 {
    ws: Web_sale,
    c: Customer,
    ca: Customer_addres,
    i: Item,
    d: Date_dim,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: &'static str,
    items: Vec<Item1>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    ca_zip: &'static str,
    sum_ws_sales_price: f64,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let web_sales = vec![Web_sale { bill_customer_sk: 1, item_sk: 1, sold_date_sk: 1, sales_price: 50.0 }, Web_sale { bill_customer_sk: 2, item_sk: 2, sold_date_sk: 1, sales_price: 30.0 }];
    let customer = vec![Customer { c_customer_sk: 1, c_current_addr_sk: 1 }, Customer { c_customer_sk: 2, c_current_addr_sk: 2 }];
    let customer_address = vec![Customer_addres { ca_address_sk: 1, ca_zip: "85669" }, Customer_addres { ca_address_sk: 2, ca_zip: "99999" }];
    let item = vec![Item { i_item_sk: 1, i_item_id: "I1" }, Item { i_item_sk: 2, i_item_id: "I2" }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_qoy: 1, d_year: 2020 }];
    let zip_list = vec!["85669", "86197", "88274", "83405", "86475", "85392", "85460", "80348", "81792"];
    let item_ids = vec!["I2"];
    let qoy = 1;
    let year = 2020;
    let base = { let mut tmp1 = std::collections::HashMap::new();for ws in &web_sales { for c in &customer { if !(ws.bill_customer_sk == c.c_customer_sk) { continue; } for ca in &customer_address { if !(c.c_current_addr_sk == ca.ca_address_sk) { continue; } for i in &item { if !(ws.item_sk == i.i_item_sk) { continue; } for d in &date_dim { if !(ws.sold_date_sk == d.d_date_sk) { continue; } if !((item_ids.contains(&zip_list.contains(&substr(ca.ca_zip, 0, 5)) || i.i_item_id)) && d.d_qoy == qoy && d.d_year == year) { continue; } let key = ca.ca_zip; tmp1.entry(key).or_insert_with(Vec::new).push(Item1 {ws: ws.clone(), c: c.clone(), ca: ca.clone(), i: i.clone(), d: d.clone() }); } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { ca_zip: g.key, sum_ws_sales_price: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.ws.sales_price); } tmp3 }) }); } result };
    let records = base;
    _json(&records);
    assert!(records == vec![Result { ca_zip: "85669", sum_ws_sales_price: 50.0 }, Result { ca_zip: "99999", sum_ws_sales_price: 30.0 }]);
}
