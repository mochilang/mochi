// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:36Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer {
    c_customer_sk: i32,
    c_customer_id: &'static str,
    c_first_name: &'static str,
    c_last_name: &'static str,
    c_login: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    ss_customer_sk: i32,
    ss_sold_date_sk: i32,
    ss_ext_list_price: f64,
    ss_ext_wholesale_cost: f64,
    ss_ext_discount_amt: f64,
    ss_ext_sales_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Catalog_sale {
    cs_bill_customer_sk: i32,
    cs_sold_date_sk: i32,
    cs_ext_list_price: f64,
    cs_ext_wholesale_cost: f64,
    cs_ext_discount_amt: f64,
    cs_ext_sales_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Web_sale {
    ws_bill_customer_sk: i32,
    ws_sold_date_sk: i32,
    ws_ext_list_price: f64,
    ws_ext_wholesale_cost: f64,
    ws_ext_discount_amt: f64,
    ws_ext_sales_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    id: &'static str,
    first: &'static str,
    last: &'static str,
    login: &'static str,
    year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item {
    c: Customer,
    s: Store_sale,
    d: Date_dim,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    customer_id: &'static str,
    customer_first_name: &'static str,
    customer_last_name: &'static str,
    customer_login: &'static str,
    dyear: i32,
    year_total: i32,
    sale_type: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key1 {
    id: &'static str,
    first: &'static str,
    last: &'static str,
    login: &'static str,
    year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item2 {
    c: Customer,
    cs: Catalog_sale,
    d: Date_dim,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group3 {
    key: Key1,
    items: Vec<Item2>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result4 {
    customer_id: &'static str,
    customer_first_name: &'static str,
    customer_last_name: &'static str,
    customer_login: &'static str,
    dyear: i32,
    year_total: i32,
    sale_type: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key5 {
    id: &'static str,
    first: &'static str,
    last: &'static str,
    login: &'static str,
    year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item6 {
    c: Customer,
    ws: Web_sale,
    d: Date_dim,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group7 {
    key: Key5,
    items: Vec<Item6>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result8 {
    customer_id: &'static str,
    customer_first_name: &'static str,
    customer_last_name: &'static str,
    customer_login: &'static str,
    dyear: i32,
    year_total: i32,
    sale_type: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result9 {
    customer_id: &'static str,
    customer_first_name: &'static str,
    customer_last_name: &'static str,
    customer_login: &'static str,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _union_all<T: Clone>(mut a: Vec<T>, b: Vec<T>) -> Vec<T> {
    a.extend(b);
    a
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let customer = vec![Customer { c_customer_sk: 1, c_customer_id: "C1", c_first_name: "Alice", c_last_name: "A", c_login: "alice" }];
    let store_sales = vec![Store_sale { ss_customer_sk: 1, ss_sold_date_sk: 1, ss_ext_list_price: 10.0, ss_ext_wholesale_cost: 5.0, ss_ext_discount_amt: 0.0, ss_ext_sales_price: 10.0 }, Store_sale { ss_customer_sk: 1, ss_sold_date_sk: 2, ss_ext_list_price: 20.0, ss_ext_wholesale_cost: 5.0, ss_ext_discount_amt: 0.0, ss_ext_sales_price: 20.0 }];
    let catalog_sales = vec![Catalog_sale { cs_bill_customer_sk: 1, cs_sold_date_sk: 1, cs_ext_list_price: 10.0, cs_ext_wholesale_cost: 2.0, cs_ext_discount_amt: 0.0, cs_ext_sales_price: 10.0 }, Catalog_sale { cs_bill_customer_sk: 1, cs_sold_date_sk: 2, cs_ext_list_price: 30.0, cs_ext_wholesale_cost: 2.0, cs_ext_discount_amt: 0.0, cs_ext_sales_price: 30.0 }];
    let web_sales = vec![Web_sale { ws_bill_customer_sk: 1, ws_sold_date_sk: 1, ws_ext_list_price: 10.0, ws_ext_wholesale_cost: 5.0, ws_ext_discount_amt: 0.0, ws_ext_sales_price: 10.0 }, Web_sale { ws_bill_customer_sk: 1, ws_sold_date_sk: 2, ws_ext_list_price: 12.0, ws_ext_wholesale_cost: 5.0, ws_ext_discount_amt: 0.0, ws_ext_sales_price: 12.0 }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_year: 2001 }, Date_dim { d_date_sk: 2, d_year: 2002 }];
    let year_total = _union_all(_union_all(({ let mut tmp1 = std::collections::HashMap::new();for c in &customer { for s in &store_sales { if !(c.c_customer_sk == s.ss_customer_sk) { continue; } for d in &date_dim { if !(s.ss_sold_date_sk == d.d_date_sk) { continue; } let key = Key { id: c.c_customer_id, first: c.c_first_name, last: c.c_last_name, login: c.c_login, year: d.d_year }; tmp1.entry(key).or_insert_with(Vec::new).push(Item {c: c.clone(), s: s.clone(), d: d.clone() }); } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { customer_id: g.key.id, customer_first_name: g.key.first, customer_last_name: g.key.last, customer_login: g.key.login, dyear: g.key.year, year_total: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push((((x.ss_ext_list_price - x.ss_ext_wholesale_cost - x.ss_ext_discount_amt) + x.ss_ext_sales_price) as f64) / 2 as f64); } tmp3 }), sale_type: "s" }); } result }), ({ let mut tmp4 = std::collections::HashMap::new();for c in &customer { for cs in &catalog_sales { if !(c.c_customer_sk == cs.cs_bill_customer_sk) { continue; } for d in &date_dim { if !(cs.cs_sold_date_sk == d.d_date_sk) { continue; } let key = Key1 { id: c.c_customer_id, first: c.c_first_name, last: c.c_last_name, login: c.c_login, year: d.d_year }; tmp4.entry(key).or_insert_with(Vec::new).push(Item2 {c: c.clone(), cs: cs.clone(), d: d.clone() }); } } } let mut tmp5 = Vec::<Group3>::new(); for (k,v) in tmp4 { tmp5.push(Group3 { key: k, items: v }); } tmp5.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp5 { result.push(Result4 { customer_id: g.key.id, customer_first_name: g.key.first, customer_last_name: g.key.last, customer_login: g.key.login, dyear: g.key.year, year_total: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push((((x.cs_ext_list_price - x.cs_ext_wholesale_cost - x.cs_ext_discount_amt) + x.cs_ext_sales_price) as f64) / 2 as f64); } tmp6 }), sale_type: "c" }); } result })), ({ let mut tmp7 = std::collections::HashMap::new();for c in &customer { for ws in &web_sales { if !(c.c_customer_sk == ws.ws_bill_customer_sk) { continue; } for d in &date_dim { if !(ws.ws_sold_date_sk == d.d_date_sk) { continue; } let key = Key5 { id: c.c_customer_id, first: c.c_first_name, last: c.c_last_name, login: c.c_login, year: d.d_year }; tmp7.entry(key).or_insert_with(Vec::new).push(Item6 {c: c.clone(), ws: ws.clone(), d: d.clone() }); } } } let mut tmp8 = Vec::<Group7>::new(); for (k,v) in tmp7 { tmp8.push(Group7 { key: k, items: v }); } tmp8.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp8 { result.push(Result8 { customer_id: g.key.id, customer_first_name: g.key.first, customer_last_name: g.key.last, customer_login: g.key.login, dyear: g.key.year, year_total: sum(&{ let mut tmp9 = Vec::new();for x in &g.clone().items { tmp9.push((((x.ws_ext_list_price - x.ws_ext_wholesale_cost - x.ws_ext_discount_amt) + x.ws_ext_sales_price) as f64) / 2 as f64); } tmp9 }), sale_type: "w" }); } result }));
    let result = { let mut tmp10 = Vec::new();for s1 in &year_total { for s2 in &year_total { if !(s2.customer_id == s1.customer_id) { continue; } for c1 in &year_total { if !(c1.customer_id == s1.customer_id) { continue; } for c2 in &year_total { if !(c2.customer_id == s1.customer_id) { continue; } for w1 in &year_total { if !(w1.customer_id == s1.customer_id) { continue; } for w2 in &year_total { if !(w2.customer_id == s1.customer_id) { continue; } if !(s1.sale_type == "s" && c1.sale_type == "c" && w1.sale_type == "w" && s2.sale_type == "s" && c2.sale_type == "c" && w2.sale_type == "w" && s1.dyear == 2001 && s2.dyear == 2002 && c1.dyear == 2001 && c2.dyear == 2002 && w1.dyear == 2001 && w2.dyear == 2002 && s1.year_total > 0 && c1.year_total > 0 && w1.year_total > 0 && (if c1.year_total > 0 { (c2.year_total as f64) / (c1.year_total as f64) } else { () }) > (if s1.year_total > 0 { (s2.year_total as f64) / (s1.year_total as f64) } else { () }) && (if c1.year_total > 0 { (c2.year_total as f64) / (c1.year_total as f64) } else { () }) > (if w1.year_total > 0 { (w2.year_total as f64) / (w1.year_total as f64) } else { () })) { continue; } let tmp11 = Result9 { customer_id: s2.customer_id, customer_first_name: s2.customer_first_name, customer_last_name: s2.customer_last_name, customer_login: s2.customer_login }; let tmp12 = (s2.customer_id, s2.customer_first_name, s2.customer_last_name, s2.customer_login); tmp10.push((tmp12, tmp11)); } } } } } } tmp10.sort_by(|a,b| a.0.partial_cmp(&b.0).unwrap()); let mut tmp13 = Vec::new(); for p in tmp10 { tmp13.push(p.1); } tmp13 };
    _json(&result);
    assert!(result == vec![Result9 { customer_id: "C1", customer_first_name: "Alice", customer_last_name: "A", customer_login: "alice" }]);
}
