rustc: exit status 1
warning: type `Catalog_sale` should have an upper camel case name
  --> /tmp/q26.rs:42:8
   |
42 | struct Catalog_sale {
   |        ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `CatalogSale`
   |
   = note: `#[warn(non_camel_case_types)]` on by default

warning: type `Customer_demographic` should have an upper camel case name
  --> /tmp/q26.rs:54:8
   |
54 | struct Customer_demographic {
   |        ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `CustomerDemographic`

warning: type `Date_dim` should have an upper camel case name
  --> /tmp/q26.rs:62:8
   |
62 | struct Date_dim {
   |        ^^^^^^^^ help: convert the identifier to upper camel case: `DateDim`

error[E0609]: no field `cs_quantity` on type `&Item3`
   --> /tmp/q26.rs:119:1068
    |
119 | ... = Vec::new();for x in &g.clone().items { tmp3.push(x.cs_quantity); } tmp3 }), agg2: avg(&{ let mut tmp4 = Vec::new();for x in &g.clon...
    |                                                          ^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
119 |     let result = { let mut tmp1 = std::collections::HashMap::new();for cs in &catalog_sales { for cd in &customer_demographics { if !(cs.cs_bill_cdemo_sk == cd.cd_demo_sk) { continue; } for d in &date_dim { if !(cs.cs_sold_date_sk == d.d_date_sk) { continue; } for i in &item { if !(cs.cs_item_sk == i.i_item_sk) { continue; } for p in &promotion { if !(cs.cs_promo_sk == p.p_promo_sk) { continue; } if !(cd.cd_gender == "M" && cd.cd_marital_status == "S" && cd.cd_education_status == "College" && (p.p_channel_email == "N" || p.p_channel_event == "N") && d.d_year == 2000) { continue; } let key = i.i_item_id; tmp1.entry(key).or_insert_with(Vec::new).push(Item3 {cs: cs.clone(), cd: cd.clone(), d: d.clone(), i: i.clone(), p: p.clone() }); } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { i_item_id: g.key, agg1: avg(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.cs.cs_quantity); } tmp3 }), agg2: avg(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.cs_list_price); } tmp4 }), agg3: avg(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { tmp5.push(x.cs_coupon_amt); } tmp5 }), agg4: avg(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push(x.cs_sales_price); } tmp6 }) }); } result };
    |

error[E0609]: no field `cs_list_price` on type `&Item3`
   --> /tmp/q26.rs:119:1172
    |
119 | ...= Vec::new();for x in &g.clone().items { tmp4.push(x.cs_list_price); } tmp4 }), agg3: avg(&{ let mut tmp5 = Vec::new();for x in &g.clo...
    |                                                         ^^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
119 |     let result = { let mut tmp1 = std::collections::HashMap::new();for cs in &catalog_sales { for cd in &customer_demographics { if !(cs.cs_bill_cdemo_sk == cd.cd_demo_sk) { continue; } for d in &date_dim { if !(cs.cs_sold_date_sk == d.d_date_sk) { continue; } for i in &item { if !(cs.cs_item_sk == i.i_item_sk) { continue; } for p in &promotion { if !(cs.cs_promo_sk == p.p_promo_sk) { continue; } if !(cd.cd_gender == "M" && cd.cd_marital_status == "S" && cd.cd_education_status == "College" && (p.p_channel_email == "N" || p.p_channel_event == "N") && d.d_year == 2000) { continue; } let key = i.i_item_id; tmp1.entry(key).or_insert_with(Vec::new).push(Item3 {cs: cs.clone(), cd: cd.clone(), d: d.clone(), i: i.clone(), p: p.clone() }); } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { i_item_id: g.key, agg1: avg(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.cs_quantity); } tmp3 }), agg2: avg(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.cs.cs_list_price); } tmp4 }), agg3: avg(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { tmp5.push(x.cs_coupon_amt); } tmp5 }), agg4: avg(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push(x.cs_sales_price); } tmp6 }) }); } result };
    |

error[E0609]: no field `cs_coupon_amt` on type `&Item3`
   --> /tmp/q26.rs:119:1278
    |
119 | ...= Vec::new();for x in &g.clone().items { tmp5.push(x.cs_coupon_amt); } tmp5 }), agg4: avg(&{ let mut tmp6 = Vec::new();for x in &g.clo...
    |                                                         ^^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
119 |     let result = { let mut tmp1 = std::collections::HashMap::new();for cs in &catalog_sales { for cd in &customer_demographics { if !(cs.cs_bill_cdemo_sk == cd.cd_demo_sk) { continue; } for d in &date_dim { if !(cs.cs_sold_date_sk == d.d_date_sk) { continue; } for i in &item { if !(cs.cs_item_sk == i.i_item_sk) { continue; } for p in &promotion { if !(cs.cs_promo_sk == p.p_promo_sk) { continue; } if !(cd.cd_gender == "M" && cd.cd_marital_status == "S" && cd.cd_education_status == "College" && (p.p_channel_email == "N" || p.p_channel_event == "N") && d.d_year == 2000) { continue; } let key = i.i_item_id; tmp1.entry(key).or_insert_with(Vec::new).push(Item3 {cs: cs.clone(), cd: cd.clone(), d: d.clone(), i: i.clone(), p: p.clone() }); } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { i_item_id: g.key, agg1: avg(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.cs_quantity); } tmp3 }), agg2: avg(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.cs_list_price); } tmp4 }), agg3: avg(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { tmp5.push(x.cs.cs_coupon_amt); } tmp5 }), agg4: avg(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push(x.cs_sales_price); } tmp6 }) }); } result };
    |

error[E0609]: no field `cs_sales_price` on type `&Item3`
   --> /tmp/q26.rs:119:1384
    |
119 | ...= Vec::new();for x in &g.clone().items { tmp6.push(x.cs_sales_price); } tmp6 }) }); } result };
    |                                                         ^^^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
119 |     let result = { let mut tmp1 = std::collections::HashMap::new();for cs in &catalog_sales { for cd in &customer_demographics { if !(cs.cs_bill_cdemo_sk == cd.cd_demo_sk) { continue; } for d in &date_dim { if !(cs.cs_sold_date_sk == d.d_date_sk) { continue; } for i in &item { if !(cs.cs_item_sk == i.i_item_sk) { continue; } for p in &promotion { if !(cs.cs_promo_sk == p.p_promo_sk) { continue; } if !(cd.cd_gender == "M" && cd.cd_marital_status == "S" && cd.cd_education_status == "College" && (p.p_channel_email == "N" || p.p_channel_event == "N") && d.d_year == 2000) { continue; } let key = i.i_item_id; tmp1.entry(key).or_insert_with(Vec::new).push(Item3 {cs: cs.clone(), cd: cd.clone(), d: d.clone(), i: i.clone(), p: p.clone() }); } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { i_item_id: g.key, agg1: avg(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.cs_quantity); } tmp3 }), agg2: avg(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.cs_list_price); } tmp4 }), agg3: avg(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { tmp5.push(x.cs_coupon_amt); } tmp5 }), agg4: avg(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push(x.cs.cs_sales_price); } tmp6 }) }); } result };
    |

error: aborting due to 4 previous errors; 3 warnings emitted

For more information about this error, try `rustc --explain E0609`.
