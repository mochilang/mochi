rustc: exit status 1
warning: type `Web_sale` should have an upper camel case name
 --> /tmp/q2.rs:3:8
  |
3 | struct Web_sale {
  |        ^^^^^^^^ help: convert the identifier to upper camel case: `WebSale`
  |
  = note: `#[warn(non_camel_case_types)]` on by default

warning: type `Catalog_sale` should have an upper camel case name
  --> /tmp/q2.rs:10:8
   |
10 | struct Catalog_sale {
   |        ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `CatalogSale`

warning: type `Date_dim` should have an upper camel case name
  --> /tmp/q2.rs:17:8
   |
17 | struct Date_dim {
   |        ^^^^^^^^ help: convert the identifier to upper camel case: `DateDim`

warning: unnecessary parentheses around function argument
  --> /tmp/q2.rs:91:27
   |
91 | ...ll(({ let mut tmp1 = Vec::new();for ws in &web_sales { tmp1.push(Result { sold_date_sk: ws.ws_sold_date_sk, sales_price: ws.ws_ext_sales_price, day: ws.ws_sold_date_name }); } tmp1 }), (...
   |       ^                                                                                                                                                                                  ^
   |
   = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
   |
91 -     let wscs = _union_all(({ let mut tmp1 = Vec::new();for ws in &web_sales { tmp1.push(Result { sold_date_sk: ws.ws_sold_date_sk, sales_price: ws.ws_ext_sales_price, day: ws.ws_sold_date_name }); } tmp1 }), ({ let mut tmp2 = Vec::new();for cs in &catalog_sales { tmp2.push(Result1 { sold_date_sk: cs.cs_sold_date_sk, sales_price: cs.cs_ext_sales_price, day: cs.cs_sold_date_name }); } tmp2 }));
91 +     let wscs = _union_all({ let mut tmp1 = Vec::new();for ws in &web_sales { tmp1.push(Result { sold_date_sk: ws.ws_sold_date_sk, sales_price: ws.ws_ext_sales_price, day: ws.ws_sold_date_name }); } tmp1 }, ({ let mut tmp2 = Vec::new();for cs in &catalog_sales { tmp2.push(Result1 { sold_date_sk: cs.cs_sold_date_sk, sales_price: cs.cs_ext_sales_price, day: cs.cs_sold_date_name }); } tmp2 }));
   |

warning: unnecessary parentheses around function argument
  --> /tmp/q2.rs:91:209
   |
91 | ...), ({ let mut tmp2 = Vec::new();for cs in &catalog_sales { tmp2.push(Result1 { sold_date_sk: cs.cs_sold_date_sk, sales_price: cs.cs_ext_sales_price, day: cs.cs_sold_date_name }); } tmp2 }));
   |       ^                                                                                                                                                                                       ^
   |
help: remove these parentheses
   |
91 -     let wscs = _union_all(({ let mut tmp1 = Vec::new();for ws in &web_sales { tmp1.push(Result { sold_date_sk: ws.ws_sold_date_sk, sales_price: ws.ws_ext_sales_price, day: ws.ws_sold_date_name }); } tmp1 }), ({ let mut tmp2 = Vec::new();for cs in &catalog_sales { tmp2.push(Result1 { sold_date_sk: cs.cs_sold_date_sk, sales_price: cs.cs_ext_sales_price, day: cs.cs_sold_date_name }); } tmp2 }));
91 +     let wscs = _union_all(({ let mut tmp1 = Vec::new();for ws in &web_sales { tmp1.push(Result { sold_date_sk: ws.ws_sold_date_sk, sales_price: ws.ws_ext_sales_price, day: ws.ws_sold_date_name }); } tmp1 }), { let mut tmp2 = Vec::new();for cs in &catalog_sales { tmp2.push(Result1 { sold_date_sk: cs.cs_sold_date_sk, sales_price: cs.cs_ext_sales_price, day: cs.cs_sold_date_name }); } tmp2 });
   |

error[E0308]: mismatched types
  --> /tmp/q2.rs:91:387
   |
91 | ... { tmp2.push(Result1 { sold_date_sk: cs.cs_sold_date_sk, sales_price: cs.cs_ext_sales_price, day: cs.cs_sold_date_name }); } tmp2 }));
   |       ----      -----------------------------------------------------------------------------------------------------------     ^^^^ expected `Vec<Result>`, found `Vec<Result1>`
   |       |         |
   |       |         this argument has type `Result1`...
   |       ... which causes `tmp2` to have type `Vec<Result1>`
   |
   = note: expected struct `Vec<Result>`
              found struct `Vec<Result1>`

error[E0308]: mismatched types
  --> /tmp/q2.rs:92:253
   |
92 | ...(key).or_insert_with(Vec::new).push(Item {w: w.clone(), d: d.clone() }); } } let mut tmp4 = Vec::<Group>::new(); for (k,v) in tmp3 { t...
   |                                                 ^^^^^^^^^ expected `Result1`, found `Result`

error[E0609]: no field `day` on type `&Item`
  --> /tmp/q2.rs:92:612
   |
92 | ... mut tmp5 = Vec::new();for x in &g.clone().items { if !(x.day == "Sunday") { continue; } tmp5.push(x.sales_price); } tmp5 }), mon_sale...
   |                                                              ^^^ unknown field
   |
help: one of the expressions' fields has a field of the same name
   |
92 |     let wswscs = { let mut tmp3 = std::collections::HashMap::new();for w in &wscs { for d in &date_dim { if !(w.sold_date_sk == d.d_date_sk) { continue; } let key = Key { week_seq: d.d_week_seq }; tmp3.entry(key).or_insert_with(Vec::new).push(Item {w: w.clone(), d: d.clone() }); } } let mut tmp4 = Vec::<Group>::new(); for (k,v) in tmp3 { tmp4.push(Group { key: k, items: v }); } tmp4.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp4 { result.push(Result2 { d_week_seq: g.key.week_seq, sun_sales: sum(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { if !(x.w.day == "Sunday") { continue; } tmp5.push(x.sales_price); } tmp5 }), mon_sales: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { if !(x.day == "Monday") { continue; } tmp6.push(x.sales_price); } tmp6 }), tue_sales: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { if !(x.day == "Tuesday") { continue; } tmp7.push(x.sales_price); } tmp7 }), wed_sales: sum(&{ let mut tmp8 = Vec::new();for x in &g.clone().items { if !(x.day == "Wednesday") { continue; } tmp8.push(x.sales_price); } tmp8 }), thu_sales: sum(&{ let mut tmp9 = Vec::new();for x in &g.clone().items { if !(x.day == "Thursday") { continue; } tmp9.push(x.sales_price); } tmp9 }), fri_sales: sum(&{ let mut tmp10 = Vec::new();for x in &g.clone().items { if !(x.day == "Friday") { continue; } tmp10.push(x.sales_price); } tmp10 }), sat_sales: sum(&{ let mut tmp11 = Vec::new();for x in &g.clone().items { if !(x.day == "Saturday") { continue; } tmp11.push(x.sales_price); } tmp11 }) }); } result };
   |

error[E0609]: no field `sales_price` on type `&Item`
  --> /tmp/q2.rs:92:655
   |
92 | ...s { if !(x.day == "Sunday") { continue; } tmp5.push(x.sales_price); } tmp5 }), mon_sales: sum(&{ let mut tmp6 = Vec::new();for x in &g...
   |                                                          ^^^^^^^^^^^ unknown field
   |
help: one of the expressions' fields has a field of the same name
   |
92 |     let wswscs = { let mut tmp3 = std::collections::HashMap::new();for w in &wscs { for d in &date_dim { if !(w.sold_date_sk == d.d_date_sk) { continue; } let key = Key { week_seq: d.d_week_seq }; tmp3.entry(key).or_insert_with(Vec::new).push(Item {w: w.clone(), d: d.clone() }); } } let mut tmp4 = Vec::<Group>::new(); for (k,v) in tmp3 { tmp4.push(Group { key: k, items: v }); } tmp4.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp4 { result.push(Result2 { d_week_seq: g.key.week_seq, sun_sales: sum(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { if !(x.day == "Sunday") { continue; } tmp5.push(x.w.sales_price); } tmp5 }), mon_sales: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { if !(x.day == "Monday") { continue; } tmp6.push(x.sales_price); } tmp6 }), tue_sales: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { if !(x.day == "Tuesday") { continue; } tmp7.push(x.sales_price); } tmp7 }), wed_sales: sum(&{ let mut tmp8 = Vec::new();for x in &g.clone().items { if !(x.day == "Wednesday") { continue; } tmp8.push(x.sales_price); } tmp8 }), thu_sales: sum(&{ let mut tmp9 = Vec::new();for x in &g.clone().items { if !(x.day == "Thursday") { continue; } tmp9.push(x.sales_price); } tmp9 }), fri_sales: sum(&{ let mut tmp10 = Vec::new();for x in &g.clone().items { if !(x.day == "Friday") { continue; } tmp10.push(x.sales_price); } tmp10 }), sat_sales: sum(&{ let mut tmp11 = Vec::new();for x in &g.clone().items { if !(x.day == "Saturday") { continue; } tmp11.push(x.sales_price); } tmp11 }) }); } result };
   |

error[E0609]: no field `day` on type `&Item`
  --> /tmp/q2.rs:92:759
   |
92 | ... mut tmp6 = Vec::new();for x in &g.clone().items { if !(x.day == "Monday") { continue; } tmp6.push(x.sales_price); } tmp6 }), tue_sale...
   |                                                              ^^^ unknown field
   |
help: one of the expressions' fields has a field of the same name
   |
92 |     let wswscs = { let mut tmp3 = std::collections::HashMap::new();for w in &wscs { for d in &date_dim { if !(w.sold_date_sk == d.d_date_sk) { continue; } let key = Key { week_seq: d.d_week_seq }; tmp3.entry(key).or_insert_with(Vec::new).push(Item {w: w.clone(), d: d.clone() }); } } let mut tmp4 = Vec::<Group>::new(); for (k,v) in tmp3 { tmp4.push(Group { key: k, items: v }); } tmp4.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp4 { result.push(Result2 { d_week_seq: g.key.week_seq, sun_sales: sum(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { if !(x.day == "Sunday") { continue; } tmp5.push(x.sales_price); } tmp5 }), mon_sales: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { if !(x.w.day == "Monday") { continue; } tmp6.push(x.sales_price); } tmp6 }), tue_sales: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { if !(x.day == "Tuesday") { continue; } tmp7.push(x.sales_price); } tmp7 }), wed_sales: sum(&{ let mut tmp8 = Vec::new();for x in &g.clone().items { if !(x.day == "Wednesday") { continue; } tmp8.push(x.sales_price); } tmp8 }), thu_sales: sum(&{ let mut tmp9 = Vec::new();for x in &g.clone().items { if !(x.day == "Thursday") { continue; } tmp9.push(x.sales_price); } tmp9 }), fri_sales: sum(&{ let mut tmp10 = Vec::new();for x in &g.clone().items { if !(x.day == "Friday") { continue; } tmp10.push(x.sales_price); } tmp10 }), sat_sales: sum(&{ let mut tmp11 = Vec::new();for x in &g.clone().items { if !(x.day == "Saturday") { continue; } tmp11.push(x.sales_price); } tmp11 }) }); } result };
   |

error[E0609]: no field `sales_price` on type `&Item`
  --> /tmp/q2.rs:92:802
   |
92 | ...s { if !(x.day == "Monday") { continue; } tmp6.push(x.sales_price); } tmp6 }), tue_sales: sum(&{ let mut tmp7 = Vec::new();for x in &g...
   |                                                          ^^^^^^^^^^^ unknown field
   |
help: one of the expressions' fields has a field of the same name
   |
92 |     let wswscs = { let mut tmp3 = std::collections::HashMap::new();for w in &wscs { for d in &date_dim { if !(w.sold_date_sk == d.d_date_sk) { continue; } let key = Key { week_seq: d.d_week_seq }; tmp3.entry(key).or_insert_with(Vec::new).push(Item {w: w.clone(), d: d.clone() }); } } let mut tmp4 = Vec::<Group>::new(); for (k,v) in tmp3 { tmp4.push(Group { key: k, items: v }); } tmp4.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp4 { result.push(Result2 { d_week_seq: g.key.week_seq, sun_sales: sum(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { if !(x.day == "Sunday") { continue; } tmp5.push(x.sales_price); } tmp5 }), mon_sales: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { if !(x.day == "Monday") { continue; } tmp6.push(x.w.sales_price); } tmp6 }), tue_sales: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { if !(x.day == "Tuesday") { continue; } tmp7.push(x.sales_price); } tmp7 }), wed_sales: sum(&{ let mut tmp8 = Vec::new();for x in &g.clone().items { if !(x.day == "Wednesday") { continue; } tmp8.push(x.sales_price); } tmp8 }), thu_sales: sum(&{ let mut tmp9 = Vec::new();for x in &g.clone().items { if !(x.day == "Thursday") { continue; } tmp9.push(x.sales_price); } tmp9 }), fri_sales: sum(&{ let mut tmp10 = Vec::new();for x in &g.clone().items { if !(x.day == "Friday") { continue; } tmp10.push(x.sales_price); } tmp10 }), sat_sales: sum(&{ let mut tmp11 = Vec::new();for x in &g.clone().items { if !(x.day == "Saturday") { continue; } tmp11.push(x.sales_price); } tmp11 }) }); } result };
   |

error[E0609]: no field `day` on type `&Item`
  --> /tmp/q2.rs:92:906
   |
92 | ... mut tmp7 = Vec::new();for x in &g.clone().items { if !(x.day == "Tuesday") { continue; } tmp7.push(x.sales_price); } tmp7 }), wed_sal...
   |                                                              ^^^ unknown field
   |
help: one of the expressions' fields has a field of the same name
   |
92 |     let wswscs = { let mut tmp3 = std::collections::HashMap::new();for w in &wscs { for d in &date_dim { if !(w.sold_date_sk == d.d_date_sk) { continue; } let key = Key { week_seq: d.d_week_seq }; tmp3.entry(key).or_insert_with(Vec::new).push(Item {w: w.clone(), d: d.clone() }); } } let mut tmp4 = Vec::<Group>::new(); for (k,v) in tmp3 { tmp4.push(Group { key: k, items: v }); } tmp4.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp4 { result.push(Result2 { d_week_seq: g.key.week_seq, sun_sales: sum(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { if !(x.day == "Sunday") { continue; } tmp5.push(x.sales_price); } tmp5 }), mon_sales: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { if !(x.day == "Monday") { continue; } tmp6.push(x.sales_price); } tmp6 }), tue_sales: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { if !(x.w.day == "Tuesday") { continue; } tmp7.push(x.sales_price); } tmp7 }), wed_sales: sum(&{ let mut tmp8 = Vec::new();for x in &g.clone().items { if !(x.day == "Wednesday") { continue; } tmp8.push(x.sales_price); } tmp8 }), thu_sales: sum(&{ let mut tmp9 = Vec::new();for x in &g.clone().items { if !(x.day == "Thursday") { continue; } tmp9.push(x.sales_price); } tmp9 }), fri_sales: sum(&{ let mut tmp10 = Vec::new();for x in &g.clone().items { if !(x.day == "Friday") { continue; } tmp10.push(x.sales_price); } tmp10 }), sat_sales: sum(&{ let mut tmp11 = Vec::new();for x in &g.clone().items { if !(x.day == "Saturday") { continue; } tmp11.push(x.sales_price); } tmp11 }) }); } result };
   |

error[E0609]: no field `sales_price` on type `&Item`
  --> /tmp/q2.rs:92:950
   |
92 | ... { if !(x.day == "Tuesday") { continue; } tmp7.push(x.sales_price); } tmp7 }), wed_sales: sum(&{ let mut tmp8 = Vec::new();for x in &g...
   |                                                          ^^^^^^^^^^^ unknown field
   |
help: one of the expressions' fields has a field of the same name
   |
92 |     let wswscs = { let mut tmp3 = std::collections::HashMap::new();for w in &wscs { for d in &date_dim { if !(w.sold_date_sk == d.d_date_sk) { continue; } let key = Key { week_seq: d.d_week_seq }; tmp3.entry(key).or_insert_with(Vec::new).push(Item {w: w.clone(), d: d.clone() }); } } let mut tmp4 = Vec::<Group>::new(); for (k,v) in tmp3 { tmp4.push(Group { key: k, items: v }); } tmp4.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp4 { result.push(Result2 { d_week_seq: g.key.week_seq, sun_sales: sum(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { if !(x.day == "Sunday") { continue; } tmp5.push(x.sales_price); } tmp5 }), mon_sales: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { if !(x.day == "Monday") { continue; } tmp6.push(x.sales_price); } tmp6 }), tue_sales: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { if !(x.day == "Tuesday") { continue; } tmp7.push(x.w.sales_price); } tmp7 }), wed_sales: sum(&{ let mut tmp8 = Vec::new();for x in &g.clone().items { if !(x.day == "Wednesday") { continue; } tmp8.push(x.sales_price); } tmp8 }), thu_sales: sum(&{ let mut tmp9 = Vec::new();for x in &g.clone().items { if !(x.day == "Thursday") { continue; } tmp9.push(x.sales_price); } tmp9 }), fri_sales: sum(&{ let mut tmp10 = Vec::new();for x in &g.clone().items { if !(x.day == "Friday") { continue; } tmp10.push(x.sales_price); } tmp10 }), sat_sales: sum(&{ let mut tmp11 = Vec::new();for x in &g.clone().items { if !(x.day == "Saturday") { continue; } tmp11.push(x.sales_price); } tmp11 }) }); } result };
   |

error[E0609]: no field `day` on type `&Item`
  --> /tmp/q2.rs:92:1054
   |
92 | ... mut tmp8 = Vec::new();for x in &g.clone().items { if !(x.day == "Wednesday") { continue; } tmp8.push(x.sales_price); } tmp8 }), thu_s...
   |                                                              ^^^ unknown field
   |
help: one of the expressions' fields has a field of the same name
   |
92 |     let wswscs = { let mut tmp3 = std::collections::HashMap::new();for w in &wscs { for d in &date_dim { if !(w.sold_date_sk == d.d_date_sk) { continue; } let key = Key { week_seq: d.d_week_seq }; tmp3.entry(key).or_insert_with(Vec::new).push(Item {w: w.clone(), d: d.clone() }); } } let mut tmp4 = Vec::<Group>::new(); for (k,v) in tmp3 { tmp4.push(Group { key: k, items: v }); } tmp4.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp4 { result.push(Result2 { d_week_seq: g.key.week_seq, sun_sales: sum(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { if !(x.day == "Sunday") { continue; } tmp5.push(x.sales_price); } tmp5 }), mon_sales: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { if !(x.day == "Monday") { continue; } tmp6.push(x.sales_price); } tmp6 }), tue_sales: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { if !(x.day == "Tuesday") { continue; } tmp7.push(x.sales_price); } tmp7 }), wed_sales: sum(&{ let mut tmp8 = Vec::new();for x in &g.clone().items { if !(x.w.day == "Wednesday") { continue; } tmp8.push(x.sales_price); } tmp8 }), thu_sales: sum(&{ let mut tmp9 = Vec::new();for x in &g.clone().items { if !(x.day == "Thursday") { continue; } tmp9.push(x.sales_price); } tmp9 }), fri_sales: sum(&{ let mut tmp10 = Vec::new();for x in &g.clone().items { if !(x.day == "Friday") { continue; } tmp10.push(x.sales_price); } tmp10 }), sat_sales: sum(&{ let mut tmp11 = Vec::new();for x in &g.clone().items { if !(x.day == "Saturday") { continue; } tmp11.push(x.sales_price); } tmp11 }) }); } result };
   |

error[E0609]: no field `sales_price` on type `&Item`
  --> /tmp/q2.rs:92:1100
   |
92 | ... if !(x.day == "Wednesday") { continue; } tmp8.push(x.sales_price); } tmp8 }), thu_sales: sum(&{ let mut tmp9 = Vec::new();for x in &g...
   |                                                          ^^^^^^^^^^^ unknown field
   |
help: one of the expressions' fields has a field of the same name
   |
92 |     let wswscs = { let mut tmp3 = std::collections::HashMap::new();for w in &wscs { for d in &date_dim { if !(w.sold_date_sk == d.d_date_sk) { continue; } let key = Key { week_seq: d.d_week_seq }; tmp3.entry(key).or_insert_with(Vec::new).push(Item {w: w.clone(), d: d.clone() }); } } let mut tmp4 = Vec::<Group>::new(); for (k,v) in tmp3 { tmp4.push(Group { key: k, items: v }); } tmp4.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp4 { result.push(Result2 { d_week_seq: g.key.week_seq, sun_sales: sum(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { if !(x.day == "Sunday") { continue; } tmp5.push(x.sales_price); } tmp5 }), mon_sales: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { if !(x.day == "Monday") { continue; } tmp6.push(x.sales_price); } tmp6 }), tue_sales: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { if !(x.day == "Tuesday") { continue; } tmp7.push(x.sales_price); } tmp7 }), wed_sales: sum(&{ let mut tmp8 = Vec::new();for x in &g.clone().items { if !(x.day == "Wednesday") { continue; } tmp8.push(x.w.sales_price); } tmp8 }), thu_sales: sum(&{ let mut tmp9 = Vec::new();for x in &g.clone().items { if !(x.day == "Thursday") { continue; } tmp9.push(x.sales_price); } tmp9 }), fri_sales: sum(&{ let mut tmp10 = Vec::new();for x in &g.clone().items { if !(x.day == "Friday") { continue; } tmp10.push(x.sales_price); } tmp10 }), sat_sales: sum(&{ let mut tmp11 = Vec::new();for x in &g.clone().items { if !(x.day == "Saturday") { continue; } tmp11.push(x.sales_price); } tmp11 }) }); } result };
   |

error[E0609]: no field `day` on type `&Item`
  --> /tmp/q2.rs:92:1204
   |
92 | ... mut tmp9 = Vec::new();for x in &g.clone().items { if !(x.day == "Thursday") { continue; } tmp9.push(x.sales_price); } tmp9 }), fri_sa...
   |                                                              ^^^ unknown field
   |
help: one of the expressions' fields has a field of the same name
   |
92 |     let wswscs = { let mut tmp3 = std::collections::HashMap::new();for w in &wscs { for d in &date_dim { if !(w.sold_date_sk == d.d_date_sk) { continue; } let key = Key { week_seq: d.d_week_seq }; tmp3.entry(key).or_insert_with(Vec::new).push(Item {w: w.clone(), d: d.clone() }); } } let mut tmp4 = Vec::<Group>::new(); for (k,v) in tmp3 { tmp4.push(Group { key: k, items: v }); } tmp4.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp4 { result.push(Result2 { d_week_seq: g.key.week_seq, sun_sales: sum(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { if !(x.day == "Sunday") { continue; } tmp5.push(x.sales_price); } tmp5 }), mon_sales: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { if !(x.day == "Monday") { continue; } tmp6.push(x.sales_price); } tmp6 }), tue_sales: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { if !(x.day == "Tuesday") { continue; } tmp7.push(x.sales_price); } tmp7 }), wed_sales: sum(&{ let mut tmp8 = Vec::new();for x in &g.clone().items { if !(x.day == "Wednesday") { continue; } tmp8.push(x.sales_price); } tmp8 }), thu_sales: sum(&{ let mut tmp9 = Vec::new();for x in &g.clone().items { if !(x.w.day == "Thursday") { continue; } tmp9.push(x.sales_price); } tmp9 }), fri_sales: sum(&{ let mut tmp10 = Vec::new();for x in &g.clone().items { if !(x.day == "Friday") { continue; } tmp10.push(x.sales_price); } tmp10 }), sat_sales: sum(&{ let mut tmp11 = Vec::new();for x in &g.clone().items { if !(x.day == "Saturday") { continue; } tmp11.push(x.sales_price); } tmp11 }) }); } result };
   |

error[E0609]: no field `sales_price` on type `&Item`
  --> /tmp/q2.rs:92:1249
   |
92 | ...{ if !(x.day == "Thursday") { continue; } tmp9.push(x.sales_price); } tmp9 }), fri_sales: sum(&{ let mut tmp10 = Vec::new();for x in &...
   |                                                          ^^^^^^^^^^^ unknown field
   |
help: one of the expressions' fields has a field of the same name
   |
92 |     let wswscs = { let mut tmp3 = std::collections::HashMap::new();for w in &wscs { for d in &date_dim { if !(w.sold_date_sk == d.d_date_sk) { continue; } let key = Key { week_seq: d.d_week_seq }; tmp3.entry(key).or_insert_with(Vec::new).push(Item {w: w.clone(), d: d.clone() }); } } let mut tmp4 = Vec::<Group>::new(); for (k,v) in tmp3 { tmp4.push(Group { key: k, items: v }); } tmp4.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp4 { result.push(Result2 { d_week_seq: g.key.week_seq, sun_sales: sum(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { if !(x.day == "Sunday") { continue; } tmp5.push(x.sales_price); } tmp5 }), mon_sales: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { if !(x.day == "Monday") { continue; } tmp6.push(x.sales_price); } tmp6 }), tue_sales: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { if !(x.day == "Tuesday") { continue; } tmp7.push(x.sales_price); } tmp7 }), wed_sales: sum(&{ let mut tmp8 = Vec::new();for x in &g.clone().items { if !(x.day == "Wednesday") { continue; } tmp8.push(x.sales_price); } tmp8 }), thu_sales: sum(&{ let mut tmp9 = Vec::new();for x in &g.clone().items { if !(x.day == "Thursday") { continue; } tmp9.push(x.w.sales_price); } tmp9 }), fri_sales: sum(&{ let mut tmp10 = Vec::new();for x in &g.clone().items { if !(x.day == "Friday") { continue; } tmp10.push(x.sales_price); } tmp10 }), sat_sales: sum(&{ let mut tmp11 = Vec::new();for x in &g.clone().items { if !(x.day == "Saturday") { continue; } tmp11.push(x.sales_price); } tmp11 }) }); } result };
   |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ++

error[E0609]: no field `day` on type `&Item`
  --> /tmp/q2.rs:92:1354
   |
92 | ...mut tmp10 = Vec::new();for x in &g.clone().items { if !(x.day == "Friday") { continue; } tmp10.push(x.sales_price); } tmp10 }), sat_sa...
   |                                                              ^^^ unknown field
   |
help: one of the expressions' fields has a field of the same name
   |
92 |     let wswscs = { let mut tmp3 = std::collections::HashMap::new();for w in &wscs { for d in &date_dim { if !(w.sold_date_sk == d.d_date_sk) { continue; } let key = Key { week_seq: d.d_week_seq }; tmp3.entry(key).or_insert_with(Vec::new).push(Item {w: w.clone(), d: d.clone() }); } } let mut tmp4 = Vec::<Group>::new(); for (k,v) in tmp3 { tmp4.push(Group { key: k, items: v }); } tmp4.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp4 { result.push(Result2 { d_week_seq: g.key.week_seq, sun_sales: sum(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { if !(x.day == "Sunday") { continue; } tmp5.push(x.sales_price); } tmp5 }), mon_sales: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { if !(x.day == "Monday") { continue; } tmp6.push(x.sales_price); } tmp6 }), tue_sales: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { if !(x.day == "Tuesday") { continue; } tmp7.push(x.sales_price); } tmp7 }), wed_sales: sum(&{ let mut tmp8 = Vec::new();for x in &g.clone().items { if !(x.day == "Wednesday") { continue; } tmp8.push(x.sales_price); } tmp8 }), thu_sales: sum(&{ let mut tmp9 = Vec::new();for x in &g.clone().items { if !(x.day == "Thursday") { continue; } tmp9.push(x.sales_price); } tmp9 }), fri_sales: sum(&{ let mut tmp10 = Vec::new();for x in &g.clone().items { if !(x.w.day == "Friday") { continue; } tmp10.push(x.sales_price); } tmp10 }), sat_sales: sum(&{ let mut tmp11 = Vec::new();for x in &g.clone().items { if !(x.day == "Saturday") { continue; } tmp11.push(x.sales_price); } tmp11 }) }); } result };
   |

error[E0609]: no field `sales_price` on type `&Item`
  --> /tmp/q2.rs:92:1398
   |
92 | ... { if !(x.day == "Friday") { continue; } tmp10.push(x.sales_price); } tmp10 }), sat_sales: sum(&{ let mut tmp11 = Vec::new();for x in ...
   |                                                          ^^^^^^^^^^^ unknown field
   |
help: one of the expressions' fields has a field of the same name
   |
92 |     let wswscs = { let mut tmp3 = std::collections::HashMap::new();for w in &wscs { for d in &date_dim { if !(w.sold_date_sk == d.d_date_sk) { continue; } let key = Key { week_seq: d.d_week_seq }; tmp3.entry(key).or_insert_with(Vec::new).push(Item {w: w.clone(), d: d.clone() }); } } let mut tmp4 = Vec::<Group>::new(); for (k,v) in tmp3 { tmp4.push(Group { key: k, items: v }); } tmp4.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp4 { result.push(Result2 { d_week_seq: g.key.week_seq, sun_sales: sum(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { if !(x.day == "Sunday") { continue; } tmp5.push(x.sales_price); } tmp5 }), mon_sales: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { if !(x.day == "Monday") { continue; } tmp6.push(x.sales_price); } tmp6 }), tue_sales: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { if !(x.day == "Tuesday") { continue; } tmp7.push(x.sales_price); } tmp7 }), wed_sales: sum(&{ let mut tmp8 = Vec::new();for x in &g.clone().items { if !(x.day == "Wednesday") { continue; } tmp8.push(x.sales_price); } tmp8 }), thu_sales: sum(&{ let mut tmp9 = Vec::new();for x in &g.clone().items { if !(x.day == "Thursday") { continue; } tmp9.push(x.sales_price); } tmp9 }), fri_sales: sum(&{ let mut tmp10 = Vec::new();for x in &g.clone().items { if !(x.day == "Friday") { continue; } tmp10.push(x.w.sales_price); } tmp10 }), sat_sales: sum(&{ let mut tmp11 = Vec::new();for x in &g.clone().items { if !(x.day == "Saturday") { continue; } tmp11.push(x.sales_price); } tmp11 }) }); } result };
   |

error[E0609]: no field `day` on type `&Item`
  --> /tmp/q2.rs:92:1504
   |
92 | ...mut tmp11 = Vec::new();for x in &g.clone().items { if !(x.day == "Saturday") { continue; } tmp11.push(x.sales_price); } tmp11 }) }); }...
   |                                                              ^^^ unknown field
   |
help: one of the expressions' fields has a field of the same name
   |
92 |     let wswscs = { let mut tmp3 = std::collections::HashMap::new();for w in &wscs { for d in &date_dim { if !(w.sold_date_sk == d.d_date_sk) { continue; } let key = Key { week_seq: d.d_week_seq }; tmp3.entry(key).or_insert_with(Vec::new).push(Item {w: w.clone(), d: d.clone() }); } } let mut tmp4 = Vec::<Group>::new(); for (k,v) in tmp3 { tmp4.push(Group { key: k, items: v }); } tmp4.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp4 { result.push(Result2 { d_week_seq: g.key.week_seq, sun_sales: sum(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { if !(x.day == "Sunday") { continue; } tmp5.push(x.sales_price); } tmp5 }), mon_sales: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { if !(x.day == "Monday") { continue; } tmp6.push(x.sales_price); } tmp6 }), tue_sales: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { if !(x.day == "Tuesday") { continue; } tmp7.push(x.sales_price); } tmp7 }), wed_sales: sum(&{ let mut tmp8 = Vec::new();for x in &g.clone().items { if !(x.day == "Wednesday") { continue; } tmp8.push(x.sales_price); } tmp8 }), thu_sales: sum(&{ let mut tmp9 = Vec::new();for x in &g.clone().items { if !(x.day == "Thursday") { continue; } tmp9.push(x.sales_price); } tmp9 }), fri_sales: sum(&{ let mut tmp10 = Vec::new();for x in &g.clone().items { if !(x.day == "Friday") { continue; } tmp10.push(x.sales_price); } tmp10 }), sat_sales: sum(&{ let mut tmp11 = Vec::new();for x in &g.clone().items { if !(x.w.day == "Saturday") { continue; } tmp11.push(x.sales_price); } tmp11 }) }); } result };
   |

error[E0609]: no field `sales_price` on type `&Item`
  --> /tmp/q2.rs:92:1550
   |
92 | ... if !(x.day == "Saturday") { continue; } tmp11.push(x.sales_price); } tmp11 }) }); } result };
   |                                                          ^^^^^^^^^^^ unknown field
   |
help: one of the expressions' fields has a field of the same name
   |
92 |     let wswscs = { let mut tmp3 = std::collections::HashMap::new();for w in &wscs { for d in &date_dim { if !(w.sold_date_sk == d.d_date_sk) { continue; } let key = Key { week_seq: d.d_week_seq }; tmp3.entry(key).or_insert_with(Vec::new).push(Item {w: w.clone(), d: d.clone() }); } } let mut tmp4 = Vec::<Group>::new(); for (k,v) in tmp3 { tmp4.push(Group { key: k, items: v }); } tmp4.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp4 { result.push(Result2 { d_week_seq: g.key.week_seq, sun_sales: sum(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { if !(x.day == "Sunday") { continue; } tmp5.push(x.sales_price); } tmp5 }), mon_sales: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { if !(x.day == "Monday") { continue; } tmp6.push(x.sales_price); } tmp6 }), tue_sales: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { if !(x.day == "Tuesday") { continue; } tmp7.push(x.sales_price); } tmp7 }), wed_sales: sum(&{ let mut tmp8 = Vec::new();for x in &g.clone().items { if !(x.day == "Wednesday") { continue; } tmp8.push(x.sales_price); } tmp8 }), thu_sales: sum(&{ let mut tmp9 = Vec::new();for x in &g.clone().items { if !(x.day == "Thursday") { continue; } tmp9.push(x.sales_price); } tmp9 }), fri_sales: sum(&{ let mut tmp10 = Vec::new();for x in &g.clone().items { if !(x.day == "Friday") { continue; } tmp10.push(x.sales_price); } tmp10 }), sat_sales: sum(&{ let mut tmp11 = Vec::new();for x in &g.clone().items { if !(x.day == "Saturday") { continue; } tmp11.push(x.w.sales_price); } tmp11 }) }); } result };
   |

error[E0308]: mismatched types
  --> /tmp/q2.rs:95:196
   |
95 | ...{ d_week_seq1: y.d_week_seq, sun_ratio: y.sun_sales / z.sun_sales, mon_ratio: y.mon_sales / z.mon_sales }); } } tmp14 };
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `i32`

error[E0308]: mismatched types
  --> /tmp/q2.rs:95:234
   |
95 | ...: y.sun_sales / z.sun_sales, mon_ratio: y.mon_sales / z.mon_sales }); } } tmp14 };
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `i32`

error: aborting due to 18 previous errors; 5 warnings emitted

Some errors have detailed explanations: E0308, E0609.
For more information about an error, try `rustc --explain E0308`.
