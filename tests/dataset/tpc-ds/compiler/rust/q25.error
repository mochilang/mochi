rustc: exit status 1
warning: type `Store_sale` should have an upper camel case name
  --> /tmp/q25.rs:51:8
   |
51 | struct Store_sale {
   |        ^^^^^^^^^^ help: convert the identifier to upper camel case: `StoreSale`
   |
   = note: `#[warn(non_camel_case_types)]` on by default

warning: type `Store_return` should have an upper camel case name
  --> /tmp/q25.rs:61:8
   |
61 | struct Store_return {
   |        ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `StoreReturn`

warning: type `Catalog_sale` should have an upper camel case name
  --> /tmp/q25.rs:70:8
   |
70 | struct Catalog_sale {
   |        ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `CatalogSale`

warning: type `Date_dim` should have an upper camel case name
  --> /tmp/q25.rs:78:8
   |
78 | struct Date_dim {
   |        ^^^^^^^^ help: convert the identifier to upper camel case: `DateDim`

error[E0609]: no field `ss_net_profit` on type `&Item3`
   --> /tmp/q25.rs:150:1587
    |
150 | ...= Vec::new();for x in &g.clone().items { tmp3.push(x.ss_net_profit); } tmp3 }), store_returns_loss: sum(&{ let mut tmp4 = Vec::new();f...
    |                                                         ^^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
150 |     let result = { let mut tmp1 = std::collections::HashMap::new();for ss in &store_sales { for sr in &store_returns { if !(ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk) { continue; } for cs in &catalog_sales { if !(sr.sr_customer_sk == cs.cs_bill_customer_sk && sr.sr_item_sk == cs.cs_item_sk) { continue; } for d1 in &date_dim { if !(d1.d_date_sk == ss.ss_sold_date_sk) { continue; } for d2 in &date_dim { if !(d2.d_date_sk == sr.sr_returned_date_sk) { continue; } for d3 in &date_dim { if !(d3.d_date_sk == cs.cs_sold_date_sk) { continue; } for s in &store { if !(s.s_store_sk == ss.ss_store_sk) { continue; } for i in &item { if !(i.i_item_sk == ss.ss_item_sk) { continue; } if !(d1.d_moy == 4 && d1.d_year == 2000 && d2.d_moy >= 4 && d2.d_moy <= 10 && d3.d_moy >= 4 && d3.d_moy <= 10) { continue; } let key = Key { item_id: i.i_item_id, item_desc: i.i_item_desc, s_store_id: s.s_store_id, s_store_name: s.s_store_name }; tmp1.entry(key).or_insert_with(Vec::new).push(Item3 {ss: ss.clone(), sr: sr.clone(), cs: cs.clone(), d1: d1.clone(), d2: d2.clone(), d3: d3.clone(), s: s.clone(), i: i.clone() }); } } } } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { i_item_id: g.key.item_id, i_item_desc: g.key.item_desc, s_store_id: g.key.s_store_id, s_store_name: g.key.s_store_name, store_sales_profit: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.ss.ss_net_profit); } tmp3 }), store_returns_loss: sum(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.sr_net_loss); } tmp4 }), catalog_sales_profit: sum(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { tmp5.push(x.cs_net_profit); } tmp5 }) }); } result };
    |

error[E0609]: no field `sr_net_loss` on type `&Item3`
   --> /tmp/q25.rs:150:1707
    |
150 | ... = Vec::new();for x in &g.clone().items { tmp4.push(x.sr_net_loss); } tmp4 }), catalog_sales_profit: sum(&{ let mut tmp5 = Vec::new();...
    |                                                          ^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
150 |     let result = { let mut tmp1 = std::collections::HashMap::new();for ss in &store_sales { for sr in &store_returns { if !(ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk) { continue; } for cs in &catalog_sales { if !(sr.sr_customer_sk == cs.cs_bill_customer_sk && sr.sr_item_sk == cs.cs_item_sk) { continue; } for d1 in &date_dim { if !(d1.d_date_sk == ss.ss_sold_date_sk) { continue; } for d2 in &date_dim { if !(d2.d_date_sk == sr.sr_returned_date_sk) { continue; } for d3 in &date_dim { if !(d3.d_date_sk == cs.cs_sold_date_sk) { continue; } for s in &store { if !(s.s_store_sk == ss.ss_store_sk) { continue; } for i in &item { if !(i.i_item_sk == ss.ss_item_sk) { continue; } if !(d1.d_moy == 4 && d1.d_year == 2000 && d2.d_moy >= 4 && d2.d_moy <= 10 && d3.d_moy >= 4 && d3.d_moy <= 10) { continue; } let key = Key { item_id: i.i_item_id, item_desc: i.i_item_desc, s_store_id: s.s_store_id, s_store_name: s.s_store_name }; tmp1.entry(key).or_insert_with(Vec::new).push(Item3 {ss: ss.clone(), sr: sr.clone(), cs: cs.clone(), d1: d1.clone(), d2: d2.clone(), d3: d3.clone(), s: s.clone(), i: i.clone() }); } } } } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { i_item_id: g.key.item_id, i_item_desc: g.key.item_desc, s_store_id: g.key.s_store_id, s_store_name: g.key.s_store_name, store_sales_profit: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.ss_net_profit); } tmp3 }), store_returns_loss: sum(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.sr.sr_net_loss); } tmp4 }), catalog_sales_profit: sum(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { tmp5.push(x.cs_net_profit); } tmp5 }) }); } result };
    |

error[E0609]: no field `cs_net_profit` on type `&Item3`
   --> /tmp/q25.rs:150:1827
    |
150 | ...= Vec::new();for x in &g.clone().items { tmp5.push(x.cs_net_profit); } tmp5 }) }); } result };
    |                                                         ^^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
150 |     let result = { let mut tmp1 = std::collections::HashMap::new();for ss in &store_sales { for sr in &store_returns { if !(ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk) { continue; } for cs in &catalog_sales { if !(sr.sr_customer_sk == cs.cs_bill_customer_sk && sr.sr_item_sk == cs.cs_item_sk) { continue; } for d1 in &date_dim { if !(d1.d_date_sk == ss.ss_sold_date_sk) { continue; } for d2 in &date_dim { if !(d2.d_date_sk == sr.sr_returned_date_sk) { continue; } for d3 in &date_dim { if !(d3.d_date_sk == cs.cs_sold_date_sk) { continue; } for s in &store { if !(s.s_store_sk == ss.ss_store_sk) { continue; } for i in &item { if !(i.i_item_sk == ss.ss_item_sk) { continue; } if !(d1.d_moy == 4 && d1.d_year == 2000 && d2.d_moy >= 4 && d2.d_moy <= 10 && d3.d_moy >= 4 && d3.d_moy <= 10) { continue; } let key = Key { item_id: i.i_item_id, item_desc: i.i_item_desc, s_store_id: s.s_store_id, s_store_name: s.s_store_name }; tmp1.entry(key).or_insert_with(Vec::new).push(Item3 {ss: ss.clone(), sr: sr.clone(), cs: cs.clone(), d1: d1.clone(), d2: d2.clone(), d3: d3.clone(), s: s.clone(), i: i.clone() }); } } } } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { i_item_id: g.key.item_id, i_item_desc: g.key.item_desc, s_store_id: g.key.s_store_id, s_store_name: g.key.s_store_name, store_sales_profit: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.ss_net_profit); } tmp3 }), store_returns_loss: sum(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.sr_net_loss); } tmp4 }), catalog_sales_profit: sum(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { tmp5.push(x.cs.cs_net_profit); } tmp5 }) }); } result };
    |

error[E0308]: mismatched types
   --> /tmp/q25.rs:152:141
    |
152 | ..._store_name: "Store1", store_sales_profit: 50.0, store_returns_loss: 10.0, catalog_sales_profit: 30.0 }, Result { i_item_id: "ITEM2", ...
    |                                               ^^^^ expected `i32`, found floating-point number

error[E0308]: mismatched types
   --> /tmp/q25.rs:152:167
    |
152 | ...re_sales_profit: 50.0, store_returns_loss: 10.0, catalog_sales_profit: 30.0 }, Result { i_item_id: "ITEM2", i_item_desc: "Desc2", s_st...
    |                                               ^^^^ expected `i32`, found floating-point number

error[E0308]: mismatched types
   --> /tmp/q25.rs:152:195
    |
152 | ..._returns_loss: 10.0, catalog_sales_profit: 30.0 }, Result { i_item_id: "ITEM2", i_item_desc: "Desc2", s_store_id: "S1", s_store_name: ...
    |                                               ^^^^ expected `i32`, found floating-point number

error[E0308]: mismatched types
   --> /tmp/q25.rs:152:316
    |
152 | ..._store_name: "Store1", store_sales_profit: 20.0, store_returns_loss: 5.0, catalog_sales_profit: 15.0 }]);
    |                                               ^^^^ expected `i32`, found floating-point number

error[E0308]: mismatched types
   --> /tmp/q25.rs:152:342
    |
152 | ...re_sales_profit: 20.0, store_returns_loss: 5.0, catalog_sales_profit: 15.0 }]);
    |                                               ^^^ expected `i32`, found floating-point number

error[E0308]: mismatched types
   --> /tmp/q25.rs:152:369
    |
152 | ...e_returns_loss: 5.0, catalog_sales_profit: 15.0 }]);
    |                                               ^^^^ expected `i32`, found floating-point number

error: aborting due to 9 previous errors; 4 warnings emitted

Some errors have detailed explanations: E0308, E0609.
For more information about an error, try `rustc --explain E0308`.
