// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:39Z
#[derive(Default, Debug, Clone, PartialEq)]
struct StoreSale {
        ss_store_sk: i32,
        ss_sold_date_sk: i32,
        ss_hdemo_sk: i32,
        ss_cdemo_sk: i32,
        ss_addr_sk: i32,
        ss_sales_price: f64,
        ss_net_profit: f64,
        ss_quantity: i32,
        ss_ext_sales_price: f64,
        ss_ext_wholesale_cost: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct Store {
        s_store_sk: i32,
        s_state: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct CustomerDemographics {
        cd_demo_sk: i32,
        cd_marital_status: &'static str,
        cd_education_status: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct HouseholdDemographics {
        hd_demo_sk: i32,
        hd_dep_count: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct CustomerAddress {
        ca_address_sk: i32,
        ca_country: &'static str,
        ca_state: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct DateDim {
        d_date_sk: i32,
        d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    ss_store_sk: i32,
    ss_sold_date_sk: i32,
    ss_hdemo_sk: i32,
    ss_cdemo_sk: i32,
    ss_addr_sk: i32,
    ss_sales_price: f64,
    ss_net_profit: f64,
    ss_quantity: i32,
    ss_ext_sales_price: f64,
    ss_ext_wholesale_cost: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store1 {
    s_store_sk: i32,
    s_state: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer_demographic {
    cd_demo_sk: i32,
    cd_marital_status: &'static str,
    cd_education_status: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Household_demographic {
    hd_demo_sk: i32,
    hd_dep_count: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer_addres {
    ca_address_sk: i32,
    ca_country: &'static str,
    ca_state: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Store_sale>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    avg_ss_quantity: f64,
    avg_ss_ext_sales_price: f64,
    avg_ss_ext_wholesale_cost: f64,
    sum_ss_ext_wholesale_cost: f64,
}

fn avg<T>(v: &[T]) -> f64 where T: Into<f64> + Copy {
    let sum: f64 = v.iter().map(|&x| x.into()).sum();
    sum / v.len() as f64
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let store_sales = vec![Store_sale { ss_store_sk: 1, ss_sold_date_sk: 1, ss_hdemo_sk: 1, ss_cdemo_sk: 1, ss_addr_sk: 1, ss_sales_price: 120.0, ss_net_profit: 150.0, ss_quantity: 10, ss_ext_sales_price: 100.0, ss_ext_wholesale_cost: 50.0 }];
    let store = vec![Store1 { s_store_sk: 1, s_state: "CA" }];
    let customer_demographics = vec![Customer_demographic { cd_demo_sk: 1, cd_marital_status: "M1", cd_education_status: "ES1" }];
    let household_demographics = vec![Household_demographic { hd_demo_sk: 1, hd_dep_count: 3 }];
    let customer_address = vec![Customer_addres { ca_address_sk: 1, ca_country: "United States", ca_state: "CA" }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_year: 2001 }];
    let filtered = { let mut tmp1 = Vec::new();for ss in &store_sales { for s in &store { if !(ss.ss_store_sk == s.s_store_sk) { continue; } for cd in &customer_demographics { if !(ss.ss_cdemo_sk == cd.cd_demo_sk && cd.cd_marital_status == "M1" && cd.cd_education_status == "ES1") { continue; } for hd in &household_demographics { if !(ss.ss_hdemo_sk == hd.hd_demo_sk && hd.hd_dep_count == 3) { continue; } for ca in &customer_address { if !(ss.ss_addr_sk == ca.ca_address_sk && ca.ca_country == "United States" && ca.ca_state == "CA") { continue; } for d in &date_dim { if !(ss.ss_sold_date_sk == d.d_date_sk && d.d_year == 2001) { continue; } tmp1.push(ss.clone()); } } } } } } tmp1 };
    let result = { let mut tmp2 = std::collections::HashMap::new();for r in &filtered { let key = Key {  }; tmp2.entry(key).or_insert_with(Vec::new).push(r.clone()); } let mut tmp3 = Vec::<Group>::new(); for (k,v) in tmp2 { tmp3.push(Group { key: k, items: v }); } tmp3.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp3 { result.push(Result { avg_ss_quantity: avg(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.ss_quantity); } tmp4 }), avg_ss_ext_sales_price: avg(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { tmp5.push(x.ss_ext_sales_price); } tmp5 }), avg_ss_ext_wholesale_cost: avg(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push(x.ss_ext_wholesale_cost); } tmp6 }), sum_ss_ext_wholesale_cost: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { tmp7.push(x.ss_ext_wholesale_cost); } tmp7 }) }); } result };
    _json(&result);
    assert!(result == vec![Result { avg_ss_quantity: 10.0, avg_ss_ext_sales_price: 100.0, avg_ss_ext_wholesale_cost: 50.0, sum_ss_ext_wholesale_cost: 50.0 }]);
}
