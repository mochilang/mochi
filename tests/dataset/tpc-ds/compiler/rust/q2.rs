// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:36Z
#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Web_sale {
    ws_sold_date_sk: i32,
    ws_ext_sales_price: f64,
    ws_sold_date_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Catalog_sale {
    cs_sold_date_sk: i32,
    cs_ext_sales_price: f64,
    cs_sold_date_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_week_seq: i32,
    d_day_name: &'static str,
    d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    sold_date_sk: i32,
    sales_price: f64,
    day: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result1 {
    sold_date_sk: i32,
    sales_price: f64,
    day: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    week_seq: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item {
    w: Result1,
    d: Date_dim,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result2 {
    d_week_seq: i32,
    sun_sales: i32,
    mon_sales: i32,
    tue_sales: i32,
    wed_sales: i32,
    thu_sales: i32,
    fri_sales: i32,
    sat_sales: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result3 {
    d_week_seq1: i32,
    sun_ratio: f64,
    mon_ratio: f64,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _union_all<T: Clone>(mut a: Vec<T>, b: Vec<T>) -> Vec<T> {
    a.extend(b);
    a
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let web_sales = vec![Web_sale { ws_sold_date_sk: 1, ws_ext_sales_price: 5.0, ws_sold_date_name: "Sunday" }, Web_sale { ws_sold_date_sk: 2, ws_ext_sales_price: 5.0, ws_sold_date_name: "Monday" }, Web_sale { ws_sold_date_sk: 8, ws_ext_sales_price: 10.0, ws_sold_date_name: "Sunday" }, Web_sale { ws_sold_date_sk: 9, ws_ext_sales_price: 10.0, ws_sold_date_name: "Monday" }];
    let catalog_sales = vec![Catalog_sale { cs_sold_date_sk: 1, cs_ext_sales_price: 5.0, cs_sold_date_name: "Sunday" }, Catalog_sale { cs_sold_date_sk: 2, cs_ext_sales_price: 5.0, cs_sold_date_name: "Monday" }, Catalog_sale { cs_sold_date_sk: 8, cs_ext_sales_price: 10.0, cs_sold_date_name: "Sunday" }, Catalog_sale { cs_sold_date_sk: 9, cs_ext_sales_price: 10.0, cs_sold_date_name: "Monday" }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_week_seq: 1, d_day_name: "Sunday", d_year: 1998 }, Date_dim { d_date_sk: 2, d_week_seq: 1, d_day_name: "Monday", d_year: 1998 }, Date_dim { d_date_sk: 8, d_week_seq: 54, d_day_name: "Sunday", d_year: 1999 }, Date_dim { d_date_sk: 9, d_week_seq: 54, d_day_name: "Monday", d_year: 1999 }];
    let wscs = _union_all(({ let mut tmp1 = Vec::new();for ws in &web_sales { tmp1.push(Result { sold_date_sk: ws.ws_sold_date_sk, sales_price: ws.ws_ext_sales_price, day: ws.ws_sold_date_name }); } tmp1 }), ({ let mut tmp2 = Vec::new();for cs in &catalog_sales { tmp2.push(Result1 { sold_date_sk: cs.cs_sold_date_sk, sales_price: cs.cs_ext_sales_price, day: cs.cs_sold_date_name }); } tmp2 }));
    let wswscs = { let mut tmp3 = std::collections::HashMap::new();for w in &wscs { for d in &date_dim { if !(w.sold_date_sk == d.d_date_sk) { continue; } let key = Key { week_seq: d.d_week_seq }; tmp3.entry(key).or_insert_with(Vec::new).push(Item {w: w.clone(), d: d.clone() }); } } let mut tmp4 = Vec::<Group>::new(); for (k,v) in tmp3 { tmp4.push(Group { key: k, items: v }); } tmp4.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp4 { result.push(Result2 { d_week_seq: g.key.week_seq, sun_sales: sum(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { if !(x.day == "Sunday") { continue; } tmp5.push(x.sales_price); } tmp5 }), mon_sales: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { if !(x.day == "Monday") { continue; } tmp6.push(x.sales_price); } tmp6 }), tue_sales: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { if !(x.day == "Tuesday") { continue; } tmp7.push(x.sales_price); } tmp7 }), wed_sales: sum(&{ let mut tmp8 = Vec::new();for x in &g.clone().items { if !(x.day == "Wednesday") { continue; } tmp8.push(x.sales_price); } tmp8 }), thu_sales: sum(&{ let mut tmp9 = Vec::new();for x in &g.clone().items { if !(x.day == "Thursday") { continue; } tmp9.push(x.sales_price); } tmp9 }), fri_sales: sum(&{ let mut tmp10 = Vec::new();for x in &g.clone().items { if !(x.day == "Friday") { continue; } tmp10.push(x.sales_price); } tmp10 }), sat_sales: sum(&{ let mut tmp11 = Vec::new();for x in &g.clone().items { if !(x.day == "Saturday") { continue; } tmp11.push(x.sales_price); } tmp11 }) }); } result };
    let year1 = { let mut tmp12 = Vec::new();for w in &wswscs { if !(w.d_week_seq == 1) { continue; } tmp12.push(w.clone()); } tmp12 };
    let year2 = { let mut tmp13 = Vec::new();for w in &wswscs { if !(w.d_week_seq == 54) { continue; } tmp13.push(w.clone()); } tmp13 };
    let result = { let mut tmp14 = Vec::new();for y in &year1 { for z in &year2 { if !(y.d_week_seq == z.d_week_seq - 53) { continue; } tmp14.push(Result3 { d_week_seq1: y.d_week_seq, sun_ratio: y.sun_sales / z.sun_sales, mon_ratio: y.mon_sales / z.mon_sales }); } } tmp14 };
    _json(&result);
    assert!(result == vec![Result3 { d_week_seq1: 1, sun_ratio: 0.5, mon_ratio: 0.5 }]);
}
