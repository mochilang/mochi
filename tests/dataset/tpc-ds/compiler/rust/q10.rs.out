#[derive(Clone, Debug, Default)]
struct Customer {
    c_customer_sk: i64,
    c_current_addr_sk: i64,
    c_current_cdemo_sk: i64,
}

#[derive(Clone, Debug, Default)]
struct CustomerAddress {
    ca_address_sk: i64,
    ca_county: String,
}

#[derive(Clone, Debug, Default)]
struct CustomerDemographics {
    cd_demo_sk: i64,
    cd_gender: String,
    cd_marital_status: String,
    cd_education_status: String,
    cd_purchase_estimate: i64,
    cd_credit_rating: String,
    cd_dep_count: i64,
    cd_dep_employed_count: i64,
    cd_dep_college_count: i64,
}

#[derive(Clone, Debug, Default)]
struct StoreSale {
    ss_customer_sk: i64,
    ss_sold_date_sk: i64,
}

#[derive(Clone, Debug, Default)]
struct DateDim {
    d_date_sk: i64,
    d_year: i64,
    d_moy: i64,
}

fn test_TPCDS_Q10_demographics_count() {
    expect(result == vec![std::collections::HashMap::from([("cd_gender".to_string(), "F"), ("cd_marital_status".to_string(), "M"), ("cd_education_status".to_string(), "College"), ("cnt1".to_string(), 1), ("cd_purchase_estimate".to_string(), 5000), ("cnt2".to_string(), 1), ("cd_credit_rating".to_string(), "Good"), ("cnt3".to_string(), 1), ("cd_dep_count".to_string(), 1), ("cnt4".to_string(), 1), ("cd_dep_employed_count".to_string(), 1), ("cnt5".to_string(), 1), ("cd_dep_college_count".to_string(), 0), ("cnt6".to_string(), 1)])]);
}

fn main() {
    let mut customer = vec![std::collections::HashMap::from([("c_customer_sk".to_string(), 1), ("c_current_addr_sk".to_string(), 1), ("c_current_cdemo_sk".to_string(), 1)])];
    let mut customer_address = vec![std::collections::HashMap::from([("ca_address_sk".to_string(), 1), ("ca_county".to_string(), "CountyA")])];
    let mut customer_demographics = vec![std::collections::HashMap::from([("cd_demo_sk".to_string(), 1), ("cd_gender".to_string(), "F"), ("cd_marital_status".to_string(), "M"), ("cd_education_status".to_string(), "College"), ("cd_purchase_estimate".to_string(), 5000), ("cd_credit_rating".to_string(), "Good"), ("cd_dep_count".to_string(), 1), ("cd_dep_employed_count".to_string(), 1), ("cd_dep_college_count".to_string(), 0)])];
    let mut store_sales = vec![std::collections::HashMap::from([("ss_customer_sk".to_string(), 1), ("ss_sold_date_sk".to_string(), 1)])];
    let mut web_sales = vec![];
    let mut catalog_sales = vec![];
    let mut date_dim = vec![std::collections::HashMap::from([("d_date_sk".to_string(), 1), ("d_year".to_string(), 2000), ("d_moy".to_string(), 2)])];
    let mut active = {
    let mut _res = Vec::new();
    for c in customer.clone() {
        for ca in customer_address.clone() {
            if !(_map_get(&c, &"c_current_addr_sk".to_string()) == _map_get(&ca, &"ca_address_sk".to_string()) && _map_get(&ca, &"ca_county".to_string()) == "CountyA") { continue; }
            for cd in customer_demographics.clone() {
                if !(_map_get(&c, &"c_current_cdemo_sk".to_string()) == _map_get(&cd, &"cd_demo_sk".to_string())) { continue; }
                if _map_get(&c, &"c_current_addr_sk".to_string()) == _map_get(&ca, &"ca_address_sk".to_string()) && _map_get(&ca, &"ca_county".to_string()) == "CountyA" && _map_get(&c, &"c_current_cdemo_sk".to_string()) == _map_get(&cd, &"cd_demo_sk".to_string()) && exists({
    let mut _res = Vec::new();
    for ss in store_sales.clone() {
        for d in date_dim.clone() {
            if !(_map_get(&ss, &"ss_sold_date_sk".to_string()) == _map_get(&d, &"d_date_sk".to_string())) { continue; }
            if _map_get(&ss, &"ss_sold_date_sk".to_string()) == _map_get(&d, &"d_date_sk".to_string()) && _map_get(&ss, &"ss_customer_sk".to_string()) == _map_get(&c, &"c_customer_sk".to_string()) && _map_get(&d, &"d_year".to_string()) == 2000 && _map_get(&d, &"d_moy".to_string()) >= 2 && _map_get(&d, &"d_moy".to_string()) <= 5 {
                _res.push(ss);
            }
        }
    }
    _res
}) {
                    _res.push(cd);
                }
            }
        }
    }
    _res
};
    let mut result = {
    #[derive(Clone, Debug)]
    struct Group { key: std::collections::HashMap<String, std::boxed::Box<dyn std::any::Any>>, items: Vec<std::collections::HashMap<String, std::boxed::Box<dyn std::any::Any>>> }
    let mut groups: std::collections::HashMap<String, Group> = std::collections::HashMap::new();
    let mut order: Vec<String> = Vec::new();
    for a in active.clone() {
        let key: std::collections::HashMap<String, std::boxed::Box<dyn std::any::Any>> = std::collections::HashMap::from([("gender".to_string(), _map_get(&a, &"cd_gender".to_string())), ("marital".to_string(), _map_get(&a, &"cd_marital_status".to_string())), ("education".to_string(), _map_get(&a, &"cd_education_status".to_string())), ("purchase".to_string(), _map_get(&a, &"cd_purchase_estimate".to_string())), ("credit".to_string(), _map_get(&a, &"cd_credit_rating".to_string())), ("dep".to_string(), _map_get(&a, &"cd_dep_count".to_string())), ("depemp".to_string(), _map_get(&a, &"cd_dep_employed_count".to_string())), ("depcol".to_string(), _map_get(&a, &"cd_dep_college_count".to_string()))]);
        let ks = format!("{:?}", key.clone());
        if !groups.contains_key(&ks) {
            groups.insert(ks.clone(), Group{ key: key.clone(), items: Vec::new() });
            order.push(ks.clone());
        }
        groups.get_mut(&ks).unwrap().items.push(a.clone());
    }
    let mut _res: Vec<std::collections::HashMap<String, std::boxed::Box<dyn std::any::Any>>> = Vec::new();
    for ks in order {
        let g = groups.get(&ks).unwrap().clone();
        _res.push(std::collections::HashMap::from([("cd_gender".to_string(), _map_get(&_map_get(&g, &"key".to_string()), &"gender".to_string())), ("cd_marital_status".to_string(), _map_get(&_map_get(&g, &"key".to_string()), &"marital".to_string())), ("cd_education_status".to_string(), _map_get(&_map_get(&g, &"key".to_string()), &"education".to_string())), ("cnt1".to_string(), _count(&{
    let mut _res = Vec::new();
    for _ in g {
        _res.push(_);
    }
    _res
})), ("cd_purchase_estimate".to_string(), _map_get(&_map_get(&g, &"key".to_string()), &"purchase".to_string())), ("cnt2".to_string(), _count(&{
    let mut _res = Vec::new();
    for _ in g {
        _res.push(_);
    }
    _res
})), ("cd_credit_rating".to_string(), _map_get(&_map_get(&g, &"key".to_string()), &"credit".to_string())), ("cnt3".to_string(), _count(&{
    let mut _res = Vec::new();
    for _ in g {
        _res.push(_);
    }
    _res
})), ("cd_dep_count".to_string(), _map_get(&_map_get(&g, &"key".to_string()), &"dep".to_string())), ("cnt4".to_string(), _count(&{
    let mut _res = Vec::new();
    for _ in g {
        _res.push(_);
    }
    _res
})), ("cd_dep_employed_count".to_string(), _map_get(&_map_get(&g, &"key".to_string()), &"depemp".to_string())), ("cnt5".to_string(), _count(&{
    let mut _res = Vec::new();
    for _ in g {
        _res.push(_);
    }
    _res
})), ("cd_dep_college_count".to_string(), _map_get(&_map_get(&g, &"key".to_string()), &"depcol".to_string())), ("cnt6".to_string(), _count(&{
    let mut _res = Vec::new();
    for _ in g {
        _res.push(_);
    }
    _res
}))]));
    }
    _res
}
;
    json(result);
    test_TPCDS_Q10_demographics_count();
}

fn _count<T>(v: &[T]) -> i32 {
    v.len() as i32
}
fn _map_get<K: std::cmp::Eq + std::hash::Hash, V: Clone>(m: &std::collections::HashMap<K, V>, k: &K) -> V {
    m.get(k).unwrap().clone()
}
fn expect(cond: bool) {
    if !cond { panic!("expect failed"); }
}
