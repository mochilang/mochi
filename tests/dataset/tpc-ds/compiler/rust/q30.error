rustc: exit status 1
warning: type `Web_return` should have an upper camel case name
 --> /tmp/q30.rs:3:8
  |
3 | struct Web_return {
  |        ^^^^^^^^^^ help: convert the identifier to upper camel case: `WebReturn`
  |
  = note: `#[warn(non_camel_case_types)]` on by default

warning: type `Date_dim` should have an upper camel case name
  --> /tmp/q30.rs:11:8
   |
11 | struct Date_dim {
   |        ^^^^^^^^ help: convert the identifier to upper camel case: `DateDim`

warning: type `Customer_addres` should have an upper camel case name
  --> /tmp/q30.rs:17:8
   |
17 | struct Customer_addres {
   |        ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `CustomerAddres`

error[E0609]: no field `wr_return_amt` on type `&Item`
  --> /tmp/q30.rs:95:884
   |
95 | ...= Vec::new();for x in &g.clone().items { tmp3.push(x.wr_return_amt); } tmp3 }) }); } result };
   |                                                         ^^^^^^^^^^^^^ unknown field
   |
help: one of the expressions' fields has a field of the same name
   |
95 |     let customer_total_return = { let mut tmp1 = std::collections::HashMap::new();for wr in &web_returns { for d in &date_dim { if !(wr.wr_returned_date_sk == d.d_date_sk) { continue; } for ca in &customer_address { if !(wr.wr_returning_addr_sk == ca.ca_address_sk) { continue; } if !(d.d_year == 2000 && ca.ca_state == "CA") { continue; } let key = Key { cust: wr.wr_returning_customer_sk, state: ca.ca_state }; tmp1.entry(key).or_insert_with(Vec::new).push(Item {wr: wr.clone(), d: d.clone(), ca: ca.clone() }); } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { ctr_customer_sk: g.key.cust, ctr_state: g.key.state, ctr_total_return: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.wr.wr_return_amt); } tmp3 }) }); } result };
   |

error[E0308]: mismatched types
  --> /tmp/q30.rs:99:119
   |
99 |     assert!(result == vec![Result3 { c_customer_id: "C1", c_first_name: "John", c_last_name: "Doe", ctr_total_return: 150.0 }]);
   |                                                                                                                       ^^^^^ expected `i32`, found floating-point number

error: aborting due to 2 previous errors; 3 warnings emitted

Some errors have detailed explanations: E0308, E0609.
For more information about an error, try `rustc --explain E0308`.
