// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:10:41Z
#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    ss_cdemo_sk: i32,
    ss_sold_date_sk: i32,
    ss_item_sk: i32,
    ss_promo_sk: i32,
    ss_quantity: i32,
    ss_list_price: f64,
    ss_coupon_amt: f64,
    ss_sales_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer_demographic {
    cd_demo_sk: i32,
    cd_gender: &'static str,
    cd_marital_status: &'static str,
    cd_education_status: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item {
    i_item_sk: i32,
    i_item_id: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Promotion {
    p_promo_sk: i32,
    p_channel_email: &'static str,
    p_channel_event: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    i_item_id: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item1 {
    ss: Store_sale,
    cd: Customer_demographic,
    d: Date_dim,
    i: Item,
    p: Promotion,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item1>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    i_item_id: &'static str,
    agg1: f64,
    agg2: f64,
    agg3: f64,
    agg4: f64,
}

fn avg<T>(v: &[T]) -> f64 where T: Into<f64> + Copy {
    let sum: f64 = v.iter().map(|&x| x.into()).sum();
    sum / v.len() as f64
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let store_sales = vec![Store_sale { ss_cdemo_sk: 1, ss_sold_date_sk: 1, ss_item_sk: 1, ss_promo_sk: 1, ss_quantity: 5, ss_list_price: 10.0, ss_coupon_amt: 2.0, ss_sales_price: 8.0 }];
    let customer_demographics = vec![Customer_demographic { cd_demo_sk: 1, cd_gender: "M", cd_marital_status: "S", cd_education_status: "College" }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_year: 1998 }];
    let item = vec![Item { i_item_sk: 1, i_item_id: "I1" }];
    let promotion = vec![Promotion { p_promo_sk: 1, p_channel_email: "N", p_channel_event: "Y" }];
    let result = { let mut tmp1 = std::collections::HashMap::new();for ss in &store_sales { for cd in &customer_demographics { if !(ss.ss_cdemo_sk == cd.cd_demo_sk) { continue; } for d in &date_dim { if !(ss.ss_sold_date_sk == d.d_date_sk) { continue; } for i in &item { if !(ss.ss_item_sk == i.i_item_sk) { continue; } for p in &promotion { if !(ss.ss_promo_sk == p.p_promo_sk) { continue; } if !(cd.cd_gender == "M" && cd.cd_marital_status == "S" && cd.cd_education_status == "College" && (p.p_channel_email == "N" || p.p_channel_event == "N") && d.d_year == 1998) { continue; } let key = Key { i_item_id: i.i_item_id }; tmp1.entry(key).or_insert_with(Vec::new).push(Item1 {ss: ss.clone(), cd: cd.clone(), d: d.clone(), i: i.clone(), p: p.clone() }); } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); tmp2.sort_by(|a,b| (a.key.i_item_id).partial_cmp(&(b.key.i_item_id)).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { i_item_id: g.key.i_item_id, agg1: avg(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.ss.ss_quantity); } tmp3 }), agg2: avg(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.ss.ss_list_price); } tmp4 }), agg3: avg(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { tmp5.push(x.ss.ss_coupon_amt); } tmp5 }), agg4: avg(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push(x.ss.ss_sales_price); } tmp6 }) }); } result };
    _json(&result);
    assert!(result == vec![Result { i_item_id: "I1", agg1: 5.0, agg2: 10.0, agg3: 2.0, agg4: 8.0 }]);
}
