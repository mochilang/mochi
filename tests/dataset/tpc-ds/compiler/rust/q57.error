rustc: exit status 1
warning: type `Catalog_sale` should have an upper camel case name
 --> /tmp/q57.rs:3:8
  |
3 | struct Catalog_sale {
  |        ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `CatalogSale`
  |
  = note: `#[warn(non_camel_case_types)]` on by default

warning: type `Call_center` should have an upper camel case name
  --> /tmp/q57.rs:18:8
   |
18 | struct Call_center {
   |        ^^^^^^^^^^^ help: convert the identifier to upper camel case: `CallCenter`

warning: type `Date_dim` should have an upper camel case name
  --> /tmp/q57.rs:24:8
   |
24 | struct Date_dim {
   |        ^^^^^^^^ help: convert the identifier to upper camel case: `DateDim`

error[E0609]: no field `price` on type `&Item1`
   --> /tmp/q57.rs:108:847
    |
108 | ...mp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.price); } tmp3 }) }); } result };
    |                                                             ^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
108 |     let grouped = { let mut tmp1 = std::collections::HashMap::new();for cs in &catalog_sales { for i in &item { if !(cs.item == i.i_item_sk) { continue; } for d in &date_dim { if !(cs.date == d.d_date_sk) { continue; } for cc in &call_center { if !(cs.call == cc.cc_call_center_sk) { continue; } let key = Key { cat: i.i_category, call: cc.cc_name, year: d.d_year }; tmp1.entry(key).or_insert_with(Vec::new).push(Item1 {cs: cs.clone(), i: i.clone(), d: d.clone(), cc: cc.clone() }); } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { cat: g.key.cat, call: g.key.call, year: g.key.year, sum_sales: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.cs.price); } tmp3 }) }); } result };
    |

error: aborting due to 1 previous error; 3 warnings emitted

For more information about this error, try `rustc --explain E0609`.
