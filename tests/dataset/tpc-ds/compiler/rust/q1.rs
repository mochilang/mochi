// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:10:39Z
#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_return {
    sr_returned_date_sk: i32,
    sr_customer_sk: i32,
    sr_store_sk: i32,
    sr_return_amt: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store {
    s_store_sk: i32,
    s_state: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer {
    c_customer_sk: i32,
    c_customer_id: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    customer_sk: i32,
    store_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item {
    sr: Store_return,
    d: Date_dim,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    ctr_customer_sk: i32,
    ctr_store_sk: i32,
    ctr_total_return: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result1 {
    c_customer_id: &'static str,
}

fn avg<T>(v: &[T]) -> f64 where T: Into<f64> + Copy {
    let sum: f64 = v.iter().map(|&x| x.into()).sum();
    sum / v.len() as f64
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let store_returns = vec![Store_return { sr_returned_date_sk: 1, sr_customer_sk: 1, sr_store_sk: 10, sr_return_amt: 20.0 }, Store_return { sr_returned_date_sk: 1, sr_customer_sk: 2, sr_store_sk: 10, sr_return_amt: 50.0 }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_year: 1998 }];
    let store = vec![Store { s_store_sk: 10, s_state: "TN" }];
    let customer = vec![Customer { c_customer_sk: 1, c_customer_id: "C1" }, Customer { c_customer_sk: 2, c_customer_id: "C2" }];
    let customer_total_return = { let mut tmp1 = std::collections::HashMap::new();for sr in &store_returns { for d in &date_dim { if !(sr.sr_returned_date_sk == d.d_date_sk && d.d_year == 1998) { continue; } let key = Key { customer_sk: sr.sr_customer_sk, store_sk: sr.sr_store_sk }; tmp1.entry(key).or_insert_with(Vec::new).push(Item {sr: sr.clone(), d: d.clone() }); } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { ctr_customer_sk: g.key.customer_sk, ctr_store_sk: g.key.store_sk, ctr_total_return: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.sr_return_amt); } tmp3 }) }); } result };
    let result = { let mut tmp5 = Vec::new();for ctr1 in &customer_total_return { for s in &store { if !(ctr1.ctr_store_sk == s.s_store_sk) { continue; } for c in &customer { if !(ctr1.ctr_customer_sk == c.c_customer_sk) { continue; } if !((ctr1.ctr_total_return as f64) > avg(&{ let mut tmp4 = Vec::new();for ctr2 in &customer_total_return { if !(ctr1.ctr_store_sk == ctr2.ctr_store_sk) { continue; } tmp4.push(ctr2.ctr_total_return); } tmp4 }) * 1.2 && s.s_state == "TN") { continue; } let tmp6 = Result1 { c_customer_id: c.c_customer_id }; let tmp7 = c.c_customer_id; tmp5.push((tmp7, tmp6)); } } } tmp5.sort_by(|a,b| a.0.partial_cmp(&b.0).unwrap()); let mut tmp8 = Vec::new(); for p in tmp5 { tmp8.push(p.1); } tmp8 };
    _json(&result);
    assert!(result == vec![Result1 { c_customer_id: "C2" }]);
}
