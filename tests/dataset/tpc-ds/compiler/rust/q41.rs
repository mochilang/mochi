// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:10:56Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item {
    product_name: &'static str,
    manufact_id: i32,
    manufact: i32,
    category: &'static str,
    color: &'static str,
    units: &'static str,
    size: &'static str,
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let item = vec![Item { product_name: "Blue Shirt", manufact_id: 100, manufact: 1, category: "Women", color: "blue", units: "pack", size: "M" }, Item { product_name: "Red Dress", manufact_id: 120, manufact: 1, category: "Women", color: "red", units: "pack", size: "M" }, Item { product_name: "Pants", manufact_id: 200, manufact: 2, category: "Men", color: "black", units: "pair", size: "L" }];
    let lower = 100;
    let result = { let mut tmp2 = Vec::new();for i1 in &item { if !(i1.manufact_id >= lower && i1.manufact_id <= lower + 40 && { let mut tmp1 = Vec::new();for i2 in &item { if !(i2.manufact == i1.manufact && i2.category == i1.category) { continue; } tmp1.push(i2.clone()); } tmp1 }.len() as i32 > 1) { continue; } let tmp3 = i1.product_name; let tmp4 = i1.product_name; tmp2.push((tmp4, tmp3)); } tmp2.sort_by(|a,b| a.0.partial_cmp(&b.0).unwrap()); let mut tmp5 = Vec::new(); for p in tmp2 { tmp5.push(p.1); } tmp5 };
    _json(&result);
    assert!(result == vec!["Blue Shirt", "Red Dress"]);
}
