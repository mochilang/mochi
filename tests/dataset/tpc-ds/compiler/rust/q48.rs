// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:09:28Z
#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    cdemo_sk: i32,
    addr_sk: i32,
    sold_date_sk: i32,
    sales_price: f64,
    net_profit: f64,
    quantity: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store {
    s_store_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer_demographic {
    cd_demo_sk: i32,
    cd_marital_status: &'static str,
    cd_education_status: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer_addres {
    ca_address_sk: i32,
    ca_country: &'static str,
    ca_state: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_year: i32,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let store_sales = vec![Store_sale { cdemo_sk: 1, addr_sk: 1, sold_date_sk: 1, sales_price: 120.0, net_profit: 1000.0, quantity: 5 }, Store_sale { cdemo_sk: 2, addr_sk: 2, sold_date_sk: 1, sales_price: 60.0, net_profit: 2000.0, quantity: 10 }, Store_sale { cdemo_sk: 3, addr_sk: 3, sold_date_sk: 1, sales_price: 170.0, net_profit: 10000.0, quantity: 20 }];
    let store = vec![Store { s_store_sk: 1 }];
    let customer_demographics = vec![Customer_demographic { cd_demo_sk: 1, cd_marital_status: "S", cd_education_status: "E1" }, Customer_demographic { cd_demo_sk: 2, cd_marital_status: "M", cd_education_status: "E2" }, Customer_demographic { cd_demo_sk: 3, cd_marital_status: "W", cd_education_status: "E3" }];
    let customer_address = vec![Customer_addres { ca_address_sk: 1, ca_country: "United States", ca_state: "TX" }, Customer_addres { ca_address_sk: 2, ca_country: "United States", ca_state: "CA" }, Customer_addres { ca_address_sk: 3, ca_country: "United States", ca_state: "NY" }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_year: 2000 }];
    let year = 2000;
    let states1 = vec!["TX"];
    let states2 = vec!["CA"];
    let states3 = vec!["NY"];
    let qty_base = { let mut tmp1 = Vec::new();for ss in &store_sales { for cd in &customer_demographics { if !(ss.cdemo_sk == cd.cd_demo_sk) { continue; } for ca in &customer_address { if !(ss.addr_sk == ca.ca_address_sk) { continue; } for d in &date_dim { if !(ss.sold_date_sk == d.d_date_sk) { continue; } if !(d.d_year == year && ((cd.cd_marital_status == "S" && cd.cd_education_status == "E1" && ss.sales_price >= 100.0 && ss.sales_price <= 150.0) || (cd.cd_marital_status == "M" && cd.cd_education_status == "E2" && ss.sales_price >= 50.0 && ss.sales_price <= 100.0) || (cd.cd_marital_status == "W" && cd.cd_education_status == "E3" && ss.sales_price >= 150.0 && ss.sales_price <= 200.0)) && ((states1.contains(&ca.ca_state) && ss.net_profit >= 0 as f64 && ss.net_profit <= 2000 as f64) || (states2.contains(&ca.ca_state) && ss.net_profit >= 150 as f64 && ss.net_profit <= 3000 as f64) || (states3.contains(&ca.ca_state) && ss.net_profit >= 50 as f64 && ss.net_profit <= 25000 as f64))) { continue; } tmp1.push(ss.quantity); } } } } tmp1 };
    let qty = qty_base;
    let result = sum(&qty);
    _json(&result);
    assert!(result == 35 as f64);
}
