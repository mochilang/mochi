// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:49Z
#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    item: i32,
    sold_date: i32,
    price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item {
    i_item_sk: i32,
    i_brand_id: i32,
    i_brand: &'static str,
    i_manager_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_year: i32,
    d_moy: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    year: i32,
    brand_id: i32,
    brand: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item1 {
    ss: Store_sale,
    i: Item,
    d: Date_dim,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item1>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    d_year: i32,
    brand_id: i32,
    ext_price: i32,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let store_sales = vec![Store_sale { item: 1, sold_date: 1, price: 10.0 }, Store_sale { item: 2, sold_date: 1, price: 22.0 }, Store_sale { item: 1, sold_date: 1, price: 20.0 }];
    let item = vec![Item { i_item_sk: 1, i_brand_id: 1, i_brand: "B1", i_manager_id: 1 }, Item { i_item_sk: 2, i_brand_id: 2, i_brand: "B2", i_manager_id: 1 }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_year: 2001, d_moy: 11 }];
    let filtered = { let mut tmp1 = std::collections::HashMap::new();for ss in &store_sales { for i in &item { if !(ss.item == i.i_item_sk && i.i_manager_id == 1) { continue; } for d in &date_dim { if !(ss.sold_date == d.d_date_sk && d.d_year == 2001 && d.d_moy == 11) { continue; } let key = Key { year: d.d_year, brand_id: i.i_brand_id, brand: i.i_brand }; tmp1.entry(key).or_insert_with(Vec::new).push(Item1 {ss: ss.clone(), i: i.clone(), d: d.clone() }); } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { d_year: g.key.year, brand_id: g.key.brand_id, ext_price: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.price); } tmp3 }) }); } result };
    let result = { let mut tmp4 = Vec::new();for r in &filtered { let tmp5 = r.clone(); let tmp6 = (r.d_year, -r.ext_price, r.brand_id); tmp4.push((tmp6, tmp5)); } tmp4.sort_by(|a,b| a.0.partial_cmp(&b.0).unwrap()); let mut tmp7 = Vec::new(); for p in tmp4 { tmp7.push(p.1); } tmp7 };
    _json(&result);
    assert!(result == vec![Result { d_year: 2001, brand_id: 1, ext_price: 30.0 }, Result { d_year: 2001, brand_id: 2, ext_price: 22.0 }]);
}
