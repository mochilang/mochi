#[derive(Clone, Debug, Default)]
struct CatalogSale {
    cs_bill_customer_sk: i64,
    cs_sales_price: f64,
    cs_sold_date_sk: i64,
}

#[derive(Clone, Debug, Default)]
struct Customer {
    c_customer_sk: i64,
    c_current_addr_sk: i64,
}

#[derive(Clone, Debug, Default)]
struct CustomerAddress {
    ca_address_sk: i64,
    ca_zip: String,
    ca_state: String,
}

#[derive(Clone, Debug, Default)]
struct DateDim {
    d_date_sk: i64,
    d_qoy: i64,
    d_year: i64,
}

fn test_TPCDS_Q15_zip() {
    expect(filtered == vec![std::collections::HashMap::from([("ca_zip".to_string(), "85669"), ("sum_sales".to_string(), 600.0)])]);
}

fn main() {
    let mut catalog_sales = vec![std::collections::HashMap::from([("cs_bill_customer_sk".to_string(), 1), ("cs_sales_price".to_string(), 600.0), ("cs_sold_date_sk".to_string(), 1)])];
    let mut customer = vec![std::collections::HashMap::from([("c_customer_sk".to_string(), 1), ("c_current_addr_sk".to_string(), 1)])];
    let mut customer_address = vec![std::collections::HashMap::from([("ca_address_sk".to_string(), 1), ("ca_zip".to_string(), "85669"), ("ca_state".to_string(), "CA")])];
    let mut date_dim = vec![std::collections::HashMap::from([("d_date_sk".to_string(), 1), ("d_qoy".to_string(), 1), ("d_year".to_string(), 2000)])];
    let mut filtered = {
    let mut _pairs = Vec::new();
    for cs in catalog_sales.clone() {
        for c in customer.clone() {
            if !(_map_get(&cs, &"cs_bill_customer_sk".to_string()) == _map_get(&c, &"c_customer_sk".to_string())) { continue; }
            for ca in customer_address.clone() {
                if !(_map_get(&c, &"c_current_addr_sk".to_string()) == _map_get(&ca, &"ca_address_sk".to_string())) { continue; }
                for d in date_dim.clone() {
                    if !(_map_get(&cs, &"cs_sold_date_sk".to_string()) == _map_get(&d, &"d_date_sk".to_string())) { continue; }
                    if _map_get(&cs, &"cs_bill_customer_sk".to_string()) == _map_get(&c, &"c_customer_sk".to_string()) && _map_get(&c, &"c_current_addr_sk".to_string()) == _map_get(&ca, &"ca_address_sk".to_string()) && _map_get(&cs, &"cs_sold_date_sk".to_string()) == _map_get(&d, &"d_date_sk".to_string()) && (vec!["CA".to_string(), "WA".to_string(), "GA".to_string()].contains(&vec!["85669".to_string(), "86197".to_string(), "88274".to_string(), "83405".to_string(), "86475".to_string(), "85392".to_string(), "85460".to_string(), "80348".to_string(), "81792".to_string()].contains(&substr(&_map_get(&ca, &"ca_zip".to_string()), 0, 5)) || _map_get(&ca, &"ca_state".to_string())) || _map_get(&cs, &"cs_sales_price".to_string()) > 500) && _map_get(&d, &"d_qoy".to_string()) == 1 && _map_get(&d, &"d_year".to_string()) == 2000 {
                        _pairs.push((_map_get(&_map_get(&g, &"key".to_string()), &"zip".to_string()), std::collections::HashMap::from([("ca_zip".to_string(), _map_get(&_map_get(&g, &"key".to_string()), &"zip".to_string())), ("sum_sales".to_string(), _sum(&{
    let mut _res = Vec::new();
    for x in g {
        _res.push(_map_get(&x, &"cs_sales_price".to_string()));
    }
    _res
}))])));
                    }
                }
            }
        }
    }
    _pairs.sort_by(|a, b| a.0.partial_cmp(&b.0).unwrap());
    let mut _res = Vec::new();
    for p in _pairs { _res.push(p.1); }
    _res
};
    json(filtered);
    test_TPCDS_Q15_zip();
}

fn _map_get<K: std::cmp::Eq + std::hash::Hash, V: Clone>(m: &std::collections::HashMap<K, V>, k: &K) -> V {
    m.get(k).unwrap().clone()
}
fn _sum<T: Into<f64> + Copy>(v: &[T]) -> f64 {
    if v.is_empty() { return 0.0 }
    let mut sum = 0.0;
    for &it in v { sum += Into::<f64>::into(it); }
    sum
}
fn expect(cond: bool) {
    if !cond { panic!("expect failed"); }
}
