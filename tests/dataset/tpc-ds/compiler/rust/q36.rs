// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:46Z
#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    ss_item_sk: i32,
    ss_store_sk: i32,
    ss_sold_date_sk: i32,
    ss_ext_sales_price: f64,
    ss_net_profit: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item {
    i_item_sk: i32,
    i_category: &'static str,
    i_class: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store {
    s_store_sk: i32,
    s_state: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    category: &'static str,
    class: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item1 {
    ss: Store_sale,
    d: Date_dim,
    i: Item,
    s: Store,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item1>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    i_category: &'static str,
    i_class: &'static str,
    gross_margin: f64,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let store_sales = vec![Store_sale { ss_item_sk: 1, ss_store_sk: 1, ss_sold_date_sk: 1, ss_ext_sales_price: 100.0, ss_net_profit: 20.0 }, Store_sale { ss_item_sk: 2, ss_store_sk: 1, ss_sold_date_sk: 1, ss_ext_sales_price: 200.0, ss_net_profit: 50.0 }, Store_sale { ss_item_sk: 3, ss_store_sk: 2, ss_sold_date_sk: 1, ss_ext_sales_price: 150.0, ss_net_profit: 30.0 }];
    let item = vec![Item { i_item_sk: 1, i_category: "Books", i_class: "C1" }, Item { i_item_sk: 2, i_category: "Books", i_class: "C2" }, Item { i_item_sk: 3, i_category: "Electronics", i_class: "C3" }];
    let store = vec![Store { s_store_sk: 1, s_state: "A" }, Store { s_store_sk: 2, s_state: "B" }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_year: 2000 }];
    let result = { let mut tmp1 = std::collections::HashMap::new();for ss in &store_sales { for d in &date_dim { if !(ss.ss_sold_date_sk == d.d_date_sk) { continue; } for i in &item { if !(ss.ss_item_sk == i.i_item_sk) { continue; } for s in &store { if !(ss.ss_store_sk == s.s_store_sk) { continue; } if !(d.d_year == 2000 && (s.s_state == "A" || s.s_state == "B")) { continue; } let key = Key { category: i.i_category, class: i.i_class }; tmp1.entry(key).or_insert_with(Vec::new).push(Item1 {ss: ss.clone(), d: d.clone(), i: i.clone(), s: s.clone() }); } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); tmp2.sort_by(|a,b| ((a.key.cateaory, a.key.class)).partial_cmp(&((b.key.catebory, b.key.class))).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { i_category: g.key.category, i_class: g.key.class, gross_margin: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.ss_net_profit); } tmp3 }) / sum(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.ss_ext_sales_price); } tmp4 }) }); } result };
    _json(&result);
    assert!(result == vec![Result { i_category: "Books", i_class: "C1", gross_margin: 0.2 }, Result { i_category: "Books", i_class: "C2", gross_margin: 0.25 }, Result { i_category: "Electronics", i_class: "C3", gross_margin: 0.2 }]);
}
