// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:47Z
#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    sold_date_sk: i32,
    item_sk: i32,
    ext_sales_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item {
    i_item_sk: i32,
    i_manager_id: i32,
    i_category_id: i32,
    i_category: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_year: i32,
    d_moy: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    d_year: i32,
    i_category_id: i32,
    i_category: &'static str,
    price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    d_year: i32,
    i_category_id: i32,
    i_category: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Result>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result1 {
    d_year: i32,
    i_category_id: i32,
    i_category: &'static str,
    sum_ss_ext_sales_price: f64,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let store_sales = vec![Store_sale { sold_date_sk: 1, item_sk: 1, ext_sales_price: 10.0 }, Store_sale { sold_date_sk: 1, item_sk: 2, ext_sales_price: 20.0 }, Store_sale { sold_date_sk: 2, item_sk: 1, ext_sales_price: 15.0 }];
    let item = vec![Item { i_item_sk: 1, i_manager_id: 1, i_category_id: 100, i_category: "CatA" }, Item { i_item_sk: 2, i_manager_id: 1, i_category_id: 200, i_category: "CatB" }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_year: 2020, d_moy: 5 }, Date_dim { d_date_sk: 2, d_year: 2021, d_moy: 5 }];
    let month = 5;
    let year = 2020;
    let records = { let mut tmp1 = Vec::new();for dt in &date_dim { for ss in &store_sales { if !(ss.sold_date_sk == dt.d_date_sk) { continue; } for it in &item { if !(ss.item_sk == it.i_item_sk) { continue; } if !(it.i_manager_id == 1 && dt.d_moy == month && dt.d_year == year) { continue; } tmp1.push(Result { d_year: dt.d_year, i_category_id: it.i_category_id, i_category: it.i_category, price: ss.ext_sales_price }); } } } tmp1 };
    let grouped = { let mut tmp2 = std::collections::HashMap::new();for r in &records { let key = Key { d_year: r.d_year, i_category_id: r.i_category_id, i_category: r.i_category }; tmp2.entry(key).or_insert_with(Vec::new).push(r.clone()); } let mut tmp3 = Vec::<Group>::new(); for (k,v) in tmp2 { tmp3.push(Group { key: k, items: v }); } tmp3.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp3 { result.push(Result1 { d_year: g.key.d_year, i_category_id: g.key.i_category_id, i_category: g.key.i_category, sum_ss_ext_sales_price: sum(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.price); } tmp4 }) }); } result };
    let base = { let mut tmp5 = Vec::new();for g in &grouped { let tmp6 = g.clone(); let tmp7 = -g.sum_ss_ext_sales_price; tmp5.push((tmp7, tmp6)); } tmp5.sort_by(|a,b| a.0.partial_cmp(&b.0).unwrap()); let mut tmp8 = Vec::new(); for p in tmp5 { tmp8.push(p.1); } tmp8 };
    let result = base;
    _json(&result);
    assert!(result == vec![Result1 { d_year: 2020, i_category_id: 200, i_category: "CatB", sum_ss_ext_sales_price: 20.0 }, Result1 { d_year: 2020, i_category_id: 100, i_category: "CatA", sum_ss_ext_sales_price: 10.0 }]);
}
