// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:30:20Z
#[derive(Default, Debug, Clone, PartialEq)]
struct StoreSale {
        ss_ticket_number: i32,
        ss_item_sk: i32,
        ss_customer_sk: i32,
        ss_store_sk: i32,
        ss_net_paid: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct StoreReturn {
        sr_ticket_number: i32,
        sr_item_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct Store {
        s_store_sk: i32,
        s_store_name: &'static str,
        s_market_id: i32,
        s_state: &'static str,
        s_zip: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq)]
struct Item {
        i_item_sk: i32,
        i_color: &'static str,
        i_current_price: f64,
        i_manager_id: i32,
        i_units: &'static str,
        i_size: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct Customer {
        c_customer_sk: i32,
        c_first_name: &'static str,
        c_last_name: &'static str,
        c_current_addr_sk: i32,
        c_birth_country: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct CustomerAddress {
        ca_address_sk: i32,
        ca_state: &'static str,
        ca_country: &'static str,
        ca_zip: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    ss_ticket_number: i32,
    ss_item_sk: i32,
    ss_customer_sk: i32,
    ss_store_sk: i32,
    ss_net_paid: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store_return {
    sr_ticket_number: i32,
    sr_item_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store1 {
    s_store_sk: i32,
    s_store_name: &'static str,
    s_market_id: i32,
    s_state: &'static str,
    s_zip: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item2 {
    i_item_sk: i32,
    i_color: &'static str,
    i_current_price: f64,
    i_manager_id: i32,
    i_units: &'static str,
    i_size: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer3 {
    c_customer_sk: i32,
    c_first_name: &'static str,
    c_last_name: &'static str,
    c_current_addr_sk: i32,
    c_birth_country: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer_addres {
    ca_address_sk: i32,
    ca_state: &'static str,
    ca_country: &'static str,
    ca_zip: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    last: &'static str,
    first: &'static str,
    store_name: &'static str,
    color: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item4 {
    ss: Store_sale,
    sr: Store_return,
    s: Store1,
    i: Item2,
    c: Customer3,
    ca: Customer_addres,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item4>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    c_last_name: &'static str,
    c_first_name: &'static str,
    s_store_name: &'static str,
    color: &'static str,
    netpaid: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result5 {
    c_last_name: &'static str,
    c_first_name: &'static str,
    s_store_name: &'static str,
    paid: i32,
}

fn avg<T>(v: &[T]) -> f64 where T: Into<f64> + Copy {
    let sum: f64 = v.iter().map(|&x| x.into()).sum();
    sum / v.len() as f64
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let store_sales = vec![Store_sale { ss_ticket_number: 1, ss_item_sk: 1, ss_customer_sk: 1, ss_store_sk: 1, ss_net_paid: 100.0 }, Store_sale { ss_ticket_number: 2, ss_item_sk: 2, ss_customer_sk: 2, ss_store_sk: 1, ss_net_paid: 50.0 }];
    let store_returns = vec![Store_return { sr_ticket_number: 1, sr_item_sk: 1 }, Store_return { sr_ticket_number: 2, sr_item_sk: 2 }];
    let store = vec![Store1 { s_store_sk: 1, s_store_name: "Store1", s_market_id: 5, s_state: "CA", s_zip: "12345" }];
    let item = vec![Item2 { i_item_sk: 1, i_color: "RED", i_current_price: 10.0, i_manager_id: 1, i_units: "EA", i_size: "M" }, Item2 { i_item_sk: 2, i_color: "BLUE", i_current_price: 20.0, i_manager_id: 2, i_units: "EA", i_size: "L" }];
    let customer = vec![Customer3 { c_customer_sk: 1, c_first_name: "Ann", c_last_name: "Smith", c_current_addr_sk: 1, c_birth_country: "Canada" }, Customer3 { c_customer_sk: 2, c_first_name: "Bob", c_last_name: "Jones", c_current_addr_sk: 2, c_birth_country: "USA" }];
    let customer_address = vec![Customer_addres { ca_address_sk: 1, ca_state: "CA", ca_country: "USA", ca_zip: "12345" }, Customer_addres { ca_address_sk: 2, ca_state: "CA", ca_country: "USA", ca_zip: "54321" }];
    let ssales = { let mut tmp1 = std::collections::HashMap::new();for ss in &store_sales { for sr in &store_returns { if !(ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk) { continue; } for s in &store { if !(ss.ss_store_sk == s.s_store_sk) { continue; } for i in &item { if !(ss.ss_item_sk == i.i_item_sk) { continue; } for c in &customer { if !(ss.ss_customer_sk == c.c_customer_sk) { continue; } for ca in &customer_address { if !(c.c_current_addr_sk == ca.ca_address_sk) { continue; } if !(c.c_birth_country != strings.ToUpper(ca.ca_country) && s.s_zip == ca.ca_zip && s.s_market_id == 5) { continue; } let key = Key { last: c.c_last_name, first: c.c_first_name, store_name: s.s_store_name, color: i.i_color }; tmp1.entry(key).or_insert_with(Vec::new).push(Item4 {ss: ss.clone(), sr: sr.clone(), s: s.clone(), i: i.clone(), c: c.clone(), ca: ca.clone() }); } } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { c_last_name: g.key.last, c_first_name: g.key.first, s_store_name: g.key.store_name, color: g.key.color, netpaid: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.ss_net_paid); } tmp3 }) }); } result };
    let avg_paid = avg(&{ let mut tmp4 = Vec::new();for x in &ssales { tmp4.push(x.netpaid); } tmp4 });
    let result = { let mut tmp5 = Vec::new();for x in &ssales { if !((x.color == "RED" && x.netpaid as f64) > 0.05 * avg_paid) { continue; } let tmp6 = Result5 { c_last_name: x.c_last_name, c_first_name: x.c_first_name, s_store_name: x.s_store_name, paid: x.netpaid }; let tmp7 = (x.c_last_name, x.c_first_name, x.s_store_name); tmp5.push((tmp7, tmp6)); } tmp5.sort_by(|a,b| a.0.partial_cmp(&b.0).unwrap()); let mut tmp8 = Vec::new(); for p in tmp5 { tmp8.push(p.1); } tmp8 };
    _json(&result);
    assert!(result == vec![Result5 { c_last_name: "Smith", c_first_name: "Ann", s_store_name: "Store1", paid: 100.0 }]);
}
