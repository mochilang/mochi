// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:09:28Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store_sale {
    ticket: i32,
    item: i32,
    sold: i32,
    customer: i32,
    store: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store_return {
    ticket: i32,
    item: i32,
    returned: i32,
    customer: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_year: i32,
    d_moy: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store {
    s_store_sk: i32,
    s_store_name: &'static str,
    s_company_id: i32,
    s_street_number: &'static str,
    s_street_name: &'static str,
    s_street_type: &'static str,
    s_suite_number: &'static str,
    s_city: &'static str,
    s_county: &'static str,
    s_state: &'static str,
    s_zip: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    s: Store,
    diff: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Group {
    key: Store,
    items: Vec<Result>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result1 {
    s_store_name: &'static str,
    d30: i32,
    d31_60: i32,
    d61_90: i32,
    d91_120: i32,
    d_gt_120: i32,
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let store_sales = vec![Store_sale { ticket: 1, item: 101, sold: 1, customer: 1, store: 1 }, Store_sale { ticket: 2, item: 102, sold: 1, customer: 1, store: 1 }, Store_sale { ticket: 3, item: 103, sold: 1, customer: 1, store: 1 }, Store_sale { ticket: 4, item: 104, sold: 1, customer: 1, store: 1 }, Store_sale { ticket: 5, item: 105, sold: 1, customer: 1, store: 1 }];
    let store_returns = vec![Store_return { ticket: 1, item: 101, returned: 16, customer: 1 }, Store_return { ticket: 2, item: 102, returned: 46, customer: 1 }, Store_return { ticket: 3, item: 103, returned: 76, customer: 1 }, Store_return { ticket: 4, item: 104, returned: 111, customer: 1 }, Store_return { ticket: 5, item: 105, returned: 151, customer: 1 }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_year: 2001, d_moy: 7 }, Date_dim { d_date_sk: 16, d_year: 2001, d_moy: 8 }, Date_dim { d_date_sk: 46, d_year: 2001, d_moy: 8 }, Date_dim { d_date_sk: 76, d_year: 2001, d_moy: 8 }, Date_dim { d_date_sk: 111, d_year: 2001, d_moy: 8 }, Date_dim { d_date_sk: 151, d_year: 2001, d_moy: 8 }];
    let store = vec![Store { s_store_sk: 1, s_store_name: "Main", s_company_id: 1, s_street_number: "1", s_street_name: "Main", s_street_type: "St", s_suite_number: "100", s_city: "City", s_county: "County", s_state: "CA", s_zip: "12345" }];
    let year = 2001;
    let month = 8;
    let joined = { let mut tmp1 = Vec::new();for ss in &store_sales { for sr in &store_returns { if !(ss.ticket == sr.ticket && ss.item == sr.item && ss.customer == sr.customer) { continue; } for d1 in &date_dim { if !(ss.sold == d1.d_date_sk) { continue; } for d2 in &date_dim { if !(sr.returned == d2.d_date_sk && d2.d_year == year && d2.d_moy == month) { continue; } for s in &store { if !(ss.store == s.s_store_sk) { continue; } tmp1.push(Result { s: s.clone(), diff: sr.returned - ss.sold }); } } } } } tmp1 };
    let result = { let mut tmp2 = std::collections::HashMap::new();for j in &joined { let key = j.s; tmp2.entry(key).or_insert_with(Vec::new).push(j.clone()); } let mut tmp3 = Vec::<Group>::new(); for (k,v) in tmp2 { tmp3.push(Group { key: k, items: v }); } tmp3.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp3 { result.push(Result1 { s_store_name: g.key.s_store_name, d30: { let mut tmp4 = Vec::new();for x in &g.clone().items { if !(x.diff <= 30) { continue; } tmp4.push(1); } tmp4 }.len() as i32, d31_60: { let mut tmp5 = Vec::new();for x in &g.clone().items { if !(x.diff > 30 && x.diff <= 60) { continue; } tmp5.push(1); } tmp5 }.len() as i32, d61_90: { let mut tmp6 = Vec::new();for x in &g.clone().items { if !(x.diff > 60 && x.diff <= 90) { continue; } tmp6.push(1); } tmp6 }.len() as i32, d91_120: { let mut tmp7 = Vec::new();for x in &g.clone().items { if !(x.diff > 90 && x.diff <= 120) { continue; } tmp7.push(1); } tmp7 }.len() as i32, d_gt_120: { let mut tmp8 = Vec::new();for x in &g.clone().items { if !(x.diff > 120) { continue; } tmp8.push(1); } tmp8 }.len() as i32 }); } result };
    _json(&result);
    assert!(result == vec![Result1 { s_store_name: "Main", d30: 1, d31_60: 1, d61_90: 1, d91_120: 1, d_gt_120: 1 }]);
}
