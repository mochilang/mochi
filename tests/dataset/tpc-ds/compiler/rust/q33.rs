// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:09:23Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item {
    i_item_sk: i32,
    i_manufact_id: i32,
    i_category: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_year: i32,
    d_moy: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer_addres {
    ca_address_sk: i32,
    ca_gmt_offset: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    ss_item_sk: i32,
    ss_ext_sales_price: f64,
    ss_sold_date_sk: i32,
    ss_addr_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Catalog_sale {
    cs_item_sk: i32,
    cs_ext_sales_price: f64,
    cs_sold_date_sk: i32,
    cs_bill_addr_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Web_sale {
    ws_item_sk: i32,
    ws_ext_sales_price: f64,
    ws_sold_date_sk: i32,
    ws_bill_addr_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    manu: i32,
    price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result1 {
    manu: i32,
    price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result2 {
    manu: i32,
    price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: i32,
    items: Vec<Result2>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result3 {
    i_manufact_id: i32,
    total_sales: f64,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let item = vec![Item { i_item_sk: 1, i_manufact_id: 1, i_category: "Books" }, Item { i_item_sk: 2, i_manufact_id: 2, i_category: "Books" }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_year: 2000, d_moy: 1 }];
    let customer_address = vec![Customer_addres { ca_address_sk: 1, ca_gmt_offset: -5 }, Customer_addres { ca_address_sk: 2, ca_gmt_offset: -5 }];
    let store_sales = vec![Store_sale { ss_item_sk: 1, ss_ext_sales_price: 100.0, ss_sold_date_sk: 1, ss_addr_sk: 1 }, Store_sale { ss_item_sk: 2, ss_ext_sales_price: 50.0, ss_sold_date_sk: 1, ss_addr_sk: 2 }];
    let catalog_sales = vec![Catalog_sale { cs_item_sk: 1, cs_ext_sales_price: 20.0, cs_sold_date_sk: 1, cs_bill_addr_sk: 1 }];
    let web_sales = vec![Web_sale { ws_item_sk: 1, ws_ext_sales_price: 30.0, ws_sold_date_sk: 1, ws_bill_addr_sk: 1 }];
    let month = 1;
    let year = 2000;
    let union_sales = concat({ let mut tmp1 = Vec::new();for ss in &store_sales { for d in &date_dim { if !(ss.ss_sold_date_sk == d.d_date_sk) { continue; } for ca in &customer_address { if !(ss.ss_addr_sk == ca.ca_address_sk) { continue; } for i in &item { if !(ss.ss_item_sk == i.i_item_sk) { continue; } if !(i.i_category == "Books" && d.d_year == year && d.d_moy == month && ca.ca_gmt_offset == (-5)) { continue; } tmp1.push(Result { manu: i.i_manufact_id, price: ss.ss_ext_sales_price }); } } } } tmp1 }, { let mut tmp2 = Vec::new();for cs in &catalog_sales { for d in &date_dim { if !(cs.cs_sold_date_sk == d.d_date_sk) { continue; } for ca in &customer_address { if !(cs.cs_bill_addr_sk == ca.ca_address_sk) { continue; } for i in &item { if !(cs.cs_item_sk == i.i_item_sk) { continue; } if !(i.i_category == "Books" && d.d_year == year && d.d_moy == month && ca.ca_gmt_offset == (-5)) { continue; } tmp2.push(Result1 { manu: i.i_manufact_id, price: cs.cs_ext_sales_price }); } } } } tmp2 }, { let mut tmp3 = Vec::new();for ws in &web_sales { for d in &date_dim { if !(ws.ws_sold_date_sk == d.d_date_sk) { continue; } for ca in &customer_address { if !(ws.ws_bill_addr_sk == ca.ca_address_sk) { continue; } for i in &item { if !(ws.ws_item_sk == i.i_item_sk) { continue; } if !(i.i_category == "Books" && d.d_year == year && d.d_moy == month && ca.ca_gmt_offset == (-5)) { continue; } tmp3.push(Result2 { manu: i.i_manufact_id, price: ws.ws_ext_sales_price }); } } } } tmp3 });
    let result = { let mut tmp4 = std::collections::HashMap::new();for s in &union_sales { let key = s.manu; tmp4.entry(key).or_insert_with(Vec::new).push(s.clone()); } let mut tmp5 = Vec::<Group>::new(); for (k,v) in tmp4 { tmp5.push(Group { key: k, items: v }); } tmp5.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); tmp5.sort_by(|a,b| (-sum(&{ let mut tmp6 = Vec::new();for x in &a.clone().items { tmp6.push(x.price); } tmp6 })).partial_cmp(&(-sum(&{ let mut tmp6 = Vec::new();for x in &b.clone().items { tmp6.push(x.price); } tmp6 }))).unwrap()); let mut result = Vec::new(); for g in tmp5 { result.push(Result3 { i_manufact_id: g.key, total_sales: sum(&{ let mut tmp7 = Vec::new();for x in &g.clone().items { tmp7.push(x.price); } tmp7 }) }); } result };
    _json(&result);
    assert!(result == vec![Result3 { i_manufact_id: 1, total_sales: 150.0 }, Result3 { i_manufact_id: 2, total_sales: 50.0 }]);
}
