// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:30:26Z
#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    customer: i32,
    sold_date: i32,
    price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_month_seq: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer {
    c_customer_sk: i32,
    c_current_addr_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer_addres {
    ca_address_sk: i32,
    ca_county: &'static str,
    ca_state: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store {
    s_store_sk: i32,
    s_county: &'static str,
    s_state: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    customer: i32,
    amt: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: i32,
    items: Vec<Result>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result1 {
    customer: i32,
    revenue: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    seg: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group2 {
    key: Key,
    items: Vec<Result1>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result3 {
    segment: i32,
    num_customers: i32,
    segment_base: i32,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let store_sales = vec![Store_sale { customer: 1, sold_date: 2, price: 60.0 }, Store_sale { customer: 2, sold_date: 2, price: 40.0 }];
    let date_dim = vec![Date_dim { d_date_sk: 2, d_month_seq: 5 }];
    let customer = vec![Customer { c_customer_sk: 1, c_current_addr_sk: 1 }, Customer { c_customer_sk: 2, c_current_addr_sk: 1 }];
    let customer_address = vec![Customer_addres { ca_address_sk: 1, ca_county: "X", ca_state: "Y" }];
    let store = vec![Store { s_store_sk: 1, s_county: "X", s_state: "Y" }];
    fn int(x: f64) -> i32 {
        return x.parse::<i32>().unwrap();
    }
    let revenue = { let mut tmp1 = Vec::new();for ss in &store_sales { for d in &date_dim { if !(ss.sold_date == d.d_date_sk) { continue; } for c in &customer { if !(ss.customer == c.c_customer_sk) { continue; } for ca in &customer_address { if !(c.c_current_addr_sk == ca.ca_address_sk && ca.ca_county == "X" && ca.ca_state == "Y") { continue; } for s in &store { if !(1 == s.s_store_sk && ca.ca_county == s.s_county && ca.ca_state == s.s_state) { continue; } tmp1.push(Result { customer: c.c_customer_sk, amt: ss.price }); } } } } } tmp1 };
    let by_customer = { let mut tmp2 = std::collections::HashMap::new();for r in &revenue { let key = r.customer; tmp2.entry(key).or_insert_with(Vec::new).push(r.clone()); } let mut tmp3 = Vec::<Group>::new(); for (k,v) in tmp2 { tmp3.push(Group { key: k, items: v }); } tmp3.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp3 { result.push(Result1 { customer: g.key, revenue: sum(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.amt); } tmp4 }) }); } result };
    let segments = { let mut tmp5 = std::collections::HashMap::new();for r in &by_customer { let key = Key { seg: int(r.revenue / 50 as f64) }; tmp5.entry(key).or_insert_with(Vec::new).push(r.clone()); } let mut tmp6 = Vec::<Group2>::new(); for (k,v) in tmp5 { tmp6.push(Group2 { key: k, items: v }); } tmp6.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp6 { result.push(Result3 { segment: g.key.seg, num_customers: g.clone().items.len() as i32, segment_base: (g.key.seg as f64) * 50 as f64 }); } result };
    let result = segments;
    _json(&result);
    assert!(result == vec![Result3 { segment: 1, num_customers: 1, segment_base: 50 }, Result3 { segment: 0, num_customers: 1, segment_base: 0 }]);
}
