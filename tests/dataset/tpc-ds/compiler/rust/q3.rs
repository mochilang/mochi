// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:36Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_year: i32,
    d_moy: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    ss_sold_date_sk: i32,
    ss_item_sk: i32,
    ss_ext_sales_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item {
    i_item_sk: i32,
    i_manufact_id: i32,
    i_brand_id: i32,
    i_brand: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    d_year: i32,
    brand_id: i32,
    brand: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item1 {
    dt: Date_dim,
    ss: Store_sale,
    i: Item,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item1>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    d_year: i32,
    brand_id: i32,
    brand: &'static str,
    sum_agg: i32,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let date_dim = vec![Date_dim { d_date_sk: 1, d_year: 1998, d_moy: 12 }];
    let store_sales = vec![Store_sale { ss_sold_date_sk: 1, ss_item_sk: 1, ss_ext_sales_price: 10.0 }, Store_sale { ss_sold_date_sk: 1, ss_item_sk: 2, ss_ext_sales_price: 20.0 }];
    let item = vec![Item { i_item_sk: 1, i_manufact_id: 100, i_brand_id: 1, i_brand: "Brand1" }, Item { i_item_sk: 2, i_manufact_id: 100, i_brand_id: 2, i_brand: "Brand2" }];
    let result = { let mut tmp1 = std::collections::HashMap::new();for dt in &date_dim { for ss in &store_sales { if !(dt.d_date_sk == ss.ss_sold_date_sk) { continue; } for i in &item { if !(ss.ss_item_sk == i.i_item_sk) { continue; } if !(i.i_manufact_id == 100 && dt.d_moy == 12) { continue; } let key = Key { d_year: dt.d_year, brand_id: i.i_brand_id, brand: i.i_brand }; tmp1.entry(key).or_insert_with(Vec::new).push(Item1 {dt: dt.clone(), ss: ss.clone(), i: i.clone() }); } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); tmp2.sort_by(|a,b| ((a.key.d_year, -sum(&{ let mut tmp3 = Vec::new();for x in &a.clone().items { tmp3.push(x.ss_ext_sales_price); } tmp3 }), a.key.brand_id)).partial_cmp(&((b.key.d_year, -sum(&{ let mut tmp3 = Vec::new();for x in &b.clone().items { tmp3.push(x.ss_ext_sales_price); } tmp3 }), b.key.brand_id))).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { d_year: g.key.d_year, brand_id: g.key.brand_id, brand: g.key.brand, sum_agg: sum(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.ss_ext_sales_price); } tmp4 }) }); } result };
    _json(&result);
    assert!(result == vec![Result { d_year: 1998, brand_id: 2, brand: "Brand2", sum_agg: 20.0 }, Result { d_year: 1998, brand_id: 1, brand: "Brand1", sum_agg: 10.0 }]);
}
