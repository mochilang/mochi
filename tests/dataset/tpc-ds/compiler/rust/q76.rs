// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:53Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_year: i32,
    d_qoy: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item {
    i_item_sk: i32,
    i_category: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    ss_customer_sk: i32,
    ss_item_sk: i32,
    ss_ext_sales_price: f64,
    ss_sold_date_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Web_sale {
    ws_bill_customer_sk: i32,
    ws_item_sk: i32,
    ws_ext_sales_price: f64,
    ws_sold_date_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Catalog_sale {
    cs_bill_customer_sk: i32,
    cs_item_sk: i32,
    cs_ext_sales_price: f64,
    cs_sold_date_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    channel: &'static str,
    col_name: i32,
    d_year: i32,
    d_qoy: i32,
    i_category: &'static str,
    ext_sales_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result1 {
    channel: &'static str,
    col_name: i32,
    d_year: i32,
    d_qoy: i32,
    i_category: &'static str,
    ext_sales_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result2 {
    channel: &'static str,
    col_name: i32,
    d_year: i32,
    d_qoy: i32,
    i_category: &'static str,
    ext_sales_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    channel: i32,
    col_name: i32,
    d_year: i32,
    d_qoy: i32,
    i_category: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Group {
    key: Key,
    items: Vec<i32>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result3 {
    channel: i32,
    col_name: i32,
    d_year: i32,
    d_qoy: i32,
    i_category: i32,
    sales_cnt: i32,
    sales_amt: i32,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let date_dim = vec![Date_dim { d_date_sk: 1, d_year: 1998, d_qoy: 1 }];
    let item = vec![Item { i_item_sk: 1, i_category: "CatA" }, Item { i_item_sk: 2, i_category: "CatB" }, Item { i_item_sk: 3, i_category: "CatC" }];
    let store_sales = vec![Store_sale { ss_customer_sk: (), ss_item_sk: 1, ss_ext_sales_price: 10.0, ss_sold_date_sk: 1 }];
    let web_sales = vec![Web_sale { ws_bill_customer_sk: (), ws_item_sk: 2, ws_ext_sales_price: 15.0, ws_sold_date_sk: 1 }];
    let catalog_sales = vec![Catalog_sale { cs_bill_customer_sk: (), cs_item_sk: 3, cs_ext_sales_price: 20.0, cs_sold_date_sk: 1 }];
    let store_part = { let mut tmp1 = Vec::new();for ss in &store_sales { for i in &item { if !(i.i_item_sk == ss.ss_item_sk) { continue; } for d in &date_dim { if !(d.d_date_sk == ss.ss_sold_date_sk) { continue; } if !(ss.ss_customer_sk == ()) { continue; } tmp1.push(Result { channel: "store", col_name: ss.ss_customer_sk, d_year: d.d_year, d_qoy: d.d_qoy, i_category: i.i_category, ext_sales_price: ss.ss_ext_sales_price }); } } } tmp1 };
    let web_part = { let mut tmp2 = Vec::new();for ws in &web_sales { for i in &item { if !(i.i_item_sk == ws.ws_item_sk) { continue; } for d in &date_dim { if !(d.d_date_sk == ws.ws_sold_date_sk) { continue; } if !(ws.ws_bill_customer_sk == ()) { continue; } tmp2.push(Result1 { channel: "web", col_name: ws.ws_bill_customer_sk, d_year: d.d_year, d_qoy: d.d_qoy, i_category: i.i_category, ext_sales_price: ws.ws_ext_sales_price }); } } } tmp2 };
    let catalog_part = { let mut tmp3 = Vec::new();for cs in &catalog_sales { for i in &item { if !(i.i_item_sk == cs.cs_item_sk) { continue; } for d in &date_dim { if !(d.d_date_sk == cs.cs_sold_date_sk) { continue; } if !(cs.cs_bill_customer_sk == ()) { continue; } tmp3.push(Result2 { channel: "catalog", col_name: cs.cs_bill_customer_sk, d_year: d.d_year, d_qoy: d.d_qoy, i_category: i.i_category, ext_sales_price: cs.cs_ext_sales_price }); } } } tmp3 };
    let all_rows = concat(store_part, web_part, catalog_part);
    let result = { let mut tmp4 = std::collections::HashMap::new();for &r in &all_rows { let key = Key { channel: r.channel, col_name: r.col_name, d_year: r.d_year, d_qoy: r.d_qoy, i_category: r.i_category }; tmp4.entry(key).or_insert_with(Vec::new).push(r); } let mut tmp5 = Vec::<Group>::new(); for (k,v) in tmp4 { tmp5.push(Group { key: k, items: v }); } tmp5.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); tmp5.sort_by(|a,b| (a.key.channel).partial_cmp(&(b.key.channel)).unwrap()); let mut result = Vec::new(); for g in tmp5 { result.push(Result3 { channel: g.key.channel, col_name: g.key.col_name, d_year: g.key.d_year, d_qoy: g.key.d_qoy, i_category: g.key.i_category, sales_cnt: g.clone().items.len() as i32, sales_amt: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push(x.r.ext_sales_price); } tmp6 }) }); } result };
    _json(&result);
    assert!(result == vec![Result3 { channel: "store", col_name: (), d_year: 1998, d_qoy: 1, i_category: "CatA", sales_cnt: 1, sales_amt: 10.0 }, Result3 { channel: "web", col_name: (), d_year: 1998, d_qoy: 1, i_category: "CatB", sales_cnt: 1, sales_amt: 15.0 }, Result3 { channel: "catalog", col_name: (), d_year: 1998, d_qoy: 1, i_category: "CatC", sales_cnt: 1, sales_amt: 20.0 }]);
}
