// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:09:29Z
#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Catalog_sale {
    item: i32,
    call: i32,
    date: i32,
    price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item {
    i_item_sk: i32,
    i_category: &'static str,
    i_brand: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Call_center {
    cc_call_center_sk: i32,
    cc_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_year: i32,
    d_moy: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    cat: &'static str,
    call: &'static str,
    year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item1 {
    cs: Catalog_sale,
    i: Item,
    d: Date_dim,
    cc: Call_center,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item1>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    cat: &'static str,
    call: &'static str,
    year: i32,
    sum_sales: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key2 {
    cat: &'static str,
    call: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Group3 {
    key: Key2,
    items: Vec<Result>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result4 {
    cat: &'static str,
    call: &'static str,
    avg_sales: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result5 {
    i_category: &'static str,
    sum_sales: i32,
}

fn avg<T>(v: &[T]) -> f64 where T: Into<f64> + Copy {
    let sum: f64 = v.iter().map(|&x| x.into()).sum();
    sum / v.len() as f64
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let catalog_sales = vec![Catalog_sale { item: 1, call: 1, date: 1, price: 20.0 }, Catalog_sale { item: 1, call: 1, date: 2, price: 20.0 }, Catalog_sale { item: 1, call: 1, date: 3, price: 40.0 }];
    let item = vec![Item { i_item_sk: 1, i_category: "A", i_brand: "B" }];
    let call_center = vec![Call_center { cc_call_center_sk: 1, cc_name: "C1" }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_year: 2000, d_moy: 11 }, Date_dim { d_date_sk: 2, d_year: 2000, d_moy: 12 }, Date_dim { d_date_sk: 3, d_year: 2001, d_moy: 1 }];
    fn abs(x: f64) -> f64 {
        if x >= 0.0 {
            return x;
        }
        return -x;
    }
    let grouped = { let mut tmp1 = std::collections::HashMap::new();for cs in &catalog_sales { for i in &item { if !(cs.item == i.i_item_sk) { continue; } for d in &date_dim { if !(cs.date == d.d_date_sk) { continue; } for cc in &call_center { if !(cs.call == cc.cc_call_center_sk) { continue; } let key = Key { cat: i.i_category, call: cc.cc_name, year: d.d_year }; tmp1.entry(key).or_insert_with(Vec::new).push(Item1 {cs: cs.clone(), i: i.clone(), d: d.clone(), cc: cc.clone() }); } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { cat: g.key.cat, call: g.key.call, year: g.key.year, sum_sales: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.price); } tmp3 }) }); } result };
    let avg_by_year = { let mut tmp4 = std::collections::HashMap::new();for g in &grouped { let key = Key2 { cat: g.cat, call: g.call }; tmp4.entry(key).or_insert_with(Vec::new).push(g.clone()); } let mut tmp5 = Vec::<Group3>::new(); for (k,v) in tmp4 { tmp5.push(Group3 { key: k, items: v }); } tmp5.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for gg in tmp5 { result.push(Result4 { cat: gg.key.cat, call: gg.key.call, avg_sales: avg(&{ let mut tmp6 = Vec::new();for x in &gg.clone().items { tmp6.push(x.sum_sales); } tmp6 }) }); } result };
    let result = { let mut tmp7 = Vec::new();for g in &grouped { for a in &avg_by_year { if !(g.cat == a.cat && g.call == a.call) { continue; } if !(g.year == 2001 && a.avg_sales > 0 as f64 && abs((g.sum_sales as f64) - a.avg_sales) / a.avg_sales > 0.1) { continue; } tmp7.push(Result5 { i_category: g.cat, sum_sales: g.sum_sales }); } } tmp7 };
    _json(&result);
    assert!(result == vec![]);
}
