// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:38Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct Customer {
        c_customer_sk: i32,
        c_customer_id: &'static str,
        c_first_name: &'static str,
        c_last_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq)]
struct StoreSale {
        ss_customer_sk: i32,
        ss_sold_date_sk: i32,
        ss_ext_list_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq)]
struct WebSale {
        ws_bill_customer_sk: i32,
        ws_sold_date_sk: i32,
        ws_ext_list_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer1 {
    c_customer_sk: i32,
    c_customer_id: &'static str,
    c_first_name: &'static str,
    c_last_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    ss_customer_sk: i32,
    ss_sold_date_sk: i32,
    ss_ext_list_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Web_sale {
    ws_bill_customer_sk: i32,
    ws_sold_date_sk: i32,
    ws_ext_list_price: f64,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let customer = vec![Customer1 { c_customer_sk: 1, c_customer_id: "C1", c_first_name: "John", c_last_name: "Doe" }];
    let store_sales = vec![Store_sale { ss_customer_sk: 1, ss_sold_date_sk: 1998, ss_ext_list_price: 60.0 }, Store_sale { ss_customer_sk: 1, ss_sold_date_sk: 1999, ss_ext_list_price: 90.0 }];
    let web_sales = vec![Web_sale { ws_bill_customer_sk: 1, ws_sold_date_sk: 1998, ws_ext_list_price: 50.0 }, Web_sale { ws_bill_customer_sk: 1, ws_sold_date_sk: 1999, ws_ext_list_price: 150.0 }];
    let ss98 = sum(&{ let mut tmp1 = Vec::new();for ss in &store_sales { if !(ss.ss_sold_date_sk == 1998) { continue; } tmp1.push(ss.ss_ext_list_price); } tmp1 });
    let ss99 = sum(&{ let mut tmp2 = Vec::new();for ss in &store_sales { if !(ss.ss_sold_date_sk == 1999) { continue; } tmp2.push(ss.ss_ext_list_price); } tmp2 });
    let ws98 = sum(&{ let mut tmp3 = Vec::new();for ws in &web_sales { if !(ws.ws_sold_date_sk == 1998) { continue; } tmp3.push(ws.ws_ext_list_price); } tmp3 });
    let ws99 = sum(&{ let mut tmp4 = Vec::new();for ws in &web_sales { if !(ws.ws_sold_date_sk == 1999) { continue; } tmp4.push(ws.ws_ext_list_price); } tmp4 });
    let growth_ok = ws98 > 0 as f64 && ss98 > 0 as f64 && (ws99 / ws98) > (ss99 / ss98);
    let result = if growth_ok { vec![{ let mut m = std::collections::BTreeMap::new(); m.insert("customer_id", "C1"); m.insert("customer_first_name", "John"); m.insert("customer_last_name", "Doe"); m }] } else { vec![] };
    _json(&result);
    assert!(result == vec![{ let mut m = std::collections::BTreeMap::new(); m.insert("customer_id", "C1"); m.insert("customer_first_name", "John"); m.insert("customer_last_name", "Doe"); m }]);
}
