fn test_TPCDS_Q6_result() {
    expect(result == vec![std::collections::HashMap::from([("state".to_string(), "CA"), ("cnt".to_string(), 10)])]);
}

fn main() {
    let mut customer_address = vec![std::collections::HashMap::from([("ca_address_sk".to_string(), 1), ("ca_state".to_string(), "CA"), ("ca_zip".to_string(), "12345")])];
    let mut customer = vec![std::collections::HashMap::from([("c_customer_sk".to_string(), 1), ("c_current_addr_sk".to_string(), 1)])];
    let mut store_sales = vec![std::collections::HashMap::from([("ss_customer_sk".to_string(), 1), ("ss_sold_date_sk".to_string(), 1), ("ss_item_sk".to_string(), 1)]), std::collections::HashMap::from([("ss_customer_sk".to_string(), 1), ("ss_sold_date_sk".to_string(), 1), ("ss_item_sk".to_string(), 1)]), std::collections::HashMap::from([("ss_customer_sk".to_string(), 1), ("ss_sold_date_sk".to_string(), 1), ("ss_item_sk".to_string(), 1)]), std::collections::HashMap::from([("ss_customer_sk".to_string(), 1), ("ss_sold_date_sk".to_string(), 1), ("ss_item_sk".to_string(), 1)]), std::collections::HashMap::from([("ss_customer_sk".to_string(), 1), ("ss_sold_date_sk".to_string(), 1), ("ss_item_sk".to_string(), 1)]), std::collections::HashMap::from([("ss_customer_sk".to_string(), 1), ("ss_sold_date_sk".to_string(), 1), ("ss_item_sk".to_string(), 1)]), std::collections::HashMap::from([("ss_customer_sk".to_string(), 1), ("ss_sold_date_sk".to_string(), 1), ("ss_item_sk".to_string(), 1)]), std::collections::HashMap::from([("ss_customer_sk".to_string(), 1), ("ss_sold_date_sk".to_string(), 1), ("ss_item_sk".to_string(), 1)]), std::collections::HashMap::from([("ss_customer_sk".to_string(), 1), ("ss_sold_date_sk".to_string(), 1), ("ss_item_sk".to_string(), 1)]), std::collections::HashMap::from([("ss_customer_sk".to_string(), 1), ("ss_sold_date_sk".to_string(), 1), ("ss_item_sk".to_string(), 1)])];
    let mut date_dim = vec![std::collections::HashMap::from([("d_date_sk".to_string(), 1), ("d_year".to_string(), 1999), ("d_moy".to_string(), 5), ("d_month_seq".to_string(), 120)])];
    let mut item = vec![std::collections::HashMap::from([("i_item_sk".to_string(), 1), ("i_category".to_string(), "A"), ("i_current_price".to_string(), 100.0)]), std::collections::HashMap::from([("i_item_sk".to_string(), 2), ("i_category".to_string(), "A"), ("i_current_price".to_string(), 50.0)])];
    let mut target_month_seq = max({
    let mut _res = Vec::new();
    for d in date_dim {
        if !(_map_get(&d, &"d_year".to_string()) == 1999 && _map_get(&d, &"d_moy".to_string()) == 5) { continue; }
        _res.push(_map_get(&d, &"d_month_seq".to_string()));
    }
    _res
});
    let mut result = {
    let mut _pairs = Vec::new();
    for a in customer_address.clone() {
        for c in customer.clone() {
            if !(_map_get(&a, &"ca_address_sk".to_string()) == _map_get(&c, &"c_current_addr_sk".to_string())) { continue; }
            for s in store_sales.clone() {
                if !(_map_get(&c, &"c_customer_sk".to_string()) == _map_get(&s, &"ss_customer_sk".to_string())) { continue; }
                for d in date_dim.clone() {
                    if !(_map_get(&s, &"ss_sold_date_sk".to_string()) == _map_get(&d, &"d_date_sk".to_string())) { continue; }
                    for i in item.clone() {
                        if !(_map_get(&s, &"ss_item_sk".to_string()) == _map_get(&i, &"i_item_sk".to_string())) { continue; }
                        if _map_get(&a, &"ca_address_sk".to_string()) == _map_get(&c, &"c_current_addr_sk".to_string()) && _map_get(&c, &"c_customer_sk".to_string()) == _map_get(&s, &"ss_customer_sk".to_string()) && _map_get(&s, &"ss_sold_date_sk".to_string()) == _map_get(&d, &"d_date_sk".to_string()) && _map_get(&s, &"ss_item_sk".to_string()) == _map_get(&i, &"i_item_sk".to_string()) && _map_get(&d, &"d_month_seq".to_string()) == target_month_seq && _map_get(&i, &"i_current_price".to_string()) > 1.2 * _avg(&{
    let mut _res = Vec::new();
    for j in item {
        if _map_get(&j, &"i_category".to_string()) == _map_get(&i, &"i_category".to_string()) {
            _res.push(_map_get(&j, &"i_current_price".to_string()));
        }
    }
    _res
}) {
                            _pairs.push((vec![_count(&g), _map_get(&g, &"key".to_string())], std::collections::HashMap::from([("state".to_string(), _map_get(&g, &"key".to_string())), ("cnt".to_string(), _count(&g))])));
                        }
                    }
                }
            }
        }
    }
    _pairs.sort_by(|a, b| a.0.partial_cmp(&b.0).unwrap());
    let mut _res = Vec::new();
    for p in _pairs { _res.push(p.1); }
    let take = 100 as usize;
    if take < _res.len() { _res.truncate(take); }
    _res
};
    json(result);
    test_TPCDS_Q6_result();
}

fn _avg<T: Into<f64> + Copy>(v: &[T]) -> f64 {
    if v.is_empty() { return 0.0 }
    let mut sum = 0.0;
    for &it in v { sum += Into::<f64>::into(it); }
    sum / v.len() as f64
}
fn _count<T>(v: &[T]) -> i32 {
    v.len() as i32
}
fn _map_get<K: std::cmp::Eq + std::hash::Hash, V: Clone>(m: &std::collections::HashMap<K, V>, k: &K) -> V {
    m.get(k).unwrap().clone()
}
fn expect(cond: bool) {
    if !cond { panic!("expect failed"); }
}
