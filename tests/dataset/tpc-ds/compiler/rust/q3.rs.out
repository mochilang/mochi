fn test_TPCDS_Q3_result() {
    expect(result == vec![std::collections::HashMap::from([("d_year".to_string(), 1998), ("brand_id".to_string(), 1), ("brand".to_string(), "Brand1"), ("sum_agg".to_string(), 10.0)]), std::collections::HashMap::from([("d_year".to_string(), 1998), ("brand_id".to_string(), 2), ("brand".to_string(), "Brand2"), ("sum_agg".to_string(), 20.0)])]);
}

fn main() {
    let mut date_dim = vec![std::collections::HashMap::from([("d_date_sk".to_string(), 1), ("d_year".to_string(), 1998), ("d_moy".to_string(), 12)])];
    let mut store_sales = vec![std::collections::HashMap::from([("ss_sold_date_sk".to_string(), 1), ("ss_item_sk".to_string(), 1), ("ss_ext_sales_price".to_string(), 10.0)]), std::collections::HashMap::from([("ss_sold_date_sk".to_string(), 1), ("ss_item_sk".to_string(), 2), ("ss_ext_sales_price".to_string(), 20.0)])];
    let mut item = vec![std::collections::HashMap::from([("i_item_sk".to_string(), 1), ("i_manufact_id".to_string(), 100), ("i_brand_id".to_string(), 1), ("i_brand".to_string(), "Brand1")]), std::collections::HashMap::from([("i_item_sk".to_string(), 2), ("i_manufact_id".to_string(), 100), ("i_brand_id".to_string(), 2), ("i_brand".to_string(), "Brand2")])];
    let mut result = {
    let mut _pairs = Vec::new();
    for dt in date_dim.clone() {
        for ss in store_sales.clone() {
            if !(_map_get(&dt, &"d_date_sk".to_string()) == _map_get(&ss, &"ss_sold_date_sk".to_string())) { continue; }
            for i in item.clone() {
                if !(_map_get(&ss, &"ss_item_sk".to_string()) == _map_get(&i, &"i_item_sk".to_string())) { continue; }
                if _map_get(&dt, &"d_date_sk".to_string()) == _map_get(&ss, &"ss_sold_date_sk".to_string()) && _map_get(&ss, &"ss_item_sk".to_string()) == _map_get(&i, &"i_item_sk".to_string()) && _map_get(&i, &"i_manufact_id".to_string()) == 100 && _map_get(&dt, &"d_moy".to_string()) == 12 {
                    _pairs.push((vec![_map_get(&_map_get(&g, &"key".to_string()), &"d_year".to_string()), -_sum(&{
    let mut _res = Vec::new();
    for x in g {
        _res.push(_map_get(&x, &"ss_ext_sales_price".to_string()));
    }
    _res
}), _map_get(&_map_get(&g, &"key".to_string()), &"brand_id".to_string())], std::collections::HashMap::from([("d_year".to_string(), _map_get(&_map_get(&g, &"key".to_string()), &"d_year".to_string())), ("brand_id".to_string(), _map_get(&_map_get(&g, &"key".to_string()), &"brand_id".to_string())), ("brand".to_string(), _map_get(&_map_get(&g, &"key".to_string()), &"brand".to_string())), ("sum_agg".to_string(), _sum(&{
    let mut _res = Vec::new();
    for x in g {
        _res.push(_map_get(&x, &"ss_ext_sales_price".to_string()));
    }
    _res
}))])));
                }
            }
        }
    }
    _pairs.sort_by(|a, b| a.0.partial_cmp(&b.0).unwrap());
    let mut _res = Vec::new();
    for p in _pairs { _res.push(p.1); }
    _res
};
    json(result);
    test_TPCDS_Q3_result();
}

fn _map_get<K: std::cmp::Eq + std::hash::Hash, V: Clone>(m: &std::collections::HashMap<K, V>, k: &K) -> V {
    m.get(k).unwrap().clone()
}
fn _sum<T: Into<f64> + Copy>(v: &[T]) -> f64 {
    if v.is_empty() { return 0.0 }
    let mut sum = 0.0;
    for &it in v { sum += Into::<f64>::into(it); }
    sum
}
fn expect(cond: bool) {
    if !cond { panic!("expect failed"); }
}
