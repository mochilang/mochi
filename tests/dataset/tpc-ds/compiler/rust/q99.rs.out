// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:30:33Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct CatalogSale {
        cs_ship_date_sk: i32,
        cs_sold_date_sk: i32,
        cs_warehouse_sk: i32,
        cs_ship_mode_sk: i32,
        cs_call_center_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct Warehouse {
        w_warehouse_sk: i32,
        w_warehouse_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct ShipMode {
        sm_ship_mode_sk: i32,
        sm_type: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct CallCenter {
        cc_call_center_sk: i32,
        cc_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Catalog_sale {
    cs_ship_date_sk: i32,
    cs_sold_date_sk: i32,
    cs_warehouse_sk: i32,
    cs_ship_mode_sk: i32,
    cs_call_center_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Warehouse1 {
    w_warehouse_sk: i32,
    w_warehouse_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Ship_mode {
    sm_ship_mode_sk: i32,
    sm_type: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Call_center {
    cc_call_center_sk: i32,
    cc_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    warehouse: i32,
    sm_type: &'static str,
    cc_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item {
    cs: Catalog_sale,
    w: Warehouse1,
    sm: Ship_mode,
    cc: Call_center,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Group {
    key: Key,
    items: Vec<Item>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    warehouse: i32,
    sm_type: &'static str,
    cc_name: &'static str,
    d30: i32,
    d60: i32,
    d90: i32,
    d120: i32,
    dmore: i32,
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let catalog_sales = vec![Catalog_sale { cs_ship_date_sk: 31, cs_sold_date_sk: 1, cs_warehouse_sk: 1, cs_ship_mode_sk: 1, cs_call_center_sk: 1 }, Catalog_sale { cs_ship_date_sk: 51, cs_sold_date_sk: 1, cs_warehouse_sk: 1, cs_ship_mode_sk: 1, cs_call_center_sk: 1 }, Catalog_sale { cs_ship_date_sk: 71, cs_sold_date_sk: 1, cs_warehouse_sk: 1, cs_ship_mode_sk: 1, cs_call_center_sk: 1 }, Catalog_sale { cs_ship_date_sk: 101, cs_sold_date_sk: 1, cs_warehouse_sk: 1, cs_ship_mode_sk: 1, cs_call_center_sk: 1 }, Catalog_sale { cs_ship_date_sk: 131, cs_sold_date_sk: 1, cs_warehouse_sk: 1, cs_ship_mode_sk: 1, cs_call_center_sk: 1 }];
    let warehouse = vec![Warehouse1 { w_warehouse_sk: 1, w_warehouse_name: "Warehouse1" }];
    let ship_mode = vec![Ship_mode { sm_ship_mode_sk: 1, sm_type: "EXP" }];
    let call_center = vec![Call_center { cc_call_center_sk: 1, cc_name: "CC1" }];
    let grouped = { let mut tmp1 = std::collections::HashMap::new();for cs in &catalog_sales { for w in &warehouse { if !(cs.cs_warehouse_sk == w.w_warehouse_sk) { continue; } for sm in &ship_mode { if !(cs.cs_ship_mode_sk == sm.sm_ship_mode_sk) { continue; } for cc in &call_center { if !(cs.cs_call_center_sk == cc.cc_call_center_sk) { continue; } let key = Key { warehouse: substr(w.w_warehouse_name, 0, 20), sm_type: sm.sm_type, cc_name: cc.cc_name }; tmp1.entry(key).or_insert_with(Vec::new).push(Item {cs: cs.clone(), w: w.clone(), sm: sm.clone(), cc: cc.clone() }); } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { warehouse: g.key.warehouse, sm_type: g.key.sm_type, cc_name: g.key.cc_name, d30: { let mut tmp3 = Vec::new();for x in &g.clone().items { if !(x.cs_ship_date_sk - x.cs_sold_date_sk <= 30) { continue; } tmp3.push(x.clone()); } tmp3 }.len() as i32, d60: { let mut tmp4 = Vec::new();for x in &g.clone().items { if !(x.cs_ship_date_sk - x.cs_sold_date_sk > 30 && x.cs_ship_date_sk - x.cs_sold_date_sk <= 60) { continue; } tmp4.push(x.clone()); } tmp4 }.len() as i32, d90: { let mut tmp5 = Vec::new();for x in &g.clone().items { if !(x.cs_ship_date_sk - x.cs_sold_date_sk > 60 && x.cs_ship_date_sk - x.cs_sold_date_sk <= 90) { continue; } tmp5.push(x.clone()); } tmp5 }.len() as i32, d120: { let mut tmp6 = Vec::new();for x in &g.clone().items { if !(x.cs_ship_date_sk - x.cs_sold_date_sk > 90 && x.cs_ship_date_sk - x.cs_sold_date_sk <= 120) { continue; } tmp6.push(x.clone()); } tmp6 }.len() as i32, dmore: { let mut tmp7 = Vec::new();for x in &g.clone().items { if !(x.cs_ship_date_sk - x.cs_sold_date_sk > 120) { continue; } tmp7.push(x.clone()); } tmp7 }.len() as i32 }); } result };
    _json(&grouped);
    assert!(grouped == vec![Result { warehouse: "Warehouse1", sm_type: "EXP", cc_name: "CC1", d30: 1, d60: 1, d90: 1, d120: 1, dmore: 1 }]);
}
