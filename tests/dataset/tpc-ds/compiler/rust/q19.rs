// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:41Z
#[derive(Default, Debug, Clone, PartialEq)]
struct StoreSale {
        ss_sold_date_sk: i32,
        ss_item_sk: i32,
        ss_customer_sk: i32,
        ss_store_sk: i32,
        ss_ext_sales_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct DateDim {
        d_date_sk: i32,
        d_year: i32,
        d_moy: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct Item {
        i_item_sk: i32,
        i_brand_id: i32,
        i_brand: &'static str,
        i_manufact_id: i32,
        i_manufact: &'static str,
        i_manager_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct Customer {
        c_customer_sk: i32,
        c_current_addr_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct CustomerAddress {
        ca_address_sk: i32,
        ca_zip: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct Store {
        s_store_sk: i32,
        s_zip: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    ss_sold_date_sk: i32,
    ss_item_sk: i32,
    ss_customer_sk: i32,
    ss_store_sk: i32,
    ss_ext_sales_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_year: i32,
    d_moy: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item1 {
    i_item_sk: i32,
    i_brand_id: i32,
    i_brand: &'static str,
    i_manufact_id: i32,
    i_manufact: &'static str,
    i_manager_id: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer2 {
    c_customer_sk: i32,
    c_current_addr_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer_addres {
    ca_address_sk: i32,
    ca_zip: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store3 {
    s_store_sk: i32,
    s_zip: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    brand: &'static str,
    brand_id: i32,
    man_id: i32,
    man: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item4 {
    d: Date_dim,
    ss: Store_sale,
    i: Item1,
    c: Customer2,
    ca: Customer_addres,
    s: Store3,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item4>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    i_brand: &'static str,
    i_brand_id: i32,
    i_manufact_id: i32,
    i_manufact: &'static str,
    ext_price: i32,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let store_sales = vec![Store_sale { ss_sold_date_sk: 1, ss_item_sk: 1, ss_customer_sk: 1, ss_store_sk: 1, ss_ext_sales_price: 100.0 }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_year: 1999, d_moy: 11 }];
    let item = vec![Item1 { i_item_sk: 1, i_brand_id: 1, i_brand: "B1", i_manufact_id: 1, i_manufact: "M1", i_manager_id: 10 }];
    let customer = vec![Customer2 { c_customer_sk: 1, c_current_addr_sk: 1 }];
    let customer_address = vec![Customer_addres { ca_address_sk: 1, ca_zip: "11111" }];
    let store = vec![Store3 { s_store_sk: 1, s_zip: "99999" }];
    let result = { let mut tmp1 = std::collections::HashMap::new();for d in &date_dim { for ss in &store_sales { if !(ss.ss_sold_date_sk == d.d_date_sk) { continue; } for i in &item { if !(ss.ss_item_sk == i.i_item_sk && i.i_manager_id == 10) { continue; } for c in &customer { if !(ss.ss_customer_sk == c.c_customer_sk) { continue; } for ca in &customer_address { if !(c.c_current_addr_sk == ca.ca_address_sk) { continue; } for s in &store { if !(ss.ss_store_sk == s.s_store_sk && substr(ca.ca_zip, 0, 5) != substr(s.s_zip, 0, 5)) { continue; } if !(d.d_moy == 11 && d.d_year == 1999) { continue; } let key = Key { brand: i.i_brand, brand_id: i.i_brand_id, man_id: i.i_manufact_id, man: i.i_manufact }; tmp1.entry(key).or_insert_with(Vec::new).push(Item4 {d: d.clone(), ss: ss.clone(), i: i.clone(), c: c.clone(), ca: ca.clone(), s: s.clone() }); } } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); tmp2.sort_by(|a,b| ((a.key.brand)).partial_cmp(&((b.key.brand))).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { i_brand: g.key.brand, i_brand_id: g.key.brand_id, i_manufact_id: g.key.man_id, i_manufact: g.key.man, ext_price: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.ss_ext_sales_price); } tmp3 }) }); } result };
    _json(&result);
    assert!(result == vec![Result { i_brand: "B1", i_brand_id: 1, i_manufact_id: 1, i_manufact: "M1", ext_price: 100.0 }]);
}
