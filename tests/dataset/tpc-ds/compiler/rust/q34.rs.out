// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:30:21Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store_sale {
    ss_ticket_number: i32,
    ss_customer_sk: i32,
    ss_sold_date_sk: i32,
    ss_store_sk: i32,
    ss_hdemo_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_dom: i32,
    d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store {
    s_store_sk: i32,
    s_county: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Household_demographic {
    hd_demo_sk: i32,
    hd_buy_potential: &'static str,
    hd_vehicle_count: i32,
    hd_dep_count: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer {
    c_customer_sk: i32,
    c_last_name: &'static str,
    c_first_name: &'static str,
    c_salutation: &'static str,
    c_preferred_cust_flag: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    ticket: i32,
    cust: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item {
    ss: Store_sale,
    d: Date_dim,
    s: Store,
    hd: Household_demographic,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Group {
    key: Key,
    items: Vec<Item>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result {
    ss_ticket_number: i32,
    ss_customer_sk: i32,
    cnt: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result1 {
    c_last_name: &'static str,
    c_first_name: &'static str,
    c_salutation: &'static str,
    c_preferred_cust_flag: &'static str,
    ss_ticket_number: i32,
    cnt: i32,
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let store_sales = vec![Store_sale { ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1 }, Store_sale { ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1 }, Store_sale { ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1 }, Store_sale { ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1 }, Store_sale { ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1 }, Store_sale { ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1 }, Store_sale { ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1 }, Store_sale { ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1 }, Store_sale { ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1 }, Store_sale { ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1 }, Store_sale { ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1 }, Store_sale { ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1 }, Store_sale { ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1 }, Store_sale { ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1 }, Store_sale { ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1 }, Store_sale { ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1 }, Store_sale { ss_ticket_number: 2, ss_customer_sk: 2, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 2 }, Store_sale { ss_ticket_number: 2, ss_customer_sk: 2, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 2 }, Store_sale { ss_ticket_number: 2, ss_customer_sk: 2, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 2 }, Store_sale { ss_ticket_number: 2, ss_customer_sk: 2, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 2 }, Store_sale { ss_ticket_number: 2, ss_customer_sk: 2, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 2 }, Store_sale { ss_ticket_number: 2, ss_customer_sk: 2, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 2 }, Store_sale { ss_ticket_number: 2, ss_customer_sk: 2, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 2 }, Store_sale { ss_ticket_number: 2, ss_customer_sk: 2, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 2 }, Store_sale { ss_ticket_number: 2, ss_customer_sk: 2, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 2 }, Store_sale { ss_ticket_number: 2, ss_customer_sk: 2, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 2 }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_dom: 2, d_year: 2000 }];
    let store = vec![Store { s_store_sk: 1, s_county: "A" }];
    let household_demographics = vec![Household_demographic { hd_demo_sk: 1, hd_buy_potential: ">10000", hd_vehicle_count: 2, hd_dep_count: 3 }, Household_demographic { hd_demo_sk: 2, hd_buy_potential: ">10000", hd_vehicle_count: 2, hd_dep_count: 1 }];
    let customer = vec![Customer { c_customer_sk: 1, c_last_name: "Smith", c_first_name: "John", c_salutation: "Mr.", c_preferred_cust_flag: "Y" }, Customer { c_customer_sk: 2, c_last_name: "Jones", c_first_name: "Alice", c_salutation: "Ms.", c_preferred_cust_flag: "N" }];
    let dn = { let mut tmp1 = std::collections::HashMap::new();for ss in &store_sales { for d in &date_dim { if !(ss.ss_sold_date_sk == d.d_date_sk) { continue; } for s in &store { if !(ss.ss_store_sk == s.s_store_sk) { continue; } for hd in &household_demographics { if !(ss.ss_hdemo_sk == hd.hd_demo_sk) { continue; } if !((d.d_dom >= 1 && d.d_dom <= 3) && hd.hd_buy_potential == ">10000" && hd.hd_vehicle_count > 0 && ((hd.hd_dep_count as f64) / (hd.hd_vehicle_count as f64)) > 1.2 && d.d_year == 2000 && s.s_county == "A") { continue; } let key = Key { ticket: ss.ss_ticket_number, cust: ss.ss_customer_sk }; tmp1.entry(key).or_insert_with(Vec::new).push(Item {ss: ss.clone(), d: d.clone(), s: s.clone(), hd: hd.clone() }); } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { ss_ticket_number: g.key.ticket, ss_customer_sk: g.key.cust, cnt: g.clone().items.len() as i32 }); } result };
    let result = { let mut tmp3 = Vec::new();for dn1 in &dn { for c in &customer { if !(dn1.ss_customer_sk == c.c_customer_sk) { continue; } if !(dn1.cnt >= 15 && dn1.cnt <= 20) { continue; } let tmp4 = Result1 { c_last_name: c.c_last_name, c_first_name: c.c_first_name, c_salutation: c.c_salutation, c_preferred_cust_flag: c.c_preferred_cust_flag, ss_ticket_number: dn1.ss_ticket_number, cnt: dn1.cnt }; let tmp5 = c.c_last_name; tmp3.push((tmp5, tmp4)); } } tmp3.sort_by(|a,b| a.0.partial_cmp(&b.0).unwrap()); let mut tmp6 = Vec::new(); for p in tmp3 { tmp6.push(p.1); } tmp6 };
    _json(&result);
    assert!(result == vec![Result1 { c_last_name: "Smith", c_first_name: "John", c_salutation: "Mr.", c_preferred_cust_flag: "Y", ss_ticket_number: 1, cnt: 16 }]);
}
