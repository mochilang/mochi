// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:55Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer {
    id: i32,
    current_addr: i32,
    cdemo: i32,
    hdemo: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer_addres {
    ca_address_sk: i32,
    ca_city: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer_demographic {
    cd_demo_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Household_demographic {
    hd_demo_sk: i32,
    income_band_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Income_band {
    ib_income_band_sk: i32,
    ib_lower_bound: i32,
    ib_upper_bound: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_return {
    sr_cdemo_sk: i32,
    amt: f64,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let customer = vec![Customer { id: 1, current_addr: 1, cdemo: 1, hdemo: 1 }, Customer { id: 2, current_addr: 1, cdemo: 2, hdemo: 2 }, Customer { id: 3, current_addr: 1, cdemo: 3, hdemo: 1 }, Customer { id: 4, current_addr: 1, cdemo: 4, hdemo: 2 }];
    let customer_address = vec![Customer_addres { ca_address_sk: 1, ca_city: "Springfield" }];
    let customer_demographics = vec![Customer_demographic { cd_demo_sk: 1 }, Customer_demographic { cd_demo_sk: 2 }, Customer_demographic { cd_demo_sk: 3 }, Customer_demographic { cd_demo_sk: 4 }];
    let household_demographics = vec![Household_demographic { hd_demo_sk: 1, income_band_sk: 1 }, Household_demographic { hd_demo_sk: 2, income_band_sk: 1 }];
    let income_band = vec![Income_band { ib_income_band_sk: 1, ib_lower_bound: 0, ib_upper_bound: 50000 }];
    let store_returns = vec![Store_return { sr_cdemo_sk: 1, amt: 10.0 }, Store_return { sr_cdemo_sk: 2, amt: 20.0 }, Store_return { sr_cdemo_sk: 3, amt: 30.0 }, Store_return { sr_cdemo_sk: 4, amt: 24.0 }];
    let result = sum(&{ let mut tmp1 = Vec::new();for c in &customer { for ca in &customer_address { if !(c.current_addr == ca.ca_address_sk && ca.ca_city == "Springfield") { continue; } for cd in &customer_demographics { if !(c.cdemo == cd.cd_demo_sk) { continue; } for sr in &store_returns { if !(cd.cd_demo_sk == sr.sr_cdemo_sk) { continue; } for hd in &household_demographics { if !(c.hdemo == hd.hd_demo_sk) { continue; } for ib in &income_band { if !(hd.income_band_sk == ib.ib_income_band_sk) { continue; } tmp1.push(sr.amt); } } } } } } tmp1 });
    _json(&result);
    assert!(result == 84.0);
}
