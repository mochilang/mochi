// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:22:51Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Sale {
    promo: bool,
    price: i32,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let sales = vec![Sale { promo: true, price: 20 }, Sale { promo: true, price: 41 }, Sale { promo: false, price: 39 }];
    let promotions = sum(&{ let mut tmp1 = Vec::new();for s in &sales { if !(s.promo) { continue; } tmp1.push(s.price); } tmp1 });
    let total = sum(&{ let mut tmp2 = Vec::new();for s in &sales { tmp2.push(s.price); } tmp2 });
    let result = ((promotions * 100 as f64 as f64 as f64) as f64) / total;
    _json(&result);
    assert!(result == 61 as f64);
}
