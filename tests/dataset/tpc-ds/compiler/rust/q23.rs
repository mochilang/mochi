// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:09:21Z
#[derive(Default, Debug, Clone, PartialEq)]
struct StoreSale {
        ss_item_sk: i32,
        ss_sold_date_sk: i32,
        ss_customer_sk: i32,
        ss_quantity: i32,
        ss_sales_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct DateDim {
        d_date_sk: i32,
        d_year: i32,
        d_moy: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct Item {
        i_item_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq)]
struct CatalogSale {
        cs_sold_date_sk: i32,
        cs_item_sk: i32,
        cs_bill_customer_sk: i32,
        cs_quantity: i32,
        cs_list_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq)]
struct WebSale {
        ws_sold_date_sk: i32,
        ws_item_sk: i32,
        ws_bill_customer_sk: i32,
        ws_quantity: i32,
        ws_list_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    ss_item_sk: i32,
    ss_sold_date_sk: i32,
    ss_customer_sk: i32,
    ss_quantity: i32,
    ss_sales_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_year: i32,
    d_moy: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item1 {
    i_item_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Catalog_sale {
    cs_sold_date_sk: i32,
    cs_item_sk: i32,
    cs_bill_customer_sk: i32,
    cs_quantity: i32,
    cs_list_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Web_sale {
    ws_sold_date_sk: i32,
    ws_item_sk: i32,
    ws_bill_customer_sk: i32,
    ws_quantity: i32,
    ws_list_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Key {
    item_sk: i32,
    date_sk: i32,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item2 {
    ss: Store_sale,
    d: Date_dim,
    i: Item1,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: Key,
    items: Vec<Item2>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group3 {
    key: i32,
    items: Vec<Store_sale>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    cust: i32,
    sales: f64,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn max<T: PartialOrd + Copy>(v: &[T]) -> T {
    *v.iter().max_by(|a,b| a.partial_cmp(b).unwrap()).unwrap()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let store_sales = vec![Store_sale { ss_item_sk: 1, ss_sold_date_sk: 1, ss_customer_sk: 1, ss_quantity: 1, ss_sales_price: 10.0 }, Store_sale { ss_item_sk: 1, ss_sold_date_sk: 1, ss_customer_sk: 1, ss_quantity: 1, ss_sales_price: 10.0 }, Store_sale { ss_item_sk: 1, ss_sold_date_sk: 1, ss_customer_sk: 1, ss_quantity: 1, ss_sales_price: 10.0 }, Store_sale { ss_item_sk: 1, ss_sold_date_sk: 1, ss_customer_sk: 1, ss_quantity: 1, ss_sales_price: 10.0 }, Store_sale { ss_item_sk: 1, ss_sold_date_sk: 1, ss_customer_sk: 1, ss_quantity: 1, ss_sales_price: 10.0 }, Store_sale { ss_item_sk: 2, ss_sold_date_sk: 1, ss_customer_sk: 2, ss_quantity: 1, ss_sales_price: 10.0 }, Store_sale { ss_item_sk: 2, ss_sold_date_sk: 1, ss_customer_sk: 2, ss_quantity: 1, ss_sales_price: 10.0 }, Store_sale { ss_item_sk: 2, ss_sold_date_sk: 1, ss_customer_sk: 2, ss_quantity: 1, ss_sales_price: 10.0 }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_year: 2000, d_moy: 1 }];
    let item = vec![Item1 { i_item_sk: 1 }, Item1 { i_item_sk: 2 }];
    let catalog_sales = vec![Catalog_sale { cs_sold_date_sk: 1, cs_item_sk: 1, cs_bill_customer_sk: 1, cs_quantity: 2, cs_list_price: 10.0 }, Catalog_sale { cs_sold_date_sk: 1, cs_item_sk: 2, cs_bill_customer_sk: 2, cs_quantity: 2, cs_list_price: 10.0 }];
    let web_sales = vec![Web_sale { ws_sold_date_sk: 1, ws_item_sk: 1, ws_bill_customer_sk: 1, ws_quantity: 3, ws_list_price: 10.0 }, Web_sale { ws_sold_date_sk: 1, ws_item_sk: 2, ws_bill_customer_sk: 2, ws_quantity: 1, ws_list_price: 10.0 }];
    let frequent_ss_items = { let mut tmp1 = std::collections::HashMap::new();for ss in &store_sales { for d in &date_dim { if !(ss.ss_sold_date_sk == d.d_date_sk) { continue; } for i in &item { if !(ss.ss_item_sk == i.i_item_sk) { continue; } if !(d.d_year == 2000) { continue; } let key = Key { item_sk: i.i_item_sk, date_sk: d.d_date_sk }; tmp1.entry(key).or_insert_with(Vec::new).push(Item2 {ss: ss.clone(), d: d.clone(), i: i.clone() }); } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut tmp3 = Vec::new(); for g in tmp2.into_iter() { if g.clone().items.len() as i32 > 4 { tmp3.push(g); } } let mut result = Vec::new(); for g in tmp3 { result.push(g.key.item_sk); } result };
    let customer_totals = { let mut tmp4 = std::collections::HashMap::new();for ss in &store_sales { let key = ss.ss_customer_sk; tmp4.entry(key).or_insert_with(Vec::new).push(ss.clone()); } let mut tmp5 = Vec::<Group3>::new(); for (k,v) in tmp4 { tmp5.push(Group3 { key: k, items: v }); } tmp5.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp5 { result.push(Result { cust: g.key, sales: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push(x.ss_quantity * x.ss_sales_price); } tmp6 }) }); } result };
    let max_sales = max(&{ let mut tmp7 = Vec::new();for c in &customer_totals { tmp7.push(c.sales); } tmp7 });
    let best_ss_customer = { let mut tmp8 = Vec::new();for c in &customer_totals { if !(c.sales > 0.95 * max_sales) { continue; } tmp8.push(c.cust); } tmp8 };
    let catalog = { let mut tmp9 = Vec::new();for cs in &catalog_sales { for d in &date_dim { if !(cs.cs_sold_date_sk == d.d_date_sk) { continue; } if !(frequent_ss_items.contains(&best_ss_customer.contains(&d.d_year == 2000 && d.d_moy == 1 && cs.cs_bill_customer_sk) && cs.cs_item_sk)) { continue; } tmp9.push((cs.cs_quantity as f64) * cs.cs_list_price); } } tmp9 };
    let web = { let mut tmp10 = Vec::new();for ws in &web_sales { for d in &date_dim { if !(ws.ws_sold_date_sk == d.d_date_sk) { continue; } if !(frequent_ss_items.contains(&best_ss_customer.contains(&d.d_year == 2000 && d.d_moy == 1 && ws.ws_bill_customer_sk) && ws.ws_item_sk)) { continue; } tmp10.push((ws.ws_quantity as f64) * ws.ws_list_price); } } tmp10 };
    let result = sum(&catalog) + sum(&web);
    _json(&result);
    assert!(result == 50.0);
}
