// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:30:20Z
#[derive(Default, Debug, Clone, PartialEq)]
struct CatalogSale {
        cs_sold_date_sk: i32,
        cs_item_sk: i32,
        cs_bill_cdemo_sk: i32,
        cs_promo_sk: i32,
        cs_quantity: i32,
        cs_list_price: f64,
        cs_coupon_amt: f64,
        cs_sales_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct CustomerDemo {
        cd_demo_sk: i32,
        cd_gender: &'static str,
        cd_marital_status: &'static str,
        cd_education_status: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct DateDim {
        d_date_sk: i32,
        d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct Item {
        i_item_sk: i32,
        i_item_id: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash)]
struct Promotion {
        p_promo_sk: i32,
        p_channel_email: &'static str,
        p_channel_event: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Catalog_sale {
    cs_sold_date_sk: i32,
    cs_item_sk: i32,
    cs_bill_cdemo_sk: i32,
    cs_promo_sk: i32,
    cs_quantity: i32,
    cs_list_price: f64,
    cs_coupon_amt: f64,
    cs_sales_price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Customer_demographic {
    cd_demo_sk: i32,
    cd_gender: &'static str,
    cd_marital_status: &'static str,
    cd_education_status: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Date_dim {
    d_date_sk: i32,
    d_year: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Item1 {
    i_item_sk: i32,
    i_item_id: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Promotion2 {
    p_promo_sk: i32,
    p_channel_email: &'static str,
    p_channel_event: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Item3 {
    cs: Catalog_sale,
    cd: Customer_demographic,
    d: Date_dim,
    i: Item1,
    p: Promotion2,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: &'static str,
    items: Vec<Item3>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    i_item_id: &'static str,
    agg1: f64,
    agg2: f64,
    agg3: f64,
    agg4: f64,
}

fn avg<T>(v: &[T]) -> f64 where T: Into<f64> + Copy {
    let sum: f64 = v.iter().map(|&x| x.into()).sum();
    sum / v.len() as f64
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let catalog_sales = vec![Catalog_sale { cs_sold_date_sk: 1, cs_item_sk: 1, cs_bill_cdemo_sk: 1, cs_promo_sk: 1, cs_quantity: 10, cs_list_price: 100.0, cs_coupon_amt: 5.0, cs_sales_price: 95.0 }, Catalog_sale { cs_sold_date_sk: 1, cs_item_sk: 2, cs_bill_cdemo_sk: 2, cs_promo_sk: 2, cs_quantity: 5, cs_list_price: 50.0, cs_coupon_amt: 2.0, cs_sales_price: 48.0 }];
    let customer_demographics = vec![Customer_demographic { cd_demo_sk: 1, cd_gender: "M", cd_marital_status: "S", cd_education_status: "College" }, Customer_demographic { cd_demo_sk: 2, cd_gender: "F", cd_marital_status: "M", cd_education_status: "High School" }];
    let date_dim = vec![Date_dim { d_date_sk: 1, d_year: 2000 }];
    let item = vec![Item1 { i_item_sk: 1, i_item_id: "ITEM1" }, Item1 { i_item_sk: 2, i_item_id: "ITEM2" }];
    let promotion = vec![Promotion2 { p_promo_sk: 1, p_channel_email: "N", p_channel_event: "Y" }, Promotion2 { p_promo_sk: 2, p_channel_email: "Y", p_channel_event: "N" }];
    let result = { let mut tmp1 = std::collections::HashMap::new();for cs in &catalog_sales { for cd in &customer_demographics { if !(cs.cs_bill_cdemo_sk == cd.cd_demo_sk) { continue; } for d in &date_dim { if !(cs.cs_sold_date_sk == d.d_date_sk) { continue; } for i in &item { if !(cs.cs_item_sk == i.i_item_sk) { continue; } for p in &promotion { if !(cs.cs_promo_sk == p.p_promo_sk) { continue; } if !(cd.cd_gender == "M" && cd.cd_marital_status == "S" && cd.cd_education_status == "College" && (p.p_channel_email == "N" || p.p_channel_event == "N") && d.d_year == 2000) { continue; } let key = i.i_item_id; tmp1.entry(key).or_insert_with(Vec::new).push(Item3 {cs: cs.clone(), cd: cd.clone(), d: d.clone(), i: i.clone(), p: p.clone() }); } } } } } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { i_item_id: g.key, agg1: avg(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.cs_quantity); } tmp3 }), agg2: avg(&{ let mut tmp4 = Vec::new();for x in &g.clone().items { tmp4.push(x.cs_list_price); } tmp4 }), agg3: avg(&{ let mut tmp5 = Vec::new();for x in &g.clone().items { tmp5.push(x.cs_coupon_amt); } tmp5 }), agg4: avg(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push(x.cs_sales_price); } tmp6 }) }); } result };
    _json(&result);
    assert!(result == vec![Result { i_item_id: "ITEM1", agg1: 10.0, agg2: 100.0, agg3: 5.0, agg4: 95.0 }]);
}
