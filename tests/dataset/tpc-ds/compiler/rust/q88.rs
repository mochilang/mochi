// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:09:36Z
#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Time_dim {
    time_sk: i32,
    hour: i32,
    minute: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Household_demographic {
    hd_demo_sk: i32,
    hd_dep_count: i32,
    hd_vehicle_count: i32,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Store {
    s_store_sk: i32,
    s_store_name: &'static str,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    sold_time_sk: i32,
    hdemo_sk: i32,
    store_sk: i32,
    qty: f64,
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let time_dim = vec![Time_dim { time_sk: 1, hour: 8, minute: 30 }, Time_dim { time_sk: 2, hour: 9, minute: 0 }, Time_dim { time_sk: 3, hour: 9, minute: 30 }, Time_dim { time_sk: 4, hour: 10, minute: 0 }, Time_dim { time_sk: 5, hour: 10, minute: 30 }, Time_dim { time_sk: 6, hour: 11, minute: 0 }, Time_dim { time_sk: 7, hour: 11, minute: 30 }, Time_dim { time_sk: 8, hour: 12, minute: 0 }];
    let household_demographics = vec![Household_demographic { hd_demo_sk: 1, hd_dep_count: 1, hd_vehicle_count: 1 }];
    let store = vec![Store { s_store_sk: 1, s_store_name: "ese" }];
    let store_sales = vec![Store_sale { sold_time_sk: 1, hdemo_sk: 1, store_sk: 1, qty: 10.0 }, Store_sale { sold_time_sk: 2, hdemo_sk: 1, store_sk: 1, qty: 12.0 }, Store_sale { sold_time_sk: 3, hdemo_sk: 1, store_sk: 1, qty: 14.0 }, Store_sale { sold_time_sk: 4, hdemo_sk: 1, store_sk: 1, qty: 11.0 }, Store_sale { sold_time_sk: 5, hdemo_sk: 1, store_sk: 1, qty: 8.0 }, Store_sale { sold_time_sk: 6, hdemo_sk: 1, store_sk: 1, qty: 9.0 }, Store_sale { sold_time_sk: 7, hdemo_sk: 1, store_sk: 1, qty: 10.0 }, Store_sale { sold_time_sk: 8, hdemo_sk: 1, store_sk: 1, qty: 14.0 }];
    fn count_range(ssales: Vec<any>, tdim: Vec<any>, hour: i32, start_min: i32, end_min: i32) -> f64 {
        let mut total = 0.0;
        for ss in ssales {
            for t in tdim {
                if ss.sold_time_sk == t.time_sk && t.hour == hour && t.minute >= start_min && t.minute < end_min {
                    total += ss.qty;
                }
            }
        }
        return total;
    }
    let h8_30_to_9 = count_range(store_sales, time_dim, 8, 30, 60);
    let h9_to_9_30 = count_range(store_sales, time_dim, 9, 0, 30);
    let h9_30_to_10 = count_range(store_sales, time_dim, 9, 30, 60);
    let h10_to_10_30 = count_range(store_sales, time_dim, 10, 0, 30);
    let h10_30_to_11 = count_range(store_sales, time_dim, 10, 30, 60);
    let h11_to_11_30 = count_range(store_sales, time_dim, 11, 0, 30);
    let h11_30_to_12 = count_range(store_sales, time_dim, 11, 30, 60);
    let h12_to_12_30 = count_range(store_sales, time_dim, 12, 0, 30);
    let result = h8_30_to_9 + h9_to_9_30 + h9_30_to_10 + h10_to_10_30 + h10_30_to_11 + h11_to_11_30 + h11_30_to_12 + h12_to_12_30;
    _json(&result);
    assert!(result == 88 as f64);
}
