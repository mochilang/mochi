// Generated by Mochi compiler v0.10.26 on 2025-07-15T07:09:29Z
#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Store_sale {
    item: i32,
    price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Catalog_sale {
    item: i32,
    price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Web_sale {
    item: i32,
    price: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group {
    key: i32,
    items: Vec<Store_sale>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result {
    item: i32,
    total: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group1 {
    key: i32,
    items: Vec<Catalog_sale>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result2 {
    item: i32,
    total: f64,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Group3 {
    key: i32,
    items: Vec<Web_sale>,
}

#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
struct Result4 {
    item: i32,
    total: f64,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Group5 {
    key: i32,
    items: Vec<i32>,
}

#[derive(Default, Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
struct Result6 {
    i_item_id: i32,
    total_sales: i32,
}

fn sum<T>(v: &[T]) -> T where T: std::iter::Sum<T> + Copy {
    v.iter().copied().sum()
}

fn _json<T: std::fmt::Debug>(value: &T) {
    println!("{:?}", value);
}

fn main() {
    let store_sales = vec![Store_sale { item: 1, price: 10.0 }];
    let catalog_sales = vec![Catalog_sale { item: 1, price: 20.0 }];
    let web_sales = vec![Web_sale { item: 1, price: 30.0 }];
    let ss = { let mut tmp1 = std::collections::HashMap::new();for s in &store_sales { let key = s.item; tmp1.entry(key).or_insert_with(Vec::new).push(s.clone()); } let mut tmp2 = Vec::<Group>::new(); for (k,v) in tmp1 { tmp2.push(Group { key: k, items: v }); } tmp2.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp2 { result.push(Result { item: g.key, total: sum(&{ let mut tmp3 = Vec::new();for x in &g.clone().items { tmp3.push(x.price); } tmp3 }) }); } result };
    let cs = { let mut tmp4 = std::collections::HashMap::new();for s in &catalog_sales { let key = s.item; tmp4.entry(key).or_insert_with(Vec::new).push(s.clone()); } let mut tmp5 = Vec::<Group1>::new(); for (k,v) in tmp4 { tmp5.push(Group1 { key: k, items: v }); } tmp5.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp5 { result.push(Result2 { item: g.key, total: sum(&{ let mut tmp6 = Vec::new();for x in &g.clone().items { tmp6.push(x.price); } tmp6 }) }); } result };
    let ws = { let mut tmp7 = std::collections::HashMap::new();for s in &web_sales { let key = s.item; tmp7.entry(key).or_insert_with(Vec::new).push(s.clone()); } let mut tmp8 = Vec::<Group3>::new(); for (k,v) in tmp7 { tmp8.push(Group3 { key: k, items: v }); } tmp8.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp8 { result.push(Result4 { item: g.key, total: sum(&{ let mut tmp9 = Vec::new();for x in &g.clone().items { tmp9.push(x.price); } tmp9 }) }); } result };
    let union = concat(ss, cs, ws);
    let result = { let mut tmp10 = std::collections::HashMap::new();for &u in &union { let key = u.item; tmp10.entry(key).or_insert_with(Vec::new).push(u); } let mut tmp11 = Vec::<Group5>::new(); for (k,v) in tmp10 { tmp11.push(Group5 { key: k, items: v }); } tmp11.sort_by(|a,b| a.key.partial_cmp(&b.key).unwrap()); let mut result = Vec::new(); for g in tmp11 { result.push(Result6 { i_item_id: g.key, total_sales: sum(&{ let mut tmp12 = Vec::new();for x in &g.clone().items { tmp12.push(x.total); } tmp12 }) }); } result };
    _json(&result);
    assert!(result == vec![Result6 { i_item_id: 1, total_sales: 60.0 }]);
}
