//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:00:58Z

package main

import (
	"encoding/json"
	"fmt"
	"slices"
	"time"

	"golang.org/x/exp/constraints"
)

type Reason struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type Store_sale struct {
	Reason int `json:"reason"`
	Price  int `json:"price"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q67_simplified() {
	expect((result == 67))
}

var store_sales []Store_sale
var reason []Reason
var result float64

func main() {
	store_sales = []Store_sale{Store_sale{
		Reason: 1,
		Price:  40,
	}, Store_sale{
		Reason: 2,
		Price:  27,
	}}
	reason = []Reason{Reason{
		ID:   1,
		Name: "PROMO",
	}, Reason{
		ID:   2,
		Name: "RETURN",
	}}
	result = _sumOrdered[int](func() []int {
		results := []int{}
		for _, ss := range store_sales {
			for _, r := range reason {
				if !(ss.Reason == r.ID) {
					continue
				}
				if slices.Contains([]string{"PROMO", "RETURN"}, r.Name) {
					if slices.Contains([]string{"PROMO", "RETURN"}, r.Name) {
						results = append(results, ss.Price)
					}
				}
			}
		}
		return results
	}())
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q67_simplified()
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
