//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:06:10Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type C struct {
	Cs_call_center_sk any     `json:"cs_call_center_sk"`
	Sales             float64 `json:"sales"`
	Profit            float64 `json:"profit"`
}

type Catalog_return struct {
	Cr_returned_date_sk int     `json:"cr_returned_date_sk"`
	Cr_call_center_sk   int     `json:"cr_call_center_sk"`
	Cr_return_amount    float64 `json:"cr_return_amount"`
	Cr_net_loss         float64 `json:"cr_net_loss"`
}

type Catalog_sale struct {
	Cs_sold_date_sk    int     `json:"cs_sold_date_sk"`
	Cs_call_center_sk  int     `json:"cs_call_center_sk"`
	Cs_ext_sales_price float64 `json:"cs_ext_sales_price"`
	Cs_net_profit      float64 `json:"cs_net_profit"`
}

type Cr struct {
	Cr_call_center_sk any     `json:"cr_call_center_sk"`
	Returns           float64 `json:"returns"`
	Profit_loss       float64 `json:"profit_loss"`
}

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_date    int `json:"d_date"`
}

type GKey struct {
	Channel any `json:"channel"`
	ID      any `json:"id"`
}

type Result struct {
	Channel any     `json:"channel"`
	ID      any     `json:"id"`
	Sales   float64 `json:"sales"`
	Returns float64 `json:"returns"`
	Profit  float64 `json:"profit"`
}

type S struct {
	S_store_sk any     `json:"s_store_sk"`
	Sales      float64 `json:"sales"`
	Profit     float64 `json:"profit"`
}

type Sr struct {
	S_store_sk  any     `json:"s_store_sk"`
	Returns     float64 `json:"returns"`
	Profit_loss float64 `json:"profit_loss"`
}

type Store_return struct {
	Sr_returned_date_sk int     `json:"sr_returned_date_sk"`
	S_store_sk          int     `json:"s_store_sk"`
	Sr_return_amt       float64 `json:"sr_return_amt"`
	Sr_net_loss         float64 `json:"sr_net_loss"`
}

type Store_sale struct {
	Ss_sold_date_sk    int     `json:"ss_sold_date_sk"`
	S_store_sk         int     `json:"s_store_sk"`
	Ss_ext_sales_price float64 `json:"ss_ext_sales_price"`
	Ss_net_profit      float64 `json:"ss_net_profit"`
}

type W struct {
	Wp_web_page_sk any     `json:"wp_web_page_sk"`
	Sales          float64 `json:"sales"`
	Profit         float64 `json:"profit"`
}

type Web_return struct {
	Wr_returned_date_sk int     `json:"wr_returned_date_sk"`
	Wr_web_page_sk      int     `json:"wr_web_page_sk"`
	Wr_return_amt       float64 `json:"wr_return_amt"`
	Wr_net_loss         float64 `json:"wr_net_loss"`
}

type Web_sale struct {
	Ws_sold_date_sk    int     `json:"ws_sold_date_sk"`
	Ws_web_page_sk     int     `json:"ws_web_page_sk"`
	Ws_ext_sales_price float64 `json:"ws_ext_sales_price"`
	Ws_net_profit      float64 `json:"ws_net_profit"`
}

type Wr struct {
	Wp_web_page_sk any     `json:"wp_web_page_sk"`
	Returns        float64 `json:"returns"`
	Profit_loss    float64 `json:"profit_loss"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q77_simplified() {
	expect(_equal(result, []v{v{
		Channel: "catalog channel",
		ID:      1,
		Sales:   150.0,
		Returns: 7.0,
		Profit:  12.0,
	}, v{
		Channel: "store channel",
		ID:      1,
		Sales:   100.0,
		Returns: 5.0,
		Profit:  9.0,
	}, v{
		Channel: "web channel",
		ID:      1,
		Sales:   200.0,
		Returns: 10.0,
		Profit:  18.0,
	}}))
}

var date_dim []Date_dim
var store_sales []Store_sale
var store_returns []Store_return
var catalog_sales []Catalog_sale
var catalog_returns []Catalog_return
var web_sales []Web_sale
var web_returns []Web_return
var ss []S
var sr []Sr
var cs []C
var cr []Cr
var ws []W
var wr []Wr
var per_channel []any
var result []Result

func main() {
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_date:    1,
	}}
	store_sales = []Store_sale{Store_sale{
		Ss_sold_date_sk:    1,
		S_store_sk:         1,
		Ss_ext_sales_price: 100.0,
		Ss_net_profit:      10.0,
	}}
	store_returns = []Store_return{Store_return{
		Sr_returned_date_sk: 1,
		S_store_sk:          1,
		Sr_return_amt:       5.0,
		Sr_net_loss:         1.0,
	}}
	catalog_sales = []Catalog_sale{Catalog_sale{
		Cs_sold_date_sk:    1,
		Cs_call_center_sk:  1,
		Cs_ext_sales_price: 150.0,
		Cs_net_profit:      15.0,
	}}
	catalog_returns = []Catalog_return{Catalog_return{
		Cr_returned_date_sk: 1,
		Cr_call_center_sk:   1,
		Cr_return_amount:    7.0,
		Cr_net_loss:         3.0,
	}}
	web_sales = []Web_sale{Web_sale{
		Ws_sold_date_sk:    1,
		Ws_web_page_sk:     1,
		Ws_ext_sales_price: 200.0,
		Ws_net_profit:      20.0,
	}}
	web_returns = []Web_return{Web_return{
		Wr_returned_date_sk: 1,
		Wr_web_page_sk:      1,
		Wr_return_amt:       10.0,
		Wr_net_loss:         2.0,
	}}
	ss = _convSlice[v, S](func() []S {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, ss := range store_sales {
			for _, d := range date_dim {
				if !(d.D_date_sk == ss.Ss_sold_date_sk) {
					continue
				}
				key := ss.S_store_sk
				ks := fmt.Sprint(key)
				g, ok := groups[ks]
				if !ok {
					g = &data.Group{Key: key}
					groups[ks] = g
					order = append(order, ks)
				}
				g.Items = append(g.Items, ss)
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []S{}
		for _, g := range items {
			results = append(results, S{
				S_store_sk: any(g.Key.(S)),
				Sales: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Store_sale)
						results = append(results, _getField(x.Ss, "ss_ext_sales_price"))
					}
					return results
				}()),
				Profit: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Store_sale)
						results = append(results, _getField(x.Ss, "ss_net_profit"))
					}
					return results
				}()),
			})
		}
		return results
	}())
	sr = _convSlice[v, Sr](func() []Sr {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, sr := range store_returns {
			for _, d := range date_dim {
				if !(d.D_date_sk == sr.Sr_returned_date_sk) {
					continue
				}
				key := sr.S_store_sk
				ks := fmt.Sprint(key)
				g, ok := groups[ks]
				if !ok {
					g = &data.Group{Key: key}
					groups[ks] = g
					order = append(order, ks)
				}
				g.Items = append(g.Items, sr)
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Sr{}
		for _, g := range items {
			results = append(results, Sr{
				S_store_sk: any(g.Key.(Sr)),
				Returns: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Store_return)
						results = append(results, _getField(x.Sr, "sr_return_amt"))
					}
					return results
				}()),
				Profit_loss: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Store_return)
						results = append(results, _getField(x.Sr, "sr_net_loss"))
					}
					return results
				}()),
			})
		}
		return results
	}())
	cs = _convSlice[v, C](func() []C {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, cs := range catalog_sales {
			for _, d := range date_dim {
				if !(d.D_date_sk == cs.Cs_sold_date_sk) {
					continue
				}
				key := cs.Cs_call_center_sk
				ks := fmt.Sprint(key)
				g, ok := groups[ks]
				if !ok {
					g = &data.Group{Key: key}
					groups[ks] = g
					order = append(order, ks)
				}
				g.Items = append(g.Items, cs)
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []C{}
		for _, g := range items {
			results = append(results, C{
				Cs_call_center_sk: any(g.Key.(C)),
				Sales: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Catalog_sale)
						results = append(results, _getField(x.Cs, "cs_ext_sales_price"))
					}
					return results
				}()),
				Profit: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Catalog_sale)
						results = append(results, _getField(x.Cs, "cs_net_profit"))
					}
					return results
				}()),
			})
		}
		return results
	}())
	cr = _convSlice[v, Cr](func() []Cr {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, cr := range catalog_returns {
			for _, d := range date_dim {
				if !(d.D_date_sk == cr.Cr_returned_date_sk) {
					continue
				}
				key := cr.Cr_call_center_sk
				ks := fmt.Sprint(key)
				g, ok := groups[ks]
				if !ok {
					g = &data.Group{Key: key}
					groups[ks] = g
					order = append(order, ks)
				}
				g.Items = append(g.Items, cr)
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Cr{}
		for _, g := range items {
			results = append(results, Cr{
				Cr_call_center_sk: any(g.Key.(Cr)),
				Returns: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Catalog_return)
						results = append(results, _getField(x.Cr, "cr_return_amount"))
					}
					return results
				}()),
				Profit_loss: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Catalog_return)
						results = append(results, _getField(x.Cr, "cr_net_loss"))
					}
					return results
				}()),
			})
		}
		return results
	}())
	ws = _convSlice[v, W](func() []W {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, ws := range web_sales {
			for _, d := range date_dim {
				if !(d.D_date_sk == ws.Ws_sold_date_sk) {
					continue
				}
				key := ws.Ws_web_page_sk
				ks := fmt.Sprint(key)
				g, ok := groups[ks]
				if !ok {
					g = &data.Group{Key: key}
					groups[ks] = g
					order = append(order, ks)
				}
				g.Items = append(g.Items, ws)
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []W{}
		for _, g := range items {
			results = append(results, W{
				Wp_web_page_sk: any(g.Key.(W)),
				Sales: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Web_sale)
						results = append(results, _getField(x.Ws, "ws_ext_sales_price"))
					}
					return results
				}()),
				Profit: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Web_sale)
						results = append(results, _getField(x.Ws, "ws_net_profit"))
					}
					return results
				}()),
			})
		}
		return results
	}())
	wr = _convSlice[v, Wr](func() []Wr {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, wr := range web_returns {
			for _, d := range date_dim {
				if !(d.D_date_sk == wr.Wr_returned_date_sk) {
					continue
				}
				key := wr.Wr_web_page_sk
				ks := fmt.Sprint(key)
				g, ok := groups[ks]
				if !ok {
					g = &data.Group{Key: key}
					groups[ks] = g
					order = append(order, ks)
				}
				g.Items = append(g.Items, wr)
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Wr{}
		for _, g := range items {
			results = append(results, Wr{
				Wp_web_page_sk: any(g.Key.(Wr)),
				Returns: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Web_return)
						results = append(results, _getField(x.Wr, "wr_return_amt"))
					}
					return results
				}()),
				Profit_loss: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Web_return)
						results = append(results, _getField(x.Wr, "wr_net_loss"))
					}
					return results
				}()),
			})
		}
		return results
	}())
	per_channel = append(append(func() []any {
		srMap := make(map[any]Sr)
		for _, r := range sr {
			srMap[r.S_store_sk] = r
		}
		var result []any
		for _, s := range ss {
			r := any{OrderID: s.ID, Total: s.Total}
			if v, ok := srMap[s.S_store_sk]; ok {
				r.Customer = &v
			} else {
				r.Customer = nil
			}
			result = append(result, r)
		}
		return result
	}(), func() []v {
		results := []v{}
		for _, c := range cs {
			for _, r := range cr {
				if !(c.Cs_call_center_sk == r.Cr_call_center_sk) {
					continue
				}
				results = append(results, v{
					Channel: "catalog channel",
					ID:      c.Cs_call_center_sk,
					Sales:   c.Sales,
					Returns: r.Returns,
					Profit:  (c.Profit - r.Profit_loss),
				})
			}
		}
		return results
	}()...), func() []v {
		wrMap := make(map[any]Wr)
		for _, r := range wr {
			wrMap[r.Wp_web_page_sk] = r
		}
		var result []v
		for _, w := range ws {
			r := v{OrderID: w.ID, Total: w.Total}
			if v, ok := wrMap[w.Wp_web_page_sk]; ok {
				r.Customer = &v
			} else {
				r.Customer = nil
			}
			result = append(result, r)
		}
		return result
	}()...)
	result = func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, p := range per_channel {
			key := GKey{
				Channel: _getField(p, "channel"),
				ID:      _getField(p, "id"),
			}
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, p)
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		type pair struct {
			item *data.Group
			key  any
		}
		pairs := make([]pair, len(items))
		for idx, it := range items {
			g := it
			pairs[idx] = pair{item: it, key: g.Key.(GKey).Channel}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for idx, p := range pairs {
			items[idx] = p.item
		}
		results := []Result{}
		for _, g := range items {
			results = append(results, Result{
				Channel: g.Key.(GKey).Channel,
				ID:      g.Key.(GKey).ID,
				Sales: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(any)
						results = append(results, _getField(_getField(x, "p"), "sales"))
					}
					return results
				}()),
				Returns: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(any)
						results = append(results, _getField(_getField(x, "p"), "returns"))
					}
					return results
				}()),
				Profit: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(any)
						results = append(results, _getField(_getField(x, "p"), "profit"))
					}
					return results
				}()),
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q77_simplified()
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}

func _sum[T constraints.Integer | constraints.Float](v []T) float64 {
	var sum float64
	for _, n := range v {
		sum += float64(n)
	}
	return sum
}
