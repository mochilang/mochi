package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"time"
)

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

type WebSale struct {
	Ws_order_number  int     `json:"ws_order_number"`
	Ws_warehouse_sk  int     `json:"ws_warehouse_sk"`
	Ws_ship_date_sk  int     `json:"ws_ship_date_sk"`
	Ws_ship_addr_sk  int     `json:"ws_ship_addr_sk"`
	Ws_web_site_sk   int     `json:"ws_web_site_sk"`
	Ws_ext_ship_cost float64 `json:"ws_ext_ship_cost"`
	Ws_net_profit    float64 `json:"ws_net_profit"`
}

type WebReturn struct {
	Wr_order_number int `json:"wr_order_number"`
}

type DateDim struct {
	D_date_sk int    `json:"d_date_sk"`
	D_date    string `json:"d_date"`
}

type CustomerAddress struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_state      string `json:"ca_state"`
}

type WebSite struct {
	Web_site_sk      int    `json:"web_site_sk"`
	Web_company_name string `json:"web_company_name"`
}

var distinct = func(xs []any) []any {
	var out []any = []any{}
	for _, x := range xs {
		if !contains(_cast[string](out), _cast[string](x)) {
			out = append(out, x)
		}
	}
	return out
}

func test_TPCDS_Q95_shipping_returns() {
	expect(_equal(result, map[string]any{
		"order_count":         1,
		"total_shipping_cost": 2.0,
		"total_net_profit":    5.0,
	}))
}

type Web_salesItem struct {
	Ws_order_number  int     `json:"ws_order_number"`
	Ws_warehouse_sk  int     `json:"ws_warehouse_sk"`
	Ws_ship_date_sk  int     `json:"ws_ship_date_sk"`
	Ws_ship_addr_sk  int     `json:"ws_ship_addr_sk"`
	Ws_web_site_sk   int     `json:"ws_web_site_sk"`
	Ws_ext_ship_cost float64 `json:"ws_ext_ship_cost"`
	Ws_net_profit    float64 `json:"ws_net_profit"`
}

var web_sales []Web_salesItem

type Web_returnsItem struct {
	Wr_order_number int `json:"wr_order_number"`
}

var web_returns []Web_returnsItem

type Date_dimItem struct {
	D_date_sk int    `json:"d_date_sk"`
	D_date    string `json:"d_date"`
}

var date_dim []Date_dimItem

type Customer_addressItem struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_state      string `json:"ca_state"`
}

var customer_address []Customer_addressItem

type Web_siteItem struct {
	Web_site_sk      int    `json:"web_site_sk"`
	Web_company_name string `json:"web_company_name"`
}

var web_site []Web_siteItem
var ws_wh []map[string]int
var filtered []Web_salesItem
var result map[string]any

func main() {
	failures := 0
	web_sales = _cast[[]Web_salesItem]([]Web_salesItem{Web_salesItem{
		Ws_order_number:  1,
		Ws_warehouse_sk:  1,
		Ws_ship_date_sk:  1,
		Ws_ship_addr_sk:  1,
		Ws_web_site_sk:   1,
		Ws_ext_ship_cost: 2.0,
		Ws_net_profit:    5.0,
	}, Web_salesItem{
		Ws_order_number:  1,
		Ws_warehouse_sk:  2,
		Ws_ship_date_sk:  1,
		Ws_ship_addr_sk:  1,
		Ws_web_site_sk:   1,
		Ws_ext_ship_cost: 0.0,
		Ws_net_profit:    0.0,
	}})
	web_returns = _cast[[]Web_returnsItem]([]Web_returnsItem{Web_returnsItem{Wr_order_number: 1}})
	date_dim = _cast[[]Date_dimItem]([]Date_dimItem{Date_dimItem{
		D_date_sk: 1,
		D_date:    "2001-02-01",
	}})
	customer_address = _cast[[]Customer_addressItem]([]Customer_addressItem{Customer_addressItem{
		Ca_address_sk: 1,
		Ca_state:      "CA",
	}})
	web_site = _cast[[]Web_siteItem]([]Web_siteItem{Web_siteItem{
		Web_site_sk:      1,
		Web_company_name: "pri",
	}})
	ws_wh = func() []map[string]int {
		_res := []map[string]int{}
		for _, ws1 := range web_sales {
			for _, ws2 := range web_sales {
				if (ws1.Ws_order_number == ws2.Ws_order_number) && (ws1.Ws_warehouse_sk != ws2.Ws_warehouse_sk) {
					if (ws1.Ws_order_number == ws2.Ws_order_number) && (ws1.Ws_warehouse_sk != ws2.Ws_warehouse_sk) {
						_res = append(_res, map[string]int{"ws_order_number": ws1.Ws_order_number})
					}
				}
			}
		}
		return _res
	}()
	filtered = func() []Web_salesItem {
		_res := []Web_salesItem{}
		for _, ws := range web_sales {
			for _, d := range date_dim {
				if !(ws.Ws_ship_date_sk == d.D_date_sk) {
					continue
				}
				for _, ca := range customer_address {
					if !(ws.Ws_ship_addr_sk == ca.Ca_address_sk) {
						continue
					}
					for _, w := range web_site {
						if !(ws.Ws_web_site_sk == w.Web_site_sk) {
							continue
						}
						if (((ca.Ca_state == "CA") && (w.Web_company_name == "pri")) && _contains[int]((func() []int {
							_res := []int{}
							for _, x := range ws_wh {
								_res = append(_res, x["ws_order_number"])
							}
							return _res
						}()), ws.Ws_order_number)) && _contains[int]((func() []int {
							_res := []int{}
							for _, wr := range web_returns {
								_res = append(_res, wr.Wr_order_number)
							}
							return _res
						}()), ws.Ws_order_number) {
							if (((ca.Ca_state == "CA") && (w.Web_company_name == "pri")) && _contains[int]((func() []int {
								_res := []int{}
								for _, x := range ws_wh {
									_res = append(_res, x["ws_order_number"])
								}
								return _res
							}()), ws.Ws_order_number)) && _contains[int]((func() []int {
								_res := []int{}
								for _, wr := range web_returns {
									_res = append(_res, wr.Wr_order_number)
								}
								return _res
							}()), ws.Ws_order_number) {
								_res = append(_res, ws)
							}
						}
					}
				}
			}
		}
		return _res
	}()
	result = map[string]any{
		"order_count": len(distinct(_convSlice[int, any](func() []int {
			_res := []int{}
			for _, x := range filtered {
				_res = append(_res, x.Ws_order_number)
			}
			return _res
		}()))),
		"total_shipping_cost": _sum(func() []float64 {
			_res := []float64{}
			for _, x := range filtered {
				_res = append(_res, x.Ws_ext_ship_cost)
			}
			return _res
		}()),
		"total_net_profit": _sum(func() []float64 {
			_res := []float64{}
			for _, x := range filtered {
				_res = append(_res, x.Ws_net_profit)
			}
			return _res
		}()),
	}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	{
		printTestStart("TPCDS Q95 shipping returns")
		start := time.Now()
		var failed error
		func() {
			defer func() {
				if r := recover(); r != nil {
					failed = fmt.Errorf("%v", r)
				}
			}()
			test_TPCDS_Q95_shipping_returns()
		}()
		if failed != nil {
			failures++
			printTestFail(failed, time.Since(start))
		} else {
			printTestPass(time.Since(start))
		}
	}
	if failures > 0 {
		fmt.Printf("\n[FAIL] %d test(s) failed.\n", failures)
	}
}

func _cast[T any](v any) T {
	if tv, ok := v.(T); ok {
		return tv
	}
	var out T
	switch any(out).(type) {
	case int:
		switch vv := v.(type) {
		case int:
			return any(vv).(T)
		case float64:
			return any(int(vv)).(T)
		case float32:
			return any(int(vv)).(T)
		}
	case float64:
		switch vv := v.(type) {
		case int:
			return any(float64(vv)).(T)
		case float64:
			return any(vv).(T)
		case float32:
			return any(float64(vv)).(T)
		}
	case float32:
		switch vv := v.(type) {
		case int:
			return any(float32(vv)).(T)
		case float64:
			return any(float32(vv)).(T)
		case float32:
			return any(vv).(T)
		}
	}
	if m, ok := v.(map[any]any); ok {
		v = _convertMapAny(m)
	}
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	if err := json.Unmarshal(data, &out); err != nil {
		panic(err)
	}
	return out
}

func _contains[T comparable](s []T, v T) bool {
	for _, x := range s {
		if x == v {
			return true
		}
	}
	return false
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _sum(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []float64:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []string, []bool:
			panic("sum() expects numbers")
		default:
			panic("sum() expects list or group")
		}
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("sum() expects numbers")
		}
	}
	return sum
}
