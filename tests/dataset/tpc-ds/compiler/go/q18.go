//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:04:46Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"time"

	"golang.org/x/exp/constraints"
)

type CatalogSale struct {
	Cs_quantity         int     `json:"cs_quantity"`
	Cs_list_price       float64 `json:"cs_list_price"`
	Cs_coupon_amt       float64 `json:"cs_coupon_amt"`
	Cs_sales_price      float64 `json:"cs_sales_price"`
	Cs_net_profit       float64 `json:"cs_net_profit"`
	Cs_bill_cdemo_sk    int     `json:"cs_bill_cdemo_sk"`
	Cs_bill_customer_sk int     `json:"cs_bill_customer_sk"`
	Cs_sold_date_sk     int     `json:"cs_sold_date_sk"`
	Cs_item_sk          int     `json:"cs_item_sk"`
}

type Catalog_sale struct {
	Cs_quantity         int     `json:"cs_quantity"`
	Cs_list_price       float64 `json:"cs_list_price"`
	Cs_coupon_amt       float64 `json:"cs_coupon_amt"`
	Cs_sales_price      float64 `json:"cs_sales_price"`
	Cs_net_profit       float64 `json:"cs_net_profit"`
	Cs_bill_cdemo_sk    int     `json:"cs_bill_cdemo_sk"`
	Cs_bill_customer_sk int     `json:"cs_bill_customer_sk"`
	Cs_sold_date_sk     int     `json:"cs_sold_date_sk"`
	Cs_item_sk          int     `json:"cs_item_sk"`
}

type Customer struct {
	C_customer_sk      int `json:"c_customer_sk"`
	C_current_cdemo_sk int `json:"c_current_cdemo_sk"`
	C_current_addr_sk  int `json:"c_current_addr_sk"`
	C_birth_year       int `json:"c_birth_year"`
	C_birth_month      int `json:"c_birth_month"`
}

type CustomerAddress struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_country    string `json:"ca_country"`
	Ca_state      string `json:"ca_state"`
	Ca_county     string `json:"ca_county"`
}

type CustomerDemographics struct {
	Cd_demo_sk          int    `json:"cd_demo_sk"`
	Cd_gender           string `json:"cd_gender"`
	Cd_education_status string `json:"cd_education_status"`
	Cd_dep_count        int    `json:"cd_dep_count"`
}

type Customer_addres struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_country    string `json:"ca_country"`
	Ca_state      string `json:"ca_state"`
	Ca_county     string `json:"ca_county"`
}

type Customer_demographic struct {
	Cd_demo_sk          int    `json:"cd_demo_sk"`
	Cd_gender           string `json:"cd_gender"`
	Cd_education_status string `json:"cd_education_status"`
	Cd_dep_count        int    `json:"cd_dep_count"`
}

type DateDim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
}

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
}

type GKey struct {
	I_item_id  string `json:"i_item_id"`
	Ca_country string `json:"ca_country"`
	Ca_state   string `json:"ca_state"`
	Ca_county  string `json:"ca_county"`
}

type Item struct {
	I_item_sk int    `json:"i_item_sk"`
	I_item_id string `json:"i_item_id"`
}

type Joined struct {
	I_item_id  string  `json:"i_item_id"`
	Ca_country string  `json:"ca_country"`
	Ca_state   string  `json:"ca_state"`
	Ca_county  string  `json:"ca_county"`
	Q          int     `json:"q"`
	Lp         float64 `json:"lp"`
	Cp         float64 `json:"cp"`
	Sp         float64 `json:"sp"`
	Np         float64 `json:"np"`
	By         int     `json:"by"`
	Dep        int     `json:"dep"`
}

type Result struct {
	I_item_id  any     `json:"i_item_id"`
	Ca_country any     `json:"ca_country"`
	Ca_state   any     `json:"ca_state"`
	Ca_county  any     `json:"ca_county"`
	Agg1       float64 `json:"agg1"`
	Agg2       float64 `json:"agg2"`
	Agg3       float64 `json:"agg3"`
	Agg4       float64 `json:"agg4"`
	Agg5       float64 `json:"agg5"`
	Agg6       float64 `json:"agg6"`
	Agg7       float64 `json:"agg7"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q18_averages() {
	expect(_equal(result, []v{v{
		I_item_id:  "I1",
		Ca_country: "US",
		Ca_state:   "CA",
		Ca_county:  "County1",
		Agg1:       1.0,
		Agg2:       10.0,
		Agg3:       1.0,
		Agg4:       9.0,
		Agg5:       2.0,
		Agg6:       1980.0,
		Agg7:       2.0,
	}}))
}

var catalog_sales []Catalog_sale
var customer_demographics []Customer_demographic
var customer []Customer
var customer_address []Customer_addres
var date_dim []Date_dim
var item []Item
var joined []Joined
var result []Result

func main() {
	catalog_sales = []Catalog_sale{Catalog_sale{
		Cs_quantity:         1,
		Cs_list_price:       10.0,
		Cs_coupon_amt:       1.0,
		Cs_sales_price:      9.0,
		Cs_net_profit:       2.0,
		Cs_bill_cdemo_sk:    1,
		Cs_bill_customer_sk: 1,
		Cs_sold_date_sk:     1,
		Cs_item_sk:          1,
	}}
	customer_demographics = []Customer_demographic{Customer_demographic{
		Cd_demo_sk:          1,
		Cd_gender:           "M",
		Cd_education_status: "College",
		Cd_dep_count:        2,
	}, Customer_demographic{
		Cd_demo_sk:          2,
		Cd_gender:           "F",
		Cd_education_status: "College",
		Cd_dep_count:        2,
	}}
	customer = []Customer{Customer{
		C_customer_sk:      1,
		C_current_cdemo_sk: 2,
		C_current_addr_sk:  1,
		C_birth_year:       1980,
		C_birth_month:      1,
	}}
	customer_address = []Customer_addres{Customer_addres{
		Ca_address_sk: 1,
		Ca_country:    "US",
		Ca_state:      "CA",
		Ca_county:     "County1",
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_year:    1999,
	}}
	item = []Item{Item{
		I_item_sk: 1,
		I_item_id: "I1",
	}}
	joined = func() []Joined {
		results := []Joined{}
		for _, cs := range catalog_sales {
			for _, cd1 := range customer_demographics {
				if !(((cs.Cs_bill_cdemo_sk == cd1.Cd_demo_sk) && (cd1.Cd_gender == "M")) && (cd1.Cd_education_status == "College")) {
					continue
				}
				for _, c := range customer {
					if !(cs.Cs_bill_customer_sk == c.C_customer_sk) {
						continue
					}
					for _, cd2 := range customer_demographics {
						if !(c.C_current_cdemo_sk == cd2.Cd_demo_sk) {
							continue
						}
						for _, ca := range customer_address {
							if !(c.C_current_addr_sk == ca.Ca_address_sk) {
								continue
							}
							for _, d := range date_dim {
								if !((cs.Cs_sold_date_sk == d.D_date_sk) && (d.D_year == 1999)) {
									continue
								}
								for _, i := range item {
									if !(cs.Cs_item_sk == i.I_item_sk) {
										continue
									}
									results = append(results, Joined{
										I_item_id:  i.I_item_id,
										Ca_country: ca.Ca_country,
										Ca_state:   ca.Ca_state,
										Ca_county:  ca.Ca_county,
										Q:          cs.Cs_quantity,
										Lp:         cs.Cs_list_price,
										Cp:         cs.Cs_coupon_amt,
										Sp:         cs.Cs_sales_price,
										Np:         cs.Cs_net_profit,
										By:         c.C_birth_year,
										Dep:        cd1.Cd_dep_count,
									})
								}
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, j := range joined {
			key := GKey{
				I_item_id:  j.I_item_id,
				Ca_country: j.Ca_country,
				Ca_state:   j.Ca_state,
				Ca_county:  j.Ca_county,
			}
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, j)
		}
		results := []Result{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, Result{
				I_item_id:  g.Key.(GKey).I_item_id,
				Ca_country: g.Key.(GKey).Ca_country,
				Ca_state:   g.Key.(GKey).Ca_state,
				Ca_county:  g.Key.(GKey).Ca_county,
				Agg1: _avgOrdered[int](func() []int {
					results := []int{}
					for _, xRaw := range g.Items {
						x := xRaw.(Joined)
						results = append(results, x.Q)
					}
					return results
				}()),
				Agg2: _avgOrdered[float64](func() []float64 {
					results := []float64{}
					for _, xRaw := range g.Items {
						x := xRaw.(Joined)
						results = append(results, x.Lp)
					}
					return results
				}()),
				Agg3: _avgOrdered[float64](func() []float64 {
					results := []float64{}
					for _, xRaw := range g.Items {
						x := xRaw.(Joined)
						results = append(results, x.Cp)
					}
					return results
				}()),
				Agg4: _avgOrdered[float64](func() []float64 {
					results := []float64{}
					for _, xRaw := range g.Items {
						x := xRaw.(Joined)
						results = append(results, x.Sp)
					}
					return results
				}()),
				Agg5: _avgOrdered[float64](func() []float64 {
					results := []float64{}
					for _, xRaw := range g.Items {
						x := xRaw.(Joined)
						results = append(results, x.Np)
					}
					return results
				}()),
				Agg6: _avgOrdered[int](func() []int {
					results := []int{}
					for _, xRaw := range g.Items {
						x := xRaw.(Joined)
						results = append(results, x.By)
					}
					return results
				}()),
				Agg7: _avgOrdered[int](func() []int {
					results := []int{}
					for _, xRaw := range g.Items {
						x := xRaw.(Joined)
						results = append(results, x.Dep)
					}
					return results
				}()),
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q18_averages()
}

func _avgOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	if len(s) == 0 {
		return 0
	}
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum / float64(len(s))
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}
