package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"strings"
	"time"
)

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

type StoreSale struct {
	Ss_item_sk      int     `json:"ss_item_sk"`
	Ss_list_price   float64 `json:"ss_list_price"`
	Ss_quantity     int     `json:"ss_quantity"`
	Ss_sold_date_sk int     `json:"ss_sold_date_sk"`
}

type CatalogSale struct {
	Cs_item_sk      int     `json:"cs_item_sk"`
	Cs_list_price   float64 `json:"cs_list_price"`
	Cs_quantity     int     `json:"cs_quantity"`
	Cs_sold_date_sk int     `json:"cs_sold_date_sk"`
}

type WebSale struct {
	Ws_item_sk      int     `json:"ws_item_sk"`
	Ws_list_price   float64 `json:"ws_list_price"`
	Ws_quantity     int     `json:"ws_quantity"`
	Ws_sold_date_sk int     `json:"ws_sold_date_sk"`
}

type Item struct {
	I_item_sk     int `json:"i_item_sk"`
	I_brand_id    int `json:"i_brand_id"`
	I_class_id    int `json:"i_class_id"`
	I_category_id int `json:"i_category_id"`
}

type DateDim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
	D_moy     int `json:"d_moy"`
}

func test_TPCDS_Q14_cross_channel() {
	expect(_equal(result, []map[string]any{map[string]any{
		"channel":       "store",
		"i_brand_id":    1,
		"i_class_id":    1,
		"i_category_id": 1,
		"sales":         60.0,
		"number_sales":  1,
	}}))
}

type Store_salesItem struct {
	Ss_item_sk      int     `json:"ss_item_sk"`
	Ss_list_price   float64 `json:"ss_list_price"`
	Ss_quantity     int     `json:"ss_quantity"`
	Ss_sold_date_sk int     `json:"ss_sold_date_sk"`
}

var store_sales []Store_salesItem

type Catalog_salesItem struct {
	Cs_item_sk      int     `json:"cs_item_sk"`
	Cs_list_price   float64 `json:"cs_list_price"`
	Cs_quantity     int     `json:"cs_quantity"`
	Cs_sold_date_sk int     `json:"cs_sold_date_sk"`
}

var catalog_sales []Catalog_salesItem

type Web_salesItem struct {
	Ws_item_sk      int     `json:"ws_item_sk"`
	Ws_list_price   float64 `json:"ws_list_price"`
	Ws_quantity     int     `json:"ws_quantity"`
	Ws_sold_date_sk int     `json:"ws_sold_date_sk"`
}

var web_sales []Web_salesItem

type ItemItem struct {
	I_item_sk     int `json:"i_item_sk"`
	I_brand_id    int `json:"i_brand_id"`
	I_class_id    int `json:"i_class_id"`
	I_category_id int `json:"i_category_id"`
}

var item []ItemItem

type Date_dimItem struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
	D_moy     int `json:"d_moy"`
}

var date_dim []Date_dimItem

type Cross_itemsItem struct {
	Ss_item_sk int `json:"ss_item_sk"`
}

var cross_items []Cross_itemsItem
var avg_sales float64
var store_filtered []map[string]any
var result []map[string]any

func main() {
	failures := 0
	store_sales = _cast[[]Store_salesItem]([]Store_salesItem{Store_salesItem{
		Ss_item_sk:      1,
		Ss_list_price:   10.0,
		Ss_quantity:     2,
		Ss_sold_date_sk: 1,
	}, Store_salesItem{
		Ss_item_sk:      1,
		Ss_list_price:   20.0,
		Ss_quantity:     3,
		Ss_sold_date_sk: 2,
	}})
	catalog_sales = _cast[[]Catalog_salesItem]([]Catalog_salesItem{Catalog_salesItem{
		Cs_item_sk:      1,
		Cs_list_price:   10.0,
		Cs_quantity:     2,
		Cs_sold_date_sk: 1,
	}})
	web_sales = _cast[[]Web_salesItem]([]Web_salesItem{Web_salesItem{
		Ws_item_sk:      1,
		Ws_list_price:   30.0,
		Ws_quantity:     1,
		Ws_sold_date_sk: 1,
	}})
	item = _cast[[]ItemItem]([]ItemItem{ItemItem{
		I_item_sk:     1,
		I_brand_id:    1,
		I_class_id:    1,
		I_category_id: 1,
	}})
	date_dim = _cast[[]Date_dimItem]([]Date_dimItem{Date_dimItem{
		D_date_sk: 1,
		D_year:    2000,
		D_moy:     12,
	}, Date_dimItem{
		D_date_sk: 2,
		D_year:    2002,
		D_moy:     11,
	}})
	cross_items = _cast[[]Cross_itemsItem]([]Cross_itemsItem{Cross_itemsItem{Ss_item_sk: 1}})
	avg_sales = _avg([]float64{20.0, 20.0, 30.0})
	store_filtered = func() []map[string]any {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, ss := range store_sales {
			for _, d := range date_dim {
				if !(((ss.Ss_sold_date_sk == d.D_date_sk) && (d.D_year == 2002)) && (d.D_moy == 11)) {
					continue
				}
				if _contains((func() []int {
					_res := []int{}
					for _, ci := range cross_items {
						_res = append(_res, ci.Ss_item_sk)
					}
					return _res
				}()), ss.Ss_item_sk) {
					key := map[string]int{
						"brand_id":    1,
						"class_id":    1,
						"category_id": 1,
					}
					ks := fmt.Sprint(key)
					g, ok := groups[ks]
					if !ok {
						g = &data.Group{Key: key}
						groups[ks] = g
						order = append(order, ks)
					}
					_item := map[string]any{}
					for k, v := range _cast[map[string]any](ss) {
						_item[k] = v
					}
					_item["ss"] = ss
					for k, v := range _cast[map[string]any](d) {
						_item[k] = v
					}
					_item["d"] = d
					g.Items = append(g.Items, _item)
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		_res := []map[string]any{}
		for _, g := range items {
			_res = append(_res, map[string]any{
				"channel": "store",
				"sales": _sum(func() []any {
					_res := []any{}
					for _, x := range g.Items {
						_res = append(_res, (_cast[float64](_cast[map[string]any](x)["ss_quantity"]) * _cast[float64](_cast[map[string]any](x)["ss_list_price"])))
					}
					return _res
				}()),
				"number_sales": _count(func() []any {
					_res := []any{}
					for _, v := range g.Items {
						_res = append(_res, v)
					}
					return _res
				}()),
			})
		}
		return _res
	}()
	result = func() []map[string]any {
		_res := []map[string]any{}
		for _, r := range store_filtered {
			if _cast[float64](r["sales"]) > avg_sales {
				if _cast[float64](r["sales"]) > avg_sales {
					_res = append(_res, map[string]any{
						"channel":       r["channel"],
						"i_brand_id":    1,
						"i_class_id":    1,
						"i_category_id": 1,
						"sales":         r["sales"],
						"number_sales":  r["number_sales"],
					})
				}
			}
		}
		return _res
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	{
		printTestStart("TPCDS Q14 cross channel")
		start := time.Now()
		var failed error
		func() {
			defer func() {
				if r := recover(); r != nil {
					failed = fmt.Errorf("%v", r)
				}
			}()
			test_TPCDS_Q14_cross_channel()
		}()
		if failed != nil {
			failures++
			printTestFail(failed, time.Since(start))
		} else {
			printTestPass(time.Since(start))
		}
	}
	if failures > 0 {
		fmt.Printf("\n[FAIL] %d test(s) failed.\n", failures)
	}
}

func _avg(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []float64:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []string:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []bool:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		default:
			panic("avg() expects list or group")
		}
	}
	if len(items) == 0 {
		return 0
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("avg() expects numbers")
		}
	}
	return sum / float64(len(items))
}

func _cast[T any](v any) T {
	if tv, ok := v.(T); ok {
		return tv
	}
	var out T
	switch any(out).(type) {
	case int:
		switch vv := v.(type) {
		case int:
			return any(vv).(T)
		case float64:
			return any(int(vv)).(T)
		case float32:
			return any(int(vv)).(T)
		}
	case float64:
		switch vv := v.(type) {
		case int:
			return any(float64(vv)).(T)
		case float64:
			return any(vv).(T)
		case float32:
			return any(float64(vv)).(T)
		}
	case float32:
		switch vv := v.(type) {
		case int:
			return any(float32(vv)).(T)
		case float64:
			return any(float32(vv)).(T)
		case float32:
			return any(vv).(T)
		}
	}
	if m, ok := v.(map[any]any); ok {
		v = _convertMapAny(m)
	}
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	if err := json.Unmarshal(data, &out); err != nil {
		panic(err)
	}
	return out
}

func _contains(c any, v any) bool {
	switch s := c.(type) {
	case string:
		return strings.Contains(s, fmt.Sprint(v))
	case map[string]any:
		_, ok := s[fmt.Sprint(v)]
		return ok
	}
	rv := reflect.ValueOf(c)
	if rv.Kind() == reflect.Slice || rv.Kind() == reflect.Array {
		for i := 0; i < rv.Len(); i++ {
			if _equal(rv.Index(i).Interface(), v) {
				return true
			}
		}
		return false
	}
	return false
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _count(v any) int {
	if g, ok := v.(*data.Group); ok {
		return len(g.Items)
	}
	switch s := v.(type) {
	case []any:
		return len(s)
	case []int:
		return len(s)
	case []float64:
		return len(s)
	case []string:
		return len(s)
	case []bool:
		return len(s)
	case []map[string]any:
		return len(s)
	case map[string]any:
		return len(s)
	case string:
		return len([]rune(s))
	}
	rv := reflect.ValueOf(v)
	if rv.Kind() == reflect.Slice || rv.Kind() == reflect.Array {
		return rv.Len()
	}
	panic("count() expects list or group")
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _sum(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []float64:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []string, []bool:
			panic("sum() expects numbers")
		default:
			panic("sum() expects list or group")
		}
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("sum() expects numbers")
		}
	}
	return sum
}
