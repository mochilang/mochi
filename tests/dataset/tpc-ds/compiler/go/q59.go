//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:05:51Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"time"
)

type Join struct {
	S_store_id1 int     `json:"s_store_id1"`
	Ratio       float64 `json:"ratio"`
}

type Sales_year1 struct {
	Week   int     `json:"week"`
	Store  int     `json:"store"`
	Amount float64 `json:"amount"`
}

type Sales_year2 struct {
	Week   int     `json:"week"`
	Store  int     `json:"store"`
	Amount float64 `json:"amount"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q59_simplified() {
	expect(_equal(result, []v{v{
		S_store_id1: 1,
		Ratio:       1.5,
	}}))
}

var sales_year1 []Sales_year1
var sales_year2 []Sales_year2
var join []Join
var result []Join

func main() {
	sales_year1 = []Sales_year1{Sales_year1{
		Week:   1,
		Store:  1,
		Amount: 100.0,
	}}
	sales_year2 = []Sales_year2{Sales_year2{
		Week:   53,
		Store:  1,
		Amount: 150.0,
	}}
	join = func() []Join {
		results := []Join{}
		for _, y1 := range sales_year1 {
			for _, y2 := range sales_year2 {
				if !((y1.Store == y2.Store) && (y1.Week == (y2.Week - 52))) {
					continue
				}
				results = append(results, Join{
					S_store_id1: y1.Store,
					Ratio:       (y2.Amount / y1.Amount),
				})
			}
		}
		return results
	}()
	result = join
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q59_simplified()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}
