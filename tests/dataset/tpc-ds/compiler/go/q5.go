//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:00:45Z

package main

import (
	"encoding/json"
	"fmt"
	"time"
)

type Result struct {
	Channel string  `json:"channel"`
	ID      string  `json:"id"`
	Sales   float64 `json:"sales"`
	Returns float64 `json:"returns"`
	Profit  float64 `json:"profit"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q5_result() {
	expect((len(result) == 3))
}

var result []Result

func main() {
	result = []Result{Result{
		Channel: "catalog channel",
		ID:      "catalog_page100",
		Sales:   30.0,
		Returns: 3.0,
		Profit:  8.0,
	}, Result{
		Channel: "store channel",
		ID:      "store10",
		Sales:   20.0,
		Returns: 2.0,
		Profit:  4.0,
	}, Result{
		Channel: "web channel",
		ID:      "web_site200",
		Sales:   40.0,
		Returns: 4.0,
		Profit:  10.0,
	}}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q5_result()
}
