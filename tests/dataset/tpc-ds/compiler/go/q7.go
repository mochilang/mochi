//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:04:25Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Customer_demographic struct {
	Cd_demo_sk          int    `json:"cd_demo_sk"`
	Cd_gender           string `json:"cd_gender"`
	Cd_marital_status   string `json:"cd_marital_status"`
	Cd_education_status string `json:"cd_education_status"`
}

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
}

type GKey struct {
	I_item_id string `json:"i_item_id"`
}

type Item struct {
	I_item_sk int    `json:"i_item_sk"`
	I_item_id string `json:"i_item_id"`
}

type Promotion struct {
	P_promo_sk      int    `json:"p_promo_sk"`
	P_channel_email string `json:"p_channel_email"`
	P_channel_event string `json:"p_channel_event"`
}

type Result struct {
	I_item_id any     `json:"i_item_id"`
	Agg1      float64 `json:"agg1"`
	Agg2      float64 `json:"agg2"`
	Agg3      float64 `json:"agg3"`
	Agg4      float64 `json:"agg4"`
}

type Store_sale struct {
	Ss_cdemo_sk     int     `json:"ss_cdemo_sk"`
	Ss_sold_date_sk int     `json:"ss_sold_date_sk"`
	Ss_item_sk      int     `json:"ss_item_sk"`
	Ss_promo_sk     int     `json:"ss_promo_sk"`
	Ss_quantity     int     `json:"ss_quantity"`
	Ss_list_price   float64 `json:"ss_list_price"`
	Ss_coupon_amt   float64 `json:"ss_coupon_amt"`
	Ss_sales_price  float64 `json:"ss_sales_price"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q7_result() {
	expect(_equal(result, []v{v{
		I_item_id: "I1",
		Agg1:      5.0,
		Agg2:      10.0,
		Agg3:      2.0,
		Agg4:      8.0,
	}}))
}

var store_sales []Store_sale
var customer_demographics []Customer_demographic
var date_dim []Date_dim
var item []Item
var promotion []Promotion
var result []Result

func main() {
	store_sales = []Store_sale{Store_sale{
		Ss_cdemo_sk:     1,
		Ss_sold_date_sk: 1,
		Ss_item_sk:      1,
		Ss_promo_sk:     1,
		Ss_quantity:     5,
		Ss_list_price:   10.0,
		Ss_coupon_amt:   2.0,
		Ss_sales_price:  8.0,
	}}
	customer_demographics = []Customer_demographic{Customer_demographic{
		Cd_demo_sk:          1,
		Cd_gender:           "M",
		Cd_marital_status:   "S",
		Cd_education_status: "College",
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_year:    1998,
	}}
	item = []Item{Item{
		I_item_sk: 1,
		I_item_id: "I1",
	}}
	promotion = []Promotion{Promotion{
		P_promo_sk:      1,
		P_channel_email: "N",
		P_channel_event: "Y",
	}}
	result = func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, ss := range store_sales {
			for _, cd := range customer_demographics {
				if !(ss.Ss_cdemo_sk == cd.Cd_demo_sk) {
					continue
				}
				for _, d := range date_dim {
					if !(ss.Ss_sold_date_sk == d.D_date_sk) {
						continue
					}
					for _, i := range item {
						if !(ss.Ss_item_sk == i.I_item_sk) {
							continue
						}
						for _, p := range promotion {
							if !(ss.Ss_promo_sk == p.P_promo_sk) {
								continue
							}
							if ((((cd.Cd_gender == "M") && (cd.Cd_marital_status == "S")) && (cd.Cd_education_status == "College")) && ((p.P_channel_email == "N") || (p.P_channel_event == "N"))) && (d.D_year == 1998) {
								key := GKey{I_item_id: i.I_item_id}
								ks := fmt.Sprint(key)
								g, ok := groups[ks]
								if !ok {
									g = &data.Group{Key: key}
									groups[ks] = g
									order = append(order, ks)
								}
								g.Items = append(g.Items, ss)
							}
						}
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		type pair struct {
			item *data.Group
			key  any
		}
		pairs := make([]pair, len(items))
		for idx, it := range items {
			g := it
			pairs[idx] = pair{item: it, key: g.Key.(GKey).I_item_id}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for idx, p := range pairs {
			items[idx] = p.item
		}
		results := []Result{}
		for _, g := range items {
			results = append(results, Result{
				I_item_id: g.Key.(GKey).I_item_id,
				Agg1: _avg(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Store_sale)
						results = append(results, _getField(x.Ss, "ss_quantity"))
					}
					return results
				}()),
				Agg2: _avg(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Store_sale)
						results = append(results, _getField(x.Ss, "ss_list_price"))
					}
					return results
				}()),
				Agg3: _avg(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Store_sale)
						results = append(results, _getField(x.Ss, "ss_coupon_amt"))
					}
					return results
				}()),
				Agg4: _avg(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Store_sale)
						results = append(results, _getField(x.Ss, "ss_sales_price"))
					}
					return results
				}()),
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q7_result()
}

func _avg[T constraints.Integer | constraints.Float](v []T) float64 {
	if len(v) == 0 {
		return 0
	}
	return _sum(v) / float64(len(v))
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}
