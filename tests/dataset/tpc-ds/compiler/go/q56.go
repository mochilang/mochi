//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:00:57Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type C struct {
	Item  any     `json:"item"`
	Total float64 `json:"total"`
}

type Catalog_sale struct {
	Item  int     `json:"item"`
	Price float64 `json:"price"`
}

type Result struct {
	I_item_id   any     `json:"i_item_id"`
	Total_sales float64 `json:"total_sales"`
}

type S struct {
	Item  any     `json:"item"`
	Total float64 `json:"total"`
}

type Store_sale struct {
	Item  int     `json:"item"`
	Price float64 `json:"price"`
}

type W struct {
	Item  any     `json:"item"`
	Total float64 `json:"total"`
}

type Web_sale struct {
	Item  int     `json:"item"`
	Price float64 `json:"price"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q56_simplified() {
	expect(_equal(result, []v{v{
		I_item_id:   1,
		Total_sales: 60.0,
	}}))
}

var store_sales []Store_sale
var catalog_sales []Catalog_sale
var web_sales []Web_sale
var ss []S
var cs []C
var ws []W
var union []any
var result []Result

func main() {
	store_sales = []Store_sale{Store_sale{
		Item:  1,
		Price: 10.0,
	}}
	catalog_sales = []Catalog_sale{Catalog_sale{
		Item:  1,
		Price: 20.0,
	}}
	web_sales = []Web_sale{Web_sale{
		Item:  1,
		Price: 30.0,
	}}
	ss = _convSlice[v, S](func() []S {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, s := range store_sales {
			key := s.Item
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, s)
		}
		results := []S{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, S{
				Item: g.Key.(any),
				Total: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, x.Price)
					}
					return results
				}()),
			})
		}
		return results
	}())
	cs = _convSlice[v, C](func() []C {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, s := range catalog_sales {
			key := s.Item
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, s)
		}
		results := []C{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, C{
				Item: g.Key.(any),
				Total: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, x.Price)
					}
					return results
				}()),
			})
		}
		return results
	}())
	ws = _convSlice[v, W](func() []W {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, s := range web_sales {
			key := s.Item
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, s)
		}
		results := []W{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, W{
				Item: g.Key.(any),
				Total: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, x.Price)
					}
					return results
				}()),
			})
		}
		return results
	}())
	union = _concat[any](_concat[any](_toAnySlice(ss), _toAnySlice(cs)), _toAnySlice(ws))
	result = func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, u := range union {
			key := _getField(u, "item")
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, u)
		}
		results := []Result{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, Result{
				I_item_id: g.Key.(any),
				Total_sales: _sum(func() []any {
					results := []any{}
					for _, x := range g.Items {
						results = append(results, _getField(x, "total"))
					}
					return results
				}()),
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q56_simplified()
}

func _concat[T any](a, b []T) []T {
	res := make([]T, 0, len(a)+len(b))
	res = append(res, a...)
	res = append(res, b...)
	return res
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}

func _sum[T constraints.Integer | constraints.Float](v []T) float64 {
	var sum float64
	for _, n := range v {
		sum += float64(n)
	}
	return sum
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
