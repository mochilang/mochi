package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"time"
)

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q74_simplified() {
	expect(_equal(result, []map[string]any{map[string]any{
		"customer_id":         1,
		"customer_first_name": "Alice",
		"customer_last_name":  "Smith",
	}}))
}

type CustomerItem struct {
	C_customer_sk int    `json:"c_customer_sk"`
	C_customer_id int    `json:"c_customer_id"`
	C_first_name  string `json:"c_first_name"`
	C_last_name   string `json:"c_last_name"`
}

var customer []CustomerItem

type Date_dimItem struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
}

var date_dim []Date_dimItem

type Store_salesItem struct {
	Ss_customer_sk  int     `json:"ss_customer_sk"`
	Ss_sold_date_sk int     `json:"ss_sold_date_sk"`
	Ss_net_paid     float64 `json:"ss_net_paid"`
}

var store_sales []Store_salesItem

type Web_salesItem struct {
	Ws_bill_customer_sk int     `json:"ws_bill_customer_sk"`
	Ws_sold_date_sk     int     `json:"ws_sold_date_sk"`
	Ws_net_paid         float64 `json:"ws_net_paid"`
}

var web_sales []Web_salesItem
var year_total []any
var s_firstyear any
var s_secyear any
var w_firstyear any
var w_secyear any
var result any

func main() {
	failures := 0
	customer = _cast[[]CustomerItem]([]CustomerItem{CustomerItem{
		C_customer_sk: 1,
		C_customer_id: 1,
		C_first_name:  "Alice",
		C_last_name:   "Smith",
	}})
	date_dim = _cast[[]Date_dimItem]([]Date_dimItem{Date_dimItem{
		D_date_sk: 1,
		D_year:    1998,
	}, Date_dimItem{
		D_date_sk: 2,
		D_year:    1999,
	}})
	store_sales = _cast[[]Store_salesItem]([]Store_salesItem{Store_salesItem{
		Ss_customer_sk:  1,
		Ss_sold_date_sk: 1,
		Ss_net_paid:     100.0,
	}, Store_salesItem{
		Ss_customer_sk:  1,
		Ss_sold_date_sk: 2,
		Ss_net_paid:     110.0,
	}})
	web_sales = _cast[[]Web_salesItem]([]Web_salesItem{Web_salesItem{
		Ws_bill_customer_sk: 1,
		Ws_sold_date_sk:     1,
		Ws_net_paid:         40.0,
	}, Web_salesItem{
		Ws_bill_customer_sk: 1,
		Ws_sold_date_sk:     2,
		Ws_net_paid:         80.0,
	}})
	year_total = _concat[any](_toAnySlice(_convSlice[map[string]any, any](func() []map[string]any {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, c := range customer {
			for _, ss := range store_sales {
				if !(c.C_customer_sk == ss.Ss_customer_sk) {
					continue
				}
				for _, d := range date_dim {
					if !(d.D_date_sk == ss.Ss_sold_date_sk) {
						continue
					}
					if (d.D_year == 1998) || (d.D_year == 1999) {
						key := map[string]any{
							"id":    c.C_customer_id,
							"first": c.C_first_name,
							"last":  c.C_last_name,
							"year":  d.D_year,
						}
						ks := fmt.Sprint(key)
						g, ok := groups[ks]
						if !ok {
							g = &data.Group{Key: key}
							groups[ks] = g
							order = append(order, ks)
						}
						g.Items = append(g.Items, c)
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		_res := []map[string]any{}
		for _, g := range items {
			_res = append(_res, map[string]any{
				"customer_id":         _cast[map[string]any](g.Key)["id"],
				"customer_first_name": _cast[map[string]any](g.Key)["first"],
				"customer_last_name":  _cast[map[string]any](g.Key)["last"],
				"year":                _cast[map[string]any](g.Key)["year"],
				"year_total": _sum(func() []any {
					_res := []any{}
					for _, x := range g.Items {
						_res = append(_res, _cast[map[string]any](_cast[map[string]any](x)["ss"])["ss_net_paid"])
					}
					return _res
				}()),
				"sale_type": "s",
			})
		}
		return _res
	}())), _toAnySlice(func() []map[string]any {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, c := range customer {
			for _, ws := range web_sales {
				if !(c.C_customer_sk == ws.Ws_bill_customer_sk) {
					continue
				}
				for _, d := range date_dim {
					if !(d.D_date_sk == ws.Ws_sold_date_sk) {
						continue
					}
					if (d.D_year == 1998) || (d.D_year == 1999) {
						key := map[string]any{
							"id":    c.C_customer_id,
							"first": c.C_first_name,
							"last":  c.C_last_name,
							"year":  d.D_year,
						}
						ks := fmt.Sprint(key)
						g, ok := groups[ks]
						if !ok {
							g = &data.Group{Key: key}
							groups[ks] = g
							order = append(order, ks)
						}
						g.Items = append(g.Items, c)
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		_res := []map[string]any{}
		for _, g := range items {
			_res = append(_res, map[string]any{
				"customer_id":         _cast[map[string]any](g.Key)["id"],
				"customer_first_name": _cast[map[string]any](g.Key)["first"],
				"customer_last_name":  _cast[map[string]any](g.Key)["last"],
				"year":                _cast[map[string]any](g.Key)["year"],
				"year_total": _sum(func() []any {
					_res := []any{}
					for _, x := range g.Items {
						_res = append(_res, _cast[map[string]any](_cast[map[string]any](x)["ws"])["ws_net_paid"])
					}
					return _res
				}()),
				"sale_type": "w",
			})
		}
		return _res
	}()))
	s_firstyear = _first(func() []any {
		_res := []any{}
		for _, y := range year_total {
			if _equal(_cast[map[string]any](y)["sale_type"], "s") && _equal(_cast[map[string]any](y)["year"], 1998) {
				if _equal(_cast[map[string]any](y)["sale_type"], "s") && _equal(_cast[map[string]any](y)["year"], 1998) {
					_res = append(_res, y)
				}
			}
		}
		return _res
	}())
	s_secyear = _first(func() []any {
		_res := []any{}
		for _, y := range year_total {
			if _equal(_cast[map[string]any](y)["sale_type"], "s") && _equal(_cast[map[string]any](y)["year"], 1999) {
				if _equal(_cast[map[string]any](y)["sale_type"], "s") && _equal(_cast[map[string]any](y)["year"], 1999) {
					_res = append(_res, y)
				}
			}
		}
		return _res
	}())
	w_firstyear = _first(func() []any {
		_res := []any{}
		for _, y := range year_total {
			if _equal(_cast[map[string]any](y)["sale_type"], "w") && _equal(_cast[map[string]any](y)["year"], 1998) {
				if _equal(_cast[map[string]any](y)["sale_type"], "w") && _equal(_cast[map[string]any](y)["year"], 1998) {
					_res = append(_res, y)
				}
			}
		}
		return _res
	}())
	w_secyear = _first(func() []any {
		_res := []any{}
		for _, y := range year_total {
			if _equal(_cast[map[string]any](y)["sale_type"], "w") && _equal(_cast[map[string]any](y)["year"], 1999) {
				if _equal(_cast[map[string]any](y)["sale_type"], "w") && _equal(_cast[map[string]any](y)["year"], 1999) {
					_res = append(_res, y)
				}
			}
		}
		return _res
	}())
	result = func() any {
		if ((_cast[int](_cast[map[string]any](s_firstyear)["year_total"]) > 0) && (_cast[int](_cast[map[string]any](w_firstyear)["year_total"]) > 0)) && (_cast[float64]((_cast[float64](_cast[map[string]any](w_secyear)["year_total"]) / _cast[float64](_cast[map[string]any](w_firstyear)["year_total"]))) > _cast[float64]((_cast[float64](_cast[map[string]any](s_secyear)["year_total"]) / _cast[float64](_cast[map[string]any](s_firstyear)["year_total"])))) {
			return []map[string]any{map[string]any{
				"customer_id":         _cast[map[string]any](s_secyear)["customer_id"],
				"customer_first_name": _cast[map[string]any](s_secyear)["customer_first_name"],
				"customer_last_name":  _cast[map[string]any](s_secyear)["customer_last_name"],
			}}
		} else {
			return []any{}
		}
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	{
		printTestStart("TPCDS Q74 simplified")
		start := time.Now()
		var failed error
		func() {
			defer func() {
				if r := recover(); r != nil {
					failed = fmt.Errorf("%v", r)
				}
			}()
			test_TPCDS_Q74_simplified()
		}()
		if failed != nil {
			failures++
			printTestFail(failed, time.Since(start))
		} else {
			printTestPass(time.Since(start))
		}
	}
	if failures > 0 {
		fmt.Printf("\n[FAIL] %d test(s) failed.\n", failures)
	}
}

func _cast[T any](v any) T {
	if tv, ok := v.(T); ok {
		return tv
	}
	var out T
	switch any(out).(type) {
	case int:
		switch vv := v.(type) {
		case int:
			return any(vv).(T)
		case float64:
			return any(int(vv)).(T)
		case float32:
			return any(int(vv)).(T)
		}
	case float64:
		switch vv := v.(type) {
		case int:
			return any(float64(vv)).(T)
		case float64:
			return any(vv).(T)
		case float32:
			return any(float64(vv)).(T)
		}
	case float32:
		switch vv := v.(type) {
		case int:
			return any(float32(vv)).(T)
		case float64:
			return any(float32(vv)).(T)
		case float32:
			return any(vv).(T)
		}
	}
	if m, ok := v.(map[any]any); ok {
		v = _convertMapAny(m)
	}
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	if err := json.Unmarshal(data, &out); err != nil {
		panic(err)
	}
	return out
}

func _concat[T any](a, b []T) []T {
	res := make([]T, 0, len(a)+len(b))
	res = append(res, a...)
	res = append(res, b...)
	return res
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _first(v any) any {
	if g, ok := v.(*data.Group); ok {
		if len(g.Items) == 0 {
			return nil
		}
		return g.Items[0]
	}
	switch s := v.(type) {
	case []any:
		if len(s) == 0 {
			return nil
		}
		return s[0]
	case []int:
		if len(s) == 0 {
			return 0
		}
		return s[0]
	case []float64:
		if len(s) == 0 {
			return 0.0
		}
		return s[0]
	case []string:
		if len(s) == 0 {
			return ""
		}
		return s[0]
	case []bool:
		if len(s) == 0 {
			return false
		}
		return s[0]
	default:
		rv := reflect.ValueOf(v)
		if rv.Kind() == reflect.Slice && rv.Len() > 0 {
			return rv.Index(0).Interface()
		}
		if rv.Kind() == reflect.Array && rv.Len() > 0 {
			return rv.Index(0).Interface()
		}
	}
	return nil
}

func _sum(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []float64:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []string, []bool:
			panic("sum() expects numbers")
		default:
			panic("sum() expects list or group")
		}
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("sum() expects numbers")
		}
	}
	return sum
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
