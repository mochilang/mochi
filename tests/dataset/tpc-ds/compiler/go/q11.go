//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:04:30Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"time"

	"golang.org/x/exp/constraints"
)

type Customer struct {
	C_customer_sk int    `json:"c_customer_sk"`
	C_customer_id string `json:"c_customer_id"`
	C_first_name  string `json:"c_first_name"`
	C_last_name   string `json:"c_last_name"`
}

type StoreSale struct {
	Ss_customer_sk    int     `json:"ss_customer_sk"`
	Ss_sold_date_sk   int     `json:"ss_sold_date_sk"`
	Ss_ext_list_price float64 `json:"ss_ext_list_price"`
}

type Store_sale struct {
	Ss_customer_sk    int     `json:"ss_customer_sk"`
	Ss_sold_date_sk   int     `json:"ss_sold_date_sk"`
	Ss_ext_list_price float64 `json:"ss_ext_list_price"`
}

type WebSale struct {
	Ws_bill_customer_sk int     `json:"ws_bill_customer_sk"`
	Ws_sold_date_sk     int     `json:"ws_sold_date_sk"`
	Ws_ext_list_price   float64 `json:"ws_ext_list_price"`
}

type Web_sale struct {
	Ws_bill_customer_sk int     `json:"ws_bill_customer_sk"`
	Ws_sold_date_sk     int     `json:"ws_sold_date_sk"`
	Ws_ext_list_price   float64 `json:"ws_ext_list_price"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q11_growth() {
	expect(_equal(result, []v{v{
		Customer_id:         "C1",
		Customer_first_name: "John",
		Customer_last_name:  "Doe",
	}}))
}

var customer []Customer
var store_sales []Store_sale
var web_sales []Web_sale
var ss98 float64
var ss99 float64
var ws98 float64
var ws99 float64
var growth_ok bool
var result any

func main() {
	customer = []Customer{Customer{
		C_customer_sk: 1,
		C_customer_id: "C1",
		C_first_name:  "John",
		C_last_name:   "Doe",
	}}
	store_sales = []Store_sale{Store_sale{
		Ss_customer_sk:    1,
		Ss_sold_date_sk:   1998,
		Ss_ext_list_price: 60.0,
	}, Store_sale{
		Ss_customer_sk:    1,
		Ss_sold_date_sk:   1999,
		Ss_ext_list_price: 90.0,
	}}
	web_sales = []Web_sale{Web_sale{
		Ws_bill_customer_sk: 1,
		Ws_sold_date_sk:     1998,
		Ws_ext_list_price:   50.0,
	}, Web_sale{
		Ws_bill_customer_sk: 1,
		Ws_sold_date_sk:     1999,
		Ws_ext_list_price:   150.0,
	}}
	ss98 = _sumOrdered[float64](func() []float64 {
		results := []float64{}
		for _, ss := range store_sales {
			if ss.Ss_sold_date_sk == 1998 {
				if ss.Ss_sold_date_sk == 1998 {
					results = append(results, ss.Ss_ext_list_price)
				}
			}
		}
		return results
	}())
	ss99 = _sumOrdered[float64](func() []float64 {
		results := []float64{}
		for _, ss := range store_sales {
			if ss.Ss_sold_date_sk == 1999 {
				if ss.Ss_sold_date_sk == 1999 {
					results = append(results, ss.Ss_ext_list_price)
				}
			}
		}
		return results
	}())
	ws98 = _sumOrdered[float64](func() []float64 {
		results := []float64{}
		for _, ws := range web_sales {
			if ws.Ws_sold_date_sk == 1998 {
				if ws.Ws_sold_date_sk == 1998 {
					results = append(results, ws.Ws_ext_list_price)
				}
			}
		}
		return results
	}())
	ws99 = _sumOrdered[float64](func() []float64 {
		results := []float64{}
		for _, ws := range web_sales {
			if ws.Ws_sold_date_sk == 1999 {
				if ws.Ws_sold_date_sk == 1999 {
					results = append(results, ws.Ws_ext_list_price)
				}
			}
		}
		return results
	}())
	growth_ok = (((ws98 > float64(0)) && (ss98 > float64(0))) && ((ws99 / ws98) > (ss99 / ss98)))
	result = func() any {
		if growth_ok {
			return []v{v{
				Customer_id:         "C1",
				Customer_first_name: "John",
				Customer_last_name:  "Doe",
			}}
		} else {
			return []any{}
		}
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q11_growth()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
