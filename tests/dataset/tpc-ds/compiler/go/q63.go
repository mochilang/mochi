//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:00:58Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"time"

	"golang.org/x/exp/constraints"
)

type By_mgr struct {
	Mgr       any     `json:"mgr"`
	Sum_sales float64 `json:"sum_sales"`
}

type GKey struct {
	Mgr int `json:"mgr"`
}

type Sale struct {
	Mgr    int `json:"mgr"`
	Amount int `json:"amount"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q63_simplified() {
	expect((result == 63))
}

var sales []Sale
var by_mgr []By_mgr
var result float64

func main() {
	sales = []Sale{Sale{
		Mgr:    1,
		Amount: 30,
	}, Sale{
		Mgr:    2,
		Amount: 33,
	}}
	by_mgr = func() []By_mgr {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, s := range sales {
			key := GKey{Mgr: s.Mgr}
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, s)
		}
		results := []By_mgr{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, By_mgr{
				Mgr: g.Key.(GKey).Mgr,
				Sum_sales: _sumOrdered[int](func() []int {
					results := []int{}
					for _, x := range g.Items {
						results = append(results, x.Amount)
					}
					return results
				}()),
			})
		}
		return results
	}()
	result = _sumOrdered[float64](func() []float64 {
		results := []float64{}
		for _, x := range by_mgr {
			results = append(results, x.Sum_sales)
		}
		return results
	}())
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q63_simplified()
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
