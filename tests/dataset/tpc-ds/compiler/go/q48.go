//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:00:56Z

package main

import (
	"encoding/json"
	"fmt"
	"slices"
	"time"

	"golang.org/x/exp/constraints"
)

type Customer_addres struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_country    string `json:"ca_country"`
	Ca_state      string `json:"ca_state"`
}

type Customer_demographic struct {
	Cd_demo_sk          int    `json:"cd_demo_sk"`
	Cd_marital_status   string `json:"cd_marital_status"`
	Cd_education_status string `json:"cd_education_status"`
}

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
}

type Store struct {
	S_store_sk int `json:"s_store_sk"`
}

type Store_sale struct {
	Cdemo_sk     int     `json:"cdemo_sk"`
	Addr_sk      int     `json:"addr_sk"`
	Sold_date_sk int     `json:"sold_date_sk"`
	Sales_price  float64 `json:"sales_price"`
	Net_profit   float64 `json:"net_profit"`
	Quantity     int     `json:"quantity"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q48_simplified() {
	expect((result == 35))
}

var store_sales []Store_sale
var store []Store
var customer_demographics []Customer_demographic
var customer_address []Customer_addres
var date_dim []Date_dim
var year int
var states1 []string
var states2 []string
var states3 []string
var qty_base []int
var qty []int
var result float64

func main() {
	store_sales = []Store_sale{Store_sale{
		Cdemo_sk:     1,
		Addr_sk:      1,
		Sold_date_sk: 1,
		Sales_price:  120.0,
		Net_profit:   1000.0,
		Quantity:     5,
	}, Store_sale{
		Cdemo_sk:     2,
		Addr_sk:      2,
		Sold_date_sk: 1,
		Sales_price:  60.0,
		Net_profit:   2000.0,
		Quantity:     10,
	}, Store_sale{
		Cdemo_sk:     3,
		Addr_sk:      3,
		Sold_date_sk: 1,
		Sales_price:  170.0,
		Net_profit:   10000.0,
		Quantity:     20,
	}}
	store = []Store{Store{S_store_sk: 1}}
	customer_demographics = []Customer_demographic{Customer_demographic{
		Cd_demo_sk:          1,
		Cd_marital_status:   "S",
		Cd_education_status: "E1",
	}, Customer_demographic{
		Cd_demo_sk:          2,
		Cd_marital_status:   "M",
		Cd_education_status: "E2",
	}, Customer_demographic{
		Cd_demo_sk:          3,
		Cd_marital_status:   "W",
		Cd_education_status: "E3",
	}}
	customer_address = []Customer_addres{Customer_addres{
		Ca_address_sk: 1,
		Ca_country:    "United States",
		Ca_state:      "TX",
	}, Customer_addres{
		Ca_address_sk: 2,
		Ca_country:    "United States",
		Ca_state:      "CA",
	}, Customer_addres{
		Ca_address_sk: 3,
		Ca_country:    "United States",
		Ca_state:      "NY",
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_year:    2000,
	}}
	year = 2000
	states1 = []string{"TX"}
	states2 = []string{"CA"}
	states3 = []string{"NY"}
	qty_base = func() []int {
		results := []int{}
		for _, ss := range store_sales {
			for _, cd := range customer_demographics {
				if !(ss.Cdemo_sk == cd.Cd_demo_sk) {
					continue
				}
				for _, ca := range customer_address {
					if !(ss.Addr_sk == ca.Ca_address_sk) {
						continue
					}
					for _, d := range date_dim {
						if !(ss.Sold_date_sk == d.D_date_sk) {
							continue
						}
						if ((d.D_year == year) && ((((((cd.Cd_marital_status == "S") && (cd.Cd_education_status == "E1")) && (ss.Sales_price >= 100.0)) && (ss.Sales_price <= 150.0)) || ((((cd.Cd_marital_status == "M") && (cd.Cd_education_status == "E2")) && (ss.Sales_price >= 50.0)) && (ss.Sales_price <= 100.0))) || ((((cd.Cd_marital_status == "W") && (cd.Cd_education_status == "E3")) && (ss.Sales_price >= 150.0)) && (ss.Sales_price <= 200.0)))) && ((((slices.Contains(states1, ca.Ca_state) && (ss.Net_profit >= float64(0))) && (ss.Net_profit <= float64(2000))) || ((slices.Contains(states2, ca.Ca_state) && (ss.Net_profit >= float64(150))) && (ss.Net_profit <= float64(3000)))) || ((slices.Contains(states3, ca.Ca_state) && (ss.Net_profit >= float64(50))) && (ss.Net_profit <= float64(25000)))) {
							if ((d.D_year == year) && ((((((cd.Cd_marital_status == "S") && (cd.Cd_education_status == "E1")) && (ss.Sales_price >= 100.0)) && (ss.Sales_price <= 150.0)) || ((((cd.Cd_marital_status == "M") && (cd.Cd_education_status == "E2")) && (ss.Sales_price >= 50.0)) && (ss.Sales_price <= 100.0))) || ((((cd.Cd_marital_status == "W") && (cd.Cd_education_status == "E3")) && (ss.Sales_price >= 150.0)) && (ss.Sales_price <= 200.0)))) && ((((slices.Contains(states1, ca.Ca_state) && (ss.Net_profit >= float64(0))) && (ss.Net_profit <= float64(2000))) || ((slices.Contains(states2, ca.Ca_state) && (ss.Net_profit >= float64(150))) && (ss.Net_profit <= float64(3000)))) || ((slices.Contains(states3, ca.Ca_state) && (ss.Net_profit >= float64(50))) && (ss.Net_profit <= float64(25000)))) {
								results = append(results, ss.Quantity)
							}
						}
					}
				}
			}
		}
		return results
	}()
	qty = qty_base
	result = _sumOrdered[int](qty)
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q48_simplified()
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
