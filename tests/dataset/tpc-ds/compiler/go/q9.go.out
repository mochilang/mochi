package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"time"
)

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q9_empty() {
	expect((len(result) == 0))
}

var store_sales []any
var reason []any
var bucket1 float64
var bucket2 float64
var bucket3 float64
var bucket4 float64
var bucket5 float64
var result []map[string]float64

func main() {
	failures := 0
	store_sales = []any{}
	reason = []any{}
	bucket1 = func() float64 {
		if _count(func() []any {
			_res := []any{}
			for _, s := range store_sales {
				if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 1) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 20) {
					if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 1) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 20) {
						_res = append(_res, s)
					}
				}
			}
			return _res
		}()) > 10 {
			return _avg(func() []any {
				_res := []any{}
				for _, s := range store_sales {
					if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 1) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 20) {
						if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 1) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 20) {
							_res = append(_res, _cast[map[string]any](s)["ss_ext_discount_amt"])
						}
					}
				}
				return _res
			}())
		} else {
			return _avg(func() []any {
				_res := []any{}
				for _, s := range store_sales {
					if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 1) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 20) {
						if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 1) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 20) {
							_res = append(_res, _cast[map[string]any](s)["ss_net_paid"])
						}
					}
				}
				return _res
			}())
		}
	}()
	bucket2 = func() float64 {
		if _count(func() []any {
			_res := []any{}
			for _, s := range store_sales {
				if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 21) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 40) {
					if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 21) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 40) {
						_res = append(_res, s)
					}
				}
			}
			return _res
		}()) > 20 {
			return _avg(func() []any {
				_res := []any{}
				for _, s := range store_sales {
					if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 21) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 40) {
						if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 21) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 40) {
							_res = append(_res, _cast[map[string]any](s)["ss_ext_discount_amt"])
						}
					}
				}
				return _res
			}())
		} else {
			return _avg(func() []any {
				_res := []any{}
				for _, s := range store_sales {
					if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 21) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 40) {
						if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 21) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 40) {
							_res = append(_res, _cast[map[string]any](s)["ss_net_paid"])
						}
					}
				}
				return _res
			}())
		}
	}()
	bucket3 = func() float64 {
		if _count(func() []any {
			_res := []any{}
			for _, s := range store_sales {
				if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 41) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 60) {
					if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 41) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 60) {
						_res = append(_res, s)
					}
				}
			}
			return _res
		}()) > 30 {
			return _avg(func() []any {
				_res := []any{}
				for _, s := range store_sales {
					if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 41) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 60) {
						if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 41) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 60) {
							_res = append(_res, _cast[map[string]any](s)["ss_ext_discount_amt"])
						}
					}
				}
				return _res
			}())
		} else {
			return _avg(func() []any {
				_res := []any{}
				for _, s := range store_sales {
					if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 41) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 60) {
						if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 41) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 60) {
							_res = append(_res, _cast[map[string]any](s)["ss_net_paid"])
						}
					}
				}
				return _res
			}())
		}
	}()
	bucket4 = func() float64 {
		if _count(func() []any {
			_res := []any{}
			for _, s := range store_sales {
				if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 61) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 80) {
					if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 61) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 80) {
						_res = append(_res, s)
					}
				}
			}
			return _res
		}()) > 40 {
			return _avg(func() []any {
				_res := []any{}
				for _, s := range store_sales {
					if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 61) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 80) {
						if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 61) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 80) {
							_res = append(_res, _cast[map[string]any](s)["ss_ext_discount_amt"])
						}
					}
				}
				return _res
			}())
		} else {
			return _avg(func() []any {
				_res := []any{}
				for _, s := range store_sales {
					if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 61) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 80) {
						if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 61) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 80) {
							_res = append(_res, _cast[map[string]any](s)["ss_net_paid"])
						}
					}
				}
				return _res
			}())
		}
	}()
	bucket5 = func() float64 {
		if _count(func() []any {
			_res := []any{}
			for _, s := range store_sales {
				if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 81) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 100) {
					if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 81) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 100) {
						_res = append(_res, s)
					}
				}
			}
			return _res
		}()) > 50 {
			return _avg(func() []any {
				_res := []any{}
				for _, s := range store_sales {
					if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 81) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 100) {
						if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 81) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 100) {
							_res = append(_res, _cast[map[string]any](s)["ss_ext_discount_amt"])
						}
					}
				}
				return _res
			}())
		} else {
			return _avg(func() []any {
				_res := []any{}
				for _, s := range store_sales {
					if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 81) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 100) {
						if (_cast[int](_cast[map[string]any](s)["ss_quantity"]) >= 81) && (_cast[int](_cast[map[string]any](s)["ss_quantity"]) <= 100) {
							_res = append(_res, _cast[map[string]any](s)["ss_net_paid"])
						}
					}
				}
				return _res
			}())
		}
	}()
	result = func() []map[string]float64 {
		_res := []map[string]float64{}
		for _, r := range reason {
			if _equal(_cast[map[string]any](r)["r_reason_sk"], 1) {
				if _equal(_cast[map[string]any](r)["r_reason_sk"], 1) {
					_res = append(_res, map[string]float64{
						"bucket1": bucket1,
						"bucket2": bucket2,
						"bucket3": bucket3,
						"bucket4": bucket4,
						"bucket5": bucket5,
					})
				}
			}
		}
		return _res
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	{
		printTestStart("TPCDS Q9 empty")
		start := time.Now()
		var failed error
		func() {
			defer func() {
				if r := recover(); r != nil {
					failed = fmt.Errorf("%v", r)
				}
			}()
			test_TPCDS_Q9_empty()
		}()
		if failed != nil {
			failures++
			printTestFail(failed, time.Since(start))
		} else {
			printTestPass(time.Since(start))
		}
	}
	if failures > 0 {
		fmt.Printf("\n[FAIL] %d test(s) failed.\n", failures)
	}
}

func _avg(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []float64:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []string:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []bool:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		default:
			panic("avg() expects list or group")
		}
	}
	if len(items) == 0 {
		return 0
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("avg() expects numbers")
		}
	}
	return sum / float64(len(items))
}

func _cast[T any](v any) T {
	if tv, ok := v.(T); ok {
		return tv
	}
	var out T
	switch any(out).(type) {
	case int:
		switch vv := v.(type) {
		case int:
			return any(vv).(T)
		case float64:
			return any(int(vv)).(T)
		case float32:
			return any(int(vv)).(T)
		}
	case float64:
		switch vv := v.(type) {
		case int:
			return any(float64(vv)).(T)
		case float64:
			return any(vv).(T)
		case float32:
			return any(float64(vv)).(T)
		}
	case float32:
		switch vv := v.(type) {
		case int:
			return any(float32(vv)).(T)
		case float64:
			return any(float32(vv)).(T)
		case float32:
			return any(vv).(T)
		}
	}
	if m, ok := v.(map[any]any); ok {
		v = _convertMapAny(m)
	}
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	if err := json.Unmarshal(data, &out); err != nil {
		panic(err)
	}
	return out
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _count(v any) int {
	if g, ok := v.(*data.Group); ok {
		return len(g.Items)
	}
	switch s := v.(type) {
	case []any:
		return len(s)
	case []int:
		return len(s)
	case []float64:
		return len(s)
	case []string:
		return len(s)
	case []bool:
		return len(s)
	case []map[string]any:
		return len(s)
	case map[string]any:
		return len(s)
	case string:
		return len([]rune(s))
	}
	rv := reflect.ValueOf(v)
	if rv.Kind() == reflect.Slice || rv.Kind() == reflect.Array {
		return rv.Len()
	}
	panic("count() expects list or group")
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}
