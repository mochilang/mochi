//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:04:42Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"slices"
	"time"

	"golang.org/x/exp/constraints"
)

type CatalogSale struct {
	Cs_sold_date_sk     int `json:"cs_sold_date_sk"`
	Cs_item_sk          int `json:"cs_item_sk"`
	Cs_bill_customer_sk int `json:"cs_bill_customer_sk"`
	Cs_quantity         int `json:"cs_quantity"`
}

type Catalog_sale struct {
	Cs_sold_date_sk     int `json:"cs_sold_date_sk"`
	Cs_item_sk          int `json:"cs_item_sk"`
	Cs_bill_customer_sk int `json:"cs_bill_customer_sk"`
	Cs_quantity         int `json:"cs_quantity"`
}

type DateDim struct {
	D_date_sk      int    `json:"d_date_sk"`
	D_quarter_name string `json:"d_quarter_name"`
}

type Date_dim struct {
	D_date_sk      int    `json:"d_date_sk"`
	D_quarter_name string `json:"d_quarter_name"`
}

type GKey struct {
	I_item_id   string `json:"i_item_id"`
	I_item_desc string `json:"i_item_desc"`
	S_state     string `json:"s_state"`
}

type Item struct {
	I_item_sk   int    `json:"i_item_sk"`
	I_item_id   string `json:"i_item_id"`
	I_item_desc string `json:"i_item_desc"`
}

type Joined struct {
	Qty         int    `json:"qty"`
	Ret         int    `json:"ret"`
	Csq         int    `json:"csq"`
	I_item_id   string `json:"i_item_id"`
	I_item_desc string `json:"i_item_desc"`
	S_state     string `json:"s_state"`
}

type Result struct {
	I_item_id                   any     `json:"i_item_id"`
	I_item_desc                 any     `json:"i_item_desc"`
	S_state                     any     `json:"s_state"`
	Store_sales_quantitycount   int     `json:"store_sales_quantitycount"`
	Store_sales_quantityave     float64 `json:"store_sales_quantityave"`
	Store_sales_quantitystdev   float64 `json:"store_sales_quantitystdev"`
	Store_sales_quantitycov     float64 `json:"store_sales_quantitycov"`
	Store_returns_quantitycount int     `json:"store_returns_quantitycount"`
	Store_returns_quantityave   float64 `json:"store_returns_quantityave"`
	Store_returns_quantitystdev float64 `json:"store_returns_quantitystdev"`
	Store_returns_quantitycov   float64 `json:"store_returns_quantitycov"`
	Catalog_sales_quantitycount int     `json:"catalog_sales_quantitycount"`
	Catalog_sales_quantityave   float64 `json:"catalog_sales_quantityave"`
	Catalog_sales_quantitystdev float64 `json:"catalog_sales_quantitystdev"`
	Catalog_sales_quantitycov   float64 `json:"catalog_sales_quantitycov"`
}

type Store struct {
	S_store_sk int    `json:"s_store_sk"`
	S_state    string `json:"s_state"`
}

type StoreReturn struct {
	Sr_returned_date_sk int `json:"sr_returned_date_sk"`
	Sr_customer_sk      int `json:"sr_customer_sk"`
	Sr_item_sk          int `json:"sr_item_sk"`
	Sr_ticket_number    int `json:"sr_ticket_number"`
	Sr_return_quantity  int `json:"sr_return_quantity"`
}

type StoreSale struct {
	Ss_sold_date_sk  int `json:"ss_sold_date_sk"`
	Ss_item_sk       int `json:"ss_item_sk"`
	Ss_customer_sk   int `json:"ss_customer_sk"`
	Ss_ticket_number int `json:"ss_ticket_number"`
	Ss_quantity      int `json:"ss_quantity"`
	Ss_store_sk      int `json:"ss_store_sk"`
}

type Store_return struct {
	Sr_returned_date_sk int `json:"sr_returned_date_sk"`
	Sr_customer_sk      int `json:"sr_customer_sk"`
	Sr_item_sk          int `json:"sr_item_sk"`
	Sr_ticket_number    int `json:"sr_ticket_number"`
	Sr_return_quantity  int `json:"sr_return_quantity"`
}

type Store_sale struct {
	Ss_sold_date_sk  int `json:"ss_sold_date_sk"`
	Ss_item_sk       int `json:"ss_item_sk"`
	Ss_customer_sk   int `json:"ss_customer_sk"`
	Ss_ticket_number int `json:"ss_ticket_number"`
	Ss_quantity      int `json:"ss_quantity"`
	Ss_store_sk      int `json:"ss_store_sk"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q17_stats() {
	expect(_equal(result, []v{v{
		I_item_id:                   "I1",
		I_item_desc:                 "Item 1",
		S_state:                     "CA",
		Store_sales_quantitycount:   1,
		Store_sales_quantityave:     10.0,
		Store_sales_quantitystdev:   0.0,
		Store_sales_quantitycov:     0.0,
		Store_returns_quantitycount: 1,
		Store_returns_quantityave:   2.0,
		Store_returns_quantitystdev: 0.0,
		Store_returns_quantitycov:   0.0,
		Catalog_sales_quantitycount: 1,
		Catalog_sales_quantityave:   5.0,
		Catalog_sales_quantitystdev: 0.0,
		Catalog_sales_quantitycov:   0.0,
	}}))
}

var store_sales []Store_sale
var store_returns []Store_return
var catalog_sales []Catalog_sale
var date_dim []Date_dim
var store []Store
var item []Item
var joined []Joined
var result []Result

func main() {
	store_sales = []Store_sale{Store_sale{
		Ss_sold_date_sk:  1,
		Ss_item_sk:       1,
		Ss_customer_sk:   1,
		Ss_ticket_number: 1,
		Ss_quantity:      10,
		Ss_store_sk:      1,
	}}
	store_returns = []Store_return{Store_return{
		Sr_returned_date_sk: 2,
		Sr_customer_sk:      1,
		Sr_item_sk:          1,
		Sr_ticket_number:    1,
		Sr_return_quantity:  2,
	}}
	catalog_sales = []Catalog_sale{Catalog_sale{
		Cs_sold_date_sk:     3,
		Cs_item_sk:          1,
		Cs_bill_customer_sk: 1,
		Cs_quantity:         5,
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk:      1,
		D_quarter_name: "1998Q1",
	}, Date_dim{
		D_date_sk:      2,
		D_quarter_name: "1998Q2",
	}, Date_dim{
		D_date_sk:      3,
		D_quarter_name: "1998Q3",
	}}
	store = []Store{Store{
		S_store_sk: 1,
		S_state:    "CA",
	}}
	item = []Item{Item{
		I_item_sk:   1,
		I_item_id:   "I1",
		I_item_desc: "Item 1",
	}}
	joined = func() []Joined {
		results := []Joined{}
		for _, ss := range store_sales {
			for _, sr := range store_returns {
				if !(((ss.Ss_customer_sk == sr.Sr_customer_sk) && (ss.Ss_item_sk == sr.Sr_item_sk)) && (ss.Ss_ticket_number == sr.Sr_ticket_number)) {
					continue
				}
				for _, cs := range catalog_sales {
					if !((sr.Sr_customer_sk == cs.Cs_bill_customer_sk) && (sr.Sr_item_sk == cs.Cs_item_sk)) {
						continue
					}
					for _, d1 := range date_dim {
						if !((ss.Ss_sold_date_sk == d1.D_date_sk) && (d1.D_quarter_name == "1998Q1")) {
							continue
						}
						for _, d2 := range date_dim {
							if !((sr.Sr_returned_date_sk == d2.D_date_sk) && slices.Contains([]string{"1998Q1", "1998Q2", "1998Q3"}, d2.D_quarter_name)) {
								continue
							}
							for _, d3 := range date_dim {
								if !((cs.Cs_sold_date_sk == d3.D_date_sk) && slices.Contains([]string{"1998Q1", "1998Q2", "1998Q3"}, d3.D_quarter_name)) {
									continue
								}
								for _, s := range store {
									if !(ss.Ss_store_sk == s.S_store_sk) {
										continue
									}
									for _, i := range item {
										if !(ss.Ss_item_sk == i.I_item_sk) {
											continue
										}
										results = append(results, Joined{
											Qty:         ss.Ss_quantity,
											Ret:         sr.Sr_return_quantity,
											Csq:         cs.Cs_quantity,
											I_item_id:   i.I_item_id,
											I_item_desc: i.I_item_desc,
											S_state:     s.S_state,
										})
									}
								}
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, j := range joined {
			key := GKey{
				I_item_id:   j.I_item_id,
				I_item_desc: j.I_item_desc,
				S_state:     j.S_state,
			}
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, j)
		}
		results := []Result{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, Result{
				I_item_id:   g.Key.(GKey).I_item_id,
				I_item_desc: g.Key.(GKey).I_item_desc,
				S_state:     g.Key.(GKey).S_state,
				Store_sales_quantitycount: len(func() []Joined {
					results := []Joined{}
					for _, vRaw := range g.Items {
						v := vRaw.(Joined)
						results = append(results, v)
					}
					return results
				}()),
				Store_sales_quantityave: _avgOrdered[int](func() []int {
					results := []int{}
					for _, xRaw := range g.Items {
						x := xRaw.(Joined)
						results = append(results, x.Qty)
					}
					return results
				}()),
				Store_sales_quantitystdev: 0.0,
				Store_sales_quantitycov:   0.0,
				Store_returns_quantitycount: len(func() []Joined {
					results := []Joined{}
					for _, vRaw := range g.Items {
						v := vRaw.(Joined)
						results = append(results, v)
					}
					return results
				}()),
				Store_returns_quantityave: _avgOrdered[int](func() []int {
					results := []int{}
					for _, xRaw := range g.Items {
						x := xRaw.(Joined)
						results = append(results, x.Ret)
					}
					return results
				}()),
				Store_returns_quantitystdev: 0.0,
				Store_returns_quantitycov:   0.0,
				Catalog_sales_quantitycount: len(func() []Joined {
					results := []Joined{}
					for _, vRaw := range g.Items {
						v := vRaw.(Joined)
						results = append(results, v)
					}
					return results
				}()),
				Catalog_sales_quantityave: _avgOrdered[int](func() []int {
					results := []int{}
					for _, xRaw := range g.Items {
						x := xRaw.(Joined)
						results = append(results, x.Csq)
					}
					return results
				}()),
				Catalog_sales_quantitystdev: 0.0,
				Catalog_sales_quantitycov:   0.0,
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q17_stats()
}

func _avgOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	if len(s) == 0 {
		return 0
	}
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum / float64(len(s))
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}
