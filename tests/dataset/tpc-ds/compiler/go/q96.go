//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:06:22Z

package main

import (
	"encoding/json"
	"fmt"
	"time"
)

type HouseholdDemographics struct {
	Hd_demo_sk   int `json:"hd_demo_sk"`
	Hd_dep_count int `json:"hd_dep_count"`
}

type Household_demographic struct {
	Hd_demo_sk   int `json:"hd_demo_sk"`
	Hd_dep_count int `json:"hd_dep_count"`
}

type Store struct {
	S_store_sk   int    `json:"s_store_sk"`
	S_store_name string `json:"s_store_name"`
}

type StoreSale struct {
	Ss_sold_time_sk int `json:"ss_sold_time_sk"`
	Ss_hdemo_sk     int `json:"ss_hdemo_sk"`
	Ss_store_sk     int `json:"ss_store_sk"`
}

type Store_sale struct {
	Ss_sold_time_sk int `json:"ss_sold_time_sk"`
	Ss_hdemo_sk     int `json:"ss_hdemo_sk"`
	Ss_store_sk     int `json:"ss_store_sk"`
}

type TimeDim struct {
	T_time_sk int `json:"t_time_sk"`
	T_hour    int `json:"t_hour"`
	T_minute  int `json:"t_minute"`
}

type Time_dim struct {
	T_time_sk int `json:"t_time_sk"`
	T_hour    int `json:"t_hour"`
	T_minute  int `json:"t_minute"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q96_count() {
	expect((result == 3))
}

var store_sales []Store_sale
var household_demographics []Household_demographic
var time_dim []Time_dim
var store []Store
var result int

func main() {
	store_sales = []Store_sale{Store_sale{
		Ss_sold_time_sk: 1,
		Ss_hdemo_sk:     1,
		Ss_store_sk:     1,
	}, Store_sale{
		Ss_sold_time_sk: 1,
		Ss_hdemo_sk:     1,
		Ss_store_sk:     1,
	}, Store_sale{
		Ss_sold_time_sk: 2,
		Ss_hdemo_sk:     1,
		Ss_store_sk:     1,
	}}
	household_demographics = []Household_demographic{Household_demographic{
		Hd_demo_sk:   1,
		Hd_dep_count: 3,
	}}
	time_dim = []Time_dim{Time_dim{
		T_time_sk: 1,
		T_hour:    20,
		T_minute:  35,
	}, Time_dim{
		T_time_sk: 2,
		T_hour:    20,
		T_minute:  45,
	}}
	store = []Store{Store{
		S_store_sk:   1,
		S_store_name: "ese",
	}}
	result = len(func() []Store_sale {
		results := []Store_sale{}
		for _, ss := range store_sales {
			for _, hd := range household_demographics {
				if !(ss.Ss_hdemo_sk == hd.Hd_demo_sk) {
					continue
				}
				for _, t := range time_dim {
					if !(ss.Ss_sold_time_sk == t.T_time_sk) {
						continue
					}
					for _, s := range store {
						if !(ss.Ss_store_sk == s.S_store_sk) {
							continue
						}
						if (((t.T_hour == 20) && (t.T_minute >= 30)) && (hd.Hd_dep_count == 3)) && (s.S_store_name == "ese") {
							if (((t.T_hour == 20) && (t.T_minute >= 30)) && (hd.Hd_dep_count == 3)) && (s.S_store_name == "ese") {
								results = append(results, ss)
							}
						}
					}
				}
			}
		}
		return results
	}())
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q96_count()
}
