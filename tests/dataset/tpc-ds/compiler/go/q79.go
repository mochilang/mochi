//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:01:01Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Agg struct {
	Key    any     `json:"key"`
	Amt    float64 `json:"amt"`
	Profit float64 `json:"profit"`
}

type Customer struct {
	C_customer_sk int    `json:"c_customer_sk"`
	C_last_name   string `json:"c_last_name"`
	C_first_name  string `json:"c_first_name"`
}

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_dow     int `json:"d_dow"`
	D_year    int `json:"d_year"`
}

type GKey struct {
	Ticket      int    `json:"ticket"`
	Customer_sk int    `json:"customer_sk"`
	City        string `json:"city"`
}

type Household_demographic struct {
	Hd_demo_sk       int `json:"hd_demo_sk"`
	Hd_dep_count     int `json:"hd_dep_count"`
	Hd_vehicle_count int `json:"hd_vehicle_count"`
}

type Result struct {
	C_last_name      string  `json:"c_last_name"`
	C_first_name     string  `json:"c_first_name"`
	S_city           any     `json:"s_city"`
	Ss_ticket_number any     `json:"ss_ticket_number"`
	Amt              float64 `json:"amt"`
	Profit           float64 `json:"profit"`
}

type Store struct {
	S_store_sk         int    `json:"s_store_sk"`
	S_city             string `json:"s_city"`
	S_number_employees int    `json:"s_number_employees"`
}

type Store_sale struct {
	Ss_sold_date_sk  int     `json:"ss_sold_date_sk"`
	Ss_store_sk      int     `json:"ss_store_sk"`
	Ss_ticket_number int     `json:"ss_ticket_number"`
	Ss_customer_sk   int     `json:"ss_customer_sk"`
	Ss_hdemo_sk      int     `json:"ss_hdemo_sk"`
	Ss_coupon_amt    float64 `json:"ss_coupon_amt"`
	Ss_net_profit    float64 `json:"ss_net_profit"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q79_simplified() {
	expect(_equal(result, []v{v{
		C_last_name:      "Smith",
		C_first_name:     "Alice",
		S_city:           "CityA",
		Ss_ticket_number: 1,
		Amt:              5.0,
		Profit:           10.0,
	}}))
}

var date_dim []Date_dim
var store []Store
var household_demographics []Household_demographic
var store_sales []Store_sale
var customer []Customer
var agg []Agg
var result []Result

func main() {
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_dow:     1,
		D_year:    1999,
	}}
	store = []Store{Store{
		S_store_sk:         1,
		S_city:             "CityA",
		S_number_employees: 250,
	}}
	household_demographics = []Household_demographic{Household_demographic{
		Hd_demo_sk:       1,
		Hd_dep_count:     2,
		Hd_vehicle_count: 1,
	}}
	store_sales = []Store_sale{Store_sale{
		Ss_sold_date_sk:  1,
		Ss_store_sk:      1,
		Ss_ticket_number: 1,
		Ss_customer_sk:   1,
		Ss_hdemo_sk:      1,
		Ss_coupon_amt:    5.0,
		Ss_net_profit:    10.0,
	}}
	customer = []Customer{Customer{
		C_customer_sk: 1,
		C_last_name:   "Smith",
		C_first_name:  "Alice",
	}}
	agg = _convSlice[v, Agg](func() []Agg {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, ss := range store_sales {
			for _, d := range date_dim {
				if !(d.D_date_sk == ss.Ss_sold_date_sk) {
					continue
				}
				for _, s := range store {
					if !(s.S_store_sk == ss.Ss_store_sk) {
						continue
					}
					for _, hd := range household_demographics {
						if !(hd.Hd_demo_sk == ss.Ss_hdemo_sk) {
							continue
						}
						if (((((hd.Hd_dep_count == 2) || (hd.Hd_vehicle_count > 1)) && (d.D_dow == 1)) && (((d.D_year == 1998) || (d.D_year == 1999)) || (d.D_year == 2000))) && (s.S_number_employees >= 200)) && (s.S_number_employees <= 295) {
							key := GKey{
								Ticket:      ss.Ss_ticket_number,
								Customer_sk: ss.Ss_customer_sk,
								City:        s.S_city,
							}
							ks := fmt.Sprint(key)
							g, ok := groups[ks]
							if !ok {
								g = &data.Group{Key: key}
								groups[ks] = g
								order = append(order, ks)
							}
							_item := map[string]any{}
							_item["ss_sold_date_sk"] = ss.Ss_sold_date_sk
							_item["ss_store_sk"] = ss.Ss_store_sk
							_item["ss_ticket_number"] = ss.Ss_ticket_number
							_item["ss_customer_sk"] = ss.Ss_customer_sk
							_item["ss_hdemo_sk"] = ss.Ss_hdemo_sk
							_item["ss_coupon_amt"] = ss.Ss_coupon_amt
							_item["ss_net_profit"] = ss.Ss_net_profit
							_item["ss"] = ss
							_item["d_date_sk"] = d.D_date_sk
							_item["d_dow"] = d.D_dow
							_item["d_year"] = d.D_year
							_item["d"] = d
							_item["s_store_sk"] = s.S_store_sk
							_item["s_city"] = s.S_city
							_item["s_number_employees"] = s.S_number_employees
							_item["s"] = s
							_item["hd_demo_sk"] = hd.Hd_demo_sk
							_item["hd_dep_count"] = hd.Hd_dep_count
							_item["hd_vehicle_count"] = hd.Hd_vehicle_count
							_item["hd"] = hd
							g.Items = append(g.Items, _item)
						}
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Agg{}
		for _, g := range items {
			results = append(results, Agg{
				Key: any(g.Key.(GKey)),
				Amt: _sum(func() []any {
					results := []any{}
					for _, x := range g.Items {
						results = append(results, _getField(x.Ss, "ss_coupon_amt"))
					}
					return results
				}()),
				Profit: _sum(func() []any {
					results := []any{}
					for _, x := range g.Items {
						results = append(results, _getField(x.Ss, "ss_net_profit"))
					}
					return results
				}()),
			})
		}
		return results
	}())
	result = func() []Result {
		src := _toAnySlice(agg)
		resAny := _query(src, []_joinSpec{
			{items: _toAnySlice(customer), on: func(_a ...any) bool {
				tmp0 := _a[0]
				var a Agg
				if tmp0 != nil {
					a = tmp0.(Agg)
				}
				_ = a
				tmp1 := _a[1]
				var c Customer
				if tmp1 != nil {
					c = tmp1.(Customer)
				}
				_ = c
				return _equal(c.C_customer_sk, _getField(a.Key, "customer_sk"))
			}, leftKey: func(_a ...any) any {
				tmp0 := _a[0]
				var a Agg
				if tmp0 != nil {
					a = tmp0.(Agg)
				}
				_ = a
				return _getField(a.Key, "customer_sk")
			}, rightKey: func(_v any) any { c := _v.(Customer); _ = c; return c.C_customer_sk }},
		}, _queryOpts{selectFn: func(_a ...any) any {
			tmp0 := _a[0]
			var a Agg
			if tmp0 != nil {
				a = tmp0.(Agg)
			}
			_ = a
			tmp1 := _a[1]
			var c Customer
			if tmp1 != nil {
				c = tmp1.(Customer)
			}
			_ = c
			return Result{
				C_last_name:      c.C_last_name,
				C_first_name:     c.C_first_name,
				S_city:           _getField(a.Key, "city"),
				Ss_ticket_number: _getField(a.Key, "ticket"),
				Amt:              a.Amt,
				Profit:           a.Profit,
			}
		}, sortKey: func(_a ...any) any {
			tmp0 := _a[0]
			var a Agg
			if tmp0 != nil {
				a = tmp0.(Agg)
			}
			_ = a
			tmp1 := _a[1]
			var c Customer
			if tmp1 != nil {
				c = tmp1.(Customer)
			}
			_ = c
			return []any{
				c.C_last_name,
				c.C_first_name,
				_getField(a.Key, "city"),
				a.Profit,
			}
		}, skip: -1, take: -1})
		out := make([]Result, len(resAny))
		for i, v := range resAny {
			out[i] = v.(Result)
		}
		return out
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q79_simplified()
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}

type _joinSpec struct {
	items    []any
	on       func(...any) bool
	leftKey  func(...any) any
	rightKey func(any) any
	left     bool
	right    bool
}
type _queryOpts struct {
	selectFn func(...any) any
	where    func(...any) bool
	sortKey  func(...any) any
	skip     int
	take     int
}

func _query(src []any, joins []_joinSpec, opts _queryOpts) []any {
	items := make([][]any, len(src))
	for i, v := range src {
		items[i] = []any{v}
	}
	for _, j := range joins {
		if j.leftKey != nil && j.rightKey != nil {
			if j.right && !j.left {
				lmap := map[string][]int{}
				for li, l := range items {
					key := fmt.Sprint(j.leftKey(l...))
					lmap[key] = append(lmap[key], li)
				}
				joined := [][]any{}
				for _, right := range j.items {
					key := fmt.Sprint(j.rightKey(right))
					if is, ok := lmap[key]; ok {
						for _, li := range is {
							left := items[li]
							keep := true
							if j.on != nil {
								args := append(append([]any(nil), left...), right)
								keep = j.on(args...)
							}
							if !keep {
								continue
							}
							joined = append(joined, append(append([]any(nil), left...), right))
						}
					} else {
						undef := make([]any, len(items[0]))
						joined = append(joined, append(undef, right))
					}
				}
				items = joined
				continue
			}
			rmap := map[string][]int{}
			for ri, r := range j.items {
				key := fmt.Sprint(j.rightKey(r))
				rmap[key] = append(rmap[key], ri)
			}
			joined := [][]any{}
			matched := make([]bool, len(j.items))
			for _, left := range items {
				key := fmt.Sprint(j.leftKey(left...))
				if is, ok := rmap[key]; ok {
					m := false
					for _, ri := range is {
						right := j.items[ri]
						keep := true
						if j.on != nil {
							args := append(append([]any(nil), left...), right)
							keep = j.on(args...)
						}
						if !keep {
							continue
						}
						m = true
						matched[ri] = true
						joined = append(joined, append(append([]any(nil), left...), right))
					}
					if j.left && !m {
						joined = append(joined, append(append([]any(nil), left...), nil))
					}
				} else if j.left {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			if j.right {
				lw := 0
				if len(items) > 0 {
					lw = len(items[0])
				}
				for ri, right := range j.items {
					if !matched[ri] {
						undef := make([]any, lw)
						joined = append(joined, append(undef, right))
					}
				}
			}
			items = joined
			continue
		}
		joined := [][]any{}
		if j.right && j.left {
			matched := make([]bool, len(j.items))
			for _, left := range items {
				m := false
				for ri, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					matched[ri] = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			for ri, right := range j.items {
				if !matched[ri] {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else if j.right {
			for _, right := range j.items {
				m := false
				for _, left := range items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else {
			for _, left := range items {
				m := false
				for _, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if j.left && !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
		}
		items = joined
	}
	if opts.where != nil {
		filtered := [][]any{}
		for _, r := range items {
			if opts.where(r...) {
				filtered = append(filtered, r)
			}
		}
		items = filtered
	}
	if opts.sortKey != nil {
		type pair struct {
			item []any
			key  any
		}
		pairs := make([]pair, len(items))
		for i, it := range items {
			pairs[i] = pair{it, opts.sortKey(it...)}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for i, p := range pairs {
			items[i] = p.item
		}
	}
	if opts.skip >= 0 {
		if opts.skip < len(items) {
			items = items[opts.skip:]
		} else {
			items = [][]any{}
		}
	}
	if opts.take >= 0 {
		if opts.take < len(items) {
			items = items[:opts.take]
		}
	}
	res := make([]any, len(items))
	for i, r := range items {
		res[i] = opts.selectFn(r...)
	}
	return res
}

func _sum[T constraints.Integer | constraints.Float](v []T) float64 {
	var sum float64
	for _, n := range v {
		sum += float64(n)
	}
	return sum
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
