//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:00:53Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"time"

	"golang.org/x/exp/constraints"
)

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
}

type GKey struct {
	Category string `json:"category"`
	Class    string `json:"class"`
}

type Item struct {
	I_item_sk  int    `json:"i_item_sk"`
	I_category string `json:"i_category"`
	I_class    string `json:"i_class"`
}

type Result struct {
	I_category   any     `json:"i_category"`
	I_class      any     `json:"i_class"`
	Gross_margin float64 `json:"gross_margin"`
}

type Store struct {
	S_store_sk int    `json:"s_store_sk"`
	S_state    string `json:"s_state"`
}

type Store_sale struct {
	Ss_item_sk         int     `json:"ss_item_sk"`
	Ss_store_sk        int     `json:"ss_store_sk"`
	Ss_sold_date_sk    int     `json:"ss_sold_date_sk"`
	Ss_ext_sales_price float64 `json:"ss_ext_sales_price"`
	Ss_net_profit      float64 `json:"ss_net_profit"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q36_simplified() {
	expect(_equal(result, []v{v{
		I_category:   "Books",
		I_class:      "C1",
		Gross_margin: 0.2,
	}, v{
		I_category:   "Books",
		I_class:      "C2",
		Gross_margin: 0.25,
	}, v{
		I_category:   "Electronics",
		I_class:      "C3",
		Gross_margin: 0.2,
	}}))
}

var store_sales []Store_sale
var item []Item
var store []Store
var date_dim []Date_dim
var result []Result

func main() {
	store_sales = []Store_sale{Store_sale{
		Ss_item_sk:         1,
		Ss_store_sk:        1,
		Ss_sold_date_sk:    1,
		Ss_ext_sales_price: 100.0,
		Ss_net_profit:      20.0,
	}, Store_sale{
		Ss_item_sk:         2,
		Ss_store_sk:        1,
		Ss_sold_date_sk:    1,
		Ss_ext_sales_price: 200.0,
		Ss_net_profit:      50.0,
	}, Store_sale{
		Ss_item_sk:         3,
		Ss_store_sk:        2,
		Ss_sold_date_sk:    1,
		Ss_ext_sales_price: 150.0,
		Ss_net_profit:      30.0,
	}}
	item = []Item{Item{
		I_item_sk:  1,
		I_category: "Books",
		I_class:    "C1",
	}, Item{
		I_item_sk:  2,
		I_category: "Books",
		I_class:    "C2",
	}, Item{
		I_item_sk:  3,
		I_category: "Electronics",
		I_class:    "C3",
	}}
	store = []Store{Store{
		S_store_sk: 1,
		S_state:    "A",
	}, Store{
		S_store_sk: 2,
		S_state:    "B",
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_year:    2000,
	}}
	result = func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, ss := range store_sales {
			for _, d := range date_dim {
				if !(ss.Ss_sold_date_sk == d.D_date_sk) {
					continue
				}
				for _, i := range item {
					if !(ss.Ss_item_sk == i.I_item_sk) {
						continue
					}
					for _, s := range store {
						if !(ss.Ss_store_sk == s.S_store_sk) {
							continue
						}
						if (d.D_year == 2000) && ((s.S_state == "A") || (s.S_state == "B")) {
							key := GKey{
								Category: i.I_category,
								Class:    i.I_class,
							}
							ks := fmt.Sprint(key)
							g, ok := groups[ks]
							if !ok {
								g = &data.Group{Key: key}
								groups[ks] = g
								order = append(order, ks)
							}
							_item := map[string]any{}
							_item["ss_item_sk"] = ss.Ss_item_sk
							_item["ss_store_sk"] = ss.Ss_store_sk
							_item["ss_sold_date_sk"] = ss.Ss_sold_date_sk
							_item["ss_ext_sales_price"] = ss.Ss_ext_sales_price
							_item["ss_net_profit"] = ss.Ss_net_profit
							_item["ss"] = ss
							_item["d_date_sk"] = d.D_date_sk
							_item["d_year"] = d.D_year
							_item["d"] = d
							_item["i_item_sk"] = i.I_item_sk
							_item["i_category"] = i.I_category
							_item["i_class"] = i.I_class
							_item["i"] = i
							_item["s_store_sk"] = s.S_store_sk
							_item["s_state"] = s.S_state
							_item["s"] = s
							g.Items = append(g.Items, _item)
						}
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		type pair struct {
			item *data.Group
			key  any
		}
		pairs := make([]pair, len(items))
		for idx, it := range items {
			g := it
			pairs[idx] = pair{item: it, key: _toAnySlice([]string{g.Key.(GKey).Category, g.Key.(GKey).Class})}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for idx, p := range pairs {
			items[idx] = p.item
		}
		results := []Result{}
		for _, g := range items {
			results = append(results, Result{
				I_category: g.Key.(GKey).Category,
				I_class:    g.Key.(GKey).Class,
				Gross_margin: (_sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, x.Ss_net_profit)
					}
					return results
				}()) / _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, x.Ss_ext_sales_price)
					}
					return results
				}())),
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q36_simplified()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
