//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:00:50Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"time"

	"golang.org/x/exp/constraints"
)

type CatalogSale struct {
	Cs_sold_date_sk  int     `json:"cs_sold_date_sk"`
	Cs_item_sk       int     `json:"cs_item_sk"`
	Cs_bill_cdemo_sk int     `json:"cs_bill_cdemo_sk"`
	Cs_promo_sk      int     `json:"cs_promo_sk"`
	Cs_quantity      int     `json:"cs_quantity"`
	Cs_list_price    float64 `json:"cs_list_price"`
	Cs_coupon_amt    float64 `json:"cs_coupon_amt"`
	Cs_sales_price   float64 `json:"cs_sales_price"`
}

type Catalog_sale struct {
	Cs_sold_date_sk  int     `json:"cs_sold_date_sk"`
	Cs_item_sk       int     `json:"cs_item_sk"`
	Cs_bill_cdemo_sk int     `json:"cs_bill_cdemo_sk"`
	Cs_promo_sk      int     `json:"cs_promo_sk"`
	Cs_quantity      int     `json:"cs_quantity"`
	Cs_list_price    float64 `json:"cs_list_price"`
	Cs_coupon_amt    float64 `json:"cs_coupon_amt"`
	Cs_sales_price   float64 `json:"cs_sales_price"`
}

type CustomerDemo struct {
	Cd_demo_sk          int    `json:"cd_demo_sk"`
	Cd_gender           string `json:"cd_gender"`
	Cd_marital_status   string `json:"cd_marital_status"`
	Cd_education_status string `json:"cd_education_status"`
}

type Customer_demographic struct {
	Cd_demo_sk          int    `json:"cd_demo_sk"`
	Cd_gender           string `json:"cd_gender"`
	Cd_marital_status   string `json:"cd_marital_status"`
	Cd_education_status string `json:"cd_education_status"`
}

type DateDim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
}

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
}

type Item struct {
	I_item_sk int    `json:"i_item_sk"`
	I_item_id string `json:"i_item_id"`
}

type Promotion struct {
	P_promo_sk      int    `json:"p_promo_sk"`
	P_channel_email string `json:"p_channel_email"`
	P_channel_event string `json:"p_channel_event"`
}

type Result struct {
	I_item_id any     `json:"i_item_id"`
	Agg1      float64 `json:"agg1"`
	Agg2      float64 `json:"agg2"`
	Agg3      float64 `json:"agg3"`
	Agg4      float64 `json:"agg4"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q26_demographic_averages() {
	expect(_equal(result, []v{v{
		I_item_id: "ITEM1",
		Agg1:      10.0,
		Agg2:      100.0,
		Agg3:      5.0,
		Agg4:      95.0,
	}}))
}

var catalog_sales []Catalog_sale
var customer_demographics []Customer_demographic
var date_dim []Date_dim
var item []Item
var promotion []Promotion
var result []Result

func main() {
	catalog_sales = []Catalog_sale{Catalog_sale{
		Cs_sold_date_sk:  1,
		Cs_item_sk:       1,
		Cs_bill_cdemo_sk: 1,
		Cs_promo_sk:      1,
		Cs_quantity:      10,
		Cs_list_price:    100.0,
		Cs_coupon_amt:    5.0,
		Cs_sales_price:   95.0,
	}, Catalog_sale{
		Cs_sold_date_sk:  1,
		Cs_item_sk:       2,
		Cs_bill_cdemo_sk: 2,
		Cs_promo_sk:      2,
		Cs_quantity:      5,
		Cs_list_price:    50.0,
		Cs_coupon_amt:    2.0,
		Cs_sales_price:   48.0,
	}}
	customer_demographics = []Customer_demographic{Customer_demographic{
		Cd_demo_sk:          1,
		Cd_gender:           "M",
		Cd_marital_status:   "S",
		Cd_education_status: "College",
	}, Customer_demographic{
		Cd_demo_sk:          2,
		Cd_gender:           "F",
		Cd_marital_status:   "M",
		Cd_education_status: "High School",
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_year:    2000,
	}}
	item = []Item{Item{
		I_item_sk: 1,
		I_item_id: "ITEM1",
	}, Item{
		I_item_sk: 2,
		I_item_id: "ITEM2",
	}}
	promotion = []Promotion{Promotion{
		P_promo_sk:      1,
		P_channel_email: "N",
		P_channel_event: "Y",
	}, Promotion{
		P_promo_sk:      2,
		P_channel_email: "Y",
		P_channel_event: "N",
	}}
	result = _convSlice[v, Result](func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, cs := range catalog_sales {
			for _, cd := range customer_demographics {
				if !(cs.Cs_bill_cdemo_sk == cd.Cd_demo_sk) {
					continue
				}
				for _, d := range date_dim {
					if !(cs.Cs_sold_date_sk == d.D_date_sk) {
						continue
					}
					for _, i := range item {
						if !(cs.Cs_item_sk == i.I_item_sk) {
							continue
						}
						for _, p := range promotion {
							if !(cs.Cs_promo_sk == p.P_promo_sk) {
								continue
							}
							if ((((cd.Cd_gender == "M") && (cd.Cd_marital_status == "S")) && (cd.Cd_education_status == "College")) && ((p.P_channel_email == "N") || (p.P_channel_event == "N"))) && (d.D_year == 2000) {
								key := i.I_item_id
								ks := fmt.Sprint(key)
								g, ok := groups[ks]
								if !ok {
									g = &data.Group{Key: key}
									groups[ks] = g
									order = append(order, ks)
								}
								_item := map[string]any{}
								_item["cs_sold_date_sk"] = cs.Cs_sold_date_sk
								_item["cs_item_sk"] = cs.Cs_item_sk
								_item["cs_bill_cdemo_sk"] = cs.Cs_bill_cdemo_sk
								_item["cs_promo_sk"] = cs.Cs_promo_sk
								_item["cs_quantity"] = cs.Cs_quantity
								_item["cs_list_price"] = cs.Cs_list_price
								_item["cs_coupon_amt"] = cs.Cs_coupon_amt
								_item["cs_sales_price"] = cs.Cs_sales_price
								_item["cs"] = cs
								_item["cd_demo_sk"] = cd.Cd_demo_sk
								_item["cd_gender"] = cd.Cd_gender
								_item["cd_marital_status"] = cd.Cd_marital_status
								_item["cd_education_status"] = cd.Cd_education_status
								_item["cd"] = cd
								_item["d_date_sk"] = d.D_date_sk
								_item["d_year"] = d.D_year
								_item["d"] = d
								_item["i_item_sk"] = i.I_item_sk
								_item["i_item_id"] = i.I_item_id
								_item["i"] = i
								_item["p_promo_sk"] = p.P_promo_sk
								_item["p_channel_email"] = p.P_channel_email
								_item["p_channel_event"] = p.P_channel_event
								_item["p"] = p
								g.Items = append(g.Items, _item)
							}
						}
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Result{}
		for _, g := range items {
			results = append(results, Result{
				I_item_id: g.Key.(any),
				Agg1: _avgOrdered[int](func() []int {
					results := []int{}
					for _, x := range g.Items {
						results = append(results, x.Cs_quantity)
					}
					return results
				}()),
				Agg2: _avgOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, x.Cs_list_price)
					}
					return results
				}()),
				Agg3: _avgOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, x.Cs_coupon_amt)
					}
					return results
				}()),
				Agg4: _avgOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, x.Cs_sales_price)
					}
					return results
				}()),
			})
		}
		return results
	}())
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q26_demographic_averages()
}

func _avgOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	if len(s) == 0 {
		return 0
	}
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum / float64(len(s))
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}
