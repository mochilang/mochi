//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:05:11Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"time"

	"golang.org/x/exp/constraints"
)

type StoreSale struct {
	Ss_quantity       int     `json:"ss_quantity"`
	Ss_list_price     float64 `json:"ss_list_price"`
	Ss_coupon_amt     float64 `json:"ss_coupon_amt"`
	Ss_wholesale_cost float64 `json:"ss_wholesale_cost"`
}

type Store_sale struct {
	Ss_quantity       int     `json:"ss_quantity"`
	Ss_list_price     float64 `json:"ss_list_price"`
	Ss_coupon_amt     float64 `json:"ss_coupon_amt"`
	Ss_wholesale_cost float64 `json:"ss_wholesale_cost"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q28_buckets() {
	expect(_equal(result, v{
		B1_LP:   100.0,
		B1_CNT:  1,
		B1_CNTD: 1,
		B2_LP:   80.0,
		B2_CNT:  1,
		B2_CNTD: 1,
	}))
}

var store_sales []Store_sale
var bucket1 []Store_sale
var bucket2 []Store_sale
var result v

func main() {
	store_sales = []Store_sale{Store_sale{
		Ss_quantity:       3,
		Ss_list_price:     100.0,
		Ss_coupon_amt:     50.0,
		Ss_wholesale_cost: 30.0,
	}, Store_sale{
		Ss_quantity:       8,
		Ss_list_price:     80.0,
		Ss_coupon_amt:     10.0,
		Ss_wholesale_cost: 20.0,
	}, Store_sale{
		Ss_quantity:       12,
		Ss_list_price:     60.0,
		Ss_coupon_amt:     5.0,
		Ss_wholesale_cost: 15.0,
	}}
	bucket1 = func() []Store_sale {
		results := []Store_sale{}
		for _, ss := range store_sales {
			if ((ss.Ss_quantity >= 0) && (ss.Ss_quantity <= 5)) && ((((ss.Ss_list_price >= float64(0)) && (ss.Ss_list_price <= float64(110))) || ((ss.Ss_coupon_amt >= float64(0)) && (ss.Ss_coupon_amt <= float64(1000)))) || ((ss.Ss_wholesale_cost >= float64(0)) && (ss.Ss_wholesale_cost <= float64(50)))) {
				if ((ss.Ss_quantity >= 0) && (ss.Ss_quantity <= 5)) && ((((ss.Ss_list_price >= float64(0)) && (ss.Ss_list_price <= float64(110))) || ((ss.Ss_coupon_amt >= float64(0)) && (ss.Ss_coupon_amt <= float64(1000)))) || ((ss.Ss_wholesale_cost >= float64(0)) && (ss.Ss_wholesale_cost <= float64(50)))) {
					results = append(results, ss)
				}
			}
		}
		return results
	}()
	bucket2 = func() []Store_sale {
		results := []Store_sale{}
		for _, ss := range store_sales {
			if ((ss.Ss_quantity >= 6) && (ss.Ss_quantity <= 10)) && ((((ss.Ss_list_price >= float64(0)) && (ss.Ss_list_price <= float64(110))) || ((ss.Ss_coupon_amt >= float64(0)) && (ss.Ss_coupon_amt <= float64(1000)))) || ((ss.Ss_wholesale_cost >= float64(0)) && (ss.Ss_wholesale_cost <= float64(50)))) {
				if ((ss.Ss_quantity >= 6) && (ss.Ss_quantity <= 10)) && ((((ss.Ss_list_price >= float64(0)) && (ss.Ss_list_price <= float64(110))) || ((ss.Ss_coupon_amt >= float64(0)) && (ss.Ss_coupon_amt <= float64(1000)))) || ((ss.Ss_wholesale_cost >= float64(0)) && (ss.Ss_wholesale_cost <= float64(50)))) {
					results = append(results, ss)
				}
			}
		}
		return results
	}()
	result = v{
		B1_LP: _avgOrdered[float64](func() []float64 {
			results := []float64{}
			for _, x := range bucket1 {
				results = append(results, x.Ss_list_price)
			}
			return results
		}()),
		B1_CNT: len(bucket1),
		B1_CNTD: len(func() []any {
			groups := map[string]*data.Group{}
			order := []string{}
			for _, x := range bucket1 {
				key := x.Ss_list_price
				ks := fmt.Sprint(key)
				g, ok := groups[ks]
				if !ok {
					g = &data.Group{Key: key}
					groups[ks] = g
					order = append(order, ks)
				}
				g.Items = append(g.Items, x)
			}
			results := []any{}
			for _, ks := range order {
				g := groups[ks]
				results = append(results, g.Key.(any))
			}
			return results
		}()),
		B2_LP: _avgOrdered[float64](func() []float64 {
			results := []float64{}
			for _, x := range bucket2 {
				results = append(results, x.Ss_list_price)
			}
			return results
		}()),
		B2_CNT: len(bucket2),
		B2_CNTD: len(func() []any {
			groups := map[string]*data.Group{}
			order := []string{}
			for _, x := range bucket2 {
				key := x.Ss_list_price
				ks := fmt.Sprint(key)
				g, ok := groups[ks]
				if !ok {
					g = &data.Group{Key: key}
					groups[ks] = g
					order = append(order, ks)
				}
				g.Items = append(g.Items, x)
			}
			results := []any{}
			for _, ks := range order {
				g := groups[ks]
				results = append(results, g.Key.(any))
			}
			return results
		}()),
	}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q28_buckets()
}

func _avgOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	if len(s) == 0 {
		return 0
	}
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum / float64(len(s))
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}
