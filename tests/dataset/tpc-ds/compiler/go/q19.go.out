package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"time"
)

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

type StoreSale struct {
	Ss_sold_date_sk    int     `json:"ss_sold_date_sk"`
	Ss_item_sk         int     `json:"ss_item_sk"`
	Ss_customer_sk     int     `json:"ss_customer_sk"`
	Ss_store_sk        int     `json:"ss_store_sk"`
	Ss_ext_sales_price float64 `json:"ss_ext_sales_price"`
}

type DateDim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
	D_moy     int `json:"d_moy"`
}

type Item struct {
	I_item_sk     int    `json:"i_item_sk"`
	I_brand_id    int    `json:"i_brand_id"`
	I_brand       string `json:"i_brand"`
	I_manufact_id int    `json:"i_manufact_id"`
	I_manufact    string `json:"i_manufact"`
	I_manager_id  int    `json:"i_manager_id"`
}

type Customer struct {
	C_customer_sk     int `json:"c_customer_sk"`
	C_current_addr_sk int `json:"c_current_addr_sk"`
}

type CustomerAddress struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_zip        string `json:"ca_zip"`
}

type Store struct {
	S_store_sk int    `json:"s_store_sk"`
	S_zip      string `json:"s_zip"`
}

func test_TPCDS_Q19_brand() {
	expect(_equal(result, []map[string]any{map[string]any{
		"i_brand":       "B1",
		"i_brand_id":    1,
		"i_manufact_id": 1,
		"i_manufact":    "M1",
		"ext_price":     100.0,
	}}))
}

type Store_salesItem struct {
	Ss_sold_date_sk    int     `json:"ss_sold_date_sk"`
	Ss_item_sk         int     `json:"ss_item_sk"`
	Ss_customer_sk     int     `json:"ss_customer_sk"`
	Ss_store_sk        int     `json:"ss_store_sk"`
	Ss_ext_sales_price float64 `json:"ss_ext_sales_price"`
}

var store_sales []Store_salesItem

type Date_dimItem struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
	D_moy     int `json:"d_moy"`
}

var date_dim []Date_dimItem

type ItemItem struct {
	I_item_sk     int    `json:"i_item_sk"`
	I_brand_id    int    `json:"i_brand_id"`
	I_brand       string `json:"i_brand"`
	I_manufact_id int    `json:"i_manufact_id"`
	I_manufact    string `json:"i_manufact"`
	I_manager_id  int    `json:"i_manager_id"`
}

var item []ItemItem

type CustomerItem struct {
	C_customer_sk     int `json:"c_customer_sk"`
	C_current_addr_sk int `json:"c_current_addr_sk"`
}

var customer []CustomerItem

type Customer_addressItem struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_zip        string `json:"ca_zip"`
}

var customer_address []Customer_addressItem

type StoreItem struct {
	S_store_sk int    `json:"s_store_sk"`
	S_zip      string `json:"s_zip"`
}

var store []StoreItem
var result []map[string]any

func main() {
	failures := 0
	store_sales = _cast[[]Store_salesItem]([]Store_salesItem{Store_salesItem{
		Ss_sold_date_sk:    1,
		Ss_item_sk:         1,
		Ss_customer_sk:     1,
		Ss_store_sk:        1,
		Ss_ext_sales_price: 100.0,
	}})
	date_dim = _cast[[]Date_dimItem]([]Date_dimItem{Date_dimItem{
		D_date_sk: 1,
		D_year:    1999,
		D_moy:     11,
	}})
	item = _cast[[]ItemItem]([]ItemItem{ItemItem{
		I_item_sk:     1,
		I_brand_id:    1,
		I_brand:       "B1",
		I_manufact_id: 1,
		I_manufact:    "M1",
		I_manager_id:  10,
	}})
	customer = _cast[[]CustomerItem]([]CustomerItem{CustomerItem{
		C_customer_sk:     1,
		C_current_addr_sk: 1,
	}})
	customer_address = _cast[[]Customer_addressItem]([]Customer_addressItem{Customer_addressItem{
		Ca_address_sk: 1,
		Ca_zip:        "11111",
	}})
	store = _cast[[]StoreItem]([]StoreItem{StoreItem{
		S_store_sk: 1,
		S_zip:      "99999",
	}})
	result = func() []map[string]any {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, d := range date_dim {
			for _, ss := range store_sales {
				if !(ss.Ss_sold_date_sk == d.D_date_sk) {
					continue
				}
				for _, i := range item {
					if !((ss.Ss_item_sk == i.I_item_sk) && (i.I_manager_id == 10)) {
						continue
					}
					for _, c := range customer {
						if !(ss.Ss_customer_sk == c.C_customer_sk) {
							continue
						}
						for _, ca := range customer_address {
							if !(c.C_current_addr_sk == ca.Ca_address_sk) {
								continue
							}
							for _, s := range store {
								if !((ss.Ss_store_sk == s.S_store_sk) && (_sliceString(ca.Ca_zip, 0, 5) != _sliceString(s.S_zip, 0, 5))) {
									continue
								}
								if (d.D_moy == 11) && (d.D_year == 1999) {
									key := map[string]any{
										"brand":    i.I_brand,
										"brand_id": i.I_brand_id,
										"man_id":   i.I_manufact_id,
										"man":      i.I_manufact,
									}
									ks := fmt.Sprint(key)
									g, ok := groups[ks]
									if !ok {
										g = &data.Group{Key: key}
										groups[ks] = g
										order = append(order, ks)
									}
									_item := map[string]any{}
									for k, v := range _cast[map[string]any](d) {
										_item[k] = v
									}
									_item["d"] = d
									for k, v := range _cast[map[string]any](ss) {
										_item[k] = v
									}
									_item["ss"] = ss
									for k, v := range _cast[map[string]any](i) {
										_item[k] = v
									}
									_item["i"] = i
									for k, v := range _cast[map[string]any](c) {
										_item[k] = v
									}
									_item["c"] = c
									for k, v := range _cast[map[string]any](ca) {
										_item[k] = v
									}
									_item["ca"] = ca
									for k, v := range _cast[map[string]any](s) {
										_item[k] = v
									}
									_item["s"] = s
									g.Items = append(g.Items, _item)
								}
							}
						}
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		type pair struct {
			item *data.Group
			key  any
		}
		pairs := make([]pair, len(items))
		for idx, it := range items {
			g := it
			pairs[idx] = pair{item: it, key: _toAnySlice([]any{_cast[map[string]any](g.Key)["brand"]})}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for idx, p := range pairs {
			items[idx] = p.item
		}
		_res := []map[string]any{}
		for _, g := range items {
			_res = append(_res, map[string]any{
				"i_brand":       _cast[map[string]any](g.Key)["brand"],
				"i_brand_id":    _cast[map[string]any](g.Key)["brand_id"],
				"i_manufact_id": _cast[map[string]any](g.Key)["man_id"],
				"i_manufact":    _cast[map[string]any](g.Key)["man"],
				"ext_price": _sum(func() []any {
					_res := []any{}
					for _, x := range g.Items {
						_res = append(_res, _cast[map[string]any](x)["ss_ext_sales_price"])
					}
					return _res
				}()),
			})
		}
		return _res
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	{
		printTestStart("TPCDS Q19 brand")
		start := time.Now()
		var failed error
		func() {
			defer func() {
				if r := recover(); r != nil {
					failed = fmt.Errorf("%v", r)
				}
			}()
			test_TPCDS_Q19_brand()
		}()
		if failed != nil {
			failures++
			printTestFail(failed, time.Since(start))
		} else {
			printTestPass(time.Since(start))
		}
	}
	if failures > 0 {
		fmt.Printf("\n[FAIL] %d test(s) failed.\n", failures)
	}
}

func _cast[T any](v any) T {
	if tv, ok := v.(T); ok {
		return tv
	}
	var out T
	switch any(out).(type) {
	case int:
		switch vv := v.(type) {
		case int:
			return any(vv).(T)
		case float64:
			return any(int(vv)).(T)
		case float32:
			return any(int(vv)).(T)
		}
	case float64:
		switch vv := v.(type) {
		case int:
			return any(float64(vv)).(T)
		case float64:
			return any(vv).(T)
		case float32:
			return any(float64(vv)).(T)
		}
	case float32:
		switch vv := v.(type) {
		case int:
			return any(float32(vv)).(T)
		case float64:
			return any(float32(vv)).(T)
		case float32:
			return any(vv).(T)
		}
	}
	if m, ok := v.(map[any]any); ok {
		v = _convertMapAny(m)
	}
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	if err := json.Unmarshal(data, &out); err != nil {
		panic(err)
	}
	return out
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _sliceString(s string, i, j int) string {
	start := i
	end := j
	n := len([]rune(s))
	if start < 0 {
		start += n
	}
	if end < 0 {
		end += n
	}
	if start < 0 {
		start = 0
	}
	if end > n {
		end = n
	}
	if end < start {
		end = start
	}
	return string([]rune(s)[start:end])
}

func _sum(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []float64:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []string, []bool:
			panic("sum() expects numbers")
		default:
			panic("sum() expects list or group")
		}
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("sum() expects numbers")
		}
	}
	return sum
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
