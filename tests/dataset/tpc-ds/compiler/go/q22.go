//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:04:58Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"time"

	"golang.org/x/exp/constraints"
)

type DateDim struct {
	D_date_sk   int `json:"d_date_sk"`
	D_month_seq int `json:"d_month_seq"`
}

type Date_dim struct {
	D_date_sk   int `json:"d_date_sk"`
	D_month_seq int `json:"d_month_seq"`
}

type GKey struct {
	Product_name string `json:"product_name"`
	Brand        string `json:"brand"`
	Class        string `json:"class"`
	Category     string `json:"category"`
}

type Inventory struct {
	Inv_item_sk          int `json:"inv_item_sk"`
	Inv_date_sk          int `json:"inv_date_sk"`
	Inv_quantity_on_hand int `json:"inv_quantity_on_hand"`
}

type Item struct {
	I_item_sk      int    `json:"i_item_sk"`
	I_product_name string `json:"i_product_name"`
	I_brand        string `json:"i_brand"`
	I_class        string `json:"i_class"`
	I_category     string `json:"i_category"`
}

type Qoh struct {
	I_product_name any     `json:"i_product_name"`
	I_brand        any     `json:"i_brand"`
	I_class        any     `json:"i_class"`
	I_category     any     `json:"i_category"`
	Qoh            float64 `json:"qoh"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q22_average_inventory() {
	expect(_equal(qoh, []v{v{
		I_product_name: "Prod1",
		I_brand:        "Brand1",
		I_class:        "Class1",
		I_category:     "Cat1",
		Qoh:            15.0,
	}, v{
		I_product_name: "Prod2",
		I_brand:        "Brand2",
		I_class:        "Class2",
		I_category:     "Cat2",
		Qoh:            50.0,
	}}))
}

var inventory []Inventory
var date_dim []Date_dim
var item []Item
var qoh []Qoh

func main() {
	inventory = []Inventory{
		Inventory{
			Inv_item_sk:          1,
			Inv_date_sk:          1,
			Inv_quantity_on_hand: 10,
		},
		Inventory{
			Inv_item_sk:          1,
			Inv_date_sk:          2,
			Inv_quantity_on_hand: 20,
		},
		Inventory{
			Inv_item_sk:          1,
			Inv_date_sk:          3,
			Inv_quantity_on_hand: 10,
		},
		Inventory{
			Inv_item_sk:          1,
			Inv_date_sk:          4,
			Inv_quantity_on_hand: 20,
		},
		Inventory{
			Inv_item_sk:          2,
			Inv_date_sk:          1,
			Inv_quantity_on_hand: 50,
		},
	}
	date_dim = []Date_dim{
		Date_dim{
			D_date_sk:   1,
			D_month_seq: 0,
		},
		Date_dim{
			D_date_sk:   2,
			D_month_seq: 1,
		},
		Date_dim{
			D_date_sk:   3,
			D_month_seq: 2,
		},
		Date_dim{
			D_date_sk:   4,
			D_month_seq: 3,
		},
	}
	item = []Item{Item{
		I_item_sk:      1,
		I_product_name: "Prod1",
		I_brand:        "Brand1",
		I_class:        "Class1",
		I_category:     "Cat1",
	}, Item{
		I_item_sk:      2,
		I_product_name: "Prod2",
		I_brand:        "Brand2",
		I_class:        "Class2",
		I_category:     "Cat2",
	}}
	qoh = func() []Qoh {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, inv := range inventory {
			for _, d := range date_dim {
				if !(inv.Inv_date_sk == d.D_date_sk) {
					continue
				}
				for _, i := range item {
					if !(inv.Inv_item_sk == i.I_item_sk) {
						continue
					}
					if (d.D_month_seq >= 0) && (d.D_month_seq <= 11) {
						key := GKey{
							Product_name: i.I_product_name,
							Brand:        i.I_brand,
							Class:        i.I_class,
							Category:     i.I_category,
						}
						ks := fmt.Sprint(key)
						g, ok := groups[ks]
						if !ok {
							g = &data.Group{Key: key}
							groups[ks] = g
							order = append(order, ks)
						}
						g.Items = append(g.Items, inv)
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Qoh{}
		for _, g := range items {
			results = append(results, Qoh{
				I_product_name: g.Key.(GKey).Product_name,
				I_brand:        g.Key.(GKey).Brand,
				I_class:        g.Key.(GKey).Class,
				I_category:     g.Key.(GKey).Category,
				Qoh: _avgOrdered[int](func() []int {
					results := []int{}
					for _, xRaw := range g.Items {
						x := xRaw.(Inventory)
						results = append(results, x.Inv_quantity_on_hand)
					}
					return results
				}()),
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(qoh); fmt.Println(string(b)) }()
	test_TPCDS_Q22_average_inventory()
}

func _avgOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	if len(s) == 0 {
		return 0
	}
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum / float64(len(s))
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}
