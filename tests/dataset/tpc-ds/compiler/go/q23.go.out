package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"strings"
	"time"
)

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

type StoreSale struct {
	Ss_item_sk      int     `json:"ss_item_sk"`
	Ss_sold_date_sk int     `json:"ss_sold_date_sk"`
	Ss_customer_sk  int     `json:"ss_customer_sk"`
	Ss_quantity     int     `json:"ss_quantity"`
	Ss_sales_price  float64 `json:"ss_sales_price"`
}

type DateDim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
	D_moy     int `json:"d_moy"`
}

type Item struct {
	I_item_sk int `json:"i_item_sk"`
}

type CatalogSale struct {
	Cs_sold_date_sk     int     `json:"cs_sold_date_sk"`
	Cs_item_sk          int     `json:"cs_item_sk"`
	Cs_bill_customer_sk int     `json:"cs_bill_customer_sk"`
	Cs_quantity         int     `json:"cs_quantity"`
	Cs_list_price       float64 `json:"cs_list_price"`
}

type WebSale struct {
	Ws_sold_date_sk     int     `json:"ws_sold_date_sk"`
	Ws_item_sk          int     `json:"ws_item_sk"`
	Ws_bill_customer_sk int     `json:"ws_bill_customer_sk"`
	Ws_quantity         int     `json:"ws_quantity"`
	Ws_list_price       float64 `json:"ws_list_price"`
}

func test_TPCDS_Q23_cross_channel_sales() {
	expect((result == 50.0))
}

type Store_salesItem struct {
	Ss_item_sk      int     `json:"ss_item_sk"`
	Ss_sold_date_sk int     `json:"ss_sold_date_sk"`
	Ss_customer_sk  int     `json:"ss_customer_sk"`
	Ss_quantity     int     `json:"ss_quantity"`
	Ss_sales_price  float64 `json:"ss_sales_price"`
}

var store_sales []Store_salesItem

type Date_dimItem struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
	D_moy     int `json:"d_moy"`
}

var date_dim []Date_dimItem

type ItemItem struct {
	I_item_sk int `json:"i_item_sk"`
}

var item []ItemItem

type Catalog_salesItem struct {
	Cs_sold_date_sk     int     `json:"cs_sold_date_sk"`
	Cs_item_sk          int     `json:"cs_item_sk"`
	Cs_bill_customer_sk int     `json:"cs_bill_customer_sk"`
	Cs_quantity         int     `json:"cs_quantity"`
	Cs_list_price       float64 `json:"cs_list_price"`
}

var catalog_sales []Catalog_salesItem

type Web_salesItem struct {
	Ws_sold_date_sk     int     `json:"ws_sold_date_sk"`
	Ws_item_sk          int     `json:"ws_item_sk"`
	Ws_bill_customer_sk int     `json:"ws_bill_customer_sk"`
	Ws_quantity         int     `json:"ws_quantity"`
	Ws_list_price       float64 `json:"ws_list_price"`
}

var web_sales []Web_salesItem
var frequent_ss_items []any
var customer_totals []map[string]any
var max_sales any
var best_ss_customer []any
var catalog []any
var web []any
var result float64

func main() {
	failures := 0
	store_sales = _cast[[]Store_salesItem]([]Store_salesItem{
		Store_salesItem{
			Ss_item_sk:      1,
			Ss_sold_date_sk: 1,
			Ss_customer_sk:  1,
			Ss_quantity:     1,
			Ss_sales_price:  10.0,
		},
		Store_salesItem{
			Ss_item_sk:      1,
			Ss_sold_date_sk: 1,
			Ss_customer_sk:  1,
			Ss_quantity:     1,
			Ss_sales_price:  10.0,
		},
		Store_salesItem{
			Ss_item_sk:      1,
			Ss_sold_date_sk: 1,
			Ss_customer_sk:  1,
			Ss_quantity:     1,
			Ss_sales_price:  10.0,
		},
		Store_salesItem{
			Ss_item_sk:      1,
			Ss_sold_date_sk: 1,
			Ss_customer_sk:  1,
			Ss_quantity:     1,
			Ss_sales_price:  10.0,
		},
		Store_salesItem{
			Ss_item_sk:      1,
			Ss_sold_date_sk: 1,
			Ss_customer_sk:  1,
			Ss_quantity:     1,
			Ss_sales_price:  10.0,
		},
		Store_salesItem{
			Ss_item_sk:      2,
			Ss_sold_date_sk: 1,
			Ss_customer_sk:  2,
			Ss_quantity:     1,
			Ss_sales_price:  10.0,
		},
		Store_salesItem{
			Ss_item_sk:      2,
			Ss_sold_date_sk: 1,
			Ss_customer_sk:  2,
			Ss_quantity:     1,
			Ss_sales_price:  10.0,
		},
		Store_salesItem{
			Ss_item_sk:      2,
			Ss_sold_date_sk: 1,
			Ss_customer_sk:  2,
			Ss_quantity:     1,
			Ss_sales_price:  10.0,
		},
	})
	date_dim = _cast[[]Date_dimItem]([]Date_dimItem{Date_dimItem{
		D_date_sk: 1,
		D_year:    2000,
		D_moy:     1,
	}})
	item = _cast[[]ItemItem]([]ItemItem{ItemItem{I_item_sk: 1}, ItemItem{I_item_sk: 2}})
	catalog_sales = _cast[[]Catalog_salesItem]([]Catalog_salesItem{Catalog_salesItem{
		Cs_sold_date_sk:     1,
		Cs_item_sk:          1,
		Cs_bill_customer_sk: 1,
		Cs_quantity:         2,
		Cs_list_price:       10.0,
	}, Catalog_salesItem{
		Cs_sold_date_sk:     1,
		Cs_item_sk:          2,
		Cs_bill_customer_sk: 2,
		Cs_quantity:         2,
		Cs_list_price:       10.0,
	}})
	web_sales = _cast[[]Web_salesItem]([]Web_salesItem{Web_salesItem{
		Ws_sold_date_sk:     1,
		Ws_item_sk:          1,
		Ws_bill_customer_sk: 1,
		Ws_quantity:         3,
		Ws_list_price:       10.0,
	}, Web_salesItem{
		Ws_sold_date_sk:     1,
		Ws_item_sk:          2,
		Ws_bill_customer_sk: 2,
		Ws_quantity:         1,
		Ws_list_price:       10.0,
	}})
	frequent_ss_items = func() []any {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, ss := range store_sales {
			for _, d := range date_dim {
				if !(ss.Ss_sold_date_sk == d.D_date_sk) {
					continue
				}
				for _, i := range item {
					if !(ss.Ss_item_sk == i.I_item_sk) {
						continue
					}
					if d.D_year == 2000 {
						key := map[string]int{"item_sk": i.I_item_sk, "date_sk": d.D_date_sk}
						ks := fmt.Sprint(key)
						g, ok := groups[ks]
						if !ok {
							g = &data.Group{Key: key}
							groups[ks] = g
							order = append(order, ks)
						}
						_item := map[string]any{}
						for k, v := range _cast[map[string]any](ss) {
							_item[k] = v
						}
						_item["ss"] = ss
						for k, v := range _cast[map[string]any](d) {
							_item[k] = v
						}
						_item["d"] = d
						for k, v := range _cast[map[string]any](i) {
							_item[k] = v
						}
						_item["i"] = i
						g.Items = append(g.Items, _item)
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		_res := []any{}
		for _, g := range items {
			_res = append(_res, _cast[map[string]any](g.Key)["item_sk"])
		}
		return _res
	}()
	customer_totals = func() []map[string]any {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, ss := range store_sales {
			key := ss.Ss_customer_sk
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, ss)
		}
		_res := []map[string]any{}
		for _, ks := range order {
			g := groups[ks]
			_res = append(_res, map[string]any{"cust": g.Key, "sales": _sum(func() []any {
				_res := []any{}
				for _, x := range g.Items {
					_res = append(_res, (_cast[float64](_cast[map[string]any](x)["ss_quantity"]) * _cast[float64](_cast[map[string]any](x)["ss_sales_price"])))
				}
				return _res
			}())})
		}
		return _res
	}()
	max_sales = _max(func() []any {
		_res := []any{}
		for _, c := range customer_totals {
			_res = append(_res, c["sales"])
		}
		return _res
	}())
	best_ss_customer = func() []any {
		_res := []any{}
		for _, c := range customer_totals {
			if _cast[float64](c["sales"]) > (_cast[float64](0.95) * _cast[float64](max_sales)) {
				if _cast[float64](c["sales"]) > (_cast[float64](0.95) * _cast[float64](max_sales)) {
					_res = append(_res, c["cust"])
				}
			}
		}
		return _res
	}()
	catalog = func() []any {
		_res := []any{}
		for _, cs := range catalog_sales {
			for _, d := range date_dim {
				if !(cs.Cs_sold_date_sk == d.D_date_sk) {
					continue
				}
				if (((d.D_year == 2000) && (d.D_moy == 1)) && _contains(best_ss_customer, cs.Cs_bill_customer_sk)) && _contains(frequent_ss_items, cs.Cs_item_sk) {
					if (((d.D_year == 2000) && (d.D_moy == 1)) && _contains(best_ss_customer, cs.Cs_bill_customer_sk)) && _contains(frequent_ss_items, cs.Cs_item_sk) {
						_res = append(_res, (float64(cs.Cs_quantity) * cs.Cs_list_price))
					}
				}
			}
		}
		return _res
	}()
	web = func() []any {
		_res := []any{}
		for _, ws := range web_sales {
			for _, d := range date_dim {
				if !(ws.Ws_sold_date_sk == d.D_date_sk) {
					continue
				}
				if (((d.D_year == 2000) && (d.D_moy == 1)) && _contains(best_ss_customer, ws.Ws_bill_customer_sk)) && _contains(frequent_ss_items, ws.Ws_item_sk) {
					if (((d.D_year == 2000) && (d.D_moy == 1)) && _contains(best_ss_customer, ws.Ws_bill_customer_sk)) && _contains(frequent_ss_items, ws.Ws_item_sk) {
						_res = append(_res, (float64(ws.Ws_quantity) * ws.Ws_list_price))
					}
				}
			}
		}
		return _res
	}()
	result = (_sum(catalog) + _sum(web))
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	{
		printTestStart("TPCDS Q23 cross-channel sales")
		start := time.Now()
		var failed error
		func() {
			defer func() {
				if r := recover(); r != nil {
					failed = fmt.Errorf("%v", r)
				}
			}()
			test_TPCDS_Q23_cross_channel_sales()
		}()
		if failed != nil {
			failures++
			printTestFail(failed, time.Since(start))
		} else {
			printTestPass(time.Since(start))
		}
	}
	if failures > 0 {
		fmt.Printf("\n[FAIL] %d test(s) failed.\n", failures)
	}
}

func _cast[T any](v any) T {
	if tv, ok := v.(T); ok {
		return tv
	}
	var out T
	switch any(out).(type) {
	case int:
		switch vv := v.(type) {
		case int:
			return any(vv).(T)
		case float64:
			return any(int(vv)).(T)
		case float32:
			return any(int(vv)).(T)
		}
	case float64:
		switch vv := v.(type) {
		case int:
			return any(float64(vv)).(T)
		case float64:
			return any(vv).(T)
		case float32:
			return any(float64(vv)).(T)
		}
	case float32:
		switch vv := v.(type) {
		case int:
			return any(float32(vv)).(T)
		case float64:
			return any(float32(vv)).(T)
		case float32:
			return any(vv).(T)
		}
	}
	if m, ok := v.(map[any]any); ok {
		v = _convertMapAny(m)
	}
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	if err := json.Unmarshal(data, &out); err != nil {
		panic(err)
	}
	return out
}

func _contains(c any, v any) bool {
	switch s := c.(type) {
	case string:
		return strings.Contains(s, fmt.Sprint(v))
	case map[string]any:
		_, ok := s[fmt.Sprint(v)]
		return ok
	}
	rv := reflect.ValueOf(c)
	if rv.Kind() == reflect.Slice || rv.Kind() == reflect.Array {
		for i := 0; i < rv.Len(); i++ {
			if _equal(rv.Index(i).Interface(), v) {
				return true
			}
		}
		return false
	}
	return false
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _max(v any) any {
	if g, ok := v.(*data.Group); ok {
		v = g.Items
	}
	switch s := v.(type) {
	case []int:
		if len(s) == 0 {
			return 0
		}
		m := s[0]
		for _, n := range s[1:] {
			if n > m {
				m = n
			}
		}
		return m
	case []float64:
		if len(s) == 0 {
			return 0.0
		}
		m := s[0]
		for _, n := range s[1:] {
			if n > m {
				m = n
			}
		}
		return m
	case []any:
		if len(s) == 0 {
			return 0
		}
		var m float64
		var isFloat bool
		switch n := s[0].(type) {
		case int:
			m = float64(n)
		case int64:
			m = float64(n)
		case float64:
			m = n
			isFloat = true
		default:
			panic("max() expects numbers")
		}
		for _, it := range s[1:] {
			switch v := it.(type) {
			case int:
				if float64(v) > m {
					m = float64(v)
				}
			case int64:
				if float64(v) > m {
					m = float64(v)
				}
			case float64:
				if v > m {
					m = v
				}
				isFloat = true
			default:
				panic("max() expects numbers")
			}
		}
		if isFloat {
			return m
		}
		return int(m)
	default:
		rv := reflect.ValueOf(v)
		if rv.Kind() == reflect.Slice {
			if rv.Len() == 0 {
				return 0
			}
			m := rv.Index(0).Interface()
			switch m.(type) {
			case int, int64, float64:
				items := make([]any, rv.Len())
				for i := 0; i < rv.Len(); i++ {
					items[i] = rv.Index(i).Interface()
				}
				return _max(items)
			}
		}
		panic("max() expects list or group")
	}
}

func _sum(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []float64:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []string, []bool:
			panic("sum() expects numbers")
		default:
			panic("sum() expects list or group")
		}
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("sum() expects numbers")
		}
	}
	return sum
}
