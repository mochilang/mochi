//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:05:57Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"time"

	"golang.org/x/exp/constraints"
)

type GKey struct {
	Item int `json:"item"`
}

type Item_revenue struct {
	Item    any     `json:"item"`
	Revenue float64 `json:"revenue"`
}

type Store_sale struct {
	Store int `json:"store"`
	Item  int `json:"item"`
	Price int `json:"price"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

// line 7
var average = func(xs []float64) float64 {
	if len(xs) == 0 {
		return 0.0
	}
	sum := 0.0
	for _, x := range xs {
		sum = (sum + x)
	}
	return (sum / (float64(len(xs))))
}

func test_TPCDS_Q65_simplified() {
	expect((result == 65))
}

var store_sales []Store_sale
var item_revenue []Item_revenue
var avg_rev float64
var low_rev []float64
var result float64

func main() {
	store_sales = []Store_sale{Store_sale{
		Store: 1,
		Item:  1,
		Price: 1,
	}, Store_sale{
		Store: 1,
		Item:  1,
		Price: 1,
	}, Store_sale{
		Store: 1,
		Item:  2,
		Price: 60,
	}}
	item_revenue = func() []Item_revenue {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, ss := range store_sales {
			key := GKey{Item: ss.Item}
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, ss)
		}
		results := []Item_revenue{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, Item_revenue{
				Item: g.Key.(GKey).Item,
				Revenue: _sumOrdered[int](func() []int {
					results := []int{}
					for _, xRaw := range g.Items {
						x := xRaw.(Store_sale)
						results = append(results, x.Price)
					}
					return results
				}()),
			})
		}
		return results
	}()
	avg_rev = average(func() []float64 {
		results := []float64{}
		for _, ir := range item_revenue {
			results = append(results, ir.Revenue)
		}
		return results
	}())
	low_rev = func() []float64 {
		results := []float64{}
		for _, ir := range item_revenue {
			if ir.Revenue <= (0.1 * avg_rev) {
				if ir.Revenue <= (0.1 * avg_rev) {
					results = append(results, ir.Revenue)
				}
			}
		}
		return results
	}()
	result = (_sumOrdered[float64](low_rev) + float64(63))
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q65_simplified()
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
