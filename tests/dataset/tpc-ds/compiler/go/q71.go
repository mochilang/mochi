//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:06:04Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Catalog_sale struct {
	Cs_ext_sales_price float64 `json:"cs_ext_sales_price"`
	Cs_sold_date_sk    int     `json:"cs_sold_date_sk"`
	Cs_item_sk         int     `json:"cs_item_sk"`
	Cs_sold_time_sk    int     `json:"cs_sold_time_sk"`
}

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_moy     int `json:"d_moy"`
	D_year    int `json:"d_year"`
}

type GKey struct {
	Brand_id int    `json:"brand_id"`
	Brand    string `json:"brand"`
	T_hour   int    `json:"t_hour"`
	T_minute int    `json:"t_minute"`
}

type Item struct {
	I_item_sk    int    `json:"i_item_sk"`
	I_brand_id   int    `json:"i_brand_id"`
	I_brand      string `json:"i_brand"`
	I_manager_id int    `json:"i_manager_id"`
}

type Result struct {
	I_brand_id any     `json:"i_brand_id"`
	I_brand    any     `json:"i_brand"`
	T_hour     any     `json:"t_hour"`
	T_minute   any     `json:"t_minute"`
	Ext_price  float64 `json:"ext_price"`
}

type Store_sale struct {
	Ss_ext_sales_price float64 `json:"ss_ext_sales_price"`
	Ss_sold_date_sk    int     `json:"ss_sold_date_sk"`
	Ss_item_sk         int     `json:"ss_item_sk"`
	Ss_sold_time_sk    int     `json:"ss_sold_time_sk"`
}

type Time_dim struct {
	T_time_sk   int    `json:"t_time_sk"`
	T_hour      int    `json:"t_hour"`
	T_minute    int    `json:"t_minute"`
	T_meal_time string `json:"t_meal_time"`
}

type Web_sale struct {
	Ws_ext_sales_price float64 `json:"ws_ext_sales_price"`
	Ws_sold_date_sk    int     `json:"ws_sold_date_sk"`
	Ws_item_sk         int     `json:"ws_item_sk"`
	Ws_sold_time_sk    int     `json:"ws_sold_time_sk"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q71_simplified() {
	expect(_equal(result, []v{v{
		I_brand_id: 10,
		I_brand:    "BrandA",
		T_hour:     18,
		T_minute:   0,
		Ext_price:  200.0,
	}, v{
		I_brand_id: 20,
		I_brand:    "BrandB",
		T_hour:     8,
		T_minute:   30,
		Ext_price:  150.0,
	}, v{
		I_brand_id: 10,
		I_brand:    "BrandA",
		T_hour:     8,
		T_minute:   30,
		Ext_price:  100.0,
	}}))
}

var item []Item
var time_dim []Time_dim
var date_dim []Date_dim
var web_sales []Web_sale
var catalog_sales []Catalog_sale
var store_sales []Store_sale
var month int
var year int
var union_sales []any
var result []Result

func main() {
	item = []Item{Item{
		I_item_sk:    1,
		I_brand_id:   10,
		I_brand:      "BrandA",
		I_manager_id: 1,
	}, Item{
		I_item_sk:    2,
		I_brand_id:   20,
		I_brand:      "BrandB",
		I_manager_id: 1,
	}}
	time_dim = []Time_dim{Time_dim{
		T_time_sk:   1,
		T_hour:      8,
		T_minute:    30,
		T_meal_time: "breakfast",
	}, Time_dim{
		T_time_sk:   2,
		T_hour:      18,
		T_minute:    0,
		T_meal_time: "dinner",
	}, Time_dim{
		T_time_sk:   3,
		T_hour:      12,
		T_minute:    0,
		T_meal_time: "lunch",
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_moy:     12,
		D_year:    1998,
	}}
	web_sales = []Web_sale{Web_sale{
		Ws_ext_sales_price: 100.0,
		Ws_sold_date_sk:    1,
		Ws_item_sk:         1,
		Ws_sold_time_sk:    1,
	}}
	catalog_sales = []Catalog_sale{Catalog_sale{
		Cs_ext_sales_price: 200.0,
		Cs_sold_date_sk:    1,
		Cs_item_sk:         1,
		Cs_sold_time_sk:    2,
	}}
	store_sales = []Store_sale{Store_sale{
		Ss_ext_sales_price: 150.0,
		Ss_sold_date_sk:    1,
		Ss_item_sk:         2,
		Ss_sold_time_sk:    1,
	}}
	month = 12
	year = 1998
	union_sales = append(append(func() []any {
		results := []any{}
		for _, ws := range web_sales {
			for _, d := range date_dim {
				if !(d.D_date_sk == ws.Ws_sold_date_sk) {
					continue
				}
				if (d.D_moy == month) && (d.D_year == year) {
					if (d.D_moy == month) && (d.D_year == year) {
						results = append(results, v{
							Ext_price: ws.Ws_ext_sales_price,
							Item_sk:   ws.Ws_item_sk,
							Time_sk:   ws.Ws_sold_time_sk,
						})
					}
				}
			}
		}
		return results
	}(), func() []v {
		results := []v{}
		for _, cs := range catalog_sales {
			for _, d := range date_dim {
				if !(d.D_date_sk == cs.Cs_sold_date_sk) {
					continue
				}
				if (d.D_moy == month) && (d.D_year == year) {
					if (d.D_moy == month) && (d.D_year == year) {
						results = append(results, v{
							Ext_price: cs.Cs_ext_sales_price,
							Item_sk:   cs.Cs_item_sk,
							Time_sk:   cs.Cs_sold_time_sk,
						})
					}
				}
			}
		}
		return results
	}()...), func() []v {
		results := []v{}
		for _, ss := range store_sales {
			for _, d := range date_dim {
				if !(d.D_date_sk == ss.Ss_sold_date_sk) {
					continue
				}
				if (d.D_moy == month) && (d.D_year == year) {
					if (d.D_moy == month) && (d.D_year == year) {
						results = append(results, v{
							Ext_price: ss.Ss_ext_sales_price,
							Item_sk:   ss.Ss_item_sk,
							Time_sk:   ss.Ss_sold_time_sk,
						})
					}
				}
			}
		}
		return results
	}()...)
	result = func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, i := range item {
			for _, s := range union_sales {
				if !(_equal(_getField(s, "item_sk"), i.I_item_sk)) {
					continue
				}
				for _, t := range time_dim {
					if !(_equal(t.T_time_sk, _getField(s, "time_sk"))) {
						continue
					}
					if (i.I_manager_id == 1) && ((t.T_meal_time == "breakfast") || (t.T_meal_time == "dinner")) {
						key := GKey{
							Brand_id: i.I_brand_id,
							Brand:    i.I_brand,
							T_hour:   t.T_hour,
							T_minute: t.T_minute,
						}
						ks := fmt.Sprint(key)
						g, ok := groups[ks]
						if !ok {
							g = &data.Group{Key: key}
							groups[ks] = g
							order = append(order, ks)
						}
						g.Items = append(g.Items, i)
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		type pair struct {
			item *data.Group
			key  any
		}
		pairs := make([]pair, len(items))
		for idx, it := range items {
			g := it
			pairs[idx] = pair{item: it, key: _toAnySlice([]any{-_sum(func() []any {
				results := []any{}
				for _, xRaw := range g.Items {
					x := xRaw.(Item)
					results = append(results, _getField(x.S, "ext_price"))
				}
				return results
			}()), g.Key.(GKey).Brand_id})}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for idx, p := range pairs {
			items[idx] = p.item
		}
		results := []Result{}
		for _, g := range items {
			results = append(results, Result{
				I_brand_id: g.Key.(GKey).Brand_id,
				I_brand:    g.Key.(GKey).Brand,
				T_hour:     g.Key.(GKey).T_hour,
				T_minute:   g.Key.(GKey).T_minute,
				Ext_price: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Item)
						results = append(results, _getField(x.S, "ext_price"))
					}
					return results
				}()),
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q71_simplified()
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}

func _sum[T constraints.Integer | constraints.Float](v []T) float64 {
	var sum float64
	for _, n := range v {
		sum += float64(n)
	}
	return sum
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
