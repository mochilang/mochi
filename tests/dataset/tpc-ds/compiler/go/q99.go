//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:01:05Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"time"
)

type CallCenter struct {
	Cc_call_center_sk int    `json:"cc_call_center_sk"`
	Cc_name           string `json:"cc_name"`
}

type Call_center struct {
	Cc_call_center_sk int    `json:"cc_call_center_sk"`
	Cc_name           string `json:"cc_name"`
}

type CatalogSale struct {
	Cs_ship_date_sk   int `json:"cs_ship_date_sk"`
	Cs_sold_date_sk   int `json:"cs_sold_date_sk"`
	Cs_warehouse_sk   int `json:"cs_warehouse_sk"`
	Cs_ship_mode_sk   int `json:"cs_ship_mode_sk"`
	Cs_call_center_sk int `json:"cs_call_center_sk"`
}

type Catalog_sale struct {
	Cs_ship_date_sk   int `json:"cs_ship_date_sk"`
	Cs_sold_date_sk   int `json:"cs_sold_date_sk"`
	Cs_warehouse_sk   int `json:"cs_warehouse_sk"`
	Cs_ship_mode_sk   int `json:"cs_ship_mode_sk"`
	Cs_call_center_sk int `json:"cs_call_center_sk"`
}

type GKey struct {
	Warehouse string `json:"warehouse"`
	Sm_type   string `json:"sm_type"`
	Cc_name   string `json:"cc_name"`
}

type Grouped struct {
	Warehouse any `json:"warehouse"`
	Sm_type   any `json:"sm_type"`
	Cc_name   any `json:"cc_name"`
	D30       int `json:"d30"`
	D60       int `json:"d60"`
	D90       int `json:"d90"`
	D120      int `json:"d120"`
	Dmore     int `json:"dmore"`
}

type ShipMode struct {
	Sm_ship_mode_sk int    `json:"sm_ship_mode_sk"`
	Sm_type         string `json:"sm_type"`
}

type Ship_mode struct {
	Sm_ship_mode_sk int    `json:"sm_ship_mode_sk"`
	Sm_type         string `json:"sm_type"`
}

type Warehouse struct {
	W_warehouse_sk   int    `json:"w_warehouse_sk"`
	W_warehouse_name string `json:"w_warehouse_name"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q99_buckets() {
	expect(_equal(grouped, []v{v{
		Warehouse: "Warehouse1",
		Sm_type:   "EXP",
		Cc_name:   "CC1",
		D30:       1,
		D60:       1,
		D90:       1,
		D120:      1,
		Dmore:     1,
	}}))
}

var catalog_sales []Catalog_sale
var warehouse []Warehouse
var ship_mode []Ship_mode
var call_center []Call_center
var grouped []Grouped

func main() {
	catalog_sales = []Catalog_sale{
		Catalog_sale{
			Cs_ship_date_sk:   31,
			Cs_sold_date_sk:   1,
			Cs_warehouse_sk:   1,
			Cs_ship_mode_sk:   1,
			Cs_call_center_sk: 1,
		},
		Catalog_sale{
			Cs_ship_date_sk:   51,
			Cs_sold_date_sk:   1,
			Cs_warehouse_sk:   1,
			Cs_ship_mode_sk:   1,
			Cs_call_center_sk: 1,
		},
		Catalog_sale{
			Cs_ship_date_sk:   71,
			Cs_sold_date_sk:   1,
			Cs_warehouse_sk:   1,
			Cs_ship_mode_sk:   1,
			Cs_call_center_sk: 1,
		},
		Catalog_sale{
			Cs_ship_date_sk:   101,
			Cs_sold_date_sk:   1,
			Cs_warehouse_sk:   1,
			Cs_ship_mode_sk:   1,
			Cs_call_center_sk: 1,
		},
		Catalog_sale{
			Cs_ship_date_sk:   131,
			Cs_sold_date_sk:   1,
			Cs_warehouse_sk:   1,
			Cs_ship_mode_sk:   1,
			Cs_call_center_sk: 1,
		},
	}
	warehouse = []Warehouse{Warehouse{
		W_warehouse_sk:   1,
		W_warehouse_name: "Warehouse1",
	}}
	ship_mode = []Ship_mode{Ship_mode{
		Sm_ship_mode_sk: 1,
		Sm_type:         "EXP",
	}}
	call_center = []Call_center{Call_center{
		Cc_call_center_sk: 1,
		Cc_name:           "CC1",
	}}
	grouped = func() []Grouped {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, cs := range catalog_sales {
			for _, w := range warehouse {
				if !(cs.Cs_warehouse_sk == w.W_warehouse_sk) {
					continue
				}
				for _, sm := range ship_mode {
					if !(cs.Cs_ship_mode_sk == sm.Sm_ship_mode_sk) {
						continue
					}
					for _, cc := range call_center {
						if !(cs.Cs_call_center_sk == cc.Cc_call_center_sk) {
							continue
						}
						key := GKey{
							Warehouse: _sliceString(w.W_warehouse_name, 0, 20),
							Sm_type:   sm.Sm_type,
							Cc_name:   cc.Cc_name,
						}
						ks := fmt.Sprint(key)
						g, ok := groups[ks]
						if !ok {
							g = &data.Group{Key: key}
							groups[ks] = g
							order = append(order, ks)
						}
						_item := map[string]any{}
						_item["cs_ship_date_sk"] = cs.Cs_ship_date_sk
						_item["cs_sold_date_sk"] = cs.Cs_sold_date_sk
						_item["cs_warehouse_sk"] = cs.Cs_warehouse_sk
						_item["cs_ship_mode_sk"] = cs.Cs_ship_mode_sk
						_item["cs_call_center_sk"] = cs.Cs_call_center_sk
						_item["cs"] = cs
						_item["w_warehouse_sk"] = w.W_warehouse_sk
						_item["w_warehouse_name"] = w.W_warehouse_name
						_item["w"] = w
						_item["sm_ship_mode_sk"] = sm.Sm_ship_mode_sk
						_item["sm_type"] = sm.Sm_type
						_item["sm"] = sm
						_item["cc_call_center_sk"] = cc.Cc_call_center_sk
						_item["cc_name"] = cc.Cc_name
						_item["cc"] = cc
						g.Items = append(g.Items, _item)
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Grouped{}
		for _, g := range items {
			results = append(results, Grouped{
				Warehouse: g.Key.(GKey).Warehouse,
				Sm_type:   g.Key.(GKey).Sm_type,
				Cc_name:   g.Key.(GKey).Cc_name,
				D30: len(func() []Catalog_sale {
					results := []Catalog_sale{}
					for _, x := range g.Items {
						if (x.Cs_ship_date_sk - x.Cs_sold_date_sk) <= 30 {
							if (x.Cs_ship_date_sk - x.Cs_sold_date_sk) <= 30 {
								results = append(results, x)
							}
						}
					}
					return results
				}()),
				D60: len(func() []Catalog_sale {
					results := []Catalog_sale{}
					for _, x := range g.Items {
						if ((x.Cs_ship_date_sk - x.Cs_sold_date_sk) > 30) && ((x.Cs_ship_date_sk - x.Cs_sold_date_sk) <= 60) {
							if ((x.Cs_ship_date_sk - x.Cs_sold_date_sk) > 30) && ((x.Cs_ship_date_sk - x.Cs_sold_date_sk) <= 60) {
								results = append(results, x)
							}
						}
					}
					return results
				}()),
				D90: len(func() []Catalog_sale {
					results := []Catalog_sale{}
					for _, x := range g.Items {
						if ((x.Cs_ship_date_sk - x.Cs_sold_date_sk) > 60) && ((x.Cs_ship_date_sk - x.Cs_sold_date_sk) <= 90) {
							if ((x.Cs_ship_date_sk - x.Cs_sold_date_sk) > 60) && ((x.Cs_ship_date_sk - x.Cs_sold_date_sk) <= 90) {
								results = append(results, x)
							}
						}
					}
					return results
				}()),
				D120: len(func() []Catalog_sale {
					results := []Catalog_sale{}
					for _, x := range g.Items {
						if ((x.Cs_ship_date_sk - x.Cs_sold_date_sk) > 90) && ((x.Cs_ship_date_sk - x.Cs_sold_date_sk) <= 120) {
							if ((x.Cs_ship_date_sk - x.Cs_sold_date_sk) > 90) && ((x.Cs_ship_date_sk - x.Cs_sold_date_sk) <= 120) {
								results = append(results, x)
							}
						}
					}
					return results
				}()),
				Dmore: len(func() []Catalog_sale {
					results := []Catalog_sale{}
					for _, x := range g.Items {
						if (x.Cs_ship_date_sk - x.Cs_sold_date_sk) > 120 {
							if (x.Cs_ship_date_sk - x.Cs_sold_date_sk) > 120 {
								results = append(results, x)
							}
						}
					}
					return results
				}()),
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(grouped); fmt.Println(string(b)) }()
	test_TPCDS_Q99_buckets()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _sliceString(s string, i, j int) string {
	start := i
	end := j
	n := len([]rune(s))
	if start < 0 {
		start += n
	}
	if end < 0 {
		end += n
	}
	if start < 0 {
		start = 0
	}
	if end > n {
		end = n
	}
	if end < start {
		end = start
	}
	return string([]rune(s)[start:end])
}
