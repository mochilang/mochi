//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:04:59Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	goffi "mochi/runtime/ffi/go"
	"reflect"
	"sort"
	"time"

	"golang.org/x/exp/constraints"
)

type Customer struct {
	C_customer_sk     int    `json:"c_customer_sk"`
	C_first_name      string `json:"c_first_name"`
	C_last_name       string `json:"c_last_name"`
	C_current_addr_sk int    `json:"c_current_addr_sk"`
	C_birth_country   string `json:"c_birth_country"`
}

type CustomerAddress struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_state      string `json:"ca_state"`
	Ca_country    string `json:"ca_country"`
	Ca_zip        string `json:"ca_zip"`
}

type Customer_addres struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_state      string `json:"ca_state"`
	Ca_country    string `json:"ca_country"`
	Ca_zip        string `json:"ca_zip"`
}

type GKey struct {
	Last       string `json:"last"`
	First      string `json:"first"`
	Store_name string `json:"store_name"`
	Color      string `json:"color"`
}

type Item struct {
	I_item_sk       int     `json:"i_item_sk"`
	I_color         string  `json:"i_color"`
	I_current_price float64 `json:"i_current_price"`
	I_manager_id    int     `json:"i_manager_id"`
	I_units         string  `json:"i_units"`
	I_size          string  `json:"i_size"`
}

type Result struct {
	C_last_name  any     `json:"c_last_name"`
	C_first_name any     `json:"c_first_name"`
	S_store_name any     `json:"s_store_name"`
	Paid         float64 `json:"paid"`
}

type Ssale struct {
	C_last_name  any     `json:"c_last_name"`
	C_first_name any     `json:"c_first_name"`
	S_store_name any     `json:"s_store_name"`
	Color        any     `json:"color"`
	Netpaid      float64 `json:"netpaid"`
}

type Store struct {
	S_store_sk   int    `json:"s_store_sk"`
	S_store_name string `json:"s_store_name"`
	S_market_id  int    `json:"s_market_id"`
	S_state      string `json:"s_state"`
	S_zip        string `json:"s_zip"`
}

type StoreReturn struct {
	Sr_ticket_number int `json:"sr_ticket_number"`
	Sr_item_sk       int `json:"sr_item_sk"`
}

type StoreSale struct {
	Ss_ticket_number int     `json:"ss_ticket_number"`
	Ss_item_sk       int     `json:"ss_item_sk"`
	Ss_customer_sk   int     `json:"ss_customer_sk"`
	Ss_store_sk      int     `json:"ss_store_sk"`
	Ss_net_paid      float64 `json:"ss_net_paid"`
}

type Store_return struct {
	Sr_ticket_number int `json:"sr_ticket_number"`
	Sr_item_sk       int `json:"sr_item_sk"`
}

type Store_sale struct {
	Ss_ticket_number int     `json:"ss_ticket_number"`
	Ss_item_sk       int     `json:"ss_item_sk"`
	Ss_customer_sk   int     `json:"ss_customer_sk"`
	Ss_store_sk      int     `json:"ss_store_sk"`
	Ss_net_paid      float64 `json:"ss_net_paid"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q24_customer_net_paid() {
	expect(_equal(result, []v{v{
		C_last_name:  "Smith",
		C_first_name: "Ann",
		S_store_name: "Store1",
		Paid:         100.0,
	}}))
}

var store_sales []Store_sale
var store_returns []Store_return
var store []Store
var item []Item
var customer []Customer
var customer_address []Customer_addres
var ssales []Ssale
var avg_paid float64
var result []Result

func main() {
	store_sales = []Store_sale{Store_sale{
		Ss_ticket_number: 1,
		Ss_item_sk:       1,
		Ss_customer_sk:   1,
		Ss_store_sk:      1,
		Ss_net_paid:      100.0,
	}, Store_sale{
		Ss_ticket_number: 2,
		Ss_item_sk:       2,
		Ss_customer_sk:   2,
		Ss_store_sk:      1,
		Ss_net_paid:      50.0,
	}}
	store_returns = []Store_return{Store_return{
		Sr_ticket_number: 1,
		Sr_item_sk:       1,
	}, Store_return{
		Sr_ticket_number: 2,
		Sr_item_sk:       2,
	}}
	store = []Store{Store{
		S_store_sk:   1,
		S_store_name: "Store1",
		S_market_id:  5,
		S_state:      "CA",
		S_zip:        "12345",
	}}
	item = []Item{Item{
		I_item_sk:       1,
		I_color:         "RED",
		I_current_price: 10.0,
		I_manager_id:    1,
		I_units:         "EA",
		I_size:          "M",
	}, Item{
		I_item_sk:       2,
		I_color:         "BLUE",
		I_current_price: 20.0,
		I_manager_id:    2,
		I_units:         "EA",
		I_size:          "L",
	}}
	customer = []Customer{Customer{
		C_customer_sk:     1,
		C_first_name:      "Ann",
		C_last_name:       "Smith",
		C_current_addr_sk: 1,
		C_birth_country:   "Canada",
	}, Customer{
		C_customer_sk:     2,
		C_first_name:      "Bob",
		C_last_name:       "Jones",
		C_current_addr_sk: 2,
		C_birth_country:   "USA",
	}}
	customer_address = []Customer_addres{Customer_addres{
		Ca_address_sk: 1,
		Ca_state:      "CA",
		Ca_country:    "USA",
		Ca_zip:        "12345",
	}, Customer_addres{
		Ca_address_sk: 2,
		Ca_state:      "CA",
		Ca_country:    "USA",
		Ca_zip:        "54321",
	}}
	ssales = func() []Ssale {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, ss := range store_sales {
			for _, sr := range store_returns {
				if !((ss.Ss_ticket_number == sr.Sr_ticket_number) && (ss.Ss_item_sk == sr.Sr_item_sk)) {
					continue
				}
				for _, s := range store {
					if !(ss.Ss_store_sk == s.S_store_sk) {
						continue
					}
					for _, i := range item {
						if !(ss.Ss_item_sk == i.I_item_sk) {
							continue
						}
						for _, c := range customer {
							if !(ss.Ss_customer_sk == c.C_customer_sk) {
								continue
							}
							for _, ca := range customer_address {
								if !(c.C_current_addr_sk == ca.Ca_address_sk) {
									continue
								}
								if (!_equal(c.C_birth_country, func() any { v, _ := goffi.Call("strings.ToUpper", ca.Ca_country); return v }()) && (s.S_zip == ca.Ca_zip)) && (s.S_market_id == 5) {
									key := GKey{
										Last:       c.C_last_name,
										First:      c.C_first_name,
										Store_name: s.S_store_name,
										Color:      i.I_color,
									}
									ks := fmt.Sprint(key)
									g, ok := groups[ks]
									if !ok {
										g = &data.Group{Key: key}
										groups[ks] = g
										order = append(order, ks)
									}
									g.Items = append(g.Items, ss)
								}
							}
						}
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Ssale{}
		for _, g := range items {
			results = append(results, Ssale{
				C_last_name:  g.Key.(GKey).Last,
				C_first_name: g.Key.(GKey).First,
				S_store_name: g.Key.(GKey).Store_name,
				Color:        g.Key.(GKey).Color,
				Netpaid: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, xRaw := range g.Items {
						x := xRaw.(Store_sale)
						results = append(results, x.Ss_net_paid)
					}
					return results
				}()),
			})
		}
		return results
	}()
	avg_paid = _avgOrdered[float64](func() []float64 {
		results := []float64{}
		for _, x := range ssales {
			results = append(results, x.Netpaid)
		}
		return results
	}())
	result = func() []Result {
		src := _toAnySlice(ssales)
		resAny := _query(src, []_joinSpec{}, _queryOpts{selectFn: func(_a ...any) any {
			tmp0 := _a[0]
			var x Ssale
			if tmp0 != nil {
				x = tmp0.(Ssale)
			}
			_ = x
			return Result{
				C_last_name:  x.C_last_name,
				C_first_name: x.C_first_name,
				S_store_name: x.S_store_name,
				Paid:         x.Netpaid,
			}
		}, where: func(_a ...any) bool {
			tmp0 := _a[0]
			var x Ssale
			if tmp0 != nil {
				x = tmp0.(Ssale)
			}
			_ = x
			return (_equal(x.Color, "RED") && (x.Netpaid > (0.05 * avg_paid)))
		}, sortKey: func(_a ...any) any {
			tmp0 := _a[0]
			var x Ssale
			if tmp0 != nil {
				x = tmp0.(Ssale)
			}
			_ = x
			return []any{x.C_last_name, x.C_first_name, x.S_store_name}
		}, skip: -1, take: -1})
		out := make([]Result, len(resAny))
		for i, v := range resAny {
			out[i] = v.(Result)
		}
		return out
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q24_customer_net_paid()
}

func _avgOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	if len(s) == 0 {
		return 0
	}
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum / float64(len(s))
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

type _joinSpec struct {
	items    []any
	on       func(...any) bool
	leftKey  func(...any) any
	rightKey func(any) any
	left     bool
	right    bool
}
type _queryOpts struct {
	selectFn func(...any) any
	where    func(...any) bool
	sortKey  func(...any) any
	skip     int
	take     int
}

func _query(src []any, joins []_joinSpec, opts _queryOpts) []any {
	items := make([][]any, len(src))
	for i, v := range src {
		items[i] = []any{v}
	}
	for _, j := range joins {
		if j.leftKey != nil && j.rightKey != nil {
			if j.right && !j.left {
				lmap := map[string][]int{}
				for li, l := range items {
					key := fmt.Sprint(j.leftKey(l...))
					lmap[key] = append(lmap[key], li)
				}
				joined := [][]any{}
				for _, right := range j.items {
					key := fmt.Sprint(j.rightKey(right))
					if is, ok := lmap[key]; ok {
						for _, li := range is {
							left := items[li]
							keep := true
							if j.on != nil {
								args := append(append([]any(nil), left...), right)
								keep = j.on(args...)
							}
							if !keep {
								continue
							}
							joined = append(joined, append(append([]any(nil), left...), right))
						}
					} else {
						undef := make([]any, len(items[0]))
						joined = append(joined, append(undef, right))
					}
				}
				items = joined
				continue
			}
			rmap := map[string][]int{}
			for ri, r := range j.items {
				key := fmt.Sprint(j.rightKey(r))
				rmap[key] = append(rmap[key], ri)
			}
			joined := [][]any{}
			matched := make([]bool, len(j.items))
			for _, left := range items {
				key := fmt.Sprint(j.leftKey(left...))
				if is, ok := rmap[key]; ok {
					m := false
					for _, ri := range is {
						right := j.items[ri]
						keep := true
						if j.on != nil {
							args := append(append([]any(nil), left...), right)
							keep = j.on(args...)
						}
						if !keep {
							continue
						}
						m = true
						matched[ri] = true
						joined = append(joined, append(append([]any(nil), left...), right))
					}
					if j.left && !m {
						joined = append(joined, append(append([]any(nil), left...), nil))
					}
				} else if j.left {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			if j.right {
				lw := 0
				if len(items) > 0 {
					lw = len(items[0])
				}
				for ri, right := range j.items {
					if !matched[ri] {
						undef := make([]any, lw)
						joined = append(joined, append(undef, right))
					}
				}
			}
			items = joined
			continue
		}
		joined := [][]any{}
		if j.right && j.left {
			matched := make([]bool, len(j.items))
			for _, left := range items {
				m := false
				for ri, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					matched[ri] = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			for ri, right := range j.items {
				if !matched[ri] {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else if j.right {
			for _, right := range j.items {
				m := false
				for _, left := range items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else {
			for _, left := range items {
				m := false
				for _, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if j.left && !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
		}
		items = joined
	}
	if opts.where != nil {
		filtered := [][]any{}
		for _, r := range items {
			if opts.where(r...) {
				filtered = append(filtered, r)
			}
		}
		items = filtered
	}
	if opts.sortKey != nil {
		type pair struct {
			item []any
			key  any
		}
		pairs := make([]pair, len(items))
		for i, it := range items {
			pairs[i] = pair{it, opts.sortKey(it...)}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for i, p := range pairs {
			items[i] = p.item
		}
	}
	if opts.skip >= 0 {
		if opts.skip < len(items) {
			items = items[opts.skip:]
		} else {
			items = [][]any{}
		}
	}
	if opts.take >= 0 {
		if opts.take < len(items) {
			items = items[:opts.take]
		}
	}
	res := make([]any, len(items))
	for i, r := range items {
		res[i] = opts.selectFn(r...)
	}
	return res
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
