package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"time"
)

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q73_simplified() {
	expect(_equal(result, []map[string]any{map[string]any{
		"c_last_name":           "Smith",
		"c_first_name":          "Alice",
		"c_salutation":          "Ms.",
		"c_preferred_cust_flag": "Y",
		"ss_ticket_number":      1,
		"cnt":                   1,
	}}))
}

type Store_salesItem struct {
	Ss_ticket_number int `json:"ss_ticket_number"`
	Ss_customer_sk   int `json:"ss_customer_sk"`
	Ss_sold_date_sk  int `json:"ss_sold_date_sk"`
	Ss_store_sk      int `json:"ss_store_sk"`
	Ss_hdemo_sk      int `json:"ss_hdemo_sk"`
}

var store_sales []Store_salesItem

type Date_dimItem struct {
	D_date_sk int `json:"d_date_sk"`
	D_dom     int `json:"d_dom"`
	D_year    int `json:"d_year"`
}

var date_dim []Date_dimItem

type StoreItem struct {
	S_store_sk int    `json:"s_store_sk"`
	S_county   string `json:"s_county"`
}

var store []StoreItem

type Household_demographicsItem struct {
	Hd_demo_sk       int    `json:"hd_demo_sk"`
	Hd_buy_potential string `json:"hd_buy_potential"`
	Hd_vehicle_count int    `json:"hd_vehicle_count"`
	Hd_dep_count     int    `json:"hd_dep_count"`
}

var household_demographics []Household_demographicsItem

type CustomerItem struct {
	C_customer_sk         int    `json:"c_customer_sk"`
	C_last_name           string `json:"c_last_name"`
	C_first_name          string `json:"c_first_name"`
	C_salutation          string `json:"c_salutation"`
	C_preferred_cust_flag string `json:"c_preferred_cust_flag"`
}

var customer []CustomerItem
var groups []map[string]any
var result []map[string]any

func main() {
	failures := 0
	store_sales = _cast[[]Store_salesItem]([]Store_salesItem{Store_salesItem{
		Ss_ticket_number: 1,
		Ss_customer_sk:   1,
		Ss_sold_date_sk:  1,
		Ss_store_sk:      1,
		Ss_hdemo_sk:      1,
	}})
	date_dim = _cast[[]Date_dimItem]([]Date_dimItem{Date_dimItem{
		D_date_sk: 1,
		D_dom:     1,
		D_year:    1998,
	}})
	store = _cast[[]StoreItem]([]StoreItem{StoreItem{
		S_store_sk: 1,
		S_county:   "A",
	}})
	household_demographics = _cast[[]Household_demographicsItem]([]Household_demographicsItem{Household_demographicsItem{
		Hd_demo_sk:       1,
		Hd_buy_potential: "1001-5000",
		Hd_vehicle_count: 2,
		Hd_dep_count:     3,
	}})
	customer = _cast[[]CustomerItem]([]CustomerItem{CustomerItem{
		C_customer_sk:         1,
		C_last_name:           "Smith",
		C_first_name:          "Alice",
		C_salutation:          "Ms.",
		C_preferred_cust_flag: "Y",
	}})
	groups = func() []map[string]any {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, ss := range store_sales {
			for _, d := range date_dim {
				if !(d.D_date_sk == ss.Ss_sold_date_sk) {
					continue
				}
				for _, s := range store {
					if !(s.S_store_sk == ss.Ss_store_sk) {
						continue
					}
					for _, hd := range household_demographics {
						if !(hd.Hd_demo_sk == ss.Ss_hdemo_sk) {
							continue
						}
						if ((((((d.D_dom >= 1) && (d.D_dom <= 2)) && ((hd.Hd_buy_potential == "1001-5000") || (hd.Hd_buy_potential == "0-500"))) && (hd.Hd_vehicle_count > 0)) && ((hd.Hd_dep_count / hd.Hd_vehicle_count) > 1)) && (((d.D_year == 1998) || (d.D_year == 1999)) || (d.D_year == 2000))) && (s.S_county == "A") {
							key := map[string]int{"ticket": ss.Ss_ticket_number, "cust": ss.Ss_customer_sk}
							ks := fmt.Sprint(key)
							g, ok := groups[ks]
							if !ok {
								g = &data.Group{Key: key}
								groups[ks] = g
								order = append(order, ks)
							}
							g.Items = append(g.Items, ss)
						}
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		_res := []map[string]any{}
		for _, g := range items {
			_res = append(_res, map[string]any{"key": g.Key, "cnt": _count(g)})
		}
		return _res
	}()
	result = func() []map[string]any {
		src := _toAnySlice(groups)
		resAny := _query(src, []_joinSpec{
			{items: _toAnySlice(customer), on: func(_a ...any) bool {
				g := _cast[map[string]any](_a[0])
				_ = g
				c := _cast[CustomerItem](_a[1])
				_ = c
				return _equal(c.C_customer_sk, _cast[map[string]any](g["key"])["cust"])
			}},
		}, _queryOpts{selectFn: func(_a ...any) any {
			g := _cast[map[string]any](_a[0])
			_ = g
			c := _cast[CustomerItem](_a[1])
			_ = c
			return map[string]any{
				"c_last_name":           c.C_last_name,
				"c_first_name":          c.C_first_name,
				"c_salutation":          c.C_salutation,
				"c_preferred_cust_flag": c.C_preferred_cust_flag,
				"ss_ticket_number":      _cast[map[string]any](g["key"])["ticket"],
				"cnt":                   g["cnt"],
			}
		}, where: func(_a ...any) bool {
			g := _cast[map[string]any](_a[0])
			_ = g
			c := _cast[CustomerItem](_a[1])
			_ = c
			return ((_cast[int](g["cnt"]) >= 1) && (_cast[int](g["cnt"]) <= 5))
		}, sortKey: func(_a ...any) any {
			g := _cast[map[string]any](_a[0])
			_ = g
			c := _cast[CustomerItem](_a[1])
			_ = c
			return []any{-_cast[float64](g["cnt"]), c.C_last_name}
		}, skip: -1, take: -1})
		out := make([]map[string]any, len(resAny))
		for i, v := range resAny {
			out[i] = _cast[map[string]any](v)
		}
		return out
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	{
		printTestStart("TPCDS Q73 simplified")
		start := time.Now()
		var failed error
		func() {
			defer func() {
				if r := recover(); r != nil {
					failed = fmt.Errorf("%v", r)
				}
			}()
			test_TPCDS_Q73_simplified()
		}()
		if failed != nil {
			failures++
			printTestFail(failed, time.Since(start))
		} else {
			printTestPass(time.Since(start))
		}
	}
	if failures > 0 {
		fmt.Printf("\n[FAIL] %d test(s) failed.\n", failures)
	}
}

func _cast[T any](v any) T {
	if tv, ok := v.(T); ok {
		return tv
	}
	var out T
	switch any(out).(type) {
	case int:
		switch vv := v.(type) {
		case int:
			return any(vv).(T)
		case float64:
			return any(int(vv)).(T)
		case float32:
			return any(int(vv)).(T)
		}
	case float64:
		switch vv := v.(type) {
		case int:
			return any(float64(vv)).(T)
		case float64:
			return any(vv).(T)
		case float32:
			return any(float64(vv)).(T)
		}
	case float32:
		switch vv := v.(type) {
		case int:
			return any(float32(vv)).(T)
		case float64:
			return any(float32(vv)).(T)
		case float32:
			return any(vv).(T)
		}
	}
	if m, ok := v.(map[any]any); ok {
		v = _convertMapAny(m)
	}
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	if err := json.Unmarshal(data, &out); err != nil {
		panic(err)
	}
	return out
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _count(v any) int {
	if g, ok := v.(*data.Group); ok {
		return len(g.Items)
	}
	switch s := v.(type) {
	case []any:
		return len(s)
	case []int:
		return len(s)
	case []float64:
		return len(s)
	case []string:
		return len(s)
	case []bool:
		return len(s)
	case []map[string]any:
		return len(s)
	case map[string]any:
		return len(s)
	case string:
		return len([]rune(s))
	}
	rv := reflect.ValueOf(v)
	if rv.Kind() == reflect.Slice || rv.Kind() == reflect.Array {
		return rv.Len()
	}
	panic("count() expects list or group")
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

type _joinSpec struct {
	items []any
	on    func(...any) bool
	left  bool
	right bool
}
type _queryOpts struct {
	selectFn func(...any) any
	where    func(...any) bool
	sortKey  func(...any) any
	skip     int
	take     int
}

func _query(src []any, joins []_joinSpec, opts _queryOpts) []any {
	items := make([][]any, len(src))
	for i, v := range src {
		items[i] = []any{v}
	}
	for _, j := range joins {
		joined := [][]any{}
		if j.right && j.left {
			matched := make([]bool, len(j.items))
			for _, left := range items {
				m := false
				for ri, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					matched[ri] = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			for ri, right := range j.items {
				if !matched[ri] {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else if j.right {
			for _, right := range j.items {
				m := false
				for _, left := range items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else {
			for _, left := range items {
				m := false
				for _, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if j.left && !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
		}
		items = joined
	}
	if opts.where != nil {
		filtered := [][]any{}
		for _, r := range items {
			if opts.where(r...) {
				filtered = append(filtered, r)
			}
		}
		items = filtered
	}
	if opts.sortKey != nil {
		type pair struct {
			item []any
			key  any
		}
		pairs := make([]pair, len(items))
		for i, it := range items {
			pairs[i] = pair{it, opts.sortKey(it...)}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for i, p := range pairs {
			items[i] = p.item
		}
	}
	if opts.skip >= 0 {
		if opts.skip < len(items) {
			items = items[opts.skip:]
		} else {
			items = [][]any{}
		}
	}
	if opts.take >= 0 {
		if opts.take < len(items) {
			items = items[:opts.take]
		}
	}
	res := make([]any, len(items))
	for i, r := range items {
		res[i] = opts.selectFn(r...)
	}
	return res
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
