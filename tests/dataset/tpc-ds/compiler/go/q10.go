//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:00:48Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"time"
)

type Customer struct {
	C_customer_sk      int `json:"c_customer_sk"`
	C_current_addr_sk  int `json:"c_current_addr_sk"`
	C_current_cdemo_sk int `json:"c_current_cdemo_sk"`
}

type CustomerAddress struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_county     string `json:"ca_county"`
}

type CustomerDemographics struct {
	Cd_demo_sk            int    `json:"cd_demo_sk"`
	Cd_gender             string `json:"cd_gender"`
	Cd_marital_status     string `json:"cd_marital_status"`
	Cd_education_status   string `json:"cd_education_status"`
	Cd_purchase_estimate  int    `json:"cd_purchase_estimate"`
	Cd_credit_rating      string `json:"cd_credit_rating"`
	Cd_dep_count          int    `json:"cd_dep_count"`
	Cd_dep_employed_count int    `json:"cd_dep_employed_count"`
	Cd_dep_college_count  int    `json:"cd_dep_college_count"`
}

type Customer_addres struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_county     string `json:"ca_county"`
}

type Customer_demographic struct {
	Cd_demo_sk            int    `json:"cd_demo_sk"`
	Cd_gender             string `json:"cd_gender"`
	Cd_marital_status     string `json:"cd_marital_status"`
	Cd_education_status   string `json:"cd_education_status"`
	Cd_purchase_estimate  int    `json:"cd_purchase_estimate"`
	Cd_credit_rating      string `json:"cd_credit_rating"`
	Cd_dep_count          int    `json:"cd_dep_count"`
	Cd_dep_employed_count int    `json:"cd_dep_employed_count"`
	Cd_dep_college_count  int    `json:"cd_dep_college_count"`
}

type DateDim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
	D_moy     int `json:"d_moy"`
}

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
	D_moy     int `json:"d_moy"`
}

type GKey struct {
	Gender    string `json:"gender"`
	Marital   string `json:"marital"`
	Education string `json:"education"`
	Purchase  int    `json:"purchase"`
	Credit    string `json:"credit"`
	Dep       int    `json:"dep"`
	Depemp    int    `json:"depemp"`
	Depcol    int    `json:"depcol"`
}

type Result struct {
	Cd_gender             any `json:"cd_gender"`
	Cd_marital_status     any `json:"cd_marital_status"`
	Cd_education_status   any `json:"cd_education_status"`
	Cnt1                  int `json:"cnt1"`
	Cd_purchase_estimate  any `json:"cd_purchase_estimate"`
	Cnt2                  int `json:"cnt2"`
	Cd_credit_rating      any `json:"cd_credit_rating"`
	Cnt3                  int `json:"cnt3"`
	Cd_dep_count          any `json:"cd_dep_count"`
	Cnt4                  int `json:"cnt4"`
	Cd_dep_employed_count any `json:"cd_dep_employed_count"`
	Cnt5                  int `json:"cnt5"`
	Cd_dep_college_count  any `json:"cd_dep_college_count"`
	Cnt6                  int `json:"cnt6"`
}

type StoreSale struct {
	Ss_customer_sk  int `json:"ss_customer_sk"`
	Ss_sold_date_sk int `json:"ss_sold_date_sk"`
}

type Store_sale struct {
	Ss_customer_sk  int `json:"ss_customer_sk"`
	Ss_sold_date_sk int `json:"ss_sold_date_sk"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q10_demographics_count() {
	expect(_equal(result, []v{v{
		Cd_gender:             "F",
		Cd_marital_status:     "M",
		Cd_education_status:   "College",
		Cnt1:                  1,
		Cd_purchase_estimate:  5000,
		Cnt2:                  1,
		Cd_credit_rating:      "Good",
		Cnt3:                  1,
		Cd_dep_count:          1,
		Cnt4:                  1,
		Cd_dep_employed_count: 1,
		Cnt5:                  1,
		Cd_dep_college_count:  0,
		Cnt6:                  1,
	}}))
}

var customer []Customer
var customer_address []Customer_addres
var customer_demographics []Customer_demographic
var store_sales []Store_sale
var web_sales []any
var catalog_sales []any
var date_dim []Date_dim
var active []Customer_demographic
var result []Result

func main() {
	customer = []Customer{Customer{
		C_customer_sk:      1,
		C_current_addr_sk:  1,
		C_current_cdemo_sk: 1,
	}}
	customer_address = []Customer_addres{Customer_addres{
		Ca_address_sk: 1,
		Ca_county:     "CountyA",
	}}
	customer_demographics = []Customer_demographic{Customer_demographic{
		Cd_demo_sk:            1,
		Cd_gender:             "F",
		Cd_marital_status:     "M",
		Cd_education_status:   "College",
		Cd_purchase_estimate:  5000,
		Cd_credit_rating:      "Good",
		Cd_dep_count:          1,
		Cd_dep_employed_count: 1,
		Cd_dep_college_count:  0,
	}}
	store_sales = []Store_sale{Store_sale{
		Ss_customer_sk:  1,
		Ss_sold_date_sk: 1,
	}}
	web_sales = []any{}
	catalog_sales = []any{}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_year:    2000,
		D_moy:     2,
	}}
	active = func() []Customer_demographic {
		results := []Customer_demographic{}
		for _, c := range customer {
			if len(func() []Store_sale {
				results := []Store_sale{}
				for _, ss := range store_sales {
					for _, d := range date_dim {
						if !(ss.Ss_sold_date_sk == d.D_date_sk) {
							continue
						}
						if (((ss.Ss_customer_sk == c.C_customer_sk) && (d.D_year == 2000)) && (d.D_moy >= 2)) && (d.D_moy <= 5) {
							if (((ss.Ss_customer_sk == c.C_customer_sk) && (d.D_year == 2000)) && (d.D_moy >= 2)) && (d.D_moy <= 5) {
								results = append(results, ss)
							}
						}
					}
				}
				return results
			}()) > 0 {
				for _, ca := range customer_address {
					if !((c.C_current_addr_sk == ca.Ca_address_sk) && (ca.Ca_county == "CountyA")) {
						continue
					}
					for _, cd := range customer_demographics {
						if !(c.C_current_cdemo_sk == cd.Cd_demo_sk) {
							continue
						}
						results = append(results, cd)
					}
				}
			}
		}
		return results
	}()
	result = func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, a := range active {
			key := GKey{
				Gender:    a.Cd_gender,
				Marital:   a.Cd_marital_status,
				Education: a.Cd_education_status,
				Purchase:  a.Cd_purchase_estimate,
				Credit:    a.Cd_credit_rating,
				Dep:       a.Cd_dep_count,
				Depemp:    a.Cd_dep_employed_count,
				Depcol:    a.Cd_dep_college_count,
			}
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, a)
		}
		results := []Result{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, Result{
				Cd_gender:           g.Key.(GKey).Gender,
				Cd_marital_status:   g.Key.(GKey).Marital,
				Cd_education_status: g.Key.(GKey).Education,
				Cnt1: len(func() []Customer_demographic {
					results := []Customer_demographic{}
					for _, v := range g.Items {
						results = append(results, v)
					}
					return results
				}()),
				Cd_purchase_estimate: g.Key.(GKey).Purchase,
				Cnt2: len(func() []Customer_demographic {
					results := []Customer_demographic{}
					for _, v := range g.Items {
						results = append(results, v)
					}
					return results
				}()),
				Cd_credit_rating: g.Key.(GKey).Credit,
				Cnt3: len(func() []Customer_demographic {
					results := []Customer_demographic{}
					for _, v := range g.Items {
						results = append(results, v)
					}
					return results
				}()),
				Cd_dep_count: g.Key.(GKey).Dep,
				Cnt4: len(func() []Customer_demographic {
					results := []Customer_demographic{}
					for _, v := range g.Items {
						results = append(results, v)
					}
					return results
				}()),
				Cd_dep_employed_count: g.Key.(GKey).Depemp,
				Cnt5: len(func() []Customer_demographic {
					results := []Customer_demographic{}
					for _, v := range g.Items {
						results = append(results, v)
					}
					return results
				}()),
				Cd_dep_college_count: g.Key.(GKey).Depcol,
				Cnt6: len(func() []Customer_demographic {
					results := []Customer_demographic{}
					for _, v := range g.Items {
						results = append(results, v)
					}
					return results
				}()),
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q10_demographics_count()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}
