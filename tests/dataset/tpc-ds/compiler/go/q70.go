//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:00:59Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Date_dim struct {
	D_date_sk   int `json:"d_date_sk"`
	D_month_seq int `json:"d_month_seq"`
}

type GKey struct {
	State  string `json:"state"`
	County string `json:"county"`
}

type Result struct {
	S_state   any     `json:"s_state"`
	S_county  any     `json:"s_county"`
	Total_sum float64 `json:"total_sum"`
}

type Store struct {
	S_store_sk int    `json:"s_store_sk"`
	S_state    string `json:"s_state"`
	S_county   string `json:"s_county"`
}

type Store_sale struct {
	Ss_sold_date_sk int     `json:"ss_sold_date_sk"`
	Ss_store_sk     int     `json:"ss_store_sk"`
	Ss_net_profit   float64 `json:"ss_net_profit"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q70_simplified() {
	expect(_equal(result, []v{v{
		S_state:   "CA",
		S_county:  "Orange",
		Total_sum: 15.0,
	}, v{
		S_state:   "TX",
		S_county:  "Travis",
		Total_sum: 20.0,
	}}))
}

var store []Store
var date_dim []Date_dim
var store_sales []Store_sale
var dms int
var result []Result

func main() {
	store = []Store{Store{
		S_store_sk: 1,
		S_state:    "CA",
		S_county:   "Orange",
	}, Store{
		S_store_sk: 2,
		S_state:    "CA",
		S_county:   "Orange",
	}, Store{
		S_store_sk: 3,
		S_state:    "TX",
		S_county:   "Travis",
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk:   1,
		D_month_seq: 1200,
	}, Date_dim{
		D_date_sk:   2,
		D_month_seq: 1201,
	}}
	store_sales = []Store_sale{Store_sale{
		Ss_sold_date_sk: 1,
		Ss_store_sk:     1,
		Ss_net_profit:   10.0,
	}, Store_sale{
		Ss_sold_date_sk: 1,
		Ss_store_sk:     2,
		Ss_net_profit:   5.0,
	}, Store_sale{
		Ss_sold_date_sk: 2,
		Ss_store_sk:     3,
		Ss_net_profit:   20.0,
	}}
	dms = 1200
	result = func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, ss := range store_sales {
			for _, d := range date_dim {
				if !(d.D_date_sk == ss.Ss_sold_date_sk) {
					continue
				}
				for _, s := range store {
					if !(s.S_store_sk == ss.Ss_store_sk) {
						continue
					}
					if (d.D_month_seq >= dms) && (d.D_month_seq <= (dms + 11)) {
						key := GKey{
							State:  s.S_state,
							County: s.S_county,
						}
						ks := fmt.Sprint(key)
						g, ok := groups[ks]
						if !ok {
							g = &data.Group{Key: key}
							groups[ks] = g
							order = append(order, ks)
						}
						_item := map[string]any{}
						_item["ss_sold_date_sk"] = ss.Ss_sold_date_sk
						_item["ss_store_sk"] = ss.Ss_store_sk
						_item["ss_net_profit"] = ss.Ss_net_profit
						_item["ss"] = ss
						_item["d_date_sk"] = d.D_date_sk
						_item["d_month_seq"] = d.D_month_seq
						_item["d"] = d
						_item["s_store_sk"] = s.S_store_sk
						_item["s_state"] = s.S_state
						_item["s_county"] = s.S_county
						_item["s"] = s
						g.Items = append(g.Items, _item)
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		type pair struct {
			item *data.Group
			key  any
		}
		pairs := make([]pair, len(items))
		for idx, it := range items {
			g := it
			pairs[idx] = pair{item: it, key: _toAnySlice([]string{g.Key.(GKey).State, g.Key.(GKey).County})}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for idx, p := range pairs {
			items[idx] = p.item
		}
		results := []Result{}
		for _, g := range items {
			results = append(results, Result{
				S_state:  g.Key.(GKey).State,
				S_county: g.Key.(GKey).County,
				Total_sum: _sum(func() []any {
					results := []any{}
					for _, x := range g.Items {
						results = append(results, _getField(x.Ss, "ss_net_profit"))
					}
					return results
				}()),
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q70_simplified()
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}

func _sum[T constraints.Integer | constraints.Float](v []T) float64 {
	var sum float64
	for _, n := range v {
		sum += float64(n)
	}
	return sum
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
