//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:06:18Z

package main

import (
	"encoding/json"
	"fmt"
	"time"

	"golang.org/x/exp/constraints"
)

type Date_dim struct {
	D_date_sk int    `json:"d_date_sk"`
	D_date    string `json:"d_date"`
}

type Item struct {
	I_item_sk     int `json:"i_item_sk"`
	I_manufact_id int `json:"i_manufact_id"`
}

type WebSale struct {
	Ws_item_sk          int     `json:"ws_item_sk"`
	Ws_sold_date_sk     int     `json:"ws_sold_date_sk"`
	Ws_ext_discount_amt float64 `json:"ws_ext_discount_amt"`
}

type Web_sale struct {
	Ws_item_sk          int     `json:"ws_item_sk"`
	Ws_sold_date_sk     int     `json:"ws_sold_date_sk"`
	Ws_ext_discount_amt float64 `json:"ws_ext_discount_amt"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q92_threshold() {
	expect((result == 4.0))
}

var web_sales []Web_sale
var item []Item
var date_dim []Date_dim
var sum_amt float64
var avg_amt float64
var result float64

func main() {
	web_sales = []Web_sale{Web_sale{
		Ws_item_sk:          1,
		Ws_sold_date_sk:     1,
		Ws_ext_discount_amt: 1.0,
	}, Web_sale{
		Ws_item_sk:          1,
		Ws_sold_date_sk:     1,
		Ws_ext_discount_amt: 1.0,
	}, Web_sale{
		Ws_item_sk:          1,
		Ws_sold_date_sk:     1,
		Ws_ext_discount_amt: 2.0,
	}}
	item = []Item{Item{
		I_item_sk:     1,
		I_manufact_id: 1,
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_date:    "2000-01-02",
	}}
	sum_amt = _sumOrdered[float64](func() []float64 {
		results := []float64{}
		for _, ws := range web_sales {
			results = append(results, ws.Ws_ext_discount_amt)
		}
		return results
	}())
	avg_amt = _avgOrdered[float64](func() []float64 {
		results := []float64{}
		for _, ws := range web_sales {
			results = append(results, ws.Ws_ext_discount_amt)
		}
		return results
	}())
	result = func() float64 {
		if sum_amt > (avg_amt * 1.3) {
			return sum_amt
		} else {
			return 0.0
		}
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q92_threshold()
}

func _avgOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	if len(s) == 0 {
		return 0
	}
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum / float64(len(s))
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
