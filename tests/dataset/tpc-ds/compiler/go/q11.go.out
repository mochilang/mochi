package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"time"
)

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

type Customer struct {
	C_customer_sk int    `json:"c_customer_sk"`
	C_customer_id string `json:"c_customer_id"`
	C_first_name  string `json:"c_first_name"`
	C_last_name   string `json:"c_last_name"`
}

type StoreSale struct {
	Ss_customer_sk    int     `json:"ss_customer_sk"`
	Ss_sold_date_sk   int     `json:"ss_sold_date_sk"`
	Ss_ext_list_price float64 `json:"ss_ext_list_price"`
}

type WebSale struct {
	Ws_bill_customer_sk int     `json:"ws_bill_customer_sk"`
	Ws_sold_date_sk     int     `json:"ws_sold_date_sk"`
	Ws_ext_list_price   float64 `json:"ws_ext_list_price"`
}

func test_TPCDS_Q11_growth() {
	expect(_equal(result, []map[string]string{map[string]string{
		"customer_id":         "C1",
		"customer_first_name": "John",
		"customer_last_name":  "Doe",
	}}))
}

type CustomerItem struct {
	C_customer_sk int    `json:"c_customer_sk"`
	C_customer_id string `json:"c_customer_id"`
	C_first_name  string `json:"c_first_name"`
	C_last_name   string `json:"c_last_name"`
}

var customer []CustomerItem

type Store_salesItem struct {
	Ss_customer_sk    int     `json:"ss_customer_sk"`
	Ss_sold_date_sk   int     `json:"ss_sold_date_sk"`
	Ss_ext_list_price float64 `json:"ss_ext_list_price"`
}

var store_sales []Store_salesItem

type Web_salesItem struct {
	Ws_bill_customer_sk int     `json:"ws_bill_customer_sk"`
	Ws_sold_date_sk     int     `json:"ws_sold_date_sk"`
	Ws_ext_list_price   float64 `json:"ws_ext_list_price"`
}

var web_sales []Web_salesItem
var ss98 float64
var ss99 float64
var ws98 float64
var ws99 float64
var growth_ok bool
var result any

func main() {
	failures := 0
	customer = _cast[[]CustomerItem]([]CustomerItem{CustomerItem{
		C_customer_sk: 1,
		C_customer_id: "C1",
		C_first_name:  "John",
		C_last_name:   "Doe",
	}})
	store_sales = _cast[[]Store_salesItem]([]Store_salesItem{Store_salesItem{
		Ss_customer_sk:    1,
		Ss_sold_date_sk:   1998,
		Ss_ext_list_price: 60.0,
	}, Store_salesItem{
		Ss_customer_sk:    1,
		Ss_sold_date_sk:   1999,
		Ss_ext_list_price: 90.0,
	}})
	web_sales = _cast[[]Web_salesItem]([]Web_salesItem{Web_salesItem{
		Ws_bill_customer_sk: 1,
		Ws_sold_date_sk:     1998,
		Ws_ext_list_price:   50.0,
	}, Web_salesItem{
		Ws_bill_customer_sk: 1,
		Ws_sold_date_sk:     1999,
		Ws_ext_list_price:   150.0,
	}})
	ss98 = _sum(func() []float64 {
		_res := []float64{}
		for _, ss := range store_sales {
			if ss.Ss_sold_date_sk == 1998 {
				if ss.Ss_sold_date_sk == 1998 {
					_res = append(_res, ss.Ss_ext_list_price)
				}
			}
		}
		return _res
	}())
	ss99 = _sum(func() []float64 {
		_res := []float64{}
		for _, ss := range store_sales {
			if ss.Ss_sold_date_sk == 1999 {
				if ss.Ss_sold_date_sk == 1999 {
					_res = append(_res, ss.Ss_ext_list_price)
				}
			}
		}
		return _res
	}())
	ws98 = _sum(func() []float64 {
		_res := []float64{}
		for _, ws := range web_sales {
			if ws.Ws_sold_date_sk == 1998 {
				if ws.Ws_sold_date_sk == 1998 {
					_res = append(_res, ws.Ws_ext_list_price)
				}
			}
		}
		return _res
	}())
	ws99 = _sum(func() []float64 {
		_res := []float64{}
		for _, ws := range web_sales {
			if ws.Ws_sold_date_sk == 1999 {
				if ws.Ws_sold_date_sk == 1999 {
					_res = append(_res, ws.Ws_ext_list_price)
				}
			}
		}
		return _res
	}())
	growth_ok = (((ws98 > 0) && (ss98 > 0)) && ((ws99 / ws98) > (ss99 / ss98)))
	result = func() any {
		if growth_ok {
			return []map[string]string{map[string]string{
				"customer_id":         "C1",
				"customer_first_name": "John",
				"customer_last_name":  "Doe",
			}}
		} else {
			return []any{}
		}
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	{
		printTestStart("TPCDS Q11 growth")
		start := time.Now()
		var failed error
		func() {
			defer func() {
				if r := recover(); r != nil {
					failed = fmt.Errorf("%v", r)
				}
			}()
			test_TPCDS_Q11_growth()
		}()
		if failed != nil {
			failures++
			printTestFail(failed, time.Since(start))
		} else {
			printTestPass(time.Since(start))
		}
	}
	if failures > 0 {
		fmt.Printf("\n[FAIL] %d test(s) failed.\n", failures)
	}
}

func _cast[T any](v any) T {
	if tv, ok := v.(T); ok {
		return tv
	}
	var out T
	switch any(out).(type) {
	case int:
		switch vv := v.(type) {
		case int:
			return any(vv).(T)
		case float64:
			return any(int(vv)).(T)
		case float32:
			return any(int(vv)).(T)
		}
	case float64:
		switch vv := v.(type) {
		case int:
			return any(float64(vv)).(T)
		case float64:
			return any(vv).(T)
		case float32:
			return any(float64(vv)).(T)
		}
	case float32:
		switch vv := v.(type) {
		case int:
			return any(float32(vv)).(T)
		case float64:
			return any(float32(vv)).(T)
		case float32:
			return any(vv).(T)
		}
	}
	if m, ok := v.(map[any]any); ok {
		v = _convertMapAny(m)
	}
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	if err := json.Unmarshal(data, &out); err != nil {
		panic(err)
	}
	return out
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _sum(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []float64:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []string, []bool:
			panic("sum() expects numbers")
		default:
			panic("sum() expects list or group")
		}
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("sum() expects numbers")
		}
	}
	return sum
}
