//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:01:03Z

package main

import (
	"encoding/json"
	"fmt"
	"time"
)

type Household_demographic struct {
	Hd_demo_sk   int `json:"hd_demo_sk"`
	Hd_dep_count int `json:"hd_dep_count"`
}

type Time_dim struct {
	T_time_sk int `json:"t_time_sk"`
	T_hour    int `json:"t_hour"`
}

type WebSale struct {
	Ws_sold_time_sk  int `json:"ws_sold_time_sk"`
	Ws_ship_hdemo_sk int `json:"ws_ship_hdemo_sk"`
	Ws_web_page_sk   int `json:"ws_web_page_sk"`
}

type Web_page struct {
	Wp_web_page_sk int `json:"wp_web_page_sk"`
	Wp_char_count  int `json:"wp_char_count"`
}

type Web_sale struct {
	Ws_sold_time_sk  int `json:"ws_sold_time_sk"`
	Ws_ship_hdemo_sk int `json:"ws_ship_hdemo_sk"`
	Ws_web_page_sk   int `json:"ws_web_page_sk"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q90_ratio() {
	expect((result == 2.0))
}

var web_sales []Web_sale
var household_demographics []Household_demographic
var time_dim []Time_dim
var web_page []Web_page
var amc int
var pmc int
var result float64

func main() {
	web_sales = []Web_sale{Web_sale{
		Ws_sold_time_sk:  1,
		Ws_ship_hdemo_sk: 1,
		Ws_web_page_sk:   10,
	}, Web_sale{
		Ws_sold_time_sk:  1,
		Ws_ship_hdemo_sk: 1,
		Ws_web_page_sk:   10,
	}, Web_sale{
		Ws_sold_time_sk:  2,
		Ws_ship_hdemo_sk: 1,
		Ws_web_page_sk:   10,
	}}
	household_demographics = []Household_demographic{Household_demographic{
		Hd_demo_sk:   1,
		Hd_dep_count: 2,
	}}
	time_dim = []Time_dim{Time_dim{
		T_time_sk: 1,
		T_hour:    7,
	}, Time_dim{
		T_time_sk: 2,
		T_hour:    14,
	}}
	web_page = []Web_page{Web_page{
		Wp_web_page_sk: 10,
		Wp_char_count:  5100,
	}}
	amc = len(func() []Web_sale {
		results := []Web_sale{}
		for _, ws := range web_sales {
			for _, hd := range household_demographics {
				if !(ws.Ws_ship_hdemo_sk == hd.Hd_demo_sk) {
					continue
				}
				for _, t := range time_dim {
					if !(ws.Ws_sold_time_sk == t.T_time_sk) {
						continue
					}
					for _, wp := range web_page {
						if !(ws.Ws_web_page_sk == wp.Wp_web_page_sk) {
							continue
						}
						if ((((t.T_hour >= 7) && (t.T_hour <= 8)) && (hd.Hd_dep_count == 2)) && (wp.Wp_char_count >= 5000)) && (wp.Wp_char_count <= 5200) {
							if ((((t.T_hour >= 7) && (t.T_hour <= 8)) && (hd.Hd_dep_count == 2)) && (wp.Wp_char_count >= 5000)) && (wp.Wp_char_count <= 5200) {
								results = append(results, ws)
							}
						}
					}
				}
			}
		}
		return results
	}())
	pmc = len(func() []Web_sale {
		results := []Web_sale{}
		for _, ws := range web_sales {
			for _, hd := range household_demographics {
				if !(ws.Ws_ship_hdemo_sk == hd.Hd_demo_sk) {
					continue
				}
				for _, t := range time_dim {
					if !(ws.Ws_sold_time_sk == t.T_time_sk) {
						continue
					}
					for _, wp := range web_page {
						if !(ws.Ws_web_page_sk == wp.Wp_web_page_sk) {
							continue
						}
						if ((((t.T_hour >= 14) && (t.T_hour <= 15)) && (hd.Hd_dep_count == 2)) && (wp.Wp_char_count >= 5000)) && (wp.Wp_char_count <= 5200) {
							if ((((t.T_hour >= 14) && (t.T_hour <= 15)) && (hd.Hd_dep_count == 2)) && (wp.Wp_char_count >= 5000)) && (wp.Wp_char_count <= 5200) {
								results = append(results, ws)
							}
						}
					}
				}
			}
		}
		return results
	}())
	result = ((float64(amc)) / (float64(pmc)))
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q90_ratio()
}
