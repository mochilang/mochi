package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"strings"
	"time"
)

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

type CatalogSale struct {
	Cs_order_number   int     `json:"cs_order_number"`
	Cs_ship_date_sk   int     `json:"cs_ship_date_sk"`
	Cs_ship_addr_sk   int     `json:"cs_ship_addr_sk"`
	Cs_call_center_sk int     `json:"cs_call_center_sk"`
	Cs_warehouse_sk   int     `json:"cs_warehouse_sk"`
	Cs_ext_ship_cost  float64 `json:"cs_ext_ship_cost"`
	Cs_net_profit     float64 `json:"cs_net_profit"`
}

type DateDim struct {
	D_date_sk int    `json:"d_date_sk"`
	D_date    string `json:"d_date"`
}

type CustomerAddress struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_state      string `json:"ca_state"`
}

type CallCenter struct {
	Cc_call_center_sk int    `json:"cc_call_center_sk"`
	Cc_county         string `json:"cc_county"`
}

type CatalogReturn struct {
	Cr_order_number int `json:"cr_order_number"`
}

var distinct = func(xs []any) []any {
	var out []any = []any{}
	for _, x := range xs {
		if !_contains(out, x) {
			out = append(out, x)
		}
	}
	return out
}

func test_TPCDS_Q16_shipping() {
	expect(_equal(filtered, []map[string]any{map[string]any{
		"order_count":         1,
		"total_shipping_cost": 5.0,
		"total_net_profit":    20.0,
	}}))
}

type Catalog_salesItem struct {
	Cs_order_number   int     `json:"cs_order_number"`
	Cs_ship_date_sk   int     `json:"cs_ship_date_sk"`
	Cs_ship_addr_sk   int     `json:"cs_ship_addr_sk"`
	Cs_call_center_sk int     `json:"cs_call_center_sk"`
	Cs_warehouse_sk   int     `json:"cs_warehouse_sk"`
	Cs_ext_ship_cost  float64 `json:"cs_ext_ship_cost"`
	Cs_net_profit     float64 `json:"cs_net_profit"`
}

var catalog_sales []Catalog_salesItem

type Date_dimItem struct {
	D_date_sk int    `json:"d_date_sk"`
	D_date    string `json:"d_date"`
}

var date_dim []Date_dimItem

type Customer_addressItem struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_state      string `json:"ca_state"`
}

var customer_address []Customer_addressItem

type Call_centerItem struct {
	Cc_call_center_sk int    `json:"cc_call_center_sk"`
	Cc_county         string `json:"cc_county"`
}

var call_center []Call_centerItem
var catalog_returns []any
var filtered []map[string]any

func main() {
	failures := 0
	catalog_sales = _cast[[]Catalog_salesItem]([]Catalog_salesItem{Catalog_salesItem{
		Cs_order_number:   1,
		Cs_ship_date_sk:   1,
		Cs_ship_addr_sk:   1,
		Cs_call_center_sk: 1,
		Cs_warehouse_sk:   1,
		Cs_ext_ship_cost:  5.0,
		Cs_net_profit:     20.0,
	}, Catalog_salesItem{
		Cs_order_number:   1,
		Cs_ship_date_sk:   1,
		Cs_ship_addr_sk:   1,
		Cs_call_center_sk: 1,
		Cs_warehouse_sk:   2,
		Cs_ext_ship_cost:  0.0,
		Cs_net_profit:     0.0,
	}})
	date_dim = _cast[[]Date_dimItem]([]Date_dimItem{Date_dimItem{
		D_date_sk: 1,
		D_date:    "2000-03-01",
	}})
	customer_address = _cast[[]Customer_addressItem]([]Customer_addressItem{Customer_addressItem{
		Ca_address_sk: 1,
		Ca_state:      "CA",
	}})
	call_center = _cast[[]Call_centerItem]([]Call_centerItem{Call_centerItem{
		Cc_call_center_sk: 1,
		Cc_county:         "CountyA",
	}})
	catalog_returns = []any{}
	filtered = func() []map[string]any {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, cs1 := range catalog_sales {
			for _, d := range date_dim {
				if !(((cs1.Cs_ship_date_sk == d.D_date_sk) && (d.D_date >= "2000-03-01")) && (d.D_date <= "2000-04-30")) {
					continue
				}
				for _, ca := range customer_address {
					if !((cs1.Cs_ship_addr_sk == ca.Ca_address_sk) && (ca.Ca_state == "CA")) {
						continue
					}
					for _, cc := range call_center {
						if !((cs1.Cs_call_center_sk == cc.Cc_call_center_sk) && (cc.Cc_county == "CountyA")) {
							continue
						}
						if _exists(func() []Catalog_salesItem {
							_res := []Catalog_salesItem{}
							for _, cs2 := range catalog_sales {
								if (cs1.Cs_order_number == cs2.Cs_order_number) && (cs1.Cs_warehouse_sk != cs2.Cs_warehouse_sk) {
									if (cs1.Cs_order_number == cs2.Cs_order_number) && (cs1.Cs_warehouse_sk != cs2.Cs_warehouse_sk) {
										_res = append(_res, cs2)
									}
								}
							}
							return _res
						}()) && (_exists(func() []any {
							_res := []any{}
							for _, cr := range catalog_returns {
								if _equal(cs1.Cs_order_number, _cast[map[string]any](cr)["cr_order_number"]) {
									if _equal(cs1.Cs_order_number, _cast[map[string]any](cr)["cr_order_number"]) {
										_res = append(_res, cr)
									}
								}
							}
							return _res
						}()) == false) {
							key := map[any]any{}
							ks := fmt.Sprint(key)
							g, ok := groups[ks]
							if !ok {
								g = &data.Group{Key: key}
								groups[ks] = g
								order = append(order, ks)
							}
							_item := map[string]any{}
							for k, v := range _cast[map[string]any](cs1) {
								_item[k] = v
							}
							_item["cs1"] = cs1
							for k, v := range _cast[map[string]any](d) {
								_item[k] = v
							}
							_item["d"] = d
							for k, v := range _cast[map[string]any](ca) {
								_item[k] = v
							}
							_item["ca"] = ca
							for k, v := range _cast[map[string]any](cc) {
								_item[k] = v
							}
							_item["cc"] = cc
							g.Items = append(g.Items, _item)
						}
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		_res := []map[string]any{}
		for _, g := range items {
			_res = append(_res, map[string]any{
				"order_count": len(distinct(func() []any {
					_res := []any{}
					for _, x := range g.Items {
						_res = append(_res, _cast[map[string]any](x)["cs_order_number"])
					}
					return _res
				}())),
				"total_shipping_cost": _sum(func() []any {
					_res := []any{}
					for _, x := range g.Items {
						_res = append(_res, _cast[map[string]any](x)["cs_ext_ship_cost"])
					}
					return _res
				}()),
				"total_net_profit": _sum(func() []any {
					_res := []any{}
					for _, x := range g.Items {
						_res = append(_res, _cast[map[string]any](x)["cs_net_profit"])
					}
					return _res
				}()),
			})
		}
		return _res
	}()
	func() { b, _ := json.Marshal(filtered); fmt.Println(string(b)) }()
	{
		printTestStart("TPCDS Q16 shipping")
		start := time.Now()
		var failed error
		func() {
			defer func() {
				if r := recover(); r != nil {
					failed = fmt.Errorf("%v", r)
				}
			}()
			test_TPCDS_Q16_shipping()
		}()
		if failed != nil {
			failures++
			printTestFail(failed, time.Since(start))
		} else {
			printTestPass(time.Since(start))
		}
	}
	if failures > 0 {
		fmt.Printf("\n[FAIL] %d test(s) failed.\n", failures)
	}
}

func _cast[T any](v any) T {
	if tv, ok := v.(T); ok {
		return tv
	}
	var out T
	switch any(out).(type) {
	case int:
		switch vv := v.(type) {
		case int:
			return any(vv).(T)
		case float64:
			return any(int(vv)).(T)
		case float32:
			return any(int(vv)).(T)
		}
	case float64:
		switch vv := v.(type) {
		case int:
			return any(float64(vv)).(T)
		case float64:
			return any(vv).(T)
		case float32:
			return any(float64(vv)).(T)
		}
	case float32:
		switch vv := v.(type) {
		case int:
			return any(float32(vv)).(T)
		case float64:
			return any(float32(vv)).(T)
		case float32:
			return any(vv).(T)
		}
	}
	if m, ok := v.(map[any]any); ok {
		v = _convertMapAny(m)
	}
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	if err := json.Unmarshal(data, &out); err != nil {
		panic(err)
	}
	return out
}

func _contains(c any, v any) bool {
	switch s := c.(type) {
	case string:
		return strings.Contains(s, fmt.Sprint(v))
	case map[string]any:
		_, ok := s[fmt.Sprint(v)]
		return ok
	}
	rv := reflect.ValueOf(c)
	if rv.Kind() == reflect.Slice || rv.Kind() == reflect.Array {
		for i := 0; i < rv.Len(); i++ {
			if _equal(rv.Index(i).Interface(), v) {
				return true
			}
		}
		return false
	}
	return false
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _exists(v any) bool {
	if g, ok := v.(*data.Group); ok {
		return len(g.Items) > 0
	}
	switch s := v.(type) {
	case []any:
		return len(s) > 0
	case []int:
		return len(s) > 0
	case []float64:
		return len(s) > 0
	case []string:
		return len(s) > 0
	case []bool:
		return len(s) > 0
	case []map[string]any:
		return len(s) > 0
	case map[string]any:
		return len(s) > 0
	case string:
		return len([]rune(s)) > 0
	}
	rv := reflect.ValueOf(v)
	if rv.Kind() == reflect.Slice || rv.Kind() == reflect.Array {
		return rv.Len() > 0
	}
	return false
}

func _sum(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []float64:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []string, []bool:
			panic("sum() expects numbers")
		default:
			panic("sum() expects list or group")
		}
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("sum() expects numbers")
		}
	}
	return sum
}
