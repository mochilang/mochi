//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:01:01Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"time"

	"golang.org/x/exp/constraints"
)

type Avg_list struct {
	State   any     `json:"state"`
	Avg_amt float64 `json:"avg_amt"`
}

type Catalog_return struct {
	Cust  int     `json:"cust"`
	State string  `json:"state"`
	Amt   float64 `json:"amt"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q81_sample() {
	expect(_equal(result, 81.0))
}

var catalog_returns []Catalog_return
var avg_list []Avg_list
var avg_state Avg_list
var result_list []float64
var result float64

func main() {
	catalog_returns = []Catalog_return{
		Catalog_return{
			Cust:  1,
			State: "CA",
			Amt:   40.0,
		},
		Catalog_return{
			Cust:  2,
			State: "CA",
			Amt:   50.0,
		},
		Catalog_return{
			Cust:  3,
			State: "CA",
			Amt:   81.0,
		},
		Catalog_return{
			Cust:  4,
			State: "TX",
			Amt:   30.0,
		},
		Catalog_return{
			Cust:  5,
			State: "TX",
			Amt:   20.0,
		},
	}
	avg_list = _convSlice[v, Avg_list](func() []Avg_list {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, r := range catalog_returns {
			key := r.State
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, r)
		}
		results := []Avg_list{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, Avg_list{
				State: g.Key.(any),
				Avg_amt: _avgOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, x.Amt)
					}
					return results
				}()),
			})
		}
		return results
	}())
	avg_state = _firstSlice[Avg_list](func() []any {
		results := []any{}
		for _, a := range avg_list {
			if a.State == "CA" {
				if a.State == "CA" {
					results = append(results, a)
				}
			}
		}
		return results
	}())
	result_list = func() []float64 {
		results := []float64{}
		for _, r := range catalog_returns {
			if (r.State == "CA") && (r.Amt > (avg_state.Avg_amt * 1.2)) {
				if (r.State == "CA") && (r.Amt > (avg_state.Avg_amt * 1.2)) {
					results = append(results, r.Amt)
				}
			}
		}
		return results
	}()
	result = _firstSlice[float64](result_list)
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q81_sample()
}

func _avgOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	if len(s) == 0 {
		return 0
	}
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum / float64(len(s))
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _firstSlice[T any](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	return s[0]
}
