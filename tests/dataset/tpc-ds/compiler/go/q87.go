//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:06:16Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Catalog_sale struct {
	Cust string `json:"cust"`
}

type Store_sale struct {
	Cust  string  `json:"cust"`
	Price float64 `json:"price"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q87_sample() {
	expect((result == 87.0))
}

var store_sales []Store_sale
var catalog_sales []Catalog_sale
var web_sales []any
var store_customers []string
var catalog_customers []string
var web_customers []any
var store_only []string
var result float64

func main() {
	store_sales = []Store_sale{Store_sale{
		Cust:  "A",
		Price: 5.0,
	}, Store_sale{
		Cust:  "B",
		Price: 30.0,
	}, Store_sale{
		Cust:  "C",
		Price: 57.0,
	}}
	catalog_sales = []Catalog_sale{Catalog_sale{Cust: "A"}}
	web_sales = []any{}
	store_customers = func() []string {
		results := []string{}
		for _, s := range store_sales {
			results = append(results, s.Cust)
		}
		return results
	}()
	catalog_customers = func() []string {
		results := []string{}
		for _, s := range catalog_sales {
			results = append(results, s.Cust)
		}
		return results
	}()
	web_customers = func() []any {
		results := []any{}
		for _, s := range web_sales {
			results = append(results, _getField(s, "cust"))
		}
		return results
	}()
	store_only = func() []string {
		results := []string{}
		for _, c := range store_customers {
			if (len(func() []string {
				results := []string{}
				for _, x := range catalog_customers {
					if x == c {
						if x == c {
							results = append(results, x)
						}
					}
				}
				return results
			}()) == 0) && (len(func() []any {
				results := []any{}
				for _, x := range web_customers {
					if _equal(x, c) {
						if _equal(x, c) {
							results = append(results, x)
						}
					}
				}
				return results
			}()) == 0) {
				if (len(func() []string {
					results := []string{}
					for _, x := range catalog_customers {
						if x == c {
							if x == c {
								results = append(results, x)
							}
						}
					}
					return results
				}()) == 0) && (len(func() []any {
					results := []any{}
					for _, x := range web_customers {
						if _equal(x, c) {
							if _equal(x, c) {
								results = append(results, x)
							}
						}
					}
					return results
				}()) == 0) {
					results = append(results, c)
				}
			}
		}
		return results
	}()
	result = _sumOrdered[float64](func() []float64 {
		results := []float64{}
		for _, s := range store_sales {
			if len(func() []string {
				results := []string{}
				for _, x := range store_only {
					if x == s.Cust {
						if x == s.Cust {
							results = append(results, x)
						}
					}
				}
				return results
			}()) > 0 {
				if len(func() []string {
					results := []string{}
					for _, x := range store_only {
						if x == s.Cust {
							if x == s.Cust {
								results = append(results, x)
							}
						}
					}
					return results
				}()) > 0 {
					results = append(results, s.Price)
				}
			}
		}
		return results
	}())
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q87_sample()
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
