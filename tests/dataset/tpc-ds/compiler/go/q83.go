//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:01:02Z

package main

import (
	"encoding/json"
	"fmt"
	"time"

	"golang.org/x/exp/constraints"
)

type Cr_item struct {
	Qty int `json:"qty"`
}

type Sr_item struct {
	Qty int `json:"qty"`
}

type Wr_item struct {
	Qty int `json:"qty"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q83_sample() {
	expect((result == 83))
}

var sr_items []Sr_item
var cr_items []Cr_item
var wr_items []Wr_item
var result float64

func main() {
	sr_items = []Sr_item{Sr_item{Qty: 10}, Sr_item{Qty: 5}}
	cr_items = []Cr_item{Cr_item{Qty: 25}, Cr_item{Qty: 20}}
	wr_items = []Wr_item{Wr_item{Qty: 10}, Wr_item{Qty: 13}}
	result = ((_sumOrdered[int](func() []int {
		results := []int{}
		for _, x := range sr_items {
			results = append(results, x.Qty)
		}
		return results
	}()) + _sumOrdered[int](func() []int {
		results := []int{}
		for _, x := range cr_items {
			results = append(results, x.Qty)
		}
		return results
	}())) + _sumOrdered[int](func() []int {
		results := []int{}
		for _, x := range wr_items {
			results = append(results, x.Qty)
		}
		return results
	}()))
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q83_sample()
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
