//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:06:16Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

type Household_demographic struct {
	Hd_demo_sk       int `json:"hd_demo_sk"`
	Hd_dep_count     int `json:"hd_dep_count"`
	Hd_vehicle_count int `json:"hd_vehicle_count"`
}

type Store struct {
	S_store_sk   int    `json:"s_store_sk"`
	S_store_name string `json:"s_store_name"`
}

type Store_sale struct {
	Sold_time_sk int     `json:"sold_time_sk"`
	Hdemo_sk     int     `json:"hdemo_sk"`
	Store_sk     int     `json:"store_sk"`
	Qty          float64 `json:"qty"`
}

type Time_dim struct {
	Time_sk int `json:"time_sk"`
	Hour    int `json:"hour"`
	Minute  int `json:"minute"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

// line 27
var count_range = func(ssales []any, tdim []any, hour int, start_min int, end_min int) float64 {
	total := 0.0
	for _, ss := range ssales {
		for _, t := range tdim {
			if ((_equal(_getField(ss, "sold_time_sk"), _getField(t, "time_sk")) && _equal(_getField(t, "hour"), hour)) && ((_getField(t, "minute")).(int) >= start_min)) && ((_getField(t, "minute")).(int) < end_min) {
				total = float64(float64(float64((total + (_getField(ss, "qty")).(float64)))))
			}
		}
	}
	return total
}

func test_TPCDS_Q88_sample() {
	expect((result == 88))
}

var time_dim []Time_dim
var household_demographics []Household_demographic
var store []Store
var store_sales []Store_sale
var h8_30_to_9 float64
var h9_to_9_30 float64
var h9_30_to_10 float64
var h10_to_10_30 float64
var h10_30_to_11 float64
var h11_to_11_30 float64
var h11_30_to_12 float64
var h12_to_12_30 float64
var result float64

func main() {
	time_dim = []Time_dim{
		Time_dim{
			Time_sk: 1,
			Hour:    8,
			Minute:  30,
		},
		Time_dim{
			Time_sk: 2,
			Hour:    9,
			Minute:  0,
		},
		Time_dim{
			Time_sk: 3,
			Hour:    9,
			Minute:  30,
		},
		Time_dim{
			Time_sk: 4,
			Hour:    10,
			Minute:  0,
		},
		Time_dim{
			Time_sk: 5,
			Hour:    10,
			Minute:  30,
		},
		Time_dim{
			Time_sk: 6,
			Hour:    11,
			Minute:  0,
		},
		Time_dim{
			Time_sk: 7,
			Hour:    11,
			Minute:  30,
		},
		Time_dim{
			Time_sk: 8,
			Hour:    12,
			Minute:  0,
		},
	}
	household_demographics = []Household_demographic{Household_demographic{
		Hd_demo_sk:       1,
		Hd_dep_count:     1,
		Hd_vehicle_count: 1,
	}}
	store = []Store{Store{
		S_store_sk:   1,
		S_store_name: "ese",
	}}
	store_sales = []Store_sale{
		Store_sale{
			Sold_time_sk: 1,
			Hdemo_sk:     1,
			Store_sk:     1,
			Qty:          10.0,
		},
		Store_sale{
			Sold_time_sk: 2,
			Hdemo_sk:     1,
			Store_sk:     1,
			Qty:          12.0,
		},
		Store_sale{
			Sold_time_sk: 3,
			Hdemo_sk:     1,
			Store_sk:     1,
			Qty:          14.0,
		},
		Store_sale{
			Sold_time_sk: 4,
			Hdemo_sk:     1,
			Store_sk:     1,
			Qty:          11.0,
		},
		Store_sale{
			Sold_time_sk: 5,
			Hdemo_sk:     1,
			Store_sk:     1,
			Qty:          8.0,
		},
		Store_sale{
			Sold_time_sk: 6,
			Hdemo_sk:     1,
			Store_sk:     1,
			Qty:          9.0,
		},
		Store_sale{
			Sold_time_sk: 7,
			Hdemo_sk:     1,
			Store_sk:     1,
			Qty:          10.0,
		},
		Store_sale{
			Sold_time_sk: 8,
			Hdemo_sk:     1,
			Store_sk:     1,
			Qty:          14.0,
		},
	}
	h8_30_to_9 = count_range(store_sales, time_dim, 8, 30, 60)
	h9_to_9_30 = count_range(store_sales, time_dim, 9, 0, 30)
	h9_30_to_10 = count_range(store_sales, time_dim, 9, 30, 60)
	h10_to_10_30 = count_range(store_sales, time_dim, 10, 0, 30)
	h10_30_to_11 = count_range(store_sales, time_dim, 10, 30, 60)
	h11_to_11_30 = count_range(store_sales, time_dim, 11, 0, 30)
	h11_30_to_12 = count_range(store_sales, time_dim, 11, 30, 60)
	h12_to_12_30 = count_range(store_sales, time_dim, 12, 0, 30)
	result = (((((((h8_30_to_9 + h9_to_9_30) + h9_30_to_10) + h10_to_10_30) + h10_30_to_11) + h11_to_11_30) + h11_30_to_12) + h12_to_12_30)
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q88_sample()
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}
