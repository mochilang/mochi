package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"time"
)

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q71_simplified() {
	expect(_equal(result, []map[string]any{map[string]any{
		"i_brand_id": 10,
		"i_brand":    "BrandA",
		"t_hour":     18,
		"t_minute":   0,
		"ext_price":  200.0,
	}, map[string]any{
		"i_brand_id": 20,
		"i_brand":    "BrandB",
		"t_hour":     8,
		"t_minute":   30,
		"ext_price":  150.0,
	}, map[string]any{
		"i_brand_id": 10,
		"i_brand":    "BrandA",
		"t_hour":     8,
		"t_minute":   30,
		"ext_price":  100.0,
	}}))
}

type ItemItem struct {
	I_item_sk    int    `json:"i_item_sk"`
	I_brand_id   int    `json:"i_brand_id"`
	I_brand      string `json:"i_brand"`
	I_manager_id int    `json:"i_manager_id"`
}

var item []ItemItem

type Time_dimItem struct {
	T_time_sk   int    `json:"t_time_sk"`
	T_hour      int    `json:"t_hour"`
	T_minute    int    `json:"t_minute"`
	T_meal_time string `json:"t_meal_time"`
}

var time_dim []Time_dimItem

type Date_dimItem struct {
	D_date_sk int `json:"d_date_sk"`
	D_moy     int `json:"d_moy"`
	D_year    int `json:"d_year"`
}

var date_dim []Date_dimItem

type Web_salesItem struct {
	Ws_ext_sales_price float64 `json:"ws_ext_sales_price"`
	Ws_sold_date_sk    int     `json:"ws_sold_date_sk"`
	Ws_item_sk         int     `json:"ws_item_sk"`
	Ws_sold_time_sk    int     `json:"ws_sold_time_sk"`
}

var web_sales []Web_salesItem

type Catalog_salesItem struct {
	Cs_ext_sales_price float64 `json:"cs_ext_sales_price"`
	Cs_sold_date_sk    int     `json:"cs_sold_date_sk"`
	Cs_item_sk         int     `json:"cs_item_sk"`
	Cs_sold_time_sk    int     `json:"cs_sold_time_sk"`
}

var catalog_sales []Catalog_salesItem

type Store_salesItem struct {
	Ss_ext_sales_price float64 `json:"ss_ext_sales_price"`
	Ss_sold_date_sk    int     `json:"ss_sold_date_sk"`
	Ss_item_sk         int     `json:"ss_item_sk"`
	Ss_sold_time_sk    int     `json:"ss_sold_time_sk"`
}

var store_sales []Store_salesItem
var month int
var year int
var union_sales []any
var result []map[string]any

func main() {
	failures := 0
	item = _cast[[]ItemItem]([]ItemItem{ItemItem{
		I_item_sk:    1,
		I_brand_id:   10,
		I_brand:      "BrandA",
		I_manager_id: 1,
	}, ItemItem{
		I_item_sk:    2,
		I_brand_id:   20,
		I_brand:      "BrandB",
		I_manager_id: 1,
	}})
	time_dim = _cast[[]Time_dimItem]([]Time_dimItem{Time_dimItem{
		T_time_sk:   1,
		T_hour:      8,
		T_minute:    30,
		T_meal_time: "breakfast",
	}, Time_dimItem{
		T_time_sk:   2,
		T_hour:      18,
		T_minute:    0,
		T_meal_time: "dinner",
	}, Time_dimItem{
		T_time_sk:   3,
		T_hour:      12,
		T_minute:    0,
		T_meal_time: "lunch",
	}})
	date_dim = _cast[[]Date_dimItem]([]Date_dimItem{Date_dimItem{
		D_date_sk: 1,
		D_moy:     12,
		D_year:    1998,
	}})
	web_sales = _cast[[]Web_salesItem]([]Web_salesItem{Web_salesItem{
		Ws_ext_sales_price: 100.0,
		Ws_sold_date_sk:    1,
		Ws_item_sk:         1,
		Ws_sold_time_sk:    1,
	}})
	catalog_sales = _cast[[]Catalog_salesItem]([]Catalog_salesItem{Catalog_salesItem{
		Cs_ext_sales_price: 200.0,
		Cs_sold_date_sk:    1,
		Cs_item_sk:         1,
		Cs_sold_time_sk:    2,
	}})
	store_sales = _cast[[]Store_salesItem]([]Store_salesItem{Store_salesItem{
		Ss_ext_sales_price: 150.0,
		Ss_sold_date_sk:    1,
		Ss_item_sk:         2,
		Ss_sold_time_sk:    1,
	}})
	month = 12
	year = 1998
	union_sales = _concat[any](_concat[any](_toAnySlice(_convSlice[map[string]any, any](func() []map[string]any {
		_res := []map[string]any{}
		for _, ws := range web_sales {
			for _, d := range date_dim {
				if !(d.D_date_sk == ws.Ws_sold_date_sk) {
					continue
				}
				if (d.D_moy == month) && (d.D_year == year) {
					if (d.D_moy == month) && (d.D_year == year) {
						_res = append(_res, map[string]any{
							"ext_price": ws.Ws_ext_sales_price,
							"item_sk":   ws.Ws_item_sk,
							"time_sk":   ws.Ws_sold_time_sk,
						})
					}
				}
			}
		}
		return _res
	}())), _toAnySlice(func() []map[string]any {
		_res := []map[string]any{}
		for _, cs := range catalog_sales {
			for _, d := range date_dim {
				if !(d.D_date_sk == cs.Cs_sold_date_sk) {
					continue
				}
				if (d.D_moy == month) && (d.D_year == year) {
					if (d.D_moy == month) && (d.D_year == year) {
						_res = append(_res, map[string]any{
							"ext_price": cs.Cs_ext_sales_price,
							"item_sk":   cs.Cs_item_sk,
							"time_sk":   cs.Cs_sold_time_sk,
						})
					}
				}
			}
		}
		return _res
	}())), _toAnySlice(func() []map[string]any {
		_res := []map[string]any{}
		for _, ss := range store_sales {
			for _, d := range date_dim {
				if !(d.D_date_sk == ss.Ss_sold_date_sk) {
					continue
				}
				if (d.D_moy == month) && (d.D_year == year) {
					if (d.D_moy == month) && (d.D_year == year) {
						_res = append(_res, map[string]any{
							"ext_price": ss.Ss_ext_sales_price,
							"item_sk":   ss.Ss_item_sk,
							"time_sk":   ss.Ss_sold_time_sk,
						})
					}
				}
			}
		}
		return _res
	}()))
	result = func() []map[string]any {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, i := range item {
			for _, s := range union_sales {
				if !(_equal(_cast[map[string]any](s)["item_sk"], i.I_item_sk)) {
					continue
				}
				for _, t := range time_dim {
					if !(_equal(t.T_time_sk, _cast[map[string]any](s)["time_sk"])) {
						continue
					}
					if (i.I_manager_id == 1) && ((t.T_meal_time == "breakfast") || (t.T_meal_time == "dinner")) {
						key := map[string]any{
							"brand_id": i.I_brand_id,
							"brand":    i.I_brand,
							"t_hour":   t.T_hour,
							"t_minute": t.T_minute,
						}
						ks := fmt.Sprint(key)
						g, ok := groups[ks]
						if !ok {
							g = &data.Group{Key: key}
							groups[ks] = g
							order = append(order, ks)
						}
						g.Items = append(g.Items, i)
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		type pair struct {
			item *data.Group
			key  any
		}
		pairs := make([]pair, len(items))
		for idx, it := range items {
			g := it
			pairs[idx] = pair{item: it, key: _toAnySlice([]any{-_sum(func() []any {
				_res := []any{}
				for _, x := range g.Items {
					_res = append(_res, _cast[map[string]any](_cast[map[string]any](x)["s"])["ext_price"])
				}
				return _res
			}()), _cast[map[string]any](g.Key)["brand_id"]})}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for idx, p := range pairs {
			items[idx] = p.item
		}
		_res := []map[string]any{}
		for _, g := range items {
			_res = append(_res, map[string]any{
				"i_brand_id": _cast[map[string]any](g.Key)["brand_id"],
				"i_brand":    _cast[map[string]any](g.Key)["brand"],
				"t_hour":     _cast[map[string]any](g.Key)["t_hour"],
				"t_minute":   _cast[map[string]any](g.Key)["t_minute"],
				"ext_price": _sum(func() []any {
					_res := []any{}
					for _, x := range g.Items {
						_res = append(_res, _cast[map[string]any](_cast[map[string]any](x)["s"])["ext_price"])
					}
					return _res
				}()),
			})
		}
		return _res
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	{
		printTestStart("TPCDS Q71 simplified")
		start := time.Now()
		var failed error
		func() {
			defer func() {
				if r := recover(); r != nil {
					failed = fmt.Errorf("%v", r)
				}
			}()
			test_TPCDS_Q71_simplified()
		}()
		if failed != nil {
			failures++
			printTestFail(failed, time.Since(start))
		} else {
			printTestPass(time.Since(start))
		}
	}
	if failures > 0 {
		fmt.Printf("\n[FAIL] %d test(s) failed.\n", failures)
	}
}

func _cast[T any](v any) T {
	if tv, ok := v.(T); ok {
		return tv
	}
	var out T
	switch any(out).(type) {
	case int:
		switch vv := v.(type) {
		case int:
			return any(vv).(T)
		case float64:
			return any(int(vv)).(T)
		case float32:
			return any(int(vv)).(T)
		}
	case float64:
		switch vv := v.(type) {
		case int:
			return any(float64(vv)).(T)
		case float64:
			return any(vv).(T)
		case float32:
			return any(float64(vv)).(T)
		}
	case float32:
		switch vv := v.(type) {
		case int:
			return any(float32(vv)).(T)
		case float64:
			return any(float32(vv)).(T)
		case float32:
			return any(vv).(T)
		}
	}
	if m, ok := v.(map[any]any); ok {
		v = _convertMapAny(m)
	}
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	if err := json.Unmarshal(data, &out); err != nil {
		panic(err)
	}
	return out
}

func _concat[T any](a, b []T) []T {
	res := make([]T, 0, len(a)+len(b))
	res = append(res, a...)
	res = append(res, b...)
	return res
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _sum(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []float64:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []string, []bool:
			panic("sum() expects numbers")
		default:
			panic("sum() expects list or group")
		}
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("sum() expects numbers")
		}
	}
	return sum
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
