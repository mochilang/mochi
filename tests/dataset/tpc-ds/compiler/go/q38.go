//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:00:54Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"
)

type Catalog_sale struct {
	Cs_bill_customer_sk int `json:"cs_bill_customer_sk"`
	D_month_seq         int `json:"d_month_seq"`
}

type Customer struct {
	C_customer_sk int    `json:"c_customer_sk"`
	C_last_name   string `json:"c_last_name"`
	C_first_name  string `json:"c_first_name"`
}

type Store_sale struct {
	Ss_customer_sk int `json:"ss_customer_sk"`
	D_month_seq    int `json:"d_month_seq"`
}

type Web_sale struct {
	Ws_bill_customer_sk int `json:"ws_bill_customer_sk"`
	D_month_seq         int `json:"d_month_seq"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

// line 19
var distinct = func(xs []any) []any {
	out := []any{}
	for _, x := range xs {
		if !_contains(out, x) {
			out = append(out, x)
		}
	}
	return out
}

func test_TPCDS_Q38_simplified() {
	expect((result == 1))
}

var customer []Customer
var store_sales []Store_sale
var catalog_sales []Catalog_sale
var web_sales []Web_sale
var store_ids []any
var catalog_ids []any
var web_ids []any
var hot []any
var result int

func main() {
	customer = []Customer{Customer{
		C_customer_sk: 1,
		C_last_name:   "Smith",
		C_first_name:  "John",
	}, Customer{
		C_customer_sk: 2,
		C_last_name:   "Jones",
		C_first_name:  "Alice",
	}}
	store_sales = []Store_sale{Store_sale{
		Ss_customer_sk: 1,
		D_month_seq:    1200,
	}, Store_sale{
		Ss_customer_sk: 2,
		D_month_seq:    1205,
	}}
	catalog_sales = []Catalog_sale{Catalog_sale{
		Cs_bill_customer_sk: 1,
		D_month_seq:         1203,
	}}
	web_sales = []Web_sale{Web_sale{
		Ws_bill_customer_sk: 1,
		D_month_seq:         1206,
	}}
	store_ids = distinct(func() []any {
		results := []any{}
		for _, s := range store_sales {
			if (s.D_month_seq >= 1200) && (s.D_month_seq <= 1211) {
				if (s.D_month_seq >= 1200) && (s.D_month_seq <= 1211) {
					results = append(results, s.Ss_customer_sk)
				}
			}
		}
		return results
	}())
	catalog_ids = distinct(func() []any {
		results := []any{}
		for _, c := range catalog_sales {
			if (c.D_month_seq >= 1200) && (c.D_month_seq <= 1211) {
				if (c.D_month_seq >= 1200) && (c.D_month_seq <= 1211) {
					results = append(results, c.Cs_bill_customer_sk)
				}
			}
		}
		return results
	}())
	web_ids = distinct(func() []any {
		results := []any{}
		for _, w := range web_sales {
			if (w.D_month_seq >= 1200) && (w.D_month_seq <= 1211) {
				if (w.D_month_seq >= 1200) && (w.D_month_seq <= 1211) {
					results = append(results, w.Ws_bill_customer_sk)
				}
			}
		}
		return results
	}())
	hot = _intersect[any](_intersect[any](store_ids, catalog_ids), web_ids)
	result = len(hot)
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q38_simplified()
}

func _contains(c any, v any) bool {
	switch s := c.(type) {
	case string:
		return strings.Contains(s, fmt.Sprint(v))
	case map[string]any:
		_, ok := s[fmt.Sprint(v)]
		return ok
	}
	rv := reflect.ValueOf(c)
	if rv.Kind() == reflect.Slice || rv.Kind() == reflect.Array {
		for i := 0; i < rv.Len(); i++ {
			if _equal(rv.Index(i).Interface(), v) {
				return true
			}
		}
		return false
	}
	return false
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _intersect[T any](a, b []T) []T {
	res := []T{}
	for _, x := range a {
		inB := false
		for _, y := range b {
			if _equal(x, y) {
				inB = true
				break
			}
		}
		if inB {
			exists := false
			for _, r := range res {
				if _equal(x, r) {
					exists = true
					break
				}
			}
			if !exists {
				res = append(res, x)
			}
		}
	}
	return res
}
