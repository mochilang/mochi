//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:01:03Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"time"

	"golang.org/x/exp/constraints"
)

type Reason struct {
	R_reason_sk   int    `json:"r_reason_sk"`
	R_reason_desc string `json:"r_reason_desc"`
}

type Result struct {
	Ss_customer_sk any     `json:"ss_customer_sk"`
	Sumsales       float64 `json:"sumsales"`
}

type StoreReturn struct {
	Sr_item_sk         int `json:"sr_item_sk"`
	Sr_ticket_number   int `json:"sr_ticket_number"`
	Sr_reason_sk       int `json:"sr_reason_sk"`
	Sr_return_quantity int `json:"sr_return_quantity"`
}

type StoreSale struct {
	Ss_item_sk       int     `json:"ss_item_sk"`
	Ss_ticket_number int     `json:"ss_ticket_number"`
	Ss_customer_sk   int     `json:"ss_customer_sk"`
	Ss_quantity      int     `json:"ss_quantity"`
	Ss_sales_price   float64 `json:"ss_sales_price"`
}

type Store_return struct {
	Sr_item_sk         int `json:"sr_item_sk"`
	Sr_ticket_number   int `json:"sr_ticket_number"`
	Sr_reason_sk       int `json:"sr_reason_sk"`
	Sr_return_quantity int `json:"sr_return_quantity"`
}

type Store_sale struct {
	Ss_item_sk       int     `json:"ss_item_sk"`
	Ss_ticket_number int     `json:"ss_ticket_number"`
	Ss_customer_sk   int     `json:"ss_customer_sk"`
	Ss_quantity      int     `json:"ss_quantity"`
	Ss_sales_price   float64 `json:"ss_sales_price"`
}

type T struct {
	Ss_customer_sk int     `json:"ss_customer_sk"`
	Act_sales      float64 `json:"act_sales"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q93_active_sales() {
	expect(_equal(result, []v{v{
		Ss_customer_sk: 1,
		Sumsales:       40.0,
	}, v{
		Ss_customer_sk: 2,
		Sumsales:       60.0,
	}}))
}

var store_sales []Store_sale
var store_returns []Store_return
var reason []Reason
var t []T
var result []Result

func main() {
	store_sales = []Store_sale{Store_sale{
		Ss_item_sk:       1,
		Ss_ticket_number: 1,
		Ss_customer_sk:   1,
		Ss_quantity:      5,
		Ss_sales_price:   10.0,
	}, Store_sale{
		Ss_item_sk:       1,
		Ss_ticket_number: 2,
		Ss_customer_sk:   2,
		Ss_quantity:      3,
		Ss_sales_price:   20.0,
	}}
	store_returns = []Store_return{Store_return{
		Sr_item_sk:         1,
		Sr_ticket_number:   1,
		Sr_reason_sk:       1,
		Sr_return_quantity: 1,
	}}
	reason = []Reason{Reason{
		R_reason_sk:   1,
		R_reason_desc: "ReasonA",
	}}
	t = func() []T {
		src := _toAnySlice(store_sales)
		resAny := _query(src, []_joinSpec{
			{items: _toAnySlice(store_returns), on: func(_a ...any) bool {
				tmp0 := _a[0]
				var ss Store_sale
				if tmp0 != nil {
					ss = tmp0.(Store_sale)
				}
				_ = ss
				tmp1 := _a[1]
				var sr Store_return
				if tmp1 != nil {
					sr = tmp1.(Store_return)
				}
				_ = sr
				return ((ss.Ss_item_sk == sr.Sr_item_sk) && (ss.Ss_ticket_number == sr.Sr_ticket_number))
			}, left: true},
			{items: _toAnySlice(reason), on: func(_a ...any) bool {
				tmp0 := _a[0]
				var ss Store_sale
				if tmp0 != nil {
					ss = tmp0.(Store_sale)
				}
				_ = ss
				tmp1 := _a[1]
				var sr Store_return
				if tmp1 != nil {
					sr = tmp1.(Store_return)
				}
				_ = sr
				tmp2 := _a[2]
				var r Reason
				if tmp2 != nil {
					r = tmp2.(Reason)
				}
				_ = r
				return (!_equal(sr, nil) && (sr.Sr_reason_sk == r.R_reason_sk))
			}, left: true},
		}, _queryOpts{selectFn: func(_a ...any) any {
			tmp0 := _a[0]
			var ss Store_sale
			if tmp0 != nil {
				ss = tmp0.(Store_sale)
			}
			_ = ss
			tmp1 := _a[1]
			var sr Store_return
			if tmp1 != nil {
				sr = tmp1.(Store_return)
			}
			_ = sr
			tmp2 := _a[2]
			var r Reason
			if tmp2 != nil {
				r = tmp2.(Reason)
			}
			_ = r
			return T{
				Ss_customer_sk: ss.Ss_customer_sk,
				Act_sales: func() float64 {
					if !_equal(sr, nil) {
						return (float64((ss.Ss_quantity - sr.Sr_return_quantity)) * ss.Ss_sales_price)
					} else {
						return (float64(ss.Ss_quantity) * ss.Ss_sales_price)
					}
				}(),
			}
		}, where: func(_a ...any) bool {
			tmp0 := _a[0]
			var ss Store_sale
			if tmp0 != nil {
				ss = tmp0.(Store_sale)
			}
			_ = ss
			tmp1 := _a[1]
			var sr Store_return
			if tmp1 != nil {
				sr = tmp1.(Store_return)
			}
			_ = sr
			tmp2 := _a[2]
			var r Reason
			if tmp2 != nil {
				r = tmp2.(Reason)
			}
			_ = r
			return (_equal(r, nil) || (r.R_reason_desc == "ReasonA"))
		}, skip: -1, take: -1})
		out := make([]T, len(resAny))
		for i, v := range resAny {
			out[i] = v.(T)
		}
		return out
	}()
	result = _convSlice[v, Result](func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, x := range t {
			key := x.Ss_customer_sk
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, x)
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		type pair struct {
			item *data.Group
			key  any
		}
		pairs := make([]pair, len(items))
		for idx, it := range items {
			g := it
			pairs[idx] = pair{item: it, key: _toAnySlice([]any{_sumOrdered[float64](func() []float64 {
				results := []float64{}
				for _, y := range g.Items {
					results = append(results, y.Act_sales)
				}
				return results
			}()), g.Key.(any)})}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for idx, p := range pairs {
			items[idx] = p.item
		}
		results := []Result{}
		for _, g := range items {
			results = append(results, Result{
				Ss_customer_sk: g.Key.(any),
				Sumsales: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, y := range g.Items {
						results = append(results, y.Act_sales)
					}
					return results
				}()),
			})
		}
		return results
	}())
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q93_active_sales()
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

type _joinSpec struct {
	items    []any
	on       func(...any) bool
	leftKey  func(...any) any
	rightKey func(any) any
	left     bool
	right    bool
}
type _queryOpts struct {
	selectFn func(...any) any
	where    func(...any) bool
	sortKey  func(...any) any
	skip     int
	take     int
}

func _query(src []any, joins []_joinSpec, opts _queryOpts) []any {
	items := make([][]any, len(src))
	for i, v := range src {
		items[i] = []any{v}
	}
	for _, j := range joins {
		if j.leftKey != nil && j.rightKey != nil {
			if j.right && !j.left {
				lmap := map[string][]int{}
				for li, l := range items {
					key := fmt.Sprint(j.leftKey(l...))
					lmap[key] = append(lmap[key], li)
				}
				joined := [][]any{}
				for _, right := range j.items {
					key := fmt.Sprint(j.rightKey(right))
					if is, ok := lmap[key]; ok {
						for _, li := range is {
							left := items[li]
							keep := true
							if j.on != nil {
								args := append(append([]any(nil), left...), right)
								keep = j.on(args...)
							}
							if !keep {
								continue
							}
							joined = append(joined, append(append([]any(nil), left...), right))
						}
					} else {
						undef := make([]any, len(items[0]))
						joined = append(joined, append(undef, right))
					}
				}
				items = joined
				continue
			}
			rmap := map[string][]int{}
			for ri, r := range j.items {
				key := fmt.Sprint(j.rightKey(r))
				rmap[key] = append(rmap[key], ri)
			}
			joined := [][]any{}
			matched := make([]bool, len(j.items))
			for _, left := range items {
				key := fmt.Sprint(j.leftKey(left...))
				if is, ok := rmap[key]; ok {
					m := false
					for _, ri := range is {
						right := j.items[ri]
						keep := true
						if j.on != nil {
							args := append(append([]any(nil), left...), right)
							keep = j.on(args...)
						}
						if !keep {
							continue
						}
						m = true
						matched[ri] = true
						joined = append(joined, append(append([]any(nil), left...), right))
					}
					if j.left && !m {
						joined = append(joined, append(append([]any(nil), left...), nil))
					}
				} else if j.left {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			if j.right {
				lw := 0
				if len(items) > 0 {
					lw = len(items[0])
				}
				for ri, right := range j.items {
					if !matched[ri] {
						undef := make([]any, lw)
						joined = append(joined, append(undef, right))
					}
				}
			}
			items = joined
			continue
		}
		joined := [][]any{}
		if j.right && j.left {
			matched := make([]bool, len(j.items))
			for _, left := range items {
				m := false
				for ri, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					matched[ri] = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			for ri, right := range j.items {
				if !matched[ri] {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else if j.right {
			for _, right := range j.items {
				m := false
				for _, left := range items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else {
			for _, left := range items {
				m := false
				for _, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if j.left && !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
		}
		items = joined
	}
	if opts.where != nil {
		filtered := [][]any{}
		for _, r := range items {
			if opts.where(r...) {
				filtered = append(filtered, r)
			}
		}
		items = filtered
	}
	if opts.sortKey != nil {
		type pair struct {
			item []any
			key  any
		}
		pairs := make([]pair, len(items))
		for i, it := range items {
			pairs[i] = pair{it, opts.sortKey(it...)}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for i, p := range pairs {
			items[i] = p.item
		}
	}
	if opts.skip >= 0 {
		if opts.skip < len(items) {
			items = items[opts.skip:]
		} else {
			items = [][]any{}
		}
	}
	if opts.take >= 0 {
		if opts.take < len(items) {
			items = items[:opts.take]
		}
	}
	res := make([]any, len(items))
	for i, r := range items {
		res[i] = opts.selectFn(r...)
	}
	return res
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
