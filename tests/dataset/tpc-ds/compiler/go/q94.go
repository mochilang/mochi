//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:06:22Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type CustomerAddress struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_state      string `json:"ca_state"`
}

type Customer_addres struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_state      string `json:"ca_state"`
}

type DateDim struct {
	D_date_sk int    `json:"d_date_sk"`
	D_date    string `json:"d_date"`
}

type Date_dim struct {
	D_date_sk int    `json:"d_date_sk"`
	D_date    string `json:"d_date"`
}

type WebReturn struct {
	Wr_order_number int `json:"wr_order_number"`
}

type WebSale struct {
	Ws_order_number  int     `json:"ws_order_number"`
	Ws_ship_date_sk  int     `json:"ws_ship_date_sk"`
	Ws_warehouse_sk  int     `json:"ws_warehouse_sk"`
	Ws_ship_addr_sk  int     `json:"ws_ship_addr_sk"`
	Ws_web_site_sk   int     `json:"ws_web_site_sk"`
	Ws_net_profit    float64 `json:"ws_net_profit"`
	Ws_ext_ship_cost float64 `json:"ws_ext_ship_cost"`
}

type WebSite struct {
	Web_site_sk      int    `json:"web_site_sk"`
	Web_company_name string `json:"web_company_name"`
}

type Web_return struct {
	Wr_order_number int `json:"wr_order_number"`
}

type Web_sale struct {
	Ws_order_number  int     `json:"ws_order_number"`
	Ws_ship_date_sk  int     `json:"ws_ship_date_sk"`
	Ws_warehouse_sk  int     `json:"ws_warehouse_sk"`
	Ws_ship_addr_sk  int     `json:"ws_ship_addr_sk"`
	Ws_web_site_sk   int     `json:"ws_web_site_sk"`
	Ws_net_profit    float64 `json:"ws_net_profit"`
	Ws_ext_ship_cost float64 `json:"ws_ext_ship_cost"`
}

type Web_site struct {
	Web_site_sk      int    `json:"web_site_sk"`
	Web_company_name string `json:"web_company_name"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

// line 19
var distinct = func(xs []any) []any {
	out := []any{}
	for _, x := range xs {
		if !_contains(out, x) {
			out = append(out, x)
		}
	}
	return out
}

func test_TPCDS_Q94_shipping() {
	expect(_equal(result, v{
		Order_count:         1,
		Total_shipping_cost: 2.0,
		Total_net_profit:    5.0,
	}))
}

var web_sales []Web_sale
var web_returns []Web_return
var date_dim []Date_dim
var customer_address []Customer_addres
var web_site []Web_site
var filtered []Web_sale
var result v

func main() {
	web_sales = []Web_sale{Web_sale{
		Ws_order_number:  1,
		Ws_ship_date_sk:  1,
		Ws_warehouse_sk:  1,
		Ws_ship_addr_sk:  1,
		Ws_web_site_sk:   1,
		Ws_net_profit:    5.0,
		Ws_ext_ship_cost: 2.0,
	}, Web_sale{
		Ws_order_number:  1,
		Ws_ship_date_sk:  1,
		Ws_warehouse_sk:  2,
		Ws_ship_addr_sk:  1,
		Ws_web_site_sk:   1,
		Ws_net_profit:    0.0,
		Ws_ext_ship_cost: 0.0,
	}, Web_sale{
		Ws_order_number:  2,
		Ws_ship_date_sk:  1,
		Ws_warehouse_sk:  3,
		Ws_ship_addr_sk:  1,
		Ws_web_site_sk:   1,
		Ws_net_profit:    3.0,
		Ws_ext_ship_cost: 1.0,
	}}
	web_returns = []Web_return{Web_return{Wr_order_number: 2}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_date:    "2001-02-01",
	}}
	customer_address = []Customer_addres{Customer_addres{
		Ca_address_sk: 1,
		Ca_state:      "CA",
	}}
	web_site = []Web_site{Web_site{
		Web_site_sk:      1,
		Web_company_name: "pri",
	}}
	filtered = func() []Web_sale {
		results := []Web_sale{}
		for _, ws := range web_sales {
			for _, d := range date_dim {
				if !(ws.Ws_ship_date_sk == d.D_date_sk) {
					continue
				}
				for _, ca := range customer_address {
					if !(ws.Ws_ship_addr_sk == ca.Ca_address_sk) {
						continue
					}
					for _, w := range web_site {
						if !(ws.Ws_web_site_sk == w.Web_site_sk) {
							continue
						}
						if (((ca.Ca_state == "CA") && (w.Web_company_name == "pri")) && len(func() []Web_sale {
							results := []Web_sale{}
							for _, ws2 := range web_sales {
								if (ws.Ws_order_number == ws2.Ws_order_number) && (ws.Ws_warehouse_sk != ws2.Ws_warehouse_sk) {
									if (ws.Ws_order_number == ws2.Ws_order_number) && (ws.Ws_warehouse_sk != ws2.Ws_warehouse_sk) {
										results = append(results, ws2)
									}
								}
							}
							return results
						}()) > 0) && (len(func() []Web_return {
							results := []Web_return{}
							for _, wr := range web_returns {
								if wr.Wr_order_number == ws.Ws_order_number {
									if wr.Wr_order_number == ws.Ws_order_number {
										results = append(results, wr)
									}
								}
							}
							return results
						}()) > 0 == false) {
							if (((ca.Ca_state == "CA") && (w.Web_company_name == "pri")) && len(func() []Web_sale {
								results := []Web_sale{}
								for _, ws2 := range web_sales {
									if (ws.Ws_order_number == ws2.Ws_order_number) && (ws.Ws_warehouse_sk != ws2.Ws_warehouse_sk) {
										if (ws.Ws_order_number == ws2.Ws_order_number) && (ws.Ws_warehouse_sk != ws2.Ws_warehouse_sk) {
											results = append(results, ws2)
										}
									}
								}
								return results
							}()) > 0) && (len(func() []Web_return {
								results := []Web_return{}
								for _, wr := range web_returns {
									if wr.Wr_order_number == ws.Ws_order_number {
										if wr.Wr_order_number == ws.Ws_order_number {
											results = append(results, wr)
										}
									}
								}
								return results
							}()) > 0 == false) {
								results = append(results, ws)
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = v{
		Order_count: len(distinct(func() []any {
			results := []any{}
			for _, x := range filtered {
				results = append(results, x.Ws_order_number)
			}
			return results
		}())),
		Total_shipping_cost: _sumOrdered[float64](func() []float64 {
			results := []float64{}
			for _, x := range filtered {
				results = append(results, x.Ws_ext_ship_cost)
			}
			return results
		}()),
		Total_net_profit: _sumOrdered[float64](func() []float64 {
			results := []float64{}
			for _, x := range filtered {
				results = append(results, x.Ws_net_profit)
			}
			return results
		}()),
	}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q94_shipping()
}

func _contains(c any, v any) bool {
	switch s := c.(type) {
	case string:
		return strings.Contains(s, fmt.Sprint(v))
	case map[string]any:
		_, ok := s[fmt.Sprint(v)]
		return ok
	}
	rv := reflect.ValueOf(c)
	if rv.Kind() == reflect.Slice || rv.Kind() == reflect.Array {
		for i := 0; i < rv.Len(); i++ {
			if _equal(rv.Index(i).Interface(), v) {
				return true
			}
		}
		return false
	}
	return false
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
