//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:05:57Z

package main

import (
	"encoding/json"
	"fmt"
	"time"
)

type Store_return struct {
	Item   int `json:"item"`
	Ticket int `json:"ticket"`
}

type Store_sale struct {
	Item   int `json:"item"`
	Cost   int `json:"cost"`
	List   int `json:"list"`
	Coupon int `json:"coupon"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q64_simplified() {
	expect((result == 64))
}

var store_sales []Store_sale
var store_returns []Store_return
var result int

func main() {
	store_sales = []Store_sale{Store_sale{
		Item:   1,
		Cost:   20,
		List:   30,
		Coupon: 5,
	}}
	store_returns = []Store_return{Store_return{
		Item:   1,
		Ticket: 1,
	}}
	result = (((20 + 30) - 5) + 19)
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q64_simplified()
}
