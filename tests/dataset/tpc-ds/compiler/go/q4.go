//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:04:20Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"time"

	"golang.org/x/exp/constraints"
)

type Catalog_sale struct {
	Cs_bill_customer_sk   int     `json:"cs_bill_customer_sk"`
	Cs_sold_date_sk       int     `json:"cs_sold_date_sk"`
	Cs_ext_list_price     float64 `json:"cs_ext_list_price"`
	Cs_ext_wholesale_cost float64 `json:"cs_ext_wholesale_cost"`
	Cs_ext_discount_amt   float64 `json:"cs_ext_discount_amt"`
	Cs_ext_sales_price    float64 `json:"cs_ext_sales_price"`
}

type Customer struct {
	C_customer_sk int    `json:"c_customer_sk"`
	C_customer_id string `json:"c_customer_id"`
	C_first_name  string `json:"c_first_name"`
	C_last_name   string `json:"c_last_name"`
	C_login       string `json:"c_login"`
}

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
}

type GKey struct {
	ID    string `json:"id"`
	First string `json:"first"`
	Last  string `json:"last"`
	Login string `json:"login"`
	Year  int    `json:"year"`
}

type Result struct {
	Customer_id         string `json:"customer_id"`
	Customer_first_name string `json:"customer_first_name"`
	Customer_last_name  string `json:"customer_last_name"`
	Customer_login      string `json:"customer_login"`
}

type Store_sale struct {
	Ss_customer_sk        int     `json:"ss_customer_sk"`
	Ss_sold_date_sk       int     `json:"ss_sold_date_sk"`
	Ss_ext_list_price     float64 `json:"ss_ext_list_price"`
	Ss_ext_wholesale_cost float64 `json:"ss_ext_wholesale_cost"`
	Ss_ext_discount_amt   float64 `json:"ss_ext_discount_amt"`
	Ss_ext_sales_price    float64 `json:"ss_ext_sales_price"`
}

type Web_sale struct {
	Ws_bill_customer_sk   int     `json:"ws_bill_customer_sk"`
	Ws_sold_date_sk       int     `json:"ws_sold_date_sk"`
	Ws_ext_list_price     float64 `json:"ws_ext_list_price"`
	Ws_ext_wholesale_cost float64 `json:"ws_ext_wholesale_cost"`
	Ws_ext_discount_amt   float64 `json:"ws_ext_discount_amt"`
	Ws_ext_sales_price    float64 `json:"ws_ext_sales_price"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q4_result() {
	expect(_equal(result, []v{v{
		Customer_id:         "C1",
		Customer_first_name: "Alice",
		Customer_last_name:  "A",
		Customer_login:      "alice",
	}}))
}

var customer []Customer
var store_sales []Store_sale
var catalog_sales []Catalog_sale
var web_sales []Web_sale
var date_dim []Date_dim
var year_total []v
var result []Result

func main() {
	customer = []Customer{Customer{
		C_customer_sk: 1,
		C_customer_id: "C1",
		C_first_name:  "Alice",
		C_last_name:   "A",
		C_login:       "alice",
	}}
	store_sales = []Store_sale{Store_sale{
		Ss_customer_sk:        1,
		Ss_sold_date_sk:       1,
		Ss_ext_list_price:     10.0,
		Ss_ext_wholesale_cost: 5.0,
		Ss_ext_discount_amt:   0.0,
		Ss_ext_sales_price:    10.0,
	}, Store_sale{
		Ss_customer_sk:        1,
		Ss_sold_date_sk:       2,
		Ss_ext_list_price:     20.0,
		Ss_ext_wholesale_cost: 5.0,
		Ss_ext_discount_amt:   0.0,
		Ss_ext_sales_price:    20.0,
	}}
	catalog_sales = []Catalog_sale{Catalog_sale{
		Cs_bill_customer_sk:   1,
		Cs_sold_date_sk:       1,
		Cs_ext_list_price:     10.0,
		Cs_ext_wholesale_cost: 2.0,
		Cs_ext_discount_amt:   0.0,
		Cs_ext_sales_price:    10.0,
	}, Catalog_sale{
		Cs_bill_customer_sk:   1,
		Cs_sold_date_sk:       2,
		Cs_ext_list_price:     30.0,
		Cs_ext_wholesale_cost: 2.0,
		Cs_ext_discount_amt:   0.0,
		Cs_ext_sales_price:    30.0,
	}}
	web_sales = []Web_sale{Web_sale{
		Ws_bill_customer_sk:   1,
		Ws_sold_date_sk:       1,
		Ws_ext_list_price:     10.0,
		Ws_ext_wholesale_cost: 5.0,
		Ws_ext_discount_amt:   0.0,
		Ws_ext_sales_price:    10.0,
	}, Web_sale{
		Ws_bill_customer_sk:   1,
		Ws_sold_date_sk:       2,
		Ws_ext_list_price:     12.0,
		Ws_ext_wholesale_cost: 5.0,
		Ws_ext_discount_amt:   0.0,
		Ws_ext_sales_price:    12.0,
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_year:    2001,
	}, Date_dim{
		D_date_sk: 2,
		D_year:    2002,
	}}
	year_total = append(append([]v{}, append(append([]v{}, (func() []v {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, c := range customer {
			for _, s := range store_sales {
				if !(c.C_customer_sk == s.Ss_customer_sk) {
					continue
				}
				for _, d := range date_dim {
					if !(s.Ss_sold_date_sk == d.D_date_sk) {
						continue
					}
					key := GKey{
						ID:    c.C_customer_id,
						First: c.C_first_name,
						Last:  c.C_last_name,
						Login: c.C_login,
						Year:  d.D_year,
					}
					ks := fmt.Sprint(key)
					g, ok := groups[ks]
					if !ok {
						g = &data.Group{Key: key}
						groups[ks] = g
						order = append(order, ks)
					}
					g.Items = append(g.Items, c)
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []v{}
		for _, g := range items {
			results = append(results, v{
				Customer_id:         g.Key.(GKey).ID,
				Customer_first_name: g.Key.(GKey).First,
				Customer_last_name:  g.Key.(GKey).Last,
				Customer_login:      g.Key.(GKey).Login,
				Dyear:               g.Key.(GKey).Year,
				Year_total: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Customer)
						results = append(results, (float64((float64((((x.Ss_ext_list_price).(float64) - (x.Ss_ext_wholesale_cost).(float64)) - (x.Ss_ext_discount_amt).(float64))) + (x.Ss_ext_sales_price).(float64))) / float64(2)))
					}
					return results
				}()),
				Sale_type: "s",
			})
		}
		return results
	}())...), (func() []v {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, c := range customer {
			for _, cs := range catalog_sales {
				if !(c.C_customer_sk == cs.Cs_bill_customer_sk) {
					continue
				}
				for _, d := range date_dim {
					if !(cs.Cs_sold_date_sk == d.D_date_sk) {
						continue
					}
					key := GKey{
						ID:    c.C_customer_id,
						First: c.C_first_name,
						Last:  c.C_last_name,
						Login: c.C_login,
						Year:  d.D_year,
					}
					ks := fmt.Sprint(key)
					g, ok := groups[ks]
					if !ok {
						g = &data.Group{Key: key}
						groups[ks] = g
						order = append(order, ks)
					}
					g.Items = append(g.Items, c)
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []v{}
		for _, g := range items {
			results = append(results, v{
				Customer_id:         g.Key.(GKey).ID,
				Customer_first_name: g.Key.(GKey).First,
				Customer_last_name:  g.Key.(GKey).Last,
				Customer_login:      g.Key.(GKey).Login,
				Dyear:               g.Key.(GKey).Year,
				Year_total: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Customer)
						results = append(results, (float64((float64((((x.Cs_ext_list_price).(float64) - (x.Cs_ext_wholesale_cost).(float64)) - (x.Cs_ext_discount_amt).(float64))) + (x.Cs_ext_sales_price).(float64))) / float64(2)))
					}
					return results
				}()),
				Sale_type: "c",
			})
		}
		return results
	}())...)...), (func() []v {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, c := range customer {
			for _, ws := range web_sales {
				if !(c.C_customer_sk == ws.Ws_bill_customer_sk) {
					continue
				}
				for _, d := range date_dim {
					if !(ws.Ws_sold_date_sk == d.D_date_sk) {
						continue
					}
					key := GKey{
						ID:    c.C_customer_id,
						First: c.C_first_name,
						Last:  c.C_last_name,
						Login: c.C_login,
						Year:  d.D_year,
					}
					ks := fmt.Sprint(key)
					g, ok := groups[ks]
					if !ok {
						g = &data.Group{Key: key}
						groups[ks] = g
						order = append(order, ks)
					}
					g.Items = append(g.Items, c)
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []v{}
		for _, g := range items {
			results = append(results, v{
				Customer_id:         g.Key.(GKey).ID,
				Customer_first_name: g.Key.(GKey).First,
				Customer_last_name:  g.Key.(GKey).Last,
				Customer_login:      g.Key.(GKey).Login,
				Dyear:               g.Key.(GKey).Year,
				Year_total: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Customer)
						results = append(results, (float64((float64((((x.Ws_ext_list_price).(float64) - (x.Ws_ext_wholesale_cost).(float64)) - (x.Ws_ext_discount_amt).(float64))) + (x.Ws_ext_sales_price).(float64))) / float64(2)))
					}
					return results
				}()),
				Sale_type: "w",
			})
		}
		return results
	}())...)
	result = func() []Result {
		src := _toAnySlice(year_total)
		resAny := _query(src, []_joinSpec{
			{items: _toAnySlice(year_total), on: func(_a ...any) bool {
				tmp0 := _a[0]
				var s1 v
				if tmp0 != nil {
					s1 = tmp0.(v)
				}
				_ = s1
				tmp1 := _a[1]
				var s2 v
				if tmp1 != nil {
					s2 = tmp1.(v)
				}
				_ = s2
				return (s2.Customer_id == s1.Customer_id)
			}, leftKey: func(_a ...any) any {
				tmp0 := _a[0]
				var s1 v
				if tmp0 != nil {
					s1 = tmp0.(v)
				}
				_ = s1
				return s1.Customer_id
			}, rightKey: func(_v any) any { s2 := _v.(v); _ = s2; return s2.Customer_id }},
			{items: _toAnySlice(year_total), on: func(_a ...any) bool {
				tmp0 := _a[0]
				var s1 v
				if tmp0 != nil {
					s1 = tmp0.(v)
				}
				_ = s1
				tmp1 := _a[1]
				var s2 v
				if tmp1 != nil {
					s2 = tmp1.(v)
				}
				_ = s2
				tmp2 := _a[2]
				var c1 v
				if tmp2 != nil {
					c1 = tmp2.(v)
				}
				_ = c1
				return (c1.Customer_id == s1.Customer_id)
			}, leftKey: func(_a ...any) any {
				tmp0 := _a[0]
				var s1 v
				if tmp0 != nil {
					s1 = tmp0.(v)
				}
				_ = s1
				tmp1 := _a[1]
				var s2 v
				if tmp1 != nil {
					s2 = tmp1.(v)
				}
				_ = s2
				return s1.Customer_id
			}, rightKey: func(_v any) any { c1 := _v.(v); _ = c1; return c1.Customer_id }},
			{items: _toAnySlice(year_total), on: func(_a ...any) bool {
				tmp0 := _a[0]
				var s1 v
				if tmp0 != nil {
					s1 = tmp0.(v)
				}
				_ = s1
				tmp1 := _a[1]
				var s2 v
				if tmp1 != nil {
					s2 = tmp1.(v)
				}
				_ = s2
				tmp2 := _a[2]
				var c1 v
				if tmp2 != nil {
					c1 = tmp2.(v)
				}
				_ = c1
				tmp3 := _a[3]
				var c2 v
				if tmp3 != nil {
					c2 = tmp3.(v)
				}
				_ = c2
				return (c2.Customer_id == s1.Customer_id)
			}, leftKey: func(_a ...any) any {
				tmp0 := _a[0]
				var s1 v
				if tmp0 != nil {
					s1 = tmp0.(v)
				}
				_ = s1
				tmp1 := _a[1]
				var s2 v
				if tmp1 != nil {
					s2 = tmp1.(v)
				}
				_ = s2
				tmp2 := _a[2]
				var c1 v
				if tmp2 != nil {
					c1 = tmp2.(v)
				}
				_ = c1
				return s1.Customer_id
			}, rightKey: func(_v any) any { c2 := _v.(v); _ = c2; return c2.Customer_id }},
			{items: _toAnySlice(year_total), on: func(_a ...any) bool {
				tmp0 := _a[0]
				var s1 v
				if tmp0 != nil {
					s1 = tmp0.(v)
				}
				_ = s1
				tmp1 := _a[1]
				var s2 v
				if tmp1 != nil {
					s2 = tmp1.(v)
				}
				_ = s2
				tmp2 := _a[2]
				var c1 v
				if tmp2 != nil {
					c1 = tmp2.(v)
				}
				_ = c1
				tmp3 := _a[3]
				var c2 v
				if tmp3 != nil {
					c2 = tmp3.(v)
				}
				_ = c2
				tmp4 := _a[4]
				var w1 v
				if tmp4 != nil {
					w1 = tmp4.(v)
				}
				_ = w1
				return (w1.Customer_id == s1.Customer_id)
			}, leftKey: func(_a ...any) any {
				tmp0 := _a[0]
				var s1 v
				if tmp0 != nil {
					s1 = tmp0.(v)
				}
				_ = s1
				tmp1 := _a[1]
				var s2 v
				if tmp1 != nil {
					s2 = tmp1.(v)
				}
				_ = s2
				tmp2 := _a[2]
				var c1 v
				if tmp2 != nil {
					c1 = tmp2.(v)
				}
				_ = c1
				tmp3 := _a[3]
				var c2 v
				if tmp3 != nil {
					c2 = tmp3.(v)
				}
				_ = c2
				return s1.Customer_id
			}, rightKey: func(_v any) any { w1 := _v.(v); _ = w1; return w1.Customer_id }},
			{items: _toAnySlice(year_total), on: func(_a ...any) bool {
				tmp0 := _a[0]
				var s1 v
				if tmp0 != nil {
					s1 = tmp0.(v)
				}
				_ = s1
				tmp1 := _a[1]
				var s2 v
				if tmp1 != nil {
					s2 = tmp1.(v)
				}
				_ = s2
				tmp2 := _a[2]
				var c1 v
				if tmp2 != nil {
					c1 = tmp2.(v)
				}
				_ = c1
				tmp3 := _a[3]
				var c2 v
				if tmp3 != nil {
					c2 = tmp3.(v)
				}
				_ = c2
				tmp4 := _a[4]
				var w1 v
				if tmp4 != nil {
					w1 = tmp4.(v)
				}
				_ = w1
				tmp5 := _a[5]
				var w2 v
				if tmp5 != nil {
					w2 = tmp5.(v)
				}
				_ = w2
				return (w2.Customer_id == s1.Customer_id)
			}, leftKey: func(_a ...any) any {
				tmp0 := _a[0]
				var s1 v
				if tmp0 != nil {
					s1 = tmp0.(v)
				}
				_ = s1
				tmp1 := _a[1]
				var s2 v
				if tmp1 != nil {
					s2 = tmp1.(v)
				}
				_ = s2
				tmp2 := _a[2]
				var c1 v
				if tmp2 != nil {
					c1 = tmp2.(v)
				}
				_ = c1
				tmp3 := _a[3]
				var c2 v
				if tmp3 != nil {
					c2 = tmp3.(v)
				}
				_ = c2
				tmp4 := _a[4]
				var w1 v
				if tmp4 != nil {
					w1 = tmp4.(v)
				}
				_ = w1
				return s1.Customer_id
			}, rightKey: func(_v any) any { w2 := _v.(v); _ = w2; return w2.Customer_id }},
		}, _queryOpts{selectFn: func(_a ...any) any {
			tmp0 := _a[0]
			var s1 v
			if tmp0 != nil {
				s1 = tmp0.(v)
			}
			_ = s1
			tmp1 := _a[1]
			var s2 v
			if tmp1 != nil {
				s2 = tmp1.(v)
			}
			_ = s2
			tmp2 := _a[2]
			var c1 v
			if tmp2 != nil {
				c1 = tmp2.(v)
			}
			_ = c1
			tmp3 := _a[3]
			var c2 v
			if tmp3 != nil {
				c2 = tmp3.(v)
			}
			_ = c2
			tmp4 := _a[4]
			var w1 v
			if tmp4 != nil {
				w1 = tmp4.(v)
			}
			_ = w1
			tmp5 := _a[5]
			var w2 v
			if tmp5 != nil {
				w2 = tmp5.(v)
			}
			_ = w2
			return Result{
				Customer_id:         s2.Customer_id,
				Customer_first_name: s2.Customer_first_name,
				Customer_last_name:  s2.Customer_last_name,
				Customer_login:      s2.Customer_login,
			}
		}, where: func(_a ...any) bool {
			tmp0 := _a[0]
			var s1 v
			if tmp0 != nil {
				s1 = tmp0.(v)
			}
			_ = s1
			tmp1 := _a[1]
			var s2 v
			if tmp1 != nil {
				s2 = tmp1.(v)
			}
			_ = s2
			tmp2 := _a[2]
			var c1 v
			if tmp2 != nil {
				c1 = tmp2.(v)
			}
			_ = c1
			tmp3 := _a[3]
			var c2 v
			if tmp3 != nil {
				c2 = tmp3.(v)
			}
			_ = c2
			tmp4 := _a[4]
			var w1 v
			if tmp4 != nil {
				w1 = tmp4.(v)
			}
			_ = w1
			tmp5 := _a[5]
			var w2 v
			if tmp5 != nil {
				w2 = tmp5.(v)
			}
			_ = w2
			return (((((((((((((((((s1.Sale_type == "s") && (c1.Sale_type == "c")) && (w1.Sale_type == "w")) && (s2.Sale_type == "s")) && (c2.Sale_type == "c")) && (w2.Sale_type == "w")) && (s1.Dyear == 2001)) && (s2.Dyear == 2002)) && (c1.Dyear == 2001)) && (c2.Dyear == 2002)) && (w1.Dyear == 2001)) && (w2.Dyear == 2002)) && (s1.Year_total > float64(0))) && (c1.Year_total > float64(0))) && (w1.Year_total > float64(0))) && (float64((func() any {
				if c1.Year_total > float64(0) {
					return (c2.Year_total / c1.Year_total)
				} else {
					return nil
				}
			}())) > float64((func() any {
				if s1.Year_total > float64(0) {
					return (s2.Year_total / s1.Year_total)
				} else {
					return nil
				}
			}())))) && (float64((func() any {
				if c1.Year_total > float64(0) {
					return (c2.Year_total / c1.Year_total)
				} else {
					return nil
				}
			}())) > float64((func() any {
				if w1.Year_total > float64(0) {
					return (w2.Year_total / w1.Year_total)
				} else {
					return nil
				}
			}()))))
		}, sortKey: func(_a ...any) any {
			tmp0 := _a[0]
			var s1 v
			if tmp0 != nil {
				s1 = tmp0.(v)
			}
			_ = s1
			tmp1 := _a[1]
			var s2 v
			if tmp1 != nil {
				s2 = tmp1.(v)
			}
			_ = s2
			tmp2 := _a[2]
			var c1 v
			if tmp2 != nil {
				c1 = tmp2.(v)
			}
			_ = c1
			tmp3 := _a[3]
			var c2 v
			if tmp3 != nil {
				c2 = tmp3.(v)
			}
			_ = c2
			tmp4 := _a[4]
			var w1 v
			if tmp4 != nil {
				w1 = tmp4.(v)
			}
			_ = w1
			tmp5 := _a[5]
			var w2 v
			if tmp5 != nil {
				w2 = tmp5.(v)
			}
			_ = w2
			return []string{
				s2.Customer_id,
				s2.Customer_first_name,
				s2.Customer_last_name,
				s2.Customer_login,
			}
		}, skip: -1, take: -1})
		out := make([]Result, len(resAny))
		for i, v := range resAny {
			out[i] = v.(Result)
		}
		return out
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q4_result()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

type _joinSpec struct {
	items    []any
	on       func(...any) bool
	leftKey  func(...any) any
	rightKey func(any) any
	left     bool
	right    bool
}
type _queryOpts struct {
	selectFn func(...any) any
	where    func(...any) bool
	sortKey  func(...any) any
	skip     int
	take     int
}

func _query(src []any, joins []_joinSpec, opts _queryOpts) []any {
	items := make([][]any, len(src))
	for i, v := range src {
		items[i] = []any{v}
	}
	for _, j := range joins {
		if j.leftKey != nil && j.rightKey != nil {
			if j.right && !j.left {
				lmap := map[string][]int{}
				for li, l := range items {
					key := fmt.Sprint(j.leftKey(l...))
					lmap[key] = append(lmap[key], li)
				}
				joined := [][]any{}
				for _, right := range j.items {
					key := fmt.Sprint(j.rightKey(right))
					if is, ok := lmap[key]; ok {
						for _, li := range is {
							left := items[li]
							keep := true
							if j.on != nil {
								args := append(append([]any(nil), left...), right)
								keep = j.on(args...)
							}
							if !keep {
								continue
							}
							joined = append(joined, append(append([]any(nil), left...), right))
						}
					} else {
						undef := make([]any, len(items[0]))
						joined = append(joined, append(undef, right))
					}
				}
				items = joined
				continue
			}
			rmap := map[string][]int{}
			for ri, r := range j.items {
				key := fmt.Sprint(j.rightKey(r))
				rmap[key] = append(rmap[key], ri)
			}
			joined := [][]any{}
			matched := make([]bool, len(j.items))
			for _, left := range items {
				key := fmt.Sprint(j.leftKey(left...))
				if is, ok := rmap[key]; ok {
					m := false
					for _, ri := range is {
						right := j.items[ri]
						keep := true
						if j.on != nil {
							args := append(append([]any(nil), left...), right)
							keep = j.on(args...)
						}
						if !keep {
							continue
						}
						m = true
						matched[ri] = true
						joined = append(joined, append(append([]any(nil), left...), right))
					}
					if j.left && !m {
						joined = append(joined, append(append([]any(nil), left...), nil))
					}
				} else if j.left {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			if j.right {
				lw := 0
				if len(items) > 0 {
					lw = len(items[0])
				}
				for ri, right := range j.items {
					if !matched[ri] {
						undef := make([]any, lw)
						joined = append(joined, append(undef, right))
					}
				}
			}
			items = joined
			continue
		}
		joined := [][]any{}
		if j.right && j.left {
			matched := make([]bool, len(j.items))
			for _, left := range items {
				m := false
				for ri, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					matched[ri] = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			for ri, right := range j.items {
				if !matched[ri] {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else if j.right {
			for _, right := range j.items {
				m := false
				for _, left := range items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else {
			for _, left := range items {
				m := false
				for _, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if j.left && !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
		}
		items = joined
	}
	if opts.where != nil {
		filtered := [][]any{}
		for _, r := range items {
			if opts.where(r...) {
				filtered = append(filtered, r)
			}
		}
		items = filtered
	}
	if opts.sortKey != nil {
		type pair struct {
			item []any
			key  any
		}
		pairs := make([]pair, len(items))
		for i, it := range items {
			pairs[i] = pair{it, opts.sortKey(it...)}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for i, p := range pairs {
			items[i] = p.item
		}
	}
	if opts.skip >= 0 {
		if opts.skip < len(items) {
			items = items[opts.skip:]
		} else {
			items = [][]any{}
		}
	}
	if opts.take >= 0 {
		if opts.take < len(items) {
			items = items[:opts.take]
		}
	}
	res := make([]any, len(items))
	for i, r := range items {
		res[i] = opts.selectFn(r...)
	}
	return res
}

func _sum[T constraints.Integer | constraints.Float](v []T) float64 {
	var sum float64
	for _, n := range v {
		sum += float64(n)
	}
	return sum
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
