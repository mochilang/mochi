//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:00:57Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"time"

	"golang.org/x/exp/constraints"
)

type Avg_by_year struct {
	Cat       any     `json:"cat"`
	Call      any     `json:"call"`
	Avg_sales float64 `json:"avg_sales"`
}

type Call_center struct {
	Cc_call_center_sk int    `json:"cc_call_center_sk"`
	Cc_name           string `json:"cc_name"`
}

type Catalog_sale struct {
	Item  int     `json:"item"`
	Call  int     `json:"call"`
	Date  int     `json:"date"`
	Price float64 `json:"price"`
}

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
	D_moy     int `json:"d_moy"`
}

type GKey struct {
	Cat  string `json:"cat"`
	Call string `json:"call"`
	Year int    `json:"year"`
}

type GgKey struct {
	Cat  any `json:"cat"`
	Call any `json:"call"`
}

type Grouped struct {
	Cat       any     `json:"cat"`
	Call      any     `json:"call"`
	Year      any     `json:"year"`
	Sum_sales float64 `json:"sum_sales"`
}

type Item struct {
	I_item_sk  int    `json:"i_item_sk"`
	I_category string `json:"i_category"`
	I_brand    string `json:"i_brand"`
}

type Result struct {
	I_category any     `json:"i_category"`
	Sum_sales  float64 `json:"sum_sales"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

// line 15
var abs = func(x float64) float64 {
	if x >= 0.0 {
		return x
	}
	return -x
}

func test_TPCDS_Q57_simplified() {
	expect(_equal(result, []map[string]any{}))
}

var catalog_sales []Catalog_sale
var item []Item
var call_center []Call_center
var date_dim []Date_dim
var grouped []Grouped
var avg_by_year []Avg_by_year
var result []Result

func main() {
	catalog_sales = []Catalog_sale{Catalog_sale{
		Item:  1,
		Call:  1,
		Date:  1,
		Price: 20.0,
	}, Catalog_sale{
		Item:  1,
		Call:  1,
		Date:  2,
		Price: 20.0,
	}, Catalog_sale{
		Item:  1,
		Call:  1,
		Date:  3,
		Price: 40.0,
	}}
	item = []Item{Item{
		I_item_sk:  1,
		I_category: "A",
		I_brand:    "B",
	}}
	call_center = []Call_center{Call_center{
		Cc_call_center_sk: 1,
		Cc_name:           "C1",
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_year:    2000,
		D_moy:     11,
	}, Date_dim{
		D_date_sk: 2,
		D_year:    2000,
		D_moy:     12,
	}, Date_dim{
		D_date_sk: 3,
		D_year:    2001,
		D_moy:     1,
	}}
	grouped = func() []Grouped {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, cs := range catalog_sales {
			for _, i := range item {
				if !(cs.Item == i.I_item_sk) {
					continue
				}
				for _, d := range date_dim {
					if !(cs.Date == d.D_date_sk) {
						continue
					}
					for _, cc := range call_center {
						if !(cs.Call == cc.Cc_call_center_sk) {
							continue
						}
						key := GKey{
							Cat:  i.I_category,
							Call: cc.Cc_name,
							Year: d.D_year,
						}
						ks := fmt.Sprint(key)
						g, ok := groups[ks]
						if !ok {
							g = &data.Group{Key: key}
							groups[ks] = g
							order = append(order, ks)
						}
						_item := map[string]any{}
						_item["item"] = cs.Item
						_item["call"] = cs.Call
						_item["date"] = cs.Date
						_item["price"] = cs.Price
						_item["cs"] = cs
						_item["i_item_sk"] = i.I_item_sk
						_item["i_category"] = i.I_category
						_item["i_brand"] = i.I_brand
						_item["i"] = i
						_item["d_date_sk"] = d.D_date_sk
						_item["d_year"] = d.D_year
						_item["d_moy"] = d.D_moy
						_item["d"] = d
						_item["cc_call_center_sk"] = cc.Cc_call_center_sk
						_item["cc_name"] = cc.Cc_name
						_item["cc"] = cc
						g.Items = append(g.Items, _item)
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Grouped{}
		for _, g := range items {
			results = append(results, Grouped{
				Cat:  g.Key.(GKey).Cat,
				Call: g.Key.(GKey).Call,
				Year: g.Key.(GKey).Year,
				Sum_sales: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, x.Price)
					}
					return results
				}()),
			})
		}
		return results
	}()
	avg_by_year = func() []Avg_by_year {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, g := range grouped {
			key := GgKey{
				Cat:  g.Cat,
				Call: g.Call,
			}
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, g)
		}
		results := []Avg_by_year{}
		for _, ks := range order {
			g := groups[ks]
			gg := g
			results = append(results, Avg_by_year{
				Cat:  gg.Key.(GgKey).Cat,
				Call: gg.Key.(GgKey).Call,
				Avg_sales: _avgOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range gg.Items {
						results = append(results, x.Sum_sales)
					}
					return results
				}()),
			})
		}
		return results
	}()
	result = func() []Result {
		results := []Result{}
		for _, g := range grouped {
			for _, a := range avg_by_year {
				if !(_equal(g.Cat, a.Cat) && _equal(g.Call, a.Call)) {
					continue
				}
				if (_equal(g.Year, 2001) && (a.Avg_sales > float64(0))) && ((abs((g.Sum_sales - a.Avg_sales)) / a.Avg_sales) > 0.1) {
					if (_equal(g.Year, 2001) && (a.Avg_sales > float64(0))) && ((abs((g.Sum_sales - a.Avg_sales)) / a.Avg_sales) > 0.1) {
						results = append(results, Result{
							I_category: g.Cat,
							Sum_sales:  g.Sum_sales,
						})
					}
				}
			}
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q57_simplified()
}

func _avgOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	if len(s) == 0 {
		return 0
	}
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum / float64(len(s))
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
