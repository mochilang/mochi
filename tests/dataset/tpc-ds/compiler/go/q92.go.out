package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"time"
)

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

type WebSale struct {
	Ws_item_sk          int     `json:"ws_item_sk"`
	Ws_sold_date_sk     int     `json:"ws_sold_date_sk"`
	Ws_ext_discount_amt float64 `json:"ws_ext_discount_amt"`
}

func test_TPCDS_Q92_threshold() {
	expect((result == 4.0))
}

type Web_salesItem struct {
	Ws_item_sk          int     `json:"ws_item_sk"`
	Ws_sold_date_sk     int     `json:"ws_sold_date_sk"`
	Ws_ext_discount_amt float64 `json:"ws_ext_discount_amt"`
}

var web_sales []Web_salesItem

type ItemItem struct {
	I_item_sk     int `json:"i_item_sk"`
	I_manufact_id int `json:"i_manufact_id"`
}

var item []ItemItem

type Date_dimItem struct {
	D_date_sk int    `json:"d_date_sk"`
	D_date    string `json:"d_date"`
}

var date_dim []Date_dimItem
var sum_amt float64
var avg_amt float64
var result float64

func main() {
	failures := 0
	web_sales = _cast[[]Web_salesItem]([]Web_salesItem{Web_salesItem{
		Ws_item_sk:          1,
		Ws_sold_date_sk:     1,
		Ws_ext_discount_amt: 1.0,
	}, Web_salesItem{
		Ws_item_sk:          1,
		Ws_sold_date_sk:     1,
		Ws_ext_discount_amt: 1.0,
	}, Web_salesItem{
		Ws_item_sk:          1,
		Ws_sold_date_sk:     1,
		Ws_ext_discount_amt: 2.0,
	}})
	item = _cast[[]ItemItem]([]ItemItem{ItemItem{
		I_item_sk:     1,
		I_manufact_id: 1,
	}})
	date_dim = _cast[[]Date_dimItem]([]Date_dimItem{Date_dimItem{
		D_date_sk: 1,
		D_date:    "2000-01-02",
	}})
	sum_amt = _sum(func() []float64 {
		_res := []float64{}
		for _, ws := range web_sales {
			_res = append(_res, ws.Ws_ext_discount_amt)
		}
		return _res
	}())
	avg_amt = _avg(func() []float64 {
		_res := []float64{}
		for _, ws := range web_sales {
			_res = append(_res, ws.Ws_ext_discount_amt)
		}
		return _res
	}())
	result = func() float64 {
		if sum_amt > (avg_amt * 1.3) {
			return sum_amt
		} else {
			return 0.0
		}
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	{
		printTestStart("TPCDS Q92 threshold")
		start := time.Now()
		var failed error
		func() {
			defer func() {
				if r := recover(); r != nil {
					failed = fmt.Errorf("%v", r)
				}
			}()
			test_TPCDS_Q92_threshold()
		}()
		if failed != nil {
			failures++
			printTestFail(failed, time.Since(start))
		} else {
			printTestPass(time.Since(start))
		}
	}
	if failures > 0 {
		fmt.Printf("\n[FAIL] %d test(s) failed.\n", failures)
	}
}

func _avg(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []float64:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []string:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []bool:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		default:
			panic("avg() expects list or group")
		}
	}
	if len(items) == 0 {
		return 0
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("avg() expects numbers")
		}
	}
	return sum / float64(len(items))
}

func _cast[T any](v any) T {
	if tv, ok := v.(T); ok {
		return tv
	}
	var out T
	switch any(out).(type) {
	case int:
		switch vv := v.(type) {
		case int:
			return any(vv).(T)
		case float64:
			return any(int(vv)).(T)
		case float32:
			return any(int(vv)).(T)
		}
	case float64:
		switch vv := v.(type) {
		case int:
			return any(float64(vv)).(T)
		case float64:
			return any(vv).(T)
		case float32:
			return any(float64(vv)).(T)
		}
	case float32:
		switch vv := v.(type) {
		case int:
			return any(float32(vv)).(T)
		case float64:
			return any(float32(vv)).(T)
		case float32:
			return any(vv).(T)
		}
	}
	if m, ok := v.(map[any]any); ok {
		v = _convertMapAny(m)
	}
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	if err := json.Unmarshal(data, &out); err != nil {
		panic(err)
	}
	return out
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _sum(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []float64:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []string, []bool:
			panic("sum() expects numbers")
		default:
			panic("sum() expects list or group")
		}
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("sum() expects numbers")
		}
	}
	return sum
}
