//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:05:46Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"time"

	"golang.org/x/exp/constraints"
)

type Date_dim struct {
	D_date_sk   int `json:"d_date_sk"`
	D_month_seq int `json:"d_month_seq"`
}

type Grouped struct {
	Manu      any     `json:"manu"`
	Sum_sales float64 `json:"sum_sales"`
	Avg_sales float64 `json:"avg_sales"`
}

type Item struct {
	I_item_sk     int `json:"i_item_sk"`
	I_manufact_id int `json:"i_manufact_id"`
}

type Result struct {
	I_manufact_id any     `json:"i_manufact_id"`
	Sum_sales     float64 `json:"sum_sales"`
}

type Store_sale struct {
	Item  int     `json:"item"`
	Date  int     `json:"date"`
	Price float64 `json:"price"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

// line 17
var abs = func(x float64) float64 {
	if x >= 0.0 {
		return x
	}
	return -x
}

func test_TPCDS_Q53_simplified() {
	expect(_equal(result, []v{v{
		I_manufact_id: 1,
		Sum_sales:     20.0,
	}, v{
		I_manufact_id: 2,
		Sum_sales:     53.0,
	}}))
}

var item []Item
var store_sales []Store_sale
var date_dim []Date_dim
var grouped []Grouped
var result []Result

func main() {
	item = []Item{Item{
		I_item_sk:     1,
		I_manufact_id: 1,
	}, Item{
		I_item_sk:     2,
		I_manufact_id: 2,
	}}
	store_sales = []Store_sale{
		Store_sale{
			Item:  1,
			Date:  1,
			Price: 10.0,
		},
		Store_sale{
			Item:  1,
			Date:  2,
			Price: 10.0,
		},
		Store_sale{
			Item:  2,
			Date:  1,
			Price: 30.0,
		},
		Store_sale{
			Item:  2,
			Date:  2,
			Price: 23.0,
		},
	}
	date_dim = []Date_dim{Date_dim{
		D_date_sk:   1,
		D_month_seq: 1,
	}, Date_dim{
		D_date_sk:   2,
		D_month_seq: 2,
	}}
	grouped = _convSlice[v, Grouped](func() []Grouped {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, ss := range store_sales {
			for _, i := range item {
				if !(ss.Item == i.I_item_sk) {
					continue
				}
				for _, d := range date_dim {
					if !(ss.Date == d.D_date_sk) {
						continue
					}
					key := i.I_manufact_id
					ks := fmt.Sprint(key)
					g, ok := groups[ks]
					if !ok {
						g = &data.Group{Key: key}
						groups[ks] = g
						order = append(order, ks)
					}
					g.Items = append(g.Items, ss)
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Grouped{}
		for _, g := range items {
			results = append(results, Grouped{
				Manu: g.Key.(any),
				Sum_sales: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, xRaw := range g.Items {
						x := xRaw.(Store_sale)
						results = append(results, x.Price)
					}
					return results
				}()),
				Avg_sales: _avgOrdered[float64](func() []float64 {
					results := []float64{}
					for _, xRaw := range g.Items {
						x := xRaw.(Store_sale)
						results = append(results, x.Price)
					}
					return results
				}()),
			})
		}
		return results
	}())
	result = func() []Result {
		results := []Result{}
		for _, g := range grouped {
			if (g.Avg_sales > 0.0) && ((abs((g.Sum_sales - g.Avg_sales)) / g.Avg_sales) > 0.1) {
				if (g.Avg_sales > 0.0) && ((abs((g.Sum_sales - g.Avg_sales)) / g.Avg_sales) > 0.1) {
					results = append(results, Result{
						I_manufact_id: g.Manu,
						Sum_sales:     g.Sum_sales,
					})
				}
			}
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q53_simplified()
}

func _avgOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	if len(s) == 0 {
		return 0
	}
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum / float64(len(s))
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
