//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:00:53Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"time"
)

type Catalog_sale struct {
	Cs_item_sk      int `json:"cs_item_sk"`
	Cs_sold_date_sk int `json:"cs_sold_date_sk"`
}

type Date_dim struct {
	D_date_sk int    `json:"d_date_sk"`
	D_date    string `json:"d_date"`
}

type GKey struct {
	ID    string  `json:"id"`
	Desc  string  `json:"desc"`
	Price float64 `json:"price"`
}

type Inventory struct {
	Inv_item_sk          int `json:"inv_item_sk"`
	Inv_warehouse_sk     int `json:"inv_warehouse_sk"`
	Inv_date_sk          int `json:"inv_date_sk"`
	Inv_quantity_on_hand int `json:"inv_quantity_on_hand"`
}

type Item struct {
	I_item_sk       int     `json:"i_item_sk"`
	I_item_id       string  `json:"i_item_id"`
	I_item_desc     string  `json:"i_item_desc"`
	I_current_price float64 `json:"i_current_price"`
	I_manufact_id   int     `json:"i_manufact_id"`
}

type Result struct {
	I_item_id       any `json:"i_item_id"`
	I_item_desc     any `json:"i_item_desc"`
	I_current_price any `json:"i_current_price"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q37_simplified() {
	expect(_equal(result, []v{v{
		I_item_id:       "I1",
		I_item_desc:     "Item1",
		I_current_price: 30.0,
	}}))
}

var item []Item
var inventory []Inventory
var date_dim []Date_dim
var catalog_sales []Catalog_sale
var result []Result

func main() {
	item = []Item{Item{
		I_item_sk:       1,
		I_item_id:       "I1",
		I_item_desc:     "Item1",
		I_current_price: 30.0,
		I_manufact_id:   800,
	}, Item{
		I_item_sk:       2,
		I_item_id:       "I2",
		I_item_desc:     "Item2",
		I_current_price: 60.0,
		I_manufact_id:   801,
	}}
	inventory = []Inventory{Inventory{
		Inv_item_sk:          1,
		Inv_warehouse_sk:     1,
		Inv_date_sk:          1,
		Inv_quantity_on_hand: 200,
	}, Inventory{
		Inv_item_sk:          2,
		Inv_warehouse_sk:     1,
		Inv_date_sk:          1,
		Inv_quantity_on_hand: 300,
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_date:    "2000-01-15",
	}}
	catalog_sales = []Catalog_sale{Catalog_sale{
		Cs_item_sk:      1,
		Cs_sold_date_sk: 1,
	}}
	result = func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, i := range item {
			for _, inv := range inventory {
				if !(i.I_item_sk == inv.Inv_item_sk) {
					continue
				}
				for _, d := range date_dim {
					if !(inv.Inv_date_sk == d.D_date_sk) {
						continue
					}
					for _, cs := range catalog_sales {
						if !(cs.Cs_item_sk == i.I_item_sk) {
							continue
						}
						if (((((i.I_current_price >= float64(20)) && (i.I_current_price <= float64(50))) && (i.I_manufact_id >= 800)) && (i.I_manufact_id <= 803)) && (inv.Inv_quantity_on_hand >= 100)) && (inv.Inv_quantity_on_hand <= 500) {
							key := GKey{
								ID:    i.I_item_id,
								Desc:  i.I_item_desc,
								Price: i.I_current_price,
							}
							ks := fmt.Sprint(key)
							g, ok := groups[ks]
							if !ok {
								g = &data.Group{Key: key}
								groups[ks] = g
								order = append(order, ks)
							}
							_item := map[string]any{}
							_item["i_item_sk"] = i.I_item_sk
							_item["i_item_id"] = i.I_item_id
							_item["i_item_desc"] = i.I_item_desc
							_item["i_current_price"] = i.I_current_price
							_item["i_manufact_id"] = i.I_manufact_id
							_item["i"] = i
							_item["inv_item_sk"] = inv.Inv_item_sk
							_item["inv_warehouse_sk"] = inv.Inv_warehouse_sk
							_item["inv_date_sk"] = inv.Inv_date_sk
							_item["inv_quantity_on_hand"] = inv.Inv_quantity_on_hand
							_item["inv"] = inv
							_item["d_date_sk"] = d.D_date_sk
							_item["d_date"] = d.D_date
							_item["d"] = d
							_item["cs_item_sk"] = cs.Cs_item_sk
							_item["cs_sold_date_sk"] = cs.Cs_sold_date_sk
							_item["cs"] = cs
							g.Items = append(g.Items, _item)
						}
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		type pair struct {
			item *data.Group
			key  any
		}
		pairs := make([]pair, len(items))
		for idx, it := range items {
			g := it
			pairs[idx] = pair{item: it, key: g.Key.(GKey).ID}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for idx, p := range pairs {
			items[idx] = p.item
		}
		results := []Result{}
		for _, g := range items {
			results = append(results, Result{
				I_item_id:       g.Key.(GKey).ID,
				I_item_desc:     g.Key.(GKey).Desc,
				I_current_price: g.Key.(GKey).Price,
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q37_simplified()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}
