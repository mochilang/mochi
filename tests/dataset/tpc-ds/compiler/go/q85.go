//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:01:02Z

package main

import (
	"encoding/json"
	"fmt"
	"time"

	"golang.org/x/exp/constraints"
)

type Web_return struct {
	Qty  int     `json:"qty"`
	Cash float64 `json:"cash"`
	Fee  float64 `json:"fee"`
}

type v = Web_return

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q85_sample() {
	expect((result == 85.0))
}

var web_returns []Web_return
var result float64

func main() {
	web_returns = []Web_return{Web_return{
		Qty:  60,
		Cash: 20.0,
		Fee:  1.0,
	}, Web_return{
		Qty:  100,
		Cash: 30.0,
		Fee:  2.0,
	}, Web_return{
		Qty:  95,
		Cash: 25.0,
		Fee:  3.0,
	}}
	result = _avgOrdered[int](func() []int {
		results := []int{}
		for _, r := range web_returns {
			results = append(results, r.Qty)
		}
		return results
	}())
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q85_sample()
}

func _avgOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	if len(s) == 0 {
		return 0
	}
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum / float64(len(s))
}
