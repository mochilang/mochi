//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:05:03Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"time"

	"golang.org/x/exp/constraints"
)

type CatalogSale struct {
	Cs_sold_date_sk     int     `json:"cs_sold_date_sk"`
	Cs_item_sk          int     `json:"cs_item_sk"`
	Cs_bill_customer_sk int     `json:"cs_bill_customer_sk"`
	Cs_net_profit       float64 `json:"cs_net_profit"`
}

type Catalog_sale struct {
	Cs_sold_date_sk     int     `json:"cs_sold_date_sk"`
	Cs_item_sk          int     `json:"cs_item_sk"`
	Cs_bill_customer_sk int     `json:"cs_bill_customer_sk"`
	Cs_net_profit       float64 `json:"cs_net_profit"`
}

type DateDim struct {
	D_date_sk int `json:"d_date_sk"`
	D_moy     int `json:"d_moy"`
	D_year    int `json:"d_year"`
}

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_moy     int `json:"d_moy"`
	D_year    int `json:"d_year"`
}

type GKey struct {
	Item_id      string `json:"item_id"`
	Item_desc    string `json:"item_desc"`
	S_store_id   string `json:"s_store_id"`
	S_store_name string `json:"s_store_name"`
}

type Item struct {
	I_item_sk   int    `json:"i_item_sk"`
	I_item_id   string `json:"i_item_id"`
	I_item_desc string `json:"i_item_desc"`
}

type Result struct {
	I_item_id            any     `json:"i_item_id"`
	I_item_desc          any     `json:"i_item_desc"`
	S_store_id           any     `json:"s_store_id"`
	S_store_name         any     `json:"s_store_name"`
	Store_sales_profit   float64 `json:"store_sales_profit"`
	Store_returns_loss   float64 `json:"store_returns_loss"`
	Catalog_sales_profit float64 `json:"catalog_sales_profit"`
}

type Store struct {
	S_store_sk   int    `json:"s_store_sk"`
	S_store_id   string `json:"s_store_id"`
	S_store_name string `json:"s_store_name"`
}

type StoreReturn struct {
	Sr_returned_date_sk int     `json:"sr_returned_date_sk"`
	Sr_item_sk          int     `json:"sr_item_sk"`
	Sr_customer_sk      int     `json:"sr_customer_sk"`
	Sr_ticket_number    int     `json:"sr_ticket_number"`
	Sr_net_loss         float64 `json:"sr_net_loss"`
}

type StoreSale struct {
	Ss_sold_date_sk  int     `json:"ss_sold_date_sk"`
	Ss_item_sk       int     `json:"ss_item_sk"`
	Ss_store_sk      int     `json:"ss_store_sk"`
	Ss_customer_sk   int     `json:"ss_customer_sk"`
	Ss_net_profit    float64 `json:"ss_net_profit"`
	Ss_ticket_number int     `json:"ss_ticket_number"`
}

type Store_return struct {
	Sr_returned_date_sk int     `json:"sr_returned_date_sk"`
	Sr_item_sk          int     `json:"sr_item_sk"`
	Sr_customer_sk      int     `json:"sr_customer_sk"`
	Sr_ticket_number    int     `json:"sr_ticket_number"`
	Sr_net_loss         float64 `json:"sr_net_loss"`
}

type Store_sale struct {
	Ss_sold_date_sk  int     `json:"ss_sold_date_sk"`
	Ss_item_sk       int     `json:"ss_item_sk"`
	Ss_store_sk      int     `json:"ss_store_sk"`
	Ss_customer_sk   int     `json:"ss_customer_sk"`
	Ss_net_profit    float64 `json:"ss_net_profit"`
	Ss_ticket_number int     `json:"ss_ticket_number"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q25_aggregated_profit() {
	expect(_equal(result, []v{v{
		I_item_id:            "ITEM1",
		I_item_desc:          "Desc1",
		S_store_id:           "S1",
		S_store_name:         "Store1",
		Store_sales_profit:   50.0,
		Store_returns_loss:   10.0,
		Catalog_sales_profit: 30.0,
	}, v{
		I_item_id:            "ITEM2",
		I_item_desc:          "Desc2",
		S_store_id:           "S1",
		S_store_name:         "Store1",
		Store_sales_profit:   20.0,
		Store_returns_loss:   5.0,
		Catalog_sales_profit: 15.0,
	}}))
}

var store_sales []Store_sale
var store_returns []Store_return
var catalog_sales []Catalog_sale
var date_dim []Date_dim
var store []Store
var item []Item
var result []Result

func main() {
	store_sales = []Store_sale{Store_sale{
		Ss_sold_date_sk:  1,
		Ss_item_sk:       1,
		Ss_store_sk:      1,
		Ss_customer_sk:   1,
		Ss_net_profit:    50.0,
		Ss_ticket_number: 1,
	}, Store_sale{
		Ss_sold_date_sk:  1,
		Ss_item_sk:       2,
		Ss_store_sk:      1,
		Ss_customer_sk:   2,
		Ss_net_profit:    20.0,
		Ss_ticket_number: 2,
	}}
	store_returns = []Store_return{Store_return{
		Sr_returned_date_sk: 2,
		Sr_item_sk:          1,
		Sr_customer_sk:      1,
		Sr_ticket_number:    1,
		Sr_net_loss:         10.0,
	}, Store_return{
		Sr_returned_date_sk: 2,
		Sr_item_sk:          2,
		Sr_customer_sk:      2,
		Sr_ticket_number:    2,
		Sr_net_loss:         5.0,
	}}
	catalog_sales = []Catalog_sale{Catalog_sale{
		Cs_sold_date_sk:     3,
		Cs_item_sk:          1,
		Cs_bill_customer_sk: 1,
		Cs_net_profit:       30.0,
	}, Catalog_sale{
		Cs_sold_date_sk:     3,
		Cs_item_sk:          2,
		Cs_bill_customer_sk: 2,
		Cs_net_profit:       15.0,
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_moy:     4,
		D_year:    2000,
	}, Date_dim{
		D_date_sk: 2,
		D_moy:     5,
		D_year:    2000,
	}, Date_dim{
		D_date_sk: 3,
		D_moy:     6,
		D_year:    2000,
	}}
	store = []Store{Store{
		S_store_sk:   1,
		S_store_id:   "S1",
		S_store_name: "Store1",
	}}
	item = []Item{Item{
		I_item_sk:   1,
		I_item_id:   "ITEM1",
		I_item_desc: "Desc1",
	}, Item{
		I_item_sk:   2,
		I_item_id:   "ITEM2",
		I_item_desc: "Desc2",
	}}
	result = func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, ss := range store_sales {
			for _, sr := range store_returns {
				if !((ss.Ss_ticket_number == sr.Sr_ticket_number) && (ss.Ss_item_sk == sr.Sr_item_sk)) {
					continue
				}
				for _, cs := range catalog_sales {
					if !((sr.Sr_customer_sk == cs.Cs_bill_customer_sk) && (sr.Sr_item_sk == cs.Cs_item_sk)) {
						continue
					}
					for _, d1 := range date_dim {
						if !(d1.D_date_sk == ss.Ss_sold_date_sk) {
							continue
						}
						for _, d2 := range date_dim {
							if !(d2.D_date_sk == sr.Sr_returned_date_sk) {
								continue
							}
							for _, d3 := range date_dim {
								if !(d3.D_date_sk == cs.Cs_sold_date_sk) {
									continue
								}
								for _, s := range store {
									if !(s.S_store_sk == ss.Ss_store_sk) {
										continue
									}
									for _, i := range item {
										if !(i.I_item_sk == ss.Ss_item_sk) {
											continue
										}
										if (((((d1.D_moy == 4) && (d1.D_year == 2000)) && (d2.D_moy >= 4)) && (d2.D_moy <= 10)) && (d3.D_moy >= 4)) && (d3.D_moy <= 10) {
											key := GKey{
												Item_id:      i.I_item_id,
												Item_desc:    i.I_item_desc,
												S_store_id:   s.S_store_id,
												S_store_name: s.S_store_name,
											}
											ks := fmt.Sprint(key)
											g, ok := groups[ks]
											if !ok {
												g = &data.Group{Key: key}
												groups[ks] = g
												order = append(order, ks)
											}
											g.Items = append(g.Items, ss)
										}
									}
								}
							}
						}
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Result{}
		for _, g := range items {
			results = append(results, Result{
				I_item_id:    g.Key.(GKey).Item_id,
				I_item_desc:  g.Key.(GKey).Item_desc,
				S_store_id:   g.Key.(GKey).S_store_id,
				S_store_name: g.Key.(GKey).S_store_name,
				Store_sales_profit: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, xRaw := range g.Items {
						x := xRaw.(Store_sale)
						results = append(results, x.Ss_net_profit)
					}
					return results
				}()),
				Store_returns_loss: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Store_sale)
						results = append(results, x.Sr_net_loss)
					}
					return results
				}()),
				Catalog_sales_profit: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Store_sale)
						results = append(results, x.Cs_net_profit)
					}
					return results
				}()),
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q25_aggregated_profit()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _sum[T constraints.Integer | constraints.Float](v []T) float64 {
	var sum float64
	for _, n := range v {
		sum += float64(n)
	}
	return sum
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
