//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:01:00Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"time"
)

type Catalog_sale struct {
	Cs_item_sk       int `json:"cs_item_sk"`
	Cs_order_number  int `json:"cs_order_number"`
	Cs_quantity      int `json:"cs_quantity"`
	Cs_sold_date_sk  int `json:"cs_sold_date_sk"`
	Cs_ship_date_sk  int `json:"cs_ship_date_sk"`
	Cs_bill_cdemo_sk int `json:"cs_bill_cdemo_sk"`
	Cs_bill_hdemo_sk int `json:"cs_bill_hdemo_sk"`
	Cs_promo_sk      any `json:"cs_promo_sk"`
}

type Customer_demographic struct {
	Cd_demo_sk        int    `json:"cd_demo_sk"`
	Cd_marital_status string `json:"cd_marital_status"`
}

type Date_dim struct {
	D_date_sk  int `json:"d_date_sk"`
	D_week_seq int `json:"d_week_seq"`
	D_date     int `json:"d_date"`
	D_year     int `json:"d_year"`
}

type GKey struct {
	Item_desc string `json:"item_desc"`
	Warehouse string `json:"warehouse"`
	Week_seq  int    `json:"week_seq"`
}

type Household_demographic struct {
	Hd_demo_sk       int    `json:"hd_demo_sk"`
	Hd_buy_potential string `json:"hd_buy_potential"`
}

type Inventory struct {
	Inv_item_sk          int `json:"inv_item_sk"`
	Inv_warehouse_sk     int `json:"inv_warehouse_sk"`
	Inv_date_sk          int `json:"inv_date_sk"`
	Inv_quantity_on_hand int `json:"inv_quantity_on_hand"`
}

type Item struct {
	I_item_sk   int    `json:"i_item_sk"`
	I_item_desc string `json:"i_item_desc"`
}

type Result struct {
	I_item_desc      any `json:"i_item_desc"`
	W_warehouse_name any `json:"w_warehouse_name"`
	D_week_seq       any `json:"d_week_seq"`
	No_promo         int `json:"no_promo"`
	Promo            int `json:"promo"`
	Total_cnt        int `json:"total_cnt"`
}

type Warehouse struct {
	W_warehouse_sk   int    `json:"w_warehouse_sk"`
	W_warehouse_name string `json:"w_warehouse_name"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q72_simplified() {
	expect(_equal(result, []v{v{
		I_item_desc:      "ItemA",
		W_warehouse_name: "Main",
		D_week_seq:       10,
		No_promo:         1,
		Promo:            0,
		Total_cnt:        1,
	}}))
}

var catalog_sales []Catalog_sale
var inventory []Inventory
var warehouse []Warehouse
var item []Item
var customer_demographics []Customer_demographic
var household_demographics []Household_demographic
var date_dim []Date_dim
var result []Result

func main() {
	catalog_sales = []Catalog_sale{Catalog_sale{
		Cs_item_sk:       1,
		Cs_order_number:  1,
		Cs_quantity:      1,
		Cs_sold_date_sk:  1,
		Cs_ship_date_sk:  3,
		Cs_bill_cdemo_sk: 1,
		Cs_bill_hdemo_sk: 1,
		Cs_promo_sk:      nil,
	}}
	inventory = []Inventory{Inventory{
		Inv_item_sk:          1,
		Inv_warehouse_sk:     1,
		Inv_date_sk:          2,
		Inv_quantity_on_hand: 0,
	}}
	warehouse = []Warehouse{Warehouse{
		W_warehouse_sk:   1,
		W_warehouse_name: "Main",
	}}
	item = []Item{Item{
		I_item_sk:   1,
		I_item_desc: "ItemA",
	}}
	customer_demographics = []Customer_demographic{Customer_demographic{
		Cd_demo_sk:        1,
		Cd_marital_status: "M",
	}}
	household_demographics = []Household_demographic{Household_demographic{
		Hd_demo_sk:       1,
		Hd_buy_potential: "5001-10000",
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk:  1,
		D_week_seq: 10,
		D_date:     1,
		D_year:     2000,
	}, Date_dim{
		D_date_sk:  2,
		D_week_seq: 10,
		D_date:     1,
		D_year:     2000,
	}, Date_dim{
		D_date_sk:  3,
		D_week_seq: 10,
		D_date:     7,
		D_year:     2000,
	}}
	result = func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, cs := range catalog_sales {
			for _, inv := range inventory {
				if !(inv.Inv_item_sk == cs.Cs_item_sk) {
					continue
				}
				for _, w := range warehouse {
					if !(w.W_warehouse_sk == inv.Inv_warehouse_sk) {
						continue
					}
					for _, i := range item {
						if !(i.I_item_sk == cs.Cs_item_sk) {
							continue
						}
						for _, cd := range customer_demographics {
							if !(cd.Cd_demo_sk == cs.Cs_bill_cdemo_sk) {
								continue
							}
							for _, hd := range household_demographics {
								if !(hd.Hd_demo_sk == cs.Cs_bill_hdemo_sk) {
									continue
								}
								for _, d1 := range date_dim {
									if !(d1.D_date_sk == cs.Cs_sold_date_sk) {
										continue
									}
									for _, d2 := range date_dim {
										if !(d2.D_date_sk == inv.Inv_date_sk) {
											continue
										}
										for _, d3 := range date_dim {
											if !(d3.D_date_sk == cs.Cs_ship_date_sk) {
												continue
											}
											if (((((d1.D_week_seq == d2.D_week_seq) && (inv.Inv_quantity_on_hand < cs.Cs_quantity)) && (d3.D_date > (d1.D_date + 5))) && (hd.Hd_buy_potential == "5001-10000")) && (d1.D_year == 2000)) && (cd.Cd_marital_status == "M") {
												key := GKey{
													Item_desc: i.I_item_desc,
													Warehouse: w.W_warehouse_name,
													Week_seq:  d1.D_week_seq,
												}
												ks := fmt.Sprint(key)
												g, ok := groups[ks]
												if !ok {
													g = &data.Group{Key: key}
													groups[ks] = g
													order = append(order, ks)
												}
												_item := map[string]any{}
												_item["cs_item_sk"] = cs.Cs_item_sk
												_item["cs_order_number"] = cs.Cs_order_number
												_item["cs_quantity"] = cs.Cs_quantity
												_item["cs_sold_date_sk"] = cs.Cs_sold_date_sk
												_item["cs_ship_date_sk"] = cs.Cs_ship_date_sk
												_item["cs_bill_cdemo_sk"] = cs.Cs_bill_cdemo_sk
												_item["cs_bill_hdemo_sk"] = cs.Cs_bill_hdemo_sk
												_item["cs_promo_sk"] = cs.Cs_promo_sk
												_item["cs"] = cs
												_item["inv_item_sk"] = inv.Inv_item_sk
												_item["inv_warehouse_sk"] = inv.Inv_warehouse_sk
												_item["inv_date_sk"] = inv.Inv_date_sk
												_item["inv_quantity_on_hand"] = inv.Inv_quantity_on_hand
												_item["inv"] = inv
												_item["w_warehouse_sk"] = w.W_warehouse_sk
												_item["w_warehouse_name"] = w.W_warehouse_name
												_item["w"] = w
												_item["i_item_sk"] = i.I_item_sk
												_item["i_item_desc"] = i.I_item_desc
												_item["i"] = i
												_item["cd_demo_sk"] = cd.Cd_demo_sk
												_item["cd_marital_status"] = cd.Cd_marital_status
												_item["cd"] = cd
												_item["hd_demo_sk"] = hd.Hd_demo_sk
												_item["hd_buy_potential"] = hd.Hd_buy_potential
												_item["hd"] = hd
												_item["d_date_sk"] = d1.D_date_sk
												_item["d_week_seq"] = d1.D_week_seq
												_item["d_date"] = d1.D_date
												_item["d_year"] = d1.D_year
												_item["d1"] = d1
												_item["d_date_sk"] = d2.D_date_sk
												_item["d_week_seq"] = d2.D_week_seq
												_item["d_date"] = d2.D_date
												_item["d_year"] = d2.D_year
												_item["d2"] = d2
												_item["d_date_sk"] = d3.D_date_sk
												_item["d_week_seq"] = d3.D_week_seq
												_item["d_date"] = d3.D_date
												_item["d_year"] = d3.D_year
												_item["d3"] = d3
												g.Items = append(g.Items, _item)
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Result{}
		for _, g := range items {
			results = append(results, Result{
				I_item_desc:      g.Key.(GKey).Item_desc,
				W_warehouse_name: g.Key.(GKey).Warehouse,
				D_week_seq:       g.Key.(GKey).Week_seq,
				No_promo: len(func() []Catalog_sale {
					results := []Catalog_sale{}
					for _, x := range g.Items {
						if _equal(x.Cs_promo_sk, nil) {
							if _equal(x.Cs_promo_sk, nil) {
								results = append(results, x)
							}
						}
					}
					return results
				}()),
				Promo: len(func() []Catalog_sale {
					results := []Catalog_sale{}
					for _, x := range g.Items {
						if !_equal(x.Cs_promo_sk, nil) {
							if !_equal(x.Cs_promo_sk, nil) {
								results = append(results, x)
							}
						}
					}
					return results
				}()),
				Total_cnt: len(g.Items),
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q72_simplified()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}
