//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:05:39Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"slices"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Base struct {
	Ca_zip             any     `json:"ca_zip"`
	Sum_ws_sales_price float64 `json:"sum_ws_sales_price"`
}

type Customer struct {
	C_customer_sk     int `json:"c_customer_sk"`
	C_current_addr_sk int `json:"c_current_addr_sk"`
}

type Customer_addres struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_zip        string `json:"ca_zip"`
}

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_qoy     int `json:"d_qoy"`
	D_year    int `json:"d_year"`
}

type Item struct {
	I_item_sk int    `json:"i_item_sk"`
	I_item_id string `json:"i_item_id"`
}

type Web_sale struct {
	Bill_customer_sk int     `json:"bill_customer_sk"`
	Item_sk          int     `json:"item_sk"`
	Sold_date_sk     int     `json:"sold_date_sk"`
	Sales_price      float64 `json:"sales_price"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q45_simplified() {
	expect(_equal(records, []v{v{
		Ca_zip:             "85669",
		Sum_ws_sales_price: 50.0,
	}, v{
		Ca_zip:             "99999",
		Sum_ws_sales_price: 30.0,
	}}))
}

var web_sales []Web_sale
var customer []Customer
var customer_address []Customer_addres
var item []Item
var date_dim []Date_dim
var zip_list []string
var item_ids []string
var qoy int
var year int
var base []Base
var records []Base

func main() {
	web_sales = []Web_sale{Web_sale{
		Bill_customer_sk: 1,
		Item_sk:          1,
		Sold_date_sk:     1,
		Sales_price:      50.0,
	}, Web_sale{
		Bill_customer_sk: 2,
		Item_sk:          2,
		Sold_date_sk:     1,
		Sales_price:      30.0,
	}}
	customer = []Customer{Customer{
		C_customer_sk:     1,
		C_current_addr_sk: 1,
	}, Customer{
		C_customer_sk:     2,
		C_current_addr_sk: 2,
	}}
	customer_address = []Customer_addres{Customer_addres{
		Ca_address_sk: 1,
		Ca_zip:        "85669",
	}, Customer_addres{
		Ca_address_sk: 2,
		Ca_zip:        "99999",
	}}
	item = []Item{Item{
		I_item_sk: 1,
		I_item_id: "I1",
	}, Item{
		I_item_sk: 2,
		I_item_id: "I2",
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_qoy:     1,
		D_year:    2020,
	}}
	zip_list = []string{
		"85669",
		"86197",
		"88274",
		"83405",
		"86475",
		"85392",
		"85460",
		"80348",
		"81792",
	}
	item_ids = []string{"I2"}
	qoy = 1
	year = 2020
	base = _convSlice[v, Base](func() []Base {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, ws := range web_sales {
			for _, c := range customer {
				if !(ws.Bill_customer_sk == c.C_customer_sk) {
					continue
				}
				for _, ca := range customer_address {
					if !(c.C_current_addr_sk == ca.Ca_address_sk) {
						continue
					}
					for _, i := range item {
						if !(ws.Item_sk == i.I_item_sk) {
							continue
						}
						for _, d := range date_dim {
							if !(ws.Sold_date_sk == d.D_date_sk) {
								continue
							}
							if ((slices.Contains(zip_list, _sliceString(ca.Ca_zip, 0, 5)) || slices.Contains(item_ids, i.I_item_id)) && (d.D_qoy == qoy)) && (d.D_year == year) {
								key := ca.Ca_zip
								ks := fmt.Sprint(key)
								g, ok := groups[ks]
								if !ok {
									g = &data.Group{Key: key}
									groups[ks] = g
									order = append(order, ks)
								}
								g.Items = append(g.Items, ws)
							}
						}
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Base{}
		for _, g := range items {
			results = append(results, Base{
				Ca_zip: g.Key.(any),
				Sum_ws_sales_price: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Web_sale)
						results = append(results, _getField(x.Ws, "sales_price"))
					}
					return results
				}()),
			})
		}
		return results
	}())
	records = base
	func() { b, _ := json.Marshal(records); fmt.Println(string(b)) }()
	test_TPCDS_Q45_simplified()
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}

func _sliceString(s string, i, j int) string {
	start := i
	end := j
	n := len([]rune(s))
	if start < 0 {
		start += n
	}
	if end < 0 {
		end += n
	}
	if start < 0 {
		start = 0
	}
	if end > n {
		end = n
	}
	if end < start {
		end = start
	}
	return string([]rune(s)[start:end])
}

func _sum[T constraints.Integer | constraints.Float](v []T) float64 {
	var sum float64
	for _, n := range v {
		sum += float64(n)
	}
	return sum
}
