//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:01:02Z

package main

import (
	"encoding/json"
	"fmt"
	"time"
)

type Inventory struct {
	Item int `json:"item"`
	Qty  int `json:"qty"`
}

type Item struct {
	ID int `json:"id"`
}

type Store_sale struct {
	Item int `json:"item"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q82_sample() {
	expect((result == 82))
}

var item []Item
var inventory []Inventory
var store_sales []Store_sale
var result int

func main() {
	item = []Item{Item{ID: 1}, Item{ID: 2}, Item{ID: 3}}
	inventory = []Inventory{
		Inventory{
			Item: 1,
			Qty:  20,
		},
		Inventory{
			Item: 1,
			Qty:  22,
		},
		Inventory{
			Item: 1,
			Qty:  5,
		},
		Inventory{
			Item: 2,
			Qty:  30,
		},
		Inventory{
			Item: 2,
			Qty:  5,
		},
		Inventory{
			Item: 3,
			Qty:  10,
		},
	}
	store_sales = []Store_sale{Store_sale{Item: 1}, Store_sale{Item: 2}}
	result = 0
	for _, inv := range inventory {
		for _, s := range store_sales {
			if inv.Item == s.Item {
				result = (result + inv.Qty)
			}
		}
	}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q82_sample()
}
