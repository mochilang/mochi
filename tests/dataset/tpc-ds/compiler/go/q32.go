//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:05:19Z

package main

import (
	"encoding/json"
	"fmt"
	"time"

	"golang.org/x/exp/constraints"
)

type Catalog_sale struct {
	Cs_item_sk          int     `json:"cs_item_sk"`
	Cs_sold_date_sk     int     `json:"cs_sold_date_sk"`
	Cs_ext_discount_amt float64 `json:"cs_ext_discount_amt"`
}

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
}

type Item struct {
	I_item_sk     int `json:"i_item_sk"`
	I_manufact_id int `json:"i_manufact_id"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q32_simplified() {
	expect((result == 20.0))
}

var catalog_sales []Catalog_sale
var item []Item
var date_dim []Date_dim
var filtered []float64
var avg_discount float64
var result float64

func main() {
	catalog_sales = []Catalog_sale{Catalog_sale{
		Cs_item_sk:          1,
		Cs_sold_date_sk:     1,
		Cs_ext_discount_amt: 5.0,
	}, Catalog_sale{
		Cs_item_sk:          1,
		Cs_sold_date_sk:     2,
		Cs_ext_discount_amt: 10.0,
	}, Catalog_sale{
		Cs_item_sk:          1,
		Cs_sold_date_sk:     3,
		Cs_ext_discount_amt: 20.0,
	}}
	item = []Item{Item{
		I_item_sk:     1,
		I_manufact_id: 1,
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_year:    2000,
	}, Date_dim{
		D_date_sk: 2,
		D_year:    2000,
	}, Date_dim{
		D_date_sk: 3,
		D_year:    2000,
	}}
	filtered = func() []float64 {
		results := []float64{}
		for _, cs := range catalog_sales {
			for _, i := range item {
				if !(cs.Cs_item_sk == i.I_item_sk) {
					continue
				}
				for _, d := range date_dim {
					if !(cs.Cs_sold_date_sk == d.D_date_sk) {
						continue
					}
					if (i.I_manufact_id == 1) && (d.D_year == 2000) {
						if (i.I_manufact_id == 1) && (d.D_year == 2000) {
							results = append(results, cs.Cs_ext_discount_amt)
						}
					}
				}
			}
		}
		return results
	}()
	avg_discount = _avgOrdered[float64](filtered)
	result = _sumOrdered[float64](func() []float64 {
		results := []float64{}
		for _, x := range filtered {
			if x > (avg_discount * 1.3) {
				if x > (avg_discount * 1.3) {
					results = append(results, x)
				}
			}
		}
		return results
	}())
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q32_simplified()
}

func _avgOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	if len(s) == 0 {
		return 0
	}
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum / float64(len(s))
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
