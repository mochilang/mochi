package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"time"
)

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q48_simplified() {
	expect((result == 35))
}

type Store_salesItem struct {
	Cdemo_sk     int     `json:"cdemo_sk"`
	Addr_sk      int     `json:"addr_sk"`
	Sold_date_sk int     `json:"sold_date_sk"`
	Sales_price  float64 `json:"sales_price"`
	Net_profit   float64 `json:"net_profit"`
	Quantity     int     `json:"quantity"`
}

var store_sales []Store_salesItem

type StoreItem struct {
	S_store_sk int `json:"s_store_sk"`
}

var store []StoreItem

type Customer_demographicsItem struct {
	Cd_demo_sk          int    `json:"cd_demo_sk"`
	Cd_marital_status   string `json:"cd_marital_status"`
	Cd_education_status string `json:"cd_education_status"`
}

var customer_demographics []Customer_demographicsItem

type Customer_addressItem struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_country    string `json:"ca_country"`
	Ca_state      string `json:"ca_state"`
}

var customer_address []Customer_addressItem

type Date_dimItem struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
}

var date_dim []Date_dimItem
var year int
var states1 []string
var states2 []string
var states3 []string
var qty_base []int
var qty []int
var result float64

func main() {
	failures := 0
	store_sales = _cast[[]Store_salesItem]([]Store_salesItem{Store_salesItem{
		Cdemo_sk:     1,
		Addr_sk:      1,
		Sold_date_sk: 1,
		Sales_price:  120.0,
		Net_profit:   1000.0,
		Quantity:     5,
	}, Store_salesItem{
		Cdemo_sk:     2,
		Addr_sk:      2,
		Sold_date_sk: 1,
		Sales_price:  60.0,
		Net_profit:   2000.0,
		Quantity:     10,
	}, Store_salesItem{
		Cdemo_sk:     3,
		Addr_sk:      3,
		Sold_date_sk: 1,
		Sales_price:  170.0,
		Net_profit:   10000.0,
		Quantity:     20,
	}})
	store = _cast[[]StoreItem]([]StoreItem{StoreItem{S_store_sk: 1}})
	customer_demographics = _cast[[]Customer_demographicsItem]([]Customer_demographicsItem{Customer_demographicsItem{
		Cd_demo_sk:          1,
		Cd_marital_status:   "S",
		Cd_education_status: "E1",
	}, Customer_demographicsItem{
		Cd_demo_sk:          2,
		Cd_marital_status:   "M",
		Cd_education_status: "E2",
	}, Customer_demographicsItem{
		Cd_demo_sk:          3,
		Cd_marital_status:   "W",
		Cd_education_status: "E3",
	}})
	customer_address = _cast[[]Customer_addressItem]([]Customer_addressItem{Customer_addressItem{
		Ca_address_sk: 1,
		Ca_country:    "United States",
		Ca_state:      "TX",
	}, Customer_addressItem{
		Ca_address_sk: 2,
		Ca_country:    "United States",
		Ca_state:      "CA",
	}, Customer_addressItem{
		Ca_address_sk: 3,
		Ca_country:    "United States",
		Ca_state:      "NY",
	}})
	date_dim = _cast[[]Date_dimItem]([]Date_dimItem{Date_dimItem{
		D_date_sk: 1,
		D_year:    2000,
	}})
	year = 2000
	states1 = []string{"TX"}
	states2 = []string{"CA"}
	states3 = []string{"NY"}
	qty_base = func() []int {
		_res := []int{}
		for _, ss := range store_sales {
			for _, cd := range customer_demographics {
				if !(ss.Cdemo_sk == cd.Cd_demo_sk) {
					continue
				}
				for _, ca := range customer_address {
					if !(ss.Addr_sk == ca.Ca_address_sk) {
						continue
					}
					for _, d := range date_dim {
						if !(ss.Sold_date_sk == d.D_date_sk) {
							continue
						}
						if ((d.D_year == year) && ((((((cd.Cd_marital_status == "S") && (cd.Cd_education_status == "E1")) && (ss.Sales_price >= 100.0)) && (ss.Sales_price <= 150.0)) || ((((cd.Cd_marital_status == "M") && (cd.Cd_education_status == "E2")) && (ss.Sales_price >= 50.0)) && (ss.Sales_price <= 100.0))) || ((((cd.Cd_marital_status == "W") && (cd.Cd_education_status == "E3")) && (ss.Sales_price >= 150.0)) && (ss.Sales_price <= 200.0)))) && ((((_contains[string](states1, ca.Ca_state) && (ss.Net_profit >= 0)) && (ss.Net_profit <= 2000)) || ((_contains[string](states2, ca.Ca_state) && (ss.Net_profit >= 150)) && (ss.Net_profit <= 3000))) || ((_contains[string](states3, ca.Ca_state) && (ss.Net_profit >= 50)) && (ss.Net_profit <= 25000))) {
							if ((d.D_year == year) && ((((((cd.Cd_marital_status == "S") && (cd.Cd_education_status == "E1")) && (ss.Sales_price >= 100.0)) && (ss.Sales_price <= 150.0)) || ((((cd.Cd_marital_status == "M") && (cd.Cd_education_status == "E2")) && (ss.Sales_price >= 50.0)) && (ss.Sales_price <= 100.0))) || ((((cd.Cd_marital_status == "W") && (cd.Cd_education_status == "E3")) && (ss.Sales_price >= 150.0)) && (ss.Sales_price <= 200.0)))) && ((((_contains[string](states1, ca.Ca_state) && (ss.Net_profit >= 0)) && (ss.Net_profit <= 2000)) || ((_contains[string](states2, ca.Ca_state) && (ss.Net_profit >= 150)) && (ss.Net_profit <= 3000))) || ((_contains[string](states3, ca.Ca_state) && (ss.Net_profit >= 50)) && (ss.Net_profit <= 25000))) {
								_res = append(_res, ss.Quantity)
							}
						}
					}
				}
			}
		}
		return _res
	}()
	qty = qty_base
	result = _sum(qty)
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	{
		printTestStart("TPCDS Q48 simplified")
		start := time.Now()
		var failed error
		func() {
			defer func() {
				if r := recover(); r != nil {
					failed = fmt.Errorf("%v", r)
				}
			}()
			test_TPCDS_Q48_simplified()
		}()
		if failed != nil {
			failures++
			printTestFail(failed, time.Since(start))
		} else {
			printTestPass(time.Since(start))
		}
	}
	if failures > 0 {
		fmt.Printf("\n[FAIL] %d test(s) failed.\n", failures)
	}
}

func _cast[T any](v any) T {
	if tv, ok := v.(T); ok {
		return tv
	}
	var out T
	switch any(out).(type) {
	case int:
		switch vv := v.(type) {
		case int:
			return any(vv).(T)
		case float64:
			return any(int(vv)).(T)
		case float32:
			return any(int(vv)).(T)
		}
	case float64:
		switch vv := v.(type) {
		case int:
			return any(float64(vv)).(T)
		case float64:
			return any(vv).(T)
		case float32:
			return any(float64(vv)).(T)
		}
	case float32:
		switch vv := v.(type) {
		case int:
			return any(float32(vv)).(T)
		case float64:
			return any(float32(vv)).(T)
		case float32:
			return any(vv).(T)
		}
	}
	if m, ok := v.(map[any]any); ok {
		v = _convertMapAny(m)
	}
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	if err := json.Unmarshal(data, &out); err != nil {
		panic(err)
	}
	return out
}

func _contains[T comparable](s []T, v T) bool {
	for _, x := range s {
		if x == v {
			return true
		}
	}
	return false
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _sum(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []float64:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []string, []bool:
			panic("sum() expects numbers")
		default:
			panic("sum() expects list or group")
		}
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("sum() expects numbers")
		}
	}
	return sum
}
