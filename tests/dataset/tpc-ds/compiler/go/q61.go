//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:05:52Z

package main

import (
	"encoding/json"
	"fmt"
	"time"

	"golang.org/x/exp/constraints"
)

type Sale struct {
	Promo bool `json:"promo"`
	Price int  `json:"price"`
}

type v = Sale

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q61_simplified() {
	expect((result == 61))
}

var sales []Sale
var promotions float64
var total float64
var result float64

func main() {
	sales = []Sale{Sale{
		Promo: true,
		Price: 20,
	}, Sale{
		Promo: true,
		Price: 41,
	}, Sale{
		Promo: false,
		Price: 39,
	}}
	promotions = _sumOrdered[int](func() []int {
		results := []int{}
		for _, s := range sales {
			if s.Promo {
				if s.Promo {
					results = append(results, s.Price)
				}
			}
		}
		return results
	}())
	total = _sumOrdered[int](func() []int {
		results := []int{}
		for _, s := range sales {
			results = append(results, s.Price)
		}
		return results
	}())
	result = ((promotions * float64(100)) / total)
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q61_simplified()
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
