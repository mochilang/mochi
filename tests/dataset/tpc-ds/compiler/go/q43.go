//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:00:55Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"time"

	"golang.org/x/exp/constraints"
)

type Base struct {
	S_store_name any     `json:"s_store_name"`
	S_store_id   any     `json:"s_store_id"`
	Sun_sales    float64 `json:"sun_sales"`
	Mon_sales    float64 `json:"mon_sales"`
	Tue_sales    float64 `json:"tue_sales"`
	Wed_sales    float64 `json:"wed_sales"`
	Thu_sales    float64 `json:"thu_sales"`
	Fri_sales    float64 `json:"fri_sales"`
	Sat_sales    float64 `json:"sat_sales"`
}

type Date_dim struct {
	Date_sk    int    `json:"date_sk"`
	D_day_name string `json:"d_day_name"`
	D_year     int    `json:"d_year"`
}

type GKey struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

type Record struct {
	D_day_name   string  `json:"d_day_name"`
	S_store_name string  `json:"s_store_name"`
	S_store_id   string  `json:"s_store_id"`
	Price        float64 `json:"price"`
}

type Store struct {
	Store_sk   int    `json:"store_sk"`
	Store_id   string `json:"store_id"`
	Store_name string `json:"store_name"`
	Gmt_offset int    `json:"gmt_offset"`
}

type Store_sale struct {
	Sold_date_sk int     `json:"sold_date_sk"`
	Store_sk     int     `json:"store_sk"`
	Sales_price  float64 `json:"sales_price"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q43_simplified() {
	expect(_equal(result, []v{v{
		S_store_name: "Main",
		S_store_id:   "S1",
		Sun_sales:    10.0,
		Mon_sales:    20.0,
		Tue_sales:    30.0,
		Wed_sales:    40.0,
		Thu_sales:    50.0,
		Fri_sales:    60.0,
		Sat_sales:    70.0,
	}}))
}

var date_dim []Date_dim
var store []Store
var store_sales []Store_sale
var year int
var gmt int
var records []Record
var base []Base
var result []Base

func main() {
	date_dim = []Date_dim{
		Date_dim{
			Date_sk:    1,
			D_day_name: "Sunday",
			D_year:     2020,
		},
		Date_dim{
			Date_sk:    2,
			D_day_name: "Monday",
			D_year:     2020,
		},
		Date_dim{
			Date_sk:    3,
			D_day_name: "Tuesday",
			D_year:     2020,
		},
		Date_dim{
			Date_sk:    4,
			D_day_name: "Wednesday",
			D_year:     2020,
		},
		Date_dim{
			Date_sk:    5,
			D_day_name: "Thursday",
			D_year:     2020,
		},
		Date_dim{
			Date_sk:    6,
			D_day_name: "Friday",
			D_year:     2020,
		},
		Date_dim{
			Date_sk:    7,
			D_day_name: "Saturday",
			D_year:     2020,
		},
	}
	store = []Store{Store{
		Store_sk:   1,
		Store_id:   "S1",
		Store_name: "Main",
		Gmt_offset: 0,
	}}
	store_sales = []Store_sale{
		Store_sale{
			Sold_date_sk: 1,
			Store_sk:     1,
			Sales_price:  10.0,
		},
		Store_sale{
			Sold_date_sk: 2,
			Store_sk:     1,
			Sales_price:  20.0,
		},
		Store_sale{
			Sold_date_sk: 3,
			Store_sk:     1,
			Sales_price:  30.0,
		},
		Store_sale{
			Sold_date_sk: 4,
			Store_sk:     1,
			Sales_price:  40.0,
		},
		Store_sale{
			Sold_date_sk: 5,
			Store_sk:     1,
			Sales_price:  50.0,
		},
		Store_sale{
			Sold_date_sk: 6,
			Store_sk:     1,
			Sales_price:  60.0,
		},
		Store_sale{
			Sold_date_sk: 7,
			Store_sk:     1,
			Sales_price:  70.0,
		},
	}
	year = 2020
	gmt = 0
	records = func() []Record {
		results := []Record{}
		for _, d := range date_dim {
			for _, ss := range store_sales {
				if !(ss.Sold_date_sk == d.Date_sk) {
					continue
				}
				for _, s := range store {
					if !(ss.Store_sk == s.Store_sk) {
						continue
					}
					if (s.Gmt_offset == gmt) && (d.D_year == year) {
						if (s.Gmt_offset == gmt) && (d.D_year == year) {
							results = append(results, Record{
								D_day_name:   d.D_day_name,
								S_store_name: s.Store_name,
								S_store_id:   s.Store_id,
								Price:        ss.Sales_price,
							})
						}
					}
				}
			}
		}
		return results
	}()
	base = func() []Base {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, r := range records {
			key := GKey{
				Name: r.S_store_name,
				ID:   r.S_store_id,
			}
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, r)
		}
		results := []Base{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, Base{
				S_store_name: g.Key.(GKey).Name,
				S_store_id:   g.Key.(GKey).ID,
				Sun_sales: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, func() float64 {
							if x.D_day_name == "Sunday" {
								return x.Price
							} else {
								return 0.0
							}
						}())
					}
					return results
				}()),
				Mon_sales: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, func() float64 {
							if x.D_day_name == "Monday" {
								return x.Price
							} else {
								return 0.0
							}
						}())
					}
					return results
				}()),
				Tue_sales: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, func() float64 {
							if x.D_day_name == "Tuesday" {
								return x.Price
							} else {
								return 0.0
							}
						}())
					}
					return results
				}()),
				Wed_sales: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, func() float64 {
							if x.D_day_name == "Wednesday" {
								return x.Price
							} else {
								return 0.0
							}
						}())
					}
					return results
				}()),
				Thu_sales: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, func() float64 {
							if x.D_day_name == "Thursday" {
								return x.Price
							} else {
								return 0.0
							}
						}())
					}
					return results
				}()),
				Fri_sales: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, func() float64 {
							if x.D_day_name == "Friday" {
								return x.Price
							} else {
								return 0.0
							}
						}())
					}
					return results
				}()),
				Sat_sales: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, func() float64 {
							if x.D_day_name == "Saturday" {
								return x.Price
							} else {
								return 0.0
							}
						}())
					}
					return results
				}()),
			})
		}
		return results
	}()
	result = base
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q43_simplified()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
