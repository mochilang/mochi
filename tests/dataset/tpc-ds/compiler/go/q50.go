//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:05:42Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"strings"
	"time"
)

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
	D_moy     int `json:"d_moy"`
}

type Joined struct {
	S    Store `json:"s"`
	Diff int   `json:"diff"`
}

type Result struct {
	S_store_name any `json:"s_store_name"`
	D30          int `json:"d30"`
	D31_60       int `json:"d31_60"`
	D61_90       int `json:"d61_90"`
	D91_120      int `json:"d91_120"`
	D_gt_120     int `json:"d_gt_120"`
}

type Store struct {
	S_store_sk      int    `json:"s_store_sk"`
	S_store_name    string `json:"s_store_name"`
	S_company_id    int    `json:"s_company_id"`
	S_street_number string `json:"s_street_number"`
	S_street_name   string `json:"s_street_name"`
	S_street_type   string `json:"s_street_type"`
	S_suite_number  string `json:"s_suite_number"`
	S_city          string `json:"s_city"`
	S_county        string `json:"s_county"`
	S_state         string `json:"s_state"`
	S_zip           string `json:"s_zip"`
}

type Store_return struct {
	Ticket   int `json:"ticket"`
	Item     int `json:"item"`
	Returned int `json:"returned"`
	Customer int `json:"customer"`
}

type Store_sale struct {
	Ticket   int `json:"ticket"`
	Item     int `json:"item"`
	Sold     int `json:"sold"`
	Customer int `json:"customer"`
	Store    int `json:"store"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q50_simplified() {
	expect(_equal(result, []v{v{
		S_store_name: "Main",
		D30:          1,
		D31_60:       1,
		D61_90:       1,
		D91_120:      1,
		D_gt_120:     1,
	}}))
}

var store_sales []Store_sale
var store_returns []Store_return
var date_dim []Date_dim
var store []Store
var year int
var month int
var joined []Joined
var result []Result

func main() {
	store_sales = []Store_sale{
		Store_sale{
			Ticket:   1,
			Item:     101,
			Sold:     1,
			Customer: 1,
			Store:    1,
		},
		Store_sale{
			Ticket:   2,
			Item:     102,
			Sold:     1,
			Customer: 1,
			Store:    1,
		},
		Store_sale{
			Ticket:   3,
			Item:     103,
			Sold:     1,
			Customer: 1,
			Store:    1,
		},
		Store_sale{
			Ticket:   4,
			Item:     104,
			Sold:     1,
			Customer: 1,
			Store:    1,
		},
		Store_sale{
			Ticket:   5,
			Item:     105,
			Sold:     1,
			Customer: 1,
			Store:    1,
		},
	}
	store_returns = []Store_return{
		Store_return{
			Ticket:   1,
			Item:     101,
			Returned: 16,
			Customer: 1,
		},
		Store_return{
			Ticket:   2,
			Item:     102,
			Returned: 46,
			Customer: 1,
		},
		Store_return{
			Ticket:   3,
			Item:     103,
			Returned: 76,
			Customer: 1,
		},
		Store_return{
			Ticket:   4,
			Item:     104,
			Returned: 111,
			Customer: 1,
		},
		Store_return{
			Ticket:   5,
			Item:     105,
			Returned: 151,
			Customer: 1,
		},
	}
	date_dim = []Date_dim{
		Date_dim{
			D_date_sk: 1,
			D_year:    2001,
			D_moy:     7,
		},
		Date_dim{
			D_date_sk: 16,
			D_year:    2001,
			D_moy:     8,
		},
		Date_dim{
			D_date_sk: 46,
			D_year:    2001,
			D_moy:     8,
		},
		Date_dim{
			D_date_sk: 76,
			D_year:    2001,
			D_moy:     8,
		},
		Date_dim{
			D_date_sk: 111,
			D_year:    2001,
			D_moy:     8,
		},
		Date_dim{
			D_date_sk: 151,
			D_year:    2001,
			D_moy:     8,
		},
	}
	store = []Store{Store{
		S_store_sk:      1,
		S_store_name:    "Main",
		S_company_id:    1,
		S_street_number: "1",
		S_street_name:   "Main",
		S_street_type:   "St",
		S_suite_number:  "100",
		S_city:          "City",
		S_county:        "County",
		S_state:         "CA",
		S_zip:           "12345",
	}}
	year = 2001
	month = 8
	joined = func() []Joined {
		results := []Joined{}
		for _, ss := range store_sales {
			for _, sr := range store_returns {
				if !(((ss.Ticket == sr.Ticket) && (ss.Item == sr.Item)) && (ss.Customer == sr.Customer)) {
					continue
				}
				for _, d1 := range date_dim {
					if !(ss.Sold == d1.D_date_sk) {
						continue
					}
					for _, d2 := range date_dim {
						if !(((sr.Returned == d2.D_date_sk) && (d2.D_year == year)) && (d2.D_moy == month)) {
							continue
						}
						for _, s := range store {
							if !(ss.Store == s.S_store_sk) {
								continue
							}
							results = append(results, Joined{
								S:    s,
								Diff: (sr.Returned - ss.Sold),
							})
						}
					}
				}
			}
		}
		return results
	}()
	result = func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, j := range joined {
			key := j.S
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, j)
		}
		results := []Result{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, Result{
				S_store_name: _getField(g.Key.(any), "s_store_name"),
				D30: len(func() []int {
					results := []int{}
					for _, xRaw := range g.Items {
						x := xRaw.(Joined)
						if x.Diff <= 30 {
							if x.Diff <= 30 {
								results = append(results, 1)
							}
						}
					}
					return results
				}()),
				D31_60: len(func() []int {
					results := []int{}
					for _, xRaw := range g.Items {
						x := xRaw.(Joined)
						if (x.Diff > 30) && (x.Diff <= 60) {
							if (x.Diff > 30) && (x.Diff <= 60) {
								results = append(results, 1)
							}
						}
					}
					return results
				}()),
				D61_90: len(func() []int {
					results := []int{}
					for _, xRaw := range g.Items {
						x := xRaw.(Joined)
						if (x.Diff > 60) && (x.Diff <= 90) {
							if (x.Diff > 60) && (x.Diff <= 90) {
								results = append(results, 1)
							}
						}
					}
					return results
				}()),
				D91_120: len(func() []int {
					results := []int{}
					for _, xRaw := range g.Items {
						x := xRaw.(Joined)
						if (x.Diff > 90) && (x.Diff <= 120) {
							if (x.Diff > 90) && (x.Diff <= 120) {
								results = append(results, 1)
							}
						}
					}
					return results
				}()),
				D_gt_120: len(func() []int {
					results := []int{}
					for _, xRaw := range g.Items {
						x := xRaw.(Joined)
						if x.Diff > 120 {
							if x.Diff > 120 {
								results = append(results, 1)
							}
						}
					}
					return results
				}()),
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q50_simplified()
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}
