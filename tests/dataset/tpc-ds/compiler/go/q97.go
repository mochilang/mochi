//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:01:04Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"time"
)

type CatalogSale struct {
	Cs_bill_customer_sk int `json:"cs_bill_customer_sk"`
	Cs_item_sk          int `json:"cs_item_sk"`
}

type Catalog_sale struct {
	Cs_bill_customer_sk int `json:"cs_bill_customer_sk"`
	Cs_item_sk          int `json:"cs_item_sk"`
}

type Csci struct {
	Customer_sk any `json:"customer_sk"`
	Item_sk     any `json:"item_sk"`
}

type GKey struct {
	Customer_sk int `json:"customer_sk"`
	Item_sk     int `json:"item_sk"`
}

type Ssci struct {
	Customer_sk any `json:"customer_sk"`
	Item_sk     any `json:"item_sk"`
}

type StoreSale struct {
	Ss_customer_sk int `json:"ss_customer_sk"`
	Ss_item_sk     int `json:"ss_item_sk"`
}

type Store_sale struct {
	Ss_customer_sk int `json:"ss_customer_sk"`
	Ss_item_sk     int `json:"ss_item_sk"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q97_overlap() {
	expect((((result["store_only"] == 1) && (result["catalog_only"] == 1)) && (result["store_and_catalog"] == 1)))
}

var store_sales []Store_sale
var catalog_sales []Catalog_sale
var ssci []Ssci
var csci []Csci
var both int
var store_only int
var catalog_only int
var result v

func main() {
	store_sales = []Store_sale{Store_sale{
		Ss_customer_sk: 1,
		Ss_item_sk:     1,
	}, Store_sale{
		Ss_customer_sk: 2,
		Ss_item_sk:     1,
	}}
	catalog_sales = []Catalog_sale{Catalog_sale{
		Cs_bill_customer_sk: 1,
		Cs_item_sk:          1,
	}, Catalog_sale{
		Cs_bill_customer_sk: 3,
		Cs_item_sk:          2,
	}}
	ssci = func() []Ssci {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, ss := range store_sales {
			key := GKey{
				Customer_sk: ss.Ss_customer_sk,
				Item_sk:     ss.Ss_item_sk,
			}
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, ss)
		}
		results := []Ssci{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, Ssci{
				Customer_sk: g.Key.(GKey).Customer_sk,
				Item_sk:     g.Key.(GKey).Item_sk,
			})
		}
		return results
	}()
	csci = func() []Csci {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, cs := range catalog_sales {
			key := GKey{
				Customer_sk: cs.Cs_bill_customer_sk,
				Item_sk:     cs.Cs_item_sk,
			}
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, cs)
		}
		results := []Csci{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, Csci{
				Customer_sk: g.Key.(GKey).Customer_sk,
				Item_sk:     g.Key.(GKey).Item_sk,
			})
		}
		return results
	}()
	both = len(func() []int {
		results := []int{}
		for _, s := range ssci {
			for _, c := range csci {
				if !(_equal(s.Customer_sk, c.Customer_sk) && _equal(s.Item_sk, c.Item_sk)) {
					continue
				}
				results = append(results, 1)
			}
		}
		return results
	}())
	store_only = len(func() []int {
		results := []int{}
		for _, s := range ssci {
			if !(len(func() []Csci {
				results := []Csci{}
				for _, c := range csci {
					if _equal(s.Customer_sk, c.Customer_sk) && _equal(s.Item_sk, c.Item_sk) {
						if _equal(s.Customer_sk, c.Customer_sk) && _equal(s.Item_sk, c.Item_sk) {
							results = append(results, c)
						}
					}
				}
				return results
			}()) > 0) {
				if !(len(func() []Csci {
					results := []Csci{}
					for _, c := range csci {
						if _equal(s.Customer_sk, c.Customer_sk) && _equal(s.Item_sk, c.Item_sk) {
							if _equal(s.Customer_sk, c.Customer_sk) && _equal(s.Item_sk, c.Item_sk) {
								results = append(results, c)
							}
						}
					}
					return results
				}()) > 0) {
					results = append(results, 1)
				}
			}
		}
		return results
	}())
	catalog_only = len(func() []int {
		results := []int{}
		for _, c := range csci {
			if !(len(func() []Ssci {
				results := []Ssci{}
				for _, s := range ssci {
					if _equal(s.Customer_sk, c.Customer_sk) && _equal(s.Item_sk, c.Item_sk) {
						if _equal(s.Customer_sk, c.Customer_sk) && _equal(s.Item_sk, c.Item_sk) {
							results = append(results, s)
						}
					}
				}
				return results
			}()) > 0) {
				if !(len(func() []Ssci {
					results := []Ssci{}
					for _, s := range ssci {
						if _equal(s.Customer_sk, c.Customer_sk) && _equal(s.Item_sk, c.Item_sk) {
							if _equal(s.Customer_sk, c.Customer_sk) && _equal(s.Item_sk, c.Item_sk) {
								results = append(results, s)
							}
						}
					}
					return results
				}()) > 0) {
					results = append(results, 1)
				}
			}
		}
		return results
	}())
	result = v{
		Store_only:        store_only,
		Catalog_only:      catalog_only,
		Store_and_catalog: both,
	}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q97_overlap()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}
