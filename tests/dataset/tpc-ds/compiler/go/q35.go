//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:05:24Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"slices"
	"time"
)

type Customer struct {
	C_customer_sk      int `json:"c_customer_sk"`
	C_current_addr_sk  int `json:"c_current_addr_sk"`
	C_current_cdemo_sk int `json:"c_current_cdemo_sk"`
}

type Customer_addres struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_state      string `json:"ca_state"`
}

type Customer_demographic struct {
	Cd_demo_sk            int    `json:"cd_demo_sk"`
	Cd_gender             string `json:"cd_gender"`
	Cd_marital_status     string `json:"cd_marital_status"`
	Cd_dep_count          int    `json:"cd_dep_count"`
	Cd_dep_employed_count int    `json:"cd_dep_employed_count"`
	Cd_dep_college_count  int    `json:"cd_dep_college_count"`
}

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
	D_qoy     int `json:"d_qoy"`
}

type GKey struct {
	State   string `json:"state"`
	Gender  string `json:"gender"`
	Marital string `json:"marital"`
	Dep     int    `json:"dep"`
	Emp     int    `json:"emp"`
	Col     int    `json:"col"`
}

type Group struct {
	Ca_state              any `json:"ca_state"`
	Cd_gender             any `json:"cd_gender"`
	Cd_marital_status     any `json:"cd_marital_status"`
	Cd_dep_count          any `json:"cd_dep_count"`
	Cd_dep_employed_count any `json:"cd_dep_employed_count"`
	Cd_dep_college_count  any `json:"cd_dep_college_count"`
	Cnt                   int `json:"cnt"`
}

type Store_sale struct {
	Ss_customer_sk  int `json:"ss_customer_sk"`
	Ss_sold_date_sk int `json:"ss_sold_date_sk"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q35_simplified() {
	expect(_equal(groups, []v{v{
		Ca_state:              "CA",
		Cd_gender:             "M",
		Cd_marital_status:     "S",
		Cd_dep_count:          1,
		Cd_dep_employed_count: 1,
		Cd_dep_college_count:  0,
		Cnt:                   1,
	}}))
}

var customer []Customer
var customer_address []Customer_addres
var customer_demographics []Customer_demographic
var store_sales []Store_sale
var date_dim []Date_dim
var purchased []int
var groups []Group

func main() {
	customer = []Customer{Customer{
		C_customer_sk:      1,
		C_current_addr_sk:  1,
		C_current_cdemo_sk: 1,
	}, Customer{
		C_customer_sk:      2,
		C_current_addr_sk:  2,
		C_current_cdemo_sk: 2,
	}}
	customer_address = []Customer_addres{Customer_addres{
		Ca_address_sk: 1,
		Ca_state:      "CA",
	}, Customer_addres{
		Ca_address_sk: 2,
		Ca_state:      "NY",
	}}
	customer_demographics = []Customer_demographic{Customer_demographic{
		Cd_demo_sk:            1,
		Cd_gender:             "M",
		Cd_marital_status:     "S",
		Cd_dep_count:          1,
		Cd_dep_employed_count: 1,
		Cd_dep_college_count:  0,
	}, Customer_demographic{
		Cd_demo_sk:            2,
		Cd_gender:             "F",
		Cd_marital_status:     "M",
		Cd_dep_count:          2,
		Cd_dep_employed_count: 1,
		Cd_dep_college_count:  1,
	}}
	store_sales = []Store_sale{Store_sale{
		Ss_customer_sk:  1,
		Ss_sold_date_sk: 1,
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_year:    2000,
		D_qoy:     1,
	}}
	purchased = func() []int {
		results := []int{}
		for _, ss := range store_sales {
			for _, d := range date_dim {
				if !(ss.Ss_sold_date_sk == d.D_date_sk) {
					continue
				}
				if (d.D_year == 2000) && (d.D_qoy < 4) {
					if (d.D_year == 2000) && (d.D_qoy < 4) {
						results = append(results, ss.Ss_customer_sk)
					}
				}
			}
		}
		return results
	}()
	groups = func() []Group {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, c := range customer {
			for _, ca := range customer_address {
				if !(c.C_current_addr_sk == ca.Ca_address_sk) {
					continue
				}
				for _, cd := range customer_demographics {
					if !(c.C_current_cdemo_sk == cd.Cd_demo_sk) {
						continue
					}
					if slices.Contains(purchased, c.C_customer_sk) {
						key := GKey{
							State:   ca.Ca_state,
							Gender:  cd.Cd_gender,
							Marital: cd.Cd_marital_status,
							Dep:     cd.Cd_dep_count,
							Emp:     cd.Cd_dep_employed_count,
							Col:     cd.Cd_dep_college_count,
						}
						ks := fmt.Sprint(key)
						g, ok := groups[ks]
						if !ok {
							g = &data.Group{Key: key}
							groups[ks] = g
							order = append(order, ks)
						}
						g.Items = append(g.Items, c)
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Group{}
		for _, g := range items {
			results = append(results, Group{
				Ca_state:              g.Key.(GKey).State,
				Cd_gender:             g.Key.(GKey).Gender,
				Cd_marital_status:     g.Key.(GKey).Marital,
				Cd_dep_count:          g.Key.(GKey).Dep,
				Cd_dep_employed_count: g.Key.(GKey).Emp,
				Cd_dep_college_count:  g.Key.(GKey).Col,
				Cnt:                   len(g.Items),
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(groups); fmt.Println(string(b)) }()
	test_TPCDS_Q35_simplified()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}
