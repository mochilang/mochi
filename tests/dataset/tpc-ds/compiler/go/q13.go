//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:04:35Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"time"

	"golang.org/x/exp/constraints"
)

type CustomerAddress struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_country    string `json:"ca_country"`
	Ca_state      string `json:"ca_state"`
}

type CustomerDemographics struct {
	Cd_demo_sk          int    `json:"cd_demo_sk"`
	Cd_marital_status   string `json:"cd_marital_status"`
	Cd_education_status string `json:"cd_education_status"`
}

type Customer_addres struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_country    string `json:"ca_country"`
	Ca_state      string `json:"ca_state"`
}

type Customer_demographic struct {
	Cd_demo_sk          int    `json:"cd_demo_sk"`
	Cd_marital_status   string `json:"cd_marital_status"`
	Cd_education_status string `json:"cd_education_status"`
}

type DateDim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
}

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
}

type HouseholdDemographics struct {
	Hd_demo_sk   int `json:"hd_demo_sk"`
	Hd_dep_count int `json:"hd_dep_count"`
}

type Household_demographic struct {
	Hd_demo_sk   int `json:"hd_demo_sk"`
	Hd_dep_count int `json:"hd_dep_count"`
}

type Result struct {
	Avg_ss_quantity           float64 `json:"avg_ss_quantity"`
	Avg_ss_ext_sales_price    float64 `json:"avg_ss_ext_sales_price"`
	Avg_ss_ext_wholesale_cost float64 `json:"avg_ss_ext_wholesale_cost"`
	Sum_ss_ext_wholesale_cost float64 `json:"sum_ss_ext_wholesale_cost"`
}

type Store struct {
	S_store_sk int    `json:"s_store_sk"`
	S_state    string `json:"s_state"`
}

type StoreSale struct {
	Ss_store_sk           int     `json:"ss_store_sk"`
	Ss_sold_date_sk       int     `json:"ss_sold_date_sk"`
	Ss_hdemo_sk           int     `json:"ss_hdemo_sk"`
	Ss_cdemo_sk           int     `json:"ss_cdemo_sk"`
	Ss_addr_sk            int     `json:"ss_addr_sk"`
	Ss_sales_price        float64 `json:"ss_sales_price"`
	Ss_net_profit         float64 `json:"ss_net_profit"`
	Ss_quantity           int     `json:"ss_quantity"`
	Ss_ext_sales_price    float64 `json:"ss_ext_sales_price"`
	Ss_ext_wholesale_cost float64 `json:"ss_ext_wholesale_cost"`
}

type Store_sale struct {
	Ss_store_sk           int     `json:"ss_store_sk"`
	Ss_sold_date_sk       int     `json:"ss_sold_date_sk"`
	Ss_hdemo_sk           int     `json:"ss_hdemo_sk"`
	Ss_cdemo_sk           int     `json:"ss_cdemo_sk"`
	Ss_addr_sk            int     `json:"ss_addr_sk"`
	Ss_sales_price        float64 `json:"ss_sales_price"`
	Ss_net_profit         float64 `json:"ss_net_profit"`
	Ss_quantity           int     `json:"ss_quantity"`
	Ss_ext_sales_price    float64 `json:"ss_ext_sales_price"`
	Ss_ext_wholesale_cost float64 `json:"ss_ext_wholesale_cost"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q13_averages() {
	expect(_equal(result, []v{v{
		Avg_ss_quantity:           10.0,
		Avg_ss_ext_sales_price:    100.0,
		Avg_ss_ext_wholesale_cost: 50.0,
		Sum_ss_ext_wholesale_cost: 50.0,
	}}))
}

var store_sales []Store_sale
var store []Store
var customer_demographics []Customer_demographic
var household_demographics []Household_demographic
var customer_address []Customer_addres
var date_dim []Date_dim
var filtered []Store_sale
var result []Result

func main() {
	store_sales = []Store_sale{Store_sale{
		Ss_store_sk:           1,
		Ss_sold_date_sk:       1,
		Ss_hdemo_sk:           1,
		Ss_cdemo_sk:           1,
		Ss_addr_sk:            1,
		Ss_sales_price:        120.0,
		Ss_net_profit:         150.0,
		Ss_quantity:           10,
		Ss_ext_sales_price:    100.0,
		Ss_ext_wholesale_cost: 50.0,
	}}
	store = []Store{Store{
		S_store_sk: 1,
		S_state:    "CA",
	}}
	customer_demographics = []Customer_demographic{Customer_demographic{
		Cd_demo_sk:          1,
		Cd_marital_status:   "M1",
		Cd_education_status: "ES1",
	}}
	household_demographics = []Household_demographic{Household_demographic{
		Hd_demo_sk:   1,
		Hd_dep_count: 3,
	}}
	customer_address = []Customer_addres{Customer_addres{
		Ca_address_sk: 1,
		Ca_country:    "United States",
		Ca_state:      "CA",
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_year:    2001,
	}}
	filtered = func() []Store_sale {
		results := []Store_sale{}
		for _, ss := range store_sales {
			for _, s := range store {
				if !(ss.Ss_store_sk == s.S_store_sk) {
					continue
				}
				for _, cd := range customer_demographics {
					if !(((ss.Ss_cdemo_sk == cd.Cd_demo_sk) && (cd.Cd_marital_status == "M1")) && (cd.Cd_education_status == "ES1")) {
						continue
					}
					for _, hd := range household_demographics {
						if !((ss.Ss_hdemo_sk == hd.Hd_demo_sk) && (hd.Hd_dep_count == 3)) {
							continue
						}
						for _, ca := range customer_address {
							if !(((ss.Ss_addr_sk == ca.Ca_address_sk) && (ca.Ca_country == "United States")) && (ca.Ca_state == "CA")) {
								continue
							}
							for _, d := range date_dim {
								if !((ss.Ss_sold_date_sk == d.D_date_sk) && (d.D_year == 2001)) {
									continue
								}
								results = append(results, ss)
							}
						}
					}
				}
			}
		}
		return results
	}()
	result = func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, r := range filtered {
			key := map[any]any{}
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, r)
		}
		results := []Result{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, Result{
				Avg_ss_quantity: _avgOrdered[int](func() []int {
					results := []int{}
					for _, xRaw := range g.Items {
						x := xRaw.(Store_sale)
						results = append(results, x.Ss_quantity)
					}
					return results
				}()),
				Avg_ss_ext_sales_price: _avgOrdered[float64](func() []float64 {
					results := []float64{}
					for _, xRaw := range g.Items {
						x := xRaw.(Store_sale)
						results = append(results, x.Ss_ext_sales_price)
					}
					return results
				}()),
				Avg_ss_ext_wholesale_cost: _avgOrdered[float64](func() []float64 {
					results := []float64{}
					for _, xRaw := range g.Items {
						x := xRaw.(Store_sale)
						results = append(results, x.Ss_ext_wholesale_cost)
					}
					return results
				}()),
				Sum_ss_ext_wholesale_cost: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, xRaw := range g.Items {
						x := xRaw.(Store_sale)
						results = append(results, x.Ss_ext_wholesale_cost)
					}
					return results
				}()),
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q13_averages()
}

func _avgOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	if len(s) == 0 {
		return 0
	}
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum / float64(len(s))
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
