//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:00:50Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"slices"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type CatalogSale struct {
	Cs_sold_date_sk     int     `json:"cs_sold_date_sk"`
	Cs_item_sk          int     `json:"cs_item_sk"`
	Cs_bill_customer_sk int     `json:"cs_bill_customer_sk"`
	Cs_quantity         int     `json:"cs_quantity"`
	Cs_list_price       float64 `json:"cs_list_price"`
}

type Catalog_sale struct {
	Cs_sold_date_sk     int     `json:"cs_sold_date_sk"`
	Cs_item_sk          int     `json:"cs_item_sk"`
	Cs_bill_customer_sk int     `json:"cs_bill_customer_sk"`
	Cs_quantity         int     `json:"cs_quantity"`
	Cs_list_price       float64 `json:"cs_list_price"`
}

type Customer_total struct {
	Cust  any     `json:"cust"`
	Sales float64 `json:"sales"`
}

type DateDim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
	D_moy     int `json:"d_moy"`
}

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
	D_moy     int `json:"d_moy"`
}

type GKey struct {
	Item_sk int `json:"item_sk"`
	Date_sk int `json:"date_sk"`
}

type Item struct {
	I_item_sk int `json:"i_item_sk"`
}

type StoreSale struct {
	Ss_item_sk      int     `json:"ss_item_sk"`
	Ss_sold_date_sk int     `json:"ss_sold_date_sk"`
	Ss_customer_sk  int     `json:"ss_customer_sk"`
	Ss_quantity     int     `json:"ss_quantity"`
	Ss_sales_price  float64 `json:"ss_sales_price"`
}

type Store_sale struct {
	Ss_item_sk      int     `json:"ss_item_sk"`
	Ss_sold_date_sk int     `json:"ss_sold_date_sk"`
	Ss_customer_sk  int     `json:"ss_customer_sk"`
	Ss_quantity     int     `json:"ss_quantity"`
	Ss_sales_price  float64 `json:"ss_sales_price"`
}

type WebSale struct {
	Ws_sold_date_sk     int     `json:"ws_sold_date_sk"`
	Ws_item_sk          int     `json:"ws_item_sk"`
	Ws_bill_customer_sk int     `json:"ws_bill_customer_sk"`
	Ws_quantity         int     `json:"ws_quantity"`
	Ws_list_price       float64 `json:"ws_list_price"`
}

type Web_sale struct {
	Ws_sold_date_sk     int     `json:"ws_sold_date_sk"`
	Ws_item_sk          int     `json:"ws_item_sk"`
	Ws_bill_customer_sk int     `json:"ws_bill_customer_sk"`
	Ws_quantity         int     `json:"ws_quantity"`
	Ws_list_price       float64 `json:"ws_list_price"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q23_cross_channel_sales() {
	expect((result == 50.0))
}

var store_sales []Store_sale
var date_dim []Date_dim
var item []Item
var catalog_sales []Catalog_sale
var web_sales []Web_sale
var frequent_ss_items []int
var customer_totals []Customer_total
var max_sales float64
var best_ss_customer []any
var catalog []float64
var web []float64
var result float64

func main() {
	store_sales = []Store_sale{
		Store_sale{
			Ss_item_sk:      1,
			Ss_sold_date_sk: 1,
			Ss_customer_sk:  1,
			Ss_quantity:     1,
			Ss_sales_price:  10.0,
		},
		Store_sale{
			Ss_item_sk:      1,
			Ss_sold_date_sk: 1,
			Ss_customer_sk:  1,
			Ss_quantity:     1,
			Ss_sales_price:  10.0,
		},
		Store_sale{
			Ss_item_sk:      1,
			Ss_sold_date_sk: 1,
			Ss_customer_sk:  1,
			Ss_quantity:     1,
			Ss_sales_price:  10.0,
		},
		Store_sale{
			Ss_item_sk:      1,
			Ss_sold_date_sk: 1,
			Ss_customer_sk:  1,
			Ss_quantity:     1,
			Ss_sales_price:  10.0,
		},
		Store_sale{
			Ss_item_sk:      1,
			Ss_sold_date_sk: 1,
			Ss_customer_sk:  1,
			Ss_quantity:     1,
			Ss_sales_price:  10.0,
		},
		Store_sale{
			Ss_item_sk:      2,
			Ss_sold_date_sk: 1,
			Ss_customer_sk:  2,
			Ss_quantity:     1,
			Ss_sales_price:  10.0,
		},
		Store_sale{
			Ss_item_sk:      2,
			Ss_sold_date_sk: 1,
			Ss_customer_sk:  2,
			Ss_quantity:     1,
			Ss_sales_price:  10.0,
		},
		Store_sale{
			Ss_item_sk:      2,
			Ss_sold_date_sk: 1,
			Ss_customer_sk:  2,
			Ss_quantity:     1,
			Ss_sales_price:  10.0,
		},
	}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_year:    2000,
		D_moy:     1,
	}}
	item = []Item{Item{I_item_sk: 1}, Item{I_item_sk: 2}}
	catalog_sales = []Catalog_sale{Catalog_sale{
		Cs_sold_date_sk:     1,
		Cs_item_sk:          1,
		Cs_bill_customer_sk: 1,
		Cs_quantity:         2,
		Cs_list_price:       10.0,
	}, Catalog_sale{
		Cs_sold_date_sk:     1,
		Cs_item_sk:          2,
		Cs_bill_customer_sk: 2,
		Cs_quantity:         2,
		Cs_list_price:       10.0,
	}}
	web_sales = []Web_sale{Web_sale{
		Ws_sold_date_sk:     1,
		Ws_item_sk:          1,
		Ws_bill_customer_sk: 1,
		Ws_quantity:         3,
		Ws_list_price:       10.0,
	}, Web_sale{
		Ws_sold_date_sk:     1,
		Ws_item_sk:          2,
		Ws_bill_customer_sk: 2,
		Ws_quantity:         1,
		Ws_list_price:       10.0,
	}}
	frequent_ss_items = func() []int {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, ss := range store_sales {
			for _, d := range date_dim {
				if !(ss.Ss_sold_date_sk == d.D_date_sk) {
					continue
				}
				for _, i := range item {
					if !(ss.Ss_item_sk == i.I_item_sk) {
						continue
					}
					if d.D_year == 2000 {
						key := GKey{
							Item_sk: i.I_item_sk,
							Date_sk: d.D_date_sk,
						}
						ks := fmt.Sprint(key)
						g, ok := groups[ks]
						if !ok {
							g = &data.Group{Key: key}
							groups[ks] = g
							order = append(order, ks)
						}
						_item := map[string]any{}
						_item["ss_item_sk"] = ss.Ss_item_sk
						_item["ss_sold_date_sk"] = ss.Ss_sold_date_sk
						_item["ss_customer_sk"] = ss.Ss_customer_sk
						_item["ss_quantity"] = ss.Ss_quantity
						_item["ss_sales_price"] = ss.Ss_sales_price
						_item["ss"] = ss
						_item["d_date_sk"] = d.D_date_sk
						_item["d_year"] = d.D_year
						_item["d_moy"] = d.D_moy
						_item["d"] = d
						_item["i_item_sk"] = i.I_item_sk
						_item["i"] = i
						g.Items = append(g.Items, _item)
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []int{}
		for _, g := range items {
			if !(len(g.Items) > 4) {
				continue
			}
			results = append(results, g.Key.(GKey).Item_sk)
		}
		return results
	}()
	customer_totals = _convSlice[v, Customer_total](func() []Customer_total {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, ss := range store_sales {
			key := ss.Ss_customer_sk
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, ss)
		}
		results := []Customer_total{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, Customer_total{
				Cust: g.Key.(any),
				Sales: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, (float64(x.Ss_quantity) * x.Ss_sales_price))
					}
					return results
				}()),
			})
		}
		return results
	}())
	max_sales = _maxOrdered[float64](func() []float64 {
		results := []float64{}
		for _, c := range customer_totals {
			results = append(results, c.Sales)
		}
		return results
	}())
	best_ss_customer = func() []any {
		results := []any{}
		for _, c := range customer_totals {
			if c.Sales > (0.95 * max_sales) {
				if c.Sales > (0.95 * max_sales) {
					results = append(results, c.Cust)
				}
			}
		}
		return results
	}()
	catalog = func() []float64 {
		results := []float64{}
		for _, cs := range catalog_sales {
			for _, d := range date_dim {
				if !(cs.Cs_sold_date_sk == d.D_date_sk) {
					continue
				}
				if (((d.D_year == 2000) && (d.D_moy == 1)) && _contains(best_ss_customer, (cs.Cs_bill_customer_sk).(any))) && slices.Contains(frequent_ss_items, cs.Cs_item_sk) {
					if (((d.D_year == 2000) && (d.D_moy == 1)) && _contains(best_ss_customer, (cs.Cs_bill_customer_sk).(any))) && slices.Contains(frequent_ss_items, cs.Cs_item_sk) {
						results = append(results, (float64(cs.Cs_quantity) * cs.Cs_list_price))
					}
				}
			}
		}
		return results
	}()
	web = func() []float64 {
		results := []float64{}
		for _, ws := range web_sales {
			for _, d := range date_dim {
				if !(ws.Ws_sold_date_sk == d.D_date_sk) {
					continue
				}
				if (((d.D_year == 2000) && (d.D_moy == 1)) && _contains(best_ss_customer, (ws.Ws_bill_customer_sk).(any))) && slices.Contains(frequent_ss_items, ws.Ws_item_sk) {
					if (((d.D_year == 2000) && (d.D_moy == 1)) && _contains(best_ss_customer, (ws.Ws_bill_customer_sk).(any))) && slices.Contains(frequent_ss_items, ws.Ws_item_sk) {
						results = append(results, (float64(ws.Ws_quantity) * ws.Ws_list_price))
					}
				}
			}
		}
		return results
	}()
	result = (_sumOrdered[float64](catalog) + _sumOrdered[float64](web))
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q23_cross_channel_sales()
}

func _contains(c any, v any) bool {
	switch s := c.(type) {
	case string:
		return strings.Contains(s, fmt.Sprint(v))
	case map[string]any:
		_, ok := s[fmt.Sprint(v)]
		return ok
	}
	rv := reflect.ValueOf(c)
	if rv.Kind() == reflect.Slice || rv.Kind() == reflect.Array {
		for i := 0; i < rv.Len(); i++ {
			if _equal(rv.Index(i).Interface(), v) {
				return true
			}
		}
		return false
	}
	return false
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _maxOrdered[T constraints.Ordered](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	m := s[0]
	for _, v := range s[1:] {
		if v > m {
			m = v
		}
	}
	return m
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
