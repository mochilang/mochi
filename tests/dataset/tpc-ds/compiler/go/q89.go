//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:01:03Z

package main

import (
	"encoding/json"
	"fmt"
	"time"

	"golang.org/x/exp/constraints"
)

type Store_sale struct {
	Price float64 `json:"price"`
}

type v = Store_sale

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q89_sample() {
	expect((result == 89.0))
}

var store_sales []Store_sale
var result float64

func main() {
	store_sales = []Store_sale{Store_sale{Price: 40.0}, Store_sale{Price: 30.0}, Store_sale{Price: 19.0}}
	result = _sumOrdered[float64](func() []float64 {
		results := []float64{}
		for _, s := range store_sales {
			results = append(results, s.Price)
		}
		return results
	}())
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q89_sample()
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
