//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:06:15Z

package main

import (
	"encoding/json"
	"fmt"
	"time"

	"golang.org/x/exp/constraints"
)

type Web_sale struct {
	Cat   string  `json:"cat"`
	Class string  `json:"class"`
	Net   float64 `json:"net"`
}

type v = Web_sale

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q86_sample() {
	expect((result == 86.0))
}

var web_sales []Web_sale
var result float64

func main() {
	web_sales = []Web_sale{
		Web_sale{
			Cat:   "A",
			Class: "B",
			Net:   40.0,
		},
		Web_sale{
			Cat:   "A",
			Class: "B",
			Net:   46.0,
		},
		Web_sale{
			Cat:   "A",
			Class: "C",
			Net:   10.0,
		},
		Web_sale{
			Cat:   "B",
			Class: "B",
			Net:   20.0,
		},
	}
	result = _sumOrdered[float64](func() []float64 {
		results := []float64{}
		for _, ws := range web_sales {
			if (ws.Cat == "A") && (ws.Class == "B") {
				if (ws.Cat == "A") && (ws.Class == "B") {
					results = append(results, ws.Net)
				}
			}
		}
		return results
	}())
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q86_sample()
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
