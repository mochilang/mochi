//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:00:57Z

package main

import (
	"encoding/json"
	"fmt"
	"time"
)

type Web_sale struct {
	Days int `json:"days"`
}

type v = Web_sale

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q62_simplified() {
	expect((result == 62))
}

var web_sales []Web_sale
var result int

func main() {
	web_sales = []Web_sale{
		Web_sale{Days: 10},
		Web_sale{Days: 40},
		Web_sale{Days: 70},
		Web_sale{Days: 100},
		Web_sale{Days: 130},
	}
	result = ((len(web_sales) * 12) + 2)
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q62_simplified()
}
