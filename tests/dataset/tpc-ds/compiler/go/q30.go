//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:00:50Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"time"

	"golang.org/x/exp/constraints"
)

type Avg_by_state struct {
	State      any     `json:"state"`
	Avg_return float64 `json:"avg_return"`
}

type Customer struct {
	C_customer_sk     int    `json:"c_customer_sk"`
	C_customer_id     string `json:"c_customer_id"`
	C_first_name      string `json:"c_first_name"`
	C_last_name       string `json:"c_last_name"`
	C_current_addr_sk int    `json:"c_current_addr_sk"`
}

type Customer_addres struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_state      string `json:"ca_state"`
}

type Customer_total_return struct {
	Ctr_customer_sk  any     `json:"ctr_customer_sk"`
	Ctr_state        any     `json:"ctr_state"`
	Ctr_total_return float64 `json:"ctr_total_return"`
}

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
}

type GKey struct {
	Cust  int    `json:"cust"`
	State string `json:"state"`
}

type Result struct {
	C_customer_id    string  `json:"c_customer_id"`
	C_first_name     string  `json:"c_first_name"`
	C_last_name      string  `json:"c_last_name"`
	Ctr_total_return float64 `json:"ctr_total_return"`
}

type Web_return struct {
	Wr_returning_customer_sk int     `json:"wr_returning_customer_sk"`
	Wr_returned_date_sk      int     `json:"wr_returned_date_sk"`
	Wr_return_amt            float64 `json:"wr_return_amt"`
	Wr_returning_addr_sk     int     `json:"wr_returning_addr_sk"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q30_simplified() {
	expect(_equal(result, []v{v{
		C_customer_id:    "C1",
		C_first_name:     "John",
		C_last_name:      "Doe",
		Ctr_total_return: 150.0,
	}}))
}

var web_returns []Web_return
var date_dim []Date_dim
var customer_address []Customer_addres
var customer []Customer
var customer_total_return []Customer_total_return
var avg_by_state []Avg_by_state
var result []Result

func main() {
	web_returns = []Web_return{Web_return{
		Wr_returning_customer_sk: 1,
		Wr_returned_date_sk:      1,
		Wr_return_amt:            100.0,
		Wr_returning_addr_sk:     1,
	}, Web_return{
		Wr_returning_customer_sk: 2,
		Wr_returned_date_sk:      1,
		Wr_return_amt:            30.0,
		Wr_returning_addr_sk:     2,
	}, Web_return{
		Wr_returning_customer_sk: 1,
		Wr_returned_date_sk:      1,
		Wr_return_amt:            50.0,
		Wr_returning_addr_sk:     1,
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_year:    2000,
	}}
	customer_address = []Customer_addres{Customer_addres{
		Ca_address_sk: 1,
		Ca_state:      "CA",
	}, Customer_addres{
		Ca_address_sk: 2,
		Ca_state:      "CA",
	}}
	customer = []Customer{Customer{
		C_customer_sk:     1,
		C_customer_id:     "C1",
		C_first_name:      "John",
		C_last_name:       "Doe",
		C_current_addr_sk: 1,
	}, Customer{
		C_customer_sk:     2,
		C_customer_id:     "C2",
		C_first_name:      "Jane",
		C_last_name:       "Smith",
		C_current_addr_sk: 2,
	}}
	customer_total_return = func() []Customer_total_return {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, wr := range web_returns {
			for _, d := range date_dim {
				if !(wr.Wr_returned_date_sk == d.D_date_sk) {
					continue
				}
				for _, ca := range customer_address {
					if !(wr.Wr_returning_addr_sk == ca.Ca_address_sk) {
						continue
					}
					if (d.D_year == 2000) && (ca.Ca_state == "CA") {
						key := GKey{
							Cust:  wr.Wr_returning_customer_sk,
							State: ca.Ca_state,
						}
						ks := fmt.Sprint(key)
						g, ok := groups[ks]
						if !ok {
							g = &data.Group{Key: key}
							groups[ks] = g
							order = append(order, ks)
						}
						_item := map[string]any{}
						_item["wr_returning_customer_sk"] = wr.Wr_returning_customer_sk
						_item["wr_returned_date_sk"] = wr.Wr_returned_date_sk
						_item["wr_return_amt"] = wr.Wr_return_amt
						_item["wr_returning_addr_sk"] = wr.Wr_returning_addr_sk
						_item["wr"] = wr
						_item["d_date_sk"] = d.D_date_sk
						_item["d_year"] = d.D_year
						_item["d"] = d
						_item["ca_address_sk"] = ca.Ca_address_sk
						_item["ca_state"] = ca.Ca_state
						_item["ca"] = ca
						g.Items = append(g.Items, _item)
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Customer_total_return{}
		for _, g := range items {
			results = append(results, Customer_total_return{
				Ctr_customer_sk: g.Key.(GKey).Cust,
				Ctr_state:       g.Key.(GKey).State,
				Ctr_total_return: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, x.Wr_return_amt)
					}
					return results
				}()),
			})
		}
		return results
	}()
	avg_by_state = func() []Avg_by_state {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, ctr := range customer_total_return {
			key := ctr.Ctr_state
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, ctr)
		}
		results := []Avg_by_state{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, Avg_by_state{
				State: g.Key.(any),
				Avg_return: _avgOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, x.Ctr_total_return)
					}
					return results
				}()),
			})
		}
		return results
	}()
	result = func() []Result {
		results := []Result{}
		for _, ctr := range customer_total_return {
			for _, avg := range avg_by_state {
				if !(_equal(ctr.Ctr_state, avg.State)) {
					continue
				}
				if ctr.Ctr_total_return > (avg.Avg_return * 1.2) {
					for _, c := range customer {
						if !(_equal(ctr.Ctr_customer_sk, c.C_customer_sk)) {
							continue
						}
						results = append(results, Result{
							C_customer_id:    c.C_customer_id,
							C_first_name:     c.C_first_name,
							C_last_name:      c.C_last_name,
							Ctr_total_return: ctr.Ctr_total_return,
						})
					}
				}
			}
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q30_simplified()
}

func _avgOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	if len(s) == 0 {
		return 0
	}
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum / float64(len(s))
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
