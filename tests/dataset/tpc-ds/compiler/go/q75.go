//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:01:00Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type All_sale struct {
	D_year        any     `json:"d_year"`
	I_brand_id    any     `json:"i_brand_id"`
	I_class_id    any     `json:"i_class_id"`
	I_category_id any     `json:"i_category_id"`
	I_manufact_id any     `json:"i_manufact_id"`
	Sales_cnt     float64 `json:"sales_cnt"`
	Sales_amt     float64 `json:"sales_amt"`
}

type Catalog_sale struct {
	Cs_item_sk      int     `json:"cs_item_sk"`
	Cs_quantity     int     `json:"cs_quantity"`
	Cs_sales_price  float64 `json:"cs_sales_price"`
	Cs_sold_date_sk int     `json:"cs_sold_date_sk"`
}

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
}

type GKey struct {
	Year        any `json:"year"`
	Brand_id    int `json:"brand_id"`
	Class_id    int `json:"class_id"`
	Category_id int `json:"category_id"`
	Manuf_id    int `json:"manuf_id"`
}

type Item struct {
	I_item_sk     int    `json:"i_item_sk"`
	I_brand_id    int    `json:"i_brand_id"`
	I_class_id    int    `json:"i_class_id"`
	I_category_id int    `json:"i_category_id"`
	I_manufact_id int    `json:"i_manufact_id"`
	I_category    string `json:"i_category"`
}

type Store_sale struct {
	Ss_item_sk      int     `json:"ss_item_sk"`
	Ss_quantity     int     `json:"ss_quantity"`
	Ss_sales_price  float64 `json:"ss_sales_price"`
	Ss_sold_date_sk int     `json:"ss_sold_date_sk"`
}

type Web_sale struct {
	Ws_item_sk      int     `json:"ws_item_sk"`
	Ws_quantity     int     `json:"ws_quantity"`
	Ws_sales_price  float64 `json:"ws_sales_price"`
	Ws_sold_date_sk int     `json:"ws_sold_date_sk"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q75_simplified() {
	expect(_equal(result, []v{v{
		Prev_year:      2000,
		Year:           2001,
		I_brand_id:     1,
		I_class_id:     2,
		I_category_id:  3,
		I_manufact_id:  4,
		Prev_yr_cnt:    100,
		Curr_yr_cnt:    80,
		Sales_cnt_diff: -20,
		Sales_amt_diff: -200.0,
	}}))
}

var date_dim []Date_dim
var store_sales []Store_sale
var web_sales []Web_sale
var catalog_sales []Catalog_sale
var item []Item
var sales_detail []any
var all_sales []All_sale
var prev_yr All_sale
var curr_yr All_sale
var result any

func main() {
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_year:    2000,
	}, Date_dim{
		D_date_sk: 2,
		D_year:    2001,
	}}
	store_sales = []Store_sale{Store_sale{
		Ss_item_sk:      1,
		Ss_quantity:     50,
		Ss_sales_price:  500.0,
		Ss_sold_date_sk: 1,
	}, Store_sale{
		Ss_item_sk:      1,
		Ss_quantity:     40,
		Ss_sales_price:  400.0,
		Ss_sold_date_sk: 2,
	}}
	web_sales = []Web_sale{Web_sale{
		Ws_item_sk:      1,
		Ws_quantity:     30,
		Ws_sales_price:  300.0,
		Ws_sold_date_sk: 1,
	}, Web_sale{
		Ws_item_sk:      1,
		Ws_quantity:     25,
		Ws_sales_price:  250.0,
		Ws_sold_date_sk: 2,
	}}
	catalog_sales = []Catalog_sale{Catalog_sale{
		Cs_item_sk:      1,
		Cs_quantity:     20,
		Cs_sales_price:  200.0,
		Cs_sold_date_sk: 1,
	}, Catalog_sale{
		Cs_item_sk:      1,
		Cs_quantity:     15,
		Cs_sales_price:  150.0,
		Cs_sold_date_sk: 2,
	}}
	item = []Item{Item{
		I_item_sk:     1,
		I_brand_id:    1,
		I_class_id:    2,
		I_category_id: 3,
		I_manufact_id: 4,
		I_category:    "Electronics",
	}}
	sales_detail = append(append(func() []any {
		results := []any{}
		for _, ss := range store_sales {
			for _, d := range date_dim {
				if !(d.D_date_sk == ss.Ss_sold_date_sk) {
					continue
				}
				results = append(results, v{
					D_year:    d.D_year,
					I_item_sk: ss.Ss_item_sk,
					Quantity:  ss.Ss_quantity,
					Amount:    ss.Ss_sales_price,
				})
			}
		}
		return results
	}(), func() []v {
		results := []v{}
		for _, ws := range web_sales {
			for _, d := range date_dim {
				if !(d.D_date_sk == ws.Ws_sold_date_sk) {
					continue
				}
				results = append(results, v{
					D_year:    d.D_year,
					I_item_sk: ws.Ws_item_sk,
					Quantity:  ws.Ws_quantity,
					Amount:    ws.Ws_sales_price,
				})
			}
		}
		return results
	}()...), func() []v {
		results := []v{}
		for _, cs := range catalog_sales {
			for _, d := range date_dim {
				if !(d.D_date_sk == cs.Cs_sold_date_sk) {
					continue
				}
				results = append(results, v{
					D_year:    d.D_year,
					I_item_sk: cs.Cs_item_sk,
					Quantity:  cs.Cs_quantity,
					Amount:    cs.Cs_sales_price,
				})
			}
		}
		return results
	}()...)
	all_sales = func() []All_sale {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, sd := range sales_detail {
			for _, i := range item {
				if !(_equal(i.I_item_sk, _getField(sd, "i_item_sk"))) {
					continue
				}
				if i.I_category == "Electronics" {
					key := GKey{
						Year:        _getField(sd, "d_year"),
						Brand_id:    i.I_brand_id,
						Class_id:    i.I_class_id,
						Category_id: i.I_category_id,
						Manuf_id:    i.I_manufact_id,
					}
					ks := fmt.Sprint(key)
					g, ok := groups[ks]
					if !ok {
						g = &data.Group{Key: key}
						groups[ks] = g
						order = append(order, ks)
					}
					_item := map[string]any{}
					_copyToMap(_item, sd)
					_item["sd"] = sd
					_item["i_item_sk"] = i.I_item_sk
					_item["i_brand_id"] = i.I_brand_id
					_item["i_class_id"] = i.I_class_id
					_item["i_category_id"] = i.I_category_id
					_item["i_manufact_id"] = i.I_manufact_id
					_item["i_category"] = i.I_category
					_item["i"] = i
					g.Items = append(g.Items, _item)
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []All_sale{}
		for _, g := range items {
			results = append(results, All_sale{
				D_year:        g.Key.(GKey).Year,
				I_brand_id:    g.Key.(GKey).Brand_id,
				I_class_id:    g.Key.(GKey).Class_id,
				I_category_id: g.Key.(GKey).Category_id,
				I_manufact_id: g.Key.(GKey).Manuf_id,
				Sales_cnt: _sum(func() []any {
					results := []any{}
					for _, x := range g.Items {
						results = append(results, _getField(_getField(x, "sd"), "quantity"))
					}
					return results
				}()),
				Sales_amt: _sum(func() []any {
					results := []any{}
					for _, x := range g.Items {
						results = append(results, _getField(_getField(x, "sd"), "amount"))
					}
					return results
				}()),
			})
		}
		return results
	}()
	prev_yr = _firstSlice[All_sale](func() []any {
		results := []any{}
		for _, a := range all_sales {
			if _equal(a.D_year, 2000) {
				if _equal(a.D_year, 2000) {
					results = append(results, a)
				}
			}
		}
		return results
	}())
	curr_yr = _firstSlice[All_sale](func() []any {
		results := []any{}
		for _, a := range all_sales {
			if _equal(a.D_year, 2001) {
				if _equal(a.D_year, 2001) {
					results = append(results, a)
				}
			}
		}
		return results
	}())
	result = func() any {
		if (curr_yr.Sales_cnt / prev_yr.Sales_cnt) < 0.9 {
			return []v{v{
				Prev_year:      prev_yr.D_year,
				Year:           curr_yr.D_year,
				I_brand_id:     curr_yr.I_brand_id,
				I_class_id:     curr_yr.I_class_id,
				I_category_id:  curr_yr.I_category_id,
				I_manufact_id:  curr_yr.I_manufact_id,
				Prev_yr_cnt:    prev_yr.Sales_cnt,
				Curr_yr_cnt:    curr_yr.Sales_cnt,
				Sales_cnt_diff: (curr_yr.Sales_cnt - prev_yr.Sales_cnt),
				Sales_amt_diff: (curr_yr.Sales_amt - prev_yr.Sales_amt),
			}}
		} else {
			return []any{}
		}
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q75_simplified()
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _copyToMap(dst map[string]any, src any) {
	switch m := src.(type) {
	case map[string]any:
		for k, v := range m {
			dst[k] = v
		}
	case map[string]string:
		for k, v := range m {
			dst[k] = v
		}
	case map[any]any:
		for k, v := range _convertMapAny(m) {
			dst[k] = v
		}
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				name := rt.Field(i).Name
				if tag := rt.Field(i).Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						name = tag
					}
				}
				dst[name] = rv.Field(i).Interface()
			}
		}
	}
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _firstSlice[T any](s []T) T {
	if len(s) == 0 {
		var zero T
		return zero
	}
	return s[0]
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}

func _sum[T constraints.Integer | constraints.Float](v []T) float64 {
	var sum float64
	for _, n := range v {
		sum += float64(n)
	}
	return sum
}
