//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:00:55Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"mochi/runtime/ffi/python"
	"reflect"
	"time"

	"golang.org/x/exp/constraints"
)

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
	D_moy     int `json:"d_moy"`
}

type GKey struct {
	W     int `json:"w"`
	I     int `json:"i"`
	Month int `json:"month"`
}

type Inventory struct {
	Inv_item_sk          int `json:"inv_item_sk"`
	Inv_warehouse_sk     int `json:"inv_warehouse_sk"`
	Inv_date_sk          int `json:"inv_date_sk"`
	Inv_quantity_on_hand int `json:"inv_quantity_on_hand"`
}

type Item struct {
	I_item_sk int `json:"i_item_sk"`
}

type Monthly struct {
	W   any     `json:"w"`
	I   any     `json:"i"`
	Qty float64 `json:"qty"`
}

type Warehouse struct {
	W_warehouse_sk   int    `json:"w_warehouse_sk"`
	W_warehouse_name string `json:"w_warehouse_name"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q39_simplified() {
	expect(_equal(summary, []v{v{
		W_warehouse_sk: 1,
		I_item_sk:      1,
		Cov:            1.539600717839002,
	}}))
}

var inventory []Inventory
var item []Item
var warehouse []Warehouse
var date_dim []Date_dim
var monthly []Monthly
var grouped map[string]map[string]any
var summary []any

func main() {
	inventory = []Inventory{Inventory{
		Inv_item_sk:          1,
		Inv_warehouse_sk:     1,
		Inv_date_sk:          1,
		Inv_quantity_on_hand: 10,
	}, Inventory{
		Inv_item_sk:          1,
		Inv_warehouse_sk:     1,
		Inv_date_sk:          2,
		Inv_quantity_on_hand: 10,
	}, Inventory{
		Inv_item_sk:          1,
		Inv_warehouse_sk:     1,
		Inv_date_sk:          3,
		Inv_quantity_on_hand: 250,
	}}
	item = []Item{Item{I_item_sk: 1}}
	warehouse = []Warehouse{Warehouse{
		W_warehouse_sk:   1,
		W_warehouse_name: "W1",
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_year:    2000,
		D_moy:     1,
	}, Date_dim{
		D_date_sk: 2,
		D_year:    2000,
		D_moy:     2,
	}, Date_dim{
		D_date_sk: 3,
		D_year:    2000,
		D_moy:     3,
	}}
	monthly = func() []Monthly {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, inv := range inventory {
			for _, d := range date_dim {
				if !(inv.Inv_date_sk == d.D_date_sk) {
					continue
				}
				for _, i := range item {
					if !(inv.Inv_item_sk == i.I_item_sk) {
						continue
					}
					for _, w := range warehouse {
						if !(inv.Inv_warehouse_sk == w.W_warehouse_sk) {
							continue
						}
						if d.D_year == 2000 {
							key := GKey{
								W:     w.W_warehouse_sk,
								I:     i.I_item_sk,
								Month: d.D_moy,
							}
							ks := fmt.Sprint(key)
							g, ok := groups[ks]
							if !ok {
								g = &data.Group{Key: key}
								groups[ks] = g
								order = append(order, ks)
							}
							_item := map[string]any{}
							_item["inv_item_sk"] = inv.Inv_item_sk
							_item["inv_warehouse_sk"] = inv.Inv_warehouse_sk
							_item["inv_date_sk"] = inv.Inv_date_sk
							_item["inv_quantity_on_hand"] = inv.Inv_quantity_on_hand
							_item["inv"] = inv
							_item["d_date_sk"] = d.D_date_sk
							_item["d_year"] = d.D_year
							_item["d_moy"] = d.D_moy
							_item["d"] = d
							_item["i_item_sk"] = i.I_item_sk
							_item["i"] = i
							_item["w_warehouse_sk"] = w.W_warehouse_sk
							_item["w_warehouse_name"] = w.W_warehouse_name
							_item["w"] = w
							g.Items = append(g.Items, _item)
						}
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Monthly{}
		for _, g := range items {
			results = append(results, Monthly{
				W: g.Key.(GKey).W,
				I: g.Key.(GKey).I,
				Qty: _sumOrdered[int](func() []int {
					results := []int{}
					for _, x := range g.Items {
						results = append(results, x.Inv_quantity_on_hand)
					}
					return results
				}()),
			})
		}
		return results
	}()
	grouped = map[string]map[string]any{}
	summary = []any{}
	for _, m := range monthly {
		key := fmt.Sprint(v{
			W: m.W,
			I: m.I,
		})
		key0 := key
		m1 := grouped
		_, ok2 := m1[key0]
		if ok2 {
			g := grouped[key]
			_ = g
			grouped[key] = map[string]any{
				"w":    g["w"],
				"i":    g["i"],
				"qtys": append((g["qtys"]).([]any), m.Qty),
			}
		} else {
			grouped[key] = map[string]any{
				"w":    m.W,
				"i":    m.I,
				"qtys": []float64{m.Qty},
			}
		}
	}
	for _, g := range _values(grouped) {
		mean := _avg(g["qtys"])
		sumsq := 0.0
		for _, q := range _toAnySlice(g["qtys"]) {
			sumsq = float64(float64(float64((sumsq + (float64(((q).(float64) - mean)) * float64(((q).(float64) - mean)))))))
		}
		variance := (sumsq / float64((len(g["qtys"]) - 1)))
		cov := (func() float64 { v, _ := python.Attr("math", "sqrt", variance); return v.(float64) }() / mean)
		if cov > 1.5 {
			summary = append(summary, v{
				W_warehouse_sk: g["w"],
				I_item_sk:      g["i"],
				Cov:            cov,
			})
		}
	}
	func() { b, _ := json.Marshal(summary); fmt.Println(string(b)) }()
	test_TPCDS_Q39_simplified()
}

func _avg[T constraints.Integer | constraints.Float](v []T) float64 {
	if len(v) == 0 {
		return 0
	}
	return _sum(v) / float64(len(v))
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}

func _values(v any) []any {
	switch m := v.(type) {
	case map[string]any:
		res := make([]any, 0, len(m))
		for _, vv := range m {
			res = append(res, vv)
		}
		return res
	case map[any]any:
		res := make([]any, 0, len(m))
		for _, vv := range m {
			res = append(res, vv)
		}
		return res
	}
	rv := reflect.ValueOf(v)
	if rv.Kind() == reflect.Struct {
		n := rv.NumField()
		res := make([]any, 0, n)
		for i := 0; i < n; i++ {
			res = append(res, rv.Field(i).Interface())
		}
		return res
	}
	panic("values() expects map")
}
