//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:00:48Z

package main

import (
	"encoding/json"
	"fmt"
	"reflect"
	"time"

	"golang.org/x/exp/constraints"
)

type Reason struct {
	R_reason_sk int `json:"r_reason_sk"`
}

type Result struct {
	Bucket1 float64 `json:"bucket1"`
	Bucket2 float64 `json:"bucket2"`
	Bucket3 float64 `json:"bucket3"`
	Bucket4 float64 `json:"bucket4"`
	Bucket5 float64 `json:"bucket5"`
}

type Store_sale struct {
	Ss_quantity         int     `json:"ss_quantity"`
	Ss_ext_discount_amt float64 `json:"ss_ext_discount_amt"`
	Ss_net_paid         float64 `json:"ss_net_paid"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q9_result() {
	expect(_equal(result, []v{v{
		Bucket1: 7.0,
		Bucket2: 15.0,
		Bucket3: 30.0,
		Bucket4: 35.0,
		Bucket5: 50.0,
	}}))
}

var store_sales []Store_sale
var reason []Reason
var bucket1 float64
var bucket2 float64
var bucket3 float64
var bucket4 float64
var bucket5 float64
var result []Result

func main() {
	store_sales = []Store_sale{
		Store_sale{
			Ss_quantity:         5,
			Ss_ext_discount_amt: 5.0,
			Ss_net_paid:         7.0,
		},
		Store_sale{
			Ss_quantity:         30,
			Ss_ext_discount_amt: 10.0,
			Ss_net_paid:         15.0,
		},
		Store_sale{
			Ss_quantity:         50,
			Ss_ext_discount_amt: 20.0,
			Ss_net_paid:         30.0,
		},
		Store_sale{
			Ss_quantity:         70,
			Ss_ext_discount_amt: 25.0,
			Ss_net_paid:         35.0,
		},
		Store_sale{
			Ss_quantity:         90,
			Ss_ext_discount_amt: 40.0,
			Ss_net_paid:         50.0,
		},
	}
	reason = []Reason{Reason{R_reason_sk: 1}}
	bucket1 = func() float64 {
		if len(func() []Store_sale {
			results := []Store_sale{}
			for _, s := range store_sales {
				if (s.Ss_quantity >= 1) && (s.Ss_quantity <= 20) {
					if (s.Ss_quantity >= 1) && (s.Ss_quantity <= 20) {
						results = append(results, s)
					}
				}
			}
			return results
		}()) > 10 {
			return _avgOrdered[float64](func() []float64 {
				results := []float64{}
				for _, s := range store_sales {
					if (s.Ss_quantity >= 1) && (s.Ss_quantity <= 20) {
						if (s.Ss_quantity >= 1) && (s.Ss_quantity <= 20) {
							results = append(results, s.Ss_ext_discount_amt)
						}
					}
				}
				return results
			}())
		} else {
			return _avgOrdered[float64](func() []float64 {
				results := []float64{}
				for _, s := range store_sales {
					if (s.Ss_quantity >= 1) && (s.Ss_quantity <= 20) {
						if (s.Ss_quantity >= 1) && (s.Ss_quantity <= 20) {
							results = append(results, s.Ss_net_paid)
						}
					}
				}
				return results
			}())
		}
	}()
	bucket2 = func() float64 {
		if len(func() []Store_sale {
			results := []Store_sale{}
			for _, s := range store_sales {
				if (s.Ss_quantity >= 21) && (s.Ss_quantity <= 40) {
					if (s.Ss_quantity >= 21) && (s.Ss_quantity <= 40) {
						results = append(results, s)
					}
				}
			}
			return results
		}()) > 20 {
			return _avgOrdered[float64](func() []float64 {
				results := []float64{}
				for _, s := range store_sales {
					if (s.Ss_quantity >= 21) && (s.Ss_quantity <= 40) {
						if (s.Ss_quantity >= 21) && (s.Ss_quantity <= 40) {
							results = append(results, s.Ss_ext_discount_amt)
						}
					}
				}
				return results
			}())
		} else {
			return _avgOrdered[float64](func() []float64 {
				results := []float64{}
				for _, s := range store_sales {
					if (s.Ss_quantity >= 21) && (s.Ss_quantity <= 40) {
						if (s.Ss_quantity >= 21) && (s.Ss_quantity <= 40) {
							results = append(results, s.Ss_net_paid)
						}
					}
				}
				return results
			}())
		}
	}()
	bucket3 = func() float64 {
		if len(func() []Store_sale {
			results := []Store_sale{}
			for _, s := range store_sales {
				if (s.Ss_quantity >= 41) && (s.Ss_quantity <= 60) {
					if (s.Ss_quantity >= 41) && (s.Ss_quantity <= 60) {
						results = append(results, s)
					}
				}
			}
			return results
		}()) > 30 {
			return _avgOrdered[float64](func() []float64 {
				results := []float64{}
				for _, s := range store_sales {
					if (s.Ss_quantity >= 41) && (s.Ss_quantity <= 60) {
						if (s.Ss_quantity >= 41) && (s.Ss_quantity <= 60) {
							results = append(results, s.Ss_ext_discount_amt)
						}
					}
				}
				return results
			}())
		} else {
			return _avgOrdered[float64](func() []float64 {
				results := []float64{}
				for _, s := range store_sales {
					if (s.Ss_quantity >= 41) && (s.Ss_quantity <= 60) {
						if (s.Ss_quantity >= 41) && (s.Ss_quantity <= 60) {
							results = append(results, s.Ss_net_paid)
						}
					}
				}
				return results
			}())
		}
	}()
	bucket4 = func() float64 {
		if len(func() []Store_sale {
			results := []Store_sale{}
			for _, s := range store_sales {
				if (s.Ss_quantity >= 61) && (s.Ss_quantity <= 80) {
					if (s.Ss_quantity >= 61) && (s.Ss_quantity <= 80) {
						results = append(results, s)
					}
				}
			}
			return results
		}()) > 40 {
			return _avgOrdered[float64](func() []float64 {
				results := []float64{}
				for _, s := range store_sales {
					if (s.Ss_quantity >= 61) && (s.Ss_quantity <= 80) {
						if (s.Ss_quantity >= 61) && (s.Ss_quantity <= 80) {
							results = append(results, s.Ss_ext_discount_amt)
						}
					}
				}
				return results
			}())
		} else {
			return _avgOrdered[float64](func() []float64 {
				results := []float64{}
				for _, s := range store_sales {
					if (s.Ss_quantity >= 61) && (s.Ss_quantity <= 80) {
						if (s.Ss_quantity >= 61) && (s.Ss_quantity <= 80) {
							results = append(results, s.Ss_net_paid)
						}
					}
				}
				return results
			}())
		}
	}()
	bucket5 = func() float64 {
		if len(func() []Store_sale {
			results := []Store_sale{}
			for _, s := range store_sales {
				if (s.Ss_quantity >= 81) && (s.Ss_quantity <= 100) {
					if (s.Ss_quantity >= 81) && (s.Ss_quantity <= 100) {
						results = append(results, s)
					}
				}
			}
			return results
		}()) > 50 {
			return _avgOrdered[float64](func() []float64 {
				results := []float64{}
				for _, s := range store_sales {
					if (s.Ss_quantity >= 81) && (s.Ss_quantity <= 100) {
						if (s.Ss_quantity >= 81) && (s.Ss_quantity <= 100) {
							results = append(results, s.Ss_ext_discount_amt)
						}
					}
				}
				return results
			}())
		} else {
			return _avgOrdered[float64](func() []float64 {
				results := []float64{}
				for _, s := range store_sales {
					if (s.Ss_quantity >= 81) && (s.Ss_quantity <= 100) {
						if (s.Ss_quantity >= 81) && (s.Ss_quantity <= 100) {
							results = append(results, s.Ss_net_paid)
						}
					}
				}
				return results
			}())
		}
	}()
	result = func() []Result {
		results := []Result{}
		for _, r := range reason {
			if r.R_reason_sk == 1 {
				if r.R_reason_sk == 1 {
					results = append(results, Result{
						Bucket1: bucket1,
						Bucket2: bucket2,
						Bucket3: bucket3,
						Bucket4: bucket4,
						Bucket5: bucket5,
					})
				}
			}
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q9_result()
}

func _avgOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	if len(s) == 0 {
		return 0
	}
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum / float64(len(s))
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}
