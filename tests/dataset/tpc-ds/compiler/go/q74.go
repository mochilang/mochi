//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:01:00Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type Customer struct {
	C_customer_sk int    `json:"c_customer_sk"`
	C_customer_id int    `json:"c_customer_id"`
	C_first_name  string `json:"c_first_name"`
	C_last_name   string `json:"c_last_name"`
}

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
}

type GKey struct {
	ID    int    `json:"id"`
	First string `json:"first"`
	Last  string `json:"last"`
	Year  int    `json:"year"`
}

type Store_sale struct {
	Ss_customer_sk  int     `json:"ss_customer_sk"`
	Ss_sold_date_sk int     `json:"ss_sold_date_sk"`
	Ss_net_paid     float64 `json:"ss_net_paid"`
}

type Web_sale struct {
	Ws_bill_customer_sk int     `json:"ws_bill_customer_sk"`
	Ws_sold_date_sk     int     `json:"ws_sold_date_sk"`
	Ws_net_paid         float64 `json:"ws_net_paid"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q74_simplified() {
	expect(_equal(result, []v{v{
		Customer_id:         1,
		Customer_first_name: "Alice",
		Customer_last_name:  "Smith",
	}}))
}

var customer []Customer
var date_dim []Date_dim
var store_sales []Store_sale
var web_sales []Web_sale
var year_total []any
var s_firstyear any
var s_secyear any
var w_firstyear any
var w_secyear any
var result any

func main() {
	customer = []Customer{Customer{
		C_customer_sk: 1,
		C_customer_id: 1,
		C_first_name:  "Alice",
		C_last_name:   "Smith",
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_year:    1998,
	}, Date_dim{
		D_date_sk: 2,
		D_year:    1999,
	}}
	store_sales = []Store_sale{Store_sale{
		Ss_customer_sk:  1,
		Ss_sold_date_sk: 1,
		Ss_net_paid:     100.0,
	}, Store_sale{
		Ss_customer_sk:  1,
		Ss_sold_date_sk: 2,
		Ss_net_paid:     110.0,
	}}
	web_sales = []Web_sale{Web_sale{
		Ws_bill_customer_sk: 1,
		Ws_sold_date_sk:     1,
		Ws_net_paid:         40.0,
	}, Web_sale{
		Ws_bill_customer_sk: 1,
		Ws_sold_date_sk:     2,
		Ws_net_paid:         80.0,
	}}
	year_total = append(func() []any {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, c := range customer {
			for _, ss := range store_sales {
				if !(c.C_customer_sk == ss.Ss_customer_sk) {
					continue
				}
				for _, d := range date_dim {
					if !(d.D_date_sk == ss.Ss_sold_date_sk) {
						continue
					}
					if (d.D_year == 1998) || (d.D_year == 1999) {
						key := GKey{
							ID:    c.C_customer_id,
							First: c.C_first_name,
							Last:  c.C_last_name,
							Year:  d.D_year,
						}
						ks := fmt.Sprint(key)
						g, ok := groups[ks]
						if !ok {
							g = &data.Group{Key: key}
							groups[ks] = g
							order = append(order, ks)
						}
						_item := map[string]any{}
						_item["c_customer_sk"] = c.C_customer_sk
						_item["c_customer_id"] = c.C_customer_id
						_item["c_first_name"] = c.C_first_name
						_item["c_last_name"] = c.C_last_name
						_item["c"] = c
						_item["ss_customer_sk"] = ss.Ss_customer_sk
						_item["ss_sold_date_sk"] = ss.Ss_sold_date_sk
						_item["ss_net_paid"] = ss.Ss_net_paid
						_item["ss"] = ss
						_item["d_date_sk"] = d.D_date_sk
						_item["d_year"] = d.D_year
						_item["d"] = d
						g.Items = append(g.Items, _item)
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []any{}
		for _, g := range items {
			results = append(results, v{
				Customer_id:         g.Key.(GKey).ID,
				Customer_first_name: g.Key.(GKey).First,
				Customer_last_name:  g.Key.(GKey).Last,
				Year:                g.Key.(GKey).Year,
				Year_total: _sum(func() []any {
					results := []any{}
					for _, x := range g.Items {
						results = append(results, _getField(x.Ss, "ss_net_paid"))
					}
					return results
				}()),
				Sale_type: "s",
			})
		}
		return results
	}(), func() []v {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, c := range customer {
			for _, ws := range web_sales {
				if !(c.C_customer_sk == ws.Ws_bill_customer_sk) {
					continue
				}
				for _, d := range date_dim {
					if !(d.D_date_sk == ws.Ws_sold_date_sk) {
						continue
					}
					if (d.D_year == 1998) || (d.D_year == 1999) {
						key := GKey{
							ID:    c.C_customer_id,
							First: c.C_first_name,
							Last:  c.C_last_name,
							Year:  d.D_year,
						}
						ks := fmt.Sprint(key)
						g, ok := groups[ks]
						if !ok {
							g = &data.Group{Key: key}
							groups[ks] = g
							order = append(order, ks)
						}
						_item := map[string]any{}
						_item["c_customer_sk"] = c.C_customer_sk
						_item["c_customer_id"] = c.C_customer_id
						_item["c_first_name"] = c.C_first_name
						_item["c_last_name"] = c.C_last_name
						_item["c"] = c
						_item["ws_bill_customer_sk"] = ws.Ws_bill_customer_sk
						_item["ws_sold_date_sk"] = ws.Ws_sold_date_sk
						_item["ws_net_paid"] = ws.Ws_net_paid
						_item["ws"] = ws
						_item["d_date_sk"] = d.D_date_sk
						_item["d_year"] = d.D_year
						_item["d"] = d
						g.Items = append(g.Items, _item)
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []v{}
		for _, g := range items {
			results = append(results, v{
				Customer_id:         g.Key.(GKey).ID,
				Customer_first_name: g.Key.(GKey).First,
				Customer_last_name:  g.Key.(GKey).Last,
				Year:                g.Key.(GKey).Year,
				Year_total: _sum(func() []any {
					results := []any{}
					for _, x := range g.Items {
						results = append(results, _getField(x.Ws, "ws_net_paid"))
					}
					return results
				}()),
				Sale_type: "w",
			})
		}
		return results
	}()...)
	s_firstyear = _first(_toAnySlice(func() []any {
		results := []any{}
		for _, y := range year_total {
			if _equal(_getField(y, "sale_type"), "s") && _equal(_getField(y, "year"), 1998) {
				if _equal(_getField(y, "sale_type"), "s") && _equal(_getField(y, "year"), 1998) {
					results = append(results, y)
				}
			}
		}
		return results
	}()))
	s_secyear = _first(_toAnySlice(func() []any {
		results := []any{}
		for _, y := range year_total {
			if _equal(_getField(y, "sale_type"), "s") && _equal(_getField(y, "year"), 1999) {
				if _equal(_getField(y, "sale_type"), "s") && _equal(_getField(y, "year"), 1999) {
					results = append(results, y)
				}
			}
		}
		return results
	}()))
	w_firstyear = _first(_toAnySlice(func() []any {
		results := []any{}
		for _, y := range year_total {
			if _equal(_getField(y, "sale_type"), "w") && _equal(_getField(y, "year"), 1998) {
				if _equal(_getField(y, "sale_type"), "w") && _equal(_getField(y, "year"), 1998) {
					results = append(results, y)
				}
			}
		}
		return results
	}()))
	w_secyear = _first(_toAnySlice(func() []any {
		results := []any{}
		for _, y := range year_total {
			if _equal(_getField(y, "sale_type"), "w") && _equal(_getField(y, "year"), 1999) {
				if _equal(_getField(y, "sale_type"), "w") && _equal(_getField(y, "year"), 1999) {
					results = append(results, y)
				}
			}
		}
		return results
	}()))
	result = func() any {
		if (((_getField(s_firstyear, "year_total")).(int) > 0) && ((_getField(w_firstyear, "year_total")).(int) > 0)) && (float64(((_getField(w_secyear, "year_total")).(float64) / (_getField(w_firstyear, "year_total")).(float64))) > float64(((_getField(s_secyear, "year_total")).(float64) / (_getField(s_firstyear, "year_total")).(float64)))) {
			return []v{v{
				Customer_id:         _getField(s_secyear, "customer_id"),
				Customer_first_name: _getField(s_secyear, "customer_first_name"),
				Customer_last_name:  _getField(s_secyear, "customer_last_name"),
			}}
		} else {
			return []any{}
		}
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q74_simplified()
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _first(v any) any {
	if g, ok := v.(*data.Group); ok {
		if len(g.Items) == 0 {
			return nil
		}
		return g.Items[0]
	}
	switch s := v.(type) {
	case []any:
		if len(s) == 0 {
			return nil
		}
		return s[0]
	case []int:
		if len(s) == 0 {
			return 0
		}
		return s[0]
	case []float64:
		if len(s) == 0 {
			return 0.0
		}
		return s[0]
	case []string:
		if len(s) == 0 {
			return ""
		}
		return s[0]
	case []bool:
		if len(s) == 0 {
			return false
		}
		return s[0]
	default:
		rv := reflect.ValueOf(v)
		if rv.Kind() == reflect.Slice && rv.Len() > 0 {
			return rv.Index(0).Interface()
		}
		if rv.Kind() == reflect.Array && rv.Len() > 0 {
			return rv.Index(0).Interface()
		}
	}
	return nil
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}

func _sum[T constraints.Integer | constraints.Float](v []T) float64 {
	var sum float64
	for _, n := range v {
		sum += float64(n)
	}
	return sum
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
