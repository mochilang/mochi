//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:04:42Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"strings"
	"time"

	"golang.org/x/exp/constraints"
)

type CallCenter struct {
	Cc_call_center_sk int    `json:"cc_call_center_sk"`
	Cc_county         string `json:"cc_county"`
}

type Call_center struct {
	Cc_call_center_sk int    `json:"cc_call_center_sk"`
	Cc_county         string `json:"cc_county"`
}

type CatalogReturn struct {
	Cr_order_number int `json:"cr_order_number"`
}

type CatalogSale struct {
	Cs_order_number   int     `json:"cs_order_number"`
	Cs_ship_date_sk   int     `json:"cs_ship_date_sk"`
	Cs_ship_addr_sk   int     `json:"cs_ship_addr_sk"`
	Cs_call_center_sk int     `json:"cs_call_center_sk"`
	Cs_warehouse_sk   int     `json:"cs_warehouse_sk"`
	Cs_ext_ship_cost  float64 `json:"cs_ext_ship_cost"`
	Cs_net_profit     float64 `json:"cs_net_profit"`
}

type Catalog_sale struct {
	Cs_order_number   int     `json:"cs_order_number"`
	Cs_ship_date_sk   int     `json:"cs_ship_date_sk"`
	Cs_ship_addr_sk   int     `json:"cs_ship_addr_sk"`
	Cs_call_center_sk int     `json:"cs_call_center_sk"`
	Cs_warehouse_sk   int     `json:"cs_warehouse_sk"`
	Cs_ext_ship_cost  float64 `json:"cs_ext_ship_cost"`
	Cs_net_profit     float64 `json:"cs_net_profit"`
}

type CustomerAddress struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_state      string `json:"ca_state"`
}

type Customer_addres struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_state      string `json:"ca_state"`
}

type DateDim struct {
	D_date_sk int    `json:"d_date_sk"`
	D_date    string `json:"d_date"`
}

type Date_dim struct {
	D_date_sk int    `json:"d_date_sk"`
	D_date    string `json:"d_date"`
}

type Filtered struct {
	Order_count         int     `json:"order_count"`
	Total_shipping_cost float64 `json:"total_shipping_cost"`
	Total_net_profit    float64 `json:"total_net_profit"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

// line 19
var distinct = func(xs []any) []any {
	out := []any{}
	for _, x := range xs {
		if !_contains(out, x) {
			out = append(out, x)
		}
	}
	return out
}

func test_TPCDS_Q16_shipping() {
	expect(_equal(filtered, []v{v{
		Order_count:         1,
		Total_shipping_cost: 5.0,
		Total_net_profit:    20.0,
	}}))
}

var catalog_sales []Catalog_sale
var date_dim []Date_dim
var customer_address []Customer_addres
var call_center []Call_center
var catalog_returns []any
var filtered []Filtered

func main() {
	catalog_sales = []Catalog_sale{Catalog_sale{
		Cs_order_number:   1,
		Cs_ship_date_sk:   1,
		Cs_ship_addr_sk:   1,
		Cs_call_center_sk: 1,
		Cs_warehouse_sk:   1,
		Cs_ext_ship_cost:  5.0,
		Cs_net_profit:     20.0,
	}, Catalog_sale{
		Cs_order_number:   1,
		Cs_ship_date_sk:   1,
		Cs_ship_addr_sk:   1,
		Cs_call_center_sk: 1,
		Cs_warehouse_sk:   2,
		Cs_ext_ship_cost:  0.0,
		Cs_net_profit:     0.0,
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_date:    "2000-03-01",
	}}
	customer_address = []Customer_addres{Customer_addres{
		Ca_address_sk: 1,
		Ca_state:      "CA",
	}}
	call_center = []Call_center{Call_center{
		Cc_call_center_sk: 1,
		Cc_county:         "CountyA",
	}}
	catalog_returns = []any{}
	filtered = func() []Filtered {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, cs1 := range catalog_sales {
			for _, d := range date_dim {
				if !(((cs1.Cs_ship_date_sk == d.D_date_sk) && (d.D_date >= "2000-03-01")) && (d.D_date <= "2000-04-30")) {
					continue
				}
				for _, ca := range customer_address {
					if !((cs1.Cs_ship_addr_sk == ca.Ca_address_sk) && (ca.Ca_state == "CA")) {
						continue
					}
					for _, cc := range call_center {
						if !((cs1.Cs_call_center_sk == cc.Cc_call_center_sk) && (cc.Cc_county == "CountyA")) {
							continue
						}
						if len(func() []Catalog_sale {
							results := []Catalog_sale{}
							for _, cs2 := range catalog_sales {
								if (cs1.Cs_order_number == cs2.Cs_order_number) && (cs1.Cs_warehouse_sk != cs2.Cs_warehouse_sk) {
									if (cs1.Cs_order_number == cs2.Cs_order_number) && (cs1.Cs_warehouse_sk != cs2.Cs_warehouse_sk) {
										results = append(results, cs2)
									}
								}
							}
							return results
						}()) > 0 && (len(func() []any {
							results := []any{}
							for _, cr := range catalog_returns {
								if _equal(cs1.Cs_order_number, _getField(cr, "cr_order_number")) {
									if _equal(cs1.Cs_order_number, _getField(cr, "cr_order_number")) {
										results = append(results, cr)
									}
								}
							}
							return results
						}()) > 0 == false) {
							key := map[any]any{}
							ks := fmt.Sprint(key)
							g, ok := groups[ks]
							if !ok {
								g = &data.Group{Key: key}
								groups[ks] = g
								order = append(order, ks)
							}
							g.Items = append(g.Items, cs1)
						}
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Filtered{}
		for _, g := range items {
			results = append(results, Filtered{
				Order_count: len(distinct(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Catalog_sale)
						results = append(results, x.Cs_order_number)
					}
					return results
				}())),
				Total_shipping_cost: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, xRaw := range g.Items {
						x := xRaw.(Catalog_sale)
						results = append(results, x.Cs_ext_ship_cost)
					}
					return results
				}()),
				Total_net_profit: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, xRaw := range g.Items {
						x := xRaw.(Catalog_sale)
						results = append(results, x.Cs_net_profit)
					}
					return results
				}()),
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(filtered); fmt.Println(string(b)) }()
	test_TPCDS_Q16_shipping()
}

func _contains(c any, v any) bool {
	switch s := c.(type) {
	case string:
		return strings.Contains(s, fmt.Sprint(v))
	case map[string]any:
		_, ok := s[fmt.Sprint(v)]
		return ok
	}
	rv := reflect.ValueOf(c)
	if rv.Kind() == reflect.Slice || rv.Kind() == reflect.Array {
		for i := 0; i < rv.Len(); i++ {
			if _equal(rv.Index(i).Interface(), v) {
				return true
			}
		}
		return false
	}
	return false
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _getField(v any, name string) any {
	switch m := v.(type) {
	case map[string]any:
		return m[name]
	case map[string]string:
		if s, ok := m[name]; ok {
			return s
		}
	case map[any]any:
		return _convertMapAny(m)[name]
	default:
		rv := reflect.ValueOf(m)
		if rv.Kind() == reflect.Struct {
			rt := rv.Type()
			for i := 0; i < rv.NumField(); i++ {
				fn := rt.Field(i)
				field := fn.Name
				if tag := fn.Tag.Get("json"); tag != "" {
					if c := strings.Index(tag, ","); c >= 0 {
						tag = tag[:c]
					}
					if tag != "-" {
						field = tag
					}
				}
				if field == name {
					return rv.Field(i).Interface()
				}
			}
		}
	}
	return nil
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
