//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:04:31Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"slices"
	"sort"
	"time"

	"golang.org/x/exp/constraints"
)

type Class_total struct {
	Class any     `json:"class"`
	Total float64 `json:"total"`
}

type DateDim struct {
	D_date_sk int    `json:"d_date_sk"`
	D_date    string `json:"d_date"`
}

type Date_dim struct {
	D_date_sk int    `json:"d_date_sk"`
	D_date    string `json:"d_date"`
}

type Filtered struct {
	I_item_id       any     `json:"i_item_id"`
	I_item_desc     any     `json:"i_item_desc"`
	I_category      any     `json:"i_category"`
	I_class         any     `json:"i_class"`
	I_current_price any     `json:"i_current_price"`
	Itemrevenue     float64 `json:"itemrevenue"`
}

type GKey struct {
	ID    string  `json:"id"`
	Desc  string  `json:"desc"`
	Cat   string  `json:"cat"`
	Class string  `json:"class"`
	Price float64 `json:"price"`
}

type Item struct {
	I_item_sk       int     `json:"i_item_sk"`
	I_item_id       string  `json:"i_item_id"`
	I_item_desc     string  `json:"i_item_desc"`
	I_category      string  `json:"i_category"`
	I_class         string  `json:"i_class"`
	I_current_price float64 `json:"i_current_price"`
}

type Result struct {
	I_item_id       any     `json:"i_item_id"`
	I_item_desc     any     `json:"i_item_desc"`
	I_category      any     `json:"i_category"`
	I_class         any     `json:"i_class"`
	I_current_price any     `json:"i_current_price"`
	Itemrevenue     float64 `json:"itemrevenue"`
	Revenueratio    float64 `json:"revenueratio"`
}

type WebSale struct {
	Ws_item_sk         int     `json:"ws_item_sk"`
	Ws_sold_date_sk    int     `json:"ws_sold_date_sk"`
	Ws_ext_sales_price float64 `json:"ws_ext_sales_price"`
}

type Web_sale struct {
	Ws_item_sk         int     `json:"ws_item_sk"`
	Ws_sold_date_sk    int     `json:"ws_sold_date_sk"`
	Ws_ext_sales_price float64 `json:"ws_ext_sales_price"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q12_revenue_ratio() {
	expect(_equal(result, []v{v{
		I_item_id:       "ITEM1",
		I_item_desc:     "Item One",
		I_category:      "A",
		I_class:         "C1",
		I_current_price: 10.0,
		Itemrevenue:     200.0,
		Revenueratio:    50.0,
	}, v{
		I_item_id:       "ITEM2",
		I_item_desc:     "Item Two",
		I_category:      "A",
		I_class:         "C1",
		I_current_price: 20.0,
		Itemrevenue:     200.0,
		Revenueratio:    50.0,
	}}))
}

var web_sales []Web_sale
var item []Item
var date_dim []Date_dim
var filtered []Filtered
var class_totals []Class_total
var result []Result

func main() {
	web_sales = []Web_sale{
		Web_sale{
			Ws_item_sk:         1,
			Ws_sold_date_sk:    1,
			Ws_ext_sales_price: 100.0,
		},
		Web_sale{
			Ws_item_sk:         1,
			Ws_sold_date_sk:    2,
			Ws_ext_sales_price: 100.0,
		},
		Web_sale{
			Ws_item_sk:         2,
			Ws_sold_date_sk:    2,
			Ws_ext_sales_price: 200.0,
		},
		Web_sale{
			Ws_item_sk:         3,
			Ws_sold_date_sk:    3,
			Ws_ext_sales_price: 50.0,
		},
	}
	item = []Item{Item{
		I_item_sk:       1,
		I_item_id:       "ITEM1",
		I_item_desc:     "Item One",
		I_category:      "A",
		I_class:         "C1",
		I_current_price: 10.0,
	}, Item{
		I_item_sk:       2,
		I_item_id:       "ITEM2",
		I_item_desc:     "Item Two",
		I_category:      "A",
		I_class:         "C1",
		I_current_price: 20.0,
	}, Item{
		I_item_sk:       3,
		I_item_id:       "ITEM3",
		I_item_desc:     "Item Three",
		I_category:      "B",
		I_class:         "C2",
		I_current_price: 30.0,
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_date:    "2001-01-20",
	}, Date_dim{
		D_date_sk: 2,
		D_date:    "2001-02-05",
	}, Date_dim{
		D_date_sk: 3,
		D_date:    "2001-03-05",
	}}
	filtered = func() []Filtered {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, ws := range web_sales {
			for _, i := range item {
				if !(ws.Ws_item_sk == i.I_item_sk) {
					continue
				}
				for _, d := range date_dim {
					if !(ws.Ws_sold_date_sk == d.D_date_sk) {
						continue
					}
					if (slices.Contains([]string{"A", "B", "C"}, i.I_category) && (d.D_date >= "2001-01-15")) && (d.D_date <= "2001-02-14") {
						key := GKey{
							ID:    i.I_item_id,
							Desc:  i.I_item_desc,
							Cat:   i.I_category,
							Class: i.I_class,
							Price: i.I_current_price,
						}
						ks := fmt.Sprint(key)
						g, ok := groups[ks]
						if !ok {
							g = &data.Group{Key: key}
							groups[ks] = g
							order = append(order, ks)
						}
						g.Items = append(g.Items, ws)
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		results := []Filtered{}
		for _, g := range items {
			results = append(results, Filtered{
				I_item_id:       g.Key.(GKey).ID,
				I_item_desc:     g.Key.(GKey).Desc,
				I_category:      g.Key.(GKey).Cat,
				I_class:         g.Key.(GKey).Class,
				I_current_price: g.Key.(GKey).Price,
				Itemrevenue: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, xRaw := range g.Items {
						x := xRaw.(Web_sale)
						results = append(results, x.Ws_ext_sales_price)
					}
					return results
				}()),
			})
		}
		return results
	}()
	class_totals = func() []Class_total {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, f := range filtered {
			key := f.I_class
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, f)
		}
		results := []Class_total{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, Class_total{
				Class: g.Key.(any),
				Total: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, xRaw := range g.Items {
						x := xRaw.(Filtered)
						results = append(results, x.Itemrevenue)
					}
					return results
				}()),
			})
		}
		return results
	}()
	result = func() []Result {
		src := _toAnySlice(filtered)
		resAny := _query(src, []_joinSpec{
			{items: _toAnySlice(class_totals), on: func(_a ...any) bool {
				tmp0 := _a[0]
				var f Filtered
				if tmp0 != nil {
					f = tmp0.(Filtered)
				}
				_ = f
				tmp1 := _a[1]
				var t Class_total
				if tmp1 != nil {
					t = tmp1.(Class_total)
				}
				_ = t
				return _equal(f.I_class, t.Class)
			}, leftKey: func(_a ...any) any {
				tmp0 := _a[0]
				var f Filtered
				if tmp0 != nil {
					f = tmp0.(Filtered)
				}
				_ = f
				return f.I_class
			}, rightKey: func(_v any) any { t := _v.(Class_total); _ = t; return t.Class }},
		}, _queryOpts{selectFn: func(_a ...any) any {
			tmp0 := _a[0]
			var f Filtered
			if tmp0 != nil {
				f = tmp0.(Filtered)
			}
			_ = f
			tmp1 := _a[1]
			var t Class_total
			if tmp1 != nil {
				t = tmp1.(Class_total)
			}
			_ = t
			return Result{
				I_item_id:       f.I_item_id,
				I_item_desc:     f.I_item_desc,
				I_category:      f.I_category,
				I_class:         f.I_class,
				I_current_price: f.I_current_price,
				Itemrevenue:     f.Itemrevenue,
				Revenueratio:    ((f.Itemrevenue * 100.0) / t.Total),
			}
		}, sortKey: func(_a ...any) any {
			tmp0 := _a[0]
			var f Filtered
			if tmp0 != nil {
				f = tmp0.(Filtered)
			}
			_ = f
			tmp1 := _a[1]
			var t Class_total
			if tmp1 != nil {
				t = tmp1.(Class_total)
			}
			_ = t
			return []any{
				f.I_category,
				f.I_class,
				f.I_item_id,
				f.I_item_desc,
			}
		}, skip: -1, take: -1})
		out := make([]Result, len(resAny))
		for i, v := range resAny {
			out[i] = v.(Result)
		}
		return out
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q12_revenue_ratio()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

type _joinSpec struct {
	items    []any
	on       func(...any) bool
	leftKey  func(...any) any
	rightKey func(any) any
	left     bool
	right    bool
}
type _queryOpts struct {
	selectFn func(...any) any
	where    func(...any) bool
	sortKey  func(...any) any
	skip     int
	take     int
}

func _query(src []any, joins []_joinSpec, opts _queryOpts) []any {
	items := make([][]any, len(src))
	for i, v := range src {
		items[i] = []any{v}
	}
	for _, j := range joins {
		if j.leftKey != nil && j.rightKey != nil {
			if j.right && !j.left {
				lmap := map[string][]int{}
				for li, l := range items {
					key := fmt.Sprint(j.leftKey(l...))
					lmap[key] = append(lmap[key], li)
				}
				joined := [][]any{}
				for _, right := range j.items {
					key := fmt.Sprint(j.rightKey(right))
					if is, ok := lmap[key]; ok {
						for _, li := range is {
							left := items[li]
							keep := true
							if j.on != nil {
								args := append(append([]any(nil), left...), right)
								keep = j.on(args...)
							}
							if !keep {
								continue
							}
							joined = append(joined, append(append([]any(nil), left...), right))
						}
					} else {
						undef := make([]any, len(items[0]))
						joined = append(joined, append(undef, right))
					}
				}
				items = joined
				continue
			}
			rmap := map[string][]int{}
			for ri, r := range j.items {
				key := fmt.Sprint(j.rightKey(r))
				rmap[key] = append(rmap[key], ri)
			}
			joined := [][]any{}
			matched := make([]bool, len(j.items))
			for _, left := range items {
				key := fmt.Sprint(j.leftKey(left...))
				if is, ok := rmap[key]; ok {
					m := false
					for _, ri := range is {
						right := j.items[ri]
						keep := true
						if j.on != nil {
							args := append(append([]any(nil), left...), right)
							keep = j.on(args...)
						}
						if !keep {
							continue
						}
						m = true
						matched[ri] = true
						joined = append(joined, append(append([]any(nil), left...), right))
					}
					if j.left && !m {
						joined = append(joined, append(append([]any(nil), left...), nil))
					}
				} else if j.left {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			if j.right {
				lw := 0
				if len(items) > 0 {
					lw = len(items[0])
				}
				for ri, right := range j.items {
					if !matched[ri] {
						undef := make([]any, lw)
						joined = append(joined, append(undef, right))
					}
				}
			}
			items = joined
			continue
		}
		joined := [][]any{}
		if j.right && j.left {
			matched := make([]bool, len(j.items))
			for _, left := range items {
				m := false
				for ri, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					matched[ri] = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
			for ri, right := range j.items {
				if !matched[ri] {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else if j.right {
			for _, right := range j.items {
				m := false
				for _, left := range items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if !m {
					undef := make([]any, len(items[0]))
					joined = append(joined, append(undef, right))
				}
			}
		} else {
			for _, left := range items {
				m := false
				for _, right := range j.items {
					keep := true
					if j.on != nil {
						args := append(append([]any(nil), left...), right)
						keep = j.on(args...)
					}
					if !keep {
						continue
					}
					m = true
					joined = append(joined, append(append([]any(nil), left...), right))
				}
				if j.left && !m {
					joined = append(joined, append(append([]any(nil), left...), nil))
				}
			}
		}
		items = joined
	}
	if opts.where != nil {
		filtered := [][]any{}
		for _, r := range items {
			if opts.where(r...) {
				filtered = append(filtered, r)
			}
		}
		items = filtered
	}
	if opts.sortKey != nil {
		type pair struct {
			item []any
			key  any
		}
		pairs := make([]pair, len(items))
		for i, it := range items {
			pairs[i] = pair{it, opts.sortKey(it...)}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for i, p := range pairs {
			items[i] = p.item
		}
	}
	if opts.skip >= 0 {
		if opts.skip < len(items) {
			items = items[opts.skip:]
		} else {
			items = [][]any{}
		}
	}
	if opts.take >= 0 {
		if opts.take < len(items) {
			items = items[:opts.take]
		}
	}
	res := make([]any, len(items))
	for i, r := range items {
		res[i] = opts.selectFn(r...)
	}
	return res
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
