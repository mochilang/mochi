//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:04:50Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"sort"
	"time"

	"golang.org/x/exp/constraints"
)

type Customer struct {
	C_customer_sk     int `json:"c_customer_sk"`
	C_current_addr_sk int `json:"c_current_addr_sk"`
}

type CustomerAddress struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_zip        string `json:"ca_zip"`
}

type Customer_addres struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_zip        string `json:"ca_zip"`
}

type DateDim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
	D_moy     int `json:"d_moy"`
}

type Date_dim struct {
	D_date_sk int `json:"d_date_sk"`
	D_year    int `json:"d_year"`
	D_moy     int `json:"d_moy"`
}

type GKey struct {
	Brand    string `json:"brand"`
	Brand_id int    `json:"brand_id"`
	Man_id   int    `json:"man_id"`
	Man      string `json:"man"`
}

type Item struct {
	I_item_sk     int    `json:"i_item_sk"`
	I_brand_id    int    `json:"i_brand_id"`
	I_brand       string `json:"i_brand"`
	I_manufact_id int    `json:"i_manufact_id"`
	I_manufact    string `json:"i_manufact"`
	I_manager_id  int    `json:"i_manager_id"`
}

type Result struct {
	I_brand       any     `json:"i_brand"`
	I_brand_id    any     `json:"i_brand_id"`
	I_manufact_id any     `json:"i_manufact_id"`
	I_manufact    any     `json:"i_manufact"`
	Ext_price     float64 `json:"ext_price"`
}

type Store struct {
	S_store_sk int    `json:"s_store_sk"`
	S_zip      string `json:"s_zip"`
}

type StoreSale struct {
	Ss_sold_date_sk    int     `json:"ss_sold_date_sk"`
	Ss_item_sk         int     `json:"ss_item_sk"`
	Ss_customer_sk     int     `json:"ss_customer_sk"`
	Ss_store_sk        int     `json:"ss_store_sk"`
	Ss_ext_sales_price float64 `json:"ss_ext_sales_price"`
}

type Store_sale struct {
	Ss_sold_date_sk    int     `json:"ss_sold_date_sk"`
	Ss_item_sk         int     `json:"ss_item_sk"`
	Ss_customer_sk     int     `json:"ss_customer_sk"`
	Ss_store_sk        int     `json:"ss_store_sk"`
	Ss_ext_sales_price float64 `json:"ss_ext_sales_price"`
}

type v = Result

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q19_brand() {
	expect(_equal(result, []v{v{
		I_brand:       "B1",
		I_brand_id:    1,
		I_manufact_id: 1,
		I_manufact:    "M1",
		Ext_price:     100.0,
	}}))
}

var store_sales []Store_sale
var date_dim []Date_dim
var item []Item
var customer []Customer
var customer_address []Customer_addres
var store []Store
var result []Result

func main() {
	store_sales = []Store_sale{Store_sale{
		Ss_sold_date_sk:    1,
		Ss_item_sk:         1,
		Ss_customer_sk:     1,
		Ss_store_sk:        1,
		Ss_ext_sales_price: 100.0,
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk: 1,
		D_year:    1999,
		D_moy:     11,
	}}
	item = []Item{Item{
		I_item_sk:     1,
		I_brand_id:    1,
		I_brand:       "B1",
		I_manufact_id: 1,
		I_manufact:    "M1",
		I_manager_id:  10,
	}}
	customer = []Customer{Customer{
		C_customer_sk:     1,
		C_current_addr_sk: 1,
	}}
	customer_address = []Customer_addres{Customer_addres{
		Ca_address_sk: 1,
		Ca_zip:        "11111",
	}}
	store = []Store{Store{
		S_store_sk: 1,
		S_zip:      "99999",
	}}
	result = func() []Result {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, d := range date_dim {
			for _, ss := range store_sales {
				if !(ss.Ss_sold_date_sk == d.D_date_sk) {
					continue
				}
				for _, i := range item {
					if !((ss.Ss_item_sk == i.I_item_sk) && (i.I_manager_id == 10)) {
						continue
					}
					for _, c := range customer {
						if !(ss.Ss_customer_sk == c.C_customer_sk) {
							continue
						}
						for _, ca := range customer_address {
							if !(c.C_current_addr_sk == ca.Ca_address_sk) {
								continue
							}
							for _, s := range store {
								if !((ss.Ss_store_sk == s.S_store_sk) && (_sliceString(ca.Ca_zip, 0, 5) != _sliceString(s.S_zip, 0, 5))) {
									continue
								}
								if (d.D_moy == 11) && (d.D_year == 1999) {
									key := GKey{
										Brand:    i.I_brand,
										Brand_id: i.I_brand_id,
										Man_id:   i.I_manufact_id,
										Man:      i.I_manufact,
									}
									ks := fmt.Sprint(key)
									g, ok := groups[ks]
									if !ok {
										g = &data.Group{Key: key}
										groups[ks] = g
										order = append(order, ks)
									}
									g.Items = append(g.Items, d)
								}
							}
						}
					}
				}
			}
		}
		items := []*data.Group{}
		for _, ks := range order {
			items = append(items, groups[ks])
		}
		type pair struct {
			item *data.Group
			key  any
		}
		pairs := make([]pair, len(items))
		for idx, it := range items {
			g := it
			pairs[idx] = pair{item: it, key: _toAnySlice([]string{g.Key.(GKey).Brand})}
		}
		sort.Slice(pairs, func(i, j int) bool {
			a, b := pairs[i].key, pairs[j].key
			switch av := a.(type) {
			case int:
				switch bv := b.(type) {
				case int:
					return av < bv
				case float64:
					return float64(av) < bv
				}
			case float64:
				switch bv := b.(type) {
				case int:
					return av < float64(bv)
				case float64:
					return av < bv
				}
			case string:
				bs, _ := b.(string)
				return av < bs
			}
			return fmt.Sprint(a) < fmt.Sprint(b)
		})
		for idx, p := range pairs {
			items[idx] = p.item
		}
		results := []Result{}
		for _, g := range items {
			results = append(results, Result{
				I_brand:       g.Key.(GKey).Brand,
				I_brand_id:    g.Key.(GKey).Brand_id,
				I_manufact_id: g.Key.(GKey).Man_id,
				I_manufact:    g.Key.(GKey).Man,
				Ext_price: _sum(func() []any {
					results := []any{}
					for _, xRaw := range g.Items {
						x := xRaw.(Date_dim)
						results = append(results, x.Ss_ext_sales_price)
					}
					return results
				}()),
			})
		}
		return results
	}()
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q19_brand()
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _sliceString(s string, i, j int) string {
	start := i
	end := j
	n := len([]rune(s))
	if start < 0 {
		start += n
	}
	if end < 0 {
		end += n
	}
	if start < 0 {
		start = 0
	}
	if end > n {
		end = n
	}
	if end < start {
		end = start
	}
	return string([]rune(s)[start:end])
}

func _sum[T constraints.Integer | constraints.Float](v []T) float64 {
	var sum float64
	for _, n := range v {
		sum += float64(n)
	}
	return sum
}

func _toAnySlice[T any](s []T) []any {
	out := make([]any, len(s))
	for i, v := range s {
		out[i] = v
	}
	return out
}
