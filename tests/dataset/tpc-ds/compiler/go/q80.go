//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-16T01:06:12Z

package main

import (
	"encoding/json"
	"fmt"
	"time"

	"golang.org/x/exp/constraints"
)

type Catalog_sale struct {
	Price float64 `json:"price"`
	Ret   float64 `json:"ret"`
}

type Store_sale struct {
	Price float64 `json:"price"`
	Ret   float64 `json:"ret"`
}

type Web_sale struct {
	Price float64 `json:"price"`
	Ret   float64 `json:"ret"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q80_sample() {
	expect((total_profit == 80.0))
}

var store_sales []Store_sale
var catalog_sales []Catalog_sale
var web_sales []Web_sale
var total_profit float64

func main() {
	store_sales = []Store_sale{Store_sale{
		Price: 20.0,
		Ret:   5.0,
	}, Store_sale{
		Price: 10.0,
		Ret:   2.0,
	}, Store_sale{
		Price: 5.0,
		Ret:   0.0,
	}}
	catalog_sales = []Catalog_sale{Catalog_sale{
		Price: 15.0,
		Ret:   3.0,
	}, Catalog_sale{
		Price: 8.0,
		Ret:   1.0,
	}}
	web_sales = []Web_sale{Web_sale{
		Price: 25.0,
		Ret:   5.0,
	}, Web_sale{
		Price: 15.0,
		Ret:   8.0,
	}, Web_sale{
		Price: 8.0,
		Ret:   2.0,
	}}
	total_profit = ((_sumOrdered[float64](func() []float64 {
		results := []float64{}
		for _, s := range store_sales {
			results = append(results, (s.Price - s.Ret))
		}
		return results
	}()) + _sumOrdered[float64](func() []float64 {
		results := []float64{}
		for _, c := range catalog_sales {
			results = append(results, (c.Price - c.Ret))
		}
		return results
	}())) + _sumOrdered[float64](func() []float64 {
		results := []float64{}
		for _, w := range web_sales {
			results = append(results, (w.Price - w.Ret))
		}
		return results
	}()))
	func() { b, _ := json.Marshal(total_profit); fmt.Println(string(b)) }()
	test_TPCDS_Q80_sample()
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
