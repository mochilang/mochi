//go:build ignore

// Generated by Mochi compiler v0.10.26 on 2025-07-15T12:00:57Z

package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"time"

	"golang.org/x/exp/constraints"
)

type By_customer struct {
	Customer any     `json:"customer"`
	Revenue  float64 `json:"revenue"`
}

type Customer struct {
	C_customer_sk     int `json:"c_customer_sk"`
	C_current_addr_sk int `json:"c_current_addr_sk"`
}

type Customer_addres struct {
	Ca_address_sk int    `json:"ca_address_sk"`
	Ca_county     string `json:"ca_county"`
	Ca_state      string `json:"ca_state"`
}

type Date_dim struct {
	D_date_sk   int `json:"d_date_sk"`
	D_month_seq int `json:"d_month_seq"`
}

type GKey struct {
	Seg int `json:"seg"`
}

type Revenue struct {
	Customer int     `json:"customer"`
	Amt      float64 `json:"amt"`
}

type Segment struct {
	Segment       any `json:"segment"`
	Num_customers int `json:"num_customers"`
	Segment_base  any `json:"segment_base"`
}

type Store struct {
	S_store_sk int    `json:"s_store_sk"`
	S_county   string `json:"s_county"`
	S_state    string `json:"s_state"`
}

type Store_sale struct {
	Customer  int     `json:"customer"`
	Sold_date int     `json:"sold_date"`
	Price     float64 `json:"price"`
}

type v map[string]any

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

// line 11
var int = func(x float64) int {
	return int(x)
}

func test_TPCDS_Q54_simplified() {
	expect(_equal(result, []v{v{
		Segment:       1,
		Num_customers: 1,
		Segment_base:  50,
	}, v{
		Segment:       0,
		Num_customers: 1,
		Segment_base:  0,
	}}))
}

var store_sales []Store_sale
var date_dim []Date_dim
var customer []Customer
var customer_address []Customer_addres
var store []Store
var revenue []Revenue
var by_customer []By_customer
var segments []Segment
var result []Segment

func main() {
	store_sales = []Store_sale{Store_sale{
		Customer:  1,
		Sold_date: 2,
		Price:     60.0,
	}, Store_sale{
		Customer:  2,
		Sold_date: 2,
		Price:     40.0,
	}}
	date_dim = []Date_dim{Date_dim{
		D_date_sk:   2,
		D_month_seq: 5,
	}}
	customer = []Customer{Customer{
		C_customer_sk:     1,
		C_current_addr_sk: 1,
	}, Customer{
		C_customer_sk:     2,
		C_current_addr_sk: 1,
	}}
	customer_address = []Customer_addres{Customer_addres{
		Ca_address_sk: 1,
		Ca_county:     "X",
		Ca_state:      "Y",
	}}
	store = []Store{Store{
		S_store_sk: 1,
		S_county:   "X",
		S_state:    "Y",
	}}
	revenue = func() []Revenue {
		results := []Revenue{}
		for _, ss := range store_sales {
			for _, d := range date_dim {
				if !(ss.Sold_date == d.D_date_sk) {
					continue
				}
				for _, c := range customer {
					if !(ss.Customer == c.C_customer_sk) {
						continue
					}
					for _, ca := range customer_address {
						if !(((c.C_current_addr_sk == ca.Ca_address_sk) && (ca.Ca_county == "X")) && (ca.Ca_state == "Y")) {
							continue
						}
						for _, s := range store {
							if !(((1 == s.S_store_sk) && (ca.Ca_county == s.S_county)) && (ca.Ca_state == s.S_state)) {
								continue
							}
							results = append(results, Revenue{
								Customer: c.C_customer_sk,
								Amt:      ss.Price,
							})
						}
					}
				}
			}
		}
		return results
	}()
	by_customer = _convSlice[v, By_customer](func() []By_customer {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, r := range revenue {
			key := r.Customer
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, r)
		}
		results := []By_customer{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, By_customer{
				Customer: g.Key.(any),
				Revenue: _sumOrdered[float64](func() []float64 {
					results := []float64{}
					for _, x := range g.Items {
						results = append(results, x.Amt)
					}
					return results
				}()),
			})
		}
		return results
	}())
	segments = func() []Segment {
		groups := map[string]*data.Group{}
		order := []string{}
		for _, r := range by_customer {
			key := GKey{Seg: int((r.Revenue / float64(50)))}
			ks := fmt.Sprint(key)
			g, ok := groups[ks]
			if !ok {
				g = &data.Group{Key: key}
				groups[ks] = g
				order = append(order, ks)
			}
			g.Items = append(g.Items, r)
		}
		results := []Segment{}
		for _, ks := range order {
			g := groups[ks]
			results = append(results, Segment{
				Segment:       g.Key.(GKey).Seg,
				Num_customers: len(g.Items),
				Segment_base:  (g.Key.(GKey).Seg * 50),
			})
		}
		return results
	}()
	result = segments
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	test_TPCDS_Q54_simplified()
}

func _convSlice[T any, U any](s []T) []U {
	out := make([]U, len(s))
	for i, v := range s {
		out[i] = any(v).(U)
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _sumOrdered[T constraints.Integer | constraints.Float](s []T) float64 {
	var sum float64
	for _, v := range s {
		sum += float64(v)
	}
	return sum
}
