package main

import (
	"encoding/json"
	"fmt"
	"mochi/runtime/data"
	"reflect"
	"time"
)

func expect(cond bool) {
	if !cond {
		panic("expect failed")
	}
}

func formatDuration(d time.Duration) string {
	switch {
	case d < time.Microsecond:
		return fmt.Sprintf("%dns", d.Nanoseconds())
	case d < time.Millisecond:
		return fmt.Sprintf("%.1fÂµs", float64(d.Microseconds()))
	case d < time.Second:
		return fmt.Sprintf("%.1fms", float64(d.Milliseconds()))
	default:
		return fmt.Sprintf("%.2fs", d.Seconds())
	}
}

func printTestStart(name string) {
	fmt.Printf("   test %-30s ...", name)
}

func printTestPass(d time.Duration) {
	fmt.Printf(" ok (%s)\n", formatDuration(d))
}

func printTestFail(err error, d time.Duration) {
	fmt.Printf(" fail %v (%s)\n", err, formatDuration(d))
}

func test_TPCDS_Q31_simplified() {
	expect(_equal(result, []map[string]any{map[string]any{
		"ca_county":            "A",
		"d_year":               2000,
		"web_q1_q2_increase":   1.5,
		"store_q1_q2_increase": 1.2,
		"web_q2_q3_increase":   1.6666666666666667,
		"store_q2_q3_increase": 1.3333333333333333,
	}}))
}

type Store_salesItem struct {
	Ca_county          string  `json:"ca_county"`
	D_qoy              int     `json:"d_qoy"`
	D_year             int     `json:"d_year"`
	Ss_ext_sales_price float64 `json:"ss_ext_sales_price"`
}

var store_sales []Store_salesItem

type Web_salesItem struct {
	Ca_county          string  `json:"ca_county"`
	D_qoy              int     `json:"d_qoy"`
	D_year             int     `json:"d_year"`
	Ws_ext_sales_price float64 `json:"ws_ext_sales_price"`
}

var web_sales []Web_salesItem
var counties []string
var result []any

func main() {
	failures := 0
	store_sales = _cast[[]Store_salesItem]([]Store_salesItem{
		Store_salesItem{
			Ca_county:          "A",
			D_qoy:              1,
			D_year:             2000,
			Ss_ext_sales_price: 100.0,
		},
		Store_salesItem{
			Ca_county:          "A",
			D_qoy:              2,
			D_year:             2000,
			Ss_ext_sales_price: 120.0,
		},
		Store_salesItem{
			Ca_county:          "A",
			D_qoy:              3,
			D_year:             2000,
			Ss_ext_sales_price: 160.0,
		},
		Store_salesItem{
			Ca_county:          "B",
			D_qoy:              1,
			D_year:             2000,
			Ss_ext_sales_price: 80.0,
		},
		Store_salesItem{
			Ca_county:          "B",
			D_qoy:              2,
			D_year:             2000,
			Ss_ext_sales_price: 90.0,
		},
		Store_salesItem{
			Ca_county:          "B",
			D_qoy:              3,
			D_year:             2000,
			Ss_ext_sales_price: 100.0,
		},
	})
	web_sales = _cast[[]Web_salesItem]([]Web_salesItem{
		Web_salesItem{
			Ca_county:          "A",
			D_qoy:              1,
			D_year:             2000,
			Ws_ext_sales_price: 100.0,
		},
		Web_salesItem{
			Ca_county:          "A",
			D_qoy:              2,
			D_year:             2000,
			Ws_ext_sales_price: 150.0,
		},
		Web_salesItem{
			Ca_county:          "A",
			D_qoy:              3,
			D_year:             2000,
			Ws_ext_sales_price: 250.0,
		},
		Web_salesItem{
			Ca_county:          "B",
			D_qoy:              1,
			D_year:             2000,
			Ws_ext_sales_price: 80.0,
		},
		Web_salesItem{
			Ca_county:          "B",
			D_qoy:              2,
			D_year:             2000,
			Ws_ext_sales_price: 90.0,
		},
		Web_salesItem{
			Ca_county:          "B",
			D_qoy:              3,
			D_year:             2000,
			Ws_ext_sales_price: 95.0,
		},
	})
	counties = []string{"A", "B"}
	result = []any{}
	for _, county := range counties {
		var ss1 float64 = _sum(func() []float64 {
			_res := []float64{}
			for _, s := range store_sales {
				if (s.Ca_county == county) && (s.D_qoy == 1) {
					if (s.Ca_county == county) && (s.D_qoy == 1) {
						_res = append(_res, s.Ss_ext_sales_price)
					}
				}
			}
			return _res
		}())
		var ss2 float64 = _sum(func() []float64 {
			_res := []float64{}
			for _, s := range store_sales {
				if (s.Ca_county == county) && (s.D_qoy == 2) {
					if (s.Ca_county == county) && (s.D_qoy == 2) {
						_res = append(_res, s.Ss_ext_sales_price)
					}
				}
			}
			return _res
		}())
		var ss3 float64 = _sum(func() []float64 {
			_res := []float64{}
			for _, s := range store_sales {
				if (s.Ca_county == county) && (s.D_qoy == 3) {
					if (s.Ca_county == county) && (s.D_qoy == 3) {
						_res = append(_res, s.Ss_ext_sales_price)
					}
				}
			}
			return _res
		}())
		var ws1 float64 = _sum(func() []float64 {
			_res := []float64{}
			for _, w := range web_sales {
				if (w.Ca_county == county) && (w.D_qoy == 1) {
					if (w.Ca_county == county) && (w.D_qoy == 1) {
						_res = append(_res, w.Ws_ext_sales_price)
					}
				}
			}
			return _res
		}())
		var ws2 float64 = _sum(func() []float64 {
			_res := []float64{}
			for _, w := range web_sales {
				if (w.Ca_county == county) && (w.D_qoy == 2) {
					if (w.Ca_county == county) && (w.D_qoy == 2) {
						_res = append(_res, w.Ws_ext_sales_price)
					}
				}
			}
			return _res
		}())
		var ws3 float64 = _sum(func() []float64 {
			_res := []float64{}
			for _, w := range web_sales {
				if (w.Ca_county == county) && (w.D_qoy == 3) {
					if (w.Ca_county == county) && (w.D_qoy == 3) {
						_res = append(_res, w.Ws_ext_sales_price)
					}
				}
			}
			return _res
		}())
		var web_g1 float64 = (ws2 / ws1)
		var store_g1 float64 = (ss2 / ss1)
		var web_g2 float64 = (ws3 / ws2)
		var store_g2 float64 = (ss3 / ss2)
		if (web_g1 > store_g1) && (web_g2 > store_g2) {
			result = append(result, map[string]any{
				"ca_county":            county,
				"d_year":               2000,
				"web_q1_q2_increase":   web_g1,
				"store_q1_q2_increase": store_g1,
				"web_q2_q3_increase":   web_g2,
				"store_q2_q3_increase": store_g2,
			})
		}
	}
	func() { b, _ := json.Marshal(result); fmt.Println(string(b)) }()
	{
		printTestStart("TPCDS Q31 simplified")
		start := time.Now()
		var failed error
		func() {
			defer func() {
				if r := recover(); r != nil {
					failed = fmt.Errorf("%v", r)
				}
			}()
			test_TPCDS_Q31_simplified()
		}()
		if failed != nil {
			failures++
			printTestFail(failed, time.Since(start))
		} else {
			printTestPass(time.Since(start))
		}
	}
	if failures > 0 {
		fmt.Printf("\n[FAIL] %d test(s) failed.\n", failures)
	}
}

func _cast[T any](v any) T {
	if tv, ok := v.(T); ok {
		return tv
	}
	var out T
	switch any(out).(type) {
	case int:
		switch vv := v.(type) {
		case int:
			return any(vv).(T)
		case float64:
			return any(int(vv)).(T)
		case float32:
			return any(int(vv)).(T)
		}
	case float64:
		switch vv := v.(type) {
		case int:
			return any(float64(vv)).(T)
		case float64:
			return any(vv).(T)
		case float32:
			return any(float64(vv)).(T)
		}
	case float32:
		switch vv := v.(type) {
		case int:
			return any(float32(vv)).(T)
		case float64:
			return any(float32(vv)).(T)
		case float32:
			return any(vv).(T)
		}
	}
	if m, ok := v.(map[any]any); ok {
		v = _convertMapAny(m)
	}
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	if err := json.Unmarshal(data, &out); err != nil {
		panic(err)
	}
	return out
}

func _convertMapAny(m map[any]any) map[string]any {
	out := make(map[string]any, len(m))
	for k, v := range m {
		key := fmt.Sprint(k)
		if sub, ok := v.(map[any]any); ok {
			out[key] = _convertMapAny(sub)
		} else {
			out[key] = v
		}
	}
	return out
}

func _equal(a, b any) bool {
	av := reflect.ValueOf(a)
	bv := reflect.ValueOf(b)
	if av.Kind() == reflect.Slice && bv.Kind() == reflect.Slice {
		if av.Len() != bv.Len() {
			return false
		}
		for i := 0; i < av.Len(); i++ {
			if !_equal(av.Index(i).Interface(), bv.Index(i).Interface()) {
				return false
			}
		}
		return true
	}
	if av.Kind() == reflect.Map && bv.Kind() == reflect.Map {
		if av.Len() != bv.Len() {
			return false
		}
		for _, k := range av.MapKeys() {
			bvVal := bv.MapIndex(k)
			if !bvVal.IsValid() {
				return false
			}
			if !_equal(av.MapIndex(k).Interface(), bvVal.Interface()) {
				return false
			}
		}
		return true
	}
	if (av.Kind() == reflect.Int || av.Kind() == reflect.Int64 || av.Kind() == reflect.Float64) &&
		(bv.Kind() == reflect.Int || bv.Kind() == reflect.Int64 || bv.Kind() == reflect.Float64) {
		return av.Convert(reflect.TypeOf(float64(0))).Float() == bv.Convert(reflect.TypeOf(float64(0))).Float()
	}
	return reflect.DeepEqual(a, b)
}

func _sum(v any) float64 {
	var items []any
	if g, ok := v.(*data.Group); ok {
		items = g.Items
	} else {
		switch s := v.(type) {
		case []any:
			items = s
		case []int:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []float64:
			items = make([]any, len(s))
			for i, v := range s {
				items[i] = v
			}
		case []string, []bool:
			panic("sum() expects numbers")
		default:
			panic("sum() expects list or group")
		}
	}
	var sum float64
	for _, it := range items {
		switch n := it.(type) {
		case int:
			sum += float64(n)
		case int64:
			sum += float64(n)
		case float64:
			sum += n
		default:
			panic("sum() expects numbers")
		}
	}
	return sum
}
