% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:36Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [i_item_sk-1, i_brand_id-10, i_brand-"BrandA", i_manager_id-1]),
    dict_create(_V1, map, [i_item_sk-2, i_brand_id-20, i_brand-"BrandB", i_manager_id-1]),
    Item = [_V0, _V1],
    dict_create(_V2, map, [t_time_sk-1, t_hour-8, t_minute-30, t_meal_time-"breakfast"]),
    dict_create(_V3, map, [t_time_sk-2, t_hour-18, t_minute-0, t_meal_time-"dinner"]),
    dict_create(_V4, map, [t_time_sk-3, t_hour-12, t_minute-0, t_meal_time-"lunch"]),
    Time_dim = [_V2, _V3, _V4],
    dict_create(_V5, map, [d_date_sk-1, d_moy-12, d_year-1998]),
    Date_dim = [_V5],
    dict_create(_V6, map, [ws_ext_sales_price-100, ws_sold_date_sk-1, ws_item_sk-1, ws_sold_time_sk-1]),
    Web_sales = [_V6],
    dict_create(_V7, map, [cs_ext_sales_price-200, cs_sold_date_sk-1, cs_item_sk-1, cs_sold_time_sk-2]),
    Catalog_sales = [_V7],
    dict_create(_V8, map, [ss_ext_sales_price-150, ss_sold_date_sk-1, ss_item_sk-2, ss_sold_time_sk-1]),
    Store_sales = [_V8],
    Month is 12,
    Year is 1998,
    findall(_V17, (member(Ws, Web_sales), member(D, Date_dim), get_item(D, 'd_date_sk', _V9), get_item(Ws, 'ws_sold_date_sk', _V10), (_V9 == _V10), get_item(D, 'd_moy', _V11), get_item(D, 'd_year', _V12), ((_V11 == Month), (_V12 == Year)), get_item(Ws, 'ws_ext_sales_price', _V13), get_item(Ws, 'ws_item_sk', _V14), get_item(Ws, 'ws_sold_time_sk', _V15), dict_create(_V16, map, [ext_price-_V13, item_sk-_V14, time_sk-_V15]), _V17 = _V16), _V18),
    findall(_V27, (member(Cs, Catalog_sales), member(D, Date_dim), get_item(D, 'd_date_sk', _V19), get_item(Cs, 'cs_sold_date_sk', _V20), (_V19 == _V20), get_item(D, 'd_moy', _V21), get_item(D, 'd_year', _V22), ((_V21 == Month), (_V22 == Year)), get_item(Cs, 'cs_ext_sales_price', _V23), get_item(Cs, 'cs_item_sk', _V24), get_item(Cs, 'cs_sold_time_sk', _V25), dict_create(_V26, map, [ext_price-_V23, item_sk-_V24, time_sk-_V25]), _V27 = _V26), _V28),
    findall(_V37, (member(Ss, Store_sales), member(D, Date_dim), get_item(D, 'd_date_sk', _V29), get_item(Ss, 'ss_sold_date_sk', _V30), (_V29 == _V30), get_item(D, 'd_moy', _V31), get_item(D, 'd_year', _V32), ((_V31 == Month), (_V32 == Year)), get_item(Ss, 'ss_ext_sales_price', _V33), get_item(Ss, 'ss_item_sk', _V34), get_item(Ss, 'ss_sold_time_sk', _V35), dict_create(_V36, map, [ext_price-_V33, item_sk-_V34, time_sk-_V35]), _V37 = _V36), _V38),
    concat(_V18, _V28, _V38, _V39),
    Union_sales = _V39,
    findall(_V54, (member(I, Item), member(S, Union_sales), get_item(S, 'item_sk', _V40), get_item(I, 'i_item_sk', _V41), (_V40 == _V41), member(T, Time_dim), get_item(T, 't_time_sk', _V42), get_item(S, 'time_sk', _V43), (_V42 == _V43), get_item(I, 'i_manager_id', _V44), get_item(T, 't_meal_time', _V45), get_item(T, 't_meal_time', _V46), ((_V44 == 1), ((_V45 == "breakfast") ; (_V46 == "dinner"))), get_item(I, 'i_brand_id', _V47), get_item(I, 'i_brand', _V48), get_item(T, 't_hour', _V49), get_item(T, 't_minute', _V50), dict_create(_V51, map, [brand_id-_V47, brand-_V48, t_hour-_V49, t_minute-_V50]), _V52 = _V51, dict_create(_V53, map, ['I'-I, 'S'-S, 'T'-T]), _V54 = _V52-_V53), _V55),
    group_pairs(_V55, [], _V56),
    findall(_V71, (member(G, _V56), get_item(G, 'key', _V57), get_item(_V57, 'brand_id', _V58), get_item(G, 'key', _V59), get_item(_V59, 'brand', _V60), get_item(G, 'key', _V61), get_item(_V61, 't_hour', _V62), get_item(G, 'key', _V63), get_item(_V63, 't_minute', _V64), findall(_V67, (member(X, G), true, get_item(X, 's', _V65), get_item(_V65, 'ext_price', _V66), _V67 = _V66), _V68), sum(_V68, _V69), dict_create(_V70, map, [i_brand_id-_V58, i_brand-_V60, t_hour-_V62, t_minute-_V64, ext_price-_V69]), _V71 = _V70), _V72),
    Result = _V72,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V73, map, [i_brand_id-10, i_brand-"BrandA", t_hour-18, t_minute-0, ext_price-200]),
    dict_create(_V74, map, [i_brand_id-20, i_brand-"BrandB", t_hour-8, t_minute-30, ext_price-150]),
    dict_create(_V75, map, [i_brand_id-10, i_brand-"BrandA", t_hour-8, t_minute-30, ext_price-100]),
    expect((Result == [_V73, _V74, _V75])),
    true.
