% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:39:04Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

cumulative(Xs, _Res) :-
    nb_setval(out, []),
    _V0 is 0,
    nb_setval(acc, _V0),
    catch(
        (
            member(X, Xs),
                catch(
                    (
                        nb_getval(acc, _V1),
                        get_item(X, 'price', _V2),
                        _V3 is (_V1 + _V2),
                        nb_setval(acc, _V3),
                        nb_getval(out, _V4),
                        get_item(X, 'date', _V5),
                        nb_getval(acc, _V6),
                        dict_create(_V7, map, [date-_V5, cum-_V6]),
                        append(_V4, [_V7], _V8),
                        nb_setval(out, _V8),
                        true
                    ), continue, true),
                    fail
                ; true
            ), break, true),
            nb_getval(out, _V9),
            _Res = _V9.
        
        :- initialization(main, main).
        main :-
            dict_create(_V0, map, [item-1, date-1, price-30]),
            dict_create(_V1, map, [item-1, date-2, price-20]),
            Web_sales = [_V0, _V1],
            dict_create(_V2, map, [item-1, date-1, price-5]),
            dict_create(_V3, map, [item-1, date-2, price-19]),
            Store_sales = [_V2, _V3],
            Dms is 1,
            findall(_V7, (member(W, Web_sales), true, get_item(W, 'date', _V4), get_item(W, 'price', _V5), dict_create(_V6, map, [date-_V4, price-_V5]), _V7 = _V6), _V8),
            cumulative(_V8, _V9),
            Web_cum = _V9,
            findall(_V13, (member(S, Store_sales), true, get_item(S, 'date', _V10), get_item(S, 'price', _V11), dict_create(_V12, map, [date-_V10, price-_V11]), _V13 = _V12), _V14),
            cumulative(_V14, _V15),
            Store_cum = _V15,
            findall(_V22, (member(W, Web_cum), member(S, Store_cum), get_item(W, 'date', _V16), get_item(S, 'date', _V17), (_V16 == _V17), get_item(W, 'cum', _V18), get_item(S, 'cum', _V19), (_V18 > _V19), get_item(W, 'date', _V20), dict_create(_V21, map, [item_sk-1, d_date-_V20]), _V22 = _V21), _V23),
            Joined = _V23,
            Result = Joined,
            json_write_dict(current_output, Result), nl,
            true,
            dict_create(_V24, map, [item_sk-1, d_date-1]),
            dict_create(_V25, map, [item_sk-1, d_date-2]),
            expect((Result == [_V24, _V25])),
            true.
