% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:31Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [sr_returned_date_sk-1, sr_customer_sk-1, sr_store_sk-10, sr_return_amt-20]),
    dict_create(_V1, map, [sr_returned_date_sk-1, sr_customer_sk-2, sr_store_sk-10, sr_return_amt-50]),
    Store_returns = [_V0, _V1],
    dict_create(_V2, map, [d_date_sk-1, d_year-1998]),
    Date_dim = [_V2],
    dict_create(_V3, map, [s_store_sk-10, s_state-"TN"]),
    Store = [_V3],
    dict_create(_V4, map, [c_customer_sk-1, c_customer_id-"C1"]),
    dict_create(_V5, map, [c_customer_sk-2, c_customer_id-"C2"]),
    Customer = [_V4, _V5],
    findall(_V14, (member(Sr, Store_returns), member(D, Date_dim), get_item(Sr, 'sr_returned_date_sk', _V6), get_item(D, 'd_date_sk', _V7), get_item(D, 'd_year', _V8), ((_V6 == _V7), (_V8 == 1998)), true, get_item(Sr, 'sr_customer_sk', _V9), get_item(Sr, 'sr_store_sk', _V10), dict_create(_V11, map, [customer_sk-_V9, store_sk-_V10]), _V12 = _V11, dict_create(_V13, map, ['Sr'-Sr, 'D'-D]), _V14 = _V12-_V13), _V15),
    group_pairs(_V15, [], _V16),
    findall(_V26, (member(G, _V16), get_item(G, 'key', _V17), get_item(_V17, 'customer_sk', _V18), get_item(G, 'key', _V19), get_item(_V19, 'store_sk', _V20), findall(_V22, (member(X, G), true, get_item(X, 'sr_return_amt', _V21), _V22 = _V21), _V23), sum(_V23, _V24), dict_create(_V25, map, [ctr_customer_sk-_V18, ctr_store_sk-_V20, ctr_total_return-_V24]), _V26 = _V25), _V27),
    Customer_total_return = _V27,
    findall(_V42, (member(Ctr1, Customer_total_return), member(S, Store), get_item(Ctr1, 'ctr_store_sk', _V28), get_item(S, 's_store_sk', _V29), (_V28 == _V29), member(C, Customer), get_item(Ctr1, 'ctr_customer_sk', _V30), get_item(C, 'c_customer_sk', _V31), (_V30 == _V31), get_item(Ctr1, 'ctr_total_return', _V32), findall(_V36, (member(Ctr2, Customer_total_return), get_item(Ctr1, 'ctr_store_sk', _V33), get_item(Ctr2, 'ctr_store_sk', _V34), (_V33 == _V34), get_item(Ctr2, 'ctr_total_return', _V35), _V36 = _V35), _V37), avg(_V37, _V38), get_item(S, 's_state', _V39), ((_V32 > (_V38 * 1.2)), (_V39 == "TN")), get_item(C, 'c_customer_id', _V40), dict_create(_V41, map, [c_customer_id-_V40]), _V42 = _V41), _V43),
    Result = _V43,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V44, map, [c_customer_id-"C2"]),
    expect((Result == [_V44])),
    true.
