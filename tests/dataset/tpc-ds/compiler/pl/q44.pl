% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:33Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ss_item_sk-1, ss_store_sk-1, ss_net_profit-5]),
    dict_create(_V1, map, [ss_item_sk-1, ss_store_sk-1, ss_net_profit-5]),
    dict_create(_V2, map, [ss_item_sk-2, ss_store_sk-1, ss_net_profit-(-1)]),
    Store_sales = [_V0, _V1, _V2],
    dict_create(_V3, map, [i_item_sk-1, i_product_name-"ItemA"]),
    dict_create(_V4, map, [i_item_sk-2, i_product_name-"ItemB"]),
    Item = [_V3, _V4],
    findall(_V8, (member(Ss, Store_sales), true, get_item(Ss, 'ss_item_sk', _V5), _V6 = _V5, dict_create(_V7, map, ['Ss'-Ss]), _V8 = _V6-_V7), _V9),
    group_pairs(_V9, [], _V10),
    findall(_V17, (member(G, _V10), get_item(G, 'key', _V11), findall(_V13, (member(X, G), true, get_item(X, 'ss_net_profit', _V12), _V13 = _V12), _V14), avg(_V14, _V15), dict_create(_V16, map, [item_sk-_V11, avg_profit-_V15]), _V17 = _V16), _V18),
    Grouped_base = _V18,
    Grouped = Grouped_base,
    findall(_V19, (member(X, Grouped), true, _V19 = X), _V20),
    first(_V20, _V21),
    Best = _V21,
    findall(_V22, (member(X, Grouped), true, _V22 = X), _V23),
    first(_V23, _V24),
    Worst = _V24,
    findall(_V28, (member(I, Item), get_item(I, 'i_item_sk', _V25), get_item(Best, 'item_sk', _V26), (_V25 == _V26), get_item(I, 'i_product_name', _V27), _V28 = _V27), _V29),
    first(_V29, _V30),
    Best_name = _V30,
    findall(_V34, (member(I, Item), get_item(I, 'i_item_sk', _V31), get_item(Worst, 'item_sk', _V32), (_V31 == _V32), get_item(I, 'i_product_name', _V33), _V34 = _V33), _V35),
    first(_V35, _V36),
    Worst_name = _V36,
    dict_create(_V37, map, [best_performing-Best_name, worst_performing-Worst_name]),
    Result = _V37,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V38, map, [best_performing-"ItemA", worst_performing-"ItemB"]),
    expect((Result == _V38)),
    true.
