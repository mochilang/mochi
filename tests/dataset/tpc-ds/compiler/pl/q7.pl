% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:31Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ss_cdemo_sk-1, ss_sold_date_sk-1, ss_item_sk-1, ss_promo_sk-1, ss_quantity-5, ss_list_price-10, ss_coupon_amt-2, ss_sales_price-8]),
    Store_sales = [_V0],
    dict_create(_V1, map, [cd_demo_sk-1, cd_gender-"M", cd_marital_status-"S", cd_education_status-"College"]),
    Customer_demographics = [_V1],
    dict_create(_V2, map, [d_date_sk-1, d_year-1998]),
    Date_dim = [_V2],
    dict_create(_V3, map, [i_item_sk-1, i_item_id-"I1"]),
    Item = [_V3],
    dict_create(_V4, map, [p_promo_sk-1, p_channel_email-"N", p_channel_event-"Y"]),
    Promotion = [_V4],
    findall(_V23, (member(Ss, Store_sales), member(Cd, Customer_demographics), get_item(Ss, 'ss_cdemo_sk', _V5), get_item(Cd, 'cd_demo_sk', _V6), (_V5 == _V6), member(D, Date_dim), get_item(Ss, 'ss_sold_date_sk', _V7), get_item(D, 'd_date_sk', _V8), (_V7 == _V8), member(I, Item), get_item(Ss, 'ss_item_sk', _V9), get_item(I, 'i_item_sk', _V10), (_V9 == _V10), member(P, Promotion), get_item(Ss, 'ss_promo_sk', _V11), get_item(P, 'p_promo_sk', _V12), (_V11 == _V12), get_item(Cd, 'cd_gender', _V13), get_item(Cd, 'cd_marital_status', _V14), get_item(Cd, 'cd_education_status', _V15), get_item(P, 'p_channel_email', _V16), get_item(P, 'p_channel_event', _V17), get_item(D, 'd_year', _V18), (((((_V13 == "M"), (_V14 == "S")), (_V15 == "College")), ((_V16 == "N") ; (_V17 == "N"))), (_V18 == 1998)), get_item(I, 'i_item_id', _V19), dict_create(_V20, map, [i_item_id-_V19]), _V21 = _V20, dict_create(_V22, map, ['Ss'-Ss, 'Cd'-Cd, 'D'-D, 'I'-I, 'P'-P]), _V23 = _V21-_V22), _V24),
    group_pairs(_V24, [], _V25),
    findall(_V49, (member(G, _V25), get_item(G, 'key', _V26), get_item(_V26, 'i_item_id', _V27), findall(_V30, (member(X, G), true, get_item(X, 'ss', _V28), get_item(_V28, 'ss_quantity', _V29), _V30 = _V29), _V31), avg(_V31, _V32), findall(_V35, (member(X, G), true, get_item(X, 'ss', _V33), get_item(_V33, 'ss_list_price', _V34), _V35 = _V34), _V36), avg(_V36, _V37), findall(_V40, (member(X, G), true, get_item(X, 'ss', _V38), get_item(_V38, 'ss_coupon_amt', _V39), _V40 = _V39), _V41), avg(_V41, _V42), findall(_V45, (member(X, G), true, get_item(X, 'ss', _V43), get_item(_V43, 'ss_sales_price', _V44), _V45 = _V44), _V46), avg(_V46, _V47), dict_create(_V48, map, [i_item_id-_V27, agg1-_V32, agg2-_V37, agg3-_V42, agg4-_V47]), _V49 = _V48), _V50),
    Result = _V50,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V51, map, [i_item_id-"I1", agg1-5, agg2-10, agg3-2, agg4-8]),
    expect((Result == [_V51])),
    true.
