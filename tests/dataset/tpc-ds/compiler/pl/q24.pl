% Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

strings_to_upper(S, R) :- string_upper(S, R).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ss_ticket_number-1, ss_item_sk-1, ss_customer_sk-1, ss_store_sk-1, ss_net_paid-100]),
    dict_create(_V1, map, [ss_ticket_number-2, ss_item_sk-2, ss_customer_sk-2, ss_store_sk-1, ss_net_paid-50]),
    Store_sales = [_V0, _V1],
    dict_create(_V2, map, [sr_ticket_number-1, sr_item_sk-1]),
    dict_create(_V3, map, [sr_ticket_number-2, sr_item_sk-2]),
    Store_returns = [_V2, _V3],
    dict_create(_V4, map, [s_store_sk-1, s_store_name-"Store1", s_market_id-5, s_state-"CA", s_zip-"12345"]),
    Store = [_V4],
    dict_create(_V5, map, [i_item_sk-1, i_color-"RED", i_current_price-10, i_manager_id-1, i_units-"EA", i_size-"M"]),
    dict_create(_V6, map, [i_item_sk-2, i_color-"BLUE", i_current_price-20, i_manager_id-2, i_units-"EA", i_size-"L"]),
    Item = [_V5, _V6],
    dict_create(_V7, map, [c_customer_sk-1, c_first_name-"Ann", c_last_name-"Smith", c_current_addr_sk-1, c_birth_country-"Canada"]),
    dict_create(_V8, map, [c_customer_sk-2, c_first_name-"Bob", c_last_name-"Jones", c_current_addr_sk-2, c_birth_country-"USA"]),
    Customer = [_V7, _V8],
    dict_create(_V9, map, [ca_address_sk-1, ca_state-"CA", ca_country-"USA", ca_zip-"12345"]),
    dict_create(_V10, map, [ca_address_sk-2, ca_state-"CA", ca_country-"USA", ca_zip-"54321"]),
    Customer_address = [_V9, _V10],
    findall(_V36, (member(Ss, Store_sales), member(Sr, Store_returns), get_item(Ss, 'ss_ticket_number', _V11), get_item(Sr, 'sr_ticket_number', _V12), get_item(Ss, 'ss_item_sk', _V13), get_item(Sr, 'sr_item_sk', _V14), ((_V11 == _V12), (_V13 == _V14)), member(S, Store), get_item(Ss, 'ss_store_sk', _V15), get_item(S, 's_store_sk', _V16), (_V15 == _V16), member(I, Item), get_item(Ss, 'ss_item_sk', _V17), get_item(I, 'i_item_sk', _V18), (_V17 == _V18), member(C, Customer), get_item(Ss, 'ss_customer_sk', _V19), get_item(C, 'c_customer_sk', _V20), (_V19 == _V20), member(Ca, Customer_address), get_item(C, 'c_current_addr_sk', _V21), get_item(Ca, 'ca_address_sk', _V22), (_V21 == _V22), get_item(C, 'c_birth_country', _V23), get_item(Ca, 'ca_country', _V24), strings_to_upper(_V24, _V25), get_item(S, 's_zip', _V26), get_item(Ca, 'ca_zip', _V27), get_item(S, 's_market_id', _V28), (((_V23 \== _V25), (_V26 == _V27)), (_V28 == 5)), get_item(C, 'c_last_name', _V29), get_item(C, 'c_first_name', _V30), get_item(S, 's_store_name', _V31), get_item(I, 'i_color', _V32), dict_create(_V33, map, [last-_V29, first-_V30, store_name-_V31, color-_V32]), _V34 = _V33, dict_create(_V35, map, ['Ss'-Ss, 'Sr'-Sr, 'S'-S, 'I'-I, 'C'-C, 'Ca'-Ca]), _V36 = _V34-_V35), _V37),
    group_pairs(_V37, [], _V38),
    findall(_V52, (member(G, _V38), get_item(G, 'key', _V39), get_item(_V39, 'last', _V40), get_item(G, 'key', _V41), get_item(_V41, 'first', _V42), get_item(G, 'key', _V43), get_item(_V43, 'store_name', _V44), get_item(G, 'key', _V45), get_item(_V45, 'color', _V46), findall(_V48, (member(X, G), true, get_item(X, 'ss_net_paid', _V47), _V48 = _V47), _V49), sum(_V49, _V50), dict_create(_V51, map, [c_last_name-_V40, c_first_name-_V42, s_store_name-_V44, color-_V46, netpaid-_V50]), _V52 = _V51), _V53),
    Ssales = _V53,
    findall(_V55, (member(X, Ssales), true, get_item(X, 'netpaid', _V54), _V55 = _V54), _V56),
    avg(_V56, _V57),
    Avg_paid is _V57,
    findall(_V65, (member(X, Ssales), get_item(X, 'color', _V58), get_item(X, 'netpaid', _V59), ((_V58 == "RED"), (_V59 > (0.05 * Avg_paid))), get_item(X, 'c_last_name', _V60), get_item(X, 'c_first_name', _V61), get_item(X, 's_store_name', _V62), get_item(X, 'netpaid', _V63), dict_create(_V64, map, [c_last_name-_V60, c_first_name-_V61, s_store_name-_V62, paid-_V63]), _V65 = _V64), _V66),
    Result = _V66,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V67, map, [c_last_name-"Smith", c_first_name-"Ann", s_store_name-"Store1", paid-100]),
    expect((Result == [_V67])),
    true.
