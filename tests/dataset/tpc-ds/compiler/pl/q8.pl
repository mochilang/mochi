% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:31Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

contains(Container, Item, Res) :-
    is_dict(Container), !, (string(Item) -> atom_string(A, Item) ; A = Item), (get_dict(A, Container, _) -> Res = true ; Res = false).
contains(List, Item, Res) :-
    string(List), !, (sub_string(List, _, _, _, Item) -> Res = true ; Res = false).
contains(List, Item, Res) :- (member(Item, List) -> Res = true ; Res = false).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ss_store_sk-1, ss_sold_date_sk-1, ss_net_profit-10]),
    Store_sales = [_V0],
    dict_create(_V1, map, [d_date_sk-1, d_qoy-1, d_year-1998]),
    Date_dim = [_V1],
    dict_create(_V2, map, [s_store_sk-1, s_store_name-"Store1", s_zip-"12345"]),
    Store = [_V2],
    dict_create(_V3, map, [ca_address_sk-1, ca_zip-"12345"]),
    Customer_address = [_V3],
    dict_create(_V4, map, [c_customer_sk-1, c_current_addr_sk-1, c_preferred_cust_flag-"Y"]),
    Customer = [_V4],
    substr("zip", 0, 2, _V5),
    reverse(_V5, _V6),
    _V6,
    Zip_list = ["12345"],
    findall(_V26, (member(Ss, Store_sales), member(D, Date_dim), get_item(Ss, 'ss_sold_date_sk', _V7), get_item(D, 'd_date_sk', _V8), get_item(D, 'd_qoy', _V9), get_item(D, 'd_year', _V10), (((_V7 == _V8), (_V9 == 1)), (_V10 == 1998)), member(S, Store), get_item(Ss, 'ss_store_sk', _V11), get_item(S, 's_store_sk', _V12), (_V11 == _V12), member(Ca, Customer_address), get_item(S, 's_zip', _V13), substr(_V13, 0, 2, _V14), get_item(Ca, 'ca_zip', _V15), substr(_V15, 0, 2, _V16), (_V14 == _V16), member(C, Customer), get_item(Ca, 'ca_address_sk', _V17), get_item(C, 'c_current_addr_sk', _V18), get_item(C, 'c_preferred_cust_flag', _V19), ((_V17 == _V18), (_V19 == "Y")), get_item(Ca, 'ca_zip', _V20), substr(_V20, 0, 5, _V21), contains(Zip_list, _V21, _V22), _V22, get_item(S, 's_store_name', _V23), _V24 = _V23, dict_create(_V25, map, ['Ss'-Ss, 'D'-D, 'S'-S, 'Ca'-Ca, 'C'-C]), _V26 = _V24-_V25), _V27),
    group_pairs(_V27, [], _V28),
    findall(_V36, (member(G, _V28), get_item(G, 'key', _V29), findall(_V32, (member(X, G), true, get_item(X, 'ss', _V30), get_item(_V30, 'ss_net_profit', _V31), _V32 = _V31), _V33), sum(_V33, _V34), dict_create(_V35, map, [s_store_name-_V29, net_profit-_V34]), _V36 = _V35), _V37),
    Result = _V37,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V38, map, [s_store_name-"Store1", net_profit-10]),
    expect((Result == [_V38])),
    true.
