% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:39:02Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

contains(Container, Item, Res) :-
    is_dict(Container), !, (string(Item) -> atom_string(A, Item) ; A = Item), (get_dict(A, Container, _) -> Res = true ; Res = false).
contains(List, Item, Res) :-
    string(List), !, (sub_string(List, _, _, _, Item) -> Res = true ; Res = false).
contains(List, Item, Res) :- (member(Item, List) -> Res = true ; Res = false).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [c_customer_sk-1, c_current_addr_sk-1, c_current_cdemo_sk-1]),
    dict_create(_V1, map, [c_customer_sk-2, c_current_addr_sk-2, c_current_cdemo_sk-2]),
    Customer = [_V0, _V1],
    dict_create(_V2, map, [ca_address_sk-1, ca_state-"CA"]),
    dict_create(_V3, map, [ca_address_sk-2, ca_state-"NY"]),
    Customer_address = [_V2, _V3],
    dict_create(_V4, map, [cd_demo_sk-1, cd_gender-"M", cd_marital_status-"S", cd_dep_count-1, cd_dep_employed_count-1, cd_dep_college_count-0]),
    dict_create(_V5, map, [cd_demo_sk-2, cd_gender-"F", cd_marital_status-"M", cd_dep_count-2, cd_dep_employed_count-1, cd_dep_college_count-1]),
    Customer_demographics = [_V4, _V5],
    dict_create(_V6, map, [ss_customer_sk-1, ss_sold_date_sk-1]),
    Store_sales = [_V6],
    dict_create(_V7, map, [d_date_sk-1, d_year-2000, d_qoy-1]),
    Date_dim = [_V7],
    findall(_V13, (member(Ss, Store_sales), member(D, Date_dim), get_item(Ss, 'ss_sold_date_sk', _V8), get_item(D, 'd_date_sk', _V9), (_V8 == _V9), get_item(D, 'd_year', _V10), get_item(D, 'd_qoy', _V11), ((_V10 == 2000), (_V11 < 4)), get_item(Ss, 'ss_customer_sk', _V12), _V13 = _V12), _V14),
    Purchased = _V14,
    findall(_V30, (member(C, Customer), member(Ca, Customer_address), get_item(C, 'c_current_addr_sk', _V15), get_item(Ca, 'ca_address_sk', _V16), (_V15 == _V16), member(Cd, Customer_demographics), get_item(C, 'c_current_cdemo_sk', _V17), get_item(Cd, 'cd_demo_sk', _V18), (_V17 == _V18), get_item(C, 'c_customer_sk', _V19), contains(Purchased, _V19, _V20), _V20, get_item(Ca, 'ca_state', _V21), get_item(Cd, 'cd_gender', _V22), get_item(Cd, 'cd_marital_status', _V23), get_item(Cd, 'cd_dep_count', _V24), get_item(Cd, 'cd_dep_employed_count', _V25), get_item(Cd, 'cd_dep_college_count', _V26), dict_create(_V27, map, [state-_V21, gender-_V22, marital-_V23, dep-_V24, emp-_V25, col-_V26]), _V28 = _V27, dict_create(_V29, map, ['C'-C, 'Ca'-Ca, 'Cd'-Cd]), _V30 = _V28-_V29), _V31),
    group_pairs(_V31, [], _V32),
    findall(_V47, (member(G, _V32), get_item(G, 'key', _V33), get_item(_V33, 'state', _V34), get_item(G, 'key', _V35), get_item(_V35, 'gender', _V36), get_item(G, 'key', _V37), get_item(_V37, 'marital', _V38), get_item(G, 'key', _V39), get_item(_V39, 'dep', _V40), get_item(G, 'key', _V41), get_item(_V41, 'emp', _V42), get_item(G, 'key', _V43), get_item(_V43, 'col', _V44), count(G, _V45), dict_create(_V46, map, [ca_state-_V34, cd_gender-_V36, cd_marital_status-_V38, cd_dep_count-_V40, cd_dep_employed_count-_V42, cd_dep_college_count-_V44, cnt-_V45]), _V47 = _V46), _V48),
    Groups = _V48,
    json_write_dict(current_output, Groups), nl,
    true,
    dict_create(_V49, map, [ca_state-"CA", cd_gender-"M", cd_marital_status-"S", cd_dep_count-1, cd_dep_employed_count-1, cd_dep_college_count-0, cnt-1]),
    expect((Groups == [_V49])),
    true.
