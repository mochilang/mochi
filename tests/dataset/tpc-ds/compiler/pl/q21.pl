% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:32Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [inv_item_sk-1, inv_warehouse_sk-1, inv_date_sk-1, inv_quantity_on_hand-30]),
    dict_create(_V1, map, [inv_item_sk-1, inv_warehouse_sk-1, inv_date_sk-2, inv_quantity_on_hand-40]),
    dict_create(_V2, map, [inv_item_sk-2, inv_warehouse_sk-2, inv_date_sk-1, inv_quantity_on_hand-20]),
    dict_create(_V3, map, [inv_item_sk-2, inv_warehouse_sk-2, inv_date_sk-2, inv_quantity_on_hand-20]),
    Inventory = [_V0, _V1, _V2, _V3],
    dict_create(_V4, map, [w_warehouse_sk-1, w_warehouse_name-"Main"]),
    dict_create(_V5, map, [w_warehouse_sk-2, w_warehouse_name-"Backup"]),
    Warehouse = [_V4, _V5],
    dict_create(_V6, map, [i_item_sk-1, i_item_id-"ITEM1"]),
    dict_create(_V7, map, [i_item_sk-2, i_item_id-"ITEM2"]),
    Item = [_V6, _V7],
    dict_create(_V8, map, [d_date_sk-1, d_date-"2000-03-01"]),
    dict_create(_V9, map, [d_date_sk-2, d_date-"2000-03-20"]),
    Date_dim = [_V8, _V9],
    findall(_V18, (member(Inv, Inventory), member(D, Date_dim), get_item(Inv, 'inv_date_sk', _V10), get_item(D, 'd_date_sk', _V11), (_V10 == _V11), get_item(D, 'd_date', _V12), (_V12 < "2000-03-15"), get_item(Inv, 'inv_warehouse_sk', _V13), get_item(Inv, 'inv_item_sk', _V14), dict_create(_V15, map, [w-_V13, i-_V14]), _V16 = _V15, dict_create(_V17, map, ['Inv'-Inv, 'D'-D]), _V18 = _V16-_V17), _V19),
    group_pairs(_V19, [], _V20),
    findall(_V30, (member(G, _V20), get_item(G, 'key', _V21), get_item(_V21, 'w', _V22), get_item(G, 'key', _V23), get_item(_V23, 'i', _V24), findall(_V26, (member(X, G), true, get_item(X, 'inv_quantity_on_hand', _V25), _V26 = _V25), _V27), sum(_V27, _V28), dict_create(_V29, map, [w-_V22, i-_V24, qty-_V28]), _V30 = _V29), _V31),
    Before = _V31,
    findall(_V40, (member(Inv, Inventory), member(D, Date_dim), get_item(Inv, 'inv_date_sk', _V32), get_item(D, 'd_date_sk', _V33), (_V32 == _V33), get_item(D, 'd_date', _V34), (_V34 >= "2000-03-15"), get_item(Inv, 'inv_warehouse_sk', _V35), get_item(Inv, 'inv_item_sk', _V36), dict_create(_V37, map, [w-_V35, i-_V36]), _V38 = _V37, dict_create(_V39, map, ['Inv'-Inv, 'D'-D]), _V40 = _V38-_V39), _V41),
    group_pairs(_V41, [], _V42),
    findall(_V52, (member(G, _V42), get_item(G, 'key', _V43), get_item(_V43, 'w', _V44), get_item(G, 'key', _V45), get_item(_V45, 'i', _V46), findall(_V48, (member(X, G), true, get_item(X, 'inv_quantity_on_hand', _V47), _V48 = _V47), _V49), sum(_V49, _V50), dict_create(_V51, map, [w-_V44, i-_V46, qty-_V50]), _V52 = _V51), _V53),
    After = _V53,
    findall(_V69, (member(B, Before), member(A, After), get_item(B, 'w', _V54), get_item(A, 'w', _V55), get_item(B, 'i', _V56), get_item(A, 'i', _V57), ((_V54 == _V55), (_V56 == _V57)), member(W, Warehouse), get_item(W, 'w_warehouse_sk', _V58), get_item(B, 'w', _V59), (_V58 == _V59), member(It, Item), get_item(It, 'i_item_sk', _V60), get_item(B, 'i', _V61), (_V60 == _V61), true, get_item(W, 'w_warehouse_name', _V62), get_item(It, 'i_item_id', _V63), get_item(B, 'qty', _V64), get_item(A, 'qty', _V65), get_item(A, 'qty', _V66), get_item(B, 'qty', _V67), dict_create(_V68, map, [w_name-_V62, i_id-_V63, before_qty-_V64, after_qty-_V65, ratio-(_V66 / _V67)]), _V69 = _V68), _V70),
    Joined = _V70,
    findall(_V78, (member(R, Joined), get_item(R, 'ratio', _V71), get_item(R, 'ratio', _V72), ((_V71 >= (2 / 3)), (_V72 =< (3 / 2))), get_item(R, 'w_name', _V73), get_item(R, 'i_id', _V74), get_item(R, 'before_qty', _V75), get_item(R, 'after_qty', _V76), dict_create(_V77, map, [w_warehouse_name-_V73, i_item_id-_V74, inv_before-_V75, inv_after-_V76]), _V78 = _V77), _V79),
    Result = _V79,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V80, map, [w_warehouse_name-"Backup", i_item_id-"ITEM2", inv_before-20, inv_after-20]),
    dict_create(_V81, map, [w_warehouse_name-"Main", i_item_id-"ITEM1", inv_before-30, inv_after-40]),
    expect((Result == [_V80, _V81])),
    true.
