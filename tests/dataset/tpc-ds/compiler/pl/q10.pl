% Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [c_customer_sk-1, c_current_addr_sk-1, c_current_cdemo_sk-1]),
    Customer = [_V0],
    dict_create(_V1, map, [ca_address_sk-1, ca_county-"CountyA"]),
    Customer_address = [_V1],
    dict_create(_V2, map, [cd_demo_sk-1, cd_gender-"F", cd_marital_status-"M", cd_education_status-"College", cd_purchase_estimate-5000, cd_credit_rating-"Good", cd_dep_count-1, cd_dep_employed_count-1, cd_dep_college_count-0]),
    Customer_demographics = [_V2],
    dict_create(_V3, map, [ss_customer_sk-1, ss_sold_date_sk-1]),
    Store_sales = [_V3],
    Web_sales = [],
    Catalog_sales = [],
    dict_create(_V4, map, [d_date_sk-1, d_year-2000, d_moy-2]),
    Date_dim = [_V4],
    findall(_V16, (member(C, Customer), member(Ca, Customer_address), get_item(C, 'c_current_addr_sk', _V5), get_item(Ca, 'ca_address_sk', _V6), get_item(Ca, 'ca_county', _V7), ((_V5 == _V6), (_V7 == "CountyA")), member(Cd, Customer_demographics), get_item(C, 'c_current_cdemo_sk', _V8), get_item(Cd, 'cd_demo_sk', _V9), (_V8 == _V9), get_item(Ss, 'ss_customer_sk', _V11), get_item(C, 'c_customer_sk', _V12), get_item(D, 'd_year', _V13), get_item(D, 'd_moy', _V14), get_item(D, 'd_moy', _V15), (once((member(Ss, Store_sales), ((((_V11 == _V12), (_V13 == 2000)), (_V14 >= 2)), (_V15 =< 5)))) -> _V10 = true ; _V10 = false), _V10, _V16 = Cd), _V17),
    Active = _V17,
    findall(_V29, (member(A, Active), true, get_item(A, 'cd_gender', _V18), get_item(A, 'cd_marital_status', _V19), get_item(A, 'cd_education_status', _V20), get_item(A, 'cd_purchase_estimate', _V21), get_item(A, 'cd_credit_rating', _V22), get_item(A, 'cd_dep_count', _V23), get_item(A, 'cd_dep_employed_count', _V24), get_item(A, 'cd_dep_college_count', _V25), dict_create(_V26, map, [gender-_V18, marital-_V19, education-_V20, purchase-_V21, credit-_V22, dep-_V23, depemp-_V24, depcol-_V25]), _V27 = _V26, dict_create(_V28, map, ['A'-A]), _V29 = _V27-_V28), _V30),
    group_pairs(_V30, [], _V31),
    findall(_V67, (member(G, _V31), get_item(G, 'key', _V32), get_item(_V32, 'gender', _V33), get_item(G, 'key', _V34), get_item(_V34, 'marital', _V35), get_item(G, 'key', _V36), get_item(_V36, 'education', _V37), findall(_V38, (member(_, G), true, _V38 = _), _V39), count(_V39, _V40), get_item(G, 'key', _V41), get_item(_V41, 'purchase', _V42), findall(_V43, (member(_, G), true, _V43 = _), _V44), count(_V44, _V45), get_item(G, 'key', _V46), get_item(_V46, 'credit', _V47), findall(_V48, (member(_, G), true, _V48 = _), _V49), count(_V49, _V50), get_item(G, 'key', _V51), get_item(_V51, 'dep', _V52), findall(_V53, (member(_, G), true, _V53 = _), _V54), count(_V54, _V55), get_item(G, 'key', _V56), get_item(_V56, 'depemp', _V57), findall(_V58, (member(_, G), true, _V58 = _), _V59), count(_V59, _V60), get_item(G, 'key', _V61), get_item(_V61, 'depcol', _V62), findall(_V63, (member(_, G), true, _V63 = _), _V64), count(_V64, _V65), dict_create(_V66, map, [cd_gender-_V33, cd_marital_status-_V35, cd_education_status-_V37, cnt1-_V40, cd_purchase_estimate-_V42, cnt2-_V45, cd_credit_rating-_V47, cnt3-_V50, cd_dep_count-_V52, cnt4-_V55, cd_dep_employed_count-_V57, cnt5-_V60, cd_dep_college_count-_V62, cnt6-_V65]), _V67 = _V66), _V68),
    Result = _V68,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V69, map, [cd_gender-"F", cd_marital_status-"M", cd_education_status-"College", cnt1-1, cd_purchase_estimate-5000, cnt2-1, cd_credit_rating-"Good", cnt3-1, cd_dep_count-1, cnt4-1, cd_dep_employed_count-1, cnt5-1, cd_dep_college_count-0, cnt6-1]),
    expect((Result == [_V69])),
    true.
