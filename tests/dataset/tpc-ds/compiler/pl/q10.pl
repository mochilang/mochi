% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:31Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [c_customer_sk-1, c_current_addr_sk-1, c_current_cdemo_sk-1]),
    Customer = [_V0],
    dict_create(_V1, map, [ca_address_sk-1, ca_county-"CountyA"]),
    Customer_address = [_V1],
    dict_create(_V2, map, [cd_demo_sk-1, cd_gender-"F", cd_marital_status-"M", cd_education_status-"College", cd_purchase_estimate-5000, cd_credit_rating-"Good", cd_dep_count-1, cd_dep_employed_count-1, cd_dep_college_count-0]),
    Customer_demographics = [_V2],
    dict_create(_V3, map, [ss_customer_sk-1, ss_sold_date_sk-1]),
    Store_sales = [_V3],
    Web_sales = [],
    Catalog_sales = [],
    dict_create(_V4, map, [d_date_sk-1, d_year-2000, d_moy-2]),
    Date_dim = [_V4],
    findall(_V20, (member(C, Customer), member(Ca, Customer_address), get_item(C, 'c_current_addr_sk', _V5), get_item(Ca, 'ca_address_sk', _V6), get_item(Ca, 'ca_county', _V7), ((_V5 == _V6), (_V7 == "CountyA")), member(Cd, Customer_demographics), get_item(C, 'c_current_cdemo_sk', _V8), get_item(Cd, 'cd_demo_sk', _V9), (_V8 == _V9), findall(_V17, (member(Ss, Store_sales), member(D, Date_dim), get_item(Ss, 'ss_sold_date_sk', _V10), get_item(D, 'd_date_sk', _V11), (_V10 == _V11), get_item(Ss, 'ss_customer_sk', _V12), get_item(C, 'c_customer_sk', _V13), get_item(D, 'd_year', _V14), get_item(D, 'd_moy', _V15), get_item(D, 'd_moy', _V16), ((((_V12 == _V13), (_V14 == 2000)), (_V15 >= 2)), (_V16 =< 5)), _V17 = Ss), _V18), exists(_V18, _V19), _V19, _V20 = Cd), _V21),
    Active = _V21,
    findall(_V33, (member(A, Active), true, get_item(A, 'cd_gender', _V22), get_item(A, 'cd_marital_status', _V23), get_item(A, 'cd_education_status', _V24), get_item(A, 'cd_purchase_estimate', _V25), get_item(A, 'cd_credit_rating', _V26), get_item(A, 'cd_dep_count', _V27), get_item(A, 'cd_dep_employed_count', _V28), get_item(A, 'cd_dep_college_count', _V29), dict_create(_V30, map, [gender-_V22, marital-_V23, education-_V24, purchase-_V25, credit-_V26, dep-_V27, depemp-_V28, depcol-_V29]), _V31 = _V30, dict_create(_V32, map, ['A'-A]), _V33 = _V31-_V32), _V34),
    group_pairs(_V34, [], _V35),
    findall(_V71, (member(G, _V35), get_item(G, 'key', _V36), get_item(_V36, 'gender', _V37), get_item(G, 'key', _V38), get_item(_V38, 'marital', _V39), get_item(G, 'key', _V40), get_item(_V40, 'education', _V41), findall(_V42, (member(_, G), true, _V42 = _), _V43), count(_V43, _V44), get_item(G, 'key', _V45), get_item(_V45, 'purchase', _V46), findall(_V47, (member(_, G), true, _V47 = _), _V48), count(_V48, _V49), get_item(G, 'key', _V50), get_item(_V50, 'credit', _V51), findall(_V52, (member(_, G), true, _V52 = _), _V53), count(_V53, _V54), get_item(G, 'key', _V55), get_item(_V55, 'dep', _V56), findall(_V57, (member(_, G), true, _V57 = _), _V58), count(_V58, _V59), get_item(G, 'key', _V60), get_item(_V60, 'depemp', _V61), findall(_V62, (member(_, G), true, _V62 = _), _V63), count(_V63, _V64), get_item(G, 'key', _V65), get_item(_V65, 'depcol', _V66), findall(_V67, (member(_, G), true, _V67 = _), _V68), count(_V68, _V69), dict_create(_V70, map, [cd_gender-_V37, cd_marital_status-_V39, cd_education_status-_V41, cnt1-_V44, cd_purchase_estimate-_V46, cnt2-_V49, cd_credit_rating-_V51, cnt3-_V54, cd_dep_count-_V56, cnt4-_V59, cd_dep_employed_count-_V61, cnt5-_V64, cd_dep_college_count-_V66, cnt6-_V69]), _V71 = _V70), _V72),
    Result = _V72,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V73, map, [cd_gender-"F", cd_marital_status-"M", cd_education_status-"College", cnt1-1, cd_purchase_estimate-5000, cnt2-1, cd_credit_rating-"Good", cnt3-1, cd_dep_count-1, cnt4-1, cd_dep_employed_count-1, cnt5-1, cd_dep_college_count-0, cnt6-1]),
    expect((Result == [_V73])),
    true.
