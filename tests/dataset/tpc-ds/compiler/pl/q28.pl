% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:32Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ss_quantity-3, ss_list_price-100, ss_coupon_amt-50, ss_wholesale_cost-30]),
    dict_create(_V1, map, [ss_quantity-8, ss_list_price-80, ss_coupon_amt-10, ss_wholesale_cost-20]),
    dict_create(_V2, map, [ss_quantity-12, ss_list_price-60, ss_coupon_amt-5, ss_wholesale_cost-15]),
    Store_sales = [_V0, _V1, _V2],
    findall(_V11, (member(Ss, Store_sales), get_item(Ss, 'ss_quantity', _V3), get_item(Ss, 'ss_quantity', _V4), get_item(Ss, 'ss_list_price', _V5), get_item(Ss, 'ss_list_price', _V6), get_item(Ss, 'ss_coupon_amt', _V7), get_item(Ss, 'ss_coupon_amt', _V8), get_item(Ss, 'ss_wholesale_cost', _V9), get_item(Ss, 'ss_wholesale_cost', _V10), (((_V3 >= 0), (_V4 =< 5)), ((((_V5 >= 0), (_V6 =< 110)) ; ((_V7 >= 0), (_V8 =< 1000))) ; ((_V9 >= 0), (_V10 =< 50)))), _V11 = Ss), _V12),
    Bucket1 = _V12,
    findall(_V21, (member(Ss, Store_sales), get_item(Ss, 'ss_quantity', _V13), get_item(Ss, 'ss_quantity', _V14), get_item(Ss, 'ss_list_price', _V15), get_item(Ss, 'ss_list_price', _V16), get_item(Ss, 'ss_coupon_amt', _V17), get_item(Ss, 'ss_coupon_amt', _V18), get_item(Ss, 'ss_wholesale_cost', _V19), get_item(Ss, 'ss_wholesale_cost', _V20), (((_V13 >= 6), (_V14 =< 10)), ((((_V15 >= 0), (_V16 =< 110)) ; ((_V17 >= 0), (_V18 =< 1000))) ; ((_V19 >= 0), (_V20 =< 50)))), _V21 = Ss), _V22),
    Bucket2 = _V22,
    findall(_V24, (member(X, Bucket1), true, get_item(X, 'ss_list_price', _V23), _V24 = _V23), _V25),
    avg(_V25, _V26),
    count(Bucket1, _V27),
    findall(_V31, (member(X, Bucket1), true, get_item(X, 'ss_list_price', _V28), _V29 = _V28, dict_create(_V30, map, ['X'-X]), _V31 = _V29-_V30), _V32),
    group_pairs(_V32, [], _V33),
    findall(_V35, (member(G, _V33), get_item(G, 'key', _V34), _V35 = _V34), _V36),
    count(_V36, _V37),
    findall(_V39, (member(X, Bucket2), true, get_item(X, 'ss_list_price', _V38), _V39 = _V38), _V40),
    avg(_V40, _V41),
    count(Bucket2, _V42),
    findall(_V46, (member(X, Bucket2), true, get_item(X, 'ss_list_price', _V43), _V44 = _V43, dict_create(_V45, map, ['X'-X]), _V46 = _V44-_V45), _V47),
    group_pairs(_V47, [], _V48),
    findall(_V50, (member(G, _V48), get_item(G, 'key', _V49), _V50 = _V49), _V51),
    count(_V51, _V52),
    dict_create(_V53, map, [b1_lp-_V26, b1_cnt-_V27, b1_cntd-_V37, b2_lp-_V41, b2_cnt-_V42, b2_cntd-_V52]),
    Result = _V53,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V54, map, [b1_lp-100, b1_cnt-1, b1_cntd-1, b2_lp-80, b2_cnt-1, b2_cntd-1]),
    expect((Result == _V54)),
    true.
