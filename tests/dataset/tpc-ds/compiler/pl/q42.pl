% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:33Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [sold_date_sk-1, item_sk-1, ext_sales_price-10]),
    dict_create(_V1, map, [sold_date_sk-1, item_sk-2, ext_sales_price-20]),
    dict_create(_V2, map, [sold_date_sk-2, item_sk-1, ext_sales_price-15]),
    Store_sales = [_V0, _V1, _V2],
    dict_create(_V3, map, [i_item_sk-1, i_manager_id-1, i_category_id-100, i_category-"CatA"]),
    dict_create(_V4, map, [i_item_sk-2, i_manager_id-1, i_category_id-200, i_category-"CatB"]),
    Item = [_V3, _V4],
    dict_create(_V5, map, [d_date_sk-1, d_year-2020, d_moy-5]),
    dict_create(_V6, map, [d_date_sk-2, d_year-2021, d_moy-5]),
    Date_dim = [_V5, _V6],
    Month is 5,
    Year is 2020,
    findall(_V19, (member(Dt, Date_dim), member(Ss, Store_sales), get_item(Ss, 'sold_date_sk', _V7), get_item(Dt, 'd_date_sk', _V8), (_V7 == _V8), member(It, Item), get_item(Ss, 'item_sk', _V9), get_item(It, 'i_item_sk', _V10), (_V9 == _V10), get_item(It, 'i_manager_id', _V11), get_item(Dt, 'd_moy', _V12), get_item(Dt, 'd_year', _V13), (((_V11 == 1), (_V12 == Month)), (_V13 == Year)), get_item(Dt, 'd_year', _V14), get_item(It, 'i_category_id', _V15), get_item(It, 'i_category', _V16), get_item(Ss, 'ext_sales_price', _V17), dict_create(_V18, map, [d_year-_V14, i_category_id-_V15, i_category-_V16, price-_V17]), _V19 = _V18), _V20),
    Records = _V20,
    findall(_V27, (member(R, Records), true, get_item(R, 'd_year', _V21), get_item(R, 'i_category_id', _V22), get_item(R, 'i_category', _V23), dict_create(_V24, map, [d_year-_V21, i_category_id-_V22, i_category-_V23]), _V25 = _V24, dict_create(_V26, map, ['R'-R]), _V27 = _V25-_V26), _V28),
    group_pairs(_V28, [], _V29),
    findall(_V41, (member(G, _V29), get_item(G, 'key', _V30), get_item(_V30, 'd_year', _V31), get_item(G, 'key', _V32), get_item(_V32, 'i_category_id', _V33), get_item(G, 'key', _V34), get_item(_V34, 'i_category', _V35), findall(_V37, (member(X, G), true, get_item(X, 'price', _V36), _V37 = _V36), _V38), sum(_V38, _V39), dict_create(_V40, map, [d_year-_V31, i_category_id-_V33, i_category-_V35, sum_ss_ext_sales_price-_V39]), _V41 = _V40), _V42),
    Grouped = _V42,
    findall(_V43, (member(G, Grouped), true, _V43 = G), _V44),
    Base = _V44,
    Result = Base,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V45, map, [d_year-2020, i_category_id-200, i_category-"CatB", sum_ss_ext_sales_price-20]),
    dict_create(_V46, map, [d_year-2020, i_category_id-100, i_category-"CatA", sum_ss_ext_sales_price-10]),
    expect((Result == [_V45, _V46])),
    true.
