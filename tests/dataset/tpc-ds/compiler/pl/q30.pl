% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:33Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [wr_returning_customer_sk-1, wr_returned_date_sk-1, wr_return_amt-100, wr_returning_addr_sk-1]),
    dict_create(_V1, map, [wr_returning_customer_sk-2, wr_returned_date_sk-1, wr_return_amt-30, wr_returning_addr_sk-2]),
    dict_create(_V2, map, [wr_returning_customer_sk-1, wr_returned_date_sk-1, wr_return_amt-50, wr_returning_addr_sk-1]),
    Web_returns = [_V0, _V1, _V2],
    dict_create(_V3, map, [d_date_sk-1, d_year-2000]),
    Date_dim = [_V3],
    dict_create(_V4, map, [ca_address_sk-1, ca_state-"CA"]),
    dict_create(_V5, map, [ca_address_sk-2, ca_state-"CA"]),
    Customer_address = [_V4, _V5],
    dict_create(_V6, map, [c_customer_sk-1, c_customer_id-"C1", c_first_name-"John", c_last_name-"Doe", c_current_addr_sk-1]),
    dict_create(_V7, map, [c_customer_sk-2, c_customer_id-"C2", c_first_name-"Jane", c_last_name-"Smith", c_current_addr_sk-2]),
    Customer = [_V6, _V7],
    findall(_V19, (member(Wr, Web_returns), member(D, Date_dim), get_item(Wr, 'wr_returned_date_sk', _V8), get_item(D, 'd_date_sk', _V9), (_V8 == _V9), member(Ca, Customer_address), get_item(Wr, 'wr_returning_addr_sk', _V10), get_item(Ca, 'ca_address_sk', _V11), (_V10 == _V11), get_item(D, 'd_year', _V12), get_item(Ca, 'ca_state', _V13), ((_V12 == 2000), (_V13 == "CA")), get_item(Wr, 'wr_returning_customer_sk', _V14), get_item(Ca, 'ca_state', _V15), dict_create(_V16, map, [cust-_V14, state-_V15]), _V17 = _V16, dict_create(_V18, map, ['Wr'-Wr, 'D'-D, 'Ca'-Ca]), _V19 = _V17-_V18), _V20),
    group_pairs(_V20, [], _V21),
    findall(_V31, (member(G, _V21), get_item(G, 'key', _V22), get_item(_V22, 'cust', _V23), get_item(G, 'key', _V24), get_item(_V24, 'state', _V25), findall(_V27, (member(X, G), true, get_item(X, 'wr_return_amt', _V26), _V27 = _V26), _V28), sum(_V28, _V29), dict_create(_V30, map, [ctr_customer_sk-_V23, ctr_state-_V25, ctr_total_return-_V29]), _V31 = _V30), _V32),
    Customer_total_return = _V32,
    findall(_V36, (member(Ctr, Customer_total_return), true, get_item(Ctr, 'ctr_state', _V33), _V34 = _V33, dict_create(_V35, map, ['Ctr'-Ctr]), _V36 = _V34-_V35), _V37),
    group_pairs(_V37, [], _V38),
    findall(_V45, (member(G, _V38), get_item(G, 'key', _V39), findall(_V41, (member(X, G), true, get_item(X, 'ctr_total_return', _V40), _V41 = _V40), _V42), avg(_V42, _V43), dict_create(_V44, map, [state-_V39, avg_return-_V43]), _V45 = _V44), _V46),
    Avg_by_state = _V46,
    findall(_V58, (member(Ctr, Customer_total_return), member(Avg, Avg_by_state), get_item(Ctr, 'ctr_state', _V47), get_item(Avg, 'state', _V48), (_V47 == _V48), member(C, Customer), get_item(Ctr, 'ctr_customer_sk', _V49), get_item(C, 'c_customer_sk', _V50), (_V49 == _V50), get_item(Ctr, 'ctr_total_return', _V51), get_item(Avg, 'avg_return', _V52), (_V51 > (_V52 * 1.2)), get_item(C, 'c_customer_id', _V53), get_item(C, 'c_first_name', _V54), get_item(C, 'c_last_name', _V55), get_item(Ctr, 'ctr_total_return', _V56), dict_create(_V57, map, [c_customer_id-_V53, c_first_name-_V54, c_last_name-_V55, ctr_total_return-_V56]), _V58 = _V57), _V59),
    Result = _V59,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V60, map, [c_customer_id-"C1", c_first_name-"John", c_last_name-"Doe", ctr_total_return-150]),
    expect((Result == [_V60])),
    true.
