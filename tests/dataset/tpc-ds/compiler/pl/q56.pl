% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:34Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [item-1, price-10]),
    Store_sales = [_V0],
    dict_create(_V1, map, [item-1, price-20]),
    Catalog_sales = [_V1],
    dict_create(_V2, map, [item-1, price-30]),
    Web_sales = [_V2],
    findall(_V6, (member(S, Store_sales), true, get_item(S, 'item', _V3), _V4 = _V3, dict_create(_V5, map, ['S'-S]), _V6 = _V4-_V5), _V7),
    group_pairs(_V7, [], _V8),
    findall(_V15, (member(G, _V8), get_item(G, 'key', _V9), findall(_V11, (member(X, G), true, get_item(X, 'price', _V10), _V11 = _V10), _V12), sum(_V12, _V13), dict_create(_V14, map, [item-_V9, total-_V13]), _V15 = _V14), _V16),
    Ss = _V16,
    findall(_V20, (member(S, Catalog_sales), true, get_item(S, 'item', _V17), _V18 = _V17, dict_create(_V19, map, ['S'-S]), _V20 = _V18-_V19), _V21),
    group_pairs(_V21, [], _V22),
    findall(_V29, (member(G, _V22), get_item(G, 'key', _V23), findall(_V25, (member(X, G), true, get_item(X, 'price', _V24), _V25 = _V24), _V26), sum(_V26, _V27), dict_create(_V28, map, [item-_V23, total-_V27]), _V29 = _V28), _V30),
    Cs = _V30,
    findall(_V34, (member(S, Web_sales), true, get_item(S, 'item', _V31), _V32 = _V31, dict_create(_V33, map, ['S'-S]), _V34 = _V32-_V33), _V35),
    group_pairs(_V35, [], _V36),
    findall(_V43, (member(G, _V36), get_item(G, 'key', _V37), findall(_V39, (member(X, G), true, get_item(X, 'price', _V38), _V39 = _V38), _V40), sum(_V40, _V41), dict_create(_V42, map, [item-_V37, total-_V41]), _V43 = _V42), _V44),
    Ws = _V44,
    concat(Ss, Cs, Ws, _V45),
    Union = _V45,
    findall(_V49, (member(U, Union), true, get_item(U, 'item', _V46), _V47 = _V46, dict_create(_V48, map, ['U'-U]), _V49 = _V47-_V48), _V50),
    group_pairs(_V50, [], _V51),
    findall(_V58, (member(G, _V51), get_item(G, 'key', _V52), findall(_V54, (member(X, G), true, get_item(X, 'total', _V53), _V54 = _V53), _V55), sum(_V55, _V56), dict_create(_V57, map, [i_item_id-_V52, total_sales-_V56]), _V58 = _V57), _V59),
    Result = _V59,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V60, map, [i_item_id-1, total_sales-60]),
    expect((Result == [_V60])),
    true.
