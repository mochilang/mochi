% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:39:02Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ss_ticket_number-1, ss_customer_sk-1, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-1]),
    dict_create(_V1, map, [ss_ticket_number-1, ss_customer_sk-1, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-1]),
    dict_create(_V2, map, [ss_ticket_number-1, ss_customer_sk-1, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-1]),
    dict_create(_V3, map, [ss_ticket_number-1, ss_customer_sk-1, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-1]),
    dict_create(_V4, map, [ss_ticket_number-1, ss_customer_sk-1, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-1]),
    dict_create(_V5, map, [ss_ticket_number-1, ss_customer_sk-1, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-1]),
    dict_create(_V6, map, [ss_ticket_number-1, ss_customer_sk-1, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-1]),
    dict_create(_V7, map, [ss_ticket_number-1, ss_customer_sk-1, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-1]),
    dict_create(_V8, map, [ss_ticket_number-1, ss_customer_sk-1, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-1]),
    dict_create(_V9, map, [ss_ticket_number-1, ss_customer_sk-1, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-1]),
    dict_create(_V10, map, [ss_ticket_number-1, ss_customer_sk-1, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-1]),
    dict_create(_V11, map, [ss_ticket_number-1, ss_customer_sk-1, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-1]),
    dict_create(_V12, map, [ss_ticket_number-1, ss_customer_sk-1, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-1]),
    dict_create(_V13, map, [ss_ticket_number-1, ss_customer_sk-1, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-1]),
    dict_create(_V14, map, [ss_ticket_number-1, ss_customer_sk-1, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-1]),
    dict_create(_V15, map, [ss_ticket_number-1, ss_customer_sk-1, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-1]),
    dict_create(_V16, map, [ss_ticket_number-2, ss_customer_sk-2, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-2]),
    dict_create(_V17, map, [ss_ticket_number-2, ss_customer_sk-2, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-2]),
    dict_create(_V18, map, [ss_ticket_number-2, ss_customer_sk-2, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-2]),
    dict_create(_V19, map, [ss_ticket_number-2, ss_customer_sk-2, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-2]),
    dict_create(_V20, map, [ss_ticket_number-2, ss_customer_sk-2, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-2]),
    dict_create(_V21, map, [ss_ticket_number-2, ss_customer_sk-2, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-2]),
    dict_create(_V22, map, [ss_ticket_number-2, ss_customer_sk-2, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-2]),
    dict_create(_V23, map, [ss_ticket_number-2, ss_customer_sk-2, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-2]),
    dict_create(_V24, map, [ss_ticket_number-2, ss_customer_sk-2, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-2]),
    dict_create(_V25, map, [ss_ticket_number-2, ss_customer_sk-2, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-2]),
    Store_sales = [_V0, _V1, _V2, _V3, _V4, _V5, _V6, _V7, _V8, _V9, _V10, _V11, _V12, _V13, _V14, _V15, _V16, _V17, _V18, _V19, _V20, _V21, _V22, _V23, _V24, _V25],
    dict_create(_V26, map, [d_date_sk-1, d_dom-2, d_year-2000]),
    Date_dim = [_V26],
    dict_create(_V27, map, [s_store_sk-1, s_county-"A"]),
    Store = [_V27],
    dict_create(_V28, map, [hd_demo_sk-1, hd_buy_potential-">10000", hd_vehicle_count-2, hd_dep_count-3]),
    dict_create(_V29, map, [hd_demo_sk-2, hd_buy_potential-">10000", hd_vehicle_count-2, hd_dep_count-1]),
    Household_demographics = [_V28, _V29],
    dict_create(_V30, map, [c_customer_sk-1, c_last_name-"Smith", c_first_name-"John", c_salutation-"Mr.", c_preferred_cust_flag-"Y"]),
    dict_create(_V31, map, [c_customer_sk-2, c_last_name-"Jones", c_first_name-"Alice", c_salutation-"Ms.", c_preferred_cust_flag-"N"]),
    Customer = [_V30, _V31],
    findall(_V51, (member(Ss, Store_sales), member(D, Date_dim), get_item(Ss, 'ss_sold_date_sk', _V32), get_item(D, 'd_date_sk', _V33), (_V32 == _V33), member(S, Store), get_item(Ss, 'ss_store_sk', _V34), get_item(S, 's_store_sk', _V35), (_V34 == _V35), member(Hd, Household_demographics), get_item(Ss, 'ss_hdemo_sk', _V36), get_item(Hd, 'hd_demo_sk', _V37), (_V36 == _V37), get_item(D, 'd_dom', _V38), get_item(D, 'd_dom', _V39), get_item(Hd, 'hd_buy_potential', _V40), get_item(Hd, 'hd_vehicle_count', _V41), get_item(Hd, 'hd_dep_count', _V42), get_item(Hd, 'hd_vehicle_count', _V43), get_item(D, 'd_year', _V44), get_item(S, 's_county', _V45), (((((((_V38 >= 1), (_V39 =< 3)), (_V40 == ">10000")), (_V41 > 0)), ((_V42 / _V43) > 1.2)), (_V44 == 2000)), (_V45 == "A")), get_item(Ss, 'ss_ticket_number', _V46), get_item(Ss, 'ss_customer_sk', _V47), dict_create(_V48, map, [ticket-_V46, cust-_V47]), _V49 = _V48, dict_create(_V50, map, ['Ss'-Ss, 'D'-D, 'S'-S, 'Hd'-Hd]), _V51 = _V49-_V50), _V52),
    group_pairs(_V52, [], _V53),
    findall(_V60, (member(G, _V53), get_item(G, 'key', _V54), get_item(_V54, 'ticket', _V55), get_item(G, 'key', _V56), get_item(_V56, 'cust', _V57), count(G, _V58), dict_create(_V59, map, [ss_ticket_number-_V55, ss_customer_sk-_V57, cnt-_V58]), _V60 = _V59), _V61),
    Dn = _V61,
    findall(_V73, (member(Dn1, Dn), member(C, Customer), get_item(Dn1, 'ss_customer_sk', _V62), get_item(C, 'c_customer_sk', _V63), (_V62 == _V63), get_item(Dn1, 'cnt', _V64), get_item(Dn1, 'cnt', _V65), ((_V64 >= 15), (_V65 =< 20)), get_item(C, 'c_last_name', _V66), get_item(C, 'c_first_name', _V67), get_item(C, 'c_salutation', _V68), get_item(C, 'c_preferred_cust_flag', _V69), get_item(Dn1, 'ss_ticket_number', _V70), get_item(Dn1, 'cnt', _V71), dict_create(_V72, map, [c_last_name-_V66, c_first_name-_V67, c_salutation-_V68, c_preferred_cust_flag-_V69, ss_ticket_number-_V70, cnt-_V71]), _V73 = _V72), _V74),
    Result = _V74,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V75, map, [c_last_name-"Smith", c_first_name-"John", c_salutation-"Mr.", c_preferred_cust_flag-"Y", ss_ticket_number-1, cnt-16]),
    expect((Result == [_V75])),
    true.
