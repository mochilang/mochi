% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:37Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [cc_call_center_sk-1, cc_call_center_id-"CC1", cc_name-"Main", cc_manager-"Alice"]),
    Call_center = [_V0],
    dict_create(_V1, map, [cr_call_center_sk-1, cr_returned_date_sk-1, cr_returning_customer_sk-1, cr_net_loss-10]),
    Catalog_returns = [_V1],
    dict_create(_V2, map, [d_date_sk-1, d_year-2001, d_moy-5]),
    Date_dim = [_V2],
    dict_create(_V3, map, [c_customer_sk-1, c_current_cdemo_sk-1, c_current_hdemo_sk-1, c_current_addr_sk-1]),
    Customer = [_V3],
    dict_create(_V4, map, [cd_demo_sk-1, cd_marital_status-"M", cd_education_status-"Unknown"]),
    Customer_demographics = [_V4],
    dict_create(_V5, map, [hd_demo_sk-1, hd_buy_potential-"1001-5000"]),
    Household_demographics = [_V5],
    dict_create(_V6, map, [ca_address_sk-1, ca_gmt_offset-(-6)]),
    Customer_address = [_V6],
    findall(_V31, (member(Cc, Call_center), member(Cr, Catalog_returns), get_item(Cc, 'cc_call_center_sk', _V7), get_item(Cr, 'cr_call_center_sk', _V8), (_V7 == _V8), member(D, Date_dim), get_item(Cr, 'cr_returned_date_sk', _V9), get_item(D, 'd_date_sk', _V10), (_V9 == _V10), member(C, Customer), get_item(Cr, 'cr_returning_customer_sk', _V11), get_item(C, 'c_customer_sk', _V12), (_V11 == _V12), member(Cd, Customer_demographics), get_item(C, 'c_current_cdemo_sk', _V13), get_item(Cd, 'cd_demo_sk', _V14), (_V13 == _V14), member(Hd, Household_demographics), get_item(C, 'c_current_hdemo_sk', _V15), get_item(Hd, 'hd_demo_sk', _V16), (_V15 == _V16), member(Ca, Customer_address), get_item(C, 'c_current_addr_sk', _V17), get_item(Ca, 'ca_address_sk', _V18), (_V17 == _V18), get_item(D, 'd_year', _V19), get_item(D, 'd_moy', _V20), get_item(Cd, 'cd_marital_status', _V21), get_item(Cd, 'cd_education_status', _V22), get_item(Hd, 'hd_buy_potential', _V23), get_item(Ca, 'ca_gmt_offset', _V24), ((((((_V19 == 2001), (_V20 == 5)), (_V21 == "M")), (_V22 == "Unknown")), (_V23 == "1001-5000")), (_V24 == (-6))), get_item(Cc, 'cc_call_center_id', _V25), get_item(Cc, 'cc_name', _V26), get_item(Cc, 'cc_manager', _V27), dict_create(_V28, map, [id-_V25, name-_V26, mgr-_V27]), _V29 = _V28, dict_create(_V30, map, ['Cc'-Cc, 'Cr'-Cr, 'D'-D, 'C'-C, 'Cd'-Cd, 'Hd'-Hd, 'Ca'-Ca]), _V31 = _V29-_V30), _V32),
    group_pairs(_V32, [], _V33),
    findall(_V45, (member(G, _V33), get_item(G, 'key', _V34), get_item(_V34, 'id', _V35), get_item(G, 'key', _V36), get_item(_V36, 'name', _V37), get_item(G, 'key', _V38), get_item(_V38, 'mgr', _V39), findall(_V41, (member(X, G), true, get_item(X, 'cr_net_loss', _V40), _V41 = _V40), _V42), sum(_V42, _V43), dict_create(_V44, map, [call_center-_V35, call_center_name-_V37, manager-_V39, returns_loss-_V43]), _V45 = _V44), _V46),
    first(_V46, _V47),
    Result = _V47,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V48, map, [call_center-"CC1", call_center_name-"Main", manager-"Alice", returns_loss-10]),
    expect((Result == _V48)),
    true.
