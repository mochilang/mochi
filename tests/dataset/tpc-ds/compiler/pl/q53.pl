% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:34Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

abs(X, _Res) :-
    ((X >= 0) ->
        _Res = X.
        true
    ; true
    ),
    _Res is (-X).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [i_item_sk-1, i_manufact_id-1]),
    dict_create(_V1, map, [i_item_sk-2, i_manufact_id-2]),
    Item = [_V0, _V1],
    dict_create(_V2, map, [item-1, date-1, price-10]),
    dict_create(_V3, map, [item-1, date-2, price-10]),
    dict_create(_V4, map, [item-2, date-1, price-30]),
    dict_create(_V5, map, [item-2, date-2, price-23]),
    Store_sales = [_V2, _V3, _V4, _V5],
    dict_create(_V6, map, [d_date_sk-1, d_month_seq-1]),
    dict_create(_V7, map, [d_date_sk-2, d_month_seq-2]),
    Date_dim = [_V6, _V7],
    findall(_V15, (member(Ss, Store_sales), member(I, Item), get_item(Ss, 'item', _V8), get_item(I, 'i_item_sk', _V9), (_V8 == _V9), member(D, Date_dim), get_item(Ss, 'date', _V10), get_item(D, 'd_date_sk', _V11), (_V10 == _V11), true, get_item(I, 'i_manufact_id', _V12), _V13 = _V12, dict_create(_V14, map, ['Ss'-Ss, 'I'-I, 'D'-D]), _V15 = _V13-_V14), _V16),
    group_pairs(_V16, [], _V17),
    findall(_V28, (member(G, _V17), get_item(G, 'key', _V18), findall(_V20, (member(X, G), true, get_item(X, 'price', _V19), _V20 = _V19), _V21), sum(_V21, _V22), findall(_V24, (member(X, G), true, get_item(X, 'price', _V23), _V24 = _V23), _V25), avg(_V25, _V26), dict_create(_V27, map, [manu-_V18, sum_sales-_V22, avg_sales-_V26]), _V28 = _V27), _V29),
    Grouped = _V29,
    findall(_V38, (member(G, Grouped), get_item(G, 'avg_sales', _V30), get_item(G, 'sum_sales', _V31), get_item(G, 'avg_sales', _V32), abs((_V31 - _V32), _V33), get_item(G, 'avg_sales', _V34), ((_V30 > 0), ((_V33 / _V34) > 0.1)), get_item(G, 'manu', _V35), get_item(G, 'sum_sales', _V36), dict_create(_V37, map, [i_manufact_id-_V35, sum_sales-_V36]), _V38 = _V37), _V39),
    Result = _V39,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V40, map, [i_manufact_id-1, sum_sales-20]),
    dict_create(_V41, map, [i_manufact_id-2, sum_sales-53]),
    expect((Result == [_V40, _V41])),
    true.
