% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:39:03Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [i_item_sk-1, i_item_id-"I1", i_item_desc-"Item1", i_current_price-30, i_manufact_id-800]),
    dict_create(_V1, map, [i_item_sk-2, i_item_id-"I2", i_item_desc-"Item2", i_current_price-60, i_manufact_id-801]),
    Item = [_V0, _V1],
    dict_create(_V2, map, [inv_item_sk-1, inv_warehouse_sk-1, inv_date_sk-1, inv_quantity_on_hand-200]),
    dict_create(_V3, map, [inv_item_sk-2, inv_warehouse_sk-1, inv_date_sk-1, inv_quantity_on_hand-300]),
    Inventory = [_V2, _V3],
    dict_create(_V4, map, [d_date_sk-1, d_date-"2000-01-15"]),
    Date_dim = [_V4],
    dict_create(_V5, map, [cs_item_sk-1, cs_sold_date_sk-1]),
    Catalog_sales = [_V5],
    findall(_V24, (member(I, Item), member(Inv, Inventory), get_item(I, 'i_item_sk', _V6), get_item(Inv, 'inv_item_sk', _V7), (_V6 == _V7), member(D, Date_dim), get_item(Inv, 'inv_date_sk', _V8), get_item(D, 'd_date_sk', _V9), (_V8 == _V9), member(Cs, Catalog_sales), get_item(Cs, 'cs_item_sk', _V10), get_item(I, 'i_item_sk', _V11), (_V10 == _V11), get_item(I, 'i_current_price', _V12), get_item(I, 'i_current_price', _V13), get_item(I, 'i_manufact_id', _V14), get_item(I, 'i_manufact_id', _V15), get_item(Inv, 'inv_quantity_on_hand', _V16), get_item(Inv, 'inv_quantity_on_hand', _V17), ((((((_V12 >= 20), (_V13 =< 50)), (_V14 >= 800)), (_V15 =< 803)), (_V16 >= 100)), (_V17 =< 500)), get_item(I, 'i_item_id', _V18), get_item(I, 'i_item_desc', _V19), get_item(I, 'i_current_price', _V20), dict_create(_V21, map, [id-_V18, desc-_V19, price-_V20]), _V22 = _V21, dict_create(_V23, map, ['I'-I, 'Inv'-Inv, 'D'-D, 'Cs'-Cs]), _V24 = _V22-_V23), _V25),
    group_pairs(_V25, [], _V26),
    findall(_V34, (member(G, _V26), get_item(G, 'key', _V27), get_item(_V27, 'id', _V28), get_item(G, 'key', _V29), get_item(_V29, 'desc', _V30), get_item(G, 'key', _V31), get_item(_V31, 'price', _V32), dict_create(_V33, map, [i_item_id-_V28, i_item_desc-_V30, i_current_price-_V32]), _V34 = _V33), _V35),
    Result = _V35,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V36, map, [i_item_id-"I1", i_item_desc-"Item1", i_current_price-30]),
    expect((Result == [_V36])),
    true.
