% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:39:09Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ws_item_sk-1, ws_sold_date_sk-1, ws_ext_discount_amt-1]),
    dict_create(_V1, map, [ws_item_sk-1, ws_sold_date_sk-1, ws_ext_discount_amt-1]),
    dict_create(_V2, map, [ws_item_sk-1, ws_sold_date_sk-1, ws_ext_discount_amt-2]),
    Web_sales = [_V0, _V1, _V2],
    dict_create(_V3, map, [i_item_sk-1, i_manufact_id-1]),
    Item = [_V3],
    dict_create(_V4, map, [d_date_sk-1, d_date-"2000-01-02"]),
    Date_dim = [_V4],
    findall(_V6, (member(Ws, Web_sales), true, get_item(Ws, 'ws_ext_discount_amt', _V5), _V6 = _V5), _V7),
    sum(_V7, _V8),
    Sum_amt is _V8,
    findall(_V10, (member(Ws, Web_sales), true, get_item(Ws, 'ws_ext_discount_amt', _V9), _V10 = _V9), _V11),
    avg(_V11, _V12),
    Avg_amt is _V12,
    ((Sum_amt > (Avg_amt * 1.3)) -> _V13 = Sum_amt ; _V13 = 0),
    Result = _V13,
    json_write_dict(current_output, Result), nl,
    true,
    expect((Result == 4)),
    true.
