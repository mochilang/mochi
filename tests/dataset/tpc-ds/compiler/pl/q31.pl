% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:39:02Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ca_county-"A", d_qoy-1, d_year-2000, ss_ext_sales_price-100]),
    dict_create(_V1, map, [ca_county-"A", d_qoy-2, d_year-2000, ss_ext_sales_price-120]),
    dict_create(_V2, map, [ca_county-"A", d_qoy-3, d_year-2000, ss_ext_sales_price-160]),
    dict_create(_V3, map, [ca_county-"B", d_qoy-1, d_year-2000, ss_ext_sales_price-80]),
    dict_create(_V4, map, [ca_county-"B", d_qoy-2, d_year-2000, ss_ext_sales_price-90]),
    dict_create(_V5, map, [ca_county-"B", d_qoy-3, d_year-2000, ss_ext_sales_price-100]),
    Store_sales = [_V0, _V1, _V2, _V3, _V4, _V5],
    dict_create(_V6, map, [ca_county-"A", d_qoy-1, d_year-2000, ws_ext_sales_price-100]),
    dict_create(_V7, map, [ca_county-"A", d_qoy-2, d_year-2000, ws_ext_sales_price-150]),
    dict_create(_V8, map, [ca_county-"A", d_qoy-3, d_year-2000, ws_ext_sales_price-250]),
    dict_create(_V9, map, [ca_county-"B", d_qoy-1, d_year-2000, ws_ext_sales_price-80]),
    dict_create(_V10, map, [ca_county-"B", d_qoy-2, d_year-2000, ws_ext_sales_price-90]),
    dict_create(_V11, map, [ca_county-"B", d_qoy-3, d_year-2000, ws_ext_sales_price-95]),
    Web_sales = [_V6, _V7, _V8, _V9, _V10, _V11],
    Counties = ["A", "B"],
    nb_setval(result, []),
    catch(
        (
            member(County, Counties),
                catch(
                    (
                        findall(_V15, (member(S, Store_sales), get_item(S, 'ca_county', _V12), get_item(S, 'd_qoy', _V13), ((_V12 == County), (_V13 == 1)), get_item(S, 'ss_ext_sales_price', _V14), _V15 = _V14), _V16),
                        sum(_V16, _V17),
                        Ss1 is _V17,
                        findall(_V21, (member(S, Store_sales), get_item(S, 'ca_county', _V18), get_item(S, 'd_qoy', _V19), ((_V18 == County), (_V19 == 2)), get_item(S, 'ss_ext_sales_price', _V20), _V21 = _V20), _V22),
                        sum(_V22, _V23),
                        Ss2 is _V23,
                        findall(_V27, (member(S, Store_sales), get_item(S, 'ca_county', _V24), get_item(S, 'd_qoy', _V25), ((_V24 == County), (_V25 == 3)), get_item(S, 'ss_ext_sales_price', _V26), _V27 = _V26), _V28),
                        sum(_V28, _V29),
                        Ss3 is _V29,
                        findall(_V33, (member(W, Web_sales), get_item(W, 'ca_county', _V30), get_item(W, 'd_qoy', _V31), ((_V30 == County), (_V31 == 1)), get_item(W, 'ws_ext_sales_price', _V32), _V33 = _V32), _V34),
                        sum(_V34, _V35),
                        Ws1 is _V35,
                        findall(_V39, (member(W, Web_sales), get_item(W, 'ca_county', _V36), get_item(W, 'd_qoy', _V37), ((_V36 == County), (_V37 == 2)), get_item(W, 'ws_ext_sales_price', _V38), _V39 = _V38), _V40),
                        sum(_V40, _V41),
                        Ws2 is _V41,
                        findall(_V45, (member(W, Web_sales), get_item(W, 'ca_county', _V42), get_item(W, 'd_qoy', _V43), ((_V42 == County), (_V43 == 3)), get_item(W, 'ws_ext_sales_price', _V44), _V45 = _V44), _V46),
                        sum(_V46, _V47),
                        Ws3 is _V47,
                        Web_g1 is (Ws2 / Ws1),
                        Store_g1 is (Ss2 / Ss1),
                        Web_g2 is (Ws3 / Ws2),
                        Store_g2 is (Ss3 / Ss2),
                        (((Web_g1 > Store_g1), (Web_g2 > Store_g2)) ->
                            nb_getval(result, _V48),
                            dict_create(_V49, map, [ca_county-County, d_year-2000, web_q1_q2_increase-Web_g1, store_q1_q2_increase-Store_g1, web_q2_q3_increase-Web_g2, store_q2_q3_increase-Store_g2]),
                            append(_V48, [_V49], _V50),
                            nb_setval(result, _V50),
                            true
                        ; true
                        ),
                        true
                    ), continue, true),
                    fail
                ; true
            ), break, true),
            nb_getval(result, _V51),
            json_write_dict(current_output, _V51), nl,
            true,
            nb_getval(result, _V52),
            dict_create(_V53, map, [ca_county-"A", d_year-2000, web_q1_q2_increase-1.5, store_q1_q2_increase-1.2, web_q2_q3_increase-1.6666666666666667, store_q2_q3_increase-1.3333333333333333]),
            expect((_V52 == [_V53])),
            true.
