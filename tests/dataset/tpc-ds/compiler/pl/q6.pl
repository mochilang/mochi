% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:39:01Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ca_address_sk-1, ca_state-"CA", ca_zip-"12345"]),
    Customer_address = [_V0],
    dict_create(_V1, map, [c_customer_sk-1, c_current_addr_sk-1]),
    Customer = [_V1],
    dict_create(_V2, map, [ss_customer_sk-1, ss_sold_date_sk-1, ss_item_sk-1]),
    dict_create(_V3, map, [ss_customer_sk-1, ss_sold_date_sk-1, ss_item_sk-1]),
    dict_create(_V4, map, [ss_customer_sk-1, ss_sold_date_sk-1, ss_item_sk-1]),
    dict_create(_V5, map, [ss_customer_sk-1, ss_sold_date_sk-1, ss_item_sk-1]),
    dict_create(_V6, map, [ss_customer_sk-1, ss_sold_date_sk-1, ss_item_sk-1]),
    dict_create(_V7, map, [ss_customer_sk-1, ss_sold_date_sk-1, ss_item_sk-1]),
    dict_create(_V8, map, [ss_customer_sk-1, ss_sold_date_sk-1, ss_item_sk-1]),
    dict_create(_V9, map, [ss_customer_sk-1, ss_sold_date_sk-1, ss_item_sk-1]),
    dict_create(_V10, map, [ss_customer_sk-1, ss_sold_date_sk-1, ss_item_sk-1]),
    dict_create(_V11, map, [ss_customer_sk-1, ss_sold_date_sk-1, ss_item_sk-1]),
    Store_sales = [_V2, _V3, _V4, _V5, _V6, _V7, _V8, _V9, _V10, _V11],
    dict_create(_V12, map, [d_date_sk-1, d_year-1999, d_moy-5, d_month_seq-120]),
    Date_dim = [_V12],
    dict_create(_V13, map, [i_item_sk-1, i_category-"A", i_current_price-100]),
    dict_create(_V14, map, [i_item_sk-2, i_category-"A", i_current_price-50]),
    Item = [_V13, _V14],
    findall(_V18, (member(D, Date_dim), get_item(D, 'd_year', _V15), get_item(D, 'd_moy', _V16), ((_V15 == 1999), (_V16 == 5)), get_item(D, 'd_month_seq', _V17), _V18 = _V17), _V19),
    max_list(_V19, _V20),
    Target_month_seq is _V20,
    findall(_V40, (member(A, Customer_address), member(C, Customer), get_item(A, 'ca_address_sk', _V21), get_item(C, 'c_current_addr_sk', _V22), (_V21 == _V22), member(S, Store_sales), get_item(C, 'c_customer_sk', _V23), get_item(S, 'ss_customer_sk', _V24), (_V23 == _V24), member(D, Date_dim), get_item(S, 'ss_sold_date_sk', _V25), get_item(D, 'd_date_sk', _V26), (_V25 == _V26), member(I, Item), get_item(S, 'ss_item_sk', _V27), get_item(I, 'i_item_sk', _V28), (_V27 == _V28), get_item(D, 'd_month_seq', _V29), get_item(I, 'i_current_price', _V30), findall(_V34, (member(J, Item), get_item(J, 'i_category', _V31), get_item(I, 'i_category', _V32), (_V31 == _V32), get_item(J, 'i_current_price', _V33), _V34 = _V33), _V35), avg(_V35, _V36), ((_V29 == Target_month_seq), (_V30 > (1.2 * _V36))), get_item(A, 'ca_state', _V37), _V38 = _V37, dict_create(_V39, map, ['A'-A, 'C'-C, 'S'-S, 'D'-D, 'I'-I]), _V40 = _V38-_V39), _V41),
    group_pairs(_V41, [], _V42),
    findall(_V46, (member(G, _V42), get_item(G, 'key', _V43), count(G, _V44), dict_create(_V45, map, [state-_V43, cnt-_V44]), _V46 = _V45), _V47),
    Result = _V47,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V48, map, [state-"CA", cnt-10]),
    expect((Result == [_V48])),
    true.
