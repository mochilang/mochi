% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:37Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ss_item_sk-1, ss_sold_date_sk-1, ss_ext_sales_price-50]),
    dict_create(_V1, map, [ss_item_sk-2, ss_sold_date_sk-1, ss_ext_sales_price-100]),
    Store_sales = [_V0, _V1],
    dict_create(_V2, map, [i_item_sk-1, i_item_id-"I1", i_item_desc-"desc1", i_category-"CatA", i_class-"Class1", i_current_price-100]),
    dict_create(_V3, map, [i_item_sk-2, i_item_id-"I2", i_item_desc-"desc2", i_category-"CatB", i_class-"Class1", i_current_price-200]),
    Item = [_V2, _V3],
    dict_create(_V4, map, [d_date_sk-1, d_date-"2000-02-01"]),
    Date_dim = [_V4],
    findall(_V17, (member(Ss, Store_sales), member(I, Item), get_item(Ss, 'ss_item_sk', _V5), get_item(I, 'i_item_sk', _V6), (_V5 == _V6), member(D, Date_dim), get_item(Ss, 'ss_sold_date_sk', _V7), get_item(D, 'd_date_sk', _V8), (_V7 == _V8), true, get_item(I, 'i_item_id', _V9), get_item(I, 'i_item_desc', _V10), get_item(I, 'i_category', _V11), get_item(I, 'i_class', _V12), get_item(I, 'i_current_price', _V13), dict_create(_V14, map, [item_id-_V9, item_desc-_V10, category-_V11, class-_V12, price-_V13]), _V15 = _V14, dict_create(_V16, map, ['Ss'-Ss, 'I'-I, 'D'-D]), _V17 = _V15-_V16), _V18),
    group_pairs(_V18, [], _V19),
    findall(_V35, (member(G, _V19), get_item(G, 'key', _V20), get_item(_V20, 'item_id', _V21), get_item(G, 'key', _V22), get_item(_V22, 'item_desc', _V23), get_item(G, 'key', _V24), get_item(_V24, 'category', _V25), get_item(G, 'key', _V26), get_item(_V26, 'class', _V27), get_item(G, 'key', _V28), get_item(_V28, 'price', _V29), findall(_V31, (member(X, G), true, get_item(X, 'ss_ext_sales_price', _V30), _V31 = _V30), _V32), sum(_V32, _V33), dict_create(_V34, map, [i_item_id-_V21, i_item_desc-_V23, i_category-_V25, i_class-_V27, i_current_price-_V29, itemrevenue-_V33]), _V35 = _V34), _V36),
    Grouped = _V36,
    findall(_V40, (member(G, Grouped), true, get_item(G, 'i_class', _V37), _V38 = _V37, dict_create(_V39, map, ['G'-G]), _V40 = _V38-_V39), _V41),
    group_pairs(_V41, [], _V42),
    findall(_V49, (member(Cg, _V42), get_item(Cg, 'key', _V43), findall(_V45, (member(X, Cg), true, get_item(X, 'itemrevenue', _V44), _V45 = _V44), _V46), sum(_V46, _V47), dict_create(_V48, map, [class-_V43, total-_V47]), _V49 = _V48), _V50),
    Totals = _V50,
    findall(_V62, (member(G, Grouped), member(T, Totals), get_item(G, 'i_class', _V51), get_item(T, 'class', _V52), (_V51 == _V52), true, get_item(G, 'i_item_id', _V53), get_item(G, 'i_item_desc', _V54), get_item(G, 'i_category', _V55), get_item(G, 'i_class', _V56), get_item(G, 'i_current_price', _V57), get_item(G, 'itemrevenue', _V58), get_item(G, 'itemrevenue', _V59), get_item(T, 'total', _V60), dict_create(_V61, map, [i_item_id-_V53, i_item_desc-_V54, i_category-_V55, i_class-_V56, i_current_price-_V57, itemrevenue-_V58, revenueratio-((_V59 * 100) / _V60)]), _V62 = _V61), _V63),
    Result = _V63,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V64, map, [i_item_id-"I1", i_item_desc-"desc1", i_category-"CatA", i_class-"Class1", i_current_price-100, itemrevenue-50, revenueratio-33.333333333333336]),
    dict_create(_V65, map, [i_item_id-"I2", i_item_desc-"desc2", i_category-"CatB", i_class-"Class1", i_current_price-200, itemrevenue-100, revenueratio-66.66666666666667]),
    expect((Result == [_V64, _V65])),
    true.
