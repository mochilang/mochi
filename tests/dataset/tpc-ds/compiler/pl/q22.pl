% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:32Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [inv_item_sk-1, inv_date_sk-1, inv_quantity_on_hand-10]),
    dict_create(_V1, map, [inv_item_sk-1, inv_date_sk-2, inv_quantity_on_hand-20]),
    dict_create(_V2, map, [inv_item_sk-1, inv_date_sk-3, inv_quantity_on_hand-10]),
    dict_create(_V3, map, [inv_item_sk-1, inv_date_sk-4, inv_quantity_on_hand-20]),
    dict_create(_V4, map, [inv_item_sk-2, inv_date_sk-1, inv_quantity_on_hand-50]),
    Inventory = [_V0, _V1, _V2, _V3, _V4],
    dict_create(_V5, map, [d_date_sk-1, d_month_seq-0]),
    dict_create(_V6, map, [d_date_sk-2, d_month_seq-1]),
    dict_create(_V7, map, [d_date_sk-3, d_month_seq-2]),
    dict_create(_V8, map, [d_date_sk-4, d_month_seq-3]),
    Date_dim = [_V5, _V6, _V7, _V8],
    dict_create(_V9, map, [i_item_sk-1, i_product_name-"Prod1", i_brand-"Brand1", i_class-"Class1", i_category-"Cat1"]),
    dict_create(_V10, map, [i_item_sk-2, i_product_name-"Prod2", i_brand-"Brand2", i_class-"Class2", i_category-"Cat2"]),
    Item = [_V9, _V10],
    findall(_V24, (member(Inv, Inventory), member(D, Date_dim), get_item(Inv, 'inv_date_sk', _V11), get_item(D, 'd_date_sk', _V12), (_V11 == _V12), member(I, Item), get_item(Inv, 'inv_item_sk', _V13), get_item(I, 'i_item_sk', _V14), (_V13 == _V14), get_item(D, 'd_month_seq', _V15), get_item(D, 'd_month_seq', _V16), ((_V15 >= 0), (_V16 =< 11)), get_item(I, 'i_product_name', _V17), get_item(I, 'i_brand', _V18), get_item(I, 'i_class', _V19), get_item(I, 'i_category', _V20), dict_create(_V21, map, [product_name-_V17, brand-_V18, class-_V19, category-_V20]), _V22 = _V21, dict_create(_V23, map, ['Inv'-Inv, 'D'-D, 'I'-I]), _V24 = _V22-_V23), _V25),
    group_pairs(_V25, [], _V26),
    findall(_V40, (member(G, _V26), get_item(G, 'key', _V27), get_item(_V27, 'product_name', _V28), get_item(G, 'key', _V29), get_item(_V29, 'brand', _V30), get_item(G, 'key', _V31), get_item(_V31, 'class', _V32), get_item(G, 'key', _V33), get_item(_V33, 'category', _V34), findall(_V36, (member(X, G), true, get_item(X, 'inv_quantity_on_hand', _V35), _V36 = _V35), _V37), avg(_V37, _V38), dict_create(_V39, map, [i_product_name-_V28, i_brand-_V30, i_class-_V32, i_category-_V34, qoh-_V38]), _V40 = _V39), _V41),
    Qoh = _V41,
    json_write_dict(current_output, Qoh), nl,
    true,
    dict_create(_V42, map, [i_product_name-"Prod1", i_brand-"Brand1", i_class-"Class1", i_category-"Cat1", qoh-15]),
    dict_create(_V43, map, [i_product_name-"Prod2", i_brand-"Brand2", i_class-"Class2", i_category-"Cat2", qoh-50]),
    expect((Qoh == [_V42, _V43])),
    true.
