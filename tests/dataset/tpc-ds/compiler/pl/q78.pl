% Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ss_sold_year-1998, ss_item_sk-1, ss_customer_sk-1, ss_qty-10, ss_wc-50, ss_sp-100]),
    Ss = [_V0],
    dict_create(_V1, map, [ws_sold_year-1998, ws_item_sk-1, ws_customer_sk-1, ws_qty-5, ws_wc-25, ws_sp-50]),
    Ws = [_V1],
    dict_create(_V2, map, [cs_sold_year-1998, cs_item_sk-1, cs_customer_sk-1, cs_qty-3, cs_wc-15, cs_sp-30]),
    Cs = [_V2],
    findall(_V46, (member(S, Ss), findall(W, (member(W, Ws), get_item(W, 'ws_sold_year', _V3), get_item(S, 'ss_sold_year', _V4), get_item(W, 'ws_item_sk', _V5), get_item(S, 'ss_item_sk', _V6), get_item(W, 'ws_customer_sk', _V7), get_item(S, 'ss_customer_sk', _V8), (((_V3 == _V4), (_V5 == _V6)), (_V7 == _V8))), _V9), (_V9 = [] -> W = nil; member(W, _V9)), findall(C, (member(C, Cs), get_item(C, 'cs_sold_year', _V10), get_item(S, 'ss_sold_year', _V11), get_item(C, 'cs_item_sk', _V12), get_item(S, 'ss_item_sk', _V13), get_item(C, 'cs_customer_sk', _V14), get_item(S, 'ss_customer_sk', _V15), (((_V10 == _V11), (_V12 == _V13)), (_V14 == _V15))), _V16), (_V16 = [] -> C = nil; member(C, _V16)), get_item(W, 'ws_qty', _V17), ((W == null) -> _V18 = 0 ; _V18 = _V17), get_item(C, 'cs_qty', _V19), ((C == null) -> _V20 = 0 ; _V20 = _V19), get_item(S, 'ss_sold_year', _V21), (((_V18 > 0) ; (_V20 > 0)), (_V21 == 1998)), get_item(S, 'ss_sold_year', _V22), get_item(S, 'ss_item_sk', _V23), get_item(S, 'ss_customer_sk', _V24), get_item(S, 'ss_qty', _V25), get_item(W, 'ws_qty', _V26), ((W == null) -> _V27 = 0 ; _V27 = _V26), get_item(C, 'cs_qty', _V28), ((C == null) -> _V29 = 0 ; _V29 = _V28), get_item(S, 'ss_qty', _V30), get_item(S, 'ss_wc', _V31), get_item(S, 'ss_sp', _V32), get_item(W, 'ws_qty', _V33), ((W == null) -> _V34 = 0 ; _V34 = _V33), get_item(C, 'cs_qty', _V35), ((C == null) -> _V36 = 0 ; _V36 = _V35), get_item(W, 'ws_wc', _V37), ((W == null) -> _V38 = 0 ; _V38 = _V37), get_item(C, 'cs_wc', _V39), ((C == null) -> _V40 = 0 ; _V40 = _V39), get_item(W, 'ws_sp', _V41), ((W == null) -> _V42 = 0 ; _V42 = _V41), get_item(C, 'cs_sp', _V43), ((C == null) -> _V44 = 0 ; _V44 = _V43), dict_create(_V45, map, [ss_sold_year-_V22, ss_item_sk-_V23, ss_customer_sk-_V24, ratio-(_V25 / (_V27 + _V29)), store_qty-_V30, store_wholesale_cost-_V31, store_sales_price-_V32, other_chan_qty-(_V34 + _V36), other_chan_wholesale_cost-(_V38 + _V40), other_chan_sales_price-(_V42 + _V44)]), _V46 = _V45), _V47),
    Result = _V47,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V48, map, [ss_sold_year-1998, ss_item_sk-1, ss_customer_sk-1, ratio-1.25, store_qty-10, store_wholesale_cost-50, store_sales_price-100, other_chan_qty-8, other_chan_wholesale_cost-40, other_chan_sales_price-80]),
    expect((Result == [_V48])),
    true.
