% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:39:08Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

count_range(Ssales, Tdim, Hour, Start_min, End_min, _Res) :-
    _V0 is 0,
    nb_setval(total, _V0),
    catch(
        (
            member(Ss, Ssales),
                catch(
                    (
                        catch(
                            (
                                member(T, Tdim),
                                    catch(
                                        (
                                            get_item(Ss, 'sold_time_sk', _V1),
                                            get_item(T, 'time_sk', _V2),
                                            get_item(T, 'hour', _V3),
                                            get_item(T, 'minute', _V4),
                                            get_item(T, 'minute', _V5),
                                            (((((_V1 == _V2), (_V3 == Hour)), (_V4 >= Start_min)), (_V5 < End_min)) ->
                                                nb_getval(total, _V6),
                                                get_item(Ss, 'qty', _V7),
                                                _V8 is (_V6 + _V7),
                                                nb_setval(total, _V8),
                                                true
                                            ; true
                                            ),
                                            true
                                        ), continue, true),
                                        fail
                                    ; true
                                ), break, true),
                                true
                            ), continue, true),
                            fail
                        ; true
                    ), break, true),
                    nb_getval(total, _V9),
                    _Res = _V9.
                
                :- initialization(main, main).
                main :-
                    dict_create(_V0, map, [time_sk-1, hour-8, minute-30]),
                    dict_create(_V1, map, [time_sk-2, hour-9, minute-0]),
                    dict_create(_V2, map, [time_sk-3, hour-9, minute-30]),
                    dict_create(_V3, map, [time_sk-4, hour-10, minute-0]),
                    dict_create(_V4, map, [time_sk-5, hour-10, minute-30]),
                    dict_create(_V5, map, [time_sk-6, hour-11, minute-0]),
                    dict_create(_V6, map, [time_sk-7, hour-11, minute-30]),
                    dict_create(_V7, map, [time_sk-8, hour-12, minute-0]),
                    Time_dim = [_V0, _V1, _V2, _V3, _V4, _V5, _V6, _V7],
                    dict_create(_V8, map, [hd_demo_sk-1, hd_dep_count-1, hd_vehicle_count-1]),
                    Household_demographics = [_V8],
                    dict_create(_V9, map, [s_store_sk-1, s_store_name-"ese"]),
                    Store = [_V9],
                    dict_create(_V10, map, [sold_time_sk-1, hdemo_sk-1, store_sk-1, qty-10]),
                    dict_create(_V11, map, [sold_time_sk-2, hdemo_sk-1, store_sk-1, qty-12]),
                    dict_create(_V12, map, [sold_time_sk-3, hdemo_sk-1, store_sk-1, qty-14]),
                    dict_create(_V13, map, [sold_time_sk-4, hdemo_sk-1, store_sk-1, qty-11]),
                    dict_create(_V14, map, [sold_time_sk-5, hdemo_sk-1, store_sk-1, qty-8]),
                    dict_create(_V15, map, [sold_time_sk-6, hdemo_sk-1, store_sk-1, qty-9]),
                    dict_create(_V16, map, [sold_time_sk-7, hdemo_sk-1, store_sk-1, qty-10]),
                    dict_create(_V17, map, [sold_time_sk-8, hdemo_sk-1, store_sk-1, qty-14]),
                    Store_sales = [_V10, _V11, _V12, _V13, _V14, _V15, _V16, _V17],
                    count_range(Store_sales, Time_dim, 8, 30, 60, _V18),
                    H8_30_to_9 = _V18,
                    count_range(Store_sales, Time_dim, 9, 0, 30, _V19),
                    H9_to_9_30 = _V19,
                    count_range(Store_sales, Time_dim, 9, 30, 60, _V20),
                    H9_30_to_10 = _V20,
                    count_range(Store_sales, Time_dim, 10, 0, 30, _V21),
                    H10_to_10_30 = _V21,
                    count_range(Store_sales, Time_dim, 10, 30, 60, _V22),
                    H10_30_to_11 = _V22,
                    count_range(Store_sales, Time_dim, 11, 0, 30, _V23),
                    H11_to_11_30 = _V23,
                    count_range(Store_sales, Time_dim, 11, 30, 60, _V24),
                    H11_30_to_12 = _V24,
                    count_range(Store_sales, Time_dim, 12, 0, 30, _V25),
                    H12_to_12_30 = _V25,
                    Result is (((((((H8_30_to_9 + H9_to_9_30) + H9_30_to_10) + H10_to_10_30) + H10_30_to_11) + H11_to_11_30) + H11_30_to_12) + H12_to_12_30),
                    json_write_dict(current_output, Result), nl,
                    true,
                    expect((Result == 88)),
                    true.
