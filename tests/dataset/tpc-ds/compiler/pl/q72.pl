% Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [cs_item_sk-1, cs_order_number-1, cs_quantity-1, cs_sold_date_sk-1, cs_ship_date_sk-3, cs_bill_cdemo_sk-1, cs_bill_hdemo_sk-1, cs_promo_sk-null]),
    Catalog_sales = [_V0],
    dict_create(_V1, map, [inv_item_sk-1, inv_warehouse_sk-1, inv_date_sk-2, inv_quantity_on_hand-0]),
    Inventory = [_V1],
    dict_create(_V2, map, [w_warehouse_sk-1, w_warehouse_name-"Main"]),
    Warehouse = [_V2],
    dict_create(_V3, map, [i_item_sk-1, i_item_desc-"ItemA"]),
    Item = [_V3],
    dict_create(_V4, map, [cd_demo_sk-1, cd_marital_status-"M"]),
    Customer_demographics = [_V4],
    dict_create(_V5, map, [hd_demo_sk-1, hd_buy_potential-"5001-10000"]),
    Household_demographics = [_V5],
    dict_create(_V6, map, [d_date_sk-1, d_week_seq-10, d_date-1, d_year-2000]),
    dict_create(_V7, map, [d_date_sk-2, d_week_seq-10, d_date-1, d_year-2000]),
    dict_create(_V8, map, [d_date_sk-3, d_week_seq-10, d_date-7, d_year-2000]),
    Date_dim = [_V6, _V7, _V8],
    findall(_V40, (member(Cs, Catalog_sales), member(Inv, Inventory), get_item(Inv, 'inv_item_sk', _V9), get_item(Cs, 'cs_item_sk', _V10), (_V9 == _V10), member(W, Warehouse), get_item(W, 'w_warehouse_sk', _V11), get_item(Inv, 'inv_warehouse_sk', _V12), (_V11 == _V12), member(I, Item), get_item(I, 'i_item_sk', _V13), get_item(Cs, 'cs_item_sk', _V14), (_V13 == _V14), member(Cd, Customer_demographics), get_item(Cd, 'cd_demo_sk', _V15), get_item(Cs, 'cs_bill_cdemo_sk', _V16), (_V15 == _V16), member(Hd, Household_demographics), get_item(Hd, 'hd_demo_sk', _V17), get_item(Cs, 'cs_bill_hdemo_sk', _V18), (_V17 == _V18), member(D1, Date_dim), get_item(D1, 'd_date_sk', _V19), get_item(Cs, 'cs_sold_date_sk', _V20), (_V19 == _V20), member(D2, Date_dim), get_item(D2, 'd_date_sk', _V21), get_item(Inv, 'inv_date_sk', _V22), (_V21 == _V22), member(D3, Date_dim), get_item(D3, 'd_date_sk', _V23), get_item(Cs, 'cs_ship_date_sk', _V24), (_V23 == _V24), get_item(D1, 'd_week_seq', _V25), get_item(D2, 'd_week_seq', _V26), get_item(Inv, 'inv_quantity_on_hand', _V27), get_item(Cs, 'cs_quantity', _V28), get_item(D3, 'd_date', _V29), get_item(D1, 'd_date', _V30), get_item(Hd, 'hd_buy_potential', _V31), get_item(D1, 'd_year', _V32), get_item(Cd, 'cd_marital_status', _V33), ((((((_V25 == _V26), (_V27 < _V28)), (_V29 > (_V30 + 5))), (_V31 == "5001-10000")), (_V32 == 2000)), (_V33 == "M")), get_item(I, 'i_item_desc', _V34), get_item(W, 'w_warehouse_name', _V35), get_item(D1, 'd_week_seq', _V36), dict_create(_V37, map, [item_desc-_V34, warehouse-_V35, week_seq-_V36]), _V38 = _V37, dict_create(_V39, map, ['Cs'-Cs, 'Inv'-Inv, 'W'-W, 'I'-I, 'Cd'-Cd, 'Hd'-Hd, 'D1'-D1, 'D2'-D2, 'D3'-D3]), _V40 = _V38-_V39), _V41),
    group_pairs(_V41, [], _V42),
    findall(_V59, (member(G, _V42), get_item(G, 'key', _V43), get_item(_V43, 'item_desc', _V44), get_item(G, 'key', _V45), get_item(_V45, 'warehouse', _V46), get_item(G, 'key', _V47), get_item(_V47, 'week_seq', _V48), findall(_V50, (member(X, G), get_item(X, 'cs_promo_sk', _V49), (_V49 == null), _V50 = X), _V51), count(_V51, _V52), findall(_V54, (member(X, G), get_item(X, 'cs_promo_sk', _V53), (_V53 \== null), _V54 = X), _V55), count(_V55, _V56), count(G, _V57), dict_create(_V58, map, [i_item_desc-_V44, w_warehouse_name-_V46, d_week_seq-_V48, no_promo-_V52, promo-_V56, total_cnt-_V57]), _V59 = _V58), _V60),
    Result = _V60,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V61, map, [i_item_desc-"ItemA", w_warehouse_name-"Main", d_week_seq-10, no_promo-1, promo-0, total_cnt-1]),
    expect((Result == [_V61])),
    true.
