% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:33Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

contains(Container, Item, Res) :-
    is_dict(Container), !, (string(Item) -> atom_string(A, Item) ; A = Item), (get_dict(A, Container, _) -> Res = true ; Res = false).
contains(List, Item, Res) :-
    string(List), !, (sub_string(List, _, _, _, Item) -> Res = true ; Res = false).
contains(List, Item, Res) :- (member(Item, List) -> Res = true ; Res = false).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [bill_customer_sk-1, item_sk-1, sold_date_sk-1, sales_price-50]),
    dict_create(_V1, map, [bill_customer_sk-2, item_sk-2, sold_date_sk-1, sales_price-30]),
    Web_sales = [_V0, _V1],
    dict_create(_V2, map, [c_customer_sk-1, c_current_addr_sk-1]),
    dict_create(_V3, map, [c_customer_sk-2, c_current_addr_sk-2]),
    Customer = [_V2, _V3],
    dict_create(_V4, map, [ca_address_sk-1, ca_zip-"85669"]),
    dict_create(_V5, map, [ca_address_sk-2, ca_zip-"99999"]),
    Customer_address = [_V4, _V5],
    dict_create(_V6, map, [i_item_sk-1, i_item_id-"I1"]),
    dict_create(_V7, map, [i_item_sk-2, i_item_id-"I2"]),
    Item = [_V6, _V7],
    dict_create(_V8, map, [d_date_sk-1, d_qoy-1, d_year-2020]),
    Date_dim = [_V8],
    Zip_list = ["85669", "86197", "88274", "83405", "86475", "85392", "85460", "80348", "81792"],
    Item_ids = ["I2"],
    Qoy is 1,
    Year is 2020,
    findall(_V27, (member(Ws, Web_sales), member(C, Customer), get_item(Ws, 'bill_customer_sk', _V9), get_item(C, 'c_customer_sk', _V10), (_V9 == _V10), member(Ca, Customer_address), get_item(C, 'c_current_addr_sk', _V11), get_item(Ca, 'ca_address_sk', _V12), (_V11 == _V12), member(I, Item), get_item(Ws, 'item_sk', _V13), get_item(I, 'i_item_sk', _V14), (_V13 == _V14), member(D, Date_dim), get_item(Ws, 'sold_date_sk', _V15), get_item(D, 'd_date_sk', _V16), (_V15 == _V16), get_item(Ca, 'ca_zip', _V17), substr(_V17, 0, 5, _V18), get_item(I, 'i_item_id', _V19), contains(Zip_list, _V18, _V20), contains(Item_ids, _V19, _V21), get_item(D, 'd_qoy', _V22), get_item(D, 'd_year', _V23), (((_V20 ; _V21), (_V22 == Qoy)), (_V23 == Year)), get_item(Ca, 'ca_zip', _V24), _V25 = _V24, dict_create(_V26, map, ['Ws'-Ws, 'C'-C, 'Ca'-Ca, 'I'-I, 'D'-D]), _V27 = _V25-_V26), _V28),
    group_pairs(_V28, [], _V29),
    findall(_V37, (member(G, _V29), get_item(G, 'key', _V30), findall(_V33, (member(X, G), true, get_item(X, 'ws', _V31), get_item(_V31, 'sales_price', _V32), _V33 = _V32), _V34), sum(_V34, _V35), dict_create(_V36, map, [ca_zip-_V30, sum_ws_sales_price-_V35]), _V37 = _V36), _V38),
    Base = _V38,
    Records = Base,
    json_write_dict(current_output, Records), nl,
    true,
    dict_create(_V39, map, [ca_zip-"85669", sum_ws_sales_price-50]),
    dict_create(_V40, map, [ca_zip-"99999", sum_ws_sales_price-30]),
    expect((Records == [_V39, _V40])),
    true.
