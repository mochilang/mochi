% Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [c_customer_sk-1, c_customer_id-"C1", c_first_name-"Alice", c_last_name-"A", c_login-"alice"]),
    Customer = [_V0],
    dict_create(_V1, map, [ss_customer_sk-1, ss_sold_date_sk-1, ss_ext_list_price-10, ss_ext_wholesale_cost-5, ss_ext_discount_amt-0, ss_ext_sales_price-10]),
    dict_create(_V2, map, [ss_customer_sk-1, ss_sold_date_sk-2, ss_ext_list_price-20, ss_ext_wholesale_cost-5, ss_ext_discount_amt-0, ss_ext_sales_price-20]),
    Store_sales = [_V1, _V2],
    dict_create(_V3, map, [cs_bill_customer_sk-1, cs_sold_date_sk-1, cs_ext_list_price-10, cs_ext_wholesale_cost-2, cs_ext_discount_amt-0, cs_ext_sales_price-10]),
    dict_create(_V4, map, [cs_bill_customer_sk-1, cs_sold_date_sk-2, cs_ext_list_price-30, cs_ext_wholesale_cost-2, cs_ext_discount_amt-0, cs_ext_sales_price-30]),
    Catalog_sales = [_V3, _V4],
    dict_create(_V5, map, [ws_bill_customer_sk-1, ws_sold_date_sk-1, ws_ext_list_price-10, ws_ext_wholesale_cost-5, ws_ext_discount_amt-0, ws_ext_sales_price-10]),
    dict_create(_V6, map, [ws_bill_customer_sk-1, ws_sold_date_sk-2, ws_ext_list_price-12, ws_ext_wholesale_cost-5, ws_ext_discount_amt-0, ws_ext_sales_price-12]),
    Web_sales = [_V5, _V6],
    dict_create(_V7, map, [d_date_sk-1, d_year-2001]),
    dict_create(_V8, map, [d_date_sk-2, d_year-2002]),
    Date_dim = [_V7, _V8],
    findall(_V21, (member(C, Customer), member(S, Store_sales), get_item(C, 'c_customer_sk', _V9), get_item(S, 'ss_customer_sk', _V10), (_V9 == _V10), member(D, Date_dim), get_item(S, 'ss_sold_date_sk', _V11), get_item(D, 'd_date_sk', _V12), (_V11 == _V12), true, get_item(C, 'c_customer_id', _V13), get_item(C, 'c_first_name', _V14), get_item(C, 'c_last_name', _V15), get_item(C, 'c_login', _V16), get_item(D, 'd_year', _V17), dict_create(_V18, map, [id-_V13, first-_V14, last-_V15, login-_V16, year-_V17]), _V19 = _V18, dict_create(_V20, map, ['C'-C, 'S'-S, 'D'-D]), _V21 = _V19-_V20), _V22),
    group_pairs(_V22, [], _V23),
    findall(_V42, (member(G, _V23), get_item(G, 'key', _V24), get_item(_V24, 'id', _V25), get_item(G, 'key', _V26), get_item(_V26, 'first', _V27), get_item(G, 'key', _V28), get_item(_V28, 'last', _V29), get_item(G, 'key', _V30), get_item(_V30, 'login', _V31), get_item(G, 'key', _V32), get_item(_V32, 'year', _V33), findall(_V38, (member(X, G), true, get_item(X, 'ss_ext_list_price', _V34), get_item(X, 'ss_ext_wholesale_cost', _V35), get_item(X, 'ss_ext_discount_amt', _V36), get_item(X, 'ss_ext_sales_price', _V37), _V38 = ((((_V34 - _V35) - _V36) + _V37) / 2)), _V39), sum(_V39, _V40), dict_create(_V41, map, [customer_id-_V25, customer_first_name-_V27, customer_last_name-_V29, customer_login-_V31, dyear-_V33, year_total-_V40, sale_type-"s"]), _V42 = _V41), _V43),
    findall(_V56, (member(C, Customer), member(Cs, Catalog_sales), get_item(C, 'c_customer_sk', _V44), get_item(Cs, 'cs_bill_customer_sk', _V45), (_V44 == _V45), member(D, Date_dim), get_item(Cs, 'cs_sold_date_sk', _V46), get_item(D, 'd_date_sk', _V47), (_V46 == _V47), true, get_item(C, 'c_customer_id', _V48), get_item(C, 'c_first_name', _V49), get_item(C, 'c_last_name', _V50), get_item(C, 'c_login', _V51), get_item(D, 'd_year', _V52), dict_create(_V53, map, [id-_V48, first-_V49, last-_V50, login-_V51, year-_V52]), _V54 = _V53, dict_create(_V55, map, ['C'-C, 'Cs'-Cs, 'D'-D]), _V56 = _V54-_V55), _V57),
    group_pairs(_V57, [], _V58),
    findall(_V77, (member(G, _V58), get_item(G, 'key', _V59), get_item(_V59, 'id', _V60), get_item(G, 'key', _V61), get_item(_V61, 'first', _V62), get_item(G, 'key', _V63), get_item(_V63, 'last', _V64), get_item(G, 'key', _V65), get_item(_V65, 'login', _V66), get_item(G, 'key', _V67), get_item(_V67, 'year', _V68), findall(_V73, (member(X, G), true, get_item(X, 'cs_ext_list_price', _V69), get_item(X, 'cs_ext_wholesale_cost', _V70), get_item(X, 'cs_ext_discount_amt', _V71), get_item(X, 'cs_ext_sales_price', _V72), _V73 = ((((_V69 - _V70) - _V71) + _V72) / 2)), _V74), sum(_V74, _V75), dict_create(_V76, map, [customer_id-_V60, customer_first_name-_V62, customer_last_name-_V64, customer_login-_V66, dyear-_V68, year_total-_V75, sale_type-"c"]), _V77 = _V76), _V78),
    findall(_V91, (member(C, Customer), member(Ws, Web_sales), get_item(C, 'c_customer_sk', _V79), get_item(Ws, 'ws_bill_customer_sk', _V80), (_V79 == _V80), member(D, Date_dim), get_item(Ws, 'ws_sold_date_sk', _V81), get_item(D, 'd_date_sk', _V82), (_V81 == _V82), true, get_item(C, 'c_customer_id', _V83), get_item(C, 'c_first_name', _V84), get_item(C, 'c_last_name', _V85), get_item(C, 'c_login', _V86), get_item(D, 'd_year', _V87), dict_create(_V88, map, [id-_V83, first-_V84, last-_V85, login-_V86, year-_V87]), _V89 = _V88, dict_create(_V90, map, ['C'-C, 'Ws'-Ws, 'D'-D]), _V91 = _V89-_V90), _V92),
    group_pairs(_V92, [], _V93),
    findall(_V112, (member(G, _V93), get_item(G, 'key', _V94), get_item(_V94, 'id', _V95), get_item(G, 'key', _V96), get_item(_V96, 'first', _V97), get_item(G, 'key', _V98), get_item(_V98, 'last', _V99), get_item(G, 'key', _V100), get_item(_V100, 'login', _V101), get_item(G, 'key', _V102), get_item(_V102, 'year', _V103), findall(_V108, (member(X, G), true, get_item(X, 'ws_ext_list_price', _V104), get_item(X, 'ws_ext_wholesale_cost', _V105), get_item(X, 'ws_ext_discount_amt', _V106), get_item(X, 'ws_ext_sales_price', _V107), _V108 = ((((_V104 - _V105) - _V106) + _V107) / 2)), _V109), sum(_V109, _V110), dict_create(_V111, map, [customer_id-_V95, customer_first_name-_V97, customer_last_name-_V99, customer_login-_V101, dyear-_V103, year_total-_V110, sale_type-"w"]), _V112 = _V111), _V113),
    append(_V43, _V78, _V114),
    append(_V114, _V113, _V115),
    Year_total = _V115,
    findall(_V162, (member(S1, Year_total), member(S2, Year_total), get_item(S2, 'customer_id', _V116), get_item(S1, 'customer_id', _V117), (_V116 == _V117), member(C1, Year_total), get_item(C1, 'customer_id', _V118), get_item(S1, 'customer_id', _V119), (_V118 == _V119), member(C2, Year_total), get_item(C2, 'customer_id', _V120), get_item(S1, 'customer_id', _V121), (_V120 == _V121), member(W1, Year_total), get_item(W1, 'customer_id', _V122), get_item(S1, 'customer_id', _V123), (_V122 == _V123), member(W2, Year_total), get_item(W2, 'customer_id', _V124), get_item(S1, 'customer_id', _V125), (_V124 == _V125), get_item(S1, 'sale_type', _V126), get_item(C1, 'sale_type', _V127), get_item(W1, 'sale_type', _V128), get_item(S2, 'sale_type', _V129), get_item(C2, 'sale_type', _V130), get_item(W2, 'sale_type', _V131), get_item(S1, 'dyear', _V132), get_item(S2, 'dyear', _V133), get_item(C1, 'dyear', _V134), get_item(C2, 'dyear', _V135), get_item(W1, 'dyear', _V136), get_item(W2, 'dyear', _V137), get_item(S1, 'year_total', _V138), get_item(C1, 'year_total', _V139), get_item(W1, 'year_total', _V140), get_item(C1, 'year_total', _V141), get_item(C2, 'year_total', _V142), get_item(C1, 'year_total', _V143), ((_V141 > 0) -> _V144 = (_V142 / _V143) ; _V144 = null), get_item(S1, 'year_total', _V145), get_item(S2, 'year_total', _V146), get_item(S1, 'year_total', _V147), ((_V145 > 0) -> _V148 = (_V146 / _V147) ; _V148 = null), get_item(C1, 'year_total', _V149), get_item(C2, 'year_total', _V150), get_item(C1, 'year_total', _V151), ((_V149 > 0) -> _V152 = (_V150 / _V151) ; _V152 = null), get_item(W1, 'year_total', _V153), get_item(W2, 'year_total', _V154), get_item(W1, 'year_total', _V155), ((_V153 > 0) -> _V156 = (_V154 / _V155) ; _V156 = null), (((((((((((((((((_V126 == "s"), (_V127 == "c")), (_V128 == "w")), (_V129 == "s")), (_V130 == "c")), (_V131 == "w")), (_V132 == 2001)), (_V133 == 2002)), (_V134 == 2001)), (_V135 == 2002)), (_V136 == 2001)), (_V137 == 2002)), (_V138 > 0)), (_V139 > 0)), (_V140 > 0)), (_V144 > _V148)), (_V152 > _V156)), get_item(S2, 'customer_id', _V157), get_item(S2, 'customer_first_name', _V158), get_item(S2, 'customer_last_name', _V159), get_item(S2, 'customer_login', _V160), dict_create(_V161, map, [customer_id-_V157, customer_first_name-_V158, customer_last_name-_V159, customer_login-_V160]), _V162 = _V161), _V163),
    Result = _V163,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V164, map, [customer_id-"C1", customer_first_name-"Alice", customer_last_name-"A", customer_login-"alice"]),
    expect((Result == [_V164])),
    true.
