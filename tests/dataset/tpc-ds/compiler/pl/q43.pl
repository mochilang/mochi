% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:33Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [date_sk-1, d_day_name-"Sunday", d_year-2020]),
    dict_create(_V1, map, [date_sk-2, d_day_name-"Monday", d_year-2020]),
    dict_create(_V2, map, [date_sk-3, d_day_name-"Tuesday", d_year-2020]),
    dict_create(_V3, map, [date_sk-4, d_day_name-"Wednesday", d_year-2020]),
    dict_create(_V4, map, [date_sk-5, d_day_name-"Thursday", d_year-2020]),
    dict_create(_V5, map, [date_sk-6, d_day_name-"Friday", d_year-2020]),
    dict_create(_V6, map, [date_sk-7, d_day_name-"Saturday", d_year-2020]),
    Date_dim = [_V0, _V1, _V2, _V3, _V4, _V5, _V6],
    dict_create(_V7, map, [store_sk-1, store_id-"S1", store_name-"Main", gmt_offset-0]),
    Store = [_V7],
    dict_create(_V8, map, [sold_date_sk-1, store_sk-1, sales_price-10]),
    dict_create(_V9, map, [sold_date_sk-2, store_sk-1, sales_price-20]),
    dict_create(_V10, map, [sold_date_sk-3, store_sk-1, sales_price-30]),
    dict_create(_V11, map, [sold_date_sk-4, store_sk-1, sales_price-40]),
    dict_create(_V12, map, [sold_date_sk-5, store_sk-1, sales_price-50]),
    dict_create(_V13, map, [sold_date_sk-6, store_sk-1, sales_price-60]),
    dict_create(_V14, map, [sold_date_sk-7, store_sk-1, sales_price-70]),
    Store_sales = [_V8, _V9, _V10, _V11, _V12, _V13, _V14],
    Year is 2020,
    Gmt is 0,
    findall(_V26, (member(D, Date_dim), member(Ss, Store_sales), get_item(Ss, 'sold_date_sk', _V15), get_item(D, 'date_sk', _V16), (_V15 == _V16), member(S, Store), get_item(Ss, 'store_sk', _V17), get_item(S, 'store_sk', _V18), (_V17 == _V18), get_item(S, 'gmt_offset', _V19), get_item(D, 'd_year', _V20), ((_V19 == Gmt), (_V20 == Year)), get_item(D, 'd_day_name', _V21), get_item(S, 'store_name', _V22), get_item(S, 'store_id', _V23), get_item(Ss, 'sales_price', _V24), dict_create(_V25, map, [d_day_name-_V21, s_store_name-_V22, s_store_id-_V23, price-_V24]), _V26 = _V25), _V27),
    Records = _V27,
    findall(_V33, (member(R, Records), true, get_item(R, 's_store_name', _V28), get_item(R, 's_store_id', _V29), dict_create(_V30, map, [name-_V28, id-_V29]), _V31 = _V30, dict_create(_V32, map, ['R'-R]), _V33 = _V31-_V32), _V34),
    group_pairs(_V34, [], _V35),
    findall(_V83, (member(G, _V35), get_item(G, 'key', _V36), get_item(_V36, 'name', _V37), get_item(G, 'key', _V38), get_item(_V38, 'id', _V39), findall(_V43, (member(X, G), true, get_item(X, 'd_day_name', _V40), get_item(X, 'price', _V41), ((_V40 == "Sunday") -> _V42 = _V41 ; _V42 = 0), _V43 = _V42), _V44), sum(_V44, _V45), findall(_V49, (member(X, G), true, get_item(X, 'd_day_name', _V46), get_item(X, 'price', _V47), ((_V46 == "Monday") -> _V48 = _V47 ; _V48 = 0), _V49 = _V48), _V50), sum(_V50, _V51), findall(_V55, (member(X, G), true, get_item(X, 'd_day_name', _V52), get_item(X, 'price', _V53), ((_V52 == "Tuesday") -> _V54 = _V53 ; _V54 = 0), _V55 = _V54), _V56), sum(_V56, _V57), findall(_V61, (member(X, G), true, get_item(X, 'd_day_name', _V58), get_item(X, 'price', _V59), ((_V58 == "Wednesday") -> _V60 = _V59 ; _V60 = 0), _V61 = _V60), _V62), sum(_V62, _V63), findall(_V67, (member(X, G), true, get_item(X, 'd_day_name', _V64), get_item(X, 'price', _V65), ((_V64 == "Thursday") -> _V66 = _V65 ; _V66 = 0), _V67 = _V66), _V68), sum(_V68, _V69), findall(_V73, (member(X, G), true, get_item(X, 'd_day_name', _V70), get_item(X, 'price', _V71), ((_V70 == "Friday") -> _V72 = _V71 ; _V72 = 0), _V73 = _V72), _V74), sum(_V74, _V75), findall(_V79, (member(X, G), true, get_item(X, 'd_day_name', _V76), get_item(X, 'price', _V77), ((_V76 == "Saturday") -> _V78 = _V77 ; _V78 = 0), _V79 = _V78), _V80), sum(_V80, _V81), dict_create(_V82, map, [s_store_name-_V37, s_store_id-_V39, sun_sales-_V45, mon_sales-_V51, tue_sales-_V57, wed_sales-_V63, thu_sales-_V69, fri_sales-_V75, sat_sales-_V81]), _V83 = _V82), _V84),
    Base = _V84,
    Result = Base,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V85, map, [s_store_name-"Main", s_store_id-"S1", sun_sales-10, mon_sales-20, tue_sales-30, wed_sales-40, thu_sales-50, fri_sales-60, sat_sales-70]),
    expect((Result == [_V85])),
    true.
