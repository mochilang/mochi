% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:32Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ss_sold_date_sk-1, ss_item_sk-1, ss_customer_sk-1, ss_store_sk-1, ss_ext_sales_price-100]),
    Store_sales = [_V0],
    dict_create(_V1, map, [d_date_sk-1, d_year-1999, d_moy-11]),
    Date_dim = [_V1],
    dict_create(_V2, map, [i_item_sk-1, i_brand_id-1, i_brand-"B1", i_manufact_id-1, i_manufact-"M1", i_manager_id-10]),
    Item = [_V2],
    dict_create(_V3, map, [c_customer_sk-1, c_current_addr_sk-1]),
    Customer = [_V3],
    dict_create(_V4, map, [ca_address_sk-1, ca_zip-"11111"]),
    Customer_address = [_V4],
    dict_create(_V5, map, [s_store_sk-1, s_zip-"99999"]),
    Store = [_V5],
    findall(_V30, (member(D, Date_dim), member(Ss, Store_sales), get_item(Ss, 'ss_sold_date_sk', _V6), get_item(D, 'd_date_sk', _V7), (_V6 == _V7), member(I, Item), get_item(Ss, 'ss_item_sk', _V8), get_item(I, 'i_item_sk', _V9), get_item(I, 'i_manager_id', _V10), ((_V8 == _V9), (_V10 == 10)), member(C, Customer), get_item(Ss, 'ss_customer_sk', _V11), get_item(C, 'c_customer_sk', _V12), (_V11 == _V12), member(Ca, Customer_address), get_item(C, 'c_current_addr_sk', _V13), get_item(Ca, 'ca_address_sk', _V14), (_V13 == _V14), member(S, Store), get_item(Ss, 'ss_store_sk', _V15), get_item(S, 's_store_sk', _V16), get_item(Ca, 'ca_zip', _V17), substr(_V17, 0, 5, _V18), get_item(S, 's_zip', _V19), substr(_V19, 0, 5, _V20), ((_V15 == _V16), (_V18 \== _V20)), get_item(D, 'd_moy', _V21), get_item(D, 'd_year', _V22), ((_V21 == 11), (_V22 == 1999)), get_item(I, 'i_brand', _V23), get_item(I, 'i_brand_id', _V24), get_item(I, 'i_manufact_id', _V25), get_item(I, 'i_manufact', _V26), dict_create(_V27, map, [brand-_V23, brand_id-_V24, man_id-_V25, man-_V26]), _V28 = _V27, dict_create(_V29, map, ['D'-D, 'Ss'-Ss, 'I'-I, 'C'-C, 'Ca'-Ca, 'S'-S]), _V30 = _V28-_V29), _V31),
    group_pairs(_V31, [], _V32),
    findall(_V46, (member(G, _V32), get_item(G, 'key', _V33), get_item(_V33, 'brand', _V34), get_item(G, 'key', _V35), get_item(_V35, 'brand_id', _V36), get_item(G, 'key', _V37), get_item(_V37, 'man_id', _V38), get_item(G, 'key', _V39), get_item(_V39, 'man', _V40), findall(_V42, (member(X, G), true, get_item(X, 'ss_ext_sales_price', _V41), _V42 = _V41), _V43), sum(_V43, _V44), dict_create(_V45, map, [i_brand-_V34, i_brand_id-_V36, i_manufact_id-_V38, i_manufact-_V40, ext_price-_V44]), _V46 = _V45), _V47),
    Result = _V47,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V48, map, [i_brand-"B1", i_brand_id-1, i_manufact_id-1, i_manufact-"M1", ext_price-100]),
    expect((Result == [_V48])),
    true.
