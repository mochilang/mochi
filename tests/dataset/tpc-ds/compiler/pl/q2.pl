% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:31Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ws_sold_date_sk-1, ws_ext_sales_price-5, ws_sold_date_name-"Sunday"]),
    dict_create(_V1, map, [ws_sold_date_sk-2, ws_ext_sales_price-5, ws_sold_date_name-"Monday"]),
    dict_create(_V2, map, [ws_sold_date_sk-8, ws_ext_sales_price-10, ws_sold_date_name-"Sunday"]),
    dict_create(_V3, map, [ws_sold_date_sk-9, ws_ext_sales_price-10, ws_sold_date_name-"Monday"]),
    Web_sales = [_V0, _V1, _V2, _V3],
    dict_create(_V4, map, [cs_sold_date_sk-1, cs_ext_sales_price-5, cs_sold_date_name-"Sunday"]),
    dict_create(_V5, map, [cs_sold_date_sk-2, cs_ext_sales_price-5, cs_sold_date_name-"Monday"]),
    dict_create(_V6, map, [cs_sold_date_sk-8, cs_ext_sales_price-10, cs_sold_date_name-"Sunday"]),
    dict_create(_V7, map, [cs_sold_date_sk-9, cs_ext_sales_price-10, cs_sold_date_name-"Monday"]),
    Catalog_sales = [_V4, _V5, _V6, _V7],
    dict_create(_V8, map, [d_date_sk-1, d_week_seq-1, d_day_name-"Sunday", d_year-1998]),
    dict_create(_V9, map, [d_date_sk-2, d_week_seq-1, d_day_name-"Monday", d_year-1998]),
    dict_create(_V10, map, [d_date_sk-8, d_week_seq-54, d_day_name-"Sunday", d_year-1999]),
    dict_create(_V11, map, [d_date_sk-9, d_week_seq-54, d_day_name-"Monday", d_year-1999]),
    Date_dim = [_V8, _V9, _V10, _V11],
    findall(_V16, (member(Ws, Web_sales), true, get_item(Ws, 'ws_sold_date_sk', _V12), get_item(Ws, 'ws_ext_sales_price', _V13), get_item(Ws, 'ws_sold_date_name', _V14), dict_create(_V15, map, [sold_date_sk-_V12, sales_price-_V13, day-_V14]), _V16 = _V15), _V17),
    findall(_V22, (member(Cs, Catalog_sales), true, get_item(Cs, 'cs_sold_date_sk', _V18), get_item(Cs, 'cs_ext_sales_price', _V19), get_item(Cs, 'cs_sold_date_name', _V20), dict_create(_V21, map, [sold_date_sk-_V18, sales_price-_V19, day-_V20]), _V22 = _V21), _V23),
    append(_V17, _V23, _V24),
    Wscs = _V24,
    findall(_V31, (member(W, Wscs), member(D, Date_dim), get_item(W, 'sold_date_sk', _V25), get_item(D, 'd_date_sk', _V26), (_V25 == _V26), true, get_item(D, 'd_week_seq', _V27), dict_create(_V28, map, [week_seq-_V27]), _V29 = _V28, dict_create(_V30, map, ['W'-W, 'D'-D]), _V31 = _V29-_V30), _V32),
    group_pairs(_V32, [], _V33),
    findall(_V72, (member(G, _V33), get_item(G, 'key', _V34), get_item(_V34, 'week_seq', _V35), findall(_V38, (member(X, G), get_item(X, 'day', _V36), (_V36 == "Sunday"), get_item(X, 'sales_price', _V37), _V38 = _V37), _V39), sum(_V39, _V40), findall(_V43, (member(X, G), get_item(X, 'day', _V41), (_V41 == "Monday"), get_item(X, 'sales_price', _V42), _V43 = _V42), _V44), sum(_V44, _V45), findall(_V48, (member(X, G), get_item(X, 'day', _V46), (_V46 == "Tuesday"), get_item(X, 'sales_price', _V47), _V48 = _V47), _V49), sum(_V49, _V50), findall(_V53, (member(X, G), get_item(X, 'day', _V51), (_V51 == "Wednesday"), get_item(X, 'sales_price', _V52), _V53 = _V52), _V54), sum(_V54, _V55), findall(_V58, (member(X, G), get_item(X, 'day', _V56), (_V56 == "Thursday"), get_item(X, 'sales_price', _V57), _V58 = _V57), _V59), sum(_V59, _V60), findall(_V63, (member(X, G), get_item(X, 'day', _V61), (_V61 == "Friday"), get_item(X, 'sales_price', _V62), _V63 = _V62), _V64), sum(_V64, _V65), findall(_V68, (member(X, G), get_item(X, 'day', _V66), (_V66 == "Saturday"), get_item(X, 'sales_price', _V67), _V68 = _V67), _V69), sum(_V69, _V70), dict_create(_V71, map, [d_week_seq-_V35, sun_sales-_V40, mon_sales-_V45, tue_sales-_V50, wed_sales-_V55, thu_sales-_V60, fri_sales-_V65, sat_sales-_V70]), _V72 = _V71), _V73),
    Wswscs = _V73,
    findall(_V75, (member(W, Wswscs), get_item(W, 'd_week_seq', _V74), (_V74 == 1), _V75 = W), _V76),
    Year1 = _V76,
    findall(_V78, (member(W, Wswscs), get_item(W, 'd_week_seq', _V77), (_V77 == 54), _V78 = W), _V79),
    Year2 = _V79,
    findall(_V88, (member(Y, Year1), member(Z, Year2), get_item(Y, 'd_week_seq', _V80), get_item(Z, 'd_week_seq', _V81), (_V80 == (_V81 - 53)), true, get_item(Y, 'd_week_seq', _V82), get_item(Y, 'sun_sales', _V83), get_item(Z, 'sun_sales', _V84), get_item(Y, 'mon_sales', _V85), get_item(Z, 'mon_sales', _V86), dict_create(_V87, map, [d_week_seq1-_V82, sun_ratio-(_V83 / _V84), mon_ratio-(_V85 / _V86)]), _V88 = _V87), _V89),
    Result = _V89,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V90, map, [d_week_seq1-1, sun_ratio-0.5, mon_ratio-0.5]),
    expect((Result == [_V90])),
    true.
