% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:39:08Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ws_sold_time_sk-1, ws_ship_hdemo_sk-1, ws_web_page_sk-10]),
    dict_create(_V1, map, [ws_sold_time_sk-1, ws_ship_hdemo_sk-1, ws_web_page_sk-10]),
    dict_create(_V2, map, [ws_sold_time_sk-2, ws_ship_hdemo_sk-1, ws_web_page_sk-10]),
    Web_sales = [_V0, _V1, _V2],
    dict_create(_V3, map, [hd_demo_sk-1, hd_dep_count-2]),
    Household_demographics = [_V3],
    dict_create(_V4, map, [t_time_sk-1, t_hour-7]),
    dict_create(_V5, map, [t_time_sk-2, t_hour-14]),
    Time_dim = [_V4, _V5],
    dict_create(_V6, map, [wp_web_page_sk-10, wp_char_count-5100]),
    Web_page = [_V6],
    findall(_V18, (member(Ws, Web_sales), member(Hd, Household_demographics), get_item(Ws, 'ws_ship_hdemo_sk', _V7), get_item(Hd, 'hd_demo_sk', _V8), (_V7 == _V8), member(T, Time_dim), get_item(Ws, 'ws_sold_time_sk', _V9), get_item(T, 't_time_sk', _V10), (_V9 == _V10), member(Wp, Web_page), get_item(Ws, 'ws_web_page_sk', _V11), get_item(Wp, 'wp_web_page_sk', _V12), (_V11 == _V12), get_item(T, 't_hour', _V13), get_item(T, 't_hour', _V14), get_item(Hd, 'hd_dep_count', _V15), get_item(Wp, 'wp_char_count', _V16), get_item(Wp, 'wp_char_count', _V17), (((((_V13 >= 7), (_V14 =< 8)), (_V15 == 2)), (_V16 >= 5000)), (_V17 =< 5200)), _V18 = Ws), _V19),
    count(_V19, _V20),
    Amc is _V20,
    findall(_V32, (member(Ws, Web_sales), member(Hd, Household_demographics), get_item(Ws, 'ws_ship_hdemo_sk', _V21), get_item(Hd, 'hd_demo_sk', _V22), (_V21 == _V22), member(T, Time_dim), get_item(Ws, 'ws_sold_time_sk', _V23), get_item(T, 't_time_sk', _V24), (_V23 == _V24), member(Wp, Web_page), get_item(Ws, 'ws_web_page_sk', _V25), get_item(Wp, 'wp_web_page_sk', _V26), (_V25 == _V26), get_item(T, 't_hour', _V27), get_item(T, 't_hour', _V28), get_item(Hd, 'hd_dep_count', _V29), get_item(Wp, 'wp_char_count', _V30), get_item(Wp, 'wp_char_count', _V31), (((((_V27 >= 14), (_V28 =< 15)), (_V29 == 2)), (_V30 >= 5000)), (_V31 =< 5200)), _V32 = Ws), _V33),
    count(_V33, _V34),
    Pmc is _V34,
    Result is (Amc / Pmc),
    json_write_dict(current_output, Result), nl,
    true,
    expect((Result == 2)),
    true.
