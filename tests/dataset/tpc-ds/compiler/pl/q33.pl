% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:33Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [i_item_sk-1, i_manufact_id-1, i_category-"Books"]),
    dict_create(_V1, map, [i_item_sk-2, i_manufact_id-2, i_category-"Books"]),
    Item = [_V0, _V1],
    dict_create(_V2, map, [d_date_sk-1, d_year-2000, d_moy-1]),
    Date_dim = [_V2],
    dict_create(_V3, map, [ca_address_sk-1, ca_gmt_offset-(-5)]),
    dict_create(_V4, map, [ca_address_sk-2, ca_gmt_offset-(-5)]),
    Customer_address = [_V3, _V4],
    dict_create(_V5, map, [ss_item_sk-1, ss_ext_sales_price-100, ss_sold_date_sk-1, ss_addr_sk-1]),
    dict_create(_V6, map, [ss_item_sk-2, ss_ext_sales_price-50, ss_sold_date_sk-1, ss_addr_sk-2]),
    Store_sales = [_V5, _V6],
    dict_create(_V7, map, [cs_item_sk-1, cs_ext_sales_price-20, cs_sold_date_sk-1, cs_bill_addr_sk-1]),
    Catalog_sales = [_V7],
    dict_create(_V8, map, [ws_item_sk-1, ws_ext_sales_price-30, ws_sold_date_sk-1, ws_bill_addr_sk-1]),
    Web_sales = [_V8],
    Month is 1,
    Year is 2000,
    findall(_V22, (member(Ss, Store_sales), member(D, Date_dim), get_item(Ss, 'ss_sold_date_sk', _V9), get_item(D, 'd_date_sk', _V10), (_V9 == _V10), member(Ca, Customer_address), get_item(Ss, 'ss_addr_sk', _V11), get_item(Ca, 'ca_address_sk', _V12), (_V11 == _V12), member(I, Item), get_item(Ss, 'ss_item_sk', _V13), get_item(I, 'i_item_sk', _V14), (_V13 == _V14), get_item(I, 'i_category', _V15), get_item(D, 'd_year', _V16), get_item(D, 'd_moy', _V17), get_item(Ca, 'ca_gmt_offset', _V18), ((((_V15 == "Books"), (_V16 == Year)), (_V17 == Month)), (_V18 == (-5))), get_item(I, 'i_manufact_id', _V19), get_item(Ss, 'ss_ext_sales_price', _V20), dict_create(_V21, map, [manu-_V19, price-_V20]), _V22 = _V21), _V23),
    findall(_V37, (member(Cs, Catalog_sales), member(D, Date_dim), get_item(Cs, 'cs_sold_date_sk', _V24), get_item(D, 'd_date_sk', _V25), (_V24 == _V25), member(Ca, Customer_address), get_item(Cs, 'cs_bill_addr_sk', _V26), get_item(Ca, 'ca_address_sk', _V27), (_V26 == _V27), member(I, Item), get_item(Cs, 'cs_item_sk', _V28), get_item(I, 'i_item_sk', _V29), (_V28 == _V29), get_item(I, 'i_category', _V30), get_item(D, 'd_year', _V31), get_item(D, 'd_moy', _V32), get_item(Ca, 'ca_gmt_offset', _V33), ((((_V30 == "Books"), (_V31 == Year)), (_V32 == Month)), (_V33 == (-5))), get_item(I, 'i_manufact_id', _V34), get_item(Cs, 'cs_ext_sales_price', _V35), dict_create(_V36, map, [manu-_V34, price-_V35]), _V37 = _V36), _V38),
    findall(_V52, (member(Ws, Web_sales), member(D, Date_dim), get_item(Ws, 'ws_sold_date_sk', _V39), get_item(D, 'd_date_sk', _V40), (_V39 == _V40), member(Ca, Customer_address), get_item(Ws, 'ws_bill_addr_sk', _V41), get_item(Ca, 'ca_address_sk', _V42), (_V41 == _V42), member(I, Item), get_item(Ws, 'ws_item_sk', _V43), get_item(I, 'i_item_sk', _V44), (_V43 == _V44), get_item(I, 'i_category', _V45), get_item(D, 'd_year', _V46), get_item(D, 'd_moy', _V47), get_item(Ca, 'ca_gmt_offset', _V48), ((((_V45 == "Books"), (_V46 == Year)), (_V47 == Month)), (_V48 == (-5))), get_item(I, 'i_manufact_id', _V49), get_item(Ws, 'ws_ext_sales_price', _V50), dict_create(_V51, map, [manu-_V49, price-_V50]), _V52 = _V51), _V53),
    concat(_V23, _V38, _V53, _V54),
    Union_sales = _V54,
    findall(_V58, (member(S, Union_sales), true, get_item(S, 'manu', _V55), _V56 = _V55, dict_create(_V57, map, ['S'-S]), _V58 = _V56-_V57), _V59),
    group_pairs(_V59, [], _V60),
    findall(_V67, (member(G, _V60), get_item(G, 'key', _V61), findall(_V63, (member(X, G), true, get_item(X, 'price', _V62), _V63 = _V62), _V64), sum(_V64, _V65), dict_create(_V66, map, [i_manufact_id-_V61, total_sales-_V65]), _V67 = _V66), _V68),
    Result = _V68,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V69, map, [i_manufact_id-1, total_sales-150]),
    dict_create(_V70, map, [i_manufact_id-2, total_sales-50]),
    expect((Result == [_V69, _V70])),
    true.
