% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:37Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [cs_ship_date_sk-31, cs_sold_date_sk-1, cs_warehouse_sk-1, cs_ship_mode_sk-1, cs_call_center_sk-1]),
    dict_create(_V1, map, [cs_ship_date_sk-51, cs_sold_date_sk-1, cs_warehouse_sk-1, cs_ship_mode_sk-1, cs_call_center_sk-1]),
    dict_create(_V2, map, [cs_ship_date_sk-71, cs_sold_date_sk-1, cs_warehouse_sk-1, cs_ship_mode_sk-1, cs_call_center_sk-1]),
    dict_create(_V3, map, [cs_ship_date_sk-101, cs_sold_date_sk-1, cs_warehouse_sk-1, cs_ship_mode_sk-1, cs_call_center_sk-1]),
    dict_create(_V4, map, [cs_ship_date_sk-131, cs_sold_date_sk-1, cs_warehouse_sk-1, cs_ship_mode_sk-1, cs_call_center_sk-1]),
    Catalog_sales = [_V0, _V1, _V2, _V3, _V4],
    dict_create(_V5, map, [w_warehouse_sk-1, w_warehouse_name-"Warehouse1"]),
    Warehouse = [_V5],
    dict_create(_V6, map, [sm_ship_mode_sk-1, sm_type-"EXP"]),
    Ship_mode = [_V6],
    dict_create(_V7, map, [cc_call_center_sk-1, cc_name-"CC1"]),
    Call_center = [_V7],
    findall(_V21, (member(Cs, Catalog_sales), member(W, Warehouse), get_item(Cs, 'cs_warehouse_sk', _V8), get_item(W, 'w_warehouse_sk', _V9), (_V8 == _V9), member(Sm, Ship_mode), get_item(Cs, 'cs_ship_mode_sk', _V10), get_item(Sm, 'sm_ship_mode_sk', _V11), (_V10 == _V11), member(Cc, Call_center), get_item(Cs, 'cs_call_center_sk', _V12), get_item(Cc, 'cc_call_center_sk', _V13), (_V12 == _V13), true, get_item(W, 'w_warehouse_name', _V14), substr(_V14, 0, 20, _V15), get_item(Sm, 'sm_type', _V16), get_item(Cc, 'cc_name', _V17), dict_create(_V18, map, [warehouse-_V15, sm_type-_V16, cc_name-_V17]), _V19 = _V18, dict_create(_V20, map, ['Cs'-Cs, 'W'-W, 'Sm'-Sm, 'Cc'-Cc]), _V21 = _V19-_V20), _V22),
    group_pairs(_V22, [], _V23),
    findall(_V62, (member(G, _V23), get_item(G, 'key', _V24), get_item(_V24, 'warehouse', _V25), get_item(G, 'key', _V26), get_item(_V26, 'sm_type', _V27), get_item(G, 'key', _V28), get_item(_V28, 'cc_name', _V29), findall(_V32, (member(X, G), get_item(X, 'cs_ship_date_sk', _V30), get_item(X, 'cs_sold_date_sk', _V31), ((_V30 - _V31) =< 30), _V32 = X), _V33), count(_V33, _V34), findall(_V39, (member(X, G), get_item(X, 'cs_ship_date_sk', _V35), get_item(X, 'cs_sold_date_sk', _V36), get_item(X, 'cs_ship_date_sk', _V37), get_item(X, 'cs_sold_date_sk', _V38), (((_V35 - _V36) > 30), ((_V37 - _V38) =< 60)), _V39 = X), _V40), count(_V40, _V41), findall(_V46, (member(X, G), get_item(X, 'cs_ship_date_sk', _V42), get_item(X, 'cs_sold_date_sk', _V43), get_item(X, 'cs_ship_date_sk', _V44), get_item(X, 'cs_sold_date_sk', _V45), (((_V42 - _V43) > 60), ((_V44 - _V45) =< 90)), _V46 = X), _V47), count(_V47, _V48), findall(_V53, (member(X, G), get_item(X, 'cs_ship_date_sk', _V49), get_item(X, 'cs_sold_date_sk', _V50), get_item(X, 'cs_ship_date_sk', _V51), get_item(X, 'cs_sold_date_sk', _V52), (((_V49 - _V50) > 90), ((_V51 - _V52) =< 120)), _V53 = X), _V54), count(_V54, _V55), findall(_V58, (member(X, G), get_item(X, 'cs_ship_date_sk', _V56), get_item(X, 'cs_sold_date_sk', _V57), ((_V56 - _V57) > 120), _V58 = X), _V59), count(_V59, _V60), dict_create(_V61, map, [warehouse-_V25, sm_type-_V27, cc_name-_V29, d30-_V34, d60-_V41, d90-_V48, d120-_V55, dmore-_V60]), _V62 = _V61), _V63),
    Grouped = _V63,
    json_write_dict(current_output, Grouped), nl,
    true,
    dict_create(_V64, map, [warehouse-"Warehouse1", sm_type-"EXP", cc_name-"CC1", d30-1, d60-1, d90-1, d120-1, dmore-1]),
    expect((Grouped == [_V64])),
    true.
