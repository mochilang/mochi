% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:39:06Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ss_ticket_number-1, ss_customer_sk-1, ss_sold_date_sk-1, ss_store_sk-1, ss_hdemo_sk-1]),
    Store_sales = [_V0],
    dict_create(_V1, map, [d_date_sk-1, d_dom-1, d_year-1998]),
    Date_dim = [_V1],
    dict_create(_V2, map, [s_store_sk-1, s_county-"A"]),
    Store = [_V2],
    dict_create(_V3, map, [hd_demo_sk-1, hd_buy_potential-"1001-5000", hd_vehicle_count-2, hd_dep_count-3]),
    Household_demographics = [_V3],
    dict_create(_V4, map, [c_customer_sk-1, c_last_name-"Smith", c_first_name-"Alice", c_salutation-"Ms.", c_preferred_cust_flag-"Y"]),
    Customer = [_V4],
    findall(_V27, (member(Ss, Store_sales), member(D, Date_dim), get_item(D, 'd_date_sk', _V5), get_item(Ss, 'ss_sold_date_sk', _V6), (_V5 == _V6), member(S, Store), get_item(S, 's_store_sk', _V7), get_item(Ss, 'ss_store_sk', _V8), (_V7 == _V8), member(Hd, Household_demographics), get_item(Hd, 'hd_demo_sk', _V9), get_item(Ss, 'ss_hdemo_sk', _V10), (_V9 == _V10), get_item(D, 'd_dom', _V11), get_item(D, 'd_dom', _V12), get_item(Hd, 'hd_buy_potential', _V13), get_item(Hd, 'hd_buy_potential', _V14), get_item(Hd, 'hd_vehicle_count', _V15), get_item(Hd, 'hd_dep_count', _V16), get_item(Hd, 'hd_vehicle_count', _V17), get_item(D, 'd_year', _V18), get_item(D, 'd_year', _V19), get_item(D, 'd_year', _V20), get_item(S, 's_county', _V21), (((((((_V11 >= 1), (_V12 =< 2)), ((_V13 == "1001-5000") ; (_V14 == "0-500"))), (_V15 > 0)), ((_V16 / _V17) > 1)), (((_V18 == 1998) ; (_V19 == 1999)) ; (_V20 == 2000))), (_V21 == "A")), get_item(Ss, 'ss_ticket_number', _V22), get_item(Ss, 'ss_customer_sk', _V23), dict_create(_V24, map, [ticket-_V22, cust-_V23]), _V25 = _V24, dict_create(_V26, map, ['Ss'-Ss, 'D'-D, 'S'-S, 'Hd'-Hd]), _V27 = _V25-_V26), _V28),
    group_pairs(_V28, [], _V29),
    findall(_V33, (member(G, _V29), get_item(G, 'key', _V30), count(G, _V31), dict_create(_V32, map, [key-_V30, cnt-_V31]), _V33 = _V32), _V34),
    Groups = _V34,
    findall(_V48, (member(G, Groups), member(C, Customer), get_item(C, 'c_customer_sk', _V35), get_item(G, 'key', _V36), get_item(_V36, 'cust', _V37), (_V35 == _V37), get_item(G, 'cnt', _V38), get_item(G, 'cnt', _V39), ((_V38 >= 1), (_V39 =< 5)), get_item(C, 'c_last_name', _V40), get_item(C, 'c_first_name', _V41), get_item(C, 'c_salutation', _V42), get_item(C, 'c_preferred_cust_flag', _V43), get_item(G, 'key', _V44), get_item(_V44, 'ticket', _V45), get_item(G, 'cnt', _V46), dict_create(_V47, map, [c_last_name-_V40, c_first_name-_V41, c_salutation-_V42, c_preferred_cust_flag-_V43, ss_ticket_number-_V45, cnt-_V46]), _V48 = _V47), _V49),
    Result = _V49,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V50, map, [c_last_name-"Smith", c_first_name-"Alice", c_salutation-"Ms.", c_preferred_cust_flag-"Y", ss_ticket_number-1, cnt-1]),
    expect((Result == [_V50])),
    true.
