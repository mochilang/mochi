% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:37Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

contains(Container, Item, Res) :-
    is_dict(Container), !, (string(Item) -> atom_string(A, Item) ; A = Item), (get_dict(A, Container, _) -> Res = true ; Res = false).
contains(List, Item, Res) :-
    string(List), !, (sub_string(List, _, _, _, Item) -> Res = true ; Res = false).
contains(List, Item, Res) :- (member(Item, List) -> Res = true ; Res = false).

len_any(Value, Len) :-
    string(Value), !, string_length(Value, Len).
len_any(Value, Len) :-
    is_dict(Value), !, dict_pairs(Value, _, Pairs), length(Pairs, Len).
len_any(Value, Len) :- length(Value, Len).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

distinct(Xs, _Res) :-
    nb_setval(out, []),
    catch(
        (
            member(X, Xs),
                catch(
                    (
                        nb_getval(out, _V0),
                        contains(_V0, X, _V1),
                        (_V1 -> _V2 = false ; _V2 = true),
                        (_V2 \= nil ->
                            nb_getval(out, _V3),
                            append(_V3, [X], _V4),
                            nb_setval(out, _V4),
                            true
                        ; true
                        ),
                        true
                    ), continue, true),
                    fail
                ; true
            ), break, true),
            nb_getval(out, _V5),
            _Res = _V5.
        
        :- initialization(main, main).
        main :-
            dict_create(_V0, map, [ws_order_number-1, ws_warehouse_sk-1, ws_ship_date_sk-1, ws_ship_addr_sk-1, ws_web_site_sk-1, ws_ext_ship_cost-2, ws_net_profit-5]),
            dict_create(_V1, map, [ws_order_number-1, ws_warehouse_sk-2, ws_ship_date_sk-1, ws_ship_addr_sk-1, ws_web_site_sk-1, ws_ext_ship_cost-0, ws_net_profit-0]),
            Web_sales = [_V0, _V1],
            dict_create(_V2, map, [wr_order_number-1]),
            Web_returns = [_V2],
            dict_create(_V3, map, [d_date_sk-1, d_date-"2001-02-01"]),
            Date_dim = [_V3],
            dict_create(_V4, map, [ca_address_sk-1, ca_state-"CA"]),
            Customer_address = [_V4],
            dict_create(_V5, map, [web_site_sk-1, web_company_name-"pri"]),
            Web_site = [_V5],
            findall(_V12, (member(Ws1, Web_sales), member(Ws2, Web_sales), get_item(Ws1, 'ws_order_number', _V6), get_item(Ws2, 'ws_order_number', _V7), get_item(Ws1, 'ws_warehouse_sk', _V8), get_item(Ws2, 'ws_warehouse_sk', _V9), ((_V6 == _V7), (_V8 \== _V9)), get_item(Ws1, 'ws_order_number', _V10), dict_create(_V11, map, [ws_order_number-_V10]), _V12 = _V11), _V13),
            Ws_wh = _V13,
            findall(_V32, (member(Ws, Web_sales), member(D, Date_dim), get_item(Ws, 'ws_ship_date_sk', _V14), get_item(D, 'd_date_sk', _V15), (_V14 == _V15), member(Ca, Customer_address), get_item(Ws, 'ws_ship_addr_sk', _V16), get_item(Ca, 'ca_address_sk', _V17), (_V16 == _V17), member(W, Web_site), get_item(Ws, 'ws_web_site_sk', _V18), get_item(W, 'web_site_sk', _V19), (_V18 == _V19), get_item(Ca, 'ca_state', _V20), get_item(W, 'web_company_name', _V21), get_item(Ws, 'ws_order_number', _V22), findall(_V24, (member(X, Ws_wh), true, get_item(X, 'ws_order_number', _V23), _V24 = _V23), _V25), get_item(Ws, 'ws_order_number', _V26), findall(_V28, (member(Wr, Web_returns), true, get_item(Wr, 'wr_order_number', _V27), _V28 = _V27), _V29), contains(_V25, _V22, _V30), contains(_V29, _V26, _V31), ((((_V20 == "CA"), (_V21 == "pri")), _V30), _V31), _V32 = Ws), _V33),
            Filtered = _V33,
            findall(_V35, (member(X, Filtered), true, get_item(X, 'ws_order_number', _V34), _V35 = _V34), _V36),
            distinct(_V36, _V37),
            len_any(_V37, _V38),
            findall(_V40, (member(X, Filtered), true, get_item(X, 'ws_ext_ship_cost', _V39), _V40 = _V39), _V41),
            sum(_V41, _V42),
            findall(_V44, (member(X, Filtered), true, get_item(X, 'ws_net_profit', _V43), _V44 = _V43), _V45),
            sum(_V45, _V46),
            dict_create(_V47, map, [order_count-_V38, total_shipping_cost-_V42, total_net_profit-_V46]),
            Result = _V47,
            json_write_dict(current_output, Result), nl,
            true,
            dict_create(_V48, map, [order_count-1, total_shipping_cost-2, total_net_profit-5]),
            expect((Result == _V48)),
            true.
