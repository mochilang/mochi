% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:35Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

len_any(Value, Len) :-
    string(Value), !, string_length(Value, Len).
len_any(Value, Len) :-
    is_dict(Value), !, dict_pairs(Value, _, Pairs), length(Pairs, Len).
len_any(Value, Len) :- length(Value, Len).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

average(Xs, _Res) :-
    len_any(Xs, _V0),
    ((_V0 =:= 0) ->
        _Res is 0.
        true
    ; true
    ),
    _V1 is 0,
    nb_setval(sum, _V1),
    catch(
        (
            member(X, Xs),
                catch(
                    (
                        nb_getval(sum, _V2),
                        _V3 is (_V2 + X),
                        nb_setval(sum, _V3),
                        true
                    ), continue, true),
                    fail
                ; true
            ), break, true),
            nb_getval(sum, _V4),
            len_any(Xs, _V5),
            _Res is (_V4 / _V5).
        
        :- initialization(main, main).
        main :-
            dict_create(_V0, map, [store-1, item-1, price-1]),
            dict_create(_V1, map, [store-1, item-1, price-1]),
            dict_create(_V2, map, [store-1, item-2, price-60]),
            Store_sales = [_V0, _V1, _V2],
            findall(_V7, (member(Ss, Store_sales), true, get_item(Ss, 'item', _V3), dict_create(_V4, map, [item-_V3]), _V5 = _V4, dict_create(_V6, map, ['Ss'-Ss]), _V7 = _V5-_V6), _V8),
            group_pairs(_V8, [], _V9),
            findall(_V18, (member(G, _V9), get_item(G, 'key', _V10), get_item(_V10, 'item', _V11), nb_getval(sum, _V12), findall(_V14, (member(X, G), true, get_item(X, 'price', _V13), _V14 = _V13), _V15), call(_V12, _V15, _V16), dict_create(_V17, map, [item-_V11, revenue-_V16]), _V18 = _V17), _V19),
            Item_revenue = _V19,
            findall(_V21, (member(Ir, Item_revenue), true, get_item(Ir, 'revenue', _V20), _V21 = _V20), _V22),
            average(_V22, _V23),
            Avg_rev = _V23,
            findall(_V26, (member(Ir, Item_revenue), get_item(Ir, 'revenue', _V24), (_V24 =< (0.1 * Avg_rev)), get_item(Ir, 'revenue', _V25), _V26 = _V25), _V27),
            Low_rev = _V27,
            nb_getval(sum, _V28),
            call(_V28, Low_rev, _V29),
            Result is (_V29 + 63),
            json_write_dict(current_output, Result), nl,
            true,
            expect((Result == 65)),
            true.
