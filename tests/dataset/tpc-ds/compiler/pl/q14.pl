% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:31Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

contains(Container, Item, Res) :-
    is_dict(Container), !, (string(Item) -> atom_string(A, Item) ; A = Item), (get_dict(A, Container, _) -> Res = true ; Res = false).
contains(List, Item, Res) :-
    string(List), !, (sub_string(List, _, _, _, Item) -> Res = true ; Res = false).
contains(List, Item, Res) :- (member(Item, List) -> Res = true ; Res = false).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ss_item_sk-1, ss_list_price-10, ss_quantity-2, ss_sold_date_sk-1]),
    dict_create(_V1, map, [ss_item_sk-1, ss_list_price-20, ss_quantity-3, ss_sold_date_sk-2]),
    Store_sales = [_V0, _V1],
    dict_create(_V2, map, [cs_item_sk-1, cs_list_price-10, cs_quantity-2, cs_sold_date_sk-1]),
    Catalog_sales = [_V2],
    dict_create(_V3, map, [ws_item_sk-1, ws_list_price-30, ws_quantity-1, ws_sold_date_sk-1]),
    Web_sales = [_V3],
    dict_create(_V4, map, [i_item_sk-1, i_brand_id-1, i_class_id-1, i_category_id-1]),
    Item = [_V4],
    dict_create(_V5, map, [d_date_sk-1, d_year-2000, d_moy-12]),
    dict_create(_V6, map, [d_date_sk-2, d_year-2002, d_moy-11]),
    Date_dim = [_V5, _V6],
    dict_create(_V7, map, [ss_item_sk-1]),
    Cross_items = [_V7],
    avg([20, 20, 30], _V8),
    Avg_sales is _V8,
    findall(_V21, (member(Ss, Store_sales), member(D, Date_dim), get_item(Ss, 'ss_sold_date_sk', _V9), get_item(D, 'd_date_sk', _V10), get_item(D, 'd_year', _V11), get_item(D, 'd_moy', _V12), (((_V9 == _V10), (_V11 == 2002)), (_V12 == 11)), get_item(Ss, 'ss_item_sk', _V13), findall(_V15, (member(Ci, Cross_items), true, get_item(Ci, 'ss_item_sk', _V14), _V15 = _V14), _V16), contains(_V16, _V13, _V17), _V17, dict_create(_V18, map, [brand_id-1, class_id-1, category_id-1]), _V19 = _V18, dict_create(_V20, map, ['Ss'-Ss, 'D'-D]), _V21 = _V19-_V20), _V22),
    group_pairs(_V22, [], _V23),
    findall(_V33, (member(G, _V23), findall(_V26, (member(X, G), true, get_item(X, 'ss_quantity', _V24), get_item(X, 'ss_list_price', _V25), _V26 = (_V24 * _V25)), _V27), sum(_V27, _V28), findall(_V29, (member(_, G), true, _V29 = _), _V30), count(_V30, _V31), dict_create(_V32, map, [channel-"store", sales-_V28, number_sales-_V31]), _V33 = _V32), _V34),
    Store_filtered = _V34,
    findall(_V40, (member(R, Store_filtered), get_item(R, 'sales', _V35), (_V35 > Avg_sales), get_item(R, 'channel', _V36), get_item(R, 'sales', _V37), get_item(R, 'number_sales', _V38), dict_create(_V39, map, [channel-_V36, i_brand_id-1, i_class_id-1, i_category_id-1, sales-_V37, number_sales-_V38]), _V40 = _V39), _V41),
    Result = _V41,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V42, map, [channel-"store", i_brand_id-1, i_class_id-1, i_category_id-1, sales-60, number_sales-1]),
    expect((Result == [_V42])),
    true.
