% Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [d_date_sk-1, d_year-1998, d_qoy-1]),
    Date_dim = [_V0],
    dict_create(_V1, map, [i_item_sk-1, i_category-"CatA"]),
    dict_create(_V2, map, [i_item_sk-2, i_category-"CatB"]),
    dict_create(_V3, map, [i_item_sk-3, i_category-"CatC"]),
    Item = [_V1, _V2, _V3],
    dict_create(_V4, map, [ss_customer_sk-null, ss_item_sk-1, ss_ext_sales_price-10, ss_sold_date_sk-1]),
    Store_sales = [_V4],
    dict_create(_V5, map, [ws_bill_customer_sk-null, ws_item_sk-2, ws_ext_sales_price-15, ws_sold_date_sk-1]),
    Web_sales = [_V5],
    dict_create(_V6, map, [cs_bill_customer_sk-null, cs_item_sk-3, cs_ext_sales_price-20, cs_sold_date_sk-1]),
    Catalog_sales = [_V6],
    findall(_V18, (member(Ss, Store_sales), member(I, Item), get_item(I, 'i_item_sk', _V7), get_item(Ss, 'ss_item_sk', _V8), (_V7 == _V8), member(D, Date_dim), get_item(D, 'd_date_sk', _V9), get_item(Ss, 'ss_sold_date_sk', _V10), (_V9 == _V10), get_item(Ss, 'ss_customer_sk', _V11), (_V11 == null), get_item(Ss, 'ss_customer_sk', _V12), get_item(D, 'd_year', _V13), get_item(D, 'd_qoy', _V14), get_item(I, 'i_category', _V15), get_item(Ss, 'ss_ext_sales_price', _V16), dict_create(_V17, map, [channel-"store", col_name-_V12, d_year-_V13, d_qoy-_V14, i_category-_V15, ext_sales_price-_V16]), _V18 = _V17), _V19),
    Store_part = _V19,
    findall(_V31, (member(Ws, Web_sales), member(I, Item), get_item(I, 'i_item_sk', _V20), get_item(Ws, 'ws_item_sk', _V21), (_V20 == _V21), member(D, Date_dim), get_item(D, 'd_date_sk', _V22), get_item(Ws, 'ws_sold_date_sk', _V23), (_V22 == _V23), get_item(Ws, 'ws_bill_customer_sk', _V24), (_V24 == null), get_item(Ws, 'ws_bill_customer_sk', _V25), get_item(D, 'd_year', _V26), get_item(D, 'd_qoy', _V27), get_item(I, 'i_category', _V28), get_item(Ws, 'ws_ext_sales_price', _V29), dict_create(_V30, map, [channel-"web", col_name-_V25, d_year-_V26, d_qoy-_V27, i_category-_V28, ext_sales_price-_V29]), _V31 = _V30), _V32),
    Web_part = _V32,
    findall(_V44, (member(Cs, Catalog_sales), member(I, Item), get_item(I, 'i_item_sk', _V33), get_item(Cs, 'cs_item_sk', _V34), (_V33 == _V34), member(D, Date_dim), get_item(D, 'd_date_sk', _V35), get_item(Cs, 'cs_sold_date_sk', _V36), (_V35 == _V36), get_item(Cs, 'cs_bill_customer_sk', _V37), (_V37 == null), get_item(Cs, 'cs_bill_customer_sk', _V38), get_item(D, 'd_year', _V39), get_item(D, 'd_qoy', _V40), get_item(I, 'i_category', _V41), get_item(Cs, 'cs_ext_sales_price', _V42), dict_create(_V43, map, [channel-"catalog", col_name-_V38, d_year-_V39, d_qoy-_V40, i_category-_V41, ext_sales_price-_V42]), _V44 = _V43), _V45),
    Catalog_part = _V45,
    concat(Store_part, Web_part, Catalog_part, _V46),
    All_rows = _V46,
    findall(_V55, (member(R, All_rows), true, get_item(R, 'channel', _V47), get_item(R, 'col_name', _V48), get_item(R, 'd_year', _V49), get_item(R, 'd_qoy', _V50), get_item(R, 'i_category', _V51), dict_create(_V52, map, [channel-_V47, col_name-_V48, d_year-_V49, d_qoy-_V50, i_category-_V51]), _V53 = _V52, dict_create(_V54, map, ['R'-R]), _V55 = _V53-_V54), _V56),
    group_pairs(_V56, [], _V57),
    findall(_V75, (member(G, _V57), get_item(G, 'key', _V58), get_item(_V58, 'channel', _V59), get_item(G, 'key', _V60), get_item(_V60, 'col_name', _V61), get_item(G, 'key', _V62), get_item(_V62, 'd_year', _V63), get_item(G, 'key', _V64), get_item(_V64, 'd_qoy', _V65), get_item(G, 'key', _V66), get_item(_V66, 'i_category', _V67), count(G, _V68), findall(_V71, (member(X, G), true, get_item(X, 'r', _V69), get_item(_V69, 'ext_sales_price', _V70), _V71 = _V70), _V72), sum(_V72, _V73), dict_create(_V74, map, [channel-_V59, col_name-_V61, d_year-_V63, d_qoy-_V65, i_category-_V67, sales_cnt-_V68, sales_amt-_V73]), _V75 = _V74), _V76),
    Result = _V76,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V77, map, [channel-"store", col_name-null, d_year-1998, d_qoy-1, i_category-"CatA", sales_cnt-1, sales_amt-10]),
    dict_create(_V78, map, [channel-"web", col_name-null, d_year-1998, d_qoy-1, i_category-"CatB", sales_cnt-1, sales_amt-15]),
    dict_create(_V79, map, [channel-"catalog", col_name-null, d_year-1998, d_qoy-1, i_category-"CatC", sales_cnt-1, sales_amt-20]),
    expect((Result == [_V77, _V78, _V79])),
    true.
