% Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ss_customer_sk-1, ss_item_sk-1]),
    dict_create(_V1, map, [ss_customer_sk-2, ss_item_sk-1]),
    Store_sales = [_V0, _V1],
    dict_create(_V2, map, [cs_bill_customer_sk-1, cs_item_sk-1]),
    dict_create(_V3, map, [cs_bill_customer_sk-3, cs_item_sk-2]),
    Catalog_sales = [_V2, _V3],
    findall(_V9, (member(Ss, Store_sales), true, get_item(Ss, 'ss_customer_sk', _V4), get_item(Ss, 'ss_item_sk', _V5), dict_create(_V6, map, [customer_sk-_V4, item_sk-_V5]), _V7 = _V6, dict_create(_V8, map, ['Ss'-Ss]), _V9 = _V7-_V8), _V10),
    group_pairs(_V10, [], _V11),
    findall(_V17, (member(G, _V11), get_item(G, 'key', _V12), get_item(_V12, 'customer_sk', _V13), get_item(G, 'key', _V14), get_item(_V14, 'item_sk', _V15), dict_create(_V16, map, [customer_sk-_V13, item_sk-_V15]), _V17 = _V16), _V18),
    Ssci = _V18,
    findall(_V24, (member(Cs, Catalog_sales), true, get_item(Cs, 'cs_bill_customer_sk', _V19), get_item(Cs, 'cs_item_sk', _V20), dict_create(_V21, map, [customer_sk-_V19, item_sk-_V20]), _V22 = _V21, dict_create(_V23, map, ['Cs'-Cs]), _V24 = _V22-_V23), _V25),
    group_pairs(_V25, [], _V26),
    findall(_V32, (member(G, _V26), get_item(G, 'key', _V27), get_item(_V27, 'customer_sk', _V28), get_item(G, 'key', _V29), get_item(_V29, 'item_sk', _V30), dict_create(_V31, map, [customer_sk-_V28, item_sk-_V30]), _V32 = _V31), _V33),
    Csci = _V33,
    findall(_V38, (member(S, Ssci), member(C, Csci), get_item(S, 'customer_sk', _V34), get_item(C, 'customer_sk', _V35), get_item(S, 'item_sk', _V36), get_item(C, 'item_sk', _V37), ((_V34 == _V35), (_V36 == _V37)), true, _V38 = 1), _V39),
    count(_V39, _V40),
    Both is _V40,
    findall(_V47, (member(S, Ssci), get_item(S, 'customer_sk', _V42), get_item(C, 'customer_sk', _V43), get_item(S, 'item_sk', _V44), get_item(C, 'item_sk', _V45), (once((member(C, Csci), ((_V42 == _V43), (_V44 == _V45)))) -> _V41 = true ; _V41 = false), (_V41 -> _V46 = false ; _V46 = true), _V46, _V47 = 1), _V48),
    count(_V48, _V49),
    Store_only is _V49,
    findall(_V56, (member(C, Csci), get_item(S, 'customer_sk', _V51), get_item(C, 'customer_sk', _V52), get_item(S, 'item_sk', _V53), get_item(C, 'item_sk', _V54), (once((member(S, Ssci), ((_V51 == _V52), (_V53 == _V54)))) -> _V50 = true ; _V50 = false), (_V50 -> _V55 = false ; _V55 = true), _V55, _V56 = 1), _V57),
    count(_V57, _V58),
    Catalog_only is _V58,
    dict_create(_V59, map, [store_only-Store_only, catalog_only-Catalog_only, store_and_catalog-Both]),
    Result = _V59,
    json_write_dict(current_output, Result), nl,
    true,
    get_item(Result, 'store_only', _V60),
    get_item(Result, 'catalog_only', _V61),
    get_item(Result, 'store_and_catalog', _V62),
    expect((((_V60 == 1), (_V61 == 1)), (_V62 == 1))),
    true.
