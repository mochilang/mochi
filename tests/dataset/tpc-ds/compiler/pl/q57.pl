% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:39:04Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

abs(X, _Res) :-
    ((X >= 0) ->
        _Res = X.
        true
    ; true
    ),
    _Res is (-X).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [item-1, call-1, date-1, price-20]),
    dict_create(_V1, map, [item-1, call-1, date-2, price-20]),
    dict_create(_V2, map, [item-1, call-1, date-3, price-40]),
    Catalog_sales = [_V0, _V1, _V2],
    dict_create(_V3, map, [i_item_sk-1, i_category-"A", i_brand-"B"]),
    Item = [_V3],
    dict_create(_V4, map, [cc_call_center_sk-1, cc_name-"C1"]),
    Call_center = [_V4],
    dict_create(_V5, map, [d_date_sk-1, d_year-2000, d_moy-11]),
    dict_create(_V6, map, [d_date_sk-2, d_year-2000, d_moy-12]),
    dict_create(_V7, map, [d_date_sk-3, d_year-2001, d_moy-1]),
    Date_dim = [_V5, _V6, _V7],
    findall(_V20, (member(Cs, Catalog_sales), member(I, Item), get_item(Cs, 'item', _V8), get_item(I, 'i_item_sk', _V9), (_V8 == _V9), member(D, Date_dim), get_item(Cs, 'date', _V10), get_item(D, 'd_date_sk', _V11), (_V10 == _V11), member(Cc, Call_center), get_item(Cs, 'call', _V12), get_item(Cc, 'cc_call_center_sk', _V13), (_V12 == _V13), true, get_item(I, 'i_category', _V14), get_item(Cc, 'cc_name', _V15), get_item(D, 'd_year', _V16), dict_create(_V17, map, [cat-_V14, call-_V15, year-_V16]), _V18 = _V17, dict_create(_V19, map, ['Cs'-Cs, 'I'-I, 'D'-D, 'Cc'-Cc]), _V20 = _V18-_V19), _V21),
    group_pairs(_V21, [], _V22),
    findall(_V34, (member(G, _V22), get_item(G, 'key', _V23), get_item(_V23, 'cat', _V24), get_item(G, 'key', _V25), get_item(_V25, 'call', _V26), get_item(G, 'key', _V27), get_item(_V27, 'year', _V28), findall(_V30, (member(X, G), true, get_item(X, 'price', _V29), _V30 = _V29), _V31), sum(_V31, _V32), dict_create(_V33, map, [cat-_V24, call-_V26, year-_V28, sum_sales-_V32]), _V34 = _V33), _V35),
    Grouped = _V35,
    findall(_V41, (member(G, Grouped), true, get_item(G, 'cat', _V36), get_item(G, 'call', _V37), dict_create(_V38, map, [cat-_V36, call-_V37]), _V39 = _V38, dict_create(_V40, map, ['G'-G]), _V41 = _V39-_V40), _V42),
    group_pairs(_V42, [], _V43),
    findall(_V53, (member(Gg, _V43), get_item(Gg, 'key', _V44), get_item(_V44, 'cat', _V45), get_item(Gg, 'key', _V46), get_item(_V46, 'call', _V47), findall(_V49, (member(X, Gg), true, get_item(X, 'sum_sales', _V48), _V49 = _V48), _V50), avg(_V50, _V51), dict_create(_V52, map, [cat-_V45, call-_V47, avg_sales-_V51]), _V53 = _V52), _V54),
    Avg_by_year = _V54,
    findall(_V68, (member(G, Grouped), member(A, Avg_by_year), get_item(G, 'cat', _V55), get_item(A, 'cat', _V56), get_item(G, 'call', _V57), get_item(A, 'call', _V58), ((_V55 == _V56), (_V57 == _V58)), get_item(G, 'year', _V59), get_item(A, 'avg_sales', _V60), get_item(G, 'sum_sales', _V61), get_item(A, 'avg_sales', _V62), abs((_V61 - _V62), _V63), get_item(A, 'avg_sales', _V64), (((_V59 == 2001), (_V60 > 0)), ((_V63 / _V64) > 0.1)), get_item(G, 'cat', _V65), get_item(G, 'sum_sales', _V66), dict_create(_V67, map, [i_category-_V65, sum_sales-_V66]), _V68 = _V67), _V69),
    Result = _V69,
    json_write_dict(current_output, Result), nl,
    true,
    expect((Result == [])),
    true.
