% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:36Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [cust-1, state-"CA", amt-40]),
    dict_create(_V1, map, [cust-2, state-"CA", amt-50]),
    dict_create(_V2, map, [cust-3, state-"CA", amt-81]),
    dict_create(_V3, map, [cust-4, state-"TX", amt-30]),
    dict_create(_V4, map, [cust-5, state-"TX", amt-20]),
    Catalog_returns = [_V0, _V1, _V2, _V3, _V4],
    findall(_V8, (member(R, Catalog_returns), true, get_item(R, 'state', _V5), _V6 = _V5, dict_create(_V7, map, ['R'-R]), _V8 = _V6-_V7), _V9),
    group_pairs(_V9, [], _V10),
    findall(_V17, (member(G, _V10), get_item(G, 'key', _V11), findall(_V13, (member(X, G), true, get_item(X, 'amt', _V12), _V13 = _V12), _V14), avg(_V14, _V15), dict_create(_V16, map, [state-_V11, avg_amt-_V15]), _V17 = _V16), _V18),
    Avg_list = _V18,
    findall(_V20, (member(A, Avg_list), get_item(A, 'state', _V19), (_V19 == "CA"), _V20 = A), _V21),
    first(_V21, _V22),
    Avg_state = _V22,
    findall(_V27, (member(R, Catalog_returns), get_item(R, 'state', _V23), get_item(R, 'amt', _V24), get_item(Avg_state, 'avg_amt', _V25), ((_V23 == "CA"), (_V24 > (_V25 * 1.2))), get_item(R, 'amt', _V26), _V27 = _V26), _V28),
    Result_list = _V28,
    first(Result_list, _V29),
    Result = _V29,
    json_write_dict(current_output, Result), nl,
    true,
    expect((Result == 81)),
    true.
