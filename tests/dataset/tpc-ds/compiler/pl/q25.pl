% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:32Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ss_sold_date_sk-1, ss_item_sk-1, ss_store_sk-1, ss_customer_sk-1, ss_net_profit-50, ss_ticket_number-1]),
    dict_create(_V1, map, [ss_sold_date_sk-1, ss_item_sk-2, ss_store_sk-1, ss_customer_sk-2, ss_net_profit-20, ss_ticket_number-2]),
    Store_sales = [_V0, _V1],
    dict_create(_V2, map, [sr_returned_date_sk-2, sr_item_sk-1, sr_customer_sk-1, sr_ticket_number-1, sr_net_loss-10]),
    dict_create(_V3, map, [sr_returned_date_sk-2, sr_item_sk-2, sr_customer_sk-2, sr_ticket_number-2, sr_net_loss-5]),
    Store_returns = [_V2, _V3],
    dict_create(_V4, map, [cs_sold_date_sk-3, cs_item_sk-1, cs_bill_customer_sk-1, cs_net_profit-30]),
    dict_create(_V5, map, [cs_sold_date_sk-3, cs_item_sk-2, cs_bill_customer_sk-2, cs_net_profit-15]),
    Catalog_sales = [_V4, _V5],
    dict_create(_V6, map, [d_date_sk-1, d_moy-4, d_year-2000]),
    dict_create(_V7, map, [d_date_sk-2, d_moy-5, d_year-2000]),
    dict_create(_V8, map, [d_date_sk-3, d_moy-6, d_year-2000]),
    Date_dim = [_V6, _V7, _V8],
    dict_create(_V9, map, [s_store_sk-1, s_store_id-"S1", s_store_name-"Store1"]),
    Store = [_V9],
    dict_create(_V10, map, [i_item_sk-1, i_item_id-"ITEM1", i_item_desc-"Desc1"]),
    dict_create(_V11, map, [i_item_sk-2, i_item_id-"ITEM2", i_item_desc-"Desc2"]),
    Item = [_V10, _V11],
    findall(_V43, (member(Ss, Store_sales), member(Sr, Store_returns), get_item(Ss, 'ss_ticket_number', _V12), get_item(Sr, 'sr_ticket_number', _V13), get_item(Ss, 'ss_item_sk', _V14), get_item(Sr, 'sr_item_sk', _V15), ((_V12 == _V13), (_V14 == _V15)), member(Cs, Catalog_sales), get_item(Sr, 'sr_customer_sk', _V16), get_item(Cs, 'cs_bill_customer_sk', _V17), get_item(Sr, 'sr_item_sk', _V18), get_item(Cs, 'cs_item_sk', _V19), ((_V16 == _V17), (_V18 == _V19)), member(D1, Date_dim), get_item(D1, 'd_date_sk', _V20), get_item(Ss, 'ss_sold_date_sk', _V21), (_V20 == _V21), member(D2, Date_dim), get_item(D2, 'd_date_sk', _V22), get_item(Sr, 'sr_returned_date_sk', _V23), (_V22 == _V23), member(D3, Date_dim), get_item(D3, 'd_date_sk', _V24), get_item(Cs, 'cs_sold_date_sk', _V25), (_V24 == _V25), member(S, Store), get_item(S, 's_store_sk', _V26), get_item(Ss, 'ss_store_sk', _V27), (_V26 == _V27), member(I, Item), get_item(I, 'i_item_sk', _V28), get_item(Ss, 'ss_item_sk', _V29), (_V28 == _V29), get_item(D1, 'd_moy', _V30), get_item(D1, 'd_year', _V31), get_item(D2, 'd_moy', _V32), get_item(D2, 'd_moy', _V33), get_item(D3, 'd_moy', _V34), get_item(D3, 'd_moy', _V35), ((((((_V30 == 4), (_V31 == 2000)), (_V32 >= 4)), (_V33 =< 10)), (_V34 >= 4)), (_V35 =< 10)), get_item(I, 'i_item_id', _V36), get_item(I, 'i_item_desc', _V37), get_item(S, 's_store_id', _V38), get_item(S, 's_store_name', _V39), dict_create(_V40, map, [item_id-_V36, item_desc-_V37, s_store_id-_V38, s_store_name-_V39]), _V41 = _V40, dict_create(_V42, map, ['Ss'-Ss, 'Sr'-Sr, 'Cs'-Cs, 'D1'-D1, 'D2'-D2, 'D3'-D3, 'S'-S, 'I'-I]), _V43 = _V41-_V42), _V44),
    group_pairs(_V44, [], _V45),
    findall(_V67, (member(G, _V45), get_item(G, 'key', _V46), get_item(_V46, 'item_id', _V47), get_item(G, 'key', _V48), get_item(_V48, 'item_desc', _V49), get_item(G, 'key', _V50), get_item(_V50, 's_store_id', _V51), get_item(G, 'key', _V52), get_item(_V52, 's_store_name', _V53), findall(_V55, (member(X, G), true, get_item(X, 'ss_net_profit', _V54), _V55 = _V54), _V56), sum(_V56, _V57), findall(_V59, (member(X, G), true, get_item(X, 'sr_net_loss', _V58), _V59 = _V58), _V60), sum(_V60, _V61), findall(_V63, (member(X, G), true, get_item(X, 'cs_net_profit', _V62), _V63 = _V62), _V64), sum(_V64, _V65), dict_create(_V66, map, [i_item_id-_V47, i_item_desc-_V49, s_store_id-_V51, s_store_name-_V53, store_sales_profit-_V57, store_returns_loss-_V61, catalog_sales_profit-_V65]), _V67 = _V66), _V68),
    Result = _V68,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V69, map, [i_item_id-"ITEM1", i_item_desc-"Desc1", s_store_id-"S1", s_store_name-"Store1", store_sales_profit-50, store_returns_loss-10, catalog_sales_profit-30]),
    dict_create(_V70, map, [i_item_id-"ITEM2", i_item_desc-"Desc2", s_store_id-"S1", s_store_name-"Store1", store_sales_profit-20, store_returns_loss-5, catalog_sales_profit-15]),
    expect((Result == [_V69, _V70])),
    true.
