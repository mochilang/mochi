% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:39:02Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ss_quantity-5, ss_ext_discount_amt-5, ss_net_paid-7]),
    dict_create(_V1, map, [ss_quantity-30, ss_ext_discount_amt-10, ss_net_paid-15]),
    dict_create(_V2, map, [ss_quantity-50, ss_ext_discount_amt-20, ss_net_paid-30]),
    dict_create(_V3, map, [ss_quantity-70, ss_ext_discount_amt-25, ss_net_paid-35]),
    dict_create(_V4, map, [ss_quantity-90, ss_ext_discount_amt-40, ss_net_paid-50]),
    Store_sales = [_V0, _V1, _V2, _V3, _V4],
    dict_create(_V5, map, [r_reason_sk-1]),
    Reason = [_V5],
    findall(_V8, (member(S, Store_sales), get_item(S, 'ss_quantity', _V6), get_item(S, 'ss_quantity', _V7), ((_V6 >= 1), (_V7 =< 20)), _V8 = S), _V9),
    count(_V9, _V10),
    findall(_V14, (member(S, Store_sales), get_item(S, 'ss_quantity', _V11), get_item(S, 'ss_quantity', _V12), ((_V11 >= 1), (_V12 =< 20)), get_item(S, 'ss_ext_discount_amt', _V13), _V14 = _V13), _V15),
    avg(_V15, _V16),
    findall(_V20, (member(S, Store_sales), get_item(S, 'ss_quantity', _V17), get_item(S, 'ss_quantity', _V18), ((_V17 >= 1), (_V18 =< 20)), get_item(S, 'ss_net_paid', _V19), _V20 = _V19), _V21),
    avg(_V21, _V22),
    ((_V10 > 10) -> _V23 = _V16 ; _V23 = _V22),
    Bucket1 is _V23,
    findall(_V26, (member(S, Store_sales), get_item(S, 'ss_quantity', _V24), get_item(S, 'ss_quantity', _V25), ((_V24 >= 21), (_V25 =< 40)), _V26 = S), _V27),
    count(_V27, _V28),
    findall(_V32, (member(S, Store_sales), get_item(S, 'ss_quantity', _V29), get_item(S, 'ss_quantity', _V30), ((_V29 >= 21), (_V30 =< 40)), get_item(S, 'ss_ext_discount_amt', _V31), _V32 = _V31), _V33),
    avg(_V33, _V34),
    findall(_V38, (member(S, Store_sales), get_item(S, 'ss_quantity', _V35), get_item(S, 'ss_quantity', _V36), ((_V35 >= 21), (_V36 =< 40)), get_item(S, 'ss_net_paid', _V37), _V38 = _V37), _V39),
    avg(_V39, _V40),
    ((_V28 > 20) -> _V41 = _V34 ; _V41 = _V40),
    Bucket2 is _V41,
    findall(_V44, (member(S, Store_sales), get_item(S, 'ss_quantity', _V42), get_item(S, 'ss_quantity', _V43), ((_V42 >= 41), (_V43 =< 60)), _V44 = S), _V45),
    count(_V45, _V46),
    findall(_V50, (member(S, Store_sales), get_item(S, 'ss_quantity', _V47), get_item(S, 'ss_quantity', _V48), ((_V47 >= 41), (_V48 =< 60)), get_item(S, 'ss_ext_discount_amt', _V49), _V50 = _V49), _V51),
    avg(_V51, _V52),
    findall(_V56, (member(S, Store_sales), get_item(S, 'ss_quantity', _V53), get_item(S, 'ss_quantity', _V54), ((_V53 >= 41), (_V54 =< 60)), get_item(S, 'ss_net_paid', _V55), _V56 = _V55), _V57),
    avg(_V57, _V58),
    ((_V46 > 30) -> _V59 = _V52 ; _V59 = _V58),
    Bucket3 is _V59,
    findall(_V62, (member(S, Store_sales), get_item(S, 'ss_quantity', _V60), get_item(S, 'ss_quantity', _V61), ((_V60 >= 61), (_V61 =< 80)), _V62 = S), _V63),
    count(_V63, _V64),
    findall(_V68, (member(S, Store_sales), get_item(S, 'ss_quantity', _V65), get_item(S, 'ss_quantity', _V66), ((_V65 >= 61), (_V66 =< 80)), get_item(S, 'ss_ext_discount_amt', _V67), _V68 = _V67), _V69),
    avg(_V69, _V70),
    findall(_V74, (member(S, Store_sales), get_item(S, 'ss_quantity', _V71), get_item(S, 'ss_quantity', _V72), ((_V71 >= 61), (_V72 =< 80)), get_item(S, 'ss_net_paid', _V73), _V74 = _V73), _V75),
    avg(_V75, _V76),
    ((_V64 > 40) -> _V77 = _V70 ; _V77 = _V76),
    Bucket4 is _V77,
    findall(_V80, (member(S, Store_sales), get_item(S, 'ss_quantity', _V78), get_item(S, 'ss_quantity', _V79), ((_V78 >= 81), (_V79 =< 100)), _V80 = S), _V81),
    count(_V81, _V82),
    findall(_V86, (member(S, Store_sales), get_item(S, 'ss_quantity', _V83), get_item(S, 'ss_quantity', _V84), ((_V83 >= 81), (_V84 =< 100)), get_item(S, 'ss_ext_discount_amt', _V85), _V86 = _V85), _V87),
    avg(_V87, _V88),
    findall(_V92, (member(S, Store_sales), get_item(S, 'ss_quantity', _V89), get_item(S, 'ss_quantity', _V90), ((_V89 >= 81), (_V90 =< 100)), get_item(S, 'ss_net_paid', _V91), _V92 = _V91), _V93),
    avg(_V93, _V94),
    ((_V82 > 50) -> _V95 = _V88 ; _V95 = _V94),
    Bucket5 is _V95,
    findall(_V98, (member(R, Reason), get_item(R, 'r_reason_sk', _V96), (_V96 == 1), dict_create(_V97, map, [bucket1-Bucket1, bucket2-Bucket2, bucket3-Bucket3, bucket4-Bucket4, bucket5-Bucket5]), _V98 = _V97), _V99),
    Result = _V99,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V100, map, [bucket1-7, bucket2-15, bucket3-30, bucket4-35, bucket5-50]),
    expect((Result == [_V100])),
    true.
