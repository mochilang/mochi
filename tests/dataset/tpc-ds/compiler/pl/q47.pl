% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:39:03Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

abs(X, _Res) :-
    ((X >= 0) ->
        _Res = X.
        true
    ;
        _Res is (-X).
        true
    ),

:- initialization(main, main).
main :-
    dict_create(_V0, map, [d_year-2020, item-"A", avg_monthly_sales-100, sum_sales-120]),
    dict_create(_V1, map, [d_year-2020, item-"B", avg_monthly_sales-80, sum_sales-70]),
    dict_create(_V2, map, [d_year-2019, item-"C", avg_monthly_sales-50, sum_sales-60]),
    V2 = [_V0, _V1, _V2],
    Year is 2020,
    Orderby = "item",
    findall(_V16, (member(V, V2), get_item(V, 'd_year', _V3), get_item(V, 'avg_monthly_sales', _V4), get_item(V, 'sum_sales', _V5), get_item(V, 'avg_monthly_sales', _V6), get_item(V, 'sum_sales', _V7), get_item(V, 'avg_monthly_sales', _V8), abs((_V7 - _V8), _V9), get_item(V, 'avg_monthly_sales', _V10), ((((_V3 >= (Year - 1)), (_V4 > 0)), (_V5 > _V6)), ((_V9 / _V10) > 0.1)), get_item(V, 'd_year', _V11), get_item(V, 'item', _V12), get_item(V, 'avg_monthly_sales', _V13), get_item(V, 'sum_sales', _V14), dict_create(_V15, map, [d_year-_V11, item-_V12, avg_monthly_sales-_V13, sum_sales-_V14]), _V16 = _V15), _V17),
    Result = _V17,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V18, map, [d_year-2019, item-"C", avg_monthly_sales-50, sum_sales-60]),
    dict_create(_V19, map, [d_year-2020, item-"A", avg_monthly_sales-100, sum_sales-120]),
    expect((Result == [_V18, _V19])),
    true.
