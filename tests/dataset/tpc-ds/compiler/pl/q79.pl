% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:36Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [d_date_sk-1, d_dow-1, d_year-1999]),
    Date_dim = [_V0],
    dict_create(_V1, map, [s_store_sk-1, s_city-"CityA", s_number_employees-250]),
    Store = [_V1],
    dict_create(_V2, map, [hd_demo_sk-1, hd_dep_count-2, hd_vehicle_count-1]),
    Household_demographics = [_V2],
    dict_create(_V3, map, [ss_sold_date_sk-1, ss_store_sk-1, ss_ticket_number-1, ss_customer_sk-1, ss_hdemo_sk-1, ss_coupon_amt-5, ss_net_profit-10]),
    Store_sales = [_V3],
    dict_create(_V4, map, [c_customer_sk-1, c_last_name-"Smith", c_first_name-"Alice"]),
    Customer = [_V4],
    findall(_V25, (member(Ss, Store_sales), member(D, Date_dim), get_item(D, 'd_date_sk', _V5), get_item(Ss, 'ss_sold_date_sk', _V6), (_V5 == _V6), member(S, Store), get_item(S, 's_store_sk', _V7), get_item(Ss, 'ss_store_sk', _V8), (_V7 == _V8), member(Hd, Household_demographics), get_item(Hd, 'hd_demo_sk', _V9), get_item(Ss, 'ss_hdemo_sk', _V10), (_V9 == _V10), get_item(Hd, 'hd_dep_count', _V11), get_item(Hd, 'hd_vehicle_count', _V12), get_item(D, 'd_dow', _V13), get_item(D, 'd_year', _V14), get_item(D, 'd_year', _V15), get_item(D, 'd_year', _V16), get_item(S, 's_number_employees', _V17), get_item(S, 's_number_employees', _V18), ((((((_V11 == 2) ; (_V12 > 1)), (_V13 == 1)), (((_V14 == 1998) ; (_V15 == 1999)) ; (_V16 == 2000))), (_V17 >= 200)), (_V18 =< 295)), get_item(Ss, 'ss_ticket_number', _V19), get_item(Ss, 'ss_customer_sk', _V20), get_item(S, 's_city', _V21), dict_create(_V22, map, [ticket-_V19, customer_sk-_V20, city-_V21]), _V23 = _V22, dict_create(_V24, map, ['Ss'-Ss, 'D'-D, 'S'-S, 'Hd'-Hd]), _V25 = _V23-_V24), _V26),
    group_pairs(_V26, [], _V27),
    findall(_V40, (member(G, _V27), get_item(G, 'key', _V28), findall(_V31, (member(X, G), true, get_item(X, 'ss', _V29), get_item(_V29, 'ss_coupon_amt', _V30), _V31 = _V30), _V32), sum(_V32, _V33), findall(_V36, (member(X, G), true, get_item(X, 'ss', _V34), get_item(_V34, 'ss_net_profit', _V35), _V36 = _V35), _V37), sum(_V37, _V38), dict_create(_V39, map, [key-_V28, amt-_V33, profit-_V38]), _V40 = _V39), _V41),
    Agg = _V41,
    findall(_V54, (member(A, Agg), member(C, Customer), get_item(C, 'c_customer_sk', _V42), get_item(A, 'key', _V43), get_item(_V43, 'customer_sk', _V44), (_V42 == _V44), true, get_item(C, 'c_last_name', _V45), get_item(C, 'c_first_name', _V46), get_item(A, 'key', _V47), get_item(_V47, 'city', _V48), get_item(A, 'key', _V49), get_item(_V49, 'ticket', _V50), get_item(A, 'amt', _V51), get_item(A, 'profit', _V52), dict_create(_V53, map, [c_last_name-_V45, c_first_name-_V46, s_city-_V48, ss_ticket_number-_V50, amt-_V51, profit-_V52]), _V54 = _V53), _V55),
    Result = _V55,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V56, map, [c_last_name-"Smith", c_first_name-"Alice", s_city-"CityA", ss_ticket_number-1, amt-5, profit-10]),
    expect((Result == [_V56])),
    true.
