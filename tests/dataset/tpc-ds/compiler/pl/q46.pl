% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:33Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

contains(Container, Item, Res) :-
    is_dict(Container), !, (string(Item) -> atom_string(A, Item) ; A = Item), (get_dict(A, Container, _) -> Res = true ; Res = false).
contains(List, Item, Res) :-
    string(List), !, (sub_string(List, _, _, _, Item) -> Res = true ; Res = false).
contains(List, Item, Res) :- (member(Item, List) -> Res = true ; Res = false).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ss_ticket_number-1, ss_customer_sk-1, ss_addr_sk-1, ss_hdemo_sk-1, ss_store_sk-1, ss_sold_date_sk-1, ss_coupon_amt-5, ss_net_profit-20]),
    Store_sales = [_V0],
    dict_create(_V1, map, [d_date_sk-1, d_dow-6, d_year-2020]),
    Date_dim = [_V1],
    dict_create(_V2, map, [s_store_sk-1, s_city-"CityA"]),
    Store = [_V2],
    dict_create(_V3, map, [hd_demo_sk-1, hd_dep_count-2, hd_vehicle_count-0]),
    Household_demographics = [_V3],
    dict_create(_V4, map, [ca_address_sk-1, ca_city-"Portland"]),
    dict_create(_V5, map, [ca_address_sk-2, ca_city-"Seattle"]),
    Customer_address = [_V4, _V5],
    dict_create(_V6, map, [c_customer_sk-1, c_last_name-"Doe", c_first_name-"John", c_current_addr_sk-2]),
    Customer = [_V6],
    Depcnt is 2,
    Vehcnt is 0,
    Year is 2020,
    Cities = ["CityA"],
    findall(_V28, (member(Ss, Store_sales), member(D, Date_dim), get_item(Ss, 'ss_sold_date_sk', _V7), get_item(D, 'd_date_sk', _V8), (_V7 == _V8), member(S, Store), get_item(Ss, 'ss_store_sk', _V9), get_item(S, 's_store_sk', _V10), (_V9 == _V10), member(Hd, Household_demographics), get_item(Ss, 'ss_hdemo_sk', _V11), get_item(Hd, 'hd_demo_sk', _V12), (_V11 == _V12), member(Ca, Customer_address), get_item(Ss, 'ss_addr_sk', _V13), get_item(Ca, 'ca_address_sk', _V14), (_V13 == _V14), get_item(Hd, 'hd_dep_count', _V15), get_item(Hd, 'hd_vehicle_count', _V16), get_item(D, 'd_dow', _V17), get_item(D, 'd_year', _V18), get_item(S, 's_city', _V19), contains([6, 0], _V17, _V20), contains(Cities, _V19, _V21), (((((_V15 == Depcnt) ; (_V16 == Vehcnt)), _V20), (_V18 == Year)), _V21), get_item(Ss, 'ss_ticket_number', _V22), get_item(Ss, 'ss_customer_sk', _V23), get_item(Ca, 'ca_city', _V24), dict_create(_V25, map, [ss_ticket_number-_V22, ss_customer_sk-_V23, ca_city-_V24]), _V26 = _V25, dict_create(_V27, map, ['Ss'-Ss, 'D'-D, 'S'-S, 'Hd'-Hd, 'Ca'-Ca]), _V28 = _V26-_V27), _V29),
    group_pairs(_V29, [], _V30),
    findall(_V48, (member(G, _V30), get_item(G, 'key', _V31), get_item(_V31, 'ss_ticket_number', _V32), get_item(G, 'key', _V33), get_item(_V33, 'ss_customer_sk', _V34), get_item(G, 'key', _V35), get_item(_V35, 'ca_city', _V36), findall(_V39, (member(X, G), true, get_item(X, 'ss', _V37), get_item(_V37, 'ss_coupon_amt', _V38), _V39 = _V38), _V40), sum(_V40, _V41), findall(_V44, (member(X, G), true, get_item(X, 'ss', _V42), get_item(_V42, 'ss_net_profit', _V43), _V44 = _V43), _V45), sum(_V45, _V46), dict_create(_V47, map, [ss_ticket_number-_V32, ss_customer_sk-_V34, bought_city-_V36, amt-_V41, profit-_V46]), _V48 = _V47), _V49),
    Dn = _V49,
    findall(_V64, (member(Dnrec, Dn), member(C, Customer), get_item(Dnrec, 'ss_customer_sk', _V50), get_item(C, 'c_customer_sk', _V51), (_V50 == _V51), member(Current_addr, Customer_address), get_item(C, 'c_current_addr_sk', _V52), get_item(Current_addr, 'ca_address_sk', _V53), (_V52 == _V53), get_item(Current_addr, 'ca_city', _V54), get_item(Dnrec, 'bought_city', _V55), (_V54 \== _V55), get_item(C, 'c_last_name', _V56), get_item(C, 'c_first_name', _V57), get_item(Current_addr, 'ca_city', _V58), get_item(Dnrec, 'bought_city', _V59), get_item(Dnrec, 'ss_ticket_number', _V60), get_item(Dnrec, 'amt', _V61), get_item(Dnrec, 'profit', _V62), dict_create(_V63, map, [c_last_name-_V56, c_first_name-_V57, ca_city-_V58, bought_city-_V59, ss_ticket_number-_V60, amt-_V61, profit-_V62]), _V64 = _V63), _V65),
    Base = _V65,
    Result = Base,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V66, map, [c_last_name-"Doe", c_first_name-"John", ca_city-"Seattle", bought_city-"Portland", ss_ticket_number-1, amt-5, profit-20]),
    expect((Result == [_V66])),
    true.
