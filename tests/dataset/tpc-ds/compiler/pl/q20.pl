% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:32Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

contains(Container, Item, Res) :-
    is_dict(Container), !, (string(Item) -> atom_string(A, Item) ; A = Item), (get_dict(A, Container, _) -> Res = true ; Res = false).
contains(List, Item, Res) :-
    string(List), !, (sub_string(List, _, _, _, Item) -> Res = true ; Res = false).
contains(List, Item, Res) :- (member(Item, List) -> Res = true ; Res = false).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [cs_item_sk-1, cs_sold_date_sk-1, cs_ext_sales_price-100]),
    dict_create(_V1, map, [cs_item_sk-1, cs_sold_date_sk-1, cs_ext_sales_price-200]),
    dict_create(_V2, map, [cs_item_sk-2, cs_sold_date_sk-1, cs_ext_sales_price-150]),
    dict_create(_V3, map, [cs_item_sk-1, cs_sold_date_sk-2, cs_ext_sales_price-300]),
    dict_create(_V4, map, [cs_item_sk-2, cs_sold_date_sk-2, cs_ext_sales_price-150]),
    dict_create(_V5, map, [cs_item_sk-3, cs_sold_date_sk-1, cs_ext_sales_price-50]),
    Catalog_sales = [_V0, _V1, _V2, _V3, _V4, _V5],
    dict_create(_V6, map, [i_item_sk-1, i_item_id-"ITEM1", i_item_desc-"Item One", i_category-"A", i_class-"X", i_current_price-10]),
    dict_create(_V7, map, [i_item_sk-2, i_item_id-"ITEM2", i_item_desc-"Item Two", i_category-"A", i_class-"X", i_current_price-20]),
    dict_create(_V8, map, [i_item_sk-3, i_item_id-"ITEM3", i_item_desc-"Item Three", i_category-"D", i_class-"Y", i_current_price-15]),
    Item = [_V6, _V7, _V8],
    dict_create(_V9, map, [d_date_sk-1, d_date-"2000-02-10"]),
    dict_create(_V10, map, [d_date_sk-2, d_date-"2000-02-20"]),
    Date_dim = [_V9, _V10],
    findall(_V27, (member(Cs, Catalog_sales), member(I, Item), get_item(Cs, 'cs_item_sk', _V11), get_item(I, 'i_item_sk', _V12), (_V11 == _V12), member(D, Date_dim), get_item(Cs, 'cs_sold_date_sk', _V13), get_item(D, 'd_date_sk', _V14), (_V13 == _V14), get_item(I, 'i_category', _V15), get_item(D, 'd_date', _V16), get_item(D, 'd_date', _V17), contains(["A", "B", "C"], _V15, _V18), ((_V18, (_V16 >= "2000-02-01")), (_V17 =< "2000-03-02")), get_item(I, 'i_item_id', _V19), get_item(I, 'i_item_desc', _V20), get_item(I, 'i_category', _V21), get_item(I, 'i_class', _V22), get_item(I, 'i_current_price', _V23), dict_create(_V24, map, [id-_V19, desc-_V20, cat-_V21, class-_V22, price-_V23]), _V25 = _V24, dict_create(_V26, map, ['Cs'-Cs, 'I'-I, 'D'-D]), _V27 = _V25-_V26), _V28),
    group_pairs(_V28, [], _V29),
    findall(_V45, (member(G, _V29), get_item(G, 'key', _V30), get_item(_V30, 'id', _V31), get_item(G, 'key', _V32), get_item(_V32, 'desc', _V33), get_item(G, 'key', _V34), get_item(_V34, 'cat', _V35), get_item(G, 'key', _V36), get_item(_V36, 'class', _V37), get_item(G, 'key', _V38), get_item(_V38, 'price', _V39), findall(_V41, (member(X, G), true, get_item(X, 'cs_ext_sales_price', _V40), _V41 = _V40), _V42), sum(_V42, _V43), dict_create(_V44, map, [i_item_id-_V31, i_item_desc-_V33, i_category-_V35, i_class-_V37, i_current_price-_V39, itemrevenue-_V43]), _V45 = _V44), _V46),
    Filtered = _V46,
    findall(_V50, (member(F, Filtered), true, get_item(F, 'i_class', _V47), _V48 = _V47, dict_create(_V49, map, ['F'-F]), _V50 = _V48-_V49), _V51),
    group_pairs(_V51, [], _V52),
    findall(_V59, (member(G, _V52), get_item(G, 'key', _V53), findall(_V55, (member(X, G), true, get_item(X, 'itemrevenue', _V54), _V55 = _V54), _V56), sum(_V56, _V57), dict_create(_V58, map, [class-_V53, total-_V57]), _V59 = _V58), _V60),
    Class_totals = _V60,
    findall(_V72, (member(F, Filtered), member(T, Class_totals), get_item(F, 'i_class', _V61), get_item(T, 'class', _V62), (_V61 == _V62), true, get_item(F, 'i_item_id', _V63), get_item(F, 'i_item_desc', _V64), get_item(F, 'i_category', _V65), get_item(F, 'i_class', _V66), get_item(F, 'i_current_price', _V67), get_item(F, 'itemrevenue', _V68), get_item(F, 'itemrevenue', _V69), get_item(T, 'total', _V70), dict_create(_V71, map, [i_item_id-_V63, i_item_desc-_V64, i_category-_V65, i_class-_V66, i_current_price-_V67, itemrevenue-_V68, revenueratio-((_V69 * 100) / _V70)]), _V72 = _V71), _V73),
    Result = _V73,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V74, map, [i_item_id-"ITEM1", i_item_desc-"Item One", i_category-"A", i_class-"X", i_current_price-10, itemrevenue-600, revenueratio-66.66666666666667]),
    dict_create(_V75, map, [i_item_id-"ITEM2", i_item_desc-"Item Two", i_category-"A", i_class-"X", i_current_price-20, itemrevenue-300, revenueratio-33.333333333333336]),
    expect((Result == [_V74, _V75])),
    true.
