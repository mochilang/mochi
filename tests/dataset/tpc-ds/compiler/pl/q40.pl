% Generated by Mochi compiler v0.10.26 on 1970-01-01T00:00:00Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [order-1, item_sk-1, warehouse_sk-1, date_sk-1, price-100]),
    dict_create(_V1, map, [order-2, item_sk-1, warehouse_sk-1, date_sk-2, price-150]),
    Catalog_sales = [_V0, _V1],
    dict_create(_V2, map, [order-2, item_sk-1, refunded-150]),
    Catalog_returns = [_V2],
    dict_create(_V3, map, [item_sk-1, item_id-"I1", current_price-1.2]),
    Item = [_V3],
    dict_create(_V4, map, [warehouse_sk-1, state-"CA"]),
    Warehouse = [_V4],
    dict_create(_V5, map, [date_sk-1, date-"2020-01-10"]),
    dict_create(_V6, map, [date_sk-2, date-"2020-01-20"]),
    Date_dim = [_V5, _V6],
    Sales_date = "2020-01-15",
    findall(_V27, (member(Cs, Catalog_sales), findall(Cr, (member(Cr, Catalog_returns), get_item(Cs, 'order', _V7), get_item(Cr, 'order', _V8), get_item(Cs, 'item_sk', _V9), get_item(Cr, 'item_sk', _V10), ((_V7 == _V8), (_V9 == _V10))), _V11), (_V11 = [] -> Cr = nil; member(Cr, _V11)), member(W, Warehouse), get_item(Cs, 'warehouse_sk', _V12), get_item(W, 'warehouse_sk', _V13), (_V12 == _V13), member(I, Item), get_item(Cs, 'item_sk', _V14), get_item(I, 'item_sk', _V15), (_V14 == _V15), member(D, Date_dim), get_item(Cs, 'date_sk', _V16), get_item(D, 'date_sk', _V17), (_V16 == _V17), get_item(I, 'current_price', _V18), get_item(I, 'current_price', _V19), ((_V18 >= 0.99), (_V19 =< 1.49)), get_item(W, 'state', _V20), get_item(I, 'item_id', _V21), get_item(D, 'date', _V22), get_item(Cs, 'price', _V23), get_item(Cr, 'refunded', _V24), ((Cr == null) -> _V25 = 0 ; _V25 = _V24), dict_create(_V26, map, [w_state-_V20, i_item_id-_V21, sold_date-_V22, net-(_V23 - _V25)]), _V27 = _V26), _V28),
    Records = _V28,
    findall(_V34, (member(R, Records), true, get_item(R, 'w_state', _V29), get_item(R, 'i_item_id', _V30), dict_create(_V31, map, [w_state-_V29, i_item_id-_V30]), _V32 = _V31, dict_create(_V33, map, ['R'-R]), _V34 = _V32-_V33), _V35),
    group_pairs(_V35, [], _V36),
    findall(_V54, (member(G, _V36), get_item(G, 'key', _V37), get_item(_V37, 'w_state', _V38), get_item(G, 'key', _V39), get_item(_V39, 'i_item_id', _V40), findall(_V44, (member(X, G), true, get_item(X, 'sold_date', _V41), get_item(X, 'net', _V42), ((_V41 < Sales_date) -> _V43 = _V42 ; _V43 = 0), _V44 = _V43), _V45), sum(_V45, _V46), findall(_V50, (member(X, G), true, get_item(X, 'sold_date', _V47), get_item(X, 'net', _V48), ((_V47 >= Sales_date) -> _V49 = _V48 ; _V49 = 0), _V50 = _V49), _V51), sum(_V51, _V52), dict_create(_V53, map, [w_state-_V38, i_item_id-_V40, sales_before-_V46, sales_after-_V52]), _V54 = _V53), _V55),
    Result = _V55,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V56, map, [w_state-"CA", i_item_id-"I1", sales_before-100, sales_after-0]),
    expect((Result == [_V56])),
    true.
