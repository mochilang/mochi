% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:32Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

contains(Container, Item, Res) :-
    is_dict(Container), !, (string(Item) -> atom_string(A, Item) ; A = Item), (get_dict(A, Container, _) -> Res = true ; Res = false).
contains(List, Item, Res) :-
    string(List), !, (sub_string(List, _, _, _, Item) -> Res = true ; Res = false).
contains(List, Item, Res) :- (member(Item, List) -> Res = true ; Res = false).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ss_sold_date_sk-1, ss_item_sk-1, ss_customer_sk-1, ss_ticket_number-1, ss_quantity-10, ss_store_sk-1]),
    Store_sales = [_V0],
    dict_create(_V1, map, [sr_returned_date_sk-2, sr_customer_sk-1, sr_item_sk-1, sr_ticket_number-1, sr_return_quantity-2]),
    Store_returns = [_V1],
    dict_create(_V2, map, [cs_sold_date_sk-3, cs_item_sk-1, cs_bill_customer_sk-1, cs_quantity-5]),
    Catalog_sales = [_V2],
    dict_create(_V3, map, [d_date_sk-1, d_quarter_name-"1998Q1"]),
    dict_create(_V4, map, [d_date_sk-2, d_quarter_name-"1998Q2"]),
    dict_create(_V5, map, [d_date_sk-3, d_quarter_name-"1998Q3"]),
    Date_dim = [_V3, _V4, _V5],
    dict_create(_V6, map, [s_store_sk-1, s_state-"CA"]),
    Store = [_V6],
    dict_create(_V7, map, [i_item_sk-1, i_item_id-"I1", i_item_desc-"Item 1"]),
    Item = [_V7],
    findall(_V40, (member(Ss, Store_sales), member(Sr, Store_returns), get_item(Ss, 'ss_customer_sk', _V8), get_item(Sr, 'sr_customer_sk', _V9), get_item(Ss, 'ss_item_sk', _V10), get_item(Sr, 'sr_item_sk', _V11), get_item(Ss, 'ss_ticket_number', _V12), get_item(Sr, 'sr_ticket_number', _V13), (((_V8 == _V9), (_V10 == _V11)), (_V12 == _V13)), member(Cs, Catalog_sales), get_item(Sr, 'sr_customer_sk', _V14), get_item(Cs, 'cs_bill_customer_sk', _V15), get_item(Sr, 'sr_item_sk', _V16), get_item(Cs, 'cs_item_sk', _V17), ((_V14 == _V15), (_V16 == _V17)), member(D1, Date_dim), get_item(Ss, 'ss_sold_date_sk', _V18), get_item(D1, 'd_date_sk', _V19), get_item(D1, 'd_quarter_name', _V20), ((_V18 == _V19), (_V20 == "1998Q1")), member(D2, Date_dim), get_item(Sr, 'sr_returned_date_sk', _V21), get_item(D2, 'd_date_sk', _V22), get_item(D2, 'd_quarter_name', _V23), contains(["1998Q1", "1998Q2", "1998Q3"], _V23, _V24), ((_V21 == _V22), _V24), member(D3, Date_dim), get_item(Cs, 'cs_sold_date_sk', _V25), get_item(D3, 'd_date_sk', _V26), get_item(D3, 'd_quarter_name', _V27), contains(["1998Q1", "1998Q2", "1998Q3"], _V27, _V28), ((_V25 == _V26), _V28), member(S, Store), get_item(Ss, 'ss_store_sk', _V29), get_item(S, 's_store_sk', _V30), (_V29 == _V30), member(I, Item), get_item(Ss, 'ss_item_sk', _V31), get_item(I, 'i_item_sk', _V32), (_V31 == _V32), true, get_item(Ss, 'ss_quantity', _V33), get_item(Sr, 'sr_return_quantity', _V34), get_item(Cs, 'cs_quantity', _V35), get_item(I, 'i_item_id', _V36), get_item(I, 'i_item_desc', _V37), get_item(S, 's_state', _V38), dict_create(_V39, map, [qty-_V33, ret-_V34, csq-_V35, i_item_id-_V36, i_item_desc-_V37, s_state-_V38]), _V40 = _V39), _V41),
    Joined = _V41,
    findall(_V48, (member(J, Joined), true, get_item(J, 'i_item_id', _V42), get_item(J, 'i_item_desc', _V43), get_item(J, 's_state', _V44), dict_create(_V45, map, [i_item_id-_V42, i_item_desc-_V43, s_state-_V44]), _V46 = _V45, dict_create(_V47, map, ['J'-J]), _V48 = _V46-_V47), _V49),
    group_pairs(_V49, [], _V50),
    findall(_V79, (member(G, _V50), get_item(G, 'key', _V51), get_item(_V51, 'i_item_id', _V52), get_item(G, 'key', _V53), get_item(_V53, 'i_item_desc', _V54), get_item(G, 'key', _V55), get_item(_V55, 's_state', _V56), findall(_V57, (member(_, G), true, _V57 = _), _V58), count(_V58, _V59), findall(_V61, (member(X, G), true, get_item(X, 'qty', _V60), _V61 = _V60), _V62), avg(_V62, _V63), findall(_V64, (member(_, G), true, _V64 = _), _V65), count(_V65, _V66), findall(_V68, (member(X, G), true, get_item(X, 'ret', _V67), _V68 = _V67), _V69), avg(_V69, _V70), findall(_V71, (member(_, G), true, _V71 = _), _V72), count(_V72, _V73), findall(_V75, (member(X, G), true, get_item(X, 'csq', _V74), _V75 = _V74), _V76), avg(_V76, _V77), dict_create(_V78, map, [i_item_id-_V52, i_item_desc-_V54, s_state-_V56, store_sales_quantitycount-_V59, store_sales_quantityave-_V63, store_sales_quantitystdev-0, store_sales_quantitycov-0, store_returns_quantitycount-_V66, store_returns_quantityave-_V70, store_returns_quantitystdev-0, store_returns_quantitycov-0, catalog_sales_quantitycount-_V73, catalog_sales_quantityave-_V77, catalog_sales_quantitystdev-0, catalog_sales_quantitycov-0]), _V79 = _V78), _V80),
    Result = _V80,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V81, map, [i_item_id-"I1", i_item_desc-"Item 1", s_state-"CA", store_sales_quantitycount-1, store_sales_quantityave-10, store_sales_quantitystdev-0, store_sales_quantitycov-0, store_returns_quantitycount-1, store_returns_quantityave-2, store_returns_quantitystdev-0, store_returns_quantitycov-0, catalog_sales_quantitycount-1, catalog_sales_quantityave-5, catalog_sales_quantitystdev-0, catalog_sales_quantitycov-0]),
    expect((Result == [_V81])),
    true.
