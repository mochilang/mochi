% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:33Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

len_any(Value, Len) :-
    string(Value), !, string_length(Value, Len).
len_any(Value, Len) :-
    is_dict(Value), !, dict_pairs(Value, _, Pairs), length(Pairs, Len).
len_any(Value, Len) :- length(Value, Len).

union(A, B, R) :- append(A, B, C), list_to_set(C, R).
except([], _, []).
except([H|T], B, R) :- memberchk(H, B), !, except(T, B, R).
except([H|T], B, [H|R]) :- except(T, B, R).

intersect(A, B, R) :- intersect(A, B, [], R).
intersect([], _, Acc, R) :- reverse(Acc, R).
intersect([H|T], B, Acc, R) :- memberchk(H, B), \+ memberchk(H, Acc), !, intersect(T, B, [H|Acc], R).
intersect([_|T], B, Acc, R) :- intersect(T, B, Acc, R).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

distinct(Xs, _Res) :-
    nb_setval(out, []),
    catch(
        (
            member(X, Xs),
                catch(
                    (
                        nb_getval(out, _V0),
                        contains(_V0, X, _V1),
                        (_V1 -> _V2 = false ; _V2 = true),
                        (_V2 \= nil ->
                            nb_getval(out, _V3),
                            append(_V3, [X], _V4),
                            nb_setval(out, _V4),
                            true
                        ; true
                        ),
                        true
                    ), continue, true),
                    fail
                ; true
            ), break, true),
            nb_getval(out, _V5),
            _Res = _V5.
        
        :- initialization(main, main).
        main :-
            dict_create(_V0, map, [c_customer_sk-1, c_last_name-"Smith", c_first_name-"John"]),
            dict_create(_V1, map, [c_customer_sk-2, c_last_name-"Jones", c_first_name-"Alice"]),
            Customer = [_V0, _V1],
            dict_create(_V2, map, [ss_customer_sk-1, d_month_seq-1200]),
            dict_create(_V3, map, [ss_customer_sk-2, d_month_seq-1205]),
            Store_sales = [_V2, _V3],
            dict_create(_V4, map, [cs_bill_customer_sk-1, d_month_seq-1203]),
            Catalog_sales = [_V4],
            dict_create(_V5, map, [ws_bill_customer_sk-1, d_month_seq-1206]),
            Web_sales = [_V5],
            findall(_V9, (member(S, Store_sales), get_item(S, 'd_month_seq', _V6), get_item(S, 'd_month_seq', _V7), ((_V6 >= 1200), (_V7 =< 1211)), get_item(S, 'ss_customer_sk', _V8), _V9 = _V8), _V10),
            distinct(_V10, _V11),
            Store_ids = _V11,
            findall(_V15, (member(C, Catalog_sales), get_item(C, 'd_month_seq', _V12), get_item(C, 'd_month_seq', _V13), ((_V12 >= 1200), (_V13 =< 1211)), get_item(C, 'cs_bill_customer_sk', _V14), _V15 = _V14), _V16),
            distinct(_V16, _V17),
            Catalog_ids = _V17,
            findall(_V21, (member(W, Web_sales), get_item(W, 'd_month_seq', _V18), get_item(W, 'd_month_seq', _V19), ((_V18 >= 1200), (_V19 =< 1211)), get_item(W, 'ws_bill_customer_sk', _V20), _V21 = _V20), _V22),
            distinct(_V22, _V23),
            Web_ids = _V23,
            intersect(Store_ids, Catalog_ids, _V24),
            intersect(_V24, Web_ids, _V25),
            Hot = _V25,
            len_any(Hot, _V26),
            Result is _V26,
            json_write_dict(current_output, Result), nl,
            true,
            expect((Result == 1)),
            true.
