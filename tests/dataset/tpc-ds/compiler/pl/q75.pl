% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:36Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [d_date_sk-1, d_year-2000]),
    dict_create(_V1, map, [d_date_sk-2, d_year-2001]),
    Date_dim = [_V0, _V1],
    dict_create(_V2, map, [ss_item_sk-1, ss_quantity-50, ss_sales_price-500, ss_sold_date_sk-1]),
    dict_create(_V3, map, [ss_item_sk-1, ss_quantity-40, ss_sales_price-400, ss_sold_date_sk-2]),
    Store_sales = [_V2, _V3],
    dict_create(_V4, map, [ws_item_sk-1, ws_quantity-30, ws_sales_price-300, ws_sold_date_sk-1]),
    dict_create(_V5, map, [ws_item_sk-1, ws_quantity-25, ws_sales_price-250, ws_sold_date_sk-2]),
    Web_sales = [_V4, _V5],
    dict_create(_V6, map, [cs_item_sk-1, cs_quantity-20, cs_sales_price-200, cs_sold_date_sk-1]),
    dict_create(_V7, map, [cs_item_sk-1, cs_quantity-15, cs_sales_price-150, cs_sold_date_sk-2]),
    Catalog_sales = [_V6, _V7],
    dict_create(_V8, map, [i_item_sk-1, i_brand_id-1, i_class_id-2, i_category_id-3, i_manufact_id-4, i_category-"Electronics"]),
    Item = [_V8],
    findall(_V16, (member(Ss, Store_sales), member(D, Date_dim), get_item(D, 'd_date_sk', _V9), get_item(Ss, 'ss_sold_date_sk', _V10), (_V9 == _V10), true, get_item(D, 'd_year', _V11), get_item(Ss, 'ss_item_sk', _V12), get_item(Ss, 'ss_quantity', _V13), get_item(Ss, 'ss_sales_price', _V14), dict_create(_V15, map, [d_year-_V11, i_item_sk-_V12, quantity-_V13, amount-_V14]), _V16 = _V15), _V17),
    findall(_V25, (member(Ws, Web_sales), member(D, Date_dim), get_item(D, 'd_date_sk', _V18), get_item(Ws, 'ws_sold_date_sk', _V19), (_V18 == _V19), true, get_item(D, 'd_year', _V20), get_item(Ws, 'ws_item_sk', _V21), get_item(Ws, 'ws_quantity', _V22), get_item(Ws, 'ws_sales_price', _V23), dict_create(_V24, map, [d_year-_V20, i_item_sk-_V21, quantity-_V22, amount-_V23]), _V25 = _V24), _V26),
    findall(_V34, (member(Cs, Catalog_sales), member(D, Date_dim), get_item(D, 'd_date_sk', _V27), get_item(Cs, 'cs_sold_date_sk', _V28), (_V27 == _V28), true, get_item(D, 'd_year', _V29), get_item(Cs, 'cs_item_sk', _V30), get_item(Cs, 'cs_quantity', _V31), get_item(Cs, 'cs_sales_price', _V32), dict_create(_V33, map, [d_year-_V29, i_item_sk-_V30, quantity-_V31, amount-_V32]), _V34 = _V33), _V35),
    concat(_V17, _V26, _V35, _V36),
    Sales_detail = _V36,
    findall(_V48, (member(Sd, Sales_detail), member(I, Item), get_item(I, 'i_item_sk', _V37), get_item(Sd, 'i_item_sk', _V38), (_V37 == _V38), get_item(I, 'i_category', _V39), (_V39 == "Electronics"), get_item(Sd, 'd_year', _V40), get_item(I, 'i_brand_id', _V41), get_item(I, 'i_class_id', _V42), get_item(I, 'i_category_id', _V43), get_item(I, 'i_manufact_id', _V44), dict_create(_V45, map, [year-_V40, brand_id-_V41, class_id-_V42, category_id-_V43, manuf_id-_V44]), _V46 = _V45, dict_create(_V47, map, ['Sd'-Sd, 'I'-I]), _V48 = _V46-_V47), _V49),
    group_pairs(_V49, [], _V50),
    findall(_V72, (member(G, _V50), get_item(G, 'key', _V51), get_item(_V51, 'year', _V52), get_item(G, 'key', _V53), get_item(_V53, 'brand_id', _V54), get_item(G, 'key', _V55), get_item(_V55, 'class_id', _V56), get_item(G, 'key', _V57), get_item(_V57, 'category_id', _V58), get_item(G, 'key', _V59), get_item(_V59, 'manuf_id', _V60), findall(_V63, (member(X, G), true, get_item(X, 'sd', _V61), get_item(_V61, 'quantity', _V62), _V63 = _V62), _V64), sum(_V64, _V65), findall(_V68, (member(X, G), true, get_item(X, 'sd', _V66), get_item(_V66, 'amount', _V67), _V68 = _V67), _V69), sum(_V69, _V70), dict_create(_V71, map, [d_year-_V52, i_brand_id-_V54, i_class_id-_V56, i_category_id-_V58, i_manufact_id-_V60, sales_cnt-_V65, sales_amt-_V70]), _V72 = _V71), _V73),
    All_sales = _V73,
    findall(_V75, (member(A, All_sales), get_item(A, 'd_year', _V74), (_V74 == 2000), _V75 = A), _V76),
    first(_V76, _V77),
    Prev_yr = _V77,
    findall(_V79, (member(A, All_sales), get_item(A, 'd_year', _V78), (_V78 == 2001), _V79 = A), _V80),
    first(_V80, _V81),
    Curr_yr = _V81,
    get_item(Curr_yr, 'sales_cnt', _V82),
    get_item(Prev_yr, 'sales_cnt', _V83),
    get_item(Prev_yr, 'd_year', _V84),
    get_item(Curr_yr, 'd_year', _V85),
    get_item(Curr_yr, 'i_brand_id', _V86),
    get_item(Curr_yr, 'i_class_id', _V87),
    get_item(Curr_yr, 'i_category_id', _V88),
    get_item(Curr_yr, 'i_manufact_id', _V89),
    get_item(Prev_yr, 'sales_cnt', _V90),
    get_item(Curr_yr, 'sales_cnt', _V91),
    get_item(Curr_yr, 'sales_cnt', _V92),
    get_item(Prev_yr, 'sales_cnt', _V93),
    get_item(Curr_yr, 'sales_amt', _V94),
    get_item(Prev_yr, 'sales_amt', _V95),
    dict_create(_V96, map, [prev_year-_V84, year-_V85, i_brand_id-_V86, i_class_id-_V87, i_category_id-_V88, i_manufact_id-_V89, prev_yr_cnt-_V90, curr_yr_cnt-_V91, sales_cnt_diff-(_V92 - _V93), sales_amt_diff-(_V94 - _V95)]),
    (((_V82 / _V83) < 0.9) -> _V97 = [_V96] ; _V97 = []),
    Result = _V97,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V98, map, [prev_year-2000, year-2001, i_brand_id-1, i_class_id-2, i_category_id-3, i_manufact_id-4, prev_yr_cnt-100, curr_yr_cnt-80, sales_cnt_diff-(-20), sales_amt_diff-(-200)]),
    expect((Result == [_V98])),
    true.
