% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:32Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

contains(Container, Item, Res) :-
    is_dict(Container), !, (string(Item) -> atom_string(A, Item) ; A = Item), (get_dict(A, Container, _) -> Res = true ; Res = false).
contains(List, Item, Res) :-
    string(List), !, (sub_string(List, _, _, _, Item) -> Res = true ; Res = false).
contains(List, Item, Res) :- (member(Item, List) -> Res = true ; Res = false).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [ss_sold_date_sk-1, ss_item_sk-1, ss_store_sk-1, ss_customer_sk-1, ss_quantity-10, ss_ticket_number-1]),
    Store_sales = [_V0],
    dict_create(_V1, map, [sr_returned_date_sk-2, sr_item_sk-1, sr_customer_sk-1, sr_ticket_number-1, sr_return_quantity-2]),
    Store_returns = [_V1],
    dict_create(_V2, map, [cs_sold_date_sk-3, cs_item_sk-1, cs_bill_customer_sk-1, cs_quantity-5]),
    Catalog_sales = [_V2],
    dict_create(_V3, map, [d_date_sk-1, d_moy-4, d_year-1999]),
    dict_create(_V4, map, [d_date_sk-2, d_moy-5, d_year-1999]),
    dict_create(_V5, map, [d_date_sk-3, d_moy-5, d_year-2000]),
    Date_dim = [_V3, _V4, _V5],
    dict_create(_V6, map, [s_store_sk-1, s_store_id-"S1", s_store_name-"Store1"]),
    Store = [_V6],
    dict_create(_V7, map, [i_item_sk-1, i_item_id-"ITEM1", i_item_desc-"Desc1"]),
    Item = [_V7],
    findall(_V40, (member(Ss, Store_sales), member(Sr, Store_returns), get_item(Ss, 'ss_ticket_number', _V8), get_item(Sr, 'sr_ticket_number', _V9), get_item(Ss, 'ss_item_sk', _V10), get_item(Sr, 'sr_item_sk', _V11), ((_V8 == _V9), (_V10 == _V11)), member(Cs, Catalog_sales), get_item(Sr, 'sr_customer_sk', _V12), get_item(Cs, 'cs_bill_customer_sk', _V13), get_item(Sr, 'sr_item_sk', _V14), get_item(Cs, 'cs_item_sk', _V15), ((_V12 == _V13), (_V14 == _V15)), member(D1, Date_dim), get_item(D1, 'd_date_sk', _V16), get_item(Ss, 'ss_sold_date_sk', _V17), (_V16 == _V17), member(D2, Date_dim), get_item(D2, 'd_date_sk', _V18), get_item(Sr, 'sr_returned_date_sk', _V19), (_V18 == _V19), member(D3, Date_dim), get_item(D3, 'd_date_sk', _V20), get_item(Cs, 'cs_sold_date_sk', _V21), (_V20 == _V21), member(S, Store), get_item(S, 's_store_sk', _V22), get_item(Ss, 'ss_store_sk', _V23), (_V22 == _V23), member(I, Item), get_item(I, 'i_item_sk', _V24), get_item(Ss, 'ss_item_sk', _V25), (_V24 == _V25), get_item(D1, 'd_moy', _V26), get_item(D1, 'd_year', _V27), get_item(D2, 'd_moy', _V28), get_item(D2, 'd_moy', _V29), get_item(D3, 'd_year', _V30), contains([1999, 2000, 2001], _V30, _V31), (((((_V26 == 4), (_V27 == 1999)), (_V28 >= 4)), (_V29 =< 7)), _V31), get_item(Ss, 'ss_quantity', _V32), get_item(Sr, 'sr_return_quantity', _V33), get_item(Cs, 'cs_quantity', _V34), get_item(I, 'i_item_id', _V35), get_item(I, 'i_item_desc', _V36), get_item(S, 's_store_id', _V37), get_item(S, 's_store_name', _V38), dict_create(_V39, map, [ss_quantity-_V32, sr_return_quantity-_V33, cs_quantity-_V34, i_item_id-_V35, i_item_desc-_V36, s_store_id-_V37, s_store_name-_V38]), _V40 = _V39), _V41),
    Base = _V41,
    findall(_V49, (member(B, Base), true, get_item(B, 'i_item_id', _V42), get_item(B, 'i_item_desc', _V43), get_item(B, 's_store_id', _V44), get_item(B, 's_store_name', _V45), dict_create(_V46, map, [item_id-_V42, item_desc-_V43, s_store_id-_V44, s_store_name-_V45]), _V47 = _V46, dict_create(_V48, map, ['B'-B]), _V49 = _V47-_V48), _V50),
    group_pairs(_V50, [], _V51),
    findall(_V73, (member(G, _V51), get_item(G, 'key', _V52), get_item(_V52, 'item_id', _V53), get_item(G, 'key', _V54), get_item(_V54, 'item_desc', _V55), get_item(G, 'key', _V56), get_item(_V56, 's_store_id', _V57), get_item(G, 'key', _V58), get_item(_V58, 's_store_name', _V59), findall(_V61, (member(X, G), true, get_item(X, 'ss_quantity', _V60), _V61 = _V60), _V62), sum(_V62, _V63), findall(_V65, (member(X, G), true, get_item(X, 'sr_return_quantity', _V64), _V65 = _V64), _V66), sum(_V66, _V67), findall(_V69, (member(X, G), true, get_item(X, 'cs_quantity', _V68), _V69 = _V68), _V70), sum(_V70, _V71), dict_create(_V72, map, [i_item_id-_V53, i_item_desc-_V55, s_store_id-_V57, s_store_name-_V59, store_sales_quantity-_V63, store_returns_quantity-_V67, catalog_sales_quantity-_V71]), _V73 = _V72), _V74),
    Result = _V74,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V75, map, [i_item_id-"ITEM1", i_item_desc-"Desc1", s_store_id-"S1", s_store_name-"Store1", store_sales_quantity-10, store_returns_quantity-2, catalog_sales_quantity-5]),
    expect((Result == [_V75])),
    true.
