% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:36Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [c_customer_sk-1, c_customer_id-1, c_first_name-"Alice", c_last_name-"Smith"]),
    Customer = [_V0],
    dict_create(_V1, map, [d_date_sk-1, d_year-1998]),
    dict_create(_V2, map, [d_date_sk-2, d_year-1999]),
    Date_dim = [_V1, _V2],
    dict_create(_V3, map, [ss_customer_sk-1, ss_sold_date_sk-1, ss_net_paid-100]),
    dict_create(_V4, map, [ss_customer_sk-1, ss_sold_date_sk-2, ss_net_paid-110]),
    Store_sales = [_V3, _V4],
    dict_create(_V5, map, [ws_bill_customer_sk-1, ws_sold_date_sk-1, ws_net_paid-40]),
    dict_create(_V6, map, [ws_bill_customer_sk-1, ws_sold_date_sk-2, ws_net_paid-80]),
    Web_sales = [_V5, _V6],
    findall(_V20, (member(C, Customer), member(Ss, Store_sales), get_item(C, 'c_customer_sk', _V7), get_item(Ss, 'ss_customer_sk', _V8), (_V7 == _V8), member(D, Date_dim), get_item(D, 'd_date_sk', _V9), get_item(Ss, 'ss_sold_date_sk', _V10), (_V9 == _V10), get_item(D, 'd_year', _V11), get_item(D, 'd_year', _V12), ((_V11 == 1998) ; (_V12 == 1999)), get_item(C, 'c_customer_id', _V13), get_item(C, 'c_first_name', _V14), get_item(C, 'c_last_name', _V15), get_item(D, 'd_year', _V16), dict_create(_V17, map, [id-_V13, first-_V14, last-_V15, year-_V16]), _V18 = _V17, dict_create(_V19, map, ['C'-C, 'Ss'-Ss, 'D'-D]), _V20 = _V18-_V19), _V21),
    group_pairs(_V21, [], _V22),
    findall(_V37, (member(G, _V22), get_item(G, 'key', _V23), get_item(_V23, 'id', _V24), get_item(G, 'key', _V25), get_item(_V25, 'first', _V26), get_item(G, 'key', _V27), get_item(_V27, 'last', _V28), get_item(G, 'key', _V29), get_item(_V29, 'year', _V30), findall(_V33, (member(X, G), true, get_item(X, 'ss', _V31), get_item(_V31, 'ss_net_paid', _V32), _V33 = _V32), _V34), sum(_V34, _V35), dict_create(_V36, map, [customer_id-_V24, customer_first_name-_V26, customer_last_name-_V28, year-_V30, year_total-_V35, sale_type-"s"]), _V37 = _V36), _V38),
    findall(_V52, (member(C, Customer), member(Ws, Web_sales), get_item(C, 'c_customer_sk', _V39), get_item(Ws, 'ws_bill_customer_sk', _V40), (_V39 == _V40), member(D, Date_dim), get_item(D, 'd_date_sk', _V41), get_item(Ws, 'ws_sold_date_sk', _V42), (_V41 == _V42), get_item(D, 'd_year', _V43), get_item(D, 'd_year', _V44), ((_V43 == 1998) ; (_V44 == 1999)), get_item(C, 'c_customer_id', _V45), get_item(C, 'c_first_name', _V46), get_item(C, 'c_last_name', _V47), get_item(D, 'd_year', _V48), dict_create(_V49, map, [id-_V45, first-_V46, last-_V47, year-_V48]), _V50 = _V49, dict_create(_V51, map, ['C'-C, 'Ws'-Ws, 'D'-D]), _V52 = _V50-_V51), _V53),
    group_pairs(_V53, [], _V54),
    findall(_V69, (member(G, _V54), get_item(G, 'key', _V55), get_item(_V55, 'id', _V56), get_item(G, 'key', _V57), get_item(_V57, 'first', _V58), get_item(G, 'key', _V59), get_item(_V59, 'last', _V60), get_item(G, 'key', _V61), get_item(_V61, 'year', _V62), findall(_V65, (member(X, G), true, get_item(X, 'ws', _V63), get_item(_V63, 'ws_net_paid', _V64), _V65 = _V64), _V66), sum(_V66, _V67), dict_create(_V68, map, [customer_id-_V56, customer_first_name-_V58, customer_last_name-_V60, year-_V62, year_total-_V67, sale_type-"w"]), _V69 = _V68), _V70),
    concat(_V38, _V70, _V71),
    Year_total = _V71,
    findall(_V74, (member(Y, Year_total), get_item(Y, 'sale_type', _V72), get_item(Y, 'year', _V73), ((_V72 == "s"), (_V73 == 1998)), _V74 = Y), _V75),
    first(_V75, _V76),
    S_firstyear = _V76,
    findall(_V79, (member(Y, Year_total), get_item(Y, 'sale_type', _V77), get_item(Y, 'year', _V78), ((_V77 == "s"), (_V78 == 1999)), _V79 = Y), _V80),
    first(_V80, _V81),
    S_secyear = _V81,
    findall(_V84, (member(Y, Year_total), get_item(Y, 'sale_type', _V82), get_item(Y, 'year', _V83), ((_V82 == "w"), (_V83 == 1998)), _V84 = Y), _V85),
    first(_V85, _V86),
    W_firstyear = _V86,
    findall(_V89, (member(Y, Year_total), get_item(Y, 'sale_type', _V87), get_item(Y, 'year', _V88), ((_V87 == "w"), (_V88 == 1999)), _V89 = Y), _V90),
    first(_V90, _V91),
    W_secyear = _V91,
    get_item(S_firstyear, 'year_total', _V92),
    get_item(W_firstyear, 'year_total', _V93),
    get_item(W_secyear, 'year_total', _V94),
    get_item(W_firstyear, 'year_total', _V95),
    get_item(S_secyear, 'year_total', _V96),
    get_item(S_firstyear, 'year_total', _V97),
    get_item(S_secyear, 'customer_id', _V98),
    get_item(S_secyear, 'customer_first_name', _V99),
    get_item(S_secyear, 'customer_last_name', _V100),
    dict_create(_V101, map, [customer_id-_V98, customer_first_name-_V99, customer_last_name-_V100]),
    ((((_V92 > 0), (_V93 > 0)), ((_V94 / _V95) > (_V96 / _V97))) -> _V102 = [_V101] ; _V102 = []),
    Result = _V102,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V103, map, [customer_id-1, customer_first_name-"Alice", customer_last_name-"Smith"]),
    expect((Result == [_V103])),
    true.
