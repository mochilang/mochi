% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:34:34Z
:- style_check(-singleton).
get_item(Container, Key, Val) :-
    is_dict(Container), !, (string(Key) -> atom_string(A, Key) ; A = Key), get_dict(A, Container, Val).
get_item(Container, Index, Val) :-
    string(Container), !, string_chars(Container, Chars), nth0(Index, Chars, Val).
get_item(List, Index, Val) :- nth0(Index, List, Val).

to_list(Str, L) :-
    string(Str), !,
    string_chars(Str, L).
to_list(L, L).

count(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), length(Items, R).
count(V, R) :-
    string(V), !, string_chars(V, C), length(C, R).
count(V, R) :-
    is_list(V), !, length(V, R).
count(_, _) :- throw(error('count expects list or group')).

avg(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), avg_list(Items, R).
avg(V, R) :-
    is_list(V), !, avg_list(V, R).
avg(_, _) :- throw(error('avg expects list or group')).
avg_list([], 0).
avg_list(L, R) :- sum_list(L, S), length(L, N), N > 0, R is S / N.

sum(V, R) :-
    is_dict(V), !, get_dict('Items', V, Items), sum_list(Items, R).
sum(V, R) :-
    is_list(V), !, sum_list(V, R).
sum(_, _) :- throw(error('sum expects list or group')).

group_insert(Key, Item, [], [_{key:Key, 'Items':[Item]}]).
group_insert(Key, Item, [G|Gs], [NG|Gs]) :- get_dict(key, G, Key), !, get_dict('Items', G, Items), append(Items, [Item], NItems), put_dict('Items', G, NItems, NG).
group_insert(Key, Item, [G|Gs], [G|Rs]) :- group_insert(Key, Item, Gs, Rs).
group_pairs([], Acc, Res) :- reverse(Acc, Res).
group_pairs([K-V|T], Acc, Res) :- group_insert(K, V, Acc, Acc1), group_pairs(T, Acc1, Res).
group_by(List, Fn, Groups) :- findall(K-V, (member(V, List), call(Fn, V, K)), Pairs), group_pairs(Pairs, [], Groups).

:- use_module(library(http/json)).
load_data(Path, Opts, Rows) :-
    (is_dict(Opts), get_dict(format, Opts, Fmt) -> true ; Fmt = 'json'),
    (Path == '' ; Path == '-' -> read_string(user_input, _, Text) ; read_file_to_string(Path, Text, [])),
    (Fmt == 'jsonl' ->
        split_string(Text, '\n', ' \t\r', Lines0),
        exclude(=(''), Lines0, Lines),
        findall(D, (member(L, Lines), open_string(L, S), json_read_dict(S, D), close(S)), Rows)
    ;
        open_string(Text, S), json_read_dict(S, Data), close(S),
        (is_list(Data) -> Rows = Data ; Rows = [Data])
    ).

expect(Cond) :- (Cond -> true ; throw(error('expect failed'))).

:- initialization(main, main).
main :-
    dict_create(_V0, map, [item-1, sold_date-1, price-10]),
    dict_create(_V1, map, [item-2, sold_date-1, price-22]),
    dict_create(_V2, map, [item-1, sold_date-1, price-20]),
    Store_sales = [_V0, _V1, _V2],
    dict_create(_V3, map, [i_item_sk-1, i_brand_id-1, i_brand-"B1", i_manager_id-1]),
    dict_create(_V4, map, [i_item_sk-2, i_brand_id-2, i_brand-"B2", i_manager_id-1]),
    Item = [_V3, _V4],
    dict_create(_V5, map, [d_date_sk-1, d_year-2001, d_moy-11]),
    Date_dim = [_V5],
    findall(_V19, (member(Ss, Store_sales), member(I, Item), get_item(Ss, 'item', _V6), get_item(I, 'i_item_sk', _V7), get_item(I, 'i_manager_id', _V8), ((_V6 == _V7), (_V8 == 1)), member(D, Date_dim), get_item(Ss, 'sold_date', _V9), get_item(D, 'd_date_sk', _V10), get_item(D, 'd_year', _V11), get_item(D, 'd_moy', _V12), (((_V9 == _V10), (_V11 == 2001)), (_V12 == 11)), true, get_item(D, 'd_year', _V13), get_item(I, 'i_brand_id', _V14), get_item(I, 'i_brand', _V15), dict_create(_V16, map, [year-_V13, brand_id-_V14, brand-_V15]), _V17 = _V16, dict_create(_V18, map, ['Ss'-Ss, 'I'-I, 'D'-D]), _V19 = _V17-_V18), _V20),
    group_pairs(_V20, [], _V21),
    findall(_V31, (member(G, _V21), get_item(G, 'key', _V22), get_item(_V22, 'year', _V23), get_item(G, 'key', _V24), get_item(_V24, 'brand_id', _V25), findall(_V27, (member(X, G), true, get_item(X, 'price', _V26), _V27 = _V26), _V28), sum(_V28, _V29), dict_create(_V30, map, [d_year-_V23, brand_id-_V25, ext_price-_V29]), _V31 = _V30), _V32),
    Filtered = _V32,
    findall(_V33, (member(R, Filtered), true, _V33 = R), _V34),
    Result = _V34,
    json_write_dict(current_output, Result), nl,
    true,
    dict_create(_V35, map, [d_year-2001, brand_id-1, ext_price-30]),
    dict_create(_V36, map, [d_year-2001, brand_id-2, ext_price-22]),
    expect((Result == [_V35, _V36])),
    true.
