; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:14Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare item inventory store_sales result)

(defn test_TPCDS_Q82_sample []
  (assert (_equal result 82) "expect failed")
)

(defn -main []
  (def item [{:id 1} {:id 2} {:id 3}]) ;; list of
  (def inventory [{:item 1 :qty 20} {:item 1 :qty 22} {:item 1 :qty 5} {:item 2 :qty 30} {:item 2 :qty 5} {:item 3 :qty 10}]) ;; list of
  (def store_sales [{:item 1} {:item 2}]) ;; list of
  (def result 0) ;; int
  (loop [_tmp0 (seq inventory)]
    (when _tmp0
      (let [inv (clojure.core/first _tmp0)]
        (let [r (try
          (loop [_tmp1 (seq store_sales)]
            (when _tmp1
              (let [s (clojure.core/first _tmp1)]
                (let [r (try
                  (when (_equal (:item inv) (:item s))
                    (def result (+ result (:qty inv))) ;; any
                  )
                  :next
                (catch clojure.lang.ExceptionInfo e
                  (cond
                    (= (.getMessage e) "continue") :next
                    (= (.getMessage e) "break") :break
                    :else (throw e))
                  )
                )]
              (cond
                (= r :break) nil
                :else (recur (next _tmp1))
              )
            )
          )
        )
      )
      :next
    (catch clojure.lang.ExceptionInfo e
      (cond
        (= (.getMessage e) "continue") :next
        (= (.getMessage e) "break") :break
        :else (throw e))
      )
    )]
  (cond
    (= r :break) nil
    :else (recur (next _tmp0))
  )
)
)
)
)
(_json result)
(test_TPCDS_Q82_sample)
)

(-main)
