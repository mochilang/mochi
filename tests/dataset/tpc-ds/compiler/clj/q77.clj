; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:06Z
(ns main)

(defn _sum [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "sum() expects list or group" {})))]
    (reduce + 0 lst))
  )

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(defn _query [src joins opts]
  (let [items (atom (mapv vector src))]
    (doseq [j joins]
      (let [joined (atom [])]
        (if (and (:leftKey j) (:rightKey j))
          (let [idx (group-by (fn [it] (apply (:rightKey j) [it])) (:items j))
                seen (atom #{})]
            (doseq [left @items]
              (let [k (apply (:leftKey j) left)
                    rs (get idx k)]
                (if rs
                  (do
                    (swap! seen conj k)
                    (doseq [right rs]
                      (swap! joined conj (conj left right))))
                  (when (:left j)
                    (swap! joined conj (conj left nil)))))
            (when (:right j)
              (doseq [right (:items j)]
                (when-not (contains? @seen (apply (:rightKey j) [right]))
                  (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right]))))))
            (reset! items @joined))
          (cond
            (and (:right j) (:left j))
              (let [matched (boolean-array (count (:items j)))]
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [[ri right] (map-indexed vector (:items j))]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (aset matched ri true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (conj left nil))))
                (doseq [[ri right] (map-indexed vector (:items j))]
                  (when-not (aget matched ri)
                    (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
              (reset! items @joined)
            (:right j)
              (do
                (doseq [right (:items j)]
                  (let [m (atom false)]
                    (doseq [left @items]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
                (reset! items @joined))
            :else
              (do
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [right (:items j)]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when (and (:left j) (not @m))
                      (swap! joined conj (conj left nil))))
                (reset! items @joined)))))
    (let [it @items
          it (if-let [w (:where opts)] (vec (filter #(apply w %) it)) it)
          it (if-let [sk (:sortKey opts)]
               (vec (sort-by #(let [k (apply sk %)] (_sort_key k)) it))
               it)
          it (if (contains? opts :skip) (vec (drop (:skip opts) it)) it)
          it (if (contains? opts :take) (vec (take (:take opts) it)) it)]
      (mapv #(apply (:select opts) %) it)))))))))))))
(declare date_dim store_sales store_returns catalog_sales catalog_returns web_sales web_returns ss sr cs cr ws wr per_channel result)

(defn test_TPCDS_Q77_simplified []
  (assert (_equal result [{:channel "catalog channel" :id 1 :sales 150.0 :returns 7.0 :profit 12.0} {:channel "store channel" :id 1 :sales 100.0 :returns 5.0 :profit 9.0} {:channel "web channel" :id 1 :sales 200.0 :returns 10.0 :profit 18.0}]) "expect failed")
)

(defn -main []
  (def date_dim [{:d_date_sk 1 :d_date 1}]) ;; list of
  (def store_sales [{:ss_sold_date_sk 1 :s_store_sk 1 :ss_ext_sales_price 100.0 :ss_net_profit 10.0}]) ;; list of
  (def store_returns [{:sr_returned_date_sk 1 :s_store_sk 1 :sr_return_amt 5.0 :sr_net_loss 1.0}]) ;; list of
  (def catalog_sales [{:cs_sold_date_sk 1 :cs_call_center_sk 1 :cs_ext_sales_price 150.0 :cs_net_profit 15.0}]) ;; list of
  (def catalog_returns [{:cr_returned_date_sk 1 :cr_call_center_sk 1 :cr_return_amount 7.0 :cr_net_loss 3.0}]) ;; list of
  (def web_sales [{:ws_sold_date_sk 1 :ws_web_page_sk 1 :ws_ext_sales_price 200.0 :ws_net_profit 20.0}]) ;; list of
  (def web_returns [{:wr_returned_date_sk 1 :wr_web_page_sk 1 :wr_return_amt 10.0 :wr_net_loss 2.0}]) ;; list of
  (def ss (let [_src store_sales
      _rows (_query _src [
        {:items date_dim :leftKey (fn [ss] (:ss_sold_date_sk ss)) :rightKey (fn [d] (:d_date_sk d))}
      ] { :select (fn [ss d] [ss d]) })
      _groups (_group_by _rows (fn [ss d] (:s_store_sk ss)))
      ]
  (vec (map (fn [g] {:s_store_sk (:key g) :sales (_sum (vec (->> (for [x (:Items g)] (:ss_ext_sales_price (:ss x)))))) :profit (_sum (vec (->> (for [x (:Items g)] (:ss_net_profit (:ss x))))))}) _groups)))) ;; list of
  (def sr (let [_src store_returns
      _rows (_query _src [
        {:items date_dim :leftKey (fn [sr] (:sr_returned_date_sk sr)) :rightKey (fn [d] (:d_date_sk d))}
      ] { :select (fn [sr d] [sr d]) })
      _groups (_group_by _rows (fn [sr d] (:s_store_sk sr)))
      ]
  (vec (map (fn [g] {:s_store_sk (:key g) :returns (_sum (vec (->> (for [x (:Items g)] (:sr_return_amt (:sr x)))))) :profit_loss (_sum (vec (->> (for [x (:Items g)] (:sr_net_loss (:sr x))))))}) _groups)))) ;; list of
  (def cs (let [_src catalog_sales
      _rows (_query _src [
        {:items date_dim :leftKey (fn [cs] (:cs_sold_date_sk cs)) :rightKey (fn [d] (:d_date_sk d))}
      ] { :select (fn [cs d] [cs d]) })
      _groups (_group_by _rows (fn [cs d] (:cs_call_center_sk cs)))
      ]
  (vec (map (fn [g] {:cs_call_center_sk (:key g) :sales (_sum (vec (->> (for [x (:Items g)] (:cs_ext_sales_price (:cs x)))))) :profit (_sum (vec (->> (for [x (:Items g)] (:cs_net_profit (:cs x))))))}) _groups)))) ;; list of
  (def cr (let [_src catalog_returns
      _rows (_query _src [
        {:items date_dim :leftKey (fn [cr] (:cr_returned_date_sk cr)) :rightKey (fn [d] (:d_date_sk d))}
      ] { :select (fn [cr d] [cr d]) })
      _groups (_group_by _rows (fn [cr d] (:cr_call_center_sk cr)))
      ]
  (vec (map (fn [g] {:cr_call_center_sk (:key g) :returns (_sum (vec (->> (for [x (:Items g)] (:cr_return_amount (:cr x)))))) :profit_loss (_sum (vec (->> (for [x (:Items g)] (:cr_net_loss (:cr x))))))}) _groups)))) ;; list of
  (def ws (let [_src web_sales
      _rows (_query _src [
        {:items date_dim :leftKey (fn [ws] (:ws_sold_date_sk ws)) :rightKey (fn [d] (:d_date_sk d))}
      ] { :select (fn [ws d] [ws d]) })
      _groups (_group_by _rows (fn [ws d] (:ws_web_page_sk ws)))
      ]
  (vec (map (fn [g] {:wp_web_page_sk (:key g) :sales (_sum (vec (->> (for [x (:Items g)] (:ws_ext_sales_price (:ws x)))))) :profit (_sum (vec (->> (for [x (:Items g)] (:ws_net_profit (:ws x))))))}) _groups)))) ;; list of
  (def wr (let [_src web_returns
      _rows (_query _src [
        {:items date_dim :leftKey (fn [wr] (:wr_returned_date_sk wr)) :rightKey (fn [d] (:d_date_sk d))}
      ] { :select (fn [wr d] [wr d]) })
      _groups (_group_by _rows (fn [wr d] (:wr_web_page_sk wr)))
      ]
  (vec (map (fn [g] {:wp_web_page_sk (:key g) :returns (_sum (vec (->> (for [x (:Items g)] (:wr_return_amt (:wr x)))))) :profit_loss (_sum (vec (->> (for [x (:Items g)] (:wr_net_loss (:wr x))))))}) _groups)))) ;; list of
  (def per_channel (concat (let [_src ss]
  (_query _src [
    {:items sr :leftKey (fn [s] (:s_store_sk s)) :rightKey (fn [r] (:s_store_sk r)) :left true}
  ] { :select (fn [s r] {:channel "store channel" :id (:s_store_sk s) :sales (:sales s) :returns (if (_equal r nil) 0.0 (:returns r)) :profit (- (:profit s) (if (_equal r nil) 0.0 (:profit_loss r)))}) })) (vec (->> (for [c cs r cr :when (_equal (:cs_call_center_sk c) (:cr_call_center_sk r))] {:channel "catalog channel" :id (:cs_call_center_sk c) :sales (:sales c) :returns (:returns r) :profit (- (:profit c) (:profit_loss r))}))) (let [_src ws]
  (_query _src [
    {:items wr :leftKey (fn [w] (:wp_web_page_sk w)) :rightKey (fn [r] (:wp_web_page_sk r)) :left true}
  ] { :select (fn [w r] {:channel "web channel" :id (:wp_web_page_sk w) :sales (:sales w) :returns (if (_equal r nil) 0.0 (:returns r)) :profit (- (:profit w) (if (_equal r nil) 0.0 (:profit_loss r)))}) })))) ;; list of any
  (def result (let [_src per_channel
      _groups (_group_by _src (fn [p] {:channel (:channel p) :id (:id p)}))
      ]
  (->> _groups (sort-by (fn [g] (_sort_key (:channel (:key g))))) (map (fn [g] {:channel (:channel (:key g)) :id (:id (:key g)) :sales (_sum (vec (->> (for [x (:Items g)] (:sales (:p x)))))) :returns (_sum (vec (->> (for [x (:Items g)] (:returns (:p x)))))) :profit (_sum (vec (->> (for [x (:Items g)] (:profit (:p x))))))})) vec))) ;; list of
  (_json result)
  (test_TPCDS_Q77_simplified)
)

(-main)
