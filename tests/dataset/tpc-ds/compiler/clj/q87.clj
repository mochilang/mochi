; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:20Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare store_sales catalog_sales web_sales store_customers catalog_customers web_customers store_only result)

(defn test_TPCDS_Q87_sample []
  (assert (_equal result 87.0) "expect failed")
)

(defn -main []
  (def store_sales [{:cust "A" :price 5.0} {:cust "B" :price 30.0} {:cust "C" :price 57.0}]) ;; list of
  (def catalog_sales [{:cust "A"}]) ;; list of
  (def web_sales []) ;; list of any
  (def store_customers (vec (->> (for [s store_sales] (:cust s))))) ;; list of string
  (def catalog_customers (vec (->> (for [s catalog_sales] (:cust s))))) ;; list of string
  (def web_customers (vec (->> (for [s web_sales] (:cust s))))) ;; list of any
  (def store_only (vec (->> (for [c store_customers :when (and (_equal (count (vec (->> (for [x catalog_customers :when (_equal x c)] x)))) 0) (_equal (count (vec (->> (for [x web_customers :when (_equal x c)] x)))) 0))] c)))) ;; list of string
  (def result (reduce + 0 (vec (->> (for [s store_sales :when (> (count (vec (->> (for [x store_only :when (_equal x (:cust s))] x)))) 0)] (:price s)))))) ;; float
  (_json result)
  (test_TPCDS_Q87_sample)
)

(-main)
