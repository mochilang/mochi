; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:22Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare time_dim household_demographics store store_sales h8_30_to_9 h9_to_9_30 h9_30_to_10 h10_to_10_30 h10_30_to_11 h11_to_11_30 h11_30_to_12 h12_to_12_30 result)

;; Function count_range takes [ssales: list of any, tdim: list of any, hour: int, start_min: int, end_min: int] and returns float
(defn count_range [ssales tdim hour start_min end_min]
  (try
    (def total 0.0) ;; float
    (loop [_tmp0 (seq ssales)]
      (when _tmp0
        (let [ss (clojure.core/first _tmp0)]
          (let [r (try
            (loop [_tmp1 (seq tdim)]
              (when _tmp1
                (let [t (clojure.core/first _tmp1)]
                  (let [r (try
                    (when (and (and (and (_equal (:sold_time_sk ss) (:time_sk t)) (_equal (:hour t) hour)) (>= (:minute t) start_min)) (< (:minute t) end_min))
                      (def total (+ total (:qty ss))) ;; any
                    )
                    :next
                  (catch clojure.lang.ExceptionInfo e
                    (cond
                      (= (.getMessage e) "continue") :next
                      (= (.getMessage e) "break") :break
                      :else (throw e))
                    )
                  )]
                (cond
                  (= r :break) nil
                  :else (recur (next _tmp1))
                )
              )
            )
          )
        )
        :next
      (catch clojure.lang.ExceptionInfo e
        (cond
          (= (.getMessage e) "continue") :next
          (= (.getMessage e) "break") :break
          :else (throw e))
        )
      )]
    (cond
      (= r :break) nil
      :else (recur (next _tmp0))
    )
  )
)
)
)
(throw (ex-info "return" {:value total}))
(catch clojure.lang.ExceptionInfo e
(if (= (.getMessage e) "return")
(:value (ex-data e))
(throw e)))
)
)

(defn test_TPCDS_Q88_sample []
(assert (_equal result 88) "expect failed")
)

(defn -main []
(def time_dim [{:time_sk 1 :hour 8 :minute 30} {:time_sk 2 :hour 9 :minute 0} {:time_sk 3 :hour 9 :minute 30} {:time_sk 4 :hour 10 :minute 0} {:time_sk 5 :hour 10 :minute 30} {:time_sk 6 :hour 11 :minute 0} {:time_sk 7 :hour 11 :minute 30} {:time_sk 8 :hour 12 :minute 0}]) ;; list of
(def household_demographics [{:hd_demo_sk 1 :hd_dep_count 1 :hd_vehicle_count 1}]) ;; list of
(def store [{:s_store_sk 1 :s_store_name "ese"}]) ;; list of
(def store_sales [{:sold_time_sk 1 :hdemo_sk 1 :store_sk 1 :qty 10.0} {:sold_time_sk 2 :hdemo_sk 1 :store_sk 1 :qty 12.0} {:sold_time_sk 3 :hdemo_sk 1 :store_sk 1 :qty 14.0} {:sold_time_sk 4 :hdemo_sk 1 :store_sk 1 :qty 11.0} {:sold_time_sk 5 :hdemo_sk 1 :store_sk 1 :qty 8.0} {:sold_time_sk 6 :hdemo_sk 1 :store_sk 1 :qty 9.0} {:sold_time_sk 7 :hdemo_sk 1 :store_sk 1 :qty 10.0} {:sold_time_sk 8 :hdemo_sk 1 :store_sk 1 :qty 14.0}]) ;; list of
(def h8_30_to_9 (count_range store_sales time_dim 8 30 60)) ;; float
(def h9_to_9_30 (count_range store_sales time_dim 9 0 30)) ;; float
(def h9_30_to_10 (count_range store_sales time_dim 9 30 60)) ;; float
(def h10_to_10_30 (count_range store_sales time_dim 10 0 30)) ;; float
(def h10_30_to_11 (count_range store_sales time_dim 10 30 60)) ;; float
(def h11_to_11_30 (count_range store_sales time_dim 11 0 30)) ;; float
(def h11_30_to_12 (count_range store_sales time_dim 11 30 60)) ;; float
(def h12_to_12_30 (count_range store_sales time_dim 12 0 30)) ;; float
(def result (+ (+ (+ (+ (+ (+ (+ h8_30_to_9 h9_to_9_30) h9_30_to_10) h10_to_10_30) h10_30_to_11) h11_to_11_30) h11_30_to_12) h12_to_12_30)) ;; float
(_json result)
(test_TPCDS_Q88_sample)
)

(-main)
