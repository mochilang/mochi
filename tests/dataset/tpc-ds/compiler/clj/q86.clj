; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:19Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare web_sales result)

(defn test_TPCDS_Q86_sample []
  (assert (_equal result 86.0) "expect failed")
)

(defn -main []
  (def web_sales [{:cat "A" :class "B" :net 40.0} {:cat "A" :class "B" :net 46.0} {:cat "A" :class "C" :net 10.0} {:cat "B" :class "B" :net 20.0}]) ;; list of
  (def result (reduce + 0 (vec (->> (for [ws web_sales :when (and (_equal (:cat ws) "A") (_equal (:class ws) "B"))] (:net ws)))))) ;; float
  (_json result)
  (test_TPCDS_Q86_sample)
)

(-main)
