; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:45:41Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(defn _query [src joins opts]
  (let [items (atom (mapv vector src))]
    (doseq [j joins]
      (let [joined (atom [])]
        (if (and (:leftKey j) (:rightKey j))
          (let [idx (group-by (fn [it] (apply (:rightKey j) [it])) (:items j))
                seen (atom #{})]
            (doseq [left @items]
              (let [k (apply (:leftKey j) left)
                    rs (get idx k)]
                (if rs
                  (do
                    (swap! seen conj k)
                    (doseq [right rs]
                      (swap! joined conj (conj left right))))
                  (when (:left j)
                    (swap! joined conj (conj left nil)))))
            (when (:right j)
              (doseq [right (:items j)]
                (when-not (contains? @seen (apply (:rightKey j) [right]))
                  (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right]))))))
            (reset! items @joined))
          (cond
            (and (:right j) (:left j))
              (let [matched (boolean-array (count (:items j)))]
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [[ri right] (map-indexed vector (:items j))]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (aset matched ri true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (conj left nil))))
                (doseq [[ri right] (map-indexed vector (:items j))]
                  (when-not (aget matched ri)
                    (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
              (reset! items @joined)
            (:right j)
              (do
                (doseq [right (:items j)]
                  (let [m (atom false)]
                    (doseq [left @items]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
                (reset! items @joined))
            :else
              (do
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [right (:items j)]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when (and (:left j) (not @m))
                      (swap! joined conj (conj left nil))))
                (reset! items @joined)))))
    (let [it @items
          it (if-let [w (:where opts)] (vec (filter #(apply w %) it)) it)
          it (if-let [sk (:sortKey opts)]
               (vec (sort-by #(let [k (apply sk %)] (_sort_key k)) it))
               it)
          it (if (contains? opts :skip) (vec (drop (:skip opts) it)) it)
          it (if (contains? opts :take) (vec (take (:take opts) it)) it)]
      (mapv #(apply (:select opts) %) it)))))))))))))
(declare store_sales date_dim item catalog_sales web_sales frequent_ss_items customer_totals max_sales best_ss_customer catalog web result)

(defn StoreSale [ss_item_sk ss_sold_date_sk ss_customer_sk ss_quantity ss_sales_price]
  {:__name "StoreSale" :ss_item_sk ss_item_sk :ss_sold_date_sk ss_sold_date_sk :ss_customer_sk ss_customer_sk :ss_quantity ss_quantity :ss_sales_price ss_sales_price}
)


(defn DateDim [d_date_sk d_year d_moy]
  {:__name "DateDim" :d_date_sk d_date_sk :d_year d_year :d_moy d_moy}
)


(defn Item [i_item_sk]
  {:__name "Item" :i_item_sk i_item_sk}
)


(defn CatalogSale [cs_sold_date_sk cs_item_sk cs_bill_customer_sk cs_quantity cs_list_price]
  {:__name "CatalogSale" :cs_sold_date_sk cs_sold_date_sk :cs_item_sk cs_item_sk :cs_bill_customer_sk cs_bill_customer_sk :cs_quantity cs_quantity :cs_list_price cs_list_price}
)


(defn WebSale [ws_sold_date_sk ws_item_sk ws_bill_customer_sk ws_quantity ws_list_price]
  {:__name "WebSale" :ws_sold_date_sk ws_sold_date_sk :ws_item_sk ws_item_sk :ws_bill_customer_sk ws_bill_customer_sk :ws_quantity ws_quantity :ws_list_price ws_list_price}
)


(defn test_TPCDS_Q23_cross_channel_sales []
  (assert (_equal result 50.0) "expect failed")
)

(defn -main []
  (def store_sales [{:ss_item_sk 1 :ss_sold_date_sk 1 :ss_customer_sk 1 :ss_quantity 1 :ss_sales_price 10.0} {:ss_item_sk 1 :ss_sold_date_sk 1 :ss_customer_sk 1 :ss_quantity 1 :ss_sales_price 10.0} {:ss_item_sk 1 :ss_sold_date_sk 1 :ss_customer_sk 1 :ss_quantity 1 :ss_sales_price 10.0} {:ss_item_sk 1 :ss_sold_date_sk 1 :ss_customer_sk 1 :ss_quantity 1 :ss_sales_price 10.0} {:ss_item_sk 1 :ss_sold_date_sk 1 :ss_customer_sk 1 :ss_quantity 1 :ss_sales_price 10.0} {:ss_item_sk 2 :ss_sold_date_sk 1 :ss_customer_sk 2 :ss_quantity 1 :ss_sales_price 10.0} {:ss_item_sk 2 :ss_sold_date_sk 1 :ss_customer_sk 2 :ss_quantity 1 :ss_sales_price 10.0} {:ss_item_sk 2 :ss_sold_date_sk 1 :ss_customer_sk 2 :ss_quantity 1 :ss_sales_price 10.0}]) ;; list of
  (def date_dim [{:d_date_sk 1 :d_year 2000 :d_moy 1}]) ;; list of
  (def item [{:i_item_sk 1} {:i_item_sk 2}]) ;; list of
  (def catalog_sales [{:cs_sold_date_sk 1 :cs_item_sk 1 :cs_bill_customer_sk 1 :cs_quantity 2 :cs_list_price 10.0} {:cs_sold_date_sk 1 :cs_item_sk 2 :cs_bill_customer_sk 2 :cs_quantity 2 :cs_list_price 10.0}]) ;; list of
  (def web_sales [{:ws_sold_date_sk 1 :ws_item_sk 1 :ws_bill_customer_sk 1 :ws_quantity 3 :ws_list_price 10.0} {:ws_sold_date_sk 1 :ws_item_sk 2 :ws_bill_customer_sk 2 :ws_quantity 1 :ws_list_price 10.0}]) ;; list of
  (def frequent_ss_items (let [_src store_sales
      _rows (_query _src [
        {:items date_dim :leftKey (fn [ss] (:ss_sold_date_sk ss)) :rightKey (fn [d] (:d_date_sk d))}
        {:items item :leftKey (fn [ss d] (:ss_item_sk ss)) :rightKey (fn [i] (:i_item_sk i))}
      ] { :select (fn [ss d i] [ss d i]) :where (fn [ss d i] (_equal (:d_year d) 2000)) })
      _groups (_group_by _rows (fn [ss d i] {:item_sk (:i_item_sk i) :date_sk (:d_date_sk d)}))
      ]
  (vec (map (fn [g] (:item_sk (:key g))) _groups)))) ;; list of int
  (def customer_totals (map (fn [g] {:cust (:key g) :sales (reduce + 0 (vec (->> (for [x (:Items g)] (* (:ss_quantity x) (:ss_sales_price x))))))}) (_group_by store_sales (fn [ss] (:ss_customer_sk ss))))) ;; list of
  (def max_sales (apply max (vec (->> (for [c customer_totals] (:sales c)))))) ;; float
  (def best_ss_customer (vec (->> (for [c customer_totals :when (> (:sales c) (* 0.95 max_sales))] (:cust c))))) ;; list of int
  (def catalog (vec (->> (for [cs catalog_sales d date_dim :when (_equal (:cs_sold_date_sk cs) (:d_date_sk d)) :when (and (and (and (_equal (:d_year d) 2000) (_equal (:d_moy d) 1)) (some #(= (:cs_bill_customer_sk cs) %) best_ss_customer)) (some #(= (:cs_item_sk cs) %) frequent_ss_items))] (* (:cs_quantity cs) (:cs_list_price cs)))))) ;; list of float
  (def web (vec (->> (for [ws web_sales d date_dim :when (_equal (:ws_sold_date_sk ws) (:d_date_sk d)) :when (and (and (and (_equal (:d_year d) 2000) (_equal (:d_moy d) 1)) (some #(= (:ws_bill_customer_sk ws) %) best_ss_customer)) (some #(= (:ws_item_sk ws) %) frequent_ss_items))] (* (:ws_quantity ws) (:ws_list_price ws)))))) ;; list of float
  (def result (+ (reduce + 0 catalog) (reduce + 0 web))) ;; float
  (_json result)
  (test_TPCDS_Q23_cross_channel_sales)
)

(-main)
