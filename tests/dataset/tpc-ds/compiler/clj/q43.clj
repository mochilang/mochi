; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:46:14Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare date_dim store store_sales year gmt records base result)

(defn test_TPCDS_Q43_simplified []
  (assert (_equal result [{:s_store_name "Main" :s_store_id "S1" :sun_sales 10.0 :mon_sales 20.0 :tue_sales 30.0 :wed_sales 40.0 :thu_sales 50.0 :fri_sales 60.0 :sat_sales 70.0}]) "expect failed")
)

(defn -main []
  (def date_dim [{:date_sk 1 :d_day_name "Sunday" :d_year 2020} {:date_sk 2 :d_day_name "Monday" :d_year 2020} {:date_sk 3 :d_day_name "Tuesday" :d_year 2020} {:date_sk 4 :d_day_name "Wednesday" :d_year 2020} {:date_sk 5 :d_day_name "Thursday" :d_year 2020} {:date_sk 6 :d_day_name "Friday" :d_year 2020} {:date_sk 7 :d_day_name "Saturday" :d_year 2020}]) ;; list of
  (def store [{:store_sk 1 :store_id "S1" :store_name "Main" :gmt_offset 0}]) ;; list of
  (def store_sales [{:sold_date_sk 1 :store_sk 1 :sales_price 10.0} {:sold_date_sk 2 :store_sk 1 :sales_price 20.0} {:sold_date_sk 3 :store_sk 1 :sales_price 30.0} {:sold_date_sk 4 :store_sk 1 :sales_price 40.0} {:sold_date_sk 5 :store_sk 1 :sales_price 50.0} {:sold_date_sk 6 :store_sk 1 :sales_price 60.0} {:sold_date_sk 7 :store_sk 1 :sales_price 70.0}]) ;; list of
  (def year 2020) ;; int
  (def gmt 0) ;; int
  (def records (vec (->> (for [d date_dim ss store_sales :when (_equal (:sold_date_sk ss) (:date_sk d)) s store :when (_equal (:store_sk ss) (:store_sk s)) :when (and (_equal (:gmt_offset s) gmt) (_equal (:d_year d) year))] {:d_day_name (:d_day_name d) :s_store_name (:store_name s) :s_store_id (:store_id s) :price (:sales_price ss)})))) ;; list of
  (def base (map (fn [g] {:s_store_name (:name (:key g)) :s_store_id (:id (:key g)) :sun_sales (reduce + 0 (vec (->> (for [x (:Items g)] (if (_equal (:d_day_name x) "Sunday") (:price x) 0.0))))) :mon_sales (reduce + 0 (vec (->> (for [x (:Items g)] (if (_equal (:d_day_name x) "Monday") (:price x) 0.0))))) :tue_sales (reduce + 0 (vec (->> (for [x (:Items g)] (if (_equal (:d_day_name x) "Tuesday") (:price x) 0.0))))) :wed_sales (reduce + 0 (vec (->> (for [x (:Items g)] (if (_equal (:d_day_name x) "Wednesday") (:price x) 0.0))))) :thu_sales (reduce + 0 (vec (->> (for [x (:Items g)] (if (_equal (:d_day_name x) "Thursday") (:price x) 0.0))))) :fri_sales (reduce + 0 (vec (->> (for [x (:Items g)] (if (_equal (:d_day_name x) "Friday") (:price x) 0.0))))) :sat_sales (reduce + 0 (vec (->> (for [x (:Items g)] (if (_equal (:d_day_name x) "Saturday") (:price x) 0.0)))))}) (_group_by records (fn [r] {:name (:s_store_name r) :id (:s_store_id r)})))) ;; list of
  (def result base) ;; list of
  (_json result)
  (test_TPCDS_Q43_simplified)
)

(-main)
