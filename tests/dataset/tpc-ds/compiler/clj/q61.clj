; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:46:42Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare sales promotions total result)

(defn test_TPCDS_Q61_simplified []
  (assert (_equal result 61) "expect failed")
)

(defn -main []
  (def sales [{:promo true :price 20} {:promo true :price 41} {:promo false :price 39}]) ;; list of
  (def promotions (reduce + 0 (vec (->> (for [s sales :when (:promo s)] (:price s)))))) ;; float
  (def total (reduce + 0 (vec (->> (for [s sales] (:price s)))))) ;; float
  (def result (/ (* promotions 100) total)) ;; float
  (_json result)
  (test_TPCDS_Q61_simplified)
)

(-main)
