; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:45:12Z
(ns main)

(defn _count [v]
  (cond
    (sequential? v) (count v)
    (and (map? v) (contains? v :Items)) (count (:Items v))
    :else (throw (ex-info "count() expects list or group" {}))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(defn _query [src joins opts]
  (let [items (atom (mapv vector src))]
    (doseq [j joins]
      (let [joined (atom [])]
        (if (and (:leftKey j) (:rightKey j))
          (let [idx (group-by (fn [it] (apply (:rightKey j) [it])) (:items j))
                seen (atom #{})]
            (doseq [left @items]
              (let [k (apply (:leftKey j) left)
                    rs (get idx k)]
                (if rs
                  (do
                    (swap! seen conj k)
                    (doseq [right rs]
                      (swap! joined conj (conj left right))))
                  (when (:left j)
                    (swap! joined conj (conj left nil)))))
            (when (:right j)
              (doseq [right (:items j)]
                (when-not (contains? @seen (apply (:rightKey j) [right]))
                  (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right]))))))
            (reset! items @joined))
          (cond
            (and (:right j) (:left j))
              (let [matched (boolean-array (count (:items j)))]
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [[ri right] (map-indexed vector (:items j))]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (aset matched ri true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (conj left nil))))
                (doseq [[ri right] (map-indexed vector (:items j))]
                  (when-not (aget matched ri)
                    (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
              (reset! items @joined)
            (:right j)
              (do
                (doseq [right (:items j)]
                  (let [m (atom false)]
                    (doseq [left @items]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
                (reset! items @joined))
            :else
              (do
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [right (:items j)]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when (and (:left j) (not @m))
                      (swap! joined conj (conj left nil))))
                (reset! items @joined)))))
    (let [it @items
          it (if-let [w (:where opts)] (vec (filter #(apply w %) it)) it)
          it (if-let [sk (:sortKey opts)]
               (vec (sort-by #(let [k (apply sk %)] (_sort_key k)) it))
               it)
          it (if (contains? opts :skip) (vec (drop (:skip opts) it)) it)
          it (if (contains? opts :take) (vec (take (:take opts) it)) it)]
      (mapv #(apply (:select opts) %) it)))))))))))))
(declare customer_address customer store_sales date_dim item target_month_seq result)

(defn test_TPCDS_Q6_result []
  (assert (_equal result [{:state "CA" :cnt 10}]) "expect failed")
)

(defn -main []
  (def customer_address [{:ca_address_sk 1 :ca_state "CA" :ca_zip "12345"}]) ;; list of
  (def customer [{:c_customer_sk 1 :c_current_addr_sk 1}]) ;; list of
  (def store_sales [{:ss_customer_sk 1 :ss_sold_date_sk 1 :ss_item_sk 1} {:ss_customer_sk 1 :ss_sold_date_sk 1 :ss_item_sk 1} {:ss_customer_sk 1 :ss_sold_date_sk 1 :ss_item_sk 1} {:ss_customer_sk 1 :ss_sold_date_sk 1 :ss_item_sk 1} {:ss_customer_sk 1 :ss_sold_date_sk 1 :ss_item_sk 1} {:ss_customer_sk 1 :ss_sold_date_sk 1 :ss_item_sk 1} {:ss_customer_sk 1 :ss_sold_date_sk 1 :ss_item_sk 1} {:ss_customer_sk 1 :ss_sold_date_sk 1 :ss_item_sk 1} {:ss_customer_sk 1 :ss_sold_date_sk 1 :ss_item_sk 1} {:ss_customer_sk 1 :ss_sold_date_sk 1 :ss_item_sk 1}]) ;; list of
  (def date_dim [{:d_date_sk 1 :d_year 1999 :d_moy 5 :d_month_seq 120}]) ;; list of
  (def item [{:i_item_sk 1 :i_category "A" :i_current_price 100.0} {:i_item_sk 2 :i_category "A" :i_current_price 50.0}]) ;; list of
  (def target_month_seq (apply max (vec (->> (for [d date_dim :when (and (_equal (:d_year d) 1999) (_equal (:d_moy d) 5))] (:d_month_seq d)))))) ;; int
  (def result (let [_src customer_address
      _rows (_query _src [
        {:items customer :leftKey (fn [a] (:ca_address_sk a)) :rightKey (fn [c] (:c_current_addr_sk c))}
        {:items store_sales :leftKey (fn [a c] (:c_customer_sk c)) :rightKey (fn [s] (:ss_customer_sk s))}
        {:items date_dim :leftKey (fn [a c s] (:ss_sold_date_sk s)) :rightKey (fn [d] (:d_date_sk d))}
        {:items item :leftKey (fn [a c s d] (:ss_item_sk s)) :rightKey (fn [i] (:i_item_sk i))}
      ] { :select (fn [a c s d i] [a c s d i]) :where (fn [a c s d i] (and (_equal (:d_month_seq d) target_month_seq) (> (:i_current_price i) (* 1.2 (let [xs (vec (->> (for [j item :when (_equal (:i_category j) (:i_category i))] (:i_current_price j))))] (if (empty? xs) 0 (/ (reduce + xs) (double (count xs))))))))) })
      _groups (_group_by _rows (fn [a c s d i] (:ca_state a)))
      ]
  (vec (map (fn [g] {:state (:key g) :cnt (count (:Items g))}) _groups)))) ;; list of
  (_json result)
  (test_TPCDS_Q6_result)
)

(-main)
