; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:46:40Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _union_all [a b]
  (vec (concat a b)))
(declare store_sales catalog_sales web_sales all_sales result)

(defn test_TPCDS_Q60_simplified []
  (assert (_equal result 60) "expect failed")
)

(defn -main []
  (def store_sales [{:item 1 :price 10} {:item 1 :price 20}]) ;; list of
  (def catalog_sales [{:item 1 :price 15}]) ;; list of
  (def web_sales [{:item 1 :price 15}]) ;; list of
  (def all_sales (_union_all (_union_all store_sales catalog_sales) web_sales)) ;; list of
  (def result (reduce + 0 (vec (->> (for [s all_sales] (:price s)))))) ;; float
  (_json result)
  (test_TPCDS_Q60_simplified)
)

(-main)
