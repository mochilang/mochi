; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:45:52Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare store_sales store_returns catalog_sales date_dim store item base result)

(defn StoreSale [ss_sold_date_sk ss_item_sk ss_store_sk ss_customer_sk ss_quantity ss_ticket_number]
  {:__name "StoreSale" :ss_sold_date_sk ss_sold_date_sk :ss_item_sk ss_item_sk :ss_store_sk ss_store_sk :ss_customer_sk ss_customer_sk :ss_quantity ss_quantity :ss_ticket_number ss_ticket_number}
)


(defn StoreReturn [sr_returned_date_sk sr_item_sk sr_customer_sk sr_ticket_number sr_return_quantity]
  {:__name "StoreReturn" :sr_returned_date_sk sr_returned_date_sk :sr_item_sk sr_item_sk :sr_customer_sk sr_customer_sk :sr_ticket_number sr_ticket_number :sr_return_quantity sr_return_quantity}
)


(defn CatalogSale [cs_sold_date_sk cs_item_sk cs_bill_customer_sk cs_quantity]
  {:__name "CatalogSale" :cs_sold_date_sk cs_sold_date_sk :cs_item_sk cs_item_sk :cs_bill_customer_sk cs_bill_customer_sk :cs_quantity cs_quantity}
)


(defn DateDim [d_date_sk d_moy d_year]
  {:__name "DateDim" :d_date_sk d_date_sk :d_moy d_moy :d_year d_year}
)


(defn Store [s_store_sk s_store_id s_store_name]
  {:__name "Store" :s_store_sk s_store_sk :s_store_id s_store_id :s_store_name s_store_name}
)


(defn Item [i_item_sk i_item_id i_item_desc]
  {:__name "Item" :i_item_sk i_item_sk :i_item_id i_item_id :i_item_desc i_item_desc}
)


(defn test_TPCDS_Q29_quantity_summary []
  (assert (_equal result [{:i_item_id "ITEM1" :i_item_desc "Desc1" :s_store_id "S1" :s_store_name "Store1" :store_sales_quantity 10 :store_returns_quantity 2 :catalog_sales_quantity 5}]) "expect failed")
)

(defn -main []
  (def store_sales [{:ss_sold_date_sk 1 :ss_item_sk 1 :ss_store_sk 1 :ss_customer_sk 1 :ss_quantity 10 :ss_ticket_number 1}]) ;; list of
  (def store_returns [{:sr_returned_date_sk 2 :sr_item_sk 1 :sr_customer_sk 1 :sr_ticket_number 1 :sr_return_quantity 2}]) ;; list of
  (def catalog_sales [{:cs_sold_date_sk 3 :cs_item_sk 1 :cs_bill_customer_sk 1 :cs_quantity 5}]) ;; list of
  (def date_dim [{:d_date_sk 1 :d_moy 4 :d_year 1999} {:d_date_sk 2 :d_moy 5 :d_year 1999} {:d_date_sk 3 :d_moy 5 :d_year 2000}]) ;; list of
  (def store [{:s_store_sk 1 :s_store_id "S1" :s_store_name "Store1"}]) ;; list of
  (def item [{:i_item_sk 1 :i_item_id "ITEM1" :i_item_desc "Desc1"}]) ;; list of
  (def base (vec (->> (for [ss store_sales sr store_returns :when (and (_equal (:ss_ticket_number ss) (:sr_ticket_number sr)) (_equal (:ss_item_sk ss) (:sr_item_sk sr))) cs catalog_sales :when (and (_equal (:sr_customer_sk sr) (:cs_bill_customer_sk cs)) (_equal (:sr_item_sk sr) (:cs_item_sk cs))) d1 date_dim :when (_equal (:d_date_sk d1) (:ss_sold_date_sk ss)) d2 date_dim :when (_equal (:d_date_sk d2) (:sr_returned_date_sk sr)) d3 date_dim :when (_equal (:d_date_sk d3) (:cs_sold_date_sk cs)) :when (and (and (and (and (_equal (:d_moy d1) 4) (_equal (:d_year d1) 1999)) (>= (:d_moy d2) 4)) (<= (:d_moy d2) 7)) (some #(= (:d_year d3) %) [1999 2000 2001])) s store :when (_equal (:s_store_sk s) (:ss_store_sk ss)) i item :when (_equal (:i_item_sk i) (:ss_item_sk ss))] {:ss_quantity (:ss_quantity ss) :sr_return_quantity (:sr_return_quantity sr) :cs_quantity (:cs_quantity cs) :i_item_id (:i_item_id i) :i_item_desc (:i_item_desc i) :s_store_id (:s_store_id s) :s_store_name (:s_store_name s)})))) ;; list of
  (def result (map (fn [g] {:i_item_id (:item_id (:key g)) :i_item_desc (:item_desc (:key g)) :s_store_id (:s_store_id (:key g)) :s_store_name (:s_store_name (:key g)) :store_sales_quantity (reduce + 0 (vec (->> (for [x (:Items g)] (:ss_quantity x))))) :store_returns_quantity (reduce + 0 (vec (->> (for [x (:Items g)] (:sr_return_quantity x))))) :catalog_sales_quantity (reduce + 0 (vec (->> (for [x (:Items g)] (:cs_quantity x)))))}) (_group_by base (fn [b] {:item_id (:i_item_id b) :item_desc (:i_item_desc b) :s_store_id (:s_store_id b) :s_store_name (:s_store_name b)})))) ;; list of
  (_json result)
  (test_TPCDS_Q29_quantity_summary)
)

(-main)
