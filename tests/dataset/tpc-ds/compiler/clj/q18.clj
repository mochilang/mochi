; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:45:32Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare catalog_sales customer_demographics customer customer_address date_dim item joined result)

(defn CatalogSale [cs_quantity cs_list_price cs_coupon_amt cs_sales_price cs_net_profit cs_bill_cdemo_sk cs_bill_customer_sk cs_sold_date_sk cs_item_sk]
  {:__name "CatalogSale" :cs_quantity cs_quantity :cs_list_price cs_list_price :cs_coupon_amt cs_coupon_amt :cs_sales_price cs_sales_price :cs_net_profit cs_net_profit :cs_bill_cdemo_sk cs_bill_cdemo_sk :cs_bill_customer_sk cs_bill_customer_sk :cs_sold_date_sk cs_sold_date_sk :cs_item_sk cs_item_sk}
)


(defn CustomerDemographics [cd_demo_sk cd_gender cd_education_status cd_dep_count]
  {:__name "CustomerDemographics" :cd_demo_sk cd_demo_sk :cd_gender cd_gender :cd_education_status cd_education_status :cd_dep_count cd_dep_count}
)


(defn Customer [c_customer_sk c_current_cdemo_sk c_current_addr_sk c_birth_year c_birth_month]
  {:__name "Customer" :c_customer_sk c_customer_sk :c_current_cdemo_sk c_current_cdemo_sk :c_current_addr_sk c_current_addr_sk :c_birth_year c_birth_year :c_birth_month c_birth_month}
)


(defn CustomerAddress [ca_address_sk ca_country ca_state ca_county]
  {:__name "CustomerAddress" :ca_address_sk ca_address_sk :ca_country ca_country :ca_state ca_state :ca_county ca_county}
)


(defn DateDim [d_date_sk d_year]
  {:__name "DateDim" :d_date_sk d_date_sk :d_year d_year}
)


(defn Item [i_item_sk i_item_id]
  {:__name "Item" :i_item_sk i_item_sk :i_item_id i_item_id}
)


(defn test_TPCDS_Q18_averages []
  (assert (_equal result [{:i_item_id "I1" :ca_country "US" :ca_state "CA" :ca_county "County1" :agg1 1.0 :agg2 10.0 :agg3 1.0 :agg4 9.0 :agg5 2.0 :agg6 1980.0 :agg7 2.0}]) "expect failed")
)

(defn -main []
  (def catalog_sales [{:cs_quantity 1 :cs_list_price 10.0 :cs_coupon_amt 1.0 :cs_sales_price 9.0 :cs_net_profit 2.0 :cs_bill_cdemo_sk 1 :cs_bill_customer_sk 1 :cs_sold_date_sk 1 :cs_item_sk 1}]) ;; list of
  (def customer_demographics [{:cd_demo_sk 1 :cd_gender "M" :cd_education_status "College" :cd_dep_count 2} {:cd_demo_sk 2 :cd_gender "F" :cd_education_status "College" :cd_dep_count 2}]) ;; list of
  (def customer [{:c_customer_sk 1 :c_current_cdemo_sk 2 :c_current_addr_sk 1 :c_birth_year 1980 :c_birth_month 1}]) ;; list of
  (def customer_address [{:ca_address_sk 1 :ca_country "US" :ca_state "CA" :ca_county "County1"}]) ;; list of
  (def date_dim [{:d_date_sk 1 :d_year 1999}]) ;; list of
  (def item [{:i_item_sk 1 :i_item_id "I1"}]) ;; list of
  (def joined (vec (->> (for [cs catalog_sales cd1 customer_demographics :when (and (and (_equal (:cs_bill_cdemo_sk cs) (:cd_demo_sk cd1)) (_equal (:cd_gender cd1) "M")) (_equal (:cd_education_status cd1) "College")) c customer :when (_equal (:cs_bill_customer_sk cs) (:c_customer_sk c)) cd2 customer_demographics :when (_equal (:c_current_cdemo_sk c) (:cd_demo_sk cd2)) ca customer_address :when (_equal (:c_current_addr_sk c) (:ca_address_sk ca)) d date_dim :when (and (_equal (:cs_sold_date_sk cs) (:d_date_sk d)) (_equal (:d_year d) 1999)) i item :when (_equal (:cs_item_sk cs) (:i_item_sk i))] {:i_item_id (:i_item_id i) :ca_country (:ca_country ca) :ca_state (:ca_state ca) :ca_county (:ca_county ca) :q (:cs_quantity cs) :lp (:cs_list_price cs) :cp (:cs_coupon_amt cs) :sp (:cs_sales_price cs) :np (:cs_net_profit cs) :by (:c_birth_year c) :dep (:cd_dep_count cd1)})))) ;; list of
  (def result (map (fn [g] {:i_item_id (:i_item_id (:key g)) :ca_country (:ca_country (:key g)) :ca_state (:ca_state (:key g)) :ca_county (:ca_county (:key g)) :agg1 (let [xs (vec (->> (for [x (:Items g)] (:q x))))] (if (empty? xs) 0 (/ (reduce + xs) (double (count xs))))) :agg2 (let [xs (vec (->> (for [x (:Items g)] (:lp x))))] (if (empty? xs) 0 (/ (reduce + xs) (double (count xs))))) :agg3 (let [xs (vec (->> (for [x (:Items g)] (:cp x))))] (if (empty? xs) 0 (/ (reduce + xs) (double (count xs))))) :agg4 (let [xs (vec (->> (for [x (:Items g)] (:sp x))))] (if (empty? xs) 0 (/ (reduce + xs) (double (count xs))))) :agg5 (let [xs (vec (->> (for [x (:Items g)] (:np x))))] (if (empty? xs) 0 (/ (reduce + xs) (double (count xs))))) :agg6 (let [xs (vec (->> (for [x (:Items g)] (:by x))))] (if (empty? xs) 0 (/ (reduce + xs) (double (count xs))))) :agg7 (let [xs (vec (->> (for [x (:Items g)] (:dep x))))] (if (empty? xs) 0 (/ (reduce + xs) (double (count xs)))))}) (_group_by joined (fn [j] {:i_item_id (:i_item_id j) :ca_country (:ca_country j) :ca_state (:ca_state j) :ca_county (:ca_county j)})))) ;; list of
  (_json result)
  (test_TPCDS_Q18_averages)
)

(-main)
