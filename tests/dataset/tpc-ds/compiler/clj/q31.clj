; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:45:55Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare store_sales web_sales counties result)

(defn test_TPCDS_Q31_simplified []
  (assert (_equal result [{:ca_county "A" :d_year 2000 :web_q1_q2_increase 1.5 :store_q1_q2_increase 1.2 :web_q2_q3_increase 1.6666666666666667 :store_q2_q3_increase 1.3333333333333333}]) "expect failed")
)

(defn -main []
  (def store_sales [{:ca_county "A" :d_qoy 1 :d_year 2000 :ss_ext_sales_price 100.0} {:ca_county "A" :d_qoy 2 :d_year 2000 :ss_ext_sales_price 120.0} {:ca_county "A" :d_qoy 3 :d_year 2000 :ss_ext_sales_price 160.0} {:ca_county "B" :d_qoy 1 :d_year 2000 :ss_ext_sales_price 80.0} {:ca_county "B" :d_qoy 2 :d_year 2000 :ss_ext_sales_price 90.0} {:ca_county "B" :d_qoy 3 :d_year 2000 :ss_ext_sales_price 100.0}]) ;; list of
  (def web_sales [{:ca_county "A" :d_qoy 1 :d_year 2000 :ws_ext_sales_price 100.0} {:ca_county "A" :d_qoy 2 :d_year 2000 :ws_ext_sales_price 150.0} {:ca_county "A" :d_qoy 3 :d_year 2000 :ws_ext_sales_price 250.0} {:ca_county "B" :d_qoy 1 :d_year 2000 :ws_ext_sales_price 80.0} {:ca_county "B" :d_qoy 2 :d_year 2000 :ws_ext_sales_price 90.0} {:ca_county "B" :d_qoy 3 :d_year 2000 :ws_ext_sales_price 95.0}]) ;; list of
  (def counties ["A" "B"]) ;; list of string
  (def result []) ;; list of any
  (loop [_tmp0 (seq counties)]
    (when _tmp0
      (let [county (clojure.core/first _tmp0)]
        (let [r (try
          (def ss1 (reduce + 0 (vec (->> (for [s store_sales :when (and (_equal (:ca_county s) county) (_equal (:d_qoy s) 1))] (:ss_ext_sales_price s)))))) ;; float
          (def ss2 (reduce + 0 (vec (->> (for [s store_sales :when (and (_equal (:ca_county s) county) (_equal (:d_qoy s) 2))] (:ss_ext_sales_price s)))))) ;; float
          (def ss3 (reduce + 0 (vec (->> (for [s store_sales :when (and (_equal (:ca_county s) county) (_equal (:d_qoy s) 3))] (:ss_ext_sales_price s)))))) ;; float
          (def ws1 (reduce + 0 (vec (->> (for [w web_sales :when (and (_equal (:ca_county w) county) (_equal (:d_qoy w) 1))] (:ws_ext_sales_price w)))))) ;; float
          (def ws2 (reduce + 0 (vec (->> (for [w web_sales :when (and (_equal (:ca_county w) county) (_equal (:d_qoy w) 2))] (:ws_ext_sales_price w)))))) ;; float
          (def ws3 (reduce + 0 (vec (->> (for [w web_sales :when (and (_equal (:ca_county w) county) (_equal (:d_qoy w) 3))] (:ws_ext_sales_price w)))))) ;; float
          (def web_g1 (/ ws2 ws1)) ;; float
          (def store_g1 (/ ss2 ss1)) ;; float
          (def web_g2 (/ ws3 ws2)) ;; float
          (def store_g2 (/ ss3 ss2)) ;; float
          (when (and (> web_g1 store_g1) (> web_g2 store_g2))
            (def result (conj result {:ca_county county :d_year 2000 :web_q1_q2_increase web_g1 :store_q1_q2_increase store_g1 :web_q2_q3_increase web_g2 :store_q2_q3_increase store_g2})) ;; list of any
          )
          :next
        (catch clojure.lang.ExceptionInfo e
          (cond
            (= (.getMessage e) "continue") :next
            (= (.getMessage e) "break") :break
            :else (throw e))
          )
        )]
      (cond
        (= r :break) nil
        :else (recur (next _tmp0))
      )
    )
  )
)
)
(_json result)
(test_TPCDS_Q31_simplified)
)

(-main)
