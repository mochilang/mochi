; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:45:57Z
(ns main)

(defn _sum [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "sum() expects list or group" {})))]
    (reduce + 0 lst))
  )

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(declare item date_dim customer_address store_sales catalog_sales web_sales month year union_sales result)

(defn test_TPCDS_Q33_simplified []
  (assert (_equal result [{:i_manufact_id 1 :total_sales 150.0} {:i_manufact_id 2 :total_sales 50.0}]) "expect failed")
)

(defn -main []
  (def item [{:i_item_sk 1 :i_manufact_id 1 :i_category "Books"} {:i_item_sk 2 :i_manufact_id 2 :i_category "Books"}]) ;; list of
  (def date_dim [{:d_date_sk 1 :d_year 2000 :d_moy 1}]) ;; list of
  (def customer_address [{:ca_address_sk 1 :ca_gmt_offset (- 5)} {:ca_address_sk 2 :ca_gmt_offset (- 5)}]) ;; list of
  (def store_sales [{:ss_item_sk 1 :ss_ext_sales_price 100.0 :ss_sold_date_sk 1 :ss_addr_sk 1} {:ss_item_sk 2 :ss_ext_sales_price 50.0 :ss_sold_date_sk 1 :ss_addr_sk 2}]) ;; list of
  (def catalog_sales [{:cs_item_sk 1 :cs_ext_sales_price 20.0 :cs_sold_date_sk 1 :cs_bill_addr_sk 1}]) ;; list of
  (def web_sales [{:ws_item_sk 1 :ws_ext_sales_price 30.0 :ws_sold_date_sk 1 :ws_bill_addr_sk 1}]) ;; list of
  (def month 1) ;; int
  (def year 2000) ;; int
  (def union_sales (concat (vec (->> (for [ss store_sales d date_dim :when (_equal (:ss_sold_date_sk ss) (:d_date_sk d)) ca customer_address :when (_equal (:ss_addr_sk ss) (:ca_address_sk ca)) i item :when (_equal (:ss_item_sk ss) (:i_item_sk i)) :when (and (and (and (_equal (:i_category i) "Books") (_equal (:d_year d) year)) (_equal (:d_moy d) month)) (_equal (:ca_gmt_offset ca) (- 5)))] {:manu (:i_manufact_id i) :price (:ss_ext_sales_price ss)}))) (vec (->> (for [cs catalog_sales d date_dim :when (_equal (:cs_sold_date_sk cs) (:d_date_sk d)) ca customer_address :when (_equal (:cs_bill_addr_sk cs) (:ca_address_sk ca)) i item :when (_equal (:cs_item_sk cs) (:i_item_sk i)) :when (and (and (and (_equal (:i_category i) "Books") (_equal (:d_year d) year)) (_equal (:d_moy d) month)) (_equal (:ca_gmt_offset ca) (- 5)))] {:manu (:i_manufact_id i) :price (:cs_ext_sales_price cs)}))) (vec (->> (for [ws web_sales d date_dim :when (_equal (:ws_sold_date_sk ws) (:d_date_sk d)) ca customer_address :when (_equal (:ws_bill_addr_sk ws) (:ca_address_sk ca)) i item :when (_equal (:ws_item_sk ws) (:i_item_sk i)) :when (and (and (and (_equal (:i_category i) "Books") (_equal (:d_year d) year)) (_equal (:d_moy d) month)) (_equal (:ca_gmt_offset ca) (- 5)))] {:manu (:i_manufact_id i) :price (:ws_ext_sales_price ws)}))))) ;; list of any
  (def result (let [_src union_sales
      _groups (_group_by _src (fn [s] (:manu s)))
      ]
  (->> _groups (sort-by (fn [g] (_sort_key (- (_sum (vec (->> (for [x (:Items g)] (:price x))))))))) (map (fn [g] {:i_manufact_id (:key g) :total_sales (_sum (vec (->> (for [x (:Items g)] (:price x)))))})) vec))) ;; list of
  (_json result)
  (test_TPCDS_Q33_simplified)
)

(-main)
