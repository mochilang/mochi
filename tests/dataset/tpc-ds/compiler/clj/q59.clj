; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:46:39Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare sales_year1 sales_year2 join result)

(defn test_TPCDS_Q59_simplified []
  (assert (_equal result [{:s_store_id1 1 :ratio 1.5}]) "expect failed")
)

(defn -main []
  (def sales_year1 [{:week 1 :store 1 :amount 100.0}]) ;; list of
  (def sales_year2 [{:week 53 :store 1 :amount 150.0}]) ;; list of
  (def join (vec (->> (for [y1 sales_year1 y2 sales_year2 :when (and (_equal (:store y1) (:store y2)) (_equal (:week y1) (- (:week y2) 52)))] {:s_store_id1 (:store y1) :ratio (/ (:amount y2) (:amount y1))})))) ;; list of
  (def result join) ;; list of
  (_json result)
  (test_TPCDS_Q59_simplified)
)

(-main)
