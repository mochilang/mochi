; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:26Z
(ns main)

(defn _sum [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "sum() expects list or group" {})))]
    (reduce + 0 lst))
  )

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(defn _query [src joins opts]
  (let [items (atom (mapv vector src))]
    (doseq [j joins]
      (let [joined (atom [])]
        (if (and (:leftKey j) (:rightKey j))
          (let [idx (group-by (fn [it] (apply (:rightKey j) [it])) (:items j))
                seen (atom #{})]
            (doseq [left @items]
              (let [k (apply (:leftKey j) left)
                    rs (get idx k)]
                (if rs
                  (do
                    (swap! seen conj k)
                    (doseq [right rs]
                      (swap! joined conj (conj left right))))
                  (when (:left j)
                    (swap! joined conj (conj left nil)))))
            (when (:right j)
              (doseq [right (:items j)]
                (when-not (contains? @seen (apply (:rightKey j) [right]))
                  (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right]))))))
            (reset! items @joined))
          (cond
            (and (:right j) (:left j))
              (let [matched (boolean-array (count (:items j)))]
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [[ri right] (map-indexed vector (:items j))]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (aset matched ri true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (conj left nil))))
                (doseq [[ri right] (map-indexed vector (:items j))]
                  (when-not (aget matched ri)
                    (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
              (reset! items @joined)
            (:right j)
              (do
                (doseq [right (:items j)]
                  (let [m (atom false)]
                    (doseq [left @items]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
                (reset! items @joined))
            :else
              (do
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [right (:items j)]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when (and (:left j) (not @m))
                      (swap! joined conj (conj left nil))))
                (reset! items @joined)))))
    (let [it @items
          it (if-let [w (:where opts)] (vec (filter #(apply w %) it)) it)
          it (if-let [sk (:sortKey opts)]
               (vec (sort-by #(let [k (apply sk %)] (_sort_key k)) it))
               it)
          it (if (contains? opts :skip) (vec (drop (:skip opts) it)) it)
          it (if (contains? opts :take) (vec (take (:take opts) it)) it)]
      (mapv #(apply (:select opts) %) it)))))))))))))
(declare call_center catalog_returns date_dim customer customer_demographics household_demographics customer_address result)

(defn CallCenter [cc_call_center_sk cc_call_center_id cc_name cc_manager]
  {:__name "CallCenter" :cc_call_center_sk cc_call_center_sk :cc_call_center_id cc_call_center_id :cc_name cc_name :cc_manager cc_manager}
)


(defn CatalogReturn [cr_call_center_sk cr_returned_date_sk cr_returning_customer_sk cr_net_loss]
  {:__name "CatalogReturn" :cr_call_center_sk cr_call_center_sk :cr_returned_date_sk cr_returned_date_sk :cr_returning_customer_sk cr_returning_customer_sk :cr_net_loss cr_net_loss}
)


(defn DateDim [d_date_sk d_year d_moy]
  {:__name "DateDim" :d_date_sk d_date_sk :d_year d_year :d_moy d_moy}
)


(defn Customer [c_customer_sk c_current_cdemo_sk c_current_hdemo_sk c_current_addr_sk]
  {:__name "Customer" :c_customer_sk c_customer_sk :c_current_cdemo_sk c_current_cdemo_sk :c_current_hdemo_sk c_current_hdemo_sk :c_current_addr_sk c_current_addr_sk}
)


(defn CustomerAddress [ca_address_sk ca_gmt_offset]
  {:__name "CustomerAddress" :ca_address_sk ca_address_sk :ca_gmt_offset ca_gmt_offset}
)


(defn CustomerDemographics [cd_demo_sk cd_marital_status cd_education_status]
  {:__name "CustomerDemographics" :cd_demo_sk cd_demo_sk :cd_marital_status cd_marital_status :cd_education_status cd_education_status}
)


(defn HouseholdDemographics [hd_demo_sk hd_buy_potential]
  {:__name "HouseholdDemographics" :hd_demo_sk hd_demo_sk :hd_buy_potential hd_buy_potential}
)


(defn test_TPCDS_Q91_returns []
  (assert (_equal result {:Call_Center "CC1" :Call_Center_Name "Main" :Manager "Alice" :Returns_Loss 10.0}) "expect failed")
)

(defn -main []
  (def call_center [{:cc_call_center_sk 1 :cc_call_center_id "CC1" :cc_name "Main" :cc_manager "Alice"}]) ;; list of
  (def catalog_returns [{:cr_call_center_sk 1 :cr_returned_date_sk 1 :cr_returning_customer_sk 1 :cr_net_loss 10.0}]) ;; list of
  (def date_dim [{:d_date_sk 1 :d_year 2001 :d_moy 5}]) ;; list of
  (def customer [{:c_customer_sk 1 :c_current_cdemo_sk 1 :c_current_hdemo_sk 1 :c_current_addr_sk 1}]) ;; list of
  (def customer_demographics [{:cd_demo_sk 1 :cd_marital_status "M" :cd_education_status "Unknown"}]) ;; list of
  (def household_demographics [{:hd_demo_sk 1 :hd_buy_potential "1001-5000"}]) ;; list of
  (def customer_address [{:ca_address_sk 1 :ca_gmt_offset (- 6)}]) ;; list of
  (def result (first (let [_src call_center
      _rows (_query _src [
        {:items catalog_returns :leftKey (fn [cc] (:cc_call_center_sk cc)) :rightKey (fn [cr] (:cr_call_center_sk cr))}
        {:items date_dim :leftKey (fn [cc cr] (:cr_returned_date_sk cr)) :rightKey (fn [d] (:d_date_sk d))}
        {:items customer :leftKey (fn [cc cr d] (:cr_returning_customer_sk cr)) :rightKey (fn [c] (:c_customer_sk c))}
        {:items customer_demographics :leftKey (fn [cc cr d c] (:c_current_cdemo_sk c)) :rightKey (fn [cd] (:cd_demo_sk cd))}
        {:items household_demographics :leftKey (fn [cc cr d c cd] (:c_current_hdemo_sk c)) :rightKey (fn [hd] (:hd_demo_sk hd))}
        {:items customer_address :leftKey (fn [cc cr d c cd hd] (:c_current_addr_sk c)) :rightKey (fn [ca] (:ca_address_sk ca))}
      ] { :select (fn [cc cr d c cd hd ca] [cc cr d c cd hd ca]) :where (fn [cc cr d c cd hd ca] (and (and (and (and (and (_equal (:d_year d) 2001) (_equal (:d_moy d) 5)) (_equal (:cd_marital_status cd) "M")) (_equal (:cd_education_status cd) "Unknown")) (_equal (:hd_buy_potential hd) "1001-5000")) (_equal (:ca_gmt_offset ca) (- 6)))) })
      _groups (_group_by _rows (fn [cc cr d c cd hd ca] {:id (:cc_call_center_id cc) :name (:cc_name cc) :mgr (:cc_manager cc)}))
      ]
  (vec (map (fn [g] {:Call_Center (:id (:key g)) :Call_Center_Name (:name (:key g)) :Manager (:mgr (:key g)) :Returns_Loss (_sum (vec (->> (for [x (:Items g)] (:cr_net_loss x)))))}) _groups))))) ;;
  (_json result)
  (test_TPCDS_Q91_returns)
)

(-main)
