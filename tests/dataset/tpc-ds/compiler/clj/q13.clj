; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:45:24Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare store_sales store customer_demographics household_demographics customer_address date_dim filtered result)

(defn StoreSale [ss_store_sk ss_sold_date_sk ss_hdemo_sk ss_cdemo_sk ss_addr_sk ss_sales_price ss_net_profit ss_quantity ss_ext_sales_price ss_ext_wholesale_cost]
  {:__name "StoreSale" :ss_store_sk ss_store_sk :ss_sold_date_sk ss_sold_date_sk :ss_hdemo_sk ss_hdemo_sk :ss_cdemo_sk ss_cdemo_sk :ss_addr_sk ss_addr_sk :ss_sales_price ss_sales_price :ss_net_profit ss_net_profit :ss_quantity ss_quantity :ss_ext_sales_price ss_ext_sales_price :ss_ext_wholesale_cost ss_ext_wholesale_cost}
)


(defn Store [s_store_sk s_state]
  {:__name "Store" :s_store_sk s_store_sk :s_state s_state}
)


(defn CustomerDemographics [cd_demo_sk cd_marital_status cd_education_status]
  {:__name "CustomerDemographics" :cd_demo_sk cd_demo_sk :cd_marital_status cd_marital_status :cd_education_status cd_education_status}
)


(defn HouseholdDemographics [hd_demo_sk hd_dep_count]
  {:__name "HouseholdDemographics" :hd_demo_sk hd_demo_sk :hd_dep_count hd_dep_count}
)


(defn CustomerAddress [ca_address_sk ca_country ca_state]
  {:__name "CustomerAddress" :ca_address_sk ca_address_sk :ca_country ca_country :ca_state ca_state}
)


(defn DateDim [d_date_sk d_year]
  {:__name "DateDim" :d_date_sk d_date_sk :d_year d_year}
)


(defn test_TPCDS_Q13_averages []
  (assert (_equal result [{:avg_ss_quantity 10.0 :avg_ss_ext_sales_price 100.0 :avg_ss_ext_wholesale_cost 50.0 :sum_ss_ext_wholesale_cost 50.0}]) "expect failed")
)

(defn -main []
  (def store_sales [{:ss_store_sk 1 :ss_sold_date_sk 1 :ss_hdemo_sk 1 :ss_cdemo_sk 1 :ss_addr_sk 1 :ss_sales_price 120.0 :ss_net_profit 150.0 :ss_quantity 10 :ss_ext_sales_price 100.0 :ss_ext_wholesale_cost 50.0}]) ;; list of
  (def store [{:s_store_sk 1 :s_state "CA"}]) ;; list of
  (def customer_demographics [{:cd_demo_sk 1 :cd_marital_status "M1" :cd_education_status "ES1"}]) ;; list of
  (def household_demographics [{:hd_demo_sk 1 :hd_dep_count 3}]) ;; list of
  (def customer_address [{:ca_address_sk 1 :ca_country "United States" :ca_state "CA"}]) ;; list of
  (def date_dim [{:d_date_sk 1 :d_year 2001}]) ;; list of
  (def filtered (vec (->> (for [ss store_sales s store :when (_equal (:ss_store_sk ss) (:s_store_sk s)) cd customer_demographics :when (and (and (_equal (:ss_cdemo_sk ss) (:cd_demo_sk cd)) (_equal (:cd_marital_status cd) "M1")) (_equal (:cd_education_status cd) "ES1")) hd household_demographics :when (and (_equal (:ss_hdemo_sk ss) (:hd_demo_sk hd)) (_equal (:hd_dep_count hd) 3)) ca customer_address :when (and (and (_equal (:ss_addr_sk ss) (:ca_address_sk ca)) (_equal (:ca_country ca) "United States")) (_equal (:ca_state ca) "CA")) d date_dim :when (and (_equal (:ss_sold_date_sk ss) (:d_date_sk d)) (_equal (:d_year d) 2001))] ss)))) ;; list of
  (def result (map (fn [g] {:avg_ss_quantity (let [xs (vec (->> (for [x (:Items g)] (:ss_quantity x))))] (if (empty? xs) 0 (/ (reduce + xs) (double (count xs))))) :avg_ss_ext_sales_price (let [xs (vec (->> (for [x (:Items g)] (:ss_ext_sales_price x))))] (if (empty? xs) 0 (/ (reduce + xs) (double (count xs))))) :avg_ss_ext_wholesale_cost (let [xs (vec (->> (for [x (:Items g)] (:ss_ext_wholesale_cost x))))] (if (empty? xs) 0 (/ (reduce + xs) (double (count xs))))) :sum_ss_ext_wholesale_cost (reduce + 0 (vec (->> (for [x (:Items g)] (:ss_ext_wholesale_cost x)))))}) (_group_by filtered (fn [r] {})))) ;; list of
  (_json result)
  (test_TPCDS_Q13_averages)
)

(-main)
