; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:45:09Z
(ns main)

(defn _sum [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "sum() expects list or group" {})))]
    (reduce + 0 lst))
  )

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(defn _union_all [a b]
  (vec (concat a b)))
(defn _query [src joins opts]
  (let [items (atom (mapv vector src))]
    (doseq [j joins]
      (let [joined (atom [])]
        (if (and (:leftKey j) (:rightKey j))
          (let [idx (group-by (fn [it] (apply (:rightKey j) [it])) (:items j))
                seen (atom #{})]
            (doseq [left @items]
              (let [k (apply (:leftKey j) left)
                    rs (get idx k)]
                (if rs
                  (do
                    (swap! seen conj k)
                    (doseq [right rs]
                      (swap! joined conj (conj left right))))
                  (when (:left j)
                    (swap! joined conj (conj left nil)))))
            (when (:right j)
              (doseq [right (:items j)]
                (when-not (contains? @seen (apply (:rightKey j) [right]))
                  (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right]))))))
            (reset! items @joined))
          (cond
            (and (:right j) (:left j))
              (let [matched (boolean-array (count (:items j)))]
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [[ri right] (map-indexed vector (:items j))]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (aset matched ri true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (conj left nil))))
                (doseq [[ri right] (map-indexed vector (:items j))]
                  (when-not (aget matched ri)
                    (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
              (reset! items @joined)
            (:right j)
              (do
                (doseq [right (:items j)]
                  (let [m (atom false)]
                    (doseq [left @items]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
                (reset! items @joined))
            :else
              (do
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [right (:items j)]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when (and (:left j) (not @m))
                      (swap! joined conj (conj left nil))))
                (reset! items @joined)))))
    (let [it @items
          it (if-let [w (:where opts)] (vec (filter #(apply w %) it)) it)
          it (if-let [sk (:sortKey opts)]
               (vec (sort-by #(let [k (apply sk %)] (_sort_key k)) it))
               it)
          it (if (contains? opts :skip) (vec (drop (:skip opts) it)) it)
          it (if (contains? opts :take) (vec (take (:take opts) it)) it)]
      (mapv #(apply (:select opts) %) it)))))))))))))
(declare customer store_sales catalog_sales web_sales date_dim year_total result)

(defn test_TPCDS_Q4_result []
  (assert (_equal result [{:customer_id "C1" :customer_first_name "Alice" :customer_last_name "A" :customer_login "alice"}]) "expect failed")
)

(defn -main []
  (def customer [{:c_customer_sk 1 :c_customer_id "C1" :c_first_name "Alice" :c_last_name "A" :c_login "alice"}]) ;; list of
  (def store_sales [{:ss_customer_sk 1 :ss_sold_date_sk 1 :ss_ext_list_price 10.0 :ss_ext_wholesale_cost 5.0 :ss_ext_discount_amt 0.0 :ss_ext_sales_price 10.0} {:ss_customer_sk 1 :ss_sold_date_sk 2 :ss_ext_list_price 20.0 :ss_ext_wholesale_cost 5.0 :ss_ext_discount_amt 0.0 :ss_ext_sales_price 20.0}]) ;; list of
  (def catalog_sales [{:cs_bill_customer_sk 1 :cs_sold_date_sk 1 :cs_ext_list_price 10.0 :cs_ext_wholesale_cost 2.0 :cs_ext_discount_amt 0.0 :cs_ext_sales_price 10.0} {:cs_bill_customer_sk 1 :cs_sold_date_sk 2 :cs_ext_list_price 30.0 :cs_ext_wholesale_cost 2.0 :cs_ext_discount_amt 0.0 :cs_ext_sales_price 30.0}]) ;; list of
  (def web_sales [{:ws_bill_customer_sk 1 :ws_sold_date_sk 1 :ws_ext_list_price 10.0 :ws_ext_wholesale_cost 5.0 :ws_ext_discount_amt 0.0 :ws_ext_sales_price 10.0} {:ws_bill_customer_sk 1 :ws_sold_date_sk 2 :ws_ext_list_price 12.0 :ws_ext_wholesale_cost 5.0 :ws_ext_discount_amt 0.0 :ws_ext_sales_price 12.0}]) ;; list of
  (def date_dim [{:d_date_sk 1 :d_year 2001} {:d_date_sk 2 :d_year 2002}]) ;; list of
  (def year_total (_union_all (_union_all (let [_src customer
      _rows (_query _src [
        {:items store_sales :leftKey (fn [c] (:c_customer_sk c)) :rightKey (fn [s] (:ss_customer_sk s))}
        {:items date_dim :leftKey (fn [c s] (:ss_sold_date_sk s)) :rightKey (fn [d] (:d_date_sk d))}
      ] { :select (fn [c s d] [c s d]) })
      _groups (_group_by _rows (fn [c s d] {:id (:c_customer_id c) :first (:c_first_name c) :last (:c_last_name c) :login (:c_login c) :year (:d_year d)}))
      ]
  (vec (map (fn [g] {:customer_id (:id (:key g)) :customer_first_name (:first (:key g)) :customer_last_name (:last (:key g)) :customer_login (:login (:key g)) :dyear (:year (:key g)) :year_total (_sum (vec (->> (for [x (:Items g)] (/ (+ (- (- (:ss_ext_list_price x) (:ss_ext_wholesale_cost x)) (:ss_ext_discount_amt x)) (:ss_ext_sales_price x)) 2))))) :sale_type "s"}) _groups))) (let [_src customer
      _rows (_query _src [
        {:items catalog_sales :leftKey (fn [c] (:c_customer_sk c)) :rightKey (fn [cs] (:cs_bill_customer_sk cs))}
        {:items date_dim :leftKey (fn [c cs] (:cs_sold_date_sk cs)) :rightKey (fn [d] (:d_date_sk d))}
      ] { :select (fn [c cs d] [c cs d]) })
      _groups (_group_by _rows (fn [c cs d] {:id (:c_customer_id c) :first (:c_first_name c) :last (:c_last_name c) :login (:c_login c) :year (:d_year d)}))
      ]
  (vec (map (fn [g] {:customer_id (:id (:key g)) :customer_first_name (:first (:key g)) :customer_last_name (:last (:key g)) :customer_login (:login (:key g)) :dyear (:year (:key g)) :year_total (_sum (vec (->> (for [x (:Items g)] (/ (+ (- (- (:cs_ext_list_price x) (:cs_ext_wholesale_cost x)) (:cs_ext_discount_amt x)) (:cs_ext_sales_price x)) 2))))) :sale_type "c"}) _groups)))) (let [_src customer
      _rows (_query _src [
        {:items web_sales :leftKey (fn [c] (:c_customer_sk c)) :rightKey (fn [ws] (:ws_bill_customer_sk ws))}
        {:items date_dim :leftKey (fn [c ws] (:ws_sold_date_sk ws)) :rightKey (fn [d] (:d_date_sk d))}
      ] { :select (fn [c ws d] [c ws d]) })
      _groups (_group_by _rows (fn [c ws d] {:id (:c_customer_id c) :first (:c_first_name c) :last (:c_last_name c) :login (:c_login c) :year (:d_year d)}))
      ]
  (vec (map (fn [g] {:customer_id (:id (:key g)) :customer_first_name (:first (:key g)) :customer_last_name (:last (:key g)) :customer_login (:login (:key g)) :dyear (:year (:key g)) :year_total (_sum (vec (->> (for [x (:Items g)] (/ (+ (- (- (:ws_ext_list_price x) (:ws_ext_wholesale_cost x)) (:ws_ext_discount_amt x)) (:ws_ext_sales_price x)) 2))))) :sale_type "w"}) _groups))))) ;; list of
  (def result (vec (->> (for [s1 year_total s2 year_total :when (_equal (:customer_id s2) (:customer_id s1)) c1 year_total :when (_equal (:customer_id c1) (:customer_id s1)) c2 year_total :when (_equal (:customer_id c2) (:customer_id s1)) w1 year_total :when (_equal (:customer_id w1) (:customer_id s1)) w2 year_total :when (_equal (:customer_id w2) (:customer_id s1)) :when (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (_equal (:sale_type s1) "s") (_equal (:sale_type c1) "c")) (_equal (:sale_type w1) "w")) (_equal (:sale_type s2) "s")) (_equal (:sale_type c2) "c")) (_equal (:sale_type w2) "w")) (_equal (:dyear s1) 2001)) (_equal (:dyear s2) 2002)) (_equal (:dyear c1) 2001)) (_equal (:dyear c2) 2002)) (_equal (:dyear w1) 2001)) (_equal (:dyear w2) 2002)) (> (:year_total s1) 0)) (> (:year_total c1) 0)) (> (:year_total w1) 0)) (> (if (> (:year_total c1) 0) (/ (:year_total c2) (:year_total c1)) nil) (if (> (:year_total s1) 0) (/ (:year_total s2) (:year_total s1)) nil))) (> (if (> (:year_total c1) 0) (/ (:year_total c2) (:year_total c1)) nil) (if (> (:year_total w1) 0) (/ (:year_total w2) (:year_total w1)) nil)))] {:customer_id (:customer_id s2) :customer_first_name (:customer_first_name s2) :customer_last_name (:customer_last_name s2) :customer_login (:customer_login s2)}) (sort-by (fn [s1] (_sort_key [(:customer_id s2) (:customer_first_name s2) (:customer_last_name s2) (:customer_login s2)])))))) ;; list of
  (_json result)
  (test_TPCDS_Q4_result)
)

(-main)
