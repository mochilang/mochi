; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:34Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare store_sales household_demographics time_dim store result)

(defn StoreSale [ss_sold_time_sk ss_hdemo_sk ss_store_sk]
  {:__name "StoreSale" :ss_sold_time_sk ss_sold_time_sk :ss_hdemo_sk ss_hdemo_sk :ss_store_sk ss_store_sk}
)


(defn HouseholdDemographics [hd_demo_sk hd_dep_count]
  {:__name "HouseholdDemographics" :hd_demo_sk hd_demo_sk :hd_dep_count hd_dep_count}
)


(defn TimeDim [t_time_sk t_hour t_minute]
  {:__name "TimeDim" :t_time_sk t_time_sk :t_hour t_hour :t_minute t_minute}
)


(defn Store [s_store_sk s_store_name]
  {:__name "Store" :s_store_sk s_store_sk :s_store_name s_store_name}
)


(defn test_TPCDS_Q96_count []
  (assert (_equal result 3) "expect failed")
)

(defn -main []
  (def store_sales [{:ss_sold_time_sk 1 :ss_hdemo_sk 1 :ss_store_sk 1} {:ss_sold_time_sk 1 :ss_hdemo_sk 1 :ss_store_sk 1} {:ss_sold_time_sk 2 :ss_hdemo_sk 1 :ss_store_sk 1}]) ;; list of
  (def household_demographics [{:hd_demo_sk 1 :hd_dep_count 3}]) ;; list of
  (def time_dim [{:t_time_sk 1 :t_hour 20 :t_minute 35} {:t_time_sk 2 :t_hour 20 :t_minute 45}]) ;; list of
  (def store [{:s_store_sk 1 :s_store_name "ese"}]) ;; list of
  (def result (count (vec (->> (for [ss store_sales hd household_demographics :when (_equal (:ss_hdemo_sk ss) (:hd_demo_sk hd)) t time_dim :when (_equal (:ss_sold_time_sk ss) (:t_time_sk t)) s store :when (_equal (:ss_store_sk ss) (:s_store_sk s)) :when (and (and (and (_equal (:t_hour t) 20) (>= (:t_minute t) 30)) (_equal (:hd_dep_count hd) 3)) (_equal (:s_store_name s) "ese"))] ss))))) ;; int
  (_json result)
  (test_TPCDS_Q96_count)
)

(-main)
