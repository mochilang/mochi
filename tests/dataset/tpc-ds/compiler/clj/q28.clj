; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:45:50Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare store_sales bucket1 bucket2 result)

(defn StoreSale [ss_quantity ss_list_price ss_coupon_amt ss_wholesale_cost]
  {:__name "StoreSale" :ss_quantity ss_quantity :ss_list_price ss_list_price :ss_coupon_amt ss_coupon_amt :ss_wholesale_cost ss_wholesale_cost}
)


(defn test_TPCDS_Q28_buckets []
  (assert (_equal result {:B1_LP 100.0 :B1_CNT 1 :B1_CNTD 1 :B2_LP 80.0 :B2_CNT 1 :B2_CNTD 1}) "expect failed")
)

(defn -main []
  (def store_sales [{:ss_quantity 3 :ss_list_price 100.0 :ss_coupon_amt 50.0 :ss_wholesale_cost 30.0} {:ss_quantity 8 :ss_list_price 80.0 :ss_coupon_amt 10.0 :ss_wholesale_cost 20.0} {:ss_quantity 12 :ss_list_price 60.0 :ss_coupon_amt 5.0 :ss_wholesale_cost 15.0}]) ;; list of
  (def bucket1 (vec (->> (for [ss store_sales :when (and (and (>= (:ss_quantity ss) 0) (<= (:ss_quantity ss) 5)) (or (or (and (>= (:ss_list_price ss) 0) (<= (:ss_list_price ss) 110)) (and (>= (:ss_coupon_amt ss) 0) (<= (:ss_coupon_amt ss) 1000))) (and (>= (:ss_wholesale_cost ss) 0) (<= (:ss_wholesale_cost ss) 50))))] ss)))) ;; list of
  (def bucket2 (vec (->> (for [ss store_sales :when (and (and (>= (:ss_quantity ss) 6) (<= (:ss_quantity ss) 10)) (or (or (and (>= (:ss_list_price ss) 0) (<= (:ss_list_price ss) 110)) (and (>= (:ss_coupon_amt ss) 0) (<= (:ss_coupon_amt ss) 1000))) (and (>= (:ss_wholesale_cost ss) 0) (<= (:ss_wholesale_cost ss) 50))))] ss)))) ;; list of
  (def result {:B1_LP (let [xs (vec (->> (for [x bucket1] (:ss_list_price x))))] (if (empty? xs) 0 (/ (reduce + xs) (double (count xs))))) :B1_CNT (count bucket1) :B1_CNTD (count (map (fn [g] (:key g)) (_group_by bucket1 (fn [x] (:ss_list_price x))))) :B2_LP (let [xs (vec (->> (for [x bucket2] (:ss_list_price x))))] (if (empty? xs) 0 (/ (reduce + xs) (double (count xs))))) :B2_CNT (count bucket2) :B2_CNTD (count (map (fn [g] (:key g)) (_group_by bucket2 (fn [x] (:ss_list_price x)))))}) ;;
  (_json result)
  (test_TPCDS_Q28_buckets)
)

(-main)
