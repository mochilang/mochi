; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:45:45Z
(ns main)

(defn _sum [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "sum() expects list or group" {})))]
    (reduce + 0 lst))
  )

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(defn _query [src joins opts]
  (let [items (atom (mapv vector src))]
    (doseq [j joins]
      (let [joined (atom [])]
        (if (and (:leftKey j) (:rightKey j))
          (let [idx (group-by (fn [it] (apply (:rightKey j) [it])) (:items j))
                seen (atom #{})]
            (doseq [left @items]
              (let [k (apply (:leftKey j) left)
                    rs (get idx k)]
                (if rs
                  (do
                    (swap! seen conj k)
                    (doseq [right rs]
                      (swap! joined conj (conj left right))))
                  (when (:left j)
                    (swap! joined conj (conj left nil)))))
            (when (:right j)
              (doseq [right (:items j)]
                (when-not (contains? @seen (apply (:rightKey j) [right]))
                  (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right]))))))
            (reset! items @joined))
          (cond
            (and (:right j) (:left j))
              (let [matched (boolean-array (count (:items j)))]
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [[ri right] (map-indexed vector (:items j))]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (aset matched ri true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (conj left nil))))
                (doseq [[ri right] (map-indexed vector (:items j))]
                  (when-not (aget matched ri)
                    (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
              (reset! items @joined)
            (:right j)
              (do
                (doseq [right (:items j)]
                  (let [m (atom false)]
                    (doseq [left @items]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
                (reset! items @joined))
            :else
              (do
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [right (:items j)]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when (and (:left j) (not @m))
                      (swap! joined conj (conj left nil))))
                (reset! items @joined)))))
    (let [it @items
          it (if-let [w (:where opts)] (vec (filter #(apply w %) it)) it)
          it (if-let [sk (:sortKey opts)]
               (vec (sort-by #(let [k (apply sk %)] (_sort_key k)) it))
               it)
          it (if (contains? opts :skip) (vec (drop (:skip opts) it)) it)
          it (if (contains? opts :take) (vec (take (:take opts) it)) it)]
      (mapv #(apply (:select opts) %) it)))))))))))))
(declare store_sales store_returns catalog_sales date_dim store item result)

(defn StoreSale [ss_sold_date_sk ss_item_sk ss_store_sk ss_customer_sk ss_net_profit ss_ticket_number]
  {:__name "StoreSale" :ss_sold_date_sk ss_sold_date_sk :ss_item_sk ss_item_sk :ss_store_sk ss_store_sk :ss_customer_sk ss_customer_sk :ss_net_profit ss_net_profit :ss_ticket_number ss_ticket_number}
)


(defn StoreReturn [sr_returned_date_sk sr_item_sk sr_customer_sk sr_ticket_number sr_net_loss]
  {:__name "StoreReturn" :sr_returned_date_sk sr_returned_date_sk :sr_item_sk sr_item_sk :sr_customer_sk sr_customer_sk :sr_ticket_number sr_ticket_number :sr_net_loss sr_net_loss}
)


(defn CatalogSale [cs_sold_date_sk cs_item_sk cs_bill_customer_sk cs_net_profit]
  {:__name "CatalogSale" :cs_sold_date_sk cs_sold_date_sk :cs_item_sk cs_item_sk :cs_bill_customer_sk cs_bill_customer_sk :cs_net_profit cs_net_profit}
)


(defn DateDim [d_date_sk d_moy d_year]
  {:__name "DateDim" :d_date_sk d_date_sk :d_moy d_moy :d_year d_year}
)


(defn Store [s_store_sk s_store_id s_store_name]
  {:__name "Store" :s_store_sk s_store_sk :s_store_id s_store_id :s_store_name s_store_name}
)


(defn Item [i_item_sk i_item_id i_item_desc]
  {:__name "Item" :i_item_sk i_item_sk :i_item_id i_item_id :i_item_desc i_item_desc}
)


(defn test_TPCDS_Q25_aggregated_profit []
  (assert (_equal result [{:i_item_id "ITEM1" :i_item_desc "Desc1" :s_store_id "S1" :s_store_name "Store1" :store_sales_profit 50.0 :store_returns_loss 10.0 :catalog_sales_profit 30.0} {:i_item_id "ITEM2" :i_item_desc "Desc2" :s_store_id "S1" :s_store_name "Store1" :store_sales_profit 20.0 :store_returns_loss 5.0 :catalog_sales_profit 15.0}]) "expect failed")
)

(defn -main []
  (def store_sales [{:ss_sold_date_sk 1 :ss_item_sk 1 :ss_store_sk 1 :ss_customer_sk 1 :ss_net_profit 50.0 :ss_ticket_number 1} {:ss_sold_date_sk 1 :ss_item_sk 2 :ss_store_sk 1 :ss_customer_sk 2 :ss_net_profit 20.0 :ss_ticket_number 2}]) ;; list of
  (def store_returns [{:sr_returned_date_sk 2 :sr_item_sk 1 :sr_customer_sk 1 :sr_ticket_number 1 :sr_net_loss 10.0} {:sr_returned_date_sk 2 :sr_item_sk 2 :sr_customer_sk 2 :sr_ticket_number 2 :sr_net_loss 5.0}]) ;; list of
  (def catalog_sales [{:cs_sold_date_sk 3 :cs_item_sk 1 :cs_bill_customer_sk 1 :cs_net_profit 30.0} {:cs_sold_date_sk 3 :cs_item_sk 2 :cs_bill_customer_sk 2 :cs_net_profit 15.0}]) ;; list of
  (def date_dim [{:d_date_sk 1 :d_moy 4 :d_year 2000} {:d_date_sk 2 :d_moy 5 :d_year 2000} {:d_date_sk 3 :d_moy 6 :d_year 2000}]) ;; list of
  (def store [{:s_store_sk 1 :s_store_id "S1" :s_store_name "Store1"}]) ;; list of
  (def item [{:i_item_sk 1 :i_item_id "ITEM1" :i_item_desc "Desc1"} {:i_item_sk 2 :i_item_id "ITEM2" :i_item_desc "Desc2"}]) ;; list of
  (def result (let [_src store_sales
      _rows (_query _src [
        {:items store_returns :on (fn [ss sr] (and (_equal (:ss_ticket_number ss) (:sr_ticket_number sr)) (_equal (:ss_item_sk ss) (:sr_item_sk sr))))}
        {:items catalog_sales :on (fn [ss sr cs] (and (_equal (:sr_customer_sk sr) (:cs_bill_customer_sk cs)) (_equal (:sr_item_sk sr) (:cs_item_sk cs))))}
        {:items date_dim :leftKey (fn [ss sr cs] (:ss_sold_date_sk ss)) :rightKey (fn [d1] (:d_date_sk d1))}
        {:items date_dim :leftKey (fn [ss sr cs d1] (:sr_returned_date_sk sr)) :rightKey (fn [d2] (:d_date_sk d2))}
        {:items date_dim :leftKey (fn [ss sr cs d1 d2] (:cs_sold_date_sk cs)) :rightKey (fn [d3] (:d_date_sk d3))}
        {:items store :leftKey (fn [ss sr cs d1 d2 d3] (:ss_store_sk ss)) :rightKey (fn [s] (:s_store_sk s))}
        {:items item :leftKey (fn [ss sr cs d1 d2 d3 s] (:ss_item_sk ss)) :rightKey (fn [i] (:i_item_sk i))}
      ] { :select (fn [ss sr cs d1 d2 d3 s i] [ss sr cs d1 d2 d3 s i]) :where (fn [ss sr cs d1 d2 d3 s i] (and (and (and (and (and (_equal (:d_moy d1) 4) (_equal (:d_year d1) 2000)) (>= (:d_moy d2) 4)) (<= (:d_moy d2) 10)) (>= (:d_moy d3) 4)) (<= (:d_moy d3) 10))) })
      _groups (_group_by _rows (fn [ss sr cs d1 d2 d3 s i] {:item_id (:i_item_id i) :item_desc (:i_item_desc i) :s_store_id (:s_store_id s) :s_store_name (:s_store_name s)}))
      ]
  (vec (map (fn [g] {:i_item_id (:item_id (:key g)) :i_item_desc (:item_desc (:key g)) :s_store_id (:s_store_id (:key g)) :s_store_name (:s_store_name (:key g)) :store_sales_profit (reduce + 0 (vec (->> (for [x (:Items g)] (:ss_net_profit x))))) :store_returns_loss (_sum (vec (->> (for [x (:Items g)] (:sr_net_loss x))))) :catalog_sales_profit (_sum (vec (->> (for [x (:Items g)] (:cs_net_profit x)))))}) _groups)))) ;; list of
  (_json result)
  (test_TPCDS_Q25_aggregated_profit)
)

(-main)
