; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:35Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare store_sales catalog_sales ssci csci both store_only catalog_only result)

(defn StoreSale [ss_customer_sk ss_item_sk]
  {:__name "StoreSale" :ss_customer_sk ss_customer_sk :ss_item_sk ss_item_sk}
)


(defn CatalogSale [cs_bill_customer_sk cs_item_sk]
  {:__name "CatalogSale" :cs_bill_customer_sk cs_bill_customer_sk :cs_item_sk cs_item_sk}
)


(defn test_TPCDS_Q97_overlap []
  (assert (and (and (_equal (:store_only result) 1) (_equal (:catalog_only result) 1)) (_equal (:store_and_catalog result) 1)) "expect failed")
)

(defn -main []
  (def store_sales [{:ss_customer_sk 1 :ss_item_sk 1} {:ss_customer_sk 2 :ss_item_sk 1}]) ;; list of
  (def catalog_sales [{:cs_bill_customer_sk 1 :cs_item_sk 1} {:cs_bill_customer_sk 3 :cs_item_sk 2}]) ;; list of
  (def ssci (map (fn [g] {:customer_sk (:customer_sk (:key g)) :item_sk (:item_sk (:key g))}) (_group_by store_sales (fn [ss] {:customer_sk (:ss_customer_sk ss) :item_sk (:ss_item_sk ss)})))) ;; list of
  (def csci (map (fn [g] {:customer_sk (:customer_sk (:key g)) :item_sk (:item_sk (:key g))}) (_group_by catalog_sales (fn [cs] {:customer_sk (:cs_bill_customer_sk cs) :item_sk (:cs_item_sk cs)})))) ;; list of
  (def both (count (vec (->> (for [s ssci c csci :when (and (_equal (:customer_sk s) (:customer_sk c)) (_equal (:item_sk s) (:item_sk c)))] 1))))) ;; int
  (def store_only (count (vec (->> (for [s ssci :when (not (boolean (seq (vec (->> (for [c csci :when (and (_equal (:customer_sk s) (:customer_sk c)) (_equal (:item_sk s) (:item_sk c)))] c))))))] 1))))) ;; int
  (def catalog_only (count (vec (->> (for [c csci :when (not (boolean (seq (vec (->> (for [s ssci :when (and (_equal (:customer_sk s) (:customer_sk c)) (_equal (:item_sk s) (:item_sk c)))] s))))))] 1))))) ;; int
  (def result {:store_only store_only :catalog_only catalog_only :store_and_catalog both}) ;;
  (_json result)
  (test_TPCDS_Q97_overlap)
)

(-main)
