; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:46:15Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(declare store_sales item grouped_base grouped best worst best_name worst_name result)

(defn test_TPCDS_Q44_simplified []
  (assert (_equal result {:best_performing "ItemA" :worst_performing "ItemB"}) "expect failed")
)

(defn -main []
  (def store_sales [{:ss_item_sk 1 :ss_store_sk 1 :ss_net_profit 5.0} {:ss_item_sk 1 :ss_store_sk 1 :ss_net_profit 5.0} {:ss_item_sk 2 :ss_store_sk 1 :ss_net_profit (- 1.0)}]) ;; list of
  (def item [{:i_item_sk 1 :i_product_name "ItemA"} {:i_item_sk 2 :i_product_name "ItemB"}]) ;; list of
  (def grouped_base (map (fn [g] {:item_sk (:key g) :avg_profit (let [xs (vec (->> (for [x (:Items g)] (:ss_net_profit x))))] (if (empty? xs) 0 (/ (reduce + xs) (double (count xs)))))}) (_group_by store_sales (fn [ss] (:ss_item_sk ss))))) ;; list of
  (def grouped grouped_base) ;; list of
  (def best (first (vec (->> (for [x grouped] x) (sort-by (fn [x] (_sort_key (- (:avg_profit x))))))))) ;;
  (def worst (first (vec (->> (for [x grouped] x) (sort-by (fn [x] (_sort_key (:avg_profit x)))))))) ;;
  (def best_name (first (vec (->> (for [i item :when (_equal (:i_item_sk i) (:item_sk best))] (:i_product_name i)))))) ;; string
  (def worst_name (first (vec (->> (for [i item :when (_equal (:i_item_sk i) (:item_sk worst))] (:i_product_name i)))))) ;; string
  (def result {:best_performing best_name :worst_performing worst_name}) ;;
  (_json result)
  (test_TPCDS_Q44_simplified)
)

(-main)
