; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:45:43Z
(ns main)

(defn _sum [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "sum() expects list or group" {})))]
    (reduce + 0 lst))
  )

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(defn _query [src joins opts]
  (let [items (atom (mapv vector src))]
    (doseq [j joins]
      (let [joined (atom [])]
        (if (and (:leftKey j) (:rightKey j))
          (let [idx (group-by (fn [it] (apply (:rightKey j) [it])) (:items j))
                seen (atom #{})]
            (doseq [left @items]
              (let [k (apply (:leftKey j) left)
                    rs (get idx k)]
                (if rs
                  (do
                    (swap! seen conj k)
                    (doseq [right rs]
                      (swap! joined conj (conj left right))))
                  (when (:left j)
                    (swap! joined conj (conj left nil)))))
            (when (:right j)
              (doseq [right (:items j)]
                (when-not (contains? @seen (apply (:rightKey j) [right]))
                  (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right]))))))
            (reset! items @joined))
          (cond
            (and (:right j) (:left j))
              (let [matched (boolean-array (count (:items j)))]
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [[ri right] (map-indexed vector (:items j))]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (aset matched ri true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (conj left nil))))
                (doseq [[ri right] (map-indexed vector (:items j))]
                  (when-not (aget matched ri)
                    (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
              (reset! items @joined)
            (:right j)
              (do
                (doseq [right (:items j)]
                  (let [m (atom false)]
                    (doseq [left @items]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
                (reset! items @joined))
            :else
              (do
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [right (:items j)]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when (and (:left j) (not @m))
                      (swap! joined conj (conj left nil))))
                (reset! items @joined)))))
    (let [it @items
          it (if-let [w (:where opts)] (vec (filter #(apply w %) it)) it)
          it (if-let [sk (:sortKey opts)]
               (vec (sort-by #(let [k (apply sk %)] (_sort_key k)) it))
               it)
          it (if (contains? opts :skip) (vec (drop (:skip opts) it)) it)
          it (if (contains? opts :take) (vec (take (:take opts) it)) it)]
      (mapv #(apply (:select opts) %) it)))))))))))))
(declare store_sales store_returns store item customer customer_address ssales avg_paid result)

(defn StoreSale [ss_ticket_number ss_item_sk ss_customer_sk ss_store_sk ss_net_paid]
  {:__name "StoreSale" :ss_ticket_number ss_ticket_number :ss_item_sk ss_item_sk :ss_customer_sk ss_customer_sk :ss_store_sk ss_store_sk :ss_net_paid ss_net_paid}
)


(defn StoreReturn [sr_ticket_number sr_item_sk]
  {:__name "StoreReturn" :sr_ticket_number sr_ticket_number :sr_item_sk sr_item_sk}
)


(defn Store [s_store_sk s_store_name s_market_id s_state s_zip]
  {:__name "Store" :s_store_sk s_store_sk :s_store_name s_store_name :s_market_id s_market_id :s_state s_state :s_zip s_zip}
)


(defn Item [i_item_sk i_color i_current_price i_manager_id i_units i_size]
  {:__name "Item" :i_item_sk i_item_sk :i_color i_color :i_current_price i_current_price :i_manager_id i_manager_id :i_units i_units :i_size i_size}
)


(defn Customer [c_customer_sk c_first_name c_last_name c_current_addr_sk c_birth_country]
  {:__name "Customer" :c_customer_sk c_customer_sk :c_first_name c_first_name :c_last_name c_last_name :c_current_addr_sk c_current_addr_sk :c_birth_country c_birth_country}
)


(defn CustomerAddress [ca_address_sk ca_state ca_country ca_zip]
  {:__name "CustomerAddress" :ca_address_sk ca_address_sk :ca_state ca_state :ca_country ca_country :ca_zip ca_zip}
)


(defn test_TPCDS_Q24_customer_net_paid []
  (assert (_equal result [{:c_last_name "Smith" :c_first_name "Ann" :s_store_name "Store1" :paid 100.0}]) "expect failed")
)

(defn -main []
  (def store_sales [{:ss_ticket_number 1 :ss_item_sk 1 :ss_customer_sk 1 :ss_store_sk 1 :ss_net_paid 100.0} {:ss_ticket_number 2 :ss_item_sk 2 :ss_customer_sk 2 :ss_store_sk 1 :ss_net_paid 50.0}]) ;; list of
  (def store_returns [{:sr_ticket_number 1 :sr_item_sk 1} {:sr_ticket_number 2 :sr_item_sk 2}]) ;; list of
  (def store [{:s_store_sk 1 :s_store_name "Store1" :s_market_id 5 :s_state "CA" :s_zip "12345"}]) ;; list of
  (def item [{:i_item_sk 1 :i_color "RED" :i_current_price 10.0 :i_manager_id 1 :i_units "EA" :i_size "M"} {:i_item_sk 2 :i_color "BLUE" :i_current_price 20.0 :i_manager_id 2 :i_units "EA" :i_size "L"}]) ;; list of
  (def customer [{:c_customer_sk 1 :c_first_name "Ann" :c_last_name "Smith" :c_current_addr_sk 1 :c_birth_country "Canada"} {:c_customer_sk 2 :c_first_name "Bob" :c_last_name "Jones" :c_current_addr_sk 2 :c_birth_country "USA"}]) ;; list of
  (def customer_address [{:ca_address_sk 1 :ca_state "CA" :ca_country "USA" :ca_zip "12345"} {:ca_address_sk 2 :ca_state "CA" :ca_country "USA" :ca_zip "54321"}]) ;; list of
  (def ssales (let [_src store_sales
      _rows (_query _src [
        {:items store_returns :on (fn [ss sr] (and (_equal (:ss_ticket_number ss) (:sr_ticket_number sr)) (_equal (:ss_item_sk ss) (:sr_item_sk sr))))}
        {:items store :leftKey (fn [ss sr] (:ss_store_sk ss)) :rightKey (fn [s] (:s_store_sk s))}
        {:items item :leftKey (fn [ss sr s] (:ss_item_sk ss)) :rightKey (fn [i] (:i_item_sk i))}
        {:items customer :leftKey (fn [ss sr s i] (:ss_customer_sk ss)) :rightKey (fn [c] (:c_customer_sk c))}
        {:items customer_address :leftKey (fn [ss sr s i c] (:c_current_addr_sk c)) :rightKey (fn [ca] (:ca_address_sk ca))}
      ] { :select (fn [ss sr s i c ca] [ss sr s i c ca]) :where (fn [ss sr s i c ca] (and (and (not (_equal (:c_birth_country c) ((:ToUpper strings) (:ca_country ca)))) (_equal (:s_zip s) (:ca_zip ca))) (_equal (:s_market_id s) 5))) })
      _groups (_group_by _rows (fn [ss sr s i c ca] {:last (:c_last_name c) :first (:c_first_name c) :store_name (:s_store_name s) :color (:i_color i)}))
      ]
  (vec (map (fn [g] {:c_last_name (:last (:key g)) :c_first_name (:first (:key g)) :s_store_name (:store_name (:key g)) :color (:color (:key g)) :netpaid (reduce + 0 (vec (->> (for [x (:Items g)] (:ss_net_paid x)))))}) _groups)))) ;; list of
  (def avg_paid (let [xs (vec (->> (for [x ssales] (:netpaid x))))] (if (empty? xs) 0 (/ (reduce + xs) (double (count xs)))))) ;; float
  (def result (vec (->> (for [x ssales :when (and (_equal (:color x) "RED") (> (:netpaid x) (* 0.05 avg_paid)))] {:c_last_name (:c_last_name x) :c_first_name (:c_first_name x) :s_store_name (:s_store_name x) :paid (:netpaid x)}) (sort-by (fn [x] (_sort_key [(:c_last_name x) (:c_first_name x) (:s_store_name x)])))))) ;; list of
  (_json result)
  (test_TPCDS_Q24_customer_net_paid)
)

(-main)
