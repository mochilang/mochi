; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:46:22Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(declare web catalog store tmp result)

(defn test_TPCDS_Q49_simplified []
  (assert (_equal result [{:channel "catalog" :item "A" :return_ratio 0.3 :return_rank 1 :currency_rank 1} {:channel "store" :item "A" :return_ratio 0.25 :return_rank 1 :currency_rank 1} {:channel "web" :item "A" :return_ratio 0.2 :return_rank 1 :currency_rank 1} {:channel "web" :item "B" :return_ratio 0.5 :return_rank 2 :currency_rank 2}]) "expect failed")
)

(defn -main []
  (def web [{:item "A" :return_ratio 0.2 :currency_ratio 0.3 :return_rank 1 :currency_rank 1} {:item "B" :return_ratio 0.5 :currency_ratio 0.6 :return_rank 2 :currency_rank 2}]) ;; list of
  (def catalog [{:item "A" :return_ratio 0.3 :currency_ratio 0.4 :return_rank 1 :currency_rank 1}]) ;; list of
  (def store [{:item "A" :return_ratio 0.25 :currency_ratio 0.35 :return_rank 1 :currency_rank 1}]) ;; list of
  (def tmp (concat (vec (->> (for [w web :when (or (<= (:return_rank w) 10) (<= (:currency_rank w) 10))] {:channel "web" :item (:item w) :return_ratio (:return_ratio w) :return_rank (:return_rank w) :currency_rank (:currency_rank w)}))) (vec (->> (for [c catalog :when (or (<= (:return_rank c) 10) (<= (:currency_rank c) 10))] {:channel "catalog" :item (:item c) :return_ratio (:return_ratio c) :return_rank (:return_rank c) :currency_rank (:currency_rank c)}))) (vec (->> (for [s store :when (or (<= (:return_rank s) 10) (<= (:currency_rank s) 10))] {:channel "store" :item (:item s) :return_ratio (:return_ratio s) :return_rank (:return_rank s) :currency_rank (:currency_rank s)}))))) ;; list of any
  (def result (vec (->> (for [r tmp] r) (sort-by (fn [r] (_sort_key [(:channel r) (:return_rank r) (:currency_rank r) (:item r)])))))) ;; list of any
  (_json result)
  (test_TPCDS_Q49_simplified)
)

(-main)
