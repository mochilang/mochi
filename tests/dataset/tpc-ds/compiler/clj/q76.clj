; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:04Z
(ns main)

(defn _sum [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "sum() expects list or group" {})))]
    (reduce + 0 lst))
  )

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(declare date_dim item store_sales web_sales catalog_sales store_part web_part catalog_part all_rows result)

(defn test_TPCDS_Q76_simplified []
  (assert (_equal result [{:channel "store" :col_name nil :d_year 1998 :d_qoy 1 :i_category "CatA" :sales_cnt 1 :sales_amt 10.0} {:channel "web" :col_name nil :d_year 1998 :d_qoy 1 :i_category "CatB" :sales_cnt 1 :sales_amt 15.0} {:channel "catalog" :col_name nil :d_year 1998 :d_qoy 1 :i_category "CatC" :sales_cnt 1 :sales_amt 20.0}]) "expect failed")
)

(defn -main []
  (def date_dim [{:d_date_sk 1 :d_year 1998 :d_qoy 1}]) ;; list of
  (def item [{:i_item_sk 1 :i_category "CatA"} {:i_item_sk 2 :i_category "CatB"} {:i_item_sk 3 :i_category "CatC"}]) ;; list of
  (def store_sales [{:ss_customer_sk nil :ss_item_sk 1 :ss_ext_sales_price 10.0 :ss_sold_date_sk 1}]) ;; list of
  (def web_sales [{:ws_bill_customer_sk nil :ws_item_sk 2 :ws_ext_sales_price 15.0 :ws_sold_date_sk 1}]) ;; list of
  (def catalog_sales [{:cs_bill_customer_sk nil :cs_item_sk 3 :cs_ext_sales_price 20.0 :cs_sold_date_sk 1}]) ;; list of
  (def store_part (vec (->> (for [ss store_sales :when (_equal (:ss_customer_sk ss) nil) i item :when (_equal (:i_item_sk i) (:ss_item_sk ss)) d date_dim :when (_equal (:d_date_sk d) (:ss_sold_date_sk ss))] {:channel "store" :col_name (:ss_customer_sk ss) :d_year (:d_year d) :d_qoy (:d_qoy d) :i_category (:i_category i) :ext_sales_price (:ss_ext_sales_price ss)})))) ;; list of
  (def web_part (vec (->> (for [ws web_sales :when (_equal (:ws_bill_customer_sk ws) nil) i item :when (_equal (:i_item_sk i) (:ws_item_sk ws)) d date_dim :when (_equal (:d_date_sk d) (:ws_sold_date_sk ws))] {:channel "web" :col_name (:ws_bill_customer_sk ws) :d_year (:d_year d) :d_qoy (:d_qoy d) :i_category (:i_category i) :ext_sales_price (:ws_ext_sales_price ws)})))) ;; list of
  (def catalog_part (vec (->> (for [cs catalog_sales :when (_equal (:cs_bill_customer_sk cs) nil) i item :when (_equal (:i_item_sk i) (:cs_item_sk cs)) d date_dim :when (_equal (:d_date_sk d) (:cs_sold_date_sk cs))] {:channel "catalog" :col_name (:cs_bill_customer_sk cs) :d_year (:d_year d) :d_qoy (:d_qoy d) :i_category (:i_category i) :ext_sales_price (:cs_ext_sales_price cs)})))) ;; list of
  (def all_rows (concat store_part web_part catalog_part)) ;; list of any
  (def result (let [_src all_rows
      _groups (_group_by _src (fn [r] {:channel (:channel r) :col_name (:col_name r) :d_year (:d_year r) :d_qoy (:d_qoy r) :i_category (:i_category r)}))
      ]
  (->> _groups (sort-by (fn [g] (_sort_key (:channel (:key g))))) (map (fn [g] {:channel (:channel (:key g)) :col_name (:col_name (:key g)) :d_year (:d_year (:key g)) :d_qoy (:d_qoy (:key g)) :i_category (:i_category (:key g)) :sales_cnt (count (:Items g)) :sales_amt (_sum (vec (->> (for [x (:Items g)] (:ext_sales_price (:r x))))))})) vec))) ;; list of
  (_json result)
  (test_TPCDS_Q76_simplified)
)

(-main)
