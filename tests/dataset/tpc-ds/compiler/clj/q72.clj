; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:46:56Z
(ns main)

(defn _count [v]
  (cond
    (sequential? v) (count v)
    (and (map? v) (contains? v :Items)) (count (:Items v))
    :else (throw (ex-info "count() expects list or group" {}))))

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(defn _query [src joins opts]
  (let [items (atom (mapv vector src))]
    (doseq [j joins]
      (let [joined (atom [])]
        (if (and (:leftKey j) (:rightKey j))
          (let [idx (group-by (fn [it] (apply (:rightKey j) [it])) (:items j))
                seen (atom #{})]
            (doseq [left @items]
              (let [k (apply (:leftKey j) left)
                    rs (get idx k)]
                (if rs
                  (do
                    (swap! seen conj k)
                    (doseq [right rs]
                      (swap! joined conj (conj left right))))
                  (when (:left j)
                    (swap! joined conj (conj left nil)))))
            (when (:right j)
              (doseq [right (:items j)]
                (when-not (contains? @seen (apply (:rightKey j) [right]))
                  (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right]))))))
            (reset! items @joined))
          (cond
            (and (:right j) (:left j))
              (let [matched (boolean-array (count (:items j)))]
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [[ri right] (map-indexed vector (:items j))]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (aset matched ri true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (conj left nil))))
                (doseq [[ri right] (map-indexed vector (:items j))]
                  (when-not (aget matched ri)
                    (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
              (reset! items @joined)
            (:right j)
              (do
                (doseq [right (:items j)]
                  (let [m (atom false)]
                    (doseq [left @items]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
                (reset! items @joined))
            :else
              (do
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [right (:items j)]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when (and (:left j) (not @m))
                      (swap! joined conj (conj left nil))))
                (reset! items @joined)))))
    (let [it @items
          it (if-let [w (:where opts)] (vec (filter #(apply w %) it)) it)
          it (if-let [sk (:sortKey opts)]
               (vec (sort-by #(let [k (apply sk %)] (_sort_key k)) it))
               it)
          it (if (contains? opts :skip) (vec (drop (:skip opts) it)) it)
          it (if (contains? opts :take) (vec (take (:take opts) it)) it)]
      (mapv #(apply (:select opts) %) it)))))))))))))
(declare catalog_sales inventory warehouse item customer_demographics household_demographics date_dim result)

(defn test_TPCDS_Q72_simplified []
  (assert (_equal result [{:i_item_desc "ItemA" :w_warehouse_name "Main" :d_week_seq 10 :no_promo 1 :promo 0 :total_cnt 1}]) "expect failed")
)

(defn -main []
  (def catalog_sales [{:cs_item_sk 1 :cs_order_number 1 :cs_quantity 1 :cs_sold_date_sk 1 :cs_ship_date_sk 3 :cs_bill_cdemo_sk 1 :cs_bill_hdemo_sk 1 :cs_promo_sk nil}]) ;; list of
  (def inventory [{:inv_item_sk 1 :inv_warehouse_sk 1 :inv_date_sk 2 :inv_quantity_on_hand 0}]) ;; list of
  (def warehouse [{:w_warehouse_sk 1 :w_warehouse_name "Main"}]) ;; list of
  (def item [{:i_item_sk 1 :i_item_desc "ItemA"}]) ;; list of
  (def customer_demographics [{:cd_demo_sk 1 :cd_marital_status "M"}]) ;; list of
  (def household_demographics [{:hd_demo_sk 1 :hd_buy_potential "5001-10000"}]) ;; list of
  (def date_dim [{:d_date_sk 1 :d_week_seq 10 :d_date 1 :d_year 2000} {:d_date_sk 2 :d_week_seq 10 :d_date 1 :d_year 2000} {:d_date_sk 3 :d_week_seq 10 :d_date 7 :d_year 2000}]) ;; list of
  (def result (let [_src catalog_sales
      _rows (_query _src [
        {:items inventory :leftKey (fn [cs] (:cs_item_sk cs)) :rightKey (fn [inv] (:inv_item_sk inv))}
        {:items warehouse :leftKey (fn [cs inv] (:inv_warehouse_sk inv)) :rightKey (fn [w] (:w_warehouse_sk w))}
        {:items item :leftKey (fn [cs inv w] (:cs_item_sk cs)) :rightKey (fn [i] (:i_item_sk i))}
        {:items customer_demographics :leftKey (fn [cs inv w i] (:cs_bill_cdemo_sk cs)) :rightKey (fn [cd] (:cd_demo_sk cd))}
        {:items household_demographics :leftKey (fn [cs inv w i cd] (:cs_bill_hdemo_sk cs)) :rightKey (fn [hd] (:hd_demo_sk hd))}
        {:items date_dim :leftKey (fn [cs inv w i cd hd] (:cs_sold_date_sk cs)) :rightKey (fn [d1] (:d_date_sk d1))}
        {:items date_dim :leftKey (fn [cs inv w i cd hd d1] (:inv_date_sk inv)) :rightKey (fn [d2] (:d_date_sk d2))}
        {:items date_dim :leftKey (fn [cs inv w i cd hd d1 d2] (:cs_ship_date_sk cs)) :rightKey (fn [d3] (:d_date_sk d3))}
      ] { :select (fn [cs inv w i cd hd d1 d2 d3] [cs inv w i cd hd d1 d2 d3]) :where (fn [cs inv w i cd hd d1 d2 d3] (and (and (and (and (and (_equal (:d_week_seq d1) (:d_week_seq d2)) (< (:inv_quantity_on_hand inv) (:cs_quantity cs))) (> (:d_date d3) (+ (:d_date d1) 5))) (_equal (:hd_buy_potential hd) "5001-10000")) (_equal (:d_year d1) 2000)) (_equal (:cd_marital_status cd) "M"))) })
      _groups (_group_by _rows (fn [cs inv w i cd hd d1 d2 d3] {:item_desc (:i_item_desc i) :warehouse (:w_warehouse_name w) :week_seq (:d_week_seq d1)}))
      ]
  (vec (map (fn [g] {:i_item_desc (:item_desc (:key g)) :w_warehouse_name (:warehouse (:key g)) :d_week_seq (:week_seq (:key g)) :no_promo (count (vec (->> (for [x (:Items g) :when (_equal (:cs_promo_sk x) nil)] x)))) :promo (count (vec (->> (for [x (:Items g) :when (not (_equal (:cs_promo_sk x) nil))] x)))) :total_cnt (count (:Items g))}) _groups)))) ;; list of
  (_json result)
  (test_TPCDS_Q72_simplified)
)

(-main)
