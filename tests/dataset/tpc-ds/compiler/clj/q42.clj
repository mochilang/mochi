; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:46:13Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(declare store_sales item date_dim month year records grouped base result)

(defn test_TPCDS_Q42_simplified []
  (assert (_equal result [{:d_year 2020 :i_category_id 200 :i_category "CatB" :sum_ss_ext_sales_price 20.0} {:d_year 2020 :i_category_id 100 :i_category "CatA" :sum_ss_ext_sales_price 10.0}]) "expect failed")
)

(defn -main []
  (def store_sales [{:sold_date_sk 1 :item_sk 1 :ext_sales_price 10.0} {:sold_date_sk 1 :item_sk 2 :ext_sales_price 20.0} {:sold_date_sk 2 :item_sk 1 :ext_sales_price 15.0}]) ;; list of
  (def item [{:i_item_sk 1 :i_manager_id 1 :i_category_id 100 :i_category "CatA"} {:i_item_sk 2 :i_manager_id 1 :i_category_id 200 :i_category "CatB"}]) ;; list of
  (def date_dim [{:d_date_sk 1 :d_year 2020 :d_moy 5} {:d_date_sk 2 :d_year 2021 :d_moy 5}]) ;; list of
  (def month 5) ;; int
  (def year 2020) ;; int
  (def records (vec (->> (for [dt date_dim ss store_sales :when (_equal (:sold_date_sk ss) (:d_date_sk dt)) it item :when (_equal (:item_sk ss) (:i_item_sk it)) :when (and (and (_equal (:i_manager_id it) 1) (_equal (:d_moy dt) month)) (_equal (:d_year dt) year))] {:d_year (:d_year dt) :i_category_id (:i_category_id it) :i_category (:i_category it) :price (:ext_sales_price ss)})))) ;; list of
  (def grouped (map (fn [g] {:d_year (:d_year (:key g)) :i_category_id (:i_category_id (:key g)) :i_category (:i_category (:key g)) :sum_ss_ext_sales_price (reduce + 0 (vec (->> (for [x (:Items g)] (:price x)))))}) (_group_by records (fn [r] {:d_year (:d_year r) :i_category_id (:i_category_id r) :i_category (:i_category r)})))) ;; list of
  (def base (vec (->> (for [g grouped] g) (sort-by (fn [g] (_sort_key (- (:sum_ss_ext_sales_price g)))))))) ;; list of
  (def result base) ;; list of
  (_json result)
  (test_TPCDS_Q42_simplified)
)

(-main)
