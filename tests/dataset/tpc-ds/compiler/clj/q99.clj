; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:38Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(defn _query [src joins opts]
  (let [items (atom (mapv vector src))]
    (doseq [j joins]
      (let [joined (atom [])]
        (if (and (:leftKey j) (:rightKey j))
          (let [idx (group-by (fn [it] (apply (:rightKey j) [it])) (:items j))
                seen (atom #{})]
            (doseq [left @items]
              (let [k (apply (:leftKey j) left)
                    rs (get idx k)]
                (if rs
                  (do
                    (swap! seen conj k)
                    (doseq [right rs]
                      (swap! joined conj (conj left right))))
                  (when (:left j)
                    (swap! joined conj (conj left nil)))))
            (when (:right j)
              (doseq [right (:items j)]
                (when-not (contains? @seen (apply (:rightKey j) [right]))
                  (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right]))))))
            (reset! items @joined))
          (cond
            (and (:right j) (:left j))
              (let [matched (boolean-array (count (:items j)))]
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [[ri right] (map-indexed vector (:items j))]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (aset matched ri true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (conj left nil))))
                (doseq [[ri right] (map-indexed vector (:items j))]
                  (when-not (aget matched ri)
                    (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
              (reset! items @joined)
            (:right j)
              (do
                (doseq [right (:items j)]
                  (let [m (atom false)]
                    (doseq [left @items]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
                (reset! items @joined))
            :else
              (do
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [right (:items j)]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when (and (:left j) (not @m))
                      (swap! joined conj (conj left nil))))
                (reset! items @joined)))))
    (let [it @items
          it (if-let [w (:where opts)] (vec (filter #(apply w %) it)) it)
          it (if-let [sk (:sortKey opts)]
               (vec (sort-by #(let [k (apply sk %)] (_sort_key k)) it))
               it)
          it (if (contains? opts :skip) (vec (drop (:skip opts) it)) it)
          it (if (contains? opts :take) (vec (take (:take opts) it)) it)]
      (mapv #(apply (:select opts) %) it)))))))))))))
(declare catalog_sales warehouse ship_mode call_center grouped)

(defn CatalogSale [cs_ship_date_sk cs_sold_date_sk cs_warehouse_sk cs_ship_mode_sk cs_call_center_sk]
  {:__name "CatalogSale" :cs_ship_date_sk cs_ship_date_sk :cs_sold_date_sk cs_sold_date_sk :cs_warehouse_sk cs_warehouse_sk :cs_ship_mode_sk cs_ship_mode_sk :cs_call_center_sk cs_call_center_sk}
)


(defn Warehouse [w_warehouse_sk w_warehouse_name]
  {:__name "Warehouse" :w_warehouse_sk w_warehouse_sk :w_warehouse_name w_warehouse_name}
)


(defn ShipMode [sm_ship_mode_sk sm_type]
  {:__name "ShipMode" :sm_ship_mode_sk sm_ship_mode_sk :sm_type sm_type}
)


(defn CallCenter [cc_call_center_sk cc_name]
  {:__name "CallCenter" :cc_call_center_sk cc_call_center_sk :cc_name cc_name}
)


(defn test_TPCDS_Q99_buckets []
  (assert (_equal grouped [{:warehouse "Warehouse1" :sm_type "EXP" :cc_name "CC1" :d30 1 :d60 1 :d90 1 :d120 1 :dmore 1}]) "expect failed")
)

(defn -main []
  (def catalog_sales [{:cs_ship_date_sk 31 :cs_sold_date_sk 1 :cs_warehouse_sk 1 :cs_ship_mode_sk 1 :cs_call_center_sk 1} {:cs_ship_date_sk 51 :cs_sold_date_sk 1 :cs_warehouse_sk 1 :cs_ship_mode_sk 1 :cs_call_center_sk 1} {:cs_ship_date_sk 71 :cs_sold_date_sk 1 :cs_warehouse_sk 1 :cs_ship_mode_sk 1 :cs_call_center_sk 1} {:cs_ship_date_sk 101 :cs_sold_date_sk 1 :cs_warehouse_sk 1 :cs_ship_mode_sk 1 :cs_call_center_sk 1} {:cs_ship_date_sk 131 :cs_sold_date_sk 1 :cs_warehouse_sk 1 :cs_ship_mode_sk 1 :cs_call_center_sk 1}]) ;; list of
  (def warehouse [{:w_warehouse_sk 1 :w_warehouse_name "Warehouse1"}]) ;; list of
  (def ship_mode [{:sm_ship_mode_sk 1 :sm_type "EXP"}]) ;; list of
  (def call_center [{:cc_call_center_sk 1 :cc_name "CC1"}]) ;; list of
  (def grouped (let [_src catalog_sales
      _rows (_query _src [
        {:items warehouse :leftKey (fn [cs] (:cs_warehouse_sk cs)) :rightKey (fn [w] (:w_warehouse_sk w))}
        {:items ship_mode :leftKey (fn [cs w] (:cs_ship_mode_sk cs)) :rightKey (fn [sm] (:sm_ship_mode_sk sm))}
        {:items call_center :leftKey (fn [cs w sm] (:cs_call_center_sk cs)) :rightKey (fn [cc] (:cc_call_center_sk cc))}
      ] { :select (fn [cs w sm cc] [cs w sm cc]) })
      _groups (_group_by _rows (fn [cs w sm cc] {:warehouse (substr (:w_warehouse_name w) 0 20) :sm_type (:sm_type sm) :cc_name (:cc_name cc)}))
      ]
  (vec (map (fn [g] {:warehouse (:warehouse (:key g)) :sm_type (:sm_type (:key g)) :cc_name (:cc_name (:key g)) :d30 (count (vec (->> (for [x (:Items g) :when (<= (- (:cs_ship_date_sk x) (:cs_sold_date_sk x)) 30)] x)))) :d60 (count (vec (->> (for [x (:Items g) :when (and (> (- (:cs_ship_date_sk x) (:cs_sold_date_sk x)) 30) (<= (- (:cs_ship_date_sk x) (:cs_sold_date_sk x)) 60))] x)))) :d90 (count (vec (->> (for [x (:Items g) :when (and (> (- (:cs_ship_date_sk x) (:cs_sold_date_sk x)) 60) (<= (- (:cs_ship_date_sk x) (:cs_sold_date_sk x)) 90))] x)))) :d120 (count (vec (->> (for [x (:Items g) :when (and (> (- (:cs_ship_date_sk x) (:cs_sold_date_sk x)) 90) (<= (- (:cs_ship_date_sk x) (:cs_sold_date_sk x)) 120))] x)))) :dmore (count (vec (->> (for [x (:Items g) :when (> (- (:cs_ship_date_sk x) (:cs_sold_date_sk x)) 120)] x))))}) _groups)))) ;; list of
  (_json grouped)
  (test_TPCDS_Q99_buckets)
)

(-main)
