; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:08Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(defn _query [src joins opts]
  (let [items (atom (mapv vector src))]
    (doseq [j joins]
      (let [joined (atom [])]
        (if (and (:leftKey j) (:rightKey j))
          (let [idx (group-by (fn [it] (apply (:rightKey j) [it])) (:items j))
                seen (atom #{})]
            (doseq [left @items]
              (let [k (apply (:leftKey j) left)
                    rs (get idx k)]
                (if rs
                  (do
                    (swap! seen conj k)
                    (doseq [right rs]
                      (swap! joined conj (conj left right))))
                  (when (:left j)
                    (swap! joined conj (conj left nil)))))
            (when (:right j)
              (doseq [right (:items j)]
                (when-not (contains? @seen (apply (:rightKey j) [right]))
                  (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right]))))))
            (reset! items @joined))
          (cond
            (and (:right j) (:left j))
              (let [matched (boolean-array (count (:items j)))]
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [[ri right] (map-indexed vector (:items j))]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (aset matched ri true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (conj left nil))))
                (doseq [[ri right] (map-indexed vector (:items j))]
                  (when-not (aget matched ri)
                    (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
              (reset! items @joined)
            (:right j)
              (do
                (doseq [right (:items j)]
                  (let [m (atom false)]
                    (doseq [left @items]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
                (reset! items @joined))
            :else
              (do
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [right (:items j)]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when (and (:left j) (not @m))
                      (swap! joined conj (conj left nil))))
                (reset! items @joined)))))
    (let [it @items
          it (if-let [w (:where opts)] (vec (filter #(apply w %) it)) it)
          it (if-let [sk (:sortKey opts)]
               (vec (sort-by #(let [k (apply sk %)] (_sort_key k)) it))
               it)
          it (if (contains? opts :skip) (vec (drop (:skip opts) it)) it)
          it (if (contains? opts :take) (vec (take (:take opts) it)) it)]
      (mapv #(apply (:select opts) %) it)))))))))))))
(declare ss ws cs result)

(defn test_TPCDS_Q78_simplified []
  (assert (_equal result [{:ss_sold_year 1998 :ss_item_sk 1 :ss_customer_sk 1 :ratio 1.25 :store_qty 10 :store_wholesale_cost 50.0 :store_sales_price 100.0 :other_chan_qty 8 :other_chan_wholesale_cost 40.0 :other_chan_sales_price 80.0}]) "expect failed")
)

(defn -main []
  (def ss [{:ss_sold_year 1998 :ss_item_sk 1 :ss_customer_sk 1 :ss_qty 10 :ss_wc 50.0 :ss_sp 100.0}]) ;; list of
  (def ws [{:ws_sold_year 1998 :ws_item_sk 1 :ws_customer_sk 1 :ws_qty 5 :ws_wc 25.0 :ws_sp 50.0}]) ;; list of
  (def cs [{:cs_sold_year 1998 :cs_item_sk 1 :cs_customer_sk 1 :cs_qty 3 :cs_wc 15.0 :cs_sp 30.0}]) ;; list of
  (def result (let [_src ss]
  (_query _src [
    {:items ws :on (fn [s w] (and (and (_equal (:ws_sold_year w) (:ss_sold_year s)) (_equal (:ws_item_sk w) (:ss_item_sk s))) (_equal (:ws_customer_sk w) (:ss_customer_sk s)))) :left true}
    {:items cs :on (fn [s w c] (and (and (_equal (:cs_sold_year c) (:ss_sold_year s)) (_equal (:cs_item_sk c) (:ss_item_sk s))) (_equal (:cs_customer_sk c) (:ss_customer_sk s)))) :left true}
  ] { :select (fn [s w c] {:ss_sold_year (:ss_sold_year s) :ss_item_sk (:ss_item_sk s) :ss_customer_sk (:ss_customer_sk s) :ratio (quot (:ss_qty s) (+ (if (_equal w nil) 0 (:ws_qty w)) (if (_equal c nil) 0 (:cs_qty c)))) :store_qty (:ss_qty s) :store_wholesale_cost (:ss_wc s) :store_sales_price (:ss_sp s) :other_chan_qty (+ (if (_equal w nil) 0 (:ws_qty w)) (if (_equal c nil) 0 (:cs_qty c))) :other_chan_wholesale_cost (+ (if (_equal w nil) 0.0 (:ws_wc w)) (if (_equal c nil) 0.0 (:cs_wc c))) :other_chan_sales_price (+ (if (_equal w nil) 0.0 (:ws_sp w)) (if (_equal c nil) 0.0 (:cs_sp c)))}) :where (fn [s w c] (and (or (> (if (_equal w nil) 0 (:ws_qty w)) 0) (> (if (_equal c nil) 0 (:cs_qty c)) 0)) (_equal (:ss_sold_year s) 1998))) }))) ;; list of
  (_json result)
  (test_TPCDS_Q78_simplified)
)

(-main)
