; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:45:21Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare customer store_sales web_sales ss98 ss99 ws98 ws99 growth_ok result)

(defn Customer [c_customer_sk c_customer_id c_first_name c_last_name]
  {:__name "Customer" :c_customer_sk c_customer_sk :c_customer_id c_customer_id :c_first_name c_first_name :c_last_name c_last_name}
)


(defn StoreSale [ss_customer_sk ss_sold_date_sk ss_ext_list_price]
  {:__name "StoreSale" :ss_customer_sk ss_customer_sk :ss_sold_date_sk ss_sold_date_sk :ss_ext_list_price ss_ext_list_price}
)


(defn WebSale [ws_bill_customer_sk ws_sold_date_sk ws_ext_list_price]
  {:__name "WebSale" :ws_bill_customer_sk ws_bill_customer_sk :ws_sold_date_sk ws_sold_date_sk :ws_ext_list_price ws_ext_list_price}
)


(defn test_TPCDS_Q11_growth []
  (assert (_equal result [{:customer_id "C1" :customer_first_name "John" :customer_last_name "Doe"}]) "expect failed")
)

(defn -main []
  (def customer [{:c_customer_sk 1 :c_customer_id "C1" :c_first_name "John" :c_last_name "Doe"}]) ;; list of
  (def store_sales [{:ss_customer_sk 1 :ss_sold_date_sk 1998 :ss_ext_list_price 60.0} {:ss_customer_sk 1 :ss_sold_date_sk 1999 :ss_ext_list_price 90.0}]) ;; list of
  (def web_sales [{:ws_bill_customer_sk 1 :ws_sold_date_sk 1998 :ws_ext_list_price 50.0} {:ws_bill_customer_sk 1 :ws_sold_date_sk 1999 :ws_ext_list_price 150.0}]) ;; list of
  (def ss98 (reduce + 0 (vec (->> (for [ss store_sales :when (_equal (:ss_sold_date_sk ss) 1998)] (:ss_ext_list_price ss)))))) ;; float
  (def ss99 (reduce + 0 (vec (->> (for [ss store_sales :when (_equal (:ss_sold_date_sk ss) 1999)] (:ss_ext_list_price ss)))))) ;; float
  (def ws98 (reduce + 0 (vec (->> (for [ws web_sales :when (_equal (:ws_sold_date_sk ws) 1998)] (:ws_ext_list_price ws)))))) ;; float
  (def ws99 (reduce + 0 (vec (->> (for [ws web_sales :when (_equal (:ws_sold_date_sk ws) 1999)] (:ws_ext_list_price ws)))))) ;; float
  (def growth_ok (and (and (> ws98 0) (> ss98 0)) (> (/ ws99 ws98) (/ ss99 ss98)))) ;; bool
  (def result (if growth_ok [{:customer_id "C1" :customer_first_name "John" :customer_last_name "Doe"}] [])) ;; any
  (_json result)
  (test_TPCDS_Q11_growth)
)

(-main)
