; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:46:08Z
(ns main)

(defn _avg [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "avg() expects list or group" {})))]
    (if (empty? lst)
      0
      (/ (reduce + lst) (double (count lst)))))
  )

(defn _sum [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "sum() expects list or group" {})))]
    (reduce + 0 lst))
  )

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(defn _query [src joins opts]
  (let [items (atom (mapv vector src))]
    (doseq [j joins]
      (let [joined (atom [])]
        (if (and (:leftKey j) (:rightKey j))
          (let [idx (group-by (fn [it] (apply (:rightKey j) [it])) (:items j))
                seen (atom #{})]
            (doseq [left @items]
              (let [k (apply (:leftKey j) left)
                    rs (get idx k)]
                (if rs
                  (do
                    (swap! seen conj k)
                    (doseq [right rs]
                      (swap! joined conj (conj left right))))
                  (when (:left j)
                    (swap! joined conj (conj left nil)))))
            (when (:right j)
              (doseq [right (:items j)]
                (when-not (contains? @seen (apply (:rightKey j) [right]))
                  (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right]))))))
            (reset! items @joined))
          (cond
            (and (:right j) (:left j))
              (let [matched (boolean-array (count (:items j)))]
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [[ri right] (map-indexed vector (:items j))]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (aset matched ri true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (conj left nil))))
                (doseq [[ri right] (map-indexed vector (:items j))]
                  (when-not (aget matched ri)
                    (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
              (reset! items @joined)
            (:right j)
              (do
                (doseq [right (:items j)]
                  (let [m (atom false)]
                    (doseq [left @items]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
                (reset! items @joined))
            :else
              (do
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [right (:items j)]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when (and (:left j) (not @m))
                      (swap! joined conj (conj left nil))))
                (reset! items @joined)))))
    (let [it @items
          it (if-let [w (:where opts)] (vec (filter #(apply w %) it)) it)
          it (if-let [sk (:sortKey opts)]
               (vec (sort-by #(let [k (apply sk %)] (_sort_key k)) it))
               it)
          it (if (contains? opts :skip) (vec (drop (:skip opts) it)) it)
          it (if (contains? opts :take) (vec (take (:take opts) it)) it)]
      (mapv #(apply (:select opts) %) it)))))))))))))
(declare inventory item warehouse date_dim monthly grouped summary)

(defn test_TPCDS_Q39_simplified []
  (assert (_equal summary [{:w_warehouse_sk 1 :i_item_sk 1 :cov 1.539600717839002}]) "expect failed")
)

(defn -main []
  (def inventory [{:inv_item_sk 1 :inv_warehouse_sk 1 :inv_date_sk 1 :inv_quantity_on_hand 10} {:inv_item_sk 1 :inv_warehouse_sk 1 :inv_date_sk 2 :inv_quantity_on_hand 10} {:inv_item_sk 1 :inv_warehouse_sk 1 :inv_date_sk 3 :inv_quantity_on_hand 250}]) ;; list of
  (def item [{:i_item_sk 1}]) ;; list of
  (def warehouse [{:w_warehouse_sk 1 :w_warehouse_name "W1"}]) ;; list of
  (def date_dim [{:d_date_sk 1 :d_year 2000 :d_moy 1} {:d_date_sk 2 :d_year 2000 :d_moy 2} {:d_date_sk 3 :d_year 2000 :d_moy 3}]) ;; list of
  (def monthly (let [_src inventory
      _rows (_query _src [
        {:items date_dim :leftKey (fn [inv] (:inv_date_sk inv)) :rightKey (fn [d] (:d_date_sk d))}
        {:items item :leftKey (fn [inv d] (:inv_item_sk inv)) :rightKey (fn [i] (:i_item_sk i))}
        {:items warehouse :leftKey (fn [inv d i] (:inv_warehouse_sk inv)) :rightKey (fn [w] (:w_warehouse_sk w))}
      ] { :select (fn [inv d i w] [inv d i w]) :where (fn [inv d i w] (_equal (:d_year d) 2000)) })
      _groups (_group_by _rows (fn [inv d i w] {:w (:w_warehouse_sk w) :i (:i_item_sk i) :month (:d_moy d)}))
      ]
  (vec (map (fn [g] {:w (:w (:key g)) :i (:i (:key g)) :qty (reduce + 0 (vec (->> (for [x (:Items g)] (:inv_quantity_on_hand x)))))}) _groups)))) ;; list of
  (def grouped {}) ;; map of string to map of string to any
  (loop [_tmp0 (seq monthly)]
    (when _tmp0
      (let [m (clojure.core/first _tmp0)]
        (let [r (try
          (def key (str {:w (:w m) :i (:i m)})) ;; string
          (if (contains? grouped key)
            (do
              (def g (get grouped key)) ;; map of string to any
              (def grouped (assoc grouped key {:w (:w g) :i (:i g) :qtys (conj (:qtys g) (:qty m))})) ;;
            )

          (do
            (def grouped (assoc grouped key {:w (:w m) :i (:i m) :qtys [(:qty m)]})) ;;
          )
          )
          :next
        (catch clojure.lang.ExceptionInfo e
          (cond
            (= (.getMessage e) "continue") :next
            (= (.getMessage e) "break") :break
            :else (throw e))
          )
        )]
      (cond
        (= r :break) nil
        :else (recur (next _tmp0))
      )
    )
  )
)
)
(def summary []) ;; list of any
(loop [_tmp1 (seq (vec (vals grouped)))]
(when _tmp1
  (let [g (clojure.core/first _tmp1)]
    (let [r (try
      (def mean (_avg (:qtys g))) ;; float
      (def sumsq 0.0) ;; float
      (loop [_tmp2 (seq (:qtys g))]
        (when _tmp2
          (let [q (clojure.core/first _tmp2)]
            (let [r (try
              (def sumsq (+ sumsq (* (- q mean) (- q mean)))) ;; any
              :next
            (catch clojure.lang.ExceptionInfo e
              (cond
                (= (.getMessage e) "continue") :next
                (= (.getMessage e) "break") :break
                :else (throw e))
              )
            )]
          (cond
            (= r :break) nil
            :else (recur (next _tmp2))
          )
        )
      )
    )
  )
  (def variance (/ sumsq (- (count (:qtys g)) 1))) ;; any
  (def cov (/ (Math/sqrt variance) mean)) ;; float
  (when (> cov 1.5)
    (def summary (conj summary {:w_warehouse_sk (:w g) :i_item_sk (:i g) :cov cov})) ;; list of any
  )
  :next
(catch clojure.lang.ExceptionInfo e
  (cond
    (= (.getMessage e) "continue") :next
    (= (.getMessage e) "break") :break
    :else (throw e))
  )
)]
(cond
(= r :break) nil
:else (recur (next _tmp1))
)
)
)
)
)
(_json summary)
(test_TPCDS_Q39_simplified)
)

(-main)
