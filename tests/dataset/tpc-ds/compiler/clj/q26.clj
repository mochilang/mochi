; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:45:47Z
(ns main)

(defn _avg [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "avg() expects list or group" {})))]
    (if (empty? lst)
      0
      (/ (reduce + lst) (double (count lst)))))
  )

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(defn _query [src joins opts]
  (let [items (atom (mapv vector src))]
    (doseq [j joins]
      (let [joined (atom [])]
        (if (and (:leftKey j) (:rightKey j))
          (let [idx (group-by (fn [it] (apply (:rightKey j) [it])) (:items j))
                seen (atom #{})]
            (doseq [left @items]
              (let [k (apply (:leftKey j) left)
                    rs (get idx k)]
                (if rs
                  (do
                    (swap! seen conj k)
                    (doseq [right rs]
                      (swap! joined conj (conj left right))))
                  (when (:left j)
                    (swap! joined conj (conj left nil)))))
            (when (:right j)
              (doseq [right (:items j)]
                (when-not (contains? @seen (apply (:rightKey j) [right]))
                  (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right]))))))
            (reset! items @joined))
          (cond
            (and (:right j) (:left j))
              (let [matched (boolean-array (count (:items j)))]
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [[ri right] (map-indexed vector (:items j))]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (aset matched ri true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (conj left nil))))
                (doseq [[ri right] (map-indexed vector (:items j))]
                  (when-not (aget matched ri)
                    (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
              (reset! items @joined)
            (:right j)
              (do
                (doseq [right (:items j)]
                  (let [m (atom false)]
                    (doseq [left @items]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
                (reset! items @joined))
            :else
              (do
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [right (:items j)]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when (and (:left j) (not @m))
                      (swap! joined conj (conj left nil))))
                (reset! items @joined)))))
    (let [it @items
          it (if-let [w (:where opts)] (vec (filter #(apply w %) it)) it)
          it (if-let [sk (:sortKey opts)]
               (vec (sort-by #(let [k (apply sk %)] (_sort_key k)) it))
               it)
          it (if (contains? opts :skip) (vec (drop (:skip opts) it)) it)
          it (if (contains? opts :take) (vec (take (:take opts) it)) it)]
      (mapv #(apply (:select opts) %) it)))))))))))))
(declare catalog_sales customer_demographics date_dim item promotion result)

(defn CatalogSale [cs_sold_date_sk cs_item_sk cs_bill_cdemo_sk cs_promo_sk cs_quantity cs_list_price cs_coupon_amt cs_sales_price]
  {:__name "CatalogSale" :cs_sold_date_sk cs_sold_date_sk :cs_item_sk cs_item_sk :cs_bill_cdemo_sk cs_bill_cdemo_sk :cs_promo_sk cs_promo_sk :cs_quantity cs_quantity :cs_list_price cs_list_price :cs_coupon_amt cs_coupon_amt :cs_sales_price cs_sales_price}
)


(defn CustomerDemo [cd_demo_sk cd_gender cd_marital_status cd_education_status]
  {:__name "CustomerDemo" :cd_demo_sk cd_demo_sk :cd_gender cd_gender :cd_marital_status cd_marital_status :cd_education_status cd_education_status}
)


(defn DateDim [d_date_sk d_year]
  {:__name "DateDim" :d_date_sk d_date_sk :d_year d_year}
)


(defn Item [i_item_sk i_item_id]
  {:__name "Item" :i_item_sk i_item_sk :i_item_id i_item_id}
)


(defn Promotion [p_promo_sk p_channel_email p_channel_event]
  {:__name "Promotion" :p_promo_sk p_promo_sk :p_channel_email p_channel_email :p_channel_event p_channel_event}
)


(defn test_TPCDS_Q26_demographic_averages []
  (assert (_equal result [{:i_item_id "ITEM1" :agg1 10.0 :agg2 100.0 :agg3 5.0 :agg4 95.0}]) "expect failed")
)

(defn -main []
  (def catalog_sales [{:cs_sold_date_sk 1 :cs_item_sk 1 :cs_bill_cdemo_sk 1 :cs_promo_sk 1 :cs_quantity 10 :cs_list_price 100.0 :cs_coupon_amt 5.0 :cs_sales_price 95.0} {:cs_sold_date_sk 1 :cs_item_sk 2 :cs_bill_cdemo_sk 2 :cs_promo_sk 2 :cs_quantity 5 :cs_list_price 50.0 :cs_coupon_amt 2.0 :cs_sales_price 48.0}]) ;; list of
  (def customer_demographics [{:cd_demo_sk 1 :cd_gender "M" :cd_marital_status "S" :cd_education_status "College"} {:cd_demo_sk 2 :cd_gender "F" :cd_marital_status "M" :cd_education_status "High School"}]) ;; list of
  (def date_dim [{:d_date_sk 1 :d_year 2000}]) ;; list of
  (def item [{:i_item_sk 1 :i_item_id "ITEM1"} {:i_item_sk 2 :i_item_id "ITEM2"}]) ;; list of
  (def promotion [{:p_promo_sk 1 :p_channel_email "N" :p_channel_event "Y"} {:p_promo_sk 2 :p_channel_email "Y" :p_channel_event "N"}]) ;; list of
  (def result (let [_src catalog_sales
      _rows (_query _src [
        {:items customer_demographics :leftKey (fn [cs] (:cs_bill_cdemo_sk cs)) :rightKey (fn [cd] (:cd_demo_sk cd))}
        {:items date_dim :leftKey (fn [cs cd] (:cs_sold_date_sk cs)) :rightKey (fn [d] (:d_date_sk d))}
        {:items item :leftKey (fn [cs cd d] (:cs_item_sk cs)) :rightKey (fn [i] (:i_item_sk i))}
        {:items promotion :leftKey (fn [cs cd d i] (:cs_promo_sk cs)) :rightKey (fn [p] (:p_promo_sk p))}
      ] { :select (fn [cs cd d i p] [cs cd d i p]) :where (fn [cs cd d i p] (and (and (and (and (_equal (:cd_gender cd) "M") (_equal (:cd_marital_status cd) "S")) (_equal (:cd_education_status cd) "College")) (or (_equal (:p_channel_email p) "N") (_equal (:p_channel_event p) "N"))) (_equal (:d_year d) 2000))) })
      _groups (_group_by _rows (fn [cs cd d i p] (:i_item_id i)))
      ]
  (vec (map (fn [g] {:i_item_id (:key g) :agg1 (let [xs (vec (->> (for [x (:Items g)] (:cs_quantity x))))] (if (empty? xs) 0 (/ (reduce + xs) (double (count xs))))) :agg2 (let [xs (vec (->> (for [x (:Items g)] (:cs_list_price x))))] (if (empty? xs) 0 (/ (reduce + xs) (double (count xs))))) :agg3 (let [xs (vec (->> (for [x (:Items g)] (:cs_coupon_amt x))))] (if (empty? xs) 0 (/ (reduce + xs) (double (count xs))))) :agg4 (let [xs (vec (->> (for [x (:Items g)] (:cs_sales_price x))))] (if (empty? xs) 0 (/ (reduce + xs) (double (count xs)))))}) _groups)))) ;; list of
  (_json result)
  (test_TPCDS_Q26_demographic_averages)
)

(-main)
