; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:46:44Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare sales by_mgr result)

(defn test_TPCDS_Q63_simplified []
  (assert (_equal result 63) "expect failed")
)

(defn -main []
  (def sales [{:mgr 1 :amount 30} {:mgr 2 :amount 33}]) ;; list of
  (def by_mgr (map (fn [g] {:mgr (:mgr (:key g)) :sum_sales (reduce + 0 (vec (->> (for [x (:Items g)] (:amount x)))))}) (_group_by sales (fn [s] {:mgr (:mgr s)})))) ;; list of
  (def result (reduce + 0 (vec (->> (for [x by_mgr] (:sum_sales x)))))) ;; float
  (_json result)
  (test_TPCDS_Q63_simplified)
)

(-main)
