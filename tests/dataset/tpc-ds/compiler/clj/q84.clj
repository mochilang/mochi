; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:17Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare customer customer_address customer_demographics household_demographics income_band store_returns result)

(defn test_TPCDS_Q84_sample []
  (assert (_equal result 84.0) "expect failed")
)

(defn -main []
  (def customer [{:id 1 :current_addr 1 :cdemo 1 :hdemo 1} {:id 2 :current_addr 1 :cdemo 2 :hdemo 2} {:id 3 :current_addr 1 :cdemo 3 :hdemo 1} {:id 4 :current_addr 1 :cdemo 4 :hdemo 2}]) ;; list of
  (def customer_address [{:ca_address_sk 1 :ca_city "Springfield"}]) ;; list of
  (def customer_demographics [{:cd_demo_sk 1} {:cd_demo_sk 2} {:cd_demo_sk 3} {:cd_demo_sk 4}]) ;; list of
  (def household_demographics [{:hd_demo_sk 1 :income_band_sk 1} {:hd_demo_sk 2 :income_band_sk 1}]) ;; list of
  (def income_band [{:ib_income_band_sk 1 :ib_lower_bound 0 :ib_upper_bound 50000}]) ;; list of
  (def store_returns [{:sr_cdemo_sk 1 :amt 10.0} {:sr_cdemo_sk 2 :amt 20.0} {:sr_cdemo_sk 3 :amt 30.0} {:sr_cdemo_sk 4 :amt 24.0}]) ;; list of
  (def result (reduce + 0 (vec (->> (for [c customer ca customer_address :when (and (_equal (:current_addr c) (:ca_address_sk ca)) (_equal (:ca_city ca) "Springfield")) cd customer_demographics :when (_equal (:cdemo c) (:cd_demo_sk cd)) sr store_returns :when (_equal (:cd_demo_sk cd) (:sr_cdemo_sk sr)) hd household_demographics :when (_equal (:hdemo c) (:hd_demo_sk hd)) ib income_band :when (_equal (:income_band_sk hd) (:ib_income_band_sk ib))] (:amt sr)))))) ;; float
  (_json result)
  (test_TPCDS_Q84_sample)
)

(-main)
