; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:45:19Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare customer customer_address customer_demographics store_sales web_sales catalog_sales date_dim active result)

(defn Customer [c_customer_sk c_current_addr_sk c_current_cdemo_sk]
  {:__name "Customer" :c_customer_sk c_customer_sk :c_current_addr_sk c_current_addr_sk :c_current_cdemo_sk c_current_cdemo_sk}
)


(defn CustomerAddress [ca_address_sk ca_county]
  {:__name "CustomerAddress" :ca_address_sk ca_address_sk :ca_county ca_county}
)


(defn CustomerDemographics [cd_demo_sk cd_gender cd_marital_status cd_education_status cd_purchase_estimate cd_credit_rating cd_dep_count cd_dep_employed_count cd_dep_college_count]
  {:__name "CustomerDemographics" :cd_demo_sk cd_demo_sk :cd_gender cd_gender :cd_marital_status cd_marital_status :cd_education_status cd_education_status :cd_purchase_estimate cd_purchase_estimate :cd_credit_rating cd_credit_rating :cd_dep_count cd_dep_count :cd_dep_employed_count cd_dep_employed_count :cd_dep_college_count cd_dep_college_count}
)


(defn StoreSale [ss_customer_sk ss_sold_date_sk]
  {:__name "StoreSale" :ss_customer_sk ss_customer_sk :ss_sold_date_sk ss_sold_date_sk}
)


(defn DateDim [d_date_sk d_year d_moy]
  {:__name "DateDim" :d_date_sk d_date_sk :d_year d_year :d_moy d_moy}
)


(defn test_TPCDS_Q10_demographics_count []
  (assert (_equal result [{:cd_gender "F" :cd_marital_status "M" :cd_education_status "College" :cnt1 1 :cd_purchase_estimate 5000 :cnt2 1 :cd_credit_rating "Good" :cnt3 1 :cd_dep_count 1 :cnt4 1 :cd_dep_employed_count 1 :cnt5 1 :cd_dep_college_count 0 :cnt6 1}]) "expect failed")
)

(defn -main []
  (def customer [{:c_customer_sk 1 :c_current_addr_sk 1 :c_current_cdemo_sk 1}]) ;; list of
  (def customer_address [{:ca_address_sk 1 :ca_county "CountyA"}]) ;; list of
  (def customer_demographics [{:cd_demo_sk 1 :cd_gender "F" :cd_marital_status "M" :cd_education_status "College" :cd_purchase_estimate 5000 :cd_credit_rating "Good" :cd_dep_count 1 :cd_dep_employed_count 1 :cd_dep_college_count 0}]) ;; list of
  (def store_sales [{:ss_customer_sk 1 :ss_sold_date_sk 1}]) ;; list of
  (def web_sales []) ;; list of any
  (def catalog_sales []) ;; list of any
  (def date_dim [{:d_date_sk 1 :d_year 2000 :d_moy 2}]) ;; list of
  (def active (vec (->> (for [c customer ca customer_address :when (and (_equal (:c_current_addr_sk c) (:ca_address_sk ca)) (_equal (:ca_county ca) "CountyA")) cd customer_demographics :when (_equal (:c_current_cdemo_sk c) (:cd_demo_sk cd)) :when (boolean (seq (vec (->> (for [ss store_sales d date_dim :when (_equal (:ss_sold_date_sk ss) (:d_date_sk d)) :when (and (and (and (_equal (:ss_customer_sk ss) (:c_customer_sk c)) (_equal (:d_year d) 2000)) (>= (:d_moy d) 2)) (<= (:d_moy d) 5))] ss)))))] cd)))) ;; list of
  (def result (map (fn [g] {:cd_gender (:gender (:key g)) :cd_marital_status (:marital (:key g)) :cd_education_status (:education (:key g)) :cnt1 (count (vec (->> (for [_ (:Items g)] _)))) :cd_purchase_estimate (:purchase (:key g)) :cnt2 (count (vec (->> (for [_ (:Items g)] _)))) :cd_credit_rating (:credit (:key g)) :cnt3 (count (vec (->> (for [_ (:Items g)] _)))) :cd_dep_count (:dep (:key g)) :cnt4 (count (vec (->> (for [_ (:Items g)] _)))) :cd_dep_employed_count (:depemp (:key g)) :cnt5 (count (vec (->> (for [_ (:Items g)] _)))) :cd_dep_college_count (:depcol (:key g)) :cnt6 (count (vec (->> (for [_ (:Items g)] _))))}) (_group_by active (fn [a] {:gender (:cd_gender a) :marital (:cd_marital_status a) :education (:cd_education_status a) :purchase (:cd_purchase_estimate a) :credit (:cd_credit_rating a) :dep (:cd_dep_count a) :depemp (:cd_dep_employed_count a) :depcol (:cd_dep_college_count a)})))) ;; list of
  (_json result)
  (test_TPCDS_Q10_demographics_count)
)

(-main)
