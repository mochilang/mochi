; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:12Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare store_sales catalog_sales web_sales total_profit)

(defn test_TPCDS_Q80_sample []
  (assert (_equal total_profit 80.0) "expect failed")
)

(defn -main []
  (def store_sales [{:price 20.0 :ret 5.0} {:price 10.0 :ret 2.0} {:price 5.0 :ret 0.0}]) ;; list of
  (def catalog_sales [{:price 15.0 :ret 3.0} {:price 8.0 :ret 1.0}]) ;; list of
  (def web_sales [{:price 25.0 :ret 5.0} {:price 15.0 :ret 8.0} {:price 8.0 :ret 2.0}]) ;; list of
  (def total_profit (+ (+ (reduce + 0 (vec (->> (for [s store_sales] (- (:price s) (:ret s)))))) (reduce + 0 (vec (->> (for [c catalog_sales] (- (:price c) (:ret c))))))) (reduce + 0 (vec (->> (for [w web_sales] (- (:price w) (:ret w)))))))) ;; float
  (_json total_profit)
  (test_TPCDS_Q80_sample)
)

(-main)
