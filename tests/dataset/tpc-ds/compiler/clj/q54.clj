; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:46:31Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare store_sales date_dim customer customer_address store revenue by_customer segments result)

;; Function int takes [x: float] and returns int
(defn int [x]
  (try
    (throw (ex-info "return" {:value (int x)}))
  (catch clojure.lang.ExceptionInfo e
    (if (= (.getMessage e) "return")
      (:value (ex-data e))
    (throw e)))
  )
)

(defn test_TPCDS_Q54_simplified []
  (assert (_equal result [{:segment 1 :num_customers 1 :segment_base 50} {:segment 0 :num_customers 1 :segment_base 0}]) "expect failed")
)

(defn -main []
  (def store_sales [{:customer 1 :sold_date 2 :price 60.0} {:customer 2 :sold_date 2 :price 40.0}]) ;; list of
  (def date_dim [{:d_date_sk 2 :d_month_seq 5}]) ;; list of
  (def customer [{:c_customer_sk 1 :c_current_addr_sk 1} {:c_customer_sk 2 :c_current_addr_sk 1}]) ;; list of
  (def customer_address [{:ca_address_sk 1 :ca_county "X" :ca_state "Y"}]) ;; list of
  (def store [{:s_store_sk 1 :s_county "X" :s_state "Y"}]) ;; list of
  (def revenue (vec (->> (for [ss store_sales d date_dim :when (_equal (:sold_date ss) (:d_date_sk d)) c customer :when (_equal (:customer ss) (:c_customer_sk c)) ca customer_address :when (and (and (_equal (:c_current_addr_sk c) (:ca_address_sk ca)) (_equal (:ca_county ca) "X")) (_equal (:ca_state ca) "Y")) s store :when (and (and (_equal 1 (:s_store_sk s)) (_equal (:ca_county ca) (:s_county s))) (_equal (:ca_state ca) (:s_state s)))] {:customer (:c_customer_sk c) :amt (:price ss)})))) ;; list of
  (def by_customer (map (fn [g] {:customer (:key g) :revenue (reduce + 0 (vec (->> (for [x (:Items g)] (:amt x)))))}) (_group_by revenue (fn [r] (:customer r))))) ;; list of
  (def segments (map (fn [g] {:segment (:seg (:key g)) :num_customers (count (:Items g)) :segment_base (* (:seg (:key g)) 50)}) (_group_by by_customer (fn [r] {:seg (int (/ (:revenue r) 50))})))) ;; list of
  (def result segments) ;; list of
  (_json result)
  (test_TPCDS_Q54_simplified)
)

(-main)
