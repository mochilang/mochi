; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:46:21Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare store_sales store customer_demographics customer_address date_dim year states1 states2 states3 qty_base qty result)

(defn test_TPCDS_Q48_simplified []
  (assert (_equal result 35) "expect failed")
)

(defn -main []
  (def store_sales [{:cdemo_sk 1 :addr_sk 1 :sold_date_sk 1 :sales_price 120.0 :net_profit 1000.0 :quantity 5} {:cdemo_sk 2 :addr_sk 2 :sold_date_sk 1 :sales_price 60.0 :net_profit 2000.0 :quantity 10} {:cdemo_sk 3 :addr_sk 3 :sold_date_sk 1 :sales_price 170.0 :net_profit 10000.0 :quantity 20}]) ;; list of
  (def store [{:s_store_sk 1}]) ;; list of
  (def customer_demographics [{:cd_demo_sk 1 :cd_marital_status "S" :cd_education_status "E1"} {:cd_demo_sk 2 :cd_marital_status "M" :cd_education_status "E2"} {:cd_demo_sk 3 :cd_marital_status "W" :cd_education_status "E3"}]) ;; list of
  (def customer_address [{:ca_address_sk 1 :ca_country "United States" :ca_state "TX"} {:ca_address_sk 2 :ca_country "United States" :ca_state "CA"} {:ca_address_sk 3 :ca_country "United States" :ca_state "NY"}]) ;; list of
  (def date_dim [{:d_date_sk 1 :d_year 2000}]) ;; list of
  (def year 2000) ;; int
  (def states1 ["TX"]) ;; list of string
  (def states2 ["CA"]) ;; list of string
  (def states3 ["NY"]) ;; list of string
  (def qty_base (vec (->> (for [ss store_sales cd customer_demographics :when (_equal (:cdemo_sk ss) (:cd_demo_sk cd)) ca customer_address :when (_equal (:addr_sk ss) (:ca_address_sk ca)) d date_dim :when (_equal (:sold_date_sk ss) (:d_date_sk d)) :when (and (and (_equal (:d_year d) year) (or (or (and (and (and (_equal (:cd_marital_status cd) "S") (_equal (:cd_education_status cd) "E1")) (>= (:sales_price ss) 100.0)) (<= (:sales_price ss) 150.0)) (and (and (and (_equal (:cd_marital_status cd) "M") (_equal (:cd_education_status cd) "E2")) (>= (:sales_price ss) 50.0)) (<= (:sales_price ss) 100.0))) (and (and (and (_equal (:cd_marital_status cd) "W") (_equal (:cd_education_status cd) "E3")) (>= (:sales_price ss) 150.0)) (<= (:sales_price ss) 200.0)))) (or (or (and (and (some #(= (:ca_state ca) %) states1) (>= (:net_profit ss) 0)) (<= (:net_profit ss) 2000)) (and (and (some #(= (:ca_state ca) %) states2) (>= (:net_profit ss) 150)) (<= (:net_profit ss) 3000))) (and (and (some #(= (:ca_state ca) %) states3) (>= (:net_profit ss) 50)) (<= (:net_profit ss) 25000))))] (:quantity ss))))) ;; list of int
  (def qty qty_base) ;; list of int
  (def result (reduce + 0 qty)) ;; float
  (_json result)
  (test_TPCDS_Q48_simplified)
)

(-main)
