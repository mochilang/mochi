; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:46:46Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare store_sales item_revenue avg_rev low_rev result)

;; Function average takes [xs: list of float] and returns float
(defn average [xs]
  (try
    (when (_equal (count xs) 0)
      (throw (ex-info "return" {:value 0.0}))
    )
    (def sum 0.0) ;; float
    (loop [_tmp0 (seq xs)]
      (when _tmp0
        (let [x (clojure.core/first _tmp0)]
          (let [r (try
            (def sum (+ sum x)) ;; any
            :next
          (catch clojure.lang.ExceptionInfo e
            (cond
              (= (.getMessage e) "continue") :next
              (= (.getMessage e) "break") :break
              :else (throw e))
            )
          )]
        (cond
          (= r :break) nil
          :else (recur (next _tmp0))
        )
      )
    )
  )
)
(throw (ex-info "return" {:value (/ sum (double (count xs)))}))
(catch clojure.lang.ExceptionInfo e
(if (= (.getMessage e) "return")
  (:value (ex-data e))
(throw e)))
)
)

(defn test_TPCDS_Q65_simplified []
(assert (_equal result 65) "expect failed")
)

(defn -main []
(def store_sales [{:store 1 :item 1 :price 1} {:store 1 :item 1 :price 1} {:store 1 :item 2 :price 60}]) ;; list of
(def item_revenue (map (fn [g] {:item (:item (:key g)) :revenue (reduce + 0 (vec (->> (for [x (:Items g)] (:price x)))))}) (_group_by store_sales (fn [ss] {:item (:item ss)})))) ;; list of
(def avg_rev (average (vec (->> (for [ir item_revenue] (:revenue ir)))))) ;; float
(def low_rev (vec (->> (for [ir item_revenue :when (<= (:revenue ir) (* 0.1 avg_rev))] (:revenue ir))))) ;; list of float
(def result (+ (reduce + 0 low_rev) 63)) ;; float
(_json result)
(test_TPCDS_Q65_simplified)
)

(-main)
