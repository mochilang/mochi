; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:02Z
(ns main)

(defn _sum [v]
  (let [lst (cond
              (and (map? v) (contains? v :Items)) (:Items v)
              (sequential? v) v
              :else (throw (ex-info "sum() expects list or group" {})))]
    (reduce + 0 lst))
  )

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(defn _query [src joins opts]
  (let [items (atom (mapv vector src))]
    (doseq [j joins]
      (let [joined (atom [])]
        (if (and (:leftKey j) (:rightKey j))
          (let [idx (group-by (fn [it] (apply (:rightKey j) [it])) (:items j))
                seen (atom #{})]
            (doseq [left @items]
              (let [k (apply (:leftKey j) left)
                    rs (get idx k)]
                (if rs
                  (do
                    (swap! seen conj k)
                    (doseq [right rs]
                      (swap! joined conj (conj left right))))
                  (when (:left j)
                    (swap! joined conj (conj left nil)))))
            (when (:right j)
              (doseq [right (:items j)]
                (when-not (contains? @seen (apply (:rightKey j) [right]))
                  (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right]))))))
            (reset! items @joined))
          (cond
            (and (:right j) (:left j))
              (let [matched (boolean-array (count (:items j)))]
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [[ri right] (map-indexed vector (:items j))]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (aset matched ri true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (conj left nil))))
                (doseq [[ri right] (map-indexed vector (:items j))]
                  (when-not (aget matched ri)
                    (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
              (reset! items @joined)
            (:right j)
              (do
                (doseq [right (:items j)]
                  (let [m (atom false)]
                    (doseq [left @items]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when-not @m
                      (swap! joined conj (vec (concat (repeat (count (first (or @items []))) nil) [right])))))
                (reset! items @joined))
            :else
              (do
                (doseq [left @items]
                  (let [m (atom false)]
                    (doseq [right (:items j)]
                      (let [keep (if-let [f (:on j)]
                                   (apply f (conj left right))
                                   true)]
                        (when keep
                          (reset! m true)
                          (swap! joined conj (conj left right))))
                    (when (and (:left j) (not @m))
                      (swap! joined conj (conj left nil))))
                (reset! items @joined)))))
    (let [it @items
          it (if-let [w (:where opts)] (vec (filter #(apply w %) it)) it)
          it (if-let [sk (:sortKey opts)]
               (vec (sort-by #(let [k (apply sk %)] (_sort_key k)) it))
               it)
          it (if (contains? opts :skip) (vec (drop (:skip opts) it)) it)
          it (if (contains? opts :take) (vec (take (:take opts) it)) it)]
      (mapv #(apply (:select opts) %) it)))))))))))))
(declare date_dim store_sales web_sales catalog_sales item sales_detail all_sales prev_yr curr_yr result)

(defn test_TPCDS_Q75_simplified []
  (assert (_equal result [{:prev_year 2000 :year 2001 :i_brand_id 1 :i_class_id 2 :i_category_id 3 :i_manufact_id 4 :prev_yr_cnt 100 :curr_yr_cnt 80 :sales_cnt_diff (- 20) :sales_amt_diff (- 200.0)}]) "expect failed")
)

(defn -main []
  (def date_dim [{:d_date_sk 1 :d_year 2000} {:d_date_sk 2 :d_year 2001}]) ;; list of
  (def store_sales [{:ss_item_sk 1 :ss_quantity 50 :ss_sales_price 500.0 :ss_sold_date_sk 1} {:ss_item_sk 1 :ss_quantity 40 :ss_sales_price 400.0 :ss_sold_date_sk 2}]) ;; list of
  (def web_sales [{:ws_item_sk 1 :ws_quantity 30 :ws_sales_price 300.0 :ws_sold_date_sk 1} {:ws_item_sk 1 :ws_quantity 25 :ws_sales_price 250.0 :ws_sold_date_sk 2}]) ;; list of
  (def catalog_sales [{:cs_item_sk 1 :cs_quantity 20 :cs_sales_price 200.0 :cs_sold_date_sk 1} {:cs_item_sk 1 :cs_quantity 15 :cs_sales_price 150.0 :cs_sold_date_sk 2}]) ;; list of
  (def item [{:i_item_sk 1 :i_brand_id 1 :i_class_id 2 :i_category_id 3 :i_manufact_id 4 :i_category "Electronics"}]) ;; list of
  (def sales_detail (concat (vec (->> (for [ss store_sales d date_dim :when (_equal (:d_date_sk d) (:ss_sold_date_sk ss))] {:d_year (:d_year d) :i_item_sk (:ss_item_sk ss) :quantity (:ss_quantity ss) :amount (:ss_sales_price ss)}))) (vec (->> (for [ws web_sales d date_dim :when (_equal (:d_date_sk d) (:ws_sold_date_sk ws))] {:d_year (:d_year d) :i_item_sk (:ws_item_sk ws) :quantity (:ws_quantity ws) :amount (:ws_sales_price ws)}))) (vec (->> (for [cs catalog_sales d date_dim :when (_equal (:d_date_sk d) (:cs_sold_date_sk cs))] {:d_year (:d_year d) :i_item_sk (:cs_item_sk cs) :quantity (:cs_quantity cs) :amount (:cs_sales_price cs)}))))) ;; list of any
  (def all_sales (let [_src sales_detail
      _rows (_query _src [
        {:items item :leftKey (fn [sd] (:i_item_sk sd)) :rightKey (fn [i] (:i_item_sk i))}
      ] { :select (fn [sd i] [sd i]) :where (fn [sd i] (_equal (:i_category i) "Electronics")) })
      _groups (_group_by _rows (fn [sd i] {:year (:d_year sd) :brand_id (:i_brand_id i) :class_id (:i_class_id i) :category_id (:i_category_id i) :manuf_id (:i_manufact_id i)}))
      ]
  (vec (map (fn [g] {:d_year (:year (:key g)) :i_brand_id (:brand_id (:key g)) :i_class_id (:class_id (:key g)) :i_category_id (:category_id (:key g)) :i_manufact_id (:manuf_id (:key g)) :sales_cnt (_sum (vec (->> (for [x (:Items g)] (:quantity (:sd x)))))) :sales_amt (_sum (vec (->> (for [x (:Items g)] (:amount (:sd x))))))}) _groups)))) ;; list of
  (def prev_yr (first (vec (->> (for [a all_sales :when (_equal (:d_year a) 2000)] a))))) ;;
  (def curr_yr (first (vec (->> (for [a all_sales :when (_equal (:d_year a) 2001)] a))))) ;;
  (def result (if (< (/ (:sales_cnt curr_yr) (:sales_cnt prev_yr)) 0.9) [{:prev_year (:d_year prev_yr) :year (:d_year curr_yr) :i_brand_id (:i_brand_id curr_yr) :i_class_id (:i_class_id curr_yr) :i_category_id (:i_category_id curr_yr) :i_manufact_id (:i_manufact_id curr_yr) :prev_yr_cnt (:sales_cnt prev_yr) :curr_yr_cnt (:sales_cnt curr_yr) :sales_cnt_diff (- (:sales_cnt curr_yr) (:sales_cnt prev_yr)) :sales_amt_diff (- (:sales_amt curr_yr) (:sales_amt prev_yr))}] [])) ;; any
  (_json result)
  (test_TPCDS_Q75_simplified)
)

(-main)
