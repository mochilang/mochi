; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:46:06Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _intersect [a b]
  (vec (distinct (filter (set b) a))))
(declare customer store_sales catalog_sales web_sales store_ids catalog_ids web_ids hot result)

;; Function distinct takes [xs: list of any] and returns list of any
(defn distinct [xs]
  (try
    (def out []) ;; list of any
    (loop [_tmp0 (seq xs)]
      (when _tmp0
        (let [x (clojure.core/first _tmp0)]
          (let [r (try
            (when (not (contains out x))
              (def out (conj out x)) ;; list of any
            )
            :next
          (catch clojure.lang.ExceptionInfo e
            (cond
              (= (.getMessage e) "continue") :next
              (= (.getMessage e) "break") :break
              :else (throw e))
            )
          )]
        (cond
          (= r :break) nil
          :else (recur (next _tmp0))
        )
      )
    )
  )
)
(throw (ex-info "return" {:value out}))
(catch clojure.lang.ExceptionInfo e
(if (= (.getMessage e) "return")
  (:value (ex-data e))
(throw e)))
)
)

(defn test_TPCDS_Q38_simplified []
(assert (_equal result 1) "expect failed")
)

(defn -main []
(def customer [{:c_customer_sk 1 :c_last_name "Smith" :c_first_name "John"} {:c_customer_sk 2 :c_last_name "Jones" :c_first_name "Alice"}]) ;; list of
(def store_sales [{:ss_customer_sk 1 :d_month_seq 1200} {:ss_customer_sk 2 :d_month_seq 1205}]) ;; list of
(def catalog_sales [{:cs_bill_customer_sk 1 :d_month_seq 1203}]) ;; list of
(def web_sales [{:ws_bill_customer_sk 1 :d_month_seq 1206}]) ;; list of
(def store_ids (distinct (vec (->> (for [s store_sales :when (and (>= (:d_month_seq s) 1200) (<= (:d_month_seq s) 1211))] (:ss_customer_sk s)))))) ;; list of any
(def catalog_ids (distinct (vec (->> (for [c catalog_sales :when (and (>= (:d_month_seq c) 1200) (<= (:d_month_seq c) 1211))] (:cs_bill_customer_sk c)))))) ;; list of any
(def web_ids (distinct (vec (->> (for [w web_sales :when (and (>= (:d_month_seq w) 1200) (<= (:d_month_seq w) 1211))] (:ws_bill_customer_sk w)))))) ;; list of any
(def hot (_intersect (_intersect store_ids catalog_ids) web_ids)) ;; list of any
(def result (count hot)) ;; int
(_json result)
(test_TPCDS_Q38_simplified)
)

(-main)
