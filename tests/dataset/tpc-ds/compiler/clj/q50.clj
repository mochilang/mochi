; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:46:24Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defrecord _Group [key Items])

(defn _group_by [src keyfn]
  (let [groups (transient {})
        order (transient [])]
    (doseq [it src]
      (let [k (keyfn it)
            ks (str k)
            g (get groups ks)]
        (if g
          (assoc! groups ks (assoc g :Items (conj (:Items g) it)))
          (do
            (assoc! groups ks (_Group. k [it]))
            (conj! order ks))))
    )
    (let [g (persistent! groups)
          o (persistent! order)]
      (mapv #(get g %) o))))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare store_sales store_returns date_dim store year month joined result)

(defn test_TPCDS_Q50_simplified []
  (assert (_equal result [{:s_store_name "Main" :d30 1 :d31_60 1 :d61_90 1 :d91_120 1 :d_gt_120 1}]) "expect failed")
)

(defn -main []
  (def store_sales [{:ticket 1 :item 101 :sold 1 :customer 1 :store 1} {:ticket 2 :item 102 :sold 1 :customer 1 :store 1} {:ticket 3 :item 103 :sold 1 :customer 1 :store 1} {:ticket 4 :item 104 :sold 1 :customer 1 :store 1} {:ticket 5 :item 105 :sold 1 :customer 1 :store 1}]) ;; list of
  (def store_returns [{:ticket 1 :item 101 :returned 16 :customer 1} {:ticket 2 :item 102 :returned 46 :customer 1} {:ticket 3 :item 103 :returned 76 :customer 1} {:ticket 4 :item 104 :returned 111 :customer 1} {:ticket 5 :item 105 :returned 151 :customer 1}]) ;; list of
  (def date_dim [{:d_date_sk 1 :d_year 2001 :d_moy 7} {:d_date_sk 16 :d_year 2001 :d_moy 8} {:d_date_sk 46 :d_year 2001 :d_moy 8} {:d_date_sk 76 :d_year 2001 :d_moy 8} {:d_date_sk 111 :d_year 2001 :d_moy 8} {:d_date_sk 151 :d_year 2001 :d_moy 8}]) ;; list of
  (def store [{:s_store_sk 1 :s_store_name "Main" :s_company_id 1 :s_street_number "1" :s_street_name "Main" :s_street_type "St" :s_suite_number "100" :s_city "City" :s_county "County" :s_state "CA" :s_zip "12345"}]) ;; list of
  (def year 2001) ;; int
  (def month 8) ;; int
  (def joined (vec (->> (for [ss store_sales sr store_returns :when (and (and (_equal (:ticket ss) (:ticket sr)) (_equal (:item ss) (:item sr))) (_equal (:customer ss) (:customer sr))) d1 date_dim :when (_equal (:sold ss) (:d_date_sk d1)) d2 date_dim :when (and (and (_equal (:returned sr) (:d_date_sk d2)) (_equal (:d_year d2) year)) (_equal (:d_moy d2) month)) s store :when (_equal (:store ss) (:s_store_sk s))] {:s s :diff (- (:returned sr) (:sold ss))})))) ;; list of
  (def result (map (fn [g] {:s_store_name (:s_store_name (:key g)) :d30 (count (vec (->> (for [x (:Items g) :when (<= (:diff x) 30)] 1)))) :d31_60 (count (vec (->> (for [x (:Items g) :when (and (> (:diff x) 30) (<= (:diff x) 60))] 1)))) :d61_90 (count (vec (->> (for [x (:Items g) :when (and (> (:diff x) 60) (<= (:diff x) 90))] 1)))) :d91_120 (count (vec (->> (for [x (:Items g) :when (and (> (:diff x) 90) (<= (:diff x) 120))] 1)))) :d_gt_120 (count (vec (->> (for [x (:Items g) :when (> (:diff x) 120)] 1))))}) (_group_by joined (fn [j] (:s j))))) ;; list of
  (_json result)
  (test_TPCDS_Q50_simplified)
)

(-main)
