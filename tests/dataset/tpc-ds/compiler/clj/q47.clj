; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:46:20Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(defn _sort_key [k]
  (cond
    (map? k) (pr-str (into (sorted-map) k))
    (sequential? k) (vec k)
    :else k))
(declare v2 year orderby result)

;; Function abs takes [x: float] and returns float
(defn abs [x]
  (try
    (if (>= x 0.0)
      (do
        (throw (ex-info "return" {:value x}))
      )

    (do
      (throw (ex-info "return" {:value (- x)}))
    )
    )
  (catch clojure.lang.ExceptionInfo e
    (if (= (.getMessage e) "return")
      (:value (ex-data e))
    (throw e)))
  )
)

(defn test_TPCDS_Q47_simplified []
  (assert (_equal result [{:d_year 2019 :item "C" :avg_monthly_sales 50.0 :sum_sales 60.0} {:d_year 2020 :item "A" :avg_monthly_sales 100.0 :sum_sales 120.0}]) "expect failed")
)

(defn -main []
  (def v2 [{:d_year 2020 :item "A" :avg_monthly_sales 100.0 :sum_sales 120.0} {:d_year 2020 :item "B" :avg_monthly_sales 80.0 :sum_sales 70.0} {:d_year 2019 :item "C" :avg_monthly_sales 50.0 :sum_sales 60.0}]) ;; list of
  (def year 2020) ;; int
  (def orderby "item") ;; string
  (def result (vec (->> (for [v v2 :when (and (and (and (>= (:d_year v) (- year 1)) (> (:avg_monthly_sales v) 0)) (> (:sum_sales v) (:avg_monthly_sales v))) (> (/ (abs (- (:sum_sales v) (:avg_monthly_sales v))) (:avg_monthly_sales v)) 0.1))] {:d_year (:d_year v) :item (:item v) :avg_monthly_sales (:avg_monthly_sales v) :sum_sales (:sum_sales v)}) (sort-by (fn [v] (_sort_key [(- (:sum_sales v) (:avg_monthly_sales v)) (:item v)])))))) ;; list of
  (_json result)
  (test_TPCDS_Q47_simplified)
)

(-main)
