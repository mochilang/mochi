; Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:32Z
(ns main)

(defn _equal [a b]
  (cond
    (and (sequential? a) (sequential? b))
      (and (= (count a) (count b)) (every? true? (map _equal a b)))
    (and (map? a) (map? b))
      (and (= (count a) (count b))
           (every? (fn [k] (_equal (get a k) (get b k))) (keys a)))
    (and (number? a) (number? b))
      (= (double a) (double b))
    :else
      (= a b)))

(defn _escape_json [s]
  (-> s
      (clojure.string/replace "\\" "\\\\")
      (clojure.string/replace "\"" "\\\"")))

(defn _to_json [v]
  (cond
    (nil? v) "null"
    (string? v) (str "\"" (_escape_json v) "\"")
    (number? v) (str v)
    (boolean? v) (str v)
    (sequential? v) (str "[" (clojure.string/join "," (map _to_json v)) "]")
    (map? v) (str "{" (clojure.string/join "," (map (fn [[k val]]
                                        (str "\"" (_escape_json (name k)) "\":" (_to_json val))) v)) "}")
    :else (str "\"" (_escape_json (str v)) "\"")))

(defn _json [v]
  (println (_to_json v)))

(declare web_sales web_returns date_dim customer_address web_site ws_wh filtered result)

(defn WebSale [ws_order_number ws_warehouse_sk ws_ship_date_sk ws_ship_addr_sk ws_web_site_sk ws_ext_ship_cost ws_net_profit]
  {:__name "WebSale" :ws_order_number ws_order_number :ws_warehouse_sk ws_warehouse_sk :ws_ship_date_sk ws_ship_date_sk :ws_ship_addr_sk ws_ship_addr_sk :ws_web_site_sk ws_web_site_sk :ws_ext_ship_cost ws_ext_ship_cost :ws_net_profit ws_net_profit}
)


(defn WebReturn [wr_order_number]
  {:__name "WebReturn" :wr_order_number wr_order_number}
)


(defn DateDim [d_date_sk d_date]
  {:__name "DateDim" :d_date_sk d_date_sk :d_date d_date}
)


(defn CustomerAddress [ca_address_sk ca_state]
  {:__name "CustomerAddress" :ca_address_sk ca_address_sk :ca_state ca_state}
)


(defn WebSite [web_site_sk web_company_name]
  {:__name "WebSite" :web_site_sk web_site_sk :web_company_name web_company_name}
)


;; Function distinct takes [xs: list of any] and returns list of any
(defn distinct [xs]
  (try
    (def out []) ;; list of any
    (loop [_tmp0 (seq xs)]
      (when _tmp0
        (let [x (clojure.core/first _tmp0)]
          (let [r (try
            (when (not (contains out x))
              (def out (conj out x)) ;; list of any
            )
            :next
          (catch clojure.lang.ExceptionInfo e
            (cond
              (= (.getMessage e) "continue") :next
              (= (.getMessage e) "break") :break
              :else (throw e))
            )
          )]
        (cond
          (= r :break) nil
          :else (recur (next _tmp0))
        )
      )
    )
  )
)
(throw (ex-info "return" {:value out}))
(catch clojure.lang.ExceptionInfo e
(if (= (.getMessage e) "return")
  (:value (ex-data e))
(throw e)))
)
)

(defn test_TPCDS_Q95_shipping_returns []
(assert (_equal result {:order_count 1 :total_shipping_cost 2.0 :total_net_profit 5.0}) "expect failed")
)

(defn -main []
(def web_sales [{:ws_order_number 1 :ws_warehouse_sk 1 :ws_ship_date_sk 1 :ws_ship_addr_sk 1 :ws_web_site_sk 1 :ws_ext_ship_cost 2.0 :ws_net_profit 5.0} {:ws_order_number 1 :ws_warehouse_sk 2 :ws_ship_date_sk 1 :ws_ship_addr_sk 1 :ws_web_site_sk 1 :ws_ext_ship_cost 0.0 :ws_net_profit 0.0}]) ;; list of
(def web_returns [{:wr_order_number 1}]) ;; list of
(def date_dim [{:d_date_sk 1 :d_date "2001-02-01"}]) ;; list of
(def customer_address [{:ca_address_sk 1 :ca_state "CA"}]) ;; list of
(def web_site [{:web_site_sk 1 :web_company_name "pri"}]) ;; list of
(def ws_wh (vec (->> (for [ws1 web_sales ws2 web_sales :when (and (_equal (:ws_order_number ws1) (:ws_order_number ws2)) (not (_equal (:ws_warehouse_sk ws1) (:ws_warehouse_sk ws2))))] {:ws_order_number (:ws_order_number ws1)})))) ;; list of
(def filtered (vec (->> (for [ws web_sales d date_dim :when (_equal (:ws_ship_date_sk ws) (:d_date_sk d)) ca customer_address :when (_equal (:ws_ship_addr_sk ws) (:ca_address_sk ca)) w web_site :when (_equal (:ws_web_site_sk ws) (:web_site_sk w)) :when (and (and (and (_equal (:ca_state ca) "CA") (_equal (:web_company_name w) "pri")) (some #(= (:ws_order_number ws) %) (vec (->> (for [x ws_wh] (:ws_order_number x)))))) (some #(= (:ws_order_number ws) %) (vec (->> (for [wr web_returns] (:wr_order_number wr))))))] ws)))) ;; list of
(def result {:order_count (count (distinct (vec (->> (for [x filtered] (:ws_order_number x)))))) :total_shipping_cost (reduce + 0 (vec (->> (for [x filtered] (:ws_ext_ship_cost x))))) :total_net_profit (reduce + 0 (vec (->> (for [x filtered] (:ws_net_profit x)))))}) ;;
(_json result)
(test_TPCDS_Q95_shipping_returns)
)

(-main)
