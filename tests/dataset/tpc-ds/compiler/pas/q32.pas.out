program main;
{$mode objfpc}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser, Math;

type
  generic TArray<T> = array of T;

generic function _avgList<T>(arr: specialize TArray<T>): double;
begin
  if Length(arr) = 0 then exit(0);
  Result := specialize _sumList<T>(arr) / Length(arr);
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<Variant, Variant>;
  _tmp1: specialize TFPGMap<Variant, Variant>;
  _tmp2: specialize TFPGMap<Variant, Variant>;
  _tmp3: specialize TFPGMap<Variant, integer>;
  _tmp4: specialize TFPGMap<Variant, integer>;
  _tmp5: specialize TFPGMap<Variant, integer>;
  _tmp6: specialize TFPGMap<Variant, integer>;
  _tmp7: specialize TArray<Variant>;
  _tmp8: specialize TArray<Variant>;
  avg_discount: double;
  catalog_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  cs: specialize TFPGMap<string, Variant>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  filtered: specialize TArray<Variant>;
  item: specialize TArray<specialize TFPGMap<string, integer>>;
  _result: double;
  x: Variant;

procedure test_TPCDS_Q32_simplified;
begin
  if not ((_result = 20)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp0.AddOrSetData('cs_item_sk', 1);
  _tmp0.AddOrSetData('cs_sold_date_sk', 1);
  _tmp0.AddOrSetData('cs_ext_discount_amt', 5);
  _tmp1 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp1.AddOrSetData('cs_item_sk', 1);
  _tmp1.AddOrSetData('cs_sold_date_sk', 2);
  _tmp1.AddOrSetData('cs_ext_discount_amt', 10);
  _tmp2 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp2.AddOrSetData('cs_item_sk', 1);
  _tmp2.AddOrSetData('cs_sold_date_sk', 3);
  _tmp2.AddOrSetData('cs_ext_discount_amt', 20);
  catalog_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<Variant, integer>.Create;
  _tmp3.AddOrSetData('i_item_sk', 1);
  _tmp3.AddOrSetData('i_manufact_id', 1);
  item := specialize TArray<specialize TFPGMap<string, integer>>([_tmp3]);
  _tmp4 := specialize TFPGMap<Variant, integer>.Create;
  _tmp4.AddOrSetData('d_date_sk', 1);
  _tmp4.AddOrSetData('d_year', 2000);
  _tmp5 := specialize TFPGMap<Variant, integer>.Create;
  _tmp5.AddOrSetData('d_date_sk', 2);
  _tmp5.AddOrSetData('d_year', 2000);
  _tmp6 := specialize TFPGMap<Variant, integer>.Create;
  _tmp6.AddOrSetData('d_date_sk', 3);
  _tmp6.AddOrSetData('d_year', 2000);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp4, _tmp5, _tmp6]);
  SetLength(_tmp7, 0);
  for cs in catalog_sales do
  begin
    for i in item do
    begin
      if not ((cs.cs_item_sk = i.i_item_sk)) then continue;
      for d in date_dim do
      begin
        if not ((cs.cs_sold_date_sk = d.d_date_sk)) then continue;
        if not (((i.i_manufact_id = 1) and (d.d_year = 2000))) then continue;
        _tmp7 := Concat(_tmp7, [cs.cs_ext_discount_amt]);
      end;
    end;
  end;
  filtered := _tmp7;
  avg_discount := specialize _avgList<Variant>(filtered);
  SetLength(_tmp8, 0);
  for x in filtered do
  begin
    if not ((x > avg_discount * 1.3)) then continue;
    _tmp8 := Concat(_tmp8, [x]);
  end;
  _result := specialize _sumList<Variant>(_tmp8);
  specialize _json<double>(_result);
  test_TPCDS_Q32_simplified;
end.
