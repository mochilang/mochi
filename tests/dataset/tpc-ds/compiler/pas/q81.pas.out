// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:30Z
program Q81;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic _Group<K,T> = record
  Key: K;
  Items: specialize TArray<T>;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

generic function _first<T>(arr: specialize TArray<T>): T;
begin
  if Length(arr) = 0 then exit(Default(T));
  Result := arr[0];
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _avgList<T>(arr: specialize TArray<T>): double;
begin
  if Length(arr) = 0 then exit(0);
  Result := specialize _sumList<T>(arr) / Length(arr);
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: integer;
  _tmp11: specialize _Group<Variant, specialize TFPGMap<string, Variant>>;
  _tmp12: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp13: specialize TFPGMap<string, Variant>;
  _tmp14: specialize TArray<Variant>;
  _tmp15: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp16: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TFPGMap<string, Variant>;
  _tmp5: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp6: specialize TArray<specialize _Group<Variant, specialize TFPGMap<string, Variant>>>;
  _tmp7: Variant;
  _tmp8: string;
  _tmp9: integer;
  a: specialize TFPGMap<string, Variant>;
  avg_list: specialize TArray<specialize TFPGMap<string, Variant>>;
  avg_state: Variant;
  catalog_returns: specialize TArray<specialize TFPGMap<string, Variant>>;
  r: specialize TFPGMap<string, Variant>;
  _result: Variant;
  result_list: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: integer;

procedure test_TPCDS_Q81_sample;
begin
  if not ((_result = 81)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('cust', 1);
  _tmp0.AddOrSetData('state', 'CA');
  _tmp0.AddOrSetData('amt', 40);
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('cust', 2);
  _tmp1.AddOrSetData('state', 'CA');
  _tmp1.AddOrSetData('amt', 50);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('cust', 3);
  _tmp2.AddOrSetData('state', 'CA');
  _tmp2.AddOrSetData('amt', 81);
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('cust', 4);
  _tmp3.AddOrSetData('state', 'TX');
  _tmp3.AddOrSetData('amt', 30);
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('cust', 5);
  _tmp4.AddOrSetData('state', 'TX');
  _tmp4.AddOrSetData('amt', 20);
  catalog_returns := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1, _tmp2, _tmp3, _tmp4]);
  SetLength(_tmp5, 0);
  for r in catalog_returns do
  begin
    _tmp5 := Concat(_tmp5, [r]);
  end;
  SetLength(_tmp6, 0);
  for r in _tmp5 do
  begin
    _tmp7 := r.KeyData['state'];
    _tmp8 := VarToStr(_tmp7);
    _tmp9 := -1;
    for _tmp10 := 0 to High(_tmp6) do
      if VarToStr(_tmp6[_tmp10].Key) = _tmp8 then begin _tmp9 := _tmp10; Break; end;
    if _tmp9 = -1 then
    begin
      _tmp9 := Length(_tmp6);
      SetLength(_tmp6, _tmp9 + 1);
      _tmp6[_tmp9].Key := _tmp7;
      SetLength(_tmp6[_tmp9].Items, 0);
    end;
    SetLength(_tmp6[_tmp9].Items, Length(_tmp6[_tmp9].Items)+1);
    _tmp6[_tmp9].Items[High(_tmp6[_tmp9].Items)] := r;
  end;
  SetLength(_tmp12, 0);
  for _tmp11 in _tmp6 do
  begin
    _tmp13 := specialize TFPGMap<string, Variant>.Create;
    _tmp13.AddOrSetData('state', g.key);
    SetLength(_tmp14, 0);
    for x in g do
    begin
      _tmp14 := Concat(_tmp14, [x.amt]);
    end;
    _tmp13.AddOrSetData('avg_amt', specialize _avgList<Variant>(_tmp14));
    _tmp12 := Concat(_tmp12, [_tmp13]);
  end;
  avg_list := _tmp12;
  SetLength(_tmp15, 0);
  for a in avg_list do
  begin
    if not ((a.KeyData['state'] = 'CA')) then continue;
    _tmp15 := Concat(_tmp15, [a]);
  end;
  avg_state := specialize _first<specialize TFPGMap<string, Variant>>(_tmp15);
  SetLength(_tmp16, 0);
  for r in catalog_returns do
  begin
    if not (((r.KeyData['state'] = 'CA') and (r.KeyData['amt'] > avg_state.avg_amt * 1.2))) then continue;
    _tmp16 := Concat(_tmp16, [r.KeyData['amt']]);
  end;
  result_list := _tmp16;
  _result := specialize _first<specialize TFPGMap<string, Variant>>(result_list);
  specialize _json<Variant>(_result);
  test_TPCDS_Q81_sample;
end.
