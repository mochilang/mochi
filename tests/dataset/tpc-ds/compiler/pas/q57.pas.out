// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:27Z
program Q57;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function abs(x: double): double;
begin
  if (x >= 0) then ;
  result := -x;
  exit;
end;

generic _Group<K,T> = record
  Key: K;
  Items: specialize TArray<T>;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _avgList<T>(arr: specialize TArray<T>): double;
begin
  if Length(arr) = 0 then exit(0);
  Result := specialize _sumList<T>(arr) / Length(arr);
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: specialize TArray<Variant>;
  _tmp11: specialize TFPGMap<string, Variant>;
  _tmp12: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp13: specialize TArray<specialize _Group<_, specialize TFPGMap<string, Variant>>>;
  _tmp14: _;
  _tmp15: string;
  _tmp16: integer;
  _tmp17: integer;
  _tmp18: specialize _Group<_, specialize TFPGMap<string, Variant>>;
  _tmp19: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp20: specialize TFPGMap<string, Variant>;
  _tmp21: specialize TArray<Variant>;
  _tmp22: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp23: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TFPGMap<string, Variant>;
  _tmp5: specialize TFPGMap<string, integer>;
  _tmp6: specialize TFPGMap<string, integer>;
  _tmp7: specialize TFPGMap<string, integer>;
  _tmp8: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp9: specialize TFPGMap<string, Variant>;
  a: specialize TFPGMap<string, Variant>;
  avg_by_year: specialize TArray<specialize TFPGMap<string, Variant>>;
  call_center: specialize TArray<specialize TFPGMap<string, Variant>>;
  catalog_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  cc: specialize TFPGMap<string, Variant>;
  cs: specialize TFPGMap<string, Variant>;
  d: specialize TFPGMap<string, integer>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  g: specialize TFPGMap<string, Variant>;
  grouped: specialize TArray<specialize TFPGMap<string, Variant>>;
  i: specialize TFPGMap<string, Variant>;
  item: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: integer;

procedure test_TPCDS_Q57_simplified;
begin
  if not ((_result = specialize TArray<integer>([]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('item', 1);
  _tmp0.AddOrSetData('call', 1);
  _tmp0.AddOrSetData('date', 1);
  _tmp0.AddOrSetData('price', 20);
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('item', 1);
  _tmp1.AddOrSetData('call', 1);
  _tmp1.AddOrSetData('date', 2);
  _tmp1.AddOrSetData('price', 20);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('item', 1);
  _tmp2.AddOrSetData('call', 1);
  _tmp2.AddOrSetData('date', 3);
  _tmp2.AddOrSetData('price', 40);
  catalog_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('i_item_sk', 1);
  _tmp3.AddOrSetData('i_category', 'A');
  _tmp3.AddOrSetData('i_brand', 'B');
  item := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp3]);
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('cc_call_center_sk', 1);
  _tmp4.AddOrSetData('cc_name', 'C1');
  call_center := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4]);
  _tmp5 := specialize TFPGMap<string, integer>.Create;
  _tmp5.AddOrSetData('d_date_sk', 1);
  _tmp5.AddOrSetData('d_year', 2000);
  _tmp5.AddOrSetData('d_moy', 11);
  _tmp6 := specialize TFPGMap<string, integer>.Create;
  _tmp6.AddOrSetData('d_date_sk', 2);
  _tmp6.AddOrSetData('d_year', 2000);
  _tmp6.AddOrSetData('d_moy', 12);
  _tmp7 := specialize TFPGMap<string, integer>.Create;
  _tmp7.AddOrSetData('d_date_sk', 3);
  _tmp7.AddOrSetData('d_year', 2001);
  _tmp7.AddOrSetData('d_moy', 1);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp5, _tmp6, _tmp7]);
  SetLength(_tmp8, 0);
  for cs in catalog_sales do
  begin
    for i in item do
    begin
      if not ((cs.KeyData['item'] = i.KeyData['i_item_sk'])) then continue;
      for d in date_dim do
      begin
        if not ((cs.KeyData['date'] = d.KeyData['d_date_sk'])) then continue;
        for cc in call_center do
        begin
          if not ((cs.KeyData['call'] = cc.KeyData['cc_call_center_sk'])) then continue;
          _tmp9 := specialize TFPGMap<string, Variant>.Create;
          _tmp9.AddOrSetData('cat', g.KeyData['key'].cat);
          _tmp9.AddOrSetData('call', g.KeyData['key'].call);
          _tmp9.AddOrSetData('year', g.KeyData['key'].year);
          SetLength(_tmp10, 0);
          for x in g do
          begin
            _tmp10 := Concat(_tmp10, [x.price]);
          end;
          _tmp9.AddOrSetData('sum_sales', specialize _sumList<Variant>(_tmp10));
          _tmp8 := Concat(_tmp8, [_tmp9]);
        end;
      end;
    end;
  end;
  grouped := _tmp8;
  _tmp11 := specialize TFPGMap<string, Variant>.Create;
  _tmp11.AddOrSetData('cat', g.KeyData['cat']);
  _tmp11.AddOrSetData('call', g.KeyData['call']);
  SetLength(_tmp12, 0);
  for g in grouped do
  begin
    _tmp12 := Concat(_tmp12, [g]);
  end;
  SetLength(_tmp13, 0);
  for g in _tmp12 do
  begin
    _tmp14 := _tmp11;
    _tmp15 := VarToStr(_tmp14);
    _tmp16 := -1;
    for _tmp17 := 0 to High(_tmp13) do
      if VarToStr(_tmp13[_tmp17].Key) = _tmp15 then begin _tmp16 := _tmp17; Break; end;
    if _tmp16 = -1 then
    begin
      _tmp16 := Length(_tmp13);
      SetLength(_tmp13, _tmp16 + 1);
      _tmp13[_tmp16].Key := _tmp14;
      SetLength(_tmp13[_tmp16].Items, 0);
    end;
    SetLength(_tmp13[_tmp16].Items, Length(_tmp13[_tmp16].Items)+1);
    _tmp13[_tmp16].Items[High(_tmp13[_tmp16].Items)] := g;
  end;
  SetLength(_tmp19, 0);
  for _tmp18 in _tmp13 do
  begin
    _tmp20 := specialize TFPGMap<string, Variant>.Create;
    _tmp20.AddOrSetData('cat', gg.key.cat);
    _tmp20.AddOrSetData('call', gg.key.call);
    SetLength(_tmp21, 0);
    for x in gg do
    begin
      _tmp21 := Concat(_tmp21, [x.sum_sales]);
    end;
    _tmp20.AddOrSetData('avg_sales', specialize _avgList<Variant>(_tmp21));
    _tmp19 := Concat(_tmp19, [_tmp20]);
  end;
  avg_by_year := _tmp19;
  SetLength(_tmp22, 0);
  for g in grouped do
  begin
    for a in avg_by_year do
    begin
      if not (((g.KeyData['cat'] = a.KeyData['cat']) and (g.KeyData['call'] = a.KeyData['call']))) then continue;
      if not ((((g.KeyData['year'] = 2001) and (a.KeyData['avg_sales'] > 0)) and (Abs(g.KeyData['sum_sales'] - a.KeyData['avg_sales']) / a.KeyData['avg_sales'] > 0.1))) then continue;
      _tmp23 := specialize TFPGMap<string, Variant>.Create;
      _tmp23.AddOrSetData('i_category', g.KeyData['cat']);
      _tmp23.AddOrSetData('sum_sales', g.KeyData['sum_sales']);
      _tmp22 := Concat(_tmp22, [_tmp23]);
    end;
  end;
  _result := _tmp22;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q57_simplified;
end.
