program main;
{$mode objfpc}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser, Math;

type
  generic TArray<T> = array of T;

generic _Group<T> = record
  Key: Variant;
  Items: specialize TArray<T>;
end;

generic function _group_by<T>(src: specialize TArray<T>; keyfn: function(it: T): Variant): specialize TArray<specialize _Group<T>>;
var i,j,idx: Integer; key: Variant; ks: string;
begin
  SetLength(Result, 0);
  for i := 0 to High(src) do
  begin
    key := keyfn(src[i]);
    ks := VarToStr(key);
    idx := -1;
    for j := 0 to High(Result) do
      if VarToStr(Result[j].Key) = ks then begin idx := j; Break; end;
    if idx = -1 then
    begin
      idx := Length(Result);
      SetLength(Result, idx + 1);
      Result[idx].Key := key;
      SetLength(Result[idx].Items, 0);
    end;
    SetLength(Result[idx].Items, Length(Result[idx].Items)+1);
    Result[idx].Items[High(Result[idx].Items)] := src[i];
  end;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<Variant, Variant>;
  _tmp1: specialize TFPGMap<Variant, Variant>;
  _tmp10: specialize TFPGMap<Variant, Variant>;
  _tmp11: specialize TFPGMap<Variant, Variant>;
  _tmp12: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp13: specialize TArray<Variant>;
  _tmp14: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp15: specialize TArray<Variant>;
  _tmp16: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp17: specialize TArray<specialize _Group<specialize TFPGMap<string, Variant>>>;
  _tmp18: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp2: specialize TFPGMap<Variant, Variant>;
  _tmp3: specialize TFPGMap<Variant, Variant>;
  _tmp4: specialize TFPGMap<Variant, Variant>;
  _tmp5: specialize TFPGMap<Variant, Variant>;
  _tmp6: specialize TFPGMap<Variant, Variant>;
  _tmp7: specialize TFPGMap<Variant, Variant>;
  _tmp8: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp9: specialize TArray<specialize TFPGMap<string, Variant>>;
  catalog_returns: specialize TArray<specialize TFPGMap<string, Variant>>;
  catalog_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  cs: specialize TFPGMap<string, Variant>;
  date_dim: specialize TArray<specialize TFPGMap<string, Variant>>;
  item: specialize TArray<specialize TFPGMap<string, Variant>>;
  r: specialize TFPGMap<string, Variant>;
  records: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  sales_date: string;
  warehouse: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: integer;

procedure test_TPCDS_Q40_simplified;
var
  _tmp19: specialize TFPGMap<Variant, Variant>;
begin
  _tmp19 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp19.AddOrSetData('w_state', 'CA');
  _tmp19.AddOrSetData('i_item_id', 'I1');
  _tmp19.AddOrSetData('sales_before', 100);
  _tmp19.AddOrSetData('sales_after', 0);
  if not ((_result = specialize TArray<specialize TFPGMap<string, Variant>>([_tmp19]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp0.AddOrSetData('order', 1);
  _tmp0.AddOrSetData('item_sk', 1);
  _tmp0.AddOrSetData('warehouse_sk', 1);
  _tmp0.AddOrSetData('date_sk', 1);
  _tmp0.AddOrSetData('price', 100);
  _tmp1 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp1.AddOrSetData('order', 2);
  _tmp1.AddOrSetData('item_sk', 1);
  _tmp1.AddOrSetData('warehouse_sk', 1);
  _tmp1.AddOrSetData('date_sk', 2);
  _tmp1.AddOrSetData('price', 150);
  catalog_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp2.AddOrSetData('order', 2);
  _tmp2.AddOrSetData('item_sk', 1);
  _tmp2.AddOrSetData('refunded', 150);
  catalog_returns := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp2]);
  _tmp3 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp3.AddOrSetData('item_sk', 1);
  _tmp3.AddOrSetData('item_id', 'I1');
  _tmp3.AddOrSetData('current_price', 1.2);
  item := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp3]);
  _tmp4 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp4.AddOrSetData('warehouse_sk', 1);
  _tmp4.AddOrSetData('state', 'CA');
  warehouse := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4]);
  _tmp5 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp5.AddOrSetData('date_sk', 1);
  _tmp5.AddOrSetData('date', '2020-01-10');
  _tmp6 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp6.AddOrSetData('date_sk', 2);
  _tmp6.AddOrSetData('date', '2020-01-20');
  date_dim := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp5, _tmp6]);
  sales_date := '2020-01-15';
  _tmp7 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp7.AddOrSetData('w_state', w.state);
  _tmp7.AddOrSetData('i_item_id', i.item_id);
  _tmp7.AddOrSetData('sold_date', d.date);
  if (cr = Null) then
  begin
    _tmp8 := 0;
  end else
  begin
    _tmp8 := cr.refunded;
  end;
  _tmp7.AddOrSetData('net', cs.price - _tmp8);
  SetLength(_tmp9, 0);
  for cs in catalog_sales do
  begin
    for cr in catalog_returns do
    begin
      if not (((cs.order = cr.order) and (cs.item_sk = cr.item_sk))) then continue;
      for w in warehouse do
      begin
        if not ((cs.warehouse_sk = w.warehouse_sk)) then continue;
        for i in item do
        begin
          if not ((cs.item_sk = i.item_sk)) then continue;
          for d in date_dim do
          begin
            if not ((cs.date_sk = d.date_sk)) then continue;
            if not (((i.current_price >= 0.99) and (i.current_price <= 1.49))) then continue;
            _tmp9 := Concat(_tmp9, [_tmp7]);
          end;
        end;
      end;
    end;
  end;
  records := _tmp9;
  _tmp10 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp10.AddOrSetData('w_state', r.w_state);
  _tmp10.AddOrSetData('i_item_id', r.i_item_id);
  _tmp11 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp11.AddOrSetData('w_state', g.key.w_state);
  _tmp11.AddOrSetData('i_item_id', g.key.i_item_id);
  if (x.sold_date < sales_date) then
  begin
    _tmp12 := x.net;
  end else
  begin
    _tmp12 := 0;
  end;
  SetLength(_tmp13, 0);
  for x in g do
  begin
    _tmp13 := Concat(_tmp13, [_tmp12]);
  end;
  _tmp11.AddOrSetData('sales_before', specialize _sumList<Variant>(_tmp13));
  if (x.sold_date >= sales_date) then
  begin
    _tmp14 := x.net;
  end else
  begin
    _tmp14 := 0;
  end;
  SetLength(_tmp15, 0);
  for x in g do
  begin
    _tmp15 := Concat(_tmp15, [_tmp14]);
  end;
  _tmp11.AddOrSetData('sales_after', specialize _sumList<Variant>(_tmp15));
  SetLength(_tmp16, 0);
  for r in records do
  begin
    _tmp16 := Concat(_tmp16, [r]);
  end;
  _tmp17 := specialize _group_by<specialize TFPGMap<string, Variant>>(_tmp16, function(r: specialize TFPGMap<string, Variant>): Variant begin Result := _tmp10 end);
  SetLength(_tmp18, 0);
  for g in _tmp17 do
  begin
    _tmp18 := Concat(_tmp18, [_tmp11]);
  end;
  _result := _tmp18;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q40_simplified;
end.
