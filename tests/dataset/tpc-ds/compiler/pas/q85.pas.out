// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:31Z
program Q85;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _avgList<T>(arr: specialize TArray<T>): double;
begin
  if Length(arr) = 0 then exit(0);
  Result := specialize _sumList<T>(arr) / Length(arr);
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TArray<Variant>;
  r: specialize TFPGMap<string, Variant>;
  _result: double;
  web_returns: specialize TArray<specialize TFPGMap<string, Variant>>;

procedure test_TPCDS_Q85_sample;
begin
  if not ((_result = 85)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('qty', 60);
  _tmp0.AddOrSetData('cash', 20);
  _tmp0.AddOrSetData('fee', 1);
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('qty', 100);
  _tmp1.AddOrSetData('cash', 30);
  _tmp1.AddOrSetData('fee', 2);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('qty', 95);
  _tmp2.AddOrSetData('cash', 25);
  _tmp2.AddOrSetData('fee', 3);
  web_returns := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1, _tmp2]);
  SetLength(_tmp3, 0);
  for r in web_returns do
  begin
    _tmp3 := Concat(_tmp3, [r.KeyData['qty']]);
  end;
  _result := specialize _avgList<Variant>(_tmp3);
  specialize _json<double>(_result);
  test_TPCDS_Q85_sample;
end.
