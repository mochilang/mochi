// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:27Z
program Q55;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);
var i,j: integer; tmp: T; k: Variant;
begin
  for i := 0 to High(arr) - 1 do
  for j := i + 1 to High(arr) do
    if keys[i] > keys[j] then
    begin
      tmp := arr[i]; arr[i] := arr[j]; arr[j] := tmp;
      k := keys[i]; keys[i] := keys[j]; keys[j] := k;
    end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp11: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, integer>;
  _tmp5: specialize TFPGMap<string, integer>;
  _tmp6: specialize TFPGMap<string, integer>;
  _tmp7: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp8: specialize TFPGMap<string, Variant>;
  _tmp9: specialize TArray<Variant>;
  d: specialize TFPGMap<string, integer>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  g: specialize TFPGMap<string, Variant>;
  grouped: specialize TArray<specialize TFPGMap<string, Variant>>;
  i: specialize TFPGMap<string, integer>;
  item: specialize TArray<specialize TFPGMap<string, integer>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  ss: specialize TFPGMap<string, Variant>;
  store_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: integer;

procedure test_TPCDS_Q55_simplified;
var
  _tmp12: specialize TFPGMap<string, Variant>;
  _tmp13: specialize TFPGMap<string, Variant>;
begin
  _tmp12 := specialize TFPGMap<string, Variant>.Create;
  _tmp12.AddOrSetData('brand_id', 10);
  _tmp12.AddOrSetData('ext_price', 35);
  _tmp13 := specialize TFPGMap<string, Variant>.Create;
  _tmp13.AddOrSetData('brand_id', 20);
  _tmp13.AddOrSetData('ext_price', 20);
  if not ((_result = specialize TArray<_>([_tmp12, _tmp13]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('item', 1);
  _tmp0.AddOrSetData('sold_date', 1);
  _tmp0.AddOrSetData('price', 10);
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('item', 2);
  _tmp1.AddOrSetData('sold_date', 1);
  _tmp1.AddOrSetData('price', 20);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('item', 3);
  _tmp2.AddOrSetData('sold_date', 1);
  _tmp2.AddOrSetData('price', 25);
  store_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('i_item_sk', 1);
  _tmp3.AddOrSetData('i_brand_id', 10);
  _tmp3.AddOrSetData('i_manager_id', 1);
  _tmp4 := specialize TFPGMap<string, integer>.Create;
  _tmp4.AddOrSetData('i_item_sk', 2);
  _tmp4.AddOrSetData('i_brand_id', 20);
  _tmp4.AddOrSetData('i_manager_id', 1);
  _tmp5 := specialize TFPGMap<string, integer>.Create;
  _tmp5.AddOrSetData('i_item_sk', 3);
  _tmp5.AddOrSetData('i_brand_id', 10);
  _tmp5.AddOrSetData('i_manager_id', 1);
  item := specialize TArray<specialize TFPGMap<string, integer>>([_tmp3, _tmp4, _tmp5]);
  _tmp6 := specialize TFPGMap<string, integer>.Create;
  _tmp6.AddOrSetData('d_date_sk', 1);
  _tmp6.AddOrSetData('d_year', 2001);
  _tmp6.AddOrSetData('d_moy', 11);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp6]);
  SetLength(_tmp7, 0);
  for ss in store_sales do
  begin
    for i in item do
    begin
      if not (((ss.KeyData['item'] = i.KeyData['i_item_sk']) and (i.KeyData['i_manager_id'] = 1))) then continue;
      for d in date_dim do
      begin
        if not ((ss.KeyData['sold_date'] = d.KeyData['d_date_sk'])) then continue;
        _tmp8 := specialize TFPGMap<string, Variant>.Create;
        _tmp8.AddOrSetData('brand_id', g.KeyData['key'].brand_id);
        SetLength(_tmp9, 0);
        for x in g do
        begin
          _tmp9 := Concat(_tmp9, [x.price]);
        end;
        _tmp8.AddOrSetData('ext_price', specialize _sumList<Variant>(_tmp9));
        _tmp7 := Concat(_tmp7, [_tmp8]);
      end;
    end;
  end;
  grouped := _tmp7;
  SetLength(_tmp10, 0);
  SetLength(_tmp11, 0);
  for g in grouped do
  begin
    _tmp10 := Concat(_tmp10, [g]);
    _tmp11 := Concat(_tmp11, [specialize TArray<specialize TFPGMap<string, Variant>>([-g.KeyData['ext_price'], g.KeyData['brand_id']])]);
  end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp10, _tmp11);
  _result := _tmp10;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q55_simplified;
end.
