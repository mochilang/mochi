// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:29Z
program Q72;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic function _countList<T>(arr: specialize TArray<T>): integer;
begin
  Result := Length(arr);
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp10: specialize TFPGMap<string, Variant>;
  _tmp11: specialize TArray<Variant>;
  _tmp12: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TFPGMap<string, Variant>;
  _tmp5: specialize TFPGMap<string, Variant>;
  _tmp6: specialize TFPGMap<string, integer>;
  _tmp7: specialize TFPGMap<string, integer>;
  _tmp8: specialize TFPGMap<string, integer>;
  _tmp9: specialize TArray<specialize TFPGMap<string, Variant>>;
  catalog_sales: specialize TArray<specialize TFPGMap<string, integer>>;
  cd: specialize TFPGMap<string, Variant>;
  cs: specialize TFPGMap<string, integer>;
  customer_demographics: specialize TArray<specialize TFPGMap<string, Variant>>;
  d1: specialize TFPGMap<string, integer>;
  d2: specialize TFPGMap<string, integer>;
  d3: specialize TFPGMap<string, integer>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  hd: specialize TFPGMap<string, Variant>;
  household_demographics: specialize TArray<specialize TFPGMap<string, Variant>>;
  i: specialize TFPGMap<string, Variant>;
  inv: specialize TFPGMap<string, integer>;
  inventory: specialize TArray<specialize TFPGMap<string, integer>>;
  item: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  w: specialize TFPGMap<string, Variant>;
  warehouse: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: integer;

procedure test_TPCDS_Q72_simplified;
var
  _tmp13: specialize TFPGMap<string, Variant>;
begin
  _tmp13 := specialize TFPGMap<string, Variant>.Create;
  _tmp13.AddOrSetData('i_item_desc', 'ItemA');
  _tmp13.AddOrSetData('w_warehouse_name', 'Main');
  _tmp13.AddOrSetData('d_week_seq', 10);
  _tmp13.AddOrSetData('no_promo', 1);
  _tmp13.AddOrSetData('promo', 0);
  _tmp13.AddOrSetData('total_cnt', 1);
  if not ((_result = specialize TArray<_>([_tmp13]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('cs_item_sk', 1);
  _tmp0.AddOrSetData('cs_order_number', 1);
  _tmp0.AddOrSetData('cs_quantity', 1);
  _tmp0.AddOrSetData('cs_sold_date_sk', 1);
  _tmp0.AddOrSetData('cs_ship_date_sk', 3);
  _tmp0.AddOrSetData('cs_bill_cdemo_sk', 1);
  _tmp0.AddOrSetData('cs_bill_hdemo_sk', 1);
  _tmp0.AddOrSetData('cs_promo_sk', Null);
  catalog_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0]);
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('inv_item_sk', 1);
  _tmp1.AddOrSetData('inv_warehouse_sk', 1);
  _tmp1.AddOrSetData('inv_date_sk', 2);
  _tmp1.AddOrSetData('inv_quantity_on_hand', 0);
  inventory := specialize TArray<specialize TFPGMap<string, integer>>([_tmp1]);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('w_warehouse_sk', 1);
  _tmp2.AddOrSetData('w_warehouse_name', 'Main');
  warehouse := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp2]);
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('i_item_sk', 1);
  _tmp3.AddOrSetData('i_item_desc', 'ItemA');
  item := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp3]);
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('cd_demo_sk', 1);
  _tmp4.AddOrSetData('cd_marital_status', 'M');
  customer_demographics := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4]);
  _tmp5 := specialize TFPGMap<string, Variant>.Create;
  _tmp5.AddOrSetData('hd_demo_sk', 1);
  _tmp5.AddOrSetData('hd_buy_potential', '5001-10000');
  household_demographics := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp5]);
  _tmp6 := specialize TFPGMap<string, integer>.Create;
  _tmp6.AddOrSetData('d_date_sk', 1);
  _tmp6.AddOrSetData('d_week_seq', 10);
  _tmp6.AddOrSetData('d_date', 1);
  _tmp6.AddOrSetData('d_year', 2000);
  _tmp7 := specialize TFPGMap<string, integer>.Create;
  _tmp7.AddOrSetData('d_date_sk', 2);
  _tmp7.AddOrSetData('d_week_seq', 10);
  _tmp7.AddOrSetData('d_date', 1);
  _tmp7.AddOrSetData('d_year', 2000);
  _tmp8 := specialize TFPGMap<string, integer>.Create;
  _tmp8.AddOrSetData('d_date_sk', 3);
  _tmp8.AddOrSetData('d_week_seq', 10);
  _tmp8.AddOrSetData('d_date', 7);
  _tmp8.AddOrSetData('d_year', 2000);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp6, _tmp7, _tmp8]);
  SetLength(_tmp9, 0);
  for cs in catalog_sales do
  begin
    for inv in inventory do
    begin
      if not ((inv.KeyData['inv_item_sk'] = cs.KeyData['cs_item_sk'])) then continue;
      for w in warehouse do
      begin
        if not ((w.KeyData['w_warehouse_sk'] = inv.KeyData['inv_warehouse_sk'])) then continue;
        for i in item do
        begin
          if not ((i.KeyData['i_item_sk'] = cs.KeyData['cs_item_sk'])) then continue;
          for cd in customer_demographics do
          begin
            if not ((cd.KeyData['cd_demo_sk'] = cs.KeyData['cs_bill_cdemo_sk'])) then continue;
            for hd in household_demographics do
            begin
              if not ((hd.KeyData['hd_demo_sk'] = cs.KeyData['cs_bill_hdemo_sk'])) then continue;
              for d1 in date_dim do
              begin
                if not ((d1.KeyData['d_date_sk'] = cs.KeyData['cs_sold_date_sk'])) then continue;
                for d2 in date_dim do
                begin
                  if not ((d2.KeyData['d_date_sk'] = inv.KeyData['inv_date_sk'])) then continue;
                  for d3 in date_dim do
                  begin
                    if not ((d3.KeyData['d_date_sk'] = cs.KeyData['cs_ship_date_sk'])) then continue;
                    if not (((((((d1.KeyData['d_week_seq'] = d2.KeyData['d_week_seq']) and (inv.KeyData['inv_quantity_on_hand'] < cs.KeyData['cs_quantity'])) and (d3.KeyData['d_date'] > d1.KeyData['d_date'] + 5)) and (hd.KeyData['hd_buy_potential'] = '5001-10000')) and (d1.KeyData['d_year'] = 2000)) and (cd.KeyData['cd_marital_status'] = 'M'))) then continue;
                    _tmp10 := specialize TFPGMap<string, Variant>.Create;
                    _tmp10.AddOrSetData('i_item_desc', g.key.item_desc);
                    _tmp10.AddOrSetData('w_warehouse_name', g.key.warehouse);
                    _tmp10.AddOrSetData('d_week_seq', g.key.week_seq);
                    SetLength(_tmp11, 0);
                    for x in g do
                    begin
                      if not ((x.cs_promo_sk = Null)) then continue;
                      _tmp11 := Concat(_tmp11, [x]);
                    end;
                    _tmp10.AddOrSetData('no_promo', specialize _countList<Variant>(_tmp11));
                    SetLength(_tmp12, 0);
                    for x in g do
                    begin
                      if not ((x.cs_promo_sk <> Null)) then continue;
                      _tmp12 := Concat(_tmp12, [x]);
                    end;
                    _tmp10.AddOrSetData('promo', specialize _countList<Variant>(_tmp12));
                    _tmp10.AddOrSetData('total_cnt', Length(g));
                    _tmp9 := Concat(_tmp9, [_tmp10]);
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  _result := _tmp9;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q72_simplified;
end.
