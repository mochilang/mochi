// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:32Z
program Q90;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;
type WebSale = record
  ws_sold_time_sk: integer;
  ws_ship_hdemo_sk: integer;
  ws_web_page_sk: integer;
end;

generic function _countList<T>(arr: specialize TArray<T>): integer;
begin
  Result := Length(arr);
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

var
  _tmp0: specialize TFPGMap<string, integer>;
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, integer>;
  _tmp5: specialize TFPGMap<string, integer>;
  _tmp6: specialize TFPGMap<string, integer>;
  _tmp7: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp8: specialize TArray<specialize TFPGMap<string, Variant>>;
  amc: Variant;
  hd: specialize TFPGMap<string, integer>;
  household_demographics: specialize TArray<specialize TFPGMap<string, integer>>;
  pmc: Variant;
  _result: double;
  t: specialize TFPGMap<string, integer>;
  time_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  web_page: specialize TArray<specialize TFPGMap<string, integer>>;
  web_sales: specialize TArray<specialize TFPGMap<string, integer>>;
  wp: specialize TFPGMap<string, integer>;
  ws: specialize TFPGMap<string, integer>;

procedure test_TPCDS_Q90_ratio;
begin
  if not ((_result = 2)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('ws_sold_time_sk', 1);
  _tmp0.AddOrSetData('ws_ship_hdemo_sk', 1);
  _tmp0.AddOrSetData('ws_web_page_sk', 10);
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('ws_sold_time_sk', 1);
  _tmp1.AddOrSetData('ws_ship_hdemo_sk', 1);
  _tmp1.AddOrSetData('ws_web_page_sk', 10);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('ws_sold_time_sk', 2);
  _tmp2.AddOrSetData('ws_ship_hdemo_sk', 1);
  _tmp2.AddOrSetData('ws_web_page_sk', 10);
  web_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0, _tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('hd_demo_sk', 1);
  _tmp3.AddOrSetData('hd_dep_count', 2);
  household_demographics := specialize TArray<specialize TFPGMap<string, integer>>([_tmp3]);
  _tmp4 := specialize TFPGMap<string, integer>.Create;
  _tmp4.AddOrSetData('t_time_sk', 1);
  _tmp4.AddOrSetData('t_hour', 7);
  _tmp5 := specialize TFPGMap<string, integer>.Create;
  _tmp5.AddOrSetData('t_time_sk', 2);
  _tmp5.AddOrSetData('t_hour', 14);
  time_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp4, _tmp5]);
  _tmp6 := specialize TFPGMap<string, integer>.Create;
  _tmp6.AddOrSetData('wp_web_page_sk', 10);
  _tmp6.AddOrSetData('wp_char_count', 5100);
  web_page := specialize TArray<specialize TFPGMap<string, integer>>([_tmp6]);
  SetLength(_tmp7, 0);
  for ws in web_sales do
  begin
    for hd in household_demographics do
    begin
      if not ((ws.KeyData['ws_ship_hdemo_sk'] = hd.KeyData['hd_demo_sk'])) then continue;
      for t in time_dim do
      begin
        if not ((ws.KeyData['ws_sold_time_sk'] = t.KeyData['t_time_sk'])) then continue;
        for wp in web_page do
        begin
          if not ((ws.KeyData['ws_web_page_sk'] = wp.KeyData['wp_web_page_sk'])) then continue;
          if not ((((((t.KeyData['t_hour'] >= 7) and (t.KeyData['t_hour'] <= 8)) and (hd.KeyData['hd_dep_count'] = 2)) and (wp.KeyData['wp_char_count'] >= 5000)) and (wp.KeyData['wp_char_count'] <= 5200))) then continue;
          _tmp7 := Concat(_tmp7, [ws]);
        end;
      end;
    end;
  end;
  amc := specialize _countList<specialize TFPGMap<string, integer>>(_tmp7);
  SetLength(_tmp8, 0);
  for ws in web_sales do
  begin
    for hd in household_demographics do
    begin
      if not ((ws.KeyData['ws_ship_hdemo_sk'] = hd.KeyData['hd_demo_sk'])) then continue;
      for t in time_dim do
      begin
        if not ((ws.KeyData['ws_sold_time_sk'] = t.KeyData['t_time_sk'])) then continue;
        for wp in web_page do
        begin
          if not ((ws.KeyData['ws_web_page_sk'] = wp.KeyData['wp_web_page_sk'])) then continue;
          if not ((((((t.KeyData['t_hour'] >= 14) and (t.KeyData['t_hour'] <= 15)) and (hd.KeyData['hd_dep_count'] = 2)) and (wp.KeyData['wp_char_count'] >= 5000)) and (wp.KeyData['wp_char_count'] <= 5200))) then continue;
          _tmp8 := Concat(_tmp8, [ws]);
        end;
      end;
    end;
  end;
  pmc := specialize _countList<specialize TFPGMap<string, integer>>(_tmp8);
  _result := Double(amc) / Double(pmc);
  specialize _json<double>(_result);
  test_TPCDS_Q90_ratio;
end.
