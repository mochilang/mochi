// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:28Z
program Q66;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, integer>;
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp2: specialize TArray<integer>;
  _tmp3: specialize TArray<integer>;
  c: specialize TFPGMap<string, integer>;
  catalog_sales: specialize TArray<specialize TFPGMap<string, integer>>;
  _result: double;
  w: specialize TFPGMap<string, integer>;
  web_sales: specialize TArray<specialize TFPGMap<string, integer>>;

procedure test_TPCDS_Q66_simplified;
begin
  if not ((_result = 66)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('net', 30);
  web_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0]);
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('net', 36);
  catalog_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp1]);
  SetLength(_tmp2, 0);
  for w in web_sales do
  begin
    _tmp2 := Concat(_tmp2, [w.KeyData['net']]);
  end;
  SetLength(_tmp3, 0);
  for c in catalog_sales do
  begin
    _tmp3 := Concat(_tmp3, [c.KeyData['net']]);
  end;
  _result := specialize _sumList<integer>(_tmp2) + specialize _sumList<integer>(_tmp3);
  specialize _json<double>(_result);
  test_TPCDS_Q66_simplified;
end.
