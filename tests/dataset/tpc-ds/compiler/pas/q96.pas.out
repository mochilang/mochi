// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:33Z
program Q96;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;
type StoreSale = record
  ss_sold_time_sk: integer;
  ss_hdemo_sk: integer;
  ss_store_sk: integer;
end;
type HouseholdDemographics = record
  hd_demo_sk: integer;
  hd_dep_count: integer;
end;
type TimeDim = record
  t_time_sk: integer;
  t_hour: integer;
  t_minute: integer;
end;
type Store = record
  s_store_sk: integer;
  s_store_name: string;
end;

generic function _countList<T>(arr: specialize TArray<T>): integer;
begin
  Result := Length(arr);
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

var
  _tmp0: specialize TFPGMap<string, integer>;
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, integer>;
  _tmp5: specialize TFPGMap<string, integer>;
  _tmp6: specialize TFPGMap<string, Variant>;
  _tmp7: specialize TArray<specialize TFPGMap<string, Variant>>;
  hd: specialize TFPGMap<string, integer>;
  household_demographics: specialize TArray<specialize TFPGMap<string, integer>>;
  _result: Variant;
  s: specialize TFPGMap<string, Variant>;
  ss: specialize TFPGMap<string, integer>;
  store: specialize TArray<specialize TFPGMap<string, Variant>>;
  store_sales: specialize TArray<specialize TFPGMap<string, integer>>;
  t: specialize TFPGMap<string, integer>;
  time_dim: specialize TArray<specialize TFPGMap<string, integer>>;

procedure test_TPCDS_Q96_count;
begin
  if not ((_result = 3)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('ss_sold_time_sk', 1);
  _tmp0.AddOrSetData('ss_hdemo_sk', 1);
  _tmp0.AddOrSetData('ss_store_sk', 1);
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('ss_sold_time_sk', 1);
  _tmp1.AddOrSetData('ss_hdemo_sk', 1);
  _tmp1.AddOrSetData('ss_store_sk', 1);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('ss_sold_time_sk', 2);
  _tmp2.AddOrSetData('ss_hdemo_sk', 1);
  _tmp2.AddOrSetData('ss_store_sk', 1);
  store_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0, _tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('hd_demo_sk', 1);
  _tmp3.AddOrSetData('hd_dep_count', 3);
  household_demographics := specialize TArray<specialize TFPGMap<string, integer>>([_tmp3]);
  _tmp4 := specialize TFPGMap<string, integer>.Create;
  _tmp4.AddOrSetData('t_time_sk', 1);
  _tmp4.AddOrSetData('t_hour', 20);
  _tmp4.AddOrSetData('t_minute', 35);
  _tmp5 := specialize TFPGMap<string, integer>.Create;
  _tmp5.AddOrSetData('t_time_sk', 2);
  _tmp5.AddOrSetData('t_hour', 20);
  _tmp5.AddOrSetData('t_minute', 45);
  time_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp4, _tmp5]);
  _tmp6 := specialize TFPGMap<string, Variant>.Create;
  _tmp6.AddOrSetData('s_store_sk', 1);
  _tmp6.AddOrSetData('s_store_name', 'ese');
  store := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp6]);
  SetLength(_tmp7, 0);
  for ss in store_sales do
  begin
    for hd in household_demographics do
    begin
      if not ((ss.KeyData['ss_hdemo_sk'] = hd.KeyData['hd_demo_sk'])) then continue;
      for t in time_dim do
      begin
        if not ((ss.KeyData['ss_sold_time_sk'] = t.KeyData['t_time_sk'])) then continue;
        for s in store do
        begin
          if not ((ss.KeyData['ss_store_sk'] = s.KeyData['s_store_sk'])) then continue;
          if not (((((t.KeyData['t_hour'] = 20) and (t.KeyData['t_minute'] >= 30)) and (hd.KeyData['hd_dep_count'] = 3)) and (s.KeyData['s_store_name'] = 'ese'))) then continue;
          _tmp7 := Concat(_tmp7, [ss]);
        end;
      end;
    end;
  end;
  _result := specialize _countList<specialize TFPGMap<string, integer>>(_tmp7);
  specialize _json<Variant>(_result);
  test_TPCDS_Q96_count;
end.
