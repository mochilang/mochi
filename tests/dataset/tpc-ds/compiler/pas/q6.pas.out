program main;
{$mode objfpc}

uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser;

type
  generic TArray<T> = array of T;

  generic function _avgList<T>(arr: specialize TArray<T>): double;
begin
  if Length(arr) = 0 then exit(0);
  Result := specialize _sumList<T>(arr) / Length(arr);
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sliceList<T>(arr: specialize TArray<T>; i, j: integer): specialize TArray<T>;

var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(arr);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(arr, start_ + 1, end_ - start_);
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);

var i,j: integer;
  tmp: T;
  k: Variant;
begin
  for i := 0 to High(arr) - 1 do
    for j := i + 1 to High(arr) do
      if keys[i] > keys[j] then
        begin
          tmp := arr[i];
          arr[i] := arr[j];
          arr[j] := tmp;
          k := keys[i];
          keys[i] := keys[j];
          keys[j] := k;
        end;
end;

var
  _tmp0: specialize TFPGMap<Variant, Variant>;
  _tmp1: specialize TFPGMap<Variant, integer>;
  _tmp10: specialize TFPGMap<Variant, integer>;
  _tmp11: specialize TFPGMap<Variant, integer>;
  _tmp12: specialize TFPGMap<Variant, integer>;
  _tmp13: specialize TFPGMap<Variant, Variant>;
  _tmp14: specialize TFPGMap<Variant, Variant>;
  _tmp15: specialize TArray<integer>;
  _tmp16: specialize TFPGMap<Variant, Variant>;
  _tmp17: specialize TArray<Variant>;
  _tmp18: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp19: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<Variant, integer>;
  _tmp20: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp3: specialize TFPGMap<Variant, integer>;
  _tmp4: specialize TFPGMap<Variant, integer>;
  _tmp5: specialize TFPGMap<Variant, integer>;
  _tmp6: specialize TFPGMap<Variant, integer>;
  _tmp7: specialize TFPGMap<Variant, integer>;
  _tmp8: specialize TFPGMap<Variant, integer>;
  _tmp9: specialize TFPGMap<Variant, integer>;
  a: specialize TFPGMap<string, Variant>;
  customer: specialize TArray<specialize TFPGMap<string, integer>>;
  customer_address: specialize TArray<specialize TFPGMap<string, Variant>>;
  d: specialize TFPGMap<string, integer>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  item: specialize TArray<specialize TFPGMap<string, Variant>>;
  j: specialize TFPGMap<string, Variant>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  store_sales: specialize TArray<specialize TFPGMap<string, integer>>;
  target_month_seq: Variant;

procedure test_TPCDS_Q6_result;

var
  _tmp21: specialize TFPGMap<Variant, Variant>;
begin
  _tmp21 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp21.AddOrSetData('state', 'CA');
  _tmp21.AddOrSetData('cnt', 10);
  if not ((_result = specialize TArray<specialize TFPGMap<string, Variant>>([_tmp21]))) then raise
    Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp0.AddOrSetData('ca_address_sk', 1);
  _tmp0.AddOrSetData('ca_state', 'CA');
  _tmp0.AddOrSetData('ca_zip', '12345');
  customer_address := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0]);
  _tmp1 := specialize TFPGMap<Variant, integer>.Create;
  _tmp1.AddOrSetData('c_custo_tmp1er_sk', 1);
  _tmp1.AddOrSetData('c_current_addr_sk', 1);
  customer := specialize TArray<specialize TFPGMap<string, integer>>([_tmp1]);
  _tmp2 := specialize TFPGMap<Variant, integer>.Create;
  _tmp2.AddOrSetData('ss_custo_tmp2er_sk', 1);
  _tmp2.AddOrSetData('ss_sold_date_sk', 1);
  _tmp2.AddOrSetData('ss_ite_tmp2_sk', 1);
  _tmp3 := specialize TFPGMap<Variant, integer>.Create;
  _tmp3.AddOrSetData('ss_custo_tmp3er_sk', 1);
  _tmp3.AddOrSetData('ss_sold_date_sk', 1);
  _tmp3.AddOrSetData('ss_ite_tmp3_sk', 1);
  _tmp4 := specialize TFPGMap<Variant, integer>.Create;
  _tmp4.AddOrSetData('ss_custo_tmp4er_sk', 1);
  _tmp4.AddOrSetData('ss_sold_date_sk', 1);
  _tmp4.AddOrSetData('ss_ite_tmp4_sk', 1);
  _tmp5 := specialize TFPGMap<Variant, integer>.Create;
  _tmp5.AddOrSetData('ss_custo_tmp5er_sk', 1);
  _tmp5.AddOrSetData('ss_sold_date_sk', 1);
  _tmp5.AddOrSetData('ss_ite_tmp5_sk', 1);
  _tmp6 := specialize TFPGMap<Variant, integer>.Create;
  _tmp6.AddOrSetData('ss_custo_tmp6er_sk', 1);
  _tmp6.AddOrSetData('ss_sold_date_sk', 1);
  _tmp6.AddOrSetData('ss_ite_tmp6_sk', 1);
  _tmp7 := specialize TFPGMap<Variant, integer>.Create;
  _tmp7.AddOrSetData('ss_custo_tmp7er_sk', 1);
  _tmp7.AddOrSetData('ss_sold_date_sk', 1);
  _tmp7.AddOrSetData('ss_ite_tmp7_sk', 1);
  _tmp8 := specialize TFPGMap<Variant, integer>.Create;
  _tmp8.AddOrSetData('ss_custo_tmp8er_sk', 1);
  _tmp8.AddOrSetData('ss_sold_date_sk', 1);
  _tmp8.AddOrSetData('ss_ite_tmp8_sk', 1);
  _tmp9 := specialize TFPGMap<Variant, integer>.Create;
  _tmp9.AddOrSetData('ss_custo_tmp9er_sk', 1);
  _tmp9.AddOrSetData('ss_sold_date_sk', 1);
  _tmp9.AddOrSetData('ss_ite_tmp9_sk', 1);
  _tmp10 := specialize TFPGMap<Variant, integer>.Create;
  _tmp10.AddOrSetData('ss_custo_tmp10er_sk', 1);
  _tmp10.AddOrSetData('ss_sold_date_sk', 1);
  _tmp10.AddOrSetData('ss_ite_tmp10_sk', 1);
  _tmp11 := specialize TFPGMap<Variant, integer>.Create;
  _tmp11.AddOrSetData('ss_custo_tmp11er_sk', 1);
  _tmp11.AddOrSetData('ss_sold_date_sk', 1);
  _tmp11.AddOrSetData('ss_ite_tmp11_sk', 1);
  store_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp2, _tmp3, _tmp4, _tmp5,
                 _tmp6, _tmp7, _tmp8, _tmp9, _tmp10, _tmp11]);
  _tmp12 := specialize TFPGMap<Variant, integer>.Create;
  _tmp12.AddOrSetData('d_date_sk', 1);
  _tmp12.AddOrSetData('d_year', 1999);
  _tmp12.AddOrSetData('d__tmp12oy', 5);
  _tmp12.AddOrSetData('d__tmp12onth_seq', 120);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp12]);
  _tmp13 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp13.AddOrSetData('i_ite_tmp13_sk', 1);
  _tmp13.AddOrSetData('i_category', 'A');
  _tmp13.AddOrSetData('i_current_price', 100);
  _tmp14 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp14.AddOrSetData('i_ite_tmp14_sk', 2);
  _tmp14.AddOrSetData('i_category', 'A');
  _tmp14.AddOrSetData('i_current_price', 50);
  item := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp13, _tmp14]);
  SetLength(_tmp15, 0);
  for d in date_dim do
    begin
      if not (((d.d_year = 1999) and (d.d_moy = 5))) then continue;
      _tmp15 := Concat(_tmp15, [d.d_month_seq]);
    end;
  target_month_seq := max(_tmp15);
  _tmp16 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp16.AddOrSetData('state', g.key);
  _tmp16.AddOrSetData('cnt', Length(g));
  SetLength(_tmp17, 0);
  for j in item do
    begin
      if not ((j.i_category = i.i_category)) then continue;
      _tmp17 := Concat(_tmp17, [j.i_current_price]);
    end;
  SetLength(_tmp18, 0);
  SetLength(_tmp19, 0);
  for a in customer_address do
    begin
      for c in customer do
        begin
          if not ((a.ca_address_sk = c.c_current_addr_sk)) then continue;
          for s in store_sales do
            begin
              if not ((c.c_customer_sk = s.ss_customer_sk)) then continue;
              for d in date_dim do
                begin
                  if not ((s.ss_sold_date_sk = d.d_date_sk)) then continue;
                  for i in item do
                    begin
                      if not ((s.ss_item_sk = i.i_item_sk)) then continue;
                      if not (((d.d_month_seq = target_month_seq) and (i.i_current_price > 1.2 *
                         specialize _avgList<Variant>(_tmp17)))) then continue;
                      _tmp18 := Concat(_tmp18, [_tmp16]);
                      _tmp19 := Concat(_tmp19, [specialize TArray<specialize TFPGMap<string, Variant
                                >>([Length(g), g.key])]);
                    end;
                end;
            end;
        end;
    end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp18, _tmp19);
  _tmp20 := specialize _sliceList<specialize TFPGMap<string, Variant>>(_tmp18, 0, 100);
  _result := _tmp20;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q6_result;
end.
