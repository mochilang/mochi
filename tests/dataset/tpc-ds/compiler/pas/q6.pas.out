program main;
{$mode objfpc}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser;

type
  generic TArray<T> = array of T;

procedure test_TPCDS_Q6_empty;
begin
  if not ((Length(_result) = 0)) then raise Exception.Create('expect failed');
end;

var
  _tmp0: specialize TArray<integer>;
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp2: specialize TArray<integer>;
  _tmp3: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp4: specialize TArray<Variant>;
  _tmp5: specialize TArray<specialize TFPGMap<string, integer>>;
  a: integer;
  customer: specialize TArray<integer>;
  customer_address: specialize TArray<integer>;
  d: integer;
  date_dim: specialize TArray<integer>;
  item: specialize TArray<integer>;
  j: integer;
  _result: specialize TArray<specialize TFPGMap<string, integer>>;
  store_sales: specialize TArray<integer>;
  target_month_seq: integer;

generic function _avgList<T>(arr: specialize TArray<T>): double;
begin
  if Length(arr) = 0 then exit(0);
  Result := _sumList<T>(arr) / Length(arr);
end;

generic function _sliceList<T>(arr: specialize TArray<T>; i, j: integer): specialize TArray<T>;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(arr);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(arr, start_ + 1, end_ - start_);
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);
var i,j: integer; tmp: T; k: Variant;
begin
  for i := 0 to High(arr) - 1 do
  for j := i + 1 to High(arr) do
    if keys[i] > keys[j] then
    begin
      tmp := arr[i]; arr[i] := arr[j]; arr[j] := tmp;
      k := keys[i]; keys[i] := keys[j]; keys[j] := k;
    end;
end;

begin
  customer_address := specialize TArray<integer>([]);
  customer := specialize TArray<integer>([]);
  store_sales := specialize TArray<integer>([]);
  date_dim := specialize TArray<integer>([]);
  item := specialize TArray<integer>([]);
  SetLength(_tmp0, 0);
  for d in date_dim do
  begin
    if not (((d.d_year = 1999) and (d.d_moy = 5))) then continue;
    _tmp0 := Concat(_tmp0, [d.d_month_seq]);
  end;
  target_month_seq := max(_tmp0);
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('state', g.key);
  _tmp1.AddOrSetData('cnt', Length(g));
  SetLength(_tmp2, 0);
  for j in item do
  begin
    if not ((j.i_category = i.i_category)) then continue;
    _tmp2 := Concat(_tmp2, [j.i_current_price]);
  end;
  SetLength(_tmp3, 0);
  SetLength(_tmp4, 0);
  for a in customer_address do
  begin
    for c in customer do
    begin
      if not ((a.ca_address_sk = c.c_current_addr_sk)) then continue;
      for s in store_sales do
      begin
        if not ((c.c_customer_sk = s.ss_customer_sk)) then continue;
        for d in date_dim do
        begin
          if not ((s.ss_sold_date_sk = d.d_date_sk)) then continue;
          for i in item do
          begin
            if not ((s.ss_item_sk = i.i_item_sk)) then continue;
            if not (((d.d_month_seq = target_month_seq) and (i.i_current_price > 1.2 * specialize _avgList<integer>(_tmp2)))) then continue;
            _tmp3 := Concat(_tmp3, [_tmp1]);
            _tmp4 := Concat(_tmp4, [specialize TArray<specialize TFPGMap<string, integer>>([Length(g), g.key])]);
          end;
        end;
      end;
    end;
  end;
  specialize _sortBy<specialize TFPGMap<string, integer>>(_tmp3, _tmp4);
  _tmp5 := specialize _sliceList<specialize TFPGMap<string, integer>>(_tmp3, 0, 100);
  _result := _tmp5;
  json(_result);
  test_TPCDS_Q6_empty;
end.
