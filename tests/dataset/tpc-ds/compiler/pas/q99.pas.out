// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:33Z
program Q99;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;
type CatalogSale = record
  cs_ship_date_sk: integer;
  cs_sold_date_sk: integer;
  cs_warehouse_sk: integer;
  cs_ship_mode_sk: integer;
  cs_call_center_sk: integer;
end;
type Warehouse = record
  w_warehouse_sk: integer;
  w_warehouse_name: string;
end;
type ShipMode = record
  sm_ship_mode_sk: integer;
  sm_type: string;
end;
type CallCenter = record
  cc_call_center_sk: integer;
  cc_name: string;
end;

generic function _countList<T>(arr: specialize TArray<T>): integer;
begin
  Result := Length(arr);
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

var
  _tmp0: specialize TFPGMap<string, integer>;
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp10: specialize TArray<Variant>;
  _tmp11: specialize TArray<Variant>;
  _tmp12: specialize TArray<Variant>;
  _tmp13: specialize TArray<Variant>;
  _tmp14: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, integer>;
  _tmp5: specialize TFPGMap<string, Variant>;
  _tmp6: specialize TFPGMap<string, Variant>;
  _tmp7: specialize TFPGMap<string, Variant>;
  _tmp8: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp9: specialize TFPGMap<string, Variant>;
  call_center: specialize TArray<specialize TFPGMap<string, Variant>>;
  catalog_sales: specialize TArray<specialize TFPGMap<string, integer>>;
  cc: specialize TFPGMap<string, Variant>;
  cs: specialize TFPGMap<string, integer>;
  grouped: specialize TArray<specialize TFPGMap<string, Variant>>;
  ship_mode: specialize TArray<specialize TFPGMap<string, Variant>>;
  sm: specialize TFPGMap<string, Variant>;
  w: specialize TFPGMap<string, Variant>;
  warehouse: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: integer;

procedure test_TPCDS_Q99_buckets;
var
  _tmp15: specialize TFPGMap<string, Variant>;
begin
  _tmp15 := specialize TFPGMap<string, Variant>.Create;
  _tmp15.AddOrSetData('warehouse', 'Warehouse1');
  _tmp15.AddOrSetData('sm_type', 'EXP');
  _tmp15.AddOrSetData('cc_name', 'CC1');
  _tmp15.AddOrSetData('d30', 1);
  _tmp15.AddOrSetData('d60', 1);
  _tmp15.AddOrSetData('d90', 1);
  _tmp15.AddOrSetData('d120', 1);
  _tmp15.AddOrSetData('dmore', 1);
  if not ((grouped = specialize TArray<_>([_tmp15]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('cs_ship_date_sk', 31);
  _tmp0.AddOrSetData('cs_sold_date_sk', 1);
  _tmp0.AddOrSetData('cs_warehouse_sk', 1);
  _tmp0.AddOrSetData('cs_ship_mode_sk', 1);
  _tmp0.AddOrSetData('cs_call_center_sk', 1);
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('cs_ship_date_sk', 51);
  _tmp1.AddOrSetData('cs_sold_date_sk', 1);
  _tmp1.AddOrSetData('cs_warehouse_sk', 1);
  _tmp1.AddOrSetData('cs_ship_mode_sk', 1);
  _tmp1.AddOrSetData('cs_call_center_sk', 1);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('cs_ship_date_sk', 71);
  _tmp2.AddOrSetData('cs_sold_date_sk', 1);
  _tmp2.AddOrSetData('cs_warehouse_sk', 1);
  _tmp2.AddOrSetData('cs_ship_mode_sk', 1);
  _tmp2.AddOrSetData('cs_call_center_sk', 1);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('cs_ship_date_sk', 101);
  _tmp3.AddOrSetData('cs_sold_date_sk', 1);
  _tmp3.AddOrSetData('cs_warehouse_sk', 1);
  _tmp3.AddOrSetData('cs_ship_mode_sk', 1);
  _tmp3.AddOrSetData('cs_call_center_sk', 1);
  _tmp4 := specialize TFPGMap<string, integer>.Create;
  _tmp4.AddOrSetData('cs_ship_date_sk', 131);
  _tmp4.AddOrSetData('cs_sold_date_sk', 1);
  _tmp4.AddOrSetData('cs_warehouse_sk', 1);
  _tmp4.AddOrSetData('cs_ship_mode_sk', 1);
  _tmp4.AddOrSetData('cs_call_center_sk', 1);
  catalog_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0, _tmp1, _tmp2, _tmp3, _tmp4]);
  _tmp5 := specialize TFPGMap<string, Variant>.Create;
  _tmp5.AddOrSetData('w_warehouse_sk', 1);
  _tmp5.AddOrSetData('w_warehouse_name', 'Warehouse1');
  warehouse := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp5]);
  _tmp6 := specialize TFPGMap<string, Variant>.Create;
  _tmp6.AddOrSetData('sm_ship_mode_sk', 1);
  _tmp6.AddOrSetData('sm_type', 'EXP');
  ship_mode := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp6]);
  _tmp7 := specialize TFPGMap<string, Variant>.Create;
  _tmp7.AddOrSetData('cc_call_center_sk', 1);
  _tmp7.AddOrSetData('cc_name', 'CC1');
  call_center := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp7]);
  SetLength(_tmp8, 0);
  for cs in catalog_sales do
  begin
    for w in warehouse do
    begin
      if not ((cs.KeyData['cs_warehouse_sk'] = w.KeyData['w_warehouse_sk'])) then continue;
      for sm in ship_mode do
      begin
        if not ((cs.KeyData['cs_ship_mode_sk'] = sm.KeyData['sm_ship_mode_sk'])) then continue;
        for cc in call_center do
        begin
          if not ((cs.KeyData['cs_call_center_sk'] = cc.KeyData['cc_call_center_sk'])) then continue;
          _tmp9 := specialize TFPGMap<string, Variant>.Create;
          _tmp9.AddOrSetData('warehouse', g.key.warehouse);
          _tmp9.AddOrSetData('sm_type', g.key.sm_type);
          _tmp9.AddOrSetData('cc_name', g.key.cc_name);
          SetLength(_tmp10, 0);
          for x in g do
          begin
            if not ((x.cs_ship_date_sk - x.cs_sold_date_sk <= 30)) then continue;
            _tmp10 := Concat(_tmp10, [x]);
          end;
          _tmp9.AddOrSetData('d30', specialize _countList<Variant>(_tmp10));
          SetLength(_tmp11, 0);
          for x in g do
          begin
            if not (((x.cs_ship_date_sk - x.cs_sold_date_sk > 30) and (x.cs_ship_date_sk - x.cs_sold_date_sk <= 60))) then continue;
            _tmp11 := Concat(_tmp11, [x]);
          end;
          _tmp9.AddOrSetData('d60', specialize _countList<Variant>(_tmp11));
          SetLength(_tmp12, 0);
          for x in g do
          begin
            if not (((x.cs_ship_date_sk - x.cs_sold_date_sk > 60) and (x.cs_ship_date_sk - x.cs_sold_date_sk <= 90))) then continue;
            _tmp12 := Concat(_tmp12, [x]);
          end;
          _tmp9.AddOrSetData('d90', specialize _countList<Variant>(_tmp12));
          SetLength(_tmp13, 0);
          for x in g do
          begin
            if not (((x.cs_ship_date_sk - x.cs_sold_date_sk > 90) and (x.cs_ship_date_sk - x.cs_sold_date_sk <= 120))) then continue;
            _tmp13 := Concat(_tmp13, [x]);
          end;
          _tmp9.AddOrSetData('d120', specialize _countList<Variant>(_tmp13));
          SetLength(_tmp14, 0);
          for x in g do
          begin
            if not ((x.cs_ship_date_sk - x.cs_sold_date_sk > 120)) then continue;
            _tmp14 := Concat(_tmp14, [x]);
          end;
          _tmp9.AddOrSetData('dmore', specialize _countList<Variant>(_tmp14));
          _tmp8 := Concat(_tmp8, [_tmp9]);
        end;
      end;
    end;
  end;
  grouped := _tmp8;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(grouped);
  test_TPCDS_Q99_buckets;
end.
