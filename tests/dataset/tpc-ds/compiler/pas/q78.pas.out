// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:30Z
program Q78;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp11: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp12: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp13: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp14: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp15: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp16: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp17: specialize TFPGMap<string, Variant>;
  _tmp18: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp19: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp20: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp21: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp22: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp23: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp24: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp25: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp26: boolean;
  _tmp27: specialize TFPGMap<string, Variant>;
  _tmp28: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp29: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp3: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp30: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp31: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp32: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp33: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp34: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp35: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp36: specialize TFPGMap<string, Variant>;
  _tmp37: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp38: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp39: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp4: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp40: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp41: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp42: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp43: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp44: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp5: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp6: boolean;
  _tmp7: boolean;
  _tmp8: specialize TFPGMap<string, Variant>;
  _tmp9: specialize TArray<specialize TFPGMap<string, Variant>>;
  c: specialize TFPGMap<string, Variant>;
  cs: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  s: specialize TFPGMap<string, Variant>;
  ss: specialize TArray<specialize TFPGMap<string, Variant>>;
  w: specialize TFPGMap<string, Variant>;
  ws: specialize TArray<specialize TFPGMap<string, Variant>>;

procedure test_TPCDS_Q78_simplified;
var
  _tmp45: specialize TFPGMap<string, Variant>;
begin
  _tmp45 := specialize TFPGMap<string, Variant>.Create;
  _tmp45.AddOrSetData('ss_sold_year', 1998);
  _tmp45.AddOrSetData('ss_item_sk', 1);
  _tmp45.AddOrSetData('ss_customer_sk', 1);
  _tmp45.AddOrSetData('ratio', 1.25);
  _tmp45.AddOrSetData('store_qty', 10);
  _tmp45.AddOrSetData('store_wholesale_cost', 50);
  _tmp45.AddOrSetData('store_sales_price', 100);
  _tmp45.AddOrSetData('other_chan_qty', 8);
  _tmp45.AddOrSetData('other_chan_wholesale_cost', 40);
  _tmp45.AddOrSetData('other_chan_sales_price', 80);
  if not ((_result = specialize TArray<_>([_tmp45]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('ss_sold_year', 1998);
  _tmp0.AddOrSetData('ss_item_sk', 1);
  _tmp0.AddOrSetData('ss_customer_sk', 1);
  _tmp0.AddOrSetData('ss_qty', 10);
  _tmp0.AddOrSetData('ss_wc', 50);
  _tmp0.AddOrSetData('ss_sp', 100);
  ss := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0]);
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('ws_sold_year', 1998);
  _tmp1.AddOrSetData('ws_item_sk', 1);
  _tmp1.AddOrSetData('ws_customer_sk', 1);
  _tmp1.AddOrSetData('ws_qty', 5);
  _tmp1.AddOrSetData('ws_wc', 25);
  _tmp1.AddOrSetData('ws_sp', 50);
  ws := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp1]);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('cs_sold_year', 1998);
  _tmp2.AddOrSetData('cs_item_sk', 1);
  _tmp2.AddOrSetData('cs_customer_sk', 1);
  _tmp2.AddOrSetData('cs_qty', 3);
  _tmp2.AddOrSetData('cs_wc', 15);
  _tmp2.AddOrSetData('cs_sp', 30);
  cs := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp2]);
  if (w = Null) then
  begin
    _tmp3 := 0;
  end else
  begin
    _tmp3 := w.KeyData['ws_qty'];
  end;
  if (c = Null) then
  begin
    _tmp4 := 0;
  end else
  begin
    _tmp4 := c.KeyData['cs_qty'];
  end;
  SetLength(_tmp5, 0);
  for s in ss do
  begin
    _tmp6 := False;
    for w in ws do
    begin
      if not ((((w.KeyData['ws_sold_year'] = s.KeyData['ss_sold_year']) and (w.KeyData['ws_item_sk'] = s.KeyData['ss_item_sk'])) and (w.KeyData['ws_customer_sk'] = s.KeyData['ss_customer_sk']))) then continue;
      _tmp6 := True;
      _tmp7 := False;
      for c in cs do
      begin
        if not ((((c.KeyData['cs_sold_year'] = s.KeyData['ss_sold_year']) and (c.KeyData['cs_item_sk'] = s.KeyData['ss_item_sk'])) and (c.KeyData['cs_customer_sk'] = s.KeyData['ss_customer_sk']))) then continue;
        _tmp7 := True;
        if not ((((_tmp3 > 0) or (_tmp4 > 0)) and (s.KeyData['ss_sold_year'] = 1998))) then continue;
        _tmp8 := specialize TFPGMap<string, Variant>.Create;
        _tmp8.AddOrSetData('ss_sold_year', s.KeyData['ss_sold_year']);
        _tmp8.AddOrSetData('ss_item_sk', s.KeyData['ss_item_sk']);
        _tmp8.AddOrSetData('ss_customer_sk', s.KeyData['ss_customer_sk']);
        if (w = Null) then
        begin
          _tmp9 := 0;
        end else
        begin
          _tmp9 := w.KeyData['ws_qty'];
        end;
        if (c = Null) then
        begin
          _tmp10 := 0;
        end else
        begin
          _tmp10 := c.KeyData['cs_qty'];
        end;
        _tmp8.AddOrSetData('ratio', s.KeyData['ss_qty'] / _tmp9 + _tmp10);
        _tmp8.AddOrSetData('store_qty', s.KeyData['ss_qty']);
        _tmp8.AddOrSetData('store_wholesale_cost', s.KeyData['ss_wc']);
        _tmp8.AddOrSetData('store_sales_price', s.KeyData['ss_sp']);
        if (w = Null) then
        begin
          _tmp11 := 0;
        end else
        begin
          _tmp11 := w.KeyData['ws_qty'];
        end;
        if (c = Null) then
        begin
          _tmp12 := 0;
        end else
        begin
          _tmp12 := c.KeyData['cs_qty'];
        end;
        _tmp8.AddOrSetData('other_chan_qty', _tmp11 + _tmp12);
        if (w = Null) then
        begin
          _tmp13 := 0;
        end else
        begin
          _tmp13 := w.KeyData['ws_wc'];
        end;
        if (c = Null) then
        begin
          _tmp14 := 0;
        end else
        begin
          _tmp14 := c.KeyData['cs_wc'];
        end;
        _tmp8.AddOrSetData('other_chan_wholesale_cost', _tmp13 + _tmp14);
        if (w = Null) then
        begin
          _tmp15 := 0;
        end else
        begin
          _tmp15 := w.KeyData['ws_sp'];
        end;
        if (c = Null) then
        begin
          _tmp16 := 0;
        end else
        begin
          _tmp16 := c.KeyData['cs_sp'];
        end;
        _tmp8.AddOrSetData('other_chan_sales_price', _tmp15 + _tmp16);
        _tmp5 := Concat(_tmp5, [_tmp8]);
      end;
      if not _tmp7 then
      begin
        c := nil;
        if not ((((_tmp3 > 0) or (_tmp4 > 0)) and (s.KeyData['ss_sold_year'] = 1998))) then continue;
        _tmp17 := specialize TFPGMap<string, Variant>.Create;
        _tmp17.AddOrSetData('ss_sold_year', s.KeyData['ss_sold_year']);
        _tmp17.AddOrSetData('ss_item_sk', s.KeyData['ss_item_sk']);
        _tmp17.AddOrSetData('ss_customer_sk', s.KeyData['ss_customer_sk']);
        if (w = Null) then
        begin
          _tmp18 := 0;
        end else
        begin
          _tmp18 := w.KeyData['ws_qty'];
        end;
        if (c = Null) then
        begin
          _tmp19 := 0;
        end else
        begin
          _tmp19 := c.KeyData['cs_qty'];
        end;
        _tmp17.AddOrSetData('ratio', s.KeyData['ss_qty'] / _tmp18 + _tmp19);
        _tmp17.AddOrSetData('store_qty', s.KeyData['ss_qty']);
        _tmp17.AddOrSetData('store_wholesale_cost', s.KeyData['ss_wc']);
        _tmp17.AddOrSetData('store_sales_price', s.KeyData['ss_sp']);
        if (w = Null) then
        begin
          _tmp20 := 0;
        end else
        begin
          _tmp20 := w.KeyData['ws_qty'];
        end;
        if (c = Null) then
        begin
          _tmp21 := 0;
        end else
        begin
          _tmp21 := c.KeyData['cs_qty'];
        end;
        _tmp17.AddOrSetData('other_chan_qty', _tmp20 + _tmp21);
        if (w = Null) then
        begin
          _tmp22 := 0;
        end else
        begin
          _tmp22 := w.KeyData['ws_wc'];
        end;
        if (c = Null) then
        begin
          _tmp23 := 0;
        end else
        begin
          _tmp23 := c.KeyData['cs_wc'];
        end;
        _tmp17.AddOrSetData('other_chan_wholesale_cost', _tmp22 + _tmp23);
        if (w = Null) then
        begin
          _tmp24 := 0;
        end else
        begin
          _tmp24 := w.KeyData['ws_sp'];
        end;
        if (c = Null) then
        begin
          _tmp25 := 0;
        end else
        begin
          _tmp25 := c.KeyData['cs_sp'];
        end;
        _tmp17.AddOrSetData('other_chan_sales_price', _tmp24 + _tmp25);
        _tmp5 := Concat(_tmp5, [_tmp17]);
      end;
    end;
    if not _tmp6 then
    begin
      w := nil;
      _tmp26 := False;
      for c in cs do
      begin
        if not ((((c.KeyData['cs_sold_year'] = s.KeyData['ss_sold_year']) and (c.KeyData['cs_item_sk'] = s.KeyData['ss_item_sk'])) and (c.KeyData['cs_customer_sk'] = s.KeyData['ss_customer_sk']))) then continue;
        _tmp26 := True;
        if not ((((_tmp3 > 0) or (_tmp4 > 0)) and (s.KeyData['ss_sold_year'] = 1998))) then continue;
        _tmp27 := specialize TFPGMap<string, Variant>.Create;
        _tmp27.AddOrSetData('ss_sold_year', s.KeyData['ss_sold_year']);
        _tmp27.AddOrSetData('ss_item_sk', s.KeyData['ss_item_sk']);
        _tmp27.AddOrSetData('ss_customer_sk', s.KeyData['ss_customer_sk']);
        if (w = Null) then
        begin
          _tmp28 := 0;
        end else
        begin
          _tmp28 := w.KeyData['ws_qty'];
        end;
        if (c = Null) then
        begin
          _tmp29 := 0;
        end else
        begin
          _tmp29 := c.KeyData['cs_qty'];
        end;
        _tmp27.AddOrSetData('ratio', s.KeyData['ss_qty'] / _tmp28 + _tmp29);
        _tmp27.AddOrSetData('store_qty', s.KeyData['ss_qty']);
        _tmp27.AddOrSetData('store_wholesale_cost', s.KeyData['ss_wc']);
        _tmp27.AddOrSetData('store_sales_price', s.KeyData['ss_sp']);
        if (w = Null) then
        begin
          _tmp30 := 0;
        end else
        begin
          _tmp30 := w.KeyData['ws_qty'];
        end;
        if (c = Null) then
        begin
          _tmp31 := 0;
        end else
        begin
          _tmp31 := c.KeyData['cs_qty'];
        end;
        _tmp27.AddOrSetData('other_chan_qty', _tmp30 + _tmp31);
        if (w = Null) then
        begin
          _tmp32 := 0;
        end else
        begin
          _tmp32 := w.KeyData['ws_wc'];
        end;
        if (c = Null) then
        begin
          _tmp33 := 0;
        end else
        begin
          _tmp33 := c.KeyData['cs_wc'];
        end;
        _tmp27.AddOrSetData('other_chan_wholesale_cost', _tmp32 + _tmp33);
        if (w = Null) then
        begin
          _tmp34 := 0;
        end else
        begin
          _tmp34 := w.KeyData['ws_sp'];
        end;
        if (c = Null) then
        begin
          _tmp35 := 0;
        end else
        begin
          _tmp35 := c.KeyData['cs_sp'];
        end;
        _tmp27.AddOrSetData('other_chan_sales_price', _tmp34 + _tmp35);
        _tmp5 := Concat(_tmp5, [_tmp27]);
      end;
      if not _tmp26 then
      begin
        c := nil;
        if not ((((_tmp3 > 0) or (_tmp4 > 0)) and (s.KeyData['ss_sold_year'] = 1998))) then continue;
        _tmp36 := specialize TFPGMap<string, Variant>.Create;
        _tmp36.AddOrSetData('ss_sold_year', s.KeyData['ss_sold_year']);
        _tmp36.AddOrSetData('ss_item_sk', s.KeyData['ss_item_sk']);
        _tmp36.AddOrSetData('ss_customer_sk', s.KeyData['ss_customer_sk']);
        if (w = Null) then
        begin
          _tmp37 := 0;
        end else
        begin
          _tmp37 := w.KeyData['ws_qty'];
        end;
        if (c = Null) then
        begin
          _tmp38 := 0;
        end else
        begin
          _tmp38 := c.KeyData['cs_qty'];
        end;
        _tmp36.AddOrSetData('ratio', s.KeyData['ss_qty'] / _tmp37 + _tmp38);
        _tmp36.AddOrSetData('store_qty', s.KeyData['ss_qty']);
        _tmp36.AddOrSetData('store_wholesale_cost', s.KeyData['ss_wc']);
        _tmp36.AddOrSetData('store_sales_price', s.KeyData['ss_sp']);
        if (w = Null) then
        begin
          _tmp39 := 0;
        end else
        begin
          _tmp39 := w.KeyData['ws_qty'];
        end;
        if (c = Null) then
        begin
          _tmp40 := 0;
        end else
        begin
          _tmp40 := c.KeyData['cs_qty'];
        end;
        _tmp36.AddOrSetData('other_chan_qty', _tmp39 + _tmp40);
        if (w = Null) then
        begin
          _tmp41 := 0;
        end else
        begin
          _tmp41 := w.KeyData['ws_wc'];
        end;
        if (c = Null) then
        begin
          _tmp42 := 0;
        end else
        begin
          _tmp42 := c.KeyData['cs_wc'];
        end;
        _tmp36.AddOrSetData('other_chan_wholesale_cost', _tmp41 + _tmp42);
        if (w = Null) then
        begin
          _tmp43 := 0;
        end else
        begin
          _tmp43 := w.KeyData['ws_sp'];
        end;
        if (c = Null) then
        begin
          _tmp44 := 0;
        end else
        begin
          _tmp44 := c.KeyData['cs_sp'];
        end;
        _tmp36.AddOrSetData('other_chan_sales_price', _tmp43 + _tmp44);
        _tmp5 := Concat(_tmp5, [_tmp36]);
      end;
    end;
  end;
  _result := _tmp5;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q78_simplified;
end.
