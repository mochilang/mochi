program main;
{$mode objfpc}

uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser;

type
  generic TArray<T> = array of T;

type StoreSale = record
  ss_sold_date_sk: integer;
  ss_item_sk: integer;
  ss_customer_sk: integer;
  ss_ticket_number: integer;
  ss_quantity: integer;
  ss_store_sk: integer;
end;

type StoreReturn = record
  sr_returned_date_sk: integer;
  sr_customer_sk: integer;
  sr_item_sk: integer;
  sr_ticket_number: integer;
  sr_return_quantity: integer;
end;

type CatalogSale = record
  cs_sold_date_sk: integer;
  cs_item_sk: integer;
  cs_bill_customer_sk: integer;
  cs_quantity: integer;
end;

type DateDim = record
  d_date_sk: integer;
  d_quarter_name: string;
end;

type Store = record
  s_store_sk: integer;
  s_state: string;
end;

type Item = record
  i_item_sk: integer;
  i_item_id: string;
  i_item_desc: string;
end;

generic _Group<T> = record
  Key: Variant;
  Items: specialize TArray<T>;
end;

generic function _avgList<T>(arr: specialize TArray<T>): double;
begin
  if Length(arr) = 0 then exit(0);
  Result := specialize _sumList<T>(arr) / Length(arr);
end;

generic function _countList<T>(arr: specialize TArray<T>): integer;
begin
  Result := Length(arr);
end;

generic function _group_by<T>(src: specialize TArray<T>; keyfn: function(it: T): Variant):
                                                                                          specialize
                                                                                           TArray<
                                                                                          specialize
                                                                                           _Group<T>
                                                                                           >;

var i,j,idx: Integer;
  key: Variant;
  ks: string;
begin
  SetLength(Result, 0);
  for i := 0 to High(src) do
    begin
      key := keyfn(src[i]);
      ks := VarToStr(key);
      idx := -1;
      for j := 0 to High(Result) do
        if VarToStr(Result[j].Key) = ks then
          begin
            idx := j;
            Break;
          end;
      if idx = -1 then
        begin
          idx := Length(Result);
          SetLength(Result, idx + 1);
          Result[idx].Key := key;
          SetLength(Result[idx].Items, 0);
        end;
      SetLength(Result[idx].Items, Length(Result[idx].Items)+1);
      Result[idx].Items[High(Result[idx].Items)] := src[i];
    end;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

var
  _: integer;
  _tmp0: specialize TFPGMap<Variant, integer>;
  _tmp1: specialize TFPGMap<Variant, integer>;
  _tmp10: specialize TFPGMap<Variant, integer>;
  _tmp11: specialize TArray<Variant>;
  _tmp12: specialize TArray<Variant>;
  _tmp13: specialize TArray<Variant>;
  _tmp14: specialize TArray<Variant>;
  _tmp15: specialize TArray<Variant>;
  _tmp16: specialize TArray<Variant>;
  _tmp17: specialize TFPGMap<Variant, Variant>;
  _tmp18: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp19: specialize TArray<specialize _Group<specialize TFPGMap<string, integer>>>;
  _tmp2: specialize TFPGMap<Variant, integer>;
  _tmp20: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp3: specialize TFPGMap<Variant, Variant>;
  _tmp4: specialize TFPGMap<Variant, Variant>;
  _tmp5: specialize TFPGMap<Variant, Variant>;
  _tmp6: specialize TFPGMap<Variant, Variant>;
  _tmp7: specialize TFPGMap<Variant, Variant>;
  _tmp8: specialize TFPGMap<Variant, Variant>;
  _tmp9: specialize TArray<specialize TFPGMap<string, integer>>;
  catalog_sales: specialize TArray<specialize TFPGMap<string, integer>>;
  date_dim: specialize TArray<specialize TFPGMap<string, Variant>>;
  item: specialize TArray<specialize TFPGMap<string, Variant>>;
  j: specialize TFPGMap<string, integer>;
  joined: specialize TArray<specialize TFPGMap<string, integer>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  ss: specialize TFPGMap<string, integer>;
  store: specialize TArray<specialize TFPGMap<string, Variant>>;
  store_returns: specialize TArray<specialize TFPGMap<string, integer>>;
  store_sales: specialize TArray<specialize TFPGMap<string, integer>>;
  x: integer;

procedure test_TPCDS_Q17_stats;

var
  _tmp21: specialize TFPGMap<Variant, Variant>;
begin
  _tmp21 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp21.AddOrSetData('i_ite_tmp21_id', 'I1');
  _tmp21.AddOrSetData('i_ite_tmp21_desc', 'Ite_tmp21 1');
  _tmp21.AddOrSetData('s_state', 'CA');
  _tmp21.AddOrSetData('store_sales_quantitycount', 1);
  _tmp21.AddOrSetData('store_sales_quantityave', 10);
  _tmp21.AddOrSetData('store_sales_quantitystdev', 0);
  _tmp21.AddOrSetData('store_sales_quantitycov', 0);
  _tmp21.AddOrSetData('store_returns_quantitycount', 1);
  _tmp21.AddOrSetData('store_returns_quantityave', 2);
  _tmp21.AddOrSetData('store_returns_quantitystdev', 0);
  _tmp21.AddOrSetData('store_returns_quantitycov', 0);
  _tmp21.AddOrSetData('catalog_sales_quantitycount', 1);
  _tmp21.AddOrSetData('catalog_sales_quantityave', 5);
  _tmp21.AddOrSetData('catalog_sales_quantitystdev', 0);
  _tmp21.AddOrSetData('catalog_sales_quantitycov', 0);
  if not ((_result = specialize TArray<specialize TFPGMap<string, Variant>>([_tmp21]))) then raise
    Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<Variant, integer>.Create;
  _tmp0.AddOrSetData('ss_sold_date_sk', 1);
  _tmp0.AddOrSetData('ss_ite_tmp0_sk', 1);
  _tmp0.AddOrSetData('ss_custo_tmp0er_sk', 1);
  _tmp0.AddOrSetData('ss_ticket_nu_tmp0ber', 1);
  _tmp0.AddOrSetData('ss_quantity', 10);
  _tmp0.AddOrSetData('ss_store_sk', 1);
  store_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0]);
  _tmp1 := specialize TFPGMap<Variant, integer>.Create;
  _tmp1.AddOrSetData('sr_returned_date_sk', 2);
  _tmp1.AddOrSetData('sr_custo_tmp1er_sk', 1);
  _tmp1.AddOrSetData('sr_ite_tmp1_sk', 1);
  _tmp1.AddOrSetData('sr_ticket_nu_tmp1ber', 1);
  _tmp1.AddOrSetData('sr_return_quantity', 2);
  store_returns := specialize TArray<specialize TFPGMap<string, integer>>([_tmp1]);
  _tmp2 := specialize TFPGMap<Variant, integer>.Create;
  _tmp2.AddOrSetData('cs_sold_date_sk', 3);
  _tmp2.AddOrSetData('cs_ite_tmp2_sk', 1);
  _tmp2.AddOrSetData('cs_bill_custo_tmp2er_sk', 1);
  _tmp2.AddOrSetData('cs_quantity', 5);
  catalog_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp2]);
  _tmp3 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp3.AddOrSetData('d_date_sk', 1);
  _tmp3.AddOrSetData('d_quarter_na_tmp3e', '1998Q1');
  _tmp4 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp4.AddOrSetData('d_date_sk', 2);
  _tmp4.AddOrSetData('d_quarter_na_tmp4e', '1998Q2');
  _tmp5 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp5.AddOrSetData('d_date_sk', 3);
  _tmp5.AddOrSetData('d_quarter_na_tmp5e', '1998Q3');
  date_dim := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp3, _tmp4, _tmp5]);
  _tmp6 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp6.AddOrSetData('s_store_sk', 1);
  _tmp6.AddOrSetData('s_state', 'CA');
  store := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp6]);
  _tmp7 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp7.AddOrSetData('i_ite_tmp7_sk', 1);
  _tmp7.AddOrSetData('i_ite_tmp7_id', 'I1');
  _tmp7.AddOrSetData('i_ite_tmp7_desc', 'Ite_tmp7 1');
  item := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp7]);
  _tmp8 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp8.AddOrSetData('qty', ss.ss_quantity);
  _tmp8.AddOrSetData('ret', sr.sr_return_quantity);
  _tmp8.AddOrSetData('csq', cs.cs_quantity);
  _tmp8.AddOrSetData('i_ite_tmp8_id', i.i_ite_tmp8_id);
  _tmp8.AddOrSetData('i_ite_tmp8_desc', i.i_ite_tmp8_desc);
  _tmp8.AddOrSetData('s_state', s.s_state);
  SetLength(_tmp9, 0);
  for ss in store_sales do
    begin
      for sr in store_returns do
        begin
          if not ((((ss.ss_customer_sk = sr.sr_customer_sk) and (ss.ss_item_sk = sr.sr_item_sk)) and
             (ss.ss_ticket_number = sr.sr_ticket_number))) then continue;
          for cs in catalog_sales do
            begin
              if not (((sr.sr_customer_sk = cs.cs_bill_customer_sk) and (sr.sr_item_sk = cs.
                 cs_item_sk))) then continue;
              for d1 in date_dim do
                begin
                  if not (((ss.ss_sold_date_sk = d1.d_date_sk) and (d1.d_quarter_name = '1998Q1')))
                    then continue;
                  for d2 in date_dim do
                    begin
                      if not (((sr.sr_returned_date_sk = d2.d_date_sk) and (specialize TArray<
                         specialize TFPGMap<string, integer>>(['1998Q1', '1998Q2', '1998Q3']).
                         IndexOf(d2.d_quarter_name) >= 0))) then continue;
                      for d3 in date_dim do
                        begin
                          if not (((cs.cs_sold_date_sk = d3.d_date_sk) and (specialize TArray<
                             specialize TFPGMap<string, integer>>(['1998Q1', '1998Q2', '1998Q3']).
                             IndexOf(d3.d_quarter_name) >= 0))) then continue;
                          for s in store do
                            begin
                              if not ((ss.ss_store_sk = s.s_store_sk)) then continue;
                              for i in item do
                                begin
                                  if not ((ss.ss_item_sk = i.i_item_sk)) then continue;
                                  _tmp9 := Concat(_tmp9, [_tmp8]);
                                end;
                            end;
                        end;
                    end;
                end;
            end;
        end;
    end;
  joined := _tmp9;
  _tmp10 := specialize TFPGMap<Variant, integer>.Create;
  _tmp10.AddOrSetData('i_ite_tmp10_id', j.i_ite_tmp10_id);
  _tmp10.AddOrSetData('i_ite_tmp10_desc', j.i_ite_tmp10_desc);
  _tmp10.AddOrSetData('s_state', j.s_state);
  SetLength(_tmp11, 0);
  for _ in g do
    begin
      _tmp11 := Concat(_tmp11, [_]);
    end;
  SetLength(_tmp12, 0);
  for x in g do
    begin
      _tmp12 := Concat(_tmp12, [x.qty]);
    end;
  SetLength(_tmp13, 0);
  for _ in g do
    begin
      _tmp13 := Concat(_tmp13, [_]);
    end;
  SetLength(_tmp14, 0);
  for x in g do
    begin
      _tmp14 := Concat(_tmp14, [x.ret]);
    end;
  SetLength(_tmp15, 0);
  for _ in g do
    begin
      _tmp15 := Concat(_tmp15, [_]);
    end;
  SetLength(_tmp16, 0);
  for x in g do
    begin
      _tmp16 := Concat(_tmp16, [x.csq]);
    end;
  _tmp17 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp17.AddOrSetData('i_ite_tmp17_id', g.key.i_ite_tmp17_id);
  _tmp17.AddOrSetData('i_ite_tmp17_desc', g.key.i_ite_tmp17_desc);
  _tmp17.AddOrSetData('s_state', g.key.s_state);
  _tmp17.AddOrSetData('store_sales_quantitycount', specialize _countList<Variant>(_t_tmp17p11));
  _tmp17.AddOrSetData('store_sales_quantityave', specialize _avgList<Variant>(_t_tmp17p12));
  _tmp17.AddOrSetData('store_sales_quantitystdev', 0);
  _tmp17.AddOrSetData('store_sales_quantitycov', 0);
  _tmp17.AddOrSetData('store_returns_quantitycount', specialize _countList<Variant>(_t_tmp17p13));
  _tmp17.AddOrSetData('store_returns_quantityave', specialize _avgList<Variant>(_t_tmp17p14));
  _tmp17.AddOrSetData('store_returns_quantitystdev', 0);
  _tmp17.AddOrSetData('store_returns_quantitycov', 0);
  _tmp17.AddOrSetData('catalog_sales_quantitycount', specialize _countList<Variant>(_t_tmp17p15));
  _tmp17.AddOrSetData('catalog_sales_quantityave', specialize _avgList<Variant>(_t_tmp17p16));
  _tmp17.AddOrSetData('catalog_sales_quantitystdev', 0);
  _tmp17.AddOrSetData('catalog_sales_quantitycov', 0);
  SetLength(_tmp18, 0);
  for j in joined do
    begin
      _tmp18 := Concat(_tmp18, [j]);
    end;
  _tmp19 := specialize _group_by<specialize TFPGMap<string, integer>>(_tmp18, function(j: specialize
            TFPGMap<string, integer>): Variant begin Result := _tmp10
end
);
SetLength(_tmp20, 0);
for g in _tmp19 do
  begin
    _tmp20 := Concat(_tmp20, [_tmp17]);
  end;
_result := _tmp20;
specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
test_TPCDS_Q17_stats;
end.
