program main;
{$mode objfpc}

uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser;

type
  generic TArray<T> = array of T;

type Inventory = record
  inv_item_sk: integer;
  inv_warehouse_sk: integer;
  inv_date_sk: integer;
  inv_quantity_on_hand: integer;
end;

type Warehouse = record
  w_warehouse_sk: integer;
  w_warehouse_name: string;
end;

type Item = record
  i_item_sk: integer;
  i_item_id: string;
end;

type DateDim = record
  d_date_sk: integer;
  d_date: string;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);

var i,j: integer;
  tmp: T;
  k: Variant;
begin
  for i := 0 to High(arr) - 1 do
    for j := i + 1 to High(arr) do
      if keys[i] > keys[j] then
        begin
          tmp := arr[i];
          arr[i] := arr[j];
          arr[j] := tmp;
          k := keys[i];
          keys[i] := keys[j];
          keys[j] := k;
        end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;

var i: integer;
  s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<Variant, integer>;
  _tmp1: specialize TFPGMap<Variant, integer>;
  _tmp10: specialize TFPGMap<Variant, Variant>;
  _tmp11: specialize TArray<Variant>;
  _tmp12: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp13: specialize TFPGMap<Variant, Variant>;
  _tmp14: specialize TArray<Variant>;
  _tmp15: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp16: specialize TFPGMap<Variant, Variant>;
  _tmp17: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp18: specialize TFPGMap<Variant, Variant>;
  _tmp19: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp2: specialize TFPGMap<Variant, integer>;
  _tmp20: specialize TArray<Variant>;
  _tmp3: specialize TFPGMap<Variant, integer>;
  _tmp4: specialize TFPGMap<Variant, Variant>;
  _tmp5: specialize TFPGMap<Variant, Variant>;
  _tmp6: specialize TFPGMap<Variant, Variant>;
  _tmp7: specialize TFPGMap<Variant, Variant>;
  _tmp8: specialize TFPGMap<Variant, Variant>;
  _tmp9: specialize TFPGMap<Variant, Variant>;
  after: specialize TArray<specialize TFPGMap<string, Variant>>;
  b: specialize TFPGMap<string, Variant>;
  before: specialize TArray<specialize TFPGMap<string, Variant>>;
  date_dim: specialize TArray<specialize TFPGMap<string, Variant>>;
  inv: specialize TFPGMap<string, integer>;
  inventory: specialize TArray<specialize TFPGMap<string, integer>>;
  item: specialize TArray<specialize TFPGMap<string, Variant>>;
  joined: specialize TArray<specialize TFPGMap<string, Variant>>;
  r: specialize TFPGMap<string, Variant>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  warehouse: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: integer;

procedure test_TPCDS_Q21_inventory_ratio;

var
  _tmp21: specialize TFPGMap<Variant, Variant>;
begin
  _tmp21 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp21.AddOrSetData('w_warehouse_name', 'Main');
  _tmp21.AddOrSetData('i_item_id', 'ITEM1');
  _tmp21.AddOrSetData('inv_before', 30);
  _tmp21.AddOrSetData('inv_after', 40);
  if not ((_result = specialize TArray<specialize TFPGMap<string, Variant>>([_tmp21]))) then raise
    Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<Variant, integer>.Create;
  _tmp0.AddOrSetData('inv_item_sk', 1);
  _tmp0.AddOrSetData('inv_warehouse_sk', 1);
  _tmp0.AddOrSetData('inv_date_sk', 1);
  _tmp0.AddOrSetData('inv_quantity_on_hand', 30);
  _tmp1 := specialize TFPGMap<Variant, integer>.Create;
  _tmp1.AddOrSetData('inv_item_sk', 1);
  _tmp1.AddOrSetData('inv_warehouse_sk', 1);
  _tmp1.AddOrSetData('inv_date_sk', 2);
  _tmp1.AddOrSetData('inv_quantity_on_hand', 40);
  _tmp2 := specialize TFPGMap<Variant, integer>.Create;
  _tmp2.AddOrSetData('inv_item_sk', 2);
  _tmp2.AddOrSetData('inv_warehouse_sk', 2);
  _tmp2.AddOrSetData('inv_date_sk', 1);
  _tmp2.AddOrSetData('inv_quantity_on_hand', 20);
  _tmp3 := specialize TFPGMap<Variant, integer>.Create;
  _tmp3.AddOrSetData('inv_item_sk', 2);
  _tmp3.AddOrSetData('inv_warehouse_sk', 2);
  _tmp3.AddOrSetData('inv_date_sk', 2);
  _tmp3.AddOrSetData('inv_quantity_on_hand', 20);
  inventory := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0, _tmp1, _tmp2, _tmp3]);
  _tmp4 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp4.AddOrSetData('w_warehouse_sk', 1);
  _tmp4.AddOrSetData('w_warehouse_name', 'Main');
  _tmp5 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp5.AddOrSetData('w_warehouse_sk', 2);
  _tmp5.AddOrSetData('w_warehouse_name', 'Backup');
  warehouse := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4, _tmp5]);
  _tmp6 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp6.AddOrSetData('i_item_sk', 1);
  _tmp6.AddOrSetData('i_item_id', 'ITEM1');
  _tmp7 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp7.AddOrSetData('i_item_sk', 2);
  _tmp7.AddOrSetData('i_item_id', 'ITEM2');
  item := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp6, _tmp7]);
  _tmp8 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp8.AddOrSetData('d_date_sk', 1);
  _tmp8.AddOrSetData('d_date', '2000-03-01');
  _tmp9 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp9.AddOrSetData('d_date_sk', 2);
  _tmp9.AddOrSetData('d_date', '2000-03-20');
  date_dim := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp8, _tmp9]);
  _tmp10 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp10.AddOrSetData('w', g.key.w);
  _tmp10.AddOrSetData('i', g.key.i);
  SetLength(_tmp11, 0);
  for x in g do
    begin
      _tmp11 := Concat(_tmp11, [x.inv_quantity_on_hand]);
    end;
  _tmp10.AddOrSetData('qty', specialize _sumList<Variant>(_tmp11));
  SetLength(_tmp12, 0);
  for inv in inventory do
    begin
      for d in date_dim do
        begin
          if not ((inv.inv_date_sk = d.d_date_sk)) then continue;
          if not ((d.d_date < '2000-03-15')) then continue;
          _tmp12 := Concat(_tmp12, [_tmp10]);
        end;
    end;
  before := _tmp12;
  _tmp13 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp13.AddOrSetData('w', g.key.w);
  _tmp13.AddOrSetData('i', g.key.i);
  SetLength(_tmp14, 0);
  for x in g do
    begin
      _tmp14 := Concat(_tmp14, [x.inv_quantity_on_hand]);
    end;
  _tmp13.AddOrSetData('qty', specialize _sumList<Variant>(_tmp14));
  SetLength(_tmp15, 0);
  for inv in inventory do
    begin
      for d in date_dim do
        begin
          if not ((inv.inv_date_sk = d.d_date_sk)) then continue;
          if not ((d.d_date >= '2000-03-15')) then continue;
          _tmp15 := Concat(_tmp15, [_tmp13]);
        end;
    end;
  after := _tmp15;
  _tmp16 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp16.AddOrSetData('w_name', w.w_warehouse_name);
  _tmp16.AddOrSetData('i_id', it.i_item_id);
  _tmp16.AddOrSetData('before_qty', b.qty);
  _tmp16.AddOrSetData('after_qty', a.qty);
  _tmp16.AddOrSetData('ratio', a.qty / b.qty);
  SetLength(_tmp17, 0);
  for b in before do
    begin
      for a in after do
        begin
          if not (((b.w = a.w) and (b.i = a.i))) then continue;
          for w in warehouse do
            begin
              if not ((w.w_warehouse_sk = b.w)) then continue;
              for it in item do
                begin
                  if not ((it.i_item_sk = b.i)) then continue;
                  _tmp17 := Concat(_tmp17, [_tmp16]);
                end;
            end;
        end;
    end;
  joined := _tmp17;
  _tmp18 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp18.AddOrSetData('w_warehouse_name', r.w_name);
  _tmp18.AddOrSetData('i_item_id', r.i_id);
  _tmp18.AddOrSetData('inv_before', r.before_qty);
  _tmp18.AddOrSetData('inv_after', r.after_qty);
  SetLength(_tmp19, 0);
  SetLength(_tmp20, 0);
  for r in joined do
    begin
      if not (((r.ratio >= 2 div 3) and (r.ratio <= 3 div 2))) then continue;
      _tmp19 := Concat(_tmp19, [_tmp18]);
      _tmp20 := Concat(_tmp20, [specialize TArray<specialize TFPGMap<string, Variant>>([r.w_name, r.
                i_id])]);
    end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp19, _tmp20);
  _result := _tmp19;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q21_inventory_ratio;
end.
