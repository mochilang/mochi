// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:31Z
program Q83;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, integer>;
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, integer>;
  _tmp5: specialize TFPGMap<string, integer>;
  _tmp6: specialize TArray<integer>;
  _tmp7: specialize TArray<integer>;
  _tmp8: specialize TArray<integer>;
  cr_items: specialize TArray<specialize TFPGMap<string, integer>>;
  _result: double;
  sr_items: specialize TArray<specialize TFPGMap<string, integer>>;
  wr_items: specialize TArray<specialize TFPGMap<string, integer>>;
  x: specialize TFPGMap<string, integer>;

procedure test_TPCDS_Q83_sample;
begin
  if not ((_result = 83)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('qty', 10);
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('qty', 5);
  sr_items := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('qty', 25);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('qty', 20);
  cr_items := specialize TArray<specialize TFPGMap<string, integer>>([_tmp2, _tmp3]);
  _tmp4 := specialize TFPGMap<string, integer>.Create;
  _tmp4.AddOrSetData('qty', 10);
  _tmp5 := specialize TFPGMap<string, integer>.Create;
  _tmp5.AddOrSetData('qty', 13);
  wr_items := specialize TArray<specialize TFPGMap<string, integer>>([_tmp4, _tmp5]);
  SetLength(_tmp6, 0);
  for x in sr_items do
  begin
    _tmp6 := Concat(_tmp6, [x.KeyData['qty']]);
  end;
  SetLength(_tmp7, 0);
  for x in cr_items do
  begin
    _tmp7 := Concat(_tmp7, [x.KeyData['qty']]);
  end;
  SetLength(_tmp8, 0);
  for x in wr_items do
  begin
    _tmp8 := Concat(_tmp8, [x.KeyData['qty']]);
  end;
  _result := specialize _sumList<integer>(_tmp6) + specialize _sumList<integer>(_tmp7) + specialize _sumList<integer>(_tmp8);
  specialize _json<double>(_result);
  test_TPCDS_Q83_sample;
end.
