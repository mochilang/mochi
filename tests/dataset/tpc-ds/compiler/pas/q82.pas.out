// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:31Z
program Q82;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

var
  _tmp0: specialize TFPGMap<string, integer>;
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp10: specialize TFPGMap<string, integer>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, integer>;
  _tmp5: specialize TFPGMap<string, integer>;
  _tmp6: specialize TFPGMap<string, integer>;
  _tmp7: specialize TFPGMap<string, integer>;
  _tmp8: specialize TFPGMap<string, integer>;
  _tmp9: specialize TFPGMap<string, integer>;
  inv: specialize TFPGMap<string, integer>;
  inventory: specialize TArray<specialize TFPGMap<string, integer>>;
  item: specialize TArray<specialize TFPGMap<string, integer>>;
  _result: integer;
  s: specialize TFPGMap<string, integer>;
  store_sales: specialize TArray<specialize TFPGMap<string, integer>>;

procedure test_TPCDS_Q82_sample;
begin
  if not ((_result = 82)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('id', 1);
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('id', 2);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('id', 3);
  item := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0, _tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('item', 1);
  _tmp3.AddOrSetData('qty', 20);
  _tmp4 := specialize TFPGMap<string, integer>.Create;
  _tmp4.AddOrSetData('item', 1);
  _tmp4.AddOrSetData('qty', 22);
  _tmp5 := specialize TFPGMap<string, integer>.Create;
  _tmp5.AddOrSetData('item', 1);
  _tmp5.AddOrSetData('qty', 5);
  _tmp6 := specialize TFPGMap<string, integer>.Create;
  _tmp6.AddOrSetData('item', 2);
  _tmp6.AddOrSetData('qty', 30);
  _tmp7 := specialize TFPGMap<string, integer>.Create;
  _tmp7.AddOrSetData('item', 2);
  _tmp7.AddOrSetData('qty', 5);
  _tmp8 := specialize TFPGMap<string, integer>.Create;
  _tmp8.AddOrSetData('item', 3);
  _tmp8.AddOrSetData('qty', 10);
  inventory := specialize TArray<specialize TFPGMap<string, integer>>([_tmp3, _tmp4, _tmp5, _tmp6, _tmp7, _tmp8]);
  _tmp9 := specialize TFPGMap<string, integer>.Create;
  _tmp9.AddOrSetData('item', 1);
  _tmp10 := specialize TFPGMap<string, integer>.Create;
  _tmp10.AddOrSetData('item', 2);
  store_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp9, _tmp10]);
  _result := 0;
  for inv in inventory do
  begin
    for s in store_sales do
    begin
      if (inv.KeyData['item'] = s.KeyData['item']) then ;
    end;
  end;
  specialize _json<integer>(_result);
  test_TPCDS_Q82_sample;
end.
