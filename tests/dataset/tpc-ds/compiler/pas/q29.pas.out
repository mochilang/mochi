program main;
{$mode objfpc}

uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser;

type
  generic TArray<T> = array of T;

type StoreSale = record
  ss_sold_date_sk: integer;
  ss_item_sk: integer;
  ss_store_sk: integer;
  ss_customer_sk: integer;
  ss_quantity: integer;
  ss_ticket_number: integer;
end;

type StoreReturn = record
  sr_returned_date_sk: integer;
  sr_item_sk: integer;
  sr_customer_sk: integer;
  sr_ticket_number: integer;
  sr_return_quantity: integer;
end;

type CatalogSale = record
  cs_sold_date_sk: integer;
  cs_item_sk: integer;
  cs_bill_customer_sk: integer;
  cs_quantity: integer;
end;

type DateDim = record
  d_date_sk: integer;
  d_moy: integer;
  d_year: integer;
end;

type Store = record
  s_store_sk: integer;
  s_store_id: string;
  s_store_name: string;
end;

type Item = record
  i_item_sk: integer;
  i_item_id: string;
  i_item_desc: string;
end;

generic _Group<T> = record
  Key: Variant;
  Items: specialize TArray<T>;
end;

generic function _group_by<T>(src: specialize TArray<T>; keyfn: function(it: T): Variant):
                                                                                          specialize
                                                                                           TArray<
                                                                                          specialize
                                                                                           _Group<T>
                                                                                           >;

var i,j,idx: Integer;
  key: Variant;
  ks: string;
begin
  SetLength(Result, 0);
  for i := 0 to High(src) do
    begin
      key := keyfn(src[i]);
      ks := VarToStr(key);
      idx := -1;
      for j := 0 to High(Result) do
        if VarToStr(Result[j].Key) = ks then
          begin
            idx := j;
            Break;
          end;
      if idx = -1 then
        begin
          idx := Length(Result);
          SetLength(Result, idx + 1);
          Result[idx].Key := key;
          SetLength(Result[idx].Items, 0);
        end;
      SetLength(Result[idx].Items, Length(Result[idx].Items)+1);
      Result[idx].Items[High(Result[idx].Items)] := src[i];
    end;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;

var i: integer;
  s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<Variant, integer>;
  _tmp1: specialize TFPGMap<Variant, integer>;
  _tmp10: specialize TFPGMap<Variant, integer>;
  _tmp11: specialize TFPGMap<Variant, Variant>;
  _tmp12: specialize TArray<Variant>;
  _tmp13: specialize TArray<Variant>;
  _tmp14: specialize TArray<Variant>;
  _tmp15: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp16: specialize TArray<specialize _Group<specialize TFPGMap<string, integer>>>;
  _tmp17: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp2: specialize TFPGMap<Variant, integer>;
  _tmp3: specialize TFPGMap<Variant, integer>;
  _tmp4: specialize TFPGMap<Variant, integer>;
  _tmp5: specialize TFPGMap<Variant, integer>;
  _tmp6: specialize TFPGMap<Variant, Variant>;
  _tmp7: specialize TFPGMap<Variant, Variant>;
  _tmp8: specialize TFPGMap<Variant, Variant>;
  _tmp9: specialize TArray<specialize TFPGMap<string, Variant>>;
  b: specialize TFPGMap<string, integer>;
  base: specialize TArray<specialize TFPGMap<string, integer>>;
  catalog_sales: specialize TArray<specialize TFPGMap<string, integer>>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  item: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  ss: specialize TFPGMap<string, integer>;
  store: specialize TArray<specialize TFPGMap<string, Variant>>;
  store_returns: specialize TArray<specialize TFPGMap<string, integer>>;
  store_sales: specialize TArray<specialize TFPGMap<string, integer>>;
  x: integer;

procedure test_TPCDS_Q29_quantity_summary;

var
  _tmp18: specialize TFPGMap<Variant, Variant>;
begin
  _tmp18 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp18.AddOrSetData('i_item_id', 'ITEM1');
  _tmp18.AddOrSetData('i_item_desc', 'Desc1');
  _tmp18.AddOrSetData('s_store_id', 'S1');
  _tmp18.AddOrSetData('s_store_name', 'Store1');
  _tmp18.AddOrSetData('store_sales_quantity', 10);
  _tmp18.AddOrSetData('store_returns_quantity', 2);
  _tmp18.AddOrSetData('catalog_sales_quantity', 5);
  if not ((_result = specialize TArray<specialize TFPGMap<string, Variant>>([_tmp18]))) then raise
    Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<Variant, integer>.Create;
  _tmp0.AddOrSetData('ss_sold_date_sk', 1);
  _tmp0.AddOrSetData('ss_item_sk', 1);
  _tmp0.AddOrSetData('ss_store_sk', 1);
  _tmp0.AddOrSetData('ss_customer_sk', 1);
  _tmp0.AddOrSetData('ss_quantity', 10);
  _tmp0.AddOrSetData('ss_ticket_number', 1);
  store_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0]);
  _tmp1 := specialize TFPGMap<Variant, integer>.Create;
  _tmp1.AddOrSetData('sr_returned_date_sk', 2);
  _tmp1.AddOrSetData('sr_item_sk', 1);
  _tmp1.AddOrSetData('sr_customer_sk', 1);
  _tmp1.AddOrSetData('sr_ticket_number', 1);
  _tmp1.AddOrSetData('sr_return_quantity', 2);
  store_returns := specialize TArray<specialize TFPGMap<string, integer>>([_tmp1]);
  _tmp2 := specialize TFPGMap<Variant, integer>.Create;
  _tmp2.AddOrSetData('cs_sold_date_sk', 3);
  _tmp2.AddOrSetData('cs_item_sk', 1);
  _tmp2.AddOrSetData('cs_bill_customer_sk', 1);
  _tmp2.AddOrSetData('cs_quantity', 5);
  catalog_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp2]);
  _tmp3 := specialize TFPGMap<Variant, integer>.Create;
  _tmp3.AddOrSetData('d_date_sk', 1);
  _tmp3.AddOrSetData('d_moy', 4);
  _tmp3.AddOrSetData('d_year', 1999);
  _tmp4 := specialize TFPGMap<Variant, integer>.Create;
  _tmp4.AddOrSetData('d_date_sk', 2);
  _tmp4.AddOrSetData('d_moy', 5);
  _tmp4.AddOrSetData('d_year', 1999);
  _tmp5 := specialize TFPGMap<Variant, integer>.Create;
  _tmp5.AddOrSetData('d_date_sk', 3);
  _tmp5.AddOrSetData('d_moy', 5);
  _tmp5.AddOrSetData('d_year', 2000);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp3, _tmp4, _tmp5]);
  _tmp6 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp6.AddOrSetData('s_store_sk', 1);
  _tmp6.AddOrSetData('s_store_id', 'S1');
  _tmp6.AddOrSetData('s_store_name', 'Store1');
  store := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp6]);
  _tmp7 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp7.AddOrSetData('i_item_sk', 1);
  _tmp7.AddOrSetData('i_item_id', 'ITEM1');
  _tmp7.AddOrSetData('i_item_desc', 'Desc1');
  item := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp7]);
  _tmp8 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp8.AddOrSetData('ss_quantity', ss.ss_quantity);
  _tmp8.AddOrSetData('sr_return_quantity', sr.sr_return_quantity);
  _tmp8.AddOrSetData('cs_quantity', cs.cs_quantity);
  _tmp8.AddOrSetData('i_item_id', i.i_item_id);
  _tmp8.AddOrSetData('i_item_desc', i.i_item_desc);
  _tmp8.AddOrSetData('s_store_id', s.s_store_id);
  _tmp8.AddOrSetData('s_store_name', s.s_store_name);
  SetLength(_tmp9, 0);
  for ss in store_sales do
    begin
      for sr in store_returns do
        begin
          if not (((ss.ss_ticket_number = sr.sr_ticket_number) and (ss.ss_item_sk = sr.sr_item_sk)))
            then continue;
          for cs in catalog_sales do
            begin
              if not (((sr.sr_customer_sk = cs.cs_bill_customer_sk) and (sr.sr_item_sk = cs.
                 cs_item_sk))) then continue;
              for d1 in date_dim do
                begin
                  if not ((d1.d_date_sk = ss.ss_sold_date_sk)) then continue;
                  for d2 in date_dim do
                    begin
                      if not ((d2.d_date_sk = sr.sr_returned_date_sk)) then continue;
                      for d3 in date_dim do
                        begin
                          if not ((d3.d_date_sk = cs.cs_sold_date_sk)) then continue;
                          for s in store do
                            begin
                              if not ((s.s_store_sk = ss.ss_store_sk)) then continue;
                              for i in item do
                                begin
                                  if not ((i.i_item_sk = ss.ss_item_sk)) then continue;
                                  if not ((((((d1.d_moy = 4) and (d1.d_year = 1999)) and (d2.d_moy
                                     >= 4)) and (d2.d_moy <= 7)) and (d3.d_year in specialize TArray
                                     <specialize TFPGMap<string, integer>>([1999, 2000, 2001]))))
                                    then continue;
                                  _tmp9 := Concat(_tmp9, [_tmp8]);
                                end;
                            end;
                        end;
                    end;
                end;
            end;
        end;
    end;
  base := _tmp9;
  _tmp10 := specialize TFPGMap<Variant, integer>.Create;
  _tmp10.AddOrSetData('item_id', b.i_item_id);
  _tmp10.AddOrSetData('item_desc', b.i_item_desc);
  _tmp10.AddOrSetData('s_store_id', b.s_store_id);
  _tmp10.AddOrSetData('s_store_name', b.s_store_name);
  _tmp11 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp11.AddOrSetData('i_item_id', g.key.item_id);
  _tmp11.AddOrSetData('i_item_desc', g.key.item_desc);
  _tmp11.AddOrSetData('s_store_id', g.key.s_store_id);
  _tmp11.AddOrSetData('s_store_name', g.key.s_store_name);
  SetLength(_tmp12, 0);
  for x in g do
    begin
      _tmp12 := Concat(_tmp12, [x.ss_quantity]);
    end;
  _tmp11.AddOrSetData('store_sales_quantity', specialize _sumList<Variant>(_tmp12));
  SetLength(_tmp13, 0);
  for x in g do
    begin
      _tmp13 := Concat(_tmp13, [x.sr_return_quantity]);
    end;
  _tmp11.AddOrSetData('store_returns_quantity', specialize _sumList<Variant>(_tmp13));
  SetLength(_tmp14, 0);
  for x in g do
    begin
      _tmp14 := Concat(_tmp14, [x.cs_quantity]);
    end;
  _tmp11.AddOrSetData('catalog_sales_quantity', specialize _sumList<Variant>(_tmp14));
  SetLength(_tmp15, 0);
  for b in base do
    begin
      _tmp15 := Concat(_tmp15, [b]);
    end;
  _tmp16 := specialize _group_by<specialize TFPGMap<string, integer>>(_tmp15, function(b: specialize
            TFPGMap<string, integer>): Variant begin Result := _tmp10
end
);
SetLength(_tmp17, 0);
for g in _tmp16 do
  begin
    _tmp17 := Concat(_tmp17, [_tmp11]);
  end;
_result := _tmp17;
specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
test_TPCDS_Q29_quantity_summary;
end.
