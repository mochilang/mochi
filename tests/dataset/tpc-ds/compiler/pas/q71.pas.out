// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:29Z
program Q71;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);
var i,j: integer; tmp: T; k: Variant;
begin
  for i := 0 to High(arr) - 1 do
  for j := i + 1 to High(arr) do
    if keys[i] > keys[j] then
    begin
      tmp := arr[i]; arr[i] := arr[j]; arr[j] := tmp;
      k := keys[i]; keys[i] := keys[j]; keys[j] := k;
    end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: specialize TFPGMap<string, Variant>;
  _tmp11: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp12: specialize TFPGMap<string, Variant>;
  _tmp13: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp14: specialize TFPGMap<string, Variant>;
  _tmp15: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp16: specialize TArray<Variant>;
  _tmp17: specialize TFPGMap<string, Variant>;
  _tmp18: specialize TArray<Variant>;
  _tmp19: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TFPGMap<string, Variant>;
  _tmp5: specialize TFPGMap<string, integer>;
  _tmp6: specialize TFPGMap<string, Variant>;
  _tmp7: specialize TFPGMap<string, Variant>;
  _tmp8: specialize TFPGMap<string, Variant>;
  _tmp9: specialize TArray<specialize TFPGMap<string, Variant>>;
  catalog_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  cs: specialize TFPGMap<string, Variant>;
  d: specialize TFPGMap<string, integer>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  i: specialize TFPGMap<string, Variant>;
  item: specialize TArray<specialize TFPGMap<string, Variant>>;
  month: integer;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  s: Variant;
  ss: specialize TFPGMap<string, Variant>;
  store_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  t: specialize TFPGMap<string, Variant>;
  time_dim: specialize TArray<specialize TFPGMap<string, Variant>>;
  union_sales: specialize TArray<Variant>;
  web_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  ws: specialize TFPGMap<string, Variant>;
  x: integer;
  year: integer;

procedure test_TPCDS_Q71_simplified;
var
  _tmp20: specialize TFPGMap<string, Variant>;
  _tmp21: specialize TFPGMap<string, Variant>;
  _tmp22: specialize TFPGMap<string, Variant>;
begin
  _tmp20 := specialize TFPGMap<string, Variant>.Create;
  _tmp20.AddOrSetData('i_brand_id', 10);
  _tmp20.AddOrSetData('i_brand', 'BrandA');
  _tmp20.AddOrSetData('t_hour', 18);
  _tmp20.AddOrSetData('t_minute', 0);
  _tmp20.AddOrSetData('ext_price', 200);
  _tmp21 := specialize TFPGMap<string, Variant>.Create;
  _tmp21.AddOrSetData('i_brand_id', 20);
  _tmp21.AddOrSetData('i_brand', 'BrandB');
  _tmp21.AddOrSetData('t_hour', 8);
  _tmp21.AddOrSetData('t_minute', 30);
  _tmp21.AddOrSetData('ext_price', 150);
  _tmp22 := specialize TFPGMap<string, Variant>.Create;
  _tmp22.AddOrSetData('i_brand_id', 10);
  _tmp22.AddOrSetData('i_brand', 'BrandA');
  _tmp22.AddOrSetData('t_hour', 8);
  _tmp22.AddOrSetData('t_minute', 30);
  _tmp22.AddOrSetData('ext_price', 100);
  if not ((_result = specialize TArray<_>([_tmp20, _tmp21, _tmp22]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('i_item_sk', 1);
  _tmp0.AddOrSetData('i_brand_id', 10);
  _tmp0.AddOrSetData('i_brand', 'BrandA');
  _tmp0.AddOrSetData('i_manager_id', 1);
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('i_item_sk', 2);
  _tmp1.AddOrSetData('i_brand_id', 20);
  _tmp1.AddOrSetData('i_brand', 'BrandB');
  _tmp1.AddOrSetData('i_manager_id', 1);
  item := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('t_time_sk', 1);
  _tmp2.AddOrSetData('t_hour', 8);
  _tmp2.AddOrSetData('t_minute', 30);
  _tmp2.AddOrSetData('t_meal_time', 'breakfast');
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('t_time_sk', 2);
  _tmp3.AddOrSetData('t_hour', 18);
  _tmp3.AddOrSetData('t_minute', 0);
  _tmp3.AddOrSetData('t_meal_time', 'dinner');
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('t_time_sk', 3);
  _tmp4.AddOrSetData('t_hour', 12);
  _tmp4.AddOrSetData('t_minute', 0);
  _tmp4.AddOrSetData('t_meal_time', 'lunch');
  time_dim := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp2, _tmp3, _tmp4]);
  _tmp5 := specialize TFPGMap<string, integer>.Create;
  _tmp5.AddOrSetData('d_date_sk', 1);
  _tmp5.AddOrSetData('d_moy', 12);
  _tmp5.AddOrSetData('d_year', 1998);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp5]);
  _tmp6 := specialize TFPGMap<string, Variant>.Create;
  _tmp6.AddOrSetData('ws_ext_sales_price', 100);
  _tmp6.AddOrSetData('ws_sold_date_sk', 1);
  _tmp6.AddOrSetData('ws_item_sk', 1);
  _tmp6.AddOrSetData('ws_sold_time_sk', 1);
  web_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp6]);
  _tmp7 := specialize TFPGMap<string, Variant>.Create;
  _tmp7.AddOrSetData('cs_ext_sales_price', 200);
  _tmp7.AddOrSetData('cs_sold_date_sk', 1);
  _tmp7.AddOrSetData('cs_item_sk', 1);
  _tmp7.AddOrSetData('cs_sold_time_sk', 2);
  catalog_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp7]);
  _tmp8 := specialize TFPGMap<string, Variant>.Create;
  _tmp8.AddOrSetData('ss_ext_sales_price', 150);
  _tmp8.AddOrSetData('ss_sold_date_sk', 1);
  _tmp8.AddOrSetData('ss_item_sk', 2);
  _tmp8.AddOrSetData('ss_sold_time_sk', 1);
  store_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp8]);
  month := 12;
  year := 1998;
  SetLength(_tmp9, 0);
  for ws in web_sales do
  begin
    for d in date_dim do
    begin
      if not ((d.KeyData['d_date_sk'] = ws.KeyData['ws_sold_date_sk'])) then continue;
      if not (((d.KeyData['d_moy'] = month) and (d.KeyData['d_year'] = year))) then continue;
      _tmp10 := specialize TFPGMap<string, Variant>.Create;
      _tmp10.AddOrSetData('ext_price', ws.KeyData['ws_ext_sales_price']);
      _tmp10.AddOrSetData('item_sk', ws.KeyData['ws_item_sk']);
      _tmp10.AddOrSetData('time_sk', ws.KeyData['ws_sold_time_sk']);
      _tmp9 := Concat(_tmp9, [_tmp10]);
    end;
  end;
  SetLength(_tmp11, 0);
  for cs in catalog_sales do
  begin
    for d in date_dim do
    begin
      if not ((d.KeyData['d_date_sk'] = cs.KeyData['cs_sold_date_sk'])) then continue;
      if not (((d.KeyData['d_moy'] = month) and (d.KeyData['d_year'] = year))) then continue;
      _tmp12 := specialize TFPGMap<string, Variant>.Create;
      _tmp12.AddOrSetData('ext_price', cs.KeyData['cs_ext_sales_price']);
      _tmp12.AddOrSetData('item_sk', cs.KeyData['cs_item_sk']);
      _tmp12.AddOrSetData('time_sk', cs.KeyData['cs_sold_time_sk']);
      _tmp11 := Concat(_tmp11, [_tmp12]);
    end;
  end;
  SetLength(_tmp13, 0);
  for ss in store_sales do
  begin
    for d in date_dim do
    begin
      if not ((d.KeyData['d_date_sk'] = ss.KeyData['ss_sold_date_sk'])) then continue;
      if not (((d.KeyData['d_moy'] = month) and (d.KeyData['d_year'] = year))) then continue;
      _tmp14 := specialize TFPGMap<string, Variant>.Create;
      _tmp14.AddOrSetData('ext_price', ss.KeyData['ss_ext_sales_price']);
      _tmp14.AddOrSetData('item_sk', ss.KeyData['ss_item_sk']);
      _tmp14.AddOrSetData('time_sk', ss.KeyData['ss_sold_time_sk']);
      _tmp13 := Concat(_tmp13, [_tmp14]);
    end;
  end;
  union_sales := Concat(Concat(_tmp9, _tmp11), _tmp13);
  SetLength(_tmp15, 0);
  SetLength(_tmp16, 0);
  for i in item do
  begin
    for s in union_sales do
    begin
      if not ((s.item_sk = i.KeyData['i_item_sk'])) then continue;
      for t in time_dim do
      begin
        if not ((t.KeyData['t_time_sk'] = s.time_sk)) then continue;
        if not (((i.KeyData['i_manager_id'] = 1) and ((t.KeyData['t_meal_time'] = 'breakfast') or (t.KeyData['t_meal_time'] = 'dinner')))) then continue;
        _tmp17 := specialize TFPGMap<string, Variant>.Create;
        _tmp17.AddOrSetData('i_brand_id', g.key.brand_id);
        _tmp17.AddOrSetData('i_brand', g.key.brand);
        _tmp17.AddOrSetData('t_hour', g.key.t_hour);
        _tmp17.AddOrSetData('t_minute', g.key.t_minute);
        SetLength(_tmp18, 0);
        for x in g do
        begin
          _tmp18 := Concat(_tmp18, [x.s.ext_price]);
        end;
        _tmp17.AddOrSetData('ext_price', specialize _sumList<Variant>(_tmp18));
        _tmp15 := Concat(_tmp15, [_tmp17]);
        SetLength(_tmp19, 0);
        for x in g do
        begin
          _tmp19 := Concat(_tmp19, [x.s.ext_price]);
        end;
        _tmp16 := Concat(_tmp16, [specialize TArray<specialize TFPGMap<string, Variant>>([-specialize _sumList<Variant>(_tmp19), g.key.brand_id])]);
      end;
    end;
  end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp15, _tmp16);
  _result := _tmp15;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q71_simplified;
end.
