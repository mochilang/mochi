program main;
{$mode objfpc}

uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser;

type
  generic TArray<T> = array of T;

type StoreSale = record
  ss_sold_date_sk: integer;
  ss_item_sk: integer;
  ss_customer_sk: integer;
  ss_store_sk: integer;
  ss_ext_sales_price: double;
end;

type DateDim = record
  d_date_sk: integer;
  d_year: integer;
  d_moy: integer;
end;

type Item = record
  i_item_sk: integer;
  i_brand_id: integer;
  i_brand: string;
  i_manufact_id: integer;
  i_manufact: string;
  i_manager_id: integer;
end;

type Customer = record
  c_customer_sk: integer;
  c_current_addr_sk: integer;
end;

type CustomerAddress = record
  ca_address_sk: integer;
  ca_zip: string;
end;

type Store = record
  s_store_sk: integer;
  s_zip: string;
end;

procedure test_TPCDS_Q19_brand;

var
  _tmp0: specialize TFPGMap<string, integer>;
begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('i_brand', 'B1');
  _tmp0.AddOrSetData('i_brand_id', 1);
  _tmp0.AddOrSetData('i__tmp0anufact_id', 1);
  _tmp0.AddOrSetData('i__tmp0anufact', 'M1');
  _tmp0.AddOrSetData('ext_price', 100);
  if not ((_result = specialize TArray<specialize TFPGMap<string, integer>>([_tmp0]))) then raise
    Exception.Create('expect failed');
end;

var
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp10: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, integer>;
  _tmp5: specialize TFPGMap<string, integer>;
  _tmp6: specialize TFPGMap<string, integer>;
  _tmp7: specialize TArray<integer>;
  _tmp8: specialize TFPGMap<string, integer>;
  _tmp9: specialize TArray<specialize TFPGMap<string, integer>>;
  customer: specialize TArray<specialize TFPGMap<string, integer>>;
  customer_address: specialize TArray<specialize TFPGMap<string, integer>>;
  d: specialize TFPGMap<string, integer>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  item: specialize TArray<specialize TFPGMap<string, integer>>;
  _result: specialize TArray<specialize TFPGMap<string, integer>>;
  store: specialize TArray<specialize TFPGMap<string, integer>>;
  store_sales: specialize TArray<specialize TFPGMap<string, integer>>;
  x: integer;

  generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

function _sliceString(s: string; i, j: integer): string;

var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);

var i,j: integer;
  tmp: T;
  k: Variant;
begin
  for i := 0 to High(arr) - 1 do
    for j := i + 1 to High(arr) do
      if keys[i] > keys[j] then
        begin
          tmp := arr[i];
          arr[i] := arr[j];
          arr[j] := tmp;
          k := keys[i];
          keys[i] := keys[j];
          keys[j] := k;
        end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;

var i: integer;
  s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

begin
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('ss_sold_date_sk', 1);
  _tmp1.AddOrSetData('ss_ite_tmp1_sk', 1);
  _tmp1.AddOrSetData('ss_custo_tmp1er_sk', 1);
  _tmp1.AddOrSetData('ss_store_sk', 1);
  _tmp1.AddOrSetData('ss_ext_sales_price', 100);
  store_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp1]);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('d_date_sk', 1);
  _tmp2.AddOrSetData('d_year', 1999);
  _tmp2.AddOrSetData('d__tmp2oy', 11);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp2]);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('i_ite_tmp3_sk', 1);
  _tmp3.AddOrSetData('i_brand_id', 1);
  _tmp3.AddOrSetData('i_brand', 'B1');
  _tmp3.AddOrSetData('i__tmp3anufact_id', 1);
  _tmp3.AddOrSetData('i__tmp3anufact', 'M1');
  _tmp3.AddOrSetData('i__tmp3anager_id', 10);
  item := specialize TArray<specialize TFPGMap<string, integer>>([_tmp3]);
  _tmp4 := specialize TFPGMap<string, integer>.Create;
  _tmp4.AddOrSetData('c_custo_tmp4er_sk', 1);
  _tmp4.AddOrSetData('c_current_addr_sk', 1);
  customer := specialize TArray<specialize TFPGMap<string, integer>>([_tmp4]);
  _tmp5 := specialize TFPGMap<string, integer>.Create;
  _tmp5.AddOrSetData('ca_address_sk', 1);
  _tmp5.AddOrSetData('ca_zip', '11111');
  customer_address := specialize TArray<specialize TFPGMap<string, integer>>([_tmp5]);
  _tmp6 := specialize TFPGMap<string, integer>.Create;
  _tmp6.AddOrSetData('s_store_sk', 1);
  _tmp6.AddOrSetData('s_zip', '99999');
  store := specialize TArray<specialize TFPGMap<string, integer>>([_tmp6]);
  SetLength(_tmp7, 0);
  for x in g do
    begin
      _tmp7 := Concat(_tmp7, [x.ss_ext_sales_price]);
    end;
  _tmp8 := specialize TFPGMap<string, integer>.Create;
  _tmp8.AddOrSetData('i_brand', g.key.brand);
  _tmp8.AddOrSetData('i_brand_id', g.key.brand_id);
  _tmp8.AddOrSetData('i__tmp8anufact_id', g.key._tmp8an_id);
  _tmp8.AddOrSetData('i__tmp8anufact', g.key._tmp8an);
  _tmp8.AddOrSetData('ext_price', specialize _su_tmp8List<integer>(_t_tmp8p7));
  SetLength(_tmp9, 0);
  SetLength(_tmp10, 0);
  for d in date_dim do
    begin
      for ss in store_sales do
        begin
          if not ((ss.ss_sold_date_sk = d.d_date_sk)) then continue;
          for i in item do
            begin
              if not (((ss.ss_item_sk = i.i_item_sk) and (i.i_manager_id = 10))) then continue;
              for c in customer do
                begin
                  if not ((ss.ss_customer_sk = c.c_customer_sk)) then continue;
                  for ca in customer_address do
                    begin
                      if not ((c.c_current_addr_sk = ca.ca_address_sk)) then continue;
                      for s in store do
                        begin
                          if not (((ss.ss_store_sk = s.s_store_sk) and (_sliceString(ca.ca_zip, 0, 0
                             + 5) <> _sliceString(s.s_zip, 0, 0 + 5)))) then continue;
                          if not (((d.d_moy = 11) and (d.d_year = 1999))) then continue;
                          _tmp9 := Concat(_tmp9, [_tmp8]);
                          _tmp10 := Concat(_tmp10, [specialize TArray<specialize TFPGMap<string,
                                    integer>>([g.key.brand])]);
                        end;
                    end;
                end;
            end;
        end;
    end;
  specialize _sortBy<specialize TFPGMap<string, integer>>(_tmp9, _tmp10);
  _result := _tmp9;
  specialize _json<specialize TArray<specialize TFPGMap<string, integer>>>(_result);
  test_TPCDS_Q19_brand;
end.
