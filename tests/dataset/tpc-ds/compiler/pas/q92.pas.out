// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:32Z
program Q92;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;
type WebSale = record
  ws_item_sk: integer;
  ws_sold_date_sk: integer;
  ws_ext_discount_amt: double;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _avgList<T>(arr: specialize TArray<T>): double;
begin
  if Length(arr) = 0 then exit(0);
  Result := specialize _sumList<T>(arr) / Length(arr);
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, Variant>;
  _tmp5: specialize TArray<Variant>;
  _tmp6: specialize TArray<Variant>;
  _tmp7: double;
  avg_amt: double;
  date_dim: specialize TArray<specialize TFPGMap<string, Variant>>;
  item: specialize TArray<specialize TFPGMap<string, integer>>;
  _result: double;
  sum_amt: double;
  web_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  ws: specialize TFPGMap<string, Variant>;

procedure test_TPCDS_Q92_threshold;
begin
  if not ((_result = 4)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('ws_item_sk', 1);
  _tmp0.AddOrSetData('ws_sold_date_sk', 1);
  _tmp0.AddOrSetData('ws_ext_discount_amt', 1);
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('ws_item_sk', 1);
  _tmp1.AddOrSetData('ws_sold_date_sk', 1);
  _tmp1.AddOrSetData('ws_ext_discount_amt', 1);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('ws_item_sk', 1);
  _tmp2.AddOrSetData('ws_sold_date_sk', 1);
  _tmp2.AddOrSetData('ws_ext_discount_amt', 2);
  web_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('i_item_sk', 1);
  _tmp3.AddOrSetData('i_manufact_id', 1);
  item := specialize TArray<specialize TFPGMap<string, integer>>([_tmp3]);
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('d_date_sk', 1);
  _tmp4.AddOrSetData('d_date', '2000-01-02');
  date_dim := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4]);
  SetLength(_tmp5, 0);
  for ws in web_sales do
  begin
    _tmp5 := Concat(_tmp5, [ws.KeyData['ws_ext_discount_amt']]);
  end;
  sum_amt := specialize _sumList<Variant>(_tmp5);
  SetLength(_tmp6, 0);
  for ws in web_sales do
  begin
    _tmp6 := Concat(_tmp6, [ws.KeyData['ws_ext_discount_amt']]);
  end;
  avg_amt := specialize _avgList<Variant>(_tmp6);
  if (sum_amt > avg_amt * 1.3) then
  begin
    _tmp7 := sum_amt;
  end else
  begin
    _tmp7 := 0;
  end;
  _result := _tmp7;
  specialize _json<double>(_result);
  test_TPCDS_Q92_threshold;
end.
