program main;
{$mode objfpc}

uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser;

type
  generic TArray<T> = array of T;

type Customer = record
  c_customer_sk: integer;
  c_current_addr_sk: integer;
  c_current_cdemo_sk: integer;
end;

type CustomerAddress = record
  ca_address_sk: integer;
  ca_county: string;
end;

type CustomerDemographics = record
  cd_demo_sk: integer;
  cd_gender: string;
  cd_marital_status: string;
  cd_education_status: string;
  cd_purchase_estimate: integer;
  cd_credit_rating: string;
  cd_dep_count: integer;
  cd_dep_employed_count: integer;
  cd_dep_college_count: integer;
end;

type StoreSale = record
  ss_customer_sk: integer;
  ss_sold_date_sk: integer;
end;

type DateDim = record
  d_date_sk: integer;
  d_year: integer;
  d_moy: integer;
end;

generic _Group<T> = record
  Key: Variant;
  Items: specialize TArray<T>;
end;

generic function _countList<T>(arr: specialize TArray<T>): integer;
begin
  Result := Length(arr);
end;

generic function _group_by<T>(src: specialize TArray<T>; keyfn: function(it: T): Variant):
                                                                                          specialize
                                                                                           TArray<
                                                                                          specialize
                                                                                           _Group<T>
                                                                                           >;

var i,j,idx: Integer;
  key: Variant;
  ks: string;
begin
  SetLength(Result, 0);
  for i := 0 to High(src) do
    begin
      key := keyfn(src[i]);
      ks := VarToStr(key);
      idx := -1;
      for j := 0 to High(Result) do
        if VarToStr(Result[j].Key) = ks then
          begin
            idx := j;
            Break;
          end;
      if idx = -1 then
        begin
          idx := Length(Result);
          SetLength(Result, idx + 1);
          Result[idx].Key := key;
          SetLength(Result[idx].Items, 0);
        end;
      SetLength(Result[idx].Items, Length(Result[idx].Items)+1);
      Result[idx].Items[High(Result[idx].Items)] := src[i];
    end;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

var
  _: integer;
  _tmp0: specialize TFPGMap<Variant, integer>;
  _tmp1: specialize TFPGMap<Variant, Variant>;
  _tmp10: specialize TArray<Variant>;
  _tmp11: specialize TArray<Variant>;
  _tmp12: specialize TArray<Variant>;
  _tmp13: specialize TArray<Variant>;
  _tmp14: specialize TFPGMap<Variant, Variant>;
  _tmp15: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp16: specialize TArray<specialize _Group<specialize TFPGMap<string, Variant>>>;
  _tmp17: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp2: specialize TFPGMap<Variant, Variant>;
  _tmp3: specialize TFPGMap<Variant, integer>;
  _tmp4: specialize TFPGMap<Variant, integer>;
  _tmp5: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp6: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp7: specialize TFPGMap<Variant, Variant>;
  _tmp8: specialize TArray<Variant>;
  _tmp9: specialize TArray<Variant>;
  a: specialize TFPGMap<string, Variant>;
  active: specialize TArray<specialize TFPGMap<string, Variant>>;
  c: specialize TFPGMap<string, integer>;
  catalog_sales: specialize TArray<Variant>;
  customer: specialize TArray<specialize TFPGMap<string, integer>>;
  customer_address: specialize TArray<specialize TFPGMap<string, Variant>>;
  customer_demographics: specialize TArray<specialize TFPGMap<string, Variant>>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  ss: specialize TFPGMap<string, integer>;
  store_sales: specialize TArray<specialize TFPGMap<string, integer>>;
  web_sales: specialize TArray<Variant>;

procedure test_TPCDS_Q10_demographics_count;

var
  _tmp18: specialize TFPGMap<Variant, Variant>;
begin
  _tmp18 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp18.AddOrSetData('cd_gender', 'F');
  _tmp18.AddOrSetData('cd__tmp18arital_status', 'M');
  _tmp18.AddOrSetData('cd_education_status', 'College');
  _tmp18.AddOrSetData('cnt1', 1);
  _tmp18.AddOrSetData('cd_purchase_esti_tmp18ate', 5000);
  _tmp18.AddOrSetData('cnt2', 1);
  _tmp18.AddOrSetData('cd_credit_rating', 'Good');
  _tmp18.AddOrSetData('cnt3', 1);
  _tmp18.AddOrSetData('cd_dep_count', 1);
  _tmp18.AddOrSetData('cnt4', 1);
  _tmp18.AddOrSetData('cd_dep_e_tmp18ployed_count', 1);
  _tmp18.AddOrSetData('cnt5', 1);
  _tmp18.AddOrSetData('cd_dep_college_count', 0);
  _tmp18.AddOrSetData('cnt6', 1);
  if not ((_result = specialize TArray<specialize TFPGMap<string, Variant>>([_tmp18]))) then raise
    Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<Variant, integer>.Create;
  _tmp0.AddOrSetData('c_custo_tmp0er_sk', 1);
  _tmp0.AddOrSetData('c_current_addr_sk', 1);
  _tmp0.AddOrSetData('c_current_cde_tmp0o_sk', 1);
  customer := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0]);
  _tmp1 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp1.AddOrSetData('ca_address_sk', 1);
  _tmp1.AddOrSetData('ca_county', 'CountyA');
  customer_address := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp1]);
  _tmp2 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp2.AddOrSetData('cd_de_tmp2o_sk', 1);
  _tmp2.AddOrSetData('cd_gender', 'F');
  _tmp2.AddOrSetData('cd__tmp2arital_status', 'M');
  _tmp2.AddOrSetData('cd_education_status', 'College');
  _tmp2.AddOrSetData('cd_purchase_esti_tmp2ate', 5000);
  _tmp2.AddOrSetData('cd_credit_rating', 'Good');
  _tmp2.AddOrSetData('cd_dep_count', 1);
  _tmp2.AddOrSetData('cd_dep_e_tmp2ployed_count', 1);
  _tmp2.AddOrSetData('cd_dep_college_count', 0);
  customer_demographics := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp2]);
  _tmp3 := specialize TFPGMap<Variant, integer>.Create;
  _tmp3.AddOrSetData('ss_custo_tmp3er_sk', 1);
  _tmp3.AddOrSetData('ss_sold_date_sk', 1);
  store_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp3]);
  web_sales := specialize TArray<Variant>([]);
  catalog_sales := specialize TArray<Variant>([]);
  _tmp4 := specialize TFPGMap<Variant, integer>.Create;
  _tmp4.AddOrSetData('d_date_sk', 1);
  _tmp4.AddOrSetData('d_year', 2000);
  _tmp4.AddOrSetData('d__tmp4oy', 2);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp4]);
  SetLength(_tmp5, 0);
  for ss in store_sales do
    begin
      for d in date_dim do
        begin
          if not ((ss.ss_sold_date_sk = d.d_date_sk)) then continue;
          if not (((((ss.ss_customer_sk = c.c_customer_sk) and (d.d_year = 2000)) and (d.d_moy >= 2)
             ) and (d.d_moy <= 5))) then continue;
          _tmp5 := Concat(_tmp5, [ss]);
        end;
    end;
  SetLength(_tmp6, 0);
  for c in customer do
    begin
      for ca in customer_address do
        begin
          if not (((c.c_current_addr_sk = ca.ca_address_sk) and (ca.ca_county = 'CountyA'))) then
            continue;
          for cd in customer_demographics do
            begin
              if not ((c.c_current_cdemo_sk = cd.cd_demo_sk)) then continue;
              if not (exists(_tmp5)) then continue;
              _tmp6 := Concat(_tmp6, [cd]);
            end;
        end;
    end;
  active := _tmp6;
  _tmp7 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp7.AddOrSetData('gender', a.cd_gender);
  _tmp7.AddOrSetData('_tmp7arital', a.cd__tmp7arital_status);
  _tmp7.AddOrSetData('education', a.cd_education_status);
  _tmp7.AddOrSetData('purchase', a.cd_purchase_esti_tmp7ate);
  _tmp7.AddOrSetData('credit', a.cd_credit_rating);
  _tmp7.AddOrSetData('dep', a.cd_dep_count);
  _tmp7.AddOrSetData('depe_tmp7p', a.cd_dep_e_tmp7ployed_count);
  _tmp7.AddOrSetData('depcol', a.cd_dep_college_count);
  SetLength(_tmp8, 0);
  for _ in g do
    begin
      _tmp8 := Concat(_tmp8, [_]);
    end;
  SetLength(_tmp9, 0);
  for _ in g do
    begin
      _tmp9 := Concat(_tmp9, [_]);
    end;
  SetLength(_tmp10, 0);
  for _ in g do
    begin
      _tmp10 := Concat(_tmp10, [_]);
    end;
  SetLength(_tmp11, 0);
  for _ in g do
    begin
      _tmp11 := Concat(_tmp11, [_]);
    end;
  SetLength(_tmp12, 0);
  for _ in g do
    begin
      _tmp12 := Concat(_tmp12, [_]);
    end;
  SetLength(_tmp13, 0);
  for _ in g do
    begin
      _tmp13 := Concat(_tmp13, [_]);
    end;
  _tmp14 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp14.AddOrSetData('cd_gender', g.key.gender);
  _tmp14.AddOrSetData('cd__tmp14arital_status', g.key._tmp14arital);
  _tmp14.AddOrSetData('cd_education_status', g.key.education);
  _tmp14.AddOrSetData('cnt1', specialize _countList<Variant>(_t_tmp14p8));
  _tmp14.AddOrSetData('cd_purchase_esti_tmp14ate', g.key.purchase);
  _tmp14.AddOrSetData('cnt2', specialize _countList<Variant>(_t_tmp14p9));
  _tmp14.AddOrSetData('cd_credit_rating', g.key.credit);
  _tmp14.AddOrSetData('cnt3', specialize _countList<Variant>(_t_tmp14p10));
  _tmp14.AddOrSetData('cd_dep_count', g.key.dep);
  _tmp14.AddOrSetData('cnt4', specialize _countList<Variant>(_t_tmp14p11));
  _tmp14.AddOrSetData('cd_dep_e_tmp14ployed_count', g.key.depe_tmp14p);
  _tmp14.AddOrSetData('cnt5', specialize _countList<Variant>(_t_tmp14p12));
  _tmp14.AddOrSetData('cd_dep_college_count', g.key.depcol);
  _tmp14.AddOrSetData('cnt6', specialize _countList<Variant>(_t_tmp14p13));
  SetLength(_tmp15, 0);
  for a in active do
    begin
      _tmp15 := Concat(_tmp15, [a]);
    end;
  _tmp16 := specialize _group_by<specialize TFPGMap<string, Variant>>(_tmp15, function(a: specialize
            TFPGMap<string, Variant>): Variant begin Result := _tmp7
end
);
SetLength(_tmp17, 0);
for g in _tmp16 do
  begin
    _tmp17 := Concat(_tmp17, [_tmp14]);
  end;
_result := _tmp17;
specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
test_TPCDS_Q10_demographics_count;
end.
