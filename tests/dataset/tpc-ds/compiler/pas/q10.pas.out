program main;
{$mode objfpc}

uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser;

type
  generic TArray<T> = array of T;

type Customer = record
  c_customer_sk: integer;
  c_current_addr_sk: integer;
  c_current_cdemo_sk: integer;
end;

type CustomerAddress = record
  ca_address_sk: integer;
  ca_county: string;
end;

type CustomerDemographics = record
  cd_demo_sk: integer;
  cd_gender: string;
  cd_marital_status: string;
  cd_education_status: string;
  cd_purchase_estimate: integer;
  cd_credit_rating: string;
  cd_dep_count: integer;
  cd_dep_employed_count: integer;
  cd_dep_college_count: integer;
end;

type StoreSale = record
  ss_customer_sk: integer;
  ss_sold_date_sk: integer;
end;

type DateDim = record
  d_date_sk: integer;
  d_year: integer;
  d_moy: integer;
end;

procedure test_TPCDS_Q10_demographics_count;

var
  _tmp0: specialize TFPGMap<string, integer>;
begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('cd_gender', 'F');
  _tmp0.AddOrSetData('cd__tmp0arital_status', 'M');
  _tmp0.AddOrSetData('cd_education_status', 'College');
  _tmp0.AddOrSetData('cnt1', 1);
  _tmp0.AddOrSetData('cd_purchase_esti_tmp0ate', 5000);
  _tmp0.AddOrSetData('cnt2', 1);
  _tmp0.AddOrSetData('cd_credit_rating', 'Good');
  _tmp0.AddOrSetData('cnt3', 1);
  _tmp0.AddOrSetData('cd_dep_count', 1);
  _tmp0.AddOrSetData('cnt4', 1);
  _tmp0.AddOrSetData('cd_dep_e_tmp0ployed_count', 1);
  _tmp0.AddOrSetData('cnt5', 1);
  _tmp0.AddOrSetData('cd_dep_college_count', 0);
  _tmp0.AddOrSetData('cnt6', 1);
  if not ((_result = specialize TArray<specialize TFPGMap<string, integer>>([_tmp0]))) then raise
    Exception.Create('expect failed');
end;

var
  _: integer;
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp10: specialize TArray<integer>;
  _tmp11: specialize TArray<integer>;
  _tmp12: specialize TArray<integer>;
  _tmp13: specialize TArray<integer>;
  _tmp14: specialize TArray<integer>;
  _tmp15: specialize TFPGMap<string, integer>;
  _tmp16: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp17: specialize TArray<specialize _Group<specialize TFPGMap<string, integer>>>;
  _tmp18: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, integer>;
  _tmp5: specialize TFPGMap<string, integer>;
  _tmp6: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp7: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp8: specialize TFPGMap<string, integer>;
  _tmp9: specialize TArray<integer>;
  a: specialize TFPGMap<string, integer>;
  active: specialize TArray<specialize TFPGMap<string, integer>>;
  c: specialize TFPGMap<string, integer>;
  catalog_sales: specialize TArray<integer>;
  customer: specialize TArray<specialize TFPGMap<string, integer>>;
  customer_address: specialize TArray<specialize TFPGMap<string, integer>>;
  customer_demographics: specialize TArray<specialize TFPGMap<string, integer>>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  _result: specialize TArray<specialize TFPGMap<string, integer>>;
  ss: specialize TFPGMap<string, integer>;
  store_sales: specialize TArray<specialize TFPGMap<string, integer>>;
  web_sales: specialize TArray<integer>;

  generic _Group<T> = record
    Key: Variant;
    Items: specialize TArray<T>;
  end;

  generic function _countList<T>(arr: specialize TArray<T>): integer;
begin
  Result := Length(arr);
end;

generic function _group_by<T>(src: specialize TArray<T>; keyfn: function(it: T): Variant):
                                                                                          specialize
                                                                                           TArray<
                                                                                          specialize
                                                                                           _Group<T>
                                                                                           >;

var i,j,idx: Integer;
  key: Variant;
  ks: string;
begin
  SetLength(Result, 0);
  for i := 0 to High(src) do
    begin
      key := keyfn(src[i]);
      ks := VarToStr(key);
      idx := -1;
      for j := 0 to High(Result) do
        if VarToStr(Result[j].Key) = ks then
          begin
            idx := j;
            Break;
          end;
      if idx = -1 then
        begin
          idx := Length(Result);
          SetLength(Result, idx + 1);
          Result[idx].Key := key;
          SetLength(Result[idx].Items, 0);
        end;
      SetLength(Result[idx].Items, Length(Result[idx].Items)+1);
      Result[idx].Items[High(Result[idx].Items)] := src[i];
    end;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

begin
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('c_custo_tmp1er_sk', 1);
  _tmp1.AddOrSetData('c_current_addr_sk', 1);
  _tmp1.AddOrSetData('c_current_cde_tmp1o_sk', 1);
  customer := specialize TArray<specialize TFPGMap<string, integer>>([_tmp1]);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('ca_address_sk', 1);
  _tmp2.AddOrSetData('ca_county', 'CountyA');
  customer_address := specialize TArray<specialize TFPGMap<string, integer>>([_tmp2]);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('cd_de_tmp3o_sk', 1);
  _tmp3.AddOrSetData('cd_gender', 'F');
  _tmp3.AddOrSetData('cd__tmp3arital_status', 'M');
  _tmp3.AddOrSetData('cd_education_status', 'College');
  _tmp3.AddOrSetData('cd_purchase_esti_tmp3ate', 5000);
  _tmp3.AddOrSetData('cd_credit_rating', 'Good');
  _tmp3.AddOrSetData('cd_dep_count', 1);
  _tmp3.AddOrSetData('cd_dep_e_tmp3ployed_count', 1);
  _tmp3.AddOrSetData('cd_dep_college_count', 0);
  customer_demographics := specialize TArray<specialize TFPGMap<string, integer>>([_tmp3]);
  _tmp4 := specialize TFPGMap<string, integer>.Create;
  _tmp4.AddOrSetData('ss_custo_tmp4er_sk', 1);
  _tmp4.AddOrSetData('ss_sold_date_sk', 1);
  store_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp4]);
  web_sales := specialize TArray<integer>([]);
  catalog_sales := specialize TArray<integer>([]);
  _tmp5 := specialize TFPGMap<string, integer>.Create;
  _tmp5.AddOrSetData('d_date_sk', 1);
  _tmp5.AddOrSetData('d_year', 2000);
  _tmp5.AddOrSetData('d__tmp5oy', 2);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp5]);
  SetLength(_tmp6, 0);
  for ss in store_sales do
    begin
      for d in date_dim do
        begin
          if not ((ss.ss_sold_date_sk = d.d_date_sk)) then continue;
          if not (((((ss.ss_customer_sk = c.c_customer_sk) and (d.d_year = 2000)) and (d.d_moy >= 2)
             ) and (d.d_moy <= 5))) then continue;
          _tmp6 := Concat(_tmp6, [ss]);
        end;
    end;
  SetLength(_tmp7, 0);
  for c in customer do
    begin
      for ca in customer_address do
        begin
          if not (((c.c_current_addr_sk = ca.ca_address_sk) and (ca.ca_county = 'CountyA'))) then
            continue;
          for cd in customer_demographics do
            begin
              if not ((c.c_current_cdemo_sk = cd.cd_demo_sk)) then continue;
              if not (exists(_tmp6)) then continue;
              _tmp7 := Concat(_tmp7, [cd]);
            end;
        end;
    end;
  active := _tmp7;
  _tmp8 := specialize TFPGMap<string, integer>.Create;
  _tmp8.AddOrSetData('gender', a.cd_gender);
  _tmp8.AddOrSetData('_tmp8arital', a.cd__tmp8arital_status);
  _tmp8.AddOrSetData('education', a.cd_education_status);
  _tmp8.AddOrSetData('purchase', a.cd_purchase_esti_tmp8ate);
  _tmp8.AddOrSetData('credit', a.cd_credit_rating);
  _tmp8.AddOrSetData('dep', a.cd_dep_count);
  _tmp8.AddOrSetData('depe_tmp8p', a.cd_dep_e_tmp8ployed_count);
  _tmp8.AddOrSetData('depcol', a.cd_dep_college_count);
  SetLength(_tmp9, 0);
  for _ in g do
    begin
      _tmp9 := Concat(_tmp9, [_]);
    end;
  SetLength(_tmp10, 0);
  for _ in g do
    begin
      _tmp10 := Concat(_tmp10, [_]);
    end;
  SetLength(_tmp11, 0);
  for _ in g do
    begin
      _tmp11 := Concat(_tmp11, [_]);
    end;
  SetLength(_tmp12, 0);
  for _ in g do
    begin
      _tmp12 := Concat(_tmp12, [_]);
    end;
  SetLength(_tmp13, 0);
  for _ in g do
    begin
      _tmp13 := Concat(_tmp13, [_]);
    end;
  SetLength(_tmp14, 0);
  for _ in g do
    begin
      _tmp14 := Concat(_tmp14, [_]);
    end;
  _tmp15 := specialize TFPGMap<string, integer>.Create;
  _tmp15.AddOrSetData('cd_gender', g.key.gender);
  _tmp15.AddOrSetData('cd__tmp15arital_status', g.key._tmp15arital);
  _tmp15.AddOrSetData('cd_education_status', g.key.education);
  _tmp15.AddOrSetData('cnt1', specialize _countList<integer>(_t_tmp15p9));
  _tmp15.AddOrSetData('cd_purchase_esti_tmp15ate', g.key.purchase);
  _tmp15.AddOrSetData('cnt2', specialize _countList<integer>(_t_tmp15p10));
  _tmp15.AddOrSetData('cd_credit_rating', g.key.credit);
  _tmp15.AddOrSetData('cnt3', specialize _countList<integer>(_t_tmp15p11));
  _tmp15.AddOrSetData('cd_dep_count', g.key.dep);
  _tmp15.AddOrSetData('cnt4', specialize _countList<integer>(_t_tmp15p12));
  _tmp15.AddOrSetData('cd_dep_e_tmp15ployed_count', g.key.depe_tmp15p);
  _tmp15.AddOrSetData('cnt5', specialize _countList<integer>(_t_tmp15p13));
  _tmp15.AddOrSetData('cd_dep_college_count', g.key.depcol);
  _tmp15.AddOrSetData('cnt6', specialize _countList<integer>(_t_tmp15p14));
  SetLength(_tmp16, 0);
  for a in active do
    begin
      _tmp16 := Concat(_tmp16, [a]);
    end;
  _tmp17 := specialize _group_by<specialize TFPGMap<string, integer>>(_tmp16, function(a: specialize
            TFPGMap<string, integer>): Variant begin Result := _tmp8
end
);
SetLength(_tmp18, 0);
for g in _tmp17 do
  begin
    _tmp18 := Concat(_tmp18, [_tmp15]);
  end;
_result := _tmp18;
specialize _json<specialize TArray<specialize TFPGMap<string, integer>>>(_result);
test_TPCDS_Q10_demographics_count;
end.
