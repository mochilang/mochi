program main;
{$mode objfpc}

uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser;

type
  generic TArray<T> = array of T;

type CatalogSale = record
  cs_bill_customer_sk: integer;
  cs_sales_price: double;
  cs_sold_date_sk: integer;
end;

type Customer = record
  c_customer_sk: integer;
  c_current_addr_sk: integer;
end;

type CustomerAddress = record
  ca_address_sk: integer;
  ca_zip: string;
  ca_state: string;
end;

type DateDim = record
  d_date_sk: integer;
  d_qoy: integer;
  d_year: integer;
end;

procedure test_TPCDS_Q15_zip;

var
  _tmp0: specialize TFPGMap<string, integer>;
begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('ca_zip', '85669');
  _tmp0.AddOrSetData('su_tmp0_sales', 600);
  if not ((filtered = specialize TArray<specialize TFPGMap<string, integer>>([_tmp0]))) then raise
    Exception.Create('expect failed');
end;

var
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, integer>;
  _tmp5: specialize TArray<integer>;
  _tmp6: specialize TFPGMap<string, integer>;
  _tmp7: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp8: specialize TArray<Variant>;
  catalog_sales: specialize TArray<specialize TFPGMap<string, integer>>;
  cs: specialize TFPGMap<string, integer>;
  customer: specialize TArray<specialize TFPGMap<string, integer>>;
  customer_address: specialize TArray<specialize TFPGMap<string, integer>>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  filtered: specialize TArray<specialize TFPGMap<string, integer>>;
  x: integer;

  generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

function _sliceString(s: string; i, j: integer): string;

var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);

var i,j: integer;
  tmp: T;
  k: Variant;
begin
  for i := 0 to High(arr) - 1 do
    for j := i + 1 to High(arr) do
      if keys[i] > keys[j] then
        begin
          tmp := arr[i];
          arr[i] := arr[j];
          arr[j] := tmp;
          k := keys[i];
          keys[i] := keys[j];
          keys[j] := k;
        end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;

var i: integer;
  s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

begin
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('cs_bill_custo_tmp1er_sk', 1);
  _tmp1.AddOrSetData('cs_sales_price', 600);
  _tmp1.AddOrSetData('cs_sold_date_sk', 1);
  catalog_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp1]);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('c_custo_tmp2er_sk', 1);
  _tmp2.AddOrSetData('c_current_addr_sk', 1);
  customer := specialize TArray<specialize TFPGMap<string, integer>>([_tmp2]);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('ca_address_sk', 1);
  _tmp3.AddOrSetData('ca_zip', '85669');
  _tmp3.AddOrSetData('ca_state', 'CA');
  customer_address := specialize TArray<specialize TFPGMap<string, integer>>([_tmp3]);
  _tmp4 := specialize TFPGMap<string, integer>.Create;
  _tmp4.AddOrSetData('d_date_sk', 1);
  _tmp4.AddOrSetData('d_qoy', 1);
  _tmp4.AddOrSetData('d_year', 2000);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp4]);
  SetLength(_tmp5, 0);
  for x in g do
    begin
      _tmp5 := Concat(_tmp5, [x.cs_sales_price]);
    end;
  _tmp6 := specialize TFPGMap<string, integer>.Create;
  _tmp6.AddOrSetData('ca_zip', g.key.zip);
  _tmp6.AddOrSetData('su_tmp6_sales', specialize _su_tmp6List<integer>(_t_tmp6p5));
  SetLength(_tmp7, 0);
  SetLength(_tmp8, 0);
  for cs in catalog_sales do
    begin
      for c in customer do
        begin
          if not ((cs.cs_bill_customer_sk = c.c_customer_sk)) then continue;
          for ca in customer_address do
            begin
              if not ((c.c_current_addr_sk = ca.ca_address_sk)) then continue;
              for d in date_dim do
                begin
                  if not ((cs.cs_sold_date_sk = d.d_date_sk)) then continue;
                  if not ((((((_sliceString(ca.ca_zip, 0, 0 + 5) in specialize TArray<specialize
                     TFPGMap<string, integer>>(['85669', '86197', '88274', '83405', '86475', '85392'
                     , '85460', '80348', '81792'])) or (specialize TArray<specialize TFPGMap<string,
                     integer>>(['CA', 'WA', 'GA']).IndexOf(ca.ca_state) >= 0)) or (cs.cs_sales_price
                     > 500)) and (d.d_qoy = 1)) and (d.d_year = 2000))) then continue;
                  _tmp7 := Concat(_tmp7, [_tmp6]);
                  _tmp8 := Concat(_tmp8, [g.key.zip]);
                end;
            end;
        end;
    end;
  specialize _sortBy<specialize TFPGMap<string, integer>>(_tmp7, _tmp8);
  filtered := _tmp7;
  specialize _json<specialize TArray<specialize TFPGMap<string, integer>>>(filtered);
  test_TPCDS_Q15_zip;
end.
