program main;
{$mode objfpc}

uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser;

type
  generic TArray<T> = array of T;

  generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

function _sliceString(s: string; i, j: integer): string;

var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);

var i,j: integer;
  tmp: T;
  k: Variant;
begin
  for i := 0 to High(arr) - 1 do
    for j := i + 1 to High(arr) do
      if keys[i] > keys[j] then
        begin
          tmp := arr[i];
          arr[i] := arr[j];
          arr[j] := tmp;
          k := keys[i];
          keys[i] := keys[j];
          keys[j] := k;
        end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;

var i: integer;
  s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<Variant, Variant>;
  _tmp1: specialize TFPGMap<Variant, integer>;
  _tmp2: specialize TFPGMap<Variant, Variant>;
  _tmp3: specialize TFPGMap<Variant, Variant>;
  _tmp4: specialize TFPGMap<Variant, Variant>;
  _tmp5: specialize TArray<Variant>;
  _tmp6: specialize TFPGMap<Variant, Variant>;
  _tmp7: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp8: specialize TArray<Variant>;
  customer: specialize TArray<specialize TFPGMap<string, Variant>>;
  customer_address: specialize TArray<specialize TFPGMap<string, Variant>>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  ss: specialize TFPGMap<string, Variant>;
  store: specialize TArray<specialize TFPGMap<string, Variant>>;
  store_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: integer;
  zip_list: specialize TArray<string>;

procedure test_TPCDS_Q8_result;

var
  _tmp9: specialize TFPGMap<Variant, Variant>;
begin
  _tmp9 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp9.AddOrSetData('s_store_na_tmp9e', 'Store1');
  _tmp9.AddOrSetData('net_profit', 10);
  if not ((_result = specialize TArray<specialize TFPGMap<string, Variant>>([_tmp9]))) then raise
    Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp0.AddOrSetData('ss_store_sk', 1);
  _tmp0.AddOrSetData('ss_sold_date_sk', 1);
  _tmp0.AddOrSetData('ss_net_profit', 10);
  store_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0]);
  _tmp1 := specialize TFPGMap<Variant, integer>.Create;
  _tmp1.AddOrSetData('d_date_sk', 1);
  _tmp1.AddOrSetData('d_qoy', 1);
  _tmp1.AddOrSetData('d_year', 1998);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp1]);
  _tmp2 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp2.AddOrSetData('s_store_sk', 1);
  _tmp2.AddOrSetData('s_store_na_tmp2e', 'Store1');
  _tmp2.AddOrSetData('s_zip', '12345');
  store := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp2]);
  _tmp3 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp3.AddOrSetData('ca_address_sk', 1);
  _tmp3.AddOrSetData('ca_zip', '12345');
  customer_address := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp3]);
  _tmp4 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp4.AddOrSetData('c_custo_tmp4er_sk', 1);
  _tmp4.AddOrSetData('c_current_addr_sk', 1);
  _tmp4.AddOrSetData('c_preferred_cust_flag', 'Y');
  customer := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4]);
  _sliceString('zip', 0, 0 + 2);
  zip_list := specialize TArray<string>(['12345']);
  SetLength(_tmp5, 0);
  for x in g do
    begin
      _tmp5 := Concat(_tmp5, [x.ss.ss_net_profit]);
    end;
  _tmp6 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp6.AddOrSetData('s_store_na_tmp6e', g.key);
  _tmp6.AddOrSetData('net_profit', specialize _su_tmp6List<Variant>(_t_tmp6p5));
  SetLength(_tmp7, 0);
  SetLength(_tmp8, 0);
  for ss in store_sales do
    begin
      for d in date_dim do
        begin
          if not ((((ss.ss_sold_date_sk = d.d_date_sk) and (d.d_qoy = 1)) and (d.d_year = 1998)))
            then continue;
          for s in store do
            begin
              if not ((ss.ss_store_sk = s.s_store_sk)) then continue;
              for ca in customer_address do
                begin
                  if not ((_sliceString(s.s_zip, 0, 0 + 2) = _sliceString(ca.ca_zip, 0, 0 + 2)))
                    then continue;
                  for c in customer do
                    begin
                      if not (((ca.ca_address_sk = c.c_current_addr_sk) and (c.c_preferred_cust_flag
                         = 'Y'))) then continue;
                      if not ((_sliceString(ca.ca_zip, 0, 0 + 5) in zip_list)) then continue;
                      _tmp7 := Concat(_tmp7, [_tmp6]);
                      _tmp8 := Concat(_tmp8, [g.key]);
                    end;
                end;
            end;
        end;
    end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp7, _tmp8);
  _result := _tmp7;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q8_result;
end.
