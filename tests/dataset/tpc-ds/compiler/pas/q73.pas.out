// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:30Z
program Q73;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);
var i,j: integer; tmp: T; k: Variant;
begin
  for i := 0 to High(arr) - 1 do
  for j := i + 1 to High(arr) do
    if keys[i] > keys[j] then
    begin
      tmp := arr[i]; arr[i] := arr[j]; arr[j] := tmp;
      k := keys[i]; keys[i] := keys[j]; keys[j] := k;
    end;
end;

var
  _tmp0: specialize TFPGMap<string, integer>;
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TFPGMap<string, Variant>;
  _tmp5: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp6: specialize TFPGMap<string, Variant>;
  _tmp7: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp8: specialize TArray<Variant>;
  _tmp9: specialize TFPGMap<string, Variant>;
  c: specialize TFPGMap<string, Variant>;
  customer: specialize TArray<specialize TFPGMap<string, Variant>>;
  d: specialize TFPGMap<string, integer>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  g: specialize TFPGMap<string, Variant>;
  groups: specialize TArray<specialize TFPGMap<string, Variant>>;
  hd: specialize TFPGMap<string, Variant>;
  household_demographics: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  s: specialize TFPGMap<string, Variant>;
  ss: specialize TFPGMap<string, integer>;
  store: specialize TArray<specialize TFPGMap<string, Variant>>;
  store_sales: specialize TArray<specialize TFPGMap<string, integer>>;

procedure test_TPCDS_Q73_simplified;
var
  _tmp10: specialize TFPGMap<string, Variant>;
begin
  _tmp10 := specialize TFPGMap<string, Variant>.Create;
  _tmp10.AddOrSetData('c_last_name', 'Smith');
  _tmp10.AddOrSetData('c_first_name', 'Alice');
  _tmp10.AddOrSetData('c_salutation', 'Ms.');
  _tmp10.AddOrSetData('c_preferred_cust_flag', 'Y');
  _tmp10.AddOrSetData('ss_ticket_number', 1);
  _tmp10.AddOrSetData('cnt', 1);
  if not ((_result = specialize TArray<_>([_tmp10]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('ss_ticket_number', 1);
  _tmp0.AddOrSetData('ss_customer_sk', 1);
  _tmp0.AddOrSetData('ss_sold_date_sk', 1);
  _tmp0.AddOrSetData('ss_store_sk', 1);
  _tmp0.AddOrSetData('ss_hdemo_sk', 1);
  store_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0]);
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('d_date_sk', 1);
  _tmp1.AddOrSetData('d_dom', 1);
  _tmp1.AddOrSetData('d_year', 1998);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp1]);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('s_store_sk', 1);
  _tmp2.AddOrSetData('s_county', 'A');
  store := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp2]);
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('hd_demo_sk', 1);
  _tmp3.AddOrSetData('hd_buy_potential', '1001-5000');
  _tmp3.AddOrSetData('hd_vehicle_count', 2);
  _tmp3.AddOrSetData('hd_dep_count', 3);
  household_demographics := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp3]);
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('c_customer_sk', 1);
  _tmp4.AddOrSetData('c_last_name', 'Smith');
  _tmp4.AddOrSetData('c_first_name', 'Alice');
  _tmp4.AddOrSetData('c_salutation', 'Ms.');
  _tmp4.AddOrSetData('c_preferred_cust_flag', 'Y');
  customer := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4]);
  SetLength(_tmp5, 0);
  for ss in store_sales do
  begin
    for d in date_dim do
    begin
      if not ((d.KeyData['d_date_sk'] = ss.KeyData['ss_sold_date_sk'])) then continue;
      for s in store do
      begin
        if not ((s.KeyData['s_store_sk'] = ss.KeyData['ss_store_sk'])) then continue;
        for hd in household_demographics do
        begin
          if not ((hd.KeyData['hd_demo_sk'] = ss.KeyData['ss_hdemo_sk'])) then continue;
          if not ((((((((d.KeyData['d_dom'] >= 1) and (d.KeyData['d_dom'] <= 2)) and ((hd.KeyData['hd_buy_potential'] = '1001-5000') or (hd.KeyData['hd_buy_potential'] = '0-500'))) and (hd.KeyData['hd_vehicle_count'] > 0)) and (hd.KeyData['hd_dep_count'] / hd.KeyData['hd_vehicle_count'] > 1)) and (((d.KeyData['d_year'] = 1998) or (d.KeyData['d_year'] = 1999)) or (d.KeyData['d_year'] = 2000))) and (s.KeyData['s_county'] = 'A'))) then continue;
          _tmp6 := specialize TFPGMap<string, Variant>.Create;
          _tmp6.AddOrSetData('key', g.KeyData['key']);
          _tmp6.AddOrSetData('cnt', Length(g));
          _tmp5 := Concat(_tmp5, [_tmp6]);
        end;
      end;
    end;
  end;
  groups := _tmp5;
  SetLength(_tmp7, 0);
  SetLength(_tmp8, 0);
  for g in groups do
  begin
    for c in customer do
    begin
      if not ((c.KeyData['c_customer_sk'] = g.KeyData['key'].cust)) then continue;
      if not (((g.KeyData['cnt'] >= 1) and (g.KeyData['cnt'] <= 5))) then continue;
      _tmp9 := specialize TFPGMap<string, Variant>.Create;
      _tmp9.AddOrSetData('c_last_name', c.KeyData['c_last_name']);
      _tmp9.AddOrSetData('c_first_name', c.KeyData['c_first_name']);
      _tmp9.AddOrSetData('c_salutation', c.KeyData['c_salutation']);
      _tmp9.AddOrSetData('c_preferred_cust_flag', c.KeyData['c_preferred_cust_flag']);
      _tmp9.AddOrSetData('ss_ticket_number', g.KeyData['key'].ticket);
      _tmp9.AddOrSetData('cnt', g.KeyData['cnt']);
      _tmp7 := Concat(_tmp7, [_tmp9]);
      _tmp8 := Concat(_tmp8, [specialize TArray<specialize TFPGMap<string, Variant>>([-g.KeyData['cnt'], c.KeyData['c_last_name']])]);
    end;
  end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp7, _tmp8);
  _result := _tmp7;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q73_simplified;
end.
