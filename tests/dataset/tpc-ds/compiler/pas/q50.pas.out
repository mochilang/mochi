// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:26Z
program Q50;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic _Group<K,T> = record
  Key: K;
  Items: specialize TArray<T>;
end;

generic function _countList<T>(arr: specialize TArray<T>): integer;
begin
  Result := Length(arr);
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

var
  _tmp0: specialize TFPGMap<string, integer>;
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp10: specialize TFPGMap<string, integer>;
  _tmp11: specialize TFPGMap<string, integer>;
  _tmp12: specialize TFPGMap<string, integer>;
  _tmp13: specialize TFPGMap<string, integer>;
  _tmp14: specialize TFPGMap<string, integer>;
  _tmp15: specialize TFPGMap<string, integer>;
  _tmp16: specialize TFPGMap<string, Variant>;
  _tmp17: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp18: specialize TFPGMap<string, Variant>;
  _tmp19: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp20: specialize TArray<specialize _Group<Variant, specialize TFPGMap<string, Variant>>>;
  _tmp21: Variant;
  _tmp22: string;
  _tmp23: integer;
  _tmp24: integer;
  _tmp25: specialize _Group<Variant, specialize TFPGMap<string, Variant>>;
  _tmp26: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp27: specialize TFPGMap<string, Variant>;
  _tmp28: specialize TArray<integer>;
  _tmp29: specialize TArray<integer>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp30: specialize TArray<integer>;
  _tmp31: specialize TArray<integer>;
  _tmp32: specialize TArray<integer>;
  _tmp4: specialize TFPGMap<string, integer>;
  _tmp5: specialize TFPGMap<string, integer>;
  _tmp6: specialize TFPGMap<string, integer>;
  _tmp7: specialize TFPGMap<string, integer>;
  _tmp8: specialize TFPGMap<string, integer>;
  _tmp9: specialize TFPGMap<string, integer>;
  d1: specialize TFPGMap<string, integer>;
  d2: specialize TFPGMap<string, integer>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  j: specialize TFPGMap<string, Variant>;
  joined: specialize TArray<specialize TFPGMap<string, Variant>>;
  month: integer;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  s: specialize TFPGMap<string, Variant>;
  sr: specialize TFPGMap<string, integer>;
  ss: specialize TFPGMap<string, integer>;
  store: specialize TArray<specialize TFPGMap<string, Variant>>;
  store_returns: specialize TArray<specialize TFPGMap<string, integer>>;
  store_sales: specialize TArray<specialize TFPGMap<string, integer>>;
  x: integer;
  year: integer;

procedure test_TPCDS_Q50_simplified;
var
  _tmp33: specialize TFPGMap<string, Variant>;
begin
  _tmp33 := specialize TFPGMap<string, Variant>.Create;
  _tmp33.AddOrSetData('s_store_name', 'Main');
  _tmp33.AddOrSetData('d30', 1);
  _tmp33.AddOrSetData('d31_60', 1);
  _tmp33.AddOrSetData('d61_90', 1);
  _tmp33.AddOrSetData('d91_120', 1);
  _tmp33.AddOrSetData('d_gt_120', 1);
  if not ((_result = specialize TArray<_>([_tmp33]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('ticket', 1);
  _tmp0.AddOrSetData('item', 101);
  _tmp0.AddOrSetData('sold', 1);
  _tmp0.AddOrSetData('customer', 1);
  _tmp0.AddOrSetData('store', 1);
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('ticket', 2);
  _tmp1.AddOrSetData('item', 102);
  _tmp1.AddOrSetData('sold', 1);
  _tmp1.AddOrSetData('customer', 1);
  _tmp1.AddOrSetData('store', 1);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('ticket', 3);
  _tmp2.AddOrSetData('item', 103);
  _tmp2.AddOrSetData('sold', 1);
  _tmp2.AddOrSetData('customer', 1);
  _tmp2.AddOrSetData('store', 1);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('ticket', 4);
  _tmp3.AddOrSetData('item', 104);
  _tmp3.AddOrSetData('sold', 1);
  _tmp3.AddOrSetData('customer', 1);
  _tmp3.AddOrSetData('store', 1);
  _tmp4 := specialize TFPGMap<string, integer>.Create;
  _tmp4.AddOrSetData('ticket', 5);
  _tmp4.AddOrSetData('item', 105);
  _tmp4.AddOrSetData('sold', 1);
  _tmp4.AddOrSetData('customer', 1);
  _tmp4.AddOrSetData('store', 1);
  store_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0, _tmp1, _tmp2, _tmp3, _tmp4]);
  _tmp5 := specialize TFPGMap<string, integer>.Create;
  _tmp5.AddOrSetData('ticket', 1);
  _tmp5.AddOrSetData('item', 101);
  _tmp5.AddOrSetData('returned', 16);
  _tmp5.AddOrSetData('customer', 1);
  _tmp6 := specialize TFPGMap<string, integer>.Create;
  _tmp6.AddOrSetData('ticket', 2);
  _tmp6.AddOrSetData('item', 102);
  _tmp6.AddOrSetData('returned', 46);
  _tmp6.AddOrSetData('customer', 1);
  _tmp7 := specialize TFPGMap<string, integer>.Create;
  _tmp7.AddOrSetData('ticket', 3);
  _tmp7.AddOrSetData('item', 103);
  _tmp7.AddOrSetData('returned', 76);
  _tmp7.AddOrSetData('customer', 1);
  _tmp8 := specialize TFPGMap<string, integer>.Create;
  _tmp8.AddOrSetData('ticket', 4);
  _tmp8.AddOrSetData('item', 104);
  _tmp8.AddOrSetData('returned', 111);
  _tmp8.AddOrSetData('customer', 1);
  _tmp9 := specialize TFPGMap<string, integer>.Create;
  _tmp9.AddOrSetData('ticket', 5);
  _tmp9.AddOrSetData('item', 105);
  _tmp9.AddOrSetData('returned', 151);
  _tmp9.AddOrSetData('customer', 1);
  store_returns := specialize TArray<specialize TFPGMap<string, integer>>([_tmp5, _tmp6, _tmp7, _tmp8, _tmp9]);
  _tmp10 := specialize TFPGMap<string, integer>.Create;
  _tmp10.AddOrSetData('d_date_sk', 1);
  _tmp10.AddOrSetData('d_year', 2001);
  _tmp10.AddOrSetData('d_moy', 7);
  _tmp11 := specialize TFPGMap<string, integer>.Create;
  _tmp11.AddOrSetData('d_date_sk', 16);
  _tmp11.AddOrSetData('d_year', 2001);
  _tmp11.AddOrSetData('d_moy', 8);
  _tmp12 := specialize TFPGMap<string, integer>.Create;
  _tmp12.AddOrSetData('d_date_sk', 46);
  _tmp12.AddOrSetData('d_year', 2001);
  _tmp12.AddOrSetData('d_moy', 8);
  _tmp13 := specialize TFPGMap<string, integer>.Create;
  _tmp13.AddOrSetData('d_date_sk', 76);
  _tmp13.AddOrSetData('d_year', 2001);
  _tmp13.AddOrSetData('d_moy', 8);
  _tmp14 := specialize TFPGMap<string, integer>.Create;
  _tmp14.AddOrSetData('d_date_sk', 111);
  _tmp14.AddOrSetData('d_year', 2001);
  _tmp14.AddOrSetData('d_moy', 8);
  _tmp15 := specialize TFPGMap<string, integer>.Create;
  _tmp15.AddOrSetData('d_date_sk', 151);
  _tmp15.AddOrSetData('d_year', 2001);
  _tmp15.AddOrSetData('d_moy', 8);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp10, _tmp11, _tmp12, _tmp13, _tmp14, _tmp15]);
  _tmp16 := specialize TFPGMap<string, Variant>.Create;
  _tmp16.AddOrSetData('s_store_sk', 1);
  _tmp16.AddOrSetData('s_store_name', 'Main');
  _tmp16.AddOrSetData('s_company_id', 1);
  _tmp16.AddOrSetData('s_street_number', '1');
  _tmp16.AddOrSetData('s_street_name', 'Main');
  _tmp16.AddOrSetData('s_street_type', 'St');
  _tmp16.AddOrSetData('s_suite_number', '100');
  _tmp16.AddOrSetData('s_city', 'City');
  _tmp16.AddOrSetData('s_county', 'County');
  _tmp16.AddOrSetData('s_state', 'CA');
  _tmp16.AddOrSetData('s_zip', '12345');
  store := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp16]);
  year := 2001;
  month := 8;
  SetLength(_tmp17, 0);
  for ss in store_sales do
  begin
    for sr in store_returns do
    begin
      if not ((((ss.KeyData['ticket'] = sr.KeyData['ticket']) and (ss.KeyData['item'] = sr.KeyData['item'])) and (ss.KeyData['customer'] = sr.KeyData['customer']))) then continue;
      for d1 in date_dim do
      begin
        if not ((ss.KeyData['sold'] = d1.KeyData['d_date_sk'])) then continue;
        for d2 in date_dim do
        begin
          if not ((((sr.KeyData['returned'] = d2.KeyData['d_date_sk']) and (d2.KeyData['d_year'] = year)) and (d2.KeyData['d_moy'] = month))) then continue;
          for s in store do
          begin
            if not ((ss.KeyData['store'] = s.KeyData['s_store_sk'])) then continue;
            _tmp18 := specialize TFPGMap<string, Variant>.Create;
            _tmp18.AddOrSetData('s', s);
            _tmp18.AddOrSetData('diff', sr.KeyData['returned'] - ss.KeyData['sold']);
            _tmp17 := Concat(_tmp17, [_tmp18]);
          end;
        end;
      end;
    end;
  end;
  joined := _tmp17;
  SetLength(_tmp19, 0);
  for j in joined do
  begin
    _tmp19 := Concat(_tmp19, [j]);
  end;
  SetLength(_tmp20, 0);
  for j in _tmp19 do
  begin
    _tmp21 := j.KeyData['s'];
    _tmp22 := VarToStr(_tmp21);
    _tmp23 := -1;
    for _tmp24 := 0 to High(_tmp20) do
      if VarToStr(_tmp20[_tmp24].Key) = _tmp22 then begin _tmp23 := _tmp24; Break; end;
    if _tmp23 = -1 then
    begin
      _tmp23 := Length(_tmp20);
      SetLength(_tmp20, _tmp23 + 1);
      _tmp20[_tmp23].Key := _tmp21;
      SetLength(_tmp20[_tmp23].Items, 0);
    end;
    SetLength(_tmp20[_tmp23].Items, Length(_tmp20[_tmp23].Items)+1);
    _tmp20[_tmp23].Items[High(_tmp20[_tmp23].Items)] := j;
  end;
  SetLength(_tmp26, 0);
  for _tmp25 in _tmp20 do
  begin
    _tmp27 := specialize TFPGMap<string, Variant>.Create;
    _tmp27.AddOrSetData('s_store_name', g.key.s_store_name);
    SetLength(_tmp28, 0);
    for x in g do
    begin
      if not ((x.diff <= 30)) then continue;
      _tmp28 := Concat(_tmp28, [1]);
    end;
    _tmp27.AddOrSetData('d30', specialize _countList<integer>(_tmp28));
    SetLength(_tmp29, 0);
    for x in g do
    begin
      if not (((x.diff > 30) and (x.diff <= 60))) then continue;
      _tmp29 := Concat(_tmp29, [1]);
    end;
    _tmp27.AddOrSetData('d31_60', specialize _countList<integer>(_tmp29));
    SetLength(_tmp30, 0);
    for x in g do
    begin
      if not (((x.diff > 60) and (x.diff <= 90))) then continue;
      _tmp30 := Concat(_tmp30, [1]);
    end;
    _tmp27.AddOrSetData('d61_90', specialize _countList<integer>(_tmp30));
    SetLength(_tmp31, 0);
    for x in g do
    begin
      if not (((x.diff > 90) and (x.diff <= 120))) then continue;
      _tmp31 := Concat(_tmp31, [1]);
    end;
    _tmp27.AddOrSetData('d91_120', specialize _countList<integer>(_tmp31));
    SetLength(_tmp32, 0);
    for x in g do
    begin
      if not ((x.diff > 120)) then continue;
      _tmp32 := Concat(_tmp32, [1]);
    end;
    _tmp27.AddOrSetData('d_gt_120', specialize _countList<integer>(_tmp32));
    _tmp26 := Concat(_tmp26, [_tmp27]);
  end;
  _result := _tmp26;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q50_simplified;
end.
