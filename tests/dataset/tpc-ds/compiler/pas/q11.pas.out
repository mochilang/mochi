program main;
{$mode objfpc}

uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser;

type
  generic TArray<T> = array of T;

type Customer = record
  c_customer_sk: integer;
  c_customer_id: string;
  c_first_name: string;
  c_last_name: string;
end;

type StoreSale = record
  ss_customer_sk: integer;
  ss_sold_date_sk: integer;
  ss_ext_list_price: double;
end;

type WebSale = record
  ws_bill_customer_sk: integer;
  ws_sold_date_sk: integer;
  ws_ext_list_price: double;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;

var i: integer;
  s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<Variant, Variant>;
  _tmp1: specialize TFPGMap<Variant, Variant>;
  _tmp10: specialize TFPGMap<Variant, Variant>;
  _tmp2: specialize TFPGMap<Variant, Variant>;
  _tmp3: specialize TFPGMap<Variant, Variant>;
  _tmp4: specialize TFPGMap<Variant, Variant>;
  _tmp5: specialize TArray<Variant>;
  _tmp6: specialize TArray<Variant>;
  _tmp7: specialize TArray<Variant>;
  _tmp8: specialize TArray<Variant>;
  _tmp9: specialize TArray<specialize TFPGMap<string, string>>;
  customer: specialize TArray<specialize TFPGMap<string, Variant>>;
  growth_ok: boolean;
  _result: specialize TArray<specialize TFPGMap<string, string>>;
  ss: specialize TFPGMap<string, Variant>;
  ss98: double;
  ss99: double;
  store_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  web_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  ws: specialize TFPGMap<string, Variant>;
  ws98: double;
  ws99: double;

procedure test_TPCDS_Q11_growth;

var
  _tmp11: specialize TFPGMap<Variant, Variant>;
begin
  _tmp11 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp11.AddOrSetData('custo_tmp11er_id', 'C1');
  _tmp11.AddOrSetData('custo_tmp11er_first_na_tmp11e', 'John');
  _tmp11.AddOrSetData('custo_tmp11er_last_na_tmp11e', 'Doe');
  if not ((_result = specialize TArray<specialize TFPGMap<string, string>>([_tmp11]))) then raise
    Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp0.AddOrSetData('c_custo_tmp0er_sk', 1);
  _tmp0.AddOrSetData('c_custo_tmp0er_id', 'C1');
  _tmp0.AddOrSetData('c_first_na_tmp0e', 'John');
  _tmp0.AddOrSetData('c_last_na_tmp0e', 'Doe');
  customer := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0]);
  _tmp1 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp1.AddOrSetData('ss_custo_tmp1er_sk', 1);
  _tmp1.AddOrSetData('ss_sold_date_sk', 1998);
  _tmp1.AddOrSetData('ss_ext_list_price', 60);
  _tmp2 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp2.AddOrSetData('ss_custo_tmp2er_sk', 1);
  _tmp2.AddOrSetData('ss_sold_date_sk', 1999);
  _tmp2.AddOrSetData('ss_ext_list_price', 90);
  store_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp3.AddOrSetData('ws_bill_custo_tmp3er_sk', 1);
  _tmp3.AddOrSetData('ws_sold_date_sk', 1998);
  _tmp3.AddOrSetData('ws_ext_list_price', 50);
  _tmp4 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp4.AddOrSetData('ws_bill_custo_tmp4er_sk', 1);
  _tmp4.AddOrSetData('ws_sold_date_sk', 1999);
  _tmp4.AddOrSetData('ws_ext_list_price', 150);
  web_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp3, _tmp4]);
  SetLength(_tmp5, 0);
  for ss in store_sales do
    begin
      if not ((ss.ss_sold_date_sk = 1998)) then continue;
      _tmp5 := Concat(_tmp5, [ss.ss_ext_list_price]);
    end;
  ss98 := specialize _sumList<Variant>(_tmp5);
  SetLength(_tmp6, 0);
  for ss in store_sales do
    begin
      if not ((ss.ss_sold_date_sk = 1999)) then continue;
      _tmp6 := Concat(_tmp6, [ss.ss_ext_list_price]);
    end;
  ss99 := specialize _sumList<Variant>(_tmp6);
  SetLength(_tmp7, 0);
  for ws in web_sales do
    begin
      if not ((ws.ws_sold_date_sk = 1998)) then continue;
      _tmp7 := Concat(_tmp7, [ws.ws_ext_list_price]);
    end;
  ws98 := specialize _sumList<Variant>(_tmp7);
  SetLength(_tmp8, 0);
  for ws in web_sales do
    begin
      if not ((ws.ws_sold_date_sk = 1999)) then continue;
      _tmp8 := Concat(_tmp8, [ws.ws_ext_list_price]);
    end;
  ws99 := specialize _sumList<Variant>(_tmp8);
  growth_ok := (((ws98 > 0) and (ss98 > 0)) and (ws99 div ws98 > ss99 div ss98));
  _tmp10 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp10.AddOrSetData('custo_tmp10er_id', 'C1');
  _tmp10.AddOrSetData('custo_tmp10er_first_na_tmp10e', 'John');
  _tmp10.AddOrSetData('custo_tmp10er_last_na_tmp10e', 'Doe');
  if growth_ok then
    begin
      _tmp9 := specialize TArray<specialize TFPGMap<string, string>>([_tmp10]);
    end
  else
    begin
      _tmp9 := specialize TArray<specialize TFPGMap<string, string>>([]);
    end;
  _result := _tmp9;
  specialize _json<specialize TArray<specialize TFPGMap<string, string>>>(_result);
  test_TPCDS_Q11_growth;
end.
