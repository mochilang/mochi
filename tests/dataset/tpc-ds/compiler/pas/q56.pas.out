// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:27Z
program Q56;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic _Group<K,T> = record
  Key: K;
  Items: specialize TArray<T>;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp11: specialize TFPGMap<string, Variant>;
  _tmp12: specialize TArray<Variant>;
  _tmp13: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp14: specialize TArray<specialize _Group<Variant, specialize TFPGMap<string, Variant>>>;
  _tmp15: Variant;
  _tmp16: string;
  _tmp17: integer;
  _tmp18: integer;
  _tmp19: specialize _Group<Variant, specialize TFPGMap<string, Variant>>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp20: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp21: specialize TFPGMap<string, Variant>;
  _tmp22: specialize TArray<Variant>;
  _tmp23: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp24: specialize TArray<specialize _Group<Variant, specialize TFPGMap<string, Variant>>>;
  _tmp25: Variant;
  _tmp26: string;
  _tmp27: integer;
  _tmp28: integer;
  _tmp29: specialize _Group<Variant, specialize TFPGMap<string, Variant>>;
  _tmp3: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp30: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp31: specialize TFPGMap<string, Variant>;
  _tmp32: specialize TArray<Variant>;
  _tmp33: specialize TArray<Variant>;
  _tmp34: specialize TArray<specialize _Group<Variant, Variant>>;
  _tmp35: Variant;
  _tmp36: string;
  _tmp37: integer;
  _tmp38: integer;
  _tmp39: specialize _Group<Variant, Variant>;
  _tmp4: specialize TArray<specialize _Group<Variant, specialize TFPGMap<string, Variant>>>;
  _tmp40: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp41: specialize TFPGMap<string, Variant>;
  _tmp42: specialize TArray<Variant>;
  _tmp5: Variant;
  _tmp6: string;
  _tmp7: integer;
  _tmp8: integer;
  _tmp9: specialize _Group<Variant, specialize TFPGMap<string, Variant>>;
  catalog_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  cs: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  s: specialize TFPGMap<string, Variant>;
  ss: specialize TArray<specialize TFPGMap<string, Variant>>;
  store_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  u: Variant;
  union: specialize TArray<Variant>;
  web_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  ws: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: integer;

procedure test_TPCDS_Q56_simplified;
var
  _tmp43: specialize TFPGMap<string, Variant>;
begin
  _tmp43 := specialize TFPGMap<string, Variant>.Create;
  _tmp43.AddOrSetData('i_item_id', 1);
  _tmp43.AddOrSetData('total_sales', 60);
  if not ((_result = specialize TArray<_>([_tmp43]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('item', 1);
  _tmp0.AddOrSetData('price', 10);
  store_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0]);
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('item', 1);
  _tmp1.AddOrSetData('price', 20);
  catalog_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp1]);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('item', 1);
  _tmp2.AddOrSetData('price', 30);
  web_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp2]);
  SetLength(_tmp3, 0);
  for s in store_sales do
  begin
    _tmp3 := Concat(_tmp3, [s]);
  end;
  SetLength(_tmp4, 0);
  for s in _tmp3 do
  begin
    _tmp5 := s.KeyData['item'];
    _tmp6 := VarToStr(_tmp5);
    _tmp7 := -1;
    for _tmp8 := 0 to High(_tmp4) do
      if VarToStr(_tmp4[_tmp8].Key) = _tmp6 then begin _tmp7 := _tmp8; Break; end;
    if _tmp7 = -1 then
    begin
      _tmp7 := Length(_tmp4);
      SetLength(_tmp4, _tmp7 + 1);
      _tmp4[_tmp7].Key := _tmp5;
      SetLength(_tmp4[_tmp7].Items, 0);
    end;
    SetLength(_tmp4[_tmp7].Items, Length(_tmp4[_tmp7].Items)+1);
    _tmp4[_tmp7].Items[High(_tmp4[_tmp7].Items)] := s;
  end;
  SetLength(_tmp10, 0);
  for _tmp9 in _tmp4 do
  begin
    _tmp11 := specialize TFPGMap<string, Variant>.Create;
    _tmp11.AddOrSetData('item', g.key);
    SetLength(_tmp12, 0);
    for x in g do
    begin
      _tmp12 := Concat(_tmp12, [x.price]);
    end;
    _tmp11.AddOrSetData('total', specialize _sumList<Variant>(_tmp12));
    _tmp10 := Concat(_tmp10, [_tmp11]);
  end;
  ss := _tmp10;
  SetLength(_tmp13, 0);
  for s in catalog_sales do
  begin
    _tmp13 := Concat(_tmp13, [s]);
  end;
  SetLength(_tmp14, 0);
  for s in _tmp13 do
  begin
    _tmp15 := s.KeyData['item'];
    _tmp16 := VarToStr(_tmp15);
    _tmp17 := -1;
    for _tmp18 := 0 to High(_tmp14) do
      if VarToStr(_tmp14[_tmp18].Key) = _tmp16 then begin _tmp17 := _tmp18; Break; end;
    if _tmp17 = -1 then
    begin
      _tmp17 := Length(_tmp14);
      SetLength(_tmp14, _tmp17 + 1);
      _tmp14[_tmp17].Key := _tmp15;
      SetLength(_tmp14[_tmp17].Items, 0);
    end;
    SetLength(_tmp14[_tmp17].Items, Length(_tmp14[_tmp17].Items)+1);
    _tmp14[_tmp17].Items[High(_tmp14[_tmp17].Items)] := s;
  end;
  SetLength(_tmp20, 0);
  for _tmp19 in _tmp14 do
  begin
    _tmp21 := specialize TFPGMap<string, Variant>.Create;
    _tmp21.AddOrSetData('item', g.key);
    SetLength(_tmp22, 0);
    for x in g do
    begin
      _tmp22 := Concat(_tmp22, [x.price]);
    end;
    _tmp21.AddOrSetData('total', specialize _sumList<Variant>(_tmp22));
    _tmp20 := Concat(_tmp20, [_tmp21]);
  end;
  cs := _tmp20;
  SetLength(_tmp23, 0);
  for s in web_sales do
  begin
    _tmp23 := Concat(_tmp23, [s]);
  end;
  SetLength(_tmp24, 0);
  for s in _tmp23 do
  begin
    _tmp25 := s.KeyData['item'];
    _tmp26 := VarToStr(_tmp25);
    _tmp27 := -1;
    for _tmp28 := 0 to High(_tmp24) do
      if VarToStr(_tmp24[_tmp28].Key) = _tmp26 then begin _tmp27 := _tmp28; Break; end;
    if _tmp27 = -1 then
    begin
      _tmp27 := Length(_tmp24);
      SetLength(_tmp24, _tmp27 + 1);
      _tmp24[_tmp27].Key := _tmp25;
      SetLength(_tmp24[_tmp27].Items, 0);
    end;
    SetLength(_tmp24[_tmp27].Items, Length(_tmp24[_tmp27].Items)+1);
    _tmp24[_tmp27].Items[High(_tmp24[_tmp27].Items)] := s;
  end;
  SetLength(_tmp30, 0);
  for _tmp29 in _tmp24 do
  begin
    _tmp31 := specialize TFPGMap<string, Variant>.Create;
    _tmp31.AddOrSetData('item', g.key);
    SetLength(_tmp32, 0);
    for x in g do
    begin
      _tmp32 := Concat(_tmp32, [x.price]);
    end;
    _tmp31.AddOrSetData('total', specialize _sumList<Variant>(_tmp32));
    _tmp30 := Concat(_tmp30, [_tmp31]);
  end;
  ws := _tmp30;
  union := Concat(Concat(ss, cs), ws);
  SetLength(_tmp33, 0);
  for u in union do
  begin
    _tmp33 := Concat(_tmp33, [u]);
  end;
  SetLength(_tmp34, 0);
  for u in _tmp33 do
  begin
    _tmp35 := u.item;
    _tmp36 := VarToStr(_tmp35);
    _tmp37 := -1;
    for _tmp38 := 0 to High(_tmp34) do
      if VarToStr(_tmp34[_tmp38].Key) = _tmp36 then begin _tmp37 := _tmp38; Break; end;
    if _tmp37 = -1 then
    begin
      _tmp37 := Length(_tmp34);
      SetLength(_tmp34, _tmp37 + 1);
      _tmp34[_tmp37].Key := _tmp35;
      SetLength(_tmp34[_tmp37].Items, 0);
    end;
    SetLength(_tmp34[_tmp37].Items, Length(_tmp34[_tmp37].Items)+1);
    _tmp34[_tmp37].Items[High(_tmp34[_tmp37].Items)] := u;
  end;
  SetLength(_tmp40, 0);
  for _tmp39 in _tmp34 do
  begin
    _tmp41 := specialize TFPGMap<string, Variant>.Create;
    _tmp41.AddOrSetData('i_item_id', g.key);
    SetLength(_tmp42, 0);
    for x in g do
    begin
      _tmp42 := Concat(_tmp42, [x.total]);
    end;
    _tmp41.AddOrSetData('total_sales', specialize _sumList<Variant>(_tmp42));
    _tmp40 := Concat(_tmp40, [_tmp41]);
  end;
  _result := _tmp40;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q56_simplified;
end.
