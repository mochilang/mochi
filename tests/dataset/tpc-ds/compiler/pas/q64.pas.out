// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:28Z
program Q64;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

var
  _tmp0: specialize TFPGMap<string, integer>;
  _tmp1: specialize TFPGMap<string, integer>;
  _result: integer;
  store_returns: specialize TArray<specialize TFPGMap<string, integer>>;
  store_sales: specialize TArray<specialize TFPGMap<string, integer>>;

procedure test_TPCDS_Q64_simplified;
begin
  if not ((_result = 64)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('item', 1);
  _tmp0.AddOrSetData('cost', 20);
  _tmp0.AddOrSetData('list', 30);
  _tmp0.AddOrSetData('coupon', 5);
  store_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0]);
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('item', 1);
  _tmp1.AddOrSetData('ticket', 1);
  store_returns := specialize TArray<specialize TFPGMap<string, integer>>([_tmp1]);
  _result := 20 + 30 - 5 + 19;
  specialize _json<integer>(_result);
  test_TPCDS_Q64_simplified;
end.
