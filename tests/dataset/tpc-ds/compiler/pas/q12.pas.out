program main;
{$mode objfpc}

uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser;

type
  generic TArray<T> = array of T;

type WebSale = record
  ws_item_sk: integer;
  ws_sold_date_sk: integer;
  ws_ext_sales_price: double;
end;

type Item = record
  i_item_sk: integer;
  i_item_id: string;
  i_item_desc: string;
  i_category: string;
  i_class: string;
  i_current_price: double;
end;

type DateDim = record
  d_date_sk: integer;
  d_date: string;
end;

generic _Group<T> = record
  Key: Variant;
  Items: specialize TArray<T>;
end;

generic function _group_by<T>(src: specialize TArray<T>; keyfn: function(it: T): Variant):
                                                                                          specialize
                                                                                           TArray<
                                                                                          specialize
                                                                                           _Group<T>
                                                                                           >;

var i,j,idx: Integer;
  key: Variant;
  ks: string;
begin
  SetLength(Result, 0);
  for i := 0 to High(src) do
    begin
      key := keyfn(src[i]);
      ks := VarToStr(key);
      idx := -1;
      for j := 0 to High(Result) do
        if VarToStr(Result[j].Key) = ks then
          begin
            idx := j;
            Break;
          end;
      if idx = -1 then
        begin
          idx := Length(Result);
          SetLength(Result, idx + 1);
          Result[idx].Key := key;
          SetLength(Result[idx].Items, 0);
        end;
      SetLength(Result[idx].Items, Length(Result[idx].Items)+1);
      Result[idx].Items[High(Result[idx].Items)] := src[i];
    end;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);

var i,j: integer;
  tmp: T;
  k: Variant;
begin
  for i := 0 to High(arr) - 1 do
    for j := i + 1 to High(arr) do
      if keys[i] > keys[j] then
        begin
          tmp := arr[i];
          arr[i] := arr[j];
          arr[j] := tmp;
          k := keys[i];
          keys[i] := keys[j];
          keys[j] := k;
        end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;

var i: integer;
  s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<Variant, Variant>;
  _tmp1: specialize TFPGMap<Variant, Variant>;
  _tmp10: specialize TArray<Variant>;
  _tmp11: specialize TFPGMap<Variant, Variant>;
  _tmp12: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp13: specialize TArray<Variant>;
  _tmp14: specialize TFPGMap<Variant, Variant>;
  _tmp15: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp16: specialize TArray<specialize _Group<specialize TFPGMap<string, Variant>>>;
  _tmp17: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp18: specialize TFPGMap<Variant, Variant>;
  _tmp19: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp2: specialize TFPGMap<Variant, Variant>;
  _tmp20: specialize TArray<Variant>;
  _tmp3: specialize TFPGMap<Variant, Variant>;
  _tmp4: specialize TFPGMap<Variant, Variant>;
  _tmp5: specialize TFPGMap<Variant, Variant>;
  _tmp6: specialize TFPGMap<Variant, Variant>;
  _tmp7: specialize TFPGMap<Variant, Variant>;
  _tmp8: specialize TFPGMap<Variant, Variant>;
  _tmp9: specialize TFPGMap<Variant, Variant>;
  class_totals: specialize TArray<specialize TFPGMap<string, Variant>>;
  date_dim: specialize TArray<specialize TFPGMap<string, Variant>>;
  f: specialize TFPGMap<string, Variant>;
  filtered: specialize TArray<specialize TFPGMap<string, Variant>>;
  item: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  web_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  ws: specialize TFPGMap<string, Variant>;
  x: integer;

procedure test_TPCDS_Q12_revenue_ratio;

var
  _tmp21: specialize TFPGMap<Variant, Variant>;
  _tmp22: specialize TFPGMap<Variant, Variant>;
begin
  _tmp21 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp21.AddOrSetData('i_ite_tmp21_id', 'ITEM1');
  _tmp21.AddOrSetData('i_ite_tmp21_desc', 'Ite_tmp21 One');
  _tmp21.AddOrSetData('i_category', 'A');
  _tmp21.AddOrSetData('i_class', 'C1');
  _tmp21.AddOrSetData('i_current_price', 10);
  _tmp21.AddOrSetData('ite_tmp21revenue', 200);
  _tmp21.AddOrSetData('revenueratio', 50);
  _tmp22 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp22.AddOrSetData('i_ite_tmp22_id', 'ITEM2');
  _tmp22.AddOrSetData('i_ite_tmp22_desc', 'Ite_tmp22 Two');
  _tmp22.AddOrSetData('i_category', 'A');
  _tmp22.AddOrSetData('i_class', 'C1');
  _tmp22.AddOrSetData('i_current_price', 20);
  _tmp22.AddOrSetData('ite_tmp22revenue', 200);
  _tmp22.AddOrSetData('revenueratio', 50);
  if not ((_result = specialize TArray<specialize TFPGMap<string, Variant>>([_tmp21, _tmp22]))) then
    raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp0.AddOrSetData('ws_ite_tmp0_sk', 1);
  _tmp0.AddOrSetData('ws_sold_date_sk', 1);
  _tmp0.AddOrSetData('ws_ext_sales_price', 100);
  _tmp1 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp1.AddOrSetData('ws_ite_tmp1_sk', 1);
  _tmp1.AddOrSetData('ws_sold_date_sk', 2);
  _tmp1.AddOrSetData('ws_ext_sales_price', 100);
  _tmp2 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp2.AddOrSetData('ws_ite_tmp2_sk', 2);
  _tmp2.AddOrSetData('ws_sold_date_sk', 2);
  _tmp2.AddOrSetData('ws_ext_sales_price', 200);
  _tmp3 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp3.AddOrSetData('ws_ite_tmp3_sk', 3);
  _tmp3.AddOrSetData('ws_sold_date_sk', 3);
  _tmp3.AddOrSetData('ws_ext_sales_price', 50);
  web_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1, _tmp2, _tmp3]);
  _tmp4 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp4.AddOrSetData('i_ite_tmp4_sk', 1);
  _tmp4.AddOrSetData('i_ite_tmp4_id', 'ITEM1');
  _tmp4.AddOrSetData('i_ite_tmp4_desc', 'Ite_tmp4 One');
  _tmp4.AddOrSetData('i_category', 'A');
  _tmp4.AddOrSetData('i_class', 'C1');
  _tmp4.AddOrSetData('i_current_price', 10);
  _tmp5 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp5.AddOrSetData('i_ite_tmp5_sk', 2);
  _tmp5.AddOrSetData('i_ite_tmp5_id', 'ITEM2');
  _tmp5.AddOrSetData('i_ite_tmp5_desc', 'Ite_tmp5 Two');
  _tmp5.AddOrSetData('i_category', 'A');
  _tmp5.AddOrSetData('i_class', 'C1');
  _tmp5.AddOrSetData('i_current_price', 20);
  _tmp6 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp6.AddOrSetData('i_ite_tmp6_sk', 3);
  _tmp6.AddOrSetData('i_ite_tmp6_id', 'ITEM3');
  _tmp6.AddOrSetData('i_ite_tmp6_desc', 'Ite_tmp6 Three');
  _tmp6.AddOrSetData('i_category', 'B');
  _tmp6.AddOrSetData('i_class', 'C2');
  _tmp6.AddOrSetData('i_current_price', 30);
  item := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4, _tmp5, _tmp6]);
  _tmp7 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp7.AddOrSetData('d_date_sk', 1);
  _tmp7.AddOrSetData('d_date', '2001-01-20');
  _tmp8 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp8.AddOrSetData('d_date_sk', 2);
  _tmp8.AddOrSetData('d_date', '2001-02-05');
  _tmp9 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp9.AddOrSetData('d_date_sk', 3);
  _tmp9.AddOrSetData('d_date', '2001-03-05');
  date_dim := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp7, _tmp8, _tmp9]);
  SetLength(_tmp10, 0);
  for x in g do
    begin
      _tmp10 := Concat(_tmp10, [x.ws_ext_sales_price]);
    end;
  _tmp11 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp11.AddOrSetData('i_ite_tmp11_id', g.key.id);
  _tmp11.AddOrSetData('i_ite_tmp11_desc', g.key.desc);
  _tmp11.AddOrSetData('i_category', g.key.cat);
  _tmp11.AddOrSetData('i_class', g.key.class);
  _tmp11.AddOrSetData('i_current_price', g.key.price);
  _tmp11.AddOrSetData('ite_tmp11revenue', specialize _su_tmp11List<Variant>(_t_tmp11p10));
  SetLength(_tmp12, 0);
  for ws in web_sales do
    begin
      for i in item do
        begin
          if not ((ws.ws_item_sk = i.i_item_sk)) then continue;
          for d in date_dim do
            begin
              if not ((ws.ws_sold_date_sk = d.d_date_sk)) then continue;
              if not ((((i.i_category in specialize TArray<specialize TFPGMap<string, Variant>>(['A'
                 , 'B', 'C'])) and (d.d_date >= '2001-01-15')) and (d.d_date <= '2001-02-14'))) then
                continue;
              _tmp12 := Concat(_tmp12, [_tmp11]);
            end;
        end;
    end;
  filtered := _tmp12;
  SetLength(_tmp13, 0);
  for x in g do
    begin
      _tmp13 := Concat(_tmp13, [x.itemrevenue]);
    end;
  _tmp14 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp14.AddOrSetData('class', g.key);
  _tmp14.AddOrSetData('total', specialize _su_tmp14List<Variant>(_t_tmp14p13));
  SetLength(_tmp15, 0);
  for f in filtered do
    begin
      _tmp15 := Concat(_tmp15, [f]);
    end;
  _tmp16 := specialize _group_by<specialize TFPGMap<string, Variant>>(_tmp15, function(f: specialize
            TFPGMap<string, Variant>): Variant begin Result := f.i_class
end
);
SetLength(_tmp17, 0);
for g in _tmp16 do
  begin
    _tmp17 := Concat(_tmp17, [_tmp14]);
  end;
class_totals := _tmp17;
_tmp18 := specialize TFPGMap<Variant, Variant>.Create;
_tmp18.AddOrSetData('i_ite_tmp18_id', f.i_ite_tmp18_id);
_tmp18.AddOrSetData('i_ite_tmp18_desc', f.i_ite_tmp18_desc);
_tmp18.AddOrSetData('i_category', f.i_category);
_tmp18.AddOrSetData('i_class', f.i_class);
_tmp18.AddOrSetData('i_current_price', f.i_current_price);
_tmp18.AddOrSetData('ite_tmp18revenue', f.ite_tmp18revenue);
_tmp18.AddOrSetData('revenueratio', f.ite_tmp18revenue * 100 / t.total);
SetLength(_tmp19, 0);
SetLength(_tmp20, 0);
for f in filtered do
  begin
    for t in class_totals do
      begin
        if not ((f.i_class = t.class)) then continue;
        _tmp19 := Concat(_tmp19, [_tmp18]);
        _tmp20 := Concat(_tmp20, [specialize TArray<specialize TFPGMap<string, Variant>>([f.
                  i_category, f.i_class, f.i_item_id, f.i_item_desc])]);
      end;
  end;
specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp19, _tmp20);
_result := _tmp19;
specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
test_TPCDS_Q12_revenue_ratio;
end.
