program main;
{$mode objfpc}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser, Math;

type
  generic TArray<T> = array of T;

function distinct(xs: specialize TArray<integer>): specialize TArray<integer>;
var
  out: specialize TArray<Variant>;
  x: Variant;
begin
  out := specialize TArray<integer>([]);
  for x in xs do
  begin
    if not (Pos(x, out) > 0) then
    begin
      out := append(out, x);
    end;
  end;
  result := out;
  exit;
end;

generic function _intersect<T>(a, b: specialize TArray<T>): specialize TArray<T>;
var i,j,k: Integer; inB, exists: Boolean;
begin
  SetLength(Result, 0);
  for i := 0 to High(a) do
  begin
    inB := False;
    for j := 0 to High(b) do
      if a[i] = b[j] then begin inB := True; Break; end;
    if inB then
    begin
      exists := False;
      for k := 0 to High(Result) do
        if a[i] = Result[k] then begin exists := True; Break; end;
      if not exists then
      begin
        SetLength(Result, Length(Result)+1);
        Result[High(Result)] := a[i];
      end;
    end;
  end;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

var
  _tmp0: specialize TFPGMap<Variant, Variant>;
  _tmp1: specialize TFPGMap<Variant, Variant>;
  _tmp2: specialize TFPGMap<Variant, integer>;
  _tmp3: specialize TFPGMap<Variant, integer>;
  _tmp4: specialize TFPGMap<Variant, integer>;
  _tmp5: specialize TFPGMap<Variant, integer>;
  _tmp6: specialize TArray<integer>;
  _tmp7: specialize TArray<integer>;
  _tmp8: specialize TArray<integer>;
  c: specialize TFPGMap<string, integer>;
  catalog_ids: specialize TArray<Variant>;
  catalog_sales: specialize TArray<specialize TFPGMap<string, integer>>;
  customer: specialize TArray<specialize TFPGMap<string, Variant>>;
  hot: specialize TArray<Variant>;
  _result: integer;
  s: specialize TFPGMap<string, integer>;
  store_ids: specialize TArray<Variant>;
  store_sales: specialize TArray<specialize TFPGMap<string, integer>>;
  w: specialize TFPGMap<string, integer>;
  web_ids: specialize TArray<Variant>;
  web_sales: specialize TArray<specialize TFPGMap<string, integer>>;

procedure test_TPCDS_Q38_simplified;
begin
  if not ((_result = 1)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp0.AddOrSetData('c_customer_sk', 1);
  _tmp0.AddOrSetData('c_last_name', 'Smith');
  _tmp0.AddOrSetData('c_first_name', 'John');
  _tmp1 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp1.AddOrSetData('c_customer_sk', 2);
  _tmp1.AddOrSetData('c_last_name', 'Jones');
  _tmp1.AddOrSetData('c_first_name', 'Alice');
  customer := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<Variant, integer>.Create;
  _tmp2.AddOrSetData('ss_customer_sk', 1);
  _tmp2.AddOrSetData('d_month_seq', 1200);
  _tmp3 := specialize TFPGMap<Variant, integer>.Create;
  _tmp3.AddOrSetData('ss_customer_sk', 2);
  _tmp3.AddOrSetData('d_month_seq', 1205);
  store_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp2, _tmp3]);
  _tmp4 := specialize TFPGMap<Variant, integer>.Create;
  _tmp4.AddOrSetData('cs_bill_customer_sk', 1);
  _tmp4.AddOrSetData('d_month_seq', 1203);
  catalog_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp4]);
  _tmp5 := specialize TFPGMap<Variant, integer>.Create;
  _tmp5.AddOrSetData('ws_bill_customer_sk', 1);
  _tmp5.AddOrSetData('d_month_seq', 1206);
  web_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp5]);
  SetLength(_tmp6, 0);
  for s in store_sales do
  begin
    if not (((s.d_month_seq >= 1200) and (s.d_month_seq <= 1211))) then continue;
    _tmp6 := Concat(_tmp6, [s.ss_customer_sk]);
  end;
  store_ids := distinct(_tmp6);
  SetLength(_tmp7, 0);
  for c in catalog_sales do
  begin
    if not (((c.d_month_seq >= 1200) and (c.d_month_seq <= 1211))) then continue;
    _tmp7 := Concat(_tmp7, [c.cs_bill_customer_sk]);
  end;
  catalog_ids := distinct(_tmp7);
  SetLength(_tmp8, 0);
  for w in web_sales do
  begin
    if not (((w.d_month_seq >= 1200) and (w.d_month_seq <= 1211))) then continue;
    _tmp8 := Concat(_tmp8, [w.ws_bill_customer_sk]);
  end;
  web_ids := distinct(_tmp8);
  hot := specialize _intersect<Variant>(specialize _intersect<Variant>(store_ids, catalog_ids), web_ids);
  _result := Length(hot);
  specialize _json<integer>(_result);
  test_TPCDS_Q38_simplified;
end.
