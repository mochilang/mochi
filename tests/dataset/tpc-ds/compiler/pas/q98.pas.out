// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:33Z
program Q98;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;
type StoreSale = record
  ss_item_sk: integer;
  ss_sold_date_sk: integer;
  ss_ext_sales_price: double;
end;
type Item = record
  i_item_sk: integer;
  i_item_id: string;
  i_item_desc: string;
  i_category: string;
  i_class: string;
  i_current_price: double;
end;
type DateDim = record
  d_date_sk: integer;
  d_date: string;
end;

generic _Group<K,T> = record
  Key: K;
  Items: specialize TArray<T>;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);
var i,j: integer; tmp: T; k: Variant;
begin
  for i := 0 to High(arr) - 1 do
  for j := i + 1 to High(arr) do
    if keys[i] > keys[j] then
    begin
      tmp := arr[i]; arr[i] := arr[j]; arr[j] := tmp;
      k := keys[i]; keys[i] := keys[j]; keys[j] := k;
    end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: Variant;
  _tmp11: string;
  _tmp12: integer;
  _tmp13: integer;
  _tmp14: specialize _Group<Variant, specialize TFPGMap<string, Variant>>;
  _tmp15: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp16: specialize TFPGMap<string, Variant>;
  _tmp17: specialize TArray<Variant>;
  _tmp18: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp19: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp20: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TFPGMap<string, Variant>;
  _tmp5: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp6: specialize TFPGMap<string, Variant>;
  _tmp7: specialize TArray<Variant>;
  _tmp8: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp9: specialize TArray<specialize _Group<Variant, specialize TFPGMap<string, Variant>>>;
  d: specialize TFPGMap<string, Variant>;
  date_dim: specialize TArray<specialize TFPGMap<string, Variant>>;
  g: specialize TFPGMap<string, Variant>;
  grouped: specialize TArray<specialize TFPGMap<string, Variant>>;
  i: specialize TFPGMap<string, Variant>;
  item: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  ss: specialize TFPGMap<string, Variant>;
  store_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  t: specialize TFPGMap<string, Variant>;
  totals: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: integer;

procedure test_TPCDS_Q98_revenue;
var
  _tmp21: specialize TFPGMap<string, Variant>;
  _tmp22: specialize TFPGMap<string, Variant>;
begin
  _tmp21 := specialize TFPGMap<string, Variant>.Create;
  _tmp21.AddOrSetData('i_item_id', 'I1');
  _tmp21.AddOrSetData('i_item_desc', 'desc1');
  _tmp21.AddOrSetData('i_category', 'CatA');
  _tmp21.AddOrSetData('i_class', 'Class1');
  _tmp21.AddOrSetData('i_current_price', 100);
  _tmp21.AddOrSetData('itemrevenue', 50);
  _tmp21.AddOrSetData('revenueratio', 33.333333333333336);
  _tmp22 := specialize TFPGMap<string, Variant>.Create;
  _tmp22.AddOrSetData('i_item_id', 'I2');
  _tmp22.AddOrSetData('i_item_desc', 'desc2');
  _tmp22.AddOrSetData('i_category', 'CatB');
  _tmp22.AddOrSetData('i_class', 'Class1');
  _tmp22.AddOrSetData('i_current_price', 200);
  _tmp22.AddOrSetData('itemrevenue', 100);
  _tmp22.AddOrSetData('revenueratio', 66.66666666666667);
  if not ((_result = specialize TArray<_>([_tmp21, _tmp22]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('ss_item_sk', 1);
  _tmp0.AddOrSetData('ss_sold_date_sk', 1);
  _tmp0.AddOrSetData('ss_ext_sales_price', 50);
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('ss_item_sk', 2);
  _tmp1.AddOrSetData('ss_sold_date_sk', 1);
  _tmp1.AddOrSetData('ss_ext_sales_price', 100);
  store_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('i_item_sk', 1);
  _tmp2.AddOrSetData('i_item_id', 'I1');
  _tmp2.AddOrSetData('i_item_desc', 'desc1');
  _tmp2.AddOrSetData('i_category', 'CatA');
  _tmp2.AddOrSetData('i_class', 'Class1');
  _tmp2.AddOrSetData('i_current_price', 100);
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('i_item_sk', 2);
  _tmp3.AddOrSetData('i_item_id', 'I2');
  _tmp3.AddOrSetData('i_item_desc', 'desc2');
  _tmp3.AddOrSetData('i_category', 'CatB');
  _tmp3.AddOrSetData('i_class', 'Class1');
  _tmp3.AddOrSetData('i_current_price', 200);
  item := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp2, _tmp3]);
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('d_date_sk', 1);
  _tmp4.AddOrSetData('d_date', '2000-02-01');
  date_dim := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4]);
  SetLength(_tmp5, 0);
  for ss in store_sales do
  begin
    for i in item do
    begin
      if not ((ss.KeyData['ss_item_sk'] = i.KeyData['i_item_sk'])) then continue;
      for d in date_dim do
      begin
        if not ((ss.KeyData['ss_sold_date_sk'] = d.KeyData['d_date_sk'])) then continue;
        _tmp6 := specialize TFPGMap<string, Variant>.Create;
        _tmp6.AddOrSetData('i_item_id', g.KeyData['key'].item_id);
        _tmp6.AddOrSetData('i_item_desc', g.KeyData['key'].item_desc);
        _tmp6.AddOrSetData('i_category', g.KeyData['key'].category);
        _tmp6.AddOrSetData('i_class', g.KeyData['key'].class);
        _tmp6.AddOrSetData('i_current_price', g.KeyData['key'].price);
        SetLength(_tmp7, 0);
        for x in g do
        begin
          _tmp7 := Concat(_tmp7, [x.ss_ext_sales_price]);
        end;
        _tmp6.AddOrSetData('itemrevenue', specialize _sumList<Variant>(_tmp7));
        _tmp5 := Concat(_tmp5, [_tmp6]);
      end;
    end;
  end;
  grouped := _tmp5;
  SetLength(_tmp8, 0);
  for g in grouped do
  begin
    _tmp8 := Concat(_tmp8, [g]);
  end;
  SetLength(_tmp9, 0);
  for g in _tmp8 do
  begin
    _tmp10 := g.KeyData['i_class'];
    _tmp11 := VarToStr(_tmp10);
    _tmp12 := -1;
    for _tmp13 := 0 to High(_tmp9) do
      if VarToStr(_tmp9[_tmp13].Key) = _tmp11 then begin _tmp12 := _tmp13; Break; end;
    if _tmp12 = -1 then
    begin
      _tmp12 := Length(_tmp9);
      SetLength(_tmp9, _tmp12 + 1);
      _tmp9[_tmp12].Key := _tmp10;
      SetLength(_tmp9[_tmp12].Items, 0);
    end;
    SetLength(_tmp9[_tmp12].Items, Length(_tmp9[_tmp12].Items)+1);
    _tmp9[_tmp12].Items[High(_tmp9[_tmp12].Items)] := g;
  end;
  SetLength(_tmp15, 0);
  for _tmp14 in _tmp9 do
  begin
    _tmp16 := specialize TFPGMap<string, Variant>.Create;
    _tmp16.AddOrSetData('class', cg.key);
    SetLength(_tmp17, 0);
    for x in cg do
    begin
      _tmp17 := Concat(_tmp17, [x.itemrevenue]);
    end;
    _tmp16.AddOrSetData('total', specialize _sumList<Variant>(_tmp17));
    _tmp15 := Concat(_tmp15, [_tmp16]);
  end;
  totals := _tmp15;
  SetLength(_tmp18, 0);
  SetLength(_tmp19, 0);
  for g in grouped do
  begin
    for t in totals do
    begin
      if not ((g.KeyData['i_class'] = t.KeyData['class'])) then continue;
      _tmp20 := specialize TFPGMap<string, Variant>.Create;
      _tmp20.AddOrSetData('i_item_id', g.KeyData['i_item_id']);
      _tmp20.AddOrSetData('i_item_desc', g.KeyData['i_item_desc']);
      _tmp20.AddOrSetData('i_category', g.KeyData['i_category']);
      _tmp20.AddOrSetData('i_class', g.KeyData['i_class']);
      _tmp20.AddOrSetData('i_current_price', g.KeyData['i_current_price']);
      _tmp20.AddOrSetData('itemrevenue', g.KeyData['itemrevenue']);
      _tmp20.AddOrSetData('revenueratio', g.KeyData['itemrevenue'] * 100 / t.KeyData['total']);
      _tmp18 := Concat(_tmp18, [_tmp20]);
      _tmp19 := Concat(_tmp19, [specialize TArray<specialize TFPGMap<string, Variant>>([g.KeyData['i_category'], g.KeyData['i_class'], g.KeyData['i_item_id']])]);
    end;
  end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp18, _tmp19);
  _result := _tmp18;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q98_revenue;
end.
