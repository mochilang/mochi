program main;
{$mode objfpc}

uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser;

type
  generic TArray<T> = array of T;

  generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);

var i,j: integer;
  tmp: T;
  k: Variant;
begin
  for i := 0 to High(arr) - 1 do
    for j := i + 1 to High(arr) do
      if keys[i] > keys[j] then
        begin
          tmp := arr[i];
          arr[i] := arr[j];
          arr[j] := tmp;
          k := keys[i];
          keys[i] := keys[j];
          keys[j] := k;
        end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;

var i: integer;
  s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<Variant, integer>;
  _tmp1: specialize TFPGMap<Variant, Variant>;
  _tmp2: specialize TFPGMap<Variant, Variant>;
  _tmp3: specialize TFPGMap<Variant, Variant>;
  _tmp4: specialize TFPGMap<Variant, Variant>;
  _tmp5: specialize TArray<Variant>;
  _tmp6: specialize TFPGMap<Variant, Variant>;
  _tmp7: specialize TArray<Variant>;
  _tmp8: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp9: specialize TArray<Variant>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  dt: specialize TFPGMap<string, integer>;
  item: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  store_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: integer;

procedure test_TPCDS_Q3_result;

var
  _tmp10: specialize TFPGMap<Variant, Variant>;
  _tmp11: specialize TFPGMap<Variant, Variant>;
begin
  _tmp10 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp10.AddOrSetData('d_year', 1998);
  _tmp10.AddOrSetData('brand_id', 1);
  _tmp10.AddOrSetData('brand', 'Brand1');
  _tmp10.AddOrSetData('su_tmp10_agg', 10);
  _tmp11 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp11.AddOrSetData('d_year', 1998);
  _tmp11.AddOrSetData('brand_id', 2);
  _tmp11.AddOrSetData('brand', 'Brand2');
  _tmp11.AddOrSetData('su_tmp11_agg', 20);
  if not ((_result = specialize TArray<specialize TFPGMap<string, Variant>>([_tmp10, _tmp11]))) then
    raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<Variant, integer>.Create;
  _tmp0.AddOrSetData('d_date_sk', 1);
  _tmp0.AddOrSetData('d_year', 1998);
  _tmp0.AddOrSetData('d__tmp0oy', 12);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0]);
  _tmp1 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp1.AddOrSetData('ss_sold_date_sk', 1);
  _tmp1.AddOrSetData('ss_ite_tmp1_sk', 1);
  _tmp1.AddOrSetData('ss_ext_sales_price', 10);
  _tmp2 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp2.AddOrSetData('ss_sold_date_sk', 1);
  _tmp2.AddOrSetData('ss_ite_tmp2_sk', 2);
  _tmp2.AddOrSetData('ss_ext_sales_price', 20);
  store_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp3.AddOrSetData('i_ite_tmp3_sk', 1);
  _tmp3.AddOrSetData('i__tmp3anufact_id', 100);
  _tmp3.AddOrSetData('i_brand_id', 1);
  _tmp3.AddOrSetData('i_brand', 'Brand1');
  _tmp4 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp4.AddOrSetData('i_ite_tmp4_sk', 2);
  _tmp4.AddOrSetData('i__tmp4anufact_id', 100);
  _tmp4.AddOrSetData('i_brand_id', 2);
  _tmp4.AddOrSetData('i_brand', 'Brand2');
  item := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp3, _tmp4]);
  SetLength(_tmp5, 0);
  for x in g do
    begin
      _tmp5 := Concat(_tmp5, [x.ss_ext_sales_price]);
    end;
  _tmp6 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp6.AddOrSetData('d_year', g.key.d_year);
  _tmp6.AddOrSetData('brand_id', g.key.brand_id);
  _tmp6.AddOrSetData('brand', g.key.brand);
  _tmp6.AddOrSetData('su_tmp6_agg', specialize _su_tmp6List<Variant>(_t_tmp6p5));
  SetLength(_tmp7, 0);
  for x in g do
    begin
      _tmp7 := Concat(_tmp7, [x.ss_ext_sales_price]);
    end;
  SetLength(_tmp8, 0);
  SetLength(_tmp9, 0);
  for dt in date_dim do
    begin
      for ss in store_sales do
        begin
          if not ((dt.d_date_sk = ss.ss_sold_date_sk)) then continue;
          for i in item do
            begin
              if not ((ss.ss_item_sk = i.i_item_sk)) then continue;
              if not (((i.i_manufact_id = 100) and (dt.d_moy = 12))) then continue;
              _tmp8 := Concat(_tmp8, [_tmp6]);
              _tmp9 := Concat(_tmp9, [specialize TArray<specialize TFPGMap<string, Variant>>([g.key.
                       d_year, -specialize _sumList<Variant>(_tmp7), g.key.brand_id])]);
            end;
        end;
    end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp8, _tmp9);
  _result := _tmp8;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q3_result;
end.
