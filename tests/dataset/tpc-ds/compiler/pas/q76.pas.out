// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:30Z
program Q76;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);
var i,j: integer; tmp: T; k: Variant;
begin
  for i := 0 to High(arr) - 1 do
  for j := i + 1 to High(arr) do
    if keys[i] > keys[j] then
    begin
      tmp := arr[i]; arr[i] := arr[j]; arr[j] := tmp;
      k := keys[i]; keys[i] := keys[j]; keys[j] := k;
    end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, integer>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: specialize TFPGMap<string, Variant>;
  _tmp11: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp12: specialize TFPGMap<string, Variant>;
  _tmp13: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp14: specialize TArray<Variant>;
  _tmp15: specialize TFPGMap<string, Variant>;
  _tmp16: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TFPGMap<string, Variant>;
  _tmp5: specialize TFPGMap<string, Variant>;
  _tmp6: specialize TFPGMap<string, Variant>;
  _tmp7: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp8: specialize TFPGMap<string, Variant>;
  _tmp9: specialize TArray<specialize TFPGMap<string, Variant>>;
  all_rows: specialize TArray<Variant>;
  catalog_part: specialize TArray<specialize TFPGMap<string, Variant>>;
  catalog_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  cs: specialize TFPGMap<string, Variant>;
  d: specialize TFPGMap<string, integer>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  i: specialize TFPGMap<string, Variant>;
  item: specialize TArray<specialize TFPGMap<string, Variant>>;
  r: Variant;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  ss: specialize TFPGMap<string, Variant>;
  store_part: specialize TArray<specialize TFPGMap<string, Variant>>;
  store_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  web_part: specialize TArray<specialize TFPGMap<string, Variant>>;
  web_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  ws: specialize TFPGMap<string, Variant>;
  x: integer;

procedure test_TPCDS_Q76_simplified;
var
  _tmp17: specialize TFPGMap<string, Variant>;
  _tmp18: specialize TFPGMap<string, Variant>;
  _tmp19: specialize TFPGMap<string, Variant>;
begin
  _tmp17 := specialize TFPGMap<string, Variant>.Create;
  _tmp17.AddOrSetData('channel', 'store');
  _tmp17.AddOrSetData('col_name', Null);
  _tmp17.AddOrSetData('d_year', 1998);
  _tmp17.AddOrSetData('d_qoy', 1);
  _tmp17.AddOrSetData('i_category', 'CatA');
  _tmp17.AddOrSetData('sales_cnt', 1);
  _tmp17.AddOrSetData('sales_amt', 10);
  _tmp18 := specialize TFPGMap<string, Variant>.Create;
  _tmp18.AddOrSetData('channel', 'web');
  _tmp18.AddOrSetData('col_name', Null);
  _tmp18.AddOrSetData('d_year', 1998);
  _tmp18.AddOrSetData('d_qoy', 1);
  _tmp18.AddOrSetData('i_category', 'CatB');
  _tmp18.AddOrSetData('sales_cnt', 1);
  _tmp18.AddOrSetData('sales_amt', 15);
  _tmp19 := specialize TFPGMap<string, Variant>.Create;
  _tmp19.AddOrSetData('channel', 'catalog');
  _tmp19.AddOrSetData('col_name', Null);
  _tmp19.AddOrSetData('d_year', 1998);
  _tmp19.AddOrSetData('d_qoy', 1);
  _tmp19.AddOrSetData('i_category', 'CatC');
  _tmp19.AddOrSetData('sales_cnt', 1);
  _tmp19.AddOrSetData('sales_amt', 20);
  if not ((_result = specialize TArray<_>([_tmp17, _tmp18, _tmp19]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('d_date_sk', 1);
  _tmp0.AddOrSetData('d_year', 1998);
  _tmp0.AddOrSetData('d_qoy', 1);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0]);
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('i_item_sk', 1);
  _tmp1.AddOrSetData('i_category', 'CatA');
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('i_item_sk', 2);
  _tmp2.AddOrSetData('i_category', 'CatB');
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('i_item_sk', 3);
  _tmp3.AddOrSetData('i_category', 'CatC');
  item := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp1, _tmp2, _tmp3]);
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('ss_customer_sk', Null);
  _tmp4.AddOrSetData('ss_item_sk', 1);
  _tmp4.AddOrSetData('ss_ext_sales_price', 10);
  _tmp4.AddOrSetData('ss_sold_date_sk', 1);
  store_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4]);
  _tmp5 := specialize TFPGMap<string, Variant>.Create;
  _tmp5.AddOrSetData('ws_bill_customer_sk', Null);
  _tmp5.AddOrSetData('ws_item_sk', 2);
  _tmp5.AddOrSetData('ws_ext_sales_price', 15);
  _tmp5.AddOrSetData('ws_sold_date_sk', 1);
  web_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp5]);
  _tmp6 := specialize TFPGMap<string, Variant>.Create;
  _tmp6.AddOrSetData('cs_bill_customer_sk', Null);
  _tmp6.AddOrSetData('cs_item_sk', 3);
  _tmp6.AddOrSetData('cs_ext_sales_price', 20);
  _tmp6.AddOrSetData('cs_sold_date_sk', 1);
  catalog_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp6]);
  SetLength(_tmp7, 0);
  for ss in store_sales do
  begin
    for i in item do
    begin
      if not ((i.KeyData['i_item_sk'] = ss.KeyData['ss_item_sk'])) then continue;
      for d in date_dim do
      begin
        if not ((d.KeyData['d_date_sk'] = ss.KeyData['ss_sold_date_sk'])) then continue;
        if not ((ss.KeyData['ss_customer_sk'] = Null)) then continue;
        _tmp8 := specialize TFPGMap<string, Variant>.Create;
        _tmp8.AddOrSetData('channel', 'store');
        _tmp8.AddOrSetData('col_name', ss.KeyData['ss_customer_sk']);
        _tmp8.AddOrSetData('d_year', d.KeyData['d_year']);
        _tmp8.AddOrSetData('d_qoy', d.KeyData['d_qoy']);
        _tmp8.AddOrSetData('i_category', i.KeyData['i_category']);
        _tmp8.AddOrSetData('ext_sales_price', ss.KeyData['ss_ext_sales_price']);
        _tmp7 := Concat(_tmp7, [_tmp8]);
      end;
    end;
  end;
  store_part := _tmp7;
  SetLength(_tmp9, 0);
  for ws in web_sales do
  begin
    for i in item do
    begin
      if not ((i.KeyData['i_item_sk'] = ws.KeyData['ws_item_sk'])) then continue;
      for d in date_dim do
      begin
        if not ((d.KeyData['d_date_sk'] = ws.KeyData['ws_sold_date_sk'])) then continue;
        if not ((ws.KeyData['ws_bill_customer_sk'] = Null)) then continue;
        _tmp10 := specialize TFPGMap<string, Variant>.Create;
        _tmp10.AddOrSetData('channel', 'web');
        _tmp10.AddOrSetData('col_name', ws.KeyData['ws_bill_customer_sk']);
        _tmp10.AddOrSetData('d_year', d.KeyData['d_year']);
        _tmp10.AddOrSetData('d_qoy', d.KeyData['d_qoy']);
        _tmp10.AddOrSetData('i_category', i.KeyData['i_category']);
        _tmp10.AddOrSetData('ext_sales_price', ws.KeyData['ws_ext_sales_price']);
        _tmp9 := Concat(_tmp9, [_tmp10]);
      end;
    end;
  end;
  web_part := _tmp9;
  SetLength(_tmp11, 0);
  for cs in catalog_sales do
  begin
    for i in item do
    begin
      if not ((i.KeyData['i_item_sk'] = cs.KeyData['cs_item_sk'])) then continue;
      for d in date_dim do
      begin
        if not ((d.KeyData['d_date_sk'] = cs.KeyData['cs_sold_date_sk'])) then continue;
        if not ((cs.KeyData['cs_bill_customer_sk'] = Null)) then continue;
        _tmp12 := specialize TFPGMap<string, Variant>.Create;
        _tmp12.AddOrSetData('channel', 'catalog');
        _tmp12.AddOrSetData('col_name', cs.KeyData['cs_bill_customer_sk']);
        _tmp12.AddOrSetData('d_year', d.KeyData['d_year']);
        _tmp12.AddOrSetData('d_qoy', d.KeyData['d_qoy']);
        _tmp12.AddOrSetData('i_category', i.KeyData['i_category']);
        _tmp12.AddOrSetData('ext_sales_price', cs.KeyData['cs_ext_sales_price']);
        _tmp11 := Concat(_tmp11, [_tmp12]);
      end;
    end;
  end;
  catalog_part := _tmp11;
  all_rows := Concat(Concat(store_part, web_part), catalog_part);
  SetLength(_tmp13, 0);
  SetLength(_tmp14, 0);
  for r in all_rows do
  begin
    _tmp15 := specialize TFPGMap<string, Variant>.Create;
    _tmp15.AddOrSetData('channel', g.key.channel);
    _tmp15.AddOrSetData('col_name', g.key.col_name);
    _tmp15.AddOrSetData('d_year', g.key.d_year);
    _tmp15.AddOrSetData('d_qoy', g.key.d_qoy);
    _tmp15.AddOrSetData('i_category', g.key.i_category);
    _tmp15.AddOrSetData('sales_cnt', Length(g));
    SetLength(_tmp16, 0);
    for x in g do
    begin
      _tmp16 := Concat(_tmp16, [x.r.ext_sales_price]);
    end;
    _tmp15.AddOrSetData('sales_amt', specialize _sumList<Variant>(_tmp16));
    _tmp13 := Concat(_tmp13, [_tmp15]);
    _tmp14 := Concat(_tmp14, [g.key.channel]);
  end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp13, _tmp14);
  _result := _tmp13;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q76_simplified;
end.
