// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:32Z
program Q89;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, double>;
  _tmp1: specialize TFPGMap<string, double>;
  _tmp2: specialize TFPGMap<string, double>;
  _tmp3: specialize TArray<double>;
  _result: double;
  s: specialize TFPGMap<string, double>;
  store_sales: specialize TArray<specialize TFPGMap<string, double>>;

procedure test_TPCDS_Q89_sample;
begin
  if not ((_result = 89)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, double>.Create;
  _tmp0.AddOrSetData('price', 40);
  _tmp1 := specialize TFPGMap<string, double>.Create;
  _tmp1.AddOrSetData('price', 30);
  _tmp2 := specialize TFPGMap<string, double>.Create;
  _tmp2.AddOrSetData('price', 19);
  store_sales := specialize TArray<specialize TFPGMap<string, double>>([_tmp0, _tmp1, _tmp2]);
  SetLength(_tmp3, 0);
  for s in store_sales do
  begin
    _tmp3 := Concat(_tmp3, [s.KeyData['price']]);
  end;
  _result := specialize _sumList<double>(_tmp3);
  specialize _json<double>(_result);
  test_TPCDS_Q89_sample;
end.
