// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:27Z
program Q54;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function int(x: double): integer;
begin
  result := Trunc(x);
  exit;
end;

generic _Group<K,T> = record
  Key: K;
  Items: specialize TArray<T>;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: specialize TArray<specialize _Group<Variant, specialize TFPGMap<string, Variant>>>;
  _tmp11: Variant;
  _tmp12: string;
  _tmp13: integer;
  _tmp14: integer;
  _tmp15: specialize _Group<Variant, specialize TFPGMap<string, Variant>>;
  _tmp16: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp17: specialize TFPGMap<string, Variant>;
  _tmp18: specialize TArray<Variant>;
  _tmp19: specialize TFPGMap<string, integer>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp20: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp21: specialize TArray<specialize _Group<_, specialize TFPGMap<string, Variant>>>;
  _tmp22: _;
  _tmp23: string;
  _tmp24: integer;
  _tmp25: integer;
  _tmp26: specialize _Group<_, specialize TFPGMap<string, Variant>>;
  _tmp27: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp28: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, integer>;
  _tmp5: specialize TFPGMap<string, Variant>;
  _tmp6: specialize TFPGMap<string, Variant>;
  _tmp7: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp8: specialize TFPGMap<string, Variant>;
  _tmp9: specialize TArray<specialize TFPGMap<string, Variant>>;
  by_customer: specialize TArray<specialize TFPGMap<string, Variant>>;
  c: specialize TFPGMap<string, integer>;
  ca: specialize TFPGMap<string, Variant>;
  customer: specialize TArray<specialize TFPGMap<string, integer>>;
  customer_address: specialize TArray<specialize TFPGMap<string, Variant>>;
  d: specialize TFPGMap<string, integer>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  r: specialize TFPGMap<string, Variant>;
  _result: specialize TArray<specialize TFPGMap<string, integer>>;
  revenue: specialize TArray<specialize TFPGMap<string, Variant>>;
  s: specialize TFPGMap<string, Variant>;
  segments: specialize TArray<specialize TFPGMap<string, Variant>>;
  ss: specialize TFPGMap<string, Variant>;
  store: specialize TArray<specialize TFPGMap<string, Variant>>;
  store_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: integer;

procedure test_TPCDS_Q54_simplified;
var
  _tmp29: specialize TFPGMap<string, integer>;
  _tmp30: specialize TFPGMap<string, integer>;
begin
  _tmp29 := specialize TFPGMap<string, integer>.Create;
  _tmp29.AddOrSetData('segment', 1);
  _tmp29.AddOrSetData('num_customers', 1);
  _tmp29.AddOrSetData('segment_base', 50);
  _tmp30 := specialize TFPGMap<string, integer>.Create;
  _tmp30.AddOrSetData('segment', 0);
  _tmp30.AddOrSetData('num_customers', 1);
  _tmp30.AddOrSetData('segment_base', 0);
  if not ((_result = specialize TArray<_>([_tmp29, _tmp30]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('customer', 1);
  _tmp0.AddOrSetData('sold_date', 2);
  _tmp0.AddOrSetData('price', 60);
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('customer', 2);
  _tmp1.AddOrSetData('sold_date', 2);
  _tmp1.AddOrSetData('price', 40);
  store_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('d_date_sk', 2);
  _tmp2.AddOrSetData('d_month_seq', 5);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp2]);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('c_customer_sk', 1);
  _tmp3.AddOrSetData('c_current_addr_sk', 1);
  _tmp4 := specialize TFPGMap<string, integer>.Create;
  _tmp4.AddOrSetData('c_customer_sk', 2);
  _tmp4.AddOrSetData('c_current_addr_sk', 1);
  customer := specialize TArray<specialize TFPGMap<string, integer>>([_tmp3, _tmp4]);
  _tmp5 := specialize TFPGMap<string, Variant>.Create;
  _tmp5.AddOrSetData('ca_address_sk', 1);
  _tmp5.AddOrSetData('ca_county', 'X');
  _tmp5.AddOrSetData('ca_state', 'Y');
  customer_address := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp5]);
  _tmp6 := specialize TFPGMap<string, Variant>.Create;
  _tmp6.AddOrSetData('s_store_sk', 1);
  _tmp6.AddOrSetData('s_county', 'X');
  _tmp6.AddOrSetData('s_state', 'Y');
  store := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp6]);
  SetLength(_tmp7, 0);
  for ss in store_sales do
  begin
    for d in date_dim do
    begin
      if not ((ss.KeyData['sold_date'] = d.KeyData['d_date_sk'])) then continue;
      for c in customer do
      begin
        if not ((ss.KeyData['customer'] = c.KeyData['c_customer_sk'])) then continue;
        for ca in customer_address do
        begin
          if not ((((c.KeyData['c_current_addr_sk'] = ca.KeyData['ca_address_sk']) and (ca.KeyData['ca_county'] = 'X')) and (ca.KeyData['ca_state'] = 'Y'))) then continue;
          for s in store do
          begin
            if not ((((1 = s.KeyData['s_store_sk']) and (ca.KeyData['ca_county'] = s.KeyData['s_county'])) and (ca.KeyData['ca_state'] = s.KeyData['s_state']))) then continue;
            _tmp8 := specialize TFPGMap<string, Variant>.Create;
            _tmp8.AddOrSetData('customer', c.KeyData['c_customer_sk']);
            _tmp8.AddOrSetData('amt', ss.KeyData['price']);
            _tmp7 := Concat(_tmp7, [_tmp8]);
          end;
        end;
      end;
    end;
  end;
  revenue := _tmp7;
  SetLength(_tmp9, 0);
  for r in revenue do
  begin
    _tmp9 := Concat(_tmp9, [r]);
  end;
  SetLength(_tmp10, 0);
  for r in _tmp9 do
  begin
    _tmp11 := r.KeyData['customer'];
    _tmp12 := VarToStr(_tmp11);
    _tmp13 := -1;
    for _tmp14 := 0 to High(_tmp10) do
      if VarToStr(_tmp10[_tmp14].Key) = _tmp12 then begin _tmp13 := _tmp14; Break; end;
    if _tmp13 = -1 then
    begin
      _tmp13 := Length(_tmp10);
      SetLength(_tmp10, _tmp13 + 1);
      _tmp10[_tmp13].Key := _tmp11;
      SetLength(_tmp10[_tmp13].Items, 0);
    end;
    SetLength(_tmp10[_tmp13].Items, Length(_tmp10[_tmp13].Items)+1);
    _tmp10[_tmp13].Items[High(_tmp10[_tmp13].Items)] := r;
  end;
  SetLength(_tmp16, 0);
  for _tmp15 in _tmp10 do
  begin
    _tmp17 := specialize TFPGMap<string, Variant>.Create;
    _tmp17.AddOrSetData('customer', g.key);
    SetLength(_tmp18, 0);
    for x in g do
    begin
      _tmp18 := Concat(_tmp18, [x.amt]);
    end;
    _tmp17.AddOrSetData('revenue', specialize _sumList<Variant>(_tmp18));
    _tmp16 := Concat(_tmp16, [_tmp17]);
  end;
  by_customer := _tmp16;
  _tmp19 := specialize TFPGMap<string, integer>.Create;
  _tmp19.AddOrSetData('seg', int(r.KeyData['revenue'] / 50));
  SetLength(_tmp20, 0);
  for r in by_customer do
  begin
    _tmp20 := Concat(_tmp20, [r]);
  end;
  SetLength(_tmp21, 0);
  for r in _tmp20 do
  begin
    _tmp22 := _tmp19;
    _tmp23 := VarToStr(_tmp22);
    _tmp24 := -1;
    for _tmp25 := 0 to High(_tmp21) do
      if VarToStr(_tmp21[_tmp25].Key) = _tmp23 then begin _tmp24 := _tmp25; Break; end;
    if _tmp24 = -1 then
    begin
      _tmp24 := Length(_tmp21);
      SetLength(_tmp21, _tmp24 + 1);
      _tmp21[_tmp24].Key := _tmp22;
      SetLength(_tmp21[_tmp24].Items, 0);
    end;
    SetLength(_tmp21[_tmp24].Items, Length(_tmp21[_tmp24].Items)+1);
    _tmp21[_tmp24].Items[High(_tmp21[_tmp24].Items)] := r;
  end;
  SetLength(_tmp27, 0);
  for _tmp26 in _tmp21 do
  begin
    _tmp28 := specialize TFPGMap<string, Variant>.Create;
    _tmp28.AddOrSetData('segment', g.key.seg);
    _tmp28.AddOrSetData('num_customers', Length(g));
    _tmp28.AddOrSetData('segment_base', g.key.seg * 50);
    _tmp27 := Concat(_tmp27, [_tmp28]);
  end;
  segments := _tmp27;
  _result := segments;
  specialize _json<specialize TArray<specialize TFPGMap<string, integer>>>(_result);
  test_TPCDS_Q54_simplified;
end.
