program main;
{$mode objfpc}

uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser;

type
  generic TArray<T> = array of T;

type CatalogSale = record
  cs_order_number: integer;
  cs_ship_date_sk: integer;
  cs_ship_addr_sk: integer;
  cs_call_center_sk: integer;
  cs_warehouse_sk: integer;
  cs_ext_ship_cost: double;
  cs_net_profit: double;
end;

type DateDim = record
  d_date_sk: integer;
  d_date: string;
end;

type CustomerAddress = record
  ca_address_sk: integer;
  ca_state: string;
end;

type CallCenter = record
  cc_call_center_sk: integer;
  cc_county: string;
end;

type CatalogReturn = record
  cr_order_number: integer;
end;

function distinct(xs: specialize TArray<integer>): specialize TArray<integer>;

var
  out: specialize TArray<integer>;
  x: integer;
begin
  out := specialize TArray<integer>([]);
  for x in xs do
    begin
      if not (Pos(x, out) > 0) then
        begin
          out := append(out, x);
        end;
    end;
  result := out;
  exit;
end;

procedure test_TPCDS_Q16_shipping;

var
  _tmp0: specialize TFPGMap<string, integer>;
begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('order_count', 1);
  _tmp0.AddOrSetData('total_shipping_cost', 5);
  _tmp0.AddOrSetData('total_net_profit', 20);
  if not ((filtered = specialize TArray<specialize TFPGMap<string, integer>>([_tmp0]))) then raise
    Exception.Create('expect failed');
end;

var
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp10: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp11: specialize TArray<integer>;
  _tmp12: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, integer>;
  _tmp5: specialize TFPGMap<string, integer>;
  _tmp6: specialize TArray<integer>;
  _tmp7: specialize TArray<integer>;
  _tmp8: specialize TArray<integer>;
  _tmp9: specialize TFPGMap<string, integer>;
  call_center: specialize TArray<specialize TFPGMap<string, integer>>;
  catalog_returns: specialize TArray<integer>;
  catalog_sales: specialize TArray<specialize TFPGMap<string, integer>>;
  cr: integer;
  cs1: specialize TFPGMap<string, integer>;
  cs2: specialize TFPGMap<string, integer>;
  customer_address: specialize TArray<specialize TFPGMap<string, integer>>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  filtered: specialize TArray<specialize TFPGMap<string, integer>>;
  x: integer;

  generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;

var i: integer;
  s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

begin
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('cs_order_nu_tmp1ber', 1);
  _tmp1.AddOrSetData('cs_ship_date_sk', 1);
  _tmp1.AddOrSetData('cs_ship_addr_sk', 1);
  _tmp1.AddOrSetData('cs_call_center_sk', 1);
  _tmp1.AddOrSetData('cs_warehouse_sk', 1);
  _tmp1.AddOrSetData('cs_ext_ship_cost', 5);
  _tmp1.AddOrSetData('cs_net_profit', 20);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('cs_order_nu_tmp2ber', 1);
  _tmp2.AddOrSetData('cs_ship_date_sk', 1);
  _tmp2.AddOrSetData('cs_ship_addr_sk', 1);
  _tmp2.AddOrSetData('cs_call_center_sk', 1);
  _tmp2.AddOrSetData('cs_warehouse_sk', 2);
  _tmp2.AddOrSetData('cs_ext_ship_cost', 0);
  _tmp2.AddOrSetData('cs_net_profit', 0);
  catalog_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('d_date_sk', 1);
  _tmp3.AddOrSetData('d_date', '2000-03-01');
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp3]);
  _tmp4 := specialize TFPGMap<string, integer>.Create;
  _tmp4.AddOrSetData('ca_address_sk', 1);
  _tmp4.AddOrSetData('ca_state', 'CA');
  customer_address := specialize TArray<specialize TFPGMap<string, integer>>([_tmp4]);
  _tmp5 := specialize TFPGMap<string, integer>.Create;
  _tmp5.AddOrSetData('cc_call_center_sk', 1);
  _tmp5.AddOrSetData('cc_county', 'CountyA');
  call_center := specialize TArray<specialize TFPGMap<string, integer>>([_tmp5]);
  catalog_returns := specialize TArray<integer>([]);
  SetLength(_tmp6, 0);
  for x in g do
    begin
      _tmp6 := Concat(_tmp6, [x.cs_order_number]);
    end;
  SetLength(_tmp7, 0);
  for x in g do
    begin
      _tmp7 := Concat(_tmp7, [x.cs_ext_ship_cost]);
    end;
  SetLength(_tmp8, 0);
  for x in g do
    begin
      _tmp8 := Concat(_tmp8, [x.cs_net_profit]);
    end;
  _tmp9 := specialize TFPGMap<string, integer>.Create;
  _tmp9.AddOrSetData('order_count', Length(distinct(_t_tmp9p6)));
  _tmp9.AddOrSetData('total_shipping_cost', specialize _su_tmp9List<integer>(_t_tmp9p7));
  _tmp9.AddOrSetData('total_net_profit', specialize _su_tmp9List<integer>(_t_tmp9p8));
  SetLength(_tmp10, 0);
  for cs2 in catalog_sales do
    begin
      if not (((cs1.cs_order_number = cs2.cs_order_number) and (cs1.cs_warehouse_sk <> cs2.
         cs_warehouse_sk))) then continue;
      _tmp10 := Concat(_tmp10, [cs2]);
    end;
  SetLength(_tmp11, 0);
  for cr in catalog_returns do
    begin
      if not ((cs1.cs_order_number = cr.cr_order_number)) then continue;
      _tmp11 := Concat(_tmp11, [cr]);
    end;
  SetLength(_tmp12, 0);
  for cs1 in catalog_sales do
    begin
      for d in date_dim do
        begin
          if not ((((cs1.cs_ship_date_sk = d.d_date_sk) and (d.d_date >= '2000-03-01')) and (d.
             d_date <= '2000-04-30'))) then continue;
          for ca in customer_address do
            begin
              if not (((cs1.cs_ship_addr_sk = ca.ca_address_sk) and (ca.ca_state = 'CA'))) then
                continue;
              for cc in call_center do
                begin
                  if not (((cs1.cs_call_center_sk = cc.cc_call_center_sk) and (cc.cc_county =
                     'CountyA'))) then continue;
                  if not ((exists(_tmp10) and (exists(_tmp11) = False))) then continue;
                  _tmp12 := Concat(_tmp12, [_tmp9]);
                end;
            end;
        end;
    end;
  filtered := _tmp12;
  specialize _json<specialize TArray<specialize TFPGMap<string, integer>>>(filtered);
  test_TPCDS_Q16_shipping;
end.
