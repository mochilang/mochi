// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:31Z
program Q86;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TArray<Variant>;
  _result: double;
  web_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  ws: specialize TFPGMap<string, Variant>;

procedure test_TPCDS_Q86_sample;
begin
  if not ((_result = 86)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('cat', 'A');
  _tmp0.AddOrSetData('class', 'B');
  _tmp0.AddOrSetData('net', 40);
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('cat', 'A');
  _tmp1.AddOrSetData('class', 'B');
  _tmp1.AddOrSetData('net', 46);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('cat', 'A');
  _tmp2.AddOrSetData('class', 'C');
  _tmp2.AddOrSetData('net', 10);
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('cat', 'B');
  _tmp3.AddOrSetData('class', 'B');
  _tmp3.AddOrSetData('net', 20);
  web_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1, _tmp2, _tmp3]);
  SetLength(_tmp4, 0);
  for ws in web_sales do
  begin
    if not (((ws.KeyData['cat'] = 'A') and (ws.KeyData['class'] = 'B'))) then continue;
    _tmp4 := Concat(_tmp4, [ws.KeyData['net']]);
  end;
  _result := specialize _sumList<Variant>(_tmp4);
  specialize _json<double>(_result);
  test_TPCDS_Q86_sample;
end.
