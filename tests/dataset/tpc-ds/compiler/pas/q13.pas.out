program main;
{$mode objfpc}

uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser;

type
  generic TArray<T> = array of T;

type StoreSale = record
  ss_store_sk: integer;
  ss_sold_date_sk: integer;
  ss_hdemo_sk: integer;
  ss_cdemo_sk: integer;
  ss_addr_sk: integer;
  ss_sales_price: double;
  ss_net_profit: double;
  ss_quantity: integer;
  ss_ext_sales_price: double;
  ss_ext_wholesale_cost: double;
end;

type Store = record
  s_store_sk: integer;
  s_state: string;
end;

type CustomerDemographics = record
  cd_demo_sk: integer;
  cd_marital_status: string;
  cd_education_status: string;
end;

type HouseholdDemographics = record
  hd_demo_sk: integer;
  hd_dep_count: integer;
end;

type CustomerAddress = record
  ca_address_sk: integer;
  ca_country: string;
  ca_state: string;
end;

type DateDim = record
  d_date_sk: integer;
  d_year: integer;
end;

procedure test_TPCDS_Q13_averages;

var
  _tmp0: specialize TFPGMap<string, integer>;
begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('avg_ss_quantity', 10);
  _tmp0.AddOrSetData('avg_ss_ext_sales_price', 100);
  _tmp0.AddOrSetData('avg_ss_ext_wholesale_cost', 50);
  _tmp0.AddOrSetData('su_tmp0_ss_ext_wholesale_cost', 50);
  if not ((_result = specialize TArray<specialize TFPGMap<string, double>>([_tmp0]))) then raise
    Exception.Create('expect failed');
end;

var
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp10: specialize TArray<integer>;
  _tmp11: specialize TArray<integer>;
  _tmp12: specialize TArray<integer>;
  _tmp13: specialize TFPGMap<string, integer>;
  _tmp14: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp15: specialize TArray<specialize _Group<specialize TFPGMap<string, integer>>>;
  _tmp16: specialize TArray<specialize TFPGMap<string, double>>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, integer>;
  _tmp5: specialize TFPGMap<string, integer>;
  _tmp6: specialize TFPGMap<string, integer>;
  _tmp7: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp8: specialize TFPGMap<string, integer>;
  _tmp9: specialize TArray<integer>;
  customer_address: specialize TArray<specialize TFPGMap<string, integer>>;
  customer_demographics: specialize TArray<specialize TFPGMap<string, integer>>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  filtered: specialize TArray<specialize TFPGMap<string, integer>>;
  household_demographics: specialize TArray<specialize TFPGMap<string, integer>>;
  r: specialize TFPGMap<string, integer>;
  _result: specialize TArray<specialize TFPGMap<string, double>>;
  ss: specialize TFPGMap<string, integer>;
  store: specialize TArray<specialize TFPGMap<string, integer>>;
  store_sales: specialize TArray<specialize TFPGMap<string, integer>>;
  x: integer;

  generic _Group<T> = record
    Key: Variant;
    Items: specialize TArray<T>;
  end;

  generic function _avgList<T>(arr: specialize TArray<T>): double;
begin
  if Length(arr) = 0 then exit(0);
  Result := specialize _sumList<T>(arr) / Length(arr);
end;

generic function _group_by<T>(src: specialize TArray<T>; keyfn: function(it: T): Variant):
                                                                                          specialize
                                                                                           TArray<
                                                                                          specialize
                                                                                           _Group<T>
                                                                                           >;

var i,j,idx: Integer;
  key: Variant;
  ks: string;
begin
  SetLength(Result, 0);
  for i := 0 to High(src) do
    begin
      key := keyfn(src[i]);
      ks := VarToStr(key);
      idx := -1;
      for j := 0 to High(Result) do
        if VarToStr(Result[j].Key) = ks then
          begin
            idx := j;
            Break;
          end;
      if idx = -1 then
        begin
          idx := Length(Result);
          SetLength(Result, idx + 1);
          Result[idx].Key := key;
          SetLength(Result[idx].Items, 0);
        end;
      SetLength(Result[idx].Items, Length(Result[idx].Items)+1);
      Result[idx].Items[High(Result[idx].Items)] := src[i];
    end;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;

var i: integer;
  s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

begin
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('ss_store_sk', 1);
  _tmp1.AddOrSetData('ss_sold_date_sk', 1);
  _tmp1.AddOrSetData('ss_hde_tmp1o_sk', 1);
  _tmp1.AddOrSetData('ss_cde_tmp1o_sk', 1);
  _tmp1.AddOrSetData('ss_addr_sk', 1);
  _tmp1.AddOrSetData('ss_sales_price', 120);
  _tmp1.AddOrSetData('ss_net_profit', 150);
  _tmp1.AddOrSetData('ss_quantity', 10);
  _tmp1.AddOrSetData('ss_ext_sales_price', 100);
  _tmp1.AddOrSetData('ss_ext_wholesale_cost', 50);
  store_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp1]);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('s_store_sk', 1);
  _tmp2.AddOrSetData('s_state', 'CA');
  store := specialize TArray<specialize TFPGMap<string, integer>>([_tmp2]);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('cd_de_tmp3o_sk', 1);
  _tmp3.AddOrSetData('cd__tmp3arital_status', 'M1');
  _tmp3.AddOrSetData('cd_education_status', 'ES1');
  customer_demographics := specialize TArray<specialize TFPGMap<string, integer>>([_tmp3]);
  _tmp4 := specialize TFPGMap<string, integer>.Create;
  _tmp4.AddOrSetData('hd_de_tmp4o_sk', 1);
  _tmp4.AddOrSetData('hd_dep_count', 3);
  household_demographics := specialize TArray<specialize TFPGMap<string, integer>>([_tmp4]);
  _tmp5 := specialize TFPGMap<string, integer>.Create;
  _tmp5.AddOrSetData('ca_address_sk', 1);
  _tmp5.AddOrSetData('ca_country', 'United States');
  _tmp5.AddOrSetData('ca_state', 'CA');
  customer_address := specialize TArray<specialize TFPGMap<string, integer>>([_tmp5]);
  _tmp6 := specialize TFPGMap<string, integer>.Create;
  _tmp6.AddOrSetData('d_date_sk', 1);
  _tmp6.AddOrSetData('d_year', 2001);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp6]);
  SetLength(_tmp7, 0);
  for ss in store_sales do
    begin
      for s in store do
        begin
          if not ((ss.ss_store_sk = s.s_store_sk)) then continue;
          for cd in customer_demographics do
            begin
              if not ((((ss.ss_cdemo_sk = cd.cd_demo_sk) and (cd.cd_marital_status = 'M1')) and (cd.
                 cd_education_status = 'ES1'))) then continue;
              for hd in household_demographics do
                begin
                  if not (((ss.ss_hdemo_sk = hd.hd_demo_sk) and (hd.hd_dep_count = 3))) then
                    continue;
                  for ca in customer_address do
                    begin
                      if not ((((ss.ss_addr_sk = ca.ca_address_sk) and (ca.ca_country =
                         'United States')) and (ca.ca_state = 'CA'))) then continue;
                      for d in date_dim do
                        begin
                          if not (((ss.ss_sold_date_sk = d.d_date_sk) and (d.d_year = 2001))) then
                            continue;
                          _tmp7 := Concat(_tmp7, [ss]);
                        end;
                    end;
                end;
            end;
        end;
    end;
  filtered := _tmp7;
  _tmp8 := specialize TFPGMap<string, integer>.Create;
  SetLength(_tmp9, 0);
  for x in g do
    begin
      _tmp9 := Concat(_tmp9, [x.ss_quantity]);
    end;
  SetLength(_tmp10, 0);
  for x in g do
    begin
      _tmp10 := Concat(_tmp10, [x.ss_ext_sales_price]);
    end;
  SetLength(_tmp11, 0);
  for x in g do
    begin
      _tmp11 := Concat(_tmp11, [x.ss_ext_wholesale_cost]);
    end;
  SetLength(_tmp12, 0);
  for x in g do
    begin
      _tmp12 := Concat(_tmp12, [x.ss_ext_wholesale_cost]);
    end;
  _tmp13 := specialize TFPGMap<string, integer>.Create;
  _tmp13.AddOrSetData('avg_ss_quantity', specialize _avgList<integer>(_t_tmp13p9));
  _tmp13.AddOrSetData('avg_ss_ext_sales_price', specialize _avgList<integer>(_t_tmp13p10));
  _tmp13.AddOrSetData('avg_ss_ext_wholesale_cost', specialize _avgList<integer>(_t_tmp13p11));
  _tmp13.AddOrSetData('su_tmp13_ss_ext_wholesale_cost', specialize _su_tmp13List<integer>(
                      _t_tmp13p12));
  SetLength(_tmp14, 0);
  for r in filtered do
    begin
      _tmp14 := Concat(_tmp14, [r]);
    end;
  _tmp15 := specialize _group_by<specialize TFPGMap<string, integer>>(_tmp14, function(r: specialize
            TFPGMap<string, integer>): Variant begin Result := _tmp8
end
);
SetLength(_tmp16, 0);
for g in _tmp15 do
  begin
    _tmp16 := Concat(_tmp16, [_tmp13]);
  end;
_result := _tmp16;
specialize _json<specialize TArray<specialize TFPGMap<string, double>>>(_result);
test_TPCDS_Q13_averages;
end.
