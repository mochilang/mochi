program main;
{$mode objfpc}

uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser;

type
  generic TArray<T> = array of T;

type CatalogSale = record
  cs_sold_date_sk: integer;
  cs_item_sk: integer;
  cs_bill_cdemo_sk: integer;
  cs_promo_sk: integer;
  cs_quantity: integer;
  cs_list_price: double;
  cs_coupon_amt: double;
  cs_sales_price: double;
end;

type CustomerDemo = record
  cd_demo_sk: integer;
  cd_gender: string;
  cd_marital_status: string;
  cd_education_status: string;
end;

type DateDim = record
  d_date_sk: integer;
  d_year: integer;
end;

type Item = record
  i_item_sk: integer;
  i_item_id: string;
end;

type Promotion = record
  p_promo_sk: integer;
  p_channel_email: string;
  p_channel_event: string;
end;

generic function _avgList<T>(arr: specialize TArray<T>): double;
begin
  if Length(arr) = 0 then exit(0);
  Result := specialize _sumList<T>(arr) / Length(arr);
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

var
  _tmp0: specialize TFPGMap<Variant, Variant>;
  _tmp1: specialize TFPGMap<Variant, Variant>;
  _tmp10: specialize TArray<Variant>;
  _tmp11: specialize TArray<Variant>;
  _tmp12: specialize TArray<Variant>;
  _tmp13: specialize TArray<Variant>;
  _tmp14: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp2: specialize TFPGMap<Variant, Variant>;
  _tmp3: specialize TFPGMap<Variant, Variant>;
  _tmp4: specialize TFPGMap<Variant, integer>;
  _tmp5: specialize TFPGMap<Variant, Variant>;
  _tmp6: specialize TFPGMap<Variant, Variant>;
  _tmp7: specialize TFPGMap<Variant, Variant>;
  _tmp8: specialize TFPGMap<Variant, Variant>;
  _tmp9: specialize TFPGMap<Variant, Variant>;
  catalog_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  cs: specialize TFPGMap<string, Variant>;
  customer_demographics: specialize TArray<specialize TFPGMap<string, Variant>>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  item: specialize TArray<specialize TFPGMap<string, Variant>>;
  promotion: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: integer;

procedure test_TPCDS_Q26_demographic_averages;

var
  _tmp15: specialize TFPGMap<Variant, Variant>;
begin
  _tmp15 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp15.AddOrSetData('i_item_id', 'ITEM1');
  _tmp15.AddOrSetData('agg1', 10);
  _tmp15.AddOrSetData('agg2', 100);
  _tmp15.AddOrSetData('agg3', 5);
  _tmp15.AddOrSetData('agg4', 95);
  if not ((_result = specialize TArray<specialize TFPGMap<string, Variant>>([_tmp15]))) then raise
    Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp0.AddOrSetData('cs_sold_date_sk', 1);
  _tmp0.AddOrSetData('cs_item_sk', 1);
  _tmp0.AddOrSetData('cs_bill_cdemo_sk', 1);
  _tmp0.AddOrSetData('cs_promo_sk', 1);
  _tmp0.AddOrSetData('cs_quantity', 10);
  _tmp0.AddOrSetData('cs_list_price', 100);
  _tmp0.AddOrSetData('cs_coupon_amt', 5);
  _tmp0.AddOrSetData('cs_sales_price', 95);
  _tmp1 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp1.AddOrSetData('cs_sold_date_sk', 1);
  _tmp1.AddOrSetData('cs_item_sk', 2);
  _tmp1.AddOrSetData('cs_bill_cdemo_sk', 2);
  _tmp1.AddOrSetData('cs_promo_sk', 2);
  _tmp1.AddOrSetData('cs_quantity', 5);
  _tmp1.AddOrSetData('cs_list_price', 50);
  _tmp1.AddOrSetData('cs_coupon_amt', 2);
  _tmp1.AddOrSetData('cs_sales_price', 48);
  catalog_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp2.AddOrSetData('cd_demo_sk', 1);
  _tmp2.AddOrSetData('cd_gender', 'M');
  _tmp2.AddOrSetData('cd_marital_status', 'S');
  _tmp2.AddOrSetData('cd_education_status', 'College');
  _tmp3 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp3.AddOrSetData('cd_demo_sk', 2);
  _tmp3.AddOrSetData('cd_gender', 'F');
  _tmp3.AddOrSetData('cd_marital_status', 'M');
  _tmp3.AddOrSetData('cd_education_status', 'High School');
  customer_demographics := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp2, _tmp3]);
  _tmp4 := specialize TFPGMap<Variant, integer>.Create;
  _tmp4.AddOrSetData('d_date_sk', 1);
  _tmp4.AddOrSetData('d_year', 2000);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp4]);
  _tmp5 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp5.AddOrSetData('i_item_sk', 1);
  _tmp5.AddOrSetData('i_item_id', 'ITEM1');
  _tmp6 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp6.AddOrSetData('i_item_sk', 2);
  _tmp6.AddOrSetData('i_item_id', 'ITEM2');
  item := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp5, _tmp6]);
  _tmp7 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp7.AddOrSetData('p_promo_sk', 1);
  _tmp7.AddOrSetData('p_channel_email', 'N');
  _tmp7.AddOrSetData('p_channel_event', 'Y');
  _tmp8 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp8.AddOrSetData('p_promo_sk', 2);
  _tmp8.AddOrSetData('p_channel_email', 'Y');
  _tmp8.AddOrSetData('p_channel_event', 'N');
  promotion := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp7, _tmp8]);
  _tmp9 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp9.AddOrSetData('i_item_id', g.key);
  SetLength(_tmp10, 0);
  for x in g do
    begin
      _tmp10 := Concat(_tmp10, [x.cs_quantity]);
    end;
  _tmp9.AddOrSetData('agg1', specialize _avgList<Variant>(_tmp10));
  SetLength(_tmp11, 0);
  for x in g do
    begin
      _tmp11 := Concat(_tmp11, [x.cs_list_price]);
    end;
  _tmp9.AddOrSetData('agg2', specialize _avgList<Variant>(_tmp11));
  SetLength(_tmp12, 0);
  for x in g do
    begin
      _tmp12 := Concat(_tmp12, [x.cs_coupon_amt]);
    end;
  _tmp9.AddOrSetData('agg3', specialize _avgList<Variant>(_tmp12));
  SetLength(_tmp13, 0);
  for x in g do
    begin
      _tmp13 := Concat(_tmp13, [x.cs_sales_price]);
    end;
  _tmp9.AddOrSetData('agg4', specialize _avgList<Variant>(_tmp13));
  SetLength(_tmp14, 0);
  for cs in catalog_sales do
    begin
      for cd in customer_demographics do
        begin
          if not ((cs.cs_bill_cdemo_sk = cd.cd_demo_sk)) then continue;
          for d in date_dim do
            begin
              if not ((cs.cs_sold_date_sk = d.d_date_sk)) then continue;
              for i in item do
                begin
                  if not ((cs.cs_item_sk = i.i_item_sk)) then continue;
                  for p in promotion do
                    begin
                      if not ((cs.cs_promo_sk = p.p_promo_sk)) then continue;
                      if not ((((((cd.cd_gender = 'M') and (cd.cd_marital_status = 'S')) and (cd.
                         cd_education_status = 'College')) and ((p.p_channel_email = 'N') or (p.
                         p_channel_event = 'N'))) and (d.d_year = 2000))) then continue;
                      _tmp14 := Concat(_tmp14, [_tmp9]);
                    end;
                end;
            end;
        end;
    end;
  _result := _tmp14;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q26_demographic_averages;
end.
