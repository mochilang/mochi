program main;
{$mode objfpc}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser, Math;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);
var i,j: integer; tmp: T; k: Variant;
begin
  for i := 0 to High(arr) - 1 do
  for j := i + 1 to High(arr) do
    if keys[i] > keys[j] then
    begin
      tmp := arr[i]; arr[i] := arr[j]; arr[j] := tmp;
      k := keys[i]; keys[i] := keys[j]; keys[j] := k;
    end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<Variant, Variant>;
  _tmp1: specialize TFPGMap<Variant, Variant>;
  _tmp10: specialize TArray<Variant>;
  _tmp11: specialize TArray<Variant>;
  _tmp12: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp13: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<Variant, Variant>;
  _tmp3: specialize TFPGMap<Variant, Variant>;
  _tmp4: specialize TFPGMap<Variant, Variant>;
  _tmp5: specialize TFPGMap<Variant, integer>;
  _tmp6: specialize TFPGMap<Variant, integer>;
  _tmp7: specialize TFPGMap<Variant, Variant>;
  _tmp8: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp9: specialize TFPGMap<Variant, Variant>;
  base: specialize TArray<specialize TFPGMap<string, Variant>>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  dt: specialize TFPGMap<string, integer>;
  item: specialize TArray<specialize TFPGMap<string, Variant>>;
  month: integer;
  r: specialize TFPGMap<string, integer>;
  records: specialize TArray<specialize TFPGMap<string, integer>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  store_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: integer;
  year: integer;

procedure test_TPCDS_Q42_simplified;
var
  _tmp14: specialize TFPGMap<Variant, Variant>;
  _tmp15: specialize TFPGMap<Variant, Variant>;
begin
  _tmp14 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp14.AddOrSetData('d_year', 2020);
  _tmp14.AddOrSetData('i_category_id', 200);
  _tmp14.AddOrSetData('i_category', 'CatB');
  _tmp14.AddOrSetData('sum_ss_ext_sales_price', 20);
  _tmp15 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp15.AddOrSetData('d_year', 2020);
  _tmp15.AddOrSetData('i_category_id', 100);
  _tmp15.AddOrSetData('i_category', 'CatA');
  _tmp15.AddOrSetData('sum_ss_ext_sales_price', 10);
  if not ((_result = specialize TArray<specialize TFPGMap<string, Variant>>([_tmp14, _tmp15]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp0.AddOrSetData('sold_date_sk', 1);
  _tmp0.AddOrSetData('item_sk', 1);
  _tmp0.AddOrSetData('ext_sales_price', 10);
  _tmp1 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp1.AddOrSetData('sold_date_sk', 1);
  _tmp1.AddOrSetData('item_sk', 2);
  _tmp1.AddOrSetData('ext_sales_price', 20);
  _tmp2 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp2.AddOrSetData('sold_date_sk', 2);
  _tmp2.AddOrSetData('item_sk', 1);
  _tmp2.AddOrSetData('ext_sales_price', 15);
  store_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp3.AddOrSetData('i_item_sk', 1);
  _tmp3.AddOrSetData('i_manager_id', 1);
  _tmp3.AddOrSetData('i_category_id', 100);
  _tmp3.AddOrSetData('i_category', 'CatA');
  _tmp4 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp4.AddOrSetData('i_item_sk', 2);
  _tmp4.AddOrSetData('i_manager_id', 2);
  _tmp4.AddOrSetData('i_category_id', 200);
  _tmp4.AddOrSetData('i_category', 'CatB');
  item := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp3, _tmp4]);
  _tmp5 := specialize TFPGMap<Variant, integer>.Create;
  _tmp5.AddOrSetData('d_date_sk', 1);
  _tmp5.AddOrSetData('d_year', 2020);
  _tmp5.AddOrSetData('d_moy', 5);
  _tmp6 := specialize TFPGMap<Variant, integer>.Create;
  _tmp6.AddOrSetData('d_date_sk', 2);
  _tmp6.AddOrSetData('d_year', 2021);
  _tmp6.AddOrSetData('d_moy', 5);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp5, _tmp6]);
  month := 5;
  year := 2020;
  _tmp7 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp7.AddOrSetData('d_year', dt.d_year);
  _tmp7.AddOrSetData('i_category_id', it.i_category_id);
  _tmp7.AddOrSetData('i_category', it.i_category);
  _tmp7.AddOrSetData('price', ss.ext_sales_price);
  SetLength(_tmp8, 0);
  for dt in date_dim do
  begin
    for ss in store_sales do
    begin
      if not ((ss.sold_date_sk = dt.d_date_sk)) then continue;
      for it in item do
      begin
        if not ((ss.item_sk = it.i_item_sk)) then continue;
        if not ((((it.i_manager_id = 1) and (dt.d_moy = month)) and (dt.d_year = year))) then continue;
        _tmp8 := Concat(_tmp8, [_tmp7]);
      end;
    end;
  end;
  records := _tmp8;
  _tmp9 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp9.AddOrSetData('d_year', g.key.d_year);
  _tmp9.AddOrSetData('i_category_id', g.key.i_category_id);
  _tmp9.AddOrSetData('i_category', g.key.i_category);
  SetLength(_tmp10, 0);
  for x in g do
  begin
    _tmp10 := Concat(_tmp10, [x.price]);
  end;
  _tmp9.AddOrSetData('sum_ss_ext_sales_price', specialize _sumList<Variant>(_tmp10));
  SetLength(_tmp11, 0);
  for x in g do
  begin
    _tmp11 := Concat(_tmp11, [x.price]);
  end;
  SetLength(_tmp12, 0);
  SetLength(_tmp13, 0);
  for r in records do
  begin
    _tmp12 := Concat(_tmp12, [_tmp9]);
    _tmp13 := Concat(_tmp13, [specialize TArray<specialize TFPGMap<string, Variant>>([-specialize _sumList<Variant>(_tmp11), g.key.d_year, g.key.i_category_id, g.key.i_category])]);
  end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp12, _tmp13);
  base := _tmp12;
  _result := base;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q42_simplified;
end.
