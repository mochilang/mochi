program main;
{$mode objfpc}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser, Math;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<Variant, integer>;
  _tmp1: specialize TFPGMap<Variant, integer>;
  _tmp10: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp11: specialize TFPGMap<string, integer>;
  _tmp12: specialize TFPGMap<Variant, Variant>;
  _tmp13: specialize TFPGMap<Variant, Variant>;
  _tmp14: specialize TFPGMap<Variant, Variant>;
  _tmp15: specialize TFPGMap<Variant, Variant>;
  _tmp2: specialize TFPGMap<Variant, integer>;
  _tmp3: specialize TFPGMap<Variant, integer>;
  _tmp4: specialize TFPGMap<Variant, Variant>;
  _tmp5: specialize TFPGMap<Variant, integer>;
  _tmp6: specialize TFPGMap<Variant, integer>;
  _tmp7: specialize TFPGMap<Variant, integer>;
  _tmp8: specialize TFPGMap<specialize TFPGMap<string, Variant>, Variant>;
  _tmp9: specialize TArray<Variant>;
  cov: Variant;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  g: Variant;
  grouped: specialize TFPGMap<string, specialize TFPGMap<string, Variant>>;
  inv: specialize TFPGMap<string, integer>;
  inventory: specialize TArray<specialize TFPGMap<string, integer>>;
  item: specialize TArray<specialize TFPGMap<string, integer>>;
  key: string;
  m: specialize TFPGMap<string, Variant>;
  mean: double;
  monthly: specialize TArray<specialize TFPGMap<string, Variant>>;
  q: Variant;
  summary: specialize TArray<Variant>;
  sumsq: double;
  variance: Variant;
  warehouse: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: integer;

procedure test_TPCDS_Q39_simplified;
var
  _tmp16: specialize TFPGMap<Variant, Variant>;
begin
  _tmp16 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp16.AddOrSetData('w_warehouse_sk', 1);
  _tmp16.AddOrSetData('i_item_sk', 1);
  _tmp16.AddOrSetData('cov', 1.539600717839002);
  if not ((summary = specialize TArray<specialize TFPGMap<string, Variant>>([_tmp16]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<Variant, integer>.Create;
  _tmp0.AddOrSetData('inv_item_sk', 1);
  _tmp0.AddOrSetData('inv_warehouse_sk', 1);
  _tmp0.AddOrSetData('inv_date_sk', 1);
  _tmp0.AddOrSetData('inv_quantity_on_hand', 10);
  _tmp1 := specialize TFPGMap<Variant, integer>.Create;
  _tmp1.AddOrSetData('inv_item_sk', 1);
  _tmp1.AddOrSetData('inv_warehouse_sk', 1);
  _tmp1.AddOrSetData('inv_date_sk', 2);
  _tmp1.AddOrSetData('inv_quantity_on_hand', 10);
  _tmp2 := specialize TFPGMap<Variant, integer>.Create;
  _tmp2.AddOrSetData('inv_item_sk', 1);
  _tmp2.AddOrSetData('inv_warehouse_sk', 1);
  _tmp2.AddOrSetData('inv_date_sk', 3);
  _tmp2.AddOrSetData('inv_quantity_on_hand', 250);
  inventory := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0, _tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<Variant, integer>.Create;
  _tmp3.AddOrSetData('i_item_sk', 1);
  item := specialize TArray<specialize TFPGMap<string, integer>>([_tmp3]);
  _tmp4 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp4.AddOrSetData('w_warehouse_sk', 1);
  _tmp4.AddOrSetData('w_warehouse_name', 'W1');
  warehouse := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4]);
  _tmp5 := specialize TFPGMap<Variant, integer>.Create;
  _tmp5.AddOrSetData('d_date_sk', 1);
  _tmp5.AddOrSetData('d_year', 2000);
  _tmp5.AddOrSetData('d_moy', 1);
  _tmp6 := specialize TFPGMap<Variant, integer>.Create;
  _tmp6.AddOrSetData('d_date_sk', 2);
  _tmp6.AddOrSetData('d_year', 2000);
  _tmp6.AddOrSetData('d_moy', 2);
  _tmp7 := specialize TFPGMap<Variant, integer>.Create;
  _tmp7.AddOrSetData('d_date_sk', 3);
  _tmp7.AddOrSetData('d_year', 2000);
  _tmp7.AddOrSetData('d_moy', 3);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp5, _tmp6, _tmp7]);
  _tmp8 := specialize TFPGMap<specialize TFPGMap<string, Variant>, Variant>.Create;
  _tmp8.AddOrSetData('w', g.key.w);
  _tmp8.AddOrSetData('i', g.key.i);
  SetLength(_tmp9, 0);
  for x in g do
  begin
    _tmp9 := Concat(_tmp9, [x.inv_quantity_on_hand]);
  end;
  _tmp8.AddOrSetData('qty', specialize _sumList<Variant>(_tmp9));
  SetLength(_tmp10, 0);
  for inv in inventory do
  begin
    for d in date_dim do
    begin
      if not ((inv.inv_date_sk = d.d_date_sk)) then continue;
      for i in item do
      begin
        if not ((inv.inv_item_sk = i.i_item_sk)) then continue;
        for w in warehouse do
        begin
          if not ((inv.inv_warehouse_sk = w.w_warehouse_sk)) then continue;
          if not ((d.d_year = 2000)) then continue;
          _tmp10 := Concat(_tmp10, [_tmp8]);
        end;
      end;
    end;
  end;
  monthly := _tmp10;
  _tmp11 := specialize TFPGMap<string, integer>.Create;
  grouped := _tmp11;
  for m in monthly do
  begin
    _tmp12 := specialize TFPGMap<Variant, Variant>.Create;
    _tmp12.AddOrSetData('w', m.w);
    _tmp12.AddOrSetData('i', m.i);
    key := IntToStr(_tmp12);
    if (grouped.IndexOf(key) >= 0) then
    begin
      g := grouped.KeyData[key];
      _tmp13 := specialize TFPGMap<Variant, Variant>.Create;
      _tmp13.AddOrSetData('w', g.w);
      _tmp13.AddOrSetData('i', g.i);
      _tmp13.AddOrSetData('qtys', append(g.qtys, m.qty));
      grouped.KeyData[key] := _tmp13;
    end else
    begin
      _tmp14 := specialize TFPGMap<Variant, Variant>.Create;
      _tmp14.AddOrSetData('w', m.w);
      _tmp14.AddOrSetData('i', m.i);
      _tmp14.AddOrSetData('qtys', specialize TArray<Variant>([m.qty]));
      grouped.KeyData[key] := _tmp14;
    end;
  end;
  summary := specialize TArray<Variant>([]);
  for g in values(grouped) do
  begin
    mean := 0;
    sumsq := 0;
    for q in g.qtys do
    begin
      sumsq := sumsq + q - mean * q - mean;
    end;
    variance := sumsq / Length(g.qtys) - 1;
    cov := math.sqrt(variance) / mean;
    if (cov > 1.5) then
    begin
      _tmp15 := specialize TFPGMap<Variant, Variant>.Create;
      _tmp15.AddOrSetData('w_warehouse_sk', g.w);
      _tmp15.AddOrSetData('i_item_sk', g.i);
      _tmp15.AddOrSetData('cov', cov);
      summary := append(summary, _tmp15);
    end;
  end;
  specialize _json<specialize TArray<Variant>>(summary);
  test_TPCDS_Q39_simplified;
end.
