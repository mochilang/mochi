// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:32Z
program Q91;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;
type CallCenter = record
  cc_call_center_sk: integer;
  cc_call_center_id: string;
  cc_name: string;
  cc_manager: string;
end;
type CatalogReturn = record
  cr_call_center_sk: integer;
  cr_returned_date_sk: integer;
  cr_returning_customer_sk: integer;
  cr_net_loss: double;
end;
type DateDim = record
  d_date_sk: integer;
  d_year: integer;
  d_moy: integer;
end;
type Customer = record
  c_customer_sk: integer;
  c_current_cdemo_sk: integer;
  c_current_hdemo_sk: integer;
  c_current_addr_sk: integer;
end;
type CustomerAddress = record
  ca_address_sk: integer;
  ca_gmt_offset: integer;
end;
type CustomerDemographics = record
  cd_demo_sk: integer;
  cd_marital_status: string;
  cd_education_status: string;
end;
type HouseholdDemographics = record
  hd_demo_sk: integer;
  hd_buy_potential: string;
end;

generic function _first<T>(arr: specialize TArray<T>): T;
begin
  if Length(arr) = 0 then exit(Default(T));
  Result := arr[0];
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, Variant>;
  _tmp5: specialize TFPGMap<string, Variant>;
  _tmp6: specialize TFPGMap<string, integer>;
  _tmp7: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp8: specialize TFPGMap<string, Variant>;
  _tmp9: specialize TArray<Variant>;
  c: specialize TFPGMap<string, integer>;
  ca: specialize TFPGMap<string, integer>;
  call_center: specialize TArray<specialize TFPGMap<string, Variant>>;
  catalog_returns: specialize TArray<specialize TFPGMap<string, Variant>>;
  cc: specialize TFPGMap<string, Variant>;
  cd: specialize TFPGMap<string, Variant>;
  cr: specialize TFPGMap<string, Variant>;
  customer: specialize TArray<specialize TFPGMap<string, integer>>;
  customer_address: specialize TArray<specialize TFPGMap<string, integer>>;
  customer_demographics: specialize TArray<specialize TFPGMap<string, Variant>>;
  d: specialize TFPGMap<string, integer>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  hd: specialize TFPGMap<string, Variant>;
  household_demographics: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: Variant;
  x: integer;

procedure test_TPCDS_Q91_returns;
var
  _tmp10: specialize TFPGMap<string, Variant>;
begin
  _tmp10 := specialize TFPGMap<string, Variant>.Create;
  _tmp10.AddOrSetData('Call_Center', 'CC1');
  _tmp10.AddOrSetData('Call_Center_Name', 'Main');
  _tmp10.AddOrSetData('Manager', 'Alice');
  _tmp10.AddOrSetData('Returns_Loss', 10);
  if not ((_result = _tmp10)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('cc_call_center_sk', 1);
  _tmp0.AddOrSetData('cc_call_center_id', 'CC1');
  _tmp0.AddOrSetData('cc_name', 'Main');
  _tmp0.AddOrSetData('cc_manager', 'Alice');
  call_center := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0]);
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('cr_call_center_sk', 1);
  _tmp1.AddOrSetData('cr_returned_date_sk', 1);
  _tmp1.AddOrSetData('cr_returning_customer_sk', 1);
  _tmp1.AddOrSetData('cr_net_loss', 10);
  catalog_returns := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp1]);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('d_date_sk', 1);
  _tmp2.AddOrSetData('d_year', 2001);
  _tmp2.AddOrSetData('d_moy', 5);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp2]);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('c_customer_sk', 1);
  _tmp3.AddOrSetData('c_current_cdemo_sk', 1);
  _tmp3.AddOrSetData('c_current_hdemo_sk', 1);
  _tmp3.AddOrSetData('c_current_addr_sk', 1);
  customer := specialize TArray<specialize TFPGMap<string, integer>>([_tmp3]);
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('cd_demo_sk', 1);
  _tmp4.AddOrSetData('cd_marital_status', 'M');
  _tmp4.AddOrSetData('cd_education_status', 'Unknown');
  customer_demographics := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4]);
  _tmp5 := specialize TFPGMap<string, Variant>.Create;
  _tmp5.AddOrSetData('hd_demo_sk', 1);
  _tmp5.AddOrSetData('hd_buy_potential', '1001-5000');
  household_demographics := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp5]);
  _tmp6 := specialize TFPGMap<string, integer>.Create;
  _tmp6.AddOrSetData('ca_address_sk', 1);
  _tmp6.AddOrSetData('ca_gmt_offset', -6);
  customer_address := specialize TArray<specialize TFPGMap<string, integer>>([_tmp6]);
  SetLength(_tmp7, 0);
  for cc in call_center do
  begin
    for cr in catalog_returns do
    begin
      if not ((cc.KeyData['cc_call_center_sk'] = cr.KeyData['cr_call_center_sk'])) then continue;
      for d in date_dim do
      begin
        if not ((cr.KeyData['cr_returned_date_sk'] = d.KeyData['d_date_sk'])) then continue;
        for c in customer do
        begin
          if not ((cr.KeyData['cr_returning_customer_sk'] = c.KeyData['c_customer_sk'])) then continue;
          for cd in customer_demographics do
          begin
            if not ((c.KeyData['c_current_cdemo_sk'] = cd.KeyData['cd_demo_sk'])) then continue;
            for hd in household_demographics do
            begin
              if not ((c.KeyData['c_current_hdemo_sk'] = hd.KeyData['hd_demo_sk'])) then continue;
              for ca in customer_address do
              begin
                if not ((c.KeyData['c_current_addr_sk'] = ca.KeyData['ca_address_sk'])) then continue;
                if not (((((((d.KeyData['d_year'] = 2001) and (d.KeyData['d_moy'] = 5)) and (cd.KeyData['cd_marital_status'] = 'M')) and (cd.KeyData['cd_education_status'] = 'Unknown')) and (hd.KeyData['hd_buy_potential'] = '1001-5000')) and (ca.KeyData['ca_gmt_offset'] = -6))) then continue;
                _tmp8 := specialize TFPGMap<string, Variant>.Create;
                _tmp8.AddOrSetData('Call_Center', g.key.id);
                _tmp8.AddOrSetData('Call_Center_Name', g.key.name);
                _tmp8.AddOrSetData('Manager', g.key.mgr);
                SetLength(_tmp9, 0);
                for x in g do
                begin
                  _tmp9 := Concat(_tmp9, [x.cr_net_loss]);
                end;
                _tmp8.AddOrSetData('Returns_Loss', specialize _sumList<Variant>(_tmp9));
                _tmp7 := Concat(_tmp7, [_tmp8]);
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  _result := specialize _first<_>(_tmp7);
  specialize _json<Variant>(_result);
  test_TPCDS_Q91_returns;
end.
