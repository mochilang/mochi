// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:29Z
program Q67;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic function _containsList<T>(arr: specialize TArray<T>; v: T): boolean;
var i: Integer;
begin
  Result := False;
  for i := 0 to High(arr) do
    if arr[i] = v then exit(True);
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, integer>;
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TArray<integer>;
  r: specialize TFPGMap<string, Variant>;
  reason: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: double;
  ss: specialize TFPGMap<string, integer>;
  store_sales: specialize TArray<specialize TFPGMap<string, integer>>;

procedure test_TPCDS_Q67_simplified;
begin
  if not ((_result = 67)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('reason', 1);
  _tmp0.AddOrSetData('price', 40);
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('reason', 2);
  _tmp1.AddOrSetData('price', 27);
  store_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('id', 1);
  _tmp2.AddOrSetData('name', 'PROMO');
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('id', 2);
  _tmp3.AddOrSetData('name', 'RETURN');
  reason := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp2, _tmp3]);
  SetLength(_tmp4, 0);
  for ss in store_sales do
  begin
    for r in reason do
    begin
      if not ((ss.KeyData['reason'] = r.KeyData['id'])) then continue;
      if not (specialize _containsList<string>(specialize TArray<string>(['PROMO', 'RETURN']), r.KeyData['name'])) then continue;
      _tmp4 := Concat(_tmp4, [ss.KeyData['price']]);
    end;
  end;
  _result := specialize _sumList<integer>(_tmp4);
  specialize _json<double>(_result);
  test_TPCDS_Q67_simplified;
end.
