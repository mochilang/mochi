program main;
{$mode objfpc}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser, Math;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<Variant, Variant>;
  _tmp1: specialize TFPGMap<Variant, Variant>;
  _tmp10: specialize TFPGMap<Variant, integer>;
  _tmp11: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<Variant, Variant>;
  _tmp3: specialize TFPGMap<Variant, integer>;
  _tmp4: specialize TFPGMap<Variant, Variant>;
  _tmp5: specialize TFPGMap<Variant, Variant>;
  _tmp6: specialize TFPGMap<Variant, Variant>;
  _tmp7: specialize TFPGMap<Variant, Variant>;
  _tmp8: specialize TFPGMap<Variant, Variant>;
  _tmp9: specialize TFPGMap<Variant, Variant>;
  customer_address: specialize TArray<specialize TFPGMap<string, Variant>>;
  customer_demographics: specialize TArray<specialize TFPGMap<string, Variant>>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  qty: specialize TArray<Variant>;
  qty_base: specialize TArray<Variant>;
  _result: double;
  ss: specialize TFPGMap<string, Variant>;
  states1: specialize TArray<string>;
  states2: specialize TArray<string>;
  states3: specialize TArray<string>;
  store: specialize TArray<specialize TFPGMap<string, integer>>;
  store_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  year: integer;

procedure test_TPCDS_Q48_simplified;
begin
  if not ((_result = 35)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp0.AddOrSetData('cdemo_sk', 1);
  _tmp0.AddOrSetData('addr_sk', 1);
  _tmp0.AddOrSetData('sold_date_sk', 1);
  _tmp0.AddOrSetData('sales_price', 120);
  _tmp0.AddOrSetData('net_profit', 1000);
  _tmp0.AddOrSetData('quantity', 5);
  _tmp1 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp1.AddOrSetData('cdemo_sk', 2);
  _tmp1.AddOrSetData('addr_sk', 2);
  _tmp1.AddOrSetData('sold_date_sk', 1);
  _tmp1.AddOrSetData('sales_price', 60);
  _tmp1.AddOrSetData('net_profit', 2000);
  _tmp1.AddOrSetData('quantity', 10);
  _tmp2 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp2.AddOrSetData('cdemo_sk', 3);
  _tmp2.AddOrSetData('addr_sk', 3);
  _tmp2.AddOrSetData('sold_date_sk', 1);
  _tmp2.AddOrSetData('sales_price', 170);
  _tmp2.AddOrSetData('net_profit', 10000);
  _tmp2.AddOrSetData('quantity', 20);
  store_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<Variant, integer>.Create;
  _tmp3.AddOrSetData('s_store_sk', 1);
  store := specialize TArray<specialize TFPGMap<string, integer>>([_tmp3]);
  _tmp4 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp4.AddOrSetData('cd_demo_sk', 1);
  _tmp4.AddOrSetData('cd_marital_status', 'S');
  _tmp4.AddOrSetData('cd_education_status', 'E1');
  _tmp5 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp5.AddOrSetData('cd_demo_sk', 2);
  _tmp5.AddOrSetData('cd_marital_status', 'M');
  _tmp5.AddOrSetData('cd_education_status', 'E2');
  _tmp6 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp6.AddOrSetData('cd_demo_sk', 3);
  _tmp6.AddOrSetData('cd_marital_status', 'W');
  _tmp6.AddOrSetData('cd_education_status', 'E3');
  customer_demographics := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4, _tmp5, _tmp6]);
  _tmp7 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp7.AddOrSetData('ca_address_sk', 1);
  _tmp7.AddOrSetData('ca_country', 'United States');
  _tmp7.AddOrSetData('ca_state', 'TX');
  _tmp8 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp8.AddOrSetData('ca_address_sk', 2);
  _tmp8.AddOrSetData('ca_country', 'United States');
  _tmp8.AddOrSetData('ca_state', 'CA');
  _tmp9 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp9.AddOrSetData('ca_address_sk', 3);
  _tmp9.AddOrSetData('ca_country', 'United States');
  _tmp9.AddOrSetData('ca_state', 'NY');
  customer_address := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp7, _tmp8, _tmp9]);
  _tmp10 := specialize TFPGMap<Variant, integer>.Create;
  _tmp10.AddOrSetData('d_date_sk', 1);
  _tmp10.AddOrSetData('d_year', 2000);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp10]);
  year := 2000;
  states1 := specialize TArray<string>(['TX']);
  states2 := specialize TArray<string>(['CA']);
  states3 := specialize TArray<string>(['NY']);
  SetLength(_tmp11, 0);
  for ss in store_sales do
  begin
    for cd in customer_demographics do
    begin
      if not ((ss.cdemo_sk = cd.cd_demo_sk)) then continue;
      for ca in customer_address do
      begin
        if not ((ss.addr_sk = ca.ca_address_sk)) then continue;
        for d in date_dim do
        begin
          if not ((ss.sold_date_sk = d.d_date_sk)) then continue;
          if not ((((d.d_year = year) and ((((((cd.cd_marital_status = 'S') and (cd.cd_education_status = 'E1')) and (ss.sales_price >= 100)) and (ss.sales_price <= 150)) or ((((cd.cd_marital_status = 'M') and (cd.cd_education_status = 'E2')) and (ss.sales_price >= 50)) and (ss.sales_price <= 100))) or ((((cd.cd_marital_status = 'W') and (cd.cd_education_status = 'E3')) and (ss.sales_price >= 150)) and (ss.sales_price <= 200)))) and (((((ca.ca_state in states1) and (ss.net_profit >= 0)) and (ss.net_profit <= 2000)) or (((ca.ca_state in states2) and (ss.net_profit >= 150)) and (ss.net_profit <= 3000))) or (((ca.ca_state in states3) and (ss.net_profit >= 50)) and (ss.net_profit <= 25000))))) then continue;
          _tmp11 := Concat(_tmp11, [ss.quantity]);
        end;
      end;
    end;
  end;
  qty_base := _tmp11;
  qty := qty_base;
  _result := specialize _sumList<Variant>(qty);
  specialize _json<double>(_result);
  test_TPCDS_Q48_simplified;
end.
