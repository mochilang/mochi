// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:27Z
program Q59;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp2: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp3: specialize TFPGMap<string, Variant>;
  join: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  sales_year1: specialize TArray<specialize TFPGMap<string, Variant>>;
  sales_year2: specialize TArray<specialize TFPGMap<string, Variant>>;
  y1: specialize TFPGMap<string, Variant>;
  y2: specialize TFPGMap<string, Variant>;

procedure test_TPCDS_Q59_simplified;
var
  _tmp4: specialize TFPGMap<string, Variant>;
begin
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('s_store_id1', 1);
  _tmp4.AddOrSetData('ratio', 1.5);
  if not ((_result = specialize TArray<_>([_tmp4]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('week', 1);
  _tmp0.AddOrSetData('store', 1);
  _tmp0.AddOrSetData('amount', 100);
  sales_year1 := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0]);
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('week', 53);
  _tmp1.AddOrSetData('store', 1);
  _tmp1.AddOrSetData('amount', 150);
  sales_year2 := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp1]);
  SetLength(_tmp2, 0);
  for y1 in sales_year1 do
  begin
    for y2 in sales_year2 do
    begin
      if not (((y1.KeyData['store'] = y2.KeyData['store']) and (y1.KeyData['week'] = y2.KeyData['week'] - 52))) then continue;
      _tmp3 := specialize TFPGMap<string, Variant>.Create;
      _tmp3.AddOrSetData('s_store_id1', y1.KeyData['store']);
      _tmp3.AddOrSetData('ratio', y2.KeyData['amount'] / y1.KeyData['amount']);
      _tmp2 := Concat(_tmp2, [_tmp3]);
    end;
  end;
  join := _tmp2;
  _result := join;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q59_simplified;
end.
