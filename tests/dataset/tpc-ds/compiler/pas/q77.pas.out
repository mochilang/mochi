// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:30Z
program Q77;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);
var i,j: integer; tmp: T; k: Variant;
begin
  for i := 0 to High(arr) - 1 do
  for j := i + 1 to High(arr) do
    if keys[i] > keys[j] then
    begin
      tmp := arr[i]; arr[i] := arr[j]; arr[j] := tmp;
      k := keys[i]; keys[i] := keys[j]; keys[j] := k;
    end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, integer>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: specialize TArray<Variant>;
  _tmp11: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp12: specialize TFPGMap<string, Variant>;
  _tmp13: specialize TArray<Variant>;
  _tmp14: specialize TArray<Variant>;
  _tmp15: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp16: specialize TFPGMap<string, Variant>;
  _tmp17: specialize TArray<Variant>;
  _tmp18: specialize TArray<Variant>;
  _tmp19: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp20: specialize TFPGMap<string, Variant>;
  _tmp21: specialize TArray<Variant>;
  _tmp22: specialize TArray<Variant>;
  _tmp23: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp24: specialize TFPGMap<string, Variant>;
  _tmp25: specialize TArray<Variant>;
  _tmp26: specialize TArray<Variant>;
  _tmp27: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp28: specialize TFPGMap<string, Variant>;
  _tmp29: specialize TArray<Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp30: specialize TArray<Variant>;
  _tmp31: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp32: boolean;
  _tmp33: specialize TFPGMap<string, Variant>;
  _tmp34: specialize TArray<Variant>;
  _tmp35: specialize TArray<Variant>;
  _tmp36: specialize TFPGMap<string, Variant>;
  _tmp37: specialize TArray<Variant>;
  _tmp38: specialize TArray<Variant>;
  _tmp39: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp4: specialize TFPGMap<string, Variant>;
  _tmp40: specialize TFPGMap<string, Variant>;
  _tmp41: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp42: boolean;
  _tmp43: specialize TFPGMap<string, Variant>;
  _tmp44: specialize TArray<Variant>;
  _tmp45: specialize TArray<Variant>;
  _tmp46: specialize TFPGMap<string, Variant>;
  _tmp47: specialize TArray<Variant>;
  _tmp48: specialize TArray<Variant>;
  _tmp49: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp5: specialize TFPGMap<string, Variant>;
  _tmp50: specialize TArray<Variant>;
  _tmp51: specialize TFPGMap<string, Variant>;
  _tmp52: specialize TArray<Variant>;
  _tmp53: specialize TArray<Variant>;
  _tmp54: specialize TArray<Variant>;
  _tmp6: specialize TFPGMap<string, Variant>;
  _tmp7: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp8: specialize TFPGMap<string, Variant>;
  _tmp9: specialize TArray<Variant>;
  c: specialize TFPGMap<string, Variant>;
  catalog_returns: specialize TArray<specialize TFPGMap<string, Variant>>;
  catalog_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  cr: specialize TFPGMap<string, Variant>;
  cs: specialize TFPGMap<string, Variant>;
  d: specialize TFPGMap<string, integer>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  p: Variant;
  per_channel: specialize TArray<Variant>;
  r: specialize TFPGMap<string, Variant>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  s: specialize TFPGMap<string, Variant>;
  sr: specialize TFPGMap<string, Variant>;
  ss: specialize TFPGMap<string, Variant>;
  store_returns: specialize TArray<specialize TFPGMap<string, Variant>>;
  store_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  w: specialize TFPGMap<string, Variant>;
  web_returns: specialize TArray<specialize TFPGMap<string, Variant>>;
  web_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  wr: specialize TFPGMap<string, Variant>;
  ws: specialize TFPGMap<string, Variant>;
  x: integer;

procedure test_TPCDS_Q77_simplified;
var
  _tmp55: specialize TFPGMap<string, Variant>;
  _tmp56: specialize TFPGMap<string, Variant>;
  _tmp57: specialize TFPGMap<string, Variant>;
begin
  _tmp55 := specialize TFPGMap<string, Variant>.Create;
  _tmp55.AddOrSetData('channel', 'catalog channel');
  _tmp55.AddOrSetData('id', 1);
  _tmp55.AddOrSetData('sales', 150);
  _tmp55.AddOrSetData('returns', 7);
  _tmp55.AddOrSetData('profit', 12);
  _tmp56 := specialize TFPGMap<string, Variant>.Create;
  _tmp56.AddOrSetData('channel', 'store channel');
  _tmp56.AddOrSetData('id', 1);
  _tmp56.AddOrSetData('sales', 100);
  _tmp56.AddOrSetData('returns', 5);
  _tmp56.AddOrSetData('profit', 9);
  _tmp57 := specialize TFPGMap<string, Variant>.Create;
  _tmp57.AddOrSetData('channel', 'web channel');
  _tmp57.AddOrSetData('id', 1);
  _tmp57.AddOrSetData('sales', 200);
  _tmp57.AddOrSetData('returns', 10);
  _tmp57.AddOrSetData('profit', 18);
  if not ((_result = specialize TArray<_>([_tmp55, _tmp56, _tmp57]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('d_date_sk', 1);
  _tmp0.AddOrSetData('d_date', 1);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0]);
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('ss_sold_date_sk', 1);
  _tmp1.AddOrSetData('s_store_sk', 1);
  _tmp1.AddOrSetData('ss_ext_sales_price', 100);
  _tmp1.AddOrSetData('ss_net_profit', 10);
  store_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp1]);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('sr_returned_date_sk', 1);
  _tmp2.AddOrSetData('s_store_sk', 1);
  _tmp2.AddOrSetData('sr_return_amt', 5);
  _tmp2.AddOrSetData('sr_net_loss', 1);
  store_returns := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp2]);
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('cs_sold_date_sk', 1);
  _tmp3.AddOrSetData('cs_call_center_sk', 1);
  _tmp3.AddOrSetData('cs_ext_sales_price', 150);
  _tmp3.AddOrSetData('cs_net_profit', 15);
  catalog_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp3]);
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('cr_returned_date_sk', 1);
  _tmp4.AddOrSetData('cr_call_center_sk', 1);
  _tmp4.AddOrSetData('cr_return_amount', 7);
  _tmp4.AddOrSetData('cr_net_loss', 3);
  catalog_returns := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4]);
  _tmp5 := specialize TFPGMap<string, Variant>.Create;
  _tmp5.AddOrSetData('ws_sold_date_sk', 1);
  _tmp5.AddOrSetData('ws_web_page_sk', 1);
  _tmp5.AddOrSetData('ws_ext_sales_price', 200);
  _tmp5.AddOrSetData('ws_net_profit', 20);
  web_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp5]);
  _tmp6 := specialize TFPGMap<string, Variant>.Create;
  _tmp6.AddOrSetData('wr_returned_date_sk', 1);
  _tmp6.AddOrSetData('wr_web_page_sk', 1);
  _tmp6.AddOrSetData('wr_return_amt', 10);
  _tmp6.AddOrSetData('wr_net_loss', 2);
  web_returns := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp6]);
  SetLength(_tmp7, 0);
  for ss in store_sales do
  begin
    for d in date_dim do
    begin
      if not ((d.KeyData['d_date_sk'] = ss.KeyData['ss_sold_date_sk'])) then continue;
      _tmp8 := specialize TFPGMap<string, Variant>.Create;
      _tmp8.AddOrSetData('s_store_sk', g.key);
      SetLength(_tmp9, 0);
      for x in g do
      begin
        _tmp9 := Concat(_tmp9, [x.ss.ss_ext_sales_price]);
      end;
      _tmp8.AddOrSetData('sales', specialize _sumList<Variant>(_tmp9));
      SetLength(_tmp10, 0);
      for x in g do
      begin
        _tmp10 := Concat(_tmp10, [x.ss.ss_net_profit]);
      end;
      _tmp8.AddOrSetData('profit', specialize _sumList<Variant>(_tmp10));
      _tmp7 := Concat(_tmp7, [_tmp8]);
    end;
  end;
  ss := _tmp7;
  SetLength(_tmp11, 0);
  for sr in store_returns do
  begin
    for d in date_dim do
    begin
      if not ((d.KeyData['d_date_sk'] = sr.KeyData['sr_returned_date_sk'])) then continue;
      _tmp12 := specialize TFPGMap<string, Variant>.Create;
      _tmp12.AddOrSetData('s_store_sk', g.key);
      SetLength(_tmp13, 0);
      for x in g do
      begin
        _tmp13 := Concat(_tmp13, [x.sr.sr_return_amt]);
      end;
      _tmp12.AddOrSetData('returns', specialize _sumList<Variant>(_tmp13));
      SetLength(_tmp14, 0);
      for x in g do
      begin
        _tmp14 := Concat(_tmp14, [x.sr.sr_net_loss]);
      end;
      _tmp12.AddOrSetData('profit_loss', specialize _sumList<Variant>(_tmp14));
      _tmp11 := Concat(_tmp11, [_tmp12]);
    end;
  end;
  sr := _tmp11;
  SetLength(_tmp15, 0);
  for cs in catalog_sales do
  begin
    for d in date_dim do
    begin
      if not ((d.KeyData['d_date_sk'] = cs.KeyData['cs_sold_date_sk'])) then continue;
      _tmp16 := specialize TFPGMap<string, Variant>.Create;
      _tmp16.AddOrSetData('cs_call_center_sk', g.key);
      SetLength(_tmp17, 0);
      for x in g do
      begin
        _tmp17 := Concat(_tmp17, [x.cs.cs_ext_sales_price]);
      end;
      _tmp16.AddOrSetData('sales', specialize _sumList<Variant>(_tmp17));
      SetLength(_tmp18, 0);
      for x in g do
      begin
        _tmp18 := Concat(_tmp18, [x.cs.cs_net_profit]);
      end;
      _tmp16.AddOrSetData('profit', specialize _sumList<Variant>(_tmp18));
      _tmp15 := Concat(_tmp15, [_tmp16]);
    end;
  end;
  cs := _tmp15;
  SetLength(_tmp19, 0);
  for cr in catalog_returns do
  begin
    for d in date_dim do
    begin
      if not ((d.KeyData['d_date_sk'] = cr.KeyData['cr_returned_date_sk'])) then continue;
      _tmp20 := specialize TFPGMap<string, Variant>.Create;
      _tmp20.AddOrSetData('cr_call_center_sk', g.key);
      SetLength(_tmp21, 0);
      for x in g do
      begin
        _tmp21 := Concat(_tmp21, [x.cr.cr_return_amount]);
      end;
      _tmp20.AddOrSetData('returns', specialize _sumList<Variant>(_tmp21));
      SetLength(_tmp22, 0);
      for x in g do
      begin
        _tmp22 := Concat(_tmp22, [x.cr.cr_net_loss]);
      end;
      _tmp20.AddOrSetData('profit_loss', specialize _sumList<Variant>(_tmp22));
      _tmp19 := Concat(_tmp19, [_tmp20]);
    end;
  end;
  cr := _tmp19;
  SetLength(_tmp23, 0);
  for ws in web_sales do
  begin
    for d in date_dim do
    begin
      if not ((d.KeyData['d_date_sk'] = ws.KeyData['ws_sold_date_sk'])) then continue;
      _tmp24 := specialize TFPGMap<string, Variant>.Create;
      _tmp24.AddOrSetData('wp_web_page_sk', g.key);
      SetLength(_tmp25, 0);
      for x in g do
      begin
        _tmp25 := Concat(_tmp25, [x.ws.ws_ext_sales_price]);
      end;
      _tmp24.AddOrSetData('sales', specialize _sumList<Variant>(_tmp25));
      SetLength(_tmp26, 0);
      for x in g do
      begin
        _tmp26 := Concat(_tmp26, [x.ws.ws_net_profit]);
      end;
      _tmp24.AddOrSetData('profit', specialize _sumList<Variant>(_tmp26));
      _tmp23 := Concat(_tmp23, [_tmp24]);
    end;
  end;
  ws := _tmp23;
  SetLength(_tmp27, 0);
  for wr in web_returns do
  begin
    for d in date_dim do
    begin
      if not ((d.KeyData['d_date_sk'] = wr.KeyData['wr_returned_date_sk'])) then continue;
      _tmp28 := specialize TFPGMap<string, Variant>.Create;
      _tmp28.AddOrSetData('wp_web_page_sk', g.key);
      SetLength(_tmp29, 0);
      for x in g do
      begin
        _tmp29 := Concat(_tmp29, [x.wr.wr_return_amt]);
      end;
      _tmp28.AddOrSetData('returns', specialize _sumList<Variant>(_tmp29));
      SetLength(_tmp30, 0);
      for x in g do
      begin
        _tmp30 := Concat(_tmp30, [x.wr.wr_net_loss]);
      end;
      _tmp28.AddOrSetData('profit_loss', specialize _sumList<Variant>(_tmp30));
      _tmp27 := Concat(_tmp27, [_tmp28]);
    end;
  end;
  wr := _tmp27;
  SetLength(_tmp31, 0);
  for s in ss do
  begin
    _tmp32 := False;
    for r in sr do
    begin
      if not ((s.KeyData['s_store_sk'] = r.KeyData['s_store_sk'])) then continue;
      _tmp32 := True;
      _tmp33 := specialize TFPGMap<string, Variant>.Create;
      _tmp33.AddOrSetData('channel', 'store channel');
      _tmp33.AddOrSetData('id', s.KeyData['s_store_sk']);
      _tmp33.AddOrSetData('sales', s.KeyData['sales']);
      if (r = Null) then
      begin
        _tmp34 := 0;
      end else
      begin
        _tmp34 := r.KeyData['returns'];
      end;
      _tmp33.AddOrSetData('returns', _tmp34);
      if (r = Null) then
      begin
        _tmp35 := 0;
      end else
      begin
        _tmp35 := r.KeyData['profit_loss'];
      end;
      _tmp33.AddOrSetData('profit', s.KeyData['profit'] - _tmp35);
      _tmp31 := Concat(_tmp31, [_tmp33]);
    end;
    if not _tmp32 then
    begin
      r := nil;
      _tmp36 := specialize TFPGMap<string, Variant>.Create;
      _tmp36.AddOrSetData('channel', 'store channel');
      _tmp36.AddOrSetData('id', s.KeyData['s_store_sk']);
      _tmp36.AddOrSetData('sales', s.KeyData['sales']);
      if (r = Null) then
      begin
        _tmp37 := 0;
      end else
      begin
        _tmp37 := r.KeyData['returns'];
      end;
      _tmp36.AddOrSetData('returns', _tmp37);
      if (r = Null) then
      begin
        _tmp38 := 0;
      end else
      begin
        _tmp38 := r.KeyData['profit_loss'];
      end;
      _tmp36.AddOrSetData('profit', s.KeyData['profit'] - _tmp38);
      _tmp31 := Concat(_tmp31, [_tmp36]);
    end;
  end;
  SetLength(_tmp39, 0);
  for c in cs do
  begin
    for r in cr do
    begin
      if not ((c.KeyData['cs_call_center_sk'] = r.KeyData['cr_call_center_sk'])) then continue;
      _tmp40 := specialize TFPGMap<string, Variant>.Create;
      _tmp40.AddOrSetData('channel', 'catalog channel');
      _tmp40.AddOrSetData('id', c.KeyData['cs_call_center_sk']);
      _tmp40.AddOrSetData('sales', c.KeyData['sales']);
      _tmp40.AddOrSetData('returns', r.KeyData['returns']);
      _tmp40.AddOrSetData('profit', c.KeyData['profit'] - r.KeyData['profit_loss']);
      _tmp39 := Concat(_tmp39, [_tmp40]);
    end;
  end;
  SetLength(_tmp41, 0);
  for w in ws do
  begin
    _tmp42 := False;
    for r in wr do
    begin
      if not ((w.KeyData['wp_web_page_sk'] = r.KeyData['wp_web_page_sk'])) then continue;
      _tmp42 := True;
      _tmp43 := specialize TFPGMap<string, Variant>.Create;
      _tmp43.AddOrSetData('channel', 'web channel');
      _tmp43.AddOrSetData('id', w.KeyData['wp_web_page_sk']);
      _tmp43.AddOrSetData('sales', w.KeyData['sales']);
      if (r = Null) then
      begin
        _tmp44 := 0;
      end else
      begin
        _tmp44 := r.KeyData['returns'];
      end;
      _tmp43.AddOrSetData('returns', _tmp44);
      if (r = Null) then
      begin
        _tmp45 := 0;
      end else
      begin
        _tmp45 := r.KeyData['profit_loss'];
      end;
      _tmp43.AddOrSetData('profit', w.KeyData['profit'] - _tmp45);
      _tmp41 := Concat(_tmp41, [_tmp43]);
    end;
    if not _tmp42 then
    begin
      r := nil;
      _tmp46 := specialize TFPGMap<string, Variant>.Create;
      _tmp46.AddOrSetData('channel', 'web channel');
      _tmp46.AddOrSetData('id', w.KeyData['wp_web_page_sk']);
      _tmp46.AddOrSetData('sales', w.KeyData['sales']);
      if (r = Null) then
      begin
        _tmp47 := 0;
      end else
      begin
        _tmp47 := r.KeyData['returns'];
      end;
      _tmp46.AddOrSetData('returns', _tmp47);
      if (r = Null) then
      begin
        _tmp48 := 0;
      end else
      begin
        _tmp48 := r.KeyData['profit_loss'];
      end;
      _tmp46.AddOrSetData('profit', w.KeyData['profit'] - _tmp48);
      _tmp41 := Concat(_tmp41, [_tmp46]);
    end;
  end;
  per_channel := Concat(Concat(_tmp31, _tmp39), _tmp41);
  SetLength(_tmp49, 0);
  SetLength(_tmp50, 0);
  for p in per_channel do
  begin
    _tmp51 := specialize TFPGMap<string, Variant>.Create;
    _tmp51.AddOrSetData('channel', g.key.channel);
    _tmp51.AddOrSetData('id', g.key.id);
    SetLength(_tmp52, 0);
    for x in g do
    begin
      _tmp52 := Concat(_tmp52, [x.p.sales]);
    end;
    _tmp51.AddOrSetData('sales', specialize _sumList<Variant>(_tmp52));
    SetLength(_tmp53, 0);
    for x in g do
    begin
      _tmp53 := Concat(_tmp53, [x.p.returns]);
    end;
    _tmp51.AddOrSetData('returns', specialize _sumList<Variant>(_tmp53));
    SetLength(_tmp54, 0);
    for x in g do
    begin
      _tmp54 := Concat(_tmp54, [x.p.profit]);
    end;
    _tmp51.AddOrSetData('profit', specialize _sumList<Variant>(_tmp54));
    _tmp49 := Concat(_tmp49, [_tmp51]);
    _tmp50 := Concat(_tmp50, [g.key.channel]);
  end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp49, _tmp50);
  _result := _tmp49;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q77_simplified;
end.
