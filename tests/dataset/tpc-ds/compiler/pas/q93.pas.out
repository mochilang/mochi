// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:33Z
program Q93;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;
type StoreSale = record
  ss_item_sk: integer;
  ss_ticket_number: integer;
  ss_customer_sk: integer;
  ss_quantity: integer;
  ss_sales_price: double;
end;
type StoreReturn = record
  sr_item_sk: integer;
  sr_ticket_number: integer;
  sr_reason_sk: integer;
  sr_return_quantity: integer;
end;
type Reason = record
  r_reason_sk: integer;
  r_reason_desc: string;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);
var i,j: integer; tmp: T; k: Variant;
begin
  for i := 0 to High(arr) - 1 do
  for j := i + 1 to High(arr) do
    if keys[i] > keys[j] then
    begin
      tmp := arr[i]; arr[i] := arr[j]; arr[j] := tmp;
      k := keys[i]; keys[i] := keys[j]; keys[j] := k;
    end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp11: boolean;
  _tmp12: specialize TFPGMap<string, Variant>;
  _tmp13: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp14: specialize TFPGMap<string, Variant>;
  _tmp15: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp16: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp17: specialize TArray<Variant>;
  _tmp18: specialize TFPGMap<string, Variant>;
  _tmp19: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp20: specialize TArray<Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp5: boolean;
  _tmp6: boolean;
  _tmp7: specialize TFPGMap<string, Variant>;
  _tmp8: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp9: specialize TFPGMap<string, Variant>;
  r: specialize TFPGMap<string, Variant>;
  reason: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  sr: specialize TFPGMap<string, integer>;
  ss: specialize TFPGMap<string, Variant>;
  store_returns: specialize TArray<specialize TFPGMap<string, integer>>;
  store_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  t: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: specialize TFPGMap<string, Variant>;
  y: integer;

procedure test_TPCDS_Q93_active_sales;
var
  _tmp21: specialize TFPGMap<string, Variant>;
  _tmp22: specialize TFPGMap<string, Variant>;
begin
  _tmp21 := specialize TFPGMap<string, Variant>.Create;
  _tmp21.AddOrSetData('ss_customer_sk', 1);
  _tmp21.AddOrSetData('sumsales', 40);
  _tmp22 := specialize TFPGMap<string, Variant>.Create;
  _tmp22.AddOrSetData('ss_customer_sk', 2);
  _tmp22.AddOrSetData('sumsales', 60);
  if not ((_result = specialize TArray<_>([_tmp21, _tmp22]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('ss_item_sk', 1);
  _tmp0.AddOrSetData('ss_ticket_number', 1);
  _tmp0.AddOrSetData('ss_customer_sk', 1);
  _tmp0.AddOrSetData('ss_quantity', 5);
  _tmp0.AddOrSetData('ss_sales_price', 10);
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('ss_item_sk', 1);
  _tmp1.AddOrSetData('ss_ticket_number', 2);
  _tmp1.AddOrSetData('ss_customer_sk', 2);
  _tmp1.AddOrSetData('ss_quantity', 3);
  _tmp1.AddOrSetData('ss_sales_price', 20);
  store_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('sr_item_sk', 1);
  _tmp2.AddOrSetData('sr_ticket_number', 1);
  _tmp2.AddOrSetData('sr_reason_sk', 1);
  _tmp2.AddOrSetData('sr_return_quantity', 1);
  store_returns := specialize TArray<specialize TFPGMap<string, integer>>([_tmp2]);
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('r_reason_sk', 1);
  _tmp3.AddOrSetData('r_reason_desc', 'ReasonA');
  reason := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp3]);
  SetLength(_tmp4, 0);
  for ss in store_sales do
  begin
    _tmp5 := False;
    for sr in store_returns do
    begin
      if not (((ss.KeyData['ss_item_sk'] = sr.KeyData['sr_item_sk']) and (ss.KeyData['ss_ticket_number'] = sr.KeyData['sr_ticket_number']))) then continue;
      _tmp5 := True;
      _tmp6 := False;
      for r in reason do
      begin
        if not (((sr <> Null) and (sr.KeyData['sr_reason_sk'] = r.KeyData['r_reason_sk']))) then continue;
        _tmp6 := True;
        if not (((r = Null) or (r.KeyData['r_reason_desc'] = 'ReasonA'))) then continue;
        _tmp7 := specialize TFPGMap<string, Variant>.Create;
        _tmp7.AddOrSetData('ss_customer_sk', ss.KeyData['ss_customer_sk']);
        if (sr <> Null) then
        begin
          _tmp8 := ss.KeyData['ss_quantity'] - sr.KeyData['sr_return_quantity'] * ss.KeyData['ss_sales_price'];
        end else
        begin
          _tmp8 := ss.KeyData['ss_quantity'] * ss.KeyData['ss_sales_price'];
        end;
        _tmp7.AddOrSetData('act_sales', _tmp8);
        _tmp4 := Concat(_tmp4, [_tmp7]);
      end;
      if not _tmp6 then
      begin
        r := nil;
        if not (((r = Null) or (r.KeyData['r_reason_desc'] = 'ReasonA'))) then continue;
        _tmp9 := specialize TFPGMap<string, Variant>.Create;
        _tmp9.AddOrSetData('ss_customer_sk', ss.KeyData['ss_customer_sk']);
        if (sr <> Null) then
        begin
          _tmp10 := ss.KeyData['ss_quantity'] - sr.KeyData['sr_return_quantity'] * ss.KeyData['ss_sales_price'];
        end else
        begin
          _tmp10 := ss.KeyData['ss_quantity'] * ss.KeyData['ss_sales_price'];
        end;
        _tmp9.AddOrSetData('act_sales', _tmp10);
        _tmp4 := Concat(_tmp4, [_tmp9]);
      end;
    end;
    if not _tmp5 then
    begin
      sr := nil;
      _tmp11 := False;
      for r in reason do
      begin
        if not (((sr <> Null) and (sr.KeyData['sr_reason_sk'] = r.KeyData['r_reason_sk']))) then continue;
        _tmp11 := True;
        if not (((r = Null) or (r.KeyData['r_reason_desc'] = 'ReasonA'))) then continue;
        _tmp12 := specialize TFPGMap<string, Variant>.Create;
        _tmp12.AddOrSetData('ss_customer_sk', ss.KeyData['ss_customer_sk']);
        if (sr <> Null) then
        begin
          _tmp13 := ss.KeyData['ss_quantity'] - sr.KeyData['sr_return_quantity'] * ss.KeyData['ss_sales_price'];
        end else
        begin
          _tmp13 := ss.KeyData['ss_quantity'] * ss.KeyData['ss_sales_price'];
        end;
        _tmp12.AddOrSetData('act_sales', _tmp13);
        _tmp4 := Concat(_tmp4, [_tmp12]);
      end;
      if not _tmp11 then
      begin
        r := nil;
        if not (((r = Null) or (r.KeyData['r_reason_desc'] = 'ReasonA'))) then continue;
        _tmp14 := specialize TFPGMap<string, Variant>.Create;
        _tmp14.AddOrSetData('ss_customer_sk', ss.KeyData['ss_customer_sk']);
        if (sr <> Null) then
        begin
          _tmp15 := ss.KeyData['ss_quantity'] - sr.KeyData['sr_return_quantity'] * ss.KeyData['ss_sales_price'];
        end else
        begin
          _tmp15 := ss.KeyData['ss_quantity'] * ss.KeyData['ss_sales_price'];
        end;
        _tmp14.AddOrSetData('act_sales', _tmp15);
        _tmp4 := Concat(_tmp4, [_tmp14]);
      end;
    end;
  end;
  t := _tmp4;
  SetLength(_tmp16, 0);
  SetLength(_tmp17, 0);
  for x in t do
  begin
    _tmp18 := specialize TFPGMap<string, Variant>.Create;
    _tmp18.AddOrSetData('ss_customer_sk', g.key);
    SetLength(_tmp19, 0);
    for y in g do
    begin
      _tmp19 := Concat(_tmp19, [y.act_sales]);
    end;
    _tmp18.AddOrSetData('sumsales', specialize _sumList<Variant>(_tmp19));
    _tmp16 := Concat(_tmp16, [_tmp18]);
    SetLength(_tmp20, 0);
    for y in g do
    begin
      _tmp20 := Concat(_tmp20, [y.act_sales]);
    end;
    _tmp17 := Concat(_tmp17, [specialize TArray<specialize TFPGMap<string, Variant>>([specialize _sumList<Variant>(_tmp20), g.key])]);
  end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp16, _tmp17);
  _result := _tmp16;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q93_active_sales;
end.
