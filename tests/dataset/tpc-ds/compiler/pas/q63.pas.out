// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:28Z
program Q63;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic _Group<K,T> = record
  Key: K;
  Items: specialize TArray<T>;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, integer>;
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp10: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp11: specialize TFPGMap<string, Variant>;
  _tmp12: specialize TArray<Variant>;
  _tmp13: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp3: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp4: specialize TArray<specialize _Group<_, specialize TFPGMap<string, integer>>>;
  _tmp5: _;
  _tmp6: string;
  _tmp7: integer;
  _tmp8: integer;
  _tmp9: specialize _Group<_, specialize TFPGMap<string, integer>>;
  by_mgr: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: double;
  s: specialize TFPGMap<string, integer>;
  sales: specialize TArray<specialize TFPGMap<string, integer>>;
  x: specialize TFPGMap<string, Variant>;

procedure test_TPCDS_Q63_simplified;
begin
  if not ((_result = 63)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('mgr', 1);
  _tmp0.AddOrSetData('amount', 30);
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('mgr', 2);
  _tmp1.AddOrSetData('amount', 33);
  sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('mgr', s.KeyData['mgr']);
  SetLength(_tmp3, 0);
  for s in sales do
  begin
    _tmp3 := Concat(_tmp3, [s]);
  end;
  SetLength(_tmp4, 0);
  for s in _tmp3 do
  begin
    _tmp5 := _tmp2;
    _tmp6 := VarToStr(_tmp5);
    _tmp7 := -1;
    for _tmp8 := 0 to High(_tmp4) do
      if VarToStr(_tmp4[_tmp8].Key) = _tmp6 then begin _tmp7 := _tmp8; Break; end;
    if _tmp7 = -1 then
    begin
      _tmp7 := Length(_tmp4);
      SetLength(_tmp4, _tmp7 + 1);
      _tmp4[_tmp7].Key := _tmp5;
      SetLength(_tmp4[_tmp7].Items, 0);
    end;
    SetLength(_tmp4[_tmp7].Items, Length(_tmp4[_tmp7].Items)+1);
    _tmp4[_tmp7].Items[High(_tmp4[_tmp7].Items)] := s;
  end;
  SetLength(_tmp10, 0);
  for _tmp9 in _tmp4 do
  begin
    _tmp11 := specialize TFPGMap<string, Variant>.Create;
    _tmp11.AddOrSetData('mgr', g.key.mgr);
    SetLength(_tmp12, 0);
    for x in g do
    begin
      _tmp12 := Concat(_tmp12, [x.KeyData['amount']]);
    end;
    _tmp11.AddOrSetData('sum_sales', specialize _sumList<Variant>(_tmp12));
    _tmp10 := Concat(_tmp10, [_tmp11]);
  end;
  by_mgr := _tmp10;
  SetLength(_tmp13, 0);
  for x in by_mgr do
  begin
    _tmp13 := Concat(_tmp13, [x.KeyData['sum_sales']]);
  end;
  _result := specialize _sumList<Variant>(_tmp13);
  specialize _json<double>(_result);
  test_TPCDS_Q63_simplified;
end.
