// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:27Z
program Q53;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function abs(x: double): double;
begin
  if (x >= 0) then ;
  result := -x;
  exit;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _avgList<T>(arr: specialize TArray<T>): double;
begin
  if Length(arr) = 0 then exit(0);
  Result := specialize _sumList<T>(arr) / Length(arr);
end;

var
  _tmp0: specialize TFPGMap<string, integer>;
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp10: specialize TArray<Variant>;
  _tmp11: specialize TArray<Variant>;
  _tmp12: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp13: specialize TFPGMap<string, Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TFPGMap<string, Variant>;
  _tmp5: specialize TFPGMap<string, Variant>;
  _tmp6: specialize TFPGMap<string, integer>;
  _tmp7: specialize TFPGMap<string, integer>;
  _tmp8: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp9: specialize TFPGMap<string, Variant>;
  d: specialize TFPGMap<string, integer>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  g: specialize TFPGMap<string, Variant>;
  grouped: specialize TArray<specialize TFPGMap<string, Variant>>;
  i: specialize TFPGMap<string, integer>;
  item: specialize TArray<specialize TFPGMap<string, integer>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  ss: specialize TFPGMap<string, Variant>;
  store_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: integer;

procedure test_TPCDS_Q53_simplified;
var
  _tmp14: specialize TFPGMap<string, Variant>;
  _tmp15: specialize TFPGMap<string, Variant>;
begin
  _tmp14 := specialize TFPGMap<string, Variant>.Create;
  _tmp14.AddOrSetData('i_manufact_id', 1);
  _tmp14.AddOrSetData('sum_sales', 20);
  _tmp15 := specialize TFPGMap<string, Variant>.Create;
  _tmp15.AddOrSetData('i_manufact_id', 2);
  _tmp15.AddOrSetData('sum_sales', 53);
  if not ((_result = specialize TArray<_>([_tmp14, _tmp15]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('i_item_sk', 1);
  _tmp0.AddOrSetData('i_manufact_id', 1);
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('i_item_sk', 2);
  _tmp1.AddOrSetData('i_manufact_id', 2);
  item := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('item', 1);
  _tmp2.AddOrSetData('date', 1);
  _tmp2.AddOrSetData('price', 10);
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('item', 1);
  _tmp3.AddOrSetData('date', 2);
  _tmp3.AddOrSetData('price', 10);
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('item', 2);
  _tmp4.AddOrSetData('date', 1);
  _tmp4.AddOrSetData('price', 30);
  _tmp5 := specialize TFPGMap<string, Variant>.Create;
  _tmp5.AddOrSetData('item', 2);
  _tmp5.AddOrSetData('date', 2);
  _tmp5.AddOrSetData('price', 23);
  store_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp2, _tmp3, _tmp4, _tmp5]);
  _tmp6 := specialize TFPGMap<string, integer>.Create;
  _tmp6.AddOrSetData('d_date_sk', 1);
  _tmp6.AddOrSetData('d_month_seq', 1);
  _tmp7 := specialize TFPGMap<string, integer>.Create;
  _tmp7.AddOrSetData('d_date_sk', 2);
  _tmp7.AddOrSetData('d_month_seq', 2);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp6, _tmp7]);
  SetLength(_tmp8, 0);
  for ss in store_sales do
  begin
    for i in item do
    begin
      if not ((ss.KeyData['item'] = i.KeyData['i_item_sk'])) then continue;
      for d in date_dim do
      begin
        if not ((ss.KeyData['date'] = d.KeyData['d_date_sk'])) then continue;
        _tmp9 := specialize TFPGMap<string, Variant>.Create;
        _tmp9.AddOrSetData('manu', g.KeyData['key']);
        SetLength(_tmp10, 0);
        for x in g do
        begin
          _tmp10 := Concat(_tmp10, [x.price]);
        end;
        _tmp9.AddOrSetData('sum_sales', specialize _sumList<Variant>(_tmp10));
        SetLength(_tmp11, 0);
        for x in g do
        begin
          _tmp11 := Concat(_tmp11, [x.price]);
        end;
        _tmp9.AddOrSetData('avg_sales', specialize _avgList<Variant>(_tmp11));
        _tmp8 := Concat(_tmp8, [_tmp9]);
      end;
    end;
  end;
  grouped := _tmp8;
  SetLength(_tmp12, 0);
  for g in grouped do
  begin
    if not (((g.KeyData['avg_sales'] > 0) and (Abs(g.KeyData['sum_sales'] - g.KeyData['avg_sales']) / g.KeyData['avg_sales'] > 0.1))) then continue;
    _tmp13 := specialize TFPGMap<string, Variant>.Create;
    _tmp13.AddOrSetData('i_manufact_id', g.KeyData['manu']);
    _tmp13.AddOrSetData('sum_sales', g.KeyData['sum_sales']);
    _tmp12 := Concat(_tmp12, [_tmp13]);
  end;
  _result := _tmp12;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q53_simplified;
end.
