// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:29Z
program Q70;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);
var i,j: integer; tmp: T; k: Variant;
begin
  for i := 0 to High(arr) - 1 do
  for j := i + 1 to High(arr) do
    if keys[i] > keys[j] then
    begin
      tmp := arr[i]; arr[i] := arr[j]; arr[j] := tmp;
      k := keys[i]; keys[i] := keys[j]; keys[j] := k;
    end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: specialize TFPGMap<string, Variant>;
  _tmp11: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, integer>;
  _tmp5: specialize TFPGMap<string, Variant>;
  _tmp6: specialize TFPGMap<string, Variant>;
  _tmp7: specialize TFPGMap<string, Variant>;
  _tmp8: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp9: specialize TArray<Variant>;
  d: specialize TFPGMap<string, integer>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  dms: integer;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  s: specialize TFPGMap<string, Variant>;
  ss: specialize TFPGMap<string, Variant>;
  store: specialize TArray<specialize TFPGMap<string, Variant>>;
  store_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: integer;

procedure test_TPCDS_Q70_simplified;
var
  _tmp12: specialize TFPGMap<string, Variant>;
  _tmp13: specialize TFPGMap<string, Variant>;
begin
  _tmp12 := specialize TFPGMap<string, Variant>.Create;
  _tmp12.AddOrSetData('s_state', 'CA');
  _tmp12.AddOrSetData('s_county', 'Orange');
  _tmp12.AddOrSetData('total_sum', 15);
  _tmp13 := specialize TFPGMap<string, Variant>.Create;
  _tmp13.AddOrSetData('s_state', 'TX');
  _tmp13.AddOrSetData('s_county', 'Travis');
  _tmp13.AddOrSetData('total_sum', 20);
  if not ((_result = specialize TArray<_>([_tmp12, _tmp13]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('s_store_sk', 1);
  _tmp0.AddOrSetData('s_state', 'CA');
  _tmp0.AddOrSetData('s_county', 'Orange');
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('s_store_sk', 2);
  _tmp1.AddOrSetData('s_state', 'CA');
  _tmp1.AddOrSetData('s_county', 'Orange');
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('s_store_sk', 3);
  _tmp2.AddOrSetData('s_state', 'TX');
  _tmp2.AddOrSetData('s_county', 'Travis');
  store := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('d_date_sk', 1);
  _tmp3.AddOrSetData('d_month_seq', 1200);
  _tmp4 := specialize TFPGMap<string, integer>.Create;
  _tmp4.AddOrSetData('d_date_sk', 2);
  _tmp4.AddOrSetData('d_month_seq', 1201);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp3, _tmp4]);
  _tmp5 := specialize TFPGMap<string, Variant>.Create;
  _tmp5.AddOrSetData('ss_sold_date_sk', 1);
  _tmp5.AddOrSetData('ss_store_sk', 1);
  _tmp5.AddOrSetData('ss_net_profit', 10);
  _tmp6 := specialize TFPGMap<string, Variant>.Create;
  _tmp6.AddOrSetData('ss_sold_date_sk', 1);
  _tmp6.AddOrSetData('ss_store_sk', 2);
  _tmp6.AddOrSetData('ss_net_profit', 5);
  _tmp7 := specialize TFPGMap<string, Variant>.Create;
  _tmp7.AddOrSetData('ss_sold_date_sk', 2);
  _tmp7.AddOrSetData('ss_store_sk', 3);
  _tmp7.AddOrSetData('ss_net_profit', 20);
  store_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp5, _tmp6, _tmp7]);
  dms := 1200;
  SetLength(_tmp8, 0);
  SetLength(_tmp9, 0);
  for ss in store_sales do
  begin
    for d in date_dim do
    begin
      if not ((d.KeyData['d_date_sk'] = ss.KeyData['ss_sold_date_sk'])) then continue;
      for s in store do
      begin
        if not ((s.KeyData['s_store_sk'] = ss.KeyData['ss_store_sk'])) then continue;
        if not (((d.KeyData['d_month_seq'] >= dms) and (d.KeyData['d_month_seq'] <= dms + 11))) then continue;
        _tmp10 := specialize TFPGMap<string, Variant>.Create;
        _tmp10.AddOrSetData('s_state', g.key.state);
        _tmp10.AddOrSetData('s_county', g.key.county);
        SetLength(_tmp11, 0);
        for x in g do
        begin
          _tmp11 := Concat(_tmp11, [x.ss.ss_net_profit]);
        end;
        _tmp10.AddOrSetData('total_sum', specialize _sumList<Variant>(_tmp11));
        _tmp8 := Concat(_tmp8, [_tmp10]);
        _tmp9 := Concat(_tmp9, [specialize TArray<specialize TFPGMap<string, Variant>>([g.key.state, g.key.county])]);
      end;
    end;
  end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp8, _tmp9);
  _result := _tmp8;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q70_simplified;
end.
