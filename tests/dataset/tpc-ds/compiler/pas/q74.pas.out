// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:30Z
program Q74;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic function _first<T>(arr: specialize TArray<T>): T;
begin
  if Length(arr) = 0 then exit(Default(T));
  Result := arr[0];
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp10: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp11: specialize TFPGMap<string, Variant>;
  _tmp12: specialize TArray<Variant>;
  _tmp13: specialize TArray<Variant>;
  _tmp14: specialize TArray<Variant>;
  _tmp15: specialize TArray<Variant>;
  _tmp16: specialize TArray<Variant>;
  _tmp17: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp18: specialize TFPGMap<string, Variant>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TFPGMap<string, Variant>;
  _tmp5: specialize TFPGMap<string, Variant>;
  _tmp6: specialize TFPGMap<string, Variant>;
  _tmp7: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp8: specialize TFPGMap<string, Variant>;
  _tmp9: specialize TArray<Variant>;
  c: specialize TFPGMap<string, Variant>;
  customer: specialize TArray<specialize TFPGMap<string, Variant>>;
  d: specialize TFPGMap<string, integer>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  s_firstyear: Variant;
  s_secyear: Variant;
  ss: specialize TFPGMap<string, Variant>;
  store_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  w_firstyear: Variant;
  w_secyear: Variant;
  web_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  ws: specialize TFPGMap<string, Variant>;
  x: integer;
  y: Variant;
  year_total: specialize TArray<Variant>;

procedure test_TPCDS_Q74_simplified;
var
  _tmp19: specialize TFPGMap<string, Variant>;
begin
  _tmp19 := specialize TFPGMap<string, Variant>.Create;
  _tmp19.AddOrSetData('customer_id', 1);
  _tmp19.AddOrSetData('customer_first_name', 'Alice');
  _tmp19.AddOrSetData('customer_last_name', 'Smith');
  if not ((_result = specialize TArray<_>([_tmp19]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('c_customer_sk', 1);
  _tmp0.AddOrSetData('c_customer_id', 1);
  _tmp0.AddOrSetData('c_first_name', 'Alice');
  _tmp0.AddOrSetData('c_last_name', 'Smith');
  customer := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0]);
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('d_date_sk', 1);
  _tmp1.AddOrSetData('d_year', 1998);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('d_date_sk', 2);
  _tmp2.AddOrSetData('d_year', 1999);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('ss_customer_sk', 1);
  _tmp3.AddOrSetData('ss_sold_date_sk', 1);
  _tmp3.AddOrSetData('ss_net_paid', 100);
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('ss_customer_sk', 1);
  _tmp4.AddOrSetData('ss_sold_date_sk', 2);
  _tmp4.AddOrSetData('ss_net_paid', 110);
  store_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp3, _tmp4]);
  _tmp5 := specialize TFPGMap<string, Variant>.Create;
  _tmp5.AddOrSetData('ws_bill_customer_sk', 1);
  _tmp5.AddOrSetData('ws_sold_date_sk', 1);
  _tmp5.AddOrSetData('ws_net_paid', 40);
  _tmp6 := specialize TFPGMap<string, Variant>.Create;
  _tmp6.AddOrSetData('ws_bill_customer_sk', 1);
  _tmp6.AddOrSetData('ws_sold_date_sk', 2);
  _tmp6.AddOrSetData('ws_net_paid', 80);
  web_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp5, _tmp6]);
  SetLength(_tmp7, 0);
  for c in customer do
  begin
    for ss in store_sales do
    begin
      if not ((c.KeyData['c_customer_sk'] = ss.KeyData['ss_customer_sk'])) then continue;
      for d in date_dim do
      begin
        if not ((d.KeyData['d_date_sk'] = ss.KeyData['ss_sold_date_sk'])) then continue;
        if not (((d.KeyData['d_year'] = 1998) or (d.KeyData['d_year'] = 1999))) then continue;
        _tmp8 := specialize TFPGMap<string, Variant>.Create;
        _tmp8.AddOrSetData('customer_id', g.key.id);
        _tmp8.AddOrSetData('customer_first_name', g.key.first);
        _tmp8.AddOrSetData('customer_last_name', g.key.last);
        _tmp8.AddOrSetData('year', g.key.year);
        SetLength(_tmp9, 0);
        for x in g do
        begin
          _tmp9 := Concat(_tmp9, [x.ss.ss_net_paid]);
        end;
        _tmp8.AddOrSetData('year_total', specialize _sumList<Variant>(_tmp9));
        _tmp8.AddOrSetData('sale_type', 's');
        _tmp7 := Concat(_tmp7, [_tmp8]);
      end;
    end;
  end;
  SetLength(_tmp10, 0);
  for c in customer do
  begin
    for ws in web_sales do
    begin
      if not ((c.KeyData['c_customer_sk'] = ws.KeyData['ws_bill_customer_sk'])) then continue;
      for d in date_dim do
      begin
        if not ((d.KeyData['d_date_sk'] = ws.KeyData['ws_sold_date_sk'])) then continue;
        if not (((d.KeyData['d_year'] = 1998) or (d.KeyData['d_year'] = 1999))) then continue;
        _tmp11 := specialize TFPGMap<string, Variant>.Create;
        _tmp11.AddOrSetData('customer_id', g.key.id);
        _tmp11.AddOrSetData('customer_first_name', g.key.first);
        _tmp11.AddOrSetData('customer_last_name', g.key.last);
        _tmp11.AddOrSetData('year', g.key.year);
        SetLength(_tmp12, 0);
        for x in g do
        begin
          _tmp12 := Concat(_tmp12, [x.ws.ws_net_paid]);
        end;
        _tmp11.AddOrSetData('year_total', specialize _sumList<Variant>(_tmp12));
        _tmp11.AddOrSetData('sale_type', 'w');
        _tmp10 := Concat(_tmp10, [_tmp11]);
      end;
    end;
  end;
  year_total := Concat(_tmp7, _tmp10);
  SetLength(_tmp13, 0);
  for y in year_total do
  begin
    if not (((y.sale_type = 's') and (y.year = 1998))) then continue;
    _tmp13 := Concat(_tmp13, [y]);
  end;
  s_firstyear := specialize _first<Variant>(_tmp13);
  SetLength(_tmp14, 0);
  for y in year_total do
  begin
    if not (((y.sale_type = 's') and (y.year = 1999))) then continue;
    _tmp14 := Concat(_tmp14, [y]);
  end;
  s_secyear := specialize _first<Variant>(_tmp14);
  SetLength(_tmp15, 0);
  for y in year_total do
  begin
    if not (((y.sale_type = 'w') and (y.year = 1998))) then continue;
    _tmp15 := Concat(_tmp15, [y]);
  end;
  w_firstyear := specialize _first<Variant>(_tmp15);
  SetLength(_tmp16, 0);
  for y in year_total do
  begin
    if not (((y.sale_type = 'w') and (y.year = 1999))) then continue;
    _tmp16 := Concat(_tmp16, [y]);
  end;
  w_secyear := specialize _first<Variant>(_tmp16);
  _tmp18 := specialize TFPGMap<string, Variant>.Create;
  _tmp18.AddOrSetData('customer_id', s_secyear.customer_id);
  _tmp18.AddOrSetData('customer_first_name', s_secyear.customer_first_name);
  _tmp18.AddOrSetData('customer_last_name', s_secyear.customer_last_name);
  if (((s_firstyear.year_total > 0) and (w_firstyear.year_total > 0)) and (w_secyear.year_total / w_firstyear.year_total > s_secyear.year_total / s_firstyear.year_total)) then
  begin
    _tmp17 := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp18]);
  end else
  begin
    _tmp17 := specialize TArray<specialize TFPGMap<string, Variant>>([]);
  end;
  _result := _tmp17;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q74_simplified;
end.
