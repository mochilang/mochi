// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:30Z
program Q75;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic function _first<T>(arr: specialize TArray<T>): T;
begin
  if Length(arr) = 0 then exit(Default(T));
  Result := arr[0];
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, integer>;
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp10: specialize TFPGMap<string, Variant>;
  _tmp11: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp12: specialize TFPGMap<string, Variant>;
  _tmp13: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp14: specialize TFPGMap<string, Variant>;
  _tmp15: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp16: specialize TFPGMap<string, Variant>;
  _tmp17: specialize TArray<Variant>;
  _tmp18: specialize TArray<Variant>;
  _tmp19: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp20: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp21: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp22: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, Variant>;
  _tmp4: specialize TFPGMap<string, Variant>;
  _tmp5: specialize TFPGMap<string, Variant>;
  _tmp6: specialize TFPGMap<string, Variant>;
  _tmp7: specialize TFPGMap<string, Variant>;
  _tmp8: specialize TFPGMap<string, Variant>;
  _tmp9: specialize TArray<specialize TFPGMap<string, Variant>>;
  a: specialize TFPGMap<string, Variant>;
  all_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  catalog_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  cs: specialize TFPGMap<string, Variant>;
  curr_yr: Variant;
  d: specialize TFPGMap<string, integer>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  i: specialize TFPGMap<string, Variant>;
  item: specialize TArray<specialize TFPGMap<string, Variant>>;
  prev_yr: Variant;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  sales_detail: specialize TArray<Variant>;
  sd: Variant;
  ss: specialize TFPGMap<string, Variant>;
  store_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  web_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  ws: specialize TFPGMap<string, Variant>;
  x: integer;

procedure test_TPCDS_Q75_simplified;
var
  _tmp23: specialize TFPGMap<string, Variant>;
begin
  _tmp23 := specialize TFPGMap<string, Variant>.Create;
  _tmp23.AddOrSetData('prev_year', 2000);
  _tmp23.AddOrSetData('year', 2001);
  _tmp23.AddOrSetData('i_brand_id', 1);
  _tmp23.AddOrSetData('i_class_id', 2);
  _tmp23.AddOrSetData('i_category_id', 3);
  _tmp23.AddOrSetData('i_manufact_id', 4);
  _tmp23.AddOrSetData('prev_yr_cnt', 100);
  _tmp23.AddOrSetData('curr_yr_cnt', 80);
  _tmp23.AddOrSetData('sales_cnt_diff', -20);
  _tmp23.AddOrSetData('sales_amt_diff', -200);
  if not ((_result = specialize TArray<_>([_tmp23]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('d_date_sk', 1);
  _tmp0.AddOrSetData('d_year', 2000);
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('d_date_sk', 2);
  _tmp1.AddOrSetData('d_year', 2001);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('ss_item_sk', 1);
  _tmp2.AddOrSetData('ss_quantity', 50);
  _tmp2.AddOrSetData('ss_sales_price', 500);
  _tmp2.AddOrSetData('ss_sold_date_sk', 1);
  _tmp3 := specialize TFPGMap<string, Variant>.Create;
  _tmp3.AddOrSetData('ss_item_sk', 1);
  _tmp3.AddOrSetData('ss_quantity', 40);
  _tmp3.AddOrSetData('ss_sales_price', 400);
  _tmp3.AddOrSetData('ss_sold_date_sk', 2);
  store_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp2, _tmp3]);
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('ws_item_sk', 1);
  _tmp4.AddOrSetData('ws_quantity', 30);
  _tmp4.AddOrSetData('ws_sales_price', 300);
  _tmp4.AddOrSetData('ws_sold_date_sk', 1);
  _tmp5 := specialize TFPGMap<string, Variant>.Create;
  _tmp5.AddOrSetData('ws_item_sk', 1);
  _tmp5.AddOrSetData('ws_quantity', 25);
  _tmp5.AddOrSetData('ws_sales_price', 250);
  _tmp5.AddOrSetData('ws_sold_date_sk', 2);
  web_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4, _tmp5]);
  _tmp6 := specialize TFPGMap<string, Variant>.Create;
  _tmp6.AddOrSetData('cs_item_sk', 1);
  _tmp6.AddOrSetData('cs_quantity', 20);
  _tmp6.AddOrSetData('cs_sales_price', 200);
  _tmp6.AddOrSetData('cs_sold_date_sk', 1);
  _tmp7 := specialize TFPGMap<string, Variant>.Create;
  _tmp7.AddOrSetData('cs_item_sk', 1);
  _tmp7.AddOrSetData('cs_quantity', 15);
  _tmp7.AddOrSetData('cs_sales_price', 150);
  _tmp7.AddOrSetData('cs_sold_date_sk', 2);
  catalog_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp6, _tmp7]);
  _tmp8 := specialize TFPGMap<string, Variant>.Create;
  _tmp8.AddOrSetData('i_item_sk', 1);
  _tmp8.AddOrSetData('i_brand_id', 1);
  _tmp8.AddOrSetData('i_class_id', 2);
  _tmp8.AddOrSetData('i_category_id', 3);
  _tmp8.AddOrSetData('i_manufact_id', 4);
  _tmp8.AddOrSetData('i_category', 'Electronics');
  item := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp8]);
  SetLength(_tmp9, 0);
  for ss in store_sales do
  begin
    for d in date_dim do
    begin
      if not ((d.KeyData['d_date_sk'] = ss.KeyData['ss_sold_date_sk'])) then continue;
      _tmp10 := specialize TFPGMap<string, Variant>.Create;
      _tmp10.AddOrSetData('d_year', d.KeyData['d_year']);
      _tmp10.AddOrSetData('i_item_sk', ss.KeyData['ss_item_sk']);
      _tmp10.AddOrSetData('quantity', ss.KeyData['ss_quantity']);
      _tmp10.AddOrSetData('amount', ss.KeyData['ss_sales_price']);
      _tmp9 := Concat(_tmp9, [_tmp10]);
    end;
  end;
  SetLength(_tmp11, 0);
  for ws in web_sales do
  begin
    for d in date_dim do
    begin
      if not ((d.KeyData['d_date_sk'] = ws.KeyData['ws_sold_date_sk'])) then continue;
      _tmp12 := specialize TFPGMap<string, Variant>.Create;
      _tmp12.AddOrSetData('d_year', d.KeyData['d_year']);
      _tmp12.AddOrSetData('i_item_sk', ws.KeyData['ws_item_sk']);
      _tmp12.AddOrSetData('quantity', ws.KeyData['ws_quantity']);
      _tmp12.AddOrSetData('amount', ws.KeyData['ws_sales_price']);
      _tmp11 := Concat(_tmp11, [_tmp12]);
    end;
  end;
  SetLength(_tmp13, 0);
  for cs in catalog_sales do
  begin
    for d in date_dim do
    begin
      if not ((d.KeyData['d_date_sk'] = cs.KeyData['cs_sold_date_sk'])) then continue;
      _tmp14 := specialize TFPGMap<string, Variant>.Create;
      _tmp14.AddOrSetData('d_year', d.KeyData['d_year']);
      _tmp14.AddOrSetData('i_item_sk', cs.KeyData['cs_item_sk']);
      _tmp14.AddOrSetData('quantity', cs.KeyData['cs_quantity']);
      _tmp14.AddOrSetData('amount', cs.KeyData['cs_sales_price']);
      _tmp13 := Concat(_tmp13, [_tmp14]);
    end;
  end;
  sales_detail := Concat(Concat(_tmp9, _tmp11), _tmp13);
  SetLength(_tmp15, 0);
  for sd in sales_detail do
  begin
    for i in item do
    begin
      if not ((i.KeyData['i_item_sk'] = sd.i_item_sk)) then continue;
      if not ((i.KeyData['i_category'] = 'Electronics')) then continue;
      _tmp16 := specialize TFPGMap<string, Variant>.Create;
      _tmp16.AddOrSetData('d_year', g.key.year);
      _tmp16.AddOrSetData('i_brand_id', g.key.brand_id);
      _tmp16.AddOrSetData('i_class_id', g.key.class_id);
      _tmp16.AddOrSetData('i_category_id', g.key.category_id);
      _tmp16.AddOrSetData('i_manufact_id', g.key.manuf_id);
      SetLength(_tmp17, 0);
      for x in g do
      begin
        _tmp17 := Concat(_tmp17, [x.sd.quantity]);
      end;
      _tmp16.AddOrSetData('sales_cnt', specialize _sumList<Variant>(_tmp17));
      SetLength(_tmp18, 0);
      for x in g do
      begin
        _tmp18 := Concat(_tmp18, [x.sd.amount]);
      end;
      _tmp16.AddOrSetData('sales_amt', specialize _sumList<Variant>(_tmp18));
      _tmp15 := Concat(_tmp15, [_tmp16]);
    end;
  end;
  all_sales := _tmp15;
  SetLength(_tmp19, 0);
  for a in all_sales do
  begin
    if not ((a.KeyData['d_year'] = 2000)) then continue;
    _tmp19 := Concat(_tmp19, [a]);
  end;
  prev_yr := specialize _first<specialize TFPGMap<string, Variant>>(_tmp19);
  SetLength(_tmp20, 0);
  for a in all_sales do
  begin
    if not ((a.KeyData['d_year'] = 2001)) then continue;
    _tmp20 := Concat(_tmp20, [a]);
  end;
  curr_yr := specialize _first<specialize TFPGMap<string, Variant>>(_tmp20);
  _tmp22 := specialize TFPGMap<string, Variant>.Create;
  _tmp22.AddOrSetData('prev_year', prev_yr.d_year);
  _tmp22.AddOrSetData('year', curr_yr.d_year);
  _tmp22.AddOrSetData('i_brand_id', curr_yr.i_brand_id);
  _tmp22.AddOrSetData('i_class_id', curr_yr.i_class_id);
  _tmp22.AddOrSetData('i_category_id', curr_yr.i_category_id);
  _tmp22.AddOrSetData('i_manufact_id', curr_yr.i_manufact_id);
  _tmp22.AddOrSetData('prev_yr_cnt', prev_yr.sales_cnt);
  _tmp22.AddOrSetData('curr_yr_cnt', curr_yr.sales_cnt);
  _tmp22.AddOrSetData('sales_cnt_diff', curr_yr.sales_cnt - prev_yr.sales_cnt);
  _tmp22.AddOrSetData('sales_amt_diff', curr_yr.sales_amt - prev_yr.sales_amt);
  if (curr_yr.sales_cnt / prev_yr.sales_cnt < 0.9) then
  begin
    _tmp21 := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp22]);
  end else
  begin
    _tmp21 := specialize TArray<specialize TFPGMap<string, Variant>>([]);
  end;
  _result := _tmp21;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q75_simplified;
end.
