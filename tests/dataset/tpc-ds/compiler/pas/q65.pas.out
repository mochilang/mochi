// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:28Z
program Q65;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function average(xs: specialize TArray<double>): double;
var
  sum: function(p0: Variant): double is nested;
begin
  if (Length(xs) = 0) then ;
  sum := 0;
  for x in xs do
  begin
    sum := sum + x;
  end;
  result := sum / Double(Length(xs));
  exit;
end;

generic _Group<K,T> = record
  Key: K;
  Items: specialize TArray<T>;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, integer>;
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp10: specialize _Group<_, specialize TFPGMap<string, integer>>;
  _tmp11: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp12: specialize TFPGMap<string, Variant>;
  _tmp13: specialize TArray<Variant>;
  _tmp14: specialize TArray<Variant>;
  _tmp15: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp5: specialize TArray<specialize _Group<_, specialize TFPGMap<string, integer>>>;
  _tmp6: _;
  _tmp7: string;
  _tmp8: integer;
  _tmp9: integer;
  avg_rev: double;
  ir: specialize TFPGMap<string, Variant>;
  item_revenue: specialize TArray<specialize TFPGMap<string, Variant>>;
  low_rev: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: double;
  ss: specialize TFPGMap<string, integer>;
  store_sales: specialize TArray<specialize TFPGMap<string, integer>>;
  x: integer;

procedure test_TPCDS_Q65_simplified;
begin
  if not ((_result = 65)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('store', 1);
  _tmp0.AddOrSetData('item', 1);
  _tmp0.AddOrSetData('price', 1);
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('store', 1);
  _tmp1.AddOrSetData('item', 1);
  _tmp1.AddOrSetData('price', 1);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('store', 1);
  _tmp2.AddOrSetData('item', 2);
  _tmp2.AddOrSetData('price', 60);
  store_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0, _tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('item', ss.KeyData['item']);
  SetLength(_tmp4, 0);
  for ss in store_sales do
  begin
    _tmp4 := Concat(_tmp4, [ss]);
  end;
  SetLength(_tmp5, 0);
  for ss in _tmp4 do
  begin
    _tmp6 := _tmp3;
    _tmp7 := VarToStr(_tmp6);
    _tmp8 := -1;
    for _tmp9 := 0 to High(_tmp5) do
      if VarToStr(_tmp5[_tmp9].Key) = _tmp7 then begin _tmp8 := _tmp9; Break; end;
    if _tmp8 = -1 then
    begin
      _tmp8 := Length(_tmp5);
      SetLength(_tmp5, _tmp8 + 1);
      _tmp5[_tmp8].Key := _tmp6;
      SetLength(_tmp5[_tmp8].Items, 0);
    end;
    SetLength(_tmp5[_tmp8].Items, Length(_tmp5[_tmp8].Items)+1);
    _tmp5[_tmp8].Items[High(_tmp5[_tmp8].Items)] := ss;
  end;
  SetLength(_tmp11, 0);
  for _tmp10 in _tmp5 do
  begin
    _tmp12 := specialize TFPGMap<string, Variant>.Create;
    _tmp12.AddOrSetData('item', g.key.item);
    SetLength(_tmp13, 0);
    for x in g do
    begin
      _tmp13 := Concat(_tmp13, [x.price]);
    end;
    _tmp12.AddOrSetData('revenue', specialize _sumList<Variant>(_tmp13));
    _tmp11 := Concat(_tmp11, [_tmp12]);
  end;
  item_revenue := _tmp11;
  SetLength(_tmp14, 0);
  for ir in item_revenue do
  begin
    _tmp14 := Concat(_tmp14, [ir.KeyData['revenue']]);
  end;
  avg_rev := average(_tmp14);
  SetLength(_tmp15, 0);
  for ir in item_revenue do
  begin
    if not ((ir.KeyData['revenue'] <= 0.1 * avg_rev)) then continue;
    _tmp15 := Concat(_tmp15, [ir.KeyData['revenue']]);
  end;
  low_rev := _tmp15;
  _result := specialize _sumList<specialize TFPGMap<string, Variant>>(low_rev) + 63;
  specialize _json<double>(_result);
  test_TPCDS_Q65_simplified;
end.
