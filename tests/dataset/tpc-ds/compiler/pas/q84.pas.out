// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:31Z
program Q84;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, integer>;
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp10: specialize TFPGMap<string, integer>;
  _tmp11: specialize TFPGMap<string, integer>;
  _tmp12: specialize TFPGMap<string, Variant>;
  _tmp13: specialize TFPGMap<string, Variant>;
  _tmp14: specialize TFPGMap<string, Variant>;
  _tmp15: specialize TFPGMap<string, Variant>;
  _tmp16: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, Variant>;
  _tmp5: specialize TFPGMap<string, integer>;
  _tmp6: specialize TFPGMap<string, integer>;
  _tmp7: specialize TFPGMap<string, integer>;
  _tmp8: specialize TFPGMap<string, integer>;
  _tmp9: specialize TFPGMap<string, integer>;
  c: specialize TFPGMap<string, integer>;
  ca: specialize TFPGMap<string, Variant>;
  cd: specialize TFPGMap<string, integer>;
  customer: specialize TArray<specialize TFPGMap<string, integer>>;
  customer_address: specialize TArray<specialize TFPGMap<string, Variant>>;
  customer_demographics: specialize TArray<specialize TFPGMap<string, integer>>;
  hd: specialize TFPGMap<string, integer>;
  household_demographics: specialize TArray<specialize TFPGMap<string, integer>>;
  ib: specialize TFPGMap<string, integer>;
  income_band: specialize TArray<specialize TFPGMap<string, integer>>;
  _result: double;
  sr: specialize TFPGMap<string, Variant>;
  store_returns: specialize TArray<specialize TFPGMap<string, Variant>>;

procedure test_TPCDS_Q84_sample;
begin
  if not ((_result = 84)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('id', 1);
  _tmp0.AddOrSetData('current_addr', 1);
  _tmp0.AddOrSetData('cdemo', 1);
  _tmp0.AddOrSetData('hdemo', 1);
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('id', 2);
  _tmp1.AddOrSetData('current_addr', 1);
  _tmp1.AddOrSetData('cdemo', 2);
  _tmp1.AddOrSetData('hdemo', 2);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('id', 3);
  _tmp2.AddOrSetData('current_addr', 1);
  _tmp2.AddOrSetData('cdemo', 3);
  _tmp2.AddOrSetData('hdemo', 1);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('id', 4);
  _tmp3.AddOrSetData('current_addr', 1);
  _tmp3.AddOrSetData('cdemo', 4);
  _tmp3.AddOrSetData('hdemo', 2);
  customer := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0, _tmp1, _tmp2, _tmp3]);
  _tmp4 := specialize TFPGMap<string, Variant>.Create;
  _tmp4.AddOrSetData('ca_address_sk', 1);
  _tmp4.AddOrSetData('ca_city', 'Springfield');
  customer_address := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4]);
  _tmp5 := specialize TFPGMap<string, integer>.Create;
  _tmp5.AddOrSetData('cd_demo_sk', 1);
  _tmp6 := specialize TFPGMap<string, integer>.Create;
  _tmp6.AddOrSetData('cd_demo_sk', 2);
  _tmp7 := specialize TFPGMap<string, integer>.Create;
  _tmp7.AddOrSetData('cd_demo_sk', 3);
  _tmp8 := specialize TFPGMap<string, integer>.Create;
  _tmp8.AddOrSetData('cd_demo_sk', 4);
  customer_demographics := specialize TArray<specialize TFPGMap<string, integer>>([_tmp5, _tmp6, _tmp7, _tmp8]);
  _tmp9 := specialize TFPGMap<string, integer>.Create;
  _tmp9.AddOrSetData('hd_demo_sk', 1);
  _tmp9.AddOrSetData('income_band_sk', 1);
  _tmp10 := specialize TFPGMap<string, integer>.Create;
  _tmp10.AddOrSetData('hd_demo_sk', 2);
  _tmp10.AddOrSetData('income_band_sk', 1);
  household_demographics := specialize TArray<specialize TFPGMap<string, integer>>([_tmp9, _tmp10]);
  _tmp11 := specialize TFPGMap<string, integer>.Create;
  _tmp11.AddOrSetData('ib_income_band_sk', 1);
  _tmp11.AddOrSetData('ib_lower_bound', 0);
  _tmp11.AddOrSetData('ib_upper_bound', 50000);
  income_band := specialize TArray<specialize TFPGMap<string, integer>>([_tmp11]);
  _tmp12 := specialize TFPGMap<string, Variant>.Create;
  _tmp12.AddOrSetData('sr_cdemo_sk', 1);
  _tmp12.AddOrSetData('amt', 10);
  _tmp13 := specialize TFPGMap<string, Variant>.Create;
  _tmp13.AddOrSetData('sr_cdemo_sk', 2);
  _tmp13.AddOrSetData('amt', 20);
  _tmp14 := specialize TFPGMap<string, Variant>.Create;
  _tmp14.AddOrSetData('sr_cdemo_sk', 3);
  _tmp14.AddOrSetData('amt', 30);
  _tmp15 := specialize TFPGMap<string, Variant>.Create;
  _tmp15.AddOrSetData('sr_cdemo_sk', 4);
  _tmp15.AddOrSetData('amt', 24);
  store_returns := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp12, _tmp13, _tmp14, _tmp15]);
  SetLength(_tmp16, 0);
  for c in customer do
  begin
    for ca in customer_address do
    begin
      if not (((c.KeyData['current_addr'] = ca.KeyData['ca_address_sk']) and (ca.KeyData['ca_city'] = 'Springfield'))) then continue;
      for cd in customer_demographics do
      begin
        if not ((c.KeyData['cdemo'] = cd.KeyData['cd_demo_sk'])) then continue;
        for sr in store_returns do
        begin
          if not ((cd.KeyData['cd_demo_sk'] = sr.KeyData['sr_cdemo_sk'])) then continue;
          for hd in household_demographics do
          begin
            if not ((c.KeyData['hdemo'] = hd.KeyData['hd_demo_sk'])) then continue;
            for ib in income_band do
            begin
              if not ((hd.KeyData['income_band_sk'] = ib.KeyData['ib_income_band_sk'])) then continue;
              _tmp16 := Concat(_tmp16, [sr.KeyData['amt']]);
            end;
          end;
        end;
      end;
    end;
  end;
  _result := specialize _sumList<Variant>(_tmp16);
  specialize _json<double>(_result);
  test_TPCDS_Q84_sample;
end.
