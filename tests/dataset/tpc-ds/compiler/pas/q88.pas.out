// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:31Z
program Q88;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

function count_range(ssales: specialize TArray<any>; tdim: specialize TArray<any>; hour: integer; start_min: integer; end_min: integer): double;
var
  total: double;
begin
  total := 0;
  for ss in ssales do
  begin
    for t in tdim do
    begin
      if ((((ss.sold_time_sk = t.time_sk) and (t.hour = hour)) and (t.minute >= start_min)) and (t.minute < end_min)) then ;
    end;
  end;
  result := total;
  exit;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

var
  _tmp0: specialize TFPGMap<string, integer>;
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp10: specialize TFPGMap<string, Variant>;
  _tmp11: specialize TFPGMap<string, Variant>;
  _tmp12: specialize TFPGMap<string, Variant>;
  _tmp13: specialize TFPGMap<string, Variant>;
  _tmp14: specialize TFPGMap<string, Variant>;
  _tmp15: specialize TFPGMap<string, Variant>;
  _tmp16: specialize TFPGMap<string, Variant>;
  _tmp17: specialize TFPGMap<string, Variant>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, integer>;
  _tmp5: specialize TFPGMap<string, integer>;
  _tmp6: specialize TFPGMap<string, integer>;
  _tmp7: specialize TFPGMap<string, integer>;
  _tmp8: specialize TFPGMap<string, integer>;
  _tmp9: specialize TFPGMap<string, Variant>;
  h10_30_to_11: double;
  h10_to_10_30: double;
  h11_30_to_12: double;
  h11_to_11_30: double;
  h12_to_12_30: double;
  h8_30_to_9: double;
  h9_30_to_10: double;
  h9_to_9_30: double;
  household_demographics: specialize TArray<specialize TFPGMap<string, integer>>;
  _result: double;
  store: specialize TArray<specialize TFPGMap<string, Variant>>;
  store_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  time_dim: specialize TArray<specialize TFPGMap<string, integer>>;

procedure test_TPCDS_Q88_sample;
begin
  if not ((_result = 88)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('time_sk', 1);
  _tmp0.AddOrSetData('hour', 8);
  _tmp0.AddOrSetData('minute', 30);
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('time_sk', 2);
  _tmp1.AddOrSetData('hour', 9);
  _tmp1.AddOrSetData('minute', 0);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('time_sk', 3);
  _tmp2.AddOrSetData('hour', 9);
  _tmp2.AddOrSetData('minute', 30);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('time_sk', 4);
  _tmp3.AddOrSetData('hour', 10);
  _tmp3.AddOrSetData('minute', 0);
  _tmp4 := specialize TFPGMap<string, integer>.Create;
  _tmp4.AddOrSetData('time_sk', 5);
  _tmp4.AddOrSetData('hour', 10);
  _tmp4.AddOrSetData('minute', 30);
  _tmp5 := specialize TFPGMap<string, integer>.Create;
  _tmp5.AddOrSetData('time_sk', 6);
  _tmp5.AddOrSetData('hour', 11);
  _tmp5.AddOrSetData('minute', 0);
  _tmp6 := specialize TFPGMap<string, integer>.Create;
  _tmp6.AddOrSetData('time_sk', 7);
  _tmp6.AddOrSetData('hour', 11);
  _tmp6.AddOrSetData('minute', 30);
  _tmp7 := specialize TFPGMap<string, integer>.Create;
  _tmp7.AddOrSetData('time_sk', 8);
  _tmp7.AddOrSetData('hour', 12);
  _tmp7.AddOrSetData('minute', 0);
  time_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp0, _tmp1, _tmp2, _tmp3, _tmp4, _tmp5, _tmp6, _tmp7]);
  _tmp8 := specialize TFPGMap<string, integer>.Create;
  _tmp8.AddOrSetData('hd_demo_sk', 1);
  _tmp8.AddOrSetData('hd_dep_count', 1);
  _tmp8.AddOrSetData('hd_vehicle_count', 1);
  household_demographics := specialize TArray<specialize TFPGMap<string, integer>>([_tmp8]);
  _tmp9 := specialize TFPGMap<string, Variant>.Create;
  _tmp9.AddOrSetData('s_store_sk', 1);
  _tmp9.AddOrSetData('s_store_name', 'ese');
  store := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp9]);
  _tmp10 := specialize TFPGMap<string, Variant>.Create;
  _tmp10.AddOrSetData('sold_time_sk', 1);
  _tmp10.AddOrSetData('hdemo_sk', 1);
  _tmp10.AddOrSetData('store_sk', 1);
  _tmp10.AddOrSetData('qty', 10);
  _tmp11 := specialize TFPGMap<string, Variant>.Create;
  _tmp11.AddOrSetData('sold_time_sk', 2);
  _tmp11.AddOrSetData('hdemo_sk', 1);
  _tmp11.AddOrSetData('store_sk', 1);
  _tmp11.AddOrSetData('qty', 12);
  _tmp12 := specialize TFPGMap<string, Variant>.Create;
  _tmp12.AddOrSetData('sold_time_sk', 3);
  _tmp12.AddOrSetData('hdemo_sk', 1);
  _tmp12.AddOrSetData('store_sk', 1);
  _tmp12.AddOrSetData('qty', 14);
  _tmp13 := specialize TFPGMap<string, Variant>.Create;
  _tmp13.AddOrSetData('sold_time_sk', 4);
  _tmp13.AddOrSetData('hdemo_sk', 1);
  _tmp13.AddOrSetData('store_sk', 1);
  _tmp13.AddOrSetData('qty', 11);
  _tmp14 := specialize TFPGMap<string, Variant>.Create;
  _tmp14.AddOrSetData('sold_time_sk', 5);
  _tmp14.AddOrSetData('hdemo_sk', 1);
  _tmp14.AddOrSetData('store_sk', 1);
  _tmp14.AddOrSetData('qty', 8);
  _tmp15 := specialize TFPGMap<string, Variant>.Create;
  _tmp15.AddOrSetData('sold_time_sk', 6);
  _tmp15.AddOrSetData('hdemo_sk', 1);
  _tmp15.AddOrSetData('store_sk', 1);
  _tmp15.AddOrSetData('qty', 9);
  _tmp16 := specialize TFPGMap<string, Variant>.Create;
  _tmp16.AddOrSetData('sold_time_sk', 7);
  _tmp16.AddOrSetData('hdemo_sk', 1);
  _tmp16.AddOrSetData('store_sk', 1);
  _tmp16.AddOrSetData('qty', 10);
  _tmp17 := specialize TFPGMap<string, Variant>.Create;
  _tmp17.AddOrSetData('sold_time_sk', 8);
  _tmp17.AddOrSetData('hdemo_sk', 1);
  _tmp17.AddOrSetData('store_sk', 1);
  _tmp17.AddOrSetData('qty', 14);
  store_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp10, _tmp11, _tmp12, _tmp13, _tmp14, _tmp15, _tmp16, _tmp17]);
  h8_30_to_9 := count_range(store_sales, time_dim, 8, 30, 60);
  h9_to_9_30 := count_range(store_sales, time_dim, 9, 0, 30);
  h9_30_to_10 := count_range(store_sales, time_dim, 9, 30, 60);
  h10_to_10_30 := count_range(store_sales, time_dim, 10, 0, 30);
  h10_30_to_11 := count_range(store_sales, time_dim, 10, 30, 60);
  h11_to_11_30 := count_range(store_sales, time_dim, 11, 0, 30);
  h11_30_to_12 := count_range(store_sales, time_dim, 11, 30, 60);
  h12_to_12_30 := count_range(store_sales, time_dim, 12, 0, 30);
  _result := h8_30_to_9 + h9_to_9_30 + h9_30_to_10 + h10_to_10_30 + h10_30_to_11 + h11_to_11_30 + h11_30_to_12 + h12_to_12_30;
  specialize _json<double>(_result);
  test_TPCDS_Q88_sample;
end.
