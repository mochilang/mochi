program main;
{$mode objfpc}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser;

type
  generic TArray<T> = array of T;

procedure test_TPCDS_Q2_empty;
begin
  if not ((Length(_result) = 0)) then raise Exception.Create('expect failed');
end;

var
  _tmp0: specialize TFPGMap<string, integer>;
  _tmp1: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp10: specialize TArray<integer>;
  _tmp11: specialize TFPGMap<string, integer>;
  _tmp12: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp3: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp4: specialize TArray<integer>;
  _tmp5: specialize TArray<integer>;
  _tmp6: specialize TArray<integer>;
  _tmp7: specialize TArray<integer>;
  _tmp8: specialize TArray<integer>;
  _tmp9: specialize TArray<integer>;
  catalog_sales: specialize TArray<integer>;
  cs: integer;
  date_dim: specialize TArray<integer>;
  _result: specialize TArray<integer>;
  w: specialize TFPGMap<string, integer>;
  web_sales: specialize TArray<integer>;
  ws: integer;
  wscs: specialize TArray<specialize TFPGMap<string, integer>>;
  wswscs: specialize TArray<specialize TFPGMap<string, integer>>;
  x: integer;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

begin
  web_sales := specialize TArray<integer>([]);
  catalog_sales := specialize TArray<integer>([]);
  date_dim := specialize TArray<integer>([]);
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('sold_date_sk', ws.ws_sold_date_sk);
  _tmp0.AddOrSetData('sales_price', ws.ws_ext_sales_price);
  _tmp0.AddOrSetData('day', ws.ws_sold_date_na_tmp0e);
  SetLength(_tmp1, 0);
  for ws in web_sales do
  begin
    _tmp1 := Concat(_tmp1, [_tmp0]);
  end;
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('sold_date_sk', cs.cs_sold_date_sk);
  _tmp2.AddOrSetData('sales_price', cs.cs_ext_sales_price);
  _tmp2.AddOrSetData('day', cs.cs_sold_date_na_tmp2e);
  SetLength(_tmp3, 0);
  for cs in catalog_sales do
  begin
    _tmp3 := Concat(_tmp3, [_tmp2]);
  end;
  wscs := Concat(_tmp1, _tmp3);
  SetLength(_tmp4, 0);
  for x in g do
  begin
    if not ((x.day = 'Sunday')) then continue;
    _tmp4 := Concat(_tmp4, [x.sales_price]);
  end;
  SetLength(_tmp5, 0);
  for x in g do
  begin
    if not ((x.day = 'Monday')) then continue;
    _tmp5 := Concat(_tmp5, [x.sales_price]);
  end;
  SetLength(_tmp6, 0);
  for x in g do
  begin
    if not ((x.day = 'Tuesday')) then continue;
    _tmp6 := Concat(_tmp6, [x.sales_price]);
  end;
  SetLength(_tmp7, 0);
  for x in g do
  begin
    if not ((x.day = 'Wednesday')) then continue;
    _tmp7 := Concat(_tmp7, [x.sales_price]);
  end;
  SetLength(_tmp8, 0);
  for x in g do
  begin
    if not ((x.day = 'Thursday')) then continue;
    _tmp8 := Concat(_tmp8, [x.sales_price]);
  end;
  SetLength(_tmp9, 0);
  for x in g do
  begin
    if not ((x.day = 'Friday')) then continue;
    _tmp9 := Concat(_tmp9, [x.sales_price]);
  end;
  SetLength(_tmp10, 0);
  for x in g do
  begin
    if not ((x.day = 'Saturday')) then continue;
    _tmp10 := Concat(_tmp10, [x.sales_price]);
  end;
  _tmp11 := specialize TFPGMap<string, integer>.Create;
  _tmp11.AddOrSetData('d_week_seq', g.key.week_seq);
  _tmp11.AddOrSetData('sun_sales', specialize _su_tmp11List<integer>(_t_tmp11p4));
  _tmp11.AddOrSetData('_tmp11on_sales', specialize _su_tmp11List<integer>(_t_tmp11p5));
  _tmp11.AddOrSetData('tue_sales', specialize _su_tmp11List<integer>(_t_tmp11p6));
  _tmp11.AddOrSetData('wed_sales', specialize _su_tmp11List<integer>(_t_tmp11p7));
  _tmp11.AddOrSetData('thu_sales', specialize _su_tmp11List<integer>(_t_tmp11p8));
  _tmp11.AddOrSetData('fri_sales', specialize _su_tmp11List<integer>(_t_tmp11p9));
  _tmp11.AddOrSetData('sat_sales', specialize _su_tmp11List<integer>(_t_tmp11p10));
  SetLength(_tmp12, 0);
  for w in wscs do
  begin
    for d in date_dim do
    begin
      if not ((w.sold_date_sk = d.d_date_sk)) then continue;
      _tmp12 := Concat(_tmp12, [_tmp11]);
    end;
  end;
  wswscs := _tmp12;
  _result := specialize TArray<integer>([]);
  json(_result);
  test_TPCDS_Q2_empty;
end.
