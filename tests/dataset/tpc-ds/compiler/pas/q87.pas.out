// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:31Z
program Q87;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, Variant>;
  _tmp1: specialize TFPGMap<string, Variant>;
  _tmp10: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp11: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<string, Variant>;
  _tmp3: specialize TFPGMap<string, string>;
  _tmp4: specialize TArray<Variant>;
  _tmp5: specialize TArray<string>;
  _tmp6: specialize TArray<Variant>;
  _tmp7: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp8: specialize TArray<Variant>;
  _tmp9: specialize TArray<specialize TFPGMap<string, Variant>>;
  c: specialize TFPGMap<string, Variant>;
  catalog_customers: specialize TArray<specialize TFPGMap<string, string>>;
  catalog_sales: specialize TArray<specialize TFPGMap<string, string>>;
  _result: double;
  s: specialize TFPGMap<string, Variant>;
  store_customers: specialize TArray<specialize TFPGMap<string, Variant>>;
  store_only: specialize TArray<specialize TFPGMap<string, Variant>>;
  store_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  web_customers: specialize TArray<Variant>;
  web_sales: specialize TArray<Variant>;
  x: specialize TFPGMap<string, Variant>;

procedure test_TPCDS_Q87_sample;
begin
  if not ((_result = 87)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, Variant>.Create;
  _tmp0.AddOrSetData('cust', 'A');
  _tmp0.AddOrSetData('price', 5);
  _tmp1 := specialize TFPGMap<string, Variant>.Create;
  _tmp1.AddOrSetData('cust', 'B');
  _tmp1.AddOrSetData('price', 30);
  _tmp2 := specialize TFPGMap<string, Variant>.Create;
  _tmp2.AddOrSetData('cust', 'C');
  _tmp2.AddOrSetData('price', 57);
  store_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<string, string>.Create;
  _tmp3.AddOrSetData('cust', 'A');
  catalog_sales := specialize TArray<specialize TFPGMap<string, string>>([_tmp3]);
  web_sales := specialize TArray<Variant>([]);
  SetLength(_tmp4, 0);
  for s in store_sales do
  begin
    _tmp4 := Concat(_tmp4, [s.KeyData['cust']]);
  end;
  store_customers := _tmp4;
  SetLength(_tmp5, 0);
  for s in catalog_sales do
  begin
    _tmp5 := Concat(_tmp5, [s.KeyData['cust']]);
  end;
  catalog_customers := _tmp5;
  SetLength(_tmp6, 0);
  for s in web_sales do
  begin
    _tmp6 := Concat(_tmp6, [s.KeyData['cust']]);
  end;
  web_customers := _tmp6;
  SetLength(_tmp7, 0);
  for x in catalog_customers do
  begin
    if not ((x = c)) then continue;
    _tmp7 := Concat(_tmp7, [x]);
  end;
  SetLength(_tmp8, 0);
  for x in web_customers do
  begin
    if not ((x = c)) then continue;
    _tmp8 := Concat(_tmp8, [x]);
  end;
  SetLength(_tmp9, 0);
  for c in store_customers do
  begin
    if not (((Length(_tmp7) = 0) and (Length(_tmp8) = 0))) then continue;
    _tmp9 := Concat(_tmp9, [c]);
  end;
  store_only := _tmp9;
  SetLength(_tmp10, 0);
  for x in store_only do
  begin
    if not ((x = s.KeyData['cust'])) then continue;
    _tmp10 := Concat(_tmp10, [x]);
  end;
  SetLength(_tmp11, 0);
  for s in store_sales do
  begin
    if not ((Length(_tmp10) > 0)) then continue;
    _tmp11 := Concat(_tmp11, [s.KeyData['price']]);
  end;
  _result := specialize _sumList<Variant>(_tmp11);
  specialize _json<double>(_result);
  test_TPCDS_Q87_sample;
end.
