program main;
{$mode objfpc}

uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser;

type
  generic TArray<T> = array of T;

type CatalogSale = record
  cs_quantity: integer;
  cs_list_price: double;
  cs_coupon_amt: double;
  cs_sales_price: double;
  cs_net_profit: double;
  cs_bill_cdemo_sk: integer;
  cs_bill_customer_sk: integer;
  cs_sold_date_sk: integer;
  cs_item_sk: integer;
end;

type CustomerDemographics = record
  cd_demo_sk: integer;
  cd_gender: string;
  cd_education_status: string;
  cd_dep_count: integer;
end;

type Customer = record
  c_customer_sk: integer;
  c_current_cdemo_sk: integer;
  c_current_addr_sk: integer;
  c_birth_year: integer;
  c_birth_month: integer;
end;

type CustomerAddress = record
  ca_address_sk: integer;
  ca_country: string;
  ca_state: string;
  ca_county: string;
end;

type DateDim = record
  d_date_sk: integer;
  d_year: integer;
end;

type Item = record
  i_item_sk: integer;
  i_item_id: string;
end;

procedure test_TPCDS_Q18_averages;

var
  _tmp0: specialize TFPGMap<string, integer>;
begin
  _tmp0 := specialize TFPGMap<string, integer>.Create;
  _tmp0.AddOrSetData('i_ite_tmp0_id', 'I1');
  _tmp0.AddOrSetData('ca_country', 'US');
  _tmp0.AddOrSetData('ca_state', 'CA');
  _tmp0.AddOrSetData('ca_county', 'County1');
  _tmp0.AddOrSetData('agg1', 1);
  _tmp0.AddOrSetData('agg2', 10);
  _tmp0.AddOrSetData('agg3', 1);
  _tmp0.AddOrSetData('agg4', 9);
  _tmp0.AddOrSetData('agg5', 2);
  _tmp0.AddOrSetData('agg6', 1980);
  _tmp0.AddOrSetData('agg7', 2);
  if not ((_result = specialize TArray<specialize TFPGMap<string, integer>>([_tmp0]))) then raise
    Exception.Create('expect failed');
end;

var
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp10: specialize TFPGMap<string, integer>;
  _tmp11: specialize TArray<integer>;
  _tmp12: specialize TArray<integer>;
  _tmp13: specialize TArray<integer>;
  _tmp14: specialize TArray<integer>;
  _tmp15: specialize TArray<integer>;
  _tmp16: specialize TArray<integer>;
  _tmp17: specialize TArray<integer>;
  _tmp18: specialize TFPGMap<string, integer>;
  _tmp19: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp2: specialize TFPGMap<string, integer>;
  _tmp20: specialize TArray<specialize _Group<specialize TFPGMap<string, integer>>>;
  _tmp21: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TFPGMap<string, integer>;
  _tmp5: specialize TFPGMap<string, integer>;
  _tmp6: specialize TFPGMap<string, integer>;
  _tmp7: specialize TFPGMap<string, integer>;
  _tmp8: specialize TFPGMap<string, integer>;
  _tmp9: specialize TArray<specialize TFPGMap<string, integer>>;
  catalog_sales: specialize TArray<specialize TFPGMap<string, integer>>;
  cs: specialize TFPGMap<string, integer>;
  customer: specialize TArray<specialize TFPGMap<string, integer>>;
  customer_address: specialize TArray<specialize TFPGMap<string, integer>>;
  customer_demographics: specialize TArray<specialize TFPGMap<string, integer>>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  item: specialize TArray<specialize TFPGMap<string, integer>>;
  j: specialize TFPGMap<string, integer>;
  joined: specialize TArray<specialize TFPGMap<string, integer>>;
  _result: specialize TArray<specialize TFPGMap<string, integer>>;
  x: integer;

  generic _Group<T> = record
    Key: Variant;
    Items: specialize TArray<T>;
  end;

  generic function _avgList<T>(arr: specialize TArray<T>): double;
begin
  if Length(arr) = 0 then exit(0);
  Result := specialize _sumList<T>(arr) / Length(arr);
end;

generic function _group_by<T>(src: specialize TArray<T>; keyfn: function(it: T): Variant):
                                                                                          specialize
                                                                                           TArray<
                                                                                          specialize
                                                                                           _Group<T>
                                                                                           >;

var i,j,idx: Integer;
  key: Variant;
  ks: string;
begin
  SetLength(Result, 0);
  for i := 0 to High(src) do
    begin
      key := keyfn(src[i]);
      ks := VarToStr(key);
      idx := -1;
      for j := 0 to High(Result) do
        if VarToStr(Result[j].Key) = ks then
          begin
            idx := j;
            Break;
          end;
      if idx = -1 then
        begin
          idx := Length(Result);
          SetLength(Result, idx + 1);
          Result[idx].Key := key;
          SetLength(Result[idx].Items, 0);
        end;
      SetLength(Result[idx].Items, Length(Result[idx].Items)+1);
      Result[idx].Items[High(Result[idx].Items)] := src[i];
    end;
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

begin
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('cs_quantity', 1);
  _tmp1.AddOrSetData('cs_list_price', 10);
  _tmp1.AddOrSetData('cs_coupon_a_tmp1t', 1);
  _tmp1.AddOrSetData('cs_sales_price', 9);
  _tmp1.AddOrSetData('cs_net_profit', 2);
  _tmp1.AddOrSetData('cs_bill_cde_tmp1o_sk', 1);
  _tmp1.AddOrSetData('cs_bill_custo_tmp1er_sk', 1);
  _tmp1.AddOrSetData('cs_sold_date_sk', 1);
  _tmp1.AddOrSetData('cs_ite_tmp1_sk', 1);
  catalog_sales := specialize TArray<specialize TFPGMap<string, integer>>([_tmp1]);
  _tmp2 := specialize TFPGMap<string, integer>.Create;
  _tmp2.AddOrSetData('cd_de_tmp2o_sk', 1);
  _tmp2.AddOrSetData('cd_gender', 'M');
  _tmp2.AddOrSetData('cd_education_status', 'College');
  _tmp2.AddOrSetData('cd_dep_count', 2);
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('cd_de_tmp3o_sk', 2);
  _tmp3.AddOrSetData('cd_gender', 'F');
  _tmp3.AddOrSetData('cd_education_status', 'College');
  _tmp3.AddOrSetData('cd_dep_count', 2);
  customer_demographics := specialize TArray<specialize TFPGMap<string, integer>>([_tmp2, _tmp3]);
  _tmp4 := specialize TFPGMap<string, integer>.Create;
  _tmp4.AddOrSetData('c_custo_tmp4er_sk', 1);
  _tmp4.AddOrSetData('c_current_cde_tmp4o_sk', 2);
  _tmp4.AddOrSetData('c_current_addr_sk', 1);
  _tmp4.AddOrSetData('c_birth_year', 1980);
  _tmp4.AddOrSetData('c_birth__tmp4onth', 1);
  customer := specialize TArray<specialize TFPGMap<string, integer>>([_tmp4]);
  _tmp5 := specialize TFPGMap<string, integer>.Create;
  _tmp5.AddOrSetData('ca_address_sk', 1);
  _tmp5.AddOrSetData('ca_country', 'US');
  _tmp5.AddOrSetData('ca_state', 'CA');
  _tmp5.AddOrSetData('ca_county', 'County1');
  customer_address := specialize TArray<specialize TFPGMap<string, integer>>([_tmp5]);
  _tmp6 := specialize TFPGMap<string, integer>.Create;
  _tmp6.AddOrSetData('d_date_sk', 1);
  _tmp6.AddOrSetData('d_year', 1999);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp6]);
  _tmp7 := specialize TFPGMap<string, integer>.Create;
  _tmp7.AddOrSetData('i_ite_tmp7_sk', 1);
  _tmp7.AddOrSetData('i_ite_tmp7_id', 'I1');
  item := specialize TArray<specialize TFPGMap<string, integer>>([_tmp7]);
  _tmp8 := specialize TFPGMap<string, integer>.Create;
  _tmp8.AddOrSetData('i_ite_tmp8_id', i.i_ite_tmp8_id);
  _tmp8.AddOrSetData('ca_country', ca.ca_country);
  _tmp8.AddOrSetData('ca_state', ca.ca_state);
  _tmp8.AddOrSetData('ca_county', ca.ca_county);
  _tmp8.AddOrSetData('q', cs.cs_quantity);
  _tmp8.AddOrSetData('lp', cs.cs_list_price);
  _tmp8.AddOrSetData('cp', cs.cs_coupon_a_tmp8t);
  _tmp8.AddOrSetData('sp', cs.cs_sales_price);
  _tmp8.AddOrSetData('np', cs.cs_net_profit);
  _tmp8.AddOrSetData('by', c.c_birth_year);
  _tmp8.AddOrSetData('dep', cd1.cd_dep_count);
  SetLength(_tmp9, 0);
  for cs in catalog_sales do
    begin
      for cd1 in customer_demographics do
        begin
          if not ((((cs.cs_bill_cdemo_sk = cd1.cd_demo_sk) and (cd1.cd_gender = 'M')) and (cd1.
             cd_education_status = 'College'))) then continue;
          for c in customer do
            begin
              if not ((cs.cs_bill_customer_sk = c.c_customer_sk)) then continue;
              for cd2 in customer_demographics do
                begin
                  if not ((c.c_current_cdemo_sk = cd2.cd_demo_sk)) then continue;
                  for ca in customer_address do
                    begin
                      if not ((c.c_current_addr_sk = ca.ca_address_sk)) then continue;
                      for d in date_dim do
                        begin
                          if not (((cs.cs_sold_date_sk = d.d_date_sk) and (d.d_year = 1999))) then
                            continue;
                          for i in item do
                            begin
                              if not ((cs.cs_item_sk = i.i_item_sk)) then continue;
                              _tmp9 := Concat(_tmp9, [_tmp8]);
                            end;
                        end;
                    end;
                end;
            end;
        end;
    end;
  joined := _tmp9;
  _tmp10 := specialize TFPGMap<string, integer>.Create;
  _tmp10.AddOrSetData('i_ite_tmp10_id', j.i_ite_tmp10_id);
  _tmp10.AddOrSetData('ca_country', j.ca_country);
  _tmp10.AddOrSetData('ca_state', j.ca_state);
  _tmp10.AddOrSetData('ca_county', j.ca_county);
  SetLength(_tmp11, 0);
  for x in g do
    begin
      _tmp11 := Concat(_tmp11, [x.q]);
    end;
  SetLength(_tmp12, 0);
  for x in g do
    begin
      _tmp12 := Concat(_tmp12, [x.lp]);
    end;
  SetLength(_tmp13, 0);
  for x in g do
    begin
      _tmp13 := Concat(_tmp13, [x.cp]);
    end;
  SetLength(_tmp14, 0);
  for x in g do
    begin
      _tmp14 := Concat(_tmp14, [x.sp]);
    end;
  SetLength(_tmp15, 0);
  for x in g do
    begin
      _tmp15 := Concat(_tmp15, [x.np]);
    end;
  SetLength(_tmp16, 0);
  for x in g do
    begin
      _tmp16 := Concat(_tmp16, [x.by]);
    end;
  SetLength(_tmp17, 0);
  for x in g do
    begin
      _tmp17 := Concat(_tmp17, [x.dep]);
    end;
  _tmp18 := specialize TFPGMap<string, integer>.Create;
  _tmp18.AddOrSetData('i_ite_tmp18_id', g.key.i_ite_tmp18_id);
  _tmp18.AddOrSetData('ca_country', g.key.ca_country);
  _tmp18.AddOrSetData('ca_state', g.key.ca_state);
  _tmp18.AddOrSetData('ca_county', g.key.ca_county);
  _tmp18.AddOrSetData('agg1', specialize _avgList<integer>(_t_tmp18p11));
  _tmp18.AddOrSetData('agg2', specialize _avgList<integer>(_t_tmp18p12));
  _tmp18.AddOrSetData('agg3', specialize _avgList<integer>(_t_tmp18p13));
  _tmp18.AddOrSetData('agg4', specialize _avgList<integer>(_t_tmp18p14));
  _tmp18.AddOrSetData('agg5', specialize _avgList<integer>(_t_tmp18p15));
  _tmp18.AddOrSetData('agg6', specialize _avgList<integer>(_t_tmp18p16));
  _tmp18.AddOrSetData('agg7', specialize _avgList<integer>(_t_tmp18p17));
  SetLength(_tmp19, 0);
  for j in joined do
    begin
      _tmp19 := Concat(_tmp19, [j]);
    end;
  _tmp20 := specialize _group_by<specialize TFPGMap<string, integer>>(_tmp19, function(j: specialize
            TFPGMap<string, integer>): Variant begin Result := _tmp10
end
);
SetLength(_tmp21, 0);
for g in _tmp20 do
  begin
    _tmp21 := Concat(_tmp21, [_tmp18]);
  end;
_result := _tmp21;
specialize _json<specialize TArray<specialize TFPGMap<string, integer>>>(_result);
test_TPCDS_Q18_averages;
end.
