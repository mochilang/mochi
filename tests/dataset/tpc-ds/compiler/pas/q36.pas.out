program main;
{$mode objfpc}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser, Math;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);
var i,j: integer; tmp: T; k: Variant;
begin
  for i := 0 to High(arr) - 1 do
  for j := i + 1 to High(arr) do
    if keys[i] > keys[j] then
    begin
      tmp := arr[i]; arr[i] := arr[j]; arr[j] := tmp;
      k := keys[i]; keys[i] := keys[j]; keys[j] := k;
    end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<Variant, Variant>;
  _tmp1: specialize TFPGMap<Variant, Variant>;
  _tmp10: specialize TArray<Variant>;
  _tmp11: specialize TArray<Variant>;
  _tmp12: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp13: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<Variant, Variant>;
  _tmp3: specialize TFPGMap<Variant, Variant>;
  _tmp4: specialize TFPGMap<Variant, Variant>;
  _tmp5: specialize TFPGMap<Variant, Variant>;
  _tmp6: specialize TFPGMap<Variant, Variant>;
  _tmp7: specialize TFPGMap<Variant, Variant>;
  _tmp8: specialize TFPGMap<Variant, integer>;
  _tmp9: specialize TFPGMap<Variant, Variant>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  item: specialize TArray<specialize TFPGMap<string, Variant>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  ss: specialize TFPGMap<string, Variant>;
  store: specialize TArray<specialize TFPGMap<string, Variant>>;
  store_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: integer;

procedure test_TPCDS_Q36_simplified;
var
  _tmp14: specialize TFPGMap<Variant, Variant>;
  _tmp15: specialize TFPGMap<Variant, Variant>;
  _tmp16: specialize TFPGMap<Variant, Variant>;
begin
  _tmp14 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp14.AddOrSetData('i_category', 'Books');
  _tmp14.AddOrSetData('i_class', 'C1');
  _tmp14.AddOrSetData('gross_margin', 0.2);
  _tmp15 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp15.AddOrSetData('i_category', 'Books');
  _tmp15.AddOrSetData('i_class', 'C2');
  _tmp15.AddOrSetData('gross_margin', 0.25);
  _tmp16 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp16.AddOrSetData('i_category', 'Electronics');
  _tmp16.AddOrSetData('i_class', 'C3');
  _tmp16.AddOrSetData('gross_margin', 0.2);
  if not ((_result = specialize TArray<specialize TFPGMap<string, Variant>>([_tmp14, _tmp15, _tmp16]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp0.AddOrSetData('ss_item_sk', 1);
  _tmp0.AddOrSetData('ss_store_sk', 1);
  _tmp0.AddOrSetData('ss_sold_date_sk', 1);
  _tmp0.AddOrSetData('ss_ext_sales_price', 100);
  _tmp0.AddOrSetData('ss_net_profit', 20);
  _tmp1 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp1.AddOrSetData('ss_item_sk', 2);
  _tmp1.AddOrSetData('ss_store_sk', 1);
  _tmp1.AddOrSetData('ss_sold_date_sk', 1);
  _tmp1.AddOrSetData('ss_ext_sales_price', 200);
  _tmp1.AddOrSetData('ss_net_profit', 50);
  _tmp2 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp2.AddOrSetData('ss_item_sk', 3);
  _tmp2.AddOrSetData('ss_store_sk', 2);
  _tmp2.AddOrSetData('ss_sold_date_sk', 1);
  _tmp2.AddOrSetData('ss_ext_sales_price', 150);
  _tmp2.AddOrSetData('ss_net_profit', 30);
  store_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp3.AddOrSetData('i_item_sk', 1);
  _tmp3.AddOrSetData('i_category', 'Books');
  _tmp3.AddOrSetData('i_class', 'C1');
  _tmp4 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp4.AddOrSetData('i_item_sk', 2);
  _tmp4.AddOrSetData('i_category', 'Books');
  _tmp4.AddOrSetData('i_class', 'C2');
  _tmp5 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp5.AddOrSetData('i_item_sk', 3);
  _tmp5.AddOrSetData('i_category', 'Electronics');
  _tmp5.AddOrSetData('i_class', 'C3');
  item := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp3, _tmp4, _tmp5]);
  _tmp6 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp6.AddOrSetData('s_store_sk', 1);
  _tmp6.AddOrSetData('s_state', 'A');
  _tmp7 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp7.AddOrSetData('s_store_sk', 2);
  _tmp7.AddOrSetData('s_state', 'B');
  store := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp6, _tmp7]);
  _tmp8 := specialize TFPGMap<Variant, integer>.Create;
  _tmp8.AddOrSetData('d_date_sk', 1);
  _tmp8.AddOrSetData('d_year', 2000);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp8]);
  _tmp9 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp9.AddOrSetData('i_category', g.key.category);
  _tmp9.AddOrSetData('i_class', g.key.class);
  SetLength(_tmp10, 0);
  for x in g do
  begin
    _tmp10 := Concat(_tmp10, [x.ss_net_profit]);
  end;
  SetLength(_tmp11, 0);
  for x in g do
  begin
    _tmp11 := Concat(_tmp11, [x.ss_ext_sales_price]);
  end;
  _tmp9.AddOrSetData('gross_margin', specialize _sumList<Variant>(_tmp10) div specialize _sumList<Variant>(_tmp11));
  SetLength(_tmp12, 0);
  SetLength(_tmp13, 0);
  for ss in store_sales do
  begin
    for d in date_dim do
    begin
      if not ((ss.ss_sold_date_sk = d.d_date_sk)) then continue;
      for i in item do
      begin
        if not ((ss.ss_item_sk = i.i_item_sk)) then continue;
        for s in store do
        begin
          if not ((ss.ss_store_sk = s.s_store_sk)) then continue;
          if not (((d.d_year = 2000) and ((s.s_state = 'A') or (s.s_state = 'B')))) then continue;
          _tmp12 := Concat(_tmp12, [_tmp9]);
          _tmp13 := Concat(_tmp13, [specialize TArray<specialize TFPGMap<string, Variant>>([g.key.category, g.key.class])]);
        end;
      end;
    end;
  end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp12, _tmp13);
  _result := _tmp12;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q36_simplified;
end.
