program main;
{$mode objfpc}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser, Math;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);
var i,j: integer; tmp: T; k: Variant;
begin
  for i := 0 to High(arr) - 1 do
  for j := i + 1 to High(arr) do
    if keys[i] > keys[j] then
    begin
      tmp := arr[i]; arr[i] := arr[j]; arr[j] := tmp;
      k := keys[i]; keys[i] := keys[j]; keys[j] := k;
    end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<Variant, Variant>;
  _tmp1: specialize TFPGMap<Variant, integer>;
  _tmp10: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp11: specialize TFPGMap<Variant, Variant>;
  _tmp12: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp13: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<Variant, Variant>;
  _tmp3: specialize TFPGMap<Variant, integer>;
  _tmp4: specialize TFPGMap<Variant, Variant>;
  _tmp5: specialize TFPGMap<Variant, Variant>;
  _tmp6: specialize TFPGMap<Variant, Variant>;
  _tmp7: specialize TFPGMap<Variant, Variant>;
  _tmp8: specialize TArray<Variant>;
  _tmp9: specialize TArray<Variant>;
  base: specialize TArray<specialize TFPGMap<string, Variant>>;
  cities: specialize TArray<string>;
  customer: specialize TArray<specialize TFPGMap<string, Variant>>;
  customer_address: specialize TArray<specialize TFPGMap<string, Variant>>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  depcnt: integer;
  dn: specialize TArray<specialize TFPGMap<string, Variant>>;
  dnrec: specialize TFPGMap<string, Variant>;
  household_demographics: specialize TArray<specialize TFPGMap<string, integer>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  ss: specialize TFPGMap<string, Variant>;
  store: specialize TArray<specialize TFPGMap<string, Variant>>;
  store_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  vehcnt: integer;
  x: integer;
  year: integer;

procedure test_TPCDS_Q46_simplified;
var
  _tmp14: specialize TFPGMap<Variant, Variant>;
begin
  _tmp14 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp14.AddOrSetData('c_last_name', 'Doe');
  _tmp14.AddOrSetData('c_first_name', 'John');
  _tmp14.AddOrSetData('ca_city', 'Seattle');
  _tmp14.AddOrSetData('bought_city', 'Portland');
  _tmp14.AddOrSetData('ss_ticket_number', 1);
  _tmp14.AddOrSetData('amt', 5);
  _tmp14.AddOrSetData('profit', 20);
  if not ((_result = specialize TArray<specialize TFPGMap<string, Variant>>([_tmp14]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp0.AddOrSetData('ss_ticket_number', 1);
  _tmp0.AddOrSetData('ss_customer_sk', 1);
  _tmp0.AddOrSetData('ss_addr_sk', 1);
  _tmp0.AddOrSetData('ss_hdemo_sk', 1);
  _tmp0.AddOrSetData('ss_store_sk', 1);
  _tmp0.AddOrSetData('ss_sold_date_sk', 1);
  _tmp0.AddOrSetData('ss_coupon_amt', 5);
  _tmp0.AddOrSetData('ss_net_profit', 20);
  store_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0]);
  _tmp1 := specialize TFPGMap<Variant, integer>.Create;
  _tmp1.AddOrSetData('d_date_sk', 1);
  _tmp1.AddOrSetData('d_dow', 6);
  _tmp1.AddOrSetData('d_year', 2020);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp1]);
  _tmp2 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp2.AddOrSetData('s_store_sk', 1);
  _tmp2.AddOrSetData('s_city', 'CityA');
  store := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp2]);
  _tmp3 := specialize TFPGMap<Variant, integer>.Create;
  _tmp3.AddOrSetData('hd_demo_sk', 1);
  _tmp3.AddOrSetData('hd_dep_count', 2);
  _tmp3.AddOrSetData('hd_vehicle_count', 0);
  household_demographics := specialize TArray<specialize TFPGMap<string, integer>>([_tmp3]);
  _tmp4 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp4.AddOrSetData('ca_address_sk', 1);
  _tmp4.AddOrSetData('ca_city', 'Portland');
  _tmp5 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp5.AddOrSetData('ca_address_sk', 2);
  _tmp5.AddOrSetData('ca_city', 'Seattle');
  customer_address := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4, _tmp5]);
  _tmp6 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp6.AddOrSetData('c_customer_sk', 1);
  _tmp6.AddOrSetData('c_last_name', 'Doe');
  _tmp6.AddOrSetData('c_first_name', 'John');
  _tmp6.AddOrSetData('c_current_addr_sk', 2);
  customer := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp6]);
  depcnt := 2;
  vehcnt := 0;
  year := 2020;
  cities := specialize TArray<string>(['CityA']);
  _tmp7 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp7.AddOrSetData('ss_ticket_number', g.key.ss_ticket_number);
  _tmp7.AddOrSetData('ss_customer_sk', g.key.ss_customer_sk);
  _tmp7.AddOrSetData('bought_city', g.key.ca_city);
  SetLength(_tmp8, 0);
  for x in g do
  begin
    _tmp8 := Concat(_tmp8, [x.ss.ss_coupon_amt]);
  end;
  _tmp7.AddOrSetData('amt', specialize _sumList<Variant>(_tmp8));
  SetLength(_tmp9, 0);
  for x in g do
  begin
    _tmp9 := Concat(_tmp9, [x.ss.ss_net_profit]);
  end;
  _tmp7.AddOrSetData('profit', specialize _sumList<Variant>(_tmp9));
  SetLength(_tmp10, 0);
  for ss in store_sales do
  begin
    for d in date_dim do
    begin
      if not ((ss.ss_sold_date_sk = d.d_date_sk)) then continue;
      for s in store do
      begin
        if not ((ss.ss_store_sk = s.s_store_sk)) then continue;
        for hd in household_demographics do
        begin
          if not ((ss.ss_hdemo_sk = hd.hd_demo_sk)) then continue;
          for ca in customer_address do
          begin
            if not ((ss.ss_addr_sk = ca.ca_address_sk)) then continue;
            if not ((((((hd.hd_dep_count = depcnt) or (hd.hd_vehicle_count = vehcnt)) and (d.d_dow in specialize TArray<specialize TFPGMap<string, Variant>>([6, 0]))) and (d.d_year = year)) and (s.s_city in cities))) then continue;
            _tmp10 := Concat(_tmp10, [_tmp7]);
          end;
        end;
      end;
    end;
  end;
  dn := _tmp10;
  _tmp11 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp11.AddOrSetData('c_last_name', c.c_last_name);
  _tmp11.AddOrSetData('c_first_name', c.c_first_name);
  _tmp11.AddOrSetData('ca_city', current_addr.ca_city);
  _tmp11.AddOrSetData('bought_city', dnrec.bought_city);
  _tmp11.AddOrSetData('ss_ticket_number', dnrec.ss_ticket_number);
  _tmp11.AddOrSetData('amt', dnrec.amt);
  _tmp11.AddOrSetData('profit', dnrec.profit);
  SetLength(_tmp12, 0);
  SetLength(_tmp13, 0);
  for dnrec in dn do
  begin
    for c in customer do
    begin
      if not ((dnrec.ss_customer_sk = c.c_customer_sk)) then continue;
      for current_addr in customer_address do
      begin
        if not ((c.c_current_addr_sk = current_addr.ca_address_sk)) then continue;
        if not ((current_addr.ca_city <> dnrec.bought_city)) then continue;
        _tmp12 := Concat(_tmp12, [_tmp11]);
        _tmp13 := Concat(_tmp13, [specialize TArray<specialize TFPGMap<string, Variant>>([c.c_last_name, c.c_first_name, current_addr.ca_city, dnrec.bought_city, dnrec.ss_ticket_number])]);
      end;
    end;
  end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp12, _tmp13);
  base := _tmp12;
  _result := base;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q46_simplified;
end.
