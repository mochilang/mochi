// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:33:30Z
program Q80;
{$mode objfpc}
{$modeswitch nestedprocvars}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser, fpjsonrtti;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<string, double>;
  _tmp1: specialize TFPGMap<string, double>;
  _tmp10: specialize TArray<double>;
  _tmp2: specialize TFPGMap<string, double>;
  _tmp3: specialize TFPGMap<string, double>;
  _tmp4: specialize TFPGMap<string, double>;
  _tmp5: specialize TFPGMap<string, double>;
  _tmp6: specialize TFPGMap<string, double>;
  _tmp7: specialize TFPGMap<string, double>;
  _tmp8: specialize TArray<double>;
  _tmp9: specialize TArray<double>;
  c: specialize TFPGMap<string, double>;
  catalog_sales: specialize TArray<specialize TFPGMap<string, double>>;
  s: specialize TFPGMap<string, double>;
  store_sales: specialize TArray<specialize TFPGMap<string, double>>;
  total_profit: double;
  w: specialize TFPGMap<string, double>;
  web_sales: specialize TArray<specialize TFPGMap<string, double>>;

procedure test_TPCDS_Q80_sample;
begin
  if not ((total_profit = 80)) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<string, double>.Create;
  _tmp0.AddOrSetData('price', 20);
  _tmp0.AddOrSetData('ret', 5);
  _tmp1 := specialize TFPGMap<string, double>.Create;
  _tmp1.AddOrSetData('price', 10);
  _tmp1.AddOrSetData('ret', 2);
  _tmp2 := specialize TFPGMap<string, double>.Create;
  _tmp2.AddOrSetData('price', 5);
  _tmp2.AddOrSetData('ret', 0);
  store_sales := specialize TArray<specialize TFPGMap<string, double>>([_tmp0, _tmp1, _tmp2]);
  _tmp3 := specialize TFPGMap<string, double>.Create;
  _tmp3.AddOrSetData('price', 15);
  _tmp3.AddOrSetData('ret', 3);
  _tmp4 := specialize TFPGMap<string, double>.Create;
  _tmp4.AddOrSetData('price', 8);
  _tmp4.AddOrSetData('ret', 1);
  catalog_sales := specialize TArray<specialize TFPGMap<string, double>>([_tmp3, _tmp4]);
  _tmp5 := specialize TFPGMap<string, double>.Create;
  _tmp5.AddOrSetData('price', 25);
  _tmp5.AddOrSetData('ret', 5);
  _tmp6 := specialize TFPGMap<string, double>.Create;
  _tmp6.AddOrSetData('price', 15);
  _tmp6.AddOrSetData('ret', 8);
  _tmp7 := specialize TFPGMap<string, double>.Create;
  _tmp7.AddOrSetData('price', 8);
  _tmp7.AddOrSetData('ret', 2);
  web_sales := specialize TArray<specialize TFPGMap<string, double>>([_tmp5, _tmp6, _tmp7]);
  SetLength(_tmp8, 0);
  for s in store_sales do
  begin
    _tmp8 := Concat(_tmp8, [s.KeyData['price'] - s.KeyData['ret']]);
  end;
  SetLength(_tmp9, 0);
  for c in catalog_sales do
  begin
    _tmp9 := Concat(_tmp9, [c.KeyData['price'] - c.KeyData['ret']]);
  end;
  SetLength(_tmp10, 0);
  for w in web_sales do
  begin
    _tmp10 := Concat(_tmp10, [w.KeyData['price'] - w.KeyData['ret']]);
  end;
  total_profit := specialize _sumList<double>(_tmp8) + specialize _sumList<double>(_tmp9) + specialize _sumList<double>(_tmp10);
  specialize _json<double>(total_profit);
  test_TPCDS_Q80_sample;
end.
