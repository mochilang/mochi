program main;
{$mode objfpc}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser, Math;

type
  generic TArray<T> = array of T;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

function _sliceString(s: string; i, j: integer): string;
var start_, end_, n: integer;
begin
  start_ := i;
  end_ := j;
  n := Length(s);
  if start_ < 0 then start_ := n + start_;
  if end_ < 0 then end_ := n + end_;
  if start_ < 0 then start_ := 0;
  if end_ > n then end_ := n;
  if end_ < start_ then end_ := start_;
  Result := Copy(s, start_ + 1, end_ - start_);
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<Variant, Variant>;
  _tmp1: specialize TFPGMap<Variant, Variant>;
  _tmp10: specialize TArray<Variant>;
  _tmp11: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp2: specialize TFPGMap<Variant, integer>;
  _tmp3: specialize TFPGMap<Variant, integer>;
  _tmp4: specialize TFPGMap<Variant, Variant>;
  _tmp5: specialize TFPGMap<Variant, Variant>;
  _tmp6: specialize TFPGMap<Variant, Variant>;
  _tmp7: specialize TFPGMap<Variant, Variant>;
  _tmp8: specialize TFPGMap<Variant, integer>;
  _tmp9: specialize TFPGMap<Variant, Variant>;
  base: specialize TArray<specialize TFPGMap<string, Variant>>;
  customer: specialize TArray<specialize TFPGMap<string, integer>>;
  customer_address: specialize TArray<specialize TFPGMap<string, Variant>>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  item: specialize TArray<specialize TFPGMap<string, Variant>>;
  item_ids: specialize TArray<string>;
  qoy: integer;
  records: specialize TArray<specialize TFPGMap<string, Variant>>;
  web_sales: specialize TArray<specialize TFPGMap<string, Variant>>;
  ws: specialize TFPGMap<string, Variant>;
  x: integer;
  year: integer;
  zip_list: specialize TArray<string>;

procedure test_TPCDS_Q45_simplified;
var
  _tmp12: specialize TFPGMap<Variant, Variant>;
  _tmp13: specialize TFPGMap<Variant, Variant>;
begin
  _tmp12 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp12.AddOrSetData('ca_zip', '85669');
  _tmp12.AddOrSetData('sum_ws_sales_price', 50);
  _tmp13 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp13.AddOrSetData('ca_zip', '99999');
  _tmp13.AddOrSetData('sum_ws_sales_price', 30);
  if not ((records = specialize TArray<specialize TFPGMap<string, Variant>>([_tmp12, _tmp13]))) then raise Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp0.AddOrSetData('bill_customer_sk', 1);
  _tmp0.AddOrSetData('item_sk', 1);
  _tmp0.AddOrSetData('sold_date_sk', 1);
  _tmp0.AddOrSetData('sales_price', 50);
  _tmp1 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp1.AddOrSetData('bill_customer_sk', 2);
  _tmp1.AddOrSetData('item_sk', 2);
  _tmp1.AddOrSetData('sold_date_sk', 1);
  _tmp1.AddOrSetData('sales_price', 30);
  web_sales := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<Variant, integer>.Create;
  _tmp2.AddOrSetData('c_customer_sk', 1);
  _tmp2.AddOrSetData('c_current_addr_sk', 1);
  _tmp3 := specialize TFPGMap<Variant, integer>.Create;
  _tmp3.AddOrSetData('c_customer_sk', 2);
  _tmp3.AddOrSetData('c_current_addr_sk', 2);
  customer := specialize TArray<specialize TFPGMap<string, integer>>([_tmp2, _tmp3]);
  _tmp4 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp4.AddOrSetData('ca_address_sk', 1);
  _tmp4.AddOrSetData('ca_zip', '85669');
  _tmp5 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp5.AddOrSetData('ca_address_sk', 2);
  _tmp5.AddOrSetData('ca_zip', '99999');
  customer_address := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4, _tmp5]);
  _tmp6 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp6.AddOrSetData('i_item_sk', 1);
  _tmp6.AddOrSetData('i_item_id', 'I1');
  _tmp7 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp7.AddOrSetData('i_item_sk', 2);
  _tmp7.AddOrSetData('i_item_id', 'I2');
  item := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp6, _tmp7]);
  _tmp8 := specialize TFPGMap<Variant, integer>.Create;
  _tmp8.AddOrSetData('d_date_sk', 1);
  _tmp8.AddOrSetData('d_qoy', 1);
  _tmp8.AddOrSetData('d_year', 2020);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp8]);
  zip_list := specialize TArray<string>(['85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792']);
  item_ids := specialize TArray<string>(['I2']);
  qoy := 1;
  year := 2020;
  _tmp9 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp9.AddOrSetData('ca_zip', g.key);
  SetLength(_tmp10, 0);
  for x in g do
  begin
    _tmp10 := Concat(_tmp10, [x.ws.sales_price]);
  end;
  _tmp9.AddOrSetData('sum_ws_sales_price', specialize _sumList<Variant>(_tmp10));
  SetLength(_tmp11, 0);
  for ws in web_sales do
  begin
    for c in customer do
    begin
      if not ((ws.bill_customer_sk = c.c_customer_sk)) then continue;
      for ca in customer_address do
      begin
        if not ((c.c_current_addr_sk = ca.ca_address_sk)) then continue;
        for i in item do
        begin
          if not ((ws.item_sk = i.i_item_sk)) then continue;
          for d in date_dim do
          begin
            if not ((ws.sold_date_sk = d.d_date_sk)) then continue;
            if not (((((_sliceString(ca.ca_zip, 0, 0 + 5) in zip_list) or (item_ids.IndexOf(i.i_item_id) >= 0)) and (d.d_qoy = qoy)) and (d.d_year = year))) then continue;
            _tmp11 := Concat(_tmp11, [_tmp9]);
          end;
        end;
      end;
    end;
  end;
  base := _tmp11;
  records := base;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(records);
  test_TPCDS_Q45_simplified;
end.
