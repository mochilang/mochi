program main;
{$mode objfpc}
uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, jsonparser;

type
  generic TArray<T> = array of T;

procedure test_TPCDS_Q1_empty;
begin
  if not ((Length(_result) = 0)) then raise Exception.Create('expect failed');
end;

var
  _tmp0: specialize TArray<integer>;
  _tmp1: specialize TFPGMap<string, integer>;
  _tmp2: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp3: specialize TFPGMap<string, integer>;
  _tmp4: specialize TArray<integer>;
  _tmp5: specialize TArray<specialize TFPGMap<string, integer>>;
  _tmp6: specialize TArray<Variant>;
  ctr1: specialize TFPGMap<string, integer>;
  ctr2: specialize TFPGMap<string, integer>;
  customer: specialize TArray<integer>;
  customer_total_return: specialize TArray<specialize TFPGMap<string, integer>>;
  date_dim: specialize TArray<integer>;
  _result: specialize TArray<specialize TFPGMap<string, integer>>;
  sr: integer;
  store: specialize TArray<integer>;
  store_returns: specialize TArray<integer>;
  x: integer;

generic function _avgList<T>(arr: specialize TArray<T>): double;
begin
  if Length(arr) = 0 then exit(0);
  Result := _sumList<T>(arr) / Length(arr);
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);
var i,j: integer; tmp: T; k: Variant;
begin
  for i := 0 to High(arr) - 1 do
  for j := i + 1 to High(arr) do
    if keys[i] > keys[j] then
    begin
      tmp := arr[i]; arr[i] := arr[j]; arr[j] := tmp;
      k := keys[i]; keys[i] := keys[j]; keys[j] := k;
    end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;
var i: integer; s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

begin
  store_returns := specialize TArray<integer>([]);
  date_dim := specialize TArray<integer>([]);
  store := specialize TArray<integer>([]);
  customer := specialize TArray<integer>([]);
  SetLength(_tmp0, 0);
  for x in g do
  begin
    _tmp0 := Concat(_tmp0, [x.sr_return_amt]);
  end;
  _tmp1 := specialize TFPGMap<string, integer>.Create;
  _tmp1.AddOrSetData('ctr_custo_tmp1er_sk', g.key.custo_tmp1er_sk);
  _tmp1.AddOrSetData('ctr_store_sk', g.key.store_sk);
  _tmp1.AddOrSetData('ctr_total_return', specialize _su_tmp1List<integer>(_t_tmp1p0));
  SetLength(_tmp2, 0);
  for sr in store_returns do
  begin
    for d in date_dim do
    begin
      if not ((sr.sr_returned_date_sk = d.d_date_sk)) then continue;
      if not ((d.d_year = 1998)) then continue;
      _tmp2 := Concat(_tmp2, [_tmp1]);
    end;
  end;
  customer_total_return := _tmp2;
  _tmp3 := specialize TFPGMap<string, integer>.Create;
  _tmp3.AddOrSetData('c_custo_tmp3er_id', c.c_custo_tmp3er_id);
  SetLength(_tmp4, 0);
  for ctr2 in customer_total_return do
  begin
    if not ((ctr1.ctr_store_sk = ctr2.ctr_store_sk)) then continue;
    _tmp4 := Concat(_tmp4, [ctr2.ctr_total_return]);
  end;
  SetLength(_tmp5, 0);
  SetLength(_tmp6, 0);
  for ctr1 in customer_total_return do
  begin
    for s in store do
    begin
      if not ((ctr1.ctr_store_sk = s.s_store_sk)) then continue;
      for c in customer do
      begin
        if not ((ctr1.ctr_customer_sk = c.c_customer_sk)) then continue;
        if not (((ctr1.ctr_total_return > specialize _avgList<integer>(_tmp4) * 1.2) and (s.s_state = 'TN'))) then continue;
        _tmp5 := Concat(_tmp5, [_tmp3]);
        _tmp6 := Concat(_tmp6, [c.c_customer_id]);
      end;
    end;
  end;
  specialize _sortBy<specialize TFPGMap<string, integer>>(_tmp5, _tmp6);
  _result := _tmp5;
  json(_result);
  test_TPCDS_Q1_empty;
end.
