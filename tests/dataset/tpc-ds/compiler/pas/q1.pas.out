program main;
{$mode objfpc}

uses SysUtils, fgl, fphttpclient, Classes, Variants, fpjson, fpjsonrtti, jsonparser;

type
  generic TArray<T> = array of T;

  generic function _avgList<T>(arr: specialize TArray<T>): double;
begin
  if Length(arr) = 0 then exit(0);
  Result := specialize _sumList<T>(arr) / Length(arr);
end;

generic procedure _json<T>(v: T);
begin
  writeln('[]');
end;

generic procedure _sortBy<T>(var arr: specialize TArray<T>; keys: specialize TArray<Variant>);

var i,j: integer;
  tmp: T;
  k: Variant;
begin
  for i := 0 to High(arr) - 1 do
    for j := i + 1 to High(arr) do
      if keys[i] > keys[j] then
        begin
          tmp := arr[i];
          arr[i] := arr[j];
          arr[j] := tmp;
          k := keys[i];
          keys[i] := keys[j];
          keys[j] := k;
        end;
end;

generic function _sumList<T>(arr: specialize TArray<T>): double;

var i: integer;
  s: double;
begin
  s := 0;
  for i := 0 to High(arr) do
    s := s + arr[i];
  Result := s;
end;

var
  _tmp0: specialize TFPGMap<Variant, Variant>;
  _tmp1: specialize TFPGMap<Variant, Variant>;
  _tmp10: specialize TArray<Variant>;
  _tmp11: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp12: specialize TArray<Variant>;
  _tmp2: specialize TFPGMap<Variant, integer>;
  _tmp3: specialize TFPGMap<Variant, Variant>;
  _tmp4: specialize TFPGMap<Variant, Variant>;
  _tmp5: specialize TFPGMap<Variant, Variant>;
  _tmp6: specialize TArray<Variant>;
  _tmp7: specialize TFPGMap<Variant, Variant>;
  _tmp8: specialize TArray<specialize TFPGMap<string, Variant>>;
  _tmp9: specialize TFPGMap<Variant, Variant>;
  ctr1: specialize TFPGMap<string, Variant>;
  ctr2: specialize TFPGMap<string, Variant>;
  customer: specialize TArray<specialize TFPGMap<string, Variant>>;
  customer_total_return: specialize TArray<specialize TFPGMap<string, Variant>>;
  date_dim: specialize TArray<specialize TFPGMap<string, integer>>;
  _result: specialize TArray<specialize TFPGMap<string, Variant>>;
  sr: specialize TFPGMap<string, Variant>;
  store: specialize TArray<specialize TFPGMap<string, Variant>>;
  store_returns: specialize TArray<specialize TFPGMap<string, Variant>>;
  x: integer;

procedure test_TPCDS_Q1_result;

var
  _tmp13: specialize TFPGMap<Variant, Variant>;
begin
  _tmp13 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp13.AddOrSetData('c_custo_tmp13er_id', 'C2');
  if not ((_result = specialize TArray<specialize TFPGMap<string, string>>([_tmp13]))) then raise
    Exception.Create('expect failed');
end;

begin
  _tmp0 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp0.AddOrSetData('sr_returned_date_sk', 1);
  _tmp0.AddOrSetData('sr_custo_tmp0er_sk', 1);
  _tmp0.AddOrSetData('sr_store_sk', 10);
  _tmp0.AddOrSetData('sr_return_a_tmp0t', 20);
  _tmp1 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp1.AddOrSetData('sr_returned_date_sk', 1);
  _tmp1.AddOrSetData('sr_custo_tmp1er_sk', 2);
  _tmp1.AddOrSetData('sr_store_sk', 10);
  _tmp1.AddOrSetData('sr_return_a_tmp1t', 50);
  store_returns := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp0, _tmp1]);
  _tmp2 := specialize TFPGMap<Variant, integer>.Create;
  _tmp2.AddOrSetData('d_date_sk', 1);
  _tmp2.AddOrSetData('d_year', 1998);
  date_dim := specialize TArray<specialize TFPGMap<string, integer>>([_tmp2]);
  _tmp3 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp3.AddOrSetData('s_store_sk', 10);
  _tmp3.AddOrSetData('s_state', 'TN');
  store := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp3]);
  _tmp4 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp4.AddOrSetData('c_custo_tmp4er_sk', 1);
  _tmp4.AddOrSetData('c_custo_tmp4er_id', 'C1');
  _tmp5 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp5.AddOrSetData('c_custo_tmp5er_sk', 2);
  _tmp5.AddOrSetData('c_custo_tmp5er_id', 'C2');
  customer := specialize TArray<specialize TFPGMap<string, Variant>>([_tmp4, _tmp5]);
  SetLength(_tmp6, 0);
  for x in g do
    begin
      _tmp6 := Concat(_tmp6, [x.sr_return_amt]);
    end;
  _tmp7 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp7.AddOrSetData('ctr_custo_tmp7er_sk', g.key.custo_tmp7er_sk);
  _tmp7.AddOrSetData('ctr_store_sk', g.key.store_sk);
  _tmp7.AddOrSetData('ctr_total_return', specialize _su_tmp7List<Variant>(_t_tmp7p6));
  SetLength(_tmp8, 0);
  for sr in store_returns do
    begin
      for d in date_dim do
        begin
          if not (((sr.sr_returned_date_sk = d.d_date_sk) and (d.d_year = 1998))) then continue;
          _tmp8 := Concat(_tmp8, [_tmp7]);
        end;
    end;
  customer_total_return := _tmp8;
  _tmp9 := specialize TFPGMap<Variant, Variant>.Create;
  _tmp9.AddOrSetData('c_custo_tmp9er_id', c.c_custo_tmp9er_id);
  SetLength(_tmp10, 0);
  for ctr2 in customer_total_return do
    begin
      if not ((ctr1.ctr_store_sk = ctr2.ctr_store_sk)) then continue;
      _tmp10 := Concat(_tmp10, [ctr2.ctr_total_return]);
    end;
  SetLength(_tmp11, 0);
  SetLength(_tmp12, 0);
  for ctr1 in customer_total_return do
    begin
      for s in store do
        begin
          if not ((ctr1.ctr_store_sk = s.s_store_sk)) then continue;
          for c in customer do
            begin
              if not ((ctr1.ctr_customer_sk = c.c_customer_sk)) then continue;
              if not (((ctr1.ctr_total_return > specialize _avgList<Variant>(_tmp10) * 1.2) and (s.
                 s_state = 'TN'))) then continue;
              _tmp11 := Concat(_tmp11, [_tmp9]);
              _tmp12 := Concat(_tmp12, [c.c_customer_id]);
            end;
        end;
    end;
  specialize _sortBy<specialize TFPGMap<string, Variant>>(_tmp11, _tmp12);
  _result := _tmp11;
  specialize _json<specialize TArray<specialize TFPGMap<string, Variant>>>(_result);
  test_TPCDS_Q1_result;
end.
