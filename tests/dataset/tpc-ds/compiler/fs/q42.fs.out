// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    sold_date_sk: int
    item_sk: int
    ext_sales_price: float
}
type Anon2 = {
    i_item_sk: int
    i_manager_id: int
    i_category_id: int
    i_category: string
}
type Anon3 = {
    d_date_sk: int
    d_year: int
    d_moy: int
}
type Anon4 = {
    d_year: int
    i_category_id: int
    i_category: string
    price: float
}
type Anon5 = {
    d_year: obj
    i_category_id: obj
    i_category: obj
    sum_ss_ext_sales_price: obj
}
type Anon6 = {
    d_year: int
    i_category_id: int
    i_category: string
}
type Anon7 = {
    d_year: int
    i_category_id: int
    i_category: string
    sum_ss_ext_sales_price: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let store_sales: Anon1 list = [{ sold_date_sk = 1; item_sk = 1; ext_sales_price = 10.0 }; { sold_date_sk = 1; item_sk = 2; ext_sales_price = 20.0 }; { sold_date_sk = 2; item_sk = 1; ext_sales_price = 15.0 }]
let item: Anon2 list = [{ i_item_sk = 1; i_manager_id = 1; i_category_id = 100; i_category = "CatA" }; { i_item_sk = 2; i_manager_id = 1; i_category_id = 200; i_category = "CatB" }]
let date_dim: Anon3 list = [{ d_date_sk = 1; d_year = 2020; d_moy = 5 }; { d_date_sk = 2; d_year = 2021; d_moy = 5 }]
let month: int = 5
let year: int = 2020
let records: Anon4 list = [ for dt in date_dim do 
  for ss in store_sales do 
  for it in item do if ss.sold_date_sk = dt.d_date_sk && ss.item_sk = it.i_item_sk && it.i_manager_id = 1 && dt.d_moy = month && dt.d_year = year then yield { d_year = dt.d_year; i_category_id = it.i_category_id; i_category = it.i_category; price = ss.ext_sales_price } ]
let grouped: Anon5 list = [ for g in _group_by [ for r in records do yield r ] (fun r -> { d_year = r.d_year; i_category_id = r.i_category_id; i_category = r.i_category }) do
    yield { d_year = g.key.d_year; i_category_id = g.key.i_category_id; i_category = g.key.i_category; sum_ss_ext_sales_price = List.sum [ for x in g do yield x.price ] } ]
let base: Anon5 list = [ for g in grouped do yield g ] |> List.sortByDescending (fun g -> g.sum_ss_ext_sales_price)
let result: Anon5 list = base
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ d_year = 2020; i_category_id = 200; i_category = "CatB"; sum_ss_ext_sales_price = 20.0 }; { d_year = 2020; i_category_id = 100; i_category = "CatA"; sum_ss_ext_sales_price = 10.0 }])
