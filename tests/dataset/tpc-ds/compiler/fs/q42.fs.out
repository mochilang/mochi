open System

let sold_date_sk = "sold_date_sk"
let item_sk = "item_sk"
let ext_sales_price = "ext_sales_price"
let i_item_sk = "i_item_sk"
let i_manager_id = "i_manager_id"
let i_category_id = "i_category_id"
let i_category = "i_category"
let d_date_sk = "d_date_sk"
let d_year = "d_year"
let d_moy = "d_moy"
let price = "price"
let sum_ss_ext_sales_price = "sum_ss_ext_sales_price"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let store_sales = [|Map.ofList [(sold_date_sk, 1); (item_sk, 1); (ext_sales_price, 10.0)]; Map.ofList [(sold_date_sk, 1); (item_sk, 2); (ext_sales_price, 20.0)]; Map.ofList [(sold_date_sk, 2); (item_sk, 1); (ext_sales_price, 15.0)]|]
let item = [|Map.ofList [(i_item_sk, 1); (i_manager_id, 1); (i_category_id, 100); (i_category, "CatA")]; Map.ofList [(i_item_sk, 2); (i_manager_id, 2); (i_category_id, 200); (i_category, "CatB")]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_year, 2020); (d_moy, 5)]; Map.ofList [(d_date_sk, 2); (d_year, 2021); (d_moy, 5)]|]
let month = 5
let year = 2020
let records = 
    [|
    for dt in date_dim do
        for ss in store_sales do
            if (ss.sold_date_sk = dt.d_date_sk) then
                for it in item do
                    if (ss.item_sk = it.i_item_sk) then
                        if (((it.i_manager_id = 1) && (dt.d_moy = month)) && (dt.d_year = year)) then
                            yield Map.ofList [(d_year, dt.d_year); (i_category_id, it.i_category_id); (i_category, it.i_category); (price, ss.ext_sales_price)]
    |]
let _base = [| for g in _group_by [|
    for r in records do
        yield r
|] (fun r -> Map.ofList [(d_year, r.d_year); (i_category_id, r.i_category_id); (i_category, r.i_category)]) do let g = g yield ([|(-sum 
    [|
    for x in g do
        yield x.price
    |]); g.key.d_year; g.key.i_category_id; g.key.i_category|], Map.ofList [(d_year, g.key.d_year); (i_category_id, g.key.i_category_id); (i_category, g.key.i_category); (sum_ss_ext_sales_price, sum 
    [|
    for x in g do
        yield x.price
    |])]) |] |> Array.sortBy fst |> Array.map snd
let result = _base
ignore (_json result)
let test_TPCDS_Q42_simplified() =
    if not ((result = [|Map.ofList [(d_year, 2020); (i_category_id, 200); (i_category, "CatB"); (sum_ss_ext_sales_price, 20.0)]; Map.ofList [(d_year, 2020); (i_category_id, 100); (i_category, "CatA"); (sum_ss_ext_sales_price, 10.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q42 simplified" test_TPCDS_Q42_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
