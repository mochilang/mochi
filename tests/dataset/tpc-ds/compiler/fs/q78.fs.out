open System

let ss_sold_year = "ss_sold_year"
let ss_item_sk = "ss_item_sk"
let ss_customer_sk = "ss_customer_sk"
let ss_qty = "ss_qty"
let ss_wc = "ss_wc"
let ss_sp = "ss_sp"
let ws_sold_year = "ws_sold_year"
let ws_item_sk = "ws_item_sk"
let ws_customer_sk = "ws_customer_sk"
let ws_qty = "ws_qty"
let ws_wc = "ws_wc"
let ws_sp = "ws_sp"
let cs_sold_year = "cs_sold_year"
let cs_item_sk = "cs_item_sk"
let cs_customer_sk = "cs_customer_sk"
let cs_qty = "cs_qty"
let cs_wc = "cs_wc"
let cs_sp = "cs_sp"
let ratio = "ratio"
let store_qty = "store_qty"
let store_wholesale_cost = "store_wholesale_cost"
let store_sales_price = "store_sales_price"
let other_chan_qty = "other_chan_qty"
let other_chan_wholesale_cost = "other_chan_wholesale_cost"
let other_chan_sales_price = "other_chan_sales_price"
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false

let ss = [|Map.ofList [(ss_sold_year, 1998); (ss_item_sk, 1); (ss_customer_sk, 1); (ss_qty, 10); (ss_wc, 50.0); (ss_sp, 100.0)]|]
let ws = [|Map.ofList [(ws_sold_year, 1998); (ws_item_sk, 1); (ws_customer_sk, 1); (ws_qty, 5); (ws_wc, 25.0); (ws_sp, 50.0)]|]
let cs = [|Map.ofList [(cs_sold_year, 1998); (cs_item_sk, 1); (cs_customer_sk, 1); (cs_qty, 3); (cs_wc, 15.0); (cs_sp, 30.0)]|]
let result = 
    [|
    for s in ss do
        for w in ws do
            if (((w.ws_sold_year = s.ss_sold_year) && (w.ws_item_sk = s.ss_item_sk)) && (w.ws_customer_sk = s.ss_customer_sk)) then
                for c in cs do
                    if (((c.cs_sold_year = s.ss_sold_year) && (c.cs_item_sk = s.ss_item_sk)) && (c.cs_customer_sk = s.ss_customer_sk)) then
                        if ((((((if (w = null) then 0 else w.ws_qty)) > 0) || (((if (c = null) then 0 else c.cs_qty)) > 0))) && (s.ss_sold_year = 1998)) then
                            yield Map.ofList [(ss_sold_year, s.ss_sold_year); (ss_item_sk, s.ss_item_sk); (ss_customer_sk, s.ss_customer_sk); (ratio, (s.ss_qty / ((((if (w = null) then 0 else w.ws_qty)) + ((if (c = null) then 0 else c.cs_qty)))))); (store_qty, s.ss_qty); (store_wholesale_cost, s.ss_wc); (store_sales_price, s.ss_sp); (other_chan_qty, (((if (w = null) then 0 else w.ws_qty)) + ((if (c = null) then 0 else c.cs_qty)))); (other_chan_wholesale_cost, (((if (w = null) then 0.0 else w.ws_wc)) + ((if (c = null) then 0.0 else c.cs_wc)))); (other_chan_sales_price, (((if (w = null) then 0.0 else w.ws_sp)) + ((if (c = null) then 0.0 else c.cs_sp))))]
    |]
ignore (_json result)
let test_TPCDS_Q78_simplified() =
    if not ((result = [|Map.ofList [(ss_sold_year, 1998); (ss_item_sk, 1); (ss_customer_sk, 1); (ratio, 1.25); (store_qty, 10); (store_wholesale_cost, 50.0); (store_sales_price, 100.0); (other_chan_qty, 8); (other_chan_wholesale_cost, 40.0); (other_chan_sales_price, 80.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q78 simplified" test_TPCDS_Q78_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
