// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    ss_sold_year: int
    ss_item_sk: int
    ss_customer_sk: int
    ss_qty: int
    ss_wc: float
    ss_sp: float
}
type Anon2 = {
    ws_sold_year: int
    ws_item_sk: int
    ws_customer_sk: int
    ws_qty: int
    ws_wc: float
    ws_sp: float
}
type Anon3 = {
    cs_sold_year: int
    cs_item_sk: int
    cs_customer_sk: int
    cs_qty: int
    cs_wc: float
    cs_sp: float
}
type Anon4 = {
    ss_sold_year: int
    ss_item_sk: int
    ss_customer_sk: int
    ratio: int
    store_qty: int
    store_wholesale_cost: float
    store_sales_price: float
    other_chan_qty: obj
    other_chan_wholesale_cost: obj
    other_chan_sales_price: obj
}
type Anon5 = {
    ss_sold_year: int
    ss_item_sk: int
    ss_customer_sk: int
    ratio: float
    store_qty: int
    store_wholesale_cost: float
    store_sales_price: float
    other_chan_qty: int
    other_chan_wholesale_cost: float
    other_chan_sales_price: float
}
let ss: Anon1 list = [{ ss_sold_year = 1998; ss_item_sk = 1; ss_customer_sk = 1; ss_qty = 10; ss_wc = 50.0; ss_sp = 100.0 }]
let ws: Anon2 list = [{ ws_sold_year = 1998; ws_item_sk = 1; ws_customer_sk = 1; ws_qty = 5; ws_wc = 25.0; ws_sp = 50.0 }]
let cs: Anon3 list = [{ cs_sold_year = 1998; cs_item_sk = 1; cs_customer_sk = 1; cs_qty = 3; cs_wc = 15.0; cs_sp = 30.0 }]
let result: Anon4 list = [ for s in ss do 
  let w = List.tryFind (fun w -> w.ws_sold_year = s.ss_sold_year && w.ws_item_sk = s.ss_item_sk && w.ws_customer_sk = s.ss_customer_sk) ws 
  let c = List.tryFind (fun c -> c.cs_sold_year = s.ss_sold_year && c.cs_item_sk = s.ss_item_sk && c.cs_customer_sk = s.ss_customer_sk) cs if (((if w = () then 0 else w.ws_qty)) > 0 || ((if c = () then 0 else c.cs_qty)) > 0) && s.ss_sold_year = 1998 then yield { ss_sold_year = s.ss_sold_year; ss_item_sk = s.ss_item_sk; ss_customer_sk = s.ss_customer_sk; ratio = s.ss_qty / (((if w = () then 0 else w.ws_qty)) + ((if c = () then 0 else c.cs_qty))); store_qty = s.ss_qty; store_wholesale_cost = s.ss_wc; store_sales_price = s.ss_sp; other_chan_qty = ((if w = () then 0 else w.ws_qty)) + ((if c = () then 0 else c.cs_qty)); other_chan_wholesale_cost = ((if w = () then 0.0 else w.ws_wc)) + ((if c = () then 0.0 else c.cs_wc)); other_chan_sales_price = ((if w = () then 0.0 else w.ws_sp)) + ((if c = () then 0.0 else c.cs_sp)) } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ ss_sold_year = 1998; ss_item_sk = 1; ss_customer_sk = 1; ratio = 1.25; store_qty = 10; store_wholesale_cost = 50.0; store_sales_price = 100.0; other_chan_qty = 8; other_chan_wholesale_cost = 40.0; other_chan_sales_price = 80.0 }])
