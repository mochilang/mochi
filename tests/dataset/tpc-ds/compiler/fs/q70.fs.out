open System

let s_store_sk = "s_store_sk"
let s_state = "s_state"
let s_county = "s_county"
let d_date_sk = "d_date_sk"
let d_month_seq = "d_month_seq"
let ss_sold_date_sk = "ss_sold_date_sk"
let ss_store_sk = "ss_store_sk"
let ss_net_profit = "ss_net_profit"
let total_sum = "total_sum"
let state = "state"
let county = "county"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let store = [|Map.ofList [(s_store_sk, 1); (s_state, "CA"); (s_county, "Orange")]; Map.ofList [(s_store_sk, 2); (s_state, "CA"); (s_county, "Orange")]; Map.ofList [(s_store_sk, 3); (s_state, "TX"); (s_county, "Travis")]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_month_seq, 1200)]; Map.ofList [(d_date_sk, 2); (d_month_seq, 1201)]|]
let store_sales = [|Map.ofList [(ss_sold_date_sk, 1); (ss_store_sk, 1); (ss_net_profit, 10.0)]; Map.ofList [(ss_sold_date_sk, 1); (ss_store_sk, 2); (ss_net_profit, 5.0)]; Map.ofList [(ss_sold_date_sk, 2); (ss_store_sk, 3); (ss_net_profit, 20.0)]|]
let dms = 1200
let result = [| for g in _group_by [|
    for ss in store_sales do
        for d in date_dim do
            if (d.d_date_sk = ss.ss_sold_date_sk) then
                for s in store do
                    if (s.s_store_sk = ss.ss_store_sk) then
                        if ((d.d_month_seq >= dms) && (d.d_month_seq <= (dms + 11))) then
                            yield (ss, d, s)
|] (fun (ss, d, s) -> Map.ofList [(state, s.s_state); (county, s.s_county)]) do let g = g yield ([|g.key.state; g.key.county|], Map.ofList [(s_state, g.key.state); (s_county, g.key.county); (total_sum, sum 
    [|
    for x in g do
        yield x.ss.ss_net_profit
    |])]) |] |> Array.sortBy fst |> Array.map snd
ignore (_json result)
let test_TPCDS_Q70_simplified() =
    if not ((result = [|Map.ofList [(s_state, "CA"); (s_county, "Orange"); (total_sum, 15.0)]; Map.ofList [(s_state, "TX"); (s_county, "Travis"); (total_sum, 20.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q70 simplified" test_TPCDS_Q70_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
