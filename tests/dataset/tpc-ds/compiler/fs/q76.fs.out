// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    d_date_sk: int
    d_year: int
    d_qoy: int
}
type Anon2 = {
    i_item_sk: int
    i_category: string
}
type Anon3 = {
    ss_customer_sk: obj
    ss_item_sk: int
    ss_ext_sales_price: float
    ss_sold_date_sk: int
}
type Anon4 = {
    ws_bill_customer_sk: obj
    ws_item_sk: int
    ws_ext_sales_price: float
    ws_sold_date_sk: int
}
type Anon5 = {
    cs_bill_customer_sk: obj
    cs_item_sk: int
    cs_ext_sales_price: float
    cs_sold_date_sk: int
}
type Anon6 = {
    channel: string
    col_name: obj
    d_year: int
    d_qoy: int
    i_category: string
    ext_sales_price: float
}
type Anon7 = {
    channel: obj
    col_name: obj
    d_year: obj
    d_qoy: obj
    i_category: obj
    sales_cnt: obj
    sales_amt: obj
}
type Anon8 = {
    channel: obj
    col_name: obj
    d_year: obj
    d_qoy: obj
    i_category: obj
}
type Anon9 = {
    channel: string
    col_name: obj
    d_year: int
    d_qoy: int
    i_category: string
    sales_cnt: int
    sales_amt: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let date_dim: Anon1 list = [{ d_date_sk = 1; d_year = 1998; d_qoy = 1 }]
let item: Anon2 list = [{ i_item_sk = 1; i_category = "CatA" }; { i_item_sk = 2; i_category = "CatB" }; { i_item_sk = 3; i_category = "CatC" }]
let store_sales: Anon3 list = [{ ss_customer_sk = (); ss_item_sk = 1; ss_ext_sales_price = 10.0; ss_sold_date_sk = 1 }]
let web_sales: Anon4 list = [{ ws_bill_customer_sk = (); ws_item_sk = 2; ws_ext_sales_price = 15.0; ws_sold_date_sk = 1 }]
let catalog_sales: Anon5 list = [{ cs_bill_customer_sk = (); cs_item_sk = 3; cs_ext_sales_price = 20.0; cs_sold_date_sk = 1 }]
let store_part: Anon6 list = [ for ss in store_sales do 
  for i in item do 
  for d in date_dim do if i.i_item_sk = ss.ss_item_sk && d.d_date_sk = ss.ss_sold_date_sk && ss.ss_customer_sk = () then yield { channel = "store"; col_name = ss.ss_customer_sk; d_year = d.d_year; d_qoy = d.d_qoy; i_category = i.i_category; ext_sales_price = ss.ss_ext_sales_price } ]
let web_part: Anon6 list = [ for ws in web_sales do 
  for i in item do 
  for d in date_dim do if i.i_item_sk = ws.ws_item_sk && d.d_date_sk = ws.ws_sold_date_sk && ws.ws_bill_customer_sk = () then yield { channel = "web"; col_name = ws.ws_bill_customer_sk; d_year = d.d_year; d_qoy = d.d_qoy; i_category = i.i_category; ext_sales_price = ws.ws_ext_sales_price } ]
let catalog_part: Anon6 list = [ for cs in catalog_sales do 
  for i in item do 
  for d in date_dim do if i.i_item_sk = cs.cs_item_sk && d.d_date_sk = cs.cs_sold_date_sk && cs.cs_bill_customer_sk = () then yield { channel = "catalog"; col_name = cs.cs_bill_customer_sk; d_year = d.d_year; d_qoy = d.d_qoy; i_category = i.i_category; ext_sales_price = cs.cs_ext_sales_price } ]
let all_rows: obj = concat store_part web_part catalog_part
let result: Anon7 list = [ for g in _group_by [ for r in all_rows do yield r ] (fun r -> { channel = r.channel; col_name = r.col_name; d_year = r.d_year; d_qoy = r.d_qoy; i_category = r.i_category }) |> List.sortBy (fun gTmp -> let g = gTmp in g.key.channel) do
    yield { channel = g.key.channel; col_name = g.key.col_name; d_year = g.key.d_year; d_qoy = g.key.d_qoy; i_category = g.key.i_category; sales_cnt = List.length g.Items; sales_amt = List.sum [ for x in g do yield x.r.ext_sales_price ] } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ channel = "store"; col_name = (); d_year = 1998; d_qoy = 1; i_category = "CatA"; sales_cnt = 1; sales_amt = 10.0 }; { channel = "web"; col_name = (); d_year = 1998; d_qoy = 1; i_category = "CatB"; sales_cnt = 1; sales_amt = 15.0 }; { channel = "catalog"; col_name = (); d_year = 1998; d_qoy = 1; i_category = "CatC"; sales_cnt = 1; sales_amt = 20.0 }])
