open System

let d_date_sk = "d_date_sk"
let d_year = "d_year"
let d_qoy = "d_qoy"
let i_item_sk = "i_item_sk"
let i_category = "i_category"
let ss_customer_sk = "ss_customer_sk"
let ss_item_sk = "ss_item_sk"
let ss_ext_sales_price = "ss_ext_sales_price"
let ss_sold_date_sk = "ss_sold_date_sk"
let ws_bill_customer_sk = "ws_bill_customer_sk"
let ws_item_sk = "ws_item_sk"
let ws_ext_sales_price = "ws_ext_sales_price"
let ws_sold_date_sk = "ws_sold_date_sk"
let cs_bill_customer_sk = "cs_bill_customer_sk"
let cs_item_sk = "cs_item_sk"
let cs_ext_sales_price = "cs_ext_sales_price"
let cs_sold_date_sk = "cs_sold_date_sk"
let channel = "channel"
let col_name = "col_name"
let ext_sales_price = "ext_sales_price"
let sales_cnt = "sales_cnt"
let sales_amt = "sales_amt"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _concat (a: 'T[]) (b: 'T[]) : 'T[] =
  Array.append a b
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let date_dim = [|Map.ofList [(d_date_sk, 1); (d_year, 1998); (d_qoy, 1)]|]
let item = [|Map.ofList [(i_item_sk, 1); (i_category, "CatA")]; Map.ofList [(i_item_sk, 2); (i_category, "CatB")]; Map.ofList [(i_item_sk, 3); (i_category, "CatC")]|]
let store_sales = [|Map.ofList [(ss_customer_sk, null); (ss_item_sk, 1); (ss_ext_sales_price, 10.0); (ss_sold_date_sk, 1)]|]
let web_sales = [|Map.ofList [(ws_bill_customer_sk, null); (ws_item_sk, 2); (ws_ext_sales_price, 15.0); (ws_sold_date_sk, 1)]|]
let catalog_sales = [|Map.ofList [(cs_bill_customer_sk, null); (cs_item_sk, 3); (cs_ext_sales_price, 20.0); (cs_sold_date_sk, 1)]|]
let store_part = 
    [|
    for ss in store_sales do
        for i in item do
            if (i.i_item_sk = ss.ss_item_sk) then
                for d in date_dim do
                    if (d.d_date_sk = ss.ss_sold_date_sk) then
                        if (ss.ss_customer_sk = null) then
                            yield Map.ofList [(channel, "store"); (col_name, ss.ss_customer_sk); (d_year, d.d_year); (d_qoy, d.d_qoy); (i_category, i.i_category); (ext_sales_price, ss.ss_ext_sales_price)]
    |]
let web_part = 
    [|
    for ws in web_sales do
        for i in item do
            if (i.i_item_sk = ws.ws_item_sk) then
                for d in date_dim do
                    if (d.d_date_sk = ws.ws_sold_date_sk) then
                        if (ws.ws_bill_customer_sk = null) then
                            yield Map.ofList [(channel, "web"); (col_name, ws.ws_bill_customer_sk); (d_year, d.d_year); (d_qoy, d.d_qoy); (i_category, i.i_category); (ext_sales_price, ws.ws_ext_sales_price)]
    |]
let catalog_part = 
    [|
    for cs in catalog_sales do
        for i in item do
            if (i.i_item_sk = cs.cs_item_sk) then
                for d in date_dim do
                    if (d.d_date_sk = cs.cs_sold_date_sk) then
                        if (cs.cs_bill_customer_sk = null) then
                            yield Map.ofList [(channel, "catalog"); (col_name, cs.cs_bill_customer_sk); (d_year, d.d_year); (d_qoy, d.d_qoy); (i_category, i.i_category); (ext_sales_price, cs.cs_ext_sales_price)]
    |]
let all_rows = _concat _concat store_part web_part catalog_part
let result = [| for g in _group_by [|
    for r in all_rows do
        yield r
|] (fun r -> Map.ofList [(channel, r.channel); (col_name, r.col_name); (d_year, r.d_year); (d_qoy, r.d_qoy); (i_category, r.i_category)]) do let g = g yield (g.key.channel, Map.ofList [(channel, g.key.channel); (col_name, g.key.col_name); (d_year, g.key.d_year); (d_qoy, g.key.d_qoy); (i_category, g.key.i_category); (sales_cnt, count g); (sales_amt, sum 
    [|
    for x in g do
        yield x.r.ext_sales_price
    |])]) |] |> Array.sortBy fst |> Array.map snd
ignore (_json result)
let test_TPCDS_Q76_simplified() =
    if not ((result = [|Map.ofList [(channel, "store"); (col_name, null); (d_year, 1998); (d_qoy, 1); (i_category, "CatA"); (sales_cnt, 1); (sales_amt, 10.0)]; Map.ofList [(channel, "web"); (col_name, null); (d_year, 1998); (d_qoy, 1); (i_category, "CatB"); (sales_cnt, 1); (sales_amt, 15.0)]; Map.ofList [(channel, "catalog"); (col_name, null); (d_year, 1998); (d_qoy, 1); (i_category, "CatC"); (sales_cnt, 1); (sales_amt, 20.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q76 simplified" test_TPCDS_Q76_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
