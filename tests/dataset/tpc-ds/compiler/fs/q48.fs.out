// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    cdemo_sk: int
    addr_sk: int
    sold_date_sk: int
    sales_price: float
    net_profit: float
    quantity: int
}
type Anon2 = {
    s_store_sk: int
}
type Anon3 = {
    cd_demo_sk: int
    cd_marital_status: string
    cd_education_status: string
}
type Anon4 = {
    ca_address_sk: int
    ca_country: string
    ca_state: string
}
type Anon5 = {
    d_date_sk: int
    d_year: int
}
let store_sales: Anon1 list = [{ cdemo_sk = 1; addr_sk = 1; sold_date_sk = 1; sales_price = 120.0; net_profit = 1000.0; quantity = 5 }; { cdemo_sk = 2; addr_sk = 2; sold_date_sk = 1; sales_price = 60.0; net_profit = 2000.0; quantity = 10 }; { cdemo_sk = 3; addr_sk = 3; sold_date_sk = 1; sales_price = 170.0; net_profit = 10000.0; quantity = 20 }]
let store: Anon2 list = [{ s_store_sk = 1 }]
let customer_demographics: Anon3 list = [{ cd_demo_sk = 1; cd_marital_status = "S"; cd_education_status = "E1" }; { cd_demo_sk = 2; cd_marital_status = "M"; cd_education_status = "E2" }; { cd_demo_sk = 3; cd_marital_status = "W"; cd_education_status = "E3" }]
let customer_address: Anon4 list = [{ ca_address_sk = 1; ca_country = "United States"; ca_state = "TX" }; { ca_address_sk = 2; ca_country = "United States"; ca_state = "CA" }; { ca_address_sk = 3; ca_country = "United States"; ca_state = "NY" }]
let date_dim: Anon5 list = [{ d_date_sk = 1; d_year = 2000 }]
let year: int = 2000
let states1: string list = ["TX"]
let states2: string list = ["CA"]
let states3: string list = ["NY"]
let qty_base: int list = [ for ss in store_sales do 
  for cd in customer_demographics do 
  for ca in customer_address do 
  for d in date_dim do if ss.cdemo_sk = cd.cd_demo_sk && ss.addr_sk = ca.ca_address_sk && ss.sold_date_sk = d.d_date_sk && d.d_year = year && ((cd.cd_marital_status = "S" && cd.cd_education_status = "E1" && ss.sales_price >= 100.0 && ss.sales_price <= 150.0) || (cd.cd_marital_status = "M" && cd.cd_education_status = "E2" && ss.sales_price >= 50.0 && ss.sales_price <= 100.0) || (cd.cd_marital_status = "W" && cd.cd_education_status = "E3" && ss.sales_price >= 150.0 && ss.sales_price <= 200.0)) && ((List.contains ca.ca_state states1 && ss.net_profit >= 0 && ss.net_profit <= 2000) || (List.contains ca.ca_state states2 && ss.net_profit >= 150 && ss.net_profit <= 3000) || (List.contains ca.ca_state states3 && ss.net_profit >= 50 && ss.net_profit <= 25000)) then yield ss.quantity ]
let qty: int list = qty_base
let result: obj = List.sum qty
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = 35)
