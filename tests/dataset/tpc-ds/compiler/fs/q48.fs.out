open System

let cdemo_sk = "cdemo_sk"
let addr_sk = "addr_sk"
let sold_date_sk = "sold_date_sk"
let sales_price = "sales_price"
let net_profit = "net_profit"
let quantity = "quantity"
let s_store_sk = "s_store_sk"
let cd_demo_sk = "cd_demo_sk"
let cd_marital_status = "cd_marital_status"
let cd_education_status = "cd_education_status"
let ca_address_sk = "ca_address_sk"
let ca_country = "ca_country"
let ca_state = "ca_state"
let d_date_sk = "d_date_sk"
let d_year = "d_year"
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let store_sales = [|Map.ofList [(cdemo_sk, 1); (addr_sk, 1); (sold_date_sk, 1); (sales_price, 120.0); (net_profit, 1000.0); (quantity, 5)]; Map.ofList [(cdemo_sk, 2); (addr_sk, 2); (sold_date_sk, 1); (sales_price, 60.0); (net_profit, 2000.0); (quantity, 10)]; Map.ofList [(cdemo_sk, 3); (addr_sk, 3); (sold_date_sk, 1); (sales_price, 170.0); (net_profit, 10000.0); (quantity, 20)]|]
let store = [|Map.ofList [(s_store_sk, 1)]|]
let customer_demographics = [|Map.ofList [(cd_demo_sk, 1); (cd_marital_status, "S"); (cd_education_status, "E1")]; Map.ofList [(cd_demo_sk, 2); (cd_marital_status, "M"); (cd_education_status, "E2")]; Map.ofList [(cd_demo_sk, 3); (cd_marital_status, "W"); (cd_education_status, "E3")]|]
let customer_address = [|Map.ofList [(ca_address_sk, 1); (ca_country, "United States"); (ca_state, "TX")]; Map.ofList [(ca_address_sk, 2); (ca_country, "United States"); (ca_state, "CA")]; Map.ofList [(ca_address_sk, 3); (ca_country, "United States"); (ca_state, "NY")]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_year, 2000)]|]
let year = 2000
let states1 = [|"TX"|]
let states2 = [|"CA"|]
let states3 = [|"NY"|]
let qty_base = 
    [|
    for ss in store_sales do
        for cd in customer_demographics do
            if (ss.cdemo_sk = cd.cd_demo_sk) then
                for ca in customer_address do
                    if (ss.addr_sk = ca.ca_address_sk) then
                        for d in date_dim do
                            if (ss.sold_date_sk = d.d_date_sk) then
                                if (((d.d_year = year) && ((((((((cd.cd_marital_status = "S") && (cd.cd_education_status = "E1")) && (ss.sales_price >= 100.0)) && (ss.sales_price <= 150.0))) || (((((cd.cd_marital_status = "M") && (cd.cd_education_status = "E2")) && (ss.sales_price >= 50.0)) && (ss.sales_price <= 100.0)))) || (((((cd.cd_marital_status = "W") && (cd.cd_education_status = "E3")) && (ss.sales_price >= 150.0)) && (ss.sales_price <= 200.0)))))) && ((((((Array.contains ca.ca_state states1 && (ss.net_profit >= 0)) && (ss.net_profit <= 2000))) || (((Array.contains ca.ca_state states2 && (ss.net_profit >= 150)) && (ss.net_profit <= 3000)))) || (((Array.contains ca.ca_state states3 && (ss.net_profit >= 50)) && (ss.net_profit <= 25000)))))) then
                                    yield ss.quantity
    |]
let qty = qty_base
let result = sum qty
ignore (_json result)
let test_TPCDS_Q48_simplified() =
    if not ((result = 35)) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q48 simplified" test_TPCDS_Q48_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
