open System

let reason = "reason"
let price = "price"
let id = "id"
let name = "name"
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false

let store_sales = [|Map.ofList [(reason, 1); (price, 40)]; Map.ofList [(reason, 2); (price, 27)]|]
let reason = [|Map.ofList [(id, 1); (name, "PROMO")]; Map.ofList [(id, 2); (name, "RETURN")]|]
let result = 67
ignore (_json result)
let test_TPCDS_Q67_simplified() =
    if not ((result = 67)) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q67 simplified" test_TPCDS_Q67_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
