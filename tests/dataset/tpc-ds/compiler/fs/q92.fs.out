open System

let ws_item_sk = "ws_item_sk"
let ws_sold_date_sk = "ws_sold_date_sk"
let ws_ext_discount_amt = "ws_ext_discount_amt"
let i_item_sk = "i_item_sk"
let i_manufact_id = "i_manufact_id"
let d_date_sk = "d_date_sk"
let d_date = "d_date"
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

type WebSale =
    {
        ws_item_sk: int;
        ws_sold_date_sk: int;
        ws_ext_discount_amt: float
    }

type WebSale =
    {
        ws_item_sk: int;
        ws_sold_date_sk: int;
        ws_ext_discount_amt: float
    }
let web_sales = [|Map.ofList [(ws_item_sk, 1); (ws_sold_date_sk, 1); (ws_ext_discount_amt, 1.0)]; Map.ofList [(ws_item_sk, 1); (ws_sold_date_sk, 1); (ws_ext_discount_amt, 1.0)]; Map.ofList [(ws_item_sk, 1); (ws_sold_date_sk, 1); (ws_ext_discount_amt, 2.0)]|]
let item = [|Map.ofList [(i_item_sk, 1); (i_manufact_id, 1)]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_date, "2000-01-02")]|]
let sum_amt = sum 
    [|
    for ws in web_sales do
        yield ws.ws_ext_discount_amt
    |]
let avg_amt = avg 
    [|
    for ws in web_sales do
        yield ws.ws_ext_discount_amt
    |]
let result = (if (sum_amt > (avg_amt * 1.3)) then sum_amt else 0.0)
ignore (_json result)
let test_TPCDS_Q92_threshold() =
    if not ((result = 4.0)) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q92 threshold" test_TPCDS_Q92_threshold) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
