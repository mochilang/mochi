open System

let inv_item_sk = "inv_item_sk"
let inv_date_sk = "inv_date_sk"
let inv_quantity_on_hand = "inv_quantity_on_hand"
let d_date_sk = "d_date_sk"
let d_month_seq = "d_month_seq"
let i_item_sk = "i_item_sk"
let i_product_name = "i_product_name"
let i_brand = "i_brand"
let i_class = "i_class"
let i_category = "i_category"
let qoh = "qoh"
let product_name = "product_name"
let brand = "brand"
let _class = "class"
let category = "category"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

type Inventory =
    {
        inv_item_sk: int;
        inv_date_sk: int;
        inv_quantity_on_hand: int
    }

type DateDim =
    {
        d_date_sk: int;
        d_month_seq: int
    }

type Item =
    {
        i_item_sk: int;
        i_product_name: string;
        i_brand: string;
        i_class: string;
        i_category: string
    }

type Inventory =
    {
        inv_item_sk: int;
        inv_date_sk: int;
        inv_quantity_on_hand: int
    }
type DateDim =
    {
        d_date_sk: int;
        d_month_seq: int
    }
type Item =
    {
        i_item_sk: int;
        i_product_name: string;
        i_brand: string;
        i_class: string;
        i_category: string
    }
let inventory = [|Map.ofList [(inv_item_sk, 1); (inv_date_sk, 1); (inv_quantity_on_hand, 10)]; Map.ofList [(inv_item_sk, 1); (inv_date_sk, 2); (inv_quantity_on_hand, 20)]; Map.ofList [(inv_item_sk, 1); (inv_date_sk, 3); (inv_quantity_on_hand, 10)]; Map.ofList [(inv_item_sk, 1); (inv_date_sk, 4); (inv_quantity_on_hand, 20)]; Map.ofList [(inv_item_sk, 2); (inv_date_sk, 1); (inv_quantity_on_hand, 50)]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_month_seq, 0)]; Map.ofList [(d_date_sk, 2); (d_month_seq, 1)]; Map.ofList [(d_date_sk, 3); (d_month_seq, 2)]; Map.ofList [(d_date_sk, 4); (d_month_seq, 3)]|]
let item = [|Map.ofList [(i_item_sk, 1); (i_product_name, "Prod1"); (i_brand, "Brand1"); (i_class, "Class1"); (i_category, "Cat1")]; Map.ofList [(i_item_sk, 2); (i_product_name, "Prod2"); (i_brand, "Brand2"); (i_class, "Class2"); (i_category, "Cat2")]|]
let qoh = [| for g in _group_by [|
    for inv in inventory do
        for d in date_dim do
            if (inv.inv_date_sk = d.d_date_sk) then
                for i in item do
                    if (inv.inv_item_sk = i.i_item_sk) then
                        if ((d.d_month_seq >= 0) && (d.d_month_seq <= 11)) then
                            yield (inv, d, i)
|] (fun (inv, d, i) -> Map.ofList [(product_name, i.i_product_name); (brand, i.i_brand); (_class, i.i_class); (category, i.i_category)]) do let g = g yield Map.ofList [(i_product_name, g.key.product_name); (i_brand, g.key.brand); (i_class, g.key._class); (i_category, g.key.category); (qoh, avg 
    [|
    for x in g do
        yield x.inv_quantity_on_hand
    |])] |]
ignore (_json qoh)
let test_TPCDS_Q22_average_inventory() =
    if not ((qoh = [|Map.ofList [(i_product_name, "Prod1"); (i_brand, "Brand1"); (i_class, "Class1"); (i_category, "Cat1"); (qoh, 15.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q22 average inventory" test_TPCDS_Q22_average_inventory) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
