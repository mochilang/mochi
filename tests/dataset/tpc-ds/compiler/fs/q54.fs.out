// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    customer: int
    sold_date: int
    price: float
}
type Anon2 = {
    d_date_sk: int
    d_month_seq: int
}
type Anon3 = {
    c_customer_sk: int
    c_current_addr_sk: int
}
type Anon4 = {
    ca_address_sk: int
    ca_county: string
    ca_state: string
}
type Anon5 = {
    s_store_sk: int
    s_county: string
    s_state: string
}
type Anon6 = {
    customer: int
    amt: float
}
type Anon7 = {
    customer: obj
    revenue: obj
}
type Anon8 = {
    segment: obj
    num_customers: obj
    segment_base: obj
}
type Anon9 = {
    seg: obj
}
type Anon10 = {
    segment: int
    num_customers: int
    segment_base: int
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let store_sales: Anon1 list = [{ customer = 1; sold_date = 2; price = 60.0 }; { customer = 2; sold_date = 2; price = 40.0 }]
let date_dim: Anon2 list = [{ d_date_sk = 2; d_month_seq = 5 }]
let customer: Anon3 list = [{ c_customer_sk = 1; c_current_addr_sk = 1 }; { c_customer_sk = 2; c_current_addr_sk = 1 }]
let customer_address: Anon4 list = [{ ca_address_sk = 1; ca_county = "X"; ca_state = "Y" }]
let store: Anon5 list = [{ s_store_sk = 1; s_county = "X"; s_state = "Y" }]
let int (x) =
    x
let revenue: Anon6 list = [ for ss in store_sales do 
  for d in date_dim do 
  for c in customer do 
  for ca in customer_address do 
  for s in store do if ss.sold_date = d.d_date_sk && ss.customer = c.c_customer_sk && c.c_current_addr_sk = ca.ca_address_sk && ca.ca_county = "X" && ca.ca_state = "Y" && 1 = s.s_store_sk && ca.ca_county = s.s_county && ca.ca_state = s.s_state then yield { customer = c.c_customer_sk; amt = ss.price } ]
let by_customer: Anon7 list = [ for g in _group_by [ for r in revenue do yield r ] (fun r -> r.customer) do
    yield { customer = g.key; revenue = List.sum [ for x in g do yield x.amt ] } ]
let segments: Anon8 list = [ for g in _group_by [ for r in by_customer do yield r ] (fun r -> { seg = int r.revenue / 50 }) do
    yield { segment = g.key.seg; num_customers = List.length g.Items; segment_base = g.key.seg * 50 } ]
let result: Anon8 list = segments
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ segment = 1; num_customers = 1; segment_base = 50 }; { segment = 0; num_customers = 1; segment_base = 0 }])
