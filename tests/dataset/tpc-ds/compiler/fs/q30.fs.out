open System

let wr_returning_customer_sk = "wr_returning_customer_sk"
let wr_returned_date_sk = "wr_returned_date_sk"
let wr_return_amt = "wr_return_amt"
let wr_returning_addr_sk = "wr_returning_addr_sk"
let d_date_sk = "d_date_sk"
let d_year = "d_year"
let ca_address_sk = "ca_address_sk"
let ca_state = "ca_state"
let c_customer_sk = "c_customer_sk"
let c_customer_id = "c_customer_id"
let c_first_name = "c_first_name"
let c_last_name = "c_last_name"
let c_current_addr_sk = "c_current_addr_sk"
let ctr_customer_sk = "ctr_customer_sk"
let ctr_state = "ctr_state"
let ctr_total_return = "ctr_total_return"
let cust = "cust"
let state = "state"
let avg_return = "avg_return"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let web_returns = [|Map.ofList [(wr_returning_customer_sk, 1); (wr_returned_date_sk, 1); (wr_return_amt, 100.0); (wr_returning_addr_sk, 1)]; Map.ofList [(wr_returning_customer_sk, 2); (wr_returned_date_sk, 1); (wr_return_amt, 30.0); (wr_returning_addr_sk, 2)]; Map.ofList [(wr_returning_customer_sk, 1); (wr_returned_date_sk, 1); (wr_return_amt, 50.0); (wr_returning_addr_sk, 1)]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_year, 2000)]|]
let customer_address = [|Map.ofList [(ca_address_sk, 1); (ca_state, "CA")]; Map.ofList [(ca_address_sk, 2); (ca_state, "CA")]|]
let customer = [|Map.ofList [(c_customer_sk, 1); (c_customer_id, "C1"); (c_first_name, "John"); (c_last_name, "Doe"); (c_current_addr_sk, 1)]; Map.ofList [(c_customer_sk, 2); (c_customer_id, "C2"); (c_first_name, "Jane"); (c_last_name, "Smith"); (c_current_addr_sk, 2)]|]
let customer_total_return = [| for g in _group_by [|
    for wr in web_returns do
        for d in date_dim do
            if (wr.wr_returned_date_sk = d.d_date_sk) then
                for ca in customer_address do
                    if (wr.wr_returning_addr_sk = ca.ca_address_sk) then
                        if ((d.d_year = 2000) && (ca.ca_state = "CA")) then
                            yield (wr, d, ca)
|] (fun (wr, d, ca) -> Map.ofList [(cust, wr.wr_returning_customer_sk); (state, ca.ca_state)]) do let g = g yield Map.ofList [(ctr_customer_sk, g.key.cust); (ctr_state, g.key.state); (ctr_total_return, sum 
    [|
    for x in g do
        yield x.wr_return_amt
    |])] |]
let avg_by_state = _group_by customer_total_return (fun ctr -> ctr.ctr_state) |> List.map (fun g -> Map.ofList [(state, g.key); (avg_return, avg 
    [|
    for x in g do
        yield x.ctr_total_return
    |])])
let result = 
    [|
    for ctr in customer_total_return do
        for avg in avg_by_state do
            if (ctr.ctr_state = avg.state) then
                for c in customer do
                    if (ctr.ctr_customer_sk = c.c_customer_sk) then
                        if (ctr.ctr_total_return > (avg.avg_return * 1.2)) then
                            yield Map.ofList [(c_customer_id, c.c_customer_id); (c_first_name, c.c_first_name); (c_last_name, c.c_last_name); (ctr_total_return, ctr.ctr_total_return)]
    |]
ignore (_json result)
let test_TPCDS_Q30_simplified() =
    if not ((result = [|Map.ofList [(c_customer_id, "C1"); (c_first_name, "John"); (c_last_name, "Doe"); (ctr_total_return, 150.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q30 simplified" test_TPCDS_Q30_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
