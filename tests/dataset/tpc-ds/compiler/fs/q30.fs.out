// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    wr_returning_customer_sk: int
    wr_returned_date_sk: int
    wr_return_amt: float
    wr_returning_addr_sk: int
}
type Anon2 = {
    d_date_sk: int
    d_year: int
}
type Anon3 = {
    ca_address_sk: int
    ca_state: string
}
type Anon4 = {
    c_customer_sk: int
    c_customer_id: string
    c_first_name: string
    c_last_name: string
    c_current_addr_sk: int
}
type Anon5 = {
    ctr_customer_sk: obj
    ctr_state: obj
    ctr_total_return: obj
}
type Anon6 = {
    cust: int
    state: string
}
type Anon7 = {
    state: obj
    avg_return: obj
}
type Anon8 = {
    c_customer_id: string
    c_first_name: string
    c_last_name: string
    ctr_total_return: obj
}
type Anon9 = {
    c_customer_id: string
    c_first_name: string
    c_last_name: string
    ctr_total_return: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let web_returns: Anon1 list = [{ wr_returning_customer_sk = 1; wr_returned_date_sk = 1; wr_return_amt = 100.0; wr_returning_addr_sk = 1 }; { wr_returning_customer_sk = 2; wr_returned_date_sk = 1; wr_return_amt = 30.0; wr_returning_addr_sk = 2 }; { wr_returning_customer_sk = 1; wr_returned_date_sk = 1; wr_return_amt = 50.0; wr_returning_addr_sk = 1 }]
let date_dim: Anon2 list = [{ d_date_sk = 1; d_year = 2000 }]
let customer_address: Anon3 list = [{ ca_address_sk = 1; ca_state = "CA" }; { ca_address_sk = 2; ca_state = "CA" }]
let customer: Anon4 list = [{ c_customer_sk = 1; c_customer_id = "C1"; c_first_name = "John"; c_last_name = "Doe"; c_current_addr_sk = 1 }; { c_customer_sk = 2; c_customer_id = "C2"; c_first_name = "Jane"; c_last_name = "Smith"; c_current_addr_sk = 2 }]
let customer_total_return: Anon5 list = [ for g in _group_by [ for wr in web_returns do 
  for d in date_dim do 
  for ca in customer_address do if wr.wr_returned_date_sk = d.d_date_sk && wr.wr_returning_addr_sk = ca.ca_address_sk && d.d_year = 2000 && ca.ca_state = "CA" then yield (wr, d, ca) ] (fun (wr, d, ca) -> { cust = wr.wr_returning_customer_sk; state = ca.ca_state }) do
    yield { ctr_customer_sk = g.key.cust; ctr_state = g.key.state; ctr_total_return = List.sum [ for x in g do yield x.wr_return_amt ] } ]
let avg_by_state: Anon7 list = [ for g in _group_by [ for ctr in customer_total_return do yield ctr ] (fun ctr -> ctr.ctr_state) do
    yield { state = g.key; avg_return = (float (List.sum [ for x in g do yield x.ctr_total_return ]) / float (List.length [ for x in g do yield x.ctr_total_return ])) } ]
let result: Anon8 list = [ for ctr in customer_total_return do 
  for avg in avg_by_state do 
  for c in customer do if ctr.ctr_state = avg.state && ctr.ctr_customer_sk = c.c_customer_sk && ctr.ctr_total_return > avg.avg_return * 1.2 then yield { c_customer_id = c.c_customer_id; c_first_name = c.c_first_name; c_last_name = c.c_last_name; ctr_total_return = ctr.ctr_total_return } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ c_customer_id = "C1"; c_first_name = "John"; c_last_name = "Doe"; ctr_total_return = 150.0 }])
