// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    c_customer_sk: int
    c_customer_id: string
    c_first_name: string
    c_last_name: string
    c_login: string
}
type Anon2 = {
    ss_customer_sk: int
    ss_sold_date_sk: int
    ss_ext_list_price: float
    ss_ext_wholesale_cost: float
    ss_ext_discount_amt: float
    ss_ext_sales_price: float
}
type Anon3 = {
    cs_bill_customer_sk: int
    cs_sold_date_sk: int
    cs_ext_list_price: float
    cs_ext_wholesale_cost: float
    cs_ext_discount_amt: float
    cs_ext_sales_price: float
}
type Anon4 = {
    ws_bill_customer_sk: int
    ws_sold_date_sk: int
    ws_ext_list_price: float
    ws_ext_wholesale_cost: float
    ws_ext_discount_amt: float
    ws_ext_sales_price: float
}
type Anon5 = {
    d_date_sk: int
    d_year: int
}
type Anon6 = {
    customer_id: obj
    customer_first_name: obj
    customer_last_name: obj
    customer_login: obj
    dyear: obj
    year_total: obj
    sale_type: string
}
type Anon7 = {
    id: string
    first: string
    last: string
    login: string
    year: int
}
type Anon8 = {
    customer_id: obj
    customer_first_name: obj
    customer_last_name: obj
    customer_login: obj
}
type Anon9 = {
    customer_id: string
    customer_first_name: string
    customer_last_name: string
    customer_login: string
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let customer: Anon1 list = [{ c_customer_sk = 1; c_customer_id = "C1"; c_first_name = "Alice"; c_last_name = "A"; c_login = "alice" }]
let store_sales: Anon2 list = [{ ss_customer_sk = 1; ss_sold_date_sk = 1; ss_ext_list_price = 10.0; ss_ext_wholesale_cost = 5.0; ss_ext_discount_amt = 0.0; ss_ext_sales_price = 10.0 }; { ss_customer_sk = 1; ss_sold_date_sk = 2; ss_ext_list_price = 20.0; ss_ext_wholesale_cost = 5.0; ss_ext_discount_amt = 0.0; ss_ext_sales_price = 20.0 }]
let catalog_sales: Anon3 list = [{ cs_bill_customer_sk = 1; cs_sold_date_sk = 1; cs_ext_list_price = 10.0; cs_ext_wholesale_cost = 2.0; cs_ext_discount_amt = 0.0; cs_ext_sales_price = 10.0 }; { cs_bill_customer_sk = 1; cs_sold_date_sk = 2; cs_ext_list_price = 30.0; cs_ext_wholesale_cost = 2.0; cs_ext_discount_amt = 0.0; cs_ext_sales_price = 30.0 }]
let web_sales: Anon4 list = [{ ws_bill_customer_sk = 1; ws_sold_date_sk = 1; ws_ext_list_price = 10.0; ws_ext_wholesale_cost = 5.0; ws_ext_discount_amt = 0.0; ws_ext_sales_price = 10.0 }; { ws_bill_customer_sk = 1; ws_sold_date_sk = 2; ws_ext_list_price = 12.0; ws_ext_wholesale_cost = 5.0; ws_ext_discount_amt = 0.0; ws_ext_sales_price = 12.0 }]
let date_dim: Anon5 list = [{ d_date_sk = 1; d_year = 2001 }; { d_date_sk = 2; d_year = 2002 }]
let year_total: obj = ((([ for g in _group_by [ for c in customer do 
  for s in store_sales do 
  for d in date_dim do if c.c_customer_sk = s.ss_customer_sk && s.ss_sold_date_sk = d.d_date_sk then yield (c, s, d) ] (fun (c, s, d) -> { id = c.c_customer_id; first = c.c_first_name; last = c.c_last_name; login = c.c_login; year = d.d_year }) do
    yield { customer_id = g.key.id; customer_first_name = g.key.first; customer_last_name = g.key.last; customer_login = g.key.login; dyear = g.key.year; year_total = List.sum [ for x in g do yield ((x.ss_ext_list_price - x.ss_ext_wholesale_cost - x.ss_ext_discount_amt) + x.ss_ext_sales_price) / 2 ]; sale_type = "s" } ]) @ ([ for g in _group_by [ for c in customer do 
  for cs in catalog_sales do 
  for d in date_dim do if c.c_customer_sk = cs.cs_bill_customer_sk && cs.cs_sold_date_sk = d.d_date_sk then yield (c, cs, d) ] (fun (c, cs, d) -> { id = c.c_customer_id; first = c.c_first_name; last = c.c_last_name; login = c.c_login; year = d.d_year }) do
    yield { customer_id = g.key.id; customer_first_name = g.key.first; customer_last_name = g.key.last; customer_login = g.key.login; dyear = g.key.year; year_total = List.sum [ for x in g do yield ((x.cs_ext_list_price - x.cs_ext_wholesale_cost - x.cs_ext_discount_amt) + x.cs_ext_sales_price) / 2 ]; sale_type = "c" } ])) @ ([ for g in _group_by [ for c in customer do 
  for ws in web_sales do 
  for d in date_dim do if c.c_customer_sk = ws.ws_bill_customer_sk && ws.ws_sold_date_sk = d.d_date_sk then yield (c, ws, d) ] (fun (c, ws, d) -> { id = c.c_customer_id; first = c.c_first_name; last = c.c_last_name; login = c.c_login; year = d.d_year }) do
    yield { customer_id = g.key.id; customer_first_name = g.key.first; customer_last_name = g.key.last; customer_login = g.key.login; dyear = g.key.year; year_total = List.sum [ for x in g do yield ((x.ws_ext_list_price - x.ws_ext_wholesale_cost - x.ws_ext_discount_amt) + x.ws_ext_sales_price) / 2 ]; sale_type = "w" } ]))
let result: Anon8 list = [ for s1 in year_total do 
  for s2 in year_total do 
  for c1 in year_total do 
  for c2 in year_total do 
  for w1 in year_total do 
  for w2 in year_total do if s2.customer_id = s1.customer_id && c1.customer_id = s1.customer_id && c2.customer_id = s1.customer_id && w1.customer_id = s1.customer_id && w2.customer_id = s1.customer_id && s1.sale_type = "s" && c1.sale_type = "c" && w1.sale_type = "w" && s2.sale_type = "s" && c2.sale_type = "c" && w2.sale_type = "w" && s1.dyear = 2001 && s2.dyear = 2002 && c1.dyear = 2001 && c2.dyear = 2002 && w1.dyear = 2001 && w2.dyear = 2002 && s1.year_total > 0 && c1.year_total > 0 && w1.year_total > 0 && ((if c1.year_total > 0 then c2.year_total / c1.year_total else ())) > ((if s1.year_total > 0 then s2.year_total / s1.year_total else ())) && ((if c1.year_total > 0 then c2.year_total / c1.year_total else ())) > ((if w1.year_total > 0 then w2.year_total / w1.year_total else ())) then yield { customer_id = s2.customer_id; customer_first_name = s2.customer_first_name; customer_last_name = s2.customer_last_name; customer_login = s2.customer_login } ] |> List.sortBy (fun s1 -> [s2.customer_id; s2.customer_first_name; s2.customer_last_name; s2.customer_login])
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ customer_id = "C1"; customer_first_name = "Alice"; customer_last_name = "A"; customer_login = "alice" }])
