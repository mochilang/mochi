// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    i_item_sk: int
    i_manufact_id: int
}
type Anon2 = {
    item: int
    date: int
    price: float
}
type Anon3 = {
    d_date_sk: int
    d_month_seq: int
}
type Anon4 = {
    manu: obj
    sum_sales: obj
    avg_sales: obj
}
type Anon5 = {
    i_manufact_id: obj
    sum_sales: obj
}
type Anon6 = {
    i_manufact_id: int
    sum_sales: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let item: Anon1 list = [{ i_item_sk = 1; i_manufact_id = 1 }; { i_item_sk = 2; i_manufact_id = 2 }]
let store_sales: Anon2 list = [{ item = 1; date = 1; price = 10.0 }; { item = 1; date = 2; price = 10.0 }; { item = 2; date = 1; price = 30.0 }; { item = 2; date = 2; price = 23.0 }]
let date_dim: Anon3 list = [{ d_date_sk = 1; d_month_seq = 1 }; { d_date_sk = 2; d_month_seq = 2 }]
let abs (x) =
    if x >= 0.0 then
        x
    -x
let grouped: Anon4 list = [ for g in _group_by [ for ss in store_sales do 
  for i in item do 
  for d in date_dim do if ss.item = i.i_item_sk && ss.date = d.d_date_sk then yield (ss, i, d) ] (fun (ss, i, d) -> i.i_manufact_id) do
    yield { manu = g.key; sum_sales = List.sum [ for x in g do yield x.price ]; avg_sales = (float (List.sum [ for x in g do yield x.price ]) / float (List.length [ for x in g do yield x.price ])) } ]
let result: Anon5 list = [ for g in grouped do if g.avg_sales > 0.0 && abs g.sum_sales - g.avg_sales / g.avg_sales > 0.1 then yield { i_manufact_id = g.manu; sum_sales = g.sum_sales } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ i_manufact_id = 1; sum_sales = 20.0 }; { i_manufact_id = 2; sum_sales = 53.0 }])
