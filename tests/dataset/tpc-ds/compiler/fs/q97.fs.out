open System

let ss_customer_sk = "ss_customer_sk"
let ss_item_sk = "ss_item_sk"
let cs_bill_customer_sk = "cs_bill_customer_sk"
let cs_item_sk = "cs_item_sk"
let customer_sk = "customer_sk"
let item_sk = "item_sk"
let store_only = "store_only"
let catalog_only = "catalog_only"
let both = "both"
let store_and_catalog = "store_and_catalog"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

type StoreSale =
    {
        ss_customer_sk: int;
        ss_item_sk: int
    }

type CatalogSale =
    {
        cs_bill_customer_sk: int;
        cs_item_sk: int
    }

type StoreSale =
    {
        ss_customer_sk: int;
        ss_item_sk: int
    }
type CatalogSale =
    {
        cs_bill_customer_sk: int;
        cs_item_sk: int
    }
let store_sales = [|Map.ofList [(ss_customer_sk, 1); (ss_item_sk, 1)]; Map.ofList [(ss_customer_sk, 2); (ss_item_sk, 1)]|]
let catalog_sales = [|Map.ofList [(cs_bill_customer_sk, 1); (cs_item_sk, 1)]; Map.ofList [(cs_bill_customer_sk, 3); (cs_item_sk, 2)]|]
let ssci = _group_by store_sales (fun ss -> Map.ofList [(customer_sk, ss.ss_customer_sk); (item_sk, ss.ss_item_sk)]) |> List.map (fun g -> Map.ofList [(customer_sk, g.key.customer_sk); (item_sk, g.key.item_sk)])
let csci = _group_by catalog_sales (fun cs -> Map.ofList [(customer_sk, cs.cs_bill_customer_sk); (item_sk, cs.cs_item_sk)]) |> List.map (fun g -> Map.ofList [(customer_sk, g.key.customer_sk); (item_sk, g.key.item_sk)])
let joined = 
    [|
    for s in ssci do
        for c in csci do
            if ((s.customer_sk = c.customer_sk) && (s.item_sk = c.item_sk)) then
                yield Map.ofList [(store_only, (if ((s.customer_sk <> null) && (c.customer_sk = null)) then 1 else 0)); (catalog_only, (if ((s.customer_sk = null) && (c.customer_sk <> null)) then 1 else 0)); (both, (if ((s.customer_sk <> null) && (c.customer_sk <> null)) then 1 else 0))]
    |]
let result = Map.ofList [(store_only, sum 
    [|
    for x in joined do
        yield x.store_only
    |]); (catalog_only, sum 
    [|
    for x in joined do
        yield x.catalog_only
    |]); (store_and_catalog, sum 
    [|
    for x in joined do
        yield x.both
    |])]
ignore (_json result)
let test_TPCDS_Q97_overlap() =
    if not ((((result.store_only = 1) && (result.catalog_only = 1)) && (result.store_and_catalog = 1))) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q97 overlap" test_TPCDS_Q97_overlap) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
