// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    ss_ticket_number: int
    ss_customer_sk: int
    ss_sold_date_sk: int
    ss_store_sk: int
    ss_hdemo_sk: int
}
type Anon2 = {
    d_date_sk: int
    d_dom: int
    d_year: int
}
type Anon3 = {
    s_store_sk: int
    s_county: string
}
type Anon4 = {
    hd_demo_sk: int
    hd_buy_potential: string
    hd_vehicle_count: int
    hd_dep_count: int
}
type Anon5 = {
    c_customer_sk: int
    c_last_name: string
    c_first_name: string
    c_salutation: string
    c_preferred_cust_flag: string
}
type Anon6 = {
    key: obj
    cnt: obj
}
type Anon7 = {
    ticket: int
    cust: int
}
type Anon8 = {
    c_last_name: string
    c_first_name: string
    c_salutation: string
    c_preferred_cust_flag: string
    ss_ticket_number: Anon6
    cnt: obj
}
type Anon9 = {
    c_last_name: string
    c_first_name: string
    c_salutation: string
    c_preferred_cust_flag: string
    ss_ticket_number: int
    cnt: int
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let store_sales: Anon1 list = [{ ss_ticket_number = 1; ss_customer_sk = 1; ss_sold_date_sk = 1; ss_store_sk = 1; ss_hdemo_sk = 1 }]
let date_dim: Anon2 list = [{ d_date_sk = 1; d_dom = 1; d_year = 1998 }]
let store: Anon3 list = [{ s_store_sk = 1; s_county = "A" }]
let household_demographics: Anon4 list = [{ hd_demo_sk = 1; hd_buy_potential = "1001-5000"; hd_vehicle_count = 2; hd_dep_count = 3 }]
let customer: Anon5 list = [{ c_customer_sk = 1; c_last_name = "Smith"; c_first_name = "Alice"; c_salutation = "Ms."; c_preferred_cust_flag = "Y" }]
let groups: Anon6 list = [ for g in _group_by [ for ss in store_sales do 
  for d in date_dim do 
  for s in store do 
  for hd in household_demographics do if d.d_date_sk = ss.ss_sold_date_sk && s.s_store_sk = ss.ss_store_sk && hd.hd_demo_sk = ss.ss_hdemo_sk && d.d_dom >= 1 && d.d_dom <= 2 && (hd.hd_buy_potential = "1001-5000" || hd.hd_buy_potential = "0-500") && hd.hd_vehicle_count > 0 && hd.hd_dep_count / hd.hd_vehicle_count > 1 && (d.d_year = 1998 || d.d_year = 1999 || d.d_year = 2000) && s.s_county = "A" then yield (ss, d, s, hd) ] (fun (ss, d, s, hd) -> { ticket = ss.ss_ticket_number; cust = ss.ss_customer_sk }) do
    yield { key = g.key; cnt = List.length g.Items } ]
let result: Anon8 list = [ for g in groups do 
  for c in customer do if c.c_customer_sk = g.key.cust && g.cnt >= 1 && g.cnt <= 5 then yield { c_last_name = c.c_last_name; c_first_name = c.c_first_name; c_salutation = c.c_salutation; c_preferred_cust_flag = c.c_preferred_cust_flag; ss_ticket_number = g.key.ticket; cnt = g.cnt } ] |> List.sortBy (fun g -> [-g.cnt; c.c_last_name])
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ c_last_name = "Smith"; c_first_name = "Alice"; c_salutation = "Ms."; c_preferred_cust_flag = "Y"; ss_ticket_number = 1; cnt = 1 }])
