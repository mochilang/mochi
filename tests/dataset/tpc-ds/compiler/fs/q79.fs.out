// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    d_date_sk: int
    d_dow: int
    d_year: int
}
type Anon2 = {
    s_store_sk: int
    s_city: string
    s_number_employees: int
}
type Anon3 = {
    hd_demo_sk: int
    hd_dep_count: int
    hd_vehicle_count: int
}
type Anon4 = {
    ss_sold_date_sk: int
    ss_store_sk: int
    ss_ticket_number: int
    ss_customer_sk: int
    ss_hdemo_sk: int
    ss_coupon_amt: float
    ss_net_profit: float
}
type Anon5 = {
    c_customer_sk: int
    c_last_name: string
    c_first_name: string
}
type Anon6 = {
    key: obj
    amt: obj
    profit: obj
}
type Anon7 = {
    ticket: int
    customer_sk: int
    city: string
}
type Anon8 = {
    c_last_name: string
    c_first_name: string
    s_city: Anon6
    ss_ticket_number: Anon6
    amt: obj
    profit: obj
}
type Anon9 = {
    c_last_name: string
    c_first_name: string
    s_city: string
    ss_ticket_number: int
    amt: float
    profit: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let date_dim: Anon1 list = [{ d_date_sk = 1; d_dow = 1; d_year = 1999 }]
let store: Anon2 list = [{ s_store_sk = 1; s_city = "CityA"; s_number_employees = 250 }]
let household_demographics: Anon3 list = [{ hd_demo_sk = 1; hd_dep_count = 2; hd_vehicle_count = 1 }]
let store_sales: Anon4 list = [{ ss_sold_date_sk = 1; ss_store_sk = 1; ss_ticket_number = 1; ss_customer_sk = 1; ss_hdemo_sk = 1; ss_coupon_amt = 5.0; ss_net_profit = 10.0 }]
let customer: Anon5 list = [{ c_customer_sk = 1; c_last_name = "Smith"; c_first_name = "Alice" }]
let agg: Anon6 list = [ for g in _group_by [ for ss in store_sales do 
  for d in date_dim do 
  for s in store do 
  for hd in household_demographics do if d.d_date_sk = ss.ss_sold_date_sk && s.s_store_sk = ss.ss_store_sk && hd.hd_demo_sk = ss.ss_hdemo_sk && (hd.hd_dep_count = 2 || hd.hd_vehicle_count > 1) && d.d_dow = 1 && (d.d_year = 1998 || d.d_year = 1999 || d.d_year = 2000) && s.s_number_employees >= 200 && s.s_number_employees <= 295 then yield (ss, d, s, hd) ] (fun (ss, d, s, hd) -> { ticket = ss.ss_ticket_number; customer_sk = ss.ss_customer_sk; city = s.s_city }) do
    yield { key = g.key; amt = List.sum [ for x in g do yield x.ss.ss_coupon_amt ]; profit = List.sum [ for x in g do yield x.ss.ss_net_profit ] } ]
let result: Anon8 list = [ for a in agg do 
  for c in customer do if c.c_customer_sk = a.key.customer_sk then yield { c_last_name = c.c_last_name; c_first_name = c.c_first_name; s_city = a.key.city; ss_ticket_number = a.key.ticket; amt = a.amt; profit = a.profit } ] |> List.sortBy (fun a -> [c.c_last_name; c.c_first_name; a.key.city; a.profit])
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ c_last_name = "Smith"; c_first_name = "Alice"; s_city = "CityA"; ss_ticket_number = 1; amt = 5.0; profit = 10.0 }])
