open System

let product_name = "product_name"
let manufact_id = "manufact_id"
let manufact = "manufact"
let category = "category"
let color = "color"
let units = "units"
let size = "size"
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let item = [|Map.ofList [(product_name, "Blue Shirt"); (manufact_id, 100); (manufact, 1); (category, "Women"); (color, "blue"); (units, "pack"); (size, "M")]; Map.ofList [(product_name, "Red Dress"); (manufact_id, 120); (manufact, 1); (category, "Women"); (color, "red"); (units, "pack"); (size, "M")]; Map.ofList [(product_name, "Pants"); (manufact_id, 200); (manufact, 2); (category, "Men"); (color, "black"); (units, "pair"); (size, "L")]|]
let lower = 100
let result = 
    [|
    for i1 in item do
        if (((i1.manufact_id >= lower) && (i1.manufact_id <= (lower + 40))) && (count 
    [|
    for i2 in item do
        if ((i2.manufact = i1.manufact) && (i2.category = i1.category)) then
            yield i2
    |] > 1)) then
            yield (i1.product_name, i1.product_name)
    |]
    |> Array.sortBy fst
    |> Array.map snd
ignore (_json result)
let test_TPCDS_Q41_simplified() =
    if not ((result = [|"Blue Shirt"; "Red Dress"|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q41 simplified" test_TPCDS_Q41_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
