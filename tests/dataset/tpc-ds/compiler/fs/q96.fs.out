open System

let ss_sold_time_sk = "ss_sold_time_sk"
let ss_hdemo_sk = "ss_hdemo_sk"
let ss_store_sk = "ss_store_sk"
let hd_demo_sk = "hd_demo_sk"
let hd_dep_count = "hd_dep_count"
let t_time_sk = "t_time_sk"
let t_hour = "t_hour"
let t_minute = "t_minute"
let s_store_sk = "s_store_sk"
let s_store_name = "s_store_name"
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

type StoreSale =
    {
        ss_sold_time_sk: int;
        ss_hdemo_sk: int;
        ss_store_sk: int
    }

type HouseholdDemographics =
    {
        hd_demo_sk: int;
        hd_dep_count: int
    }

type TimeDim =
    {
        t_time_sk: int;
        t_hour: int;
        t_minute: int
    }

type Store =
    {
        s_store_sk: int;
        s_store_name: string
    }

type StoreSale =
    {
        ss_sold_time_sk: int;
        ss_hdemo_sk: int;
        ss_store_sk: int
    }
type HouseholdDemographics =
    {
        hd_demo_sk: int;
        hd_dep_count: int
    }
type TimeDim =
    {
        t_time_sk: int;
        t_hour: int;
        t_minute: int
    }
type Store =
    {
        s_store_sk: int;
        s_store_name: string
    }
let store_sales = [|Map.ofList [(ss_sold_time_sk, 1); (ss_hdemo_sk, 1); (ss_store_sk, 1)]; Map.ofList [(ss_sold_time_sk, 1); (ss_hdemo_sk, 1); (ss_store_sk, 1)]; Map.ofList [(ss_sold_time_sk, 2); (ss_hdemo_sk, 1); (ss_store_sk, 1)]|]
let household_demographics = [|Map.ofList [(hd_demo_sk, 1); (hd_dep_count, 3)]|]
let time_dim = [|Map.ofList [(t_time_sk, 1); (t_hour, 20); (t_minute, 35)]; Map.ofList [(t_time_sk, 2); (t_hour, 20); (t_minute, 45)]|]
let store = [|Map.ofList [(s_store_sk, 1); (s_store_name, "ese")]|]
let result = count 
    [|
    for ss in store_sales do
        for hd in household_demographics do
            if (ss.ss_hdemo_sk = hd.hd_demo_sk) then
                for t in time_dim do
                    if (ss.ss_sold_time_sk = t.t_time_sk) then
                        for s in store do
                            if (ss.ss_store_sk = s.s_store_sk) then
                                if ((((t.t_hour = 20) && (t.t_minute >= 30)) && (hd.hd_dep_count = 3)) && (s.s_store_name = "ese")) then
                                    yield ss
    |]
ignore (_json result)
let test_TPCDS_Q96_count() =
    if not ((result = 3)) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q96 count" test_TPCDS_Q96_count) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
