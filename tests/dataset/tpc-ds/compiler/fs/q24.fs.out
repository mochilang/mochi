open System

let ss_ticket_number = "ss_ticket_number"
let ss_item_sk = "ss_item_sk"
let ss_customer_sk = "ss_customer_sk"
let ss_store_sk = "ss_store_sk"
let ss_net_paid = "ss_net_paid"
let sr_ticket_number = "sr_ticket_number"
let sr_item_sk = "sr_item_sk"
let s_store_sk = "s_store_sk"
let s_store_name = "s_store_name"
let s_market_id = "s_market_id"
let s_state = "s_state"
let s_zip = "s_zip"
let i_item_sk = "i_item_sk"
let i_color = "i_color"
let i_current_price = "i_current_price"
let i_manager_id = "i_manager_id"
let i_units = "i_units"
let i_size = "i_size"
let c_customer_sk = "c_customer_sk"
let c_first_name = "c_first_name"
let c_last_name = "c_last_name"
let c_current_addr_sk = "c_current_addr_sk"
let c_birth_country = "c_birth_country"
let ca_address_sk = "ca_address_sk"
let ca_state = "ca_state"
let ca_country = "ca_country"
let ca_zip = "ca_zip"
let color = "color"
let netpaid = "netpaid"
let last = "last"
let first = "first"
let store_name = "store_name"
let paid = "paid"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

type StoreSale =
    {
        ss_ticket_number: int;
        ss_item_sk: int;
        ss_customer_sk: int;
        ss_store_sk: int;
        ss_net_paid: float
    }

type StoreReturn =
    {
        sr_ticket_number: int;
        sr_item_sk: int
    }

type Store =
    {
        s_store_sk: int;
        s_store_name: string;
        s_market_id: int;
        s_state: string;
        s_zip: string
    }

type Item =
    {
        i_item_sk: int;
        i_color: string;
        i_current_price: float;
        i_manager_id: int;
        i_units: string;
        i_size: string
    }

type Customer =
    {
        c_customer_sk: int;
        c_first_name: string;
        c_last_name: string;
        c_current_addr_sk: int;
        c_birth_country: string
    }

type CustomerAddress =
    {
        ca_address_sk: int;
        ca_state: string;
        ca_country: string;
        ca_zip: string
    }

type StoreSale =
    {
        ss_ticket_number: int;
        ss_item_sk: int;
        ss_customer_sk: int;
        ss_store_sk: int;
        ss_net_paid: float
    }
type StoreReturn =
    {
        sr_ticket_number: int;
        sr_item_sk: int
    }
type Store =
    {
        s_store_sk: int;
        s_store_name: string;
        s_market_id: int;
        s_state: string;
        s_zip: string
    }
type Item =
    {
        i_item_sk: int;
        i_color: string;
        i_current_price: float;
        i_manager_id: int;
        i_units: string;
        i_size: string
    }
type Customer =
    {
        c_customer_sk: int;
        c_first_name: string;
        c_last_name: string;
        c_current_addr_sk: int;
        c_birth_country: string
    }
type CustomerAddress =
    {
        ca_address_sk: int;
        ca_state: string;
        ca_country: string;
        ca_zip: string
    }
let store_sales = [|Map.ofList [(ss_ticket_number, 1); (ss_item_sk, 1); (ss_customer_sk, 1); (ss_store_sk, 1); (ss_net_paid, 100.0)]; Map.ofList [(ss_ticket_number, 2); (ss_item_sk, 2); (ss_customer_sk, 2); (ss_store_sk, 1); (ss_net_paid, 50.0)]|]
let store_returns = [|Map.ofList [(sr_ticket_number, 1); (sr_item_sk, 1)]; Map.ofList [(sr_ticket_number, 2); (sr_item_sk, 2)]|]
let store = [|Map.ofList [(s_store_sk, 1); (s_store_name, "Store1"); (s_market_id, 5); (s_state, "CA"); (s_zip, "12345")]|]
let item = [|Map.ofList [(i_item_sk, 1); (i_color, "RED"); (i_current_price, 10.0); (i_manager_id, 1); (i_units, "EA"); (i_size, "M")]; Map.ofList [(i_item_sk, 2); (i_color, "BLUE"); (i_current_price, 20.0); (i_manager_id, 2); (i_units, "EA"); (i_size, "L")]|]
let customer = [|Map.ofList [(c_customer_sk, 1); (c_first_name, "Ann"); (c_last_name, "Smith"); (c_current_addr_sk, 1); (c_birth_country, "Canada")]; Map.ofList [(c_customer_sk, 2); (c_first_name, "Bob"); (c_last_name, "Jones"); (c_current_addr_sk, 2); (c_birth_country, "USA")]|]
let customer_address = [|Map.ofList [(ca_address_sk, 1); (ca_state, "CA"); (ca_country, "USA"); (ca_zip, "12345")]; Map.ofList [(ca_address_sk, 2); (ca_state, "CA"); (ca_country, "USA"); (ca_zip, "54321")]|]
let ssales = [| for g in _group_by [|
    for ss in store_sales do
        for sr in store_returns do
            if ((ss.ss_ticket_number = sr.sr_ticket_number) && (ss.ss_item_sk = sr.sr_item_sk)) then
                for s in store do
                    if (ss.ss_store_sk = s.s_store_sk) then
                        for i in item do
                            if (ss.ss_item_sk = i.i_item_sk) then
                                for c in customer do
                                    if (ss.ss_customer_sk = c.c_customer_sk) then
                                        for ca in customer_address do
                                            if (c.c_current_addr_sk = ca.ca_address_sk) then
                                                if (((c.c_birth_country <> strings.ToUpper ca.ca_country) && (s.s_zip = ca.ca_zip)) && (s.s_market_id = 5)) then
                                                    yield (ss, sr, s, i, c, ca)
|] (fun (ss, sr, s, i, c, ca) -> Map.ofList [(last, c.c_last_name); (first, c.c_first_name); (store_name, s.s_store_name); (color, i.i_color)]) do let g = g yield Map.ofList [(c_last_name, g.key.last); (c_first_name, g.key.first); (s_store_name, g.key.store_name); (color, g.key.color); (netpaid, sum 
    [|
    for x in g do
        yield x.ss_net_paid
    |])] |]
let avg_paid = avg 
    [|
    for x in ssales do
        yield x.netpaid
    |]
let result = 
    [|
    for x in ssales do
        if ((x.color = "RED") && (x.netpaid > (0.05 * avg_paid))) then
            yield ([|x.c_last_name; x.c_first_name; x.s_store_name|], Map.ofList [(c_last_name, x.c_last_name); (c_first_name, x.c_first_name); (s_store_name, x.s_store_name); (paid, x.netpaid)])
    |]
    |> Array.sortBy fst
    |> Array.map snd
ignore (_json result)
let test_TPCDS_Q24_customer_net_paid() =
    if not ((result = [|Map.ofList [(c_last_name, "Smith"); (c_first_name, "Ann"); (s_store_name, "Store1"); (paid, 100.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q24 customer net paid" test_TPCDS_Q24_customer_net_paid) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
