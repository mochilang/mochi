open System

let id = "id"
let item = "item"
let qty = "qty"
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false

let item = [|Map.ofList [(id, 1)]; Map.ofList [(id, 2)]; Map.ofList [(id, 3)]|]
let inventory = [|Map.ofList [(item, 1); (qty, 20)]; Map.ofList [(item, 1); (qty, 22)]; Map.ofList [(item, 1); (qty, 5)]; Map.ofList [(item, 2); (qty, 30)]; Map.ofList [(item, 2); (qty, 5)]; Map.ofList [(item, 3); (qty, 10)]|]
let store_sales = [|Map.ofList [(item, 1)]; Map.ofList [(item, 2)]|]
let result = 0
for inv in inventory do
    for s in store_sales do
        if (inv.item = s.item) then
            result <- (result + inv.qty)
ignore (_json result)
let test_TPCDS_Q82_sample() =
    if not ((result = 82)) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q82 sample" test_TPCDS_Q82_sample) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
