// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    item: int
    price: float
}
type Anon2 = {
    item: obj
    total: obj
}
type Anon3 = {
    i_item_id: obj
    total_sales: obj
}
type Anon4 = {
    i_item_id: int
    total_sales: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let store_sales: Anon1 list = [{ item = 1; price = 10.0 }]
let catalog_sales: Anon1 list = [{ item = 1; price = 20.0 }]
let web_sales: Anon1 list = [{ item = 1; price = 30.0 }]
let ss: Anon2 list = [ for g in _group_by [ for s in store_sales do yield s ] (fun s -> s.item) do
    yield { item = g.key; total = List.sum [ for x in g do yield x.price ] } ]
let cs: Anon2 list = [ for g in _group_by [ for s in catalog_sales do yield s ] (fun s -> s.item) do
    yield { item = g.key; total = List.sum [ for x in g do yield x.price ] } ]
let ws: Anon2 list = [ for g in _group_by [ for s in web_sales do yield s ] (fun s -> s.item) do
    yield { item = g.key; total = List.sum [ for x in g do yield x.price ] } ]
let union: obj = concat ss cs ws
let result: Anon3 list = [ for g in _group_by [ for u in union do yield u ] (fun u -> u.item) do
    yield { i_item_id = g.key; total_sales = List.sum [ for x in g do yield x.total ] } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ i_item_id = 1; total_sales = 60.0 }])
