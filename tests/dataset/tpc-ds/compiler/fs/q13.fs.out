open System

let ss_store_sk = "ss_store_sk"
let ss_sold_date_sk = "ss_sold_date_sk"
let ss_hdemo_sk = "ss_hdemo_sk"
let ss_cdemo_sk = "ss_cdemo_sk"
let ss_addr_sk = "ss_addr_sk"
let ss_sales_price = "ss_sales_price"
let ss_net_profit = "ss_net_profit"
let ss_quantity = "ss_quantity"
let ss_ext_sales_price = "ss_ext_sales_price"
let ss_ext_wholesale_cost = "ss_ext_wholesale_cost"
let s_store_sk = "s_store_sk"
let s_state = "s_state"
let cd_demo_sk = "cd_demo_sk"
let cd_marital_status = "cd_marital_status"
let cd_education_status = "cd_education_status"
let hd_demo_sk = "hd_demo_sk"
let hd_dep_count = "hd_dep_count"
let ca_address_sk = "ca_address_sk"
let ca_country = "ca_country"
let ca_state = "ca_state"
let d_date_sk = "d_date_sk"
let d_year = "d_year"
let avg_ss_quantity = "avg_ss_quantity"
let avg_ss_ext_sales_price = "avg_ss_ext_sales_price"
let avg_ss_ext_wholesale_cost = "avg_ss_ext_wholesale_cost"
let sum_ss_ext_wholesale_cost = "sum_ss_ext_wholesale_cost"

type _Group<'T>(key: obj) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count

let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
    let groups = System.Collections.Generic.Dictionary<string, _Group<'T>>()
    let order = System.Collections.Generic.List<string>()

    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'T>>

        if groups.TryGetValue(ks, &g) then
            ()
        else
            g <- _Group<'T> (key)
            groups[ks] <- g
            order.Add(ks)

        g.Items.Add(it)

    [ for ks in order -> groups[ks] ]

let rec _to_json (v: obj) : string =
    match v with
    | null -> "null"
    | :? string as s -> "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
    | :? bool
    | :? int
    | :? int64
    | :? double -> string v
    | :? System.Collections.Generic.IDictionary<string, obj> as m ->
        m
        |> Seq.map (fun (KeyValue(k, v)) -> "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
        |> String.concat ","
        |> fun s -> "{" + s + "}"
    | :? System.Collections.IEnumerable as e ->
        e
        |> Seq.cast<obj>
        |> Seq.map _to_json
        |> String.concat ","
        |> fun s -> "[" + s + "]"
    | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""

let _json (v: obj) : unit = printfn "%s" (_to_json v)

let _run_test (name: string) (f: unit -> unit) : bool =
    printf "%s ... " name

    try
        f ()
        printfn "PASS"
        true
    with e ->
        printfn "FAIL (%s)" e.Message
        false

let inline sum (xs: seq< ^T >) : ^T = Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T = Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T: comparison = Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T: comparison = Seq.max xs
let count (xs: seq<'T>) : int = Seq.length xs

type StoreSale =
    { ss_store_sk: int
      ss_sold_date_sk: int
      ss_hdemo_sk: int
      ss_cdemo_sk: int
      ss_addr_sk: int
      ss_sales_price: float
      ss_net_profit: float
      ss_quantity: int
      ss_ext_sales_price: float
      ss_ext_wholesale_cost: float }

type Store = { s_store_sk: int; s_state: string }

type CustomerDemographics =
    { cd_demo_sk: int
      cd_marital_status: string
      cd_education_status: string }

type HouseholdDemographics = { hd_demo_sk: int; hd_dep_count: int }

type CustomerAddress =
    { ca_address_sk: int
      ca_country: string
      ca_state: string }

type DateDim = { d_date_sk: int; d_year: int }

type StoreSale =
    { ss_store_sk: int
      ss_sold_date_sk: int
      ss_hdemo_sk: int
      ss_cdemo_sk: int
      ss_addr_sk: int
      ss_sales_price: float
      ss_net_profit: float
      ss_quantity: int
      ss_ext_sales_price: float
      ss_ext_wholesale_cost: float }

type Store = { s_store_sk: int; s_state: string }

type CustomerDemographics =
    { cd_demo_sk: int
      cd_marital_status: string
      cd_education_status: string }

type HouseholdDemographics = { hd_demo_sk: int; hd_dep_count: int }

type CustomerAddress =
    { ca_address_sk: int
      ca_country: string
      ca_state: string }

type DateDim = { d_date_sk: int; d_year: int }

let store_sales =
    [| Map.ofList
           [ (ss_store_sk, 1)
             (ss_sold_date_sk, 1)
             (ss_hdemo_sk, 1)
             (ss_cdemo_sk, 1)
             (ss_addr_sk, 1)
             (ss_sales_price, 120.0)
             (ss_net_profit, 150.0)
             (ss_quantity, 10)
             (ss_ext_sales_price, 100.0)
             (ss_ext_wholesale_cost, 50.0) ] |]

let store = [| Map.ofList [ (s_store_sk, 1); (s_state, "CA") ] |]

let customer_demographics =
    [| Map.ofList [ (cd_demo_sk, 1); (cd_marital_status, "M1"); (cd_education_status, "ES1") ] |]

let household_demographics = [| Map.ofList [ (hd_demo_sk, 1); (hd_dep_count, 3) ] |]

let customer_address =
    [| Map.ofList [ (ca_address_sk, 1); (ca_country, "United States"); (ca_state, "CA") ] |]

let date_dim = [| Map.ofList [ (d_date_sk, 1); (d_year, 2001) ] |]

let filtered =
    [| for ss in store_sales do
           for s in store do
               if (ss.ss_store_sk = s.s_store_sk) then
                   for cd in customer_demographics do
                       if
                           (((ss.ss_cdemo_sk = cd.cd_demo_sk) && (cd.cd_marital_status = "M1"))
                            && (cd.cd_education_status = "ES1"))
                       then
                           for hd in household_demographics do
                               if ((ss.ss_hdemo_sk = hd.hd_demo_sk) && (hd.hd_dep_count = 3)) then
                                   for ca in customer_address do
                                       if
                                           (((ss.ss_addr_sk = ca.ca_address_sk) && (ca.ca_country = "United States"))
                                            && (ca.ca_state = "CA"))
                                       then
                                           for d in date_dim do
                                               if ((ss.ss_sold_date_sk = d.d_date_sk) && (d.d_year = 2001)) then
                                                   yield ss |]

let result =
    _group_by filtered (fun r -> Map.empty)
    |> List.map (fun g ->
        Map.ofList
            [ (avg_ss_quantity,
               avg
                   [| for x in g do
                          yield x.ss_quantity |])
              (avg_ss_ext_sales_price,
               avg
                   [| for x in g do
                          yield x.ss_ext_sales_price |])
              (avg_ss_ext_wholesale_cost,
               avg
                   [| for x in g do
                          yield x.ss_ext_wholesale_cost |])
              (sum_ss_ext_wholesale_cost,
               sum
                   [| for x in g do
                          yield x.ss_ext_wholesale_cost |]) ])

ignore (_json result)

let test_TPCDS_Q13_averages () =
    if
        not (
            (result = [| Map.ofList
                             [ (avg_ss_quantity, 10.0)
                               (avg_ss_ext_sales_price, 100.0)
                               (avg_ss_ext_wholesale_cost, 50.0)
                               (sum_ss_ext_wholesale_cost, 50.0) ] |])
        )
    then
        failwith "expect failed"

let mutable failures = 0

if not (_run_test "TPCDS Q13 averages" test_TPCDS_Q13_averages) then
    failures <- failures + 1

if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
