// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    ss_store_sk: int
    ss_sold_date_sk: int
    ss_hdemo_sk: int
    ss_cdemo_sk: int
    ss_addr_sk: int
    ss_sales_price: float
    ss_net_profit: float
    ss_quantity: int
    ss_ext_sales_price: float
    ss_ext_wholesale_cost: float
}
type Anon2 = {
    s_store_sk: int
    s_state: string
}
type Anon3 = {
    cd_demo_sk: int
    cd_marital_status: string
    cd_education_status: string
}
type Anon4 = {
    hd_demo_sk: int
    hd_dep_count: int
}
type Anon5 = {
    ca_address_sk: int
    ca_country: string
    ca_state: string
}
type Anon6 = {
    d_date_sk: int
    d_year: int
}
type Anon7 = {
    avg_ss_quantity: obj
    avg_ss_ext_sales_price: obj
    avg_ss_ext_wholesale_cost: obj
    sum_ss_ext_wholesale_cost: obj
}
type Anon8 = {
}
type Anon9 = {
    avg_ss_quantity: float
    avg_ss_ext_sales_price: float
    avg_ss_ext_wholesale_cost: float
    sum_ss_ext_wholesale_cost: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

type StoreSale = {
    mutable ss_store_sk: int
    mutable ss_sold_date_sk: int
    mutable ss_hdemo_sk: int
    mutable ss_cdemo_sk: int
    mutable ss_addr_sk: int
    mutable ss_sales_price: float
    mutable ss_net_profit: float
    mutable ss_quantity: int
    mutable ss_ext_sales_price: float
    mutable ss_ext_wholesale_cost: float
}
type Store = {
    mutable s_store_sk: int
    mutable s_state: string
}
type CustomerDemographics = {
    mutable cd_demo_sk: int
    mutable cd_marital_status: string
    mutable cd_education_status: string
}
type HouseholdDemographics = {
    mutable hd_demo_sk: int
    mutable hd_dep_count: int
}
type CustomerAddress = {
    mutable ca_address_sk: int
    mutable ca_country: string
    mutable ca_state: string
}
type DateDim = {
    mutable d_date_sk: int
    mutable d_year: int
}
let store_sales: Anon1 list = [{ ss_store_sk = 1; ss_sold_date_sk = 1; ss_hdemo_sk = 1; ss_cdemo_sk = 1; ss_addr_sk = 1; ss_sales_price = 120.0; ss_net_profit = 150.0; ss_quantity = 10; ss_ext_sales_price = 100.0; ss_ext_wholesale_cost = 50.0 }]
let store: Anon2 list = [{ s_store_sk = 1; s_state = "CA" }]
let customer_demographics: Anon3 list = [{ cd_demo_sk = 1; cd_marital_status = "M1"; cd_education_status = "ES1" }]
let household_demographics: Anon4 list = [{ hd_demo_sk = 1; hd_dep_count = 3 }]
let customer_address: Anon5 list = [{ ca_address_sk = 1; ca_country = "United States"; ca_state = "CA" }]
let date_dim: Anon6 list = [{ d_date_sk = 1; d_year = 2001 }]
let filtered: Anon1 list = [ for ss in store_sales do 
  for s in store do 
  for cd in customer_demographics do 
  for hd in household_demographics do 
  for ca in customer_address do 
  for d in date_dim do if ss.ss_store_sk = s.s_store_sk && ss.ss_cdemo_sk = cd.cd_demo_sk && cd.cd_marital_status = "M1" && cd.cd_education_status = "ES1" && ss.ss_hdemo_sk = hd.hd_demo_sk && hd.hd_dep_count = 3 && ss.ss_addr_sk = ca.ca_address_sk && ca.ca_country = "United States" && ca.ca_state = "CA" && ss.ss_sold_date_sk = d.d_date_sk && d.d_year = 2001 then yield ss ]
let result: Anon7 list = [ for g in _group_by [ for r in filtered do yield r ] (fun r -> {  }) do
    yield { avg_ss_quantity = (float (List.sum [ for x in g do yield x.ss_quantity ]) / float (List.length [ for x in g do yield x.ss_quantity ])); avg_ss_ext_sales_price = (float (List.sum [ for x in g do yield x.ss_ext_sales_price ]) / float (List.length [ for x in g do yield x.ss_ext_sales_price ])); avg_ss_ext_wholesale_cost = (float (List.sum [ for x in g do yield x.ss_ext_wholesale_cost ]) / float (List.length [ for x in g do yield x.ss_ext_wholesale_cost ])); sum_ss_ext_wholesale_cost = List.sum [ for x in g do yield x.ss_ext_wholesale_cost ] } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ avg_ss_quantity = 10.0; avg_ss_ext_sales_price = 100.0; avg_ss_ext_wholesale_cost = 50.0; sum_ss_ext_wholesale_cost = 50.0 }])
