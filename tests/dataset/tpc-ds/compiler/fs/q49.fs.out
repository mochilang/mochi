// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    item: string
    return_ratio: float
    currency_ratio: float
    return_rank: int
    currency_rank: int
}
type Anon2 = {
    channel: string
    item: string
    return_ratio: float
    return_rank: int
    currency_rank: int
}
let web: Anon1 list = [{ item = "A"; return_ratio = 0.2; currency_ratio = 0.3; return_rank = 1; currency_rank = 1 }; { item = "B"; return_ratio = 0.5; currency_ratio = 0.6; return_rank = 2; currency_rank = 2 }]
let catalog: Anon1 list = [{ item = "A"; return_ratio = 0.3; currency_ratio = 0.4; return_rank = 1; currency_rank = 1 }]
let store: Anon1 list = [{ item = "A"; return_ratio = 0.25; currency_ratio = 0.35; return_rank = 1; currency_rank = 1 }]
let tmp: obj = (concat [ for w in web do if w.return_rank <= 10 || w.currency_rank <= 10 then yield { channel = "web"; item = w.item; return_ratio = w.return_ratio; return_rank = w.return_rank; currency_rank = w.currency_rank } ] [ for c in catalog do if c.return_rank <= 10 || c.currency_rank <= 10 then yield { channel = "catalog"; item = c.item; return_ratio = c.return_ratio; return_rank = c.return_rank; currency_rank = c.currency_rank } ] [ for s in store do if s.return_rank <= 10 || s.currency_rank <= 10 then yield { channel = "store"; item = s.item; return_ratio = s.return_ratio; return_rank = s.return_rank; currency_rank = s.currency_rank } ])
let result: obj list = [ for r in tmp do yield r ] |> List.sortBy (fun r -> [r.channel; r.return_rank; r.currency_rank; r.item])
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ channel = "catalog"; item = "A"; return_ratio = 0.3; return_rank = 1; currency_rank = 1 }; { channel = "store"; item = "A"; return_ratio = 0.25; return_rank = 1; currency_rank = 1 }; { channel = "web"; item = "A"; return_ratio = 0.2; return_rank = 1; currency_rank = 1 }; { channel = "web"; item = "B"; return_ratio = 0.5; return_rank = 2; currency_rank = 2 }])
