open System

let item = "item"
let return_ratio = "return_ratio"
let currency_ratio = "currency_ratio"
let return_rank = "return_rank"
let currency_rank = "currency_rank"
let channel = "channel"
let _concat (a: 'T[]) (b: 'T[]) : 'T[] =
  Array.append a b
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false

let web = [|Map.ofList [(item, "A"); (return_ratio, 0.2); (currency_ratio, 0.3); (return_rank, 1); (currency_rank, 1)]; Map.ofList [(item, "B"); (return_ratio, 0.5); (currency_ratio, 0.6); (return_rank, 2); (currency_rank, 2)]|]
let catalog = [|Map.ofList [(item, "A"); (return_ratio, 0.3); (currency_ratio, 0.4); (return_rank, 1); (currency_rank, 1)]|]
let store = [|Map.ofList [(item, "A"); (return_ratio, 0.25); (currency_ratio, 0.35); (return_rank, 1); (currency_rank, 1)]|]
let tmp = (_concat _concat 
    [|
    for w in web do
        if ((w.return_rank <= 10) || (w.currency_rank <= 10)) then
            yield Map.ofList [(channel, "web"); (item, w.item); (return_ratio, w.return_ratio); (return_rank, w.return_rank); (currency_rank, w.currency_rank)]
    |] 
    [|
    for c in catalog do
        if ((c.return_rank <= 10) || (c.currency_rank <= 10)) then
            yield Map.ofList [(channel, "catalog"); (item, c.item); (return_ratio, c.return_ratio); (return_rank, c.return_rank); (currency_rank, c.currency_rank)]
    |] 
    [|
    for s in store do
        if ((s.return_rank <= 10) || (s.currency_rank <= 10)) then
            yield Map.ofList [(channel, "store"); (item, s.item); (return_ratio, s.return_ratio); (return_rank, s.return_rank); (currency_rank, s.currency_rank)]
    |])
let result = 
    [|
    for r in tmp do
        yield ([|r.channel; r.return_rank; r.currency_rank; r.item|], r)
    |]
    |> Array.sortBy fst
    |> Array.map snd
ignore (_json result)
let test_TPCDS_Q49_simplified() =
    if not ((result = [|Map.ofList [(channel, "catalog"); (item, "A"); (return_ratio, 0.3); (return_rank, 1); (currency_rank, 1)]; Map.ofList [(channel, "store"); (item, "A"); (return_ratio, 0.25); (return_rank, 1); (currency_rank, 1)]; Map.ofList [(channel, "web"); (item, "A"); (return_ratio, 0.2); (return_rank, 1); (currency_rank, 1)]; Map.ofList [(channel, "web"); (item, "B"); (return_ratio, 0.5); (return_rank, 2); (currency_rank, 2)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q49 simplified" test_TPCDS_Q49_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
