open System

let ws_item_sk = "ws_item_sk"
let ws_sold_date_sk = "ws_sold_date_sk"
let ws_ext_sales_price = "ws_ext_sales_price"
let i_item_sk = "i_item_sk"
let i_item_id = "i_item_id"
let i_item_desc = "i_item_desc"
let i_category = "i_category"
let i_class = "i_class"
let i_current_price = "i_current_price"
let d_date_sk = "d_date_sk"
let d_date = "d_date"
let itemrevenue = "itemrevenue"
let id = "id"
let desc = "desc"
let cat = "cat"
let _class = "class"
let price = "price"
let total = "total"
let revenueratio = "revenueratio"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

type WebSale =
    {
        ws_item_sk: int;
        ws_sold_date_sk: int;
        ws_ext_sales_price: float
    }

type Item =
    {
        i_item_sk: int;
        i_item_id: string;
        i_item_desc: string;
        i_category: string;
        i_class: string;
        i_current_price: float
    }

type DateDim =
    {
        d_date_sk: int;
        d_date: string
    }

type WebSale =
    {
        ws_item_sk: int;
        ws_sold_date_sk: int;
        ws_ext_sales_price: float
    }
type Item =
    {
        i_item_sk: int;
        i_item_id: string;
        i_item_desc: string;
        i_category: string;
        i_class: string;
        i_current_price: float
    }
type DateDim =
    {
        d_date_sk: int;
        d_date: string
    }
let web_sales = [|Map.ofList [(ws_item_sk, 1); (ws_sold_date_sk, 1); (ws_ext_sales_price, 100.0)]; Map.ofList [(ws_item_sk, 1); (ws_sold_date_sk, 2); (ws_ext_sales_price, 100.0)]; Map.ofList [(ws_item_sk, 2); (ws_sold_date_sk, 2); (ws_ext_sales_price, 200.0)]; Map.ofList [(ws_item_sk, 3); (ws_sold_date_sk, 3); (ws_ext_sales_price, 50.0)]|]
let item = [|Map.ofList [(i_item_sk, 1); (i_item_id, "ITEM1"); (i_item_desc, "Item One"); (i_category, "A"); (i_class, "C1"); (i_current_price, 10.0)]; Map.ofList [(i_item_sk, 2); (i_item_id, "ITEM2"); (i_item_desc, "Item Two"); (i_category, "A"); (i_class, "C1"); (i_current_price, 20.0)]; Map.ofList [(i_item_sk, 3); (i_item_id, "ITEM3"); (i_item_desc, "Item Three"); (i_category, "B"); (i_class, "C2"); (i_current_price, 30.0)]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_date, "2001-01-20")]; Map.ofList [(d_date_sk, 2); (d_date, "2001-02-05")]; Map.ofList [(d_date_sk, 3); (d_date, "2001-03-05")]|]
let filtered = [| for g in _group_by [|
    for ws in web_sales do
        for i in item do
            if (ws.ws_item_sk = i.i_item_sk) then
                for d in date_dim do
                    if (ws.ws_sold_date_sk = d.d_date_sk) then
                        if ((Array.contains i.i_category [|"A"; "B"; "C"|] && (d.d_date >= "2001-01-15")) && (d.d_date <= "2001-02-14")) then
                            yield (ws, i, d)
|] (fun (ws, i, d) -> Map.ofList [(id, i.i_item_id); (desc, i.i_item_desc); (cat, i.i_category); (_class, i.i_class); (price, i.i_current_price)]) do let g = g yield Map.ofList [(i_item_id, g.key.id); (i_item_desc, g.key.desc); (i_category, g.key.cat); (i_class, g.key._class); (i_current_price, g.key.price); (itemrevenue, sum 
    [|
    for x in g do
        yield x.ws_ext_sales_price
    |])] |]
let class_totals = _group_by filtered (fun f -> f.i_class) |> List.map (fun g -> Map.ofList [(_class, g.key); (total, sum 
    [|
    for x in g do
        yield x.itemrevenue
    |])])
let result = 
    [|
    for f in filtered do
        for t in class_totals do
            if (f.i_class = t._class) then
                yield ([|f.i_category; f.i_class; f.i_item_id; f.i_item_desc|], Map.ofList [(i_item_id, f.i_item_id); (i_item_desc, f.i_item_desc); (i_category, f.i_category); (i_class, f.i_class); (i_current_price, f.i_current_price); (itemrevenue, f.itemrevenue); (revenueratio, (((f.itemrevenue * 100.0)) / t.total))])
    |]
    |> Array.sortBy fst
    |> Array.map snd
ignore (_json result)
let test_TPCDS_Q12_revenue_ratio() =
    if not ((result = [|Map.ofList [(i_item_id, "ITEM1"); (i_item_desc, "Item One"); (i_category, "A"); (i_class, "C1"); (i_current_price, 10.0); (itemrevenue, 200.0); (revenueratio, 50.0)]; Map.ofList [(i_item_id, "ITEM2"); (i_item_desc, "Item Two"); (i_category, "A"); (i_class, "C1"); (i_current_price, 20.0); (itemrevenue, 200.0); (revenueratio, 50.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q12 revenue ratio" test_TPCDS_Q12_revenue_ratio) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
