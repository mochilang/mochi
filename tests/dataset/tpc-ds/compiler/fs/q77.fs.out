open System

let d_date_sk = "d_date_sk"
let d_date = "d_date"
let ss_sold_date_sk = "ss_sold_date_sk"
let s_store_sk = "s_store_sk"
let ss_ext_sales_price = "ss_ext_sales_price"
let ss_net_profit = "ss_net_profit"
let sr_returned_date_sk = "sr_returned_date_sk"
let sr_return_amt = "sr_return_amt"
let sr_net_loss = "sr_net_loss"
let cs_sold_date_sk = "cs_sold_date_sk"
let cs_call_center_sk = "cs_call_center_sk"
let cs_ext_sales_price = "cs_ext_sales_price"
let cs_net_profit = "cs_net_profit"
let cr_returned_date_sk = "cr_returned_date_sk"
let cr_call_center_sk = "cr_call_center_sk"
let cr_return_amount = "cr_return_amount"
let cr_net_loss = "cr_net_loss"
let ws_sold_date_sk = "ws_sold_date_sk"
let ws_web_page_sk = "ws_web_page_sk"
let ws_ext_sales_price = "ws_ext_sales_price"
let ws_net_profit = "ws_net_profit"
let wr_returned_date_sk = "wr_returned_date_sk"
let wr_web_page_sk = "wr_web_page_sk"
let wr_return_amt = "wr_return_amt"
let wr_net_loss = "wr_net_loss"
let sales = "sales"
let profit = "profit"
let returns = "returns"
let profit_loss = "profit_loss"
let wp_web_page_sk = "wp_web_page_sk"
let channel = "channel"
let id = "id"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _concat (a: 'T[]) (b: 'T[]) : 'T[] =
  Array.append a b
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let date_dim = [|Map.ofList [(d_date_sk, 1); (d_date, 1)]|]
let store_sales = [|Map.ofList [(ss_sold_date_sk, 1); (s_store_sk, 1); (ss_ext_sales_price, 100.0); (ss_net_profit, 10.0)]|]
let store_returns = [|Map.ofList [(sr_returned_date_sk, 1); (s_store_sk, 1); (sr_return_amt, 5.0); (sr_net_loss, 1.0)]|]
let catalog_sales = [|Map.ofList [(cs_sold_date_sk, 1); (cs_call_center_sk, 1); (cs_ext_sales_price, 150.0); (cs_net_profit, 15.0)]|]
let catalog_returns = [|Map.ofList [(cr_returned_date_sk, 1); (cr_call_center_sk, 1); (cr_return_amount, 7.0); (cr_net_loss, 3.0)]|]
let web_sales = [|Map.ofList [(ws_sold_date_sk, 1); (ws_web_page_sk, 1); (ws_ext_sales_price, 200.0); (ws_net_profit, 20.0)]|]
let web_returns = [|Map.ofList [(wr_returned_date_sk, 1); (wr_web_page_sk, 1); (wr_return_amt, 10.0); (wr_net_loss, 2.0)]|]
let ss = [| for g in _group_by [|
    for ss in store_sales do
        for d in date_dim do
            if (d.d_date_sk = ss.ss_sold_date_sk) then
                yield (ss, d)
|] (fun (ss, d) -> ss.s_store_sk) do let g = g yield Map.ofList [(s_store_sk, g.key); (sales, sum 
    [|
    for x in g do
        yield x.ss.ss_ext_sales_price
    |]); (profit, sum 
    [|
    for x in g do
        yield x.ss.ss_net_profit
    |])] |]
let sr = [| for g in _group_by [|
    for sr in store_returns do
        for d in date_dim do
            if (d.d_date_sk = sr.sr_returned_date_sk) then
                yield (sr, d)
|] (fun (sr, d) -> sr.s_store_sk) do let g = g yield Map.ofList [(s_store_sk, g.key); (returns, sum 
    [|
    for x in g do
        yield x.sr.sr_return_amt
    |]); (profit_loss, sum 
    [|
    for x in g do
        yield x.sr.sr_net_loss
    |])] |]
let cs = [| for g in _group_by [|
    for cs in catalog_sales do
        for d in date_dim do
            if (d.d_date_sk = cs.cs_sold_date_sk) then
                yield (cs, d)
|] (fun (cs, d) -> cs.cs_call_center_sk) do let g = g yield Map.ofList [(cs_call_center_sk, g.key); (sales, sum 
    [|
    for x in g do
        yield x.cs.cs_ext_sales_price
    |]); (profit, sum 
    [|
    for x in g do
        yield x.cs.cs_net_profit
    |])] |]
let cr = [| for g in _group_by [|
    for cr in catalog_returns do
        for d in date_dim do
            if (d.d_date_sk = cr.cr_returned_date_sk) then
                yield (cr, d)
|] (fun (cr, d) -> cr.cr_call_center_sk) do let g = g yield Map.ofList [(cr_call_center_sk, g.key); (returns, sum 
    [|
    for x in g do
        yield x.cr.cr_return_amount
    |]); (profit_loss, sum 
    [|
    for x in g do
        yield x.cr.cr_net_loss
    |])] |]
let ws = [| for g in _group_by [|
    for ws in web_sales do
        for d in date_dim do
            if (d.d_date_sk = ws.ws_sold_date_sk) then
                yield (ws, d)
|] (fun (ws, d) -> ws.ws_web_page_sk) do let g = g yield Map.ofList [(wp_web_page_sk, g.key); (sales, sum 
    [|
    for x in g do
        yield x.ws.ws_ext_sales_price
    |]); (profit, sum 
    [|
    for x in g do
        yield x.ws.ws_net_profit
    |])] |]
let wr = [| for g in _group_by [|
    for wr in web_returns do
        for d in date_dim do
            if (d.d_date_sk = wr.wr_returned_date_sk) then
                yield (wr, d)
|] (fun (wr, d) -> wr.wr_web_page_sk) do let g = g yield Map.ofList [(wp_web_page_sk, g.key); (returns, sum 
    [|
    for x in g do
        yield x.wr.wr_return_amt
    |]); (profit_loss, sum 
    [|
    for x in g do
        yield x.wr.wr_net_loss
    |])] |]
let per_channel = _concat _concat 
    [|
    for s in ss do
        for r in sr do
            if (s.s_store_sk = r.s_store_sk) then
                yield Map.ofList [(channel, "store channel"); (id, s.s_store_sk); (sales, s.sales); (returns, (if (r = null) then 0.0 else r.returns)); (profit, (s.profit - ((if (r = null) then 0.0 else r.profit_loss))))]
    |] 
    [|
    for c in cs do
        for r in cr do
            if (c.cs_call_center_sk = r.cr_call_center_sk) then
                yield Map.ofList [(channel, "catalog channel"); (id, c.cs_call_center_sk); (sales, c.sales); (returns, r.returns); (profit, (c.profit - r.profit_loss))]
    |] 
    [|
    for w in ws do
        for r in wr do
            if (w.wp_web_page_sk = r.wp_web_page_sk) then
                yield Map.ofList [(channel, "web channel"); (id, w.wp_web_page_sk); (sales, w.sales); (returns, (if (r = null) then 0.0 else r.returns)); (profit, (w.profit - ((if (r = null) then 0.0 else r.profit_loss))))]
    |]
let result = [| for g in _group_by [|
    for p in per_channel do
        yield p
|] (fun p -> Map.ofList [(channel, p.channel); (id, p.id)]) do let g = g yield (g.key.channel, Map.ofList [(channel, g.key.channel); (id, g.key.id); (sales, sum 
    [|
    for x in g do
        yield x.p.sales
    |]); (returns, sum 
    [|
    for x in g do
        yield x.p.returns
    |]); (profit, sum 
    [|
    for x in g do
        yield x.p.profit
    |])]) |] |> Array.sortBy fst |> Array.map snd
ignore (_json result)
let test_TPCDS_Q77_simplified() =
    if not ((result = [|Map.ofList [(channel, "catalog channel"); (id, 1); (sales, 150.0); (returns, 7.0); (profit, 12.0)]; Map.ofList [(channel, "store channel"); (id, 1); (sales, 100.0); (returns, 5.0); (profit, 9.0)]; Map.ofList [(channel, "web channel"); (id, 1); (sales, 200.0); (returns, 10.0); (profit, 18.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q77 simplified" test_TPCDS_Q77_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
