// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    cs_bill_customer_sk: int
    cs_sales_price: float
    cs_sold_date_sk: int
}
type Anon2 = {
    c_customer_sk: int
    c_current_addr_sk: int
}
type Anon3 = {
    ca_address_sk: int
    ca_zip: string
    ca_state: string
}
type Anon4 = {
    d_date_sk: int
    d_qoy: int
    d_year: int
}
type Anon5 = {
    ca_zip: obj
    sum_sales: obj
}
type Anon6 = {
    zip: string
}
type Anon7 = {
    ca_zip: string
    sum_sales: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

type CatalogSale = {
    mutable cs_bill_customer_sk: int
    mutable cs_sales_price: float
    mutable cs_sold_date_sk: int
}
type Customer = {
    mutable c_customer_sk: int
    mutable c_current_addr_sk: int
}
type CustomerAddress = {
    mutable ca_address_sk: int
    mutable ca_zip: string
    mutable ca_state: string
}
type DateDim = {
    mutable d_date_sk: int
    mutable d_qoy: int
    mutable d_year: int
}
let catalog_sales: Anon1 list = [{ cs_bill_customer_sk = 1; cs_sales_price = 600.0; cs_sold_date_sk = 1 }]
let customer: Anon2 list = [{ c_customer_sk = 1; c_current_addr_sk = 1 }]
let customer_address: Anon3 list = [{ ca_address_sk = 1; ca_zip = "85669"; ca_state = "CA" }]
let date_dim: Anon4 list = [{ d_date_sk = 1; d_qoy = 1; d_year = 2000 }]
let filtered: Anon5 list = [ for g in _group_by [ for cs in catalog_sales do 
  for c in customer do 
  for ca in customer_address do 
  for d in date_dim do if cs.cs_bill_customer_sk = c.c_customer_sk && c.c_current_addr_sk = ca.ca_address_sk && cs.cs_sold_date_sk = d.d_date_sk && (List.contains List.contains substr ca.ca_zip 0 5 ["85669"; "86197"; "88274"; "83405"; "86475"; "85392"; "85460"; "80348"; "81792"] || ca.ca_state ["CA"; "WA"; "GA"] || cs.cs_sales_price > 500) && d.d_qoy = 1 && d.d_year = 2000 then yield (cs, c, ca, d) ] (fun (cs, c, ca, d) -> { zip = ca.ca_zip }) |> List.sortBy (fun gTmp -> let g = gTmp in g.key.zip) do
    yield { ca_zip = g.key.zip; sum_sales = List.sum [ for x in g do yield x.cs_sales_price ] } ]
printfn "%A" (JsonSerializer.Serialize(filtered))
assert (filtered = [{ ca_zip = "85669"; sum_sales = 600.0 }])
