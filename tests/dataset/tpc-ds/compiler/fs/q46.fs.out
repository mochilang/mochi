// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    ss_ticket_number: int
    ss_customer_sk: int
    ss_addr_sk: int
    ss_hdemo_sk: int
    ss_store_sk: int
    ss_sold_date_sk: int
    ss_coupon_amt: float
    ss_net_profit: float
}
type Anon2 = {
    d_date_sk: int
    d_dow: int
    d_year: int
}
type Anon3 = {
    s_store_sk: int
    s_city: string
}
type Anon4 = {
    hd_demo_sk: int
    hd_dep_count: int
    hd_vehicle_count: int
}
type Anon5 = {
    ca_address_sk: int
    ca_city: string
}
type Anon6 = {
    c_customer_sk: int
    c_last_name: string
    c_first_name: string
    c_current_addr_sk: int
}
type Anon7 = {
    ss_ticket_number: obj
    ss_customer_sk: obj
    bought_city: obj
    amt: obj
    profit: obj
}
type Anon8 = {
    ss_ticket_number: int
    ss_customer_sk: int
    ca_city: string
}
type Anon9 = {
    c_last_name: string
    c_first_name: string
    ca_city: string
    bought_city: obj
    ss_ticket_number: obj
    amt: obj
    profit: obj
}
type Anon10 = {
    c_last_name: string
    c_first_name: string
    ca_city: string
    bought_city: string
    ss_ticket_number: int
    amt: float
    profit: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let store_sales: Anon1 list = [{ ss_ticket_number = 1; ss_customer_sk = 1; ss_addr_sk = 1; ss_hdemo_sk = 1; ss_store_sk = 1; ss_sold_date_sk = 1; ss_coupon_amt = 5.0; ss_net_profit = 20.0 }]
let date_dim: Anon2 list = [{ d_date_sk = 1; d_dow = 6; d_year = 2020 }]
let store: Anon3 list = [{ s_store_sk = 1; s_city = "CityA" }]
let household_demographics: Anon4 list = [{ hd_demo_sk = 1; hd_dep_count = 2; hd_vehicle_count = 0 }]
let customer_address: Anon5 list = [{ ca_address_sk = 1; ca_city = "Portland" }; { ca_address_sk = 2; ca_city = "Seattle" }]
let customer: Anon6 list = [{ c_customer_sk = 1; c_last_name = "Doe"; c_first_name = "John"; c_current_addr_sk = 2 }]
let depcnt: int = 2
let vehcnt: int = 0
let year: int = 2020
let cities: string list = ["CityA"]
let dn: Anon7 list = [ for g in _group_by [ for ss in store_sales do 
  for d in date_dim do 
  for s in store do 
  for hd in household_demographics do 
  for ca in customer_address do if ss.ss_sold_date_sk = d.d_date_sk && ss.ss_store_sk = s.s_store_sk && ss.ss_hdemo_sk = hd.hd_demo_sk && ss.ss_addr_sk = ca.ca_address_sk && List.contains List.contains (hd.hd_dep_count = depcnt || hd.hd_vehicle_count = vehcnt) && d.d_dow [6; 0] && d.d_year = year && s.s_city cities then yield (ss, d, s, hd, ca) ] (fun (ss, d, s, hd, ca) -> { ss_ticket_number = ss.ss_ticket_number; ss_customer_sk = ss.ss_customer_sk; ca_city = ca.ca_city }) do
    yield { ss_ticket_number = g.key.ss_ticket_number; ss_customer_sk = g.key.ss_customer_sk; bought_city = g.key.ca_city; amt = List.sum [ for x in g do yield x.ss.ss_coupon_amt ]; profit = List.sum [ for x in g do yield x.ss.ss_net_profit ] } ]
let base: Anon9 list = [ for dnrec in dn do 
  for c in customer do 
  for current_addr in customer_address do if dnrec.ss_customer_sk = c.c_customer_sk && c.c_current_addr_sk = current_addr.ca_address_sk && current_addr.ca_city <> dnrec.bought_city then yield { c_last_name = c.c_last_name; c_first_name = c.c_first_name; ca_city = current_addr.ca_city; bought_city = dnrec.bought_city; ss_ticket_number = dnrec.ss_ticket_number; amt = dnrec.amt; profit = dnrec.profit } ] |> List.sortBy (fun dnrec -> [c.c_last_name; c.c_first_name; current_addr.ca_city; dnrec.bought_city; dnrec.ss_ticket_number])
let result: Anon9 list = base
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ c_last_name = "Doe"; c_first_name = "John"; ca_city = "Seattle"; bought_city = "Portland"; ss_ticket_number = 1; amt = 5.0; profit = 20.0 }])
