open System

let ss_ticket_number = "ss_ticket_number"
let ss_customer_sk = "ss_customer_sk"
let ss_addr_sk = "ss_addr_sk"
let ss_hdemo_sk = "ss_hdemo_sk"
let ss_store_sk = "ss_store_sk"
let ss_sold_date_sk = "ss_sold_date_sk"
let ss_coupon_amt = "ss_coupon_amt"
let ss_net_profit = "ss_net_profit"
let d_date_sk = "d_date_sk"
let d_dow = "d_dow"
let d_year = "d_year"
let s_store_sk = "s_store_sk"
let s_city = "s_city"
let hd_demo_sk = "hd_demo_sk"
let hd_dep_count = "hd_dep_count"
let hd_vehicle_count = "hd_vehicle_count"
let ca_address_sk = "ca_address_sk"
let ca_city = "ca_city"
let c_customer_sk = "c_customer_sk"
let c_last_name = "c_last_name"
let c_first_name = "c_first_name"
let c_current_addr_sk = "c_current_addr_sk"
let bought_city = "bought_city"
let amt = "amt"
let profit = "profit"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let store_sales = [|Map.ofList [(ss_ticket_number, 1); (ss_customer_sk, 1); (ss_addr_sk, 1); (ss_hdemo_sk, 1); (ss_store_sk, 1); (ss_sold_date_sk, 1); (ss_coupon_amt, 5.0); (ss_net_profit, 20.0)]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_dow, 6); (d_year, 2020)]|]
let store = [|Map.ofList [(s_store_sk, 1); (s_city, "CityA")]|]
let household_demographics = [|Map.ofList [(hd_demo_sk, 1); (hd_dep_count, 2); (hd_vehicle_count, 0)]|]
let customer_address = [|Map.ofList [(ca_address_sk, 1); (ca_city, "Portland")]; Map.ofList [(ca_address_sk, 2); (ca_city, "Seattle")]|]
let customer = [|Map.ofList [(c_customer_sk, 1); (c_last_name, "Doe"); (c_first_name, "John"); (c_current_addr_sk, 2)]|]
let depcnt = 2
let vehcnt = 0
let year = 2020
let cities = [|"CityA"|]
let dn = [| for g in _group_by [|
    for ss in store_sales do
        for d in date_dim do
            if (ss.ss_sold_date_sk = d.d_date_sk) then
                for s in store do
                    if (ss.ss_store_sk = s.s_store_sk) then
                        for hd in household_demographics do
                            if (ss.ss_hdemo_sk = hd.hd_demo_sk) then
                                for ca in customer_address do
                                    if (ss.ss_addr_sk = ca.ca_address_sk) then
                                        if ((((((hd.hd_dep_count = depcnt) || (hd.hd_vehicle_count = vehcnt))) && Array.contains d.d_dow [|6; 0|]) && (d.d_year = year)) && Array.contains s.s_city cities) then
                                            yield (ss, d, s, hd, ca)
|] (fun (ss, d, s, hd, ca) -> Map.ofList [(ss_ticket_number, ss.ss_ticket_number); (ss_customer_sk, ss.ss_customer_sk); (ca_city, ca.ca_city)]) do let g = g yield Map.ofList [(ss_ticket_number, g.key.ss_ticket_number); (ss_customer_sk, g.key.ss_customer_sk); (bought_city, g.key.ca_city); (amt, sum 
    [|
    for x in g do
        yield x.ss.ss_coupon_amt
    |]); (profit, sum 
    [|
    for x in g do
        yield x.ss.ss_net_profit
    |])] |]
let _base = 
    [|
    for dnrec in dn do
        for c in customer do
            if (dnrec.ss_customer_sk = c.c_customer_sk) then
                for current_addr in customer_address do
                    if (c.c_current_addr_sk = current_addr.ca_address_sk) then
                        if (current_addr.ca_city <> dnrec.bought_city) then
                            yield ([|c.c_last_name; c.c_first_name; current_addr.ca_city; dnrec.bought_city; dnrec.ss_ticket_number|], Map.ofList [(c_last_name, c.c_last_name); (c_first_name, c.c_first_name); (ca_city, current_addr.ca_city); (bought_city, dnrec.bought_city); (ss_ticket_number, dnrec.ss_ticket_number); (amt, dnrec.amt); (profit, dnrec.profit)])
    |]
    |> Array.sortBy fst
    |> Array.map snd
let result = _base
ignore (_json result)
let test_TPCDS_Q46_simplified() =
    if not ((result = [|Map.ofList [(c_last_name, "Doe"); (c_first_name, "John"); (ca_city, "Seattle"); (bought_city, "Portland"); (ss_ticket_number, 1); (amt, 5.0); (profit, 20.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q46 simplified" test_TPCDS_Q46_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
