// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    cust: int
    state: string
    amt: float
}
type Anon2 = {
    state: obj
    avg_amt: obj
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let catalog_returns: Anon1 list = [{ cust = 1; state = "CA"; amt = 40.0 }; { cust = 2; state = "CA"; amt = 50.0 }; { cust = 3; state = "CA"; amt = 81.0 }; { cust = 4; state = "TX"; amt = 30.0 }; { cust = 5; state = "TX"; amt = 20.0 }]
let avg_list: Anon2 list = [ for g in _group_by [ for r in catalog_returns do yield r ] (fun r -> r.state) do
    yield { state = g.key; avg_amt = (float (List.sum [ for x in g do yield x.amt ]) / float (List.length [ for x in g do yield x.amt ])) } ]
let avg_state: obj = first [ for a in avg_list do if a.state = "CA" then yield a ]
let result_list: float list = [ for r in catalog_returns do if r.state = "CA" && r.amt > avg_state.avg_amt * 1.2 then yield r.amt ]
let result: obj = first result_list
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = 81.0)
