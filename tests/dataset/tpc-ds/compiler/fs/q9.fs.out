// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    ss_quantity: int
    ss_ext_discount_amt: float
    ss_net_paid: float
}
type Anon2 = {
    r_reason_sk: int
}
type Anon3 = {
    bucket1: obj
    bucket2: obj
    bucket3: obj
    bucket4: obj
    bucket5: obj
}
type Anon4 = {
    bucket1: float
    bucket2: float
    bucket3: float
    bucket4: float
    bucket5: float
}
let store_sales: Anon1 list = [{ ss_quantity = 5; ss_ext_discount_amt = 5.0; ss_net_paid = 7.0 }; { ss_quantity = 30; ss_ext_discount_amt = 10.0; ss_net_paid = 15.0 }; { ss_quantity = 50; ss_ext_discount_amt = 20.0; ss_net_paid = 30.0 }; { ss_quantity = 70; ss_ext_discount_amt = 25.0; ss_net_paid = 35.0 }; { ss_quantity = 90; ss_ext_discount_amt = 40.0; ss_net_paid = 50.0 }]
let reason: Anon2 list = [{ r_reason_sk = 1 }]
let bucket1: obj = (if List.length [ for s in store_sales do if s.ss_quantity >= 1 && s.ss_quantity <= 20 then yield s ] > 10 then (float (List.sum [ for s in store_sales do if s.ss_quantity >= 1 && s.ss_quantity <= 20 then yield s.ss_ext_discount_amt ]) / float (List.length [ for s in store_sales do if s.ss_quantity >= 1 && s.ss_quantity <= 20 then yield s.ss_ext_discount_amt ])) else (float (List.sum [ for s in store_sales do if s.ss_quantity >= 1 && s.ss_quantity <= 20 then yield s.ss_net_paid ]) / float (List.length [ for s in store_sales do if s.ss_quantity >= 1 && s.ss_quantity <= 20 then yield s.ss_net_paid ])))
let bucket2: obj = (if List.length [ for s in store_sales do if s.ss_quantity >= 21 && s.ss_quantity <= 40 then yield s ] > 20 then (float (List.sum [ for s in store_sales do if s.ss_quantity >= 21 && s.ss_quantity <= 40 then yield s.ss_ext_discount_amt ]) / float (List.length [ for s in store_sales do if s.ss_quantity >= 21 && s.ss_quantity <= 40 then yield s.ss_ext_discount_amt ])) else (float (List.sum [ for s in store_sales do if s.ss_quantity >= 21 && s.ss_quantity <= 40 then yield s.ss_net_paid ]) / float (List.length [ for s in store_sales do if s.ss_quantity >= 21 && s.ss_quantity <= 40 then yield s.ss_net_paid ])))
let bucket3: obj = (if List.length [ for s in store_sales do if s.ss_quantity >= 41 && s.ss_quantity <= 60 then yield s ] > 30 then (float (List.sum [ for s in store_sales do if s.ss_quantity >= 41 && s.ss_quantity <= 60 then yield s.ss_ext_discount_amt ]) / float (List.length [ for s in store_sales do if s.ss_quantity >= 41 && s.ss_quantity <= 60 then yield s.ss_ext_discount_amt ])) else (float (List.sum [ for s in store_sales do if s.ss_quantity >= 41 && s.ss_quantity <= 60 then yield s.ss_net_paid ]) / float (List.length [ for s in store_sales do if s.ss_quantity >= 41 && s.ss_quantity <= 60 then yield s.ss_net_paid ])))
let bucket4: obj = (if List.length [ for s in store_sales do if s.ss_quantity >= 61 && s.ss_quantity <= 80 then yield s ] > 40 then (float (List.sum [ for s in store_sales do if s.ss_quantity >= 61 && s.ss_quantity <= 80 then yield s.ss_ext_discount_amt ]) / float (List.length [ for s in store_sales do if s.ss_quantity >= 61 && s.ss_quantity <= 80 then yield s.ss_ext_discount_amt ])) else (float (List.sum [ for s in store_sales do if s.ss_quantity >= 61 && s.ss_quantity <= 80 then yield s.ss_net_paid ]) / float (List.length [ for s in store_sales do if s.ss_quantity >= 61 && s.ss_quantity <= 80 then yield s.ss_net_paid ])))
let bucket5: obj = (if List.length [ for s in store_sales do if s.ss_quantity >= 81 && s.ss_quantity <= 100 then yield s ] > 50 then (float (List.sum [ for s in store_sales do if s.ss_quantity >= 81 && s.ss_quantity <= 100 then yield s.ss_ext_discount_amt ]) / float (List.length [ for s in store_sales do if s.ss_quantity >= 81 && s.ss_quantity <= 100 then yield s.ss_ext_discount_amt ])) else (float (List.sum [ for s in store_sales do if s.ss_quantity >= 81 && s.ss_quantity <= 100 then yield s.ss_net_paid ]) / float (List.length [ for s in store_sales do if s.ss_quantity >= 81 && s.ss_quantity <= 100 then yield s.ss_net_paid ])))
let result: Anon3 list = [ for r in reason do if r.r_reason_sk = 1 then yield { bucket1 = bucket1; bucket2 = bucket2; bucket3 = bucket3; bucket4 = bucket4; bucket5 = bucket5 } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ bucket1 = 7.0; bucket2 = 15.0; bucket3 = 30.0; bucket4 = 35.0; bucket5 = 50.0 }])
