open System

let bucket1 = "bucket1"
let bucket2 = "bucket2"
let bucket3 = "bucket3"
let bucket4 = "bucket4"
let bucket5 = "bucket5"
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let store_sales = [||]
let reason = [||]
let bucket1 = (if (count 
    [|
    for s in store_sales do
        if ((s.ss_quantity >= 1) && (s.ss_quantity <= 20)) then
            yield s
    |] > 10) then avg 
    [|
    for s in store_sales do
        if ((s.ss_quantity >= 1) && (s.ss_quantity <= 20)) then
            yield s.ss_ext_discount_amt
    |] else avg 
    [|
    for s in store_sales do
        if ((s.ss_quantity >= 1) && (s.ss_quantity <= 20)) then
            yield s.ss_net_paid
    |])
let bucket2 = (if (count 
    [|
    for s in store_sales do
        if ((s.ss_quantity >= 21) && (s.ss_quantity <= 40)) then
            yield s
    |] > 20) then avg 
    [|
    for s in store_sales do
        if ((s.ss_quantity >= 21) && (s.ss_quantity <= 40)) then
            yield s.ss_ext_discount_amt
    |] else avg 
    [|
    for s in store_sales do
        if ((s.ss_quantity >= 21) && (s.ss_quantity <= 40)) then
            yield s.ss_net_paid
    |])
let bucket3 = (if (count 
    [|
    for s in store_sales do
        if ((s.ss_quantity >= 41) && (s.ss_quantity <= 60)) then
            yield s
    |] > 30) then avg 
    [|
    for s in store_sales do
        if ((s.ss_quantity >= 41) && (s.ss_quantity <= 60)) then
            yield s.ss_ext_discount_amt
    |] else avg 
    [|
    for s in store_sales do
        if ((s.ss_quantity >= 41) && (s.ss_quantity <= 60)) then
            yield s.ss_net_paid
    |])
let bucket4 = (if (count 
    [|
    for s in store_sales do
        if ((s.ss_quantity >= 61) && (s.ss_quantity <= 80)) then
            yield s
    |] > 40) then avg 
    [|
    for s in store_sales do
        if ((s.ss_quantity >= 61) && (s.ss_quantity <= 80)) then
            yield s.ss_ext_discount_amt
    |] else avg 
    [|
    for s in store_sales do
        if ((s.ss_quantity >= 61) && (s.ss_quantity <= 80)) then
            yield s.ss_net_paid
    |])
let bucket5 = (if (count 
    [|
    for s in store_sales do
        if ((s.ss_quantity >= 81) && (s.ss_quantity <= 100)) then
            yield s
    |] > 50) then avg 
    [|
    for s in store_sales do
        if ((s.ss_quantity >= 81) && (s.ss_quantity <= 100)) then
            yield s.ss_ext_discount_amt
    |] else avg 
    [|
    for s in store_sales do
        if ((s.ss_quantity >= 81) && (s.ss_quantity <= 100)) then
            yield s.ss_net_paid
    |])
let result = 
    [|
    for r in reason do
        if (r.r_reason_sk = 1) then
            yield Map.ofList [(bucket1, bucket1); (bucket2, bucket2); (bucket3, bucket3); (bucket4, bucket4); (bucket5, bucket5)]
    |]
ignore (_json result)
let test_TPCDS_Q9_empty() =
    if not ((result.Length = 0)) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q9 empty" test_TPCDS_Q9_empty) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
