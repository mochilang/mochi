open System

let c_customer_sk = "c_customer_sk"
let c_customer_id = "c_customer_id"
let c_first_name = "c_first_name"
let c_last_name = "c_last_name"
let d_date_sk = "d_date_sk"
let d_year = "d_year"
let ss_customer_sk = "ss_customer_sk"
let ss_sold_date_sk = "ss_sold_date_sk"
let ss_net_paid = "ss_net_paid"
let ws_bill_customer_sk = "ws_bill_customer_sk"
let ws_sold_date_sk = "ws_sold_date_sk"
let ws_net_paid = "ws_net_paid"
let customer_id = "customer_id"
let customer_first_name = "customer_first_name"
let customer_last_name = "customer_last_name"
let year = "year"
let year_total = "year_total"
let sale_type = "sale_type"
let id = "id"
let first = "first"
let last = "last"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _concat (a: 'T[]) (b: 'T[]) : 'T[] =
  Array.append a b
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let customer = [|Map.ofList [(c_customer_sk, 1); (c_customer_id, 1); (c_first_name, "Alice"); (c_last_name, "Smith")]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_year, 1998)]; Map.ofList [(d_date_sk, 2); (d_year, 1999)]|]
let store_sales = [|Map.ofList [(ss_customer_sk, 1); (ss_sold_date_sk, 1); (ss_net_paid, 100.0)]; Map.ofList [(ss_customer_sk, 1); (ss_sold_date_sk, 2); (ss_net_paid, 110.0)]|]
let web_sales = [|Map.ofList [(ws_bill_customer_sk, 1); (ws_sold_date_sk, 1); (ws_net_paid, 40.0)]; Map.ofList [(ws_bill_customer_sk, 1); (ws_sold_date_sk, 2); (ws_net_paid, 80.0)]|]
let year_total = _concat [| for g in _group_by [|
    for c in customer do
        for ss in store_sales do
            if (c.c_customer_sk = ss.ss_customer_sk) then
                for d in date_dim do
                    if (d.d_date_sk = ss.ss_sold_date_sk) then
                        if ((d.d_year = 1998) || (d.d_year = 1999)) then
                            yield (c, ss, d)
|] (fun (c, ss, d) -> Map.ofList [(id, c.c_customer_id); (first, c.c_first_name); (last, c.c_last_name); (year, d.d_year)]) do let g = g yield Map.ofList [(customer_id, g.key.id); (customer_first_name, g.key.first); (customer_last_name, g.key.last); (year, g.key.year); (year_total, sum 
    [|
    for x in g do
        yield x.ss.ss_net_paid
    |]); (sale_type, "s")] |] [| for g in _group_by [|
    for c in customer do
        for ws in web_sales do
            if (c.c_customer_sk = ws.ws_bill_customer_sk) then
                for d in date_dim do
                    if (d.d_date_sk = ws.ws_sold_date_sk) then
                        if ((d.d_year = 1998) || (d.d_year = 1999)) then
                            yield (c, ws, d)
|] (fun (c, ws, d) -> Map.ofList [(id, c.c_customer_id); (first, c.c_first_name); (last, c.c_last_name); (year, d.d_year)]) do let g = g yield Map.ofList [(customer_id, g.key.id); (customer_first_name, g.key.first); (customer_last_name, g.key.last); (year, g.key.year); (year_total, sum 
    [|
    for x in g do
        yield x.ws.ws_net_paid
    |]); (sale_type, "w")] |]
let s_firstyear = first (
    [|
    for y in year_total do
        if ((y.sale_type = "s") && (y.year = 1998)) then
            yield y
    |])
let s_secyear = first (
    [|
    for y in year_total do
        if ((y.sale_type = "s") && (y.year = 1999)) then
            yield y
    |])
let w_firstyear = first (
    [|
    for y in year_total do
        if ((y.sale_type = "w") && (y.year = 1998)) then
            yield y
    |])
let w_secyear = first (
    [|
    for y in year_total do
        if ((y.sale_type = "w") && (y.year = 1999)) then
            yield y
    |])
let result = (if (((s_firstyear.year_total > 0) && (w_firstyear.year_total > 0)) && (((w_secyear.year_total / w_firstyear.year_total)) > ((s_secyear.year_total / s_firstyear.year_total)))) then [|Map.ofList [(customer_id, s_secyear.customer_id); (customer_first_name, s_secyear.customer_first_name); (customer_last_name, s_secyear.customer_last_name)]|] else [||])
ignore (_json result)
let test_TPCDS_Q74_simplified() =
    if not ((result = [|Map.ofList [(customer_id, 1); (customer_first_name, "Alice"); (customer_last_name, "Smith")]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q74 simplified" test_TPCDS_Q74_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
