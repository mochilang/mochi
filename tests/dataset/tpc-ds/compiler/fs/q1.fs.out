open System

let sr_returned_date_sk = "sr_returned_date_sk"
let sr_customer_sk = "sr_customer_sk"
let sr_store_sk = "sr_store_sk"
let sr_return_amt = "sr_return_amt"
let d_date_sk = "d_date_sk"
let d_year = "d_year"
let s_store_sk = "s_store_sk"
let s_state = "s_state"
let c_customer_sk = "c_customer_sk"
let c_customer_id = "c_customer_id"
let ctr_customer_sk = "ctr_customer_sk"
let ctr_store_sk = "ctr_store_sk"
let ctr_total_return = "ctr_total_return"
let customer_sk = "customer_sk"
let store_sk = "store_sk"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let store_returns = [|Map.ofList [(sr_returned_date_sk, 1); (sr_customer_sk, 1); (sr_store_sk, 10); (sr_return_amt, 20.0)]; Map.ofList [(sr_returned_date_sk, 1); (sr_customer_sk, 2); (sr_store_sk, 10); (sr_return_amt, 50.0)]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_year, 1998)]|]
let store = [|Map.ofList [(s_store_sk, 10); (s_state, "TN")]|]
let customer = [|Map.ofList [(c_customer_sk, 1); (c_customer_id, "C1")]; Map.ofList [(c_customer_sk, 2); (c_customer_id, "C2")]|]
let customer_total_return = [| for g in _group_by [|
    for sr in store_returns do
        for d in date_dim do
            if ((sr.sr_returned_date_sk = d.d_date_sk) && (d.d_year = 1998)) then
                yield (sr, d)
|] (fun (sr, d) -> Map.ofList [(customer_sk, sr.sr_customer_sk); (store_sk, sr.sr_store_sk)]) do let g = g yield Map.ofList [(ctr_customer_sk, g.key.customer_sk); (ctr_store_sk, g.key.store_sk); (ctr_total_return, sum 
    [|
    for x in g do
        yield x.sr_return_amt
    |])] |]
let result = 
    [|
    for ctr1 in customer_total_return do
        for s in store do
            if (ctr1.ctr_store_sk = s.s_store_sk) then
                for c in customer do
                    if (ctr1.ctr_customer_sk = c.c_customer_sk) then
                        if ((ctr1.ctr_total_return > (avg 
    [|
    for ctr2 in customer_total_return do
        if (ctr1.ctr_store_sk = ctr2.ctr_store_sk) then
            yield ctr2.ctr_total_return
    |] * 1.2)) && (s.s_state = "TN")) then
                            yield (c.c_customer_id, Map.ofList [(c_customer_id, c.c_customer_id)])
    |]
    |> Array.sortBy fst
    |> Array.map snd
ignore (_json result)
let test_TPCDS_Q1_result() =
    if not ((result = [|Map.ofList [(c_customer_id, "C2")]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q1 result" test_TPCDS_Q1_result) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
