open System

let inv_item_sk = "inv_item_sk"
let inv_warehouse_sk = "inv_warehouse_sk"
let inv_date_sk = "inv_date_sk"
let inv_quantity_on_hand = "inv_quantity_on_hand"
let w_warehouse_sk = "w_warehouse_sk"
let w_warehouse_name = "w_warehouse_name"
let i_item_sk = "i_item_sk"
let i_item_id = "i_item_id"
let d_date_sk = "d_date_sk"
let d_date = "d_date"
let w = "w"
let i = "i"
let qty = "qty"
let w_name = "w_name"
let i_id = "i_id"
let before_qty = "before_qty"
let after_qty = "after_qty"
let ratio = "ratio"
let inv_before = "inv_before"
let inv_after = "inv_after"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

type Inventory =
    {
        inv_item_sk: int;
        inv_warehouse_sk: int;
        inv_date_sk: int;
        inv_quantity_on_hand: int
    }

type Warehouse =
    {
        w_warehouse_sk: int;
        w_warehouse_name: string
    }

type Item =
    {
        i_item_sk: int;
        i_item_id: string
    }

type DateDim =
    {
        d_date_sk: int;
        d_date: string
    }

type Inventory =
    {
        inv_item_sk: int;
        inv_warehouse_sk: int;
        inv_date_sk: int;
        inv_quantity_on_hand: int
    }
type Warehouse =
    {
        w_warehouse_sk: int;
        w_warehouse_name: string
    }
type Item =
    {
        i_item_sk: int;
        i_item_id: string
    }
type DateDim =
    {
        d_date_sk: int;
        d_date: string
    }
let inventory = [|Map.ofList [(inv_item_sk, 1); (inv_warehouse_sk, 1); (inv_date_sk, 1); (inv_quantity_on_hand, 30)]; Map.ofList [(inv_item_sk, 1); (inv_warehouse_sk, 1); (inv_date_sk, 2); (inv_quantity_on_hand, 40)]; Map.ofList [(inv_item_sk, 2); (inv_warehouse_sk, 2); (inv_date_sk, 1); (inv_quantity_on_hand, 20)]; Map.ofList [(inv_item_sk, 2); (inv_warehouse_sk, 2); (inv_date_sk, 2); (inv_quantity_on_hand, 20)]|]
let warehouse = [|Map.ofList [(w_warehouse_sk, 1); (w_warehouse_name, "Main")]; Map.ofList [(w_warehouse_sk, 2); (w_warehouse_name, "Backup")]|]
let item = [|Map.ofList [(i_item_sk, 1); (i_item_id, "ITEM1")]; Map.ofList [(i_item_sk, 2); (i_item_id, "ITEM2")]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_date, "2000-03-01")]; Map.ofList [(d_date_sk, 2); (d_date, "2000-03-20")]|]
let before = [| for g in _group_by [|
    for inv in inventory do
        for d in date_dim do
            if (inv.inv_date_sk = d.d_date_sk) then
                if (d.d_date < "2000-03-15") then
                    yield (inv, d)
|] (fun (inv, d) -> Map.ofList [(w, inv.inv_warehouse_sk); (i, inv.inv_item_sk)]) do let g = g yield Map.ofList [(w, g.key.w); (i, g.key.i); (qty, sum 
    [|
    for x in g do
        yield x.inv_quantity_on_hand
    |])] |]
let after = [| for g in _group_by [|
    for inv in inventory do
        for d in date_dim do
            if (inv.inv_date_sk = d.d_date_sk) then
                if (d.d_date >= "2000-03-15") then
                    yield (inv, d)
|] (fun (inv, d) -> Map.ofList [(w, inv.inv_warehouse_sk); (i, inv.inv_item_sk)]) do let g = g yield Map.ofList [(w, g.key.w); (i, g.key.i); (qty, sum 
    [|
    for x in g do
        yield x.inv_quantity_on_hand
    |])] |]
let joined = 
    [|
    for b in before do
        for a in after do
            if ((b.w = a.w) && (b.i = a.i)) then
                for w in warehouse do
                    if (w.w_warehouse_sk = b.w) then
                        for it in item do
                            if (it.i_item_sk = b.i) then
                                yield Map.ofList [(w_name, w.w_warehouse_name); (i_id, it.i_item_id); (before_qty, b.qty); (after_qty, a.qty); (ratio, (a.qty / b.qty))]
    |]
let result = 
    [|
    for r in joined do
        if ((r.ratio >= ((2.0 / 3.0))) && (r.ratio <= ((3.0 / 2.0)))) then
            yield ([|r.w_name; r.i_id|], Map.ofList [(w_warehouse_name, r.w_name); (i_item_id, r.i_id); (inv_before, r.before_qty); (inv_after, r.after_qty)])
    |]
    |> Array.sortBy fst
    |> Array.map snd
ignore (_json result)
let test_TPCDS_Q21_inventory_ratio() =
    if not ((result = [|Map.ofList [(w_warehouse_name, "Main"); (i_item_id, "ITEM1"); (inv_before, 30); (inv_after, 40)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q21 inventory ratio" test_TPCDS_Q21_inventory_ratio) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
