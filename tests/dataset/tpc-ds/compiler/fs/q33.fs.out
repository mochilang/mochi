// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    i_item_sk: int
    i_manufact_id: int
    i_category: string
}
type Anon2 = {
    d_date_sk: int
    d_year: int
    d_moy: int
}
type Anon3 = {
    ca_address_sk: int
    ca_gmt_offset: int
}
type Anon4 = {
    ss_item_sk: int
    ss_ext_sales_price: float
    ss_sold_date_sk: int
    ss_addr_sk: int
}
type Anon5 = {
    cs_item_sk: int
    cs_ext_sales_price: float
    cs_sold_date_sk: int
    cs_bill_addr_sk: int
}
type Anon6 = {
    ws_item_sk: int
    ws_ext_sales_price: float
    ws_sold_date_sk: int
    ws_bill_addr_sk: int
}
type Anon7 = {
    manu: int
    price: float
}
type Anon8 = {
    i_manufact_id: obj
    total_sales: obj
}
type Anon9 = {
    i_manufact_id: int
    total_sales: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let item: Anon1 list = [{ i_item_sk = 1; i_manufact_id = 1; i_category = "Books" }; { i_item_sk = 2; i_manufact_id = 2; i_category = "Books" }]
let date_dim: Anon2 list = [{ d_date_sk = 1; d_year = 2000; d_moy = 1 }]
let customer_address: Anon3 list = [{ ca_address_sk = 1; ca_gmt_offset = -5 }; { ca_address_sk = 2; ca_gmt_offset = -5 }]
let store_sales: Anon4 list = [{ ss_item_sk = 1; ss_ext_sales_price = 100.0; ss_sold_date_sk = 1; ss_addr_sk = 1 }; { ss_item_sk = 2; ss_ext_sales_price = 50.0; ss_sold_date_sk = 1; ss_addr_sk = 2 }]
let catalog_sales: Anon5 list = [{ cs_item_sk = 1; cs_ext_sales_price = 20.0; cs_sold_date_sk = 1; cs_bill_addr_sk = 1 }]
let web_sales: Anon6 list = [{ ws_item_sk = 1; ws_ext_sales_price = 30.0; ws_sold_date_sk = 1; ws_bill_addr_sk = 1 }]
let month: int = 1
let year: int = 2000
let union_sales: obj = concat [ for ss in store_sales do 
  for d in date_dim do 
  for ca in customer_address do 
  for i in item do if ss.ss_sold_date_sk = d.d_date_sk && ss.ss_addr_sk = ca.ca_address_sk && ss.ss_item_sk = i.i_item_sk && i.i_category = "Books" && d.d_year = year && d.d_moy = month && ca.ca_gmt_offset = (-5) then yield { manu = i.i_manufact_id; price = ss.ss_ext_sales_price } ] [ for cs in catalog_sales do 
  for d in date_dim do 
  for ca in customer_address do 
  for i in item do if cs.cs_sold_date_sk = d.d_date_sk && cs.cs_bill_addr_sk = ca.ca_address_sk && cs.cs_item_sk = i.i_item_sk && i.i_category = "Books" && d.d_year = year && d.d_moy = month && ca.ca_gmt_offset = (-5) then yield { manu = i.i_manufact_id; price = cs.cs_ext_sales_price } ] [ for ws in web_sales do 
  for d in date_dim do 
  for ca in customer_address do 
  for i in item do if ws.ws_sold_date_sk = d.d_date_sk && ws.ws_bill_addr_sk = ca.ca_address_sk && ws.ws_item_sk = i.i_item_sk && i.i_category = "Books" && d.d_year = year && d.d_moy = month && ca.ca_gmt_offset = (-5) then yield { manu = i.i_manufact_id; price = ws.ws_ext_sales_price } ]
let result: Anon8 list = [ for g in _group_by [ for s in union_sales do yield s ] (fun s -> s.manu) |> List.sortByDescending (fun gTmp -> let g = gTmp in List.sum [ for x in g do yield x.price ]) do
    yield { i_manufact_id = g.key; total_sales = List.sum [ for x in g do yield x.price ] } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ i_manufact_id = 1; total_sales = 150.0 }; { i_manufact_id = 2; total_sales = 50.0 }])
