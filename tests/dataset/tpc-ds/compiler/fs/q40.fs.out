// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    order: int
    item_sk: int
    warehouse_sk: int
    date_sk: int
    price: float
}
type Anon2 = {
    order: int
    item_sk: int
    refunded: float
}
type Anon3 = {
    item_sk: int
    item_id: string
    current_price: float
}
type Anon4 = {
    warehouse_sk: int
    state: string
}
type Anon5 = {
    date_sk: int
    date: string
}
type Anon6 = {
    w_state: string
    i_item_id: string
    sold_date: string
    net: float
}
type Anon7 = {
    w_state: obj
    i_item_id: obj
    sales_before: obj
    sales_after: obj
}
type Anon8 = {
    w_state: string
    i_item_id: string
}
type Anon9 = {
    w_state: string
    i_item_id: string
    sales_before: float
    sales_after: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let catalog_sales: Anon1 list = [{ order = 1; item_sk = 1; warehouse_sk = 1; date_sk = 1; price = 100.0 }; { order = 2; item_sk = 1; warehouse_sk = 1; date_sk = 2; price = 150.0 }]
let catalog_returns: Anon2 list = [{ order = 2; item_sk = 1; refunded = 150.0 }]
let item: Anon3 list = [{ item_sk = 1; item_id = "I1"; current_price = 1.2 }]
let warehouse: Anon4 list = [{ warehouse_sk = 1; state = "CA" }]
let date_dim: Anon5 list = [{ date_sk = 1; date = "2020-01-10" }; { date_sk = 2; date = "2020-01-20" }]
let sales_date: string = "2020-01-15"
let records: Anon6 list = [ for cs in catalog_sales do 
  for w in warehouse do 
  for i in item do 
  for d in date_dim do 
  let cr = List.tryFind (fun cr -> cs.order = cr.order && cs.item_sk = cr.item_sk) catalog_returns if cs.warehouse_sk = w.warehouse_sk && cs.item_sk = i.item_sk && cs.date_sk = d.date_sk && i.current_price >= 0.99 && i.current_price <= 1.49 then yield { w_state = w.state; i_item_id = i.item_id; sold_date = d.date; net = cs.price - ((if cr = () then 0.0 else cr.refunded)) } ]
let result: Anon7 list = [ for g in _group_by [ for r in records do yield r ] (fun r -> { w_state = r.w_state; i_item_id = r.i_item_id }) do
    yield { w_state = g.key.w_state; i_item_id = g.key.i_item_id; sales_before = List.sum [ for x in g do yield (if x.sold_date < sales_date then x.net else 0.0) ]; sales_after = List.sum [ for x in g do yield (if x.sold_date >= sales_date then x.net else 0.0) ] } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ w_state = "CA"; i_item_id = "I1"; sales_before = 100.0; sales_after = 0.0 }])
