open System

let order = "order"
let item_sk = "item_sk"
let warehouse_sk = "warehouse_sk"
let date_sk = "date_sk"
let price = "price"
let refunded = "refunded"
let item_id = "item_id"
let current_price = "current_price"
let state = "state"
let date = "date"
let w_state = "w_state"
let i_item_id = "i_item_id"
let sold_date = "sold_date"
let net = "net"
let sales_before = "sales_before"
let sales_after = "sales_after"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let catalog_sales = [|Map.ofList [(order, 1); (item_sk, 1); (warehouse_sk, 1); (date_sk, 1); (price, 100.0)]; Map.ofList [(order, 2); (item_sk, 1); (warehouse_sk, 1); (date_sk, 2); (price, 150.0)]|]
let catalog_returns = [|Map.ofList [(order, 2); (item_sk, 1); (refunded, 150.0)]|]
let item = [|Map.ofList [(item_sk, 1); (item_id, "I1"); (current_price, 1.2)]|]
let warehouse = [|Map.ofList [(warehouse_sk, 1); (state, "CA")]|]
let date_dim = [|Map.ofList [(date_sk, 1); (date, "2020-01-10")]; Map.ofList [(date_sk, 2); (date, "2020-01-20")]|]
let sales_date = "2020-01-15"
let records = 
    [|
    for cs in catalog_sales do
        for cr in catalog_returns do
            if ((cs.order = cr.order) && (cs.item_sk = cr.item_sk)) then
                for w in warehouse do
                    if (cs.warehouse_sk = w.warehouse_sk) then
                        for i in item do
                            if (cs.item_sk = i.item_sk) then
                                for d in date_dim do
                                    if (cs.date_sk = d.date_sk) then
                                        if ((i.current_price >= 0.99) && (i.current_price <= 1.49)) then
                                            yield Map.ofList [(w_state, w.state); (i_item_id, i.item_id); (sold_date, d.date); (net, (cs.price - ((if (cr = null) then 0.0 else cr.refunded))))]
    |]
let result = _group_by records (fun r -> Map.ofList [(w_state, r.w_state); (i_item_id, r.i_item_id)]) |> List.map (fun g -> Map.ofList [(w_state, g.key.w_state); (i_item_id, g.key.i_item_id); (sales_before, sum 
    [|
    for x in g do
        yield (if (x.sold_date < sales_date) then x.net else 0.0)
    |]); (sales_after, sum 
    [|
    for x in g do
        yield (if (x.sold_date >= sales_date) then x.net else 0.0)
    |])])
ignore (_json result)
let test_TPCDS_Q40_simplified() =
    if not ((result = [|Map.ofList [(w_state, "CA"); (i_item_id, "I1"); (sales_before, 100.0); (sales_after, 0.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q40 simplified" test_TPCDS_Q40_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
