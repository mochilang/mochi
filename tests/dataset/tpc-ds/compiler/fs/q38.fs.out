open System

let c_customer_sk = "c_customer_sk"
let c_last_name = "c_last_name"
let c_first_name = "c_first_name"
let ss_customer_sk = "ss_customer_sk"
let d_month_seq = "d_month_seq"
let cs_bill_customer_sk = "cs_bill_customer_sk"
let ws_bill_customer_sk = "ws_bill_customer_sk"
let _intersect (a: 'T[]) (b: 'T[]) : 'T[] =
  let setB = Set.ofArray b
  Array.filter (fun x -> Set.contains x setB) a |> Array.distinct
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false

exception Return_distinct of any[]
let rec distinct (xs: any[]) : any[] =
    try
        let mutable xs = xs
        let mutable out = [||]
        for x in xs do
            if (not contains out x) then
                out <- append out x
        raise (Return_distinct (out))
        failwith "unreachable"
    with Return_distinct v -> v

let customer = [|Map.ofList [(c_customer_sk, 1); (c_last_name, "Smith"); (c_first_name, "John")]; Map.ofList [(c_customer_sk, 2); (c_last_name, "Jones"); (c_first_name, "Alice")]|]
let store_sales = [|Map.ofList [(ss_customer_sk, 1); (d_month_seq, 1200)]; Map.ofList [(ss_customer_sk, 2); (d_month_seq, 1205)]|]
let catalog_sales = [|Map.ofList [(cs_bill_customer_sk, 1); (d_month_seq, 1203)]|]
let web_sales = [|Map.ofList [(ws_bill_customer_sk, 1); (d_month_seq, 1206)]|]
let store_ids = distinct (
    [|
    for s in store_sales do
        if ((s.d_month_seq >= 1200) && (s.d_month_seq <= 1211)) then
            yield s.ss_customer_sk
    |])
let catalog_ids = distinct (
    [|
    for c in catalog_sales do
        if ((c.d_month_seq >= 1200) && (c.d_month_seq <= 1211)) then
            yield c.cs_bill_customer_sk
    |])
let web_ids = distinct (
    [|
    for w in web_sales do
        if ((w.d_month_seq >= 1200) && (w.d_month_seq <= 1211)) then
            yield w.ws_bill_customer_sk
    |])
let hot = _intersect _intersect store_ids catalog_ids web_ids
let result = hot.Length
ignore (_json result)
let test_TPCDS_Q38_simplified() =
    if not ((result = 1)) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q38 simplified" test_TPCDS_Q38_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
