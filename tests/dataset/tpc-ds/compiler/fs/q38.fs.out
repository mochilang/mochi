// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    c_customer_sk: int
    c_last_name: string
    c_first_name: string
}
type Anon2 = {
    ss_customer_sk: int
    d_month_seq: int
}
type Anon3 = {
    cs_bill_customer_sk: int
    d_month_seq: int
}
type Anon4 = {
    ws_bill_customer_sk: int
    d_month_seq: int
}
let _intersect (a: 'T list) (b: 'T list) : 'T list =
    a |> List.filter (fun x -> List.contains x b) |> List.distinct

let customer: Anon1 list = [{ c_customer_sk = 1; c_last_name = "Smith"; c_first_name = "John" }; { c_customer_sk = 2; c_last_name = "Jones"; c_first_name = "Alice" }]
let store_sales: Anon2 list = [{ ss_customer_sk = 1; d_month_seq = 1200 }; { ss_customer_sk = 2; d_month_seq = 1205 }]
let catalog_sales: Anon3 list = [{ cs_bill_customer_sk = 1; d_month_seq = 1203 }]
let web_sales: Anon4 list = [{ ws_bill_customer_sk = 1; d_month_seq = 1206 }]
let distinct (xs) =
    let mutable out: obj = [||]
    for x in xs do
        if not contains out x then
            out <- out @ [x]
    out
let store_ids: obj = distinct [ for s in store_sales do if s.d_month_seq >= 1200 && s.d_month_seq <= 1211 then yield s.ss_customer_sk ]
let catalog_ids: obj = distinct [ for c in catalog_sales do if c.d_month_seq >= 1200 && c.d_month_seq <= 1211 then yield c.cs_bill_customer_sk ]
let web_ids: obj = distinct [ for w in web_sales do if w.d_month_seq >= 1200 && w.d_month_seq <= 1211 then yield w.ws_bill_customer_sk ]
let hot: obj = (_intersect (_intersect store_ids catalog_ids) web_ids)
let result: obj = List.length hot
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = 1)
