// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    cs_item_sk: int
    cs_order_number: int
    cs_quantity: int
    cs_sold_date_sk: int
    cs_ship_date_sk: int
    cs_bill_cdemo_sk: int
    cs_bill_hdemo_sk: int
    cs_promo_sk: obj
}
type Anon2 = {
    inv_item_sk: int
    inv_warehouse_sk: int
    inv_date_sk: int
    inv_quantity_on_hand: int
}
type Anon3 = {
    w_warehouse_sk: int
    w_warehouse_name: string
}
type Anon4 = {
    i_item_sk: int
    i_item_desc: string
}
type Anon5 = {
    cd_demo_sk: int
    cd_marital_status: string
}
type Anon6 = {
    hd_demo_sk: int
    hd_buy_potential: string
}
type Anon7 = {
    d_date_sk: int
    d_week_seq: int
    d_date: int
    d_year: int
}
type Anon8 = {
    i_item_desc: obj
    w_warehouse_name: obj
    d_week_seq: obj
    no_promo: obj
    promo: obj
    total_cnt: obj
}
type Anon9 = {
    item_desc: string
    warehouse: string
    week_seq: int
}
type Anon10 = {
    i_item_desc: string
    w_warehouse_name: string
    d_week_seq: int
    no_promo: int
    promo: int
    total_cnt: int
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let catalog_sales: Anon1 list = [{ cs_item_sk = 1; cs_order_number = 1; cs_quantity = 1; cs_sold_date_sk = 1; cs_ship_date_sk = 3; cs_bill_cdemo_sk = 1; cs_bill_hdemo_sk = 1; cs_promo_sk = () }]
let inventory: Anon2 list = [{ inv_item_sk = 1; inv_warehouse_sk = 1; inv_date_sk = 2; inv_quantity_on_hand = 0 }]
let warehouse: Anon3 list = [{ w_warehouse_sk = 1; w_warehouse_name = "Main" }]
let item: Anon4 list = [{ i_item_sk = 1; i_item_desc = "ItemA" }]
let customer_demographics: Anon5 list = [{ cd_demo_sk = 1; cd_marital_status = "M" }]
let household_demographics: Anon6 list = [{ hd_demo_sk = 1; hd_buy_potential = "5001-10000" }]
let date_dim: Anon7 list = [{ d_date_sk = 1; d_week_seq = 10; d_date = 1; d_year = 2000 }; { d_date_sk = 2; d_week_seq = 10; d_date = 1; d_year = 2000 }; { d_date_sk = 3; d_week_seq = 10; d_date = 7; d_year = 2000 }]
let result: Anon8 list = [ for g in _group_by [ for cs in catalog_sales do 
  for inv in inventory do 
  for w in warehouse do 
  for i in item do 
  for cd in customer_demographics do 
  for hd in household_demographics do 
  for d1 in date_dim do 
  for d2 in date_dim do 
  for d3 in date_dim do if inv.inv_item_sk = cs.cs_item_sk && w.w_warehouse_sk = inv.inv_warehouse_sk && i.i_item_sk = cs.cs_item_sk && cd.cd_demo_sk = cs.cs_bill_cdemo_sk && hd.hd_demo_sk = cs.cs_bill_hdemo_sk && d1.d_date_sk = cs.cs_sold_date_sk && d2.d_date_sk = inv.inv_date_sk && d3.d_date_sk = cs.cs_ship_date_sk && d1.d_week_seq = d2.d_week_seq && inv.inv_quantity_on_hand < cs.cs_quantity && d3.d_date > d1.d_date + 5 && hd.hd_buy_potential = "5001-10000" && d1.d_year = 2000 && cd.cd_marital_status = "M" then yield (cs, inv, w, i, cd, hd, d1, d2, d3) ] (fun (cs, inv, w, i, cd, hd, d1, d2, d3) -> { item_desc = i.i_item_desc; warehouse = w.w_warehouse_name; week_seq = d1.d_week_seq }) do
    yield { i_item_desc = g.key.item_desc; w_warehouse_name = g.key.warehouse; d_week_seq = g.key.week_seq; no_promo = List.length [ for x in g do if x.cs_promo_sk = () then yield x ]; promo = List.length [ for x in g do if x.cs_promo_sk <> () then yield x ]; total_cnt = List.length g.Items } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ i_item_desc = "ItemA"; w_warehouse_name = "Main"; d_week_seq = 10; no_promo = 1; promo = 0; total_cnt = 1 }])
