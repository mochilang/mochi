open System

let cs_item_sk = "cs_item_sk"
let cs_order_number = "cs_order_number"
let cs_quantity = "cs_quantity"
let cs_sold_date_sk = "cs_sold_date_sk"
let cs_ship_date_sk = "cs_ship_date_sk"
let cs_bill_cdemo_sk = "cs_bill_cdemo_sk"
let cs_bill_hdemo_sk = "cs_bill_hdemo_sk"
let cs_promo_sk = "cs_promo_sk"
let inv_item_sk = "inv_item_sk"
let inv_warehouse_sk = "inv_warehouse_sk"
let inv_date_sk = "inv_date_sk"
let inv_quantity_on_hand = "inv_quantity_on_hand"
let w_warehouse_sk = "w_warehouse_sk"
let w_warehouse_name = "w_warehouse_name"
let i_item_sk = "i_item_sk"
let i_item_desc = "i_item_desc"
let cd_demo_sk = "cd_demo_sk"
let cd_marital_status = "cd_marital_status"
let hd_demo_sk = "hd_demo_sk"
let hd_buy_potential = "hd_buy_potential"
let d_date_sk = "d_date_sk"
let d_week_seq = "d_week_seq"
let d_date = "d_date"
let d_year = "d_year"
let no_promo = "no_promo"
let promo = "promo"
let total_cnt = "total_cnt"
let item_desc = "item_desc"
let warehouse = "warehouse"
let week_seq = "week_seq"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let catalog_sales = [|Map.ofList [(cs_item_sk, 1); (cs_order_number, 1); (cs_quantity, 1); (cs_sold_date_sk, 1); (cs_ship_date_sk, 3); (cs_bill_cdemo_sk, 1); (cs_bill_hdemo_sk, 1); (cs_promo_sk, null)]|]
let inventory = [|Map.ofList [(inv_item_sk, 1); (inv_warehouse_sk, 1); (inv_date_sk, 2); (inv_quantity_on_hand, 0)]|]
let warehouse = [|Map.ofList [(w_warehouse_sk, 1); (w_warehouse_name, "Main")]|]
let item = [|Map.ofList [(i_item_sk, 1); (i_item_desc, "ItemA")]|]
let customer_demographics = [|Map.ofList [(cd_demo_sk, 1); (cd_marital_status, "M")]|]
let household_demographics = [|Map.ofList [(hd_demo_sk, 1); (hd_buy_potential, "5001-10000")]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_week_seq, 10); (d_date, 1); (d_year, 2000)]; Map.ofList [(d_date_sk, 2); (d_week_seq, 10); (d_date, 1); (d_year, 2000)]; Map.ofList [(d_date_sk, 3); (d_week_seq, 10); (d_date, 7); (d_year, 2000)]|]
let result = [| for g in _group_by [|
    for cs in catalog_sales do
        for inv in inventory do
            if (inv.inv_item_sk = cs.cs_item_sk) then
                for w in warehouse do
                    if (w.w_warehouse_sk = inv.inv_warehouse_sk) then
                        for i in item do
                            if (i.i_item_sk = cs.cs_item_sk) then
                                for cd in customer_demographics do
                                    if (cd.cd_demo_sk = cs.cs_bill_cdemo_sk) then
                                        for hd in household_demographics do
                                            if (hd.hd_demo_sk = cs.cs_bill_hdemo_sk) then
                                                for d1 in date_dim do
                                                    if (d1.d_date_sk = cs.cs_sold_date_sk) then
                                                        for d2 in date_dim do
                                                            if (d2.d_date_sk = inv.inv_date_sk) then
                                                                for d3 in date_dim do
                                                                    if (d3.d_date_sk = cs.cs_ship_date_sk) then
                                                                        if ((((((d1.d_week_seq = d2.d_week_seq) && (inv.inv_quantity_on_hand < cs.cs_quantity)) && (d3.d_date > (d1.d_date + 5))) && (hd.hd_buy_potential = "5001-10000")) && (d1.d_year = 2000)) && (cd.cd_marital_status = "M")) then
                                                                            yield (cs, inv, w, i, cd, hd, d1, d2, d3)
|] (fun (cs, inv, w, i, cd, hd, d1, d2, d3) -> Map.ofList [(item_desc, i.i_item_desc); (warehouse, w.w_warehouse_name); (week_seq, d1.d_week_seq)]) do let g = g yield Map.ofList [(i_item_desc, g.key.item_desc); (w_warehouse_name, g.key.warehouse); (d_week_seq, g.key.week_seq); (no_promo, count 
    [|
    for x in g do
        if (x.cs_promo_sk = null) then
            yield x
    |]); (promo, count 
    [|
    for x in g do
        if (x.cs_promo_sk <> null) then
            yield x
    |]); (total_cnt, count g)] |]
ignore (_json result)
let test_TPCDS_Q72_simplified() =
    if not ((result = [|Map.ofList [(i_item_desc, "ItemA"); (w_warehouse_name, "Main"); (d_week_seq, 10); (no_promo, 1); (promo, 0); (total_cnt, 1)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q72 simplified" test_TPCDS_Q72_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
