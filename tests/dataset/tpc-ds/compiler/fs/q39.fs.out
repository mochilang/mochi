// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

module math
let pi : float = System.Math.PI
let e : float = System.Math.E
let sqrt (x: float) : float = System.Math.Sqrt x
let pow (x: float) (y: float) : float = System.Math.Pow(x, y)
let sin (x: float) : float = System.Math.Sin x
let log (x: float) : float = System.Math.Log x

type Anon1 = {
    inv_item_sk: int
    inv_warehouse_sk: int
    inv_date_sk: int
    inv_quantity_on_hand: int
}
type Anon2 = {
    i_item_sk: int
}
type Anon3 = {
    w_warehouse_sk: int
    w_warehouse_name: string
}
type Anon4 = {
    d_date_sk: int
    d_year: int
    d_moy: int
}
type Anon5 = {
    w: obj
    i: obj
    qty: obj
}
type Anon6 = {
    w: int
    i: int
    month: int
}
type Anon7 = {
}
type Anon8 = {
    w: obj
    i: obj
}
type Anon9 = {
    w: Anon7
    i: Anon7
    qtys: obj
}
type Anon10 = {
    w: obj
    i: obj
    qtys: obj list
}
type Anon11 = {
    w_warehouse_sk: Anon7
    i_item_sk: Anon7
    cov: obj
}
type Anon12 = {
    w_warehouse_sk: int
    i_item_sk: int
    cov: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let inventory: Anon1 list = [{ inv_item_sk = 1; inv_warehouse_sk = 1; inv_date_sk = 1; inv_quantity_on_hand = 10 }; { inv_item_sk = 1; inv_warehouse_sk = 1; inv_date_sk = 2; inv_quantity_on_hand = 10 }; { inv_item_sk = 1; inv_warehouse_sk = 1; inv_date_sk = 3; inv_quantity_on_hand = 250 }]
let item: Anon2 list = [{ i_item_sk = 1 }]
let warehouse: Anon3 list = [{ w_warehouse_sk = 1; w_warehouse_name = "W1" }]
let date_dim: Anon4 list = [{ d_date_sk = 1; d_year = 2000; d_moy = 1 }; { d_date_sk = 2; d_year = 2000; d_moy = 2 }; { d_date_sk = 3; d_year = 2000; d_moy = 3 }]
let monthly: Anon5 list = [ for g in _group_by [ for inv in inventory do 
  for d in date_dim do 
  for i in item do 
  for w in warehouse do if inv.inv_date_sk = d.d_date_sk && inv.inv_item_sk = i.i_item_sk && inv.inv_warehouse_sk = w.w_warehouse_sk && d.d_year = 2000 then yield (inv, d, i, w) ] (fun (inv, d, i, w) -> { w = w.w_warehouse_sk; i = i.i_item_sk; month = d.d_moy }) do
    yield { w = g.key.w; i = g.key.i; qty = List.sum [ for x in g do yield x.inv_quantity_on_hand ] } ]
let mutable grouped: Anon7 = {  }
for m in monthly do
    let key: obj = string { w = m.w; i = m.i }
    if grouped.ContainsKey key then
        let g: Anon7 = grouped.[key]
        grouped.[key] <- { w = g.w; i = g.i; qtys = g.qtys @ [m.qty] }
    else
        grouped.[key] <- { w = m.w; i = m.i; qtys = [m.qty] }
let mutable summary: obj = [||]
for g in Seq.toList (grouped.Values) do
    let mean: obj = (float (List.sum g.qtys) / float (List.length g.qtys))
    let mutable sumsq: float = 0.0
    for q in g.qtys do
        sumsq <- sumsq + (q - mean) * (q - mean)
    let variance: float = sumsq / (List.length g.qtys - 1)
    let cov: obj = math.sqrt(variance) / mean
    if cov > 1.5 then
        summary <- summary @ [{ w_warehouse_sk = g.w; i_item_sk = g.i; cov = cov }]
printfn "%A" (JsonSerializer.Serialize(summary))
assert (summary = [{ w_warehouse_sk = 1; i_item_sk = 1; cov = 1.539600717839002 }])
