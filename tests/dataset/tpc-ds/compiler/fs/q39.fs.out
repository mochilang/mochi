open System

let inv_item_sk = "inv_item_sk"
let inv_warehouse_sk = "inv_warehouse_sk"
let inv_date_sk = "inv_date_sk"
let inv_quantity_on_hand = "inv_quantity_on_hand"
let i_item_sk = "i_item_sk"
let w_warehouse_sk = "w_warehouse_sk"
let w_warehouse_name = "w_warehouse_name"
let d_date_sk = "d_date_sk"
let d_year = "d_year"
let d_moy = "d_moy"
let w = "w"
let i = "i"
let qty = "qty"
let month = "month"
let qtys = "qtys"
let cov = "cov"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let math_sqrt (x: float) : float = failwith "extern"
let inventory = [|Map.ofList [(inv_item_sk, 1); (inv_warehouse_sk, 1); (inv_date_sk, 1); (inv_quantity_on_hand, 10)]; Map.ofList [(inv_item_sk, 1); (inv_warehouse_sk, 1); (inv_date_sk, 2); (inv_quantity_on_hand, 10)]; Map.ofList [(inv_item_sk, 1); (inv_warehouse_sk, 1); (inv_date_sk, 3); (inv_quantity_on_hand, 250)]|]
let item = [|Map.ofList [(i_item_sk, 1)]|]
let warehouse = [|Map.ofList [(w_warehouse_sk, 1); (w_warehouse_name, "W1")]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_year, 2000); (d_moy, 1)]; Map.ofList [(d_date_sk, 2); (d_year, 2000); (d_moy, 2)]; Map.ofList [(d_date_sk, 3); (d_year, 2000); (d_moy, 3)]|]
let monthly = [| for g in _group_by [|
    for inv in inventory do
        for d in date_dim do
            if (inv.inv_date_sk = d.d_date_sk) then
                for i in item do
                    if (inv.inv_item_sk = i.i_item_sk) then
                        for w in warehouse do
                            if (inv.inv_warehouse_sk = w.w_warehouse_sk) then
                                if (d.d_year = 2000) then
                                    yield (inv, d, i, w)
|] (fun (inv, d, i, w) -> Map.ofList [(w, w.w_warehouse_sk); (i, i.i_item_sk); (month, d.d_moy)]) do let g = g yield Map.ofList [(w, g.key.w); (i, g.key.i); (qty, sum 
    [|
    for x in g do
        yield x.inv_quantity_on_hand
    |])] |]
let mutable grouped: Map<string,Map<string,any>> = Map.empty
for m in monthly do
    let key = (string Map.ofList [(w, m.w); (i, m.i)])
    if Map.containsKey key grouped then
        let g = grouped.[key]
        grouped <- Map.add key Map.ofList [(w, g.w); (i, g.i); (qtys, append (g.qtys) (m.qty))] grouped
    else
        grouped <- Map.add key Map.ofList [(w, m.w); (i, m.i); (qtys, [|m.qty|])] grouped
let mutable summary = [||]
for g in values grouped do
    let mean = avg g.qtys
    let mutable sumsq = 0.0
    for q in g.qtys do
        sumsq <- (sumsq + (((q - mean)) * ((q - mean))))
    let variance = (sumsq / ((g.qtys.Length - 1)))
    let cov = (math.sqrt variance / mean)
    if (cov > 1.5) then
        summary <- append summary (Map.ofList [(w_warehouse_sk, g.w); (i_item_sk, g.i); (cov, cov)])
ignore (_json summary)
let test_TPCDS_Q39_simplified() =
    if not ((summary = [|Map.ofList [(w_warehouse_sk, 1); (i_item_sk, 1); (cov, 1.539600717839002)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q39 simplified" test_TPCDS_Q39_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
