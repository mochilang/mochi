// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    d_date_sk: int
    d_year: int
    d_moy: int
}
type Anon2 = {
    ss_sold_date_sk: int
    ss_item_sk: int
    ss_ext_sales_price: float
}
type Anon3 = {
    i_item_sk: int
    i_manufact_id: int
    i_brand_id: int
    i_brand: string
}
type Anon4 = {
    d_year: obj
    brand_id: obj
    brand: obj
    sum_agg: obj
}
type Anon5 = {
    d_year: int
    brand_id: int
    brand: string
}
type Anon6 = {
    d_year: int
    brand_id: int
    brand: string
    sum_agg: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let date_dim: Anon1 list = [{ d_date_sk = 1; d_year = 1998; d_moy = 12 }]
let store_sales: Anon2 list = [{ ss_sold_date_sk = 1; ss_item_sk = 1; ss_ext_sales_price = 10.0 }; { ss_sold_date_sk = 1; ss_item_sk = 2; ss_ext_sales_price = 20.0 }]
let item: Anon3 list = [{ i_item_sk = 1; i_manufact_id = 100; i_brand_id = 1; i_brand = "Brand1" }; { i_item_sk = 2; i_manufact_id = 100; i_brand_id = 2; i_brand = "Brand2" }]
let result: Anon4 list = [ for g in _group_by [ for dt in date_dim do 
  for ss in store_sales do 
  for i in item do if dt.d_date_sk = ss.ss_sold_date_sk && ss.ss_item_sk = i.i_item_sk && i.i_manufact_id = 100 && dt.d_moy = 12 then yield (dt, ss, i) ] (fun (dt, ss, i) -> { d_year = dt.d_year; brand_id = i.i_brand_id; brand = i.i_brand }) |> List.sortBy (fun gTmp -> let g = gTmp in [g.key.d_year; -List.sum [ for x in g do yield x.ss_ext_sales_price ]; g.key.brand_id]) do
    yield { d_year = g.key.d_year; brand_id = g.key.brand_id; brand = g.key.brand; sum_agg = List.sum [ for x in g do yield x.ss_ext_sales_price ] } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ d_year = 1998; brand_id = 2; brand = "Brand2"; sum_agg = 20.0 }; { d_year = 1998; brand_id = 1; brand = "Brand1"; sum_agg = 10.0 }])
