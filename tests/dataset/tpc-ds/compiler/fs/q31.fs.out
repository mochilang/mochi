open System

let ca_county = "ca_county"
let d_qoy = "d_qoy"
let d_year = "d_year"
let ss_ext_sales_price = "ss_ext_sales_price"
let ws_ext_sales_price = "ws_ext_sales_price"
let web_q1_q2_increase = "web_q1_q2_increase"
let store_q1_q2_increase = "store_q1_q2_increase"
let web_q2_q3_increase = "web_q2_q3_increase"
let store_q2_q3_increase = "store_q2_q3_increase"
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let store_sales = [|Map.ofList [(ca_county, "A"); (d_qoy, 1); (d_year, 2000); (ss_ext_sales_price, 100.0)]; Map.ofList [(ca_county, "A"); (d_qoy, 2); (d_year, 2000); (ss_ext_sales_price, 120.0)]; Map.ofList [(ca_county, "A"); (d_qoy, 3); (d_year, 2000); (ss_ext_sales_price, 160.0)]; Map.ofList [(ca_county, "B"); (d_qoy, 1); (d_year, 2000); (ss_ext_sales_price, 80.0)]; Map.ofList [(ca_county, "B"); (d_qoy, 2); (d_year, 2000); (ss_ext_sales_price, 90.0)]; Map.ofList [(ca_county, "B"); (d_qoy, 3); (d_year, 2000); (ss_ext_sales_price, 100.0)]|]
let web_sales = [|Map.ofList [(ca_county, "A"); (d_qoy, 1); (d_year, 2000); (ws_ext_sales_price, 100.0)]; Map.ofList [(ca_county, "A"); (d_qoy, 2); (d_year, 2000); (ws_ext_sales_price, 150.0)]; Map.ofList [(ca_county, "A"); (d_qoy, 3); (d_year, 2000); (ws_ext_sales_price, 250.0)]; Map.ofList [(ca_county, "B"); (d_qoy, 1); (d_year, 2000); (ws_ext_sales_price, 80.0)]; Map.ofList [(ca_county, "B"); (d_qoy, 2); (d_year, 2000); (ws_ext_sales_price, 90.0)]; Map.ofList [(ca_county, "B"); (d_qoy, 3); (d_year, 2000); (ws_ext_sales_price, 95.0)]|]
let counties = [|"A"; "B"|]
let mutable result = [||]
for county in counties do
    let ss1 = sum 
    [|
    for s in store_sales do
        if ((s.ca_county = county) && (s.d_qoy = 1)) then
            yield s.ss_ext_sales_price
    |]
    let ss2 = sum 
    [|
    for s in store_sales do
        if ((s.ca_county = county) && (s.d_qoy = 2)) then
            yield s.ss_ext_sales_price
    |]
    let ss3 = sum 
    [|
    for s in store_sales do
        if ((s.ca_county = county) && (s.d_qoy = 3)) then
            yield s.ss_ext_sales_price
    |]
    let ws1 = sum 
    [|
    for w in web_sales do
        if ((w.ca_county = county) && (w.d_qoy = 1)) then
            yield w.ws_ext_sales_price
    |]
    let ws2 = sum 
    [|
    for w in web_sales do
        if ((w.ca_county = county) && (w.d_qoy = 2)) then
            yield w.ws_ext_sales_price
    |]
    let ws3 = sum 
    [|
    for w in web_sales do
        if ((w.ca_county = county) && (w.d_qoy = 3)) then
            yield w.ws_ext_sales_price
    |]
    let web_g1 = (ws2 / ws1)
    let store_g1 = (ss2 / ss1)
    let web_g2 = (ws3 / ws2)
    let store_g2 = (ss3 / ss2)
    if ((web_g1 > store_g1) && (web_g2 > store_g2)) then
        result <- append result (Map.ofList [(ca_county, county); (d_year, 2000); (web_q1_q2_increase, web_g1); (store_q1_q2_increase, store_g1); (web_q2_q3_increase, web_g2); (store_q2_q3_increase, store_g2)])
ignore (_json result)
let test_TPCDS_Q31_simplified() =
    if not ((result = [|Map.ofList [(ca_county, "A"); (d_year, 2000); (web_q1_q2_increase, 1.5); (store_q1_q2_increase, 1.2); (web_q2_q3_increase, 1.6666666666666667); (store_q2_q3_increase, 1.3333333333333333)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q31 simplified" test_TPCDS_Q31_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
