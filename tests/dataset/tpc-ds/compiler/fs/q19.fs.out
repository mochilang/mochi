open System

let ss_sold_date_sk = "ss_sold_date_sk"
let ss_item_sk = "ss_item_sk"
let ss_customer_sk = "ss_customer_sk"
let ss_store_sk = "ss_store_sk"
let ss_ext_sales_price = "ss_ext_sales_price"
let d_date_sk = "d_date_sk"
let d_year = "d_year"
let d_moy = "d_moy"
let i_item_sk = "i_item_sk"
let i_brand_id = "i_brand_id"
let i_brand = "i_brand"
let i_manufact_id = "i_manufact_id"
let i_manufact = "i_manufact"
let i_manager_id = "i_manager_id"
let c_customer_sk = "c_customer_sk"
let c_current_addr_sk = "c_current_addr_sk"
let ca_address_sk = "ca_address_sk"
let ca_zip = "ca_zip"
let s_store_sk = "s_store_sk"
let s_zip = "s_zip"
let ext_price = "ext_price"
let brand = "brand"
let brand_id = "brand_id"
let man_id = "man_id"
let man = "man"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs
let _slice_string (s: string) (i: int) (j: int) : string =
  let mutable start = i
  let mutable stop = j
  let n = s.Length
  if start < 0 then start <- start + n
  if stop < 0 then stop <- stop + n
  if start < 0 then start <- 0
  if stop > n then stop <- n
  if stop < start then stop <- start
  s.Substring(start, stop - start)

type StoreSale =
    {
        ss_sold_date_sk: int;
        ss_item_sk: int;
        ss_customer_sk: int;
        ss_store_sk: int;
        ss_ext_sales_price: float
    }

type DateDim =
    {
        d_date_sk: int;
        d_year: int;
        d_moy: int
    }

type Item =
    {
        i_item_sk: int;
        i_brand_id: int;
        i_brand: string;
        i_manufact_id: int;
        i_manufact: string;
        i_manager_id: int
    }

type Customer =
    {
        c_customer_sk: int;
        c_current_addr_sk: int
    }

type CustomerAddress =
    {
        ca_address_sk: int;
        ca_zip: string
    }

type Store =
    {
        s_store_sk: int;
        s_zip: string
    }

type StoreSale =
    {
        ss_sold_date_sk: int;
        ss_item_sk: int;
        ss_customer_sk: int;
        ss_store_sk: int;
        ss_ext_sales_price: float
    }
type DateDim =
    {
        d_date_sk: int;
        d_year: int;
        d_moy: int
    }
type Item =
    {
        i_item_sk: int;
        i_brand_id: int;
        i_brand: string;
        i_manufact_id: int;
        i_manufact: string;
        i_manager_id: int
    }
type Customer =
    {
        c_customer_sk: int;
        c_current_addr_sk: int
    }
type CustomerAddress =
    {
        ca_address_sk: int;
        ca_zip: string
    }
type Store =
    {
        s_store_sk: int;
        s_zip: string
    }
let store_sales = [|Map.ofList [(ss_sold_date_sk, 1); (ss_item_sk, 1); (ss_customer_sk, 1); (ss_store_sk, 1); (ss_ext_sales_price, 100.0)]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_year, 1999); (d_moy, 11)]|]
let item = [|Map.ofList [(i_item_sk, 1); (i_brand_id, 1); (i_brand, "B1"); (i_manufact_id, 1); (i_manufact, "M1"); (i_manager_id, 10)]|]
let customer = [|Map.ofList [(c_customer_sk, 1); (c_current_addr_sk, 1)]|]
let customer_address = [|Map.ofList [(ca_address_sk, 1); (ca_zip, "11111")]|]
let store = [|Map.ofList [(s_store_sk, 1); (s_zip, "99999")]|]
let result = [| for g in _group_by [|
    for d in date_dim do
        for ss in store_sales do
            if (ss.ss_sold_date_sk = d.d_date_sk) then
                for i in item do
                    if ((ss.ss_item_sk = i.i_item_sk) && (i.i_manager_id = 10)) then
                        for c in customer do
                            if (ss.ss_customer_sk = c.c_customer_sk) then
                                for ca in customer_address do
                                    if (c.c_current_addr_sk = ca.ca_address_sk) then
                                        for s in store do
                                            if ((ss.ss_store_sk = s.s_store_sk) && (_slice_string ca.ca_zip 0 5 <> _slice_string s.s_zip 0 5)) then
                                                if ((d.d_moy = 11) && (d.d_year = 1999)) then
                                                    yield (d, ss, i, c, ca, s)
|] (fun (d, ss, i, c, ca, s) -> Map.ofList [(brand, i.i_brand); (brand_id, i.i_brand_id); (man_id, i.i_manufact_id); (man, i.i_manufact)]) do let g = g yield ([|g.key.brand|], Map.ofList [(i_brand, g.key.brand); (i_brand_id, g.key.brand_id); (i_manufact_id, g.key.man_id); (i_manufact, g.key.man); (ext_price, sum 
    [|
    for x in g do
        yield x.ss_ext_sales_price
    |])]) |] |> Array.sortBy fst |> Array.map snd
ignore (_json result)
let test_TPCDS_Q19_brand() =
    if not ((result = [|Map.ofList [(i_brand, "B1"); (i_brand_id, 1); (i_manufact_id, 1); (i_manufact, "M1"); (ext_price, 100.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q19 brand" test_TPCDS_Q19_brand) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
