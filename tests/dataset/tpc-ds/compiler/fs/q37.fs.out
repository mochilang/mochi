// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    i_item_sk: int
    i_item_id: string
    i_item_desc: string
    i_current_price: float
    i_manufact_id: int
}
type Anon2 = {
    inv_item_sk: int
    inv_warehouse_sk: int
    inv_date_sk: int
    inv_quantity_on_hand: int
}
type Anon3 = {
    d_date_sk: int
    d_date: string
}
type Anon4 = {
    cs_item_sk: int
    cs_sold_date_sk: int
}
type Anon5 = {
    i_item_id: obj
    i_item_desc: obj
    i_current_price: obj
}
type Anon6 = {
    id: string
    desc: string
    price: float
}
type Anon7 = {
    i_item_id: string
    i_item_desc: string
    i_current_price: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let item: Anon1 list = [{ i_item_sk = 1; i_item_id = "I1"; i_item_desc = "Item1"; i_current_price = 30.0; i_manufact_id = 800 }; { i_item_sk = 2; i_item_id = "I2"; i_item_desc = "Item2"; i_current_price = 60.0; i_manufact_id = 801 }]
let inventory: Anon2 list = [{ inv_item_sk = 1; inv_warehouse_sk = 1; inv_date_sk = 1; inv_quantity_on_hand = 200 }; { inv_item_sk = 2; inv_warehouse_sk = 1; inv_date_sk = 1; inv_quantity_on_hand = 300 }]
let date_dim: Anon3 list = [{ d_date_sk = 1; d_date = "2000-01-15" }]
let catalog_sales: Anon4 list = [{ cs_item_sk = 1; cs_sold_date_sk = 1 }]
let result: Anon5 list = [ for g in _group_by [ for i in item do 
  for inv in inventory do 
  for d in date_dim do 
  for cs in catalog_sales do if i.i_item_sk = inv.inv_item_sk && inv.inv_date_sk = d.d_date_sk && cs.cs_item_sk = i.i_item_sk && i.i_current_price >= 20 && i.i_current_price <= 50 && i.i_manufact_id >= 800 && i.i_manufact_id <= 803 && inv.inv_quantity_on_hand >= 100 && inv.inv_quantity_on_hand <= 500 then yield (i, inv, d, cs) ] (fun (i, inv, d, cs) -> { id = i.i_item_id; desc = i.i_item_desc; price = i.i_current_price }) |> List.sortBy (fun gTmp -> let g = gTmp in g.key.id) do
    yield { i_item_id = g.key.id; i_item_desc = g.key.desc; i_current_price = g.key.price } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ i_item_id = "I1"; i_item_desc = "Item1"; i_current_price = 30.0 }])
