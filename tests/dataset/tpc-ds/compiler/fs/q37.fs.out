open System

let i_item_sk = "i_item_sk"
let i_item_id = "i_item_id"
let i_item_desc = "i_item_desc"
let i_current_price = "i_current_price"
let i_manufact_id = "i_manufact_id"
let inv_item_sk = "inv_item_sk"
let inv_warehouse_sk = "inv_warehouse_sk"
let inv_date_sk = "inv_date_sk"
let inv_quantity_on_hand = "inv_quantity_on_hand"
let d_date_sk = "d_date_sk"
let d_date = "d_date"
let cs_item_sk = "cs_item_sk"
let cs_sold_date_sk = "cs_sold_date_sk"
let id = "id"
let desc = "desc"
let price = "price"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false

let item = [|Map.ofList [(i_item_sk, 1); (i_item_id, "I1"); (i_item_desc, "Item1"); (i_current_price, 30.0); (i_manufact_id, 800)]; Map.ofList [(i_item_sk, 2); (i_item_id, "I2"); (i_item_desc, "Item2"); (i_current_price, 60.0); (i_manufact_id, 801)]|]
let inventory = [|Map.ofList [(inv_item_sk, 1); (inv_warehouse_sk, 1); (inv_date_sk, 1); (inv_quantity_on_hand, 200)]; Map.ofList [(inv_item_sk, 2); (inv_warehouse_sk, 1); (inv_date_sk, 1); (inv_quantity_on_hand, 300)]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_date, "2000-01-15")]|]
let catalog_sales = [|Map.ofList [(cs_item_sk, 1); (cs_sold_date_sk, 1)]|]
let result = [| for g in _group_by [|
    for i in item do
        for inv in inventory do
            if (i.i_item_sk = inv.inv_item_sk) then
                for d in date_dim do
                    if (inv.inv_date_sk = d.d_date_sk) then
                        for cs in catalog_sales do
                            if (cs.cs_item_sk = i.i_item_sk) then
                                if ((((((i.i_current_price >= 20) && (i.i_current_price <= 50)) && (i.i_manufact_id >= 800)) && (i.i_manufact_id <= 803)) && (inv.inv_quantity_on_hand >= 100)) && (inv.inv_quantity_on_hand <= 500)) then
                                    yield (i, inv, d, cs)
|] (fun (i, inv, d, cs) -> Map.ofList [(id, i.i_item_id); (desc, i.i_item_desc); (price, i.i_current_price)]) do let g = g yield (g.key.id, Map.ofList [(i_item_id, g.key.id); (i_item_desc, g.key.desc); (i_current_price, g.key.price)]) |] |> Array.sortBy fst |> Array.map snd
ignore (_json result)
let test_TPCDS_Q37_simplified() =
    if not ((result = [|Map.ofList [(i_item_id, "I1"); (i_item_desc, "Item1"); (i_current_price, 30.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q37 simplified" test_TPCDS_Q37_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
