open System

let i_item_sk = "i_item_sk"
let i_brand_id = "i_brand_id"
let i_brand = "i_brand"
let i_manager_id = "i_manager_id"
let t_time_sk = "t_time_sk"
let t_hour = "t_hour"
let t_minute = "t_minute"
let t_meal_time = "t_meal_time"
let d_date_sk = "d_date_sk"
let d_moy = "d_moy"
let d_year = "d_year"
let ws_ext_sales_price = "ws_ext_sales_price"
let ws_sold_date_sk = "ws_sold_date_sk"
let ws_item_sk = "ws_item_sk"
let ws_sold_time_sk = "ws_sold_time_sk"
let cs_ext_sales_price = "cs_ext_sales_price"
let cs_sold_date_sk = "cs_sold_date_sk"
let cs_item_sk = "cs_item_sk"
let cs_sold_time_sk = "cs_sold_time_sk"
let ss_ext_sales_price = "ss_ext_sales_price"
let ss_sold_date_sk = "ss_sold_date_sk"
let ss_item_sk = "ss_item_sk"
let ss_sold_time_sk = "ss_sold_time_sk"
let ext_price = "ext_price"
let item_sk = "item_sk"
let time_sk = "time_sk"
let brand_id = "brand_id"
let brand = "brand"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _concat (a: 'T[]) (b: 'T[]) : 'T[] =
  Array.append a b
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let item = [|Map.ofList [(i_item_sk, 1); (i_brand_id, 10); (i_brand, "BrandA"); (i_manager_id, 1)]; Map.ofList [(i_item_sk, 2); (i_brand_id, 20); (i_brand, "BrandB"); (i_manager_id, 1)]|]
let time_dim = [|Map.ofList [(t_time_sk, 1); (t_hour, 8); (t_minute, 30); (t_meal_time, "breakfast")]; Map.ofList [(t_time_sk, 2); (t_hour, 18); (t_minute, 0); (t_meal_time, "dinner")]; Map.ofList [(t_time_sk, 3); (t_hour, 12); (t_minute, 0); (t_meal_time, "lunch")]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_moy, 12); (d_year, 1998)]|]
let web_sales = [|Map.ofList [(ws_ext_sales_price, 100.0); (ws_sold_date_sk, 1); (ws_item_sk, 1); (ws_sold_time_sk, 1)]|]
let catalog_sales = [|Map.ofList [(cs_ext_sales_price, 200.0); (cs_sold_date_sk, 1); (cs_item_sk, 1); (cs_sold_time_sk, 2)]|]
let store_sales = [|Map.ofList [(ss_ext_sales_price, 150.0); (ss_sold_date_sk, 1); (ss_item_sk, 2); (ss_sold_time_sk, 1)]|]
let month = 12
let year = 1998
let union_sales = _concat _concat 
    [|
    for ws in web_sales do
        for d in date_dim do
            if (d.d_date_sk = ws.ws_sold_date_sk) then
                if ((d.d_moy = month) && (d.d_year = year)) then
                    yield Map.ofList [(ext_price, ws.ws_ext_sales_price); (item_sk, ws.ws_item_sk); (time_sk, ws.ws_sold_time_sk)]
    |] 
    [|
    for cs in catalog_sales do
        for d in date_dim do
            if (d.d_date_sk = cs.cs_sold_date_sk) then
                if ((d.d_moy = month) && (d.d_year = year)) then
                    yield Map.ofList [(ext_price, cs.cs_ext_sales_price); (item_sk, cs.cs_item_sk); (time_sk, cs.cs_sold_time_sk)]
    |] 
    [|
    for ss in store_sales do
        for d in date_dim do
            if (d.d_date_sk = ss.ss_sold_date_sk) then
                if ((d.d_moy = month) && (d.d_year = year)) then
                    yield Map.ofList [(ext_price, ss.ss_ext_sales_price); (item_sk, ss.ss_item_sk); (time_sk, ss.ss_sold_time_sk)]
    |]
let result = [| for g in _group_by [|
    for i in item do
        for s in union_sales do
            if (s.item_sk = i.i_item_sk) then
                for t in time_dim do
                    if (t.t_time_sk = s.time_sk) then
                        if ((i.i_manager_id = 1) && (((t.t_meal_time = "breakfast") || (t.t_meal_time = "dinner")))) then
                            yield (i, s, t)
|] (fun (i, s, t) -> Map.ofList [(brand_id, i.i_brand_id); (brand, i.i_brand); (t_hour, t.t_hour); (t_minute, t.t_minute)]) do let g = g yield ([|(-sum 
    [|
    for x in g do
        yield x.s.ext_price
    |]); g.key.brand_id|], Map.ofList [(i_brand_id, g.key.brand_id); (i_brand, g.key.brand); (t_hour, g.key.t_hour); (t_minute, g.key.t_minute); (ext_price, sum 
    [|
    for x in g do
        yield x.s.ext_price
    |])]) |] |> Array.sortBy fst |> Array.map snd
ignore (_json result)
let test_TPCDS_Q71_simplified() =
    if not ((result = [|Map.ofList [(i_brand_id, 10); (i_brand, "BrandA"); (t_hour, 18); (t_minute, 0); (ext_price, 200.0)]; Map.ofList [(i_brand_id, 20); (i_brand, "BrandB"); (t_hour, 8); (t_minute, 30); (ext_price, 150.0)]; Map.ofList [(i_brand_id, 10); (i_brand, "BrandA"); (t_hour, 8); (t_minute, 30); (ext_price, 100.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q71 simplified" test_TPCDS_Q71_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
