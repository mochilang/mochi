// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    i_item_sk: int
    i_brand_id: int
    i_brand: string
    i_manager_id: int
}
type Anon2 = {
    t_time_sk: int
    t_hour: int
    t_minute: int
    t_meal_time: string
}
type Anon3 = {
    d_date_sk: int
    d_moy: int
    d_year: int
}
type Anon4 = {
    ws_ext_sales_price: float
    ws_sold_date_sk: int
    ws_item_sk: int
    ws_sold_time_sk: int
}
type Anon5 = {
    cs_ext_sales_price: float
    cs_sold_date_sk: int
    cs_item_sk: int
    cs_sold_time_sk: int
}
type Anon6 = {
    ss_ext_sales_price: float
    ss_sold_date_sk: int
    ss_item_sk: int
    ss_sold_time_sk: int
}
type Anon7 = {
    ext_price: float
    item_sk: int
    time_sk: int
}
type Anon8 = {
    i_brand_id: obj
    i_brand: obj
    t_hour: obj
    t_minute: obj
    ext_price: obj
}
type Anon9 = {
    brand_id: int
    brand: string
    t_hour: int
    t_minute: int
}
type Anon10 = {
    i_brand_id: int
    i_brand: string
    t_hour: int
    t_minute: int
    ext_price: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let item: Anon1 list = [{ i_item_sk = 1; i_brand_id = 10; i_brand = "BrandA"; i_manager_id = 1 }; { i_item_sk = 2; i_brand_id = 20; i_brand = "BrandB"; i_manager_id = 1 }]
let time_dim: Anon2 list = [{ t_time_sk = 1; t_hour = 8; t_minute = 30; t_meal_time = "breakfast" }; { t_time_sk = 2; t_hour = 18; t_minute = 0; t_meal_time = "dinner" }; { t_time_sk = 3; t_hour = 12; t_minute = 0; t_meal_time = "lunch" }]
let date_dim: Anon3 list = [{ d_date_sk = 1; d_moy = 12; d_year = 1998 }]
let web_sales: Anon4 list = [{ ws_ext_sales_price = 100.0; ws_sold_date_sk = 1; ws_item_sk = 1; ws_sold_time_sk = 1 }]
let catalog_sales: Anon5 list = [{ cs_ext_sales_price = 200.0; cs_sold_date_sk = 1; cs_item_sk = 1; cs_sold_time_sk = 2 }]
let store_sales: Anon6 list = [{ ss_ext_sales_price = 150.0; ss_sold_date_sk = 1; ss_item_sk = 2; ss_sold_time_sk = 1 }]
let month: int = 12
let year: int = 1998
let union_sales: obj = concat [ for ws in web_sales do 
  for d in date_dim do if d.d_date_sk = ws.ws_sold_date_sk && d.d_moy = month && d.d_year = year then yield { ext_price = ws.ws_ext_sales_price; item_sk = ws.ws_item_sk; time_sk = ws.ws_sold_time_sk } ] [ for cs in catalog_sales do 
  for d in date_dim do if d.d_date_sk = cs.cs_sold_date_sk && d.d_moy = month && d.d_year = year then yield { ext_price = cs.cs_ext_sales_price; item_sk = cs.cs_item_sk; time_sk = cs.cs_sold_time_sk } ] [ for ss in store_sales do 
  for d in date_dim do if d.d_date_sk = ss.ss_sold_date_sk && d.d_moy = month && d.d_year = year then yield { ext_price = ss.ss_ext_sales_price; item_sk = ss.ss_item_sk; time_sk = ss.ss_sold_time_sk } ]
let result: Anon8 list = [ for g in _group_by [ for i in item do 
  for s in union_sales do 
  for t in time_dim do if s.item_sk = i.i_item_sk && t.t_time_sk = s.time_sk && i.i_manager_id = 1 && (t.t_meal_time = "breakfast" || t.t_meal_time = "dinner") then yield (i, s, t) ] (fun (i, s, t) -> { brand_id = i.i_brand_id; brand = i.i_brand; t_hour = t.t_hour; t_minute = t.t_minute }) |> List.sortBy (fun gTmp -> let g = gTmp in [-List.sum [ for x in g do yield x.s.ext_price ]; g.key.brand_id]) do
    yield { i_brand_id = g.key.brand_id; i_brand = g.key.brand; t_hour = g.key.t_hour; t_minute = g.key.t_minute; ext_price = List.sum [ for x in g do yield x.s.ext_price ] } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ i_brand_id = 10; i_brand = "BrandA"; t_hour = 18; t_minute = 0; ext_price = 200.0 }; { i_brand_id = 20; i_brand = "BrandB"; t_hour = 8; t_minute = 30; ext_price = 150.0 }; { i_brand_id = 10; i_brand = "BrandA"; t_hour = 8; t_minute = 30; ext_price = 100.0 }])
