open System

let cs_order_number = "cs_order_number"
let cs_ship_date_sk = "cs_ship_date_sk"
let cs_ship_addr_sk = "cs_ship_addr_sk"
let cs_call_center_sk = "cs_call_center_sk"
let cs_warehouse_sk = "cs_warehouse_sk"
let cs_ext_ship_cost = "cs_ext_ship_cost"
let cs_net_profit = "cs_net_profit"
let d_date_sk = "d_date_sk"
let d_date = "d_date"
let ca_address_sk = "ca_address_sk"
let ca_state = "ca_state"
let cc_call_center_sk = "cc_call_center_sk"
let cc_county = "cc_county"
let order_count = "order_count"
let total_shipping_cost = "total_shipping_cost"
let total_net_profit = "total_net_profit"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

type CatalogSale =
    {
        cs_order_number: int;
        cs_ship_date_sk: int;
        cs_ship_addr_sk: int;
        cs_call_center_sk: int;
        cs_warehouse_sk: int;
        cs_ext_ship_cost: float;
        cs_net_profit: float
    }

type DateDim =
    {
        d_date_sk: int;
        d_date: string
    }

type CustomerAddress =
    {
        ca_address_sk: int;
        ca_state: string
    }

type CallCenter =
    {
        cc_call_center_sk: int;
        cc_county: string
    }

type CatalogReturn =
    {
        cr_order_number: int
    }

exception Return_distinct of any[]
let rec distinct (xs: any[]) : any[] =
    try
        let mutable xs = xs
        let mutable out = [||]
        for x in xs do
            if (not contains out x) then
                out <- append out x
        raise (Return_distinct (out))
        failwith "unreachable"
    with Return_distinct v -> v

type CatalogSale =
    {
        cs_order_number: int;
        cs_ship_date_sk: int;
        cs_ship_addr_sk: int;
        cs_call_center_sk: int;
        cs_warehouse_sk: int;
        cs_ext_ship_cost: float;
        cs_net_profit: float
    }
type DateDim =
    {
        d_date_sk: int;
        d_date: string
    }
type CustomerAddress =
    {
        ca_address_sk: int;
        ca_state: string
    }
type CallCenter =
    {
        cc_call_center_sk: int;
        cc_county: string
    }
type CatalogReturn =
    {
        cr_order_number: int
    }
let catalog_sales = [|Map.ofList [(cs_order_number, 1); (cs_ship_date_sk, 1); (cs_ship_addr_sk, 1); (cs_call_center_sk, 1); (cs_warehouse_sk, 1); (cs_ext_ship_cost, 5.0); (cs_net_profit, 20.0)]; Map.ofList [(cs_order_number, 1); (cs_ship_date_sk, 1); (cs_ship_addr_sk, 1); (cs_call_center_sk, 1); (cs_warehouse_sk, 2); (cs_ext_ship_cost, 0.0); (cs_net_profit, 0.0)]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_date, "2000-03-01")]|]
let customer_address = [|Map.ofList [(ca_address_sk, 1); (ca_state, "CA")]|]
let call_center = [|Map.ofList [(cc_call_center_sk, 1); (cc_county, "CountyA")]|]
let catalog_returns = [||]
let filtered = [| for g in _group_by [|
    for cs1 in catalog_sales do
        for d in date_dim do
            if (((cs1.cs_ship_date_sk = d.d_date_sk) && (d.d_date >= "2000-03-01")) && (d.d_date <= "2000-04-30")) then
                for ca in customer_address do
                    if ((cs1.cs_ship_addr_sk = ca.ca_address_sk) && (ca.ca_state = "CA")) then
                        for cc in call_center do
                            if ((cs1.cs_call_center_sk = cc.cc_call_center_sk) && (cc.cc_county = "CountyA")) then
                                if (exists (
    [|
    for cs2 in catalog_sales do
        if ((cs1.cs_order_number = cs2.cs_order_number) && (cs1.cs_warehouse_sk <> cs2.cs_warehouse_sk)) then
            yield cs2
    |]) && (exists (
    [|
    for cr in catalog_returns do
        if (cs1.cs_order_number = cr.cr_order_number) then
            yield cr
    |]) = false)) then
                                    yield (cs1, d, ca, cc)
|] (fun (cs1, d, ca, cc) -> Map.empty) do let g = g yield Map.ofList [(order_count, distinct (
    [|
    for x in g do
        yield x.cs_order_number
    |]).Length); (total_shipping_cost, sum 
    [|
    for x in g do
        yield x.cs_ext_ship_cost
    |]); (total_net_profit, sum 
    [|
    for x in g do
        yield x.cs_net_profit
    |])] |]
ignore (_json filtered)
let test_TPCDS_Q16_shipping() =
    if not ((filtered = [|Map.ofList [(order_count, 1); (total_shipping_cost, 5.0); (total_net_profit, 20.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q16 shipping" test_TPCDS_Q16_shipping) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
