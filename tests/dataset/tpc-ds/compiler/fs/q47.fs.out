open System

let d_year = "d_year"
let item = "item"
let avg_monthly_sales = "avg_monthly_sales"
let sum_sales = "sum_sales"
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false

exception Return_abs of float
let rec abs (x: float) : float =
    try
        let mutable x = x
        if (x >= 0.0) then
            ignore (x)
        else
            ignore ((-x))
        failwith "unreachable"
    with Return_abs v -> v

let v2 = [|Map.ofList [(d_year, 2020); (item, "A"); (avg_monthly_sales, 100.0); (sum_sales, 120.0)]; Map.ofList [(d_year, 2020); (item, "B"); (avg_monthly_sales, 80.0); (sum_sales, 70.0)]; Map.ofList [(d_year, 2019); (item, "C"); (avg_monthly_sales, 50.0); (sum_sales, 60.0)]|]
let year = 2020
let orderby = "item"
let result = 
    [|
    for v in v2 do
        if (((v.d_year = year) && (v.avg_monthly_sales > 0)) && ((abs ((v.sum_sales - v.avg_monthly_sales)) / v.avg_monthly_sales) > 0.1)) then
            yield ([|(v.sum_sales - v.avg_monthly_sales); v.item|], v)
    |]
    |> Array.sortBy fst
    |> Array.map snd
ignore (_json result)
let test_TPCDS_Q47_simplified() =
    if not ((result = [|Map.ofList [(d_year, 2019); (item, "C"); (avg_monthly_sales, 50.0); (sum_sales, 60.0)]; Map.ofList [(d_year, 2020); (item, "A"); (avg_monthly_sales, 100.0); (sum_sales, 120.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q47 simplified" test_TPCDS_Q47_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
