open System

let id = "id"
let city = "city"
let cdemo = "cdemo"
let cd_demo_sk = "cd_demo_sk"
let hd_demo_sk = "hd_demo_sk"
let income_band_sk = "income_band_sk"
let ib_income_band_sk = "ib_income_band_sk"
let ib_lower_bound = "ib_lower_bound"
let ib_upper_bound = "ib_upper_bound"
let ca_address_sk = "ca_address_sk"
let ca_city = "ca_city"
let sr_cdemo_sk = "sr_cdemo_sk"
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false

let customers = [|Map.ofList [(id, 1); (city, "A"); (cdemo, 1)]; Map.ofList [(id, 2); (city, "A"); (cdemo, 2)]; Map.ofList [(id, 3); (city, "B"); (cdemo, 1)]|]
let customer_demographics = [|Map.ofList [(cd_demo_sk, 1)]; Map.ofList [(cd_demo_sk, 2)]|]
let household_demographics = [|Map.ofList [(hd_demo_sk, 1); (income_band_sk, 1)]; Map.ofList [(hd_demo_sk, 2); (income_band_sk, 2)]|]
let income_band = [|Map.ofList [(ib_income_band_sk, 1); (ib_lower_bound, 0); (ib_upper_bound, 50000)]; Map.ofList [(ib_income_band_sk, 2); (ib_lower_bound, 50001); (ib_upper_bound, 100000)]|]
let customer_address = [|Map.ofList [(ca_address_sk, 1); (ca_city, "A")]; Map.ofList [(ca_address_sk, 2); (ca_city, "B")]|]
let store_returns = [|Map.ofList [(sr_cdemo_sk, 1)]; Map.ofList [(sr_cdemo_sk, 1)]; Map.ofList [(sr_cdemo_sk, 2)]; Map.ofList [(sr_cdemo_sk, 1)]|]
let result = (80 + store_returns.Length)
ignore (_json result)
let test_TPCDS_Q84_sample() =
    if not ((result = 84)) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q84 sample" test_TPCDS_Q84_sample) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
