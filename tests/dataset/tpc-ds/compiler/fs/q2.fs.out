open System

let ws_sold_date_sk = "ws_sold_date_sk"
let ws_ext_sales_price = "ws_ext_sales_price"
let ws_sold_date_name = "ws_sold_date_name"
let cs_sold_date_sk = "cs_sold_date_sk"
let cs_ext_sales_price = "cs_ext_sales_price"
let cs_sold_date_name = "cs_sold_date_name"
let d_date_sk = "d_date_sk"
let d_week_seq = "d_week_seq"
let d_day_name = "d_day_name"
let d_year = "d_year"
let sold_date_sk = "sold_date_sk"
let sales_price = "sales_price"
let day = "day"
let sun_sales = "sun_sales"
let mon_sales = "mon_sales"
let tue_sales = "tue_sales"
let wed_sales = "wed_sales"
let thu_sales = "thu_sales"
let fri_sales = "fri_sales"
let sat_sales = "sat_sales"
let week_seq = "week_seq"
let d_week_seq1 = "d_week_seq1"
let sun_ratio = "sun_ratio"
let mon_ratio = "mon_ratio"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs
let _union_all (a: 'T[]) (b: 'T[]) : 'T[] =
  Array.append a b

let web_sales = [|Map.ofList [(ws_sold_date_sk, 1); (ws_ext_sales_price, 5.0); (ws_sold_date_name, "Sunday")]; Map.ofList [(ws_sold_date_sk, 2); (ws_ext_sales_price, 5.0); (ws_sold_date_name, "Monday")]; Map.ofList [(ws_sold_date_sk, 8); (ws_ext_sales_price, 10.0); (ws_sold_date_name, "Sunday")]; Map.ofList [(ws_sold_date_sk, 9); (ws_ext_sales_price, 10.0); (ws_sold_date_name, "Monday")]|]
let catalog_sales = [|Map.ofList [(cs_sold_date_sk, 1); (cs_ext_sales_price, 5.0); (cs_sold_date_name, "Sunday")]; Map.ofList [(cs_sold_date_sk, 2); (cs_ext_sales_price, 5.0); (cs_sold_date_name, "Monday")]; Map.ofList [(cs_sold_date_sk, 8); (cs_ext_sales_price, 10.0); (cs_sold_date_name, "Sunday")]; Map.ofList [(cs_sold_date_sk, 9); (cs_ext_sales_price, 10.0); (cs_sold_date_name, "Monday")]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_week_seq, 1); (d_day_name, "Sunday"); (d_year, 1998)]; Map.ofList [(d_date_sk, 2); (d_week_seq, 1); (d_day_name, "Monday"); (d_year, 1998)]; Map.ofList [(d_date_sk, 8); (d_week_seq, 54); (d_day_name, "Sunday"); (d_year, 1999)]; Map.ofList [(d_date_sk, 9); (d_week_seq, 54); (d_day_name, "Monday"); (d_year, 1999)]|]
let wscs = _union_all (
    [|
    for ws in web_sales do
        yield Map.ofList [(sold_date_sk, ws.ws_sold_date_sk); (sales_price, ws.ws_ext_sales_price); (day, ws.ws_sold_date_name)]
    |]) (
    [|
    for cs in catalog_sales do
        yield Map.ofList [(sold_date_sk, cs.cs_sold_date_sk); (sales_price, cs.cs_ext_sales_price); (day, cs.cs_sold_date_name)]
    |])
let wswscs = [| for g in _group_by [|
    for w in wscs do
        for d in date_dim do
            if (w.sold_date_sk = d.d_date_sk) then
                yield (w, d)
|] (fun (w, d) -> Map.ofList [(week_seq, d.d_week_seq)]) do let g = g yield Map.ofList [(d_week_seq, g.key.week_seq); (sun_sales, sum 
    [|
    for x in g do
        if (x.day = "Sunday") then
            yield x.sales_price
    |]); (mon_sales, sum 
    [|
    for x in g do
        if (x.day = "Monday") then
            yield x.sales_price
    |]); (tue_sales, sum 
    [|
    for x in g do
        if (x.day = "Tuesday") then
            yield x.sales_price
    |]); (wed_sales, sum 
    [|
    for x in g do
        if (x.day = "Wednesday") then
            yield x.sales_price
    |]); (thu_sales, sum 
    [|
    for x in g do
        if (x.day = "Thursday") then
            yield x.sales_price
    |]); (fri_sales, sum 
    [|
    for x in g do
        if (x.day = "Friday") then
            yield x.sales_price
    |]); (sat_sales, sum 
    [|
    for x in g do
        if (x.day = "Saturday") then
            yield x.sales_price
    |])] |]
let year1 = 
    [|
    for w in wswscs do
        if (w.d_week_seq = 1) then
            yield w
    |]
let year2 = 
    [|
    for w in wswscs do
        if (w.d_week_seq = 54) then
            yield w
    |]
let result = 
    [|
    for y in year1 do
        for z in year2 do
            if (y.d_week_seq = (z.d_week_seq - 53)) then
                yield Map.ofList [(d_week_seq1, y.d_week_seq); (sun_ratio, (y.sun_sales / z.sun_sales)); (mon_ratio, (y.mon_sales / z.mon_sales))]
    |]
ignore (_json result)
let test_TPCDS_Q2_result() =
    if not ((result = [|Map.ofList [(d_week_seq1, 1); (sun_ratio, 0.5); (mon_ratio, 0.5)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q2 result" test_TPCDS_Q2_result) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
