// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    ws_sold_date_sk: int
    ws_ext_sales_price: float
    ws_sold_date_name: string
}
type Anon2 = {
    cs_sold_date_sk: int
    cs_ext_sales_price: float
    cs_sold_date_name: string
}
type Anon3 = {
    d_date_sk: int
    d_week_seq: int
    d_day_name: string
    d_year: int
}
type Anon4 = {
    sold_date_sk: int
    sales_price: float
    day: string
}
type Anon5 = {
    d_week_seq: obj
    sun_sales: obj
    mon_sales: obj
    tue_sales: obj
    wed_sales: obj
    thu_sales: obj
    fri_sales: obj
    sat_sales: obj
}
type Anon6 = {
    week_seq: int
}
type Anon7 = {
    d_week_seq1: obj
    sun_ratio: obj
    mon_ratio: obj
}
type Anon8 = {
    d_week_seq1: int
    sun_ratio: float
    mon_ratio: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let web_sales: Anon1 list = [{ ws_sold_date_sk = 1; ws_ext_sales_price = 5.0; ws_sold_date_name = "Sunday" }; { ws_sold_date_sk = 2; ws_ext_sales_price = 5.0; ws_sold_date_name = "Monday" }; { ws_sold_date_sk = 8; ws_ext_sales_price = 10.0; ws_sold_date_name = "Sunday" }; { ws_sold_date_sk = 9; ws_ext_sales_price = 10.0; ws_sold_date_name = "Monday" }]
let catalog_sales: Anon2 list = [{ cs_sold_date_sk = 1; cs_ext_sales_price = 5.0; cs_sold_date_name = "Sunday" }; { cs_sold_date_sk = 2; cs_ext_sales_price = 5.0; cs_sold_date_name = "Monday" }; { cs_sold_date_sk = 8; cs_ext_sales_price = 10.0; cs_sold_date_name = "Sunday" }; { cs_sold_date_sk = 9; cs_ext_sales_price = 10.0; cs_sold_date_name = "Monday" }]
let date_dim: Anon3 list = [{ d_date_sk = 1; d_week_seq = 1; d_day_name = "Sunday"; d_year = 1998 }; { d_date_sk = 2; d_week_seq = 1; d_day_name = "Monday"; d_year = 1998 }; { d_date_sk = 8; d_week_seq = 54; d_day_name = "Sunday"; d_year = 1999 }; { d_date_sk = 9; d_week_seq = 54; d_day_name = "Monday"; d_year = 1999 }]
let wscs: obj = (([ for ws in web_sales do yield { sold_date_sk = ws.ws_sold_date_sk; sales_price = ws.ws_ext_sales_price; day = ws.ws_sold_date_name } ]) @ ([ for cs in catalog_sales do yield { sold_date_sk = cs.cs_sold_date_sk; sales_price = cs.cs_ext_sales_price; day = cs.cs_sold_date_name } ]))
let wswscs: Anon5 list = [ for g in _group_by [ for w in wscs do 
  for d in date_dim do if w.sold_date_sk = d.d_date_sk then yield (w, d) ] (fun (w, d) -> { week_seq = d.d_week_seq }) do
    yield { d_week_seq = g.key.week_seq; sun_sales = List.sum [ for x in g do if x.day = "Sunday" then yield x.sales_price ]; mon_sales = List.sum [ for x in g do if x.day = "Monday" then yield x.sales_price ]; tue_sales = List.sum [ for x in g do if x.day = "Tuesday" then yield x.sales_price ]; wed_sales = List.sum [ for x in g do if x.day = "Wednesday" then yield x.sales_price ]; thu_sales = List.sum [ for x in g do if x.day = "Thursday" then yield x.sales_price ]; fri_sales = List.sum [ for x in g do if x.day = "Friday" then yield x.sales_price ]; sat_sales = List.sum [ for x in g do if x.day = "Saturday" then yield x.sales_price ] } ]
let year1: Anon5 list = [ for w in wswscs do if w.d_week_seq = 1 then yield w ]
let year2: Anon5 list = [ for w in wswscs do if w.d_week_seq = 54 then yield w ]
let result: Anon7 list = [ for y in year1 do 
  for z in year2 do if y.d_week_seq = z.d_week_seq - 53 then yield { d_week_seq1 = y.d_week_seq; sun_ratio = y.sun_sales / z.sun_sales; mon_ratio = y.mon_sales / z.mon_sales } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ d_week_seq1 = 1; sun_ratio = 0.5; mon_ratio = 0.5 }])
