// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    ss_item_sk: int
    ss_ticket_number: int
    ss_customer_sk: int
    ss_quantity: int
    ss_sales_price: float
}
type Anon2 = {
    sr_item_sk: int
    sr_ticket_number: int
    sr_reason_sk: int
    sr_return_quantity: int
}
type Anon3 = {
    r_reason_sk: int
    r_reason_desc: string
}
type Anon4 = {
    ss_customer_sk: int
    act_sales: obj
}
type Anon5 = {
    ss_customer_sk: obj
    sumsales: obj
}
type Anon6 = {
    ss_customer_sk: int
    sumsales: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

type StoreSale = {
    mutable ss_item_sk: int
    mutable ss_ticket_number: int
    mutable ss_customer_sk: int
    mutable ss_quantity: int
    mutable ss_sales_price: float
}
type StoreReturn = {
    mutable sr_item_sk: int
    mutable sr_ticket_number: int
    mutable sr_reason_sk: int
    mutable sr_return_quantity: int
}
type Reason = {
    mutable r_reason_sk: int
    mutable r_reason_desc: string
}
let store_sales: Anon1 list = [{ ss_item_sk = 1; ss_ticket_number = 1; ss_customer_sk = 1; ss_quantity = 5; ss_sales_price = 10.0 }; { ss_item_sk = 1; ss_ticket_number = 2; ss_customer_sk = 2; ss_quantity = 3; ss_sales_price = 20.0 }]
let store_returns: Anon2 list = [{ sr_item_sk = 1; sr_ticket_number = 1; sr_reason_sk = 1; sr_return_quantity = 1 }]
let reason: Anon3 list = [{ r_reason_sk = 1; r_reason_desc = "ReasonA" }]
let t: Anon4 list = [ for ss in store_sales do 
  let sr = List.tryFind (fun sr -> ss.ss_item_sk = sr.sr_item_sk && ss.ss_ticket_number = sr.sr_ticket_number) store_returns 
  let r = List.tryFind (fun r -> sr <> () && sr.sr_reason_sk = r.r_reason_sk) reason if r = () || r.r_reason_desc = "ReasonA" then yield { ss_customer_sk = ss.ss_customer_sk; act_sales = (if sr <> () then (ss.ss_quantity - sr.sr_return_quantity) * ss.ss_sales_price else ss.ss_quantity * ss.ss_sales_price) } ]
let result: Anon5 list = [ for g in _group_by [ for x in t do yield x ] (fun x -> x.ss_customer_sk) |> List.sortBy (fun gTmp -> let g = gTmp in [List.sum [ for y in g do yield y.act_sales ]; g.key]) do
    yield { ss_customer_sk = g.key; sumsales = List.sum [ for y in g do yield y.act_sales ] } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ ss_customer_sk = 1; sumsales = 40.0 }; { ss_customer_sk = 2; sumsales = 60.0 }])
