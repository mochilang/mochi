open System

let ss_item_sk = "ss_item_sk"
let ss_ticket_number = "ss_ticket_number"
let ss_customer_sk = "ss_customer_sk"
let ss_quantity = "ss_quantity"
let ss_sales_price = "ss_sales_price"
let sr_item_sk = "sr_item_sk"
let sr_ticket_number = "sr_ticket_number"
let sr_reason_sk = "sr_reason_sk"
let sr_return_quantity = "sr_return_quantity"
let r_reason_sk = "r_reason_sk"
let r_reason_desc = "r_reason_desc"
let act_sales = "act_sales"
let sumsales = "sumsales"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

type StoreSale =
    {
        ss_item_sk: int;
        ss_ticket_number: int;
        ss_customer_sk: int;
        ss_quantity: int;
        ss_sales_price: float
    }

type StoreReturn =
    {
        sr_item_sk: int;
        sr_ticket_number: int;
        sr_reason_sk: int;
        sr_return_quantity: int
    }

type Reason =
    {
        r_reason_sk: int;
        r_reason_desc: string
    }

type StoreSale =
    {
        ss_item_sk: int;
        ss_ticket_number: int;
        ss_customer_sk: int;
        ss_quantity: int;
        ss_sales_price: float
    }
type StoreReturn =
    {
        sr_item_sk: int;
        sr_ticket_number: int;
        sr_reason_sk: int;
        sr_return_quantity: int
    }
type Reason =
    {
        r_reason_sk: int;
        r_reason_desc: string
    }
let store_sales = [|Map.ofList [(ss_item_sk, 1); (ss_ticket_number, 1); (ss_customer_sk, 1); (ss_quantity, 5); (ss_sales_price, 10.0)]; Map.ofList [(ss_item_sk, 1); (ss_ticket_number, 2); (ss_customer_sk, 2); (ss_quantity, 3); (ss_sales_price, 20.0)]|]
let store_returns = [|Map.ofList [(sr_item_sk, 1); (sr_ticket_number, 1); (sr_reason_sk, 1); (sr_return_quantity, 1)]|]
let reason = [|Map.ofList [(r_reason_sk, 1); (r_reason_desc, "ReasonA")]|]
let t = 
    [|
    for ss in store_sales do
        for sr in store_returns do
            if ((ss.ss_item_sk = sr.sr_item_sk) && (ss.ss_ticket_number = sr.sr_ticket_number)) then
                for r in reason do
                    if (sr.sr_reason_sk = r.r_reason_sk) then
                        if (r.r_reason_desc = "ReasonA") then
                            yield Map.ofList [(ss_customer_sk, ss.ss_customer_sk); (act_sales, (if (sr <> null) then (((ss.ss_quantity - sr.sr_return_quantity)) * ss.ss_sales_price) else (ss.ss_quantity * ss.ss_sales_price)))]
    |]
let result = _group_by t (fun x -> x.ss_customer_sk) |> List.map (fun g -> Map.ofList [(ss_customer_sk, g.key); (sumsales, sum 
    [|
    for y in g do
        yield y.act_sales
    |])])
ignore (_json result)
let test_TPCDS_Q93_active_sales() =
    if not ((result = [|Map.ofList [(ss_customer_sk, 1); (sumsales, 40.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q93 active sales" test_TPCDS_Q93_active_sales) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
