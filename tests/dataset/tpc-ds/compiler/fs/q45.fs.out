open System

let bill_customer_sk = "bill_customer_sk"
let item_sk = "item_sk"
let sold_date_sk = "sold_date_sk"
let sales_price = "sales_price"
let c_customer_sk = "c_customer_sk"
let c_current_addr_sk = "c_current_addr_sk"
let ca_address_sk = "ca_address_sk"
let ca_zip = "ca_zip"
let i_item_sk = "i_item_sk"
let i_item_id = "i_item_id"
let d_date_sk = "d_date_sk"
let d_qoy = "d_qoy"
let d_year = "d_year"
let sum_ws_sales_price = "sum_ws_sales_price"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs
let _slice_string (s: string) (i: int) (j: int) : string =
  let mutable start = i
  let mutable stop = j
  let n = s.Length
  if start < 0 then start <- start + n
  if stop < 0 then stop <- stop + n
  if start < 0 then start <- 0
  if stop > n then stop <- n
  if stop < start then stop <- start
  s.Substring(start, stop - start)

let web_sales = [|Map.ofList [(bill_customer_sk, 1); (item_sk, 1); (sold_date_sk, 1); (sales_price, 50.0)]; Map.ofList [(bill_customer_sk, 2); (item_sk, 2); (sold_date_sk, 1); (sales_price, 30.0)]|]
let customer = [|Map.ofList [(c_customer_sk, 1); (c_current_addr_sk, 1)]; Map.ofList [(c_customer_sk, 2); (c_current_addr_sk, 2)]|]
let customer_address = [|Map.ofList [(ca_address_sk, 1); (ca_zip, "85669")]; Map.ofList [(ca_address_sk, 2); (ca_zip, "99999")]|]
let item = [|Map.ofList [(i_item_sk, 1); (i_item_id, "I1")]; Map.ofList [(i_item_sk, 2); (i_item_id, "I2")]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_qoy, 1); (d_year, 2020)]|]
let zip_list = [|"85669"; "86197"; "88274"; "83405"; "86475"; "85392"; "85460"; "80348"; "81792"|]
let item_ids = [|"I2"|]
let qoy = 1
let year = 2020
let _base = [| for g in _group_by [|
    for ws in web_sales do
        for c in customer do
            if (ws.bill_customer_sk = c.c_customer_sk) then
                for ca in customer_address do
                    if (c.c_current_addr_sk = ca.ca_address_sk) then
                        for i in item do
                            if (ws.item_sk = i.i_item_sk) then
                                for d in date_dim do
                                    if (ws.sold_date_sk = d.d_date_sk) then
                                        if ((((Array.contains _slice_string ca.ca_zip 0 5 zip_list || Array.contains i.i_item_id item_ids)) && (d.d_qoy = qoy)) && (d.d_year = year)) then
                                            yield (ws, c, ca, i, d)
|] (fun (ws, c, ca, i, d) -> ca.ca_zip) do let g = g yield Map.ofList [(ca_zip, g.key); (sum_ws_sales_price, sum 
    [|
    for x in g do
        yield x.ws.sales_price
    |])] |]
let records = _base
ignore (_json records)
let test_TPCDS_Q45_simplified() =
    if not ((records = [|Map.ofList [(ca_zip, "85669"); (sum_ws_sales_price, 50.0)]; Map.ofList [(ca_zip, "99999"); (sum_ws_sales_price, 30.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q45 simplified" test_TPCDS_Q45_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
