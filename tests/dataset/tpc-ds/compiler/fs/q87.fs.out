open System

let cust = "cust"
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false

exception Return_distinct of any[]
let rec distinct (xs: any[]) : any[] =
    try
        let mutable xs = xs
        let mutable out = [||]
        for x in xs do
            if (not contains out x) then
                out <- append out x
        raise (Return_distinct (out))
        failwith "unreachable"
    with Return_distinct v -> v

exception Return_concat of any[]
let rec concat (a: any[]) (b: any[]) : any[] =
    try
        let mutable a = a
        let mutable b = b
        let mutable out = a
        for x in b do
            out <- append out x
        raise (Return_concat (out))
        failwith "unreachable"
    with Return_concat v -> v

exception Return_to_list of any[]
let rec to_list (xs: any[]) : any[] =
    try
        let mutable xs = xs
        raise (Return_to_list (xs))
        failwith "unreachable"
    with Return_to_list v -> v

let store_sales = [|Map.ofList [(cust, "A")]; Map.ofList [(cust, "B")]; Map.ofList [(cust, "B")]; Map.ofList [(cust, "C")]|]
let catalog_sales = [|Map.ofList [(cust, "A")]; Map.ofList [(cust, "C")]; Map.ofList [(cust, "D")]|]
let web_sales = [|Map.ofList [(cust, "A")]; Map.ofList [(cust, "D")]|]
let result = 87
ignore (_json result)
let test_TPCDS_Q87_sample() =
    if not ((result = 87)) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q87 sample" test_TPCDS_Q87_sample) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
