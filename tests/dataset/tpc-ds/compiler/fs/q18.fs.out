open System

let cs_quantity = "cs_quantity"
let cs_list_price = "cs_list_price"
let cs_coupon_amt = "cs_coupon_amt"
let cs_sales_price = "cs_sales_price"
let cs_net_profit = "cs_net_profit"
let cs_bill_cdemo_sk = "cs_bill_cdemo_sk"
let cs_bill_customer_sk = "cs_bill_customer_sk"
let cs_sold_date_sk = "cs_sold_date_sk"
let cs_item_sk = "cs_item_sk"
let cd_demo_sk = "cd_demo_sk"
let cd_gender = "cd_gender"
let cd_education_status = "cd_education_status"
let cd_dep_count = "cd_dep_count"
let c_customer_sk = "c_customer_sk"
let c_current_cdemo_sk = "c_current_cdemo_sk"
let c_current_addr_sk = "c_current_addr_sk"
let c_birth_year = "c_birth_year"
let c_birth_month = "c_birth_month"
let ca_address_sk = "ca_address_sk"
let ca_country = "ca_country"
let ca_state = "ca_state"
let ca_county = "ca_county"
let d_date_sk = "d_date_sk"
let d_year = "d_year"
let i_item_sk = "i_item_sk"
let i_item_id = "i_item_id"
let q = "q"
let lp = "lp"
let cp = "cp"
let sp = "sp"
let np = "np"
let by = "by"
let dep = "dep"
let agg1 = "agg1"
let agg2 = "agg2"
let agg3 = "agg3"
let agg4 = "agg4"
let agg5 = "agg5"
let agg6 = "agg6"
let agg7 = "agg7"

type _Group<'T>(key: obj) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count

let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
    let groups = System.Collections.Generic.Dictionary<string, _Group<'T>>()
    let order = System.Collections.Generic.List<string>()

    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'T>>

        if groups.TryGetValue(ks, &g) then
            ()
        else
            g <- _Group<'T> (key)
            groups[ks] <- g
            order.Add(ks)

        g.Items.Add(it)

    [ for ks in order -> groups[ks] ]

let rec _to_json (v: obj) : string =
    match v with
    | null -> "null"
    | :? string as s -> "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
    | :? bool
    | :? int
    | :? int64
    | :? double -> string v
    | :? System.Collections.Generic.IDictionary<string, obj> as m ->
        m
        |> Seq.map (fun (KeyValue(k, v)) -> "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
        |> String.concat ","
        |> fun s -> "{" + s + "}"
    | :? System.Collections.IEnumerable as e ->
        e
        |> Seq.cast<obj>
        |> Seq.map _to_json
        |> String.concat ","
        |> fun s -> "[" + s + "]"
    | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""

let _json (v: obj) : unit = printfn "%s" (_to_json v)

let _run_test (name: string) (f: unit -> unit) : bool =
    printf "%s ... " name

    try
        f ()
        printfn "PASS"
        true
    with e ->
        printfn "FAIL (%s)" e.Message
        false

let inline sum (xs: seq< ^T >) : ^T = Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T = Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T: comparison = Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T: comparison = Seq.max xs
let count (xs: seq<'T>) : int = Seq.length xs

type CatalogSale =
    { cs_quantity: int
      cs_list_price: float
      cs_coupon_amt: float
      cs_sales_price: float
      cs_net_profit: float
      cs_bill_cdemo_sk: int
      cs_bill_customer_sk: int
      cs_sold_date_sk: int
      cs_item_sk: int }

type CustomerDemographics =
    { cd_demo_sk: int
      cd_gender: string
      cd_education_status: string
      cd_dep_count: int }

type Customer =
    { c_customer_sk: int
      c_current_cdemo_sk: int
      c_current_addr_sk: int
      c_birth_year: int
      c_birth_month: int }

type CustomerAddress =
    { ca_address_sk: int
      ca_country: string
      ca_state: string
      ca_county: string }

type DateDim = { d_date_sk: int; d_year: int }

type Item = { i_item_sk: int; i_item_id: string }

type CatalogSale =
    { cs_quantity: int
      cs_list_price: float
      cs_coupon_amt: float
      cs_sales_price: float
      cs_net_profit: float
      cs_bill_cdemo_sk: int
      cs_bill_customer_sk: int
      cs_sold_date_sk: int
      cs_item_sk: int }

type CustomerDemographics =
    { cd_demo_sk: int
      cd_gender: string
      cd_education_status: string
      cd_dep_count: int }

type Customer =
    { c_customer_sk: int
      c_current_cdemo_sk: int
      c_current_addr_sk: int
      c_birth_year: int
      c_birth_month: int }

type CustomerAddress =
    { ca_address_sk: int
      ca_country: string
      ca_state: string
      ca_county: string }

type DateDim = { d_date_sk: int; d_year: int }
type Item = { i_item_sk: int; i_item_id: string }

let catalog_sales =
    [| Map.ofList
           [ (cs_quantity, 1)
             (cs_list_price, 10.0)
             (cs_coupon_amt, 1.0)
             (cs_sales_price, 9.0)
             (cs_net_profit, 2.0)
             (cs_bill_cdemo_sk, 1)
             (cs_bill_customer_sk, 1)
             (cs_sold_date_sk, 1)
             (cs_item_sk, 1) ] |]

let customer_demographics =
    [| Map.ofList
           [ (cd_demo_sk, 1)
             (cd_gender, "M")
             (cd_education_status, "College")
             (cd_dep_count, 2) ]
       Map.ofList
           [ (cd_demo_sk, 2)
             (cd_gender, "F")
             (cd_education_status, "College")
             (cd_dep_count, 2) ] |]

let customer =
    [| Map.ofList
           [ (c_customer_sk, 1)
             (c_current_cdemo_sk, 2)
             (c_current_addr_sk, 1)
             (c_birth_year, 1980)
             (c_birth_month, 1) ] |]

let customer_address =
    [| Map.ofList
           [ (ca_address_sk, 1)
             (ca_country, "US")
             (ca_state, "CA")
             (ca_county, "County1") ] |]

let date_dim = [| Map.ofList [ (d_date_sk, 1); (d_year, 1999) ] |]
let item = [| Map.ofList [ (i_item_sk, 1); (i_item_id, "I1") ] |]

let joined =
    [| for cs in catalog_sales do
           for cd1 in customer_demographics do
               if
                   (((cs.cs_bill_cdemo_sk = cd1.cd_demo_sk) && (cd1.cd_gender = "M"))
                    && (cd1.cd_education_status = "College"))
               then
                   for c in customer do
                       if (cs.cs_bill_customer_sk = c.c_customer_sk) then
                           for cd2 in customer_demographics do
                               if (c.c_current_cdemo_sk = cd2.cd_demo_sk) then
                                   for ca in customer_address do
                                       if (c.c_current_addr_sk = ca.ca_address_sk) then
                                           for d in date_dim do
                                               if ((cs.cs_sold_date_sk = d.d_date_sk) && (d.d_year = 1999)) then
                                                   for i in item do
                                                       if (cs.cs_item_sk = i.i_item_sk) then
                                                           yield
                                                               Map.ofList
                                                                   [ (i_item_id, i.i_item_id)
                                                                     (ca_country, ca.ca_country)
                                                                     (ca_state, ca.ca_state)
                                                                     (ca_county, ca.ca_county)
                                                                     (q, cs.cs_quantity)
                                                                     (lp, cs.cs_list_price)
                                                                     (cp, cs.cs_coupon_amt)
                                                                     (sp, cs.cs_sales_price)
                                                                     (np, cs.cs_net_profit)
                                                                     (by, c.c_birth_year)
                                                                     (dep, cd1.cd_dep_count) ] |]

let result =
    _group_by joined (fun j ->
        Map.ofList
            [ (i_item_id, j.i_item_id)
              (ca_country, j.ca_country)
              (ca_state, j.ca_state)
              (ca_county, j.ca_county) ])
    |> List.map (fun g ->
        Map.ofList
            [ (i_item_id, g.key.i_item_id)
              (ca_country, g.key.ca_country)
              (ca_state, g.key.ca_state)
              (ca_county, g.key.ca_county)
              (agg1,
               avg
                   [| for x in g do
                          yield x.q |])
              (agg2,
               avg
                   [| for x in g do
                          yield x.lp |])
              (agg3,
               avg
                   [| for x in g do
                          yield x.cp |])
              (agg4,
               avg
                   [| for x in g do
                          yield x.sp |])
              (agg5,
               avg
                   [| for x in g do
                          yield x.np |])
              (agg6,
               avg
                   [| for x in g do
                          yield x.by |])
              (agg7,
               avg
                   [| for x in g do
                          yield x.dep |]) ])

ignore (_json result)

let test_TPCDS_Q18_averages () =
    if
        not (
            (result = [| Map.ofList
                             [ (i_item_id, "I1")
                               (ca_country, "US")
                               (ca_state, "CA")
                               (ca_county, "County1")
                               (agg1, 1.0)
                               (agg2, 10.0)
                               (agg3, 1.0)
                               (agg4, 9.0)
                               (agg5, 2.0)
                               (agg6, 1980.0)
                               (agg7, 2.0) ] |])
        )
    then
        failwith "expect failed"

let mutable failures = 0

if not (_run_test "TPCDS Q18 averages" test_TPCDS_Q18_averages) then
    failures <- failures + 1

if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
