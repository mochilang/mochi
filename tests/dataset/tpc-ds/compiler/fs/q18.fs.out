// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    cs_quantity: int
    cs_list_price: float
    cs_coupon_amt: float
    cs_sales_price: float
    cs_net_profit: float
    cs_bill_cdemo_sk: int
    cs_bill_customer_sk: int
    cs_sold_date_sk: int
    cs_item_sk: int
}
type Anon2 = {
    cd_demo_sk: int
    cd_gender: string
    cd_education_status: string
    cd_dep_count: int
}
type Anon3 = {
    c_customer_sk: int
    c_current_cdemo_sk: int
    c_current_addr_sk: int
    c_birth_year: int
    c_birth_month: int
}
type Anon4 = {
    ca_address_sk: int
    ca_country: string
    ca_state: string
    ca_county: string
}
type Anon5 = {
    d_date_sk: int
    d_year: int
}
type Anon6 = {
    i_item_sk: int
    i_item_id: string
}
type Anon7 = {
    i_item_id: string
    ca_country: string
    ca_state: string
    ca_county: string
    q: int
    lp: float
    cp: float
    sp: float
    np: float
    by: int
    dep: int
}
type Anon8 = {
    i_item_id: obj
    ca_country: obj
    ca_state: obj
    ca_county: obj
    agg1: obj
    agg2: obj
    agg3: obj
    agg4: obj
    agg5: obj
    agg6: obj
    agg7: obj
}
type Anon9 = {
    i_item_id: string
    ca_country: string
    ca_state: string
    ca_county: string
}
type Anon10 = {
    i_item_id: string
    ca_country: string
    ca_state: string
    ca_county: string
    agg1: float
    agg2: float
    agg3: float
    agg4: float
    agg5: float
    agg6: float
    agg7: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

type CatalogSale = {
    mutable cs_quantity: int
    mutable cs_list_price: float
    mutable cs_coupon_amt: float
    mutable cs_sales_price: float
    mutable cs_net_profit: float
    mutable cs_bill_cdemo_sk: int
    mutable cs_bill_customer_sk: int
    mutable cs_sold_date_sk: int
    mutable cs_item_sk: int
}
type CustomerDemographics = {
    mutable cd_demo_sk: int
    mutable cd_gender: string
    mutable cd_education_status: string
    mutable cd_dep_count: int
}
type Customer = {
    mutable c_customer_sk: int
    mutable c_current_cdemo_sk: int
    mutable c_current_addr_sk: int
    mutable c_birth_year: int
    mutable c_birth_month: int
}
type CustomerAddress = {
    mutable ca_address_sk: int
    mutable ca_country: string
    mutable ca_state: string
    mutable ca_county: string
}
type DateDim = {
    mutable d_date_sk: int
    mutable d_year: int
}
type Item = {
    mutable i_item_sk: int
    mutable i_item_id: string
}
let catalog_sales: Anon1 list = [{ cs_quantity = 1; cs_list_price = 10.0; cs_coupon_amt = 1.0; cs_sales_price = 9.0; cs_net_profit = 2.0; cs_bill_cdemo_sk = 1; cs_bill_customer_sk = 1; cs_sold_date_sk = 1; cs_item_sk = 1 }]
let customer_demographics: Anon2 list = [{ cd_demo_sk = 1; cd_gender = "M"; cd_education_status = "College"; cd_dep_count = 2 }; { cd_demo_sk = 2; cd_gender = "F"; cd_education_status = "College"; cd_dep_count = 2 }]
let customer: Anon3 list = [{ c_customer_sk = 1; c_current_cdemo_sk = 2; c_current_addr_sk = 1; c_birth_year = 1980; c_birth_month = 1 }]
let customer_address: Anon4 list = [{ ca_address_sk = 1; ca_country = "US"; ca_state = "CA"; ca_county = "County1" }]
let date_dim: Anon5 list = [{ d_date_sk = 1; d_year = 1999 }]
let item: Anon6 list = [{ i_item_sk = 1; i_item_id = "I1" }]
let joined: Anon7 list = [ for cs in catalog_sales do 
  for cd1 in customer_demographics do 
  for c in customer do 
  for cd2 in customer_demographics do 
  for ca in customer_address do 
  for d in date_dim do 
  for i in item do if cs.cs_bill_cdemo_sk = cd1.cd_demo_sk && cd1.cd_gender = "M" && cd1.cd_education_status = "College" && cs.cs_bill_customer_sk = c.c_customer_sk && c.c_current_cdemo_sk = cd2.cd_demo_sk && c.c_current_addr_sk = ca.ca_address_sk && cs.cs_sold_date_sk = d.d_date_sk && d.d_year = 1999 && cs.cs_item_sk = i.i_item_sk then yield { i_item_id = i.i_item_id; ca_country = ca.ca_country; ca_state = ca.ca_state; ca_county = ca.ca_county; q = cs.cs_quantity; lp = cs.cs_list_price; cp = cs.cs_coupon_amt; sp = cs.cs_sales_price; np = cs.cs_net_profit; by = c.c_birth_year; dep = cd1.cd_dep_count } ]
let result: Anon8 list = [ for g in _group_by [ for j in joined do yield j ] (fun j -> { i_item_id = j.i_item_id; ca_country = j.ca_country; ca_state = j.ca_state; ca_county = j.ca_county }) do
    yield { i_item_id = g.key.i_item_id; ca_country = g.key.ca_country; ca_state = g.key.ca_state; ca_county = g.key.ca_county; agg1 = (float (List.sum [ for x in g do yield x.q ]) / float (List.length [ for x in g do yield x.q ])); agg2 = (float (List.sum [ for x in g do yield x.lp ]) / float (List.length [ for x in g do yield x.lp ])); agg3 = (float (List.sum [ for x in g do yield x.cp ]) / float (List.length [ for x in g do yield x.cp ])); agg4 = (float (List.sum [ for x in g do yield x.sp ]) / float (List.length [ for x in g do yield x.sp ])); agg5 = (float (List.sum [ for x in g do yield x.np ]) / float (List.length [ for x in g do yield x.np ])); agg6 = (float (List.sum [ for x in g do yield x.by ]) / float (List.length [ for x in g do yield x.by ])); agg7 = (float (List.sum [ for x in g do yield x.dep ]) / float (List.length [ for x in g do yield x.dep ])) } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ i_item_id = "I1"; ca_country = "US"; ca_state = "CA"; ca_county = "County1"; agg1 = 1.0; agg2 = 10.0; agg3 = 1.0; agg4 = 9.0; agg5 = 2.0; agg6 = 1980.0; agg7 = 2.0 }])
