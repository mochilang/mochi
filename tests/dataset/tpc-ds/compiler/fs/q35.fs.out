// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    c_customer_sk: int
    c_current_addr_sk: int
    c_current_cdemo_sk: int
}
type Anon2 = {
    ca_address_sk: int
    ca_state: string
}
type Anon3 = {
    cd_demo_sk: int
    cd_gender: string
    cd_marital_status: string
    cd_dep_count: int
    cd_dep_employed_count: int
    cd_dep_college_count: int
}
type Anon4 = {
    ss_customer_sk: int
    ss_sold_date_sk: int
}
type Anon5 = {
    d_date_sk: int
    d_year: int
    d_qoy: int
}
type Anon6 = {
    ca_state: obj
    cd_gender: obj
    cd_marital_status: obj
    cd_dep_count: obj
    cd_dep_employed_count: obj
    cd_dep_college_count: obj
    cnt: obj
}
type Anon7 = {
    state: string
    gender: string
    marital: string
    dep: int
    emp: int
    col: int
}
type Anon8 = {
    ca_state: string
    cd_gender: string
    cd_marital_status: string
    cd_dep_count: int
    cd_dep_employed_count: int
    cd_dep_college_count: int
    cnt: int
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let customer: Anon1 list = [{ c_customer_sk = 1; c_current_addr_sk = 1; c_current_cdemo_sk = 1 }; { c_customer_sk = 2; c_current_addr_sk = 2; c_current_cdemo_sk = 2 }]
let customer_address: Anon2 list = [{ ca_address_sk = 1; ca_state = "CA" }; { ca_address_sk = 2; ca_state = "NY" }]
let customer_demographics: Anon3 list = [{ cd_demo_sk = 1; cd_gender = "M"; cd_marital_status = "S"; cd_dep_count = 1; cd_dep_employed_count = 1; cd_dep_college_count = 0 }; { cd_demo_sk = 2; cd_gender = "F"; cd_marital_status = "M"; cd_dep_count = 2; cd_dep_employed_count = 1; cd_dep_college_count = 1 }]
let store_sales: Anon4 list = [{ ss_customer_sk = 1; ss_sold_date_sk = 1 }]
let date_dim: Anon5 list = [{ d_date_sk = 1; d_year = 2000; d_qoy = 1 }]
let purchased: int list = [ for ss in store_sales do 
  for d in date_dim do if ss.ss_sold_date_sk = d.d_date_sk && d.d_year = 2000 && d.d_qoy < 4 then yield ss.ss_customer_sk ]
let groups: Anon6 list = [ for g in _group_by [ for c in customer do 
  for ca in customer_address do 
  for cd in customer_demographics do if c.c_current_addr_sk = ca.ca_address_sk && c.c_current_cdemo_sk = cd.cd_demo_sk && List.contains c.c_customer_sk purchased then yield (c, ca, cd) ] (fun (c, ca, cd) -> { state = ca.ca_state; gender = cd.cd_gender; marital = cd.cd_marital_status; dep = cd.cd_dep_count; emp = cd.cd_dep_employed_count; col = cd.cd_dep_college_count }) do
    yield { ca_state = g.key.state; cd_gender = g.key.gender; cd_marital_status = g.key.marital; cd_dep_count = g.key.dep; cd_dep_employed_count = g.key.emp; cd_dep_college_count = g.key.col; cnt = List.length g.Items } ]
printfn "%A" (JsonSerializer.Serialize(groups))
assert (groups = [{ ca_state = "CA"; cd_gender = "M"; cd_marital_status = "S"; cd_dep_count = 1; cd_dep_employed_count = 1; cd_dep_college_count = 0; cnt = 1 }])
