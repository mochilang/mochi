open System

let ss_sold_date_sk = "ss_sold_date_sk"
let ss_item_sk = "ss_item_sk"
let ss_customer_sk = "ss_customer_sk"
let ss_ticket_number = "ss_ticket_number"
let ss_quantity = "ss_quantity"
let ss_store_sk = "ss_store_sk"
let sr_returned_date_sk = "sr_returned_date_sk"
let sr_customer_sk = "sr_customer_sk"
let sr_item_sk = "sr_item_sk"
let sr_ticket_number = "sr_ticket_number"
let sr_return_quantity = "sr_return_quantity"
let cs_sold_date_sk = "cs_sold_date_sk"
let cs_item_sk = "cs_item_sk"
let cs_bill_customer_sk = "cs_bill_customer_sk"
let cs_quantity = "cs_quantity"
let d_date_sk = "d_date_sk"
let d_quarter_name = "d_quarter_name"
let s_store_sk = "s_store_sk"
let s_state = "s_state"
let i_item_sk = "i_item_sk"
let i_item_id = "i_item_id"
let i_item_desc = "i_item_desc"
let qty = "qty"
let ret = "ret"
let csq = "csq"
let store_sales_quantitycount = "store_sales_quantitycount"
let store_sales_quantityave = "store_sales_quantityave"
let store_sales_quantitystdev = "store_sales_quantitystdev"
let store_sales_quantitycov = "store_sales_quantitycov"
let store_returns_quantitycount = "store_returns_quantitycount"
let store_returns_quantityave = "store_returns_quantityave"
let store_returns_quantitystdev = "store_returns_quantitystdev"
let store_returns_quantitycov = "store_returns_quantitycov"
let catalog_sales_quantitycount = "catalog_sales_quantitycount"
let catalog_sales_quantityave = "catalog_sales_quantityave"
let catalog_sales_quantitystdev = "catalog_sales_quantitystdev"
let catalog_sales_quantitycov = "catalog_sales_quantitycov"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

type StoreSale =
    {
        ss_sold_date_sk: int;
        ss_item_sk: int;
        ss_customer_sk: int;
        ss_ticket_number: int;
        ss_quantity: int;
        ss_store_sk: int
    }

type StoreReturn =
    {
        sr_returned_date_sk: int;
        sr_customer_sk: int;
        sr_item_sk: int;
        sr_ticket_number: int;
        sr_return_quantity: int
    }

type CatalogSale =
    {
        cs_sold_date_sk: int;
        cs_item_sk: int;
        cs_bill_customer_sk: int;
        cs_quantity: int
    }

type DateDim =
    {
        d_date_sk: int;
        d_quarter_name: string
    }

type Store =
    {
        s_store_sk: int;
        s_state: string
    }

type Item =
    {
        i_item_sk: int;
        i_item_id: string;
        i_item_desc: string
    }

type StoreSale =
    {
        ss_sold_date_sk: int;
        ss_item_sk: int;
        ss_customer_sk: int;
        ss_ticket_number: int;
        ss_quantity: int;
        ss_store_sk: int
    }
type StoreReturn =
    {
        sr_returned_date_sk: int;
        sr_customer_sk: int;
        sr_item_sk: int;
        sr_ticket_number: int;
        sr_return_quantity: int
    }
type CatalogSale =
    {
        cs_sold_date_sk: int;
        cs_item_sk: int;
        cs_bill_customer_sk: int;
        cs_quantity: int
    }
type DateDim =
    {
        d_date_sk: int;
        d_quarter_name: string
    }
type Store =
    {
        s_store_sk: int;
        s_state: string
    }
type Item =
    {
        i_item_sk: int;
        i_item_id: string;
        i_item_desc: string
    }
let store_sales = [|Map.ofList [(ss_sold_date_sk, 1); (ss_item_sk, 1); (ss_customer_sk, 1); (ss_ticket_number, 1); (ss_quantity, 10); (ss_store_sk, 1)]|]
let store_returns = [|Map.ofList [(sr_returned_date_sk, 2); (sr_customer_sk, 1); (sr_item_sk, 1); (sr_ticket_number, 1); (sr_return_quantity, 2)]|]
let catalog_sales = [|Map.ofList [(cs_sold_date_sk, 3); (cs_item_sk, 1); (cs_bill_customer_sk, 1); (cs_quantity, 5)]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_quarter_name, "1998Q1")]; Map.ofList [(d_date_sk, 2); (d_quarter_name, "1998Q2")]; Map.ofList [(d_date_sk, 3); (d_quarter_name, "1998Q3")]|]
let store = [|Map.ofList [(s_store_sk, 1); (s_state, "CA")]|]
let item = [|Map.ofList [(i_item_sk, 1); (i_item_id, "I1"); (i_item_desc, "Item 1")]|]
let joined = 
    [|
    for ss in store_sales do
        for sr in store_returns do
            if (((ss.ss_customer_sk = sr.sr_customer_sk) && (ss.ss_item_sk = sr.sr_item_sk)) && (ss.ss_ticket_number = sr.sr_ticket_number)) then
                for cs in catalog_sales do
                    if ((sr.sr_customer_sk = cs.cs_bill_customer_sk) && (sr.sr_item_sk = cs.cs_item_sk)) then
                        for d1 in date_dim do
                            if ((ss.ss_sold_date_sk = d1.d_date_sk) && (d1.d_quarter_name = "1998Q1")) then
                                for d2 in date_dim do
                                    if ((sr.sr_returned_date_sk = d2.d_date_sk) && Array.contains d2.d_quarter_name [|"1998Q1"; "1998Q2"; "1998Q3"|]) then
                                        for d3 in date_dim do
                                            if ((cs.cs_sold_date_sk = d3.d_date_sk) && Array.contains d3.d_quarter_name [|"1998Q1"; "1998Q2"; "1998Q3"|]) then
                                                for s in store do
                                                    if (ss.ss_store_sk = s.s_store_sk) then
                                                        for i in item do
                                                            if (ss.ss_item_sk = i.i_item_sk) then
                                                                yield Map.ofList [(qty, ss.ss_quantity); (ret, sr.sr_return_quantity); (csq, cs.cs_quantity); (i_item_id, i.i_item_id); (i_item_desc, i.i_item_desc); (s_state, s.s_state)]
    |]
let result = _group_by joined (fun j -> Map.ofList [(i_item_id, j.i_item_id); (i_item_desc, j.i_item_desc); (s_state, j.s_state)]) |> List.map (fun g -> Map.ofList [(i_item_id, g.key.i_item_id); (i_item_desc, g.key.i_item_desc); (s_state, g.key.s_state); (store_sales_quantitycount, count 
    [|
    for _ in g do
        yield _
    |]); (store_sales_quantityave, avg 
    [|
    for x in g do
        yield x.qty
    |]); (store_sales_quantitystdev, 0.0); (store_sales_quantitycov, 0.0); (store_returns_quantitycount, count 
    [|
    for _ in g do
        yield _
    |]); (store_returns_quantityave, avg 
    [|
    for x in g do
        yield x.ret
    |]); (store_returns_quantitystdev, 0.0); (store_returns_quantitycov, 0.0); (catalog_sales_quantitycount, count 
    [|
    for _ in g do
        yield _
    |]); (catalog_sales_quantityave, avg 
    [|
    for x in g do
        yield x.csq
    |]); (catalog_sales_quantitystdev, 0.0); (catalog_sales_quantitycov, 0.0)])
ignore (_json result)
let test_TPCDS_Q17_stats() =
    if not ((result = [|Map.ofList [(i_item_id, "I1"); (i_item_desc, "Item 1"); (s_state, "CA"); (store_sales_quantitycount, 1); (store_sales_quantityave, 10.0); (store_sales_quantitystdev, 0.0); (store_sales_quantitycov, 0.0); (store_returns_quantitycount, 1); (store_returns_quantityave, 2.0); (store_returns_quantitystdev, 0.0); (store_returns_quantitycov, 0.0); (catalog_sales_quantitycount, 1); (catalog_sales_quantityave, 5.0); (catalog_sales_quantitystdev, 0.0); (catalog_sales_quantitycov, 0.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q17 stats" test_TPCDS_Q17_stats) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
