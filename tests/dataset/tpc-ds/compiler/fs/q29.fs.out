open System

let ss_sold_date_sk = "ss_sold_date_sk"
let ss_item_sk = "ss_item_sk"
let ss_store_sk = "ss_store_sk"
let ss_customer_sk = "ss_customer_sk"
let ss_quantity = "ss_quantity"
let ss_ticket_number = "ss_ticket_number"
let sr_returned_date_sk = "sr_returned_date_sk"
let sr_item_sk = "sr_item_sk"
let sr_customer_sk = "sr_customer_sk"
let sr_ticket_number = "sr_ticket_number"
let sr_return_quantity = "sr_return_quantity"
let cs_sold_date_sk = "cs_sold_date_sk"
let cs_item_sk = "cs_item_sk"
let cs_bill_customer_sk = "cs_bill_customer_sk"
let cs_quantity = "cs_quantity"
let d_date_sk = "d_date_sk"
let d_moy = "d_moy"
let d_year = "d_year"
let s_store_sk = "s_store_sk"
let s_store_id = "s_store_id"
let s_store_name = "s_store_name"
let i_item_sk = "i_item_sk"
let i_item_id = "i_item_id"
let i_item_desc = "i_item_desc"
let item_id = "item_id"
let item_desc = "item_desc"
let store_sales_quantity = "store_sales_quantity"
let store_returns_quantity = "store_returns_quantity"
let catalog_sales_quantity = "catalog_sales_quantity"

type _Group<'T>(key: obj) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count

let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
    let groups = System.Collections.Generic.Dictionary<string, _Group<'T>>()
    let order = System.Collections.Generic.List<string>()

    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'T>>

        if groups.TryGetValue(ks, &g) then
            ()
        else
            g <- _Group<'T> (key)
            groups[ks] <- g
            order.Add(ks)

        g.Items.Add(it)

    [ for ks in order -> groups[ks] ]

let rec _to_json (v: obj) : string =
    match v with
    | null -> "null"
    | :? string as s -> "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
    | :? bool
    | :? int
    | :? int64
    | :? double -> string v
    | :? System.Collections.Generic.IDictionary<string, obj> as m ->
        m
        |> Seq.map (fun (KeyValue(k, v)) -> "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
        |> String.concat ","
        |> fun s -> "{" + s + "}"
    | :? System.Collections.IEnumerable as e ->
        e
        |> Seq.cast<obj>
        |> Seq.map _to_json
        |> String.concat ","
        |> fun s -> "[" + s + "]"
    | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""

let _json (v: obj) : unit = printfn "%s" (_to_json v)

let _run_test (name: string) (f: unit -> unit) : bool =
    printf "%s ... " name

    try
        f ()
        printfn "PASS"
        true
    with e ->
        printfn "FAIL (%s)" e.Message
        false

let inline sum (xs: seq< ^T >) : ^T = Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T = Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T: comparison = Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T: comparison = Seq.max xs
let count (xs: seq<'T>) : int = Seq.length xs

type StoreSale =
    { ss_sold_date_sk: int
      ss_item_sk: int
      ss_store_sk: int
      ss_customer_sk: int
      ss_quantity: int
      ss_ticket_number: int }

type StoreReturn =
    { sr_returned_date_sk: int
      sr_item_sk: int
      sr_customer_sk: int
      sr_ticket_number: int
      sr_return_quantity: int }

type CatalogSale =
    { cs_sold_date_sk: int
      cs_item_sk: int
      cs_bill_customer_sk: int
      cs_quantity: int }

type DateDim =
    { d_date_sk: int
      d_moy: int
      d_year: int }

type Store =
    { s_store_sk: int
      s_store_id: string
      s_store_name: string }

type Item =
    { i_item_sk: int
      i_item_id: string
      i_item_desc: string }

type StoreSale =
    { ss_sold_date_sk: int
      ss_item_sk: int
      ss_store_sk: int
      ss_customer_sk: int
      ss_quantity: int
      ss_ticket_number: int }

type StoreReturn =
    { sr_returned_date_sk: int
      sr_item_sk: int
      sr_customer_sk: int
      sr_ticket_number: int
      sr_return_quantity: int }

type CatalogSale =
    { cs_sold_date_sk: int
      cs_item_sk: int
      cs_bill_customer_sk: int
      cs_quantity: int }

type DateDim =
    { d_date_sk: int
      d_moy: int
      d_year: int }

type Store =
    { s_store_sk: int
      s_store_id: string
      s_store_name: string }

type Item =
    { i_item_sk: int
      i_item_id: string
      i_item_desc: string }

let store_sales =
    [| Map.ofList
           [ (ss_sold_date_sk, 1)
             (ss_item_sk, 1)
             (ss_store_sk, 1)
             (ss_customer_sk, 1)
             (ss_quantity, 10)
             (ss_ticket_number, 1) ] |]

let store_returns =
    [| Map.ofList
           [ (sr_returned_date_sk, 2)
             (sr_item_sk, 1)
             (sr_customer_sk, 1)
             (sr_ticket_number, 1)
             (sr_return_quantity, 2) ] |]

let catalog_sales =
    [| Map.ofList
           [ (cs_sold_date_sk, 3)
             (cs_item_sk, 1)
             (cs_bill_customer_sk, 1)
             (cs_quantity, 5) ] |]

let date_dim =
    [| Map.ofList [ (d_date_sk, 1); (d_moy, 4); (d_year, 1999) ]
       Map.ofList [ (d_date_sk, 2); (d_moy, 5); (d_year, 1999) ]
       Map.ofList [ (d_date_sk, 3); (d_moy, 5); (d_year, 2000) ] |]

let store =
    [| Map.ofList [ (s_store_sk, 1); (s_store_id, "S1"); (s_store_name, "Store1") ] |]

let item =
    [| Map.ofList [ (i_item_sk, 1); (i_item_id, "ITEM1"); (i_item_desc, "Desc1") ] |]

let _base =
    [| for ss in store_sales do
           for sr in store_returns do
               if ((ss.ss_ticket_number = sr.sr_ticket_number) && (ss.ss_item_sk = sr.sr_item_sk)) then
                   for cs in catalog_sales do
                       if ((sr.sr_customer_sk = cs.cs_bill_customer_sk) && (sr.sr_item_sk = cs.cs_item_sk)) then
                           for d1 in date_dim do
                               if (d1.d_date_sk = ss.ss_sold_date_sk) then
                                   for d2 in date_dim do
                                       if (d2.d_date_sk = sr.sr_returned_date_sk) then
                                           for d3 in date_dim do
                                               if (d3.d_date_sk = cs.cs_sold_date_sk) then
                                                   for s in store do
                                                       if (s.s_store_sk = ss.ss_store_sk) then
                                                           for i in item do
                                                               if (i.i_item_sk = ss.ss_item_sk) then
                                                                   if
                                                                       (((((d1.d_moy = 4) && (d1.d_year = 1999))
                                                                          && (d2.d_moy >= 4))
                                                                         && (d2.d_moy <= 7))
                                                                        && Array.contains
                                                                            d3.d_year
                                                                            [| 1999; 2000; 2001 |])
                                                                   then
                                                                       yield
                                                                           Map.ofList
                                                                               [ (ss_quantity, ss.ss_quantity)
                                                                                 (sr_return_quantity,
                                                                                  sr.sr_return_quantity)
                                                                                 (cs_quantity, cs.cs_quantity)
                                                                                 (i_item_id, i.i_item_id)
                                                                                 (i_item_desc, i.i_item_desc)
                                                                                 (s_store_id, s.s_store_id)
                                                                                 (s_store_name, s.s_store_name) ] |]

let result =
    _group_by _base (fun b ->
        Map.ofList
            [ (item_id, b.i_item_id)
              (item_desc, b.i_item_desc)
              (s_store_id, b.s_store_id)
              (s_store_name, b.s_store_name) ])
    |> List.map (fun g ->
        Map.ofList
            [ (i_item_id, g.key.item_id)
              (i_item_desc, g.key.item_desc)
              (s_store_id, g.key.s_store_id)
              (s_store_name, g.key.s_store_name)
              (store_sales_quantity,
               sum
                   [| for x in g do
                          yield x.ss_quantity |])
              (store_returns_quantity,
               sum
                   [| for x in g do
                          yield x.sr_return_quantity |])
              (catalog_sales_quantity,
               sum
                   [| for x in g do
                          yield x.cs_quantity |]) ])

ignore (_json result)

let test_TPCDS_Q29_quantity_summary () =
    if
        not (
            (result = [| Map.ofList
                             [ (i_item_id, "ITEM1")
                               (i_item_desc, "Desc1")
                               (s_store_id, "S1")
                               (s_store_name, "Store1")
                               (store_sales_quantity, 10)
                               (store_returns_quantity, 2)
                               (catalog_sales_quantity, 5) ] |])
        )
    then
        failwith "expect failed"

let mutable failures = 0

if not (_run_test "TPCDS Q29 quantity summary" test_TPCDS_Q29_quantity_summary) then
    failures <- failures + 1

if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
