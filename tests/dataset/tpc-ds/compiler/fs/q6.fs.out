open System

let ca_address_sk = "ca_address_sk"
let ca_state = "ca_state"
let ca_zip = "ca_zip"
let c_customer_sk = "c_customer_sk"
let c_current_addr_sk = "c_current_addr_sk"
let ss_customer_sk = "ss_customer_sk"
let ss_sold_date_sk = "ss_sold_date_sk"
let ss_item_sk = "ss_item_sk"
let d_date_sk = "d_date_sk"
let d_year = "d_year"
let d_moy = "d_moy"
let d_month_seq = "d_month_seq"
let i_item_sk = "i_item_sk"
let i_category = "i_category"
let i_current_price = "i_current_price"
let state = "state"
let cnt = "cnt"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let customer_address = [|Map.ofList [(ca_address_sk, 1); (ca_state, "CA"); (ca_zip, "12345")]|]
let customer = [|Map.ofList [(c_customer_sk, 1); (c_current_addr_sk, 1)]|]
let store_sales = [|Map.ofList [(ss_customer_sk, 1); (ss_sold_date_sk, 1); (ss_item_sk, 1)]; Map.ofList [(ss_customer_sk, 1); (ss_sold_date_sk, 1); (ss_item_sk, 1)]; Map.ofList [(ss_customer_sk, 1); (ss_sold_date_sk, 1); (ss_item_sk, 1)]; Map.ofList [(ss_customer_sk, 1); (ss_sold_date_sk, 1); (ss_item_sk, 1)]; Map.ofList [(ss_customer_sk, 1); (ss_sold_date_sk, 1); (ss_item_sk, 1)]; Map.ofList [(ss_customer_sk, 1); (ss_sold_date_sk, 1); (ss_item_sk, 1)]; Map.ofList [(ss_customer_sk, 1); (ss_sold_date_sk, 1); (ss_item_sk, 1)]; Map.ofList [(ss_customer_sk, 1); (ss_sold_date_sk, 1); (ss_item_sk, 1)]; Map.ofList [(ss_customer_sk, 1); (ss_sold_date_sk, 1); (ss_item_sk, 1)]; Map.ofList [(ss_customer_sk, 1); (ss_sold_date_sk, 1); (ss_item_sk, 1)]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_year, 1999); (d_moy, 5); (d_month_seq, 120)]|]
let item = [|Map.ofList [(i_item_sk, 1); (i_category, "A"); (i_current_price, 100.0)]; Map.ofList [(i_item_sk, 2); (i_category, "A"); (i_current_price, 50.0)]|]
let target_month_seq = _max 
    [|
    for d in date_dim do
        if ((d.d_year = 1999) && (d.d_moy = 5)) then
            yield d.d_month_seq
    |]
let result = [| for g in _group_by [|
    for a in customer_address do
        for c in customer do
            if (a.ca_address_sk = c.c_current_addr_sk) then
                for s in store_sales do
                    if (c.c_customer_sk = s.ss_customer_sk) then
                        for d in date_dim do
                            if (s.ss_sold_date_sk = d.d_date_sk) then
                                for i in item do
                                    if (s.ss_item_sk = i.i_item_sk) then
                                        if ((d.d_month_seq = target_month_seq) && (i.i_current_price > (1.2 * avg 
    [|
    for j in item do
        if (j.i_category = i.i_category) then
            yield j.i_current_price
    |]))) then
                                            yield (a, c, s, d, i)
|] (fun (a, c, s, d, i) -> a.ca_state) do let g = g if (count g >= 10) then yield ([|count g; g.key|], Map.ofList [(state, g.key); (cnt, count g)]) |] |> Array.sortBy fst |> Array.map snd |> Array.take 100
ignore (_json result)
let test_TPCDS_Q6_result() =
    if not ((result = [|Map.ofList [(state, "CA"); (cnt, 10)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q6 result" test_TPCDS_Q6_result) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
