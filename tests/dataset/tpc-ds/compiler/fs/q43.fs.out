open System

let date_sk = "date_sk"
let d_day_name = "d_day_name"
let d_year = "d_year"
let store_sk = "store_sk"
let store_id = "store_id"
let store_name = "store_name"
let gmt_offset = "gmt_offset"
let sold_date_sk = "sold_date_sk"
let sales_price = "sales_price"
let s_store_name = "s_store_name"
let s_store_id = "s_store_id"
let price = "price"
let name = "name"
let id = "id"
let sun_sales = "sun_sales"
let mon_sales = "mon_sales"
let tue_sales = "tue_sales"
let wed_sales = "wed_sales"
let thu_sales = "thu_sales"
let fri_sales = "fri_sales"
let sat_sales = "sat_sales"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let date_dim = [|Map.ofList [(date_sk, 1); (d_day_name, "Sunday"); (d_year, 2020)]; Map.ofList [(date_sk, 2); (d_day_name, "Monday"); (d_year, 2020)]; Map.ofList [(date_sk, 3); (d_day_name, "Tuesday"); (d_year, 2020)]; Map.ofList [(date_sk, 4); (d_day_name, "Wednesday"); (d_year, 2020)]; Map.ofList [(date_sk, 5); (d_day_name, "Thursday"); (d_year, 2020)]; Map.ofList [(date_sk, 6); (d_day_name, "Friday"); (d_year, 2020)]; Map.ofList [(date_sk, 7); (d_day_name, "Saturday"); (d_year, 2020)]|]
let store = [|Map.ofList [(store_sk, 1); (store_id, "S1"); (store_name, "Main"); (gmt_offset, 0)]|]
let store_sales = [|Map.ofList [(sold_date_sk, 1); (store_sk, 1); (sales_price, 10.0)]; Map.ofList [(sold_date_sk, 2); (store_sk, 1); (sales_price, 20.0)]; Map.ofList [(sold_date_sk, 3); (store_sk, 1); (sales_price, 30.0)]; Map.ofList [(sold_date_sk, 4); (store_sk, 1); (sales_price, 40.0)]; Map.ofList [(sold_date_sk, 5); (store_sk, 1); (sales_price, 50.0)]; Map.ofList [(sold_date_sk, 6); (store_sk, 1); (sales_price, 60.0)]; Map.ofList [(sold_date_sk, 7); (store_sk, 1); (sales_price, 70.0)]|]
let year = 2020
let gmt = 0
let records = 
    [|
    for d in date_dim do
        for ss in store_sales do
            if (ss.sold_date_sk = d.date_sk) then
                for s in store do
                    if (ss.store_sk = s.store_sk) then
                        if ((s.gmt_offset = gmt) && (d.d_year = year)) then
                            yield Map.ofList [(d_day_name, d.d_day_name); (s_store_name, s.store_name); (s_store_id, s.store_id); (price, ss.sales_price)]
    |]
let _base = _group_by records (fun r -> Map.ofList [(name, r.s_store_name); (id, r.s_store_id)]) |> List.map (fun g -> Map.ofList [(s_store_name, g.key.name); (s_store_id, g.key.id); (sun_sales, sum 
    [|
    for x in g do
        yield (if (x.d_day_name = "Sunday") then x.price else 0.0)
    |]); (mon_sales, sum 
    [|
    for x in g do
        yield (if (x.d_day_name = "Monday") then x.price else 0.0)
    |]); (tue_sales, sum 
    [|
    for x in g do
        yield (if (x.d_day_name = "Tuesday") then x.price else 0.0)
    |]); (wed_sales, sum 
    [|
    for x in g do
        yield (if (x.d_day_name = "Wednesday") then x.price else 0.0)
    |]); (thu_sales, sum 
    [|
    for x in g do
        yield (if (x.d_day_name = "Thursday") then x.price else 0.0)
    |]); (fri_sales, sum 
    [|
    for x in g do
        yield (if (x.d_day_name = "Friday") then x.price else 0.0)
    |]); (sat_sales, sum 
    [|
    for x in g do
        yield (if (x.d_day_name = "Saturday") then x.price else 0.0)
    |])])
let result = _base
ignore (_json result)
let test_TPCDS_Q43_simplified() =
    if not ((result = [|Map.ofList [(s_store_name, "Main"); (s_store_id, "S1"); (sun_sales, 10.0); (mon_sales, 20.0); (tue_sales, 30.0); (wed_sales, 40.0); (thu_sales, 50.0); (fri_sales, 60.0); (sat_sales, 70.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q43 simplified" test_TPCDS_Q43_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
