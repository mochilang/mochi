// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    date_sk: int
    d_day_name: string
    d_year: int
}
type Anon2 = {
    store_sk: int
    store_id: string
    store_name: string
    gmt_offset: int
}
type Anon3 = {
    sold_date_sk: int
    store_sk: int
    sales_price: float
}
type Anon4 = {
    d_day_name: string
    s_store_name: string
    s_store_id: string
    price: float
}
type Anon5 = {
    s_store_name: obj
    s_store_id: obj
    sun_sales: obj
    mon_sales: obj
    tue_sales: obj
    wed_sales: obj
    thu_sales: obj
    fri_sales: obj
    sat_sales: obj
}
type Anon6 = {
    name: string
    id: string
}
type Anon7 = {
    s_store_name: string
    s_store_id: string
    sun_sales: float
    mon_sales: float
    tue_sales: float
    wed_sales: float
    thu_sales: float
    fri_sales: float
    sat_sales: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let date_dim: Anon1 list = [{ date_sk = 1; d_day_name = "Sunday"; d_year = 2020 }; { date_sk = 2; d_day_name = "Monday"; d_year = 2020 }; { date_sk = 3; d_day_name = "Tuesday"; d_year = 2020 }; { date_sk = 4; d_day_name = "Wednesday"; d_year = 2020 }; { date_sk = 5; d_day_name = "Thursday"; d_year = 2020 }; { date_sk = 6; d_day_name = "Friday"; d_year = 2020 }; { date_sk = 7; d_day_name = "Saturday"; d_year = 2020 }]
let store: Anon2 list = [{ store_sk = 1; store_id = "S1"; store_name = "Main"; gmt_offset = 0 }]
let store_sales: Anon3 list = [{ sold_date_sk = 1; store_sk = 1; sales_price = 10.0 }; { sold_date_sk = 2; store_sk = 1; sales_price = 20.0 }; { sold_date_sk = 3; store_sk = 1; sales_price = 30.0 }; { sold_date_sk = 4; store_sk = 1; sales_price = 40.0 }; { sold_date_sk = 5; store_sk = 1; sales_price = 50.0 }; { sold_date_sk = 6; store_sk = 1; sales_price = 60.0 }; { sold_date_sk = 7; store_sk = 1; sales_price = 70.0 }]
let year: int = 2020
let gmt: int = 0
let records: Anon4 list = [ for d in date_dim do 
  for ss in store_sales do 
  for s in store do if ss.sold_date_sk = d.date_sk && ss.store_sk = s.store_sk && s.gmt_offset = gmt && d.d_year = year then yield { d_day_name = d.d_day_name; s_store_name = s.store_name; s_store_id = s.store_id; price = ss.sales_price } ]
let base: Anon5 list = [ for g in _group_by [ for r in records do yield r ] (fun r -> { name = r.s_store_name; id = r.s_store_id }) do
    yield { s_store_name = g.key.name; s_store_id = g.key.id; sun_sales = List.sum [ for x in g do yield (if x.d_day_name = "Sunday" then x.price else 0.0) ]; mon_sales = List.sum [ for x in g do yield (if x.d_day_name = "Monday" then x.price else 0.0) ]; tue_sales = List.sum [ for x in g do yield (if x.d_day_name = "Tuesday" then x.price else 0.0) ]; wed_sales = List.sum [ for x in g do yield (if x.d_day_name = "Wednesday" then x.price else 0.0) ]; thu_sales = List.sum [ for x in g do yield (if x.d_day_name = "Thursday" then x.price else 0.0) ]; fri_sales = List.sum [ for x in g do yield (if x.d_day_name = "Friday" then x.price else 0.0) ]; sat_sales = List.sum [ for x in g do yield (if x.d_day_name = "Saturday" then x.price else 0.0) ] } ]
let result: Anon5 list = base
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ s_store_name = "Main"; s_store_id = "S1"; sun_sales = 10.0; mon_sales = 20.0; tue_sales = 30.0; wed_sales = 40.0; thu_sales = 50.0; fri_sales = 60.0; sat_sales = 70.0 }])
