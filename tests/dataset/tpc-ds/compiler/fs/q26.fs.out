// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    cs_sold_date_sk: int
    cs_item_sk: int
    cs_bill_cdemo_sk: int
    cs_promo_sk: int
    cs_quantity: int
    cs_list_price: float
    cs_coupon_amt: float
    cs_sales_price: float
}
type Anon2 = {
    cd_demo_sk: int
    cd_gender: string
    cd_marital_status: string
    cd_education_status: string
}
type Anon3 = {
    d_date_sk: int
    d_year: int
}
type Anon4 = {
    i_item_sk: int
    i_item_id: string
}
type Anon5 = {
    p_promo_sk: int
    p_channel_email: string
    p_channel_event: string
}
type Anon6 = {
    i_item_id: obj
    agg1: obj
    agg2: obj
    agg3: obj
    agg4: obj
}
type Anon7 = {
    i_item_id: string
    agg1: float
    agg2: float
    agg3: float
    agg4: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

type CatalogSale = {
    mutable cs_sold_date_sk: int
    mutable cs_item_sk: int
    mutable cs_bill_cdemo_sk: int
    mutable cs_promo_sk: int
    mutable cs_quantity: int
    mutable cs_list_price: float
    mutable cs_coupon_amt: float
    mutable cs_sales_price: float
}
type CustomerDemo = {
    mutable cd_demo_sk: int
    mutable cd_gender: string
    mutable cd_marital_status: string
    mutable cd_education_status: string
}
type DateDim = {
    mutable d_date_sk: int
    mutable d_year: int
}
type Item = {
    mutable i_item_sk: int
    mutable i_item_id: string
}
type Promotion = {
    mutable p_promo_sk: int
    mutable p_channel_email: string
    mutable p_channel_event: string
}
let catalog_sales: Anon1 list = [{ cs_sold_date_sk = 1; cs_item_sk = 1; cs_bill_cdemo_sk = 1; cs_promo_sk = 1; cs_quantity = 10; cs_list_price = 100.0; cs_coupon_amt = 5.0; cs_sales_price = 95.0 }; { cs_sold_date_sk = 1; cs_item_sk = 2; cs_bill_cdemo_sk = 2; cs_promo_sk = 2; cs_quantity = 5; cs_list_price = 50.0; cs_coupon_amt = 2.0; cs_sales_price = 48.0 }]
let customer_demographics: Anon2 list = [{ cd_demo_sk = 1; cd_gender = "M"; cd_marital_status = "S"; cd_education_status = "College" }; { cd_demo_sk = 2; cd_gender = "F"; cd_marital_status = "M"; cd_education_status = "High School" }]
let date_dim: Anon3 list = [{ d_date_sk = 1; d_year = 2000 }]
let item: Anon4 list = [{ i_item_sk = 1; i_item_id = "ITEM1" }; { i_item_sk = 2; i_item_id = "ITEM2" }]
let promotion: Anon5 list = [{ p_promo_sk = 1; p_channel_email = "N"; p_channel_event = "Y" }; { p_promo_sk = 2; p_channel_email = "Y"; p_channel_event = "N" }]
let result: Anon6 list = [ for g in _group_by [ for cs in catalog_sales do 
  for cd in customer_demographics do 
  for d in date_dim do 
  for i in item do 
  for p in promotion do if cs.cs_bill_cdemo_sk = cd.cd_demo_sk && cs.cs_sold_date_sk = d.d_date_sk && cs.cs_item_sk = i.i_item_sk && cs.cs_promo_sk = p.p_promo_sk && cd.cd_gender = "M" && cd.cd_marital_status = "S" && cd.cd_education_status = "College" && (p.p_channel_email = "N" || p.p_channel_event = "N") && d.d_year = 2000 then yield (cs, cd, d, i, p) ] (fun (cs, cd, d, i, p) -> i.i_item_id) do
    yield { i_item_id = g.key; agg1 = (float (List.sum [ for x in g do yield x.cs_quantity ]) / float (List.length [ for x in g do yield x.cs_quantity ])); agg2 = (float (List.sum [ for x in g do yield x.cs_list_price ]) / float (List.length [ for x in g do yield x.cs_list_price ])); agg3 = (float (List.sum [ for x in g do yield x.cs_coupon_amt ]) / float (List.length [ for x in g do yield x.cs_coupon_amt ])); agg4 = (float (List.sum [ for x in g do yield x.cs_sales_price ]) / float (List.length [ for x in g do yield x.cs_sales_price ])) } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ i_item_id = "ITEM1"; agg1 = 10.0; agg2 = 100.0; agg3 = 5.0; agg4 = 95.0 }])
