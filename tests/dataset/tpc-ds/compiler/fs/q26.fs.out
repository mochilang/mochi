open System

let cs_sold_date_sk = "cs_sold_date_sk"
let cs_item_sk = "cs_item_sk"
let cs_bill_cdemo_sk = "cs_bill_cdemo_sk"
let cs_promo_sk = "cs_promo_sk"
let cs_quantity = "cs_quantity"
let cs_list_price = "cs_list_price"
let cs_coupon_amt = "cs_coupon_amt"
let cs_sales_price = "cs_sales_price"
let cd_demo_sk = "cd_demo_sk"
let cd_gender = "cd_gender"
let cd_marital_status = "cd_marital_status"
let cd_education_status = "cd_education_status"
let d_date_sk = "d_date_sk"
let d_year = "d_year"
let i_item_sk = "i_item_sk"
let i_item_id = "i_item_id"
let p_promo_sk = "p_promo_sk"
let p_channel_email = "p_channel_email"
let p_channel_event = "p_channel_event"
let agg1 = "agg1"
let agg2 = "agg2"
let agg3 = "agg3"
let agg4 = "agg4"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

type CatalogSale =
    {
        cs_sold_date_sk: int;
        cs_item_sk: int;
        cs_bill_cdemo_sk: int;
        cs_promo_sk: int;
        cs_quantity: int;
        cs_list_price: float;
        cs_coupon_amt: float;
        cs_sales_price: float
    }

type CustomerDemo =
    {
        cd_demo_sk: int;
        cd_gender: string;
        cd_marital_status: string;
        cd_education_status: string
    }

type DateDim =
    {
        d_date_sk: int;
        d_year: int
    }

type Item =
    {
        i_item_sk: int;
        i_item_id: string
    }

type Promotion =
    {
        p_promo_sk: int;
        p_channel_email: string;
        p_channel_event: string
    }

type CatalogSale =
    {
        cs_sold_date_sk: int;
        cs_item_sk: int;
        cs_bill_cdemo_sk: int;
        cs_promo_sk: int;
        cs_quantity: int;
        cs_list_price: float;
        cs_coupon_amt: float;
        cs_sales_price: float
    }
type CustomerDemo =
    {
        cd_demo_sk: int;
        cd_gender: string;
        cd_marital_status: string;
        cd_education_status: string
    }
type DateDim =
    {
        d_date_sk: int;
        d_year: int
    }
type Item =
    {
        i_item_sk: int;
        i_item_id: string
    }
type Promotion =
    {
        p_promo_sk: int;
        p_channel_email: string;
        p_channel_event: string
    }
let catalog_sales = [|Map.ofList [(cs_sold_date_sk, 1); (cs_item_sk, 1); (cs_bill_cdemo_sk, 1); (cs_promo_sk, 1); (cs_quantity, 10); (cs_list_price, 100.0); (cs_coupon_amt, 5.0); (cs_sales_price, 95.0)]; Map.ofList [(cs_sold_date_sk, 1); (cs_item_sk, 2); (cs_bill_cdemo_sk, 2); (cs_promo_sk, 2); (cs_quantity, 5); (cs_list_price, 50.0); (cs_coupon_amt, 2.0); (cs_sales_price, 48.0)]|]
let customer_demographics = [|Map.ofList [(cd_demo_sk, 1); (cd_gender, "M"); (cd_marital_status, "S"); (cd_education_status, "College")]; Map.ofList [(cd_demo_sk, 2); (cd_gender, "F"); (cd_marital_status, "M"); (cd_education_status, "High School")]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_year, 2000)]|]
let item = [|Map.ofList [(i_item_sk, 1); (i_item_id, "ITEM1")]; Map.ofList [(i_item_sk, 2); (i_item_id, "ITEM2")]|]
let promotion = [|Map.ofList [(p_promo_sk, 1); (p_channel_email, "N"); (p_channel_event, "Y")]; Map.ofList [(p_promo_sk, 2); (p_channel_email, "Y"); (p_channel_event, "N")]|]
let result = [| for g in _group_by [|
    for cs in catalog_sales do
        for cd in customer_demographics do
            if (cs.cs_bill_cdemo_sk = cd.cd_demo_sk) then
                for d in date_dim do
                    if (cs.cs_sold_date_sk = d.d_date_sk) then
                        for i in item do
                            if (cs.cs_item_sk = i.i_item_sk) then
                                for p in promotion do
                                    if (cs.cs_promo_sk = p.p_promo_sk) then
                                        if (((((cd.cd_gender = "M") && (cd.cd_marital_status = "S")) && (cd.cd_education_status = "College")) && (((p.p_channel_email = "N") || (p.p_channel_event = "N")))) && (d.d_year = 2000)) then
                                            yield (cs, cd, d, i, p)
|] (fun (cs, cd, d, i, p) -> i.i_item_id) do let g = g yield Map.ofList [(i_item_id, g.key); (agg1, avg 
    [|
    for x in g do
        yield x.cs_quantity
    |]); (agg2, avg 
    [|
    for x in g do
        yield x.cs_list_price
    |]); (agg3, avg 
    [|
    for x in g do
        yield x.cs_coupon_amt
    |]); (agg4, avg 
    [|
    for x in g do
        yield x.cs_sales_price
    |])] |]
ignore (_json result)
let test_TPCDS_Q26_demographic_averages() =
    if not ((result = [|Map.ofList [(i_item_id, "ITEM1"); (agg1, 10.0); (agg2, 100.0); (agg3, 5.0); (agg4, 95.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q26 demographic averages" test_TPCDS_Q26_demographic_averages) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
