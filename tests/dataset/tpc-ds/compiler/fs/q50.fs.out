// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    ticket: int
    item: int
    sold: int
    customer: int
    store: int
}
type Anon2 = {
    ticket: int
    item: int
    returned: int
    customer: int
}
type Anon3 = {
    d_date_sk: int
    d_year: int
    d_moy: int
}
type Anon4 = {
    s_store_sk: int
    s_store_name: string
    s_company_id: int
    s_street_number: string
    s_street_name: string
    s_street_type: string
    s_suite_number: string
    s_city: string
    s_county: string
    s_state: string
    s_zip: string
}
type Anon5 = {
    s: Anon4
    diff: int
}
type Anon6 = {
    s_store_name: obj
    d30: obj
    d31_60: obj
    d61_90: obj
    d91_120: obj
    d_gt_120: obj
}
type Anon7 = {
    s_store_name: string
    d30: int
    d31_60: int
    d61_90: int
    d91_120: int
    d_gt_120: int
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let store_sales: Anon1 list = [{ ticket = 1; item = 101; sold = 1; customer = 1; store = 1 }; { ticket = 2; item = 102; sold = 1; customer = 1; store = 1 }; { ticket = 3; item = 103; sold = 1; customer = 1; store = 1 }; { ticket = 4; item = 104; sold = 1; customer = 1; store = 1 }; { ticket = 5; item = 105; sold = 1; customer = 1; store = 1 }]
let store_returns: Anon2 list = [{ ticket = 1; item = 101; returned = 16; customer = 1 }; { ticket = 2; item = 102; returned = 46; customer = 1 }; { ticket = 3; item = 103; returned = 76; customer = 1 }; { ticket = 4; item = 104; returned = 111; customer = 1 }; { ticket = 5; item = 105; returned = 151; customer = 1 }]
let date_dim: Anon3 list = [{ d_date_sk = 1; d_year = 2001; d_moy = 7 }; { d_date_sk = 16; d_year = 2001; d_moy = 8 }; { d_date_sk = 46; d_year = 2001; d_moy = 8 }; { d_date_sk = 76; d_year = 2001; d_moy = 8 }; { d_date_sk = 111; d_year = 2001; d_moy = 8 }; { d_date_sk = 151; d_year = 2001; d_moy = 8 }]
let store: Anon4 list = [{ s_store_sk = 1; s_store_name = "Main"; s_company_id = 1; s_street_number = "1"; s_street_name = "Main"; s_street_type = "St"; s_suite_number = "100"; s_city = "City"; s_county = "County"; s_state = "CA"; s_zip = "12345" }]
let year: int = 2001
let month: int = 8
let joined: Anon5 list = [ for ss in store_sales do 
  for sr in store_returns do 
  for d1 in date_dim do 
  for d2 in date_dim do 
  for s in store do if ss.ticket = sr.ticket && ss.item = sr.item && ss.customer = sr.customer && ss.sold = d1.d_date_sk && sr.returned = d2.d_date_sk && d2.d_year = year && d2.d_moy = month && ss.store = s.s_store_sk then yield { s = s; diff = sr.returned - ss.sold } ]
let result: Anon6 list = [ for g in _group_by [ for j in joined do yield j ] (fun j -> j.s) do
    yield { s_store_name = g.key.s_store_name; d30 = List.length [ for x in g do if x.diff <= 30 then yield 1 ]; d31_60 = List.length [ for x in g do if x.diff > 30 && x.diff <= 60 then yield 1 ]; d61_90 = List.length [ for x in g do if x.diff > 60 && x.diff <= 90 then yield 1 ]; d91_120 = List.length [ for x in g do if x.diff > 90 && x.diff <= 120 then yield 1 ]; d_gt_120 = List.length [ for x in g do if x.diff > 120 then yield 1 ] } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ s_store_name = "Main"; d30 = 1; d31_60 = 1; d61_90 = 1; d91_120 = 1; d_gt_120 = 1 }])
