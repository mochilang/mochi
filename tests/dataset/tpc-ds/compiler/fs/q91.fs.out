open System

let cc_call_center_sk = "cc_call_center_sk"
let cc_call_center_id = "cc_call_center_id"
let cc_name = "cc_name"
let cc_manager = "cc_manager"
let cr_call_center_sk = "cr_call_center_sk"
let cr_returned_date_sk = "cr_returned_date_sk"
let cr_returning_customer_sk = "cr_returning_customer_sk"
let cr_net_loss = "cr_net_loss"
let d_date_sk = "d_date_sk"
let d_year = "d_year"
let d_moy = "d_moy"
let c_customer_sk = "c_customer_sk"
let c_current_cdemo_sk = "c_current_cdemo_sk"
let c_current_hdemo_sk = "c_current_hdemo_sk"
let c_current_addr_sk = "c_current_addr_sk"
let cd_demo_sk = "cd_demo_sk"
let cd_marital_status = "cd_marital_status"
let cd_education_status = "cd_education_status"
let hd_demo_sk = "hd_demo_sk"
let hd_buy_potential = "hd_buy_potential"
let ca_address_sk = "ca_address_sk"
let ca_gmt_offset = "ca_gmt_offset"
let Call_Center = "Call_Center"
let Call_Center_Name = "Call_Center_Name"
let Manager = "Manager"
let Returns_Loss = "Returns_Loss"
let id = "id"
let name = "name"
let mgr = "mgr"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

type CallCenter =
    {
        cc_call_center_sk: int;
        cc_call_center_id: string;
        cc_name: string;
        cc_manager: string
    }

type CatalogReturn =
    {
        cr_call_center_sk: int;
        cr_returned_date_sk: int;
        cr_returning_customer_sk: int;
        cr_net_loss: float
    }

type DateDim =
    {
        d_date_sk: int;
        d_year: int;
        d_moy: int
    }

type Customer =
    {
        c_customer_sk: int;
        c_current_cdemo_sk: int;
        c_current_hdemo_sk: int;
        c_current_addr_sk: int
    }

type CustomerAddress =
    {
        ca_address_sk: int;
        ca_gmt_offset: int
    }

type CustomerDemographics =
    {
        cd_demo_sk: int;
        cd_marital_status: string;
        cd_education_status: string
    }

type HouseholdDemographics =
    {
        hd_demo_sk: int;
        hd_buy_potential: string
    }

type CallCenter =
    {
        cc_call_center_sk: int;
        cc_call_center_id: string;
        cc_name: string;
        cc_manager: string
    }
type CatalogReturn =
    {
        cr_call_center_sk: int;
        cr_returned_date_sk: int;
        cr_returning_customer_sk: int;
        cr_net_loss: float
    }
type DateDim =
    {
        d_date_sk: int;
        d_year: int;
        d_moy: int
    }
type Customer =
    {
        c_customer_sk: int;
        c_current_cdemo_sk: int;
        c_current_hdemo_sk: int;
        c_current_addr_sk: int
    }
type CustomerAddress =
    {
        ca_address_sk: int;
        ca_gmt_offset: int
    }
type CustomerDemographics =
    {
        cd_demo_sk: int;
        cd_marital_status: string;
        cd_education_status: string
    }
type HouseholdDemographics =
    {
        hd_demo_sk: int;
        hd_buy_potential: string
    }
let call_center = [|Map.ofList [(cc_call_center_sk, 1); (cc_call_center_id, "CC1"); (cc_name, "Main"); (cc_manager, "Alice")]|]
let catalog_returns = [|Map.ofList [(cr_call_center_sk, 1); (cr_returned_date_sk, 1); (cr_returning_customer_sk, 1); (cr_net_loss, 10.0)]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_year, 2001); (d_moy, 5)]|]
let customer = [|Map.ofList [(c_customer_sk, 1); (c_current_cdemo_sk, 1); (c_current_hdemo_sk, 1); (c_current_addr_sk, 1)]|]
let customer_demographics = [|Map.ofList [(cd_demo_sk, 1); (cd_marital_status, "M"); (cd_education_status, "Unknown")]|]
let household_demographics = [|Map.ofList [(hd_demo_sk, 1); (hd_buy_potential, "1001-5000")]|]
let customer_address = [|Map.ofList [(ca_address_sk, 1); (ca_gmt_offset, (-6))]|]
let result = first ([| for g in _group_by [|
    for cc in call_center do
        for cr in catalog_returns do
            if (cc.cc_call_center_sk = cr.cr_call_center_sk) then
                for d in date_dim do
                    if (cr.cr_returned_date_sk = d.d_date_sk) then
                        for c in customer do
                            if (cr.cr_returning_customer_sk = c.c_customer_sk) then
                                for cd in customer_demographics do
                                    if (c.c_current_cdemo_sk = cd.cd_demo_sk) then
                                        for hd in household_demographics do
                                            if (c.c_current_hdemo_sk = hd.hd_demo_sk) then
                                                for ca in customer_address do
                                                    if (c.c_current_addr_sk = ca.ca_address_sk) then
                                                        if ((((((d.d_year = 2001) && (d.d_moy = 5)) && (cd.cd_marital_status = "M")) && (cd.cd_education_status = "Unknown")) && (hd.hd_buy_potential = "1001-5000")) && (ca.ca_gmt_offset = ((-6)))) then
                                                            yield (cc, cr, d, c, cd, hd, ca)
|] (fun (cc, cr, d, c, cd, hd, ca) -> Map.ofList [(id, cc.cc_call_center_id); (name, cc.cc_name); (mgr, cc.cc_manager)]) do let g = g yield Map.ofList [(Call_Center, g.key.id); (Call_Center_Name, g.key.name); (Manager, g.key.mgr); (Returns_Loss, sum 
    [|
    for x in g do
        yield x.cr_net_loss
    |])] |])
ignore (_json result)
let test_TPCDS_Q91_returns() =
    if not ((result = Map.ofList [(Call_Center, "CC1"); (Call_Center_Name, "Main"); (Manager, "Alice"); (Returns_Loss, 10.0)])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q91 returns" test_TPCDS_Q91_returns) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
