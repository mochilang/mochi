// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    cc_call_center_sk: int
    cc_call_center_id: string
    cc_name: string
    cc_manager: string
}
type Anon2 = {
    cr_call_center_sk: int
    cr_returned_date_sk: int
    cr_returning_customer_sk: int
    cr_net_loss: float
}
type Anon3 = {
    d_date_sk: int
    d_year: int
    d_moy: int
}
type Anon4 = {
    c_customer_sk: int
    c_current_cdemo_sk: int
    c_current_hdemo_sk: int
    c_current_addr_sk: int
}
type Anon5 = {
    cd_demo_sk: int
    cd_marital_status: string
    cd_education_status: string
}
type Anon6 = {
    hd_demo_sk: int
    hd_buy_potential: string
}
type Anon7 = {
    ca_address_sk: int
    ca_gmt_offset: int
}
type Anon8 = {
    Call_Center: obj
    Call_Center_Name: obj
    Manager: obj
    Returns_Loss: obj
}
type Anon9 = {
    id: string
    name: string
    mgr: string
}
type Anon10 = {
    Call_Center: string
    Call_Center_Name: string
    Manager: string
    Returns_Loss: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

type CallCenter = {
    mutable cc_call_center_sk: int
    mutable cc_call_center_id: string
    mutable cc_name: string
    mutable cc_manager: string
}
type CatalogReturn = {
    mutable cr_call_center_sk: int
    mutable cr_returned_date_sk: int
    mutable cr_returning_customer_sk: int
    mutable cr_net_loss: float
}
type DateDim = {
    mutable d_date_sk: int
    mutable d_year: int
    mutable d_moy: int
}
type Customer = {
    mutable c_customer_sk: int
    mutable c_current_cdemo_sk: int
    mutable c_current_hdemo_sk: int
    mutable c_current_addr_sk: int
}
type CustomerAddress = {
    mutable ca_address_sk: int
    mutable ca_gmt_offset: int
}
type CustomerDemographics = {
    mutable cd_demo_sk: int
    mutable cd_marital_status: string
    mutable cd_education_status: string
}
type HouseholdDemographics = {
    mutable hd_demo_sk: int
    mutable hd_buy_potential: string
}
let call_center: Anon1 list = [{ cc_call_center_sk = 1; cc_call_center_id = "CC1"; cc_name = "Main"; cc_manager = "Alice" }]
let catalog_returns: Anon2 list = [{ cr_call_center_sk = 1; cr_returned_date_sk = 1; cr_returning_customer_sk = 1; cr_net_loss = 10.0 }]
let date_dim: Anon3 list = [{ d_date_sk = 1; d_year = 2001; d_moy = 5 }]
let customer: Anon4 list = [{ c_customer_sk = 1; c_current_cdemo_sk = 1; c_current_hdemo_sk = 1; c_current_addr_sk = 1 }]
let customer_demographics: Anon5 list = [{ cd_demo_sk = 1; cd_marital_status = "M"; cd_education_status = "Unknown" }]
let household_demographics: Anon6 list = [{ hd_demo_sk = 1; hd_buy_potential = "1001-5000" }]
let customer_address: Anon7 list = [{ ca_address_sk = 1; ca_gmt_offset = -6 }]
let result: obj = first [ for g in _group_by [ for cc in call_center do 
  for cr in catalog_returns do 
  for d in date_dim do 
  for c in customer do 
  for cd in customer_demographics do 
  for hd in household_demographics do 
  for ca in customer_address do if cc.cc_call_center_sk = cr.cr_call_center_sk && cr.cr_returned_date_sk = d.d_date_sk && cr.cr_returning_customer_sk = c.c_customer_sk && c.c_current_cdemo_sk = cd.cd_demo_sk && c.c_current_hdemo_sk = hd.hd_demo_sk && c.c_current_addr_sk = ca.ca_address_sk && d.d_year = 2001 && d.d_moy = 5 && cd.cd_marital_status = "M" && cd.cd_education_status = "Unknown" && hd.hd_buy_potential = "1001-5000" && ca.ca_gmt_offset = (-6) then yield (cc, cr, d, c, cd, hd, ca) ] (fun (cc, cr, d, c, cd, hd, ca) -> { id = cc.cc_call_center_id; name = cc.cc_name; mgr = cc.cc_manager }) do
    yield { Call_Center = g.key.id; Call_Center_Name = g.key.name; Manager = g.key.mgr; Returns_Loss = List.sum [ for x in g do yield x.cr_net_loss ] } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = { Call_Center = "CC1"; Call_Center_Name = "Main"; Manager = "Alice"; Returns_Loss = 10.0 })
