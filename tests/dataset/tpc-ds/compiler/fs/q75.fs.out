open System

let d_date_sk = "d_date_sk"
let d_year = "d_year"
let ss_item_sk = "ss_item_sk"
let ss_quantity = "ss_quantity"
let ss_sales_price = "ss_sales_price"
let ss_sold_date_sk = "ss_sold_date_sk"
let ws_item_sk = "ws_item_sk"
let ws_quantity = "ws_quantity"
let ws_sales_price = "ws_sales_price"
let ws_sold_date_sk = "ws_sold_date_sk"
let cs_item_sk = "cs_item_sk"
let cs_quantity = "cs_quantity"
let cs_sales_price = "cs_sales_price"
let cs_sold_date_sk = "cs_sold_date_sk"
let i_item_sk = "i_item_sk"
let i_brand_id = "i_brand_id"
let i_class_id = "i_class_id"
let i_category_id = "i_category_id"
let i_manufact_id = "i_manufact_id"
let i_category = "i_category"
let quantity = "quantity"
let amount = "amount"
let sales_cnt = "sales_cnt"
let sales_amt = "sales_amt"
let year = "year"
let brand_id = "brand_id"
let class_id = "class_id"
let category_id = "category_id"
let manuf_id = "manuf_id"
let prev_year = "prev_year"
let prev_yr_cnt = "prev_yr_cnt"
let curr_yr_cnt = "curr_yr_cnt"
let sales_cnt_diff = "sales_cnt_diff"
let sales_amt_diff = "sales_amt_diff"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _concat (a: 'T[]) (b: 'T[]) : 'T[] =
  Array.append a b
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let date_dim = [|Map.ofList [(d_date_sk, 1); (d_year, 2000)]; Map.ofList [(d_date_sk, 2); (d_year, 2001)]|]
let store_sales = [|Map.ofList [(ss_item_sk, 1); (ss_quantity, 50); (ss_sales_price, 500.0); (ss_sold_date_sk, 1)]; Map.ofList [(ss_item_sk, 1); (ss_quantity, 40); (ss_sales_price, 400.0); (ss_sold_date_sk, 2)]|]
let web_sales = [|Map.ofList [(ws_item_sk, 1); (ws_quantity, 30); (ws_sales_price, 300.0); (ws_sold_date_sk, 1)]; Map.ofList [(ws_item_sk, 1); (ws_quantity, 25); (ws_sales_price, 250.0); (ws_sold_date_sk, 2)]|]
let catalog_sales = [|Map.ofList [(cs_item_sk, 1); (cs_quantity, 20); (cs_sales_price, 200.0); (cs_sold_date_sk, 1)]; Map.ofList [(cs_item_sk, 1); (cs_quantity, 15); (cs_sales_price, 150.0); (cs_sold_date_sk, 2)]|]
let item = [|Map.ofList [(i_item_sk, 1); (i_brand_id, 1); (i_class_id, 2); (i_category_id, 3); (i_manufact_id, 4); (i_category, "Electronics")]|]
let sales_detail = _concat _concat 
    [|
    for ss in store_sales do
        for d in date_dim do
            if (d.d_date_sk = ss.ss_sold_date_sk) then
                yield Map.ofList [(d_year, d.d_year); (i_item_sk, ss.ss_item_sk); (quantity, ss.ss_quantity); (amount, ss.ss_sales_price)]
    |] 
    [|
    for ws in web_sales do
        for d in date_dim do
            if (d.d_date_sk = ws.ws_sold_date_sk) then
                yield Map.ofList [(d_year, d.d_year); (i_item_sk, ws.ws_item_sk); (quantity, ws.ws_quantity); (amount, ws.ws_sales_price)]
    |] 
    [|
    for cs in catalog_sales do
        for d in date_dim do
            if (d.d_date_sk = cs.cs_sold_date_sk) then
                yield Map.ofList [(d_year, d.d_year); (i_item_sk, cs.cs_item_sk); (quantity, cs.cs_quantity); (amount, cs.cs_sales_price)]
    |]
let all_sales = [| for g in _group_by [|
    for sd in sales_detail do
        for i in item do
            if (i.i_item_sk = sd.i_item_sk) then
                if (i.i_category = "Electronics") then
                    yield (sd, i)
|] (fun (sd, i) -> Map.ofList [(year, sd.d_year); (brand_id, i.i_brand_id); (class_id, i.i_class_id); (category_id, i.i_category_id); (manuf_id, i.i_manufact_id)]) do let g = g yield Map.ofList [(d_year, g.key.year); (i_brand_id, g.key.brand_id); (i_class_id, g.key.class_id); (i_category_id, g.key.category_id); (i_manufact_id, g.key.manuf_id); (sales_cnt, sum 
    [|
    for x in g do
        yield x.sd.quantity
    |]); (sales_amt, sum 
    [|
    for x in g do
        yield x.sd.amount
    |])] |]
let prev_yr = first (
    [|
    for a in all_sales do
        if (a.d_year = 2000) then
            yield a
    |])
let curr_yr = first (
    [|
    for a in all_sales do
        if (a.d_year = 2001) then
            yield a
    |])
let result = (if (((curr_yr.sales_cnt / prev_yr.sales_cnt)) < 0.9) then [|Map.ofList [(prev_year, prev_yr.d_year); (year, curr_yr.d_year); (i_brand_id, curr_yr.i_brand_id); (i_class_id, curr_yr.i_class_id); (i_category_id, curr_yr.i_category_id); (i_manufact_id, curr_yr.i_manufact_id); (prev_yr_cnt, prev_yr.sales_cnt); (curr_yr_cnt, curr_yr.sales_cnt); (sales_cnt_diff, (curr_yr.sales_cnt - prev_yr.sales_cnt)); (sales_amt_diff, (curr_yr.sales_amt - prev_yr.sales_amt))]|] else [||])
ignore (_json result)
let test_TPCDS_Q75_simplified() =
    if not ((result = [|Map.ofList [(prev_year, 2000); (year, 2001); (i_brand_id, 1); (i_class_id, 2); (i_category_id, 3); (i_manufact_id, 4); (prev_yr_cnt, 100); (curr_yr_cnt, 80); (sales_cnt_diff, (-20)); (sales_amt_diff, (-200.0))]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q75 simplified" test_TPCDS_Q75_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
