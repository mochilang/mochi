open System

let ss_item_sk = "ss_item_sk"
let ss_sold_date_sk = "ss_sold_date_sk"
let ss_customer_sk = "ss_customer_sk"
let ss_quantity = "ss_quantity"
let ss_sales_price = "ss_sales_price"
let d_date_sk = "d_date_sk"
let d_year = "d_year"
let d_moy = "d_moy"
let i_item_sk = "i_item_sk"
let cs_sold_date_sk = "cs_sold_date_sk"
let cs_item_sk = "cs_item_sk"
let cs_bill_customer_sk = "cs_bill_customer_sk"
let cs_quantity = "cs_quantity"
let cs_list_price = "cs_list_price"
let ws_sold_date_sk = "ws_sold_date_sk"
let ws_item_sk = "ws_item_sk"
let ws_bill_customer_sk = "ws_bill_customer_sk"
let ws_quantity = "ws_quantity"
let ws_list_price = "ws_list_price"
let item_sk = "item_sk"
let date_sk = "date_sk"
let cust = "cust"
let sales = "sales"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

type StoreSale =
    {
        ss_item_sk: int;
        ss_sold_date_sk: int;
        ss_customer_sk: int;
        ss_quantity: int;
        ss_sales_price: float
    }

type DateDim =
    {
        d_date_sk: int;
        d_year: int;
        d_moy: int
    }

type Item =
    {
        i_item_sk: int
    }

type CatalogSale =
    {
        cs_sold_date_sk: int;
        cs_item_sk: int;
        cs_bill_customer_sk: int;
        cs_quantity: int;
        cs_list_price: float
    }

type WebSale =
    {
        ws_sold_date_sk: int;
        ws_item_sk: int;
        ws_bill_customer_sk: int;
        ws_quantity: int;
        ws_list_price: float
    }

type StoreSale =
    {
        ss_item_sk: int;
        ss_sold_date_sk: int;
        ss_customer_sk: int;
        ss_quantity: int;
        ss_sales_price: float
    }
type DateDim =
    {
        d_date_sk: int;
        d_year: int;
        d_moy: int
    }
type Item =
    {
        i_item_sk: int
    }
type CatalogSale =
    {
        cs_sold_date_sk: int;
        cs_item_sk: int;
        cs_bill_customer_sk: int;
        cs_quantity: int;
        cs_list_price: float
    }
type WebSale =
    {
        ws_sold_date_sk: int;
        ws_item_sk: int;
        ws_bill_customer_sk: int;
        ws_quantity: int;
        ws_list_price: float
    }
let store_sales = [|Map.ofList [(ss_item_sk, 1); (ss_sold_date_sk, 1); (ss_customer_sk, 1); (ss_quantity, 1); (ss_sales_price, 10.0)]; Map.ofList [(ss_item_sk, 1); (ss_sold_date_sk, 1); (ss_customer_sk, 1); (ss_quantity, 1); (ss_sales_price, 10.0)]; Map.ofList [(ss_item_sk, 1); (ss_sold_date_sk, 1); (ss_customer_sk, 1); (ss_quantity, 1); (ss_sales_price, 10.0)]; Map.ofList [(ss_item_sk, 1); (ss_sold_date_sk, 1); (ss_customer_sk, 1); (ss_quantity, 1); (ss_sales_price, 10.0)]; Map.ofList [(ss_item_sk, 1); (ss_sold_date_sk, 1); (ss_customer_sk, 1); (ss_quantity, 1); (ss_sales_price, 10.0)]; Map.ofList [(ss_item_sk, 2); (ss_sold_date_sk, 1); (ss_customer_sk, 2); (ss_quantity, 1); (ss_sales_price, 10.0)]; Map.ofList [(ss_item_sk, 2); (ss_sold_date_sk, 1); (ss_customer_sk, 2); (ss_quantity, 1); (ss_sales_price, 10.0)]; Map.ofList [(ss_item_sk, 2); (ss_sold_date_sk, 1); (ss_customer_sk, 2); (ss_quantity, 1); (ss_sales_price, 10.0)]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_year, 2000); (d_moy, 1)]|]
let item = [|Map.ofList [(i_item_sk, 1)]; Map.ofList [(i_item_sk, 2)]|]
let catalog_sales = [|Map.ofList [(cs_sold_date_sk, 1); (cs_item_sk, 1); (cs_bill_customer_sk, 1); (cs_quantity, 2); (cs_list_price, 10.0)]; Map.ofList [(cs_sold_date_sk, 1); (cs_item_sk, 2); (cs_bill_customer_sk, 2); (cs_quantity, 2); (cs_list_price, 10.0)]|]
let web_sales = [|Map.ofList [(ws_sold_date_sk, 1); (ws_item_sk, 1); (ws_bill_customer_sk, 1); (ws_quantity, 3); (ws_list_price, 10.0)]; Map.ofList [(ws_sold_date_sk, 1); (ws_item_sk, 2); (ws_bill_customer_sk, 2); (ws_quantity, 1); (ws_list_price, 10.0)]|]
let frequent_ss_items = [| for g in _group_by [|
    for ss in store_sales do
        for d in date_dim do
            if (ss.ss_sold_date_sk = d.d_date_sk) then
                for i in item do
                    if (ss.ss_item_sk = i.i_item_sk) then
                        if (d.d_year = 2000) then
                            yield (ss, d, i)
|] (fun (ss, d, i) -> Map.ofList [(item_sk, i.i_item_sk); (date_sk, d.d_date_sk)]) do let g = g if (count g > 4) then yield g.key.item_sk |]
let customer_totals = _group_by store_sales (fun ss -> ss.ss_customer_sk) |> List.map (fun g -> Map.ofList [(cust, g.key); (sales, sum 
    [|
    for x in g do
        yield (x.ss_quantity * x.ss_sales_price)
    |])])
let max_sales = _max 
    [|
    for c in customer_totals do
        yield c.sales
    |]
let best_ss_customer = 
    [|
    for c in customer_totals do
        if (c.sales > (0.95 * max_sales)) then
            yield c.cust
    |]
let catalog = 
    [|
    for cs in catalog_sales do
        for d in date_dim do
            if (cs.cs_sold_date_sk = d.d_date_sk) then
                if ((((d.d_year = 2000) && (d.d_moy = 1)) && Array.contains cs.cs_bill_customer_sk best_ss_customer) && Array.contains cs.cs_item_sk frequent_ss_items) then
                    yield (cs.cs_quantity * cs.cs_list_price)
    |]
let web = 
    [|
    for ws in web_sales do
        for d in date_dim do
            if (ws.ws_sold_date_sk = d.d_date_sk) then
                if ((((d.d_year = 2000) && (d.d_moy = 1)) && Array.contains ws.ws_bill_customer_sk best_ss_customer) && Array.contains ws.ws_item_sk frequent_ss_items) then
                    yield (ws.ws_quantity * ws.ws_list_price)
    |]
let result = (sum catalog + sum web)
ignore (_json result)
let test_TPCDS_Q23_cross_channel_sales() =
    if not ((result = 50.0)) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q23 cross-channel sales" test_TPCDS_Q23_cross_channel_sales) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
