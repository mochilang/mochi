// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    ss_item_sk: int
    ss_sold_date_sk: int
    ss_customer_sk: int
    ss_quantity: int
    ss_sales_price: float
}
type Anon2 = {
    d_date_sk: int
    d_year: int
    d_moy: int
}
type Anon3 = {
    i_item_sk: int
}
type Anon4 = {
    cs_sold_date_sk: int
    cs_item_sk: int
    cs_bill_customer_sk: int
    cs_quantity: int
    cs_list_price: float
}
type Anon5 = {
    ws_sold_date_sk: int
    ws_item_sk: int
    ws_bill_customer_sk: int
    ws_quantity: int
    ws_list_price: float
}
type Anon6 = {
    item_sk: int
    date_sk: int
}
type Anon7 = {
    cust: obj
    sales: obj
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

type StoreSale = {
    mutable ss_item_sk: int
    mutable ss_sold_date_sk: int
    mutable ss_customer_sk: int
    mutable ss_quantity: int
    mutable ss_sales_price: float
}
type DateDim = {
    mutable d_date_sk: int
    mutable d_year: int
    mutable d_moy: int
}
type Item = {
    mutable i_item_sk: int
}
type CatalogSale = {
    mutable cs_sold_date_sk: int
    mutable cs_item_sk: int
    mutable cs_bill_customer_sk: int
    mutable cs_quantity: int
    mutable cs_list_price: float
}
type WebSale = {
    mutable ws_sold_date_sk: int
    mutable ws_item_sk: int
    mutable ws_bill_customer_sk: int
    mutable ws_quantity: int
    mutable ws_list_price: float
}
let store_sales: Anon1 list = [{ ss_item_sk = 1; ss_sold_date_sk = 1; ss_customer_sk = 1; ss_quantity = 1; ss_sales_price = 10.0 }; { ss_item_sk = 1; ss_sold_date_sk = 1; ss_customer_sk = 1; ss_quantity = 1; ss_sales_price = 10.0 }; { ss_item_sk = 1; ss_sold_date_sk = 1; ss_customer_sk = 1; ss_quantity = 1; ss_sales_price = 10.0 }; { ss_item_sk = 1; ss_sold_date_sk = 1; ss_customer_sk = 1; ss_quantity = 1; ss_sales_price = 10.0 }; { ss_item_sk = 1; ss_sold_date_sk = 1; ss_customer_sk = 1; ss_quantity = 1; ss_sales_price = 10.0 }; { ss_item_sk = 2; ss_sold_date_sk = 1; ss_customer_sk = 2; ss_quantity = 1; ss_sales_price = 10.0 }; { ss_item_sk = 2; ss_sold_date_sk = 1; ss_customer_sk = 2; ss_quantity = 1; ss_sales_price = 10.0 }; { ss_item_sk = 2; ss_sold_date_sk = 1; ss_customer_sk = 2; ss_quantity = 1; ss_sales_price = 10.0 }]
let date_dim: Anon2 list = [{ d_date_sk = 1; d_year = 2000; d_moy = 1 }]
let item: Anon3 list = [{ i_item_sk = 1 }; { i_item_sk = 2 }]
let catalog_sales: Anon4 list = [{ cs_sold_date_sk = 1; cs_item_sk = 1; cs_bill_customer_sk = 1; cs_quantity = 2; cs_list_price = 10.0 }; { cs_sold_date_sk = 1; cs_item_sk = 2; cs_bill_customer_sk = 2; cs_quantity = 2; cs_list_price = 10.0 }]
let web_sales: Anon5 list = [{ ws_sold_date_sk = 1; ws_item_sk = 1; ws_bill_customer_sk = 1; ws_quantity = 3; ws_list_price = 10.0 }; { ws_sold_date_sk = 1; ws_item_sk = 2; ws_bill_customer_sk = 2; ws_quantity = 1; ws_list_price = 10.0 }]
let frequent_ss_items: obj list = [ for g in _group_by [ for ss in store_sales do 
  for d in date_dim do 
  for i in item do if ss.ss_sold_date_sk = d.d_date_sk && ss.ss_item_sk = i.i_item_sk && d.d_year = 2000 then yield (ss, d, i) ] (fun (ss, d, i) -> { item_sk = i.i_item_sk; date_sk = d.d_date_sk }) |> List.filter (fun gTmp -> let g = gTmp in List.length g.Items > 4) do
    yield g.key.item_sk ]
let customer_totals: Anon7 list = [ for g in _group_by [ for ss in store_sales do yield ss ] (fun ss -> ss.ss_customer_sk) do
    yield { cust = g.key; sales = List.sum [ for x in g do yield x.ss_quantity * x.ss_sales_price ] } ]
let max_sales: obj = List.max [ for c in customer_totals do yield c.sales ]
let best_ss_customer: obj list = [ for c in customer_totals do if c.sales > 0.95 * max_sales then yield c.cust ]
let catalog: int list = [ for cs in catalog_sales do 
  for d in date_dim do if cs.cs_sold_date_sk = d.d_date_sk && List.contains List.contains d.d_year = 2000 && d.d_moy = 1 && cs.cs_bill_customer_sk best_ss_customer && cs.cs_item_sk frequent_ss_items then yield cs.cs_quantity * cs.cs_list_price ]
let web: int list = [ for ws in web_sales do 
  for d in date_dim do if ws.ws_sold_date_sk = d.d_date_sk && List.contains List.contains d.d_year = 2000 && d.d_moy = 1 && ws.ws_bill_customer_sk best_ss_customer && ws.ws_item_sk frequent_ss_items then yield ws.ws_quantity * ws.ws_list_price ]
let result: obj = List.sum catalog + List.sum web
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = 50.0)
