open System

let cs_item_sk = "cs_item_sk"
let cs_sold_date_sk = "cs_sold_date_sk"
let cs_ext_discount_amt = "cs_ext_discount_amt"
let i_item_sk = "i_item_sk"
let i_manufact_id = "i_manufact_id"
let d_date_sk = "d_date_sk"
let d_year = "d_year"
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let catalog_sales = [|Map.ofList [(cs_item_sk, 1); (cs_sold_date_sk, 1); (cs_ext_discount_amt, 5.0)]; Map.ofList [(cs_item_sk, 1); (cs_sold_date_sk, 2); (cs_ext_discount_amt, 10.0)]; Map.ofList [(cs_item_sk, 1); (cs_sold_date_sk, 3); (cs_ext_discount_amt, 20.0)]|]
let item = [|Map.ofList [(i_item_sk, 1); (i_manufact_id, 1)]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_year, 2000)]; Map.ofList [(d_date_sk, 2); (d_year, 2000)]; Map.ofList [(d_date_sk, 3); (d_year, 2000)]|]
let filtered = 
    [|
    for cs in catalog_sales do
        for i in item do
            if (cs.cs_item_sk = i.i_item_sk) then
                for d in date_dim do
                    if (cs.cs_sold_date_sk = d.d_date_sk) then
                        if ((i.i_manufact_id = 1) && (d.d_year = 2000)) then
                            yield cs.cs_ext_discount_amt
    |]
let avg_discount = avg filtered
let result = sum 
    [|
    for x in filtered do
        if (x > (avg_discount * 1.3)) then
            yield x
    |]
ignore (_json result)
let test_TPCDS_Q32_simplified() =
    if not ((result = 20.0)) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q32 simplified" test_TPCDS_Q32_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
