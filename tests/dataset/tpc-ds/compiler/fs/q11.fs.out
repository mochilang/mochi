open System

let c_customer_sk = "c_customer_sk"
let c_customer_id = "c_customer_id"
let c_first_name = "c_first_name"
let c_last_name = "c_last_name"
let ss_customer_sk = "ss_customer_sk"
let ss_sold_date_sk = "ss_sold_date_sk"
let ss_ext_list_price = "ss_ext_list_price"
let ws_bill_customer_sk = "ws_bill_customer_sk"
let ws_sold_date_sk = "ws_sold_date_sk"
let ws_ext_list_price = "ws_ext_list_price"
let customer_id = "customer_id"
let customer_first_name = "customer_first_name"
let customer_last_name = "customer_last_name"
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

type Customer =
    {
        c_customer_sk: int;
        c_customer_id: string;
        c_first_name: string;
        c_last_name: string
    }

type StoreSale =
    {
        ss_customer_sk: int;
        ss_sold_date_sk: int;
        ss_ext_list_price: float
    }

type WebSale =
    {
        ws_bill_customer_sk: int;
        ws_sold_date_sk: int;
        ws_ext_list_price: float
    }

type Customer =
    {
        c_customer_sk: int;
        c_customer_id: string;
        c_first_name: string;
        c_last_name: string
    }
type StoreSale =
    {
        ss_customer_sk: int;
        ss_sold_date_sk: int;
        ss_ext_list_price: float
    }
type WebSale =
    {
        ws_bill_customer_sk: int;
        ws_sold_date_sk: int;
        ws_ext_list_price: float
    }
let customer = [|Map.ofList [(c_customer_sk, 1); (c_customer_id, "C1"); (c_first_name, "John"); (c_last_name, "Doe")]|]
let store_sales = [|Map.ofList [(ss_customer_sk, 1); (ss_sold_date_sk, 1998); (ss_ext_list_price, 60.0)]; Map.ofList [(ss_customer_sk, 1); (ss_sold_date_sk, 1999); (ss_ext_list_price, 90.0)]|]
let web_sales = [|Map.ofList [(ws_bill_customer_sk, 1); (ws_sold_date_sk, 1998); (ws_ext_list_price, 50.0)]; Map.ofList [(ws_bill_customer_sk, 1); (ws_sold_date_sk, 1999); (ws_ext_list_price, 150.0)]|]
let ss98 = sum 
    [|
    for ss in store_sales do
        if (ss.ss_sold_date_sk = 1998) then
            yield ss.ss_ext_list_price
    |]
let ss99 = sum 
    [|
    for ss in store_sales do
        if (ss.ss_sold_date_sk = 1999) then
            yield ss.ss_ext_list_price
    |]
let ws98 = sum 
    [|
    for ws in web_sales do
        if (ws.ws_sold_date_sk = 1998) then
            yield ws.ws_ext_list_price
    |]
let ws99 = sum 
    [|
    for ws in web_sales do
        if (ws.ws_sold_date_sk = 1999) then
            yield ws.ws_ext_list_price
    |]
let growth_ok = (((ws98 > 0) && (ss98 > 0)) && (((ws99 / ws98)) > ((ss99 / ss98))))
let result = (if growth_ok then [|Map.ofList [(customer_id, "C1"); (customer_first_name, "John"); (customer_last_name, "Doe")]|] else [||])
ignore (_json result)
let test_TPCDS_Q11_growth() =
    if not ((result = [|Map.ofList [(customer_id, "C1"); (customer_first_name, "John"); (customer_last_name, "Doe")]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q11 growth" test_TPCDS_Q11_growth) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
