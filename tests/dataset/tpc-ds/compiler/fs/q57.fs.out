// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    item: int
    call: int
    date: int
    price: float
}
type Anon2 = {
    i_item_sk: int
    i_category: string
    i_brand: string
}
type Anon3 = {
    cc_call_center_sk: int
    cc_name: string
}
type Anon4 = {
    d_date_sk: int
    d_year: int
    d_moy: int
}
type Anon5 = {
    cat: obj
    call: obj
    year: obj
    sum_sales: obj
}
type Anon6 = {
    cat: string
    call: string
    year: int
}
type Anon7 = {
    cat: obj
    call: obj
    avg_sales: obj
}
type Anon8 = {
    cat: obj
    call: obj
}
type Anon9 = {
    i_category: obj
    sum_sales: obj
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let catalog_sales: Anon1 list = [{ item = 1; call = 1; date = 1; price = 20.0 }; { item = 1; call = 1; date = 2; price = 20.0 }; { item = 1; call = 1; date = 3; price = 40.0 }]
let item: Anon2 list = [{ i_item_sk = 1; i_category = "A"; i_brand = "B" }]
let call_center: Anon3 list = [{ cc_call_center_sk = 1; cc_name = "C1" }]
let date_dim: Anon4 list = [{ d_date_sk = 1; d_year = 2000; d_moy = 11 }; { d_date_sk = 2; d_year = 2000; d_moy = 12 }; { d_date_sk = 3; d_year = 2001; d_moy = 1 }]
let abs (x) =
    if x >= 0.0 then
        x
    -x
let grouped: Anon5 list = [ for g in _group_by [ for cs in catalog_sales do 
  for i in item do 
  for d in date_dim do 
  for cc in call_center do if cs.item = i.i_item_sk && cs.date = d.d_date_sk && cs.call = cc.cc_call_center_sk then yield (cs, i, d, cc) ] (fun (cs, i, d, cc) -> { cat = i.i_category; call = cc.cc_name; year = d.d_year }) do
    yield { cat = g.key.cat; call = g.key.call; year = g.key.year; sum_sales = List.sum [ for x in g do yield x.price ] } ]
let avg_by_year: Anon7 list = [ for gg in _group_by [ for g in grouped do yield g ] (fun g -> { cat = g.cat; call = g.call }) do
    yield { cat = gg.key.cat; call = gg.key.call; avg_sales = (float (List.sum [ for x in gg do yield x.sum_sales ]) / float (List.length [ for x in gg do yield x.sum_sales ])) } ]
let result: Anon9 list = [ for g in grouped do 
  for a in avg_by_year do if g.cat = a.cat && g.call = a.call && g.year = 2001 && a.avg_sales > 0 && abs g.sum_sales - a.avg_sales / a.avg_sales > 0.1 then yield { i_category = g.cat; sum_sales = g.sum_sales } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [])
