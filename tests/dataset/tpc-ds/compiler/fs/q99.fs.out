open System

let cs_ship_date_sk = "cs_ship_date_sk"
let cs_sold_date_sk = "cs_sold_date_sk"
let cs_warehouse_sk = "cs_warehouse_sk"
let cs_ship_mode_sk = "cs_ship_mode_sk"
let cs_call_center_sk = "cs_call_center_sk"
let w_warehouse_sk = "w_warehouse_sk"
let w_warehouse_name = "w_warehouse_name"
let sm_ship_mode_sk = "sm_ship_mode_sk"
let sm_type = "sm_type"
let cc_call_center_sk = "cc_call_center_sk"
let cc_name = "cc_name"
let warehouse = "warehouse"
let d30 = "d30"
let d60 = "d60"
let d90 = "d90"
let d120 = "d120"
let dmore = "dmore"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs
let _slice_string (s: string) (i: int) (j: int) : string =
  let mutable start = i
  let mutable stop = j
  let n = s.Length
  if start < 0 then start <- start + n
  if stop < 0 then stop <- stop + n
  if start < 0 then start <- 0
  if stop > n then stop <- n
  if stop < start then stop <- start
  s.Substring(start, stop - start)

type CatalogSale =
    {
        cs_ship_date_sk: int;
        cs_sold_date_sk: int;
        cs_warehouse_sk: int;
        cs_ship_mode_sk: int;
        cs_call_center_sk: int
    }

type Warehouse =
    {
        w_warehouse_sk: int;
        w_warehouse_name: string
    }

type ShipMode =
    {
        sm_ship_mode_sk: int;
        sm_type: string
    }

type CallCenter =
    {
        cc_call_center_sk: int;
        cc_name: string
    }

type CatalogSale =
    {
        cs_ship_date_sk: int;
        cs_sold_date_sk: int;
        cs_warehouse_sk: int;
        cs_ship_mode_sk: int;
        cs_call_center_sk: int
    }
type Warehouse =
    {
        w_warehouse_sk: int;
        w_warehouse_name: string
    }
type ShipMode =
    {
        sm_ship_mode_sk: int;
        sm_type: string
    }
type CallCenter =
    {
        cc_call_center_sk: int;
        cc_name: string
    }
let catalog_sales = [|Map.ofList [(cs_ship_date_sk, 31); (cs_sold_date_sk, 1); (cs_warehouse_sk, 1); (cs_ship_mode_sk, 1); (cs_call_center_sk, 1)]; Map.ofList [(cs_ship_date_sk, 51); (cs_sold_date_sk, 1); (cs_warehouse_sk, 1); (cs_ship_mode_sk, 1); (cs_call_center_sk, 1)]; Map.ofList [(cs_ship_date_sk, 71); (cs_sold_date_sk, 1); (cs_warehouse_sk, 1); (cs_ship_mode_sk, 1); (cs_call_center_sk, 1)]; Map.ofList [(cs_ship_date_sk, 101); (cs_sold_date_sk, 1); (cs_warehouse_sk, 1); (cs_ship_mode_sk, 1); (cs_call_center_sk, 1)]; Map.ofList [(cs_ship_date_sk, 131); (cs_sold_date_sk, 1); (cs_warehouse_sk, 1); (cs_ship_mode_sk, 1); (cs_call_center_sk, 1)]|]
let warehouse = [|Map.ofList [(w_warehouse_sk, 1); (w_warehouse_name, "Warehouse1")]|]
let ship_mode = [|Map.ofList [(sm_ship_mode_sk, 1); (sm_type, "EXP")]|]
let call_center = [|Map.ofList [(cc_call_center_sk, 1); (cc_name, "CC1")]|]
let grouped = [| for g in _group_by [|
    for cs in catalog_sales do
        for w in warehouse do
            if (cs.cs_warehouse_sk = w.w_warehouse_sk) then
                for sm in ship_mode do
                    if (cs.cs_ship_mode_sk = sm.sm_ship_mode_sk) then
                        for cc in call_center do
                            if (cs.cs_call_center_sk = cc.cc_call_center_sk) then
                                yield (cs, w, sm, cc)
|] (fun (cs, w, sm, cc) -> Map.ofList [(warehouse, _slice_string w.w_warehouse_name 0 20); (sm_type, sm.sm_type); (cc_name, cc.cc_name)]) do let g = g yield Map.ofList [(warehouse, g.key.warehouse); (sm_type, g.key.sm_type); (cc_name, g.key.cc_name); (d30, count 
    [|
    for x in g do
        if ((x.cs_ship_date_sk - x.cs_sold_date_sk) <= 30) then
            yield x
    |]); (d60, count 
    [|
    for x in g do
        if (((x.cs_ship_date_sk - x.cs_sold_date_sk) > 30) && ((x.cs_ship_date_sk - x.cs_sold_date_sk) <= 60)) then
            yield x
    |]); (d90, count 
    [|
    for x in g do
        if (((x.cs_ship_date_sk - x.cs_sold_date_sk) > 60) && ((x.cs_ship_date_sk - x.cs_sold_date_sk) <= 90)) then
            yield x
    |]); (d120, count 
    [|
    for x in g do
        if (((x.cs_ship_date_sk - x.cs_sold_date_sk) > 90) && ((x.cs_ship_date_sk - x.cs_sold_date_sk) <= 120)) then
            yield x
    |]); (dmore, count 
    [|
    for x in g do
        if ((x.cs_ship_date_sk - x.cs_sold_date_sk) > 120) then
            yield x
    |])] |]
ignore (_json grouped)
let test_TPCDS_Q99_buckets() =
    if not ((grouped = [|Map.ofList [(warehouse, "Warehouse1"); (sm_type, "EXP"); (cc_name, "CC1"); (d30, 1); (d60, 1); (d90, 1); (d120, 1); (dmore, 1)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q99 buckets" test_TPCDS_Q99_buckets) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
