// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    ss_item_sk: int
    ss_list_price: float
    ss_quantity: int
    ss_sold_date_sk: int
}
type Anon2 = {
    cs_item_sk: int
    cs_list_price: float
    cs_quantity: int
    cs_sold_date_sk: int
}
type Anon3 = {
    ws_item_sk: int
    ws_list_price: float
    ws_quantity: int
    ws_sold_date_sk: int
}
type Anon4 = {
    i_item_sk: int
    i_brand_id: int
    i_class_id: int
    i_category_id: int
}
type Anon5 = {
    d_date_sk: int
    d_year: int
    d_moy: int
}
type Anon6 = {
    ss_item_sk: int
}
type Anon7 = {
    channel: string
    sales: obj
    number_sales: obj
}
type Anon8 = {
    brand_id: int
    class_id: int
    category_id: int
}
type Anon9 = {
    channel: string
    i_brand_id: int
    i_class_id: int
    i_category_id: int
    sales: obj
    number_sales: obj
}
type Anon10 = {
    channel: string
    i_brand_id: int
    i_class_id: int
    i_category_id: int
    sales: float
    number_sales: int
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

type StoreSale = {
    mutable ss_item_sk: int
    mutable ss_list_price: float
    mutable ss_quantity: int
    mutable ss_sold_date_sk: int
}
type CatalogSale = {
    mutable cs_item_sk: int
    mutable cs_list_price: float
    mutable cs_quantity: int
    mutable cs_sold_date_sk: int
}
type WebSale = {
    mutable ws_item_sk: int
    mutable ws_list_price: float
    mutable ws_quantity: int
    mutable ws_sold_date_sk: int
}
type Item = {
    mutable i_item_sk: int
    mutable i_brand_id: int
    mutable i_class_id: int
    mutable i_category_id: int
}
type DateDim = {
    mutable d_date_sk: int
    mutable d_year: int
    mutable d_moy: int
}
let store_sales: Anon1 list = [{ ss_item_sk = 1; ss_list_price = 10.0; ss_quantity = 2; ss_sold_date_sk = 1 }; { ss_item_sk = 1; ss_list_price = 20.0; ss_quantity = 3; ss_sold_date_sk = 2 }]
let catalog_sales: Anon2 list = [{ cs_item_sk = 1; cs_list_price = 10.0; cs_quantity = 2; cs_sold_date_sk = 1 }]
let web_sales: Anon3 list = [{ ws_item_sk = 1; ws_list_price = 30.0; ws_quantity = 1; ws_sold_date_sk = 1 }]
let item: Anon4 list = [{ i_item_sk = 1; i_brand_id = 1; i_class_id = 1; i_category_id = 1 }]
let date_dim: Anon5 list = [{ d_date_sk = 1; d_year = 2000; d_moy = 12 }; { d_date_sk = 2; d_year = 2002; d_moy = 11 }]
let cross_items: Anon6 list = [{ ss_item_sk = 1 }]
let avg_sales: obj = (float (List.sum [20.0; 20.0; 30.0]) / float (List.length [20.0; 20.0; 30.0]))
let store_filtered: Anon7 list = [ for g in _group_by [ for ss in store_sales do 
  for d in date_dim do if ss.ss_sold_date_sk = d.d_date_sk && d.d_year = 2002 && d.d_moy = 11 && List.contains ss.ss_item_sk ([ for ci in cross_items do yield ci.ss_item_sk ]) then yield (ss, d) ] (fun (ss, d) -> { brand_id = 1; class_id = 1; category_id = 1 }) do
    yield { channel = "store"; sales = List.sum [ for x in g do yield x.ss_quantity * x.ss_list_price ]; number_sales = List.length [ for _ in g do yield _ ] } ]
let result: Anon9 list = [ for r in store_filtered do if r.sales > avg_sales then yield { channel = r.channel; i_brand_id = 1; i_class_id = 1; i_category_id = 1; sales = r.sales; number_sales = r.number_sales } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ channel = "store"; i_brand_id = 1; i_class_id = 1; i_category_id = 1; sales = 60.0; number_sales = 1 }])
