open System

let ss_item_sk = "ss_item_sk"
let ss_list_price = "ss_list_price"
let ss_quantity = "ss_quantity"
let ss_sold_date_sk = "ss_sold_date_sk"
let cs_item_sk = "cs_item_sk"
let cs_list_price = "cs_list_price"
let cs_quantity = "cs_quantity"
let cs_sold_date_sk = "cs_sold_date_sk"
let ws_item_sk = "ws_item_sk"
let ws_list_price = "ws_list_price"
let ws_quantity = "ws_quantity"
let ws_sold_date_sk = "ws_sold_date_sk"
let i_item_sk = "i_item_sk"
let i_brand_id = "i_brand_id"
let i_class_id = "i_class_id"
let i_category_id = "i_category_id"
let d_date_sk = "d_date_sk"
let d_year = "d_year"
let d_moy = "d_moy"
let channel = "channel"
let sales = "sales"
let number_sales = "number_sales"
let brand_id = "brand_id"
let class_id = "class_id"
let category_id = "category_id"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

type StoreSale =
    {
        ss_item_sk: int;
        ss_list_price: float;
        ss_quantity: int;
        ss_sold_date_sk: int
    }

type CatalogSale =
    {
        cs_item_sk: int;
        cs_list_price: float;
        cs_quantity: int;
        cs_sold_date_sk: int
    }

type WebSale =
    {
        ws_item_sk: int;
        ws_list_price: float;
        ws_quantity: int;
        ws_sold_date_sk: int
    }

type Item =
    {
        i_item_sk: int;
        i_brand_id: int;
        i_class_id: int;
        i_category_id: int
    }

type DateDim =
    {
        d_date_sk: int;
        d_year: int;
        d_moy: int
    }

type StoreSale =
    {
        ss_item_sk: int;
        ss_list_price: float;
        ss_quantity: int;
        ss_sold_date_sk: int
    }
type CatalogSale =
    {
        cs_item_sk: int;
        cs_list_price: float;
        cs_quantity: int;
        cs_sold_date_sk: int
    }
type WebSale =
    {
        ws_item_sk: int;
        ws_list_price: float;
        ws_quantity: int;
        ws_sold_date_sk: int
    }
type Item =
    {
        i_item_sk: int;
        i_brand_id: int;
        i_class_id: int;
        i_category_id: int
    }
type DateDim =
    {
        d_date_sk: int;
        d_year: int;
        d_moy: int
    }
let store_sales = [|Map.ofList [(ss_item_sk, 1); (ss_list_price, 10.0); (ss_quantity, 2); (ss_sold_date_sk, 1)]; Map.ofList [(ss_item_sk, 1); (ss_list_price, 20.0); (ss_quantity, 3); (ss_sold_date_sk, 2)]|]
let catalog_sales = [|Map.ofList [(cs_item_sk, 1); (cs_list_price, 10.0); (cs_quantity, 2); (cs_sold_date_sk, 1)]|]
let web_sales = [|Map.ofList [(ws_item_sk, 1); (ws_list_price, 30.0); (ws_quantity, 1); (ws_sold_date_sk, 1)]|]
let item = [|Map.ofList [(i_item_sk, 1); (i_brand_id, 1); (i_class_id, 1); (i_category_id, 1)]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_year, 2000); (d_moy, 12)]; Map.ofList [(d_date_sk, 2); (d_year, 2002); (d_moy, 11)]|]
let cross_items = [|Map.ofList [(ss_item_sk, 1)]|]
let avg_sales = avg [|20.0; 20.0; 30.0|]
let store_filtered = [| for g in _group_by [|
    for ss in store_sales do
        for d in date_dim do
            if (((ss.ss_sold_date_sk = d.d_date_sk) && (d.d_year = 2002)) && (d.d_moy = 11)) then
                if Array.contains ss.ss_item_sk (
    [|
    for ci in cross_items do
        yield ci.ss_item_sk
    |]) then
                    yield (ss, d)
|] (fun (ss, d) -> Map.ofList [(brand_id, 1); (class_id, 1); (category_id, 1)]) do let g = g yield Map.ofList [(channel, "store"); (sales, sum 
    [|
    for x in g do
        yield (x.ss_quantity * x.ss_list_price)
    |]); (number_sales, count 
    [|
    for _ in g do
        yield _
    |])] |]
let result = 
    [|
    for r in store_filtered do
        if (r.sales > avg_sales) then
            yield Map.ofList [(channel, r.channel); (i_brand_id, 1); (i_class_id, 1); (i_category_id, 1); (sales, r.sales); (number_sales, r.number_sales)]
    |]
ignore (_json result)
let test_TPCDS_Q14_cross_channel() =
    if not ((result = [|Map.ofList [(channel, "store"); (i_brand_id, 1); (i_class_id, 1); (i_category_id, 1); (sales, 60.0); (number_sales, 1)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q14 cross channel" test_TPCDS_Q14_cross_channel) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
