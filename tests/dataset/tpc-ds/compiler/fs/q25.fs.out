open System

let ss_sold_date_sk = "ss_sold_date_sk"
let ss_item_sk = "ss_item_sk"
let ss_store_sk = "ss_store_sk"
let ss_customer_sk = "ss_customer_sk"
let ss_net_profit = "ss_net_profit"
let ss_ticket_number = "ss_ticket_number"
let sr_returned_date_sk = "sr_returned_date_sk"
let sr_item_sk = "sr_item_sk"
let sr_customer_sk = "sr_customer_sk"
let sr_ticket_number = "sr_ticket_number"
let sr_net_loss = "sr_net_loss"
let cs_sold_date_sk = "cs_sold_date_sk"
let cs_item_sk = "cs_item_sk"
let cs_bill_customer_sk = "cs_bill_customer_sk"
let cs_net_profit = "cs_net_profit"
let d_date_sk = "d_date_sk"
let d_moy = "d_moy"
let d_year = "d_year"
let s_store_sk = "s_store_sk"
let s_store_id = "s_store_id"
let s_store_name = "s_store_name"
let i_item_sk = "i_item_sk"
let i_item_id = "i_item_id"
let i_item_desc = "i_item_desc"
let store_sales_profit = "store_sales_profit"
let store_returns_loss = "store_returns_loss"
let catalog_sales_profit = "catalog_sales_profit"
let item_id = "item_id"
let item_desc = "item_desc"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

type StoreSale =
    {
        ss_sold_date_sk: int;
        ss_item_sk: int;
        ss_store_sk: int;
        ss_customer_sk: int;
        ss_net_profit: float;
        ss_ticket_number: int
    }

type StoreReturn =
    {
        sr_returned_date_sk: int;
        sr_item_sk: int;
        sr_customer_sk: int;
        sr_ticket_number: int;
        sr_net_loss: float
    }

type CatalogSale =
    {
        cs_sold_date_sk: int;
        cs_item_sk: int;
        cs_bill_customer_sk: int;
        cs_net_profit: float
    }

type DateDim =
    {
        d_date_sk: int;
        d_moy: int;
        d_year: int
    }

type Store =
    {
        s_store_sk: int;
        s_store_id: string;
        s_store_name: string
    }

type Item =
    {
        i_item_sk: int;
        i_item_id: string;
        i_item_desc: string
    }

type StoreSale =
    {
        ss_sold_date_sk: int;
        ss_item_sk: int;
        ss_store_sk: int;
        ss_customer_sk: int;
        ss_net_profit: float;
        ss_ticket_number: int
    }
type StoreReturn =
    {
        sr_returned_date_sk: int;
        sr_item_sk: int;
        sr_customer_sk: int;
        sr_ticket_number: int;
        sr_net_loss: float
    }
type CatalogSale =
    {
        cs_sold_date_sk: int;
        cs_item_sk: int;
        cs_bill_customer_sk: int;
        cs_net_profit: float
    }
type DateDim =
    {
        d_date_sk: int;
        d_moy: int;
        d_year: int
    }
type Store =
    {
        s_store_sk: int;
        s_store_id: string;
        s_store_name: string
    }
type Item =
    {
        i_item_sk: int;
        i_item_id: string;
        i_item_desc: string
    }
let store_sales = [|Map.ofList [(ss_sold_date_sk, 1); (ss_item_sk, 1); (ss_store_sk, 1); (ss_customer_sk, 1); (ss_net_profit, 50.0); (ss_ticket_number, 1)]; Map.ofList [(ss_sold_date_sk, 1); (ss_item_sk, 2); (ss_store_sk, 1); (ss_customer_sk, 2); (ss_net_profit, 20.0); (ss_ticket_number, 2)]|]
let store_returns = [|Map.ofList [(sr_returned_date_sk, 2); (sr_item_sk, 1); (sr_customer_sk, 1); (sr_ticket_number, 1); (sr_net_loss, 10.0)]; Map.ofList [(sr_returned_date_sk, 2); (sr_item_sk, 2); (sr_customer_sk, 2); (sr_ticket_number, 2); (sr_net_loss, 5.0)]|]
let catalog_sales = [|Map.ofList [(cs_sold_date_sk, 3); (cs_item_sk, 1); (cs_bill_customer_sk, 1); (cs_net_profit, 30.0)]; Map.ofList [(cs_sold_date_sk, 3); (cs_item_sk, 2); (cs_bill_customer_sk, 2); (cs_net_profit, 15.0)]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_moy, 4); (d_year, 2000)]; Map.ofList [(d_date_sk, 2); (d_moy, 5); (d_year, 2000)]; Map.ofList [(d_date_sk, 3); (d_moy, 6); (d_year, 2000)]|]
let store = [|Map.ofList [(s_store_sk, 1); (s_store_id, "S1"); (s_store_name, "Store1")]|]
let item = [|Map.ofList [(i_item_sk, 1); (i_item_id, "ITEM1"); (i_item_desc, "Desc1")]; Map.ofList [(i_item_sk, 2); (i_item_id, "ITEM2"); (i_item_desc, "Desc2")]|]
let result = [| for g in _group_by [|
    for ss in store_sales do
        for sr in store_returns do
            if ((ss.ss_ticket_number = sr.sr_ticket_number) && (ss.ss_item_sk = sr.sr_item_sk)) then
                for cs in catalog_sales do
                    if ((sr.sr_customer_sk = cs.cs_bill_customer_sk) && (sr.sr_item_sk = cs.cs_item_sk)) then
                        for d1 in date_dim do
                            if (d1.d_date_sk = ss.ss_sold_date_sk) then
                                for d2 in date_dim do
                                    if (d2.d_date_sk = sr.sr_returned_date_sk) then
                                        for d3 in date_dim do
                                            if (d3.d_date_sk = cs.cs_sold_date_sk) then
                                                for s in store do
                                                    if (s.s_store_sk = ss.ss_store_sk) then
                                                        for i in item do
                                                            if (i.i_item_sk = ss.ss_item_sk) then
                                                                if ((((((d1.d_moy = 4) && (d1.d_year = 2000)) && (d2.d_moy >= 4)) && (d2.d_moy <= 10)) && (d3.d_moy >= 4)) && (d3.d_moy <= 10)) then
                                                                    yield (ss, sr, cs, d1, d2, d3, s, i)
|] (fun (ss, sr, cs, d1, d2, d3, s, i) -> Map.ofList [(item_id, i.i_item_id); (item_desc, i.i_item_desc); (s_store_id, s.s_store_id); (s_store_name, s.s_store_name)]) do let g = g yield Map.ofList [(i_item_id, g.key.item_id); (i_item_desc, g.key.item_desc); (s_store_id, g.key.s_store_id); (s_store_name, g.key.s_store_name); (store_sales_profit, sum 
    [|
    for x in g do
        yield x.ss_net_profit
    |]); (store_returns_loss, sum 
    [|
    for x in g do
        yield x.sr_net_loss
    |]); (catalog_sales_profit, sum 
    [|
    for x in g do
        yield x.cs_net_profit
    |])] |]
ignore (_json result)
let test_TPCDS_Q25_aggregated_profit() =
    if not ((result = [|Map.ofList [(i_item_id, "ITEM1"); (i_item_desc, "Desc1"); (s_store_id, "S1"); (s_store_name, "Store1"); (store_sales_profit, 50.0); (store_returns_loss, 10.0); (catalog_sales_profit, 30.0)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q25 aggregated profit" test_TPCDS_Q25_aggregated_profit) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
