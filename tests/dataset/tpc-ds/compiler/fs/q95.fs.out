open System

let ws_order_number = "ws_order_number"
let ws_warehouse_sk = "ws_warehouse_sk"
let ws_ship_date_sk = "ws_ship_date_sk"
let ws_ship_addr_sk = "ws_ship_addr_sk"
let ws_web_site_sk = "ws_web_site_sk"
let ws_ext_ship_cost = "ws_ext_ship_cost"
let ws_net_profit = "ws_net_profit"
let wr_order_number = "wr_order_number"
let d_date_sk = "d_date_sk"
let d_date = "d_date"
let ca_address_sk = "ca_address_sk"
let ca_state = "ca_state"
let web_site_sk = "web_site_sk"
let web_company_name = "web_company_name"
let order_count = "order_count"
let total_shipping_cost = "total_shipping_cost"
let total_net_profit = "total_net_profit"
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

type WebSale =
    {
        ws_order_number: int;
        ws_warehouse_sk: int;
        ws_ship_date_sk: int;
        ws_ship_addr_sk: int;
        ws_web_site_sk: int;
        ws_ext_ship_cost: float;
        ws_net_profit: float
    }

type WebReturn =
    {
        wr_order_number: int
    }

type DateDim =
    {
        d_date_sk: int;
        d_date: string
    }

type CustomerAddress =
    {
        ca_address_sk: int;
        ca_state: string
    }

type WebSite =
    {
        web_site_sk: int;
        web_company_name: string
    }

exception Return_distinct of any[]
let rec distinct (xs: any[]) : any[] =
    try
        let mutable xs = xs
        let mutable out = [||]
        for x in xs do
            if (not contains out x) then
                out <- append out x
        raise (Return_distinct (out))
        failwith "unreachable"
    with Return_distinct v -> v

type WebSale =
    {
        ws_order_number: int;
        ws_warehouse_sk: int;
        ws_ship_date_sk: int;
        ws_ship_addr_sk: int;
        ws_web_site_sk: int;
        ws_ext_ship_cost: float;
        ws_net_profit: float
    }
type WebReturn =
    {
        wr_order_number: int
    }
type DateDim =
    {
        d_date_sk: int;
        d_date: string
    }
type CustomerAddress =
    {
        ca_address_sk: int;
        ca_state: string
    }
type WebSite =
    {
        web_site_sk: int;
        web_company_name: string
    }
let web_sales = [|Map.ofList [(ws_order_number, 1); (ws_warehouse_sk, 1); (ws_ship_date_sk, 1); (ws_ship_addr_sk, 1); (ws_web_site_sk, 1); (ws_ext_ship_cost, 2.0); (ws_net_profit, 5.0)]; Map.ofList [(ws_order_number, 1); (ws_warehouse_sk, 2); (ws_ship_date_sk, 1); (ws_ship_addr_sk, 1); (ws_web_site_sk, 1); (ws_ext_ship_cost, 0.0); (ws_net_profit, 0.0)]|]
let web_returns = [|Map.ofList [(wr_order_number, 1)]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_date, "2001-02-01")]|]
let customer_address = [|Map.ofList [(ca_address_sk, 1); (ca_state, "CA")]|]
let web_site = [|Map.ofList [(web_site_sk, 1); (web_company_name, "pri")]|]
let ws_wh = 
    [|
    for ws1 in web_sales do
        for ws2 in web_sales do
            if ((ws1.ws_order_number = ws2.ws_order_number) && (ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)) then
                yield Map.ofList [(ws_order_number, ws1.ws_order_number)]
    |]
let filtered = 
    [|
    for ws in web_sales do
        for d in date_dim do
            if (ws.ws_ship_date_sk = d.d_date_sk) then
                for ca in customer_address do
                    if (ws.ws_ship_addr_sk = ca.ca_address_sk) then
                        for w in web_site do
                            if (ws.ws_web_site_sk = w.web_site_sk) then
                                if ((((ca.ca_state = "CA") && (w.web_company_name = "pri")) && Array.contains ws.ws_order_number (
    [|
    for x in ws_wh do
        yield x.ws_order_number
    |])) && Array.contains ws.ws_order_number (
    [|
    for wr in web_returns do
        yield wr.wr_order_number
    |])) then
                                    yield ws
    |]
let result = Map.ofList [(order_count, distinct (
    [|
    for x in filtered do
        yield x.ws_order_number
    |]).Length); (total_shipping_cost, sum 
    [|
    for x in filtered do
        yield x.ws_ext_ship_cost
    |]); (total_net_profit, sum 
    [|
    for x in filtered do
        yield x.ws_net_profit
    |])]
ignore (_json result)
let test_TPCDS_Q95_shipping_returns() =
    if not ((result = Map.ofList [(order_count, 1); (total_shipping_cost, 2.0); (total_net_profit, 5.0)])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q95 shipping returns" test_TPCDS_Q95_shipping_returns) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
