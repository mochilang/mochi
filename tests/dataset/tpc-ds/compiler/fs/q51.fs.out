// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    item: int
    date: int
    price: float
}
type Anon2 = {
    date: obj
    cum: float
}
type Anon3 = {
    date: int
    price: float
}
type Anon4 = {
    item_sk: int
    d_date: obj
}
type Anon5 = {
    item_sk: int
    d_date: int
}
let web_sales: Anon1 list = [{ item = 1; date = 1; price = 30.0 }; { item = 1; date = 2; price = 20.0 }]
let store_sales: Anon1 list = [{ item = 1; date = 1; price = 5.0 }; { item = 1; date = 2; price = 19.0 }]
let dms: int = 1
let cumulative (xs) =
    let mutable out: obj = [||]
    let mutable acc: float = 0.0
    for x in xs do
        acc <- acc + x.price
        out <- out @ [{ date = x.date; cum = acc }]
    out
let web_cum: obj = cumulative ([ for w in web_sales do yield { date = w.date; price = w.price } ] |> List.sortBy (fun w -> w.date))
let store_cum: obj = cumulative ([ for s in store_sales do yield { date = s.date; price = s.price } ] |> List.sortBy (fun s -> s.date))
let joined: Anon4 list = [ for w in web_cum do 
  for s in store_cum do if w.date = s.date && w.cum > s.cum then yield { item_sk = 1; d_date = w.date } ]
let result: Anon4 list = joined
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ item_sk = 1; d_date = 1 }; { item_sk = 1; d_date = 2 }])
