open System

let ss_item_sk = "ss_item_sk"
let ss_store_sk = "ss_store_sk"
let ss_net_profit = "ss_net_profit"
let i_item_sk = "i_item_sk"
let i_product_name = "i_product_name"
let item_sk = "item_sk"
let avg_profit = "avg_profit"
let best_performing = "best_performing"
let worst_performing = "worst_performing"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

let store_sales = [|Map.ofList [(ss_item_sk, 1); (ss_store_sk, 1); (ss_net_profit, 5.0)]; Map.ofList [(ss_item_sk, 1); (ss_store_sk, 1); (ss_net_profit, 5.0)]; Map.ofList [(ss_item_sk, 2); (ss_store_sk, 1); (ss_net_profit, (-1.0))]|]
let item = [|Map.ofList [(i_item_sk, 1); (i_product_name, "ItemA")]; Map.ofList [(i_item_sk, 2); (i_product_name, "ItemB")]|]
let grouped_base = (_group_by store_sales (fun ss -> ss.ss_item_sk) |> List.map (fun g -> Map.ofList [(item_sk, g.key); (avg_profit, avg 
    [|
    for x in g do
        yield x.ss_net_profit
    |])]))
let grouped = grouped_base
let best = first (
    [|
    for x in grouped do
        yield ((-x.avg_profit), x)
    |]
    |> Array.sortBy fst
    |> Array.map snd)
let worst = first (
    [|
    for x in grouped do
        yield (x.avg_profit, x)
    |]
    |> Array.sortBy fst
    |> Array.map snd)
let best_name = first (
    [|
    for i in item do
        if (i.i_item_sk = best.item_sk) then
            yield i.i_product_name
    |])
let worst_name = first (
    [|
    for i in item do
        if (i.i_item_sk = worst.item_sk) then
            yield i.i_product_name
    |])
let result = Map.ofList [(best_performing, best_name); (worst_performing, worst_name)]
ignore (_json result)
let test_TPCDS_Q44_simplified() =
    if not ((result = Map.ofList [(best_performing, "ItemA"); (worst_performing, "ItemB")])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q44 simplified" test_TPCDS_Q44_simplified) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
