open System

let ss_quantity = "ss_quantity"
let ss_list_price = "ss_list_price"
let ss_coupon_amt = "ss_coupon_amt"
let ss_wholesale_cost = "ss_wholesale_cost"
let B1_LP = "B1_LP"
let B1_CNT = "B1_CNT"
let B1_CNTD = "B1_CNTD"
let B2_LP = "B2_LP"
let B2_CNT = "B2_CNT"
let B2_CNTD = "B2_CNTD"

type _Group<'T>(key: obj) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count

let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
    let groups = System.Collections.Generic.Dictionary<string, _Group<'T>>()
    let order = System.Collections.Generic.List<string>()

    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'T>>

        if groups.TryGetValue(ks, &g) then
            ()
        else
            g <- _Group<'T> (key)
            groups[ks] <- g
            order.Add(ks)

        g.Items.Add(it)

    [ for ks in order -> groups[ks] ]

let rec _to_json (v: obj) : string =
    match v with
    | null -> "null"
    | :? string as s -> "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
    | :? bool
    | :? int
    | :? int64
    | :? double -> string v
    | :? System.Collections.Generic.IDictionary<string, obj> as m ->
        m
        |> Seq.map (fun (KeyValue(k, v)) -> "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
        |> String.concat ","
        |> fun s -> "{" + s + "}"
    | :? System.Collections.IEnumerable as e ->
        e
        |> Seq.cast<obj>
        |> Seq.map _to_json
        |> String.concat ","
        |> fun s -> "[" + s + "]"
    | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""

let _json (v: obj) : unit = printfn "%s" (_to_json v)

let _run_test (name: string) (f: unit -> unit) : bool =
    printf "%s ... " name

    try
        f ()
        printfn "PASS"
        true
    with e ->
        printfn "FAIL (%s)" e.Message
        false

let inline sum (xs: seq< ^T >) : ^T = Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T = Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T: comparison = Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T: comparison = Seq.max xs
let count (xs: seq<'T>) : int = Seq.length xs

type StoreSale =
    { ss_quantity: int
      ss_list_price: float
      ss_coupon_amt: float
      ss_wholesale_cost: float }

type StoreSale =
    { ss_quantity: int
      ss_list_price: float
      ss_coupon_amt: float
      ss_wholesale_cost: float }

let store_sales =
    [| Map.ofList
           [ (ss_quantity, 3)
             (ss_list_price, 100.0)
             (ss_coupon_amt, 50.0)
             (ss_wholesale_cost, 30.0) ]
       Map.ofList
           [ (ss_quantity, 8)
             (ss_list_price, 80.0)
             (ss_coupon_amt, 10.0)
             (ss_wholesale_cost, 20.0) ]
       Map.ofList
           [ (ss_quantity, 12)
             (ss_list_price, 60.0)
             (ss_coupon_amt, 5.0)
             (ss_wholesale_cost, 15.0) ] |]

let bucket1 =
    [| for ss in store_sales do
           if
               (((ss.ss_quantity >= 0) && (ss.ss_quantity <= 5))
                && ((((((ss.ss_list_price >= 0) && (ss.ss_list_price <= 110)))
                      || (((ss.ss_coupon_amt >= 0) && (ss.ss_coupon_amt <= 1000))))
                     || (((ss.ss_wholesale_cost >= 0) && (ss.ss_wholesale_cost <= 50))))))
           then
               yield ss |]

let bucket2 =
    [| for ss in store_sales do
           if
               (((ss.ss_quantity >= 6) && (ss.ss_quantity <= 10))
                && ((((((ss.ss_list_price >= 0) && (ss.ss_list_price <= 110)))
                      || (((ss.ss_coupon_amt >= 0) && (ss.ss_coupon_amt <= 1000))))
                     || (((ss.ss_wholesale_cost >= 0) && (ss.ss_wholesale_cost <= 50))))))
           then
               yield ss |]

let result =
    Map.ofList
        [ (B1_LP,
           avg
               [| for x in bucket1 do
                      yield x.ss_list_price |])
          (B1_CNT, count bucket1)
          (B1_CNTD, count _group_by bucket1 (fun x -> x.ss_list_price) |> List.map (fun g -> g.key))
          (B2_LP,
           avg
               [| for x in bucket2 do
                      yield x.ss_list_price |])
          (B2_CNT, count bucket2)
          (B2_CNTD, count _group_by bucket2 (fun x -> x.ss_list_price) |> List.map (fun g -> g.key)) ]

ignore (_json result)

let test_TPCDS_Q28_buckets () =
    if
        not (
            (result = Map.ofList
                [ (B1_LP, 100.0)
                  (B1_CNT, 1)
                  (B1_CNTD, 1)
                  (B2_LP, 80.0)
                  (B2_CNT, 1)
                  (B2_CNTD, 1) ])
        )
    then
        failwith "expect failed"

let mutable failures = 0

if not (_run_test "TPCDS Q28 buckets" test_TPCDS_Q28_buckets) then
    failures <- failures + 1

if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
