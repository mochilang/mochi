// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    ss_quantity: int
    ss_list_price: float
    ss_coupon_amt: float
    ss_wholesale_cost: float
}
type Anon2 = {
    B1_LP: obj
    B1_CNT: obj
    B1_CNTD: obj
    B2_LP: obj
    B2_CNT: obj
    B2_CNTD: obj
}
type Anon3 = {
    B1_LP: float
    B1_CNT: int
    B1_CNTD: int
    B2_LP: float
    B2_CNT: int
    B2_CNTD: int
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

type StoreSale = {
    mutable ss_quantity: int
    mutable ss_list_price: float
    mutable ss_coupon_amt: float
    mutable ss_wholesale_cost: float
}
let store_sales: Anon1 list = [{ ss_quantity = 3; ss_list_price = 100.0; ss_coupon_amt = 50.0; ss_wholesale_cost = 30.0 }; { ss_quantity = 8; ss_list_price = 80.0; ss_coupon_amt = 10.0; ss_wholesale_cost = 20.0 }; { ss_quantity = 12; ss_list_price = 60.0; ss_coupon_amt = 5.0; ss_wholesale_cost = 15.0 }]
let bucket1: Anon1 list = [ for ss in store_sales do if ss.ss_quantity >= 0 && ss.ss_quantity <= 5 && ((ss.ss_list_price >= 0 && ss.ss_list_price <= 110) || (ss.ss_coupon_amt >= 0 && ss.ss_coupon_amt <= 1000) || (ss.ss_wholesale_cost >= 0 && ss.ss_wholesale_cost <= 50)) then yield ss ]
let bucket2: Anon1 list = [ for ss in store_sales do if ss.ss_quantity >= 6 && ss.ss_quantity <= 10 && ((ss.ss_list_price >= 0 && ss.ss_list_price <= 110) || (ss.ss_coupon_amt >= 0 && ss.ss_coupon_amt <= 1000) || (ss.ss_wholesale_cost >= 0 && ss.ss_wholesale_cost <= 50)) then yield ss ]
let result: Anon2 = { B1_LP = (float (List.sum [ for x in bucket1 do yield x.ss_list_price ]) / float (List.length [ for x in bucket1 do yield x.ss_list_price ])); B1_CNT = List.length bucket1; B1_CNTD = List.length [ for g in _group_by [ for x in bucket1 do yield x ] (fun x -> x.ss_list_price) do
    yield g.key ]; B2_LP = (float (List.sum [ for x in bucket2 do yield x.ss_list_price ]) / float (List.length [ for x in bucket2 do yield x.ss_list_price ])); B2_CNT = List.length bucket2; B2_CNTD = List.length [ for g in _group_by [ for x in bucket2 do yield x ] (fun x -> x.ss_list_price) do
    yield g.key ] }
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = { B1_LP = 100.0; B1_CNT = 1; B1_CNTD = 1; B2_LP = 80.0; B2_CNT = 1; B2_CNTD = 1 })
