// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    ss_item_sk: int
    ss_store_sk: int
    ss_sold_date_sk: int
    ss_ext_sales_price: float
    ss_net_profit: float
}
type Anon2 = {
    i_item_sk: int
    i_category: string
    i_class: string
}
type Anon3 = {
    s_store_sk: int
    s_state: string
}
type Anon4 = {
    d_date_sk: int
    d_year: int
}
type Anon5 = {
    i_category: obj
    i_class: obj
    gross_margin: obj
}
type Anon6 = {
    category: string
    ``class``: string
}
type Anon7 = {
    i_category: string
    i_class: string
    gross_margin: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

let store_sales: Anon1 list = [{ ss_item_sk = 1; ss_store_sk = 1; ss_sold_date_sk = 1; ss_ext_sales_price = 100.0; ss_net_profit = 20.0 }; { ss_item_sk = 2; ss_store_sk = 1; ss_sold_date_sk = 1; ss_ext_sales_price = 200.0; ss_net_profit = 50.0 }; { ss_item_sk = 3; ss_store_sk = 2; ss_sold_date_sk = 1; ss_ext_sales_price = 150.0; ss_net_profit = 30.0 }]
let item: Anon2 list = [{ i_item_sk = 1; i_category = "Books"; i_class = "C1" }; { i_item_sk = 2; i_category = "Books"; i_class = "C2" }; { i_item_sk = 3; i_category = "Electronics"; i_class = "C3" }]
let store: Anon3 list = [{ s_store_sk = 1; s_state = "A" }; { s_store_sk = 2; s_state = "B" }]
let date_dim: Anon4 list = [{ d_date_sk = 1; d_year = 2000 }]
let result: Anon5 list = [ for g in _group_by [ for ss in store_sales do 
  for d in date_dim do 
  for i in item do 
  for s in store do if ss.ss_sold_date_sk = d.d_date_sk && ss.ss_item_sk = i.i_item_sk && ss.ss_store_sk = s.s_store_sk && d.d_year = 2000 && (s.s_state = "A" || s.s_state = "B") then yield (ss, d, i, s) ] (fun (ss, d, i, s) -> { category = i.i_category; ``class`` = i.i_class }) |> List.sortBy (fun gTmp -> let g = gTmp in [g.key.category; g.key.class]) do
    yield { i_category = g.key.category; i_class = g.key.class; gross_margin = List.sum [ for x in g do yield x.ss_net_profit ] / List.sum [ for x in g do yield x.ss_ext_sales_price ] } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ i_category = "Books"; i_class = "C1"; gross_margin = 0.2 }; { i_category = "Books"; i_class = "C2"; gross_margin = 0.25 }; { i_category = "Electronics"; i_class = "C3"; gross_margin = 0.2 }])
