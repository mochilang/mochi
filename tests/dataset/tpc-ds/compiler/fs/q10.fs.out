open System

let c_customer_sk = "c_customer_sk"
let c_current_addr_sk = "c_current_addr_sk"
let c_current_cdemo_sk = "c_current_cdemo_sk"
let ca_address_sk = "ca_address_sk"
let ca_county = "ca_county"
let cd_demo_sk = "cd_demo_sk"
let cd_gender = "cd_gender"
let cd_marital_status = "cd_marital_status"
let cd_education_status = "cd_education_status"
let cd_purchase_estimate = "cd_purchase_estimate"
let cd_credit_rating = "cd_credit_rating"
let cd_dep_count = "cd_dep_count"
let cd_dep_employed_count = "cd_dep_employed_count"
let cd_dep_college_count = "cd_dep_college_count"
let ss_customer_sk = "ss_customer_sk"
let ss_sold_date_sk = "ss_sold_date_sk"
let d_date_sk = "d_date_sk"
let d_year = "d_year"
let d_moy = "d_moy"
let gender = "gender"
let marital = "marital"
let education = "education"
let purchase = "purchase"
let credit = "credit"
let dep = "dep"
let depemp = "depemp"
let depcol = "depcol"
let cnt1 = "cnt1"
let cnt2 = "cnt2"
let cnt3 = "cnt3"
let cnt4 = "cnt4"
let cnt5 = "cnt5"
let cnt6 = "cnt6"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

type Customer =
    {
        c_customer_sk: int;
        c_current_addr_sk: int;
        c_current_cdemo_sk: int
    }

type CustomerAddress =
    {
        ca_address_sk: int;
        ca_county: string
    }

type CustomerDemographics =
    {
        cd_demo_sk: int;
        cd_gender: string;
        cd_marital_status: string;
        cd_education_status: string;
        cd_purchase_estimate: int;
        cd_credit_rating: string;
        cd_dep_count: int;
        cd_dep_employed_count: int;
        cd_dep_college_count: int
    }

type StoreSale =
    {
        ss_customer_sk: int;
        ss_sold_date_sk: int
    }

type DateDim =
    {
        d_date_sk: int;
        d_year: int;
        d_moy: int
    }

type Customer =
    {
        c_customer_sk: int;
        c_current_addr_sk: int;
        c_current_cdemo_sk: int
    }
type CustomerAddress =
    {
        ca_address_sk: int;
        ca_county: string
    }
type CustomerDemographics =
    {
        cd_demo_sk: int;
        cd_gender: string;
        cd_marital_status: string;
        cd_education_status: string;
        cd_purchase_estimate: int;
        cd_credit_rating: string;
        cd_dep_count: int;
        cd_dep_employed_count: int;
        cd_dep_college_count: int
    }
type StoreSale =
    {
        ss_customer_sk: int;
        ss_sold_date_sk: int
    }
type DateDim =
    {
        d_date_sk: int;
        d_year: int;
        d_moy: int
    }
let customer = [|Map.ofList [(c_customer_sk, 1); (c_current_addr_sk, 1); (c_current_cdemo_sk, 1)]|]
let customer_address = [|Map.ofList [(ca_address_sk, 1); (ca_county, "CountyA")]|]
let customer_demographics = [|Map.ofList [(cd_demo_sk, 1); (cd_gender, "F"); (cd_marital_status, "M"); (cd_education_status, "College"); (cd_purchase_estimate, 5000); (cd_credit_rating, "Good"); (cd_dep_count, 1); (cd_dep_employed_count, 1); (cd_dep_college_count, 0)]|]
let store_sales = [|Map.ofList [(ss_customer_sk, 1); (ss_sold_date_sk, 1)]|]
let web_sales = [||]
let catalog_sales = [||]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_year, 2000); (d_moy, 2)]|]
let active = 
    [|
    for c in customer do
        for ca in customer_address do
            if ((c.c_current_addr_sk = ca.ca_address_sk) && (ca.ca_county = "CountyA")) then
                for cd in customer_demographics do
                    if (c.c_current_cdemo_sk = cd.cd_demo_sk) then
                        if exists (
    [|
    for ss in store_sales do
        for d in date_dim do
            if (ss.ss_sold_date_sk = d.d_date_sk) then
                if ((((ss.ss_customer_sk = c.c_customer_sk) && (d.d_year = 2000)) && (d.d_moy >= 2)) && (d.d_moy <= 5)) then
                    yield ss
    |]) then
                            yield cd
    |]
let result = _group_by active (fun a -> Map.ofList [(gender, a.cd_gender); (marital, a.cd_marital_status); (education, a.cd_education_status); (purchase, a.cd_purchase_estimate); (credit, a.cd_credit_rating); (dep, a.cd_dep_count); (depemp, a.cd_dep_employed_count); (depcol, a.cd_dep_college_count)]) |> List.map (fun g -> Map.ofList [(cd_gender, g.key.gender); (cd_marital_status, g.key.marital); (cd_education_status, g.key.education); (cnt1, count 
    [|
    for _ in g do
        yield _
    |]); (cd_purchase_estimate, g.key.purchase); (cnt2, count 
    [|
    for _ in g do
        yield _
    |]); (cd_credit_rating, g.key.credit); (cnt3, count 
    [|
    for _ in g do
        yield _
    |]); (cd_dep_count, g.key.dep); (cnt4, count 
    [|
    for _ in g do
        yield _
    |]); (cd_dep_employed_count, g.key.depemp); (cnt5, count 
    [|
    for _ in g do
        yield _
    |]); (cd_dep_college_count, g.key.depcol); (cnt6, count 
    [|
    for _ in g do
        yield _
    |])])
ignore (_json result)
let test_TPCDS_Q10_demographics_count() =
    if not ((result = [|Map.ofList [(cd_gender, "F"); (cd_marital_status, "M"); (cd_education_status, "College"); (cnt1, 1); (cd_purchase_estimate, 5000); (cnt2, 1); (cd_credit_rating, "Good"); (cnt3, 1); (cd_dep_count, 1); (cnt4, 1); (cd_dep_employed_count, 1); (cnt5, 1); (cd_dep_college_count, 0); (cnt6, 1)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q10 demographics count" test_TPCDS_Q10_demographics_count) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
