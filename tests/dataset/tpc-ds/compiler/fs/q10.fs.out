// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    c_customer_sk: int
    c_current_addr_sk: int
    c_current_cdemo_sk: int
}
type Anon2 = {
    ca_address_sk: int
    ca_county: string
}
type Anon3 = {
    cd_demo_sk: int
    cd_gender: string
    cd_marital_status: string
    cd_education_status: string
    cd_purchase_estimate: int
    cd_credit_rating: string
    cd_dep_count: int
    cd_dep_employed_count: int
    cd_dep_college_count: int
}
type Anon4 = {
    ss_customer_sk: int
    ss_sold_date_sk: int
}
type Anon5 = {
    d_date_sk: int
    d_year: int
    d_moy: int
}
type Anon6 = {
    cd_gender: obj
    cd_marital_status: obj
    cd_education_status: obj
    cnt1: obj
    cd_purchase_estimate: obj
    cnt2: obj
    cd_credit_rating: obj
    cnt3: obj
    cd_dep_count: obj
    cnt4: obj
    cd_dep_employed_count: obj
    cnt5: obj
    cd_dep_college_count: obj
    cnt6: obj
}
type Anon7 = {
    gender: string
    marital: string
    education: string
    purchase: int
    credit: string
    dep: int
    depemp: int
    depcol: int
}
type Anon8 = {
    cd_gender: string
    cd_marital_status: string
    cd_education_status: string
    cnt1: int
    cd_purchase_estimate: int
    cnt2: int
    cd_credit_rating: string
    cnt3: int
    cd_dep_count: int
    cnt4: int
    cd_dep_employed_count: int
    cnt5: int
    cd_dep_college_count: int
    cnt6: int
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

type Customer = {
    mutable c_customer_sk: int
    mutable c_current_addr_sk: int
    mutable c_current_cdemo_sk: int
}
type CustomerAddress = {
    mutable ca_address_sk: int
    mutable ca_county: string
}
type CustomerDemographics = {
    mutable cd_demo_sk: int
    mutable cd_gender: string
    mutable cd_marital_status: string
    mutable cd_education_status: string
    mutable cd_purchase_estimate: int
    mutable cd_credit_rating: string
    mutable cd_dep_count: int
    mutable cd_dep_employed_count: int
    mutable cd_dep_college_count: int
}
type StoreSale = {
    mutable ss_customer_sk: int
    mutable ss_sold_date_sk: int
}
type DateDim = {
    mutable d_date_sk: int
    mutable d_year: int
    mutable d_moy: int
}
let customer: Anon1 list = [{ c_customer_sk = 1; c_current_addr_sk = 1; c_current_cdemo_sk = 1 }]
let customer_address: Anon2 list = [{ ca_address_sk = 1; ca_county = "CountyA" }]
let customer_demographics: Anon3 list = [{ cd_demo_sk = 1; cd_gender = "F"; cd_marital_status = "M"; cd_education_status = "College"; cd_purchase_estimate = 5000; cd_credit_rating = "Good"; cd_dep_count = 1; cd_dep_employed_count = 1; cd_dep_college_count = 0 }]
let store_sales: Anon4 list = [{ ss_customer_sk = 1; ss_sold_date_sk = 1 }]
let web_sales: obj = []
let catalog_sales: obj = []
let date_dim: Anon5 list = [{ d_date_sk = 1; d_year = 2000; d_moy = 2 }]
let active: Anon3 list = [ for c in customer do 
  for ca in customer_address do 
  for cd in customer_demographics do if c.c_current_addr_sk = ca.ca_address_sk && ca.ca_county = "CountyA" && c.c_current_cdemo_sk = cd.cd_demo_sk && not (List.isEmpty [ for ss in store_sales do 
  for d in date_dim do if ss.ss_sold_date_sk = d.d_date_sk && ss.ss_customer_sk = c.c_customer_sk && d.d_year = 2000 && d.d_moy >= 2 && d.d_moy <= 5 then yield ss ]) then yield cd ]
let result: Anon6 list = [ for g in _group_by [ for a in active do yield a ] (fun a -> { gender = a.cd_gender; marital = a.cd_marital_status; education = a.cd_education_status; purchase = a.cd_purchase_estimate; credit = a.cd_credit_rating; dep = a.cd_dep_count; depemp = a.cd_dep_employed_count; depcol = a.cd_dep_college_count }) do
    yield { cd_gender = g.key.gender; cd_marital_status = g.key.marital; cd_education_status = g.key.education; cnt1 = List.length [ for _ in g do yield _ ]; cd_purchase_estimate = g.key.purchase; cnt2 = List.length [ for _ in g do yield _ ]; cd_credit_rating = g.key.credit; cnt3 = List.length [ for _ in g do yield _ ]; cd_dep_count = g.key.dep; cnt4 = List.length [ for _ in g do yield _ ]; cd_dep_employed_count = g.key.depemp; cnt5 = List.length [ for _ in g do yield _ ]; cd_dep_college_count = g.key.depcol; cnt6 = List.length [ for _ in g do yield _ ] } ]
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ cd_gender = "F"; cd_marital_status = "M"; cd_education_status = "College"; cnt1 = 1; cd_purchase_estimate = 5000; cnt2 = 1; cd_credit_rating = "Good"; cnt3 = 1; cd_dep_count = 1; cnt4 = 1; cd_dep_employed_count = 1; cnt5 = 1; cd_dep_college_count = 0; cnt6 = 1 }])
