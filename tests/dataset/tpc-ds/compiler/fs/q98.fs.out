open System

let ss_item_sk = "ss_item_sk"
let ss_sold_date_sk = "ss_sold_date_sk"
let ss_ext_sales_price = "ss_ext_sales_price"
let i_item_sk = "i_item_sk"
let i_item_id = "i_item_id"
let i_item_desc = "i_item_desc"
let i_category = "i_category"
let i_class = "i_class"
let i_current_price = "i_current_price"
let d_date_sk = "d_date_sk"
let d_date = "d_date"
let itemrevenue = "itemrevenue"
let item_id = "item_id"
let item_desc = "item_desc"
let category = "category"
let _class = "class"
let price = "price"
let total = "total"
let revenueratio = "revenueratio"
type _Group<'T>(key: obj) =
  member val key = key with get, set
  member val Items = System.Collections.Generic.List<'T>() with get
  member this.size = this.Items.Count
let _group_by (src: 'T list) (keyfn: 'T -> obj) : _Group<'T> list =
  let groups = System.Collections.Generic.Dictionary<string,_Group<'T>>()
  let order = System.Collections.Generic.List<string>()
  for it in src do
    let key = keyfn it
    let ks = string key
    let mutable g = Unchecked.defaultof<_Group<'T>>
    if groups.TryGetValue(ks, &g) then ()
    else
      g <- _Group<'T>(key)
      groups[ks] <- g
      order.Add(ks)
    g.Items.Add(it)
  [ for ks in order -> groups[ks] ]
let rec _to_json (v: obj) : string =
  match v with
  | null -> "null"
  | :? string as s ->
      "\"" + s.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
  | :? bool
  | :? int | :? int64
  | :? double -> string v
  | :? System.Collections.Generic.IDictionary<string,obj> as m ->
      m
      |> Seq.map (fun (KeyValue(k,v)) ->
          "\"" + k.Replace("\"", "\\\"") + "\":" + _to_json v)
      |> String.concat ","
      |> fun s -> "{" + s + "}"
  | :? System.Collections.IEnumerable as e ->
      e
      |> Seq.cast<obj>
      |> Seq.map _to_json
      |> String.concat ","
      |> fun s -> "[" + s + "]"
  | _ -> "\"" + v.ToString().Replace("\\", "\\\\").Replace("\"", "\\\"") + "\""
let _json (v: obj) : unit =
  printfn "%s" (_to_json v)
let _run_test (name: string) (f: unit -> unit) : bool =
  printf "%s ... " name
  try
    f()
    printfn "PASS"
    true
  with e ->
    printfn "FAIL (%s)" e.Message
    false
let inline sum (xs: seq< ^T >) : ^T =
  Seq.sum xs
let inline avg (xs: seq< ^T >) : ^T =
  Seq.average xs
let inline _min (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.min xs
let inline _max (xs: seq< ^T >) : ^T when ^T : comparison =
  Seq.max xs
let count (xs: seq<'T>) : int =
  Seq.length xs

type StoreSale =
    {
        ss_item_sk: int;
        ss_sold_date_sk: int;
        ss_ext_sales_price: float
    }

type Item =
    {
        i_item_sk: int;
        i_item_id: string;
        i_item_desc: string;
        i_category: string;
        i_class: string;
        i_current_price: float
    }

type DateDim =
    {
        d_date_sk: int;
        d_date: string
    }

type StoreSale =
    {
        ss_item_sk: int;
        ss_sold_date_sk: int;
        ss_ext_sales_price: float
    }
type Item =
    {
        i_item_sk: int;
        i_item_id: string;
        i_item_desc: string;
        i_category: string;
        i_class: string;
        i_current_price: float
    }
type DateDim =
    {
        d_date_sk: int;
        d_date: string
    }
let store_sales = [|Map.ofList [(ss_item_sk, 1); (ss_sold_date_sk, 1); (ss_ext_sales_price, 50.0)]; Map.ofList [(ss_item_sk, 2); (ss_sold_date_sk, 1); (ss_ext_sales_price, 100.0)]|]
let item = [|Map.ofList [(i_item_sk, 1); (i_item_id, "I1"); (i_item_desc, "desc1"); (i_category, "CatA"); (i_class, "Class1"); (i_current_price, 100.0)]; Map.ofList [(i_item_sk, 2); (i_item_id, "I2"); (i_item_desc, "desc2"); (i_category, "CatB"); (i_class, "Class1"); (i_current_price, 200.0)]|]
let date_dim = [|Map.ofList [(d_date_sk, 1); (d_date, "2000-02-01")]|]
let grouped = [| for g in _group_by [|
    for ss in store_sales do
        for i in item do
            if (ss.ss_item_sk = i.i_item_sk) then
                for d in date_dim do
                    if (ss.ss_sold_date_sk = d.d_date_sk) then
                        yield (ss, i, d)
|] (fun (ss, i, d) -> Map.ofList [(item_id, i.i_item_id); (item_desc, i.i_item_desc); (category, i.i_category); (_class, i.i_class); (price, i.i_current_price)]) do let g = g yield Map.ofList [(i_item_id, g.key.item_id); (i_item_desc, g.key.item_desc); (i_category, g.key.category); (i_class, g.key._class); (i_current_price, g.key.price); (itemrevenue, sum 
    [|
    for x in g do
        yield x.ss_ext_sales_price
    |])] |]
let totals = _group_by grouped (fun g -> g.i_class) |> List.map (fun cg -> Map.ofList [(_class, cg.key); (total, sum 
    [|
    for x in cg do
        yield x.itemrevenue
    |])])
let result = 
    [|
    for g in grouped do
        for t in totals do
            if (g.i_class = t._class) then
                yield Map.ofList [(i_item_id, g.i_item_id); (i_item_desc, g.i_item_desc); (i_category, g.i_category); (i_class, g.i_class); (i_current_price, g.i_current_price); (itemrevenue, g.itemrevenue); (revenueratio, ((g.itemrevenue * 100) / t.total))]
    |]
ignore (_json result)
let test_TPCDS_Q98_revenue() =
    if not ((result = [|Map.ofList [(i_item_id, "I1"); (i_item_desc, "desc1"); (i_category, "CatA"); (i_class, "Class1"); (i_current_price, 100.0); (itemrevenue, 50.0); (revenueratio, 33.333333333333336)]; Map.ofList [(i_item_id, "I2"); (i_item_desc, "desc2"); (i_category, "CatB"); (i_class, "Class1"); (i_current_price, 200.0); (itemrevenue, 100.0); (revenueratio, 66.66666666666667)]|])) then failwith "expect failed"

let mutable failures = 0
if not (_run_test "TPCDS Q98 revenue" test_TPCDS_Q98_revenue) then failures <- failures + 1
if failures > 0 then
    printfn "\n[FAIL] %d test(s) failed." failures
