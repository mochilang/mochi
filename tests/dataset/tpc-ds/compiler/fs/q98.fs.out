// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:47:09Z
open System
open System.Text.Json

type Anon1 = {
    ss_item_sk: int
    ss_sold_date_sk: int
    ss_ext_sales_price: float
}
type Anon2 = {
    i_item_sk: int
    i_item_id: string
    i_item_desc: string
    i_category: string
    i_class: string
    i_current_price: float
}
type Anon3 = {
    d_date_sk: int
    d_date: string
}
type Anon4 = {
    i_item_id: obj
    i_item_desc: obj
    i_category: obj
    i_class: obj
    i_current_price: obj
    itemrevenue: obj
}
type Anon5 = {
    item_id: string
    item_desc: string
    category: string
    ``class``: string
    price: float
}
type Anon6 = {
    ``class``: obj
    total: obj
}
type Anon7 = {
    i_item_id: obj
    i_item_desc: obj
    i_category: obj
    i_class: obj
    i_current_price: obj
    itemrevenue: obj
    revenueratio: obj
}
type Anon8 = {
    i_item_id: string
    i_item_desc: string
    i_category: string
    i_class: string
    i_current_price: float
    itemrevenue: float
    revenueratio: float
}
type _Group<'K,'T>(key: 'K) =
    member val key = key with get, set
    member val Items = System.Collections.Generic.List<'T>() with get
    member this.size = this.Items.Count
    interface System.Collections.Generic.IEnumerable<'T> with
        member this.GetEnumerator() = (this.Items :> seq<'T>).GetEnumerator()
    interface System.Collections.IEnumerable with
        member this.GetEnumerator() = (this.Items :> System.Collections.IEnumerable).GetEnumerator()

let _group_by (src: 'T list) (keyfn: 'T -> 'K) : _Group<'K,'T> list =
    let groups = System.Collections.Generic.Dictionary<string,_Group<'K,'T>>()
    let order = System.Collections.Generic.List<string>()
    for it in src do
        let key = keyfn it
        let ks = string key
        let mutable g = Unchecked.defaultof<_Group<'K,'T>>
        if groups.TryGetValue(ks, &g) then ()
        else
            g <- _Group<'K,'T>(key)
            groups.Add(ks, g)
            order.Add(ks)
        g.Items.Add(it)
    [ for ks in order -> groups[ks] ]

type StoreSale = {
    mutable ss_item_sk: int
    mutable ss_sold_date_sk: int
    mutable ss_ext_sales_price: float
}
type Item = {
    mutable i_item_sk: int
    mutable i_item_id: string
    mutable i_item_desc: string
    mutable i_category: string
    mutable i_class: string
    mutable i_current_price: float
}
type DateDim = {
    mutable d_date_sk: int
    mutable d_date: string
}
let store_sales: Anon1 list = [{ ss_item_sk = 1; ss_sold_date_sk = 1; ss_ext_sales_price = 50.0 }; { ss_item_sk = 2; ss_sold_date_sk = 1; ss_ext_sales_price = 100.0 }]
let item: Anon2 list = [{ i_item_sk = 1; i_item_id = "I1"; i_item_desc = "desc1"; i_category = "CatA"; i_class = "Class1"; i_current_price = 100.0 }; { i_item_sk = 2; i_item_id = "I2"; i_item_desc = "desc2"; i_category = "CatB"; i_class = "Class1"; i_current_price = 200.0 }]
let date_dim: Anon3 list = [{ d_date_sk = 1; d_date = "2000-02-01" }]
let grouped: Anon4 list = [ for g in _group_by [ for ss in store_sales do 
  for i in item do 
  for d in date_dim do if ss.ss_item_sk = i.i_item_sk && ss.ss_sold_date_sk = d.d_date_sk then yield (ss, i, d) ] (fun (ss, i, d) -> { item_id = i.i_item_id; item_desc = i.i_item_desc; category = i.i_category; ``class`` = i.i_class; price = i.i_current_price }) do
    yield { i_item_id = g.key.item_id; i_item_desc = g.key.item_desc; i_category = g.key.category; i_class = g.key.class; i_current_price = g.key.price; itemrevenue = List.sum [ for x in g do yield x.ss_ext_sales_price ] } ]
let totals: Anon6 list = [ for cg in _group_by [ for g in grouped do yield g ] (fun g -> g.i_class) do
    yield { ``class`` = cg.key; total = List.sum [ for x in cg do yield x.itemrevenue ] } ]
let result: Anon7 list = [ for g in grouped do 
  for t in totals do if g.i_class = t.class then yield { i_item_id = g.i_item_id; i_item_desc = g.i_item_desc; i_category = g.i_category; i_class = g.i_class; i_current_price = g.i_current_price; itemrevenue = g.itemrevenue; revenueratio = g.itemrevenue * 100 / t.total } ] |> List.sortBy (fun g -> [g.i_category; g.i_class; g.i_item_id])
printfn "%A" (JsonSerializer.Serialize(result))
assert (result = [{ i_item_id = "I1"; i_item_desc = "desc1"; i_category = "CatA"; i_class = "Class1"; i_current_price = 100.0; itemrevenue = 50.0; revenueratio = 33.333333333333336 }; { i_item_id = "I2"; i_item_desc = "desc2"; i_category = "CatB"; i_class = "Class1"; i_current_price = 200.0; itemrevenue = 100.0; revenueratio = 66.66666666666667 }])
