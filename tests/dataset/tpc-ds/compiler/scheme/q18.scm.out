(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-CatalogSale cs_quantity cs_list_price cs_coupon_amt cs_sales_price cs_net_profit cs_bill_cdemo_sk cs_bill_customer_sk cs_sold_date_sk cs_item_sk)
  (list (cons 'cs_quantity cs_quantity) (cons 'cs_list_price cs_list_price) (cons 'cs_coupon_amt cs_coupon_amt) (cons 'cs_sales_price cs_sales_price) (cons 'cs_net_profit cs_net_profit) (cons 'cs_bill_cdemo_sk cs_bill_cdemo_sk) (cons 'cs_bill_customer_sk cs_bill_customer_sk) (cons 'cs_sold_date_sk cs_sold_date_sk) (cons 'cs_item_sk cs_item_sk))
)

(define (new-CustomerDemographics cd_demo_sk cd_gender cd_education_status cd_dep_count)
  (list (cons 'cd_demo_sk cd_demo_sk) (cons 'cd_gender cd_gender) (cons 'cd_education_status cd_education_status) (cons 'cd_dep_count cd_dep_count))
)

(define (new-Customer c_customer_sk c_current_cdemo_sk c_current_addr_sk c_birth_year c_birth_month)
  (list (cons 'c_customer_sk c_customer_sk) (cons 'c_current_cdemo_sk c_current_cdemo_sk) (cons 'c_current_addr_sk c_current_addr_sk) (cons 'c_birth_year c_birth_year) (cons 'c_birth_month c_birth_month))
)

(define (new-CustomerAddress ca_address_sk ca_country ca_state ca_county)
  (list (cons 'ca_address_sk ca_address_sk) (cons 'ca_country ca_country) (cons 'ca_state ca_state) (cons 'ca_county ca_county))
)

(define (new-DateDim d_date_sk d_year)
  (list (cons 'd_date_sk d_date_sk) (cons 'd_year d_year))
)

(define (new-Item i_item_sk i_item_id)
  (list (cons 'i_item_sk i_item_sk) (cons 'i_item_id i_item_id))
)

(define (test_TPCDS_Q18_averages)
  (when (not (equal? result (list (list (cons "i_item_id" "I1") (cons "ca_country" "US") (cons "ca_state" "CA") (cons "ca_county" "County1") (cons "agg1" 1.0) (cons "agg2" 10.0) (cons "agg3" 1.0) (cons "agg4" 9.0) (cons "agg5" 2.0) (cons "agg6" 1980.0) (cons "agg7" 2.0))))) (error "expect failed"))
)

(define catalog_sales (list (list (cons "cs_quantity" 1) (cons "cs_list_price" 10.0) (cons "cs_coupon_amt" 1.0) (cons "cs_sales_price" 9.0) (cons "cs_net_profit" 2.0) (cons "cs_bill_cdemo_sk" 1) (cons "cs_bill_customer_sk" 1) (cons "cs_sold_date_sk" 1) (cons "cs_item_sk" 1))))
(define customer_demographics (list (list (cons "cd_demo_sk" 1) (cons "cd_gender" "M") (cons "cd_education_status" "College") (cons "cd_dep_count" 2)) (list (cons "cd_demo_sk" 2) (cons "cd_gender" "F") (cons "cd_education_status" "College") (cons "cd_dep_count" 2))))
(define customer (list (list (cons "c_customer_sk" 1) (cons "c_current_cdemo_sk" 2) (cons "c_current_addr_sk" 1) (cons "c_birth_year" 1980) (cons "c_birth_month" 1))))
(define customer_address (list (list (cons "ca_address_sk" 1) (cons "ca_country" "US") (cons "ca_state" "CA") (cons "ca_county" "County1"))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_year" 1999))))
(define item (list (list (cons "i_item_sk" 1) (cons "i_item_id" "I1"))))
(define joined (let ((_res '()))
  (for-each (lambda (cs)
    (for-each (lambda (cd1)
      (when (equal? (and (equal? (and (equal? (map-get cs "cs_bill_cdemo_sk") (map-get cd1 "cd_demo_sk")) (map-get cd1 "cd_gender")) "M") (map-get cd1 "cd_education_status")) "College")
        (for-each (lambda (c)
          (when (equal? (map-get cs "cs_bill_customer_sk") (map-get c "c_customer_sk"))
            (for-each (lambda (cd2)
              (when (equal? (map-get c "c_current_cdemo_sk") (map-get cd2 "cd_demo_sk"))
                (for-each (lambda (ca)
                  (when (equal? (map-get c "c_current_addr_sk") (map-get ca "ca_address_sk"))
                    (for-each (lambda (d)
                      (when (equal? (and (equal? (map-get cs "cs_sold_date_sk") (map-get d "d_date_sk")) (map-get d "d_year")) 1999)
                        (for-each (lambda (i)
                          (when (equal? (map-get cs "cs_item_sk") (map-get i "i_item_sk"))
                            (set! _res (append _res (list (list (cons "i_item_id" (map-get i "i_item_id")) (cons "ca_country" (map-get ca "ca_country")) (cons "ca_state" (map-get ca "ca_state")) (cons "ca_county" (map-get ca "ca_county")) (cons "q" (map-get cs "cs_quantity")) (cons "lp" (map-get cs "cs_list_price")) (cons "cp" (map-get cs "cs_coupon_amt")) (cons "sp" (map-get cs "cs_sales_price")) (cons "np" (map-get cs "cs_net_profit")) (cons "by" (map-get c "c_birth_year")) (cons "dep" (map-get cd1 "cd_dep_count"))))))
                          )) (if (string? item) (string->list item) item))
                      )) (if (string? date_dim) (string->list date_dim) date_dim))
                  )) (if (string? customer_address) (string->list customer_address) customer_address))
              )) (if (string? customer_demographics) (string->list customer_demographics) customer_demographics))
          )) (if (string? customer) (string->list customer) customer))
      )) (if (string? customer_demographics) (string->list customer_demographics) customer_demographics))
  ) (if (string? catalog_sales) (string->list catalog_sales) catalog_sales))
  _res))
(define result (let ((_tmp '()))
  (for-each (lambda (j)
    (set! _tmp (append _tmp (list j)))
  ) (if (string? joined) (string->list joined) joined))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "i_item_id" (map-get (map-get g "key") "i_item_id")) (cons "ca_country" (map-get (map-get g "key") "ca_country")) (cons "ca_state" (map-get (map-get g "key") "ca_state")) (cons "ca_county" (map-get (map-get g "key") "ca_county")) (cons "agg1" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "q"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "agg2" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "lp"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "agg3" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "cp"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "agg4" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "sp"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "agg5" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "np"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "agg6" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "by"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "agg7" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "dep"))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (j) (list (cons "i_item_id" (map-get j "i_item_id")) (cons "ca_country" (map-get j "ca_country")) (cons "ca_state" (map-get j "ca_state")) (cons "ca_county" (map-get j "ca_county"))))))
    _res)))
(_json result)
(run-test "TPCDS Q18 averages" test_TPCDS_Q18_averages)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
