(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-StoreSale ss_quantity ss_list_price ss_coupon_amt ss_wholesale_cost)
  (list (cons 'ss_quantity ss_quantity) (cons 'ss_list_price ss_list_price) (cons 'ss_coupon_amt ss_coupon_amt) (cons 'ss_wholesale_cost ss_wholesale_cost))
)

(define (test_TPCDS_Q28_buckets)
  (when (not (equal? result (list (cons "B1_LP" 100.0) (cons "B1_CNT" 1) (cons "B1_CNTD" 1) (cons "B2_LP" 80.0) (cons "B2_CNT" 1) (cons "B2_CNTD" 1)))) (error "expect failed"))
)

(define store_sales (list (list (cons "ss_quantity" 3) (cons "ss_list_price" 100.0) (cons "ss_coupon_amt" 50.0) (cons "ss_wholesale_cost" 30.0)) (list (cons "ss_quantity" 8) (cons "ss_list_price" 80.0) (cons "ss_coupon_amt" 10.0) (cons "ss_wholesale_cost" 20.0)) (list (cons "ss_quantity" 12) (cons "ss_list_price" 60.0) (cons "ss_coupon_amt" 5.0) (cons "ss_wholesale_cost" 15.0))))
(define bucket1 (let ((_res '()))
  (for-each (lambda (ss)
    (when (and (<= (and (>= (map-get ss "ss_quantity") 0) (map-get ss "ss_quantity")) 5) (or (or (<= (and (>= (map-get ss "ss_list_price") 0) (map-get ss "ss_list_price")) 110) (<= (and (>= (map-get ss "ss_coupon_amt") 0) (map-get ss "ss_coupon_amt")) 1000)) (<= (and (>= (map-get ss "ss_wholesale_cost") 0) (map-get ss "ss_wholesale_cost")) 50)))
      (set! _res (append _res (list ss)))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res))
(define bucket2 (let ((_res '()))
  (for-each (lambda (ss)
    (when (and (<= (and (>= (map-get ss "ss_quantity") 6) (map-get ss "ss_quantity")) 10) (or (or (<= (and (>= (map-get ss "ss_list_price") 0) (map-get ss "ss_list_price")) 110) (<= (and (>= (map-get ss "ss_coupon_amt") 0) (map-get ss "ss_coupon_amt")) 1000)) (<= (and (>= (map-get ss "ss_wholesale_cost") 0) (map-get ss "ss_wholesale_cost")) 50)))
      (set! _res (append _res (list ss)))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res))
(define result (list (cons "B1_LP" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "ss_list_price"))))
  ) (if (string? bucket1) (string->list bucket1) bucket1))
  _res))) (cons "B1_CNT" (_count bucket1)) (cons "B1_CNTD" (_count (let ((_tmp '()))
  (for-each (lambda (x)
    (set! _tmp (append _tmp (list x)))
  ) (if (string? bucket1) (string->list bucket1) bucket1))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (map-get g "key"))))
    ) (_group_by _tmp (lambda (x) (map-get x "ss_list_price"))))
    _res)))) (cons "B2_LP" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "ss_list_price"))))
  ) (if (string? bucket2) (string->list bucket2) bucket2))
  _res))) (cons "B2_CNT" (_count bucket2)) (cons "B2_CNTD" (_count (let ((_tmp '()))
  (for-each (lambda (x)
    (set! _tmp (append _tmp (list x)))
  ) (if (string? bucket2) (string->list bucket2) bucket2))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (map-get g "key"))))
    ) (_group_by _tmp (lambda (x) (map-get x "ss_list_price"))))
    _res))))))
(_json result)
(run-test "TPCDS Q28 buckets" test_TPCDS_Q28_buckets)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
