(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-Inventory inv_item_sk inv_date_sk inv_quantity_on_hand)
  (list (cons 'inv_item_sk inv_item_sk) (cons 'inv_date_sk inv_date_sk) (cons 'inv_quantity_on_hand inv_quantity_on_hand))
)

(define (new-DateDim d_date_sk d_month_seq)
  (list (cons 'd_date_sk d_date_sk) (cons 'd_month_seq d_month_seq))
)

(define (new-Item i_item_sk i_product_name i_brand i_class i_category)
  (list (cons 'i_item_sk i_item_sk) (cons 'i_product_name i_product_name) (cons 'i_brand i_brand) (cons 'i_class i_class) (cons 'i_category i_category))
)

(define (test_TPCDS_Q22_average_inventory)
  (when (not (equal? qoh (list (list (cons "i_product_name" "Prod1") (cons "i_brand" "Brand1") (cons "i_class" "Class1") (cons "i_category" "Cat1") (cons "qoh" 15.0)) (list (cons "i_product_name" "Prod2") (cons "i_brand" "Brand2") (cons "i_class" "Class2") (cons "i_category" "Cat2") (cons "qoh" 50.0))))) (error "expect failed"))
)

(define inventory (list (list (cons "inv_item_sk" 1) (cons "inv_date_sk" 1) (cons "inv_quantity_on_hand" 10)) (list (cons "inv_item_sk" 1) (cons "inv_date_sk" 2) (cons "inv_quantity_on_hand" 20)) (list (cons "inv_item_sk" 1) (cons "inv_date_sk" 3) (cons "inv_quantity_on_hand" 10)) (list (cons "inv_item_sk" 1) (cons "inv_date_sk" 4) (cons "inv_quantity_on_hand" 20)) (list (cons "inv_item_sk" 2) (cons "inv_date_sk" 1) (cons "inv_quantity_on_hand" 50))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_month_seq" 0)) (list (cons "d_date_sk" 2) (cons "d_month_seq" 1)) (list (cons "d_date_sk" 3) (cons "d_month_seq" 2)) (list (cons "d_date_sk" 4) (cons "d_month_seq" 3))))
(define item (list (list (cons "i_item_sk" 1) (cons "i_product_name" "Prod1") (cons "i_brand" "Brand1") (cons "i_class" "Class1") (cons "i_category" "Cat1")) (list (cons "i_item_sk" 2) (cons "i_product_name" "Prod2") (cons "i_brand" "Brand2") (cons "i_class" "Class2") (cons "i_category" "Cat2"))))
(define qoh (let ((_tmp '()))
  (for-each (lambda (inv)
    (for-each (lambda (d)
      (when (equal? (map-get inv "inv_date_sk") (map-get d "d_date_sk"))
        (for-each (lambda (i)
          (when (equal? (map-get inv "inv_item_sk") (map-get i "i_item_sk"))
            (when (<= (and (>= (map-get d "d_month_seq") 0) (map-get d "d_month_seq")) 11)
              (set! _tmp (append _tmp (list inv)))
            )
          )) (if (string? item) (string->list item) item))
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? inventory) (string->list inventory) inventory))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "i_product_name" (map-get (map-get g "key") "product_name")) (cons "i_brand" (map-get (map-get g "key") "brand")) (cons "i_class" (map-get (map-get g "key") "class")) (cons "i_category" (map-get (map-get g "key") "category")) (cons "qoh" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "inv_quantity_on_hand"))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (inv) (list (cons "product_name" (map-get i "i_product_name")) (cons "brand" (map-get i "i_brand")) (cons "class" (map-get i "i_class")) (cons "category" (map-get i "i_category"))))))
    _res)))
(_json qoh)
(run-test "TPCDS Q22 average inventory" test_TPCDS_Q22_average_inventory)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
