(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-StoreSale ss_sold_time_sk ss_hdemo_sk ss_store_sk)
  (list (cons 'ss_sold_time_sk ss_sold_time_sk) (cons 'ss_hdemo_sk ss_hdemo_sk) (cons 'ss_store_sk ss_store_sk))
)

(define (new-HouseholdDemographics hd_demo_sk hd_dep_count)
  (list (cons 'hd_demo_sk hd_demo_sk) (cons 'hd_dep_count hd_dep_count))
)

(define (new-TimeDim t_time_sk t_hour t_minute)
  (list (cons 't_time_sk t_time_sk) (cons 't_hour t_hour) (cons 't_minute t_minute))
)

(define (new-Store s_store_sk s_store_name)
  (list (cons 's_store_sk s_store_sk) (cons 's_store_name s_store_name))
)

(define (test_TPCDS_Q96_count)
  (when (not (equal? result 3)) (error "expect failed"))
)

(define store_sales (list (list (cons "ss_sold_time_sk" 1) (cons "ss_hdemo_sk" 1) (cons "ss_store_sk" 1)) (list (cons "ss_sold_time_sk" 1) (cons "ss_hdemo_sk" 1) (cons "ss_store_sk" 1)) (list (cons "ss_sold_time_sk" 2) (cons "ss_hdemo_sk" 1) (cons "ss_store_sk" 1))))
(define household_demographics (list (list (cons "hd_demo_sk" 1) (cons "hd_dep_count" 3))))
(define time_dim (list (list (cons "t_time_sk" 1) (cons "t_hour" 20) (cons "t_minute" 35)) (list (cons "t_time_sk" 2) (cons "t_hour" 20) (cons "t_minute" 45))))
(define store (list (list (cons "s_store_sk" 1) (cons "s_store_name" "ese"))))
(define result (_count (let ((_res '()))
  (for-each (lambda (ss)
    (for-each (lambda (hd)
      (when (equal? (map-get ss "ss_hdemo_sk") (map-get hd "hd_demo_sk"))
        (for-each (lambda (t)
          (when (equal? (map-get ss "ss_sold_time_sk") (map-get t "t_time_sk"))
            (for-each (lambda (s)
              (when (equal? (map-get ss "ss_store_sk") (map-get s "s_store_sk"))
                (when (equal? (and (equal? (and (>= (and (equal? (map-get t "t_hour") 20) (map-get t "t_minute")) 30) (map-get hd "hd_dep_count")) 3) (map-get s "s_store_name")) "ese")
                  (set! _res (append _res (list ss)))
                )
              )) (if (string? store) (string->list store) store))
          )) (if (string? time_dim) (string->list time_dim) time_dim))
      )) (if (string? household_demographics) (string->list household_demographics) household_demographics))
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res)))
(_json result)
(run-test "TPCDS Q96 count" test_TPCDS_Q96_count)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
