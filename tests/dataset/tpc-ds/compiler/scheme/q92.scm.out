(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-WebSale ws_item_sk ws_sold_date_sk ws_ext_discount_amt)
  (list (cons 'ws_item_sk ws_item_sk) (cons 'ws_sold_date_sk ws_sold_date_sk) (cons 'ws_ext_discount_amt ws_ext_discount_amt))
)

(define (test_TPCDS_Q92_threshold)
  (when (not (equal? result 4.0)) (error "expect failed"))
)

(define web_sales (list (list (cons "ws_item_sk" 1) (cons "ws_sold_date_sk" 1) (cons "ws_ext_discount_amt" 1.0)) (list (cons "ws_item_sk" 1) (cons "ws_sold_date_sk" 1) (cons "ws_ext_discount_amt" 1.0)) (list (cons "ws_item_sk" 1) (cons "ws_sold_date_sk" 1) (cons "ws_ext_discount_amt" 2.0))))
(define item (list (list (cons "i_item_sk" 1) (cons "i_manufact_id" 1))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_date" "2000-01-02"))))
(define sum_amt (_sum (let ((_res '()))
  (for-each (lambda (ws)
    (set! _res (append _res (list (map-get ws "ws_ext_discount_amt"))))
  ) (if (string? web_sales) (string->list web_sales) web_sales))
  _res)))
(define avg_amt (_avg (let ((_res '()))
  (for-each (lambda (ws)
    (set! _res (append _res (list (map-get ws "ws_ext_discount_amt"))))
  ) (if (string? web_sales) (string->list web_sales) web_sales))
  _res)))
(define result (if (* (> sum_amt avg_amt) 1.3) sum_amt 0.0))
(_json result)
(run-test "TPCDS Q92 threshold" test_TPCDS_Q92_threshold)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
