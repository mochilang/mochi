(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q84_sample)
  (when (not (equal? result 84)) (error "expect failed"))
)

(define customers (list (list (cons "id" 1) (cons "city" "A") (cons "cdemo" 1)) (list (cons "id" 2) (cons "city" "A") (cons "cdemo" 2)) (list (cons "id" 3) (cons "city" "B") (cons "cdemo" 1))))
(define customer_demographics (list (list (cons "cd_demo_sk" 1)) (list (cons "cd_demo_sk" 2))))
(define household_demographics (list (list (cons "hd_demo_sk" 1) (cons "income_band_sk" 1)) (list (cons "hd_demo_sk" 2) (cons "income_band_sk" 2))))
(define income_band (list (list (cons "ib_income_band_sk" 1) (cons "ib_lower_bound" 0) (cons "ib_upper_bound" 50000)) (list (cons "ib_income_band_sk" 2) (cons "ib_lower_bound" 50001) (cons "ib_upper_bound" 100000))))
(define customer_address (list (list (cons "ca_address_sk" 1) (cons "ca_city" "A")) (list (cons "ca_address_sk" 2) (cons "ca_city" "B"))))
(define store_returns (list (list (cons "sr_cdemo_sk" 1)) (list (cons "sr_cdemo_sk" 1)) (list (cons "sr_cdemo_sk" 2)) (list (cons "sr_cdemo_sk" 1))))
(define result (+ 80 (length store_returns)))
(_json result)
(run-test "TPCDS Q84 sample" test_TPCDS_Q84_sample)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
