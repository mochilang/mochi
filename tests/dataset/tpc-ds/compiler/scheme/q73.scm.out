(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(import (srfi 95))

(define (_fetch url opts)
  (let* ((method (if (and opts (assq 'method opts)) (cdr (assq 'method opts)) "GET"))
         (args (list "curl" "-s" "-X" method)))
    (when (and opts (assq 'headers opts))
      (for-each (lambda (p)
                  (set! args (append args (list "-H" (format "~a: ~a" (car p) (cdr p))))))
                (cdr (assq 'headers opts))))
    (when (and opts (assq 'query opts))
      (let* ((q (cdr (assq 'query opts)))
             (qs (string-join (map (lambda (p) (format "~a=~a" (car p) (cdr p))) q) "&")))
        (set! url (string-append url (if (string-contains url "?") "&" "?") qs))))
    (when (and opts (assq 'body opts))
      (set! args (append args (list "-d" (json->string (cdr (assq 'body opts)))))))
    (when (and opts (assq 'timeout opts))
      (set! args (append args (list "--max-time" (format "~a" (cdr (assq 'timeout opts)))))))
    (set! args (append args (list url)))
    (let* ((p (open-input-pipe (string-join args " ")))
           (txt (port->string p)))
      (close-input-port p)
      (string->json txt))))

(define (_load path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (in (if (or (not path) (string=? path "") (string=? path "-"))
                 (current-input-port)
                 (open-input-file path)))
         (text (port->string in)))
    (when (not (eq? in (current-input-port)))
      (close-input-port in))
    (cond ((string=? fmt "jsonl")
           (map string->json
                (filter (lambda (l) (not (string=? l "")))
                        (string-split text #\newline))))
          (else
           (let ((d (string->json text)))
             (if (list? d) d (list d)))))))

(define (_save rows path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (out (if (or (not path) (string=? path "") (string=? path "-"))
                  (current-output-port)
                  (open-output-file path))))
    (cond ((string=? fmt "jsonl")
           (for-each (lambda (r) (write-string (json->string r) out) (newline out)) rows))
          (else
           (write-string (json->string rows) out)))
    (when (not (eq? out (current-output-port)))
      (close-output-port out))))

(define (_lt a b)
  (cond
    ((and (number? a) (number? b)) (< a b))
    ((and (string? a) (string? b)) (string<? a b))
    ((and (pair? a) (pair? b))
      (cond
        ((null? a) (not (null? b)))
        ((null? b) #f)
        (else (let ((ka (car a)) (kb (car b)))
                (if (equal? ka kb)
                    (_lt (cdr a) (cdr b))
                    (_lt ka kb)))))
    )
    (else (string<? (format "~a" a) (format "~a" b)))))

(define (_sort pairs)
  (sort pairs (lambda (a b) (_lt (cdr a) (cdr b)))))
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q73_simplified)
  (when (not (equal? result (list (list (cons "c_last_name" "Smith") (cons "c_first_name" "Alice") (cons "c_salutation" "Ms.") (cons "c_preferred_cust_flag" "Y") (cons "ss_ticket_number" 1) (cons "cnt" 1))))) (error "expect failed"))
)

(define store_sales (list (list (cons "ss_ticket_number" 1) (cons "ss_customer_sk" 1) (cons "ss_sold_date_sk" 1) (cons "ss_store_sk" 1) (cons "ss_hdemo_sk" 1))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_dom" 1) (cons "d_year" 1998))))
(define store (list (list (cons "s_store_sk" 1) (cons "s_county" "A"))))
(define household_demographics (list (list (cons "hd_demo_sk" 1) (cons "hd_buy_potential" "1001-5000") (cons "hd_vehicle_count" 2) (cons "hd_dep_count" 3))))
(define customer (list (list (cons "c_customer_sk" 1) (cons "c_last_name" "Smith") (cons "c_first_name" "Alice") (cons "c_salutation" "Ms.") (cons "c_preferred_cust_flag" "Y"))))
(define groups (let ((_tmp '()))
  (for-each (lambda (ss)
    (for-each (lambda (d)
      (when (equal? (map-get d "d_date_sk") (map-get ss "ss_sold_date_sk"))
        (for-each (lambda (s)
          (when (equal? (map-get s "s_store_sk") (map-get ss "ss_store_sk"))
            (for-each (lambda (hd)
              (when (equal? (map-get hd "hd_demo_sk") (map-get ss "ss_hdemo_sk"))
                (when (equal? (and (and (> (/ (and (> (and (and (<= (and (>= (map-get d "d_dom") 1) (map-get d "d_dom")) 2) (equal? (or (equal? (map-get hd "hd_buy_potential") "1001-5000") (map-get hd "hd_buy_potential")) "0-500")) (map-get hd "hd_vehicle_count")) 0) (map-get hd "hd_dep_count")) (map-get hd "hd_vehicle_count")) 1) (equal? (or (equal? (or (equal? (map-get d "d_year") 1998) (map-get d "d_year")) 1999) (map-get d "d_year")) 2000)) (map-get s "s_county")) "A")
                  (set! _tmp (append _tmp (list ss)))
                )
              )) (if (string? household_demographics) (string->list household_demographics) household_demographics))
          )) (if (string? store) (string->list store) store))
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "key" (map-get g "key")) (cons "cnt" (_count g))))))
    ) (_group_by _tmp (lambda (ss) (list (cons "ticket" (map-get ss "ss_ticket_number")) (cons "cust" (map-get ss "ss_customer_sk"))))))
    _res)))
(define result (let ((_res '()) (_tmp '()))
  (for-each (lambda (g)
    (for-each (lambda (c)
      (when (equal? (map-get c "c_customer_sk") (map-get (map-get g "key") "cust"))
        (when (<= (and (>= (map-get g "cnt") 1) (map-get g "cnt")) 5)
          (set! _tmp (append _tmp (list (cons (list (cons "c_last_name" (map-get c "c_last_name")) (cons "c_first_name" (map-get c "c_first_name")) (cons "c_salutation" (map-get c "c_salutation")) (cons "c_preferred_cust_flag" (map-get c "c_preferred_cust_flag")) (cons "ss_ticket_number" (map-get (map-get g "key") "ticket")) (cons "cnt" (map-get g "cnt"))) (list (- (map-get g "cnt")) (map-get c "c_last_name"))))))
        )
      )) (if (string? customer) (string->list customer) customer))
  ) (if (string? groups) (string->list groups) groups))
  (set! _res (_sort _tmp))
  (set! _res (map car _res))
  _res))
(_json result)
(run-test "TPCDS Q73 simplified" test_TPCDS_Q73_simplified)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
