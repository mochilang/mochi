(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q31_simplified)
  (when (not (equal? result (list (list (cons "ca_county" "A") (cons "d_year" 2000) (cons "web_q1_q2_increase" 1.5) (cons "store_q1_q2_increase" 1.2) (cons "web_q2_q3_increase" 1.6666666666666667) (cons "store_q2_q3_increase" 1.3333333333333333))))) (error "expect failed"))
)

(define store_sales (list (list (cons "ca_county" "A") (cons "d_qoy" 1) (cons "d_year" 2000) (cons "ss_ext_sales_price" 100.0)) (list (cons "ca_county" "A") (cons "d_qoy" 2) (cons "d_year" 2000) (cons "ss_ext_sales_price" 120.0)) (list (cons "ca_county" "A") (cons "d_qoy" 3) (cons "d_year" 2000) (cons "ss_ext_sales_price" 160.0)) (list (cons "ca_county" "B") (cons "d_qoy" 1) (cons "d_year" 2000) (cons "ss_ext_sales_price" 80.0)) (list (cons "ca_county" "B") (cons "d_qoy" 2) (cons "d_year" 2000) (cons "ss_ext_sales_price" 90.0)) (list (cons "ca_county" "B") (cons "d_qoy" 3) (cons "d_year" 2000) (cons "ss_ext_sales_price" 100.0))))
(define web_sales (list (list (cons "ca_county" "A") (cons "d_qoy" 1) (cons "d_year" 2000) (cons "ws_ext_sales_price" 100.0)) (list (cons "ca_county" "A") (cons "d_qoy" 2) (cons "d_year" 2000) (cons "ws_ext_sales_price" 150.0)) (list (cons "ca_county" "A") (cons "d_qoy" 3) (cons "d_year" 2000) (cons "ws_ext_sales_price" 250.0)) (list (cons "ca_county" "B") (cons "d_qoy" 1) (cons "d_year" 2000) (cons "ws_ext_sales_price" 80.0)) (list (cons "ca_county" "B") (cons "d_qoy" 2) (cons "d_year" 2000) (cons "ws_ext_sales_price" 90.0)) (list (cons "ca_county" "B") (cons "d_qoy" 3) (cons "d_year" 2000) (cons "ws_ext_sales_price" 95.0))))
(define counties (list "A" "B"))
(define result (list ))
(let loop ((county_idx 0))
  (if (< county_idx (length counties))
    (begin
      (let ((county (list-ref counties county_idx)))
        (define ss1 (_sum (let ((_res '()))
  (for-each (lambda (s)
    (when (equal? (and (equal? (map-get s "ca_county") county) (map-get s "d_qoy")) 1)
      (set! _res (append _res (list (map-get s "ss_ext_sales_price"))))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res)))
        (define ss2 (_sum (let ((_res '()))
  (for-each (lambda (s)
    (when (equal? (and (equal? (map-get s "ca_county") county) (map-get s "d_qoy")) 2)
      (set! _res (append _res (list (map-get s "ss_ext_sales_price"))))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res)))
        (define ss3 (_sum (let ((_res '()))
  (for-each (lambda (s)
    (when (equal? (and (equal? (map-get s "ca_county") county) (map-get s "d_qoy")) 3)
      (set! _res (append _res (list (map-get s "ss_ext_sales_price"))))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res)))
        (define ws1 (_sum (let ((_res '()))
  (for-each (lambda (w)
    (when (equal? (and (equal? (map-get w "ca_county") county) (map-get w "d_qoy")) 1)
      (set! _res (append _res (list (map-get w "ws_ext_sales_price"))))
    )
  ) (if (string? web_sales) (string->list web_sales) web_sales))
  _res)))
        (define ws2 (_sum (let ((_res '()))
  (for-each (lambda (w)
    (when (equal? (and (equal? (map-get w "ca_county") county) (map-get w "d_qoy")) 2)
      (set! _res (append _res (list (map-get w "ws_ext_sales_price"))))
    )
  ) (if (string? web_sales) (string->list web_sales) web_sales))
  _res)))
        (define ws3 (_sum (let ((_res '()))
  (for-each (lambda (w)
    (when (equal? (and (equal? (map-get w "ca_county") county) (map-get w "d_qoy")) 3)
      (set! _res (append _res (list (map-get w "ws_ext_sales_price"))))
    )
  ) (if (string? web_sales) (string->list web_sales) web_sales))
  _res)))
        (define web_g1 (/ ws2 ws1))
        (define store_g1 (/ ss2 ss1))
        (define web_g2 (/ ws3 ws2))
        (define store_g2 (/ ss3 ss2))
        (if (> (and (> web_g1 store_g1) web_g2) store_g2)
          (begin
            (set! result (append result (list (cons "ca_county" county) (cons "d_year" 2000) (cons "web_q1_q2_increase" web_g1) (cons "store_q1_q2_increase" store_g1) (cons "web_q2_q3_increase" web_g2) (cons "store_q2_q3_increase" store_g2))))
          )
          '()
        )
      )
      (loop (+ county_idx 1))
    )
  '()
)
(_json result)
(run-test "TPCDS Q31 simplified" test_TPCDS_Q31_simplified)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
