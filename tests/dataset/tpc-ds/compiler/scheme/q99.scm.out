(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_slice obj i j)
  (let* ((n (if (string? obj) (string-length obj) (length obj)))
         (start i)
         (end j))
    (when (< start 0) (set! start (+ n start)))
    (when (< end 0) (set! end (+ n end)))
    (when (< start 0) (set! start 0))
    (when (> end n) (set! end n))
    (when (< end start) (set! end start))
        (if (string? obj)
        (substring obj start end)
        (let loop ((idx 0) (xs obj) (out '()))
          (if (or (null? xs) (>= idx end))
              (reverse out)
              (loop (+ idx 1) (cdr xs)
                    (if (>= idx start)
                        (cons (car xs) out)
                        out))))))
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-CatalogSale cs_ship_date_sk cs_sold_date_sk cs_warehouse_sk cs_ship_mode_sk cs_call_center_sk)
  (list (cons 'cs_ship_date_sk cs_ship_date_sk) (cons 'cs_sold_date_sk cs_sold_date_sk) (cons 'cs_warehouse_sk cs_warehouse_sk) (cons 'cs_ship_mode_sk cs_ship_mode_sk) (cons 'cs_call_center_sk cs_call_center_sk))
)

(define (new-Warehouse w_warehouse_sk w_warehouse_name)
  (list (cons 'w_warehouse_sk w_warehouse_sk) (cons 'w_warehouse_name w_warehouse_name))
)

(define (new-ShipMode sm_ship_mode_sk sm_type)
  (list (cons 'sm_ship_mode_sk sm_ship_mode_sk) (cons 'sm_type sm_type))
)

(define (new-CallCenter cc_call_center_sk cc_name)
  (list (cons 'cc_call_center_sk cc_call_center_sk) (cons 'cc_name cc_name))
)

(define (test_TPCDS_Q99_buckets)
  (when (not (equal? grouped (list (list (cons "warehouse" "Warehouse1") (cons "sm_type" "EXP") (cons "cc_name" "CC1") (cons "d30" 1) (cons "d60" 1) (cons "d90" 1) (cons "d120" 1) (cons "dmore" 1))))) (error "expect failed"))
)

(define catalog_sales (list (list (cons "cs_ship_date_sk" 31) (cons "cs_sold_date_sk" 1) (cons "cs_warehouse_sk" 1) (cons "cs_ship_mode_sk" 1) (cons "cs_call_center_sk" 1)) (list (cons "cs_ship_date_sk" 51) (cons "cs_sold_date_sk" 1) (cons "cs_warehouse_sk" 1) (cons "cs_ship_mode_sk" 1) (cons "cs_call_center_sk" 1)) (list (cons "cs_ship_date_sk" 71) (cons "cs_sold_date_sk" 1) (cons "cs_warehouse_sk" 1) (cons "cs_ship_mode_sk" 1) (cons "cs_call_center_sk" 1)) (list (cons "cs_ship_date_sk" 101) (cons "cs_sold_date_sk" 1) (cons "cs_warehouse_sk" 1) (cons "cs_ship_mode_sk" 1) (cons "cs_call_center_sk" 1)) (list (cons "cs_ship_date_sk" 131) (cons "cs_sold_date_sk" 1) (cons "cs_warehouse_sk" 1) (cons "cs_ship_mode_sk" 1) (cons "cs_call_center_sk" 1))))
(define warehouse (list (list (cons "w_warehouse_sk" 1) (cons "w_warehouse_name" "Warehouse1"))))
(define ship_mode (list (list (cons "sm_ship_mode_sk" 1) (cons "sm_type" "EXP"))))
(define call_center (list (list (cons "cc_call_center_sk" 1) (cons "cc_name" "CC1"))))
(define grouped (let ((_tmp '()))
  (for-each (lambda (cs)
    (for-each (lambda (w)
      (when (equal? (map-get cs "cs_warehouse_sk") (map-get w "w_warehouse_sk"))
        (for-each (lambda (sm)
          (when (equal? (map-get cs "cs_ship_mode_sk") (map-get sm "sm_ship_mode_sk"))
            (for-each (lambda (cc)
              (when (equal? (map-get cs "cs_call_center_sk") (map-get cc "cc_call_center_sk"))
                (set! _tmp (append _tmp (list cs)))
              )) (if (string? call_center) (string->list call_center) call_center))
          )) (if (string? ship_mode) (string->list ship_mode) ship_mode))
      )) (if (string? warehouse) (string->list warehouse) warehouse))
  ) (if (string? catalog_sales) (string->list catalog_sales) catalog_sales))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "warehouse" (map-get (map-get g "key") "warehouse")) (cons "sm_type" (map-get (map-get g "key") "sm_type")) (cons "cc_name" (map-get (map-get g "key") "cc_name")) (cons "d30" (_count (let ((_res '()))
  (for-each (lambda (x)
    (when (<= (- (map-get x "cs_ship_date_sk") (map-get x "cs_sold_date_sk")) 30)
      (set! _res (append _res (list x)))
    )
  ) (if (string? g) (string->list g) g))
  _res))) (cons "d60" (_count (let ((_res '()))
  (for-each (lambda (x)
    (when (<= (- (and (> (- (map-get x "cs_ship_date_sk") (map-get x "cs_sold_date_sk")) 30) (map-get x "cs_ship_date_sk")) (map-get x "cs_sold_date_sk")) 60)
      (set! _res (append _res (list x)))
    )
  ) (if (string? g) (string->list g) g))
  _res))) (cons "d90" (_count (let ((_res '()))
  (for-each (lambda (x)
    (when (<= (- (and (> (- (map-get x "cs_ship_date_sk") (map-get x "cs_sold_date_sk")) 60) (map-get x "cs_ship_date_sk")) (map-get x "cs_sold_date_sk")) 90)
      (set! _res (append _res (list x)))
    )
  ) (if (string? g) (string->list g) g))
  _res))) (cons "d120" (_count (let ((_res '()))
  (for-each (lambda (x)
    (when (<= (- (and (> (- (map-get x "cs_ship_date_sk") (map-get x "cs_sold_date_sk")) 90) (map-get x "cs_ship_date_sk")) (map-get x "cs_sold_date_sk")) 120)
      (set! _res (append _res (list x)))
    )
  ) (if (string? g) (string->list g) g))
  _res))) (cons "dmore" (_count (let ((_res '()))
  (for-each (lambda (x)
    (when (> (- (map-get x "cs_ship_date_sk") (map-get x "cs_sold_date_sk")) 120)
      (set! _res (append _res (list x)))
    )
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (cs) (list (cons "warehouse" (_slice (map-get w "w_warehouse_name") 0 20)) (cons "sm_type" (map-get sm "sm_type")) (cons "cc_name" (map-get cc "cc_name"))))))
    _res)))
(_json grouped)
(run-test "TPCDS Q99 buckets" test_TPCDS_Q99_buckets)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
