(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n))))

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q9_result)
  (when (not (equal? result (list (list (cons "bucket1" 7.0) (cons "bucket2" 15.0) (cons "bucket3" 30.0) (cons "bucket4" 35.0) (cons "bucket5" 50.0))))) (error "expect failed"))
)

(define store_sales (list (list (cons "ss_quantity" 5) (cons "ss_ext_discount_amt" 5.0) (cons "ss_net_paid" 7.0)) (list (cons "ss_quantity" 30) (cons "ss_ext_discount_amt" 10.0) (cons "ss_net_paid" 15.0)) (list (cons "ss_quantity" 50) (cons "ss_ext_discount_amt" 20.0) (cons "ss_net_paid" 30.0)) (list (cons "ss_quantity" 70) (cons "ss_ext_discount_amt" 25.0) (cons "ss_net_paid" 35.0)) (list (cons "ss_quantity" 90) (cons "ss_ext_discount_amt" 40.0) (cons "ss_net_paid" 50.0))))
(define reason (list (list (cons "r_reason_sk" 1))))
(define bucket1 (if (> (_count (let ((_res '()))
  (for-each (lambda (s)
    (when (<= (and (>= (map-get s "ss_quantity") 1) (map-get s "ss_quantity")) 20)
      (set! _res (append _res (list s)))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res)) 10) (_avg (let ((_res '()))
  (for-each (lambda (s)
    (when (<= (and (>= (map-get s "ss_quantity") 1) (map-get s "ss_quantity")) 20)
      (set! _res (append _res (list (map-get s "ss_ext_discount_amt"))))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res)) (_avg (let ((_res '()))
  (for-each (lambda (s)
    (when (<= (and (>= (map-get s "ss_quantity") 1) (map-get s "ss_quantity")) 20)
      (set! _res (append _res (list (map-get s "ss_net_paid"))))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res))))
(define bucket2 (if (> (_count (let ((_res '()))
  (for-each (lambda (s)
    (when (<= (and (>= (map-get s "ss_quantity") 21) (map-get s "ss_quantity")) 40)
      (set! _res (append _res (list s)))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res)) 20) (_avg (let ((_res '()))
  (for-each (lambda (s)
    (when (<= (and (>= (map-get s "ss_quantity") 21) (map-get s "ss_quantity")) 40)
      (set! _res (append _res (list (map-get s "ss_ext_discount_amt"))))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res)) (_avg (let ((_res '()))
  (for-each (lambda (s)
    (when (<= (and (>= (map-get s "ss_quantity") 21) (map-get s "ss_quantity")) 40)
      (set! _res (append _res (list (map-get s "ss_net_paid"))))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res))))
(define bucket3 (if (> (_count (let ((_res '()))
  (for-each (lambda (s)
    (when (<= (and (>= (map-get s "ss_quantity") 41) (map-get s "ss_quantity")) 60)
      (set! _res (append _res (list s)))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res)) 30) (_avg (let ((_res '()))
  (for-each (lambda (s)
    (when (<= (and (>= (map-get s "ss_quantity") 41) (map-get s "ss_quantity")) 60)
      (set! _res (append _res (list (map-get s "ss_ext_discount_amt"))))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res)) (_avg (let ((_res '()))
  (for-each (lambda (s)
    (when (<= (and (>= (map-get s "ss_quantity") 41) (map-get s "ss_quantity")) 60)
      (set! _res (append _res (list (map-get s "ss_net_paid"))))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res))))
(define bucket4 (if (> (_count (let ((_res '()))
  (for-each (lambda (s)
    (when (<= (and (>= (map-get s "ss_quantity") 61) (map-get s "ss_quantity")) 80)
      (set! _res (append _res (list s)))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res)) 40) (_avg (let ((_res '()))
  (for-each (lambda (s)
    (when (<= (and (>= (map-get s "ss_quantity") 61) (map-get s "ss_quantity")) 80)
      (set! _res (append _res (list (map-get s "ss_ext_discount_amt"))))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res)) (_avg (let ((_res '()))
  (for-each (lambda (s)
    (when (<= (and (>= (map-get s "ss_quantity") 61) (map-get s "ss_quantity")) 80)
      (set! _res (append _res (list (map-get s "ss_net_paid"))))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res))))
(define bucket5 (if (> (_count (let ((_res '()))
  (for-each (lambda (s)
    (when (<= (and (>= (map-get s "ss_quantity") 81) (map-get s "ss_quantity")) 100)
      (set! _res (append _res (list s)))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res)) 50) (_avg (let ((_res '()))
  (for-each (lambda (s)
    (when (<= (and (>= (map-get s "ss_quantity") 81) (map-get s "ss_quantity")) 100)
      (set! _res (append _res (list (map-get s "ss_ext_discount_amt"))))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res)) (_avg (let ((_res '()))
  (for-each (lambda (s)
    (when (<= (and (>= (map-get s "ss_quantity") 81) (map-get s "ss_quantity")) 100)
      (set! _res (append _res (list (map-get s "ss_net_paid"))))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res))))
(define result (let ((_res '()))
  (for-each (lambda (r)
    (when (equal? (map-get r "r_reason_sk") 1)
      (set! _res (append _res (list (list (cons "bucket1" bucket1) (cons "bucket2" bucket2) (cons "bucket3" bucket3) (cons "bucket4" bucket4) (cons "bucket5" bucket5)))))
    )
  ) (if (string? reason) (string->list reason) reason))
  _res))
(_json result)
(run-test "TPCDS Q9 result" test_TPCDS_Q9_result)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
