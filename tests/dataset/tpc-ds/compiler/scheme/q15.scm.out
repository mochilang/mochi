(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(import (srfi 95))

(define (_fetch url opts)
  (let* ((method (if (and opts (assq 'method opts)) (cdr (assq 'method opts)) "GET"))
         (args (list "curl" "-s" "-X" method)))
    (when (and opts (assq 'headers opts))
      (for-each (lambda (p)
                  (set! args (append args (list "-H" (format "~a: ~a" (car p) (cdr p))))))
                (cdr (assq 'headers opts))))
    (when (and opts (assq 'query opts))
      (let* ((q (cdr (assq 'query opts)))
             (qs (string-join (map (lambda (p) (format "~a=~a" (car p) (cdr p))) q) "&")))
        (set! url (string-append url (if (string-contains url "?") "&" "?") qs))))
    (when (and opts (assq 'body opts))
      (set! args (append args (list "-d" (json->string (cdr (assq 'body opts)))))))
    (when (and opts (assq 'timeout opts))
      (set! args (append args (list "--max-time" (format "~a" (cdr (assq 'timeout opts)))))))
    (set! args (append args (list url)))
    (let* ((p (open-input-pipe (string-join args " ")))
           (txt (port->string p)))
      (close-input-port p)
      (string->json txt))))

(define (_load path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (in (if (or (not path) (string=? path "") (string=? path "-"))
                 (current-input-port)
                 (open-input-file path)))
         (text (port->string in)))
    (when (not (eq? in (current-input-port)))
      (close-input-port in))
    (cond ((string=? fmt "jsonl")
           (map string->json
                (filter (lambda (l) (not (string=? l "")))
                        (string-split text #\newline))))
          (else
           (let ((d (string->json text)))
             (if (list? d) d (list d)))))))

(define (_save rows path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (out (if (or (not path) (string=? path "") (string=? path "-"))
                  (current-output-port)
                  (open-output-file path))))
    (cond ((string=? fmt "jsonl")
           (for-each (lambda (r) (write-string (json->string r) out) (newline out)) rows))
          (else
           (write-string (json->string rows) out)))
    (when (not (eq? out (current-output-port)))
      (close-output-port out))))

(define (_lt a b)
  (cond
    ((and (number? a) (number? b)) (< a b))
    ((and (string? a) (string? b)) (string<? a b))
    ((and (pair? a) (pair? b))
      (cond
        ((null? a) (not (null? b)))
        ((null? b) #f)
        (else (let ((ka (car a)) (kb (car b)))
                (if (equal? ka kb)
                    (_lt (cdr a) (cdr b))
                    (_lt ka kb)))))
    )
    (else (string<? (format "~a" a) (format "~a" b)))))

(define (_sort pairs)
  (sort pairs (lambda (a b) (_lt (cdr a) (cdr b)))))
(define (_slice obj i j)
  (let* ((n (if (string? obj) (string-length obj) (length obj)))
         (start i)
         (end j))
    (when (< start 0) (set! start (+ n start)))
    (when (< end 0) (set! end (+ n end)))
    (when (< start 0) (set! start 0))
    (when (> end n) (set! end n))
    (when (< end start) (set! end start))
        (if (string? obj)
        (substring obj start end)
        (let loop ((idx 0) (xs obj) (out '()))
          (if (or (null? xs) (>= idx end))
              (reverse out)
              (loop (+ idx 1) (cdr xs)
                    (if (>= idx start)
                        (cons (car xs) out)
                        out))))))
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-CatalogSale cs_bill_customer_sk cs_sales_price cs_sold_date_sk)
  (list (cons 'cs_bill_customer_sk cs_bill_customer_sk) (cons 'cs_sales_price cs_sales_price) (cons 'cs_sold_date_sk cs_sold_date_sk))
)

(define (new-Customer c_customer_sk c_current_addr_sk)
  (list (cons 'c_customer_sk c_customer_sk) (cons 'c_current_addr_sk c_current_addr_sk))
)

(define (new-CustomerAddress ca_address_sk ca_zip ca_state)
  (list (cons 'ca_address_sk ca_address_sk) (cons 'ca_zip ca_zip) (cons 'ca_state ca_state))
)

(define (new-DateDim d_date_sk d_qoy d_year)
  (list (cons 'd_date_sk d_date_sk) (cons 'd_qoy d_qoy) (cons 'd_year d_year))
)

(define (test_TPCDS_Q15_zip)
  (when (not (equal? filtered (list (list (cons "ca_zip" "85669") (cons "sum_sales" 600.0))))) (error "expect failed"))
)

(define catalog_sales (list (list (cons "cs_bill_customer_sk" 1) (cons "cs_sales_price" 600.0) (cons "cs_sold_date_sk" 1))))
(define customer (list (list (cons "c_customer_sk" 1) (cons "c_current_addr_sk" 1))))
(define customer_address (list (list (cons "ca_address_sk" 1) (cons "ca_zip" "85669") (cons "ca_state" "CA"))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_qoy" 1) (cons "d_year" 2000))))
(define filtered (let ((_tmp '()))
  (for-each (lambda (cs)
    (for-each (lambda (c)
      (when (equal? (map-get cs "cs_bill_customer_sk") (map-get c "c_customer_sk"))
        (for-each (lambda (ca)
          (when (equal? (map-get c "c_current_addr_sk") (map-get ca "ca_address_sk"))
            (for-each (lambda (d)
              (when (equal? (map-get cs "cs_sold_date_sk") (map-get d "d_date_sk"))
                (when (equal? (and (equal? (and (> (or (if (member (or (if (member (_slice (map-get ca "ca_zip") 0 5) (list "85669" "86197" "88274" "83405" "86475" "85392" "85460" "80348" "81792")) #t #f) (map-get ca "ca_state")) (list "CA" "WA" "GA")) #t #f) (map-get cs "cs_sales_price")) 500) (map-get d "d_qoy")) 1) (map-get d "d_year")) 2000)
                  (set! _tmp (append _tmp (list cs)))
                )
              )) (if (string? date_dim) (string->list date_dim) date_dim))
          )) (if (string? customer_address) (string->list customer_address) customer_address))
      )) (if (string? customer) (string->list customer) customer))
  ) (if (string? catalog_sales) (string->list catalog_sales) catalog_sales))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "ca_zip" (map-get (map-get g "key") "zip")) (cons "sum_sales" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "cs_sales_price"))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (cs) (list (cons "zip" (map-get ca "ca_zip"))))))
    (set! _res (_sort (map (lambda (x) (cons x (map-get (map-get g "key") "zip"))) _res)))
    (set! _res (map car _res))
    _res)))
(_json filtered)
(run-test "TPCDS Q15 zip" test_TPCDS_Q15_zip)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
