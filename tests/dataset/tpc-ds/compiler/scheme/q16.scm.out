(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-CatalogSale cs_order_number cs_ship_date_sk cs_ship_addr_sk cs_call_center_sk cs_warehouse_sk cs_ext_ship_cost cs_net_profit)
  (list (cons 'cs_order_number cs_order_number) (cons 'cs_ship_date_sk cs_ship_date_sk) (cons 'cs_ship_addr_sk cs_ship_addr_sk) (cons 'cs_call_center_sk cs_call_center_sk) (cons 'cs_warehouse_sk cs_warehouse_sk) (cons 'cs_ext_ship_cost cs_ext_ship_cost) (cons 'cs_net_profit cs_net_profit))
)

(define (new-DateDim d_date_sk d_date)
  (list (cons 'd_date_sk d_date_sk) (cons 'd_date d_date))
)

(define (new-CustomerAddress ca_address_sk ca_state)
  (list (cons 'ca_address_sk ca_address_sk) (cons 'ca_state ca_state))
)

(define (new-CallCenter cc_call_center_sk cc_county)
  (list (cons 'cc_call_center_sk cc_call_center_sk) (cons 'cc_county cc_county))
)

(define (new-CatalogReturn cr_order_number)
  (list (cons 'cr_order_number cr_order_number))
)

(define (distinct xs)
  (call/cc (lambda (return)
    (define out '())
    (set! out (list ))
    (let loop ((x_idx 0))
      (if (< x_idx (length xs))
        (begin
          (let ((x (list-ref xs x_idx)))
            (if (not (contains out x))
              (begin
                (set! out (append out x))
              )
              '()
            )
          )
          (loop (+ x_idx 1))
        )
      '()
    )
    (return out)
  ))
)

(define (test_TPCDS_Q16_shipping)
  (when (not (equal? filtered (list (list (cons "order_count" 1) (cons "total_shipping_cost" 5.0) (cons "total_net_profit" 20.0))))) (error "expect failed"))
)

(define catalog_sales (list (list (cons "cs_order_number" 1) (cons "cs_ship_date_sk" 1) (cons "cs_ship_addr_sk" 1) (cons "cs_call_center_sk" 1) (cons "cs_warehouse_sk" 1) (cons "cs_ext_ship_cost" 5.0) (cons "cs_net_profit" 20.0)) (list (cons "cs_order_number" 1) (cons "cs_ship_date_sk" 1) (cons "cs_ship_addr_sk" 1) (cons "cs_call_center_sk" 1) (cons "cs_warehouse_sk" 2) (cons "cs_ext_ship_cost" 0.0) (cons "cs_net_profit" 0.0))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_date" "2000-03-01"))))
(define customer_address (list (list (cons "ca_address_sk" 1) (cons "ca_state" "CA"))))
(define call_center (list (list (cons "cc_call_center_sk" 1) (cons "cc_county" "CountyA"))))
(define catalog_returns (list ))
(define filtered (let ((_tmp '()))
  (for-each (lambda (cs1)
    (for-each (lambda (d)
      (when (<= (and (>= (and (equal? (map-get cs1 "cs_ship_date_sk") (map-get d "d_date_sk")) (map-get d "d_date")) "2000-03-01") (map-get d "d_date")) "2000-04-30")
        (for-each (lambda (ca)
          (when (equal? (and (equal? (map-get cs1 "cs_ship_addr_sk") (map-get ca "ca_address_sk")) (map-get ca "ca_state")) "CA")
            (for-each (lambda (cc)
              (when (equal? (and (equal? (map-get cs1 "cs_call_center_sk") (map-get cc "cc_call_center_sk")) (map-get cc "cc_county")) "CountyA")
                (when (equal? (and (exists (let ((_res '()))
  (for-each (lambda (cs2)
    (when (not (equal? (and (equal? (map-get cs1 "cs_order_number") (map-get cs2 "cs_order_number")) (map-get cs1 "cs_warehouse_sk")) (map-get cs2 "cs_warehouse_sk")))
      (set! _res (append _res (list cs2)))
    )
  ) (if (string? catalog_sales) (string->list catalog_sales) catalog_sales))
  _res)) (exists (let ((_res '()))
  (for-each (lambda (cr)
    (when (equal? (map-get cs1 "cs_order_number") (map-get cr "cr_order_number"))
      (set! _res (append _res (list cr)))
    )
  ) (if (string? catalog_returns) (string->list catalog_returns) catalog_returns))
  _res))) #f)
                  (set! _tmp (append _tmp (list cs1)))
                )
              )) (if (string? call_center) (string->list call_center) call_center))
          )) (if (string? customer_address) (string->list customer_address) customer_address))
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? catalog_sales) (string->list catalog_sales) catalog_sales))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "order_count" (length (distinct (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "cs_order_number"))))
  ) (if (string? g) (string->list g) g))
  _res)))) (cons "total_shipping_cost" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "cs_ext_ship_cost"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "total_net_profit" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "cs_net_profit"))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (cs1) (list ))))
    _res)))
(_json filtered)
(run-test "TPCDS Q16 shipping" test_TPCDS_Q16_shipping)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
