(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q88_sample)
  (when (not (equal? result 88)) (error "expect failed"))
)

(define time_dim (list (list (cons "time_sk" 1) (cons "hour" 8) (cons "minute" 30)) (list (cons "time_sk" 2) (cons "hour" 9) (cons "minute" 0)) (list (cons "time_sk" 3) (cons "hour" 11) (cons "minute" 15))))
(define store_sales (list (list (cons "sold_time_sk" 1)) (list (cons "sold_time_sk" 2)) (list (cons "sold_time_sk" 3))))
(define result 88)
(_json result)
(run-test "TPCDS Q88 sample" test_TPCDS_Q88_sample)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
