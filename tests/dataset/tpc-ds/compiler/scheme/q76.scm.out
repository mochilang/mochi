(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(import (srfi 95))

(define (_fetch url opts)
  (let* ((method (if (and opts (assq 'method opts)) (cdr (assq 'method opts)) "GET"))
         (args (list "curl" "-s" "-X" method)))
    (when (and opts (assq 'headers opts))
      (for-each (lambda (p)
                  (set! args (append args (list "-H" (format "~a: ~a" (car p) (cdr p))))))
                (cdr (assq 'headers opts))))
    (when (and opts (assq 'query opts))
      (let* ((q (cdr (assq 'query opts)))
             (qs (string-join (map (lambda (p) (format "~a=~a" (car p) (cdr p))) q) "&")))
        (set! url (string-append url (if (string-contains url "?") "&" "?") qs))))
    (when (and opts (assq 'body opts))
      (set! args (append args (list "-d" (json->string (cdr (assq 'body opts)))))))
    (when (and opts (assq 'timeout opts))
      (set! args (append args (list "--max-time" (format "~a" (cdr (assq 'timeout opts)))))))
    (set! args (append args (list url)))
    (let* ((p (open-input-pipe (string-join args " ")))
           (txt (port->string p)))
      (close-input-port p)
      (string->json txt))))

(define (_load path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (in (if (or (not path) (string=? path "") (string=? path "-"))
                 (current-input-port)
                 (open-input-file path)))
         (text (port->string in)))
    (when (not (eq? in (current-input-port)))
      (close-input-port in))
    (cond ((string=? fmt "jsonl")
           (map string->json
                (filter (lambda (l) (not (string=? l "")))
                        (string-split text #\newline))))
          (else
           (let ((d (string->json text)))
             (if (list? d) d (list d)))))))

(define (_save rows path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (out (if (or (not path) (string=? path "") (string=? path "-"))
                  (current-output-port)
                  (open-output-file path))))
    (cond ((string=? fmt "jsonl")
           (for-each (lambda (r) (write-string (json->string r) out) (newline out)) rows))
          (else
           (write-string (json->string rows) out)))
    (when (not (eq? out (current-output-port)))
      (close-output-port out))))

(define (_lt a b)
  (cond
    ((and (number? a) (number? b)) (< a b))
    ((and (string? a) (string? b)) (string<? a b))
    ((and (pair? a) (pair? b))
      (cond
        ((null? a) (not (null? b)))
        ((null? b) #f)
        (else (let ((ka (car a)) (kb (car b)))
                (if (equal? ka kb)
                    (_lt (cdr a) (cdr b))
                    (_lt ka kb)))))
    )
    (else (string<? (format "~a" a) (format "~a" b)))))

(define (_sort pairs)
  (sort pairs (lambda (a b) (_lt (cdr a) (cdr b)))))
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q76_simplified)
  (when (not (equal? result (list (list (cons "channel" "store") (cons "col_name" '()) (cons "d_year" 1998) (cons "d_qoy" 1) (cons "i_category" "CatA") (cons "sales_cnt" 1) (cons "sales_amt" 10.0)) (list (cons "channel" "web") (cons "col_name" '()) (cons "d_year" 1998) (cons "d_qoy" 1) (cons "i_category" "CatB") (cons "sales_cnt" 1) (cons "sales_amt" 15.0)) (list (cons "channel" "catalog") (cons "col_name" '()) (cons "d_year" 1998) (cons "d_qoy" 1) (cons "i_category" "CatC") (cons "sales_cnt" 1) (cons "sales_amt" 20.0))))) (error "expect failed"))
)

(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_year" 1998) (cons "d_qoy" 1))))
(define item (list (list (cons "i_item_sk" 1) (cons "i_category" "CatA")) (list (cons "i_item_sk" 2) (cons "i_category" "CatB")) (list (cons "i_item_sk" 3) (cons "i_category" "CatC"))))
(define store_sales (list (list (cons "ss_customer_sk" '()) (cons "ss_item_sk" 1) (cons "ss_ext_sales_price" 10.0) (cons "ss_sold_date_sk" 1))))
(define web_sales (list (list (cons "ws_bill_customer_sk" '()) (cons "ws_item_sk" 2) (cons "ws_ext_sales_price" 15.0) (cons "ws_sold_date_sk" 1))))
(define catalog_sales (list (list (cons "cs_bill_customer_sk" '()) (cons "cs_item_sk" 3) (cons "cs_ext_sales_price" 20.0) (cons "cs_sold_date_sk" 1))))
(define store_part (let ((_res '()))
  (for-each (lambda (ss)
    (for-each (lambda (i)
      (when (equal? (map-get i "i_item_sk") (map-get ss "ss_item_sk"))
        (for-each (lambda (d)
          (when (equal? (map-get d "d_date_sk") (map-get ss "ss_sold_date_sk"))
            (when (equal? (map-get ss "ss_customer_sk") '())
              (set! _res (append _res (list (list (cons "channel" "store") (cons "col_name" (map-get ss "ss_customer_sk")) (cons "d_year" (map-get d "d_year")) (cons "d_qoy" (map-get d "d_qoy")) (cons "i_category" (map-get i "i_category")) (cons "ext_sales_price" (map-get ss "ss_ext_sales_price"))))))
            )
          )) (if (string? date_dim) (string->list date_dim) date_dim))
      )) (if (string? item) (string->list item) item))
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res))
(define web_part (let ((_res '()))
  (for-each (lambda (ws)
    (for-each (lambda (i)
      (when (equal? (map-get i "i_item_sk") (map-get ws "ws_item_sk"))
        (for-each (lambda (d)
          (when (equal? (map-get d "d_date_sk") (map-get ws "ws_sold_date_sk"))
            (when (equal? (map-get ws "ws_bill_customer_sk") '())
              (set! _res (append _res (list (list (cons "channel" "web") (cons "col_name" (map-get ws "ws_bill_customer_sk")) (cons "d_year" (map-get d "d_year")) (cons "d_qoy" (map-get d "d_qoy")) (cons "i_category" (map-get i "i_category")) (cons "ext_sales_price" (map-get ws "ws_ext_sales_price"))))))
            )
          )) (if (string? date_dim) (string->list date_dim) date_dim))
      )) (if (string? item) (string->list item) item))
  ) (if (string? web_sales) (string->list web_sales) web_sales))
  _res))
(define catalog_part (let ((_res '()))
  (for-each (lambda (cs)
    (for-each (lambda (i)
      (when (equal? (map-get i "i_item_sk") (map-get cs "cs_item_sk"))
        (for-each (lambda (d)
          (when (equal? (map-get d "d_date_sk") (map-get cs "cs_sold_date_sk"))
            (when (equal? (map-get cs "cs_bill_customer_sk") '())
              (set! _res (append _res (list (list (cons "channel" "catalog") (cons "col_name" (map-get cs "cs_bill_customer_sk")) (cons "d_year" (map-get d "d_year")) (cons "d_qoy" (map-get d "d_qoy")) (cons "i_category" (map-get i "i_category")) (cons "ext_sales_price" (map-get cs "cs_ext_sales_price"))))))
            )
          )) (if (string? date_dim) (string->list date_dim) date_dim))
      )) (if (string? item) (string->list item) item))
  ) (if (string? catalog_sales) (string->list catalog_sales) catalog_sales))
  _res))
(define all_rows (concat store_part web_part catalog_part))
(define result (let ((_tmp '()))
  (for-each (lambda (r)
    (set! _tmp (append _tmp (list r)))
  ) (if (string? all_rows) (string->list all_rows) all_rows))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "channel" (map-get (map-get g "key") "channel")) (cons "col_name" (map-get (map-get g "key") "col_name")) (cons "d_year" (map-get (map-get g "key") "d_year")) (cons "d_qoy" (map-get (map-get g "key") "d_qoy")) (cons "i_category" (map-get (map-get g "key") "i_category")) (cons "sales_cnt" (_count g)) (cons "sales_amt" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get (map-get x "r") "ext_sales_price"))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (r) (list (cons "channel" (map-get r "channel")) (cons "col_name" (map-get r "col_name")) (cons "d_year" (map-get r "d_year")) (cons "d_qoy" (map-get r "d_qoy")) (cons "i_category" (map-get r "i_category"))))))
    (set! _res (_sort (map (lambda (x) (cons x (map-get (map-get g "key") "channel"))) _res)))
    (set! _res (map car _res))
    _res)))
(_json result)
(run-test "TPCDS Q76 simplified" test_TPCDS_Q76_simplified)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
