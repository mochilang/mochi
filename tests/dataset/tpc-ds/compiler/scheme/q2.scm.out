(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_union_all a b)
  (append a b))

(define (_union a b)
  (let ((res a))
    (for-each (lambda (it)
                (when (not (member it res))
                  (set! res (append res (list it)))))
              b)
    res))

(define (_except a b)
  (let ((res '()))
    (for-each (lambda (it)
                (when (not (member it b))
                  (set! res (append res (list it)))))
              a)
    res))

(define (_intersect a b)
  (let ((res '()))
    (for-each (lambda (it)
                (when (and (member it b) (not (member it res)))
                  (set! res (append res (list it)))))
              a)
    res))
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n))))

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q2_result)
  (when (not (equal? result (list (list (cons "d_week_seq1" 1) (cons "sun_ratio" 0.5) (cons "mon_ratio" 0.5))))) (error "expect failed"))
)

(define web_sales (list (list (cons "ws_sold_date_sk" 1) (cons "ws_ext_sales_price" 5.0) (cons "ws_sold_date_name" "Sunday")) (list (cons "ws_sold_date_sk" 2) (cons "ws_ext_sales_price" 5.0) (cons "ws_sold_date_name" "Monday")) (list (cons "ws_sold_date_sk" 8) (cons "ws_ext_sales_price" 10.0) (cons "ws_sold_date_name" "Sunday")) (list (cons "ws_sold_date_sk" 9) (cons "ws_ext_sales_price" 10.0) (cons "ws_sold_date_name" "Monday"))))
(define catalog_sales (list (list (cons "cs_sold_date_sk" 1) (cons "cs_ext_sales_price" 5.0) (cons "cs_sold_date_name" "Sunday")) (list (cons "cs_sold_date_sk" 2) (cons "cs_ext_sales_price" 5.0) (cons "cs_sold_date_name" "Monday")) (list (cons "cs_sold_date_sk" 8) (cons "cs_ext_sales_price" 10.0) (cons "cs_sold_date_name" "Sunday")) (list (cons "cs_sold_date_sk" 9) (cons "cs_ext_sales_price" 10.0) (cons "cs_sold_date_name" "Monday"))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_week_seq" 1) (cons "d_day_name" "Sunday") (cons "d_year" 1998)) (list (cons "d_date_sk" 2) (cons "d_week_seq" 1) (cons "d_day_name" "Monday") (cons "d_year" 1998)) (list (cons "d_date_sk" 8) (cons "d_week_seq" 54) (cons "d_day_name" "Sunday") (cons "d_year" 1999)) (list (cons "d_date_sk" 9) (cons "d_week_seq" 54) (cons "d_day_name" "Monday") (cons "d_year" 1999))))
(define wscs (_union_all (let ((_res '()))
  (for-each (lambda (ws)
    (set! _res (append _res (list (list (cons "sold_date_sk" (map-get ws "ws_sold_date_sk")) (cons "sales_price" (map-get ws "ws_ext_sales_price")) (cons "day" (map-get ws "ws_sold_date_name"))))))
  ) (if (string? web_sales) (string->list web_sales) web_sales))
  _res) (let ((_res '()))
  (for-each (lambda (cs)
    (set! _res (append _res (list (list (cons "sold_date_sk" (map-get cs "cs_sold_date_sk")) (cons "sales_price" (map-get cs "cs_ext_sales_price")) (cons "day" (map-get cs "cs_sold_date_name"))))))
  ) (if (string? catalog_sales) (string->list catalog_sales) catalog_sales))
  _res)))
(define wswscs (let ((_tmp '()))
  (for-each (lambda (w)
    (for-each (lambda (d)
      (when (equal? (map-get w "sold_date_sk") (map-get d "d_date_sk"))
        (set! _tmp (append _tmp (list w)))
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? wscs) (string->list wscs) wscs))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "d_week_seq" (map-get (map-get g "key") "week_seq")) (cons "sun_sales" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (when (equal? (map-get x "day") "Sunday")
      (set! _res (append _res (list (map-get x "sales_price"))))
    )
  ) (if (string? g) (string->list g) g))
  _res))) (cons "mon_sales" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (when (equal? (map-get x "day") "Monday")
      (set! _res (append _res (list (map-get x "sales_price"))))
    )
  ) (if (string? g) (string->list g) g))
  _res))) (cons "tue_sales" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (when (equal? (map-get x "day") "Tuesday")
      (set! _res (append _res (list (map-get x "sales_price"))))
    )
  ) (if (string? g) (string->list g) g))
  _res))) (cons "wed_sales" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (when (equal? (map-get x "day") "Wednesday")
      (set! _res (append _res (list (map-get x "sales_price"))))
    )
  ) (if (string? g) (string->list g) g))
  _res))) (cons "thu_sales" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (when (equal? (map-get x "day") "Thursday")
      (set! _res (append _res (list (map-get x "sales_price"))))
    )
  ) (if (string? g) (string->list g) g))
  _res))) (cons "fri_sales" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (when (equal? (map-get x "day") "Friday")
      (set! _res (append _res (list (map-get x "sales_price"))))
    )
  ) (if (string? g) (string->list g) g))
  _res))) (cons "sat_sales" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (when (equal? (map-get x "day") "Saturday")
      (set! _res (append _res (list (map-get x "sales_price"))))
    )
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (w) (list (cons "week_seq" (map-get d "d_week_seq"))))))
    _res)))
(define year1 (let ((_res '()))
  (for-each (lambda (w)
    (when (equal? (map-get w "d_week_seq") 1)
      (set! _res (append _res (list w)))
    )
  ) (if (string? wswscs) (string->list wswscs) wswscs))
  _res))
(define year2 (let ((_res '()))
  (for-each (lambda (w)
    (when (equal? (map-get w "d_week_seq") 54)
      (set! _res (append _res (list w)))
    )
  ) (if (string? wswscs) (string->list wswscs) wswscs))
  _res))
(define result (let ((_res '()))
  (for-each (lambda (y)
    (for-each (lambda (z)
      (when (- (equal? (map-get y "d_week_seq") (map-get z "d_week_seq")) 53)
        (set! _res (append _res (list (list (cons "d_week_seq1" (map-get y "d_week_seq")) (cons "sun_ratio" (/ (map-get y "sun_sales") (map-get z "sun_sales"))) (cons "mon_ratio" (/ (map-get y "mon_sales") (map-get z "mon_sales")))))))
      )) (if (string? year2) (string->list year2) year2))
  ) (if (string? year1) (string->list year1) year1))
  _res))
(_json result)
(run-test "TPCDS Q2 result" test_TPCDS_Q2_result)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
