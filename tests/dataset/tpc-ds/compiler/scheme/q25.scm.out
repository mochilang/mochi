(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-StoreSale ss_sold_date_sk ss_item_sk ss_store_sk ss_customer_sk ss_net_profit ss_ticket_number)
  (list (cons 'ss_sold_date_sk ss_sold_date_sk) (cons 'ss_item_sk ss_item_sk) (cons 'ss_store_sk ss_store_sk) (cons 'ss_customer_sk ss_customer_sk) (cons 'ss_net_profit ss_net_profit) (cons 'ss_ticket_number ss_ticket_number))
)

(define (new-StoreReturn sr_returned_date_sk sr_item_sk sr_customer_sk sr_ticket_number sr_net_loss)
  (list (cons 'sr_returned_date_sk sr_returned_date_sk) (cons 'sr_item_sk sr_item_sk) (cons 'sr_customer_sk sr_customer_sk) (cons 'sr_ticket_number sr_ticket_number) (cons 'sr_net_loss sr_net_loss))
)

(define (new-CatalogSale cs_sold_date_sk cs_item_sk cs_bill_customer_sk cs_net_profit)
  (list (cons 'cs_sold_date_sk cs_sold_date_sk) (cons 'cs_item_sk cs_item_sk) (cons 'cs_bill_customer_sk cs_bill_customer_sk) (cons 'cs_net_profit cs_net_profit))
)

(define (new-DateDim d_date_sk d_moy d_year)
  (list (cons 'd_date_sk d_date_sk) (cons 'd_moy d_moy) (cons 'd_year d_year))
)

(define (new-Store s_store_sk s_store_id s_store_name)
  (list (cons 's_store_sk s_store_sk) (cons 's_store_id s_store_id) (cons 's_store_name s_store_name))
)

(define (new-Item i_item_sk i_item_id i_item_desc)
  (list (cons 'i_item_sk i_item_sk) (cons 'i_item_id i_item_id) (cons 'i_item_desc i_item_desc))
)

(define (test_TPCDS_Q25_aggregated_profit)
  (when (not (equal? result (list (list (cons "i_item_id" "ITEM1") (cons "i_item_desc" "Desc1") (cons "s_store_id" "S1") (cons "s_store_name" "Store1") (cons "store_sales_profit" 50.0) (cons "store_returns_loss" 10.0) (cons "catalog_sales_profit" 30.0))))) (error "expect failed"))
)

(define store_sales (list (list (cons "ss_sold_date_sk" 1) (cons "ss_item_sk" 1) (cons "ss_store_sk" 1) (cons "ss_customer_sk" 1) (cons "ss_net_profit" 50.0) (cons "ss_ticket_number" 1)) (list (cons "ss_sold_date_sk" 1) (cons "ss_item_sk" 2) (cons "ss_store_sk" 1) (cons "ss_customer_sk" 2) (cons "ss_net_profit" 20.0) (cons "ss_ticket_number" 2))))
(define store_returns (list (list (cons "sr_returned_date_sk" 2) (cons "sr_item_sk" 1) (cons "sr_customer_sk" 1) (cons "sr_ticket_number" 1) (cons "sr_net_loss" 10.0)) (list (cons "sr_returned_date_sk" 2) (cons "sr_item_sk" 2) (cons "sr_customer_sk" 2) (cons "sr_ticket_number" 2) (cons "sr_net_loss" 5.0))))
(define catalog_sales (list (list (cons "cs_sold_date_sk" 3) (cons "cs_item_sk" 1) (cons "cs_bill_customer_sk" 1) (cons "cs_net_profit" 30.0)) (list (cons "cs_sold_date_sk" 3) (cons "cs_item_sk" 2) (cons "cs_bill_customer_sk" 2) (cons "cs_net_profit" 15.0))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_moy" 4) (cons "d_year" 2000)) (list (cons "d_date_sk" 2) (cons "d_moy" 5) (cons "d_year" 2000)) (list (cons "d_date_sk" 3) (cons "d_moy" 6) (cons "d_year" 2000))))
(define store (list (list (cons "s_store_sk" 1) (cons "s_store_id" "S1") (cons "s_store_name" "Store1"))))
(define item (list (list (cons "i_item_sk" 1) (cons "i_item_id" "ITEM1") (cons "i_item_desc" "Desc1")) (list (cons "i_item_sk" 2) (cons "i_item_id" "ITEM2") (cons "i_item_desc" "Desc2"))))
(define result (let ((_tmp '()))
  (for-each (lambda (ss)
    (for-each (lambda (sr)
      (when (equal? (and (equal? (map-get ss "ss_ticket_number") (map-get sr "sr_ticket_number")) (map-get ss "ss_item_sk")) (map-get sr "sr_item_sk"))
        (for-each (lambda (cs)
          (when (equal? (and (equal? (map-get sr "sr_customer_sk") (map-get cs "cs_bill_customer_sk")) (map-get sr "sr_item_sk")) (map-get cs "cs_item_sk"))
            (for-each (lambda (d1)
              (when (equal? (map-get d1 "d_date_sk") (map-get ss "ss_sold_date_sk"))
                (for-each (lambda (d2)
                  (when (equal? (map-get d2 "d_date_sk") (map-get sr "sr_returned_date_sk"))
                    (for-each (lambda (d3)
                      (when (equal? (map-get d3 "d_date_sk") (map-get cs "cs_sold_date_sk"))
                        (for-each (lambda (s)
                          (when (equal? (map-get s "s_store_sk") (map-get ss "ss_store_sk"))
                            (for-each (lambda (i)
                              (when (equal? (map-get i "i_item_sk") (map-get ss "ss_item_sk"))
                                (when (<= (and (>= (and (<= (and (>= (and (equal? (and (equal? (map-get d1 "d_moy") 4) (map-get d1 "d_year")) 2000) (map-get d2 "d_moy")) 4) (map-get d2 "d_moy")) 10) (map-get d3 "d_moy")) 4) (map-get d3 "d_moy")) 10)
                                  (set! _tmp (append _tmp (list ss)))
                                )
                              )) (if (string? item) (string->list item) item))
                          )) (if (string? store) (string->list store) store))
                      )) (if (string? date_dim) (string->list date_dim) date_dim))
                  )) (if (string? date_dim) (string->list date_dim) date_dim))
              )) (if (string? date_dim) (string->list date_dim) date_dim))
          )) (if (string? catalog_sales) (string->list catalog_sales) catalog_sales))
      )) (if (string? store_returns) (string->list store_returns) store_returns))
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "i_item_id" (map-get (map-get g "key") "item_id")) (cons "i_item_desc" (map-get (map-get g "key") "item_desc")) (cons "s_store_id" (map-get (map-get g "key") "s_store_id")) (cons "s_store_name" (map-get (map-get g "key") "s_store_name")) (cons "store_sales_profit" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "ss_net_profit"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "store_returns_loss" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "sr_net_loss"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "catalog_sales_profit" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "cs_net_profit"))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (ss) (list (cons "item_id" (map-get i "i_item_id")) (cons "item_desc" (map-get i "i_item_desc")) (cons "s_store_id" (map-get s "s_store_id")) (cons "s_store_name" (map-get s "s_store_name"))))))
    _res)))
(_json result)
(run-test "TPCDS Q25 aggregated profit" test_TPCDS_Q25_aggregated_profit)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
