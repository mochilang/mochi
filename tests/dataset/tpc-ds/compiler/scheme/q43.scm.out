(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q43_simplified)
  (when (not (equal? result (list (list (cons "s_store_name" "Main") (cons "s_store_id" "S1") (cons "sun_sales" 10.0) (cons "mon_sales" 20.0) (cons "tue_sales" 30.0) (cons "wed_sales" 40.0) (cons "thu_sales" 50.0) (cons "fri_sales" 60.0) (cons "sat_sales" 70.0))))) (error "expect failed"))
)

(define date_dim (list (list (cons "date_sk" 1) (cons "d_day_name" "Sunday") (cons "d_year" 2020)) (list (cons "date_sk" 2) (cons "d_day_name" "Monday") (cons "d_year" 2020)) (list (cons "date_sk" 3) (cons "d_day_name" "Tuesday") (cons "d_year" 2020)) (list (cons "date_sk" 4) (cons "d_day_name" "Wednesday") (cons "d_year" 2020)) (list (cons "date_sk" 5) (cons "d_day_name" "Thursday") (cons "d_year" 2020)) (list (cons "date_sk" 6) (cons "d_day_name" "Friday") (cons "d_year" 2020)) (list (cons "date_sk" 7) (cons "d_day_name" "Saturday") (cons "d_year" 2020))))
(define store (list (list (cons "store_sk" 1) (cons "store_id" "S1") (cons "store_name" "Main") (cons "gmt_offset" 0))))
(define store_sales (list (list (cons "sold_date_sk" 1) (cons "store_sk" 1) (cons "sales_price" 10.0)) (list (cons "sold_date_sk" 2) (cons "store_sk" 1) (cons "sales_price" 20.0)) (list (cons "sold_date_sk" 3) (cons "store_sk" 1) (cons "sales_price" 30.0)) (list (cons "sold_date_sk" 4) (cons "store_sk" 1) (cons "sales_price" 40.0)) (list (cons "sold_date_sk" 5) (cons "store_sk" 1) (cons "sales_price" 50.0)) (list (cons "sold_date_sk" 6) (cons "store_sk" 1) (cons "sales_price" 60.0)) (list (cons "sold_date_sk" 7) (cons "store_sk" 1) (cons "sales_price" 70.0))))
(define year 2020)
(define gmt 0)
(define records (let ((_res '()))
  (for-each (lambda (d)
    (for-each (lambda (ss)
      (when (equal? (map-get ss "sold_date_sk") (map-get d "date_sk"))
        (for-each (lambda (s)
          (when (equal? (map-get ss "store_sk") (map-get s "store_sk"))
            (when (equal? (and (equal? (map-get s "gmt_offset") gmt) (map-get d "d_year")) year)
              (set! _res (append _res (list (list (cons "d_day_name" (map-get d "d_day_name")) (cons "s_store_name" (map-get s "store_name")) (cons "s_store_id" (map-get s "store_id")) (cons "price" (map-get ss "sales_price"))))))
            )
          )) (if (string? store) (string->list store) store))
      )) (if (string? store_sales) (string->list store_sales) store_sales))
  ) (if (string? date_dim) (string->list date_dim) date_dim))
  _res))
(define base (let ((_tmp '()))
  (for-each (lambda (r)
    (set! _tmp (append _tmp (list r)))
  ) (if (string? records) (string->list records) records))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "s_store_name" (map-get (map-get g "key") "name")) (cons "s_store_id" (map-get (map-get g "key") "id")) (cons "sun_sales" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (if (equal? (map-get x "d_day_name") "Sunday") (map-get x "price") 0.0))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "mon_sales" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (if (equal? (map-get x "d_day_name") "Monday") (map-get x "price") 0.0))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "tue_sales" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (if (equal? (map-get x "d_day_name") "Tuesday") (map-get x "price") 0.0))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "wed_sales" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (if (equal? (map-get x "d_day_name") "Wednesday") (map-get x "price") 0.0))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "thu_sales" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (if (equal? (map-get x "d_day_name") "Thursday") (map-get x "price") 0.0))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "fri_sales" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (if (equal? (map-get x "d_day_name") "Friday") (map-get x "price") 0.0))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "sat_sales" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (if (equal? (map-get x "d_day_name") "Saturday") (map-get x "price") 0.0))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (r) (list (cons "name" (map-get r "s_store_name")) (cons "id" (map-get r "s_store_id"))))))
    _res)))
(define result base)
(_json result)
(run-test "TPCDS Q43 simplified" test_TPCDS_Q43_simplified)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
