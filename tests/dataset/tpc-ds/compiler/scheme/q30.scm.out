(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q30_simplified)
  (when (not (equal? result (list (list (cons "c_customer_id" "C1") (cons "c_first_name" "John") (cons "c_last_name" "Doe") (cons "ctr_total_return" 150.0))))) (error "expect failed"))
)

(define web_returns (list (list (cons "wr_returning_customer_sk" 1) (cons "wr_returned_date_sk" 1) (cons "wr_return_amt" 100.0) (cons "wr_returning_addr_sk" 1)) (list (cons "wr_returning_customer_sk" 2) (cons "wr_returned_date_sk" 1) (cons "wr_return_amt" 30.0) (cons "wr_returning_addr_sk" 2)) (list (cons "wr_returning_customer_sk" 1) (cons "wr_returned_date_sk" 1) (cons "wr_return_amt" 50.0) (cons "wr_returning_addr_sk" 1))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_year" 2000))))
(define customer_address (list (list (cons "ca_address_sk" 1) (cons "ca_state" "CA")) (list (cons "ca_address_sk" 2) (cons "ca_state" "CA"))))
(define customer (list (list (cons "c_customer_sk" 1) (cons "c_customer_id" "C1") (cons "c_first_name" "John") (cons "c_last_name" "Doe") (cons "c_current_addr_sk" 1)) (list (cons "c_customer_sk" 2) (cons "c_customer_id" "C2") (cons "c_first_name" "Jane") (cons "c_last_name" "Smith") (cons "c_current_addr_sk" 2))))
(define customer_total_return (let ((_tmp '()))
  (for-each (lambda (wr)
    (for-each (lambda (d)
      (when (equal? (map-get wr "wr_returned_date_sk") (map-get d "d_date_sk"))
        (for-each (lambda (ca)
          (when (equal? (map-get wr "wr_returning_addr_sk") (map-get ca "ca_address_sk"))
            (when (equal? (and (equal? (map-get d "d_year") 2000) (map-get ca "ca_state")) "CA")
              (set! _tmp (append _tmp (list wr)))
            )
          )) (if (string? customer_address) (string->list customer_address) customer_address))
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? web_returns) (string->list web_returns) web_returns))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "ctr_customer_sk" (map-get (map-get g "key") "cust")) (cons "ctr_state" (map-get (map-get g "key") "state")) (cons "ctr_total_return" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "wr_return_amt"))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (wr) (list (cons "cust" (map-get wr "wr_returning_customer_sk")) (cons "state" (map-get ca "ca_state"))))))
    _res)))
(define avg_by_state (let ((_tmp '()))
  (for-each (lambda (ctr)
    (set! _tmp (append _tmp (list ctr)))
  ) (if (string? customer_total_return) (string->list customer_total_return) customer_total_return))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "state" (map-get g "key")) (cons "avg_return" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "ctr_total_return"))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (ctr) (map-get ctr "ctr_state"))))
    _res)))
(define result (let ((_res '()))
  (for-each (lambda (ctr)
    (for-each (lambda (avg)
      (when (equal? (map-get ctr "ctr_state") (map-get avg "state"))
        (for-each (lambda (c)
          (when (equal? (map-get ctr "ctr_customer_sk") (map-get c "c_customer_sk"))
            (when (* (> (map-get ctr "ctr_total_return") (map-get avg "avg_return")) 1.2)
              (set! _res (append _res (list (list (cons "c_customer_id" (map-get c "c_customer_id")) (cons "c_first_name" (map-get c "c_first_name")) (cons "c_last_name" (map-get c "c_last_name")) (cons "ctr_total_return" (map-get ctr "ctr_total_return"))))))
            )
          )) (if (string? customer) (string->list customer) customer))
      )) (if (string? avg_by_state) (string->list avg_by_state) avg_by_state))
  ) (if (string? customer_total_return) (string->list customer_total_return) customer_total_return))
  _res))
(_json result)
(run-test "TPCDS Q30 simplified" test_TPCDS_Q30_simplified)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
