(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n))))

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-StoreSale ss_sold_date_sk ss_item_sk ss_customer_sk ss_ticket_number ss_quantity ss_store_sk)
  (list (cons 'ss_sold_date_sk ss_sold_date_sk) (cons 'ss_item_sk ss_item_sk) (cons 'ss_customer_sk ss_customer_sk) (cons 'ss_ticket_number ss_ticket_number) (cons 'ss_quantity ss_quantity) (cons 'ss_store_sk ss_store_sk))
)

(define (new-StoreReturn sr_returned_date_sk sr_customer_sk sr_item_sk sr_ticket_number sr_return_quantity)
  (list (cons 'sr_returned_date_sk sr_returned_date_sk) (cons 'sr_customer_sk sr_customer_sk) (cons 'sr_item_sk sr_item_sk) (cons 'sr_ticket_number sr_ticket_number) (cons 'sr_return_quantity sr_return_quantity))
)

(define (new-CatalogSale cs_sold_date_sk cs_item_sk cs_bill_customer_sk cs_quantity)
  (list (cons 'cs_sold_date_sk cs_sold_date_sk) (cons 'cs_item_sk cs_item_sk) (cons 'cs_bill_customer_sk cs_bill_customer_sk) (cons 'cs_quantity cs_quantity))
)

(define (new-DateDim d_date_sk d_quarter_name)
  (list (cons 'd_date_sk d_date_sk) (cons 'd_quarter_name d_quarter_name))
)

(define (new-Store s_store_sk s_state)
  (list (cons 's_store_sk s_store_sk) (cons 's_state s_state))
)

(define (new-Item i_item_sk i_item_id i_item_desc)
  (list (cons 'i_item_sk i_item_sk) (cons 'i_item_id i_item_id) (cons 'i_item_desc i_item_desc))
)

(define (test_TPCDS_Q17_stats)
  (when (not (equal? result (list (list (cons "i_item_id" "I1") (cons "i_item_desc" "Item 1") (cons "s_state" "CA") (cons "store_sales_quantitycount" 1) (cons "store_sales_quantityave" 10.0) (cons "store_sales_quantitystdev" 0.0) (cons "store_sales_quantitycov" 0.0) (cons "store_returns_quantitycount" 1) (cons "store_returns_quantityave" 2.0) (cons "store_returns_quantitystdev" 0.0) (cons "store_returns_quantitycov" 0.0) (cons "catalog_sales_quantitycount" 1) (cons "catalog_sales_quantityave" 5.0) (cons "catalog_sales_quantitystdev" 0.0) (cons "catalog_sales_quantitycov" 0.0))))) (error "expect failed"))
)

(define store_sales (list (list (cons "ss_sold_date_sk" 1) (cons "ss_item_sk" 1) (cons "ss_customer_sk" 1) (cons "ss_ticket_number" 1) (cons "ss_quantity" 10) (cons "ss_store_sk" 1))))
(define store_returns (list (list (cons "sr_returned_date_sk" 2) (cons "sr_customer_sk" 1) (cons "sr_item_sk" 1) (cons "sr_ticket_number" 1) (cons "sr_return_quantity" 2))))
(define catalog_sales (list (list (cons "cs_sold_date_sk" 3) (cons "cs_item_sk" 1) (cons "cs_bill_customer_sk" 1) (cons "cs_quantity" 5))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_quarter_name" "1998Q1")) (list (cons "d_date_sk" 2) (cons "d_quarter_name" "1998Q2")) (list (cons "d_date_sk" 3) (cons "d_quarter_name" "1998Q3"))))
(define store (list (list (cons "s_store_sk" 1) (cons "s_state" "CA"))))
(define item (list (list (cons "i_item_sk" 1) (cons "i_item_id" "I1") (cons "i_item_desc" "Item 1"))))
(define joined (let ((_res '()))
  (for-each (lambda (ss)
    (for-each (lambda (sr)
      (when (equal? (and (equal? (and (equal? (map-get ss "ss_customer_sk") (map-get sr "sr_customer_sk")) (map-get ss "ss_item_sk")) (map-get sr "sr_item_sk")) (map-get ss "ss_ticket_number")) (map-get sr "sr_ticket_number"))
        (for-each (lambda (cs)
          (when (equal? (and (equal? (map-get sr "sr_customer_sk") (map-get cs "cs_bill_customer_sk")) (map-get sr "sr_item_sk")) (map-get cs "cs_item_sk"))
            (for-each (lambda (d1)
              (when (equal? (and (equal? (map-get ss "ss_sold_date_sk") (map-get d1 "d_date_sk")) (map-get d1 "d_quarter_name")) "1998Q1")
                (for-each (lambda (d2)
                  (when (if (member (and (equal? (map-get sr "sr_returned_date_sk") (map-get d2 "d_date_sk")) (map-get d2 "d_quarter_name")) (list "1998Q1" "1998Q2" "1998Q3")) #t #f)
                    (for-each (lambda (d3)
                      (when (if (member (and (equal? (map-get cs "cs_sold_date_sk") (map-get d3 "d_date_sk")) (map-get d3 "d_quarter_name")) (list "1998Q1" "1998Q2" "1998Q3")) #t #f)
                        (for-each (lambda (s)
                          (when (equal? (map-get ss "ss_store_sk") (map-get s "s_store_sk"))
                            (for-each (lambda (i)
                              (when (equal? (map-get ss "ss_item_sk") (map-get i "i_item_sk"))
                                (set! _res (append _res (list (list (cons "qty" (map-get ss "ss_quantity")) (cons "ret" (map-get sr "sr_return_quantity")) (cons "csq" (map-get cs "cs_quantity")) (cons "i_item_id" (map-get i "i_item_id")) (cons "i_item_desc" (map-get i "i_item_desc")) (cons "s_state" (map-get s "s_state"))))))
                              )) (if (string? item) (string->list item) item))
                          )) (if (string? store) (string->list store) store))
                      )) (if (string? date_dim) (string->list date_dim) date_dim))
                  )) (if (string? date_dim) (string->list date_dim) date_dim))
              )) (if (string? date_dim) (string->list date_dim) date_dim))
          )) (if (string? catalog_sales) (string->list catalog_sales) catalog_sales))
      )) (if (string? store_returns) (string->list store_returns) store_returns))
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res))
(define result (let ((_tmp '()))
  (for-each (lambda (j)
    (set! _tmp (append _tmp (list j)))
  ) (if (string? joined) (string->list joined) joined))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "i_item_id" (map-get (map-get g "key") "i_item_id")) (cons "i_item_desc" (map-get (map-get g "key") "i_item_desc")) (cons "s_state" (map-get (map-get g "key") "s_state")) (cons "store_sales_quantitycount" (_count (let ((_res '()))
  (for-each (lambda (_)
    (set! _res (append _res (list _)))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "store_sales_quantityave" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "qty"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "store_sales_quantitystdev" 0.0) (cons "store_sales_quantitycov" 0.0) (cons "store_returns_quantitycount" (_count (let ((_res '()))
  (for-each (lambda (_)
    (set! _res (append _res (list _)))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "store_returns_quantityave" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "ret"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "store_returns_quantitystdev" 0.0) (cons "store_returns_quantitycov" 0.0) (cons "catalog_sales_quantitycount" (_count (let ((_res '()))
  (for-each (lambda (_)
    (set! _res (append _res (list _)))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "catalog_sales_quantityave" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "csq"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "catalog_sales_quantitystdev" 0.0) (cons "catalog_sales_quantitycov" 0.0)))))
    ) (_group_by _tmp (lambda (j) (list (cons "i_item_id" (map-get j "i_item_id")) (cons "i_item_desc" (map-get j "i_item_desc")) (cons "s_state" (map-get j "s_state"))))))
    _res)))
(_json result)
(run-test "TPCDS Q17 stats" test_TPCDS_Q17_stats)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
