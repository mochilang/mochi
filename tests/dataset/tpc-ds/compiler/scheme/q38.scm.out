(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_union_all a b)
  (append a b))

(define (_union a b)
  (let ((res a))
    (for-each (lambda (it)
                (when (not (member it res))
                  (set! res (append res (list it)))))
              b)
    res))

(define (_except a b)
  (let ((res '()))
    (for-each (lambda (it)
                (when (not (member it b))
                  (set! res (append res (list it)))))
              a)
    res))

(define (_intersect a b)
  (let ((res '()))
    (for-each (lambda (it)
                (when (and (member it b) (not (member it res)))
                  (set! res (append res (list it)))))
              a)
    res))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (distinct xs)
  (call/cc (lambda (return)
    (define out '())
    (set! out (list ))
    (let loop ((x_idx 0))
      (if (< x_idx (length xs))
        (begin
          (let ((x (list-ref xs x_idx)))
            (if (not (contains out x))
              (begin
                (set! out (append out x))
              )
              '()
            )
          )
          (loop (+ x_idx 1))
        )
      '()
    )
    (return out)
  ))
)

(define (test_TPCDS_Q38_simplified)
  (when (not (equal? result 1)) (error "expect failed"))
)

(define customer (list (list (cons "c_customer_sk" 1) (cons "c_last_name" "Smith") (cons "c_first_name" "John")) (list (cons "c_customer_sk" 2) (cons "c_last_name" "Jones") (cons "c_first_name" "Alice"))))
(define store_sales (list (list (cons "ss_customer_sk" 1) (cons "d_month_seq" 1200)) (list (cons "ss_customer_sk" 2) (cons "d_month_seq" 1205))))
(define catalog_sales (list (list (cons "cs_bill_customer_sk" 1) (cons "d_month_seq" 1203))))
(define web_sales (list (list (cons "ws_bill_customer_sk" 1) (cons "d_month_seq" 1206))))
(define store_ids (distinct (let ((_res '()))
  (for-each (lambda (s)
    (when (<= (and (>= (map-get s "d_month_seq") 1200) (map-get s "d_month_seq")) 1211)
      (set! _res (append _res (list (map-get s "ss_customer_sk"))))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res)))
(define catalog_ids (distinct (let ((_res '()))
  (for-each (lambda (c)
    (when (<= (and (>= (map-get c "d_month_seq") 1200) (map-get c "d_month_seq")) 1211)
      (set! _res (append _res (list (map-get c "cs_bill_customer_sk"))))
    )
  ) (if (string? catalog_sales) (string->list catalog_sales) catalog_sales))
  _res)))
(define web_ids (distinct (let ((_res '()))
  (for-each (lambda (w)
    (when (<= (and (>= (map-get w "d_month_seq") 1200) (map-get w "d_month_seq")) 1211)
      (set! _res (append _res (list (map-get w "ws_bill_customer_sk"))))
    )
  ) (if (string? web_sales) (string->list web_sales) web_sales))
  _res)))
(define hot (_intersect (_intersect store_ids catalog_ids) web_ids))
(define result (length hot))
(_json result)
(run-test "TPCDS Q38 simplified" test_TPCDS_Q38_simplified)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
