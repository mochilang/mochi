(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-StoreSale ss_item_sk ss_sold_date_sk ss_ext_sales_price)
  (list (cons 'ss_item_sk ss_item_sk) (cons 'ss_sold_date_sk ss_sold_date_sk) (cons 'ss_ext_sales_price ss_ext_sales_price))
)

(define (new-Item i_item_sk i_item_id i_item_desc i_category i_class i_current_price)
  (list (cons 'i_item_sk i_item_sk) (cons 'i_item_id i_item_id) (cons 'i_item_desc i_item_desc) (cons 'i_category i_category) (cons 'i_class i_class) (cons 'i_current_price i_current_price))
)

(define (new-DateDim d_date_sk d_date)
  (list (cons 'd_date_sk d_date_sk) (cons 'd_date d_date))
)

(define (test_TPCDS_Q98_revenue)
  (when (not (equal? result (list (list (cons "i_item_id" "I1") (cons "i_item_desc" "desc1") (cons "i_category" "CatA") (cons "i_class" "Class1") (cons "i_current_price" 100.0) (cons "itemrevenue" 50.0) (cons "revenueratio" 33.333333333333336)) (list (cons "i_item_id" "I2") (cons "i_item_desc" "desc2") (cons "i_category" "CatB") (cons "i_class" "Class1") (cons "i_current_price" 200.0) (cons "itemrevenue" 100.0) (cons "revenueratio" 66.66666666666667))))) (error "expect failed"))
)

(define store_sales (list (list (cons "ss_item_sk" 1) (cons "ss_sold_date_sk" 1) (cons "ss_ext_sales_price" 50.0)) (list (cons "ss_item_sk" 2) (cons "ss_sold_date_sk" 1) (cons "ss_ext_sales_price" 100.0))))
(define item (list (list (cons "i_item_sk" 1) (cons "i_item_id" "I1") (cons "i_item_desc" "desc1") (cons "i_category" "CatA") (cons "i_class" "Class1") (cons "i_current_price" 100.0)) (list (cons "i_item_sk" 2) (cons "i_item_id" "I2") (cons "i_item_desc" "desc2") (cons "i_category" "CatB") (cons "i_class" "Class1") (cons "i_current_price" 200.0))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_date" "2000-02-01"))))
(define grouped (let ((_tmp '()))
  (for-each (lambda (ss)
    (for-each (lambda (i)
      (when (equal? (map-get ss "ss_item_sk") (map-get i "i_item_sk"))
        (for-each (lambda (d)
          (when (equal? (map-get ss "ss_sold_date_sk") (map-get d "d_date_sk"))
            (set! _tmp (append _tmp (list ss)))
          )) (if (string? date_dim) (string->list date_dim) date_dim))
      )) (if (string? item) (string->list item) item))
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "i_item_id" (map-get (map-get g "key") "item_id")) (cons "i_item_desc" (map-get (map-get g "key") "item_desc")) (cons "i_category" (map-get (map-get g "key") "category")) (cons "i_class" (map-get (map-get g "key") "class")) (cons "i_current_price" (map-get (map-get g "key") "price")) (cons "itemrevenue" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "ss_ext_sales_price"))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (ss) (list (cons "item_id" (map-get i "i_item_id")) (cons "item_desc" (map-get i "i_item_desc")) (cons "category" (map-get i "i_category")) (cons "class" (map-get i "i_class")) (cons "price" (map-get i "i_current_price"))))))
    _res)))
(define totals (let ((_tmp '()))
  (for-each (lambda (g)
    (set! _tmp (append _tmp (list g)))
  ) (if (string? grouped) (string->list grouped) grouped))
  (let ((_res '()))
    (for-each (lambda (cg)
      (set! _res (append _res (list (list (cons "class" (map-get cg "key")) (cons "total" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "itemrevenue"))))
  ) (if (string? cg) (string->list cg) cg))
  _res)))))))
    ) (_group_by _tmp (lambda (g) (map-get g "i_class"))))
    _res)))
(define result (let ((_res '()))
  (for-each (lambda (g)
    (for-each (lambda (t)
      (when (equal? (map-get g "i_class") (map-get t "class"))
        (set! _res (append _res (list (list (cons "i_item_id" (map-get g "i_item_id")) (cons "i_item_desc" (map-get g "i_item_desc")) (cons "i_category" (map-get g "i_category")) (cons "i_class" (map-get g "i_class")) (cons "i_current_price" (map-get g "i_current_price")) (cons "itemrevenue" (map-get g "itemrevenue")) (cons "revenueratio" (/ (* (map-get g "itemrevenue") 100) (map-get t "total")))))))
      )) (if (string? totals) (string->list totals) totals))
  ) (if (string? grouped) (string->list grouped) grouped))
  _res))
(_json result)
(run-test "TPCDS Q98 revenue" test_TPCDS_Q98_revenue)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
