(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q72_simplified)
  (when (not (equal? result (list (list (cons "i_item_desc" "ItemA") (cons "w_warehouse_name" "Main") (cons "d_week_seq" 10) (cons "no_promo" 1) (cons "promo" 0) (cons "total_cnt" 1))))) (error "expect failed"))
)

(define catalog_sales (list (list (cons "cs_item_sk" 1) (cons "cs_order_number" 1) (cons "cs_quantity" 1) (cons "cs_sold_date_sk" 1) (cons "cs_ship_date_sk" 3) (cons "cs_bill_cdemo_sk" 1) (cons "cs_bill_hdemo_sk" 1) (cons "cs_promo_sk" '()))))
(define inventory (list (list (cons "inv_item_sk" 1) (cons "inv_warehouse_sk" 1) (cons "inv_date_sk" 2) (cons "inv_quantity_on_hand" 0))))
(define warehouse (list (list (cons "w_warehouse_sk" 1) (cons "w_warehouse_name" "Main"))))
(define item (list (list (cons "i_item_sk" 1) (cons "i_item_desc" "ItemA"))))
(define customer_demographics (list (list (cons "cd_demo_sk" 1) (cons "cd_marital_status" "M"))))
(define household_demographics (list (list (cons "hd_demo_sk" 1) (cons "hd_buy_potential" "5001-10000"))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_week_seq" 10) (cons "d_date" 1) (cons "d_year" 2000)) (list (cons "d_date_sk" 2) (cons "d_week_seq" 10) (cons "d_date" 1) (cons "d_year" 2000)) (list (cons "d_date_sk" 3) (cons "d_week_seq" 10) (cons "d_date" 7) (cons "d_year" 2000))))
(define result (let ((_tmp '()))
  (for-each (lambda (cs)
    (for-each (lambda (inv)
      (when (equal? (map-get inv "inv_item_sk") (map-get cs "cs_item_sk"))
        (for-each (lambda (w)
          (when (equal? (map-get w "w_warehouse_sk") (map-get inv "inv_warehouse_sk"))
            (for-each (lambda (i)
              (when (equal? (map-get i "i_item_sk") (map-get cs "cs_item_sk"))
                (for-each (lambda (cd)
                  (when (equal? (map-get cd "cd_demo_sk") (map-get cs "cs_bill_cdemo_sk"))
                    (for-each (lambda (hd)
                      (when (equal? (map-get hd "hd_demo_sk") (map-get cs "cs_bill_hdemo_sk"))
                        (for-each (lambda (d1)
                          (when (equal? (map-get d1 "d_date_sk") (map-get cs "cs_sold_date_sk"))
                            (for-each (lambda (d2)
                              (when (equal? (map-get d2 "d_date_sk") (map-get inv "inv_date_sk"))
                                (for-each (lambda (d3)
                                  (when (equal? (map-get d3 "d_date_sk") (map-get cs "cs_ship_date_sk"))
                                    (when (equal? (and (equal? (and (equal? (and (+ (> (and (< (and (equal? (map-get d1 "d_week_seq") (map-get d2 "d_week_seq")) (map-get inv "inv_quantity_on_hand")) (map-get cs "cs_quantity")) (map-get d3 "d_date")) (map-get d1 "d_date")) 5) (map-get hd "hd_buy_potential")) "5001-10000") (map-get d1 "d_year")) 2000) (map-get cd "cd_marital_status")) "M")
                                      (set! _tmp (append _tmp (list cs)))
                                    )
                                  )) (if (string? date_dim) (string->list date_dim) date_dim))
                              )) (if (string? date_dim) (string->list date_dim) date_dim))
                          )) (if (string? date_dim) (string->list date_dim) date_dim))
                      )) (if (string? household_demographics) (string->list household_demographics) household_demographics))
                  )) (if (string? customer_demographics) (string->list customer_demographics) customer_demographics))
              )) (if (string? item) (string->list item) item))
          )) (if (string? warehouse) (string->list warehouse) warehouse))
      )) (if (string? inventory) (string->list inventory) inventory))
  ) (if (string? catalog_sales) (string->list catalog_sales) catalog_sales))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "i_item_desc" (map-get (map-get g "key") "item_desc")) (cons "w_warehouse_name" (map-get (map-get g "key") "warehouse")) (cons "d_week_seq" (map-get (map-get g "key") "week_seq")) (cons "no_promo" (_count (let ((_res '()))
  (for-each (lambda (x)
    (when (equal? (map-get x "cs_promo_sk") '())
      (set! _res (append _res (list x)))
    )
  ) (if (string? g) (string->list g) g))
  _res))) (cons "promo" (_count (let ((_res '()))
  (for-each (lambda (x)
    (when (not (equal? (map-get x "cs_promo_sk") '()))
      (set! _res (append _res (list x)))
    )
  ) (if (string? g) (string->list g) g))
  _res))) (cons "total_cnt" (_count g))))))
    ) (_group_by _tmp (lambda (cs) (list (cons "item_desc" (map-get i "i_item_desc")) (cons "warehouse" (map-get w "w_warehouse_name")) (cons "week_seq" (map-get d1 "d_week_seq"))))))
    _res)))
(_json result)
(run-test "TPCDS Q72 simplified" test_TPCDS_Q72_simplified)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
