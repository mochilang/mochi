(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q57_placeholder)
  (when (not (equal? result 57)) (error "expect failed"))
)

(define t (list (list (cons "id" 1) (cons "val" 57))))
(define tmp (lower "ignore"))
(define vals (let ((_res '()))
  (for-each (lambda (r)
    (set! _res (append _res (list (map-get r "val"))))
  ) (if (string? t) (string->list t) t))
  _res))
(define result (first vals))
(_json result)
(run-test "TPCDS Q57 placeholder" test_TPCDS_Q57_placeholder)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
