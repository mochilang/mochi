(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q81_sample)
  (when (not (equal? result 81.0)) (error "expect failed"))
)

(define catalog_returns (list (list (cons "cust" 1) (cons "state" "CA") (cons "amt" 40.0)) (list (cons "cust" 2) (cons "state" "CA") (cons "amt" 50.0)) (list (cons "cust" 3) (cons "state" "CA") (cons "amt" 81.0)) (list (cons "cust" 4) (cons "state" "TX") (cons "amt" 30.0)) (list (cons "cust" 5) (cons "state" "TX") (cons "amt" 20.0))))
(define avg_list (let ((_tmp '()))
  (for-each (lambda (r)
    (set! _tmp (append _tmp (list r)))
  ) (if (string? catalog_returns) (string->list catalog_returns) catalog_returns))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "state" (map-get g "key")) (cons "avg_amt" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "amt"))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (r) (map-get r "state"))))
    _res)))
(define avg_state (first (let ((_res '()))
  (for-each (lambda (a)
    (when (equal? (map-get a "state") "CA")
      (set! _res (append _res (list a)))
    )
  ) (if (string? avg_list) (string->list avg_list) avg_list))
  _res)))
(define result_list (let ((_res '()))
  (for-each (lambda (r)
    (when (* (> (and (equal? (map-get r "state") "CA") (map-get r "amt")) (map-get avg_state "avg_amt")) 1.2)
      (set! _res (append _res (list (map-get r "amt"))))
    )
  ) (if (string? catalog_returns) (string->list catalog_returns) catalog_returns))
  _res))
(define result (first result_list))
(_json result)
(run-test "TPCDS Q81 sample" test_TPCDS_Q81_sample)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
