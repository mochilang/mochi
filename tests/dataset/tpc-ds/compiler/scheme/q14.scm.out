(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-StoreSale ss_item_sk ss_list_price ss_quantity ss_sold_date_sk)
  (list (cons 'ss_item_sk ss_item_sk) (cons 'ss_list_price ss_list_price) (cons 'ss_quantity ss_quantity) (cons 'ss_sold_date_sk ss_sold_date_sk))
)

(define (new-CatalogSale cs_item_sk cs_list_price cs_quantity cs_sold_date_sk)
  (list (cons 'cs_item_sk cs_item_sk) (cons 'cs_list_price cs_list_price) (cons 'cs_quantity cs_quantity) (cons 'cs_sold_date_sk cs_sold_date_sk))
)

(define (new-WebSale ws_item_sk ws_list_price ws_quantity ws_sold_date_sk)
  (list (cons 'ws_item_sk ws_item_sk) (cons 'ws_list_price ws_list_price) (cons 'ws_quantity ws_quantity) (cons 'ws_sold_date_sk ws_sold_date_sk))
)

(define (new-Item i_item_sk i_brand_id i_class_id i_category_id)
  (list (cons 'i_item_sk i_item_sk) (cons 'i_brand_id i_brand_id) (cons 'i_class_id i_class_id) (cons 'i_category_id i_category_id))
)

(define (new-DateDim d_date_sk d_year d_moy)
  (list (cons 'd_date_sk d_date_sk) (cons 'd_year d_year) (cons 'd_moy d_moy))
)

(define (test_TPCDS_Q14_cross_channel)
  (when (not (equal? result (list (list (cons "channel" "store") (cons "i_brand_id" 1) (cons "i_class_id" 1) (cons "i_category_id" 1) (cons "sales" 60.0) (cons "number_sales" 1))))) (error "expect failed"))
)

(define store_sales (list (list (cons "ss_item_sk" 1) (cons "ss_list_price" 10.0) (cons "ss_quantity" 2) (cons "ss_sold_date_sk" 1)) (list (cons "ss_item_sk" 1) (cons "ss_list_price" 20.0) (cons "ss_quantity" 3) (cons "ss_sold_date_sk" 2))))
(define catalog_sales (list (list (cons "cs_item_sk" 1) (cons "cs_list_price" 10.0) (cons "cs_quantity" 2) (cons "cs_sold_date_sk" 1))))
(define web_sales (list (list (cons "ws_item_sk" 1) (cons "ws_list_price" 30.0) (cons "ws_quantity" 1) (cons "ws_sold_date_sk" 1))))
(define item (list (list (cons "i_item_sk" 1) (cons "i_brand_id" 1) (cons "i_class_id" 1) (cons "i_category_id" 1))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_year" 2000) (cons "d_moy" 12)) (list (cons "d_date_sk" 2) (cons "d_year" 2002) (cons "d_moy" 11))))
(define cross_items (list (list (cons "ss_item_sk" 1))))
(define avg_sales (_avg (list 20.0 20.0 30.0)))
(define store_filtered (let ((_tmp '()))
  (for-each (lambda (ss)
    (for-each (lambda (d)
      (when (equal? (and (equal? (and (equal? (map-get ss "ss_sold_date_sk") (map-get d "d_date_sk")) (map-get d "d_year")) 2002) (map-get d "d_moy")) 11)
        (when (if (member (map-get ss "ss_item_sk") (let ((_res '()))
  (for-each (lambda (ci)
    (set! _res (append _res (list (map-get ci "ss_item_sk"))))
  ) (if (string? cross_items) (string->list cross_items) cross_items))
  _res)) #t #f)
          (set! _tmp (append _tmp (list ss)))
        )
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "channel" "store") (cons "sales" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (* (map-get x "ss_quantity") (map-get x "ss_list_price")))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "number_sales" (_count (let ((_res '()))
  (for-each (lambda (_)
    (set! _res (append _res (list _)))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (ss) (list (cons "brand_id" 1) (cons "class_id" 1) (cons "category_id" 1)))))
    _res)))
(define result (let ((_res '()))
  (for-each (lambda (r)
    (when (> (map-get r "sales") avg_sales)
      (set! _res (append _res (list (list (cons "channel" (map-get r "channel")) (cons "i_brand_id" 1) (cons "i_class_id" 1) (cons "i_category_id" 1) (cons "sales" (map-get r "sales")) (cons "number_sales" (map-get r "number_sales"))))))
    )
  ) (if (string? store_filtered) (string->list store_filtered) store_filtered))
  _res))
(_json result)
(run-test "TPCDS Q14 cross channel" test_TPCDS_Q14_cross_channel)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
