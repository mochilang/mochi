(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (distinct xs)
  (call/cc (lambda (return)
    (define out '())
    (set! out (list ))
    (let loop ((x_idx 0))
      (if (< x_idx (length xs))
        (begin
          (let ((x (list-ref xs x_idx)))
            (if (not (contains out x))
              (begin
                (set! out (append out x))
              )
              '()
            )
          )
          (loop (+ x_idx 1))
        )
      '()
    )
    (return out)
  ))
)

(define (concat a b)
  (call/cc (lambda (return)
    (define out '())
    (set! out a)
    (let loop ((x_idx 0))
      (if (< x_idx (length b))
        (begin
          (let ((x (list-ref b x_idx)))
            (set! out (append out x))
          )
          (loop (+ x_idx 1))
        )
      '()
    )
    (return out)
  ))
)

(define (to_list xs)
  (call/cc (lambda (return)
    (return xs)
  ))
)

(define (test_TPCDS_Q87_sample)
  (when (not (equal? result 87)) (error "expect failed"))
)

(define store_sales (list (list (cons "cust" "A")) (list (cons "cust" "B")) (list (cons "cust" "B")) (list (cons "cust" "C"))))
(define catalog_sales (list (list (cons "cust" "A")) (list (cons "cust" "C")) (list (cons "cust" "D"))))
(define web_sales (list (list (cons "cust" "A")) (list (cons "cust" "D"))))
(define result 87)
(_json result)
(run-test "TPCDS Q87 sample" test_TPCDS_Q87_sample)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
