(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q35_simplified)
  (when (not (equal? groups (list (list (cons "ca_state" "CA") (cons "cd_gender" "M") (cons "cd_marital_status" "S") (cons "cd_dep_count" 1) (cons "cd_dep_employed_count" 1) (cons "cd_dep_college_count" 0) (cons "cnt" 1))))) (error "expect failed"))
)

(define customer (list (list (cons "c_customer_sk" 1) (cons "c_current_addr_sk" 1) (cons "c_current_cdemo_sk" 1)) (list (cons "c_customer_sk" 2) (cons "c_current_addr_sk" 2) (cons "c_current_cdemo_sk" 2))))
(define customer_address (list (list (cons "ca_address_sk" 1) (cons "ca_state" "CA")) (list (cons "ca_address_sk" 2) (cons "ca_state" "NY"))))
(define customer_demographics (list (list (cons "cd_demo_sk" 1) (cons "cd_gender" "M") (cons "cd_marital_status" "S") (cons "cd_dep_count" 1) (cons "cd_dep_employed_count" 1) (cons "cd_dep_college_count" 0)) (list (cons "cd_demo_sk" 2) (cons "cd_gender" "F") (cons "cd_marital_status" "M") (cons "cd_dep_count" 2) (cons "cd_dep_employed_count" 1) (cons "cd_dep_college_count" 1))))
(define store_sales (list (list (cons "ss_customer_sk" 1) (cons "ss_sold_date_sk" 1))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_year" 2000) (cons "d_qoy" 1))))
(define purchased (let ((_res '()))
  (for-each (lambda (ss)
    (for-each (lambda (d)
      (when (equal? (map-get ss "ss_sold_date_sk") (map-get d "d_date_sk"))
        (when (< (and (equal? (map-get d "d_year") 2000) (map-get d "d_qoy")) 4)
          (set! _res (append _res (list (map-get ss "ss_customer_sk"))))
        )
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res))
(define groups (let ((_tmp '()))
  (for-each (lambda (c)
    (for-each (lambda (ca)
      (when (equal? (map-get c "c_current_addr_sk") (map-get ca "ca_address_sk"))
        (for-each (lambda (cd)
          (when (equal? (map-get c "c_current_cdemo_sk") (map-get cd "cd_demo_sk"))
            (when (if (member (map-get c "c_customer_sk") purchased) #t #f)
              (set! _tmp (append _tmp (list c)))
            )
          )) (if (string? customer_demographics) (string->list customer_demographics) customer_demographics))
      )) (if (string? customer_address) (string->list customer_address) customer_address))
  ) (if (string? customer) (string->list customer) customer))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "ca_state" (map-get (map-get g "key") "state")) (cons "cd_gender" (map-get (map-get g "key") "gender")) (cons "cd_marital_status" (map-get (map-get g "key") "marital")) (cons "cd_dep_count" (map-get (map-get g "key") "dep")) (cons "cd_dep_employed_count" (map-get (map-get g "key") "emp")) (cons "cd_dep_college_count" (map-get (map-get g "key") "col")) (cons "cnt" (_count g))))))
    ) (_group_by _tmp (lambda (c) (list (cons "state" (map-get ca "ca_state")) (cons "gender" (map-get cd "cd_gender")) (cons "marital" (map-get cd "cd_marital_status")) (cons "dep" (map-get cd "cd_dep_count")) (cons "emp" (map-get cd "cd_dep_employed_count")) (cons "col" (map-get cd "cd_dep_college_count"))))))
    _res)))
(_json groups)
(run-test "TPCDS Q35 simplified" test_TPCDS_Q35_simplified)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
