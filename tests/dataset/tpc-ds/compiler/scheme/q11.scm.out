(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-Customer c_customer_sk c_customer_id c_first_name c_last_name)
  (list (cons 'c_customer_sk c_customer_sk) (cons 'c_customer_id c_customer_id) (cons 'c_first_name c_first_name) (cons 'c_last_name c_last_name))
)

(define (new-StoreSale ss_customer_sk ss_sold_date_sk ss_ext_list_price)
  (list (cons 'ss_customer_sk ss_customer_sk) (cons 'ss_sold_date_sk ss_sold_date_sk) (cons 'ss_ext_list_price ss_ext_list_price))
)

(define (new-WebSale ws_bill_customer_sk ws_sold_date_sk ws_ext_list_price)
  (list (cons 'ws_bill_customer_sk ws_bill_customer_sk) (cons 'ws_sold_date_sk ws_sold_date_sk) (cons 'ws_ext_list_price ws_ext_list_price))
)

(define (test_TPCDS_Q11_growth)
  (when (not (equal? result (list (list (cons "customer_id" "C1") (cons "customer_first_name" "John") (cons "customer_last_name" "Doe"))))) (error "expect failed"))
)

(define customer (list (list (cons "c_customer_sk" 1) (cons "c_customer_id" "C1") (cons "c_first_name" "John") (cons "c_last_name" "Doe"))))
(define store_sales (list (list (cons "ss_customer_sk" 1) (cons "ss_sold_date_sk" 1998) (cons "ss_ext_list_price" 60.0)) (list (cons "ss_customer_sk" 1) (cons "ss_sold_date_sk" 1999) (cons "ss_ext_list_price" 90.0))))
(define web_sales (list (list (cons "ws_bill_customer_sk" 1) (cons "ws_sold_date_sk" 1998) (cons "ws_ext_list_price" 50.0)) (list (cons "ws_bill_customer_sk" 1) (cons "ws_sold_date_sk" 1999) (cons "ws_ext_list_price" 150.0))))
(define ss98 (_sum (let ((_res '()))
  (for-each (lambda (ss)
    (when (equal? (map-get ss "ss_sold_date_sk") 1998)
      (set! _res (append _res (list (map-get ss "ss_ext_list_price"))))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res)))
(define ss99 (_sum (let ((_res '()))
  (for-each (lambda (ss)
    (when (equal? (map-get ss "ss_sold_date_sk") 1999)
      (set! _res (append _res (list (map-get ss "ss_ext_list_price"))))
    )
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res)))
(define ws98 (_sum (let ((_res '()))
  (for-each (lambda (ws)
    (when (equal? (map-get ws "ws_sold_date_sk") 1998)
      (set! _res (append _res (list (map-get ws "ws_ext_list_price"))))
    )
  ) (if (string? web_sales) (string->list web_sales) web_sales))
  _res)))
(define ws99 (_sum (let ((_res '()))
  (for-each (lambda (ws)
    (when (equal? (map-get ws "ws_sold_date_sk") 1999)
      (set! _res (append _res (list (map-get ws "ws_ext_list_price"))))
    )
  ) (if (string? web_sales) (string->list web_sales) web_sales))
  _res)))
(define growth_ok (> (and (> (and (> ws98 0) ss98) 0) (/ ws99 ws98)) (/ ss99 ss98)))
(define result (if growth_ok (list (list (cons "customer_id" "C1") (cons "customer_first_name" "John") (cons "customer_last_name" "Doe"))) (list )))
(_json result)
(run-test "TPCDS Q11 growth" test_TPCDS_Q11_growth)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
