(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q39_simplified)
  (when (not (equal? summary (list (list (cons "w_warehouse_sk" 1) (cons "i_item_sk" 1) (cons "cov" 1.539600717839002))))) (error "expect failed"))
)

(define inventory (list (list (cons "inv_item_sk" 1) (cons "inv_warehouse_sk" 1) (cons "inv_date_sk" 1) (cons "inv_quantity_on_hand" 10)) (list (cons "inv_item_sk" 1) (cons "inv_warehouse_sk" 1) (cons "inv_date_sk" 2) (cons "inv_quantity_on_hand" 10)) (list (cons "inv_item_sk" 1) (cons "inv_warehouse_sk" 1) (cons "inv_date_sk" 3) (cons "inv_quantity_on_hand" 250))))
(define item (list (list (cons "i_item_sk" 1))))
(define warehouse (list (list (cons "w_warehouse_sk" 1) (cons "w_warehouse_name" "W1"))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_year" 2000) (cons "d_moy" 1)) (list (cons "d_date_sk" 2) (cons "d_year" 2000) (cons "d_moy" 2)) (list (cons "d_date_sk" 3) (cons "d_year" 2000) (cons "d_moy" 3))))
(define monthly (let ((_tmp '()))
  (for-each (lambda (inv)
    (for-each (lambda (d)
      (when (equal? (map-get inv "inv_date_sk") (map-get d "d_date_sk"))
        (for-each (lambda (i)
          (when (equal? (map-get inv "inv_item_sk") (map-get i "i_item_sk"))
            (for-each (lambda (w)
              (when (equal? (map-get inv "inv_warehouse_sk") (map-get w "w_warehouse_sk"))
                (when (equal? (map-get d "d_year") 2000)
                  (set! _tmp (append _tmp (list inv)))
                )
              )) (if (string? warehouse) (string->list warehouse) warehouse))
          )) (if (string? item) (string->list item) item))
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? inventory) (string->list inventory) inventory))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "w" (map-get (map-get g "key") "w")) (cons "i" (map-get (map-get g "key") "i")) (cons "qty" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "inv_quantity_on_hand"))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (inv) (list (cons "w" (map-get w "w_warehouse_sk")) (cons "i" (map-get i "i_item_sk")) (cons "month" (map-get d "d_moy"))))))
    _res)))
(define grouped (list ))
(let loop ((m_idx 0))
  (if (< m_idx (length monthly))
    (begin
      (let ((m (list-ref monthly m_idx)))
        (define key (format "~a" (list (cons "w" (map-get m "w")) (cons "i" (map-get m "i")))))
        (if (if (assoc key grouped) #t #f)
          (begin
            (define g (map-get grouped key))
            (set! grouped (map-set grouped key (list (cons "w" (map-get g "w")) (cons "i" (map-get g "i")) (cons "qtys" (append (map-get g "qtys") (map-get m "qty"))))))
          )
          (begin
            (set! grouped (map-set grouped key (list (cons "w" (map-get m "w")) (cons "i" (map-get m "i")) (cons "qtys" (list (map-get m "qty"))))))
          )
        )
      )
      (loop (+ m_idx 1))
    )
  '()
)
(define summary (list ))
(let loop ((g_idx 0))
  (if (< g_idx (length (values grouped)))
    (begin
      (let ((g (list-ref (values grouped) g_idx)))
        (define mean (_avg (map-get g "qtys")))
        (define sumsq 0.0)
        (let loop ((q_idx 0))
          (if (< q_idx (length (map car (map-get g "qtys"))))
            (begin
              (let ((q (list-ref (map car (map-get g "qtys")) q_idx)))
                (set! sumsq (* (+ sumsq (- q mean)) (- q mean)))
              )
              (loop (+ q_idx 1))
            )
          '()
        )
        (define variance (/ sumsq (- (length (map-get g "qtys")) 1)))
        (define cov (/ ((map-get math "sqrt") variance) mean))
        (if (> cov 1.5)
          (begin
            (set! summary (append summary (list (cons "w_warehouse_sk" (map-get g "w")) (cons "i_item_sk" (map-get g "i")) (cons "cov" cov))))
          )
          '()
        )
      )
      (loop (+ g_idx 1))
    )
  '()
)
(_json summary)
(run-test "TPCDS Q39 simplified" test_TPCDS_Q39_simplified)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
