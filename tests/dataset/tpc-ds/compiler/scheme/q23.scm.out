(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-StoreSale ss_item_sk ss_sold_date_sk ss_customer_sk ss_quantity ss_sales_price)
  (list (cons 'ss_item_sk ss_item_sk) (cons 'ss_sold_date_sk ss_sold_date_sk) (cons 'ss_customer_sk ss_customer_sk) (cons 'ss_quantity ss_quantity) (cons 'ss_sales_price ss_sales_price))
)

(define (new-DateDim d_date_sk d_year d_moy)
  (list (cons 'd_date_sk d_date_sk) (cons 'd_year d_year) (cons 'd_moy d_moy))
)

(define (new-Item i_item_sk)
  (list (cons 'i_item_sk i_item_sk))
)

(define (new-CatalogSale cs_sold_date_sk cs_item_sk cs_bill_customer_sk cs_quantity cs_list_price)
  (list (cons 'cs_sold_date_sk cs_sold_date_sk) (cons 'cs_item_sk cs_item_sk) (cons 'cs_bill_customer_sk cs_bill_customer_sk) (cons 'cs_quantity cs_quantity) (cons 'cs_list_price cs_list_price))
)

(define (new-WebSale ws_sold_date_sk ws_item_sk ws_bill_customer_sk ws_quantity ws_list_price)
  (list (cons 'ws_sold_date_sk ws_sold_date_sk) (cons 'ws_item_sk ws_item_sk) (cons 'ws_bill_customer_sk ws_bill_customer_sk) (cons 'ws_quantity ws_quantity) (cons 'ws_list_price ws_list_price))
)

(define (test_TPCDS_Q23_cross_channel_sales)
  (when (not (equal? result 50.0)) (error "expect failed"))
)

(define store_sales (list (list (cons "ss_item_sk" 1) (cons "ss_sold_date_sk" 1) (cons "ss_customer_sk" 1) (cons "ss_quantity" 1) (cons "ss_sales_price" 10.0)) (list (cons "ss_item_sk" 1) (cons "ss_sold_date_sk" 1) (cons "ss_customer_sk" 1) (cons "ss_quantity" 1) (cons "ss_sales_price" 10.0)) (list (cons "ss_item_sk" 1) (cons "ss_sold_date_sk" 1) (cons "ss_customer_sk" 1) (cons "ss_quantity" 1) (cons "ss_sales_price" 10.0)) (list (cons "ss_item_sk" 1) (cons "ss_sold_date_sk" 1) (cons "ss_customer_sk" 1) (cons "ss_quantity" 1) (cons "ss_sales_price" 10.0)) (list (cons "ss_item_sk" 1) (cons "ss_sold_date_sk" 1) (cons "ss_customer_sk" 1) (cons "ss_quantity" 1) (cons "ss_sales_price" 10.0)) (list (cons "ss_item_sk" 2) (cons "ss_sold_date_sk" 1) (cons "ss_customer_sk" 2) (cons "ss_quantity" 1) (cons "ss_sales_price" 10.0)) (list (cons "ss_item_sk" 2) (cons "ss_sold_date_sk" 1) (cons "ss_customer_sk" 2) (cons "ss_quantity" 1) (cons "ss_sales_price" 10.0)) (list (cons "ss_item_sk" 2) (cons "ss_sold_date_sk" 1) (cons "ss_customer_sk" 2) (cons "ss_quantity" 1) (cons "ss_sales_price" 10.0))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_year" 2000) (cons "d_moy" 1))))
(define item (list (list (cons "i_item_sk" 1)) (list (cons "i_item_sk" 2))))
(define catalog_sales (list (list (cons "cs_sold_date_sk" 1) (cons "cs_item_sk" 1) (cons "cs_bill_customer_sk" 1) (cons "cs_quantity" 2) (cons "cs_list_price" 10.0)) (list (cons "cs_sold_date_sk" 1) (cons "cs_item_sk" 2) (cons "cs_bill_customer_sk" 2) (cons "cs_quantity" 2) (cons "cs_list_price" 10.0))))
(define web_sales (list (list (cons "ws_sold_date_sk" 1) (cons "ws_item_sk" 1) (cons "ws_bill_customer_sk" 1) (cons "ws_quantity" 3) (cons "ws_list_price" 10.0)) (list (cons "ws_sold_date_sk" 1) (cons "ws_item_sk" 2) (cons "ws_bill_customer_sk" 2) (cons "ws_quantity" 1) (cons "ws_list_price" 10.0))))
(define frequent_ss_items (let ((_tmp '()))
  (for-each (lambda (ss)
    (for-each (lambda (d)
      (when (equal? (map-get ss "ss_sold_date_sk") (map-get d "d_date_sk"))
        (for-each (lambda (i)
          (when (equal? (map-get ss "ss_item_sk") (map-get i "i_item_sk"))
            (when (equal? (map-get d "d_year") 2000)
              (set! _tmp (append _tmp (list ss)))
            )
          )) (if (string? item) (string->list item) item))
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  (let ((_res '()))
    (for-each (lambda (g)
      (when (> (_count g) 4) (set! _res (append _res (list (map-get (map-get g "key") "item_sk")))))
    ) (_group_by _tmp (lambda (ss) (list (cons "item_sk" (map-get i "i_item_sk")) (cons "date_sk" (map-get d "d_date_sk"))))))
    _res)))
(define customer_totals (let ((_tmp '()))
  (for-each (lambda (ss)
    (set! _tmp (append _tmp (list ss)))
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "cust" (map-get g "key")) (cons "sales" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (* (map-get x "ss_quantity") (map-get x "ss_sales_price")))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (ss) (map-get ss "ss_customer_sk"))))
    _res)))
(define max_sales (_max (let ((_res '()))
  (for-each (lambda (c)
    (set! _res (append _res (list (map-get c "sales"))))
  ) (if (string? customer_totals) (string->list customer_totals) customer_totals))
  _res)))
(define best_ss_customer (let ((_res '()))
  (for-each (lambda (c)
    (when (* (> (map-get c "sales") 0.95) max_sales)
      (set! _res (append _res (list (map-get c "cust"))))
    )
  ) (if (string? customer_totals) (string->list customer_totals) customer_totals))
  _res))
(define catalog (let ((_res '()))
  (for-each (lambda (cs)
    (for-each (lambda (d)
      (when (equal? (map-get cs "cs_sold_date_sk") (map-get d "d_date_sk"))
        (when (if (member (and (if (member (and (equal? (and (equal? (map-get d "d_year") 2000) (map-get d "d_moy")) 1) (map-get cs "cs_bill_customer_sk")) best_ss_customer) #t #f) (map-get cs "cs_item_sk")) frequent_ss_items) #t #f)
          (set! _res (append _res (list (* (map-get cs "cs_quantity") (map-get cs "cs_list_price")))))
        )
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? catalog_sales) (string->list catalog_sales) catalog_sales))
  _res))
(define web (let ((_res '()))
  (for-each (lambda (ws)
    (for-each (lambda (d)
      (when (equal? (map-get ws "ws_sold_date_sk") (map-get d "d_date_sk"))
        (when (if (member (and (if (member (and (equal? (and (equal? (map-get d "d_year") 2000) (map-get d "d_moy")) 1) (map-get ws "ws_bill_customer_sk")) best_ss_customer) #t #f) (map-get ws "ws_item_sk")) frequent_ss_items) #t #f)
          (set! _res (append _res (list (* (map-get ws "ws_quantity") (map-get ws "ws_list_price")))))
        )
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? web_sales) (string->list web_sales) web_sales))
  _res))
(define result (+ (_sum catalog) (_sum web)))
(_json result)
(run-test "TPCDS Q23 cross-channel sales" test_TPCDS_Q23_cross_channel_sales)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
