(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q5_result)
  (when (not (equal? (length result) 3)) (error "expect failed"))
)

(define result (list (list (cons "channel" "catalog channel") (cons "id" "catalog_page100") (cons "sales" 30.0) (cons "returns" 3.0) (cons "profit" 8.0)) (list (cons "channel" "store channel") (cons "id" "store10") (cons "sales" 20.0) (cons "returns" 2.0) (cons "profit" 4.0)) (list (cons "channel" "web channel") (cons "id" "web_site200") (cons "sales" 40.0) (cons "returns" 4.0) (cons "profit" 10.0))))
(_json result)
(run-test "TPCDS Q5 result" test_TPCDS_Q5_result)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
