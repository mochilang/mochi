; Generated by Mochi compiler v0.10.26 on 2025-07-15T07:37:58Z
(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(import (srfi 1) (srfi 95) (chibi json) (chibi io) (chibi process) (chibi) (chibi string))

(define (_fmt . parts)
  (apply string-append (map _to_string parts)))

(define (_to_string v)
  (call-with-output-string (lambda (p) (write v p))))

(define (_yaml_value v)
  (let ((n (string->number v)))
    (if n n v)))

(define (_parse_yaml text)
  (let ((rows '()) (cur '()))
    (for-each (lambda (ln)
                (when (and (>= (string-length ln) 2) (string-prefix? "- " ln))
                  (when (not (null? cur))
                    (set! rows (append rows (list cur))))
                  (set! cur '())
                  (set! ln (substring ln 2 (string-length ln))))
                (when (string-contains ln ":")
                  (let* ((p (string-split ln #\:))
                         (k (string-trim (car p)))
                         (val (string-trim (string-join (cdr p) ":"))))
                    (set! cur (append cur (list (cons k (_yaml_value val))))))))
              (string-split text #\newline))
    (when (not (null? cur))
      (set! rows (append rows (list cur))))
    rows))

(define (_fetch url opts)
  (let* ((method (if (and opts (assq 'method opts)) (cdr (assq 'method opts)) "GET"))
         (args (list "curl" "-s" "-X" method)))
    (when (and opts (assq 'headers opts))
      (for-each (lambda (p)
                  (set! args (append args (list "-H" (_fmt (car p) ": " (cdr p))))))
                (cdr (assq 'headers opts))))
    (when (and opts (assq 'query opts))
      (let* ((q (cdr (assq 'query opts)))
             (qs (string-join (map (lambda (p) (_fmt (car p) "=" (cdr p))) q) "&")))
        (set! url (string-append url (if (string-contains url "?") "&" "?") qs))))
    (when (and opts (assq 'body opts))
      (set! args (append args (list "-d" (json->string (cdr (assq 'body opts)))))))
    (when (and opts (assq 'timeout opts))
      (set! args (append args (list "--max-time" (_to_string (cdr (assq 'timeout opts)))))))
    (set! args (append args (list url)))
    (let* ((p (open-input-pipe (string-join args " ")))
           (txt (port->string p)))
      (close-input-port p)
      (string->json txt))))

(define (_load path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (in (if (or (not path) (string=? path "") (string=? path "-"))
                 (current-input-port)
                 (open-input-file path)))
         (text (port->string in)))
    (when (not (eq? in (current-input-port)))
      (close-input-port in))
    (cond ((string=? fmt "jsonl")
           (map string->json
                (filter (lambda (l) (not (string=? l "")))
                        (string-split text #\newline))))
          ((string=? fmt "yaml")
           (_parse_yaml text))
          (else
           (let ((d (string->json text)))
             (if (list? d) d (list d)))))))

(define (_save rows path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (out (if (or (not path) (string=? path "") (string=? path "-"))
                  (current-output-port)
                  (open-output-file path))))
  (cond ((string=? fmt "jsonl")
           (for-each (lambda (r) (write-string (json->string r) out) (newline out)) rows))
          (else
           (write-string (json->string rows) out)))
    (when (not (eq? out (current-output-port)))
      (close-output-port out))))

(define (_date_number s)
  (let ((parts (string-split s #\-)))
    (if (= (length parts) 3)
        (+ (* (string->number (list-ref parts 0)) 10000)
           (* (string->number (list-ref parts 1)) 100)
           (string->number (list-ref parts 2)))
        #f)))

(define (_lt a b)
  (cond
    ((and (number? a) (number? b)) (< a b))
    ((and (string? a) (string? b))
      (let ((da (_date_number a))
            (db (_date_number b)))
        (if (and da db)
            (< da db)
            (string<? a b))))
    ((and (pair? a) (pair? b))
      (cond
        ((null? a) (not (null? b)))
        ((null? b) #f)
        (else (let ((ka (car a)) (kb (car b)))
                (if (equal? ka kb)
                    (_lt (cdr a) (cdr b))
                    (_lt ka kb)))))
    )
    (else (string<? (_to_string a) (_to_string b)))))

(define (_le a b)
  (or (_lt a b) (equal? a b)))

(define (_gt a b)
  (_lt b a))

(define (_ge a b)
  (or (_gt a b) (equal? a b)))

(define (_sort pairs)
  (letrec ((cmp (lambda (a b) (_lt (cdr a) (cdr b))))
           (insert (lambda (x lst)
                     (cond ((null? lst) (list x))
                           ((cmp x (car lst)) (cons x lst))
                           (else (cons (car lst) (insert x (cdr lst)))))))
           (loop (lambda (xs out)
                   (if (null? xs)
                       out
                       (loop (cdr xs) (insert (car xs) out))))) )
    (loop pairs '())))
(import (scheme base))

(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((number? v) (list v))
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))
)

(define (_exists v)
  (cond
    ((and (pair? v) (assq 'Items v)) (not (null? (cdr (assq 'Items v)))))
    ((string? v) (> (string-length v) 0))
    ((list? v) (not (null? v)))
    (else #f)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (_gt n m) (set! m n)))
                (cdr lst)))
    m))

(define (_min v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (_lt n m) (set! m n)))
                (cdr lst)))
    m))
(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (_to_string key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(import (chibi json))

(define (_json v)
  (cond
    ;; list of objects
    ((and (list? v) (pair? v) (pair? (car v)) (pair? (caar v)))
     (display "[")
     (let loop ((xs v) (first #t))
       (unless (null? xs)
         (unless first (display ","))
         (display (json->string (car xs)))
         (loop (cdr xs) #f)))
     (display "]"))
    ;; single object or other value
    (else
     (display (json->string v))))
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q77_simplified)
  (when (not (equal? result (list (list (cons 'channel "catalog channel") (cons 'id 1) (cons 'sales 150.0) (cons 'returns 7.0) (cons 'profit 12.0)) (list (cons 'channel "store channel") (cons 'id 1) (cons 'sales 100.0) (cons 'returns 5.0) (cons 'profit 9.0)) (list (cons 'channel "web channel") (cons 'id 1) (cons 'sales 200.0) (cons 'returns 10.0) (cons 'profit 18.0))))) (error "expect failed"))
)

(define date_dim (list (list (cons 'd_date_sk 1) (cons 'd_date 1))))
(define store_sales (list (list (cons 'ss_sold_date_sk 1) (cons 's_store_sk 1) (cons 'ss_ext_sales_price 100.0) (cons 'ss_net_profit 10.0))))
(define store_returns (list (list (cons 'sr_returned_date_sk 1) (cons 's_store_sk 1) (cons 'sr_return_amt 5.0) (cons 'sr_net_loss 1.0))))
(define catalog_sales (list (list (cons 'cs_sold_date_sk 1) (cons 'cs_call_center_sk 1) (cons 'cs_ext_sales_price 150.0) (cons 'cs_net_profit 15.0))))
(define catalog_returns (list (list (cons 'cr_returned_date_sk 1) (cons 'cr_call_center_sk 1) (cons 'cr_return_amount 7.0) (cons 'cr_net_loss 3.0))))
(define web_sales (list (list (cons 'ws_sold_date_sk 1) (cons 'ws_web_page_sk 1) (cons 'ws_ext_sales_price 200.0) (cons 'ws_net_profit 20.0))))
(define web_returns (list (list (cons 'wr_returned_date_sk 1) (cons 'wr_web_page_sk 1) (cons 'wr_return_amt 10.0) (cons 'wr_net_loss 2.0))))
(define ss (let ((_tmp '()))
  (for-each (lambda (ss)
    (for-each (lambda (d)
      (when (equal? (map-get d 'd_date_sk) (map-get ss 'ss_sold_date_sk))
        (set! _tmp (append _tmp (list ss)))
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons 's_store_sk (map-get g 'key)) (cons 'sales (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get (map-get x 'ss) 'ss_ext_sales_price))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons 'profit (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get (map-get x 'ss) 'ss_net_profit))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (ss) (map-get ss 's_store_sk))))
    _res)))
(define sr (let ((_tmp '()))
  (for-each (lambda (sr)
    (for-each (lambda (d)
      (when (equal? (map-get d 'd_date_sk) (map-get sr 'sr_returned_date_sk))
        (set! _tmp (append _tmp (list sr)))
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? store_returns) (string->list store_returns) store_returns))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons 's_store_sk (map-get g 'key)) (cons 'returns (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get (map-get x 'sr) 'sr_return_amt))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons 'profit_loss (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get (map-get x 'sr) 'sr_net_loss))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (sr) (map-get sr 's_store_sk))))
    _res)))
(define cs (let ((_tmp '()))
  (for-each (lambda (cs)
    (for-each (lambda (d)
      (when (equal? (map-get d 'd_date_sk) (map-get cs 'cs_sold_date_sk))
        (set! _tmp (append _tmp (list cs)))
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? catalog_sales) (string->list catalog_sales) catalog_sales))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons 'cs_call_center_sk (map-get g 'key)) (cons 'sales (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get (map-get x 'cs) 'cs_ext_sales_price))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons 'profit (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get (map-get x 'cs) 'cs_net_profit))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (cs) (map-get cs 'cs_call_center_sk))))
    _res)))
(define cr (let ((_tmp '()))
  (for-each (lambda (cr)
    (for-each (lambda (d)
      (when (equal? (map-get d 'd_date_sk) (map-get cr 'cr_returned_date_sk))
        (set! _tmp (append _tmp (list cr)))
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? catalog_returns) (string->list catalog_returns) catalog_returns))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons 'cr_call_center_sk (map-get g 'key)) (cons 'returns (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get (map-get x 'cr) 'cr_return_amount))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons 'profit_loss (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get (map-get x 'cr) 'cr_net_loss))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (cr) (map-get cr 'cr_call_center_sk))))
    _res)))
(define ws (let ((_tmp '()))
  (for-each (lambda (ws)
    (for-each (lambda (d)
      (when (equal? (map-get d 'd_date_sk) (map-get ws 'ws_sold_date_sk))
        (set! _tmp (append _tmp (list ws)))
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? web_sales) (string->list web_sales) web_sales))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons 'wp_web_page_sk (map-get g 'key)) (cons 'sales (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get (map-get x 'ws) 'ws_ext_sales_price))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons 'profit (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get (map-get x 'ws) 'ws_net_profit))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (ws) (map-get ws 'ws_web_page_sk))))
    _res)))
(define wr (let ((_tmp '()))
  (for-each (lambda (wr)
    (for-each (lambda (d)
      (when (equal? (map-get d 'd_date_sk) (map-get wr 'wr_returned_date_sk))
        (set! _tmp (append _tmp (list wr)))
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? web_returns) (string->list web_returns) web_returns))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons 'wp_web_page_sk (map-get g 'key)) (cons 'returns (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get (map-get x 'wr) 'wr_return_amt))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons 'profit_loss (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get (map-get x 'wr) 'wr_net_loss))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (wr) (map-get wr 'wr_web_page_sk))))
    _res)))
(define per_channel (concat (let ((_res '()))
  (for-each (lambda (s)
    (let ((_ms0 '()) (_m0 #f))
      (for-each (lambda (r)
        (when (equal? (map-get s 's_store_sk) (map-get r 's_store_sk))
          (set! _ms0 (append _ms0 (list r)))
          (set! _m0 #t))
) (if (string? sr) (string->list sr) sr))
      (if _m0
          (for-each (lambda (r)
            (set! _res (append _res (list (list (cons 'channel "store channel") (cons 'id (map-get s 's_store_sk)) (cons 'sales (map-get s 'sales)) (cons 'returns (if (equal? r '()) 0.0 (map-get r 'returns))) (cons 'profit (- (map-get s 'profit) (if (equal? r '()) 0.0 (map-get r 'profit_loss))))))))
          ) _ms0)
          (let ((r '()))
            (set! _res (append _res (list (list (cons 'channel "store channel") (cons 'id (map-get s 's_store_sk)) (cons 'sales (map-get s 'sales)) (cons 'returns (if (equal? r '()) 0.0 (map-get r 'returns))) (cons 'profit (- (map-get s 'profit) (if (equal? r '()) 0.0 (map-get r 'profit_loss))))))))
          ))
    )
  ) (if (string? ss) (string->list ss) ss))
  _res) (let ((_res '()))
  (for-each (lambda (c)
    (for-each (lambda (r)
      (when (equal? (map-get c 'cs_call_center_sk) (map-get r 'cr_call_center_sk))
        (set! _res (append _res (list (list (cons 'channel "catalog channel") (cons 'id (map-get c 'cs_call_center_sk)) (cons 'sales (map-get c 'sales)) (cons 'returns (map-get r 'returns)) (cons 'profit (- (map-get c 'profit) (map-get r 'profit_loss)))))))
      )) (if (string? cr) (string->list cr) cr))
  ) (if (string? cs) (string->list cs) cs))
  _res) (let ((_res '()))
  (for-each (lambda (w)
    (let ((_ms1 '()) (_m1 #f))
      (for-each (lambda (r)
        (when (equal? (map-get w 'wp_web_page_sk) (map-get r 'wp_web_page_sk))
          (set! _ms1 (append _ms1 (list r)))
          (set! _m1 #t))
) (if (string? wr) (string->list wr) wr))
      (if _m1
          (for-each (lambda (r)
            (set! _res (append _res (list (list (cons 'channel "web channel") (cons 'id (map-get w 'wp_web_page_sk)) (cons 'sales (map-get w 'sales)) (cons 'returns (if (equal? r '()) 0.0 (map-get r 'returns))) (cons 'profit (- (map-get w 'profit) (if (equal? r '()) 0.0 (map-get r 'profit_loss))))))))
          ) _ms1)
          (let ((r '()))
            (set! _res (append _res (list (list (cons 'channel "web channel") (cons 'id (map-get w 'wp_web_page_sk)) (cons 'sales (map-get w 'sales)) (cons 'returns (if (equal? r '()) 0.0 (map-get r 'returns))) (cons 'profit (- (map-get w 'profit) (if (equal? r '()) 0.0 (map-get r 'profit_loss))))))))
          ))
    )
  ) (if (string? ws) (string->list ws) ws))
  _res)))
(define result (let ((_tmp '()))
  (for-each (lambda (p)
    (set! _tmp (append _tmp (list p)))
  ) (if (string? per_channel) (string->list per_channel) per_channel))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons 'channel (map-get (map-get g 'key) 'channel)) (cons 'id (map-get (map-get g 'key) 'id)) (cons 'sales (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get (map-get x 'p) 'sales))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons 'returns (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get (map-get x 'p) 'returns))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons 'profit (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get (map-get x 'p) 'profit))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (p) (list (cons 'channel (map-get p 'channel)) (cons 'id (map-get p 'id))))))
    (set! _res (_sort (map (lambda (x) (cons x (map-get (map-get g 'key) 'channel))) _res)))
    (set! _res (map car _res))
    _res)))
(_json result)
(run-test "TPCDS Q77 simplified" test_TPCDS_Q77_simplified)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
