(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q82_sample)
  (when (not (equal? result 82)) (error "expect failed"))
)

(define item (list (list (cons "id" 1)) (list (cons "id" 2)) (list (cons "id" 3))))
(define inventory (list (list (cons "item" 1) (cons "qty" 20)) (list (cons "item" 1) (cons "qty" 22)) (list (cons "item" 1) (cons "qty" 5)) (list (cons "item" 2) (cons "qty" 30)) (list (cons "item" 2) (cons "qty" 5)) (list (cons "item" 3) (cons "qty" 10))))
(define store_sales (list (list (cons "item" 1)) (list (cons "item" 2))))
(define result 0)
(let loop ((inv_idx 0))
  (if (< inv_idx (length inventory))
    (begin
      (let ((inv (list-ref inventory inv_idx)))
        (let loop ((s_idx 0))
          (if (< s_idx (length store_sales))
            (begin
              (let ((s (list-ref store_sales s_idx)))
                (if (equal? (map-get inv "item") (map-get s "item"))
                  (begin
                    (set! result (+ result (map-get inv "qty")))
                  )
                  '()
                )
              )
              (loop (+ s_idx 1))
            )
          '()
        )
      )
      (loop (+ inv_idx 1))
    )
  '()
)
(_json result)
(run-test "TPCDS Q82 sample" test_TPCDS_Q82_sample)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
