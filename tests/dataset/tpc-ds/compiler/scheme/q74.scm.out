(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q74_simplified)
  (when (not (equal? result (list (list (cons "customer_id" 1) (cons "customer_first_name" "Alice") (cons "customer_last_name" "Smith"))))) (error "expect failed"))
)

(define customer (list (list (cons "c_customer_sk" 1) (cons "c_customer_id" 1) (cons "c_first_name" "Alice") (cons "c_last_name" "Smith"))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_year" 1998)) (list (cons "d_date_sk" 2) (cons "d_year" 1999))))
(define store_sales (list (list (cons "ss_customer_sk" 1) (cons "ss_sold_date_sk" 1) (cons "ss_net_paid" 100.0)) (list (cons "ss_customer_sk" 1) (cons "ss_sold_date_sk" 2) (cons "ss_net_paid" 110.0))))
(define web_sales (list (list (cons "ws_bill_customer_sk" 1) (cons "ws_sold_date_sk" 1) (cons "ws_net_paid" 40.0)) (list (cons "ws_bill_customer_sk" 1) (cons "ws_sold_date_sk" 2) (cons "ws_net_paid" 80.0))))
(define year_total (concat (let ((_tmp '()))
  (for-each (lambda (c)
    (for-each (lambda (ss)
      (when (equal? (map-get c "c_customer_sk") (map-get ss "ss_customer_sk"))
        (for-each (lambda (d)
          (when (equal? (map-get d "d_date_sk") (map-get ss "ss_sold_date_sk"))
            (when (equal? (or (equal? (map-get d "d_year") 1998) (map-get d "d_year")) 1999)
              (set! _tmp (append _tmp (list c)))
            )
          )) (if (string? date_dim) (string->list date_dim) date_dim))
      )) (if (string? store_sales) (string->list store_sales) store_sales))
  ) (if (string? customer) (string->list customer) customer))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "customer_id" (map-get (map-get g "key") "id")) (cons "customer_first_name" (map-get (map-get g "key") "first")) (cons "customer_last_name" (map-get (map-get g "key") "last")) (cons "year" (map-get (map-get g "key") "year")) (cons "year_total" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get (map-get x "ss") "ss_net_paid"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "sale_type" "s")))))
    ) (_group_by _tmp (lambda (c) (list (cons "id" (map-get c "c_customer_id")) (cons "first" (map-get c "c_first_name")) (cons "last" (map-get c "c_last_name")) (cons "year" (map-get d "d_year"))))))
    _res)) (let ((_tmp '()))
  (for-each (lambda (c)
    (for-each (lambda (ws)
      (when (equal? (map-get c "c_customer_sk") (map-get ws "ws_bill_customer_sk"))
        (for-each (lambda (d)
          (when (equal? (map-get d "d_date_sk") (map-get ws "ws_sold_date_sk"))
            (when (equal? (or (equal? (map-get d "d_year") 1998) (map-get d "d_year")) 1999)
              (set! _tmp (append _tmp (list c)))
            )
          )) (if (string? date_dim) (string->list date_dim) date_dim))
      )) (if (string? web_sales) (string->list web_sales) web_sales))
  ) (if (string? customer) (string->list customer) customer))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "customer_id" (map-get (map-get g "key") "id")) (cons "customer_first_name" (map-get (map-get g "key") "first")) (cons "customer_last_name" (map-get (map-get g "key") "last")) (cons "year" (map-get (map-get g "key") "year")) (cons "year_total" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get (map-get x "ws") "ws_net_paid"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "sale_type" "w")))))
    ) (_group_by _tmp (lambda (c) (list (cons "id" (map-get c "c_customer_id")) (cons "first" (map-get c "c_first_name")) (cons "last" (map-get c "c_last_name")) (cons "year" (map-get d "d_year"))))))
    _res))))
(define s_firstyear (first (let ((_res '()))
  (for-each (lambda (y)
    (when (equal? (and (equal? (map-get y "sale_type") "s") (map-get y "year")) 1998)
      (set! _res (append _res (list y)))
    )
  ) (if (string? year_total) (string->list year_total) year_total))
  _res)))
(define s_secyear (first (let ((_res '()))
  (for-each (lambda (y)
    (when (equal? (and (equal? (map-get y "sale_type") "s") (map-get y "year")) 1999)
      (set! _res (append _res (list y)))
    )
  ) (if (string? year_total) (string->list year_total) year_total))
  _res)))
(define w_firstyear (first (let ((_res '()))
  (for-each (lambda (y)
    (when (equal? (and (equal? (map-get y "sale_type") "w") (map-get y "year")) 1998)
      (set! _res (append _res (list y)))
    )
  ) (if (string? year_total) (string->list year_total) year_total))
  _res)))
(define w_secyear (first (let ((_res '()))
  (for-each (lambda (y)
    (when (equal? (and (equal? (map-get y "sale_type") "w") (map-get y "year")) 1999)
      (set! _res (append _res (list y)))
    )
  ) (if (string? year_total) (string->list year_total) year_total))
  _res)))
(define result (if (> (and (> (and (> (map-get s_firstyear "year_total") 0) (map-get w_firstyear "year_total")) 0) (/ (map-get w_secyear "year_total") (map-get w_firstyear "year_total"))) (/ (map-get s_secyear "year_total") (map-get s_firstyear "year_total"))) (list (list (cons "customer_id" (map-get s_secyear "customer_id")) (cons "customer_first_name" (map-get s_secyear "customer_first_name")) (cons "customer_last_name" (map-get s_secyear "customer_last_name")))) (list )))
(_json result)
(run-test "TPCDS Q74 simplified" test_TPCDS_Q74_simplified)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
