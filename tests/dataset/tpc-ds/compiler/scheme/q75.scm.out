(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q75_simplified)
  (when (not (equal? result (list (list (cons "prev_year" 2000) (cons "year" 2001) (cons "i_brand_id" 1) (cons "i_class_id" 2) (cons "i_category_id" 3) (cons "i_manufact_id" 4) (cons "prev_yr_cnt" 100) (cons "curr_yr_cnt" 80) (cons "sales_cnt_diff" (- 20)) (cons "sales_amt_diff" (- 200.0)))))) (error "expect failed"))
)

(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_year" 2000)) (list (cons "d_date_sk" 2) (cons "d_year" 2001))))
(define store_sales (list (list (cons "ss_item_sk" 1) (cons "ss_quantity" 50) (cons "ss_sales_price" 500.0) (cons "ss_sold_date_sk" 1)) (list (cons "ss_item_sk" 1) (cons "ss_quantity" 40) (cons "ss_sales_price" 400.0) (cons "ss_sold_date_sk" 2))))
(define web_sales (list (list (cons "ws_item_sk" 1) (cons "ws_quantity" 30) (cons "ws_sales_price" 300.0) (cons "ws_sold_date_sk" 1)) (list (cons "ws_item_sk" 1) (cons "ws_quantity" 25) (cons "ws_sales_price" 250.0) (cons "ws_sold_date_sk" 2))))
(define catalog_sales (list (list (cons "cs_item_sk" 1) (cons "cs_quantity" 20) (cons "cs_sales_price" 200.0) (cons "cs_sold_date_sk" 1)) (list (cons "cs_item_sk" 1) (cons "cs_quantity" 15) (cons "cs_sales_price" 150.0) (cons "cs_sold_date_sk" 2))))
(define item (list (list (cons "i_item_sk" 1) (cons "i_brand_id" 1) (cons "i_class_id" 2) (cons "i_category_id" 3) (cons "i_manufact_id" 4) (cons "i_category" "Electronics"))))
(define sales_detail (concat (let ((_res '()))
  (for-each (lambda (ss)
    (for-each (lambda (d)
      (when (equal? (map-get d "d_date_sk") (map-get ss "ss_sold_date_sk"))
        (set! _res (append _res (list (list (cons "d_year" (map-get d "d_year")) (cons "i_item_sk" (map-get ss "ss_item_sk")) (cons "quantity" (map-get ss "ss_quantity")) (cons "amount" (map-get ss "ss_sales_price"))))))
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res) (let ((_res '()))
  (for-each (lambda (ws)
    (for-each (lambda (d)
      (when (equal? (map-get d "d_date_sk") (map-get ws "ws_sold_date_sk"))
        (set! _res (append _res (list (list (cons "d_year" (map-get d "d_year")) (cons "i_item_sk" (map-get ws "ws_item_sk")) (cons "quantity" (map-get ws "ws_quantity")) (cons "amount" (map-get ws "ws_sales_price"))))))
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? web_sales) (string->list web_sales) web_sales))
  _res) (let ((_res '()))
  (for-each (lambda (cs)
    (for-each (lambda (d)
      (when (equal? (map-get d "d_date_sk") (map-get cs "cs_sold_date_sk"))
        (set! _res (append _res (list (list (cons "d_year" (map-get d "d_year")) (cons "i_item_sk" (map-get cs "cs_item_sk")) (cons "quantity" (map-get cs "cs_quantity")) (cons "amount" (map-get cs "cs_sales_price"))))))
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? catalog_sales) (string->list catalog_sales) catalog_sales))
  _res)))
(define all_sales (let ((_tmp '()))
  (for-each (lambda (sd)
    (for-each (lambda (i)
      (when (equal? (map-get i "i_item_sk") (map-get sd "i_item_sk"))
        (when (equal? (map-get i "i_category") "Electronics")
          (set! _tmp (append _tmp (list sd)))
        )
      )) (if (string? item) (string->list item) item))
  ) (if (string? sales_detail) (string->list sales_detail) sales_detail))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "d_year" (map-get (map-get g "key") "year")) (cons "i_brand_id" (map-get (map-get g "key") "brand_id")) (cons "i_class_id" (map-get (map-get g "key") "class_id")) (cons "i_category_id" (map-get (map-get g "key") "category_id")) (cons "i_manufact_id" (map-get (map-get g "key") "manuf_id")) (cons "sales_cnt" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get (map-get x "sd") "quantity"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "sales_amt" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get (map-get x "sd") "amount"))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (sd) (list (cons "year" (map-get sd "d_year")) (cons "brand_id" (map-get i "i_brand_id")) (cons "class_id" (map-get i "i_class_id")) (cons "category_id" (map-get i "i_category_id")) (cons "manuf_id" (map-get i "i_manufact_id"))))))
    _res)))
(define prev_yr (first (let ((_res '()))
  (for-each (lambda (a)
    (when (equal? (map-get a "d_year") 2000)
      (set! _res (append _res (list a)))
    )
  ) (if (string? all_sales) (string->list all_sales) all_sales))
  _res)))
(define curr_yr (first (let ((_res '()))
  (for-each (lambda (a)
    (when (equal? (map-get a "d_year") 2001)
      (set! _res (append _res (list a)))
    )
  ) (if (string? all_sales) (string->list all_sales) all_sales))
  _res)))
(define result (if (< (/ (map-get curr_yr "sales_cnt") (map-get prev_yr "sales_cnt")) 0.9) (list (list (cons "prev_year" (map-get prev_yr "d_year")) (cons "year" (map-get curr_yr "d_year")) (cons "i_brand_id" (map-get curr_yr "i_brand_id")) (cons "i_class_id" (map-get curr_yr "i_class_id")) (cons "i_category_id" (map-get curr_yr "i_category_id")) (cons "i_manufact_id" (map-get curr_yr "i_manufact_id")) (cons "prev_yr_cnt" (map-get prev_yr "sales_cnt")) (cons "curr_yr_cnt" (map-get curr_yr "sales_cnt")) (cons "sales_cnt_diff" (- (map-get curr_yr "sales_cnt") (map-get prev_yr "sales_cnt"))) (cons "sales_amt_diff" (- (map-get curr_yr "sales_amt") (map-get prev_yr "sales_amt"))))) (list )))
(_json result)
(run-test "TPCDS Q75 simplified" test_TPCDS_Q75_simplified)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
