(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_union_all a b)
  (append a b))

(define (_union a b)
  (let ((res a))
    (for-each (lambda (it)
                (when (not (member it res))
                  (set! res (append res (list it)))))
              b)
    res))

(define (_except a b)
  (let ((res '()))
    (for-each (lambda (it)
                (when (not (member it b))
                  (set! res (append res (list it)))))
              a)
    res))

(define (_intersect a b)
  (let ((res '()))
    (for-each (lambda (it)
                (when (and (member it b) (not (member it res)))
                  (set! res (append res (list it)))))
              a)
    res))
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q60_simplified)
  (when (not (equal? result 60)) (error "expect failed"))
)

(define store_sales (list (list (cons "item" 1) (cons "price" 10)) (list (cons "item" 1) (cons "price" 20))))
(define catalog_sales (list (list (cons "item" 1) (cons "price" 15))))
(define web_sales (list (list (cons "item" 1) (cons "price" 15))))
(define all_sales (_union_all (_union_all store_sales catalog_sales) web_sales))
(define result (_sum (let ((_res '()))
  (for-each (lambda (s)
    (set! _res (append _res (list (map-get s "price"))))
  ) (if (string? all_sales) (string->list all_sales) all_sales))
  _res)))
(_json result)
(run-test "TPCDS Q60 simplified" test_TPCDS_Q60_simplified)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
