(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(import (srfi 95))

(define (_fetch url opts)
  (let* ((method (if (and opts (assq 'method opts)) (cdr (assq 'method opts)) "GET"))
         (args (list "curl" "-s" "-X" method)))
    (when (and opts (assq 'headers opts))
      (for-each (lambda (p)
                  (set! args (append args (list "-H" (format "~a: ~a" (car p) (cdr p))))))
                (cdr (assq 'headers opts))))
    (when (and opts (assq 'query opts))
      (let* ((q (cdr (assq 'query opts)))
             (qs (string-join (map (lambda (p) (format "~a=~a" (car p) (cdr p))) q) "&")))
        (set! url (string-append url (if (string-contains url "?") "&" "?") qs))))
    (when (and opts (assq 'body opts))
      (set! args (append args (list "-d" (json->string (cdr (assq 'body opts)))))))
    (when (and opts (assq 'timeout opts))
      (set! args (append args (list "--max-time" (format "~a" (cdr (assq 'timeout opts)))))))
    (set! args (append args (list url)))
    (let* ((p (open-input-pipe (string-join args " ")))
           (txt (port->string p)))
      (close-input-port p)
      (string->json txt))))

(define (_load path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (in (if (or (not path) (string=? path "") (string=? path "-"))
                 (current-input-port)
                 (open-input-file path)))
         (text (port->string in)))
    (when (not (eq? in (current-input-port)))
      (close-input-port in))
    (cond ((string=? fmt "jsonl")
           (map string->json
                (filter (lambda (l) (not (string=? l "")))
                        (string-split text #\newline))))
          (else
           (let ((d (string->json text)))
             (if (list? d) d (list d)))))))

(define (_save rows path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (out (if (or (not path) (string=? path "") (string=? path "-"))
                  (current-output-port)
                  (open-output-file path))))
    (cond ((string=? fmt "jsonl")
           (for-each (lambda (r) (write-string (json->string r) out) (newline out)) rows))
          (else
           (write-string (json->string rows) out)))
    (when (not (eq? out (current-output-port)))
      (close-output-port out))))

(define (_lt a b)
  (cond
    ((and (number? a) (number? b)) (< a b))
    ((and (string? a) (string? b)) (string<? a b))
    ((and (pair? a) (pair? b))
      (cond
        ((null? a) (not (null? b)))
        ((null? b) #f)
        (else (let ((ka (car a)) (kb (car b)))
                (if (equal? ka kb)
                    (_lt (cdr a) (cdr b))
                    (_lt ka kb)))))
    )
    (else (string<? (format "~a" a) (format "~a" b)))))

(define (_sort pairs)
  (sort pairs (lambda (a b) (_lt (cdr a) (cdr b)))))
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q33_simplified)
  (when (not (equal? result (list (list (cons "i_manufact_id" 1) (cons "total_sales" 150.0)) (list (cons "i_manufact_id" 2) (cons "total_sales" 50.0))))) (error "expect failed"))
)

(define item (list (list (cons "i_item_sk" 1) (cons "i_manufact_id" 1) (cons "i_category" "Books")) (list (cons "i_item_sk" 2) (cons "i_manufact_id" 2) (cons "i_category" "Books"))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_year" 2000) (cons "d_moy" 1))))
(define customer_address (list (list (cons "ca_address_sk" 1) (cons "ca_gmt_offset" (- 5))) (list (cons "ca_address_sk" 2) (cons "ca_gmt_offset" (- 5)))))
(define store_sales (list (list (cons "ss_item_sk" 1) (cons "ss_ext_sales_price" 100.0) (cons "ss_sold_date_sk" 1) (cons "ss_addr_sk" 1)) (list (cons "ss_item_sk" 2) (cons "ss_ext_sales_price" 50.0) (cons "ss_sold_date_sk" 1) (cons "ss_addr_sk" 2))))
(define catalog_sales (list (list (cons "cs_item_sk" 1) (cons "cs_ext_sales_price" 20.0) (cons "cs_sold_date_sk" 1) (cons "cs_bill_addr_sk" 1))))
(define web_sales (list (list (cons "ws_item_sk" 1) (cons "ws_ext_sales_price" 30.0) (cons "ws_sold_date_sk" 1) (cons "ws_bill_addr_sk" 1))))
(define month 1)
(define year 2000)
(define union_sales (concat (let ((_res '()))
  (for-each (lambda (ss)
    (for-each (lambda (d)
      (when (equal? (map-get ss "ss_sold_date_sk") (map-get d "d_date_sk"))
        (for-each (lambda (ca)
          (when (equal? (map-get ss "ss_addr_sk") (map-get ca "ca_address_sk"))
            (for-each (lambda (i)
              (when (equal? (map-get ss "ss_item_sk") (map-get i "i_item_sk"))
                (when (equal? (and (equal? (and (equal? (and (equal? (map-get i "i_category") "Books") (map-get d "d_year")) year) (map-get d "d_moy")) month) (map-get ca "ca_gmt_offset")) (- 5))
                  (set! _res (append _res (list (list (cons "manu" (map-get i "i_manufact_id")) (cons "price" (map-get ss "ss_ext_sales_price"))))))
                )
              )) (if (string? item) (string->list item) item))
          )) (if (string? customer_address) (string->list customer_address) customer_address))
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res) (let ((_res '()))
  (for-each (lambda (cs)
    (for-each (lambda (d)
      (when (equal? (map-get cs "cs_sold_date_sk") (map-get d "d_date_sk"))
        (for-each (lambda (ca)
          (when (equal? (map-get cs "cs_bill_addr_sk") (map-get ca "ca_address_sk"))
            (for-each (lambda (i)
              (when (equal? (map-get cs "cs_item_sk") (map-get i "i_item_sk"))
                (when (equal? (and (equal? (and (equal? (and (equal? (map-get i "i_category") "Books") (map-get d "d_year")) year) (map-get d "d_moy")) month) (map-get ca "ca_gmt_offset")) (- 5))
                  (set! _res (append _res (list (list (cons "manu" (map-get i "i_manufact_id")) (cons "price" (map-get cs "cs_ext_sales_price"))))))
                )
              )) (if (string? item) (string->list item) item))
          )) (if (string? customer_address) (string->list customer_address) customer_address))
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? catalog_sales) (string->list catalog_sales) catalog_sales))
  _res) (let ((_res '()))
  (for-each (lambda (ws)
    (for-each (lambda (d)
      (when (equal? (map-get ws "ws_sold_date_sk") (map-get d "d_date_sk"))
        (for-each (lambda (ca)
          (when (equal? (map-get ws "ws_bill_addr_sk") (map-get ca "ca_address_sk"))
            (for-each (lambda (i)
              (when (equal? (map-get ws "ws_item_sk") (map-get i "i_item_sk"))
                (when (equal? (and (equal? (and (equal? (and (equal? (map-get i "i_category") "Books") (map-get d "d_year")) year) (map-get d "d_moy")) month) (map-get ca "ca_gmt_offset")) (- 5))
                  (set! _res (append _res (list (list (cons "manu" (map-get i "i_manufact_id")) (cons "price" (map-get ws "ws_ext_sales_price"))))))
                )
              )) (if (string? item) (string->list item) item))
          )) (if (string? customer_address) (string->list customer_address) customer_address))
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? web_sales) (string->list web_sales) web_sales))
  _res)))
(define result (let ((_tmp '()))
  (for-each (lambda (s)
    (set! _tmp (append _tmp (list s)))
  ) (if (string? union_sales) (string->list union_sales) union_sales))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "i_manufact_id" (map-get g "key")) (cons "total_sales" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "price"))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (s) (map-get s "manu"))))
    (set! _res (_sort (map (lambda (x) (cons x (- (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "price"))))
  ) (if (string? g) (string->list g) g))
  _res))))) _res)))
    (set! _res (map car _res))
    _res)))
(_json result)
(run-test "TPCDS Q33 simplified" test_TPCDS_Q33_simplified)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
