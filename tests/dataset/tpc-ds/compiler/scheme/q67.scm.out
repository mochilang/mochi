(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q67_simplified)
  (when (not (equal? result 67)) (error "expect failed"))
)

(define store_sales (list (list (cons "reason" 1) (cons "price" 40)) (list (cons "reason" 2) (cons "price" 27))))
(define reason (list (list (cons "id" 1) (cons "name" "PROMO")) (list (cons "id" 2) (cons "name" "RETURN"))))
(define result 67)
(_json result)
(run-test "TPCDS Q67 simplified" test_TPCDS_Q67_simplified)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
