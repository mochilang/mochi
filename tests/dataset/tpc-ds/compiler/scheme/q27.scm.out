(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(import (srfi 95))

(define (_fetch url opts)
  (let* ((method (if (and opts (assq 'method opts)) (cdr (assq 'method opts)) "GET"))
         (args (list "curl" "-s" "-X" method)))
    (when (and opts (assq 'headers opts))
      (for-each (lambda (p)
                  (set! args (append args (list "-H" (format "~a: ~a" (car p) (cdr p))))))
                (cdr (assq 'headers opts))))
    (when (and opts (assq 'query opts))
      (let* ((q (cdr (assq 'query opts)))
             (qs (string-join (map (lambda (p) (format "~a=~a" (car p) (cdr p))) q) "&")))
        (set! url (string-append url (if (string-contains url "?") "&" "?") qs))))
    (when (and opts (assq 'body opts))
      (set! args (append args (list "-d" (json->string (cdr (assq 'body opts)))))))
    (when (and opts (assq 'timeout opts))
      (set! args (append args (list "--max-time" (format "~a" (cdr (assq 'timeout opts)))))))
    (set! args (append args (list url)))
    (let* ((p (open-input-pipe (string-join args " ")))
           (txt (port->string p)))
      (close-input-port p)
      (string->json txt))))

(define (_load path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (in (if (or (not path) (string=? path "") (string=? path "-"))
                 (current-input-port)
                 (open-input-file path)))
         (text (port->string in)))
    (when (not (eq? in (current-input-port)))
      (close-input-port in))
    (cond ((string=? fmt "jsonl")
           (map string->json
                (filter (lambda (l) (not (string=? l "")))
                        (string-split text #\newline))))
          (else
           (let ((d (string->json text)))
             (if (list? d) d (list d)))))))

(define (_save rows path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (out (if (or (not path) (string=? path "") (string=? path "-"))
                  (current-output-port)
                  (open-output-file path))))
    (cond ((string=? fmt "jsonl")
           (for-each (lambda (r) (write-string (json->string r) out) (newline out)) rows))
          (else
           (write-string (json->string rows) out)))
    (when (not (eq? out (current-output-port)))
      (close-output-port out))))

(define (_lt a b)
  (cond
    ((and (number? a) (number? b)) (< a b))
    ((and (string? a) (string? b)) (string<? a b))
    ((and (pair? a) (pair? b))
      (cond
        ((null? a) (not (null? b)))
        ((null? b) #f)
        (else (let ((ka (car a)) (kb (car b)))
                (if (equal? ka kb)
                    (_lt (cdr a) (cdr b))
                    (_lt ka kb)))))
    )
    (else (string<? (format "~a" a) (format "~a" b)))))

(define (_sort pairs)
  (sort pairs (lambda (a b) (_lt (cdr a) (cdr b)))))
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-StoreSale ss_item_sk ss_store_sk ss_cdemo_sk ss_sold_date_sk ss_quantity ss_list_price ss_coupon_amt ss_sales_price)
  (list (cons 'ss_item_sk ss_item_sk) (cons 'ss_store_sk ss_store_sk) (cons 'ss_cdemo_sk ss_cdemo_sk) (cons 'ss_sold_date_sk ss_sold_date_sk) (cons 'ss_quantity ss_quantity) (cons 'ss_list_price ss_list_price) (cons 'ss_coupon_amt ss_coupon_amt) (cons 'ss_sales_price ss_sales_price))
)

(define (new-CustomerDemo cd_demo_sk cd_gender cd_marital_status cd_education_status)
  (list (cons 'cd_demo_sk cd_demo_sk) (cons 'cd_gender cd_gender) (cons 'cd_marital_status cd_marital_status) (cons 'cd_education_status cd_education_status))
)

(define (new-DateDim d_date_sk d_year)
  (list (cons 'd_date_sk d_date_sk) (cons 'd_year d_year))
)

(define (new-Store s_store_sk s_state)
  (list (cons 's_store_sk s_store_sk) (cons 's_state s_state))
)

(define (new-Item i_item_sk i_item_id)
  (list (cons 'i_item_sk i_item_sk) (cons 'i_item_id i_item_id))
)

(define (test_TPCDS_Q27_averages_by_state)
  (when (not (equal? result (list (list (cons "i_item_id" "ITEM1") (cons "s_state" "CA") (cons "agg1" 5.0) (cons "agg2" 100.0) (cons "agg3" 10.0) (cons "agg4" 90.0))))) (error "expect failed"))
)

(define store_sales (list (list (cons "ss_item_sk" 1) (cons "ss_store_sk" 1) (cons "ss_cdemo_sk" 1) (cons "ss_sold_date_sk" 1) (cons "ss_quantity" 5) (cons "ss_list_price" 100.0) (cons "ss_coupon_amt" 10.0) (cons "ss_sales_price" 90.0)) (list (cons "ss_item_sk" 2) (cons "ss_store_sk" 2) (cons "ss_cdemo_sk" 2) (cons "ss_sold_date_sk" 1) (cons "ss_quantity" 2) (cons "ss_list_price" 50.0) (cons "ss_coupon_amt" 5.0) (cons "ss_sales_price" 45.0))))
(define customer_demographics (list (list (cons "cd_demo_sk" 1) (cons "cd_gender" "F") (cons "cd_marital_status" "M") (cons "cd_education_status" "College")) (list (cons "cd_demo_sk" 2) (cons "cd_gender" "M") (cons "cd_marital_status" "S") (cons "cd_education_status" "College"))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_year" 2000))))
(define store (list (list (cons "s_store_sk" 1) (cons "s_state" "CA")) (list (cons "s_store_sk" 2) (cons "s_state" "TX"))))
(define item (list (list (cons "i_item_sk" 1) (cons "i_item_id" "ITEM1")) (list (cons "i_item_sk" 2) (cons "i_item_id" "ITEM2"))))
(define result (let ((_tmp '()))
  (for-each (lambda (ss)
    (for-each (lambda (cd)
      (when (equal? (map-get ss "ss_cdemo_sk") (map-get cd "cd_demo_sk"))
        (for-each (lambda (d)
          (when (equal? (map-get ss "ss_sold_date_sk") (map-get d "d_date_sk"))
            (for-each (lambda (s)
              (when (equal? (map-get ss "ss_store_sk") (map-get s "s_store_sk"))
                (for-each (lambda (i)
                  (when (equal? (map-get ss "ss_item_sk") (map-get i "i_item_sk"))
                    (when (if (member (and (equal? (and (equal? (and (equal? (and (equal? (map-get cd "cd_gender") "F") (map-get cd "cd_marital_status")) "M") (map-get cd "cd_education_status")) "College") (map-get d "d_year")) 2000) (map-get s "s_state")) (list "CA")) #t #f)
                      (set! _tmp (append _tmp (list ss)))
                    )
                  )) (if (string? item) (string->list item) item))
              )) (if (string? store) (string->list store) store))
          )) (if (string? date_dim) (string->list date_dim) date_dim))
      )) (if (string? customer_demographics) (string->list customer_demographics) customer_demographics))
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "i_item_id" (map-get (map-get g "key") "item_id")) (cons "s_state" (map-get (map-get g "key") "state")) (cons "agg1" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "ss_quantity"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "agg2" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "ss_list_price"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "agg3" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "ss_coupon_amt"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "agg4" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "ss_sales_price"))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (ss) (list (cons "item_id" (map-get i "i_item_id")) (cons "state" (map-get s "s_state"))))))
    (set! _res (_sort (map (lambda (x) (cons x (list (map-get (map-get g "key") "item_id") (map-get (map-get g "key") "state")))) _res)))
    (set! _res (map car _res))
    _res)))
(_json result)
(run-test "TPCDS Q27 averages by state" test_TPCDS_Q27_averages_by_state)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
