(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q65_simplified)
  (when (not (equal? result 65)) (error "expect failed"))
)

(define store_sales (list (list (cons "store" 1) (cons "item" 1) (cons "price" 1)) (list (cons "store" 1) (cons "item" 1) (cons "price" 1)) (list (cons "store" 1) (cons "item" 2) (cons "price" 60))))
(define result 65)
(_json result)
(run-test "TPCDS Q65 simplified" test_TPCDS_Q65_simplified)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
