(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-WebSale ws_sold_time_sk ws_ship_hdemo_sk ws_web_page_sk)
  (list (cons 'ws_sold_time_sk ws_sold_time_sk) (cons 'ws_ship_hdemo_sk ws_ship_hdemo_sk) (cons 'ws_web_page_sk ws_web_page_sk))
)

(define (test_TPCDS_Q90_ratio)
  (when (not (equal? result 2.0)) (error "expect failed"))
)

(define web_sales (list (list (cons "ws_sold_time_sk" 1) (cons "ws_ship_hdemo_sk" 1) (cons "ws_web_page_sk" 10)) (list (cons "ws_sold_time_sk" 1) (cons "ws_ship_hdemo_sk" 1) (cons "ws_web_page_sk" 10)) (list (cons "ws_sold_time_sk" 2) (cons "ws_ship_hdemo_sk" 1) (cons "ws_web_page_sk" 10))))
(define household_demographics (list (list (cons "hd_demo_sk" 1) (cons "hd_dep_count" 2))))
(define time_dim (list (list (cons "t_time_sk" 1) (cons "t_hour" 7)) (list (cons "t_time_sk" 2) (cons "t_hour" 14))))
(define web_page (list (list (cons "wp_web_page_sk" 10) (cons "wp_char_count" 5100))))
(define amc (_count (let ((_res '()))
  (for-each (lambda (ws)
    (for-each (lambda (hd)
      (when (equal? (map-get ws "ws_ship_hdemo_sk") (map-get hd "hd_demo_sk"))
        (for-each (lambda (t)
          (when (equal? (map-get ws "ws_sold_time_sk") (map-get t "t_time_sk"))
            (for-each (lambda (wp)
              (when (equal? (map-get ws "ws_web_page_sk") (map-get wp "wp_web_page_sk"))
                (when (<= (and (>= (and (equal? (and (<= (and (>= (map-get t "t_hour") 7) (map-get t "t_hour")) 8) (map-get hd "hd_dep_count")) 2) (map-get wp "wp_char_count")) 5000) (map-get wp "wp_char_count")) 5200)
                  (set! _res (append _res (list ws)))
                )
              )) (if (string? web_page) (string->list web_page) web_page))
          )) (if (string? time_dim) (string->list time_dim) time_dim))
      )) (if (string? household_demographics) (string->list household_demographics) household_demographics))
  ) (if (string? web_sales) (string->list web_sales) web_sales))
  _res)))
(define pmc (_count (let ((_res '()))
  (for-each (lambda (ws)
    (for-each (lambda (hd)
      (when (equal? (map-get ws "ws_ship_hdemo_sk") (map-get hd "hd_demo_sk"))
        (for-each (lambda (t)
          (when (equal? (map-get ws "ws_sold_time_sk") (map-get t "t_time_sk"))
            (for-each (lambda (wp)
              (when (equal? (map-get ws "ws_web_page_sk") (map-get wp "wp_web_page_sk"))
                (when (<= (and (>= (and (equal? (and (<= (and (>= (map-get t "t_hour") 14) (map-get t "t_hour")) 15) (map-get hd "hd_dep_count")) 2) (map-get wp "wp_char_count")) 5000) (map-get wp "wp_char_count")) 5200)
                  (set! _res (append _res (list ws)))
                )
              )) (if (string? web_page) (string->list web_page) web_page))
          )) (if (string? time_dim) (string->list time_dim) time_dim))
      )) (if (string? household_demographics) (string->list household_demographics) household_demographics))
  ) (if (string? web_sales) (string->list web_sales) web_sales))
  _res)))
(define result (/ (exact->inexact amc) (exact->inexact pmc)))
(_json result)
(run-test "TPCDS Q90 ratio" test_TPCDS_Q90_ratio)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
