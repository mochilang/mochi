(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(import (srfi 95))

(define (_fetch url opts)
  (let* ((method (if (and opts (assq 'method opts)) (cdr (assq 'method opts)) "GET"))
         (args (list "curl" "-s" "-X" method)))
    (when (and opts (assq 'headers opts))
      (for-each (lambda (p)
                  (set! args (append args (list "-H" (format "~a: ~a" (car p) (cdr p))))))
                (cdr (assq 'headers opts))))
    (when (and opts (assq 'query opts))
      (let* ((q (cdr (assq 'query opts)))
             (qs (string-join (map (lambda (p) (format "~a=~a" (car p) (cdr p))) q) "&")))
        (set! url (string-append url (if (string-contains url "?") "&" "?") qs))))
    (when (and opts (assq 'body opts))
      (set! args (append args (list "-d" (json->string (cdr (assq 'body opts)))))))
    (when (and opts (assq 'timeout opts))
      (set! args (append args (list "--max-time" (format "~a" (cdr (assq 'timeout opts)))))))
    (set! args (append args (list url)))
    (let* ((p (open-input-pipe (string-join args " ")))
           (txt (port->string p)))
      (close-input-port p)
      (string->json txt))))

(define (_load path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (in (if (or (not path) (string=? path "") (string=? path "-"))
                 (current-input-port)
                 (open-input-file path)))
         (text (port->string in)))
    (when (not (eq? in (current-input-port)))
      (close-input-port in))
    (cond ((string=? fmt "jsonl")
           (map string->json
                (filter (lambda (l) (not (string=? l "")))
                        (string-split text #\newline))))
          (else
           (let ((d (string->json text)))
             (if (list? d) d (list d)))))))

(define (_save rows path opts)
  (let* ((fmt (if (and opts (assq 'format opts)) (cdr (assq 'format opts)) "json"))
         (out (if (or (not path) (string=? path "") (string=? path "-"))
                  (current-output-port)
                  (open-output-file path))))
    (cond ((string=? fmt "jsonl")
           (for-each (lambda (r) (write-string (json->string r) out) (newline out)) rows))
          (else
           (write-string (json->string rows) out)))
    (when (not (eq? out (current-output-port)))
      (close-output-port out))))

(define (_lt a b)
  (cond
    ((and (number? a) (number? b)) (< a b))
    ((and (string? a) (string? b)) (string<? a b))
    ((and (pair? a) (pair? b))
      (cond
        ((null? a) (not (null? b)))
        ((null? b) #f)
        (else (let ((ka (car a)) (kb (car b)))
                (if (equal? ka kb)
                    (_lt (cdr a) (cdr b))
                    (_lt ka kb)))))
    )
    (else (string<? (format "~a" a) (format "~a" b)))))

(define (_sort pairs)
  (sort pairs (lambda (a b) (_lt (cdr a) (cdr b)))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q49_simplified)
  (when (not (equal? result (list (list (cons "channel" "catalog") (cons "item" "A") (cons "return_ratio" 0.3) (cons "return_rank" 1) (cons "currency_rank" 1)) (list (cons "channel" "store") (cons "item" "A") (cons "return_ratio" 0.25) (cons "return_rank" 1) (cons "currency_rank" 1)) (list (cons "channel" "web") (cons "item" "A") (cons "return_ratio" 0.2) (cons "return_rank" 1) (cons "currency_rank" 1)) (list (cons "channel" "web") (cons "item" "B") (cons "return_ratio" 0.5) (cons "return_rank" 2) (cons "currency_rank" 2))))) (error "expect failed"))
)

(define web (list (list (cons "item" "A") (cons "return_ratio" 0.2) (cons "currency_ratio" 0.3) (cons "return_rank" 1) (cons "currency_rank" 1)) (list (cons "item" "B") (cons "return_ratio" 0.5) (cons "currency_ratio" 0.6) (cons "return_rank" 2) (cons "currency_rank" 2))))
(define catalog (list (list (cons "item" "A") (cons "return_ratio" 0.3) (cons "currency_ratio" 0.4) (cons "return_rank" 1) (cons "currency_rank" 1))))
(define store (list (list (cons "item" "A") (cons "return_ratio" 0.25) (cons "currency_ratio" 0.35) (cons "return_rank" 1) (cons "currency_rank" 1))))
(define tmp (concat (let ((_res '()))
  (for-each (lambda (w)
    (when (<= (or (<= (map-get w "return_rank") 10) (map-get w "currency_rank")) 10)
      (set! _res (append _res (list (list (cons "channel" "web") (cons "item" (map-get w "item")) (cons "return_ratio" (map-get w "return_ratio")) (cons "return_rank" (map-get w "return_rank")) (cons "currency_rank" (map-get w "currency_rank"))))))
    )
  ) (if (string? web) (string->list web) web))
  _res) (let ((_res '()))
  (for-each (lambda (c)
    (when (<= (or (<= (map-get c "return_rank") 10) (map-get c "currency_rank")) 10)
      (set! _res (append _res (list (list (cons "channel" "catalog") (cons "item" (map-get c "item")) (cons "return_ratio" (map-get c "return_ratio")) (cons "return_rank" (map-get c "return_rank")) (cons "currency_rank" (map-get c "currency_rank"))))))
    )
  ) (if (string? catalog) (string->list catalog) catalog))
  _res) (let ((_res '()))
  (for-each (lambda (s)
    (when (<= (or (<= (map-get s "return_rank") 10) (map-get s "currency_rank")) 10)
      (set! _res (append _res (list (list (cons "channel" "store") (cons "item" (map-get s "item")) (cons "return_ratio" (map-get s "return_ratio")) (cons "return_rank" (map-get s "return_rank")) (cons "currency_rank" (map-get s "currency_rank"))))))
    )
  ) (if (string? store) (string->list store) store))
  _res)))
(define result (let ((_res '()) (_tmp '()))
  (for-each (lambda (r)
    (set! _tmp (append _tmp (list (cons r (list (map-get r "channel") (map-get r "return_rank") (map-get r "currency_rank") (map-get r "item"))))))
  ) (if (string? tmp) (string->list tmp) tmp))
  (set! _res (_sort _tmp))
  (set! _res (map car _res))
  _res))
(_json result)
(run-test "TPCDS Q49 simplified" test_TPCDS_Q49_simplified)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
