(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-Customer c_customer_sk c_current_addr_sk c_current_cdemo_sk)
  (list (cons 'c_customer_sk c_customer_sk) (cons 'c_current_addr_sk c_current_addr_sk) (cons 'c_current_cdemo_sk c_current_cdemo_sk))
)

(define (new-CustomerAddress ca_address_sk ca_county)
  (list (cons 'ca_address_sk ca_address_sk) (cons 'ca_county ca_county))
)

(define (new-CustomerDemographics cd_demo_sk cd_gender cd_marital_status cd_education_status cd_purchase_estimate cd_credit_rating cd_dep_count cd_dep_employed_count cd_dep_college_count)
  (list (cons 'cd_demo_sk cd_demo_sk) (cons 'cd_gender cd_gender) (cons 'cd_marital_status cd_marital_status) (cons 'cd_education_status cd_education_status) (cons 'cd_purchase_estimate cd_purchase_estimate) (cons 'cd_credit_rating cd_credit_rating) (cons 'cd_dep_count cd_dep_count) (cons 'cd_dep_employed_count cd_dep_employed_count) (cons 'cd_dep_college_count cd_dep_college_count))
)

(define (new-StoreSale ss_customer_sk ss_sold_date_sk)
  (list (cons 'ss_customer_sk ss_customer_sk) (cons 'ss_sold_date_sk ss_sold_date_sk))
)

(define (new-DateDim d_date_sk d_year d_moy)
  (list (cons 'd_date_sk d_date_sk) (cons 'd_year d_year) (cons 'd_moy d_moy))
)

(define (test_TPCDS_Q10_demographics_count)
  (when (not (equal? result (list (list (cons "cd_gender" "F") (cons "cd_marital_status" "M") (cons "cd_education_status" "College") (cons "cnt1" 1) (cons "cd_purchase_estimate" 5000) (cons "cnt2" 1) (cons "cd_credit_rating" "Good") (cons "cnt3" 1) (cons "cd_dep_count" 1) (cons "cnt4" 1) (cons "cd_dep_employed_count" 1) (cons "cnt5" 1) (cons "cd_dep_college_count" 0) (cons "cnt6" 1))))) (error "expect failed"))
)

(define customer (list (list (cons "c_customer_sk" 1) (cons "c_current_addr_sk" 1) (cons "c_current_cdemo_sk" 1))))
(define customer_address (list (list (cons "ca_address_sk" 1) (cons "ca_county" "CountyA"))))
(define customer_demographics (list (list (cons "cd_demo_sk" 1) (cons "cd_gender" "F") (cons "cd_marital_status" "M") (cons "cd_education_status" "College") (cons "cd_purchase_estimate" 5000) (cons "cd_credit_rating" "Good") (cons "cd_dep_count" 1) (cons "cd_dep_employed_count" 1) (cons "cd_dep_college_count" 0))))
(define store_sales (list (list (cons "ss_customer_sk" 1) (cons "ss_sold_date_sk" 1))))
(define web_sales (list ))
(define catalog_sales (list ))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_year" 2000) (cons "d_moy" 2))))
(define active (let ((_res '()))
  (for-each (lambda (c)
    (for-each (lambda (ca)
      (when (equal? (and (equal? (map-get c "c_current_addr_sk") (map-get ca "ca_address_sk")) (map-get ca "ca_county")) "CountyA")
        (for-each (lambda (cd)
          (when (equal? (map-get c "c_current_cdemo_sk") (map-get cd "cd_demo_sk"))
            (when (exists (let ((_res '()))
  (for-each (lambda (ss)
    (for-each (lambda (d)
      (when (equal? (map-get ss "ss_sold_date_sk") (map-get d "d_date_sk"))
        (when (<= (and (>= (and (equal? (and (equal? (map-get ss "ss_customer_sk") (map-get c "c_customer_sk")) (map-get d "d_year")) 2000) (map-get d "d_moy")) 2) (map-get d "d_moy")) 5)
          (set! _res (append _res (list ss)))
        )
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res))
              (set! _res (append _res (list cd)))
            )
          )) (if (string? customer_demographics) (string->list customer_demographics) customer_demographics))
      )) (if (string? customer_address) (string->list customer_address) customer_address))
  ) (if (string? customer) (string->list customer) customer))
  _res))
(define result (let ((_tmp '()))
  (for-each (lambda (a)
    (set! _tmp (append _tmp (list a)))
  ) (if (string? active) (string->list active) active))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "cd_gender" (map-get (map-get g "key") "gender")) (cons "cd_marital_status" (map-get (map-get g "key") "marital")) (cons "cd_education_status" (map-get (map-get g "key") "education")) (cons "cnt1" (_count (let ((_res '()))
  (for-each (lambda (_)
    (set! _res (append _res (list _)))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "cd_purchase_estimate" (map-get (map-get g "key") "purchase")) (cons "cnt2" (_count (let ((_res '()))
  (for-each (lambda (_)
    (set! _res (append _res (list _)))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "cd_credit_rating" (map-get (map-get g "key") "credit")) (cons "cnt3" (_count (let ((_res '()))
  (for-each (lambda (_)
    (set! _res (append _res (list _)))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "cd_dep_count" (map-get (map-get g "key") "dep")) (cons "cnt4" (_count (let ((_res '()))
  (for-each (lambda (_)
    (set! _res (append _res (list _)))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "cd_dep_employed_count" (map-get (map-get g "key") "depemp")) (cons "cnt5" (_count (let ((_res '()))
  (for-each (lambda (_)
    (set! _res (append _res (list _)))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "cd_dep_college_count" (map-get (map-get g "key") "depcol")) (cons "cnt6" (_count (let ((_res '()))
  (for-each (lambda (_)
    (set! _res (append _res (list _)))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (a) (list (cons "gender" (map-get a "cd_gender")) (cons "marital" (map-get a "cd_marital_status")) (cons "education" (map-get a "cd_education_status")) (cons "purchase" (map-get a "cd_purchase_estimate")) (cons "credit" (map-get a "cd_credit_rating")) (cons "dep" (map-get a "cd_dep_count")) (cons "depemp" (map-get a "cd_dep_employed_count")) (cons "depcol" (map-get a "cd_dep_college_count"))))))
    _res)))
(_json result)
(run-test "TPCDS Q10 demographics count" test_TPCDS_Q10_demographics_count)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
