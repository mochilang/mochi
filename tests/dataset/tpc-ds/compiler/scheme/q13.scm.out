(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-StoreSale ss_store_sk ss_sold_date_sk ss_hdemo_sk ss_cdemo_sk ss_addr_sk ss_sales_price ss_net_profit ss_quantity ss_ext_sales_price ss_ext_wholesale_cost)
  (list (cons 'ss_store_sk ss_store_sk) (cons 'ss_sold_date_sk ss_sold_date_sk) (cons 'ss_hdemo_sk ss_hdemo_sk) (cons 'ss_cdemo_sk ss_cdemo_sk) (cons 'ss_addr_sk ss_addr_sk) (cons 'ss_sales_price ss_sales_price) (cons 'ss_net_profit ss_net_profit) (cons 'ss_quantity ss_quantity) (cons 'ss_ext_sales_price ss_ext_sales_price) (cons 'ss_ext_wholesale_cost ss_ext_wholesale_cost))
)

(define (new-Store s_store_sk s_state)
  (list (cons 's_store_sk s_store_sk) (cons 's_state s_state))
)

(define (new-CustomerDemographics cd_demo_sk cd_marital_status cd_education_status)
  (list (cons 'cd_demo_sk cd_demo_sk) (cons 'cd_marital_status cd_marital_status) (cons 'cd_education_status cd_education_status))
)

(define (new-HouseholdDemographics hd_demo_sk hd_dep_count)
  (list (cons 'hd_demo_sk hd_demo_sk) (cons 'hd_dep_count hd_dep_count))
)

(define (new-CustomerAddress ca_address_sk ca_country ca_state)
  (list (cons 'ca_address_sk ca_address_sk) (cons 'ca_country ca_country) (cons 'ca_state ca_state))
)

(define (new-DateDim d_date_sk d_year)
  (list (cons 'd_date_sk d_date_sk) (cons 'd_year d_year))
)

(define (test_TPCDS_Q13_averages)
  (when (not (equal? result (list (list (cons "avg_ss_quantity" 10.0) (cons "avg_ss_ext_sales_price" 100.0) (cons "avg_ss_ext_wholesale_cost" 50.0) (cons "sum_ss_ext_wholesale_cost" 50.0))))) (error "expect failed"))
)

(define store_sales (list (list (cons "ss_store_sk" 1) (cons "ss_sold_date_sk" 1) (cons "ss_hdemo_sk" 1) (cons "ss_cdemo_sk" 1) (cons "ss_addr_sk" 1) (cons "ss_sales_price" 120.0) (cons "ss_net_profit" 150.0) (cons "ss_quantity" 10) (cons "ss_ext_sales_price" 100.0) (cons "ss_ext_wholesale_cost" 50.0))))
(define store (list (list (cons "s_store_sk" 1) (cons "s_state" "CA"))))
(define customer_demographics (list (list (cons "cd_demo_sk" 1) (cons "cd_marital_status" "M1") (cons "cd_education_status" "ES1"))))
(define household_demographics (list (list (cons "hd_demo_sk" 1) (cons "hd_dep_count" 3))))
(define customer_address (list (list (cons "ca_address_sk" 1) (cons "ca_country" "United States") (cons "ca_state" "CA"))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_year" 2001))))
(define filtered (let ((_res '()))
  (for-each (lambda (ss)
    (for-each (lambda (s)
      (when (equal? (map-get ss "ss_store_sk") (map-get s "s_store_sk"))
        (for-each (lambda (cd)
          (when (equal? (and (equal? (and (equal? (map-get ss "ss_cdemo_sk") (map-get cd "cd_demo_sk")) (map-get cd "cd_marital_status")) "M1") (map-get cd "cd_education_status")) "ES1")
            (for-each (lambda (hd)
              (when (equal? (and (equal? (map-get ss "ss_hdemo_sk") (map-get hd "hd_demo_sk")) (map-get hd "hd_dep_count")) 3)
                (for-each (lambda (ca)
                  (when (equal? (and (equal? (and (equal? (map-get ss "ss_addr_sk") (map-get ca "ca_address_sk")) (map-get ca "ca_country")) "United States") (map-get ca "ca_state")) "CA")
                    (for-each (lambda (d)
                      (when (equal? (and (equal? (map-get ss "ss_sold_date_sk") (map-get d "d_date_sk")) (map-get d "d_year")) 2001)
                        (set! _res (append _res (list ss)))
                      )) (if (string? date_dim) (string->list date_dim) date_dim))
                  )) (if (string? customer_address) (string->list customer_address) customer_address))
              )) (if (string? household_demographics) (string->list household_demographics) household_demographics))
          )) (if (string? customer_demographics) (string->list customer_demographics) customer_demographics))
      )) (if (string? store) (string->list store) store))
  ) (if (string? store_sales) (string->list store_sales) store_sales))
  _res))
(define result (let ((_tmp '()))
  (for-each (lambda (r)
    (set! _tmp (append _tmp (list r)))
  ) (if (string? filtered) (string->list filtered) filtered))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "avg_ss_quantity" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "ss_quantity"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "avg_ss_ext_sales_price" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "ss_ext_sales_price"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "avg_ss_ext_wholesale_cost" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "ss_ext_wholesale_cost"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "sum_ss_ext_wholesale_cost" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "ss_ext_wholesale_cost"))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (r) (list ))))
    _res)))
(_json result)
(run-test "TPCDS Q13 averages" test_TPCDS_Q13_averages)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
