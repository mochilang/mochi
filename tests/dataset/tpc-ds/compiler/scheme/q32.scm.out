(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q32_simplified)
  (when (not (equal? result 20.0)) (error "expect failed"))
)

(define catalog_sales (list (list (cons "cs_item_sk" 1) (cons "cs_sold_date_sk" 1) (cons "cs_ext_discount_amt" 5.0)) (list (cons "cs_item_sk" 1) (cons "cs_sold_date_sk" 2) (cons "cs_ext_discount_amt" 10.0)) (list (cons "cs_item_sk" 1) (cons "cs_sold_date_sk" 3) (cons "cs_ext_discount_amt" 20.0))))
(define item (list (list (cons "i_item_sk" 1) (cons "i_manufact_id" 1))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_year" 2000)) (list (cons "d_date_sk" 2) (cons "d_year" 2000)) (list (cons "d_date_sk" 3) (cons "d_year" 2000))))
(define filtered (let ((_res '()))
  (for-each (lambda (cs)
    (for-each (lambda (i)
      (when (equal? (map-get cs "cs_item_sk") (map-get i "i_item_sk"))
        (for-each (lambda (d)
          (when (equal? (map-get cs "cs_sold_date_sk") (map-get d "d_date_sk"))
            (when (equal? (and (equal? (map-get i "i_manufact_id") 1) (map-get d "d_year")) 2000)
              (set! _res (append _res (list (map-get cs "cs_ext_discount_amt"))))
            )
          )) (if (string? date_dim) (string->list date_dim) date_dim))
      )) (if (string? item) (string->list item) item))
  ) (if (string? catalog_sales) (string->list catalog_sales) catalog_sales))
  _res))
(define avg_discount (_avg filtered))
(define result (_sum (let ((_res '()))
  (for-each (lambda (x)
    (when (* (> x avg_discount) 1.3)
      (set! _res (append _res (list x)))
    )
  ) (if (string? filtered) (string->list filtered) filtered))
  _res)))
(_json result)
(run-test "TPCDS Q32 simplified" test_TPCDS_Q32_simplified)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
