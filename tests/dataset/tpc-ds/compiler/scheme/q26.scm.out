(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-CatalogSale cs_sold_date_sk cs_item_sk cs_bill_cdemo_sk cs_promo_sk cs_quantity cs_list_price cs_coupon_amt cs_sales_price)
  (list (cons 'cs_sold_date_sk cs_sold_date_sk) (cons 'cs_item_sk cs_item_sk) (cons 'cs_bill_cdemo_sk cs_bill_cdemo_sk) (cons 'cs_promo_sk cs_promo_sk) (cons 'cs_quantity cs_quantity) (cons 'cs_list_price cs_list_price) (cons 'cs_coupon_amt cs_coupon_amt) (cons 'cs_sales_price cs_sales_price))
)

(define (new-CustomerDemo cd_demo_sk cd_gender cd_marital_status cd_education_status)
  (list (cons 'cd_demo_sk cd_demo_sk) (cons 'cd_gender cd_gender) (cons 'cd_marital_status cd_marital_status) (cons 'cd_education_status cd_education_status))
)

(define (new-DateDim d_date_sk d_year)
  (list (cons 'd_date_sk d_date_sk) (cons 'd_year d_year))
)

(define (new-Item i_item_sk i_item_id)
  (list (cons 'i_item_sk i_item_sk) (cons 'i_item_id i_item_id))
)

(define (new-Promotion p_promo_sk p_channel_email p_channel_event)
  (list (cons 'p_promo_sk p_promo_sk) (cons 'p_channel_email p_channel_email) (cons 'p_channel_event p_channel_event))
)

(define (test_TPCDS_Q26_demographic_averages)
  (when (not (equal? result (list (list (cons "i_item_id" "ITEM1") (cons "agg1" 10.0) (cons "agg2" 100.0) (cons "agg3" 5.0) (cons "agg4" 95.0))))) (error "expect failed"))
)

(define catalog_sales (list (list (cons "cs_sold_date_sk" 1) (cons "cs_item_sk" 1) (cons "cs_bill_cdemo_sk" 1) (cons "cs_promo_sk" 1) (cons "cs_quantity" 10) (cons "cs_list_price" 100.0) (cons "cs_coupon_amt" 5.0) (cons "cs_sales_price" 95.0)) (list (cons "cs_sold_date_sk" 1) (cons "cs_item_sk" 2) (cons "cs_bill_cdemo_sk" 2) (cons "cs_promo_sk" 2) (cons "cs_quantity" 5) (cons "cs_list_price" 50.0) (cons "cs_coupon_amt" 2.0) (cons "cs_sales_price" 48.0))))
(define customer_demographics (list (list (cons "cd_demo_sk" 1) (cons "cd_gender" "M") (cons "cd_marital_status" "S") (cons "cd_education_status" "College")) (list (cons "cd_demo_sk" 2) (cons "cd_gender" "F") (cons "cd_marital_status" "M") (cons "cd_education_status" "High School"))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_year" 2000))))
(define item (list (list (cons "i_item_sk" 1) (cons "i_item_id" "ITEM1")) (list (cons "i_item_sk" 2) (cons "i_item_id" "ITEM2"))))
(define promotion (list (list (cons "p_promo_sk" 1) (cons "p_channel_email" "N") (cons "p_channel_event" "Y")) (list (cons "p_promo_sk" 2) (cons "p_channel_email" "Y") (cons "p_channel_event" "N"))))
(define result (let ((_tmp '()))
  (for-each (lambda (cs)
    (for-each (lambda (cd)
      (when (equal? (map-get cs "cs_bill_cdemo_sk") (map-get cd "cd_demo_sk"))
        (for-each (lambda (d)
          (when (equal? (map-get cs "cs_sold_date_sk") (map-get d "d_date_sk"))
            (for-each (lambda (i)
              (when (equal? (map-get cs "cs_item_sk") (map-get i "i_item_sk"))
                (for-each (lambda (p)
                  (when (equal? (map-get cs "cs_promo_sk") (map-get p "p_promo_sk"))
                    (when (equal? (and (and (equal? (and (equal? (and (equal? (map-get cd "cd_gender") "M") (map-get cd "cd_marital_status")) "S") (map-get cd "cd_education_status")) "College") (equal? (or (equal? (map-get p "p_channel_email") "N") (map-get p "p_channel_event")) "N")) (map-get d "d_year")) 2000)
                      (set! _tmp (append _tmp (list cs)))
                    )
                  )) (if (string? promotion) (string->list promotion) promotion))
              )) (if (string? item) (string->list item) item))
          )) (if (string? date_dim) (string->list date_dim) date_dim))
      )) (if (string? customer_demographics) (string->list customer_demographics) customer_demographics))
  ) (if (string? catalog_sales) (string->list catalog_sales) catalog_sales))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "i_item_id" (map-get g "key")) (cons "agg1" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "cs_quantity"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "agg2" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "cs_list_price"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "agg3" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "cs_coupon_amt"))))
  ) (if (string? g) (string->list g) g))
  _res))) (cons "agg4" (_avg (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "cs_sales_price"))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (cs) (map-get i "i_item_id"))))
    _res)))
(_json result)
(run-test "TPCDS Q26 demographic averages" test_TPCDS_Q26_demographic_averages)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
