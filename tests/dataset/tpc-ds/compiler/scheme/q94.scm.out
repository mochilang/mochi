(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-WebSale ws_order_number ws_ship_date_sk ws_warehouse_sk ws_ship_addr_sk ws_web_site_sk ws_net_profit ws_ext_ship_cost)
  (list (cons 'ws_order_number ws_order_number) (cons 'ws_ship_date_sk ws_ship_date_sk) (cons 'ws_warehouse_sk ws_warehouse_sk) (cons 'ws_ship_addr_sk ws_ship_addr_sk) (cons 'ws_web_site_sk ws_web_site_sk) (cons 'ws_net_profit ws_net_profit) (cons 'ws_ext_ship_cost ws_ext_ship_cost))
)

(define (new-WebReturn wr_order_number)
  (list (cons 'wr_order_number wr_order_number))
)

(define (new-DateDim d_date_sk d_date)
  (list (cons 'd_date_sk d_date_sk) (cons 'd_date d_date))
)

(define (new-CustomerAddress ca_address_sk ca_state)
  (list (cons 'ca_address_sk ca_address_sk) (cons 'ca_state ca_state))
)

(define (new-WebSite web_site_sk web_company_name)
  (list (cons 'web_site_sk web_site_sk) (cons 'web_company_name web_company_name))
)

(define (distinct xs)
  (call/cc (lambda (return)
    (define out '())
    (set! out (list ))
    (let loop ((x_idx 0))
      (if (< x_idx (length xs))
        (begin
          (let ((x (list-ref xs x_idx)))
            (if (not (contains out x))
              (begin
                (set! out (append out x))
              )
              '()
            )
          )
          (loop (+ x_idx 1))
        )
      '()
    )
    (return out)
  ))
)

(define (test_TPCDS_Q94_shipping)
  (when (not (equal? result (list (cons "order_count" 1) (cons "total_shipping_cost" 2.0) (cons "total_net_profit" 5.0)))) (error "expect failed"))
)

(define web_sales (list (list (cons "ws_order_number" 1) (cons "ws_ship_date_sk" 1) (cons "ws_warehouse_sk" 1) (cons "ws_ship_addr_sk" 1) (cons "ws_web_site_sk" 1) (cons "ws_net_profit" 5.0) (cons "ws_ext_ship_cost" 2.0)) (list (cons "ws_order_number" 2) (cons "ws_ship_date_sk" 1) (cons "ws_warehouse_sk" 2) (cons "ws_ship_addr_sk" 1) (cons "ws_web_site_sk" 1) (cons "ws_net_profit" 3.0) (cons "ws_ext_ship_cost" 1.0))))
(define web_returns (list (list (cons "wr_order_number" 2))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_date" "2001-02-01"))))
(define customer_address (list (list (cons "ca_address_sk" 1) (cons "ca_state" "CA"))))
(define web_site (list (list (cons "web_site_sk" 1) (cons "web_company_name" "pri"))))
(define filtered (let ((_res '()))
  (for-each (lambda (ws)
    (for-each (lambda (d)
      (when (equal? (map-get ws "ws_ship_date_sk") (map-get d "d_date_sk"))
        (for-each (lambda (ca)
          (when (equal? (map-get ws "ws_ship_addr_sk") (map-get ca "ca_address_sk"))
            (for-each (lambda (w)
              (when (equal? (map-get ws "ws_web_site_sk") (map-get w "web_site_sk"))
                (when (equal? (and (equal? (and (equal? (map-get ca "ca_state") "CA") (map-get w "web_company_name")) "pri") (exists (let ((_res '()))
  (for-each (lambda (wr)
    (when (equal? (map-get wr "wr_order_number") (map-get ws "ws_order_number"))
      (set! _res (append _res (list wr)))
    )
  ) (if (string? web_returns) (string->list web_returns) web_returns))
  _res))) #f)
                  (set! _res (append _res (list ws)))
                )
              )) (if (string? web_site) (string->list web_site) web_site))
          )) (if (string? customer_address) (string->list customer_address) customer_address))
      )) (if (string? date_dim) (string->list date_dim) date_dim))
  ) (if (string? web_sales) (string->list web_sales) web_sales))
  _res))
(define result (list (cons "order_count" (length (distinct (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "ws_order_number"))))
  ) (if (string? filtered) (string->list filtered) filtered))
  _res)))) (cons "total_shipping_cost" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "ws_ext_ship_cost"))))
  ) (if (string? filtered) (string->list filtered) filtered))
  _res))) (cons "total_net_profit" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "ws_net_profit"))))
  ) (if (string? filtered) (string->list filtered) filtered))
  _res)))))
(_json result)
(run-test "TPCDS Q94 shipping" test_TPCDS_Q94_shipping)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
