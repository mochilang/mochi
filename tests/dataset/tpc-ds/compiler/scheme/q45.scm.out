(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_slice obj i j)
  (let* ((n (if (string? obj) (string-length obj) (length obj)))
         (start i)
         (end j))
    (when (< start 0) (set! start (+ n start)))
    (when (< end 0) (set! end (+ n end)))
    (when (< start 0) (set! start 0))
    (when (> end n) (set! end n))
    (when (< end start) (set! end start))
        (if (string? obj)
        (substring obj start end)
        (let loop ((idx 0) (xs obj) (out '()))
          (if (or (null? xs) (>= idx end))
              (reverse out)
              (loop (+ idx 1) (cdr xs)
                    (if (>= idx start)
                        (cons (car xs) out)
                        out))))))
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (test_TPCDS_Q45_simplified)
  (when (not (equal? records (list (list (cons "ca_zip" "85669") (cons "sum_ws_sales_price" 50.0)) (list (cons "ca_zip" "99999") (cons "sum_ws_sales_price" 30.0))))) (error "expect failed"))
)

(define web_sales (list (list (cons "bill_customer_sk" 1) (cons "item_sk" 1) (cons "sold_date_sk" 1) (cons "sales_price" 50.0)) (list (cons "bill_customer_sk" 2) (cons "item_sk" 2) (cons "sold_date_sk" 1) (cons "sales_price" 30.0))))
(define customer (list (list (cons "c_customer_sk" 1) (cons "c_current_addr_sk" 1)) (list (cons "c_customer_sk" 2) (cons "c_current_addr_sk" 2))))
(define customer_address (list (list (cons "ca_address_sk" 1) (cons "ca_zip" "85669")) (list (cons "ca_address_sk" 2) (cons "ca_zip" "99999"))))
(define item (list (list (cons "i_item_sk" 1) (cons "i_item_id" "I1")) (list (cons "i_item_sk" 2) (cons "i_item_id" "I2"))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_qoy" 1) (cons "d_year" 2020))))
(define zip_list (list "85669" "86197" "88274" "83405" "86475" "85392" "85460" "80348" "81792"))
(define item_ids (list "I2"))
(define qoy 1)
(define year 2020)
(define base (let ((_tmp '()))
  (for-each (lambda (ws)
    (for-each (lambda (c)
      (when (equal? (map-get ws "bill_customer_sk") (map-get c "c_customer_sk"))
        (for-each (lambda (ca)
          (when (equal? (map-get c "c_current_addr_sk") (map-get ca "ca_address_sk"))
            (for-each (lambda (i)
              (when (equal? (map-get ws "item_sk") (map-get i "i_item_sk"))
                (for-each (lambda (d)
                  (when (equal? (map-get ws "sold_date_sk") (map-get d "d_date_sk"))
                    (when (equal? (and (equal? (and (if (member (or (if (member (_slice (map-get ca "ca_zip") 0 5) zip_list) #t #f) (map-get i "i_item_id")) item_ids) #t #f) (map-get d "d_qoy")) qoy) (map-get d "d_year")) year)
                      (set! _tmp (append _tmp (list ws)))
                    )
                  )) (if (string? date_dim) (string->list date_dim) date_dim))
              )) (if (string? item) (string->list item) item))
          )) (if (string? customer_address) (string->list customer_address) customer_address))
      )) (if (string? customer) (string->list customer) customer))
  ) (if (string? web_sales) (string->list web_sales) web_sales))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "ca_zip" (map-get g "key")) (cons "sum_ws_sales_price" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get (map-get x "ws") "sales_price"))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (ws) (map-get ca "ca_zip"))))
    _res)))
(define records base)
(_json records)
(run-test "TPCDS Q45 simplified" test_TPCDS_Q45_simplified)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
