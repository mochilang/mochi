(define (map-get m k)
    (let ((p (assoc k m)))
        (if p (cdr p) '()))
)
(define (map-set m k v)
    (let ((p (assoc k m)))
        (if p
            (begin (set-cdr! p v) m)
            (cons (cons k v) m)))
)
(define (_count v)
  (cond
    ((string? v) (string-length v))
    ((and (pair? v) (assq 'Items v)) (length (cdr (assq 'Items v))))
    ((list? v) (length v))
    (else 0)))

(define (_sum v)
  (let* ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
         (s (if (null? lst) 0 (apply + lst))))
    s))

(define (_avg v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (n 0))
    (set! n (length lst))
    (if (= n 0) 0 (/ (_sum lst) n)))

(define (_max v)
  (let ((lst (cond
               ((and (pair? v) (assq 'Items v)) (cdr (assq 'Items v)))
               ((list? v) v)
               (else '())))
        (m 0))
    (when (not (null? lst))
      (set! m (car lst))
      (for-each (lambda (n)
                  (when (> n m) (set! m n)))
                (cdr lst)))
    m))

(define (_group_by src keyfn)

(define (_group_by src keyfn)
  (let ((groups '()) (order '()))
    (for-each (lambda (it)
                (let* ((key (keyfn it))
                       (ks (format "~a" key))
                       (pair (assoc ks groups)))
                  (if pair
                      (let* ((grp (cdr pair))
                             (items (cdr (assq 'Items grp))))
                        (set-cdr! (assq 'Items grp) (append items (list it))))
                      (begin
                        (set! groups (append groups (list (cons ks (list (cons 'key key) (cons 'Items (list it)))))))
                        (set! order (append order (list ks))))))
              src)
    (map (lambda (k) (cdr (assoc k groups))) order))))
(define (_json v)
  (write v)
  (newline))
(define failures 0)
(define (print-test-start name)
  (display "   test ") (display name) (display " ..."))
(define (print-test-pass) (display " ok") (newline))
(define (print-test-fail err) (display " fail ") (display err) (newline))
(define (run-test name thunk)
  (print-test-start name)
  (let ((ok #t))
    (with-exception-handler
      (lambda (e)
        (set! ok #f)
        (set! failures (+ failures 1))
        (print-test-fail e))
      (lambda () (thunk)))
    (when ok (print-test-pass))))

(define (new-CallCenter cc_call_center_sk cc_call_center_id cc_name cc_manager)
  (list (cons 'cc_call_center_sk cc_call_center_sk) (cons 'cc_call_center_id cc_call_center_id) (cons 'cc_name cc_name) (cons 'cc_manager cc_manager))
)

(define (new-CatalogReturn cr_call_center_sk cr_returned_date_sk cr_returning_customer_sk cr_net_loss)
  (list (cons 'cr_call_center_sk cr_call_center_sk) (cons 'cr_returned_date_sk cr_returned_date_sk) (cons 'cr_returning_customer_sk cr_returning_customer_sk) (cons 'cr_net_loss cr_net_loss))
)

(define (new-DateDim d_date_sk d_year d_moy)
  (list (cons 'd_date_sk d_date_sk) (cons 'd_year d_year) (cons 'd_moy d_moy))
)

(define (new-Customer c_customer_sk c_current_cdemo_sk c_current_hdemo_sk c_current_addr_sk)
  (list (cons 'c_customer_sk c_customer_sk) (cons 'c_current_cdemo_sk c_current_cdemo_sk) (cons 'c_current_hdemo_sk c_current_hdemo_sk) (cons 'c_current_addr_sk c_current_addr_sk))
)

(define (new-CustomerAddress ca_address_sk ca_gmt_offset)
  (list (cons 'ca_address_sk ca_address_sk) (cons 'ca_gmt_offset ca_gmt_offset))
)

(define (new-CustomerDemographics cd_demo_sk cd_marital_status cd_education_status)
  (list (cons 'cd_demo_sk cd_demo_sk) (cons 'cd_marital_status cd_marital_status) (cons 'cd_education_status cd_education_status))
)

(define (new-HouseholdDemographics hd_demo_sk hd_buy_potential)
  (list (cons 'hd_demo_sk hd_demo_sk) (cons 'hd_buy_potential hd_buy_potential))
)

(define (test_TPCDS_Q91_returns)
  (when (not (equal? result (list (cons "Call_Center" "CC1") (cons "Call_Center_Name" "Main") (cons "Manager" "Alice") (cons "Returns_Loss" 10.0)))) (error "expect failed"))
)

(define call_center (list (list (cons "cc_call_center_sk" 1) (cons "cc_call_center_id" "CC1") (cons "cc_name" "Main") (cons "cc_manager" "Alice"))))
(define catalog_returns (list (list (cons "cr_call_center_sk" 1) (cons "cr_returned_date_sk" 1) (cons "cr_returning_customer_sk" 1) (cons "cr_net_loss" 10.0))))
(define date_dim (list (list (cons "d_date_sk" 1) (cons "d_year" 2001) (cons "d_moy" 5))))
(define customer (list (list (cons "c_customer_sk" 1) (cons "c_current_cdemo_sk" 1) (cons "c_current_hdemo_sk" 1) (cons "c_current_addr_sk" 1))))
(define customer_demographics (list (list (cons "cd_demo_sk" 1) (cons "cd_marital_status" "M") (cons "cd_education_status" "Unknown"))))
(define household_demographics (list (list (cons "hd_demo_sk" 1) (cons "hd_buy_potential" "1001-5000"))))
(define customer_address (list (list (cons "ca_address_sk" 1) (cons "ca_gmt_offset" (- 6)))))
(define result (first (let ((_tmp '()))
  (for-each (lambda (cc)
    (for-each (lambda (cr)
      (when (equal? (map-get cc "cc_call_center_sk") (map-get cr "cr_call_center_sk"))
        (for-each (lambda (d)
          (when (equal? (map-get cr "cr_returned_date_sk") (map-get d "d_date_sk"))
            (for-each (lambda (c)
              (when (equal? (map-get cr "cr_returning_customer_sk") (map-get c "c_customer_sk"))
                (for-each (lambda (cd)
                  (when (equal? (map-get c "c_current_cdemo_sk") (map-get cd "cd_demo_sk"))
                    (for-each (lambda (hd)
                      (when (equal? (map-get c "c_current_hdemo_sk") (map-get hd "hd_demo_sk"))
                        (for-each (lambda (ca)
                          (when (equal? (map-get c "c_current_addr_sk") (map-get ca "ca_address_sk"))
                            (when (equal? (and (equal? (and (equal? (and (equal? (and (equal? (and (equal? (map-get d "d_year") 2001) (map-get d "d_moy")) 5) (map-get cd "cd_marital_status")) "M") (map-get cd "cd_education_status")) "Unknown") (map-get hd "hd_buy_potential")) "1001-5000") (map-get ca "ca_gmt_offset")) (- 6))
                              (set! _tmp (append _tmp (list cc)))
                            )
                          )) (if (string? customer_address) (string->list customer_address) customer_address))
                      )) (if (string? household_demographics) (string->list household_demographics) household_demographics))
                  )) (if (string? customer_demographics) (string->list customer_demographics) customer_demographics))
              )) (if (string? customer) (string->list customer) customer))
          )) (if (string? date_dim) (string->list date_dim) date_dim))
      )) (if (string? catalog_returns) (string->list catalog_returns) catalog_returns))
  ) (if (string? call_center) (string->list call_center) call_center))
  (let ((_res '()))
    (for-each (lambda (g)
      (set! _res (append _res (list (list (cons "Call_Center" (map-get (map-get g "key") "id")) (cons "Call_Center_Name" (map-get (map-get g "key") "name")) (cons "Manager" (map-get (map-get g "key") "mgr")) (cons "Returns_Loss" (_sum (let ((_res '()))
  (for-each (lambda (x)
    (set! _res (append _res (list (map-get x "cr_net_loss"))))
  ) (if (string? g) (string->list g) g))
  _res)))))))
    ) (_group_by _tmp (lambda (cc) (list (cons "id" (map-get cc "cc_call_center_id")) (cons "name" (map-get cc "cc_name")) (cons "mgr" (map-get cc "cc_manager"))))))
    _res))))
(_json result)
(run-test "TPCDS Q91 returns" test_TPCDS_Q91_returns)
(when (> failures 0) (display "\n[FAIL] ") (display failures) (display " test(s) failed.\n"))
