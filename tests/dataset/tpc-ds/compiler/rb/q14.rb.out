require "ostruct"

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end

  def length
    @Items.length
  end

  def each(&block)
    @Items.each(&block)
  end
end

def _group_by(src, keyfn)
  grouped = src.group_by do |it|
    if it.is_a?(Array)
      keyfn.call(*it)
    else
      keyfn.call(it)
    end
  end
  grouped.map do |k, items|
    g = MGroup.new(k)
    items.each do |it|
      g.Items << if it.is_a?(Array) && it.length == 1
        it[0]
      else
        it
      end
    end
    g
  end
end

def _json(v)
  require "json"
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end

def _query(src, joins, opts)
  where_fn = opts["where"]
  items = []
  if joins.empty?
    src.each do |v|
      row = [v]
      next if where_fn && !where_fn.call(*row)
      items << row
    end
  else
    items = src.map { |v| [v] }
    joins.each_with_index do |j, idx|
      joined = []
      jitems = j["items"]
      on = j["on"]
      left = j["left"]
      right = j["right"]
      last = idx == joins.length - 1
      if right && left
        matched = Array.new(jitems.length, false)
        items.each do |l|
          m = false
          jitems.each_with_index do |r, ri|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            matched[ri] = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          row = l + [nil]
          if left && !m
            if last && where_fn && !where_fn.call(*row)
              # skip
            else
              joined << row
            end
          end
        end
        jitems.each_with_index do |r, ri|
          next if matched[ri]
          _undef = Array.new(items[0]&.length || 0, nil)
          row = _undef + [r]
          if last && where_fn && !where_fn.call(*row)
            next
          end
          joined << row
        end
      elsif right
        jitems.each do |r|
          m = false
          items.each do |l|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          unless m
            _undef = Array.new(items[0]&.length || 0, nil)
            row = _undef + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      else
        items.each do |l|
          m = false
          jitems.each do |r|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          if left && !m
            row = l + [nil]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      end
      items = joined
    end
  end
  if opts["sortKey"]
    items = items.map { |it| [it, opts["sortKey"].call(*it)] }
    items.sort_by! { |p| p[1] }
    items.map!(&:first)
  end
  if opts.key?("skip")
    n = opts["skip"]
    items = (n < items.length) ? items[n..-1] : []
  end
  if opts.key?("take")
    n = opts["take"]
    items = (n < items.length) ? items[0...n] : items
  end
  res = []
  items.each { |r| res << opts["select"].call(*r) }
  res
end

def _sum(v)
  list = nil
  if v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  s = 0.0
  list.each { |n| s += n.to_f }
  s
end

StoreSale = Struct.new(:ss_item_sk, :ss_list_price, :ss_quantity, :ss_sold_date_sk, keyword_init: true)

CatalogSale = Struct.new(:cs_item_sk, :cs_list_price, :cs_quantity, :cs_sold_date_sk, keyword_init: true)

WebSale = Struct.new(:ws_item_sk, :ws_list_price, :ws_quantity, :ws_sold_date_sk, keyword_init: true)

Item = Struct.new(:i_item_sk, :i_brand_id, :i_class_id, :i_category_id, keyword_init: true)

DateDim = Struct.new(:d_date_sk, :d_year, :d_moy, keyword_init: true)

store_sales = [OpenStruct.new(ss_item_sk: 1, ss_list_price: 10.0, ss_quantity: 2, ss_sold_date_sk: 1), OpenStruct.new(ss_item_sk: 1, ss_list_price: 20.0, ss_quantity: 3, ss_sold_date_sk: 2)]
[OpenStruct.new(cs_item_sk: 1, cs_list_price: 10.0, cs_quantity: 2, cs_sold_date_sk: 1)]
[OpenStruct.new(ws_item_sk: 1, ws_list_price: 30.0, ws_quantity: 1, ws_sold_date_sk: 1)]
[OpenStruct.new(i_item_sk: 1, i_brand_id: 1, i_class_id: 1, i_category_id: 1)]
date_dim = [OpenStruct.new(d_date_sk: 1, d_year: 2000, d_moy: 12), OpenStruct.new(d_date_sk: 2, d_year: 2002, d_moy: 11)]
cross_items = [OpenStruct.new(ss_item_sk: 1)]
avg_sales = (([20.0, 20.0, 30.0].length > 0) ? [20.0, 20.0, 30.0].sum(0.0) / [20.0, 20.0, 30.0].length : 0)
store_filtered = (begin
  src = store_sales
  _rows = _query(src, [
    {"items" => date_dim, "on" => ->(ss, d) { (ss.ss_sold_date_sk == d.d_date_sk) && (d.d_year == 2002) && (d.d_moy == 11) }}
  ], {"select" => ->(ss, d) { [ss, d] }, "where" => ->(ss, d) { (cross_items.map { |ci| ci.ss_item_sk }).include?(ss.ss_item_sk) }})
  _groups = _group_by(_rows, ->(ss, d) { OpenStruct.new(brand_id: 1, class_id: 1, category_id: 1) })
  _res = []
  for g in _groups
    _res << OpenStruct.new(channel: "store", sales: _sum(g.map { |x| (x.ss_quantity * x.ss_list_price) }), number_sales: (g.map { |_| _ }).length)
  end
  _res
end)
result = (store_filtered.select { |r| (r.sales > avg_sales) }).map { |r| OpenStruct.new(channel: r.channel, i_brand_id: 1, i_class_id: 1, i_category_id: 1, sales: r.sales, number_sales: r.number_sales) }
_json(result)
raise "expect failed" unless result == [OpenStruct.new(channel: "store", i_brand_id: 1, i_class_id: 1, i_category_id: 1, sales: 60.0, number_sales: 1)]
