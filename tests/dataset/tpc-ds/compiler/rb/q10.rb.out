require "ostruct"

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end

  def length
    @Items.length
  end

  def each(&block)
    @Items.each(&block)
  end
end

def _group_by(src, keyfn)
  grouped = src.group_by do |it|
    if it.is_a?(Array)
      keyfn.call(*it)
    else
      keyfn.call(it)
    end
  end
  grouped.map do |k, items|
    g = MGroup.new(k)
    items.each do |it|
      g.Items << if it.is_a?(Array) && it.length == 1
        it[0]
      else
        it
      end
    end
    g
  end
end

def _json(v)
  require "json"
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end

Customer = Struct.new(:c_customer_sk, :c_current_addr_sk, :c_current_cdemo_sk, keyword_init: true)

CustomerAddress = Struct.new(:ca_address_sk, :ca_county, keyword_init: true)

CustomerDemographics = Struct.new(:cd_demo_sk, :cd_gender, :cd_marital_status, :cd_education_status, :cd_purchase_estimate, :cd_credit_rating, :cd_dep_count, :cd_dep_employed_count, :cd_dep_college_count, keyword_init: true)

StoreSale = Struct.new(:ss_customer_sk, :ss_sold_date_sk, keyword_init: true)

DateDim = Struct.new(:d_date_sk, :d_year, :d_moy, keyword_init: true)

customer = [OpenStruct.new(c_customer_sk: 1, c_current_addr_sk: 1, c_current_cdemo_sk: 1)]
customer_address = [OpenStruct.new(ca_address_sk: 1, ca_county: "CountyA")]
customer_demographics = [OpenStruct.new(cd_demo_sk: 1, cd_gender: "F", cd_marital_status: "M", cd_education_status: "College", cd_purchase_estimate: 5000, cd_credit_rating: "Good", cd_dep_count: 1, cd_dep_employed_count: 1, cd_dep_college_count: 0)]
store_sales = [OpenStruct.new(ss_customer_sk: 1, ss_sold_date_sk: 1)]
date_dim = [OpenStruct.new(d_date_sk: 1, d_year: 2000, d_moy: 2)]
active = (begin
  _res = []
  for c in customer
    for ca in customer_address
      if (c.c_current_addr_sk == ca.ca_address_sk) && (ca.ca_county == "CountyA")
        for cd in customer_demographics
          if c.c_current_cdemo_sk == cd.cd_demo_sk
            if exists.call(begin
              _res = []
              for ss in store_sales
                for d in date_dim
                  if ss.ss_sold_date_sk == d.d_date_sk
                    if (ss.ss_customer_sk == c.c_customer_sk) && (d.d_year == 2000) && (d.d_moy >= 2) && (d.d_moy <= 5)
                      _res << ss
                    end
                  end
                end
              end
              _res
            end)
              _res << cd
            end
          end
        end
      end
    end
  end
  _res
end)
result = _group_by(active, ->(a) { OpenStruct.new(gender: a.cd_gender, marital: a.cd_marital_status, education: a.cd_education_status, purchase: a.cd_purchase_estimate, credit: a.cd_credit_rating, dep: a.cd_dep_count, depemp: a.cd_dep_employed_count, depcol: a.cd_dep_college_count) }).map { |g| OpenStruct.new(cd_gender: g.key.gender, cd_marital_status: g.key.marital, cd_education_status: g.key.education, cnt1: (g.map { |_| _ }).length, cd_purchase_estimate: g.key.purchase, cnt2: (g.map { |_| _ }).length, cd_credit_rating: g.key.credit, cnt3: (g.map { |_| _ }).length, cd_dep_count: g.key.dep, cnt4: (g.map { |_| _ }).length, cd_dep_employed_count: g.key.depemp, cnt5: (g.map { |_| _ }).length, cd_dep_college_count: g.key.depcol, cnt6: (g.map { |_| _ }).length) }
_json(result)
raise "expect failed" unless result == [OpenStruct.new(cd_gender: "F", cd_marital_status: "M", cd_education_status: "College", cnt1: 1, cd_purchase_estimate: 5000, cnt2: 1, cd_credit_rating: "Good", cnt3: 1, cd_dep_count: 1, cnt4: 1, cd_dep_employed_count: 1, cnt5: 1, cd_dep_college_count: 0, cnt6: 1)]
