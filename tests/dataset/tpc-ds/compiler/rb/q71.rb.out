require "ostruct"

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end

  def length
    @Items.length
  end

  def each(&block)
    @Items.each(&block)
  end
end

def _group_by(src, keyfn)
  grouped = src.group_by do |it|
    if it.is_a?(Array)
      keyfn.call(*it)
    else
      keyfn.call(it)
    end
  end
  grouped.map do |k, items|
    g = MGroup.new(k)
    items.each do |it|
      g.Items << if it.is_a?(Array) && it.length == 1
        it[0]
      else
        it
      end
    end
    g
  end
end

def _json(v)
  require "json"
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end

def _query(src, joins, opts)
  where_fn = opts["where"]
  items = []
  if joins.empty?
    src.each do |v|
      row = [v]
      next if where_fn && !where_fn.call(*row)
      items << row
    end
  else
    items = src.map { |v| [v] }
    joins.each_with_index do |j, idx|
      joined = []
      jitems = j["items"]
      on = j["on"]
      left = j["left"]
      right = j["right"]
      last = idx == joins.length - 1
      if right && left
        matched = Array.new(jitems.length, false)
        items.each do |l|
          m = false
          jitems.each_with_index do |r, ri|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            matched[ri] = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          row = l + [nil]
          if left && !m
            if last && where_fn && !where_fn.call(*row)
              # skip
            else
              joined << row
            end
          end
        end
        jitems.each_with_index do |r, ri|
          next if matched[ri]
          _undef = Array.new(items[0]&.length || 0, nil)
          row = _undef + [r]
          if last && where_fn && !where_fn.call(*row)
            next
          end
          joined << row
        end
      elsif right
        jitems.each do |r|
          m = false
          items.each do |l|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          unless m
            _undef = Array.new(items[0]&.length || 0, nil)
            row = _undef + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      else
        items.each do |l|
          m = false
          jitems.each do |r|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          if left && !m
            row = l + [nil]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      end
      items = joined
    end
  end
  if opts["sortKey"]
    items = items.map { |it| [it, opts["sortKey"].call(*it)] }
    items.sort_by! { |p| p[1] }
    items.map!(&:first)
  end
  if opts.key?("skip")
    n = opts["skip"]
    items = (n < items.length) ? items[n..-1] : []
  end
  if opts.key?("take")
    n = opts["take"]
    items = (n < items.length) ? items[0...n] : items
  end
  res = []
  items.each { |r| res << opts["select"].call(*r) }
  res
end

def _sum(v)
  list = nil
  if v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  s = 0.0
  list.each { |n| s += n.to_f }
  s
end

item = [OpenStruct.new(i_item_sk: 1, i_brand_id: 10, i_brand: "BrandA", i_manager_id: 1), OpenStruct.new(i_item_sk: 2, i_brand_id: 20, i_brand: "BrandB", i_manager_id: 1)]
time_dim = [OpenStruct.new(t_time_sk: 1, t_hour: 8, t_minute: 30, t_meal_time: "breakfast"), OpenStruct.new(t_time_sk: 2, t_hour: 18, t_minute: 0, t_meal_time: "dinner"), OpenStruct.new(t_time_sk: 3, t_hour: 12, t_minute: 0, t_meal_time: "lunch")]
date_dim = [OpenStruct.new(d_date_sk: 1, d_moy: 12, d_year: 1998)]
web_sales = [OpenStruct.new(ws_ext_sales_price: 100.0, ws_sold_date_sk: 1, ws_item_sk: 1, ws_sold_time_sk: 1)]
catalog_sales = [OpenStruct.new(cs_ext_sales_price: 200.0, cs_sold_date_sk: 1, cs_item_sk: 1, cs_sold_time_sk: 2)]
store_sales = [OpenStruct.new(ss_ext_sales_price: 150.0, ss_sold_date_sk: 1, ss_item_sk: 2, ss_sold_time_sk: 1)]
month = 12
year = 1998
union_sales = (((begin
  _res = []
  for ws in web_sales
    for d in date_dim
      if d.d_date_sk == ws.ws_sold_date_sk
        if (d.d_moy == month) && (d.d_year == year)
          _res << OpenStruct.new(ext_price: ws.ws_ext_sales_price, item_sk: ws.ws_item_sk, time_sk: ws.ws_sold_time_sk)
        end
      end
    end
  end
  _res
end) + (begin
  _res = []
  for cs in catalog_sales
    for d in date_dim
      if d.d_date_sk == cs.cs_sold_date_sk
        if (d.d_moy == month) && (d.d_year == year)
          _res << OpenStruct.new(ext_price: cs.cs_ext_sales_price, item_sk: cs.cs_item_sk, time_sk: cs.cs_sold_time_sk)
        end
      end
    end
  end
  _res
end)) + (begin
  _res = []
  for ss in store_sales
    for d in date_dim
      if d.d_date_sk == ss.ss_sold_date_sk
        if (d.d_moy == month) && (d.d_year == year)
          _res << OpenStruct.new(ext_price: ss.ss_ext_sales_price, item_sk: ss.ss_item_sk, time_sk: ss.ss_sold_time_sk)
        end
      end
    end
  end
  _res
end))
result = (begin
  src = item
  _rows = _query(src, [
    {"items" => union_sales, "on" => ->(i, s) { (s.item_sk == i.i_item_sk) }},
    {"items" => time_dim, "on" => ->(i, s, t) { (t.t_time_sk == s.time_sk) }}
  ], {"select" => ->(i, s, t) { [i, s, t] }, "where" => ->(i, s, t) { (i.i_manager_id == 1) && ((t.t_meal_time == "breakfast") || (t.t_meal_time == "dinner")) }, "sortKey" => ->(i, s, t) { [-_sum(g.map { |x| x.s.ext_price }), g.key.brand_id] }})
  _groups = _group_by(_rows, ->(i, s, t) { OpenStruct.new(brand_id: i.i_brand_id, brand: i.i_brand, t_hour: t.t_hour, t_minute: t.t_minute) })
  _res = []
  for g in _groups
    _res << OpenStruct.new(i_brand_id: g.key.brand_id, i_brand: g.key.brand, t_hour: g.key.t_hour, t_minute: g.key.t_minute, ext_price: _sum(g.map { |x| x.s.ext_price }))
  end
  _res
end)
_json(result)
raise "expect failed" unless result == [OpenStruct.new(i_brand_id: 10, i_brand: "BrandA", t_hour: 18, t_minute: 0, ext_price: 200.0), OpenStruct.new(i_brand_id: 20, i_brand: "BrandB", t_hour: 8, t_minute: 30, ext_price: 150.0), OpenStruct.new(i_brand_id: 10, i_brand: "BrandA", t_hour: 8, t_minute: 30, ext_price: 100.0)]
