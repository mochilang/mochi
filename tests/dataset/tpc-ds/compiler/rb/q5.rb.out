require "ostruct"

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end

  def length
    @Items.length
  end

  def each(&block)
    @Items.each(&block)
  end
end

def _group_by(src, keyfn)
  grouped = src.group_by do |it|
    if it.is_a?(Array)
      keyfn.call(*it)
    else
      keyfn.call(it)
    end
  end
  grouped.map do |k, items|
    g = MGroup.new(k)
    items.each do |it|
      g.Items << if it.is_a?(Array) && it.length == 1
        it[0]
      else
        it
      end
    end
    g
  end
end

def _json(v)
  require "json"
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end

def _query(src, joins, opts)
  where_fn = opts["where"]
  items = []
  if joins.empty?
    src.each do |v|
      row = [v]
      next if where_fn && !where_fn.call(*row)
      items << row
    end
  else
    items = src.map { |v| [v] }
    joins.each_with_index do |j, idx|
      joined = []
      jitems = j["items"]
      on = j["on"]
      left = j["left"]
      right = j["right"]
      last = idx == joins.length - 1
      if right && left
        matched = Array.new(jitems.length, false)
        items.each do |l|
          m = false
          jitems.each_with_index do |r, ri|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            matched[ri] = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          row = l + [nil]
          if left && !m
            if last && where_fn && !where_fn.call(*row)
              # skip
            else
              joined << row
            end
          end
        end
        jitems.each_with_index do |r, ri|
          next if matched[ri]
          _undef = Array.new(items[0]&.length || 0, nil)
          row = _undef + [r]
          if last && where_fn && !where_fn.call(*row)
            next
          end
          joined << row
        end
      elsif right
        jitems.each do |r|
          m = false
          items.each do |l|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          unless m
            _undef = Array.new(items[0]&.length || 0, nil)
            row = _undef + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      else
        items.each do |l|
          m = false
          jitems.each do |r|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          if left && !m
            row = l + [nil]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      end
      items = joined
    end
  end
  if opts["sortKey"]
    items = items.map { |it| [it, opts["sortKey"].call(*it)] }
    items.sort_by! { |p| p[1] }
    items.map!(&:first)
  end
  if opts.key?("skip")
    n = opts["skip"]
    items = (n < items.length) ? items[n..-1] : []
  end
  if opts.key?("take")
    n = opts["take"]
    items = (n < items.length) ? items[0...n] : items
  end
  res = []
  items.each { |r| res << opts["select"].call(*r) }
  res
end

def _sum(v)
  list = nil
  if v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  s = 0.0
  list.each { |n| s += n.to_f }
  s
end

store_sales = []
store_returns = []
store = []
catalog_sales = []
catalog_returns = []
catalog_page = []
web_sales = []
web_returns = []
web_site = []
date_dim = []
ss = (begin
  src = store_sales
  _rows = _query(src, [
    {"items" => date_dim, "on" => ->(ss, d) { (ss.ss_sold_date_sk == d.d_date_sk) }},
    {"items" => store, "on" => ->(ss, d, s) { (ss.ss_store_sk == s.s_store_sk) }}
  ], {"select" => ->(ss, d, s) { [ss, d, s] }, "where" => ->(ss, d, s) { (d.d_date >= "1998-12-01") && (d.d_date <= "1998-12-15") }})
  _groups = _group_by(_rows, ->(ss, d, s) { s.s_store_id })
  _res = []
  for g in _groups
    _res << OpenStruct.new(channel: "store channel", id: ("store" + g.key.to_s), sales: _sum(g.map { |x| x.ss.ss_ext_sales_price }), returns: 0.0, profit: _sum(g.map { |x| x.ss.ss_net_profit }), profit_loss: 0.0)
  end
  _res
end)
sr = (begin
  src = store_returns
  _rows = _query(src, [
    {"items" => date_dim, "on" => ->(sr, d) { (sr.sr_returned_date_sk == d.d_date_sk) }},
    {"items" => store, "on" => ->(sr, d, s) { (sr.sr_store_sk == s.s_store_sk) }}
  ], {"select" => ->(sr, d, s) { [sr, d, s] }, "where" => ->(sr, d, s) { (d.d_date >= "1998-12-01") && (d.d_date <= "1998-12-15") }})
  _groups = _group_by(_rows, ->(sr, d, s) { s.s_store_id })
  _res = []
  for g in _groups
    _res << OpenStruct.new(channel: "store channel", id: ("store" + g.key.to_s), sales: 0.0, returns: _sum(g.map { |x| x.sr.sr_return_amt }), profit: 0.0, profit_loss: _sum(g.map { |x| x.sr.sr_net_loss }))
  end
  _res
end)
cs = (begin
  src = catalog_sales
  _rows = _query(src, [
    {"items" => date_dim, "on" => ->(cs, d) { (cs.cs_sold_date_sk == d.d_date_sk) }},
    {"items" => catalog_page, "on" => ->(cs, d, cp) { (cs.cs_catalog_page_sk == cp.cp_catalog_page_sk) }}
  ], {"select" => ->(cs, d, cp) { [cs, d, cp] }, "where" => ->(cs, d, cp) { (d.d_date >= "1998-12-01") && (d.d_date <= "1998-12-15") }})
  _groups = _group_by(_rows, ->(cs, d, cp) { cp.cp_catalog_page_id })
  _res = []
  for g in _groups
    _res << OpenStruct.new(channel: "catalog channel", id: ("catalog_page" + g.key.to_s), sales: _sum(g.map { |x| x.cs.cs_ext_sales_price }), returns: 0.0, profit: _sum(g.map { |x| x.cs.cs_net_profit }), profit_loss: 0.0)
  end
  _res
end)
cr = (begin
  src = catalog_returns
  _rows = _query(src, [
    {"items" => date_dim, "on" => ->(cr, d) { (cr.cr_returned_date_sk == d.d_date_sk) }},
    {"items" => catalog_page, "on" => ->(cr, d, cp) { (cr.cr_catalog_page_sk == cp.cp_catalog_page_sk) }}
  ], {"select" => ->(cr, d, cp) { [cr, d, cp] }, "where" => ->(cr, d, cp) { (d.d_date >= "1998-12-01") && (d.d_date <= "1998-12-15") }})
  _groups = _group_by(_rows, ->(cr, d, cp) { cp.cp_catalog_page_id })
  _res = []
  for g in _groups
    _res << OpenStruct.new(channel: "catalog channel", id: ("catalog_page" + g.key.to_s), sales: 0.0, returns: _sum(g.map { |x| x.cr.cr_return_amount }), profit: 0.0, profit_loss: _sum(g.map { |x| x.cr.cr_net_loss }))
  end
  _res
end)
ws = (begin
  src = web_sales
  _rows = _query(src, [
    {"items" => date_dim, "on" => ->(ws, d) { (ws.ws_sold_date_sk == d.d_date_sk) }},
    {"items" => web_site, "on" => ->(ws, d, w) { (ws.ws_web_site_sk == w.web_site_sk) }}
  ], {"select" => ->(ws, d, w) { [ws, d, w] }, "where" => ->(ws, d, w) { (d.d_date >= "1998-12-01") && (d.d_date <= "1998-12-15") }})
  _groups = _group_by(_rows, ->(ws, d, w) { w.web_site_id })
  _res = []
  for g in _groups
    _res << OpenStruct.new(channel: "web channel", id: ("web_site" + g.key.to_s), sales: _sum(g.map { |x| x.ws.ws_ext_sales_price }), returns: 0.0, profit: _sum(g.map { |x| x.ws.ws_net_profit }), profit_loss: 0.0)
  end
  _res
end)
wr = (begin
  src = web_returns
  _rows = _query(src, [
    {"items" => web_sales, "on" => ->(wr, ws) { (wr.wr_item_sk == ws.ws_item_sk) && (wr.wr_order_number == ws.ws_order_number) }},
    {"items" => date_dim, "on" => ->(wr, ws, d) { (wr.wr_returned_date_sk == d.d_date_sk) }},
    {"items" => web_site, "on" => ->(wr, ws, d, w) { (ws.ws_web_site_sk == w.web_site_sk) }}
  ], {"select" => ->(wr, ws, d, w) { [wr, ws, d, w] }, "where" => ->(wr, ws, d, w) { (d.d_date >= "1998-12-01") && (d.d_date <= "1998-12-15") }})
  _groups = _group_by(_rows, ->(wr, ws, d, w) { w.web_site_id })
  _res = []
  for g in _groups
    _res << OpenStruct.new(channel: "web channel", id: ("web_site" + g.key.to_s), sales: 0.0, returns: _sum(g.map { |x| x.wr.wr_return_amt }), profit: 0.0, profit_loss: _sum(g.map { |x| x.wr.wr_net_loss }))
  end
  _res
end)
per_channel = (((ss + sr) + (cs + cr)) + (ws + wr))
result = (begin
  src = per_channel
  _rows = _query(src, [], {"select" => ->(p) { [p] }, "sortKey" => ->(p) { g.key.channel }})
  _groups = _group_by(_rows, ->(p) { OpenStruct.new(channel: p.channel, id: p.id) })
  _res = []
  for g in _groups
    _res << OpenStruct.new(channel: g.key.channel, id: g.key.id, sales: _sum(g.map { |x| x.p.sales }), returns: _sum(g.map { |x| x.p.returns }), profit: (_sum(g.map { |x| x.p.profit }) - _sum(g.map { |x| x.p.profit_loss })))
  end
  _res
end)
_json(result)
raise "expect failed" unless result.length == 0
