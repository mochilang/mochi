require "ostruct"

def _json(v)
  require "json"
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end

def _sum(v)
  list = nil
  if v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  s = 0.0
  list.each { |n| s += n.to_f }
  s
end

WebSale = Struct.new(:ws_order_number, :ws_ship_date_sk, :ws_warehouse_sk, :ws_ship_addr_sk, :ws_web_site_sk, :ws_net_profit, :ws_ext_ship_cost, keyword_init: true)

WebReturn = Struct.new(:wr_order_number, keyword_init: true)

DateDim = Struct.new(:d_date_sk, :d_date, keyword_init: true)

CustomerAddress = Struct.new(:ca_address_sk, :ca_state, keyword_init: true)

WebSite = Struct.new(:web_site_sk, :web_company_name, keyword_init: true)

def distinct(xs)
  out = []
  for x in xs
    if !contains.call(out, x)
      out = append.call(out, x)
    end
  end
  out
end

web_sales = [OpenStruct.new(ws_order_number: 1, ws_ship_date_sk: 1, ws_warehouse_sk: 1, ws_ship_addr_sk: 1, ws_web_site_sk: 1, ws_net_profit: 5.0, ws_ext_ship_cost: 2.0), OpenStruct.new(ws_order_number: 2, ws_ship_date_sk: 1, ws_warehouse_sk: 2, ws_ship_addr_sk: 1, ws_web_site_sk: 1, ws_net_profit: 3.0, ws_ext_ship_cost: 1.0)]
web_returns = [OpenStruct.new(wr_order_number: 2)]
date_dim = [OpenStruct.new(d_date_sk: 1, d_date: "2001-02-01")]
customer_address = [OpenStruct.new(ca_address_sk: 1, ca_state: "CA")]
web_site = [OpenStruct.new(web_site_sk: 1, web_company_name: "pri")]
filtered = (begin
  _res = []
  for ws in web_sales
    for d in date_dim
      if ws.ws_ship_date_sk == d.d_date_sk
        for ca in customer_address
          if ws.ws_ship_addr_sk == ca.ca_address_sk
            for w in web_site
              if ws.ws_web_site_sk == w.web_site_sk
                if (ca.ca_state == "CA") && (w.web_company_name == "pri") && (exists.call((web_returns.select { |wr| (wr.wr_order_number == ws.ws_order_number) }).map { |wr| wr }) == false)
                  _res << ws
                end
              end
            end
          end
        end
      end
    end
  end
  _res
end)
result = OpenStruct.new(order_count: distinct(filtered.map { |x| x.ws_order_number }).length, total_shipping_cost: _sum(filtered.map { |x| x.ws_ext_ship_cost }), total_net_profit: _sum(filtered.map { |x| x.ws_net_profit }))
_json(result)
raise "expect failed" unless result == OpenStruct.new(order_count: 1, total_shipping_cost: 2.0, total_net_profit: 5.0)
