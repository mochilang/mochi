require "ostruct"

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end

  def length
    @Items.length
  end

  def each(&block)
    @Items.each(&block)
  end
end

def _group_by(src, keyfn)
  grouped = src.group_by do |it|
    if it.is_a?(Array)
      keyfn.call(*it)
    else
      keyfn.call(it)
    end
  end
  grouped.map do |k, items|
    g = MGroup.new(k)
    items.each do |it|
      g.Items << if it.is_a?(Array) && it.length == 1
        it[0]
      else
        it
      end
    end
    g
  end
end

def _json(v)
  require "json"
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end

CatalogSale = Struct.new(:cs_quantity, :cs_list_price, :cs_coupon_amt, :cs_sales_price, :cs_net_profit, :cs_bill_cdemo_sk, :cs_bill_customer_sk, :cs_sold_date_sk, :cs_item_sk, keyword_init: true)

CustomerDemographics = Struct.new(:cd_demo_sk, :cd_gender, :cd_education_status, :cd_dep_count, keyword_init: true)

Customer = Struct.new(:c_customer_sk, :c_current_cdemo_sk, :c_current_addr_sk, :c_birth_year, :c_birth_month, keyword_init: true)

CustomerAddress = Struct.new(:ca_address_sk, :ca_country, :ca_state, :ca_county, keyword_init: true)

DateDim = Struct.new(:d_date_sk, :d_year, keyword_init: true)

Item = Struct.new(:i_item_sk, :i_item_id, keyword_init: true)

catalog_sales = [OpenStruct.new(cs_quantity: 1, cs_list_price: 10.0, cs_coupon_amt: 1.0, cs_sales_price: 9.0, cs_net_profit: 2.0, cs_bill_cdemo_sk: 1, cs_bill_customer_sk: 1, cs_sold_date_sk: 1, cs_item_sk: 1)]
customer_demographics = [OpenStruct.new(cd_demo_sk: 1, cd_gender: "M", cd_education_status: "College", cd_dep_count: 2), OpenStruct.new(cd_demo_sk: 2, cd_gender: "F", cd_education_status: "College", cd_dep_count: 2)]
customer = [OpenStruct.new(c_customer_sk: 1, c_current_cdemo_sk: 2, c_current_addr_sk: 1, c_birth_year: 1980, c_birth_month: 1)]
customer_address = [OpenStruct.new(ca_address_sk: 1, ca_country: "US", ca_state: "CA", ca_county: "County1")]
date_dim = [OpenStruct.new(d_date_sk: 1, d_year: 1999)]
item = [OpenStruct.new(i_item_sk: 1, i_item_id: "I1")]
joined = (begin
  _res = []
  for cs in catalog_sales
    for cd1 in customer_demographics
      if (cs.cs_bill_cdemo_sk == cd1.cd_demo_sk) && (cd1.cd_gender == "M") && (cd1.cd_education_status == "College")
        for c in customer
          if cs.cs_bill_customer_sk == c.c_customer_sk
            for cd2 in customer_demographics
              if c.c_current_cdemo_sk == cd2.cd_demo_sk
                for ca in customer_address
                  if c.c_current_addr_sk == ca.ca_address_sk
                    for d in date_dim
                      if (cs.cs_sold_date_sk == d.d_date_sk) && (d.d_year == 1999)
                        for i in item
                          if cs.cs_item_sk == i.i_item_sk
                            _res << OpenStruct.new(i_item_id: i.i_item_id, ca_country: ca.ca_country, ca_state: ca.ca_state, ca_county: ca.ca_county, q: cs.cs_quantity, lp: cs.cs_list_price, cp: cs.cs_coupon_amt, sp: cs.cs_sales_price, np: cs.cs_net_profit, by: c.c_birth_year, dep: cd1.cd_dep_count)
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  _res
end)
result = _group_by(joined, ->(j) { OpenStruct.new(i_item_id: j.i_item_id, ca_country: j.ca_country, ca_state: j.ca_state, ca_county: j.ca_county) }).map { |g| OpenStruct.new(i_item_id: g.key.i_item_id, ca_country: g.key.ca_country, ca_state: g.key.ca_state, ca_county: g.key.ca_county, agg1: (((g.map { |x| x.q }).length > 0) ? (g.map { |x| x.q }).sum(0.0) / (g.map { |x| x.q }).length : 0), agg2: (((g.map { |x| x.lp }).length > 0) ? (g.map { |x| x.lp }).sum(0.0) / (g.map { |x| x.lp }).length : 0), agg3: (((g.map { |x| x.cp }).length > 0) ? (g.map { |x| x.cp }).sum(0.0) / (g.map { |x| x.cp }).length : 0), agg4: (((g.map { |x| x.sp }).length > 0) ? (g.map { |x| x.sp }).sum(0.0) / (g.map { |x| x.sp }).length : 0), agg5: (((g.map { |x| x.np }).length > 0) ? (g.map { |x| x.np }).sum(0.0) / (g.map { |x| x.np }).length : 0), agg6: (((g.map { |x| x.by }).length > 0) ? (g.map { |x| x.by }).sum(0.0) / (g.map { |x| x.by }).length : 0), agg7: (((g.map { |x| x.dep }).length > 0) ? (g.map { |x| x.dep }).sum(0.0) / (g.map { |x| x.dep }).length : 0)) }
_json(result)
raise "expect failed" unless result == [OpenStruct.new(i_item_id: "I1", ca_country: "US", ca_state: "CA", ca_county: "County1", agg1: 1.0, agg2: 10.0, agg3: 1.0, agg4: 9.0, agg5: 2.0, agg6: 1980.0, agg7: 2.0)]
