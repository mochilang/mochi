# Generated by Mochi compiler v0.10.27 on 2025-07-17T06:41:31Z
require 'ostruct'

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end
  def length
    @Items.length
  end
  def items
    @Items
  end
  def each(&block)
    @Items.each(&block)
  end
end
def _group_by(src, keyfn)
grouped = src.group_by do |it|
  if it.is_a?(Array)
    keyfn.call(*it)
  else
    keyfn.call(it)
  end
end
grouped.map do |k, items|
g = MGroup.new(k)
items.each do |it|
  if it.is_a?(Array) && it.length == 1
    g.Items << it[0]
  else
    g.Items << it
  end
end
g
end
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _sum(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  list.sum(0.0)
end

$store_sales = [OpenStruct.new(item: 1, price: 10.0)]
$catalog_sales = [OpenStruct.new(item: 1, price: 20.0)]
$web_sales = [OpenStruct.new(item: 1, price: 30.0)]
$ss = _group_by($store_sales, ->(s){ s.item }).map { |g| OpenStruct.new(item: g.key, total: _sum(((g)).map { |x| x.price })) }
$cs = _group_by($catalog_sales, ->(s){ s.item }).map { |g| OpenStruct.new(item: g.key, total: _sum(((g)).map { |x| x.price })) }
$ws = _group_by($web_sales, ->(s){ s.item }).map { |g| OpenStruct.new(item: g.key, total: _sum(((g)).map { |x| x.price })) }
$union = (($ss + $cs) + $ws)
$result = _group_by($union, ->(u){ u.item }).map { |g| OpenStruct.new(i_item_id: g.key, total_sales: _sum(((g)).map { |x| x.total })) }
_json($result)
raise "expect failed" unless ($result == [OpenStruct.new(i_item_id: 1, total_sales: 60.0)])
