require "ostruct"

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end

  def length
    @Items.length
  end

  def each(&block)
    @Items.each(&block)
  end
end

def _group_by(src, keyfn)
  grouped = src.group_by do |it|
    if it.is_a?(Array)
      keyfn.call(*it)
    else
      keyfn.call(it)
    end
  end
  grouped.map do |k, items|
    g = MGroup.new(k)
    items.each do |it|
      g.Items << if it.is_a?(Array) && it.length == 1
        it[0]
      else
        it
      end
    end
    g
  end
end

def _json(v)
  require "json"
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end

store_sales = [OpenStruct.new(ss_item_sk: 1, ss_store_sk: 1, ss_net_profit: 5.0), OpenStruct.new(ss_item_sk: 1, ss_store_sk: 1, ss_net_profit: 5.0), OpenStruct.new(ss_item_sk: 2, ss_store_sk: 1, ss_net_profit: -1.0)]
item = [OpenStruct.new(i_item_sk: 1, i_product_name: "ItemA"), OpenStruct.new(i_item_sk: 2, i_product_name: "ItemB")]
grouped_base = (_group_by(store_sales, ->(ss) { ss.ss_item_sk }).map { |g| OpenStruct.new(item_sk: g.key, avg_profit: (((g.map { |x| x.ss_net_profit }).length > 0) ? (g.map { |x| x.ss_net_profit }).sum(0.0) / (g.map { |x| x.ss_net_profit }).length : 0)) })
grouped = grouped_base
best = first.call((grouped.sort_by { |x| -x.avg_profit }).map { |x| x })
worst = first.call((grouped.sort_by { |x| x.avg_profit }).map { |x| x })
best_name = first.call((item.select { |i| (i.i_item_sk == best.item_sk) }).map { |i| i.i_product_name })
worst_name = first.call((item.select { |i| (i.i_item_sk == worst.item_sk) }).map { |i| i.i_product_name })
result = OpenStruct.new(best_performing: best_name, worst_performing: worst_name)
_json(result)
raise "expect failed" unless result == OpenStruct.new(best_performing: "ItemA", worst_performing: "ItemB")
