# Generated by Mochi compiler v0.10.25 on 2025-07-15T04:48:26Z
require 'ostruct'

def _avg(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  list.sum(0.0) / list.length
end
class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end
  def length
    @Items.length
  end
  def items
    @Items
  end
  def each(&block)
    @Items.each(&block)
  end
end
def _group_by(src, keyfn)
grouped = src.group_by do |it|
  if it.is_a?(Array)
    keyfn.call(*it)
  else
    keyfn.call(it)
  end
end
grouped.map do |k, items|
g = MGroup.new(k)
items.each do |it|
  if it.is_a?(Array) && it.length == 1
    g.Items << it[0]
  else
    g.Items << it
  end
end
g
end
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _sum(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  s = 0.0
  list.each { |n| s += n.to_f }
  s
end

StoreSale = Struct.new(:ss_store_sk, :ss_sold_date_sk, :ss_hdemo_sk, :ss_cdemo_sk, :ss_addr_sk, :ss_sales_price, :ss_net_profit, :ss_quantity, :ss_ext_sales_price, :ss_ext_wholesale_cost, keyword_init: true)

Store = Struct.new(:s_store_sk, :s_state, keyword_init: true)

CustomerDemographics = Struct.new(:cd_demo_sk, :cd_marital_status, :cd_education_status, keyword_init: true)

HouseholdDemographics = Struct.new(:hd_demo_sk, :hd_dep_count, keyword_init: true)

CustomerAddress = Struct.new(:ca_address_sk, :ca_country, :ca_state, keyword_init: true)

DateDim = Struct.new(:d_date_sk, :d_year, keyword_init: true)

$store_sales = [OpenStruct.new(ss_store_sk: 1, ss_sold_date_sk: 1, ss_hdemo_sk: 1, ss_cdemo_sk: 1, ss_addr_sk: 1, ss_sales_price: 120.0, ss_net_profit: 150.0, ss_quantity: 10, ss_ext_sales_price: 100.0, ss_ext_wholesale_cost: 50.0)]
$store = [OpenStruct.new(s_store_sk: 1, s_state: "CA")]
$customer_demographics = [OpenStruct.new(cd_demo_sk: 1, cd_marital_status: "M1", cd_education_status: "ES1")]
$household_demographics = [OpenStruct.new(hd_demo_sk: 1, hd_dep_count: 3)]
$customer_address = [OpenStruct.new(ca_address_sk: 1, ca_country: "United States", ca_state: "CA")]
$date_dim = [OpenStruct.new(d_date_sk: 1, d_year: 2001)]
$filtered = (begin
	_res = []
	for ss in $store_sales
		for s in $store
			if (ss.ss_store_sk == s.s_store_sk)
				for cd in $customer_demographics
					if (((ss.ss_cdemo_sk == cd.cd_demo_sk) && (cd.cd_marital_status == "M1")) && (cd.cd_education_status == "ES1"))
						for hd in $household_demographics
							if ((ss.ss_hdemo_sk == hd.hd_demo_sk) && (hd.hd_dep_count == 3))
								for ca in $customer_address
									if (((ss.ss_addr_sk == ca.ca_address_sk) && (ca.ca_country == "United States")) && (ca.ca_state == "CA"))
										for d in $date_dim
											if ((ss.ss_sold_date_sk == d.d_date_sk) && (d.d_year == 2001))
												_res << ss
											end
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
	_res
end)
$result = _group_by($filtered, ->(r){ {} }).map { |g| OpenStruct.new(avg_ss_quantity: _avg(((g)).map { |x| x.ss_quantity }), avg_ss_ext_sales_price: _avg(((g)).map { |x| x.ss_ext_sales_price }), avg_ss_ext_wholesale_cost: _avg(((g)).map { |x| x.ss_ext_wholesale_cost }), sum_ss_ext_wholesale_cost: _sum(((g)).map { |x| x.ss_ext_wholesale_cost })) }
_json($result)
raise "expect failed" unless ($result == [OpenStruct.new(avg_ss_quantity: 10.0, avg_ss_ext_sales_price: 100.0, avg_ss_ext_wholesale_cost: 50.0, sum_ss_ext_wholesale_cost: 50.0)])
