# Generated by Mochi compiler v0.10.27 on 2025-07-17T06:41:26Z
require 'ostruct'

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end
  def length
    @Items.length
  end
  def items
    @Items
  end
  def each(&block)
    @Items.each(&block)
  end
end
def _group_by(src, keyfn)
grouped = src.group_by do |it|
  if it.is_a?(Array)
    keyfn.call(*it)
  else
    keyfn.call(it)
  end
end
grouped.map do |k, items|
g = MGroup.new(k)
items.each do |it|
  if it.is_a?(Array) && it.length == 1
    g.Items << it[0]
  else
    g.Items << it
  end
end
g
end
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _query(src, joins, opts)
  where_fn = opts['where']
  items = []
  if joins.empty?
    src.each do |v|
      row = [v]
      next if where_fn && !where_fn.call(*row)
      items << row
    end
  else
    items = src.map { |v| [v] }
    joins.each_with_index do |j, idx|
      joined = []
      jitems = j['items']
      on = j['on']
      left = j['left']
      right = j['right']
      last = idx == joins.length - 1
      if right && left
        matched = Array.new(jitems.length, false)
        items.each do |l|
          m = false
          jitems.each_with_index do |r, ri|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            matched[ri] = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          row = l + [nil]
          if left && !m
            if last && where_fn && !where_fn.call(*row)
              # skip
            else
              joined << row
            end
          end
        end
        jitems.each_with_index do |r, ri|
          next if matched[ri]
          _undef = Array.new(items[0]&.length || 0, nil)
          row = _undef + [r]
          if last && where_fn && !where_fn.call(*row)
            next
          end
          joined << row
        end
      elsif right
        jitems.each do |r|
          m = false
          items.each do |l|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          unless m
            _undef = Array.new(items[0]&.length || 0, nil)
            row = _undef + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      else
        items.each do |l|
          m = false
          jitems.each do |r|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          if left && !m
            row = l + [nil]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      end
      items = joined
    end
  end
  if opts['sortKey']
    items = items.map { |it| [it, opts['sortKey'].call(*it)] }
    items.sort_by! { |p| p[1] }
    items.map!(&:first)
  end
  if opts.key?('skip')
    n = opts['skip']
    items = n < items.length ? items[n..-1] : []
  end
  if opts.key?('take')
    n = opts['take']
    items = n < items.length ? items[0...n] : items
  end
  res = []
  items.each { |r| res << opts['select'].call(*r) }
  res
end
def _sum(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  list.sum(0.0)
end

$catalog_sales = [OpenStruct.new(order: 1, item_sk: 1, warehouse_sk: 1, date_sk: 1, price: 100.0), OpenStruct.new(order: 2, item_sk: 1, warehouse_sk: 1, date_sk: 2, price: 150.0)]
$catalog_returns = [OpenStruct.new(order: 2, item_sk: 1, refunded: 150.0)]
$item = [OpenStruct.new(item_sk: 1, item_id: "I1", current_price: 1.2)]
$warehouse = [OpenStruct.new(warehouse_sk: 1, state: "CA")]
$date_dim = [OpenStruct.new(date_sk: 1, date: "2020-01-10"), OpenStruct.new(date_sk: 2, date: "2020-01-20")]
$sales_date = "2020-01-15"
$records = (begin
	src = $catalog_sales
	_rows = _query(src, [
		{ 'items' => $catalog_returns, 'on' => ->(cs, cr){ ((cs.order == cr.order) && (cs.item_sk == cr.item_sk)) }, 'left' => true },
		{ 'items' => $warehouse, 'on' => ->(cs, cr, w){ (cs.warehouse_sk == w.warehouse_sk) } },
		{ 'items' => $item, 'on' => ->(cs, cr, w, i){ (cs.item_sk == i.item_sk) } },
		{ 'items' => $date_dim, 'on' => ->(cs, cr, w, i, d){ (cs.date_sk == d.date_sk) } }
	], { 'select' => ->(cs, cr, w, i, d){ OpenStruct.new(w_state: w.state, i_item_id: i.item_id, sold_date: d.date, net: (cs.price - (((cr == nil) ? 0.0 : cr.refunded)))) }, 'where' => ->(cs, cr, w, i, d){ ((i.current_price >= 0.99) && (i.current_price <= 1.49)) } })
	_rows
end)
$result = _group_by($records, ->(r){ OpenStruct.new(w_state: r.w_state, i_item_id: r.i_item_id) }).map { |g| OpenStruct.new(w_state: g.key.w_state, i_item_id: g.key.i_item_id, sales_before: _sum(((g)).map { |x| ((x.sold_date < $sales_date) ? x.net : 0.0) }), sales_after: _sum(((g)).map { |x| ((x.sold_date >= $sales_date) ? x.net : 0.0) })) }
_json($result)
raise "expect failed" unless ($result == [OpenStruct.new(w_state: "CA", i_item_id: "I1", sales_before: 100.0, sales_after: 0.0)])
