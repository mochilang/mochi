# Generated by Mochi compiler v0.10.27 on 2025-07-17T06:41:22Z
require 'ostruct'

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end
  def length
    @Items.length
  end
  def items
    @Items
  end
  def each(&block)
    @Items.each(&block)
  end
end
def _group_by(src, keyfn)
grouped = src.group_by do |it|
  if it.is_a?(Array)
    keyfn.call(*it)
  else
    keyfn.call(it)
  end
end
grouped.map do |k, items|
g = MGroup.new(k)
items.each do |it|
  if it.is_a?(Array) && it.length == 1
    g.Items << it[0]
  else
    g.Items << it
  end
end
g
end
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _sum(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  list.sum(0.0)
end

StoreSale = Struct.new(:ss_sold_date_sk, :ss_item_sk, :ss_store_sk, :ss_customer_sk, :ss_quantity, :ss_ticket_number, keyword_init: true)

StoreReturn = Struct.new(:sr_returned_date_sk, :sr_item_sk, :sr_customer_sk, :sr_ticket_number, :sr_return_quantity, keyword_init: true)

CatalogSale = Struct.new(:cs_sold_date_sk, :cs_item_sk, :cs_bill_customer_sk, :cs_quantity, keyword_init: true)

DateDim = Struct.new(:d_date_sk, :d_moy, :d_year, keyword_init: true)

Store = Struct.new(:s_store_sk, :s_store_id, :s_store_name, keyword_init: true)

Item = Struct.new(:i_item_sk, :i_item_id, :i_item_desc, keyword_init: true)

$store_sales = [OpenStruct.new(ss_sold_date_sk: 1, ss_item_sk: 1, ss_store_sk: 1, ss_customer_sk: 1, ss_quantity: 10, ss_ticket_number: 1)]
$store_returns = [OpenStruct.new(sr_returned_date_sk: 2, sr_item_sk: 1, sr_customer_sk: 1, sr_ticket_number: 1, sr_return_quantity: 2)]
$catalog_sales = [OpenStruct.new(cs_sold_date_sk: 3, cs_item_sk: 1, cs_bill_customer_sk: 1, cs_quantity: 5)]
$date_dim = [OpenStruct.new(d_date_sk: 1, d_moy: 4, d_year: 1999), OpenStruct.new(d_date_sk: 2, d_moy: 5, d_year: 1999), OpenStruct.new(d_date_sk: 3, d_moy: 5, d_year: 2000)]
$store = [OpenStruct.new(s_store_sk: 1, s_store_id: "S1", s_store_name: "Store1")]
$item = [OpenStruct.new(i_item_sk: 1, i_item_id: "ITEM1", i_item_desc: "Desc1")]
$base = (begin
	_res = []
	for ss in $store_sales
		for sr in $store_returns
			if ((ss.ss_ticket_number == sr.sr_ticket_number) && (ss.ss_item_sk == sr.sr_item_sk))
				for cs in $catalog_sales
					if ((sr.sr_customer_sk == cs.cs_bill_customer_sk) && (sr.sr_item_sk == cs.cs_item_sk))
						for d1 in $date_dim
							if (d1.d_date_sk == ss.ss_sold_date_sk)
								for d2 in $date_dim
									if (d2.d_date_sk == sr.sr_returned_date_sk)
										for d3 in $date_dim
											if (d3.d_date_sk == cs.cs_sold_date_sk)
												for s in $store
													if (s.s_store_sk == ss.ss_store_sk)
														for i in $item
															if (i.i_item_sk == ss.ss_item_sk)
																if (((((d1.d_moy == 4) && (d1.d_year == 1999)) && (d2.d_moy >= 4)) && (d2.d_moy <= 7)) && ([1999, 2000, 2001].include?(d3.d_year)))
																	_res << OpenStruct.new(ss_quantity: ss.ss_quantity, sr_return_quantity: sr.sr_return_quantity, cs_quantity: cs.cs_quantity, i_item_id: i.i_item_id, i_item_desc: i.i_item_desc, s_store_id: s.s_store_id, s_store_name: s.s_store_name)
																end
															end
														end
													end
												end
											end
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
	_res
end)
$result = _group_by($base, ->(b){ OpenStruct.new(item_id: b.i_item_id, item_desc: b.i_item_desc, s_store_id: b.s_store_id, s_store_name: b.s_store_name) }).map { |g| OpenStruct.new(i_item_id: g.key.item_id, i_item_desc: g.key.item_desc, s_store_id: g.key.s_store_id, s_store_name: g.key.s_store_name, store_sales_quantity: _sum(((g)).map { |x| x.ss_quantity }), store_returns_quantity: _sum(((g)).map { |x| x.sr_return_quantity }), catalog_sales_quantity: _sum(((g)).map { |x| x.cs_quantity })) }
_json($result)
raise "expect failed" unless ($result == [OpenStruct.new(i_item_id: "ITEM1", i_item_desc: "Desc1", s_store_id: "S1", s_store_name: "Store1", store_sales_quantity: 10, store_returns_quantity: 2, catalog_sales_quantity: 5)])
