# Generated by Mochi compiler v0.10.27 on 2025-07-17T06:41:38Z
require 'ostruct'

def _first(v)
  list = nil
  if v.respond_to?(:Items)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return nil if !list || list.empty?
  list[0]
end
class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end
  def length
    @Items.length
  end
  def items
    @Items
  end
  def each(&block)
    @Items.each(&block)
  end
end
def _group_by(src, keyfn)
grouped = src.group_by do |it|
  if it.is_a?(Array)
    keyfn.call(*it)
  else
    keyfn.call(it)
  end
end
grouped.map do |k, items|
g = MGroup.new(k)
items.each do |it|
  if it.is_a?(Array) && it.length == 1
    g.Items << it[0]
  else
    g.Items << it
  end
end
g
end
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _query(src, joins, opts)
  where_fn = opts['where']
  items = []
  if joins.empty?
    src.each do |v|
      row = [v]
      next if where_fn && !where_fn.call(*row)
      items << row
    end
  else
    items = src.map { |v| [v] }
    joins.each_with_index do |j, idx|
      joined = []
      jitems = j['items']
      on = j['on']
      left = j['left']
      right = j['right']
      last = idx == joins.length - 1
      if right && left
        matched = Array.new(jitems.length, false)
        items.each do |l|
          m = false
          jitems.each_with_index do |r, ri|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            matched[ri] = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          row = l + [nil]
          if left && !m
            if last && where_fn && !where_fn.call(*row)
              # skip
            else
              joined << row
            end
          end
        end
        jitems.each_with_index do |r, ri|
          next if matched[ri]
          _undef = Array.new(items[0]&.length || 0, nil)
          row = _undef + [r]
          if last && where_fn && !where_fn.call(*row)
            next
          end
          joined << row
        end
      elsif right
        jitems.each do |r|
          m = false
          items.each do |l|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          unless m
            _undef = Array.new(items[0]&.length || 0, nil)
            row = _undef + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      else
        items.each do |l|
          m = false
          jitems.each do |r|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          if left && !m
            row = l + [nil]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      end
      items = joined
    end
  end
  if opts['sortKey']
    items = items.map { |it| [it, opts['sortKey'].call(*it)] }
    items.sort_by! { |p| p[1] }
    items.map!(&:first)
  end
  if opts.key?('skip')
    n = opts['skip']
    items = n < items.length ? items[n..-1] : []
  end
  if opts.key?('take')
    n = opts['take']
    items = n < items.length ? items[0...n] : items
  end
  res = []
  items.each { |r| res << opts['select'].call(*r) }
  res
end
def _sum(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  list.sum(0.0)
end

$date_dim = [OpenStruct.new(d_date_sk: 1, d_year: 2000), OpenStruct.new(d_date_sk: 2, d_year: 2001)]
$store_sales = [OpenStruct.new(ss_item_sk: 1, ss_quantity: 50, ss_sales_price: 500.0, ss_sold_date_sk: 1), OpenStruct.new(ss_item_sk: 1, ss_quantity: 40, ss_sales_price: 400.0, ss_sold_date_sk: 2)]
$web_sales = [OpenStruct.new(ws_item_sk: 1, ws_quantity: 30, ws_sales_price: 300.0, ws_sold_date_sk: 1), OpenStruct.new(ws_item_sk: 1, ws_quantity: 25, ws_sales_price: 250.0, ws_sold_date_sk: 2)]
$catalog_sales = [OpenStruct.new(cs_item_sk: 1, cs_quantity: 20, cs_sales_price: 200.0, cs_sold_date_sk: 1), OpenStruct.new(cs_item_sk: 1, cs_quantity: 15, cs_sales_price: 150.0, cs_sold_date_sk: 2)]
$item = [OpenStruct.new(i_item_sk: 1, i_brand_id: 1, i_class_id: 2, i_category_id: 3, i_manufact_id: 4, i_category: "Electronics")]
$sales_detail = (((begin
	_res = []
	for ss in $store_sales
		for d in $date_dim
			if (d.d_date_sk == ss.ss_sold_date_sk)
				_res << OpenStruct.new(d_year: d.d_year, i_item_sk: ss.ss_item_sk, quantity: ss.ss_quantity, amount: ss.ss_sales_price)
			end
		end
	end
	_res
end) + (begin
	_res = []
	for ws in $web_sales
		for d in $date_dim
			if (d.d_date_sk == ws.ws_sold_date_sk)
				_res << OpenStruct.new(d_year: d.d_year, i_item_sk: ws.ws_item_sk, quantity: ws.ws_quantity, amount: ws.ws_sales_price)
			end
		end
	end
	_res
end)) + (begin
	_res = []
	for cs in $catalog_sales
		for d in $date_dim
			if (d.d_date_sk == cs.cs_sold_date_sk)
				_res << OpenStruct.new(d_year: d.d_year, i_item_sk: cs.cs_item_sk, quantity: cs.cs_quantity, amount: cs.cs_sales_price)
			end
		end
	end
	_res
end))
$all_sales = (begin
	src = $sales_detail
	_rows = _query(src, [
		{ 'items' => $item, 'on' => ->(sd, i){ (i.i_item_sk == sd.i_item_sk) } }
	], { 'select' => ->(sd, i){ [sd, i] }, 'where' => ->(sd, i){ (i.i_category == "Electronics") } })
	_groups = _group_by(_rows, ->(sd, i){ OpenStruct.new(year: sd.d_year, brand_id: i.i_brand_id, class_id: i.i_class_id, category_id: i.i_category_id, manuf_id: i.i_manufact_id) })
	_items0 = _groups
	_res = []
	for g in _items0
		_res << OpenStruct.new(d_year: g.key.year, i_brand_id: g.key.brand_id, i_class_id: g.key.class_id, i_category_id: g.key.category_id, i_manufact_id: g.key.manuf_id, sales_cnt: _sum(((g)).map { |x| x[0].quantity }), sales_amt: _sum(((g)).map { |x| x[0].amount }))
	end
	_res
end)
$prev_yr = _first(((($all_sales)).select { |a| (a.d_year == 2000) }).map { |a| a })
$curr_yr = _first(((($all_sales)).select { |a| (a.d_year == 2001) }).map { |a| a })
$result = (((($curr_yr.sales_cnt / $prev_yr.sales_cnt)) < 0.9) ? [OpenStruct.new(prev_year: $prev_yr.d_year, year: $curr_yr.d_year, i_brand_id: $curr_yr.i_brand_id, i_class_id: $curr_yr.i_class_id, i_category_id: $curr_yr.i_category_id, i_manufact_id: $curr_yr.i_manufact_id, prev_yr_cnt: $prev_yr.sales_cnt, curr_yr_cnt: $curr_yr.sales_cnt, sales_cnt_diff: ($curr_yr.sales_cnt - $prev_yr.sales_cnt), sales_amt_diff: ($curr_yr.sales_amt - $prev_yr.sales_amt))] : [])
_json($result)
raise "expect failed" unless ($result == [OpenStruct.new(prev_year: 2000, year: 2001, i_brand_id: 1, i_class_id: 2, i_category_id: 3, i_manufact_id: 4, prev_yr_cnt: 100, curr_yr_cnt: 80, sales_cnt_diff: (-20), sales_amt_diff: (-200.0))])
