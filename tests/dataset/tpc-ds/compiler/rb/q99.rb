# Generated by Mochi compiler v0.10.26 on 2025-07-15T06:47:04Z
require 'ostruct'

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end
  def length
    @Items.length
  end
  def items
    @Items
  end
  def each(&block)
    @Items.each(&block)
  end
end
def _group_by(src, keyfn)
grouped = src.group_by do |it|
  if it.is_a?(Array)
    keyfn.call(*it)
  else
    keyfn.call(it)
  end
end
grouped.map do |k, items|
g = MGroup.new(k)
items.each do |it|
  if it.is_a?(Array) && it.length == 1
    g.Items << it[0]
  else
    g.Items << it
  end
end
g
end
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _query(src, joins, opts)
  where_fn = opts['where']
  items = []
  if joins.empty?
    src.each do |v|
      row = [v]
      next if where_fn && !where_fn.call(*row)
      items << row
    end
  else
    items = src.map { |v| [v] }
    joins.each_with_index do |j, idx|
      joined = []
      jitems = j['items']
      on = j['on']
      left = j['left']
      right = j['right']
      last = idx == joins.length - 1
      if right && left
        matched = Array.new(jitems.length, false)
        items.each do |l|
          m = false
          jitems.each_with_index do |r, ri|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            matched[ri] = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          row = l + [nil]
          if left && !m
            if last && where_fn && !where_fn.call(*row)
              # skip
            else
              joined << row
            end
          end
        end
        jitems.each_with_index do |r, ri|
          next if matched[ri]
          _undef = Array.new(items[0]&.length || 0, nil)
          row = _undef + [r]
          if last && where_fn && !where_fn.call(*row)
            next
          end
          joined << row
        end
      elsif right
        jitems.each do |r|
          m = false
          items.each do |l|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          unless m
            _undef = Array.new(items[0]&.length || 0, nil)
            row = _undef + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      else
        items.each do |l|
          m = false
          jitems.each do |r|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          if left && !m
            row = l + [nil]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      end
      items = joined
    end
  end
  if opts['sortKey']
    items = items.map { |it| [it, opts['sortKey'].call(*it)] }
    items.sort_by! { |p| p[1] }
    items.map!(&:first)
  end
  if opts.key?('skip')
    n = opts['skip']
    items = n < items.length ? items[n..-1] : []
  end
  if opts.key?('take')
    n = opts['take']
    items = n < items.length ? items[0...n] : items
  end
  res = []
  items.each { |r| res << opts['select'].call(*r) }
  res
end
def _sliceString(s, i, j)
  start = i
  finish = j
  chars = s.chars
  n = chars.length
  start += n if start < 0
  finish += n if finish < 0
  start = 0 if start < 0
  finish = n if finish > n
  finish = start if finish < start
  chars[start...finish].join
end

CatalogSale = Struct.new(:cs_ship_date_sk, :cs_sold_date_sk, :cs_warehouse_sk, :cs_ship_mode_sk, :cs_call_center_sk, keyword_init: true)

Warehouse = Struct.new(:w_warehouse_sk, :w_warehouse_name, keyword_init: true)

ShipMode = Struct.new(:sm_ship_mode_sk, :sm_type, keyword_init: true)

CallCenter = Struct.new(:cc_call_center_sk, :cc_name, keyword_init: true)

$catalog_sales = [OpenStruct.new(cs_ship_date_sk: 31, cs_sold_date_sk: 1, cs_warehouse_sk: 1, cs_ship_mode_sk: 1, cs_call_center_sk: 1), OpenStruct.new(cs_ship_date_sk: 51, cs_sold_date_sk: 1, cs_warehouse_sk: 1, cs_ship_mode_sk: 1, cs_call_center_sk: 1), OpenStruct.new(cs_ship_date_sk: 71, cs_sold_date_sk: 1, cs_warehouse_sk: 1, cs_ship_mode_sk: 1, cs_call_center_sk: 1), OpenStruct.new(cs_ship_date_sk: 101, cs_sold_date_sk: 1, cs_warehouse_sk: 1, cs_ship_mode_sk: 1, cs_call_center_sk: 1), OpenStruct.new(cs_ship_date_sk: 131, cs_sold_date_sk: 1, cs_warehouse_sk: 1, cs_ship_mode_sk: 1, cs_call_center_sk: 1)]
$warehouse = [OpenStruct.new(w_warehouse_sk: 1, w_warehouse_name: "Warehouse1")]
$ship_mode = [OpenStruct.new(sm_ship_mode_sk: 1, sm_type: "EXP")]
$call_center = [OpenStruct.new(cc_call_center_sk: 1, cc_name: "CC1")]
$grouped = (begin
	src = $catalog_sales
	_rows = _query(src, [
		{ 'items' => $warehouse, 'on' => ->(cs, w){ (cs.cs_warehouse_sk == w.w_warehouse_sk) } },
		{ 'items' => $ship_mode, 'on' => ->(cs, w, sm){ (cs.cs_ship_mode_sk == sm.sm_ship_mode_sk) } },
		{ 'items' => $call_center, 'on' => ->(cs, w, sm, cc){ (cs.cs_call_center_sk == cc.cc_call_center_sk) } }
	], { 'select' => ->(cs, w, sm, cc){ [cs, w, sm, cc] } })
	_groups = _group_by(_rows, ->(cs, w, sm, cc){ OpenStruct.new(warehouse: _sliceString(w.w_warehouse_name, 0, 20), sm_type: sm.sm_type, cc_name: cc.cc_name) })
	_items0 = _groups
	_res = []
	for g in _items0
		_res << OpenStruct.new(warehouse: g.key.warehouse, sm_type: g.key.sm_type, cc_name: g.key.cc_name, d30: ((((g)).select { |x| ((x.cs_ship_date_sk - x.cs_sold_date_sk) <= 30) }).map { |x| x }).length, d60: ((((g)).select { |x| (((x.cs_ship_date_sk - x.cs_sold_date_sk) > 30) && ((x.cs_ship_date_sk - x.cs_sold_date_sk) <= 60)) }).map { |x| x }).length, d90: ((((g)).select { |x| (((x.cs_ship_date_sk - x.cs_sold_date_sk) > 60) && ((x.cs_ship_date_sk - x.cs_sold_date_sk) <= 90)) }).map { |x| x }).length, d120: ((((g)).select { |x| (((x.cs_ship_date_sk - x.cs_sold_date_sk) > 90) && ((x.cs_ship_date_sk - x.cs_sold_date_sk) <= 120)) }).map { |x| x }).length, dmore: ((((g)).select { |x| ((x.cs_ship_date_sk - x.cs_sold_date_sk) > 120) }).map { |x| x }).length)
	end
	_res
end)
_json($grouped)
raise "expect failed" unless ($grouped == [OpenStruct.new(warehouse: "Warehouse1", sm_type: "EXP", cc_name: "CC1", d30: 1, d60: 1, d90: 1, d120: 1, dmore: 1)])
