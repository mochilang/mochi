# Generated by Mochi compiler v0.10.26 on 2025-07-15T06:47:54Z
require 'ostruct'

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end
  def length
    @Items.length
  end
  def items
    @Items
  end
  def each(&block)
    @Items.each(&block)
  end
end
def _group_by(src, keyfn)
grouped = src.group_by do |it|
  if it.is_a?(Array)
    keyfn.call(*it)
  else
    keyfn.call(it)
  end
end
grouped.map do |k, items|
g = MGroup.new(k)
items.each do |it|
  if it.is_a?(Array) && it.length == 1
    g.Items << it[0]
  else
    g.Items << it
  end
end
g
end
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end

$store_sales = [OpenStruct.new(ticket: 1, item: 101, sold: 1, customer: 1, store: 1), OpenStruct.new(ticket: 2, item: 102, sold: 1, customer: 1, store: 1), OpenStruct.new(ticket: 3, item: 103, sold: 1, customer: 1, store: 1), OpenStruct.new(ticket: 4, item: 104, sold: 1, customer: 1, store: 1), OpenStruct.new(ticket: 5, item: 105, sold: 1, customer: 1, store: 1)]
$store_returns = [OpenStruct.new(ticket: 1, item: 101, returned: 16, customer: 1), OpenStruct.new(ticket: 2, item: 102, returned: 46, customer: 1), OpenStruct.new(ticket: 3, item: 103, returned: 76, customer: 1), OpenStruct.new(ticket: 4, item: 104, returned: 111, customer: 1), OpenStruct.new(ticket: 5, item: 105, returned: 151, customer: 1)]
$date_dim = [OpenStruct.new(d_date_sk: 1, d_year: 2001, d_moy: 7), OpenStruct.new(d_date_sk: 16, d_year: 2001, d_moy: 8), OpenStruct.new(d_date_sk: 46, d_year: 2001, d_moy: 8), OpenStruct.new(d_date_sk: 76, d_year: 2001, d_moy: 8), OpenStruct.new(d_date_sk: 111, d_year: 2001, d_moy: 8), OpenStruct.new(d_date_sk: 151, d_year: 2001, d_moy: 8)]
$store = [OpenStruct.new(s_store_sk: 1, s_store_name: "Main", s_company_id: 1, s_street_number: "1", s_street_name: "Main", s_street_type: "St", s_suite_number: "100", s_city: "City", s_county: "County", s_state: "CA", s_zip: "12345")]
$year = 2001
$month = 8
$joined = (begin
	_res = []
	for ss in $store_sales
		for sr in $store_returns
			if (((ss.ticket == sr.ticket) && (ss.item == sr.item)) && (ss.customer == sr.customer))
				for d1 in $date_dim
					if (ss.sold == d1.d_date_sk)
						for d2 in $date_dim
							if (((sr.returned == d2.d_date_sk) && (d2.d_year == $year)) && (d2.d_moy == $month))
								for s in $store
									if (ss.store == s.s_store_sk)
										_res << OpenStruct.new(s: s, diff: (sr.returned - ss.sold))
									end
								end
							end
						end
					end
				end
			end
		end
	end
	_res
end)
$result = _group_by($joined, ->(j){ j.s }).map { |g| OpenStruct.new(s_store_name: g.key.s_store_name, d30: ((((g)).select { |x| (x.diff <= 30) }).map { |x| 1 }).length, d31_60: ((((g)).select { |x| ((x.diff > 30) && (x.diff <= 60)) }).map { |x| 1 }).length, d61_90: ((((g)).select { |x| ((x.diff > 60) && (x.diff <= 90)) }).map { |x| 1 }).length, d91_120: ((((g)).select { |x| ((x.diff > 90) && (x.diff <= 120)) }).map { |x| 1 }).length, d_gt_120: ((((g)).select { |x| (x.diff > 120) }).map { |x| 1 }).length) }
_json($result)
raise "expect failed" unless ($result == [OpenStruct.new(s_store_name: "Main", d30: 1, d31_60: 1, d61_90: 1, d91_120: 1, d_gt_120: 1)])
