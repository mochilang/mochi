require "ostruct"

def _json(v)
  require "json"
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end

def _sum(v)
  list = nil
  if v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  s = 0.0
  list.each { |n| s += n.to_f }
  s
end

WebSale = Struct.new(:ws_item_sk, :ws_sold_date_sk, :ws_ext_discount_amt, keyword_init: true)

web_sales = [OpenStruct.new(ws_item_sk: 1, ws_sold_date_sk: 1, ws_ext_discount_amt: 1.0), OpenStruct.new(ws_item_sk: 1, ws_sold_date_sk: 1, ws_ext_discount_amt: 1.0), OpenStruct.new(ws_item_sk: 1, ws_sold_date_sk: 1, ws_ext_discount_amt: 2.0)]
[OpenStruct.new(i_item_sk: 1, i_manufact_id: 1)]
[OpenStruct.new(d_date_sk: 1, d_date: "2000-01-02")]
sum_amt = _sum(web_sales.map { |ws| ws.ws_ext_discount_amt })
avg_amt = (((web_sales.map { |ws| ws.ws_ext_discount_amt }).length > 0) ? (web_sales.map { |ws| ws.ws_ext_discount_amt }).sum(0.0) / (web_sales.map { |ws| ws.ws_ext_discount_amt }).length : 0)
result = ((sum_amt > (avg_amt * 1.3)) ? sum_amt : 0.0)
_json(result)
raise "expect failed" unless result == 4.0
