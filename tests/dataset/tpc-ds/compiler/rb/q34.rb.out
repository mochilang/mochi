require "ostruct"

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end

  def length
    @Items.length
  end

  def each(&block)
    @Items.each(&block)
  end
end

def _group_by(src, keyfn)
  grouped = src.group_by do |it|
    if it.is_a?(Array)
      keyfn.call(*it)
    else
      keyfn.call(it)
    end
  end
  grouped.map do |k, items|
    g = MGroup.new(k)
    items.each do |it|
      g.Items << if it.is_a?(Array) && it.length == 1
        it[0]
      else
        it
      end
    end
    g
  end
end

def _json(v)
  require "json"
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end

def _query(src, joins, opts)
  where_fn = opts["where"]
  items = []
  if joins.empty?
    src.each do |v|
      row = [v]
      next if where_fn && !where_fn.call(*row)
      items << row
    end
  else
    items = src.map { |v| [v] }
    joins.each_with_index do |j, idx|
      joined = []
      jitems = j["items"]
      on = j["on"]
      left = j["left"]
      right = j["right"]
      last = idx == joins.length - 1
      if right && left
        matched = Array.new(jitems.length, false)
        items.each do |l|
          m = false
          jitems.each_with_index do |r, ri|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            matched[ri] = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          row = l + [nil]
          if left && !m
            if last && where_fn && !where_fn.call(*row)
              # skip
            else
              joined << row
            end
          end
        end
        jitems.each_with_index do |r, ri|
          next if matched[ri]
          _undef = Array.new(items[0]&.length || 0, nil)
          row = _undef + [r]
          if last && where_fn && !where_fn.call(*row)
            next
          end
          joined << row
        end
      elsif right
        jitems.each do |r|
          m = false
          items.each do |l|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          unless m
            _undef = Array.new(items[0]&.length || 0, nil)
            row = _undef + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      else
        items.each do |l|
          m = false
          jitems.each do |r|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          if left && !m
            row = l + [nil]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      end
      items = joined
    end
  end
  if opts["sortKey"]
    items = items.map { |it| [it, opts["sortKey"].call(*it)] }
    items.sort_by! { |p| p[1] }
    items.map!(&:first)
  end
  if opts.key?("skip")
    n = opts["skip"]
    items = (n < items.length) ? items[n..-1] : []
  end
  if opts.key?("take")
    n = opts["take"]
    items = (n < items.length) ? items[0...n] : items
  end
  res = []
  items.each { |r| res << opts["select"].call(*r) }
  res
end

store_sales = [OpenStruct.new(ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1), OpenStruct.new(ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1), OpenStruct.new(ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1), OpenStruct.new(ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1), OpenStruct.new(ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1), OpenStruct.new(ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1), OpenStruct.new(ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1), OpenStruct.new(ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1), OpenStruct.new(ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1), OpenStruct.new(ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1), OpenStruct.new(ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1), OpenStruct.new(ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1), OpenStruct.new(ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1), OpenStruct.new(ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1), OpenStruct.new(ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1), OpenStruct.new(ss_ticket_number: 1, ss_customer_sk: 1, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 1), OpenStruct.new(ss_ticket_number: 2, ss_customer_sk: 2, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 2), OpenStruct.new(ss_ticket_number: 2, ss_customer_sk: 2, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 2), OpenStruct.new(ss_ticket_number: 2, ss_customer_sk: 2, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 2), OpenStruct.new(ss_ticket_number: 2, ss_customer_sk: 2, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 2), OpenStruct.new(ss_ticket_number: 2, ss_customer_sk: 2, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 2), OpenStruct.new(ss_ticket_number: 2, ss_customer_sk: 2, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 2), OpenStruct.new(ss_ticket_number: 2, ss_customer_sk: 2, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 2), OpenStruct.new(ss_ticket_number: 2, ss_customer_sk: 2, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 2), OpenStruct.new(ss_ticket_number: 2, ss_customer_sk: 2, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 2), OpenStruct.new(ss_ticket_number: 2, ss_customer_sk: 2, ss_sold_date_sk: 1, ss_store_sk: 1, ss_hdemo_sk: 2)]
date_dim = [OpenStruct.new(d_date_sk: 1, d_dom: 2, d_year: 2000)]
store = [OpenStruct.new(s_store_sk: 1, s_county: "A")]
household_demographics = [OpenStruct.new(hd_demo_sk: 1, hd_buy_potential: ">10000", hd_vehicle_count: 2, hd_dep_count: 3), OpenStruct.new(hd_demo_sk: 2, hd_buy_potential: ">10000", hd_vehicle_count: 2, hd_dep_count: 1)]
customer = [OpenStruct.new(c_customer_sk: 1, c_last_name: "Smith", c_first_name: "John", c_salutation: "Mr.", c_preferred_cust_flag: "Y"), OpenStruct.new(c_customer_sk: 2, c_last_name: "Jones", c_first_name: "Alice", c_salutation: "Ms.", c_preferred_cust_flag: "N")]
dn = (begin
  src = store_sales
  _rows = _query(src, [
    {"items" => date_dim, "on" => ->(ss, d) { (ss.ss_sold_date_sk == d.d_date_sk) }},
    {"items" => store, "on" => ->(ss, d, s) { (ss.ss_store_sk == s.s_store_sk) }},
    {"items" => household_demographics, "on" => ->(ss, d, s, hd) { (ss.ss_hdemo_sk == hd.hd_demo_sk) }}
  ], {"select" => ->(ss, d, s, hd) { [ss, d, s, hd] }, "where" => ->(ss, d, s, hd) { (d.d_dom >= 1) && (d.d_dom <= 3) && (hd.hd_buy_potential == ">10000") && (hd.hd_vehicle_count > 0) && (((hd.hd_dep_count / hd.hd_vehicle_count)) > 1.2) && (d.d_year == 2000) && (s.s_county == "A") }})
  _groups = _group_by(_rows, ->(ss, d, s, hd) { OpenStruct.new(ticket: ss.ss_ticket_number, cust: ss.ss_customer_sk) })
  _res = []
  for g in _groups
    _res << OpenStruct.new(ss_ticket_number: g.key.ticket, ss_customer_sk: g.key.cust, cnt: g.length)
  end
  _res
end)
result = (begin
  _res = []
  for dn1 in dn
    for c in customer
      if dn1.ss_customer_sk == c.c_customer_sk
        if (dn1.cnt >= 15) && (dn1.cnt <= 20)
          _res << [c.c_last_name, OpenStruct.new(c_last_name: c.c_last_name, c_first_name: c.c_first_name, c_salutation: c.c_salutation, c_preferred_cust_flag: c.c_preferred_cust_flag, ss_ticket_number: dn1.ss_ticket_number, cnt: dn1.cnt)]
        end
      end
    end
  end
  _res = _res.sort_by { |e| e[0] }
  _res = _res.map { |e| e[1] }
  _res
end)
_json(result)
raise "expect failed" unless result == [OpenStruct.new(c_last_name: "Smith", c_first_name: "John", c_salutation: "Mr.", c_preferred_cust_flag: "Y", ss_ticket_number: 1, cnt: 16)]
