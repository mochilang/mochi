# Generated by Mochi compiler v0.10.27 on 2025-07-17T06:41:27Z
require 'ostruct'

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end
  def length
    @Items.length
  end
  def items
    @Items
  end
  def each(&block)
    @Items.each(&block)
  end
end
def _group_by(src, keyfn)
grouped = src.group_by do |it|
  if it.is_a?(Array)
    keyfn.call(*it)
  else
    keyfn.call(it)
  end
end
grouped.map do |k, items|
g = MGroup.new(k)
items.each do |it|
  if it.is_a?(Array) && it.length == 1
    g.Items << it[0]
  else
    g.Items << it
  end
end
g
end
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _sum(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  list.sum(0.0)
end

$date_dim = [OpenStruct.new(date_sk: 1, d_day_name: "Sunday", d_year: 2020), OpenStruct.new(date_sk: 2, d_day_name: "Monday", d_year: 2020), OpenStruct.new(date_sk: 3, d_day_name: "Tuesday", d_year: 2020), OpenStruct.new(date_sk: 4, d_day_name: "Wednesday", d_year: 2020), OpenStruct.new(date_sk: 5, d_day_name: "Thursday", d_year: 2020), OpenStruct.new(date_sk: 6, d_day_name: "Friday", d_year: 2020), OpenStruct.new(date_sk: 7, d_day_name: "Saturday", d_year: 2020)]
$store = [OpenStruct.new(store_sk: 1, store_id: "S1", store_name: "Main", gmt_offset: 0)]
$store_sales = [OpenStruct.new(sold_date_sk: 1, store_sk: 1, sales_price: 10.0), OpenStruct.new(sold_date_sk: 2, store_sk: 1, sales_price: 20.0), OpenStruct.new(sold_date_sk: 3, store_sk: 1, sales_price: 30.0), OpenStruct.new(sold_date_sk: 4, store_sk: 1, sales_price: 40.0), OpenStruct.new(sold_date_sk: 5, store_sk: 1, sales_price: 50.0), OpenStruct.new(sold_date_sk: 6, store_sk: 1, sales_price: 60.0), OpenStruct.new(sold_date_sk: 7, store_sk: 1, sales_price: 70.0)]
$year = 2020
$gmt = 0
$records = (begin
	_res = []
	for d in $date_dim
		for ss in $store_sales
			if (ss.sold_date_sk == d.date_sk)
				for s in $store
					if (ss.store_sk == s.store_sk)
						if ((s.gmt_offset == $gmt) && (d.d_year == $year))
							_res << OpenStruct.new(d_day_name: d.d_day_name, s_store_name: s.store_name, s_store_id: s.store_id, price: ss.sales_price)
						end
					end
				end
			end
		end
	end
	_res
end)
$base = _group_by($records, ->(r){ OpenStruct.new(name: r.s_store_name, id: r.s_store_id) }).map { |g| OpenStruct.new(s_store_name: g.key.name, s_store_id: g.key.id, sun_sales: _sum(((g)).map { |x| ((x.d_day_name == "Sunday") ? x.price : 0.0) }), mon_sales: _sum(((g)).map { |x| ((x.d_day_name == "Monday") ? x.price : 0.0) }), tue_sales: _sum(((g)).map { |x| ((x.d_day_name == "Tuesday") ? x.price : 0.0) }), wed_sales: _sum(((g)).map { |x| ((x.d_day_name == "Wednesday") ? x.price : 0.0) }), thu_sales: _sum(((g)).map { |x| ((x.d_day_name == "Thursday") ? x.price : 0.0) }), fri_sales: _sum(((g)).map { |x| ((x.d_day_name == "Friday") ? x.price : 0.0) }), sat_sales: _sum(((g)).map { |x| ((x.d_day_name == "Saturday") ? x.price : 0.0) })) }
$result = $base
_json($result)
raise "expect failed" unless ($result == [OpenStruct.new(s_store_name: "Main", s_store_id: "S1", sun_sales: 10.0, mon_sales: 20.0, tue_sales: 30.0, wed_sales: 40.0, thu_sales: 50.0, fri_sales: 60.0, sat_sales: 70.0)])
