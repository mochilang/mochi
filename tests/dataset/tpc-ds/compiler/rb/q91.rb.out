# Generated by Mochi compiler v0.10.25 on 2025-07-15T04:48:36Z
require 'ostruct'

def _first(v)
  list = nil
  if v.respond_to?(:Items)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return nil if !list || list.empty?
  list[0]
end
class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end
  def length
    @Items.length
  end
  def items
    @Items
  end
  def each(&block)
    @Items.each(&block)
  end
end
def _group_by(src, keyfn)
grouped = src.group_by do |it|
  if it.is_a?(Array)
    keyfn.call(*it)
  else
    keyfn.call(it)
  end
end
grouped.map do |k, items|
g = MGroup.new(k)
items.each do |it|
  if it.is_a?(Array) && it.length == 1
    g.Items << it[0]
  else
    g.Items << it
  end
end
g
end
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _query(src, joins, opts)
  where_fn = opts['where']
  items = []
  if joins.empty?
    src.each do |v|
      row = [v]
      next if where_fn && !where_fn.call(*row)
      items << row
    end
  else
    items = src.map { |v| [v] }
    joins.each_with_index do |j, idx|
      joined = []
      jitems = j['items']
      on = j['on']
      left = j['left']
      right = j['right']
      last = idx == joins.length - 1
      if right && left
        matched = Array.new(jitems.length, false)
        items.each do |l|
          m = false
          jitems.each_with_index do |r, ri|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            matched[ri] = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          row = l + [nil]
          if left && !m
            if last && where_fn && !where_fn.call(*row)
              # skip
            else
              joined << row
            end
          end
        end
        jitems.each_with_index do |r, ri|
          next if matched[ri]
          _undef = Array.new(items[0]&.length || 0, nil)
          row = _undef + [r]
          if last && where_fn && !where_fn.call(*row)
            next
          end
          joined << row
        end
      elsif right
        jitems.each do |r|
          m = false
          items.each do |l|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          unless m
            _undef = Array.new(items[0]&.length || 0, nil)
            row = _undef + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      else
        items.each do |l|
          m = false
          jitems.each do |r|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          if left && !m
            row = l + [nil]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      end
      items = joined
    end
  end
  if opts['sortKey']
    items = items.map { |it| [it, opts['sortKey'].call(*it)] }
    items.sort_by! { |p| p[1] }
    items.map!(&:first)
  end
  if opts.key?('skip')
    n = opts['skip']
    items = n < items.length ? items[n..-1] : []
  end
  if opts.key?('take')
    n = opts['take']
    items = n < items.length ? items[0...n] : items
  end
  res = []
  items.each { |r| res << opts['select'].call(*r) }
  res
end
def _sum(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  s = 0.0
  list.each { |n| s += n.to_f }
  s
end

CallCenter = Struct.new(:cc_call_center_sk, :cc_call_center_id, :cc_name, :cc_manager, keyword_init: true)

CatalogReturn = Struct.new(:cr_call_center_sk, :cr_returned_date_sk, :cr_returning_customer_sk, :cr_net_loss, keyword_init: true)

DateDim = Struct.new(:d_date_sk, :d_year, :d_moy, keyword_init: true)

Customer = Struct.new(:c_customer_sk, :c_current_cdemo_sk, :c_current_hdemo_sk, :c_current_addr_sk, keyword_init: true)

CustomerAddress = Struct.new(:ca_address_sk, :ca_gmt_offset, keyword_init: true)

CustomerDemographics = Struct.new(:cd_demo_sk, :cd_marital_status, :cd_education_status, keyword_init: true)

HouseholdDemographics = Struct.new(:hd_demo_sk, :hd_buy_potential, keyword_init: true)

$call_center = [OpenStruct.new(cc_call_center_sk: 1, cc_call_center_id: "CC1", cc_name: "Main", cc_manager: "Alice")]
$catalog_returns = [OpenStruct.new(cr_call_center_sk: 1, cr_returned_date_sk: 1, cr_returning_customer_sk: 1, cr_net_loss: 10.0)]
$date_dim = [OpenStruct.new(d_date_sk: 1, d_year: 2001, d_moy: 5)]
$customer = [OpenStruct.new(c_customer_sk: 1, c_current_cdemo_sk: 1, c_current_hdemo_sk: 1, c_current_addr_sk: 1)]
$customer_demographics = [OpenStruct.new(cd_demo_sk: 1, cd_marital_status: "M", cd_education_status: "Unknown")]
$household_demographics = [OpenStruct.new(hd_demo_sk: 1, hd_buy_potential: "1001-5000")]
$customer_address = [OpenStruct.new(ca_address_sk: 1, ca_gmt_offset: (-6))]
$result = _first((begin
	src = $call_center
	_rows = _query(src, [
		{ 'items' => $catalog_returns, 'on' => ->(cc, cr){ (cc.cc_call_center_sk == cr.cr_call_center_sk) } },
		{ 'items' => $date_dim, 'on' => ->(cc, cr, d){ (cr.cr_returned_date_sk == d.d_date_sk) } },
		{ 'items' => $customer, 'on' => ->(cc, cr, d, c){ (cr.cr_returning_customer_sk == c.c_customer_sk) } },
		{ 'items' => $customer_demographics, 'on' => ->(cc, cr, d, c, cd){ (c.c_current_cdemo_sk == cd.cd_demo_sk) } },
		{ 'items' => $household_demographics, 'on' => ->(cc, cr, d, c, cd, hd){ (c.c_current_hdemo_sk == hd.hd_demo_sk) } },
		{ 'items' => $customer_address, 'on' => ->(cc, cr, d, c, cd, hd, ca){ (c.c_current_addr_sk == ca.ca_address_sk) } }
	], { 'select' => ->(cc, cr, d, c, cd, hd, ca){ [cc, cr, d, c, cd, hd, ca] }, 'where' => ->(cc, cr, d, c, cd, hd, ca){ ((((((d.d_year == 2001) && (d.d_moy == 5)) && (cd.cd_marital_status == "M")) && (cd.cd_education_status == "Unknown")) && (hd.hd_buy_potential == "1001-5000")) && (ca.ca_gmt_offset == ((-6)))) } })
	_groups = _group_by(_rows, ->(cc, cr, d, c, cd, hd, ca){ OpenStruct.new(id: cc.cc_call_center_id, name: cc.cc_name, mgr: cc.cc_manager) })
	_items0 = _groups
	_res = []
	for g in _items0
		_res << OpenStruct.new(Call_Center: g.key.id, Call_Center_Name: g.key.name, Manager: g.key.mgr, Returns_Loss: _sum(((g)).map { |x| x.cr_net_loss }))
	end
	_res
end))
_json($result)
raise "expect failed" unless ($result == OpenStruct.new(Call_Center: "CC1", Call_Center_Name: "Main", Manager: "Alice", Returns_Loss: 10.0))
