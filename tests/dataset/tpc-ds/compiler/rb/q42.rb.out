# Generated by Mochi compiler v0.10.25 on 2025-07-15T04:48:31Z
require 'ostruct'

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end
  def length
    @Items.length
  end
  def items
    @Items
  end
  def each(&block)
    @Items.each(&block)
  end
end
def _group_by(src, keyfn)
grouped = src.group_by do |it|
  if it.is_a?(Array)
    keyfn.call(*it)
  else
    keyfn.call(it)
  end
end
grouped.map do |k, items|
g = MGroup.new(k)
items.each do |it|
  if it.is_a?(Array) && it.length == 1
    g.Items << it[0]
  else
    g.Items << it
  end
end
g
end
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _sum(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  s = 0.0
  list.each { |n| s += n.to_f }
  s
end

$store_sales = [OpenStruct.new(sold_date_sk: 1, item_sk: 1, ext_sales_price: 10.0), OpenStruct.new(sold_date_sk: 1, item_sk: 2, ext_sales_price: 20.0), OpenStruct.new(sold_date_sk: 2, item_sk: 1, ext_sales_price: 15.0)]
$item = [OpenStruct.new(i_item_sk: 1, i_manager_id: 1, i_category_id: 100, i_category: "CatA"), OpenStruct.new(i_item_sk: 2, i_manager_id: 1, i_category_id: 200, i_category: "CatB")]
$date_dim = [OpenStruct.new(d_date_sk: 1, d_year: 2020, d_moy: 5), OpenStruct.new(d_date_sk: 2, d_year: 2021, d_moy: 5)]
$month = 5
$year = 2020
$records = (begin
	_res = []
	for dt in $date_dim
		for ss in $store_sales
			if (ss.sold_date_sk == dt.d_date_sk)
				for it in $item
					if (ss.item_sk == it.i_item_sk)
						if (((it.i_manager_id == 1) && (dt.d_moy == $month)) && (dt.d_year == $year))
							_res << OpenStruct.new(d_year: dt.d_year, i_category_id: it.i_category_id, i_category: it.i_category, price: ss.ext_sales_price)
						end
					end
				end
			end
		end
	end
	_res
end)
$grouped = _group_by($records, ->(r){ OpenStruct.new(d_year: r.d_year, i_category_id: r.i_category_id, i_category: r.i_category) }).map { |g| OpenStruct.new(d_year: g.key.d_year, i_category_id: g.key.i_category_id, i_category: g.key.i_category, sum_ss_ext_sales_price: _sum(((g)).map { |x| x.price })) }
$base = ((($grouped)).sort_by { |g| (-g.sum_ss_ext_sales_price) }).map { |g| g }
$result = $base
_json($result)
raise "expect failed" unless ($result == [OpenStruct.new(d_year: 2020, i_category_id: 200, i_category: "CatB", sum_ss_ext_sales_price: 20.0), OpenStruct.new(d_year: 2020, i_category_id: 100, i_category: "CatA", sum_ss_ext_sales_price: 10.0)])
