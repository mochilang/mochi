# Generated by Mochi compiler v0.10.25 on 2025-07-15T04:48:27Z
require 'ostruct'

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end
  def length
    @Items.length
  end
  def items
    @Items
  end
  def each(&block)
    @Items.each(&block)
  end
end
def _group_by(src, keyfn)
grouped = src.group_by do |it|
  if it.is_a?(Array)
    keyfn.call(*it)
  else
    keyfn.call(it)
  end
end
grouped.map do |k, items|
g = MGroup.new(k)
items.each do |it|
  if it.is_a?(Array) && it.length == 1
    g.Items << it[0]
  else
    g.Items << it
  end
end
g
end
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _query(src, joins, opts)
  where_fn = opts['where']
  items = []
  if joins.empty?
    src.each do |v|
      row = [v]
      next if where_fn && !where_fn.call(*row)
      items << row
    end
  else
    items = src.map { |v| [v] }
    joins.each_with_index do |j, idx|
      joined = []
      jitems = j['items']
      on = j['on']
      left = j['left']
      right = j['right']
      last = idx == joins.length - 1
      if right && left
        matched = Array.new(jitems.length, false)
        items.each do |l|
          m = false
          jitems.each_with_index do |r, ri|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            matched[ri] = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          row = l + [nil]
          if left && !m
            if last && where_fn && !where_fn.call(*row)
              # skip
            else
              joined << row
            end
          end
        end
        jitems.each_with_index do |r, ri|
          next if matched[ri]
          _undef = Array.new(items[0]&.length || 0, nil)
          row = _undef + [r]
          if last && where_fn && !where_fn.call(*row)
            next
          end
          joined << row
        end
      elsif right
        jitems.each do |r|
          m = false
          items.each do |l|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          unless m
            _undef = Array.new(items[0]&.length || 0, nil)
            row = _undef + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      else
        items.each do |l|
          m = false
          jitems.each do |r|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          if left && !m
            row = l + [nil]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      end
      items = joined
    end
  end
  if opts['sortKey']
    items = items.map { |it| [it, opts['sortKey'].call(*it)] }
    items.sort_by! { |p| p[1] }
    items.map!(&:first)
  end
  if opts.key?('skip')
    n = opts['skip']
    items = n < items.length ? items[n..-1] : []
  end
  if opts.key?('take')
    n = opts['take']
    items = n < items.length ? items[0...n] : items
  end
  res = []
  items.each { |r| res << opts['select'].call(*r) }
  res
end
def _sliceString(s, i, j)
  start = i
  finish = j
  chars = s.chars
  n = chars.length
  start += n if start < 0
  finish += n if finish < 0
  start = 0 if start < 0
  finish = n if finish > n
  finish = start if finish < start
  chars[start...finish].join
end
def _sum(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  s = 0.0
  list.each { |n| s += n.to_f }
  s
end

CatalogSale = Struct.new(:cs_bill_customer_sk, :cs_sales_price, :cs_sold_date_sk, keyword_init: true)

Customer = Struct.new(:c_customer_sk, :c_current_addr_sk, keyword_init: true)

CustomerAddress = Struct.new(:ca_address_sk, :ca_zip, :ca_state, keyword_init: true)

DateDim = Struct.new(:d_date_sk, :d_qoy, :d_year, keyword_init: true)

$catalog_sales = [OpenStruct.new(cs_bill_customer_sk: 1, cs_sales_price: 600.0, cs_sold_date_sk: 1)]
$customer = [OpenStruct.new(c_customer_sk: 1, c_current_addr_sk: 1)]
$customer_address = [OpenStruct.new(ca_address_sk: 1, ca_zip: "85669", ca_state: "CA")]
$date_dim = [OpenStruct.new(d_date_sk: 1, d_qoy: 1, d_year: 2000)]
$filtered = (begin
	src = $catalog_sales
	_rows = _query(src, [
		{ 'items' => $customer, 'on' => ->(cs, c){ (cs.cs_bill_customer_sk == c.c_customer_sk) } },
		{ 'items' => $customer_address, 'on' => ->(cs, c, ca){ (c.c_current_addr_sk == ca.ca_address_sk) } },
		{ 'items' => $date_dim, 'on' => ->(cs, c, ca, d){ (cs.cs_sold_date_sk == d.d_date_sk) } }
	], { 'select' => ->(cs, c, ca, d){ [cs, c, ca, d] }, 'where' => ->(cs, c, ca, d){ ((((((["85669", "86197", "88274", "83405", "86475", "85392", "85460", "80348", "81792"].include?(_sliceString(ca.ca_zip, 0, 5))) || (["CA", "WA", "GA"].include?(ca.ca_state))) || (cs.cs_sales_price > 500))) && (d.d_qoy == 1)) && (d.d_year == 2000)) } })
	_groups = _group_by(_rows, ->(cs, c, ca, d){ OpenStruct.new(zip: ca.ca_zip) })
	_items0 = _groups
	_items0 = _items0.sort_by { |g| g.key.zip }
	_res = []
	for g in _items0
		_res << OpenStruct.new(ca_zip: g.key.zip, sum_sales: _sum(((g)).map { |x| x.cs_sales_price }))
	end
	_res
end)
_json($filtered)
raise "expect failed" unless ($filtered == [OpenStruct.new(ca_zip: "85669", sum_sales: 600.0)])
