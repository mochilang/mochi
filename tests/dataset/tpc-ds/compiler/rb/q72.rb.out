# Generated by Mochi compiler v0.10.25 on 2025-07-15T04:49:23Z
require 'ostruct'

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end
  def length
    @Items.length
  end
  def items
    @Items
  end
  def each(&block)
    @Items.each(&block)
  end
end
def _group_by(src, keyfn)
grouped = src.group_by do |it|
  if it.is_a?(Array)
    keyfn.call(*it)
  else
    keyfn.call(it)
  end
end
grouped.map do |k, items|
g = MGroup.new(k)
items.each do |it|
  if it.is_a?(Array) && it.length == 1
    g.Items << it[0]
  else
    g.Items << it
  end
end
g
end
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _query(src, joins, opts)
  where_fn = opts['where']
  items = []
  if joins.empty?
    src.each do |v|
      row = [v]
      next if where_fn && !where_fn.call(*row)
      items << row
    end
  else
    items = src.map { |v| [v] }
    joins.each_with_index do |j, idx|
      joined = []
      jitems = j['items']
      on = j['on']
      left = j['left']
      right = j['right']
      last = idx == joins.length - 1
      if right && left
        matched = Array.new(jitems.length, false)
        items.each do |l|
          m = false
          jitems.each_with_index do |r, ri|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            matched[ri] = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          row = l + [nil]
          if left && !m
            if last && where_fn && !where_fn.call(*row)
              # skip
            else
              joined << row
            end
          end
        end
        jitems.each_with_index do |r, ri|
          next if matched[ri]
          _undef = Array.new(items[0]&.length || 0, nil)
          row = _undef + [r]
          if last && where_fn && !where_fn.call(*row)
            next
          end
          joined << row
        end
      elsif right
        jitems.each do |r|
          m = false
          items.each do |l|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          unless m
            _undef = Array.new(items[0]&.length || 0, nil)
            row = _undef + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      else
        items.each do |l|
          m = false
          jitems.each do |r|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          if left && !m
            row = l + [nil]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      end
      items = joined
    end
  end
  if opts['sortKey']
    items = items.map { |it| [it, opts['sortKey'].call(*it)] }
    items.sort_by! { |p| p[1] }
    items.map!(&:first)
  end
  if opts.key?('skip')
    n = opts['skip']
    items = n < items.length ? items[n..-1] : []
  end
  if opts.key?('take')
    n = opts['take']
    items = n < items.length ? items[0...n] : items
  end
  res = []
  items.each { |r| res << opts['select'].call(*r) }
  res
end

$catalog_sales = [OpenStruct.new(cs_item_sk: 1, cs_order_number: 1, cs_quantity: 1, cs_sold_date_sk: 1, cs_ship_date_sk: 3, cs_bill_cdemo_sk: 1, cs_bill_hdemo_sk: 1, cs_promo_sk: nil)]
$inventory = [OpenStruct.new(inv_item_sk: 1, inv_warehouse_sk: 1, inv_date_sk: 2, inv_quantity_on_hand: 0)]
$warehouse = [OpenStruct.new(w_warehouse_sk: 1, w_warehouse_name: "Main")]
$item = [OpenStruct.new(i_item_sk: 1, i_item_desc: "ItemA")]
$customer_demographics = [OpenStruct.new(cd_demo_sk: 1, cd_marital_status: "M")]
$household_demographics = [OpenStruct.new(hd_demo_sk: 1, hd_buy_potential: "5001-10000")]
$date_dim = [OpenStruct.new(d_date_sk: 1, d_week_seq: 10, d_date: 1, d_year: 2000), OpenStruct.new(d_date_sk: 2, d_week_seq: 10, d_date: 1, d_year: 2000), OpenStruct.new(d_date_sk: 3, d_week_seq: 10, d_date: 7, d_year: 2000)]
$result = (begin
	src = $catalog_sales
	_rows = _query(src, [
		{ 'items' => $inventory, 'on' => ->(cs, inv){ (inv.inv_item_sk == cs.cs_item_sk) } },
		{ 'items' => $warehouse, 'on' => ->(cs, inv, w){ (w.w_warehouse_sk == inv.inv_warehouse_sk) } },
		{ 'items' => $item, 'on' => ->(cs, inv, w, i){ (i.i_item_sk == cs.cs_item_sk) } },
		{ 'items' => $customer_demographics, 'on' => ->(cs, inv, w, i, cd){ (cd.cd_demo_sk == cs.cs_bill_cdemo_sk) } },
		{ 'items' => $household_demographics, 'on' => ->(cs, inv, w, i, cd, hd){ (hd.hd_demo_sk == cs.cs_bill_hdemo_sk) } },
		{ 'items' => $date_dim, 'on' => ->(cs, inv, w, i, cd, hd, d1){ (d1.d_date_sk == cs.cs_sold_date_sk) } },
		{ 'items' => $date_dim, 'on' => ->(cs, inv, w, i, cd, hd, d1, d2){ (d2.d_date_sk == inv.inv_date_sk) } },
		{ 'items' => $date_dim, 'on' => ->(cs, inv, w, i, cd, hd, d1, d2, d3){ (d3.d_date_sk == cs.cs_ship_date_sk) } }
	], { 'select' => ->(cs, inv, w, i, cd, hd, d1, d2, d3){ [cs, inv, w, i, cd, hd, d1, d2, d3] }, 'where' => ->(cs, inv, w, i, cd, hd, d1, d2, d3){ ((((((d1.d_week_seq == d2.d_week_seq) && (inv.inv_quantity_on_hand < cs.cs_quantity)) && (d3.d_date > (d1.d_date + 5))) && (hd.hd_buy_potential == "5001-10000")) && (d1.d_year == 2000)) && (cd.cd_marital_status == "M")) } })
	_groups = _group_by(_rows, ->(cs, inv, w, i, cd, hd, d1, d2, d3){ OpenStruct.new(item_desc: i.i_item_desc, warehouse: w.w_warehouse_name, week_seq: d1.d_week_seq) })
	_items0 = _groups
	_res = []
	for g in _items0
		_res << OpenStruct.new(i_item_desc: g.key.item_desc, w_warehouse_name: g.key.warehouse, d_week_seq: g.key.week_seq, no_promo: ((((g)).select { |x| (x.cs_promo_sk == nil) }).map { |x| x }).length, promo: ((((g)).select { |x| (x.cs_promo_sk != nil) }).map { |x| x }).length, total_cnt: (g).length)
	end
	_res
end)
_json($result)
raise "expect failed" unless ($result == [OpenStruct.new(i_item_desc: "ItemA", w_warehouse_name: "Main", d_week_seq: 10, no_promo: 1, promo: 0, total_cnt: 1)])
