# Generated by Mochi compiler v0.10.25 on 2025-07-15T04:48:28Z
require 'ostruct'

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end
  def length
    @Items.length
  end
  def items
    @Items
  end
  def each(&block)
    @Items.each(&block)
  end
end
def _group_by(src, keyfn)
grouped = src.group_by do |it|
  if it.is_a?(Array)
    keyfn.call(*it)
  else
    keyfn.call(it)
  end
end
grouped.map do |k, items|
g = MGroup.new(k)
items.each do |it|
  if it.is_a?(Array) && it.length == 1
    g.Items << it[0]
  else
    g.Items << it
  end
end
g
end
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _query(src, joins, opts)
  where_fn = opts['where']
  items = []
  if joins.empty?
    src.each do |v|
      row = [v]
      next if where_fn && !where_fn.call(*row)
      items << row
    end
  else
    items = src.map { |v| [v] }
    joins.each_with_index do |j, idx|
      joined = []
      jitems = j['items']
      on = j['on']
      left = j['left']
      right = j['right']
      last = idx == joins.length - 1
      if right && left
        matched = Array.new(jitems.length, false)
        items.each do |l|
          m = false
          jitems.each_with_index do |r, ri|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            matched[ri] = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          row = l + [nil]
          if left && !m
            if last && where_fn && !where_fn.call(*row)
              # skip
            else
              joined << row
            end
          end
        end
        jitems.each_with_index do |r, ri|
          next if matched[ri]
          _undef = Array.new(items[0]&.length || 0, nil)
          row = _undef + [r]
          if last && where_fn && !where_fn.call(*row)
            next
          end
          joined << row
        end
      elsif right
        jitems.each do |r|
          m = false
          items.each do |l|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          unless m
            _undef = Array.new(items[0]&.length || 0, nil)
            row = _undef + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      else
        items.each do |l|
          m = false
          jitems.each do |r|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          if left && !m
            row = l + [nil]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      end
      items = joined
    end
  end
  if opts['sortKey']
    items = items.map { |it| [it, opts['sortKey'].call(*it)] }
    items.sort_by! { |p| p[1] }
    items.map!(&:first)
  end
  if opts.key?('skip')
    n = opts['skip']
    items = n < items.length ? items[n..-1] : []
  end
  if opts.key?('take')
    n = opts['take']
    items = n < items.length ? items[0...n] : items
  end
  res = []
  items.each { |r| res << opts['select'].call(*r) }
  res
end
def _sum(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  s = 0.0
  list.each { |n| s += n.to_f }
  s
end

StoreSale = Struct.new(:ss_sold_date_sk, :ss_item_sk, :ss_store_sk, :ss_customer_sk, :ss_net_profit, :ss_ticket_number, keyword_init: true)

StoreReturn = Struct.new(:sr_returned_date_sk, :sr_item_sk, :sr_customer_sk, :sr_ticket_number, :sr_net_loss, keyword_init: true)

CatalogSale = Struct.new(:cs_sold_date_sk, :cs_item_sk, :cs_bill_customer_sk, :cs_net_profit, keyword_init: true)

DateDim = Struct.new(:d_date_sk, :d_moy, :d_year, keyword_init: true)

Store = Struct.new(:s_store_sk, :s_store_id, :s_store_name, keyword_init: true)

Item = Struct.new(:i_item_sk, :i_item_id, :i_item_desc, keyword_init: true)

$store_sales = [OpenStruct.new(ss_sold_date_sk: 1, ss_item_sk: 1, ss_store_sk: 1, ss_customer_sk: 1, ss_net_profit: 50.0, ss_ticket_number: 1), OpenStruct.new(ss_sold_date_sk: 1, ss_item_sk: 2, ss_store_sk: 1, ss_customer_sk: 2, ss_net_profit: 20.0, ss_ticket_number: 2)]
$store_returns = [OpenStruct.new(sr_returned_date_sk: 2, sr_item_sk: 1, sr_customer_sk: 1, sr_ticket_number: 1, sr_net_loss: 10.0), OpenStruct.new(sr_returned_date_sk: 2, sr_item_sk: 2, sr_customer_sk: 2, sr_ticket_number: 2, sr_net_loss: 5.0)]
$catalog_sales = [OpenStruct.new(cs_sold_date_sk: 3, cs_item_sk: 1, cs_bill_customer_sk: 1, cs_net_profit: 30.0), OpenStruct.new(cs_sold_date_sk: 3, cs_item_sk: 2, cs_bill_customer_sk: 2, cs_net_profit: 15.0)]
$date_dim = [OpenStruct.new(d_date_sk: 1, d_moy: 4, d_year: 2000), OpenStruct.new(d_date_sk: 2, d_moy: 5, d_year: 2000), OpenStruct.new(d_date_sk: 3, d_moy: 6, d_year: 2000)]
$store = [OpenStruct.new(s_store_sk: 1, s_store_id: "S1", s_store_name: "Store1")]
$item = [OpenStruct.new(i_item_sk: 1, i_item_id: "ITEM1", i_item_desc: "Desc1"), OpenStruct.new(i_item_sk: 2, i_item_id: "ITEM2", i_item_desc: "Desc2")]
$result = (begin
	src = $store_sales
	_rows = _query(src, [
		{ 'items' => $store_returns, 'on' => ->(ss, sr){ ((ss.ss_ticket_number == sr.sr_ticket_number) && (ss.ss_item_sk == sr.sr_item_sk)) } },
		{ 'items' => $catalog_sales, 'on' => ->(ss, sr, cs){ ((sr.sr_customer_sk == cs.cs_bill_customer_sk) && (sr.sr_item_sk == cs.cs_item_sk)) } },
		{ 'items' => $date_dim, 'on' => ->(ss, sr, cs, d1){ (d1.d_date_sk == ss.ss_sold_date_sk) } },
		{ 'items' => $date_dim, 'on' => ->(ss, sr, cs, d1, d2){ (d2.d_date_sk == sr.sr_returned_date_sk) } },
		{ 'items' => $date_dim, 'on' => ->(ss, sr, cs, d1, d2, d3){ (d3.d_date_sk == cs.cs_sold_date_sk) } },
		{ 'items' => $store, 'on' => ->(ss, sr, cs, d1, d2, d3, s){ (s.s_store_sk == ss.ss_store_sk) } },
		{ 'items' => $item, 'on' => ->(ss, sr, cs, d1, d2, d3, s, i){ (i.i_item_sk == ss.ss_item_sk) } }
	], { 'select' => ->(ss, sr, cs, d1, d2, d3, s, i){ [ss, sr, cs, d1, d2, d3, s, i] }, 'where' => ->(ss, sr, cs, d1, d2, d3, s, i){ ((((((d1.d_moy == 4) && (d1.d_year == 2000)) && (d2.d_moy >= 4)) && (d2.d_moy <= 10)) && (d3.d_moy >= 4)) && (d3.d_moy <= 10)) } })
	_groups = _group_by(_rows, ->(ss, sr, cs, d1, d2, d3, s, i){ OpenStruct.new(item_id: i.i_item_id, item_desc: i.i_item_desc, s_store_id: s.s_store_id, s_store_name: s.s_store_name) })
	_items0 = _groups
	_res = []
	for g in _items0
		_res << OpenStruct.new(i_item_id: g.key.item_id, i_item_desc: g.key.item_desc, s_store_id: g.key.s_store_id, s_store_name: g.key.s_store_name, store_sales_profit: _sum(((g)).map { |x| x.ss_net_profit }), store_returns_loss: _sum(((g)).map { |x| x.sr_net_loss }), catalog_sales_profit: _sum(((g)).map { |x| x.cs_net_profit }))
	end
	_res
end)
_json($result)
raise "expect failed" unless ($result == [OpenStruct.new(i_item_id: "ITEM1", i_item_desc: "Desc1", s_store_id: "S1", s_store_name: "Store1", store_sales_profit: 50.0, store_returns_loss: 10.0, catalog_sales_profit: 30.0), OpenStruct.new(i_item_id: "ITEM2", i_item_desc: "Desc2", s_store_id: "S1", s_store_name: "Store1", store_sales_profit: 20.0, store_returns_loss: 5.0, catalog_sales_profit: 15.0)])
