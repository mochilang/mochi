# Generated by Mochi compiler v0.10.26 on 2025-07-15T06:46:59Z
require 'ostruct'

def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _query(src, joins, opts)
  where_fn = opts['where']
  items = []
  if joins.empty?
    src.each do |v|
      row = [v]
      next if where_fn && !where_fn.call(*row)
      items << row
    end
  else
    items = src.map { |v| [v] }
    joins.each_with_index do |j, idx|
      joined = []
      jitems = j['items']
      on = j['on']
      left = j['left']
      right = j['right']
      last = idx == joins.length - 1
      if right && left
        matched = Array.new(jitems.length, false)
        items.each do |l|
          m = false
          jitems.each_with_index do |r, ri|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            matched[ri] = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          row = l + [nil]
          if left && !m
            if last && where_fn && !where_fn.call(*row)
              # skip
            else
              joined << row
            end
          end
        end
        jitems.each_with_index do |r, ri|
          next if matched[ri]
          _undef = Array.new(items[0]&.length || 0, nil)
          row = _undef + [r]
          if last && where_fn && !where_fn.call(*row)
            next
          end
          joined << row
        end
      elsif right
        jitems.each do |r|
          m = false
          items.each do |l|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          unless m
            _undef = Array.new(items[0]&.length || 0, nil)
            row = _undef + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      else
        items.each do |l|
          m = false
          jitems.each do |r|
            keep = true
            keep = on.call(*l, r) if on
            next unless keep
            m = true
            row = l + [r]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
          if left && !m
            row = l + [nil]
            if last && where_fn && !where_fn.call(*row)
              next
            end
            joined << row
          end
        end
      end
      items = joined
    end
  end
  if opts['sortKey']
    items = items.map { |it| [it, opts['sortKey'].call(*it)] }
    items.sort_by! { |p| p[1] }
    items.map!(&:first)
  end
  if opts.key?('skip')
    n = opts['skip']
    items = n < items.length ? items[n..-1] : []
  end
  if opts.key?('take')
    n = opts['take']
    items = n < items.length ? items[0...n] : items
  end
  res = []
  items.each { |r| res << opts['select'].call(*r) }
  res
end

$ss = [OpenStruct.new(ss_sold_year: 1998, ss_item_sk: 1, ss_customer_sk: 1, ss_qty: 10, ss_wc: 50.0, ss_sp: 100.0)]
$ws = [OpenStruct.new(ws_sold_year: 1998, ws_item_sk: 1, ws_customer_sk: 1, ws_qty: 5, ws_wc: 25.0, ws_sp: 50.0)]
$cs = [OpenStruct.new(cs_sold_year: 1998, cs_item_sk: 1, cs_customer_sk: 1, cs_qty: 3, cs_wc: 15.0, cs_sp: 30.0)]
$result = (begin
	src = $ss
	_rows = _query(src, [
		{ 'items' => $ws, 'on' => ->(s, w){ (((w.ws_sold_year == s.ss_sold_year) && (w.ws_item_sk == s.ss_item_sk)) && (w.ws_customer_sk == s.ss_customer_sk)) }, 'left' => true },
		{ 'items' => $cs, 'on' => ->(s, w, c){ (((c.cs_sold_year == s.ss_sold_year) && (c.cs_item_sk == s.ss_item_sk)) && (c.cs_customer_sk == s.ss_customer_sk)) }, 'left' => true }
	], { 'select' => ->(s, w, c){ OpenStruct.new(ss_sold_year: s.ss_sold_year, ss_item_sk: s.ss_item_sk, ss_customer_sk: s.ss_customer_sk, ratio: (s.ss_qty / (((((w == nil) ? 0 : w.ws_qty)) + (((c == nil) ? 0 : c.cs_qty))))), store_qty: s.ss_qty, store_wholesale_cost: s.ss_wc, store_sales_price: s.ss_sp, other_chan_qty: ((((w == nil) ? 0 : w.ws_qty)) + (((c == nil) ? 0 : c.cs_qty))), other_chan_wholesale_cost: ((((w == nil) ? 0.0 : w.ws_wc)) + (((c == nil) ? 0.0 : c.cs_wc))), other_chan_sales_price: ((((w == nil) ? 0.0 : w.ws_sp)) + (((c == nil) ? 0.0 : c.cs_sp)))) }, 'where' => ->(s, w, c){ (((((((w == nil) ? 0 : w.ws_qty)) > 0) || ((((c == nil) ? 0 : c.cs_qty)) > 0))) && (s.ss_sold_year == 1998)) } })
	_rows
end)
_json($result)
raise "expect failed" unless ($result == [OpenStruct.new(ss_sold_year: 1998, ss_item_sk: 1, ss_customer_sk: 1, ratio: 1.25, store_qty: 10, store_wholesale_cost: 50.0, store_sales_price: 100.0, other_chan_qty: 8, other_chan_wholesale_cost: 40.0, other_chan_sales_price: 80.0)])
