# Generated by Mochi compiler v0.10.26 on 2025-07-15T06:48:10Z
require 'ostruct'

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end
  def length
    @Items.length
  end
  def items
    @Items
  end
  def each(&block)
    @Items.each(&block)
  end
end
def _group_by(src, keyfn)
grouped = src.group_by do |it|
  if it.is_a?(Array)
    keyfn.call(*it)
  else
    keyfn.call(it)
  end
end
grouped.map do |k, items|
g = MGroup.new(k)
items.each do |it|
  if it.is_a?(Array) && it.length == 1
    g.Items << it[0]
  else
    g.Items << it
  end
end
g
end
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end

StoreSale = Struct.new(:ss_customer_sk, :ss_item_sk, keyword_init: true)

CatalogSale = Struct.new(:cs_bill_customer_sk, :cs_item_sk, keyword_init: true)

$store_sales = [OpenStruct.new(ss_customer_sk: 1, ss_item_sk: 1), OpenStruct.new(ss_customer_sk: 2, ss_item_sk: 1)]
$catalog_sales = [OpenStruct.new(cs_bill_customer_sk: 1, cs_item_sk: 1), OpenStruct.new(cs_bill_customer_sk: 3, cs_item_sk: 2)]
$ssci = _group_by($store_sales, ->(ss){ OpenStruct.new(customer_sk: ss.ss_customer_sk, item_sk: ss.ss_item_sk) }).map { |g| OpenStruct.new(customer_sk: g.key.customer_sk, item_sk: g.key.item_sk) }
$csci = _group_by($catalog_sales, ->(cs){ OpenStruct.new(customer_sk: cs.cs_bill_customer_sk, item_sk: cs.cs_item_sk) }).map { |g| OpenStruct.new(customer_sk: g.key.customer_sk, item_sk: g.key.item_sk) }
$both = ((begin
	_res = []
	for s in $ssci
		for c in $csci
			if ((s.customer_sk == c.customer_sk) && (s.item_sk == c.item_sk))
				_res << 1
			end
		end
	end
	_res
end)).length
$store_only = (((($ssci)).select { |s| (!(!(((($csci)).select { |c| ((s.customer_sk == c.customer_sk) && (s.item_sk == c.item_sk)) }).map { |c| c }).empty?)) }).map { |s| 1 }).length
$catalog_only = (((($csci)).select { |c| (!(!(((($ssci)).select { |s| ((s.customer_sk == c.customer_sk) && (s.item_sk == c.item_sk)) }).map { |s| s }).empty?)) }).map { |c| 1 }).length
$result = OpenStruct.new(store_only: $store_only, catalog_only: $catalog_only, store_and_catalog: $both)
_json($result)
raise "expect failed" unless ((($result["store_only"] == 1) && ($result["catalog_only"] == 1)) && ($result["store_and_catalog"] == 1))
