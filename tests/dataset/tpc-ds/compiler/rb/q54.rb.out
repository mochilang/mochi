# Generated by Mochi compiler v0.10.25 on 2025-07-15T04:48:32Z
require 'ostruct'

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end
  def length
    @Items.length
  end
  def items
    @Items
  end
  def each(&block)
    @Items.each(&block)
  end
end
def _group_by(src, keyfn)
grouped = src.group_by do |it|
  if it.is_a?(Array)
    keyfn.call(*it)
  else
    keyfn.call(it)
  end
end
grouped.map do |k, items|
g = MGroup.new(k)
items.each do |it|
  if it.is_a?(Array) && it.length == 1
    g.Items << it[0]
  else
    g.Items << it
  end
end
g
end
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _sum(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  s = 0.0
  list.each { |n| s += n.to_f }
  s
end

def int(x)
	return x
end

$store_sales = [OpenStruct.new(customer: 1, sold_date: 2, price: 60.0), OpenStruct.new(customer: 2, sold_date: 2, price: 40.0)]
$date_dim = [OpenStruct.new(d_date_sk: 2, d_month_seq: 5)]
$customer = [OpenStruct.new(c_customer_sk: 1, c_current_addr_sk: 1), OpenStruct.new(c_customer_sk: 2, c_current_addr_sk: 1)]
$customer_address = [OpenStruct.new(ca_address_sk: 1, ca_county: "X", ca_state: "Y")]
$store = [OpenStruct.new(s_store_sk: 1, s_county: "X", s_state: "Y")]
$revenue = (begin
	_res = []
	for ss in $store_sales
		for d in $date_dim
			if (ss.sold_date == d.d_date_sk)
				for c in $customer
					if (ss.customer == c.c_customer_sk)
						for ca in $customer_address
							if (((c.c_current_addr_sk == ca.ca_address_sk) && (ca.ca_county == "X")) && (ca.ca_state == "Y"))
								for s in $store
									if (((1 == s.s_store_sk) && (ca.ca_county == s.s_county)) && (ca.ca_state == s.s_state))
										_res << OpenStruct.new(customer: c.c_customer_sk, amt: ss.price)
									end
								end
							end
						end
					end
				end
			end
		end
	end
	_res
end)
$by_customer = _group_by($revenue, ->(r){ r.customer }).map { |g| OpenStruct.new(customer: g.key, revenue: _sum(((g)).map { |x| x.amt })) }
$segments = _group_by($by_customer, ->(r){ OpenStruct.new(seg: int((r.revenue / 50))) }).map { |g| OpenStruct.new(segment: g.key.seg, num_customers: (g).length, segment_base: (g.key.seg * 50)) }
$result = $segments
_json($result)
raise "expect failed" unless ($result == [OpenStruct.new(segment: 1, num_customers: 1, segment_base: 50), OpenStruct.new(segment: 0, num_customers: 1, segment_base: 0)])
