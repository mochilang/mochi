require "ostruct"

def _first(v)
  list = nil
  if v.respond_to?(:Items)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return nil if !list || list.empty?
  list[0]
end

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end

  def length
    @Items.length
  end

  def each(&block)
    @Items.each(&block)
  end
end

def _group_by(src, keyfn)
  grouped = src.group_by do |it|
    if it.is_a?(Array)
      keyfn.call(*it)
    else
      keyfn.call(it)
    end
  end
  grouped.map do |k, items|
    g = MGroup.new(k)
    items.each do |it|
      g.Items << if it.is_a?(Array) && it.length == 1
        it[0]
      else
        it
      end
    end
    g
  end
end

def _json(v)
  require "json"
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end

catalog_returns = [OpenStruct.new(cust: 1, state: "CA", amt: 40.0), OpenStruct.new(cust: 2, state: "CA", amt: 50.0), OpenStruct.new(cust: 3, state: "CA", amt: 81.0), OpenStruct.new(cust: 4, state: "TX", amt: 30.0), OpenStruct.new(cust: 5, state: "TX", amt: 20.0)]
avg_list = _group_by(catalog_returns, ->(r) { r.state }).map { |g| OpenStruct.new(state: g.key, avg_amt: (((g.map { |x| x.amt }).length > 0) ? (g.map { |x| x.amt }).sum(0.0) / (g.map { |x| x.amt }).length : 0)) }
avg_state = _first((avg_list.select { |a| (a.state == "CA") }).map { |a| a })
result_list = (catalog_returns.select { |r| (r.state == "CA") && (r.amt > (avg_state.avg_amt * 1.2)) }).map { |r| r.amt }
result = _first(result_list)
_json(result)
raise "expect failed" unless result == 81.0
