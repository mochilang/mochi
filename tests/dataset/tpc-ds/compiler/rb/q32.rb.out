# Generated by Mochi compiler v0.10.25 on 2025-07-15T04:48:29Z
require 'ostruct'

def _avg(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  list.sum(0.0) / list.length
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _sum(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  s = 0.0
  list.each { |n| s += n.to_f }
  s
end

$catalog_sales = [OpenStruct.new(cs_item_sk: 1, cs_sold_date_sk: 1, cs_ext_discount_amt: 5.0), OpenStruct.new(cs_item_sk: 1, cs_sold_date_sk: 2, cs_ext_discount_amt: 10.0), OpenStruct.new(cs_item_sk: 1, cs_sold_date_sk: 3, cs_ext_discount_amt: 20.0)]
$item = [OpenStruct.new(i_item_sk: 1, i_manufact_id: 1)]
$date_dim = [OpenStruct.new(d_date_sk: 1, d_year: 2000), OpenStruct.new(d_date_sk: 2, d_year: 2000), OpenStruct.new(d_date_sk: 3, d_year: 2000)]
$filtered = (begin
	_res = []
	for cs in $catalog_sales
		for i in $item
			if (cs.cs_item_sk == i.i_item_sk)
				for d in $date_dim
					if (cs.cs_sold_date_sk == d.d_date_sk)
						if ((i.i_manufact_id == 1) && (d.d_year == 2000))
							_res << cs.cs_ext_discount_amt
						end
					end
				end
			end
		end
	end
	_res
end)
$avg_discount = _avg($filtered)
$result = _sum(((($filtered)).select { |x| (x > ($avg_discount * 1.3)) }).map { |x| x })
_json($result)
raise "expect failed" unless ($result == 20.0)
