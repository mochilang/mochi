# Generated by Mochi compiler v0.10.27 on 2025-07-17T06:41:29Z
require 'ostruct'

def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _sum(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  list.sum(0.0)
end

$store_sales = [OpenStruct.new(cdemo_sk: 1, addr_sk: 1, sold_date_sk: 1, sales_price: 120.0, net_profit: 1000.0, quantity: 5), OpenStruct.new(cdemo_sk: 2, addr_sk: 2, sold_date_sk: 1, sales_price: 60.0, net_profit: 2000.0, quantity: 10), OpenStruct.new(cdemo_sk: 3, addr_sk: 3, sold_date_sk: 1, sales_price: 170.0, net_profit: 10000.0, quantity: 20)]
$store = [OpenStruct.new(s_store_sk: 1)]
$customer_demographics = [OpenStruct.new(cd_demo_sk: 1, cd_marital_status: "S", cd_education_status: "E1"), OpenStruct.new(cd_demo_sk: 2, cd_marital_status: "M", cd_education_status: "E2"), OpenStruct.new(cd_demo_sk: 3, cd_marital_status: "W", cd_education_status: "E3")]
$customer_address = [OpenStruct.new(ca_address_sk: 1, ca_country: "United States", ca_state: "TX"), OpenStruct.new(ca_address_sk: 2, ca_country: "United States", ca_state: "CA"), OpenStruct.new(ca_address_sk: 3, ca_country: "United States", ca_state: "NY")]
$date_dim = [OpenStruct.new(d_date_sk: 1, d_year: 2000)]
$year = 2000
$states1 = ["TX"]
$states2 = ["CA"]
$states3 = ["NY"]
$qty_base = (begin
	_res = []
	for ss in $store_sales
		for cd in $customer_demographics
			if (ss.cdemo_sk == cd.cd_demo_sk)
				for ca in $customer_address
					if (ss.addr_sk == ca.ca_address_sk)
						for d in $date_dim
							if (ss.sold_date_sk == d.d_date_sk)
								if (((d.d_year == $year) && ((((((((cd.cd_marital_status == "S") && (cd.cd_education_status == "E1")) && (ss.sales_price >= 100.0)) && (ss.sales_price <= 150.0))) || (((((cd.cd_marital_status == "M") && (cd.cd_education_status == "E2")) && (ss.sales_price >= 50.0)) && (ss.sales_price <= 100.0)))) || (((((cd.cd_marital_status == "W") && (cd.cd_education_status == "E3")) && (ss.sales_price >= 150.0)) && (ss.sales_price <= 200.0)))))) && ((((((($states1.include?(ca.ca_state)) && (ss.net_profit >= 0)) && (ss.net_profit <= 2000))) || (((($states2.include?(ca.ca_state)) && (ss.net_profit >= 150)) && (ss.net_profit <= 3000)))) || (((($states3.include?(ca.ca_state)) && (ss.net_profit >= 50)) && (ss.net_profit <= 25000))))))
									_res << ss.quantity
								end
							end
						end
					end
				end
			end
		end
	end
	_res
end)
$qty = $qty_base
$result = _sum($qty)
_json($result)
raise "expect failed" unless ($result == 35)
