# Generated by Mochi compiler v0.10.26 on 2025-07-15T06:48:10Z
require 'ostruct'

def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end

StoreSale = Struct.new(:ss_sold_time_sk, :ss_hdemo_sk, :ss_store_sk, keyword_init: true)

HouseholdDemographics = Struct.new(:hd_demo_sk, :hd_dep_count, keyword_init: true)

TimeDim = Struct.new(:t_time_sk, :t_hour, :t_minute, keyword_init: true)

Store = Struct.new(:s_store_sk, :s_store_name, keyword_init: true)

$store_sales = [OpenStruct.new(ss_sold_time_sk: 1, ss_hdemo_sk: 1, ss_store_sk: 1), OpenStruct.new(ss_sold_time_sk: 1, ss_hdemo_sk: 1, ss_store_sk: 1), OpenStruct.new(ss_sold_time_sk: 2, ss_hdemo_sk: 1, ss_store_sk: 1)]
$household_demographics = [OpenStruct.new(hd_demo_sk: 1, hd_dep_count: 3)]
$time_dim = [OpenStruct.new(t_time_sk: 1, t_hour: 20, t_minute: 35), OpenStruct.new(t_time_sk: 2, t_hour: 20, t_minute: 45)]
$store = [OpenStruct.new(s_store_sk: 1, s_store_name: "ese")]
$result = ((begin
	_res = []
	for ss in $store_sales
		for hd in $household_demographics
			if (ss.ss_hdemo_sk == hd.hd_demo_sk)
				for t in $time_dim
					if (ss.ss_sold_time_sk == t.t_time_sk)
						for s in $store
							if (ss.ss_store_sk == s.s_store_sk)
								if ((((t.t_hour == 20) && (t.t_minute >= 30)) && (hd.hd_dep_count == 3)) && (s.s_store_name == "ese"))
									_res << ss
								end
							end
						end
					end
				end
			end
		end
	end
	_res
end)).length
_json($result)
raise "expect failed" unless ($result == 3)
