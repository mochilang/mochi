# Generated by Mochi compiler v0.10.26 on 2025-07-15T06:47:46Z
require 'ostruct'

def _avg(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  list.sum(0.0) / list.length
end
class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end
  def length
    @Items.length
  end
  def items
    @Items
  end
  def each(&block)
    @Items.each(&block)
  end
end
def _group_by(src, keyfn)
grouped = src.group_by do |it|
  if it.is_a?(Array)
    keyfn.call(*it)
  else
    keyfn.call(it)
  end
end
grouped.map do |k, items|
g = MGroup.new(k)
items.each do |it|
  if it.is_a?(Array) && it.length == 1
    g.Items << it[0]
  else
    g.Items << it
  end
end
g
end
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end

StoreSale = Struct.new(:ss_quantity, :ss_list_price, :ss_coupon_amt, :ss_wholesale_cost, keyword_init: true)

$store_sales = [OpenStruct.new(ss_quantity: 3, ss_list_price: 100.0, ss_coupon_amt: 50.0, ss_wholesale_cost: 30.0), OpenStruct.new(ss_quantity: 8, ss_list_price: 80.0, ss_coupon_amt: 10.0, ss_wholesale_cost: 20.0), OpenStruct.new(ss_quantity: 12, ss_list_price: 60.0, ss_coupon_amt: 5.0, ss_wholesale_cost: 15.0)]
$bucket1 = ((($store_sales)).select { |ss| (((ss.ss_quantity >= 0) && (ss.ss_quantity <= 5)) && ((((((ss.ss_list_price >= 0) && (ss.ss_list_price <= 110))) || (((ss.ss_coupon_amt >= 0) && (ss.ss_coupon_amt <= 1000)))) || (((ss.ss_wholesale_cost >= 0) && (ss.ss_wholesale_cost <= 50)))))) }).map { |ss| ss }
$bucket2 = ((($store_sales)).select { |ss| (((ss.ss_quantity >= 6) && (ss.ss_quantity <= 10)) && ((((((ss.ss_list_price >= 0) && (ss.ss_list_price <= 110))) || (((ss.ss_coupon_amt >= 0) && (ss.ss_coupon_amt <= 1000)))) || (((ss.ss_wholesale_cost >= 0) && (ss.ss_wholesale_cost <= 50)))))) }).map { |ss| ss }
$result = OpenStruct.new(B1_LP: _avg((($bucket1)).map { |x| x.ss_list_price }), B1_CNT: ($bucket1).length, B1_CNTD: (_group_by($bucket1, ->(x){ x.ss_list_price }).map { |g| g.key }).length, B2_LP: _avg((($bucket2)).map { |x| x.ss_list_price }), B2_CNT: ($bucket2).length, B2_CNTD: (_group_by($bucket2, ->(x){ x.ss_list_price }).map { |g| g.key }).length)
_json($result)
raise "expect failed" unless ($result == OpenStruct.new(B1_LP: 100.0, B1_CNT: 1, B1_CNTD: 1, B2_LP: 80.0, B2_CNT: 1, B2_CNTD: 1))
