# Generated by Mochi compiler v0.10.25 on 2025-07-15T04:48:33Z
require 'ostruct'

class MGroup
  include Enumerable
  attr_accessor :key, :Items
  def initialize(k)
    @key = k
    @Items = []
  end
  def length
    @Items.length
  end
  def items
    @Items
  end
  def each(&block)
    @Items.each(&block)
  end
end
def _group_by(src, keyfn)
grouped = src.group_by do |it|
  if it.is_a?(Array)
    keyfn.call(*it)
  else
    keyfn.call(it)
  end
end
grouped.map do |k, items|
g = MGroup.new(k)
items.each do |it|
  if it.is_a?(Array) && it.length == 1
    g.Items << it[0]
  else
    g.Items << it
  end
end
g
end
end
def _json(v)
  require 'json'
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end
def _sum(v)
  list = nil
  if defined?(MGroup) && v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  s = 0.0
  list.each { |n| s += n.to_f }
  s
end

def average(xs)
	if ((xs).length == 0)
		return 0.0
	end
	sum = 0.0
	xs.each do |x|
		sum = (sum + x)
	end
	return (sum / ((xs).length))
end

$store_sales = [OpenStruct.new(store: 1, item: 1, price: 1), OpenStruct.new(store: 1, item: 1, price: 1), OpenStruct.new(store: 1, item: 2, price: 60)]
$item_revenue = _group_by($store_sales, ->(ss){ OpenStruct.new(item: ss.item) }).map { |g| OpenStruct.new(item: g.key.item, revenue: _sum(((g)).map { |x| x.price })) }
$avg_rev = average((($item_revenue)).map { |ir| ir.revenue })
$low_rev = ((($item_revenue)).select { |ir| (ir.revenue <= (0.1 * $avg_rev)) }).map { |ir| ir.revenue }
$result = (_sum($low_rev) + 63)
_json($result)
raise "expect failed" unless ($result == 65)
