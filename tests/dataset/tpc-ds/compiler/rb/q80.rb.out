require "ostruct"

def _json(v)
  require "json"
  obj = v
  if v.is_a?(Array)
    obj = v.map { |it| it.respond_to?(:to_h) ? it.to_h : it }
  elsif v.respond_to?(:to_h)
    obj = v.to_h
  end
  puts(JSON.generate(obj))
end

def _sum(v)
  list = nil
  if v.is_a?(MGroup)
    list = v.Items
  elsif v.is_a?(Array)
    list = v
  elsif v.respond_to?(:to_a)
    list = v.to_a
  end
  return 0 if !list || list.empty?
  s = 0.0
  list.each { |n| s += n.to_f }
  s
end

store_sales = [OpenStruct.new(price: 20.0, ret: 5.0), OpenStruct.new(price: 10.0, ret: 2.0), OpenStruct.new(price: 5.0, ret: 0.0)]
catalog_sales = [OpenStruct.new(price: 15.0, ret: 3.0), OpenStruct.new(price: 8.0, ret: 1.0)]
web_sales = [OpenStruct.new(price: 25.0, ret: 5.0), OpenStruct.new(price: 15.0, ret: 8.0), OpenStruct.new(price: 8.0, ret: 2.0)]
total_profit = ((_sum(store_sales.map { |s| (s.price - s.ret) }) + _sum(catalog_sales.map { |c| (c.price - c.ret) })) + _sum(web_sales.map { |w| (w.price - w.ret) }))
_json(total_profit)
raise "expect failed" unless total_profit == 80.0
