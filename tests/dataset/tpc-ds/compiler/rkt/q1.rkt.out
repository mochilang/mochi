#lang racket
(require racket/list racket/string racket/system json json)

(define (idx x i)
  (cond [(string? x) (let* ([n (string-length x)] [idx (if (< i 0) (+ i n) i)]) (char->integer (string-ref x idx)))]
        [(hash? x) (hash-ref x i)]
        [else (let* ([n (length x)] [idx (if (< i 0) (+ i n) i)]) (list-ref x idx))]))
(define (slice x s e)
  (if (string? x)
      (let* ([n (string-length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (substring x start end))
      (let* ([n (length x)]
             [start (if (< s 0) (+ s n) s)]
             [end (if (< e 0) (+ e n) e)]
             [start (max 0 start)]
             [end (min n end)]
             [end (if (< end start) start end)])
        (take (drop x start) (- end start)))))
(define (count x)
  (cond [(string? x) (string-length x)]
        [(hash? x) (hash-count x)]
        [else (length x)]))
(define (avg x)
  (let ([n (count x)])
    (if (= n 0) 0
        (/ (for/fold ([s 0.0]) ([v x]) (+ s (real->double-flonum v))) n))))
(define (min-list xs)
  (cond [(null? xs) 0]
        [(for/and ([v xs]) (number? v)) (apply min xs)]
        [(for/and ([v xs]) (string? v)) (for/fold ([m (car xs)]) ([v (cdr xs)]) (if (string<? v m) v m))]
        [else (error "unsupported min operands")]))
(define (_add a b)
  (cond [(and (number? a) (number? b)) (+ a b)]
        [(and (string? a) (string? b)) (string-append a b)]
        [(and (list? a) (list? b)) (append a b)]
        [else (error "unsupported + operands")]))
(define (_div a b)
  (cond [(and (integer? a) (integer? b)) (quotient a b)]
        [else (/ a b)]))

(define (expect cond) (unless cond (error "expect failed")))
(define (_fetch url opts)
  (define opts (or opts (hash)))
  (define method (hash-ref opts 'method "GET"))
  (define args (list "curl" "-s" "-X" method))
  (when (hash-has-key? opts 'headers)
    (for ([k (hash-keys (hash-ref opts 'headers))])
      (set! args (append args (list "-H" (format "~a: ~a" k (hash-ref (hash-ref opts 'headers) k)))))))
  (when (hash-has-key? opts 'query)
    (define q (hash-ref opts 'query))
    (define qs (string-join (for/list ([k (hash-keys q)]) (format "~a=~a" k (hash-ref q k))) "&"))
    (set! url (string-append url (if (regexp-match? #px"\\?" url) "&" "?") qs)))
  (when (hash-has-key? opts 'body)
    (set! args (append args (list "-d" (jsexpr->string (hash-ref opts 'body))))) )
  (when (hash-has-key? opts 'timeout)
    (set! args (append args (list "--max-time" (format "~a" (hash-ref opts 'timeout))))) )
  (set! args (append args (list url)))
  (define out (with-output-to-string (lambda () (apply system* args))))
  (string->jsexpr out))

(define (_load path opts)
  (define opts (or opts (hash)))
  (define fmt (hash-ref opts 'format "json"))
  (define text (if path (call-with-input-file path port->string) (port->string (current-input-port))))
  (cond [(string=? fmt "jsonl") (for/list ([l (in-lines (open-input-string text))] #:unless (regexp-match? #px"^\\s*$" l)) (string->jsexpr l))]
        [(string=? fmt "json") (let ([d (string->jsexpr text)]) (if (list? d) d (list d)))]
        [else '()]))

(define (_save rows path opts)
  (define opts (or opts (hash)))
  (define fmt (hash-ref opts 'format "json"))
  (define out (if path (open-output-file path #:exists 'replace) (current-output-port)))
  (cond [(string=? fmt "jsonl") (for ([r rows]) (fprintf out "~a\n" (jsexpr->string r)))]
        [(string=? fmt "json") (fprintf out "~a" (jsexpr->string rows))])
  (when path (close-output-port out)))

;; grouping helpers
(struct _Group (key Items) #:mutable)

(define (_group_by src keyfn)
  (define groups (make-hash))
  (define order '())
  (for ([it src])
    (define k (keyfn it))
    (define ks (format "~a" k))
    (define g (hash-ref groups ks #f))
    (unless g
      (set! g (_Group k '()))
      (hash-set! groups ks g)
      (set! order (append order (list ks))))
    (set-_Group-Items! g (append (_Group-Items g) (list it))))
  (for/list ([ks order]) (hash-ref groups ks)))
(define (to-jsexpr v)
  (cond [(hash? v)
         (for/hash ([(k val) (in-hash v)])
           (values (if (string? k) (string->symbol k) k) (to-jsexpr val)))]
        [(list? v)
         (map to-jsexpr v)]
        [else v]))(define (test_TPCDS_Q1_empty)
  (unless (equal? (count result) 0) (error "expect failed"))
)

(define store_returns (list ))
(define date_dim (list ))
(define store (list ))
(define customer (list ))
(define customer_total_return (let ([groups (let ([map (make-hash)] [order '()])
  (for ([sr store_returns])
    (for ([d date_dim])
      (when (equal? (hash-ref sr "sr_returned_date_sk") (hash-ref d "d_date_sk"))
        (when (equal? (hash-ref d "d_year") 1998)
          (let* ([key (hash "customer_sk" (hash-ref sr "sr_customer_sk") "store_sk" (hash-ref sr "sr_store_sk"))]
                 [ks (format "~a" key)]
                 [g (hash-ref map ks #f)])
            (unless g
              (set! g (_Group key '()))
              (hash-set! map ks g)
              (set! order (append order (list ks))))
            (set-_Group-Items! g (append (_Group-Items g) (list sr)))
          )
        )
      )
    )
  )
  (for/list ([ks order]) (hash-ref map ks)))]
  (let ([_res '()])
    (for ([g groups])
      (set! _res (append _res (list (hash "ctr_customer_sk" (hash-ref (hash-ref g "key") "customer_sk") "ctr_store_sk" (hash-ref (hash-ref g "key") "store_sk") "ctr_total_return" (sum (let ([_res '()])
  (for ([x g])
    (set! _res (append _res (list (hash-ref x "sr_return_amt"))))
  )
  _res))))))
    )
    _res))))
(define result (let ([_res '()])
  (for ([ctr1 customer_total_return])
    (for ([s store])
      (when (equal? (hash-ref ctr1 "ctr_store_sk") (hash-ref s "s_store_sk"))
        (for ([c customer])
          (when (equal? (hash-ref ctr1 "ctr_customer_sk") (hash-ref c "c_customer_sk"))
            (when (and (let ([la (and (string? (hash-ref ctr1 "ctr_total_return")) (string->number (hash-ref ctr1 "ctr_total_return")))] [lb (and (string? (* (avg (let ([_res '()])
  (for ([ctr2 customer_total_return])
    (when (equal? (hash-ref ctr1 "ctr_store_sk") (hash-ref ctr2 "ctr_store_sk"))
      (set! _res (append _res (list (hash-ref ctr2 "ctr_total_return"))))
    )
  )
  _res)) 1.2)) (string->number (* (avg (let ([_res '()])
  (for ([ctr2 customer_total_return])
    (when (equal? (hash-ref ctr1 "ctr_store_sk") (hash-ref ctr2 "ctr_store_sk"))
      (set! _res (append _res (list (hash-ref ctr2 "ctr_total_return"))))
    )
  )
  _res)) 1.2)))]) (if (and la lb) (> la lb) (string>? (format "~a" (hash-ref ctr1 "ctr_total_return")) (format "~a" (* (avg (let ([_res '()])
  (for ([ctr2 customer_total_return])
    (when (equal? (hash-ref ctr1 "ctr_store_sk") (hash-ref ctr2 "ctr_store_sk"))
      (set! _res (append _res (list (hash-ref ctr2 "ctr_total_return"))))
    )
  )
  _res)) 1.2))))) (equal? (hash-ref s "s_state") "TN"))
              (set! _res (append _res (list (cons (hash-ref c "c_customer_id") (hash "c_customer_id" (hash-ref c "c_customer_id"))))))
            )
          )
        )
      )
    )
  )
  (set! _res (map cdr (sort _res (lambda (a b)
    (let ([ak (car a)] [bk (car b)])
      (cond [(and (number? ak) (number? bk)) (< ak bk)]
            [(and (string? ak) (string? bk)) (string<? ak bk)]
            [else (string<? (format "~a" ak) (format "~a" bk))])))
  )))
  _res))
(displayln (jsexpr->string (to-jsexpr result)))
(test_TPCDS_Q1_empty)
