// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q48_simplified() {
        expect((result == 35L));
    }
    
    public static void Main() {
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cdemo_sk", 1L }, { "addr_sk", 1L }, { "sold_date_sk", 1L }, { "sales_price", 120.000000 }, { "net_profit", 1000.000000 }, { "quantity", 5L } }, new Dictionary<string, dynamic> { { "cdemo_sk", 2L }, { "addr_sk", 2L }, { "sold_date_sk", 1L }, { "sales_price", 60.000000 }, { "net_profit", 2000.000000 }, { "quantity", 10L } }, new Dictionary<string, dynamic> { { "cdemo_sk", 3L }, { "addr_sk", 3L }, { "sold_date_sk", 1L }, { "sales_price", 170.000000 }, { "net_profit", 10000.000000 }, { "quantity", 20L } } };
        Dictionary<string, long>[] store = new Dictionary<string, long>[] { new Dictionary<string, long> { { "s_store_sk", 1L } } };
        var customer_demographics = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cd_demo_sk", 1L }, { "cd_marital_status", "S" }, { "cd_education_status", "E1" } }, new Dictionary<string, dynamic> { { "cd_demo_sk", 2L }, { "cd_marital_status", "M" }, { "cd_education_status", "E2" } }, new Dictionary<string, dynamic> { { "cd_demo_sk", 3L }, { "cd_marital_status", "W" }, { "cd_education_status", "E3" } } };
        var customer_address = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ca_address_sk", 1L }, { "ca_country", "United States" }, { "ca_state", "TX" } }, new Dictionary<string, dynamic> { { "ca_address_sk", 2L }, { "ca_country", "United States" }, { "ca_state", "CA" } }, new Dictionary<string, dynamic> { { "ca_address_sk", 3L }, { "ca_country", "United States" }, { "ca_state", "NY" } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_year", 2000L } } };
        long year = 2000L;
        string[] states1 = new string[] { "TX" };
        string[] states2 = new string[] { "CA" };
        string[] states3 = new string[] { "NY" };
        var qty_base = new Func<List<dynamic>>(() => {
    var _res = new List<dynamic>();
    foreach (var ss in store_sales) {
        foreach (var cd in customer_demographics) {
            if (!((ss["cdemo_sk"] == cd["cd_demo_sk"]))) continue;
            foreach (var ca in customer_address) {
                if (!((ss["addr_sk"] == ca["ca_address_sk"]))) continue;
                foreach (var d in date_dim) {
                    if (!((ss["sold_date_sk"] == d["d_date_sk"]))) continue;
                    if ((d.d_year == year) && ((((((((cd.cd_marital_status == "S") && (cd.cd_education_status == "E1")) && (ss["sales_price"] >= 100.000000)) && (ss["sales_price"] <= 150.000000))) || (((((cd.cd_marital_status == "M") && (cd.cd_education_status == "E2")) && (ss["sales_price"] >= 50.000000)) && (ss["sales_price"] <= 100.000000)))) || (((((cd.cd_marital_status == "W") && (cd.cd_education_status == "E3")) && (ss["sales_price"] >= 150.000000)) && (ss["sales_price"] <= 200.000000))))) && ((((((_in(ca.ca_state, states1) && (ss["net_profit"] >= 0L)) && (ss["net_profit"] <= 2000L))) || (((_in(ca.ca_state, states2) && (ss["net_profit"] >= 150L)) && (ss["net_profit"] <= 3000L)))) || (((_in(ca.ca_state, states3) && (ss["net_profit"] >= 50L)) && (ss["net_profit"] <= 25000L)))))) {
                        _res.Add(ss["quantity"]);
                    }
                }
            }
        }
    }
    return _res;
})();
        var qty = qty_base;
        double result = _sum(qty);
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q48_simplified();
    }
    static bool _in(dynamic item, dynamic col) {
        if (col is string s && item is string sub) {
            return s.Contains(sub);
        }
        if (col is System.Collections.IDictionary d) {
            return d.Contains(item);
        }
        if (col is System.Collections.IEnumerable e) {
            foreach (var it in e) {
                if (Equals(it, item)) return true;
            }
            return false;
        }
        return false;
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
}
