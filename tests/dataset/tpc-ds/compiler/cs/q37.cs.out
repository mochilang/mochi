// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q37_simplified() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_id", "I1" }, { "i_item_desc", "Item1" }, { "i_current_price", 30.000000 } } }));
    }
    
    public static void Main() {
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_sk", 1L }, { "i_item_id", "I1" }, { "i_item_desc", "Item1" }, { "i_current_price", 30.000000 }, { "i_manufact_id", 800L } }, new Dictionary<string, dynamic> { { "i_item_sk", 2L }, { "i_item_id", "I2" }, { "i_item_desc", "Item2" }, { "i_current_price", 60.000000 }, { "i_manufact_id", 801L } } };
        Dictionary<string, long>[] inventory = new Dictionary<string, long>[] { new Dictionary<string, long> { { "inv_item_sk", 1L }, { "inv_warehouse_sk", 1L }, { "inv_date_sk", 1L }, { "inv_quantity_on_hand", 200L } }, new Dictionary<string, long> { { "inv_item_sk", 2L }, { "inv_warehouse_sk", 1L }, { "inv_date_sk", 1L }, { "inv_quantity_on_hand", 300L } } };
        var date_dim = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "d_date_sk", 1L }, { "d_date", "2000-01-15" } } };
        Dictionary<string, long>[] catalog_sales = new Dictionary<string, long>[] { new Dictionary<string, long> { { "cs_item_sk", 1L }, { "cs_sold_date_sk", 1L } } };
        var result = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var i in item) {
        if (!((i["i_current_price"] >= 20L))) continue;
        if (!((i["i_current_price"] <= 50L))) continue;
        if (!((i["i_manufact_id"] >= 800L))) continue;
        if (!((i["i_manufact_id"] <= 803L))) continue;
        foreach (var inv in inventory) {
            if (!((i["i_item_sk"] == inv["inv_item_sk"]))) continue;
            if (!((inv.inv_quantity_on_hand >= 100L))) continue;
            if (!((inv.inv_quantity_on_hand <= 500L))) continue;
            foreach (var d in date_dim) {
                if (!((inv["inv_date_sk"] == d["d_date_sk"]))) continue;
                foreach (var cs in catalog_sales) {
                    if (!((cs["cs_item_sk"] == i["i_item_sk"]))) continue;
                    var key = new Dictionary<string, dynamic> { { "id", i["i_item_id"] }, { "desc", i["i_item_desc"] }, { "price", i["i_current_price"] } };
                    var ks = Convert.ToString(key);
                    if (!groups.TryGetValue(ks, out var g)) {
                        g = new _Group(key);
                        groups[ks] = g;
                        order.Add(ks);
                    }
                    g.Items.Add(i);
                }
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    items = items.OrderBy(g => g["key"].id).ToList();
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "i_item_id", g["key"].id }, { "i_item_desc", g["key"].desc }, { "i_current_price", g["key"].price } });
    }
    return _res;
})();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q37_simplified();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
