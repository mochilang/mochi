// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q49_simplified() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "channel", "catalog" }, { "item", "A" }, { "return_ratio", 0.300000 }, { "return_rank", 1L }, { "currency_rank", 1L } }, new Dictionary<string, dynamic> { { "channel", "store" }, { "item", "A" }, { "return_ratio", 0.250000 }, { "return_rank", 1L }, { "currency_rank", 1L } }, new Dictionary<string, dynamic> { { "channel", "web" }, { "item", "A" }, { "return_ratio", 0.200000 }, { "return_rank", 1L }, { "currency_rank", 1L } }, new Dictionary<string, dynamic> { { "channel", "web" }, { "item", "B" }, { "return_ratio", 0.500000 }, { "return_rank", 2L }, { "currency_rank", 2L } } }));
    }
    
    public static void Main() {
        var web = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "item", "A" }, { "return_ratio", 0.200000 }, { "currency_ratio", 0.300000 }, { "return_rank", 1L }, { "currency_rank", 1L } }, new Dictionary<string, dynamic> { { "item", "B" }, { "return_ratio", 0.500000 }, { "currency_ratio", 0.600000 }, { "return_rank", 2L }, { "currency_rank", 2L } } };
        var catalog = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "item", "A" }, { "return_ratio", 0.300000 }, { "currency_ratio", 0.400000 }, { "return_rank", 1L }, { "currency_rank", 1L } } };
        var store = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "item", "A" }, { "return_ratio", 0.250000 }, { "currency_ratio", 0.350000 }, { "return_rank", 1L }, { "currency_rank", 1L } } };
        var tmp = (concat(new List<Dictionary<string, string>>(web.Select(w => new Dictionary<string, string> { { "channel", "web" }, { "item", w["item"] }, { "return_ratio", w["return_ratio"] }, { "return_rank", w["return_rank"] }, { "currency_rank", w["currency_rank"] } })), new List<Dictionary<string, string>>(catalog.Select(c => new Dictionary<string, string> { { "channel", "catalog" }, { "item", c["item"] }, { "return_ratio", c["return_ratio"] }, { "return_rank", c["return_rank"] }, { "currency_rank", c["currency_rank"] } })), new List<Dictionary<string, string>>(store.Select(s => new Dictionary<string, string> { { "channel", "store" }, { "item", s["item"] }, { "return_ratio", s["return_ratio"] }, { "return_rank", s["return_rank"] }, { "currency_rank", s["currency_rank"] } }))));
        var result = new List<dynamic>(tmp.OrderBy(r => new dynamic[] { r.channel, r.return_rank, r.currency_rank, r.item }).Select(r => r));
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q49_simplified();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
}
