// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q36_simplified() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_category", "Books" }, { "i_class", "C1" }, { "gross_margin", 0.200000 } }, new Dictionary<string, dynamic> { { "i_category", "Books" }, { "i_class", "C2" }, { "gross_margin", 0.250000 } }, new Dictionary<string, dynamic> { { "i_category", "Electronics" }, { "i_class", "C3" }, { "gross_margin", 0.200000 } } }));
    }
    
    public static void Main() {
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_item_sk", 1L }, { "ss_store_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_ext_sales_price", 100.000000 }, { "ss_net_profit", 20.000000 } }, new Dictionary<string, dynamic> { { "ss_item_sk", 2L }, { "ss_store_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_ext_sales_price", 200.000000 }, { "ss_net_profit", 50.000000 } }, new Dictionary<string, dynamic> { { "ss_item_sk", 3L }, { "ss_store_sk", 2L }, { "ss_sold_date_sk", 1L }, { "ss_ext_sales_price", 150.000000 }, { "ss_net_profit", 30.000000 } } };
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_sk", 1L }, { "i_category", "Books" }, { "i_class", "C1" } }, new Dictionary<string, dynamic> { { "i_item_sk", 2L }, { "i_category", "Books" }, { "i_class", "C2" } }, new Dictionary<string, dynamic> { { "i_item_sk", 3L }, { "i_category", "Electronics" }, { "i_class", "C3" } } };
        var store = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "s_store_sk", 1L }, { "s_state", "A" } }, new Dictionary<string, dynamic> { { "s_store_sk", 2L }, { "s_state", "B" } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_year", 2000L } } };
        var result = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var ss in store_sales) {
        foreach (var d in date_dim) {
            if (!((ss["ss_sold_date_sk"] == d["d_date_sk"]))) continue;
            if (!((d.d_year == 2000L))) continue;
            foreach (var i in item) {
                if (!((ss["ss_item_sk"] == i["i_item_sk"]))) continue;
                foreach (var s in store) {
                    if (!((ss["ss_store_sk"] == s["s_store_sk"]))) continue;
                    if (!((((s.s_state == "A") || (s.s_state == "B"))))) continue;
                    var key = new Dictionary<string, dynamic> { { "category", i["i_category"] }, { "class", i["i_class"] } };
                    var ks = Convert.ToString(key);
                    if (!groups.TryGetValue(ks, out var g)) {
                        g = new _Group(key);
                        groups[ks] = g;
                        order.Add(ks);
                    }
                    g.Items.Add(ss);
                }
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    items = items.OrderBy(g => new dynamic[] { g["key"].category, g["key"].class }).ToList();
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "i_category", g["key"].category }, { "i_class", g["key"].class }, { "gross_margin", (_sum(new List<dynamic>(g.Select(x => x.ss_net_profit))) / _sum(new List<dynamic>(g.Select(x => x.ss_ext_sales_price)))) } });
    }
    return _res;
})();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q36_simplified();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
