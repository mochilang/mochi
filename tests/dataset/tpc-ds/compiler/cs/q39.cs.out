// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q39_simplified() {
        expect((summary == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "w_warehouse_sk", 1L }, { "i_item_sk", 1L }, { "cov", 1.539601 } } }));
    }
    
    public static void Main() {
        Dictionary<string, long>[] inventory = new Dictionary<string, long>[] { new Dictionary<string, long> { { "inv_item_sk", 1L }, { "inv_warehouse_sk", 1L }, { "inv_date_sk", 1L }, { "inv_quantity_on_hand", 10L } }, new Dictionary<string, long> { { "inv_item_sk", 1L }, { "inv_warehouse_sk", 1L }, { "inv_date_sk", 2L }, { "inv_quantity_on_hand", 10L } }, new Dictionary<string, long> { { "inv_item_sk", 1L }, { "inv_warehouse_sk", 1L }, { "inv_date_sk", 3L }, { "inv_quantity_on_hand", 250L } } };
        Dictionary<string, long>[] item = new Dictionary<string, long>[] { new Dictionary<string, long> { { "i_item_sk", 1L } } };
        var warehouse = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "w_warehouse_sk", 1L }, { "w_warehouse_name", "W1" } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_year", 2000L }, { "d_moy", 1L } }, new Dictionary<string, long> { { "d_date_sk", 2L }, { "d_year", 2000L }, { "d_moy", 2L } }, new Dictionary<string, long> { { "d_date_sk", 3L }, { "d_year", 2000L }, { "d_moy", 3L } } };
        var monthly = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var inv in inventory) {
        foreach (var d in date_dim) {
            if (!((inv["inv_date_sk"] == d["d_date_sk"]))) continue;
            if (!((d.d_year == 2000L))) continue;
            foreach (var i in item) {
                if (!((inv["inv_item_sk"] == i["i_item_sk"]))) continue;
                foreach (var w in warehouse) {
                    if (!((inv["inv_warehouse_sk"] == w["w_warehouse_sk"]))) continue;
                    var key = new Dictionary<string, dynamic> { { "w", w["w_warehouse_sk"] }, { "i", i["i_item_sk"] }, { "month", d["d_moy"] } };
                    var ks = Convert.ToString(key);
                    if (!groups.TryGetValue(ks, out var g)) {
                        g = new _Group(key);
                        groups[ks] = g;
                        order.Add(ks);
                    }
                    g.Items.Add(inv);
                }
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "w", g["key"].w }, { "i", g["key"].i }, { "qty", _sum(new List<dynamic>(g.Select(x => x.inv_quantity_on_hand))) } });
    }
    return _res;
})();
        var grouped = new Dictionary<dynamic, dynamic> {  };
        foreach (var m in monthly) {
            string key = Convert.ToString(new Dictionary<string, dynamic> { { "w", m.w }, { "i", m.i } });
            if (_in(key, grouped)) {
                var g = _indexList(grouped, key);
                grouped[key] = new Dictionary<string, dynamic> { { "w", g.w }, { "i", g.i }, { "qtys", append(g.qtys, m.qty) } };
            } else {
                grouped[key] = new Dictionary<string, dynamic> { { "w", m.w }, { "i", m.i }, { "qtys", new dynamic[] { m.qty } } };
            }
        }
        var summary = new dynamic[] { };
        foreach (var g in values(grouped)) {
            double mean = _avg(g.qtys);
            double sumsq = 0.000000;
            foreach (var q in g.qtys) {
                sumsq = (sumsq + (((q - mean)) * ((q - mean))));
            }
            var variance = (sumsq / ((g.qtys.Length - 1L)));
            var cov = (math.sqrt(variance) / mean);
            if ((cov > 1.500000)) {
                summary = append(summary, new Dictionary<string, dynamic> { { "w_warehouse_sk", g.w }, { "i_item_sk", g.i }, { "cov", cov } });
            }
        }
        Console.WriteLine(JsonSerializer.Serialize(summary));
        test_TPCDS_Q39_simplified();
    }
    static bool _in(dynamic item, dynamic col) {
        if (col is string s && item is string sub) {
            return s.Contains(sub);
        }
        if (col is System.Collections.IDictionary d) {
            return d.Contains(item);
        }
        if (col is System.Collections.IEnumerable e) {
            foreach (var it in e) {
                if (Equals(it, item)) return true;
            }
            return false;
        }
        return false;
    }
    
    static dynamic _indexList(dynamic l, long i) {
        var list = l as System.Collections.IList;
        if (list == null) throw new Exception("index() expects list");
        if (i < 0) i += list.Count;
        if (i < 0 || i >= list.Count) throw new Exception("index out of range");
        return list[(int)i];
    }
    
    static double _avg(dynamic v) {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
