// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q45_simplified() {
        expect((records == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ca_zip", "85669" }, { "sum_ws_sales_price", 50.000000 } }, new Dictionary<string, dynamic> { { "ca_zip", "99999" }, { "sum_ws_sales_price", 30.000000 } } }));
    }
    
    public static void Main() {
        var web_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "bill_customer_sk", 1L }, { "item_sk", 1L }, { "sold_date_sk", 1L }, { "sales_price", 50.000000 } }, new Dictionary<string, dynamic> { { "bill_customer_sk", 2L }, { "item_sk", 2L }, { "sold_date_sk", 1L }, { "sales_price", 30.000000 } } };
        Dictionary<string, long>[] customer = new Dictionary<string, long>[] { new Dictionary<string, long> { { "c_customer_sk", 1L }, { "c_current_addr_sk", 1L } }, new Dictionary<string, long> { { "c_customer_sk", 2L }, { "c_current_addr_sk", 2L } } };
        var customer_address = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ca_address_sk", 1L }, { "ca_zip", "85669" } }, new Dictionary<string, dynamic> { { "ca_address_sk", 2L }, { "ca_zip", "99999" } } };
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_sk", 1L }, { "i_item_id", "I1" } }, new Dictionary<string, dynamic> { { "i_item_sk", 2L }, { "i_item_id", "I2" } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_qoy", 1L }, { "d_year", 2020L } } };
        string[] zip_list = new string[] { "85669", "86197", "88274", "83405", "86475", "85392", "85460", "80348", "81792" };
        string[] item_ids = new string[] { "I2" };
        long qoy = 1L;
        long year = 2020L;
        var base = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var ws in web_sales) {
        foreach (var c in customer) {
            if (!((ws["bill_customer_sk"] == c["c_customer_sk"]))) continue;
            foreach (var ca in customer_address) {
                if (!((c["c_current_addr_sk"] == ca["ca_address_sk"]))) continue;
                foreach (var i in item) {
                    if (!((ws["item_sk"] == i["i_item_sk"]))) continue;
                    foreach (var d in date_dim) {
                        if (!((ws["sold_date_sk"] == d["d_date_sk"]))) continue;
                        if (((_in(_sliceString(ca.ca_zip, 0L, (0L)+(5L)), zip_list) || _in(i.i_item_id, item_ids))) && (d.d_qoy == qoy) && (d.d_year == year)) {
                            var key = ca["ca_zip"];
                            var ks = Convert.ToString(key);
                            if (!groups.TryGetValue(ks, out var g)) {
                                g = new _Group(key);
                                groups[ks] = g;
                                order.Add(ks);
                            }
                            g.Items.Add(ws);
                        }
                    }
                }
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "ca_zip", g["key"] }, { "sum_ws_sales_price", _sum(new List<dynamic>(g.Select(x => x.ws.sales_price))) } });
    }
    return _res;
})();
        var records = base;
        Console.WriteLine(JsonSerializer.Serialize(records));
        test_TPCDS_Q45_simplified();
    }
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    static string _sliceString(string s, long i, long j) {
        var start = i;
        var end = j;
        var n = s.Length;
        if (start < 0) start += n;
        if (end < 0) end += n;
        if (start < 0) start = 0;
        if (end > n) end = n;
        if (end < start) end = start;
        return s.Substring((int)start, (int)(end - start));
    }
    
    static bool _in(dynamic item, dynamic col) {
        if (col is string s && item is string sub) {
            return s.Contains(sub);
        }
        if (col is System.Collections.IDictionary d) {
            return d.Contains(item);
        }
        if (col is System.Collections.IEnumerable e) {
            foreach (var it in e) {
                if (Equals(it, item)) return true;
            }
            return false;
        }
        return false;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
}
