// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:44:51Z
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;

class Program
{
    static void test_TPCDS_Q1_result(dynamic result)
    {
        expect(_equal(result, new List<dynamic> { new Dictionary<dynamic, dynamic> { { "c_customer_id", "C2" } } }));
    }

    static void Main()
    {
        var store_returns = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "sr_returned_date_sk", 1 }, { "sr_customer_sk", 1 }, { "sr_store_sk", 10 }, { "sr_return_amt", 20.000000 } }, new Dictionary<dynamic, dynamic> { { "sr_returned_date_sk", 1 }, { "sr_customer_sk", 2 }, { "sr_store_sk", 10 }, { "sr_return_amt", 50.000000 } } };
        var date_dim = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "d_date_sk", 1 }, { "d_year", 1998 } } };
        var store = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "s_store_sk", 10 }, { "s_state", "TN" } } };
        var customer = new List<dynamic> { new Dictionary<dynamic, dynamic> { { "c_customer_sk", 1 }, { "c_customer_id", "C1" } }, new Dictionary<dynamic, dynamic> { { "c_customer_sk", 2 }, { "c_customer_id", "C2" } } };
        var customer_total_return = new Func<List<dynamic>>(() =>
        {
            var groups = new Dictionary<string, _Group<dynamic, Dictionary<string, dynamic>>>();
            var order = new List<string>();
            foreach (var sr in store_returns)
            {
                foreach (var d in date_dim)
                {
                    if (!(((sr["sr_returned_date_sk"] == d["d_date_sk"]) && (d["d_year"] == 1998)))) continue;
                    var key = new Dictionary<dynamic, dynamic> { { "customer_sk", sr["sr_customer_sk"] }, { "store_sk", sr["sr_store_sk"] } };
                    var ks = Convert.ToString(key);
                    if (!groups.TryGetValue(ks, out var g))
                    {
                        g = new _Group<dynamic, Dictionary<string, dynamic>>(key);
                        groups[ks] = g;
                        order.Add(ks);
                    }
                    g.Items.Add(sr);
                }
            }
            var items = new List<_Group<dynamic, Dictionary<string, dynamic>>>();
            foreach (var ks in order) items.Add(groups[ks]);
            var _res = new List<dynamic>();
            foreach (var g in items)
            {
                _res.Add(new Dictionary<dynamic, dynamic> { { "ctr_customer_sk", g["key"].customer_sk }, { "ctr_store_sk", g["key"].store_sk }, { "ctr_total_return", _sum(g.Select(x => x["sr_return_amt"]).ToList()) } });
            }
            return _res;
        })();
        var result = new Func<List<Result>>(() =>
        {
            var _res = new List<Result>();
            foreach (var ctr1 in customer_total_return)
            {
                if (!((ctr1["ctr_total_return"] > (_avg(customer_total_return.Where(ctr2 => (ctr1["ctr_store_sk"] == ctr2["ctr_store_sk"])).Select(ctr2 => ctr2["ctr_total_return"]).ToList()) * 1.200000)))) continue;
                foreach (var s in store)
                {
                    if (!((ctr1["ctr_store_sk"] == s["s_store_sk"]))) continue;
                    if (!((s["s_state"] == "TN"))) continue;
                    foreach (var c in customer)
                    {
                        if (!((ctr1["ctr_customer_sk"] == c["c_customer_sk"]))) continue;
                        if ((ctr1["ctr_total_return"] > (_avg(customer_total_return.Where(ctr2 => (ctr1["ctr_store_sk"] == ctr2["ctr_store_sk"])).Select(ctr2 => ctr2["ctr_total_return"]).ToList()) * 1.200000)))
                        {
                            _res.Add(new Dictionary<dynamic, dynamic> { { "c_customer_id", c["c_customer_id"] } });
                        }
                    }
                }
            }
            _res = _res.OrderBy(ctr1 => ctr1["c_customer_id"]).ToList();
            return _res;
        })();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q1_result(result);
    }
    public class Result
    {
        public dynamic c_customer_id;
    }


    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _equal(dynamic a, dynamic b)
    {
        if (a is System.Collections.IEnumerable ae && b is System.Collections.IEnumerable be && a is not string && b is not string)
        {
            var ea = ae.GetEnumerator();
            var eb = be.GetEnumerator();
            while (true)
            {
                bool ha = ea.MoveNext();
                bool hb = eb.MoveNext();
                if (ha != hb) return false;
                if (!ha) break;
                if (!_equal(ea.Current, eb.Current)) return false;
            }
            return true;
        }
        if ((a is int || a is long || a is float || a is double) && (b is int || b is long || b is float || b is double))
        {
            return Convert.ToDouble(a) == Convert.ToDouble(b);
        }
        if (a != null && b != null && a.GetType() != b.GetType())
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        if (a != null && b != null && !a.GetType().IsPrimitive && !b.GetType().IsPrimitive && a is not string && b is not string)
        {
            return JsonSerializer.Serialize(a) == JsonSerializer.Serialize(b);
        }
        return Equals(a, b);
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

    public interface _IGroup { System.Collections.IEnumerable Items { get; } }
    public class _Group<TKey, TItem> : _IGroup, IEnumerable<TItem>
    {
        public TKey key;
        public List<TItem> Items = new List<TItem>();
        public _Group(TKey k) { key = k; }
        System.Collections.IEnumerable _IGroup.Items => Items;
        public IEnumerator<TItem> GetEnumerator() => Items.GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => Items.GetEnumerator();
    }

    static double _avg(dynamic v)
    {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }

}
