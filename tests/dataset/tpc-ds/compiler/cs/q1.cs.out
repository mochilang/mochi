// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q1_empty() {
        expect((result.Length == 0L));
    }
    
    public static void Main() {
        var store_returns = new dynamic[] { };
        var date_dim = new dynamic[] { };
        var store = new dynamic[] { };
        var customer = new dynamic[] { };
        var customer_total_return = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var sr in store_returns) {
        foreach (var d in date_dim) {
            if (!((sr.sr_returned_date_sk == d.d_date_sk))) continue;
            if (!((d.d_year == 1998L))) continue;
            var key = new Dictionary<string, dynamic> { { "customer_sk", sr.sr_customer_sk }, { "store_sk", sr.sr_store_sk } };
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(sr);
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "ctr_customer_sk", g.key.customer_sk }, { "ctr_store_sk", g.key.store_sk }, { "ctr_total_return", _sum(new List<dynamic>(g.Select(x => x.sr_return_amt))) } });
    }
    return _res;
})();
        var result = new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var ctr1 in customer_total_return) {
        if (!((ctr1.ctr_total_return > (_avg(new List<dynamic>(customer_total_return.Where(ctr2 => (ctr1.ctr_store_sk == ctr2.ctr_store_sk)).Select(ctr2 => ctr2.ctr_total_return))) * 1.200000)))) continue;
        foreach (var s in store) {
            if (!((ctr1.ctr_store_sk == s.s_store_sk))) continue;
            if (!((s.s_state == "TN"))) continue;
            foreach (var c in customer) {
                if (!((ctr1.ctr_customer_sk == c.c_customer_sk))) continue;
                _res.Add(new Dictionary<string, dynamic> { { "c_customer_id", c.c_customer_id } });
            }
        }
    }
    _res = _res.OrderBy(ctr1 => c.c_customer_id).ToList();
    return _res;
})();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q1_empty();
    }
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
    static double _avg(dynamic v) {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
}
