// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q77_simplified() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "channel", "catalog channel" }, { "id", 1L }, { "sales", 150.000000 }, { "returns", 7.000000 }, { "profit", 12.000000 } }, new Dictionary<string, dynamic> { { "channel", "store channel" }, { "id", 1L }, { "sales", 100.000000 }, { "returns", 5.000000 }, { "profit", 9.000000 } }, new Dictionary<string, dynamic> { { "channel", "web channel" }, { "id", 1L }, { "sales", 200.000000 }, { "returns", 10.000000 }, { "profit", 18.000000 } } }));
    }
    
    public static void Main() {
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_date", 1L } } };
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_sold_date_sk", 1L }, { "s_store_sk", 1L }, { "ss_ext_sales_price", 100.000000 }, { "ss_net_profit", 10.000000 } } };
        var store_returns = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "sr_returned_date_sk", 1L }, { "s_store_sk", 1L }, { "sr_return_amt", 5.000000 }, { "sr_net_loss", 1.000000 } } };
        var catalog_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cs_sold_date_sk", 1L }, { "cs_call_center_sk", 1L }, { "cs_ext_sales_price", 150.000000 }, { "cs_net_profit", 15.000000 } } };
        var catalog_returns = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cr_returned_date_sk", 1L }, { "cr_call_center_sk", 1L }, { "cr_return_amount", 7.000000 }, { "cr_net_loss", 3.000000 } } };
        var web_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ws_sold_date_sk", 1L }, { "ws_web_page_sk", 1L }, { "ws_ext_sales_price", 200.000000 }, { "ws_net_profit", 20.000000 } } };
        var web_returns = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "wr_returned_date_sk", 1L }, { "wr_web_page_sk", 1L }, { "wr_return_amt", 10.000000 }, { "wr_net_loss", 2.000000 } } };
        var ss = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var ss in store_sales) {
        foreach (var d in date_dim) {
            if (!((d["d_date_sk"] == ss["ss_sold_date_sk"]))) continue;
            var key = ss["s_store_sk"];
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(ss);
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "s_store_sk", g["key"] }, { "sales", _sum(new List<dynamic>(g.Select(x => x.ss.ss_ext_sales_price))) }, { "profit", _sum(new List<dynamic>(g.Select(x => x.ss.ss_net_profit))) } });
    }
    return _res;
})();
        var sr = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var sr in store_returns) {
        foreach (var d in date_dim) {
            if (!((d["d_date_sk"] == sr["sr_returned_date_sk"]))) continue;
            var key = sr["s_store_sk"];
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(sr);
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "s_store_sk", g["key"] }, { "returns", _sum(new List<dynamic>(g.Select(x => x.sr.sr_return_amt))) }, { "profit_loss", _sum(new List<dynamic>(g.Select(x => x.sr.sr_net_loss))) } });
    }
    return _res;
})();
        var cs = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var cs in catalog_sales) {
        foreach (var d in date_dim) {
            if (!((d["d_date_sk"] == cs["cs_sold_date_sk"]))) continue;
            var key = cs["cs_call_center_sk"];
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(cs);
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "cs_call_center_sk", g["key"] }, { "sales", _sum(new List<dynamic>(g.Select(x => x.cs.cs_ext_sales_price))) }, { "profit", _sum(new List<dynamic>(g.Select(x => x.cs.cs_net_profit))) } });
    }
    return _res;
})();
        var cr = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var cr in catalog_returns) {
        foreach (var d in date_dim) {
            if (!((d["d_date_sk"] == cr["cr_returned_date_sk"]))) continue;
            var key = cr["cr_call_center_sk"];
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(cr);
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "cr_call_center_sk", g["key"] }, { "returns", _sum(new List<dynamic>(g.Select(x => x.cr.cr_return_amount))) }, { "profit_loss", _sum(new List<dynamic>(g.Select(x => x.cr.cr_net_loss))) } });
    }
    return _res;
})();
        var ws = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var ws in web_sales) {
        foreach (var d in date_dim) {
            if (!((d["d_date_sk"] == ws["ws_sold_date_sk"]))) continue;
            var key = ws["ws_web_page_sk"];
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(ws);
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "wp_web_page_sk", g["key"] }, { "sales", _sum(new List<dynamic>(g.Select(x => x.ws.ws_ext_sales_price))) }, { "profit", _sum(new List<dynamic>(g.Select(x => x.ws.ws_net_profit))) } });
    }
    return _res;
})();
        var wr = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var wr in web_returns) {
        foreach (var d in date_dim) {
            if (!((d["d_date_sk"] == wr["wr_returned_date_sk"]))) continue;
            var key = wr["wr_web_page_sk"];
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(wr);
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "wp_web_page_sk", g["key"] }, { "returns", _sum(new List<dynamic>(g.Select(x => x.wr.wr_return_amt))) }, { "profit_loss", _sum(new List<dynamic>(g.Select(x => x.wr.wr_net_loss))) } });
    }
    return _res;
})();
        var per_channel = concat(new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var s in ss) {
        bool _matched = false;
        foreach (var r in sr) {
            if (!((s["s_store_sk"] == r["s_store_sk"]))) continue;
            _matched = true;
            _res.Add(new Dictionary<string, dynamic> { { "channel", "store channel" }, { "id", s["s_store_sk"] }, { "sales", s["sales"] }, { "returns", ((r == null) ? 0.000000 : r["returns"]) }, { "profit", (s["profit"] - (((r == null) ? 0.000000 : r["profit_loss"]))) } });
        }
        if (!_matched) {
            dynamic r = null;
            _res.Add(new Dictionary<string, dynamic> { { "channel", "store channel" }, { "id", s["s_store_sk"] }, { "sales", s["sales"] }, { "returns", ((r == null) ? 0.000000 : r["returns"]) }, { "profit", (s["profit"] - (((r == null) ? 0.000000 : r["profit_loss"]))) } });
        }
    }
    return _res;
})(), new Func<List<Dictionary<string, string>>>(() => {
    var _res = new List<Dictionary<string, string>>();
    foreach (var c in cs) {
        foreach (var r in cr) {
            if (!((c["cs_call_center_sk"] == r["cr_call_center_sk"]))) continue;
            _res.Add(new Dictionary<string, string> { { "channel", "catalog channel" }, { "id", c["cs_call_center_sk"] }, { "sales", c["sales"] }, { "returns", r["returns"] }, { "profit", (c["profit"] - r["profit_loss"]) } });
        }
    }
    return _res;
})(), new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var w in ws) {
        bool _matched = false;
        foreach (var r in wr) {
            if (!((w["wp_web_page_sk"] == r["wp_web_page_sk"]))) continue;
            _matched = true;
            _res.Add(new Dictionary<string, dynamic> { { "channel", "web channel" }, { "id", w["wp_web_page_sk"] }, { "sales", w["sales"] }, { "returns", ((r == null) ? 0.000000 : r["returns"]) }, { "profit", (w["profit"] - (((r == null) ? 0.000000 : r["profit_loss"]))) } });
        }
        if (!_matched) {
            dynamic r = null;
            _res.Add(new Dictionary<string, dynamic> { { "channel", "web channel" }, { "id", w["wp_web_page_sk"] }, { "sales", w["sales"] }, { "returns", ((r == null) ? 0.000000 : r["returns"]) }, { "profit", (w["profit"] - (((r == null) ? 0.000000 : r["profit_loss"]))) } });
        }
    }
    return _res;
})());
        var result = _group_by(per_channel, p => new Dictionary<string, dynamic> { { "channel", p.channel }, { "id", p.id } }).Select(g => new Dictionary<string, dynamic> { { "channel", g.key.channel }, { "id", g.key.id }, { "sales", _sum(new List<dynamic>(g.Select(x => x.p.sales))) }, { "returns", _sum(new List<dynamic>(g.Select(x => x.p.returns))) }, { "profit", _sum(new List<dynamic>(g.Select(x => x.p.profit))) } }).OrderBy(g => g.key.channel).ToList();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q77_simplified();
    }
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn) {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src) {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
}
