// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q30_simplified() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "c_customer_id", "C1" }, { "c_first_name", "John" }, { "c_last_name", "Doe" }, { "ctr_total_return", 150.000000 } } }));
    }
    
    public static void Main() {
        var web_returns = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "wr_returning_customer_sk", 1L }, { "wr_returned_date_sk", 1L }, { "wr_return_amt", 100.000000 }, { "wr_returning_addr_sk", 1L } }, new Dictionary<string, dynamic> { { "wr_returning_customer_sk", 2L }, { "wr_returned_date_sk", 1L }, { "wr_return_amt", 30.000000 }, { "wr_returning_addr_sk", 2L } }, new Dictionary<string, dynamic> { { "wr_returning_customer_sk", 1L }, { "wr_returned_date_sk", 1L }, { "wr_return_amt", 50.000000 }, { "wr_returning_addr_sk", 1L } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_year", 2000L } } };
        var customer_address = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ca_address_sk", 1L }, { "ca_state", "CA" } }, new Dictionary<string, dynamic> { { "ca_address_sk", 2L }, { "ca_state", "CA" } } };
        var customer = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "c_customer_sk", 1L }, { "c_customer_id", "C1" }, { "c_first_name", "John" }, { "c_last_name", "Doe" }, { "c_current_addr_sk", 1L } }, new Dictionary<string, dynamic> { { "c_customer_sk", 2L }, { "c_customer_id", "C2" }, { "c_first_name", "Jane" }, { "c_last_name", "Smith" }, { "c_current_addr_sk", 2L } } };
        var customer_total_return = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var wr in web_returns) {
        foreach (var d in date_dim) {
            if (!((wr["wr_returned_date_sk"] == d["d_date_sk"]))) continue;
            if (!((d.d_year == 2000L))) continue;
            foreach (var ca in customer_address) {
                if (!((wr["wr_returning_addr_sk"] == ca["ca_address_sk"]))) continue;
                if (!((ca.ca_state == "CA"))) continue;
                var key = new Dictionary<string, dynamic> { { "cust", wr["wr_returning_customer_sk"] }, { "state", ca["ca_state"] } };
                var ks = Convert.ToString(key);
                if (!groups.TryGetValue(ks, out var g)) {
                    g = new _Group(key);
                    groups[ks] = g;
                    order.Add(ks);
                }
                g.Items.Add(wr);
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "ctr_customer_sk", g["key"].cust }, { "ctr_state", g["key"].state }, { "ctr_total_return", _sum(new List<dynamic>(g.Select(x => x.wr_return_amt))) } });
    }
    return _res;
})();
        var avg_by_state = _group_by(customer_total_return, ctr => ctr["ctr_state"]).Select(g => new Dictionary<string, dynamic> { { "state", g["key"] }, { "avg_return", _avg(new List<dynamic>(g.Select(x => x.ctr_total_return))) } }).ToList();
        var result = new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var ctr in customer_total_return) {
        foreach (var avg in avg_by_state) {
            if (!((ctr["ctr_state"] == avg["state"]))) continue;
            foreach (var c in customer) {
                if (!((ctr["ctr_customer_sk"] == c["c_customer_sk"]))) continue;
                if ((ctr["ctr_total_return"] > (avg.avg_return * 1.200000))) {
                    _res.Add(new Dictionary<string, dynamic> { { "c_customer_id", c["c_customer_id"] }, { "c_first_name", c["c_first_name"] }, { "c_last_name", c["c_last_name"] }, { "ctr_total_return", ctr["ctr_total_return"] } });
                }
            }
        }
    }
    return _res;
})();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q30_simplified();
    }
    static double _avg(dynamic v) {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }
    
    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn) {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src) {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
