// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q63_simplified() {
        expect((result == 63L));
    }
    
    public static void Main() {
        Dictionary<string, long>[] sales = new Dictionary<string, long>[] { new Dictionary<string, long> { { "mgr", 1L }, { "amount", 30L } }, new Dictionary<string, long> { { "mgr", 2L }, { "amount", 33L } } };
        var by_mgr = _group_by(sales, s => new Dictionary<string, long> { { "mgr", s["mgr"] } }).Select(g => new Dictionary<string, dynamic> { { "mgr", g["key"].mgr }, { "sum_sales", _sum(new List<dynamic>(g.Select(x => x.amount))) } }).ToList();
        double result = _sum(new List<dynamic>(by_mgr.Select(x => x["sum_sales"])));
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q63_simplified();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn) {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src) {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
