// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program
{
    static void test_TPCDS_Q3_result()
    {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "d_year", 1998L }, { "brand_id", 1L }, { "brand", "Brand1" }, { "sum_agg", 10.000000 } }, new Dictionary<string, dynamic> { { "d_year", 1998L }, { "brand_id", 2L }, { "brand", "Brand2" }, { "sum_agg", 20.000000 } } }));
    }

    public static void Main()
    {
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_year", 1998L }, { "d_moy", 12L } } };
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_sold_date_sk", 1L }, { "ss_item_sk", 1L }, { "ss_ext_sales_price", 10.000000 } }, new Dictionary<string, dynamic> { { "ss_sold_date_sk", 1L }, { "ss_item_sk", 2L }, { "ss_ext_sales_price", 20.000000 } } };
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_sk", 1L }, { "i_manufact_id", 100L }, { "i_brand_id", 1L }, { "i_brand", "Brand1" } }, new Dictionary<string, dynamic> { { "i_item_sk", 2L }, { "i_manufact_id", 100L }, { "i_brand_id", 2L }, { "i_brand", "Brand2" } } };
        var result = new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var groups = new Dictionary<string, _Group>();
            var order = new List<string>();
            foreach (var dt in date_dim)
            {
                if (!((dt["d_moy"] == 12L))) continue;
                foreach (var ss in store_sales)
                {
                    if (!((dt["d_date_sk"] == ss["ss_sold_date_sk"]))) continue;
                    foreach (var i in item)
                    {
                        if (!((ss["ss_item_sk"] == i["i_item_sk"]))) continue;
                        if (!((i.i_manufact_id == 100L))) continue;
                        var key = new Dictionary<string, long> { { "d_year", dt["d_year"] }, { "brand_id", i["i_brand_id"] }, { "brand", i["i_brand"] } };
                        var ks = Convert.ToString(key);
                        if (!groups.TryGetValue(ks, out var g))
                        {
                            g = new _Group(key);
                            groups[ks] = g;
                            order.Add(ks);
                        }
                        g.Items.Add(dt);
                    }
                }
            }
            var items = new List<_Group>();
            foreach (var ks in order) items.Add(groups[ks]);
            items = items.OrderBy(g => new dynamic[] { g["key"].d_year, (-_sum(new List<dynamic>(g.Select(x => x.ss_ext_sales_price)))), g["key"].brand_id }).ToList();
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var g in items)
            {
                _res.Add(new Dictionary<string, dynamic> { { "d_year", g["key"].d_year }, { "brand_id", g["key"].brand_id }, { "brand", g["key"].brand }, { "sum_agg", _sum(new List<dynamic>(g.Select(x => x.ss_ext_sales_price))) } });
            }
            return _res;
        })();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q3_result();
    }
    public class _Group
    {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }

    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

}
