// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q35_simplified() {
        expect((groups == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ca_state", "CA" }, { "cd_gender", "M" }, { "cd_marital_status", "S" }, { "cd_dep_count", 1L }, { "cd_dep_employed_count", 1L }, { "cd_dep_college_count", 0L }, { "cnt", 1L } } }));
    }
    
    public static void Main() {
        Dictionary<string, long>[] customer = new Dictionary<string, long>[] { new Dictionary<string, long> { { "c_customer_sk", 1L }, { "c_current_addr_sk", 1L }, { "c_current_cdemo_sk", 1L } }, new Dictionary<string, long> { { "c_customer_sk", 2L }, { "c_current_addr_sk", 2L }, { "c_current_cdemo_sk", 2L } } };
        var customer_address = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ca_address_sk", 1L }, { "ca_state", "CA" } }, new Dictionary<string, dynamic> { { "ca_address_sk", 2L }, { "ca_state", "NY" } } };
        var customer_demographics = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cd_demo_sk", 1L }, { "cd_gender", "M" }, { "cd_marital_status", "S" }, { "cd_dep_count", 1L }, { "cd_dep_employed_count", 1L }, { "cd_dep_college_count", 0L } }, new Dictionary<string, dynamic> { { "cd_demo_sk", 2L }, { "cd_gender", "F" }, { "cd_marital_status", "M" }, { "cd_dep_count", 2L }, { "cd_dep_employed_count", 1L }, { "cd_dep_college_count", 1L } } };
        Dictionary<string, long>[] store_sales = new Dictionary<string, long>[] { new Dictionary<string, long> { { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1L } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_year", 2000L }, { "d_qoy", 1L } } };
        long[] purchased = new Func<List<dynamic>>(() => {
    var _res = new List<dynamic>();
    foreach (var ss in store_sales) {
        foreach (var d in date_dim) {
            if (!((ss["ss_sold_date_sk"] == d["d_date_sk"]))) continue;
            if (!((d.d_year == 2000L))) continue;
            if (!((d.d_qoy < 4L))) continue;
            _res.Add(ss["ss_customer_sk"]);
        }
    }
    return _res;
})();
        var groups = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var c in customer) {
        foreach (var ca in customer_address) {
            if (!((c["c_current_addr_sk"] == ca["ca_address_sk"]))) continue;
            foreach (var cd in customer_demographics) {
                if (!((c["c_current_cdemo_sk"] == cd["cd_demo_sk"]))) continue;
                if (_in(c["c_customer_sk"], purchased)) {
                    var key = new Dictionary<string, dynamic> { { "state", ca["ca_state"] }, { "gender", cd["cd_gender"] }, { "marital", cd["cd_marital_status"] }, { "dep", cd["cd_dep_count"] }, { "emp", cd["cd_dep_employed_count"] }, { "col", cd["cd_dep_college_count"] } };
                    var ks = Convert.ToString(key);
                    if (!groups.TryGetValue(ks, out var g)) {
                        g = new _Group(key);
                        groups[ks] = g;
                        order.Add(ks);
                    }
                    g.Items.Add(c);
                }
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "ca_state", g["key"].state }, { "cd_gender", g["key"].gender }, { "cd_marital_status", g["key"].marital }, { "cd_dep_count", g["key"].dep }, { "cd_dep_employed_count", g["key"].emp }, { "cd_dep_college_count", g["key"].col }, { "cnt", _count(g) } });
    }
    return _res;
})();
        Console.WriteLine(JsonSerializer.Serialize(groups));
        test_TPCDS_Q35_simplified();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static int _count(dynamic v) {
        if (v is string) {
            return ((string)v).Length;
        }
        if (v is System.Collections.ICollection c) {
            return c.Count;
        }
        throw new Exception("count() expects list or string");
    }
    
    static bool _in(dynamic item, dynamic col) {
        if (col is string s && item is string sub) {
            return s.Contains(sub);
        }
        if (col is System.Collections.IDictionary d) {
            return d.Contains(item);
        }
        if (col is System.Collections.IEnumerable e) {
            foreach (var it in e) {
                if (Equals(it, item)) return true;
            }
            return false;
        }
        return false;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
