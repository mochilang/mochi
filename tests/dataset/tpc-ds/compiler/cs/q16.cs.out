// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct CatalogSale
{
    public long cs_order_number;
    public long cs_ship_date_sk;
    public long cs_ship_addr_sk;
    public long cs_call_center_sk;
    public long cs_warehouse_sk;
    public double cs_ext_ship_cost;
    public double cs_net_profit;
}

public struct DateDim
{
    public long d_date_sk;
    public string d_date;
}

public struct CustomerAddress
{
    public long ca_address_sk;
    public string ca_state;
}

public struct CallCenter
{
    public long cc_call_center_sk;
    public string cc_county;
}

public struct CatalogReturn
{
    public long cr_order_number;
}

public class Program
{
    static dynamic[] distinct(dynamic[] xs)
    {
        var out = new dynamic[] { };
        foreach (var x in xs)
        {
            if ((!contains(out, x)))
            {
                out = append(out, x);
            }
        }
        return out;
    }

    static void test_TPCDS_Q16_shipping()
    {
        expect((filtered == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "order_count", 1L }, { "total_shipping_cost", 5.000000 }, { "total_net_profit", 20.000000 } } }));
    }

    public static void Main()
    {
        var catalog_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cs_order_number", 1L }, { "cs_ship_date_sk", 1L }, { "cs_ship_addr_sk", 1L }, { "cs_call_center_sk", 1L }, { "cs_warehouse_sk", 1L }, { "cs_ext_ship_cost", 5.000000 }, { "cs_net_profit", 20.000000 } }, new Dictionary<string, dynamic> { { "cs_order_number", 1L }, { "cs_ship_date_sk", 1L }, { "cs_ship_addr_sk", 1L }, { "cs_call_center_sk", 1L }, { "cs_warehouse_sk", 2L }, { "cs_ext_ship_cost", 0.000000 }, { "cs_net_profit", 0.000000 } } };
        var date_dim = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "d_date_sk", 1L }, { "d_date", "2000-03-01" } } };
        var customer_address = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ca_address_sk", 1L }, { "ca_state", "CA" } } };
        var call_center = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cc_call_center_sk", 1L }, { "cc_county", "CountyA" } } };
        var catalog_returns = new dynamic[] { };
        var filtered = new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var groups = new Dictionary<string, _Group>();
            var order = new List<string>();
            foreach (var cs1 in catalog_sales)
            {
                foreach (var d in date_dim)
                {
                    if (!((((cs1["cs_ship_date_sk"] == d["d_date_sk"]) && (d["d_date"] >= "2000-03-01")) && (d["d_date"] <= "2000-04-30")))) continue;
                    foreach (var ca in customer_address)
                    {
                        if (!(((cs1["cs_ship_addr_sk"] == ca["ca_address_sk"]) && (ca["ca_state"] == "CA")))) continue;
                        foreach (var cc in call_center)
                        {
                            if (!(((cs1["cs_call_center_sk"] == cc["cc_call_center_sk"]) && (cc["cc_county"] == "CountyA")))) continue;
                            if (exists(new List<dynamic>(catalog_sales.Where(cs2 => (cs1["cs_order_number"] == cs2["cs_order_number"]) && (cs1["cs_warehouse_sk"] != cs2["cs_warehouse_sk"])).Select(cs2 => cs2))) && (exists(new List<dynamic>(catalog_returns.Where(cr => (cs1["cs_order_number"] == cr.cr_order_number)).Select(cr => cr))) == false))
                            {
                                var key = new Dictionary<dynamic, dynamic> { };
                                var ks = Convert.ToString(key);
                                if (!groups.TryGetValue(ks, out var g))
                                {
                                    g = new _Group(key);
                                    groups[ks] = g;
                                    order.Add(ks);
                                }
                                g.Items.Add(cs1);
                            }
                        }
                    }
                }
            }
            var items = new List<_Group>();
            foreach (var ks in order) items.Add(groups[ks]);
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var g in items)
            {
                _res.Add(new Dictionary<string, dynamic> { { "order_count", distinct(new List<dynamic>(g.Select(x => x.cs_order_number))).Length }, { "total_shipping_cost", _sum(new List<dynamic>(g.Select(x => x.cs_ext_ship_cost))) }, { "total_net_profit", _sum(new List<dynamic>(g.Select(x => x.cs_net_profit))) } });
            }
            return _res;
        })();
        Console.WriteLine(JsonSerializer.Serialize(filtered));
        test_TPCDS_Q16_shipping();
    }
    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

    public class _Group
    {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }

}
