// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct StoreSale
{
    public long ss_sold_date_sk;
    public long ss_item_sk;
    public long ss_customer_sk;
    public long ss_ticket_number;
    public long ss_quantity;
    public long ss_store_sk;
}

public struct StoreReturn
{
    public long sr_returned_date_sk;
    public long sr_customer_sk;
    public long sr_item_sk;
    public long sr_ticket_number;
    public long sr_return_quantity;
}

public struct CatalogSale
{
    public long cs_sold_date_sk;
    public long cs_item_sk;
    public long cs_bill_customer_sk;
    public long cs_quantity;
}

public struct DateDim
{
    public long d_date_sk;
    public string d_quarter_name;
}

public struct Store
{
    public long s_store_sk;
    public string s_state;
}

public struct Item
{
    public long i_item_sk;
    public string i_item_id;
    public string i_item_desc;
}

public class Program
{
    static void test_TPCDS_Q17_stats()
    {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_id", "I1" }, { "i_item_desc", "Item 1" }, { "s_state", "CA" }, { "store_sales_quantitycount", 1L }, { "store_sales_quantityave", 10.000000 }, { "store_sales_quantitystdev", 0.000000 }, { "store_sales_quantitycov", 0.000000 }, { "store_returns_quantitycount", 1L }, { "store_returns_quantityave", 2.000000 }, { "store_returns_quantitystdev", 0.000000 }, { "store_returns_quantitycov", 0.000000 }, { "catalog_sales_quantitycount", 1L }, { "catalog_sales_quantityave", 5.000000 }, { "catalog_sales_quantitystdev", 0.000000 }, { "catalog_sales_quantitycov", 0.000000 } } }));
    }

    public static void Main()
    {
        Dictionary<string, long>[] store_sales = new Dictionary<string, long>[] { new Dictionary<string, long> { { "ss_sold_date_sk", 1L }, { "ss_item_sk", 1L }, { "ss_customer_sk", 1L }, { "ss_ticket_number", 1L }, { "ss_quantity", 10L }, { "ss_store_sk", 1L } } };
        Dictionary<string, long>[] store_returns = new Dictionary<string, long>[] { new Dictionary<string, long> { { "sr_returned_date_sk", 2L }, { "sr_customer_sk", 1L }, { "sr_item_sk", 1L }, { "sr_ticket_number", 1L }, { "sr_return_quantity", 2L } } };
        Dictionary<string, long>[] catalog_sales = new Dictionary<string, long>[] { new Dictionary<string, long> { { "cs_sold_date_sk", 3L }, { "cs_item_sk", 1L }, { "cs_bill_customer_sk", 1L }, { "cs_quantity", 5L } } };
        var date_dim = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "d_date_sk", 1L }, { "d_quarter_name", "1998Q1" } }, new Dictionary<string, dynamic> { { "d_date_sk", 2L }, { "d_quarter_name", "1998Q2" } }, new Dictionary<string, dynamic> { { "d_date_sk", 3L }, { "d_quarter_name", "1998Q3" } } };
        var store = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "s_store_sk", 1L }, { "s_state", "CA" } } };
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_sk", 1L }, { "i_item_id", "I1" }, { "i_item_desc", "Item 1" } } };
        Dictionary<string, long>[] joined = new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var ss in store_sales)
            {
                foreach (var sr in store_returns)
                {
                    if (!((((ss["ss_customer_sk"] == sr["sr_customer_sk"]) && (ss["ss_item_sk"] == sr["sr_item_sk"])) && (ss["ss_ticket_number"] == sr["sr_ticket_number"])))) continue;
                    foreach (var cs in catalog_sales)
                    {
                        if (!(((sr["sr_customer_sk"] == cs["cs_bill_customer_sk"]) && (sr["sr_item_sk"] == cs["cs_item_sk"])))) continue;
                        foreach (var d1 in date_dim)
                        {
                            if (!(((ss["ss_sold_date_sk"] == d1["d_date_sk"]) && (d1["d_quarter_name"] == "1998Q1")))) continue;
                            foreach (var d2 in date_dim)
                            {
                                if (!(((sr["sr_returned_date_sk"] == d2["d_date_sk"]) && _in(d2["d_quarter_name"], new string[] { "1998Q1", "1998Q2", "1998Q3" })))) continue;
                                foreach (var d3 in date_dim)
                                {
                                    if (!(((cs["cs_sold_date_sk"] == d3["d_date_sk"]) && _in(d3["d_quarter_name"], new string[] { "1998Q1", "1998Q2", "1998Q3" })))) continue;
                                    foreach (var s in store)
                                    {
                                        if (!((ss["ss_store_sk"] == s["s_store_sk"]))) continue;
                                        foreach (var i in item)
                                        {
                                            if (!((ss["ss_item_sk"] == i["i_item_sk"]))) continue;
                                            _res.Add(new Dictionary<string, long> { { "qty", ss["ss_quantity"] }, { "ret", sr["sr_return_quantity"] }, { "csq", cs["cs_quantity"] }, { "i_item_id", i["i_item_id"] }, { "i_item_desc", i["i_item_desc"] }, { "s_state", s["s_state"] } });
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return _res;
        })();
        var result = _group_by(joined, j => new Dictionary<string, long> { { "i_item_id", j["i_item_id"] }, { "i_item_desc", j["i_item_desc"] }, { "s_state", j["s_state"] } }).Select(g => new Dictionary<string, dynamic> { { "i_item_id", g["key"].i_item_id }, { "i_item_desc", g["key"].i_item_desc }, { "s_state", g["key"].s_state }, { "store_sales_quantitycount", _count(new List<dynamic>(g.Select(_ => _))) }, { "store_sales_quantityave", _avg(new List<dynamic>(g.Select(x => x.qty))) }, { "store_sales_quantitystdev", 0.000000 }, { "store_sales_quantitycov", 0.000000 }, { "store_returns_quantitycount", _count(new List<dynamic>(g.Select(_ => _))) }, { "store_returns_quantityave", _avg(new List<dynamic>(g.Select(x => x.ret))) }, { "store_returns_quantitystdev", 0.000000 }, { "store_returns_quantitycov", 0.000000 }, { "catalog_sales_quantitycount", _count(new List<dynamic>(g.Select(_ => _))) }, { "catalog_sales_quantityave", _avg(new List<dynamic>(g.Select(x => x.csq))) }, { "catalog_sales_quantitystdev", 0.000000 }, { "catalog_sales_quantitycov", 0.000000 } }).ToList();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q17_stats();
    }
    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static bool _in(dynamic item, dynamic col)
    {
        if (col is string s && item is string sub)
        {
            return s.Contains(sub);
        }
        if (col is System.Collections.IDictionary d)
        {
            return d.Contains(item);
        }
        if (col is System.Collections.IEnumerable e)
        {
            foreach (var it in e)
            {
                if (Equals(it, item)) return true;
            }
            return false;
        }
        return false;
    }

    static int _count(dynamic v)
    {
        if (v is string)
        {
            return ((string)v).Length;
        }
        if (v is System.Collections.ICollection c)
        {
            return c.Count;
        }
        throw new Exception("count() expects list or string");
    }

    static double _avg(dynamic v)
    {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }

    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn)
    {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src)
        {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g))
            {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }

    public class _Group
    {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }

}
