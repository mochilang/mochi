// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q5_empty() {
        expect((result.Length == 0L));
    }
    
    public static void Main() {
        var store_sales = new dynamic[] { };
        var store_returns = new dynamic[] { };
        var store = new dynamic[] { };
        var catalog_sales = new dynamic[] { };
        var catalog_returns = new dynamic[] { };
        var catalog_page = new dynamic[] { };
        var web_sales = new dynamic[] { };
        var web_returns = new dynamic[] { };
        var web_site = new dynamic[] { };
        var date_dim = new dynamic[] { };
        var ss = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var ss in store_sales) {
        foreach (var d in date_dim) {
            if (!((ss.ss_sold_date_sk == d.d_date_sk))) continue;
            if (!((d.d_date >= "1998-12-01"))) continue;
            if (!((d.d_date <= "1998-12-15"))) continue;
            foreach (var s in store) {
                if (!((ss.ss_store_sk == s.s_store_sk))) continue;
                var key = s.s_store_id;
                var ks = Convert.ToString(key);
                if (!groups.TryGetValue(ks, out var g)) {
                    g = new _Group(key);
                    groups[ks] = g;
                    order.Add(ks);
                }
                g.Items.Add(ss);
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "channel", "store channel" }, { "id", ("store" + Convert.ToString(g.key)) }, { "sales", _sum(new List<dynamic>(g.Select(x => x.ss.ss_ext_sales_price))) }, { "returns", 0.000000 }, { "profit", _sum(new List<dynamic>(g.Select(x => x.ss.ss_net_profit))) }, { "profit_loss", 0.000000 } });
    }
    return _res;
})();
        var sr = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var sr in store_returns) {
        foreach (var d in date_dim) {
            if (!((sr.sr_returned_date_sk == d.d_date_sk))) continue;
            if (!((d.d_date >= "1998-12-01"))) continue;
            if (!((d.d_date <= "1998-12-15"))) continue;
            foreach (var s in store) {
                if (!((sr.sr_store_sk == s.s_store_sk))) continue;
                var key = s.s_store_id;
                var ks = Convert.ToString(key);
                if (!groups.TryGetValue(ks, out var g)) {
                    g = new _Group(key);
                    groups[ks] = g;
                    order.Add(ks);
                }
                g.Items.Add(sr);
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "channel", "store channel" }, { "id", ("store" + Convert.ToString(g.key)) }, { "sales", 0.000000 }, { "returns", _sum(new List<dynamic>(g.Select(x => x.sr.sr_return_amt))) }, { "profit", 0.000000 }, { "profit_loss", _sum(new List<dynamic>(g.Select(x => x.sr.sr_net_loss))) } });
    }
    return _res;
})();
        var cs = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var cs in catalog_sales) {
        foreach (var d in date_dim) {
            if (!((cs.cs_sold_date_sk == d.d_date_sk))) continue;
            if (!((d.d_date >= "1998-12-01"))) continue;
            if (!((d.d_date <= "1998-12-15"))) continue;
            foreach (var cp in catalog_page) {
                if (!((cs.cs_catalog_page_sk == cp.cp_catalog_page_sk))) continue;
                var key = cp.cp_catalog_page_id;
                var ks = Convert.ToString(key);
                if (!groups.TryGetValue(ks, out var g)) {
                    g = new _Group(key);
                    groups[ks] = g;
                    order.Add(ks);
                }
                g.Items.Add(cs);
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "channel", "catalog channel" }, { "id", ("catalog_page" + Convert.ToString(g.key)) }, { "sales", _sum(new List<dynamic>(g.Select(x => x.cs.cs_ext_sales_price))) }, { "returns", 0.000000 }, { "profit", _sum(new List<dynamic>(g.Select(x => x.cs.cs_net_profit))) }, { "profit_loss", 0.000000 } });
    }
    return _res;
})();
        var cr = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var cr in catalog_returns) {
        foreach (var d in date_dim) {
            if (!((cr.cr_returned_date_sk == d.d_date_sk))) continue;
            if (!((d.d_date >= "1998-12-01"))) continue;
            if (!((d.d_date <= "1998-12-15"))) continue;
            foreach (var cp in catalog_page) {
                if (!((cr.cr_catalog_page_sk == cp.cp_catalog_page_sk))) continue;
                var key = cp.cp_catalog_page_id;
                var ks = Convert.ToString(key);
                if (!groups.TryGetValue(ks, out var g)) {
                    g = new _Group(key);
                    groups[ks] = g;
                    order.Add(ks);
                }
                g.Items.Add(cr);
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "channel", "catalog channel" }, { "id", ("catalog_page" + Convert.ToString(g.key)) }, { "sales", 0.000000 }, { "returns", _sum(new List<dynamic>(g.Select(x => x.cr.cr_return_amount))) }, { "profit", 0.000000 }, { "profit_loss", _sum(new List<dynamic>(g.Select(x => x.cr.cr_net_loss))) } });
    }
    return _res;
})();
        var ws = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var ws in web_sales) {
        foreach (var d in date_dim) {
            if (!((ws.ws_sold_date_sk == d.d_date_sk))) continue;
            if (!((d.d_date >= "1998-12-01"))) continue;
            if (!((d.d_date <= "1998-12-15"))) continue;
            foreach (var w in web_site) {
                if (!((ws.ws_web_site_sk == w.web_site_sk))) continue;
                var key = w.web_site_id;
                var ks = Convert.ToString(key);
                if (!groups.TryGetValue(ks, out var g)) {
                    g = new _Group(key);
                    groups[ks] = g;
                    order.Add(ks);
                }
                g.Items.Add(ws);
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "channel", "web channel" }, { "id", ("web_site" + Convert.ToString(g.key)) }, { "sales", _sum(new List<dynamic>(g.Select(x => x.ws.ws_ext_sales_price))) }, { "returns", 0.000000 }, { "profit", _sum(new List<dynamic>(g.Select(x => x.ws.ws_net_profit))) }, { "profit_loss", 0.000000 } });
    }
    return _res;
})();
        var wr = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var wr in web_returns) {
        foreach (var ws in web_sales) {
            if (!(((wr.wr_item_sk == ws.ws_item_sk) && (wr.wr_order_number == ws.ws_order_number)))) continue;
            foreach (var d in date_dim) {
                if (!((wr.wr_returned_date_sk == d.d_date_sk))) continue;
                if (!((d.d_date >= "1998-12-01"))) continue;
                if (!((d.d_date <= "1998-12-15"))) continue;
                foreach (var w in web_site) {
                    if (!((ws.ws_web_site_sk == w.web_site_sk))) continue;
                    var key = w.web_site_id;
                    var ks = Convert.ToString(key);
                    if (!groups.TryGetValue(ks, out var g)) {
                        g = new _Group(key);
                        groups[ks] = g;
                        order.Add(ks);
                    }
                    g.Items.Add(wr);
                }
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "channel", "web channel" }, { "id", ("web_site" + Convert.ToString(g.key)) }, { "sales", 0.000000 }, { "returns", _sum(new List<dynamic>(g.Select(x => x.wr.wr_return_amt))) }, { "profit", 0.000000 }, { "profit_loss", _sum(new List<dynamic>(g.Select(x => x.wr.wr_net_loss))) } });
    }
    return _res;
})();
        var per_channel = concat(_union_all(ss, sr), _union_all(cs, cr), _union_all(ws, wr));
        var result = _group_by(per_channel, p => new Dictionary<string, dynamic> { { "channel", p.channel }, { "id", p.id } }).Select(g => new Dictionary<string, dynamic> { { "channel", g.key.channel }, { "id", g.key.id }, { "sales", _sum(new List<dynamic>(g.Select(x => x.p.sales))) }, { "returns", _sum(new List<dynamic>(g.Select(x => x.p.returns))) }, { "profit", (_sum(new List<dynamic>(g.Select(x => x.p.profit))) - _sum(new List<dynamic>(g.Select(x => x.p.profit_loss)))) } }).OrderBy(g => g.key.channel).ToList();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q5_empty();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
    static List<dynamic> _union_all(IEnumerable<dynamic> a, IEnumerable<dynamic> b) {
        var res = new List<dynamic>();
        if (a != null) foreach (var it in a) res.Add(it);
        if (b != null) foreach (var it in b) res.Add(it);
        return res;
    }
    
    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn) {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src) {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }
    
}
