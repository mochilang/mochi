// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q79_simplified() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "c_last_name", "Smith" }, { "c_first_name", "Alice" }, { "s_city", "CityA" }, { "ss_ticket_number", 1L }, { "amt", 5.000000 }, { "profit", 10.000000 } } }));
    }
    
    public static void Main() {
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_dow", 1L }, { "d_year", 1999L } } };
        var store = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "s_store_sk", 1L }, { "s_city", "CityA" }, { "s_number_employees", 250L } } };
        Dictionary<string, long>[] household_demographics = new Dictionary<string, long>[] { new Dictionary<string, long> { { "hd_demo_sk", 1L }, { "hd_dep_count", 2L }, { "hd_vehicle_count", 1L } } };
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_ticket_number", 1L }, { "ss_customer_sk", 1L }, { "ss_hdemo_sk", 1L }, { "ss_coupon_amt", 5.000000 }, { "ss_net_profit", 10.000000 } } };
        var customer = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "c_customer_sk", 1L }, { "c_last_name", "Smith" }, { "c_first_name", "Alice" } } };
        var agg = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var ss in store_sales) {
        foreach (var d in date_dim) {
            if (!((d["d_date_sk"] == ss["ss_sold_date_sk"]))) continue;
            if (!((d.d_dow == 1L))) continue;
            if (!(((((d.d_year == 1998L) || (d.d_year == 1999L)) || (d.d_year == 2000L))))) continue;
            foreach (var s in store) {
                if (!((s["s_store_sk"] == ss["ss_store_sk"]))) continue;
                if (!((s.s_number_employees >= 200L))) continue;
                if (!((s.s_number_employees <= 295L))) continue;
                foreach (var hd in household_demographics) {
                    if (!((hd["hd_demo_sk"] == ss["ss_hdemo_sk"]))) continue;
                    if (!((((hd.hd_dep_count == 2L) || (hd.hd_vehicle_count > 1L))))) continue;
                    var key = new Dictionary<string, dynamic> { { "ticket", ss["ss_ticket_number"] }, { "customer_sk", ss["ss_customer_sk"] }, { "city", s["s_city"] } };
                    var ks = Convert.ToString(key);
                    if (!groups.TryGetValue(ks, out var g)) {
                        g = new _Group(key);
                        groups[ks] = g;
                        order.Add(ks);
                    }
                    g.Items.Add(ss);
                }
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "key", g["key"] }, { "amt", _sum(new List<dynamic>(g.Select(x => x.ss.ss_coupon_amt))) }, { "profit", _sum(new List<dynamic>(g.Select(x => x.ss.ss_net_profit))) } });
    }
    return _res;
})();
        var result = new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var a in agg) {
        foreach (var c in customer) {
            if (!((c["c_customer_sk"] == a["key"].customer_sk))) continue;
            _res.Add(new Dictionary<string, dynamic> { { "c_last_name", c["c_last_name"] }, { "c_first_name", c["c_first_name"] }, { "s_city", a["key"].city }, { "ss_ticket_number", a["key"].ticket }, { "amt", a["amt"] }, { "profit", a["profit"] } });
        }
    }
    _res = _res.OrderBy(a => new dynamic[] { c.c_last_name, c.c_first_name, a["key"].city, a["profit"] }).ToList();
    return _res;
})();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q79_simplified();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
