// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct CatalogSale {
    public long cs_ship_date_sk;
    public long cs_sold_date_sk;
    public long cs_warehouse_sk;
    public long cs_ship_mode_sk;
    public long cs_call_center_sk;
}

public struct Warehouse {
    public long w_warehouse_sk;
    public string w_warehouse_name;
}

public struct ShipMode {
    public long sm_ship_mode_sk;
    public string sm_type;
}

public struct CallCenter {
    public long cc_call_center_sk;
    public string cc_name;
}

public class Program {
    static void test_TPCDS_Q99_buckets() {
        expect((grouped == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "warehouse", "Warehouse1" }, { "sm_type", "EXP" }, { "cc_name", "CC1" }, { "d30", 1L }, { "d60", 1L }, { "d90", 1L }, { "d120", 1L }, { "dmore", 1L } } }));
    }
    
    public static void Main() {
        Dictionary<string, long>[] catalog_sales = new Dictionary<string, long>[] { new Dictionary<string, long> { { "cs_ship_date_sk", 31L }, { "cs_sold_date_sk", 1L }, { "cs_warehouse_sk", 1L }, { "cs_ship_mode_sk", 1L }, { "cs_call_center_sk", 1L } }, new Dictionary<string, long> { { "cs_ship_date_sk", 51L }, { "cs_sold_date_sk", 1L }, { "cs_warehouse_sk", 1L }, { "cs_ship_mode_sk", 1L }, { "cs_call_center_sk", 1L } }, new Dictionary<string, long> { { "cs_ship_date_sk", 71L }, { "cs_sold_date_sk", 1L }, { "cs_warehouse_sk", 1L }, { "cs_ship_mode_sk", 1L }, { "cs_call_center_sk", 1L } }, new Dictionary<string, long> { { "cs_ship_date_sk", 101L }, { "cs_sold_date_sk", 1L }, { "cs_warehouse_sk", 1L }, { "cs_ship_mode_sk", 1L }, { "cs_call_center_sk", 1L } }, new Dictionary<string, long> { { "cs_ship_date_sk", 131L }, { "cs_sold_date_sk", 1L }, { "cs_warehouse_sk", 1L }, { "cs_ship_mode_sk", 1L }, { "cs_call_center_sk", 1L } } };
        var warehouse = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "w_warehouse_sk", 1L }, { "w_warehouse_name", "Warehouse1" } } };
        var ship_mode = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "sm_ship_mode_sk", 1L }, { "sm_type", "EXP" } } };
        var call_center = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cc_call_center_sk", 1L }, { "cc_name", "CC1" } } };
        var grouped = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var cs in catalog_sales) {
        foreach (var w in warehouse) {
            if (!((cs["cs_warehouse_sk"] == w["w_warehouse_sk"]))) continue;
            foreach (var sm in ship_mode) {
                if (!((cs["cs_ship_mode_sk"] == sm["sm_ship_mode_sk"]))) continue;
                foreach (var cc in call_center) {
                    if (!((cs["cs_call_center_sk"] == cc["cc_call_center_sk"]))) continue;
                    var key = new Dictionary<string, string> { { "warehouse", _sliceString(w["w_warehouse_name"], 0L, (0L)+(20L)) }, { "sm_type", sm["sm_type"] }, { "cc_name", cc["cc_name"] } };
                    var ks = Convert.ToString(key);
                    if (!groups.TryGetValue(ks, out var g)) {
                        g = new _Group(key);
                        groups[ks] = g;
                        order.Add(ks);
                    }
                    g.Items.Add(cs);
                }
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "warehouse", g["key"].warehouse }, { "sm_type", g["key"].sm_type }, { "cc_name", g["key"].cc_name }, { "d30", _count(new List<dynamic>(g.Select(x => x))) }, { "d60", _count(new List<dynamic>(g.Select(x => x))) }, { "d90", _count(new List<dynamic>(g.Select(x => x))) }, { "d120", _count(new List<dynamic>(g.Select(x => x))) }, { "dmore", _count(new List<dynamic>(g.Select(x => x))) } });
    }
    return _res;
})();
        Console.WriteLine(JsonSerializer.Serialize(grouped));
        test_TPCDS_Q99_buckets();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static int _count(dynamic v) {
        if (v is string) {
            return ((string)v).Length;
        }
        if (v is System.Collections.ICollection c) {
            return c.Count;
        }
        throw new Exception("count() expects list or string");
    }
    
    static string _sliceString(string s, long i, long j) {
        var start = i;
        var end = j;
        var n = s.Length;
        if (start < 0) start += n;
        if (end < 0) end += n;
        if (start < 0) start = 0;
        if (end > n) end = n;
        if (end < start) end = start;
        return s.Substring((int)start, (int)(end - start));
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
