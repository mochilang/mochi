// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;

public class Program {
    static void test_TPCDS_Q84_sample() {
        expect((result == 84L));
    }
    
    public static void Main() {
        var customers = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "id", 1L }, { "city", "A" }, { "cdemo", 1L } }, new Dictionary<string, dynamic> { { "id", 2L }, { "city", "A" }, { "cdemo", 2L } }, new Dictionary<string, dynamic> { { "id", 3L }, { "city", "B" }, { "cdemo", 1L } } };
        Dictionary<string, long>[] customer_demographics = new Dictionary<string, long>[] { new Dictionary<string, long> { { "cd_demo_sk", 1L } }, new Dictionary<string, long> { { "cd_demo_sk", 2L } } };
        Dictionary<string, long>[] household_demographics = new Dictionary<string, long>[] { new Dictionary<string, long> { { "hd_demo_sk", 1L }, { "income_band_sk", 1L } }, new Dictionary<string, long> { { "hd_demo_sk", 2L }, { "income_band_sk", 2L } } };
        Dictionary<string, long>[] income_band = new Dictionary<string, long>[] { new Dictionary<string, long> { { "ib_income_band_sk", 1L }, { "ib_lower_bound", 0L }, { "ib_upper_bound", 50000L } }, new Dictionary<string, long> { { "ib_income_band_sk", 2L }, { "ib_lower_bound", 50001L }, { "ib_upper_bound", 100000L } } };
        var customer_address = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ca_address_sk", 1L }, { "ca_city", "A" } }, new Dictionary<string, dynamic> { { "ca_address_sk", 2L }, { "ca_city", "B" } } };
        Dictionary<string, long>[] store_returns = new Dictionary<string, long>[] { new Dictionary<string, long> { { "sr_cdemo_sk", 1L } }, new Dictionary<string, long> { { "sr_cdemo_sk", 1L } }, new Dictionary<string, long> { { "sr_cdemo_sk", 2L } }, new Dictionary<string, long> { { "sr_cdemo_sk", 1L } } };
        long result = (80L + store_returns.Length);
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q84_sample();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
}
