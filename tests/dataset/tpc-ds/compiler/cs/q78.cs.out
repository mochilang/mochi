// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q78_simplified() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_sold_year", 1998L }, { "ss_item_sk", 1L }, { "ss_customer_sk", 1L }, { "ratio", 1.250000 }, { "store_qty", 10L }, { "store_wholesale_cost", 50.000000 }, { "store_sales_price", 100.000000 }, { "other_chan_qty", 8L }, { "other_chan_wholesale_cost", 40.000000 }, { "other_chan_sales_price", 80.000000 } } }));
    }
    
    public static void Main() {
        var ss = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_sold_year", 1998L }, { "ss_item_sk", 1L }, { "ss_customer_sk", 1L }, { "ss_qty", 10L }, { "ss_wc", 50.000000 }, { "ss_sp", 100.000000 } } };
        var ws = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ws_sold_year", 1998L }, { "ws_item_sk", 1L }, { "ws_customer_sk", 1L }, { "ws_qty", 5L }, { "ws_wc", 25.000000 }, { "ws_sp", 50.000000 } } };
        var cs = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cs_sold_year", 1998L }, { "cs_item_sk", 1L }, { "cs_customer_sk", 1L }, { "cs_qty", 3L }, { "cs_wc", 15.000000 }, { "cs_sp", 30.000000 } } };
        var result = new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var s in ss) {
        if (!((s["ss_sold_year"] == 1998L))) continue;
        foreach (var w in ws) {
            if (!((((w["ws_sold_year"] == s["ss_sold_year"]) && (w["ws_item_sk"] == s["ss_item_sk"])) && (w["ws_customer_sk"] == s["ss_customer_sk"])))) continue;
            foreach (var c in cs) {
                if (!((((c["cs_sold_year"] == s["ss_sold_year"]) && (c["cs_item_sk"] == s["ss_item_sk"])) && (c["cs_customer_sk"] == s["ss_customer_sk"])))) continue;
                if (((((((w == null) ? 0L : w.ws_qty)) > 0L) || ((((c == null) ? 0L : c.cs_qty)) > 0L)))) {
                    _res.Add(new Dictionary<string, dynamic> { { "ss_sold_year", s["ss_sold_year"] }, { "ss_item_sk", s["ss_item_sk"] }, { "ss_customer_sk", s["ss_customer_sk"] }, { "ratio", (s["ss_qty"] / (((((w == null) ? 0L : w["ws_qty"])) + (((c == null) ? 0L : c["cs_qty"]))))) }, { "store_qty", s["ss_qty"] }, { "store_wholesale_cost", s["ss_wc"] }, { "store_sales_price", s["ss_sp"] }, { "other_chan_qty", ((((w == null) ? 0L : w["ws_qty"])) + (((c == null) ? 0L : c["cs_qty"]))) }, { "other_chan_wholesale_cost", ((((w == null) ? 0.000000 : w["ws_wc"])) + (((c == null) ? 0.000000 : c["cs_wc"]))) }, { "other_chan_sales_price", ((((w == null) ? 0.000000 : w["ws_sp"])) + (((c == null) ? 0.000000 : c["cs_sp"]))) } });
                }
            }
        }
    }
    return _res;
})();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q78_simplified();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
}
