// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;

public struct Customer
{
    public long c_customer_sk;
    public string c_customer_id;
    public string c_first_name;
    public string c_last_name;
}

public struct StoreSale
{
    public long ss_customer_sk;
    public long ss_sold_date_sk;
    public double ss_ext_list_price;
}

public struct WebSale
{
    public long ws_bill_customer_sk;
    public long ws_sold_date_sk;
    public double ws_ext_list_price;
}

public class Program
{
    static void test_TPCDS_Q11_growth()
    {
        expect((result == new Dictionary<string, string>[] { new Dictionary<string, string> { { "customer_id", "C1" }, { "customer_first_name", "John" }, { "customer_last_name", "Doe" } } }));
    }

    public static void Main()
    {
        var customer = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "c_customer_sk", 1L }, { "c_customer_id", "C1" }, { "c_first_name", "John" }, { "c_last_name", "Doe" } } };
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1998L }, { "ss_ext_list_price", 60.000000 } }, new Dictionary<string, dynamic> { { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1999L }, { "ss_ext_list_price", 90.000000 } } };
        var web_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ws_bill_customer_sk", 1L }, { "ws_sold_date_sk", 1998L }, { "ws_ext_list_price", 50.000000 } }, new Dictionary<string, dynamic> { { "ws_bill_customer_sk", 1L }, { "ws_sold_date_sk", 1999L }, { "ws_ext_list_price", 150.000000 } } };
        double ss98 = _sum(new List<dynamic>(store_sales.Select(ss => ss["ss_ext_list_price"])));
        double ss99 = _sum(new List<dynamic>(store_sales.Select(ss => ss["ss_ext_list_price"])));
        double ws98 = _sum(new List<dynamic>(web_sales.Select(ws => ws["ws_ext_list_price"])));
        double ws99 = _sum(new List<dynamic>(web_sales.Select(ws => ws["ws_ext_list_price"])));
        bool growth_ok = (((ws98 > 0L) && (ss98 > 0L)) && (((ws99 / ws98)) > ((ss99 / ss98))));
        Dictionary<string, string>[] result = (growth_ok ? new Dictionary<string, string>[] { new Dictionary<string, string> { { "customer_id", "C1" }, { "customer_first_name", "John" }, { "customer_last_name", "Doe" } } } : new dynamic[] { });
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q11_growth();
    }
    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

}
