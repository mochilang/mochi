// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct StoreSale {
    public long ss_item_sk;
    public long ss_ticket_number;
    public long ss_customer_sk;
    public long ss_quantity;
    public double ss_sales_price;
}

public struct StoreReturn {
    public long sr_item_sk;
    public long sr_ticket_number;
    public long sr_reason_sk;
    public long sr_return_quantity;
}

public struct Reason {
    public long r_reason_sk;
    public string r_reason_desc;
}

public class Program {
    static void test_TPCDS_Q93_active_sales() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_customer_sk", 1L }, { "sumsales", 40.000000 } } }));
    }
    
    public static void Main() {
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_item_sk", 1L }, { "ss_ticket_number", 1L }, { "ss_customer_sk", 1L }, { "ss_quantity", 5L }, { "ss_sales_price", 10.000000 } }, new Dictionary<string, dynamic> { { "ss_item_sk", 1L }, { "ss_ticket_number", 2L }, { "ss_customer_sk", 2L }, { "ss_quantity", 3L }, { "ss_sales_price", 20.000000 } } };
        Dictionary<string, long>[] store_returns = new Dictionary<string, long>[] { new Dictionary<string, long> { { "sr_item_sk", 1L }, { "sr_ticket_number", 1L }, { "sr_reason_sk", 1L }, { "sr_return_quantity", 1L } } };
        var reason = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "r_reason_sk", 1L }, { "r_reason_desc", "ReasonA" } } };
        var t = new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var ss in store_sales) {
        foreach (var sr in store_returns) {
            if (!(((ss["ss_item_sk"] == sr["sr_item_sk"]) && (ss["ss_ticket_number"] == sr["sr_ticket_number"])))) continue;
            foreach (var r in reason) {
                if (!((sr["sr_reason_sk"] == r["r_reason_sk"]))) continue;
                if (!((r.r_reason_desc == "ReasonA"))) continue;
                _res.Add(new Dictionary<string, dynamic> { { "ss_customer_sk", ss["ss_customer_sk"] }, { "act_sales", ((sr != null) ? (((ss["ss_quantity"] - sr["sr_return_quantity"])) * ss["ss_sales_price"]) : (ss["ss_quantity"] * ss["ss_sales_price"])) } });
            }
        }
    }
    return _res;
})();
        var result = _group_by(t, x => x["ss_customer_sk"]).Select(g => new Dictionary<string, dynamic> { { "ss_customer_sk", g["key"] }, { "sumsales", _sum(new List<dynamic>(g.Select(y => y.act_sales))) } }).ToList();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q93_active_sales();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn) {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src) {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
