// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct WebSale {
    public long ws_order_number;
    public long ws_ship_date_sk;
    public long ws_warehouse_sk;
    public long ws_ship_addr_sk;
    public long ws_web_site_sk;
    public double ws_net_profit;
    public double ws_ext_ship_cost;
}

public struct WebReturn {
    public long wr_order_number;
}

public struct DateDim {
    public long d_date_sk;
    public string d_date;
}

public struct CustomerAddress {
    public long ca_address_sk;
    public string ca_state;
}

public struct WebSite {
    public long web_site_sk;
    public string web_company_name;
}

public class Program {
    static dynamic[] distinct(dynamic[] xs) {
        var out = new dynamic[] { };
        foreach (var x in xs) {
            if ((!contains(out, x))) {
                out = append(out, x);
            }
        }
        return out;
    }
    
    static void test_TPCDS_Q94_shipping() {
        expect((result == new Dictionary<string, dynamic> { { "order_count", 1L }, { "total_shipping_cost", 2.000000 }, { "total_net_profit", 5.000000 } }));
    }
    
    public static void Main() {
        var web_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ws_order_number", 1L }, { "ws_ship_date_sk", 1L }, { "ws_warehouse_sk", 1L }, { "ws_ship_addr_sk", 1L }, { "ws_web_site_sk", 1L }, { "ws_net_profit", 5.000000 }, { "ws_ext_ship_cost", 2.000000 } }, new Dictionary<string, dynamic> { { "ws_order_number", 2L }, { "ws_ship_date_sk", 1L }, { "ws_warehouse_sk", 2L }, { "ws_ship_addr_sk", 1L }, { "ws_web_site_sk", 1L }, { "ws_net_profit", 3.000000 }, { "ws_ext_ship_cost", 1.000000 } } };
        Dictionary<string, long>[] web_returns = new Dictionary<string, long>[] { new Dictionary<string, long> { { "wr_order_number", 2L } } };
        var date_dim = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "d_date_sk", 1L }, { "d_date", "2001-02-01" } } };
        var customer_address = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ca_address_sk", 1L }, { "ca_state", "CA" } } };
        var web_site = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "web_site_sk", 1L }, { "web_company_name", "pri" } } };
        var filtered = new Func<List<dynamic>>(() => {
    var _res = new List<dynamic>();
    foreach (var ws in web_sales) {
        foreach (var d in date_dim) {
            if (!((ws["ws_ship_date_sk"] == d["d_date_sk"]))) continue;
            foreach (var ca in customer_address) {
                if (!((ws["ws_ship_addr_sk"] == ca["ca_address_sk"]))) continue;
                if (!((ca.ca_state == "CA"))) continue;
                foreach (var w in web_site) {
                    if (!((ws["ws_web_site_sk"] == w["web_site_sk"]))) continue;
                    if (!((w.web_company_name == "pri"))) continue;
                    if ((_exists(new List<dynamic>(web_returns.Where(wr => (wr["wr_order_number"] == ws["ws_order_number"])).Select(wr => wr))) == false)) {
                        _res.Add(ws);
                    }
                }
            }
        }
    }
    return _res;
})();
        var result = new Dictionary<string, dynamic> { { "order_count", distinct(new List<dynamic>(filtered.Select(x => x["ws_order_number"]))).Length }, { "total_shipping_cost", _sum(new List<dynamic>(filtered.Select(x => x["ws_ext_ship_cost"]))) }, { "total_net_profit", _sum(new List<dynamic>(filtered.Select(x => x["ws_net_profit"]))) } };
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q94_shipping();
    }
    static bool _exists(dynamic v) {
        if (v is _Group g) v = g.Items;
        if (v is string s) return s.Length > 0;
        if (v is System.Collections.IDictionary d) return d.Count > 0;
        if (v is System.Collections.IEnumerable e) {
            foreach (var _ in e) return true;
            return false;
        }
        return v != null;
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
}
