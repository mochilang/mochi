// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct StoreSale {
    public long ss_item_sk;
    public long ss_sold_date_sk;
    public double ss_ext_sales_price;
}

public struct Item {
    public long i_item_sk;
    public string i_item_id;
    public string i_item_desc;
    public string i_category;
    public string i_class;
    public double i_current_price;
}

public struct DateDim {
    public long d_date_sk;
    public string d_date;
}

public class Program {
    static void test_TPCDS_Q98_revenue() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_id", "I1" }, { "i_item_desc", "desc1" }, { "i_category", "CatA" }, { "i_class", "Class1" }, { "i_current_price", 100.000000 }, { "itemrevenue", 50.000000 }, { "revenueratio", 33.333333 } }, new Dictionary<string, dynamic> { { "i_item_id", "I2" }, { "i_item_desc", "desc2" }, { "i_category", "CatB" }, { "i_class", "Class1" }, { "i_current_price", 200.000000 }, { "itemrevenue", 100.000000 }, { "revenueratio", 66.666667 } } }));
    }
    
    public static void Main() {
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_item_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_ext_sales_price", 50.000000 } }, new Dictionary<string, dynamic> { { "ss_item_sk", 2L }, { "ss_sold_date_sk", 1L }, { "ss_ext_sales_price", 100.000000 } } };
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_sk", 1L }, { "i_item_id", "I1" }, { "i_item_desc", "desc1" }, { "i_category", "CatA" }, { "i_class", "Class1" }, { "i_current_price", 100.000000 } }, new Dictionary<string, dynamic> { { "i_item_sk", 2L }, { "i_item_id", "I2" }, { "i_item_desc", "desc2" }, { "i_category", "CatB" }, { "i_class", "Class1" }, { "i_current_price", 200.000000 } } };
        var date_dim = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "d_date_sk", 1L }, { "d_date", "2000-02-01" } } };
        var grouped = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var ss in store_sales) {
        foreach (var i in item) {
            if (!((ss["ss_item_sk"] == i["i_item_sk"]))) continue;
            foreach (var d in date_dim) {
                if (!((ss["ss_sold_date_sk"] == d["d_date_sk"]))) continue;
                var key = new Dictionary<string, dynamic> { { "item_id", i["i_item_id"] }, { "item_desc", i["i_item_desc"] }, { "category", i["i_category"] }, { "class", i["i_class"] }, { "price", i["i_current_price"] } };
                var ks = Convert.ToString(key);
                if (!groups.TryGetValue(ks, out var g)) {
                    g = new _Group(key);
                    groups[ks] = g;
                    order.Add(ks);
                }
                g.Items.Add(ss);
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "i_item_id", g["key"].item_id }, { "i_item_desc", g["key"].item_desc }, { "i_category", g["key"].category }, { "i_class", g["key"].class }, { "i_current_price", g["key"].price }, { "itemrevenue", _sum(new List<dynamic>(g.Select(x => x.ss_ext_sales_price))) } });
    }
    return _res;
})();
        var totals = _group_by(grouped, g => g["i_class"]).Select(cg => new Dictionary<string, dynamic> { { "class", cg["key"] }, { "total", _sum(new List<dynamic>(cg.Select(x => x.itemrevenue))) } }).ToList();
        var result = new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in grouped) {
        foreach (var t in totals) {
            if (!((g["i_class"] == t["class"]))) continue;
            _res.Add(new Dictionary<string, dynamic> { { "i_item_id", g["i_item_id"] }, { "i_item_desc", g["i_item_desc"] }, { "i_category", g["i_category"] }, { "i_class", g["i_class"] }, { "i_current_price", g["i_current_price"] }, { "itemrevenue", g["itemrevenue"] }, { "revenueratio", ((g["itemrevenue"] * 100L) / t["total"]) } });
        }
    }
    return _res;
})();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q98_revenue();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn) {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src) {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }
    
}
