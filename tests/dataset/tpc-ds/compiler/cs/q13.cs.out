// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct StoreSale
{
    public long ss_store_sk;
    public long ss_sold_date_sk;
    public long ss_hdemo_sk;
    public long ss_cdemo_sk;
    public long ss_addr_sk;
    public double ss_sales_price;
    public double ss_net_profit;
    public long ss_quantity;
    public double ss_ext_sales_price;
    public double ss_ext_wholesale_cost;
}

public struct Store
{
    public long s_store_sk;
    public string s_state;
}

public struct CustomerDemographics
{
    public long cd_demo_sk;
    public string cd_marital_status;
    public string cd_education_status;
}

public struct HouseholdDemographics
{
    public long hd_demo_sk;
    public long hd_dep_count;
}

public struct CustomerAddress
{
    public long ca_address_sk;
    public string ca_country;
    public string ca_state;
}

public struct DateDim
{
    public long d_date_sk;
    public long d_year;
}

public class Program
{
    static void test_TPCDS_Q13_averages()
    {
        expect((result == new Dictionary<string, double>[] { new Dictionary<string, double> { { "avg_ss_quantity", 10.000000 }, { "avg_ss_ext_sales_price", 100.000000 }, { "avg_ss_ext_wholesale_cost", 50.000000 }, { "sum_ss_ext_wholesale_cost", 50.000000 } } }));
    }

    public static void Main()
    {
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_store_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_hdemo_sk", 1L }, { "ss_cdemo_sk", 1L }, { "ss_addr_sk", 1L }, { "ss_sales_price", 120.000000 }, { "ss_net_profit", 150.000000 }, { "ss_quantity", 10L }, { "ss_ext_sales_price", 100.000000 }, { "ss_ext_wholesale_cost", 50.000000 } } };
        var store = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "s_store_sk", 1L }, { "s_state", "CA" } } };
        var customer_demographics = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cd_demo_sk", 1L }, { "cd_marital_status", "M1" }, { "cd_education_status", "ES1" } } };
        Dictionary<string, long>[] household_demographics = new Dictionary<string, long>[] { new Dictionary<string, long> { { "hd_demo_sk", 1L }, { "hd_dep_count", 3L } } };
        var customer_address = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ca_address_sk", 1L }, { "ca_country", "United States" }, { "ca_state", "CA" } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_year", 2001L } } };
        var filtered = new Func<List<dynamic>>(() =>
        {
            var _res = new List<dynamic>();
            foreach (var ss in store_sales)
            {
                foreach (var s in store)
                {
                    if (!((ss["ss_store_sk"] == s["s_store_sk"]))) continue;
                    foreach (var cd in customer_demographics)
                    {
                        if (!((((ss["ss_cdemo_sk"] == cd["cd_demo_sk"]) && (cd["cd_marital_status"] == "M1")) && (cd["cd_education_status"] == "ES1")))) continue;
                        foreach (var hd in household_demographics)
                        {
                            if (!(((ss["ss_hdemo_sk"] == hd["hd_demo_sk"]) && (hd["hd_dep_count"] == 3L)))) continue;
                            foreach (var ca in customer_address)
                            {
                                if (!((((ss["ss_addr_sk"] == ca["ca_address_sk"]) && (ca["ca_country"] == "United States")) && (ca["ca_state"] == "CA")))) continue;
                                foreach (var d in date_dim)
                                {
                                    if (!(((ss["ss_sold_date_sk"] == d["d_date_sk"]) && (d["d_year"] == 2001L)))) continue;
                                    _res.Add(ss);
                                }
                            }
                        }
                    }
                }
            }
            return _res;
        })();
        Dictionary<string, double>[] result = _group_by(filtered, r => new Dictionary<dynamic, dynamic> { }).Select(g => new Dictionary<string, double> { { "avg_ss_quantity", _avg(new List<dynamic>(g.Select(x => x.ss_quantity))) }, { "avg_ss_ext_sales_price", _avg(new List<dynamic>(g.Select(x => x.ss_ext_sales_price))) }, { "avg_ss_ext_wholesale_cost", _avg(new List<dynamic>(g.Select(x => x.ss_ext_wholesale_cost))) }, { "sum_ss_ext_wholesale_cost", _sum(new List<dynamic>(g.Select(x => x.ss_ext_wholesale_cost))) } }).ToList();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q13_averages();
    }
    public class _Group
    {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }

    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static double _avg(dynamic v)
    {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn)
    {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src)
        {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g))
            {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }

}
