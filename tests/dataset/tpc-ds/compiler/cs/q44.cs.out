// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;

public class Program {
    static void test_TPCDS_Q44_simplified() {
        expect((result == new Dictionary<string, string> { { "best_performing", "ItemA" }, { "worst_performing", "ItemB" } }));
    }
    
    public static void Main() {
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_item_sk", 1L }, { "ss_store_sk", 1L }, { "ss_net_profit", 5.000000 } }, new Dictionary<string, dynamic> { { "ss_item_sk", 1L }, { "ss_store_sk", 1L }, { "ss_net_profit", 5.000000 } }, new Dictionary<string, dynamic> { { "ss_item_sk", 2L }, { "ss_store_sk", 1L }, { "ss_net_profit", (-1.000000) } } };
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_sk", 1L }, { "i_product_name", "ItemA" } }, new Dictionary<string, dynamic> { { "i_item_sk", 2L }, { "i_product_name", "ItemB" } } };
        var grouped_base = (_group_by(store_sales, ss => ss["ss_item_sk"]).Select(g => new Dictionary<string, dynamic> { { "item_sk", g["key"] }, { "avg_profit", _avg(new List<dynamic>(g.Select(x => x.ss_net_profit))) } }).ToList());
        var grouped = grouped_base;
        var best = first(new List<dynamic>(grouped.OrderBy(x => (-x["avg_profit"])).Select(x => x)));
        var worst = first(new List<dynamic>(grouped.OrderBy(x => x["avg_profit"]).Select(x => x)));
        var best_name = first(new List<dynamic>(item.Where(i => (i["i_item_sk"] == best.item_sk)).Select(i => i["i_product_name"])));
        var worst_name = first(new List<dynamic>(item.Where(i => (i["i_item_sk"] == worst.item_sk)).Select(i => i["i_product_name"])));
        var result = new Dictionary<string, dynamic> { { "best_performing", best_name }, { "worst_performing", worst_name } };
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q44_simplified();
    }
    static double _avg(dynamic v) {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }
    
    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn) {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src) {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
}
