// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct StoreSale {
    public long ss_quantity;
    public double ss_list_price;
    public double ss_coupon_amt;
    public double ss_wholesale_cost;
}

public class Program {
    static void test_TPCDS_Q28_buckets() {
        expect((result == new Dictionary<string, dynamic> { { "B1_LP", 100.000000 }, { "B1_CNT", 1L }, { "B1_CNTD", 1L }, { "B2_LP", 80.000000 }, { "B2_CNT", 1L }, { "B2_CNTD", 1L } }));
    }
    
    public static void Main() {
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_quantity", 3L }, { "ss_list_price", 100.000000 }, { "ss_coupon_amt", 50.000000 }, { "ss_wholesale_cost", 30.000000 } }, new Dictionary<string, dynamic> { { "ss_quantity", 8L }, { "ss_list_price", 80.000000 }, { "ss_coupon_amt", 10.000000 }, { "ss_wholesale_cost", 20.000000 } }, new Dictionary<string, dynamic> { { "ss_quantity", 12L }, { "ss_list_price", 60.000000 }, { "ss_coupon_amt", 5.000000 }, { "ss_wholesale_cost", 15.000000 } } };
        var bucket1 = new List<dynamic>(store_sales.Select(ss => ss));
        var bucket2 = new List<dynamic>(store_sales.Select(ss => ss));
        var result = new Dictionary<string, dynamic> { { "B1_LP", _avg(new List<dynamic>(bucket1.Select(x => x["ss_list_price"]))) }, { "B1_CNT", _count(bucket1) }, { "B1_CNTD", _count(_group_by(bucket1, x => x["ss_list_price"]).Select(g => g["key"]).ToList()) }, { "B2_LP", _avg(new List<dynamic>(bucket2.Select(x => x["ss_list_price"]))) }, { "B2_CNT", _count(bucket2) }, { "B2_CNTD", _count(_group_by(bucket2, x => x["ss_list_price"]).Select(g => g["key"]).ToList()) } };
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q28_buckets();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _avg(dynamic v) {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }
    
    static int _count(dynamic v) {
        if (v is string) {
            return ((string)v).Length;
        }
        if (v is System.Collections.ICollection c) {
            return c.Count;
        }
        throw new Exception("count() expects list or string");
    }
    
    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn) {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src) {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
