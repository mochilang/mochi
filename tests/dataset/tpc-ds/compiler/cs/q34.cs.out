// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q34_simplified() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "c_last_name", "Smith" }, { "c_first_name", "John" }, { "c_salutation", "Mr." }, { "c_preferred_cust_flag", "Y" }, { "ss_ticket_number", 1L }, { "cnt", 16L } } }));
    }
    
    public static void Main() {
        Dictionary<string, long>[] store_sales = new Dictionary<string, long>[] { new Dictionary<string, long> { { "ss_ticket_number", 1L }, { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 1L } }, new Dictionary<string, long> { { "ss_ticket_number", 1L }, { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 1L } }, new Dictionary<string, long> { { "ss_ticket_number", 1L }, { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 1L } }, new Dictionary<string, long> { { "ss_ticket_number", 1L }, { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 1L } }, new Dictionary<string, long> { { "ss_ticket_number", 1L }, { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 1L } }, new Dictionary<string, long> { { "ss_ticket_number", 1L }, { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 1L } }, new Dictionary<string, long> { { "ss_ticket_number", 1L }, { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 1L } }, new Dictionary<string, long> { { "ss_ticket_number", 1L }, { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 1L } }, new Dictionary<string, long> { { "ss_ticket_number", 1L }, { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 1L } }, new Dictionary<string, long> { { "ss_ticket_number", 1L }, { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 1L } }, new Dictionary<string, long> { { "ss_ticket_number", 1L }, { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 1L } }, new Dictionary<string, long> { { "ss_ticket_number", 1L }, { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 1L } }, new Dictionary<string, long> { { "ss_ticket_number", 1L }, { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 1L } }, new Dictionary<string, long> { { "ss_ticket_number", 1L }, { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 1L } }, new Dictionary<string, long> { { "ss_ticket_number", 1L }, { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 1L } }, new Dictionary<string, long> { { "ss_ticket_number", 1L }, { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 1L } }, new Dictionary<string, long> { { "ss_ticket_number", 2L }, { "ss_customer_sk", 2L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 2L } }, new Dictionary<string, long> { { "ss_ticket_number", 2L }, { "ss_customer_sk", 2L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 2L } }, new Dictionary<string, long> { { "ss_ticket_number", 2L }, { "ss_customer_sk", 2L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 2L } }, new Dictionary<string, long> { { "ss_ticket_number", 2L }, { "ss_customer_sk", 2L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 2L } }, new Dictionary<string, long> { { "ss_ticket_number", 2L }, { "ss_customer_sk", 2L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 2L } }, new Dictionary<string, long> { { "ss_ticket_number", 2L }, { "ss_customer_sk", 2L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 2L } }, new Dictionary<string, long> { { "ss_ticket_number", 2L }, { "ss_customer_sk", 2L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 2L } }, new Dictionary<string, long> { { "ss_ticket_number", 2L }, { "ss_customer_sk", 2L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 2L } }, new Dictionary<string, long> { { "ss_ticket_number", 2L }, { "ss_customer_sk", 2L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 2L } }, new Dictionary<string, long> { { "ss_ticket_number", 2L }, { "ss_customer_sk", 2L }, { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_hdemo_sk", 2L } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_dom", 2L }, { "d_year", 2000L } } };
        var store = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "s_store_sk", 1L }, { "s_county", "A" } } };
        var household_demographics = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "hd_demo_sk", 1L }, { "hd_buy_potential", ">10000" }, { "hd_vehicle_count", 2L }, { "hd_dep_count", 3L } }, new Dictionary<string, dynamic> { { "hd_demo_sk", 2L }, { "hd_buy_potential", ">10000" }, { "hd_vehicle_count", 2L }, { "hd_dep_count", 1L } } };
        var customer = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "c_customer_sk", 1L }, { "c_last_name", "Smith" }, { "c_first_name", "John" }, { "c_salutation", "Mr." }, { "c_preferred_cust_flag", "Y" } }, new Dictionary<string, dynamic> { { "c_customer_sk", 2L }, { "c_last_name", "Jones" }, { "c_first_name", "Alice" }, { "c_salutation", "Ms." }, { "c_preferred_cust_flag", "N" } } };
        var dn = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var ss in store_sales) {
        foreach (var d in date_dim) {
            if (!((ss["ss_sold_date_sk"] == d["d_date_sk"]))) continue;
            if (!((((d.d_dom >= 1L) && (d.d_dom <= 3L))))) continue;
            if (!((d.d_year == 2000L))) continue;
            foreach (var s in store) {
                if (!((ss["ss_store_sk"] == s["s_store_sk"]))) continue;
                if (!((s.s_county == "A"))) continue;
                foreach (var hd in household_demographics) {
                    if (!((ss["ss_hdemo_sk"] == hd["hd_demo_sk"]))) continue;
                    if (!((hd.hd_buy_potential == ">10000"))) continue;
                    if (!((hd.hd_vehicle_count > 0L))) continue;
                    if (!((((hd.hd_dep_count / hd.hd_vehicle_count)) > 1.200000))) continue;
                    var key = new Dictionary<string, long> { { "ticket", ss["ss_ticket_number"] }, { "cust", ss["ss_customer_sk"] } };
                    var ks = Convert.ToString(key);
                    if (!groups.TryGetValue(ks, out var g)) {
                        g = new _Group(key);
                        groups[ks] = g;
                        order.Add(ks);
                    }
                    g.Items.Add(ss);
                }
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "ss_ticket_number", g["key"].ticket }, { "ss_customer_sk", g["key"].cust }, { "cnt", _count(g) } });
    }
    return _res;
})();
        var result = new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var dn1 in dn) {
        if (!((dn1["cnt"] >= 15L))) continue;
        if (!((dn1["cnt"] <= 20L))) continue;
        foreach (var c in customer) {
            if (!((dn1["ss_customer_sk"] == c["c_customer_sk"]))) continue;
            _res.Add(new Dictionary<string, dynamic> { { "c_last_name", c["c_last_name"] }, { "c_first_name", c["c_first_name"] }, { "c_salutation", c["c_salutation"] }, { "c_preferred_cust_flag", c["c_preferred_cust_flag"] }, { "ss_ticket_number", dn1["ss_ticket_number"] }, { "cnt", dn1["cnt"] } });
        }
    }
    _res = _res.OrderBy(dn1 => c.c_last_name).ToList();
    return _res;
})();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q34_simplified();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static int _count(dynamic v) {
        if (v is string) {
            return ((string)v).Length;
        }
        if (v is System.Collections.ICollection c) {
            return c.Count;
        }
        throw new Exception("count() expects list or string");
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
