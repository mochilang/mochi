// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q81_sample() {
        expect((result == 81.000000));
    }
    
    public static void Main() {
        var catalog_returns = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cust", 1L }, { "state", "CA" }, { "amt", 40.000000 } }, new Dictionary<string, dynamic> { { "cust", 2L }, { "state", "CA" }, { "amt", 50.000000 } }, new Dictionary<string, dynamic> { { "cust", 3L }, { "state", "CA" }, { "amt", 81.000000 } }, new Dictionary<string, dynamic> { { "cust", 4L }, { "state", "TX" }, { "amt", 30.000000 } }, new Dictionary<string, dynamic> { { "cust", 5L }, { "state", "TX" }, { "amt", 20.000000 } } };
        var avg_list = _group_by(catalog_returns, r => r["state"]).Select(g => new Dictionary<string, dynamic> { { "state", g["key"] }, { "avg_amt", _avg(new List<dynamic>(g.Select(x => x.amt))) } }).ToList();
        var avg_state = first(new List<dynamic>(avg_list.Select(a => a)));
        var result_list = new List<dynamic>(catalog_returns.Where(r => (r["amt"] > (avg_state.avg_amt * 1.200000))).Select(r => r["amt"]));
        var result = first(result_list);
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q81_sample();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _avg(dynamic v) {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }
    
    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn) {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src) {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
