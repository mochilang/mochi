// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct Customer
{
    public long c_customer_sk;
    public long c_current_addr_sk;
    public long c_current_cdemo_sk;
}

public struct CustomerAddress
{
    public long ca_address_sk;
    public string ca_county;
}

public struct CustomerDemographics
{
    public long cd_demo_sk;
    public string cd_gender;
    public string cd_marital_status;
    public string cd_education_status;
    public long cd_purchase_estimate;
    public string cd_credit_rating;
    public long cd_dep_count;
    public long cd_dep_employed_count;
    public long cd_dep_college_count;
}

public struct StoreSale
{
    public long ss_customer_sk;
    public long ss_sold_date_sk;
}

public struct DateDim
{
    public long d_date_sk;
    public long d_year;
    public long d_moy;
}

public class Program
{
    static void test_TPCDS_Q10_demographics_count()
    {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cd_gender", "F" }, { "cd_marital_status", "M" }, { "cd_education_status", "College" }, { "cnt1", 1L }, { "cd_purchase_estimate", 5000L }, { "cnt2", 1L }, { "cd_credit_rating", "Good" }, { "cnt3", 1L }, { "cd_dep_count", 1L }, { "cnt4", 1L }, { "cd_dep_employed_count", 1L }, { "cnt5", 1L }, { "cd_dep_college_count", 0L }, { "cnt6", 1L } } }));
    }

    public static void Main()
    {
        Dictionary<string, long>[] customer = new Dictionary<string, long>[] { new Dictionary<string, long> { { "c_customer_sk", 1L }, { "c_current_addr_sk", 1L }, { "c_current_cdemo_sk", 1L } } };
        var customer_address = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ca_address_sk", 1L }, { "ca_county", "CountyA" } } };
        var customer_demographics = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cd_demo_sk", 1L }, { "cd_gender", "F" }, { "cd_marital_status", "M" }, { "cd_education_status", "College" }, { "cd_purchase_estimate", 5000L }, { "cd_credit_rating", "Good" }, { "cd_dep_count", 1L }, { "cd_dep_employed_count", 1L }, { "cd_dep_college_count", 0L } } };
        Dictionary<string, long>[] store_sales = new Dictionary<string, long>[] { new Dictionary<string, long> { { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1L } } };
        var web_sales = new dynamic[] { };
        var catalog_sales = new dynamic[] { };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_year", 2000L }, { "d_moy", 2L } } };
        var active = new Func<List<dynamic>>(() =>
        {
            var _res = new List<dynamic>();
            foreach (var c in customer)
            {
                foreach (var ca in customer_address)
                {
                    if (!(((c["c_current_addr_sk"] == ca["ca_address_sk"]) && (ca["ca_county"] == "CountyA")))) continue;
                    foreach (var cd in customer_demographics)
                    {
                        if (!((c["c_current_cdemo_sk"] == cd["cd_demo_sk"]))) continue;
                        if (exists(new Func<List<dynamic>>(() =>
                        {
                            var _res = new List<dynamic>();
                            foreach (var ss in store_sales)
                            {
                                foreach (var d in date_dim)
                                {
                                    if (!((ss["ss_sold_date_sk"] == d["d_date_sk"]))) continue;
                                    if (!((d.d_year == 2000L))) continue;
                                    if (!((d.d_moy >= 2L))) continue;
                                    if (!((d.d_moy <= 5L))) continue;
                                    if ((ss["ss_customer_sk"] == c["c_customer_sk"]))
                                    {
                                        _res.Add(ss);
                                    }
                                }
                            }
                            return _res;
                        })()))
                        {
                            _res.Add(cd);
                        }
                    }
                }
            }
            return _res;
        })();
        var result = _group_by(active, a => new Dictionary<string, dynamic> { { "gender", a["cd_gender"] }, { "marital", a["cd_marital_status"] }, { "education", a["cd_education_status"] }, { "purchase", a["cd_purchase_estimate"] }, { "credit", a["cd_credit_rating"] }, { "dep", a["cd_dep_count"] }, { "depemp", a["cd_dep_employed_count"] }, { "depcol", a["cd_dep_college_count"] } }).Select(g => new Dictionary<string, dynamic> { { "cd_gender", g["key"].gender }, { "cd_marital_status", g["key"].marital }, { "cd_education_status", g["key"].education }, { "cnt1", _count(new List<dynamic>(g.Select(_ => _))) }, { "cd_purchase_estimate", g["key"].purchase }, { "cnt2", _count(new List<dynamic>(g.Select(_ => _))) }, { "cd_credit_rating", g["key"].credit }, { "cnt3", _count(new List<dynamic>(g.Select(_ => _))) }, { "cd_dep_count", g["key"].dep }, { "cnt4", _count(new List<dynamic>(g.Select(_ => _))) }, { "cd_dep_employed_count", g["key"].depemp }, { "cnt5", _count(new List<dynamic>(g.Select(_ => _))) }, { "cd_dep_college_count", g["key"].depcol }, { "cnt6", _count(new List<dynamic>(g.Select(_ => _))) } }).ToList();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q10_demographics_count();
    }
    static int _count(dynamic v)
    {
        if (v is string)
        {
            return ((string)v).Length;
        }
        if (v is System.Collections.ICollection c)
        {
            return c.Count;
        }
        throw new Exception("count() expects list or string");
    }

    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn)
    {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src)
        {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g))
            {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }

    public class _Group
    {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }

    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

}
