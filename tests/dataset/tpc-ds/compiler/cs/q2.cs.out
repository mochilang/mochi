// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q2_empty() {
        expect((result.Length == 0L));
    }
    
    public static void Main() {
        var web_sales = new dynamic[] { };
        var catalog_sales = new dynamic[] { };
        var date_dim = new dynamic[] { };
        var wscs = _union_all((new List<Dictionary<string, dynamic>>(web_sales.Select(ws => new Dictionary<string, dynamic> { { "sold_date_sk", ws.ws_sold_date_sk }, { "sales_price", ws.ws_ext_sales_price }, { "day", ws.ws_sold_date_name } }))), (new List<Dictionary<string, dynamic>>(catalog_sales.Select(cs => new Dictionary<string, dynamic> { { "sold_date_sk", cs.cs_sold_date_sk }, { "sales_price", cs.cs_ext_sales_price }, { "day", cs.cs_sold_date_name } }))));
        var wswscs = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var w in wscs) {
        foreach (var d in date_dim) {
            if (!((w.sold_date_sk == d.d_date_sk))) continue;
            var key = new Dictionary<string, dynamic> { { "week_seq", d.d_week_seq } };
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(w);
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "d_week_seq", g.key.week_seq }, { "sun_sales", _sum(new List<dynamic>(g.Select(x => x.sales_price))) }, { "mon_sales", _sum(new List<dynamic>(g.Select(x => x.sales_price))) }, { "tue_sales", _sum(new List<dynamic>(g.Select(x => x.sales_price))) }, { "wed_sales", _sum(new List<dynamic>(g.Select(x => x.sales_price))) }, { "thu_sales", _sum(new List<dynamic>(g.Select(x => x.sales_price))) }, { "fri_sales", _sum(new List<dynamic>(g.Select(x => x.sales_price))) }, { "sat_sales", _sum(new List<dynamic>(g.Select(x => x.sales_price))) } });
    }
    return _res;
})();
        var result = new dynamic[] { };
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q2_empty();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static List<dynamic> _union_all(IEnumerable<dynamic> a, IEnumerable<dynamic> b) {
        var res = new List<dynamic>();
        if (a != null) foreach (var it in a) res.Add(it);
        if (b != null) foreach (var it in b) res.Add(it);
        return res;
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
