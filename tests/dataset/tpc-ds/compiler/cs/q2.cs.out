// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program
{
    static void test_TPCDS_Q2_result()
    {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "d_week_seq1", 1L }, { "sun_ratio", 0.500000 }, { "mon_ratio", 0.500000 } } }));
    }

    public static void Main()
    {
        var web_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ws_sold_date_sk", 1L }, { "ws_ext_sales_price", 5.000000 }, { "ws_sold_date_name", "Sunday" } }, new Dictionary<string, dynamic> { { "ws_sold_date_sk", 2L }, { "ws_ext_sales_price", 5.000000 }, { "ws_sold_date_name", "Monday" } }, new Dictionary<string, dynamic> { { "ws_sold_date_sk", 8L }, { "ws_ext_sales_price", 10.000000 }, { "ws_sold_date_name", "Sunday" } }, new Dictionary<string, dynamic> { { "ws_sold_date_sk", 9L }, { "ws_ext_sales_price", 10.000000 }, { "ws_sold_date_name", "Monday" } } };
        var catalog_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cs_sold_date_sk", 1L }, { "cs_ext_sales_price", 5.000000 }, { "cs_sold_date_name", "Sunday" } }, new Dictionary<string, dynamic> { { "cs_sold_date_sk", 2L }, { "cs_ext_sales_price", 5.000000 }, { "cs_sold_date_name", "Monday" } }, new Dictionary<string, dynamic> { { "cs_sold_date_sk", 8L }, { "cs_ext_sales_price", 10.000000 }, { "cs_sold_date_name", "Sunday" } }, new Dictionary<string, dynamic> { { "cs_sold_date_sk", 9L }, { "cs_ext_sales_price", 10.000000 }, { "cs_sold_date_name", "Monday" } } };
        var date_dim = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "d_date_sk", 1L }, { "d_week_seq", 1L }, { "d_day_name", "Sunday" }, { "d_year", 1998L } }, new Dictionary<string, dynamic> { { "d_date_sk", 2L }, { "d_week_seq", 1L }, { "d_day_name", "Monday" }, { "d_year", 1998L } }, new Dictionary<string, dynamic> { { "d_date_sk", 8L }, { "d_week_seq", 54L }, { "d_day_name", "Sunday" }, { "d_year", 1999L } }, new Dictionary<string, dynamic> { { "d_date_sk", 9L }, { "d_week_seq", 54L }, { "d_day_name", "Monday" }, { "d_year", 1999L } } };
        var wscs = _union_all((new List<Dictionary<string, dynamic>>(web_sales.Select(ws => new Dictionary<string, dynamic> { { "sold_date_sk", ws["ws_sold_date_sk"] }, { "sales_price", ws["ws_ext_sales_price"] }, { "day", ws["ws_sold_date_name"] } }))), (new List<Dictionary<string, dynamic>>(catalog_sales.Select(cs => new Dictionary<string, dynamic> { { "sold_date_sk", cs["cs_sold_date_sk"] }, { "sales_price", cs["cs_ext_sales_price"] }, { "day", cs["cs_sold_date_name"] } }))));
        var wswscs = new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var groups = new Dictionary<string, _Group>();
            var order = new List<string>();
            foreach (var w in wscs)
            {
                foreach (var d in date_dim)
                {
                    if (!((w["sold_date_sk"] == d["d_date_sk"]))) continue;
                    var key = new Dictionary<string, dynamic> { { "week_seq", d["d_week_seq"] } };
                    var ks = Convert.ToString(key);
                    if (!groups.TryGetValue(ks, out var g))
                    {
                        g = new _Group(key);
                        groups[ks] = g;
                        order.Add(ks);
                    }
                    g.Items.Add(w);
                }
            }
            var items = new List<_Group>();
            foreach (var ks in order) items.Add(groups[ks]);
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var g in items)
            {
                _res.Add(new Dictionary<string, dynamic> { { "d_week_seq", g["key"].week_seq }, { "sun_sales", _sum(new List<dynamic>(g.Select(x => x.sales_price))) }, { "mon_sales", _sum(new List<dynamic>(g.Select(x => x.sales_price))) }, { "tue_sales", _sum(new List<dynamic>(g.Select(x => x.sales_price))) }, { "wed_sales", _sum(new List<dynamic>(g.Select(x => x.sales_price))) }, { "thu_sales", _sum(new List<dynamic>(g.Select(x => x.sales_price))) }, { "fri_sales", _sum(new List<dynamic>(g.Select(x => x.sales_price))) }, { "sat_sales", _sum(new List<dynamic>(g.Select(x => x.sales_price))) } });
            }
            return _res;
        })();
        var year1 = new List<dynamic>(wswscs.Select(w => w));
        var year2 = new List<dynamic>(wswscs.Select(w => w));
        var result = new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var y in year1)
            {
                foreach (var z in year2)
                {
                    if (!((y["d_week_seq"] == (z["d_week_seq"] - 53L)))) continue;
                    _res.Add(new Dictionary<string, dynamic> { { "d_week_seq1", y["d_week_seq"] }, { "sun_ratio", (y["sun_sales"] / z["sun_sales"]) }, { "mon_ratio", (y["mon_sales"] / z["mon_sales"]) } });
                }
            }
            return _res;
        })();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q2_result();
    }
    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static List<dynamic> _union_all(IEnumerable<dynamic> a, IEnumerable<dynamic> b)
    {
        var res = new List<dynamic>();
        if (a != null) foreach (var it in a) res.Add(it);
        if (b != null) foreach (var it in b) res.Add(it);
        return res;
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

    public class _Group
    {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }

}
