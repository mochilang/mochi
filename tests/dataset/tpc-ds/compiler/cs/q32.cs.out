// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q32_simplified() {
        expect((result == 20.000000));
    }
    
    public static void Main() {
        var catalog_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cs_item_sk", 1L }, { "cs_sold_date_sk", 1L }, { "cs_ext_discount_amt", 5.000000 } }, new Dictionary<string, dynamic> { { "cs_item_sk", 1L }, { "cs_sold_date_sk", 2L }, { "cs_ext_discount_amt", 10.000000 } }, new Dictionary<string, dynamic> { { "cs_item_sk", 1L }, { "cs_sold_date_sk", 3L }, { "cs_ext_discount_amt", 20.000000 } } };
        Dictionary<string, long>[] item = new Dictionary<string, long>[] { new Dictionary<string, long> { { "i_item_sk", 1L }, { "i_manufact_id", 1L } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_year", 2000L } }, new Dictionary<string, long> { { "d_date_sk", 2L }, { "d_year", 2000L } }, new Dictionary<string, long> { { "d_date_sk", 3L }, { "d_year", 2000L } } };
        var filtered = new Func<List<dynamic>>(() => {
    var _res = new List<dynamic>();
    foreach (var cs in catalog_sales) {
        foreach (var i in item) {
            if (!((cs["cs_item_sk"] == i["i_item_sk"]))) continue;
            if (!((i.i_manufact_id == 1L))) continue;
            foreach (var d in date_dim) {
                if (!((cs["cs_sold_date_sk"] == d["d_date_sk"]))) continue;
                if (!((d.d_year == 2000L))) continue;
                _res.Add(cs["cs_ext_discount_amt"]);
            }
        }
    }
    return _res;
})();
        double avg_discount = _avg(filtered);
        double result = _sum(new List<dynamic>(filtered.Where(x => (x > (avg_discount * 1.300000))).Select(x => x)));
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q32_simplified();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _avg(dynamic v) {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
}
