// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct CatalogSale
{
    public long cs_bill_customer_sk;
    public double cs_sales_price;
    public long cs_sold_date_sk;
}

public struct Customer
{
    public long c_customer_sk;
    public long c_current_addr_sk;
}

public struct CustomerAddress
{
    public long ca_address_sk;
    public string ca_zip;
    public string ca_state;
}

public struct DateDim
{
    public long d_date_sk;
    public long d_qoy;
    public long d_year;
}

public class Program
{
    static void test_TPCDS_Q15_zip()
    {
        expect((filtered == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ca_zip", "85669" }, { "sum_sales", 600.000000 } } }));
    }

    public static void Main()
    {
        var catalog_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cs_bill_customer_sk", 1L }, { "cs_sales_price", 600.000000 }, { "cs_sold_date_sk", 1L } } };
        Dictionary<string, long>[] customer = new Dictionary<string, long>[] { new Dictionary<string, long> { { "c_customer_sk", 1L }, { "c_current_addr_sk", 1L } } };
        var customer_address = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ca_address_sk", 1L }, { "ca_zip", "85669" }, { "ca_state", "CA" } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_qoy", 1L }, { "d_year", 2000L } } };
        var filtered = new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var groups = new Dictionary<string, _Group>();
            var order = new List<string>();
            foreach (var cs in catalog_sales)
            {
                foreach (var c in customer)
                {
                    if (!((cs["cs_bill_customer_sk"] == c["c_customer_sk"]))) continue;
                    foreach (var ca in customer_address)
                    {
                        if (!((c["c_current_addr_sk"] == ca["ca_address_sk"]))) continue;
                        foreach (var d in date_dim)
                        {
                            if (!((cs["cs_sold_date_sk"] == d["d_date_sk"]))) continue;
                            if (!((d.d_qoy == 1L))) continue;
                            if (!((d.d_year == 2000L))) continue;
                            if ((((_in(substr(ca.ca_zip, 0L, 5L), new string[] { "85669", "86197", "88274", "83405", "86475", "85392", "85460", "80348", "81792" }) || _in(ca.ca_state, new string[] { "CA", "WA", "GA" })) || (cs["cs_sales_price"] > 500L))))
                            {
                                var key = new Dictionary<string, dynamic> { { "zip", ca["ca_zip"] } };
                                var ks = Convert.ToString(key);
                                if (!groups.TryGetValue(ks, out var g))
                                {
                                    g = new _Group(key);
                                    groups[ks] = g;
                                    order.Add(ks);
                                }
                                g.Items.Add(cs);
                            }
                        }
                    }
                }
            }
            var items = new List<_Group>();
            foreach (var ks in order) items.Add(groups[ks]);
            items = items.OrderBy(g => g["key"].zip).ToList();
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var g in items)
            {
                _res.Add(new Dictionary<string, dynamic> { { "ca_zip", g["key"].zip }, { "sum_sales", _sum(new List<dynamic>(g.Select(x => x.cs_sales_price))) } });
            }
            return _res;
        })();
        Console.WriteLine(JsonSerializer.Serialize(filtered));
        test_TPCDS_Q15_zip();
    }
    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

    static bool _in(dynamic item, dynamic col)
    {
        if (col is string s && item is string sub)
        {
            return s.Contains(sub);
        }
        if (col is System.Collections.IDictionary d)
        {
            return d.Contains(item);
        }
        if (col is System.Collections.IEnumerable e)
        {
            foreach (var it in e)
            {
                if (Equals(it, item)) return true;
            }
            return false;
        }
        return false;
    }

    public class _Group
    {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }

}
