// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;

public struct WebSale {
    public long ws_item_sk;
    public long ws_sold_date_sk;
    public double ws_ext_discount_amt;
}

public class Program {
    static void test_TPCDS_Q92_threshold() {
        expect((result == 4.000000));
    }
    
    public static void Main() {
        var web_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ws_item_sk", 1L }, { "ws_sold_date_sk", 1L }, { "ws_ext_discount_amt", 1.000000 } }, new Dictionary<string, dynamic> { { "ws_item_sk", 1L }, { "ws_sold_date_sk", 1L }, { "ws_ext_discount_amt", 1.000000 } }, new Dictionary<string, dynamic> { { "ws_item_sk", 1L }, { "ws_sold_date_sk", 1L }, { "ws_ext_discount_amt", 2.000000 } } };
        Dictionary<string, long>[] item = new Dictionary<string, long>[] { new Dictionary<string, long> { { "i_item_sk", 1L }, { "i_manufact_id", 1L } } };
        var date_dim = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "d_date_sk", 1L }, { "d_date", "2000-01-02" } } };
        double sum_amt = _sum(new List<dynamic>(web_sales.Select(ws => ws["ws_ext_discount_amt"])));
        double avg_amt = _avg(new List<dynamic>(web_sales.Select(ws => ws["ws_ext_discount_amt"])));
        double result = ((sum_amt > (avg_amt * 1.300000)) ? sum_amt : 0.000000);
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q92_threshold();
    }
    static double _avg(dynamic v) {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
}
