// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q76_simplified() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "channel", "store" }, { "col_name", null }, { "d_year", 1998L }, { "d_qoy", 1L }, { "i_category", "CatA" }, { "sales_cnt", 1L }, { "sales_amt", 10.000000 } }, new Dictionary<string, dynamic> { { "channel", "web" }, { "col_name", null }, { "d_year", 1998L }, { "d_qoy", 1L }, { "i_category", "CatB" }, { "sales_cnt", 1L }, { "sales_amt", 15.000000 } }, new Dictionary<string, dynamic> { { "channel", "catalog" }, { "col_name", null }, { "d_year", 1998L }, { "d_qoy", 1L }, { "i_category", "CatC" }, { "sales_cnt", 1L }, { "sales_amt", 20.000000 } } }));
    }
    
    public static void Main() {
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_year", 1998L }, { "d_qoy", 1L } } };
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_sk", 1L }, { "i_category", "CatA" } }, new Dictionary<string, dynamic> { { "i_item_sk", 2L }, { "i_category", "CatB" } }, new Dictionary<string, dynamic> { { "i_item_sk", 3L }, { "i_category", "CatC" } } };
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_customer_sk", null }, { "ss_item_sk", 1L }, { "ss_ext_sales_price", 10.000000 }, { "ss_sold_date_sk", 1L } } };
        var web_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ws_bill_customer_sk", null }, { "ws_item_sk", 2L }, { "ws_ext_sales_price", 15.000000 }, { "ws_sold_date_sk", 1L } } };
        var catalog_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cs_bill_customer_sk", null }, { "cs_item_sk", 3L }, { "cs_ext_sales_price", 20.000000 }, { "cs_sold_date_sk", 1L } } };
        var store_part = new Func<List<Dictionary<string, string>>>(() => {
    var _res = new List<Dictionary<string, string>>();
    foreach (var ss in store_sales) {
        if (!((ss["ss_customer_sk"] == null))) continue;
        foreach (var i in item) {
            if (!((i["i_item_sk"] == ss["ss_item_sk"]))) continue;
            foreach (var d in date_dim) {
                if (!((d["d_date_sk"] == ss["ss_sold_date_sk"]))) continue;
                _res.Add(new Dictionary<string, dynamic> { { "channel", "store" }, { "col_name", ss["ss_customer_sk"] }, { "d_year", d["d_year"] }, { "d_qoy", d["d_qoy"] }, { "i_category", i["i_category"] }, { "ext_sales_price", ss["ss_ext_sales_price"] } });
            }
        }
    }
    return _res;
})();
        var web_part = new Func<List<Dictionary<string, string>>>(() => {
    var _res = new List<Dictionary<string, string>>();
    foreach (var ws in web_sales) {
        if (!((ws["ws_bill_customer_sk"] == null))) continue;
        foreach (var i in item) {
            if (!((i["i_item_sk"] == ws["ws_item_sk"]))) continue;
            foreach (var d in date_dim) {
                if (!((d["d_date_sk"] == ws["ws_sold_date_sk"]))) continue;
                _res.Add(new Dictionary<string, dynamic> { { "channel", "web" }, { "col_name", ws["ws_bill_customer_sk"] }, { "d_year", d["d_year"] }, { "d_qoy", d["d_qoy"] }, { "i_category", i["i_category"] }, { "ext_sales_price", ws["ws_ext_sales_price"] } });
            }
        }
    }
    return _res;
})();
        var catalog_part = new Func<List<Dictionary<string, string>>>(() => {
    var _res = new List<Dictionary<string, string>>();
    foreach (var cs in catalog_sales) {
        if (!((cs["cs_bill_customer_sk"] == null))) continue;
        foreach (var i in item) {
            if (!((i["i_item_sk"] == cs["cs_item_sk"]))) continue;
            foreach (var d in date_dim) {
                if (!((d["d_date_sk"] == cs["cs_sold_date_sk"]))) continue;
                _res.Add(new Dictionary<string, dynamic> { { "channel", "catalog" }, { "col_name", cs["cs_bill_customer_sk"] }, { "d_year", d["d_year"] }, { "d_qoy", d["d_qoy"] }, { "i_category", i["i_category"] }, { "ext_sales_price", cs["cs_ext_sales_price"] } });
            }
        }
    }
    return _res;
})();
        var all_rows = concat(store_part, web_part, catalog_part);
        var result = _group_by(all_rows, r => new Dictionary<string, dynamic> { { "channel", r.channel }, { "col_name", r.col_name }, { "d_year", r.d_year }, { "d_qoy", r.d_qoy }, { "i_category", r.i_category } }).Select(g => new Dictionary<string, dynamic> { { "channel", g.key.channel }, { "col_name", g.key.col_name }, { "d_year", g.key.d_year }, { "d_qoy", g.key.d_qoy }, { "i_category", g.key.i_category }, { "sales_cnt", _count(g) }, { "sales_amt", _sum(new List<dynamic>(g.Select(x => x.r.ext_sales_price))) } }).OrderBy(g => g.key.channel).ToList();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q76_simplified();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static int _count(dynamic v) {
        if (v is string) {
            return ((string)v).Length;
        }
        if (v is System.Collections.ICollection c) {
            return c.Count;
        }
        throw new Exception("count() expects list or string");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn) {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src) {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
