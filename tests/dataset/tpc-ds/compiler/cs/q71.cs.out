// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q71_simplified() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_brand_id", 10L }, { "i_brand", "BrandA" }, { "t_hour", 18L }, { "t_minute", 0L }, { "ext_price", 200.000000 } }, new Dictionary<string, dynamic> { { "i_brand_id", 20L }, { "i_brand", "BrandB" }, { "t_hour", 8L }, { "t_minute", 30L }, { "ext_price", 150.000000 } }, new Dictionary<string, dynamic> { { "i_brand_id", 10L }, { "i_brand", "BrandA" }, { "t_hour", 8L }, { "t_minute", 30L }, { "ext_price", 100.000000 } } }));
    }
    
    public static void Main() {
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_sk", 1L }, { "i_brand_id", 10L }, { "i_brand", "BrandA" }, { "i_manager_id", 1L } }, new Dictionary<string, dynamic> { { "i_item_sk", 2L }, { "i_brand_id", 20L }, { "i_brand", "BrandB" }, { "i_manager_id", 1L } } };
        var time_dim = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "t_time_sk", 1L }, { "t_hour", 8L }, { "t_minute", 30L }, { "t_meal_time", "breakfast" } }, new Dictionary<string, dynamic> { { "t_time_sk", 2L }, { "t_hour", 18L }, { "t_minute", 0L }, { "t_meal_time", "dinner" } }, new Dictionary<string, dynamic> { { "t_time_sk", 3L }, { "t_hour", 12L }, { "t_minute", 0L }, { "t_meal_time", "lunch" } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_moy", 12L }, { "d_year", 1998L } } };
        var web_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ws_ext_sales_price", 100.000000 }, { "ws_sold_date_sk", 1L }, { "ws_item_sk", 1L }, { "ws_sold_time_sk", 1L } } };
        var catalog_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cs_ext_sales_price", 200.000000 }, { "cs_sold_date_sk", 1L }, { "cs_item_sk", 1L }, { "cs_sold_time_sk", 2L } } };
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_ext_sales_price", 150.000000 }, { "ss_sold_date_sk", 1L }, { "ss_item_sk", 2L }, { "ss_sold_time_sk", 1L } } };
        long month = 12L;
        long year = 1998L;
        var union_sales = concat(new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var ws in web_sales) {
        foreach (var d in date_dim) {
            if (!((d["d_date_sk"] == ws["ws_sold_date_sk"]))) continue;
            if ((d.d_moy == month) && (d.d_year == year)) {
                _res.Add(new Dictionary<string, dynamic> { { "ext_price", ws["ws_ext_sales_price"] }, { "item_sk", ws["ws_item_sk"] }, { "time_sk", ws["ws_sold_time_sk"] } });
            }
        }
    }
    return _res;
})(), new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var cs in catalog_sales) {
        foreach (var d in date_dim) {
            if (!((d["d_date_sk"] == cs["cs_sold_date_sk"]))) continue;
            if ((d.d_moy == month) && (d.d_year == year)) {
                _res.Add(new Dictionary<string, dynamic> { { "ext_price", cs["cs_ext_sales_price"] }, { "item_sk", cs["cs_item_sk"] }, { "time_sk", cs["cs_sold_time_sk"] } });
            }
        }
    }
    return _res;
})(), new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var ss in store_sales) {
        foreach (var d in date_dim) {
            if (!((d["d_date_sk"] == ss["ss_sold_date_sk"]))) continue;
            if ((d.d_moy == month) && (d.d_year == year)) {
                _res.Add(new Dictionary<string, dynamic> { { "ext_price", ss["ss_ext_sales_price"] }, { "item_sk", ss["ss_item_sk"] }, { "time_sk", ss["ss_sold_time_sk"] } });
            }
        }
    }
    return _res;
})());
        var result = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var i in item) {
        if (!((i["i_manager_id"] == 1L))) continue;
        foreach (var s in union_sales) {
            if (!((s.item_sk == i["i_item_sk"]))) continue;
            foreach (var t in time_dim) {
                if (!((t["t_time_sk"] == s.time_sk))) continue;
                if (!((((t.t_meal_time == "breakfast") || (t.t_meal_time == "dinner"))))) continue;
                var key = new Dictionary<string, dynamic> { { "brand_id", i["i_brand_id"] }, { "brand", i["i_brand"] }, { "t_hour", t["t_hour"] }, { "t_minute", t["t_minute"] } };
                var ks = Convert.ToString(key);
                if (!groups.TryGetValue(ks, out var g)) {
                    g = new _Group(key);
                    groups[ks] = g;
                    order.Add(ks);
                }
                g.Items.Add(i);
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    items = items.OrderBy(g => new double[] { (-_sum(new List<dynamic>(g.Select(x => x.s.ext_price)))), g["key"].brand_id }).ToList();
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "i_brand_id", g["key"].brand_id }, { "i_brand", g["key"].brand }, { "t_hour", g["key"].t_hour }, { "t_minute", g["key"].t_minute }, { "ext_price", _sum(new List<dynamic>(g.Select(x => x.s.ext_price))) } });
    }
    return _res;
})();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q71_simplified();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
