// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct StoreSale {
    public long ss_customer_sk;
    public long ss_item_sk;
}

public struct CatalogSale {
    public long cs_bill_customer_sk;
    public long cs_item_sk;
}

public class Program {
    static void test_TPCDS_Q97_overlap() {
        expect((((result["store_only"] == 1L) && (result["catalog_only"] == 1L)) && (result["store_and_catalog"] == 1L)));
    }
    
    public static void Main() {
        Dictionary<string, long>[] store_sales = new Dictionary<string, long>[] { new Dictionary<string, long> { { "ss_customer_sk", 1L }, { "ss_item_sk", 1L } }, new Dictionary<string, long> { { "ss_customer_sk", 2L }, { "ss_item_sk", 1L } } };
        Dictionary<string, long>[] catalog_sales = new Dictionary<string, long>[] { new Dictionary<string, long> { { "cs_bill_customer_sk", 1L }, { "cs_item_sk", 1L } }, new Dictionary<string, long> { { "cs_bill_customer_sk", 3L }, { "cs_item_sk", 2L } } };
        var ssci = _group_by(store_sales, ss => new Dictionary<string, long> { { "customer_sk", ss["ss_customer_sk"] }, { "item_sk", ss["ss_item_sk"] } }).Select(g => new Dictionary<string, dynamic> { { "customer_sk", g["key"].customer_sk }, { "item_sk", g["key"].item_sk } }).ToList();
        var csci = _group_by(catalog_sales, cs => new Dictionary<string, long> { { "customer_sk", cs["cs_bill_customer_sk"] }, { "item_sk", cs["cs_item_sk"] } }).Select(g => new Dictionary<string, dynamic> { { "customer_sk", g["key"].customer_sk }, { "item_sk", g["key"].item_sk } }).ToList();
        Dictionary<string, long>[] joined = new Func<List<Dictionary<string, long>>>(() => {
    var _res = new List<Dictionary<string, long>>();
    foreach (var s in ssci) {
        var _joinItems = new List<dynamic>(csci);
        var _matched = new bool[_joinItems.Count];
        foreach (var s in ssci) {
            bool _m = false;
            for (int i = 0; i < _joinItems.Count; i++) {
                var c = _joinItems[i];
                if (!(((s["customer_sk"] == c["customer_sk"]) && (s["item_sk"] == c["item_sk"])))) continue;
                _m = true;
                _matched[i] = true;
                _res.Add(new Dictionary<string, long> { { "store_only", (((s["customer_sk"] != null) && (c["customer_sk"] == null)) ? 1L : 0L) }, { "catalog_only", (((s["customer_sk"] == null) && (c["customer_sk"] != null)) ? 1L : 0L) }, { "both", (((s["customer_sk"] != null) && (c["customer_sk"] != null)) ? 1L : 0L) } });
            }
            if (!_m) {
                dynamic c = null;
                _res.Add(new Dictionary<string, long> { { "store_only", (((s["customer_sk"] != null) && (c["customer_sk"] == null)) ? 1L : 0L) }, { "catalog_only", (((s["customer_sk"] == null) && (c["customer_sk"] != null)) ? 1L : 0L) }, { "both", (((s["customer_sk"] != null) && (c["customer_sk"] != null)) ? 1L : 0L) } });
            }
        }
        for (int i = 0; i < _joinItems.Count; i++) {
            if (!_matched[i]) {
                dynamic s = null;
                var c = _joinItems[i];
                _res.Add(new Dictionary<string, long> { { "store_only", (((s["customer_sk"] != null) && (c["customer_sk"] == null)) ? 1L : 0L) }, { "catalog_only", (((s["customer_sk"] == null) && (c["customer_sk"] != null)) ? 1L : 0L) }, { "both", (((s["customer_sk"] != null) && (c["customer_sk"] != null)) ? 1L : 0L) } });
            }
        }
    }
    return _res;
})();
        Dictionary<string, double> result = new Dictionary<string, double> { { "store_only", _sum(new List<dynamic>(joined.Select(x => x["store_only"]))) }, { "catalog_only", _sum(new List<dynamic>(joined.Select(x => x["catalog_only"]))) }, { "store_and_catalog", _sum(new List<dynamic>(joined.Select(x => x["both"]))) } };
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q97_overlap();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn) {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src) {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
}
