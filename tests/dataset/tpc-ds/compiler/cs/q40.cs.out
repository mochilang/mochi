// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q40_simplified() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "w_state", "CA" }, { "i_item_id", "I1" }, { "sales_before", 100.000000 }, { "sales_after", 0.000000 } } }));
    }
    
    public static void Main() {
        var catalog_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "order", 1L }, { "item_sk", 1L }, { "warehouse_sk", 1L }, { "date_sk", 1L }, { "price", 100.000000 } }, new Dictionary<string, dynamic> { { "order", 2L }, { "item_sk", 1L }, { "warehouse_sk", 1L }, { "date_sk", 2L }, { "price", 150.000000 } } };
        var catalog_returns = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "order", 2L }, { "item_sk", 1L }, { "refunded", 150.000000 } } };
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "item_sk", 1L }, { "item_id", "I1" }, { "current_price", 1.200000 } } };
        var warehouse = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "warehouse_sk", 1L }, { "state", "CA" } } };
        var date_dim = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "date_sk", 1L }, { "date", "2020-01-10" } }, new Dictionary<string, dynamic> { { "date_sk", 2L }, { "date", "2020-01-20" } } };
        string sales_date = "2020-01-15";
        var records = new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var cs in catalog_sales) {
        foreach (var cr in catalog_returns) {
            if (!(((cs["order"] == cr["order"]) && (cs["item_sk"] == cr["item_sk"])))) continue;
            foreach (var w in warehouse) {
                if (!((cs["warehouse_sk"] == w["warehouse_sk"]))) continue;
                foreach (var i in item) {
                    if (!((cs["item_sk"] == i["item_sk"]))) continue;
                    if (!((i.current_price >= 0.990000))) continue;
                    if (!((i.current_price <= 1.490000))) continue;
                    foreach (var d in date_dim) {
                        if (!((cs["date_sk"] == d["date_sk"]))) continue;
                        _res.Add(new Dictionary<string, dynamic> { { "w_state", w["state"] }, { "i_item_id", i["item_id"] }, { "sold_date", d["date"] }, { "net", (cs["price"] - (((cr == null) ? 0.000000 : cr["refunded"]))) } });
                    }
                }
            }
        }
    }
    return _res;
})();
        var result = _group_by(records, r => new Dictionary<string, dynamic> { { "w_state", r["w_state"] }, { "i_item_id", r["i_item_id"] } }).Select(g => new Dictionary<string, dynamic> { { "w_state", g["key"].w_state }, { "i_item_id", g["key"].i_item_id }, { "sales_before", _sum(new List<dynamic>(g.Select(x => ((x.sold_date < sales_date) ? x.net : 0.000000)))) }, { "sales_after", _sum(new List<dynamic>(g.Select(x => ((x.sold_date >= sales_date) ? x.net : 0.000000)))) } }).ToList();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q40_simplified();
    }
    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn) {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src) {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
}
