// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q33_simplified() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_manufact_id", 1L }, { "total_sales", 150.000000 } }, new Dictionary<string, dynamic> { { "i_manufact_id", 2L }, { "total_sales", 50.000000 } } }));
    }
    
    public static void Main() {
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_sk", 1L }, { "i_manufact_id", 1L }, { "i_category", "Books" } }, new Dictionary<string, dynamic> { { "i_item_sk", 2L }, { "i_manufact_id", 2L }, { "i_category", "Books" } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_year", 2000L }, { "d_moy", 1L } } };
        Dictionary<string, long>[] customer_address = new Dictionary<string, long>[] { new Dictionary<string, long> { { "ca_address_sk", 1L }, { "ca_gmt_offset", (-5L) } }, new Dictionary<string, long> { { "ca_address_sk", 2L }, { "ca_gmt_offset", (-5L) } } };
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_item_sk", 1L }, { "ss_ext_sales_price", 100.000000 }, { "ss_sold_date_sk", 1L }, { "ss_addr_sk", 1L } }, new Dictionary<string, dynamic> { { "ss_item_sk", 2L }, { "ss_ext_sales_price", 50.000000 }, { "ss_sold_date_sk", 1L }, { "ss_addr_sk", 2L } } };
        var catalog_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cs_item_sk", 1L }, { "cs_ext_sales_price", 20.000000 }, { "cs_sold_date_sk", 1L }, { "cs_bill_addr_sk", 1L } } };
        var web_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ws_item_sk", 1L }, { "ws_ext_sales_price", 30.000000 }, { "ws_sold_date_sk", 1L }, { "ws_bill_addr_sk", 1L } } };
        long month = 1L;
        long year = 2000L;
        var union_sales = concat(new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var ss in store_sales) {
        foreach (var d in date_dim) {
            if (!((ss["ss_sold_date_sk"] == d["d_date_sk"]))) continue;
            foreach (var ca in customer_address) {
                if (!((ss["ss_addr_sk"] == ca["ca_address_sk"]))) continue;
                if (!((ca.ca_gmt_offset == ((-5L))))) continue;
                foreach (var i in item) {
                    if (!((ss["ss_item_sk"] == i["i_item_sk"]))) continue;
                    if (!((i.i_category == "Books"))) continue;
                    if ((d.d_year == year) && (d.d_moy == month)) {
                        _res.Add(new Dictionary<string, dynamic> { { "manu", i["i_manufact_id"] }, { "price", ss["ss_ext_sales_price"] } });
                    }
                }
            }
        }
    }
    return _res;
})(), new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var cs in catalog_sales) {
        foreach (var d in date_dim) {
            if (!((cs["cs_sold_date_sk"] == d["d_date_sk"]))) continue;
            foreach (var ca in customer_address) {
                if (!((cs["cs_bill_addr_sk"] == ca["ca_address_sk"]))) continue;
                if (!((ca.ca_gmt_offset == ((-5L))))) continue;
                foreach (var i in item) {
                    if (!((cs["cs_item_sk"] == i["i_item_sk"]))) continue;
                    if (!((i.i_category == "Books"))) continue;
                    if ((d.d_year == year) && (d.d_moy == month)) {
                        _res.Add(new Dictionary<string, dynamic> { { "manu", i["i_manufact_id"] }, { "price", cs["cs_ext_sales_price"] } });
                    }
                }
            }
        }
    }
    return _res;
})(), new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var ws in web_sales) {
        foreach (var d in date_dim) {
            if (!((ws["ws_sold_date_sk"] == d["d_date_sk"]))) continue;
            foreach (var ca in customer_address) {
                if (!((ws["ws_bill_addr_sk"] == ca["ca_address_sk"]))) continue;
                if (!((ca.ca_gmt_offset == ((-5L))))) continue;
                foreach (var i in item) {
                    if (!((ws["ws_item_sk"] == i["i_item_sk"]))) continue;
                    if (!((i.i_category == "Books"))) continue;
                    if ((d.d_year == year) && (d.d_moy == month)) {
                        _res.Add(new Dictionary<string, dynamic> { { "manu", i["i_manufact_id"] }, { "price", ws["ws_ext_sales_price"] } });
                    }
                }
            }
        }
    }
    return _res;
})());
        var result = _group_by(union_sales, s => s.manu).Select(g => new Dictionary<string, dynamic> { { "i_manufact_id", g.key }, { "total_sales", _sum(new List<dynamic>(g.Select(x => x.price))) } }).OrderBy(g => (-_sum(new List<dynamic>(g.Select(x => x.price))))).ToList();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q33_simplified();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn) {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src) {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
