// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q42_simplified() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "d_year", 2020L }, { "i_category_id", 200L }, { "i_category", "CatB" }, { "sum_ss_ext_sales_price", 20.000000 } }, new Dictionary<string, dynamic> { { "d_year", 2020L }, { "i_category_id", 100L }, { "i_category", "CatA" }, { "sum_ss_ext_sales_price", 10.000000 } } }));
    }
    
    public static void Main() {
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "sold_date_sk", 1L }, { "item_sk", 1L }, { "ext_sales_price", 10.000000 } }, new Dictionary<string, dynamic> { { "sold_date_sk", 1L }, { "item_sk", 2L }, { "ext_sales_price", 20.000000 } }, new Dictionary<string, dynamic> { { "sold_date_sk", 2L }, { "item_sk", 1L }, { "ext_sales_price", 15.000000 } } };
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_sk", 1L }, { "i_manager_id", 1L }, { "i_category_id", 100L }, { "i_category", "CatA" } }, new Dictionary<string, dynamic> { { "i_item_sk", 2L }, { "i_manager_id", 2L }, { "i_category_id", 200L }, { "i_category", "CatB" } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_year", 2020L }, { "d_moy", 5L } }, new Dictionary<string, long> { { "d_date_sk", 2L }, { "d_year", 2021L }, { "d_moy", 5L } } };
        long month = 5L;
        long year = 2020L;
        Dictionary<string, long>[] records = new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var dt in date_dim) {
        foreach (var ss in store_sales) {
            if (!((ss["sold_date_sk"] == dt["d_date_sk"]))) continue;
            foreach (var it in item) {
                if (!((ss["item_sk"] == it["i_item_sk"]))) continue;
                if (!((it.i_manager_id == 1L))) continue;
                if ((dt["d_moy"] == month) && (dt["d_year"] == year)) {
                    _res.Add(new Dictionary<string, long> { { "d_year", dt["d_year"] }, { "i_category_id", it["i_category_id"] }, { "i_category", it["i_category"] }, { "price", ss["ext_sales_price"] } });
                }
            }
        }
    }
    return _res;
})();
        var base = _group_by(records, r => new Dictionary<string, long> { { "d_year", r["d_year"] }, { "i_category_id", r["i_category_id"] }, { "i_category", r["i_category"] } }).Select(g => new Dictionary<string, dynamic> { { "d_year", g["key"].d_year }, { "i_category_id", g["key"].i_category_id }, { "i_category", g["key"].i_category }, { "sum_ss_ext_sales_price", _sum(new List<dynamic>(g.Select(x => x.price))) } }).OrderBy(g => new double[] { (-_sum(new List<dynamic>(g.Select(x => x.price)))), g["key"].d_year, g["key"].i_category_id, g["key"].i_category }).ToList();
        var result = base;
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q42_simplified();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn) {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src) {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
