// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct CatalogSale {
    public long cs_item_sk;
    public long cs_sold_date_sk;
    public double cs_ext_sales_price;
}

public struct Item {
    public long i_item_sk;
    public string i_item_id;
    public string i_item_desc;
    public string i_category;
    public string i_class;
    public double i_current_price;
}

public struct DateDim {
    public long d_date_sk;
    public string d_date;
}

public class Program {
    static void test_TPCDS_Q20_revenue_ratio() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_id", "ITEM1" }, { "i_item_desc", "Item One" }, { "i_category", "A" }, { "i_class", "X" }, { "i_current_price", 10.000000 }, { "itemrevenue", 600.000000 }, { "revenueratio", 66.666667 } }, new Dictionary<string, dynamic> { { "i_item_id", "ITEM2" }, { "i_item_desc", "Item Two" }, { "i_category", "A" }, { "i_class", "X" }, { "i_current_price", 20.000000 }, { "itemrevenue", 300.000000 }, { "revenueratio", 33.333333 } } }));
    }
    
    public static void Main() {
        var catalog_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cs_item_sk", 1L }, { "cs_sold_date_sk", 1L }, { "cs_ext_sales_price", 100.000000 } }, new Dictionary<string, dynamic> { { "cs_item_sk", 1L }, { "cs_sold_date_sk", 1L }, { "cs_ext_sales_price", 200.000000 } }, new Dictionary<string, dynamic> { { "cs_item_sk", 2L }, { "cs_sold_date_sk", 1L }, { "cs_ext_sales_price", 150.000000 } }, new Dictionary<string, dynamic> { { "cs_item_sk", 1L }, { "cs_sold_date_sk", 2L }, { "cs_ext_sales_price", 300.000000 } }, new Dictionary<string, dynamic> { { "cs_item_sk", 2L }, { "cs_sold_date_sk", 2L }, { "cs_ext_sales_price", 150.000000 } }, new Dictionary<string, dynamic> { { "cs_item_sk", 3L }, { "cs_sold_date_sk", 1L }, { "cs_ext_sales_price", 50.000000 } } };
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_sk", 1L }, { "i_item_id", "ITEM1" }, { "i_item_desc", "Item One" }, { "i_category", "A" }, { "i_class", "X" }, { "i_current_price", 10.000000 } }, new Dictionary<string, dynamic> { { "i_item_sk", 2L }, { "i_item_id", "ITEM2" }, { "i_item_desc", "Item Two" }, { "i_category", "A" }, { "i_class", "X" }, { "i_current_price", 20.000000 } }, new Dictionary<string, dynamic> { { "i_item_sk", 3L }, { "i_item_id", "ITEM3" }, { "i_item_desc", "Item Three" }, { "i_category", "D" }, { "i_class", "Y" }, { "i_current_price", 15.000000 } } };
        var date_dim = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "d_date_sk", 1L }, { "d_date", "2000-02-10" } }, new Dictionary<string, dynamic> { { "d_date_sk", 2L }, { "d_date", "2000-02-20" } } };
        var filtered = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var cs in catalog_sales) {
        foreach (var i in item) {
            if (!((cs["cs_item_sk"] == i["i_item_sk"]))) continue;
            if (!(_in(i.i_category, new string[] { "A", "B", "C" }))) continue;
            foreach (var d in date_dim) {
                if (!((cs["cs_sold_date_sk"] == d["d_date_sk"]))) continue;
                if (!((d.d_date >= "2000-02-01"))) continue;
                if (!((d.d_date <= "2000-03-02"))) continue;
                var key = new Dictionary<string, dynamic> { { "id", i["i_item_id"] }, { "desc", i["i_item_desc"] }, { "cat", i["i_category"] }, { "class", i["i_class"] }, { "price", i["i_current_price"] } };
                var ks = Convert.ToString(key);
                if (!groups.TryGetValue(ks, out var g)) {
                    g = new _Group(key);
                    groups[ks] = g;
                    order.Add(ks);
                }
                g.Items.Add(cs);
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "i_item_id", g["key"].id }, { "i_item_desc", g["key"].desc }, { "i_category", g["key"].cat }, { "i_class", g["key"].class }, { "i_current_price", g["key"].price }, { "itemrevenue", _sum(new List<dynamic>(g.Select(x => x.cs_ext_sales_price))) } });
    }
    return _res;
})();
        var class_totals = _group_by(filtered, f => f["i_class"]).Select(g => new Dictionary<string, dynamic> { { "class", g["key"] }, { "total", _sum(new List<dynamic>(g.Select(x => x.itemrevenue))) } }).ToList();
        var result = new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var f in filtered) {
        foreach (var t in class_totals) {
            if (!((f["i_class"] == t["class"]))) continue;
            _res.Add(new Dictionary<string, dynamic> { { "i_item_id", f["i_item_id"] }, { "i_item_desc", f["i_item_desc"] }, { "i_category", f["i_category"] }, { "i_class", f["i_class"] }, { "i_current_price", f["i_current_price"] }, { "itemrevenue", f["itemrevenue"] }, { "revenueratio", (((f["itemrevenue"] * 100.000000)) / t["total"]) } });
        }
    }
    _res = _res.OrderBy(f => new dynamic[] { f["i_category"], f["i_class"], f["i_item_id"], f["i_item_desc"] }).ToList();
    return _res;
})();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q20_revenue_ratio();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    static bool _in(dynamic item, dynamic col) {
        if (col is string s && item is string sub) {
            return s.Contains(sub);
        }
        if (col is System.Collections.IDictionary d) {
            return d.Contains(item);
        }
        if (col is System.Collections.IEnumerable e) {
            foreach (var it in e) {
                if (Equals(it, item)) return true;
            }
            return false;
        }
        return false;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn) {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src) {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }
    
}
