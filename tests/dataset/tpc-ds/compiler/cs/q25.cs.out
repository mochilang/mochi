// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct StoreSale {
    public long ss_sold_date_sk;
    public long ss_item_sk;
    public long ss_store_sk;
    public long ss_customer_sk;
    public double ss_net_profit;
    public long ss_ticket_number;
}

public struct StoreReturn {
    public long sr_returned_date_sk;
    public long sr_item_sk;
    public long sr_customer_sk;
    public long sr_ticket_number;
    public double sr_net_loss;
}

public struct CatalogSale {
    public long cs_sold_date_sk;
    public long cs_item_sk;
    public long cs_bill_customer_sk;
    public double cs_net_profit;
}

public struct DateDim {
    public long d_date_sk;
    public long d_moy;
    public long d_year;
}

public struct Store {
    public long s_store_sk;
    public string s_store_id;
    public string s_store_name;
}

public struct Item {
    public long i_item_sk;
    public string i_item_id;
    public string i_item_desc;
}

public class Program {
    static void test_TPCDS_Q25_aggregated_profit() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_id", "ITEM1" }, { "i_item_desc", "Desc1" }, { "s_store_id", "S1" }, { "s_store_name", "Store1" }, { "store_sales_profit", 50.000000 }, { "store_returns_loss", 10.000000 }, { "catalog_sales_profit", 30.000000 } } }));
    }
    
    public static void Main() {
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_sold_date_sk", 1L }, { "ss_item_sk", 1L }, { "ss_store_sk", 1L }, { "ss_customer_sk", 1L }, { "ss_net_profit", 50.000000 }, { "ss_ticket_number", 1L } }, new Dictionary<string, dynamic> { { "ss_sold_date_sk", 1L }, { "ss_item_sk", 2L }, { "ss_store_sk", 1L }, { "ss_customer_sk", 2L }, { "ss_net_profit", 20.000000 }, { "ss_ticket_number", 2L } } };
        var store_returns = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "sr_returned_date_sk", 2L }, { "sr_item_sk", 1L }, { "sr_customer_sk", 1L }, { "sr_ticket_number", 1L }, { "sr_net_loss", 10.000000 } }, new Dictionary<string, dynamic> { { "sr_returned_date_sk", 2L }, { "sr_item_sk", 2L }, { "sr_customer_sk", 2L }, { "sr_ticket_number", 2L }, { "sr_net_loss", 5.000000 } } };
        var catalog_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cs_sold_date_sk", 3L }, { "cs_item_sk", 1L }, { "cs_bill_customer_sk", 1L }, { "cs_net_profit", 30.000000 } }, new Dictionary<string, dynamic> { { "cs_sold_date_sk", 3L }, { "cs_item_sk", 2L }, { "cs_bill_customer_sk", 2L }, { "cs_net_profit", 15.000000 } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_moy", 4L }, { "d_year", 2000L } }, new Dictionary<string, long> { { "d_date_sk", 2L }, { "d_moy", 5L }, { "d_year", 2000L } }, new Dictionary<string, long> { { "d_date_sk", 3L }, { "d_moy", 6L }, { "d_year", 2000L } } };
        var store = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "s_store_sk", 1L }, { "s_store_id", "S1" }, { "s_store_name", "Store1" } } };
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_sk", 1L }, { "i_item_id", "ITEM1" }, { "i_item_desc", "Desc1" } }, new Dictionary<string, dynamic> { { "i_item_sk", 2L }, { "i_item_id", "ITEM2" }, { "i_item_desc", "Desc2" } } };
        var result = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var ss in store_sales) {
        foreach (var sr in store_returns) {
            if (!(((ss["ss_ticket_number"] == sr["sr_ticket_number"]) && (ss["ss_item_sk"] == sr["sr_item_sk"])))) continue;
            foreach (var cs in catalog_sales) {
                if (!(((sr["sr_customer_sk"] == cs["cs_bill_customer_sk"]) && (sr["sr_item_sk"] == cs["cs_item_sk"])))) continue;
                foreach (var d1 in date_dim) {
                    if (!((d1["d_date_sk"] == ss["ss_sold_date_sk"]))) continue;
                    if (!((d1.d_moy == 4L))) continue;
                    if (!((d1.d_year == 2000L))) continue;
                    foreach (var d2 in date_dim) {
                        if (!((d2["d_date_sk"] == sr["sr_returned_date_sk"]))) continue;
                        if (!((d2.d_moy >= 4L))) continue;
                        if (!((d2.d_moy <= 10L))) continue;
                        foreach (var d3 in date_dim) {
                            if (!((d3["d_date_sk"] == cs["cs_sold_date_sk"]))) continue;
                            if (!((d3.d_moy >= 4L))) continue;
                            if (!((d3.d_moy <= 10L))) continue;
                            foreach (var s in store) {
                                if (!((s["s_store_sk"] == ss["ss_store_sk"]))) continue;
                                foreach (var i in item) {
                                    if (!((i["i_item_sk"] == ss["ss_item_sk"]))) continue;
                                    var key = new Dictionary<string, dynamic> { { "item_id", i["i_item_id"] }, { "item_desc", i["i_item_desc"] }, { "s_store_id", s["s_store_id"] }, { "s_store_name", s["s_store_name"] } };
                                    var ks = Convert.ToString(key);
                                    if (!groups.TryGetValue(ks, out var g)) {
                                        g = new _Group(key);
                                        groups[ks] = g;
                                        order.Add(ks);
                                    }
                                    g.Items.Add(ss);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "i_item_id", g["key"].item_id }, { "i_item_desc", g["key"].item_desc }, { "s_store_id", g["key"].s_store_id }, { "s_store_name", g["key"].s_store_name }, { "store_sales_profit", _sum(new List<dynamic>(g.Select(x => x.ss_net_profit))) }, { "store_returns_loss", _sum(new List<dynamic>(g.Select(x => x.sr_net_loss))) }, { "catalog_sales_profit", _sum(new List<dynamic>(g.Select(x => x.cs_net_profit))) } });
    }
    return _res;
})();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q25_aggregated_profit();
    }
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
}
