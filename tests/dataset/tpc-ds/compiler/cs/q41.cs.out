// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q41_simplified() {
        expect((result == new string[] { "Blue Shirt", "Red Dress" }));
    }
    
    public static void Main() {
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "product_name", "Blue Shirt" }, { "manufact_id", 100L }, { "manufact", 1L }, { "category", "Women" }, { "color", "blue" }, { "units", "pack" }, { "size", "M" } }, new Dictionary<string, dynamic> { { "product_name", "Red Dress" }, { "manufact_id", 120L }, { "manufact", 1L }, { "category", "Women" }, { "color", "red" }, { "units", "pack" }, { "size", "M" } }, new Dictionary<string, dynamic> { { "product_name", "Pants" }, { "manufact_id", 200L }, { "manufact", 2L }, { "category", "Men" }, { "color", "black" }, { "units", "pair" }, { "size", "L" } } };
        long lower = 100L;
        var result = new List<dynamic>(item.Where(i1 => (i1["manufact_id"] >= lower) && (i1["manufact_id"] <= (lower + 40L)) && (_count(new List<dynamic>(item.Where(i2 => (i2["manufact"] == i1["manufact"]) && (i2["category"] == i1["category"])).Select(i2 => i2))) > 1L)).OrderBy(i1 => i1["product_name"]).Select(i1 => i1["product_name"]));
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q41_simplified();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static int _count(dynamic v) {
        if (v is string) {
            return ((string)v).Length;
        }
        if (v is System.Collections.ICollection c) {
            return c.Count;
        }
        throw new Exception("count() expects list or string");
    }
    
}
