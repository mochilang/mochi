// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct CatalogSale
{
    public long cs_quantity;
    public double cs_list_price;
    public double cs_coupon_amt;
    public double cs_sales_price;
    public double cs_net_profit;
    public long cs_bill_cdemo_sk;
    public long cs_bill_customer_sk;
    public long cs_sold_date_sk;
    public long cs_item_sk;
}

public struct CustomerDemographics
{
    public long cd_demo_sk;
    public string cd_gender;
    public string cd_education_status;
    public long cd_dep_count;
}

public struct Customer
{
    public long c_customer_sk;
    public long c_current_cdemo_sk;
    public long c_current_addr_sk;
    public long c_birth_year;
    public long c_birth_month;
}

public struct CustomerAddress
{
    public long ca_address_sk;
    public string ca_country;
    public string ca_state;
    public string ca_county;
}

public struct DateDim
{
    public long d_date_sk;
    public long d_year;
}

public struct Item
{
    public long i_item_sk;
    public string i_item_id;
}

public class Program
{
    static void test_TPCDS_Q18_averages()
    {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_id", "I1" }, { "ca_country", "US" }, { "ca_state", "CA" }, { "ca_county", "County1" }, { "agg1", 1.000000 }, { "agg2", 10.000000 }, { "agg3", 1.000000 }, { "agg4", 9.000000 }, { "agg5", 2.000000 }, { "agg6", 1980.000000 }, { "agg7", 2.000000 } } }));
    }

    public static void Main()
    {
        var catalog_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cs_quantity", 1L }, { "cs_list_price", 10.000000 }, { "cs_coupon_amt", 1.000000 }, { "cs_sales_price", 9.000000 }, { "cs_net_profit", 2.000000 }, { "cs_bill_cdemo_sk", 1L }, { "cs_bill_customer_sk", 1L }, { "cs_sold_date_sk", 1L }, { "cs_item_sk", 1L } } };
        var customer_demographics = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cd_demo_sk", 1L }, { "cd_gender", "M" }, { "cd_education_status", "College" }, { "cd_dep_count", 2L } }, new Dictionary<string, dynamic> { { "cd_demo_sk", 2L }, { "cd_gender", "F" }, { "cd_education_status", "College" }, { "cd_dep_count", 2L } } };
        Dictionary<string, long>[] customer = new Dictionary<string, long>[] { new Dictionary<string, long> { { "c_customer_sk", 1L }, { "c_current_cdemo_sk", 2L }, { "c_current_addr_sk", 1L }, { "c_birth_year", 1980L }, { "c_birth_month", 1L } } };
        var customer_address = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ca_address_sk", 1L }, { "ca_country", "US" }, { "ca_state", "CA" }, { "ca_county", "County1" } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_year", 1999L } } };
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_sk", 1L }, { "i_item_id", "I1" } } };
        var joined = new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var cs in catalog_sales)
            {
                foreach (var cd1 in customer_demographics)
                {
                    if (!((((cs["cs_bill_cdemo_sk"] == cd1["cd_demo_sk"]) && (cd1["cd_gender"] == "M")) && (cd1["cd_education_status"] == "College")))) continue;
                    foreach (var c in customer)
                    {
                        if (!((cs["cs_bill_customer_sk"] == c["c_customer_sk"]))) continue;
                        foreach (var cd2 in customer_demographics)
                        {
                            if (!((c["c_current_cdemo_sk"] == cd2["cd_demo_sk"]))) continue;
                            foreach (var ca in customer_address)
                            {
                                if (!((c["c_current_addr_sk"] == ca["ca_address_sk"]))) continue;
                                foreach (var d in date_dim)
                                {
                                    if (!(((cs["cs_sold_date_sk"] == d["d_date_sk"]) && (d["d_year"] == 1999L)))) continue;
                                    foreach (var i in item)
                                    {
                                        if (!((cs["cs_item_sk"] == i["i_item_sk"]))) continue;
                                        _res.Add(new Dictionary<string, dynamic> { { "i_item_id", i["i_item_id"] }, { "ca_country", ca["ca_country"] }, { "ca_state", ca["ca_state"] }, { "ca_county", ca["ca_county"] }, { "q", cs["cs_quantity"] }, { "lp", cs["cs_list_price"] }, { "cp", cs["cs_coupon_amt"] }, { "sp", cs["cs_sales_price"] }, { "np", cs["cs_net_profit"] }, { "by", c["c_birth_year"] }, { "dep", cd1["cd_dep_count"] } });
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return _res;
        })();
        var result = _group_by(joined, j => new Dictionary<string, dynamic> { { "i_item_id", j["i_item_id"] }, { "ca_country", j["ca_country"] }, { "ca_state", j["ca_state"] }, { "ca_county", j["ca_county"] } }).Select(g => new Dictionary<string, dynamic> { { "i_item_id", g["key"].i_item_id }, { "ca_country", g["key"].ca_country }, { "ca_state", g["key"].ca_state }, { "ca_county", g["key"].ca_county }, { "agg1", _avg(new List<dynamic>(g.Select(x => x.q))) }, { "agg2", _avg(new List<dynamic>(g.Select(x => x.lp))) }, { "agg3", _avg(new List<dynamic>(g.Select(x => x.cp))) }, { "agg4", _avg(new List<dynamic>(g.Select(x => x.sp))) }, { "agg5", _avg(new List<dynamic>(g.Select(x => x.np))) }, { "agg6", _avg(new List<dynamic>(g.Select(x => x.by))) }, { "agg7", _avg(new List<dynamic>(g.Select(x => x.dep))) } }).ToList();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q18_averages();
    }
    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static double _avg(dynamic v)
    {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }

    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn)
    {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src)
        {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g))
            {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }

    public class _Group
    {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }

}
