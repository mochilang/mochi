// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;

public class Program {
    static void test_TPCDS_Q31_simplified() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ca_county", "A" }, { "d_year", 2000L }, { "web_q1_q2_increase", 1.500000 }, { "store_q1_q2_increase", 1.200000 }, { "web_q2_q3_increase", 1.666667 }, { "store_q2_q3_increase", 1.333333 } } }));
    }
    
    public static void Main() {
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ca_county", "A" }, { "d_qoy", 1L }, { "d_year", 2000L }, { "ss_ext_sales_price", 100.000000 } }, new Dictionary<string, dynamic> { { "ca_county", "A" }, { "d_qoy", 2L }, { "d_year", 2000L }, { "ss_ext_sales_price", 120.000000 } }, new Dictionary<string, dynamic> { { "ca_county", "A" }, { "d_qoy", 3L }, { "d_year", 2000L }, { "ss_ext_sales_price", 160.000000 } }, new Dictionary<string, dynamic> { { "ca_county", "B" }, { "d_qoy", 1L }, { "d_year", 2000L }, { "ss_ext_sales_price", 80.000000 } }, new Dictionary<string, dynamic> { { "ca_county", "B" }, { "d_qoy", 2L }, { "d_year", 2000L }, { "ss_ext_sales_price", 90.000000 } }, new Dictionary<string, dynamic> { { "ca_county", "B" }, { "d_qoy", 3L }, { "d_year", 2000L }, { "ss_ext_sales_price", 100.000000 } } };
        var web_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ca_county", "A" }, { "d_qoy", 1L }, { "d_year", 2000L }, { "ws_ext_sales_price", 100.000000 } }, new Dictionary<string, dynamic> { { "ca_county", "A" }, { "d_qoy", 2L }, { "d_year", 2000L }, { "ws_ext_sales_price", 150.000000 } }, new Dictionary<string, dynamic> { { "ca_county", "A" }, { "d_qoy", 3L }, { "d_year", 2000L }, { "ws_ext_sales_price", 250.000000 } }, new Dictionary<string, dynamic> { { "ca_county", "B" }, { "d_qoy", 1L }, { "d_year", 2000L }, { "ws_ext_sales_price", 80.000000 } }, new Dictionary<string, dynamic> { { "ca_county", "B" }, { "d_qoy", 2L }, { "d_year", 2000L }, { "ws_ext_sales_price", 90.000000 } }, new Dictionary<string, dynamic> { { "ca_county", "B" }, { "d_qoy", 3L }, { "d_year", 2000L }, { "ws_ext_sales_price", 95.000000 } } };
        string[] counties = new string[] { "A", "B" };
        var result = new dynamic[] { };
        foreach (var county in counties) {
            double ss1 = _sum(new List<dynamic>(store_sales.Where(s => (s["ca_county"] == county)).Select(s => s["ss_ext_sales_price"])));
            double ss2 = _sum(new List<dynamic>(store_sales.Where(s => (s["ca_county"] == county)).Select(s => s["ss_ext_sales_price"])));
            double ss3 = _sum(new List<dynamic>(store_sales.Where(s => (s["ca_county"] == county)).Select(s => s["ss_ext_sales_price"])));
            double ws1 = _sum(new List<dynamic>(web_sales.Where(w => (w["ca_county"] == county)).Select(w => w["ws_ext_sales_price"])));
            double ws2 = _sum(new List<dynamic>(web_sales.Where(w => (w["ca_county"] == county)).Select(w => w["ws_ext_sales_price"])));
            double ws3 = _sum(new List<dynamic>(web_sales.Where(w => (w["ca_county"] == county)).Select(w => w["ws_ext_sales_price"])));
            var web_g1 = (ws2 / ws1);
            var store_g1 = (ss2 / ss1);
            var web_g2 = (ws3 / ws2);
            var store_g2 = (ss3 / ss2);
            if (((web_g1 > store_g1) && (web_g2 > store_g2))) {
                result = append(result, new Dictionary<string, dynamic> { { "ca_county", county }, { "d_year", 2000L }, { "web_q1_q2_increase", web_g1 }, { "store_q1_q2_increase", store_g1 }, { "web_q2_q3_increase", web_g2 }, { "store_q2_q3_increase", store_g2 } });
            }
        }
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q31_simplified();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
}
