// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct Inventory {
    public long inv_item_sk;
    public long inv_warehouse_sk;
    public long inv_date_sk;
    public long inv_quantity_on_hand;
}

public struct Warehouse {
    public long w_warehouse_sk;
    public string w_warehouse_name;
}

public struct Item {
    public long i_item_sk;
    public string i_item_id;
}

public struct DateDim {
    public long d_date_sk;
    public string d_date;
}

public class Program {
    static void test_TPCDS_Q21_inventory_ratio() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "w_warehouse_name", "Main" }, { "i_item_id", "ITEM1" }, { "inv_before", 30L }, { "inv_after", 40L } } }));
    }
    
    public static void Main() {
        Dictionary<string, long>[] inventory = new Dictionary<string, long>[] { new Dictionary<string, long> { { "inv_item_sk", 1L }, { "inv_warehouse_sk", 1L }, { "inv_date_sk", 1L }, { "inv_quantity_on_hand", 30L } }, new Dictionary<string, long> { { "inv_item_sk", 1L }, { "inv_warehouse_sk", 1L }, { "inv_date_sk", 2L }, { "inv_quantity_on_hand", 40L } }, new Dictionary<string, long> { { "inv_item_sk", 2L }, { "inv_warehouse_sk", 2L }, { "inv_date_sk", 1L }, { "inv_quantity_on_hand", 20L } }, new Dictionary<string, long> { { "inv_item_sk", 2L }, { "inv_warehouse_sk", 2L }, { "inv_date_sk", 2L }, { "inv_quantity_on_hand", 20L } } };
        var warehouse = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "w_warehouse_sk", 1L }, { "w_warehouse_name", "Main" } }, new Dictionary<string, dynamic> { { "w_warehouse_sk", 2L }, { "w_warehouse_name", "Backup" } } };
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_sk", 1L }, { "i_item_id", "ITEM1" } }, new Dictionary<string, dynamic> { { "i_item_sk", 2L }, { "i_item_id", "ITEM2" } } };
        var date_dim = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "d_date_sk", 1L }, { "d_date", "2000-03-01" } }, new Dictionary<string, dynamic> { { "d_date_sk", 2L }, { "d_date", "2000-03-20" } } };
        var before = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var inv in inventory) {
        foreach (var d in date_dim) {
            if (!((inv["inv_date_sk"] == d["d_date_sk"]))) continue;
            if (!((d.d_date < "2000-03-15"))) continue;
            var key = new Dictionary<string, long> { { "w", inv["inv_warehouse_sk"] }, { "i", inv["inv_item_sk"] } };
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(inv);
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "w", g["key"].w }, { "i", g["key"].i }, { "qty", _sum(new List<dynamic>(g.Select(x => x.inv_quantity_on_hand))) } });
    }
    return _res;
})();
        var after = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var inv in inventory) {
        foreach (var d in date_dim) {
            if (!((inv["inv_date_sk"] == d["d_date_sk"]))) continue;
            if (!((d.d_date >= "2000-03-15"))) continue;
            var key = new Dictionary<string, long> { { "w", inv["inv_warehouse_sk"] }, { "i", inv["inv_item_sk"] } };
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(inv);
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "w", g["key"].w }, { "i", g["key"].i }, { "qty", _sum(new List<dynamic>(g.Select(x => x.inv_quantity_on_hand))) } });
    }
    return _res;
})();
        var joined = new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var b in before) {
        foreach (var a in after) {
            if (!(((b["w"] == a["w"]) && (b["i"] == a["i"])))) continue;
            foreach (var w in warehouse) {
                if (!((w["w_warehouse_sk"] == b["w"]))) continue;
                foreach (var it in item) {
                    if (!((it["i_item_sk"] == b["i"]))) continue;
                    _res.Add(new Dictionary<string, dynamic> { { "w_name", w["w_warehouse_name"] }, { "i_id", it["i_item_id"] }, { "before_qty", b["qty"] }, { "after_qty", a["qty"] }, { "ratio", (a["qty"] / b["qty"]) } });
                }
            }
        }
    }
    return _res;
})();
        var result = new List<Dictionary<string, dynamic>>(joined.OrderBy(r => new dynamic[] { r["w_name"], r["i_id"] }).Select(r => new Dictionary<string, dynamic> { { "w_warehouse_name", r["w_name"] }, { "i_item_id", r["i_id"] }, { "inv_before", r["before_qty"] }, { "inv_after", r["after_qty"] } }));
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q21_inventory_ratio();
    }
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
}
