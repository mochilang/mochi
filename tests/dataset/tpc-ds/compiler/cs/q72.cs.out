// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q72_simplified() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_desc", "ItemA" }, { "w_warehouse_name", "Main" }, { "d_week_seq", 10L }, { "no_promo", 1L }, { "promo", 0L }, { "total_cnt", 1L } } }));
    }
    
    public static void Main() {
        Dictionary<string, long>[] catalog_sales = new Dictionary<string, long>[] { new Dictionary<string, long> { { "cs_item_sk", 1L }, { "cs_order_number", 1L }, { "cs_quantity", 1L }, { "cs_sold_date_sk", 1L }, { "cs_ship_date_sk", 3L }, { "cs_bill_cdemo_sk", 1L }, { "cs_bill_hdemo_sk", 1L }, { "cs_promo_sk", null } } };
        Dictionary<string, long>[] inventory = new Dictionary<string, long>[] { new Dictionary<string, long> { { "inv_item_sk", 1L }, { "inv_warehouse_sk", 1L }, { "inv_date_sk", 2L }, { "inv_quantity_on_hand", 0L } } };
        var warehouse = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "w_warehouse_sk", 1L }, { "w_warehouse_name", "Main" } } };
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_sk", 1L }, { "i_item_desc", "ItemA" } } };
        var customer_demographics = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cd_demo_sk", 1L }, { "cd_marital_status", "M" } } };
        var household_demographics = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "hd_demo_sk", 1L }, { "hd_buy_potential", "5001-10000" } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_week_seq", 10L }, { "d_date", 1L }, { "d_year", 2000L } }, new Dictionary<string, long> { { "d_date_sk", 2L }, { "d_week_seq", 10L }, { "d_date", 1L }, { "d_year", 2000L } }, new Dictionary<string, long> { { "d_date_sk", 3L }, { "d_week_seq", 10L }, { "d_date", 7L }, { "d_year", 2000L } } };
        var result = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var cs in catalog_sales) {
        foreach (var inv in inventory) {
            if (!((inv["inv_item_sk"] == cs["cs_item_sk"]))) continue;
            foreach (var w in warehouse) {
                if (!((w["w_warehouse_sk"] == inv["inv_warehouse_sk"]))) continue;
                foreach (var i in item) {
                    if (!((i["i_item_sk"] == cs["cs_item_sk"]))) continue;
                    foreach (var cd in customer_demographics) {
                        if (!((cd["cd_demo_sk"] == cs["cs_bill_cdemo_sk"]))) continue;
                        if (!((cd.cd_marital_status == "M"))) continue;
                        foreach (var hd in household_demographics) {
                            if (!((hd["hd_demo_sk"] == cs["cs_bill_hdemo_sk"]))) continue;
                            if (!((hd.hd_buy_potential == "5001-10000"))) continue;
                            foreach (var d1 in date_dim) {
                                if (!((d1["d_date_sk"] == cs["cs_sold_date_sk"]))) continue;
                                if (!((d1.d_year == 2000L))) continue;
                                foreach (var d2 in date_dim) {
                                    if (!((d2["d_date_sk"] == inv["inv_date_sk"]))) continue;
                                    foreach (var d3 in date_dim) {
                                        if (!((d3["d_date_sk"] == cs["cs_ship_date_sk"]))) continue;
                                        if ((d1.d_week_seq == d2.d_week_seq) && (inv.inv_quantity_on_hand < cs["cs_quantity"]) && (d3.d_date > (d1.d_date + 5L))) {
                                            var key = new Dictionary<string, dynamic> { { "item_desc", i["i_item_desc"] }, { "warehouse", w["w_warehouse_name"] }, { "week_seq", d1["d_week_seq"] } };
                                            var ks = Convert.ToString(key);
                                            if (!groups.TryGetValue(ks, out var g)) {
                                                g = new _Group(key);
                                                groups[ks] = g;
                                                order.Add(ks);
                                            }
                                            g.Items.Add(cs);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "i_item_desc", g["key"].item_desc }, { "w_warehouse_name", g["key"].warehouse }, { "d_week_seq", g["key"].week_seq }, { "no_promo", _count(new List<dynamic>(g.Select(x => x))) }, { "promo", _count(new List<dynamic>(g.Select(x => x))) }, { "total_cnt", _count(g) } });
    }
    return _res;
})();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q72_simplified();
    }
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static int _count(dynamic v) {
        if (v is string) {
            return ((string)v).Length;
        }
        if (v is System.Collections.ICollection c) {
            return c.Count;
        }
        throw new Exception("count() expects list or string");
    }
    
}
