// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct Inventory {
    public long inv_item_sk;
    public long inv_date_sk;
    public long inv_quantity_on_hand;
}

public struct DateDim {
    public long d_date_sk;
    public long d_month_seq;
}

public struct Item {
    public long i_item_sk;
    public string i_product_name;
    public string i_brand;
    public string i_class;
    public string i_category;
}

public class Program {
    static void test_TPCDS_Q22_average_inventory() {
        expect((qoh == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_product_name", "Prod1" }, { "i_brand", "Brand1" }, { "i_class", "Class1" }, { "i_category", "Cat1" }, { "qoh", 15.000000 } }, new Dictionary<string, dynamic> { { "i_product_name", "Prod2" }, { "i_brand", "Brand2" }, { "i_class", "Class2" }, { "i_category", "Cat2" }, { "qoh", 50.000000 } } }));
    }
    
    public static void Main() {
        Dictionary<string, long>[] inventory = new Dictionary<string, long>[] { new Dictionary<string, long> { { "inv_item_sk", 1L }, { "inv_date_sk", 1L }, { "inv_quantity_on_hand", 10L } }, new Dictionary<string, long> { { "inv_item_sk", 1L }, { "inv_date_sk", 2L }, { "inv_quantity_on_hand", 20L } }, new Dictionary<string, long> { { "inv_item_sk", 1L }, { "inv_date_sk", 3L }, { "inv_quantity_on_hand", 10L } }, new Dictionary<string, long> { { "inv_item_sk", 1L }, { "inv_date_sk", 4L }, { "inv_quantity_on_hand", 20L } }, new Dictionary<string, long> { { "inv_item_sk", 2L }, { "inv_date_sk", 1L }, { "inv_quantity_on_hand", 50L } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_month_seq", 0L } }, new Dictionary<string, long> { { "d_date_sk", 2L }, { "d_month_seq", 1L } }, new Dictionary<string, long> { { "d_date_sk", 3L }, { "d_month_seq", 2L } }, new Dictionary<string, long> { { "d_date_sk", 4L }, { "d_month_seq", 3L } } };
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_sk", 1L }, { "i_product_name", "Prod1" }, { "i_brand", "Brand1" }, { "i_class", "Class1" }, { "i_category", "Cat1" } }, new Dictionary<string, dynamic> { { "i_item_sk", 2L }, { "i_product_name", "Prod2" }, { "i_brand", "Brand2" }, { "i_class", "Class2" }, { "i_category", "Cat2" } } };
        var qoh = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var inv in inventory) {
        foreach (var d in date_dim) {
            if (!((inv["inv_date_sk"] == d["d_date_sk"]))) continue;
            if (!((d.d_month_seq >= 0L))) continue;
            if (!((d.d_month_seq <= 11L))) continue;
            foreach (var i in item) {
                if (!((inv["inv_item_sk"] == i["i_item_sk"]))) continue;
                var key = new Dictionary<string, dynamic> { { "product_name", i["i_product_name"] }, { "brand", i["i_brand"] }, { "class", i["i_class"] }, { "category", i["i_category"] } };
                var ks = Convert.ToString(key);
                if (!groups.TryGetValue(ks, out var g)) {
                    g = new _Group(key);
                    groups[ks] = g;
                    order.Add(ks);
                }
                g.Items.Add(inv);
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "i_product_name", g["key"].product_name }, { "i_brand", g["key"].brand }, { "i_class", g["key"].class }, { "i_category", g["key"].category }, { "qoh", _avg(new List<dynamic>(g.Select(x => x.inv_quantity_on_hand))) } });
    }
    return _res;
})();
        Console.WriteLine(JsonSerializer.Serialize(qoh));
        test_TPCDS_Q22_average_inventory();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _avg(dynamic v) {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
