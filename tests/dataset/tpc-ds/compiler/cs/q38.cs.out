// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;

public class Program {
    static dynamic[] distinct(dynamic[] xs) {
        var out = new dynamic[] { };
        foreach (var x in xs) {
            if ((!contains(out, x))) {
                out = append(out, x);
            }
        }
        return out;
    }
    
    static void test_TPCDS_Q38_simplified() {
        expect((result == 1L));
    }
    
    public static void Main() {
        var customer = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "c_customer_sk", 1L }, { "c_last_name", "Smith" }, { "c_first_name", "John" } }, new Dictionary<string, dynamic> { { "c_customer_sk", 2L }, { "c_last_name", "Jones" }, { "c_first_name", "Alice" } } };
        Dictionary<string, long>[] store_sales = new Dictionary<string, long>[] { new Dictionary<string, long> { { "ss_customer_sk", 1L }, { "d_month_seq", 1200L } }, new Dictionary<string, long> { { "ss_customer_sk", 2L }, { "d_month_seq", 1205L } } };
        Dictionary<string, long>[] catalog_sales = new Dictionary<string, long>[] { new Dictionary<string, long> { { "cs_bill_customer_sk", 1L }, { "d_month_seq", 1203L } } };
        Dictionary<string, long>[] web_sales = new Dictionary<string, long>[] { new Dictionary<string, long> { { "ws_bill_customer_sk", 1L }, { "d_month_seq", 1206L } } };
        var store_ids = distinct(new List<dynamic>(store_sales.Select(s => s["ss_customer_sk"])));
        var catalog_ids = distinct(new List<dynamic>(catalog_sales.Select(c => c["cs_bill_customer_sk"])));
        var web_ids = distinct(new List<dynamic>(web_sales.Select(w => w["ws_bill_customer_sk"])));
        var hot = _intersect(_intersect(store_ids, catalog_ids), web_ids);
        long result = hot.Length;
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q38_simplified();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static List<dynamic> _intersect(IEnumerable<dynamic> a, IEnumerable<dynamic> b) {
        var res = new List<dynamic>();
        if (a != null) foreach (var it in a) if (_in(it, b) && !_in(it, res)) res.Add(it);
        return res;
    }
    
    static bool _in(dynamic item, dynamic col) {
        if (col is string s && item is string sub) {
            return s.Contains(sub);
        }
        if (col is System.Collections.IDictionary d) {
            return d.Contains(item);
        }
        if (col is System.Collections.IEnumerable e) {
            foreach (var it in e) {
                if (Equals(it, item)) return true;
            }
            return false;
        }
        return false;
    }
    
}
