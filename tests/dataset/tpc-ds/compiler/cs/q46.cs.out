// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q46_simplified() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "c_last_name", "Doe" }, { "c_first_name", "John" }, { "ca_city", "Seattle" }, { "bought_city", "Portland" }, { "ss_ticket_number", 1L }, { "amt", 5.000000 }, { "profit", 20.000000 } } }));
    }
    
    public static void Main() {
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_ticket_number", 1L }, { "ss_customer_sk", 1L }, { "ss_addr_sk", 1L }, { "ss_hdemo_sk", 1L }, { "ss_store_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_coupon_amt", 5.000000 }, { "ss_net_profit", 20.000000 } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_dow", 6L }, { "d_year", 2020L } } };
        var store = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "s_store_sk", 1L }, { "s_city", "CityA" } } };
        Dictionary<string, long>[] household_demographics = new Dictionary<string, long>[] { new Dictionary<string, long> { { "hd_demo_sk", 1L }, { "hd_dep_count", 2L }, { "hd_vehicle_count", 0L } } };
        var customer_address = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ca_address_sk", 1L }, { "ca_city", "Portland" } }, new Dictionary<string, dynamic> { { "ca_address_sk", 2L }, { "ca_city", "Seattle" } } };
        var customer = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "c_customer_sk", 1L }, { "c_last_name", "Doe" }, { "c_first_name", "John" }, { "c_current_addr_sk", 2L } } };
        long depcnt = 2L;
        long vehcnt = 0L;
        long year = 2020L;
        string[] cities = new string[] { "CityA" };
        var dn = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var ss in store_sales) {
        foreach (var d in date_dim) {
            if (!((ss["ss_sold_date_sk"] == d["d_date_sk"]))) continue;
            if (!(_in(d.d_dow, new long[] { 6L, 0L }))) continue;
            foreach (var s in store) {
                if (!((ss["ss_store_sk"] == s["s_store_sk"]))) continue;
                foreach (var hd in household_demographics) {
                    if (!((ss["ss_hdemo_sk"] == hd["hd_demo_sk"]))) continue;
                    foreach (var ca in customer_address) {
                        if (!((ss["ss_addr_sk"] == ca["ca_address_sk"]))) continue;
                        if ((((hd.hd_dep_count == depcnt) || (hd.hd_vehicle_count == vehcnt))) && (d.d_year == year) && _in(s.s_city, cities)) {
                            var key = new Dictionary<string, dynamic> { { "ss_ticket_number", ss["ss_ticket_number"] }, { "ss_customer_sk", ss["ss_customer_sk"] }, { "ca_city", ca["ca_city"] } };
                            var ks = Convert.ToString(key);
                            if (!groups.TryGetValue(ks, out var g)) {
                                g = new _Group(key);
                                groups[ks] = g;
                                order.Add(ks);
                            }
                            g.Items.Add(ss);
                        }
                    }
                }
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "ss_ticket_number", g["key"].ss_ticket_number }, { "ss_customer_sk", g["key"].ss_customer_sk }, { "bought_city", g["key"].ca_city }, { "amt", _sum(new List<dynamic>(g.Select(x => x.ss.ss_coupon_amt))) }, { "profit", _sum(new List<dynamic>(g.Select(x => x.ss.ss_net_profit))) } });
    }
    return _res;
})();
        var base = new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var dnrec in dn) {
        foreach (var c in customer) {
            if (!((dnrec["ss_customer_sk"] == c["c_customer_sk"]))) continue;
            foreach (var current_addr in customer_address) {
                if (!((c["c_current_addr_sk"] == current_addr["ca_address_sk"]))) continue;
                if ((current_addr.ca_city != dnrec["bought_city"])) {
                    _res.Add(new Dictionary<string, dynamic> { { "c_last_name", c["c_last_name"] }, { "c_first_name", c["c_first_name"] }, { "ca_city", current_addr["ca_city"] }, { "bought_city", dnrec["bought_city"] }, { "ss_ticket_number", dnrec["ss_ticket_number"] }, { "amt", dnrec["amt"] }, { "profit", dnrec["profit"] } });
                }
            }
        }
    }
    _res = _res.OrderBy(dnrec => new dynamic[] { c.c_last_name, c.c_first_name, current_addr.ca_city, dnrec["bought_city"], dnrec["ss_ticket_number"] }).ToList();
    return _res;
})();
        var result = base;
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q46_simplified();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    static bool _in(dynamic item, dynamic col) {
        if (col is string s && item is string sub) {
            return s.Contains(sub);
        }
        if (col is System.Collections.IDictionary d) {
            return d.Contains(item);
        }
        if (col is System.Collections.IEnumerable e) {
            foreach (var it in e) {
                if (Equals(it, item)) return true;
            }
            return false;
        }
        return false;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
