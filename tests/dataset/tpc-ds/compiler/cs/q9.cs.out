// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q9_empty() {
        expect((result.Length == 0L));
    }
    
    public static void Main() {
        var store_sales = new dynamic[] { };
        var reason = new dynamic[] { };
        double bucket1 = ((_count(new List<dynamic>(store_sales.Select(s => s))) > 10L) ? _avg(new List<dynamic>(store_sales.Select(s => s.ss_ext_discount_amt))) : _avg(new List<dynamic>(store_sales.Select(s => s.ss_net_paid))));
        double bucket2 = ((_count(new List<dynamic>(store_sales.Select(s => s))) > 20L) ? _avg(new List<dynamic>(store_sales.Select(s => s.ss_ext_discount_amt))) : _avg(new List<dynamic>(store_sales.Select(s => s.ss_net_paid))));
        double bucket3 = ((_count(new List<dynamic>(store_sales.Select(s => s))) > 30L) ? _avg(new List<dynamic>(store_sales.Select(s => s.ss_ext_discount_amt))) : _avg(new List<dynamic>(store_sales.Select(s => s.ss_net_paid))));
        double bucket4 = ((_count(new List<dynamic>(store_sales.Select(s => s))) > 40L) ? _avg(new List<dynamic>(store_sales.Select(s => s.ss_ext_discount_amt))) : _avg(new List<dynamic>(store_sales.Select(s => s.ss_net_paid))));
        double bucket5 = ((_count(new List<dynamic>(store_sales.Select(s => s))) > 50L) ? _avg(new List<dynamic>(store_sales.Select(s => s.ss_ext_discount_amt))) : _avg(new List<dynamic>(store_sales.Select(s => s.ss_net_paid))));
        Dictionary<string, double>[] result = new List<Dictionary<string, double>>(reason.Select(r => new Dictionary<string, double> { { "bucket1", bucket1 }, { "bucket2", bucket2 }, { "bucket3", bucket3 }, { "bucket4", bucket4 }, { "bucket5", bucket5 } }));
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q9_empty();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static int _count(dynamic v) {
        if (v is string) {
            return ((string)v).Length;
        }
        if (v is System.Collections.ICollection c) {
            return c.Count;
        }
        throw new Exception("count() expects list or string");
    }
    
    static double _avg(dynamic v) {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }
    
}
