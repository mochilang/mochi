// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static double abs(double x) {
        if ((x >= 0.000000)) {
            x;
        } else {
            (-x);
        }
    }
    
    static void test_TPCDS_Q47_simplified() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "d_year", 2019L }, { "item", "C" }, { "avg_monthly_sales", 50.000000 }, { "sum_sales", 60.000000 } }, new Dictionary<string, dynamic> { { "d_year", 2020L }, { "item", "A" }, { "avg_monthly_sales", 100.000000 }, { "sum_sales", 120.000000 } } }));
    }
    
    public static void Main() {
        var v2 = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "d_year", 2020L }, { "item", "A" }, { "avg_monthly_sales", 100.000000 }, { "sum_sales", 120.000000 } }, new Dictionary<string, dynamic> { { "d_year", 2020L }, { "item", "B" }, { "avg_monthly_sales", 80.000000 }, { "sum_sales", 70.000000 } }, new Dictionary<string, dynamic> { { "d_year", 2019L }, { "item", "C" }, { "avg_monthly_sales", 50.000000 }, { "sum_sales", 60.000000 } } };
        long year = 2020L;
        string orderby = "item";
        var result = new List<dynamic>(v2.Where(v => (v["d_year"] == year)).OrderBy(v => new dynamic[] { (v["sum_sales"] - v["avg_monthly_sales"]), v["item"] }).Select(v => v));
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q47_simplified();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
}
