// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct CatalogSale {
    public long cs_sold_date_sk;
    public long cs_item_sk;
    public long cs_bill_cdemo_sk;
    public long cs_promo_sk;
    public long cs_quantity;
    public double cs_list_price;
    public double cs_coupon_amt;
    public double cs_sales_price;
}

public struct CustomerDemo {
    public long cd_demo_sk;
    public string cd_gender;
    public string cd_marital_status;
    public string cd_education_status;
}

public struct DateDim {
    public long d_date_sk;
    public long d_year;
}

public struct Item {
    public long i_item_sk;
    public string i_item_id;
}

public struct Promotion {
    public long p_promo_sk;
    public string p_channel_email;
    public string p_channel_event;
}

public class Program {
    static void test_TPCDS_Q26_demographic_averages() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_id", "ITEM1" }, { "agg1", 10.000000 }, { "agg2", 100.000000 }, { "agg3", 5.000000 }, { "agg4", 95.000000 } } }));
    }
    
    public static void Main() {
        var catalog_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cs_sold_date_sk", 1L }, { "cs_item_sk", 1L }, { "cs_bill_cdemo_sk", 1L }, { "cs_promo_sk", 1L }, { "cs_quantity", 10L }, { "cs_list_price", 100.000000 }, { "cs_coupon_amt", 5.000000 }, { "cs_sales_price", 95.000000 } }, new Dictionary<string, dynamic> { { "cs_sold_date_sk", 1L }, { "cs_item_sk", 2L }, { "cs_bill_cdemo_sk", 2L }, { "cs_promo_sk", 2L }, { "cs_quantity", 5L }, { "cs_list_price", 50.000000 }, { "cs_coupon_amt", 2.000000 }, { "cs_sales_price", 48.000000 } } };
        var customer_demographics = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cd_demo_sk", 1L }, { "cd_gender", "M" }, { "cd_marital_status", "S" }, { "cd_education_status", "College" } }, new Dictionary<string, dynamic> { { "cd_demo_sk", 2L }, { "cd_gender", "F" }, { "cd_marital_status", "M" }, { "cd_education_status", "High School" } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_year", 2000L } } };
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_sk", 1L }, { "i_item_id", "ITEM1" } }, new Dictionary<string, dynamic> { { "i_item_sk", 2L }, { "i_item_id", "ITEM2" } } };
        var promotion = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "p_promo_sk", 1L }, { "p_channel_email", "N" }, { "p_channel_event", "Y" } }, new Dictionary<string, dynamic> { { "p_promo_sk", 2L }, { "p_channel_email", "Y" }, { "p_channel_event", "N" } } };
        var result = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var cs in catalog_sales) {
        foreach (var cd in customer_demographics) {
            if (!((cs["cs_bill_cdemo_sk"] == cd["cd_demo_sk"]))) continue;
            if (!((cd.cd_gender == "M"))) continue;
            if (!((cd.cd_marital_status == "S"))) continue;
            if (!((cd.cd_education_status == "College"))) continue;
            foreach (var d in date_dim) {
                if (!((cs["cs_sold_date_sk"] == d["d_date_sk"]))) continue;
                if (!((d.d_year == 2000L))) continue;
                foreach (var i in item) {
                    if (!((cs["cs_item_sk"] == i["i_item_sk"]))) continue;
                    foreach (var p in promotion) {
                        if (!((cs["cs_promo_sk"] == p["p_promo_sk"]))) continue;
                        if (!((((p.p_channel_email == "N") || (p.p_channel_event == "N"))))) continue;
                        var key = i["i_item_id"];
                        var ks = Convert.ToString(key);
                        if (!groups.TryGetValue(ks, out var g)) {
                            g = new _Group(key);
                            groups[ks] = g;
                            order.Add(ks);
                        }
                        g.Items.Add(cs);
                    }
                }
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "i_item_id", g["key"] }, { "agg1", _avg(new List<dynamic>(g.Select(x => x.cs_quantity))) }, { "agg2", _avg(new List<dynamic>(g.Select(x => x.cs_list_price))) }, { "agg3", _avg(new List<dynamic>(g.Select(x => x.cs_coupon_amt))) }, { "agg4", _avg(new List<dynamic>(g.Select(x => x.cs_sales_price))) } });
    }
    return _res;
})();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q26_demographic_averages();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _avg(dynamic v) {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
