// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q75_simplified() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "prev_year", 2000L }, { "year", 2001L }, { "i_brand_id", 1L }, { "i_class_id", 2L }, { "i_category_id", 3L }, { "i_manufact_id", 4L }, { "prev_yr_cnt", 100L }, { "curr_yr_cnt", 80L }, { "sales_cnt_diff", (-20L) }, { "sales_amt_diff", (-200.000000) } } }));
    }
    
    public static void Main() {
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_year", 2000L } }, new Dictionary<string, long> { { "d_date_sk", 2L }, { "d_year", 2001L } } };
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_item_sk", 1L }, { "ss_quantity", 50L }, { "ss_sales_price", 500.000000 }, { "ss_sold_date_sk", 1L } }, new Dictionary<string, dynamic> { { "ss_item_sk", 1L }, { "ss_quantity", 40L }, { "ss_sales_price", 400.000000 }, { "ss_sold_date_sk", 2L } } };
        var web_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ws_item_sk", 1L }, { "ws_quantity", 30L }, { "ws_sales_price", 300.000000 }, { "ws_sold_date_sk", 1L } }, new Dictionary<string, dynamic> { { "ws_item_sk", 1L }, { "ws_quantity", 25L }, { "ws_sales_price", 250.000000 }, { "ws_sold_date_sk", 2L } } };
        var catalog_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cs_item_sk", 1L }, { "cs_quantity", 20L }, { "cs_sales_price", 200.000000 }, { "cs_sold_date_sk", 1L } }, new Dictionary<string, dynamic> { { "cs_item_sk", 1L }, { "cs_quantity", 15L }, { "cs_sales_price", 150.000000 }, { "cs_sold_date_sk", 2L } } };
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_sk", 1L }, { "i_brand_id", 1L }, { "i_class_id", 2L }, { "i_category_id", 3L }, { "i_manufact_id", 4L }, { "i_category", "Electronics" } } };
        var sales_detail = concat(new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var ss in store_sales) {
        foreach (var d in date_dim) {
            if (!((d["d_date_sk"] == ss["ss_sold_date_sk"]))) continue;
            _res.Add(new Dictionary<string, long> { { "d_year", d["d_year"] }, { "i_item_sk", ss["ss_item_sk"] }, { "quantity", ss["ss_quantity"] }, { "amount", ss["ss_sales_price"] } });
        }
    }
    return _res;
})(), new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var ws in web_sales) {
        foreach (var d in date_dim) {
            if (!((d["d_date_sk"] == ws["ws_sold_date_sk"]))) continue;
            _res.Add(new Dictionary<string, long> { { "d_year", d["d_year"] }, { "i_item_sk", ws["ws_item_sk"] }, { "quantity", ws["ws_quantity"] }, { "amount", ws["ws_sales_price"] } });
        }
    }
    return _res;
})(), new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var cs in catalog_sales) {
        foreach (var d in date_dim) {
            if (!((d["d_date_sk"] == cs["cs_sold_date_sk"]))) continue;
            _res.Add(new Dictionary<string, long> { { "d_year", d["d_year"] }, { "i_item_sk", cs["cs_item_sk"] }, { "quantity", cs["cs_quantity"] }, { "amount", cs["cs_sales_price"] } });
        }
    }
    return _res;
})());
        var all_sales = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var sd in sales_detail) {
        foreach (var i in item) {
            if (!((i["i_item_sk"] == sd.i_item_sk))) continue;
            if (!((i.i_category == "Electronics"))) continue;
            var key = new Dictionary<string, dynamic> { { "year", sd.d_year }, { "brand_id", i["i_brand_id"] }, { "class_id", i["i_class_id"] }, { "category_id", i["i_category_id"] }, { "manuf_id", i["i_manufact_id"] } };
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(sd);
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "d_year", g.key.year }, { "i_brand_id", g.key.brand_id }, { "i_class_id", g.key.class_id }, { "i_category_id", g.key.category_id }, { "i_manufact_id", g.key.manuf_id }, { "sales_cnt", _sum(new List<dynamic>(g.Select(x => x.sd.quantity))) }, { "sales_amt", _sum(new List<dynamic>(g.Select(x => x.sd.amount))) } });
    }
    return _res;
})();
        var prev_yr = first(new List<dynamic>(all_sales.Select(a => a)));
        var curr_yr = first(new List<dynamic>(all_sales.Select(a => a)));
        var result = ((((curr_yr.sales_cnt / prev_yr.sales_cnt)) < 0.900000) ? new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "prev_year", prev_yr.d_year }, { "year", curr_yr.d_year }, { "i_brand_id", curr_yr.i_brand_id }, { "i_class_id", curr_yr.i_class_id }, { "i_category_id", curr_yr.i_category_id }, { "i_manufact_id", curr_yr.i_manufact_id }, { "prev_yr_cnt", prev_yr.sales_cnt }, { "curr_yr_cnt", curr_yr.sales_cnt }, { "sales_cnt_diff", (curr_yr.sales_cnt - prev_yr.sales_cnt) }, { "sales_amt_diff", (curr_yr.sales_amt - prev_yr.sales_amt) } } } : new dynamic[] { });
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q75_simplified();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
