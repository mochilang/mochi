// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct StoreSale {
    public long ss_item_sk;
    public long ss_sold_date_sk;
    public long ss_customer_sk;
    public long ss_quantity;
    public double ss_sales_price;
}

public struct DateDim {
    public long d_date_sk;
    public long d_year;
    public long d_moy;
}

public struct Item {
    public long i_item_sk;
}

public struct CatalogSale {
    public long cs_sold_date_sk;
    public long cs_item_sk;
    public long cs_bill_customer_sk;
    public long cs_quantity;
    public double cs_list_price;
}

public struct WebSale {
    public long ws_sold_date_sk;
    public long ws_item_sk;
    public long ws_bill_customer_sk;
    public long ws_quantity;
    public double ws_list_price;
}

public class Program {
    static void test_TPCDS_Q23_cross_channel_sales() {
        expect((result == 50.000000));
    }
    
    public static void Main() {
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_item_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_customer_sk", 1L }, { "ss_quantity", 1L }, { "ss_sales_price", 10.000000 } }, new Dictionary<string, dynamic> { { "ss_item_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_customer_sk", 1L }, { "ss_quantity", 1L }, { "ss_sales_price", 10.000000 } }, new Dictionary<string, dynamic> { { "ss_item_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_customer_sk", 1L }, { "ss_quantity", 1L }, { "ss_sales_price", 10.000000 } }, new Dictionary<string, dynamic> { { "ss_item_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_customer_sk", 1L }, { "ss_quantity", 1L }, { "ss_sales_price", 10.000000 } }, new Dictionary<string, dynamic> { { "ss_item_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_customer_sk", 1L }, { "ss_quantity", 1L }, { "ss_sales_price", 10.000000 } }, new Dictionary<string, dynamic> { { "ss_item_sk", 2L }, { "ss_sold_date_sk", 1L }, { "ss_customer_sk", 2L }, { "ss_quantity", 1L }, { "ss_sales_price", 10.000000 } }, new Dictionary<string, dynamic> { { "ss_item_sk", 2L }, { "ss_sold_date_sk", 1L }, { "ss_customer_sk", 2L }, { "ss_quantity", 1L }, { "ss_sales_price", 10.000000 } }, new Dictionary<string, dynamic> { { "ss_item_sk", 2L }, { "ss_sold_date_sk", 1L }, { "ss_customer_sk", 2L }, { "ss_quantity", 1L }, { "ss_sales_price", 10.000000 } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_year", 2000L }, { "d_moy", 1L } } };
        Dictionary<string, long>[] item = new Dictionary<string, long>[] { new Dictionary<string, long> { { "i_item_sk", 1L } }, new Dictionary<string, long> { { "i_item_sk", 2L } } };
        var catalog_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cs_sold_date_sk", 1L }, { "cs_item_sk", 1L }, { "cs_bill_customer_sk", 1L }, { "cs_quantity", 2L }, { "cs_list_price", 10.000000 } }, new Dictionary<string, dynamic> { { "cs_sold_date_sk", 1L }, { "cs_item_sk", 2L }, { "cs_bill_customer_sk", 2L }, { "cs_quantity", 2L }, { "cs_list_price", 10.000000 } } };
        var web_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ws_sold_date_sk", 1L }, { "ws_item_sk", 1L }, { "ws_bill_customer_sk", 1L }, { "ws_quantity", 3L }, { "ws_list_price", 10.000000 } }, new Dictionary<string, dynamic> { { "ws_sold_date_sk", 1L }, { "ws_item_sk", 2L }, { "ws_bill_customer_sk", 2L }, { "ws_quantity", 1L }, { "ws_list_price", 10.000000 } } };
        var frequent_ss_items = new Func<List<dynamic>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var ss in store_sales) {
        foreach (var d in date_dim) {
            if (!((ss["ss_sold_date_sk"] == d["d_date_sk"]))) continue;
            if (!((d.d_year == 2000L))) continue;
            foreach (var i in item) {
                if (!((ss["ss_item_sk"] == i["i_item_sk"]))) continue;
                var key = new Dictionary<string, long> { { "item_sk", i["i_item_sk"] }, { "date_sk", d["d_date_sk"] } };
                var ks = Convert.ToString(key);
                if (!groups.TryGetValue(ks, out var g)) {
                    g = new _Group(key);
                    groups[ks] = g;
                    order.Add(ks);
                }
                g.Items.Add(ss);
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<dynamic>();
    foreach (var g in items) {
        _res.Add(g["key"].item_sk);
    }
    return _res;
})();
        var customer_totals = _group_by(store_sales, ss => ss["ss_customer_sk"]).Select(g => new Dictionary<string, dynamic> { { "cust", g["key"] }, { "sales", _sum(new List<dynamic>(g.Select(x => (x.ss_quantity * x.ss_sales_price)))) } }).ToList();
        var max_sales = _max(new List<dynamic>(customer_totals.Select(c => c["sales"])));
        var best_ss_customer = new List<dynamic>(customer_totals.Where(c => (c["sales"] > (0.950000 * max_sales))).Select(c => c["cust"]));
        var catalog = new Func<List<dynamic>>(() => {
    var _res = new List<dynamic>();
    foreach (var cs in catalog_sales) {
        foreach (var d in date_dim) {
            if (!((cs["cs_sold_date_sk"] == d["d_date_sk"]))) continue;
            if (!((d.d_year == 2000L))) continue;
            if (!((d.d_moy == 1L))) continue;
            if (_in(cs["cs_bill_customer_sk"], best_ss_customer) && _in(cs["cs_item_sk"], frequent_ss_items)) {
                _res.Add((cs["cs_quantity"] * cs["cs_list_price"]));
            }
        }
    }
    return _res;
})();
        var web = new Func<List<dynamic>>(() => {
    var _res = new List<dynamic>();
    foreach (var ws in web_sales) {
        foreach (var d in date_dim) {
            if (!((ws["ws_sold_date_sk"] == d["d_date_sk"]))) continue;
            if (!((d.d_year == 2000L))) continue;
            if (!((d.d_moy == 1L))) continue;
            if (_in(ws["ws_bill_customer_sk"], best_ss_customer) && _in(ws["ws_item_sk"], frequent_ss_items)) {
                _res.Add((ws["ws_quantity"] * ws["ws_list_price"]));
            }
        }
    }
    return _res;
})();
        double result = (_sum(catalog) + _sum(web));
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q23_cross_channel_sales();
    }
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn) {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src) {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }
    
    static dynamic _max(dynamic v) {
        if (v == null) return 0;
        System.Collections.IEnumerable list = v is _Group g ? g.Items : v as System.Collections.IEnumerable;
        if (list == null) return 0;
        var it = list.GetEnumerator();
        if (!it.MoveNext()) return 0;
        dynamic m = it.Current;
        var cmp = System.Collections.Generic.Comparer<dynamic>.Default;
        while (it.MoveNext()) {
            dynamic x = it.Current; if (cmp.Compare(x, m) > 0) m = x;
        }
        return m;
    }
    
    static bool _in(dynamic item, dynamic col) {
        if (col is string s && item is string sub) {
            return s.Contains(sub);
        }
        if (col is System.Collections.IDictionary d) {
            return d.Contains(item);
        }
        if (col is System.Collections.IEnumerable e) {
            foreach (var it in e) {
                if (Equals(it, item)) return true;
            }
            return false;
        }
        return false;
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
