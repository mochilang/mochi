// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct StoreSale
{
    public long ss_sold_date_sk;
    public long ss_item_sk;
    public long ss_customer_sk;
    public long ss_store_sk;
    public double ss_ext_sales_price;
}

public struct DateDim
{
    public long d_date_sk;
    public long d_year;
    public long d_moy;
}

public struct Item
{
    public long i_item_sk;
    public long i_brand_id;
    public string i_brand;
    public long i_manufact_id;
    public string i_manufact;
    public long i_manager_id;
}

public struct Customer
{
    public long c_customer_sk;
    public long c_current_addr_sk;
}

public struct CustomerAddress
{
    public long ca_address_sk;
    public string ca_zip;
}

public struct Store
{
    public long s_store_sk;
    public string s_zip;
}

public class Program
{
    static void test_TPCDS_Q19_brand()
    {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_brand", "B1" }, { "i_brand_id", 1L }, { "i_manufact_id", 1L }, { "i_manufact", "M1" }, { "ext_price", 100.000000 } } }));
    }

    public static void Main()
    {
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_sold_date_sk", 1L }, { "ss_item_sk", 1L }, { "ss_customer_sk", 1L }, { "ss_store_sk", 1L }, { "ss_ext_sales_price", 100.000000 } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_year", 1999L }, { "d_moy", 11L } } };
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_sk", 1L }, { "i_brand_id", 1L }, { "i_brand", "B1" }, { "i_manufact_id", 1L }, { "i_manufact", "M1" }, { "i_manager_id", 10L } } };
        Dictionary<string, long>[] customer = new Dictionary<string, long>[] { new Dictionary<string, long> { { "c_customer_sk", 1L }, { "c_current_addr_sk", 1L } } };
        var customer_address = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ca_address_sk", 1L }, { "ca_zip", "11111" } } };
        var store = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "s_store_sk", 1L }, { "s_zip", "99999" } } };
        var result = new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var groups = new Dictionary<string, _Group>();
            var order = new List<string>();
            foreach (var d in date_dim)
            {
                if (!((d["d_moy"] == 11L))) continue;
                if (!((d["d_year"] == 1999L))) continue;
                foreach (var ss in store_sales)
                {
                    if (!((ss["ss_sold_date_sk"] == d["d_date_sk"]))) continue;
                    foreach (var i in item)
                    {
                        if (!(((ss["ss_item_sk"] == i["i_item_sk"]) && (i["i_manager_id"] == 10L)))) continue;
                        foreach (var c in customer)
                        {
                            if (!((ss["ss_customer_sk"] == c["c_customer_sk"]))) continue;
                            foreach (var ca in customer_address)
                            {
                                if (!((c["c_current_addr_sk"] == ca["ca_address_sk"]))) continue;
                                foreach (var s in store)
                                {
                                    if (!(((ss["ss_store_sk"] == s["s_store_sk"]) && (substr(ca["ca_zip"], 0L, 5L) != substr(s["s_zip"], 0L, 5L))))) continue;
                                    var key = new Dictionary<string, dynamic> { { "brand", i["i_brand"] }, { "brand_id", i["i_brand_id"] }, { "man_id", i["i_manufact_id"] }, { "man", i["i_manufact"] } };
                                    var ks = Convert.ToString(key);
                                    if (!groups.TryGetValue(ks, out var g))
                                    {
                                        g = new _Group(key);
                                        groups[ks] = g;
                                        order.Add(ks);
                                    }
                                    g.Items.Add(d);
                                }
                            }
                        }
                    }
                }
            }
            var items = new List<_Group>();
            foreach (var ks in order) items.Add(groups[ks]);
            items = items.OrderBy(g => new dynamic[] { g["key"].brand }).ToList();
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var g in items)
            {
                _res.Add(new Dictionary<string, dynamic> { { "i_brand", g["key"].brand }, { "i_brand_id", g["key"].brand_id }, { "i_manufact_id", g["key"].man_id }, { "i_manufact", g["key"].man }, { "ext_price", _sum(new List<dynamic>(g.Select(x => x.ss_ext_sales_price))) } });
            }
            return _res;
        })();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q19_brand();
    }
    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

    public class _Group
    {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }

}
