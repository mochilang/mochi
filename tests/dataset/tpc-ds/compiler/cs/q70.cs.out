// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q70_simplified() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "s_state", "CA" }, { "s_county", "Orange" }, { "total_sum", 15.000000 } }, new Dictionary<string, dynamic> { { "s_state", "TX" }, { "s_county", "Travis" }, { "total_sum", 20.000000 } } }));
    }
    
    public static void Main() {
        var store = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "s_store_sk", 1L }, { "s_state", "CA" }, { "s_county", "Orange" } }, new Dictionary<string, dynamic> { { "s_store_sk", 2L }, { "s_state", "CA" }, { "s_county", "Orange" } }, new Dictionary<string, dynamic> { { "s_store_sk", 3L }, { "s_state", "TX" }, { "s_county", "Travis" } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_month_seq", 1200L } }, new Dictionary<string, long> { { "d_date_sk", 2L }, { "d_month_seq", 1201L } } };
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_sold_date_sk", 1L }, { "ss_store_sk", 1L }, { "ss_net_profit", 10.000000 } }, new Dictionary<string, dynamic> { { "ss_sold_date_sk", 1L }, { "ss_store_sk", 2L }, { "ss_net_profit", 5.000000 } }, new Dictionary<string, dynamic> { { "ss_sold_date_sk", 2L }, { "ss_store_sk", 3L }, { "ss_net_profit", 20.000000 } } };
        long dms = 1200L;
        var result = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var ss in store_sales) {
        foreach (var d in date_dim) {
            if (!((d["d_date_sk"] == ss["ss_sold_date_sk"]))) continue;
            foreach (var s in store) {
                if (!((s["s_store_sk"] == ss["ss_store_sk"]))) continue;
                if ((d.d_month_seq >= dms) && (d.d_month_seq <= (dms + 11L))) {
                    var key = new Dictionary<string, dynamic> { { "state", s["s_state"] }, { "county", s["s_county"] } };
                    var ks = Convert.ToString(key);
                    if (!groups.TryGetValue(ks, out var g)) {
                        g = new _Group(key);
                        groups[ks] = g;
                        order.Add(ks);
                    }
                    g.Items.Add(ss);
                }
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    items = items.OrderBy(g => new dynamic[] { g["key"].state, g["key"].county }).ToList();
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "s_state", g["key"].state }, { "s_county", g["key"].county }, { "total_sum", _sum(new List<dynamic>(g.Select(x => x.ss.ss_net_profit))) } });
    }
    return _res;
})();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q70_simplified();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
