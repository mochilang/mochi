// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q43_simplified() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "s_store_name", "Main" }, { "s_store_id", "S1" }, { "sun_sales", 10.000000 }, { "mon_sales", 20.000000 }, { "tue_sales", 30.000000 }, { "wed_sales", 40.000000 }, { "thu_sales", 50.000000 }, { "fri_sales", 60.000000 }, { "sat_sales", 70.000000 } } }));
    }
    
    public static void Main() {
        var date_dim = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "date_sk", 1L }, { "d_day_name", "Sunday" }, { "d_year", 2020L } }, new Dictionary<string, dynamic> { { "date_sk", 2L }, { "d_day_name", "Monday" }, { "d_year", 2020L } }, new Dictionary<string, dynamic> { { "date_sk", 3L }, { "d_day_name", "Tuesday" }, { "d_year", 2020L } }, new Dictionary<string, dynamic> { { "date_sk", 4L }, { "d_day_name", "Wednesday" }, { "d_year", 2020L } }, new Dictionary<string, dynamic> { { "date_sk", 5L }, { "d_day_name", "Thursday" }, { "d_year", 2020L } }, new Dictionary<string, dynamic> { { "date_sk", 6L }, { "d_day_name", "Friday" }, { "d_year", 2020L } }, new Dictionary<string, dynamic> { { "date_sk", 7L }, { "d_day_name", "Saturday" }, { "d_year", 2020L } } };
        var store = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "store_sk", 1L }, { "store_id", "S1" }, { "store_name", "Main" }, { "gmt_offset", 0L } } };
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "sold_date_sk", 1L }, { "store_sk", 1L }, { "sales_price", 10.000000 } }, new Dictionary<string, dynamic> { { "sold_date_sk", 2L }, { "store_sk", 1L }, { "sales_price", 20.000000 } }, new Dictionary<string, dynamic> { { "sold_date_sk", 3L }, { "store_sk", 1L }, { "sales_price", 30.000000 } }, new Dictionary<string, dynamic> { { "sold_date_sk", 4L }, { "store_sk", 1L }, { "sales_price", 40.000000 } }, new Dictionary<string, dynamic> { { "sold_date_sk", 5L }, { "store_sk", 1L }, { "sales_price", 50.000000 } }, new Dictionary<string, dynamic> { { "sold_date_sk", 6L }, { "store_sk", 1L }, { "sales_price", 60.000000 } }, new Dictionary<string, dynamic> { { "sold_date_sk", 7L }, { "store_sk", 1L }, { "sales_price", 70.000000 } } };
        long year = 2020L;
        long gmt = 0L;
        var records = new Func<List<Dictionary<string, dynamic>>>(() => {
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var d in date_dim) {
        foreach (var ss in store_sales) {
            if (!((ss["sold_date_sk"] == d["date_sk"]))) continue;
            foreach (var s in store) {
                if (!((ss["store_sk"] == s["store_sk"]))) continue;
                if ((s.gmt_offset == gmt) && (d["d_year"] == year)) {
                    _res.Add(new Dictionary<string, dynamic> { { "d_day_name", d["d_day_name"] }, { "s_store_name", s["store_name"] }, { "s_store_id", s["store_id"] }, { "price", ss["sales_price"] } });
                }
            }
        }
    }
    return _res;
})();
        var base = _group_by(records, r => new Dictionary<string, dynamic> { { "name", r["s_store_name"] }, { "id", r["s_store_id"] } }).Select(g => new Dictionary<string, dynamic> { { "s_store_name", g["key"].name }, { "s_store_id", g["key"].id }, { "sun_sales", _sum(new List<dynamic>(g.Select(x => ((x.d_day_name == "Sunday") ? x.price : 0.000000)))) }, { "mon_sales", _sum(new List<dynamic>(g.Select(x => ((x.d_day_name == "Monday") ? x.price : 0.000000)))) }, { "tue_sales", _sum(new List<dynamic>(g.Select(x => ((x.d_day_name == "Tuesday") ? x.price : 0.000000)))) }, { "wed_sales", _sum(new List<dynamic>(g.Select(x => ((x.d_day_name == "Wednesday") ? x.price : 0.000000)))) }, { "thu_sales", _sum(new List<dynamic>(g.Select(x => ((x.d_day_name == "Thursday") ? x.price : 0.000000)))) }, { "fri_sales", _sum(new List<dynamic>(g.Select(x => ((x.d_day_name == "Friday") ? x.price : 0.000000)))) }, { "sat_sales", _sum(new List<dynamic>(g.Select(x => ((x.d_day_name == "Saturday") ? x.price : 0.000000)))) } }).ToList();
        var result = base;
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q43_simplified();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    static List<_Group> _group_by(IEnumerable<dynamic> src, Func<dynamic, dynamic> keyfn) {
        var groups = new Dictionary<string, _Group>();
        var order = new List<string>();
        foreach (var it in src) {
            var key = keyfn(it);
            var ks = Convert.ToString(key);
            if (!groups.TryGetValue(ks, out var g)) {
                g = new _Group(key);
                groups[ks] = g;
                order.Add(ks);
            }
            g.Items.Add(it);
        }
        var res = new List<_Group>();
        foreach (var k in order) res.Add(groups[k]);
        return res;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
