// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q7_empty() {
        expect((result.Length == 0L));
    }
    
    public static void Main() {
        var store_sales = new dynamic[] { };
        var customer_demographics = new dynamic[] { };
        var date_dim = new dynamic[] { };
        var item = new dynamic[] { };
        var promotion = new dynamic[] { };
        var result = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var ss in store_sales) {
        foreach (var cd in customer_demographics) {
            if (!((ss.ss_cdemo_sk == cd.cd_demo_sk))) continue;
            if (!((cd.cd_gender == "M"))) continue;
            if (!((cd.cd_marital_status == "S"))) continue;
            if (!((cd.cd_education_status == "College"))) continue;
            foreach (var d in date_dim) {
                if (!((ss.ss_sold_date_sk == d.d_date_sk))) continue;
                if (!((d.d_year == 1998L))) continue;
                foreach (var i in item) {
                    if (!((ss.ss_item_sk == i.i_item_sk))) continue;
                    foreach (var p in promotion) {
                        if (!((ss.ss_promo_sk == p.p_promo_sk))) continue;
                        if (!((((p.p_channel_email == "N") || (p.p_channel_event == "N"))))) continue;
                        var key = new Dictionary<string, dynamic> { { "i_item_id", i.i_item_id } };
                        var ks = Convert.ToString(key);
                        if (!groups.TryGetValue(ks, out var g)) {
                            g = new _Group(key);
                            groups[ks] = g;
                            order.Add(ks);
                        }
                        g.Items.Add(ss);
                    }
                }
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    items = items.OrderBy(g => g.key.i_item_id).ToList();
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "i_item_id", g.key.i_item_id }, { "agg1", _avg(new List<dynamic>(g.Select(x => x.ss.ss_quantity))) }, { "agg2", _avg(new List<dynamic>(g.Select(x => x.ss.ss_list_price))) }, { "agg3", _avg(new List<dynamic>(g.Select(x => x.ss.ss_coupon_amt))) }, { "agg4", _avg(new List<dynamic>(g.Select(x => x.ss.ss_sales_price))) } });
    }
    return _res;
})();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q7_empty();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _avg(dynamic v) {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
}
