// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program {
    static void test_TPCDS_Q6_empty() {
        expect((result.Length == 0L));
    }
    
    public static void Main() {
        var customer_address = new dynamic[] { };
        var customer = new dynamic[] { };
        var store_sales = new dynamic[] { };
        var date_dim = new dynamic[] { };
        var item = new dynamic[] { };
        var target_month_seq = _max(new List<dynamic>(date_dim.Select(d => d.d_month_seq)));
        var result = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var a in customer_address) {
        foreach (var c in customer) {
            if (!((a.ca_address_sk == c.c_current_addr_sk))) continue;
            foreach (var s in store_sales) {
                if (!((c.c_customer_sk == s.ss_customer_sk))) continue;
                foreach (var d in date_dim) {
                    if (!((s.ss_sold_date_sk == d.d_date_sk))) continue;
                    foreach (var i in item) {
                        if (!((s.ss_item_sk == i.i_item_sk))) continue;
                        if (!((i.i_current_price > (1.200000 * _avg(new List<dynamic>(item.Where(j => (j.i_category == i.i_category)).Select(j => j.i_current_price))))))) continue;
                        if ((d.d_month_seq == target_month_seq)) {
                            var key = a.ca_state;
                            var ks = Convert.ToString(key);
                            if (!groups.TryGetValue(ks, out var g)) {
                                g = new _Group(key);
                                groups[ks] = g;
                                order.Add(ks);
                            }
                            g.Items.Add(a);
                        }
                    }
                }
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    items = items.OrderBy(g => new long[] { _count(g), g.key }).ToList();
    items = items.Take(100L).ToList();
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "state", g.key }, { "cnt", _count(g) } });
    }
    return _res;
})();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q6_empty();
    }
    static dynamic _max(dynamic v) {
        if (v == null) return 0;
        System.Collections.IEnumerable list = v is _Group g ? g.Items : v as System.Collections.IEnumerable;
        if (list == null) return 0;
        var it = list.GetEnumerator();
        if (!it.MoveNext()) return 0;
        dynamic m = it.Current;
        var cmp = System.Collections.Generic.Comparer<dynamic>.Default;
        while (it.MoveNext()) {
            dynamic x = it.Current; if (cmp.Compare(x, m) > 0) m = x;
        }
        return m;
    }
    
    static int _count(dynamic v) {
        if (v is string) {
            return ((string)v).Length;
        }
        if (v is System.Collections.ICollection c) {
            return c.Count;
        }
        throw new Exception("count() expects list or string");
    }
    
    static double _avg(dynamic v) {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
}
