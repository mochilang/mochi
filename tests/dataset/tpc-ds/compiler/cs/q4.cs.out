// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public class Program
{
    static void test_TPCDS_Q4_result()
    {
        expect((result == new Dictionary<string, string>[] { new Dictionary<string, string> { { "customer_id", "C1" }, { "customer_first_name", "Alice" }, { "customer_last_name", "A" }, { "customer_login", "alice" } } }));
    }

    public static void Main()
    {
        var customer = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "c_customer_sk", 1L }, { "c_customer_id", "C1" }, { "c_first_name", "Alice" }, { "c_last_name", "A" }, { "c_login", "alice" } } };
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_ext_list_price", 10.000000 }, { "ss_ext_wholesale_cost", 5.000000 }, { "ss_ext_discount_amt", 0.000000 }, { "ss_ext_sales_price", 10.000000 } }, new Dictionary<string, dynamic> { { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 2L }, { "ss_ext_list_price", 20.000000 }, { "ss_ext_wholesale_cost", 5.000000 }, { "ss_ext_discount_amt", 0.000000 }, { "ss_ext_sales_price", 20.000000 } } };
        var catalog_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cs_bill_customer_sk", 1L }, { "cs_sold_date_sk", 1L }, { "cs_ext_list_price", 10.000000 }, { "cs_ext_wholesale_cost", 2.000000 }, { "cs_ext_discount_amt", 0.000000 }, { "cs_ext_sales_price", 10.000000 } }, new Dictionary<string, dynamic> { { "cs_bill_customer_sk", 1L }, { "cs_sold_date_sk", 2L }, { "cs_ext_list_price", 30.000000 }, { "cs_ext_wholesale_cost", 2.000000 }, { "cs_ext_discount_amt", 0.000000 }, { "cs_ext_sales_price", 30.000000 } } };
        var web_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ws_bill_customer_sk", 1L }, { "ws_sold_date_sk", 1L }, { "ws_ext_list_price", 10.000000 }, { "ws_ext_wholesale_cost", 5.000000 }, { "ws_ext_discount_amt", 0.000000 }, { "ws_ext_sales_price", 10.000000 } }, new Dictionary<string, dynamic> { { "ws_bill_customer_sk", 1L }, { "ws_sold_date_sk", 2L }, { "ws_ext_list_price", 12.000000 }, { "ws_ext_wholesale_cost", 5.000000 }, { "ws_ext_discount_amt", 0.000000 }, { "ws_ext_sales_price", 12.000000 } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_year", 2001L } }, new Dictionary<string, long> { { "d_date_sk", 2L }, { "d_year", 2002L } } };
        var year_total = _union_all(_union_all((new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var groups = new Dictionary<string, _Group>();
            var order = new List<string>();
            foreach (var c in customer)
            {
                foreach (var s in store_sales)
                {
                    if (!((c["c_customer_sk"] == s["ss_customer_sk"]))) continue;
                    foreach (var d in date_dim)
                    {
                        if (!((s["ss_sold_date_sk"] == d["d_date_sk"]))) continue;
                        var key = new Dictionary<string, dynamic> { { "id", c["c_customer_id"] }, { "first", c["c_first_name"] }, { "last", c["c_last_name"] }, { "login", c["c_login"] }, { "year", d["d_year"] } };
                        var ks = Convert.ToString(key);
                        if (!groups.TryGetValue(ks, out var g))
                        {
                            g = new _Group(key);
                            groups[ks] = g;
                            order.Add(ks);
                        }
                        g.Items.Add(c);
                    }
                }
            }
            var items = new List<_Group>();
            foreach (var ks in order) items.Add(groups[ks]);
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var g in items)
            {
                _res.Add(new Dictionary<string, dynamic> { { "customer_id", g["key"].id }, { "customer_first_name", g["key"].first }, { "customer_last_name", g["key"].last }, { "customer_login", g["key"].login }, { "dyear", g["key"].year }, { "year_total", _sum(new List<dynamic>(g.Select(x => ((((((x.ss_ext_list_price - x.ss_ext_wholesale_cost) - x.ss_ext_discount_amt)) + x.ss_ext_sales_price)) / 2L)))) }, { "sale_type", "s" } });
            }
            return _res;
        })()), (new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var groups = new Dictionary<string, _Group>();
            var order = new List<string>();
            foreach (var c in customer)
            {
                foreach (var cs in catalog_sales)
                {
                    if (!((c["c_customer_sk"] == cs["cs_bill_customer_sk"]))) continue;
                    foreach (var d in date_dim)
                    {
                        if (!((cs["cs_sold_date_sk"] == d["d_date_sk"]))) continue;
                        var key = new Dictionary<string, dynamic> { { "id", c["c_customer_id"] }, { "first", c["c_first_name"] }, { "last", c["c_last_name"] }, { "login", c["c_login"] }, { "year", d["d_year"] } };
                        var ks = Convert.ToString(key);
                        if (!groups.TryGetValue(ks, out var g))
                        {
                            g = new _Group(key);
                            groups[ks] = g;
                            order.Add(ks);
                        }
                        g.Items.Add(c);
                    }
                }
            }
            var items = new List<_Group>();
            foreach (var ks in order) items.Add(groups[ks]);
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var g in items)
            {
                _res.Add(new Dictionary<string, dynamic> { { "customer_id", g["key"].id }, { "customer_first_name", g["key"].first }, { "customer_last_name", g["key"].last }, { "customer_login", g["key"].login }, { "dyear", g["key"].year }, { "year_total", _sum(new List<dynamic>(g.Select(x => ((((((x.cs_ext_list_price - x.cs_ext_wholesale_cost) - x.cs_ext_discount_amt)) + x.cs_ext_sales_price)) / 2L)))) }, { "sale_type", "c" } });
            }
            return _res;
        })())), (new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var groups = new Dictionary<string, _Group>();
            var order = new List<string>();
            foreach (var c in customer)
            {
                foreach (var ws in web_sales)
                {
                    if (!((c["c_customer_sk"] == ws["ws_bill_customer_sk"]))) continue;
                    foreach (var d in date_dim)
                    {
                        if (!((ws["ws_sold_date_sk"] == d["d_date_sk"]))) continue;
                        var key = new Dictionary<string, dynamic> { { "id", c["c_customer_id"] }, { "first", c["c_first_name"] }, { "last", c["c_last_name"] }, { "login", c["c_login"] }, { "year", d["d_year"] } };
                        var ks = Convert.ToString(key);
                        if (!groups.TryGetValue(ks, out var g))
                        {
                            g = new _Group(key);
                            groups[ks] = g;
                            order.Add(ks);
                        }
                        g.Items.Add(c);
                    }
                }
            }
            var items = new List<_Group>();
            foreach (var ks in order) items.Add(groups[ks]);
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var g in items)
            {
                _res.Add(new Dictionary<string, dynamic> { { "customer_id", g["key"].id }, { "customer_first_name", g["key"].first }, { "customer_last_name", g["key"].last }, { "customer_login", g["key"].login }, { "dyear", g["key"].year }, { "year_total", _sum(new List<dynamic>(g.Select(x => ((((((x.ws_ext_list_price - x.ws_ext_wholesale_cost) - x.ws_ext_discount_amt)) + x.ws_ext_sales_price)) / 2L)))) }, { "sale_type", "w" } });
            }
            return _res;
        })()));
        var result = new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var s1 in year_total)
            {
                if (!((s1["sale_type"] == "s"))) continue;
                if (!((s1["dyear"] == 2001L))) continue;
                if (!((s1["year_total"] > 0L))) continue;
                foreach (var s2 in year_total)
                {
                    if (!((s2["customer_id"] == s1["customer_id"]))) continue;
                    if (!((s2.sale_type == "s"))) continue;
                    if (!((s2.dyear == 2002L))) continue;
                    foreach (var c1 in year_total)
                    {
                        if (!((c1["customer_id"] == s1["customer_id"]))) continue;
                        if (!((c1.sale_type == "c"))) continue;
                        if (!((c1.dyear == 2001L))) continue;
                        if (!((c1.year_total > 0L))) continue;
                        foreach (var c2 in year_total)
                        {
                            if (!((c2["customer_id"] == s1["customer_id"]))) continue;
                            if (!((c2.sale_type == "c"))) continue;
                            if (!((c2.dyear == 2002L))) continue;
                            foreach (var w1 in year_total)
                            {
                                if (!((w1["customer_id"] == s1["customer_id"]))) continue;
                                if (!((w1.sale_type == "w"))) continue;
                                if (!((w1.dyear == 2001L))) continue;
                                if (!((w1.year_total > 0L))) continue;
                                foreach (var w2 in year_total)
                                {
                                    if (!((w2["customer_id"] == s1["customer_id"]))) continue;
                                    if (!((w2.sale_type == "w"))) continue;
                                    if (!((w2.dyear == 2002L))) continue;
                                    if (((((c1.year_total > 0L) ? (c2.year_total / c1.year_total) : null)) > (((s1["year_total"] > 0L) ? (s2.year_total / s1["year_total"]) : null))) && ((((c1.year_total > 0L) ? (c2.year_total / c1.year_total) : null)) > (((w1.year_total > 0L) ? (w2.year_total / w1.year_total) : null))))
                                    {
                                        _res.Add(new Dictionary<string, dynamic> { { "customer_id", s2["customer_id"] }, { "customer_first_name", s2["customer_first_name"] }, { "customer_last_name", s2["customer_last_name"] }, { "customer_login", s2["customer_login"] } });
                                    }
                                }
                            }
                        }
                    }
                }
            }
            _res = _res.OrderBy(s1 => new dynamic[] { s2.customer_id, s2.customer_first_name, s2.customer_last_name, s2.customer_login }).ToList();
            return _res;
        })();
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q4_result();
    }
    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

    public class _Group
    {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }

    static List<dynamic> _union_all(IEnumerable<dynamic> a, IEnumerable<dynamic> b)
    {
        var res = new List<dynamic>();
        if (a != null) foreach (var it in a) res.Add(it);
        if (b != null) foreach (var it in b) res.Add(it);
        return res;
    }

}
