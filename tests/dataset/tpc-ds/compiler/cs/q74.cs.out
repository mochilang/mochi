// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;

public class Program {
    static void test_TPCDS_Q74_simplified() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "customer_id", 1L }, { "customer_first_name", "Alice" }, { "customer_last_name", "Smith" } } }));
    }
    
    public static void Main() {
        var customer = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "c_customer_sk", 1L }, { "c_customer_id", 1L }, { "c_first_name", "Alice" }, { "c_last_name", "Smith" } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_year", 1998L } }, new Dictionary<string, long> { { "d_date_sk", 2L }, { "d_year", 1999L } } };
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 1L }, { "ss_net_paid", 100.000000 } }, new Dictionary<string, dynamic> { { "ss_customer_sk", 1L }, { "ss_sold_date_sk", 2L }, { "ss_net_paid", 110.000000 } } };
        var web_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ws_bill_customer_sk", 1L }, { "ws_sold_date_sk", 1L }, { "ws_net_paid", 40.000000 } }, new Dictionary<string, dynamic> { { "ws_bill_customer_sk", 1L }, { "ws_sold_date_sk", 2L }, { "ws_net_paid", 80.000000 } } };
        var year_total = concat(new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var c in customer) {
        foreach (var ss in store_sales) {
            if (!((c["c_customer_sk"] == ss["ss_customer_sk"]))) continue;
            foreach (var d in date_dim) {
                if (!((d["d_date_sk"] == ss["ss_sold_date_sk"]))) continue;
                if (!(((d.d_year == 1998L) || (d.d_year == 1999L)))) continue;
                var key = new Dictionary<string, dynamic> { { "id", c["c_customer_id"] }, { "first", c["c_first_name"] }, { "last", c["c_last_name"] }, { "year", d["d_year"] } };
                var ks = Convert.ToString(key);
                if (!groups.TryGetValue(ks, out var g)) {
                    g = new _Group(key);
                    groups[ks] = g;
                    order.Add(ks);
                }
                g.Items.Add(c);
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "customer_id", g["key"].id }, { "customer_first_name", g["key"].first }, { "customer_last_name", g["key"].last }, { "year", g["key"].year }, { "year_total", _sum(new List<dynamic>(g.Select(x => x.ss.ss_net_paid))) }, { "sale_type", "s" } });
    }
    return _res;
})(), new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var c in customer) {
        foreach (var ws in web_sales) {
            if (!((c["c_customer_sk"] == ws["ws_bill_customer_sk"]))) continue;
            foreach (var d in date_dim) {
                if (!((d["d_date_sk"] == ws["ws_sold_date_sk"]))) continue;
                if (!(((d.d_year == 1998L) || (d.d_year == 1999L)))) continue;
                var key = new Dictionary<string, dynamic> { { "id", c["c_customer_id"] }, { "first", c["c_first_name"] }, { "last", c["c_last_name"] }, { "year", d["d_year"] } };
                var ks = Convert.ToString(key);
                if (!groups.TryGetValue(ks, out var g)) {
                    g = new _Group(key);
                    groups[ks] = g;
                    order.Add(ks);
                }
                g.Items.Add(c);
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "customer_id", g["key"].id }, { "customer_first_name", g["key"].first }, { "customer_last_name", g["key"].last }, { "year", g["key"].year }, { "year_total", _sum(new List<dynamic>(g.Select(x => x.ws.ws_net_paid))) }, { "sale_type", "w" } });
    }
    return _res;
})());
        var s_firstyear = first(new List<dynamic>(year_total.Select(y => y)));
        var s_secyear = first(new List<dynamic>(year_total.Select(y => y)));
        var w_firstyear = first(new List<dynamic>(year_total.Select(y => y)));
        var w_secyear = first(new List<dynamic>(year_total.Select(y => y)));
        var result = ((((s_firstyear.year_total > 0L) && (w_firstyear.year_total > 0L)) && (((w_secyear.year_total / w_firstyear.year_total)) > ((s_secyear.year_total / s_firstyear.year_total)))) ? new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "customer_id", s_secyear.customer_id }, { "customer_first_name", s_secyear.customer_first_name }, { "customer_last_name", s_secyear.customer_last_name } } } : new dynamic[] { });
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q74_simplified();
    }
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
}
