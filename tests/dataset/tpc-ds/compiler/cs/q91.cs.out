// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;

public struct CallCenter {
    public long cc_call_center_sk;
    public string cc_call_center_id;
    public string cc_name;
    public string cc_manager;
}

public struct CatalogReturn {
    public long cr_call_center_sk;
    public long cr_returned_date_sk;
    public long cr_returning_customer_sk;
    public double cr_net_loss;
}

public struct DateDim {
    public long d_date_sk;
    public long d_year;
    public long d_moy;
}

public struct Customer {
    public long c_customer_sk;
    public long c_current_cdemo_sk;
    public long c_current_hdemo_sk;
    public long c_current_addr_sk;
}

public struct CustomerAddress {
    public long ca_address_sk;
    public long ca_gmt_offset;
}

public struct CustomerDemographics {
    public long cd_demo_sk;
    public string cd_marital_status;
    public string cd_education_status;
}

public struct HouseholdDemographics {
    public long hd_demo_sk;
    public string hd_buy_potential;
}

public class Program {
    static void test_TPCDS_Q91_returns() {
        expect((result == new Dictionary<string, dynamic> { { "Call_Center", "CC1" }, { "Call_Center_Name", "Main" }, { "Manager", "Alice" }, { "Returns_Loss", 10.000000 } }));
    }
    
    public static void Main() {
        var call_center = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cc_call_center_sk", 1L }, { "cc_call_center_id", "CC1" }, { "cc_name", "Main" }, { "cc_manager", "Alice" } } };
        var catalog_returns = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cr_call_center_sk", 1L }, { "cr_returned_date_sk", 1L }, { "cr_returning_customer_sk", 1L }, { "cr_net_loss", 10.000000 } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_year", 2001L }, { "d_moy", 5L } } };
        Dictionary<string, long>[] customer = new Dictionary<string, long>[] { new Dictionary<string, long> { { "c_customer_sk", 1L }, { "c_current_cdemo_sk", 1L }, { "c_current_hdemo_sk", 1L }, { "c_current_addr_sk", 1L } } };
        var customer_demographics = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cd_demo_sk", 1L }, { "cd_marital_status", "M" }, { "cd_education_status", "Unknown" } } };
        var household_demographics = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "hd_demo_sk", 1L }, { "hd_buy_potential", "1001-5000" } } };
        Dictionary<string, long>[] customer_address = new Dictionary<string, long>[] { new Dictionary<string, long> { { "ca_address_sk", 1L }, { "ca_gmt_offset", (-6L) } } };
        var result = first(new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var cc in call_center) {
        foreach (var cr in catalog_returns) {
            if (!((cc["cc_call_center_sk"] == cr["cr_call_center_sk"]))) continue;
            foreach (var d in date_dim) {
                if (!((cr["cr_returned_date_sk"] == d["d_date_sk"]))) continue;
                if (!((d.d_year == 2001L))) continue;
                if (!((d.d_moy == 5L))) continue;
                foreach (var c in customer) {
                    if (!((cr["cr_returning_customer_sk"] == c["c_customer_sk"]))) continue;
                    foreach (var cd in customer_demographics) {
                        if (!((c["c_current_cdemo_sk"] == cd["cd_demo_sk"]))) continue;
                        if (!((cd.cd_marital_status == "M"))) continue;
                        if (!((cd.cd_education_status == "Unknown"))) continue;
                        foreach (var hd in household_demographics) {
                            if (!((c["c_current_hdemo_sk"] == hd["hd_demo_sk"]))) continue;
                            if (!((hd.hd_buy_potential == "1001-5000"))) continue;
                            foreach (var ca in customer_address) {
                                if (!((c["c_current_addr_sk"] == ca["ca_address_sk"]))) continue;
                                if (!((ca.ca_gmt_offset == ((-6L))))) continue;
                                var key = new Dictionary<string, dynamic> { { "id", cc["cc_call_center_id"] }, { "name", cc["cc_name"] }, { "mgr", cc["cc_manager"] } };
                                var ks = Convert.ToString(key);
                                if (!groups.TryGetValue(ks, out var g)) {
                                    g = new _Group(key);
                                    groups[ks] = g;
                                    order.Add(ks);
                                }
                                g.Items.Add(cc);
                            }
                        }
                    }
                }
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "Call_Center", g["key"].id }, { "Call_Center_Name", g["key"].name }, { "Manager", g["key"].mgr }, { "Returns_Loss", _sum(new List<dynamic>(g.Select(x => x.cr_net_loss))) } });
    }
    return _res;
})());
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q91_returns();
    }
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
}
