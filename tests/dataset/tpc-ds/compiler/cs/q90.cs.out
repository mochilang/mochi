// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Text.Json;

public struct WebSale {
    public long ws_sold_time_sk;
    public long ws_ship_hdemo_sk;
    public long ws_web_page_sk;
}

public class Program {
    static void test_TPCDS_Q90_ratio() {
        expect((result == 2.000000));
    }
    
    public static void Main() {
        Dictionary<string, long>[] web_sales = new Dictionary<string, long>[] { new Dictionary<string, long> { { "ws_sold_time_sk", 1L }, { "ws_ship_hdemo_sk", 1L }, { "ws_web_page_sk", 10L } }, new Dictionary<string, long> { { "ws_sold_time_sk", 1L }, { "ws_ship_hdemo_sk", 1L }, { "ws_web_page_sk", 10L } }, new Dictionary<string, long> { { "ws_sold_time_sk", 2L }, { "ws_ship_hdemo_sk", 1L }, { "ws_web_page_sk", 10L } } };
        Dictionary<string, long>[] household_demographics = new Dictionary<string, long>[] { new Dictionary<string, long> { { "hd_demo_sk", 1L }, { "hd_dep_count", 2L } } };
        Dictionary<string, long>[] time_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "t_time_sk", 1L }, { "t_hour", 7L } }, new Dictionary<string, long> { { "t_time_sk", 2L }, { "t_hour", 14L } } };
        Dictionary<string, long>[] web_page = new Dictionary<string, long>[] { new Dictionary<string, long> { { "wp_web_page_sk", 10L }, { "wp_char_count", 5100L } } };
        long amc = _count(new Func<List<dynamic>>(() => {
    var _res = new List<dynamic>();
    foreach (var ws in web_sales) {
        foreach (var hd in household_demographics) {
            if (!((ws["ws_ship_hdemo_sk"] == hd["hd_demo_sk"]))) continue;
            if (!((hd.hd_dep_count == 2L))) continue;
            foreach (var t in time_dim) {
                if (!((ws["ws_sold_time_sk"] == t["t_time_sk"]))) continue;
                if (!((t.t_hour >= 7L))) continue;
                if (!((t.t_hour <= 8L))) continue;
                foreach (var wp in web_page) {
                    if (!((ws["ws_web_page_sk"] == wp["wp_web_page_sk"]))) continue;
                    if (!((wp.wp_char_count >= 5000L))) continue;
                    if (!((wp.wp_char_count <= 5200L))) continue;
                    _res.Add(ws);
                }
            }
        }
    }
    return _res;
})());
        long pmc = _count(new Func<List<dynamic>>(() => {
    var _res = new List<dynamic>();
    foreach (var ws in web_sales) {
        foreach (var hd in household_demographics) {
            if (!((ws["ws_ship_hdemo_sk"] == hd["hd_demo_sk"]))) continue;
            if (!((hd.hd_dep_count == 2L))) continue;
            foreach (var t in time_dim) {
                if (!((ws["ws_sold_time_sk"] == t["t_time_sk"]))) continue;
                if (!((t.t_hour >= 14L))) continue;
                if (!((t.t_hour <= 15L))) continue;
                foreach (var wp in web_page) {
                    if (!((ws["ws_web_page_sk"] == wp["wp_web_page_sk"]))) continue;
                    if (!((wp.wp_char_count >= 5000L))) continue;
                    if (!((wp.wp_char_count <= 5200L))) continue;
                    _res.Add(ws);
                }
            }
        }
    }
    return _res;
})());
        double result = ((_cast<double>(amc)) / (_cast<double>(pmc)));
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q90_ratio();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static int _count(dynamic v) {
        if (v is string) {
            return ((string)v).Length;
        }
        if (v is System.Collections.ICollection c) {
            return c.Count;
        }
        throw new Exception("count() expects list or string");
    }
    
    static T _cast<T>(dynamic v) {
        if (v is T tv) return tv;
        if (typeof(T) == typeof(int)) {
            if (v is int) return (T)v;
            if (v is double) return (T)(object)(int)(double)v;
            if (v is float) return (T)(object)(int)(float)v;
        }
        if (typeof(T) == typeof(double)) {
            if (v is int) return (T)(object)(double)(int)v;
            if (v is double) return (T)v;
            if (v is float) return (T)(object)(double)(float)v;
        }
        if (typeof(T) == typeof(float)) {
            if (v is int) return (T)(object)(float)(int)v;
            if (v is double) return (T)(object)(float)(double)v;
            if (v is float) return (T)v;
        }
        if (typeof(T).IsGenericType && typeof(T).GetGenericTypeDefinition() == typeof(Dictionary<,>) && v is System.Collections.IDictionary d) {
            var args = typeof(T).GetGenericArguments();
            var res = (System.Collections.IDictionary)Activator.CreateInstance(typeof(Dictionary<,>).MakeGenericType(args));
            var mCast = typeof(Program).GetMethod("_cast");
            foreach (System.Collections.DictionaryEntry kv in d) {
                var k = mCast.MakeGenericMethod(args[0]).Invoke(null, new object[]{kv.Key});
                var val = mCast.MakeGenericMethod(args[1]).Invoke(null, new object[]{kv.Value});
                res.Add(k, val);
            }
            return (T)res;
        }
        if (v is System.Collections.Generic.IDictionary<object, object> dm) {
            var m = new Dictionary<string, object>();
            foreach (var kv in dm) m[Convert.ToString(kv.Key)] = kv.Value;
            v = m;
        }
        var json = JsonSerializer.Serialize(v);
        return JsonSerializer.Deserialize<T>(json);
    }
    
}
