// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct StoreSale {
    public long ss_ticket_number;
    public long ss_item_sk;
    public long ss_customer_sk;
    public long ss_store_sk;
    public double ss_net_paid;
}

public struct StoreReturn {
    public long sr_ticket_number;
    public long sr_item_sk;
}

public struct Store {
    public long s_store_sk;
    public string s_store_name;
    public long s_market_id;
    public string s_state;
    public string s_zip;
}

public struct Item {
    public long i_item_sk;
    public string i_color;
    public double i_current_price;
    public long i_manager_id;
    public string i_units;
    public string i_size;
}

public struct Customer {
    public long c_customer_sk;
    public string c_first_name;
    public string c_last_name;
    public long c_current_addr_sk;
    public string c_birth_country;
}

public struct CustomerAddress {
    public long ca_address_sk;
    public string ca_state;
    public string ca_country;
    public string ca_zip;
}

public class Program {
    static void test_TPCDS_Q24_customer_net_paid() {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "c_last_name", "Smith" }, { "c_first_name", "Ann" }, { "s_store_name", "Store1" }, { "paid", 100.000000 } } }));
    }
    
    public static void Main() {
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_ticket_number", 1L }, { "ss_item_sk", 1L }, { "ss_customer_sk", 1L }, { "ss_store_sk", 1L }, { "ss_net_paid", 100.000000 } }, new Dictionary<string, dynamic> { { "ss_ticket_number", 2L }, { "ss_item_sk", 2L }, { "ss_customer_sk", 2L }, { "ss_store_sk", 1L }, { "ss_net_paid", 50.000000 } } };
        Dictionary<string, long>[] store_returns = new Dictionary<string, long>[] { new Dictionary<string, long> { { "sr_ticket_number", 1L }, { "sr_item_sk", 1L } }, new Dictionary<string, long> { { "sr_ticket_number", 2L }, { "sr_item_sk", 2L } } };
        var store = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "s_store_sk", 1L }, { "s_store_name", "Store1" }, { "s_market_id", 5L }, { "s_state", "CA" }, { "s_zip", "12345" } } };
        var item = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "i_item_sk", 1L }, { "i_color", "RED" }, { "i_current_price", 10.000000 }, { "i_manager_id", 1L }, { "i_units", "EA" }, { "i_size", "M" } }, new Dictionary<string, dynamic> { { "i_item_sk", 2L }, { "i_color", "BLUE" }, { "i_current_price", 20.000000 }, { "i_manager_id", 2L }, { "i_units", "EA" }, { "i_size", "L" } } };
        var customer = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "c_customer_sk", 1L }, { "c_first_name", "Ann" }, { "c_last_name", "Smith" }, { "c_current_addr_sk", 1L }, { "c_birth_country", "Canada" } }, new Dictionary<string, dynamic> { { "c_customer_sk", 2L }, { "c_first_name", "Bob" }, { "c_last_name", "Jones" }, { "c_current_addr_sk", 2L }, { "c_birth_country", "USA" } } };
        var customer_address = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ca_address_sk", 1L }, { "ca_state", "CA" }, { "ca_country", "USA" }, { "ca_zip", "12345" } }, new Dictionary<string, dynamic> { { "ca_address_sk", 2L }, { "ca_state", "CA" }, { "ca_country", "USA" }, { "ca_zip", "54321" } } };
        var ssales = new Func<List<Dictionary<string, dynamic>>>(() => {
    var groups = new Dictionary<string, _Group>();
    var order = new List<string>();
    foreach (var ss in store_sales) {
        foreach (var sr in store_returns) {
            if (!(((ss["ss_ticket_number"] == sr["sr_ticket_number"]) && (ss["ss_item_sk"] == sr["sr_item_sk"])))) continue;
            foreach (var s in store) {
                if (!((ss["ss_store_sk"] == s["s_store_sk"]))) continue;
                if (!((s.s_market_id == 5L))) continue;
                foreach (var i in item) {
                    if (!((ss["ss_item_sk"] == i["i_item_sk"]))) continue;
                    foreach (var c in customer) {
                        if (!((ss["ss_customer_sk"] == c["c_customer_sk"]))) continue;
                        foreach (var ca in customer_address) {
                            if (!((c["c_current_addr_sk"] == ca["ca_address_sk"]))) continue;
                            if ((c.c_birth_country != strings.ToUpper(ca.ca_country)) && (s.s_zip == ca.ca_zip)) {
                                var key = new Dictionary<string, dynamic> { { "last", c["c_last_name"] }, { "first", c["c_first_name"] }, { "store_name", s["s_store_name"] }, { "color", i["i_color"] } };
                                var ks = Convert.ToString(key);
                                if (!groups.TryGetValue(ks, out var g)) {
                                    g = new _Group(key);
                                    groups[ks] = g;
                                    order.Add(ks);
                                }
                                g.Items.Add(ss);
                            }
                        }
                    }
                }
            }
        }
    }
    var items = new List<_Group>();
    foreach (var ks in order) items.Add(groups[ks]);
    var _res = new List<Dictionary<string, dynamic>>();
    foreach (var g in items) {
        _res.Add(new Dictionary<string, dynamic> { { "c_last_name", g["key"].last }, { "c_first_name", g["key"].first }, { "s_store_name", g["key"].store_name }, { "color", g["key"].color }, { "netpaid", _sum(new List<dynamic>(g.Select(x => x.ss_net_paid))) } });
    }
    return _res;
})();
        double avg_paid = _avg(new List<dynamic>(ssales.Select(x => x["netpaid"])));
        var result = new List<Dictionary<string, dynamic>>(ssales.Where(x => (x["netpaid"] > (0.050000 * avg_paid))).OrderBy(x => new dynamic[] { x["c_last_name"], x["c_first_name"], x["s_store_name"] }).Select(x => new Dictionary<string, dynamic> { { "c_last_name", x["c_last_name"] }, { "c_first_name", x["c_first_name"] }, { "s_store_name", x["s_store_name"] }, { "paid", x["netpaid"] } }));
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q24_customer_net_paid();
    }
    static void expect(bool cond) {
        if (!cond) throw new Exception("expect failed");
    }
    
    static double _sum(dynamic v) {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }
    
    public class _Group {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }
    
    static double _avg(dynamic v) {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v) {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }
    
}
