// Generated by Mochi C# compiler
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Web;
using System.Linq;

public struct StoreSale
{
    public long ss_item_sk;
    public double ss_list_price;
    public long ss_quantity;
    public long ss_sold_date_sk;
}

public struct CatalogSale
{
    public long cs_item_sk;
    public double cs_list_price;
    public long cs_quantity;
    public long cs_sold_date_sk;
}

public struct WebSale
{
    public long ws_item_sk;
    public double ws_list_price;
    public long ws_quantity;
    public long ws_sold_date_sk;
}

public struct Item
{
    public long i_item_sk;
    public long i_brand_id;
    public long i_class_id;
    public long i_category_id;
}

public struct DateDim
{
    public long d_date_sk;
    public long d_year;
    public long d_moy;
}

public class Program
{
    static void test_TPCDS_Q14_cross_channel()
    {
        expect((result == new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "channel", "store" }, { "i_brand_id", 1L }, { "i_class_id", 1L }, { "i_category_id", 1L }, { "sales", 60.000000 }, { "number_sales", 1L } } }));
    }

    public static void Main()
    {
        var store_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ss_item_sk", 1L }, { "ss_list_price", 10.000000 }, { "ss_quantity", 2L }, { "ss_sold_date_sk", 1L } }, new Dictionary<string, dynamic> { { "ss_item_sk", 1L }, { "ss_list_price", 20.000000 }, { "ss_quantity", 3L }, { "ss_sold_date_sk", 2L } } };
        var catalog_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "cs_item_sk", 1L }, { "cs_list_price", 10.000000 }, { "cs_quantity", 2L }, { "cs_sold_date_sk", 1L } } };
        var web_sales = new Dictionary<string, dynamic>[] { new Dictionary<string, dynamic> { { "ws_item_sk", 1L }, { "ws_list_price", 30.000000 }, { "ws_quantity", 1L }, { "ws_sold_date_sk", 1L } } };
        Dictionary<string, long>[] item = new Dictionary<string, long>[] { new Dictionary<string, long> { { "i_item_sk", 1L }, { "i_brand_id", 1L }, { "i_class_id", 1L }, { "i_category_id", 1L } } };
        Dictionary<string, long>[] date_dim = new Dictionary<string, long>[] { new Dictionary<string, long> { { "d_date_sk", 1L }, { "d_year", 2000L }, { "d_moy", 12L } }, new Dictionary<string, long> { { "d_date_sk", 2L }, { "d_year", 2002L }, { "d_moy", 11L } } };
        Dictionary<string, long>[] cross_items = new Dictionary<string, long>[] { new Dictionary<string, long> { { "ss_item_sk", 1L } } };
        double avg_sales = _avg(new double[] { 20.000000, 20.000000, 30.000000 });
        var store_filtered = new Func<List<Dictionary<string, dynamic>>>(() =>
        {
            var groups = new Dictionary<string, _Group>();
            var order = new List<string>();
            foreach (var ss in store_sales)
            {
                if (!(_in(ss["ss_item_sk"], (new List<dynamic>(cross_items.Select(ci => ci["ss_item_sk"])))))) continue;
                foreach (var d in date_dim)
                {
                    if (!((((ss["ss_sold_date_sk"] == d["d_date_sk"]) && (d["d_year"] == 2002L)) && (d["d_moy"] == 11L)))) continue;
                    var key = new Dictionary<string, long> { { "brand_id", 1L }, { "class_id", 1L }, { "category_id", 1L } };
                    var ks = Convert.ToString(key);
                    if (!groups.TryGetValue(ks, out var g))
                    {
                        g = new _Group(key);
                        groups[ks] = g;
                        order.Add(ks);
                    }
                    g.Items.Add(ss);
                }
            }
            var items = new List<_Group>();
            foreach (var ks in order) items.Add(groups[ks]);
            var _res = new List<Dictionary<string, dynamic>>();
            foreach (var g in items)
            {
                _res.Add(new Dictionary<string, dynamic> { { "channel", "store" }, { "sales", _sum(new List<dynamic>(g.Select(x => (x.ss_quantity * x.ss_list_price)))) }, { "number_sales", _count(new List<dynamic>(g.Select(_ => _))) } });
            }
            return _res;
        })();
        var result = new List<Dictionary<string, dynamic>>(store_filtered.Where(r => (r["sales"] > avg_sales)).Select(r => new Dictionary<string, dynamic> { { "channel", r["channel"] }, { "i_brand_id", 1L }, { "i_class_id", 1L }, { "i_category_id", 1L }, { "sales", r["sales"] }, { "number_sales", r["number_sales"] } }));
        Console.WriteLine(JsonSerializer.Serialize(result));
        test_TPCDS_Q14_cross_channel();
    }
    static void expect(bool cond)
    {
        if (!cond) throw new Exception("expect failed");
    }

    static double _avg(dynamic v)
    {
        if (v == null) return 0.0;
        int _n = 0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
            _n++;
        }
        return _n == 0 ? 0.0 : _sum / _n;
    }

    static double _sum(dynamic v)
    {
        if (v == null) return 0.0;
        double _sum = 0;
        foreach (var it in v)
        {
            _sum += Convert.ToDouble(it);
        }
        return _sum;
    }

    static int _count(dynamic v)
    {
        if (v is string)
        {
            return ((string)v).Length;
        }
        if (v is System.Collections.ICollection c)
        {
            return c.Count;
        }
        throw new Exception("count() expects list or string");
    }

    static bool _in(dynamic item, dynamic col)
    {
        if (col is string s && item is string sub)
        {
            return s.Contains(sub);
        }
        if (col is System.Collections.IDictionary d)
        {
            return d.Contains(item);
        }
        if (col is System.Collections.IEnumerable e)
        {
            foreach (var it in e)
            {
                if (Equals(it, item)) return true;
            }
            return false;
        }
        return false;
    }

    public class _Group
    {
        public dynamic key;
        public List<dynamic> Items = new List<dynamic>();
        public _Group(dynamic k) { key = k; }
    }

}
