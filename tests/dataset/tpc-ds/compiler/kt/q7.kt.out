fun test_TPCDS_Q7_empty() {
    check((result.size == 0))
}

fun main() {
    val store_sales = listOf<Any?>()
    val customer_demographics = listOf<Any?>()
    val date_dim = listOf<Any?>()
    val item = listOf<Any?>()
    val promotion = listOf<Any?>()
    val result = run {
        val _src = store_sales
        val _rows = _query(_src, listOf(
        _JoinSpec(items = customer_demographics, on = { args ->
        val ss = args[0]
        val cd = args[1]
        (ss["ss_cdemo_sk"] == cd["cd_demo_sk"])
    })),
    _JoinSpec(items = date_dim, on = { args ->
    val ss = args[0]
    val cd = args[1]
    val d = args[2]
    (ss["ss_sold_date_sk"] == d["d_date_sk"])
})),
_JoinSpec(items = item, on = { args ->
val ss = args[0]
val cd = args[1]
val d = args[2]
val i = args[3]
(ss["ss_item_sk"] == i["i_item_sk"])
})),
_JoinSpec(items = promotion, on = { args ->
val ss = args[0]
val cd = args[1]
val d = args[2]
val i = args[3]
val p = args[4]
(ss["ss_promo_sk"] == p["p_promo_sk"])
}))
), _QueryOpts(selectFn = { args ->
val ss = args[0]
val cd = args[1]
val d = args[2]
val i = args[3]
val p = args[4]
mutableMapOf("i_item_id" to g.key.i_item_id, "agg1" to _avg(run {
    var res = g.Items as List<Any?>
    res = res.map { x -> x["ss"].ss_quantity }
    res
}), "agg2" to _avg(run {
    var res = g.Items as List<Any?>
    res = res.map { x -> x["ss"].ss_list_price }
    res
}), "agg3" to _avg(run {
    var res = g.Items as List<Any?>
    res = res.map { x -> x["ss"].ss_coupon_amt }
    res
}), "agg4" to _avg(run {
    var res = g.Items as List<Any?>
    res = res.map { x -> x["ss"].ss_sales_price }
    res
}))
}, where = { args ->
val ss = args[0]
val cd = args[1]
val d = args[2]
val i = args[3]
val p = args[4]
(((((cd["cd_gender"] == "M") && (cd["cd_marital_status"] == "S")) && (cd["cd_education_status"] == "College")) && (((p["p_channel_email"] == "N") || (p["p_channel_event"] == "N")))) && (d["d_year"] == 1998))
}, sortKey = { args ->
val ss = args[0]
val cd = args[1]
val d = args[2]
val i = args[3]
val p = args[4]
g["key"].i_item_id
}) )
val _groups = _group_by(_rows) { args ->
val ss = args[0]
val cd = args[1]
val d = args[2]
val i = args[3]
val p = args[4]
mutableMapOf("i_item_id" to i["i_item_id"])
}
val _res = mutableListOf<Any?>()
for (g in _groups) {
    _res.add(mutableMapOf("i_item_id" to g.key.i_item_id, "agg1" to _avg(run {
        var res = g.Items as List<Any?>
        res = res.map { x -> x["ss"].ss_quantity }
        res
    }), "agg2" to _avg(run {
        var res = g.Items as List<Any?>
        res = res.map { x -> x["ss"].ss_list_price }
        res
    }), "agg3" to _avg(run {
        var res = g.Items as List<Any?>
        res = res.map { x -> x["ss"].ss_coupon_amt }
        res
    }), "agg4" to _avg(run {
        var res = g.Items as List<Any?>
        res = res.map { x -> x["ss"].ss_sales_price }
        res
    })))
}
_res
}
_json(result)
test_TPCDS_Q7_empty()
}

class _Group(var key: Any?) {
    val Items = mutableListOf<Any?>()
    val size: Int
    get() = Items.size
}
fun _arrConcat(a: Array<Any?>, b: Array<Any?>): Array<Any?> {
    return a + b
}
fun _avg(v: Any?): Double {
    var list: List<Any?>? = null
    when (v) {
        is List<*> -> list = v as List<Any?>
        is Map<*, *> -> {
            val items = when {
                v["items"] is List<*> -> v["items"] as List<*>
                v["Items"] is List<*> -> v["Items"] as List<*>
                else -> null
            }
            if (items != null) list = items as List<Any?>
        }
        is _Group -> list = v.Items
    }
    if (list == null || list.isEmpty()) return 0.0
    var sum = 0.0
    for (n in list!!) {
        sum += (n as Number).toDouble()
    }
    return sum / list!!.size
}
fun _group_by(src: List<Any?>, keyfn: (Any?) -> Any?): List<_Group> {
    val groups = mutableMapOf<String, _Group>()
    val order = mutableListOf<String>()
    for (it in src) {
        val key = keyfn(it)
        val ks = key.toString()
        var g = groups[ks]
        if (g == null) {
            g = _Group(key)
            groups[ks] = g
            order.add(ks)
        }
        if (it is Array<*> && it.size == 1) {
            g.Items.add(it[0])
        } else {
            g.Items.add(it)
        }
    }
    return order.map { groups[it]!! }
}
fun _json(v: Any?) {
    fun encode(x: Any?): String = when (x) {
        null -> "null"
        is String -> \"""${x.replace("\"", "\\\"")}\"""
        is Int, is Double, is Boolean -> x.toString()
        is List<*> -> x.joinToString(prefix = "[", postfix = "]") { encode(it) }
        is Map<*, *> -> x.entries.joinToString(prefix = "{", postfix = "}") { e ->
        "\"" + e.key.toString().replace("\"", "\\\"") + "\":" + encode(e.value)
    }
    else -> \"""${x.toString().replace("\"", "\\\"")}\"""
}
println(encode(v))
}
data class _JoinSpec(
val items: List<Any?>,
val on: ((Array<Any?>) -> Boolean)? = null,
val left: Boolean = false,
val right: Boolean = false,
)

data class _QueryOpts(
val selectFn: (Array<Any?>) -> Any?,
val where: ((Array<Any?>) -> Boolean)? = null,
val sortKey: ((Array<Any?>) -> Any?)? = null,
val skip: Int = -1,
val take: Int = -1,
)

fun _query(src: List<Any?>, joins: List<_JoinSpec>, opts: _QueryOpts): List<Any?> {
    var items = src.map { arrayOf(it) }.toMutableList()
    if (opts.where != null) {
        items = items.filter { opts.where.invoke(it) }.toMutableList()
    }
    for (j in joins) {
        val joined = mutableListOf<Array<Any?>>()
        if (j.right && j.left) {
            val matched = BooleanArray(j.items.size)
            for (left in items) {
                var m = false
                for ((ri, right) in j.items.withIndex()) {
                    var keep = true
                    if (j.on != null) {
                        keep = j.on.invoke(_arrConcat(left, arrayOf(right)))
                    }
                    if (!keep) continue
                    m = true
                    matched[ri] = true
                    joined.add(_arrConcat(left, arrayOf(right)))
                }
                if (!m) joined.add(_arrConcat(left, arrayOf<Any?>(null)))
            }
            for ((ri, right) in j.items.withIndex()) {
                if (!matched[ri]) {
                    val undef = Array<Any?>(items.firstOrNull()?.size ?: 0) { null }
                    joined.add(_arrConcat(undef, arrayOf(right)))
                }
            }
        } else if (j.right) {
            for (right in j.items) {
                var m = false
                for (left in items) {
                    var keep = true
                    if (j.on != null) {
                        keep = j.on.invoke(_arrConcat(left, arrayOf(right)))
                    }
                    if (!keep) continue
                    m = true
                    joined.add(_arrConcat(left, arrayOf(right)))
                }
                if (!m) {
                    val undef = Array<Any?>(items.firstOrNull()?.size ?: 0) { null }
                    joined.add(_arrConcat(undef, arrayOf(right)))
                }
            }
        } else {
            for (left in items) {
                var m = false
                for (right in j.items) {
                    var keep = true
                    if (j.on != null) {
                        keep = j.on.invoke(_arrConcat(left, arrayOf(right)))
                    }
                    if (!keep) continue
                    m = true
                    joined.add(_arrConcat(left, arrayOf(right)))
                }
                if (j.left && !m) joined.add(_arrConcat(left, arrayOf<Any?>(null)))
            }
        }
        items = joined
        if (opts.where != null) {
            items = items.filter { opts.where.invoke(it) }.toMutableList()
        }
    }
    if (opts.where != null) {
        items = items.filter { opts.where.invoke(it) }.toMutableList()
    }
    if (opts.sortKey != null) {
        val pairs = items.map { it to opts.sortKey.invoke(it) }.toMutableList()
        pairs.sortWith(java.util.Comparator { a, b ->
        val av = a.second
        val bv = b.second
        when (av) {
            is Int -> when (bv) {
                is Int -> av.compareTo(bv)
                is Double -> av.toDouble().compareTo(bv)
                else -> av.toString().compareTo(bv.toString())
            }
            is Double -> when (bv) {
                is Int -> av.compareTo(bv.toDouble())
                is Double -> av.compareTo(bv)
                else -> av.toString().compareTo(bv.toString())
            }
            is String -> av.compareTo(bv.toString())
            else -> av.toString().compareTo(bv.toString())
        }
    })
    items = pairs.map { it.first }.toMutableList()
}
if (opts.skip >= 0) {
    items = if (opts.skip < items.size) items.drop(opts.skip).toMutableList() else mutableListOf()
}
if (opts.take >= 0) {
    if (opts.take < items.size) items = items.take(opts.take).toMutableList()
}
val res = mutableListOf<Any?>()
for (r in items) {
    res.add(opts.selectFn.invoke(r))
}
return res
}


