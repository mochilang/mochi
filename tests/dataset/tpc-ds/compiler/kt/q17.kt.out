data class StoreSale(val ss_sold_date_sk: Int, val ss_item_sk: Int, val ss_customer_sk: Int, val ss_ticket_number: Int, val ss_quantity: Int, val ss_store_sk: Int)

data class StoreReturn(val sr_returned_date_sk: Int, val sr_customer_sk: Int, val sr_item_sk: Int, val sr_ticket_number: Int, val sr_return_quantity: Int)

data class CatalogSale(val cs_sold_date_sk: Int, val cs_item_sk: Int, val cs_bill_customer_sk: Int, val cs_quantity: Int)

data class DateDim(val d_date_sk: Int, val d_quarter_name: String)

data class Store(val s_store_sk: Int, val s_state: String)

data class Item(val i_item_sk: Int, val i_item_id: String, val i_item_desc: String)

fun test_TPCDS_Q17_stats() {
    check((result == listOf(mutableMapOf("i_item_id" to "I1", "i_item_desc" to "Item 1", "s_state" to "CA", "store_sales_quantitycount" to 1, "store_sales_quantityave" to 10, "store_sales_quantitystdev" to 0, "store_sales_quantitycov" to 0, "store_returns_quantitycount" to 1, "store_returns_quantityave" to 2, "store_returns_quantitystdev" to 0, "store_returns_quantitycov" to 0, "catalog_sales_quantitycount" to 1, "catalog_sales_quantityave" to 5, "catalog_sales_quantitystdev" to 0, "catalog_sales_quantitycov" to 0))))
}

fun main() {
    val store_sales = listOf(mutableMapOf("ss_sold_date_sk" to 1, "ss_item_sk" to 1, "ss_customer_sk" to 1, "ss_ticket_number" to 1, "ss_quantity" to 10, "ss_store_sk" to 1))
    val store_returns = listOf(mutableMapOf("sr_returned_date_sk" to 2, "sr_customer_sk" to 1, "sr_item_sk" to 1, "sr_ticket_number" to 1, "sr_return_quantity" to 2))
    val catalog_sales = listOf(mutableMapOf("cs_sold_date_sk" to 3, "cs_item_sk" to 1, "cs_bill_customer_sk" to 1, "cs_quantity" to 5))
    val date_dim = listOf(mutableMapOf("d_date_sk" to 1, "d_quarter_name" to "1998Q1"), mutableMapOf("d_date_sk" to 2, "d_quarter_name" to "1998Q2"), mutableMapOf("d_date_sk" to 3, "d_quarter_name" to "1998Q3"))
    val store = listOf(mutableMapOf("s_store_sk" to 1, "s_state" to "CA"))
    val item = listOf(mutableMapOf("i_item_sk" to 1, "i_item_id" to "I1", "i_item_desc" to "Item 1"))
    val joined = run {
        val _src = store_sales
        val _rows = _query(_src, listOf(
        _JoinSpec(items = store_returns, on = { args ->
        val ss = args[0] as MutableMap<String, Int>
        val sr = args[1] as MutableMap<String, Int>
        (((ss["ss_customer_sk"] == sr["sr_customer_sk"]) && (ss["ss_item_sk"] == sr["sr_item_sk"])) && (ss["ss_ticket_number"] == sr["sr_ticket_number"]))
    })),
    _JoinSpec(items = catalog_sales, on = { args ->
    val ss = args[0] as MutableMap<String, Int>
    val sr = args[1] as MutableMap<String, Int>
    val cs = args[2] as MutableMap<String, Int>
    ((sr["sr_customer_sk"] == cs["cs_bill_customer_sk"]) && (sr["sr_item_sk"] == cs["cs_item_sk"]))
})),
_JoinSpec(items = date_dim, on = { args ->
val ss = args[0] as MutableMap<String, Int>
val sr = args[1] as MutableMap<String, Int>
val cs = args[2] as MutableMap<String, Int>
val d1 = args[3] as MutableMap<String, Any>
((ss["ss_sold_date_sk"] == d1["d_date_sk"]) && (d1["d_quarter_name"] == "1998Q1"))
})),
_JoinSpec(items = date_dim, on = { args ->
val ss = args[0] as MutableMap<String, Int>
val sr = args[1] as MutableMap<String, Int>
val cs = args[2] as MutableMap<String, Int>
val d1 = args[3] as MutableMap<String, Any>
val d2 = args[4] as MutableMap<String, Any>
((sr["sr_returned_date_sk"] == d2["d_date_sk"]) && listOf("1998Q1", "1998Q2", "1998Q3").contains(d2["d_quarter_name"]))
})),
_JoinSpec(items = date_dim, on = { args ->
val ss = args[0] as MutableMap<String, Int>
val sr = args[1] as MutableMap<String, Int>
val cs = args[2] as MutableMap<String, Int>
val d1 = args[3] as MutableMap<String, Any>
val d2 = args[4] as MutableMap<String, Any>
val d3 = args[5] as MutableMap<String, Any>
((cs["cs_sold_date_sk"] == d3["d_date_sk"]) && listOf("1998Q1", "1998Q2", "1998Q3").contains(d3["d_quarter_name"]))
})),
_JoinSpec(items = store, on = { args ->
val ss = args[0] as MutableMap<String, Int>
val sr = args[1] as MutableMap<String, Int>
val cs = args[2] as MutableMap<String, Int>
val d1 = args[3] as MutableMap<String, Any>
val d2 = args[4] as MutableMap<String, Any>
val d3 = args[5] as MutableMap<String, Any>
val s = args[6] as MutableMap<String, Any>
(ss["ss_store_sk"] == s["s_store_sk"])
})),
_JoinSpec(items = item, on = { args ->
val ss = args[0] as MutableMap<String, Int>
val sr = args[1] as MutableMap<String, Int>
val cs = args[2] as MutableMap<String, Int>
val d1 = args[3] as MutableMap<String, Any>
val d2 = args[4] as MutableMap<String, Any>
val d3 = args[5] as MutableMap<String, Any>
val s = args[6] as MutableMap<String, Any>
val i = args[7] as MutableMap<String, Any>
(ss["ss_item_sk"] == i["i_item_sk"])
}))
), _QueryOpts(selectFn = { args ->
val ss = args[0] as MutableMap<String, Int>
val sr = args[1] as MutableMap<String, Int>
val cs = args[2] as MutableMap<String, Int>
val d1 = args[3] as MutableMap<String, Any>
val d2 = args[4] as MutableMap<String, Any>
val d3 = args[5] as MutableMap<String, Any>
val s = args[6] as MutableMap<String, Any>
val i = args[7] as MutableMap<String, Any>
mutableMapOf("qty" to ss["ss_quantity"], "ret" to sr["sr_return_quantity"], "csq" to cs["cs_quantity"], "i_item_id" to i["i_item_id"], "i_item_desc" to i["i_item_desc"], "s_state" to s["s_state"])
}) )
_rows
}
val result = _group_by(joined) { j -> mutableMapOf("i_item_id" to j["i_item_id"], "i_item_desc" to j["i_item_desc"], "s_state" to j["s_state"]) }.map { g -> mutableMapOf("i_item_id" to g.key.i_item_id, "i_item_desc" to g.key.i_item_desc, "s_state" to g.key.s_state, "store_sales_quantitycount" to run {
    var res = g.Items as List<Any?>
    res = res.map { _ -> _ }
    res
}.size, "store_sales_quantityave" to _avg(run {
    var res = g.Items as List<Any?>
    res = res.map { x -> x["qty"] }
    res
}), "store_sales_quantitystdev" to 0, "store_sales_quantitycov" to 0, "store_returns_quantitycount" to run {
    var res = g.Items as List<Any?>
    res = res.map { _ -> _ }
    res
}.size, "store_returns_quantityave" to _avg(run {
    var res = g.Items as List<Any?>
    res = res.map { x -> x["ret"] }
    res
}), "store_returns_quantitystdev" to 0, "store_returns_quantitycov" to 0, "catalog_sales_quantitycount" to run {
    var res = g.Items as List<Any?>
    res = res.map { _ -> _ }
    res
}.size, "catalog_sales_quantityave" to _avg(run {
    var res = g.Items as List<Any?>
    res = res.map { x -> x["csq"] }
    res
}), "catalog_sales_quantitystdev" to 0, "catalog_sales_quantitycov" to 0) }
_json(result)
test_TPCDS_Q17_stats()
}

class _Group(var key: Any?) {
    val Items = mutableListOf<Any?>()
    val size: Int
    get() = Items.size
}
fun _arrConcat(a: Array<Any?>, b: Array<Any?>): Array<Any?> {
    return a + b
}
fun _avg(v: Any?): Double {
    var list: List<Any?>? = null
    when (v) {
        is List<*> -> list = v as List<Any?>
        is Map<*, *> -> {
            val items = when {
                v["items"] is List<*> -> v["items"] as List<*>
                v["Items"] is List<*> -> v["Items"] as List<*>
                else -> null
            }
            if (items != null) list = items as List<Any?>
        }
        is _Group -> list = v.Items
    }
    if (list == null || list.isEmpty()) return 0.0
    var sum = 0.0
    for (n in list!!) {
        sum += (n as Number).toDouble()
    }
    return sum / list!!.size
}
fun _group_by(src: List<Any?>, keyfn: (Any?) -> Any?): List<_Group> {
    val groups = mutableMapOf<String, _Group>()
    val order = mutableListOf<String>()
    for (it in src) {
        val key = keyfn(it)
        val ks = key.toString()
        var g = groups[ks]
        if (g == null) {
            g = _Group(key)
            groups[ks] = g
            order.add(ks)
        }
        if (it is Array<*> && it.size == 1) {
            g.Items.add(it[0])
        } else {
            g.Items.add(it)
        }
    }
    return order.map { groups[it]!! }
}
fun _json(v: Any?) {
    fun encode(x: Any?): String = when (x) {
        null -> "null"
        is String -> \"""${x.replace("\"", "\\\"")}\"""
        is Int, is Double, is Boolean -> x.toString()
        is List<*> -> x.joinToString(prefix = "[", postfix = "]") { encode(it) }
        is Map<*, *> -> x.entries.joinToString(prefix = "{", postfix = "}") { e ->
        "\"" + e.key.toString().replace("\"", "\\\"") + "\":" + encode(e.value)
    }
    else -> \"""${x.toString().replace("\"", "\\\"")}\"""
}
println(encode(v))
}
data class _JoinSpec(
val items: List<Any?>,
val on: ((Array<Any?>) -> Boolean)? = null,
val left: Boolean = false,
val right: Boolean = false,
)

data class _QueryOpts(
val selectFn: (Array<Any?>) -> Any?,
val where: ((Array<Any?>) -> Boolean)? = null,
val sortKey: ((Array<Any?>) -> Any?)? = null,
val skip: Int = -1,
val take: Int = -1,
)

fun _query(src: List<Any?>, joins: List<_JoinSpec>, opts: _QueryOpts): List<Any?> {
    var items = src.map { arrayOf(it) }.toMutableList()
    if (opts.where != null) {
        items = items.filter { opts.where.invoke(it) }.toMutableList()
    }
    for (j in joins) {
        val joined = mutableListOf<Array<Any?>>()
        if (j.right && j.left) {
            val matched = BooleanArray(j.items.size)
            for (left in items) {
                var m = false
                for ((ri, right) in j.items.withIndex()) {
                    var keep = true
                    if (j.on != null) {
                        keep = j.on.invoke(_arrConcat(left, arrayOf(right)))
                    }
                    if (!keep) continue
                    m = true
                    matched[ri] = true
                    joined.add(_arrConcat(left, arrayOf(right)))
                }
                if (!m) joined.add(_arrConcat(left, arrayOf<Any?>(null)))
            }
            for ((ri, right) in j.items.withIndex()) {
                if (!matched[ri]) {
                    val undef = Array<Any?>(items.firstOrNull()?.size ?: 0) { null }
                    joined.add(_arrConcat(undef, arrayOf(right)))
                }
            }
        } else if (j.right) {
            for (right in j.items) {
                var m = false
                for (left in items) {
                    var keep = true
                    if (j.on != null) {
                        keep = j.on.invoke(_arrConcat(left, arrayOf(right)))
                    }
                    if (!keep) continue
                    m = true
                    joined.add(_arrConcat(left, arrayOf(right)))
                }
                if (!m) {
                    val undef = Array<Any?>(items.firstOrNull()?.size ?: 0) { null }
                    joined.add(_arrConcat(undef, arrayOf(right)))
                }
            }
        } else {
            for (left in items) {
                var m = false
                for (right in j.items) {
                    var keep = true
                    if (j.on != null) {
                        keep = j.on.invoke(_arrConcat(left, arrayOf(right)))
                    }
                    if (!keep) continue
                    m = true
                    joined.add(_arrConcat(left, arrayOf(right)))
                }
                if (j.left && !m) joined.add(_arrConcat(left, arrayOf<Any?>(null)))
            }
        }
        items = joined
        if (opts.where != null) {
            items = items.filter { opts.where.invoke(it) }.toMutableList()
        }
    }
    if (opts.where != null) {
        items = items.filter { opts.where.invoke(it) }.toMutableList()
    }
    if (opts.sortKey != null) {
        val pairs = items.map { it to opts.sortKey.invoke(it) }.toMutableList()
        pairs.sortWith(java.util.Comparator { a, b ->
        val av = a.second
        val bv = b.second
        when (av) {
            is Int -> when (bv) {
                is Int -> av.compareTo(bv)
                is Double -> av.toDouble().compareTo(bv)
                else -> av.toString().compareTo(bv.toString())
            }
            is Double -> when (bv) {
                is Int -> av.compareTo(bv.toDouble())
                is Double -> av.compareTo(bv)
                else -> av.toString().compareTo(bv.toString())
            }
            is String -> av.compareTo(bv.toString())
            else -> av.toString().compareTo(bv.toString())
        }
    })
    items = pairs.map { it.first }.toMutableList()
}
if (opts.skip >= 0) {
    items = if (opts.skip < items.size) items.drop(opts.skip).toMutableList() else mutableListOf()
}
if (opts.take >= 0) {
    if (opts.take < items.size) items = items.take(opts.take).toMutableList()
}
val res = mutableListOf<Any?>()
for (r in items) {
    res.add(opts.selectFn.invoke(r))
}
return res
}


