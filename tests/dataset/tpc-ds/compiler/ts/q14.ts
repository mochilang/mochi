// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:53:45Z
// Source: tests/dataset/tpc-ds/q14.mochi

type StoreSale = {
  ss_item_sk: number;
  ss_list_price: number;
  ss_quantity: number;
  ss_sold_date_sk: number;
};

type CatalogSale = {
  cs_item_sk: number;
  cs_list_price: number;
  cs_quantity: number;
  cs_sold_date_sk: number;
};

type WebSale = {
  ws_item_sk: number;
  ws_list_price: number;
  ws_quantity: number;
  ws_sold_date_sk: number;
};

type Item = {
  i_item_sk: number;
  i_brand_id: number;
  i_class_id: number;
  i_category_id: number;
};

type DateDim = {
  d_date_sk: number;
  d_year: number;
  d_moy: number;
};

let avg_sales: number;
let catalog_sales: Record<string, any>[];
let cross_items: { [key: string]: number }[];
let date_dim: { [key: string]: number }[];
let item: { [key: string]: number }[];
let result: Record<string, any>[];
let store_filtered: Record<string, any>[];
let store_sales: Record<string, any>[];
let web_sales: Record<string, any>[];

function test_TPCDS_Q14_cross_channel(): void {
  if (
    !(_equal(result, [
      {
        "channel": "store",
        "i_brand_id": 1,
        "i_class_id": 1,
        "i_category_id": 1,
        "sales": 60,
        "number_sales": 1,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "ss_item_sk": 1,
      "ss_list_price": 10,
      "ss_quantity": 2,
      "ss_sold_date_sk": 1,
    },
    {
      "ss_item_sk": 1,
      "ss_list_price": 20,
      "ss_quantity": 3,
      "ss_sold_date_sk": 2,
    },
  ];
  catalog_sales = [
    {
      "cs_item_sk": 1,
      "cs_list_price": 10,
      "cs_quantity": 2,
      "cs_sold_date_sk": 1,
    },
  ];
  web_sales = [
    {
      "ws_item_sk": 1,
      "ws_list_price": 30,
      "ws_quantity": 1,
      "ws_sold_date_sk": 1,
    },
  ];
  item = [
    {
      "i_item_sk": 1,
      "i_brand_id": 1,
      "i_class_id": 1,
      "i_category_id": 1,
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 2000,
      "d_moy": 12,
    },
    {
      "d_date_sk": 2,
      "d_year": 2002,
      "d_moy": 11,
    },
  ];
  cross_items = [{ "ss_item_sk": 1 }];
  avg_sales = _avg([
    20,
    20,
    30,
  ]);
  store_filtered = (() => {
    const _src = store_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const ss of _src) {
      for (const d of date_dim) {
        if (
          !(((ss.ss_sold_date_sk == d.d_date_sk) && (d.d_year == 2002)) &&
            (d.d_moy == 11))
        ) continue;
        if (
          !((cross_items.map((ci) => ci.ss_item_sk)).includes(ss.ss_item_sk))
        ) continue;
        const _key = {
          "brand_id": 1,
          "class_id": 1,
          "category_id": 1,
        };
        const _ks = JSON.stringify(_key);
        let _g = _map.get(_ks);
        if (!_g) {
          _g = { key: _key, items: [] };
          _map.set(_ks, _g);
        }
        _g.items.push({ ...ss, ...d, ss: ss, d: d });
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "channel": "store",
        "sales": _sum(g.items.map((x) => (x.ss_quantity * x.ss_list_price))),
        "number_sales": _count(g.items.map((_) => _)),
      });
    }
    return _res;
  })();
  result = store_filtered.filter((r) => (r.sales > avg_sales)).map((r) => ({
    "channel": r.channel,
    "i_brand_id": 1,
    "i_class_id": 1,
    "i_category_id": 1,
    "sales": r.sales,
    "number_sales": r.number_sales,
  }));
  console.log(_json(result));
  test_TPCDS_Q14_cross_channel();
}
function _avg(v: any): number {
  const c = _count(v);
  return c ? _sum(v) / c : 0;
}

function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
