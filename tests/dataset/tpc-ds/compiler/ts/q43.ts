// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:53:47Z
// Source: tests/dataset/tpc-ds/q43.mochi

let base: Record<string, any>[];
let date_dim: Record<string, any>[];
let gmt: number;
let records: Record<string, any>[];
let result: Record<string, any>[];
let store: Record<string, any>[];
let store_sales: Record<string, any>[];
let year: number;

function test_TPCDS_Q43_simplified(): void {
  if (
    !(_equal(result, [
      {
        "s_store_name": "Main",
        "s_store_id": "S1",
        "sun_sales": 10,
        "mon_sales": 20,
        "tue_sales": 30,
        "wed_sales": 40,
        "thu_sales": 50,
        "fri_sales": 60,
        "sat_sales": 70,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  date_dim = [
    {
      "date_sk": 1,
      "d_day_name": "Sunday",
      "d_year": 2020,
    },
    {
      "date_sk": 2,
      "d_day_name": "Monday",
      "d_year": 2020,
    },
    {
      "date_sk": 3,
      "d_day_name": "Tuesday",
      "d_year": 2020,
    },
    {
      "date_sk": 4,
      "d_day_name": "Wednesday",
      "d_year": 2020,
    },
    {
      "date_sk": 5,
      "d_day_name": "Thursday",
      "d_year": 2020,
    },
    {
      "date_sk": 6,
      "d_day_name": "Friday",
      "d_year": 2020,
    },
    {
      "date_sk": 7,
      "d_day_name": "Saturday",
      "d_year": 2020,
    },
  ];
  store = [
    {
      "store_sk": 1,
      "store_id": "S1",
      "store_name": "Main",
      "gmt_offset": 0,
    },
  ];
  store_sales = [
    {
      "sold_date_sk": 1,
      "store_sk": 1,
      "sales_price": 10,
    },
    {
      "sold_date_sk": 2,
      "store_sk": 1,
      "sales_price": 20,
    },
    {
      "sold_date_sk": 3,
      "store_sk": 1,
      "sales_price": 30,
    },
    {
      "sold_date_sk": 4,
      "store_sk": 1,
      "sales_price": 40,
    },
    {
      "sold_date_sk": 5,
      "store_sk": 1,
      "sales_price": 50,
    },
    {
      "sold_date_sk": 6,
      "store_sk": 1,
      "sales_price": 60,
    },
    {
      "sold_date_sk": 7,
      "store_sk": 1,
      "sales_price": 70,
    },
  ];
  year = 2020;
  gmt = 0;
  records = (() => {
    const _src = date_dim;
    const _res = [];
    for (const d of _src) {
      for (const ss of store_sales) {
        if (!(ss.sold_date_sk == d.date_sk)) continue;
        for (const s of store) {
          if (!(ss.store_sk == s.store_sk)) continue;
          if (!((s.gmt_offset == gmt) && (d.d_year == year))) continue;
          _res.push({
            "d_day_name": d.d_day_name,
            "s_store_name": s.store_name,
            "s_store_id": s.store_id,
            "price": ss.sales_price,
          });
        }
      }
    }
    return _res;
  })();
  base = (() => {
    const _src = records;
    const _map = new Map<string, any>();
    var _items = [];
    for (const r of _src) {
      const _key = {
        "name": r.s_store_name,
        "id": r.s_store_id,
      };
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...r, r: r });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "s_store_name": g.key.name,
        "s_store_id": g.key.id,
        "sun_sales": _sum(
          g.items.map((x) => ((x.d_day_name == "Sunday") ? x.price : 0)),
        ),
        "mon_sales": _sum(
          g.items.map((x) => ((x.d_day_name == "Monday") ? x.price : 0)),
        ),
        "tue_sales": _sum(
          g.items.map((x) => ((x.d_day_name == "Tuesday") ? x.price : 0)),
        ),
        "wed_sales": _sum(
          g.items.map((x) => ((x.d_day_name == "Wednesday") ? x.price : 0)),
        ),
        "thu_sales": _sum(
          g.items.map((x) => ((x.d_day_name == "Thursday") ? x.price : 0)),
        ),
        "fri_sales": _sum(
          g.items.map((x) => ((x.d_day_name == "Friday") ? x.price : 0)),
        ),
        "sat_sales": _sum(
          g.items.map((x) => ((x.d_day_name == "Saturday") ? x.price : 0)),
        ),
      });
    }
    return _res;
  })();
  result = base;
  console.log(_json(result));
  test_TPCDS_Q43_simplified();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
