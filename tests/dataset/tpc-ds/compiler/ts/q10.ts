// Generated by Mochi TypeScript compiler

type Customer = {
  c_customer_sk: number;
  c_current_addr_sk: number;
  c_current_cdemo_sk: number;
};

type CustomerAddress = {
  ca_address_sk: number;
  ca_county: string;
};

type CustomerDemographics = {
  cd_demo_sk: number;
  cd_gender: string;
  cd_marital_status: string;
  cd_education_status: string;
  cd_purchase_estimate: number;
  cd_credit_rating: string;
  cd_dep_count: number;
  cd_dep_employed_count: number;
  cd_dep_college_count: number;
};

type StoreSale = {
  ss_customer_sk: number;
  ss_sold_date_sk: number;
};

type DateDim = {
  d_date_sk: number;
  d_year: number;
  d_moy: number;
};

let active: Record<string, any>[];
let catalog_sales: any[];
let customer: Record<string, number>[];
let customer_address: Record<string, any>[];
let customer_demographics: Record<string, any>[];
let date_dim: Record<string, number>[];
let result: Record<string, any>[];
let store_sales: Record<string, number>[];
let web_sales: any[];

function test_TPCDS_Q10_demographics_count(): void {
  if (
    !(_equal(result, [
      {
        "cd_gender": "F",
        "cd_marital_status": "M",
        "cd_education_status": "College",
        "cnt1": 1,
        "cd_purchase_estimate": 5000,
        "cnt2": 1,
        "cd_credit_rating": "Good",
        "cnt3": 1,
        "cd_dep_count": 1,
        "cnt4": 1,
        "cd_dep_employed_count": 1,
        "cnt5": 1,
        "cd_dep_college_count": 0,
        "cnt6": 1,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  customer = [
    {
      "c_customer_sk": 1,
      "c_current_addr_sk": 1,
      "c_current_cdemo_sk": 1,
    },
  ];
  customer_address = [
    {
      "ca_address_sk": 1,
      "ca_county": "CountyA",
    },
  ];
  customer_demographics = [
    {
      "cd_demo_sk": 1,
      "cd_gender": "F",
      "cd_marital_status": "M",
      "cd_education_status": "College",
      "cd_purchase_estimate": 5000,
      "cd_credit_rating": "Good",
      "cd_dep_count": 1,
      "cd_dep_employed_count": 1,
      "cd_dep_college_count": 0,
    },
  ];
  store_sales = [
    {
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
    },
  ];
  web_sales = [];
  catalog_sales = [];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 2000,
      "d_moy": 2,
    },
  ];
  active = (() => {
    const _src = customer;
    return _query(_src, [
      {
        items: customer_address,
        on: (
          c,
          ca,
        ) => (_equal(c.c_current_addr_sk, ca.ca_address_sk) &&
          _equal(ca.ca_county, "CountyA")),
      },
      {
        items: customer_demographics,
        on: (c, ca, cd) => (_equal(c.c_current_cdemo_sk, cd.cd_demo_sk)),
      },
    ], {
      select: (c, ca, cd) => cd,
      where: (c, ca, cd) => (_exists((() => {
        const _src = store_sales;
        return _query(_src, [
          {
            items: date_dim,
            on: (ss, d) => (ss.ss_sold_date_sk == d.d_date_sk),
          },
        ], {
          select: (ss, d) => ss,
          where: (
            ss,
            d,
          ) => ((((ss.ss_customer_sk == c.c_customer_sk) &&
            (d.d_year == 2000)) && (d.d_moy >= 2)) && (d.d_moy <= 5)),
        });
      })())),
    });
  })();
  result = (() => {
    const _src = active;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const a of _src) {
      const _key = {
        "gender": a.cd_gender,
        "marital": a.cd_marital_status,
        "education": a.cd_education_status,
        "purchase": a.cd_purchase_estimate,
        "credit": a.cd_credit_rating,
        "dep": a.cd_dep_count,
        "depemp": a.cd_dep_employed_count,
        "depcol": a.cd_dep_college_count,
      };
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push({ ...a, a: a });
    }
    let _groups = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "cd_gender": g.key.gender,
        "cd_marital_status": g.key.marital,
        "cd_education_status": g.key.education,
        "cnt1": _count(g.items.map((_) => _)),
        "cd_purchase_estimate": g.key.purchase,
        "cnt2": _count(g.items.map((_) => _)),
        "cd_credit_rating": g.key.credit,
        "cnt3": _count(g.items.map((_) => _)),
        "cd_dep_count": g.key.dep,
        "cnt4": _count(g.items.map((_) => _)),
        "cd_dep_employed_count": g.key.depemp,
        "cnt5": _count(g.items.map((_) => _)),
        "cd_dep_college_count": g.key.depcol,
        "cnt6": _count(g.items.map((_) => _)),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q10_demographics_count();
}
function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _exists(v: any): boolean {
  if (Array.isArray(v)) return v.length > 0;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length > 0;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length > 0;
    return Object.keys(v).length > 0;
  }
  if (typeof v === "string") return v.length > 0;
  return false;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

function _query(src: any[], joins: any[], opts: any): any {
  let items = src.map((v) => [v]);
  for (const j of joins) {
    const joined: any[] = [];
    if (j.right && j.left) {
      const matched: boolean[] = new Array(j.items.length).fill(false);
      for (const left of items) {
        let m = false;
        for (let ri = 0; ri < j.items.length; ri++) {
          const right = j.items[ri];
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          matched[ri] = true;
          joined.push([...left, right]);
        }
        if (!m) joined.push([...left, null]);
      }
      for (let ri = 0; ri < j.items.length; ri++) {
        if (!matched[ri]) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, j.items[ri]]);
        }
      }
    } else if (j.right) {
      for (const right of j.items) {
        let m = false;
        for (const left of items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (!m) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, right]);
        }
      }
    } else {
      for (const left of items) {
        let m = false;
        for (const right of j.items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (j.left && !m) joined.push([...left, null]);
      }
    }
    items = joined;
  }
  if (opts.where) items = items.filter((r) => opts.where(...r));
  if (opts.sortKey) {
    let pairs = items.map((it) => ({ item: it, key: opts.sortKey(...it) }));
    pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    items = pairs.map((p) => p.item);
  }
  if (opts.skip !== undefined) {
    const n = opts.skip;
    items = n < items.length ? items.slice(n) : [];
  }
  if (opts.take !== undefined) {
    const n = opts.take;
    if (n < items.length) items = items.slice(0, n);
  }
  const res = [];
  for (const r of items) res.push(opts.select(...r));
  return res;
}

main();
