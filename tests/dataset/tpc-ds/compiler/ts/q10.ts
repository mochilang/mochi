// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:37:13Z
// Source: tests/dataset/tpc-ds/q10.mochi

type Customer = {
  c_customer_sk: number;
  c_current_addr_sk: number;
  c_current_cdemo_sk: number;
};

type CustomerAddress = {
  ca_address_sk: number;
  ca_county: string;
};

type CustomerDemographics = {
  cd_demo_sk: number;
  cd_gender: string;
  cd_marital_status: string;
  cd_education_status: string;
  cd_purchase_estimate: number;
  cd_credit_rating: string;
  cd_dep_count: number;
  cd_dep_employed_count: number;
  cd_dep_college_count: number;
};

type StoreSale = {
  ss_customer_sk: number;
  ss_sold_date_sk: number;
};

type DateDim = {
  d_date_sk: number;
  d_year: number;
  d_moy: number;
};

let active: Record<string, any>[];
let catalog_sales: any[];
let customer: { [key: string]: number }[];
let customer_address: Record<string, any>[];
let customer_demographics: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let result: Record<string, any>[];
let store_sales: { [key: string]: number }[];
let web_sales: any[];

function test_TPCDS_Q10_demographics_count(): void {
  if (
    !(_equal(result, [
      {
        "cd_gender": "F",
        "cd_marital_status": "M",
        "cd_education_status": "College",
        "cnt1": 1,
        "cd_purchase_estimate": 5000,
        "cnt2": 1,
        "cd_credit_rating": "Good",
        "cnt3": 1,
        "cd_dep_count": 1,
        "cnt4": 1,
        "cd_dep_employed_count": 1,
        "cnt5": 1,
        "cd_dep_college_count": 0,
        "cnt6": 1,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  customer = [
    {
      "c_customer_sk": 1,
      "c_current_addr_sk": 1,
      "c_current_cdemo_sk": 1,
    },
  ];
  customer_address = [
    {
      "ca_address_sk": 1,
      "ca_county": "CountyA",
    },
  ];
  customer_demographics = [
    {
      "cd_demo_sk": 1,
      "cd_gender": "F",
      "cd_marital_status": "M",
      "cd_education_status": "College",
      "cd_purchase_estimate": 5000,
      "cd_credit_rating": "Good",
      "cd_dep_count": 1,
      "cd_dep_employed_count": 1,
      "cd_dep_college_count": 0,
    },
  ];
  store_sales = [
    {
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
    },
  ];
  web_sales = [];
  catalog_sales = [];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 2000,
      "d_moy": 2,
    },
  ];
  active = (() => {
    const _src = customer;
    const _res = [];
    for (const c of _src) {
      for (const ca of customer_address) {
        if (
          !((c.c_current_addr_sk == ca.ca_address_sk) &&
            (ca.ca_county == "CountyA"))
        ) continue;
        for (const cd of customer_demographics) {
          if (!(c.c_current_cdemo_sk == cd.cd_demo_sk)) continue;
          if (
            !(_exists((() => {
              const _src = store_sales;
              const _res = [];
              for (const ss of _src) {
                for (const d of date_dim) {
                  if (!(ss.ss_sold_date_sk == d.d_date_sk)) continue;
                  if (
                    !((((ss.ss_customer_sk == c.c_customer_sk) &&
                      (d.d_year == 2000)) && (d.d_moy >= 2)) && (d.d_moy <= 5))
                  ) continue;
                  _res.push(ss);
                }
              }
              return _res;
            })()))
          ) continue;
          _res.push(cd);
        }
      }
    }
    return _res;
  })();
  result = (() => {
    const _src = active;
    const _map = new Map<string, any>();
    var _items = [];
    for (const a of _src) {
      const _key = {
        "gender": a.cd_gender,
        "marital": a.cd_marital_status,
        "education": a.cd_education_status,
        "purchase": a.cd_purchase_estimate,
        "credit": a.cd_credit_rating,
        "dep": a.cd_dep_count,
        "depemp": a.cd_dep_employed_count,
        "depcol": a.cd_dep_college_count,
      };
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...a, a: a });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "cd_gender": g.key.gender,
        "cd_marital_status": g.key.marital,
        "cd_education_status": g.key.education,
        "cnt1": _count(g.items.map((_) => _)),
        "cd_purchase_estimate": g.key.purchase,
        "cnt2": _count(g.items.map((_) => _)),
        "cd_credit_rating": g.key.credit,
        "cnt3": _count(g.items.map((_) => _)),
        "cd_dep_count": g.key.dep,
        "cnt4": _count(g.items.map((_) => _)),
        "cd_dep_employed_count": g.key.depemp,
        "cnt5": _count(g.items.map((_) => _)),
        "cd_dep_college_count": g.key.depcol,
        "cnt6": _count(g.items.map((_) => _)),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q10_demographics_count();
}
function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _exists(v: any): boolean {
  if (Array.isArray(v)) return v.length > 0;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length > 0;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length > 0;
    return Object.keys(v).length > 0;
  }
  if (typeof v === "string") return v.length > 0;
  return false;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

main();
