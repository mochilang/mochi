// Generated by Mochi TypeScript compiler

let best: Record<string, any>;
let best_name: any;
let grouped: Record<string, any>[];
let grouped_base: Record<string, any>[];
let item: Record<string, any>[];
let result: Record<string, any>;
let store_sales: Record<string, any>[];
let worst: Record<string, any>;
let worst_name: any;

function test_TPCDS_Q44_simplified(): void {
  if (
    !(_equal(result, {
      "best_performing": "ItemA",
      "worst_performing": "ItemB",
    }))
  ) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "ss_item_sk": 1,
      "ss_store_sk": 1,
      "ss_net_profit": 5,
    },
    {
      "ss_item_sk": 1,
      "ss_store_sk": 1,
      "ss_net_profit": 5,
    },
    {
      "ss_item_sk": 2,
      "ss_store_sk": 1,
      "ss_net_profit": (-1),
    },
  ];
  item = [
    {
      "i_item_sk": 1,
      "i_product_name": "ItemA",
    },
    {
      "i_item_sk": 2,
      "i_product_name": "ItemB",
    },
  ];
  grouped_base = (() => {
    const _src = store_sales;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const ss of _src) {
      const _key = ss.ss_item_sk;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push({ ...ss, ss: ss });
    }
    let _groups = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "item_sk": g.key,
        "avg_profit": _avg(g.items.map((x) => x.ss_net_profit)),
      });
    }
    return _res;
  })();
  grouped = grouped_base;
  best = ((() => {
    const _src = grouped;
    var _items = [];
    for (const x of _src) {
      _items.push(x);
    }
    let _pairs = _items.map((it) => {
      const x = it;
      return { item: it, key: (-x.avg_profit) };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const x of _items) {
      _res.push(x);
    }
    return _res;
  })())[0];
  worst = ((() => {
    const _src = grouped;
    var _items = [];
    for (const x of _src) {
      _items.push(x);
    }
    let _pairs = _items.map((it) => {
      const x = it;
      return { item: it, key: x.avg_profit };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const x of _items) {
      _res.push(x);
    }
    return _res;
  })())[0];
  best_name =
    (item.filter((i) => (_equal(i.i_item_sk, best.item_sk))).map((i) =>
      i.i_product_name
    ))[0];
  worst_name =
    (item.filter((i) => (_equal(i.i_item_sk, worst.item_sk))).map((i) =>
      i.i_product_name
    ))[0];
  result = {
    "best_performing": best_name,
    "worst_performing": worst_name,
  };
  console.log(_json(result));
  test_TPCDS_Q44_simplified();
}
function _avg(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum / list.length;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
