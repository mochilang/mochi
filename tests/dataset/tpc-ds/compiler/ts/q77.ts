// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:53:49Z
// Source: tests/dataset/tpc-ds/q77.mochi

let catalog_returns: Record<string, any>[];
let catalog_sales: Record<string, any>[];
let cr: Record<string, any>[];
let cs: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let per_channel: any[];
let result: Record<string, any>[];
let sr: Record<string, any>[];
let ss: Record<string, any>[];
let store_returns: Record<string, any>[];
let store_sales: Record<string, any>[];
let web_returns: Record<string, any>[];
let web_sales: Record<string, any>[];
let wr: Record<string, any>[];
let ws: Record<string, any>[];

function test_TPCDS_Q77_simplified(): void {
  if (
    !(_equal(result, [
      {
        "channel": "catalog channel",
        "id": 1,
        "sales": 150,
        "returns": 7,
        "profit": 12,
      },
      {
        "channel": "store channel",
        "id": 1,
        "sales": 100,
        "returns": 5,
        "profit": 9,
      },
      {
        "channel": "web channel",
        "id": 1,
        "sales": 200,
        "returns": 10,
        "profit": 18,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  date_dim = [
    {
      "d_date_sk": 1,
      "d_date": 1,
    },
  ];
  store_sales = [
    {
      "ss_sold_date_sk": 1,
      "s_store_sk": 1,
      "ss_ext_sales_price": 100,
      "ss_net_profit": 10,
    },
  ];
  store_returns = [
    {
      "sr_returned_date_sk": 1,
      "s_store_sk": 1,
      "sr_return_amt": 5,
      "sr_net_loss": 1,
    },
  ];
  catalog_sales = [
    {
      "cs_sold_date_sk": 1,
      "cs_call_center_sk": 1,
      "cs_ext_sales_price": 150,
      "cs_net_profit": 15,
    },
  ];
  catalog_returns = [
    {
      "cr_returned_date_sk": 1,
      "cr_call_center_sk": 1,
      "cr_return_amount": 7,
      "cr_net_loss": 3,
    },
  ];
  web_sales = [
    {
      "ws_sold_date_sk": 1,
      "ws_web_page_sk": 1,
      "ws_ext_sales_price": 200,
      "ws_net_profit": 20,
    },
  ];
  web_returns = [
    {
      "wr_returned_date_sk": 1,
      "wr_web_page_sk": 1,
      "wr_return_amt": 10,
      "wr_net_loss": 2,
    },
  ];
  ss = (() => {
    const _src = store_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const ss of _src) {
      for (const d of date_dim) {
        if (!(d.d_date_sk == ss.ss_sold_date_sk)) continue;
        const _key = ss.s_store_sk;
        const _ks = JSON.stringify(_key);
        let _g = _map.get(_ks);
        if (!_g) {
          _g = { key: _key, items: [] };
          _map.set(_ks, _g);
        }
        _g.items.push({ ...ss, ...d, ss: ss, d: d });
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "s_store_sk": g.key,
        "sales": _sum(g.items.map((x) => x.ss.ss_ext_sales_price)),
        "profit": _sum(g.items.map((x) => x.ss.ss_net_profit)),
      });
    }
    return _res;
  })();
  sr = (() => {
    const _src = store_returns;
    const _map = new Map<string, any>();
    var _items = [];
    for (const sr of _src) {
      for (const d of date_dim) {
        if (!(d.d_date_sk == sr.sr_returned_date_sk)) continue;
        const _key = sr.s_store_sk;
        const _ks = JSON.stringify(_key);
        let _g = _map.get(_ks);
        if (!_g) {
          _g = { key: _key, items: [] };
          _map.set(_ks, _g);
        }
        _g.items.push({ ...sr, ...d, sr: sr, d: d });
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "s_store_sk": g.key,
        "returns": _sum(g.items.map((x) => x.sr.sr_return_amt)),
        "profit_loss": _sum(g.items.map((x) => x.sr.sr_net_loss)),
      });
    }
    return _res;
  })();
  cs = (() => {
    const _src = catalog_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const cs of _src) {
      for (const d of date_dim) {
        if (!(d.d_date_sk == cs.cs_sold_date_sk)) continue;
        const _key = cs.cs_call_center_sk;
        const _ks = JSON.stringify(_key);
        let _g = _map.get(_ks);
        if (!_g) {
          _g = { key: _key, items: [] };
          _map.set(_ks, _g);
        }
        _g.items.push({ ...cs, ...d, cs: cs, d: d });
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "cs_call_center_sk": g.key,
        "sales": _sum(g.items.map((x) => x.cs.cs_ext_sales_price)),
        "profit": _sum(g.items.map((x) => x.cs.cs_net_profit)),
      });
    }
    return _res;
  })();
  cr = (() => {
    const _src = catalog_returns;
    const _map = new Map<string, any>();
    var _items = [];
    for (const cr of _src) {
      for (const d of date_dim) {
        if (!(d.d_date_sk == cr.cr_returned_date_sk)) continue;
        const _key = cr.cr_call_center_sk;
        const _ks = JSON.stringify(_key);
        let _g = _map.get(_ks);
        if (!_g) {
          _g = { key: _key, items: [] };
          _map.set(_ks, _g);
        }
        _g.items.push({ ...cr, ...d, cr: cr, d: d });
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "cr_call_center_sk": g.key,
        "returns": _sum(g.items.map((x) => x.cr.cr_return_amount)),
        "profit_loss": _sum(g.items.map((x) => x.cr.cr_net_loss)),
      });
    }
    return _res;
  })();
  ws = (() => {
    const _src = web_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const ws of _src) {
      for (const d of date_dim) {
        if (!(d.d_date_sk == ws.ws_sold_date_sk)) continue;
        const _key = ws.ws_web_page_sk;
        const _ks = JSON.stringify(_key);
        let _g = _map.get(_ks);
        if (!_g) {
          _g = { key: _key, items: [] };
          _map.set(_ks, _g);
        }
        _g.items.push({ ...ws, ...d, ws: ws, d: d });
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "wp_web_page_sk": g.key,
        "sales": _sum(g.items.map((x) => x.ws.ws_ext_sales_price)),
        "profit": _sum(g.items.map((x) => x.ws.ws_net_profit)),
      });
    }
    return _res;
  })();
  wr = (() => {
    const _src = web_returns;
    const _map = new Map<string, any>();
    var _items = [];
    for (const wr of _src) {
      for (const d of date_dim) {
        if (!(d.d_date_sk == wr.wr_returned_date_sk)) continue;
        const _key = wr.wr_web_page_sk;
        const _ks = JSON.stringify(_key);
        let _g = _map.get(_ks);
        if (!_g) {
          _g = { key: _key, items: [] };
          _map.set(_ks, _g);
        }
        _g.items.push({ ...wr, ...d, wr: wr, d: d });
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "wp_web_page_sk": g.key,
        "returns": _sum(g.items.map((x) => x.wr.wr_return_amt)),
        "profit_loss": _sum(g.items.map((x) => x.wr.wr_net_loss)),
      });
    }
    return _res;
  })();
  per_channel = [].concat(
    (() => {
      const _src = ss;
      const _join = sr;
      const _res = [];
      for (const s of _src) {
        let _m = false;
        for (const r of _join) {
          if (!(s.s_store_sk == r.s_store_sk)) continue;
          _m = true;
          _res.push({
            "channel": "store channel",
            "id": s.s_store_sk,
            "sales": s.sales,
            "returns": (_equal(r, null) ? 0 : r.returns),
            "profit": (s.profit - (_equal(r, null) ? 0 : r.profit_loss)),
          });
        }
        if (!_m) {
          const r = null;
          _res.push({
            "channel": "store channel",
            "id": s.s_store_sk,
            "sales": s.sales,
            "returns": (_equal(r, null) ? 0 : r.returns),
            "profit": (s.profit - (_equal(r, null) ? 0 : r.profit_loss)),
          });
        }
      }
      return _res;
    })(),
    (() => {
      const _src = cs;
      const _join = cr;
      const _pairs = _hashJoin(_src, _join, (c) =>
        c.cs_call_center_sk, (r) =>
        r.cr_call_center_sk);
      const _res = [];
      for (const _p of _pairs) {
        const c = _p[0];
        const r = _p[1];
        _res.push({
          "channel": "catalog channel",
          "id": c.cs_call_center_sk,
          "sales": c.sales,
          "returns": r.returns,
          "profit": (c.profit - r.profit_loss),
        });
      }
      return _res;
    })(),
    (() => {
      const _src = ws;
      const _join = wr;
      const _res = [];
      for (const w of _src) {
        let _m = false;
        for (const r of _join) {
          if (!(w.wp_web_page_sk == r.wp_web_page_sk)) continue;
          _m = true;
          _res.push({
            "channel": "web channel",
            "id": w.wp_web_page_sk,
            "sales": w.sales,
            "returns": (_equal(r, null) ? 0 : r.returns),
            "profit": (w.profit - (_equal(r, null) ? 0 : r.profit_loss)),
          });
        }
        if (!_m) {
          const r = null;
          _res.push({
            "channel": "web channel",
            "id": w.wp_web_page_sk,
            "sales": w.sales,
            "returns": (_equal(r, null) ? 0 : r.returns),
            "profit": (w.profit - (_equal(r, null) ? 0 : r.profit_loss)),
          });
        }
      }
      return _res;
    })(),
  );
  result = (() => {
    const _src = per_channel;
    const _map = new Map<string, any>();
    var _items = [];
    for (const p of _src) {
      const _key = {
        "channel": p.channel,
        "id": p.id,
      };
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...p, p: p });
    }
    let _groups = Array.from(_map.values());
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return { item: it, key: g.key.channel };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "channel": g.key.channel,
        "id": g.key.id,
        "sales": _sum(g.items.map((x) => x.p.sales)),
        "returns": _sum(g.items.map((x) => x.p.returns)),
        "profit": _sum(g.items.map((x) => x.p.profit)),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q77_simplified();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _hashJoin(
  left: any[],
  right: any[],
  lk: (v: any) => any,
  rk: (v: any) => any,
): any[] {
  const idx = new Map<any, any[]>();
  for (const r of right) {
    const k = rk(r);
    const arr = idx.get(k);
    if (arr) arr.push(r);
    else idx.set(k, [r]);
  }
  const out: any[] = [];
  for (const l of left) {
    const arr = idx.get(lk(l));
    if (!arr) continue;
    for (const r of arr) out.push([l, r]);
  }
  return out;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
