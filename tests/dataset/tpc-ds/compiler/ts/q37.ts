// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:53:46Z
// Source: tests/dataset/tpc-ds/q37.mochi

let catalog_sales: { [key: string]: number }[];
let date_dim: Record<string, any>[];
let inventory: { [key: string]: number }[];
let item: Record<string, any>[];
let result: Record<string, any>[];

function test_TPCDS_Q37_simplified(): void {
  if (
    !(_equal(result, [
      {
        "i_item_id": "I1",
        "i_item_desc": "Item1",
        "i_current_price": 30,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  item = [
    {
      "i_item_sk": 1,
      "i_item_id": "I1",
      "i_item_desc": "Item1",
      "i_current_price": 30,
      "i_manufact_id": 800,
    },
    {
      "i_item_sk": 2,
      "i_item_id": "I2",
      "i_item_desc": "Item2",
      "i_current_price": 60,
      "i_manufact_id": 801,
    },
  ];
  inventory = [
    {
      "inv_item_sk": 1,
      "inv_warehouse_sk": 1,
      "inv_date_sk": 1,
      "inv_quantity_on_hand": 200,
    },
    {
      "inv_item_sk": 2,
      "inv_warehouse_sk": 1,
      "inv_date_sk": 1,
      "inv_quantity_on_hand": 300,
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_date": "2000-01-15",
    },
  ];
  catalog_sales = [
    {
      "cs_item_sk": 1,
      "cs_sold_date_sk": 1,
    },
  ];
  result = (() => {
    const _src = item;
    const _map = new Map<string, any>();
    var _items = [];
    for (const i of _src) {
      for (const inv of inventory) {
        if (!(i.i_item_sk == inv.inv_item_sk)) continue;
        for (const d of date_dim) {
          if (!(inv.inv_date_sk == d.d_date_sk)) continue;
          for (const cs of catalog_sales) {
            if (!(cs.cs_item_sk == i.i_item_sk)) continue;
            if (
              !((((((i.i_current_price >= 20) && (i.i_current_price <= 50)) &&
                (i.i_manufact_id >= 800)) && (i.i_manufact_id <= 803)) &&
                (inv.inv_quantity_on_hand >= 100)) &&
                (inv.inv_quantity_on_hand <= 500))
            ) continue;
            const _key = {
              "id": i.i_item_id,
              "desc": i.i_item_desc,
              "price": i.i_current_price,
            };
            const _ks = JSON.stringify(_key);
            let _g = _map.get(_ks);
            if (!_g) {
              _g = { key: _key, items: [] };
              _map.set(_ks, _g);
            }
            _g.items.push({
              ...i,
              ...inv,
              ...d,
              ...cs,
              i: i,
              inv: inv,
              d: d,
              cs: cs,
            });
          }
        }
      }
    }
    let _groups = Array.from(_map.values());
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return { item: it, key: g.key.id };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "i_item_id": g.key.id,
        "i_item_desc": g.key.desc,
        "i_current_price": g.key.price,
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q37_simplified();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

main();
