// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:46:16Z
// Source: tests/dataset/tpc-ds/q73.mochi

let customer: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let groups: Record<string, any>[];
let household_demographics: Record<string, any>[];
let result: Record<string, any>[];
let store: Record<string, any>[];
let store_sales: { [key: string]: number }[];

function test_TPCDS_Q73_simplified(): void {
  if (
    !(_equal(result, [
      {
        "c_last_name": "Smith",
        "c_first_name": "Alice",
        "c_salutation": "Ms.",
        "c_preferred_cust_flag": "Y",
        "ss_ticket_number": 1,
        "cnt": 1,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "ss_ticket_number": 1,
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 1,
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_dom": 1,
      "d_year": 1998,
    },
  ];
  store = [
    {
      "s_store_sk": 1,
      "s_county": "A",
    },
  ];
  household_demographics = [
    {
      "hd_demo_sk": 1,
      "hd_buy_potential": "1001-5000",
      "hd_vehicle_count": 2,
      "hd_dep_count": 3,
    },
  ];
  customer = [
    {
      "c_customer_sk": 1,
      "c_last_name": "Smith",
      "c_first_name": "Alice",
      "c_salutation": "Ms.",
      "c_preferred_cust_flag": "Y",
    },
  ];
  groups = (() => {
    const _src = store_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const ss of _src) {
      for (const d of date_dim) {
        if (!(d.d_date_sk == ss.ss_sold_date_sk)) continue;
        for (const s of store) {
          if (!(s.s_store_sk == ss.ss_store_sk)) continue;
          for (const hd of household_demographics) {
            if (!(hd.hd_demo_sk == ss.ss_hdemo_sk)) continue;
            if (
              !(((((((d.d_dom >= 1) && (d.d_dom <= 2)) &&
                ((hd.hd_buy_potential == "1001-5000") ||
                  (hd.hd_buy_potential == "0-500"))) &&
                (hd.hd_vehicle_count > 0)) &&
                ((hd.hd_dep_count / hd.hd_vehicle_count) > 1)) &&
                (((d.d_year == 1998) || (d.d_year == 1999)) ||
                  (d.d_year == 2000))) && (s.s_county == "A"))
            ) continue;
            const _key = {
              "ticket": ss.ss_ticket_number,
              "cust": ss.ss_customer_sk,
            };
            const _ks = JSON.stringify(_key);
            let _g = _map.get(_ks);
            if (!_g) {
              _g = { key: _key, items: [] };
              _map.set(_ks, _g);
            }
            _g.items.push({
              ...ss,
              ...d,
              ...s,
              ...hd,
              ss: ss,
              d: d,
              s: s,
              hd: hd,
            });
          }
        }
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "key": g.key,
        "cnt": g.items.length,
      });
    }
    return _res;
  })();
  result = (() => {
    const _src = groups;
    var _items = [];
    for (const g of _src) {
      for (const c of customer) {
        if (!(c.c_customer_sk == g.key.cust)) continue;
        if (!((g.cnt >= 1) && (g.cnt <= 5))) continue;
        _items.push({ g: g, c: c });
      }
    }
    let _pairs = _items.map((it) => {
      const { g, c } = it;
      return { item: it, key: [-g.cnt, c.c_last_name] };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const _it of _items) {
      const g = _it.g;
      const c = _it.c;
      _res.push({
        "c_last_name": c.c_last_name,
        "c_first_name": c.c_first_name,
        "c_salutation": c.c_salutation,
        "c_preferred_cust_flag": c.c_preferred_cust_flag,
        "ss_ticket_number": g.key.ticket,
        "cnt": g.cnt,
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q73_simplified();
}
function _cmp(a: unknown, b: unknown): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    const order: Record<string, number> = { store: 0, web: 1, catalog: 2 };
    if (order[a] !== undefined && order[b] !== undefined) {
      return order[a] - order[b];
    }
    return a < b ? -1 : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
