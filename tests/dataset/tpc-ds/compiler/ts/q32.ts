// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:53:46Z
// Source: tests/dataset/tpc-ds/q32.mochi

let avg_discount: number;
let catalog_sales: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let filtered: any[];
let item: { [key: string]: number }[];
let result: number;

function test_TPCDS_Q32_simplified(): void {
  if (!(result == 20)) throw new Error("expect failed");
}

function main(): void {
  catalog_sales = [
    {
      "cs_item_sk": 1,
      "cs_sold_date_sk": 1,
      "cs_ext_discount_amt": 5,
    },
    {
      "cs_item_sk": 1,
      "cs_sold_date_sk": 2,
      "cs_ext_discount_amt": 10,
    },
    {
      "cs_item_sk": 1,
      "cs_sold_date_sk": 3,
      "cs_ext_discount_amt": 20,
    },
  ];
  item = [
    {
      "i_item_sk": 1,
      "i_manufact_id": 1,
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 2000,
    },
    {
      "d_date_sk": 2,
      "d_year": 2000,
    },
    {
      "d_date_sk": 3,
      "d_year": 2000,
    },
  ];
  filtered = (() => {
    const _src = catalog_sales;
    const _res = [];
    for (const cs of _src) {
      for (const i of item) {
        if (!(cs.cs_item_sk == i.i_item_sk)) continue;
        for (const d of date_dim) {
          if (!(cs.cs_sold_date_sk == d.d_date_sk)) continue;
          if (!((i.i_manufact_id == 1) && (d.d_year == 2000))) continue;
          _res.push(cs.cs_ext_discount_amt);
        }
      }
    }
    return _res;
  })();
  avg_discount = _avg(filtered);
  result = _sum(
    filtered.filter((x) => (x > (avg_discount * 1.3))).map((x) => x),
  );
  console.log(_json(result));
  test_TPCDS_Q32_simplified();
}
function _avg(v: any): number {
  const c = _count(v);
  return c ? _sum(v) / c : 0;
}

function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
