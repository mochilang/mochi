// Generated by Mochi TypeScript compiler

type StoreSale = {
  ss_sold_date_sk: number;
  ss_item_sk: number;
  ss_store_sk: number;
  ss_customer_sk: number;
  ss_net_profit: number;
  ss_ticket_number: number;
};

type StoreReturn = {
  sr_returned_date_sk: number;
  sr_item_sk: number;
  sr_customer_sk: number;
  sr_ticket_number: number;
  sr_net_loss: number;
};

type CatalogSale = {
  cs_sold_date_sk: number;
  cs_item_sk: number;
  cs_bill_customer_sk: number;
  cs_net_profit: number;
};

type DateDim = {
  d_date_sk: number;
  d_moy: number;
  d_year: number;
};

type Store = {
  s_store_sk: number;
  s_store_id: string;
  s_store_name: string;
};

type Item = {
  i_item_sk: number;
  i_item_id: string;
  i_item_desc: string;
};

let catalog_sales: Record<string, any>[];
let date_dim: Record<string, number>[];
let item: Record<string, any>[];
let result: Record<string, any>[];
let store: Record<string, any>[];
let store_returns: Record<string, any>[];
let store_sales: Record<string, any>[];

function test_TPCDS_Q25_aggregated_profit(): void {
  if (
    !(_equal(result, [
      {
        "i_item_id": "ITEM1",
        "i_item_desc": "Desc1",
        "s_store_id": "S1",
        "s_store_name": "Store1",
        "store_sales_profit": 50,
        "store_returns_loss": 10,
        "catalog_sales_profit": 30,
      },
      {
        "i_item_id": "ITEM2",
        "i_item_desc": "Desc2",
        "s_store_id": "S1",
        "s_store_name": "Store1",
        "store_sales_profit": 20,
        "store_returns_loss": 5,
        "catalog_sales_profit": 15,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "ss_sold_date_sk": 1,
      "ss_item_sk": 1,
      "ss_store_sk": 1,
      "ss_customer_sk": 1,
      "ss_net_profit": 50,
      "ss_ticket_number": 1,
    },
    {
      "ss_sold_date_sk": 1,
      "ss_item_sk": 2,
      "ss_store_sk": 1,
      "ss_customer_sk": 2,
      "ss_net_profit": 20,
      "ss_ticket_number": 2,
    },
  ];
  store_returns = [
    {
      "sr_returned_date_sk": 2,
      "sr_item_sk": 1,
      "sr_customer_sk": 1,
      "sr_ticket_number": 1,
      "sr_net_loss": 10,
    },
    {
      "sr_returned_date_sk": 2,
      "sr_item_sk": 2,
      "sr_customer_sk": 2,
      "sr_ticket_number": 2,
      "sr_net_loss": 5,
    },
  ];
  catalog_sales = [
    {
      "cs_sold_date_sk": 3,
      "cs_item_sk": 1,
      "cs_bill_customer_sk": 1,
      "cs_net_profit": 30,
    },
    {
      "cs_sold_date_sk": 3,
      "cs_item_sk": 2,
      "cs_bill_customer_sk": 2,
      "cs_net_profit": 15,
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_moy": 4,
      "d_year": 2000,
    },
    {
      "d_date_sk": 2,
      "d_moy": 5,
      "d_year": 2000,
    },
    {
      "d_date_sk": 3,
      "d_moy": 6,
      "d_year": 2000,
    },
  ];
  store = [
    {
      "s_store_sk": 1,
      "s_store_id": "S1",
      "s_store_name": "Store1",
    },
  ];
  item = [
    {
      "i_item_sk": 1,
      "i_item_id": "ITEM1",
      "i_item_desc": "Desc1",
    },
    {
      "i_item_sk": 2,
      "i_item_id": "ITEM2",
      "i_item_desc": "Desc2",
    },
  ];
  result = (() => {
    const _src = store_sales;
    let _items = _query(_src, [
      {
        items: store_returns,
        on: (
          ss,
          sr,
        ) => (_equal(ss.ss_ticket_number, sr.sr_ticket_number) &&
          _equal(ss.ss_item_sk, sr.sr_item_sk)),
      },
      {
        items: catalog_sales,
        on: (
          ss,
          sr,
          cs,
        ) => (_equal(sr.sr_customer_sk, cs.cs_bill_customer_sk) &&
          _equal(sr.sr_item_sk, cs.cs_item_sk)),
      },
      {
        items: date_dim,
        on: (ss, sr, cs, d1) => (_equal(d1.d_date_sk, ss.ss_sold_date_sk)),
      },
      {
        items: date_dim,
        on: (
          ss,
          sr,
          cs,
          d1,
          d2,
        ) => (_equal(d2.d_date_sk, sr.sr_returned_date_sk)),
      },
      {
        items: date_dim,
        on: (
          ss,
          sr,
          cs,
          d1,
          d2,
          d3,
        ) => (_equal(d3.d_date_sk, cs.cs_sold_date_sk)),
      },
      {
        items: store,
        on: (
          ss,
          sr,
          cs,
          d1,
          d2,
          d3,
          s,
        ) => (_equal(s.s_store_sk, ss.ss_store_sk)),
      },
      {
        items: item,
        on: (
          ss,
          sr,
          cs,
          d1,
          d2,
          d3,
          s,
          i,
        ) => (_equal(i.i_item_sk, ss.ss_item_sk)),
      },
    ], {
      select: (ss, sr, cs, d1, d2, d3, s, i) => [ss, sr, cs, d1, d2, d3, s, i],
      where: (
        ss,
        sr,
        cs,
        d1,
        d2,
        d3,
        s,
        i,
      ) => ((((((d1.d_moy == 4) && (d1.d_year == 2000)) && (d2.d_moy >= 4)) &&
        (d2.d_moy <= 10)) && (d3.d_moy >= 4)) && (d3.d_moy <= 10)),
    });
    const _map = new Map<string, any>();
    const _order: string[] = [];
    for (const _r of _items) {
      const [ss, sr, cs, d1, d2, d3, s, i] = _r;
      const _key = {
        "item_id": i.i_item_id,
        "item_desc": i.i_item_desc,
        "s_store_id": s.s_store_id,
        "s_store_name": s.s_store_name,
      };
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push({
        ...ss,
        ...sr,
        ...cs,
        ...d1,
        ...d2,
        ...d3,
        ...s,
        ...i,
        ss: ss,
        sr: sr,
        cs: cs,
        d1: d1,
        d2: d2,
        d3: d3,
        s: s,
        i: i,
      });
    }
    let _itemsG = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _itemsG) {
      _res.push({
        "i_item_id": g.key.item_id,
        "i_item_desc": g.key.item_desc,
        "s_store_id": g.key.s_store_id,
        "s_store_name": g.key.s_store_name,
        "store_sales_profit": _sum(g.items.map((x) => x.ss_net_profit)),
        "store_returns_loss": _sum(g.items.map((x) => x.sr_net_loss)),
        "catalog_sales_profit": _sum(g.items.map((x) => x.cs_net_profit)),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q25_aggregated_profit();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

function _query(src: any[], joins: any[], opts: any): any {
  let items = src.map((v) => [v]);
  for (const j of joins) {
    const joined: any[] = [];
    if (j.right && j.left) {
      const matched: boolean[] = new Array(j.items.length).fill(false);
      for (const left of items) {
        let m = false;
        for (let ri = 0; ri < j.items.length; ri++) {
          const right = j.items[ri];
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          matched[ri] = true;
          joined.push([...left, right]);
        }
        if (!m) joined.push([...left, null]);
      }
      for (let ri = 0; ri < j.items.length; ri++) {
        if (!matched[ri]) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, j.items[ri]]);
        }
      }
    } else if (j.right) {
      for (const right of j.items) {
        let m = false;
        for (const left of items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (!m) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, right]);
        }
      }
    } else {
      for (const left of items) {
        let m = false;
        for (const right of j.items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (j.left && !m) joined.push([...left, null]);
      }
    }
    items = joined;
  }
  if (opts.where) items = items.filter((r) => opts.where(...r));
  if (opts.sortKey) {
    let pairs = items.map((it) => ({ item: it, key: opts.sortKey(...it) }));
    pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    items = pairs.map((p) => p.item);
  }
  if (opts.skip !== undefined) {
    const n = opts.skip;
    items = n < items.length ? items.slice(n) : [];
  }
  if (opts.take !== undefined) {
    const n = opts.take;
    if (n < items.length) items = items.slice(0, n);
  }
  const res = [];
  for (const r of items) res.push(opts.select(...r));
  return res;
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
