// Generated by Mochi TypeScript compiler

let catalog_sales: Record<string, number>[];
let result: number;
let web_sales: Record<string, number>[];

function test_TPCDS_Q66_simplified(): void {
  if (!(result == 66)) throw new Error("expect failed");
}

function main(): void {
  web_sales = [{ "net": 30 }];
  catalog_sales = [{ "net": 36 }];
  result = _sum(web_sales.map((w) => w.net)) +
    _sum(catalog_sales.map((c) => c.net));
  console.log(_json(result));
  test_TPCDS_Q66_simplified();
}
function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
