// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:46:12Z
// Source: tests/dataset/tpc-ds/q15.mochi

type CatalogSale = {
  cs_bill_customer_sk: number;
  cs_sales_price: number;
  cs_sold_date_sk: number;
};

type Customer = {
  c_customer_sk: number;
  c_current_addr_sk: number;
};

type CustomerAddress = {
  ca_address_sk: number;
  ca_zip: string;
  ca_state: string;
};

type DateDim = {
  d_date_sk: number;
  d_qoy: number;
  d_year: number;
};

let catalog_sales: Record<string, any>[];
let customer: { [key: string]: number }[];
let customer_address: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let filtered: Record<string, any>[];

function test_TPCDS_Q15_zip(): void {
  if (
    !(_equal(filtered, [
      {
        "ca_zip": "85669",
        "sum_sales": 600,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  catalog_sales = [
    {
      "cs_bill_customer_sk": 1,
      "cs_sales_price": 600,
      "cs_sold_date_sk": 1,
    },
  ];
  customer = [
    {
      "c_customer_sk": 1,
      "c_current_addr_sk": 1,
    },
  ];
  customer_address = [
    {
      "ca_address_sk": 1,
      "ca_zip": "85669",
      "ca_state": "CA",
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_qoy": 1,
      "d_year": 2000,
    },
  ];
  filtered = (() => {
    const _src = catalog_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const cs of _src) {
      for (const c of customer) {
        if (!(cs.cs_bill_customer_sk == c.c_customer_sk)) continue;
        for (const ca of customer_address) {
          if (!(c.c_current_addr_sk == ca.ca_address_sk)) continue;
          for (const d of date_dim) {
            if (!(cs.cs_sold_date_sk == d.d_date_sk)) continue;
            if (
              !((((([
                  "85669",
                  "86197",
                  "88274",
                  "83405",
                  "86475",
                  "85392",
                  "85460",
                  "80348",
                  "81792",
                ].includes(ca.ca_zip.substring(0, (0) + (5)))
                ? 1
                : 0) || (["CA", "WA", "GA"].includes(ca.ca_state) ? 1 : 0)) ||
                (cs.cs_sales_price > 500)) && (d.d_qoy == 1)) &&
                (d.d_year == 2000))
            ) continue;
            const _key = { "zip": ca.ca_zip };
            const _ks = JSON.stringify(_key);
            let _g = _map.get(_ks);
            if (!_g) {
              _g = { key: _key, items: [] };
              _map.set(_ks, _g);
            }
            _g.items.push({
              ...cs,
              ...c,
              ...ca,
              ...d,
              cs: cs,
              c: c,
              ca: ca,
              d: d,
            });
          }
        }
      }
    }
    let _groups = Array.from(_map.values());
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return { item: it, key: g.key.zip };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "ca_zip": g.key.zip,
        "sum_sales": g.items.map((x) => x.cs_sales_price).reduce(
          (a, b) => a + Number(b),
          0,
        ),
      });
    }
    return _res;
  })();
  console.log(_json(filtered));
  test_TPCDS_Q15_zip();
}
function _cmp(a: unknown, b: unknown): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    const order: Record<string, number> = { store: 0, web: 1, catalog: 2 };
    if (order[a] !== undefined && order[b] !== undefined) {
      return order[a] - order[b];
    }
    return a < b ? -1 : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
