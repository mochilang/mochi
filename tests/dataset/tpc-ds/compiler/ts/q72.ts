// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:49:44Z
// Source: tests/dataset/tpc-ds/q72.mochi

let catalog_sales: { [key: string]: number }[];
let customer_demographics: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let household_demographics: Record<string, any>[];
let inventory: { [key: string]: number }[];
let item: Record<string, any>[];
let result: Record<string, any>[];
let warehouse: Record<string, any>[];

function test_TPCDS_Q72_simplified(): void {
  if (
    !(_equal(result, [
      {
        "i_item_desc": "ItemA",
        "w_warehouse_name": "Main",
        "d_week_seq": 10,
        "no_promo": 1,
        "promo": 0,
        "total_cnt": 1,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  catalog_sales = [
    {
      "cs_item_sk": 1,
      "cs_order_number": 1,
      "cs_quantity": 1,
      "cs_sold_date_sk": 1,
      "cs_ship_date_sk": 3,
      "cs_bill_cdemo_sk": 1,
      "cs_bill_hdemo_sk": 1,
      "cs_promo_sk": null,
    },
  ];
  inventory = [
    {
      "inv_item_sk": 1,
      "inv_warehouse_sk": 1,
      "inv_date_sk": 2,
      "inv_quantity_on_hand": 0,
    },
  ];
  warehouse = [
    {
      "w_warehouse_sk": 1,
      "w_warehouse_name": "Main",
    },
  ];
  item = [
    {
      "i_item_sk": 1,
      "i_item_desc": "ItemA",
    },
  ];
  customer_demographics = [
    {
      "cd_demo_sk": 1,
      "cd_marital_status": "M",
    },
  ];
  household_demographics = [
    {
      "hd_demo_sk": 1,
      "hd_buy_potential": "5001-10000",
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_week_seq": 10,
      "d_date": 1,
      "d_year": 2000,
    },
    {
      "d_date_sk": 2,
      "d_week_seq": 10,
      "d_date": 1,
      "d_year": 2000,
    },
    {
      "d_date_sk": 3,
      "d_week_seq": 10,
      "d_date": 7,
      "d_year": 2000,
    },
  ];
  result = (() => {
    const _src = catalog_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const cs of _src) {
      for (const inv of inventory) {
        if (!(inv.inv_item_sk == cs.cs_item_sk)) continue;
        for (const w of warehouse) {
          if (!(_equal(w.w_warehouse_sk, inv.inv_warehouse_sk))) continue;
          for (const i of item) {
            if (!(_equal(i.i_item_sk, cs.cs_item_sk))) continue;
            for (const cd of customer_demographics) {
              if (!(_equal(cd.cd_demo_sk, cs.cs_bill_cdemo_sk))) continue;
              for (const hd of household_demographics) {
                if (!(_equal(hd.hd_demo_sk, cs.cs_bill_hdemo_sk))) continue;
                for (const d1 of date_dim) {
                  if (!(d1.d_date_sk == cs.cs_sold_date_sk)) continue;
                  for (const d2 of date_dim) {
                    if (!(d2.d_date_sk == inv.inv_date_sk)) continue;
                    for (const d3 of date_dim) {
                      if (!(d3.d_date_sk == cs.cs_ship_date_sk)) continue;
                      if (
                        !((((((d1.d_week_seq == d2.d_week_seq) &&
                          (inv.inv_quantity_on_hand < cs.cs_quantity)) &&
                          (d3.d_date > (d1.d_date + 5))) &&
                          _equal(hd.hd_buy_potential, "5001-10000")) &&
                          (d1.d_year == 2000)) &&
                          _equal(cd.cd_marital_status, "M"))
                      ) continue;
                      const _key = {
                        "item_desc": i.i_item_desc,
                        "warehouse": w.w_warehouse_name,
                        "week_seq": d1.d_week_seq,
                      };
                      const _ks = JSON.stringify(_key);
                      let _g = _map.get(_ks);
                      if (!_g) {
                        _g = { key: _key, items: [] };
                        _map.set(_ks, _g);
                      }
                      _g.items.push({
                        ...cs,
                        ...inv,
                        ...w,
                        ...i,
                        ...cd,
                        ...hd,
                        ...d1,
                        ...d2,
                        ...d3,
                        cs: cs,
                        inv: inv,
                        w: w,
                        i: i,
                        cd: cd,
                        hd: hd,
                        d1: d1,
                        d2: d2,
                        d3: d3,
                      });
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "i_item_desc": g.key.item_desc,
        "w_warehouse_name": g.key.warehouse,
        "d_week_seq": g.key.week_seq,
        "no_promo": _count(
          g.items.filter((x) => (_equal(x.cs_promo_sk, null))).map((x) => x),
        ),
        "promo": _count(
          g.items.filter((x) => (!_equal(x.cs_promo_sk, null))).map((x) => x),
        ),
        "total_cnt": _count(g),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q72_simplified();
}
function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

main();
