// Generated by Mochi TypeScript compiler

let result: number;
let web_sales: Record<string, any>[];

function test_TPCDS_Q86_sample(): void {
  if (!(result == 86)) throw new Error("expect failed");
}

function main(): void {
  web_sales = [
    {
      "cat": "A",
      "_class": "B",
      "net": 40,
    },
    {
      "cat": "A",
      "_class": "B",
      "net": 46,
    },
    {
      "cat": "A",
      "_class": "C",
      "net": 10,
    },
    {
      "cat": "B",
      "_class": "B",
      "net": 20,
    },
  ];
  result = _sum(
    web_sales.filter((ws) => (_equal(ws.cat, "A") && _equal(ws._class, "B")))
      .map((ws) => ws.net),
  );
  console.log(_json(result));
  test_TPCDS_Q86_sample();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
