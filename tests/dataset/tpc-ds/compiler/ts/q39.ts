// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:53:47Z
// Source: tests/dataset/tpc-ds/q39.mochi

const math = {
  pi: Math.PI,
  e: Math.E,
  sqrt: Math.sqrt,
  pow: Math.pow,
  sin: Math.sin,
  log: Math.log,
};

let date_dim: { [key: string]: number }[];
var grouped: { [key: string]: Record<string, any> };
let inventory: { [key: string]: number }[];
let item: { [key: string]: number }[];
let monthly: Record<string, any>[];
var summary: any[];
let warehouse: Record<string, any>[];

function test_TPCDS_Q39_simplified(): void {
  if (
    !(_equal(summary, [
      {
        "w_warehouse_sk": 1,
        "i_item_sk": 1,
        "cov": 1.539600717839002,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  inventory = [
    {
      "inv_item_sk": 1,
      "inv_warehouse_sk": 1,
      "inv_date_sk": 1,
      "inv_quantity_on_hand": 10,
    },
    {
      "inv_item_sk": 1,
      "inv_warehouse_sk": 1,
      "inv_date_sk": 2,
      "inv_quantity_on_hand": 10,
    },
    {
      "inv_item_sk": 1,
      "inv_warehouse_sk": 1,
      "inv_date_sk": 3,
      "inv_quantity_on_hand": 250,
    },
  ];
  item = [{ "i_item_sk": 1 }];
  warehouse = [
    {
      "w_warehouse_sk": 1,
      "w_warehouse_name": "W1",
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 2000,
      "d_moy": 1,
    },
    {
      "d_date_sk": 2,
      "d_year": 2000,
      "d_moy": 2,
    },
    {
      "d_date_sk": 3,
      "d_year": 2000,
      "d_moy": 3,
    },
  ];
  monthly = (() => {
    const _src = inventory;
    const _map = new Map<string, any>();
    var _items = [];
    for (const inv of _src) {
      for (const d of date_dim) {
        if (!(inv.inv_date_sk == d.d_date_sk)) continue;
        for (const i of item) {
          if (!(inv.inv_item_sk == i.i_item_sk)) continue;
          for (const w of warehouse) {
            if (!(inv.inv_warehouse_sk == w.w_warehouse_sk)) continue;
            if (!(d.d_year == 2000)) continue;
            const _key = {
              "w": w.w_warehouse_sk,
              "i": i.i_item_sk,
              "month": d.d_moy,
            };
            const _ks = JSON.stringify(_key);
            let _g = _map.get(_ks);
            if (!_g) {
              _g = { key: _key, items: [] };
              _map.set(_ks, _g);
            }
            _g.items.push({
              ...inv,
              ...d,
              ...i,
              ...w,
              inv: inv,
              d: d,
              i: i,
              w: w,
            });
          }
        }
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "w": g.key.w,
        "i": g.key.i,
        "qty": _sum(g.items.map((x) => x.inv_quantity_on_hand)),
      });
    }
    return _res;
  })();
  grouped = {};
  for (const m of monthly) {
    let key = String({
      "w": m.w,
      "i": m.i,
    });
    if (Object.prototype.hasOwnProperty.call(grouped, String(key))) {
      let g = grouped[key];
      grouped[key] = {
        "w": g.w,
        "i": g.i,
        "qtys": [...g.qtys, m.qty],
      };
    } else {
      grouped[key] = {
        "w": m.w,
        "i": m.i,
        "qtys": [m.qty],
      };
    }
  }
  summary = [];
  for (const g of _values(grouped)) {
    let mean = _avg(g.qtys);
    var sumsq = 0;
    for (const q of _iter(g.qtys)) {
      sumsq = sumsq + ((q - mean) * (q - mean));
    }
    let variance = Math.trunc(
      sumsq / ((Array.isArray(g.qtys) || typeof g.qtys === "string"
        ? (g.qtys as any).length
        : (g.qtys && typeof g.qtys === "object"
          ? Object.keys(g.qtys).length
          : 0)) - 1),
    );
    let cov = math.sqrt(variance) / mean;
    if ((cov > 1.5)) {
      summary = [...summary, {
        "w_warehouse_sk": g.w,
        "i_item_sk": g.i,
        "cov": cov,
      }];
    }
  }
  console.log(_json(summary));
  test_TPCDS_Q39_simplified();
}
function _avg(v: any): number {
  const c = _count(v);
  return c ? _sum(v) / c : 0;
}

function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _iter<T>(
  v: Iterable<T> | { [key: string]: T } | any,
): Iterable<T | string> {
  if (
    v && typeof v === "object" && !Array.isArray(v) && !(Symbol.iterator in v)
  ) {
    return Object.keys(v);
  }
  return v as Iterable<T>;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

function _values<T>(m: { [key: string]: T }): T[] {
  if (m && typeof m === "object" && !Array.isArray(m)) {
    return Object.values(m);
  }
  throw new Error("values() expects map");
}

main();
