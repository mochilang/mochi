// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:46:13Z
// Source: tests/dataset/tpc-ds/q36.mochi

let date_dim: { [key: string]: number }[];
let item: Record<string, any>[];
let result: Record<string, any>[];
let store: Record<string, any>[];
let store_sales: Record<string, any>[];

function test_TPCDS_Q36_simplified(): void {
  if (
    !(_equal(result, [
      {
        "i_category": "Books",
        "i_class": "C1",
        "gross_margin": 0.2,
      },
      {
        "i_category": "Books",
        "i_class": "C2",
        "gross_margin": 0.25,
      },
      {
        "i_category": "Electronics",
        "i_class": "C3",
        "gross_margin": 0.2,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "ss_item_sk": 1,
      "ss_store_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_ext_sales_price": 100,
      "ss_net_profit": 20,
    },
    {
      "ss_item_sk": 2,
      "ss_store_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_ext_sales_price": 200,
      "ss_net_profit": 50,
    },
    {
      "ss_item_sk": 3,
      "ss_store_sk": 2,
      "ss_sold_date_sk": 1,
      "ss_ext_sales_price": 150,
      "ss_net_profit": 30,
    },
  ];
  item = [
    {
      "i_item_sk": 1,
      "i_category": "Books",
      "i_class": "C1",
    },
    {
      "i_item_sk": 2,
      "i_category": "Books",
      "i_class": "C2",
    },
    {
      "i_item_sk": 3,
      "i_category": "Electronics",
      "i_class": "C3",
    },
  ];
  store = [
    {
      "s_store_sk": 1,
      "s_state": "A",
    },
    {
      "s_store_sk": 2,
      "s_state": "B",
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 2000,
    },
  ];
  result = (() => {
    const _src = store_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const ss of _src) {
      for (const d of date_dim) {
        if (!(ss.ss_sold_date_sk == d.d_date_sk)) continue;
        for (const i of item) {
          if (!(ss.ss_item_sk == i.i_item_sk)) continue;
          for (const s of store) {
            if (!(ss.ss_store_sk == s.s_store_sk)) continue;
            if (
              !((d.d_year == 2000) &&
                ((s.s_state == "A") || (s.s_state == "B")))
            ) continue;
            const _key = {
              "category": i.i_category,
              "_class": i.i_class,
            };
            const _ks = JSON.stringify(_key);
            let _g = _map.get(_ks);
            if (!_g) {
              _g = { key: _key, items: [] };
              _map.set(_ks, _g);
            }
            _g.items.push({
              ...ss,
              ...d,
              ...i,
              ...s,
              ss: ss,
              d: d,
              i: i,
              s: s,
            });
          }
        }
      }
    }
    let _groups = Array.from(_map.values());
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return { item: it, key: [g.key.category, g.key._class] };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "i_category": g.key.category,
        "i_class": g.key._class,
        "gross_margin": (g.items.map((x) =>
          x.ss_net_profit
        ).reduce((a, b) => a + Number(b), 0) / g.items.map((x) =>
          x.ss_ext_sales_price
        ).reduce((a, b) =>
          a + Number(b), 0)),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q36_simplified();
}
function _cmp(a: unknown, b: unknown): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    const order: Record<string, number> = { store: 0, web: 1, catalog: 2 };
    if (order[a] !== undefined && order[b] !== undefined) {
      return order[a] - order[b];
    }
    return a < b ? -1 : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
