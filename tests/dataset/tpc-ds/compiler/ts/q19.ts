// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:37:13Z
// Source: tests/dataset/tpc-ds/q19.mochi

type StoreSale = {
  ss_sold_date_sk: number;
  ss_item_sk: number;
  ss_customer_sk: number;
  ss_store_sk: number;
  ss_ext_sales_price: number;
};

type DateDim = {
  d_date_sk: number;
  d_year: number;
  d_moy: number;
};

type Item = {
  i_item_sk: number;
  i_brand_id: number;
  i_brand: string;
  i_manufact_id: number;
  i_manufact: string;
  i_manager_id: number;
};

type Customer = {
  c_customer_sk: number;
  c_current_addr_sk: number;
};

type CustomerAddress = {
  ca_address_sk: number;
  ca_zip: string;
};

type Store = {
  s_store_sk: number;
  s_zip: string;
};

let customer: { [key: string]: number }[];
let customer_address: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let item: Record<string, any>[];
let result: Record<string, any>[];
let store: Record<string, any>[];
let store_sales: Record<string, any>[];

function test_TPCDS_Q19_brand(): void {
  if (
    !(_equal(result, [
      {
        "i_brand": "B1",
        "i_brand_id": 1,
        "i_manufact_id": 1,
        "i_manufact": "M1",
        "ext_price": 100,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "ss_sold_date_sk": 1,
      "ss_item_sk": 1,
      "ss_customer_sk": 1,
      "ss_store_sk": 1,
      "ss_ext_sales_price": 100,
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 1999,
      "d_moy": 11,
    },
  ];
  item = [
    {
      "i_item_sk": 1,
      "i_brand_id": 1,
      "i_brand": "B1",
      "i_manufact_id": 1,
      "i_manufact": "M1",
      "i_manager_id": 10,
    },
  ];
  customer = [
    {
      "c_customer_sk": 1,
      "c_current_addr_sk": 1,
    },
  ];
  customer_address = [
    {
      "ca_address_sk": 1,
      "ca_zip": "11111",
    },
  ];
  store = [
    {
      "s_store_sk": 1,
      "s_zip": "99999",
    },
  ];
  result = (() => {
    const _src = date_dim;
    const _map = new Map<string, any>();
    var _items = [];
    for (const d of _src) {
      for (const ss of store_sales) {
        if (!(ss.ss_sold_date_sk == d.d_date_sk)) continue;
        for (const i of item) {
          if (!((ss.ss_item_sk == i.i_item_sk) && (i.i_manager_id == 10))) {
            continue;
          }
          for (const c of customer) {
            if (!(ss.ss_customer_sk == c.c_customer_sk)) continue;
            for (const ca of customer_address) {
              if (!(c.c_current_addr_sk == ca.ca_address_sk)) continue;
              for (const s of store) {
                if (
                  !((ss.ss_store_sk == s.s_store_sk) &&
                    (ca.ca_zip.substring(0, (0) + (5)) !=
                      s.s_zip.substring(0, (0) + (5))))
                ) continue;
                if (!((d.d_moy == 11) && (d.d_year == 1999))) continue;
                const _key = {
                  "brand": i.i_brand,
                  "brand_id": i.i_brand_id,
                  "man_id": i.i_manufact_id,
                  "man": i.i_manufact,
                };
                const _ks = JSON.stringify(_key);
                let _g = _map.get(_ks);
                if (!_g) {
                  _g = { key: _key, items: [] };
                  _map.set(_ks, _g);
                }
                _g.items.push({
                  ...d,
                  ...ss,
                  ...i,
                  ...c,
                  ...ca,
                  ...s,
                  d: d,
                  ss: ss,
                  i: i,
                  c: c,
                  ca: ca,
                  s: s,
                });
              }
            }
          }
        }
      }
    }
    let _groups = Array.from(_map.values());
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return { item: it, key: [g.key.brand] };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "i_brand": g.key.brand,
        "i_brand_id": g.key.brand_id,
        "i_manufact_id": g.key.man_id,
        "i_manufact": g.key.man,
        "ext_price": _sum(g.items.map((x) => x.ss_ext_sales_price)),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q19_brand();
}
function _cmp(a: any, b: any): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    return a < b
      ? -1
      : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
