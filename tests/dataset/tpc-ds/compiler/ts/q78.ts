// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:46:16Z
// Source: tests/dataset/tpc-ds/q78.mochi

let cs: Record<string, any>[];
let result: Record<string, any>[];
let ss: Record<string, any>[];
let ws: Record<string, any>[];

function test_TPCDS_Q78_simplified(): void {
  if (
    !(_equal(result, [
      {
        "ss_sold_year": 1998,
        "ss_item_sk": 1,
        "ss_customer_sk": 1,
        "ratio": 1.25,
        "store_qty": 10,
        "store_wholesale_cost": 50,
        "store_sales_price": 100,
        "other_chan_qty": 8,
        "other_chan_wholesale_cost": 40,
        "other_chan_sales_price": 80,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  ss = [
    {
      "ss_sold_year": 1998,
      "ss_item_sk": 1,
      "ss_customer_sk": 1,
      "ss_qty": 10,
      "ss_wc": 50,
      "ss_sp": 100,
    },
  ];
  ws = [
    {
      "ws_sold_year": 1998,
      "ws_item_sk": 1,
      "ws_customer_sk": 1,
      "ws_qty": 5,
      "ws_wc": 25,
      "ws_sp": 50,
    },
  ];
  cs = [
    {
      "cs_sold_year": 1998,
      "cs_item_sk": 1,
      "cs_customer_sk": 1,
      "cs_qty": 3,
      "cs_wc": 15,
      "cs_sp": 30,
    },
  ];
  result = (() => {
    const _src = ss;
    return _query(_src, [
      {
        items: ws,
        on: (
          s,
          w,
        ) => (((w.ws_sold_year == s.ss_sold_year) &&
          (w.ws_item_sk == s.ss_item_sk)) &&
          (w.ws_customer_sk == s.ss_customer_sk)),
        left: true,
      },
      {
        items: cs,
        on: (
          s,
          w,
          c,
        ) => (((c.cs_sold_year == s.ss_sold_year) &&
          (c.cs_item_sk == s.ss_item_sk)) &&
          (c.cs_customer_sk == s.ss_customer_sk)),
        left: true,
      },
    ], {
      select: (s, w, c) => ({
        "ss_sold_year": s.ss_sold_year,
        "ss_item_sk": s.ss_item_sk,
        "ss_customer_sk": s.ss_customer_sk,
        "ratio":
          (s.ss_qty /
            ((_equal(w, null) ? 0 : w.ws_qty) +
              (_equal(c, null) ? 0 : c.cs_qty))),
        "store_qty": s.ss_qty,
        "store_wholesale_cost": s.ss_wc,
        "store_sales_price": s.ss_sp,
        "other_chan_qty":
          ((_equal(w, null) ? 0 : w.ws_qty) + (_equal(c, null) ? 0 : c.cs_qty)),
        "other_chan_wholesale_cost":
          ((_equal(w, null) ? 0 : w.ws_wc) + (_equal(c, null) ? 0 : c.cs_wc)),
        "other_chan_sales_price":
          ((_equal(w, null) ? 0 : w.ws_sp) + (_equal(c, null) ? 0 : c.cs_sp)),
      }),
      where: (
        s,
        w,
        c,
      ) => ((((_equal(w, null) ? 0 : w.ws_qty) > 0) ||
        ((_equal(c, null) ? 0 : c.cs_qty) > 0)) && (s.ss_sold_year == 1998)),
    });
  })();
  console.log(_json(result));
  test_TPCDS_Q78_simplified();
}
function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

function _query(src: any[], joins: any[], opts: any): any {
  let items = src.map((v) => [v]);
  for (const j of joins) {
    const joined: any[] = [];
    if (j.right && j.left) {
      const matched: boolean[] = new Array(j.items.length).fill(false);
      for (const left of items) {
        let m = false;
        for (let ri = 0; ri < j.items.length; ri++) {
          const right = j.items[ri];
          let keep = true;
          if (right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          matched[ri] = true;
          joined.push([...left, right]);
        }
        if (!m) joined.push([...left, null]);
      }
      for (let ri = 0; ri < j.items.length; ri++) {
        if (!matched[ri]) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, j.items[ri]]);
        }
      }
    } else if (j.right) {
      for (const right of j.items) {
        let m = false;
        for (const left of items) {
          let keep = true;
          if (right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (!m) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, right]);
        }
      }
    } else {
      for (const left of items) {
        let m = false;
        for (const right of j.items) {
          let keep = true;
          if (right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (j.left && !m) joined.push([...left, null]);
      }
    }
    items = joined;
  }
  if (opts.where) items = items.filter((r) => opts.where(...r));
  if (opts.sortKey) {
    let pairs = items.map((it) => ({ item: it, key: opts.sortKey(...it) }));
    pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    items = pairs.map((p) => p.item);
  }
  if (opts.skip !== undefined) {
    const n = opts.skip;
    items = n < items.length ? items.slice(n) : [];
  }
  if (opts.take !== undefined) {
    const n = opts.take;
    if (n < items.length) items = items.slice(0, n);
  }
  const res = [];
  for (const r of items) res.push(opts.select(...r));
  return res;
}

main();
