// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:37:20Z
// Source: tests/dataset/tpc-ds/q97.mochi

type StoreSale = {
  ss_customer_sk: number;
  ss_item_sk: number;
};

type CatalogSale = {
  cs_bill_customer_sk: number;
  cs_item_sk: number;
};

let both: number;
let catalog_only: number;
let catalog_sales: { [key: string]: number }[];
let csci: { [key: string]: number }[];
let result: { [key: string]: number };
let ssci: { [key: string]: number }[];
let store_only: number;
let store_sales: { [key: string]: number }[];

function test_TPCDS_Q97_overlap(): void {
  if (
    !(((result.store_only == 1) && (result.catalog_only == 1)) &&
      (result.store_and_catalog == 1))
  ) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "ss_customer_sk": 1,
      "ss_item_sk": 1,
    },
    {
      "ss_customer_sk": 2,
      "ss_item_sk": 1,
    },
  ];
  catalog_sales = [
    {
      "cs_bill_customer_sk": 1,
      "cs_item_sk": 1,
    },
    {
      "cs_bill_customer_sk": 3,
      "cs_item_sk": 2,
    },
  ];
  ssci = (() => {
    const _src = store_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const ss of _src) {
      const _key = {
        "customer_sk": ss.ss_customer_sk,
        "item_sk": ss.ss_item_sk,
      };
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...ss, ss: ss });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "customer_sk": g.key.customer_sk,
        "item_sk": g.key.item_sk,
      });
    }
    return _res;
  })();
  csci = (() => {
    const _src = catalog_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const cs of _src) {
      const _key = {
        "customer_sk": cs.cs_bill_customer_sk,
        "item_sk": cs.cs_item_sk,
      };
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...cs, cs: cs });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "customer_sk": g.key.customer_sk,
        "item_sk": g.key.item_sk,
      });
    }
    return _res;
  })();
  both = _count((() => {
    const _src = ssci;
    const _res = [];
    for (const s of _src) {
      for (const c of csci) {
        if (!((s.customer_sk == c.customer_sk) && (s.item_sk == c.item_sk))) {
          continue;
        }
        _res.push(1);
      }
    }
    return _res;
  })());
  store_only = _count(
    ssci.filter(
      (s) => (!(_exists(
        csci.filter(
          (c) => ((s.customer_sk == c.customer_sk) && (s.item_sk == c.item_sk))
        ).map((c) => c),
      )))
    ).map((s) => 1),
  );
  catalog_only = _count(
    csci.filter(
      (c) => (!(_exists(
        ssci.filter(
          (s) => ((s.customer_sk == c.customer_sk) && (s.item_sk == c.item_sk))
        ).map((s) => s),
      )))
    ).map((c) => 1),
  );
  result = {
    "store_only": store_only,
    "catalog_only": catalog_only,
    "store_and_catalog": both,
  };
  console.log(_json(result));
  test_TPCDS_Q97_overlap();
}
function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _exists(v: any): boolean {
  if (Array.isArray(v)) return v.length > 0;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length > 0;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length > 0;
    return Object.keys(v).length > 0;
  }
  if (typeof v === "string") return v.length > 0;
  return false;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

main();
