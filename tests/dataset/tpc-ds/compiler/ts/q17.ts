// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:46:12Z
// Source: tests/dataset/tpc-ds/q17.mochi

type StoreSale = {
  ss_sold_date_sk: number;
  ss_item_sk: number;
  ss_customer_sk: number;
  ss_ticket_number: number;
  ss_quantity: number;
  ss_store_sk: number;
};

type StoreReturn = {
  sr_returned_date_sk: number;
  sr_customer_sk: number;
  sr_item_sk: number;
  sr_ticket_number: number;
  sr_return_quantity: number;
};

type CatalogSale = {
  cs_sold_date_sk: number;
  cs_item_sk: number;
  cs_bill_customer_sk: number;
  cs_quantity: number;
};

type DateDim = {
  d_date_sk: number;
  d_quarter_name: string;
};

type Store = {
  s_store_sk: number;
  s_state: string;
};

type Item = {
  i_item_sk: number;
  i_item_id: string;
  i_item_desc: string;
};

let catalog_sales: { [key: string]: number }[];
let date_dim: Record<string, any>[];
let item: Record<string, any>[];
let joined: { [key: string]: number }[];
let result: Record<string, any>[];
let store: Record<string, any>[];
let store_returns: { [key: string]: number }[];
let store_sales: { [key: string]: number }[];

function test_TPCDS_Q17_stats(): void {
  if (
    !(_equal(result, [
      {
        "i_item_id": "I1",
        "i_item_desc": "Item 1",
        "s_state": "CA",
        "store_sales_quantitycount": 1,
        "store_sales_quantityave": 10,
        "store_sales_quantitystdev": 0,
        "store_sales_quantitycov": 0,
        "store_returns_quantitycount": 1,
        "store_returns_quantityave": 2,
        "store_returns_quantitystdev": 0,
        "store_returns_quantitycov": 0,
        "catalog_sales_quantitycount": 1,
        "catalog_sales_quantityave": 5,
        "catalog_sales_quantitystdev": 0,
        "catalog_sales_quantitycov": 0,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "ss_sold_date_sk": 1,
      "ss_item_sk": 1,
      "ss_customer_sk": 1,
      "ss_ticket_number": 1,
      "ss_quantity": 10,
      "ss_store_sk": 1,
    },
  ];
  store_returns = [
    {
      "sr_returned_date_sk": 2,
      "sr_customer_sk": 1,
      "sr_item_sk": 1,
      "sr_ticket_number": 1,
      "sr_return_quantity": 2,
    },
  ];
  catalog_sales = [
    {
      "cs_sold_date_sk": 3,
      "cs_item_sk": 1,
      "cs_bill_customer_sk": 1,
      "cs_quantity": 5,
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_quarter_name": "1998Q1",
    },
    {
      "d_date_sk": 2,
      "d_quarter_name": "1998Q2",
    },
    {
      "d_date_sk": 3,
      "d_quarter_name": "1998Q3",
    },
  ];
  store = [
    {
      "s_store_sk": 1,
      "s_state": "CA",
    },
  ];
  item = [
    {
      "i_item_sk": 1,
      "i_item_id": "I1",
      "i_item_desc": "Item 1",
    },
  ];
  joined = (() => {
    const _src = store_sales;
    const _res = [];
    for (const ss of _src) {
      for (const sr of store_returns) {
        if (
          !(((ss.ss_customer_sk == sr.sr_customer_sk) &&
            (ss.ss_item_sk == sr.sr_item_sk)) &&
            (ss.ss_ticket_number == sr.sr_ticket_number))
        ) continue;
        for (const cs of catalog_sales) {
          if (
            !((sr.sr_customer_sk == cs.cs_bill_customer_sk) &&
              (sr.sr_item_sk == cs.cs_item_sk))
          ) continue;
          for (const d1 of date_dim) {
            if (
              !((ss.ss_sold_date_sk == d1.d_date_sk) &&
                (d1.d_quarter_name == "1998Q1"))
            ) continue;
            for (const d2 of date_dim) {
              if (
                !((sr.sr_returned_date_sk == d2.d_date_sk) &&
                  (["1998Q1", "1998Q2", "1998Q3"].includes(d2.d_quarter_name)
                    ? 1
                    : 0))
              ) continue;
              for (const d3 of date_dim) {
                if (
                  !((cs.cs_sold_date_sk == d3.d_date_sk) &&
                    (["1998Q1", "1998Q2", "1998Q3"].includes(d3.d_quarter_name)
                      ? 1
                      : 0))
                ) continue;
                for (const s of store) {
                  if (!(ss.ss_store_sk == s.s_store_sk)) continue;
                  for (const i of item) {
                    if (!(ss.ss_item_sk == i.i_item_sk)) continue;
                    _res.push({
                      "qty": ss.ss_quantity,
                      "ret": sr.sr_return_quantity,
                      "csq": cs.cs_quantity,
                      "i_item_id": i.i_item_id,
                      "i_item_desc": i.i_item_desc,
                      "s_state": s.s_state,
                    });
                  }
                }
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  result = (() => {
    const _src = joined;
    const _map = new Map<string, any>();
    var _items = [];
    for (const j of _src) {
      const _key = {
        "i_item_id": j.i_item_id,
        "i_item_desc": j.i_item_desc,
        "s_state": j.s_state,
      };
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...j, j: j });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "i_item_id": g.key.i_item_id,
        "i_item_desc": g.key.i_item_desc,
        "s_state": g.key.s_state,
        "store_sales_quantitycount": g.items.map((_) => _).length,
        "store_sales_quantityave": (g.items.map((x) =>
          x.qty
        ).reduce((a, b) => a + b, 0) / g.items.map((x) => x.qty).length),
        "store_sales_quantitystdev": 0,
        "store_sales_quantitycov": 0,
        "store_returns_quantitycount": g.items.map((_) => _).length,
        "store_returns_quantityave": (g.items.map((x) =>
          x.ret
        ).reduce((a, b) => a + b, 0) / g.items.map((x) => x.ret).length),
        "store_returns_quantitystdev": 0,
        "store_returns_quantitycov": 0,
        "catalog_sales_quantitycount": g.items.map((_) => _).length,
        "catalog_sales_quantityave": (g.items.map((x) =>
          x.csq
        ).reduce((a, b) => a + b, 0) / g.items.map((x) => x.csq).length),
        "catalog_sales_quantitystdev": 0,
        "catalog_sales_quantitycov": 0,
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q17_stats();
}
function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
