// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:46:14Z
// Source: tests/dataset/tpc-ds/q45.mochi

let base: Record<string, any>[];
let customer: { [key: string]: number }[];
let customer_address: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let item: Record<string, any>[];
let item_ids: string[];
let qoy: number;
let records: Record<string, any>[];
let web_sales: Record<string, any>[];
let year: number;
let zip_list: string[];

function test_TPCDS_Q45_simplified(): void {
  if (
    !(_equal(records, [
      {
        "ca_zip": "85669",
        "sum_ws_sales_price": 50,
      },
      {
        "ca_zip": "99999",
        "sum_ws_sales_price": 30,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  web_sales = [
    {
      "bill_customer_sk": 1,
      "item_sk": 1,
      "sold_date_sk": 1,
      "sales_price": 50,
    },
    {
      "bill_customer_sk": 2,
      "item_sk": 2,
      "sold_date_sk": 1,
      "sales_price": 30,
    },
  ];
  customer = [
    {
      "c_customer_sk": 1,
      "c_current_addr_sk": 1,
    },
    {
      "c_customer_sk": 2,
      "c_current_addr_sk": 2,
    },
  ];
  customer_address = [
    {
      "ca_address_sk": 1,
      "ca_zip": "85669",
    },
    {
      "ca_address_sk": 2,
      "ca_zip": "99999",
    },
  ];
  item = [
    {
      "i_item_sk": 1,
      "i_item_id": "I1",
    },
    {
      "i_item_sk": 2,
      "i_item_id": "I2",
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_qoy": 1,
      "d_year": 2020,
    },
  ];
  zip_list = [
    "85669",
    "86197",
    "88274",
    "83405",
    "86475",
    "85392",
    "85460",
    "80348",
    "81792",
  ];
  item_ids = ["I2"];
  qoy = 1;
  year = 2020;
  base = (() => {
    const _src = web_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const ws of _src) {
      for (const c of customer) {
        if (!(ws.bill_customer_sk == c.c_customer_sk)) continue;
        for (const ca of customer_address) {
          if (!(c.c_current_addr_sk == ca.ca_address_sk)) continue;
          for (const i of item) {
            if (!(ws.item_sk == i.i_item_sk)) continue;
            for (const d of date_dim) {
              if (!(ws.sold_date_sk == d.d_date_sk)) continue;
              if (
                !((((zip_list.includes(ca.ca_zip.substring(0, (0) + (5)))
                  ? 1
                  : 0) || (item_ids.includes(i.i_item_id) ? 1 : 0)) &&
                  (d.d_qoy == qoy)) && (d.d_year == year))
              ) continue;
              const _key = ca.ca_zip;
              const _ks = JSON.stringify(_key);
              let _g = _map.get(_ks);
              if (!_g) {
                _g = { key: _key, items: [] };
                _map.set(_ks, _g);
              }
              _g.items.push({
                ...ws,
                ...c,
                ...ca,
                ...i,
                ...d,
                ws: ws,
                c: c,
                ca: ca,
                i: i,
                d: d,
              });
            }
          }
        }
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "ca_zip": g.key,
        "sum_ws_sales_price": g.items.map((x) => x.ws.sales_price).reduce(
          (a, b) => a + Number(b),
          0,
        ),
      });
    }
    return _res;
  })();
  records = base;
  console.log(_json(records));
  test_TPCDS_Q45_simplified();
}
function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
