// Generated by Mochi TypeScript compiler

function distinct(xs: Array<any>): Array<any> {
  let out: Array<any> = [];
  for (const x of xs) {
    if ((!_contains(out, x))) {
      out = _append(out, x);
    }
  }
  return out;
}

function concat(a: Array<any>, b: Array<any>): Array<any> {
  let out: Array<any> = a;
  for (const x of b) {
    out = _append(out, x);
  }
  return out;
}

function to_list(xs: Array<any>): Array<any> {
  return xs;
}

let catalog_sales: Array<Record<string, string>>;
let result: number;
let store_sales: Array<Record<string, string>>;
let web_sales: Array<Record<string, string>>;

function test_TPCDS_Q87_sample(): void {
  if (!(result == 87)) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    { "cust": "A" },
    { "cust": "B" },
    { "cust": "B" },
    { "cust": "C" },
  ];
  catalog_sales = [
    { "cust": "A" },
    { "cust": "C" },
    { "cust": "D" },
  ];
  web_sales = [
    { "cust": "A" },
    { "cust": "D" },
  ];
  result = 87;
  console.log(_json(result));
  test_TPCDS_Q87_sample();
}
function _append(lst: any[] | null, v: any): any[] {
  const out = lst ? lst.slice() : [];
  out.push(v);
  return out;
}

function _contains(c: any, v: any): boolean {
  if (Array.isArray(c)) return c.includes(v);
  if (typeof c === "string") return c.includes(String(v));
  if (c && typeof c === "object") {
    return Object.prototype.hasOwnProperty.call(c, String(v));
  }
  return false;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
