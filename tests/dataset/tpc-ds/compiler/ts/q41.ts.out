// Generated by Mochi TypeScript compiler

let item: Array<Record<string, any>>;
let lower: number;
let result: Array<any>;

function test_TPCDS_Q41_simplified(): void {
  if (
    !(_equal(result, [
      "Blue Shirt",
      "Red Dress",
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  item = [
    {
      "product_name": "Blue Shirt",
      "manufact_id": 100,
      "manufact": 1,
      "category": "Women",
      "color": "blue",
      "units": "pack",
      "size": "M",
    },
    {
      "product_name": "Red Dress",
      "manufact_id": 120,
      "manufact": 1,
      "category": "Women",
      "color": "red",
      "units": "pack",
      "size": "M",
    },
    {
      "product_name": "Pants",
      "manufact_id": 200,
      "manufact": 2,
      "category": "Men",
      "color": "black",
      "units": "pair",
      "size": "L",
    },
  ];
  lower = 100;
  result = (() => {
    const _src = item;
    var _items = [];
    for (const i1 of _src) {
      if (
        !(((i1.manufact_id >= lower) && (i1.manufact_id <= (lower + 40))) &&
          (_count(
            item.filter(
              (i2) => (_equal(i2.manufact, i1.manufact) &&
                _equal(i2.category, i1.category))
            ).map((i2) => i2),
          ) > 1))
      ) continue;
      _items.push(i1);
    }
    let _pairs = _items.map((it) => {
      const i1 = it;
      return { item: it, key: i1.product_name };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const i1 of _items) {
      _res.push(i1.product_name);
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q41_simplified();
}
function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
