// Generated by Mochi TypeScript compiler

let avg: any;
let cs_items: Record<string, any>;
let result: Record<string, any>[];
let ss_items: Record<string, any>;
let ws_items: Record<string, any>;

function test_TPCDS_Q58_simplified(): void {
  if (
    !(_equal(result, [
      {
        "item_id": 1,
        "average": 58,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  ss_items = {
    "item_id": 1,
    "ss_item_rev": 50,
  };
  cs_items = {
    "item_id": 1,
    "cs_item_rev": 60,
  };
  ws_items = {
    "item_id": 1,
    "ws_item_rev": 64,
  };
  avg = ((ss_items.ss_item_rev + cs_items.cs_item_rev) + ws_items.ws_item_rev) /
    3;
  result = [
    {
      "item_id": ss_items.item_id,
      "average": avg,
    },
  ];
  console.log(_json(result));
  test_TPCDS_Q58_simplified();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
