// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:53:49Z
// Source: tests/dataset/tpc-ds/q74.mochi

let customer: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let result: Record<string, any>[];
let s_firstyear: any;
let s_secyear: any;
let store_sales: Record<string, any>[];
let w_firstyear: any;
let w_secyear: any;
let web_sales: Record<string, any>[];
let year_total: any[];

function test_TPCDS_Q74_simplified(): void {
  if (
    !(_equal(result, [
      {
        "customer_id": 1,
        "customer_first_name": "Alice",
        "customer_last_name": "Smith",
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  customer = [
    {
      "c_customer_sk": 1,
      "c_customer_id": 1,
      "c_first_name": "Alice",
      "c_last_name": "Smith",
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 1998,
    },
    {
      "d_date_sk": 2,
      "d_year": 1999,
    },
  ];
  store_sales = [
    {
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_net_paid": 100,
    },
    {
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 2,
      "ss_net_paid": 110,
    },
  ];
  web_sales = [
    {
      "ws_bill_customer_sk": 1,
      "ws_sold_date_sk": 1,
      "ws_net_paid": 40,
    },
    {
      "ws_bill_customer_sk": 1,
      "ws_sold_date_sk": 2,
      "ws_net_paid": 80,
    },
  ];
  year_total = [].concat(
    (() => {
      const _src = customer;
      const _map = new Map<string, any>();
      var _items = [];
      for (const c of _src) {
        for (const ss of store_sales) {
          if (!(c.c_customer_sk == ss.ss_customer_sk)) continue;
          for (const d of date_dim) {
            if (!(d.d_date_sk == ss.ss_sold_date_sk)) continue;
            if (!((d.d_year == 1998) || (d.d_year == 1999))) continue;
            const _key = {
              "id": c.c_customer_id,
              "first": c.c_first_name,
              "last": c.c_last_name,
              "year": d.d_year,
            };
            const _ks = JSON.stringify(_key);
            let _g = _map.get(_ks);
            if (!_g) {
              _g = { key: _key, items: [] };
              _map.set(_ks, _g);
            }
            _g.items.push({ ...c, ...ss, ...d, c: c, ss: ss, d: d });
          }
        }
      }
      let _groups = Array.from(_map.values());
      const _res = [];
      for (const g of _groups) {
        _res.push({
          "customer_id": g.key.id,
          "customer_first_name": g.key.first,
          "customer_last_name": g.key.last,
          "year": g.key.year,
          "year_total": _sum(g.items.map((x) => x.ss.ss_net_paid)),
          "sale_type": "s",
        });
      }
      return _res;
    })(),
    (() => {
      const _src = customer;
      const _map = new Map<string, any>();
      var _items = [];
      for (const c of _src) {
        for (const ws of web_sales) {
          if (!(c.c_customer_sk == ws.ws_bill_customer_sk)) continue;
          for (const d of date_dim) {
            if (!(d.d_date_sk == ws.ws_sold_date_sk)) continue;
            if (!((d.d_year == 1998) || (d.d_year == 1999))) continue;
            const _key = {
              "id": c.c_customer_id,
              "first": c.c_first_name,
              "last": c.c_last_name,
              "year": d.d_year,
            };
            const _ks = JSON.stringify(_key);
            let _g = _map.get(_ks);
            if (!_g) {
              _g = { key: _key, items: [] };
              _map.set(_ks, _g);
            }
            _g.items.push({ ...c, ...ws, ...d, c: c, ws: ws, d: d });
          }
        }
      }
      let _groups = Array.from(_map.values());
      const _res = [];
      for (const g of _groups) {
        _res.push({
          "customer_id": g.key.id,
          "customer_first_name": g.key.first,
          "customer_last_name": g.key.last,
          "year": g.key.year,
          "year_total": _sum(g.items.map((x) => x.ws.ws_net_paid)),
          "sale_type": "w",
        });
      }
      return _res;
    })(),
  );
  s_firstyear =
    (year_total.filter((y) => ((y.sale_type == "s") && (y.year == 1998))).map(
      (y) => y
    ))[0];
  s_secyear =
    (year_total.filter((y) => ((y.sale_type == "s") && (y.year == 1999))).map(
      (y) => y
    ))[0];
  w_firstyear =
    (year_total.filter((y) => ((y.sale_type == "w") && (y.year == 1998))).map(
      (y) => y
    ))[0];
  w_secyear =
    (year_total.filter((y) => ((y.sale_type == "w") && (y.year == 1999))).map(
      (y) => y
    ))[0];
  result =
    (((s_firstyear.year_total > 0) && (w_firstyear.year_total > 0)) &&
        ((w_secyear.year_total / w_firstyear.year_total) >
          (s_secyear.year_total / s_firstyear.year_total)))
      ? [
        {
          "customer_id": s_secyear.customer_id,
          "customer_first_name": s_secyear.customer_first_name,
          "customer_last_name": s_secyear.customer_last_name,
        },
      ]
      : [];
  console.log(_json(result));
  test_TPCDS_Q74_simplified();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
