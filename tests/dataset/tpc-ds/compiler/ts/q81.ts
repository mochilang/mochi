// Generated by Mochi TypeScript compiler

let avg_list: Record<string, any>[];
let avg_state: Record<string, any>;
let catalog_returns: Record<string, any>[];
let result: any;
let result_list: any[];

function test_TPCDS_Q81_sample(): void {
  if (!(_equal(result, 81))) throw new Error("expect failed");
}

function main(): void {
  catalog_returns = [
    {
      "cust": 1,
      "state": "CA",
      "amt": 40,
    },
    {
      "cust": 2,
      "state": "CA",
      "amt": 50,
    },
    {
      "cust": 3,
      "state": "CA",
      "amt": 81,
    },
    {
      "cust": 4,
      "state": "TX",
      "amt": 30,
    },
    {
      "cust": 5,
      "state": "TX",
      "amt": 20,
    },
  ];
  avg_list = (() => {
    const _src = catalog_returns;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const r of _src) {
      const _key = r.state;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push({ ...r, r: r });
    }
    let _groups = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "state": g.key,
        "avg_amt": _avg(g.items.map((x) => x.amt)),
      });
    }
    return _res;
  })();
  avg_state =
    (avg_list.filter((a) => (_equal(a.state, "CA"))).map((a) => a))[0];
  result_list = catalog_returns.filter(
    (r) => (_equal(r.state, "CA") && (r.amt > (avg_state.avg_amt * 1.2)))
  ).map((r) => r.amt);
  result = result_list[0];
  console.log(_json(result));
  test_TPCDS_Q81_sample();
}
function _avg(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum / list.length;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
