// Generated by Mochi TypeScript compiler

const math = { sqrt: Math.sqrt };

let date_dim: Array<Record<string, number>>;
let grouped: Record<string, Record<string, any>>;
let inventory: Array<Record<string, number>>;
let item: Array<Record<string, number>>;
let monthly: Array<Record<string, any>>;
let summary: Array<any>;
let warehouse: Array<Record<string, any>>;

function test_TPCDS_Q39_simplified(): void {
  if (
    !(_equal(summary, [
      {
        "w_warehouse_sk": 1,
        "i_item_sk": 1,
        "cov": 1.539600717839002,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  inventory = [
    {
      "inv_item_sk": 1,
      "inv_warehouse_sk": 1,
      "inv_date_sk": 1,
      "inv_quantity_on_hand": 10,
    },
    {
      "inv_item_sk": 1,
      "inv_warehouse_sk": 1,
      "inv_date_sk": 2,
      "inv_quantity_on_hand": 10,
    },
    {
      "inv_item_sk": 1,
      "inv_warehouse_sk": 1,
      "inv_date_sk": 3,
      "inv_quantity_on_hand": 250,
    },
  ];
  item = [{ "i_item_sk": 1 }];
  warehouse = [
    {
      "w_warehouse_sk": 1,
      "w_warehouse_name": "W1",
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 2000,
      "d_moy": 1,
    },
    {
      "d_date_sk": 2,
      "d_year": 2000,
      "d_moy": 2,
    },
    {
      "d_date_sk": 3,
      "d_year": 2000,
      "d_moy": 3,
    },
  ];
  monthly = (() => {
    const _src = inventory;
    let _items = _query(_src, [
      { items: date_dim, on: (inv, d) => (inv.inv_date_sk == d.d_date_sk) },
      { items: item, on: (inv, d, i) => (inv.inv_item_sk == i.i_item_sk) },
      {
        items: warehouse,
        on: (inv, d, i, w) => (_equal(inv.inv_warehouse_sk, w.w_warehouse_sk)),
      },
    ], {
      select: (inv, d, i, w) => [inv, d, i, w],
      where: (inv, d, i, w) => (d.d_year == 2000),
    });
    const _map = new Map<string, any>();
    const _order: string[] = [];
    for (const _r of _items) {
      const [inv, d, i, w] = _r;
      const _key = {
        "w": w.w_warehouse_sk,
        "i": i.i_item_sk,
        "month": d.d_moy,
      };
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push({ ...inv, ...d, ...i, ...w, inv: inv, d: d, i: i, w: w });
    }
    let _itemsG = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _itemsG) {
      _res.push({
        "w": g.key.w,
        "i": g.key.i,
        "qty": _sum(g.items.map((x) => x.inv_quantity_on_hand)),
      });
    }
    return _res;
  })();
  grouped = {} as Record<string, Record<string, any>>;
  for (const m of monthly) {
    let key: string = String({
      "w": m.w,
      "i": m.i,
    });
    if (Object.prototype.hasOwnProperty.call(grouped, String(key))) {
      let g: Record<string, any> = grouped[key];
      grouped[key] = {
        "w": g.w,
        "i": g.i,
        "qtys": _append(g.qtys, m.qty),
      };
    } else {
      grouped[key] = {
        "w": m.w,
        "i": m.i,
        "qtys": [m.qty],
      };
    }
  }
  summary = [];
  for (const g of _values(grouped)) {
    let mean: number = _avg(g.qtys);
    let sumsq: number = 0;
    for (const q of _iter(g.qtys)) {
      sumsq = sumsq + ((q - mean) * (q - mean));
    }
    let variance: any = Math.trunc(
      sumsq / ((Array.isArray(g.qtys) || typeof g.qtys === "string"
        ? (g.qtys as any).length
        : (g.qtys && typeof g.qtys === "object"
          ? Object.keys(g.qtys).length
          : 0)) - 1),
    );
    let cov: number = math.sqrt(variance) / mean;
    if ((cov > 1.5)) {
      summary = _append(summary, {
        "w_warehouse_sk": g.w,
        "i_item_sk": g.i,
        "cov": cov,
      });
    }
  }
  console.log(_json(summary));
  test_TPCDS_Q39_simplified();
}
function _append(lst: any[] | null, v: any): any[] {
  const out = lst ? lst.slice() : [];
  out.push(v);
  return out;
}

function _avg(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum / list.length;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _iter(v: any): any {
  if (
    v && typeof v === "object" && !Array.isArray(v) && !(Symbol.iterator in v)
  ) {
    return Object.keys(v);
  }
  return v;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

function _query(src: any[], joins: any[], opts: any): any {
  let items = src.map((v) => [v]);
  for (const j of joins) {
    const joined: any[] = [];
    if (j.right && j.left) {
      const matched: boolean[] = new Array(j.items.length).fill(false);
      for (const left of items) {
        let m = false;
        for (let ri = 0; ri < j.items.length; ri++) {
          const right = j.items[ri];
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          matched[ri] = true;
          joined.push([...left, right]);
        }
        if (!m) joined.push([...left, null]);
      }
      for (let ri = 0; ri < j.items.length; ri++) {
        if (!matched[ri]) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, j.items[ri]]);
        }
      }
    } else if (j.right) {
      for (const right of j.items) {
        let m = false;
        for (const left of items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (!m) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, right]);
        }
      }
    } else {
      for (const left of items) {
        let m = false;
        for (const right of j.items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (j.left && !m) joined.push([...left, null]);
      }
    }
    items = joined;
  }
  if (opts.where) items = items.filter((r) => opts.where(...r));
  if (opts.sortKey) {
    let pairs = items.map((it) => ({ item: it, key: opts.sortKey(...it) }));
    pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    items = pairs.map((p) => p.item);
  }
  if (opts.skip !== undefined) {
    const n = opts.skip;
    items = n < items.length ? items.slice(n) : [];
  }
  if (opts.take !== undefined) {
    const n = opts.take;
    if (n < items.length) items = items.slice(0, n);
  }
  const res = [];
  for (const r of items) res.push(opts.select(...r));
  return res;
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

function _values(m: any): any[] {
  if (m && typeof m === "object" && !Array.isArray(m)) {
    return Object.values(m);
  }
  throw new Error("values() expects map");
}

main();
