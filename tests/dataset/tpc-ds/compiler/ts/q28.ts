// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:53:46Z
// Source: tests/dataset/tpc-ds/q28.mochi

type StoreSale = {
  ss_quantity: number;
  ss_list_price: number;
  ss_coupon_amt: number;
  ss_wholesale_cost: number;
};

let bucket1: Record<string, any>[];
let bucket2: Record<string, any>[];
let result: Record<string, any>;
let store_sales: Record<string, any>[];

function test_TPCDS_Q28_buckets(): void {
  if (
    !(_equal(result, {
      "B1_LP": 100,
      "B1_CNT": 1,
      "B1_CNTD": 1,
      "B2_LP": 80,
      "B2_CNT": 1,
      "B2_CNTD": 1,
    }))
  ) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "ss_quantity": 3,
      "ss_list_price": 100,
      "ss_coupon_amt": 50,
      "ss_wholesale_cost": 30,
    },
    {
      "ss_quantity": 8,
      "ss_list_price": 80,
      "ss_coupon_amt": 10,
      "ss_wholesale_cost": 20,
    },
    {
      "ss_quantity": 12,
      "ss_list_price": 60,
      "ss_coupon_amt": 5,
      "ss_wholesale_cost": 15,
    },
  ];
  bucket1 = store_sales.filter(
    (ss) => (((ss.ss_quantity >= 0) && (ss.ss_quantity <= 5)) &&
      ((((ss.ss_list_price >= 0) && (ss.ss_list_price <= 110)) ||
        ((ss.ss_coupon_amt >= 0) && (ss.ss_coupon_amt <= 1000))) ||
        ((ss.ss_wholesale_cost >= 0) && (ss.ss_wholesale_cost <= 50))))
  ).map((ss) => ss);
  bucket2 = store_sales.filter(
    (ss) => (((ss.ss_quantity >= 6) && (ss.ss_quantity <= 10)) &&
      ((((ss.ss_list_price >= 0) && (ss.ss_list_price <= 110)) ||
        ((ss.ss_coupon_amt >= 0) && (ss.ss_coupon_amt <= 1000))) ||
        ((ss.ss_wholesale_cost >= 0) && (ss.ss_wholesale_cost <= 50))))
  ).map((ss) => ss);
  result = {
    "B1_LP": _avg(bucket1.map((x) => x.ss_list_price)),
    "B1_CNT": _count(bucket1),
    "B1_CNTD": _count((() => {
      const _src = bucket1;
      const _map = new Map<string, any>();
      var _items = [];
      for (const x of _src) {
        const _key = x.ss_list_price;
        const _ks = JSON.stringify(_key);
        let _g = _map.get(_ks);
        if (!_g) {
          _g = { key: _key, items: [] };
          _map.set(_ks, _g);
        }
        _g.items.push({ ...x, x: x });
      }
      let _groups = Array.from(_map.values());
      const _res = [];
      for (const g of _groups) {
        _res.push(g.key);
      }
      return _res;
    })()),
    "B2_LP": _avg(bucket2.map((x) => x.ss_list_price)),
    "B2_CNT": _count(bucket2),
    "B2_CNTD": _count((() => {
      const _src = bucket2;
      const _map = new Map<string, any>();
      var _items = [];
      for (const x of _src) {
        const _key = x.ss_list_price;
        const _ks = JSON.stringify(_key);
        let _g = _map.get(_ks);
        if (!_g) {
          _g = { key: _key, items: [] };
          _map.set(_ks, _g);
        }
        _g.items.push({ ...x, x: x });
      }
      let _groups = Array.from(_map.values());
      const _res = [];
      for (const g of _groups) {
        _res.push(g.key);
      }
      return _res;
    })()),
  };
  console.log(_json(result));
  test_TPCDS_Q28_buckets();
}
function _avg(v: any): number {
  const c = _count(v);
  return c ? _sum(v) / c : 0;
}

function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
