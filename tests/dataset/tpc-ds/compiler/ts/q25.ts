// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:37:14Z
// Source: tests/dataset/tpc-ds/q25.mochi

type StoreSale = {
  ss_sold_date_sk: number;
  ss_item_sk: number;
  ss_store_sk: number;
  ss_customer_sk: number;
  ss_net_profit: number;
  ss_ticket_number: number;
};

type StoreReturn = {
  sr_returned_date_sk: number;
  sr_item_sk: number;
  sr_customer_sk: number;
  sr_ticket_number: number;
  sr_net_loss: number;
};

type CatalogSale = {
  cs_sold_date_sk: number;
  cs_item_sk: number;
  cs_bill_customer_sk: number;
  cs_net_profit: number;
};

type DateDim = {
  d_date_sk: number;
  d_moy: number;
  d_year: number;
};

type Store = {
  s_store_sk: number;
  s_store_id: string;
  s_store_name: string;
};

type Item = {
  i_item_sk: number;
  i_item_id: string;
  i_item_desc: string;
};

let catalog_sales: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let item: Record<string, any>[];
let result: Record<string, any>[];
let store: Record<string, any>[];
let store_returns: Record<string, any>[];
let store_sales: Record<string, any>[];

function test_TPCDS_Q25_aggregated_profit(): void {
  if (
    !(_equal(result, [
      {
        "i_item_id": "ITEM1",
        "i_item_desc": "Desc1",
        "s_store_id": "S1",
        "s_store_name": "Store1",
        "store_sales_profit": 50,
        "store_returns_loss": 10,
        "catalog_sales_profit": 30,
      },
      {
        "i_item_id": "ITEM2",
        "i_item_desc": "Desc2",
        "s_store_id": "S1",
        "s_store_name": "Store1",
        "store_sales_profit": 20,
        "store_returns_loss": 5,
        "catalog_sales_profit": 15,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "ss_sold_date_sk": 1,
      "ss_item_sk": 1,
      "ss_store_sk": 1,
      "ss_customer_sk": 1,
      "ss_net_profit": 50,
      "ss_ticket_number": 1,
    },
    {
      "ss_sold_date_sk": 1,
      "ss_item_sk": 2,
      "ss_store_sk": 1,
      "ss_customer_sk": 2,
      "ss_net_profit": 20,
      "ss_ticket_number": 2,
    },
  ];
  store_returns = [
    {
      "sr_returned_date_sk": 2,
      "sr_item_sk": 1,
      "sr_customer_sk": 1,
      "sr_ticket_number": 1,
      "sr_net_loss": 10,
    },
    {
      "sr_returned_date_sk": 2,
      "sr_item_sk": 2,
      "sr_customer_sk": 2,
      "sr_ticket_number": 2,
      "sr_net_loss": 5,
    },
  ];
  catalog_sales = [
    {
      "cs_sold_date_sk": 3,
      "cs_item_sk": 1,
      "cs_bill_customer_sk": 1,
      "cs_net_profit": 30,
    },
    {
      "cs_sold_date_sk": 3,
      "cs_item_sk": 2,
      "cs_bill_customer_sk": 2,
      "cs_net_profit": 15,
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_moy": 4,
      "d_year": 2000,
    },
    {
      "d_date_sk": 2,
      "d_moy": 5,
      "d_year": 2000,
    },
    {
      "d_date_sk": 3,
      "d_moy": 6,
      "d_year": 2000,
    },
  ];
  store = [
    {
      "s_store_sk": 1,
      "s_store_id": "S1",
      "s_store_name": "Store1",
    },
  ];
  item = [
    {
      "i_item_sk": 1,
      "i_item_id": "ITEM1",
      "i_item_desc": "Desc1",
    },
    {
      "i_item_sk": 2,
      "i_item_id": "ITEM2",
      "i_item_desc": "Desc2",
    },
  ];
  result = (() => {
    const _src = store_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const ss of _src) {
      for (const sr of store_returns) {
        if (
          !((ss.ss_ticket_number == sr.sr_ticket_number) &&
            (ss.ss_item_sk == sr.sr_item_sk))
        ) continue;
        for (const cs of catalog_sales) {
          if (
            !((sr.sr_customer_sk == cs.cs_bill_customer_sk) &&
              (sr.sr_item_sk == cs.cs_item_sk))
          ) continue;
          for (const d1 of date_dim) {
            if (!(d1.d_date_sk == ss.ss_sold_date_sk)) continue;
            for (const d2 of date_dim) {
              if (!(d2.d_date_sk == sr.sr_returned_date_sk)) continue;
              for (const d3 of date_dim) {
                if (!(d3.d_date_sk == cs.cs_sold_date_sk)) continue;
                for (const s of store) {
                  if (!(s.s_store_sk == ss.ss_store_sk)) continue;
                  for (const i of item) {
                    if (!(i.i_item_sk == ss.ss_item_sk)) continue;
                    if (
                      !((((((d1.d_moy == 4) && (d1.d_year == 2000)) &&
                        (d2.d_moy >= 4)) && (d2.d_moy <= 10)) &&
                        (d3.d_moy >= 4)) && (d3.d_moy <= 10))
                    ) continue;
                    const _key = {
                      "item_id": i.i_item_id,
                      "item_desc": i.i_item_desc,
                      "s_store_id": s.s_store_id,
                      "s_store_name": s.s_store_name,
                    };
                    const _ks = JSON.stringify(_key);
                    let _g = _map.get(_ks);
                    if (!_g) {
                      _g = { key: _key, items: [] };
                      _map.set(_ks, _g);
                    }
                    _g.items.push({
                      ...ss,
                      ...sr,
                      ...cs,
                      ...d1,
                      ...d2,
                      ...d3,
                      ...s,
                      ...i,
                      ss: ss,
                      sr: sr,
                      cs: cs,
                      d1: d1,
                      d2: d2,
                      d3: d3,
                      s: s,
                      i: i,
                    });
                  }
                }
              }
            }
          }
        }
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "i_item_id": g.key.item_id,
        "i_item_desc": g.key.item_desc,
        "s_store_id": g.key.s_store_id,
        "s_store_name": g.key.s_store_name,
        "store_sales_profit": _sum(g.items.map((x) => x.ss_net_profit)),
        "store_returns_loss": _sum(g.items.map((x) => x.sr_net_loss)),
        "catalog_sales_profit": _sum(g.items.map((x) => x.cs_net_profit)),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q25_aggregated_profit();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
