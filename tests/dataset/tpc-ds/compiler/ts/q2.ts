// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:37:12Z
// Source: tests/dataset/tpc-ds/q2.mochi

let catalog_sales: Record<string, any>[];
let date_dim: Record<string, any>[];
let result: Record<string, any>[];
let web_sales: Record<string, any>[];
let wscs: Record<string, any>[];
let wswscs: Record<string, any>[];
let year1: Record<string, any>[];
let year2: Record<string, any>[];

function test_TPCDS_Q2_result(): void {
  if (
    !(_equal(result, [
      {
        "d_week_seq1": 1,
        "sun_ratio": 0.5,
        "mon_ratio": 0.5,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  web_sales = [
    {
      "ws_sold_date_sk": 1,
      "ws_ext_sales_price": 5,
      "ws_sold_date_name": "Sunday",
    },
    {
      "ws_sold_date_sk": 2,
      "ws_ext_sales_price": 5,
      "ws_sold_date_name": "Monday",
    },
    {
      "ws_sold_date_sk": 8,
      "ws_ext_sales_price": 10,
      "ws_sold_date_name": "Sunday",
    },
    {
      "ws_sold_date_sk": 9,
      "ws_ext_sales_price": 10,
      "ws_sold_date_name": "Monday",
    },
  ];
  catalog_sales = [
    {
      "cs_sold_date_sk": 1,
      "cs_ext_sales_price": 5,
      "cs_sold_date_name": "Sunday",
    },
    {
      "cs_sold_date_sk": 2,
      "cs_ext_sales_price": 5,
      "cs_sold_date_name": "Monday",
    },
    {
      "cs_sold_date_sk": 8,
      "cs_ext_sales_price": 10,
      "cs_sold_date_name": "Sunday",
    },
    {
      "cs_sold_date_sk": 9,
      "cs_ext_sales_price": 10,
      "cs_sold_date_name": "Monday",
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_week_seq": 1,
      "d_day_name": "Sunday",
      "d_year": 1998,
    },
    {
      "d_date_sk": 2,
      "d_week_seq": 1,
      "d_day_name": "Monday",
      "d_year": 1998,
    },
    {
      "d_date_sk": 8,
      "d_week_seq": 54,
      "d_day_name": "Sunday",
      "d_year": 1999,
    },
    {
      "d_date_sk": 9,
      "d_week_seq": 54,
      "d_day_name": "Monday",
      "d_year": 1999,
    },
  ];
  wscs = (web_sales.map((ws) => ({
    "sold_date_sk": ws.ws_sold_date_sk,
    "sales_price": ws.ws_ext_sales_price,
    "day": ws.ws_sold_date_name,
  }))).concat(catalog_sales.map((cs) => ({
    "sold_date_sk": cs.cs_sold_date_sk,
    "sales_price": cs.cs_ext_sales_price,
    "day": cs.cs_sold_date_name,
  })));
  wswscs = (() => {
    const _src = wscs;
    const _map = new Map<string, any>();
    var _items = [];
    for (const w of _src) {
      for (const d of date_dim) {
        if (!(w.sold_date_sk == d.d_date_sk)) continue;
        const _key = { "week_seq": d.d_week_seq };
        const _ks = JSON.stringify(_key);
        let _g = _map.get(_ks);
        if (!_g) {
          _g = { key: _key, items: [] };
          _map.set(_ks, _g);
        }
        _g.items.push({ ...w, ...d, w: w, d: d });
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "d_week_seq": g.key.week_seq,
        "sun_sales": _sum(
          g.items.filter((x) => (x.day == "Sunday")).map((x) => x.sales_price),
        ),
        "mon_sales": _sum(
          g.items.filter((x) => (x.day == "Monday")).map((x) => x.sales_price),
        ),
        "tue_sales": _sum(
          g.items.filter((x) => (x.day == "Tuesday")).map((x) => x.sales_price),
        ),
        "wed_sales": _sum(
          g.items.filter((x) => (x.day == "Wednesday")).map((x) =>
            x.sales_price
          ),
        ),
        "thu_sales": _sum(
          g.items.filter((x) => (x.day == "Thursday")).map((x) =>
            x.sales_price
          ),
        ),
        "fri_sales": _sum(
          g.items.filter((x) => (x.day == "Friday")).map((x) => x.sales_price),
        ),
        "sat_sales": _sum(
          g.items.filter((x) => (x.day == "Saturday")).map((x) =>
            x.sales_price
          ),
        ),
      });
    }
    return _res;
  })();
  year1 = wswscs.filter((w) => (w.d_week_seq == 1)).map((w) => w);
  year2 = wswscs.filter((w) => (w.d_week_seq == 54)).map((w) => w);
  result = (() => {
    const _src = year1;
    const _res = [];
    for (const y of _src) {
      for (const z of year2) {
        if (!(y.d_week_seq == (z.d_week_seq - 53))) continue;
        _res.push({
          "d_week_seq1": y.d_week_seq,
          "sun_ratio": (y.sun_sales / z.sun_sales),
          "mon_ratio": (y.mon_sales / z.mon_sales),
        });
      }
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q2_result();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
