// Generated by Mochi TypeScript compiler

type StoreSale = {
  ss_customer_sk: number;
  ss_item_sk: number;
};

type CatalogSale = {
  cs_bill_customer_sk: number;
  cs_item_sk: number;
};

let both: number;
let catalog_only: number;
let catalog_sales: Record<string, number>[];
let csci: Record<string, any>[];
let result: Record<string, number>;
let ssci: Record<string, any>[];
let store_only: number;
let store_sales: Record<string, number>[];

function test_TPCDS_Q97_overlap(): void {
  if (
    !(((result.store_only == 1) && (result.catalog_only == 1)) &&
      (result.store_and_catalog == 1))
  ) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "ss_customer_sk": 1,
      "ss_item_sk": 1,
    },
    {
      "ss_customer_sk": 2,
      "ss_item_sk": 1,
    },
  ];
  catalog_sales = [
    {
      "cs_bill_customer_sk": 1,
      "cs_item_sk": 1,
    },
    {
      "cs_bill_customer_sk": 3,
      "cs_item_sk": 2,
    },
  ];
  ssci = (() => {
    const _src = store_sales;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const ss of _src) {
      const _key = {
        "customer_sk": ss.ss_customer_sk,
        "item_sk": ss.ss_item_sk,
      };
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push({ ...ss, ss: ss });
    }
    let _groups = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "customer_sk": g.key.customer_sk,
        "item_sk": g.key.item_sk,
      });
    }
    return _res;
  })();
  csci = (() => {
    const _src = catalog_sales;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const cs of _src) {
      const _key = {
        "customer_sk": cs.cs_bill_customer_sk,
        "item_sk": cs.cs_item_sk,
      };
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push({ ...cs, cs: cs });
    }
    let _groups = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "customer_sk": g.key.customer_sk,
        "item_sk": g.key.item_sk,
      });
    }
    return _res;
  })();
  both = _count((() => {
    const _src = ssci;
    return _query(_src, [
      {
        items: csci,
        on: (
          s,
          c,
        ) => (_equal(s.customer_sk, c.customer_sk) &&
          _equal(s.item_sk, c.item_sk)),
      },
    ], { select: (s, c) => 1 });
  })());
  store_only = _count(
    ssci.filter(
      (s) => (!(_exists(
        csci.filter(
          (c) => (_equal(s.customer_sk, c.customer_sk) &&
            _equal(s.item_sk, c.item_sk))
        ).map((c) => c),
      )))
    ).map((s) => 1),
  );
  catalog_only = _count(
    csci.filter(
      (c) => (!(_exists(
        ssci.filter(
          (s) => (_equal(s.customer_sk, c.customer_sk) &&
            _equal(s.item_sk, c.item_sk))
        ).map((s) => s),
      )))
    ).map((c) => 1),
  );
  result = {
    "store_only": store_only,
    "catalog_only": catalog_only,
    "store_and_catalog": both,
  };
  console.log(_json(result));
  test_TPCDS_Q97_overlap();
}
function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _exists(v: any): boolean {
  if (Array.isArray(v)) return v.length > 0;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length > 0;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length > 0;
    return Object.keys(v).length > 0;
  }
  if (typeof v === "string") return v.length > 0;
  return false;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

function _query(src: any[], joins: any[], opts: any): any {
  let items = src.map((v) => [v]);
  for (const j of joins) {
    const joined: any[] = [];
    if (j.right && j.left) {
      const matched: boolean[] = new Array(j.items.length).fill(false);
      for (const left of items) {
        let m = false;
        for (let ri = 0; ri < j.items.length; ri++) {
          const right = j.items[ri];
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          matched[ri] = true;
          joined.push([...left, right]);
        }
        if (!m) joined.push([...left, null]);
      }
      for (let ri = 0; ri < j.items.length; ri++) {
        if (!matched[ri]) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, j.items[ri]]);
        }
      }
    } else if (j.right) {
      for (const right of j.items) {
        let m = false;
        for (const left of items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (!m) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, right]);
        }
      }
    } else {
      for (const left of items) {
        let m = false;
        for (const right of j.items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (j.left && !m) joined.push([...left, null]);
      }
    }
    items = joined;
  }
  if (opts.where) items = items.filter((r) => opts.where(...r));
  if (opts.sortKey) {
    let pairs = items.map((it) => ({ item: it, key: opts.sortKey(...it) }));
    pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    items = pairs.map((p) => p.item);
  }
  if (opts.skip !== undefined) {
    const n = opts.skip;
    items = n < items.length ? items.slice(n) : [];
  }
  if (opts.take !== undefined) {
    const n = opts.take;
    if (n < items.length) items = items.slice(0, n);
  }
  const res = [];
  for (const r of items) res.push(opts.select(...r));
  return res;
}

main();
