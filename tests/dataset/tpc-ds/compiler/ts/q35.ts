// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:46:13Z
// Source: tests/dataset/tpc-ds/q35.mochi

let customer: { [key: string]: number }[];
let customer_address: Record<string, any>[];
let customer_demographics: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let groups: Record<string, any>[];
let purchased: number[];
let store_sales: { [key: string]: number }[];

function test_TPCDS_Q35_simplified(): void {
  if (
    !(_equal(groups, [
      {
        "ca_state": "CA",
        "cd_gender": "M",
        "cd_marital_status": "S",
        "cd_dep_count": 1,
        "cd_dep_employed_count": 1,
        "cd_dep_college_count": 0,
        "cnt": 1,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  customer = [
    {
      "c_customer_sk": 1,
      "c_current_addr_sk": 1,
      "c_current_cdemo_sk": 1,
    },
    {
      "c_customer_sk": 2,
      "c_current_addr_sk": 2,
      "c_current_cdemo_sk": 2,
    },
  ];
  customer_address = [
    {
      "ca_address_sk": 1,
      "ca_state": "CA",
    },
    {
      "ca_address_sk": 2,
      "ca_state": "NY",
    },
  ];
  customer_demographics = [
    {
      "cd_demo_sk": 1,
      "cd_gender": "M",
      "cd_marital_status": "S",
      "cd_dep_count": 1,
      "cd_dep_employed_count": 1,
      "cd_dep_college_count": 0,
    },
    {
      "cd_demo_sk": 2,
      "cd_gender": "F",
      "cd_marital_status": "M",
      "cd_dep_count": 2,
      "cd_dep_employed_count": 1,
      "cd_dep_college_count": 1,
    },
  ];
  store_sales = [
    {
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 2000,
      "d_qoy": 1,
    },
  ];
  purchased = (() => {
    const _src = store_sales;
    const _res = [];
    for (const ss of _src) {
      for (const d of date_dim) {
        if (!(ss.ss_sold_date_sk == d.d_date_sk)) continue;
        if (!((d.d_year == 2000) && (d.d_qoy < 4))) continue;
        _res.push(ss.ss_customer_sk);
      }
    }
    return _res;
  })();
  groups = (() => {
    const _src = customer;
    const _map = new Map<string, any>();
    var _items = [];
    for (const c of _src) {
      for (const ca of customer_address) {
        if (!(c.c_current_addr_sk == ca.ca_address_sk)) continue;
        for (const cd of customer_demographics) {
          if (!(c.c_current_cdemo_sk == cd.cd_demo_sk)) continue;
          if (!(purchased.includes(c.c_customer_sk) ? 1 : 0)) continue;
          const _key = {
            "state": ca.ca_state,
            "gender": cd.cd_gender,
            "marital": cd.cd_marital_status,
            "dep": cd.cd_dep_count,
            "emp": cd.cd_dep_employed_count,
            "col": cd.cd_dep_college_count,
          };
          const _ks = JSON.stringify(_key);
          let _g = _map.get(_ks);
          if (!_g) {
            _g = { key: _key, items: [] };
            _map.set(_ks, _g);
          }
          _g.items.push({ ...c, ...ca, ...cd, c: c, ca: ca, cd: cd });
        }
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "ca_state": g.key.state,
        "cd_gender": g.key.gender,
        "cd_marital_status": g.key.marital,
        "cd_dep_count": g.key.dep,
        "cd_dep_employed_count": g.key.emp,
        "cd_dep_college_count": g.key.col,
        "cnt": g.items.length,
      });
    }
    return _res;
  })();
  console.log(_json(groups));
  test_TPCDS_Q35_simplified();
}
function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
