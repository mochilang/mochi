// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:46:13Z
// Source: tests/dataset/tpc-ds/q24.mochi

type StoreSale = {
  ss_ticket_number: number;
  ss_item_sk: number;
  ss_customer_sk: number;
  ss_store_sk: number;
  ss_net_paid: number;
};

type StoreReturn = {
  sr_ticket_number: number;
  sr_item_sk: number;
};

type Store = {
  s_store_sk: number;
  s_store_name: string;
  s_market_id: number;
  s_state: string;
  s_zip: string;
};

type Item = {
  i_item_sk: number;
  i_color: string;
  i_current_price: number;
  i_manager_id: number;
  i_units: string;
  i_size: string;
};

type Customer = {
  c_customer_sk: number;
  c_first_name: string;
  c_last_name: string;
  c_current_addr_sk: number;
  c_birth_country: string;
};

type CustomerAddress = {
  ca_address_sk: number;
  ca_state: string;
  ca_country: string;
  ca_zip: string;
};

let avg_paid: number;
let customer: Record<string, any>[];
let customer_address: Record<string, any>[];
let item: Record<string, any>[];
let result: Record<string, any>[];
let ssales: Record<string, any>[];
let store: Record<string, any>[];
let store_returns: { [key: string]: number }[];
let store_sales: Record<string, any>[];

function test_TPCDS_Q24_customer_net_paid(): void {
  if (
    !(_equal(result, [
      {
        "c_last_name": "Smith",
        "c_first_name": "Ann",
        "s_store_name": "Store1",
        "paid": 100,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "ss_ticket_number": 1,
      "ss_item_sk": 1,
      "ss_customer_sk": 1,
      "ss_store_sk": 1,
      "ss_net_paid": 100,
    },
    {
      "ss_ticket_number": 2,
      "ss_item_sk": 2,
      "ss_customer_sk": 2,
      "ss_store_sk": 1,
      "ss_net_paid": 50,
    },
  ];
  store_returns = [
    {
      "sr_ticket_number": 1,
      "sr_item_sk": 1,
    },
    {
      "sr_ticket_number": 2,
      "sr_item_sk": 2,
    },
  ];
  store = [
    {
      "s_store_sk": 1,
      "s_store_name": "Store1",
      "s_market_id": 5,
      "s_state": "CA",
      "s_zip": "12345",
    },
  ];
  item = [
    {
      "i_item_sk": 1,
      "i_color": "RED",
      "i_current_price": 10,
      "i_manager_id": 1,
      "i_units": "EA",
      "i_size": "M",
    },
    {
      "i_item_sk": 2,
      "i_color": "BLUE",
      "i_current_price": 20,
      "i_manager_id": 2,
      "i_units": "EA",
      "i_size": "L",
    },
  ];
  customer = [
    {
      "c_customer_sk": 1,
      "c_first_name": "Ann",
      "c_last_name": "Smith",
      "c_current_addr_sk": 1,
      "c_birth_country": "Canada",
    },
    {
      "c_customer_sk": 2,
      "c_first_name": "Bob",
      "c_last_name": "Jones",
      "c_current_addr_sk": 2,
      "c_birth_country": "USA",
    },
  ];
  customer_address = [
    {
      "ca_address_sk": 1,
      "ca_state": "CA",
      "ca_country": "USA",
      "ca_zip": "12345",
    },
    {
      "ca_address_sk": 2,
      "ca_state": "CA",
      "ca_country": "USA",
      "ca_zip": "54321",
    },
  ];
  ssales = (() => {
    const _src = store_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const ss of _src) {
      for (const sr of store_returns) {
        if (
          !((ss.ss_ticket_number == sr.sr_ticket_number) &&
            (ss.ss_item_sk == sr.sr_item_sk))
        ) continue;
        for (const s of store) {
          if (!(ss.ss_store_sk == s.s_store_sk)) continue;
          for (const i of item) {
            if (!(ss.ss_item_sk == i.i_item_sk)) continue;
            for (const c of customer) {
              if (!(ss.ss_customer_sk == c.c_customer_sk)) continue;
              for (const ca of customer_address) {
                if (!(c.c_current_addr_sk == ca.ca_address_sk)) continue;
                if (
                  !(((c.c_birth_country !=
                    String(ca.ca_country).toUpperCase()) &&
                    (s.s_zip == ca.ca_zip)) && (s.s_market_id == 5))
                ) continue;
                const _key = {
                  "last": c.c_last_name,
                  "first": c.c_first_name,
                  "store_name": s.s_store_name,
                  "color": i.i_color,
                };
                const _ks = JSON.stringify(_key);
                let _g = _map.get(_ks);
                if (!_g) {
                  _g = { key: _key, items: [] };
                  _map.set(_ks, _g);
                }
                _g.items.push({
                  ...ss,
                  ...sr,
                  ...s,
                  ...i,
                  ...c,
                  ...ca,
                  ss: ss,
                  sr: sr,
                  s: s,
                  i: i,
                  c: c,
                  ca: ca,
                });
              }
            }
          }
        }
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "c_last_name": g.key.last,
        "c_first_name": g.key.first,
        "s_store_name": g.key.store_name,
        "color": g.key.color,
        "netpaid": g.items.map((x) => x.ss_net_paid).reduce(
          (a, b) => a + Number(b),
          0,
        ),
      });
    }
    return _res;
  })();
  avg_paid = ssales.map((x) => x.netpaid).reduce((a, b) => a + Number(b), 0) /
    ssales.map((x) => x.netpaid).length;
  result = (() => {
    const _src = ssales;
    var _items = [];
    for (const x of _src) {
      if (!((x.color == "RED") && (x.netpaid > (0.05 * avg_paid)))) continue;
      _items.push({ x: x });
    }
    let _pairs = _items.map((it) => {
      const { x } = it;
      return { item: it, key: [x.c_last_name, x.c_first_name, x.s_store_name] };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const _it of _items) {
      const x = _it.x;
      _res.push({
        "c_last_name": x.c_last_name,
        "c_first_name": x.c_first_name,
        "s_store_name": x.s_store_name,
        "paid": x.netpaid,
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q24_customer_net_paid();
}
function _cmp(a: unknown, b: unknown): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    const order: Record<string, number> = { store: 0, web: 1, catalog: 2 };
    if (order[a] !== undefined && order[b] !== undefined) {
      return order[a] - order[b];
    }
    return a < b ? -1 : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
