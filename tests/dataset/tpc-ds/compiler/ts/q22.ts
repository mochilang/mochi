// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:37:14Z
// Source: tests/dataset/tpc-ds/q22.mochi

type Inventory = {
  inv_item_sk: number;
  inv_date_sk: number;
  inv_quantity_on_hand: number;
};

type DateDim = {
  d_date_sk: number;
  d_month_seq: number;
};

type Item = {
  i_item_sk: number;
  i_product_name: string;
  i_brand: string;
  i_class: string;
  i_category: string;
};

let date_dim: { [key: string]: number }[];
let inventory: { [key: string]: number }[];
let item: Record<string, any>[];
let qoh: Record<string, any>[];

function test_TPCDS_Q22_average_inventory(): void {
  if (
    !(_equal(qoh, [
      {
        "i_product_name": "Prod1",
        "i_brand": "Brand1",
        "i_class": "Class1",
        "i_category": "Cat1",
        "qoh": 15,
      },
      {
        "i_product_name": "Prod2",
        "i_brand": "Brand2",
        "i_class": "Class2",
        "i_category": "Cat2",
        "qoh": 50,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  inventory = [
    {
      "inv_item_sk": 1,
      "inv_date_sk": 1,
      "inv_quantity_on_hand": 10,
    },
    {
      "inv_item_sk": 1,
      "inv_date_sk": 2,
      "inv_quantity_on_hand": 20,
    },
    {
      "inv_item_sk": 1,
      "inv_date_sk": 3,
      "inv_quantity_on_hand": 10,
    },
    {
      "inv_item_sk": 1,
      "inv_date_sk": 4,
      "inv_quantity_on_hand": 20,
    },
    {
      "inv_item_sk": 2,
      "inv_date_sk": 1,
      "inv_quantity_on_hand": 50,
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_month_seq": 0,
    },
    {
      "d_date_sk": 2,
      "d_month_seq": 1,
    },
    {
      "d_date_sk": 3,
      "d_month_seq": 2,
    },
    {
      "d_date_sk": 4,
      "d_month_seq": 3,
    },
  ];
  item = [
    {
      "i_item_sk": 1,
      "i_product_name": "Prod1",
      "i_brand": "Brand1",
      "i_class": "Class1",
      "i_category": "Cat1",
    },
    {
      "i_item_sk": 2,
      "i_product_name": "Prod2",
      "i_brand": "Brand2",
      "i_class": "Class2",
      "i_category": "Cat2",
    },
  ];
  qoh = (() => {
    const _src = inventory;
    const _map = new Map<string, any>();
    var _items = [];
    for (const inv of _src) {
      for (const d of date_dim) {
        if (!(inv.inv_date_sk == d.d_date_sk)) continue;
        for (const i of item) {
          if (!(inv.inv_item_sk == i.i_item_sk)) continue;
          if (!((d.d_month_seq >= 0) && (d.d_month_seq <= 11))) continue;
          const _key = {
            "product_name": i.i_product_name,
            "brand": i.i_brand,
            "_class": i.i_class,
            "category": i.i_category,
          };
          const _ks = JSON.stringify(_key);
          let _g = _map.get(_ks);
          if (!_g) {
            _g = { key: _key, items: [] };
            _map.set(_ks, _g);
          }
          _g.items.push({ ...inv, ...d, ...i, inv: inv, d: d, i: i });
        }
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "i_product_name": g.key.product_name,
        "i_brand": g.key.brand,
        "i_class": g.key._class,
        "i_category": g.key.category,
        "qoh": _avg(g.items.map((x) => x.inv_quantity_on_hand)),
      });
    }
    return _res;
  })();
  console.log(_json(qoh));
  test_TPCDS_Q22_average_inventory();
}
function _avg(v: any): number {
  const c = _count(v);
  return c ? _sum(v) / c : 0;
}

function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
