// Generated by Mochi compiler v0.10.25 on 2025-07-15T03:49:44Z
// Source: tests/dataset/tpc-ds/q33.mochi

let catalog_sales: Record<string, any>[];
let customer_address: { [key: string]: number }[];
let date_dim: { [key: string]: number }[];
let item: Record<string, any>[];
let month: number;
let result: Record<string, any>[];
let store_sales: Record<string, any>[];
let union_sales: any[];
let web_sales: Record<string, any>[];
let year: number;

function test_TPCDS_Q33_simplified(): void {
  if (
    !(_equal(result, [
      {
        "i_manufact_id": 1,
        "total_sales": 150,
      },
      {
        "i_manufact_id": 2,
        "total_sales": 50,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  item = [
    {
      "i_item_sk": 1,
      "i_manufact_id": 1,
      "i_category": "Books",
    },
    {
      "i_item_sk": 2,
      "i_manufact_id": 2,
      "i_category": "Books",
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 2000,
      "d_moy": 1,
    },
  ];
  customer_address = [
    {
      "ca_address_sk": 1,
      "ca_gmt_offset": (-5),
    },
    {
      "ca_address_sk": 2,
      "ca_gmt_offset": (-5),
    },
  ];
  store_sales = [
    {
      "ss_item_sk": 1,
      "ss_ext_sales_price": 100,
      "ss_sold_date_sk": 1,
      "ss_addr_sk": 1,
    },
    {
      "ss_item_sk": 2,
      "ss_ext_sales_price": 50,
      "ss_sold_date_sk": 1,
      "ss_addr_sk": 2,
    },
  ];
  catalog_sales = [
    {
      "cs_item_sk": 1,
      "cs_ext_sales_price": 20,
      "cs_sold_date_sk": 1,
      "cs_bill_addr_sk": 1,
    },
  ];
  web_sales = [
    {
      "ws_item_sk": 1,
      "ws_ext_sales_price": 30,
      "ws_sold_date_sk": 1,
      "ws_bill_addr_sk": 1,
    },
  ];
  month = 1;
  year = 2000;
  union_sales = [].concat(
    (() => {
      const _src = store_sales;
      const _res = [];
      for (const ss of _src) {
        for (const d of date_dim) {
          if (!(_equal(ss.ss_sold_date_sk, d.d_date_sk))) continue;
          for (const ca of customer_address) {
            if (!(_equal(ss.ss_addr_sk, ca.ca_address_sk))) continue;
            for (const i of item) {
              if (!(_equal(ss.ss_item_sk, i.i_item_sk))) continue;
              if (
                !(((_equal(i.i_category, "Books") && (d.d_year == year)) &&
                  (d.d_moy == month)) && (ca.ca_gmt_offset == (-5)))
              ) continue;
              _res.push({
                "manu": i.i_manufact_id,
                "price": ss.ss_ext_sales_price,
              });
            }
          }
        }
      }
      return _res;
    })(),
    (() => {
      const _src = catalog_sales;
      const _res = [];
      for (const cs of _src) {
        for (const d of date_dim) {
          if (!(_equal(cs.cs_sold_date_sk, d.d_date_sk))) continue;
          for (const ca of customer_address) {
            if (!(_equal(cs.cs_bill_addr_sk, ca.ca_address_sk))) continue;
            for (const i of item) {
              if (!(_equal(cs.cs_item_sk, i.i_item_sk))) continue;
              if (
                !(((_equal(i.i_category, "Books") && (d.d_year == year)) &&
                  (d.d_moy == month)) && (ca.ca_gmt_offset == (-5)))
              ) continue;
              _res.push({
                "manu": i.i_manufact_id,
                "price": cs.cs_ext_sales_price,
              });
            }
          }
        }
      }
      return _res;
    })(),
    (() => {
      const _src = web_sales;
      const _res = [];
      for (const ws of _src) {
        for (const d of date_dim) {
          if (!(_equal(ws.ws_sold_date_sk, d.d_date_sk))) continue;
          for (const ca of customer_address) {
            if (!(_equal(ws.ws_bill_addr_sk, ca.ca_address_sk))) continue;
            for (const i of item) {
              if (!(_equal(ws.ws_item_sk, i.i_item_sk))) continue;
              if (
                !(((_equal(i.i_category, "Books") && (d.d_year == year)) &&
                  (d.d_moy == month)) && (ca.ca_gmt_offset == (-5)))
              ) continue;
              _res.push({
                "manu": i.i_manufact_id,
                "price": ws.ws_ext_sales_price,
              });
            }
          }
        }
      }
      return _res;
    })(),
  );
  result = (() => {
    const _src = union_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const s of _src) {
      const _key = s.manu;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...s, s: s });
    }
    let _groups = Array.from(_map.values());
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return { item: it, key: (-_sum(g.items.map((x) => x.price))) };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "i_manufact_id": g.key,
        "total_sales": _sum(g.items.map((x) => x.price)),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q33_simplified();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
