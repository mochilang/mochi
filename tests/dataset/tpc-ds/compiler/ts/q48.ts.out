// Generated by Mochi TypeScript compiler

let customer_address: Record<string, any>[];
let customer_demographics: Record<string, any>[];
let date_dim: Record<string, number>[];
let qty: any[];
let qty_base: any[];
let result: number;
let states1: string[];
let states2: string[];
let states3: string[];
let store: Record<string, number>[];
let store_sales: Record<string, any>[];
let year: number;

function test_TPCDS_Q48_simplified(): void {
  if (!(result == 35)) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "cdemo_sk": 1,
      "addr_sk": 1,
      "sold_date_sk": 1,
      "sales_price": 120,
      "net_profit": 1000,
      "quantity": 5,
    },
    {
      "cdemo_sk": 2,
      "addr_sk": 2,
      "sold_date_sk": 1,
      "sales_price": 60,
      "net_profit": 2000,
      "quantity": 10,
    },
    {
      "cdemo_sk": 3,
      "addr_sk": 3,
      "sold_date_sk": 1,
      "sales_price": 170,
      "net_profit": 10000,
      "quantity": 20,
    },
  ];
  store = [{ "s_store_sk": 1 }];
  customer_demographics = [
    {
      "cd_demo_sk": 1,
      "cd_marital_status": "S",
      "cd_education_status": "E1",
    },
    {
      "cd_demo_sk": 2,
      "cd_marital_status": "M",
      "cd_education_status": "E2",
    },
    {
      "cd_demo_sk": 3,
      "cd_marital_status": "W",
      "cd_education_status": "E3",
    },
  ];
  customer_address = [
    {
      "ca_address_sk": 1,
      "ca_country": "United States",
      "ca_state": "TX",
    },
    {
      "ca_address_sk": 2,
      "ca_country": "United States",
      "ca_state": "CA",
    },
    {
      "ca_address_sk": 3,
      "ca_country": "United States",
      "ca_state": "NY",
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 2000,
    },
  ];
  year = 2000;
  states1 = ["TX"];
  states2 = ["CA"];
  states3 = ["NY"];
  qty_base = (() => {
    const _src = store_sales;
    return _query(_src, [
      {
        items: customer_demographics,
        on: (ss, cd) => (_equal(ss.cdemo_sk, cd.cd_demo_sk)),
      },
      {
        items: customer_address,
        on: (ss, cd, ca) => (_equal(ss.addr_sk, ca.ca_address_sk)),
      },
      {
        items: date_dim,
        on: (ss, cd, ca, d) => (_equal(ss.sold_date_sk, d.d_date_sk)),
      },
    ], {
      select: (ss, cd, ca, d) => ss.quantity,
      where: (
        ss,
        cd,
        ca,
        d,
      ) => (((d.d_year == year) &&
        (((((_equal(cd.cd_marital_status, "S") &&
          _equal(cd.cd_education_status, "E1")) && (ss.sales_price >= 100)) &&
          (ss.sales_price <= 150)) ||
          (((_equal(cd.cd_marital_status, "M") &&
            _equal(cd.cd_education_status, "E2")) && (ss.sales_price >= 50)) &&
            (ss.sales_price <= 100))) ||
          (((_equal(cd.cd_marital_status, "W") &&
            _equal(cd.cd_education_status, "E3")) && (ss.sales_price >= 150)) &&
            (ss.sales_price <= 200)))) &&
        ((((states1.includes(ca.ca_state) && (ss.net_profit >= 0)) &&
          (ss.net_profit <= 2000)) ||
          ((states2.includes(ca.ca_state) && (ss.net_profit >= 150)) &&
            (ss.net_profit <= 3000))) ||
          ((states3.includes(ca.ca_state) && (ss.net_profit >= 50)) &&
            (ss.net_profit <= 25000)))),
    });
  })();
  qty = qty_base;
  result = _sum(qty);
  console.log(_json(result));
  test_TPCDS_Q48_simplified();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

function _query(src: any[], joins: any[], opts: any): any {
  let items = src.map((v) => [v]);
  for (const j of joins) {
    const joined: any[] = [];
    if (j.right && j.left) {
      const matched: boolean[] = new Array(j.items.length).fill(false);
      for (const left of items) {
        let m = false;
        for (let ri = 0; ri < j.items.length; ri++) {
          const right = j.items[ri];
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          matched[ri] = true;
          joined.push([...left, right]);
        }
        if (!m) joined.push([...left, null]);
      }
      for (let ri = 0; ri < j.items.length; ri++) {
        if (!matched[ri]) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, j.items[ri]]);
        }
      }
    } else if (j.right) {
      for (const right of j.items) {
        let m = false;
        for (const left of items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (!m) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, right]);
        }
      }
    } else {
      for (const left of items) {
        let m = false;
        for (const right of j.items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (j.left && !m) joined.push([...left, null]);
      }
    }
    items = joined;
  }
  if (opts.where) items = items.filter((r) => opts.where(...r));
  if (opts.sortKey) {
    let pairs = items.map((it) => ({ item: it, key: opts.sortKey(...it) }));
    pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    items = pairs.map((p) => p.item);
  }
  if (opts.skip !== undefined) {
    const n = opts.skip;
    items = n < items.length ? items.slice(n) : [];
  }
  if (opts.take !== undefined) {
    const n = opts.take;
    if (n < items.length) items = items.slice(0, n);
  }
  const res = [];
  for (const r of items) res.push(opts.select(...r));
  return res;
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
