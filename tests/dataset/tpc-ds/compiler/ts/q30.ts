// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:46:13Z
// Source: tests/dataset/tpc-ds/q30.mochi

let avg_by_state: Record<string, any>[];
let customer: Record<string, any>[];
let customer_address: Record<string, any>[];
let customer_total_return: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let result: Record<string, any>[];
let web_returns: Record<string, any>[];

function test_TPCDS_Q30_simplified(): void {
  if (
    !(_equal(result, [
      {
        "c_customer_id": "C1",
        "c_first_name": "John",
        "c_last_name": "Doe",
        "ctr_total_return": 150,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  web_returns = [
    {
      "wr_returning_customer_sk": 1,
      "wr_returned_date_sk": 1,
      "wr_return_amt": 100,
      "wr_returning_addr_sk": 1,
    },
    {
      "wr_returning_customer_sk": 2,
      "wr_returned_date_sk": 1,
      "wr_return_amt": 30,
      "wr_returning_addr_sk": 2,
    },
    {
      "wr_returning_customer_sk": 1,
      "wr_returned_date_sk": 1,
      "wr_return_amt": 50,
      "wr_returning_addr_sk": 1,
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 2000,
    },
  ];
  customer_address = [
    {
      "ca_address_sk": 1,
      "ca_state": "CA",
    },
    {
      "ca_address_sk": 2,
      "ca_state": "CA",
    },
  ];
  customer = [
    {
      "c_customer_sk": 1,
      "c_customer_id": "C1",
      "c_first_name": "John",
      "c_last_name": "Doe",
      "c_current_addr_sk": 1,
    },
    {
      "c_customer_sk": 2,
      "c_customer_id": "C2",
      "c_first_name": "Jane",
      "c_last_name": "Smith",
      "c_current_addr_sk": 2,
    },
  ];
  customer_total_return = (() => {
    const _src = web_returns;
    const _map = new Map<string, any>();
    var _items = [];
    for (const wr of _src) {
      for (const d of date_dim) {
        if (!(wr.wr_returned_date_sk == d.d_date_sk)) continue;
        for (const ca of customer_address) {
          if (!(wr.wr_returning_addr_sk == ca.ca_address_sk)) continue;
          if (!((d.d_year == 2000) && (ca.ca_state == "CA"))) continue;
          const _key = {
            "cust": wr.wr_returning_customer_sk,
            "state": ca.ca_state,
          };
          const _ks = JSON.stringify(_key);
          let _g = _map.get(_ks);
          if (!_g) {
            _g = { key: _key, items: [] };
            _map.set(_ks, _g);
          }
          _g.items.push({ ...wr, ...d, ...ca, wr: wr, d: d, ca: ca });
        }
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "ctr_customer_sk": g.key.cust,
        "ctr_state": g.key.state,
        "ctr_total_return": g.items.map((x) => x.wr_return_amt).reduce(
          (a, b) => a + Number(b),
          0,
        ),
      });
    }
    return _res;
  })();
  avg_by_state = (() => {
    const _src = customer_total_return;
    const _map = new Map<string, any>();
    var _items = [];
    for (const ctr of _src) {
      const _key = ctr.ctr_state;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...ctr, ctr: ctr });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "state": g.key,
        "avg_return": (g.items.map((x) =>
          x.ctr_total_return
        ).reduce((a, b) => a + Number(b), 0) / g.items.map((x) =>
          x.ctr_total_return
        ).length),
      });
    }
    return _res;
  })();
  result = (() => {
    const _src = customer_total_return;
    const _res = [];
    for (const ctr of _src) {
      for (const avg of avg_by_state) {
        if (!(ctr.ctr_state == avg.state)) continue;
        for (const c of customer) {
          if (!(ctr.ctr_customer_sk == c.c_customer_sk)) continue;
          if (!(ctr.ctr_total_return > (avg.avg_return * 1.2))) continue;
          _res.push({
            "c_customer_id": c.c_customer_id,
            "c_first_name": c.c_first_name,
            "c_last_name": c.c_last_name,
            "ctr_total_return": ctr.ctr_total_return,
          });
        }
      }
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q30_simplified();
}
function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
