// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:53:48Z
// Source: tests/dataset/tpc-ds/q57.mochi

function abs(x: number): number {
  if ((x >= 0)) {
    return x;
  }
  return (-x);
}

let avg_by_year: Record<string, any>[];
let call_center: Record<string, any>[];
let catalog_sales: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let grouped: Record<string, any>[];
let item: Record<string, any>[];
let result: Record<string, any>[];

function test_TPCDS_Q57_simplified(): void {
  if (!(_equal(result, []))) throw new Error("expect failed");
}

function main(): void {
  catalog_sales = [
    {
      "item": 1,
      "call": 1,
      "date": 1,
      "price": 20,
    },
    {
      "item": 1,
      "call": 1,
      "date": 2,
      "price": 20,
    },
    {
      "item": 1,
      "call": 1,
      "date": 3,
      "price": 40,
    },
  ];
  item = [
    {
      "i_item_sk": 1,
      "i_category": "A",
      "i_brand": "B",
    },
  ];
  call_center = [
    {
      "cc_call_center_sk": 1,
      "cc_name": "C1",
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 2000,
      "d_moy": 11,
    },
    {
      "d_date_sk": 2,
      "d_year": 2000,
      "d_moy": 12,
    },
    {
      "d_date_sk": 3,
      "d_year": 2001,
      "d_moy": 1,
    },
  ];
  grouped = (() => {
    const _src = catalog_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const cs of _src) {
      for (const i of item) {
        if (!(cs.item == i.i_item_sk)) continue;
        for (const d of date_dim) {
          if (!(cs.date == d.d_date_sk)) continue;
          for (const cc of call_center) {
            if (!(cs.call == cc.cc_call_center_sk)) continue;
            const _key = {
              "cat": i.i_category,
              "call": cc.cc_name,
              "year": d.d_year,
            };
            const _ks = JSON.stringify(_key);
            let _g = _map.get(_ks);
            if (!_g) {
              _g = { key: _key, items: [] };
              _map.set(_ks, _g);
            }
            _g.items.push({
              ...cs,
              ...i,
              ...d,
              ...cc,
              cs: cs,
              i: i,
              d: d,
              cc: cc,
            });
          }
        }
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "cat": g.key.cat,
        "call": g.key.call,
        "year": g.key.year,
        "sum_sales": _sum(g.items.map((x) => x.price)),
      });
    }
    return _res;
  })();
  avg_by_year = (() => {
    const _src = grouped;
    const _map = new Map<string, any>();
    var _items = [];
    for (const g of _src) {
      const _key = {
        "cat": g.cat,
        "call": g.call,
      };
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...g, g: g });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const gg of _groups) {
      _res.push({
        "cat": gg.key.cat,
        "call": gg.key.call,
        "avg_sales": _avg(gg.items.map((x) => x.sum_sales)),
      });
    }
    return _res;
  })();
  result = (() => {
    const _src = grouped;
    const _res = [];
    for (const g of _src) {
      for (const a of avg_by_year) {
        if (!((g.cat == a.cat) && (g.call == a.call))) continue;
        if (
          !(((g.year == 2001) && (a.avg_sales > 0)) &&
            ((abs(g.sum_sales - a.avg_sales) / a.avg_sales) > 0.1))
        ) continue;
        _res.push({
          "i_category": g.cat,
          "sum_sales": g.sum_sales,
        });
      }
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q57_simplified();
}
function _avg(v: any): number {
  const c = _count(v);
  return c ? _sum(v) / c : 0;
}

function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
