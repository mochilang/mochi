// Generated by Mochi TypeScript compiler

let all_rows: any[];
let catalog_part: Record<string, any>[];
let catalog_sales: Record<string, any>[];
let date_dim: Record<string, number>[];
let item: Record<string, any>[];
let result: Record<string, any>[];
let store_part: Record<string, any>[];
let store_sales: Record<string, any>[];
let web_part: Record<string, any>[];
let web_sales: Record<string, any>[];

function test_TPCDS_Q76_simplified(): void {
  if (
    !(_equal(result, [
      {
        "channel": "store",
        "col_name": null,
        "d_year": 1998,
        "d_qoy": 1,
        "i_category": "CatA",
        "sales_cnt": 1,
        "sales_amt": 10,
      },
      {
        "channel": "web",
        "col_name": null,
        "d_year": 1998,
        "d_qoy": 1,
        "i_category": "CatB",
        "sales_cnt": 1,
        "sales_amt": 15,
      },
      {
        "channel": "catalog",
        "col_name": null,
        "d_year": 1998,
        "d_qoy": 1,
        "i_category": "CatC",
        "sales_cnt": 1,
        "sales_amt": 20,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 1998,
      "d_qoy": 1,
    },
  ];
  item = [
    {
      "i_item_sk": 1,
      "i_category": "CatA",
    },
    {
      "i_item_sk": 2,
      "i_category": "CatB",
    },
    {
      "i_item_sk": 3,
      "i_category": "CatC",
    },
  ];
  store_sales = [
    {
      "ss_customer_sk": null,
      "ss_item_sk": 1,
      "ss_ext_sales_price": 10,
      "ss_sold_date_sk": 1,
    },
  ];
  web_sales = [
    {
      "ws_bill_customer_sk": null,
      "ws_item_sk": 2,
      "ws_ext_sales_price": 15,
      "ws_sold_date_sk": 1,
    },
  ];
  catalog_sales = [
    {
      "cs_bill_customer_sk": null,
      "cs_item_sk": 3,
      "cs_ext_sales_price": 20,
      "cs_sold_date_sk": 1,
    },
  ];
  store_part = (() => {
    const _src = store_sales;
    return _query(_src, [
      { items: item, on: (ss, i) => (_equal(i.i_item_sk, ss.ss_item_sk)) },
      {
        items: date_dim,
        on: (ss, i, d) => (_equal(d.d_date_sk, ss.ss_sold_date_sk)),
      },
    ], {
      select: (ss, i, d) => ({
        "channel": "store",
        "col_name": ss.ss_customer_sk,
        "d_year": d.d_year,
        "d_qoy": d.d_qoy,
        "i_category": i.i_category,
        "ext_sales_price": ss.ss_ext_sales_price,
      }),
      where: (ss, i, d) => (_equal(ss.ss_customer_sk, null)),
    });
  })();
  web_part = (() => {
    const _src = web_sales;
    return _query(_src, [
      { items: item, on: (ws, i) => (_equal(i.i_item_sk, ws.ws_item_sk)) },
      {
        items: date_dim,
        on: (ws, i, d) => (_equal(d.d_date_sk, ws.ws_sold_date_sk)),
      },
    ], {
      select: (ws, i, d) => ({
        "channel": "web",
        "col_name": ws.ws_bill_customer_sk,
        "d_year": d.d_year,
        "d_qoy": d.d_qoy,
        "i_category": i.i_category,
        "ext_sales_price": ws.ws_ext_sales_price,
      }),
      where: (ws, i, d) => (_equal(ws.ws_bill_customer_sk, null)),
    });
  })();
  catalog_part = (() => {
    const _src = catalog_sales;
    return _query(_src, [
      { items: item, on: (cs, i) => (_equal(i.i_item_sk, cs.cs_item_sk)) },
      {
        items: date_dim,
        on: (cs, i, d) => (_equal(d.d_date_sk, cs.cs_sold_date_sk)),
      },
    ], {
      select: (cs, i, d) => ({
        "channel": "catalog",
        "col_name": cs.cs_bill_customer_sk,
        "d_year": d.d_year,
        "d_qoy": d.d_qoy,
        "i_category": i.i_category,
        "ext_sales_price": cs.cs_ext_sales_price,
      }),
      where: (cs, i, d) => (_equal(cs.cs_bill_customer_sk, null)),
    });
  })();
  all_rows = [].concat(store_part, web_part, catalog_part);
  result = (() => {
    const _src = all_rows;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const r of _src) {
      const _key = {
        "channel": r.channel,
        "col_name": r.col_name,
        "d_year": r.d_year,
        "d_qoy": r.d_qoy,
        "i_category": r.i_category,
      };
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push({ ...r, r: r });
    }
    let _groups = _order.map((k) => _map.get(k)!);
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return { item: it, key: g.key.channel };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "channel": g.key.channel,
        "col_name": g.key.col_name,
        "d_year": g.key.d_year,
        "d_qoy": g.key.d_qoy,
        "i_category": g.key.i_category,
        "sales_cnt": _count(g),
        "sales_amt": _sum(g.items.map((x) => x.r.ext_sales_price)),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q76_simplified();
}
function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

function _query(src: any[], joins: any[], opts: any): any {
  let items = src.map((v) => [v]);
  for (const j of joins) {
    const joined: any[] = [];
    if (j.right && j.left) {
      const matched: boolean[] = new Array(j.items.length).fill(false);
      for (const left of items) {
        let m = false;
        for (let ri = 0; ri < j.items.length; ri++) {
          const right = j.items[ri];
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          matched[ri] = true;
          joined.push([...left, right]);
        }
        if (!m) joined.push([...left, null]);
      }
      for (let ri = 0; ri < j.items.length; ri++) {
        if (!matched[ri]) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, j.items[ri]]);
        }
      }
    } else if (j.right) {
      for (const right of j.items) {
        let m = false;
        for (const left of items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (!m) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, right]);
        }
      }
    } else {
      for (const left of items) {
        let m = false;
        for (const right of j.items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (j.left && !m) joined.push([...left, null]);
      }
    }
    items = joined;
  }
  if (opts.where) items = items.filter((r) => opts.where(...r));
  if (opts.sortKey) {
    let pairs = items.map((it) => ({ item: it, key: opts.sortKey(...it) }));
    pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    items = pairs.map((p) => p.item);
  }
  if (opts.skip !== undefined) {
    const n = opts.skip;
    items = n < items.length ? items.slice(n) : [];
  }
  if (opts.take !== undefined) {
    const n = opts.take;
    if (n < items.length) items = items.slice(0, n);
  }
  const res = [];
  for (const r of items) res.push(opts.select(...r));
  return res;
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
