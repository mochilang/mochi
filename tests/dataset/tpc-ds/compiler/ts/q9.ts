// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:46:12Z
// Source: tests/dataset/tpc-ds/q9.mochi

let bucket1: number;
let bucket2: number;
let bucket3: number;
let bucket4: number;
let bucket5: number;
let reason: { [key: string]: number }[];
let result: { [key: string]: number }[];
let store_sales: Record<string, any>[];

function test_TPCDS_Q9_result(): void {
  if (
    !(_equal(result, [
      {
        "bucket1": 7,
        "bucket2": 15,
        "bucket3": 30,
        "bucket4": 35,
        "bucket5": 50,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "ss_quantity": 5,
      "ss_ext_discount_amt": 5,
      "ss_net_paid": 7,
    },
    {
      "ss_quantity": 30,
      "ss_ext_discount_amt": 10,
      "ss_net_paid": 15,
    },
    {
      "ss_quantity": 50,
      "ss_ext_discount_amt": 20,
      "ss_net_paid": 30,
    },
    {
      "ss_quantity": 70,
      "ss_ext_discount_amt": 25,
      "ss_net_paid": 35,
    },
    {
      "ss_quantity": 90,
      "ss_ext_discount_amt": 40,
      "ss_net_paid": 50,
    },
  ];
  reason = [
    { "r_reason_sk": 1 },
  ];
  bucket1 =
    (store_sales.filter((s) => ((s.ss_quantity >= 1) && (s.ss_quantity <= 20)))
        .map((s) => s).length > 10)
      ? (store_sales.filter(
        (s) => ((s.ss_quantity >= 1) && (s.ss_quantity <= 20))
      ).map((s) => s.ss_ext_discount_amt).reduce((a, b) => a + Number(b), 0) /
        store_sales.filter(
          (s) => ((s.ss_quantity >= 1) && (s.ss_quantity <= 20))
        ).map((s) => s.ss_ext_discount_amt).length)
      : (store_sales.filter(
        (s) => ((s.ss_quantity >= 1) && (s.ss_quantity <= 20))
      ).map((s) => s.ss_net_paid).reduce((a, b) => a + Number(b), 0) /
        store_sales.filter(
          (s) => ((s.ss_quantity >= 1) && (s.ss_quantity <= 20))
        ).map((s) => s.ss_net_paid).length);
  bucket2 =
    (store_sales.filter((s) => ((s.ss_quantity >= 21) && (s.ss_quantity <= 40)))
        .map((s) => s).length > 20)
      ? (store_sales.filter(
        (s) => ((s.ss_quantity >= 21) && (s.ss_quantity <= 40))
      ).map((s) => s.ss_ext_discount_amt).reduce((a, b) => a + Number(b), 0) /
        store_sales.filter(
          (s) => ((s.ss_quantity >= 21) && (s.ss_quantity <= 40))
        ).map((s) => s.ss_ext_discount_amt).length)
      : (store_sales.filter(
        (s) => ((s.ss_quantity >= 21) && (s.ss_quantity <= 40))
      ).map((s) => s.ss_net_paid).reduce((a, b) => a + Number(b), 0) /
        store_sales.filter(
          (s) => ((s.ss_quantity >= 21) && (s.ss_quantity <= 40))
        ).map((s) => s.ss_net_paid).length);
  bucket3 =
    (store_sales.filter((s) => ((s.ss_quantity >= 41) && (s.ss_quantity <= 60)))
        .map((s) => s).length > 30)
      ? (store_sales.filter(
        (s) => ((s.ss_quantity >= 41) && (s.ss_quantity <= 60))
      ).map((s) => s.ss_ext_discount_amt).reduce((a, b) => a + Number(b), 0) /
        store_sales.filter(
          (s) => ((s.ss_quantity >= 41) && (s.ss_quantity <= 60))
        ).map((s) => s.ss_ext_discount_amt).length)
      : (store_sales.filter(
        (s) => ((s.ss_quantity >= 41) && (s.ss_quantity <= 60))
      ).map((s) => s.ss_net_paid).reduce((a, b) => a + Number(b), 0) /
        store_sales.filter(
          (s) => ((s.ss_quantity >= 41) && (s.ss_quantity <= 60))
        ).map((s) => s.ss_net_paid).length);
  bucket4 =
    (store_sales.filter((s) => ((s.ss_quantity >= 61) && (s.ss_quantity <= 80)))
        .map((s) => s).length > 40)
      ? (store_sales.filter(
        (s) => ((s.ss_quantity >= 61) && (s.ss_quantity <= 80))
      ).map((s) => s.ss_ext_discount_amt).reduce((a, b) => a + Number(b), 0) /
        store_sales.filter(
          (s) => ((s.ss_quantity >= 61) && (s.ss_quantity <= 80))
        ).map((s) => s.ss_ext_discount_amt).length)
      : (store_sales.filter(
        (s) => ((s.ss_quantity >= 61) && (s.ss_quantity <= 80))
      ).map((s) => s.ss_net_paid).reduce((a, b) => a + Number(b), 0) /
        store_sales.filter(
          (s) => ((s.ss_quantity >= 61) && (s.ss_quantity <= 80))
        ).map((s) => s.ss_net_paid).length);
  bucket5 =
    (store_sales.filter(
        (s) => ((s.ss_quantity >= 81) && (s.ss_quantity <= 100))
      ).map((s) => s).length > 50)
      ? (store_sales.filter(
        (s) => ((s.ss_quantity >= 81) && (s.ss_quantity <= 100))
      ).map((s) => s.ss_ext_discount_amt).reduce((a, b) => a + Number(b), 0) /
        store_sales.filter(
          (s) => ((s.ss_quantity >= 81) && (s.ss_quantity <= 100))
        ).map((s) => s.ss_ext_discount_amt).length)
      : (store_sales.filter(
        (s) => ((s.ss_quantity >= 81) && (s.ss_quantity <= 100))
      ).map((s) => s.ss_net_paid).reduce((a, b) => a + Number(b), 0) /
        store_sales.filter(
          (s) => ((s.ss_quantity >= 81) && (s.ss_quantity <= 100))
        ).map((s) => s.ss_net_paid).length);
  result = reason.filter((r) => (r.r_reason_sk == 1)).map((r) => ({
    "bucket1": bucket1,
    "bucket2": bucket2,
    "bucket3": bucket3,
    "bucket4": bucket4,
    "bucket5": bucket5,
  }));
  console.log(_json(result));
  test_TPCDS_Q9_result();
}
function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
