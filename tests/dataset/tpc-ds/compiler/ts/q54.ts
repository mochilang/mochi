// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:46:15Z
// Source: tests/dataset/tpc-ds/q54.mochi

function int(x: number): number {
  return (x as number);
}

let by_customer: Record<string, any>[];
let customer: { [key: string]: number }[];
let customer_address: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let result: { [key: string]: number }[];
let revenue: { [key: string]: number }[];
let segments: { [key: string]: number }[];
let store: Record<string, any>[];
let store_sales: Record<string, any>[];

function test_TPCDS_Q54_simplified(): void {
  if (
    !(_equal(result, [
      {
        "segment": 1,
        "num_customers": 1,
        "segment_base": 50,
      },
      {
        "segment": 0,
        "num_customers": 1,
        "segment_base": 0,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "customer": 1,
      "sold_date": 2,
      "price": 60,
    },
    {
      "customer": 2,
      "sold_date": 2,
      "price": 40,
    },
  ];
  date_dim = [
    {
      "d_date_sk": 2,
      "d_month_seq": 5,
    },
  ];
  customer = [
    {
      "c_customer_sk": 1,
      "c_current_addr_sk": 1,
    },
    {
      "c_customer_sk": 2,
      "c_current_addr_sk": 1,
    },
  ];
  customer_address = [
    {
      "ca_address_sk": 1,
      "ca_county": "X",
      "ca_state": "Y",
    },
  ];
  store = [
    {
      "s_store_sk": 1,
      "s_county": "X",
      "s_state": "Y",
    },
  ];
  revenue = (() => {
    const _src = store_sales;
    const _res = [];
    for (const ss of _src) {
      for (const d of date_dim) {
        if (!(ss.sold_date == d.d_date_sk)) continue;
        for (const c of customer) {
          if (!(ss.customer == c.c_customer_sk)) continue;
          for (const ca of customer_address) {
            if (
              !(((c.c_current_addr_sk == ca.ca_address_sk) &&
                (ca.ca_county == "X")) && (ca.ca_state == "Y"))
            ) continue;
            for (const s of store) {
              if (
                !(((1 == s.s_store_sk) && (ca.ca_county == s.s_county)) &&
                  (ca.ca_state == s.s_state))
              ) continue;
              _res.push({
                "customer": c.c_customer_sk,
                "amt": ss.price,
              });
            }
          }
        }
      }
    }
    return _res;
  })();
  by_customer = (() => {
    const _src = revenue;
    const _map = new Map<string, any>();
    var _items = [];
    for (const r of _src) {
      const _key = r.customer;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...r, r: r });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "customer": g.key,
        "revenue": g.items.map((x) => x.amt).reduce((a, b) => a + b, 0),
      });
    }
    return _res;
  })();
  segments = (() => {
    const _src = by_customer;
    const _map = new Map<string, any>();
    var _items = [];
    for (const r of _src) {
      const _key = { "seg": int(r.revenue / 50) };
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...r, r: r });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "segment": g.key.seg,
        "num_customers": g.items.length,
        "segment_base": (g.key.seg * 50),
      });
    }
    return _res;
  })();
  result = segments;
  console.log(_json(result));
  test_TPCDS_Q54_simplified();
}
function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
