// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:53:47Z
// Source: tests/dataset/tpc-ds/q40.mochi

let catalog_returns: Record<string, any>[];
let catalog_sales: Record<string, any>[];
let date_dim: Record<string, any>[];
let item: Record<string, any>[];
let records: Record<string, any>[];
let result: Record<string, any>[];
let sales_date: string;
let warehouse: Record<string, any>[];

function test_TPCDS_Q40_simplified(): void {
  if (
    !(_equal(result, [
      {
        "w_state": "CA",
        "i_item_id": "I1",
        "sales_before": 100,
        "sales_after": 0,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  catalog_sales = [
    {
      "order": 1,
      "item_sk": 1,
      "warehouse_sk": 1,
      "date_sk": 1,
      "price": 100,
    },
    {
      "order": 2,
      "item_sk": 1,
      "warehouse_sk": 1,
      "date_sk": 2,
      "price": 150,
    },
  ];
  catalog_returns = [
    {
      "order": 2,
      "item_sk": 1,
      "refunded": 150,
    },
  ];
  item = [
    {
      "item_sk": 1,
      "item_id": "I1",
      "current_price": 1.2,
    },
  ];
  warehouse = [
    {
      "warehouse_sk": 1,
      "state": "CA",
    },
  ];
  date_dim = [
    {
      "date_sk": 1,
      "date": "2020-01-10",
    },
    {
      "date_sk": 2,
      "date": "2020-01-20",
    },
  ];
  sales_date = "2020-01-15";
  records = (() => {
    const _src = catalog_sales;
    return _query(_src, [
      {
        items: catalog_returns,
        on: (cs, cr) => ((cs.order == cr.order) && (cs.item_sk == cr.item_sk)),
        left: true,
      },
      {
        items: warehouse,
        on: (cs, cr, w) => (cs.warehouse_sk == w.warehouse_sk),
      },
      { items: item, on: (cs, cr, w, i) => (cs.item_sk == i.item_sk) },
      { items: date_dim, on: (cs, cr, w, i, d) => (cs.date_sk == d.date_sk) },
    ], {
      select: (cs, cr, w, i, d) => ({
        "w_state": w.state,
        "i_item_id": i.item_id,
        "sold_date": d.date,
        "net": (cs.price - (_equal(cr, null) ? 0 : cr.refunded)),
      }),
      where: (
        cs,
        cr,
        w,
        i,
        d,
      ) => ((i.current_price >= 0.99) && (i.current_price <= 1.49)),
    });
  })();
  result = (() => {
    const _src = records;
    const _map = new Map<string, any>();
    var _items = [];
    for (const r of _src) {
      const _key = {
        "w_state": r.w_state,
        "i_item_id": r.i_item_id,
      };
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...r, r: r });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "w_state": g.key.w_state,
        "i_item_id": g.key.i_item_id,
        "sales_before": _sum(
          g.items.map((x) => ((x.sold_date < sales_date) ? x.net : 0)),
        ),
        "sales_after": _sum(
          g.items.map((x) => ((x.sold_date >= sales_date) ? x.net : 0)),
        ),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q40_simplified();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _query(src: any[], joins: any[], opts: any): any {
  let items = src.map((v) => [v]);
  for (const j of joins) {
    const joined: any[] = [];
    if (j.right && j.left) {
      const matched: boolean[] = new Array(j.items.length).fill(false);
      for (const left of items) {
        let m = false;
        for (let ri = 0; ri < j.items.length; ri++) {
          const right = j.items[ri];
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          matched[ri] = true;
          joined.push([...left, right]);
        }
        if (!m) joined.push([...left, null]);
      }
      for (let ri = 0; ri < j.items.length; ri++) {
        if (!matched[ri]) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, j.items[ri]]);
        }
      }
    } else if (j.right) {
      for (const right of j.items) {
        let m = false;
        for (const left of items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (!m) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, right]);
        }
      }
    } else {
      for (const left of items) {
        let m = false;
        for (const right of j.items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (j.left && !m) joined.push([...left, null]);
      }
    }
    items = joined;
  }
  if (opts.where) items = items.filter((r) => opts.where(...r));
  if (opts.sortKey) {
    let pairs = items.map((it) => ({ item: it, key: opts.sortKey(...it) }));
    pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    items = pairs.map((p) => p.item);
  }
  if (opts.skip !== undefined) {
    const n = opts.skip;
    items = n < items.length ? items.slice(n) : [];
  }
  if (opts.take !== undefined) {
    const n = opts.take;
    if (n < items.length) items = items.slice(0, n);
  }
  const res = [];
  for (const r of items) res.push(opts.select(...r));
  return res;
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
