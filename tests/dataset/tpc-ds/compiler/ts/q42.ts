// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:37:16Z
// Source: tests/dataset/tpc-ds/q42.mochi

let base: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let grouped: Record<string, any>[];
let item: Record<string, any>[];
let month: number;
let records: { [key: string]: number }[];
let result: Record<string, any>[];
let store_sales: Record<string, any>[];
let year: number;

function test_TPCDS_Q42_simplified(): void {
  if (
    !(_equal(result, [
      {
        "d_year": 2020,
        "i_category_id": 200,
        "i_category": "CatB",
        "sum_ss_ext_sales_price": 20,
      },
      {
        "d_year": 2020,
        "i_category_id": 100,
        "i_category": "CatA",
        "sum_ss_ext_sales_price": 10,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "sold_date_sk": 1,
      "item_sk": 1,
      "ext_sales_price": 10,
    },
    {
      "sold_date_sk": 1,
      "item_sk": 2,
      "ext_sales_price": 20,
    },
    {
      "sold_date_sk": 2,
      "item_sk": 1,
      "ext_sales_price": 15,
    },
  ];
  item = [
    {
      "i_item_sk": 1,
      "i_manager_id": 1,
      "i_category_id": 100,
      "i_category": "CatA",
    },
    {
      "i_item_sk": 2,
      "i_manager_id": 1,
      "i_category_id": 200,
      "i_category": "CatB",
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 2020,
      "d_moy": 5,
    },
    {
      "d_date_sk": 2,
      "d_year": 2021,
      "d_moy": 5,
    },
  ];
  month = 5;
  year = 2020;
  records = (() => {
    const _src = date_dim;
    const _res = [];
    for (const dt of _src) {
      for (const ss of store_sales) {
        if (!(ss.sold_date_sk == dt.d_date_sk)) continue;
        for (const it of item) {
          if (!(ss.item_sk == it.i_item_sk)) continue;
          if (
            !(((it.i_manager_id == 1) && (dt.d_moy == month)) &&
              (dt.d_year == year))
          ) continue;
          _res.push({
            "d_year": dt.d_year,
            "i_category_id": it.i_category_id,
            "i_category": it.i_category,
            "price": ss.ext_sales_price,
          });
        }
      }
    }
    return _res;
  })();
  grouped = (() => {
    const _src = records;
    const _map = new Map<string, any>();
    var _items = [];
    for (const r of _src) {
      const _key = {
        "d_year": r.d_year,
        "i_category_id": r.i_category_id,
        "i_category": r.i_category,
      };
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...r, r: r });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "d_year": g.key.d_year,
        "i_category_id": g.key.i_category_id,
        "i_category": g.key.i_category,
        "sum_ss_ext_sales_price": _sum(g.items.map((x) => x.price)),
      });
    }
    return _res;
  })();
  base = (() => {
    const _src = grouped;
    var _items = [];
    for (const g of _src) {
      _items.push({ g: g });
    }
    let _pairs = _items.map((it) => {
      const { g } = it;
      return { item: it, key: (-g.sum_ss_ext_sales_price) };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const _it of _items) {
      const g = _it.g;
      _res.push(g);
    }
    return _res;
  })();
  result = base;
  console.log(_json(result));
  test_TPCDS_Q42_simplified();
}
function _cmp(a: any, b: any): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    return a < b
      ? -1
      : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
