// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:46:16Z
// Source: tests/dataset/tpc-ds/q79.mochi

let agg: Record<string, any>[];
let customer: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let household_demographics: { [key: string]: number }[];
let result: Record<string, any>[];
let store: Record<string, any>[];
let store_sales: Record<string, any>[];

function test_TPCDS_Q79_simplified(): void {
  if (
    !(_equal(result, [
      {
        "c_last_name": "Smith",
        "c_first_name": "Alice",
        "s_city": "CityA",
        "ss_ticket_number": 1,
        "amt": 5,
        "profit": 10,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  date_dim = [
    {
      "d_date_sk": 1,
      "d_dow": 1,
      "d_year": 1999,
    },
  ];
  store = [
    {
      "s_store_sk": 1,
      "s_city": "CityA",
      "s_number_employees": 250,
    },
  ];
  household_demographics = [
    {
      "hd_demo_sk": 1,
      "hd_dep_count": 2,
      "hd_vehicle_count": 1,
    },
  ];
  store_sales = [
    {
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_ticket_number": 1,
      "ss_customer_sk": 1,
      "ss_hdemo_sk": 1,
      "ss_coupon_amt": 5,
      "ss_net_profit": 10,
    },
  ];
  customer = [
    {
      "c_customer_sk": 1,
      "c_last_name": "Smith",
      "c_first_name": "Alice",
    },
  ];
  agg = (() => {
    const _src = store_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const ss of _src) {
      for (const d of date_dim) {
        if (!(d.d_date_sk == ss.ss_sold_date_sk)) continue;
        for (const s of store) {
          if (!(s.s_store_sk == ss.ss_store_sk)) continue;
          for (const hd of household_demographics) {
            if (!(hd.hd_demo_sk == ss.ss_hdemo_sk)) continue;
            if (
              !((((((hd.hd_dep_count == 2) || (hd.hd_vehicle_count > 1)) &&
                (d.d_dow == 1)) &&
                (((d.d_year == 1998) || (d.d_year == 1999)) ||
                  (d.d_year == 2000))) && (s.s_number_employees >= 200)) &&
                (s.s_number_employees <= 295))
            ) continue;
            const _key = {
              "ticket": ss.ss_ticket_number,
              "customer_sk": ss.ss_customer_sk,
              "city": s.s_city,
            };
            const _ks = JSON.stringify(_key);
            let _g = _map.get(_ks);
            if (!_g) {
              _g = { key: _key, items: [] };
              _map.set(_ks, _g);
            }
            _g.items.push({
              ...ss,
              ...d,
              ...s,
              ...hd,
              ss: ss,
              d: d,
              s: s,
              hd: hd,
            });
          }
        }
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "key": g.key,
        "amt": g.items.map((x) => x.ss.ss_coupon_amt).reduce(
          (a, b) => a + Number(b),
          0,
        ),
        "profit": g.items.map((x) => x.ss.ss_net_profit).reduce(
          (a, b) => a + Number(b),
          0,
        ),
      });
    }
    return _res;
  })();
  result = (() => {
    const _src = agg;
    var _items = [];
    for (const a of _src) {
      for (const c of customer) {
        if (!(c.c_customer_sk == a.key.customer_sk)) continue;
        _items.push({ a: a, c: c });
      }
    }
    let _pairs = _items.map((it) => {
      const { a, c } = it;
      return {
        item: it,
        key: [c.c_last_name, c.c_first_name, a.key.city, a.profit],
      };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const _it of _items) {
      const a = _it.a;
      const c = _it.c;
      _res.push({
        "c_last_name": c.c_last_name,
        "c_first_name": c.c_first_name,
        "s_city": a.key.city,
        "ss_ticket_number": a.key.ticket,
        "amt": a.amt,
        "profit": a.profit,
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q79_simplified();
}
function _cmp(a: unknown, b: unknown): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    const order: Record<string, number> = { store: 0, web: 1, catalog: 2 };
    if (order[a] !== undefined && order[b] !== undefined) {
      return order[a] - order[b];
    }
    return a < b ? -1 : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
