// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:53:47Z
// Source: tests/dataset/tpc-ds/q46.mochi

let base: Record<string, any>[];
let cities: string[];
let customer: Record<string, any>[];
let customer_address: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let depcnt: number;
let dn: Record<string, any>[];
let household_demographics: { [key: string]: number }[];
let result: Record<string, any>[];
let store: Record<string, any>[];
let store_sales: Record<string, any>[];
let vehcnt: number;
let year: number;

function test_TPCDS_Q46_simplified(): void {
  if (
    !(_equal(result, [
      {
        "c_last_name": "Doe",
        "c_first_name": "John",
        "ca_city": "Seattle",
        "bought_city": "Portland",
        "ss_ticket_number": 1,
        "amt": 5,
        "profit": 20,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "ss_ticket_number": 1,
      "ss_customer_sk": 1,
      "ss_addr_sk": 1,
      "ss_hdemo_sk": 1,
      "ss_store_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_coupon_amt": 5,
      "ss_net_profit": 20,
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_dow": 6,
      "d_year": 2020,
    },
  ];
  store = [
    {
      "s_store_sk": 1,
      "s_city": "CityA",
    },
  ];
  household_demographics = [
    {
      "hd_demo_sk": 1,
      "hd_dep_count": 2,
      "hd_vehicle_count": 0,
    },
  ];
  customer_address = [
    {
      "ca_address_sk": 1,
      "ca_city": "Portland",
    },
    {
      "ca_address_sk": 2,
      "ca_city": "Seattle",
    },
  ];
  customer = [
    {
      "c_customer_sk": 1,
      "c_last_name": "Doe",
      "c_first_name": "John",
      "c_current_addr_sk": 2,
    },
  ];
  depcnt = 2;
  vehcnt = 0;
  year = 2020;
  cities = ["CityA"];
  dn = (() => {
    const _src = store_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const ss of _src) {
      for (const d of date_dim) {
        if (!(ss.ss_sold_date_sk == d.d_date_sk)) continue;
        for (const s of store) {
          if (!(ss.ss_store_sk == s.s_store_sk)) continue;
          for (const hd of household_demographics) {
            if (!(ss.ss_hdemo_sk == hd.hd_demo_sk)) continue;
            for (const ca of customer_address) {
              if (!(ss.ss_addr_sk == ca.ca_address_sk)) continue;
              if (
                !(((((hd.hd_dep_count == depcnt) ||
                  (hd.hd_vehicle_count == vehcnt)) && [
                  6,
                  0,
                ].includes(d.d_dow)) && (d.d_year == year)) &&
                  cities.includes(s.s_city))
              ) continue;
              const _key = {
                "ss_ticket_number": ss.ss_ticket_number,
                "ss_customer_sk": ss.ss_customer_sk,
                "ca_city": ca.ca_city,
              };
              const _ks = JSON.stringify(_key);
              let _g = _map.get(_ks);
              if (!_g) {
                _g = { key: _key, items: [] };
                _map.set(_ks, _g);
              }
              _g.items.push({
                ...ss,
                ...d,
                ...s,
                ...hd,
                ...ca,
                ss: ss,
                d: d,
                s: s,
                hd: hd,
                ca: ca,
              });
            }
          }
        }
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "ss_ticket_number": g.key.ss_ticket_number,
        "ss_customer_sk": g.key.ss_customer_sk,
        "bought_city": g.key.ca_city,
        "amt": _sum(g.items.map((x) => x.ss.ss_coupon_amt)),
        "profit": _sum(g.items.map((x) => x.ss.ss_net_profit)),
      });
    }
    return _res;
  })();
  base = (() => {
    const _src = dn;
    var _items = [];
    for (const dnrec of _src) {
      for (const c of customer) {
        if (!(dnrec.ss_customer_sk == c.c_customer_sk)) continue;
        for (const current_addr of customer_address) {
          if (!(c.c_current_addr_sk == current_addr.ca_address_sk)) continue;
          if (!(current_addr.ca_city != dnrec.bought_city)) continue;
          _items.push({ dnrec: dnrec, c: c, current_addr: current_addr });
        }
      }
    }
    let _pairs = _items.map((it) => {
      const dnrec = it;
      return {
        item: it,
        key: [
          c.c_last_name,
          c.c_first_name,
          current_addr.ca_city,
          dnrec.bought_city,
          dnrec.ss_ticket_number,
        ],
      };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const _it of _items) {
      const dnrec = _it.dnrec;
      const c = _it.c;
      const current_addr = _it.current_addr;
      _res.push({
        "c_last_name": c.c_last_name,
        "c_first_name": c.c_first_name,
        "ca_city": current_addr.ca_city,
        "bought_city": dnrec.bought_city,
        "ss_ticket_number": dnrec.ss_ticket_number,
        "amt": dnrec.amt,
        "profit": dnrec.profit,
      });
    }
    return _res;
  })();
  result = base;
  console.log(_json(result));
  test_TPCDS_Q46_simplified();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
