// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:46:17Z
// Source: tests/dataset/tpc-ds/q95.mochi

type WebSale = {
  ws_order_number: number;
  ws_warehouse_sk: number;
  ws_ship_date_sk: number;
  ws_ship_addr_sk: number;
  ws_web_site_sk: number;
  ws_ext_ship_cost: number;
  ws_net_profit: number;
};

type WebReturn = {
  wr_order_number: number;
};

type DateDim = {
  d_date_sk: number;
  d_date: string;
};

type CustomerAddress = {
  ca_address_sk: number;
  ca_state: string;
};

type WebSite = {
  web_site_sk: number;
  web_company_name: string;
};

function distinct(xs: any[]): any[] {
  var out = [];
  for (const x of xs) {
    if ((!out.includes(x))) {
      out = [...out, x];
    }
  }
  return out;
}

let customer_address: Record<string, any>[];
let date_dim: Record<string, any>[];
let filtered: Record<string, any>[];
let result: Record<string, any>;
let web_returns: { [key: string]: number }[];
let web_sales: Record<string, any>[];
let web_site: Record<string, any>[];
let ws_wh: Record<string, any>[];

function test_TPCDS_Q95_shipping_returns(): void {
  if (
    !(_equal(result, {
      "order_count": 1,
      "total_shipping_cost": 2,
      "total_net_profit": 5,
    }))
  ) throw new Error("expect failed");
}

function main(): void {
  web_sales = [
    {
      "ws_order_number": 1,
      "ws_warehouse_sk": 1,
      "ws_ship_date_sk": 1,
      "ws_ship_addr_sk": 1,
      "ws_web_site_sk": 1,
      "ws_ext_ship_cost": 2,
      "ws_net_profit": 5,
    },
    {
      "ws_order_number": 1,
      "ws_warehouse_sk": 2,
      "ws_ship_date_sk": 1,
      "ws_ship_addr_sk": 1,
      "ws_web_site_sk": 1,
      "ws_ext_ship_cost": 0,
      "ws_net_profit": 0,
    },
  ];
  web_returns = [
    { "wr_order_number": 1 },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_date": "2001-02-01",
    },
  ];
  customer_address = [
    {
      "ca_address_sk": 1,
      "ca_state": "CA",
    },
  ];
  web_site = [
    {
      "web_site_sk": 1,
      "web_company_name": "pri",
    },
  ];
  ws_wh = (() => {
    const _src = web_sales;
    const _res = [];
    for (const ws1 of _src) {
      for (const ws2 of web_sales) {
        if (
          !((ws1.ws_order_number == ws2.ws_order_number) &&
            (ws1.ws_warehouse_sk != ws2.ws_warehouse_sk))
        ) continue;
        _res.push({ "ws_order_number": ws1.ws_order_number });
      }
    }
    return _res;
  })();
  filtered = (() => {
    const _src = web_sales;
    const _res = [];
    for (const ws of _src) {
      for (const d of date_dim) {
        if (!(ws.ws_ship_date_sk == d.d_date_sk)) continue;
        for (const ca of customer_address) {
          if (!(ws.ws_ship_addr_sk == ca.ca_address_sk)) continue;
          for (const w of web_site) {
            if (!(ws.ws_web_site_sk == w.web_site_sk)) continue;
            if (
              !((((ca.ca_state == "CA") && (w.web_company_name == "pri")) &&
                ((ws_wh.map((x) => x.ws_order_number)).includes(
                    ws.ws_order_number,
                  )
                  ? 1
                  : 0)) && ((web_returns.map((wr) =>
                      wr.wr_order_number
                    )).includes(ws.ws_order_number)
                  ? 1
                  : 0))
            ) continue;
            _res.push(ws);
          }
        }
      }
    }
    return _res;
  })();
  result = {
    "order_count": distinct(filtered.map((x) => x.ws_order_number)).length,
    "total_shipping_cost": filtered.map((x) => x.ws_ext_ship_cost).reduce(
      (a, b) => a + Number(b),
      0,
    ),
    "total_net_profit": filtered.map((x) => x.ws_net_profit).reduce(
      (a, b) => a + Number(b),
      0,
    ),
  };
  console.log(_json(result));
  test_TPCDS_Q95_shipping_returns();
}
function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
