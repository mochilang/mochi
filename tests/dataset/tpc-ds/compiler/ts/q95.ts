// Generated by Mochi TypeScript compiler

type WebSale = {
  ws_order_number: number;
  ws_warehouse_sk: number;
  ws_ship_date_sk: number;
  ws_ship_addr_sk: number;
  ws_web_site_sk: number;
  ws_ext_ship_cost: number;
  ws_net_profit: number;
};

type WebReturn = {
  wr_order_number: number;
};

type DateDim = {
  d_date_sk: number;
  d_date: string;
};

type CustomerAddress = {
  ca_address_sk: number;
  ca_state: string;
};

type WebSite = {
  web_site_sk: number;
  web_company_name: string;
};

function distinct(xs: any[]): any[] {
  var out: any[] = [];
  for (const x of xs) {
    if ((!_contains(out, x))) {
      out = _append(out, x);
    }
  }
  return out;
}

let customer_address: Record<string, any>[];
let date_dim: Record<string, any>[];
let filtered: Record<string, any>[];
let result: Record<string, any>;
let web_returns: Record<string, number>[];
let web_sales: Record<string, any>[];
let web_site: Record<string, any>[];
let ws_wh: Record<string, any>[];

function test_TPCDS_Q95_shipping_returns(): void {
  if (
    !(_equal(result, {
      "order_count": 1,
      "total_shipping_cost": 2,
      "total_net_profit": 5,
    }))
  ) throw new Error("expect failed");
}

function main(): void {
  web_sales = [
    {
      "ws_order_number": 1,
      "ws_warehouse_sk": 1,
      "ws_ship_date_sk": 1,
      "ws_ship_addr_sk": 1,
      "ws_web_site_sk": 1,
      "ws_ext_ship_cost": 2,
      "ws_net_profit": 5,
    },
    {
      "ws_order_number": 1,
      "ws_warehouse_sk": 2,
      "ws_ship_date_sk": 1,
      "ws_ship_addr_sk": 1,
      "ws_web_site_sk": 1,
      "ws_ext_ship_cost": 0,
      "ws_net_profit": 0,
    },
  ];
  web_returns = [{ "wr_order_number": 1 }];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_date": "2001-02-01",
    },
  ];
  customer_address = [
    {
      "ca_address_sk": 1,
      "ca_state": "CA",
    },
  ];
  web_site = [
    {
      "web_site_sk": 1,
      "web_company_name": "pri",
    },
  ];
  ws_wh = (() => {
    const _src = web_sales;
    const _res = [];
    for (const ws1 of _src) {
      for (const ws2 of web_sales) {
        if (
          !(_equal(ws1.ws_order_number, ws2.ws_order_number) &&
            !_equal(ws1.ws_warehouse_sk, ws2.ws_warehouse_sk))
        ) continue;
        _res.push({ "ws_order_number": ws1.ws_order_number });
      }
    }
    return _res;
  })();
  filtered = (() => {
    const _src = web_sales;
    return _query(_src, [
      {
        items: date_dim,
        on: (ws, d) => (_equal(ws.ws_ship_date_sk, d.d_date_sk)),
      },
      {
        items: customer_address,
        on: (ws, d, ca) => (_equal(ws.ws_ship_addr_sk, ca.ca_address_sk)),
      },
      {
        items: web_site,
        on: (ws, d, ca, w) => (_equal(ws.ws_web_site_sk, w.web_site_sk)),
      },
    ], {
      select: (ws, d, ca, w) => ws,
      where: (
        ws,
        d,
        ca,
        w,
      ) => (((_equal(ca.ca_state, "CA") && _equal(w.web_company_name, "pri")) &&
        (ws_wh.map((x) => x.ws_order_number)).includes(ws.ws_order_number)) &&
        (web_returns.map((wr) => wr.wr_order_number)).includes(
          ws.ws_order_number,
        )),
    });
  })();
  result = {
    "order_count": distinct(filtered.map((x) => x.ws_order_number)).length,
    "total_shipping_cost": _sum(filtered.map((x) => x.ws_ext_ship_cost)),
    "total_net_profit": _sum(filtered.map((x) => x.ws_net_profit)),
  };
  console.log(_json(result));
  test_TPCDS_Q95_shipping_returns();
}
function _append<T>(lst: T[] | null, v: T): T[] {
  const out = lst ? lst.slice() : [];
  out.push(v);
  return out;
}

function _contains(c: any, v: any): boolean {
  if (Array.isArray(c)) return c.includes(v);
  if (typeof c === "string") return c.includes(String(v));
  if (c && typeof c === "object") {
    return Object.prototype.hasOwnProperty.call(c, String(v));
  }
  return false;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

function _query(src: any[], joins: any[], opts: any): any {
  let items = src.map((v) => [v]);
  for (const j of joins) {
    const joined: any[] = [];
    if (j.right && j.left) {
      const matched: boolean[] = new Array(j.items.length).fill(false);
      for (const left of items) {
        let m = false;
        for (let ri = 0; ri < j.items.length; ri++) {
          const right = j.items[ri];
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          matched[ri] = true;
          joined.push([...left, right]);
        }
        if (!m) joined.push([...left, null]);
      }
      for (let ri = 0; ri < j.items.length; ri++) {
        if (!matched[ri]) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, j.items[ri]]);
        }
      }
    } else if (j.right) {
      for (const right of j.items) {
        let m = false;
        for (const left of items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (!m) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, right]);
        }
      }
    } else {
      for (const left of items) {
        let m = false;
        for (const right of j.items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (j.left && !m) joined.push([...left, null]);
      }
    }
    items = joined;
  }
  if (opts.where) items = items.filter((r) => opts.where(...r));
  if (opts.sortKey) {
    let pairs = items.map((it) => ({ item: it, key: opts.sortKey(...it) }));
    pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    items = pairs.map((p) => p.item);
  }
  if (opts.skip !== undefined) {
    const n = opts.skip;
    items = n < items.length ? items.slice(n) : [];
  }
  if (opts.take !== undefined) {
    const n = opts.take;
    if (n < items.length) items = items.slice(0, n);
  }
  const res = [];
  for (const r of items) res.push(opts.select(...r));
  return res;
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
