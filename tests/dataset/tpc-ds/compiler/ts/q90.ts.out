// Generated by Mochi TypeScript compiler

type WebSale = {
  ws_sold_time_sk: number;
  ws_ship_hdemo_sk: number;
  ws_web_page_sk: number;
};

let amc: number;
let household_demographics: Array<Record<string, number>>;
let pmc: number;
let result: number;
let time_dim: Array<Record<string, number>>;
let web_page: Array<Record<string, number>>;
let web_sales: Array<Record<string, number>>;

function test_TPCDS_Q90_ratio(): void {
  if (!(result == 2)) throw new Error("expect failed");
}

function main(): void {
  web_sales = [
    {
      "ws_sold_time_sk": 1,
      "ws_ship_hdemo_sk": 1,
      "ws_web_page_sk": 10,
    },
    {
      "ws_sold_time_sk": 1,
      "ws_ship_hdemo_sk": 1,
      "ws_web_page_sk": 10,
    },
    {
      "ws_sold_time_sk": 2,
      "ws_ship_hdemo_sk": 1,
      "ws_web_page_sk": 10,
    },
  ];
  household_demographics = [
    {
      "hd_demo_sk": 1,
      "hd_dep_count": 2,
    },
  ];
  time_dim = [
    {
      "t_time_sk": 1,
      "t_hour": 7,
    },
    {
      "t_time_sk": 2,
      "t_hour": 14,
    },
  ];
  web_page = [
    {
      "wp_web_page_sk": 10,
      "wp_char_count": 5100,
    },
  ];
  amc = _count((() => {
    const _src = web_sales;
    return _query(_src, [
      {
        items: household_demographics,
        on: (ws, hd) => (ws.ws_ship_hdemo_sk == hd.hd_demo_sk),
      },
      {
        items: time_dim,
        on: (ws, hd, t) => (ws.ws_sold_time_sk == t.t_time_sk),
      },
      {
        items: web_page,
        on: (ws, hd, t, wp) => (ws.ws_web_page_sk == wp.wp_web_page_sk),
      },
    ], {
      select: (ws, hd, t, wp) => ws,
      where: (
        ws,
        hd,
        t,
        wp,
      ) => (((((t.t_hour >= 7) && (t.t_hour <= 8)) && (hd.hd_dep_count == 2)) &&
        (wp.wp_char_count >= 5000)) && (wp.wp_char_count <= 5200)),
    });
  })());
  pmc = _count((() => {
    const _src = web_sales;
    return _query(_src, [
      {
        items: household_demographics,
        on: (ws, hd) => (ws.ws_ship_hdemo_sk == hd.hd_demo_sk),
      },
      {
        items: time_dim,
        on: (ws, hd, t) => (ws.ws_sold_time_sk == t.t_time_sk),
      },
      {
        items: web_page,
        on: (ws, hd, t, wp) => (ws.ws_web_page_sk == wp.wp_web_page_sk),
      },
    ], {
      select: (ws, hd, t, wp) => ws,
      where: (
        ws,
        hd,
        t,
        wp,
      ) => (((((t.t_hour >= 14) && (t.t_hour <= 15)) &&
        (hd.hd_dep_count == 2)) && (wp.wp_char_count >= 5000)) &&
        (wp.wp_char_count <= 5200)),
    });
  })());
  result = amc / pmc;
  console.log(_json(result));
  test_TPCDS_Q90_ratio();
}
function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

function _query(src: any[], joins: any[], opts: any): any {
  let items = src.map((v) => [v]);
  for (const j of joins) {
    const joined: any[] = [];
    if (j.right && j.left) {
      const matched: boolean[] = new Array(j.items.length).fill(false);
      for (const left of items) {
        let m = false;
        for (let ri = 0; ri < j.items.length; ri++) {
          const right = j.items[ri];
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          matched[ri] = true;
          joined.push([...left, right]);
        }
        if (!m) joined.push([...left, null]);
      }
      for (let ri = 0; ri < j.items.length; ri++) {
        if (!matched[ri]) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, j.items[ri]]);
        }
      }
    } else if (j.right) {
      for (const right of j.items) {
        let m = false;
        for (const left of items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (!m) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, right]);
        }
      }
    } else {
      for (const left of items) {
        let m = false;
        for (const right of j.items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (j.left && !m) joined.push([...left, null]);
      }
    }
    items = joined;
  }
  if (opts.where) items = items.filter((r) => opts.where(...r));
  if (opts.sortKey) {
    let pairs = items.map((it) => ({ item: it, key: opts.sortKey(...it) }));
    pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    items = pairs.map((p) => p.item);
  }
  if (opts.skip !== undefined) {
    const n = opts.skip;
    items = n < items.length ? items.slice(n) : [];
  }
  if (opts.take !== undefined) {
    const n = opts.take;
    if (n < items.length) items = items.slice(0, n);
  }
  const res = [];
  for (const r of items) res.push(opts.select(...r));
  return res;
}

main();
