// Generated by Mochi TypeScript compiler

let catalog_sales: Array<Record<string, any>>;
let customer_demographics: Array<Record<string, any>>;
let date_dim: Array<Record<string, number>>;
let household_demographics: Array<Record<string, any>>;
let inventory: Array<Record<string, number>>;
let item: Array<Record<string, any>>;
let result: Array<Record<string, any>>;
let warehouse: Array<Record<string, any>>;

function test_TPCDS_Q72_simplified(): void {
  if (
    !(_equal(result, [
      {
        "i_item_desc": "ItemA",
        "w_warehouse_name": "Main",
        "d_week_seq": 10,
        "no_promo": 1,
        "promo": 0,
        "total_cnt": 1,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  catalog_sales = [
    {
      "cs_item_sk": 1,
      "cs_order_number": 1,
      "cs_quantity": 1,
      "cs_sold_date_sk": 1,
      "cs_ship_date_sk": 3,
      "cs_bill_cdemo_sk": 1,
      "cs_bill_hdemo_sk": 1,
      "cs_promo_sk": null,
    },
  ];
  inventory = [
    {
      "inv_item_sk": 1,
      "inv_warehouse_sk": 1,
      "inv_date_sk": 2,
      "inv_quantity_on_hand": 0,
    },
  ];
  warehouse = [
    {
      "w_warehouse_sk": 1,
      "w_warehouse_name": "Main",
    },
  ];
  item = [
    {
      "i_item_sk": 1,
      "i_item_desc": "ItemA",
    },
  ];
  customer_demographics = [
    {
      "cd_demo_sk": 1,
      "cd_marital_status": "M",
    },
  ];
  household_demographics = [
    {
      "hd_demo_sk": 1,
      "hd_buy_potential": "5001-10000",
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_week_seq": 10,
      "d_date": 1,
      "d_year": 2000,
    },
    {
      "d_date_sk": 2,
      "d_week_seq": 10,
      "d_date": 1,
      "d_year": 2000,
    },
    {
      "d_date_sk": 3,
      "d_week_seq": 10,
      "d_date": 7,
      "d_year": 2000,
    },
  ];
  result = (() => {
    const _src = catalog_sales;
    let _items = _query(_src, [
      {
        items: inventory,
        on: (cs, inv) => (_equal(inv.inv_item_sk, cs.cs_item_sk)),
      },
      {
        items: warehouse,
        on: (cs, inv, w) => (_equal(w.w_warehouse_sk, inv.inv_warehouse_sk)),
      },
      {
        items: item,
        on: (cs, inv, w, i) => (_equal(i.i_item_sk, cs.cs_item_sk)),
      },
      {
        items: customer_demographics,
        on: (cs, inv, w, i, cd) => (_equal(cd.cd_demo_sk, cs.cs_bill_cdemo_sk)),
      },
      {
        items: household_demographics,
        on: (
          cs,
          inv,
          w,
          i,
          cd,
          hd,
        ) => (_equal(hd.hd_demo_sk, cs.cs_bill_hdemo_sk)),
      },
      {
        items: date_dim,
        on: (
          cs,
          inv,
          w,
          i,
          cd,
          hd,
          d1,
        ) => (_equal(d1.d_date_sk, cs.cs_sold_date_sk)),
      },
      {
        items: date_dim,
        on: (
          cs,
          inv,
          w,
          i,
          cd,
          hd,
          d1,
          d2,
        ) => (d2.d_date_sk == inv.inv_date_sk),
      },
      {
        items: date_dim,
        on: (
          cs,
          inv,
          w,
          i,
          cd,
          hd,
          d1,
          d2,
          d3,
        ) => (_equal(d3.d_date_sk, cs.cs_ship_date_sk)),
      },
    ], {
      select: (
        cs,
        inv,
        w,
        i,
        cd,
        hd,
        d1,
        d2,
        d3,
      ) => [cs, inv, w, i, cd, hd, d1, d2, d3],
      where: (
        cs,
        inv,
        w,
        i,
        cd,
        hd,
        d1,
        d2,
        d3,
      ) => ((((((d1.d_week_seq == d2.d_week_seq) &&
        (inv.inv_quantity_on_hand < cs.cs_quantity)) &&
        (d3.d_date > (d1.d_date + 5))) &&
        _equal(hd.hd_buy_potential, "5001-10000")) && (d1.d_year == 2000)) &&
        _equal(cd.cd_marital_status, "M")),
    });
    const _map = new Map<string, any>();
    const _order: string[] = [];
    for (const _r of _items) {
      const [cs, inv, w, i, cd, hd, d1, d2, d3] = _r;
      const _key = {
        "item_desc": i.i_item_desc,
        "warehouse": w.w_warehouse_name,
        "week_seq": d1.d_week_seq,
      };
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push({
        ...cs,
        ...inv,
        ...w,
        ...i,
        ...cd,
        ...hd,
        ...d1,
        ...d2,
        ...d3,
        cs: cs,
        inv: inv,
        w: w,
        i: i,
        cd: cd,
        hd: hd,
        d1: d1,
        d2: d2,
        d3: d3,
      });
    }
    let _itemsG = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _itemsG) {
      _res.push({
        "i_item_desc": g.key.item_desc,
        "w_warehouse_name": g.key.warehouse,
        "d_week_seq": g.key.week_seq,
        "no_promo": _count(
          g.items.filter((x) => (_equal(x.cs_promo_sk, null))).map((x) => x),
        ),
        "promo": _count(
          g.items.filter((x) => (!_equal(x.cs_promo_sk, null))).map((x) => x),
        ),
        "total_cnt": _count(g),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q72_simplified();
}
function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

function _query(src: any[], joins: any[], opts: any): any {
  let items = src.map((v) => [v]);
  for (const j of joins) {
    const joined: any[] = [];
    if (j.right && j.left) {
      const matched: boolean[] = new Array(j.items.length).fill(false);
      for (const left of items) {
        let m = false;
        for (let ri = 0; ri < j.items.length; ri++) {
          const right = j.items[ri];
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          matched[ri] = true;
          joined.push([...left, right]);
        }
        if (!m) joined.push([...left, null]);
      }
      for (let ri = 0; ri < j.items.length; ri++) {
        if (!matched[ri]) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, j.items[ri]]);
        }
      }
    } else if (j.right) {
      for (const right of j.items) {
        let m = false;
        for (const left of items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (!m) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, right]);
        }
      }
    } else {
      for (const left of items) {
        let m = false;
        for (const right of j.items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (j.left && !m) joined.push([...left, null]);
      }
    }
    items = joined;
  }
  if (opts.where) items = items.filter((r) => opts.where(...r));
  if (opts.sortKey) {
    let pairs = items.map((it) => ({ item: it, key: opts.sortKey(...it) }));
    pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    items = pairs.map((p) => p.item);
  }
  if (opts.skip !== undefined) {
    const n = opts.skip;
    items = n < items.length ? items.slice(n) : [];
  }
  if (opts.take !== undefined) {
    const n = opts.take;
    if (n < items.length) items = items.slice(0, n);
  }
  const res = [];
  for (const r of items) res.push(opts.select(...r));
  return res;
}

main();
