// Generated by Mochi TypeScript compiler

let by_mgr: Record<string, any>[];
let result: number;
let sales: Record<string, number>[];

function test_TPCDS_Q63_simplified(): void {
  if (!(result == 63)) throw new Error("expect failed");
}

function main(): void {
  sales = [
    {
      "mgr": 1,
      "amount": 30,
    },
    {
      "mgr": 2,
      "amount": 33,
    },
  ];
  by_mgr = (() => {
    const _src = sales;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const s of _src) {
      const _key = { "mgr": s.mgr };
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push({ ...s, s: s });
    }
    let _groups = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "mgr": g.key.mgr,
        "sum_sales": _sum(g.items.map((x) => x.amount)),
      });
    }
    return _res;
  })();
  result = _sum(by_mgr.map((x) => x.sum_sales));
  console.log(_json(result));
  test_TPCDS_Q63_simplified();
}
function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
