// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:53:46Z
// Source: tests/dataset/tpc-ds/q23.mochi

type StoreSale = {
  ss_item_sk: number;
  ss_sold_date_sk: number;
  ss_customer_sk: number;
  ss_quantity: number;
  ss_sales_price: number;
};

type DateDim = {
  d_date_sk: number;
  d_year: number;
  d_moy: number;
};

type Item = {
  i_item_sk: number;
};

type CatalogSale = {
  cs_sold_date_sk: number;
  cs_item_sk: number;
  cs_bill_customer_sk: number;
  cs_quantity: number;
  cs_list_price: number;
};

type WebSale = {
  ws_sold_date_sk: number;
  ws_item_sk: number;
  ws_bill_customer_sk: number;
  ws_quantity: number;
  ws_list_price: number;
};

let best_ss_customer: any[];
let catalog: any[];
let catalog_sales: Record<string, any>[];
let customer_totals: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let frequent_ss_items: number[];
let item: { [key: string]: number }[];
let max_sales: any;
let result: number;
let store_sales: Record<string, any>[];
let web: any[];
let web_sales: Record<string, any>[];

function test_TPCDS_Q23_cross_channel_sales(): void {
  if (!(result == 50)) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "ss_item_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_customer_sk": 1,
      "ss_quantity": 1,
      "ss_sales_price": 10,
    },
    {
      "ss_item_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_customer_sk": 1,
      "ss_quantity": 1,
      "ss_sales_price": 10,
    },
    {
      "ss_item_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_customer_sk": 1,
      "ss_quantity": 1,
      "ss_sales_price": 10,
    },
    {
      "ss_item_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_customer_sk": 1,
      "ss_quantity": 1,
      "ss_sales_price": 10,
    },
    {
      "ss_item_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_customer_sk": 1,
      "ss_quantity": 1,
      "ss_sales_price": 10,
    },
    {
      "ss_item_sk": 2,
      "ss_sold_date_sk": 1,
      "ss_customer_sk": 2,
      "ss_quantity": 1,
      "ss_sales_price": 10,
    },
    {
      "ss_item_sk": 2,
      "ss_sold_date_sk": 1,
      "ss_customer_sk": 2,
      "ss_quantity": 1,
      "ss_sales_price": 10,
    },
    {
      "ss_item_sk": 2,
      "ss_sold_date_sk": 1,
      "ss_customer_sk": 2,
      "ss_quantity": 1,
      "ss_sales_price": 10,
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 2000,
      "d_moy": 1,
    },
  ];
  item = [
    { "i_item_sk": 1 },
    { "i_item_sk": 2 },
  ];
  catalog_sales = [
    {
      "cs_sold_date_sk": 1,
      "cs_item_sk": 1,
      "cs_bill_customer_sk": 1,
      "cs_quantity": 2,
      "cs_list_price": 10,
    },
    {
      "cs_sold_date_sk": 1,
      "cs_item_sk": 2,
      "cs_bill_customer_sk": 2,
      "cs_quantity": 2,
      "cs_list_price": 10,
    },
  ];
  web_sales = [
    {
      "ws_sold_date_sk": 1,
      "ws_item_sk": 1,
      "ws_bill_customer_sk": 1,
      "ws_quantity": 3,
      "ws_list_price": 10,
    },
    {
      "ws_sold_date_sk": 1,
      "ws_item_sk": 2,
      "ws_bill_customer_sk": 2,
      "ws_quantity": 1,
      "ws_list_price": 10,
    },
  ];
  frequent_ss_items = (() => {
    const _src = store_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const ss of _src) {
      for (const d of date_dim) {
        if (!(ss.ss_sold_date_sk == d.d_date_sk)) continue;
        for (const i of item) {
          if (!(ss.ss_item_sk == i.i_item_sk)) continue;
          if (!(d.d_year == 2000)) continue;
          const _key = {
            "item_sk": i.i_item_sk,
            "date_sk": d.d_date_sk,
          };
          const _ks = JSON.stringify(_key);
          let _g = _map.get(_ks);
          if (!_g) {
            _g = { key: _key, items: [] };
            _map.set(_ks, _g);
          }
          _g.items.push({ ...ss, ...d, ...i, ss: ss, d: d, i: i });
        }
      }
    }
    let _groups = Array.from(_map.values());
    _groups = _groups.filter((g) => (_count(g) > 4));
    const _res = [];
    for (const g of _groups) {
      _res.push(g.key.item_sk);
    }
    return _res;
  })();
  customer_totals = (() => {
    const _src = store_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const ss of _src) {
      const _key = ss.ss_customer_sk;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...ss, ss: ss });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "cust": g.key,
        "sales": _sum(g.items.map((x) => (x.ss_quantity * x.ss_sales_price))),
      });
    }
    return _res;
  })();
  max_sales = _max(customer_totals.map((c) => c.sales));
  best_ss_customer = customer_totals.filter(
    (c) => (c.sales > (0.95 * max_sales))
  ).map((c) => c.cust);
  catalog = (() => {
    const _src = catalog_sales;
    const _res = [];
    for (const cs of _src) {
      for (const d of date_dim) {
        if (!(cs.cs_sold_date_sk == d.d_date_sk)) continue;
        if (
          !((((d.d_year == 2000) && (d.d_moy == 1)) &&
            best_ss_customer.includes(cs.cs_bill_customer_sk)) &&
            frequent_ss_items.includes(cs.cs_item_sk))
        ) continue;
        _res.push(cs.cs_quantity * cs.cs_list_price);
      }
    }
    return _res;
  })();
  web = (() => {
    const _src = web_sales;
    const _res = [];
    for (const ws of _src) {
      for (const d of date_dim) {
        if (!(ws.ws_sold_date_sk == d.d_date_sk)) continue;
        if (
          !((((d.d_year == 2000) && (d.d_moy == 1)) &&
            best_ss_customer.includes(ws.ws_bill_customer_sk)) &&
            frequent_ss_items.includes(ws.ws_item_sk))
        ) continue;
        _res.push(ws.ws_quantity * ws.ws_list_price);
      }
    }
    return _res;
  })();
  result = _sum(catalog) + _sum(web);
  console.log(_json(result));
  test_TPCDS_Q23_cross_channel_sales();
}
function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _max(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let m = Number(list[0]);
  for (const n of list) {
    const num = Number(n);
    if (num > m) m = num;
  }
  return m;
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
