// Generated by Mochi TypeScript compiler

function abs(x: number): number {
  return ((x >= 0) ? x : (-x));
}

let orderby: string;
let result: Array<Record<string, any>>;
let v2: Array<Record<string, any>>;
let year: number;

function test_TPCDS_Q47_simplified(): void {
  if (
    !(_equal(result, [
      {
        "d_year": 2019,
        "item": "C",
        "avg_monthly_sales": 50,
        "sum_sales": 60,
      },
      {
        "d_year": 2020,
        "item": "A",
        "avg_monthly_sales": 100,
        "sum_sales": 120,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  v2 = [
    {
      "d_year": 2020,
      "item": "A",
      "avg_monthly_sales": 100,
      "sum_sales": 120,
    },
    {
      "d_year": 2020,
      "item": "B",
      "avg_monthly_sales": 80,
      "sum_sales": 70,
    },
    {
      "d_year": 2019,
      "item": "C",
      "avg_monthly_sales": 50,
      "sum_sales": 60,
    },
  ];
  year = 2020;
  orderby = "item";
  result = (() => {
    const _src = v2;
    var _items = [];
    for (const v of _src) {
      if (
        !((_equal(v.d_year, year) && (v.avg_monthly_sales > 0)) &&
          ((abs(v.sum_sales - v.avg_monthly_sales) / v.avg_monthly_sales) >
            0.1))
      ) continue;
      _items.push(v);
    }
    let _pairs = _items.map((it) => {
      const v = it;
      return {
        item: it,
        key: [
          v.sum_sales - v.avg_monthly_sales,
          v.item,
        ],
      };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const v of _items) {
      _res.push(v);
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q47_simplified();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
