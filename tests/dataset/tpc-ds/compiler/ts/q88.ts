// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:46:17Z
// Source: tests/dataset/tpc-ds/q88.mochi

function count_range(
  ssales: any[],
  tdim: any[],
  hour: number,
  start_min: number,
  end_min: number,
): number {
  var total = 0;
  for (const ss of ssales) {
    for (const t of tdim) {
      if (
        ((((ss.sold_time_sk == t.time_sk) && (t.hour == hour)) &&
          (t.minute >= start_min)) && (t.minute < end_min))
      ) {
        total = total + ss.qty;
      }
    }
  }
  return total;
}

let h10_30_to_11: number;
let h10_to_10_30: number;
let h11_30_to_12: number;
let h11_to_11_30: number;
let h12_to_12_30: number;
let h8_30_to_9: number;
let h9_30_to_10: number;
let h9_to_9_30: number;
let household_demographics: { [key: string]: number }[];
let result: number;
let store: Record<string, any>[];
let store_sales: Record<string, any>[];
let time_dim: { [key: string]: number }[];

function test_TPCDS_Q88_sample(): void {
  if (!(result == 88)) throw new Error("expect failed");
}

function main(): void {
  time_dim = [
    {
      "time_sk": 1,
      "hour": 8,
      "minute": 30,
    },
    {
      "time_sk": 2,
      "hour": 9,
      "minute": 0,
    },
    {
      "time_sk": 3,
      "hour": 9,
      "minute": 30,
    },
    {
      "time_sk": 4,
      "hour": 10,
      "minute": 0,
    },
    {
      "time_sk": 5,
      "hour": 10,
      "minute": 30,
    },
    {
      "time_sk": 6,
      "hour": 11,
      "minute": 0,
    },
    {
      "time_sk": 7,
      "hour": 11,
      "minute": 30,
    },
    {
      "time_sk": 8,
      "hour": 12,
      "minute": 0,
    },
  ];
  household_demographics = [
    {
      "hd_demo_sk": 1,
      "hd_dep_count": 1,
      "hd_vehicle_count": 1,
    },
  ];
  store = [
    {
      "s_store_sk": 1,
      "s_store_name": "ese",
    },
  ];
  store_sales = [
    {
      "sold_time_sk": 1,
      "hdemo_sk": 1,
      "store_sk": 1,
      "qty": 10,
    },
    {
      "sold_time_sk": 2,
      "hdemo_sk": 1,
      "store_sk": 1,
      "qty": 12,
    },
    {
      "sold_time_sk": 3,
      "hdemo_sk": 1,
      "store_sk": 1,
      "qty": 14,
    },
    {
      "sold_time_sk": 4,
      "hdemo_sk": 1,
      "store_sk": 1,
      "qty": 11,
    },
    {
      "sold_time_sk": 5,
      "hdemo_sk": 1,
      "store_sk": 1,
      "qty": 8,
    },
    {
      "sold_time_sk": 6,
      "hdemo_sk": 1,
      "store_sk": 1,
      "qty": 9,
    },
    {
      "sold_time_sk": 7,
      "hdemo_sk": 1,
      "store_sk": 1,
      "qty": 10,
    },
    {
      "sold_time_sk": 8,
      "hdemo_sk": 1,
      "store_sk": 1,
      "qty": 14,
    },
  ];
  h8_30_to_9 = count_range(store_sales, time_dim, 8, 30, 60);
  h9_to_9_30 = count_range(store_sales, time_dim, 9, 0, 30);
  h9_30_to_10 = count_range(store_sales, time_dim, 9, 30, 60);
  h10_to_10_30 = count_range(store_sales, time_dim, 10, 0, 30);
  h10_30_to_11 = count_range(store_sales, time_dim, 10, 30, 60);
  h11_to_11_30 = count_range(store_sales, time_dim, 11, 0, 30);
  h11_30_to_12 = count_range(store_sales, time_dim, 11, 30, 60);
  h12_to_12_30 = count_range(store_sales, time_dim, 12, 0, 30);
  result =
    ((((((h8_30_to_9 + h9_to_9_30) + h9_30_to_10) + h10_to_10_30) +
      h10_30_to_11) + h11_to_11_30) + h11_30_to_12) + h12_to_12_30;
  console.log(_json(result));
  test_TPCDS_Q88_sample();
}
function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
