// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:46:12Z
// Source: tests/dataset/tpc-ds/q13.mochi

type StoreSale = {
  ss_store_sk: number;
  ss_sold_date_sk: number;
  ss_hdemo_sk: number;
  ss_cdemo_sk: number;
  ss_addr_sk: number;
  ss_sales_price: number;
  ss_net_profit: number;
  ss_quantity: number;
  ss_ext_sales_price: number;
  ss_ext_wholesale_cost: number;
};

type Store = {
  s_store_sk: number;
  s_state: string;
};

type CustomerDemographics = {
  cd_demo_sk: number;
  cd_marital_status: string;
  cd_education_status: string;
};

type HouseholdDemographics = {
  hd_demo_sk: number;
  hd_dep_count: number;
};

type CustomerAddress = {
  ca_address_sk: number;
  ca_country: string;
  ca_state: string;
};

type DateDim = {
  d_date_sk: number;
  d_year: number;
};

let customer_address: Record<string, any>[];
let customer_demographics: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let filtered: Record<string, any>[];
let household_demographics: { [key: string]: number }[];
let result: { [key: string]: number }[];
let store: Record<string, any>[];
let store_sales: Record<string, any>[];

function test_TPCDS_Q13_averages(): void {
  if (
    !(_equal(result, [
      {
        "avg_ss_quantity": 10,
        "avg_ss_ext_sales_price": 100,
        "avg_ss_ext_wholesale_cost": 50,
        "sum_ss_ext_wholesale_cost": 50,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "ss_store_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_hdemo_sk": 1,
      "ss_cdemo_sk": 1,
      "ss_addr_sk": 1,
      "ss_sales_price": 120,
      "ss_net_profit": 150,
      "ss_quantity": 10,
      "ss_ext_sales_price": 100,
      "ss_ext_wholesale_cost": 50,
    },
  ];
  store = [
    {
      "s_store_sk": 1,
      "s_state": "CA",
    },
  ];
  customer_demographics = [
    {
      "cd_demo_sk": 1,
      "cd_marital_status": "M1",
      "cd_education_status": "ES1",
    },
  ];
  household_demographics = [
    {
      "hd_demo_sk": 1,
      "hd_dep_count": 3,
    },
  ];
  customer_address = [
    {
      "ca_address_sk": 1,
      "ca_country": "United States",
      "ca_state": "CA",
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 2001,
    },
  ];
  filtered = (() => {
    const _src = store_sales;
    const _res = [];
    for (const ss of _src) {
      for (const s of store) {
        if (!(ss.ss_store_sk == s.s_store_sk)) continue;
        for (const cd of customer_demographics) {
          if (
            !(((ss.ss_cdemo_sk == cd.cd_demo_sk) &&
              (cd.cd_marital_status == "M1")) &&
              (cd.cd_education_status == "ES1"))
          ) continue;
          for (const hd of household_demographics) {
            if (
              !((ss.ss_hdemo_sk == hd.hd_demo_sk) && (hd.hd_dep_count == 3))
            ) continue;
            for (const ca of customer_address) {
              if (
                !(((ss.ss_addr_sk == ca.ca_address_sk) &&
                  (ca.ca_country == "United States")) && (ca.ca_state == "CA"))
              ) continue;
              for (const d of date_dim) {
                if (
                  !((ss.ss_sold_date_sk == d.d_date_sk) && (d.d_year == 2001))
                ) continue;
                _res.push(ss);
              }
            }
          }
        }
      }
    }
    return _res;
  })();
  result = (() => {
    const _src = filtered;
    const _map = new Map<string, any>();
    var _items = [];
    for (const r of _src) {
      const _key = {};
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...r, r: r });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "avg_ss_quantity": (g.items.map((x) =>
          x.ss_quantity
        ).reduce((a, b) => a + Number(b), 0) / g.items.map((x) =>
          x.ss_quantity
        ).length),
        "avg_ss_ext_sales_price": (g.items.map((x) =>
          x.ss_ext_sales_price
        ).reduce((a, b) => a + Number(b), 0) / g.items.map((x) =>
          x.ss_ext_sales_price
        ).length),
        "avg_ss_ext_wholesale_cost": (g.items.map((x) =>
          x.ss_ext_wholesale_cost
        ).reduce((a, b) => a + Number(b), 0) / g.items.map((x) =>
          x.ss_ext_wholesale_cost
        ).length),
        "sum_ss_ext_wholesale_cost": g.items.map((x) => x.ss_ext_wholesale_cost)
          .reduce((a, b) => a + Number(b), 0),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q13_averages();
}
function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
