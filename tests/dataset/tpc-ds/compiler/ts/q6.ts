// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:46:12Z
// Source: tests/dataset/tpc-ds/q6.mochi

let customer: { [key: string]: number }[];
let customer_address: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let item: Record<string, any>[];
let result: Record<string, any>[];
let store_sales: { [key: string]: number }[];
let target_month_seq: any;

function test_TPCDS_Q6_result(): void {
  if (
    !(_equal(result, [
      {
        "state": "CA",
        "cnt": 10,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  customer_address = [
    {
      "ca_address_sk": 1,
      "ca_state": "CA",
      "ca_zip": "12345",
    },
  ];
  customer = [
    {
      "c_customer_sk": 1,
      "c_current_addr_sk": 1,
    },
  ];
  store_sales = [
    {
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_item_sk": 1,
    },
    {
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_item_sk": 1,
    },
    {
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_item_sk": 1,
    },
    {
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_item_sk": 1,
    },
    {
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_item_sk": 1,
    },
    {
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_item_sk": 1,
    },
    {
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_item_sk": 1,
    },
    {
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_item_sk": 1,
    },
    {
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_item_sk": 1,
    },
    {
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_item_sk": 1,
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 1999,
      "d_moy": 5,
      "d_month_seq": 120,
    },
  ];
  item = [
    {
      "i_item_sk": 1,
      "i_category": "A",
      "i_current_price": 100,
    },
    {
      "i_item_sk": 2,
      "i_category": "A",
      "i_current_price": 50,
    },
  ];
  target_month_seq = Math.max(
    ...date_dim.filter((d) => ((d.d_year == 1999) && (d.d_moy == 5))).map((d) =>
      d.d_month_seq
    ),
  );
  result = (() => {
    const _src = customer_address;
    const _map = new Map<string, any>();
    var _items = [];
    for (const a of _src) {
      for (const c of customer) {
        if (!(a.ca_address_sk == c.c_current_addr_sk)) continue;
        for (const s of store_sales) {
          if (!(c.c_customer_sk == s.ss_customer_sk)) continue;
          for (const d of date_dim) {
            if (!(s.ss_sold_date_sk == d.d_date_sk)) continue;
            for (const i of item) {
              if (!(s.ss_item_sk == i.i_item_sk)) continue;
              if (
                !((d.d_month_seq == target_month_seq) &&
                  (i.i_current_price >
                    (1.2 *
                      (item.filter((j) => (j.i_category == i.i_category)).map(
                        (j) => j.i_current_price
                      ).reduce((a, b) => a + Number(b), 0) /
                        item.filter((j) => (j.i_category == i.i_category)).map(
                          (j) => j.i_current_price
                        ).length))))
              ) continue;
              const _key = a.ca_state;
              const _ks = JSON.stringify(_key);
              let _g = _map.get(_ks);
              if (!_g) {
                _g = { key: _key, items: [] };
                _map.set(_ks, _g);
              }
              _g.items.push({
                ...a,
                ...c,
                ...s,
                ...d,
                ...i,
                a: a,
                c: c,
                s: s,
                d: d,
                i: i,
              });
            }
          }
        }
      }
    }
    let _groups = Array.from(_map.values());
    _groups = _groups.filter((g) => (g.items.length >= 10));
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return { item: it, key: [g.items.length, g.key] };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    {
      const _n = 100;
      if (_n < _items.length) _items = _items.slice(0, _n);
    }
    const _res = [];
    for (const g of _items) {
      _res.push({
        "state": g.key,
        "cnt": g.items.length,
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q6_result();
}
function _cmp(a: unknown, b: unknown): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    const order: Record<string, number> = { store: 0, web: 1, catalog: 2 };
    if (order[a] !== undefined && order[b] !== undefined) {
      return order[a] - order[b];
    }
    return a < b ? -1 : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
