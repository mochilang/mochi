// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:37:20Z
// Source: tests/dataset/tpc-ds/q99.mochi

type CatalogSale = {
  cs_ship_date_sk: number;
  cs_sold_date_sk: number;
  cs_warehouse_sk: number;
  cs_ship_mode_sk: number;
  cs_call_center_sk: number;
};

type Warehouse = {
  w_warehouse_sk: number;
  w_warehouse_name: string;
};

type ShipMode = {
  sm_ship_mode_sk: number;
  sm_type: string;
};

type CallCenter = {
  cc_call_center_sk: number;
  cc_name: string;
};

let call_center: Record<string, any>[];
let catalog_sales: { [key: string]: number }[];
let grouped: Record<string, any>[];
let ship_mode: Record<string, any>[];
let warehouse: Record<string, any>[];

function test_TPCDS_Q99_buckets(): void {
  if (
    !(_equal(grouped, [
      {
        "warehouse": "Warehouse1",
        "sm_type": "EXP",
        "cc_name": "CC1",
        "d30": 1,
        "d60": 1,
        "d90": 1,
        "d120": 1,
        "dmore": 1,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  catalog_sales = [
    {
      "cs_ship_date_sk": 31,
      "cs_sold_date_sk": 1,
      "cs_warehouse_sk": 1,
      "cs_ship_mode_sk": 1,
      "cs_call_center_sk": 1,
    },
    {
      "cs_ship_date_sk": 51,
      "cs_sold_date_sk": 1,
      "cs_warehouse_sk": 1,
      "cs_ship_mode_sk": 1,
      "cs_call_center_sk": 1,
    },
    {
      "cs_ship_date_sk": 71,
      "cs_sold_date_sk": 1,
      "cs_warehouse_sk": 1,
      "cs_ship_mode_sk": 1,
      "cs_call_center_sk": 1,
    },
    {
      "cs_ship_date_sk": 101,
      "cs_sold_date_sk": 1,
      "cs_warehouse_sk": 1,
      "cs_ship_mode_sk": 1,
      "cs_call_center_sk": 1,
    },
    {
      "cs_ship_date_sk": 131,
      "cs_sold_date_sk": 1,
      "cs_warehouse_sk": 1,
      "cs_ship_mode_sk": 1,
      "cs_call_center_sk": 1,
    },
  ];
  warehouse = [
    {
      "w_warehouse_sk": 1,
      "w_warehouse_name": "Warehouse1",
    },
  ];
  ship_mode = [
    {
      "sm_ship_mode_sk": 1,
      "sm_type": "EXP",
    },
  ];
  call_center = [
    {
      "cc_call_center_sk": 1,
      "cc_name": "CC1",
    },
  ];
  grouped = (() => {
    const _src = catalog_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const cs of _src) {
      for (const w of warehouse) {
        if (!(cs.cs_warehouse_sk == w.w_warehouse_sk)) continue;
        for (const sm of ship_mode) {
          if (!(cs.cs_ship_mode_sk == sm.sm_ship_mode_sk)) continue;
          for (const cc of call_center) {
            if (!(cs.cs_call_center_sk == cc.cc_call_center_sk)) continue;
            const _key = {
              "warehouse": w.w_warehouse_name.substring(0, (0) + (20)),
              "sm_type": sm.sm_type,
              "cc_name": cc.cc_name,
            };
            const _ks = JSON.stringify(_key);
            let _g = _map.get(_ks);
            if (!_g) {
              _g = { key: _key, items: [] };
              _map.set(_ks, _g);
            }
            _g.items.push({
              ...cs,
              ...w,
              ...sm,
              ...cc,
              cs: cs,
              w: w,
              sm: sm,
              cc: cc,
            });
          }
        }
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "warehouse": g.key.warehouse,
        "sm_type": g.key.sm_type,
        "cc_name": g.key.cc_name,
        "d30": _count(
          g.items.filter((x) => ((x.cs_ship_date_sk - x.cs_sold_date_sk) <= 30))
            .map((x) => x),
        ),
        "d60": _count(
          g.items.filter(
            (x) => (((x.cs_ship_date_sk - x.cs_sold_date_sk) > 30) &&
              ((x.cs_ship_date_sk - x.cs_sold_date_sk) <= 60))
          ).map((x) => x),
        ),
        "d90": _count(
          g.items.filter(
            (x) => (((x.cs_ship_date_sk - x.cs_sold_date_sk) > 60) &&
              ((x.cs_ship_date_sk - x.cs_sold_date_sk) <= 90))
          ).map((x) => x),
        ),
        "d120": _count(
          g.items.filter(
            (x) => (((x.cs_ship_date_sk - x.cs_sold_date_sk) > 90) &&
              ((x.cs_ship_date_sk - x.cs_sold_date_sk) <= 120))
          ).map((x) => x),
        ),
        "dmore": _count(
          g.items.filter((x) => ((x.cs_ship_date_sk - x.cs_sold_date_sk) > 120))
            .map((x) => x),
        ),
      });
    }
    return _res;
  })();
  console.log(_json(grouped));
  test_TPCDS_Q99_buckets();
}
function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

main();
