// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:53:46Z
// Source: tests/dataset/tpc-ds/q38.mochi

function distinct(xs: any[]): any[] {
  var out = [];
  for (const x of xs) {
    if ((!_contains(out, x))) {
      out = [...out, x];
    }
  }
  return out;
}

let catalog_ids: any[];
let catalog_sales: { [key: string]: number }[];
let customer: Record<string, any>[];
let hot: any[];
let result: number;
let store_ids: any[];
let store_sales: { [key: string]: number }[];
let web_ids: any[];
let web_sales: { [key: string]: number }[];

function test_TPCDS_Q38_simplified(): void {
  if (!(result == 1)) throw new Error("expect failed");
}

function main(): void {
  customer = [
    {
      "c_customer_sk": 1,
      "c_last_name": "Smith",
      "c_first_name": "John",
    },
    {
      "c_customer_sk": 2,
      "c_last_name": "Jones",
      "c_first_name": "Alice",
    },
  ];
  store_sales = [
    {
      "ss_customer_sk": 1,
      "d_month_seq": 1200,
    },
    {
      "ss_customer_sk": 2,
      "d_month_seq": 1205,
    },
  ];
  catalog_sales = [
    {
      "cs_bill_customer_sk": 1,
      "d_month_seq": 1203,
    },
  ];
  web_sales = [
    {
      "ws_bill_customer_sk": 1,
      "d_month_seq": 1206,
    },
  ];
  store_ids = distinct(
    store_sales.filter(
      (s) => ((s.d_month_seq >= 1200) && (s.d_month_seq <= 1211))
    ).map((s) => s.ss_customer_sk),
  );
  catalog_ids = distinct(
    catalog_sales.filter(
      (c) => ((c.d_month_seq >= 1200) && (c.d_month_seq <= 1211))
    ).map((c) => c.cs_bill_customer_sk),
  );
  web_ids = distinct(
    web_sales.filter(
      (w) => ((w.d_month_seq >= 1200) && (w.d_month_seq <= 1211))
    ).map((w) => w.ws_bill_customer_sk),
  );
  hot = store_ids.filter((v) => catalog_ids.includes(v)).filter((v) =>
    web_ids.includes(v)
  );
  result = hot.length;
  console.log(_json(result));
  test_TPCDS_Q38_simplified();
}
function _contains(c: any, v: any): boolean {
  if (Array.isArray(c)) return c.includes(v);
  if (typeof c === "string") return c.includes(String(v));
  if (c && typeof c === "object") {
    return Object.prototype.hasOwnProperty.call(c, String(v));
  }
  return false;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

main();
