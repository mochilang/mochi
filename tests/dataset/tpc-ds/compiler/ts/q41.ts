// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:46:14Z
// Source: tests/dataset/tpc-ds/q41.mochi

let item: Record<string, any>[];
let lower: number;
let result: any[];

function test_TPCDS_Q41_simplified(): void {
  if (!(_equal(result, ["Blue Shirt", "Red Dress"]))) {
    throw new Error("expect failed");
  }
}

function main(): void {
  item = [
    {
      "product_name": "Blue Shirt",
      "manufact_id": 100,
      "manufact": 1,
      "category": "Women",
      "color": "blue",
      "units": "pack",
      "size": "M",
    },
    {
      "product_name": "Red Dress",
      "manufact_id": 120,
      "manufact": 1,
      "category": "Women",
      "color": "red",
      "units": "pack",
      "size": "M",
    },
    {
      "product_name": "Pants",
      "manufact_id": 200,
      "manufact": 2,
      "category": "Men",
      "color": "black",
      "units": "pair",
      "size": "L",
    },
  ];
  lower = 100;
  result = (() => {
    const _src = item;
    var _items = [];
    for (const i1 of _src) {
      if (
        !(((i1.manufact_id >= lower) && (i1.manufact_id <= (lower + 40))) &&
          (item.filter(
            (i2) => ((i2.manufact == i1.manufact) &&
              (i2.category == i1.category))
          ).map((i2) => i2).length > 1))
      ) continue;
      _items.push({ i1: i1 });
    }
    let _pairs = _items.map((it) => {
      const { i1 } = it;
      return { item: it, key: i1.product_name };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const _it of _items) {
      const i1 = _it.i1;
      _res.push(i1.product_name);
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q41_simplified();
}
function _cmp(a: unknown, b: unknown): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    const order: Record<string, number> = { store: 0, web: 1, catalog: 2 };
    if (order[a] !== undefined && order[b] !== undefined) {
      return order[a] - order[b];
    }
    return a < b ? -1 : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
