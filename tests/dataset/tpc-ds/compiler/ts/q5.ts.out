// Generated by Mochi TypeScript compiler

let catalog_page: Array<any>;
let catalog_returns: Array<any>;
let catalog_sales: Array<any>;
let cr: Array<Record<string, any>>;
let cs: Array<Record<string, any>>;
let date_dim: Array<any>;
let per_channel: Array<any>;
let result: Array<Record<string, any>>;
let sr: Array<Record<string, any>>;
let ss: Array<Record<string, any>>;
let store: Array<any>;
let store_returns: Array<any>;
let store_sales: Array<any>;
let web_returns: Array<any>;
let web_sales: Array<any>;
let web_site: Array<any>;
let wr: Array<Record<string, any>>;
let ws: Array<Record<string, any>>;

function test_TPCDS_Q5_empty(): void {
  if (!(result.length == 0)) throw new Error("expect failed");
}

function main(): void {
  store_sales = [];
  store_returns = [];
  store = [];
  catalog_sales = [];
  catalog_returns = [];
  catalog_page = [];
  web_sales = [];
  web_returns = [];
  web_site = [];
  date_dim = [];
  ss = (() => {
    const _src = store_sales;
    let _items = _query(_src, [
      {
        items: date_dim,
        on: (ss, d) => (_equal(ss.ss_sold_date_sk, d.d_date_sk)),
      },
      {
        items: store,
        on: (ss, d, s) => (_equal(ss.ss_store_sk, s.s_store_sk)),
      },
    ], {
      select: (ss, d, s) => [ss, d, s],
      where: (
        ss,
        d,
        s,
      ) => ((d.d_date >= "1998-12-01") && (d.d_date <= "1998-12-15")),
    });
    const _map = new Map<string, any>();
    const _order: string[] = [];
    for (const _r of _items) {
      const [ss, d, s] = _r;
      const _key = s.s_store_id;
      const _ks = String(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push(ss);
    }
    let _itemsG = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _itemsG) {
      _res.push({
        "channel": "store channel",
        "id": "store" + String(g.key),
        "sales": _sum(g.items.map((x) => x.ss.ss_ext_sales_price)),
        "returns": 0,
        "profit": _sum(g.items.map((x) => x.ss.ss_net_profit)),
        "profit_loss": 0,
      });
    }
    return _res;
  })();
  sr = (() => {
    const _src = store_returns;
    let _items = _query(_src, [
      {
        items: date_dim,
        on: (sr, d) => (_equal(sr.sr_returned_date_sk, d.d_date_sk)),
      },
      {
        items: store,
        on: (sr, d, s) => (_equal(sr.sr_store_sk, s.s_store_sk)),
      },
    ], {
      select: (sr, d, s) => [sr, d, s],
      where: (
        sr,
        d,
        s,
      ) => ((d.d_date >= "1998-12-01") && (d.d_date <= "1998-12-15")),
    });
    const _map = new Map<string, any>();
    const _order: string[] = [];
    for (const _r of _items) {
      const [sr, d, s] = _r;
      const _key = s.s_store_id;
      const _ks = String(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push(sr);
    }
    let _itemsG = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _itemsG) {
      _res.push({
        "channel": "store channel",
        "id": "store" + String(g.key),
        "sales": 0,
        "returns": _sum(g.items.map((x) => x.sr.sr_return_amt)),
        "profit": 0,
        "profit_loss": _sum(g.items.map((x) => x.sr.sr_net_loss)),
      });
    }
    return _res;
  })();
  cs = (() => {
    const _src = catalog_sales;
    let _items = _query(_src, [
      {
        items: date_dim,
        on: (cs, d) => (_equal(cs.cs_sold_date_sk, d.d_date_sk)),
      },
      {
        items: catalog_page,
        on: (
          cs,
          d,
          cp,
        ) => (_equal(cs.cs_catalog_page_sk, cp.cp_catalog_page_sk)),
      },
    ], {
      select: (cs, d, cp) => [cs, d, cp],
      where: (
        cs,
        d,
        cp,
      ) => ((d.d_date >= "1998-12-01") && (d.d_date <= "1998-12-15")),
    });
    const _map = new Map<string, any>();
    const _order: string[] = [];
    for (const _r of _items) {
      const [cs, d, cp] = _r;
      const _key = cp.cp_catalog_page_id;
      const _ks = String(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push(cs);
    }
    let _itemsG = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _itemsG) {
      _res.push({
        "channel": "catalog channel",
        "id": "catalog_page" + String(g.key),
        "sales": _sum(g.items.map((x) => x.cs.cs_ext_sales_price)),
        "returns": 0,
        "profit": _sum(g.items.map((x) => x.cs.cs_net_profit)),
        "profit_loss": 0,
      });
    }
    return _res;
  })();
  cr = (() => {
    const _src = catalog_returns;
    let _items = _query(_src, [
      {
        items: date_dim,
        on: (cr, d) => (_equal(cr.cr_returned_date_sk, d.d_date_sk)),
      },
      {
        items: catalog_page,
        on: (
          cr,
          d,
          cp,
        ) => (_equal(cr.cr_catalog_page_sk, cp.cp_catalog_page_sk)),
      },
    ], {
      select: (cr, d, cp) => [cr, d, cp],
      where: (
        cr,
        d,
        cp,
      ) => ((d.d_date >= "1998-12-01") && (d.d_date <= "1998-12-15")),
    });
    const _map = new Map<string, any>();
    const _order: string[] = [];
    for (const _r of _items) {
      const [cr, d, cp] = _r;
      const _key = cp.cp_catalog_page_id;
      const _ks = String(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push(cr);
    }
    let _itemsG = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _itemsG) {
      _res.push({
        "channel": "catalog channel",
        "id": "catalog_page" + String(g.key),
        "sales": 0,
        "returns": _sum(g.items.map((x) => x.cr.cr_return_amount)),
        "profit": 0,
        "profit_loss": _sum(g.items.map((x) => x.cr.cr_net_loss)),
      });
    }
    return _res;
  })();
  ws = (() => {
    const _src = web_sales;
    let _items = _query(_src, [
      {
        items: date_dim,
        on: (ws, d) => (_equal(ws.ws_sold_date_sk, d.d_date_sk)),
      },
      {
        items: web_site,
        on: (ws, d, w) => (_equal(ws.ws_web_site_sk, w.web_site_sk)),
      },
    ], {
      select: (ws, d, w) => [ws, d, w],
      where: (
        ws,
        d,
        w,
      ) => ((d.d_date >= "1998-12-01") && (d.d_date <= "1998-12-15")),
    });
    const _map = new Map<string, any>();
    const _order: string[] = [];
    for (const _r of _items) {
      const [ws, d, w] = _r;
      const _key = w.web_site_id;
      const _ks = String(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push(ws);
    }
    let _itemsG = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _itemsG) {
      _res.push({
        "channel": "web channel",
        "id": "web_site" + String(g.key),
        "sales": _sum(g.items.map((x) => x.ws.ws_ext_sales_price)),
        "returns": 0,
        "profit": _sum(g.items.map((x) => x.ws.ws_net_profit)),
        "profit_loss": 0,
      });
    }
    return _res;
  })();
  wr = (() => {
    const _src = web_returns;
    let _items = _query(_src, [
      {
        items: web_sales,
        on: (
          wr,
          ws,
        ) => (_equal(wr.wr_item_sk, ws.ws_item_sk) &&
          _equal(wr.wr_order_number, ws.ws_order_number)),
      },
      {
        items: date_dim,
        on: (wr, ws, d) => (_equal(wr.wr_returned_date_sk, d.d_date_sk)),
      },
      {
        items: web_site,
        on: (wr, ws, d, w) => (_equal(ws.ws_web_site_sk, w.web_site_sk)),
      },
    ], {
      select: (wr, ws, d, w) => [wr, ws, d, w],
      where: (
        wr,
        ws,
        d,
        w,
      ) => ((d.d_date >= "1998-12-01") && (d.d_date <= "1998-12-15")),
    });
    const _map = new Map<string, any>();
    const _order: string[] = [];
    for (const _r of _items) {
      const [wr, ws, d, w] = _r;
      const _key = w.web_site_id;
      const _ks = String(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push(wr);
    }
    let _itemsG = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _itemsG) {
      _res.push({
        "channel": "web channel",
        "id": "web_site" + String(g.key),
        "sales": 0,
        "returns": _sum(g.items.map((x) => x.wr.wr_return_amt)),
        "profit": 0,
        "profit_loss": _sum(g.items.map((x) => x.wr.wr_net_loss)),
      });
    }
    return _res;
  })();
  per_channel = [].concat(
    _union_all(ss, sr),
    _union_all(cs, cr),
    _union_all(ws, wr),
  );
  result = (() => {
    const _src = per_channel;
    const _map = new Map<string, any>();
    const _order: string[] = [];
    var _items = [];
    for (const p of _src) {
      const _key = {
        "channel": p.channel,
        "id": p.id,
      };
      const _ks = String(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push(p);
    }
    let _groups = _order.map((k) => _map.get(k)!);
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return { item: it, key: g.key.channel };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "channel": g.key.channel,
        "id": g.key.id,
        "sales": _sum(g.items.map((x) => x.p.sales)),
        "returns": _sum(g.items.map((x) => x.p.returns)),
        "profit": (_sum(g.items.map((x) =>
          x.p.profit
        )) - _sum(g.items.map((x) => x.p.profit_loss))),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q5_empty();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

function _query(src: any[], joins: any[], opts: any): any {
  let items = src.map((v) => [v]);
  for (const j of joins) {
    const joined: any[] = [];
    if (j.right && j.left) {
      const matched: boolean[] = new Array(j.items.length).fill(false);
      for (const left of items) {
        let m = false;
        for (let ri = 0; ri < j.items.length; ri++) {
          const right = j.items[ri];
          let keep = true;
          if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          matched[ri] = true;
          joined.push([...left, right]);
        }
        if (!m) joined.push([...left, undefined]);
      }
      for (let ri = 0; ri < j.items.length; ri++) {
        if (!matched[ri]) {
          const undef = Array(items[0]?.length || 0).fill(undefined);
          joined.push([...undef, j.items[ri]]);
        }
      }
    } else if (j.right) {
      for (const right of j.items) {
        let m = false;
        for (const left of items) {
          let keep = true;
          if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (!m) {
          const undef = Array(items[0]?.length || 0).fill(undefined);
          joined.push([...undef, right]);
        }
      }
    } else {
      for (const left of items) {
        let m = false;
        for (const right of j.items) {
          let keep = true;
          if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (j.left && !m) joined.push([...left, undefined]);
      }
    }
    items = joined;
  }
  if (opts.where) items = items.filter((r) => opts.where(...r));
  if (opts.sortKey) {
    let pairs = items.map((it) => ({ item: it, key: opts.sortKey(...it) }));
    pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    items = pairs.map((p) => p.item);
  }
  if (opts.skip !== undefined) {
    const n = opts.skip;
    items = n < items.length ? items.slice(n) : [];
  }
  if (opts.take !== undefined) {
    const n = opts.take;
    if (n < items.length) items = items.slice(0, n);
  }
  const res = [];
  for (const r of items) res.push(opts.select(...r));
  return res;
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

function _union_all(a: any[], b: any[]): any[] {
  return a.concat(b);
}

main();
