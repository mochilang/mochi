// Generated by Mochi TypeScript compiler

let customer: Record<string, any>[];
let date_dim: Record<string, number>[];
let dn: Record<string, any>[];
let household_demographics: Record<string, any>[];
let result: Record<string, any>[];
let store: Record<string, any>[];
let store_sales: Record<string, number>[];

function test_TPCDS_Q34_simplified(): void {
  if (
    !(_equal(result, [
      {
        "c_last_name": "Smith",
        "c_first_name": "John",
        "c_salutation": "Mr.",
        "c_preferred_cust_flag": "Y",
        "ss_ticket_number": 1,
        "cnt": 16,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "ss_ticket_number": 1,
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 1,
    },
    {
      "ss_ticket_number": 1,
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 1,
    },
    {
      "ss_ticket_number": 1,
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 1,
    },
    {
      "ss_ticket_number": 1,
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 1,
    },
    {
      "ss_ticket_number": 1,
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 1,
    },
    {
      "ss_ticket_number": 1,
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 1,
    },
    {
      "ss_ticket_number": 1,
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 1,
    },
    {
      "ss_ticket_number": 1,
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 1,
    },
    {
      "ss_ticket_number": 1,
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 1,
    },
    {
      "ss_ticket_number": 1,
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 1,
    },
    {
      "ss_ticket_number": 1,
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 1,
    },
    {
      "ss_ticket_number": 1,
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 1,
    },
    {
      "ss_ticket_number": 1,
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 1,
    },
    {
      "ss_ticket_number": 1,
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 1,
    },
    {
      "ss_ticket_number": 1,
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 1,
    },
    {
      "ss_ticket_number": 1,
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 1,
    },
    {
      "ss_ticket_number": 2,
      "ss_customer_sk": 2,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 2,
    },
    {
      "ss_ticket_number": 2,
      "ss_customer_sk": 2,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 2,
    },
    {
      "ss_ticket_number": 2,
      "ss_customer_sk": 2,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 2,
    },
    {
      "ss_ticket_number": 2,
      "ss_customer_sk": 2,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 2,
    },
    {
      "ss_ticket_number": 2,
      "ss_customer_sk": 2,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 2,
    },
    {
      "ss_ticket_number": 2,
      "ss_customer_sk": 2,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 2,
    },
    {
      "ss_ticket_number": 2,
      "ss_customer_sk": 2,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 2,
    },
    {
      "ss_ticket_number": 2,
      "ss_customer_sk": 2,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 2,
    },
    {
      "ss_ticket_number": 2,
      "ss_customer_sk": 2,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 2,
    },
    {
      "ss_ticket_number": 2,
      "ss_customer_sk": 2,
      "ss_sold_date_sk": 1,
      "ss_store_sk": 1,
      "ss_hdemo_sk": 2,
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_dom": 2,
      "d_year": 2000,
    },
  ];
  store = [
    {
      "s_store_sk": 1,
      "s_county": "A",
    },
  ];
  household_demographics = [
    {
      "hd_demo_sk": 1,
      "hd_buy_potential": ">10000",
      "hd_vehicle_count": 2,
      "hd_dep_count": 3,
    },
    {
      "hd_demo_sk": 2,
      "hd_buy_potential": ">10000",
      "hd_vehicle_count": 2,
      "hd_dep_count": 1,
    },
  ];
  customer = [
    {
      "c_customer_sk": 1,
      "c_last_name": "Smith",
      "c_first_name": "John",
      "c_salutation": "Mr.",
      "c_preferred_cust_flag": "Y",
    },
    {
      "c_customer_sk": 2,
      "c_last_name": "Jones",
      "c_first_name": "Alice",
      "c_salutation": "Ms.",
      "c_preferred_cust_flag": "N",
    },
  ];
  dn = (() => {
    const _src = store_sales;
    let _items = _query(_src, [
      { items: date_dim, on: (ss, d) => (ss.ss_sold_date_sk == d.d_date_sk) },
      {
        items: store,
        on: (ss, d, s) => (_equal(ss.ss_store_sk, s.s_store_sk)),
      },
      {
        items: household_demographics,
        on: (ss, d, s, hd) => (_equal(ss.ss_hdemo_sk, hd.hd_demo_sk)),
      },
    ], {
      select: (ss, d, s, hd) => [ss, d, s, hd],
      where: (
        ss,
        d,
        s,
        hd,
      ) => (((((((d.d_dom >= 1) && (d.d_dom <= 3)) &&
        _equal(hd.hd_buy_potential, ">10000")) && (hd.hd_vehicle_count > 0)) &&
        ((hd.hd_dep_count / hd.hd_vehicle_count) > 1.2)) &&
        (d.d_year == 2000)) && _equal(s.s_county, "A")),
    });
    const _map = new Map<string, any>();
    const _order: string[] = [];
    for (const _r of _items) {
      const [ss, d, s, hd] = _r;
      const _key = {
        "ticket": ss.ss_ticket_number,
        "cust": ss.ss_customer_sk,
      };
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push({ ...ss, ...d, ...s, ...hd, ss: ss, d: d, s: s, hd: hd });
    }
    let _itemsG = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _itemsG) {
      _res.push({
        "ss_ticket_number": g.key.ticket,
        "ss_customer_sk": g.key.cust,
        "cnt": _count(g),
      });
    }
    return _res;
  })();
  result = (() => {
    const _src = dn;
    return _query(_src, [
      {
        items: customer,
        on: (dn1, c) => (_equal(dn1.ss_customer_sk, c.c_customer_sk)),
      },
    ], {
      select: (dn1, c) => ({
        "c_last_name": c.c_last_name,
        "c_first_name": c.c_first_name,
        "c_salutation": c.c_salutation,
        "c_preferred_cust_flag": c.c_preferred_cust_flag,
        "ss_ticket_number": dn1.ss_ticket_number,
        "cnt": dn1.cnt,
      }),
      where: (dn1, c) => ((dn1.cnt >= 15) && (dn1.cnt <= 20)),
      sortKey: (dn1, c) => (c.c_last_name),
    });
  })();
  console.log(_json(result));
  test_TPCDS_Q34_simplified();
}
function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

function _query(src: any[], joins: any[], opts: any): any {
  let items = src.map((v) => [v]);
  for (const j of joins) {
    const joined: any[] = [];
    if (j.right && j.left) {
      const matched: boolean[] = new Array(j.items.length).fill(false);
      for (const left of items) {
        let m = false;
        for (let ri = 0; ri < j.items.length; ri++) {
          const right = j.items[ri];
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          matched[ri] = true;
          joined.push([...left, right]);
        }
        if (!m) joined.push([...left, null]);
      }
      for (let ri = 0; ri < j.items.length; ri++) {
        if (!matched[ri]) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, j.items[ri]]);
        }
      }
    } else if (j.right) {
      for (const right of j.items) {
        let m = false;
        for (const left of items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (!m) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, right]);
        }
      }
    } else {
      for (const left of items) {
        let m = false;
        for (const right of j.items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (j.left && !m) joined.push([...left, null]);
      }
    }
    items = joined;
  }
  if (opts.where) items = items.filter((r) => opts.where(...r));
  if (opts.sortKey) {
    let pairs = items.map((it) => ({ item: it, key: opts.sortKey(...it) }));
    pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    items = pairs.map((p) => p.item);
  }
  if (opts.skip !== undefined) {
    const n = opts.skip;
    items = n < items.length ? items.slice(n) : [];
  }
  if (opts.take !== undefined) {
    const n = opts.take;
    if (n < items.length) items = items.slice(0, n);
  }
  const res = [];
  for (const r of items) res.push(opts.select(...r));
  return res;
}

main();
