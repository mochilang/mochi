// Generated by Mochi TypeScript compiler

type CatalogSale = {
  cs_order_number: number;
  cs_ship_date_sk: number;
  cs_ship_addr_sk: number;
  cs_call_center_sk: number;
  cs_warehouse_sk: number;
  cs_ext_ship_cost: number;
  cs_net_profit: number;
};

type DateDim = {
  d_date_sk: number;
  d_date: string;
};

type CustomerAddress = {
  ca_address_sk: number;
  ca_state: string;
};

type CallCenter = {
  cc_call_center_sk: number;
  cc_county: string;
};

type CatalogReturn = {
  cr_order_number: number;
};

function distinct(xs: any[]): any[] {
  var out: any[] = [];
  for (const x of xs) {
    if ((!_contains(out, x))) {
      out = _append(out, x);
    }
  }
  return out;
}

let call_center: Record<string, any>[];
let catalog_returns: any[];
let catalog_sales: Record<string, any>[];
let customer_address: Record<string, any>[];
let date_dim: Record<string, any>[];
let filtered: Record<string, any>[];

function test_TPCDS_Q16_shipping(): void {
  if (
    !(_equal(filtered, [
      {
        "order_count": 1,
        "total_shipping_cost": 5,
        "total_net_profit": 20,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  catalog_sales = [
    {
      "cs_order_number": 1,
      "cs_ship_date_sk": 1,
      "cs_ship_addr_sk": 1,
      "cs_call_center_sk": 1,
      "cs_warehouse_sk": 1,
      "cs_ext_ship_cost": 5,
      "cs_net_profit": 20,
    },
    {
      "cs_order_number": 1,
      "cs_ship_date_sk": 1,
      "cs_ship_addr_sk": 1,
      "cs_call_center_sk": 1,
      "cs_warehouse_sk": 2,
      "cs_ext_ship_cost": 0,
      "cs_net_profit": 0,
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_date": "2000-03-01",
    },
  ];
  customer_address = [
    {
      "ca_address_sk": 1,
      "ca_state": "CA",
    },
  ];
  call_center = [
    {
      "cc_call_center_sk": 1,
      "cc_county": "CountyA",
    },
  ];
  catalog_returns = [];
  filtered = (() => {
    const _src = catalog_sales;
    let _items = _query(_src, [
      {
        items: date_dim,
        on: (
          cs1,
          d,
        ) => ((_equal(cs1.cs_ship_date_sk, d.d_date_sk) &&
          (d.d_date >= "2000-03-01")) && (d.d_date <= "2000-04-30")),
      },
      {
        items: customer_address,
        on: (
          cs1,
          d,
          ca,
        ) => (_equal(cs1.cs_ship_addr_sk, ca.ca_address_sk) &&
          _equal(ca.ca_state, "CA")),
      },
      {
        items: call_center,
        on: (
          cs1,
          d,
          ca,
          cc,
        ) => (_equal(cs1.cs_call_center_sk, cc.cc_call_center_sk) &&
          _equal(cc.cc_county, "CountyA")),
      },
    ], {
      select: (cs1, d, ca, cc) => [cs1, d, ca, cc],
      where: (
        cs1,
        d,
        ca,
        cc,
      ) => (_exists(
        catalog_sales.filter(
          (cs2) => (_equal(cs1.cs_order_number, cs2.cs_order_number) &&
            !_equal(cs1.cs_warehouse_sk, cs2.cs_warehouse_sk))
        ).map((cs2) => cs2),
      ) &&
        (_exists(
          catalog_returns.filter(
            (cr) => (_equal(cs1.cs_order_number, cr.cr_order_number))
          ).map((cr) => cr),
        ) == false)),
    });
    const _map = new Map<string, any>();
    const _order: string[] = [];
    for (const _r of _items) {
      const [cs1, d, ca, cc] = _r;
      const _key = {};
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
        _order.push(_ks);
      }
      _g.items.push({
        ...cs1,
        ...d,
        ...ca,
        ...cc,
        cs1: cs1,
        d: d,
        ca: ca,
        cc: cc,
      });
    }
    let _itemsG = _order.map((k) => _map.get(k)!);
    const _res = [];
    for (const g of _itemsG) {
      _res.push({
        "order_count": distinct(g.items.map((x) => x.cs_order_number)).length,
        "total_shipping_cost": _sum(g.items.map((x) => x.cs_ext_ship_cost)),
        "total_net_profit": _sum(g.items.map((x) => x.cs_net_profit)),
      });
    }
    return _res;
  })();
  console.log(_json(filtered));
  test_TPCDS_Q16_shipping();
}
function _append<T>(lst: T[] | null, v: T): T[] {
  const out = lst ? lst.slice() : [];
  out.push(v);
  return out;
}

function _contains(c: any, v: any): boolean {
  if (Array.isArray(c)) return c.includes(v);
  if (typeof c === "string") return c.includes(String(v));
  if (c && typeof c === "object") {
    return Object.prototype.hasOwnProperty.call(c, String(v));
  }
  return false;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _exists(v: any): boolean {
  if (Array.isArray(v)) return v.length > 0;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length > 0;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length > 0;
    return Object.keys(v).length > 0;
  }
  if (typeof v === "string") return v.length > 0;
  return false;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

function _query(src: any[], joins: any[], opts: any): any {
  let items = src.map((v) => [v]);
  for (const j of joins) {
    const joined: any[] = [];
    if (j.right && j.left) {
      const matched: boolean[] = new Array(j.items.length).fill(false);
      for (const left of items) {
        let m = false;
        for (let ri = 0; ri < j.items.length; ri++) {
          const right = j.items[ri];
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          matched[ri] = true;
          joined.push([...left, right]);
        }
        if (!m) joined.push([...left, null]);
      }
      for (let ri = 0; ri < j.items.length; ri++) {
        if (!matched[ri]) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, j.items[ri]]);
        }
      }
    } else if (j.right) {
      for (const right of j.items) {
        let m = false;
        for (const left of items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (!m) {
          const undef = Array(items[0]?.length || 0).fill(null);
          joined.push([...undef, right]);
        }
      }
    } else {
      for (const left of items) {
        let m = false;
        for (const right of j.items) {
          let keep = true;
          if (left.some((v: any) => v === null) || right === null) {
            keep = false;
          } else if (j.on) keep = j.on(...left, right);
          if (!keep) continue;
          m = true;
          joined.push([...left, right]);
        }
        if (j.left && !m) joined.push([...left, null]);
      }
    }
    items = joined;
  }
  if (opts.where) items = items.filter((r) => opts.where(...r));
  if (opts.sortKey) {
    let pairs = items.map((it) => ({ item: it, key: opts.sortKey(...it) }));
    pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    items = pairs.map((p) => p.item);
  }
  if (opts.skip !== undefined) {
    const n = opts.skip;
    items = n < items.length ? items.slice(n) : [];
  }
  if (opts.take !== undefined) {
    const n = opts.take;
    if (n < items.length) items = items.slice(0, n);
  }
  const res = [];
  for (const r of items) res.push(opts.select(...r));
  return res;
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
