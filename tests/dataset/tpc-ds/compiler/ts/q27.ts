// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:53:46Z
// Source: tests/dataset/tpc-ds/q27.mochi

type StoreSale = {
  ss_item_sk: number;
  ss_store_sk: number;
  ss_cdemo_sk: number;
  ss_sold_date_sk: number;
  ss_quantity: number;
  ss_list_price: number;
  ss_coupon_amt: number;
  ss_sales_price: number;
};

type CustomerDemo = {
  cd_demo_sk: number;
  cd_gender: string;
  cd_marital_status: string;
  cd_education_status: string;
};

type DateDim = {
  d_date_sk: number;
  d_year: number;
};

type Store = {
  s_store_sk: number;
  s_state: string;
};

type Item = {
  i_item_sk: number;
  i_item_id: string;
};

let customer_demographics: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let item: Record<string, any>[];
let result: Record<string, any>[];
let store: Record<string, any>[];
let store_sales: Record<string, any>[];

function test_TPCDS_Q27_averages_by_state(): void {
  if (
    !(_equal(result, [
      {
        "i_item_id": "ITEM1",
        "s_state": "CA",
        "agg1": 5,
        "agg2": 100,
        "agg3": 10,
        "agg4": 90,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "ss_item_sk": 1,
      "ss_store_sk": 1,
      "ss_cdemo_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_quantity": 5,
      "ss_list_price": 100,
      "ss_coupon_amt": 10,
      "ss_sales_price": 90,
    },
    {
      "ss_item_sk": 2,
      "ss_store_sk": 2,
      "ss_cdemo_sk": 2,
      "ss_sold_date_sk": 1,
      "ss_quantity": 2,
      "ss_list_price": 50,
      "ss_coupon_amt": 5,
      "ss_sales_price": 45,
    },
  ];
  customer_demographics = [
    {
      "cd_demo_sk": 1,
      "cd_gender": "F",
      "cd_marital_status": "M",
      "cd_education_status": "College",
    },
    {
      "cd_demo_sk": 2,
      "cd_gender": "M",
      "cd_marital_status": "S",
      "cd_education_status": "College",
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 2000,
    },
  ];
  store = [
    {
      "s_store_sk": 1,
      "s_state": "CA",
    },
    {
      "s_store_sk": 2,
      "s_state": "TX",
    },
  ];
  item = [
    {
      "i_item_sk": 1,
      "i_item_id": "ITEM1",
    },
    {
      "i_item_sk": 2,
      "i_item_id": "ITEM2",
    },
  ];
  result = (() => {
    const _src = store_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const ss of _src) {
      for (const cd of customer_demographics) {
        if (!(ss.ss_cdemo_sk == cd.cd_demo_sk)) continue;
        for (const d of date_dim) {
          if (!(ss.ss_sold_date_sk == d.d_date_sk)) continue;
          for (const s of store) {
            if (!(ss.ss_store_sk == s.s_store_sk)) continue;
            for (const i of item) {
              if (!(ss.ss_item_sk == i.i_item_sk)) continue;
              if (
                !(((((cd.cd_gender == "F") && (cd.cd_marital_status == "M")) &&
                  (cd.cd_education_status == "College")) &&
                  (d.d_year == 2000)) && ["CA"].includes(s.s_state))
              ) continue;
              const _key = {
                "item_id": i.i_item_id,
                "state": s.s_state,
              };
              const _ks = JSON.stringify(_key);
              let _g = _map.get(_ks);
              if (!_g) {
                _g = { key: _key, items: [] };
                _map.set(_ks, _g);
              }
              _g.items.push({
                ...ss,
                ...cd,
                ...d,
                ...s,
                ...i,
                ss: ss,
                cd: cd,
                d: d,
                s: s,
                i: i,
              });
            }
          }
        }
      }
    }
    let _groups = Array.from(_map.values());
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return {
        item: it,
        key: [
          g.key.item_id,
          g.key.state,
        ],
      };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "i_item_id": g.key.item_id,
        "s_state": g.key.state,
        "agg1": _avg(g.items.map((x) => x.ss_quantity)),
        "agg2": _avg(g.items.map((x) => x.ss_list_price)),
        "agg3": _avg(g.items.map((x) => x.ss_coupon_amt)),
        "agg4": _avg(g.items.map((x) => x.ss_sales_price)),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q27_averages_by_state();
}
function _avg(v: any): number {
  const c = _count(v);
  return c ? _sum(v) / c : 0;
}

function _count(v: any): number {
  if (Array.isArray(v)) return v.length;
  if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) return (v as any).items.length;
    if (Array.isArray((v as any).Items)) return (v as any).Items.length;
  }
  return 0;
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
