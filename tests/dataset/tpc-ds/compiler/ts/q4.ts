// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:37:12Z
// Source: tests/dataset/tpc-ds/q4.mochi

let catalog_sales: Record<string, any>[];
let customer: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let result: Record<string, any>[];
let store_sales: Record<string, any>[];
let web_sales: Record<string, any>[];
let year_total: Record<string, any>[];

function test_TPCDS_Q4_result(): void {
  if (
    !(_equal(result, [
      {
        "customer_id": "C1",
        "customer_first_name": "Alice",
        "customer_last_name": "A",
        "customer_login": "alice",
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  customer = [
    {
      "c_customer_sk": 1,
      "c_customer_id": "C1",
      "c_first_name": "Alice",
      "c_last_name": "A",
      "c_login": "alice",
    },
  ];
  store_sales = [
    {
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_ext_list_price": 10,
      "ss_ext_wholesale_cost": 5,
      "ss_ext_discount_amt": 0,
      "ss_ext_sales_price": 10,
    },
    {
      "ss_customer_sk": 1,
      "ss_sold_date_sk": 2,
      "ss_ext_list_price": 20,
      "ss_ext_wholesale_cost": 5,
      "ss_ext_discount_amt": 0,
      "ss_ext_sales_price": 20,
    },
  ];
  catalog_sales = [
    {
      "cs_bill_customer_sk": 1,
      "cs_sold_date_sk": 1,
      "cs_ext_list_price": 10,
      "cs_ext_wholesale_cost": 2,
      "cs_ext_discount_amt": 0,
      "cs_ext_sales_price": 10,
    },
    {
      "cs_bill_customer_sk": 1,
      "cs_sold_date_sk": 2,
      "cs_ext_list_price": 30,
      "cs_ext_wholesale_cost": 2,
      "cs_ext_discount_amt": 0,
      "cs_ext_sales_price": 30,
    },
  ];
  web_sales = [
    {
      "ws_bill_customer_sk": 1,
      "ws_sold_date_sk": 1,
      "ws_ext_list_price": 10,
      "ws_ext_wholesale_cost": 5,
      "ws_ext_discount_amt": 0,
      "ws_ext_sales_price": 10,
    },
    {
      "ws_bill_customer_sk": 1,
      "ws_sold_date_sk": 2,
      "ws_ext_list_price": 12,
      "ws_ext_wholesale_cost": 5,
      "ws_ext_discount_amt": 0,
      "ws_ext_sales_price": 12,
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 2001,
    },
    {
      "d_date_sk": 2,
      "d_year": 2002,
    },
  ];
  year_total = ((() => {
    const _src = customer;
    const _map = new Map<string, any>();
    var _items = [];
    for (const c of _src) {
      for (const s of store_sales) {
        if (!(c.c_customer_sk == s.ss_customer_sk)) continue;
        for (const d of date_dim) {
          if (!(s.ss_sold_date_sk == d.d_date_sk)) continue;
          const _key = {
            "id": c.c_customer_id,
            "first": c.c_first_name,
            "last": c.c_last_name,
            "login": c.c_login,
            "year": d.d_year,
          };
          const _ks = JSON.stringify(_key);
          let _g = _map.get(_ks);
          if (!_g) {
            _g = { key: _key, items: [] };
            _map.set(_ks, _g);
          }
          _g.items.push({ ...c, ...s, ...d, c: c, s: s, d: d });
        }
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "customer_id": g.key.id,
        "customer_first_name": g.key.first,
        "customer_last_name": g.key.last,
        "customer_login": g.key.login,
        "dyear": g.key.year,
        "year_total": _sum(
          g.items.map((x) =>
            Math.trunc(
              (((x.ss_ext_list_price - x.ss_ext_wholesale_cost) -
                x.ss_ext_discount_amt) + x.ss_ext_sales_price) / 2,
            )
          ),
        ),
        "sale_type": "s",
      });
    }
    return _res;
  })()).concat((() => {
    const _src = customer;
    const _map = new Map<string, any>();
    var _items = [];
    for (const c of _src) {
      for (const cs of catalog_sales) {
        if (!(c.c_customer_sk == cs.cs_bill_customer_sk)) continue;
        for (const d of date_dim) {
          if (!(cs.cs_sold_date_sk == d.d_date_sk)) continue;
          const _key = {
            "id": c.c_customer_id,
            "first": c.c_first_name,
            "last": c.c_last_name,
            "login": c.c_login,
            "year": d.d_year,
          };
          const _ks = JSON.stringify(_key);
          let _g = _map.get(_ks);
          if (!_g) {
            _g = { key: _key, items: [] };
            _map.set(_ks, _g);
          }
          _g.items.push({ ...c, ...cs, ...d, c: c, cs: cs, d: d });
        }
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "customer_id": g.key.id,
        "customer_first_name": g.key.first,
        "customer_last_name": g.key.last,
        "customer_login": g.key.login,
        "dyear": g.key.year,
        "year_total": _sum(
          g.items.map((x) =>
            Math.trunc(
              (((x.cs_ext_list_price - x.cs_ext_wholesale_cost) -
                x.cs_ext_discount_amt) + x.cs_ext_sales_price) / 2,
            )
          ),
        ),
        "sale_type": "c",
      });
    }
    return _res;
  })()).concat((() => {
    const _src = customer;
    const _map = new Map<string, any>();
    var _items = [];
    for (const c of _src) {
      for (const ws of web_sales) {
        if (!(c.c_customer_sk == ws.ws_bill_customer_sk)) continue;
        for (const d of date_dim) {
          if (!(ws.ws_sold_date_sk == d.d_date_sk)) continue;
          const _key = {
            "id": c.c_customer_id,
            "first": c.c_first_name,
            "last": c.c_last_name,
            "login": c.c_login,
            "year": d.d_year,
          };
          const _ks = JSON.stringify(_key);
          let _g = _map.get(_ks);
          if (!_g) {
            _g = { key: _key, items: [] };
            _map.set(_ks, _g);
          }
          _g.items.push({ ...c, ...ws, ...d, c: c, ws: ws, d: d });
        }
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "customer_id": g.key.id,
        "customer_first_name": g.key.first,
        "customer_last_name": g.key.last,
        "customer_login": g.key.login,
        "dyear": g.key.year,
        "year_total": _sum(
          g.items.map((x) =>
            Math.trunc(
              (((x.ws_ext_list_price - x.ws_ext_wholesale_cost) -
                x.ws_ext_discount_amt) + x.ws_ext_sales_price) / 2,
            )
          ),
        ),
        "sale_type": "w",
      });
    }
    return _res;
  })());
  result = (() => {
    const _src = year_total;
    var _items = [];
    for (const s1 of _src) {
      for (const s2 of year_total) {
        if (!(s2.customer_id == s1.customer_id)) continue;
        for (const c1 of year_total) {
          if (!(c1.customer_id == s1.customer_id)) continue;
          for (const c2 of year_total) {
            if (!(c2.customer_id == s1.customer_id)) continue;
            for (const w1 of year_total) {
              if (!(w1.customer_id == s1.customer_id)) continue;
              for (const w2 of year_total) {
                if (!(w2.customer_id == s1.customer_id)) continue;
                if (
                  !(((((((((((((((((s1.sale_type == "s") &&
                    (c1.sale_type == "c")) && (w1.sale_type == "w")) &&
                    (s2.sale_type == "s")) && (c2.sale_type == "c")) &&
                    (w2.sale_type == "w")) && (s1.dyear == 2001)) &&
                    (s2.dyear == 2002)) && (c1.dyear == 2001)) &&
                    (c2.dyear == 2002)) && (w1.dyear == 2001)) &&
                    (w2.dyear == 2002)) && (s1.year_total > 0)) &&
                    (c1.year_total > 0)) && (w1.year_total > 0)) &&
                    (((c1.year_total > 0)
                      ? (c2.year_total / c1.year_total)
                      : null) > ((s1.year_total > 0)
                        ? (s2.year_total / s1.year_total)
                        : null))) && (((c1.year_total > 0)
                        ? (c2.year_total / c1.year_total)
                        : null) > ((w1.year_total > 0)
                        ? (w2.year_total / w1.year_total)
                        : null)))
                ) continue;
                _items.push({ s1: s1, s2: s2, c1: c1, c2: c2, w1: w1, w2: w2 });
              }
            }
          }
        }
      }
    }
    let _pairs = _items.map((it) => {
      const { s1, s2, c1, c2, w1, w2 } = it;
      return {
        item: it,
        key: [
          s2.customer_id,
          s2.customer_first_name,
          s2.customer_last_name,
          s2.customer_login,
        ],
      };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const _it of _items) {
      const s1 = _it.s1;
      const s2 = _it.s2;
      const c1 = _it.c1;
      const c2 = _it.c2;
      const w1 = _it.w1;
      const w2 = _it.w2;
      _res.push({
        "customer_id": s2.customer_id,
        "customer_first_name": s2.customer_first_name,
        "customer_last_name": s2.customer_last_name,
        "customer_login": s2.customer_login,
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q4_result();
}
function _cmp(a: any, b: any): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    return a < b
      ? -1
      : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
