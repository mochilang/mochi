// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:53:47Z
// Source: tests/dataset/tpc-ds/q48.mochi

let customer_address: Record<string, any>[];
let customer_demographics: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let qty: any[];
let qty_base: any[];
let result: number;
let states1: string[];
let states2: string[];
let states3: string[];
let store: { [key: string]: number }[];
let store_sales: Record<string, any>[];
let year: number;

function test_TPCDS_Q48_simplified(): void {
  if (!(result == 35)) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "cdemo_sk": 1,
      "addr_sk": 1,
      "sold_date_sk": 1,
      "sales_price": 120,
      "net_profit": 1000,
      "quantity": 5,
    },
    {
      "cdemo_sk": 2,
      "addr_sk": 2,
      "sold_date_sk": 1,
      "sales_price": 60,
      "net_profit": 2000,
      "quantity": 10,
    },
    {
      "cdemo_sk": 3,
      "addr_sk": 3,
      "sold_date_sk": 1,
      "sales_price": 170,
      "net_profit": 10000,
      "quantity": 20,
    },
  ];
  store = [{ "s_store_sk": 1 }];
  customer_demographics = [
    {
      "cd_demo_sk": 1,
      "cd_marital_status": "S",
      "cd_education_status": "E1",
    },
    {
      "cd_demo_sk": 2,
      "cd_marital_status": "M",
      "cd_education_status": "E2",
    },
    {
      "cd_demo_sk": 3,
      "cd_marital_status": "W",
      "cd_education_status": "E3",
    },
  ];
  customer_address = [
    {
      "ca_address_sk": 1,
      "ca_country": "United States",
      "ca_state": "TX",
    },
    {
      "ca_address_sk": 2,
      "ca_country": "United States",
      "ca_state": "CA",
    },
    {
      "ca_address_sk": 3,
      "ca_country": "United States",
      "ca_state": "NY",
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_year": 2000,
    },
  ];
  year = 2000;
  states1 = ["TX"];
  states2 = ["CA"];
  states3 = ["NY"];
  qty_base = (() => {
    const _src = store_sales;
    const _res = [];
    for (const ss of _src) {
      for (const cd of customer_demographics) {
        if (!(ss.cdemo_sk == cd.cd_demo_sk)) continue;
        for (const ca of customer_address) {
          if (!(ss.addr_sk == ca.ca_address_sk)) continue;
          for (const d of date_dim) {
            if (!(ss.sold_date_sk == d.d_date_sk)) continue;
            if (
              !(((d.d_year == year) &&
                ((((((cd.cd_marital_status == "S") &&
                  (cd.cd_education_status == "E1")) &&
                  (ss.sales_price >= 100)) && (ss.sales_price <= 150)) ||
                  ((((cd.cd_marital_status == "M") &&
                    (cd.cd_education_status == "E2")) &&
                    (ss.sales_price >= 50)) && (ss.sales_price <= 100))) ||
                  ((((cd.cd_marital_status == "W") &&
                    (cd.cd_education_status == "E3")) &&
                    (ss.sales_price >= 150)) && (ss.sales_price <= 200)))) &&
                ((((states1.includes(ca.ca_state) && (ss.net_profit >= 0)) &&
                  (ss.net_profit <= 2000)) ||
                  ((states2.includes(ca.ca_state) && (ss.net_profit >= 150)) &&
                    (ss.net_profit <= 3000))) ||
                  ((states3.includes(ca.ca_state) && (ss.net_profit >= 50)) &&
                    (ss.net_profit <= 25000))))
            ) continue;
            _res.push(ss.quantity);
          }
        }
      }
    }
    return _res;
  })();
  qty = qty_base;
  result = _sum(qty);
  console.log(_json(result));
  test_TPCDS_Q48_simplified();
}
function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
