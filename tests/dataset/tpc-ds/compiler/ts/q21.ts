// Generated by Mochi compiler v0.10.25 on 2025-07-15T04:53:45Z
// Source: tests/dataset/tpc-ds/q21.mochi

type Inventory = {
  inv_item_sk: number;
  inv_warehouse_sk: number;
  inv_date_sk: number;
  inv_quantity_on_hand: number;
};

type Warehouse = {
  w_warehouse_sk: number;
  w_warehouse_name: string;
};

type Item = {
  i_item_sk: number;
  i_item_id: string;
};

type DateDim = {
  d_date_sk: number;
  d_date: string;
};

let after: Record<string, any>[];
let before: Record<string, any>[];
let date_dim: Record<string, any>[];
let inventory: { [key: string]: number }[];
let item: Record<string, any>[];
let joined: Record<string, any>[];
let result: Record<string, any>[];
let warehouse: Record<string, any>[];

function test_TPCDS_Q21_inventory_ratio(): void {
  if (
    !(_equal(result, [
      {
        "w_warehouse_name": "Backup",
        "i_item_id": "ITEM2",
        "inv_before": 20,
        "inv_after": 20,
      },
      {
        "w_warehouse_name": "Main",
        "i_item_id": "ITEM1",
        "inv_before": 30,
        "inv_after": 40,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  inventory = [
    {
      "inv_item_sk": 1,
      "inv_warehouse_sk": 1,
      "inv_date_sk": 1,
      "inv_quantity_on_hand": 30,
    },
    {
      "inv_item_sk": 1,
      "inv_warehouse_sk": 1,
      "inv_date_sk": 2,
      "inv_quantity_on_hand": 40,
    },
    {
      "inv_item_sk": 2,
      "inv_warehouse_sk": 2,
      "inv_date_sk": 1,
      "inv_quantity_on_hand": 20,
    },
    {
      "inv_item_sk": 2,
      "inv_warehouse_sk": 2,
      "inv_date_sk": 2,
      "inv_quantity_on_hand": 20,
    },
  ];
  warehouse = [
    {
      "w_warehouse_sk": 1,
      "w_warehouse_name": "Main",
    },
    {
      "w_warehouse_sk": 2,
      "w_warehouse_name": "Backup",
    },
  ];
  item = [
    {
      "i_item_sk": 1,
      "i_item_id": "ITEM1",
    },
    {
      "i_item_sk": 2,
      "i_item_id": "ITEM2",
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_date": "2000-03-01",
    },
    {
      "d_date_sk": 2,
      "d_date": "2000-03-20",
    },
  ];
  before = (() => {
    const _src = inventory;
    const _map = new Map<string, any>();
    var _items = [];
    for (const inv of _src) {
      for (const d of date_dim) {
        if (!(inv.inv_date_sk == d.d_date_sk)) continue;
        if (!(d.d_date < "2000-03-15")) continue;
        const _key = {
          "w": inv.inv_warehouse_sk,
          "i": inv.inv_item_sk,
        };
        const _ks = JSON.stringify(_key);
        let _g = _map.get(_ks);
        if (!_g) {
          _g = { key: _key, items: [] };
          _map.set(_ks, _g);
        }
        _g.items.push({ ...inv, ...d, inv: inv, d: d });
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "w": g.key.w,
        "i": g.key.i,
        "qty": _sum(g.items.map((x) => x.inv_quantity_on_hand)),
      });
    }
    return _res;
  })();
  after = (() => {
    const _src = inventory;
    const _map = new Map<string, any>();
    var _items = [];
    for (const inv of _src) {
      for (const d of date_dim) {
        if (!(inv.inv_date_sk == d.d_date_sk)) continue;
        if (!(d.d_date >= "2000-03-15")) continue;
        const _key = {
          "w": inv.inv_warehouse_sk,
          "i": inv.inv_item_sk,
        };
        const _ks = JSON.stringify(_key);
        let _g = _map.get(_ks);
        if (!_g) {
          _g = { key: _key, items: [] };
          _map.set(_ks, _g);
        }
        _g.items.push({ ...inv, ...d, inv: inv, d: d });
      }
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "w": g.key.w,
        "i": g.key.i,
        "qty": _sum(g.items.map((x) => x.inv_quantity_on_hand)),
      });
    }
    return _res;
  })();
  joined = (() => {
    const _src = before;
    const _res = [];
    for (const b of _src) {
      for (const a of after) {
        if (!((b.w == a.w) && (b.i == a.i))) continue;
        for (const w of warehouse) {
          if (!(w.w_warehouse_sk == b.w)) continue;
          for (const it of item) {
            if (!(it.i_item_sk == b.i)) continue;
            _res.push({
              "w_name": w.w_warehouse_name,
              "i_id": it.i_item_id,
              "before_qty": b.qty,
              "after_qty": a.qty,
              "ratio": (a.qty / b.qty),
            });
          }
        }
      }
    }
    return _res;
  })();
  result = (() => {
    const _src = joined;
    var _items = [];
    for (const r of _src) {
      if (!((r.ratio >= (2 / 3)) && (r.ratio <= (3 / 2)))) continue;
      _items.push({ r: r });
    }
    let _pairs = _items.map((it) => {
      const r = it;
      return {
        item: it,
        key: [
          r.w_name,
          r.i_id,
        ],
      };
    });
    _pairs.sort((a, b) => {
      const ak = a.key;
      const bk = b.key;
      if (typeof ak === "number" && typeof bk === "number") return ak - bk;
      if (typeof ak === "string" && typeof bk === "string") {
        return ak < bk
          ? -1
          : (ak > bk ? 1 : 0);
      }
      return String(ak) < String(bk) ? -1 : (String(ak) > String(bk) ? 1 : 0);
    });
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const _it of _items) {
      const r = _it.r;
      _res.push({
        "w_warehouse_name": r.w_name,
        "i_item_id": r.i_id,
        "inv_before": r.before_qty,
        "inv_after": r.after_qty,
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q21_inventory_ratio();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
