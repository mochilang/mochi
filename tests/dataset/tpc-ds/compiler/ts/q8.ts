// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:37:13Z
// Source: tests/dataset/tpc-ds/q8.mochi

let customer: Record<string, any>[];
let customer_address: Record<string, any>[];
let date_dim: { [key: string]: number }[];
let result: Record<string, any>[];
let store: Record<string, any>[];
let store_sales: Record<string, any>[];
let zip_list: string[];

function test_TPCDS_Q8_result(): void {
  if (
    !(_equal(result, [
      {
        "s_store_name": "Store1",
        "net_profit": 10,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "ss_store_sk": 1,
      "ss_sold_date_sk": 1,
      "ss_net_profit": 10,
    },
  ];
  date_dim = [
    {
      "d_date_sk": 1,
      "d_qoy": 1,
      "d_year": 1998,
    },
  ];
  store = [
    {
      "s_store_sk": 1,
      "s_store_name": "Store1",
      "s_zip": "12345",
    },
  ];
  customer_address = [
    {
      "ca_address_sk": 1,
      "ca_zip": "12345",
    },
  ];
  customer = [
    {
      "c_customer_sk": 1,
      "c_current_addr_sk": 1,
      "c_preferred_cust_flag": "Y",
    },
  ];
  "zi".split("").reverse().join("");
  zip_list = ["12345"];
  result = (() => {
    const _src = store_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const ss of _src) {
      for (const d of date_dim) {
        if (
          !(((ss.ss_sold_date_sk == d.d_date_sk) && (d.d_qoy == 1)) &&
            (d.d_year == 1998))
        ) continue;
        for (const s of store) {
          if (!(ss.ss_store_sk == s.s_store_sk)) continue;
          for (const ca of customer_address) {
            if (
              !(s.s_zip.substring(0, (0) + (2)) ==
                ca.ca_zip.substring(0, (0) + (2)))
            ) continue;
            for (const c of customer) {
              if (
                !((ca.ca_address_sk == c.c_current_addr_sk) &&
                  (c.c_preferred_cust_flag == "Y"))
              ) continue;
              if (!(zip_list.includes(ca.ca_zip.substring(0, (0) + (5))))) {
                continue;
              }
              const _key = s.s_store_name;
              const _ks = JSON.stringify(_key);
              let _g = _map.get(_ks);
              if (!_g) {
                _g = { key: _key, items: [] };
                _map.set(_ks, _g);
              }
              _g.items.push({
                ...ss,
                ...d,
                ...s,
                ...ca,
                ...c,
                ss: ss,
                d: d,
                s: s,
                ca: ca,
                c: c,
              });
            }
          }
        }
      }
    }
    let _groups = Array.from(_map.values());
    var _items = _groups;
    let _pairs = _items.map((it) => {
      const g = it;
      return { item: it, key: g.key };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const g of _items) {
      _res.push({
        "s_store_name": g.key,
        "net_profit": _sum(g.items.map((x) => x.ss.ss_net_profit)),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q8_result();
}
function _cmp(a: any, b: any): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    return a < b
      ? -1
      : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
