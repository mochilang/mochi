// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:37:17Z
// Source: tests/dataset/tpc-ds/q59.mochi

let join: Record<string, any>[];
let result: Record<string, any>[];
let sales_year1: Record<string, any>[];
let sales_year2: Record<string, any>[];

function test_TPCDS_Q59_simplified(): void {
  if (
    !(_equal(result, [
      {
        "s_store_id1": 1,
        "ratio": 1.5,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  sales_year1 = [
    {
      "week": 1,
      "store": 1,
      "amount": 100,
    },
  ];
  sales_year2 = [
    {
      "week": 53,
      "store": 1,
      "amount": 150,
    },
  ];
  join = (() => {
    const _src = sales_year1;
    const _res = [];
    for (const y1 of _src) {
      for (const y2 of sales_year2) {
        if (!((y1.store == y2.store) && (y1.week == (y2.week - 52)))) continue;
        _res.push({
          "s_store_id1": y1.store,
          "ratio": (y2.amount / y1.amount),
        });
      }
    }
    return _res;
  })();
  result = join;
  console.log(_json(result));
  test_TPCDS_Q59_simplified();
}
function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

main();
