// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:46:15Z
// Source: tests/dataset/tpc-ds/q51.mochi

function cumulative(xs: _[]): _[] {
  var out = [];
  var acc = 0;
  for (const x of xs) {
    acc = acc + x.price;
    out = [...out, {
      "date": x.date,
      "cum": acc,
    }];
  }
  return out;
}

let dms: number;
let joined: { [key: string]: number }[];
let result: { [key: string]: number }[];
let store_cum: any[];
let store_sales: Record<string, any>[];
let web_cum: any[];
let web_sales: Record<string, any>[];

function test_TPCDS_Q51_simplified(): void {
  if (
    !(_equal(result, [
      {
        "item_sk": 1,
        "d_date": 1,
      },
      {
        "item_sk": 1,
        "d_date": 2,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  web_sales = [
    {
      "item": 1,
      "date": 1,
      "price": 30,
    },
    {
      "item": 1,
      "date": 2,
      "price": 20,
    },
  ];
  store_sales = [
    {
      "item": 1,
      "date": 1,
      "price": 5,
    },
    {
      "item": 1,
      "date": 2,
      "price": 19,
    },
  ];
  dms = 1;
  web_cum = cumulative(
    ((() => {
      const _src = web_sales;
      var _items = [];
      for (const w of _src) {
        _items.push({ w: w });
      }
      let _pairs = _items.map((it) => {
        const { w } = it;
        return { item: it, key: w.date };
      });
      _pairs.sort((a, b) => _cmp(a.key, b.key));
      _items = _pairs.map((p) => p.item);
      const _res = [];
      for (const _it of _items) {
        const w = _it.w;
        _res.push({
          "date": w.date,
          "price": w.price,
        });
      }
      return _res;
    })()) as _[],
  );
  store_cum = cumulative(
    ((() => {
      const _src = store_sales;
      var _items = [];
      for (const s of _src) {
        _items.push({ s: s });
      }
      let _pairs = _items.map((it) => {
        const { s } = it;
        return { item: it, key: s.date };
      });
      _pairs.sort((a, b) => _cmp(a.key, b.key));
      _items = _pairs.map((p) => p.item);
      const _res = [];
      for (const _it of _items) {
        const s = _it.s;
        _res.push({
          "date": s.date,
          "price": s.price,
        });
      }
      return _res;
    })()) as _[],
  );
  joined = (() => {
    const _src = web_cum;
    const _res = [];
    for (const w of _src) {
      for (const s of store_cum) {
        if (!(w.date == s.date)) continue;
        if (!(w.cum > s.cum)) continue;
        _res.push({
          "item_sk": 1,
          "d_date": w.date,
        });
      }
    }
    return _res;
  })();
  result = joined;
  console.log(_json(result));
  test_TPCDS_Q51_simplified();
}
function _cmp(a: unknown, b: unknown): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    const order: Record<string, number> = { store: 0, web: 1, catalog: 2 };
    if (order[a] !== undefined && order[b] !== undefined) {
      return order[a] - order[b];
    }
    return a < b ? -1 : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
