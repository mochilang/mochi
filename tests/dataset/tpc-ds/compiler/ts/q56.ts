// Generated by Mochi compiler v0.10.27 on 2025-07-17T17:46:15Z
// Source: tests/dataset/tpc-ds/q56.mochi

let catalog_sales: Record<string, any>[];
let cs: Record<string, any>[];
let result: Record<string, any>[];
let ss: Record<string, any>[];
let store_sales: Record<string, any>[];
let union: any[];
let web_sales: Record<string, any>[];
let ws: Record<string, any>[];

function test_TPCDS_Q56_simplified(): void {
  if (
    !(_equal(result, [
      {
        "i_item_id": 1,
        "total_sales": 60,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  store_sales = [
    {
      "item": 1,
      "price": 10,
    },
  ];
  catalog_sales = [
    {
      "item": 1,
      "price": 20,
    },
  ];
  web_sales = [
    {
      "item": 1,
      "price": 30,
    },
  ];
  ss = (() => {
    const _src = store_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const s of _src) {
      const _key = s.item;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...s, s: s });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "item": g.key,
        "total": g.items.map((x) => x.price).reduce((a, b) => a + Number(b), 0),
      });
    }
    return _res;
  })();
  cs = (() => {
    const _src = catalog_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const s of _src) {
      const _key = s.item;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...s, s: s });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "item": g.key,
        "total": g.items.map((x) => x.price).reduce((a, b) => a + Number(b), 0),
      });
    }
    return _res;
  })();
  ws = (() => {
    const _src = web_sales;
    const _map = new Map<string, any>();
    var _items = [];
    for (const s of _src) {
      const _key = s.item;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...s, s: s });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "item": g.key,
        "total": g.items.map((x) => x.price).reduce((a, b) => a + Number(b), 0),
      });
    }
    return _res;
  })();
  union = [].concat(ss, cs, ws);
  result = (() => {
    const _src = union;
    const _map = new Map<string, any>();
    var _items = [];
    for (const u of _src) {
      const _key = u.item;
      const _ks = JSON.stringify(_key);
      let _g = _map.get(_ks);
      if (!_g) {
        _g = { key: _key, items: [] };
        _map.set(_ks, _g);
      }
      _g.items.push({ ...u, u: u });
    }
    let _groups = Array.from(_map.values());
    const _res = [];
    for (const g of _groups) {
      _res.push({
        "i_item_id": g.key,
        "total_sales": g.items.map((x) => x.total).reduce(
          (a, b) => a + Number(b),
          0,
        ),
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q56_simplified();
}
function _equal(a: unknown, b: unknown): boolean {
  if (typeof a === "number" && typeof b === "number") {
    return Math.abs(a - b) < 1e-9;
  }
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v));
}

main();
