// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:37:16Z
// Source: tests/dataset/tpc-ds/q47.mochi

function abs(x: number): number {
  if ((x >= 0)) {
    return x;
  } else {
    return (-x);
  }
}

let orderby: string;
let result: Record<string, any>[];
let v2: Record<string, any>[];
let year: number;

function test_TPCDS_Q47_simplified(): void {
  if (
    !(_equal(result, [
      {
        "d_year": 2019,
        "item": "C",
        "avg_monthly_sales": 50,
        "sum_sales": 60,
      },
      {
        "d_year": 2020,
        "item": "A",
        "avg_monthly_sales": 100,
        "sum_sales": 120,
      },
    ]))
  ) throw new Error("expect failed");
}

function main(): void {
  v2 = [
    {
      "d_year": 2020,
      "item": "A",
      "avg_monthly_sales": 100,
      "sum_sales": 120,
    },
    {
      "d_year": 2020,
      "item": "B",
      "avg_monthly_sales": 80,
      "sum_sales": 70,
    },
    {
      "d_year": 2019,
      "item": "C",
      "avg_monthly_sales": 50,
      "sum_sales": 60,
    },
  ];
  year = 2020;
  orderby = "item";
  result = (() => {
    const _src = v2;
    var _items = [];
    for (const v of _src) {
      if (
        !((((v.d_year >= (year - 1)) && (v.avg_monthly_sales > 0)) &&
          (v.sum_sales > v.avg_monthly_sales)) &&
          ((abs(v.sum_sales - v.avg_monthly_sales) / v.avg_monthly_sales) >
            0.1))
      ) continue;
      _items.push({ v: v });
    }
    let _pairs = _items.map((it) => {
      const { v } = it;
      return {
        item: it,
        key: [
          v.sum_sales - v.avg_monthly_sales,
          v.item,
        ],
      };
    });
    _pairs.sort((a, b) => _cmp(a.key, b.key));
    _items = _pairs.map((p) => p.item);
    _items = _pairs.map((p) => p.item);
    const _res = [];
    for (const _it of _items) {
      const v = _it.v;
      _res.push({
        "d_year": v.d_year,
        "item": v.item,
        "avg_monthly_sales": v.avg_monthly_sales,
        "sum_sales": v.sum_sales,
      });
    }
    return _res;
  })();
  console.log(_json(result));
  test_TPCDS_Q47_simplified();
}
function _cmp(a: any, b: any): number {
  if (Array.isArray(a) && Array.isArray(b)) {
    const n = Math.min(a.length, b.length);
    for (let i = 0; i < n; i++) {
      const c = _cmp(a[i], b[i]);
      if (c !== 0) return c;
    }
    return a.length - b.length;
  }
  if (typeof a === "number" && typeof b === "number") return a - b;
  if (typeof a === "string" && typeof b === "string") {
    return a < b
      ? -1
      : (a > b ? 1 : 0);
  }
  return String(a) < String(b) ? -1 : (String(a) > String(b) ? 1 : 0);
}

function _equal(a: any, b: any): boolean {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!_equal(a[i], b[i])) return false;
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    const ak = Object.keys(a);
    const bk = Object.keys(b);
    if (ak.length !== bk.length) return false;
    for (const k of ak) {
      if (!bk.includes(k) || !_equal((a as any)[k], (b as any)[k])) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

main();
