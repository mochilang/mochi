// Generated by Mochi compiler v0.10.26 on 2025-07-15T06:37:19Z
// Source: tests/dataset/tpc-ds/q84.mochi

let customer: { [key: string]: number }[];
let customer_address: Record<string, any>[];
let customer_demographics: { [key: string]: number }[];
let household_demographics: { [key: string]: number }[];
let income_band: { [key: string]: number }[];
let result: number;
let store_returns: Record<string, any>[];

function test_TPCDS_Q84_sample(): void {
  if (!(result == 84)) throw new Error("expect failed");
}

function main(): void {
  customer = [
    {
      "id": 1,
      "current_addr": 1,
      "cdemo": 1,
      "hdemo": 1,
    },
    {
      "id": 2,
      "current_addr": 1,
      "cdemo": 2,
      "hdemo": 2,
    },
    {
      "id": 3,
      "current_addr": 1,
      "cdemo": 3,
      "hdemo": 1,
    },
    {
      "id": 4,
      "current_addr": 1,
      "cdemo": 4,
      "hdemo": 2,
    },
  ];
  customer_address = [
    {
      "ca_address_sk": 1,
      "ca_city": "Springfield",
    },
  ];
  customer_demographics = [
    { "cd_demo_sk": 1 },
    { "cd_demo_sk": 2 },
    { "cd_demo_sk": 3 },
    { "cd_demo_sk": 4 },
  ];
  household_demographics = [
    {
      "hd_demo_sk": 1,
      "income_band_sk": 1,
    },
    {
      "hd_demo_sk": 2,
      "income_band_sk": 1,
    },
  ];
  income_band = [
    {
      "ib_income_band_sk": 1,
      "ib_lower_bound": 0,
      "ib_upper_bound": 50000,
    },
  ];
  store_returns = [
    {
      "sr_cdemo_sk": 1,
      "amt": 10,
    },
    {
      "sr_cdemo_sk": 2,
      "amt": 20,
    },
    {
      "sr_cdemo_sk": 3,
      "amt": 30,
    },
    {
      "sr_cdemo_sk": 4,
      "amt": 24,
    },
  ];
  result = _sum((() => {
    const _src = customer;
    const _res = [];
    for (const c of _src) {
      for (const ca of customer_address) {
        if (
          !((c.current_addr == ca.ca_address_sk) &&
            (ca.ca_city == "Springfield"))
        ) continue;
        for (const cd of customer_demographics) {
          if (!(c.cdemo == cd.cd_demo_sk)) continue;
          for (const sr of store_returns) {
            if (!(cd.cd_demo_sk == sr.sr_cdemo_sk)) continue;
            for (const hd of household_demographics) {
              if (!(c.hdemo == hd.hd_demo_sk)) continue;
              for (const ib of income_band) {
                if (!(hd.income_band_sk == ib.ib_income_band_sk)) continue;
                _res.push(sr.amt);
              }
            }
          }
        }
      }
    }
    return _res;
  })());
  console.log(_json(result));
  test_TPCDS_Q84_sample();
}
function _json(v: any): string {
  function _sort(x: any): any {
    if (Array.isArray(x)) return x.map(_sort);
    if (x && typeof x === "object") {
      const keys = Object.keys(x).sort();
      const o: any = {};
      for (const k of keys) o[k] = _sort(x[k]);
      return o;
    }
    return x;
  }
  return JSON.stringify(_sort(v), null, 2);
}

function _sum(v: any): number {
  let list: any[] | null = null;
  if (Array.isArray(v)) list = v;
  else if (v && typeof v === "object") {
    if (Array.isArray((v as any).items)) list = (v as any).items;
    else if (Array.isArray((v as any).Items)) list = (v as any).Items;
  }
  if (!list || list.length === 0) return 0;
  let sum = 0;
  for (const n of list) sum += Number(n);
  return sum;
}

main();
