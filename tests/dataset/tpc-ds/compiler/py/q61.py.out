# Generated by Mochi Python compiler
from __future__ import annotations

import json


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


sales = None
promotions = None
total = None
result = None


def test_TPCDS_Q61_simplified():
    assert result == 61


def main():
    global sales
    sales = [
        {"promo": True, "price": 20},
        {"promo": True, "price": 41},
        {"promo": False, "price": 39},
    ]
    global promotions
    promotions = _sum([_get(s, "price") for s in sales if _get(s, "promo")])
    global total
    total = _sum([_get(s, "price") for s in sales])
    global result
    result = (promotions * 100) / total
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q61_simplified()


if __name__ == "__main__":
    main()
