# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:49:46Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    i_item_id: str
    ca_country: str
    ca_state: str
    ca_county: str
    agg1: float
    agg2: float
    agg3: float
    agg4: float
    agg5: float
    agg6: float
    agg7: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    i_item_id: str
    ca_country: str
    ca_state: str
    ca_county: str
    q: int
    lp: float
    cp: float
    sp: float
    np: float
    by: int
    dep: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    i_item_id: str
    ca_country: str
    ca_state: str
    ca_county: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogSale:
    cs_quantity: int
    cs_list_price: float
    cs_coupon_amt: float
    cs_sales_price: float
    cs_net_profit: float
    cs_bill_cdemo_sk: int
    cs_bill_customer_sk: int
    cs_sold_date_sk: int
    cs_item_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_current_cdemo_sk: int
    c_current_addr_sk: int
    c_birth_year: int
    c_birth_month: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerAddres:
    ca_address_sk: int
    ca_country: str
    ca_state: str
    ca_county: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerDemographic:
    cd_demo_sk: int
    cd_gender: str
    cd_education_status: str
    cd_dep_count: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_item_id: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


@dataclasses.dataclass
class CatalogSale:
    cs_quantity: int
    cs_list_price: float
    cs_coupon_amt: float
    cs_sales_price: float
    cs_net_profit: float
    cs_bill_cdemo_sk: int
    cs_bill_customer_sk: int
    cs_sold_date_sk: int
    cs_item_sk: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerDemographics:
    cd_demo_sk: int
    cd_gender: str
    cd_education_status: str
    cd_dep_count: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_current_cdemo_sk: int
    c_current_addr_sk: int
    c_birth_year: int
    c_birth_month: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerAddress:
    ca_address_sk: int
    ca_country: str
    ca_state: str
    ca_county: str

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_item_id: str

    def __contains__(self, key):
        return hasattr(self, key)


def test_TPCDS_Q18_averages():
    assert result == [
        Auto1(
            i_item_id="I1",
            ca_country="US",
            ca_state="CA",
            ca_county="County1",
            agg1=1.0,
            agg2=10.0,
            agg3=1.0,
            agg4=9.0,
            agg5=2.0,
            agg6=1980.0,
            agg7=2.0,
        )
    ]


catalog_sales = [
    CatalogSale(
        cs_quantity=1,
        cs_list_price=10.0,
        cs_coupon_amt=1.0,
        cs_sales_price=9.0,
        cs_net_profit=2.0,
        cs_bill_cdemo_sk=1,
        cs_bill_customer_sk=1,
        cs_sold_date_sk=1,
        cs_item_sk=1,
    )
]
customer_demographics = [
    CustomerDemographic(
        cd_demo_sk=1, cd_gender="M", cd_education_status="College", cd_dep_count=2
    ),
    CustomerDemographic(
        cd_demo_sk=2, cd_gender="F", cd_education_status="College", cd_dep_count=2
    ),
]
customer = [
    Customer(
        c_customer_sk=1,
        c_current_cdemo_sk=2,
        c_current_addr_sk=1,
        c_birth_year=1980,
        c_birth_month=1,
    )
]
customer_address = [
    CustomerAddres(ca_address_sk=1, ca_country="US", ca_state="CA", ca_county="County1")
]
date_dim = [DateDim(d_date_sk=1, d_year=1999)]
item = [Item(i_item_sk=1, i_item_id="I1")]
joined = _query(
    catalog_sales,
    [
        {
            "items": customer_demographics,
            "on": lambda cs, cd1: (
                cs.cs_bill_cdemo_sk == cd1.cd_demo_sk and cd1.cd_gender == "M"
            )
            and cd1.cd_education_status == "College",
        },
        {
            "items": customer,
            "on": lambda cs, cd1, c: cs.cs_bill_customer_sk == c.c_customer_sk,
        },
        {
            "items": customer_demographics,
            "on": lambda cs, cd1, c, cd2: c.c_current_cdemo_sk == cd2.cd_demo_sk,
        },
        {
            "items": customer_address,
            "on": lambda cs, cd1, c, cd2, ca: c.c_current_addr_sk == ca.ca_address_sk,
        },
        {
            "items": date_dim,
            "on": lambda cs, cd1, c, cd2, ca, d: cs.cs_sold_date_sk == d.d_date_sk
            and d.d_year == 1999,
        },
        {
            "items": item,
            "on": lambda cs, cd1, c, cd2, ca, d, i: cs.cs_item_sk == i.i_item_sk,
        },
    ],
    {
        "select": lambda cs, cd1, c, cd2, ca, d, i: Auto2(
            i_item_id=i.i_item_id,
            ca_country=ca.ca_country,
            ca_state=ca.ca_state,
            ca_county=ca.ca_county,
            q=cs.cs_quantity,
            lp=cs.cs_list_price,
            cp=cs.cs_coupon_amt,
            sp=cs.cs_sales_price,
            np=cs.cs_net_profit,
            by=c.c_birth_year,
            dep=cd1.cd_dep_count,
        )
    },
)


def _q0():
    _groups = {}
    _order = []
    for j in joined:
        _k = Auto3(
            i_item_id=j.i_item_id,
            ca_country=j.ca_country,
            ca_state=j.ca_state,
            ca_county=j.ca_county,
        )
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(j)
    _items1 = [_groups[k] for k in _order]
    return [
        Auto1(
            i_item_id=g.key["i_item_id"],
            ca_country=g.key["ca_country"],
            ca_state=g.key["ca_state"],
            ca_county=g.key["ca_county"],
            agg1=(
                sum([x.q for x in g]) / len([x.q for x in g]) if [x.q for x in g] else 0
            ),
            agg2=(
                sum([x.lp for x in g]) / len([x.lp for x in g])
                if [x.lp for x in g]
                else 0
            ),
            agg3=(
                sum([x.cp for x in g]) / len([x.cp for x in g])
                if [x.cp for x in g]
                else 0
            ),
            agg4=(
                sum([x.sp for x in g]) / len([x.sp for x in g])
                if [x.sp for x in g]
                else 0
            ),
            agg5=(
                sum([x.np for x in g]) / len([x.np for x in g])
                if [x.np for x in g]
                else 0
            ),
            agg6=(
                sum([x.by for x in g]) / len([x.by for x in g])
                if [x.by for x in g]
                else 0
            ),
            agg7=(
                sum([x.dep for x in g]) / len([x.dep for x in g])
                if [x.dep for x in g]
                else 0
            ),
        )
        for g in _items1
    ]


result = _q0()
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q18_averages()
