# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:53Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    customer_id: int
    customer_first_name: str
    customer_last_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    customer_id: object
    customer_first_name: object
    customer_last_name: object
    year: object
    year_total: float
    sale_type: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    id: int
    first: str
    last: str
    year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_customer_id: int
    c_first_name: str
    c_last_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_customer_sk: int
    ss_sold_date_sk: int
    ss_net_paid: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class WebSale:
    ws_bill_customer_sk: int
    ws_sold_date_sk: int
    ws_net_paid: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_TPCDS_Q74_simplified():
    assert result == [
        Auto1(customer_id=1, customer_first_name="Alice", customer_last_name="Smith")
    ]


customer = [
    Customer(
        c_customer_sk=1, c_customer_id=1, c_first_name="Alice", c_last_name="Smith"
    )
]
date_dim = [DateDim(d_date_sk=1, d_year=1998), DateDim(d_date_sk=2, d_year=1999)]
store_sales = [
    StoreSale(ss_customer_sk=1, ss_sold_date_sk=1, ss_net_paid=100.0),
    StoreSale(ss_customer_sk=1, ss_sold_date_sk=2, ss_net_paid=110.0),
]
web_sales = [
    WebSale(ws_bill_customer_sk=1, ws_sold_date_sk=1, ws_net_paid=40.0),
    WebSale(ws_bill_customer_sk=1, ws_sold_date_sk=2, ws_net_paid=80.0),
]


def _q0():
    _src = customer
    _rows = _query(
        _src,
        [
            {
                "items": store_sales,
                "on": lambda c, ss: c.c_customer_sk == ss.ss_customer_sk,
            },
            {
                "items": date_dim,
                "on": lambda c, ss, d: d.d_date_sk == ss.ss_sold_date_sk,
            },
        ],
        {
            "select": lambda c, ss, d: (c, ss, d),
            "where": lambda c, ss, d: d.d_year == 1998 or d.d_year == 1999,
        },
    )
    _groups = _group_by(
        _rows,
        lambda c, ss, d: Auto3(
            id=c.c_customer_id, first=c.c_first_name, last=c.c_last_name, year=d.d_year
        ),
    )
    _items1 = _groups
    return [
        Auto2(
            customer_id=g.key["id"],
            customer_first_name=g.key["first"],
            customer_last_name=g.key["last"],
            year=g.key["year"],
            year_total=_sum([x[1].ss_net_paid for x in g]),
            sale_type="s",
        )
        for g in _items1
    ]


def _q2():
    _src = customer
    _rows = _query(
        _src,
        [
            {
                "items": web_sales,
                "on": lambda c, ws: c.c_customer_sk == ws.ws_bill_customer_sk,
            },
            {
                "items": date_dim,
                "on": lambda c, ws, d: d.d_date_sk == ws.ws_sold_date_sk,
            },
        ],
        {
            "select": lambda c, ws, d: (c, ws, d),
            "where": lambda c, ws, d: d.d_year == 1998 or d.d_year == 1999,
        },
    )
    _groups = _group_by(
        _rows,
        lambda c, ws, d: Auto3(
            id=c.c_customer_id, first=c.c_first_name, last=c.c_last_name, year=d.d_year
        ),
    )
    _items3 = _groups
    return [
        Auto2(
            customer_id=g.key["id"],
            customer_first_name=g.key["first"],
            customer_last_name=g.key["last"],
            year=g.key["year"],
            year_total=_sum([x[1].ws_net_paid for x in g]),
            sale_type="w",
        )
        for g in _items3
    ]


year_total = _q0() + _q2()
s_firstyear = (
    [
        y
        for y in year_total
        if (y.get("sale_type") if isinstance(y, dict) else getattr(y, "sale_type"))
        == "s"
        and (y.get("year") if isinstance(y, dict) else getattr(y, "year")) == 1998
    ][0]
    if len(
        [
            y
            for y in year_total
            if (y.get("sale_type") if isinstance(y, dict) else getattr(y, "sale_type"))
            == "s"
            and (y.get("year") if isinstance(y, dict) else getattr(y, "year")) == 1998
        ]
    )
    > 0
    else None
)
s_secyear = (
    [
        y
        for y in year_total
        if (y.get("sale_type") if isinstance(y, dict) else getattr(y, "sale_type"))
        == "s"
        and (y.get("year") if isinstance(y, dict) else getattr(y, "year")) == 1999
    ][0]
    if len(
        [
            y
            for y in year_total
            if (y.get("sale_type") if isinstance(y, dict) else getattr(y, "sale_type"))
            == "s"
            and (y.get("year") if isinstance(y, dict) else getattr(y, "year")) == 1999
        ]
    )
    > 0
    else None
)
w_firstyear = (
    [
        y
        for y in year_total
        if (y.get("sale_type") if isinstance(y, dict) else getattr(y, "sale_type"))
        == "w"
        and (y.get("year") if isinstance(y, dict) else getattr(y, "year")) == 1998
    ][0]
    if len(
        [
            y
            for y in year_total
            if (y.get("sale_type") if isinstance(y, dict) else getattr(y, "sale_type"))
            == "w"
            and (y.get("year") if isinstance(y, dict) else getattr(y, "year")) == 1998
        ]
    )
    > 0
    else None
)
w_secyear = (
    [
        y
        for y in year_total
        if (y.get("sale_type") if isinstance(y, dict) else getattr(y, "sale_type"))
        == "w"
        and (y.get("year") if isinstance(y, dict) else getattr(y, "year")) == 1999
    ][0]
    if len(
        [
            y
            for y in year_total
            if (y.get("sale_type") if isinstance(y, dict) else getattr(y, "sale_type"))
            == "w"
            and (y.get("year") if isinstance(y, dict) else getattr(y, "year")) == 1999
        ]
    )
    > 0
    else None
)
result = (
    [
        Auto1(
            customer_id=(
                s_secyear.get("customer_id")
                if isinstance(s_secyear, dict)
                else getattr(s_secyear, "customer_id")
            ),
            customer_first_name=(
                s_secyear.get("customer_first_name")
                if isinstance(s_secyear, dict)
                else getattr(s_secyear, "customer_first_name")
            ),
            customer_last_name=(
                s_secyear.get("customer_last_name")
                if isinstance(s_secyear, dict)
                else getattr(s_secyear, "customer_last_name")
            ),
        )
    ]
    if (
        (
            s_firstyear.get("year_total")
            if isinstance(s_firstyear, dict)
            else getattr(s_firstyear, "year_total")
        )
        > 0
        and (
            w_firstyear.get("year_total")
            if isinstance(w_firstyear, dict)
            else getattr(w_firstyear, "year_total")
        )
        > 0
    )
    and (
        w_secyear.get("year_total")
        if isinstance(w_secyear, dict)
        else getattr(w_secyear, "year_total")
    )
    / (
        w_firstyear.get("year_total")
        if isinstance(w_firstyear, dict)
        else getattr(w_firstyear, "year_total")
    )
    > (
        s_secyear.get("year_total")
        if isinstance(s_secyear, dict)
        else getattr(s_secyear, "year_total")
    )
    / (
        s_firstyear.get("year_total")
        if isinstance(s_firstyear, dict)
        else getattr(s_firstyear, "year_total")
    )
    else []
)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q74_simplified()
