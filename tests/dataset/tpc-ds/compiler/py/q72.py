# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:50Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    i_item_desc: str
    w_warehouse_name: str
    d_week_seq: int
    no_promo: int
    promo: int
    total_cnt: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    item_desc: str
    warehouse: str
    week_seq: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogSale:
    cs_item_sk: int
    cs_order_number: int
    cs_quantity: int
    cs_sold_date_sk: int
    cs_ship_date_sk: int
    cs_bill_cdemo_sk: int
    cs_bill_hdemo_sk: int
    cs_promo_sk: object

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerDemographic:
    cd_demo_sk: int
    cd_marital_status: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_week_seq: int
    d_date: int
    d_year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class HouseholdDemographic:
    hd_demo_sk: int
    hd_buy_potential: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Inventory:
    inv_item_sk: int
    inv_warehouse_sk: int
    inv_date_sk: int
    inv_quantity_on_hand: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_item_desc: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Warehouse:
    w_warehouse_sk: int
    w_warehouse_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_TPCDS_Q72_simplified():
    assert result == [
        Auto1(
            i_item_desc="ItemA",
            w_warehouse_name="Main",
            d_week_seq=10,
            no_promo=1,
            promo=0,
            total_cnt=1,
        )
    ]


catalog_sales = [
    CatalogSale(
        cs_item_sk=1,
        cs_order_number=1,
        cs_quantity=1,
        cs_sold_date_sk=1,
        cs_ship_date_sk=3,
        cs_bill_cdemo_sk=1,
        cs_bill_hdemo_sk=1,
        cs_promo_sk=None,
    )
]
inventory = [
    Inventory(inv_item_sk=1, inv_warehouse_sk=1, inv_date_sk=2, inv_quantity_on_hand=0)
]
warehouse = [Warehouse(w_warehouse_sk=1, w_warehouse_name="Main")]
item = [Item(i_item_sk=1, i_item_desc="ItemA")]
customer_demographics = [CustomerDemographic(cd_demo_sk=1, cd_marital_status="M")]
household_demographics = [
    HouseholdDemographic(hd_demo_sk=1, hd_buy_potential="5001-10000")
]
date_dim = [
    DateDim(d_date_sk=1, d_week_seq=10, d_date=1, d_year=2000),
    DateDim(d_date_sk=2, d_week_seq=10, d_date=1, d_year=2000),
    DateDim(d_date_sk=3, d_week_seq=10, d_date=7, d_year=2000),
]


def _q0():
    _src = catalog_sales
    _rows = _query(
        _src,
        [
            {
                "items": inventory,
                "on": lambda cs, inv: inv.inv_item_sk == cs.cs_item_sk,
            },
            {
                "items": warehouse,
                "on": lambda cs, inv, w: w.w_warehouse_sk == inv.inv_warehouse_sk,
            },
            {"items": item, "on": lambda cs, inv, w, i: i.i_item_sk == cs.cs_item_sk},
            {
                "items": customer_demographics,
                "on": lambda cs, inv, w, i, cd: cd.cd_demo_sk == cs.cs_bill_cdemo_sk,
            },
            {
                "items": household_demographics,
                "on": lambda cs, inv, w, i, cd, hd: hd.hd_demo_sk
                == cs.cs_bill_hdemo_sk,
            },
            {
                "items": date_dim,
                "on": lambda cs, inv, w, i, cd, hd, d1: d1.d_date_sk
                == cs.cs_sold_date_sk,
            },
            {
                "items": date_dim,
                "on": lambda cs, inv, w, i, cd, hd, d1, d2: d2.d_date_sk
                == inv.inv_date_sk,
            },
            {
                "items": date_dim,
                "on": lambda cs, inv, w, i, cd, hd, d1, d2, d3: d3.d_date_sk
                == cs.cs_ship_date_sk,
            },
        ],
        {
            "select": lambda cs, inv, w, i, cd, hd, d1, d2, d3: (
                cs,
                inv,
                w,
                i,
                cd,
                hd,
                d1,
                d2,
                d3,
            ),
            "where": lambda cs, inv, w, i, cd, hd, d1, d2, d3: (
                (
                    (
                        (
                            d1.d_week_seq == d2.d_week_seq
                            and inv.inv_quantity_on_hand < cs.cs_quantity
                        )
                        and d3.d_date > d1.d_date + 5
                    )
                    and hd.hd_buy_potential == "5001-10000"
                )
                and d1.d_year == 2000
            )
            and cd.cd_marital_status == "M",
        },
    )
    _groups = _group_by(
        _rows,
        lambda cs, inv, w, i, cd, hd, d1, d2, d3: Auto2(
            item_desc=i.i_item_desc,
            warehouse=w.w_warehouse_name,
            week_seq=d1.d_week_seq,
        ),
    )
    _items1 = _groups
    return [
        Auto1(
            i_item_desc=g.key["item_desc"],
            w_warehouse_name=g.key["warehouse"],
            d_week_seq=g.key["week_seq"],
            no_promo=len([x for x in g if x[0].cs_promo_sk == None]),
            promo=len([x for x in g if x[0].cs_promo_sk != None]),
            total_cnt=len(g),
        )
        for g in _items1
    ]


result = _q0()
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q72_simplified()
