# Generated by Mochi Python compiler
from __future__ import annotations

import json


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


catalog_sales = None
catalog_returns = None
item = None
warehouse = None
date_dim = None
sales_date = "2020-01-15"
records = None
result = None


def test_TPCDS_Q40_simplified():
    assert result == [
        {"w_state": "CA", "i_item_id": "I1", "sales_before": 100, "sales_after": 0}
    ]


def main():
    global catalog_sales
    catalog_sales = [
        {"order": 1, "item_sk": 1, "warehouse_sk": 1, "date_sk": 1, "price": 100},
        {"order": 2, "item_sk": 1, "warehouse_sk": 1, "date_sk": 2, "price": 150},
    ]
    global catalog_returns
    catalog_returns = [{"order": 2, "item_sk": 1, "refunded": 150}]
    global item
    item = [{"item_sk": 1, "item_id": "I1", "current_price": 1.2}]
    global warehouse
    warehouse = [{"warehouse_sk": 1, "state": "CA"}]
    global date_dim
    date_dim = [
        {"date_sk": 1, "date": "2020-01-10"},
        {"date_sk": 2, "date": "2020-01-20"},
    ]
    global sales_date
    sales_date = "2020-01-15"
    global records
    records = _query(
        catalog_sales,
        [
            {
                "items": catalog_returns,
                "on": lambda cs, cr: (
                    (
                        (_get(cs, "order") == _get(cr, "order"))
                        and (_get(cs, "item_sk") == _get(cr, "item_sk"))
                    )
                ),
                "left": True,
            },
            {
                "items": warehouse,
                "on": lambda cs, cr, w: (
                    (_get(cs, "warehouse_sk") == _get(w, "warehouse_sk"))
                ),
            },
            {
                "items": item,
                "on": lambda cs, cr, w, i: (
                    (_get(cs, "item_sk") == _get(i, "item_sk"))
                ),
            },
            {
                "items": date_dim,
                "on": lambda cs, cr, w, i, d: (
                    (_get(cs, "date_sk") == _get(d, "date_sk"))
                ),
            },
        ],
        {
            "select": lambda cs, cr, w, i, d: {
                "w_state": _get(w, "state"),
                "i_item_id": _get(i, "item_id"),
                "sold_date": _get(d, "date"),
                "net": (
                    _get(cs, "price") - ((0 if (cr == None) else _get(cr, "refunded")))
                ),
            },
            "where": lambda cs, cr, w, i, d: (
                (
                    (_get(i, "current_price") >= 0.99)
                    and (_get(i, "current_price") <= 1.49)
                )
            ),
        },
    )

    def _q0():
        _src = records
        _rows = _query(_src, [], {"select": lambda r: (r)})
        _groups = _group_by(
            _rows,
            lambda r: (
                {"w_state": _get(r, "w_state"), "i_item_id": _get(r, "i_item_id")}
            ),
        )
        items = _groups
        return [
            {
                "w_state": _get(_get(g, "key"), "w_state"),
                "i_item_id": _get(_get(g, "key"), "i_item_id"),
                "sales_before": _sum(
                    [
                        (_get(x, "net") if (_get(x, "sold_date") < sales_date) else 0)
                        for x in g
                    ]
                ),
                "sales_after": _sum(
                    [
                        (_get(x, "net") if (_get(x, "sold_date") >= sales_date) else 0)
                        for x in g
                    ]
                ),
            }
            for g in items
        ]

    global result
    result = _q0()
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q40_simplified()


if __name__ == "__main__":
    main()
