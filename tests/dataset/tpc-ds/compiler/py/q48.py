# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:18Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class CustomerAddres:
    ca_address_sk: int
    ca_country: str
    ca_state: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerDemographic:
    cd_demo_sk: int
    cd_marital_status: str
    cd_education_status: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Store:
    s_store_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    cdemo_sk: int
    addr_sk: int
    sold_date_sk: int
    sales_price: float
    net_profit: float
    quantity: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_TPCDS_Q48_simplified():
    assert result == 35


store_sales = [
    StoreSale(
        cdemo_sk=1,
        addr_sk=1,
        sold_date_sk=1,
        sales_price=120.0,
        net_profit=1000.0,
        quantity=5,
    ),
    StoreSale(
        cdemo_sk=2,
        addr_sk=2,
        sold_date_sk=1,
        sales_price=60.0,
        net_profit=2000.0,
        quantity=10,
    ),
    StoreSale(
        cdemo_sk=3,
        addr_sk=3,
        sold_date_sk=1,
        sales_price=170.0,
        net_profit=10000.0,
        quantity=20,
    ),
]
store = [Store(s_store_sk=1)]
customer_demographics = [
    CustomerDemographic(cd_demo_sk=1, cd_marital_status="S", cd_education_status="E1"),
    CustomerDemographic(cd_demo_sk=2, cd_marital_status="M", cd_education_status="E2"),
    CustomerDemographic(cd_demo_sk=3, cd_marital_status="W", cd_education_status="E3"),
]
customer_address = [
    CustomerAddres(ca_address_sk=1, ca_country="United States", ca_state="TX"),
    CustomerAddres(ca_address_sk=2, ca_country="United States", ca_state="CA"),
    CustomerAddres(ca_address_sk=3, ca_country="United States", ca_state="NY"),
]
date_dim = [DateDim(d_date_sk=1, d_year=2000)]
year = 2000
states1 = ["TX"]
states2 = ["CA"]
states3 = ["NY"]
qty_base = _query(
    store_sales,
    [
        {
            "items": customer_demographics,
            "on": lambda ss, cd: ss.cdemo_sk == cd.cd_demo_sk,
        },
        {
            "items": customer_address,
            "on": lambda ss, cd, ca: ss.addr_sk == ca.ca_address_sk,
        },
        {"items": date_dim, "on": lambda ss, cd, ca, d: ss.sold_date_sk == d.d_date_sk},
    ],
    {
        "select": lambda ss, cd, ca, d: ss.quantity,
        "where": lambda ss, cd, ca, d: (
            d.d_year == year
            and (
                (
                    (
                        (cd.cd_marital_status == "S" and cd.cd_education_status == "E1")
                        and ss.sales_price >= 100.0
                    )
                    and ss.sales_price <= 150.0
                    or (
                        (
                            (
                                cd.cd_marital_status == "M"
                                and cd.cd_education_status == "E2"
                            )
                            and ss.sales_price >= 50.0
                        )
                        and ss.sales_price <= 100.0
                    )
                )
                or (
                    (
                        (cd.cd_marital_status == "W" and cd.cd_education_status == "E3")
                        and ss.sales_price >= 150.0
                    )
                    and ss.sales_price <= 200.0
                )
            )
        )
        and (
            (
                (ca.ca_state in states1 and ss.net_profit >= 0)
                and ss.net_profit <= 2000
                or (
                    (ca.ca_state in states2 and ss.net_profit >= 150)
                    and ss.net_profit <= 3000
                )
            )
            or (
                (ca.ca_state in states3 and ss.net_profit >= 50)
                and ss.net_profit <= 25000
            )
        ),
    },
)
qty = qty_base
result = _sum(qty)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q48_simplified()
