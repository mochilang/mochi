# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing


def _avg(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("avg() expects list or group")
    if not v:
        return 0
    s = 0.0
    for it in v:
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("avg() expects numbers")
    return s / len(v)


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


@dataclasses.dataclass
class StoreSale:
    ss_ticket_number: int
    ss_item_sk: int
    ss_customer_sk: int
    ss_store_sk: int
    ss_net_paid: float


@dataclasses.dataclass
class StoreReturn:
    sr_ticket_number: int
    sr_item_sk: int


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_store_name: str
    s_market_id: int
    s_state: str
    s_zip: str


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_color: str
    i_current_price: float
    i_manager_id: int
    i_units: str
    i_size: str


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_first_name: str
    c_last_name: str
    c_current_addr_sk: int
    c_birth_country: str


@dataclasses.dataclass
class CustomerAddress:
    ca_address_sk: int
    ca_state: str
    ca_country: str
    ca_zip: str


store_sales = None
store_returns = None
store = None
item = None
customer = None
customer_address = None
ssales = None
avg_paid = None
result = None


def test_TPCDS_Q24_customer_net_paid():
    assert result == [
        {
            "c_last_name": "Smith",
            "c_first_name": "Ann",
            "s_store_name": "Store1",
            "paid": 100,
        }
    ]


def main():
    global store_sales
    store_sales = [
        {
            "ss_ticket_number": 1,
            "ss_item_sk": 1,
            "ss_customer_sk": 1,
            "ss_store_sk": 1,
            "ss_net_paid": 100,
        },
        {
            "ss_ticket_number": 2,
            "ss_item_sk": 2,
            "ss_customer_sk": 2,
            "ss_store_sk": 1,
            "ss_net_paid": 50,
        },
    ]
    global store_returns
    store_returns = [
        {"sr_ticket_number": 1, "sr_item_sk": 1},
        {"sr_ticket_number": 2, "sr_item_sk": 2},
    ]
    global store
    store = [
        {
            "s_store_sk": 1,
            "s_store_name": "Store1",
            "s_market_id": 5,
            "s_state": "CA",
            "s_zip": "12345",
        }
    ]
    global item
    item = [
        {
            "i_item_sk": 1,
            "i_color": "RED",
            "i_current_price": 10,
            "i_manager_id": 1,
            "i_units": "EA",
            "i_size": "M",
        },
        {
            "i_item_sk": 2,
            "i_color": "BLUE",
            "i_current_price": 20,
            "i_manager_id": 2,
            "i_units": "EA",
            "i_size": "L",
        },
    ]
    global customer
    customer = [
        {
            "c_customer_sk": 1,
            "c_first_name": "Ann",
            "c_last_name": "Smith",
            "c_current_addr_sk": 1,
            "c_birth_country": "Canada",
        },
        {
            "c_customer_sk": 2,
            "c_first_name": "Bob",
            "c_last_name": "Jones",
            "c_current_addr_sk": 2,
            "c_birth_country": "USA",
        },
    ]
    global customer_address
    customer_address = [
        {"ca_address_sk": 1, "ca_state": "CA", "ca_country": "USA", "ca_zip": "12345"},
        {"ca_address_sk": 2, "ca_state": "CA", "ca_country": "USA", "ca_zip": "54321"},
    ]

    def _q0():
        _src = store_sales
        _rows = _query(
            _src,
            [
                {
                    "items": store_returns,
                    "on": lambda ss, sr: (
                        (
                            (
                                _get(ss, "ss_ticket_number")
                                == _get(sr, "sr_ticket_number")
                            )
                            and (_get(ss, "ss_item_sk") == _get(sr, "sr_item_sk"))
                        )
                    ),
                },
                {
                    "items": store,
                    "on": lambda ss, sr, s: (
                        (_get(ss, "ss_store_sk") == _get(s, "s_store_sk"))
                    ),
                },
                {
                    "items": item,
                    "on": lambda ss, sr, s, i: (
                        (_get(ss, "ss_item_sk") == _get(i, "i_item_sk"))
                    ),
                },
                {
                    "items": customer,
                    "on": lambda ss, sr, s, i, c: (
                        (_get(ss, "ss_customer_sk") == _get(c, "c_customer_sk"))
                    ),
                },
                {
                    "items": customer_address,
                    "on": lambda ss, sr, s, i, c, ca: (
                        (_get(c, "c_current_addr_sk") == _get(ca, "ca_address_sk"))
                    ),
                },
            ],
            {
                "select": lambda ss, sr, s, i, c, ca: (ss, sr, s, i, c, ca),
                "where": lambda ss, sr, s, i, c, ca: (
                    (
                        (
                            (
                                _get(c, "c_birth_country")
                                != _get(ca, "ca_country").upper()
                            )
                            and (_get(s, "s_zip") == _get(ca, "ca_zip"))
                        )
                        and (_get(s, "s_market_id") == 5)
                    )
                ),
            },
        )
        _groups = _group_by(
            _rows,
            lambda ss, sr, s, i, c, ca: (
                {
                    "last": _get(c, "c_last_name"),
                    "first": _get(c, "c_first_name"),
                    "store_name": _get(s, "s_store_name"),
                    "color": _get(i, "i_color"),
                }
            ),
        )
        items = _groups
        return [
            {
                "c_last_name": _get(_get(g, "key"), "last"),
                "c_first_name": _get(_get(g, "key"), "first"),
                "s_store_name": _get(_get(g, "key"), "store_name"),
                "color": _get(_get(g, "key"), "color"),
                "netpaid": _sum([_get(x, "ss_net_paid") for x in g]),
            }
            for g in items
        ]

    global ssales
    ssales = _q0()
    global avg_paid
    avg_paid = _avg([_get(x, "netpaid") for x in ssales])
    global result
    result = [
        {
            "c_last_name": _get(x, "c_last_name"),
            "c_first_name": _get(x, "c_first_name"),
            "s_store_name": _get(x, "s_store_name"),
            "paid": _get(x, "netpaid"),
        }
        for x in sorted(
            [
                x
                for x in ssales
                if (
                    (_get(x, "color") == "RED")
                    and (_get(x, "netpaid") > (0.05 * avg_paid))
                )
            ],
            key=lambda x: _sort_key(
                [
                    _get(x, "c_last_name"),
                    _get(x, "c_first_name"),
                    _get(x, "s_store_name"),
                ]
            ),
        )
    ]
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q24_customer_net_paid()


if __name__ == "__main__":
    main()
