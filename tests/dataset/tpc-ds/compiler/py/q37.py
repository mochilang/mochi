# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:06Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    i_item_id: str
    i_item_desc: str
    i_current_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    id: str
    desc: str
    price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogSale:
    cs_item_sk: int
    cs_sold_date_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_date: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Inventory:
    inv_item_sk: int
    inv_warehouse_sk: int
    inv_date_sk: int
    inv_quantity_on_hand: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_item_id: str
    i_item_desc: str
    i_current_price: float
    i_manufact_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, list):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, tuple):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, dict):
        return str(k)
    return k


def test_TPCDS_Q37_simplified():
    assert result == [Auto1(i_item_id="I1", i_item_desc="Item1", i_current_price=30.0)]


item = [
    Item(
        i_item_sk=1,
        i_item_id="I1",
        i_item_desc="Item1",
        i_current_price=30.0,
        i_manufact_id=800,
    ),
    Item(
        i_item_sk=2,
        i_item_id="I2",
        i_item_desc="Item2",
        i_current_price=60.0,
        i_manufact_id=801,
    ),
]
inventory = [
    Inventory(
        inv_item_sk=1, inv_warehouse_sk=1, inv_date_sk=1, inv_quantity_on_hand=200
    ),
    Inventory(
        inv_item_sk=2, inv_warehouse_sk=1, inv_date_sk=1, inv_quantity_on_hand=300
    ),
]
date_dim = [DateDim(d_date_sk=1, d_date="2000-01-15")]
catalog_sales = [CatalogSale(cs_item_sk=1, cs_sold_date_sk=1)]


def _q0():
    _src = item
    _rows = _query(
        _src,
        [
            {"items": inventory, "on": lambda i, inv: i.i_item_sk == inv.inv_item_sk},
            {"items": date_dim, "on": lambda i, inv, d: inv.inv_date_sk == d.d_date_sk},
            {
                "items": catalog_sales,
                "on": lambda i, inv, d, cs: cs.cs_item_sk == i.i_item_sk,
            },
        ],
        {
            "select": lambda i, inv, d, cs: (i, inv, d, cs),
            "where": lambda i, inv, d, cs: (
                (
                    (
                        (i.i_current_price >= 20 and i.i_current_price <= 50)
                        and i.i_manufact_id >= 800
                    )
                    and i.i_manufact_id <= 803
                )
                and inv.inv_quantity_on_hand >= 100
            )
            and inv.inv_quantity_on_hand <= 500,
        },
    )
    _groups = _group_by(
        _rows,
        lambda i, inv, d, cs: Auto2(
            id=i.i_item_id, desc=i.i_item_desc, price=i.i_current_price
        ),
    )
    _items1 = _groups
    _items1 = sorted(_items1, key=lambda g: _sort_key(g.key["id"]))
    return [
        Auto1(
            i_item_id=g.key["id"],
            i_item_desc=g.key["desc"],
            i_current_price=g.key["price"],
        )
        for g in _items1
    ]


result = _q0()
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q37_simplified()
