# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:51:03Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    state: object
    avg_amt: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogReturn:
    cust: int
    state: str
    amt: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def test_TPCDS_Q81_sample():
    assert result == 81.0


catalog_returns = [
    CatalogReturn(cust=1, state="CA", amt=40.0),
    CatalogReturn(cust=2, state="CA", amt=50.0),
    CatalogReturn(cust=3, state="CA", amt=81.0),
    CatalogReturn(cust=4, state="TX", amt=30.0),
    CatalogReturn(cust=5, state="TX", amt=20.0),
]


def _q0():
    _groups = {}
    _order = []
    for r in catalog_returns:
        _k = r.state
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(r)
    _items1 = [_groups[k] for k in _order]
    return [
        Auto1(
            state=g.key,
            avg_amt=(
                sum([x.amt for x in g]) / len([x.amt for x in g])
                if [x.amt for x in g]
                else 0
            ),
        )
        for g in _items1
    ]


avg_list = _q0()
avg_state = (
    [a for a in avg_list if a.state == "CA"][0]
    if len([a for a in avg_list if a.state == "CA"]) > 0
    else None
)
result_list = [
    r.amt
    for r in catalog_returns
    if r.state == "CA"
    and r.amt
    > (
        avg_state.get("avg_amt")
        if isinstance(avg_state, dict)
        else getattr(avg_state, "avg_amt")
    )
    * 1.2
]
result = result_list[0] if len(result_list) > 0 else None
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q81_sample()
