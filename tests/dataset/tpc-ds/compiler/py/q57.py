# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:29Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    cat: object
    call: object
    year: object
    sum_sales: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    cat: str
    call: str
    year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    cat: object
    call: object
    avg_sales: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto4:
    cat: object
    call: object

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto5:
    i_category: object
    sum_sales: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CallCenter:
    cc_call_center_sk: int
    cc_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogSale:
    item: int
    call: int
    date: int
    price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int
    d_moy: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_category: str
    i_brand: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def abs(x):
    if x >= 0.0:
        return x
    return -x


def test_TPCDS_Q57_simplified():
    assert result == []


catalog_sales = [
    CatalogSale(item=1, call=1, date=1, price=20.0),
    CatalogSale(item=1, call=1, date=2, price=20.0),
    CatalogSale(item=1, call=1, date=3, price=40.0),
]
item = [Item(i_item_sk=1, i_category="A", i_brand="B")]
call_center = [CallCenter(cc_call_center_sk=1, cc_name="C1")]
date_dim = [
    DateDim(d_date_sk=1, d_year=2000, d_moy=11),
    DateDim(d_date_sk=2, d_year=2000, d_moy=12),
    DateDim(d_date_sk=3, d_year=2001, d_moy=1),
]


def _q0():
    _src = catalog_sales
    _rows = _query(
        _src,
        [
            {"items": item, "on": lambda cs, i: cs.item == i.i_item_sk},
            {"items": date_dim, "on": lambda cs, i, d: cs.date == d.d_date_sk},
            {
                "items": call_center,
                "on": lambda cs, i, d, cc: cs.call == cc.cc_call_center_sk,
            },
        ],
        {"select": lambda cs, i, d, cc: (cs, i, d, cc)},
    )
    _groups = _group_by(
        _rows,
        lambda cs, i, d, cc: Auto2(cat=i.i_category, call=cc.cc_name, year=d.d_year),
    )
    _items1 = _groups
    return [
        Auto1(
            cat=g.key["cat"],
            call=g.key["call"],
            year=g.key["year"],
            sum_sales=sum([x[0].price for x in g]),
        )
        for g in _items1
    ]


grouped = _q0()


def _q2():
    _groups = {}
    _order = []
    for g in grouped:
        _k = Auto4(cat=g.cat, call=g.call)
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(g)
    _items1 = [_groups[k] for k in _order]
    return [
        Auto3(
            cat=gg.key["cat"],
            call=gg.key["call"],
            avg_sales=(
                sum([x.sum_sales for x in gg]) / len([x.sum_sales for x in gg])
                if [x.sum_sales for x in gg]
                else 0
            ),
        )
        for gg in _items1
    ]


avg_by_year = _q2()
result = _query(
    grouped,
    [{"items": avg_by_year, "on": lambda g, a: g.cat == a.cat and g.call == a.call}],
    {
        "select": lambda g, a: Auto5(i_category=g.cat, sum_sales=g.sum_sales),
        "where": lambda g, a: (g.year == 2001 and a.avg_sales > 0)
        and abs(g.sum_sales - a.avg_sales) / a.avg_sales > 0.1,
    },
)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q57_simplified()
