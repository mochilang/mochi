# Generated by Mochi Python compiler
from __future__ import annotations

import json


def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, "Items"):
        return len(v.Items)
    raise Exception("count() expects list or group")


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


catalog_sales = None
inventory = None
warehouse = None
item = None
customer_demographics = None
household_demographics = None
date_dim = None
result = None


def test_TPCDS_Q72_simplified():
    assert result == [
        {
            "i_item_desc": "ItemA",
            "w_warehouse_name": "Main",
            "d_week_seq": 10,
            "no_promo": 1,
            "promo": 0,
            "total_cnt": 1,
        }
    ]


def main():
    global catalog_sales
    catalog_sales = [
        {
            "cs_item_sk": 1,
            "cs_order_number": 1,
            "cs_quantity": 1,
            "cs_sold_date_sk": 1,
            "cs_ship_date_sk": 3,
            "cs_bill_cdemo_sk": 1,
            "cs_bill_hdemo_sk": 1,
            "cs_promo_sk": None,
        }
    ]
    global inventory
    inventory = [
        {
            "inv_item_sk": 1,
            "inv_warehouse_sk": 1,
            "inv_date_sk": 2,
            "inv_quantity_on_hand": 0,
        }
    ]
    global warehouse
    warehouse = [{"w_warehouse_sk": 1, "w_warehouse_name": "Main"}]
    global item
    item = [{"i_item_sk": 1, "i_item_desc": "ItemA"}]
    global customer_demographics
    customer_demographics = [{"cd_demo_sk": 1, "cd_marital_status": "M"}]
    global household_demographics
    household_demographics = [{"hd_demo_sk": 1, "hd_buy_potential": "5001-10000"}]
    global date_dim
    date_dim = [
        {"d_date_sk": 1, "d_week_seq": 10, "d_date": 1, "d_year": 2000},
        {"d_date_sk": 2, "d_week_seq": 10, "d_date": 1, "d_year": 2000},
        {"d_date_sk": 3, "d_week_seq": 10, "d_date": 7, "d_year": 2000},
    ]

    def _q0():
        _src = catalog_sales
        _rows = _query(
            _src,
            [
                {
                    "items": inventory,
                    "on": lambda cs, inv: (
                        (_get(inv, "inv_item_sk") == _get(cs, "cs_item_sk"))
                    ),
                },
                {
                    "items": warehouse,
                    "on": lambda cs, inv, w: (
                        (_get(w, "w_warehouse_sk") == _get(inv, "inv_warehouse_sk"))
                    ),
                },
                {
                    "items": item,
                    "on": lambda cs, inv, w, i: (
                        (_get(i, "i_item_sk") == _get(cs, "cs_item_sk"))
                    ),
                },
                {
                    "items": customer_demographics,
                    "on": lambda cs, inv, w, i, cd: (
                        (_get(cd, "cd_demo_sk") == _get(cs, "cs_bill_cdemo_sk"))
                    ),
                },
                {
                    "items": household_demographics,
                    "on": lambda cs, inv, w, i, cd, hd: (
                        (_get(hd, "hd_demo_sk") == _get(cs, "cs_bill_hdemo_sk"))
                    ),
                },
                {
                    "items": date_dim,
                    "on": lambda cs, inv, w, i, cd, hd, d1: (
                        (_get(d1, "d_date_sk") == _get(cs, "cs_sold_date_sk"))
                    ),
                },
                {
                    "items": date_dim,
                    "on": lambda cs, inv, w, i, cd, hd, d1, d2: (
                        (_get(d2, "d_date_sk") == _get(inv, "inv_date_sk"))
                    ),
                },
                {
                    "items": date_dim,
                    "on": lambda cs, inv, w, i, cd, hd, d1, d2, d3: (
                        (_get(d3, "d_date_sk") == _get(cs, "cs_ship_date_sk"))
                    ),
                },
            ],
            {
                "select": lambda cs, inv, w, i, cd, hd, d1, d2, d3: (
                    cs,
                    inv,
                    w,
                    i,
                    cd,
                    hd,
                    d1,
                    d2,
                    d3,
                ),
                "where": lambda cs, inv, w, i, cd, hd, d1, d2, d3: (
                    (
                        (
                            (
                                (
                                    (
                                        (
                                            _get(d1, "d_week_seq")
                                            == _get(d2, "d_week_seq")
                                        )
                                        and (
                                            _get(inv, "inv_quantity_on_hand")
                                            < _get(cs, "cs_quantity")
                                        )
                                    )
                                    and (_get(d3, "d_date") > (_get(d1, "d_date") + 5))
                                )
                                and (_get(hd, "hd_buy_potential") == "5001-10000")
                            )
                            and (_get(d1, "d_year") == 2000)
                        )
                        and (_get(cd, "cd_marital_status") == "M")
                    )
                ),
            },
        )
        _groups = _group_by(
            _rows,
            lambda cs, inv, w, i, cd, hd, d1, d2, d3: (
                {
                    "item_desc": _get(i, "i_item_desc"),
                    "warehouse": _get(w, "w_warehouse_name"),
                    "week_seq": _get(d1, "d_week_seq"),
                }
            ),
        )
        items = _groups
        return [
            {
                "i_item_desc": _get(_get(g, "key"), "item_desc"),
                "w_warehouse_name": _get(_get(g, "key"), "warehouse"),
                "d_week_seq": _get(_get(g, "key"), "week_seq"),
                "no_promo": _count([x for x in g if (_get(x, "cs_promo_sk") == None)]),
                "promo": _count([x for x in g if (_get(x, "cs_promo_sk") != None)]),
                "total_cnt": _count(g),
            }
            for g in items
        ]

    global result
    result = _q0()
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q72_simplified()


if __name__ == "__main__":
    main()
