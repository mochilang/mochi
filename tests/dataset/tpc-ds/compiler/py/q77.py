# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:58Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    channel: str
    id: int
    sales: float
    returns: float
    profit: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    s_store_sk: object
    sales: float
    profit: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    s_store_sk: object
    returns: float
    profit_loss: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto4:
    cs_call_center_sk: object
    sales: float
    profit: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto5:
    cr_call_center_sk: object
    returns: float
    profit_loss: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto6:
    wp_web_page_sk: object
    sales: float
    profit: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto7:
    wp_web_page_sk: object
    returns: float
    profit_loss: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto8:
    channel: object
    id: object

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogReturn:
    cr_returned_date_sk: int
    cr_call_center_sk: int
    cr_return_amount: float
    cr_net_loss: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogSale:
    cs_sold_date_sk: int
    cs_call_center_sk: int
    cs_ext_sales_price: float
    cs_net_profit: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_date: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreReturn:
    sr_returned_date_sk: int
    s_store_sk: int
    sr_return_amt: float
    sr_net_loss: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_sold_date_sk: int
    s_store_sk: int
    ss_ext_sales_price: float
    ss_net_profit: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class WebReturn:
    wr_returned_date_sk: int
    wr_web_page_sk: int
    wr_return_amt: float
    wr_net_loss: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class WebSale:
    ws_sold_date_sk: int
    ws_web_page_sk: int
    ws_ext_sales_price: float
    ws_net_profit: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, list):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, tuple):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, dict):
        return str(k)
    return k


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_TPCDS_Q77_simplified():
    assert result == [
        Auto1(channel="catalog channel", id=1, sales=150.0, returns=7.0, profit=12.0),
        Auto1(channel="store channel", id=1, sales=100.0, returns=5.0, profit=9.0),
        Auto1(channel="web channel", id=1, sales=200.0, returns=10.0, profit=18.0),
    ]


date_dim = [DateDim(d_date_sk=1, d_date=1)]
store_sales = [
    StoreSale(
        ss_sold_date_sk=1, s_store_sk=1, ss_ext_sales_price=100.0, ss_net_profit=10.0
    )
]
store_returns = [
    StoreReturn(sr_returned_date_sk=1, s_store_sk=1, sr_return_amt=5.0, sr_net_loss=1.0)
]
catalog_sales = [
    CatalogSale(
        cs_sold_date_sk=1,
        cs_call_center_sk=1,
        cs_ext_sales_price=150.0,
        cs_net_profit=15.0,
    )
]
catalog_returns = [
    CatalogReturn(
        cr_returned_date_sk=1,
        cr_call_center_sk=1,
        cr_return_amount=7.0,
        cr_net_loss=3.0,
    )
]
web_sales = [
    WebSale(
        ws_sold_date_sk=1,
        ws_web_page_sk=1,
        ws_ext_sales_price=200.0,
        ws_net_profit=20.0,
    )
]
web_returns = [
    WebReturn(
        wr_returned_date_sk=1, wr_web_page_sk=1, wr_return_amt=10.0, wr_net_loss=2.0
    )
]


def _q0():
    _src = store_sales
    _rows = _query(
        _src,
        [{"items": date_dim, "on": lambda ss, d: d.d_date_sk == ss.ss_sold_date_sk}],
        {"select": lambda ss, d: (ss, d)},
    )
    _groups = _group_by(_rows, lambda ss, d: ss.s_store_sk)
    _items1 = _groups
    return [
        Auto2(
            s_store_sk=g.key,
            sales=_sum([x[0].ss_ext_sales_price for x in g]),
            profit=_sum([x[0].ss_net_profit for x in g]),
        )
        for g in _items1
    ]


ss = _q0()


def _q2():
    _src = store_returns
    _rows = _query(
        _src,
        [
            {
                "items": date_dim,
                "on": lambda sr, d: d.d_date_sk == sr.sr_returned_date_sk,
            }
        ],
        {"select": lambda sr, d: (sr, d)},
    )
    _groups = _group_by(_rows, lambda sr, d: sr.s_store_sk)
    _items3 = _groups
    return [
        Auto3(
            s_store_sk=g.key,
            returns=_sum([x[0].sr_return_amt for x in g]),
            profit_loss=_sum([x[0].sr_net_loss for x in g]),
        )
        for g in _items3
    ]


sr = _q2()


def _q4():
    _src = catalog_sales
    _rows = _query(
        _src,
        [{"items": date_dim, "on": lambda cs, d: d.d_date_sk == cs.cs_sold_date_sk}],
        {"select": lambda cs, d: (cs, d)},
    )
    _groups = _group_by(_rows, lambda cs, d: cs.cs_call_center_sk)
    _items5 = _groups
    return [
        Auto4(
            cs_call_center_sk=g.key,
            sales=_sum([x[0].cs_ext_sales_price for x in g]),
            profit=_sum([x[0].cs_net_profit for x in g]),
        )
        for g in _items5
    ]


cs = _q4()


def _q6():
    _src = catalog_returns
    _rows = _query(
        _src,
        [
            {
                "items": date_dim,
                "on": lambda cr, d: d.d_date_sk == cr.cr_returned_date_sk,
            }
        ],
        {"select": lambda cr, d: (cr, d)},
    )
    _groups = _group_by(_rows, lambda cr, d: cr.cr_call_center_sk)
    _items7 = _groups
    return [
        Auto5(
            cr_call_center_sk=g.key,
            returns=_sum([x[0].cr_return_amount for x in g]),
            profit_loss=_sum([x[0].cr_net_loss for x in g]),
        )
        for g in _items7
    ]


cr = _q6()


def _q8():
    _src = web_sales
    _rows = _query(
        _src,
        [{"items": date_dim, "on": lambda ws, d: d.d_date_sk == ws.ws_sold_date_sk}],
        {"select": lambda ws, d: (ws, d)},
    )
    _groups = _group_by(_rows, lambda ws, d: ws.ws_web_page_sk)
    _items9 = _groups
    return [
        Auto6(
            wp_web_page_sk=g.key,
            sales=_sum([x[0].ws_ext_sales_price for x in g]),
            profit=_sum([x[0].ws_net_profit for x in g]),
        )
        for g in _items9
    ]


ws = _q8()


def _q10():
    _src = web_returns
    _rows = _query(
        _src,
        [
            {
                "items": date_dim,
                "on": lambda wr, d: d.d_date_sk == wr.wr_returned_date_sk,
            }
        ],
        {"select": lambda wr, d: (wr, d)},
    )
    _groups = _group_by(_rows, lambda wr, d: wr.wr_web_page_sk)
    _items11 = _groups
    return [
        Auto7(
            wp_web_page_sk=g.key,
            returns=_sum([x[0].wr_return_amt for x in g]),
            profit_loss=_sum([x[0].wr_net_loss for x in g]),
        )
        for g in _items11
    ]


wr = _q10()
per_channel = (
    _query(
        ss,
        [{"items": sr, "on": lambda s, r: s.s_store_sk == r.s_store_sk, "left": True}],
        {
            "select": lambda s, r: Auto1(
                channel="store channel",
                id=s.s_store_sk,
                sales=s.sales,
                returns=0.0 if r == None else r.returns,
                profit=s.profit - (0.0 if r == None else r.profit_loss),
            )
        },
    )
    + _query(
        cs,
        [{"items": cr, "on": lambda c, r: c.cs_call_center_sk == r.cr_call_center_sk}],
        {
            "select": lambda c, r: Auto1(
                channel="catalog channel",
                id=c.cs_call_center_sk,
                sales=c.sales,
                returns=r.returns,
                profit=c.profit - r.profit_loss,
            )
        },
    )
    + _query(
        ws,
        [
            {
                "items": wr,
                "on": lambda w, r: w.wp_web_page_sk == r.wp_web_page_sk,
                "left": True,
            }
        ],
        {
            "select": lambda w, r: Auto1(
                channel="web channel",
                id=w.wp_web_page_sk,
                sales=w.sales,
                returns=0.0 if r == None else r.returns,
                profit=w.profit - (0.0 if r == None else r.profit_loss),
            )
        },
    )
)


def _q12():
    _src = per_channel
    _rows = _query(_src, [], {"select": lambda p: p})
    _groups = _group_by(
        _rows,
        lambda p: Auto8(
            channel=p.get("channel") if isinstance(p, dict) else getattr(p, "channel"),
            id=p.get("id") if isinstance(p, dict) else getattr(p, "id"),
        ),
    )
    _items13 = _groups
    _items13 = sorted(_items13, key=lambda g: _sort_key(g.key["channel"]))
    return [
        Auto1(
            channel=g.key["channel"],
            id=g.key["id"],
            sales=_sum(
                [
                    (
                        (x.get("p") if isinstance(x, dict) else getattr(x, "p")).get(
                            "sales"
                        )
                        if isinstance(
                            x.get("p") if isinstance(x, dict) else getattr(x, "p"), dict
                        )
                        else getattr(
                            x.get("p") if isinstance(x, dict) else getattr(x, "p"),
                            "sales",
                        )
                    )
                    for x in g
                ]
            ),
            returns=_sum(
                [
                    (
                        (x.get("p") if isinstance(x, dict) else getattr(x, "p")).get(
                            "returns"
                        )
                        if isinstance(
                            x.get("p") if isinstance(x, dict) else getattr(x, "p"), dict
                        )
                        else getattr(
                            x.get("p") if isinstance(x, dict) else getattr(x, "p"),
                            "returns",
                        )
                    )
                    for x in g
                ]
            ),
            profit=_sum(
                [
                    (
                        (x.get("p") if isinstance(x, dict) else getattr(x, "p")).get(
                            "profit"
                        )
                        if isinstance(
                            x.get("p") if isinstance(x, dict) else getattr(x, "p"), dict
                        )
                        else getattr(
                            x.get("p") if isinstance(x, dict) else getattr(x, "p"),
                            "profit",
                        )
                    )
                    for x in g
                ]
            ),
        )
        for g in _items13
    ]


result = _q12()
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q77_simplified()
