# Generated by Mochi Python compiler
from __future__ import annotations

import json


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _reverse(obj):
    if isinstance(obj, list):
        return list(reversed(obj))
    if isinstance(obj, str):
        return obj[::-1]
    raise Exception("reverse expects list or string")


def _slice(obj, i, j):
    start = i
    end = j
    n = len(obj)
    if start < 0:
        start += n
    if end < 0:
        end += n
    if start < 0:
        start = 0
    if end > n:
        end = n
    if end < start:
        end = start
    return obj[start:end]


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


store_sales = None
date_dim = None
store = None
customer_address = None
customer = None
zip_list = ["12345"]
result = None


def test_TPCDS_Q8_result():
    assert result == [{"s_store_name": "Store1", "net_profit": 10}]


def main():
    global store_sales
    store_sales = [{"ss_store_sk": 1, "ss_sold_date_sk": 1, "ss_net_profit": 10}]
    global date_dim
    date_dim = [{"d_date_sk": 1, "d_qoy": 1, "d_year": 1998}]
    global store
    store = [{"s_store_sk": 1, "s_store_name": "Store1", "s_zip": "12345"}]
    global customer_address
    customer_address = [{"ca_address_sk": 1, "ca_zip": "12345"}]
    global customer
    customer = [
        {"c_customer_sk": 1, "c_current_addr_sk": 1, "c_preferred_cust_flag": "Y"}
    ]
    _reverse("zi")
    global zip_list
    zip_list = ["12345"]

    def _q0():
        _src = store_sales
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda ss, d: (
                        (
                            (
                                (_get(ss, "ss_sold_date_sk") == _get(d, "d_date_sk"))
                                and (_get(d, "d_qoy") == 1)
                            )
                            and (_get(d, "d_year") == 1998)
                        )
                    ),
                },
                {
                    "items": store,
                    "on": lambda ss, d, s: (
                        (_get(ss, "ss_store_sk") == _get(s, "s_store_sk"))
                    ),
                },
                {
                    "items": customer_address,
                    "on": lambda ss, d, s, ca: (
                        (
                            _slice(_get(s, "s_zip"), 0, 2)
                            == _slice(_get(ca, "ca_zip"), 0, 2)
                        )
                    ),
                },
                {
                    "items": customer,
                    "on": lambda ss, d, s, ca, c: (
                        (
                            (_get(ca, "ca_address_sk") == _get(c, "c_current_addr_sk"))
                            and (_get(c, "c_preferred_cust_flag") == "Y")
                        )
                    ),
                },
            ],
            {
                "select": lambda ss, d, s, ca, c: (ss, d, s, ca, c),
                "where": lambda ss, d, s, ca, c: (
                    (_slice(_get(ca, "ca_zip"), 0, 5) in zip_list)
                ),
            },
        )
        _groups = _group_by(_rows, lambda ss, d, s, ca, c: (_get(s, "s_store_name")))
        items = _groups
        items = sorted(items, key=lambda g: _sort_key(_get(g, "key")))
        return [
            {
                "s_store_name": _get(g, "key"),
                "net_profit": _sum([_get(x[0], "ss_net_profit") for x in g]),
            }
            for g in items
        ]

    global result
    result = _q0()
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q8_result()


if __name__ == "__main__":
    main()
