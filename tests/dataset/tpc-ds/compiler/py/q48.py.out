# Generated by Mochi Python compiler
from __future__ import annotations

import json


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


store_sales = None
store = None
customer_demographics = None
customer_address = None
date_dim = None
year = 2000
states1 = ["TX"]
states2 = ["CA"]
states3 = ["NY"]
qty_base = None
qty = None
result = None


def test_TPCDS_Q48_simplified():
    assert result == 35


def main():
    global store_sales
    store_sales = [
        {
            "cdemo_sk": 1,
            "addr_sk": 1,
            "sold_date_sk": 1,
            "sales_price": 120,
            "net_profit": 1000,
            "quantity": 5,
        },
        {
            "cdemo_sk": 2,
            "addr_sk": 2,
            "sold_date_sk": 1,
            "sales_price": 60,
            "net_profit": 2000,
            "quantity": 10,
        },
        {
            "cdemo_sk": 3,
            "addr_sk": 3,
            "sold_date_sk": 1,
            "sales_price": 170,
            "net_profit": 10000,
            "quantity": 20,
        },
    ]
    global store
    store = [{"s_store_sk": 1}]
    global customer_demographics
    customer_demographics = [
        {"cd_demo_sk": 1, "cd_marital_status": "S", "cd_education_status": "E1"},
        {"cd_demo_sk": 2, "cd_marital_status": "M", "cd_education_status": "E2"},
        {"cd_demo_sk": 3, "cd_marital_status": "W", "cd_education_status": "E3"},
    ]
    global customer_address
    customer_address = [
        {"ca_address_sk": 1, "ca_country": "United States", "ca_state": "TX"},
        {"ca_address_sk": 2, "ca_country": "United States", "ca_state": "CA"},
        {"ca_address_sk": 3, "ca_country": "United States", "ca_state": "NY"},
    ]
    global date_dim
    date_dim = [{"d_date_sk": 1, "d_year": 2000}]
    global year
    year = 2000
    global states1
    states1 = ["TX"]
    global states2
    states2 = ["CA"]
    global states3
    states3 = ["NY"]
    global qty_base
    qty_base = _query(
        store_sales,
        [
            {
                "items": customer_demographics,
                "on": lambda ss, cd: ((_get(ss, "cdemo_sk") == _get(cd, "cd_demo_sk"))),
            },
            {
                "items": customer_address,
                "on": lambda ss, cd, ca: (
                    (_get(ss, "addr_sk") == _get(ca, "ca_address_sk"))
                ),
            },
            {
                "items": date_dim,
                "on": lambda ss, cd, ca, d: (
                    (_get(ss, "sold_date_sk") == _get(d, "d_date_sk"))
                ),
            },
        ],
        {
            "select": lambda ss, cd, ca, d: _get(ss, "quantity"),
            "where": lambda ss, cd, ca, d: (
                (
                    (
                        (_get(d, "d_year") == year)
                        and (
                            (
                                (
                                    (
                                        (
                                            (
                                                (
                                                    (
                                                        _get(cd, "cd_marital_status")
                                                        == "S"
                                                    )
                                                    and (
                                                        _get(cd, "cd_education_status")
                                                        == "E1"
                                                    )
                                                )
                                                and (_get(ss, "sales_price") >= 100)
                                            )
                                            and (_get(ss, "sales_price") <= 150)
                                        )
                                    )
                                    or (
                                        (
                                            (
                                                (
                                                    (
                                                        _get(cd, "cd_marital_status")
                                                        == "M"
                                                    )
                                                    and (
                                                        _get(cd, "cd_education_status")
                                                        == "E2"
                                                    )
                                                )
                                                and (_get(ss, "sales_price") >= 50)
                                            )
                                            and (_get(ss, "sales_price") <= 100)
                                        )
                                    )
                                )
                                or (
                                    (
                                        (
                                            (
                                                (_get(cd, "cd_marital_status") == "W")
                                                and (
                                                    _get(cd, "cd_education_status")
                                                    == "E3"
                                                )
                                            )
                                            and (_get(ss, "sales_price") >= 150)
                                        )
                                        and (_get(ss, "sales_price") <= 200)
                                    )
                                )
                            )
                        )
                    )
                    and (
                        (
                            (
                                (
                                    (
                                        (
                                            (_get(ca, "ca_state") in states1)
                                            and (_get(ss, "net_profit") >= 0)
                                        )
                                        and (_get(ss, "net_profit") <= 2000)
                                    )
                                )
                                or (
                                    (
                                        (
                                            (_get(ca, "ca_state") in states2)
                                            and (_get(ss, "net_profit") >= 150)
                                        )
                                        and (_get(ss, "net_profit") <= 3000)
                                    )
                                )
                            )
                            or (
                                (
                                    (
                                        (_get(ca, "ca_state") in states3)
                                        and (_get(ss, "net_profit") >= 50)
                                    )
                                    and (_get(ss, "net_profit") <= 25000)
                                )
                            )
                        )
                    )
                )
            ),
        },
    )
    global qty
    qty = qty_base
    global result
    result = _sum(qty)
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q48_simplified()


if __name__ == "__main__":
    main()
