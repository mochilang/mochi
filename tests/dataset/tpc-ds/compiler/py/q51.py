# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:22Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    date: int
    cum: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    item_sk: int
    d_date: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    date: int
    price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class WebSale:
    item: int
    date: int
    price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def cumulative(xs):
    out = []
    acc = 0.0
    for x in xs:
        acc = acc + x.price
        out = out + [Auto1(date=x.date, cum=acc)]
    return out


def test_TPCDS_Q51_simplified():
    assert result == [Auto2(item_sk=1, d_date=1), Auto2(item_sk=1, d_date=2)]


web_sales = [WebSale(item=1, date=1, price=30.0), WebSale(item=1, date=2, price=20.0)]
store_sales = [WebSale(item=1, date=1, price=5.0), WebSale(item=1, date=2, price=19.0)]
dms = 1
web_cum = cumulative(
    [
        Auto3(date=w.date, price=w.price)
        for w in sorted([w for w in web_sales], key=lambda w: w.date)
    ]
)
store_cum = cumulative(
    [
        Auto3(date=s.date, price=s.price)
        for s in sorted([s for s in store_sales], key=lambda s: s.date)
    ]
)
joined = _query(
    web_cum,
    [{"items": store_cum, "on": lambda w, s: w.date == s.date}],
    {
        "select": lambda w, s: Auto2(item_sk=1, d_date=w.date),
        "where": lambda w, s: w.cum > s.cum,
    },
)
result = joined
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q51_simplified()
