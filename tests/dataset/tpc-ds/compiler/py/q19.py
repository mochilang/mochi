# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:49:47Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    i_brand: str
    i_brand_id: int
    i_manufact_id: int
    i_manufact: str
    ext_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    brand: str
    brand_id: int
    man_id: int
    man: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_current_addr_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerAddres:
    ca_address_sk: int
    ca_zip: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int
    d_moy: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_brand_id: int
    i_brand: str
    i_manufact_id: int
    i_manufact: str
    i_manager_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_zip: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_sold_date_sk: int
    ss_item_sk: int
    ss_customer_sk: int
    ss_store_sk: int
    ss_ext_sales_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, list):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, tuple):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, dict):
        return str(k)
    return k


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


@dataclasses.dataclass
class StoreSale:
    ss_sold_date_sk: int
    ss_item_sk: int
    ss_customer_sk: int
    ss_store_sk: int
    ss_ext_sales_price: float

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int
    d_moy: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_brand_id: int
    i_brand: str
    i_manufact_id: int
    i_manufact: str
    i_manager_id: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_current_addr_sk: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerAddress:
    ca_address_sk: int
    ca_zip: str

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_zip: str

    def __contains__(self, key):
        return hasattr(self, key)


def test_TPCDS_Q19_brand():
    assert result == [
        Auto1(
            i_brand="B1",
            i_brand_id=1,
            i_manufact_id=1,
            i_manufact="M1",
            ext_price=100.0,
        )
    ]


store_sales = [
    StoreSale(
        ss_sold_date_sk=1,
        ss_item_sk=1,
        ss_customer_sk=1,
        ss_store_sk=1,
        ss_ext_sales_price=100.0,
    )
]
date_dim = [DateDim(d_date_sk=1, d_year=1999, d_moy=11)]
item = [
    Item(
        i_item_sk=1,
        i_brand_id=1,
        i_brand="B1",
        i_manufact_id=1,
        i_manufact="M1",
        i_manager_id=10,
    )
]
customer = [Customer(c_customer_sk=1, c_current_addr_sk=1)]
customer_address = [CustomerAddres(ca_address_sk=1, ca_zip="11111")]
store = [Store(s_store_sk=1, s_zip="99999")]


def _q0():
    _src = date_dim
    _rows = _query(
        _src,
        [
            {
                "items": store_sales,
                "on": lambda d, ss: ss.ss_sold_date_sk == d.d_date_sk,
            },
            {
                "items": item,
                "on": lambda d, ss, i: ss.ss_item_sk == i.i_item_sk
                and i.i_manager_id == 10,
            },
            {
                "items": customer,
                "on": lambda d, ss, i, c: ss.ss_customer_sk == c.c_customer_sk,
            },
            {
                "items": customer_address,
                "on": lambda d, ss, i, c, ca: c.c_current_addr_sk == ca.ca_address_sk,
            },
            {
                "items": store,
                "on": lambda d, ss, i, c, ca, s: ss.ss_store_sk == s.s_store_sk
                and ca.ca_zip[0:5] != s.s_zip[0:5],
            },
        ],
        {
            "select": lambda d, ss, i, c, ca, s: (d, ss, i, c, ca, s),
            "where": lambda d, ss, i, c, ca, s: d.d_moy == 11 and d.d_year == 1999,
        },
    )
    _groups = _group_by(
        _rows,
        lambda d, ss, i, c, ca, s: Auto2(
            brand=i.i_brand,
            brand_id=i.i_brand_id,
            man_id=i.i_manufact_id,
            man=i.i_manufact,
        ),
    )
    _items1 = _groups
    _items1 = sorted(_items1, key=lambda g: _sort_key([g.key["brand"]]))
    return [
        Auto1(
            i_brand=g.key["brand"],
            i_brand_id=g.key["brand_id"],
            i_manufact_id=g.key["man_id"],
            i_manufact=g.key["man"],
            ext_price=_sum([x[1].ss_ext_sales_price for x in g]),
        )
        for g in _items1
    ]


result = _q0()
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q19_brand()
