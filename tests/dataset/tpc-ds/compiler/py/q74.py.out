# Generated by Mochi Python compiler
from __future__ import annotations

import json


def _first(lst):
    if not isinstance(lst, list):
        raise Exception("first expects list")
    return lst[0] if len(lst) > 0 else None


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def _union_all(a, b):
    return list(a) + list(b)


customer = None
date_dim = None
store_sales = None
web_sales = None
year_total = None
s_firstyear = None
s_secyear = None
w_firstyear = None
w_secyear = None
result = None


def test_TPCDS_Q74_simplified():
    assert result == [
        {
            "customer_id": 1,
            "customer_first_name": "Alice",
            "customer_last_name": "Smith",
        }
    ]


def main():
    global customer
    customer = [
        {
            "c_customer_sk": 1,
            "c_customer_id": 1,
            "c_first_name": "Alice",
            "c_last_name": "Smith",
        }
    ]
    global date_dim
    date_dim = [{"d_date_sk": 1, "d_year": 1998}, {"d_date_sk": 2, "d_year": 1999}]
    global store_sales
    store_sales = [
        {"ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_net_paid": 100},
        {"ss_customer_sk": 1, "ss_sold_date_sk": 2, "ss_net_paid": 110},
    ]
    global web_sales
    web_sales = [
        {"ws_bill_customer_sk": 1, "ws_sold_date_sk": 1, "ws_net_paid": 40},
        {"ws_bill_customer_sk": 1, "ws_sold_date_sk": 2, "ws_net_paid": 80},
    ]

    def _q0():
        _src = customer
        _rows = _query(
            _src,
            [
                {
                    "items": store_sales,
                    "on": lambda c, ss: (
                        (_get(c, "c_customer_sk") == _get(ss, "ss_customer_sk"))
                    ),
                },
                {
                    "items": date_dim,
                    "on": lambda c, ss, d: (
                        (_get(d, "d_date_sk") == _get(ss, "ss_sold_date_sk"))
                    ),
                },
            ],
            {
                "select": lambda c, ss, d: (c, ss, d),
                "where": lambda c, ss, d: (
                    ((_get(d, "d_year") == 1998) or (_get(d, "d_year") == 1999))
                ),
            },
        )
        _groups = _group_by(
            _rows,
            lambda c, ss, d: (
                {
                    "id": _get(c, "c_customer_id"),
                    "first": _get(c, "c_first_name"),
                    "last": _get(c, "c_last_name"),
                    "year": _get(d, "d_year"),
                }
            ),
        )
        items = _groups
        return [
            {
                "customer_id": _get(_get(g, "key"), "id"),
                "customer_first_name": _get(_get(g, "key"), "first"),
                "customer_last_name": _get(_get(g, "key"), "last"),
                "year": _get(_get(g, "key"), "year"),
                "year_total": _sum([_get(x[1], "ss_net_paid") for x in g]),
                "sale_type": "s",
            }
            for g in items
        ]

    def _q1():
        _src = customer
        _rows = _query(
            _src,
            [
                {
                    "items": web_sales,
                    "on": lambda c, ws: (
                        (_get(c, "c_customer_sk") == _get(ws, "ws_bill_customer_sk"))
                    ),
                },
                {
                    "items": date_dim,
                    "on": lambda c, ws, d: (
                        (_get(d, "d_date_sk") == _get(ws, "ws_sold_date_sk"))
                    ),
                },
            ],
            {
                "select": lambda c, ws, d: (c, ws, d),
                "where": lambda c, ws, d: (
                    ((_get(d, "d_year") == 1998) or (_get(d, "d_year") == 1999))
                ),
            },
        )
        _groups = _group_by(
            _rows,
            lambda c, ws, d: (
                {
                    "id": _get(c, "c_customer_id"),
                    "first": _get(c, "c_first_name"),
                    "last": _get(c, "c_last_name"),
                    "year": _get(d, "d_year"),
                }
            ),
        )
        items = _groups
        return [
            {
                "customer_id": _get(_get(g, "key"), "id"),
                "customer_first_name": _get(_get(g, "key"), "first"),
                "customer_last_name": _get(_get(g, "key"), "last"),
                "year": _get(_get(g, "key"), "year"),
                "year_total": _sum([_get(x[1], "ws_net_paid") for x in g]),
                "sale_type": "w",
            }
            for g in items
        ]

    global year_total
    year_total = _union_all(_q0(), _q1())
    global s_firstyear
    s_firstyear = _first(
        [
            y
            for y in year_total
            if ((_get(y, "sale_type") == "s") and (_get(y, "year") == 1998))
        ]
    )
    global s_secyear
    s_secyear = _first(
        [
            y
            for y in year_total
            if ((_get(y, "sale_type") == "s") and (_get(y, "year") == 1999))
        ]
    )
    global w_firstyear
    w_firstyear = _first(
        [
            y
            for y in year_total
            if ((_get(y, "sale_type") == "w") and (_get(y, "year") == 1998))
        ]
    )
    global w_secyear
    w_secyear = _first(
        [
            y
            for y in year_total
            if ((_get(y, "sale_type") == "w") and (_get(y, "year") == 1999))
        ]
    )
    global result
    result = (
        [
            {
                "customer_id": _get(s_secyear, "customer_id"),
                "customer_first_name": _get(s_secyear, "customer_first_name"),
                "customer_last_name": _get(s_secyear, "customer_last_name"),
            }
        ]
        if (
            (
                (_get(s_firstyear, "year_total") > 0)
                and (_get(w_firstyear, "year_total") > 0)
            )
            and (
                ((_get(w_secyear, "year_total") / _get(w_firstyear, "year_total")))
                > ((_get(s_secyear, "year_total") / _get(s_firstyear, "year_total")))
            )
        )
        else []
    )
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q74_simplified()


if __name__ == "__main__":
    main()
