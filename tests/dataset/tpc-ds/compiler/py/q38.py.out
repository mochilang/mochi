# Generated by Mochi Python compiler
from __future__ import annotations

import json
import typing


def _append(lst, v):
    out = list(lst) if lst is not None else []
    out.append(v)
    return out


def _contains(c, v):
    if isinstance(c, list):
        return v in c
    if isinstance(c, str):
        return str(v) in c
    if isinstance(c, dict):
        return str(v) in c
    return False


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _intersect(a, b):
    res = []
    for it in a:
        if it in b and it not in res:
            res.append(it)
    return res


def distinct(xs: list[typing.Any]) -> list[typing.Any]:
    out = []
    for x in xs:
        if not _contains(out, x):
            out = _append(out, x)
    return out


customer = None
store_sales = None
catalog_sales = None
web_sales = None
store_ids = None
catalog_ids = None
web_ids = None
hot = None
result = None


def test_TPCDS_Q38_simplified():
    assert result == 1


def main():
    global customer
    customer = [
        {"c_customer_sk": 1, "c_last_name": "Smith", "c_first_name": "John"},
        {"c_customer_sk": 2, "c_last_name": "Jones", "c_first_name": "Alice"},
    ]
    global store_sales
    store_sales = [
        {"ss_customer_sk": 1, "d_month_seq": 1200},
        {"ss_customer_sk": 2, "d_month_seq": 1205},
    ]
    global catalog_sales
    catalog_sales = [{"cs_bill_customer_sk": 1, "d_month_seq": 1203}]
    global web_sales
    web_sales = [{"ws_bill_customer_sk": 1, "d_month_seq": 1206}]
    global store_ids
    store_ids = distinct(
        [
            _get(s, "ss_customer_sk")
            for s in store_sales
            if ((_get(s, "d_month_seq") >= 1200) and (_get(s, "d_month_seq") <= 1211))
        ]
    )
    global catalog_ids
    catalog_ids = distinct(
        [
            _get(c, "cs_bill_customer_sk")
            for c in catalog_sales
            if ((_get(c, "d_month_seq") >= 1200) and (_get(c, "d_month_seq") <= 1211))
        ]
    )
    global web_ids
    web_ids = distinct(
        [
            _get(w, "ws_bill_customer_sk")
            for w in web_sales
            if ((_get(w, "d_month_seq") >= 1200) and (_get(w, "d_month_seq") <= 1211))
        ]
    )
    global hot
    hot = _intersect(_intersect(store_ids, catalog_ids), web_ids)
    global result
    result = len(hot)
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q38_simplified()


if __name__ == "__main__":
    main()
