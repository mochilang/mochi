# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _max(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("max() expects list or group")
    vals = [it for it in v if it is not None]
    if not vals:
        return 0
    return max(vals)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


@dataclasses.dataclass
class StoreSale:
    ss_item_sk: int
    ss_sold_date_sk: int
    ss_customer_sk: int
    ss_quantity: int
    ss_sales_price: float


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int
    d_moy: int


@dataclasses.dataclass
class Item:
    i_item_sk: int


@dataclasses.dataclass
class CatalogSale:
    cs_sold_date_sk: int
    cs_item_sk: int
    cs_bill_customer_sk: int
    cs_quantity: int
    cs_list_price: float


@dataclasses.dataclass
class WebSale:
    ws_sold_date_sk: int
    ws_item_sk: int
    ws_bill_customer_sk: int
    ws_quantity: int
    ws_list_price: float


store_sales = None
date_dim = None
item = None
catalog_sales = None
web_sales = None
frequent_ss_items = None
customer_totals = None
max_sales = None
best_ss_customer = None
catalog = None
web = None
result = None


def test_TPCDS_Q23_cross_channel_sales():
    assert result == 50


def main():
    global store_sales
    store_sales = [
        {
            "ss_item_sk": 1,
            "ss_sold_date_sk": 1,
            "ss_customer_sk": 1,
            "ss_quantity": 1,
            "ss_sales_price": 10,
        },
        {
            "ss_item_sk": 1,
            "ss_sold_date_sk": 1,
            "ss_customer_sk": 1,
            "ss_quantity": 1,
            "ss_sales_price": 10,
        },
        {
            "ss_item_sk": 1,
            "ss_sold_date_sk": 1,
            "ss_customer_sk": 1,
            "ss_quantity": 1,
            "ss_sales_price": 10,
        },
        {
            "ss_item_sk": 1,
            "ss_sold_date_sk": 1,
            "ss_customer_sk": 1,
            "ss_quantity": 1,
            "ss_sales_price": 10,
        },
        {
            "ss_item_sk": 1,
            "ss_sold_date_sk": 1,
            "ss_customer_sk": 1,
            "ss_quantity": 1,
            "ss_sales_price": 10,
        },
        {
            "ss_item_sk": 2,
            "ss_sold_date_sk": 1,
            "ss_customer_sk": 2,
            "ss_quantity": 1,
            "ss_sales_price": 10,
        },
        {
            "ss_item_sk": 2,
            "ss_sold_date_sk": 1,
            "ss_customer_sk": 2,
            "ss_quantity": 1,
            "ss_sales_price": 10,
        },
        {
            "ss_item_sk": 2,
            "ss_sold_date_sk": 1,
            "ss_customer_sk": 2,
            "ss_quantity": 1,
            "ss_sales_price": 10,
        },
    ]
    global date_dim
    date_dim = [{"d_date_sk": 1, "d_year": 2000, "d_moy": 1}]
    global item
    item = [{"i_item_sk": 1}, {"i_item_sk": 2}]
    global catalog_sales
    catalog_sales = [
        {
            "cs_sold_date_sk": 1,
            "cs_item_sk": 1,
            "cs_bill_customer_sk": 1,
            "cs_quantity": 2,
            "cs_list_price": 10,
        },
        {
            "cs_sold_date_sk": 1,
            "cs_item_sk": 2,
            "cs_bill_customer_sk": 2,
            "cs_quantity": 2,
            "cs_list_price": 10,
        },
    ]
    global web_sales
    web_sales = [
        {
            "ws_sold_date_sk": 1,
            "ws_item_sk": 1,
            "ws_bill_customer_sk": 1,
            "ws_quantity": 3,
            "ws_list_price": 10,
        },
        {
            "ws_sold_date_sk": 1,
            "ws_item_sk": 2,
            "ws_bill_customer_sk": 2,
            "ws_quantity": 1,
            "ws_list_price": 10,
        },
    ]

    def _q0():
        _src = store_sales
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda ss, d: (
                        (_get(ss, "ss_sold_date_sk") == _get(d, "d_date_sk"))
                    ),
                },
                {
                    "items": item,
                    "on": lambda ss, d, i: (
                        (_get(ss, "ss_item_sk") == _get(i, "i_item_sk"))
                    ),
                },
            ],
            {
                "select": lambda ss, d, i: (ss, d, i),
                "where": lambda ss, d, i: ((_get(d, "d_year") == 2000)),
            },
        )
        _groups = _group_by(
            _rows,
            lambda ss, d, i: (
                {"item_sk": _get(i, "i_item_sk"), "date_sk": _get(d, "d_date_sk")}
            ),
        )
        items = _groups
        return [_get(_get(g, "key"), "item_sk") for g in items]

    global frequent_ss_items
    frequent_ss_items = _q0()

    def _q1():
        _src = store_sales
        _rows = _query(_src, [], {"select": lambda ss: (ss)})
        _groups = _group_by(_rows, lambda ss: (_get(ss, "ss_customer_sk")))
        items = _groups
        return [
            {
                "cust": _get(g, "key"),
                "sales": _sum(
                    [(_get(x, "ss_quantity") * _get(x, "ss_sales_price")) for x in g]
                ),
            }
            for g in items
        ]

    global customer_totals
    customer_totals = _q1()
    global max_sales
    max_sales = _max([_get(c, "sales") for c in customer_totals])
    global best_ss_customer
    best_ss_customer = [
        _get(c, "cust")
        for c in customer_totals
        if (_get(c, "sales") > (0.95 * max_sales))
    ]
    global catalog
    catalog = _query(
        catalog_sales,
        [
            {
                "items": date_dim,
                "on": lambda cs, d: (
                    (_get(cs, "cs_sold_date_sk") == _get(d, "d_date_sk"))
                ),
            }
        ],
        {
            "select": lambda cs, d: (
                _get(cs, "cs_quantity") * _get(cs, "cs_list_price")
            ),
            "where": lambda cs, d: (
                (
                    (
                        ((_get(d, "d_year") == 2000) and (_get(d, "d_moy") == 1))
                        and (_get(cs, "cs_bill_customer_sk") in best_ss_customer)
                    )
                    and (_get(cs, "cs_item_sk") in frequent_ss_items)
                )
            ),
        },
    )
    global web
    web = _query(
        web_sales,
        [
            {
                "items": date_dim,
                "on": lambda ws, d: (
                    (_get(ws, "ws_sold_date_sk") == _get(d, "d_date_sk"))
                ),
            }
        ],
        {
            "select": lambda ws, d: (
                _get(ws, "ws_quantity") * _get(ws, "ws_list_price")
            ),
            "where": lambda ws, d: (
                (
                    (
                        ((_get(d, "d_year") == 2000) and (_get(d, "d_moy") == 1))
                        and (_get(ws, "ws_bill_customer_sk") in best_ss_customer)
                    )
                    and (_get(ws, "ws_item_sk") in frequent_ss_items)
                )
            ),
        },
    )
    global result
    result = _sum(catalog) + _sum(web)
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q23_cross_channel_sales()


if __name__ == "__main__":
    main()
