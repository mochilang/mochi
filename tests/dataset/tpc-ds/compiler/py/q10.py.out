# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing


def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, "Items"):
        return len(v.Items)
    raise Exception("count() expects list or group")


def _exists(v):
    if hasattr(v, "Items"):
        v = v.Items
    if isinstance(v, (list, dict, str)):
        return len(v) > 0
    raise Exception("exists expects list, map or string")


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_current_addr_sk: int
    c_current_cdemo_sk: int


@dataclasses.dataclass
class CustomerAddress:
    ca_address_sk: int
    ca_county: str


@dataclasses.dataclass
class CustomerDemographics:
    cd_demo_sk: int
    cd_gender: str
    cd_marital_status: str
    cd_education_status: str
    cd_purchase_estimate: int
    cd_credit_rating: str
    cd_dep_count: int
    cd_dep_employed_count: int
    cd_dep_college_count: int


@dataclasses.dataclass
class StoreSale:
    ss_customer_sk: int
    ss_sold_date_sk: int


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int
    d_moy: int


customer = None
customer_address = None
customer_demographics = None
store_sales = None
web_sales = []
catalog_sales = []
date_dim = None
active = None
result = None


def test_TPCDS_Q10_demographics_count():
    assert result == [
        {
            "cd_gender": "F",
            "cd_marital_status": "M",
            "cd_education_status": "College",
            "cnt1": 1,
            "cd_purchase_estimate": 5000,
            "cnt2": 1,
            "cd_credit_rating": "Good",
            "cnt3": 1,
            "cd_dep_count": 1,
            "cnt4": 1,
            "cd_dep_employed_count": 1,
            "cnt5": 1,
            "cd_dep_college_count": 0,
            "cnt6": 1,
        }
    ]


def main():
    global customer
    customer = [{"c_customer_sk": 1, "c_current_addr_sk": 1, "c_current_cdemo_sk": 1}]
    global customer_address
    customer_address = [{"ca_address_sk": 1, "ca_county": "CountyA"}]
    global customer_demographics
    customer_demographics = [
        {
            "cd_demo_sk": 1,
            "cd_gender": "F",
            "cd_marital_status": "M",
            "cd_education_status": "College",
            "cd_purchase_estimate": 5000,
            "cd_credit_rating": "Good",
            "cd_dep_count": 1,
            "cd_dep_employed_count": 1,
            "cd_dep_college_count": 0,
        }
    ]
    global store_sales
    store_sales = [{"ss_customer_sk": 1, "ss_sold_date_sk": 1}]
    global web_sales
    web_sales = []
    global catalog_sales
    catalog_sales = []
    global date_dim
    date_dim = [{"d_date_sk": 1, "d_year": 2000, "d_moy": 2}]
    global active
    active = _query(
        customer,
        [
            {
                "items": customer_address,
                "on": lambda c, ca: (
                    (
                        (_get(c, "c_current_addr_sk") == _get(ca, "ca_address_sk"))
                        and (_get(ca, "ca_county") == "CountyA")
                    )
                ),
            },
            {
                "items": customer_demographics,
                "on": lambda c, ca, cd: (
                    (_get(c, "c_current_cdemo_sk") == _get(cd, "cd_demo_sk"))
                ),
            },
        ],
        {
            "select": lambda c, ca, cd: cd,
            "where": lambda c, ca, cd: (
                _exists(
                    _query(
                        store_sales,
                        [
                            {
                                "items": date_dim,
                                "on": lambda ss, d: (
                                    (
                                        _get(ss, "ss_sold_date_sk")
                                        == _get(d, "d_date_sk")
                                    )
                                ),
                            }
                        ],
                        {
                            "select": lambda ss, d: ss,
                            "where": lambda ss, d: (
                                (
                                    (
                                        (
                                            (
                                                _get(ss, "ss_customer_sk")
                                                == _get(c, "c_customer_sk")
                                            )
                                            and (_get(d, "d_year") == 2000)
                                        )
                                        and (_get(d, "d_moy") >= 2)
                                    )
                                    and (_get(d, "d_moy") <= 5)
                                )
                            ),
                        },
                    )
                )
            ),
        },
    )

    def _q0():
        _src = active
        _rows = _query(_src, [], {"select": lambda a: (a)})
        _groups = _group_by(
            _rows,
            lambda a: (
                {
                    "gender": _get(a, "cd_gender"),
                    "marital": _get(a, "cd_marital_status"),
                    "education": _get(a, "cd_education_status"),
                    "purchase": _get(a, "cd_purchase_estimate"),
                    "credit": _get(a, "cd_credit_rating"),
                    "dep": _get(a, "cd_dep_count"),
                    "depemp": _get(a, "cd_dep_employed_count"),
                    "depcol": _get(a, "cd_dep_college_count"),
                }
            ),
        )
        items = _groups
        return [
            {
                "cd_gender": _get(_get(g, "key"), "gender"),
                "cd_marital_status": _get(_get(g, "key"), "marital"),
                "cd_education_status": _get(_get(g, "key"), "education"),
                "cnt1": _count([_ for _ in g]),
                "cd_purchase_estimate": _get(_get(g, "key"), "purchase"),
                "cnt2": _count([_ for _ in g]),
                "cd_credit_rating": _get(_get(g, "key"), "credit"),
                "cnt3": _count([_ for _ in g]),
                "cd_dep_count": _get(_get(g, "key"), "dep"),
                "cnt4": _count([_ for _ in g]),
                "cd_dep_employed_count": _get(_get(g, "key"), "depemp"),
                "cnt5": _count([_ for _ in g]),
                "cd_dep_college_count": _get(_get(g, "key"), "depcol"),
                "cnt6": _count([_ for _ in g]),
            }
            for g in items
        ]

    global result
    result = _q0()
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q10_demographics_count()


if __name__ == "__main__":
    main()
