# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:51:19Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class HouseholdDemographic:
    hd_demo_sk: int
    hd_dep_count: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_store_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_sold_time_sk: int
    ss_hdemo_sk: int
    ss_store_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class TimeDim:
    t_time_sk: int
    t_hour: int
    t_minute: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


@dataclasses.dataclass
class StoreSale:
    ss_sold_time_sk: int
    ss_hdemo_sk: int
    ss_store_sk: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class HouseholdDemographics:
    hd_demo_sk: int
    hd_dep_count: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class TimeDim:
    t_time_sk: int
    t_hour: int
    t_minute: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_store_name: str

    def __contains__(self, key):
        return hasattr(self, key)


def test_TPCDS_Q96_count():
    assert result == 3


store_sales = [
    StoreSale(ss_sold_time_sk=1, ss_hdemo_sk=1, ss_store_sk=1),
    StoreSale(ss_sold_time_sk=1, ss_hdemo_sk=1, ss_store_sk=1),
    StoreSale(ss_sold_time_sk=2, ss_hdemo_sk=1, ss_store_sk=1),
]
household_demographics = [HouseholdDemographic(hd_demo_sk=1, hd_dep_count=3)]
time_dim = [
    TimeDim(t_time_sk=1, t_hour=20, t_minute=35),
    TimeDim(t_time_sk=2, t_hour=20, t_minute=45),
]
store = [Store(s_store_sk=1, s_store_name="ese")]
result = len(
    _query(
        store_sales,
        [
            {
                "items": household_demographics,
                "on": lambda ss, hd: ss.ss_hdemo_sk == hd.hd_demo_sk,
            },
            {
                "items": time_dim,
                "on": lambda ss, hd, t: ss.ss_sold_time_sk == t.t_time_sk,
            },
            {"items": store, "on": lambda ss, hd, t, s: ss.ss_store_sk == s.s_store_sk},
        ],
        {
            "select": lambda ss, hd, t, s: ss,
            "where": lambda ss, hd, t, s: (
                (t.t_hour == 20 and t.t_minute >= 30) and hd.hd_dep_count == 3
            )
            and s.s_store_name == "ese",
        },
    )
)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q96_count()
