# Generated by Mochi Python compiler
from __future__ import annotations

import json

customer = None
store_sales = None
catalog_sales = None
web_sales = None
date_dim = None
year_total = None
result = None


def test_TPCDS_Q4_result():
    assert result == [
        {
            "customer_id": "C1",
            "customer_first_name": "Alice",
            "customer_last_name": "A",
            "customer_login": "alice",
        }
    ]


def main():
    global customer
    customer = [
        {
            "c_customer_sk": 1,
            "c_customer_id": "C1",
            "c_first_name": "Alice",
            "c_last_name": "A",
            "c_login": "alice",
        }
    ]
    global store_sales
    store_sales = [
        {
            "ss_customer_sk": 1,
            "ss_sold_date_sk": 1,
            "ss_ext_list_price": 10,
            "ss_ext_wholesale_cost": 5,
            "ss_ext_discount_amt": 0,
            "ss_ext_sales_price": 10,
        },
        {
            "ss_customer_sk": 1,
            "ss_sold_date_sk": 2,
            "ss_ext_list_price": 20,
            "ss_ext_wholesale_cost": 5,
            "ss_ext_discount_amt": 0,
            "ss_ext_sales_price": 20,
        },
    ]
    global catalog_sales
    catalog_sales = [
        {
            "cs_bill_customer_sk": 1,
            "cs_sold_date_sk": 1,
            "cs_ext_list_price": 10,
            "cs_ext_wholesale_cost": 2,
            "cs_ext_discount_amt": 0,
            "cs_ext_sales_price": 10,
        },
        {
            "cs_bill_customer_sk": 1,
            "cs_sold_date_sk": 2,
            "cs_ext_list_price": 30,
            "cs_ext_wholesale_cost": 2,
            "cs_ext_discount_amt": 0,
            "cs_ext_sales_price": 30,
        },
    ]
    global web_sales
    web_sales = [
        {
            "ws_bill_customer_sk": 1,
            "ws_sold_date_sk": 1,
            "ws_ext_list_price": 10,
            "ws_ext_wholesale_cost": 5,
            "ws_ext_discount_amt": 0,
            "ws_ext_sales_price": 10,
        },
        {
            "ws_bill_customer_sk": 1,
            "ws_sold_date_sk": 2,
            "ws_ext_list_price": 12,
            "ws_ext_wholesale_cost": 5,
            "ws_ext_discount_amt": 0,
            "ws_ext_sales_price": 12,
        },
    ]
    global date_dim
    date_dim = [{"d_date_sk": 1, "d_year": 2001}, {"d_date_sk": 2, "d_year": 2002}]

    def _q0():
        _src = customer
        _rows = _query(
            _src,
            [
                {
                    "items": store_sales,
                    "on": lambda c, s: (
                        (_get(c, "c_customer_sk") == _get(s, "ss_customer_sk"))
                    ),
                },
                {
                    "items": date_dim,
                    "on": lambda c, s, d: (
                        (_get(s, "ss_sold_date_sk") == _get(d, "d_date_sk"))
                    ),
                },
            ],
            {"select": lambda c, s, d: (c, s, d)},
        )
        _groups = _group_by(
            _rows,
            lambda c, s, d: (
                {
                    "id": _get(c, "c_customer_id"),
                    "first": _get(c, "c_first_name"),
                    "last": _get(c, "c_last_name"),
                    "login": _get(c, "c_login"),
                    "year": _get(d, "d_year"),
                }
            ),
        )
        items = _groups
        return [
            {
                "customer_id": _get(_get(g, "key"), "id"),
                "customer_first_name": _get(_get(g, "key"), "first"),
                "customer_last_name": _get(_get(g, "key"), "last"),
                "customer_login": _get(_get(g, "key"), "login"),
                "dyear": _get(_get(g, "key"), "year"),
                "year_total": _sum(
                    [
                        int(
                            (
                                (
                                    (
                                        (
                                            (
                                                _get(x, "ss_ext_list_price")
                                                - _get(x, "ss_ext_wholesale_cost")
                                            )
                                            - _get(x, "ss_ext_discount_amt")
                                        )
                                    )
                                    + _get(x, "ss_ext_sales_price")
                                )
                            )
                            / 2
                        )
                        for x in g
                    ]
                ),
                "sale_type": "s",
            }
            for g in items
        ]

    def _q1():
        _src = customer
        _rows = _query(
            _src,
            [
                {
                    "items": catalog_sales,
                    "on": lambda c, cs: (
                        (_get(c, "c_customer_sk") == _get(cs, "cs_bill_customer_sk"))
                    ),
                },
                {
                    "items": date_dim,
                    "on": lambda c, cs, d: (
                        (_get(cs, "cs_sold_date_sk") == _get(d, "d_date_sk"))
                    ),
                },
            ],
            {"select": lambda c, cs, d: (c, cs, d)},
        )
        _groups = _group_by(
            _rows,
            lambda c, cs, d: (
                {
                    "id": _get(c, "c_customer_id"),
                    "first": _get(c, "c_first_name"),
                    "last": _get(c, "c_last_name"),
                    "login": _get(c, "c_login"),
                    "year": _get(d, "d_year"),
                }
            ),
        )
        items = _groups
        return [
            {
                "customer_id": _get(_get(g, "key"), "id"),
                "customer_first_name": _get(_get(g, "key"), "first"),
                "customer_last_name": _get(_get(g, "key"), "last"),
                "customer_login": _get(_get(g, "key"), "login"),
                "dyear": _get(_get(g, "key"), "year"),
                "year_total": _sum(
                    [
                        int(
                            (
                                (
                                    (
                                        (
                                            (
                                                _get(x, "cs_ext_list_price")
                                                - _get(x, "cs_ext_wholesale_cost")
                                            )
                                            - _get(x, "cs_ext_discount_amt")
                                        )
                                    )
                                    + _get(x, "cs_ext_sales_price")
                                )
                            )
                            / 2
                        )
                        for x in g
                    ]
                ),
                "sale_type": "c",
            }
            for g in items
        ]

    def _q2():
        _src = customer
        _rows = _query(
            _src,
            [
                {
                    "items": web_sales,
                    "on": lambda c, ws: (
                        (_get(c, "c_customer_sk") == _get(ws, "ws_bill_customer_sk"))
                    ),
                },
                {
                    "items": date_dim,
                    "on": lambda c, ws, d: (
                        (_get(ws, "ws_sold_date_sk") == _get(d, "d_date_sk"))
                    ),
                },
            ],
            {"select": lambda c, ws, d: (c, ws, d)},
        )
        _groups = _group_by(
            _rows,
            lambda c, ws, d: (
                {
                    "id": _get(c, "c_customer_id"),
                    "first": _get(c, "c_first_name"),
                    "last": _get(c, "c_last_name"),
                    "login": _get(c, "c_login"),
                    "year": _get(d, "d_year"),
                }
            ),
        )
        items = _groups
        return [
            {
                "customer_id": _get(_get(g, "key"), "id"),
                "customer_first_name": _get(_get(g, "key"), "first"),
                "customer_last_name": _get(_get(g, "key"), "last"),
                "customer_login": _get(_get(g, "key"), "login"),
                "dyear": _get(_get(g, "key"), "year"),
                "year_total": _sum(
                    [
                        int(
                            (
                                (
                                    (
                                        (
                                            (
                                                _get(x, "ws_ext_list_price")
                                                - _get(x, "ws_ext_wholesale_cost")
                                            )
                                            - _get(x, "ws_ext_discount_amt")
                                        )
                                    )
                                    + _get(x, "ws_ext_sales_price")
                                )
                            )
                            / 2
                        )
                        for x in g
                    ]
                ),
                "sale_type": "w",
            }
            for g in items
        ]

    global year_total
    year_total = _union_all(_union_all((_q0()), (_q1())), (_q2()))
    global result
    result = _query(
        year_total,
        [
            {
                "items": year_total,
                "on": lambda s1, s2: (
                    (_get(s2, "customer_id") == _get(s1, "customer_id"))
                ),
            },
            {
                "items": year_total,
                "on": lambda s1, s2, c1: (
                    (_get(c1, "customer_id") == _get(s1, "customer_id"))
                ),
            },
            {
                "items": year_total,
                "on": lambda s1, s2, c1, c2: (
                    (_get(c2, "customer_id") == _get(s1, "customer_id"))
                ),
            },
            {
                "items": year_total,
                "on": lambda s1, s2, c1, c2, w1: (
                    (_get(w1, "customer_id") == _get(s1, "customer_id"))
                ),
            },
            {
                "items": year_total,
                "on": lambda s1, s2, c1, c2, w1, w2: (
                    (_get(w2, "customer_id") == _get(s1, "customer_id"))
                ),
            },
        ],
        {
            "select": lambda s1, s2, c1, c2, w1, w2: {
                "customer_id": _get(s2, "customer_id"),
                "customer_first_name": _get(s2, "customer_first_name"),
                "customer_last_name": _get(s2, "customer_last_name"),
                "customer_login": _get(s2, "customer_login"),
            },
            "where": lambda s1, s2, c1, c2, w1, w2: (
                (
                    (
                        (
                            (
                                (
                                    (
                                        (
                                            (
                                                (
                                                    (
                                                        (
                                                            (
                                                                (
                                                                    (
                                                                        (
                                                                            (
                                                                                (
                                                                                    _get(
                                                                                        s1,
                                                                                        "sale_type",
                                                                                    )
                                                                                    == "s"
                                                                                )
                                                                                and (
                                                                                    _get(
                                                                                        c1,
                                                                                        "sale_type",
                                                                                    )
                                                                                    == "c"
                                                                                )
                                                                            )
                                                                            and (
                                                                                _get(
                                                                                    w1,
                                                                                    "sale_type",
                                                                                )
                                                                                == "w"
                                                                            )
                                                                        )
                                                                        and (
                                                                            _get(
                                                                                s2,
                                                                                "sale_type",
                                                                            )
                                                                            == "s"
                                                                        )
                                                                    )
                                                                    and (
                                                                        _get(
                                                                            c2,
                                                                            "sale_type",
                                                                        )
                                                                        == "c"
                                                                    )
                                                                )
                                                                and (
                                                                    _get(
                                                                        w2, "sale_type"
                                                                    )
                                                                    == "w"
                                                                )
                                                            )
                                                            and (
                                                                _get(s1, "dyear")
                                                                == 2001
                                                            )
                                                        )
                                                        and (_get(s2, "dyear") == 2002)
                                                    )
                                                    and (_get(c1, "dyear") == 2001)
                                                )
                                                and (_get(c2, "dyear") == 2002)
                                            )
                                            and (_get(w1, "dyear") == 2001)
                                        )
                                        and (_get(w2, "dyear") == 2002)
                                    )
                                    and (_get(s1, "year_total") > 0)
                                )
                                and (_get(c1, "year_total") > 0)
                            )
                            and (_get(w1, "year_total") > 0)
                        )
                        and (
                            (
                                (
                                    (_get(c2, "year_total") / _get(c1, "year_total"))
                                    if (_get(c1, "year_total") > 0)
                                    else None
                                )
                            )
                            > (
                                (
                                    (_get(s2, "year_total") / _get(s1, "year_total"))
                                    if (_get(s1, "year_total") > 0)
                                    else None
                                )
                            )
                        )
                    )
                    and (
                        (
                            (
                                (_get(c2, "year_total") / _get(c1, "year_total"))
                                if (_get(c1, "year_total") > 0)
                                else None
                            )
                        )
                        > (
                            (
                                (_get(w2, "year_total") / _get(w1, "year_total"))
                                if (_get(w1, "year_total") > 0)
                                else None
                            )
                        )
                    )
                )
            ),
            "sortKey": lambda s1, s2, c1, c2, w1, w2: (
                [
                    _get(s2, "customer_id"),
                    _get(s2, "customer_first_name"),
                    _get(s2, "customer_last_name"),
                    _get(s2, "customer_login"),
                ]
            ),
        },
    )
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q4_result()


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def _union_all(a, b):
    return list(a) + list(b)


if __name__ == "__main__":
    main()
