# Generated by Mochi Python compiler
from __future__ import annotations

import json

customer = []
store_sales = []
catalog_sales = []
web_sales = []
date_dim = []
year_total = None
result = None


def test_TPCDS_Q4_empty():
    assert len(result) == 0


def main():
    global customer
    customer = []
    global store_sales
    store_sales = []
    global catalog_sales
    catalog_sales = []
    global web_sales
    web_sales = []
    global date_dim
    date_dim = []

    def _q0():
        _src = customer
        _rows = _query(
            _src,
            [
                {
                    "items": store_sales,
                    "on": lambda c, s: ((c.c_customer_sk == s.ss_customer_sk)),
                },
                {
                    "items": date_dim,
                    "on": lambda c, s, d: ((s.ss_sold_date_sk == d.d_date_sk)),
                },
            ],
            {"select": lambda c, s, d: (c, s, d)},
        )
        _groups = _group_by(
            _rows,
            lambda c, s, d: (
                {
                    "id": c.c_customer_id,
                    "first": c.c_first_name,
                    "last": c.c_last_name,
                    "login": c.c_login,
                    "year": d.d_year,
                }
            ),
        )
        items = _groups
        return [
            {
                "customer_id": g.key.id,
                "customer_first_name": g.key.first,
                "customer_last_name": g.key.last,
                "customer_login": g.key.login,
                "dyear": g.key.year,
                "year_total": _sum(
                    [
                        int(
                            (
                                (
                                    (
                                        (
                                            (
                                                x.ss_ext_list_price
                                                - x.ss_ext_wholesale_cost
                                            )
                                            - x.ss_ext_discount_amt
                                        )
                                    )
                                    + x.ss_ext_sales_price
                                )
                            )
                            / 2
                        )
                        for x in g
                    ]
                ),
                "sale_type": "s",
            }
            for g in items
        ]

    def _q1():
        _src = customer
        _rows = _query(
            _src,
            [
                {
                    "items": catalog_sales,
                    "on": lambda c, cs: ((c.c_customer_sk == cs.cs_bill_customer_sk)),
                },
                {
                    "items": date_dim,
                    "on": lambda c, cs, d: ((cs.cs_sold_date_sk == d.d_date_sk)),
                },
            ],
            {"select": lambda c, cs, d: (c, cs, d)},
        )
        _groups = _group_by(
            _rows,
            lambda c, cs, d: (
                {
                    "id": c.c_customer_id,
                    "first": c.c_first_name,
                    "last": c.c_last_name,
                    "login": c.c_login,
                    "year": d.d_year,
                }
            ),
        )
        items = _groups
        return [
            {
                "customer_id": g.key.id,
                "customer_first_name": g.key.first,
                "customer_last_name": g.key.last,
                "customer_login": g.key.login,
                "dyear": g.key.year,
                "year_total": _sum(
                    [
                        int(
                            (
                                (
                                    (
                                        (
                                            (
                                                x.cs_ext_list_price
                                                - x.cs_ext_wholesale_cost
                                            )
                                            - x.cs_ext_discount_amt
                                        )
                                    )
                                    + x.cs_ext_sales_price
                                )
                            )
                            / 2
                        )
                        for x in g
                    ]
                ),
                "sale_type": "c",
            }
            for g in items
        ]

    def _q2():
        _src = customer
        _rows = _query(
            _src,
            [
                {
                    "items": web_sales,
                    "on": lambda c, ws: ((c.c_customer_sk == ws.ws_bill_customer_sk)),
                },
                {
                    "items": date_dim,
                    "on": lambda c, ws, d: ((ws.ws_sold_date_sk == d.d_date_sk)),
                },
            ],
            {"select": lambda c, ws, d: (c, ws, d)},
        )
        _groups = _group_by(
            _rows,
            lambda c, ws, d: (
                {
                    "id": c.c_customer_id,
                    "first": c.c_first_name,
                    "last": c.c_last_name,
                    "login": c.c_login,
                    "year": d.d_year,
                }
            ),
        )
        items = _groups
        return [
            {
                "customer_id": g.key.id,
                "customer_first_name": g.key.first,
                "customer_last_name": g.key.last,
                "customer_login": g.key.login,
                "dyear": g.key.year,
                "year_total": _sum(
                    [
                        int(
                            (
                                (
                                    (
                                        (
                                            (
                                                x.ws_ext_list_price
                                                - x.ws_ext_wholesale_cost
                                            )
                                            - x.ws_ext_discount_amt
                                        )
                                    )
                                    + x.ws_ext_sales_price
                                )
                            )
                            / 2
                        )
                        for x in g
                    ]
                ),
                "sale_type": "w",
            }
            for g in items
        ]

    global year_total
    year_total = _union_all(_union_all((_q0()), (_q1())), (_q2()))
    global result
    result = _query(
        year_total,
        [
            {
                "items": year_total,
                "on": lambda s1, s2: ((s2["customer_id"] == s1["customer_id"])),
            },
            {
                "items": year_total,
                "on": lambda s1, s2, c1: ((c1["customer_id"] == s1["customer_id"])),
            },
            {
                "items": year_total,
                "on": lambda s1, s2, c1, c2: ((c2["customer_id"] == s1["customer_id"])),
            },
            {
                "items": year_total,
                "on": lambda s1, s2, c1, c2, w1: (
                    (w1["customer_id"] == s1["customer_id"])
                ),
            },
            {
                "items": year_total,
                "on": lambda s1, s2, c1, c2, w1, w2: (
                    (w2["customer_id"] == s1["customer_id"])
                ),
            },
        ],
        {
            "select": lambda s1, s2, c1, c2, w1, w2: {
                "customer_id": s2["customer_id"],
                "customer_first_name": s2["customer_first_name"],
                "customer_last_name": s2["customer_last_name"],
                "customer_login": s2["customer_login"],
            },
            "where": lambda s1, s2, c1, c2, w1, w2: (
                (
                    (
                        (
                            (
                                (
                                    (
                                        (
                                            (
                                                (
                                                    (
                                                        (
                                                            (
                                                                (
                                                                    (
                                                                        (
                                                                            (
                                                                                (
                                                                                    s1[
                                                                                        "sale_type"
                                                                                    ]
                                                                                    == "s"
                                                                                )
                                                                                and (
                                                                                    c1[
                                                                                        "sale_type"
                                                                                    ]
                                                                                    == "c"
                                                                                )
                                                                            )
                                                                            and (
                                                                                w1[
                                                                                    "sale_type"
                                                                                ]
                                                                                == "w"
                                                                            )
                                                                        )
                                                                        and (
                                                                            s2[
                                                                                "sale_type"
                                                                            ]
                                                                            == "s"
                                                                        )
                                                                    )
                                                                    and (
                                                                        c2["sale_type"]
                                                                        == "c"
                                                                    )
                                                                )
                                                                and (
                                                                    w2["sale_type"]
                                                                    == "w"
                                                                )
                                                            )
                                                            and (s1["dyear"] == 2001)
                                                        )
                                                        and (s2["dyear"] == 2002)
                                                    )
                                                    and (c1["dyear"] == 2001)
                                                )
                                                and (c2["dyear"] == 2002)
                                            )
                                            and (w1["dyear"] == 2001)
                                        )
                                        and (w2["dyear"] == 2002)
                                    )
                                    and (s1["year_total"] > 0)
                                )
                                and (c1["year_total"] > 0)
                            )
                            and (w1["year_total"] > 0)
                        )
                        and (
                            (
                                (
                                    (c2["year_total"] / c1["year_total"])
                                    if (c1["year_total"] > 0)
                                    else None
                                )
                            )
                            > (
                                (
                                    (s2["year_total"] / s1["year_total"])
                                    if (s1["year_total"] > 0)
                                    else None
                                )
                            )
                        )
                    )
                    and (
                        (
                            (
                                (c2["year_total"] / c1["year_total"])
                                if (c1["year_total"] > 0)
                                else None
                            )
                        )
                        > (
                            (
                                (w2["year_total"] / w1["year_total"])
                                if (w1["year_total"] > 0)
                                else None
                            )
                        )
                    )
                )
            ),
            "sortKey": lambda s1, s2, c1, c2, w1, w2: (
                [
                    s2["customer_id"],
                    s2["customer_first_name"],
                    s2["customer_last_name"],
                    s2["customer_login"],
                ]
            ),
        },
    )
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q4_empty()


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):
        items.sort(key=lambda it: opts["sortKey"](*it))
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    return sum(v)


def _union_all(a, b):
    return list(a) + list(b)


if __name__ == "__main__":
    main()
