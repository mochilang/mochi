# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:24Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    i_manufact_id: int
    sum_sales: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    manu: object
    sum_sales: float
    avg_sales: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_month_seq: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_manufact_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    item: int
    date: int
    price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def abs(x):
    if x >= 0.0:
        return x
    return -x


def test_TPCDS_Q53_simplified():
    assert result == [
        Auto1(i_manufact_id=1, sum_sales=20.0),
        Auto1(i_manufact_id=2, sum_sales=53.0),
    ]


item = [Item(i_item_sk=1, i_manufact_id=1), Item(i_item_sk=2, i_manufact_id=2)]
store_sales = [
    StoreSale(item=1, date=1, price=10.0),
    StoreSale(item=1, date=2, price=10.0),
    StoreSale(item=2, date=1, price=30.0),
    StoreSale(item=2, date=2, price=23.0),
]
date_dim = [DateDim(d_date_sk=1, d_month_seq=1), DateDim(d_date_sk=2, d_month_seq=2)]


def _q0():
    _src = store_sales
    _rows = _query(
        _src,
        [
            {"items": item, "on": lambda ss, i: ss.item == i.i_item_sk},
            {"items": date_dim, "on": lambda ss, i, d: ss.date == d.d_date_sk},
        ],
        {"select": lambda ss, i, d: (ss, i, d)},
    )
    _groups = _group_by(_rows, lambda ss, i, d: i.i_manufact_id)
    _items1 = _groups
    return [
        Auto2(
            manu=g.key,
            sum_sales=sum([x[0].price for x in g]),
            avg_sales=(
                sum([x[0].price for x in g]) / len([x[0].price for x in g])
                if [x[0].price for x in g]
                else 0
            ),
        )
        for g in _items1
    ]


grouped = _q0()
result = [
    Auto1(i_manufact_id=g.manu, sum_sales=g.sum_sales)
    for g in grouped
    if g.avg_sales > 0.0 and abs(g.sum_sales - g.avg_sales) / g.avg_sales > 0.1
]
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q53_simplified()
