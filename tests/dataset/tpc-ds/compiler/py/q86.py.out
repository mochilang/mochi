# Generated by Mochi Python compiler
from __future__ import annotations

import json


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


web_sales = None
result = None


def test_TPCDS_Q86_sample():
    assert result == 86


def main():
    global web_sales
    web_sales = [
        {"cat": "A", "_class": "B", "net": 40},
        {"cat": "A", "_class": "B", "net": 46},
        {"cat": "A", "_class": "C", "net": 10},
        {"cat": "B", "_class": "B", "net": 20},
    ]
    global result
    result = _sum(
        [
            _get(ws, "net")
            for ws in web_sales
            if ((_get(ws, "cat") == "A") and (_get(ws, "_class") == "B"))
        ]
    )
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q86_sample()


if __name__ == "__main__":
    main()
