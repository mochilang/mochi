# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:28Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    i_item_id: int
    total_sales: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    item: object
    total: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    item: int
    price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_TPCDS_Q56_simplified():
    assert result == [Auto1(i_item_id=1, total_sales=60.0)]


store_sales = [StoreSale(item=1, price=10.0)]
catalog_sales = [StoreSale(item=1, price=20.0)]
web_sales = [StoreSale(item=1, price=30.0)]


def _q0():
    _groups = {}
    _order = []
    for s in store_sales:
        _k = s.item
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(s)
    _items1 = [_groups[k] for k in _order]
    return [Auto2(item=g.key, total=sum([x.price for x in g])) for g in _items1]


ss = _q0()


def _q1():
    _groups = {}
    _order = []
    for s in catalog_sales:
        _k = s.item
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(s)
    _items1 = [_groups[k] for k in _order]
    return [Auto2(item=g.key, total=sum([x.price for x in g])) for g in _items1]


cs = _q1()


def _q2():
    _groups = {}
    _order = []
    for s in web_sales:
        _k = s.item
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(s)
    _items1 = [_groups[k] for k in _order]
    return [Auto2(item=g.key, total=sum([x.price for x in g])) for g in _items1]


ws = _q2()
union = ss + cs + ws


def _q3():
    _groups = {}
    _order = []
    for u in union:
        _k = u.get("item") if isinstance(u, dict) else getattr(u, "item")
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(u)
    _items1 = [_groups[k] for k in _order]
    return [
        Auto1(
            i_item_id=g.key,
            total_sales=_sum(
                [
                    x.get("total") if isinstance(x, dict) else getattr(x, "total")
                    for x in g
                ]
            ),
        )
        for g in _items1
    ]


result = _q3()
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q56_simplified()
