# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:51:01Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    c_last_name: str
    c_first_name: str
    s_city: str
    ss_ticket_number: int
    amt: float
    profit: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    key: object
    amt: float
    profit: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    ticket: int
    customer_sk: int
    city: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_last_name: str
    c_first_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_dow: int
    d_year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class HouseholdDemographic:
    hd_demo_sk: int
    hd_dep_count: int
    hd_vehicle_count: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_city: str
    s_number_employees: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_sold_date_sk: int
    ss_store_sk: int
    ss_ticket_number: int
    ss_customer_sk: int
    ss_hdemo_sk: int
    ss_coupon_amt: float
    ss_net_profit: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_TPCDS_Q79_simplified():
    assert result == [
        Auto1(
            c_last_name="Smith",
            c_first_name="Alice",
            s_city="CityA",
            ss_ticket_number=1,
            amt=5.0,
            profit=10.0,
        )
    ]


date_dim = [DateDim(d_date_sk=1, d_dow=1, d_year=1999)]
store = [Store(s_store_sk=1, s_city="CityA", s_number_employees=250)]
household_demographics = [
    HouseholdDemographic(hd_demo_sk=1, hd_dep_count=2, hd_vehicle_count=1)
]
store_sales = [
    StoreSale(
        ss_sold_date_sk=1,
        ss_store_sk=1,
        ss_ticket_number=1,
        ss_customer_sk=1,
        ss_hdemo_sk=1,
        ss_coupon_amt=5.0,
        ss_net_profit=10.0,
    )
]
customer = [Customer(c_customer_sk=1, c_last_name="Smith", c_first_name="Alice")]


def _q0():
    _src = store_sales
    _rows = _query(
        _src,
        [
            {"items": date_dim, "on": lambda ss, d: d.d_date_sk == ss.ss_sold_date_sk},
            {"items": store, "on": lambda ss, d, s: s.s_store_sk == ss.ss_store_sk},
            {
                "items": household_demographics,
                "on": lambda ss, d, s, hd: hd.hd_demo_sk == ss.ss_hdemo_sk,
            },
        ],
        {
            "select": lambda ss, d, s, hd: (ss, d, s, hd),
            "where": lambda ss, d, s, hd: (
                (
                    ((hd.hd_dep_count == 2 or hd.hd_vehicle_count > 1) and d.d_dow == 1)
                    and ((d.d_year == 1998 or d.d_year == 1999) or d.d_year == 2000)
                )
                and s.s_number_employees >= 200
            )
            and s.s_number_employees <= 295,
        },
    )
    _groups = _group_by(
        _rows,
        lambda ss, d, s, hd: Auto3(
            ticket=ss.ss_ticket_number, customer_sk=ss.ss_customer_sk, city=s.s_city
        ),
    )
    _items1 = _groups
    return [
        Auto2(
            key=g.key,
            amt=_sum([x[0].ss_coupon_amt for x in g]),
            profit=_sum([x[0].ss_net_profit for x in g]),
        )
        for g in _items1
    ]


agg = _q0()
result = _query(
    agg,
    [
        {
            "items": customer,
            "on": lambda a, c: c.c_customer_sk
            == (
                a.key.get("customer_sk")
                if isinstance(a.key, dict)
                else getattr(a.key, "customer_sk")
            ),
        }
    ],
    {
        "select": lambda a, c: Auto1(
            c_last_name=c.c_last_name,
            c_first_name=c.c_first_name,
            s_city=(
                a.key.get("city") if isinstance(a.key, dict) else getattr(a.key, "city")
            ),
            ss_ticket_number=(
                a.key.get("ticket")
                if isinstance(a.key, dict)
                else getattr(a.key, "ticket")
            ),
            amt=a.amt,
            profit=a.profit,
        ),
        "sortKey": lambda a, c: [
            c.c_last_name,
            c.c_first_name,
            a.key.get("city") if isinstance(a.key, dict) else getattr(a.key, "city"),
            a.profit,
        ],
    },
)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q79_simplified()
