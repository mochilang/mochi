# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


@dataclasses.dataclass
class StoreSale:
    ss_customer_sk: int
    ss_item_sk: int


@dataclasses.dataclass
class CatalogSale:
    cs_bill_customer_sk: int
    cs_item_sk: int


store_sales = None
catalog_sales = None
ssci = None
csci = None
joined = None
result = None


def test_TPCDS_Q97_overlap():
    assert (
        (_get(result, "store_only") == 1) and (_get(result, "catalog_only") == 1)
    ) and (_get(result, "store_and_catalog") == 1)


def main():
    global store_sales
    store_sales = [
        {"ss_customer_sk": 1, "ss_item_sk": 1},
        {"ss_customer_sk": 2, "ss_item_sk": 1},
    ]
    global catalog_sales
    catalog_sales = [
        {"cs_bill_customer_sk": 1, "cs_item_sk": 1},
        {"cs_bill_customer_sk": 3, "cs_item_sk": 2},
    ]

    def _q0():
        _src = store_sales
        _rows = _query(_src, [], {"select": lambda ss: (ss)})
        _groups = _group_by(
            _rows,
            lambda ss: (
                {
                    "customer_sk": _get(ss, "ss_customer_sk"),
                    "item_sk": _get(ss, "ss_item_sk"),
                }
            ),
        )
        items = _groups
        return [
            {
                "customer_sk": _get(_get(g, "key"), "customer_sk"),
                "item_sk": _get(_get(g, "key"), "item_sk"),
            }
            for g in items
        ]

    global ssci
    ssci = _q0()

    def _q1():
        _src = catalog_sales
        _rows = _query(_src, [], {"select": lambda cs: (cs)})
        _groups = _group_by(
            _rows,
            lambda cs: (
                {
                    "customer_sk": _get(cs, "cs_bill_customer_sk"),
                    "item_sk": _get(cs, "cs_item_sk"),
                }
            ),
        )
        items = _groups
        return [
            {
                "customer_sk": _get(_get(g, "key"), "customer_sk"),
                "item_sk": _get(_get(g, "key"), "item_sk"),
            }
            for g in items
        ]

    global csci
    csci = _q1()
    global joined
    joined = _query(
        ssci,
        [
            {
                "items": csci,
                "on": lambda s, c: (
                    (
                        (_get(s, "customer_sk") == _get(c, "customer_sk"))
                        and (_get(s, "item_sk") == _get(c, "item_sk"))
                    )
                ),
                "left": True,
                "right": True,
            }
        ],
        {
            "select": lambda s, c: {
                "store_only": (
                    1
                    if (
                        (_get(s, "customer_sk") != None)
                        and (((c == None) or (_get(c, "customer_sk") == None)))
                    )
                    else 0
                ),
                "catalog_only": (
                    1
                    if (
                        (
                            (((s == None) or (_get(s, "customer_sk") == None)))
                            and (c != None)
                        )
                        and (_get(c, "customer_sk") != None)
                    )
                    else 0
                ),
                "both": (
                    1
                    if (
                        ((_get(s, "customer_sk") != None) and (c != None))
                        and (_get(c, "customer_sk") != None)
                    )
                    else 0
                ),
            }
        },
    )
    global result
    result = {
        "store_only": _sum([_get(x, "store_only") for x in joined]),
        "catalog_only": _sum([_get(x, "catalog_only") for x in joined]),
        "store_and_catalog": _sum([_get(x, "both") for x in joined]),
    }
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q97_overlap()


if __name__ == "__main__":
    main()
