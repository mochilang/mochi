# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_customer_id: str
    c_first_name: str
    c_last_name: str


@dataclasses.dataclass
class StoreSale:
    ss_customer_sk: int
    ss_sold_date_sk: int
    ss_ext_list_price: float


@dataclasses.dataclass
class WebSale:
    ws_bill_customer_sk: int
    ws_sold_date_sk: int
    ws_ext_list_price: float


customer = None
store_sales = None
web_sales = None
ss98 = None
ss99 = None
ws98 = None
ws99 = None
growth_ok = None
result = None


def test_TPCDS_Q11_growth():
    assert result == [
        {
            "customer_id": "C1",
            "customer_first_name": "John",
            "customer_last_name": "Doe",
        }
    ]


def main():
    global customer
    customer = [
        {
            "c_customer_sk": 1,
            "c_customer_id": "C1",
            "c_first_name": "John",
            "c_last_name": "Doe",
        }
    ]
    global store_sales
    store_sales = [
        {"ss_customer_sk": 1, "ss_sold_date_sk": 1998, "ss_ext_list_price": 60},
        {"ss_customer_sk": 1, "ss_sold_date_sk": 1999, "ss_ext_list_price": 90},
    ]
    global web_sales
    web_sales = [
        {"ws_bill_customer_sk": 1, "ws_sold_date_sk": 1998, "ws_ext_list_price": 50},
        {"ws_bill_customer_sk": 1, "ws_sold_date_sk": 1999, "ws_ext_list_price": 150},
    ]
    global ss98
    ss98 = _sum(
        [
            _get(ss, "ss_ext_list_price")
            for ss in store_sales
            if (_get(ss, "ss_sold_date_sk") == 1998)
        ]
    )
    global ss99
    ss99 = _sum(
        [
            _get(ss, "ss_ext_list_price")
            for ss in store_sales
            if (_get(ss, "ss_sold_date_sk") == 1999)
        ]
    )
    global ws98
    ws98 = _sum(
        [
            _get(ws, "ws_ext_list_price")
            for ws in web_sales
            if (_get(ws, "ws_sold_date_sk") == 1998)
        ]
    )
    global ws99
    ws99 = _sum(
        [
            _get(ws, "ws_ext_list_price")
            for ws in web_sales
            if (_get(ws, "ws_sold_date_sk") == 1999)
        ]
    )
    global growth_ok
    growth_ok = ((ws98 > 0) and (ss98 > 0)) and (((ws99 / ws98)) > ((ss99 / ss98)))
    global result
    result = (
        [
            {
                "customer_id": "C1",
                "customer_first_name": "John",
                "customer_last_name": "Doe",
            }
        ]
        if growth_ok
        else []
    )
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q11_growth()


if __name__ == "__main__":
    main()
