# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:49:39Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    cd_gender: str
    cd_marital_status: str
    cd_education_status: str
    cnt1: int
    cd_purchase_estimate: int
    cnt2: int
    cd_credit_rating: str
    cnt3: int
    cd_dep_count: int
    cnt4: int
    cd_dep_employed_count: int
    cnt5: int
    cd_dep_college_count: int
    cnt6: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    gender: object
    marital: object
    education: object
    purchase: object
    credit: object
    dep: object
    depemp: object
    depcol: object

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_current_addr_sk: int
    c_current_cdemo_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerAddres:
    ca_address_sk: int
    ca_county: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerDemographic:
    cd_demo_sk: int
    cd_gender: str
    cd_marital_status: str
    cd_education_status: str
    cd_purchase_estimate: int
    cd_credit_rating: str
    cd_dep_count: int
    cd_dep_employed_count: int
    cd_dep_college_count: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int
    d_moy: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_customer_sk: int
    ss_sold_date_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_current_addr_sk: int
    c_current_cdemo_sk: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerAddress:
    ca_address_sk: int
    ca_county: str

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerDemographics:
    cd_demo_sk: int
    cd_gender: str
    cd_marital_status: str
    cd_education_status: str
    cd_purchase_estimate: int
    cd_credit_rating: str
    cd_dep_count: int
    cd_dep_employed_count: int
    cd_dep_college_count: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_customer_sk: int
    ss_sold_date_sk: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int
    d_moy: int

    def __contains__(self, key):
        return hasattr(self, key)


def test_TPCDS_Q10_demographics_count():
    assert result == [
        Auto1(
            cd_gender="F",
            cd_marital_status="M",
            cd_education_status="College",
            cnt1=1,
            cd_purchase_estimate=5000,
            cnt2=1,
            cd_credit_rating="Good",
            cnt3=1,
            cd_dep_count=1,
            cnt4=1,
            cd_dep_employed_count=1,
            cnt5=1,
            cd_dep_college_count=0,
            cnt6=1,
        )
    ]


customer = [Customer(c_customer_sk=1, c_current_addr_sk=1, c_current_cdemo_sk=1)]
customer_address = [CustomerAddres(ca_address_sk=1, ca_county="CountyA")]
customer_demographics = [
    CustomerDemographic(
        cd_demo_sk=1,
        cd_gender="F",
        cd_marital_status="M",
        cd_education_status="College",
        cd_purchase_estimate=5000,
        cd_credit_rating="Good",
        cd_dep_count=1,
        cd_dep_employed_count=1,
        cd_dep_college_count=0,
    )
]
store_sales = [StoreSale(ss_customer_sk=1, ss_sold_date_sk=1)]
web_sales = []
catalog_sales = []
date_dim = [DateDim(d_date_sk=1, d_year=2000, d_moy=2)]
active = _query(
    customer,
    [
        {
            "items": customer_address,
            "on": lambda c, ca: c.c_current_addr_sk == ca.ca_address_sk
            and ca.ca_county == "CountyA",
        },
        {
            "items": customer_demographics,
            "on": lambda c, ca, cd: c.c_current_cdemo_sk == cd.cd_demo_sk,
        },
    ],
    {
        "select": lambda c, ca, cd: cd,
        "where": lambda c, ca, cd: len(
            _query(
                store_sales,
                [
                    {
                        "items": date_dim,
                        "on": lambda ss, d: ss.ss_sold_date_sk == d.d_date_sk,
                    }
                ],
                {
                    "select": lambda ss, d: ss,
                    "where": lambda ss, d: (
                        (ss.ss_customer_sk == c.c_customer_sk and d.d_year == 2000)
                        and d.d_moy >= 2
                    )
                    and d.d_moy <= 5,
                },
            )
        )
        > 0,
    },
)


def _q0():
    _groups = {}
    _order = []
    for a in active:
        _k = Auto2(
            gender=a["cd_gender"],
            marital=a["cd_marital_status"],
            education=a["cd_education_status"],
            purchase=a["cd_purchase_estimate"],
            credit=a["cd_credit_rating"],
            dep=a["cd_dep_count"],
            depemp=a["cd_dep_employed_count"],
            depcol=a["cd_dep_college_count"],
        )
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(a)
    _items1 = [_groups[k] for k in _order]
    return [
        Auto1(
            cd_gender=g.key["gender"],
            cd_marital_status=g.key["marital"],
            cd_education_status=g.key["education"],
            cnt1=len([_ for _ in g]),
            cd_purchase_estimate=g.key["purchase"],
            cnt2=len([_ for _ in g]),
            cd_credit_rating=g.key["credit"],
            cnt3=len([_ for _ in g]),
            cd_dep_count=g.key["dep"],
            cnt4=len([_ for _ in g]),
            cd_dep_employed_count=g.key["depemp"],
            cnt5=len([_ for _ in g]),
            cd_dep_college_count=g.key["depcol"],
            cnt6=len([_ for _ in g]),
        )
        for g in _items1
    ]


result = _q0()
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q10_demographics_count()
