# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:51Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    c_last_name: str
    c_first_name: str
    c_salutation: str
    c_preferred_cust_flag: str
    ss_ticket_number: int
    cnt: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    key: object
    cnt: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    ticket: int
    cust: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_last_name: str
    c_first_name: str
    c_salutation: str
    c_preferred_cust_flag: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_dom: int
    d_year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class HouseholdDemographic:
    hd_demo_sk: int
    hd_buy_potential: str
    hd_vehicle_count: int
    hd_dep_count: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_county: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_ticket_number: int
    ss_customer_sk: int
    ss_sold_date_sk: int
    ss_store_sk: int
    ss_hdemo_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, "Items"):
        return len(v.Items)
    raise Exception("count() expects list or group")


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_TPCDS_Q73_simplified():
    assert result == [
        Auto1(
            c_last_name="Smith",
            c_first_name="Alice",
            c_salutation="Ms.",
            c_preferred_cust_flag="Y",
            ss_ticket_number=1,
            cnt=1,
        )
    ]


store_sales = [
    StoreSale(
        ss_ticket_number=1,
        ss_customer_sk=1,
        ss_sold_date_sk=1,
        ss_store_sk=1,
        ss_hdemo_sk=1,
    )
]
date_dim = [DateDim(d_date_sk=1, d_dom=1, d_year=1998)]
store = [Store(s_store_sk=1, s_county="A")]
household_demographics = [
    HouseholdDemographic(
        hd_demo_sk=1, hd_buy_potential="1001-5000", hd_vehicle_count=2, hd_dep_count=3
    )
]
customer = [
    Customer(
        c_customer_sk=1,
        c_last_name="Smith",
        c_first_name="Alice",
        c_salutation="Ms.",
        c_preferred_cust_flag="Y",
    )
]


def _q0():
    _src = store_sales
    _rows = _query(
        _src,
        [
            {"items": date_dim, "on": lambda ss, d: d.d_date_sk == ss.ss_sold_date_sk},
            {"items": store, "on": lambda ss, d, s: s.s_store_sk == ss.ss_store_sk},
            {
                "items": household_demographics,
                "on": lambda ss, d, s, hd: hd.hd_demo_sk == ss.ss_hdemo_sk,
            },
        ],
        {
            "select": lambda ss, d, s, hd: (ss, d, s, hd),
            "where": lambda ss, d, s, hd: (
                (
                    (
                        (
                            (d.d_dom >= 1 and d.d_dom <= 2)
                            and (
                                hd.hd_buy_potential == "1001-5000"
                                or hd.hd_buy_potential == "0-500"
                            )
                        )
                        and hd.hd_vehicle_count > 0
                    )
                    and hd.hd_dep_count / hd.hd_vehicle_count > 1
                )
                and ((d.d_year == 1998 or d.d_year == 1999) or d.d_year == 2000)
            )
            and s.s_county == "A",
        },
    )
    _groups = _group_by(
        _rows,
        lambda ss, d, s, hd: Auto3(ticket=ss.ss_ticket_number, cust=ss.ss_customer_sk),
    )
    _items1 = _groups
    return [Auto2(key=g.key, cnt=len(g)) for g in _items1]


groups = _q0()
result = _query(
    groups,
    [
        {
            "items": customer,
            "on": lambda g, c: c.c_customer_sk
            == (
                g.key.get("cust") if isinstance(g.key, dict) else getattr(g.key, "cust")
            ),
        }
    ],
    {
        "select": lambda g, c: Auto1(
            c_last_name=c.c_last_name,
            c_first_name=c.c_first_name,
            c_salutation=c.c_salutation,
            c_preferred_cust_flag=c.c_preferred_cust_flag,
            ss_ticket_number=(
                g.key.get("ticket")
                if isinstance(g.key, dict)
                else getattr(g.key, "ticket")
            ),
            cnt=g.cnt,
        ),
        "where": lambda g, c: g.cnt >= 1 and g.cnt <= 5,
        "sortKey": lambda g, c: [-g.cnt, c.c_last_name],
    },
)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q73_simplified()
