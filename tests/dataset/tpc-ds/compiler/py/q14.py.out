# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing


def _avg(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("avg() expects list or group")
    if not v:
        return 0
    s = 0.0
    for it in v:
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("avg() expects numbers")
    return s / len(v)


def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, "Items"):
        return len(v.Items)
    raise Exception("count() expects list or group")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


@dataclasses.dataclass
class StoreSale:
    ss_item_sk: int
    ss_list_price: float
    ss_quantity: int
    ss_sold_date_sk: int


@dataclasses.dataclass
class CatalogSale:
    cs_item_sk: int
    cs_list_price: float
    cs_quantity: int
    cs_sold_date_sk: int


@dataclasses.dataclass
class WebSale:
    ws_item_sk: int
    ws_list_price: float
    ws_quantity: int
    ws_sold_date_sk: int


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_brand_id: int
    i_class_id: int
    i_category_id: int


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int
    d_moy: int


store_sales = None
catalog_sales = None
web_sales = None
item = None
date_dim = None
cross_items = None
avg_sales = _avg([20, 20, 30])
store_filtered = None
result = None


def test_TPCDS_Q14_cross_channel():
    assert result == [
        {
            "channel": "store",
            "i_brand_id": 1,
            "i_class_id": 1,
            "i_category_id": 1,
            "sales": 60,
            "number_sales": 1,
        }
    ]


def main():
    global store_sales
    store_sales = [
        {"ss_item_sk": 1, "ss_list_price": 10, "ss_quantity": 2, "ss_sold_date_sk": 1},
        {"ss_item_sk": 1, "ss_list_price": 20, "ss_quantity": 3, "ss_sold_date_sk": 2},
    ]
    global catalog_sales
    catalog_sales = [
        {"cs_item_sk": 1, "cs_list_price": 10, "cs_quantity": 2, "cs_sold_date_sk": 1}
    ]
    global web_sales
    web_sales = [
        {"ws_item_sk": 1, "ws_list_price": 30, "ws_quantity": 1, "ws_sold_date_sk": 1}
    ]
    global item
    item = [{"i_item_sk": 1, "i_brand_id": 1, "i_class_id": 1, "i_category_id": 1}]
    global date_dim
    date_dim = [
        {"d_date_sk": 1, "d_year": 2000, "d_moy": 12},
        {"d_date_sk": 2, "d_year": 2002, "d_moy": 11},
    ]
    global cross_items
    cross_items = [{"ss_item_sk": 1}]
    global avg_sales
    avg_sales = _avg([20, 20, 30])

    def _q0():
        _src = store_sales
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda ss, d: (
                        (
                            (
                                (_get(ss, "ss_sold_date_sk") == _get(d, "d_date_sk"))
                                and (_get(d, "d_year") == 2002)
                            )
                            and (_get(d, "d_moy") == 11)
                        )
                    ),
                }
            ],
            {
                "select": lambda ss, d: (ss, d),
                "where": lambda ss, d: (
                    (
                        _get(ss, "ss_item_sk")
                        in ([_get(ci, "ss_item_sk") for ci in cross_items])
                    )
                ),
            },
        )
        _groups = _group_by(
            _rows, lambda ss, d: ({"brand_id": 1, "class_id": 1, "category_id": 1})
        )
        items = _groups
        return [
            {
                "channel": "store",
                "sales": _sum(
                    [(_get(x, "ss_quantity") * _get(x, "ss_list_price")) for x in g]
                ),
                "number_sales": _count([_ for _ in g]),
            }
            for g in items
        ]

    global store_filtered
    store_filtered = _q0()
    global result
    result = [
        {
            "channel": _get(r, "channel"),
            "i_brand_id": 1,
            "i_class_id": 1,
            "i_category_id": 1,
            "sales": _get(r, "sales"),
            "number_sales": _get(r, "number_sales"),
        }
        for r in store_filtered
        if (_get(r, "sales") > avg_sales)
    ]
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q14_cross_channel()


if __name__ == "__main__":
    main()
