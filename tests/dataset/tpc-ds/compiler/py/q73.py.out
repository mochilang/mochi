# Generated by Mochi Python compiler
from __future__ import annotations

import json


def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, "Items"):
        return len(v.Items)
    raise Exception("count() expects list or group")


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


store_sales = None
date_dim = None
store = None
household_demographics = None
customer = None
groups = None
result = None


def test_TPCDS_Q73_simplified():
    assert result == [
        {
            "c_last_name": "Smith",
            "c_first_name": "Alice",
            "c_salutation": "Ms.",
            "c_preferred_cust_flag": "Y",
            "ss_ticket_number": 1,
            "cnt": 1,
        }
    ]


def main():
    global store_sales
    store_sales = [
        {
            "ss_ticket_number": 1,
            "ss_customer_sk": 1,
            "ss_sold_date_sk": 1,
            "ss_store_sk": 1,
            "ss_hdemo_sk": 1,
        }
    ]
    global date_dim
    date_dim = [{"d_date_sk": 1, "d_dom": 1, "d_year": 1998}]
    global store
    store = [{"s_store_sk": 1, "s_county": "A"}]
    global household_demographics
    household_demographics = [
        {
            "hd_demo_sk": 1,
            "hd_buy_potential": "1001-5000",
            "hd_vehicle_count": 2,
            "hd_dep_count": 3,
        }
    ]
    global customer
    customer = [
        {
            "c_customer_sk": 1,
            "c_last_name": "Smith",
            "c_first_name": "Alice",
            "c_salutation": "Ms.",
            "c_preferred_cust_flag": "Y",
        }
    ]

    def _q0():
        _src = store_sales
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda ss, d: (
                        (_get(d, "d_date_sk") == _get(ss, "ss_sold_date_sk"))
                    ),
                },
                {
                    "items": store,
                    "on": lambda ss, d, s: (
                        (_get(s, "s_store_sk") == _get(ss, "ss_store_sk"))
                    ),
                },
                {
                    "items": household_demographics,
                    "on": lambda ss, d, s, hd: (
                        (_get(hd, "hd_demo_sk") == _get(ss, "ss_hdemo_sk"))
                    ),
                },
            ],
            {
                "select": lambda ss, d, s, hd: (ss, d, s, hd),
                "where": lambda ss, d, s, hd: (
                    (
                        (
                            (
                                (
                                    (
                                        (
                                            (_get(d, "d_dom") >= 1)
                                            and (_get(d, "d_dom") <= 2)
                                        )
                                        and (
                                            (
                                                (
                                                    _get(hd, "hd_buy_potential")
                                                    == "1001-5000"
                                                )
                                                or (
                                                    _get(hd, "hd_buy_potential")
                                                    == "0-500"
                                                )
                                            )
                                        )
                                    )
                                    and (_get(hd, "hd_vehicle_count") > 0)
                                )
                                and (
                                    (
                                        _get(hd, "hd_dep_count")
                                        / _get(hd, "hd_vehicle_count")
                                    )
                                    > 1
                                )
                            )
                            and (
                                (
                                    (
                                        (_get(d, "d_year") == 1998)
                                        or (_get(d, "d_year") == 1999)
                                    )
                                    or (_get(d, "d_year") == 2000)
                                )
                            )
                        )
                        and (_get(s, "s_county") == "A")
                    )
                ),
            },
        )
        _groups = _group_by(
            _rows,
            lambda ss, d, s, hd: (
                {
                    "ticket": _get(ss, "ss_ticket_number"),
                    "cust": _get(ss, "ss_customer_sk"),
                }
            ),
        )
        items = _groups
        return [{"key": _get(g, "key"), "cnt": _count(g)} for g in items]

    global groups
    groups = _q0()
    global result
    result = _query(
        groups,
        [
            {
                "items": customer,
                "on": lambda g, c: (
                    (_get(c, "c_customer_sk") == _get(_get(g, "key"), "cust"))
                ),
            }
        ],
        {
            "select": lambda g, c: {
                "c_last_name": _get(c, "c_last_name"),
                "c_first_name": _get(c, "c_first_name"),
                "c_salutation": _get(c, "c_salutation"),
                "c_preferred_cust_flag": _get(c, "c_preferred_cust_flag"),
                "ss_ticket_number": _get(_get(g, "key"), "ticket"),
                "cnt": _get(g, "cnt"),
            },
            "where": lambda g, c: (((_get(g, "cnt") >= 1) and (_get(g, "cnt") <= 5))),
            "sortKey": lambda g, c: ([(-_get(g, "cnt")), _get(c, "c_last_name")]),
        },
    )
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q73_simplified()


if __name__ == "__main__":
    main()
