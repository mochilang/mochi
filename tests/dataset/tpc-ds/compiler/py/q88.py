# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:51:10Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class HouseholdDemographic:
    hd_demo_sk: int
    hd_dep_count: int
    hd_vehicle_count: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_store_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    sold_time_sk: int
    hdemo_sk: int
    store_sk: int
    qty: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class TimeDim:
    time_sk: int
    hour: int
    minute: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


def count_range(ssales, tdim, hour, start_min, end_min):
    total = 0.0
    for ss in ssales:
        for t in tdim:
            if (
                (
                    (
                        ss.get("sold_time_sk")
                        if isinstance(ss, dict)
                        else getattr(ss, "sold_time_sk")
                    )
                    == (
                        t.get("time_sk")
                        if isinstance(t, dict)
                        else getattr(t, "time_sk")
                    )
                    and (t.get("hour") if isinstance(t, dict) else getattr(t, "hour"))
                    == hour
                )
                and (t.get("minute") if isinstance(t, dict) else getattr(t, "minute"))
                >= start_min
            ) and (
                t.get("minute") if isinstance(t, dict) else getattr(t, "minute")
            ) < end_min:
                total = total + (
                    ss.get("qty") if isinstance(ss, dict) else getattr(ss, "qty")
                )
    return total


def test_TPCDS_Q88_sample():
    assert result == 88


time_dim = [
    TimeDim(time_sk=1, hour=8, minute=30),
    TimeDim(time_sk=2, hour=9, minute=0),
    TimeDim(time_sk=3, hour=9, minute=30),
    TimeDim(time_sk=4, hour=10, minute=0),
    TimeDim(time_sk=5, hour=10, minute=30),
    TimeDim(time_sk=6, hour=11, minute=0),
    TimeDim(time_sk=7, hour=11, minute=30),
    TimeDim(time_sk=8, hour=12, minute=0),
]
household_demographics = [
    HouseholdDemographic(hd_demo_sk=1, hd_dep_count=1, hd_vehicle_count=1)
]
store = [Store(s_store_sk=1, s_store_name="ese")]
store_sales = [
    StoreSale(sold_time_sk=1, hdemo_sk=1, store_sk=1, qty=10.0),
    StoreSale(sold_time_sk=2, hdemo_sk=1, store_sk=1, qty=12.0),
    StoreSale(sold_time_sk=3, hdemo_sk=1, store_sk=1, qty=14.0),
    StoreSale(sold_time_sk=4, hdemo_sk=1, store_sk=1, qty=11.0),
    StoreSale(sold_time_sk=5, hdemo_sk=1, store_sk=1, qty=8.0),
    StoreSale(sold_time_sk=6, hdemo_sk=1, store_sk=1, qty=9.0),
    StoreSale(sold_time_sk=7, hdemo_sk=1, store_sk=1, qty=10.0),
    StoreSale(sold_time_sk=8, hdemo_sk=1, store_sk=1, qty=14.0),
]
h8_30_to_9 = count_range(store_sales, time_dim, 8, 30, 60)
h9_to_9_30 = count_range(store_sales, time_dim, 9, 0, 30)
h9_30_to_10 = count_range(store_sales, time_dim, 9, 30, 60)
h10_to_10_30 = count_range(store_sales, time_dim, 10, 0, 30)
h10_30_to_11 = count_range(store_sales, time_dim, 10, 30, 60)
h11_to_11_30 = count_range(store_sales, time_dim, 11, 0, 30)
h11_30_to_12 = count_range(store_sales, time_dim, 11, 30, 60)
h12_to_12_30 = count_range(store_sales, time_dim, 12, 0, 30)
result = (
    h8_30_to_9
    + h9_to_9_30
    + h9_30_to_10
    + h10_to_10_30
    + h10_30_to_11
    + h11_to_11_30
    + h11_30_to_12
    + h12_to_12_30
)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q88_sample()
