# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:51:18Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    order_count: int
    total_shipping_cost: float
    total_net_profit: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    ws_order_number: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerAddres:
    ca_address_sk: int
    ca_state: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_date: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class WebReturn:
    wr_order_number: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class WebSale:
    ws_order_number: int
    ws_warehouse_sk: int
    ws_ship_date_sk: int
    ws_ship_addr_sk: int
    ws_web_site_sk: int
    ws_ext_ship_cost: float
    ws_net_profit: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class WebSite:
    web_site_sk: int
    web_company_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def distinct(xs):
    out = []
    for x in xs:
        if not x in out:
            out = out + [x]
    return out


@dataclasses.dataclass
class WebSale:
    ws_order_number: int
    ws_warehouse_sk: int
    ws_ship_date_sk: int
    ws_ship_addr_sk: int
    ws_web_site_sk: int
    ws_ext_ship_cost: float
    ws_net_profit: float

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class WebReturn:
    wr_order_number: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_date: str

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerAddress:
    ca_address_sk: int
    ca_state: str

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class WebSite:
    web_site_sk: int
    web_company_name: str

    def __contains__(self, key):
        return hasattr(self, key)


def test_TPCDS_Q95_shipping_returns():
    assert result == Auto1(order_count=1, total_shipping_cost=2.0, total_net_profit=5.0)


web_sales = [
    WebSale(
        ws_order_number=1,
        ws_warehouse_sk=1,
        ws_ship_date_sk=1,
        ws_ship_addr_sk=1,
        ws_web_site_sk=1,
        ws_ext_ship_cost=2.0,
        ws_net_profit=5.0,
    ),
    WebSale(
        ws_order_number=1,
        ws_warehouse_sk=2,
        ws_ship_date_sk=1,
        ws_ship_addr_sk=1,
        ws_web_site_sk=1,
        ws_ext_ship_cost=0.0,
        ws_net_profit=0.0,
    ),
]
web_returns = [WebReturn(wr_order_number=1)]
date_dim = [DateDim(d_date_sk=1, d_date="2001-02-01")]
customer_address = [CustomerAddres(ca_address_sk=1, ca_state="CA")]
web_site = [WebSite(web_site_sk=1, web_company_name="pri")]
ws_wh = [
    Auto2(ws_order_number=ws1.ws_order_number)
    for ws1 in web_sales
    for ws2 in web_sales
    if ws1.ws_order_number == ws2.ws_order_number
    and ws1.ws_warehouse_sk != ws2.ws_warehouse_sk
]
filtered = _query(
    web_sales,
    [
        {"items": date_dim, "on": lambda ws, d: ws.ws_ship_date_sk == d.d_date_sk},
        {
            "items": customer_address,
            "on": lambda ws, d, ca: ws.ws_ship_addr_sk == ca.ca_address_sk,
        },
        {
            "items": web_site,
            "on": lambda ws, d, ca, w: ws.ws_web_site_sk == w.web_site_sk,
        },
    ],
    {
        "select": lambda ws, d, ca, w: ws,
        "where": lambda ws, d, ca, w: (
            (ca.ca_state == "CA" and w.web_company_name == "pri")
            and ws.ws_order_number in [x.ws_order_number for x in ws_wh]
        )
        and ws.ws_order_number in [wr.wr_order_number for wr in web_returns],
    },
)
result = Auto1(
    order_count=len(distinct([x["ws_order_number"] for x in filtered])),
    total_shipping_cost=_sum([x["ws_ext_ship_cost"] for x in filtered]),
    total_net_profit=_sum([x["ws_net_profit"] for x in filtered]),
)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q95_shipping_returns()
