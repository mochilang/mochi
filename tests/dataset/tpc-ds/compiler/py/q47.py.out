# Generated by Mochi Python compiler
from __future__ import annotations

import json
import typing


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


def abs(x: float) -> float:
    if x >= 0:
        x
    else:
        (-x)


v2 = None
year = 2020
orderby = "item"
result = None


def test_TPCDS_Q47_simplified():
    assert result == [
        {"d_year": 2019, "item": "C", "avg_monthly_sales": 50, "sum_sales": 60},
        {"d_year": 2020, "item": "A", "avg_monthly_sales": 100, "sum_sales": 120},
    ]


def main():
    global v2
    v2 = [
        {"d_year": 2020, "item": "A", "avg_monthly_sales": 100, "sum_sales": 120},
        {"d_year": 2020, "item": "B", "avg_monthly_sales": 80, "sum_sales": 70},
        {"d_year": 2019, "item": "C", "avg_monthly_sales": 50, "sum_sales": 60},
    ]
    global year
    year = 2020
    global orderby
    orderby = "item"
    global result
    result = [
        v
        for v in sorted(
            [
                v
                for v in v2
                if (
                    ((_get(v, "d_year") == year) and (_get(v, "avg_monthly_sales") > 0))
                    and (
                        (
                            abs((_get(v, "sum_sales") - _get(v, "avg_monthly_sales")))
                            / _get(v, "avg_monthly_sales")
                        )
                        > 0.1
                    )
                )
            ],
            key=lambda v: _sort_key(
                [(_get(v, "sum_sales") - _get(v, "avg_monthly_sales")), _get(v, "item")]
            ),
        )
    ]
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q47_simplified()


if __name__ == "__main__":
    main()
