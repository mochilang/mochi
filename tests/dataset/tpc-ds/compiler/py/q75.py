# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:55Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    prev_year: int
    year: int
    i_brand_id: int
    i_class_id: int
    i_category_id: int
    i_manufact_id: int
    prev_yr_cnt: int
    curr_yr_cnt: int
    sales_cnt_diff: int
    sales_amt_diff: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    d_year: int
    i_item_sk: int
    quantity: int
    amount: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    d_year: object
    i_brand_id: object
    i_class_id: object
    i_category_id: object
    i_manufact_id: object
    sales_cnt: float
    sales_amt: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto4:
    year: object
    brand_id: int
    class_id: int
    category_id: int
    manuf_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogSale:
    cs_item_sk: int
    cs_quantity: int
    cs_sales_price: float
    cs_sold_date_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_brand_id: int
    i_class_id: int
    i_category_id: int
    i_manufact_id: int
    i_category: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_item_sk: int
    ss_quantity: int
    ss_sales_price: float
    ss_sold_date_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class WebSale:
    ws_item_sk: int
    ws_quantity: int
    ws_sales_price: float
    ws_sold_date_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_TPCDS_Q75_simplified():
    assert result == [
        Auto1(
            prev_year=2000,
            year=2001,
            i_brand_id=1,
            i_class_id=2,
            i_category_id=3,
            i_manufact_id=4,
            prev_yr_cnt=100,
            curr_yr_cnt=80,
            sales_cnt_diff=-20,
            sales_amt_diff=-200.0,
        )
    ]


date_dim = [DateDim(d_date_sk=1, d_year=2000), DateDim(d_date_sk=2, d_year=2001)]
store_sales = [
    StoreSale(ss_item_sk=1, ss_quantity=50, ss_sales_price=500.0, ss_sold_date_sk=1),
    StoreSale(ss_item_sk=1, ss_quantity=40, ss_sales_price=400.0, ss_sold_date_sk=2),
]
web_sales = [
    WebSale(ws_item_sk=1, ws_quantity=30, ws_sales_price=300.0, ws_sold_date_sk=1),
    WebSale(ws_item_sk=1, ws_quantity=25, ws_sales_price=250.0, ws_sold_date_sk=2),
]
catalog_sales = [
    CatalogSale(cs_item_sk=1, cs_quantity=20, cs_sales_price=200.0, cs_sold_date_sk=1),
    CatalogSale(cs_item_sk=1, cs_quantity=15, cs_sales_price=150.0, cs_sold_date_sk=2),
]
item = [
    Item(
        i_item_sk=1,
        i_brand_id=1,
        i_class_id=2,
        i_category_id=3,
        i_manufact_id=4,
        i_category="Electronics",
    )
]
sales_detail = (
    _query(
        store_sales,
        [{"items": date_dim, "on": lambda ss, d: d.d_date_sk == ss.ss_sold_date_sk}],
        {
            "select": lambda ss, d: Auto2(
                d_year=d.d_year,
                i_item_sk=ss.ss_item_sk,
                quantity=ss.ss_quantity,
                amount=ss.ss_sales_price,
            )
        },
    )
    + _query(
        web_sales,
        [{"items": date_dim, "on": lambda ws, d: d.d_date_sk == ws.ws_sold_date_sk}],
        {
            "select": lambda ws, d: Auto2(
                d_year=d.d_year,
                i_item_sk=ws.ws_item_sk,
                quantity=ws.ws_quantity,
                amount=ws.ws_sales_price,
            )
        },
    )
    + _query(
        catalog_sales,
        [{"items": date_dim, "on": lambda cs, d: d.d_date_sk == cs.cs_sold_date_sk}],
        {
            "select": lambda cs, d: Auto2(
                d_year=d.d_year,
                i_item_sk=cs.cs_item_sk,
                quantity=cs.cs_quantity,
                amount=cs.cs_sales_price,
            )
        },
    )
)


def _q0():
    _src = sales_detail
    _rows = _query(
        _src,
        [
            {
                "items": item,
                "on": lambda sd, i: i.i_item_sk
                == (
                    sd.get("i_item_sk")
                    if isinstance(sd, dict)
                    else getattr(sd, "i_item_sk")
                ),
            }
        ],
        {
            "select": lambda sd, i: (sd, i),
            "where": lambda sd, i: i.i_category == "Electronics",
        },
    )
    _groups = _group_by(
        _rows,
        lambda sd, i: Auto4(
            year=sd.get("d_year") if isinstance(sd, dict) else getattr(sd, "d_year"),
            brand_id=i.i_brand_id,
            class_id=i.i_class_id,
            category_id=i.i_category_id,
            manuf_id=i.i_manufact_id,
        ),
    )
    _items1 = _groups
    return [
        Auto3(
            d_year=g.key["year"],
            i_brand_id=g.key["brand_id"],
            i_class_id=g.key["class_id"],
            i_category_id=g.key["category_id"],
            i_manufact_id=g.key["manuf_id"],
            sales_cnt=_sum(
                [
                    (
                        x[0].get("quantity")
                        if isinstance(x[0], dict)
                        else getattr(x[0], "quantity")
                    )
                    for x in g
                ]
            ),
            sales_amt=_sum(
                [
                    (
                        x[0].get("amount")
                        if isinstance(x[0], dict)
                        else getattr(x[0], "amount")
                    )
                    for x in g
                ]
            ),
        )
        for g in _items1
    ]


all_sales = _q0()
prev_yr = (
    [a for a in all_sales if a.d_year == 2000][0]
    if len([a for a in all_sales if a.d_year == 2000]) > 0
    else None
)
curr_yr = (
    [a for a in all_sales if a.d_year == 2001][0]
    if len([a for a in all_sales if a.d_year == 2001]) > 0
    else None
)
result = (
    [
        Auto1(
            prev_year=(
                prev_yr.get("d_year")
                if isinstance(prev_yr, dict)
                else getattr(prev_yr, "d_year")
            ),
            year=(
                curr_yr.get("d_year")
                if isinstance(curr_yr, dict)
                else getattr(curr_yr, "d_year")
            ),
            i_brand_id=(
                curr_yr.get("i_brand_id")
                if isinstance(curr_yr, dict)
                else getattr(curr_yr, "i_brand_id")
            ),
            i_class_id=(
                curr_yr.get("i_class_id")
                if isinstance(curr_yr, dict)
                else getattr(curr_yr, "i_class_id")
            ),
            i_category_id=(
                curr_yr.get("i_category_id")
                if isinstance(curr_yr, dict)
                else getattr(curr_yr, "i_category_id")
            ),
            i_manufact_id=(
                curr_yr.get("i_manufact_id")
                if isinstance(curr_yr, dict)
                else getattr(curr_yr, "i_manufact_id")
            ),
            prev_yr_cnt=(
                prev_yr.get("sales_cnt")
                if isinstance(prev_yr, dict)
                else getattr(prev_yr, "sales_cnt")
            ),
            curr_yr_cnt=(
                curr_yr.get("sales_cnt")
                if isinstance(curr_yr, dict)
                else getattr(curr_yr, "sales_cnt")
            ),
            sales_cnt_diff=(
                curr_yr.get("sales_cnt")
                if isinstance(curr_yr, dict)
                else getattr(curr_yr, "sales_cnt")
            )
            - (
                prev_yr.get("sales_cnt")
                if isinstance(prev_yr, dict)
                else getattr(prev_yr, "sales_cnt")
            ),
            sales_amt_diff=(
                curr_yr.get("sales_amt")
                if isinstance(curr_yr, dict)
                else getattr(curr_yr, "sales_amt")
            )
            - (
                prev_yr.get("sales_amt")
                if isinstance(prev_yr, dict)
                else getattr(prev_yr, "sales_amt")
            ),
        )
    ]
    if (
        curr_yr.get("sales_cnt")
        if isinstance(curr_yr, dict)
        else getattr(curr_yr, "sales_cnt")
    )
    / (
        prev_yr.get("sales_cnt")
        if isinstance(prev_yr, dict)
        else getattr(prev_yr, "sales_cnt")
    )
    < 0.9
    else []
)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q75_simplified()
