# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing


def _first(lst):
    if not isinstance(lst, list):
        raise Exception("first expects list")
    return lst[0] if len(lst) > 0 else None


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


@dataclasses.dataclass
class CallCenter:
    cc_call_center_sk: int
    cc_call_center_id: str
    cc_name: str
    cc_manager: str


@dataclasses.dataclass
class CatalogReturn:
    cr_call_center_sk: int
    cr_returned_date_sk: int
    cr_returning_customer_sk: int
    cr_net_loss: float


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int
    d_moy: int


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_current_cdemo_sk: int
    c_current_hdemo_sk: int
    c_current_addr_sk: int


@dataclasses.dataclass
class CustomerAddress:
    ca_address_sk: int
    ca_gmt_offset: int


@dataclasses.dataclass
class CustomerDemographics:
    cd_demo_sk: int
    cd_marital_status: str
    cd_education_status: str


@dataclasses.dataclass
class HouseholdDemographics:
    hd_demo_sk: int
    hd_buy_potential: str


call_center = None
catalog_returns = None
date_dim = None
customer = None
customer_demographics = None
household_demographics = None
customer_address = None
result = None


def test_TPCDS_Q91_returns():
    assert result == {
        "Call_Center": "CC1",
        "Call_Center_Name": "Main",
        "Manager": "Alice",
        "Returns_Loss": 10,
    }


def main():
    global call_center
    call_center = [
        {
            "cc_call_center_sk": 1,
            "cc_call_center_id": "CC1",
            "cc_name": "Main",
            "cc_manager": "Alice",
        }
    ]
    global catalog_returns
    catalog_returns = [
        {
            "cr_call_center_sk": 1,
            "cr_returned_date_sk": 1,
            "cr_returning_customer_sk": 1,
            "cr_net_loss": 10,
        }
    ]
    global date_dim
    date_dim = [{"d_date_sk": 1, "d_year": 2001, "d_moy": 5}]
    global customer
    customer = [
        {
            "c_customer_sk": 1,
            "c_current_cdemo_sk": 1,
            "c_current_hdemo_sk": 1,
            "c_current_addr_sk": 1,
        }
    ]
    global customer_demographics
    customer_demographics = [
        {"cd_demo_sk": 1, "cd_marital_status": "M", "cd_education_status": "Unknown"}
    ]
    global household_demographics
    household_demographics = [{"hd_demo_sk": 1, "hd_buy_potential": "1001-5000"}]
    global customer_address
    customer_address = [{"ca_address_sk": 1, "ca_gmt_offset": (-6)}]

    def _q0():
        _src = call_center
        _rows = _query(
            _src,
            [
                {
                    "items": catalog_returns,
                    "on": lambda cc, cr: (
                        (_get(cc, "cc_call_center_sk") == _get(cr, "cr_call_center_sk"))
                    ),
                },
                {
                    "items": date_dim,
                    "on": lambda cc, cr, d: (
                        (_get(cr, "cr_returned_date_sk") == _get(d, "d_date_sk"))
                    ),
                },
                {
                    "items": customer,
                    "on": lambda cc, cr, d, c: (
                        (
                            _get(cr, "cr_returning_customer_sk")
                            == _get(c, "c_customer_sk")
                        )
                    ),
                },
                {
                    "items": customer_demographics,
                    "on": lambda cc, cr, d, c, cd: (
                        (_get(c, "c_current_cdemo_sk") == _get(cd, "cd_demo_sk"))
                    ),
                },
                {
                    "items": household_demographics,
                    "on": lambda cc, cr, d, c, cd, hd: (
                        (_get(c, "c_current_hdemo_sk") == _get(hd, "hd_demo_sk"))
                    ),
                },
                {
                    "items": customer_address,
                    "on": lambda cc, cr, d, c, cd, hd, ca: (
                        (_get(c, "c_current_addr_sk") == _get(ca, "ca_address_sk"))
                    ),
                },
            ],
            {
                "select": lambda cc, cr, d, c, cd, hd, ca: (cc, cr, d, c, cd, hd, ca),
                "where": lambda cc, cr, d, c, cd, hd, ca: (
                    (
                        (
                            (
                                (
                                    (
                                        (_get(d, "d_year") == 2001)
                                        and (_get(d, "d_moy") == 5)
                                    )
                                    and (_get(cd, "cd_marital_status") == "M")
                                )
                                and (_get(cd, "cd_education_status") == "Unknown")
                            )
                            and (_get(hd, "hd_buy_potential") == "1001-5000")
                        )
                        and (_get(ca, "ca_gmt_offset") == ((-6)))
                    )
                ),
            },
        )
        _groups = _group_by(
            _rows,
            lambda cc, cr, d, c, cd, hd, ca: (
                {
                    "id": _get(cc, "cc_call_center_id"),
                    "name": _get(cc, "cc_name"),
                    "mgr": _get(cc, "cc_manager"),
                }
            ),
        )
        items = _groups
        return [
            {
                "Call_Center": _get(_get(g, "key"), "id"),
                "Call_Center_Name": _get(_get(g, "key"), "name"),
                "Manager": _get(_get(g, "key"), "mgr"),
                "Returns_Loss": _sum([_get(x, "cr_net_loss") for x in g]),
            }
            for g in items
        ]

    global result
    result = _first(_q0())
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q91_returns()


if __name__ == "__main__":
    main()
