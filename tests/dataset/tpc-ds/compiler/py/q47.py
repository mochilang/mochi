# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:17Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    d_year: int
    item: str
    avg_monthly_sales: float
    sum_sales: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, list):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, tuple):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, dict):
        return str(k)
    return k


def abs(x):
    if x >= 0.0:
        return x
    else:
        return -x


def test_TPCDS_Q47_simplified():
    assert result == [
        Auto1(d_year=2019, item="C", avg_monthly_sales=50.0, sum_sales=60.0),
        Auto1(d_year=2020, item="A", avg_monthly_sales=100.0, sum_sales=120.0),
    ]


v2 = [
    Auto1(d_year=2020, item="A", avg_monthly_sales=100.0, sum_sales=120.0),
    Auto1(d_year=2020, item="B", avg_monthly_sales=80.0, sum_sales=70.0),
    Auto1(d_year=2019, item="C", avg_monthly_sales=50.0, sum_sales=60.0),
]
year = 2020
orderby = "item"
result = [
    Auto1(
        d_year=v.d_year,
        item=v.item,
        avg_monthly_sales=v.avg_monthly_sales,
        sum_sales=v.sum_sales,
    )
    for v in sorted(
        [
            v
            for v in v2
            if (
                (v.d_year >= year - 1 and v.avg_monthly_sales > 0)
                and v.sum_sales > v.avg_monthly_sales
            )
            and abs(v.sum_sales - v.avg_monthly_sales) / v.avg_monthly_sales > 0.1
        ],
        key=lambda v: _sort_key([v.sum_sales - v.avg_monthly_sales, v.item]),
    )
]
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q47_simplified()
