# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:09Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    w_state: str
    i_item_id: str
    sales_before: float
    sales_after: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    w_state: str
    i_item_id: str
    sold_date: str
    net: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    w_state: str
    i_item_id: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogReturn:
    order: int
    item_sk: int
    refunded: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogSale:
    order: int
    item_sk: int
    warehouse_sk: int
    date_sk: int
    price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    date_sk: int
    date: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    item_sk: int
    item_id: str
    current_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Warehouse:
    warehouse_sk: int
    state: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_TPCDS_Q40_simplified():
    assert result == [
        Auto1(w_state="CA", i_item_id="I1", sales_before=100.0, sales_after=0.0)
    ]


catalog_sales = [
    CatalogSale(order=1, item_sk=1, warehouse_sk=1, date_sk=1, price=100.0),
    CatalogSale(order=2, item_sk=1, warehouse_sk=1, date_sk=2, price=150.0),
]
catalog_returns = [CatalogReturn(order=2, item_sk=1, refunded=150.0)]
item = [Item(item_sk=1, item_id="I1", current_price=1.2)]
warehouse = [Warehouse(warehouse_sk=1, state="CA")]
date_dim = [
    DateDim(date_sk=1, date="2020-01-10"),
    DateDim(date_sk=2, date="2020-01-20"),
]
sales_date = "2020-01-15"
records = _query(
    catalog_sales,
    [
        {
            "items": catalog_returns,
            "on": lambda cs, cr: cs.order == cr.order and cs.item_sk == cr.item_sk,
            "left": True,
        },
        {"items": warehouse, "on": lambda cs, cr, w: cs.warehouse_sk == w.warehouse_sk},
        {"items": item, "on": lambda cs, cr, w, i: cs.item_sk == i.item_sk},
        {"items": date_dim, "on": lambda cs, cr, w, i, d: cs.date_sk == d.date_sk},
    ],
    {
        "select": lambda cs, cr, w, i, d: Auto2(
            w_state=w.state,
            i_item_id=i.item_id,
            sold_date=d.date,
            net=cs.price - (0.0 if cr == None else cr.refunded),
        ),
        "where": lambda cs, cr, w, i, d: i.current_price >= 0.99
        and i.current_price <= 1.49,
    },
)


def _q0():
    _groups = {}
    _order = []
    for r in records:
        _k = Auto3(w_state=r.w_state, i_item_id=r.i_item_id)
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(r)
    _items1 = [_groups[k] for k in _order]
    return [
        Auto1(
            w_state=g.key["w_state"],
            i_item_id=g.key["i_item_id"],
            sales_before=sum([x.net if x.sold_date < sales_date else 0.0 for x in g]),
            sales_after=sum([x.net if x.sold_date >= sales_date else 0.0 for x in g]),
        )
        for g in _items1
    ]


result = _q0()
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q40_simplified()
