# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


@dataclasses.dataclass
class CatalogSale:
    cs_item_sk: int
    cs_sold_date_sk: int
    cs_ext_sales_price: float


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_item_id: str
    i_item_desc: str
    i_category: str
    i_class: str
    i_current_price: float


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_date: str


catalog_sales = None
item = None
date_dim = None
filtered = None
class_totals = None
result = None


def test_TPCDS_Q20_revenue_ratio():
    assert result == [
        {
            "i_item_id": "ITEM1",
            "i_item_desc": "Item One",
            "i_category": "A",
            "i_class": "X",
            "i_current_price": 10,
            "itemrevenue": 600,
            "revenueratio": 66.66666666666667,
        },
        {
            "i_item_id": "ITEM2",
            "i_item_desc": "Item Two",
            "i_category": "A",
            "i_class": "X",
            "i_current_price": 20,
            "itemrevenue": 300,
            "revenueratio": 33.333333333333336,
        },
    ]


def main():
    global catalog_sales
    catalog_sales = [
        {"cs_item_sk": 1, "cs_sold_date_sk": 1, "cs_ext_sales_price": 100},
        {"cs_item_sk": 1, "cs_sold_date_sk": 1, "cs_ext_sales_price": 200},
        {"cs_item_sk": 2, "cs_sold_date_sk": 1, "cs_ext_sales_price": 150},
        {"cs_item_sk": 1, "cs_sold_date_sk": 2, "cs_ext_sales_price": 300},
        {"cs_item_sk": 2, "cs_sold_date_sk": 2, "cs_ext_sales_price": 150},
        {"cs_item_sk": 3, "cs_sold_date_sk": 1, "cs_ext_sales_price": 50},
    ]
    global item
    item = [
        {
            "i_item_sk": 1,
            "i_item_id": "ITEM1",
            "i_item_desc": "Item One",
            "i_category": "A",
            "i_class": "X",
            "i_current_price": 10,
        },
        {
            "i_item_sk": 2,
            "i_item_id": "ITEM2",
            "i_item_desc": "Item Two",
            "i_category": "A",
            "i_class": "X",
            "i_current_price": 20,
        },
        {
            "i_item_sk": 3,
            "i_item_id": "ITEM3",
            "i_item_desc": "Item Three",
            "i_category": "D",
            "i_class": "Y",
            "i_current_price": 15,
        },
    ]
    global date_dim
    date_dim = [
        {"d_date_sk": 1, "d_date": "2000-02-10"},
        {"d_date_sk": 2, "d_date": "2000-02-20"},
    ]

    def _q0():
        _src = catalog_sales
        _rows = _query(
            _src,
            [
                {
                    "items": item,
                    "on": lambda cs, i: (
                        (_get(cs, "cs_item_sk") == _get(i, "i_item_sk"))
                    ),
                },
                {
                    "items": date_dim,
                    "on": lambda cs, i, d: (
                        (_get(cs, "cs_sold_date_sk") == _get(d, "d_date_sk"))
                    ),
                },
            ],
            {
                "select": lambda cs, i, d: (cs, i, d),
                "where": lambda cs, i, d: (
                    (
                        (
                            (_get(i, "i_category") in ["A", "B", "C"])
                            and (_get(d, "d_date") >= "2000-02-01")
                        )
                        and (_get(d, "d_date") <= "2000-03-02")
                    )
                ),
            },
        )
        _groups = _group_by(
            _rows,
            lambda cs, i, d: (
                {
                    "id": _get(i, "i_item_id"),
                    "desc": _get(i, "i_item_desc"),
                    "cat": _get(i, "i_category"),
                    "_class": _get(i, "i_class"),
                    "price": _get(i, "i_current_price"),
                }
            ),
        )
        items = _groups
        return [
            {
                "i_item_id": _get(_get(g, "key"), "id"),
                "i_item_desc": _get(_get(g, "key"), "desc"),
                "i_category": _get(_get(g, "key"), "cat"),
                "i_class": _get(_get(g, "key"), "_class"),
                "i_current_price": _get(_get(g, "key"), "price"),
                "itemrevenue": _sum([_get(x, "cs_ext_sales_price") for x in g]),
            }
            for g in items
        ]

    global filtered
    filtered = _q0()

    def _q1():
        _src = filtered
        _rows = _query(_src, [], {"select": lambda f: (f)})
        _groups = _group_by(_rows, lambda f: (_get(f, "i_class")))
        items = _groups
        return [
            {
                "_class": _get(g, "key"),
                "total": _sum([_get(x, "itemrevenue") for x in g]),
            }
            for g in items
        ]

    global class_totals
    class_totals = _q1()
    global result
    result = _query(
        filtered,
        [
            {
                "items": class_totals,
                "on": lambda f, t: ((_get(f, "i_class") == _get(t, "_class"))),
            }
        ],
        {
            "select": lambda f, t: {
                "i_item_id": _get(f, "i_item_id"),
                "i_item_desc": _get(f, "i_item_desc"),
                "i_category": _get(f, "i_category"),
                "i_class": _get(f, "i_class"),
                "i_current_price": _get(f, "i_current_price"),
                "itemrevenue": _get(f, "itemrevenue"),
                "revenueratio": (((_get(f, "itemrevenue") * 100)) / _get(t, "total")),
            },
            "sortKey": lambda f, t: (
                [
                    _get(f, "i_category"),
                    _get(f, "i_class"),
                    _get(f, "i_item_id"),
                    _get(f, "i_item_desc"),
                ]
            ),
        },
    )
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q20_revenue_ratio()


if __name__ == "__main__":
    main()
