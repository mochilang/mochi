# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:49:34Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    customer_id: str
    customer_first_name: str
    customer_last_name: str
    customer_login: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    customer_id: object
    customer_first_name: object
    customer_last_name: object
    customer_login: object
    dyear: object
    year_total: float
    sale_type: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    id: str
    first: str
    last: str
    login: str
    year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogSale:
    cs_bill_customer_sk: int
    cs_sold_date_sk: int
    cs_ext_list_price: float
    cs_ext_wholesale_cost: float
    cs_ext_discount_amt: float
    cs_ext_sales_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_customer_id: str
    c_first_name: str
    c_last_name: str
    c_login: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_customer_sk: int
    ss_sold_date_sk: int
    ss_ext_list_price: float
    ss_ext_wholesale_cost: float
    ss_ext_discount_amt: float
    ss_ext_sales_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class WebSale:
    ws_bill_customer_sk: int
    ws_sold_date_sk: int
    ws_ext_list_price: float
    ws_ext_wholesale_cost: float
    ws_ext_discount_amt: float
    ws_ext_sales_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_TPCDS_Q4_result():
    assert result == [
        Auto1(
            customer_id="C1",
            customer_first_name="Alice",
            customer_last_name="A",
            customer_login="alice",
        )
    ]


customer = [
    Customer(
        c_customer_sk=1,
        c_customer_id="C1",
        c_first_name="Alice",
        c_last_name="A",
        c_login="alice",
    )
]
store_sales = [
    StoreSale(
        ss_customer_sk=1,
        ss_sold_date_sk=1,
        ss_ext_list_price=10.0,
        ss_ext_wholesale_cost=5.0,
        ss_ext_discount_amt=0.0,
        ss_ext_sales_price=10.0,
    ),
    StoreSale(
        ss_customer_sk=1,
        ss_sold_date_sk=2,
        ss_ext_list_price=20.0,
        ss_ext_wholesale_cost=5.0,
        ss_ext_discount_amt=0.0,
        ss_ext_sales_price=20.0,
    ),
]
catalog_sales = [
    CatalogSale(
        cs_bill_customer_sk=1,
        cs_sold_date_sk=1,
        cs_ext_list_price=10.0,
        cs_ext_wholesale_cost=2.0,
        cs_ext_discount_amt=0.0,
        cs_ext_sales_price=10.0,
    ),
    CatalogSale(
        cs_bill_customer_sk=1,
        cs_sold_date_sk=2,
        cs_ext_list_price=30.0,
        cs_ext_wholesale_cost=2.0,
        cs_ext_discount_amt=0.0,
        cs_ext_sales_price=30.0,
    ),
]
web_sales = [
    WebSale(
        ws_bill_customer_sk=1,
        ws_sold_date_sk=1,
        ws_ext_list_price=10.0,
        ws_ext_wholesale_cost=5.0,
        ws_ext_discount_amt=0.0,
        ws_ext_sales_price=10.0,
    ),
    WebSale(
        ws_bill_customer_sk=1,
        ws_sold_date_sk=2,
        ws_ext_list_price=12.0,
        ws_ext_wholesale_cost=5.0,
        ws_ext_discount_amt=0.0,
        ws_ext_sales_price=12.0,
    ),
]
date_dim = [DateDim(d_date_sk=1, d_year=2001), DateDim(d_date_sk=2, d_year=2002)]


def _q0():
    _src = customer
    _rows = _query(
        _src,
        [
            {
                "items": store_sales,
                "on": lambda c, s: c.c_customer_sk == s.ss_customer_sk,
            },
            {"items": date_dim, "on": lambda c, s, d: s.ss_sold_date_sk == d.d_date_sk},
        ],
        {"select": lambda c, s, d: (c, s, d)},
    )
    _groups = _group_by(
        _rows,
        lambda c, s, d: Auto3(
            id=c.c_customer_id,
            first=c.c_first_name,
            last=c.c_last_name,
            login=c.c_login,
            year=d.d_year,
        ),
    )
    _items1 = _groups
    return [
        Auto2(
            customer_id=g.key["id"],
            customer_first_name=g.key["first"],
            customer_last_name=g.key["last"],
            customer_login=g.key["login"],
            dyear=g.key["year"],
            year_total=_sum(
                [
                    (
                        x[1].ss_ext_list_price
                        - x[1].ss_ext_wholesale_cost
                        - x[1].ss_ext_discount_amt
                        + x[1].ss_ext_sales_price
                    )
                    / 2
                    for x in g
                ]
            ),
            sale_type="s",
        )
        for g in _items1
    ]


def _q2():
    _src = customer
    _rows = _query(
        _src,
        [
            {
                "items": catalog_sales,
                "on": lambda c, cs: c.c_customer_sk == cs.cs_bill_customer_sk,
            },
            {
                "items": date_dim,
                "on": lambda c, cs, d: cs.cs_sold_date_sk == d.d_date_sk,
            },
        ],
        {"select": lambda c, cs, d: (c, cs, d)},
    )
    _groups = _group_by(
        _rows,
        lambda c, cs, d: Auto3(
            id=c.c_customer_id,
            first=c.c_first_name,
            last=c.c_last_name,
            login=c.c_login,
            year=d.d_year,
        ),
    )
    _items3 = _groups
    return [
        Auto2(
            customer_id=g.key["id"],
            customer_first_name=g.key["first"],
            customer_last_name=g.key["last"],
            customer_login=g.key["login"],
            dyear=g.key["year"],
            year_total=_sum(
                [
                    (
                        x[1].cs_ext_list_price
                        - x[1].cs_ext_wholesale_cost
                        - x[1].cs_ext_discount_amt
                        + x[1].cs_ext_sales_price
                    )
                    / 2
                    for x in g
                ]
            ),
            sale_type="c",
        )
        for g in _items3
    ]


def _q4():
    _src = customer
    _rows = _query(
        _src,
        [
            {
                "items": web_sales,
                "on": lambda c, ws: c.c_customer_sk == ws.ws_bill_customer_sk,
            },
            {
                "items": date_dim,
                "on": lambda c, ws, d: ws.ws_sold_date_sk == d.d_date_sk,
            },
        ],
        {"select": lambda c, ws, d: (c, ws, d)},
    )
    _groups = _group_by(
        _rows,
        lambda c, ws, d: Auto3(
            id=c.c_customer_id,
            first=c.c_first_name,
            last=c.c_last_name,
            login=c.c_login,
            year=d.d_year,
        ),
    )
    _items5 = _groups
    return [
        Auto2(
            customer_id=g.key["id"],
            customer_first_name=g.key["first"],
            customer_last_name=g.key["last"],
            customer_login=g.key["login"],
            dyear=g.key["year"],
            year_total=_sum(
                [
                    (
                        x[1].ws_ext_list_price
                        - x[1].ws_ext_wholesale_cost
                        - x[1].ws_ext_discount_amt
                        + x[1].ws_ext_sales_price
                    )
                    / 2
                    for x in g
                ]
            ),
            sale_type="w",
        )
        for g in _items5
    ]


year_total = _q0() + _q2() + _q4()
result = _query(
    year_total,
    [
        {
            "items": year_total,
            "on": lambda s1, s2: s2["customer_id"] == s1["customer_id"],
        },
        {
            "items": year_total,
            "on": lambda s1, s2, c1: c1["customer_id"] == s1["customer_id"],
        },
        {
            "items": year_total,
            "on": lambda s1, s2, c1, c2: c2["customer_id"] == s1["customer_id"],
        },
        {
            "items": year_total,
            "on": lambda s1, s2, c1, c2, w1: w1["customer_id"] == s1["customer_id"],
        },
        {
            "items": year_total,
            "on": lambda s1, s2, c1, c2, w1, w2: w2["customer_id"] == s1["customer_id"],
        },
    ],
    {
        "select": lambda s1, s2, c1, c2, w1, w2: Auto1(
            customer_id=s2["customer_id"],
            customer_first_name=s2["customer_first_name"],
            customer_last_name=s2["customer_last_name"],
            customer_login=s2["customer_login"],
        ),
        "where": lambda s1, s2, c1, c2, w1, w2: (
            (
                (
                    (
                        (
                            (
                                (
                                    (
                                        (
                                            (
                                                (
                                                    (
                                                        (
                                                            (
                                                                (
                                                                    s1["sale_type"]
                                                                    == "s"
                                                                    and c1["sale_type"]
                                                                    == "c"
                                                                )
                                                                and w1["sale_type"]
                                                                == "w"
                                                            )
                                                            and s2["sale_type"] == "s"
                                                        )
                                                        and c2["sale_type"] == "c"
                                                    )
                                                    and w2["sale_type"] == "w"
                                                )
                                                and s1["dyear"] == 2001
                                            )
                                            and s2["dyear"] == 2002
                                        )
                                        and c1["dyear"] == 2001
                                    )
                                    and c2["dyear"] == 2002
                                )
                                and w1["dyear"] == 2001
                            )
                            and w2["dyear"] == 2002
                        )
                        and s1["year_total"] > 0
                    )
                    and c1["year_total"] > 0
                )
                and w1["year_total"] > 0
            )
            and (c2["year_total"] / c1["year_total"] if c1["year_total"] > 0 else None)
            > (s2["year_total"] / s1["year_total"] if s1["year_total"] > 0 else None)
        )
        and (c2["year_total"] / c1["year_total"] if c1["year_total"] > 0 else None)
        > (w2["year_total"] / w1["year_total"] if w1["year_total"] > 0 else None),
        "sortKey": lambda s1, s2, c1, c2, w1, w2: [
            s2["customer_id"],
            s2["customer_first_name"],
            s2["customer_last_name"],
            s2["customer_login"],
        ],
    },
)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q4_result()
