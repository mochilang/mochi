from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Item:
    product_name: str
    manufact_id: int
    manufact: int
    category: str
    color: str
    units: str
    size: str

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, list):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, tuple):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, dict):
        return str(k)
    return k


def test_TPCDS_Q41_simplified():
    assert result == ["Blue Shirt", "Red Dress"]


item = [
    Item(
        product_name="Blue Shirt",
        manufact_id=100,
        manufact=1,
        category="Women",
        color="blue",
        units="pack",
        size="M",
    ),
    Item(
        product_name="Red Dress",
        manufact_id=120,
        manufact=1,
        category="Women",
        color="red",
        units="pack",
        size="M",
    ),
    Item(
        product_name="Pants",
        manufact_id=200,
        manufact=2,
        category="Men",
        color="black",
        units="pair",
        size="L",
    ),
]
lower = 100
result = [
    i1.product_name
    for i1 in sorted(
        [
            i1
            for i1 in item
            if (i1.manufact_id >= lower and i1.manufact_id <= lower + 40)
            and len(
                [
                    i2
                    for i2 in item
                    if i2.manufact == i1.manufact and i2.category == i1.category
                ]
            )
            > 1
        ],
        key=lambda i1: _sort_key(i1.product_name),
    )
]
print(json.dumps(result, default=lambda o: vars(o)))
test_TPCDS_Q41_simplified()