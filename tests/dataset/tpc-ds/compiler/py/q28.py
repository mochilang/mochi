# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:49:56Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    B1_LP: float
    B1_CNT: int
    B1_CNTD: int
    B2_LP: float
    B2_CNT: int
    B2_CNTD: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_quantity: int
    ss_list_price: float
    ss_coupon_amt: float
    ss_wholesale_cost: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _avg(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("avg() expects list or group")
    if not v:
        return 0
    s = 0.0
    for it in v:
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("avg() expects numbers")
    return s / len(v)


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


@dataclasses.dataclass
class StoreSale:
    ss_quantity: int
    ss_list_price: float
    ss_coupon_amt: float
    ss_wholesale_cost: float

    def __contains__(self, key):
        return hasattr(self, key)


def test_TPCDS_Q28_buckets():
    assert result == Auto1(
        B1_LP=100.0, B1_CNT=1, B1_CNTD=1, B2_LP=80.0, B2_CNT=1, B2_CNTD=1
    )


store_sales = [
    StoreSale(
        ss_quantity=3, ss_list_price=100.0, ss_coupon_amt=50.0, ss_wholesale_cost=30.0
    ),
    StoreSale(
        ss_quantity=8, ss_list_price=80.0, ss_coupon_amt=10.0, ss_wholesale_cost=20.0
    ),
    StoreSale(
        ss_quantity=12, ss_list_price=60.0, ss_coupon_amt=5.0, ss_wholesale_cost=15.0
    ),
]
bucket1 = [
    ss
    for ss in store_sales
    if (ss.ss_quantity >= 0 and ss.ss_quantity <= 5)
    and (
        (
            ss.ss_list_price >= 0
            and ss.ss_list_price <= 110
            or (ss.ss_coupon_amt >= 0 and ss.ss_coupon_amt <= 1000)
        )
        or (ss.ss_wholesale_cost >= 0 and ss.ss_wholesale_cost <= 50)
    )
]
bucket2 = [
    ss
    for ss in store_sales
    if (ss.ss_quantity >= 6 and ss.ss_quantity <= 10)
    and (
        (
            ss.ss_list_price >= 0
            and ss.ss_list_price <= 110
            or (ss.ss_coupon_amt >= 0 and ss.ss_coupon_amt <= 1000)
        )
        or (ss.ss_wholesale_cost >= 0 and ss.ss_wholesale_cost <= 50)
    )
]


def _q0():
    _groups = {}
    _order = []
    for x in bucket1:
        _k = x["ss_list_price"]
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(x)
    _items1 = [_groups[k] for k in _order]
    return [g.key for g in _items1]


def _q1():
    _groups = {}
    _order = []
    for x in bucket2:
        _k = x["ss_list_price"]
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(x)
    _items1 = [_groups[k] for k in _order]
    return [g.key for g in _items1]


result = Auto1(
    B1_LP=_avg([x["ss_list_price"] for x in bucket1]),
    B1_CNT=len(bucket1),
    B1_CNTD=len(_q0()),
    B2_LP=_avg([x["ss_list_price"] for x in bucket2]),
    B2_CNT=len(bucket2),
    B2_CNTD=len(_q1()),
)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q28_buckets()
