# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:25Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    segment: int
    num_customers: int
    segment_base: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    customer: int
    amt: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    customer: object
    revenue: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto4:
    seg: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_current_addr_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerAddres:
    ca_address_sk: int
    ca_county: str
    ca_state: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_month_seq: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_county: str
    s_state: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    customer: int
    sold_date: int
    price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, "Items"):
        return len(v.Items)
    raise Exception("count() expects list or group")


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _int(x):
    return int(x)


def test_TPCDS_Q54_simplified():
    assert result == [
        Auto1(segment=1, num_customers=1, segment_base=50),
        Auto1(segment=0, num_customers=1, segment_base=0),
    ]


store_sales = [
    StoreSale(customer=1, sold_date=2, price=60.0),
    StoreSale(customer=2, sold_date=2, price=40.0),
]
date_dim = [DateDim(d_date_sk=2, d_month_seq=5)]
customer = [
    Customer(c_customer_sk=1, c_current_addr_sk=1),
    Customer(c_customer_sk=2, c_current_addr_sk=1),
]
customer_address = [CustomerAddres(ca_address_sk=1, ca_county="X", ca_state="Y")]
store = [Store(s_store_sk=1, s_county="X", s_state="Y")]
revenue = _query(
    store_sales,
    [
        {"items": date_dim, "on": lambda ss, d: ss.sold_date == d.d_date_sk},
        {"items": customer, "on": lambda ss, d, c: ss.customer == c.c_customer_sk},
        {
            "items": customer_address,
            "on": lambda ss, d, c, ca: (
                c.c_current_addr_sk == ca.ca_address_sk and ca.ca_county == "X"
            )
            and ca.ca_state == "Y",
        },
        {
            "items": store,
            "on": lambda ss, d, c, ca, s: (
                1 == s.s_store_sk and ca.ca_county == s.s_county
            )
            and ca.ca_state == s.s_state,
        },
    ],
    {"select": lambda ss, d, c, ca, s: Auto2(customer=c.c_customer_sk, amt=ss.price)},
)


def _q0():
    _groups = {}
    _order = []
    for r in revenue:
        _k = r.customer
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(r)
    _items1 = [_groups[k] for k in _order]
    return [Auto3(customer=g.key, revenue=sum([x.amt for x in g])) for g in _items1]


by_customer = _q0()


def _q1():
    _groups = {}
    _order = []
    for r in by_customer:
        _k = Auto4(seg=int(r.revenue / 50))
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(r)
    _items1 = [_groups[k] for k in _order]
    return [
        Auto1(
            segment=g.key["seg"], num_customers=len(g), segment_base=g.key["seg"] * 50
        )
        for g in _items1
    ]


segments = _q1()
result = segments
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q54_simplified()
