# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing


def _append(lst, v):
    out = list(lst) if lst is not None else []
    out.append(v)
    return out


def _contains(c, v):
    if isinstance(c, list):
        return v in c
    if isinstance(c, str):
        return str(v) in c
    if isinstance(c, dict):
        return str(v) in c
    return False


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def distinct(xs: list[typing.Any]) -> list[typing.Any]:
    out = []
    for x in xs:
        if not _contains(out, x):
            out = _append(out, x)
    return out


@dataclasses.dataclass
class WebSale:
    ws_order_number: int
    ws_warehouse_sk: int
    ws_ship_date_sk: int
    ws_ship_addr_sk: int
    ws_web_site_sk: int
    ws_ext_ship_cost: float
    ws_net_profit: float


@dataclasses.dataclass
class WebReturn:
    wr_order_number: int


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_date: str


@dataclasses.dataclass
class CustomerAddress:
    ca_address_sk: int
    ca_state: str


@dataclasses.dataclass
class WebSite:
    web_site_sk: int
    web_company_name: str


web_sales = None
web_returns = None
date_dim = None
customer_address = None
web_site = None
ws_wh = None
filtered = None
result = None


def test_TPCDS_Q95_shipping_returns():
    assert result == {"order_count": 1, "total_shipping_cost": 2, "total_net_profit": 5}


def main():
    global web_sales
    web_sales = [
        {
            "ws_order_number": 1,
            "ws_warehouse_sk": 1,
            "ws_ship_date_sk": 1,
            "ws_ship_addr_sk": 1,
            "ws_web_site_sk": 1,
            "ws_ext_ship_cost": 2,
            "ws_net_profit": 5,
        },
        {
            "ws_order_number": 1,
            "ws_warehouse_sk": 2,
            "ws_ship_date_sk": 1,
            "ws_ship_addr_sk": 1,
            "ws_web_site_sk": 1,
            "ws_ext_ship_cost": 0,
            "ws_net_profit": 0,
        },
    ]
    global web_returns
    web_returns = [{"wr_order_number": 1}]
    global date_dim
    date_dim = [{"d_date_sk": 1, "d_date": "2001-02-01"}]
    global customer_address
    customer_address = [{"ca_address_sk": 1, "ca_state": "CA"}]
    global web_site
    web_site = [{"web_site_sk": 1, "web_company_name": "pri"}]
    global ws_wh
    ws_wh = [
        {"ws_order_number": _get(ws1, "ws_order_number")}
        for ws1 in web_sales
        for ws2 in web_sales
        if (
            (_get(ws1, "ws_order_number") == _get(ws2, "ws_order_number"))
            and (_get(ws1, "ws_warehouse_sk") != _get(ws2, "ws_warehouse_sk"))
        )
    ]
    global filtered
    filtered = _query(
        web_sales,
        [
            {
                "items": date_dim,
                "on": lambda ws, d: (
                    (_get(ws, "ws_ship_date_sk") == _get(d, "d_date_sk"))
                ),
            },
            {
                "items": customer_address,
                "on": lambda ws, d, ca: (
                    (_get(ws, "ws_ship_addr_sk") == _get(ca, "ca_address_sk"))
                ),
            },
            {
                "items": web_site,
                "on": lambda ws, d, ca, w: (
                    (_get(ws, "ws_web_site_sk") == _get(w, "web_site_sk"))
                ),
            },
        ],
        {
            "select": lambda ws, d, ca, w: ws,
            "where": lambda ws, d, ca, w: (
                (
                    (
                        (
                            (_get(ca, "ca_state") == "CA")
                            and (_get(w, "web_company_name") == "pri")
                        )
                        and (
                            _get(ws, "ws_order_number")
                            in ([_get(x, "ws_order_number") for x in ws_wh])
                        )
                    )
                    and (
                        _get(ws, "ws_order_number")
                        in ([_get(wr, "wr_order_number") for wr in web_returns])
                    )
                )
            ),
        },
    )
    global result
    result = {
        "order_count": len(distinct([_get(x, "ws_order_number") for x in filtered])),
        "total_shipping_cost": _sum([_get(x, "ws_ext_ship_cost") for x in filtered]),
        "total_net_profit": _sum([_get(x, "ws_net_profit") for x in filtered]),
    }
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q95_shipping_returns()


if __name__ == "__main__":
    main()
