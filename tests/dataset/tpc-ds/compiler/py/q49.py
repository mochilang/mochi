# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:20Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    channel: str
    item: str
    return_ratio: float
    return_rank: int
    currency_rank: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Web:
    item: str
    return_ratio: float
    currency_ratio: float
    return_rank: int
    currency_rank: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, list):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, tuple):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, dict):
        return str(k)
    return k


def test_TPCDS_Q49_simplified():
    assert result == [
        Auto1(
            channel="catalog",
            item="A",
            return_ratio=0.3,
            return_rank=1,
            currency_rank=1,
        ),
        Auto1(
            channel="store", item="A", return_ratio=0.25, return_rank=1, currency_rank=1
        ),
        Auto1(
            channel="web", item="A", return_ratio=0.2, return_rank=1, currency_rank=1
        ),
        Auto1(
            channel="web", item="B", return_ratio=0.5, return_rank=2, currency_rank=2
        ),
    ]


web = [
    Web(item="A", return_ratio=0.2, currency_ratio=0.3, return_rank=1, currency_rank=1),
    Web(item="B", return_ratio=0.5, currency_ratio=0.6, return_rank=2, currency_rank=2),
]
catalog = [
    Web(item="A", return_ratio=0.3, currency_ratio=0.4, return_rank=1, currency_rank=1)
]
store = [
    Web(
        item="A", return_ratio=0.25, currency_ratio=0.35, return_rank=1, currency_rank=1
    )
]
tmp = (
    [
        Auto1(
            channel="web",
            item=w.item,
            return_ratio=w.return_ratio,
            return_rank=w.return_rank,
            currency_rank=w.currency_rank,
        )
        for w in web
        if w.return_rank <= 10 or w.currency_rank <= 10
    ]
    + [
        Auto1(
            channel="catalog",
            item=c.item,
            return_ratio=c.return_ratio,
            return_rank=c.return_rank,
            currency_rank=c.currency_rank,
        )
        for c in catalog
        if c.return_rank <= 10 or c.currency_rank <= 10
    ]
    + [
        Auto1(
            channel="store",
            item=s.item,
            return_ratio=s.return_ratio,
            return_rank=s.return_rank,
            currency_rank=s.currency_rank,
        )
        for s in store
        if s.return_rank <= 10 or s.currency_rank <= 10
    ]
)
result = [
    r
    for r in sorted(
        [r for r in tmp],
        key=lambda r: _sort_key(
            [
                r.get("channel") if isinstance(r, dict) else getattr(r, "channel"),
                (
                    r.get("return_rank")
                    if isinstance(r, dict)
                    else getattr(r, "return_rank")
                ),
                (
                    r.get("currency_rank")
                    if isinstance(r, dict)
                    else getattr(r, "currency_rank")
                ),
                r.get("item") if isinstance(r, dict) else getattr(r, "item"),
            ]
        ),
    )
]
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q49_simplified()
