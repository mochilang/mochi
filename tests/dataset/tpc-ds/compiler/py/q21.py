# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:49:50Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    w_warehouse_name: str
    i_item_id: str
    inv_before: int
    inv_after: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    w: object
    i: object
    qty: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    w: int
    i: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto4:
    w_name: str
    i_id: str
    before_qty: float
    after_qty: float
    ratio: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_date: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Inventory:
    inv_item_sk: int
    inv_warehouse_sk: int
    inv_date_sk: int
    inv_quantity_on_hand: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_item_id: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Warehouse:
    w_warehouse_sk: int
    w_warehouse_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, list):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, tuple):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, dict):
        return str(k)
    return k


@dataclasses.dataclass
class Inventory:
    inv_item_sk: int
    inv_warehouse_sk: int
    inv_date_sk: int
    inv_quantity_on_hand: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Warehouse:
    w_warehouse_sk: int
    w_warehouse_name: str

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_item_id: str

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_date: str

    def __contains__(self, key):
        return hasattr(self, key)


def test_TPCDS_Q21_inventory_ratio():
    assert result == [
        Auto1(
            w_warehouse_name="Backup", i_item_id="ITEM2", inv_before=20, inv_after=20
        ),
        Auto1(w_warehouse_name="Main", i_item_id="ITEM1", inv_before=30, inv_after=40),
    ]


inventory = [
    Inventory(
        inv_item_sk=1, inv_warehouse_sk=1, inv_date_sk=1, inv_quantity_on_hand=30
    ),
    Inventory(
        inv_item_sk=1, inv_warehouse_sk=1, inv_date_sk=2, inv_quantity_on_hand=40
    ),
    Inventory(
        inv_item_sk=2, inv_warehouse_sk=2, inv_date_sk=1, inv_quantity_on_hand=20
    ),
    Inventory(
        inv_item_sk=2, inv_warehouse_sk=2, inv_date_sk=2, inv_quantity_on_hand=20
    ),
]
warehouse = [
    Warehouse(w_warehouse_sk=1, w_warehouse_name="Main"),
    Warehouse(w_warehouse_sk=2, w_warehouse_name="Backup"),
]
item = [Item(i_item_sk=1, i_item_id="ITEM1"), Item(i_item_sk=2, i_item_id="ITEM2")]
date_dim = [
    DateDim(d_date_sk=1, d_date="2000-03-01"),
    DateDim(d_date_sk=2, d_date="2000-03-20"),
]


def _q0():
    _src = inventory
    _rows = _query(
        _src,
        [{"items": date_dim, "on": lambda inv, d: inv.inv_date_sk == d.d_date_sk}],
        {
            "select": lambda inv, d: (inv, d),
            "where": lambda inv, d: d.d_date < "2000-03-15",
        },
    )
    _groups = _group_by(
        _rows, lambda inv, d: Auto3(w=inv.inv_warehouse_sk, i=inv.inv_item_sk)
    )
    _items1 = _groups
    return [
        Auto2(
            w=g.key["w"], i=g.key["i"], qty=sum([x[0].inv_quantity_on_hand for x in g])
        )
        for g in _items1
    ]


before = _q0()


def _q2():
    _src = inventory
    _rows = _query(
        _src,
        [{"items": date_dim, "on": lambda inv, d: inv.inv_date_sk == d.d_date_sk}],
        {
            "select": lambda inv, d: (inv, d),
            "where": lambda inv, d: d.d_date >= "2000-03-15",
        },
    )
    _groups = _group_by(
        _rows, lambda inv, d: Auto3(w=inv.inv_warehouse_sk, i=inv.inv_item_sk)
    )
    _items3 = _groups
    return [
        Auto2(
            w=g.key["w"], i=g.key["i"], qty=sum([x[0].inv_quantity_on_hand for x in g])
        )
        for g in _items3
    ]


after = _q2()
joined = _query(
    before,
    [
        {"items": after, "on": lambda b, a: b.w == a.w and b.i == a.i},
        {"items": warehouse, "on": lambda b, a, w: w.w_warehouse_sk == b.w},
        {"items": item, "on": lambda b, a, w, it: it.i_item_sk == b.i},
    ],
    {
        "select": lambda b, a, w, it: Auto4(
            w_name=w.w_warehouse_name,
            i_id=it.i_item_id,
            before_qty=b.qty,
            after_qty=a.qty,
            ratio=a.qty / b.qty,
        )
    },
)
result = [
    Auto1(
        w_warehouse_name=r.w_name,
        i_item_id=r.i_id,
        inv_before=r.before_qty,
        inv_after=r.after_qty,
    )
    for r in sorted(
        [r for r in joined if r.ratio >= 2.0 / 3.0 and r.ratio <= 3.0 / 2.0],
        key=lambda r: _sort_key([r.w_name, r.i_id]),
    )
]
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q21_inventory_ratio()
