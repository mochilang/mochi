# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:49:36Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    state: str
    cnt: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_current_addr_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerAddres:
    ca_address_sk: int
    ca_state: str
    ca_zip: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int
    d_moy: int
    d_month_seq: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_category: str
    i_current_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_customer_sk: int
    ss_sold_date_sk: int
    ss_item_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, list):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, tuple):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, dict):
        return str(k)
    return k


def test_TPCDS_Q6_result():
    assert result == [Auto1(state="CA", cnt=10)]


customer_address = [CustomerAddres(ca_address_sk=1, ca_state="CA", ca_zip="12345")]
customer = [Customer(c_customer_sk=1, c_current_addr_sk=1)]
store_sales = [
    StoreSale(ss_customer_sk=1, ss_sold_date_sk=1, ss_item_sk=1),
    StoreSale(ss_customer_sk=1, ss_sold_date_sk=1, ss_item_sk=1),
    StoreSale(ss_customer_sk=1, ss_sold_date_sk=1, ss_item_sk=1),
    StoreSale(ss_customer_sk=1, ss_sold_date_sk=1, ss_item_sk=1),
    StoreSale(ss_customer_sk=1, ss_sold_date_sk=1, ss_item_sk=1),
    StoreSale(ss_customer_sk=1, ss_sold_date_sk=1, ss_item_sk=1),
    StoreSale(ss_customer_sk=1, ss_sold_date_sk=1, ss_item_sk=1),
    StoreSale(ss_customer_sk=1, ss_sold_date_sk=1, ss_item_sk=1),
    StoreSale(ss_customer_sk=1, ss_sold_date_sk=1, ss_item_sk=1),
    StoreSale(ss_customer_sk=1, ss_sold_date_sk=1, ss_item_sk=1),
]
date_dim = [DateDim(d_date_sk=1, d_year=1999, d_moy=5, d_month_seq=120)]
item = [
    Item(i_item_sk=1, i_category="A", i_current_price=100.0),
    Item(i_item_sk=2, i_category="A", i_current_price=50.0),
]
target_month_seq = (
    max(
        [
            it
            for it in [
                d.d_month_seq for d in date_dim if d.d_year == 1999 and d.d_moy == 5
            ]
            if it is not None
        ]
    )
    if [d.d_month_seq for d in date_dim if d.d_year == 1999 and d.d_moy == 5]
    else 0
)


def _q0():
    _src = customer_address
    _rows = _query(
        _src,
        [
            {
                "items": customer,
                "on": lambda a, c: a.ca_address_sk == c.c_current_addr_sk,
            },
            {
                "items": store_sales,
                "on": lambda a, c, s: c.c_customer_sk == s.ss_customer_sk,
            },
            {
                "items": date_dim,
                "on": lambda a, c, s, d: s.ss_sold_date_sk == d.d_date_sk,
            },
            {"items": item, "on": lambda a, c, s, d, i: s.ss_item_sk == i.i_item_sk},
        ],
        {
            "select": lambda a, c, s, d, i: (a, c, s, d, i),
            "where": lambda a, c, s, d, i: d.d_month_seq == target_month_seq
            and i.i_current_price
            > 1.2
            * (
                sum([j.i_current_price for j in item if j.i_category == i.i_category])
                / len([j.i_current_price for j in item if j.i_category == i.i_category])
                if [j.i_current_price for j in item if j.i_category == i.i_category]
                else 0
            ),
        },
    )
    _groups = _group_by(_rows, lambda a, c, s, d, i: a.ca_state)
    _items1 = _groups
    _items1 = [g for g in _items1 if len(g) >= 10]
    _items1 = sorted(_items1, key=lambda g: _sort_key([len(g), g.key]))
    _items1 = _items1[: max(100, 0)]
    return [Auto1(state=g.key, cnt=len(g)) for g in _items1]


result = _q0()
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q6_result()
