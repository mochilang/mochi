# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:49:42Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    avg_ss_quantity: float
    avg_ss_ext_sales_price: float
    avg_ss_ext_wholesale_cost: float
    sum_ss_ext_wholesale_cost: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    pass


@dataclasses.dataclass
class CustomerAddres:
    ca_address_sk: int
    ca_country: str
    ca_state: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerDemographic:
    cd_demo_sk: int
    cd_marital_status: str
    cd_education_status: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class HouseholdDemographic:
    hd_demo_sk: int
    hd_dep_count: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_state: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_store_sk: int
    ss_sold_date_sk: int
    ss_hdemo_sk: int
    ss_cdemo_sk: int
    ss_addr_sk: int
    ss_sales_price: float
    ss_net_profit: float
    ss_quantity: int
    ss_ext_sales_price: float
    ss_ext_wholesale_cost: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _avg(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("avg() expects list or group")
    if not v:
        return 0
    s = 0.0
    for it in v:
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("avg() expects numbers")
    return s / len(v)


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


@dataclasses.dataclass
class StoreSale:
    ss_store_sk: int
    ss_sold_date_sk: int
    ss_hdemo_sk: int
    ss_cdemo_sk: int
    ss_addr_sk: int
    ss_sales_price: float
    ss_net_profit: float
    ss_quantity: int
    ss_ext_sales_price: float
    ss_ext_wholesale_cost: float

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_state: str

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerDemographics:
    cd_demo_sk: int
    cd_marital_status: str
    cd_education_status: str

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class HouseholdDemographics:
    hd_demo_sk: int
    hd_dep_count: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerAddress:
    ca_address_sk: int
    ca_country: str
    ca_state: str

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int

    def __contains__(self, key):
        return hasattr(self, key)


def test_TPCDS_Q13_averages():
    assert result == [
        Auto1(
            avg_ss_quantity=10.0,
            avg_ss_ext_sales_price=100.0,
            avg_ss_ext_wholesale_cost=50.0,
            sum_ss_ext_wholesale_cost=50.0,
        )
    ]


store_sales = [
    StoreSale(
        ss_store_sk=1,
        ss_sold_date_sk=1,
        ss_hdemo_sk=1,
        ss_cdemo_sk=1,
        ss_addr_sk=1,
        ss_sales_price=120.0,
        ss_net_profit=150.0,
        ss_quantity=10,
        ss_ext_sales_price=100.0,
        ss_ext_wholesale_cost=50.0,
    )
]
store = [Store(s_store_sk=1, s_state="CA")]
customer_demographics = [
    CustomerDemographic(cd_demo_sk=1, cd_marital_status="M1", cd_education_status="ES1")
]
household_demographics = [HouseholdDemographic(hd_demo_sk=1, hd_dep_count=3)]
customer_address = [
    CustomerAddres(ca_address_sk=1, ca_country="United States", ca_state="CA")
]
date_dim = [DateDim(d_date_sk=1, d_year=2001)]
filtered = _query(
    store_sales,
    [
        {"items": store, "on": lambda ss, s: ss.ss_store_sk == s.s_store_sk},
        {
            "items": customer_demographics,
            "on": lambda ss, s, cd: (
                ss.ss_cdemo_sk == cd.cd_demo_sk and cd.cd_marital_status == "M1"
            )
            and cd.cd_education_status == "ES1",
        },
        {
            "items": household_demographics,
            "on": lambda ss, s, cd, hd: ss.ss_hdemo_sk == hd.hd_demo_sk
            and hd.hd_dep_count == 3,
        },
        {
            "items": customer_address,
            "on": lambda ss, s, cd, hd, ca: (
                ss.ss_addr_sk == ca.ca_address_sk and ca.ca_country == "United States"
            )
            and ca.ca_state == "CA",
        },
        {
            "items": date_dim,
            "on": lambda ss, s, cd, hd, ca, d: ss.ss_sold_date_sk == d.d_date_sk
            and d.d_year == 2001,
        },
    ],
    {"select": lambda ss, s, cd, hd, ca, d: ss},
)


def _q0():
    _groups = {}
    _order = []
    for r in filtered:
        _k = Auto2()
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(r)
    _items1 = [_groups[k] for k in _order]
    return [
        Auto1(
            avg_ss_quantity=_avg([x["ss_quantity"] for x in g]),
            avg_ss_ext_sales_price=_avg([x["ss_ext_sales_price"] for x in g]),
            avg_ss_ext_wholesale_cost=_avg([x["ss_ext_wholesale_cost"] for x in g]),
            sum_ss_ext_wholesale_cost=_sum([x["ss_ext_wholesale_cost"] for x in g]),
        )
        for g in _items1
    ]


result = _q0()
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q13_averages()
