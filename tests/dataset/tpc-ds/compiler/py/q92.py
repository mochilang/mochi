# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:51:14Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_date: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_manufact_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class WebSale:
    ws_item_sk: int
    ws_sold_date_sk: int
    ws_ext_discount_amt: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class WebSale:
    ws_item_sk: int
    ws_sold_date_sk: int
    ws_ext_discount_amt: float

    def __contains__(self, key):
        return hasattr(self, key)


def test_TPCDS_Q92_threshold():
    assert result == 4.0


web_sales = [
    WebSale(ws_item_sk=1, ws_sold_date_sk=1, ws_ext_discount_amt=1.0),
    WebSale(ws_item_sk=1, ws_sold_date_sk=1, ws_ext_discount_amt=1.0),
    WebSale(ws_item_sk=1, ws_sold_date_sk=1, ws_ext_discount_amt=2.0),
]
item = [Item(i_item_sk=1, i_manufact_id=1)]
date_dim = [DateDim(d_date_sk=1, d_date="2000-01-02")]
sum_amt = sum([ws.ws_ext_discount_amt for ws in web_sales])
avg_amt = (
    sum([ws.ws_ext_discount_amt for ws in web_sales])
    / len([ws.ws_ext_discount_amt for ws in web_sales])
    if [ws.ws_ext_discount_amt for ws in web_sales]
    else 0
)
result = sum_amt if sum_amt > avg_amt * 1.3 else 0.0
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q92_threshold()
