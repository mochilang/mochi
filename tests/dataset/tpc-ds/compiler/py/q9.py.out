# Generated by Mochi Python compiler
from __future__ import annotations

import json


def _avg(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("avg() expects list or group")
    if not v:
        return 0
    s = 0.0
    for it in v:
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("avg() expects numbers")
    return s / len(v)


def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, "Items"):
        return len(v.Items)
    raise Exception("count() expects list or group")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


store_sales = None
reason = None
bucket1 = None
bucket2 = None
bucket3 = None
bucket4 = None
bucket5 = None
result = None


def test_TPCDS_Q9_result():
    assert result == [
        {"bucket1": 7, "bucket2": 15, "bucket3": 30, "bucket4": 35, "bucket5": 50}
    ]


def main():
    global store_sales
    store_sales = [
        {"ss_quantity": 5, "ss_ext_discount_amt": 5, "ss_net_paid": 7},
        {"ss_quantity": 30, "ss_ext_discount_amt": 10, "ss_net_paid": 15},
        {"ss_quantity": 50, "ss_ext_discount_amt": 20, "ss_net_paid": 30},
        {"ss_quantity": 70, "ss_ext_discount_amt": 25, "ss_net_paid": 35},
        {"ss_quantity": 90, "ss_ext_discount_amt": 40, "ss_net_paid": 50},
    ]
    global reason
    reason = [{"r_reason_sk": 1}]
    global bucket1
    bucket1 = (
        _avg(
            [
                _get(s, "ss_ext_discount_amt")
                for s in store_sales
                if ((_get(s, "ss_quantity") >= 1) and (_get(s, "ss_quantity") <= 20))
            ]
        )
        if (
            _count(
                [
                    s
                    for s in store_sales
                    if (
                        (_get(s, "ss_quantity") >= 1) and (_get(s, "ss_quantity") <= 20)
                    )
                ]
            )
            > 10
        )
        else _avg(
            [
                _get(s, "ss_net_paid")
                for s in store_sales
                if ((_get(s, "ss_quantity") >= 1) and (_get(s, "ss_quantity") <= 20))
            ]
        )
    )
    global bucket2
    bucket2 = (
        _avg(
            [
                _get(s, "ss_ext_discount_amt")
                for s in store_sales
                if ((_get(s, "ss_quantity") >= 21) and (_get(s, "ss_quantity") <= 40))
            ]
        )
        if (
            _count(
                [
                    s
                    for s in store_sales
                    if (
                        (_get(s, "ss_quantity") >= 21)
                        and (_get(s, "ss_quantity") <= 40)
                    )
                ]
            )
            > 20
        )
        else _avg(
            [
                _get(s, "ss_net_paid")
                for s in store_sales
                if ((_get(s, "ss_quantity") >= 21) and (_get(s, "ss_quantity") <= 40))
            ]
        )
    )
    global bucket3
    bucket3 = (
        _avg(
            [
                _get(s, "ss_ext_discount_amt")
                for s in store_sales
                if ((_get(s, "ss_quantity") >= 41) and (_get(s, "ss_quantity") <= 60))
            ]
        )
        if (
            _count(
                [
                    s
                    for s in store_sales
                    if (
                        (_get(s, "ss_quantity") >= 41)
                        and (_get(s, "ss_quantity") <= 60)
                    )
                ]
            )
            > 30
        )
        else _avg(
            [
                _get(s, "ss_net_paid")
                for s in store_sales
                if ((_get(s, "ss_quantity") >= 41) and (_get(s, "ss_quantity") <= 60))
            ]
        )
    )
    global bucket4
    bucket4 = (
        _avg(
            [
                _get(s, "ss_ext_discount_amt")
                for s in store_sales
                if ((_get(s, "ss_quantity") >= 61) and (_get(s, "ss_quantity") <= 80))
            ]
        )
        if (
            _count(
                [
                    s
                    for s in store_sales
                    if (
                        (_get(s, "ss_quantity") >= 61)
                        and (_get(s, "ss_quantity") <= 80)
                    )
                ]
            )
            > 40
        )
        else _avg(
            [
                _get(s, "ss_net_paid")
                for s in store_sales
                if ((_get(s, "ss_quantity") >= 61) and (_get(s, "ss_quantity") <= 80))
            ]
        )
    )
    global bucket5
    bucket5 = (
        _avg(
            [
                _get(s, "ss_ext_discount_amt")
                for s in store_sales
                if ((_get(s, "ss_quantity") >= 81) and (_get(s, "ss_quantity") <= 100))
            ]
        )
        if (
            _count(
                [
                    s
                    for s in store_sales
                    if (
                        (_get(s, "ss_quantity") >= 81)
                        and (_get(s, "ss_quantity") <= 100)
                    )
                ]
            )
            > 50
        )
        else _avg(
            [
                _get(s, "ss_net_paid")
                for s in store_sales
                if ((_get(s, "ss_quantity") >= 81) and (_get(s, "ss_quantity") <= 100))
            ]
        )
    )
    global result
    result = [
        {
            "bucket1": bucket1,
            "bucket2": bucket2,
            "bucket3": bucket3,
            "bucket4": bucket4,
            "bucket5": bucket5,
        }
        for r in reason
        if (_get(r, "r_reason_sk") == 1)
    ]
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q9_result()


if __name__ == "__main__":
    main()
