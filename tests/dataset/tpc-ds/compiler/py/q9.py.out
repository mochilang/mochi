# Generated by Mochi Python compiler
from __future__ import annotations

import json

store_sales = []
reason = []
bucket1 = None
bucket2 = None
bucket3 = None
bucket4 = None
bucket5 = None
result = None


def test_TPCDS_Q9_empty():
    assert len(result) == 0


def main():
    global store_sales
    store_sales = []
    global reason
    reason = []
    global bucket1
    bucket1 = (
        _avg(
            [
                s.ss_ext_discount_amt
                for s in store_sales
                if ((s.ss_quantity >= 1) and (s.ss_quantity <= 20))
            ]
        )
        if (
            _count(
                [
                    s
                    for s in store_sales
                    if ((s.ss_quantity >= 1) and (s.ss_quantity <= 20))
                ]
            )
            > 10
        )
        else _avg(
            [
                s.ss_net_paid
                for s in store_sales
                if ((s.ss_quantity >= 1) and (s.ss_quantity <= 20))
            ]
        )
    )
    global bucket2
    bucket2 = (
        _avg(
            [
                s.ss_ext_discount_amt
                for s in store_sales
                if ((s.ss_quantity >= 21) and (s.ss_quantity <= 40))
            ]
        )
        if (
            _count(
                [
                    s
                    for s in store_sales
                    if ((s.ss_quantity >= 21) and (s.ss_quantity <= 40))
                ]
            )
            > 20
        )
        else _avg(
            [
                s.ss_net_paid
                for s in store_sales
                if ((s.ss_quantity >= 21) and (s.ss_quantity <= 40))
            ]
        )
    )
    global bucket3
    bucket3 = (
        _avg(
            [
                s.ss_ext_discount_amt
                for s in store_sales
                if ((s.ss_quantity >= 41) and (s.ss_quantity <= 60))
            ]
        )
        if (
            _count(
                [
                    s
                    for s in store_sales
                    if ((s.ss_quantity >= 41) and (s.ss_quantity <= 60))
                ]
            )
            > 30
        )
        else _avg(
            [
                s.ss_net_paid
                for s in store_sales
                if ((s.ss_quantity >= 41) and (s.ss_quantity <= 60))
            ]
        )
    )
    global bucket4
    bucket4 = (
        _avg(
            [
                s.ss_ext_discount_amt
                for s in store_sales
                if ((s.ss_quantity >= 61) and (s.ss_quantity <= 80))
            ]
        )
        if (
            _count(
                [
                    s
                    for s in store_sales
                    if ((s.ss_quantity >= 61) and (s.ss_quantity <= 80))
                ]
            )
            > 40
        )
        else _avg(
            [
                s.ss_net_paid
                for s in store_sales
                if ((s.ss_quantity >= 61) and (s.ss_quantity <= 80))
            ]
        )
    )
    global bucket5
    bucket5 = (
        _avg(
            [
                s.ss_ext_discount_amt
                for s in store_sales
                if ((s.ss_quantity >= 81) and (s.ss_quantity <= 100))
            ]
        )
        if (
            _count(
                [
                    s
                    for s in store_sales
                    if ((s.ss_quantity >= 81) and (s.ss_quantity <= 100))
                ]
            )
            > 50
        )
        else _avg(
            [
                s.ss_net_paid
                for s in store_sales
                if ((s.ss_quantity >= 81) and (s.ss_quantity <= 100))
            ]
        )
    )
    global result
    result = [
        {
            "bucket1": bucket1,
            "bucket2": bucket2,
            "bucket3": bucket3,
            "bucket4": bucket4,
            "bucket5": bucket5,
        }
        for r in reason
        if (r.r_reason_sk == 1)
    ]
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q9_empty()


def _avg(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("avg() expects list or group")
    if not v:
        return 0
    s = 0.0
    for it in v:
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("avg() expects numbers")
    return s / len(v)


def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, "Items"):
        return len(v.Items)
    raise Exception("count() expects list or group")


if __name__ == "__main__":
    main()
