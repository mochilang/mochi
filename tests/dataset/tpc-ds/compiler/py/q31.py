# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:49:59Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    ca_county: str
    d_year: int
    web_q1_q2_increase: float
    store_q1_q2_increase: float
    web_q2_q3_increase: float
    store_q2_q3_increase: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ca_county: str
    d_qoy: int
    d_year: int
    ss_ext_sales_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class WebSale:
    ca_county: str
    d_qoy: int
    d_year: int
    ws_ext_sales_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


def test_TPCDS_Q31_simplified():
    assert result == [
        Auto1(
            ca_county="A",
            d_year=2000,
            web_q1_q2_increase=1.5,
            store_q1_q2_increase=1.2,
            web_q2_q3_increase=1.6666666666666667,
            store_q2_q3_increase=1.3333333333333333,
        )
    ]


store_sales = [
    StoreSale(ca_county="A", d_qoy=1, d_year=2000, ss_ext_sales_price=100.0),
    StoreSale(ca_county="A", d_qoy=2, d_year=2000, ss_ext_sales_price=120.0),
    StoreSale(ca_county="A", d_qoy=3, d_year=2000, ss_ext_sales_price=160.0),
    StoreSale(ca_county="B", d_qoy=1, d_year=2000, ss_ext_sales_price=80.0),
    StoreSale(ca_county="B", d_qoy=2, d_year=2000, ss_ext_sales_price=90.0),
    StoreSale(ca_county="B", d_qoy=3, d_year=2000, ss_ext_sales_price=100.0),
]
web_sales = [
    WebSale(ca_county="A", d_qoy=1, d_year=2000, ws_ext_sales_price=100.0),
    WebSale(ca_county="A", d_qoy=2, d_year=2000, ws_ext_sales_price=150.0),
    WebSale(ca_county="A", d_qoy=3, d_year=2000, ws_ext_sales_price=250.0),
    WebSale(ca_county="B", d_qoy=1, d_year=2000, ws_ext_sales_price=80.0),
    WebSale(ca_county="B", d_qoy=2, d_year=2000, ws_ext_sales_price=90.0),
    WebSale(ca_county="B", d_qoy=3, d_year=2000, ws_ext_sales_price=95.0),
]
counties = ["A", "B"]
result = []
for county in counties:
    ss1 = sum(
        [
            s.ss_ext_sales_price
            for s in store_sales
            if s.ca_county == county and s.d_qoy == 1
        ]
    )
    ss2 = sum(
        [
            s.ss_ext_sales_price
            for s in store_sales
            if s.ca_county == county and s.d_qoy == 2
        ]
    )
    ss3 = sum(
        [
            s.ss_ext_sales_price
            for s in store_sales
            if s.ca_county == county and s.d_qoy == 3
        ]
    )
    ws1 = sum(
        [
            w.ws_ext_sales_price
            for w in web_sales
            if w.ca_county == county and w.d_qoy == 1
        ]
    )
    ws2 = sum(
        [
            w.ws_ext_sales_price
            for w in web_sales
            if w.ca_county == county and w.d_qoy == 2
        ]
    )
    ws3 = sum(
        [
            w.ws_ext_sales_price
            for w in web_sales
            if w.ca_county == county and w.d_qoy == 3
        ]
    )
    web_g1 = ws2 / ws1
    store_g1 = ss2 / ss1
    web_g2 = ws3 / ws2
    store_g2 = ss3 / ss2
    if web_g1 > store_g1 and web_g2 > store_g2:
        result = result + [
            Auto1(
                ca_county=county,
                d_year=2000,
                web_q1_q2_increase=web_g1,
                store_q1_q2_increase=store_g1,
                web_q2_q3_increase=web_g2,
                store_q2_q3_increase=store_g2,
            )
        ]
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q31_simplified()
