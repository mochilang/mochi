# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:49:51Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    item_sk: int
    date_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    cust: object
    sales: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogSale:
    cs_sold_date_sk: int
    cs_item_sk: int
    cs_bill_customer_sk: int
    cs_quantity: int
    cs_list_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int
    d_moy: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_item_sk: int
    ss_sold_date_sk: int
    ss_customer_sk: int
    ss_quantity: int
    ss_sales_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class WebSale:
    ws_sold_date_sk: int
    ws_item_sk: int
    ws_bill_customer_sk: int
    ws_quantity: int
    ws_list_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


@dataclasses.dataclass
class StoreSale:
    ss_item_sk: int
    ss_sold_date_sk: int
    ss_customer_sk: int
    ss_quantity: int
    ss_sales_price: float

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int
    d_moy: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogSale:
    cs_sold_date_sk: int
    cs_item_sk: int
    cs_bill_customer_sk: int
    cs_quantity: int
    cs_list_price: float

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class WebSale:
    ws_sold_date_sk: int
    ws_item_sk: int
    ws_bill_customer_sk: int
    ws_quantity: int
    ws_list_price: float

    def __contains__(self, key):
        return hasattr(self, key)


def test_TPCDS_Q23_cross_channel_sales():
    assert result == 50.0


store_sales = [
    StoreSale(
        ss_item_sk=1,
        ss_sold_date_sk=1,
        ss_customer_sk=1,
        ss_quantity=1,
        ss_sales_price=10.0,
    ),
    StoreSale(
        ss_item_sk=1,
        ss_sold_date_sk=1,
        ss_customer_sk=1,
        ss_quantity=1,
        ss_sales_price=10.0,
    ),
    StoreSale(
        ss_item_sk=1,
        ss_sold_date_sk=1,
        ss_customer_sk=1,
        ss_quantity=1,
        ss_sales_price=10.0,
    ),
    StoreSale(
        ss_item_sk=1,
        ss_sold_date_sk=1,
        ss_customer_sk=1,
        ss_quantity=1,
        ss_sales_price=10.0,
    ),
    StoreSale(
        ss_item_sk=1,
        ss_sold_date_sk=1,
        ss_customer_sk=1,
        ss_quantity=1,
        ss_sales_price=10.0,
    ),
    StoreSale(
        ss_item_sk=2,
        ss_sold_date_sk=1,
        ss_customer_sk=2,
        ss_quantity=1,
        ss_sales_price=10.0,
    ),
    StoreSale(
        ss_item_sk=2,
        ss_sold_date_sk=1,
        ss_customer_sk=2,
        ss_quantity=1,
        ss_sales_price=10.0,
    ),
    StoreSale(
        ss_item_sk=2,
        ss_sold_date_sk=1,
        ss_customer_sk=2,
        ss_quantity=1,
        ss_sales_price=10.0,
    ),
]
date_dim = [DateDim(d_date_sk=1, d_year=2000, d_moy=1)]
item = [Item(i_item_sk=1), Item(i_item_sk=2)]
catalog_sales = [
    CatalogSale(
        cs_sold_date_sk=1,
        cs_item_sk=1,
        cs_bill_customer_sk=1,
        cs_quantity=2,
        cs_list_price=10.0,
    ),
    CatalogSale(
        cs_sold_date_sk=1,
        cs_item_sk=2,
        cs_bill_customer_sk=2,
        cs_quantity=2,
        cs_list_price=10.0,
    ),
]
web_sales = [
    WebSale(
        ws_sold_date_sk=1,
        ws_item_sk=1,
        ws_bill_customer_sk=1,
        ws_quantity=3,
        ws_list_price=10.0,
    ),
    WebSale(
        ws_sold_date_sk=1,
        ws_item_sk=2,
        ws_bill_customer_sk=2,
        ws_quantity=1,
        ws_list_price=10.0,
    ),
]


def _q0():
    _src = store_sales
    _rows = _query(
        _src,
        [
            {"items": date_dim, "on": lambda ss, d: ss.ss_sold_date_sk == d.d_date_sk},
            {"items": item, "on": lambda ss, d, i: ss.ss_item_sk == i.i_item_sk},
        ],
        {
            "select": lambda ss, d, i: (ss, d, i),
            "where": lambda ss, d, i: d.d_year == 2000,
        },
    )
    _groups = _group_by(
        _rows, lambda ss, d, i: Auto1(item_sk=i.i_item_sk, date_sk=d.d_date_sk)
    )
    _items1 = _groups
    _items1 = [g for g in _items1 if len(g) > 4]
    return [g.key["item_sk"] for g in _items1]


frequent_ss_items = _q0()


def _q2():
    _groups = {}
    _order = []
    for ss in store_sales:
        _k = ss.ss_customer_sk
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(ss)
    _items1 = [_groups[k] for k in _order]
    return [
        Auto2(cust=g.key, sales=sum([x.ss_quantity * x.ss_sales_price for x in g]))
        for g in _items1
    ]


customer_totals = _q2()
max_sales = (
    max([it for it in [c.sales for c in customer_totals] if it is not None])
    if [c.sales for c in customer_totals]
    else 0
)
best_ss_customer = [c.cust for c in customer_totals if c.sales > 0.95 * max_sales]
catalog = _query(
    catalog_sales,
    [{"items": date_dim, "on": lambda cs, d: cs.cs_sold_date_sk == d.d_date_sk}],
    {
        "select": lambda cs, d: cs.cs_quantity * cs.cs_list_price,
        "where": lambda cs, d: (
            (d.d_year == 2000 and d.d_moy == 1)
            and cs.cs_bill_customer_sk in best_ss_customer
        )
        and cs.cs_item_sk in frequent_ss_items,
    },
)
web = _query(
    web_sales,
    [{"items": date_dim, "on": lambda ws, d: ws.ws_sold_date_sk == d.d_date_sk}],
    {
        "select": lambda ws, d: ws.ws_quantity * ws.ws_list_price,
        "where": lambda ws, d: (
            (d.d_year == 2000 and d.d_moy == 1)
            and ws.ws_bill_customer_sk in best_ss_customer
        )
        and ws.ws_item_sk in frequent_ss_items,
    },
)
result = _sum(catalog) + _sum(web)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q23_cross_channel_sales()
