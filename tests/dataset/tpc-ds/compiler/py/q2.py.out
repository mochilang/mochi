# Generated by Mochi Python compiler
from __future__ import annotations

import json


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def _union_all(a, b):
    return list(a) + list(b)


web_sales = None
catalog_sales = None
date_dim = None
wscs = None
wswscs = None
year1 = None
year2 = None
result = None


def test_TPCDS_Q2_result():
    assert result == [{"d_week_seq1": 1, "sun_ratio": 0.5, "mon_ratio": 0.5}]


def main():
    global web_sales
    web_sales = [
        {"ws_sold_date_sk": 1, "ws_ext_sales_price": 5, "ws_sold_date_name": "Sunday"},
        {"ws_sold_date_sk": 2, "ws_ext_sales_price": 5, "ws_sold_date_name": "Monday"},
        {"ws_sold_date_sk": 8, "ws_ext_sales_price": 10, "ws_sold_date_name": "Sunday"},
        {"ws_sold_date_sk": 9, "ws_ext_sales_price": 10, "ws_sold_date_name": "Monday"},
    ]
    global catalog_sales
    catalog_sales = [
        {"cs_sold_date_sk": 1, "cs_ext_sales_price": 5, "cs_sold_date_name": "Sunday"},
        {"cs_sold_date_sk": 2, "cs_ext_sales_price": 5, "cs_sold_date_name": "Monday"},
        {"cs_sold_date_sk": 8, "cs_ext_sales_price": 10, "cs_sold_date_name": "Sunday"},
        {"cs_sold_date_sk": 9, "cs_ext_sales_price": 10, "cs_sold_date_name": "Monday"},
    ]
    global date_dim
    date_dim = [
        {"d_date_sk": 1, "d_week_seq": 1, "d_day_name": "Sunday", "d_year": 1998},
        {"d_date_sk": 2, "d_week_seq": 1, "d_day_name": "Monday", "d_year": 1998},
        {"d_date_sk": 8, "d_week_seq": 54, "d_day_name": "Sunday", "d_year": 1999},
        {"d_date_sk": 9, "d_week_seq": 54, "d_day_name": "Monday", "d_year": 1999},
    ]
    global wscs
    wscs = _union_all(
        (
            [
                {
                    "sold_date_sk": _get(ws, "ws_sold_date_sk"),
                    "sales_price": _get(ws, "ws_ext_sales_price"),
                    "day": _get(ws, "ws_sold_date_name"),
                }
                for ws in web_sales
            ]
        ),
        (
            [
                {
                    "sold_date_sk": _get(cs, "cs_sold_date_sk"),
                    "sales_price": _get(cs, "cs_ext_sales_price"),
                    "day": _get(cs, "cs_sold_date_name"),
                }
                for cs in catalog_sales
            ]
        ),
    )

    def _q0():
        _src = wscs
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda w, d: (
                        (_get(w, "sold_date_sk") == _get(d, "d_date_sk"))
                    ),
                }
            ],
            {"select": lambda w, d: (w, d)},
        )
        _groups = _group_by(_rows, lambda w, d: ({"week_seq": _get(d, "d_week_seq")}))
        items = _groups
        return [
            {
                "d_week_seq": _get(_get(g, "key"), "week_seq"),
                "sun_sales": _sum(
                    [_get(x, "sales_price") for x in g if (_get(x, "day") == "Sunday")]
                ),
                "mon_sales": _sum(
                    [_get(x, "sales_price") for x in g if (_get(x, "day") == "Monday")]
                ),
                "tue_sales": _sum(
                    [_get(x, "sales_price") for x in g if (_get(x, "day") == "Tuesday")]
                ),
                "wed_sales": _sum(
                    [
                        _get(x, "sales_price")
                        for x in g
                        if (_get(x, "day") == "Wednesday")
                    ]
                ),
                "thu_sales": _sum(
                    [
                        _get(x, "sales_price")
                        for x in g
                        if (_get(x, "day") == "Thursday")
                    ]
                ),
                "fri_sales": _sum(
                    [_get(x, "sales_price") for x in g if (_get(x, "day") == "Friday")]
                ),
                "sat_sales": _sum(
                    [
                        _get(x, "sales_price")
                        for x in g
                        if (_get(x, "day") == "Saturday")
                    ]
                ),
            }
            for g in items
        ]

    global wswscs
    wswscs = _q0()
    global year1
    year1 = [w for w in wswscs if (_get(w, "d_week_seq") == 1)]
    global year2
    year2 = [w for w in wswscs if (_get(w, "d_week_seq") == 54)]
    global result
    result = _query(
        year1,
        [
            {
                "items": year2,
                "on": lambda y, z: (
                    (_get(y, "d_week_seq") == (_get(z, "d_week_seq") - 53))
                ),
            }
        ],
        {
            "select": lambda y, z: {
                "d_week_seq1": _get(y, "d_week_seq"),
                "sun_ratio": (_get(y, "sun_sales") / _get(z, "sun_sales")),
                "mon_ratio": (_get(y, "mon_sales") / _get(z, "mon_sales")),
            }
        },
    )
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q2_result()


if __name__ == "__main__":
    main()
