# Generated by Mochi Python compiler
from __future__ import annotations

import json

web_sales = []
catalog_sales = []
date_dim = []
wscs = None
wswscs = None
result = []


def test_TPCDS_Q2_empty():
    assert len(result) == 0


def main():
    global web_sales
    web_sales = []
    global catalog_sales
    catalog_sales = []
    global date_dim
    date_dim = []
    global wscs
    wscs = _union_all(
        (
            [
                {
                    "sold_date_sk": ws.ws_sold_date_sk,
                    "sales_price": ws.ws_ext_sales_price,
                    "day": ws.ws_sold_date_name,
                }
                for ws in web_sales
            ]
        ),
        (
            [
                {
                    "sold_date_sk": cs.cs_sold_date_sk,
                    "sales_price": cs.cs_ext_sales_price,
                    "day": cs.cs_sold_date_name,
                }
                for cs in catalog_sales
            ]
        ),
    )

    def _q0():
        _src = wscs
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda w, d: ((w["sold_date_sk"] == d.d_date_sk)),
                }
            ],
            {"select": lambda w, d: (w, d)},
        )
        _groups = _group_by(_rows, lambda w, d: ({"week_seq": d.d_week_seq}))
        items = _groups
        return [
            {
                "d_week_seq": g.key.week_seq,
                "sun_sales": _sum(
                    [x["sales_price"] for x in g if (x["day"] == "Sunday")]
                ),
                "mon_sales": _sum(
                    [x["sales_price"] for x in g if (x["day"] == "Monday")]
                ),
                "tue_sales": _sum(
                    [x["sales_price"] for x in g if (x["day"] == "Tuesday")]
                ),
                "wed_sales": _sum(
                    [x["sales_price"] for x in g if (x["day"] == "Wednesday")]
                ),
                "thu_sales": _sum(
                    [x["sales_price"] for x in g if (x["day"] == "Thursday")]
                ),
                "fri_sales": _sum(
                    [x["sales_price"] for x in g if (x["day"] == "Friday")]
                ),
                "sat_sales": _sum(
                    [x["sales_price"] for x in g if (x["day"] == "Saturday")]
                ),
            }
            for g in items
        ]

    global wswscs
    wswscs = _q0()
    global result
    result = []
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q2_empty()


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):
        items.sort(key=lambda it: opts["sortKey"](*it))
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    return sum(v)


def _union_all(a, b):
    return list(a) + list(b)


if __name__ == "__main__":
    main()
