# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:03Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    ca_state: str
    cd_gender: str
    cd_marital_status: str
    cd_dep_count: int
    cd_dep_employed_count: int
    cd_dep_college_count: int
    cnt: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    state: str
    gender: str
    marital: str
    dep: int
    emp: int
    col: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_current_addr_sk: int
    c_current_cdemo_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerAddres:
    ca_address_sk: int
    ca_state: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerDemographic:
    cd_demo_sk: int
    cd_gender: str
    cd_marital_status: str
    cd_dep_count: int
    cd_dep_employed_count: int
    cd_dep_college_count: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int
    d_qoy: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_customer_sk: int
    ss_sold_date_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, "Items"):
        return len(v.Items)
    raise Exception("count() expects list or group")


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_TPCDS_Q35_simplified():
    assert groups == [
        Auto1(
            ca_state="CA",
            cd_gender="M",
            cd_marital_status="S",
            cd_dep_count=1,
            cd_dep_employed_count=1,
            cd_dep_college_count=0,
            cnt=1,
        )
    ]


customer = [
    Customer(c_customer_sk=1, c_current_addr_sk=1, c_current_cdemo_sk=1),
    Customer(c_customer_sk=2, c_current_addr_sk=2, c_current_cdemo_sk=2),
]
customer_address = [
    CustomerAddres(ca_address_sk=1, ca_state="CA"),
    CustomerAddres(ca_address_sk=2, ca_state="NY"),
]
customer_demographics = [
    CustomerDemographic(
        cd_demo_sk=1,
        cd_gender="M",
        cd_marital_status="S",
        cd_dep_count=1,
        cd_dep_employed_count=1,
        cd_dep_college_count=0,
    ),
    CustomerDemographic(
        cd_demo_sk=2,
        cd_gender="F",
        cd_marital_status="M",
        cd_dep_count=2,
        cd_dep_employed_count=1,
        cd_dep_college_count=1,
    ),
]
store_sales = [StoreSale(ss_customer_sk=1, ss_sold_date_sk=1)]
date_dim = [DateDim(d_date_sk=1, d_year=2000, d_qoy=1)]
purchased = _query(
    store_sales,
    [{"items": date_dim, "on": lambda ss, d: ss.ss_sold_date_sk == d.d_date_sk}],
    {
        "select": lambda ss, d: ss.ss_customer_sk,
        "where": lambda ss, d: d.d_year == 2000 and d.d_qoy < 4,
    },
)


def _q0():
    _src = customer
    _rows = _query(
        _src,
        [
            {
                "items": customer_address,
                "on": lambda c, ca: c.c_current_addr_sk == ca.ca_address_sk,
            },
            {
                "items": customer_demographics,
                "on": lambda c, ca, cd: c.c_current_cdemo_sk == cd.cd_demo_sk,
            },
        ],
        {
            "select": lambda c, ca, cd: (c, ca, cd),
            "where": lambda c, ca, cd: c.c_customer_sk in purchased,
        },
    )
    _groups = _group_by(
        _rows,
        lambda c, ca, cd: Auto2(
            state=ca.ca_state,
            gender=cd.cd_gender,
            marital=cd.cd_marital_status,
            dep=cd.cd_dep_count,
            emp=cd.cd_dep_employed_count,
            col=cd.cd_dep_college_count,
        ),
    )
    _items1 = _groups
    return [
        Auto1(
            ca_state=g.key["state"],
            cd_gender=g.key["gender"],
            cd_marital_status=g.key["marital"],
            cd_dep_count=g.key["dep"],
            cd_dep_employed_count=g.key["emp"],
            cd_dep_college_count=g.key["col"],
            cnt=len(g),
        )
        for g in _items1
    ]


groups = _q0()
print(json.dumps(groups, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q35_simplified()
