# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:51:16Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    ss_customer_sk: int
    sumsales: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    ss_customer_sk: int
    act_sales: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Reason:
    r_reason_sk: int
    r_reason_desc: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreReturn:
    sr_item_sk: int
    sr_ticket_number: int
    sr_reason_sk: int
    sr_return_quantity: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_item_sk: int
    ss_ticket_number: int
    ss_customer_sk: int
    ss_quantity: int
    ss_sales_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, list):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, tuple):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, dict):
        return str(k)
    return k


@dataclasses.dataclass
class StoreSale:
    ss_item_sk: int
    ss_ticket_number: int
    ss_customer_sk: int
    ss_quantity: int
    ss_sales_price: float

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreReturn:
    sr_item_sk: int
    sr_ticket_number: int
    sr_reason_sk: int
    sr_return_quantity: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Reason:
    r_reason_sk: int
    r_reason_desc: str

    def __contains__(self, key):
        return hasattr(self, key)


def test_TPCDS_Q93_active_sales():
    assert result == [
        Auto1(ss_customer_sk=1, sumsales=40.0),
        Auto1(ss_customer_sk=2, sumsales=60.0),
    ]


store_sales = [
    StoreSale(
        ss_item_sk=1,
        ss_ticket_number=1,
        ss_customer_sk=1,
        ss_quantity=5,
        ss_sales_price=10.0,
    ),
    StoreSale(
        ss_item_sk=1,
        ss_ticket_number=2,
        ss_customer_sk=2,
        ss_quantity=3,
        ss_sales_price=20.0,
    ),
]
store_returns = [
    StoreReturn(sr_item_sk=1, sr_ticket_number=1, sr_reason_sk=1, sr_return_quantity=1)
]
reason = [Reason(r_reason_sk=1, r_reason_desc="ReasonA")]
t = _query(
    store_sales,
    [
        {
            "items": store_returns,
            "on": lambda ss, sr: ss.ss_item_sk == sr.sr_item_sk
            and ss.ss_ticket_number == sr.sr_ticket_number,
            "left": True,
        },
        {
            "items": reason,
            "on": lambda ss, sr, r: sr != None and sr.sr_reason_sk == r.r_reason_sk,
            "left": True,
        },
    ],
    {
        "select": lambda ss, sr, r: Auto2(
            ss_customer_sk=ss.ss_customer_sk,
            act_sales=(
                (ss.ss_quantity - sr.sr_return_quantity) * ss.ss_sales_price
                if sr != None
                else ss.ss_quantity * ss.ss_sales_price
            ),
        ),
        "where": lambda ss, sr, r: r == None or r.r_reason_desc == "ReasonA",
    },
)


def _q0():
    _src = t
    _rows = _query(_src, [], {"select": lambda x: x})
    _groups = _group_by(_rows, lambda x: x.ss_customer_sk)
    _items1 = _groups
    _items1 = sorted(
        _items1, key=lambda g: _sort_key([sum([y.act_sales for y in g]), g.key])
    )
    return [
        Auto1(ss_customer_sk=g.key, sumsales=sum([y.act_sales for y in g]))
        for g in _items1
    ]


result = _q0()
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q93_active_sales()
