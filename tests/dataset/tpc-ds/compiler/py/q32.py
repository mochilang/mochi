# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:00Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class CatalogSale:
    cs_item_sk: int
    cs_sold_date_sk: int
    cs_ext_discount_amt: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_manufact_id: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _avg(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("avg() expects list or group")
    if not v:
        return 0
    s = 0.0
    for it in v:
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("avg() expects numbers")
    return s / len(v)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_TPCDS_Q32_simplified():
    assert result == 20.0


catalog_sales = [
    CatalogSale(cs_item_sk=1, cs_sold_date_sk=1, cs_ext_discount_amt=5.0),
    CatalogSale(cs_item_sk=1, cs_sold_date_sk=2, cs_ext_discount_amt=10.0),
    CatalogSale(cs_item_sk=1, cs_sold_date_sk=3, cs_ext_discount_amt=20.0),
]
item = [Item(i_item_sk=1, i_manufact_id=1)]
date_dim = [
    DateDim(d_date_sk=1, d_year=2000),
    DateDim(d_date_sk=2, d_year=2000),
    DateDim(d_date_sk=3, d_year=2000),
]
filtered = _query(
    catalog_sales,
    [
        {"items": item, "on": lambda cs, i: cs.cs_item_sk == i.i_item_sk},
        {"items": date_dim, "on": lambda cs, i, d: cs.cs_sold_date_sk == d.d_date_sk},
    ],
    {
        "select": lambda cs, i, d: cs.cs_ext_discount_amt,
        "where": lambda cs, i, d: i.i_manufact_id == 1 and d.d_year == 2000,
    },
)
avg_discount = _avg(filtered)
result = _sum([x for x in filtered if x > avg_discount * 1.3])
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q32_simplified()
