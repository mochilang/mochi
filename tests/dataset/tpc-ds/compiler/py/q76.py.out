# Generated by Mochi Python compiler
from __future__ import annotations

import json


def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, "Items"):
        return len(v.Items)
    raise Exception("count() expects list or group")


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def _union_all(a, b):
    return list(a) + list(b)


date_dim = None
item = None
store_sales = None
web_sales = None
catalog_sales = None
store_part = None
web_part = None
catalog_part = None
all_rows = None
result = None


def test_TPCDS_Q76_simplified():
    assert result == [
        {
            "channel": "store",
            "col_name": None,
            "d_year": 1998,
            "d_qoy": 1,
            "i_category": "CatA",
            "sales_cnt": 1,
            "sales_amt": 10,
        },
        {
            "channel": "web",
            "col_name": None,
            "d_year": 1998,
            "d_qoy": 1,
            "i_category": "CatB",
            "sales_cnt": 1,
            "sales_amt": 15,
        },
        {
            "channel": "catalog",
            "col_name": None,
            "d_year": 1998,
            "d_qoy": 1,
            "i_category": "CatC",
            "sales_cnt": 1,
            "sales_amt": 20,
        },
    ]


def main():
    global date_dim
    date_dim = [{"d_date_sk": 1, "d_year": 1998, "d_qoy": 1}]
    global item
    item = [
        {"i_item_sk": 1, "i_category": "CatA"},
        {"i_item_sk": 2, "i_category": "CatB"},
        {"i_item_sk": 3, "i_category": "CatC"},
    ]
    global store_sales
    store_sales = [
        {
            "ss_customer_sk": None,
            "ss_item_sk": 1,
            "ss_ext_sales_price": 10,
            "ss_sold_date_sk": 1,
        }
    ]
    global web_sales
    web_sales = [
        {
            "ws_bill_customer_sk": None,
            "ws_item_sk": 2,
            "ws_ext_sales_price": 15,
            "ws_sold_date_sk": 1,
        }
    ]
    global catalog_sales
    catalog_sales = [
        {
            "cs_bill_customer_sk": None,
            "cs_item_sk": 3,
            "cs_ext_sales_price": 20,
            "cs_sold_date_sk": 1,
        }
    ]
    global store_part
    store_part = _query(
        store_sales,
        [
            {
                "items": item,
                "on": lambda ss, i: ((_get(i, "i_item_sk") == _get(ss, "ss_item_sk"))),
            },
            {
                "items": date_dim,
                "on": lambda ss, i, d: (
                    (_get(d, "d_date_sk") == _get(ss, "ss_sold_date_sk"))
                ),
            },
        ],
        {
            "select": lambda ss, i, d: {
                "channel": "store",
                "col_name": _get(ss, "ss_customer_sk"),
                "d_year": _get(d, "d_year"),
                "d_qoy": _get(d, "d_qoy"),
                "i_category": _get(i, "i_category"),
                "ext_sales_price": _get(ss, "ss_ext_sales_price"),
            },
            "where": lambda ss, i, d: ((_get(ss, "ss_customer_sk") == None)),
        },
    )
    global web_part
    web_part = _query(
        web_sales,
        [
            {
                "items": item,
                "on": lambda ws, i: ((_get(i, "i_item_sk") == _get(ws, "ws_item_sk"))),
            },
            {
                "items": date_dim,
                "on": lambda ws, i, d: (
                    (_get(d, "d_date_sk") == _get(ws, "ws_sold_date_sk"))
                ),
            },
        ],
        {
            "select": lambda ws, i, d: {
                "channel": "web",
                "col_name": _get(ws, "ws_bill_customer_sk"),
                "d_year": _get(d, "d_year"),
                "d_qoy": _get(d, "d_qoy"),
                "i_category": _get(i, "i_category"),
                "ext_sales_price": _get(ws, "ws_ext_sales_price"),
            },
            "where": lambda ws, i, d: ((_get(ws, "ws_bill_customer_sk") == None)),
        },
    )
    global catalog_part
    catalog_part = _query(
        catalog_sales,
        [
            {
                "items": item,
                "on": lambda cs, i: ((_get(i, "i_item_sk") == _get(cs, "cs_item_sk"))),
            },
            {
                "items": date_dim,
                "on": lambda cs, i, d: (
                    (_get(d, "d_date_sk") == _get(cs, "cs_sold_date_sk"))
                ),
            },
        ],
        {
            "select": lambda cs, i, d: {
                "channel": "catalog",
                "col_name": _get(cs, "cs_bill_customer_sk"),
                "d_year": _get(d, "d_year"),
                "d_qoy": _get(d, "d_qoy"),
                "i_category": _get(i, "i_category"),
                "ext_sales_price": _get(cs, "cs_ext_sales_price"),
            },
            "where": lambda cs, i, d: ((_get(cs, "cs_bill_customer_sk") == None)),
        },
    )
    global all_rows
    all_rows = _union_all(_union_all(store_part, web_part), catalog_part)

    def _q0():
        _src = all_rows
        _rows = _query(_src, [], {"select": lambda r: (r)})
        _groups = _group_by(
            _rows,
            lambda r: (
                {
                    "channel": _get(r, "channel"),
                    "col_name": _get(r, "col_name"),
                    "d_year": _get(r, "d_year"),
                    "d_qoy": _get(r, "d_qoy"),
                    "i_category": _get(r, "i_category"),
                }
            ),
        )
        items = _groups
        items = sorted(items, key=lambda g: _sort_key(_get(_get(g, "key"), "channel")))
        return [
            {
                "channel": _get(_get(g, "key"), "channel"),
                "col_name": _get(_get(g, "key"), "col_name"),
                "d_year": _get(_get(g, "key"), "d_year"),
                "d_qoy": _get(_get(g, "key"), "d_qoy"),
                "i_category": _get(_get(g, "key"), "i_category"),
                "sales_cnt": _count(g),
                "sales_amt": _sum([_get(x[0], "ext_sales_price") for x in g]),
            }
            for g in items
        ]

    global result
    result = _q0()
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q76_simplified()


if __name__ == "__main__":
    main()
