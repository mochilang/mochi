# Generated by Mochi Python compiler
from __future__ import annotations

import json


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


ss = None
ws = None
cs = None
result = None


def test_TPCDS_Q78_simplified():
    assert result == [
        {
            "ss_sold_year": 1998,
            "ss_item_sk": 1,
            "ss_customer_sk": 1,
            "ratio": 1.25,
            "store_qty": 10,
            "store_wholesale_cost": 50,
            "store_sales_price": 100,
            "other_chan_qty": 8,
            "other_chan_wholesale_cost": 40,
            "other_chan_sales_price": 80,
        }
    ]


def main():
    global ss
    ss = [
        {
            "ss_sold_year": 1998,
            "ss_item_sk": 1,
            "ss_customer_sk": 1,
            "ss_qty": 10,
            "ss_wc": 50,
            "ss_sp": 100,
        }
    ]
    global ws
    ws = [
        {
            "ws_sold_year": 1998,
            "ws_item_sk": 1,
            "ws_customer_sk": 1,
            "ws_qty": 5,
            "ws_wc": 25,
            "ws_sp": 50,
        }
    ]
    global cs
    cs = [
        {
            "cs_sold_year": 1998,
            "cs_item_sk": 1,
            "cs_customer_sk": 1,
            "cs_qty": 3,
            "cs_wc": 15,
            "cs_sp": 30,
        }
    ]
    global result
    result = _query(
        ss,
        [
            {
                "items": ws,
                "on": lambda s, w: (
                    (
                        (
                            (_get(w, "ws_sold_year") == _get(s, "ss_sold_year"))
                            and (_get(w, "ws_item_sk") == _get(s, "ss_item_sk"))
                        )
                        and (_get(w, "ws_customer_sk") == _get(s, "ss_customer_sk"))
                    )
                ),
                "left": True,
            },
            {
                "items": cs,
                "on": lambda s, w, c: (
                    (
                        (
                            (_get(c, "cs_sold_year") == _get(s, "ss_sold_year"))
                            and (_get(c, "cs_item_sk") == _get(s, "ss_item_sk"))
                        )
                        and (_get(c, "cs_customer_sk") == _get(s, "ss_customer_sk"))
                    )
                ),
                "left": True,
            },
        ],
        {
            "select": lambda s, w, c: {
                "ss_sold_year": _get(s, "ss_sold_year"),
                "ss_item_sk": _get(s, "ss_item_sk"),
                "ss_customer_sk": _get(s, "ss_customer_sk"),
                "ratio": int(
                    _get(s, "ss_qty")
                    / (
                        (
                            ((0 if (w == None) else _get(w, "ws_qty")))
                            + ((0 if (c == None) else _get(c, "cs_qty")))
                        )
                    )
                ),
                "store_qty": _get(s, "ss_qty"),
                "store_wholesale_cost": _get(s, "ss_wc"),
                "store_sales_price": _get(s, "ss_sp"),
                "other_chan_qty": (
                    ((0 if (w == None) else _get(w, "ws_qty")))
                    + ((0 if (c == None) else _get(c, "cs_qty")))
                ),
                "other_chan_wholesale_cost": (
                    ((0 if (w == None) else _get(w, "ws_wc")))
                    + ((0 if (c == None) else _get(c, "cs_wc")))
                ),
                "other_chan_sales_price": (
                    ((0 if (w == None) else _get(w, "ws_sp")))
                    + ((0 if (c == None) else _get(c, "cs_sp")))
                ),
            },
            "where": lambda s, w, c: (
                (
                    (
                        (
                            (((0 if (w == None) else _get(w, "ws_qty"))) > 0)
                            or (((0 if (c == None) else _get(c, "cs_qty"))) > 0)
                        )
                    )
                    and (_get(s, "ss_sold_year") == 1998)
                )
            ),
        },
    )
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q78_simplified()


if __name__ == "__main__":
    main()
