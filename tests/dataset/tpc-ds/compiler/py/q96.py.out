# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing


def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, "Items"):
        return len(v.Items)
    raise Exception("count() expects list or group")


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


@dataclasses.dataclass
class StoreSale:
    ss_sold_time_sk: int
    ss_hdemo_sk: int
    ss_store_sk: int


@dataclasses.dataclass
class HouseholdDemographics:
    hd_demo_sk: int
    hd_dep_count: int


@dataclasses.dataclass
class TimeDim:
    t_time_sk: int
    t_hour: int
    t_minute: int


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_store_name: str


store_sales = None
household_demographics = None
time_dim = None
store = None
result = None


def test_TPCDS_Q96_count():
    assert result == 3


def main():
    global store_sales
    store_sales = [
        {"ss_sold_time_sk": 1, "ss_hdemo_sk": 1, "ss_store_sk": 1},
        {"ss_sold_time_sk": 1, "ss_hdemo_sk": 1, "ss_store_sk": 1},
        {"ss_sold_time_sk": 2, "ss_hdemo_sk": 1, "ss_store_sk": 1},
    ]
    global household_demographics
    household_demographics = [{"hd_demo_sk": 1, "hd_dep_count": 3}]
    global time_dim
    time_dim = [
        {"t_time_sk": 1, "t_hour": 20, "t_minute": 35},
        {"t_time_sk": 2, "t_hour": 20, "t_minute": 45},
    ]
    global store
    store = [{"s_store_sk": 1, "s_store_name": "ese"}]
    global result
    result = _count(
        _query(
            store_sales,
            [
                {
                    "items": household_demographics,
                    "on": lambda ss, hd: (
                        (_get(ss, "ss_hdemo_sk") == _get(hd, "hd_demo_sk"))
                    ),
                },
                {
                    "items": time_dim,
                    "on": lambda ss, hd, t: (
                        (_get(ss, "ss_sold_time_sk") == _get(t, "t_time_sk"))
                    ),
                },
                {
                    "items": store,
                    "on": lambda ss, hd, t, s: (
                        (_get(ss, "ss_store_sk") == _get(s, "s_store_sk"))
                    ),
                },
            ],
            {
                "select": lambda ss, hd, t, s: ss,
                "where": lambda ss, hd, t, s: (
                    (
                        (
                            ((_get(t, "t_hour") == 20) and (_get(t, "t_minute") >= 30))
                            and (_get(hd, "hd_dep_count") == 3)
                        )
                        and (_get(s, "s_store_name") == "ese")
                    )
                ),
            },
        )
    )
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q96_count()


if __name__ == "__main__":
    main()
