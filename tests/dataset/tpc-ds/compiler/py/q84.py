# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:51:06Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Customer:
    id: int
    current_addr: int
    cdemo: int
    hdemo: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerAddres:
    ca_address_sk: int
    ca_city: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerDemographic:
    cd_demo_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class HouseholdDemographic:
    hd_demo_sk: int
    income_band_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class IncomeBand:
    ib_income_band_sk: int
    ib_lower_bound: int
    ib_upper_bound: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreReturn:
    sr_cdemo_sk: int
    amt: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_TPCDS_Q84_sample():
    assert result == 84.0


customer = [
    Customer(id=1, current_addr=1, cdemo=1, hdemo=1),
    Customer(id=2, current_addr=1, cdemo=2, hdemo=2),
    Customer(id=3, current_addr=1, cdemo=3, hdemo=1),
    Customer(id=4, current_addr=1, cdemo=4, hdemo=2),
]
customer_address = [CustomerAddres(ca_address_sk=1, ca_city="Springfield")]
customer_demographics = [
    CustomerDemographic(cd_demo_sk=1),
    CustomerDemographic(cd_demo_sk=2),
    CustomerDemographic(cd_demo_sk=3),
    CustomerDemographic(cd_demo_sk=4),
]
household_demographics = [
    HouseholdDemographic(hd_demo_sk=1, income_band_sk=1),
    HouseholdDemographic(hd_demo_sk=2, income_band_sk=1),
]
income_band = [IncomeBand(ib_income_band_sk=1, ib_lower_bound=0, ib_upper_bound=50000)]
store_returns = [
    StoreReturn(sr_cdemo_sk=1, amt=10.0),
    StoreReturn(sr_cdemo_sk=2, amt=20.0),
    StoreReturn(sr_cdemo_sk=3, amt=30.0),
    StoreReturn(sr_cdemo_sk=4, amt=24.0),
]
result = sum(
    _query(
        customer,
        [
            {
                "items": customer_address,
                "on": lambda c, ca: c.current_addr == ca.ca_address_sk
                and ca.ca_city == "Springfield",
            },
            {
                "items": customer_demographics,
                "on": lambda c, ca, cd: c.cdemo == cd.cd_demo_sk,
            },
            {
                "items": store_returns,
                "on": lambda c, ca, cd, sr: cd.cd_demo_sk == sr.sr_cdemo_sk,
            },
            {
                "items": household_demographics,
                "on": lambda c, ca, cd, sr, hd: c.hdemo == hd.hd_demo_sk,
            },
            {
                "items": income_band,
                "on": lambda c, ca, cd, sr, hd, ib: hd.income_band_sk
                == ib.ib_income_band_sk,
            },
        ],
        {"select": lambda c, ca, cd, sr, hd, ib: sr.amt},
    )
)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q84_sample()
