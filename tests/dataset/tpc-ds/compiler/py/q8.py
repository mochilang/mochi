# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:49:38Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    s_store_name: str
    net_profit: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_current_addr_sk: int
    c_preferred_cust_flag: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerAddres:
    ca_address_sk: int
    ca_zip: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_qoy: int
    d_year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_store_name: str
    s_zip: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_store_sk: int
    ss_sold_date_sk: int
    ss_net_profit: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_TPCDS_Q8_result():
    assert result == [Auto1(s_store_name="Store1", net_profit=10.0)]


store_sales = [StoreSale(ss_store_sk=1, ss_sold_date_sk=1, ss_net_profit=10.0)]
date_dim = [DateDim(d_date_sk=1, d_qoy=1, d_year=1998)]
store = [Store(s_store_sk=1, s_store_name="Store1", s_zip="12345")]
customer_address = [CustomerAddres(ca_address_sk=1, ca_zip="12345")]
customer = [Customer(c_customer_sk=1, c_current_addr_sk=1, c_preferred_cust_flag="Y")]
"zi"[::-1]
zip_list = ["12345"]


def _q0():
    _src = store_sales
    _rows = _query(
        _src,
        [
            {
                "items": date_dim,
                "on": lambda ss, d: (ss.ss_sold_date_sk == d.d_date_sk and d.d_qoy == 1)
                and d.d_year == 1998,
            },
            {"items": store, "on": lambda ss, d, s: ss.ss_store_sk == s.s_store_sk},
            {
                "items": customer_address,
                "on": lambda ss, d, s, ca: s.s_zip[0:2] == ca.ca_zip[0:2],
            },
            {
                "items": customer,
                "on": lambda ss, d, s, ca, c: ca.ca_address_sk == c.c_current_addr_sk
                and c.c_preferred_cust_flag == "Y",
            },
        ],
        {
            "select": lambda ss, d, s, ca, c: (ss, d, s, ca, c),
            "where": lambda ss, d, s, ca, c: ca.ca_zip[0:5] in zip_list,
        },
    )
    _groups = _group_by(_rows, lambda ss, d, s, ca, c: s.s_store_name)
    _items1 = _groups
    _items1 = sorted(_items1, key=lambda g: g.key)
    return [
        Auto1(s_store_name=g.key, net_profit=_sum([x[0].ss_net_profit for x in g]))
        for g in _items1
    ]


result = _q0()
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q8_result()
