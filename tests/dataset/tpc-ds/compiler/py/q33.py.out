# Generated by Mochi Python compiler
from __future__ import annotations

import json


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def _union_all(a, b):
    return list(a) + list(b)


item = None
date_dim = None
customer_address = None
store_sales = None
catalog_sales = None
web_sales = None
month = 1
year = 2000
union_sales = None
result = None


def test_TPCDS_Q33_simplified():
    assert result == [
        {"i_manufact_id": 1, "total_sales": 150},
        {"i_manufact_id": 2, "total_sales": 50},
    ]


def main():
    global item
    item = [
        {"i_item_sk": 1, "i_manufact_id": 1, "i_category": "Books"},
        {"i_item_sk": 2, "i_manufact_id": 2, "i_category": "Books"},
    ]
    global date_dim
    date_dim = [{"d_date_sk": 1, "d_year": 2000, "d_moy": 1}]
    global customer_address
    customer_address = [
        {"ca_address_sk": 1, "ca_gmt_offset": (-5)},
        {"ca_address_sk": 2, "ca_gmt_offset": (-5)},
    ]
    global store_sales
    store_sales = [
        {
            "ss_item_sk": 1,
            "ss_ext_sales_price": 100,
            "ss_sold_date_sk": 1,
            "ss_addr_sk": 1,
        },
        {
            "ss_item_sk": 2,
            "ss_ext_sales_price": 50,
            "ss_sold_date_sk": 1,
            "ss_addr_sk": 2,
        },
    ]
    global catalog_sales
    catalog_sales = [
        {
            "cs_item_sk": 1,
            "cs_ext_sales_price": 20,
            "cs_sold_date_sk": 1,
            "cs_bill_addr_sk": 1,
        }
    ]
    global web_sales
    web_sales = [
        {
            "ws_item_sk": 1,
            "ws_ext_sales_price": 30,
            "ws_sold_date_sk": 1,
            "ws_bill_addr_sk": 1,
        }
    ]
    global month
    month = 1
    global year
    year = 2000
    global union_sales
    union_sales = _union_all(
        _union_all(
            _query(
                store_sales,
                [
                    {
                        "items": date_dim,
                        "on": lambda ss, d: (
                            (_get(ss, "ss_sold_date_sk") == _get(d, "d_date_sk"))
                        ),
                    },
                    {
                        "items": customer_address,
                        "on": lambda ss, d, ca: (
                            (_get(ss, "ss_addr_sk") == _get(ca, "ca_address_sk"))
                        ),
                    },
                    {
                        "items": item,
                        "on": lambda ss, d, ca, i: (
                            (_get(ss, "ss_item_sk") == _get(i, "i_item_sk"))
                        ),
                    },
                ],
                {
                    "select": lambda ss, d, ca, i: {
                        "manu": _get(i, "i_manufact_id"),
                        "price": _get(ss, "ss_ext_sales_price"),
                    },
                    "where": lambda ss, d, ca, i: (
                        (
                            (
                                (
                                    (_get(i, "i_category") == "Books")
                                    and (_get(d, "d_year") == year)
                                )
                                and (_get(d, "d_moy") == month)
                            )
                            and (_get(ca, "ca_gmt_offset") == ((-5)))
                        )
                    ),
                },
            ),
            _query(
                catalog_sales,
                [
                    {
                        "items": date_dim,
                        "on": lambda cs, d: (
                            (_get(cs, "cs_sold_date_sk") == _get(d, "d_date_sk"))
                        ),
                    },
                    {
                        "items": customer_address,
                        "on": lambda cs, d, ca: (
                            (_get(cs, "cs_bill_addr_sk") == _get(ca, "ca_address_sk"))
                        ),
                    },
                    {
                        "items": item,
                        "on": lambda cs, d, ca, i: (
                            (_get(cs, "cs_item_sk") == _get(i, "i_item_sk"))
                        ),
                    },
                ],
                {
                    "select": lambda cs, d, ca, i: {
                        "manu": _get(i, "i_manufact_id"),
                        "price": _get(cs, "cs_ext_sales_price"),
                    },
                    "where": lambda cs, d, ca, i: (
                        (
                            (
                                (
                                    (_get(i, "i_category") == "Books")
                                    and (_get(d, "d_year") == year)
                                )
                                and (_get(d, "d_moy") == month)
                            )
                            and (_get(ca, "ca_gmt_offset") == ((-5)))
                        )
                    ),
                },
            ),
        ),
        _query(
            web_sales,
            [
                {
                    "items": date_dim,
                    "on": lambda ws, d: (
                        (_get(ws, "ws_sold_date_sk") == _get(d, "d_date_sk"))
                    ),
                },
                {
                    "items": customer_address,
                    "on": lambda ws, d, ca: (
                        (_get(ws, "ws_bill_addr_sk") == _get(ca, "ca_address_sk"))
                    ),
                },
                {
                    "items": item,
                    "on": lambda ws, d, ca, i: (
                        (_get(ws, "ws_item_sk") == _get(i, "i_item_sk"))
                    ),
                },
            ],
            {
                "select": lambda ws, d, ca, i: {
                    "manu": _get(i, "i_manufact_id"),
                    "price": _get(ws, "ws_ext_sales_price"),
                },
                "where": lambda ws, d, ca, i: (
                    (
                        (
                            (
                                (_get(i, "i_category") == "Books")
                                and (_get(d, "d_year") == year)
                            )
                            and (_get(d, "d_moy") == month)
                        )
                        and (_get(ca, "ca_gmt_offset") == ((-5)))
                    )
                ),
            },
        ),
    )

    def _q0():
        _src = union_sales
        _rows = _query(_src, [], {"select": lambda s: (s)})
        _groups = _group_by(_rows, lambda s: (_get(s, "manu")))
        items = _groups
        items = sorted(
            items, key=lambda g: _sort_key((-_sum([_get(x, "price") for x in g])))
        )
        return [
            {
                "i_manufact_id": _get(g, "key"),
                "total_sales": _sum([_get(x, "price") for x in g]),
            }
            for g in items
        ]

    global result
    result = _q0()
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q33_simplified()


if __name__ == "__main__":
    main()
