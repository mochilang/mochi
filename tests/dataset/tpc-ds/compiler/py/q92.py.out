# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing


def _avg(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("avg() expects list or group")
    if not v:
        return 0
    s = 0.0
    for it in v:
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("avg() expects numbers")
    return s / len(v)


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


@dataclasses.dataclass
class WebSale:
    ws_item_sk: int
    ws_sold_date_sk: int
    ws_ext_discount_amt: float


web_sales = None
item = None
date_dim = None
sum_amt = None
avg_amt = None
result = None


def test_TPCDS_Q92_threshold():
    assert result == 4


def main():
    global web_sales
    web_sales = [
        {"ws_item_sk": 1, "ws_sold_date_sk": 1, "ws_ext_discount_amt": 1},
        {"ws_item_sk": 1, "ws_sold_date_sk": 1, "ws_ext_discount_amt": 1},
        {"ws_item_sk": 1, "ws_sold_date_sk": 1, "ws_ext_discount_amt": 2},
    ]
    global item
    item = [{"i_item_sk": 1, "i_manufact_id": 1}]
    global date_dim
    date_dim = [{"d_date_sk": 1, "d_date": "2000-01-02"}]
    global sum_amt
    sum_amt = _sum([_get(ws, "ws_ext_discount_amt") for ws in web_sales])
    global avg_amt
    avg_amt = _avg([_get(ws, "ws_ext_discount_amt") for ws in web_sales])
    global result
    result = sum_amt if (sum_amt > (avg_amt * 1.3)) else 0
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q92_threshold()


if __name__ == "__main__":
    main()
