# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:49:32Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    d_week_seq1: int
    sun_ratio: float
    mon_ratio: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    sold_date_sk: int
    sales_price: float
    day: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    d_week_seq: object
    sun_sales: float
    mon_sales: float
    tue_sales: float
    wed_sales: float
    thu_sales: float
    fri_sales: float
    sat_sales: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto4:
    week_seq: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogSale:
    cs_sold_date_sk: int
    cs_ext_sales_price: float
    cs_sold_date_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_week_seq: int
    d_day_name: str
    d_year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class WebSale:
    ws_sold_date_sk: int
    ws_ext_sales_price: float
    ws_sold_date_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_TPCDS_Q2_result():
    assert result == [Auto1(d_week_seq1=1, sun_ratio=0.5, mon_ratio=0.5)]


web_sales = [
    WebSale(ws_sold_date_sk=1, ws_ext_sales_price=5.0, ws_sold_date_name="Sunday"),
    WebSale(ws_sold_date_sk=2, ws_ext_sales_price=5.0, ws_sold_date_name="Monday"),
    WebSale(ws_sold_date_sk=8, ws_ext_sales_price=10.0, ws_sold_date_name="Sunday"),
    WebSale(ws_sold_date_sk=9, ws_ext_sales_price=10.0, ws_sold_date_name="Monday"),
]
catalog_sales = [
    CatalogSale(cs_sold_date_sk=1, cs_ext_sales_price=5.0, cs_sold_date_name="Sunday"),
    CatalogSale(cs_sold_date_sk=2, cs_ext_sales_price=5.0, cs_sold_date_name="Monday"),
    CatalogSale(cs_sold_date_sk=8, cs_ext_sales_price=10.0, cs_sold_date_name="Sunday"),
    CatalogSale(cs_sold_date_sk=9, cs_ext_sales_price=10.0, cs_sold_date_name="Monday"),
]
date_dim = [
    DateDim(d_date_sk=1, d_week_seq=1, d_day_name="Sunday", d_year=1998),
    DateDim(d_date_sk=2, d_week_seq=1, d_day_name="Monday", d_year=1998),
    DateDim(d_date_sk=8, d_week_seq=54, d_day_name="Sunday", d_year=1999),
    DateDim(d_date_sk=9, d_week_seq=54, d_day_name="Monday", d_year=1999),
]
wscs = [
    Auto2(
        sold_date_sk=ws.ws_sold_date_sk,
        sales_price=ws.ws_ext_sales_price,
        day=ws.ws_sold_date_name,
    )
    for ws in web_sales
] + [
    Auto2(
        sold_date_sk=cs.cs_sold_date_sk,
        sales_price=cs.cs_ext_sales_price,
        day=cs.cs_sold_date_name,
    )
    for cs in catalog_sales
]


def _q0():
    _src = wscs
    _rows = _query(
        _src,
        [{"items": date_dim, "on": lambda w, d: w["sold_date_sk"] == d.d_date_sk}],
        {"select": lambda w, d: (w, d)},
    )
    _groups = _group_by(_rows, lambda w, d: Auto4(week_seq=d.d_week_seq))
    _items1 = _groups
    return [
        Auto3(
            d_week_seq=g.key["week_seq"],
            sun_sales=_sum([x[0]["sales_price"] for x in g if x[0]["day"] == "Sunday"]),
            mon_sales=_sum([x[0]["sales_price"] for x in g if x[0]["day"] == "Monday"]),
            tue_sales=_sum(
                [x[0]["sales_price"] for x in g if x[0]["day"] == "Tuesday"]
            ),
            wed_sales=_sum(
                [x[0]["sales_price"] for x in g if x[0]["day"] == "Wednesday"]
            ),
            thu_sales=_sum(
                [x[0]["sales_price"] for x in g if x[0]["day"] == "Thursday"]
            ),
            fri_sales=_sum([x[0]["sales_price"] for x in g if x[0]["day"] == "Friday"]),
            sat_sales=_sum(
                [x[0]["sales_price"] for x in g if x[0]["day"] == "Saturday"]
            ),
        )
        for g in _items1
    ]


wswscs = _q0()
year1 = [w for w in wswscs if w.d_week_seq == 1]
year2 = [w for w in wswscs if w.d_week_seq == 54]
result = _query(
    year1,
    [{"items": year2, "on": lambda y, z: y["d_week_seq"] == z["d_week_seq"] - 53}],
    {
        "select": lambda y, z: Auto1(
            d_week_seq1=y["d_week_seq"],
            sun_ratio=y["sun_sales"] / z["sun_sales"],
            mon_ratio=y["mon_sales"] / z["mon_sales"],
        )
    },
)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q2_result()
