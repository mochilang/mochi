# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _slice(obj, i, j):
    start = i
    end = j
    n = len(obj)
    if start < 0:
        start += n
    if end < 0:
        end += n
    if start < 0:
        start = 0
    if end > n:
        end = n
    if end < start:
        end = start
    return obj[start:end]


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


@dataclasses.dataclass
class StoreSale:
    ss_sold_date_sk: int
    ss_item_sk: int
    ss_customer_sk: int
    ss_store_sk: int
    ss_ext_sales_price: float


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int
    d_moy: int


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_brand_id: int
    i_brand: str
    i_manufact_id: int
    i_manufact: str
    i_manager_id: int


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_current_addr_sk: int


@dataclasses.dataclass
class CustomerAddress:
    ca_address_sk: int
    ca_zip: str


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_zip: str


store_sales = None
date_dim = None
item = None
customer = None
customer_address = None
store = None
result = None


def test_TPCDS_Q19_brand():
    assert result == [
        {
            "i_brand": "B1",
            "i_brand_id": 1,
            "i_manufact_id": 1,
            "i_manufact": "M1",
            "ext_price": 100,
        }
    ]


def main():
    global store_sales
    store_sales = [
        {
            "ss_sold_date_sk": 1,
            "ss_item_sk": 1,
            "ss_customer_sk": 1,
            "ss_store_sk": 1,
            "ss_ext_sales_price": 100,
        }
    ]
    global date_dim
    date_dim = [{"d_date_sk": 1, "d_year": 1999, "d_moy": 11}]
    global item
    item = [
        {
            "i_item_sk": 1,
            "i_brand_id": 1,
            "i_brand": "B1",
            "i_manufact_id": 1,
            "i_manufact": "M1",
            "i_manager_id": 10,
        }
    ]
    global customer
    customer = [{"c_customer_sk": 1, "c_current_addr_sk": 1}]
    global customer_address
    customer_address = [{"ca_address_sk": 1, "ca_zip": "11111"}]
    global store
    store = [{"s_store_sk": 1, "s_zip": "99999"}]

    def _q0():
        _src = date_dim
        _rows = _query(
            _src,
            [
                {
                    "items": store_sales,
                    "on": lambda d, ss: (
                        (_get(ss, "ss_sold_date_sk") == _get(d, "d_date_sk"))
                    ),
                },
                {
                    "items": item,
                    "on": lambda d, ss, i: (
                        (
                            (_get(ss, "ss_item_sk") == _get(i, "i_item_sk"))
                            and (_get(i, "i_manager_id") == 10)
                        )
                    ),
                },
                {
                    "items": customer,
                    "on": lambda d, ss, i, c: (
                        (_get(ss, "ss_customer_sk") == _get(c, "c_customer_sk"))
                    ),
                },
                {
                    "items": customer_address,
                    "on": lambda d, ss, i, c, ca: (
                        (_get(c, "c_current_addr_sk") == _get(ca, "ca_address_sk"))
                    ),
                },
                {
                    "items": store,
                    "on": lambda d, ss, i, c, ca, s: (
                        (
                            (_get(ss, "ss_store_sk") == _get(s, "s_store_sk"))
                            and (
                                _slice(_get(ca, "ca_zip"), 0, 5)
                                != _slice(_get(s, "s_zip"), 0, 5)
                            )
                        )
                    ),
                },
            ],
            {
                "select": lambda d, ss, i, c, ca, s: (d, ss, i, c, ca, s),
                "where": lambda d, ss, i, c, ca, s: (
                    ((_get(d, "d_moy") == 11) and (_get(d, "d_year") == 1999))
                ),
            },
        )
        _groups = _group_by(
            _rows,
            lambda d, ss, i, c, ca, s: (
                {
                    "brand": _get(i, "i_brand"),
                    "brand_id": _get(i, "i_brand_id"),
                    "man_id": _get(i, "i_manufact_id"),
                    "man": _get(i, "i_manufact"),
                }
            ),
        )
        items = _groups
        items = sorted(items, key=lambda g: _sort_key([_get(_get(g, "key"), "brand")]))
        return [
            {
                "i_brand": _get(_get(g, "key"), "brand"),
                "i_brand_id": _get(_get(g, "key"), "brand_id"),
                "i_manufact_id": _get(_get(g, "key"), "man_id"),
                "i_manufact": _get(_get(g, "key"), "man"),
                "ext_price": _sum([_get(x, "ss_ext_sales_price") for x in g]),
            }
            for g in items
        ]

    global result
    result = _q0()
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q19_brand()


if __name__ == "__main__":
    main()
