# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:46Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    s_state: str
    s_county: str
    total_sum: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    state: str
    county: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_month_seq: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_state: str
    s_county: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_sold_date_sk: int
    ss_store_sk: int
    ss_net_profit: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, list):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, tuple):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, dict):
        return str(k)
    return k


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_TPCDS_Q70_simplified():
    assert result == [
        Auto1(s_state="CA", s_county="Orange", total_sum=15.0),
        Auto1(s_state="TX", s_county="Travis", total_sum=20.0),
    ]


store = [
    Store(s_store_sk=1, s_state="CA", s_county="Orange"),
    Store(s_store_sk=2, s_state="CA", s_county="Orange"),
    Store(s_store_sk=3, s_state="TX", s_county="Travis"),
]
date_dim = [
    DateDim(d_date_sk=1, d_month_seq=1200),
    DateDim(d_date_sk=2, d_month_seq=1201),
]
store_sales = [
    StoreSale(ss_sold_date_sk=1, ss_store_sk=1, ss_net_profit=10.0),
    StoreSale(ss_sold_date_sk=1, ss_store_sk=2, ss_net_profit=5.0),
    StoreSale(ss_sold_date_sk=2, ss_store_sk=3, ss_net_profit=20.0),
]
dms = 1200


def _q0():
    _src = store_sales
    _rows = _query(
        _src,
        [
            {"items": date_dim, "on": lambda ss, d: d.d_date_sk == ss.ss_sold_date_sk},
            {"items": store, "on": lambda ss, d, s: s.s_store_sk == ss.ss_store_sk},
        ],
        {
            "select": lambda ss, d, s: (ss, d, s),
            "where": lambda ss, d, s: d.d_month_seq >= dms
            and d.d_month_seq <= dms + 11,
        },
    )
    _groups = _group_by(
        _rows, lambda ss, d, s: Auto2(state=s.s_state, county=s.s_county)
    )
    _items1 = _groups
    _items1 = sorted(
        _items1, key=lambda g: _sort_key([g.key["state"], g.key["county"]])
    )
    return [
        Auto1(
            s_state=g.key["state"],
            s_county=g.key["county"],
            total_sum=_sum([x[0].ss_net_profit for x in g]),
        )
        for g in _items1
    ]


result = _q0()
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q70_simplified()
