# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing


def _avg(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("avg() expects list or group")
    if not v:
        return 0
    s = 0.0
    for it in v:
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("avg() expects numbers")
    return s / len(v)


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


@dataclasses.dataclass
class CatalogSale:
    cs_quantity: int
    cs_list_price: float
    cs_coupon_amt: float
    cs_sales_price: float
    cs_net_profit: float
    cs_bill_cdemo_sk: int
    cs_bill_customer_sk: int
    cs_sold_date_sk: int
    cs_item_sk: int


@dataclasses.dataclass
class CustomerDemographics:
    cd_demo_sk: int
    cd_gender: str
    cd_education_status: str
    cd_dep_count: int


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_current_cdemo_sk: int
    c_current_addr_sk: int
    c_birth_year: int
    c_birth_month: int


@dataclasses.dataclass
class CustomerAddress:
    ca_address_sk: int
    ca_country: str
    ca_state: str
    ca_county: str


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_item_id: str


catalog_sales = None
customer_demographics = None
customer = None
customer_address = None
date_dim = None
item = None
joined = None
result = None


def test_TPCDS_Q18_averages():
    assert result == [
        {
            "i_item_id": "I1",
            "ca_country": "US",
            "ca_state": "CA",
            "ca_county": "County1",
            "agg1": 1,
            "agg2": 10,
            "agg3": 1,
            "agg4": 9,
            "agg5": 2,
            "agg6": 1980,
            "agg7": 2,
        }
    ]


def main():
    global catalog_sales
    catalog_sales = [
        {
            "cs_quantity": 1,
            "cs_list_price": 10,
            "cs_coupon_amt": 1,
            "cs_sales_price": 9,
            "cs_net_profit": 2,
            "cs_bill_cdemo_sk": 1,
            "cs_bill_customer_sk": 1,
            "cs_sold_date_sk": 1,
            "cs_item_sk": 1,
        }
    ]
    global customer_demographics
    customer_demographics = [
        {
            "cd_demo_sk": 1,
            "cd_gender": "M",
            "cd_education_status": "College",
            "cd_dep_count": 2,
        },
        {
            "cd_demo_sk": 2,
            "cd_gender": "F",
            "cd_education_status": "College",
            "cd_dep_count": 2,
        },
    ]
    global customer
    customer = [
        {
            "c_customer_sk": 1,
            "c_current_cdemo_sk": 2,
            "c_current_addr_sk": 1,
            "c_birth_year": 1980,
            "c_birth_month": 1,
        }
    ]
    global customer_address
    customer_address = [
        {
            "ca_address_sk": 1,
            "ca_country": "US",
            "ca_state": "CA",
            "ca_county": "County1",
        }
    ]
    global date_dim
    date_dim = [{"d_date_sk": 1, "d_year": 1999}]
    global item
    item = [{"i_item_sk": 1, "i_item_id": "I1"}]
    global joined
    joined = _query(
        catalog_sales,
        [
            {
                "items": customer_demographics,
                "on": lambda cs, cd1: (
                    (
                        (
                            (_get(cs, "cs_bill_cdemo_sk") == _get(cd1, "cd_demo_sk"))
                            and (_get(cd1, "cd_gender") == "M")
                        )
                        and (_get(cd1, "cd_education_status") == "College")
                    )
                ),
            },
            {
                "items": customer,
                "on": lambda cs, cd1, c: (
                    (_get(cs, "cs_bill_customer_sk") == _get(c, "c_customer_sk"))
                ),
            },
            {
                "items": customer_demographics,
                "on": lambda cs, cd1, c, cd2: (
                    (_get(c, "c_current_cdemo_sk") == _get(cd2, "cd_demo_sk"))
                ),
            },
            {
                "items": customer_address,
                "on": lambda cs, cd1, c, cd2, ca: (
                    (_get(c, "c_current_addr_sk") == _get(ca, "ca_address_sk"))
                ),
            },
            {
                "items": date_dim,
                "on": lambda cs, cd1, c, cd2, ca, d: (
                    (
                        (_get(cs, "cs_sold_date_sk") == _get(d, "d_date_sk"))
                        and (_get(d, "d_year") == 1999)
                    )
                ),
            },
            {
                "items": item,
                "on": lambda cs, cd1, c, cd2, ca, d, i: (
                    (_get(cs, "cs_item_sk") == _get(i, "i_item_sk"))
                ),
            },
        ],
        {
            "select": lambda cs, cd1, c, cd2, ca, d, i: {
                "i_item_id": _get(i, "i_item_id"),
                "ca_country": _get(ca, "ca_country"),
                "ca_state": _get(ca, "ca_state"),
                "ca_county": _get(ca, "ca_county"),
                "q": _get(cs, "cs_quantity"),
                "lp": _get(cs, "cs_list_price"),
                "cp": _get(cs, "cs_coupon_amt"),
                "sp": _get(cs, "cs_sales_price"),
                "np": _get(cs, "cs_net_profit"),
                "by": _get(c, "c_birth_year"),
                "dep": _get(cd1, "cd_dep_count"),
            }
        },
    )

    def _q0():
        _src = joined
        _rows = _query(_src, [], {"select": lambda j: (j)})
        _groups = _group_by(
            _rows,
            lambda j: (
                {
                    "i_item_id": _get(j, "i_item_id"),
                    "ca_country": _get(j, "ca_country"),
                    "ca_state": _get(j, "ca_state"),
                    "ca_county": _get(j, "ca_county"),
                }
            ),
        )
        items = _groups
        return [
            {
                "i_item_id": _get(_get(g, "key"), "i_item_id"),
                "ca_country": _get(_get(g, "key"), "ca_country"),
                "ca_state": _get(_get(g, "key"), "ca_state"),
                "ca_county": _get(_get(g, "key"), "ca_county"),
                "agg1": _avg([_get(x, "q") for x in g]),
                "agg2": _avg([_get(x, "lp") for x in g]),
                "agg3": _avg([_get(x, "cp") for x in g]),
                "agg4": _avg([_get(x, "sp") for x in g]),
                "agg5": _avg([_get(x, "np") for x in g]),
                "agg6": _avg([_get(x, "by") for x in g]),
                "agg7": _avg([_get(x, "dep") for x in g]),
            }
            for g in items
        ]

    global result
    result = _q0()
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q18_averages()


if __name__ == "__main__":
    main()
