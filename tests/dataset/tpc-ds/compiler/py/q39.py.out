# Generated by Mochi Python compiler
from __future__ import annotations

import json
import math
import typing


def _append(lst, v):
    out = list(lst) if lst is not None else []
    out.append(v)
    return out


def _avg(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("avg() expects list or group")
    if not v:
        return 0
    s = 0.0
    for it in v:
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("avg() expects numbers")
    return s / len(v)


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def _values(m):
    if isinstance(m, dict):
        return list(m.values())
    raise Exception("values() expects map")


inventory = None
item = None
warehouse = None
date_dim = None
monthly = None
grouped = {}
summary = []


def test_TPCDS_Q39_simplified():
    assert summary == [{"w_warehouse_sk": 1, "i_item_sk": 1, "cov": 1.539600717839002}]


def main():
    global inventory
    inventory = [
        {
            "inv_item_sk": 1,
            "inv_warehouse_sk": 1,
            "inv_date_sk": 1,
            "inv_quantity_on_hand": 10,
        },
        {
            "inv_item_sk": 1,
            "inv_warehouse_sk": 1,
            "inv_date_sk": 2,
            "inv_quantity_on_hand": 10,
        },
        {
            "inv_item_sk": 1,
            "inv_warehouse_sk": 1,
            "inv_date_sk": 3,
            "inv_quantity_on_hand": 250,
        },
    ]
    global item
    item = [{"i_item_sk": 1}]
    global warehouse
    warehouse = [{"w_warehouse_sk": 1, "w_warehouse_name": "W1"}]
    global date_dim
    date_dim = [
        {"d_date_sk": 1, "d_year": 2000, "d_moy": 1},
        {"d_date_sk": 2, "d_year": 2000, "d_moy": 2},
        {"d_date_sk": 3, "d_year": 2000, "d_moy": 3},
    ]

    def _q0():
        _src = inventory
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda inv, d: (
                        (_get(inv, "inv_date_sk") == _get(d, "d_date_sk"))
                    ),
                },
                {
                    "items": item,
                    "on": lambda inv, d, i: (
                        (_get(inv, "inv_item_sk") == _get(i, "i_item_sk"))
                    ),
                },
                {
                    "items": warehouse,
                    "on": lambda inv, d, i, w: (
                        (_get(inv, "inv_warehouse_sk") == _get(w, "w_warehouse_sk"))
                    ),
                },
            ],
            {
                "select": lambda inv, d, i, w: (inv, d, i, w),
                "where": lambda inv, d, i, w: ((_get(d, "d_year") == 2000)),
            },
        )
        _groups = _group_by(
            _rows,
            lambda inv, d, i, w: (
                {
                    "w": _get(w, "w_warehouse_sk"),
                    "i": _get(i, "i_item_sk"),
                    "month": _get(d, "d_moy"),
                }
            ),
        )
        items = _groups
        return [
            {
                "w": _get(_get(g, "key"), "w"),
                "i": _get(_get(g, "key"), "i"),
                "qty": _sum([_get(x, "inv_quantity_on_hand") for x in g]),
            }
            for g in items
        ]

    global monthly
    monthly = _q0()
    global grouped
    grouped = typing.cast(dict[str, dict[str, typing.Any]], {})
    for m in monthly:
        key = str({"w": _get(m, "w"), "i": _get(m, "i")})
        if key in grouped:
            g = grouped[key]
            grouped[key] = {
                "w": _get(g, "w"),
                "i": _get(g, "i"),
                "qtys": _append(_get(g, "qtys"), _get(m, "qty")),
            }
        else:
            grouped[key] = {
                "w": _get(m, "w"),
                "i": _get(m, "i"),
                "qtys": [_get(m, "qty")],
            }
    global summary
    summary = []
    for g in _values(grouped):
        mean = _avg(_get(g, "qtys"))
        sumsq = 0
        for q in _get(g, "qtys"):
            sumsq = sumsq + (((q - mean)) * ((q - mean)))
        variance = sumsq / ((len(_get(g, "qtys")) - 1))
        cov = _get(math, "sqrt")(variance) / mean
        if cov > 1.5:
            summary = _append(
                summary,
                {"w_warehouse_sk": _get(g, "w"), "i_item_sk": _get(g, "i"), "cov": cov},
            )
    print(json.dumps(summary, default=lambda o: vars(o)))
    test_TPCDS_Q39_simplified()


if __name__ == "__main__":
    main()
