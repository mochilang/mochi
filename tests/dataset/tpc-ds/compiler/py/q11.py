# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:49:40Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    customer_id: str
    customer_first_name: str
    customer_last_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_customer_id: str
    c_first_name: str
    c_last_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_customer_sk: int
    ss_sold_date_sk: int
    ss_ext_list_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class WebSale:
    ws_bill_customer_sk: int
    ws_sold_date_sk: int
    ws_ext_list_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_customer_id: str
    c_first_name: str
    c_last_name: str

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_customer_sk: int
    ss_sold_date_sk: int
    ss_ext_list_price: float

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class WebSale:
    ws_bill_customer_sk: int
    ws_sold_date_sk: int
    ws_ext_list_price: float

    def __contains__(self, key):
        return hasattr(self, key)


def test_TPCDS_Q11_growth():
    assert result == [
        Auto1(customer_id="C1", customer_first_name="John", customer_last_name="Doe")
    ]


customer = [
    Customer(
        c_customer_sk=1, c_customer_id="C1", c_first_name="John", c_last_name="Doe"
    )
]
store_sales = [
    StoreSale(ss_customer_sk=1, ss_sold_date_sk=1998, ss_ext_list_price=60.0),
    StoreSale(ss_customer_sk=1, ss_sold_date_sk=1999, ss_ext_list_price=90.0),
]
web_sales = [
    WebSale(ws_bill_customer_sk=1, ws_sold_date_sk=1998, ws_ext_list_price=50.0),
    WebSale(ws_bill_customer_sk=1, ws_sold_date_sk=1999, ws_ext_list_price=150.0),
]
ss98 = sum([ss.ss_ext_list_price for ss in store_sales if ss.ss_sold_date_sk == 1998])
ss99 = sum([ss.ss_ext_list_price for ss in store_sales if ss.ss_sold_date_sk == 1999])
ws98 = sum([ws.ws_ext_list_price for ws in web_sales if ws.ws_sold_date_sk == 1998])
ws99 = sum([ws.ws_ext_list_price for ws in web_sales if ws.ws_sold_date_sk == 1999])
growth_ok = (ws98 > 0 and ss98 > 0) and ws99 / ws98 > ss99 / ss98
result = (
    [Auto1(customer_id="C1", customer_first_name="John", customer_last_name="Doe")]
    if growth_ok
    else []
)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q11_growth()
