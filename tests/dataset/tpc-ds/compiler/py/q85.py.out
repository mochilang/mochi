# Generated by Mochi Python compiler
from __future__ import annotations

import json


def _avg(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("avg() expects list or group")
    if not v:
        return 0
    s = 0.0
    for it in v:
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("avg() expects numbers")
    return s / len(v)


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


web_returns = None
result = None


def test_TPCDS_Q85_sample():
    assert result == 85


def main():
    global web_returns
    web_returns = [
        {"qty": 60, "cash": 20, "fee": 1},
        {"qty": 100, "cash": 30, "fee": 2},
        {"qty": 95, "cash": 25, "fee": 3},
    ]
    global result
    result = _avg([_get(r, "qty") for r in web_returns])
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q85_sample()


if __name__ == "__main__":
    main()
