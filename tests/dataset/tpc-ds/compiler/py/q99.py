# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:51:23Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    warehouse: str
    sm_type: str
    cc_name: str
    d30: int
    d60: int
    d90: int
    d120: int
    dmore: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    warehouse: str
    sm_type: str
    cc_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CallCenter:
    cc_call_center_sk: int
    cc_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogSale:
    cs_ship_date_sk: int
    cs_sold_date_sk: int
    cs_warehouse_sk: int
    cs_ship_mode_sk: int
    cs_call_center_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class ShipMode:
    sm_ship_mode_sk: int
    sm_type: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Warehouse:
    w_warehouse_sk: int
    w_warehouse_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


@dataclasses.dataclass
class CatalogSale:
    cs_ship_date_sk: int
    cs_sold_date_sk: int
    cs_warehouse_sk: int
    cs_ship_mode_sk: int
    cs_call_center_sk: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Warehouse:
    w_warehouse_sk: int
    w_warehouse_name: str

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class ShipMode:
    sm_ship_mode_sk: int
    sm_type: str

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CallCenter:
    cc_call_center_sk: int
    cc_name: str

    def __contains__(self, key):
        return hasattr(self, key)


def test_TPCDS_Q99_buckets():
    assert grouped == [
        Auto1(
            warehouse="Warehouse1",
            sm_type="EXP",
            cc_name="CC1",
            d30=1,
            d60=1,
            d90=1,
            d120=1,
            dmore=1,
        )
    ]


catalog_sales = [
    CatalogSale(
        cs_ship_date_sk=31,
        cs_sold_date_sk=1,
        cs_warehouse_sk=1,
        cs_ship_mode_sk=1,
        cs_call_center_sk=1,
    ),
    CatalogSale(
        cs_ship_date_sk=51,
        cs_sold_date_sk=1,
        cs_warehouse_sk=1,
        cs_ship_mode_sk=1,
        cs_call_center_sk=1,
    ),
    CatalogSale(
        cs_ship_date_sk=71,
        cs_sold_date_sk=1,
        cs_warehouse_sk=1,
        cs_ship_mode_sk=1,
        cs_call_center_sk=1,
    ),
    CatalogSale(
        cs_ship_date_sk=101,
        cs_sold_date_sk=1,
        cs_warehouse_sk=1,
        cs_ship_mode_sk=1,
        cs_call_center_sk=1,
    ),
    CatalogSale(
        cs_ship_date_sk=131,
        cs_sold_date_sk=1,
        cs_warehouse_sk=1,
        cs_ship_mode_sk=1,
        cs_call_center_sk=1,
    ),
]
warehouse = [Warehouse(w_warehouse_sk=1, w_warehouse_name="Warehouse1")]
ship_mode = [ShipMode(sm_ship_mode_sk=1, sm_type="EXP")]
call_center = [CallCenter(cc_call_center_sk=1, cc_name="CC1")]


def _q0():
    _src = catalog_sales
    _rows = _query(
        _src,
        [
            {
                "items": warehouse,
                "on": lambda cs, w: cs.cs_warehouse_sk == w.w_warehouse_sk,
            },
            {
                "items": ship_mode,
                "on": lambda cs, w, sm: cs.cs_ship_mode_sk == sm.sm_ship_mode_sk,
            },
            {
                "items": call_center,
                "on": lambda cs, w, sm, cc: cs.cs_call_center_sk
                == cc.cc_call_center_sk,
            },
        ],
        {"select": lambda cs, w, sm, cc: (cs, w, sm, cc)},
    )
    _groups = _group_by(
        _rows,
        lambda cs, w, sm, cc: Auto2(
            warehouse=w.w_warehouse_name[0:20], sm_type=sm.sm_type, cc_name=cc.cc_name
        ),
    )
    _items1 = _groups
    return [
        Auto1(
            warehouse=g.key["warehouse"],
            sm_type=g.key["sm_type"],
            cc_name=g.key["cc_name"],
            d30=len(
                [x for x in g if x[0].cs_ship_date_sk - x[0].cs_sold_date_sk <= 30]
            ),
            d60=len(
                [
                    x
                    for x in g
                    if x[0].cs_ship_date_sk - x[0].cs_sold_date_sk > 30
                    and x[0].cs_ship_date_sk - x[0].cs_sold_date_sk <= 60
                ]
            ),
            d90=len(
                [
                    x
                    for x in g
                    if x[0].cs_ship_date_sk - x[0].cs_sold_date_sk > 60
                    and x[0].cs_ship_date_sk - x[0].cs_sold_date_sk <= 90
                ]
            ),
            d120=len(
                [
                    x
                    for x in g
                    if x[0].cs_ship_date_sk - x[0].cs_sold_date_sk > 90
                    and x[0].cs_ship_date_sk - x[0].cs_sold_date_sk <= 120
                ]
            ),
            dmore=len(
                [x for x in g if x[0].cs_ship_date_sk - x[0].cs_sold_date_sk > 120]
            ),
        )
        for g in _items1
    ]


grouped = _q0()
print(json.dumps(grouped, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q99_buckets()
