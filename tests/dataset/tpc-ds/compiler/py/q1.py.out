# Generated by Mochi compiler v0.10.25 on 2025-07-15T05:54:55Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    c_customer_id: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto2:
    ctr_customer_sk: object
    ctr_store_sk: object
    ctr_total_return: float

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Auto3:
    customer_sk: int
    store_sk: int

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_customer_id: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_state: str

    def __getitem__(self, key):
        return getattr(self, key)


@dataclasses.dataclass
class StoreReturn:
    sr_returned_date_sk: int
    sr_customer_sk: int
    sr_store_sk: int
    sr_return_amt: float

    def __getitem__(self, key):
        return getattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_TPCDS_Q1_result():
    assert result == [Auto1(c_customer_id="C2")]


store_returns = [
    StoreReturn(
        sr_returned_date_sk=1, sr_customer_sk=1, sr_store_sk=10, sr_return_amt=20.0
    ),
    StoreReturn(
        sr_returned_date_sk=1, sr_customer_sk=2, sr_store_sk=10, sr_return_amt=50.0
    ),
]
date_dim = [DateDim(d_date_sk=1, d_year=1998)]
store = [Store(s_store_sk=10, s_state="TN")]
customer = [
    Customer(c_customer_sk=1, c_customer_id="C1"),
    Customer(c_customer_sk=2, c_customer_id="C2"),
]


def _q0():
    _src = store_returns
    _rows = _query(
        _src,
        [
            {
                "items": date_dim,
                "on": lambda sr, d: sr.sr_returned_date_sk == d.d_date_sk
                and d.d_year == 1998,
            }
        ],
        {"select": lambda sr, d: (sr, d)},
    )
    _groups = _group_by(
        _rows,
        lambda sr, d: Auto3(customer_sk=sr.sr_customer_sk, store_sk=sr.sr_store_sk),
    )
    _items1 = _groups
    return [
        Auto2(
            ctr_customer_sk=g.key.customer_sk,
            ctr_store_sk=g.key.store_sk,
            ctr_total_return=sum([x[0].sr_return_amt for x in g]),
        )
        for g in _items1
    ]


customer_total_return = _q0()
result = _query(
    customer_total_return,
    [
        {"items": store, "on": lambda ctr1, s: ctr1.ctr_store_sk == s.s_store_sk},
        {
            "items": customer,
            "on": lambda ctr1, s, c: ctr1.ctr_customer_sk == c.c_customer_sk,
        },
    ],
    {
        "select": lambda ctr1, s, c: Auto1(c_customer_id=c.c_customer_id),
        "where": lambda ctr1, s, c: ctr1.ctr_total_return
        > (
            sum(
                [
                    ctr2.ctr_total_return
                    for ctr2 in customer_total_return
                    if ctr1.ctr_store_sk == ctr2.ctr_store_sk
                ]
            )
            / len(
                [
                    ctr2.ctr_total_return
                    for ctr2 in customer_total_return
                    if ctr1.ctr_store_sk == ctr2.ctr_store_sk
                ]
            )
            if [
                ctr2.ctr_total_return
                for ctr2 in customer_total_return
                if ctr1.ctr_store_sk == ctr2.ctr_store_sk
            ]
            else 0
        )
        * 1.2
        and s.s_state == "TN",
        "sortKey": lambda ctr1, s, c: c.c_customer_id,
    },
)
print(json.dumps(result, default=lambda o: vars(o)))
test_TPCDS_Q1_result()
