# Generated by Mochi Python compiler
from __future__ import annotations

import json


def _avg(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("avg() expects list or group")
    if not v:
        return 0
    s = 0.0
    for it in v:
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("avg() expects numbers")
    return s / len(v)


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


store_returns = None
date_dim = None
store = None
customer = None
customer_total_return = None
result = None


def test_TPCDS_Q1_result():
    assert result == [{"c_customer_id": "C2"}]


def main():
    global store_returns
    store_returns = [
        {
            "sr_returned_date_sk": 1,
            "sr_customer_sk": 1,
            "sr_store_sk": 10,
            "sr_return_amt": 20,
        },
        {
            "sr_returned_date_sk": 1,
            "sr_customer_sk": 2,
            "sr_store_sk": 10,
            "sr_return_amt": 50,
        },
    ]
    global date_dim
    date_dim = [{"d_date_sk": 1, "d_year": 1998}]
    global store
    store = [{"s_store_sk": 10, "s_state": "TN"}]
    global customer
    customer = [
        {"c_customer_sk": 1, "c_customer_id": "C1"},
        {"c_customer_sk": 2, "c_customer_id": "C2"},
    ]

    def _q0():
        _src = store_returns
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda sr, d: (
                        (
                            (_get(sr, "sr_returned_date_sk") == _get(d, "d_date_sk"))
                            and (_get(d, "d_year") == 1998)
                        )
                    ),
                }
            ],
            {"select": lambda sr, d: (sr, d)},
        )
        _groups = _group_by(
            _rows,
            lambda sr, d: (
                {
                    "customer_sk": _get(sr, "sr_customer_sk"),
                    "store_sk": _get(sr, "sr_store_sk"),
                }
            ),
        )
        items = _groups
        return [
            {
                "ctr_customer_sk": _get(_get(g, "key"), "customer_sk"),
                "ctr_store_sk": _get(_get(g, "key"), "store_sk"),
                "ctr_total_return": _sum([_get(x, "sr_return_amt") for x in g]),
            }
            for g in items
        ]

    global customer_total_return
    customer_total_return = _q0()
    global result
    result = _query(
        customer_total_return,
        [
            {
                "items": store,
                "on": lambda ctr1, s: (
                    (_get(ctr1, "ctr_store_sk") == _get(s, "s_store_sk"))
                ),
            },
            {
                "items": customer,
                "on": lambda ctr1, s, c: (
                    (_get(ctr1, "ctr_customer_sk") == _get(c, "c_customer_sk"))
                ),
            },
        ],
        {
            "select": lambda ctr1, s, c: {"c_customer_id": _get(c, "c_customer_id")},
            "where": lambda ctr1, s, c: (
                (
                    (
                        _get(ctr1, "ctr_total_return")
                        > (
                            _avg(
                                [
                                    _get(ctr2, "ctr_total_return")
                                    for ctr2 in customer_total_return
                                    if (
                                        _get(ctr1, "ctr_store_sk")
                                        == _get(ctr2, "ctr_store_sk")
                                    )
                                ]
                            )
                            * 1.2
                        )
                    )
                    and (_get(s, "s_state") == "TN")
                )
            ),
            "sortKey": lambda ctr1, s, c: (_get(c, "c_customer_id")),
        },
    )
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q1_result()


if __name__ == "__main__":
    main()
