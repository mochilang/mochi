# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:30Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    item_id: int
    average: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    item_id: int
    ss_item_rev: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    item_id: int
    cs_item_rev: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto4:
    item_id: int
    ws_item_rev: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Result:
    item_id: object
    average: object

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


def test_TPCDS_Q58_simplified():
    assert result == [Auto1(item_id=1, average=58.0)]


ss_items = Auto2(item_id=1, ss_item_rev=50.0)
cs_items = Auto3(item_id=1, cs_item_rev=60.0)
ws_items = Auto4(item_id=1, ws_item_rev=64.0)
avg = (
    ss_items["ss_item_rev"] + cs_items["cs_item_rev"] + ws_items["ws_item_rev"]
) / 3.0
result = [Result(item_id=ss_items["item_id"], average=avg)]
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q58_simplified()
