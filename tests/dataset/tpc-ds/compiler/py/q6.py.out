# Generated by Mochi Python compiler
from __future__ import annotations

import json

customer_address = []
customer = []
store_sales = []
date_dim = []
item = []
target_month_seq = None
result = None


def test_TPCDS_Q6_empty():
    assert len(result) == 0


def main():
    global customer_address
    customer_address = []
    global customer
    customer = []
    global store_sales
    store_sales = []
    global date_dim
    date_dim = []
    global item
    item = []
    global target_month_seq
    target_month_seq = _max(
        [d.d_month_seq for d in date_dim if ((d.d_year == 1999) and (d.d_moy == 5))]
    )

    def _q0():
        _src = customer_address
        _rows = _query(
            _src,
            [
                {
                    "items": customer,
                    "on": lambda a, c: ((a.ca_address_sk == c.c_current_addr_sk)),
                },
                {
                    "items": store_sales,
                    "on": lambda a, c, s: ((c.c_customer_sk == s.ss_customer_sk)),
                },
                {
                    "items": date_dim,
                    "on": lambda a, c, s, d: ((s.ss_sold_date_sk == d.d_date_sk)),
                },
                {
                    "items": item,
                    "on": lambda a, c, s, d, i: ((s.ss_item_sk == i.i_item_sk)),
                },
            ],
            {
                "select": lambda a, c, s, d, i: (a, c, s, d, i),
                "where": lambda a, c, s, d, i: (
                    (
                        (d.d_month_seq == target_month_seq)
                        and (
                            i.i_current_price
                            > (
                                1.2
                                * _avg(
                                    [
                                        j.i_current_price
                                        for j in item
                                        if (j.i_category == i.i_category)
                                    ]
                                )
                            )
                        )
                    )
                ),
            },
        )
        _groups = _group_by(_rows, lambda a, c, s, d, i: (a.ca_state))
        items = _groups
        items = sorted(items, key=lambda g: [_count(g), g.key])
        items = (items)[: max(100, 0)]
        return [{"state": g.key, "cnt": _count(g)} for g in items]

    global result
    result = _q0()
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q6_empty()


def _avg(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("avg() expects list or group")
    if not v:
        return 0
    s = 0.0
    for it in v:
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("avg() expects numbers")
    return s / len(v)


def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, "Items"):
        return len(v.Items)
    raise Exception("count() expects list or group")


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _max(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("max() expects list or group")
    if not v:
        return 0
    return max(v)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):
        items.sort(key=lambda it: opts["sortKey"](*it))
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


if __name__ == "__main__":
    main()
