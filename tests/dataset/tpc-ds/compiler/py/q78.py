# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:51:00Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    ss_sold_year: int
    ss_item_sk: int
    ss_customer_sk: int
    ratio: float
    store_qty: int
    store_wholesale_cost: float
    store_sales_price: float
    other_chan_qty: int
    other_chan_wholesale_cost: float
    other_chan_sales_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class C:
    cs_sold_year: int
    cs_item_sk: int
    cs_customer_sk: int
    cs_qty: int
    cs_wc: float
    cs_sp: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class S:
    ss_sold_year: int
    ss_item_sk: int
    ss_customer_sk: int
    ss_qty: int
    ss_wc: float
    ss_sp: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class W:
    ws_sold_year: int
    ws_item_sk: int
    ws_customer_sk: int
    ws_qty: int
    ws_wc: float
    ws_sp: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_TPCDS_Q78_simplified():
    assert result == [
        Auto1(
            ss_sold_year=1998,
            ss_item_sk=1,
            ss_customer_sk=1,
            ratio=1.25,
            store_qty=10,
            store_wholesale_cost=50.0,
            store_sales_price=100.0,
            other_chan_qty=8,
            other_chan_wholesale_cost=40.0,
            other_chan_sales_price=80.0,
        )
    ]


ss = [
    S(
        ss_sold_year=1998,
        ss_item_sk=1,
        ss_customer_sk=1,
        ss_qty=10,
        ss_wc=50.0,
        ss_sp=100.0,
    )
]
ws = [
    W(
        ws_sold_year=1998,
        ws_item_sk=1,
        ws_customer_sk=1,
        ws_qty=5,
        ws_wc=25.0,
        ws_sp=50.0,
    )
]
cs = [
    C(
        cs_sold_year=1998,
        cs_item_sk=1,
        cs_customer_sk=1,
        cs_qty=3,
        cs_wc=15.0,
        cs_sp=30.0,
    )
]
result = _query(
    ss,
    [
        {
            "items": ws,
            "on": lambda s, w: (
                w.ws_sold_year == s.ss_sold_year and w.ws_item_sk == s.ss_item_sk
            )
            and w.ws_customer_sk == s.ss_customer_sk,
            "left": True,
        },
        {
            "items": cs,
            "on": lambda s, w, c: (
                c.cs_sold_year == s.ss_sold_year and c.cs_item_sk == s.ss_item_sk
            )
            and c.cs_customer_sk == s.ss_customer_sk,
            "left": True,
        },
    ],
    {
        "select": lambda s, w, c: Auto1(
            ss_sold_year=s.ss_sold_year,
            ss_item_sk=s.ss_item_sk,
            ss_customer_sk=s.ss_customer_sk,
            ratio=s.ss_qty
            / ((0 if w == None else w.ws_qty) + (0 if c == None else c.cs_qty)),
            store_qty=s.ss_qty,
            store_wholesale_cost=s.ss_wc,
            store_sales_price=s.ss_sp,
            other_chan_qty=(0 if w == None else w.ws_qty)
            + (0 if c == None else c.cs_qty),
            other_chan_wholesale_cost=(0.0 if w == None else w.ws_wc)
            + (0.0 if c == None else c.cs_wc),
            other_chan_sales_price=(0.0 if w == None else w.ws_sp)
            + (0.0 if c == None else c.cs_sp),
        ),
        "where": lambda s, w, c: (
            (0 if w == None else w.ws_qty) > 0 or (0 if c == None else c.cs_qty) > 0
        )
        and s.ss_sold_year == 1998,
    },
)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q78_simplified()
