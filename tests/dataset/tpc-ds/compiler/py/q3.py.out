# Generated by Mochi Python compiler
from __future__ import annotations

import json


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


date_dim = None
store_sales = None
item = None
result = None


def test_TPCDS_Q3_result():
    assert result == [
        {"d_year": 1998, "brand_id": 1, "brand": "Brand1", "sum_agg": 10},
        {"d_year": 1998, "brand_id": 2, "brand": "Brand2", "sum_agg": 20},
    ]


def main():
    global date_dim
    date_dim = [{"d_date_sk": 1, "d_year": 1998, "d_moy": 12}]
    global store_sales
    store_sales = [
        {"ss_sold_date_sk": 1, "ss_item_sk": 1, "ss_ext_sales_price": 10},
        {"ss_sold_date_sk": 1, "ss_item_sk": 2, "ss_ext_sales_price": 20},
    ]
    global item
    item = [
        {"i_item_sk": 1, "i_manufact_id": 100, "i_brand_id": 1, "i_brand": "Brand1"},
        {"i_item_sk": 2, "i_manufact_id": 100, "i_brand_id": 2, "i_brand": "Brand2"},
    ]

    def _q0():
        _src = date_dim
        _rows = _query(
            _src,
            [
                {
                    "items": store_sales,
                    "on": lambda dt, ss: (
                        (_get(dt, "d_date_sk") == _get(ss, "ss_sold_date_sk"))
                    ),
                },
                {
                    "items": item,
                    "on": lambda dt, ss, i: (
                        (_get(ss, "ss_item_sk") == _get(i, "i_item_sk"))
                    ),
                },
            ],
            {
                "select": lambda dt, ss, i: (dt, ss, i),
                "where": lambda dt, ss, i: (
                    ((_get(i, "i_manufact_id") == 100) and (_get(dt, "d_moy") == 12))
                ),
            },
        )
        _groups = _group_by(
            _rows,
            lambda dt, ss, i: (
                {
                    "d_year": _get(dt, "d_year"),
                    "brand_id": _get(i, "i_brand_id"),
                    "brand": _get(i, "i_brand"),
                }
            ),
        )
        items = _groups
        items = sorted(
            items,
            key=lambda g: _sort_key(
                [
                    _get(_get(g, "key"), "d_year"),
                    (-_sum([_get(x, "ss_ext_sales_price") for x in g])),
                    _get(_get(g, "key"), "brand_id"),
                ]
            ),
        )
        return [
            {
                "d_year": _get(_get(g, "key"), "d_year"),
                "brand_id": _get(_get(g, "key"), "brand_id"),
                "brand": _get(_get(g, "key"), "brand"),
                "sum_agg": _sum([_get(x, "ss_ext_sales_price") for x in g]),
            }
            for g in items
        ]

    global result
    result = _q0()
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q3_result()


if __name__ == "__main__":
    main()
