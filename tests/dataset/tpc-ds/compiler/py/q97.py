# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:51:21Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    customer_sk: object
    item_sk: object

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    store_only: int
    catalog_only: int
    store_and_catalog: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogSale:
    cs_bill_customer_sk: int
    cs_item_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_customer_sk: int
    ss_item_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


@dataclasses.dataclass
class StoreSale:
    ss_customer_sk: int
    ss_item_sk: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogSale:
    cs_bill_customer_sk: int
    cs_item_sk: int

    def __contains__(self, key):
        return hasattr(self, key)


def test_TPCDS_Q97_overlap():
    assert (result["store_only"] == 1 and result["catalog_only"] == 1) and result[
        "store_and_catalog"
    ] == 1


store_sales = [
    StoreSale(ss_customer_sk=1, ss_item_sk=1),
    StoreSale(ss_customer_sk=2, ss_item_sk=1),
]
catalog_sales = [
    CatalogSale(cs_bill_customer_sk=1, cs_item_sk=1),
    CatalogSale(cs_bill_customer_sk=3, cs_item_sk=2),
]


def _q0():
    _groups = {}
    _order = []
    for ss in store_sales:
        _k = Auto1(customer_sk=ss.ss_customer_sk, item_sk=ss.ss_item_sk)
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(ss)
    _items1 = [_groups[k] for k in _order]
    return [
        Auto1(customer_sk=g.key["customer_sk"], item_sk=g.key["item_sk"])
        for g in _items1
    ]


ssci = _q0()


def _q1():
    _groups = {}
    _order = []
    for cs in catalog_sales:
        _k = Auto1(customer_sk=cs.cs_bill_customer_sk, item_sk=cs.cs_item_sk)
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(cs)
    _items1 = [_groups[k] for k in _order]
    return [
        Auto1(customer_sk=g.key["customer_sk"], item_sk=g.key["item_sk"])
        for g in _items1
    ]


csci = _q1()
both = len(
    _query(
        ssci,
        [
            {
                "items": csci,
                "on": lambda s, c: s.customer_sk == c.customer_sk
                and s.item_sk == c.item_sk,
            }
        ],
        {"select": lambda s, c: 1},
    )
)
store_only = len(
    [
        1
        for s in ssci
        if not len(
            [
                c
                for c in csci
                if s.customer_sk == c.customer_sk and s.item_sk == c.item_sk
            ]
        )
        > 0
    ]
)
catalog_only = len(
    [
        1
        for c in csci
        if not len(
            [
                s
                for s in ssci
                if s.customer_sk == c.customer_sk and s.item_sk == c.item_sk
            ]
        )
        > 0
    ]
)
result = Auto2(store_only=store_only, catalog_only=catalog_only, store_and_catalog=both)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q97_overlap()
