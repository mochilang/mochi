# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:49:52Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    c_last_name: str
    c_first_name: str
    s_store_name: str
    paid: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    c_last_name: object
    c_first_name: object
    s_store_name: object
    color: object
    netpaid: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    last: str
    first: str
    store_name: str
    color: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_first_name: str
    c_last_name: str
    c_current_addr_sk: int
    c_birth_country: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerAddres:
    ca_address_sk: int
    ca_state: str
    ca_country: str
    ca_zip: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_color: str
    i_current_price: float
    i_manager_id: int
    i_units: str
    i_size: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_store_name: str
    s_market_id: int
    s_state: str
    s_zip: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreReturn:
    sr_ticket_number: int
    sr_item_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_ticket_number: int
    ss_item_sk: int
    ss_customer_sk: int
    ss_store_sk: int
    ss_net_paid: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, list):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, tuple):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, dict):
        return str(k)
    return k


@dataclasses.dataclass
class StoreSale:
    ss_ticket_number: int
    ss_item_sk: int
    ss_customer_sk: int
    ss_store_sk: int
    ss_net_paid: float

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreReturn:
    sr_ticket_number: int
    sr_item_sk: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_store_name: str
    s_market_id: int
    s_state: str
    s_zip: str

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_color: str
    i_current_price: float
    i_manager_id: int
    i_units: str
    i_size: str

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_first_name: str
    c_last_name: str
    c_current_addr_sk: int
    c_birth_country: str

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerAddress:
    ca_address_sk: int
    ca_state: str
    ca_country: str
    ca_zip: str

    def __contains__(self, key):
        return hasattr(self, key)


def test_TPCDS_Q24_customer_net_paid():
    assert result == [
        Auto1(
            c_last_name="Smith", c_first_name="Ann", s_store_name="Store1", paid=100.0
        )
    ]


store_sales = [
    StoreSale(
        ss_ticket_number=1,
        ss_item_sk=1,
        ss_customer_sk=1,
        ss_store_sk=1,
        ss_net_paid=100.0,
    ),
    StoreSale(
        ss_ticket_number=2,
        ss_item_sk=2,
        ss_customer_sk=2,
        ss_store_sk=1,
        ss_net_paid=50.0,
    ),
]
store_returns = [
    StoreReturn(sr_ticket_number=1, sr_item_sk=1),
    StoreReturn(sr_ticket_number=2, sr_item_sk=2),
]
store = [
    Store(
        s_store_sk=1, s_store_name="Store1", s_market_id=5, s_state="CA", s_zip="12345"
    )
]
item = [
    Item(
        i_item_sk=1,
        i_color="RED",
        i_current_price=10.0,
        i_manager_id=1,
        i_units="EA",
        i_size="M",
    ),
    Item(
        i_item_sk=2,
        i_color="BLUE",
        i_current_price=20.0,
        i_manager_id=2,
        i_units="EA",
        i_size="L",
    ),
]
customer = [
    Customer(
        c_customer_sk=1,
        c_first_name="Ann",
        c_last_name="Smith",
        c_current_addr_sk=1,
        c_birth_country="Canada",
    ),
    Customer(
        c_customer_sk=2,
        c_first_name="Bob",
        c_last_name="Jones",
        c_current_addr_sk=2,
        c_birth_country="USA",
    ),
]
customer_address = [
    CustomerAddres(ca_address_sk=1, ca_state="CA", ca_country="USA", ca_zip="12345"),
    CustomerAddres(ca_address_sk=2, ca_state="CA", ca_country="USA", ca_zip="54321"),
]


def _q0():
    _src = store_sales
    _rows = _query(
        _src,
        [
            {
                "items": store_returns,
                "on": lambda ss, sr: ss.ss_ticket_number == sr.sr_ticket_number
                and ss.ss_item_sk == sr.sr_item_sk,
            },
            {"items": store, "on": lambda ss, sr, s: ss.ss_store_sk == s.s_store_sk},
            {"items": item, "on": lambda ss, sr, s, i: ss.ss_item_sk == i.i_item_sk},
            {
                "items": customer,
                "on": lambda ss, sr, s, i, c: ss.ss_customer_sk == c.c_customer_sk,
            },
            {
                "items": customer_address,
                "on": lambda ss, sr, s, i, c, ca: c.c_current_addr_sk
                == ca.ca_address_sk,
            },
        ],
        {
            "select": lambda ss, sr, s, i, c, ca: (ss, sr, s, i, c, ca),
            "where": lambda ss, sr, s, i, c, ca: (
                c.c_birth_country != ca.ca_country.upper() and s.s_zip == ca.ca_zip
            )
            and s.s_market_id == 5,
        },
    )
    _groups = _group_by(
        _rows,
        lambda ss, sr, s, i, c, ca: Auto3(
            last=c.c_last_name,
            first=c.c_first_name,
            store_name=s.s_store_name,
            color=i.i_color,
        ),
    )
    _items1 = _groups
    return [
        Auto2(
            c_last_name=g.key["last"],
            c_first_name=g.key["first"],
            s_store_name=g.key["store_name"],
            color=g.key["color"],
            netpaid=sum([x[0].ss_net_paid for x in g]),
        )
        for g in _items1
    ]


ssales = _q0()
avg_paid = (
    sum([x.netpaid for x in ssales]) / len([x.netpaid for x in ssales])
    if [x.netpaid for x in ssales]
    else 0
)
result = [
    Auto1(
        c_last_name=x.c_last_name,
        c_first_name=x.c_first_name,
        s_store_name=x.s_store_name,
        paid=x.netpaid,
    )
    for x in sorted(
        [x for x in ssales if x.color == "RED" and x.netpaid > 0.05 * avg_paid],
        key=lambda x: _sort_key([x.c_last_name, x.c_first_name, x.s_store_name]),
    )
]
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q24_customer_net_paid()
