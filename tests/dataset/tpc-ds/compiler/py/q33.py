# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:01Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    i_manufact_id: int
    total_sales: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    manu: int
    price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogSale:
    cs_item_sk: int
    cs_ext_sales_price: float
    cs_sold_date_sk: int
    cs_bill_addr_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerAddres:
    ca_address_sk: int
    ca_gmt_offset: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int
    d_moy: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_manufact_id: int
    i_category: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_item_sk: int
    ss_ext_sales_price: float
    ss_sold_date_sk: int
    ss_addr_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class WebSale:
    ws_item_sk: int
    ws_ext_sales_price: float
    ws_sold_date_sk: int
    ws_bill_addr_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def test_TPCDS_Q33_simplified():
    assert result == [
        Auto1(i_manufact_id=1, total_sales=150.0),
        Auto1(i_manufact_id=2, total_sales=50.0),
    ]


item = [
    Item(i_item_sk=1, i_manufact_id=1, i_category="Books"),
    Item(i_item_sk=2, i_manufact_id=2, i_category="Books"),
]
date_dim = [DateDim(d_date_sk=1, d_year=2000, d_moy=1)]
customer_address = [
    CustomerAddres(ca_address_sk=1, ca_gmt_offset=-5),
    CustomerAddres(ca_address_sk=2, ca_gmt_offset=-5),
]
store_sales = [
    StoreSale(ss_item_sk=1, ss_ext_sales_price=100.0, ss_sold_date_sk=1, ss_addr_sk=1),
    StoreSale(ss_item_sk=2, ss_ext_sales_price=50.0, ss_sold_date_sk=1, ss_addr_sk=2),
]
catalog_sales = [
    CatalogSale(
        cs_item_sk=1, cs_ext_sales_price=20.0, cs_sold_date_sk=1, cs_bill_addr_sk=1
    )
]
web_sales = [
    WebSale(ws_item_sk=1, ws_ext_sales_price=30.0, ws_sold_date_sk=1, ws_bill_addr_sk=1)
]
month = 1
year = 2000
union_sales = (
    _query(
        store_sales,
        [
            {"items": date_dim, "on": lambda ss, d: ss.ss_sold_date_sk == d.d_date_sk},
            {
                "items": customer_address,
                "on": lambda ss, d, ca: ss.ss_addr_sk == ca.ca_address_sk,
            },
            {"items": item, "on": lambda ss, d, ca, i: ss.ss_item_sk == i.i_item_sk},
        ],
        {
            "select": lambda ss, d, ca, i: Auto2(
                manu=i.i_manufact_id, price=ss.ss_ext_sales_price
            ),
            "where": lambda ss, d, ca, i: (
                (i.i_category == "Books" and d.d_year == year) and d.d_moy == month
            )
            and ca.ca_gmt_offset == -5,
        },
    )
    + _query(
        catalog_sales,
        [
            {"items": date_dim, "on": lambda cs, d: cs.cs_sold_date_sk == d.d_date_sk},
            {
                "items": customer_address,
                "on": lambda cs, d, ca: cs.cs_bill_addr_sk == ca.ca_address_sk,
            },
            {"items": item, "on": lambda cs, d, ca, i: cs.cs_item_sk == i.i_item_sk},
        ],
        {
            "select": lambda cs, d, ca, i: Auto2(
                manu=i.i_manufact_id, price=cs.cs_ext_sales_price
            ),
            "where": lambda cs, d, ca, i: (
                (i.i_category == "Books" and d.d_year == year) and d.d_moy == month
            )
            and ca.ca_gmt_offset == -5,
        },
    )
    + _query(
        web_sales,
        [
            {"items": date_dim, "on": lambda ws, d: ws.ws_sold_date_sk == d.d_date_sk},
            {
                "items": customer_address,
                "on": lambda ws, d, ca: ws.ws_bill_addr_sk == ca.ca_address_sk,
            },
            {"items": item, "on": lambda ws, d, ca, i: ws.ws_item_sk == i.i_item_sk},
        ],
        {
            "select": lambda ws, d, ca, i: Auto2(
                manu=i.i_manufact_id, price=ws.ws_ext_sales_price
            ),
            "where": lambda ws, d, ca, i: (
                (i.i_category == "Books" and d.d_year == year) and d.d_moy == month
            )
            and ca.ca_gmt_offset == -5,
        },
    )
)


def _q0():
    _src = union_sales
    _rows = _query(_src, [], {"select": lambda s: s})
    _groups = _group_by(
        _rows, lambda s: s.get("manu") if isinstance(s, dict) else getattr(s, "manu")
    )
    _items1 = _groups
    _items1 = sorted(
        _items1,
        key=lambda g: -_sum(
            [x.get("price") if isinstance(x, dict) else getattr(x, "price") for x in g]
        ),
    )
    return [
        Auto1(
            i_manufact_id=g.key,
            total_sales=_sum(
                [
                    x.get("price") if isinstance(x, dict) else getattr(x, "price")
                    for x in g
                ]
            ),
        )
        for g in _items1
    ]


result = _q0()
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q33_simplified()
