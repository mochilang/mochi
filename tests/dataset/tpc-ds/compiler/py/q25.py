# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:49:53Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    i_item_id: str
    i_item_desc: str
    s_store_id: str
    s_store_name: str
    store_sales_profit: float
    store_returns_loss: float
    catalog_sales_profit: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    item_id: str
    item_desc: str
    s_store_id: str
    s_store_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogSale:
    cs_sold_date_sk: int
    cs_item_sk: int
    cs_bill_customer_sk: int
    cs_net_profit: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_moy: int
    d_year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_item_id: str
    i_item_desc: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_store_id: str
    s_store_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreReturn:
    sr_returned_date_sk: int
    sr_item_sk: int
    sr_customer_sk: int
    sr_ticket_number: int
    sr_net_loss: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_sold_date_sk: int
    ss_item_sk: int
    ss_store_sk: int
    ss_customer_sk: int
    ss_net_profit: float
    ss_ticket_number: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


@dataclasses.dataclass
class StoreSale:
    ss_sold_date_sk: int
    ss_item_sk: int
    ss_store_sk: int
    ss_customer_sk: int
    ss_net_profit: float
    ss_ticket_number: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreReturn:
    sr_returned_date_sk: int
    sr_item_sk: int
    sr_customer_sk: int
    sr_ticket_number: int
    sr_net_loss: float

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogSale:
    cs_sold_date_sk: int
    cs_item_sk: int
    cs_bill_customer_sk: int
    cs_net_profit: float

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_moy: int
    d_year: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_store_id: str
    s_store_name: str

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_item_id: str
    i_item_desc: str

    def __contains__(self, key):
        return hasattr(self, key)


def test_TPCDS_Q25_aggregated_profit():
    assert result == [
        Auto1(
            i_item_id="ITEM1",
            i_item_desc="Desc1",
            s_store_id="S1",
            s_store_name="Store1",
            store_sales_profit=50.0,
            store_returns_loss=10.0,
            catalog_sales_profit=30.0,
        ),
        Auto1(
            i_item_id="ITEM2",
            i_item_desc="Desc2",
            s_store_id="S1",
            s_store_name="Store1",
            store_sales_profit=20.0,
            store_returns_loss=5.0,
            catalog_sales_profit=15.0,
        ),
    ]


store_sales = [
    StoreSale(
        ss_sold_date_sk=1,
        ss_item_sk=1,
        ss_store_sk=1,
        ss_customer_sk=1,
        ss_net_profit=50.0,
        ss_ticket_number=1,
    ),
    StoreSale(
        ss_sold_date_sk=1,
        ss_item_sk=2,
        ss_store_sk=1,
        ss_customer_sk=2,
        ss_net_profit=20.0,
        ss_ticket_number=2,
    ),
]
store_returns = [
    StoreReturn(
        sr_returned_date_sk=2,
        sr_item_sk=1,
        sr_customer_sk=1,
        sr_ticket_number=1,
        sr_net_loss=10.0,
    ),
    StoreReturn(
        sr_returned_date_sk=2,
        sr_item_sk=2,
        sr_customer_sk=2,
        sr_ticket_number=2,
        sr_net_loss=5.0,
    ),
]
catalog_sales = [
    CatalogSale(
        cs_sold_date_sk=3, cs_item_sk=1, cs_bill_customer_sk=1, cs_net_profit=30.0
    ),
    CatalogSale(
        cs_sold_date_sk=3, cs_item_sk=2, cs_bill_customer_sk=2, cs_net_profit=15.0
    ),
]
date_dim = [
    DateDim(d_date_sk=1, d_moy=4, d_year=2000),
    DateDim(d_date_sk=2, d_moy=5, d_year=2000),
    DateDim(d_date_sk=3, d_moy=6, d_year=2000),
]
store = [Store(s_store_sk=1, s_store_id="S1", s_store_name="Store1")]
item = [
    Item(i_item_sk=1, i_item_id="ITEM1", i_item_desc="Desc1"),
    Item(i_item_sk=2, i_item_id="ITEM2", i_item_desc="Desc2"),
]


def _q0():
    _src = store_sales
    _rows = _query(
        _src,
        [
            {
                "items": store_returns,
                "on": lambda ss, sr: ss.ss_ticket_number == sr.sr_ticket_number
                and ss.ss_item_sk == sr.sr_item_sk,
            },
            {
                "items": catalog_sales,
                "on": lambda ss, sr, cs: sr.sr_customer_sk == cs.cs_bill_customer_sk
                and sr.sr_item_sk == cs.cs_item_sk,
            },
            {
                "items": date_dim,
                "on": lambda ss, sr, cs, d1: d1.d_date_sk == ss.ss_sold_date_sk,
            },
            {
                "items": date_dim,
                "on": lambda ss, sr, cs, d1, d2: d2.d_date_sk == sr.sr_returned_date_sk,
            },
            {
                "items": date_dim,
                "on": lambda ss, sr, cs, d1, d2, d3: d3.d_date_sk == cs.cs_sold_date_sk,
            },
            {
                "items": store,
                "on": lambda ss, sr, cs, d1, d2, d3, s: s.s_store_sk == ss.ss_store_sk,
            },
            {
                "items": item,
                "on": lambda ss, sr, cs, d1, d2, d3, s, i: i.i_item_sk == ss.ss_item_sk,
            },
        ],
        {
            "select": lambda ss, sr, cs, d1, d2, d3, s, i: (
                ss,
                sr,
                cs,
                d1,
                d2,
                d3,
                s,
                i,
            ),
            "where": lambda ss, sr, cs, d1, d2, d3, s, i: (
                (
                    ((d1.d_moy == 4 and d1.d_year == 2000) and d2.d_moy >= 4)
                    and d2.d_moy <= 10
                )
                and d3.d_moy >= 4
            )
            and d3.d_moy <= 10,
        },
    )
    _groups = _group_by(
        _rows,
        lambda ss, sr, cs, d1, d2, d3, s, i: Auto2(
            item_id=i.i_item_id,
            item_desc=i.i_item_desc,
            s_store_id=s.s_store_id,
            s_store_name=s.s_store_name,
        ),
    )
    _items1 = _groups
    return [
        Auto1(
            i_item_id=g.key["item_id"],
            i_item_desc=g.key["item_desc"],
            s_store_id=g.key["s_store_id"],
            s_store_name=g.key["s_store_name"],
            store_sales_profit=sum([x[0].ss_net_profit for x in g]),
            store_returns_loss=_sum([x[1].sr_net_loss for x in g]),
            catalog_sales_profit=_sum([x[2].cs_net_profit for x in g]),
        )
        for g in _items1
    ]


result = _q0()
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q25_aggregated_profit()
