# Generated by Mochi Python compiler
from __future__ import annotations

import json


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


def _union_all(a, b):
    return list(a) + list(b)


web = None
catalog = None
store = None
tmp = None
result = None


def test_TPCDS_Q49_simplified():
    assert result == [
        {
            "channel": "catalog",
            "item": "A",
            "return_ratio": 0.3,
            "return_rank": 1,
            "currency_rank": 1,
        },
        {
            "channel": "store",
            "item": "A",
            "return_ratio": 0.25,
            "return_rank": 1,
            "currency_rank": 1,
        },
        {
            "channel": "web",
            "item": "A",
            "return_ratio": 0.2,
            "return_rank": 1,
            "currency_rank": 1,
        },
        {
            "channel": "web",
            "item": "B",
            "return_ratio": 0.5,
            "return_rank": 2,
            "currency_rank": 2,
        },
    ]


def main():
    global web
    web = [
        {
            "item": "A",
            "return_ratio": 0.2,
            "currency_ratio": 0.3,
            "return_rank": 1,
            "currency_rank": 1,
        },
        {
            "item": "B",
            "return_ratio": 0.5,
            "currency_ratio": 0.6,
            "return_rank": 2,
            "currency_rank": 2,
        },
    ]
    global catalog
    catalog = [
        {
            "item": "A",
            "return_ratio": 0.3,
            "currency_ratio": 0.4,
            "return_rank": 1,
            "currency_rank": 1,
        }
    ]
    global store
    store = [
        {
            "item": "A",
            "return_ratio": 0.25,
            "currency_ratio": 0.35,
            "return_rank": 1,
            "currency_rank": 1,
        }
    ]
    global tmp
    tmp = _union_all(
        _union_all(
            [
                {
                    "channel": "web",
                    "item": _get(w, "item"),
                    "return_ratio": _get(w, "return_ratio"),
                    "return_rank": _get(w, "return_rank"),
                    "currency_rank": _get(w, "currency_rank"),
                }
                for w in web
                if ((_get(w, "return_rank") <= 10) or (_get(w, "currency_rank") <= 10))
            ],
            [
                {
                    "channel": "catalog",
                    "item": _get(c, "item"),
                    "return_ratio": _get(c, "return_ratio"),
                    "return_rank": _get(c, "return_rank"),
                    "currency_rank": _get(c, "currency_rank"),
                }
                for c in catalog
                if ((_get(c, "return_rank") <= 10) or (_get(c, "currency_rank") <= 10))
            ],
        ),
        [
            {
                "channel": "store",
                "item": _get(s, "item"),
                "return_ratio": _get(s, "return_ratio"),
                "return_rank": _get(s, "return_rank"),
                "currency_rank": _get(s, "currency_rank"),
            }
            for s in store
            if ((_get(s, "return_rank") <= 10) or (_get(s, "currency_rank") <= 10))
        ],
    )
    global result
    result = [
        r
        for r in sorted(
            [r for r in tmp],
            key=lambda r: _sort_key(
                [
                    _get(r, "channel"),
                    _get(r, "return_rank"),
                    _get(r, "currency_rank"),
                    _get(r, "item"),
                ]
            ),
        )
    ]
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q49_simplified()


if __name__ == "__main__":
    main()
