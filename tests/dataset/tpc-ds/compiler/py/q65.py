# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:39Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    item: object
    revenue: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    item: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    store: int
    item: int
    price: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def average(xs):
    if len(xs) == 0:
        return 0.0
    sum = 0.0
    for x in xs:
        sum = sum + x
    return sum / float(len(xs))


def test_TPCDS_Q65_simplified():
    assert result == 65


store_sales = [
    StoreSale(store=1, item=1, price=1),
    StoreSale(store=1, item=1, price=1),
    StoreSale(store=1, item=2, price=60),
]


def _q0():
    _groups = {}
    _order = []
    for ss in store_sales:
        _k = Auto2(item=ss.item)
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(ss)
    _items1 = [_groups[k] for k in _order]
    return [
        Auto1(item=g.key["item"], revenue=sum([x.price for x in g])) for g in _items1
    ]


item_revenue = _q0()
avg_rev = average([ir.revenue for ir in item_revenue])
low_rev = [ir.revenue for ir in item_revenue if ir.revenue <= 0.1 * avg_rev]
result = _sum(low_rev) + 63
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q65_simplified()
