# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing


def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, "Items"):
        return len(v.Items)
    raise Exception("count() expects list or group")


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _slice(obj, i, j):
    start = i
    end = j
    n = len(obj)
    if start < 0:
        start += n
    if end < 0:
        end += n
    if start < 0:
        start = 0
    if end > n:
        end = n
    if end < start:
        end = start
    return obj[start:end]


@dataclasses.dataclass
class CatalogSale:
    cs_ship_date_sk: int
    cs_sold_date_sk: int
    cs_warehouse_sk: int
    cs_ship_mode_sk: int
    cs_call_center_sk: int


@dataclasses.dataclass
class Warehouse:
    w_warehouse_sk: int
    w_warehouse_name: str


@dataclasses.dataclass
class ShipMode:
    sm_ship_mode_sk: int
    sm_type: str


@dataclasses.dataclass
class CallCenter:
    cc_call_center_sk: int
    cc_name: str


catalog_sales = None
warehouse = None
ship_mode = None
call_center = None
grouped = None


def test_TPCDS_Q99_buckets():
    assert grouped == [
        {
            "warehouse": "Warehouse1",
            "sm_type": "EXP",
            "cc_name": "CC1",
            "d30": 1,
            "d60": 1,
            "d90": 1,
            "d120": 1,
            "dmore": 1,
        }
    ]


def main():
    global catalog_sales
    catalog_sales = [
        {
            "cs_ship_date_sk": 31,
            "cs_sold_date_sk": 1,
            "cs_warehouse_sk": 1,
            "cs_ship_mode_sk": 1,
            "cs_call_center_sk": 1,
        },
        {
            "cs_ship_date_sk": 51,
            "cs_sold_date_sk": 1,
            "cs_warehouse_sk": 1,
            "cs_ship_mode_sk": 1,
            "cs_call_center_sk": 1,
        },
        {
            "cs_ship_date_sk": 71,
            "cs_sold_date_sk": 1,
            "cs_warehouse_sk": 1,
            "cs_ship_mode_sk": 1,
            "cs_call_center_sk": 1,
        },
        {
            "cs_ship_date_sk": 101,
            "cs_sold_date_sk": 1,
            "cs_warehouse_sk": 1,
            "cs_ship_mode_sk": 1,
            "cs_call_center_sk": 1,
        },
        {
            "cs_ship_date_sk": 131,
            "cs_sold_date_sk": 1,
            "cs_warehouse_sk": 1,
            "cs_ship_mode_sk": 1,
            "cs_call_center_sk": 1,
        },
    ]
    global warehouse
    warehouse = [{"w_warehouse_sk": 1, "w_warehouse_name": "Warehouse1"}]
    global ship_mode
    ship_mode = [{"sm_ship_mode_sk": 1, "sm_type": "EXP"}]
    global call_center
    call_center = [{"cc_call_center_sk": 1, "cc_name": "CC1"}]

    def _q0():
        _src = catalog_sales
        _rows = _query(
            _src,
            [
                {
                    "items": warehouse,
                    "on": lambda cs, w: (
                        (_get(cs, "cs_warehouse_sk") == _get(w, "w_warehouse_sk"))
                    ),
                },
                {
                    "items": ship_mode,
                    "on": lambda cs, w, sm: (
                        (_get(cs, "cs_ship_mode_sk") == _get(sm, "sm_ship_mode_sk"))
                    ),
                },
                {
                    "items": call_center,
                    "on": lambda cs, w, sm, cc: (
                        (_get(cs, "cs_call_center_sk") == _get(cc, "cc_call_center_sk"))
                    ),
                },
            ],
            {"select": lambda cs, w, sm, cc: (cs, w, sm, cc)},
        )
        _groups = _group_by(
            _rows,
            lambda cs, w, sm, cc: (
                {
                    "warehouse": _slice(_get(w, "w_warehouse_name"), 0, 20),
                    "sm_type": _get(sm, "sm_type"),
                    "cc_name": _get(cc, "cc_name"),
                }
            ),
        )
        items = _groups
        return [
            {
                "warehouse": _get(_get(g, "key"), "warehouse"),
                "sm_type": _get(_get(g, "key"), "sm_type"),
                "cc_name": _get(_get(g, "key"), "cc_name"),
                "d30": _count(
                    [
                        x
                        for x in g
                        if (
                            (_get(x, "cs_ship_date_sk") - _get(x, "cs_sold_date_sk"))
                            <= 30
                        )
                    ]
                ),
                "d60": _count(
                    [
                        x
                        for x in g
                        if (
                            (
                                (
                                    _get(x, "cs_ship_date_sk")
                                    - _get(x, "cs_sold_date_sk")
                                )
                                > 30
                            )
                            and (
                                (
                                    _get(x, "cs_ship_date_sk")
                                    - _get(x, "cs_sold_date_sk")
                                )
                                <= 60
                            )
                        )
                    ]
                ),
                "d90": _count(
                    [
                        x
                        for x in g
                        if (
                            (
                                (
                                    _get(x, "cs_ship_date_sk")
                                    - _get(x, "cs_sold_date_sk")
                                )
                                > 60
                            )
                            and (
                                (
                                    _get(x, "cs_ship_date_sk")
                                    - _get(x, "cs_sold_date_sk")
                                )
                                <= 90
                            )
                        )
                    ]
                ),
                "d120": _count(
                    [
                        x
                        for x in g
                        if (
                            (
                                (
                                    _get(x, "cs_ship_date_sk")
                                    - _get(x, "cs_sold_date_sk")
                                )
                                > 90
                            )
                            and (
                                (
                                    _get(x, "cs_ship_date_sk")
                                    - _get(x, "cs_sold_date_sk")
                                )
                                <= 120
                            )
                        )
                    ]
                ),
                "dmore": _count(
                    [
                        x
                        for x in g
                        if (
                            (_get(x, "cs_ship_date_sk") - _get(x, "cs_sold_date_sk"))
                            > 120
                        )
                    ]
                ),
            }
            for g in items
        ]

    global grouped
    grouped = _q0()
    print(json.dumps(grouped, default=lambda o: vars(o)))
    test_TPCDS_Q99_buckets()


if __name__ == "__main__":
    main()
