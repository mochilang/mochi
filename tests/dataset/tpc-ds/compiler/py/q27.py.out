# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing


def _avg(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("avg() expects list or group")
    if not v:
        return 0
    s = 0.0
    for it in v:
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("avg() expects numbers")
    return s / len(v)


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


@dataclasses.dataclass
class StoreSale:
    ss_item_sk: int
    ss_store_sk: int
    ss_cdemo_sk: int
    ss_sold_date_sk: int
    ss_quantity: int
    ss_list_price: float
    ss_coupon_amt: float
    ss_sales_price: float


@dataclasses.dataclass
class CustomerDemo:
    cd_demo_sk: int
    cd_gender: str
    cd_marital_status: str
    cd_education_status: str


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_state: str


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_item_id: str


store_sales = None
customer_demographics = None
date_dim = None
store = None
item = None
result = None


def test_TPCDS_Q27_averages_by_state():
    assert result == [
        {
            "i_item_id": "ITEM1",
            "s_state": "CA",
            "agg1": 5,
            "agg2": 100,
            "agg3": 10,
            "agg4": 90,
        }
    ]


def main():
    global store_sales
    store_sales = [
        {
            "ss_item_sk": 1,
            "ss_store_sk": 1,
            "ss_cdemo_sk": 1,
            "ss_sold_date_sk": 1,
            "ss_quantity": 5,
            "ss_list_price": 100,
            "ss_coupon_amt": 10,
            "ss_sales_price": 90,
        },
        {
            "ss_item_sk": 2,
            "ss_store_sk": 2,
            "ss_cdemo_sk": 2,
            "ss_sold_date_sk": 1,
            "ss_quantity": 2,
            "ss_list_price": 50,
            "ss_coupon_amt": 5,
            "ss_sales_price": 45,
        },
    ]
    global customer_demographics
    customer_demographics = [
        {
            "cd_demo_sk": 1,
            "cd_gender": "F",
            "cd_marital_status": "M",
            "cd_education_status": "College",
        },
        {
            "cd_demo_sk": 2,
            "cd_gender": "M",
            "cd_marital_status": "S",
            "cd_education_status": "College",
        },
    ]
    global date_dim
    date_dim = [{"d_date_sk": 1, "d_year": 2000}]
    global store
    store = [{"s_store_sk": 1, "s_state": "CA"}, {"s_store_sk": 2, "s_state": "TX"}]
    global item
    item = [
        {"i_item_sk": 1, "i_item_id": "ITEM1"},
        {"i_item_sk": 2, "i_item_id": "ITEM2"},
    ]

    def _q0():
        _src = store_sales
        _rows = _query(
            _src,
            [
                {
                    "items": customer_demographics,
                    "on": lambda ss, cd: (
                        (_get(ss, "ss_cdemo_sk") == _get(cd, "cd_demo_sk"))
                    ),
                },
                {
                    "items": date_dim,
                    "on": lambda ss, cd, d: (
                        (_get(ss, "ss_sold_date_sk") == _get(d, "d_date_sk"))
                    ),
                },
                {
                    "items": store,
                    "on": lambda ss, cd, d, s: (
                        (_get(ss, "ss_store_sk") == _get(s, "s_store_sk"))
                    ),
                },
                {
                    "items": item,
                    "on": lambda ss, cd, d, s, i: (
                        (_get(ss, "ss_item_sk") == _get(i, "i_item_sk"))
                    ),
                },
            ],
            {
                "select": lambda ss, cd, d, s, i: (ss, cd, d, s, i),
                "where": lambda ss, cd, d, s, i: (
                    (
                        (
                            (
                                (
                                    (_get(cd, "cd_gender") == "F")
                                    and (_get(cd, "cd_marital_status") == "M")
                                )
                                and (_get(cd, "cd_education_status") == "College")
                            )
                            and (_get(d, "d_year") == 2000)
                        )
                        and (_get(s, "s_state") in ["CA"])
                    )
                ),
            },
        )
        _groups = _group_by(
            _rows,
            lambda ss, cd, d, s, i: (
                {"item_id": _get(i, "i_item_id"), "state": _get(s, "s_state")}
            ),
        )
        items = _groups
        items = sorted(
            items,
            key=lambda g: _sort_key(
                [_get(_get(g, "key"), "item_id"), _get(_get(g, "key"), "state")]
            ),
        )
        return [
            {
                "i_item_id": _get(_get(g, "key"), "item_id"),
                "s_state": _get(_get(g, "key"), "state"),
                "agg1": _avg([_get(x, "ss_quantity") for x in g]),
                "agg2": _avg([_get(x, "ss_list_price") for x in g]),
                "agg3": _avg([_get(x, "ss_coupon_amt") for x in g]),
                "agg4": _avg([_get(x, "ss_sales_price") for x in g]),
            }
            for g in items
        ]

    global result
    result = _q0()
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q27_averages_by_state()


if __name__ == "__main__":
    main()
