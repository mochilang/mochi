# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing


def _append(lst, v):
    out = list(lst) if lst is not None else []
    out.append(v)
    return out


def _contains(c, v):
    if isinstance(c, list):
        return v in c
    if isinstance(c, str):
        return str(v) in c
    if isinstance(c, dict):
        return str(v) in c
    return False


def _exists(v):
    if hasattr(v, "Items"):
        v = v.Items
    if isinstance(v, (list, dict, str)):
        return len(v) > 0
    raise Exception("exists expects list, map or string")


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def distinct(xs: list[typing.Any]) -> list[typing.Any]:
    out = []
    for x in xs:
        if not _contains(out, x):
            out = _append(out, x)
    return out


@dataclasses.dataclass
class CatalogSale:
    cs_order_number: int
    cs_ship_date_sk: int
    cs_ship_addr_sk: int
    cs_call_center_sk: int
    cs_warehouse_sk: int
    cs_ext_ship_cost: float
    cs_net_profit: float


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_date: str


@dataclasses.dataclass
class CustomerAddress:
    ca_address_sk: int
    ca_state: str


@dataclasses.dataclass
class CallCenter:
    cc_call_center_sk: int
    cc_county: str


@dataclasses.dataclass
class CatalogReturn:
    cr_order_number: int


catalog_sales = None
date_dim = None
customer_address = None
call_center = None
catalog_returns = []
filtered = None


def test_TPCDS_Q16_shipping():
    assert filtered == [
        {"order_count": 1, "total_shipping_cost": 5, "total_net_profit": 20}
    ]


def main():
    global catalog_sales
    catalog_sales = [
        {
            "cs_order_number": 1,
            "cs_ship_date_sk": 1,
            "cs_ship_addr_sk": 1,
            "cs_call_center_sk": 1,
            "cs_warehouse_sk": 1,
            "cs_ext_ship_cost": 5,
            "cs_net_profit": 20,
        },
        {
            "cs_order_number": 1,
            "cs_ship_date_sk": 1,
            "cs_ship_addr_sk": 1,
            "cs_call_center_sk": 1,
            "cs_warehouse_sk": 2,
            "cs_ext_ship_cost": 0,
            "cs_net_profit": 0,
        },
    ]
    global date_dim
    date_dim = [{"d_date_sk": 1, "d_date": "2000-03-01"}]
    global customer_address
    customer_address = [{"ca_address_sk": 1, "ca_state": "CA"}]
    global call_center
    call_center = [{"cc_call_center_sk": 1, "cc_county": "CountyA"}]
    global catalog_returns
    catalog_returns = []

    def _q0():
        _src = catalog_sales
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda cs1, d: (
                        (
                            (
                                (_get(cs1, "cs_ship_date_sk") == _get(d, "d_date_sk"))
                                and (_get(d, "d_date") >= "2000-03-01")
                            )
                            and (_get(d, "d_date") <= "2000-04-30")
                        )
                    ),
                },
                {
                    "items": customer_address,
                    "on": lambda cs1, d, ca: (
                        (
                            (_get(cs1, "cs_ship_addr_sk") == _get(ca, "ca_address_sk"))
                            and (_get(ca, "ca_state") == "CA")
                        )
                    ),
                },
                {
                    "items": call_center,
                    "on": lambda cs1, d, ca, cc: (
                        (
                            (
                                _get(cs1, "cs_call_center_sk")
                                == _get(cc, "cc_call_center_sk")
                            )
                            and (_get(cc, "cc_county") == "CountyA")
                        )
                    ),
                },
            ],
            {
                "select": lambda cs1, d, ca, cc: (cs1, d, ca, cc),
                "where": lambda cs1, d, ca, cc: (
                    (
                        _exists(
                            [
                                cs2
                                for cs2 in catalog_sales
                                if (
                                    (
                                        _get(cs1, "cs_order_number")
                                        == _get(cs2, "cs_order_number")
                                    )
                                    and (
                                        _get(cs1, "cs_warehouse_sk")
                                        != _get(cs2, "cs_warehouse_sk")
                                    )
                                )
                            ]
                        )
                        and (
                            _exists(
                                [
                                    cr
                                    for cr in catalog_returns
                                    if (
                                        _get(cs1, "cs_order_number")
                                        == _get(cr, "cr_order_number")
                                    )
                                ]
                            )
                            == False
                        )
                    )
                ),
            },
        )
        _groups = _group_by(_rows, lambda cs1, d, ca, cc: ({}))
        items = _groups
        return [
            {
                "order_count": len(distinct([_get(x, "cs_order_number") for x in g])),
                "total_shipping_cost": _sum([_get(x, "cs_ext_ship_cost") for x in g]),
                "total_net_profit": _sum([_get(x, "cs_net_profit") for x in g]),
            }
            for g in items
        ]

    global filtered
    filtered = _q0()
    print(json.dumps(filtered, default=lambda o: vars(o)))
    test_TPCDS_Q16_shipping()


if __name__ == "__main__":
    main()
