# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:49:45Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    i_item_id: str
    i_item_desc: str
    s_state: str
    store_sales_quantitycount: int
    store_sales_quantityave: float
    store_sales_quantitystdev: float
    store_sales_quantitycov: float
    store_returns_quantitycount: int
    store_returns_quantityave: float
    store_returns_quantitystdev: float
    store_returns_quantitycov: float
    catalog_sales_quantitycount: int
    catalog_sales_quantityave: float
    catalog_sales_quantitystdev: float
    catalog_sales_quantitycov: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    qty: int
    ret: int
    csq: int
    i_item_id: str
    i_item_desc: str
    s_state: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    i_item_id: str
    i_item_desc: str
    s_state: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogSale:
    cs_sold_date_sk: int
    cs_item_sk: int
    cs_bill_customer_sk: int
    cs_quantity: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_quarter_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_item_id: str
    i_item_desc: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_state: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreReturn:
    sr_returned_date_sk: int
    sr_customer_sk: int
    sr_item_sk: int
    sr_ticket_number: int
    sr_return_quantity: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_sold_date_sk: int
    ss_item_sk: int
    ss_customer_sk: int
    ss_ticket_number: int
    ss_quantity: int
    ss_store_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


@dataclasses.dataclass
class StoreSale:
    ss_sold_date_sk: int
    ss_item_sk: int
    ss_customer_sk: int
    ss_ticket_number: int
    ss_quantity: int
    ss_store_sk: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreReturn:
    sr_returned_date_sk: int
    sr_customer_sk: int
    sr_item_sk: int
    sr_ticket_number: int
    sr_return_quantity: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogSale:
    cs_sold_date_sk: int
    cs_item_sk: int
    cs_bill_customer_sk: int
    cs_quantity: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_quarter_name: str

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_state: str

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_item_id: str
    i_item_desc: str

    def __contains__(self, key):
        return hasattr(self, key)


def test_TPCDS_Q17_stats():
    assert result == [
        Auto1(
            i_item_id="I1",
            i_item_desc="Item 1",
            s_state="CA",
            store_sales_quantitycount=1,
            store_sales_quantityave=10.0,
            store_sales_quantitystdev=0.0,
            store_sales_quantitycov=0.0,
            store_returns_quantitycount=1,
            store_returns_quantityave=2.0,
            store_returns_quantitystdev=0.0,
            store_returns_quantitycov=0.0,
            catalog_sales_quantitycount=1,
            catalog_sales_quantityave=5.0,
            catalog_sales_quantitystdev=0.0,
            catalog_sales_quantitycov=0.0,
        )
    ]


store_sales = [
    StoreSale(
        ss_sold_date_sk=1,
        ss_item_sk=1,
        ss_customer_sk=1,
        ss_ticket_number=1,
        ss_quantity=10,
        ss_store_sk=1,
    )
]
store_returns = [
    StoreReturn(
        sr_returned_date_sk=2,
        sr_customer_sk=1,
        sr_item_sk=1,
        sr_ticket_number=1,
        sr_return_quantity=2,
    )
]
catalog_sales = [
    CatalogSale(cs_sold_date_sk=3, cs_item_sk=1, cs_bill_customer_sk=1, cs_quantity=5)
]
date_dim = [
    DateDim(d_date_sk=1, d_quarter_name="1998Q1"),
    DateDim(d_date_sk=2, d_quarter_name="1998Q2"),
    DateDim(d_date_sk=3, d_quarter_name="1998Q3"),
]
store = [Store(s_store_sk=1, s_state="CA")]
item = [Item(i_item_sk=1, i_item_id="I1", i_item_desc="Item 1")]
joined = _query(
    store_sales,
    [
        {
            "items": store_returns,
            "on": lambda ss, sr: (
                ss.ss_customer_sk == sr.sr_customer_sk
                and ss.ss_item_sk == sr.sr_item_sk
            )
            and ss.ss_ticket_number == sr.sr_ticket_number,
        },
        {
            "items": catalog_sales,
            "on": lambda ss, sr, cs: sr.sr_customer_sk == cs.cs_bill_customer_sk
            and sr.sr_item_sk == cs.cs_item_sk,
        },
        {
            "items": date_dim,
            "on": lambda ss, sr, cs, d1: ss.ss_sold_date_sk == d1.d_date_sk
            and d1.d_quarter_name == "1998Q1",
        },
        {
            "items": date_dim,
            "on": lambda ss, sr, cs, d1, d2: sr.sr_returned_date_sk == d2.d_date_sk
            and d2.d_quarter_name in ["1998Q1", "1998Q2", "1998Q3"],
        },
        {
            "items": date_dim,
            "on": lambda ss, sr, cs, d1, d2, d3: cs.cs_sold_date_sk == d3.d_date_sk
            and d3.d_quarter_name in ["1998Q1", "1998Q2", "1998Q3"],
        },
        {
            "items": store,
            "on": lambda ss, sr, cs, d1, d2, d3, s: ss.ss_store_sk == s.s_store_sk,
        },
        {
            "items": item,
            "on": lambda ss, sr, cs, d1, d2, d3, s, i: ss.ss_item_sk == i.i_item_sk,
        },
    ],
    {
        "select": lambda ss, sr, cs, d1, d2, d3, s, i: Auto2(
            qty=ss.ss_quantity,
            ret=sr.sr_return_quantity,
            csq=cs.cs_quantity,
            i_item_id=i.i_item_id,
            i_item_desc=i.i_item_desc,
            s_state=s.s_state,
        )
    },
)


def _q0():
    _groups = {}
    _order = []
    for j in joined:
        _k = Auto3(i_item_id=j.i_item_id, i_item_desc=j.i_item_desc, s_state=j.s_state)
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(j)
    _items1 = [_groups[k] for k in _order]
    return [
        Auto1(
            i_item_id=g.key["i_item_id"],
            i_item_desc=g.key["i_item_desc"],
            s_state=g.key["s_state"],
            store_sales_quantitycount=len([_ for _ in g]),
            store_sales_quantityave=(
                sum([x.qty for x in g]) / len([x.qty for x in g])
                if [x.qty for x in g]
                else 0
            ),
            store_sales_quantitystdev=0.0,
            store_sales_quantitycov=0.0,
            store_returns_quantitycount=len([_ for _ in g]),
            store_returns_quantityave=(
                sum([x.ret for x in g]) / len([x.ret for x in g])
                if [x.ret for x in g]
                else 0
            ),
            store_returns_quantitystdev=0.0,
            store_returns_quantitycov=0.0,
            catalog_sales_quantitycount=len([_ for _ in g]),
            catalog_sales_quantityave=(
                sum([x.csq for x in g]) / len([x.csq for x in g])
                if [x.csq for x in g]
                else 0
            ),
            catalog_sales_quantitystdev=0.0,
            catalog_sales_quantitycov=0.0,
        )
        for g in _items1
    ]


result = _q0()
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q17_stats()
