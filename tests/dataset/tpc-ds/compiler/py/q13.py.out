# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing


def _avg(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("avg() expects list or group")
    if not v:
        return 0
    s = 0.0
    for it in v:
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("avg() expects numbers")
    return s / len(v)


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


@dataclasses.dataclass
class StoreSale:
    ss_store_sk: int
    ss_sold_date_sk: int
    ss_hdemo_sk: int
    ss_cdemo_sk: int
    ss_addr_sk: int
    ss_sales_price: float
    ss_net_profit: float
    ss_quantity: int
    ss_ext_sales_price: float
    ss_ext_wholesale_cost: float


@dataclasses.dataclass
class Store:
    s_store_sk: int
    s_state: str


@dataclasses.dataclass
class CustomerDemographics:
    cd_demo_sk: int
    cd_marital_status: str
    cd_education_status: str


@dataclasses.dataclass
class HouseholdDemographics:
    hd_demo_sk: int
    hd_dep_count: int


@dataclasses.dataclass
class CustomerAddress:
    ca_address_sk: int
    ca_country: str
    ca_state: str


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int


store_sales = None
store = None
customer_demographics = None
household_demographics = None
customer_address = None
date_dim = None
filtered = None
result = None


def test_TPCDS_Q13_averages():
    assert result == [
        {
            "avg_ss_quantity": 10,
            "avg_ss_ext_sales_price": 100,
            "avg_ss_ext_wholesale_cost": 50,
            "sum_ss_ext_wholesale_cost": 50,
        }
    ]


def main():
    global store_sales
    store_sales = [
        {
            "ss_store_sk": 1,
            "ss_sold_date_sk": 1,
            "ss_hdemo_sk": 1,
            "ss_cdemo_sk": 1,
            "ss_addr_sk": 1,
            "ss_sales_price": 120,
            "ss_net_profit": 150,
            "ss_quantity": 10,
            "ss_ext_sales_price": 100,
            "ss_ext_wholesale_cost": 50,
        }
    ]
    global store
    store = [{"s_store_sk": 1, "s_state": "CA"}]
    global customer_demographics
    customer_demographics = [
        {"cd_demo_sk": 1, "cd_marital_status": "M1", "cd_education_status": "ES1"}
    ]
    global household_demographics
    household_demographics = [{"hd_demo_sk": 1, "hd_dep_count": 3}]
    global customer_address
    customer_address = [
        {"ca_address_sk": 1, "ca_country": "United States", "ca_state": "CA"}
    ]
    global date_dim
    date_dim = [{"d_date_sk": 1, "d_year": 2001}]
    global filtered
    filtered = _query(
        store_sales,
        [
            {
                "items": store,
                "on": lambda ss, s: (
                    (_get(ss, "ss_store_sk") == _get(s, "s_store_sk"))
                ),
            },
            {
                "items": customer_demographics,
                "on": lambda ss, s, cd: (
                    (
                        (
                            (_get(ss, "ss_cdemo_sk") == _get(cd, "cd_demo_sk"))
                            and (_get(cd, "cd_marital_status") == "M1")
                        )
                        and (_get(cd, "cd_education_status") == "ES1")
                    )
                ),
            },
            {
                "items": household_demographics,
                "on": lambda ss, s, cd, hd: (
                    (
                        (_get(ss, "ss_hdemo_sk") == _get(hd, "hd_demo_sk"))
                        and (_get(hd, "hd_dep_count") == 3)
                    )
                ),
            },
            {
                "items": customer_address,
                "on": lambda ss, s, cd, hd, ca: (
                    (
                        (
                            (_get(ss, "ss_addr_sk") == _get(ca, "ca_address_sk"))
                            and (_get(ca, "ca_country") == "United States")
                        )
                        and (_get(ca, "ca_state") == "CA")
                    )
                ),
            },
            {
                "items": date_dim,
                "on": lambda ss, s, cd, hd, ca, d: (
                    (
                        (_get(ss, "ss_sold_date_sk") == _get(d, "d_date_sk"))
                        and (_get(d, "d_year") == 2001)
                    )
                ),
            },
        ],
        {"select": lambda ss, s, cd, hd, ca, d: ss},
    )

    def _q0():
        _src = filtered
        _rows = _query(_src, [], {"select": lambda r: (r)})
        _groups = _group_by(_rows, lambda r: ({}))
        items = _groups
        return [
            {
                "avg_ss_quantity": _avg([_get(x, "ss_quantity") for x in g]),
                "avg_ss_ext_sales_price": _avg(
                    [_get(x, "ss_ext_sales_price") for x in g]
                ),
                "avg_ss_ext_wholesale_cost": _avg(
                    [_get(x, "ss_ext_wholesale_cost") for x in g]
                ),
                "sum_ss_ext_wholesale_cost": _sum(
                    [_get(x, "ss_ext_wholesale_cost") for x in g]
                ),
            }
            for g in items
        ]

    global result
    result = _q0()
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q13_averages()


if __name__ == "__main__":
    main()
