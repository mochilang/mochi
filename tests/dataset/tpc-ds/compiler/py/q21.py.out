# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


@dataclasses.dataclass
class Inventory:
    inv_item_sk: int
    inv_warehouse_sk: int
    inv_date_sk: int
    inv_quantity_on_hand: int


@dataclasses.dataclass
class Warehouse:
    w_warehouse_sk: int
    w_warehouse_name: str


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_item_id: str


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_date: str


inventory = None
warehouse = None
item = None
date_dim = None
before = None
after = None
joined = None
result = None


def test_TPCDS_Q21_inventory_ratio():
    assert result == [
        {
            "w_warehouse_name": "Main",
            "i_item_id": "ITEM1",
            "inv_before": 30,
            "inv_after": 40,
        }
    ]


def main():
    global inventory
    inventory = [
        {
            "inv_item_sk": 1,
            "inv_warehouse_sk": 1,
            "inv_date_sk": 1,
            "inv_quantity_on_hand": 30,
        },
        {
            "inv_item_sk": 1,
            "inv_warehouse_sk": 1,
            "inv_date_sk": 2,
            "inv_quantity_on_hand": 40,
        },
        {
            "inv_item_sk": 2,
            "inv_warehouse_sk": 2,
            "inv_date_sk": 1,
            "inv_quantity_on_hand": 20,
        },
        {
            "inv_item_sk": 2,
            "inv_warehouse_sk": 2,
            "inv_date_sk": 2,
            "inv_quantity_on_hand": 20,
        },
    ]
    global warehouse
    warehouse = [
        {"w_warehouse_sk": 1, "w_warehouse_name": "Main"},
        {"w_warehouse_sk": 2, "w_warehouse_name": "Backup"},
    ]
    global item
    item = [
        {"i_item_sk": 1, "i_item_id": "ITEM1"},
        {"i_item_sk": 2, "i_item_id": "ITEM2"},
    ]
    global date_dim
    date_dim = [
        {"d_date_sk": 1, "d_date": "2000-03-01"},
        {"d_date_sk": 2, "d_date": "2000-03-20"},
    ]

    def _q0():
        _src = inventory
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda inv, d: (
                        (_get(inv, "inv_date_sk") == _get(d, "d_date_sk"))
                    ),
                }
            ],
            {
                "select": lambda inv, d: (inv, d),
                "where": lambda inv, d: ((_get(d, "d_date") < "2000-03-15")),
            },
        )
        _groups = _group_by(
            _rows,
            lambda inv, d: (
                {"w": _get(inv, "inv_warehouse_sk"), "i": _get(inv, "inv_item_sk")}
            ),
        )
        items = _groups
        return [
            {
                "w": _get(_get(g, "key"), "w"),
                "i": _get(_get(g, "key"), "i"),
                "qty": _sum([_get(x, "inv_quantity_on_hand") for x in g]),
            }
            for g in items
        ]

    global before
    before = _q0()

    def _q1():
        _src = inventory
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda inv, d: (
                        (_get(inv, "inv_date_sk") == _get(d, "d_date_sk"))
                    ),
                }
            ],
            {
                "select": lambda inv, d: (inv, d),
                "where": lambda inv, d: ((_get(d, "d_date") >= "2000-03-15")),
            },
        )
        _groups = _group_by(
            _rows,
            lambda inv, d: (
                {"w": _get(inv, "inv_warehouse_sk"), "i": _get(inv, "inv_item_sk")}
            ),
        )
        items = _groups
        return [
            {
                "w": _get(_get(g, "key"), "w"),
                "i": _get(_get(g, "key"), "i"),
                "qty": _sum([_get(x, "inv_quantity_on_hand") for x in g]),
            }
            for g in items
        ]

    global after
    after = _q1()
    global joined
    joined = _query(
        before,
        [
            {
                "items": after,
                "on": lambda b, a: (
                    ((_get(b, "w") == _get(a, "w")) and (_get(b, "i") == _get(a, "i")))
                ),
            },
            {
                "items": warehouse,
                "on": lambda b, a, w: ((_get(w, "w_warehouse_sk") == _get(b, "w"))),
            },
            {
                "items": item,
                "on": lambda b, a, w, it: ((_get(it, "i_item_sk") == _get(b, "i"))),
            },
        ],
        {
            "select": lambda b, a, w, it: {
                "w_name": _get(w, "w_warehouse_name"),
                "i_id": _get(it, "i_item_id"),
                "before_qty": _get(b, "qty"),
                "after_qty": _get(a, "qty"),
                "ratio": (_get(a, "qty") / _get(b, "qty")),
            }
        },
    )
    global result
    result = [
        {
            "w_warehouse_name": _get(r, "w_name"),
            "i_item_id": _get(r, "i_id"),
            "inv_before": _get(r, "before_qty"),
            "inv_after": _get(r, "after_qty"),
        }
        for r in sorted(
            [
                r
                for r in joined
                if ((_get(r, "ratio") >= ((2 / 3))) and (_get(r, "ratio") <= ((3 / 2))))
            ],
            key=lambda r: _sort_key([_get(r, "w_name"), _get(r, "i_id")]),
        )
    ]
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q21_inventory_ratio()


if __name__ == "__main__":
    main()
