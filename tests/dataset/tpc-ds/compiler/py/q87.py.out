# Generated by Mochi Python compiler
from __future__ import annotations

import json
import typing


def _append(lst, v):
    out = list(lst) if lst is not None else []
    out.append(v)
    return out


def _contains(c, v):
    if isinstance(c, list):
        return v in c
    if isinstance(c, str):
        return str(v) in c
    if isinstance(c, dict):
        return str(v) in c
    return False


def distinct(xs: list[typing.Any]) -> list[typing.Any]:
    out = []
    for x in xs:
        if not _contains(out, x):
            out = _append(out, x)
    return out


def concat(a: list[typing.Any], b: list[typing.Any]) -> list[typing.Any]:
    out = a
    for x in b:
        out = _append(out, x)
    return out


def to_list(xs: list[typing.Any]) -> list[typing.Any]:
    return xs


store_sales = None
catalog_sales = None
web_sales = None
result = 87


def test_TPCDS_Q87_sample():
    assert result == 87


def main():
    global store_sales
    store_sales = [{"cust": "A"}, {"cust": "B"}, {"cust": "B"}, {"cust": "C"}]
    global catalog_sales
    catalog_sales = [{"cust": "A"}, {"cust": "C"}, {"cust": "D"}]
    global web_sales
    web_sales = [{"cust": "A"}, {"cust": "D"}]
    global result
    result = 87
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q87_sample()


if __name__ == "__main__":
    main()
