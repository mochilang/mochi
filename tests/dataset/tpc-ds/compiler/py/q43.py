# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:12Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    s_store_name: str
    s_store_id: str
    sun_sales: float
    mon_sales: float
    tue_sales: float
    wed_sales: float
    thu_sales: float
    fri_sales: float
    sat_sales: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    d_day_name: str
    s_store_name: str
    s_store_id: str
    price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    name: str
    id: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    date_sk: int
    d_day_name: str
    d_year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Store:
    store_sk: int
    store_id: str
    store_name: str
    gmt_offset: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    sold_date_sk: int
    store_sk: int
    sales_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_TPCDS_Q43_simplified():
    assert result == [
        Auto1(
            s_store_name="Main",
            s_store_id="S1",
            sun_sales=10.0,
            mon_sales=20.0,
            tue_sales=30.0,
            wed_sales=40.0,
            thu_sales=50.0,
            fri_sales=60.0,
            sat_sales=70.0,
        )
    ]


date_dim = [
    DateDim(date_sk=1, d_day_name="Sunday", d_year=2020),
    DateDim(date_sk=2, d_day_name="Monday", d_year=2020),
    DateDim(date_sk=3, d_day_name="Tuesday", d_year=2020),
    DateDim(date_sk=4, d_day_name="Wednesday", d_year=2020),
    DateDim(date_sk=5, d_day_name="Thursday", d_year=2020),
    DateDim(date_sk=6, d_day_name="Friday", d_year=2020),
    DateDim(date_sk=7, d_day_name="Saturday", d_year=2020),
]
store = [Store(store_sk=1, store_id="S1", store_name="Main", gmt_offset=0)]
store_sales = [
    StoreSale(sold_date_sk=1, store_sk=1, sales_price=10.0),
    StoreSale(sold_date_sk=2, store_sk=1, sales_price=20.0),
    StoreSale(sold_date_sk=3, store_sk=1, sales_price=30.0),
    StoreSale(sold_date_sk=4, store_sk=1, sales_price=40.0),
    StoreSale(sold_date_sk=5, store_sk=1, sales_price=50.0),
    StoreSale(sold_date_sk=6, store_sk=1, sales_price=60.0),
    StoreSale(sold_date_sk=7, store_sk=1, sales_price=70.0),
]
year = 2020
gmt = 0
records = _query(
    date_dim,
    [
        {"items": store_sales, "on": lambda d, ss: ss.sold_date_sk == d.date_sk},
        {"items": store, "on": lambda d, ss, s: ss.store_sk == s.store_sk},
    ],
    {
        "select": lambda d, ss, s: Auto2(
            d_day_name=d.d_day_name,
            s_store_name=s.store_name,
            s_store_id=s.store_id,
            price=ss.sales_price,
        ),
        "where": lambda d, ss, s: s.gmt_offset == gmt and d.d_year == year,
    },
)


def _q0():
    _groups = {}
    _order = []
    for r in records:
        _k = Auto3(name=r.s_store_name, id=r.s_store_id)
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(r)
    _items1 = [_groups[k] for k in _order]
    return [
        Auto1(
            s_store_name=g.key["name"],
            s_store_id=g.key["id"],
            sun_sales=sum([x.price if x.d_day_name == "Sunday" else 0.0 for x in g]),
            mon_sales=sum([x.price if x.d_day_name == "Monday" else 0.0 for x in g]),
            tue_sales=sum([x.price if x.d_day_name == "Tuesday" else 0.0 for x in g]),
            wed_sales=sum([x.price if x.d_day_name == "Wednesday" else 0.0 for x in g]),
            thu_sales=sum([x.price if x.d_day_name == "Thursday" else 0.0 for x in g]),
            fri_sales=sum([x.price if x.d_day_name == "Friday" else 0.0 for x in g]),
            sat_sales=sum([x.price if x.d_day_name == "Saturday" else 0.0 for x in g]),
        )
        for g in _items1
    ]


base = _q0()
result = base
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q43_simplified()
