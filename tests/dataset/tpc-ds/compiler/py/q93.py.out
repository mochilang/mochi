# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


@dataclasses.dataclass
class StoreSale:
    ss_item_sk: int
    ss_ticket_number: int
    ss_customer_sk: int
    ss_quantity: int
    ss_sales_price: float


@dataclasses.dataclass
class StoreReturn:
    sr_item_sk: int
    sr_ticket_number: int
    sr_reason_sk: int
    sr_return_quantity: int


@dataclasses.dataclass
class Reason:
    r_reason_sk: int
    r_reason_desc: str


store_sales = None
store_returns = None
reason = None
t = None
result = None


def test_TPCDS_Q93_active_sales():
    assert result == [{"ss_customer_sk": 1, "sumsales": 40}]


def main():
    global store_sales
    store_sales = [
        {
            "ss_item_sk": 1,
            "ss_ticket_number": 1,
            "ss_customer_sk": 1,
            "ss_quantity": 5,
            "ss_sales_price": 10,
        },
        {
            "ss_item_sk": 1,
            "ss_ticket_number": 2,
            "ss_customer_sk": 2,
            "ss_quantity": 3,
            "ss_sales_price": 20,
        },
    ]
    global store_returns
    store_returns = [
        {
            "sr_item_sk": 1,
            "sr_ticket_number": 1,
            "sr_reason_sk": 1,
            "sr_return_quantity": 1,
        }
    ]
    global reason
    reason = [{"r_reason_sk": 1, "r_reason_desc": "ReasonA"}]
    global t
    t = _query(
        store_sales,
        [
            {
                "items": store_returns,
                "on": lambda ss, sr: (
                    (
                        (_get(ss, "ss_item_sk") == _get(sr, "sr_item_sk"))
                        and (
                            _get(ss, "ss_ticket_number") == _get(sr, "sr_ticket_number")
                        )
                    )
                ),
                "left": True,
            },
            {
                "items": reason,
                "on": lambda ss, sr, r: (
                    (_get(sr, "sr_reason_sk") == _get(r, "r_reason_sk"))
                ),
            },
        ],
        {
            "select": lambda ss, sr, r: {
                "ss_customer_sk": _get(ss, "ss_customer_sk"),
                "act_sales": (
                    (
                        ((_get(ss, "ss_quantity") - _get(sr, "sr_return_quantity")))
                        * _get(ss, "ss_sales_price")
                    )
                    if (sr != None)
                    else (_get(ss, "ss_quantity") * _get(ss, "ss_sales_price"))
                ),
            },
            "where": lambda ss, sr, r: ((_get(r, "r_reason_desc") == "ReasonA")),
        },
    )

    def _q0():
        _src = t
        _rows = _query(_src, [], {"select": lambda x: (x)})
        _groups = _group_by(_rows, lambda x: (_get(x, "ss_customer_sk")))
        items = _groups
        return [
            {
                "ss_customer_sk": _get(g, "key"),
                "sumsales": _sum([_get(y, "act_sales") for y in g]),
            }
            for g in items
        ]

    global result
    result = _q0()
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q93_active_sales()


if __name__ == "__main__":
    main()
