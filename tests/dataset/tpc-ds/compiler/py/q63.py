# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:37Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    mgr: object
    sum_sales: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    mgr: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Sale:
    mgr: int
    amount: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def test_TPCDS_Q63_simplified():
    assert result == 63


sales = [Sale(mgr=1, amount=30), Sale(mgr=2, amount=33)]


def _q0():
    _groups = {}
    _order = []
    for s in sales:
        _k = Auto2(mgr=s.mgr)
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(s)
    _items1 = [_groups[k] for k in _order]
    return [
        Auto1(mgr=g.key["mgr"], sum_sales=sum([x.amount for x in g])) for g in _items1
    ]


by_mgr = _q0()
result = sum([x.sum_sales for x in by_mgr])
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q63_simplified()
