# Generated by Mochi Python compiler
from __future__ import annotations

import json


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


date_dim = None
store = None
store_sales = None
year = 2020
gmt = 0
records = None
base = None
result = None


def test_TPCDS_Q43_simplified():
    assert result == [
        {
            "s_store_name": "Main",
            "s_store_id": "S1",
            "sun_sales": 10,
            "mon_sales": 20,
            "tue_sales": 30,
            "wed_sales": 40,
            "thu_sales": 50,
            "fri_sales": 60,
            "sat_sales": 70,
        }
    ]


def main():
    global date_dim
    date_dim = [
        {"date_sk": 1, "d_day_name": "Sunday", "d_year": 2020},
        {"date_sk": 2, "d_day_name": "Monday", "d_year": 2020},
        {"date_sk": 3, "d_day_name": "Tuesday", "d_year": 2020},
        {"date_sk": 4, "d_day_name": "Wednesday", "d_year": 2020},
        {"date_sk": 5, "d_day_name": "Thursday", "d_year": 2020},
        {"date_sk": 6, "d_day_name": "Friday", "d_year": 2020},
        {"date_sk": 7, "d_day_name": "Saturday", "d_year": 2020},
    ]
    global store
    store = [{"store_sk": 1, "store_id": "S1", "store_name": "Main", "gmt_offset": 0}]
    global store_sales
    store_sales = [
        {"sold_date_sk": 1, "store_sk": 1, "sales_price": 10},
        {"sold_date_sk": 2, "store_sk": 1, "sales_price": 20},
        {"sold_date_sk": 3, "store_sk": 1, "sales_price": 30},
        {"sold_date_sk": 4, "store_sk": 1, "sales_price": 40},
        {"sold_date_sk": 5, "store_sk": 1, "sales_price": 50},
        {"sold_date_sk": 6, "store_sk": 1, "sales_price": 60},
        {"sold_date_sk": 7, "store_sk": 1, "sales_price": 70},
    ]
    global year
    year = 2020
    global gmt
    gmt = 0
    global records
    records = _query(
        date_dim,
        [
            {
                "items": store_sales,
                "on": lambda d, ss: ((_get(ss, "sold_date_sk") == _get(d, "date_sk"))),
            },
            {
                "items": store,
                "on": lambda d, ss, s: ((_get(ss, "store_sk") == _get(s, "store_sk"))),
            },
        ],
        {
            "select": lambda d, ss, s: {
                "d_day_name": _get(d, "d_day_name"),
                "s_store_name": _get(s, "store_name"),
                "s_store_id": _get(s, "store_id"),
                "price": _get(ss, "sales_price"),
            },
            "where": lambda d, ss, s: (
                ((_get(s, "gmt_offset") == gmt) and (_get(d, "d_year") == year))
            ),
        },
    )

    def _q0():
        _src = records
        _rows = _query(_src, [], {"select": lambda r: (r)})
        _groups = _group_by(
            _rows,
            lambda r: ({"name": _get(r, "s_store_name"), "id": _get(r, "s_store_id")}),
        )
        items = _groups
        return [
            {
                "s_store_name": _get(_get(g, "key"), "name"),
                "s_store_id": _get(_get(g, "key"), "id"),
                "sun_sales": _sum(
                    [
                        (_get(x, "price") if (_get(x, "d_day_name") == "Sunday") else 0)
                        for x in g
                    ]
                ),
                "mon_sales": _sum(
                    [
                        (_get(x, "price") if (_get(x, "d_day_name") == "Monday") else 0)
                        for x in g
                    ]
                ),
                "tue_sales": _sum(
                    [
                        (
                            _get(x, "price")
                            if (_get(x, "d_day_name") == "Tuesday")
                            else 0
                        )
                        for x in g
                    ]
                ),
                "wed_sales": _sum(
                    [
                        (
                            _get(x, "price")
                            if (_get(x, "d_day_name") == "Wednesday")
                            else 0
                        )
                        for x in g
                    ]
                ),
                "thu_sales": _sum(
                    [
                        (
                            _get(x, "price")
                            if (_get(x, "d_day_name") == "Thursday")
                            else 0
                        )
                        for x in g
                    ]
                ),
                "fri_sales": _sum(
                    [
                        (_get(x, "price") if (_get(x, "d_day_name") == "Friday") else 0)
                        for x in g
                    ]
                ),
                "sat_sales": _sum(
                    [
                        (
                            _get(x, "price")
                            if (_get(x, "d_day_name") == "Saturday")
                            else 0
                        )
                        for x in g
                    ]
                ),
            }
            for g in items
        ]

    global base
    base = _q0()
    global result
    result = base
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q43_simplified()


if __name__ == "__main__":
    main()
