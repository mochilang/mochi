# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing


def _avg(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("avg() expects list or group")
    if not v:
        return 0
    s = 0.0
    for it in v:
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("avg() expects numbers")
    return s / len(v)


def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, "Items"):
        return len(v.Items)
    raise Exception("count() expects list or group")


def _get(obj, name):
    if obj is None:
        return None
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


@dataclasses.dataclass
class StoreSale:
    ss_quantity: int
    ss_list_price: float
    ss_coupon_amt: float
    ss_wholesale_cost: float


store_sales = None
bucket1 = None
bucket2 = None
result = None


def test_TPCDS_Q28_buckets():
    assert result == {
        "B1_LP": 100,
        "B1_CNT": 1,
        "B1_CNTD": 1,
        "B2_LP": 80,
        "B2_CNT": 1,
        "B2_CNTD": 1,
    }


def main():
    global store_sales
    store_sales = [
        {
            "ss_quantity": 3,
            "ss_list_price": 100,
            "ss_coupon_amt": 50,
            "ss_wholesale_cost": 30,
        },
        {
            "ss_quantity": 8,
            "ss_list_price": 80,
            "ss_coupon_amt": 10,
            "ss_wholesale_cost": 20,
        },
        {
            "ss_quantity": 12,
            "ss_list_price": 60,
            "ss_coupon_amt": 5,
            "ss_wholesale_cost": 15,
        },
    ]
    global bucket1
    bucket1 = [
        ss
        for ss in store_sales
        if (
            ((_get(ss, "ss_quantity") >= 0) and (_get(ss, "ss_quantity") <= 5))
            and (
                (
                    (
                        (
                            (
                                (_get(ss, "ss_list_price") >= 0)
                                and (_get(ss, "ss_list_price") <= 110)
                            )
                        )
                        or (
                            (
                                (_get(ss, "ss_coupon_amt") >= 0)
                                and (_get(ss, "ss_coupon_amt") <= 1000)
                            )
                        )
                    )
                    or (
                        (
                            (_get(ss, "ss_wholesale_cost") >= 0)
                            and (_get(ss, "ss_wholesale_cost") <= 50)
                        )
                    )
                )
            )
        )
    ]
    global bucket2
    bucket2 = [
        ss
        for ss in store_sales
        if (
            ((_get(ss, "ss_quantity") >= 6) and (_get(ss, "ss_quantity") <= 10))
            and (
                (
                    (
                        (
                            (
                                (_get(ss, "ss_list_price") >= 0)
                                and (_get(ss, "ss_list_price") <= 110)
                            )
                        )
                        or (
                            (
                                (_get(ss, "ss_coupon_amt") >= 0)
                                and (_get(ss, "ss_coupon_amt") <= 1000)
                            )
                        )
                    )
                    or (
                        (
                            (_get(ss, "ss_wholesale_cost") >= 0)
                            and (_get(ss, "ss_wholesale_cost") <= 50)
                        )
                    )
                )
            )
        )
    ]

    def _q0():
        _src = bucket1
        _rows = _query(_src, [], {"select": lambda x: (x)})
        _groups = _group_by(_rows, lambda x: (_get(x, "ss_list_price")))
        items = _groups
        return [_get(g, "key") for g in items]

    def _q1():
        _src = bucket2
        _rows = _query(_src, [], {"select": lambda x: (x)})
        _groups = _group_by(_rows, lambda x: (_get(x, "ss_list_price")))
        items = _groups
        return [_get(g, "key") for g in items]

    global result
    result = {
        "B1_LP": _avg([_get(x, "ss_list_price") for x in bucket1]),
        "B1_CNT": _count(bucket1),
        "B1_CNTD": _count(_q0()),
        "B2_LP": _avg([_get(x, "ss_list_price") for x in bucket2]),
        "B2_CNT": _count(bucket2),
        "B2_CNTD": _count(_q1()),
    }
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q28_buckets()


if __name__ == "__main__":
    main()
