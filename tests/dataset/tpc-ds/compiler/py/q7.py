# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:49:37Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    i_item_id: str
    agg1: float
    agg2: float
    agg3: float
    agg4: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    i_item_id: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerDemographic:
    cd_demo_sk: int
    cd_gender: str
    cd_marital_status: str
    cd_education_status: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_item_id: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Promotion:
    p_promo_sk: int
    p_channel_email: str
    p_channel_event: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_cdemo_sk: int
    ss_sold_date_sk: int
    ss_item_sk: int
    ss_promo_sk: int
    ss_quantity: int
    ss_list_price: float
    ss_coupon_amt: float
    ss_sales_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _avg(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("avg() expects list or group")
    if not v:
        return 0
    s = 0.0
    for it in v:
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("avg() expects numbers")
    return s / len(v)


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_TPCDS_Q7_result():
    assert result == [Auto1(i_item_id="I1", agg1=5.0, agg2=10.0, agg3=2.0, agg4=8.0)]


store_sales = [
    StoreSale(
        ss_cdemo_sk=1,
        ss_sold_date_sk=1,
        ss_item_sk=1,
        ss_promo_sk=1,
        ss_quantity=5,
        ss_list_price=10.0,
        ss_coupon_amt=2.0,
        ss_sales_price=8.0,
    )
]
customer_demographics = [
    CustomerDemographic(
        cd_demo_sk=1,
        cd_gender="M",
        cd_marital_status="S",
        cd_education_status="College",
    )
]
date_dim = [DateDim(d_date_sk=1, d_year=1998)]
item = [Item(i_item_sk=1, i_item_id="I1")]
promotion = [Promotion(p_promo_sk=1, p_channel_email="N", p_channel_event="Y")]


def _q0():
    _src = store_sales
    _rows = _query(
        _src,
        [
            {
                "items": customer_demographics,
                "on": lambda ss, cd: ss.ss_cdemo_sk == cd.cd_demo_sk,
            },
            {
                "items": date_dim,
                "on": lambda ss, cd, d: ss.ss_sold_date_sk == d.d_date_sk,
            },
            {"items": item, "on": lambda ss, cd, d, i: ss.ss_item_sk == i.i_item_sk},
            {
                "items": promotion,
                "on": lambda ss, cd, d, i, p: ss.ss_promo_sk == p.p_promo_sk,
            },
        ],
        {
            "select": lambda ss, cd, d, i, p: (ss, cd, d, i, p),
            "where": lambda ss, cd, d, i, p: (
                (
                    (cd.cd_gender == "M" and cd.cd_marital_status == "S")
                    and cd.cd_education_status == "College"
                )
                and (p.p_channel_email == "N" or p.p_channel_event == "N")
            )
            and d.d_year == 1998,
        },
    )
    _groups = _group_by(_rows, lambda ss, cd, d, i, p: Auto2(i_item_id=i.i_item_id))
    _items1 = _groups
    _items1 = sorted(_items1, key=lambda g: g.key["i_item_id"])
    return [
        Auto1(
            i_item_id=g.key["i_item_id"],
            agg1=_avg([x[0].ss_quantity for x in g]),
            agg2=_avg([x[0].ss_list_price for x in g]),
            agg3=_avg([x[0].ss_coupon_amt for x in g]),
            agg4=_avg([x[0].ss_sales_price for x in g]),
        )
        for g in _items1
    ]


result = _q0()
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q7_result()
