# Generated by Mochi Python compiler
from __future__ import annotations

import dataclasses
import json
import typing


def _count(v):
    if isinstance(v, list):
        return len(v)
    if hasattr(v, "Items"):
        return len(v.Items)
    raise Exception("count() expects list or group")


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


@dataclasses.dataclass
class WebSale:
    ws_sold_time_sk: int
    ws_ship_hdemo_sk: int
    ws_web_page_sk: int


web_sales = None
household_demographics = None
time_dim = None
web_page = None
amc = None
pmc = None
result = None


def test_TPCDS_Q90_ratio():
    assert result == 2


def main():
    global web_sales
    web_sales = [
        {"ws_sold_time_sk": 1, "ws_ship_hdemo_sk": 1, "ws_web_page_sk": 10},
        {"ws_sold_time_sk": 1, "ws_ship_hdemo_sk": 1, "ws_web_page_sk": 10},
        {"ws_sold_time_sk": 2, "ws_ship_hdemo_sk": 1, "ws_web_page_sk": 10},
    ]
    global household_demographics
    household_demographics = [{"hd_demo_sk": 1, "hd_dep_count": 2}]
    global time_dim
    time_dim = [{"t_time_sk": 1, "t_hour": 7}, {"t_time_sk": 2, "t_hour": 14}]
    global web_page
    web_page = [{"wp_web_page_sk": 10, "wp_char_count": 5100}]
    global amc
    amc = _count(
        _query(
            web_sales,
            [
                {
                    "items": household_demographics,
                    "on": lambda ws, hd: (
                        (_get(ws, "ws_ship_hdemo_sk") == _get(hd, "hd_demo_sk"))
                    ),
                },
                {
                    "items": time_dim,
                    "on": lambda ws, hd, t: (
                        (_get(ws, "ws_sold_time_sk") == _get(t, "t_time_sk"))
                    ),
                },
                {
                    "items": web_page,
                    "on": lambda ws, hd, t, wp: (
                        (_get(ws, "ws_web_page_sk") == _get(wp, "wp_web_page_sk"))
                    ),
                },
            ],
            {
                "select": lambda ws, hd, t, wp: ws,
                "where": lambda ws, hd, t, wp: (
                    (
                        (
                            (
                                ((_get(t, "t_hour") >= 7) and (_get(t, "t_hour") <= 8))
                                and (_get(hd, "hd_dep_count") == 2)
                            )
                            and (_get(wp, "wp_char_count") >= 5000)
                        )
                        and (_get(wp, "wp_char_count") <= 5200)
                    )
                ),
            },
        )
    )
    global pmc
    pmc = _count(
        _query(
            web_sales,
            [
                {
                    "items": household_demographics,
                    "on": lambda ws, hd: (
                        (_get(ws, "ws_ship_hdemo_sk") == _get(hd, "hd_demo_sk"))
                    ),
                },
                {
                    "items": time_dim,
                    "on": lambda ws, hd, t: (
                        (_get(ws, "ws_sold_time_sk") == _get(t, "t_time_sk"))
                    ),
                },
                {
                    "items": web_page,
                    "on": lambda ws, hd, t, wp: (
                        (_get(ws, "ws_web_page_sk") == _get(wp, "wp_web_page_sk"))
                    ),
                },
            ],
            {
                "select": lambda ws, hd, t, wp: ws,
                "where": lambda ws, hd, t, wp: (
                    (
                        (
                            (
                                (
                                    (_get(t, "t_hour") >= 14)
                                    and (_get(t, "t_hour") <= 15)
                                )
                                and (_get(hd, "hd_dep_count") == 2)
                            )
                            and (_get(wp, "wp_char_count") >= 5000)
                        )
                        and (_get(wp, "wp_char_count") <= 5200)
                    )
                ),
            },
        )
    )
    global result
    result = (float(amc)) / (float(pmc))
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q90_ratio()


if __name__ == "__main__":
    main()
