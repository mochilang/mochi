# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:13Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    best_performing: str
    worst_performing: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    item_sk: object
    avg_profit: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_product_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    ss_item_sk: int
    ss_store_sk: int
    ss_net_profit: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _sort_key(k):
    if hasattr(k, "__dataclass_fields__"):
        return str(k)
    if isinstance(k, list):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, tuple):
        return tuple((_sort_key(x) for x in k))
    if isinstance(k, dict):
        return str(k)
    return k


def test_TPCDS_Q44_simplified():
    assert result == Auto1(best_performing="ItemA", worst_performing="ItemB")


store_sales = [
    StoreSale(ss_item_sk=1, ss_store_sk=1, ss_net_profit=5.0),
    StoreSale(ss_item_sk=1, ss_store_sk=1, ss_net_profit=5.0),
    StoreSale(ss_item_sk=2, ss_store_sk=1, ss_net_profit=-1.0),
]
item = [
    Item(i_item_sk=1, i_product_name="ItemA"),
    Item(i_item_sk=2, i_product_name="ItemB"),
]


def _q0():
    _groups = {}
    _order = []
    for ss in store_sales:
        _k = ss.ss_item_sk
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(ss)
    _items1 = [_groups[k] for k in _order]
    return [
        Auto2(
            item_sk=g.key,
            avg_profit=(
                sum([x.ss_net_profit for x in g]) / len([x.ss_net_profit for x in g])
                if [x.ss_net_profit for x in g]
                else 0
            ),
        )
        for g in _items1
    ]


grouped_base = _q0()
grouped = grouped_base
best = (
    [
        x
        for x in sorted([x for x in grouped], key=lambda x: _sort_key(-x["avg_profit"]))
    ][0]
    if len(
        [
            x
            for x in sorted(
                [x for x in grouped], key=lambda x: _sort_key(-x["avg_profit"])
            )
        ]
    )
    > 0
    else None
)
worst = (
    [x for x in sorted([x for x in grouped], key=lambda x: _sort_key(x["avg_profit"]))][
        0
    ]
    if len(
        [
            x
            for x in sorted(
                [x for x in grouped], key=lambda x: _sort_key(x["avg_profit"])
            )
        ]
    )
    > 0
    else None
)
best_name = (
    [
        i.i_product_name
        for i in item
        if i.i_item_sk
        == (best.get("item_sk") if isinstance(best, dict) else getattr(best, "item_sk"))
    ][0]
    if len(
        [
            i.i_product_name
            for i in item
            if i.i_item_sk
            == (
                best.get("item_sk")
                if isinstance(best, dict)
                else getattr(best, "item_sk")
            )
        ]
    )
    > 0
    else None
)
worst_name = (
    [
        i.i_product_name
        for i in item
        if i.i_item_sk
        == (
            worst.get("item_sk")
            if isinstance(worst, dict)
            else getattr(worst, "item_sk")
        )
    ][0]
    if len(
        [
            i.i_product_name
            for i in item
            if i.i_item_sk
            == (
                worst.get("item_sk")
                if isinstance(worst, dict)
                else getattr(worst, "item_sk")
            )
        ]
    )
    > 0
    else None
)
result = Auto1(best_performing=best_name, worst_performing=worst_name)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q44_simplified()
