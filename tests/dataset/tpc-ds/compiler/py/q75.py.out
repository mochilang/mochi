# Generated by Mochi Python compiler
from __future__ import annotations

import json


def _first(lst):
    if not isinstance(lst, list):
        raise Exception("first expects list")
    return lst[0] if len(lst) > 0 else None


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def _union_all(a, b):
    return list(a) + list(b)


date_dim = None
store_sales = None
web_sales = None
catalog_sales = None
item = None
sales_detail = None
all_sales = None
prev_yr = None
curr_yr = None
result = None


def test_TPCDS_Q75_simplified():
    assert result == [
        {
            "prev_year": 2000,
            "year": 2001,
            "i_brand_id": 1,
            "i_class_id": 2,
            "i_category_id": 3,
            "i_manufact_id": 4,
            "prev_yr_cnt": 100,
            "curr_yr_cnt": 80,
            "sales_cnt_diff": (-20),
            "sales_amt_diff": (-200),
        }
    ]


def main():
    global date_dim
    date_dim = [{"d_date_sk": 1, "d_year": 2000}, {"d_date_sk": 2, "d_year": 2001}]
    global store_sales
    store_sales = [
        {
            "ss_item_sk": 1,
            "ss_quantity": 50,
            "ss_sales_price": 500,
            "ss_sold_date_sk": 1,
        },
        {
            "ss_item_sk": 1,
            "ss_quantity": 40,
            "ss_sales_price": 400,
            "ss_sold_date_sk": 2,
        },
    ]
    global web_sales
    web_sales = [
        {
            "ws_item_sk": 1,
            "ws_quantity": 30,
            "ws_sales_price": 300,
            "ws_sold_date_sk": 1,
        },
        {
            "ws_item_sk": 1,
            "ws_quantity": 25,
            "ws_sales_price": 250,
            "ws_sold_date_sk": 2,
        },
    ]
    global catalog_sales
    catalog_sales = [
        {
            "cs_item_sk": 1,
            "cs_quantity": 20,
            "cs_sales_price": 200,
            "cs_sold_date_sk": 1,
        },
        {
            "cs_item_sk": 1,
            "cs_quantity": 15,
            "cs_sales_price": 150,
            "cs_sold_date_sk": 2,
        },
    ]
    global item
    item = [
        {
            "i_item_sk": 1,
            "i_brand_id": 1,
            "i_class_id": 2,
            "i_category_id": 3,
            "i_manufact_id": 4,
            "i_category": "Electronics",
        }
    ]
    global sales_detail
    sales_detail = _union_all(
        _union_all(
            _query(
                store_sales,
                [
                    {
                        "items": date_dim,
                        "on": lambda ss, d: (
                            (_get(d, "d_date_sk") == _get(ss, "ss_sold_date_sk"))
                        ),
                    }
                ],
                {
                    "select": lambda ss, d: {
                        "d_year": _get(d, "d_year"),
                        "i_item_sk": _get(ss, "ss_item_sk"),
                        "quantity": _get(ss, "ss_quantity"),
                        "amount": _get(ss, "ss_sales_price"),
                    }
                },
            ),
            _query(
                web_sales,
                [
                    {
                        "items": date_dim,
                        "on": lambda ws, d: (
                            (_get(d, "d_date_sk") == _get(ws, "ws_sold_date_sk"))
                        ),
                    }
                ],
                {
                    "select": lambda ws, d: {
                        "d_year": _get(d, "d_year"),
                        "i_item_sk": _get(ws, "ws_item_sk"),
                        "quantity": _get(ws, "ws_quantity"),
                        "amount": _get(ws, "ws_sales_price"),
                    }
                },
            ),
        ),
        _query(
            catalog_sales,
            [
                {
                    "items": date_dim,
                    "on": lambda cs, d: (
                        (_get(d, "d_date_sk") == _get(cs, "cs_sold_date_sk"))
                    ),
                }
            ],
            {
                "select": lambda cs, d: {
                    "d_year": _get(d, "d_year"),
                    "i_item_sk": _get(cs, "cs_item_sk"),
                    "quantity": _get(cs, "cs_quantity"),
                    "amount": _get(cs, "cs_sales_price"),
                }
            },
        ),
    )

    def _q0():
        _src = sales_detail
        _rows = _query(
            _src,
            [
                {
                    "items": item,
                    "on": lambda sd, i: (
                        (_get(i, "i_item_sk") == _get(sd, "i_item_sk"))
                    ),
                }
            ],
            {
                "select": lambda sd, i: (sd, i),
                "where": lambda sd, i: ((_get(i, "i_category") == "Electronics")),
            },
        )
        _groups = _group_by(
            _rows,
            lambda sd, i: (
                {
                    "year": _get(sd, "d_year"),
                    "brand_id": _get(i, "i_brand_id"),
                    "class_id": _get(i, "i_class_id"),
                    "category_id": _get(i, "i_category_id"),
                    "manuf_id": _get(i, "i_manufact_id"),
                }
            ),
        )
        items = _groups
        return [
            {
                "d_year": _get(_get(g, "key"), "year"),
                "i_brand_id": _get(_get(g, "key"), "brand_id"),
                "i_class_id": _get(_get(g, "key"), "class_id"),
                "i_category_id": _get(_get(g, "key"), "category_id"),
                "i_manufact_id": _get(_get(g, "key"), "manuf_id"),
                "sales_cnt": _sum([_get(x[0], "quantity") for x in g]),
                "sales_amt": _sum([_get(x[0], "amount") for x in g]),
            }
            for g in items
        ]

    global all_sales
    all_sales = _q0()
    global prev_yr
    prev_yr = _first([a for a in all_sales if (_get(a, "d_year") == 2000)])
    global curr_yr
    curr_yr = _first([a for a in all_sales if (_get(a, "d_year") == 2001)])
    global result
    result = (
        [
            {
                "prev_year": _get(prev_yr, "d_year"),
                "year": _get(curr_yr, "d_year"),
                "i_brand_id": _get(curr_yr, "i_brand_id"),
                "i_class_id": _get(curr_yr, "i_class_id"),
                "i_category_id": _get(curr_yr, "i_category_id"),
                "i_manufact_id": _get(curr_yr, "i_manufact_id"),
                "prev_yr_cnt": _get(prev_yr, "sales_cnt"),
                "curr_yr_cnt": _get(curr_yr, "sales_cnt"),
                "sales_cnt_diff": (
                    _get(curr_yr, "sales_cnt") - _get(prev_yr, "sales_cnt")
                ),
                "sales_amt_diff": (
                    _get(curr_yr, "sales_amt") - _get(prev_yr, "sales_amt")
                ),
            }
        ]
        if (((_get(curr_yr, "sales_cnt") / _get(prev_yr, "sales_cnt"))) < 0.9)
        else []
    )
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q75_simplified()


if __name__ == "__main__":
    main()
