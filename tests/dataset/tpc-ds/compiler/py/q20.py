# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:49:49Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    i_item_id: str
    i_item_desc: str
    i_category: str
    i_class: str
    i_current_price: float
    itemrevenue: float
    revenueratio: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    i_item_id: object
    i_item_desc: object
    i_category: object
    i_class: object
    i_current_price: object
    itemrevenue: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    id: str
    desc: str
    cat: str
    _class: str
    price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto4:
    _class: object
    total: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogSale:
    cs_item_sk: int
    cs_sold_date_sk: int
    cs_ext_sales_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_date: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_item_id: str
    i_item_desc: str
    i_category: str
    i_class: str
    i_current_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


@dataclasses.dataclass
class CatalogSale:
    cs_item_sk: int
    cs_sold_date_sk: int
    cs_ext_sales_price: float

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_item_id: str
    i_item_desc: str
    i_category: str
    i_class: str
    i_current_price: float

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_date: str

    def __contains__(self, key):
        return hasattr(self, key)


def test_TPCDS_Q20_revenue_ratio():
    assert result == [
        Auto1(
            i_item_id="ITEM1",
            i_item_desc="Item One",
            i_category="A",
            i_class="X",
            i_current_price=10.0,
            itemrevenue=600.0,
            revenueratio=66.66666666666667,
        ),
        Auto1(
            i_item_id="ITEM2",
            i_item_desc="Item Two",
            i_category="A",
            i_class="X",
            i_current_price=20.0,
            itemrevenue=300.0,
            revenueratio=33.333333333333336,
        ),
    ]


catalog_sales = [
    CatalogSale(cs_item_sk=1, cs_sold_date_sk=1, cs_ext_sales_price=100.0),
    CatalogSale(cs_item_sk=1, cs_sold_date_sk=1, cs_ext_sales_price=200.0),
    CatalogSale(cs_item_sk=2, cs_sold_date_sk=1, cs_ext_sales_price=150.0),
    CatalogSale(cs_item_sk=1, cs_sold_date_sk=2, cs_ext_sales_price=300.0),
    CatalogSale(cs_item_sk=2, cs_sold_date_sk=2, cs_ext_sales_price=150.0),
    CatalogSale(cs_item_sk=3, cs_sold_date_sk=1, cs_ext_sales_price=50.0),
]
item = [
    Item(
        i_item_sk=1,
        i_item_id="ITEM1",
        i_item_desc="Item One",
        i_category="A",
        i_class="X",
        i_current_price=10.0,
    ),
    Item(
        i_item_sk=2,
        i_item_id="ITEM2",
        i_item_desc="Item Two",
        i_category="A",
        i_class="X",
        i_current_price=20.0,
    ),
    Item(
        i_item_sk=3,
        i_item_id="ITEM3",
        i_item_desc="Item Three",
        i_category="D",
        i_class="Y",
        i_current_price=15.0,
    ),
]
date_dim = [
    DateDim(d_date_sk=1, d_date="2000-02-10"),
    DateDim(d_date_sk=2, d_date="2000-02-20"),
]


def _q0():
    _src = catalog_sales
    _rows = _query(
        _src,
        [
            {"items": item, "on": lambda cs, i: cs.cs_item_sk == i.i_item_sk},
            {
                "items": date_dim,
                "on": lambda cs, i, d: cs.cs_sold_date_sk == d.d_date_sk,
            },
        ],
        {
            "select": lambda cs, i, d: (cs, i, d),
            "where": lambda cs, i, d: (
                i.i_category in ["A", "B", "C"] and d.d_date >= "2000-02-01"
            )
            and d.d_date <= "2000-03-02",
        },
    )
    _groups = _group_by(
        _rows,
        lambda cs, i, d: Auto3(
            id=i.i_item_id,
            desc=i.i_item_desc,
            cat=i.i_category,
            _class=i.i_class,
            price=i.i_current_price,
        ),
    )
    _items1 = _groups
    return [
        Auto2(
            i_item_id=g.key["id"],
            i_item_desc=g.key["desc"],
            i_category=g.key["cat"],
            i_class=g.key["_class"],
            i_current_price=g.key["price"],
            itemrevenue=sum([x[0].cs_ext_sales_price for x in g]),
        )
        for g in _items1
    ]


filtered = _q0()


def _q2():
    _groups = {}
    _order = []
    for f in filtered:
        _k = f.i_class
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(f)
    _items1 = [_groups[k] for k in _order]
    return [Auto4(_class=g.key, total=sum([x.itemrevenue for x in g])) for g in _items1]


class_totals = _q2()
result = _query(
    filtered,
    [{"items": class_totals, "on": lambda f, t: f.i_class == t._class}],
    {
        "select": lambda f, t: Auto1(
            i_item_id=f.i_item_id,
            i_item_desc=f.i_item_desc,
            i_category=f.i_category,
            i_class=f.i_class,
            i_current_price=f.i_current_price,
            itemrevenue=f.itemrevenue,
            revenueratio=f.itemrevenue * 100.0 / t.total,
        ),
        "sortKey": lambda f, t: [f.i_category, f.i_class, f.i_item_id, f.i_item_desc],
    },
)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q20_revenue_ratio()
