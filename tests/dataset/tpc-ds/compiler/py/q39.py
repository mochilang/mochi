# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:08Z
from __future__ import annotations
import dataclasses
import json
import math


@dataclasses.dataclass
class Auto1:
    w_warehouse_sk: int
    i_item_sk: int
    cov: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    w: object
    i: object
    qty: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    w: int
    i: int
    month: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto4:
    w: object
    i: object

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto5:
    w: object
    i: object
    qtys: list[object]

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int
    d_moy: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Inventory:
    inv_item_sk: int
    inv_warehouse_sk: int
    inv_date_sk: int
    inv_quantity_on_hand: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Warehouse:
    w_warehouse_sk: int
    w_warehouse_name: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


def _append(lst: list[T] | None, v: T) -> list[T]:
    out: list[T] = list(lst) if lst is not None else []
    out.append(v)
    return out


def _avg(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("avg() expects list or group")
    if not v:
        return 0
    s = 0.0
    for it in v:
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("avg() expects numbers")
    return s / len(v)


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_TPCDS_Q39_simplified():
    assert summary == [Auto1(w_warehouse_sk=1, i_item_sk=1, cov=1.539600717839002)]


inventory = [
    Inventory(
        inv_item_sk=1, inv_warehouse_sk=1, inv_date_sk=1, inv_quantity_on_hand=10
    ),
    Inventory(
        inv_item_sk=1, inv_warehouse_sk=1, inv_date_sk=2, inv_quantity_on_hand=10
    ),
    Inventory(
        inv_item_sk=1, inv_warehouse_sk=1, inv_date_sk=3, inv_quantity_on_hand=250
    ),
]
item = [Item(i_item_sk=1)]
warehouse = [Warehouse(w_warehouse_sk=1, w_warehouse_name="W1")]
date_dim = [
    DateDim(d_date_sk=1, d_year=2000, d_moy=1),
    DateDim(d_date_sk=2, d_year=2000, d_moy=2),
    DateDim(d_date_sk=3, d_year=2000, d_moy=3),
]


def _q0():
    _src = inventory
    _rows = _query(
        _src,
        [
            {"items": date_dim, "on": lambda inv, d: inv.inv_date_sk == d.d_date_sk},
            {"items": item, "on": lambda inv, d, i: inv.inv_item_sk == i.i_item_sk},
            {
                "items": warehouse,
                "on": lambda inv, d, i, w: inv.inv_warehouse_sk == w.w_warehouse_sk,
            },
        ],
        {
            "select": lambda inv, d, i, w: (inv, d, i, w),
            "where": lambda inv, d, i, w: d.d_year == 2000,
        },
    )
    _groups = _group_by(
        _rows,
        lambda inv, d, i, w: Auto3(w=w.w_warehouse_sk, i=i.i_item_sk, month=d.d_moy),
    )
    _items1 = _groups
    return [
        Auto2(
            w=g.key["w"], i=g.key["i"], qty=sum([x[0].inv_quantity_on_hand for x in g])
        )
        for g in _items1
    ]


monthly = _q0()
grouped = {}
for m in monthly:
    key = str(Auto4(w=m.w, i=m.i))
    if key in grouped:
        g = grouped[key]
        grouped[key] = Auto5(w=g["w"], i=g["i"], qtys=_append(g["qtys"], m.qty))
    else:
        grouped[key] = Auto5(w=m.w, i=m.i, qtys=[m.qty])
summary = []
for g in list(grouped.values()):
    mean = _avg(g["qtys"])
    sumsq = 0.0
    for q in g["qtys"]:
        sumsq = sumsq + (q - mean) * (q - mean)
    variance = sumsq / (len(g["qtys"]) - 1)
    cov = (math.get("sqrt") if isinstance(math, dict) else getattr(math, "sqrt"))(
        variance
    ) / mean
    if cov > 1.5:
        summary = summary + [Auto1(w_warehouse_sk=g["w"], i_item_sk=g["i"], cov=cov)]
print(json.dumps(summary, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q39_simplified()
