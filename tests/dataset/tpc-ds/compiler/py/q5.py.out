# Generated by Mochi Python compiler
from __future__ import annotations

import json

store_sales = []
store_returns = []
store = []
catalog_sales = []
catalog_returns = []
catalog_page = []
web_sales = []
web_returns = []
web_site = []
date_dim = []
ss = None
sr = None
cs = None
cr = None
ws = None
wr = None
per_channel = None
result = None


def test_TPCDS_Q5_empty():
    assert len(result) == 0


def main():
    global store_sales
    store_sales = []
    global store_returns
    store_returns = []
    global store
    store = []
    global catalog_sales
    catalog_sales = []
    global catalog_returns
    catalog_returns = []
    global catalog_page
    catalog_page = []
    global web_sales
    web_sales = []
    global web_returns
    web_returns = []
    global web_site
    web_site = []
    global date_dim
    date_dim = []

    def _q0():
        _src = store_sales
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda ss, d: ((ss.ss_sold_date_sk == d.d_date_sk)),
                },
                {
                    "items": store,
                    "on": lambda ss, d, s: ((ss.ss_store_sk == s.s_store_sk)),
                },
            ],
            {
                "select": lambda ss, d, s: (ss, d, s),
                "where": lambda ss, d, s: (
                    ((d.d_date >= "1998-12-01") and (d.d_date <= "1998-12-15"))
                ),
            },
        )
        _groups = _group_by(_rows, lambda ss, d, s: (s.s_store_id))
        items = _groups
        return [
            {
                "channel": "store channel",
                "id": ("store" + str(g.key)),
                "sales": _sum([x[0].ss_ext_sales_price for x in g]),
                "returns": 0,
                "profit": _sum([x[0].ss_net_profit for x in g]),
                "profit_loss": 0,
            }
            for g in items
        ]

    global ss
    ss = _q0()

    def _q1():
        _src = store_returns
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda sr, d: ((sr.sr_returned_date_sk == d.d_date_sk)),
                },
                {
                    "items": store,
                    "on": lambda sr, d, s: ((sr.sr_store_sk == s.s_store_sk)),
                },
            ],
            {
                "select": lambda sr, d, s: (sr, d, s),
                "where": lambda sr, d, s: (
                    ((d.d_date >= "1998-12-01") and (d.d_date <= "1998-12-15"))
                ),
            },
        )
        _groups = _group_by(_rows, lambda sr, d, s: (s.s_store_id))
        items = _groups
        return [
            {
                "channel": "store channel",
                "id": ("store" + str(g.key)),
                "sales": 0,
                "returns": _sum([x[0].sr_return_amt for x in g]),
                "profit": 0,
                "profit_loss": _sum([x[0].sr_net_loss for x in g]),
            }
            for g in items
        ]

    global sr
    sr = _q1()

    def _q2():
        _src = catalog_sales
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda cs, d: ((cs.cs_sold_date_sk == d.d_date_sk)),
                },
                {
                    "items": catalog_page,
                    "on": lambda cs, d, cp: (
                        (cs.cs_catalog_page_sk == cp.cp_catalog_page_sk)
                    ),
                },
            ],
            {
                "select": lambda cs, d, cp: (cs, d, cp),
                "where": lambda cs, d, cp: (
                    ((d.d_date >= "1998-12-01") and (d.d_date <= "1998-12-15"))
                ),
            },
        )
        _groups = _group_by(_rows, lambda cs, d, cp: (cp.cp_catalog_page_id))
        items = _groups
        return [
            {
                "channel": "catalog channel",
                "id": ("catalog_page" + str(g.key)),
                "sales": _sum([x[0].cs_ext_sales_price for x in g]),
                "returns": 0,
                "profit": _sum([x[0].cs_net_profit for x in g]),
                "profit_loss": 0,
            }
            for g in items
        ]

    global cs
    cs = _q2()

    def _q3():
        _src = catalog_returns
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda cr, d: ((cr.cr_returned_date_sk == d.d_date_sk)),
                },
                {
                    "items": catalog_page,
                    "on": lambda cr, d, cp: (
                        (cr.cr_catalog_page_sk == cp.cp_catalog_page_sk)
                    ),
                },
            ],
            {
                "select": lambda cr, d, cp: (cr, d, cp),
                "where": lambda cr, d, cp: (
                    ((d.d_date >= "1998-12-01") and (d.d_date <= "1998-12-15"))
                ),
            },
        )
        _groups = _group_by(_rows, lambda cr, d, cp: (cp.cp_catalog_page_id))
        items = _groups
        return [
            {
                "channel": "catalog channel",
                "id": ("catalog_page" + str(g.key)),
                "sales": 0,
                "returns": _sum([x[0].cr_return_amount for x in g]),
                "profit": 0,
                "profit_loss": _sum([x[0].cr_net_loss for x in g]),
            }
            for g in items
        ]

    global cr
    cr = _q3()

    def _q4():
        _src = web_sales
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda ws, d: ((ws.ws_sold_date_sk == d.d_date_sk)),
                },
                {
                    "items": web_site,
                    "on": lambda ws, d, w: ((ws.ws_web_site_sk == w.web_site_sk)),
                },
            ],
            {
                "select": lambda ws, d, w: (ws, d, w),
                "where": lambda ws, d, w: (
                    ((d.d_date >= "1998-12-01") and (d.d_date <= "1998-12-15"))
                ),
            },
        )
        _groups = _group_by(_rows, lambda ws, d, w: (w.web_site_id))
        items = _groups
        return [
            {
                "channel": "web channel",
                "id": ("web_site" + str(g.key)),
                "sales": _sum([x[0].ws_ext_sales_price for x in g]),
                "returns": 0,
                "profit": _sum([x[0].ws_net_profit for x in g]),
                "profit_loss": 0,
            }
            for g in items
        ]

    global ws
    ws = _q4()

    def _q5():
        _src = web_returns
        _rows = _query(
            _src,
            [
                {
                    "items": web_sales,
                    "on": lambda wr, ws: (
                        (
                            (wr.wr_item_sk == ws.ws_item_sk)
                            and (wr.wr_order_number == ws.ws_order_number)
                        )
                    ),
                },
                {
                    "items": date_dim,
                    "on": lambda wr, ws, d: ((wr.wr_returned_date_sk == d.d_date_sk)),
                },
                {
                    "items": web_site,
                    "on": lambda wr, ws, d, w: ((ws.ws_web_site_sk == w.web_site_sk)),
                },
            ],
            {
                "select": lambda wr, ws, d, w: (wr, ws, d, w),
                "where": lambda wr, ws, d, w: (
                    ((d.d_date >= "1998-12-01") and (d.d_date <= "1998-12-15"))
                ),
            },
        )
        _groups = _group_by(_rows, lambda wr, ws, d, w: (w.web_site_id))
        items = _groups
        return [
            {
                "channel": "web channel",
                "id": ("web_site" + str(g.key)),
                "sales": 0,
                "returns": _sum([x[0].wr_return_amt for x in g]),
                "profit": 0,
                "profit_loss": _sum([x[0].wr_net_loss for x in g]),
            }
            for g in items
        ]

    global wr
    wr = _q5()
    global per_channel
    per_channel = _union_all(
        _union_all(_union_all(ss, sr), _union_all(cs, cr)), _union_all(ws, wr)
    )

    def _q6():
        _src = per_channel
        _rows = _query(_src, [], {"select": lambda p: (p)})
        _groups = _group_by(_rows, lambda p: ({"channel": p.channel, "id": p.id}))
        items = _groups
        items = sorted(items, key=lambda g: g.key.channel)
        return [
            {
                "channel": g.key.channel,
                "id": g.key.id,
                "sales": _sum([x[0].sales for x in g]),
                "returns": _sum([x[0].returns for x in g]),
                "profit": (
                    _sum([x[0].profit for x in g]) - _sum([x[0].profit_loss for x in g])
                ),
            }
            for g in items
        ]

    global result
    result = _q6()
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q5_empty()


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):
        items.sort(key=lambda it: opts["sortKey"](*it))
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    return sum(v)


def _union_all(a, b):
    return list(a) + list(b)


if __name__ == "__main__":
    main()
