# Generated by Mochi Python compiler
from __future__ import annotations

import json


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


class _Group:
    def __init__(self, key):
        self.key = key
        self.Items = []

    def __iter__(self):
        return iter(self.Items)


def _group_by(src, keyfn):
    groups = {}
    order = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and not m:
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sort_key(k):
    if isinstance(k, (list, tuple, dict)):
        return str(k)
    return k


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


def _union_all(a, b):
    return list(a) + list(b)


date_dim = None
store_sales = None
store_returns = None
catalog_sales = None
catalog_returns = None
web_sales = None
web_returns = None
ss = None
sr = None
cs = None
cr = None
ws = None
wr = None
per_channel = None
result = None


def test_TPCDS_Q77_simplified():
    assert result == [
        {
            "channel": "catalog channel",
            "id": 1,
            "sales": 150,
            "returns": 7,
            "profit": 12,
        },
        {"channel": "store channel", "id": 1, "sales": 100, "returns": 5, "profit": 9},
        {"channel": "web channel", "id": 1, "sales": 200, "returns": 10, "profit": 18},
    ]


def main():
    global date_dim
    date_dim = [{"d_date_sk": 1, "d_date": 1}]
    global store_sales
    store_sales = [
        {
            "ss_sold_date_sk": 1,
            "s_store_sk": 1,
            "ss_ext_sales_price": 100,
            "ss_net_profit": 10,
        }
    ]
    global store_returns
    store_returns = [
        {
            "sr_returned_date_sk": 1,
            "s_store_sk": 1,
            "sr_return_amt": 5,
            "sr_net_loss": 1,
        }
    ]
    global catalog_sales
    catalog_sales = [
        {
            "cs_sold_date_sk": 1,
            "cs_call_center_sk": 1,
            "cs_ext_sales_price": 150,
            "cs_net_profit": 15,
        }
    ]
    global catalog_returns
    catalog_returns = [
        {
            "cr_returned_date_sk": 1,
            "cr_call_center_sk": 1,
            "cr_return_amount": 7,
            "cr_net_loss": 3,
        }
    ]
    global web_sales
    web_sales = [
        {
            "ws_sold_date_sk": 1,
            "ws_web_page_sk": 1,
            "ws_ext_sales_price": 200,
            "ws_net_profit": 20,
        }
    ]
    global web_returns
    web_returns = [
        {
            "wr_returned_date_sk": 1,
            "wr_web_page_sk": 1,
            "wr_return_amt": 10,
            "wr_net_loss": 2,
        }
    ]

    def _q0():
        _src = store_sales
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda ss, d: (
                        (_get(d, "d_date_sk") == _get(ss, "ss_sold_date_sk"))
                    ),
                }
            ],
            {"select": lambda ss, d: (ss, d)},
        )
        _groups = _group_by(_rows, lambda ss, d: (_get(ss, "s_store_sk")))
        items = _groups
        return [
            {
                "s_store_sk": _get(g, "key"),
                "sales": _sum([_get(x[0], "ss_ext_sales_price") for x in g]),
                "profit": _sum([_get(x[0], "ss_net_profit") for x in g]),
            }
            for g in items
        ]

    global ss
    ss = _q0()

    def _q1():
        _src = store_returns
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda sr, d: (
                        (_get(d, "d_date_sk") == _get(sr, "sr_returned_date_sk"))
                    ),
                }
            ],
            {"select": lambda sr, d: (sr, d)},
        )
        _groups = _group_by(_rows, lambda sr, d: (_get(sr, "s_store_sk")))
        items = _groups
        return [
            {
                "s_store_sk": _get(g, "key"),
                "returns": _sum([_get(x[0], "sr_return_amt") for x in g]),
                "profit_loss": _sum([_get(x[0], "sr_net_loss") for x in g]),
            }
            for g in items
        ]

    global sr
    sr = _q1()

    def _q2():
        _src = catalog_sales
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda cs, d: (
                        (_get(d, "d_date_sk") == _get(cs, "cs_sold_date_sk"))
                    ),
                }
            ],
            {"select": lambda cs, d: (cs, d)},
        )
        _groups = _group_by(_rows, lambda cs, d: (_get(cs, "cs_call_center_sk")))
        items = _groups
        return [
            {
                "cs_call_center_sk": _get(g, "key"),
                "sales": _sum([_get(x[0], "cs_ext_sales_price") for x in g]),
                "profit": _sum([_get(x[0], "cs_net_profit") for x in g]),
            }
            for g in items
        ]

    global cs
    cs = _q2()

    def _q3():
        _src = catalog_returns
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda cr, d: (
                        (_get(d, "d_date_sk") == _get(cr, "cr_returned_date_sk"))
                    ),
                }
            ],
            {"select": lambda cr, d: (cr, d)},
        )
        _groups = _group_by(_rows, lambda cr, d: (_get(cr, "cr_call_center_sk")))
        items = _groups
        return [
            {
                "cr_call_center_sk": _get(g, "key"),
                "returns": _sum([_get(x[0], "cr_return_amount") for x in g]),
                "profit_loss": _sum([_get(x[0], "cr_net_loss") for x in g]),
            }
            for g in items
        ]

    global cr
    cr = _q3()

    def _q4():
        _src = web_sales
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda ws, d: (
                        (_get(d, "d_date_sk") == _get(ws, "ws_sold_date_sk"))
                    ),
                }
            ],
            {"select": lambda ws, d: (ws, d)},
        )
        _groups = _group_by(_rows, lambda ws, d: (_get(ws, "ws_web_page_sk")))
        items = _groups
        return [
            {
                "wp_web_page_sk": _get(g, "key"),
                "sales": _sum([_get(x[0], "ws_ext_sales_price") for x in g]),
                "profit": _sum([_get(x[0], "ws_net_profit") for x in g]),
            }
            for g in items
        ]

    global ws
    ws = _q4()

    def _q5():
        _src = web_returns
        _rows = _query(
            _src,
            [
                {
                    "items": date_dim,
                    "on": lambda wr, d: (
                        (_get(d, "d_date_sk") == _get(wr, "wr_returned_date_sk"))
                    ),
                }
            ],
            {"select": lambda wr, d: (wr, d)},
        )
        _groups = _group_by(_rows, lambda wr, d: (_get(wr, "wr_web_page_sk")))
        items = _groups
        return [
            {
                "wp_web_page_sk": _get(g, "key"),
                "returns": _sum([_get(x[0], "wr_return_amt") for x in g]),
                "profit_loss": _sum([_get(x[0], "wr_net_loss") for x in g]),
            }
            for g in items
        ]

    global wr
    wr = _q5()
    global per_channel
    per_channel = _union_all(
        _union_all(
            _query(
                ss,
                [
                    {
                        "items": sr,
                        "on": lambda s, r: (
                            (_get(s, "s_store_sk") == _get(r, "s_store_sk"))
                        ),
                        "left": True,
                    }
                ],
                {
                    "select": lambda s, r: {
                        "channel": "store channel",
                        "id": _get(s, "s_store_sk"),
                        "sales": _get(s, "sales"),
                        "returns": (0 if (r == None) else _get(r, "returns")),
                        "profit": (
                            _get(s, "profit")
                            - ((0 if (r == None) else _get(r, "profit_loss")))
                        ),
                    }
                },
            ),
            _query(
                cs,
                [
                    {
                        "items": cr,
                        "on": lambda c, r: (
                            (
                                _get(c, "cs_call_center_sk")
                                == _get(r, "cr_call_center_sk")
                            )
                        ),
                    }
                ],
                {
                    "select": lambda c, r: {
                        "channel": "catalog channel",
                        "id": _get(c, "cs_call_center_sk"),
                        "sales": _get(c, "sales"),
                        "returns": _get(r, "returns"),
                        "profit": (_get(c, "profit") - _get(r, "profit_loss")),
                    }
                },
            ),
        ),
        _query(
            ws,
            [
                {
                    "items": wr,
                    "on": lambda w, r: (
                        (_get(w, "wp_web_page_sk") == _get(r, "wp_web_page_sk"))
                    ),
                    "left": True,
                }
            ],
            {
                "select": lambda w, r: {
                    "channel": "web channel",
                    "id": _get(w, "wp_web_page_sk"),
                    "sales": _get(w, "sales"),
                    "returns": (0 if (r == None) else _get(r, "returns")),
                    "profit": (
                        _get(w, "profit")
                        - ((0 if (r == None) else _get(r, "profit_loss")))
                    ),
                }
            },
        ),
    )

    def _q6():
        _src = per_channel
        _rows = _query(_src, [], {"select": lambda p: (p)})
        _groups = _group_by(
            _rows, lambda p: ({"channel": _get(p, "channel"), "id": _get(p, "id")})
        )
        items = _groups
        items = sorted(items, key=lambda g: _sort_key(_get(_get(g, "key"), "channel")))
        return [
            {
                "channel": _get(_get(g, "key"), "channel"),
                "id": _get(_get(g, "key"), "id"),
                "sales": _sum([_get(x[0], "sales") for x in g]),
                "returns": _sum([_get(x[0], "returns") for x in g]),
                "profit": _sum([_get(x[0], "profit") for x in g]),
            }
            for g in items
        ]

    global result
    result = _q6()
    print(json.dumps(result, default=lambda o: vars(o)))
    test_TPCDS_Q77_simplified()


if __name__ == "__main__":
    main()
