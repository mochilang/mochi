# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:49:58Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    c_customer_id: str
    c_first_name: str
    c_last_name: str
    ctr_total_return: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    ctr_customer_sk: object
    ctr_state: object
    ctr_total_return: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    cust: int
    state: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto4:
    state: object
    avg_return: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_customer_id: str
    c_first_name: str
    c_last_name: str
    c_current_addr_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerAddres:
    ca_address_sk: int
    ca_state: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class WebReturn:
    wr_returning_customer_sk: int
    wr_returned_date_sk: int
    wr_return_amt: float
    wr_returning_addr_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_TPCDS_Q30_simplified():
    assert result == [
        Auto1(
            c_customer_id="C1",
            c_first_name="John",
            c_last_name="Doe",
            ctr_total_return=150.0,
        )
    ]


web_returns = [
    WebReturn(
        wr_returning_customer_sk=1,
        wr_returned_date_sk=1,
        wr_return_amt=100.0,
        wr_returning_addr_sk=1,
    ),
    WebReturn(
        wr_returning_customer_sk=2,
        wr_returned_date_sk=1,
        wr_return_amt=30.0,
        wr_returning_addr_sk=2,
    ),
    WebReturn(
        wr_returning_customer_sk=1,
        wr_returned_date_sk=1,
        wr_return_amt=50.0,
        wr_returning_addr_sk=1,
    ),
]
date_dim = [DateDim(d_date_sk=1, d_year=2000)]
customer_address = [
    CustomerAddres(ca_address_sk=1, ca_state="CA"),
    CustomerAddres(ca_address_sk=2, ca_state="CA"),
]
customer = [
    Customer(
        c_customer_sk=1,
        c_customer_id="C1",
        c_first_name="John",
        c_last_name="Doe",
        c_current_addr_sk=1,
    ),
    Customer(
        c_customer_sk=2,
        c_customer_id="C2",
        c_first_name="Jane",
        c_last_name="Smith",
        c_current_addr_sk=2,
    ),
]


def _q0():
    _src = web_returns
    _rows = _query(
        _src,
        [
            {
                "items": date_dim,
                "on": lambda wr, d: wr.wr_returned_date_sk == d.d_date_sk,
            },
            {
                "items": customer_address,
                "on": lambda wr, d, ca: wr.wr_returning_addr_sk == ca.ca_address_sk,
            },
        ],
        {
            "select": lambda wr, d, ca: (wr, d, ca),
            "where": lambda wr, d, ca: d.d_year == 2000 and ca.ca_state == "CA",
        },
    )
    _groups = _group_by(
        _rows,
        lambda wr, d, ca: Auto3(cust=wr.wr_returning_customer_sk, state=ca.ca_state),
    )
    _items1 = _groups
    return [
        Auto2(
            ctr_customer_sk=g.key["cust"],
            ctr_state=g.key["state"],
            ctr_total_return=sum([x[0].wr_return_amt for x in g]),
        )
        for g in _items1
    ]


customer_total_return = _q0()


def _q2():
    _groups = {}
    _order = []
    for ctr in customer_total_return:
        _k = ctr.ctr_state
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(ctr)
    _items1 = [_groups[k] for k in _order]
    return [
        Auto4(
            state=g.key,
            avg_return=(
                sum([x.ctr_total_return for x in g])
                / len([x.ctr_total_return for x in g])
                if [x.ctr_total_return for x in g]
                else 0
            ),
        )
        for g in _items1
    ]


avg_by_state = _q2()
result = _query(
    customer_total_return,
    [
        {"items": avg_by_state, "on": lambda ctr, avg: ctr.ctr_state == avg.state},
        {
            "items": customer,
            "on": lambda ctr, avg, c: ctr.ctr_customer_sk == c.c_customer_sk,
        },
    ],
    {
        "select": lambda ctr, avg, c: Auto1(
            c_customer_id=c.c_customer_id,
            c_first_name=c.c_first_name,
            c_last_name=c.c_last_name,
            ctr_total_return=ctr.ctr_total_return,
        ),
        "where": lambda ctr, avg, c: ctr.ctr_total_return > avg.avg_return * 1.2,
    },
)
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q30_simplified()
