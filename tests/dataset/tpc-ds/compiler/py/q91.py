# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:51:13Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    Call_Center: str
    Call_Center_Name: str
    Manager: str
    Returns_Loss: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    id: str
    name: str
    mgr: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CallCenter:
    cc_call_center_sk: int
    cc_call_center_id: str
    cc_name: str
    cc_manager: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogReturn:
    cr_call_center_sk: int
    cr_returned_date_sk: int
    cr_returning_customer_sk: int
    cr_net_loss: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_current_cdemo_sk: int
    c_current_hdemo_sk: int
    c_current_addr_sk: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerAddres:
    ca_address_sk: int
    ca_gmt_offset: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerDemographic:
    cd_demo_sk: int
    cd_marital_status: str
    cd_education_status: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int
    d_moy: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class HouseholdDemographic:
    hd_demo_sk: int
    hd_buy_potential: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _group_by(src: list[T], keyfn: Callable[[T], K]) -> list[_Group[K, T]]:
    groups: dict[str, _Group[K, T]] = {}
    order: list[str] = []
    for it in src:
        if isinstance(it, (list, tuple)):
            key = keyfn(*it)
        else:
            key = keyfn(it)
        if isinstance(key, dict):
            import types

            key = types.SimpleNamespace(**key)
        ks = str(key)
        g = groups.get(ks)
        if not g:
            g = _Group(key)
            groups[ks] = g
            order.append(ks)
        g.Items.append(it)
    return [groups[k] for k in order]


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


@dataclasses.dataclass
class CallCenter:
    cc_call_center_sk: int
    cc_call_center_id: str
    cc_name: str
    cc_manager: str

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CatalogReturn:
    cr_call_center_sk: int
    cr_returned_date_sk: int
    cr_returning_customer_sk: int
    cr_net_loss: float

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int
    d_moy: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Customer:
    c_customer_sk: int
    c_current_cdemo_sk: int
    c_current_hdemo_sk: int
    c_current_addr_sk: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerAddress:
    ca_address_sk: int
    ca_gmt_offset: int

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class CustomerDemographics:
    cd_demo_sk: int
    cd_marital_status: str
    cd_education_status: str

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class HouseholdDemographics:
    hd_demo_sk: int
    hd_buy_potential: str

    def __contains__(self, key):
        return hasattr(self, key)


def test_TPCDS_Q91_returns():
    assert result == Auto1(
        Call_Center="CC1", Call_Center_Name="Main", Manager="Alice", Returns_Loss=10.0
    )


call_center = [
    CallCenter(
        cc_call_center_sk=1, cc_call_center_id="CC1", cc_name="Main", cc_manager="Alice"
    )
]
catalog_returns = [
    CatalogReturn(
        cr_call_center_sk=1,
        cr_returned_date_sk=1,
        cr_returning_customer_sk=1,
        cr_net_loss=10.0,
    )
]
date_dim = [DateDim(d_date_sk=1, d_year=2001, d_moy=5)]
customer = [
    Customer(
        c_customer_sk=1, c_current_cdemo_sk=1, c_current_hdemo_sk=1, c_current_addr_sk=1
    )
]
customer_demographics = [
    CustomerDemographic(
        cd_demo_sk=1, cd_marital_status="M", cd_education_status="Unknown"
    )
]
household_demographics = [
    HouseholdDemographic(hd_demo_sk=1, hd_buy_potential="1001-5000")
]
customer_address = [CustomerAddres(ca_address_sk=1, ca_gmt_offset=-6)]


def _q0():
    _src = call_center
    _rows = _query(
        _src,
        [
            {
                "items": catalog_returns,
                "on": lambda cc, cr: cc.cc_call_center_sk == cr.cr_call_center_sk,
            },
            {
                "items": date_dim,
                "on": lambda cc, cr, d: cr.cr_returned_date_sk == d.d_date_sk,
            },
            {
                "items": customer,
                "on": lambda cc, cr, d, c: cr.cr_returning_customer_sk
                == c.c_customer_sk,
            },
            {
                "items": customer_demographics,
                "on": lambda cc, cr, d, c, cd: c.c_current_cdemo_sk == cd.cd_demo_sk,
            },
            {
                "items": household_demographics,
                "on": lambda cc, cr, d, c, cd, hd: c.c_current_hdemo_sk
                == hd.hd_demo_sk,
            },
            {
                "items": customer_address,
                "on": lambda cc, cr, d, c, cd, hd, ca: c.c_current_addr_sk
                == ca.ca_address_sk,
            },
        ],
        {
            "select": lambda cc, cr, d, c, cd, hd, ca: (cc, cr, d, c, cd, hd, ca),
            "where": lambda cc, cr, d, c, cd, hd, ca: (
                (
                    (
                        (d.d_year == 2001 and d.d_moy == 5)
                        and cd.cd_marital_status == "M"
                    )
                    and cd.cd_education_status == "Unknown"
                )
                and hd.hd_buy_potential == "1001-5000"
            )
            and ca.ca_gmt_offset == -6,
        },
    )
    _groups = _group_by(
        _rows,
        lambda cc, cr, d, c, cd, hd, ca: Auto2(
            id=cc.cc_call_center_id, name=cc.cc_name, mgr=cc.cc_manager
        ),
    )
    _items1 = _groups
    return [
        Auto1(
            Call_Center=g.key["id"],
            Call_Center_Name=g.key["name"],
            Manager=g.key["mgr"],
            Returns_Loss=_sum([x[1].cr_net_loss for x in g]),
        )
        for g in _items1
    ]


result = _q0()[0] if len(_q0()) > 0 else None
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q91_returns()
