# Generated by Mochi Python compiler
from __future__ import annotations

import json


def _get(obj, name):
    if isinstance(obj, dict):
        if name in obj:
            return obj[name]
    if hasattr(obj, name):
        return getattr(obj, name)
    if isinstance(obj, (list, tuple)):
        for it in obj:
            try:
                return _get(it, name)
            except Exception:
                pass
    raise Exception("field not found: " + name)


def _sum(v):
    if hasattr(v, "Items"):
        v = v.Items
    if not isinstance(v, list):
        raise Exception("sum() expects list or group")
    s = 0.0
    for it in v:
        if it is None:
            continue
        if isinstance(it, (int, float)):
            s += float(it)
        else:
            raise Exception("sum() expects numbers")
    return s


store_sales = None
catalog_sales = None
web_sales = None
total_profit = None


def test_TPCDS_Q80_sample():
    assert total_profit == 80


def main():
    global store_sales
    store_sales = [
        {"price": 20, "ret": 5},
        {"price": 10, "ret": 2},
        {"price": 5, "ret": 0},
    ]
    global catalog_sales
    catalog_sales = [{"price": 15, "ret": 3}, {"price": 8, "ret": 1}]
    global web_sales
    web_sales = [
        {"price": 25, "ret": 5},
        {"price": 15, "ret": 8},
        {"price": 8, "ret": 2},
    ]
    global total_profit
    total_profit = (
        _sum([(_get(s, "price") - _get(s, "ret")) for s in store_sales])
        + _sum([(_get(c, "price") - _get(c, "ret")) for c in catalog_sales])
    ) + _sum([(_get(w, "price") - _get(w, "ret")) for w in web_sales])
    print(json.dumps(total_profit, default=lambda o: vars(o)))
    test_TPCDS_Q80_sample()


if __name__ == "__main__":
    main()
