# Generated by Mochi compiler v0.10.27 on 2025-07-17T17:50:11Z
from __future__ import annotations
import dataclasses
import json


@dataclasses.dataclass
class Auto1:
    d_year: int
    i_category_id: int
    i_category: str
    sum_ss_ext_sales_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto2:
    d_year: int
    i_category_id: int
    i_category: str
    price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Auto3:
    d_year: int
    i_category_id: int
    i_category: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class DateDim:
    d_date_sk: int
    d_year: int
    d_moy: int

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class Item:
    i_item_sk: int
    i_manager_id: int
    i_category_id: int
    i_category: str

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


@dataclasses.dataclass
class StoreSale:
    sold_date_sk: int
    item_sk: int
    ext_sales_price: float

    def __getitem__(self, key):
        return getattr(self, key)

    def __contains__(self, key):
        return hasattr(self, key)


from typing import Any, TypeVar, Generic, Callable

T = TypeVar("T")
K = TypeVar("K")
UNDEFINED = object()


class _Group(Generic[K, T]):

    def __init__(self, key: K):
        self.key = key
        self.Items: list[T] = []
        self.items = self.Items

    def __iter__(self):
        return iter(self.Items)

    def __len__(self):
        return len(self.Items)


def _query(src, joins, opts):
    items = [[v] for v in src]
    for j in joins:
        joined = []
        if j.get("right") and j.get("left"):
            matched = [False] * len(j["items"])
            for left in items:
                m = False
                for ri, right in enumerate(j["items"]):
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    matched[ri] = True
                    joined.append(left + [right])
                if not m:
                    joined.append(left + [None])
            for ri, right in enumerate(j["items"]):
                if not matched[ri]:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        elif j.get("right"):
            for right in j["items"]:
                m = False
                for left in items:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if not m:
                    undef = [None] * (len(items[0]) if items else 0)
                    joined.append(undef + [right])
        else:
            for left in items:
                m = False
                for right in j["items"]:
                    keep = True
                    if j.get("on"):
                        keep = j["on"](*left, right)
                    if not keep:
                        continue
                    m = True
                    joined.append(left + [right])
                if j.get("left") and (not m):
                    joined.append(left + [None])
        items = joined
    if opts.get("where"):
        items = [r for r in items if opts["where"](*r)]
    if opts.get("sortKey"):

        def _key(it):
            k = opts["sortKey"](*it)
            if isinstance(k, (list, tuple, dict)):
                return str(k)
            return k

        items.sort(key=_key)
    if "skip" in opts:
        n = opts["skip"]
        if n < 0:
            n = 0
        items = items[n:] if n < len(items) else []
    if "take" in opts:
        n = opts["take"]
        if n < 0:
            n = 0
        items = items[:n] if n < len(items) else items
    res = []
    for r in items:
        res.append(opts["select"](*r))
    return res


def test_TPCDS_Q42_simplified():
    assert result == [
        Auto1(
            d_year=2020,
            i_category_id=200,
            i_category="CatB",
            sum_ss_ext_sales_price=20.0,
        ),
        Auto1(
            d_year=2020,
            i_category_id=100,
            i_category="CatA",
            sum_ss_ext_sales_price=10.0,
        ),
    ]


store_sales = [
    StoreSale(sold_date_sk=1, item_sk=1, ext_sales_price=10.0),
    StoreSale(sold_date_sk=1, item_sk=2, ext_sales_price=20.0),
    StoreSale(sold_date_sk=2, item_sk=1, ext_sales_price=15.0),
]
item = [
    Item(i_item_sk=1, i_manager_id=1, i_category_id=100, i_category="CatA"),
    Item(i_item_sk=2, i_manager_id=1, i_category_id=200, i_category="CatB"),
]
date_dim = [
    DateDim(d_date_sk=1, d_year=2020, d_moy=5),
    DateDim(d_date_sk=2, d_year=2021, d_moy=5),
]
month = 5
year = 2020
records = _query(
    date_dim,
    [
        {"items": store_sales, "on": lambda dt, ss: ss.sold_date_sk == dt.d_date_sk},
        {"items": item, "on": lambda dt, ss, it: ss.item_sk == it.i_item_sk},
    ],
    {
        "select": lambda dt, ss, it: Auto2(
            d_year=dt.d_year,
            i_category_id=it.i_category_id,
            i_category=it.i_category,
            price=ss.ext_sales_price,
        ),
        "where": lambda dt, ss, it: (it.i_manager_id == 1 and dt.d_moy == month)
        and dt.d_year == year,
    },
)


def _q0():
    _groups = {}
    _order = []
    for r in records:
        _k = Auto3(
            d_year=r.d_year, i_category_id=r.i_category_id, i_category=r.i_category
        )
        _ks = str(_k)
        g = _groups.get(_ks)
        if not g:
            g = _Group(_k)
            _groups[_ks] = g
            _order.append(_ks)
        g.Items.append(r)
    _items1 = [_groups[k] for k in _order]
    return [
        Auto1(
            d_year=g.key["d_year"],
            i_category_id=g.key["i_category_id"],
            i_category=g.key["i_category"],
            sum_ss_ext_sales_price=sum([x.price for x in g]),
        )
        for g in _items1
    ]


grouped = _q0()
base = [
    g for g in sorted([g for g in grouped], key=lambda g: -g.sum_ss_ext_sales_price)
]
result = base
print(json.dumps(result, separators=(",", ":"), default=lambda o: vars(o)))
test_TPCDS_Q42_simplified()
