import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

func test_TPCDS_Q68_simplified() {
  expect(result == 68)
}

let catalog_sales: [[String: Int]] = [["item": 1, "profit": 30], ["item": 2, "profit": 38]]
let store_sales: [[String: Int]] = [["item": 1, "profit": 30]]
let result =
  _sum(
    ({
      var _res: [Int] = []
      for c in catalog_sales {
        _res.append(c["profit"]!)
      }
      var _items = _res
      return _items
    }()).map { Double($0) })
  - _sum(
    ({
      var _res: [Int] = []
      for s in store_sales {
        _res.append(s["profit"]!)
      }
      var _items = _res
      return _items
    }()).map { Double($0) }) + 30
func main() {
  _json(result)
  test_TPCDS_Q68_simplified()
}
main()
