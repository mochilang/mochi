// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:06:05Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
struct Auto1: Equatable {
    var ss_cdemo_sk: Int
    var ss_coupon_amt: Double
    var ss_item_sk: Int
    var ss_list_price: Double
    var ss_quantity: Int
    var ss_sales_price: Double
    var ss_sold_date_sk: Int
    var ss_store_sk: Int
}

struct Auto2: Equatable {
    var cd_demo_sk: Int
    var cd_education_status: String
    var cd_gender: String
    var cd_marital_status: String
}

struct Auto3: Equatable {
    var d_date_sk: Int
    var d_year: Int
}

struct Auto4: Equatable {
    var s_state: String
    var s_store_sk: Int
}

struct Auto5: Equatable {
    var i_item_id: String
    var i_item_sk: Int
}

struct Auto6: Equatable {
    var agg1: Double
    var agg2: Double
    var agg3: Double
    var agg4: Double
    var i_item_id: String
    var s_state: String
}

struct StoreSale: Equatable {
    var ss_item_sk: Int
    var ss_store_sk: Int
    var ss_cdemo_sk: Int
    var ss_sold_date_sk: Int
    var ss_quantity: Int
    var ss_list_price: Double
    var ss_coupon_amt: Double
    var ss_sales_price: Double
}
struct CustomerDemo: Equatable {
    var cd_demo_sk: Int
    var cd_gender: String
    var cd_marital_status: String
    var cd_education_status: String
}
struct DateDim: Equatable {
    var d_date_sk: Int
    var d_year: Int
}
struct Store: Equatable {
    var s_store_sk: Int
    var s_state: String
}
struct Item: Equatable {
    var i_item_sk: Int
    var i_item_id: String
}
var store_sales = [Auto1(ss_cdemo_sk: 1, ss_coupon_amt: 10.0, ss_item_sk: 1, ss_list_price: 100.0, ss_quantity: 5, ss_sales_price: 90.0, ss_sold_date_sk: 1, ss_store_sk: 1), Auto1(ss_cdemo_sk: 2, ss_coupon_amt: 5.0, ss_item_sk: 2, ss_list_price: 50.0, ss_quantity: 2, ss_sales_price: 45.0, ss_sold_date_sk: 1, ss_store_sk: 2)]
var customer_demographics = [Auto2(cd_demo_sk: 1, cd_education_status: "College", cd_gender: "F", cd_marital_status: "M"), Auto2(cd_demo_sk: 2, cd_education_status: "College", cd_gender: "M", cd_marital_status: "S")]
var date_dim = [Auto3(d_date_sk: 1, d_year: 2000)]
var store = [Auto4(s_state: "CA", s_store_sk: 1), Auto4(s_state: "TX", s_store_sk: 2)]
var item = [Auto5(i_item_id: "ITEM1", i_item_sk: 1), Auto5(i_item_id: "ITEM2", i_item_sk: 2)]
var result = { () -> [Any] in
	var _groups: [String:_Group] = [:]
	var _order: [String] = []
	for ss in store_sales {
		for cd in customer_demographics {
			if !(ss.ss_cdemo_sk == cd.cd_demo_sk) { continue }
			for d in date_dim {
				if !(ss.ss_sold_date_sk == d.d_date_sk) { continue }
				for s in store {
					if !(ss.ss_store_sk == s.s_store_sk) { continue }
					for i in item {
						if !(ss.ss_item_sk == i.i_item_sk) { continue }
						if !(["CA"].contains(cd.cd_gender == "F" && cd.cd_marital_status == "M" && cd.cd_education_status == "College" && d.d_year == 2000 && s.s_state)) { continue }
						let _k = ["item_id": i.i_item_id, "state": s.s_state]
						let _ks = _keyStr(_k)
						if _groups[_ks] == nil {
						    _groups[_ks] = _Group(_k)
						    _order.append(_ks)
						}
						_groups[_ks]!.Items.append(["ss": ss, "cd": cd, "d": d, "s": s, "i": i])
					}
				}
			}
		}
	}
	var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
	for k in _order {
	    if let g = _groups[k] {
	        _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
	    }
	}
	_tmp.sort { [($0.key["item_id"] as! String), ($0.key["state"] as! String)] < [($1.key["item_id"] as! String), ($1.key["state"] as! String)] }
	return _tmp.map { g in ["i_item_id": (g.key["item_id"] as! String), "s_state": (g.key["state"] as! String), "agg1": _avg(g.items.map { x in x["ss_quantity"]! }), "agg2": _avg(g.items.map { x in x["ss_list_price"]! }), "agg3": _avg(g.items.map { x in x["ss_coupon_amt"]! }), "agg4": _avg(g.items.map { x in x["ss_sales_price"]! })] }
}())
_json(result)
expect(_equal(result, [Auto6(agg1: 5.0, agg2: 100.0, agg3: 10.0, agg4: 90.0, i_item_id: "ITEM1", s_state: "CA")]))
