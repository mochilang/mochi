// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:06:15Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
struct Auto1: Equatable {
    var avg_monthly_sales: Double
    var d_year: Int
    var item: String
    var sum_sales: Double
}

var v2 = [Auto1(avg_monthly_sales: 100.0, d_year: 2020, item: "A", sum_sales: 120.0), Auto1(avg_monthly_sales: 80.0, d_year: 2020, item: "B", sum_sales: 70.0), Auto1(avg_monthly_sales: 50.0, d_year: 2019, item: "C", sum_sales: 60.0)]
let year = 2020
let orderby = "item"
func abs(_ x: Double) -> Double {
    if x >= 0.0 {
        return x
    }
    else {
        return -x
    }
}
var result = v2.compactMap { v in v.d_year >= year - 1 && v.avg_monthly_sales > 0 && v.sum_sales > v.avg_monthly_sales && abs(v.sum_sales - v.avg_monthly_sales) / v.avg_monthly_sales > 0.1 ? (["d_year": v.d_year, "item": v.item, "avg_monthly_sales": v.avg_monthly_sales, "sum_sales": v.sum_sales]) : nil }.sorted { [$0.sum_sales - $0.avg_monthly_sales, $0.item] < [$1.sum_sales - $1.avg_monthly_sales, $1.item] }
_json(result)
expect(_equal(result, [Auto1(avg_monthly_sales: 50.0, d_year: 2019, item: "C", sum_sales: 60.0), Auto1(avg_monthly_sales: 100.0, d_year: 2020, item: "A", sum_sales: 120.0)]))
