// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:06:11Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var date_sk: Int
    var item_sk: Int
    var order: Int
    var price: Double
    var warehouse_sk: Int
}

struct Auto2: Equatable {
    var item_sk: Int
    var order: Int
    var refunded: Double
}

struct Auto3: Equatable {
    var current_price: Double
    var item_id: String
    var item_sk: Int
}

struct Auto4: Equatable {
    var state: String
    var warehouse_sk: Int
}

struct Auto5: Equatable {
    var date: String
    var date_sk: Int
}

struct Auto7: Equatable {
    var i_item_id: String
    var sales_after: Double
    var sales_before: Double
    var w_state: String
}

struct Record: Equatable {
    var i_item_id: String
    var net: Double
    var sold_date: String
    var w_state: String
}

var catalog_sales = [Auto1(date_sk: 1, item_sk: 1, order: 1, price: 100.0, warehouse_sk: 1), Auto1(date_sk: 2, item_sk: 1, order: 2, price: 150.0, warehouse_sk: 1)]
var catalog_returns = [Auto2(item_sk: 1, order: 2, refunded: 150.0)]
var item = [Auto3(current_price: 1.2, item_id: "I1", item_sk: 1)]
var warehouse = [Auto4(state: "CA", warehouse_sk: 1)]
var date_dim = [Auto5(date: "2020-01-10", date_sk: 1), Auto5(date: "2020-01-20", date_sk: 2)]
let sales_date = "2020-01-15"
var records = ({
	var _res: [(i_item_id: String, net: Double, sold_date: String, w_state: String)] = []
	for cs in catalog_sales {
		for cr in catalog_returns {
			if !(cs.order == cr.order && cs.item_sk == cr.item_sk) { continue }
			for w in warehouse {
				if !(cs.warehouse_sk == w.warehouse_sk) { continue }
				for i in item {
					if !(cs.item_sk == i.item_sk) { continue }
					for d in date_dim {
						if !(cs.date_sk == d.date_sk) { continue }
						if !(i.current_price >= 0.99 && i.current_price <= 1.49) { continue }
						_res.append(["w_state": w.state, "i_item_id": i.item_id, "sold_date": d.date, "net": cs.price - Double((cr == nil ? 0.0 : cr.refunded))])
					}
				}
			}
		}
	}
	return _res
}())
var result = { () -> [Any] in
    var _groups: [String:_Group] = [:]
    var _order: [String] = []
    for r in records {
        let _k = ["w_state": r.w_state, "i_item_id": r.i_item_id]
        let _ks = _keyStr(_k)
        if _groups[_ks] == nil {
            _groups[_ks] = _Group(_k)
            _order.append(_ks)
        }
        _groups[_ks]!.Items.append(r)
    }
    var _tmp: [(key: [String:Any], items: [Record])] = []
    for k in _order {
        if let g = _groups[k] {
            _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! Record }))
        }
    }
    return _tmp.map { g in ["w_state": (g.key["w_state"] as! String), "i_item_id": (g.key["i_item_id"] as! String), "sales_before": _sum(g.items.map { x in x.sold_date < sales_date ? x.net : 0.0 }), "sales_after": _sum(g.items.map { x in x.sold_date >= sales_date ? x.net : 0.0 })] }
}()
_json(result)
expect(_equal(result, [Auto7(i_item_id: "I1", sales_after: 0.0, sales_before: 100.0, w_state: "CA")]))
