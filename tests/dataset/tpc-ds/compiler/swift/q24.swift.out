// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:05:49Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var ss_customer_sk: Int
    var ss_item_sk: Int
    var ss_net_paid: Double
    var ss_store_sk: Int
    var ss_ticket_number: Int
}

struct Auto2: Equatable {
    var sr_item_sk: Int
    var sr_ticket_number: Int
}

struct Auto3: Equatable {
    var s_market_id: Int
    var s_state: String
    var s_store_name: String
    var s_store_sk: Int
    var s_zip: String
}

struct Auto4: Equatable {
    var i_color: String
    var i_current_price: Double
    var i_item_sk: Int
    var i_manager_id: Int
    var i_size: String
    var i_units: String
}

struct Auto5: Equatable {
    var c_birth_country: String
    var c_current_addr_sk: Int
    var c_customer_sk: Int
    var c_first_name: String
    var c_last_name: String
}

struct Auto6: Equatable {
    var ca_address_sk: Int
    var ca_country: String
    var ca_state: String
    var ca_zip: String
}

struct Auto7: Equatable {
    var c_first_name: String
    var c_last_name: String
    var paid: Double
    var s_store_name: String
}

struct StoreSale: Equatable {
    var ss_ticket_number: Int
    var ss_item_sk: Int
    var ss_customer_sk: Int
    var ss_store_sk: Int
    var ss_net_paid: Double
}
struct StoreReturn: Equatable {
    var sr_ticket_number: Int
    var sr_item_sk: Int
}
struct Store: Equatable {
    var s_store_sk: Int
    var s_store_name: String
    var s_market_id: Int
    var s_state: String
    var s_zip: String
}
struct Item: Equatable {
    var i_item_sk: Int
    var i_color: String
    var i_current_price: Double
    var i_manager_id: Int
    var i_units: String
    var i_size: String
}
struct Customer: Equatable {
    var c_customer_sk: Int
    var c_first_name: String
    var c_last_name: String
    var c_current_addr_sk: Int
    var c_birth_country: String
}
struct CustomerAddress: Equatable {
    var ca_address_sk: Int
    var ca_state: String
    var ca_country: String
    var ca_zip: String
}
var store_sales = [Auto1(ss_customer_sk: 1, ss_item_sk: 1, ss_net_paid: 100.0, ss_store_sk: 1, ss_ticket_number: 1), Auto1(ss_customer_sk: 2, ss_item_sk: 2, ss_net_paid: 50.0, ss_store_sk: 1, ss_ticket_number: 2)]
var store_returns = [Auto2(sr_item_sk: 1, sr_ticket_number: 1), Auto2(sr_item_sk: 2, sr_ticket_number: 2)]
var store = [Auto3(s_market_id: 5, s_state: "CA", s_store_name: "Store1", s_store_sk: 1, s_zip: "12345")]
var item = [Auto4(i_color: "RED", i_current_price: 10.0, i_item_sk: 1, i_manager_id: 1, i_size: "M", i_units: "EA"), Auto4(i_color: "BLUE", i_current_price: 20.0, i_item_sk: 2, i_manager_id: 2, i_size: "L", i_units: "EA")]
var customer = [Auto5(c_birth_country: "Canada", c_current_addr_sk: 1, c_customer_sk: 1, c_first_name: "Ann", c_last_name: "Smith"), Auto5(c_birth_country: "USA", c_current_addr_sk: 2, c_customer_sk: 2, c_first_name: "Bob", c_last_name: "Jones")]
var customer_address = [Auto6(ca_address_sk: 1, ca_country: "USA", ca_state: "CA", ca_zip: "12345"), Auto6(ca_address_sk: 2, ca_country: "USA", ca_state: "CA", ca_zip: "54321")]
var ssales = { () -> [Any] in
	var _groups: [String:_Group] = [:]
	var _order: [String] = []
	for ss in store_sales {
		for sr in store_returns {
			if !(ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk) { continue }
			for s in store {
				if !(ss.ss_store_sk == s.s_store_sk) { continue }
				for i in item {
					if !(ss.ss_item_sk == i.i_item_sk) { continue }
					for c in customer {
						if !(ss.ss_customer_sk == c.c_customer_sk) { continue }
						for ca in customer_address {
							if !(c.c_current_addr_sk == ca.ca_address_sk) { continue }
							if !(c.c_birth_country != strings.ToUpper(ca.ca_country) && s.s_zip == ca.ca_zip && s.s_market_id == 5) { continue }
							let _k = ["last": c.c_last_name, "first": c.c_first_name, "store_name": s.s_store_name, "color": i.i_color]
							let _ks = _keyStr(_k)
							if _groups[_ks] == nil {
							    _groups[_ks] = _Group(_k)
							    _order.append(_ks)
							}
							_groups[_ks]!.Items.append(["ss": ss, "sr": sr, "s": s, "i": i, "c": c, "ca": ca])
						}
					}
				}
			}
		}
	}
	var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
	for k in _order {
	    if let g = _groups[k] {
	        _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
	    }
	}
	return _tmp.map { g in ["c_last_name": (g.key["last"] as! String), "c_first_name": (g.key["first"] as! String), "s_store_name": (g.key["store_name"] as! String), "color": (g.key["color"] as! String), "netpaid": _sum(g.items.map { x in x["ss_net_paid"]! })] }
}())
let avg_paid = _avg(ssales.map { x in x["netpaid"]! })
var result = ssales.compactMap { x in x["color"]! == "RED" && x["netpaid"]! > 0.05 * avg_paid ? (["c_last_name": x["c_last_name"]!, "c_first_name": x["c_first_name"]!, "s_store_name": x["s_store_name"]!, "paid": x["netpaid"]!]) : nil }.sorted { [$0.c_last_name, $0.c_first_name, $0.s_store_name] < [$1.c_last_name, $1.c_first_name, $1.s_store_name] }
_json(result)
expect(_equal(result, [Auto7(c_first_name: "Ann", c_last_name: "Smith", paid: 100.0, s_store_name: "Store1")]))
