import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

struct StoreSale {
  var ss_ticket_number: Int
  var ss_item_sk: Int
  var ss_customer_sk: Int
  var ss_store_sk: Int
  var ss_net_paid: Double
}

struct StoreReturn {
  var sr_ticket_number: Int
  var sr_item_sk: Int
}

struct Store {
  var s_store_sk: Int
  var s_store_name: String
  var s_market_id: Int
  var s_state: String
  var s_zip: String
}

struct Item {
  var i_item_sk: Int
  var i_color: String
  var i_current_price: Double
  var i_manager_id: Int
  var i_units: String
  var i_size: String
}

struct Customer {
  var c_customer_sk: Int
  var c_first_name: String
  var c_last_name: String
  var c_current_addr_sk: Int
  var c_birth_country: String
}

struct CustomerAddress {
  var ca_address_sk: Int
  var ca_state: String
  var ca_country: String
  var ca_zip: String
}

func test_TPCDS_Q24_customer_net_paid() {
  expect(
    result == [
      ["c_last_name": "Smith", "c_first_name": "Ann", "s_store_name": "Store1", "paid": 100]
    ])
}

let store_sales = [
  [
    "ss_ticket_number": 1, "ss_item_sk": 1, "ss_customer_sk": 1, "ss_store_sk": 1,
    "ss_net_paid": 100,
  ],
  [
    "ss_ticket_number": 2, "ss_item_sk": 2, "ss_customer_sk": 2, "ss_store_sk": 1,
    "ss_net_paid": 50,
  ],
]
let store_returns: [[String: Int]] = [
  ["sr_ticket_number": 1, "sr_item_sk": 1], ["sr_ticket_number": 2, "sr_item_sk": 2],
]
let store = [
  ["s_store_sk": 1, "s_store_name": "Store1", "s_market_id": 5, "s_state": "CA", "s_zip": "12345"]
]
let item = [
  [
    "i_item_sk": 1, "i_color": "RED", "i_current_price": 10, "i_manager_id": 1, "i_units": "EA",
    "i_size": "M",
  ],
  [
    "i_item_sk": 2, "i_color": "BLUE", "i_current_price": 20, "i_manager_id": 2, "i_units": "EA",
    "i_size": "L",
  ],
]
let customer = [
  [
    "c_customer_sk": 1, "c_first_name": "Ann", "c_last_name": "Smith", "c_current_addr_sk": 1,
    "c_birth_country": "Canada",
  ],
  [
    "c_customer_sk": 2, "c_first_name": "Bob", "c_last_name": "Jones", "c_current_addr_sk": 2,
    "c_birth_country": "USA",
  ],
]
let customer_address = [
  ["ca_address_sk": 1, "ca_state": "CA", "ca_country": "USA", "ca_zip": "12345"],
  ["ca_address_sk": 2, "ca_state": "CA", "ca_country": "USA", "ca_zip": "54321"],
]
let ssales =
  ({
    var _res: [[String: Any]] = []
    for ss in store_sales {
      for sr in store_returns {
        if !(ss["ss_ticket_number"]! == sr["sr_ticket_number"]!
          && ss["ss_item_sk"]! == sr["sr_item_sk"]!)
        {
          continue
        }
        for s in store {
          if !(ss["ss_store_sk"]! == s["s_store_sk"]!) { continue }
          for i in item {
            if !(ss["ss_item_sk"]! == i["i_item_sk"]!) { continue }
            for c in customer {
              if !(ss["ss_customer_sk"]! == c["c_customer_sk"]!) { continue }
              for ca in customer_address {
                if !(c["c_current_addr_sk"]! == ca["ca_address_sk"]!) { continue }
                if c["c_birth_country"]! != strings.ToUpper(ca["ca_country"]!)
                  && s["s_zip"]! == ca["ca_zip"]! && s["s_market_id"]! == 5
                {
                  _res.append([
                    "c_last_name": g.key.last, "c_first_name": g.key.first,
                    "s_store_name": g.key.store_name, "color": g.key.color,
                    "netpaid": _sum(
                      ({
                        var _res: [Any] = []
                        for x in g {
                          _res.append(x.ss_net_paid)
                        }
                        var _items = _res
                        return _items
                      }()).map { Double($0) }),
                  ])
                }
              }
            }
          }
        }
      }
    }
    var _items = _res
    return _items
  }())
let avg_paid = _avg(
  ({
    var _res: [Any] = []
    for x in ssales {
      _res.append(x["netpaid"]!)
    }
    var _items = _res
    return _items
  }()).map { Double($0) })
let result =
  ({
    var _pairs: [(item: [String: Any], key: Any)] = []
    for x in ssales {
      if x["color"]! == "RED" && x["netpaid"]! > 0.05 * avg_paid {
        _pairs.append(
          (
            item: [
              "c_last_name": x["c_last_name"]!, "c_first_name": x["c_first_name"]!,
              "s_store_name": x["s_store_name"]!, "paid": x["netpaid"]!,
            ], key: [x["c_last_name"]!, x["c_first_name"]!, x["s_store_name"]!]
          ))
      }
    }
    _pairs.sort { a, b in
      if let ai = a.key as? Int, let bi = b.key as? Int { return ai < bi }
      if let af = a.key as? Double, let bf = b.key as? Double { return af < bf }
      if let ai = a.key as? Int, let bf = b.key as? Double { return Double(ai) < bf }
      if let af = a.key as? Double, let bi = b.key as? Int { return af < Double(bi) }
      if let sa = a.key as? String, let sb = b.key as? String { return sa < sb }
      return String(describing: a.key) < String(describing: b.key)
    }
    var _items = _pairs.map { $0.item }
    return _items
  }())
func main() {
  _json(result)
  test_TPCDS_Q24_customer_net_paid()
}
main()
