// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:06:03Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var ss_customer_sk: Int
    var ss_item_sk: Int
    var ss_net_profit: Double
    var ss_sold_date_sk: Int
    var ss_store_sk: Int
    var ss_ticket_number: Int
}

struct Auto2: Equatable {
    var sr_customer_sk: Int
    var sr_item_sk: Int
    var sr_net_loss: Double
    var sr_returned_date_sk: Int
    var sr_ticket_number: Int
}

struct Auto3: Equatable {
    var cs_bill_customer_sk: Int
    var cs_item_sk: Int
    var cs_net_profit: Double
    var cs_sold_date_sk: Int
}

struct Auto4: Equatable {
    var d_date_sk: Int
    var d_moy: Int
    var d_year: Int
}

struct Auto5: Equatable {
    var s_store_id: String
    var s_store_name: String
    var s_store_sk: Int
}

struct Auto6: Equatable {
    var i_item_desc: String
    var i_item_id: String
    var i_item_sk: Int
}

struct Auto7: Equatable {
    var catalog_sales_profit: Double
    var i_item_desc: String
    var i_item_id: String
    var s_store_id: String
    var s_store_name: String
    var store_returns_loss: Double
    var store_sales_profit: Double
}

struct StoreSale: Equatable {
    var ss_sold_date_sk: Int
    var ss_item_sk: Int
    var ss_store_sk: Int
    var ss_customer_sk: Int
    var ss_net_profit: Double
    var ss_ticket_number: Int
}
struct StoreReturn: Equatable {
    var sr_returned_date_sk: Int
    var sr_item_sk: Int
    var sr_customer_sk: Int
    var sr_ticket_number: Int
    var sr_net_loss: Double
}
struct CatalogSale: Equatable {
    var cs_sold_date_sk: Int
    var cs_item_sk: Int
    var cs_bill_customer_sk: Int
    var cs_net_profit: Double
}
struct DateDim: Equatable {
    var d_date_sk: Int
    var d_moy: Int
    var d_year: Int
}
struct Store: Equatable {
    var s_store_sk: Int
    var s_store_id: String
    var s_store_name: String
}
struct Item: Equatable {
    var i_item_sk: Int
    var i_item_id: String
    var i_item_desc: String
}
var store_sales = [Auto1(ss_customer_sk: 1, ss_item_sk: 1, ss_net_profit: 50.0, ss_sold_date_sk: 1, ss_store_sk: 1, ss_ticket_number: 1), Auto1(ss_customer_sk: 2, ss_item_sk: 2, ss_net_profit: 20.0, ss_sold_date_sk: 1, ss_store_sk: 1, ss_ticket_number: 2)]
var store_returns = [Auto2(sr_customer_sk: 1, sr_item_sk: 1, sr_net_loss: 10.0, sr_returned_date_sk: 2, sr_ticket_number: 1), Auto2(sr_customer_sk: 2, sr_item_sk: 2, sr_net_loss: 5.0, sr_returned_date_sk: 2, sr_ticket_number: 2)]
var catalog_sales = [Auto3(cs_bill_customer_sk: 1, cs_item_sk: 1, cs_net_profit: 30.0, cs_sold_date_sk: 3), Auto3(cs_bill_customer_sk: 2, cs_item_sk: 2, cs_net_profit: 15.0, cs_sold_date_sk: 3)]
var date_dim = [Auto4(d_date_sk: 1, d_moy: 4, d_year: 2000), Auto4(d_date_sk: 2, d_moy: 5, d_year: 2000), Auto4(d_date_sk: 3, d_moy: 6, d_year: 2000)]
var store = [Auto5(s_store_id: "S1", s_store_name: "Store1", s_store_sk: 1)]
var item = [Auto6(i_item_desc: "Desc1", i_item_id: "ITEM1", i_item_sk: 1), Auto6(i_item_desc: "Desc2", i_item_id: "ITEM2", i_item_sk: 2)]
var result = { () -> [Any] in
	var _groups: [String:_Group] = [:]
	var _order: [String] = []
	for ss in store_sales {
		for sr in store_returns {
			if !(ss.ss_ticket_number == sr.sr_ticket_number && ss.ss_item_sk == sr.sr_item_sk) { continue }
			for cs in catalog_sales {
				if !(sr.sr_customer_sk == cs.cs_bill_customer_sk && sr.sr_item_sk == cs.cs_item_sk) { continue }
				for d1 in date_dim {
					if !(d1.d_date_sk == ss.ss_sold_date_sk) { continue }
					for d2 in date_dim {
						if !(d2.d_date_sk == sr.sr_returned_date_sk) { continue }
						for d3 in date_dim {
							if !(d3.d_date_sk == cs.cs_sold_date_sk) { continue }
							for s in store {
								if !(s.s_store_sk == ss.ss_store_sk) { continue }
								for i in item {
									if !(i.i_item_sk == ss.ss_item_sk) { continue }
									if !(d1.d_moy == 4 && d1.d_year == 2000 && d2.d_moy >= 4 && d2.d_moy <= 10 && d3.d_moy >= 4 && d3.d_moy <= 10) { continue }
									let _k = ["item_id": i.i_item_id, "item_desc": i.i_item_desc, "s_store_id": s.s_store_id, "s_store_name": s.s_store_name]
									let _ks = _keyStr(_k)
									if _groups[_ks] == nil {
									    _groups[_ks] = _Group(_k)
									    _order.append(_ks)
									}
									_groups[_ks]!.Items.append(["ss": ss, "sr": sr, "cs": cs, "d1": d1, "d2": d2, "d3": d3, "s": s, "i": i])
								}
							}
						}
					}
				}
			}
		}
	}
	var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
	for k in _order {
	    if let g = _groups[k] {
	        _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
	    }
	}
	return _tmp.map { g in ["i_item_id": (g.key["item_id"] as! String), "i_item_desc": (g.key["item_desc"] as! String), "s_store_id": (g.key["s_store_id"] as! String), "s_store_name": (g.key["s_store_name"] as! String), "store_sales_profit": _sum(g.items.map { x in x["ss_net_profit"]! }), "store_returns_loss": _sum(g.items.map { x in x["sr_net_loss"]! }), "catalog_sales_profit": _sum(g.items.map { x in x["cs_net_profit"]! })] }
}())
_json(result)
expect(_equal(result, [Auto7(catalog_sales_profit: 30.0, i_item_desc: "Desc1", i_item_id: "ITEM1", s_store_id: "S1", s_store_name: "Store1", store_returns_loss: 10.0, store_sales_profit: 50.0), Auto7(catalog_sales_profit: 15.0, i_item_desc: "Desc2", i_item_id: "ITEM2", s_store_id: "S1", s_store_name: "Store1", store_returns_loss: 5.0, store_sales_profit: 20.0)]))
