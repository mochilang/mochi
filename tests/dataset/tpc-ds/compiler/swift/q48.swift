// Generated by Mochi compiler v0.10.26 on 2006-01-02T15:04:05Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct CustomerAddres: Equatable {
    var ca_address_sk: Int
    var ca_country: String
    var ca_state: String
}

struct CustomerDemographic: Equatable {
    var cd_demo_sk: Int
    var cd_education_status: String
    var cd_marital_status: String
}

struct DateDim: Equatable {
    var d_date_sk: Int
    var d_year: Int
}

struct Store: Equatable {
    var s_store_sk: Int
}

struct StoreSale: Equatable {
    var addr_sk: Int
    var cdemo_sk: Int
    var net_profit: Int
    var quantity: Int
    var sales_price: Int
    var sold_date_sk: Int
}

var store_sales = [StoreSale(addr_sk: 1, cdemo_sk: 1, net_profit: 1000.0, quantity: 5, sales_price: 120.0, sold_date_sk: 1), StoreSale(addr_sk: 2, cdemo_sk: 2, net_profit: 2000.0, quantity: 10, sales_price: 60.0, sold_date_sk: 1), StoreSale(addr_sk: 3, cdemo_sk: 3, net_profit: 10000.0, quantity: 20, sales_price: 170.0, sold_date_sk: 1)]
var store = [Store(s_store_sk: 1)]
var customer_demographics = [CustomerDemographic(cd_demo_sk: 1, cd_education_status: "E1", cd_marital_status: "S"), CustomerDemographic(cd_demo_sk: 2, cd_education_status: "E2", cd_marital_status: "M"), CustomerDemographic(cd_demo_sk: 3, cd_education_status: "E3", cd_marital_status: "W")]
var customer_address = [CustomerAddres(ca_address_sk: 1, ca_country: "United States", ca_state: "TX"), CustomerAddres(ca_address_sk: 2, ca_country: "United States", ca_state: "CA"), CustomerAddres(ca_address_sk: 3, ca_country: "United States", ca_state: "NY")]
var date_dim = [DateDim(d_date_sk: 1, d_year: 2000)]
let year = 2000
var states1 = ["TX"]
var states2 = ["CA"]
var states3 = ["NY"]
var qty_base = ({
	var _res: [Int] = []
	for ss in store_sales {
		for cd in customer_demographics {
			if !(ss.cdemo_sk == cd.cd_demo_sk) { continue }
			for ca in customer_address {
				if !(ss.addr_sk == ca.ca_address_sk) { continue }
				for d in date_dim {
					if !(ss.sold_date_sk == d.d_date_sk) { continue }
					if !(d.d_year == year && ((cd.cd_marital_status == "S" && cd.cd_education_status == "E1" && ss.sales_price >= 100.0 && ss.sales_price <= 150.0) || (cd.cd_marital_status == "M" && cd.cd_education_status == "E2" && ss.sales_price >= 50.0 && ss.sales_price <= 100.0) || (cd.cd_marital_status == "W" && cd.cd_education_status == "E3" && ss.sales_price >= 150.0 && ss.sales_price <= 200.0)) && ((states1.contains(ca.ca_state) && ss.net_profit >= 0 && ss.net_profit <= 2000) || (states2.contains(ca.ca_state) && ss.net_profit >= 150 && ss.net_profit <= 3000) || (states3.contains(ca.ca_state) && ss.net_profit >= 50 && ss.net_profit <= 25000))) { continue }
					_res.append(ss.quantity)
				}
			}
		}
	}
	return _res
}())
let qty = qty_base
let result = _sum(qty)
_json(result)
expect(_equal(result, 35))
