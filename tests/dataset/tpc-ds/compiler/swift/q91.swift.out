import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

struct CallCenter {
  var cc_call_center_sk: Int
  var cc_call_center_id: String
  var cc_name: String
  var cc_manager: String
}

struct CatalogReturn {
  var cr_call_center_sk: Int
  var cr_returned_date_sk: Int
  var cr_returning_customer_sk: Int
  var cr_net_loss: Double
}

struct DateDim {
  var d_date_sk: Int
  var d_year: Int
  var d_moy: Int
}

struct Customer {
  var c_customer_sk: Int
  var c_current_cdemo_sk: Int
  var c_current_hdemo_sk: Int
  var c_current_addr_sk: Int
}

struct CustomerAddress {
  var ca_address_sk: Int
  var ca_gmt_offset: Int
}

struct CustomerDemographics {
  var cd_demo_sk: Int
  var cd_marital_status: String
  var cd_education_status: String
}

struct HouseholdDemographics {
  var hd_demo_sk: Int
  var hd_buy_potential: String
}

func test_TPCDS_Q91_returns() {
  expect(
    result == [
      "Call_Center": "CC1", "Call_Center_Name": "Main", "Manager": "Alice", "Returns_Loss": 10,
    ])
}

let call_center = [
  ["cc_call_center_sk": 1, "cc_call_center_id": "CC1", "cc_name": "Main", "cc_manager": "Alice"]
]
let catalog_returns = [
  [
    "cr_call_center_sk": 1, "cr_returned_date_sk": 1, "cr_returning_customer_sk": 1,
    "cr_net_loss": 10,
  ]
]
let date_dim: [[String: Int]] = [["d_date_sk": 1, "d_year": 2001, "d_moy": 5]]
let customer: [[String: Int]] = [
  ["c_customer_sk": 1, "c_current_cdemo_sk": 1, "c_current_hdemo_sk": 1, "c_current_addr_sk": 1]
]
let customer_demographics = [
  ["cd_demo_sk": 1, "cd_marital_status": "M", "cd_education_status": "Unknown"]
]
let household_demographics = [["hd_demo_sk": 1, "hd_buy_potential": "1001-5000"]]
let customer_address: [[String: Int]] = [["ca_address_sk": 1, "ca_gmt_offset": -6]]
let result = first(
  ({
    var _res: [[String: Any]] = []
    for cc in call_center {
      for cr in catalog_returns {
        if !(cc["cc_call_center_sk"]! == cr["cr_call_center_sk"]!) { continue }
        for d in date_dim {
          if !(cr["cr_returned_date_sk"]! == d["d_date_sk"]!) { continue }
          for c in customer {
            if !(cr["cr_returning_customer_sk"]! == c["c_customer_sk"]!) { continue }
            for cd in customer_demographics {
              if !(c["c_current_cdemo_sk"]! == cd["cd_demo_sk"]!) { continue }
              for hd in household_demographics {
                if !(c["c_current_hdemo_sk"]! == hd["hd_demo_sk"]!) { continue }
                for ca in customer_address {
                  if !(c["c_current_addr_sk"]! == ca["ca_address_sk"]!) { continue }
                  if !(d["d_year"]! == 2001 && d["d_moy"]! == 5 && cd["cd_marital_status"]! == "M"
                    && cd["cd_education_status"]! == "Unknown"
                    && hd["hd_buy_potential"]! == "1001-5000" && ca["ca_gmt_offset"]! == (-6))
                  {
                    continue
                  }
                  _res.append([
                    "Call_Center": g.key.id, "Call_Center_Name": g.key.name, "Manager": g.key.mgr,
                    "Returns_Loss": _sum(
                      ({
                        var _res: [Any] = []
                        for x in g {
                          _res.append(x.cr_net_loss)
                        }
                        var _items = _res
                        return _items
                      }()).map { Double($0) }),
                  ])
                }
              }
            }
          }
        }
      }
    }
    var _items = _res
    return _items
  }()))
func main() {
  _json(result)
  test_TPCDS_Q91_returns()
}
main()
