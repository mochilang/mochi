// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:05:19Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var ss_addr_sk: Int
    var ss_cdemo_sk: Int
    var ss_ext_sales_price: Double
    var ss_ext_wholesale_cost: Double
    var ss_hdemo_sk: Int
    var ss_net_profit: Double
    var ss_quantity: Int
    var ss_sales_price: Double
    var ss_sold_date_sk: Int
    var ss_store_sk: Int
}

struct Auto2: Equatable {
    var s_state: String
    var s_store_sk: Int
}

struct Auto3: Equatable {
    var cd_demo_sk: Int
    var cd_education_status: String
    var cd_marital_status: String
}

struct Auto4: Equatable {
    var hd_demo_sk: Int
    var hd_dep_count: Int
}

struct Auto5: Equatable {
    var ca_address_sk: Int
    var ca_country: String
    var ca_state: String
}

struct Auto6: Equatable {
    var d_date_sk: Int
    var d_year: Int
}

struct Auto7: Equatable {
    var avg_ss_ext_sales_price: Double
    var avg_ss_ext_wholesale_cost: Double
    var avg_ss_quantity: Double
    var sum_ss_ext_wholesale_cost: Double
}

struct StoreSale: Equatable {
    var ss_store_sk: Int
    var ss_sold_date_sk: Int
    var ss_hdemo_sk: Int
    var ss_cdemo_sk: Int
    var ss_addr_sk: Int
    var ss_sales_price: Double
    var ss_net_profit: Double
    var ss_quantity: Int
    var ss_ext_sales_price: Double
    var ss_ext_wholesale_cost: Double
}
struct Store: Equatable {
    var s_store_sk: Int
    var s_state: String
}
struct CustomerDemographics: Equatable {
    var cd_demo_sk: Int
    var cd_marital_status: String
    var cd_education_status: String
}
struct HouseholdDemographics: Equatable {
    var hd_demo_sk: Int
    var hd_dep_count: Int
}
struct CustomerAddress: Equatable {
    var ca_address_sk: Int
    var ca_country: String
    var ca_state: String
}
struct DateDim: Equatable {
    var d_date_sk: Int
    var d_year: Int
}
var store_sales = [Auto1(ss_addr_sk: 1, ss_cdemo_sk: 1, ss_ext_sales_price: 100.0, ss_ext_wholesale_cost: 50.0, ss_hdemo_sk: 1, ss_net_profit: 150.0, ss_quantity: 10, ss_sales_price: 120.0, ss_sold_date_sk: 1, ss_store_sk: 1)]
var store = [Auto2(s_state: "CA", s_store_sk: 1)]
var customer_demographics = [Auto3(cd_demo_sk: 1, cd_education_status: "ES1", cd_marital_status: "M1")]
var household_demographics = [Auto4(hd_demo_sk: 1, hd_dep_count: 3)]
var customer_address = [Auto5(ca_address_sk: 1, ca_country: "United States", ca_state: "CA")]
var date_dim = [Auto6(d_date_sk: 1, d_year: 2001)]
var filtered = ({
	var _res: [Auto1] = []
	for ss in store_sales {
		for s in store {
			if !(ss.ss_store_sk == s.s_store_sk) { continue }
			for cd in customer_demographics {
				if !(ss.ss_cdemo_sk == cd.cd_demo_sk && cd.cd_marital_status == "M1" && cd.cd_education_status == "ES1") { continue }
				for hd in household_demographics {
					if !(ss.ss_hdemo_sk == hd.hd_demo_sk && hd.hd_dep_count == 3) { continue }
					for ca in customer_address {
						if !(ss.ss_addr_sk == ca.ca_address_sk && ca.ca_country == "United States" && ca.ca_state == "CA") { continue }
						for d in date_dim {
							if !(ss.ss_sold_date_sk == d.d_date_sk && d.d_year == 2001) { continue }
							_res.append(ss)
						}
					}
				}
			}
		}
	}
	return _res
}())
var result = { () -> [Any] in
    var _groups: [String:_Group] = [:]
    var _order: [String] = []
    for r in filtered {
        let _k = []
        let _ks = _keyStr(_k)
        if _groups[_ks] == nil {
            _groups[_ks] = _Group(_k)
            _order.append(_ks)
        }
        _groups[_ks]!.Items.append(r)
    }
    var _tmp: [(key: [String:Any], items: [Auto1])] = []
    for k in _order {
        if let g = _groups[k] {
            _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! Auto1 }))
        }
    }
    return _tmp.map { g in ["avg_ss_quantity": _avg(g.items.map { x in x.ss_quantity }), "avg_ss_ext_sales_price": _avg(g.items.map { x in x.ss_ext_sales_price }), "avg_ss_ext_wholesale_cost": _avg(g.items.map { x in x.ss_ext_wholesale_cost }), "sum_ss_ext_wholesale_cost": _sum(g.items.map { x in x.ss_ext_wholesale_cost })] }
}()
_json(result)
expect(_equal(result, [Auto7(avg_ss_ext_sales_price: 100.0, avg_ss_ext_wholesale_cost: 50.0, avg_ss_quantity: 10.0, sum_ss_ext_wholesale_cost: 50.0)]))
