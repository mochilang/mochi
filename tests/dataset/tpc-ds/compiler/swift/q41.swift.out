// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:06:12Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
struct Auto1: Equatable {
    var category: String
    var color: String
    var manufact: Int
    var manufact_id: Int
    var product_name: String
    var size: String
    var units: String
}

var item = [Auto1(category: "Women", color: "blue", manufact: 1, manufact_id: 100, product_name: "Blue Shirt", size: "M", units: "pack"), Auto1(category: "Women", color: "red", manufact: 1, manufact_id: 120, product_name: "Red Dress", size: "M", units: "pack"), Auto1(category: "Men", color: "black", manufact: 2, manufact_id: 200, product_name: "Pants", size: "L", units: "pair")]
let lower = 100
var result = item.compactMap { i1 in i1.manufact_id >= lower && i1.manufact_id <= lower + 40 && item.filter { i2 in i2.manufact == i1.manufact && i2.category == i1.category }.count > 1 ? (i1.product_name) : nil }.sorted { $0.product_name < $1.product_name }
_json(result)
expect(_equal(result, ["Blue Shirt", "Red Dress"]))
