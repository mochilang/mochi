import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func test_TPCDS_Q41_simplified() {
  expect(result == ["Blue Shirt", "Red Dress"])
}

let item = [
  [
    "product_name": "Blue Shirt", "manufact_id": 100, "manufact": 1, "category": "Women",
    "color": "blue", "units": "pack", "size": "M",
  ],
  [
    "product_name": "Red Dress", "manufact_id": 120, "manufact": 1, "category": "Women",
    "color": "red", "units": "pack", "size": "M",
  ],
  [
    "product_name": "Pants", "manufact_id": 200, "manufact": 2, "category": "Men", "color": "black",
    "units": "pair", "size": "L",
  ],
]
let lower = 100
let result =
  ({
    var _pairs: [(item: Any, key: Any)] = []
    for i1 in item {
      if i1["manufact_id"]! >= lower && i1["manufact_id"]! <= lower + 40
        && ({
          var _res: [[String: Any]] = []
          for i2 in item {
            if i2["manufact"]! == i1["manufact"]! && i2["category"]! == i1["category"]! {
              _res.append(i2)
            }
          }
          var _items = _res
          return _items
        }()).count > 1
      {
        _pairs.append((item: i1["product_name"]!, key: i1["product_name"]!))
      }
    }
    _pairs.sort { a, b in
      if let ai = a.key as? Int, let bi = b.key as? Int { return ai < bi }
      if let af = a.key as? Double, let bf = b.key as? Double { return af < bf }
      if let ai = a.key as? Int, let bf = b.key as? Double { return Double(ai) < bf }
      if let af = a.key as? Double, let bi = b.key as? Int { return af < Double(bi) }
      if let sa = a.key as? String, let sb = b.key as? String { return sa < sb }
      return String(describing: a.key) < String(describing: b.key)
    }
    var _items = _pairs.map { $0.item }
    return _items
  }())
func main() {
  _json(result)
  test_TPCDS_Q41_simplified()
}
main()
