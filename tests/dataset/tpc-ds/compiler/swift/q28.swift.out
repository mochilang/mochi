import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

class _Group {
  var key: Any
  var Items: [Any] = []
  init(_ k: Any) { self.key = k }
}

func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}

func _group_by(_ src: [Any], _ keyfn: (Any) -> Any) -> [_Group] {
  func keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
      let s = String(data: data, encoding: .utf8)
    {
      return s
    }
    return String(describing: v)
  }
  var groups: [String: _Group] = [:]
  var order: [String] = []
  for it in src {
    let key = keyfn(it)
    let ks = keyStr(key)
    if groups[ks] == nil {
      groups[ks] = _Group(key)
      order.append(ks)
    }
    groups[ks]!.Items.append(it)
  }
  return order.compactMap { groups[$0] }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

struct StoreSale {
  var ss_quantity: Int
  var ss_list_price: Double
  var ss_coupon_amt: Double
  var ss_wholesale_cost: Double
}

func test_TPCDS_Q28_buckets() {
  expect(
    result == ["B1_LP": 100, "B1_CNT": 1, "B1_CNTD": 1, "B2_LP": 80, "B2_CNT": 1, "B2_CNTD": 1])
}

let store_sales = [
  ["ss_quantity": 3, "ss_list_price": 100, "ss_coupon_amt": 50, "ss_wholesale_cost": 30],
  ["ss_quantity": 8, "ss_list_price": 80, "ss_coupon_amt": 10, "ss_wholesale_cost": 20],
  ["ss_quantity": 12, "ss_list_price": 60, "ss_coupon_amt": 5, "ss_wholesale_cost": 15],
]
let bucket1 =
  ({
    var _res: [[String: Any]] = []
    for ss in store_sales {
      if !(ss["ss_quantity"]! >= 0 && ss["ss_quantity"]! <= 5
        && ((ss["ss_list_price"]! >= 0 && ss["ss_list_price"]! <= 110)
          || (ss["ss_coupon_amt"]! >= 0 && ss["ss_coupon_amt"]! <= 1000)
          || (ss["ss_wholesale_cost"]! >= 0 && ss["ss_wholesale_cost"]! <= 50)))
      {
        continue
      }
      _res.append(ss)
    }
    var _items = _res
    return _items
  }())
let bucket2 =
  ({
    var _res: [[String: Any]] = []
    for ss in store_sales {
      if !(ss["ss_quantity"]! >= 6 && ss["ss_quantity"]! <= 10
        && ((ss["ss_list_price"]! >= 0 && ss["ss_list_price"]! <= 110)
          || (ss["ss_coupon_amt"]! >= 0 && ss["ss_coupon_amt"]! <= 1000)
          || (ss["ss_wholesale_cost"]! >= 0 && ss["ss_wholesale_cost"]! <= 50)))
      {
        continue
      }
      _res.append(ss)
    }
    var _items = _res
    return _items
  }())
let result = [
  "B1_LP": _avg(
    ({
      var _res: [Any] = []
      for x in bucket1 {
        _res.append(x["ss_list_price"]!)
      }
      var _items = _res
      return _items
    }()).map { Double($0) }), "B1_CNT": bucket1.count,
  "B1_CNTD": _group_by(bucket1.map { $0 as Any }, { x in x["ss_list_price"]! }).map { g in g.key }
    .count,
  "B2_LP": _avg(
    ({
      var _res: [Any] = []
      for x in bucket2 {
        _res.append(x["ss_list_price"]!)
      }
      var _items = _res
      return _items
    }()).map { Double($0) }), "B2_CNT": bucket2.count,
  "B2_CNTD": _group_by(bucket2.map { $0 as Any }, { x in x["ss_list_price"]! }).map { g in g.key }
    .count,
]
func main() {
  _json(result)
  test_TPCDS_Q28_buckets()
}
main()
