// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:06:05Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
struct Auto1: Equatable {
    var ss_coupon_amt: Double
    var ss_list_price: Double
    var ss_quantity: Int
    var ss_wholesale_cost: Double
}

struct StoreSale: Equatable {
    var ss_quantity: Int
    var ss_list_price: Double
    var ss_coupon_amt: Double
    var ss_wholesale_cost: Double
}
var store_sales = [Auto1(ss_coupon_amt: 50.0, ss_list_price: 100.0, ss_quantity: 3, ss_wholesale_cost: 30.0), Auto1(ss_coupon_amt: 10.0, ss_list_price: 80.0, ss_quantity: 8, ss_wholesale_cost: 20.0), Auto1(ss_coupon_amt: 5.0, ss_list_price: 60.0, ss_quantity: 12, ss_wholesale_cost: 15.0)]
var bucket1 = store_sales.filter { ss in ss.ss_quantity >= 0 && ss.ss_quantity <= 5 && ((ss.ss_list_price >= 0 && ss.ss_list_price <= 110) || (ss.ss_coupon_amt >= 0 && ss.ss_coupon_amt <= 1000) || (ss.ss_wholesale_cost >= 0 && ss.ss_wholesale_cost <= 50)) }
var bucket2 = store_sales.filter { ss in ss.ss_quantity >= 6 && ss.ss_quantity <= 10 && ((ss.ss_list_price >= 0 && ss.ss_list_price <= 110) || (ss.ss_coupon_amt >= 0 && ss.ss_coupon_amt <= 1000) || (ss.ss_wholesale_cost >= 0 && ss.ss_wholesale_cost <= 50)) }
let result = ["B1_LP": _avg(bucket1.map { x in x.ss_list_price }), "B1_CNT": bucket1.count, "B1_CNTD": { () -> [Any] in
    var _groups: [Double:[Auto1]] = [:]
    for x in bucket1 {
        let _k = x.ss_list_price
        _groups[_k, default: []].append(x)
    }
    var _tmp: [(key: Double, items: [Auto1])] = []
    for (k, v) in _groups {
        _tmp.append((key: k, items: v))
    }
    return _tmp.map { g in g.key }
}().count, "B2_LP": _avg(bucket2.map { x in x.ss_list_price }), "B2_CNT": bucket2.count, "B2_CNTD": { () -> [Any] in
    var _groups: [Double:[Auto1]] = [:]
    for x in bucket2 {
        let _k = x.ss_list_price
        _groups[_k, default: []].append(x)
    }
    var _tmp: [(key: Double, items: [Auto1])] = []
    for (k, v) in _groups {
        _tmp.append((key: k, items: v))
    }
    return _tmp.map { g in g.key }
}().count]
_json(result)
expect(_equal(result, ["B1_LP": 100.0, "B1_CNT": 1, "B1_CNTD": 1, "B2_LP": 80.0, "B2_CNT": 1, "B2_CNTD": 1]))
