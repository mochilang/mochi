import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _any_eq(_ a: Any, _ b: Any) -> Bool {
  switch (a, b) {
  case let (ai as Int, bi as Int): return ai == bi
  case let (af as Double, bf as Double): return af == bf
  case let (ai as Int, bf as Double): return Double(ai) == bf
  case let (af as Double, bi as Int): return af == Double(bi)
  case let (sa as String, sb as String): return sa == sb
  case let (ba as Bool, bb as Bool): return ba == bb
  default: return String(describing: a) == String(describing: b)
  }
}
func _any_gt(_ a: Any, _ b: Any) -> Bool {
  return !_any_le(a, b)
}
func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

func test_TPCDS_Q1_result() {
  expect(_any_eq(result, [["c_customer_id": "C2"]]))
}

let store_returns = [
  ["sr_returned_date_sk": 1, "sr_customer_sk": 1, "sr_store_sk": 10, "sr_return_amt": 20],
  ["sr_returned_date_sk": 1, "sr_customer_sk": 2, "sr_store_sk": 10, "sr_return_amt": 50],
]
let date_dim: [[String: Int]] = [["d_date_sk": 1, "d_year": 1998]]
let store = [["s_store_sk": 10, "s_state": "TN"]]
let customer = [
  ["c_customer_sk": 1, "c_customer_id": "C1"], ["c_customer_sk": 2, "c_customer_id": "C2"],
]
let customer_total_return =
  ({
    var _res: [[String: Any]] = []
    for sr in store_returns {
      for d in date_dim {
        if !(_any_eq(_any_eq(sr["sr_returned_date_sk"]!, d["d_date_sk"]!) && d["d_year"]!, 1998)) {
          continue
        }
        _res.append([
          "ctr_customer_sk": g.key.customer_sk, "ctr_store_sk": g.key.store_sk,
          "ctr_total_return": _sum(
            ({
              var _res: [Any] = []
              for x in g {
                _res.append(x.sr_return_amt)
              }
              var _items = _res
              return _items
            }()).map { Double($0) }),
        ])
      }
    }
    var _items = _res
    return _items
  }())
let result =
  ({
    var _pairs: [(item: [String: Any], key: Any)] = []
    for ctr1 in customer_total_return {
      for s in store {
        if !(_any_eq(ctr1["ctr_store_sk"]!, s["s_store_sk"]!)) { continue }
        for c in customer {
          if !(_any_eq(ctr1["ctr_customer_sk"]!, c["c_customer_sk"]!)) { continue }
          if _any_eq(
            _any_gt(
              ctr1["ctr_total_return"]!,
              _avg(
                ({
                  var _res: [Any] = []
                  for ctr2 in customer_total_return {
                    if _any_eq(ctr1["ctr_store_sk"]!, ctr2["ctr_store_sk"]!) {
                      _res.append(ctr2["ctr_total_return"]!)
                    }
                  }
                  var _items = _res
                  return _items
                }()).map { Double($0) })) * 1.2 && s["s_state"]!, "TN")
          {
            _pairs.append((item: ["c_customer_id": c["c_customer_id"]!], key: c["c_customer_id"]!))
          }
        }
      }
    }
    _pairs.sort { a, b in
      if let ai = a.key as? Int, let bi = b.key as? Int { return ai < bi }
      if let af = a.key as? Double, let bf = b.key as? Double { return af < bf }
      if let ai = a.key as? Int, let bf = b.key as? Double { return Double(ai) < bf }
      if let af = a.key as? Double, let bi = b.key as? Int { return af < Double(bi) }
      if let sa = a.key as? String, let sb = b.key as? String { return sa < sb }
      return String(describing: a.key) < String(describing: b.key)
    }
    var _items = _pairs.map { $0.item }
    return _items
  }())
func main() {
  _json(result)
  test_TPCDS_Q1_result()
}
main()
