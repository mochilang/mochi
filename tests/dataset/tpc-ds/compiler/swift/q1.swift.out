import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

func test_TPCDS_Q1_empty() {
  expect(result.count == 0)
}

let store_returns = []
let date_dim = []
let store = []
let customer = []
let customer_total_return =
  ({
    var _res: [[String: Any]] = []
    for sr in store_returns {
      for d in date_dim {
        if !(sr.sr_returned_date_sk == d.d_date_sk) { continue }
        if !(d.d_year == 1998) { continue }
        _res.append([
          "ctr_customer_sk": g.key.customer_sk, "ctr_store_sk": g.key.store_sk,
          "ctr_total_return": _sum(
            ({
              var _res: [Any] = []
              for x in g {
                _res.append(x.sr_return_amt)
              }
              var _items = _res
              return _items
            }()).map { Double($0) }),
        ])
      }
    }
    var _items = _res
    return _items
  }())
let result =
  ({
    var _pairs: [(item: [String: Any], key: Any)] = []
    for ctr1 in customer_total_return {
      for s in store {
        if !(ctr1["ctr_store_sk"]! == s.s_store_sk) { continue }
        for c in customer {
          if !(ctr1["ctr_customer_sk"]! == c.c_customer_sk) { continue }
          if ctr1["ctr_total_return"]! > _avg(
            ({
              var _res: [Any] = []
              for ctr2 in customer_total_return {
                if ctr1["ctr_store_sk"]! == ctr2["ctr_store_sk"]! {
                  _res.append(ctr2["ctr_total_return"]!)
                }
              }
              var _items = _res
              return _items
            }()).map { Double($0) }) * 1.2 && s.s_state == "TN"
          {
            _pairs.append((item: ["c_customer_id": c.c_customer_id], key: c.c_customer_id))
          }
        }
      }
    }
    _pairs.sort { a, b in
      if let ai = a.key as? Int, let bi = b.key as? Int { return ai < bi }
      if let af = a.key as? Double, let bf = b.key as? Double { return af < bf }
      if let ai = a.key as? Int, let bf = b.key as? Double { return Double(ai) < bf }
      if let af = a.key as? Double, let bi = b.key as? Int { return af < Double(bi) }
      if let sa = a.key as? String, let sb = b.key as? String { return sa < sb }
      return String(describing: a.key) < String(describing: b.key)
    }
    var _items = _pairs.map { $0.item }
    return _items
  }())
func main() {
  _json(result)
  test_TPCDS_Q1_empty()
}
main()

