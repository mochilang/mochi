import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

func test_TPCDS_Q86_sample() {
  expect(result == 86)
}

let web_sales = [
  ["cat": "A", "class": "B", "net": 40], ["cat": "A", "class": "B", "net": 46],
  ["cat": "A", "class": "C", "net": 10], ["cat": "B", "class": "B", "net": 20],
]
let result = _sum(
  ({
    var _res: [Any] = []
    for ws in web_sales {
      if !(ws["cat"]! == "A" && ws["class"]! == "B") { continue }
      _res.append(ws["net"]!)
    }
    var _items = _res
    return _items
  }()).map { Double($0) })
func main() {
  _json(result)
  test_TPCDS_Q86_sample()
}
main()
