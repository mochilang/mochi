import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

func test_TPCDS_Q60_simplified() {
  expect(result == 60)
}

let store_sales: [[String: Int]] = [["item": 1, "price": 10], ["item": 1, "price": 20]]
let catalog_sales: [[String: Int]] = [["item": 1, "price": 15]]
let web_sales: [[String: Int]] = [["item": 1, "price": 15]]
let all_sales: [[String: Int]] = store_sales + catalog_sales + web_sales
let result = _sum(
  ({
    var _res: [Int] = []
    for s in all_sales {
      _res.append(s["price"]!)
    }
    var _items = _res
    return _items
  }()).map { Double($0) })
func main() {
  _json(result)
  test_TPCDS_Q60_simplified()
}
main()
