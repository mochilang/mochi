// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:09:30Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
struct Auto1: Equatable {
    var ss_customer_sk: Int
    var ss_item_sk: Int
}

struct Auto2: Equatable {
    var cs_bill_customer_sk: Int
    var cs_item_sk: Int
}

struct StoreSale: Equatable {
    var ss_customer_sk: Int
    var ss_item_sk: Int
}
struct CatalogSale: Equatable {
    var cs_bill_customer_sk: Int
    var cs_item_sk: Int
}
var store_sales = [Auto1(ss_customer_sk: 1, ss_item_sk: 1), Auto1(ss_customer_sk: 2, ss_item_sk: 1)]
var catalog_sales = [Auto2(cs_bill_customer_sk: 1, cs_item_sk: 1), Auto2(cs_bill_customer_sk: 3, cs_item_sk: 2)]
var ssci = { () -> [Any] in
    var _groups: [String:_Group] = [:]
    var _order: [String] = []
    for ss in store_sales {
        let _k = ["customer_sk": ss.ss_customer_sk, "item_sk": ss.ss_item_sk]
        let _ks = _keyStr(_k)
        if _groups[_ks] == nil {
            _groups[_ks] = _Group(_k)
            _order.append(_ks)
        }
        _groups[_ks]!.Items.append(ss)
    }
    var _tmp: [(key: [String:Any], items: [Auto1])] = []
    for k in _order {
        if let g = _groups[k] {
            _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! Auto1 }))
        }
    }
    return _tmp.map { g in ["customer_sk": (g.key["customer_sk"] as! Int), "item_sk": (g.key["item_sk"] as! Int)] }
}()
var csci = { () -> [Any] in
    var _groups: [String:_Group] = [:]
    var _order: [String] = []
    for cs in catalog_sales {
        let _k = ["customer_sk": cs.cs_bill_customer_sk, "item_sk": cs.cs_item_sk]
        let _ks = _keyStr(_k)
        if _groups[_ks] == nil {
            _groups[_ks] = _Group(_k)
            _order.append(_ks)
        }
        _groups[_ks]!.Items.append(cs)
    }
    var _tmp: [(key: [String:Any], items: [Auto2])] = []
    for k in _order {
        if let g = _groups[k] {
            _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! Auto2 }))
        }
    }
    return _tmp.map { g in ["customer_sk": (g.key["customer_sk"] as! Int), "item_sk": (g.key["item_sk"] as! Int)] }
}()
let both = ({
	var _res: [Any] = []
	for s in ssci {
		for c in csci {
			if !(s["customer_sk"]! == c["customer_sk"]! && s["item_sk"]! == c["item_sk"]!) { continue }
			_res.append(1)
		}
	}
	return _res
}()).count
let store_only = ssci.compactMap { s in !(csci.contains { c in s["customer_sk"]! == c.customer_sk && s["item_sk"]! == c.item_sk }) != nil ? (1) : nil }.count
let catalog_only = csci.compactMap { c in !(ssci.contains { s in s.customer_sk == c["customer_sk"]! && s.item_sk == c["item_sk"]! }) != nil ? (1) : nil }.count
let result = ["store_only": store_only, "catalog_only": catalog_only, "store_and_catalog": both]
_json(result)
expect(result["store_only"]! == 1 && result["catalog_only"]! == 1 && result["store_and_catalog"]! == 1)
