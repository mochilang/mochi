import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

class _Group {
  var key: Any
  var Items: [Any] = []
  init(_ k: Any) { self.key = k }
}

func _group_by(_ src: [Any], _ keyfn: (Any) -> Any) -> [_Group] {
  func keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
      let s = String(data: data, encoding: .utf8)
    {
      return s
    }
    return String(describing: v)
  }
  var groups: [String: _Group] = [:]
  var order: [String] = []
  for it in src {
    let key = keyfn(it)
    let ks = keyStr(key)
    if groups[ks] == nil {
      groups[ks] = _Group(key)
      order.append(ks)
    }
    groups[ks]!.Items.append(it)
  }
  return order.compactMap { groups[$0] }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

struct StoreSale {
  var ss_customer_sk: Int
  var ss_item_sk: Int
}

struct CatalogSale {
  var cs_bill_customer_sk: Int
  var cs_item_sk: Int
}

func test_TPCDS_Q97_overlap() {
  expect(
    result["store_only"]! == 1 && result["catalog_only"]! == 1 && result["store_and_catalog"]! == 1)
}

let store_sales: [[String: Int]] = [
  ["ss_customer_sk": 1, "ss_item_sk": 1], ["ss_customer_sk": 2, "ss_item_sk": 1],
]
let catalog_sales: [[String: Int]] = [
  ["cs_bill_customer_sk": 1, "cs_item_sk": 1], ["cs_bill_customer_sk": 3, "cs_item_sk": 2],
]
let ssci = _group_by(
  store_sales.map { $0 as Any },
  { ss in ["customer_sk": ss["ss_customer_sk"]!, "item_sk": ss["ss_item_sk"]!] }
).map { g in ["customer_sk": g.key.customer_sk, "item_sk": g.key.item_sk] }
let csci = _group_by(
  catalog_sales.map { $0 as Any },
  { cs in ["customer_sk": cs["cs_bill_customer_sk"]!, "item_sk": cs["cs_item_sk"]!] }
).map { g in ["customer_sk": g.key.customer_sk, "item_sk": g.key.item_sk] }
let joined: [[String: Int]] =
  ({
    var _res: [[String: Int]] = []
    for s in ssci {
      for c in csci {
        if !(s["customer_sk"]! == c["customer_sk"]! && s["item_sk"]! == c["item_sk"]!) { continue }
        _res.append([
          "store_only": (s["customer_sk"]! != nil && c["customer_sk"]! == nil ? 1 : 0),
          "catalog_only": (s["customer_sk"]! == nil && c["customer_sk"]! != nil ? 1 : 0),
          "both": (s["customer_sk"]! != nil && c["customer_sk"]! != nil ? 1 : 0),
        ])
      }
    }
    var _items = _res
    return _items
  }())
let result: [String: Double] = [
  "store_only": _sum(
    ({
      var _res: [Int] = []
      for x in joined {
        _res.append(x["store_only"]!)
      }
      var _items = _res
      return _items
    }()).map { Double($0) }),
  "catalog_only": _sum(
    ({
      var _res: [Int] = []
      for x in joined {
        _res.append(x["catalog_only"]!)
      }
      var _items = _res
      return _items
    }()).map { Double($0) }),
  "store_and_catalog": _sum(
    ({
      var _res: [Int] = []
      for x in joined {
        _res.append(x["both"]!)
      }
      var _items = _res
      return _items
    }()).map { Double($0) }),
]
func main() {
  _json(result)
  test_TPCDS_Q97_overlap()
}
main()
