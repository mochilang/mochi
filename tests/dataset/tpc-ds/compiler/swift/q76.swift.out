// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:07:39Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var d_date_sk: Int
    var d_qoy: Int
    var d_year: Int
}

struct Auto2: Equatable {
    var i_category: String
    var i_item_sk: Int
}

var date_dim = [Auto1(d_date_sk: 1, d_qoy: 1, d_year: 1998)]
var item = [Auto2(i_category: "CatA", i_item_sk: 1), Auto2(i_category: "CatB", i_item_sk: 2), Auto2(i_category: "CatC", i_item_sk: 3)]
var store_sales = [["ss_customer_sk": nil, "ss_item_sk": 1, "ss_ext_sales_price": 10.0, "ss_sold_date_sk": 1]]
var web_sales = [["ws_bill_customer_sk": nil, "ws_item_sk": 2, "ws_ext_sales_price": 15.0, "ws_sold_date_sk": 1]]
var catalog_sales = [["cs_bill_customer_sk": nil, "cs_item_sk": 3, "cs_ext_sales_price": 20.0, "cs_sold_date_sk": 1]]
var store_part = ({
	var _res: [(channel: String, col_name: Any, d_qoy: Int, d_year: Int, ext_sales_price: Double, i_category: String)] = []
	for ss in store_sales {
		for i in item {
			if !(i.i_item_sk == (ss["ss_item_sk"] as! Int)) { continue }
			for d in date_dim {
				if !(d.d_date_sk == (ss["ss_sold_date_sk"] as! Int)) { continue }
				if !(ss["ss_customer_sk"]! == nil) { continue }
				_res.append(["channel": "store", "col_name": ss["ss_customer_sk"]!, "d_year": d.d_year, "d_qoy": d.d_qoy, "i_category": i.i_category, "ext_sales_price": (ss["ss_ext_sales_price"] as! Double)])
			}
		}
	}
	return _res
}())
var web_part = ({
	var _res: [(channel: String, col_name: Any, d_qoy: Int, d_year: Int, ext_sales_price: Double, i_category: String)] = []
	for ws in web_sales {
		for i in item {
			if !(i.i_item_sk == (ws["ws_item_sk"] as! Int)) { continue }
			for d in date_dim {
				if !(d.d_date_sk == (ws["ws_sold_date_sk"] as! Int)) { continue }
				if !(ws["ws_bill_customer_sk"]! == nil) { continue }
				_res.append(["channel": "web", "col_name": ws["ws_bill_customer_sk"]!, "d_year": d.d_year, "d_qoy": d.d_qoy, "i_category": i.i_category, "ext_sales_price": (ws["ws_ext_sales_price"] as! Double)])
			}
		}
	}
	return _res
}())
var catalog_part = ({
	var _res: [(channel: String, col_name: Any, d_qoy: Int, d_year: Int, ext_sales_price: Double, i_category: String)] = []
	for cs in catalog_sales {
		for i in item {
			if !(i.i_item_sk == (cs["cs_item_sk"] as! Int)) { continue }
			for d in date_dim {
				if !(d.d_date_sk == (cs["cs_sold_date_sk"] as! Int)) { continue }
				if !(cs["cs_bill_customer_sk"]! == nil) { continue }
				_res.append(["channel": "catalog", "col_name": cs["cs_bill_customer_sk"]!, "d_year": d.d_year, "d_qoy": d.d_qoy, "i_category": i.i_category, "ext_sales_price": (cs["cs_ext_sales_price"] as! Double)])
			}
		}
	}
	return _res
}())
let all_rows = concat(store_part, web_part, catalog_part)
var result = { () -> [Any] in
    var _groups: [String:_Group] = [:]
    var _order: [String] = []
    for r in all_rows {
        let _k = ["channel": r.channel, "col_name": r.col_name, "d_year": r.d_year, "d_qoy": r.d_qoy, "i_category": r.i_category]
        let _ks = _keyStr(_k)
        if _groups[_ks] == nil {
            _groups[_ks] = _Group(_k)
            _order.append(_ks)
        }
        _groups[_ks]!.Items.append(r)
    }
    var _tmp: [(key: [String:Any], items: [Any])] = []
    for k in _order {
        if let g = _groups[k] {
            _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! Any }))
        }
    }
    _tmp.sort { $0.key["channel"]! < $1.key["channel"]! }
    return _tmp.map { g in ["channel": g.key["channel"]!, "col_name": g.key["col_name"]!, "d_year": g.key["d_year"]!, "d_qoy": g.key["d_qoy"]!, "i_category": g.key["i_category"]!, "sales_cnt": g.items.count, "sales_amt": _sum(g.items.map { x in x.r.ext_sales_price })] }
}()
_json(result)
expect(_equal(result, [["channel": "store", "col_name": nil, "d_year": 1998, "d_qoy": 1, "i_category": "CatA", "sales_cnt": 1, "sales_amt": 10.0], ["channel": "web", "col_name": nil, "d_year": 1998, "d_qoy": 1, "i_category": "CatB", "sales_cnt": 1, "sales_amt": 15.0], ["channel": "catalog", "col_name": nil, "d_year": 1998, "d_qoy": 1, "i_category": "CatC", "sales_cnt": 1, "sales_amt": 20.0]]))
