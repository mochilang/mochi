import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _concat<T>(_ a: [T], _ b: [T]) -> [T] {
  var res: [T] = []
  res.reserveCapacity(a.count + b.count)
  res.append(contentsOf: a)
  res.append(contentsOf: b)
  return res
}
func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

func test_TPCDS_Q76_simplified() {
  expect(
    result == [
      [
        "channel": "store", "col_name": nil, "d_year": 1998, "d_qoy": 1, "i_category": "CatA",
        "sales_cnt": 1, "sales_amt": 10,
      ],
      [
        "channel": "web", "col_name": nil, "d_year": 1998, "d_qoy": 1, "i_category": "CatB",
        "sales_cnt": 1, "sales_amt": 15,
      ],
      [
        "channel": "catalog", "col_name": nil, "d_year": 1998, "d_qoy": 1, "i_category": "CatC",
        "sales_cnt": 1, "sales_amt": 20,
      ],
    ])
}

let date_dim: [[String: Int]] = [["d_date_sk": 1, "d_year": 1998, "d_qoy": 1]]
let item = [
  ["i_item_sk": 1, "i_category": "CatA"], ["i_item_sk": 2, "i_category": "CatB"],
  ["i_item_sk": 3, "i_category": "CatC"],
]
let store_sales = [
  ["ss_customer_sk": nil, "ss_item_sk": 1, "ss_ext_sales_price": 10, "ss_sold_date_sk": 1]
]
let web_sales = [
  ["ws_bill_customer_sk": nil, "ws_item_sk": 2, "ws_ext_sales_price": 15, "ws_sold_date_sk": 1]
]
let catalog_sales = [
  ["cs_bill_customer_sk": nil, "cs_item_sk": 3, "cs_ext_sales_price": 20, "cs_sold_date_sk": 1]
]
let store_part =
  ({
    var _res: [[String: Any]] = []
    for ss in store_sales {
      if !(ss["ss_customer_sk"]! == nil) { continue }
      for i in item {
        if !(i["i_item_sk"]! == ss["ss_item_sk"]!) { continue }
        for d in date_dim {
          if !(d["d_date_sk"]! == ss["ss_sold_date_sk"]!) { continue }
          _res.append([
            "channel": "store", "col_name": ss["ss_customer_sk"]!, "d_year": d["d_year"]!,
            "d_qoy": d["d_qoy"]!, "i_category": i["i_category"]!,
            "ext_sales_price": ss["ss_ext_sales_price"]!,
          ])
        }
      }
    }
    var _items = _res
    return _items
  }())
let web_part =
  ({
    var _res: [[String: Any]] = []
    for ws in web_sales {
      if !(ws["ws_bill_customer_sk"]! == nil) { continue }
      for i in item {
        if !(i["i_item_sk"]! == ws["ws_item_sk"]!) { continue }
        for d in date_dim {
          if !(d["d_date_sk"]! == ws["ws_sold_date_sk"]!) { continue }
          _res.append([
            "channel": "web", "col_name": ws["ws_bill_customer_sk"]!, "d_year": d["d_year"]!,
            "d_qoy": d["d_qoy"]!, "i_category": i["i_category"]!,
            "ext_sales_price": ws["ws_ext_sales_price"]!,
          ])
        }
      }
    }
    var _items = _res
    return _items
  }())
let catalog_part =
  ({
    var _res: [[String: Any]] = []
    for cs in catalog_sales {
      if !(cs["cs_bill_customer_sk"]! == nil) { continue }
      for i in item {
        if !(i["i_item_sk"]! == cs["cs_item_sk"]!) { continue }
        for d in date_dim {
          if !(d["d_date_sk"]! == cs["cs_sold_date_sk"]!) { continue }
          _res.append([
            "channel": "catalog", "col_name": cs["cs_bill_customer_sk"]!, "d_year": d["d_year"]!,
            "d_qoy": d["d_qoy"]!, "i_category": i["i_category"]!,
            "ext_sales_price": cs["cs_ext_sales_price"]!,
          ])
        }
      }
    }
    var _items = _res
    return _items
  }())
let all_rows = _concat(_concat(store_part, web_part), catalog_part)
let result =
  ({
    var _pairs: [(item: [String: Any], key: Any)] = []
    for r in all_rows {
      _pairs.append(
        (
          item: [
            "channel": g.key.channel, "col_name": g.key.col_name, "d_year": g.key.d_year,
            "d_qoy": g.key.d_qoy, "i_category": g.key.i_category, "sales_cnt": g.count,
            "sales_amt": _sum(
              ({
                var _res: [Any] = []
                for x in g {
                  _res.append(x.r.ext_sales_price)
                }
                var _items = _res
                return _items
              }()).map { Double($0) }),
          ], key: g.key.channel
        ))
    }
    _pairs.sort { a, b in
      if let ai = a.key as? Int, let bi = b.key as? Int { return ai < bi }
      if let af = a.key as? Double, let bf = b.key as? Double { return af < bf }
      if let ai = a.key as? Int, let bf = b.key as? Double { return Double(ai) < bf }
      if let af = a.key as? Double, let bi = b.key as? Int { return af < Double(bi) }
      if let sa = a.key as? String, let sb = b.key as? String { return sa < sb }
      return String(describing: a.key) < String(describing: b.key)
    }
    var _items = _pairs.map { $0.item }
    return _items
  }())
func main() {
  _json(result)
  test_TPCDS_Q76_simplified()
}
main()
