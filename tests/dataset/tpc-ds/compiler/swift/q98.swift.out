import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

class _Group {
  var key: Any
  var Items: [Any] = []
  init(_ k: Any) { self.key = k }
}

func _group_by(_ src: [Any], _ keyfn: (Any) -> Any) -> [_Group] {
  func keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
      let s = String(data: data, encoding: .utf8)
    {
      return s
    }
    return String(describing: v)
  }
  var groups: [String: _Group] = [:]
  var order: [String] = []
  for it in src {
    let key = keyfn(it)
    let ks = keyStr(key)
    if groups[ks] == nil {
      groups[ks] = _Group(key)
      order.append(ks)
    }
    groups[ks]!.Items.append(it)
  }
  return order.compactMap { groups[$0] }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

struct StoreSale {
  var ss_item_sk: Int
  var ss_sold_date_sk: Int
  var ss_ext_sales_price: Double
}

struct Item {
  var i_item_sk: Int
  var i_item_id: String
  var i_item_desc: String
  var i_category: String
  var i_class: String
  var i_current_price: Double
}

struct DateDim {
  var d_date_sk: Int
  var d_date: String
}

func test_TPCDS_Q98_revenue() {
  expect(
    result == [
      [
        "i_item_id": "I1", "i_item_desc": "desc1", "i_category": "CatA", "i_class": "Class1",
        "i_current_price": 100, "itemrevenue": 50, "revenueratio": 33.333333333333336,
      ],
      [
        "i_item_id": "I2", "i_item_desc": "desc2", "i_category": "CatB", "i_class": "Class1",
        "i_current_price": 200, "itemrevenue": 100, "revenueratio": 66.66666666666667,
      ],
    ])
}

let store_sales = [
  ["ss_item_sk": 1, "ss_sold_date_sk": 1, "ss_ext_sales_price": 50],
  ["ss_item_sk": 2, "ss_sold_date_sk": 1, "ss_ext_sales_price": 100],
]
let item = [
  [
    "i_item_sk": 1, "i_item_id": "I1", "i_item_desc": "desc1", "i_category": "CatA",
    "i_class": "Class1", "i_current_price": 100,
  ],
  [
    "i_item_sk": 2, "i_item_id": "I2", "i_item_desc": "desc2", "i_category": "CatB",
    "i_class": "Class1", "i_current_price": 200,
  ],
]
let date_dim = [["d_date_sk": 1, "d_date": "2000-02-01"]]
let grouped =
  ({
    var _res: [[String: Any]] = []
    for ss in store_sales {
      for i in item {
        if !(ss["ss_item_sk"]! == i["i_item_sk"]!) { continue }
        for d in date_dim {
          if !(ss["ss_sold_date_sk"]! == d["d_date_sk"]!) { continue }
          _res.append([
            "i_item_id": g.key.item_id, "i_item_desc": g.key.item_desc,
            "i_category": g.key.category, "i_class": g.key.class, "i_current_price": g.key.price,
            "itemrevenue": _sum(
              ({
                var _res: [Any] = []
                for x in g {
                  _res.append(x.ss_ext_sales_price)
                }
                var _items = _res
                return _items
              }()).map { Double($0) }),
          ])
        }
      }
    }
    var _items = _res
    return _items
  }())
let totals = _group_by(grouped.map { $0 as Any }, { g in g["i_class"]! }).map { cg in
  [
    "class": cg.key,
    "total": _sum(
      ({
        var _res: [Any] = []
        for x in cg {
          _res.append(x.itemrevenue)
        }
        var _items = _res
        return _items
      }()).map { Double($0) }),
  ]
}
let result =
  ({
    var _res: [[String: Any]] = []
    for g in grouped {
      for t in totals {
        if !(g["i_class"]! == t["class"]!) { continue }
        _res.append([
          "i_item_id": g["i_item_id"]!, "i_item_desc": g["i_item_desc"]!,
          "i_category": g["i_category"]!, "i_class": g["i_class"]!,
          "i_current_price": g["i_current_price"]!, "itemrevenue": g["itemrevenue"]!,
          "revenueratio": g["itemrevenue"]! * 100 / t["total"]!,
        ])
      }
    }
    var _items = _res
    return _items
  }())
func main() {
  _json(result)
  test_TPCDS_Q98_revenue()
}
main()
