import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

class _Group {
  var key: Any
  var Items: [Any] = []
  init(_ k: Any) { self.key = k }
}

func _group_by(_ src: [Any], _ keyfn: (Any) -> Any) -> [_Group] {
  func keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
      let s = String(data: data, encoding: .utf8)
    {
      return s
    }
    return String(describing: v)
  }
  var groups: [String: _Group] = [:]
  var order: [String] = []
  for it in src {
    let key = keyfn(it)
    let ks = keyStr(key)
    if groups[ks] == nil {
      groups[ks] = _Group(key)
      order.append(ks)
    }
    groups[ks]!.Items.append(it)
  }
  return order.compactMap { groups[$0] }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

struct StoreSale {
  var ss_item_sk: Int
  var ss_sold_date_sk: Int
  var ss_customer_sk: Int
  var ss_quantity: Int
  var ss_sales_price: Double
}

struct DateDim {
  var d_date_sk: Int
  var d_year: Int
  var d_moy: Int
}

struct Item {
  var i_item_sk: Int
}

struct CatalogSale {
  var cs_sold_date_sk: Int
  var cs_item_sk: Int
  var cs_bill_customer_sk: Int
  var cs_quantity: Int
  var cs_list_price: Double
}

struct WebSale {
  var ws_sold_date_sk: Int
  var ws_item_sk: Int
  var ws_bill_customer_sk: Int
  var ws_quantity: Int
  var ws_list_price: Double
}

func test_TPCDS_Q23_cross_channel_sales() {
  expect(result == 50)
}

let store_sales = [
  [
    "ss_item_sk": 1, "ss_sold_date_sk": 1, "ss_customer_sk": 1, "ss_quantity": 1,
    "ss_sales_price": 10,
  ],
  [
    "ss_item_sk": 1, "ss_sold_date_sk": 1, "ss_customer_sk": 1, "ss_quantity": 1,
    "ss_sales_price": 10,
  ],
  [
    "ss_item_sk": 1, "ss_sold_date_sk": 1, "ss_customer_sk": 1, "ss_quantity": 1,
    "ss_sales_price": 10,
  ],
  [
    "ss_item_sk": 1, "ss_sold_date_sk": 1, "ss_customer_sk": 1, "ss_quantity": 1,
    "ss_sales_price": 10,
  ],
  [
    "ss_item_sk": 1, "ss_sold_date_sk": 1, "ss_customer_sk": 1, "ss_quantity": 1,
    "ss_sales_price": 10,
  ],
  [
    "ss_item_sk": 2, "ss_sold_date_sk": 1, "ss_customer_sk": 2, "ss_quantity": 1,
    "ss_sales_price": 10,
  ],
  [
    "ss_item_sk": 2, "ss_sold_date_sk": 1, "ss_customer_sk": 2, "ss_quantity": 1,
    "ss_sales_price": 10,
  ],
  [
    "ss_item_sk": 2, "ss_sold_date_sk": 1, "ss_customer_sk": 2, "ss_quantity": 1,
    "ss_sales_price": 10,
  ],
]
let date_dim: [[String: Int]] = [["d_date_sk": 1, "d_year": 2000, "d_moy": 1]]
let item: [[String: Int]] = [["i_item_sk": 1], ["i_item_sk": 2]]
let catalog_sales = [
  [
    "cs_sold_date_sk": 1, "cs_item_sk": 1, "cs_bill_customer_sk": 1, "cs_quantity": 2,
    "cs_list_price": 10,
  ],
  [
    "cs_sold_date_sk": 1, "cs_item_sk": 2, "cs_bill_customer_sk": 2, "cs_quantity": 2,
    "cs_list_price": 10,
  ],
]
let web_sales = [
  [
    "ws_sold_date_sk": 1, "ws_item_sk": 1, "ws_bill_customer_sk": 1, "ws_quantity": 3,
    "ws_list_price": 10,
  ],
  [
    "ws_sold_date_sk": 1, "ws_item_sk": 2, "ws_bill_customer_sk": 2, "ws_quantity": 1,
    "ws_list_price": 10,
  ],
]
let frequent_ss_items =
  ({
    var _res: [Any] = []
    for ss in store_sales {
      for d in date_dim {
        if !(ss["ss_sold_date_sk"]! == d["d_date_sk"]!) { continue }
        if !(d["d_year"]! == 2000) { continue }
        for i in item {
          if !(ss["ss_item_sk"]! == i["i_item_sk"]!) { continue }
          _res.append(g.key.item_sk)
        }
      }
    }
    var _items = _res
    return _items
  }())
let customer_totals = _group_by(store_sales.map { $0 as Any }, { ss in ss["ss_customer_sk"]! }).map
{ g in
  [
    "cust": g.key,
    "sales": _sum(
      ({
        var _res: [Any] = []
        for x in g {
          _res.append(x.ss_quantity * x.ss_sales_price)
        }
        var _items = _res
        return _items
      }()).map { Double($0) }),
  ]
}
let max_sales = max(
  ({
    var _res: [Any] = []
    for c in customer_totals {
      _res.append(c["sales"]!)
    }
    var _items = _res
    return _items
  }()))
let best_ss_customer =
  ({
    var _res: [Any] = []
    for c in customer_totals {
      if c["sales"]! > 0.95 * max_sales {
        _res.append(c["cust"]!)
      }
    }
    var _items = _res
    return _items
  }())
let catalog =
  ({
    var _res: [Any] = []
    for cs in catalog_sales {
      for d in date_dim {
        if !(cs["cs_sold_date_sk"]! == d["d_date_sk"]!) { continue }
        if frequent_ss_items.contains(
          best_ss_customer.contains(
            d["d_year"]! == 2000 && d["d_moy"]! == 1 && cs["cs_bill_customer_sk"]!)
            && cs["cs_item_sk"]!)
        {
          _res.append(cs["cs_quantity"]! * cs["cs_list_price"]!)
        }
      }
    }
    var _items = _res
    return _items
  }())
let web =
  ({
    var _res: [Any] = []
    for ws in web_sales {
      for d in date_dim {
        if !(ws["ws_sold_date_sk"]! == d["d_date_sk"]!) { continue }
        if frequent_ss_items.contains(
          best_ss_customer.contains(
            d["d_year"]! == 2000 && d["d_moy"]! == 1 && ws["ws_bill_customer_sk"]!)
            && ws["ws_item_sk"]!)
        {
          _res.append(ws["ws_quantity"]! * ws["ws_list_price"]!)
        }
      }
    }
    var _items = _res
    return _items
  }())
let result = _sum(catalog.map { Double($0) }) + _sum(web.map { Double($0) })
func main() {
  _json(result)
  test_TPCDS_Q23_cross_channel_sales()
}
main()
