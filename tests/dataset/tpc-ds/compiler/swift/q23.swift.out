// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:05:48Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _max(_ v: Any) -> Any {
    var list: [Any]? = nil
    if let g = v as? _Group { list = g.Items }
    else if let arr = v as? [Any] { list = arr }
    else if let arr = v as? [Int] { return arr.max() ?? 0 }
    else if let arr = v as? [Double] { return arr.max() ?? 0.0 }
    else if let arr = v as? [String] { return arr.max() ?? "" }
    guard let items = list else { fatalError("max() expects list or group") }
    if items.isEmpty { return 0 }
    if let s = items[0] as? String {
        var m = s
        for it in items.dropFirst() {
            if let v = it as? String, v > m { m = v }
        }
        return m
    }
    func toDouble(_ v: Any) -> Double {
        if let i = v as? Int { return Double(i) }
        if let d = v as? Double { return d }
        if let f = v as? Float { return Double(f) }
        if let i = v as? Int64 { return Double(i) }
        return 0
    }
    var m = toDouble(items[0])
    var isFloat = items[0] is Double || items[0] is Float
    for it in items.dropFirst() {
        if it is Double || it is Float { isFloat = true }
        let d = toDouble(it)
        if d > m { m = d }
    }
    return isFloat ? m : Int(m)
}
struct Auto1: Equatable {
    var ss_customer_sk: Int
    var ss_item_sk: Int
    var ss_quantity: Int
    var ss_sales_price: Double
    var ss_sold_date_sk: Int
}

struct Auto2: Equatable {
    var d_date_sk: Int
    var d_moy: Int
    var d_year: Int
}

struct Auto3: Equatable {
    var i_item_sk: Int
}

struct Auto4: Equatable {
    var cs_bill_customer_sk: Int
    var cs_item_sk: Int
    var cs_list_price: Double
    var cs_quantity: Int
    var cs_sold_date_sk: Int
}

struct Auto5: Equatable {
    var ws_bill_customer_sk: Int
    var ws_item_sk: Int
    var ws_list_price: Double
    var ws_quantity: Int
    var ws_sold_date_sk: Int
}

struct StoreSale: Equatable {
    var ss_item_sk: Int
    var ss_sold_date_sk: Int
    var ss_customer_sk: Int
    var ss_quantity: Int
    var ss_sales_price: Double
}
struct DateDim: Equatable {
    var d_date_sk: Int
    var d_year: Int
    var d_moy: Int
}
struct Item: Equatable {
    var i_item_sk: Int
}
struct CatalogSale: Equatable {
    var cs_sold_date_sk: Int
    var cs_item_sk: Int
    var cs_bill_customer_sk: Int
    var cs_quantity: Int
    var cs_list_price: Double
}
struct WebSale: Equatable {
    var ws_sold_date_sk: Int
    var ws_item_sk: Int
    var ws_bill_customer_sk: Int
    var ws_quantity: Int
    var ws_list_price: Double
}
var store_sales = [Auto1(ss_customer_sk: 1, ss_item_sk: 1, ss_quantity: 1, ss_sales_price: 10.0, ss_sold_date_sk: 1), Auto1(ss_customer_sk: 1, ss_item_sk: 1, ss_quantity: 1, ss_sales_price: 10.0, ss_sold_date_sk: 1), Auto1(ss_customer_sk: 1, ss_item_sk: 1, ss_quantity: 1, ss_sales_price: 10.0, ss_sold_date_sk: 1), Auto1(ss_customer_sk: 1, ss_item_sk: 1, ss_quantity: 1, ss_sales_price: 10.0, ss_sold_date_sk: 1), Auto1(ss_customer_sk: 1, ss_item_sk: 1, ss_quantity: 1, ss_sales_price: 10.0, ss_sold_date_sk: 1), Auto1(ss_customer_sk: 2, ss_item_sk: 2, ss_quantity: 1, ss_sales_price: 10.0, ss_sold_date_sk: 1), Auto1(ss_customer_sk: 2, ss_item_sk: 2, ss_quantity: 1, ss_sales_price: 10.0, ss_sold_date_sk: 1), Auto1(ss_customer_sk: 2, ss_item_sk: 2, ss_quantity: 1, ss_sales_price: 10.0, ss_sold_date_sk: 1)]
var date_dim = [Auto2(d_date_sk: 1, d_moy: 1, d_year: 2000)]
var item = [Auto3(i_item_sk: 1), Auto3(i_item_sk: 2)]
var catalog_sales = [Auto4(cs_bill_customer_sk: 1, cs_item_sk: 1, cs_list_price: 10.0, cs_quantity: 2, cs_sold_date_sk: 1), Auto4(cs_bill_customer_sk: 2, cs_item_sk: 2, cs_list_price: 10.0, cs_quantity: 2, cs_sold_date_sk: 1)]
var web_sales = [Auto5(ws_bill_customer_sk: 1, ws_item_sk: 1, ws_list_price: 10.0, ws_quantity: 3, ws_sold_date_sk: 1), Auto5(ws_bill_customer_sk: 2, ws_item_sk: 2, ws_list_price: 10.0, ws_quantity: 1, ws_sold_date_sk: 1)]
var frequent_ss_items = { () -> [Any] in
	var _groups: [String:_Group] = [:]
	var _order: [String] = []
	for ss in store_sales {
		for d in date_dim {
			if !(ss.ss_sold_date_sk == d.d_date_sk) { continue }
			for i in item {
				if !(ss.ss_item_sk == i.i_item_sk) { continue }
				if !(d.d_year == 2000) { continue }
				let _k = ["item_sk": i.i_item_sk, "date_sk": d.d_date_sk]
				let _ks = _keyStr(_k)
				if _groups[_ks] == nil {
				    _groups[_ks] = _Group(_k)
				    _order.append(_ks)
				}
				_groups[_ks]!.Items.append(["ss": ss, "d": d, "i": i])
			}
		}
	}
	var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
	for k in _order {
	    if let g = _groups[k] {
	        _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
	    }
	}
	_tmp = _tmp.filter { g in g.items.count > 4 }
	return _tmp.map { g in (g.key["item_sk"] as! Int) }
}())
var customer_totals = { () -> [Any] in
    var _groups: [Int:[Auto1]] = [:]
    for ss in store_sales {
        let _k = ss.ss_customer_sk
        _groups[_k, default: []].append(ss)
    }
    var _tmp: [(key: Int, items: [Auto1])] = []
    for (k, v) in _groups {
        _tmp.append((key: k, items: v))
    }
    return _tmp.map { g in ["cust": g.key, "sales": _sum(g.items.map { x in Double(x.ss_quantity) * x.ss_sales_price })] }
}()
let max_sales = _max(customer_totals.map { c in c["sales"]! })
var best_ss_customer = customer_totals.compactMap { c in c["sales"]! > 0.95 * max_sales ? (c["cust"]!) : nil }
var catalog = ({
	var _res: [Int] = []
	for cs in catalog_sales {
		for d in date_dim {
			if !(cs.cs_sold_date_sk == d.d_date_sk) { continue }
			if !(frequent_ss_items.contains(best_ss_customer.contains(d.d_year == 2000 && d.d_moy == 1 && cs.cs_bill_customer_sk) && cs.cs_item_sk)) { continue }
			_res.append(Double(cs.cs_quantity) * cs.cs_list_price)
		}
	}
	return _res
}())
var web = ({
	var _res: [Int] = []
	for ws in web_sales {
		for d in date_dim {
			if !(ws.ws_sold_date_sk == d.d_date_sk) { continue }
			if !(frequent_ss_items.contains(best_ss_customer.contains(d.d_year == 2000 && d.d_moy == 1 && ws.ws_bill_customer_sk) && ws.ws_item_sk)) { continue }
			_res.append(Double(ws.ws_quantity) * ws.ws_list_price)
		}
	}
	return _res
}())
let result = _sum(catalog) + _sum(web)
_json(result)
expect(_equal(result, 50.0))
