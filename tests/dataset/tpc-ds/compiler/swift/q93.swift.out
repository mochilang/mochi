import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

class _Group {
  var key: Any
  var Items: [Any] = []
  init(_ k: Any) { self.key = k }
}

func _group_by(_ src: [Any], _ keyfn: (Any) -> Any) -> [_Group] {
  func keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
      let s = String(data: data, encoding: .utf8)
    {
      return s
    }
    return String(describing: v)
  }
  var groups: [String: _Group] = [:]
  var order: [String] = []
  for it in src {
    let key = keyfn(it)
    let ks = keyStr(key)
    if groups[ks] == nil {
      groups[ks] = _Group(key)
      order.append(ks)
    }
    groups[ks]!.Items.append(it)
  }
  return order.compactMap { groups[$0] }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

struct StoreSale {
  var ss_item_sk: Int
  var ss_ticket_number: Int
  var ss_customer_sk: Int
  var ss_quantity: Int
  var ss_sales_price: Double
}

struct StoreReturn {
  var sr_item_sk: Int
  var sr_ticket_number: Int
  var sr_reason_sk: Int
  var sr_return_quantity: Int
}

struct Reason {
  var r_reason_sk: Int
  var r_reason_desc: String
}

func test_TPCDS_Q93_active_sales() {
  expect(result == [["ss_customer_sk": 1, "sumsales": 40]])
}

let store_sales = [
  [
    "ss_item_sk": 1, "ss_ticket_number": 1, "ss_customer_sk": 1, "ss_quantity": 5,
    "ss_sales_price": 10,
  ],
  [
    "ss_item_sk": 1, "ss_ticket_number": 2, "ss_customer_sk": 2, "ss_quantity": 3,
    "ss_sales_price": 20,
  ],
]
let store_returns: [[String: Int]] = [
  ["sr_item_sk": 1, "sr_ticket_number": 1, "sr_reason_sk": 1, "sr_return_quantity": 1]
]
let reason = [["r_reason_sk": 1, "r_reason_desc": "ReasonA"]]
let t =
  ({
    var _res: [[String: Any]] = []
    for ss in store_sales {
      for sr in store_returns {
        if !(ss["ss_item_sk"]! == sr["sr_item_sk"]!
          && ss["ss_ticket_number"]! == sr["sr_ticket_number"]!)
        {
          continue
        }
        for r in reason {
          if !(sr["sr_reason_sk"]! == r["r_reason_sk"]!) { continue }
          if !(r["r_reason_desc"]! == "ReasonA") { continue }
          _res.append([
            "ss_customer_sk": ss["ss_customer_sk"]!,
            "act_sales":
              (sr != nil
              ? (ss["ss_quantity"]! - sr["sr_return_quantity"]!) * ss["ss_sales_price"]!
              : ss["ss_quantity"]! * ss["ss_sales_price"]!),
          ])
        }
      }
    }
    var _items = _res
    return _items
  }())
let result = _group_by(t.map { $0 as Any }, { x in x["ss_customer_sk"]! }).map { g in
  [
    "ss_customer_sk": g.key,
    "sumsales": _sum(
      ({
        var _res: [Any] = []
        for y in g {
          _res.append(y.act_sales)
        }
        var _items = _res
        return _items
      }()).map { Double($0) }),
  ]
}
func main() {
  _json(result)
  test_TPCDS_Q93_active_sales()
}
main()
