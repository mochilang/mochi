// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:09:27Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var ss_customer_sk: Int
    var ss_item_sk: Int
    var ss_quantity: Int
    var ss_sales_price: Double
    var ss_ticket_number: Int
}

struct Auto2: Equatable {
    var sr_item_sk: Int
    var sr_reason_sk: Int
    var sr_return_quantity: Int
    var sr_ticket_number: Int
}

struct Auto3: Equatable {
    var r_reason_desc: String
    var r_reason_sk: Int
}

struct Auto4: Equatable {
    var ss_customer_sk: Int
    var sumsales: Double
}

struct StoreSale: Equatable {
    var ss_item_sk: Int
    var ss_ticket_number: Int
    var ss_customer_sk: Int
    var ss_quantity: Int
    var ss_sales_price: Double
}
struct StoreReturn: Equatable {
    var sr_item_sk: Int
    var sr_ticket_number: Int
    var sr_reason_sk: Int
    var sr_return_quantity: Int
}
struct Reason: Equatable {
    var r_reason_sk: Int
    var r_reason_desc: String
}
var store_sales = [Auto1(ss_customer_sk: 1, ss_item_sk: 1, ss_quantity: 5, ss_sales_price: 10.0, ss_ticket_number: 1), Auto1(ss_customer_sk: 2, ss_item_sk: 1, ss_quantity: 3, ss_sales_price: 20.0, ss_ticket_number: 2)]
var store_returns = [Auto2(sr_item_sk: 1, sr_reason_sk: 1, sr_return_quantity: 1, sr_ticket_number: 1)]
var reason = [Auto3(r_reason_desc: "ReasonA", r_reason_sk: 1)]
var t = ({
	var _res: [(act_sales: Any, ss_customer_sk: Int)] = []
	for ss in store_sales {
		for sr in store_returns {
			if !(ss.ss_item_sk == sr.sr_item_sk && ss.ss_ticket_number == sr.sr_ticket_number) { continue }
			for r in reason {
				if !(sr != nil && sr.sr_reason_sk == r.r_reason_sk) { continue }
				if !(r == nil || r.r_reason_desc == "ReasonA") { continue }
				_res.append(["ss_customer_sk": ss.ss_customer_sk, "act_sales": sr != nil ? Double((ss.ss_quantity - sr.sr_return_quantity)) * ss.ss_sales_price : Double(ss.ss_quantity) * ss.ss_sales_price])
			}
		}
	}
	return _res
}())
var result = { () -> [Any] in
    var _groups: [Int:[[String:Any]]] = [:]
    for x in t {
        let _k = (x["ss_customer_sk"] as! Int)
        _groups[_k, default: []].append(x)
    }
    var _tmp: [(key: Int, items: [[String:Any]])] = []
    for (k, v) in _groups {
        _tmp.append((key: k, items: v))
    }
    _tmp.sort { [_sum($0.items.map { y in y["act_sales"]! }), $0.key] < [_sum($1.items.map { y in y["act_sales"]! }), $1.key] }
    return _tmp.map { g in ["ss_customer_sk": g.key, "sumsales": _sum(g.items.map { y in y["act_sales"]! })] }
}()
_json(result)
expect(_equal(result, [Auto4(ss_customer_sk: 1, sumsales: 40.0), Auto4(ss_customer_sk: 2, sumsales: 60.0)]))
