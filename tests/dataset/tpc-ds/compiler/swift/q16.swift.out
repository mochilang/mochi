// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:05:23Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var cs_call_center_sk: Int
    var cs_ext_ship_cost: Double
    var cs_net_profit: Double
    var cs_order_number: Int
    var cs_ship_addr_sk: Int
    var cs_ship_date_sk: Int
    var cs_warehouse_sk: Int
}

struct Auto2: Equatable {
    var d_date: String
    var d_date_sk: Int
}

struct Auto3: Equatable {
    var ca_address_sk: Int
    var ca_state: String
}

struct Auto4: Equatable {
    var cc_call_center_sk: Int
    var cc_county: String
}

struct Auto5: Equatable {
    var order_count: Int
    var total_net_profit: Double
    var total_shipping_cost: Double
}

struct CatalogSale: Equatable {
    var cs_order_number: Int
    var cs_ship_date_sk: Int
    var cs_ship_addr_sk: Int
    var cs_call_center_sk: Int
    var cs_warehouse_sk: Int
    var cs_ext_ship_cost: Double
    var cs_net_profit: Double
}
struct DateDim: Equatable {
    var d_date_sk: Int
    var d_date: String
}
struct CustomerAddress: Equatable {
    var ca_address_sk: Int
    var ca_state: String
}
struct CallCenter: Equatable {
    var cc_call_center_sk: Int
    var cc_county: String
}
struct CatalogReturn: Equatable {
    var cr_order_number: Int
}
var catalog_sales = [Auto1(cs_call_center_sk: 1, cs_ext_ship_cost: 5.0, cs_net_profit: 20.0, cs_order_number: 1, cs_ship_addr_sk: 1, cs_ship_date_sk: 1, cs_warehouse_sk: 1), Auto1(cs_call_center_sk: 1, cs_ext_ship_cost: 0.0, cs_net_profit: 0.0, cs_order_number: 1, cs_ship_addr_sk: 1, cs_ship_date_sk: 1, cs_warehouse_sk: 2)]
var date_dim = [Auto2(d_date: "2000-03-01", d_date_sk: 1)]
var customer_address = [Auto3(ca_address_sk: 1, ca_state: "CA")]
var call_center = [Auto4(cc_call_center_sk: 1, cc_county: "CountyA")]
var catalog_returns = [Any]()
func distinct(_ xs: [any]) -> [any] {
    var out = [Any]()
    for x in xs {
        if !contains(out, x) {
            out = out + [x]
        }
    }
    return out
}
var filtered = { () -> [Any] in
	var _groups: [String:_Group] = [:]
	var _order: [String] = []
	for cs1 in catalog_sales {
		for d in date_dim {
			if !(cs1.cs_ship_date_sk == d.d_date_sk && d.d_date >= "2000-03-01" && d.d_date <= "2000-04-30") { continue }
			for ca in customer_address {
				if !(cs1.cs_ship_addr_sk == ca.ca_address_sk && ca.ca_state == "CA") { continue }
				for cc in call_center {
					if !(cs1.cs_call_center_sk == cc.cc_call_center_sk && cc.cc_county == "CountyA") { continue }
					if !(catalog_sales.contains { cs2 in cs1.cs_order_number == cs2.cs_order_number && cs1.cs_warehouse_sk != cs2.cs_warehouse_sk } && catalog_returns.contains { cr in cs1.cs_order_number == cr.cr_order_number } == false) { continue }
					let _k = []
					let _ks = _keyStr(_k)
					if _groups[_ks] == nil {
					    _groups[_ks] = _Group(_k)
					    _order.append(_ks)
					}
					_groups[_ks]!.Items.append(["cs1": cs1, "d": d, "ca": ca, "cc": cc])
				}
			}
		}
	}
	var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
	for k in _order {
	    if let g = _groups[k] {
	        _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
	    }
	}
	return _tmp.map { g in ["order_count": distinct(g.items.map { x in x["cs_order_number"]! }).count, "total_shipping_cost": _sum(g.items.map { x in x["cs_ext_ship_cost"]! }), "total_net_profit": _sum(g.items.map { x in x["cs_net_profit"]! })] }
}())
_json(filtered)
expect(_equal(filtered, [Auto5(order_count: 1, total_net_profit: 20.0, total_shipping_cost: 5.0)]))
