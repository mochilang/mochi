// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:06:13Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var d_day_name: String
    var d_year: Int
    var date_sk: Int
}

struct Auto2: Equatable {
    var gmt_offset: Int
    var store_id: String
    var store_name: String
    var store_sk: Int
}

struct Auto3: Equatable {
    var sales_price: Double
    var sold_date_sk: Int
    var store_sk: Int
}

struct Auto5: Equatable {
    var fri_sales: Double
    var mon_sales: Double
    var s_store_id: String
    var s_store_name: String
    var sat_sales: Double
    var sun_sales: Double
    var thu_sales: Double
    var tue_sales: Double
    var wed_sales: Double
}

struct Record: Equatable {
    var d_day_name: String
    var price: Double
    var s_store_id: String
    var s_store_name: String
}

var date_dim = [Auto1(d_day_name: "Sunday", d_year: 2020, date_sk: 1), Auto1(d_day_name: "Monday", d_year: 2020, date_sk: 2), Auto1(d_day_name: "Tuesday", d_year: 2020, date_sk: 3), Auto1(d_day_name: "Wednesday", d_year: 2020, date_sk: 4), Auto1(d_day_name: "Thursday", d_year: 2020, date_sk: 5), Auto1(d_day_name: "Friday", d_year: 2020, date_sk: 6), Auto1(d_day_name: "Saturday", d_year: 2020, date_sk: 7)]
var store = [Auto2(gmt_offset: 0, store_id: "S1", store_name: "Main", store_sk: 1)]
var store_sales = [Auto3(sales_price: 10.0, sold_date_sk: 1, store_sk: 1), Auto3(sales_price: 20.0, sold_date_sk: 2, store_sk: 1), Auto3(sales_price: 30.0, sold_date_sk: 3, store_sk: 1), Auto3(sales_price: 40.0, sold_date_sk: 4, store_sk: 1), Auto3(sales_price: 50.0, sold_date_sk: 5, store_sk: 1), Auto3(sales_price: 60.0, sold_date_sk: 6, store_sk: 1), Auto3(sales_price: 70.0, sold_date_sk: 7, store_sk: 1)]
let year = 2020
let gmt = 0
var records = ({
	var _res: [(d_day_name: String, price: Double, s_store_id: String, s_store_name: String)] = []
	for d in date_dim {
		for ss in store_sales {
			if !(ss.sold_date_sk == d.date_sk) { continue }
			for s in store {
				if !(ss.store_sk == s.store_sk) { continue }
				if !(s.gmt_offset == gmt && d.d_year == year) { continue }
				_res.append(["d_day_name": d.d_day_name, "s_store_name": s.store_name, "s_store_id": s.store_id, "price": ss.sales_price])
			}
		}
	}
	return _res
}())
var base = { () -> [Any] in
    var _groups: [String:_Group] = [:]
    var _order: [String] = []
    for r in records {
        let _k = ["name": r.s_store_name, "id": r.s_store_id]
        let _ks = _keyStr(_k)
        if _groups[_ks] == nil {
            _groups[_ks] = _Group(_k)
            _order.append(_ks)
        }
        _groups[_ks]!.Items.append(r)
    }
    var _tmp: [(key: [String:Any], items: [Record])] = []
    for k in _order {
        if let g = _groups[k] {
            _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! Record }))
        }
    }
    return _tmp.map { g in ["s_store_name": (g.key["name"] as! String), "s_store_id": (g.key["id"] as! String), "sun_sales": _sum(g.items.map { x in x.d_day_name == "Sunday" ? x.price : 0.0 }), "mon_sales": _sum(g.items.map { x in x.d_day_name == "Monday" ? x.price : 0.0 }), "tue_sales": _sum(g.items.map { x in x.d_day_name == "Tuesday" ? x.price : 0.0 }), "wed_sales": _sum(g.items.map { x in x.d_day_name == "Wednesday" ? x.price : 0.0 }), "thu_sales": _sum(g.items.map { x in x.d_day_name == "Thursday" ? x.price : 0.0 }), "fri_sales": _sum(g.items.map { x in x.d_day_name == "Friday" ? x.price : 0.0 }), "sat_sales": _sum(g.items.map { x in x.d_day_name == "Saturday" ? x.price : 0.0 })] }
}()
let result = base
_json(result)
expect(_equal(result, [Auto5(fri_sales: 60.0, mon_sales: 20.0, s_store_id: "S1", s_store_name: "Main", sat_sales: 70.0, sun_sales: 10.0, thu_sales: 50.0, tue_sales: 30.0, wed_sales: 40.0)]))
