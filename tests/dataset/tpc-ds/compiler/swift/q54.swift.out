// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:07:16Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var customer: Int
    var price: Double
    var sold_date: Int
}

struct Auto2: Equatable {
    var d_date_sk: Int
    var d_month_seq: Int
}

struct Auto3: Equatable {
    var c_current_addr_sk: Int
    var c_customer_sk: Int
}

struct Auto4: Equatable {
    var ca_address_sk: Int
    var ca_county: String
    var ca_state: String
}

struct Auto5: Equatable {
    var s_county: String
    var s_state: String
    var s_store_sk: Int
}

struct Auto7: Equatable {
    var num_customers: Int
    var segment: Int
    var segment_base: Int
}

struct Revenue: Equatable {
    var amt: Double
    var customer: Int
}

var store_sales = [Auto1(customer: 1, price: 60.0, sold_date: 2), Auto1(customer: 2, price: 40.0, sold_date: 2)]
var date_dim = [Auto2(d_date_sk: 2, d_month_seq: 5)]
var customer = [Auto3(c_current_addr_sk: 1, c_customer_sk: 1), Auto3(c_current_addr_sk: 1, c_customer_sk: 2)]
var customer_address = [Auto4(ca_address_sk: 1, ca_county: "X", ca_state: "Y")]
var store = [Auto5(s_county: "X", s_state: "Y", s_store_sk: 1)]
func int(_ x: Double) -> Int {
    return Int(x)
}
var revenue = ({
	var _res: [(amt: Double, customer: Int)] = []
	for ss in store_sales {
		for d in date_dim {
			if !(ss.sold_date == d.d_date_sk) { continue }
			for c in customer {
				if !(ss.customer == c.c_customer_sk) { continue }
				for ca in customer_address {
					if !(c.c_current_addr_sk == ca.ca_address_sk && ca.ca_county == "X" && ca.ca_state == "Y") { continue }
					for s in store {
						if !(1 == s.s_store_sk && ca.ca_county == s.s_county && ca.ca_state == s.s_state) { continue }
						_res.append(["customer": c.c_customer_sk, "amt": ss.price])
					}
				}
			}
		}
	}
	return _res
}())
var by_customer = { () -> [Any] in
    var _groups: [Int:[Revenue]] = [:]
    for r in revenue {
        let _k = r.customer
        _groups[_k, default: []].append(r)
    }
    var _tmp: [(key: Int, items: [Revenue])] = []
    for (k, v) in _groups {
        _tmp.append((key: k, items: v))
    }
    return _tmp.map { g in ["customer": g.key, "revenue": _sum(g.items.map { x in x.amt })] }
}()
var segments = { () -> [Any] in
    var _groups: [String:_Group] = [:]
    var _order: [String] = []
    for r in by_customer {
        let _k = ["seg": int(r["revenue"]! / 50)]
        let _ks = _keyStr(_k)
        if _groups[_ks] == nil {
            _groups[_ks] = _Group(_k)
            _order.append(_ks)
        }
        _groups[_ks]!.Items.append(r)
    }
    var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
    for k in _order {
        if let g = _groups[k] {
            _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
        }
    }
    return _tmp.map { g in ["segment": g.key["seg"]!, "num_customers": g.items.count, "segment_base": g.key["seg"]! * 50] }
}()
let result = segments
_json(result)
expect(_equal(result, [Auto7(num_customers: 1, segment: 1, segment_base: 50), Auto7(num_customers: 1, segment: 0, segment_base: 0)]))
