import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

struct CatalogSale {
  var cs_sold_date_sk: Int
  var cs_item_sk: Int
  var cs_bill_cdemo_sk: Int
  var cs_promo_sk: Int
  var cs_quantity: Int
  var cs_list_price: Double
  var cs_coupon_amt: Double
  var cs_sales_price: Double
}

struct CustomerDemo {
  var cd_demo_sk: Int
  var cd_gender: String
  var cd_marital_status: String
  var cd_education_status: String
}

struct DateDim {
  var d_date_sk: Int
  var d_year: Int
}

struct Item {
  var i_item_sk: Int
  var i_item_id: String
}

struct Promotion {
  var p_promo_sk: Int
  var p_channel_email: String
  var p_channel_event: String
}

func test_TPCDS_Q26_demographic_averages() {
  expect(result == [["i_item_id": "ITEM1", "agg1": 10, "agg2": 100, "agg3": 5, "agg4": 95]])
}

let catalog_sales = [
  [
    "cs_sold_date_sk": 1, "cs_item_sk": 1, "cs_bill_cdemo_sk": 1, "cs_promo_sk": 1,
    "cs_quantity": 10, "cs_list_price": 100, "cs_coupon_amt": 5, "cs_sales_price": 95,
  ],
  [
    "cs_sold_date_sk": 1, "cs_item_sk": 2, "cs_bill_cdemo_sk": 2, "cs_promo_sk": 2,
    "cs_quantity": 5, "cs_list_price": 50, "cs_coupon_amt": 2, "cs_sales_price": 48,
  ],
]
let customer_demographics = [
  ["cd_demo_sk": 1, "cd_gender": "M", "cd_marital_status": "S", "cd_education_status": "College"],
  [
    "cd_demo_sk": 2, "cd_gender": "F", "cd_marital_status": "M",
    "cd_education_status": "High School",
  ],
]
let date_dim: [[String: Int]] = [["d_date_sk": 1, "d_year": 2000]]
let item = [["i_item_sk": 1, "i_item_id": "ITEM1"], ["i_item_sk": 2, "i_item_id": "ITEM2"]]
let promotion = [
  ["p_promo_sk": 1, "p_channel_email": "N", "p_channel_event": "Y"],
  ["p_promo_sk": 2, "p_channel_email": "Y", "p_channel_event": "N"],
]
let result =
  ({
    var _res: [[String: Any]] = []
    for cs in catalog_sales {
      for cd in customer_demographics {
        if !(cs["cs_bill_cdemo_sk"]! == cd["cd_demo_sk"]!) { continue }
        for d in date_dim {
          if !(cs["cs_sold_date_sk"]! == d["d_date_sk"]!) { continue }
          for i in item {
            if !(cs["cs_item_sk"]! == i["i_item_sk"]!) { continue }
            for p in promotion {
              if !(cs["cs_promo_sk"]! == p["p_promo_sk"]!) { continue }
              if !(cd["cd_gender"]! == "M" && cd["cd_marital_status"]! == "S"
                && cd["cd_education_status"]! == "College"
                && (p["p_channel_email"]! == "N" || p["p_channel_event"]! == "N")
                && d["d_year"]! == 2000)
              {
                continue
              }
              _res.append([
                "i_item_id": g.key,
                "agg1": _avg(
                  ({
                    var _res: [Any] = []
                    for x in g {
                      _res.append(x.cs_quantity)
                    }
                    var _items = _res
                    return _items
                  }()).map { Double($0) }),
                "agg2": _avg(
                  ({
                    var _res: [Any] = []
                    for x in g {
                      _res.append(x.cs_list_price)
                    }
                    var _items = _res
                    return _items
                  }()).map { Double($0) }),
                "agg3": _avg(
                  ({
                    var _res: [Any] = []
                    for x in g {
                      _res.append(x.cs_coupon_amt)
                    }
                    var _items = _res
                    return _items
                  }()).map { Double($0) }),
                "agg4": _avg(
                  ({
                    var _res: [Any] = []
                    for x in g {
                      _res.append(x.cs_sales_price)
                    }
                    var _items = _res
                    return _items
                  }()).map { Double($0) }),
              ])
            }
          }
        }
      }
    }
    var _items = _res
    return _items
  }())
func main() {
  _json(result)
  test_TPCDS_Q26_demographic_averages()
}
main()
