// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:05:10Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var ws_ext_sales_price: Double
    var ws_sold_date_name: String
    var ws_sold_date_sk: Int
}

struct Auto2: Equatable {
    var cs_ext_sales_price: Double
    var cs_sold_date_name: String
    var cs_sold_date_sk: Int
}

struct Auto3: Equatable {
    var d_date_sk: Int
    var d_day_name: String
    var d_week_seq: Int
    var d_year: Int
}

struct Auto4: Equatable {
    var d_week_seq1: Int
    var mon_ratio: Double
    var sun_ratio: Double
}

var web_sales = [Auto1(ws_ext_sales_price: 5.0, ws_sold_date_name: "Sunday", ws_sold_date_sk: 1), Auto1(ws_ext_sales_price: 5.0, ws_sold_date_name: "Monday", ws_sold_date_sk: 2), Auto1(ws_ext_sales_price: 10.0, ws_sold_date_name: "Sunday", ws_sold_date_sk: 8), Auto1(ws_ext_sales_price: 10.0, ws_sold_date_name: "Monday", ws_sold_date_sk: 9)]
var catalog_sales = [Auto2(cs_ext_sales_price: 5.0, cs_sold_date_name: "Sunday", cs_sold_date_sk: 1), Auto2(cs_ext_sales_price: 5.0, cs_sold_date_name: "Monday", cs_sold_date_sk: 2), Auto2(cs_ext_sales_price: 10.0, cs_sold_date_name: "Sunday", cs_sold_date_sk: 8), Auto2(cs_ext_sales_price: 10.0, cs_sold_date_name: "Monday", cs_sold_date_sk: 9)]
var date_dim = [Auto3(d_date_sk: 1, d_day_name: "Sunday", d_week_seq: 1, d_year: 1998), Auto3(d_date_sk: 2, d_day_name: "Monday", d_week_seq: 1, d_year: 1998), Auto3(d_date_sk: 8, d_day_name: "Sunday", d_week_seq: 54, d_year: 1999), Auto3(d_date_sk: 9, d_day_name: "Monday", d_week_seq: 54, d_year: 1999)]
let wscs = ((web_sales.map { ws in ["sold_date_sk": ws.ws_sold_date_sk, "sales_price": ws.ws_ext_sales_price, "day": ws.ws_sold_date_name] }) + (catalog_sales.map { cs in ["sold_date_sk": cs.cs_sold_date_sk, "sales_price": cs.cs_ext_sales_price, "day": cs.cs_sold_date_name] }))
var wswscs = { () -> [Any] in
	var _groups: [String:_Group] = [:]
	var _order: [String] = []
	for w in wscs {
		for d in date_dim {
			if !(w.sold_date_sk == d.d_date_sk) { continue }
			let _k = ["week_seq": d.d_week_seq]
			let _ks = _keyStr(_k)
			if _groups[_ks] == nil {
			    _groups[_ks] = _Group(_k)
			    _order.append(_ks)
			}
			_groups[_ks]!.Items.append(["w": w, "d": d])
		}
	}
	var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
	for k in _order {
	    if let g = _groups[k] {
	        _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
	    }
	}
	return _tmp.map { g in ["d_week_seq": (g.key["week_seq"] as! Int), "sun_sales": _sum(g.items.compactMap { x in x["day"]! == "Sunday" ? (x["sales_price"]!) : nil }), "mon_sales": _sum(g.items.compactMap { x in x["day"]! == "Monday" ? (x["sales_price"]!) : nil }), "tue_sales": _sum(g.items.compactMap { x in x["day"]! == "Tuesday" ? (x["sales_price"]!) : nil }), "wed_sales": _sum(g.items.compactMap { x in x["day"]! == "Wednesday" ? (x["sales_price"]!) : nil }), "thu_sales": _sum(g.items.compactMap { x in x["day"]! == "Thursday" ? (x["sales_price"]!) : nil }), "fri_sales": _sum(g.items.compactMap { x in x["day"]! == "Friday" ? (x["sales_price"]!) : nil }), "sat_sales": _sum(g.items.compactMap { x in x["day"]! == "Saturday" ? (x["sales_price"]!) : nil })] }
}())
var year1 = wswscs.filter { w in w["d_week_seq"]! == 1 }
var year2 = wswscs.filter { w in w["d_week_seq"]! == 54 }
var result = ({
	var _res: [(d_week_seq1: Any, mon_ratio: Any, sun_ratio: Any)] = []
	for y in year1 {
		for z in year2 {
			if !(y["d_week_seq"]! == z["d_week_seq"]! - 53) { continue }
			_res.append(["d_week_seq1": y["d_week_seq"]!, "sun_ratio": y["sun_sales"]! / z["sun_sales"]!, "mon_ratio": y["mon_sales"]! / z["mon_sales"]!])
		}
	}
	return _res
}())
_json(result)
expect(_equal(result, [Auto4(d_week_seq1: 1, mon_ratio: 0.5, sun_ratio: 0.5)]))
