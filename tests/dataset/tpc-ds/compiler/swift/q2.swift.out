import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

func test_TPCDS_Q2_result() {
  expect(result == [["d_week_seq1": 1, "sun_ratio": 0.5, "mon_ratio": 0.5]])
}

let web_sales = [
  ["ws_sold_date_sk": 1, "ws_ext_sales_price": 5, "ws_sold_date_name": "Sunday"],
  ["ws_sold_date_sk": 2, "ws_ext_sales_price": 5, "ws_sold_date_name": "Monday"],
  ["ws_sold_date_sk": 8, "ws_ext_sales_price": 10, "ws_sold_date_name": "Sunday"],
  ["ws_sold_date_sk": 9, "ws_ext_sales_price": 10, "ws_sold_date_name": "Monday"],
]
let catalog_sales = [
  ["cs_sold_date_sk": 1, "cs_ext_sales_price": 5, "cs_sold_date_name": "Sunday"],
  ["cs_sold_date_sk": 2, "cs_ext_sales_price": 5, "cs_sold_date_name": "Monday"],
  ["cs_sold_date_sk": 8, "cs_ext_sales_price": 10, "cs_sold_date_name": "Sunday"],
  ["cs_sold_date_sk": 9, "cs_ext_sales_price": 10, "cs_sold_date_name": "Monday"],
]
let date_dim = [
  ["d_date_sk": 1, "d_week_seq": 1, "d_day_name": "Sunday", "d_year": 1998],
  ["d_date_sk": 2, "d_week_seq": 1, "d_day_name": "Monday", "d_year": 1998],
  ["d_date_sk": 8, "d_week_seq": 54, "d_day_name": "Sunday", "d_year": 1999],
  ["d_date_sk": 9, "d_week_seq": 54, "d_day_name": "Monday", "d_year": 1999],
]
let wscs =
  (({
    var _res: [[String: Any]] = []
    for ws in web_sales {
      _res.append([
        "sold_date_sk": ws["ws_sold_date_sk"]!, "sales_price": ws["ws_ext_sales_price"]!,
        "day": ws["ws_sold_date_name"]!,
      ])
    }
    var _items = _res
    return _items
  }()))
  + (({
    var _res: [[String: Any]] = []
    for cs in catalog_sales {
      _res.append([
        "sold_date_sk": cs["cs_sold_date_sk"]!, "sales_price": cs["cs_ext_sales_price"]!,
        "day": cs["cs_sold_date_name"]!,
      ])
    }
    var _items = _res
    return _items
  }()))
let wswscs =
  ({
    var _res: [[String: Any]] = []
    for w in wscs {
      for d in date_dim {
        if !(w["sold_date_sk"]! == d["d_date_sk"]!) { continue }
        _res.append([
          "d_week_seq": g.key.week_seq,
          "sun_sales": _sum(
            ({
              var _res: [Any] = []
              for x in g {
                if !(x.day == "Sunday") { continue }
                _res.append(x.sales_price)
              }
              var _items = _res
              return _items
            }()).map { Double($0) }),
          "mon_sales": _sum(
            ({
              var _res: [Any] = []
              for x in g {
                if !(x.day == "Monday") { continue }
                _res.append(x.sales_price)
              }
              var _items = _res
              return _items
            }()).map { Double($0) }),
          "tue_sales": _sum(
            ({
              var _res: [Any] = []
              for x in g {
                if !(x.day == "Tuesday") { continue }
                _res.append(x.sales_price)
              }
              var _items = _res
              return _items
            }()).map { Double($0) }),
          "wed_sales": _sum(
            ({
              var _res: [Any] = []
              for x in g {
                if !(x.day == "Wednesday") { continue }
                _res.append(x.sales_price)
              }
              var _items = _res
              return _items
            }()).map { Double($0) }),
          "thu_sales": _sum(
            ({
              var _res: [Any] = []
              for x in g {
                if !(x.day == "Thursday") { continue }
                _res.append(x.sales_price)
              }
              var _items = _res
              return _items
            }()).map { Double($0) }),
          "fri_sales": _sum(
            ({
              var _res: [Any] = []
              for x in g {
                if !(x.day == "Friday") { continue }
                _res.append(x.sales_price)
              }
              var _items = _res
              return _items
            }()).map { Double($0) }),
          "sat_sales": _sum(
            ({
              var _res: [Any] = []
              for x in g {
                if !(x.day == "Saturday") { continue }
                _res.append(x.sales_price)
              }
              var _items = _res
              return _items
            }()).map { Double($0) }),
        ])
      }
    }
    var _items = _res
    return _items
  }())
let year1 =
  ({
    var _res: [[String: Any]] = []
    for w in wswscs {
      if !(w["d_week_seq"]! == 1) { continue }
      _res.append(w)
    }
    var _items = _res
    return _items
  }())
let year2 =
  ({
    var _res: [[String: Any]] = []
    for w in wswscs {
      if !(w["d_week_seq"]! == 54) { continue }
      _res.append(w)
    }
    var _items = _res
    return _items
  }())
let result =
  ({
    var _res: [[String: Any]] = []
    for y in year1 {
      for z in year2 {
        if !(y["d_week_seq"]! == z["d_week_seq"]! - 53) { continue }
        _res.append([
          "d_week_seq1": y["d_week_seq"]!, "sun_ratio": y["sun_sales"]! / z["sun_sales"]!,
          "mon_ratio": y["mon_sales"]! / z["mon_sales"]!,
        ])
      }
    }
    var _items = _res
    return _items
  }())
func main() {
  _json(result)
  test_TPCDS_Q2_result()
}
main()
