// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:09:38Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
struct Auto1: Equatable {
    var cs_call_center_sk: Int
    var cs_ship_date_sk: Int
    var cs_ship_mode_sk: Int
    var cs_sold_date_sk: Int
    var cs_warehouse_sk: Int
}

struct Auto2: Equatable {
    var w_warehouse_name: String
    var w_warehouse_sk: Int
}

struct Auto3: Equatable {
    var sm_ship_mode_sk: Int
    var sm_type: String
}

struct Auto4: Equatable {
    var cc_call_center_sk: Int
    var cc_name: String
}

struct Auto5: Equatable {
    var cc_name: String
    var d120: Int
    var d30: Int
    var d60: Int
    var d90: Int
    var dmore: Int
    var sm_type: String
    var warehouse: String
}

struct CatalogSale: Equatable {
    var cs_ship_date_sk: Int
    var cs_sold_date_sk: Int
    var cs_warehouse_sk: Int
    var cs_ship_mode_sk: Int
    var cs_call_center_sk: Int
}
struct Warehouse: Equatable {
    var w_warehouse_sk: Int
    var w_warehouse_name: String
}
struct ShipMode: Equatable {
    var sm_ship_mode_sk: Int
    var sm_type: String
}
struct CallCenter: Equatable {
    var cc_call_center_sk: Int
    var cc_name: String
}
var catalog_sales = [Auto1(cs_call_center_sk: 1, cs_ship_date_sk: 31, cs_ship_mode_sk: 1, cs_sold_date_sk: 1, cs_warehouse_sk: 1), Auto1(cs_call_center_sk: 1, cs_ship_date_sk: 51, cs_ship_mode_sk: 1, cs_sold_date_sk: 1, cs_warehouse_sk: 1), Auto1(cs_call_center_sk: 1, cs_ship_date_sk: 71, cs_ship_mode_sk: 1, cs_sold_date_sk: 1, cs_warehouse_sk: 1), Auto1(cs_call_center_sk: 1, cs_ship_date_sk: 101, cs_ship_mode_sk: 1, cs_sold_date_sk: 1, cs_warehouse_sk: 1), Auto1(cs_call_center_sk: 1, cs_ship_date_sk: 131, cs_ship_mode_sk: 1, cs_sold_date_sk: 1, cs_warehouse_sk: 1)]
var warehouse = [Auto2(w_warehouse_name: "Warehouse1", w_warehouse_sk: 1)]
var ship_mode = [Auto3(sm_ship_mode_sk: 1, sm_type: "EXP")]
var call_center = [Auto4(cc_call_center_sk: 1, cc_name: "CC1")]
var grouped = { () -> [Any] in
	var _groups: [String:_Group] = [:]
	var _order: [String] = []
	for cs in catalog_sales {
		for w in warehouse {
			if !(cs.cs_warehouse_sk == w.w_warehouse_sk) { continue }
			for sm in ship_mode {
				if !(cs.cs_ship_mode_sk == sm.sm_ship_mode_sk) { continue }
				for cc in call_center {
					if !(cs.cs_call_center_sk == cc.cc_call_center_sk) { continue }
					let _k = ["warehouse": substr(w.w_warehouse_name, 0, 20), "sm_type": sm.sm_type, "cc_name": cc.cc_name]
					let _ks = _keyStr(_k)
					if _groups[_ks] == nil {
					    _groups[_ks] = _Group(_k)
					    _order.append(_ks)
					}
					_groups[_ks]!.Items.append(["cs": cs, "w": w, "sm": sm, "cc": cc])
				}
			}
		}
	}
	var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
	for k in _order {
	    if let g = _groups[k] {
	        _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
	    }
	}
	return _tmp.map { g in ["warehouse": g.key["warehouse"]!, "sm_type": (g.key["sm_type"] as! String), "cc_name": (g.key["cc_name"] as! String), "d30": g.items.filter { x in x["cs_ship_date_sk"]! - x["cs_sold_date_sk"]! <= 30 }.count, "d60": g.items.filter { x in x["cs_ship_date_sk"]! - x["cs_sold_date_sk"]! > 30 && x["cs_ship_date_sk"]! - x["cs_sold_date_sk"]! <= 60 }.count, "d90": g.items.filter { x in x["cs_ship_date_sk"]! - x["cs_sold_date_sk"]! > 60 && x["cs_ship_date_sk"]! - x["cs_sold_date_sk"]! <= 90 }.count, "d120": g.items.filter { x in x["cs_ship_date_sk"]! - x["cs_sold_date_sk"]! > 90 && x["cs_ship_date_sk"]! - x["cs_sold_date_sk"]! <= 120 }.count, "dmore": g.items.filter { x in x["cs_ship_date_sk"]! - x["cs_sold_date_sk"]! > 120 }.count] }
}())
_json(grouped)
expect(_equal(grouped, [Auto5(cc_name: "CC1", d120: 1, d30: 1, d60: 1, d90: 1, dmore: 1, sm_type: "EXP", warehouse: "Warehouse1")]))
