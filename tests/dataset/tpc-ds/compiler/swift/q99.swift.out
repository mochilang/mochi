import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

struct CatalogSale {
  var cs_ship_date_sk: Int
  var cs_sold_date_sk: Int
  var cs_warehouse_sk: Int
  var cs_ship_mode_sk: Int
  var cs_call_center_sk: Int
}

struct Warehouse {
  var w_warehouse_sk: Int
  var w_warehouse_name: String
}

struct ShipMode {
  var sm_ship_mode_sk: Int
  var sm_type: String
}

struct CallCenter {
  var cc_call_center_sk: Int
  var cc_name: String
}

func test_TPCDS_Q99_buckets() {
  expect(
    grouped == [
      [
        "warehouse": "Warehouse1", "sm_type": "EXP", "cc_name": "CC1", "d30": 1, "d60": 1, "d90": 1,
        "d120": 1, "dmore": 1,
      ]
    ])
}

let catalog_sales: [[String: Int]] = [
  [
    "cs_ship_date_sk": 31, "cs_sold_date_sk": 1, "cs_warehouse_sk": 1, "cs_ship_mode_sk": 1,
    "cs_call_center_sk": 1,
  ],
  [
    "cs_ship_date_sk": 51, "cs_sold_date_sk": 1, "cs_warehouse_sk": 1, "cs_ship_mode_sk": 1,
    "cs_call_center_sk": 1,
  ],
  [
    "cs_ship_date_sk": 71, "cs_sold_date_sk": 1, "cs_warehouse_sk": 1, "cs_ship_mode_sk": 1,
    "cs_call_center_sk": 1,
  ],
  [
    "cs_ship_date_sk": 101, "cs_sold_date_sk": 1, "cs_warehouse_sk": 1, "cs_ship_mode_sk": 1,
    "cs_call_center_sk": 1,
  ],
  [
    "cs_ship_date_sk": 131, "cs_sold_date_sk": 1, "cs_warehouse_sk": 1, "cs_ship_mode_sk": 1,
    "cs_call_center_sk": 1,
  ],
]
let warehouse = [["w_warehouse_sk": 1, "w_warehouse_name": "Warehouse1"]]
let ship_mode = [["sm_ship_mode_sk": 1, "sm_type": "EXP"]]
let call_center = [["cc_call_center_sk": 1, "cc_name": "CC1"]]
let grouped =
  ({
    var _res: [[String: Any]] = []
    for cs in catalog_sales {
      for w in warehouse {
        if !(cs["cs_warehouse_sk"]! == w["w_warehouse_sk"]!) { continue }
        for sm in ship_mode {
          if !(cs["cs_ship_mode_sk"]! == sm["sm_ship_mode_sk"]!) { continue }
          for cc in call_center {
            if !(cs["cs_call_center_sk"]! == cc["cc_call_center_sk"]!) { continue }
            _res.append([
              "warehouse": g.key.warehouse, "sm_type": g.key.sm_type, "cc_name": g.key.cc_name,
              "d30":
                ({
                  var _res: [Any] = []
                  for x in g {
                    if !(x.cs_ship_date_sk - x.cs_sold_date_sk <= 30) { continue }
                    _res.append(x)
                  }
                  var _items = _res
                  return _items
                }()).count,
              "d60":
                ({
                  var _res: [Any] = []
                  for x in g {
                    if !(x.cs_ship_date_sk - x.cs_sold_date_sk > 30
                      && x.cs_ship_date_sk - x.cs_sold_date_sk <= 60)
                    {
                      continue
                    }
                    _res.append(x)
                  }
                  var _items = _res
                  return _items
                }()).count,
              "d90":
                ({
                  var _res: [Any] = []
                  for x in g {
                    if !(x.cs_ship_date_sk - x.cs_sold_date_sk > 60
                      && x.cs_ship_date_sk - x.cs_sold_date_sk <= 90)
                    {
                      continue
                    }
                    _res.append(x)
                  }
                  var _items = _res
                  return _items
                }()).count,
              "d120":
                ({
                  var _res: [Any] = []
                  for x in g {
                    if !(x.cs_ship_date_sk - x.cs_sold_date_sk > 90
                      && x.cs_ship_date_sk - x.cs_sold_date_sk <= 120)
                    {
                      continue
                    }
                    _res.append(x)
                  }
                  var _items = _res
                  return _items
                }()).count,
              "dmore":
                ({
                  var _res: [Any] = []
                  for x in g {
                    if !(x.cs_ship_date_sk - x.cs_sold_date_sk > 120) { continue }
                    _res.append(x)
                  }
                  var _items = _res
                  return _items
                }()).count,
            ])
          }
        }
      }
    }
    var _items = _res
    return _items
  }())
func main() {
  _json(grouped)
  test_TPCDS_Q99_buckets()
}
main()
