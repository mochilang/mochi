// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:05:25Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var inv_date_sk: Int
    var inv_item_sk: Int
    var inv_quantity_on_hand: Int
    var inv_warehouse_sk: Int
}

struct Auto2: Equatable {
    var w_warehouse_name: String
    var w_warehouse_sk: Int
}

struct Auto3: Equatable {
    var i_item_id: String
    var i_item_sk: Int
}

struct Auto4: Equatable {
    var d_date: String
    var d_date_sk: Int
}

struct Auto5: Equatable {
    var i_item_id: String
    var inv_after: Int
    var inv_before: Int
    var w_warehouse_name: String
}

struct Inventory: Equatable {
    var inv_item_sk: Int
    var inv_warehouse_sk: Int
    var inv_date_sk: Int
    var inv_quantity_on_hand: Int
}
struct Warehouse: Equatable {
    var w_warehouse_sk: Int
    var w_warehouse_name: String
}
struct Item: Equatable {
    var i_item_sk: Int
    var i_item_id: String
}
struct DateDim: Equatable {
    var d_date_sk: Int
    var d_date: String
}
var inventory = [Auto1(inv_date_sk: 1, inv_item_sk: 1, inv_quantity_on_hand: 30, inv_warehouse_sk: 1), Auto1(inv_date_sk: 2, inv_item_sk: 1, inv_quantity_on_hand: 40, inv_warehouse_sk: 1), Auto1(inv_date_sk: 1, inv_item_sk: 2, inv_quantity_on_hand: 20, inv_warehouse_sk: 2), Auto1(inv_date_sk: 2, inv_item_sk: 2, inv_quantity_on_hand: 20, inv_warehouse_sk: 2)]
var warehouse = [Auto2(w_warehouse_name: "Main", w_warehouse_sk: 1), Auto2(w_warehouse_name: "Backup", w_warehouse_sk: 2)]
var item = [Auto3(i_item_id: "ITEM1", i_item_sk: 1), Auto3(i_item_id: "ITEM2", i_item_sk: 2)]
var date_dim = [Auto4(d_date: "2000-03-01", d_date_sk: 1), Auto4(d_date: "2000-03-20", d_date_sk: 2)]
var before = { () -> [Any] in
	var _groups: [String:_Group] = [:]
	var _order: [String] = []
	for inv in inventory {
		for d in date_dim {
			if !(inv.inv_date_sk == d.d_date_sk) { continue }
			if !(d.d_date < "2000-03-15") { continue }
			let _k = ["w": inv.inv_warehouse_sk, "i": inv.inv_item_sk]
			let _ks = _keyStr(_k)
			if _groups[_ks] == nil {
			    _groups[_ks] = _Group(_k)
			    _order.append(_ks)
			}
			_groups[_ks]!.Items.append(["inv": inv, "d": d])
		}
	}
	var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
	for k in _order {
	    if let g = _groups[k] {
	        _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
	    }
	}
	return _tmp.map { g in ["w": (g.key["w"] as! Int), "i": (g.key["i"] as! Int), "qty": _sum(g.items.map { x in x["inv_quantity_on_hand"]! })] }
}())
var after = { () -> [Any] in
	var _groups: [String:_Group] = [:]
	var _order: [String] = []
	for inv in inventory {
		for d in date_dim {
			if !(inv.inv_date_sk == d.d_date_sk) { continue }
			if !(d.d_date >= "2000-03-15") { continue }
			let _k = ["w": inv.inv_warehouse_sk, "i": inv.inv_item_sk]
			let _ks = _keyStr(_k)
			if _groups[_ks] == nil {
			    _groups[_ks] = _Group(_k)
			    _order.append(_ks)
			}
			_groups[_ks]!.Items.append(["inv": inv, "d": d])
		}
	}
	var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
	for k in _order {
	    if let g = _groups[k] {
	        _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
	    }
	}
	return _tmp.map { g in ["w": (g.key["w"] as! Int), "i": (g.key["i"] as! Int), "qty": _sum(g.items.map { x in x["inv_quantity_on_hand"]! })] }
}())
var joined = ({
	var _res: [(after_qty: Any, before_qty: Any, i_id: String, ratio: Any, w_name: String)] = []
	for b in before {
		for a in after {
			if !(b["w"]! == a["w"]! && b["i"]! == a["i"]!) { continue }
			for w in warehouse {
				if !(w.w_warehouse_sk == b["w"]!) { continue }
				for it in item {
					if !(it.i_item_sk == b["i"]!) { continue }
					_res.append(["w_name": w.w_warehouse_name, "i_id": it.i_item_id, "before_qty": b["qty"]!, "after_qty": a["qty"]!, "ratio": a["qty"]! / b["qty"]!])
				}
			}
		}
	}
	return _res
}())
var result = joined.compactMap { r in r["ratio"]! >= (2.0 / 3.0) && r["ratio"]! <= (3.0 / 2.0) ? (["w_warehouse_name": (r["w_name"] as! String), "i_item_id": (r["i_id"] as! String), "inv_before": r["before_qty"]!, "inv_after": r["after_qty"]!]) : nil }.sorted { [$0.w_name, $0.i_id] < [$1.w_name, $1.i_id] }
_json(result)
expect(_equal(result, [Auto5(i_item_id: "ITEM2", inv_after: 20, inv_before: 20, w_warehouse_name: "Backup"), Auto5(i_item_id: "ITEM1", inv_after: 40, inv_before: 30, w_warehouse_name: "Main")]))
