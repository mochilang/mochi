import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _intersect<T: Equatable>(_ a: [T], _ b: [T]) -> [T] {
    var res: [T] = []
    for it in a { if b.contains(it) && !res.contains(it) { res.append(it) } }
    return res
}
func _json(_ v: Any) {
    if let d = try? JSONSerialization.data(withJSONObject: v, options: []), let s = String(data: d, encoding: .utf8) {
        print(s)
    }
}

func distinct(_ xs: [any]) -> [any] {
  let xs = xs

  var out: [Any] = []
  for x in xs {
    if !contains(out, x) {
      out = append(out, x)
    }
  }
  return out
}

func test_TPCDS_Q38_simplified() {
  expect(result == 1)
}

let customer = [["c_customer_sk": 1, "c_last_name": "Smith", "c_first_name": "John"], ["c_customer_sk": 2, "c_last_name": "Jones", "c_first_name": "Alice"]]
let store_sales: [[String: Int]] = [["ss_customer_sk": 1, "d_month_seq": 1200], ["ss_customer_sk": 2, "d_month_seq": 1205]]
let catalog_sales: [[String: Int]] = [["cs_bill_customer_sk": 1, "d_month_seq": 1203]]
let web_sales: [[String: Int]] = [["ws_bill_customer_sk": 1, "d_month_seq": 1206]]
let store_ids = distinct(({
  var _res: [Int] = []
  for s in store_sales {
    if !(s["d_month_seq"]! >= 1200 && s["d_month_seq"]! <= 1211) { continue }
    _res.append(s["ss_customer_sk"]!)
  }
  var _items = _res
  return _items
}()))
let catalog_ids = distinct(({
  var _res: [Int] = []
  for c in catalog_sales {
    if !(c["d_month_seq"]! >= 1200 && c["d_month_seq"]! <= 1211) { continue }
    _res.append(c["cs_bill_customer_sk"]!)
  }
  var _items = _res
  return _items
}()))
let web_ids = distinct(({
  var _res: [Int] = []
  for w in web_sales {
    if !(w["d_month_seq"]! >= 1200 && w["d_month_seq"]! <= 1211) { continue }
    _res.append(w["ws_bill_customer_sk"]!)
  }
  var _items = _res
  return _items
}()))
let hot = _intersect(_intersect(store_ids, catalog_ids), web_ids)
let result = hot.count
func main() {
  _json(result)
  test_TPCDS_Q38_simplified()
}
main()
