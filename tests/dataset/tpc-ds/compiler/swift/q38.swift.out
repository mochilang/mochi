// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:06:10Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
struct Auto1: Equatable {
    var c_customer_sk: Int
    var c_first_name: String
    var c_last_name: String
}

struct Auto2: Equatable {
    var d_month_seq: Int
    var ss_customer_sk: Int
}

struct Auto3: Equatable {
    var cs_bill_customer_sk: Int
    var d_month_seq: Int
}

struct Auto4: Equatable {
    var d_month_seq: Int
    var ws_bill_customer_sk: Int
}

var customer = [Auto1(c_customer_sk: 1, c_first_name: "John", c_last_name: "Smith"), Auto1(c_customer_sk: 2, c_first_name: "Alice", c_last_name: "Jones")]
var store_sales = [Auto2(d_month_seq: 1200, ss_customer_sk: 1), Auto2(d_month_seq: 1205, ss_customer_sk: 2)]
var catalog_sales = [Auto3(cs_bill_customer_sk: 1, d_month_seq: 1203)]
var web_sales = [Auto4(d_month_seq: 1206, ws_bill_customer_sk: 1)]
func distinct(_ xs: [any]) -> [any] {
    var out = [Any]()
    for x in xs {
        if !contains(out, x) {
            out = out + [x]
        }
    }
    return out
}
let store_ids = distinct(store_sales.compactMap { s in s.d_month_seq >= 1200 && s.d_month_seq <= 1211 ? (s.ss_customer_sk) : nil })
let catalog_ids = distinct(catalog_sales.compactMap { c in c.d_month_seq >= 1200 && c.d_month_seq <= 1211 ? (c.cs_bill_customer_sk) : nil })
let web_ids = distinct(web_sales.compactMap { w in w.d_month_seq >= 1200 && w.d_month_seq <= 1211 ? (w.ws_bill_customer_sk) : nil })
let hot = Array(Set(Array(Set(store_ids).intersection(catalog_ids)).sorted()).intersection(web_ids)).sorted()
let result = hot.count
_json(result)
expect(_equal(result, 1))
