import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

func test_TPCDS_Q31_simplified() {
  expect(
    result == [
      [
        "ca_county": "A", "d_year": 2000, "web_q1_q2_increase": 1.5, "store_q1_q2_increase": 1.2,
        "web_q2_q3_increase": 1.6666666666666667, "store_q2_q3_increase": 1.3333333333333333,
      ]
    ])
}

let store_sales = [
  ["ca_county": "A", "d_qoy": 1, "d_year": 2000, "ss_ext_sales_price": 100],
  ["ca_county": "A", "d_qoy": 2, "d_year": 2000, "ss_ext_sales_price": 120],
  ["ca_county": "A", "d_qoy": 3, "d_year": 2000, "ss_ext_sales_price": 160],
  ["ca_county": "B", "d_qoy": 1, "d_year": 2000, "ss_ext_sales_price": 80],
  ["ca_county": "B", "d_qoy": 2, "d_year": 2000, "ss_ext_sales_price": 90],
  ["ca_county": "B", "d_qoy": 3, "d_year": 2000, "ss_ext_sales_price": 100],
]
let web_sales = [
  ["ca_county": "A", "d_qoy": 1, "d_year": 2000, "ws_ext_sales_price": 100],
  ["ca_county": "A", "d_qoy": 2, "d_year": 2000, "ws_ext_sales_price": 150],
  ["ca_county": "A", "d_qoy": 3, "d_year": 2000, "ws_ext_sales_price": 250],
  ["ca_county": "B", "d_qoy": 1, "d_year": 2000, "ws_ext_sales_price": 80],
  ["ca_county": "B", "d_qoy": 2, "d_year": 2000, "ws_ext_sales_price": 90],
  ["ca_county": "B", "d_qoy": 3, "d_year": 2000, "ws_ext_sales_price": 95],
]
let counties: [String] = ["A", "B"]
var result: [Any] = []
func main() {
  for county in counties {
    let ss1 = _sum(
      ({
        var _res: [Any] = []
        for s in store_sales {
          if s["ca_county"]! == county && s["d_qoy"]! == 1 {
            _res.append(s["ss_ext_sales_price"]!)
          }
        }
        var _items = _res
        return _items
      }()).map { Double($0) })
    let ss2 = _sum(
      ({
        var _res: [Any] = []
        for s in store_sales {
          if s["ca_county"]! == county && s["d_qoy"]! == 2 {
            _res.append(s["ss_ext_sales_price"]!)
          }
        }
        var _items = _res
        return _items
      }()).map { Double($0) })
    let ss3 = _sum(
      ({
        var _res: [Any] = []
        for s in store_sales {
          if s["ca_county"]! == county && s["d_qoy"]! == 3 {
            _res.append(s["ss_ext_sales_price"]!)
          }
        }
        var _items = _res
        return _items
      }()).map { Double($0) })
    let ws1 = _sum(
      ({
        var _res: [Any] = []
        for w in web_sales {
          if w["ca_county"]! == county && w["d_qoy"]! == 1 {
            _res.append(w["ws_ext_sales_price"]!)
          }
        }
        var _items = _res
        return _items
      }()).map { Double($0) })
    let ws2 = _sum(
      ({
        var _res: [Any] = []
        for w in web_sales {
          if w["ca_county"]! == county && w["d_qoy"]! == 2 {
            _res.append(w["ws_ext_sales_price"]!)
          }
        }
        var _items = _res
        return _items
      }()).map { Double($0) })
    let ws3 = _sum(
      ({
        var _res: [Any] = []
        for w in web_sales {
          if w["ca_county"]! == county && w["d_qoy"]! == 3 {
            _res.append(w["ws_ext_sales_price"]!)
          }
        }
        var _items = _res
        return _items
      }()).map { Double($0) })
    let web_g1 = ws2 / ws1
    let store_g1 = ss2 / ss1
    let web_g2 = ws3 / ws2
    let store_g2 = ss3 / ss2
    if web_g1 > store_g1 && web_g2 > store_g2 {
      result = append(
        result,
        [
          "ca_county": county, "d_year": 2000, "web_q1_q2_increase": web_g1,
          "store_q1_q2_increase": store_g1, "web_q2_q3_increase": web_g2,
          "store_q2_q3_increase": store_g2,
        ])
    }
  }
  _json(result)
  test_TPCDS_Q31_simplified()
}
main()
