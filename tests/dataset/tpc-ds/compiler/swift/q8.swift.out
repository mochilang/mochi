// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:05:16Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var ss_net_profit: Double
    var ss_sold_date_sk: Int
    var ss_store_sk: Int
}

struct Auto2: Equatable {
    var d_date_sk: Int
    var d_qoy: Int
    var d_year: Int
}

struct Auto3: Equatable {
    var s_store_name: String
    var s_store_sk: Int
    var s_zip: String
}

struct Auto4: Equatable {
    var ca_address_sk: Int
    var ca_zip: String
}

struct Auto5: Equatable {
    var c_current_addr_sk: Int
    var c_customer_sk: Int
    var c_preferred_cust_flag: String
}

struct Auto6: Equatable {
    var net_profit: Double
    var s_store_name: String
}

var store_sales = [Auto1(ss_net_profit: 10.0, ss_sold_date_sk: 1, ss_store_sk: 1)]
var date_dim = [Auto2(d_date_sk: 1, d_qoy: 1, d_year: 1998)]
var store = [Auto3(s_store_name: "Store1", s_store_sk: 1, s_zip: "12345")]
var customer_address = [Auto4(ca_address_sk: 1, ca_zip: "12345")]
var customer = [Auto5(c_current_addr_sk: 1, c_customer_sk: 1, c_preferred_cust_flag: "Y")]
reverse(substr("zip", 0, 2))
var zip_list = ["12345"]
var result = { () -> [Any] in
	var _groups: [String:[[String:Any]]] = [:]
	for ss in store_sales {
		for d in date_dim {
			if !(ss.ss_sold_date_sk == d.d_date_sk && d.d_qoy == 1 && d.d_year == 1998) { continue }
			for s in store {
				if !(ss.ss_store_sk == s.s_store_sk) { continue }
				for ca in customer_address {
					if !(substr(s.s_zip, 0, 2) == substr(ca.ca_zip, 0, 2)) { continue }
					for c in customer {
						if !(ca.ca_address_sk == c.c_current_addr_sk && c.c_preferred_cust_flag == "Y") { continue }
						if !(zip_list.contains(substr(ca.ca_zip, 0, 5)) != nil) { continue }
						let _k = s.s_store_name
						_groups[_k, default: []].append(["ss": ss, "d": d, "s": s, "ca": ca, "c": c])
					}
				}
			}
		}
	}
	var _tmp: [(key: String, items: [[String:Any]])] = []
	for (k, v) in _groups {
	    _tmp.append((key: k, items: v))
	}
	_tmp.sort { $0.key < $1.key }
	return _tmp.map { g in ["s_store_name": g.key, "net_profit": _sum(g.items.map { x in ((x["ss"] as! Auto1)["ss_net_profit"] as! Double) })] }
}())
_json(result)
expect(_equal(result, [Auto6(net_profit: 10.0, s_store_name: "Store1")]))
