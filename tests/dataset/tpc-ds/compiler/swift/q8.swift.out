import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

func test_TPCDS_Q8_result() {
  expect(result == [["s_store_name": "Store1", "net_profit": 10]])
}

let store_sales = [["ss_store_sk": 1, "ss_sold_date_sk": 1, "ss_net_profit": 10]]
let date_dim: [[String: Int]] = [["d_date_sk": 1, "d_qoy": 1, "d_year": 1998]]
let store = [["s_store_sk": 1, "s_store_name": "Store1", "s_zip": "12345"]]
let customer_address = [["ca_address_sk": 1, "ca_zip": "12345"]]
let customer = [["c_customer_sk": 1, "c_current_addr_sk": 1, "c_preferred_cust_flag": "Y"]]
let zip_list: [String] = ["12345"]
let result =
  ({
    var _pairs: [(item: [String: Any], key: Any)] = []
    for ss in store_sales {
      for d in date_dim {
        if !(ss["ss_sold_date_sk"]! == d["d_date_sk"]! && d["d_qoy"]! == 1 && d["d_year"]! == 1998)
        {
          continue
        }
        for s in store {
          if !(ss["ss_store_sk"]! == s["s_store_sk"]!) { continue }
          for ca in customer_address {
            if !(substr(s["s_zip"]!, 0, 2) == substr(ca["ca_zip"]!, 0, 2)) { continue }
            for c in customer {
              if !(ca["ca_address_sk"]! == c["c_current_addr_sk"]!
                && c["c_preferred_cust_flag"]! == "Y")
              {
                continue
              }
              if zip_list.contains(substr(ca["ca_zip"]!, 0, 5)) {
                _pairs.append(
                  (
                    item: [
                      "s_store_name": g.key,
                      "net_profit": _sum(
                        ({
                          var _res: [Any] = []
                          for x in g {
                            _res.append(x.ss.ss_net_profit)
                          }
                          var _items = _res
                          return _items
                        }()).map { Double($0) }),
                    ], key: g.key
                  ))
              }
            }
          }
        }
      }
    }
    _pairs.sort { a, b in
      if let ai = a.key as? Int, let bi = b.key as? Int { return ai < bi }
      if let af = a.key as? Double, let bf = b.key as? Double { return af < bf }
      if let ai = a.key as? Int, let bf = b.key as? Double { return Double(ai) < bf }
      if let af = a.key as? Double, let bi = b.key as? Int { return af < Double(bi) }
      if let sa = a.key as? String, let sb = b.key as? String { return sa < sb }
      return String(describing: a.key) < String(describing: b.key)
    }
    var _items = _pairs.map { $0.item }
    return _items
  }())
func main() {
  reverse(substr("zip", 0, 2))
  _json(result)
  test_TPCDS_Q8_result()
}
main()
