// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:08:11Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
struct Auto1: Equatable {
    var hour: Int
    var minute: Int
    var time_sk: Int
}

struct Auto2: Equatable {
    var hd_demo_sk: Int
    var hd_dep_count: Int
    var hd_vehicle_count: Int
}

struct Auto3: Equatable {
    var s_store_name: String
    var s_store_sk: Int
}

struct Auto4: Equatable {
    var hdemo_sk: Int
    var qty: Double
    var sold_time_sk: Int
    var store_sk: Int
}

var time_dim = [Auto1(hour: 8, minute: 30, time_sk: 1), Auto1(hour: 9, minute: 0, time_sk: 2), Auto1(hour: 9, minute: 30, time_sk: 3), Auto1(hour: 10, minute: 0, time_sk: 4), Auto1(hour: 10, minute: 30, time_sk: 5), Auto1(hour: 11, minute: 0, time_sk: 6), Auto1(hour: 11, minute: 30, time_sk: 7), Auto1(hour: 12, minute: 0, time_sk: 8)]
var household_demographics = [Auto2(hd_demo_sk: 1, hd_dep_count: 1, hd_vehicle_count: 1)]
var store = [Auto3(s_store_name: "ese", s_store_sk: 1)]
var store_sales = [Auto4(hdemo_sk: 1, qty: 10.0, sold_time_sk: 1, store_sk: 1), Auto4(hdemo_sk: 1, qty: 12.0, sold_time_sk: 2, store_sk: 1), Auto4(hdemo_sk: 1, qty: 14.0, sold_time_sk: 3, store_sk: 1), Auto4(hdemo_sk: 1, qty: 11.0, sold_time_sk: 4, store_sk: 1), Auto4(hdemo_sk: 1, qty: 8.0, sold_time_sk: 5, store_sk: 1), Auto4(hdemo_sk: 1, qty: 9.0, sold_time_sk: 6, store_sk: 1), Auto4(hdemo_sk: 1, qty: 10.0, sold_time_sk: 7, store_sk: 1), Auto4(hdemo_sk: 1, qty: 14.0, sold_time_sk: 8, store_sk: 1)]
func count_range(_ ssales: [any], _ tdim: [any], _ hour: Int, _ start_min: Int, _ end_min: Int) -> Double {
    var total = 0.0
    for ss in ssales {
        for t in tdim {
            if ss.sold_time_sk == t.time_sk && t.hour == hour && t.minute >= start_min && t.minute < end_min {
                total = total + ss.qty
            }
        }
    }
    return total
}
let h8_30_to_9 = count_range(store_sales, time_dim, 8, 30, 60)
let h9_to_9_30 = count_range(store_sales, time_dim, 9, 0, 30)
let h9_30_to_10 = count_range(store_sales, time_dim, 9, 30, 60)
let h10_to_10_30 = count_range(store_sales, time_dim, 10, 0, 30)
let h10_30_to_11 = count_range(store_sales, time_dim, 10, 30, 60)
let h11_to_11_30 = count_range(store_sales, time_dim, 11, 0, 30)
let h11_30_to_12 = count_range(store_sales, time_dim, 11, 30, 60)
let h12_to_12_30 = count_range(store_sales, time_dim, 12, 0, 30)
let result = h8_30_to_9 + h9_to_9_30 + h9_30_to_10 + h10_to_10_30 + h10_30_to_11 + h11_to_11_30 + h11_30_to_12 + h12_to_12_30
_json(result)
expect(_equal(result, 88))
