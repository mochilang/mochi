// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:06:11Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var inv_date_sk: Int
    var inv_item_sk: Int
    var inv_quantity_on_hand: Int
    var inv_warehouse_sk: Int
}

struct Auto2: Equatable {
    var i_item_sk: Int
}

struct Auto3: Equatable {
    var w_warehouse_name: String
    var w_warehouse_sk: Int
}

struct Auto4: Equatable {
    var d_date_sk: Int
    var d_moy: Int
    var d_year: Int
}

struct Auto5: Equatable {
    var cov: Double
    var i_item_sk: Int
    var w_warehouse_sk: Int
}

var inventory = [Auto1(inv_date_sk: 1, inv_item_sk: 1, inv_quantity_on_hand: 10, inv_warehouse_sk: 1), Auto1(inv_date_sk: 2, inv_item_sk: 1, inv_quantity_on_hand: 10, inv_warehouse_sk: 1), Auto1(inv_date_sk: 3, inv_item_sk: 1, inv_quantity_on_hand: 250, inv_warehouse_sk: 1)]
var item = [Auto2(i_item_sk: 1)]
var warehouse = [Auto3(w_warehouse_name: "W1", w_warehouse_sk: 1)]
var date_dim = [Auto4(d_date_sk: 1, d_moy: 1, d_year: 2000), Auto4(d_date_sk: 2, d_moy: 2, d_year: 2000), Auto4(d_date_sk: 3, d_moy: 3, d_year: 2000)]
var monthly = { () -> [Any] in
	var _groups: [String:_Group] = [:]
	var _order: [String] = []
	for inv in inventory {
		for d in date_dim {
			if !(inv.inv_date_sk == d.d_date_sk) { continue }
			for i in item {
				if !(inv.inv_item_sk == i.i_item_sk) { continue }
				for w in warehouse {
					if !(inv.inv_warehouse_sk == w.w_warehouse_sk) { continue }
					if !(d.d_year == 2000) { continue }
					let _k = ["w": w.w_warehouse_sk, "i": i.i_item_sk, "month": d.d_moy]
					let _ks = _keyStr(_k)
					if _groups[_ks] == nil {
					    _groups[_ks] = _Group(_k)
					    _order.append(_ks)
					}
					_groups[_ks]!.Items.append(["inv": inv, "d": d, "i": i, "w": w])
				}
			}
		}
	}
	var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
	for k in _order {
	    if let g = _groups[k] {
	        _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
	    }
	}
	return _tmp.map { g in ["w": (g.key["w"] as! Int), "i": (g.key["i"] as! Int), "qty": _sum(g.items.map { x in x["inv_quantity_on_hand"]! })] }
}())
var grouped: [String: [String: any]] = []
for m in monthly as! [[String:Any]] {
    let key = String(["w": m["w"]!, "i": m["i"]!])
    if grouped.keys.contains(key) {
        let g = grouped[key]!
        grouped[key] = ["w": g["w"]!, "i": g["i"]!, "qtys": g["qtys"]! + [m["qty"]!]]
    }
    else {
        grouped[key] = ["w": m["w"]!, "i": m["i"]!, "qtys": [m["qty"]!]]
    }
}
var summary = [Any]()
for g in Array(grouped.values) {
    let mean = _avg(g["qtys"]!)
    var sumsq = 0.0
    for q in g["qtys"]! {
        sumsq = sumsq + (q - mean) * (q - mean)
    }
    let variance = sumsq / (g["qtys"]!.count - 1)
    let cov = sqrt(variance) / mean
    if cov > 1.5 {
        summary = summary + [["w_warehouse_sk": g["w"]!, "i_item_sk": g["i"]!, "cov": cov]]
    }
}
_json(summary)
expect(_equal(summary, [Auto5(cov: 1.539600717839002, i_item_sk: 1, w_warehouse_sk: 1)]))
