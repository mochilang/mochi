// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:07:31Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
struct Auto1: Equatable {
    var inv_date_sk: Int
    var inv_item_sk: Int
    var inv_quantity_on_hand: Int
    var inv_warehouse_sk: Int
}

struct Auto2: Equatable {
    var w_warehouse_name: String
    var w_warehouse_sk: Int
}

struct Auto3: Equatable {
    var i_item_desc: String
    var i_item_sk: Int
}

struct Auto4: Equatable {
    var cd_demo_sk: Int
    var cd_marital_status: String
}

struct Auto5: Equatable {
    var hd_buy_potential: String
    var hd_demo_sk: Int
}

struct Auto6: Equatable {
    var d_date: Int
    var d_date_sk: Int
    var d_week_seq: Int
    var d_year: Int
}

struct Auto7: Equatable {
    var d_week_seq: Int
    var i_item_desc: String
    var no_promo: Int
    var promo: Int
    var total_cnt: Int
    var w_warehouse_name: String
}

var catalog_sales = [["cs_item_sk": 1, "cs_order_number": 1, "cs_quantity": 1, "cs_sold_date_sk": 1, "cs_ship_date_sk": 3, "cs_bill_cdemo_sk": 1, "cs_bill_hdemo_sk": 1, "cs_promo_sk": nil]]
var inventory = [Auto1(inv_date_sk: 2, inv_item_sk: 1, inv_quantity_on_hand: 0, inv_warehouse_sk: 1)]
var warehouse = [Auto2(w_warehouse_name: "Main", w_warehouse_sk: 1)]
var item = [Auto3(i_item_desc: "ItemA", i_item_sk: 1)]
var customer_demographics = [Auto4(cd_demo_sk: 1, cd_marital_status: "M")]
var household_demographics = [Auto5(hd_buy_potential: "5001-10000", hd_demo_sk: 1)]
var date_dim = [Auto6(d_date: 1, d_date_sk: 1, d_week_seq: 10, d_year: 2000), Auto6(d_date: 1, d_date_sk: 2, d_week_seq: 10, d_year: 2000), Auto6(d_date: 7, d_date_sk: 3, d_week_seq: 10, d_year: 2000)]
var result = { () -> [Any] in
	var _groups: [String:_Group] = [:]
	var _order: [String] = []
	for cs in catalog_sales {
		for inv in inventory {
			if !(inv.inv_item_sk == (cs["cs_item_sk"] as! Int)) { continue }
			for w in warehouse {
				if !(w.w_warehouse_sk == inv.inv_warehouse_sk) { continue }
				for i in item {
					if !(i.i_item_sk == (cs["cs_item_sk"] as! Int)) { continue }
					for cd in customer_demographics {
						if !(cd.cd_demo_sk == (cs["cs_bill_cdemo_sk"] as! Int)) { continue }
						for hd in household_demographics {
							if !(hd.hd_demo_sk == (cs["cs_bill_hdemo_sk"] as! Int)) { continue }
							for d1 in date_dim {
								if !(d1.d_date_sk == (cs["cs_sold_date_sk"] as! Int)) { continue }
								for d2 in date_dim {
									if !(d2.d_date_sk == inv.inv_date_sk) { continue }
									for d3 in date_dim {
										if !(d3.d_date_sk == (cs["cs_ship_date_sk"] as! Int)) { continue }
										if !(d1.d_week_seq == d2.d_week_seq && inv.inv_quantity_on_hand < (cs["cs_quantity"] as! Int) && d3.d_date > d1.d_date + 5 && hd.hd_buy_potential == "5001-10000" && d1.d_year == 2000 && cd.cd_marital_status == "M") { continue }
										let _k = ["item_desc": i.i_item_desc, "warehouse": w.w_warehouse_name, "week_seq": d1.d_week_seq]
										let _ks = _keyStr(_k)
										if _groups[_ks] == nil {
										    _groups[_ks] = _Group(_k)
										    _order.append(_ks)
										}
										_groups[_ks]!.Items.append(["cs": cs, "inv": inv, "w": w, "i": i, "cd": cd, "hd": hd, "d1": d1, "d2": d2, "d3": d3])
									}
								}
							}
						}
					}
				}
			}
		}
	}
	var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
	for k in _order {
	    if let g = _groups[k] {
	        _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
	    }
	}
	return _tmp.map { g in ["i_item_desc": (g.key["item_desc"] as! String), "w_warehouse_name": (g.key["warehouse"] as! String), "d_week_seq": (g.key["week_seq"] as! Int), "no_promo": g.items.filter { x in x["cs_promo_sk"]! == nil }.count, "promo": g.items.filter { x in x["cs_promo_sk"]! != nil }.count, "total_cnt": g.items.count] }
}())
_json(result)
expect(_equal(result, [Auto7(d_week_seq: 10, i_item_desc: "ItemA", no_promo: 1, promo: 0, total_cnt: 1, w_warehouse_name: "Main")]))
