// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:07:40Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
struct Auto1: Equatable {
    var ss_customer_sk: Int
    var ss_item_sk: Int
    var ss_qty: Int
    var ss_sold_year: Int
    var ss_sp: Double
    var ss_wc: Double
}

struct Auto2: Equatable {
    var ws_customer_sk: Int
    var ws_item_sk: Int
    var ws_qty: Int
    var ws_sold_year: Int
    var ws_sp: Double
    var ws_wc: Double
}

struct Auto3: Equatable {
    var cs_customer_sk: Int
    var cs_item_sk: Int
    var cs_qty: Int
    var cs_sold_year: Int
    var cs_sp: Double
    var cs_wc: Double
}

struct Auto4: Equatable {
    var other_chan_qty: Int
    var other_chan_sales_price: Double
    var other_chan_wholesale_cost: Double
    var ratio: Double
    var ss_customer_sk: Int
    var ss_item_sk: Int
    var ss_sold_year: Int
    var store_qty: Int
    var store_sales_price: Double
    var store_wholesale_cost: Double
}

var ss = [Auto1(ss_customer_sk: 1, ss_item_sk: 1, ss_qty: 10, ss_sold_year: 1998, ss_sp: 100.0, ss_wc: 50.0)]
var ws = [Auto2(ws_customer_sk: 1, ws_item_sk: 1, ws_qty: 5, ws_sold_year: 1998, ws_sp: 50.0, ws_wc: 25.0)]
var cs = [Auto3(cs_customer_sk: 1, cs_item_sk: 1, cs_qty: 3, cs_sold_year: 1998, cs_sp: 30.0, cs_wc: 15.0)]
var result = ({
	var _res: [(other_chan_qty: Any, other_chan_sales_price: Any, other_chan_wholesale_cost: Any, ratio: Int, ss_customer_sk: Int, ss_item_sk: Int, ss_sold_year: Int, store_qty: Int, store_sales_price: Double, store_wholesale_cost: Double)] = []
	for s in ss {
		for w in ws {
			if !(w.ws_sold_year == s.ss_sold_year && w.ws_item_sk == s.ss_item_sk && w.ws_customer_sk == s.ss_customer_sk) { continue }
			for c in cs {
				if !(c.cs_sold_year == s.ss_sold_year && c.cs_item_sk == s.ss_item_sk && c.cs_customer_sk == s.ss_customer_sk) { continue }
				if !(((w == nil ? 0 : w.ws_qty) > 0 || (c == nil ? 0 : c.cs_qty) > 0) && s.ss_sold_year == 1998) { continue }
				_res.append(["ss_sold_year": s.ss_sold_year, "ss_item_sk": s.ss_item_sk, "ss_customer_sk": s.ss_customer_sk, "ratio": s.ss_qty / ((w == nil ? 0 : w.ws_qty) + (c == nil ? 0 : c.cs_qty)), "store_qty": s.ss_qty, "store_wholesale_cost": s.ss_wc, "store_sales_price": s.ss_sp, "other_chan_qty": (w == nil ? 0 : w.ws_qty) + (c == nil ? 0 : c.cs_qty), "other_chan_wholesale_cost": (w == nil ? 0.0 : w.ws_wc) + (c == nil ? 0.0 : c.cs_wc), "other_chan_sales_price": (w == nil ? 0.0 : w.ws_sp) + (c == nil ? 0.0 : c.cs_sp)])
			}
		}
	}
	return _res
}())
_json(result)
expect(_equal(result, [Auto4(other_chan_qty: 8, other_chan_sales_price: 80.0, other_chan_wholesale_cost: 40.0, ratio: 1.25, ss_customer_sk: 1, ss_item_sk: 1, ss_sold_year: 1998, store_qty: 10, store_sales_price: 100.0, store_wholesale_cost: 50.0)]))
