import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

func test_TPCDS_Q32_simplified() {
  expect(result == 20)
}

let catalog_sales = [
  ["cs_item_sk": 1, "cs_sold_date_sk": 1, "cs_ext_discount_amt": 5],
  ["cs_item_sk": 1, "cs_sold_date_sk": 2, "cs_ext_discount_amt": 10],
  ["cs_item_sk": 1, "cs_sold_date_sk": 3, "cs_ext_discount_amt": 20],
]
let item: [[String: Int]] = [["i_item_sk": 1, "i_manufact_id": 1]]
let date_dim: [[String: Int]] = [
  ["d_date_sk": 1, "d_year": 2000], ["d_date_sk": 2, "d_year": 2000],
  ["d_date_sk": 3, "d_year": 2000],
]
let filtered =
  ({
    var _res: [Any] = []
    for cs in catalog_sales {
      for i in item {
        if !(cs["cs_item_sk"]! == i["i_item_sk"]!) { continue }
        for d in date_dim {
          if !(cs["cs_sold_date_sk"]! == d["d_date_sk"]!) { continue }
          if !(i["i_manufact_id"]! == 1 && d["d_year"]! == 2000) { continue }
          _res.append(cs["cs_ext_discount_amt"]!)
        }
      }
    }
    var _items = _res
    return _items
  }())
let avg_discount = _avg(filtered.map { Double($0) })
let result = _sum(
  ({
    var _res: [Any] = []
    for x in filtered {
      if x > avg_discount * 1.3 {
        _res.append(x)
      }
    }
    var _items = _res
    return _items
  }()).map { Double($0) })
func main() {
  _json(result)
  test_TPCDS_Q32_simplified()
}
main()
