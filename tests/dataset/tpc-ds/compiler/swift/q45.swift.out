import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

func test_TPCDS_Q45_simplified() {
  expect(
    records == [
      ["ca_zip": "85669", "sum_ws_sales_price": 50], ["ca_zip": "99999", "sum_ws_sales_price": 30],
    ])
}

let web_sales = [
  ["bill_customer_sk": 1, "item_sk": 1, "sold_date_sk": 1, "sales_price": 50],
  ["bill_customer_sk": 2, "item_sk": 2, "sold_date_sk": 1, "sales_price": 30],
]
let customer: [[String: Int]] = [
  ["c_customer_sk": 1, "c_current_addr_sk": 1], ["c_customer_sk": 2, "c_current_addr_sk": 2],
]
let customer_address = [
  ["ca_address_sk": 1, "ca_zip": "85669"], ["ca_address_sk": 2, "ca_zip": "99999"],
]
let item = [["i_item_sk": 1, "i_item_id": "I1"], ["i_item_sk": 2, "i_item_id": "I2"]]
let date_dim: [[String: Int]] = [["d_date_sk": 1, "d_qoy": 1, "d_year": 2020]]
let zip_list: [String] = [
  "85669", "86197", "88274", "83405", "86475", "85392", "85460", "80348", "81792",
]
let item_ids: [String] = ["I2"]
let qoy = 1
let year = 2020
let base =
  ({
    var _res: [[String: Any]] = []
    for ws in web_sales {
      for c in customer {
        if !(ws["bill_customer_sk"]! == c["c_customer_sk"]!) { continue }
        for ca in customer_address {
          if !(c["c_current_addr_sk"]! == ca["ca_address_sk"]!) { continue }
          for i in item {
            if !(ws["item_sk"]! == i["i_item_sk"]!) { continue }
            for d in date_dim {
              if !(ws["sold_date_sk"]! == d["d_date_sk"]!) { continue }
              if (item_ids.contains(
                zip_list.contains(substr(ca["ca_zip"]!, 0, 5)) || i["i_item_id"]!))
                && d["d_qoy"]! == qoy && d["d_year"]! == year
              {
                _res.append([
                  "ca_zip": g.key,
                  "sum_ws_sales_price": _sum(
                    ({
                      var _res: [Any] = []
                      for x in g {
                        _res.append(x.ws.sales_price)
                      }
                      var _items = _res
                      return _items
                    }()).map { Double($0) }),
                ])
              }
            }
          }
        }
      }
    }
    var _items = _res
    return _items
  }())
let records = base
func main() {
  _json(records)
  test_TPCDS_Q45_simplified()
}
main()
