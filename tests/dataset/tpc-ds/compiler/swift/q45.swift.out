// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:06:15Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var bill_customer_sk: Int
    var item_sk: Int
    var sales_price: Double
    var sold_date_sk: Int
}

struct Auto2: Equatable {
    var c_current_addr_sk: Int
    var c_customer_sk: Int
}

struct Auto3: Equatable {
    var ca_address_sk: Int
    var ca_zip: String
}

struct Auto4: Equatable {
    var i_item_id: String
    var i_item_sk: Int
}

struct Auto5: Equatable {
    var d_date_sk: Int
    var d_qoy: Int
    var d_year: Int
}

struct Auto6: Equatable {
    var ca_zip: String
    var sum_ws_sales_price: Double
}

var web_sales = [Auto1(bill_customer_sk: 1, item_sk: 1, sales_price: 50.0, sold_date_sk: 1), Auto1(bill_customer_sk: 2, item_sk: 2, sales_price: 30.0, sold_date_sk: 1)]
var customer = [Auto2(c_current_addr_sk: 1, c_customer_sk: 1), Auto2(c_current_addr_sk: 2, c_customer_sk: 2)]
var customer_address = [Auto3(ca_address_sk: 1, ca_zip: "85669"), Auto3(ca_address_sk: 2, ca_zip: "99999")]
var item = [Auto4(i_item_id: "I1", i_item_sk: 1), Auto4(i_item_id: "I2", i_item_sk: 2)]
var date_dim = [Auto5(d_date_sk: 1, d_qoy: 1, d_year: 2020)]
var zip_list = ["85669", "86197", "88274", "83405", "86475", "85392", "85460", "80348", "81792"]
var item_ids = ["I2"]
let qoy = 1
let year = 2020
var base = { () -> [Any] in
	var _groups: [String:[[String:Any]]] = [:]
	for ws in web_sales {
		for c in customer {
			if !(ws.bill_customer_sk == c.c_customer_sk) { continue }
			for ca in customer_address {
				if !(c.c_current_addr_sk == ca.ca_address_sk) { continue }
				for i in item {
					if !(ws.item_sk == i.i_item_sk) { continue }
					for d in date_dim {
						if !(ws.sold_date_sk == d.d_date_sk) { continue }
						if !((item_ids.contains(zip_list.contains(substr(ca.ca_zip, 0, 5)) || i.i_item_id)) && d.d_qoy == qoy && d.d_year == year) { continue }
						let _k = ca.ca_zip
						_groups[_k, default: []].append(["ws": ws, "c": c, "ca": ca, "i": i, "d": d])
					}
				}
			}
		}
	}
	var _tmp: [(key: String, items: [[String:Any]])] = []
	for (k, v) in _groups {
	    _tmp.append((key: k, items: v))
	}
	return _tmp.map { g in ["ca_zip": g.key, "sum_ws_sales_price": _sum(g.items.map { x in ((x["ws"] as! Auto1)["sales_price"] as! Double) })] }
}())
let records = base
_json(records)
expect(_equal(records, [Auto6(ca_zip: "85669", sum_ws_sales_price: 50.0), Auto6(ca_zip: "99999", sum_ws_sales_price: 30.0)]))
