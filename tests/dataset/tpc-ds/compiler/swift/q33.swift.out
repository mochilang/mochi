// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:06:08Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var i_category: String
    var i_item_sk: Int
    var i_manufact_id: Int
}

struct Auto2: Equatable {
    var d_date_sk: Int
    var d_moy: Int
    var d_year: Int
}

struct Auto3: Equatable {
    var ca_address_sk: Int
    var ca_gmt_offset: Int
}

struct Auto4: Equatable {
    var ss_addr_sk: Int
    var ss_ext_sales_price: Double
    var ss_item_sk: Int
    var ss_sold_date_sk: Int
}

struct Auto5: Equatable {
    var cs_bill_addr_sk: Int
    var cs_ext_sales_price: Double
    var cs_item_sk: Int
    var cs_sold_date_sk: Int
}

struct Auto6: Equatable {
    var ws_bill_addr_sk: Int
    var ws_ext_sales_price: Double
    var ws_item_sk: Int
    var ws_sold_date_sk: Int
}

struct Auto7: Equatable {
    var i_manufact_id: Int
    var total_sales: Double
}

var item = [Auto1(i_category: "Books", i_item_sk: 1, i_manufact_id: 1), Auto1(i_category: "Books", i_item_sk: 2, i_manufact_id: 2)]
var date_dim = [Auto2(d_date_sk: 1, d_moy: 1, d_year: 2000)]
var customer_address = [Auto3(ca_address_sk: 1, ca_gmt_offset: -5), Auto3(ca_address_sk: 2, ca_gmt_offset: -5)]
var store_sales = [Auto4(ss_addr_sk: 1, ss_ext_sales_price: 100.0, ss_item_sk: 1, ss_sold_date_sk: 1), Auto4(ss_addr_sk: 2, ss_ext_sales_price: 50.0, ss_item_sk: 2, ss_sold_date_sk: 1)]
var catalog_sales = [Auto5(cs_bill_addr_sk: 1, cs_ext_sales_price: 20.0, cs_item_sk: 1, cs_sold_date_sk: 1)]
var web_sales = [Auto6(ws_bill_addr_sk: 1, ws_ext_sales_price: 30.0, ws_item_sk: 1, ws_sold_date_sk: 1)]
let month = 1
let year = 2000
let union_sales = concat(({
	var _res: [(manu: Int, price: Double)] = []
	for ss in store_sales {
		for d in date_dim {
			if !(ss.ss_sold_date_sk == d.d_date_sk) { continue }
			for ca in customer_address {
				if !(ss.ss_addr_sk == ca.ca_address_sk) { continue }
				for i in item {
					if !(ss.ss_item_sk == i.i_item_sk) { continue }
					if !(i.i_category == "Books" && d.d_year == year && d.d_moy == month && ca.ca_gmt_offset == (-5)) { continue }
					_res.append(["manu": i.i_manufact_id, "price": ss.ss_ext_sales_price])
				}
			}
		}
	}
	return _res
}()), ({
	var _res: [(manu: Int, price: Double)] = []
	for cs in catalog_sales {
		for d in date_dim {
			if !(cs.cs_sold_date_sk == d.d_date_sk) { continue }
			for ca in customer_address {
				if !(cs.cs_bill_addr_sk == ca.ca_address_sk) { continue }
				for i in item {
					if !(cs.cs_item_sk == i.i_item_sk) { continue }
					if !(i.i_category == "Books" && d.d_year == year && d.d_moy == month && ca.ca_gmt_offset == (-5)) { continue }
					_res.append(["manu": i.i_manufact_id, "price": cs.cs_ext_sales_price])
				}
			}
		}
	}
	return _res
}()), ({
	var _res: [(manu: Int, price: Double)] = []
	for ws in web_sales {
		for d in date_dim {
			if !(ws.ws_sold_date_sk == d.d_date_sk) { continue }
			for ca in customer_address {
				if !(ws.ws_bill_addr_sk == ca.ca_address_sk) { continue }
				for i in item {
					if !(ws.ws_item_sk == i.i_item_sk) { continue }
					if !(i.i_category == "Books" && d.d_year == year && d.d_moy == month && ca.ca_gmt_offset == (-5)) { continue }
					_res.append(["manu": i.i_manufact_id, "price": ws.ws_ext_sales_price])
				}
			}
		}
	}
	return _res
}()))
var result = { () -> [Any] in
    var _groups: [AnyHashable:[Any]] = [:]
    for s in union_sales {
        let _k = s.manu
        _groups[_k as! AnyHashable, default: []].append(s)
    }
    var _tmp: [(key: AnyHashable, items: [Any])] = []
    for (k, v) in _groups {
        _tmp.append((key: k, items: v))
    }
    _tmp.sort { _sum($0.items.map { x in x.price }) > _sum($1.items.map { x in x.price }) }
    return _tmp.map { g in ["i_manufact_id": g.key, "total_sales": _sum(g.items.map { x in x.price })] }
}()
_json(result)
expect(_equal(result, [Auto7(i_manufact_id: 1, total_sales: 150.0), Auto7(i_manufact_id: 2, total_sales: 50.0)]))
