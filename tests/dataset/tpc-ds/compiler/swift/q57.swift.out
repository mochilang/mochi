// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:07:22Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var call: Int
    var date: Int
    var item: Int
    var price: Double
}

struct Auto2: Equatable {
    var i_brand: String
    var i_category: String
    var i_item_sk: Int
}

struct Auto3: Equatable {
    var cc_call_center_sk: Int
    var cc_name: String
}

struct Auto4: Equatable {
    var d_date_sk: Int
    var d_moy: Int
    var d_year: Int
}

var catalog_sales = [Auto1(call: 1, date: 1, item: 1, price: 20.0), Auto1(call: 1, date: 2, item: 1, price: 20.0), Auto1(call: 1, date: 3, item: 1, price: 40.0)]
var item = [Auto2(i_brand: "B", i_category: "A", i_item_sk: 1)]
var call_center = [Auto3(cc_call_center_sk: 1, cc_name: "C1")]
var date_dim = [Auto4(d_date_sk: 1, d_moy: 11, d_year: 2000), Auto4(d_date_sk: 2, d_moy: 12, d_year: 2000), Auto4(d_date_sk: 3, d_moy: 1, d_year: 2001)]
func abs(_ x: Double) -> Double {
    if x >= 0.0 {
        return x
    }
    return -x
}
var grouped = { () -> [Any] in
	var _groups: [String:_Group] = [:]
	var _order: [String] = []
	for cs in catalog_sales {
		for i in item {
			if !(cs.item == i.i_item_sk) { continue }
			for d in date_dim {
				if !(cs.date == d.d_date_sk) { continue }
				for cc in call_center {
					if !(cs.call == cc.cc_call_center_sk) { continue }
					let _k = ["cat": i.i_category, "call": cc.cc_name, "year": d.d_year]
					let _ks = _keyStr(_k)
					if _groups[_ks] == nil {
					    _groups[_ks] = _Group(_k)
					    _order.append(_ks)
					}
					_groups[_ks]!.Items.append(["cs": cs, "i": i, "d": d, "cc": cc])
				}
			}
		}
	}
	var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
	for k in _order {
	    if let g = _groups[k] {
	        _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
	    }
	}
	return _tmp.map { g in ["cat": (g.key["cat"] as! String), "call": (g.key["call"] as! String), "year": (g.key["year"] as! Int), "sum_sales": _sum(g.items.map { x in x["price"]! })] }
}())
var avg_by_year = { () -> [Any] in
    var _groups: [String:_Group] = [:]
    var _order: [String] = []
    for g in grouped {
        let _k = ["cat": g["cat"]!, "call": g["call"]!]
        let _ks = _keyStr(_k)
        if _groups[_ks] == nil {
            _groups[_ks] = _Group(_k)
            _order.append(_ks)
        }
        _groups[_ks]!.Items.append(g)
    }
    var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
    for k in _order {
        if let g = _groups[k] {
            _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
        }
    }
    return _tmp.map { gg in ["cat": gg.key["cat"]!, "call": gg.key["call"]!, "avg_sales": _avg(gg.items.map { x in x["sum_sales"]! })] }
}()
var result = ({
	var _res: [(i_category: Any, sum_sales: Any)] = []
	for g in grouped {
		for a in avg_by_year {
			if !(g["cat"]! == a["cat"]! && g["call"]! == a["call"]!) { continue }
			if !(g["year"]! == 2001 && a["avg_sales"]! > 0 && abs(g["sum_sales"]! - a["avg_sales"]!) / a["avg_sales"]! > 0.1) { continue }
			_res.append(["i_category": g["cat"]!, "sum_sales": g["sum_sales"]!])
		}
	}
	return _res
}())
_json(result)
expect(_equal(result, [Any]()))
