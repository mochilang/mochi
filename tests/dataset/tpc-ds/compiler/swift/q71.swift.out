import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _concat<T>(_ a: [T], _ b: [T]) -> [T] {
  var res: [T] = []
  res.reserveCapacity(a.count + b.count)
  res.append(contentsOf: a)
  res.append(contentsOf: b)
  return res
}
func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

func test_TPCDS_Q71_simplified() {
  expect(
    result == [
      ["i_brand_id": 10, "i_brand": "BrandA", "t_hour": 18, "t_minute": 0, "ext_price": 200],
      ["i_brand_id": 20, "i_brand": "BrandB", "t_hour": 8, "t_minute": 30, "ext_price": 150],
      ["i_brand_id": 10, "i_brand": "BrandA", "t_hour": 8, "t_minute": 30, "ext_price": 100],
    ])
}

let item = [
  ["i_item_sk": 1, "i_brand_id": 10, "i_brand": "BrandA", "i_manager_id": 1],
  ["i_item_sk": 2, "i_brand_id": 20, "i_brand": "BrandB", "i_manager_id": 1],
]
let time_dim = [
  ["t_time_sk": 1, "t_hour": 8, "t_minute": 30, "t_meal_time": "breakfast"],
  ["t_time_sk": 2, "t_hour": 18, "t_minute": 0, "t_meal_time": "dinner"],
  ["t_time_sk": 3, "t_hour": 12, "t_minute": 0, "t_meal_time": "lunch"],
]
let date_dim: [[String: Int]] = [["d_date_sk": 1, "d_moy": 12, "d_year": 1998]]
let web_sales = [
  ["ws_ext_sales_price": 100, "ws_sold_date_sk": 1, "ws_item_sk": 1, "ws_sold_time_sk": 1]
]
let catalog_sales = [
  ["cs_ext_sales_price": 200, "cs_sold_date_sk": 1, "cs_item_sk": 1, "cs_sold_time_sk": 2]
]
let store_sales = [
  ["ss_ext_sales_price": 150, "ss_sold_date_sk": 1, "ss_item_sk": 2, "ss_sold_time_sk": 1]
]
let month = 12
let year = 1998
let union_sales = _concat(
  _concat(
    ({
      var _res: [[String: Any]] = []
      for ws in web_sales {
        for d in date_dim {
          if !(d["d_date_sk"]! == ws["ws_sold_date_sk"]!) { continue }
          if d["d_moy"]! == month && d["d_year"]! == year {
            _res.append([
              "ext_price": ws["ws_ext_sales_price"]!, "item_sk": ws["ws_item_sk"]!,
              "time_sk": ws["ws_sold_time_sk"]!,
            ])
          }
        }
      }
      var _items = _res
      return _items
    }()),
    ({
      var _res: [[String: Any]] = []
      for cs in catalog_sales {
        for d in date_dim {
          if !(d["d_date_sk"]! == cs["cs_sold_date_sk"]!) { continue }
          if d["d_moy"]! == month && d["d_year"]! == year {
            _res.append([
              "ext_price": cs["cs_ext_sales_price"]!, "item_sk": cs["cs_item_sk"]!,
              "time_sk": cs["cs_sold_time_sk"]!,
            ])
          }
        }
      }
      var _items = _res
      return _items
    }())),
  ({
    var _res: [[String: Any]] = []
    for ss in store_sales {
      for d in date_dim {
        if !(d["d_date_sk"]! == ss["ss_sold_date_sk"]!) { continue }
        if d["d_moy"]! == month && d["d_year"]! == year {
          _res.append([
            "ext_price": ss["ss_ext_sales_price"]!, "item_sk": ss["ss_item_sk"]!,
            "time_sk": ss["ss_sold_time_sk"]!,
          ])
        }
      }
    }
    var _items = _res
    return _items
  }()))
let result =
  ({
    var _pairs: [(item: [String: Any], key: Any)] = []
    for i in item {
      for s in union_sales {
        if !(s.item_sk == i["i_item_sk"]!) { continue }
        for t in time_dim {
          if !(t["t_time_sk"]! == s.time_sk) { continue }
          if !(i["i_manager_id"]! == 1
            && (t["t_meal_time"]! == "breakfast" || t["t_meal_time"]! == "dinner"))
          {
            continue
          }
          _pairs.append(
            (
              item: [
                "i_brand_id": g.key.brand_id, "i_brand": g.key.brand, "t_hour": g.key.t_hour,
                "t_minute": g.key.t_minute,
                "ext_price": _sum(
                  ({
                    var _res: [Any] = []
                    for x in g {
                      _res.append(x.s.ext_price)
                    }
                    var _items = _res
                    return _items
                  }()).map { Double($0) }),
              ],
              key: [
                -_sum(
                  ({
                    var _res: [Any] = []
                    for x in g {
                      _res.append(x.s.ext_price)
                    }
                    var _items = _res
                    return _items
                  }()).map { Double($0) }), g.key.brand_id,
              ]
            ))
        }
      }
    }
    _pairs.sort { a, b in
      if let ai = a.key as? Int, let bi = b.key as? Int { return ai < bi }
      if let af = a.key as? Double, let bf = b.key as? Double { return af < bf }
      if let ai = a.key as? Int, let bf = b.key as? Double { return Double(ai) < bf }
      if let af = a.key as? Double, let bi = b.key as? Int { return af < Double(bi) }
      if let sa = a.key as? String, let sb = b.key as? String { return sa < sb }
      return String(describing: a.key) < String(describing: b.key)
    }
    var _items = _pairs.map { $0.item }
    return _items
  }())
func main() {
  _json(result)
  test_TPCDS_Q71_simplified()
}
main()
