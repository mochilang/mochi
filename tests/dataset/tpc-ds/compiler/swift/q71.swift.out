// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:07:31Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var i_brand: String
    var i_brand_id: Int
    var i_item_sk: Int
    var i_manager_id: Int
}

struct Auto2: Equatable {
    var t_hour: Int
    var t_meal_time: String
    var t_minute: Int
    var t_time_sk: Int
}

struct Auto3: Equatable {
    var d_date_sk: Int
    var d_moy: Int
    var d_year: Int
}

struct Auto4: Equatable {
    var ws_ext_sales_price: Double
    var ws_item_sk: Int
    var ws_sold_date_sk: Int
    var ws_sold_time_sk: Int
}

struct Auto5: Equatable {
    var cs_ext_sales_price: Double
    var cs_item_sk: Int
    var cs_sold_date_sk: Int
    var cs_sold_time_sk: Int
}

struct Auto6: Equatable {
    var ss_ext_sales_price: Double
    var ss_item_sk: Int
    var ss_sold_date_sk: Int
    var ss_sold_time_sk: Int
}

struct Auto7: Equatable {
    var ext_price: Double
    var i_brand: String
    var i_brand_id: Int
    var t_hour: Int
    var t_minute: Int
}

var item = [Auto1(i_brand: "BrandA", i_brand_id: 10, i_item_sk: 1, i_manager_id: 1), Auto1(i_brand: "BrandB", i_brand_id: 20, i_item_sk: 2, i_manager_id: 1)]
var time_dim = [Auto2(t_hour: 8, t_meal_time: "breakfast", t_minute: 30, t_time_sk: 1), Auto2(t_hour: 18, t_meal_time: "dinner", t_minute: 0, t_time_sk: 2), Auto2(t_hour: 12, t_meal_time: "lunch", t_minute: 0, t_time_sk: 3)]
var date_dim = [Auto3(d_date_sk: 1, d_moy: 12, d_year: 1998)]
var web_sales = [Auto4(ws_ext_sales_price: 100.0, ws_item_sk: 1, ws_sold_date_sk: 1, ws_sold_time_sk: 1)]
var catalog_sales = [Auto5(cs_ext_sales_price: 200.0, cs_item_sk: 1, cs_sold_date_sk: 1, cs_sold_time_sk: 2)]
var store_sales = [Auto6(ss_ext_sales_price: 150.0, ss_item_sk: 2, ss_sold_date_sk: 1, ss_sold_time_sk: 1)]
let month = 12
let year = 1998
let union_sales = concat(({
	var _res: [(ext_price: Double, item_sk: Int, time_sk: Int)] = []
	for ws in web_sales {
		for d in date_dim {
			if !(d.d_date_sk == ws.ws_sold_date_sk) { continue }
			if !(d.d_moy == month && d.d_year == year) { continue }
			_res.append(["ext_price": ws.ws_ext_sales_price, "item_sk": ws.ws_item_sk, "time_sk": ws.ws_sold_time_sk])
		}
	}
	return _res
}()), ({
	var _res: [(ext_price: Double, item_sk: Int, time_sk: Int)] = []
	for cs in catalog_sales {
		for d in date_dim {
			if !(d.d_date_sk == cs.cs_sold_date_sk) { continue }
			if !(d.d_moy == month && d.d_year == year) { continue }
			_res.append(["ext_price": cs.cs_ext_sales_price, "item_sk": cs.cs_item_sk, "time_sk": cs.cs_sold_time_sk])
		}
	}
	return _res
}()), ({
	var _res: [(ext_price: Double, item_sk: Int, time_sk: Int)] = []
	for ss in store_sales {
		for d in date_dim {
			if !(d.d_date_sk == ss.ss_sold_date_sk) { continue }
			if !(d.d_moy == month && d.d_year == year) { continue }
			_res.append(["ext_price": ss.ss_ext_sales_price, "item_sk": ss.ss_item_sk, "time_sk": ss.ss_sold_time_sk])
		}
	}
	return _res
}()))
var result = { () -> [Any] in
	var _groups: [String:_Group] = [:]
	var _order: [String] = []
	for i in item {
		for s in union_sales {
			if !(s.item_sk == i.i_item_sk) { continue }
			for t in time_dim {
				if !(t.t_time_sk == s.time_sk) { continue }
				if !(i.i_manager_id == 1 && (t.t_meal_time == "breakfast" || t.t_meal_time == "dinner")) { continue }
				let _k = ["brand_id": i.i_brand_id, "brand": i.i_brand, "t_hour": t.t_hour, "t_minute": t.t_minute]
				let _ks = _keyStr(_k)
				if _groups[_ks] == nil {
				    _groups[_ks] = _Group(_k)
				    _order.append(_ks)
				}
				_groups[_ks]!.Items.append(["i": i, "s": s, "t": t])
			}
		}
	}
	var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
	for k in _order {
	    if let g = _groups[k] {
	        _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
	    }
	}
	_tmp.sort { [-_sum($0.items.map { x in x["s"]!.ext_price }), ($0.key["brand_id"] as! Int)] < [-_sum($1.items.map { x in x["s"]!.ext_price }), ($1.key["brand_id"] as! Int)] }
	return _tmp.map { g in ["i_brand_id": (g.key["brand_id"] as! Int), "i_brand": (g.key["brand"] as! String), "t_hour": (g.key["t_hour"] as! Int), "t_minute": (g.key["t_minute"] as! Int), "ext_price": _sum(g.items.map { x in x["s"]!.ext_price })] }
}())
_json(result)
expect(_equal(result, [Auto7(ext_price: 200.0, i_brand: "BrandA", i_brand_id: 10, t_hour: 18, t_minute: 0), Auto7(ext_price: 150.0, i_brand: "BrandB", i_brand_id: 20, t_hour: 8, t_minute: 30), Auto7(ext_price: 100.0, i_brand: "BrandA", i_brand_id: 10, t_hour: 8, t_minute: 30)]))
