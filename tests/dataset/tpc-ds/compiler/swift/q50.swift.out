// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:06:53Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
struct Auto1: Equatable {
    var customer: Int
    var item: Int
    var sold: Int
    var store: Int
    var ticket: Int
}

struct Auto2: Equatable {
    var customer: Int
    var item: Int
    var returned: Int
    var ticket: Int
}

struct Auto3: Equatable {
    var d_date_sk: Int
    var d_moy: Int
    var d_year: Int
}

struct Auto4: Equatable {
    var s_city: String
    var s_company_id: Int
    var s_county: String
    var s_state: String
    var s_store_name: String
    var s_store_sk: Int
    var s_street_name: String
    var s_street_number: String
    var s_street_type: String
    var s_suite_number: String
    var s_zip: String
}

struct Auto6: Equatable {
    var d30: Int
    var d31_60: Int
    var d61_90: Int
    var d91_120: Int
    var d_gt_120: Int
    var s_store_name: String
}

struct Joined: Equatable {
    var diff: Int
    var s: Auto4
}

var store_sales = [Auto1(customer: 1, item: 101, sold: 1, store: 1, ticket: 1), Auto1(customer: 1, item: 102, sold: 1, store: 1, ticket: 2), Auto1(customer: 1, item: 103, sold: 1, store: 1, ticket: 3), Auto1(customer: 1, item: 104, sold: 1, store: 1, ticket: 4), Auto1(customer: 1, item: 105, sold: 1, store: 1, ticket: 5)]
var store_returns = [Auto2(customer: 1, item: 101, returned: 16, ticket: 1), Auto2(customer: 1, item: 102, returned: 46, ticket: 2), Auto2(customer: 1, item: 103, returned: 76, ticket: 3), Auto2(customer: 1, item: 104, returned: 111, ticket: 4), Auto2(customer: 1, item: 105, returned: 151, ticket: 5)]
var date_dim = [Auto3(d_date_sk: 1, d_moy: 7, d_year: 2001), Auto3(d_date_sk: 16, d_moy: 8, d_year: 2001), Auto3(d_date_sk: 46, d_moy: 8, d_year: 2001), Auto3(d_date_sk: 76, d_moy: 8, d_year: 2001), Auto3(d_date_sk: 111, d_moy: 8, d_year: 2001), Auto3(d_date_sk: 151, d_moy: 8, d_year: 2001)]
var store = [Auto4(s_city: "City", s_company_id: 1, s_county: "County", s_state: "CA", s_store_name: "Main", s_store_sk: 1, s_street_name: "Main", s_street_number: "1", s_street_type: "St", s_suite_number: "100", s_zip: "12345")]
let year = 2001
let month = 8
var joined = ({
	var _res: [(diff: Int, s: Auto4)] = []
	for ss in store_sales {
		for sr in store_returns {
			if !(ss.ticket == sr.ticket && ss.item == sr.item && ss.customer == sr.customer) { continue }
			for d1 in date_dim {
				if !(ss.sold == d1.d_date_sk) { continue }
				for d2 in date_dim {
					if !(sr.returned == d2.d_date_sk && d2.d_year == year && d2.d_moy == month) { continue }
					for s in store {
						if !(ss.store == s.s_store_sk) { continue }
						_res.append(["s": s, "diff": sr.returned - ss.sold])
					}
				}
			}
		}
	}
	return _res
}())
var result = { () -> [Any] in
    var _groups: [Auto4:[Joined]] = [:]
    for j in joined {
        let _k = j.s
        _groups[_k as! Auto4, default: []].append(j)
    }
    var _tmp: [(key: Auto4, items: [Joined])] = []
    for (k, v) in _groups {
        _tmp.append((key: k, items: v))
    }
    return _tmp.map { g in ["s_store_name": g.key.s_store_name, "d30": g.items.compactMap { x in x.diff <= 30 ? (1) : nil }.count, "d31_60": g.items.compactMap { x in x.diff > 30 && x.diff <= 60 ? (1) : nil }.count, "d61_90": g.items.compactMap { x in x.diff > 60 && x.diff <= 90 ? (1) : nil }.count, "d91_120": g.items.compactMap { x in x.diff > 90 && x.diff <= 120 ? (1) : nil }.count, "d_gt_120": g.items.compactMap { x in x.diff > 120 ? (1) : nil }.count] }
}()
_json(result)
expect(_equal(result, [Auto6(d30: 1, d31_60: 1, d61_90: 1, d91_120: 1, d_gt_120: 1, s_store_name: "Main")]))
