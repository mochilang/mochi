import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

class _Group {
  var key: Any
  var Items: [Any] = []
  init(_ k: Any) { self.key = k }
}

func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}

func _group_by(_ src: [Any], _ keyfn: (Any) -> Any) -> [_Group] {
  func keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
      let s = String(data: data, encoding: .utf8)
    {
      return s
    }
    return String(describing: v)
  }
  var groups: [String: _Group] = [:]
  var order: [String] = []
  for it in src {
    let key = keyfn(it)
    let ks = keyStr(key)
    if groups[ks] == nil {
      groups[ks] = _Group(key)
      order.append(ks)
    }
    groups[ks]!.Items.append(it)
  }
  return order.compactMap { groups[$0] }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

func test_TPCDS_Q30_simplified() {
  expect(
    result == [
      [
        "c_customer_id": "C1", "c_first_name": "John", "c_last_name": "Doe",
        "ctr_total_return": 150,
      ]
    ])
}

let web_returns = [
  [
    "wr_returning_customer_sk": 1, "wr_returned_date_sk": 1, "wr_return_amt": 100,
    "wr_returning_addr_sk": 1,
  ],
  [
    "wr_returning_customer_sk": 2, "wr_returned_date_sk": 1, "wr_return_amt": 30,
    "wr_returning_addr_sk": 2,
  ],
  [
    "wr_returning_customer_sk": 1, "wr_returned_date_sk": 1, "wr_return_amt": 50,
    "wr_returning_addr_sk": 1,
  ],
]
let date_dim: [[String: Int]] = [["d_date_sk": 1, "d_year": 2000]]
let customer_address = [
  ["ca_address_sk": 1, "ca_state": "CA"], ["ca_address_sk": 2, "ca_state": "CA"],
]
let customer = [
  [
    "c_customer_sk": 1, "c_customer_id": "C1", "c_first_name": "John", "c_last_name": "Doe",
    "c_current_addr_sk": 1,
  ],
  [
    "c_customer_sk": 2, "c_customer_id": "C2", "c_first_name": "Jane", "c_last_name": "Smith",
    "c_current_addr_sk": 2,
  ],
]
let customer_total_return =
  ({
    var _res: [[String: Any]] = []
    for wr in web_returns {
      for d in date_dim {
        if !(wr["wr_returned_date_sk"]! == d["d_date_sk"]!) { continue }
        for ca in customer_address {
          if !(wr["wr_returning_addr_sk"]! == ca["ca_address_sk"]!) { continue }
          if !(d["d_year"]! == 2000 && ca["ca_state"]! == "CA") { continue }
          _res.append([
            "ctr_customer_sk": g.key.cust, "ctr_state": g.key.state,
            "ctr_total_return": _sum(
              ({
                var _res: [Any] = []
                for x in g {
                  _res.append(x.wr_return_amt)
                }
                var _items = _res
                return _items
              }()).map { Double($0) }),
          ])
        }
      }
    }
    var _items = _res
    return _items
  }())
let avg_by_state = _group_by(customer_total_return.map { $0 as Any }, { ctr in ctr["ctr_state"]! })
  .map { g in
    [
      "state": g.key,
      "avg_return": _avg(
        ({
          var _res: [Any] = []
          for x in g {
            _res.append(x.ctr_total_return)
          }
          var _items = _res
          return _items
        }()).map { Double($0) }),
    ]
  }
let result =
  ({
    var _res: [[String: Any]] = []
    for ctr in customer_total_return {
      for avg in avg_by_state {
        if !(ctr["ctr_state"]! == avg["state"]!) { continue }
        if !(ctr["ctr_total_return"]! > avg["avg_return"]! * 1.2) { continue }
        for c in customer {
          if !(ctr["ctr_customer_sk"]! == c["c_customer_sk"]!) { continue }
          _res.append([
            "c_customer_id": c["c_customer_id"]!, "c_first_name": c["c_first_name"]!,
            "c_last_name": c["c_last_name"]!, "ctr_total_return": ctr["ctr_total_return"]!,
          ])
        }
      }
    }
    var _items = _res
    return _items
  }())
func main() {
  _json(result)
  test_TPCDS_Q30_simplified()
}
main()
