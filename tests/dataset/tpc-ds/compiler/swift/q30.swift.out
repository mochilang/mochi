// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:06:06Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var wr_return_amt: Double
    var wr_returned_date_sk: Int
    var wr_returning_addr_sk: Int
    var wr_returning_customer_sk: Int
}

struct Auto2: Equatable {
    var d_date_sk: Int
    var d_year: Int
}

struct Auto3: Equatable {
    var ca_address_sk: Int
    var ca_state: String
}

struct Auto4: Equatable {
    var c_current_addr_sk: Int
    var c_customer_id: String
    var c_customer_sk: Int
    var c_first_name: String
    var c_last_name: String
}

struct Auto5: Equatable {
    var c_customer_id: String
    var c_first_name: String
    var c_last_name: String
    var ctr_total_return: Double
}

var web_returns = [Auto1(wr_return_amt: 100.0, wr_returned_date_sk: 1, wr_returning_addr_sk: 1, wr_returning_customer_sk: 1), Auto1(wr_return_amt: 30.0, wr_returned_date_sk: 1, wr_returning_addr_sk: 2, wr_returning_customer_sk: 2), Auto1(wr_return_amt: 50.0, wr_returned_date_sk: 1, wr_returning_addr_sk: 1, wr_returning_customer_sk: 1)]
var date_dim = [Auto2(d_date_sk: 1, d_year: 2000)]
var customer_address = [Auto3(ca_address_sk: 1, ca_state: "CA"), Auto3(ca_address_sk: 2, ca_state: "CA")]
var customer = [Auto4(c_current_addr_sk: 1, c_customer_id: "C1", c_customer_sk: 1, c_first_name: "John", c_last_name: "Doe"), Auto4(c_current_addr_sk: 2, c_customer_id: "C2", c_customer_sk: 2, c_first_name: "Jane", c_last_name: "Smith")]
var customer_total_return = { () -> [Any] in
	var _groups: [String:_Group] = [:]
	var _order: [String] = []
	for wr in web_returns {
		for d in date_dim {
			if !(wr.wr_returned_date_sk == d.d_date_sk) { continue }
			for ca in customer_address {
				if !(wr.wr_returning_addr_sk == ca.ca_address_sk) { continue }
				if !(d.d_year == 2000 && ca.ca_state == "CA") { continue }
				let _k = ["cust": wr.wr_returning_customer_sk, "state": ca.ca_state]
				let _ks = _keyStr(_k)
				if _groups[_ks] == nil {
				    _groups[_ks] = _Group(_k)
				    _order.append(_ks)
				}
				_groups[_ks]!.Items.append(["wr": wr, "d": d, "ca": ca])
			}
		}
	}
	var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
	for k in _order {
	    if let g = _groups[k] {
	        _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
	    }
	}
	return _tmp.map { g in ["ctr_customer_sk": (g.key["cust"] as! Int), "ctr_state": (g.key["state"] as! String), "ctr_total_return": _sum(g.items.map { x in x["wr_return_amt"]! })] }
}())
var avg_by_state = { () -> [Any] in
    var _groups: [AnyHashable:[[String:Any]]] = [:]
    for ctr in customer_total_return {
        let _k = ctr["ctr_state"]!
        _groups[_k as! AnyHashable, default: []].append(ctr)
    }
    var _tmp: [(key: AnyHashable, items: [[String:Any]])] = []
    for (k, v) in _groups {
        _tmp.append((key: k, items: v))
    }
    return _tmp.map { g in ["state": g.key, "avg_return": _avg(g.items.map { x in x["ctr_total_return"]! })] }
}()
var result = ({
	var _res: [(c_customer_id: String, c_first_name: String, c_last_name: String, ctr_total_return: Any)] = []
	for ctr in customer_total_return {
		for avg in avg_by_state {
			if !(ctr["ctr_state"]! == avg["state"]!) { continue }
			for c in customer {
				if !(ctr["ctr_customer_sk"]! == c.c_customer_sk) { continue }
				if !(ctr["ctr_total_return"]! > avg["avg_return"]! * 1.2) { continue }
				_res.append(["c_customer_id": c.c_customer_id, "c_first_name": c.c_first_name, "c_last_name": c.c_last_name, "ctr_total_return": ctr["ctr_total_return"]!])
			}
		}
	}
	return _res
}())
_json(result)
expect(_equal(result, [Auto5(c_customer_id: "C1", c_first_name: "John", c_last_name: "Doe", ctr_total_return: 150.0)]))
