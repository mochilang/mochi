import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _cast<T: Decodable>(_ type: T.Type, _ v: Any) -> T {
  if let tv = v as? T { return tv }
  if let data = try? JSONSerialization.data(withJSONObject: v),
    let obj = try? JSONDecoder().decode(T.self, from: data)
  {
    return obj
  }
  fatalError("cast failed")
}
func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

struct WebSale {
  var ws_sold_time_sk: Int
  var ws_ship_hdemo_sk: Int
  var ws_web_page_sk: Int
}

func test_TPCDS_Q90_ratio() {
  expect(result == 2)
}

let web_sales: [[String: Int]] = [
  ["ws_sold_time_sk": 1, "ws_ship_hdemo_sk": 1, "ws_web_page_sk": 10],
  ["ws_sold_time_sk": 1, "ws_ship_hdemo_sk": 1, "ws_web_page_sk": 10],
  ["ws_sold_time_sk": 2, "ws_ship_hdemo_sk": 1, "ws_web_page_sk": 10],
]
let household_demographics: [[String: Int]] = [["hd_demo_sk": 1, "hd_dep_count": 2]]
let time_dim: [[String: Int]] = [["t_time_sk": 1, "t_hour": 7], ["t_time_sk": 2, "t_hour": 14]]
let web_page: [[String: Int]] = [["wp_web_page_sk": 10, "wp_char_count": 5100]]
let amc =
  ({
    var _res: [[String: Int]] = []
    for ws in web_sales {
      for hd in household_demographics {
        if !(ws["ws_ship_hdemo_sk"]! == hd["hd_demo_sk"]!) { continue }
        for t in time_dim {
          if !(ws["ws_sold_time_sk"]! == t["t_time_sk"]!) { continue }
          for wp in web_page {
            if !(ws["ws_web_page_sk"]! == wp["wp_web_page_sk"]!) { continue }
            if !(t["t_hour"]! >= 7 && t["t_hour"]! <= 8 && hd["hd_dep_count"]! == 2
              && wp["wp_char_count"]! >= 5000 && wp["wp_char_count"]! <= 5200)
            {
              continue
            }
            _res.append(ws)
          }
        }
      }
    }
    var _items = _res
    return _items
  }()).count
let pmc =
  ({
    var _res: [[String: Int]] = []
    for ws in web_sales {
      for hd in household_demographics {
        if !(ws["ws_ship_hdemo_sk"]! == hd["hd_demo_sk"]!) { continue }
        for t in time_dim {
          if !(ws["ws_sold_time_sk"]! == t["t_time_sk"]!) { continue }
          for wp in web_page {
            if !(ws["ws_web_page_sk"]! == wp["wp_web_page_sk"]!) { continue }
            if !(t["t_hour"]! >= 14 && t["t_hour"]! <= 15 && hd["hd_dep_count"]! == 2
              && wp["wp_char_count"]! >= 5000 && wp["wp_char_count"]! <= 5200)
            {
              continue
            }
            _res.append(ws)
          }
        }
      }
    }
    var _items = _res
    return _items
  }()).count
let result = (_cast(Double.self, amc)) / (_cast(Double.self, pmc))
func main() {
  _json(result)
  test_TPCDS_Q90_ratio()
}
main()
