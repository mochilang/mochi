import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func test_TPCDS_Q6_result() {
  expect(result == [["state": "CA", "cnt": 10]])
}

let customer_address = [["ca_address_sk": 1, "ca_state": "CA", "ca_zip": "12345"]]
let customer: [[String: Int]] = [["c_customer_sk": 1, "c_current_addr_sk": 1]]
let store_sales: [[String: Int]] = [
  ["ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_item_sk": 1],
  ["ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_item_sk": 1],
  ["ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_item_sk": 1],
  ["ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_item_sk": 1],
  ["ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_item_sk": 1],
  ["ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_item_sk": 1],
  ["ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_item_sk": 1],
  ["ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_item_sk": 1],
  ["ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_item_sk": 1],
  ["ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_item_sk": 1],
]
let date_dim: [[String: Int]] = [["d_date_sk": 1, "d_year": 1999, "d_moy": 5, "d_month_seq": 120]]
let item = [
  ["i_item_sk": 1, "i_category": "A", "i_current_price": 100],
  ["i_item_sk": 2, "i_category": "A", "i_current_price": 50],
]
let target_month_seq = max(
  ({
    var _res: [Int] = []
    for d in date_dim {
      if !(d["d_year"]! == 1999 && d["d_moy"]! == 5) { continue }
      _res.append(d["d_month_seq"]!)
    }
    var _items = _res
    return _items
  }()))
let result =
  ({
    var _pairs: [(item: [String: Any], key: Any)] = []
    for a in customer_address {
      for c in customer {
        if !(a["ca_address_sk"]! == c["c_current_addr_sk"]!) { continue }
        for s in store_sales {
          if !(c["c_customer_sk"]! == s["ss_customer_sk"]!) { continue }
          for d in date_dim {
            if !(s["ss_sold_date_sk"]! == d["d_date_sk"]!) { continue }
            for i in item {
              if !(s["ss_item_sk"]! == i["i_item_sk"]!) { continue }
              if d["d_month_seq"]! == target_month_seq
                && i["i_current_price"]! > 1.2
                  * _avg(
                    ({
                      var _res: [Any] = []
                      for j in item {
                        if j["i_category"]! == i["i_category"]! {
                          _res.append(j["i_current_price"]!)
                        }
                      }
                      var _items = _res
                      return _items
                    }()).map { Double($0) })
              {
                _pairs.append((item: ["state": g.key, "cnt": g.count], key: [g.count, g.key]))
              }
            }
          }
        }
      }
    }
    _pairs.sort { a, b in
      if let ai = a.key as? Int, let bi = b.key as? Int { return ai < bi }
      if let af = a.key as? Double, let bf = b.key as? Double { return af < bf }
      if let ai = a.key as? Int, let bf = b.key as? Double { return Double(ai) < bf }
      if let af = a.key as? Double, let bi = b.key as? Int { return af < Double(bi) }
      if let sa = a.key as? String, let sb = b.key as? String { return sa < sb }
      return String(describing: a.key) < String(describing: b.key)
    }
    var _items = _pairs.map { $0.item }
    {
      let _n = 100
      if _n < _items.count { _items = Array(_items[0..<_n]) }
    }
    return _items
  }())
func main() {
  _json(result)
  test_TPCDS_Q6_result()
}
main()
