// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:05:15Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _max(_ v: Any) -> Any {
    var list: [Any]? = nil
    if let g = v as? _Group { list = g.Items }
    else if let arr = v as? [Any] { list = arr }
    else if let arr = v as? [Int] { return arr.max() ?? 0 }
    else if let arr = v as? [Double] { return arr.max() ?? 0.0 }
    else if let arr = v as? [String] { return arr.max() ?? "" }
    guard let items = list else { fatalError("max() expects list or group") }
    if items.isEmpty { return 0 }
    if let s = items[0] as? String {
        var m = s
        for it in items.dropFirst() {
            if let v = it as? String, v > m { m = v }
        }
        return m
    }
    func toDouble(_ v: Any) -> Double {
        if let i = v as? Int { return Double(i) }
        if let d = v as? Double { return d }
        if let f = v as? Float { return Double(f) }
        if let i = v as? Int64 { return Double(i) }
        return 0
    }
    var m = toDouble(items[0])
    var isFloat = items[0] is Double || items[0] is Float
    for it in items.dropFirst() {
        if it is Double || it is Float { isFloat = true }
        let d = toDouble(it)
        if d > m { m = d }
    }
    return isFloat ? m : Int(m)
}
struct Auto1: Equatable {
    var ca_address_sk: Int
    var ca_state: String
    var ca_zip: String
}

struct Auto2: Equatable {
    var c_current_addr_sk: Int
    var c_customer_sk: Int
}

struct Auto3: Equatable {
    var ss_customer_sk: Int
    var ss_item_sk: Int
    var ss_sold_date_sk: Int
}

struct Auto4: Equatable {
    var d_date_sk: Int
    var d_month_seq: Int
    var d_moy: Int
    var d_year: Int
}

struct Auto5: Equatable {
    var i_category: String
    var i_current_price: Double
    var i_item_sk: Int
}

struct Auto6: Equatable {
    var cnt: Int
    var state: String
}

var customer_address = [Auto1(ca_address_sk: 1, ca_state: "CA", ca_zip: "12345")]
var customer = [Auto2(c_current_addr_sk: 1, c_customer_sk: 1)]
var store_sales = [Auto3(ss_customer_sk: 1, ss_item_sk: 1, ss_sold_date_sk: 1), Auto3(ss_customer_sk: 1, ss_item_sk: 1, ss_sold_date_sk: 1), Auto3(ss_customer_sk: 1, ss_item_sk: 1, ss_sold_date_sk: 1), Auto3(ss_customer_sk: 1, ss_item_sk: 1, ss_sold_date_sk: 1), Auto3(ss_customer_sk: 1, ss_item_sk: 1, ss_sold_date_sk: 1), Auto3(ss_customer_sk: 1, ss_item_sk: 1, ss_sold_date_sk: 1), Auto3(ss_customer_sk: 1, ss_item_sk: 1, ss_sold_date_sk: 1), Auto3(ss_customer_sk: 1, ss_item_sk: 1, ss_sold_date_sk: 1), Auto3(ss_customer_sk: 1, ss_item_sk: 1, ss_sold_date_sk: 1), Auto3(ss_customer_sk: 1, ss_item_sk: 1, ss_sold_date_sk: 1)]
var date_dim = [Auto4(d_date_sk: 1, d_month_seq: 120, d_moy: 5, d_year: 1999)]
var item = [Auto5(i_category: "A", i_current_price: 100.0, i_item_sk: 1), Auto5(i_category: "A", i_current_price: 50.0, i_item_sk: 2)]
let target_month_seq = _max(date_dim.compactMap { d in d.d_year == 1999 && d.d_moy == 5 ? (d.d_month_seq) : nil })
var result = { () -> [Any] in
	var _groups: [String:[[String:Any]]] = [:]
	for a in customer_address {
		for c in customer {
			if !(a.ca_address_sk == c.c_current_addr_sk) { continue }
			for s in store_sales {
				if !(c.c_customer_sk == s.ss_customer_sk) { continue }
				for d in date_dim {
					if !(s.ss_sold_date_sk == d.d_date_sk) { continue }
					for i in item {
						if !(s.ss_item_sk == i.i_item_sk) { continue }
						if !(d.d_month_seq == target_month_seq && i.i_current_price > 1.2 * Double(_avg(item.compactMap { j in j.i_category == i.i_category ? (j.i_current_price) : nil }))) { continue }
						let _k = a.ca_state
						_groups[_k, default: []].append(["a": a, "c": c, "s": s, "d": d, "i": i])
					}
				}
			}
		}
	}
	var _tmp: [(key: String, items: [[String:Any]])] = []
	for (k, v) in _groups {
	    _tmp.append((key: k, items: v))
	}
	_tmp = _tmp.filter { g in g.items.count >= 10 }
	_tmp.sort { [$0.items.count, $0.key] < [$1.items.count, $1.key] }
	_tmp = Array(_tmp.prefix(100))
	return _tmp.map { g in ["state": g.key, "cnt": g.items.count] }
}())
_json(result)
expect(_equal(result, [Auto6(cnt: 10, state: "CA")]))
