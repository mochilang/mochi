// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:09:28Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var ws_ext_ship_cost: Double
    var ws_net_profit: Double
    var ws_order_number: Int
    var ws_ship_addr_sk: Int
    var ws_ship_date_sk: Int
    var ws_warehouse_sk: Int
    var ws_web_site_sk: Int
}

struct Auto2: Equatable {
    var wr_order_number: Int
}

struct Auto3: Equatable {
    var d_date: String
    var d_date_sk: Int
}

struct Auto4: Equatable {
    var ca_address_sk: Int
    var ca_state: String
}

struct Auto5: Equatable {
    var web_company_name: String
    var web_site_sk: Int
}

struct WebSale: Equatable {
    var ws_order_number: Int
    var ws_ship_date_sk: Int
    var ws_warehouse_sk: Int
    var ws_ship_addr_sk: Int
    var ws_web_site_sk: Int
    var ws_net_profit: Double
    var ws_ext_ship_cost: Double
}
struct WebReturn: Equatable {
    var wr_order_number: Int
}
struct DateDim: Equatable {
    var d_date_sk: Int
    var d_date: String
}
struct CustomerAddress: Equatable {
    var ca_address_sk: Int
    var ca_state: String
}
struct WebSite: Equatable {
    var web_site_sk: Int
    var web_company_name: String
}
var web_sales = [Auto1(ws_ext_ship_cost: 2.0, ws_net_profit: 5.0, ws_order_number: 1, ws_ship_addr_sk: 1, ws_ship_date_sk: 1, ws_warehouse_sk: 1, ws_web_site_sk: 1), Auto1(ws_ext_ship_cost: 0.0, ws_net_profit: 0.0, ws_order_number: 1, ws_ship_addr_sk: 1, ws_ship_date_sk: 1, ws_warehouse_sk: 2, ws_web_site_sk: 1), Auto1(ws_ext_ship_cost: 1.0, ws_net_profit: 3.0, ws_order_number: 2, ws_ship_addr_sk: 1, ws_ship_date_sk: 1, ws_warehouse_sk: 3, ws_web_site_sk: 1)]
var web_returns = [Auto2(wr_order_number: 2)]
var date_dim = [Auto3(d_date: "2001-02-01", d_date_sk: 1)]
var customer_address = [Auto4(ca_address_sk: 1, ca_state: "CA")]
var web_site = [Auto5(web_company_name: "pri", web_site_sk: 1)]
func distinct(_ xs: [any]) -> [any] {
    var out = [Any]()
    for x in xs {
        if !contains(out, x) {
            out = out + [x]
        }
    }
    return out
}
var filtered = ({
	var _res: [Auto1] = []
	for ws in web_sales {
		for d in date_dim {
			if !(ws.ws_ship_date_sk == d.d_date_sk) { continue }
			for ca in customer_address {
				if !(ws.ws_ship_addr_sk == ca.ca_address_sk) { continue }
				for w in web_site {
					if !(ws.ws_web_site_sk == w.web_site_sk) { continue }
					if !(ca.ca_state == "CA" && w.web_company_name == "pri" && web_sales.contains { ws2 in ws.ws_order_number == ws2.ws_order_number && ws.ws_warehouse_sk != ws2.ws_warehouse_sk } && web_returns.contains { wr in wr.wr_order_number == ws.ws_order_number } == false) { continue }
					_res.append(ws)
				}
			}
		}
	}
	return _res
}())
let result = ["order_count": distinct(filtered.map { x in x.ws_order_number }).count, "total_shipping_cost": _sum(filtered.map { x in x.ws_ext_ship_cost }), "total_net_profit": _sum(filtered.map { x in x.ws_net_profit })]
_json(result)
expect(_equal(result, ["order_count": 1, "total_shipping_cost": 2.0, "total_net_profit": 5.0]))
