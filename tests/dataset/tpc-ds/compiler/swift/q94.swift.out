import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _json(_ v: Any) {
    if let d = try? JSONSerialization.data(withJSONObject: v, options: []), let s = String(data: d, encoding: .utf8) {
        print(s)
    }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}

struct WebSale {
  var ws_order_number: Int
  var ws_ship_date_sk: Int
  var ws_warehouse_sk: Int
  var ws_ship_addr_sk: Int
  var ws_web_site_sk: Int
  var ws_net_profit: Double
  var ws_ext_ship_cost: Double
}

struct WebReturn {
  var wr_order_number: Int
}

struct DateDim {
  var d_date_sk: Int
  var d_date: String
}

struct CustomerAddress {
  var ca_address_sk: Int
  var ca_state: String
}

struct WebSite {
  var web_site_sk: Int
  var web_company_name: String
}

func distinct(_ xs: [any]) -> [any] {
  let xs = xs

  var out: [Any] = []
  for x in xs {
    if !contains(out, x) {
      out = append(out, x)
    }
  }
  return out
}

func test_TPCDS_Q94_shipping() {
  expect(result == ["order_count": 1, "total_shipping_cost": 2, "total_net_profit": 5])
}

let web_sales = [["ws_order_number": 1, "ws_ship_date_sk": 1, "ws_warehouse_sk": 1, "ws_ship_addr_sk": 1, "ws_web_site_sk": 1, "ws_net_profit": 5, "ws_ext_ship_cost": 2], ["ws_order_number": 2, "ws_ship_date_sk": 1, "ws_warehouse_sk": 2, "ws_ship_addr_sk": 1, "ws_web_site_sk": 1, "ws_net_profit": 3, "ws_ext_ship_cost": 1]]
let web_returns: [[String: Int]] = [["wr_order_number": 2]]
let date_dim = [["d_date_sk": 1, "d_date": "2001-02-01"]]
let customer_address = [["ca_address_sk": 1, "ca_state": "CA"]]
let web_site = [["web_site_sk": 1, "web_company_name": "pri"]]
let filtered = ({
  var _res: [[String: Any]] = []
  for ws in web_sales {
    for d in date_dim {
      if !(ws["ws_ship_date_sk"]! == d["d_date_sk"]!) { continue }
      for ca in customer_address {
        if !(ws["ws_ship_addr_sk"]! == ca["ca_address_sk"]!) { continue }
        for w in web_site {
          if !(ws["ws_web_site_sk"]! == w["web_site_sk"]!) { continue }
          if ca["ca_state"]! == "CA" && w["web_company_name"]! == "pri" && exists(({
  var _res: [[String: Int]] = []
  for wr in web_returns {
    if wr["wr_order_number"]! == ws["ws_order_number"]! {
      _res.append(wr)
    }
  }
  var _items = _res
  return _items
}())) == false {
            _res.append(ws)
          }
        }
      }
    }
  }
  var _items = _res
  return _items
}())
let result = ["order_count": distinct(({
  var _res: [Any] = []
  for x in filtered {
    _res.append(x["ws_order_number"]!)
  }
  var _items = _res
  return _items
}())).count, "total_shipping_cost": _sum(({
  var _res: [Any] = []
  for x in filtered {
    _res.append(x["ws_ext_ship_cost"]!)
  }
  var _items = _res
  return _items
}()).map { Double($0) }), "total_net_profit": _sum(({
  var _res: [Any] = []
  for x in filtered {
    _res.append(x["ws_net_profit"]!)
  }
  var _items = _res
  return _items
}()).map { Double($0) })]
func main() {
  _json(result)
  test_TPCDS_Q94_shipping()
}
main()
