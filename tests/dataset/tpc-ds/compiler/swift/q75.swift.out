import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _concat<T>(_ a: [T], _ b: [T]) -> [T] {
  var res: [T] = []
  res.reserveCapacity(a.count + b.count)
  res.append(contentsOf: a)
  res.append(contentsOf: b)
  return res
}
func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

func test_TPCDS_Q75_simplified() {
  expect(
    result == [
      [
        "prev_year": 2000, "year": 2001, "i_brand_id": 1, "i_class_id": 2, "i_category_id": 3,
        "i_manufact_id": 4, "prev_yr_cnt": 100, "curr_yr_cnt": 80, "sales_cnt_diff": -20,
        "sales_amt_diff": -200,
      ]
    ])
}

let date_dim: [[String: Int]] = [
  ["d_date_sk": 1, "d_year": 2000], ["d_date_sk": 2, "d_year": 2001],
]
let store_sales = [
  ["ss_item_sk": 1, "ss_quantity": 50, "ss_sales_price": 500, "ss_sold_date_sk": 1],
  ["ss_item_sk": 1, "ss_quantity": 40, "ss_sales_price": 400, "ss_sold_date_sk": 2],
]
let web_sales = [
  ["ws_item_sk": 1, "ws_quantity": 30, "ws_sales_price": 300, "ws_sold_date_sk": 1],
  ["ws_item_sk": 1, "ws_quantity": 25, "ws_sales_price": 250, "ws_sold_date_sk": 2],
]
let catalog_sales = [
  ["cs_item_sk": 1, "cs_quantity": 20, "cs_sales_price": 200, "cs_sold_date_sk": 1],
  ["cs_item_sk": 1, "cs_quantity": 15, "cs_sales_price": 150, "cs_sold_date_sk": 2],
]
let item = [
  [
    "i_item_sk": 1, "i_brand_id": 1, "i_class_id": 2, "i_category_id": 3, "i_manufact_id": 4,
    "i_category": "Electronics",
  ]
]
let sales_detail = _concat(
  _concat(
    ({
      var _res: [[String: Any]] = []
      for ss in store_sales {
        for d in date_dim {
          if !(d["d_date_sk"]! == ss["ss_sold_date_sk"]!) { continue }
          _res.append([
            "d_year": d["d_year"]!, "i_item_sk": ss["ss_item_sk"]!, "quantity": ss["ss_quantity"]!,
            "amount": ss["ss_sales_price"]!,
          ])
        }
      }
      var _items = _res
      return _items
    }()),
    ({
      var _res: [[String: Any]] = []
      for ws in web_sales {
        for d in date_dim {
          if !(d["d_date_sk"]! == ws["ws_sold_date_sk"]!) { continue }
          _res.append([
            "d_year": d["d_year"]!, "i_item_sk": ws["ws_item_sk"]!, "quantity": ws["ws_quantity"]!,
            "amount": ws["ws_sales_price"]!,
          ])
        }
      }
      var _items = _res
      return _items
    }())),
  ({
    var _res: [[String: Any]] = []
    for cs in catalog_sales {
      for d in date_dim {
        if !(d["d_date_sk"]! == cs["cs_sold_date_sk"]!) { continue }
        _res.append([
          "d_year": d["d_year"]!, "i_item_sk": cs["cs_item_sk"]!, "quantity": cs["cs_quantity"]!,
          "amount": cs["cs_sales_price"]!,
        ])
      }
    }
    var _items = _res
    return _items
  }()))
let all_sales =
  ({
    var _res: [[String: Any]] = []
    for sd in sales_detail {
      for i in item {
        if !(i["i_item_sk"]! == sd.i_item_sk) { continue }
        if !(i["i_category"]! == "Electronics") { continue }
        _res.append([
          "d_year": g.key.year, "i_brand_id": g.key.brand_id, "i_class_id": g.key.class_id,
          "i_category_id": g.key.category_id, "i_manufact_id": g.key.manuf_id,
          "sales_cnt": _sum(
            ({
              var _res: [Any] = []
              for x in g {
                _res.append(x.sd.quantity)
              }
              var _items = _res
              return _items
            }()).map { Double($0) }),
          "sales_amt": _sum(
            ({
              var _res: [Any] = []
              for x in g {
                _res.append(x.sd.amount)
              }
              var _items = _res
              return _items
            }()).map { Double($0) }),
        ])
      }
    }
    var _items = _res
    return _items
  }())
let prev_yr = first(
  ({
    var _res: [[String: Any]] = []
    for a in all_sales {
      if !(a["d_year"]! == 2000) { continue }
      _res.append(a)
    }
    var _items = _res
    return _items
  }()))
let curr_yr = first(
  ({
    var _res: [[String: Any]] = []
    for a in all_sales {
      if !(a["d_year"]! == 2001) { continue }
      _res.append(a)
    }
    var _items = _res
    return _items
  }()))
let result =
  ((curr_yr.sales_cnt / prev_yr.sales_cnt) < 0.9
    ? [
      [
        "prev_year": prev_yr.d_year, "year": curr_yr.d_year, "i_brand_id": curr_yr.i_brand_id,
        "i_class_id": curr_yr.i_class_id, "i_category_id": curr_yr.i_category_id,
        "i_manufact_id": curr_yr.i_manufact_id, "prev_yr_cnt": prev_yr.sales_cnt,
        "curr_yr_cnt": curr_yr.sales_cnt, "sales_cnt_diff": curr_yr.sales_cnt - prev_yr.sales_cnt,
        "sales_amt_diff": curr_yr.sales_amt - prev_yr.sales_amt,
      ]
    ] : [])
func main() {
  _json(result)
  test_TPCDS_Q75_simplified()
}
main()
