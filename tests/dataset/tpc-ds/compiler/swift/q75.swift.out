// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:07:36Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var d_date_sk: Int
    var d_year: Int
}

struct Auto2: Equatable {
    var ss_item_sk: Int
    var ss_quantity: Int
    var ss_sales_price: Double
    var ss_sold_date_sk: Int
}

struct Auto3: Equatable {
    var ws_item_sk: Int
    var ws_quantity: Int
    var ws_sales_price: Double
    var ws_sold_date_sk: Int
}

struct Auto4: Equatable {
    var cs_item_sk: Int
    var cs_quantity: Int
    var cs_sales_price: Double
    var cs_sold_date_sk: Int
}

struct Auto5: Equatable {
    var i_brand_id: Int
    var i_category: String
    var i_category_id: Int
    var i_class_id: Int
    var i_item_sk: Int
    var i_manufact_id: Int
}

struct Auto6: Equatable {
    var curr_yr_cnt: Int
    var i_brand_id: Int
    var i_category_id: Int
    var i_class_id: Int
    var i_manufact_id: Int
    var prev_year: Int
    var prev_yr_cnt: Int
    var sales_amt_diff: Double
    var sales_cnt_diff: Int
    var year: Int
}

var date_dim = [Auto1(d_date_sk: 1, d_year: 2000), Auto1(d_date_sk: 2, d_year: 2001)]
var store_sales = [Auto2(ss_item_sk: 1, ss_quantity: 50, ss_sales_price: 500.0, ss_sold_date_sk: 1), Auto2(ss_item_sk: 1, ss_quantity: 40, ss_sales_price: 400.0, ss_sold_date_sk: 2)]
var web_sales = [Auto3(ws_item_sk: 1, ws_quantity: 30, ws_sales_price: 300.0, ws_sold_date_sk: 1), Auto3(ws_item_sk: 1, ws_quantity: 25, ws_sales_price: 250.0, ws_sold_date_sk: 2)]
var catalog_sales = [Auto4(cs_item_sk: 1, cs_quantity: 20, cs_sales_price: 200.0, cs_sold_date_sk: 1), Auto4(cs_item_sk: 1, cs_quantity: 15, cs_sales_price: 150.0, cs_sold_date_sk: 2)]
var item = [Auto5(i_brand_id: 1, i_category: "Electronics", i_category_id: 3, i_class_id: 2, i_item_sk: 1, i_manufact_id: 4)]
let sales_detail = concat(({
	var _res: [(amount: Double, d_year: Int, i_item_sk: Int, quantity: Int)] = []
	for ss in store_sales {
		for d in date_dim {
			if !(d.d_date_sk == ss.ss_sold_date_sk) { continue }
			_res.append(["d_year": d.d_year, "i_item_sk": ss.ss_item_sk, "quantity": ss.ss_quantity, "amount": ss.ss_sales_price])
		}
	}
	return _res
}()), ({
	var _res: [(amount: Double, d_year: Int, i_item_sk: Int, quantity: Int)] = []
	for ws in web_sales {
		for d in date_dim {
			if !(d.d_date_sk == ws.ws_sold_date_sk) { continue }
			_res.append(["d_year": d.d_year, "i_item_sk": ws.ws_item_sk, "quantity": ws.ws_quantity, "amount": ws.ws_sales_price])
		}
	}
	return _res
}()), ({
	var _res: [(amount: Double, d_year: Int, i_item_sk: Int, quantity: Int)] = []
	for cs in catalog_sales {
		for d in date_dim {
			if !(d.d_date_sk == cs.cs_sold_date_sk) { continue }
			_res.append(["d_year": d.d_year, "i_item_sk": cs.cs_item_sk, "quantity": cs.cs_quantity, "amount": cs.cs_sales_price])
		}
	}
	return _res
}()))
var all_sales = { () -> [Any] in
	var _groups: [String:_Group] = [:]
	var _order: [String] = []
	for sd in sales_detail {
		for i in item {
			if !(i.i_item_sk == sd.i_item_sk) { continue }
			if !(i.i_category == "Electronics") { continue }
			let _k = ["year": sd.d_year, "brand_id": i.i_brand_id, "class_id": i.i_class_id, "category_id": i.i_category_id, "manuf_id": i.i_manufact_id]
			let _ks = _keyStr(_k)
			if _groups[_ks] == nil {
			    _groups[_ks] = _Group(_k)
			    _order.append(_ks)
			}
			_groups[_ks]!.Items.append(["sd": sd, "i": i])
		}
	}
	var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
	for k in _order {
	    if let g = _groups[k] {
	        _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
	    }
	}
	return _tmp.map { g in ["d_year": g.key["year"]!, "i_brand_id": (g.key["brand_id"] as! Int), "i_class_id": (g.key["class_id"] as! Int), "i_category_id": (g.key["category_id"] as! Int), "i_manufact_id": (g.key["manuf_id"] as! Int), "sales_cnt": _sum(g.items.map { x in x["sd"]!.quantity }), "sales_amt": _sum(g.items.map { x in x["sd"]!.amount })] }
}())
let prev_yr = first(all_sales.filter { a in a["d_year"]! == 2000 })
let curr_yr = first(all_sales.filter { a in a["d_year"]! == 2001 })
let result = (curr_yr.sales_cnt / prev_yr.sales_cnt) < 0.9 ? [["prev_year": prev_yr.d_year, "year": curr_yr.d_year, "i_brand_id": curr_yr.i_brand_id, "i_class_id": curr_yr.i_class_id, "i_category_id": curr_yr.i_category_id, "i_manufact_id": curr_yr.i_manufact_id, "prev_yr_cnt": prev_yr.sales_cnt, "curr_yr_cnt": curr_yr.sales_cnt, "sales_cnt_diff": curr_yr.sales_cnt - prev_yr.sales_cnt, "sales_amt_diff": curr_yr.sales_amt - prev_yr.sales_amt]] : [Any]()
_json(result)
expect(_equal(result, [Auto6(curr_yr_cnt: 80, i_brand_id: 1, i_category_id: 3, i_class_id: 2, i_manufact_id: 4, prev_year: 2000, prev_yr_cnt: 100, sales_amt_diff: -200.0, sales_cnt_diff: -20, year: 2001)]))
