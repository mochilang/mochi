import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

struct StoreSale {
  var ss_item_sk: Int
  var ss_list_price: Double
  var ss_quantity: Int
  var ss_sold_date_sk: Int
}

struct CatalogSale {
  var cs_item_sk: Int
  var cs_list_price: Double
  var cs_quantity: Int
  var cs_sold_date_sk: Int
}

struct WebSale {
  var ws_item_sk: Int
  var ws_list_price: Double
  var ws_quantity: Int
  var ws_sold_date_sk: Int
}

struct Item {
  var i_item_sk: Int
  var i_brand_id: Int
  var i_class_id: Int
  var i_category_id: Int
}

struct DateDim {
  var d_date_sk: Int
  var d_year: Int
  var d_moy: Int
}

func test_TPCDS_Q14_cross_channel() {
  expect(
    result == [
      [
        "channel": "store", "i_brand_id": 1, "i_class_id": 1, "i_category_id": 1, "sales": 60,
        "number_sales": 1,
      ]
    ])
}

let store_sales = [
  ["ss_item_sk": 1, "ss_list_price": 10, "ss_quantity": 2, "ss_sold_date_sk": 1],
  ["ss_item_sk": 1, "ss_list_price": 20, "ss_quantity": 3, "ss_sold_date_sk": 2],
]
let catalog_sales = [
  ["cs_item_sk": 1, "cs_list_price": 10, "cs_quantity": 2, "cs_sold_date_sk": 1]
]
let web_sales = [["ws_item_sk": 1, "ws_list_price": 30, "ws_quantity": 1, "ws_sold_date_sk": 1]]
let item: [[String: Int]] = [
  ["i_item_sk": 1, "i_brand_id": 1, "i_class_id": 1, "i_category_id": 1]
]
let date_dim: [[String: Int]] = [
  ["d_date_sk": 1, "d_year": 2000, "d_moy": 12], ["d_date_sk": 2, "d_year": 2002, "d_moy": 11],
]
let cross_items: [[String: Int]] = [["ss_item_sk": 1]]
let avg_sales = _avg([20, 20, 30].map { Double($0) })
let store_filtered =
  ({
    var _res: [[String: Any]] = []
    for ss in store_sales {
      for d in date_dim {
        if !(ss["ss_sold_date_sk"]! == d["d_date_sk"]! && d["d_year"]! == 2002 && d["d_moy"]! == 11)
        {
          continue
        }
        if (({
          var _res: [Int] = []
          for ci in cross_items {
            _res.append(ci["ss_item_sk"]!)
          }
          var _items = _res
          return _items
        }())).contains(ss["ss_item_sk"]!) {
          _res.append([
            "channel": "store",
            "sales": _sum(
              ({
                var _res: [Any] = []
                for x in g {
                  _res.append(x.ss_quantity * x.ss_list_price)
                }
                var _items = _res
                return _items
              }()).map { Double($0) }),
            "number_sales":
              ({
                var _res: [Any] = []
                for _ in g {
                  _res.append(_)
                }
                var _items = _res
                return _items
              }()).count,
          ])
        }
      }
    }
    var _items = _res
    return _items
  }())
let result =
  ({
    var _res: [[String: Any]] = []
    for r in store_filtered {
      if r["sales"]! > avg_sales {
        _res.append([
          "channel": r["channel"]!, "i_brand_id": 1, "i_class_id": 1, "i_category_id": 1,
          "sales": r["sales"]!, "number_sales": r["number_sales"]!,
        ])
      }
    }
    var _items = _res
    return _items
  }())
func main() {
  _json(result)
  test_TPCDS_Q14_cross_channel()
}
main()
