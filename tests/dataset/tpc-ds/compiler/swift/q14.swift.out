// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:05:20Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var ss_item_sk: Int
    var ss_list_price: Double
    var ss_quantity: Int
    var ss_sold_date_sk: Int
}

struct Auto2: Equatable {
    var cs_item_sk: Int
    var cs_list_price: Double
    var cs_quantity: Int
    var cs_sold_date_sk: Int
}

struct Auto3: Equatable {
    var ws_item_sk: Int
    var ws_list_price: Double
    var ws_quantity: Int
    var ws_sold_date_sk: Int
}

struct Auto4: Equatable {
    var i_brand_id: Int
    var i_category_id: Int
    var i_class_id: Int
    var i_item_sk: Int
}

struct Auto5: Equatable {
    var d_date_sk: Int
    var d_moy: Int
    var d_year: Int
}

struct Auto6: Equatable {
    var ss_item_sk: Int
}

struct Auto7: Equatable {
    var channel: String
    var i_brand_id: Int
    var i_category_id: Int
    var i_class_id: Int
    var number_sales: Int
    var sales: Double
}

struct StoreSale: Equatable {
    var ss_item_sk: Int
    var ss_list_price: Double
    var ss_quantity: Int
    var ss_sold_date_sk: Int
}
struct CatalogSale: Equatable {
    var cs_item_sk: Int
    var cs_list_price: Double
    var cs_quantity: Int
    var cs_sold_date_sk: Int
}
struct WebSale: Equatable {
    var ws_item_sk: Int
    var ws_list_price: Double
    var ws_quantity: Int
    var ws_sold_date_sk: Int
}
struct Item: Equatable {
    var i_item_sk: Int
    var i_brand_id: Int
    var i_class_id: Int
    var i_category_id: Int
}
struct DateDim: Equatable {
    var d_date_sk: Int
    var d_year: Int
    var d_moy: Int
}
var store_sales = [Auto1(ss_item_sk: 1, ss_list_price: 10.0, ss_quantity: 2, ss_sold_date_sk: 1), Auto1(ss_item_sk: 1, ss_list_price: 20.0, ss_quantity: 3, ss_sold_date_sk: 2)]
var catalog_sales = [Auto2(cs_item_sk: 1, cs_list_price: 10.0, cs_quantity: 2, cs_sold_date_sk: 1)]
var web_sales = [Auto3(ws_item_sk: 1, ws_list_price: 30.0, ws_quantity: 1, ws_sold_date_sk: 1)]
var item = [Auto4(i_brand_id: 1, i_category_id: 1, i_class_id: 1, i_item_sk: 1)]
var date_dim = [Auto5(d_date_sk: 1, d_moy: 12, d_year: 2000), Auto5(d_date_sk: 2, d_moy: 11, d_year: 2002)]
var cross_items = [Auto6(ss_item_sk: 1)]
let avg_sales = _avg([20.0, 20.0, 30.0])
var store_filtered = { () -> [Any] in
	var _groups: [String:_Group] = [:]
	var _order: [String] = []
	for ss in store_sales {
		for d in date_dim {
			if !(ss.ss_sold_date_sk == d.d_date_sk && d.d_year == 2002 && d.d_moy == 11) { continue }
			if !((cross_items.map { ci in ci.ss_item_sk }).contains(ss.ss_item_sk) != nil) { continue }
			let _k = ["brand_id": 1, "class_id": 1, "category_id": 1]
			let _ks = _keyStr(_k)
			if _groups[_ks] == nil {
			    _groups[_ks] = _Group(_k)
			    _order.append(_ks)
			}
			_groups[_ks]!.Items.append(["ss": ss, "d": d])
		}
	}
	var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
	for k in _order {
	    if let g = _groups[k] {
	        _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
	    }
	}
	return _tmp.map { g in ["channel": "store", "sales": _sum(g.items.map { x in x["ss_quantity"]! * x["ss_list_price"]! }), "number_sales": g.items.map { _ in _ }.count] }
}())
var result = store_filtered.compactMap { r in r["sales"]! > avg_sales ? (["channel": (r["channel"] as! String), "i_brand_id": 1, "i_class_id": 1, "i_category_id": 1, "sales": r["sales"]!, "number_sales": r["number_sales"]!]) : nil }
_json(result)
expect(_equal(result, [Auto7(channel: "store", i_brand_id: 1, i_category_id: 1, i_class_id: 1, number_sales: 1, sales: 60.0)]))
