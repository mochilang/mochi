// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:09:29Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
struct Auto1: Equatable {
    var ss_hdemo_sk: Int
    var ss_sold_time_sk: Int
    var ss_store_sk: Int
}

struct Auto2: Equatable {
    var hd_demo_sk: Int
    var hd_dep_count: Int
}

struct Auto3: Equatable {
    var t_hour: Int
    var t_minute: Int
    var t_time_sk: Int
}

struct Auto4: Equatable {
    var s_store_name: String
    var s_store_sk: Int
}

struct StoreSale: Equatable {
    var ss_sold_time_sk: Int
    var ss_hdemo_sk: Int
    var ss_store_sk: Int
}
struct HouseholdDemographics: Equatable {
    var hd_demo_sk: Int
    var hd_dep_count: Int
}
struct TimeDim: Equatable {
    var t_time_sk: Int
    var t_hour: Int
    var t_minute: Int
}
struct Store: Equatable {
    var s_store_sk: Int
    var s_store_name: String
}
var store_sales = [Auto1(ss_hdemo_sk: 1, ss_sold_time_sk: 1, ss_store_sk: 1), Auto1(ss_hdemo_sk: 1, ss_sold_time_sk: 1, ss_store_sk: 1), Auto1(ss_hdemo_sk: 1, ss_sold_time_sk: 2, ss_store_sk: 1)]
var household_demographics = [Auto2(hd_demo_sk: 1, hd_dep_count: 3)]
var time_dim = [Auto3(t_hour: 20, t_minute: 35, t_time_sk: 1), Auto3(t_hour: 20, t_minute: 45, t_time_sk: 2)]
var store = [Auto4(s_store_name: "ese", s_store_sk: 1)]
let result = ({
	var _res: [Auto1] = []
	for ss in store_sales {
		for hd in household_demographics {
			if !(ss.ss_hdemo_sk == hd.hd_demo_sk) { continue }
			for t in time_dim {
				if !(ss.ss_sold_time_sk == t.t_time_sk) { continue }
				for s in store {
					if !(ss.ss_store_sk == s.s_store_sk) { continue }
					if !(t.t_hour == 20 && t.t_minute >= 30 && hd.hd_dep_count == 3 && s.s_store_name == "ese") { continue }
					_res.append(ss)
				}
			}
		}
	}
	return _res
}()).count
_json(result)
expect(_equal(result, 3))
