import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

class _Group {
  var key: Any
  var Items: [Any] = []
  init(_ k: Any) { self.key = k }
}

func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}

func _group_by(_ src: [Any], _ keyfn: (Any) -> Any) -> [_Group] {
  func keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
      let s = String(data: data, encoding: .utf8)
    {
      return s
    }
    return String(describing: v)
  }
  var groups: [String: _Group] = [:]
  var order: [String] = []
  for it in src {
    let key = keyfn(it)
    let ks = keyStr(key)
    if groups[ks] == nil {
      groups[ks] = _Group(key)
      order.append(ks)
    }
    groups[ks]!.Items.append(it)
  }
  return order.compactMap { groups[$0] }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func test_TPCDS_Q81_sample() {
  expect(result == 81)
}

let catalog_returns = [
  ["cust": 1, "state": "CA", "amt": 40], ["cust": 2, "state": "CA", "amt": 50],
  ["cust": 3, "state": "CA", "amt": 81], ["cust": 4, "state": "TX", "amt": 30],
  ["cust": 5, "state": "TX", "amt": 20],
]
let avg_list = _group_by(catalog_returns.map { $0 as Any }, { r in r["state"]! }).map { g in
  [
    "state": g.key,
    "avg_amt": _avg(
      ({
        var _res: [Any] = []
        for x in g {
          _res.append(x.amt)
        }
        var _items = _res
        return _items
      }()).map { Double($0) }),
  ]
}
let avg_state = first(
  ({
    var _res: [[String: Any]] = []
    for a in avg_list {
      if !(a["state"]! == "CA") { continue }
      _res.append(a)
    }
    var _items = _res
    return _items
  }()))
let result_list =
  ({
    var _res: [Any] = []
    for r in catalog_returns {
      if r["state"]! == "CA" && r["amt"]! > avg_state.avg_amt * 1.2 {
        _res.append(r["amt"]!)
      }
    }
    var _items = _res
    return _items
  }())
let result = first(result_list)
func main() {
  _json(result)
  test_TPCDS_Q81_sample()
}
main()
