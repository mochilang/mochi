// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:05:23Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
struct Auto1: Equatable {
    var ss_customer_sk: Int
    var ss_item_sk: Int
    var ss_quantity: Int
    var ss_sold_date_sk: Int
    var ss_store_sk: Int
    var ss_ticket_number: Int
}

struct Auto2: Equatable {
    var sr_customer_sk: Int
    var sr_item_sk: Int
    var sr_return_quantity: Int
    var sr_returned_date_sk: Int
    var sr_ticket_number: Int
}

struct Auto3: Equatable {
    var cs_bill_customer_sk: Int
    var cs_item_sk: Int
    var cs_quantity: Int
    var cs_sold_date_sk: Int
}

struct Auto4: Equatable {
    var d_date_sk: Int
    var d_quarter_name: String
}

struct Auto5: Equatable {
    var s_state: String
    var s_store_sk: Int
}

struct Auto6: Equatable {
    var i_item_desc: String
    var i_item_id: String
    var i_item_sk: Int
}

struct Auto8: Equatable {
    var catalog_sales_quantityave: Double
    var catalog_sales_quantitycount: Int
    var catalog_sales_quantitycov: Double
    var catalog_sales_quantitystdev: Double
    var i_item_desc: String
    var i_item_id: String
    var s_state: String
    var store_returns_quantityave: Double
    var store_returns_quantitycount: Int
    var store_returns_quantitycov: Double
    var store_returns_quantitystdev: Double
    var store_sales_quantityave: Double
    var store_sales_quantitycount: Int
    var store_sales_quantitycov: Double
    var store_sales_quantitystdev: Double
}

struct Joined: Equatable {
    var csq: Int
    var i_item_desc: String
    var i_item_id: String
    var qty: Int
    var ret: Int
    var s_state: String
}

struct StoreSale: Equatable {
    var ss_sold_date_sk: Int
    var ss_item_sk: Int
    var ss_customer_sk: Int
    var ss_ticket_number: Int
    var ss_quantity: Int
    var ss_store_sk: Int
}
struct StoreReturn: Equatable {
    var sr_returned_date_sk: Int
    var sr_customer_sk: Int
    var sr_item_sk: Int
    var sr_ticket_number: Int
    var sr_return_quantity: Int
}
struct CatalogSale: Equatable {
    var cs_sold_date_sk: Int
    var cs_item_sk: Int
    var cs_bill_customer_sk: Int
    var cs_quantity: Int
}
struct DateDim: Equatable {
    var d_date_sk: Int
    var d_quarter_name: String
}
struct Store: Equatable {
    var s_store_sk: Int
    var s_state: String
}
struct Item: Equatable {
    var i_item_sk: Int
    var i_item_id: String
    var i_item_desc: String
}
var store_sales = [Auto1(ss_customer_sk: 1, ss_item_sk: 1, ss_quantity: 10, ss_sold_date_sk: 1, ss_store_sk: 1, ss_ticket_number: 1)]
var store_returns = [Auto2(sr_customer_sk: 1, sr_item_sk: 1, sr_return_quantity: 2, sr_returned_date_sk: 2, sr_ticket_number: 1)]
var catalog_sales = [Auto3(cs_bill_customer_sk: 1, cs_item_sk: 1, cs_quantity: 5, cs_sold_date_sk: 3)]
var date_dim = [Auto4(d_date_sk: 1, d_quarter_name: "1998Q1"), Auto4(d_date_sk: 2, d_quarter_name: "1998Q2"), Auto4(d_date_sk: 3, d_quarter_name: "1998Q3")]
var store = [Auto5(s_state: "CA", s_store_sk: 1)]
var item = [Auto6(i_item_desc: "Item 1", i_item_id: "I1", i_item_sk: 1)]
var joined = ({
	var _res: [(csq: Int, i_item_desc: String, i_item_id: String, qty: Int, ret: Int, s_state: String)] = []
	for ss in store_sales {
		for sr in store_returns {
			if !(ss.ss_customer_sk == sr.sr_customer_sk && ss.ss_item_sk == sr.sr_item_sk && ss.ss_ticket_number == sr.sr_ticket_number) { continue }
			for cs in catalog_sales {
				if !(sr.sr_customer_sk == cs.cs_bill_customer_sk && sr.sr_item_sk == cs.cs_item_sk) { continue }
				for d1 in date_dim {
					if !(ss.ss_sold_date_sk == d1.d_date_sk && d1.d_quarter_name == "1998Q1") { continue }
					for d2 in date_dim {
						if !(["1998Q1", "1998Q2", "1998Q3"].contains(sr.sr_returned_date_sk == d2.d_date_sk && d2.d_quarter_name)) { continue }
						for d3 in date_dim {
							if !(["1998Q1", "1998Q2", "1998Q3"].contains(cs.cs_sold_date_sk == d3.d_date_sk && d3.d_quarter_name)) { continue }
							for s in store {
								if !(ss.ss_store_sk == s.s_store_sk) { continue }
								for i in item {
									if !(ss.ss_item_sk == i.i_item_sk) { continue }
									_res.append(["qty": ss.ss_quantity, "ret": sr.sr_return_quantity, "csq": cs.cs_quantity, "i_item_id": i.i_item_id, "i_item_desc": i.i_item_desc, "s_state": s.s_state])
								}
							}
						}
					}
				}
			}
		}
	}
	return _res
}())
var result = { () -> [Any] in
    var _groups: [String:_Group] = [:]
    var _order: [String] = []
    for j in joined {
        let _k = ["i_item_id": j.i_item_id, "i_item_desc": j.i_item_desc, "s_state": j.s_state]
        let _ks = _keyStr(_k)
        if _groups[_ks] == nil {
            _groups[_ks] = _Group(_k)
            _order.append(_ks)
        }
        _groups[_ks]!.Items.append(j)
    }
    var _tmp: [(key: [String:Any], items: [Joined])] = []
    for k in _order {
        if let g = _groups[k] {
            _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! Joined }))
        }
    }
    return _tmp.map { g in ["i_item_id": (g.key["i_item_id"] as! String), "i_item_desc": (g.key["i_item_desc"] as! String), "s_state": (g.key["s_state"] as! String), "store_sales_quantitycount": g.items.map { _ in _ }.count, "store_sales_quantityave": _avg(g.items.map { x in x.qty }), "store_sales_quantitystdev": 0.0, "store_sales_quantitycov": 0.0, "store_returns_quantitycount": g.items.map { _ in _ }.count, "store_returns_quantityave": _avg(g.items.map { x in x.ret }), "store_returns_quantitystdev": 0.0, "store_returns_quantitycov": 0.0, "catalog_sales_quantitycount": g.items.map { _ in _ }.count, "catalog_sales_quantityave": _avg(g.items.map { x in x.csq }), "catalog_sales_quantitystdev": 0.0, "catalog_sales_quantitycov": 0.0] }
}()
_json(result)
expect(_equal(result, [Auto8(catalog_sales_quantityave: 5.0, catalog_sales_quantitycount: 1, catalog_sales_quantitycov: 0.0, catalog_sales_quantitystdev: 0.0, i_item_desc: "Item 1", i_item_id: "I1", s_state: "CA", store_returns_quantityave: 2.0, store_returns_quantitycount: 1, store_returns_quantitycov: 0.0, store_returns_quantitystdev: 0.0, store_sales_quantityave: 10.0, store_sales_quantitycount: 1, store_sales_quantitycov: 0.0, store_sales_quantitystdev: 0.0)]))
