import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

class _Group {
  var key: Any
  var Items: [Any] = []
  init(_ k: Any) { self.key = k }
}

func _group_by(_ src: [Any], _ keyfn: (Any) -> Any) -> [_Group] {
  func keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
      let s = String(data: data, encoding: .utf8)
    {
      return s
    }
    return String(describing: v)
  }
  var groups: [String: _Group] = [:]
  var order: [String] = []
  for it in src {
    let key = keyfn(it)
    let ks = keyStr(key)
    if groups[ks] == nil {
      groups[ks] = _Group(key)
      order.append(ks)
    }
    groups[ks]!.Items.append(it)
  }
  return order.compactMap { groups[$0] }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

struct Customer {
  var c_customer_sk: Int
  var c_current_addr_sk: Int
  var c_current_cdemo_sk: Int
}

struct CustomerAddress {
  var ca_address_sk: Int
  var ca_county: String
}

struct CustomerDemographics {
  var cd_demo_sk: Int
  var cd_gender: String
  var cd_marital_status: String
  var cd_education_status: String
  var cd_purchase_estimate: Int
  var cd_credit_rating: String
  var cd_dep_count: Int
  var cd_dep_employed_count: Int
  var cd_dep_college_count: Int
}

struct StoreSale {
  var ss_customer_sk: Int
  var ss_sold_date_sk: Int
}

struct DateDim {
  var d_date_sk: Int
  var d_year: Int
  var d_moy: Int
}

func test_TPCDS_Q10_demographics_count() {
  expect(
    result == [
      [
        "cd_gender": "F", "cd_marital_status": "M", "cd_education_status": "College", "cnt1": 1,
        "cd_purchase_estimate": 5000, "cnt2": 1, "cd_credit_rating": "Good", "cnt3": 1,
        "cd_dep_count": 1, "cnt4": 1, "cd_dep_employed_count": 1, "cnt5": 1,
        "cd_dep_college_count": 0, "cnt6": 1,
      ]
    ])
}

let customer: [[String: Int]] = [
  ["c_customer_sk": 1, "c_current_addr_sk": 1, "c_current_cdemo_sk": 1]
]
let customer_address = [["ca_address_sk": 1, "ca_county": "CountyA"]]
let customer_demographics = [
  [
    "cd_demo_sk": 1, "cd_gender": "F", "cd_marital_status": "M", "cd_education_status": "College",
    "cd_purchase_estimate": 5000, "cd_credit_rating": "Good", "cd_dep_count": 1,
    "cd_dep_employed_count": 1, "cd_dep_college_count": 0,
  ]
]
let store_sales: [[String: Int]] = [["ss_customer_sk": 1, "ss_sold_date_sk": 1]]
let web_sales = []
let catalog_sales = []
let date_dim: [[String: Int]] = [["d_date_sk": 1, "d_year": 2000, "d_moy": 2]]
let active =
  ({
    var _res: [[String: Any]] = []
    for c in customer {
      for ca in customer_address {
        if !(c["c_current_addr_sk"]! == ca["ca_address_sk"]! && ca["ca_county"]! == "CountyA") {
          continue
        }
        for cd in customer_demographics {
          if !(c["c_current_cdemo_sk"]! == cd["cd_demo_sk"]!) { continue }
          if exists(
            ({
              var _res: [[String: Int]] = []
              for ss in store_sales {
                for d in date_dim {
                  if !(ss["ss_sold_date_sk"]! == d["d_date_sk"]!) { continue }
                  if ss["ss_customer_sk"]! == c["c_customer_sk"]! && d["d_year"]! == 2000
                    && d["d_moy"]! >= 2 && d["d_moy"]! <= 5
                  {
                    _res.append(ss)
                  }
                }
              }
              var _items = _res
              return _items
            }()))
          {
            _res.append(cd)
          }
        }
      }
    }
    var _items = _res
    return _items
  }())
let result = _group_by(
  active.map { $0 as Any },
  { a in
    [
      "gender": a["cd_gender"]!, "marital": a["cd_marital_status"]!,
      "education": a["cd_education_status"]!, "purchase": a["cd_purchase_estimate"]!,
      "credit": a["cd_credit_rating"]!, "dep": a["cd_dep_count"]!,
      "depemp": a["cd_dep_employed_count"]!, "depcol": a["cd_dep_college_count"]!,
    ]
  }
).map { g in
  [
    "cd_gender": g.key.gender, "cd_marital_status": g.key.marital,
    "cd_education_status": g.key.education,
    "cnt1":
      ({
        var _res: [Any] = []
        for _ in g {
          _res.append(_)
        }
        var _items = _res
        return _items
      }()).count, "cd_purchase_estimate": g.key.purchase,
    "cnt2":
      ({
        var _res: [Any] = []
        for _ in g {
          _res.append(_)
        }
        var _items = _res
        return _items
      }()).count, "cd_credit_rating": g.key.credit,
    "cnt3":
      ({
        var _res: [Any] = []
        for _ in g {
          _res.append(_)
        }
        var _items = _res
        return _items
      }()).count, "cd_dep_count": g.key.dep,
    "cnt4":
      ({
        var _res: [Any] = []
        for _ in g {
          _res.append(_)
        }
        var _items = _res
        return _items
      }()).count, "cd_dep_employed_count": g.key.depemp,
    "cnt5":
      ({
        var _res: [Any] = []
        for _ in g {
          _res.append(_)
        }
        var _items = _res
        return _items
      }()).count, "cd_dep_college_count": g.key.depcol,
    "cnt6":
      ({
        var _res: [Any] = []
        for _ in g {
          _res.append(_)
        }
        var _items = _res
        return _items
      }()).count,
  ]
}
func main() {
  _json(result)
  test_TPCDS_Q10_demographics_count()
}
main()
