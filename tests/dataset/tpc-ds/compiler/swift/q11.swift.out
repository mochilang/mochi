import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

struct Customer {
  var c_customer_sk: Int
  var c_customer_id: String
  var c_first_name: String
  var c_last_name: String
}

struct StoreSale {
  var ss_customer_sk: Int
  var ss_sold_date_sk: Int
  var ss_ext_list_price: Double
}

struct WebSale {
  var ws_bill_customer_sk: Int
  var ws_sold_date_sk: Int
  var ws_ext_list_price: Double
}

func test_TPCDS_Q11_growth() {
  expect(
    result == [["customer_id": "C1", "customer_first_name": "John", "customer_last_name": "Doe"]])
}

let customer = [
  ["c_customer_sk": 1, "c_customer_id": "C1", "c_first_name": "John", "c_last_name": "Doe"]
]
let store_sales = [
  ["ss_customer_sk": 1, "ss_sold_date_sk": 1998, "ss_ext_list_price": 60],
  ["ss_customer_sk": 1, "ss_sold_date_sk": 1999, "ss_ext_list_price": 90],
]
let web_sales = [
  ["ws_bill_customer_sk": 1, "ws_sold_date_sk": 1998, "ws_ext_list_price": 50],
  ["ws_bill_customer_sk": 1, "ws_sold_date_sk": 1999, "ws_ext_list_price": 150],
]
let ss98 = _sum(
  ({
    var _res: [Any] = []
    for ss in store_sales {
      if !(ss["ss_sold_date_sk"]! == 1998) { continue }
      _res.append(ss["ss_ext_list_price"]!)
    }
    var _items = _res
    return _items
  }()).map { Double($0) })
let ss99 = _sum(
  ({
    var _res: [Any] = []
    for ss in store_sales {
      if !(ss["ss_sold_date_sk"]! == 1999) { continue }
      _res.append(ss["ss_ext_list_price"]!)
    }
    var _items = _res
    return _items
  }()).map { Double($0) })
let ws98 = _sum(
  ({
    var _res: [Any] = []
    for ws in web_sales {
      if !(ws["ws_sold_date_sk"]! == 1998) { continue }
      _res.append(ws["ws_ext_list_price"]!)
    }
    var _items = _res
    return _items
  }()).map { Double($0) })
let ws99 = _sum(
  ({
    var _res: [Any] = []
    for ws in web_sales {
      if !(ws["ws_sold_date_sk"]! == 1999) { continue }
      _res.append(ws["ws_ext_list_price"]!)
    }
    var _items = _res
    return _items
  }()).map { Double($0) })
let growth_ok = ws98 > 0 && ss98 > 0 && (ws99 / ws98) > (ss99 / ss98)
let result: [[String: String]] =
  (growth_ok
    ? [["customer_id": "C1", "customer_first_name": "John", "customer_last_name": "Doe"]] : [])
func main() {
  _json(result)
  test_TPCDS_Q11_growth()
}
main()
