// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:05:18Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var c_customer_id: String
    var c_customer_sk: Int
    var c_first_name: String
    var c_last_name: String
}

struct Auto2: Equatable {
    var ss_customer_sk: Int
    var ss_ext_list_price: Double
    var ss_sold_date_sk: Int
}

struct Auto3: Equatable {
    var ws_bill_customer_sk: Int
    var ws_ext_list_price: Double
    var ws_sold_date_sk: Int
}

struct Auto4: Equatable {
    var customer_first_name: String
    var customer_id: String
    var customer_last_name: String
}

struct Customer: Equatable {
    var c_customer_sk: Int
    var c_customer_id: String
    var c_first_name: String
    var c_last_name: String
}
struct StoreSale: Equatable {
    var ss_customer_sk: Int
    var ss_sold_date_sk: Int
    var ss_ext_list_price: Double
}
struct WebSale: Equatable {
    var ws_bill_customer_sk: Int
    var ws_sold_date_sk: Int
    var ws_ext_list_price: Double
}
var customer = [Auto1(c_customer_id: "C1", c_customer_sk: 1, c_first_name: "John", c_last_name: "Doe")]
var store_sales = [Auto2(ss_customer_sk: 1, ss_ext_list_price: 60.0, ss_sold_date_sk: 1998), Auto2(ss_customer_sk: 1, ss_ext_list_price: 90.0, ss_sold_date_sk: 1999)]
var web_sales = [Auto3(ws_bill_customer_sk: 1, ws_ext_list_price: 50.0, ws_sold_date_sk: 1998), Auto3(ws_bill_customer_sk: 1, ws_ext_list_price: 150.0, ws_sold_date_sk: 1999)]
let ss98 = _sum(store_sales.compactMap { ss in ss.ss_sold_date_sk == 1998 ? (ss.ss_ext_list_price) : nil })
let ss99 = _sum(store_sales.compactMap { ss in ss.ss_sold_date_sk == 1999 ? (ss.ss_ext_list_price) : nil })
let ws98 = _sum(web_sales.compactMap { ws in ws.ws_sold_date_sk == 1998 ? (ws.ws_ext_list_price) : nil })
let ws99 = _sum(web_sales.compactMap { ws in ws.ws_sold_date_sk == 1999 ? (ws.ws_ext_list_price) : nil })
let growth_ok = ws98 > 0 && ss98 > 0 && (ws99 / ws98) > (ss99 / ss98)
let result = growth_ok ? [Auto4(customer_first_name: "John", customer_id: "C1", customer_last_name: "Doe")] : [Any]()
_json(result)
expect(_equal(result, [Auto4(customer_first_name: "John", customer_id: "C1", customer_last_name: "Doe")]))
