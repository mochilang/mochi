// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:05:24Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    if arr.isEmpty { return 0 }
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum / Double(arr.count)
}
struct Auto1: Equatable {
    var cs_bill_cdemo_sk: Int
    var cs_bill_customer_sk: Int
    var cs_coupon_amt: Double
    var cs_item_sk: Int
    var cs_list_price: Double
    var cs_net_profit: Double
    var cs_quantity: Int
    var cs_sales_price: Double
    var cs_sold_date_sk: Int
}

struct Auto2: Equatable {
    var cd_demo_sk: Int
    var cd_dep_count: Int
    var cd_education_status: String
    var cd_gender: String
}

struct Auto3: Equatable {
    var c_birth_month: Int
    var c_birth_year: Int
    var c_current_addr_sk: Int
    var c_current_cdemo_sk: Int
    var c_customer_sk: Int
}

struct Auto4: Equatable {
    var ca_address_sk: Int
    var ca_country: String
    var ca_county: String
    var ca_state: String
}

struct Auto5: Equatable {
    var d_date_sk: Int
    var d_year: Int
}

struct Auto6: Equatable {
    var i_item_id: String
    var i_item_sk: Int
}

struct Auto8: Equatable {
    var agg1: Double
    var agg2: Double
    var agg3: Double
    var agg4: Double
    var agg5: Double
    var agg6: Double
    var agg7: Double
    var ca_country: String
    var ca_county: String
    var ca_state: String
    var i_item_id: String
}

struct Joined: Equatable {
    var by: Int
    var ca_country: String
    var ca_county: String
    var ca_state: String
    var cp: Double
    var dep: Int
    var i_item_id: String
    var lp: Double
    var np: Double
    var q: Int
    var sp: Double
}

struct CatalogSale: Equatable {
    var cs_quantity: Int
    var cs_list_price: Double
    var cs_coupon_amt: Double
    var cs_sales_price: Double
    var cs_net_profit: Double
    var cs_bill_cdemo_sk: Int
    var cs_bill_customer_sk: Int
    var cs_sold_date_sk: Int
    var cs_item_sk: Int
}
struct CustomerDemographics: Equatable {
    var cd_demo_sk: Int
    var cd_gender: String
    var cd_education_status: String
    var cd_dep_count: Int
}
struct Customer: Equatable {
    var c_customer_sk: Int
    var c_current_cdemo_sk: Int
    var c_current_addr_sk: Int
    var c_birth_year: Int
    var c_birth_month: Int
}
struct CustomerAddress: Equatable {
    var ca_address_sk: Int
    var ca_country: String
    var ca_state: String
    var ca_county: String
}
struct DateDim: Equatable {
    var d_date_sk: Int
    var d_year: Int
}
struct Item: Equatable {
    var i_item_sk: Int
    var i_item_id: String
}
var catalog_sales = [Auto1(cs_bill_cdemo_sk: 1, cs_bill_customer_sk: 1, cs_coupon_amt: 1.0, cs_item_sk: 1, cs_list_price: 10.0, cs_net_profit: 2.0, cs_quantity: 1, cs_sales_price: 9.0, cs_sold_date_sk: 1)]
var customer_demographics = [Auto2(cd_demo_sk: 1, cd_dep_count: 2, cd_education_status: "College", cd_gender: "M"), Auto2(cd_demo_sk: 2, cd_dep_count: 2, cd_education_status: "College", cd_gender: "F")]
var customer = [Auto3(c_birth_month: 1, c_birth_year: 1980, c_current_addr_sk: 1, c_current_cdemo_sk: 2, c_customer_sk: 1)]
var customer_address = [Auto4(ca_address_sk: 1, ca_country: "US", ca_county: "County1", ca_state: "CA")]
var date_dim = [Auto5(d_date_sk: 1, d_year: 1999)]
var item = [Auto6(i_item_id: "I1", i_item_sk: 1)]
var joined = ({
	var _res: [(by: Int, ca_country: String, ca_county: String, ca_state: String, cp: Double, dep: Int, i_item_id: String, lp: Double, np: Double, q: Int, sp: Double)] = []
	for cs in catalog_sales {
		for cd1 in customer_demographics {
			if !(cs.cs_bill_cdemo_sk == cd1.cd_demo_sk && cd1.cd_gender == "M" && cd1.cd_education_status == "College") { continue }
			for c in customer {
				if !(cs.cs_bill_customer_sk == c.c_customer_sk) { continue }
				for cd2 in customer_demographics {
					if !(c.c_current_cdemo_sk == cd2.cd_demo_sk) { continue }
					for ca in customer_address {
						if !(c.c_current_addr_sk == ca.ca_address_sk) { continue }
						for d in date_dim {
							if !(cs.cs_sold_date_sk == d.d_date_sk && d.d_year == 1999) { continue }
							for i in item {
								if !(cs.cs_item_sk == i.i_item_sk) { continue }
								_res.append(["i_item_id": i.i_item_id, "ca_country": ca.ca_country, "ca_state": ca.ca_state, "ca_county": ca.ca_county, "q": cs.cs_quantity, "lp": cs.cs_list_price, "cp": cs.cs_coupon_amt, "sp": cs.cs_sales_price, "np": cs.cs_net_profit, "by": c.c_birth_year, "dep": cd1.cd_dep_count])
							}
						}
					}
				}
			}
		}
	}
	return _res
}())
var result = { () -> [Any] in
    var _groups: [String:_Group] = [:]
    var _order: [String] = []
    for j in joined {
        let _k = ["i_item_id": j.i_item_id, "ca_country": j.ca_country, "ca_state": j.ca_state, "ca_county": j.ca_county]
        let _ks = _keyStr(_k)
        if _groups[_ks] == nil {
            _groups[_ks] = _Group(_k)
            _order.append(_ks)
        }
        _groups[_ks]!.Items.append(j)
    }
    var _tmp: [(key: [String:Any], items: [Joined])] = []
    for k in _order {
        if let g = _groups[k] {
            _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! Joined }))
        }
    }
    return _tmp.map { g in ["i_item_id": (g.key["i_item_id"] as! String), "ca_country": (g.key["ca_country"] as! String), "ca_state": (g.key["ca_state"] as! String), "ca_county": (g.key["ca_county"] as! String), "agg1": _avg(g.items.map { x in x.q }), "agg2": _avg(g.items.map { x in x.lp }), "agg3": _avg(g.items.map { x in x.cp }), "agg4": _avg(g.items.map { x in x.sp }), "agg5": _avg(g.items.map { x in x.np }), "agg6": _avg(g.items.map { x in x.by }), "agg7": _avg(g.items.map { x in x.dep })] }
}()
_json(result)
expect(_equal(result, [Auto8(agg1: 1.0, agg2: 10.0, agg3: 1.0, agg4: 9.0, agg5: 2.0, agg6: 1980.0, agg7: 2.0, ca_country: "US", ca_county: "County1", ca_state: "CA", i_item_id: "I1")]))
