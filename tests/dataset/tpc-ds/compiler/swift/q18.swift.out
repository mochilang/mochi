import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

class _Group {
  var key: Any
  var Items: [Any] = []
  init(_ k: Any) { self.key = k }
}

func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}

func _group_by(_ src: [Any], _ keyfn: (Any) -> Any) -> [_Group] {
  func keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
      let s = String(data: data, encoding: .utf8)
    {
      return s
    }
    return String(describing: v)
  }
  var groups: [String: _Group] = [:]
  var order: [String] = []
  for it in src {
    let key = keyfn(it)
    let ks = keyStr(key)
    if groups[ks] == nil {
      groups[ks] = _Group(key)
      order.append(ks)
    }
    groups[ks]!.Items.append(it)
  }
  return order.compactMap { groups[$0] }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

struct CatalogSale {
  var cs_quantity: Int
  var cs_list_price: Double
  var cs_coupon_amt: Double
  var cs_sales_price: Double
  var cs_net_profit: Double
  var cs_bill_cdemo_sk: Int
  var cs_bill_customer_sk: Int
  var cs_sold_date_sk: Int
  var cs_item_sk: Int
}

struct CustomerDemographics {
  var cd_demo_sk: Int
  var cd_gender: String
  var cd_education_status: String
  var cd_dep_count: Int
}

struct Customer {
  var c_customer_sk: Int
  var c_current_cdemo_sk: Int
  var c_current_addr_sk: Int
  var c_birth_year: Int
  var c_birth_month: Int
}

struct CustomerAddress {
  var ca_address_sk: Int
  var ca_country: String
  var ca_state: String
  var ca_county: String
}

struct DateDim {
  var d_date_sk: Int
  var d_year: Int
}

struct Item {
  var i_item_sk: Int
  var i_item_id: String
}

func test_TPCDS_Q18_averages() {
  expect(
    result == [
      [
        "i_item_id": "I1", "ca_country": "US", "ca_state": "CA", "ca_county": "County1", "agg1": 1,
        "agg2": 10, "agg3": 1, "agg4": 9, "agg5": 2, "agg6": 1980, "agg7": 2,
      ]
    ])
}

let catalog_sales = [
  [
    "cs_quantity": 1, "cs_list_price": 10, "cs_coupon_amt": 1, "cs_sales_price": 9,
    "cs_net_profit": 2, "cs_bill_cdemo_sk": 1, "cs_bill_customer_sk": 1, "cs_sold_date_sk": 1,
    "cs_item_sk": 1,
  ]
]
let customer_demographics = [
  ["cd_demo_sk": 1, "cd_gender": "M", "cd_education_status": "College", "cd_dep_count": 2],
  ["cd_demo_sk": 2, "cd_gender": "F", "cd_education_status": "College", "cd_dep_count": 2],
]
let customer: [[String: Int]] = [
  [
    "c_customer_sk": 1, "c_current_cdemo_sk": 2, "c_current_addr_sk": 1, "c_birth_year": 1980,
    "c_birth_month": 1,
  ]
]
let customer_address = [
  ["ca_address_sk": 1, "ca_country": "US", "ca_state": "CA", "ca_county": "County1"]
]
let date_dim: [[String: Int]] = [["d_date_sk": 1, "d_year": 1999]]
let item = [["i_item_sk": 1, "i_item_id": "I1"]]
let joined =
  ({
    var _res: [[String: Any]] = []
    for cs in catalog_sales {
      for cd1 in customer_demographics {
        if !(cs["cs_bill_cdemo_sk"]! == cd1["cd_demo_sk"]! && cd1["cd_gender"]! == "M"
          && cd1["cd_education_status"]! == "College")
        {
          continue
        }
        for c in customer {
          if !(cs["cs_bill_customer_sk"]! == c["c_customer_sk"]!) { continue }
          for cd2 in customer_demographics {
            if !(c["c_current_cdemo_sk"]! == cd2["cd_demo_sk"]!) { continue }
            for ca in customer_address {
              if !(c["c_current_addr_sk"]! == ca["ca_address_sk"]!) { continue }
              for d in date_dim {
                if !(cs["cs_sold_date_sk"]! == d["d_date_sk"]! && d["d_year"]! == 1999) { continue }
                for i in item {
                  if !(cs["cs_item_sk"]! == i["i_item_sk"]!) { continue }
                  _res.append([
                    "i_item_id": i["i_item_id"]!, "ca_country": ca["ca_country"]!,
                    "ca_state": ca["ca_state"]!, "ca_county": ca["ca_county"]!,
                    "q": cs["cs_quantity"]!, "lp": cs["cs_list_price"]!, "cp": cs["cs_coupon_amt"]!,
                    "sp": cs["cs_sales_price"]!, "np": cs["cs_net_profit"]!,
                    "by": c["c_birth_year"]!, "dep": cd1["cd_dep_count"]!,
                  ])
                }
              }
            }
          }
        }
      }
    }
    var _items = _res
    return _items
  }())
let result = _group_by(
  joined.map { $0 as Any },
  { j in
    [
      "i_item_id": j["i_item_id"]!, "ca_country": j["ca_country"]!, "ca_state": j["ca_state"]!,
      "ca_county": j["ca_county"]!,
    ]
  }
).map { g in
  [
    "i_item_id": g.key.i_item_id, "ca_country": g.key.ca_country, "ca_state": g.key.ca_state,
    "ca_county": g.key.ca_county,
    "agg1": _avg(
      ({
        var _res: [Any] = []
        for x in g {
          _res.append(x.q)
        }
        var _items = _res
        return _items
      }()).map { Double($0) }),
    "agg2": _avg(
      ({
        var _res: [Any] = []
        for x in g {
          _res.append(x.lp)
        }
        var _items = _res
        return _items
      }()).map { Double($0) }),
    "agg3": _avg(
      ({
        var _res: [Any] = []
        for x in g {
          _res.append(x.cp)
        }
        var _items = _res
        return _items
      }()).map { Double($0) }),
    "agg4": _avg(
      ({
        var _res: [Any] = []
        for x in g {
          _res.append(x.sp)
        }
        var _items = _res
        return _items
      }()).map { Double($0) }),
    "agg5": _avg(
      ({
        var _res: [Any] = []
        for x in g {
          _res.append(x.np)
        }
        var _items = _res
        return _items
      }()).map { Double($0) }),
    "agg6": _avg(
      ({
        var _res: [Any] = []
        for x in g {
          _res.append(x.by)
        }
        var _items = _res
        return _items
      }()).map { Double($0) }),
    "agg7": _avg(
      ({
        var _res: [Any] = []
        for x in g {
          _res.append(x.dep)
        }
        var _items = _res
        return _items
      }()).map { Double($0) }),
  ]
}
func main() {
  _json(result)
  test_TPCDS_Q18_averages()
}
main()
