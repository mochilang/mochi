import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

func test_TPCDS_Q79_simplified() {
  expect(
    result == [
      [
        "c_last_name": "Smith", "c_first_name": "Alice", "s_city": "CityA", "ss_ticket_number": 1,
        "amt": 5, "profit": 10,
      ]
    ])
}

let date_dim: [[String: Int]] = [["d_date_sk": 1, "d_dow": 1, "d_year": 1999]]
let store = [["s_store_sk": 1, "s_city": "CityA", "s_number_employees": 250]]
let household_demographics: [[String: Int]] = [
  ["hd_demo_sk": 1, "hd_dep_count": 2, "hd_vehicle_count": 1]
]
let store_sales = [
  [
    "ss_sold_date_sk": 1, "ss_store_sk": 1, "ss_ticket_number": 1, "ss_customer_sk": 1,
    "ss_hdemo_sk": 1, "ss_coupon_amt": 5, "ss_net_profit": 10,
  ]
]
let customer = [["c_customer_sk": 1, "c_last_name": "Smith", "c_first_name": "Alice"]]
let agg =
  ({
    var _res: [[String: Any]] = []
    for ss in store_sales {
      for d in date_dim {
        if !(d["d_date_sk"]! == ss["ss_sold_date_sk"]!) { continue }
        for s in store {
          if !(s["s_store_sk"]! == ss["ss_store_sk"]!) { continue }
          for hd in household_demographics {
            if !(hd["hd_demo_sk"]! == ss["ss_hdemo_sk"]!) { continue }
            if !((hd["hd_dep_count"]! == 2 || hd["hd_vehicle_count"]! > 1) && d["d_dow"]! == 1
              && (d["d_year"]! == 1998 || d["d_year"]! == 1999 || d["d_year"]! == 2000)
              && s["s_number_employees"]! >= 200 && s["s_number_employees"]! <= 295)
            {
              continue
            }
            _res.append([
              "key": g.key,
              "amt": _sum(
                ({
                  var _res: [Any] = []
                  for x in g {
                    _res.append(x.ss.ss_coupon_amt)
                  }
                  var _items = _res
                  return _items
                }()).map { Double($0) }),
              "profit": _sum(
                ({
                  var _res: [Any] = []
                  for x in g {
                    _res.append(x.ss.ss_net_profit)
                  }
                  var _items = _res
                  return _items
                }()).map { Double($0) }),
            ])
          }
        }
      }
    }
    var _items = _res
    return _items
  }())
let result =
  ({
    var _pairs: [(item: [String: Any], key: Any)] = []
    for a in agg {
      for c in customer {
        if !(c["c_customer_sk"]! == a["key"]!["customer_sk"]!) { continue }
        _pairs.append(
          (
            item: [
              "c_last_name": c["c_last_name"]!, "c_first_name": c["c_first_name"]!,
              "s_city": a["key"]!["city"]!, "ss_ticket_number": a["key"]!["ticket"]!,
              "amt": a["amt"]!, "profit": a["profit"]!,
            ], key: [c["c_last_name"]!, c["c_first_name"]!, a["key"]!["city"]!, a["profit"]!]
          ))
      }
    }
    _pairs.sort { a, b in
      if let ai = a.key as? Int, let bi = b.key as? Int { return ai < bi }
      if let af = a.key as? Double, let bf = b.key as? Double { return af < bf }
      if let ai = a.key as? Int, let bf = b.key as? Double { return Double(ai) < bf }
      if let af = a.key as? Double, let bi = b.key as? Int { return af < Double(bi) }
      if let sa = a.key as? String, let sb = b.key as? String { return sa < sb }
      return String(describing: a.key) < String(describing: b.key)
    }
    var _items = _pairs.map { $0.item }
    return _items
  }())
func main() {
  _json(result)
  test_TPCDS_Q79_simplified()
}
main()
