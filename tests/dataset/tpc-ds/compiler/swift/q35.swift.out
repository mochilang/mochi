import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func test_TPCDS_Q35_simplified() {
  expect(
    groups == [
      [
        "ca_state": "CA", "cd_gender": "M", "cd_marital_status": "S", "cd_dep_count": 1,
        "cd_dep_employed_count": 1, "cd_dep_college_count": 0, "cnt": 1,
      ]
    ])
}

let customer: [[String: Int]] = [
  ["c_customer_sk": 1, "c_current_addr_sk": 1, "c_current_cdemo_sk": 1],
  ["c_customer_sk": 2, "c_current_addr_sk": 2, "c_current_cdemo_sk": 2],
]
let customer_address = [
  ["ca_address_sk": 1, "ca_state": "CA"], ["ca_address_sk": 2, "ca_state": "NY"],
]
let customer_demographics = [
  [
    "cd_demo_sk": 1, "cd_gender": "M", "cd_marital_status": "S", "cd_dep_count": 1,
    "cd_dep_employed_count": 1, "cd_dep_college_count": 0,
  ],
  [
    "cd_demo_sk": 2, "cd_gender": "F", "cd_marital_status": "M", "cd_dep_count": 2,
    "cd_dep_employed_count": 1, "cd_dep_college_count": 1,
  ],
]
let store_sales: [[String: Int]] = [["ss_customer_sk": 1, "ss_sold_date_sk": 1]]
let date_dim: [[String: Int]] = [["d_date_sk": 1, "d_year": 2000, "d_qoy": 1]]
let purchased: [Int] =
  ({
    var _res: [Int] = []
    for ss in store_sales {
      for d in date_dim {
        if !(ss["ss_sold_date_sk"]! == d["d_date_sk"]!) { continue }
        if !(d["d_year"]! == 2000 && d["d_qoy"]! < 4) { continue }
        _res.append(ss["ss_customer_sk"]!)
      }
    }
    var _items = _res
    return _items
  }())
let groups =
  ({
    var _res: [[String: Any]] = []
    for c in customer {
      for ca in customer_address {
        if !(c["c_current_addr_sk"]! == ca["ca_address_sk"]!) { continue }
        for cd in customer_demographics {
          if !(c["c_current_cdemo_sk"]! == cd["cd_demo_sk"]!) { continue }
          if purchased.contains(c["c_customer_sk"]!) {
            _res.append([
              "ca_state": g.key.state, "cd_gender": g.key.gender,
              "cd_marital_status": g.key.marital, "cd_dep_count": g.key.dep,
              "cd_dep_employed_count": g.key.emp, "cd_dep_college_count": g.key.col, "cnt": g.count,
            ])
          }
        }
      }
    }
    var _items = _res
    return _items
  }())
func main() {
  _json(groups)
  test_TPCDS_Q35_simplified()
}
main()
