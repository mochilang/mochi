// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:06:09Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
struct Auto1: Equatable {
    var c_current_addr_sk: Int
    var c_current_cdemo_sk: Int
    var c_customer_sk: Int
}

struct Auto2: Equatable {
    var ca_address_sk: Int
    var ca_state: String
}

struct Auto3: Equatable {
    var cd_demo_sk: Int
    var cd_dep_college_count: Int
    var cd_dep_count: Int
    var cd_dep_employed_count: Int
    var cd_gender: String
    var cd_marital_status: String
}

struct Auto4: Equatable {
    var ss_customer_sk: Int
    var ss_sold_date_sk: Int
}

struct Auto5: Equatable {
    var d_date_sk: Int
    var d_qoy: Int
    var d_year: Int
}

struct Auto6: Equatable {
    var ca_state: String
    var cd_dep_college_count: Int
    var cd_dep_count: Int
    var cd_dep_employed_count: Int
    var cd_gender: String
    var cd_marital_status: String
    var cnt: Int
}

var customer = [Auto1(c_current_addr_sk: 1, c_current_cdemo_sk: 1, c_customer_sk: 1), Auto1(c_current_addr_sk: 2, c_current_cdemo_sk: 2, c_customer_sk: 2)]
var customer_address = [Auto2(ca_address_sk: 1, ca_state: "CA"), Auto2(ca_address_sk: 2, ca_state: "NY")]
var customer_demographics = [Auto3(cd_demo_sk: 1, cd_dep_college_count: 0, cd_dep_count: 1, cd_dep_employed_count: 1, cd_gender: "M", cd_marital_status: "S"), Auto3(cd_demo_sk: 2, cd_dep_college_count: 1, cd_dep_count: 2, cd_dep_employed_count: 1, cd_gender: "F", cd_marital_status: "M")]
var store_sales = [Auto4(ss_customer_sk: 1, ss_sold_date_sk: 1)]
var date_dim = [Auto5(d_date_sk: 1, d_qoy: 1, d_year: 2000)]
var purchased = ({
	var _res: [Int] = []
	for ss in store_sales {
		for d in date_dim {
			if !(ss.ss_sold_date_sk == d.d_date_sk) { continue }
			if !(d.d_year == 2000 && d.d_qoy < 4) { continue }
			_res.append(ss.ss_customer_sk)
		}
	}
	return _res
}())
var groups = { () -> [Any] in
	var _groups: [String:_Group] = [:]
	var _order: [String] = []
	for c in customer {
		for ca in customer_address {
			if !(c.c_current_addr_sk == ca.ca_address_sk) { continue }
			for cd in customer_demographics {
				if !(c.c_current_cdemo_sk == cd.cd_demo_sk) { continue }
				if !(purchased.contains(c.c_customer_sk) != nil) { continue }
				let _k = ["state": ca.ca_state, "gender": cd.cd_gender, "marital": cd.cd_marital_status, "dep": cd.cd_dep_count, "emp": cd.cd_dep_employed_count, "col": cd.cd_dep_college_count]
				let _ks = _keyStr(_k)
				if _groups[_ks] == nil {
				    _groups[_ks] = _Group(_k)
				    _order.append(_ks)
				}
				_groups[_ks]!.Items.append(["c": c, "ca": ca, "cd": cd])
			}
		}
	}
	var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
	for k in _order {
	    if let g = _groups[k] {
	        _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
	    }
	}
	return _tmp.map { g in ["ca_state": (g.key["state"] as! String), "cd_gender": (g.key["gender"] as! String), "cd_marital_status": (g.key["marital"] as! String), "cd_dep_count": (g.key["dep"] as! Int), "cd_dep_employed_count": (g.key["emp"] as! Int), "cd_dep_college_count": (g.key["col"] as! Int), "cnt": g.items.count] }
}())
_json(groups)
expect(_equal(groups, [Auto6(ca_state: "CA", cd_dep_college_count: 0, cd_dep_count: 1, cd_dep_employed_count: 1, cd_gender: "M", cd_marital_status: "S", cnt: 1)]))
