// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:07:17Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var item: Int
    var price: Double
    var sold_date: Int
}

struct Auto2: Equatable {
    var i_brand_id: Int
    var i_item_sk: Int
    var i_manager_id: Int
}

struct Auto3: Equatable {
    var d_date_sk: Int
    var d_moy: Int
    var d_year: Int
}

struct Auto4: Equatable {
    var brand_id: Int
    var ext_price: Double
}

var store_sales = [Auto1(item: 1, price: 10.0, sold_date: 1), Auto1(item: 2, price: 20.0, sold_date: 1), Auto1(item: 3, price: 25.0, sold_date: 1)]
var item = [Auto2(i_brand_id: 10, i_item_sk: 1, i_manager_id: 1), Auto2(i_brand_id: 20, i_item_sk: 2, i_manager_id: 1), Auto2(i_brand_id: 10, i_item_sk: 3, i_manager_id: 1)]
var date_dim = [Auto3(d_date_sk: 1, d_moy: 11, d_year: 2001)]
var grouped = { () -> [Any] in
	var _groups: [String:_Group] = [:]
	var _order: [String] = []
	for ss in store_sales {
		for i in item {
			if !(ss.item == i.i_item_sk && i.i_manager_id == 1) { continue }
			for d in date_dim {
				if !(ss.sold_date == d.d_date_sk) { continue }
				let _k = ["brand_id": i.i_brand_id]
				let _ks = _keyStr(_k)
				if _groups[_ks] == nil {
				    _groups[_ks] = _Group(_k)
				    _order.append(_ks)
				}
				_groups[_ks]!.Items.append(["ss": ss, "i": i, "d": d])
			}
		}
	}
	var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
	for k in _order {
	    if let g = _groups[k] {
	        _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
	    }
	}
	return _tmp.map { g in ["brand_id": (g.key["brand_id"] as! Int), "ext_price": _sum(g.items.map { x in x["price"]! })] }
}())
var result = grouped.map { g in (value: g, key: [-g["ext_price"]!, g["brand_id"]!]) }.sorted { $0.key < $1.key }.map { $0.value }
_json(result)
expect(_equal(result, [Auto4(brand_id: 10, ext_price: 35.0), Auto4(brand_id: 20, ext_price: 20.0)]))
