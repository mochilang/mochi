import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _concat<T>(_ a: [T], _ b: [T]) -> [T] {
  var res: [T] = []
  res.reserveCapacity(a.count + b.count)
  res.append(contentsOf: a)
  res.append(contentsOf: b)
  return res
}
func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

func test_TPCDS_Q74_simplified() {
  expect(
    result == [["customer_id": 1, "customer_first_name": "Alice", "customer_last_name": "Smith"]])
}

let customer = [
  ["c_customer_sk": 1, "c_customer_id": 1, "c_first_name": "Alice", "c_last_name": "Smith"]
]
let date_dim: [[String: Int]] = [
  ["d_date_sk": 1, "d_year": 1998], ["d_date_sk": 2, "d_year": 1999],
]
let store_sales = [
  ["ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_net_paid": 100],
  ["ss_customer_sk": 1, "ss_sold_date_sk": 2, "ss_net_paid": 110],
]
let web_sales = [
  ["ws_bill_customer_sk": 1, "ws_sold_date_sk": 1, "ws_net_paid": 40],
  ["ws_bill_customer_sk": 1, "ws_sold_date_sk": 2, "ws_net_paid": 80],
]
let year_total = _concat(
  ({
    var _res: [[String: Any]] = []
    for c in customer {
      for ss in store_sales {
        if !(c["c_customer_sk"]! == ss["ss_customer_sk"]!) { continue }
        for d in date_dim {
          if !(d["d_date_sk"]! == ss["ss_sold_date_sk"]!) { continue }
          if !(d["d_year"]! == 1998 || d["d_year"]! == 1999) { continue }
          _res.append([
            "customer_id": g.key.id, "customer_first_name": g.key.first,
            "customer_last_name": g.key.last, "year": g.key.year,
            "year_total": _sum(
              ({
                var _res: [Any] = []
                for x in g {
                  _res.append(x.ss.ss_net_paid)
                }
                var _items = _res
                return _items
              }()).map { Double($0) }), "sale_type": "s",
          ])
        }
      }
    }
    var _items = _res
    return _items
  }()),
  ({
    var _res: [[String: Any]] = []
    for c in customer {
      for ws in web_sales {
        if !(c["c_customer_sk"]! == ws["ws_bill_customer_sk"]!) { continue }
        for d in date_dim {
          if !(d["d_date_sk"]! == ws["ws_sold_date_sk"]!) { continue }
          if !(d["d_year"]! == 1998 || d["d_year"]! == 1999) { continue }
          _res.append([
            "customer_id": g.key.id, "customer_first_name": g.key.first,
            "customer_last_name": g.key.last, "year": g.key.year,
            "year_total": _sum(
              ({
                var _res: [Any] = []
                for x in g {
                  _res.append(x.ws.ws_net_paid)
                }
                var _items = _res
                return _items
              }()).map { Double($0) }), "sale_type": "w",
          ])
        }
      }
    }
    var _items = _res
    return _items
  }()))
let s_firstyear = first(
  ({
    var _res: [Any] = []
    for y in year_total {
      if !(y.sale_type == "s" && y.year == 1998) { continue }
      _res.append(y)
    }
    var _items = _res
    return _items
  }()))
let s_secyear = first(
  ({
    var _res: [Any] = []
    for y in year_total {
      if !(y.sale_type == "s" && y.year == 1999) { continue }
      _res.append(y)
    }
    var _items = _res
    return _items
  }()))
let w_firstyear = first(
  ({
    var _res: [Any] = []
    for y in year_total {
      if !(y.sale_type == "w" && y.year == 1998) { continue }
      _res.append(y)
    }
    var _items = _res
    return _items
  }()))
let w_secyear = first(
  ({
    var _res: [Any] = []
    for y in year_total {
      if !(y.sale_type == "w" && y.year == 1999) { continue }
      _res.append(y)
    }
    var _items = _res
    return _items
  }()))
let result =
  (s_firstyear.year_total > 0 && w_firstyear.year_total > 0
    && (w_secyear.year_total / w_firstyear.year_total)
      > (s_secyear.year_total / s_firstyear.year_total)
    ? [
      [
        "customer_id": s_secyear.customer_id, "customer_first_name": s_secyear.customer_first_name,
        "customer_last_name": s_secyear.customer_last_name,
      ]
    ] : [])
func main() {
  _json(result)
  test_TPCDS_Q74_simplified()
}
main()
