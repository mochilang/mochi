import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _concat<T>(_ a: [T], _ b: [T]) -> [T] {
  var res: [T] = []
  res.reserveCapacity(a.count + b.count)
  res.append(contentsOf: a)
  res.append(contentsOf: b)
  return res
}
func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func test_TPCDS_Q49_simplified() {
  expect(
    result == [
      [
        "channel": "catalog", "item": "A", "return_ratio": 0.3, "return_rank": 1,
        "currency_rank": 1,
      ],
      [
        "channel": "store", "item": "A", "return_ratio": 0.25, "return_rank": 1, "currency_rank": 1,
      ],
      ["channel": "web", "item": "A", "return_ratio": 0.2, "return_rank": 1, "currency_rank": 1],
      ["channel": "web", "item": "B", "return_ratio": 0.5, "return_rank": 2, "currency_rank": 2],
    ])
}

let web = [
  ["item": "A", "return_ratio": 0.2, "currency_ratio": 0.3, "return_rank": 1, "currency_rank": 1],
  ["item": "B", "return_ratio": 0.5, "currency_ratio": 0.6, "return_rank": 2, "currency_rank": 2],
]
let catalog = [
  ["item": "A", "return_ratio": 0.3, "currency_ratio": 0.4, "return_rank": 1, "currency_rank": 1]
]
let store = [
  ["item": "A", "return_ratio": 0.25, "currency_ratio": 0.35, "return_rank": 1, "currency_rank": 1]
]
let tmp =
  (_concat(
    _concat(
      ({
        var _res: [[String: Any]] = []
        for w in web {
          if !(w["return_rank"]! <= 10 || w["currency_rank"]! <= 10) { continue }
          _res.append([
            "channel": "web", "item": w["item"]!, "return_ratio": w["return_ratio"]!,
            "return_rank": w["return_rank"]!, "currency_rank": w["currency_rank"]!,
          ])
        }
        var _items = _res
        return _items
      }()),
      ({
        var _res: [[String: Any]] = []
        for c in catalog {
          if !(c["return_rank"]! <= 10 || c["currency_rank"]! <= 10) { continue }
          _res.append([
            "channel": "catalog", "item": c["item"]!, "return_ratio": c["return_ratio"]!,
            "return_rank": c["return_rank"]!, "currency_rank": c["currency_rank"]!,
          ])
        }
        var _items = _res
        return _items
      }())),
    ({
      var _res: [[String: Any]] = []
      for s in store {
        if !(s["return_rank"]! <= 10 || s["currency_rank"]! <= 10) { continue }
        _res.append([
          "channel": "store", "item": s["item"]!, "return_ratio": s["return_ratio"]!,
          "return_rank": s["return_rank"]!, "currency_rank": s["currency_rank"]!,
        ])
      }
      var _items = _res
      return _items
    }())))
let result =
  ({
    var _pairs: [(item: Any, key: Any)] = []
    for r in tmp {
      _pairs.append((item: r, key: [r.channel, r.return_rank, r.currency_rank, r.item]))
    }
    _pairs.sort { a, b in
      if let ai = a.key as? Int, let bi = b.key as? Int { return ai < bi }
      if let af = a.key as? Double, let bf = b.key as? Double { return af < bf }
      if let ai = a.key as? Int, let bf = b.key as? Double { return Double(ai) < bf }
      if let af = a.key as? Double, let bi = b.key as? Int { return af < Double(bi) }
      if let sa = a.key as? String, let sb = b.key as? String { return sa < sb }
      return String(describing: a.key) < String(describing: b.key)
    }
    var _items = _pairs.map { $0.item }
    return _items
  }())
func main() {
  _json(result)
  test_TPCDS_Q49_simplified()
}
main()
