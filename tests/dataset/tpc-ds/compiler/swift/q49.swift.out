// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:06:40Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
struct Auto1: Equatable {
    var currency_rank: Int
    var currency_ratio: Double
    var item: String
    var return_rank: Int
    var return_ratio: Double
}

struct Auto2: Equatable {
    var channel: String
    var currency_rank: Int
    var item: String
    var return_rank: Int
    var return_ratio: Double
}

var web = [Auto1(currency_rank: 1, currency_ratio: 0.3, item: "A", return_rank: 1, return_ratio: 0.2), Auto1(currency_rank: 2, currency_ratio: 0.6, item: "B", return_rank: 2, return_ratio: 0.5)]
var catalog = [Auto1(currency_rank: 1, currency_ratio: 0.4, item: "A", return_rank: 1, return_ratio: 0.3)]
var store = [Auto1(currency_rank: 1, currency_ratio: 0.35, item: "A", return_rank: 1, return_ratio: 0.25)]
let tmp = (concat(web.compactMap { w in w.return_rank <= 10 || w.currency_rank <= 10 ? (["channel": "web", "item": w.item, "return_ratio": w.return_ratio, "return_rank": w.return_rank, "currency_rank": w.currency_rank]) : nil }, catalog.compactMap { c in c.return_rank <= 10 || c.currency_rank <= 10 ? (["channel": "catalog", "item": c.item, "return_ratio": c.return_ratio, "return_rank": c.return_rank, "currency_rank": c.currency_rank]) : nil }, store.compactMap { s in s.return_rank <= 10 || s.currency_rank <= 10 ? (["channel": "store", "item": s.item, "return_ratio": s.return_ratio, "return_rank": s.return_rank, "currency_rank": s.currency_rank]) : nil }))
var result = tmp.map { r in (value: r, key: [r.channel, r.return_rank, r.currency_rank, r.item]) }.sorted { $0.key < $1.key }.map { $0.value }
_json(result)
expect(_equal(result, [Auto2(channel: "catalog", currency_rank: 1, item: "A", return_rank: 1, return_ratio: 0.3), Auto2(channel: "store", currency_rank: 1, item: "A", return_rank: 1, return_ratio: 0.25), Auto2(channel: "web", currency_rank: 1, item: "A", return_rank: 1, return_ratio: 0.2), Auto2(channel: "web", currency_rank: 2, item: "B", return_rank: 2, return_ratio: 0.5)]))
