import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _avg<T: BinaryInteger>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}
func _avg<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  if arr.isEmpty { return 0 }
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum / Double(arr.count)
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

struct WebSale {
  var ws_item_sk: Int
  var ws_sold_date_sk: Int
  var ws_ext_discount_amt: Double
}

func test_TPCDS_Q92_threshold() {
  expect(result == 4)
}

let web_sales = [
  ["ws_item_sk": 1, "ws_sold_date_sk": 1, "ws_ext_discount_amt": 1],
  ["ws_item_sk": 1, "ws_sold_date_sk": 1, "ws_ext_discount_amt": 1],
  ["ws_item_sk": 1, "ws_sold_date_sk": 1, "ws_ext_discount_amt": 2],
]
let item: [[String: Int]] = [["i_item_sk": 1, "i_manufact_id": 1]]
let date_dim = [["d_date_sk": 1, "d_date": "2000-01-02"]]
let sum_amt = _sum(
  ({
    var _res: [Any] = []
    for ws in web_sales {
      _res.append(ws["ws_ext_discount_amt"]!)
    }
    var _items = _res
    return _items
  }()).map { Double($0) })
let avg_amt = _avg(
  ({
    var _res: [Any] = []
    for ws in web_sales {
      _res.append(ws["ws_ext_discount_amt"]!)
    }
    var _items = _res
    return _items
  }()).map { Double($0) })
let result = (sum_amt > avg_amt * 1.3 ? sum_amt : 0)
func main() {
  _json(result)
  test_TPCDS_Q92_threshold()
}
main()
