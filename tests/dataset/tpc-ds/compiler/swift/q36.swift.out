// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:06:09Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
    var sum = 0.0
    for v in arr { sum += Double(v) }
    return sum
}
struct Auto1: Equatable {
    var ss_ext_sales_price: Double
    var ss_item_sk: Int
    var ss_net_profit: Double
    var ss_sold_date_sk: Int
    var ss_store_sk: Int
}

struct Auto2: Equatable {
    var i_category: String
    var i_class: String
    var i_item_sk: Int
}

struct Auto3: Equatable {
    var s_state: String
    var s_store_sk: Int
}

struct Auto4: Equatable {
    var d_date_sk: Int
    var d_year: Int
}

struct Auto5: Equatable {
    var gross_margin: Double
    var i_category: String
    var i_class: String
}

var store_sales = [Auto1(ss_ext_sales_price: 100.0, ss_item_sk: 1, ss_net_profit: 20.0, ss_sold_date_sk: 1, ss_store_sk: 1), Auto1(ss_ext_sales_price: 200.0, ss_item_sk: 2, ss_net_profit: 50.0, ss_sold_date_sk: 1, ss_store_sk: 1), Auto1(ss_ext_sales_price: 150.0, ss_item_sk: 3, ss_net_profit: 30.0, ss_sold_date_sk: 1, ss_store_sk: 2)]
var item = [Auto2(i_category: "Books", i_class: "C1", i_item_sk: 1), Auto2(i_category: "Books", i_class: "C2", i_item_sk: 2), Auto2(i_category: "Electronics", i_class: "C3", i_item_sk: 3)]
var store = [Auto3(s_state: "A", s_store_sk: 1), Auto3(s_state: "B", s_store_sk: 2)]
var date_dim = [Auto4(d_date_sk: 1, d_year: 2000)]
var result = { () -> [Any] in
	var _groups: [String:_Group] = [:]
	var _order: [String] = []
	for ss in store_sales {
		for d in date_dim {
			if !(ss.ss_sold_date_sk == d.d_date_sk) { continue }
			for i in item {
				if !(ss.ss_item_sk == i.i_item_sk) { continue }
				for s in store {
					if !(ss.ss_store_sk == s.s_store_sk) { continue }
					if !(d.d_year == 2000 && (s.s_state == "A" || s.s_state == "B")) { continue }
					let _k = ["category": i.i_category, "class": i.i_class]
					let _ks = _keyStr(_k)
					if _groups[_ks] == nil {
					    _groups[_ks] = _Group(_k)
					    _order.append(_ks)
					}
					_groups[_ks]!.Items.append(["ss": ss, "d": d, "i": i, "s": s])
				}
			}
		}
	}
	var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
	for k in _order {
	    if let g = _groups[k] {
	        _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
	    }
	}
	_tmp.sort { [($0.key["category"] as! String), ($0.key["class"] as! String)] < [($1.key["category"] as! String), ($1.key["class"] as! String)] }
	return _tmp.map { g in ["i_category": (g.key["category"] as! String), "i_class": (g.key["class"] as! String), "gross_margin": _sum(g.items.map { x in x["ss_net_profit"]! }) / _sum(g.items.map { x in x["ss_ext_sales_price"]! })] }
}())
_json(result)
expect(_equal(result, [Auto5(gross_margin: 0.2, i_category: "Books", i_class: "C1"), Auto5(gross_margin: 0.25, i_category: "Books", i_class: "C2"), Auto5(gross_margin: 0.2, i_category: "Electronics", i_class: "C3")]))
