import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

func test_TPCDS_Q36_simplified() {
  expect(
    result == [
      ["i_category": "Books", "i_class": "C1", "gross_margin": 0.2],
      ["i_category": "Books", "i_class": "C2", "gross_margin": 0.25],
      ["i_category": "Electronics", "i_class": "C3", "gross_margin": 0.2],
    ])
}

let store_sales = [
  [
    "ss_item_sk": 1, "ss_store_sk": 1, "ss_sold_date_sk": 1, "ss_ext_sales_price": 100,
    "ss_net_profit": 20,
  ],
  [
    "ss_item_sk": 2, "ss_store_sk": 1, "ss_sold_date_sk": 1, "ss_ext_sales_price": 200,
    "ss_net_profit": 50,
  ],
  [
    "ss_item_sk": 3, "ss_store_sk": 2, "ss_sold_date_sk": 1, "ss_ext_sales_price": 150,
    "ss_net_profit": 30,
  ],
]
let item = [
  ["i_item_sk": 1, "i_category": "Books", "i_class": "C1"],
  ["i_item_sk": 2, "i_category": "Books", "i_class": "C2"],
  ["i_item_sk": 3, "i_category": "Electronics", "i_class": "C3"],
]
let store = [["s_store_sk": 1, "s_state": "A"], ["s_store_sk": 2, "s_state": "B"]]
let date_dim: [[String: Int]] = [["d_date_sk": 1, "d_year": 2000]]
let result =
  ({
    var _pairs: [(item: [String: Any], key: Any)] = []
    for ss in store_sales {
      for d in date_dim {
        if !(ss["ss_sold_date_sk"]! == d["d_date_sk"]!) { continue }
        for i in item {
          if !(ss["ss_item_sk"]! == i["i_item_sk"]!) { continue }
          for s in store {
            if !(ss["ss_store_sk"]! == s["s_store_sk"]!) { continue }
            if !(d["d_year"]! == 2000 && (s["s_state"]! == "A" || s["s_state"]! == "B")) {
              continue
            }
            _pairs.append(
              (
                item: [
                  "i_category": g.key.category, "i_class": g.key.class,
                  "gross_margin": _sum(
                    ({
                      var _res: [Any] = []
                      for x in g {
                        _res.append(x.ss_net_profit)
                      }
                      var _items = _res
                      return _items
                    }()).map { Double($0) })
                    / _sum(
                      ({
                        var _res: [Any] = []
                        for x in g {
                          _res.append(x.ss_ext_sales_price)
                        }
                        var _items = _res
                        return _items
                      }()).map { Double($0) }),
                ], key: [g.key.category, g.key.class]
              ))
          }
        }
      }
    }
    _pairs.sort { a, b in
      if let ai = a.key as? Int, let bi = b.key as? Int { return ai < bi }
      if let af = a.key as? Double, let bf = b.key as? Double { return af < bf }
      if let ai = a.key as? Int, let bf = b.key as? Double { return Double(ai) < bf }
      if let af = a.key as? Double, let bi = b.key as? Int { return af < Double(bi) }
      if let sa = a.key as? String, let sb = b.key as? String { return sa < sb }
      return String(describing: a.key) < String(describing: b.key)
    }
    var _items = _pairs.map { $0.item }
    return _items
  }())
func main() {
  _json(result)
  test_TPCDS_Q36_simplified()
}
main()
