// Generated by Mochi compiler v0.10.25 on 2025-07-15T05:06:10Z
import Foundation

func _json(_ v: Any) {
    func _sort(_ x: Any) -> Any {
        if let a = x as? [Any] { return a.map { _sort($0) } }
        if let m = x as? [String:Any] {
            var out: [String:Any] = [:]
            for k in m.keys.sorted() { out[k] = _sort(m[k]!) }
            return out
        }
        return x
    }
    let obj = _sort(v)
    if JSONSerialization.isValidJSONObject(obj),
       let data = try? JSONSerialization.data(withJSONObject: obj, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        print(s)
    } else {
        print(obj)
    }
}
func expect(_ cond: Bool) {
    if !cond { fatalError("expect failed") }
}
func _structMap(_ v: Any) -> [String:Any]? {
    let mirror = Mirror(reflecting: v)
    if mirror.displayStyle == .struct || mirror.displayStyle == .class {
        var m: [String:Any] = [:]
        for child in mirror.children {
            if let k = child.label { m[k] = child.value }
        }
        return m
    }
    return nil
}
func _equal(_ a: Any, _ b: Any) -> Bool {
    if let am = _structMap(a), let bm = _structMap(b) {
        return _equal(am, bm)
    }
    if let am = _structMap(a), let bd = b as? [String: Any] {
        return _equal(am, bd)
    }
    if let ad = a as? [String: Any], let bm = _structMap(b) {
        return _equal(ad, bm)
    }
    switch (a, b) {
    case let (x as [Any], y as [Any]):
        if x.count != y.count { return false }
        for i in 0..<x.count {
            if !_equal(x[i], y[i]) { return false }
        }
        return true
    case let (x as [String: Any], y as [String: Any]):
        if x.count != y.count { return false }
        for (k, av) in x {
            guard let bv = y[k] else { return false }
            if !_equal(av, bv) { return false }
        }
        return true
    case let (ai as Double, bi as Int):
        return ai == Double(bi)
    case let (ai as Int, bi as Double):
        return Double(ai) == bi
    case let (ai as Double, bi as Double):
        return ai == bi
    case let (ai as Int, bi as Int):
        return ai == bi
    case let (sa as String, sb as String):
        return sa == sb
    case let (ab as Bool, bb as Bool):
        return ab == bb
    default:
        return false
    }
}
class _Group {
    var key: Any
    var Items: [Any] = []
    init(_ k: Any) { self.key = k }
}


func _keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
       let s = String(data: data, encoding: .utf8) {
        return s
    }
    return String(describing: v)
}
struct Auto1: Equatable {
    var i_current_price: Double
    var i_item_desc: String
    var i_item_id: String
    var i_item_sk: Int
    var i_manufact_id: Int
}

struct Auto2: Equatable {
    var inv_date_sk: Int
    var inv_item_sk: Int
    var inv_quantity_on_hand: Int
    var inv_warehouse_sk: Int
}

struct Auto3: Equatable {
    var d_date: String
    var d_date_sk: Int
}

struct Auto4: Equatable {
    var cs_item_sk: Int
    var cs_sold_date_sk: Int
}

struct Auto5: Equatable {
    var i_current_price: Double
    var i_item_desc: String
    var i_item_id: String
}

var item = [Auto1(i_current_price: 30.0, i_item_desc: "Item1", i_item_id: "I1", i_item_sk: 1, i_manufact_id: 800), Auto1(i_current_price: 60.0, i_item_desc: "Item2", i_item_id: "I2", i_item_sk: 2, i_manufact_id: 801)]
var inventory = [Auto2(inv_date_sk: 1, inv_item_sk: 1, inv_quantity_on_hand: 200, inv_warehouse_sk: 1), Auto2(inv_date_sk: 1, inv_item_sk: 2, inv_quantity_on_hand: 300, inv_warehouse_sk: 1)]
var date_dim = [Auto3(d_date: "2000-01-15", d_date_sk: 1)]
var catalog_sales = [Auto4(cs_item_sk: 1, cs_sold_date_sk: 1)]
var result = { () -> [Any] in
	var _groups: [String:_Group] = [:]
	var _order: [String] = []
	for i in item {
		for inv in inventory {
			if !(i.i_item_sk == inv.inv_item_sk) { continue }
			for d in date_dim {
				if !(inv.inv_date_sk == d.d_date_sk) { continue }
				for cs in catalog_sales {
					if !(cs.cs_item_sk == i.i_item_sk) { continue }
					if !(i.i_current_price >= 20 && i.i_current_price <= 50 && i.i_manufact_id >= 800 && i.i_manufact_id <= 803 && inv.inv_quantity_on_hand >= 100 && inv.inv_quantity_on_hand <= 500) { continue }
					let _k = ["id": i.i_item_id, "desc": i.i_item_desc, "price": i.i_current_price]
					let _ks = _keyStr(_k)
					if _groups[_ks] == nil {
					    _groups[_ks] = _Group(_k)
					    _order.append(_ks)
					}
					_groups[_ks]!.Items.append(["i": i, "inv": inv, "d": d, "cs": cs])
				}
			}
		}
	}
	var _tmp: [(key: [String:Any], items: [[String:Any]])] = []
	for k in _order {
	    if let g = _groups[k] {
	        _tmp.append((key: g.key as! [String:Any], items: g.Items.map { $0 as! [String:Any] }))
	    }
	}
	_tmp.sort { ($0.key["id"] as! String) < ($1.key["id"] as! String) }
	return _tmp.map { g in ["i_item_id": (g.key["id"] as! String), "i_item_desc": (g.key["desc"] as! String), "i_current_price": (g.key["price"] as! Double)] }
}())
_json(result)
expect(_equal(result, [Auto5(i_current_price: 30.0, i_item_desc: "Item1", i_item_id: "I1")]))
