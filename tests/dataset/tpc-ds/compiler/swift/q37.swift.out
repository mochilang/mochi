import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func test_TPCDS_Q37_simplified() {
  expect(result == [["i_item_id": "I1", "i_item_desc": "Item1", "i_current_price": 30]])
}

let item = [
  [
    "i_item_sk": 1, "i_item_id": "I1", "i_item_desc": "Item1", "i_current_price": 30,
    "i_manufact_id": 800,
  ],
  [
    "i_item_sk": 2, "i_item_id": "I2", "i_item_desc": "Item2", "i_current_price": 60,
    "i_manufact_id": 801,
  ],
]
let inventory: [[String: Int]] = [
  ["inv_item_sk": 1, "inv_warehouse_sk": 1, "inv_date_sk": 1, "inv_quantity_on_hand": 200],
  ["inv_item_sk": 2, "inv_warehouse_sk": 1, "inv_date_sk": 1, "inv_quantity_on_hand": 300],
]
let date_dim = [["d_date_sk": 1, "d_date": "2000-01-15"]]
let catalog_sales: [[String: Int]] = [["cs_item_sk": 1, "cs_sold_date_sk": 1]]
let result =
  ({
    var _pairs: [(item: [String: Any], key: Any)] = []
    for i in item {
      for inv in inventory {
        if !(i["i_item_sk"]! == inv["inv_item_sk"]!) { continue }
        if !(i["i_current_price"]! >= 20 && i["i_current_price"]! <= 50
          && i["i_manufact_id"]! >= 800 && i["i_manufact_id"]! <= 803
          && inv["inv_quantity_on_hand"]! >= 100 && inv["inv_quantity_on_hand"]! <= 500)
        {
          continue
        }
        for d in date_dim {
          if !(inv["inv_date_sk"]! == d["d_date_sk"]!) { continue }
          for cs in catalog_sales {
            if !(cs["cs_item_sk"]! == i["i_item_sk"]!) { continue }
            _pairs.append(
              (
                item: [
                  "i_item_id": g.key.id, "i_item_desc": g.key.desc, "i_current_price": g.key.price,
                ], key: g.key.id
              ))
          }
        }
      }
    }
    _pairs.sort { a, b in
      if let ai = a.key as? Int, let bi = b.key as? Int { return ai < bi }
      if let af = a.key as? Double, let bf = b.key as? Double { return af < bf }
      if let ai = a.key as? Int, let bf = b.key as? Double { return Double(ai) < bf }
      if let af = a.key as? Double, let bi = b.key as? Int { return af < Double(bi) }
      if let sa = a.key as? String, let sb = b.key as? String { return sa < sb }
      return String(describing: a.key) < String(describing: b.key)
    }
    var _items = _pairs.map { $0.item }
    return _items
  }())
func main() {
  _json(result)
  test_TPCDS_Q37_simplified()
}
main()
