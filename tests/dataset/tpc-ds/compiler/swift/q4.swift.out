import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

func test_TPCDS_Q4_result() {
  expect(
    result == [
      [
        "customer_id": "C1", "customer_first_name": "Alice", "customer_last_name": "A",
        "customer_login": "alice",
      ]
    ])
}

let customer = [
  [
    "c_customer_sk": 1, "c_customer_id": "C1", "c_first_name": "Alice", "c_last_name": "A",
    "c_login": "alice",
  ]
]
let store_sales = [
  [
    "ss_customer_sk": 1, "ss_sold_date_sk": 1, "ss_ext_list_price": 10, "ss_ext_wholesale_cost": 5,
    "ss_ext_discount_amt": 0, "ss_ext_sales_price": 10,
  ],
  [
    "ss_customer_sk": 1, "ss_sold_date_sk": 2, "ss_ext_list_price": 20, "ss_ext_wholesale_cost": 5,
    "ss_ext_discount_amt": 0, "ss_ext_sales_price": 20,
  ],
]
let catalog_sales = [
  [
    "cs_bill_customer_sk": 1, "cs_sold_date_sk": 1, "cs_ext_list_price": 10,
    "cs_ext_wholesale_cost": 2, "cs_ext_discount_amt": 0, "cs_ext_sales_price": 10,
  ],
  [
    "cs_bill_customer_sk": 1, "cs_sold_date_sk": 2, "cs_ext_list_price": 30,
    "cs_ext_wholesale_cost": 2, "cs_ext_discount_amt": 0, "cs_ext_sales_price": 30,
  ],
]
let web_sales = [
  [
    "ws_bill_customer_sk": 1, "ws_sold_date_sk": 1, "ws_ext_list_price": 10,
    "ws_ext_wholesale_cost": 5, "ws_ext_discount_amt": 0, "ws_ext_sales_price": 10,
  ],
  [
    "ws_bill_customer_sk": 1, "ws_sold_date_sk": 2, "ws_ext_list_price": 12,
    "ws_ext_wholesale_cost": 5, "ws_ext_discount_amt": 0, "ws_ext_sales_price": 12,
  ],
]
let date_dim: [[String: Int]] = [
  ["d_date_sk": 1, "d_year": 2001], ["d_date_sk": 2, "d_year": 2002],
]
let year_total =
  (({
    var _res: [[String: Any]] = []
    for c in customer {
      for s in store_sales {
        if !(c["c_customer_sk"]! == s["ss_customer_sk"]!) { continue }
        for d in date_dim {
          if !(s["ss_sold_date_sk"]! == d["d_date_sk"]!) { continue }
          _res.append([
            "customer_id": g.key.id, "customer_first_name": g.key.first,
            "customer_last_name": g.key.last, "customer_login": g.key.login, "dyear": g.key.year,
            "year_total": _sum(
              ({
                var _res: [Any] = []
                for x in g {
                  _res.append(
                    ((x.ss_ext_list_price - x.ss_ext_wholesale_cost - x.ss_ext_discount_amt)
                      + x.ss_ext_sales_price) / 2)
                }
                var _items = _res
                return _items
              }()).map { Double($0) }), "sale_type": "s",
          ])
        }
      }
    }
    var _items = _res
    return _items
  }()))
  + (({
    var _res: [[String: Any]] = []
    for c in customer {
      for cs in catalog_sales {
        if !(c["c_customer_sk"]! == cs["cs_bill_customer_sk"]!) { continue }
        for d in date_dim {
          if !(cs["cs_sold_date_sk"]! == d["d_date_sk"]!) { continue }
          _res.append([
            "customer_id": g.key.id, "customer_first_name": g.key.first,
            "customer_last_name": g.key.last, "customer_login": g.key.login, "dyear": g.key.year,
            "year_total": _sum(
              ({
                var _res: [Any] = []
                for x in g {
                  _res.append(
                    ((x.cs_ext_list_price - x.cs_ext_wholesale_cost - x.cs_ext_discount_amt)
                      + x.cs_ext_sales_price) / 2)
                }
                var _items = _res
                return _items
              }()).map { Double($0) }), "sale_type": "c",
          ])
        }
      }
    }
    var _items = _res
    return _items
  }()))
  + (({
    var _res: [[String: Any]] = []
    for c in customer {
      for ws in web_sales {
        if !(c["c_customer_sk"]! == ws["ws_bill_customer_sk"]!) { continue }
        for d in date_dim {
          if !(ws["ws_sold_date_sk"]! == d["d_date_sk"]!) { continue }
          _res.append([
            "customer_id": g.key.id, "customer_first_name": g.key.first,
            "customer_last_name": g.key.last, "customer_login": g.key.login, "dyear": g.key.year,
            "year_total": _sum(
              ({
                var _res: [Any] = []
                for x in g {
                  _res.append(
                    ((x.ws_ext_list_price - x.ws_ext_wholesale_cost - x.ws_ext_discount_amt)
                      + x.ws_ext_sales_price) / 2)
                }
                var _items = _res
                return _items
              }()).map { Double($0) }), "sale_type": "w",
          ])
        }
      }
    }
    var _items = _res
    return _items
  }()))
let result =
  ({
    var _pairs: [(item: [String: Any], key: Any)] = []
    for s1 in year_total {
      for s2 in year_total {
        if !(s2["customer_id"]! == s1["customer_id"]!) { continue }
        for c1 in year_total {
          if !(c1["customer_id"]! == s1["customer_id"]!) { continue }
          for c2 in year_total {
            if !(c2["customer_id"]! == s1["customer_id"]!) { continue }
            for w1 in year_total {
              if !(w1["customer_id"]! == s1["customer_id"]!) { continue }
              for w2 in year_total {
                if !(w2["customer_id"]! == s1["customer_id"]!) { continue }
                if !(s1["sale_type"]! == "s" && c1["sale_type"]! == "c" && w1["sale_type"]! == "w"
                  && s2["sale_type"]! == "s" && c2["sale_type"]! == "c" && w2["sale_type"]! == "w"
                  && s1["dyear"]! == 2001 && s2["dyear"]! == 2002 && c1["dyear"]! == 2001
                  && c2["dyear"]! == 2002 && w1["dyear"]! == 2001 && w2["dyear"]! == 2002
                  && s1["year_total"]! > 0 && c1["year_total"]! > 0 && w1["year_total"]! > 0
                  && ((c1["year_total"]! > 0 ? c2["year_total"]! / c1["year_total"]! : nil))
                    > ((s1["year_total"]! > 0 ? s2["year_total"]! / s1["year_total"]! : nil))
                  && ((c1["year_total"]! > 0 ? c2["year_total"]! / c1["year_total"]! : nil))
                    > ((w1["year_total"]! > 0 ? w2["year_total"]! / w1["year_total"]! : nil)))
                {
                  continue
                }
                _pairs.append(
                  (
                    item: [
                      "customer_id": s2["customer_id"]!,
                      "customer_first_name": s2["customer_first_name"]!,
                      "customer_last_name": s2["customer_last_name"]!,
                      "customer_login": s2["customer_login"]!,
                    ],
                    key: [
                      s2["customer_id"]!, s2["customer_first_name"]!, s2["customer_last_name"]!,
                      s2["customer_login"]!,
                    ]
                  ))
              }
            }
          }
        }
      }
    }
    _pairs.sort { a, b in
      if let ai = a.key as? Int, let bi = b.key as? Int { return ai < bi }
      if let af = a.key as? Double, let bf = b.key as? Double { return af < bf }
      if let ai = a.key as? Int, let bf = b.key as? Double { return Double(ai) < bf }
      if let af = a.key as? Double, let bi = b.key as? Int { return af < Double(bi) }
      if let sa = a.key as? String, let sb = b.key as? String { return sa < sb }
      return String(describing: a.key) < String(describing: b.key)
    }
    var _items = _pairs.map { $0.item }
    return _items
  }())
func main() {
  _json(result)
  test_TPCDS_Q4_result()
}
main()
