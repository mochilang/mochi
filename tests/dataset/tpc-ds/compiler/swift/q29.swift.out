import Foundation

func expect(_ cond: Bool) {
  if !cond { fatalError("expect failed") }
}

class _Group {
  var key: Any
  var Items: [Any] = []
  init(_ k: Any) { self.key = k }
}

func _group_by(_ src: [Any], _ keyfn: (Any) -> Any) -> [_Group] {
  func keyStr(_ v: Any) -> String {
    if let data = try? JSONSerialization.data(withJSONObject: v, options: [.sortedKeys]),
      let s = String(data: data, encoding: .utf8)
    {
      return s
    }
    return String(describing: v)
  }
  var groups: [String: _Group] = [:]
  var order: [String] = []
  for it in src {
    let key = keyfn(it)
    let ks = keyStr(key)
    if groups[ks] == nil {
      groups[ks] = _Group(key)
      order.append(ks)
    }
    groups[ks]!.Items.append(it)
  }
  return order.compactMap { groups[$0] }
}

func _json(_ v: Any) {
  if let d = try? JSONSerialization.data(withJSONObject: v, options: []),
    let s = String(data: d, encoding: .utf8)
  {
    print(s)
  }
}

func _sum<T: BinaryInteger>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}
func _sum<T: BinaryFloatingPoint>(_ arr: [T]) -> Double {
  var sum = 0.0
  for v in arr { sum += Double(v) }
  return sum
}

struct StoreSale {
  var ss_sold_date_sk: Int
  var ss_item_sk: Int
  var ss_store_sk: Int
  var ss_customer_sk: Int
  var ss_quantity: Int
  var ss_ticket_number: Int
}

struct StoreReturn {
  var sr_returned_date_sk: Int
  var sr_item_sk: Int
  var sr_customer_sk: Int
  var sr_ticket_number: Int
  var sr_return_quantity: Int
}

struct CatalogSale {
  var cs_sold_date_sk: Int
  var cs_item_sk: Int
  var cs_bill_customer_sk: Int
  var cs_quantity: Int
}

struct DateDim {
  var d_date_sk: Int
  var d_moy: Int
  var d_year: Int
}

struct Store {
  var s_store_sk: Int
  var s_store_id: String
  var s_store_name: String
}

struct Item {
  var i_item_sk: Int
  var i_item_id: String
  var i_item_desc: String
}

func test_TPCDS_Q29_quantity_summary() {
  expect(
    result == [
      [
        "i_item_id": "ITEM1", "i_item_desc": "Desc1", "s_store_id": "S1", "s_store_name": "Store1",
        "store_sales_quantity": 10, "store_returns_quantity": 2, "catalog_sales_quantity": 5,
      ]
    ])
}

let store_sales: [[String: Int]] = [
  [
    "ss_sold_date_sk": 1, "ss_item_sk": 1, "ss_store_sk": 1, "ss_customer_sk": 1, "ss_quantity": 10,
    "ss_ticket_number": 1,
  ]
]
let store_returns: [[String: Int]] = [
  [
    "sr_returned_date_sk": 2, "sr_item_sk": 1, "sr_customer_sk": 1, "sr_ticket_number": 1,
    "sr_return_quantity": 2,
  ]
]
let catalog_sales: [[String: Int]] = [
  ["cs_sold_date_sk": 3, "cs_item_sk": 1, "cs_bill_customer_sk": 1, "cs_quantity": 5]
]
let date_dim: [[String: Int]] = [
  ["d_date_sk": 1, "d_moy": 4, "d_year": 1999], ["d_date_sk": 2, "d_moy": 5, "d_year": 1999],
  ["d_date_sk": 3, "d_moy": 5, "d_year": 2000],
]
let store = [["s_store_sk": 1, "s_store_id": "S1", "s_store_name": "Store1"]]
let item = [["i_item_sk": 1, "i_item_id": "ITEM1", "i_item_desc": "Desc1"]]
let base: [[String: Int]] =
  ({
    var _res: [[String: Any]] = []
    for ss in store_sales {
      for sr in store_returns {
        if !(ss["ss_ticket_number"]! == sr["sr_ticket_number"]!
          && ss["ss_item_sk"]! == sr["sr_item_sk"]!)
        {
          continue
        }
        for cs in catalog_sales {
          if !(sr["sr_customer_sk"]! == cs["cs_bill_customer_sk"]!
            && sr["sr_item_sk"]! == cs["cs_item_sk"]!)
          {
            continue
          }
          for d1 in date_dim {
            if !(d1["d_date_sk"]! == ss["ss_sold_date_sk"]!) { continue }
            for d2 in date_dim {
              if !(d2["d_date_sk"]! == sr["sr_returned_date_sk"]!) { continue }
              for d3 in date_dim {
                if !(d3["d_date_sk"]! == cs["cs_sold_date_sk"]!) { continue }
                if !([1999, 2000, 2001].contains(
                  d1["d_moy"]! == 4 && d1["d_year"]! == 1999 && d2["d_moy"]! >= 4
                    && d2["d_moy"]! <= 7 && d3["d_year"]!))
                {
                  continue
                }
                for s in store {
                  if !(s["s_store_sk"]! == ss["ss_store_sk"]!) { continue }
                  for i in item {
                    if !(i["i_item_sk"]! == ss["ss_item_sk"]!) { continue }
                    _res.append([
                      "ss_quantity": ss["ss_quantity"]!,
                      "sr_return_quantity": sr["sr_return_quantity"]!,
                      "cs_quantity": cs["cs_quantity"]!, "i_item_id": i["i_item_id"]!,
                      "i_item_desc": i["i_item_desc"]!, "s_store_id": s["s_store_id"]!,
                      "s_store_name": s["s_store_name"]!,
                    ])
                  }
                }
              }
            }
          }
        }
      }
    }
    var _items = _res
    return _items
  }())
let result = _group_by(
  base.map { $0 as Any },
  { b in
    [
      "item_id": b["i_item_id"]!, "item_desc": b["i_item_desc"]!, "s_store_id": b["s_store_id"]!,
      "s_store_name": b["s_store_name"]!,
    ]
  }
).map { g in
  [
    "i_item_id": g.key.item_id, "i_item_desc": g.key.item_desc, "s_store_id": g.key.s_store_id,
    "s_store_name": g.key.s_store_name,
    "store_sales_quantity": _sum(
      ({
        var _res: [Any] = []
        for x in g {
          _res.append(x.ss_quantity)
        }
        var _items = _res
        return _items
      }()).map { Double($0) }),
    "store_returns_quantity": _sum(
      ({
        var _res: [Any] = []
        for x in g {
          _res.append(x.sr_return_quantity)
        }
        var _items = _res
        return _items
      }()).map { Double($0) }),
    "catalog_sales_quantity": _sum(
      ({
        var _res: [Any] = []
        for x in g {
          _res.append(x.cs_quantity)
        }
        var _items = _res
        return _items
      }()).map { Double($0) }),
  ]
}
func main() {
  _json(result)
  test_TPCDS_Q29_quantity_summary()
}
main()
