#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  int len;
  int *data;
} list_int;
static list_int list_int_create(int len) {
  list_int l;
  l.len = len;
  l.data = (int *)malloc(sizeof(int) * len);
  return l;
}
typedef struct {
  int len;
  double *data;
} list_float;
static list_float list_float_create(int len) {
  list_float l;
  l.len = len;
  l.data = (double *)malloc(sizeof(double) * len);
  return l;
}
typedef struct {
  int len;
  char **data;
} list_string;
static list_string list_string_create(int len) {
  list_string l;
  l.len = len;
  l.data = (char **)malloc(sizeof(char *) * len);
  return l;
}
typedef struct {
  int len;
  list_int *data;
} list_list_int;
static list_list_int list_list_int_create(int len) {
  list_list_int l;
  l.len = len;
  l.data = (list_int *)malloc(sizeof(list_int) * len);
  return l;
}
typedef struct {
  int key;
  int value;
} map_int_bool_item;
static map_int_bool_item *map_int_bool_item_new(int key, int value) {
  map_int_bool_item *it =
      (map_int_bool_item *)malloc(sizeof(map_int_bool_item));
  it->key = key;
  it->value = value;
  return it;
}
typedef struct {
  int len;
  int cap;
  map_int_bool_item **data;
} map_int_bool;
static map_int_bool map_int_bool_create(int cap) {
  map_int_bool m;
  m.len = 0;
  m.cap = cap;
  m.data = cap ? (map_int_bool_item **)malloc(sizeof(map_int_bool_item *) * cap)
               : NULL;
  return m;
}
static void map_int_bool_put(map_int_bool *m, int key, int value) {
  for (int i = 0; i < m->len; i++)
    if (m->data[i]->key == key) {
      m->data[i]->value = value;
      return;
    }
  if (m->len >= m->cap) {
    m->cap = m->cap ? m->cap * 2 : 4;
    m->data = (map_int_bool_item **)realloc(
        m->data, sizeof(map_int_bool_item *) * m->cap);
  }
  m->data[m->len++] = map_int_bool_item_new(key, value);
}
static int map_int_bool_contains(map_int_bool m, int key) {
  for (int i = 0; i < m.len; i++)
    if (m.data[i]->key == key)
      return 1;
  return 0;
}
static void _json_int(int v) { printf("%d", v); }
static void _json_float(double v) { printf("%g", v); }
static void _json_string(char *s) { printf("\"%s\"", s); }
static void _json_list_int(list_int v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_int(v.data[i]);
  }
  printf("]");
}
static void _json_list_float(list_float v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_float(v.data[i]);
  }
  printf("]");
}
static void _json_list_string(list_string v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_string(v.data[i]);
  }
  printf("]");
}
static void _json_list_list_int(list_list_int v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_list_int(v.data[i]);
  }
  printf("]");
}
typedef struct StoreSale StoreSale;
typedef struct Store Store;
typedef struct CustomerDemographics CustomerDemographics;
typedef struct HouseholdDemographics HouseholdDemographics;
typedef struct CustomerAddress CustomerAddress;
typedef struct DateDim DateDim;

typedef struct {
  int ss_store_sk;
  int ss_sold_date_sk;
  int ss_hdemo_sk;
  int ss_cdemo_sk;
  int ss_addr_sk;
  double ss_sales_price;
  double ss_net_profit;
  int ss_quantity;
  double ss_ext_sales_price;
  double ss_ext_wholesale_cost;
} StoreSale;

typedef struct {
  int s_store_sk;
  char *s_state;
} Store;

typedef struct {
  int cd_demo_sk;
  char *cd_marital_status;
  char *cd_education_status;
} CustomerDemographics;

typedef struct {
  int hd_demo_sk;
  int hd_dep_count;
} HouseholdDemographics;

typedef struct {
  int ca_address_sk;
  char *ca_country;
  char *ca_state;
} CustomerAddress;

typedef struct {
  int d_date_sk;
  int d_year;
} DateDim;

static void test_TPCDS_Q13_averages() {
  list_int _t1 = list_int_create(1);
  map_int_bool _t2 = map_int_bool_create(4);
  map_int_bool_put(&_t2, avg_ss_quantity, 10.0);
  map_int_bool_put(&_t2, avg_ss_ext_sales_price, 100.0);
  map_int_bool_put(&_t2, avg_ss_ext_wholesale_cost, 50.0);
  map_int_bool_put(&_t2, sum_ss_ext_wholesale_cost, 50.0);
  _t1.data[0] = _t2;
  if (!((result == _t1))) {
    fprintf(stderr, "expect failed\n");
    exit(1);
  }
}

int main() {
  typedef struct {
    int ss_store_sk;
    int ss_sold_date_sk;
    int ss_hdemo_sk;
    int ss_cdemo_sk;
    int ss_addr_sk;
    double ss_sales_price;
    double ss_net_profit;
    int ss_quantity;
    double ss_ext_sales_price;
    double ss_ext_wholesale_cost;
  } store_salesItem;
  typedef struct {
    int len;
    store_salesItem *data;
  } list_store_salesItem;
  static list_store_salesItem list_store_salesItem_create(int len) {
    list_store_salesItem l;
    l.len = len;
    l.data = (store_salesItem *)malloc(sizeof(store_salesItem) * len);
    return l;
  }
  list_store_salesItem _t3 = list_store_salesItem_create(1);
  _t3.data[0] = (store_salesItem){.ss_store_sk = 1,
                                  .ss_sold_date_sk = 1,
                                  .ss_hdemo_sk = 1,
                                  .ss_cdemo_sk = 1,
                                  .ss_addr_sk = 1,
                                  .ss_sales_price = 120.0,
                                  .ss_net_profit = 150.0,
                                  .ss_quantity = 10,
                                  .ss_ext_sales_price = 100.0,
                                  .ss_ext_wholesale_cost = 50.0};
  int store_sales = _t3;
  typedef struct {
    int s_store_sk;
    char *s_state;
  } storeItem;
  typedef struct {
    int len;
    storeItem *data;
  } list_storeItem;
  static list_storeItem list_storeItem_create(int len) {
    list_storeItem l;
    l.len = len;
    l.data = (storeItem *)malloc(sizeof(storeItem) * len);
    return l;
  }
  list_storeItem _t4 = list_storeItem_create(1);
  _t4.data[0] = (storeItem){.s_store_sk = 1, .s_state = "CA"};
  int store = _t4;
  typedef struct {
    int cd_demo_sk;
    char *cd_marital_status;
    char *cd_education_status;
  } customer_demographicsItem;
  typedef struct {
    int len;
    customer_demographicsItem *data;
  } list_customer_demographicsItem;
  static list_customer_demographicsItem list_customer_demographicsItem_create(
      int len) {
    list_customer_demographicsItem l;
    l.len = len;
    l.data = (customer_demographicsItem *)malloc(
        sizeof(customer_demographicsItem) * len);
    return l;
  }
  list_customer_demographicsItem _t5 = list_customer_demographicsItem_create(1);
  _t5.data[0] = (customer_demographicsItem){
      .cd_demo_sk = 1, .cd_marital_status = "M1", .cd_education_status = "ES1"};
  int customer_demographics = _t5;
  typedef struct {
    int hd_demo_sk;
    int hd_dep_count;
  } household_demographicsItem;
  typedef struct {
    int len;
    household_demographicsItem *data;
  } list_household_demographicsItem;
  static list_household_demographicsItem list_household_demographicsItem_create(
      int len) {
    list_household_demographicsItem l;
    l.len = len;
    l.data = (household_demographicsItem *)malloc(
        sizeof(household_demographicsItem) * len);
    return l;
  }
  list_household_demographicsItem _t6 =
      list_household_demographicsItem_create(1);
  _t6.data[0] =
      (household_demographicsItem){.hd_demo_sk = 1, .hd_dep_count = 3};
  int household_demographics = _t6;
  typedef struct {
    int ca_address_sk;
    char *ca_country;
    char *ca_state;
  } customer_addressItem;
  typedef struct {
    int len;
    customer_addressItem *data;
  } list_customer_addressItem;
  static list_customer_addressItem list_customer_addressItem_create(int len) {
    list_customer_addressItem l;
    l.len = len;
    l.data = (customer_addressItem *)malloc(sizeof(customer_addressItem) * len);
    return l;
  }
  list_customer_addressItem _t7 = list_customer_addressItem_create(1);
  _t7.data[0] = (customer_addressItem){
      .ca_address_sk = 1, .ca_country = "United States", .ca_state = "CA"};
  int customer_address = _t7;
  typedef struct {
    int d_date_sk;
    int d_year;
  } date_dimItem;
  typedef struct {
    int len;
    date_dimItem *data;
  } list_date_dimItem;
  static list_date_dimItem list_date_dimItem_create(int len) {
    list_date_dimItem l;
    l.len = len;
    l.data = (date_dimItem *)malloc(sizeof(date_dimItem) * len);
    return l;
  }
  list_date_dimItem _t8 = list_date_dimItem_create(1);
  _t8.data[0] = (date_dimItem){.d_date_sk = 1, .d_year = 2001};
  int date_dim = _t8;
  int filtered = 0;
  list_int result = 0;
  _json_int(result);
  test_TPCDS_Q13_averages();
  return 0;
}
