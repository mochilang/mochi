#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  int len;
  int *data;
} list_int;
static list_int list_int_create(int len) {
  list_int l;
  l.len = len;
  l.data = (int *)malloc(sizeof(int) * len);
  return l;
}
typedef struct {
  int len;
  double *data;
} list_float;
static list_float list_float_create(int len) {
  list_float l;
  l.len = len;
  l.data = (double *)malloc(sizeof(double) * len);
  return l;
}
typedef struct {
  int len;
  char **data;
} list_string;
static list_string list_string_create(int len) {
  list_string l;
  l.len = len;
  l.data = (char **)malloc(sizeof(char *) * len);
  return l;
}
typedef struct {
  int len;
  list_int *data;
} list_list_int;
static list_list_int list_list_int_create(int len) {
  list_list_int l;
  l.len = len;
  l.data = (list_int *)malloc(sizeof(list_int) * len);
  return l;
}
typedef struct {
  int key;
  int value;
} map_int_bool_item;
static map_int_bool_item *map_int_bool_item_new(int key, int value) {
  map_int_bool_item *it =
      (map_int_bool_item *)malloc(sizeof(map_int_bool_item));
  it->key = key;
  it->value = value;
  return it;
}
typedef struct {
  int len;
  int cap;
  map_int_bool_item **data;
} map_int_bool;
static map_int_bool map_int_bool_create(int cap) {
  map_int_bool m;
  m.len = 0;
  m.cap = cap;
  m.data = cap ? (map_int_bool_item **)malloc(sizeof(map_int_bool_item *) * cap)
               : NULL;
  return m;
}
static void map_int_bool_put(map_int_bool *m, int key, int value) {
  for (int i = 0; i < m->len; i++)
    if (m->data[i]->key == key) {
      m->data[i]->value = value;
      return;
    }
  if (m->len >= m->cap) {
    m->cap = m->cap ? m->cap * 2 : 4;
    m->data = (map_int_bool_item **)realloc(
        m->data, sizeof(map_int_bool_item *) * m->cap);
  }
  m->data[m->len++] = map_int_bool_item_new(key, value);
}
static int map_int_bool_contains(map_int_bool m, int key) {
  for (int i = 0; i < m.len; i++)
    if (m.data[i]->key == key)
      return 1;
  return 0;
}
static void _json_int(int v) { printf("%d", v); }
static void _json_float(double v) { printf("%g", v); }
static void _json_string(char *s) { printf("\"%s\"", s); }
static void _json_list_int(list_int v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_int(v.data[i]);
  }
  printf("]");
}
static void _json_list_float(list_float v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_float(v.data[i]);
  }
  printf("]");
}
static void _json_list_string(list_string v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_string(v.data[i]);
  }
  printf("]");
}
static void _json_list_list_int(list_list_int v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_list_int(v.data[i]);
  }
  printf("]");
}
typedef struct CatalogSale CatalogSale;
typedef struct DateDim DateDim;
typedef struct CustomerAddress CustomerAddress;
typedef struct CallCenter CallCenter;
typedef struct CatalogReturn CatalogReturn;

typedef struct {
  int cs_order_number;
  int cs_ship_date_sk;
  int cs_ship_addr_sk;
  int cs_call_center_sk;
  int cs_warehouse_sk;
  double cs_ext_ship_cost;
  double cs_net_profit;
} CatalogSale;

typedef struct {
  int d_date_sk;
  char *d_date;
} DateDim;

typedef struct {
  int ca_address_sk;
  char *ca_state;
} CustomerAddress;

typedef struct {
  int cc_call_center_sk;
  char *cc_county;
} CallCenter;

typedef struct {
  int cr_order_number;
} CatalogReturn;

list_int distinct(list_int xs) {
  list_int out = _t1;
  for (int _t2 = 0; _t2 < xs.len; _t2++) {
    int x = xs.data[_t2];
    if ((!contains(out, x))) {
      out = append(out, x);
    }
  }
  return out;
}

static void test_TPCDS_Q16_shipping() {
  list_int _t3 = list_int_create(1);
  map_int_bool _t4 = map_int_bool_create(3);
  map_int_bool_put(&_t4, order_count, 1);
  map_int_bool_put(&_t4, total_shipping_cost, 5.0);
  map_int_bool_put(&_t4, total_net_profit, 20.0);
  _t3.data[0] = _t4;
  if (!((filtered == _t3))) {
    fprintf(stderr, "expect failed\n");
    exit(1);
  }
}

int main() {
  typedef struct {
    int cs_order_number;
    int cs_ship_date_sk;
    int cs_ship_addr_sk;
    int cs_call_center_sk;
    int cs_warehouse_sk;
    double cs_ext_ship_cost;
    double cs_net_profit;
  } catalog_salesItem;
  typedef struct {
    int len;
    catalog_salesItem *data;
  } list_catalog_salesItem;
  static list_catalog_salesItem list_catalog_salesItem_create(int len) {
    list_catalog_salesItem l;
    l.len = len;
    l.data = (catalog_salesItem *)malloc(sizeof(catalog_salesItem) * len);
    return l;
  }
  list_catalog_salesItem _t5 = list_catalog_salesItem_create(2);
  _t5.data[0] = (catalog_salesItem){.cs_order_number = 1,
                                    .cs_ship_date_sk = 1,
                                    .cs_ship_addr_sk = 1,
                                    .cs_call_center_sk = 1,
                                    .cs_warehouse_sk = 1,
                                    .cs_ext_ship_cost = 5.0,
                                    .cs_net_profit = 20.0};
  _t5.data[1] = (catalog_salesItem){.cs_order_number = 1,
                                    .cs_ship_date_sk = 1,
                                    .cs_ship_addr_sk = 1,
                                    .cs_call_center_sk = 1,
                                    .cs_warehouse_sk = 2,
                                    .cs_ext_ship_cost = 0.0,
                                    .cs_net_profit = 0.0};
  int catalog_sales = _t5;
  typedef struct {
    int d_date_sk;
    char *d_date;
  } date_dimItem;
  typedef struct {
    int len;
    date_dimItem *data;
  } list_date_dimItem;
  static list_date_dimItem list_date_dimItem_create(int len) {
    list_date_dimItem l;
    l.len = len;
    l.data = (date_dimItem *)malloc(sizeof(date_dimItem) * len);
    return l;
  }
  list_date_dimItem _t6 = list_date_dimItem_create(1);
  _t6.data[0] = (date_dimItem){.d_date_sk = 1, .d_date = "2000-03-01"};
  int date_dim = _t6;
  typedef struct {
    int ca_address_sk;
    char *ca_state;
  } customer_addressItem;
  typedef struct {
    int len;
    customer_addressItem *data;
  } list_customer_addressItem;
  static list_customer_addressItem list_customer_addressItem_create(int len) {
    list_customer_addressItem l;
    l.len = len;
    l.data = (customer_addressItem *)malloc(sizeof(customer_addressItem) * len);
    return l;
  }
  list_customer_addressItem _t7 = list_customer_addressItem_create(1);
  _t7.data[0] = (customer_addressItem){.ca_address_sk = 1, .ca_state = "CA"};
  int customer_address = _t7;
  typedef struct {
    int cc_call_center_sk;
    char *cc_county;
  } call_centerItem;
  typedef struct {
    int len;
    call_centerItem *data;
  } list_call_centerItem;
  static list_call_centerItem list_call_centerItem_create(int len) {
    list_call_centerItem l;
    l.len = len;
    l.data = (call_centerItem *)malloc(sizeof(call_centerItem) * len);
    return l;
  }
  list_call_centerItem _t8 = list_call_centerItem_create(1);
  _t8.data[0] =
      (call_centerItem){.cc_call_center_sk = 1, .cc_county = "CountyA"};
  int call_center = _t8;
  list_int catalog_returns = _t9;
  list_int filtered = 0;
  _json_int(filtered);
  test_TPCDS_Q16_shipping();
  return 0;
}
