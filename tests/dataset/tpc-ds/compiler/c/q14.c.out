#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  int len;
  int *data;
} list_int;
static list_int list_int_create(int len) {
  list_int l;
  l.len = len;
  l.data = (int *)malloc(sizeof(int) * len);
  return l;
}
typedef struct {
  int len;
  double *data;
} list_float;
static list_float list_float_create(int len) {
  list_float l;
  l.len = len;
  l.data = (double *)malloc(sizeof(double) * len);
  return l;
}
typedef struct {
  int len;
  char **data;
} list_string;
static list_string list_string_create(int len) {
  list_string l;
  l.len = len;
  l.data = (char **)malloc(sizeof(char *) * len);
  return l;
}
typedef struct {
  int len;
  list_int *data;
} list_list_int;
static list_list_int list_list_int_create(int len) {
  list_list_int l;
  l.len = len;
  l.data = (list_int *)malloc(sizeof(list_int) * len);
  return l;
}
typedef struct {
  int key;
  int value;
} map_int_bool_item;
static map_int_bool_item *map_int_bool_item_new(int key, int value) {
  map_int_bool_item *it =
      (map_int_bool_item *)malloc(sizeof(map_int_bool_item));
  it->key = key;
  it->value = value;
  return it;
}
typedef struct {
  int len;
  int cap;
  map_int_bool_item **data;
} map_int_bool;
static map_int_bool map_int_bool_create(int cap) {
  map_int_bool m;
  m.len = 0;
  m.cap = cap;
  m.data = cap ? (map_int_bool_item **)malloc(sizeof(map_int_bool_item *) * cap)
               : NULL;
  return m;
}
static void map_int_bool_put(map_int_bool *m, int key, int value) {
  for (int i = 0; i < m->len; i++)
    if (m->data[i]->key == key) {
      m->data[i]->value = value;
      return;
    }
  if (m->len >= m->cap) {
    m->cap = m->cap ? m->cap * 2 : 4;
    m->data = (map_int_bool_item **)realloc(
        m->data, sizeof(map_int_bool_item *) * m->cap);
  }
  m->data[m->len++] = map_int_bool_item_new(key, value);
}
static int map_int_bool_contains(map_int_bool m, int key) {
  for (int i = 0; i < m.len; i++)
    if (m.data[i]->key == key)
      return 1;
  return 0;
}
static double _avg_float(list_float v) {
  if (v.len == 0)
    return 0;
  double sum = 0;
  for (int i = 0; i < v.len; i++)
    sum += v.data[i];
  return sum / v.len;
}
static void _json_int(int v) { printf("%d", v); }
static void _json_float(double v) { printf("%g", v); }
static void _json_string(char *s) { printf("\"%s\"", s); }
static void _json_list_int(list_int v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_int(v.data[i]);
  }
  printf("]");
}
static void _json_list_float(list_float v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_float(v.data[i]);
  }
  printf("]");
}
static void _json_list_string(list_string v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_string(v.data[i]);
  }
  printf("]");
}
static void _json_list_list_int(list_list_int v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_list_int(v.data[i]);
  }
  printf("]");
}
typedef struct StoreSale StoreSale;
typedef struct CatalogSale CatalogSale;
typedef struct WebSale WebSale;
typedef struct Item Item;
typedef struct DateDim DateDim;

typedef struct {
  int ss_item_sk;
  double ss_list_price;
  int ss_quantity;
  int ss_sold_date_sk;
} StoreSale;

typedef struct {
  int cs_item_sk;
  double cs_list_price;
  int cs_quantity;
  int cs_sold_date_sk;
} CatalogSale;

typedef struct {
  int ws_item_sk;
  double ws_list_price;
  int ws_quantity;
  int ws_sold_date_sk;
} WebSale;

typedef struct {
  int i_item_sk;
  int i_brand_id;
  int i_class_id;
  int i_category_id;
} Item;

typedef struct {
  int d_date_sk;
  int d_year;
  int d_moy;
} DateDim;

static void test_TPCDS_Q14_cross_channel() {
  list_int _t1 = list_int_create(1);
  map_int_bool _t2 = map_int_bool_create(6);
  map_int_bool_put(&_t2, channel, "store");
  map_int_bool_put(&_t2, i_brand_id, 1);
  map_int_bool_put(&_t2, i_class_id, 1);
  map_int_bool_put(&_t2, i_category_id, 1);
  map_int_bool_put(&_t2, sales, 60.0);
  map_int_bool_put(&_t2, number_sales, 1);
  _t1.data[0] = _t2;
  if (!((result == _t1))) {
    fprintf(stderr, "expect failed\n");
    exit(1);
  }
}

int main() {
  typedef struct {
    int ss_item_sk;
    double ss_list_price;
    int ss_quantity;
    int ss_sold_date_sk;
  } store_salesItem;
  typedef struct {
    int len;
    store_salesItem *data;
  } list_store_salesItem;
  static list_store_salesItem list_store_salesItem_create(int len) {
    list_store_salesItem l;
    l.len = len;
    l.data = (store_salesItem *)malloc(sizeof(store_salesItem) * len);
    return l;
  }
  list_store_salesItem _t3 = list_store_salesItem_create(2);
  _t3.data[0] = (store_salesItem){.ss_item_sk = 1,
                                  .ss_list_price = 10.0,
                                  .ss_quantity = 2,
                                  .ss_sold_date_sk = 1};
  _t3.data[1] = (store_salesItem){.ss_item_sk = 1,
                                  .ss_list_price = 20.0,
                                  .ss_quantity = 3,
                                  .ss_sold_date_sk = 2};
  int store_sales = _t3;
  typedef struct {
    int cs_item_sk;
    double cs_list_price;
    int cs_quantity;
    int cs_sold_date_sk;
  } catalog_salesItem;
  typedef struct {
    int len;
    catalog_salesItem *data;
  } list_catalog_salesItem;
  static list_catalog_salesItem list_catalog_salesItem_create(int len) {
    list_catalog_salesItem l;
    l.len = len;
    l.data = (catalog_salesItem *)malloc(sizeof(catalog_salesItem) * len);
    return l;
  }
  list_catalog_salesItem _t4 = list_catalog_salesItem_create(1);
  _t4.data[0] = (catalog_salesItem){.cs_item_sk = 1,
                                    .cs_list_price = 10.0,
                                    .cs_quantity = 2,
                                    .cs_sold_date_sk = 1};
  int catalog_sales = _t4;
  typedef struct {
    int ws_item_sk;
    double ws_list_price;
    int ws_quantity;
    int ws_sold_date_sk;
  } web_salesItem;
  typedef struct {
    int len;
    web_salesItem *data;
  } list_web_salesItem;
  static list_web_salesItem list_web_salesItem_create(int len) {
    list_web_salesItem l;
    l.len = len;
    l.data = (web_salesItem *)malloc(sizeof(web_salesItem) * len);
    return l;
  }
  list_web_salesItem _t5 = list_web_salesItem_create(1);
  _t5.data[0] = (web_salesItem){.ws_item_sk = 1,
                                .ws_list_price = 30.0,
                                .ws_quantity = 1,
                                .ws_sold_date_sk = 1};
  int web_sales = _t5;
  typedef struct {
    int i_item_sk;
    int i_brand_id;
    int i_class_id;
    int i_category_id;
  } itemItem;
  typedef struct {
    int len;
    itemItem *data;
  } list_itemItem;
  static list_itemItem list_itemItem_create(int len) {
    list_itemItem l;
    l.len = len;
    l.data = (itemItem *)malloc(sizeof(itemItem) * len);
    return l;
  }
  list_itemItem _t6 = list_itemItem_create(1);
  _t6.data[0] = (itemItem){
      .i_item_sk = 1, .i_brand_id = 1, .i_class_id = 1, .i_category_id = 1};
  int item = _t6;
  typedef struct {
    int d_date_sk;
    int d_year;
    int d_moy;
  } date_dimItem;
  typedef struct {
    int len;
    date_dimItem *data;
  } list_date_dimItem;
  static list_date_dimItem list_date_dimItem_create(int len) {
    list_date_dimItem l;
    l.len = len;
    l.data = (date_dimItem *)malloc(sizeof(date_dimItem) * len);
    return l;
  }
  list_date_dimItem _t7 = list_date_dimItem_create(2);
  _t7.data[0] = (date_dimItem){.d_date_sk = 1, .d_year = 2000, .d_moy = 12};
  _t7.data[1] = (date_dimItem){.d_date_sk = 2, .d_year = 2002, .d_moy = 11};
  int date_dim = _t7;
  typedef struct {
    int ss_item_sk;
  } cross_itemsItem;
  typedef struct {
    int len;
    cross_itemsItem *data;
  } list_cross_itemsItem;
  static list_cross_itemsItem list_cross_itemsItem_create(int len) {
    list_cross_itemsItem l;
    l.len = len;
    l.data = (cross_itemsItem *)malloc(sizeof(cross_itemsItem) * len);
    return l;
  }
  list_cross_itemsItem _t8 = list_cross_itemsItem_create(1);
  _t8.data[0] = (cross_itemsItem){.ss_item_sk = 1};
  int cross_items = _t8;
  list_float _t9 = list_float_create(3);
  _t9.data[0] = 20.0;
  _t9.data[1] = 20.0;
  _t9.data[2] = 30.0;
  double avg_sales = _avg_float(_t9);
  list_int store_filtered = 0;
  map_int_bool _t10 = map_int_bool_create(6);
  map_int_bool_put(&_t10, channel, r.channel);
  map_int_bool_put(&_t10, i_brand_id, 1);
  map_int_bool_put(&_t10, i_class_id, 1);
  map_int_bool_put(&_t10, i_category_id, 1);
  map_int_bool_put(&_t10, sales, r.sales);
  map_int_bool_put(&_t10, number_sales, r.number_sales);
  list_int _t11 = list_int_create(store_filtered.len);
  int _t12 = 0;
  for (int _t13 = 0; _t13 < store_filtered.len; _t13++) {
    int r = store_filtered.data[_t13];
    if (!((r.sales > avg_sales))) {
      continue;
    }
    _t11.data[_t12] = _t10;
    _t12++;
  }
  _t11.len = _t12;
  list_int result = _t11;
  _json_int(result);
  test_TPCDS_Q14_cross_channel();
  return 0;
}
