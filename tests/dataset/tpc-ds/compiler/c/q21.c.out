#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
  int len;
  int *data;
} list_int;
static list_int list_int_create(int len) {
  list_int l;
  l.len = len;
  l.data = (int *)malloc(sizeof(int) * len);
  return l;
}
typedef struct {
  int len;
  double *data;
} list_float;
static list_float list_float_create(int len) {
  list_float l;
  l.len = len;
  l.data = (double *)malloc(sizeof(double) * len);
  return l;
}
typedef struct {
  int len;
  char **data;
} list_string;
static list_string list_string_create(int len) {
  list_string l;
  l.len = len;
  l.data = (char **)malloc(sizeof(char *) * len);
  return l;
}
typedef struct {
  int len;
  list_int *data;
} list_list_int;
static list_list_int list_list_int_create(int len) {
  list_list_int l;
  l.len = len;
  l.data = (list_int *)malloc(sizeof(list_int) * len);
  return l;
}
typedef struct {
  int key;
  int value;
} map_int_bool_item;
static map_int_bool_item *map_int_bool_item_new(int key, int value) {
  map_int_bool_item *it =
      (map_int_bool_item *)malloc(sizeof(map_int_bool_item));
  it->key = key;
  it->value = value;
  return it;
}
typedef struct {
  int len;
  int cap;
  map_int_bool_item **data;
} map_int_bool;
static map_int_bool map_int_bool_create(int cap) {
  map_int_bool m;
  m.len = 0;
  m.cap = cap;
  m.data = cap ? (map_int_bool_item **)malloc(sizeof(map_int_bool_item *) * cap)
               : NULL;
  return m;
}
static void map_int_bool_put(map_int_bool *m, int key, int value) {
  for (int i = 0; i < m->len; i++)
    if (m->data[i]->key == key) {
      m->data[i]->value = value;
      return;
    }
  if (m->len >= m->cap) {
    m->cap = m->cap ? m->cap * 2 : 4;
    m->data = (map_int_bool_item **)realloc(
        m->data, sizeof(map_int_bool_item *) * m->cap);
  }
  m->data[m->len++] = map_int_bool_item_new(key, value);
}
static int map_int_bool_contains(map_int_bool m, int key) {
  for (int i = 0; i < m.len; i++)
    if (m.data[i]->key == key)
      return 1;
  return 0;
}
static void _json_int(int v) { printf("%d", v); }
static void _json_float(double v) { printf("%g", v); }
static void _json_string(char *s) { printf("\"%s\"", s); }
static void _json_list_int(list_int v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_int(v.data[i]);
  }
  printf("]");
}
static void _json_list_float(list_float v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_float(v.data[i]);
  }
  printf("]");
}
static void _json_list_string(list_string v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_string(v.data[i]);
  }
  printf("]");
}
static void _json_list_list_int(list_list_int v) {
  printf("[");
  for (int i = 0; i < v.len; i++) {
    if (i > 0)
      printf(",");
    _json_list_int(v.data[i]);
  }
  printf("]");
}
typedef struct Inventory Inventory;
typedef struct Warehouse Warehouse;
typedef struct Item Item;
typedef struct DateDim DateDim;

typedef struct {
  int inv_item_sk;
  int inv_warehouse_sk;
  int inv_date_sk;
  int inv_quantity_on_hand;
} Inventory;

typedef struct {
  int w_warehouse_sk;
  char *w_warehouse_name;
} Warehouse;

typedef struct {
  int i_item_sk;
  char *i_item_id;
} Item;

typedef struct {
  int d_date_sk;
  char *d_date;
} DateDim;

static void test_TPCDS_Q21_inventory_ratio() {
  list_int _t1 = list_int_create(1);
  map_int_bool _t2 = map_int_bool_create(4);
  map_int_bool_put(&_t2, w_warehouse_name, "Main");
  map_int_bool_put(&_t2, i_item_id, "ITEM1");
  map_int_bool_put(&_t2, inv_before, 30);
  map_int_bool_put(&_t2, inv_after, 40);
  _t1.data[0] = _t2;
  if (!((result == _t1))) {
    fprintf(stderr, "expect failed\n");
    exit(1);
  }
}

int main() {
  typedef struct {
    int inv_item_sk;
    int inv_warehouse_sk;
    int inv_date_sk;
    int inv_quantity_on_hand;
  } inventoryItem;
  typedef struct {
    int len;
    inventoryItem *data;
  } list_inventoryItem;
  static list_inventoryItem list_inventoryItem_create(int len) {
    list_inventoryItem l;
    l.len = len;
    l.data = (inventoryItem *)malloc(sizeof(inventoryItem) * len);
    return l;
  }
  list_inventoryItem _t3 = list_inventoryItem_create(4);
  _t3.data[0] = (inventoryItem){.inv_item_sk = 1,
                                .inv_warehouse_sk = 1,
                                .inv_date_sk = 1,
                                .inv_quantity_on_hand = 30};
  _t3.data[1] = (inventoryItem){.inv_item_sk = 1,
                                .inv_warehouse_sk = 1,
                                .inv_date_sk = 2,
                                .inv_quantity_on_hand = 40};
  _t3.data[2] = (inventoryItem){.inv_item_sk = 2,
                                .inv_warehouse_sk = 2,
                                .inv_date_sk = 1,
                                .inv_quantity_on_hand = 20};
  _t3.data[3] = (inventoryItem){.inv_item_sk = 2,
                                .inv_warehouse_sk = 2,
                                .inv_date_sk = 2,
                                .inv_quantity_on_hand = 20};
  int inventory = _t3;
  typedef struct {
    int w_warehouse_sk;
    char *w_warehouse_name;
  } warehouseItem;
  typedef struct {
    int len;
    warehouseItem *data;
  } list_warehouseItem;
  static list_warehouseItem list_warehouseItem_create(int len) {
    list_warehouseItem l;
    l.len = len;
    l.data = (warehouseItem *)malloc(sizeof(warehouseItem) * len);
    return l;
  }
  list_warehouseItem _t4 = list_warehouseItem_create(2);
  _t4.data[0] =
      (warehouseItem){.w_warehouse_sk = 1, .w_warehouse_name = "Main"};
  _t4.data[1] =
      (warehouseItem){.w_warehouse_sk = 2, .w_warehouse_name = "Backup"};
  int warehouse = _t4;
  typedef struct {
    int i_item_sk;
    char *i_item_id;
  } itemItem;
  typedef struct {
    int len;
    itemItem *data;
  } list_itemItem;
  static list_itemItem list_itemItem_create(int len) {
    list_itemItem l;
    l.len = len;
    l.data = (itemItem *)malloc(sizeof(itemItem) * len);
    return l;
  }
  list_itemItem _t5 = list_itemItem_create(2);
  _t5.data[0] = (itemItem){.i_item_sk = 1, .i_item_id = "ITEM1"};
  _t5.data[1] = (itemItem){.i_item_sk = 2, .i_item_id = "ITEM2"};
  int item = _t5;
  typedef struct {
    int d_date_sk;
    char *d_date;
  } date_dimItem;
  typedef struct {
    int len;
    date_dimItem *data;
  } list_date_dimItem;
  static list_date_dimItem list_date_dimItem_create(int len) {
    list_date_dimItem l;
    l.len = len;
    l.data = (date_dimItem *)malloc(sizeof(date_dimItem) * len);
    return l;
  }
  list_date_dimItem _t6 = list_date_dimItem_create(2);
  _t6.data[0] = (date_dimItem){.d_date_sk = 1, .d_date = "2000-03-01"};
  _t6.data[1] = (date_dimItem){.d_date_sk = 2, .d_date = "2000-03-20"};
  int date_dim = _t6;
  list_int before = 0;
  list_int after = 0;
  list_int joined = 0;
  list_int _t7 = list_int_create(2);
  _t7.data[0] = r.w_name;
  _t7.data[1] = r.i_id;
  map_int_bool _t8 = map_int_bool_create(4);
  map_int_bool_put(&_t8, w_warehouse_name, r.w_name);
  map_int_bool_put(&_t8, i_item_id, r.i_id);
  map_int_bool_put(&_t8, inv_before, r.before_qty);
  map_int_bool_put(&_t8, inv_after, r.after_qty);
  list_int _t9 = list_int_create(joined.len);
  list_int *_t12 = (list_int *)malloc(sizeof(list_int) * joined.len);
  int _t10 = 0;
  for (int _t11 = 0; _t11 < joined.len; _t11++) {
    int r = joined.data[_t11];
    if (!((((r.ratio >= ((2.0 / 3.0))) && r.ratio) <= ((3.0 / 2.0))))) {
      continue;
    }
    _t9.data[_t10] = _t8;
    _t12[_t10] = _t7;
    _t10++;
  }
  _t9.len = _t10;
  for (int i = 0; i < _t10 - 1; i++) {
    for (int j = i + 1; j < _t10; j++) {
      if (_t12[i] > _t12[j]) {
        list_int _t13 = _t12[i];
        _t12[i] = _t12[j];
        _t12[j] = _t13;
        int _t14 = _t9.data[i];
        _t9.data[i] = _t9.data[j];
        _t9.data[j] = _t14;
      }
    }
    list_int result = _t9;
    _json_int(result);
    test_TPCDS_Q21_inventory_ratio();
    return 0;
  }
