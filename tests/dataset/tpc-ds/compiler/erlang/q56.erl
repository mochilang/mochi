#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T07:25:58Z
% q56.erl - generated from q56.mochi

main(_) ->
    Store_sales = [#{item => 1, price => 10}],
    Catalog_sales = [#{item => 1, price => 20}],
    Web_sales = [#{item => 1, price => 30}],
    Ss = [#{item => Key0, total => lists:sum([mochi_get(price, X) || X <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{mochi_get(item, S), S} || S <- Store_sales]))],
    Cs = [#{item => Key1, total => lists:sum([mochi_get(price, X) || X <- Val1])} || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{mochi_get(item, S), S} || S <- Catalog_sales]))],
    Ws = [#{item => Key2, total => lists:sum([mochi_get(price, X) || X <- Val2])} || {Key2, Val2} <- maps:to_list(lists:foldl(fun({Key2, Val2}, Acc2) -> L = maps:get(Key2, Acc2, []), maps:put(Key2, [Val2 | L], Acc2) end, #{}, [{mochi_get(item, S), S} || S <- Web_sales]))],
    Union = concat(Ss, Cs, Ws),
    Result = [#{i_item_id => Key3, total_sales => lists:sum([mochi_get(total, X) || X <- Val3])} || {Key3, Val3} <- maps:to_list(lists:foldl(fun({Key3, Val3}, Acc3) -> L = maps:get(Key3, Acc3, []), maps:put(Key3, [Val3 | L], Acc3) end, #{}, [{mochi_get(item, U), U} || U <- Union]))],
    mochi_json(Result),
    (case (Result == [#{i_item_id => 1, total_sales => 60}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
