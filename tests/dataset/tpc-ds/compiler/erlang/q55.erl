#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:38Z
% q55.erl - generated from q55.mochi

main(_) ->
    Store_sales = [#{item => 1, sold_date => 1, price => 10}, #{item => 2, sold_date => 1, price => 20}, #{item => 3, sold_date => 1, price => 25}],
    Item = [#{i_item_sk => 1, i_brand_id => 10, i_manager_id => 1}, #{i_item_sk => 2, i_brand_id => 20, i_manager_id => 1}, #{i_item_sk => 3, i_brand_id => 10, i_manager_id => 1}],
    Date_dim = [#{d_date_sk => 1, d_year => 2001, d_moy => 11}],
    Grouped = [#{brand_id => maps:get(brand_id, Key0), ext_price => lists:sum([maps:get(price, X) || X <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{brand_id => maps:get(i_brand_id, I)}, #{ss => Ss, i => I, d => D}} || Ss <- Store_sales, I <- Item, D <- Date_dim, ((maps:get(item, Ss) == maps:get(i_item_sk, I)) andalso (maps:get(i_manager_id, I) == 1)), (maps:get(sold_date, Ss) == maps:get(d_date_sk, D))]))],
    Result = [V || {_, V} <- lists:keysort(1, [{[-maps:get(ext_price, G), maps:get(brand_id, G)], G} || G <- Grouped])],
    mochi_json(Result),
    (case (Result == [#{brand_id => 10, ext_price => 35}, #{brand_id => 20, ext_price => 20}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
