#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:49Z
% q77.erl - generated from q77.mochi

main(_) ->
    Date_dim = [#{d_date_sk => 1, d_date => 1}],
    Store_sales = [#{ss_sold_date_sk => 1, s_store_sk => 1, ss_ext_sales_price => 100, ss_net_profit => 10}],
    Store_returns = [#{sr_returned_date_sk => 1, s_store_sk => 1, sr_return_amt => 5, sr_net_loss => 1}],
    Catalog_sales = [#{cs_sold_date_sk => 1, cs_call_center_sk => 1, cs_ext_sales_price => 150, cs_net_profit => 15}],
    Catalog_returns = [#{cr_returned_date_sk => 1, cr_call_center_sk => 1, cr_return_amount => 7, cr_net_loss => 3}],
    Web_sales = [#{ws_sold_date_sk => 1, ws_web_page_sk => 1, ws_ext_sales_price => 200, ws_net_profit => 20}],
    Web_returns = [#{wr_returned_date_sk => 1, wr_web_page_sk => 1, wr_return_amt => 10, wr_net_loss => 2}],
    Ss = [#{s_store_sk => Key0, sales => lists:sum([maps:get(ss_ext_sales_price, maps:get(ss, X)) || X <- Val0]), profit => lists:sum([maps:get(ss_net_profit, maps:get(ss, X)) || X <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{maps:get(s_store_sk, Ss), #{ss => Ss, d => D}} || Ss <- Store_sales, D <- Date_dim, (maps:get(d_date_sk, D) == maps:get(ss_sold_date_sk, Ss))]))],
    Sr = [#{s_store_sk => Key1, returns => lists:sum([maps:get(sr_return_amt, maps:get(sr, X)) || X <- Val1]), profit_loss => lists:sum([maps:get(sr_net_loss, maps:get(sr, X)) || X <- Val1])} || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{maps:get(s_store_sk, Sr), #{sr => Sr, d => D}} || Sr <- Store_returns, D <- Date_dim, (maps:get(d_date_sk, D) == maps:get(sr_returned_date_sk, Sr))]))],
    Cs = [#{cs_call_center_sk => Key2, sales => lists:sum([maps:get(cs_ext_sales_price, maps:get(cs, X)) || X <- Val2]), profit => lists:sum([maps:get(cs_net_profit, maps:get(cs, X)) || X <- Val2])} || {Key2, Val2} <- maps:to_list(lists:foldl(fun({Key2, Val2}, Acc2) -> L = maps:get(Key2, Acc2, []), maps:put(Key2, [Val2 | L], Acc2) end, #{}, [{maps:get(cs_call_center_sk, Cs), #{cs => Cs, d => D}} || Cs <- Catalog_sales, D <- Date_dim, (maps:get(d_date_sk, D) == maps:get(cs_sold_date_sk, Cs))]))],
    Cr = [#{cr_call_center_sk => Key3, returns => lists:sum([maps:get(cr_return_amount, maps:get(cr, X)) || X <- Val3]), profit_loss => lists:sum([maps:get(cr_net_loss, maps:get(cr, X)) || X <- Val3])} || {Key3, Val3} <- maps:to_list(lists:foldl(fun({Key3, Val3}, Acc3) -> L = maps:get(Key3, Acc3, []), maps:put(Key3, [Val3 | L], Acc3) end, #{}, [{maps:get(cr_call_center_sk, Cr), #{cr => Cr, d => D}} || Cr <- Catalog_returns, D <- Date_dim, (maps:get(d_date_sk, D) == maps:get(cr_returned_date_sk, Cr))]))],
    Ws = [#{wp_web_page_sk => Key4, sales => lists:sum([maps:get(ws_ext_sales_price, maps:get(ws, X)) || X <- Val4]), profit => lists:sum([maps:get(ws_net_profit, maps:get(ws, X)) || X <- Val4])} || {Key4, Val4} <- maps:to_list(lists:foldl(fun({Key4, Val4}, Acc4) -> L = maps:get(Key4, Acc4, []), maps:put(Key4, [Val4 | L], Acc4) end, #{}, [{maps:get(ws_web_page_sk, Ws), #{ws => Ws, d => D}} || Ws <- Web_sales, D <- Date_dim, (maps:get(d_date_sk, D) == maps:get(ws_sold_date_sk, Ws))]))],
    Wr = [#{wp_web_page_sk => Key5, returns => lists:sum([maps:get(wr_return_amt, maps:get(wr, X)) || X <- Val5]), profit_loss => lists:sum([maps:get(wr_net_loss, maps:get(wr, X)) || X <- Val5])} || {Key5, Val5} <- maps:to_list(lists:foldl(fun({Key5, Val5}, Acc5) -> L = maps:get(Key5, Acc5, []), maps:put(Key5, [Val5 | L], Acc5) end, #{}, [{maps:get(wr_web_page_sk, Wr), #{wr => Wr, d => D}} || Wr <- Web_returns, D <- Date_dim, (maps:get(d_date_sk, D) == maps:get(wr_returned_date_sk, Wr))]))],
    Per_channel = concat([#{channel => "store channel", id => maps:get(s_store_sk, S), sales => maps:get(sales, S), returns => (case (R == undefined) of true -> 0; _ -> maps:get(returns, R) end), profit => (maps:get(profit, S) - ((case (R == undefined) of true -> 0; _ -> maps:get(profit_loss, R) end)))} || S <- Ss, {S, R} <- mochi_left_join_item(S, Sr, fun(S, R) -> (maps:get(s_store_sk, S) == maps:get(s_store_sk, R)) end)], [#{channel => "catalog channel", id => maps:get(cs_call_center_sk, C), sales => maps:get(sales, C), returns => maps:get(returns, R), profit => (maps:get(profit, C) - maps:get(profit_loss, R))} || C <- Cs, R <- Cr, (maps:get(cs_call_center_sk, C) == maps:get(cr_call_center_sk, R))], [#{channel => "web channel", id => maps:get(wp_web_page_sk, W), sales => maps:get(sales, W), returns => (case (R == undefined) of true -> 0; _ -> maps:get(returns, R) end), profit => (maps:get(profit, W) - ((case (R == undefined) of true -> 0; _ -> maps:get(profit_loss, R) end)))} || W <- Ws, {W, R} <- mochi_left_join_item(W, Wr, fun(W, R) -> (maps:get(wp_web_page_sk, W) == maps:get(wp_web_page_sk, R)) end)]),
    Result = [V || {_, V} <- lists:keysort(1, [{maps:get(channel, Key6), #{channel => maps:get(channel, Key6), id => maps:get(id, Key6), sales => lists:sum([maps:get(sales, maps:get(p, X)) || X <- Val6]), returns => lists:sum([maps:get(returns, maps:get(p, X)) || X <- Val6]), profit => lists:sum([maps:get(profit, maps:get(p, X)) || X <- Val6])}} || {Key6, Val6} <- maps:to_list(lists:foldl(fun({Key6, Val6}, Acc6) -> L = maps:get(Key6, Acc6, []), maps:put(Key6, [Val6 | L], Acc6) end, #{}, [{#{channel => maps:get(channel, P), id => maps:get(id, P)}, P} || P <- Per_channel]))])],
    mochi_json(Result),
    (case (Result == [#{channel => "catalog channel", id => 1, sales => 150, returns => 7, profit => 12}, #{channel => "store channel", id => 1, sales => 100, returns => 5, profit => 9}, #{channel => "web channel", id => 1, sales => 200, returns => 10, profit => 18}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_left_join_item(A, B, Fun) ->
    Matches = [ {A, J} || J <- B, Fun(A, J) ],
    case Matches of
        [] -> [{A, undefined}];
        _ -> Matches
    end.

mochi_left_join(L, R, Fun) ->
    lists:flatmap(fun(X) -> mochi_left_join_item(X, R, Fun) end, L).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
