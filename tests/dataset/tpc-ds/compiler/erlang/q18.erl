#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2020-01-02T15:04:05Z
% q18.erl - generated from q18.mochi

main(_) ->
    Catalog_sales = [#{cs_quantity => 1, cs_list_price => 10, cs_coupon_amt => 1, cs_sales_price => 9, cs_net_profit => 2, cs_bill_cdemo_sk => 1, cs_bill_customer_sk => 1, cs_sold_date_sk => 1, cs_item_sk => 1}],
    Customer_demographics = [#{cd_demo_sk => 1, cd_gender => "M", cd_education_status => "College", cd_dep_count => 2}, #{cd_demo_sk => 2, cd_gender => "F", cd_education_status => "College", cd_dep_count => 2}],
    Customer = [#{c_customer_sk => 1, c_current_cdemo_sk => 2, c_current_addr_sk => 1, c_birth_year => 1980, c_birth_month => 1}],
    Customer_address = [#{ca_address_sk => 1, ca_country => "US", ca_state => "CA", ca_county => "County1"}],
    Date_dim = [#{d_date_sk => 1, d_year => 1999}],
    Item = [#{i_item_sk => 1, i_item_id => "I1"}],
    Joined = [#{i_item_id => mochi_get(i_item_id, I), ca_country => mochi_get(ca_country, Ca), ca_state => mochi_get(ca_state, Ca), ca_county => mochi_get(ca_county, Ca), q => mochi_get(cs_quantity, Cs), lp => mochi_get(cs_list_price, Cs), cp => mochi_get(cs_coupon_amt, Cs), sp => mochi_get(cs_sales_price, Cs), np => mochi_get(cs_net_profit, Cs), by => mochi_get(c_birth_year, C), dep => mochi_get(cd_dep_count, Cd1)} || Cs <- Catalog_sales, Cd1 <- Customer_demographics, C <- Customer, Cd2 <- Customer_demographics, Ca <- Customer_address, D <- Date_dim, I <- Item, (((mochi_get(cs_bill_cdemo_sk, Cs) == mochi_get(cd_demo_sk, Cd1)) andalso (mochi_get(cd_gender, Cd1) == "M")) andalso (mochi_get(cd_education_status, Cd1) == "College")), (mochi_get(cs_bill_customer_sk, Cs) == mochi_get(c_customer_sk, C)), (mochi_get(c_current_cdemo_sk, C) == mochi_get(cd_demo_sk, Cd2)), (mochi_get(c_current_addr_sk, C) == mochi_get(ca_address_sk, Ca)), ((mochi_get(cs_sold_date_sk, Cs) == mochi_get(d_date_sk, D)) andalso (mochi_get(d_year, D) == 1999)), (mochi_get(cs_item_sk, Cs) == mochi_get(i_item_sk, I))],
    Result = [#{i_item_id => mochi_get(i_item_id, Key0), ca_country => mochi_get(ca_country, Key0), ca_state => mochi_get(ca_state, Key0), ca_county => mochi_get(ca_county, Key0), agg1 => (lists:sum([mochi_get(q, X) || X <- Val0]) / length([mochi_get(q, X) || X <- Val0])), agg2 => (lists:sum([mochi_get(lp, X) || X <- Val0]) / length([mochi_get(lp, X) || X <- Val0])), agg3 => (lists:sum([mochi_get(cp, X) || X <- Val0]) / length([mochi_get(cp, X) || X <- Val0])), agg4 => (lists:sum([mochi_get(sp, X) || X <- Val0]) / length([mochi_get(sp, X) || X <- Val0])), agg5 => (lists:sum([mochi_get(np, X) || X <- Val0]) / length([mochi_get(np, X) || X <- Val0])), agg6 => (lists:sum([mochi_get(by, X) || X <- Val0]) / length([mochi_get(by, X) || X <- Val0])), agg7 => (lists:sum([mochi_get(dep, X) || X <- Val0]) / length([mochi_get(dep, X) || X <- Val0]))} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{i_item_id => mochi_get(i_item_id, J), ca_country => mochi_get(ca_country, J), ca_state => mochi_get(ca_state, J), ca_county => mochi_get(ca_county, J)}, J} || J <- Joined]))],
    mochi_json(Result),
    (case (Result == [#{i_item_id => "I1", ca_country => "US", ca_state => "CA", ca_county => "County1", agg1 => 1, agg2 => 10, agg3 => 1, agg4 => 9, agg5 => 2, agg6 => 1980, agg7 => 2}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub);
                        _ -> erlang:error({badkey, K})
                    end;
                _ -> erlang:error({badkey, K})
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
