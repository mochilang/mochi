#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T07:26:16Z
% q98.erl - generated from q98.mochi

main(_) ->
    Store_sales = [#{ss_item_sk => 1, ss_sold_date_sk => 1, ss_ext_sales_price => 50}, #{ss_item_sk => 2, ss_sold_date_sk => 1, ss_ext_sales_price => 100}],
    Item = [#{i_item_sk => 1, i_item_id => "I1", i_item_desc => "desc1", i_category => "CatA", i_class => "Class1", i_current_price => 100}, #{i_item_sk => 2, i_item_id => "I2", i_item_desc => "desc2", i_category => "CatB", i_class => "Class1", i_current_price => 200}],
    Date_dim = [#{d_date_sk => 1, d_date => "2000-02-01"}],
    Grouped = [#{i_item_id => mochi_get(item_id, Key0), i_item_desc => mochi_get(item_desc, Key0), i_category => mochi_get(category, Key0), i_class => mochi_get(class, Key0), i_current_price => mochi_get(price, Key0), itemrevenue => lists:sum([mochi_get(ss_ext_sales_price, X) || X <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{item_id => mochi_get(i_item_id, I), item_desc => mochi_get(i_item_desc, I), category => mochi_get(i_category, I), class => mochi_get(i_class, I), price => mochi_get(i_current_price, I)}, #{ss => Ss, i => I, d => D}} || Ss <- Store_sales, I <- Item, D <- Date_dim, (mochi_get(ss_item_sk, Ss) == mochi_get(i_item_sk, I)), (mochi_get(ss_sold_date_sk, Ss) == mochi_get(d_date_sk, D))]))],
    Totals = [#{class => Key1, total => lists:sum([mochi_get(itemrevenue, X) || X <- Val1])} || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{mochi_get(i_class, G), G} || G <- Grouped]))],
    Result = [V || {_, V} <- lists:keysort(1, [{[mochi_get(i_category, G), mochi_get(i_class, G), mochi_get(i_item_id, G)], #{i_item_id => mochi_get(i_item_id, G), i_item_desc => mochi_get(i_item_desc, G), i_category => mochi_get(i_category, G), i_class => mochi_get(i_class, G), i_current_price => mochi_get(i_current_price, G), itemrevenue => mochi_get(itemrevenue, G), revenueratio => ((mochi_get(itemrevenue, G) * 100) / mochi_get(total, T))}} || G <- Grouped, T <- Totals, (mochi_get(i_class, G) == mochi_get(class, T))])],
    mochi_json(Result),
    (case (Result == [#{i_item_id => "I1", i_item_desc => "desc1", i_category => "CatA", i_class => "Class1", i_current_price => 100, itemrevenue => 50, revenueratio => 33.333333333333336}, #{i_item_id => "I2", i_item_desc => "desc2", i_category => "CatB", i_class => "Class1", i_current_price => 200, itemrevenue => 100, revenueratio => 66.66666666666667}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
