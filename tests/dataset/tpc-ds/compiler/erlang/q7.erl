#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T07:25:39Z
% q7.erl - generated from q7.mochi

main(_) ->
    Store_sales = [#{ss_cdemo_sk => 1, ss_sold_date_sk => 1, ss_item_sk => 1, ss_promo_sk => 1, ss_quantity => 5, ss_list_price => 10, ss_coupon_amt => 2, ss_sales_price => 8}],
    Customer_demographics = [#{cd_demo_sk => 1, cd_gender => "M", cd_marital_status => "S", cd_education_status => "College"}],
    Date_dim = [#{d_date_sk => 1, d_year => 1998}],
    Item = [#{i_item_sk => 1, i_item_id => "I1"}],
    Promotion = [#{p_promo_sk => 1, p_channel_email => "N", p_channel_event => "Y"}],
    Result = [V || {_, V} <- lists:keysort(1, [{mochi_get(i_item_id, Key0), #{i_item_id => mochi_get(i_item_id, Key0), agg1 => (lists:sum([mochi_get(ss_quantity, mochi_get(ss, X)) || X <- Val0]) / length([mochi_get(ss_quantity, mochi_get(ss, X)) || X <- Val0])), agg2 => (lists:sum([mochi_get(ss_list_price, mochi_get(ss, X)) || X <- Val0]) / length([mochi_get(ss_list_price, mochi_get(ss, X)) || X <- Val0])), agg3 => (lists:sum([mochi_get(ss_coupon_amt, mochi_get(ss, X)) || X <- Val0]) / length([mochi_get(ss_coupon_amt, mochi_get(ss, X)) || X <- Val0])), agg4 => (lists:sum([mochi_get(ss_sales_price, mochi_get(ss, X)) || X <- Val0]) / length([mochi_get(ss_sales_price, mochi_get(ss, X)) || X <- Val0]))}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{i_item_id => mochi_get(i_item_id, I)}, #{ss => Ss, cd => Cd, d => D, i => I, p => P}} || Ss <- Store_sales, Cd <- Customer_demographics, D <- Date_dim, I <- Item, P <- Promotion, (mochi_get(ss_cdemo_sk, Ss) == mochi_get(cd_demo_sk, Cd)), (mochi_get(ss_sold_date_sk, Ss) == mochi_get(d_date_sk, D)), (mochi_get(ss_item_sk, Ss) == mochi_get(i_item_sk, I)), (mochi_get(ss_promo_sk, Ss) == mochi_get(p_promo_sk, P)), (((((mochi_get(cd_gender, Cd) == "M") andalso (mochi_get(cd_marital_status, Cd) == "S")) andalso (mochi_get(cd_education_status, Cd) == "College")) andalso (((mochi_get(p_channel_email, P) == "N") orelse (mochi_get(p_channel_event, P) == "N")))) andalso (mochi_get(d_year, D) == 1998))]))])],
    mochi_json(Result),
    (case (Result == [#{i_item_id => "I1", agg1 => 5, agg2 => 10, agg3 => 2, agg4 => 8}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
