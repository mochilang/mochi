#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:32:12Z
% q95.erl - generated from q95.mochi

distinct(Xs) ->
    Out0 = [],
    lists:foreach(fun(X) -> (case not contains(Out0, X) of true -> Out1 = Out0 ++ [X]; _ -> ok end) end, Xs),
    Out1.

main(_) ->
    Web_sales = [#{ws_order_number => 1, ws_warehouse_sk => 1, ws_ship_date_sk => 1, ws_ship_addr_sk => 1, ws_web_site_sk => 1, ws_ext_ship_cost => 2, ws_net_profit => 5}, #{ws_order_number => 1, ws_warehouse_sk => 2, ws_ship_date_sk => 1, ws_ship_addr_sk => 1, ws_web_site_sk => 1, ws_ext_ship_cost => 0, ws_net_profit => 0}],
    Web_returns = [#{wr_order_number => 1}],
    Date_dim = [#{d_date_sk => 1, d_date => "2001-02-01"}],
    Customer_address = [#{ca_address_sk => 1, ca_state => "CA"}],
    Web_site = [#{web_site_sk => 1, web_company_name => "pri"}],
    Ws_wh = [#{ws_order_number => maps:get(ws_order_number, Ws1)} || Ws1 <- Web_sales, Ws2 <- Web_sales, ((maps:get(ws_order_number, Ws1) == maps:get(ws_order_number, Ws2)) andalso (maps:get(ws_warehouse_sk, Ws1) /= maps:get(ws_warehouse_sk, Ws2)))],
    Filtered = [Ws || Ws <- Web_sales, D <- Date_dim, Ca <- Customer_address, W <- Web_site, (maps:get(ws_ship_date_sk, Ws) == maps:get(d_date_sk, D)), (maps:get(ws_ship_addr_sk, Ws) == maps:get(ca_address_sk, Ca)), (maps:get(ws_web_site_sk, Ws) == maps:get(web_site_sk, W)), ((((maps:get(ca_state, Ca) == "CA") andalso (maps:get(web_company_name, W) == "pri")) andalso lists:member(maps:get(ws_order_number, Ws), ([maps:get(ws_order_number, X) || X <- Ws_wh]))) andalso lists:member(maps:get(ws_order_number, Ws), ([maps:get(wr_order_number, Wr) || Wr <- Web_returns])))],
    Result = #{order_count => length(distinct([maps:get(ws_order_number, X) || X <- Filtered])), total_shipping_cost => lists:sum([maps:get(ws_ext_ship_cost, X) || X <- Filtered]), total_net_profit => lists:sum([maps:get(ws_net_profit, X) || X <- Filtered])},
    mochi_json(Result),
    (case (Result == #{order_count => 1, total_shipping_cost => 2, total_net_profit => 5}) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
