#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:13Z
% q4.erl - generated from q4.mochi

main(_) ->
    Customer = [#{c_customer_sk => 1, c_customer_id => "C1", c_first_name => "Alice", c_last_name => "A", c_login => "alice"}],
    Store_sales = [#{ss_customer_sk => 1, ss_sold_date_sk => 1, ss_ext_list_price => 10, ss_ext_wholesale_cost => 5, ss_ext_discount_amt => 0, ss_ext_sales_price => 10}, #{ss_customer_sk => 1, ss_sold_date_sk => 2, ss_ext_list_price => 20, ss_ext_wholesale_cost => 5, ss_ext_discount_amt => 0, ss_ext_sales_price => 20}],
    Catalog_sales = [#{cs_bill_customer_sk => 1, cs_sold_date_sk => 1, cs_ext_list_price => 10, cs_ext_wholesale_cost => 2, cs_ext_discount_amt => 0, cs_ext_sales_price => 10}, #{cs_bill_customer_sk => 1, cs_sold_date_sk => 2, cs_ext_list_price => 30, cs_ext_wholesale_cost => 2, cs_ext_discount_amt => 0, cs_ext_sales_price => 30}],
    Web_sales = [#{ws_bill_customer_sk => 1, ws_sold_date_sk => 1, ws_ext_list_price => 10, ws_ext_wholesale_cost => 5, ws_ext_discount_amt => 0, ws_ext_sales_price => 10}, #{ws_bill_customer_sk => 1, ws_sold_date_sk => 2, ws_ext_list_price => 12, ws_ext_wholesale_cost => 5, ws_ext_discount_amt => 0, ws_ext_sales_price => 12}],
    Date_dim = [#{d_date_sk => 1, d_year => 2001}, #{d_date_sk => 2, d_year => 2002}],
    Year_total = ((([#{customer_id => maps:get(id, Key0), customer_first_name => maps:get(first, Key0), customer_last_name => maps:get(last, Key0), customer_login => maps:get(login, Key0), dyear => maps:get(year, Key0), year_total => lists:sum([((((((maps:get(ss_ext_list_price, X) - maps:get(ss_ext_wholesale_cost, X)) - maps:get(ss_ext_discount_amt, X))) + maps:get(ss_ext_sales_price, X))) / 2) || X <- Val0]), sale_type => "s"} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{id => maps:get(c_customer_id, C), first => maps:get(c_first_name, C), last => maps:get(c_last_name, C), login => maps:get(c_login, C), year => maps:get(d_year, D)}, #{c => C, s => S, d => D}} || C <- Customer, S <- Store_sales, D <- Date_dim, (maps:get(c_customer_sk, C) == maps:get(ss_customer_sk, S)), (maps:get(ss_sold_date_sk, S) == maps:get(d_date_sk, D))]))]) ++ ([#{customer_id => maps:get(id, Key1), customer_first_name => maps:get(first, Key1), customer_last_name => maps:get(last, Key1), customer_login => maps:get(login, Key1), dyear => maps:get(year, Key1), year_total => lists:sum([((((((maps:get(cs_ext_list_price, X) - maps:get(cs_ext_wholesale_cost, X)) - maps:get(cs_ext_discount_amt, X))) + maps:get(cs_ext_sales_price, X))) / 2) || X <- Val1]), sale_type => "c"} || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{#{id => maps:get(c_customer_id, C), first => maps:get(c_first_name, C), last => maps:get(c_last_name, C), login => maps:get(c_login, C), year => maps:get(d_year, D)}, #{c => C, cs => Cs, d => D}} || C <- Customer, Cs <- Catalog_sales, D <- Date_dim, (maps:get(c_customer_sk, C) == maps:get(cs_bill_customer_sk, Cs)), (maps:get(cs_sold_date_sk, Cs) == maps:get(d_date_sk, D))]))])) ++ ([#{customer_id => maps:get(id, Key2), customer_first_name => maps:get(first, Key2), customer_last_name => maps:get(last, Key2), customer_login => maps:get(login, Key2), dyear => maps:get(year, Key2), year_total => lists:sum([((((((maps:get(ws_ext_list_price, X) - maps:get(ws_ext_wholesale_cost, X)) - maps:get(ws_ext_discount_amt, X))) + maps:get(ws_ext_sales_price, X))) / 2) || X <- Val2]), sale_type => "w"} || {Key2, Val2} <- maps:to_list(lists:foldl(fun({Key2, Val2}, Acc2) -> L = maps:get(Key2, Acc2, []), maps:put(Key2, [Val2 | L], Acc2) end, #{}, [{#{id => maps:get(c_customer_id, C), first => maps:get(c_first_name, C), last => maps:get(c_last_name, C), login => maps:get(c_login, C), year => maps:get(d_year, D)}, #{c => C, ws => Ws, d => D}} || C <- Customer, Ws <- Web_sales, D <- Date_dim, (maps:get(c_customer_sk, C) == maps:get(ws_bill_customer_sk, Ws)), (maps:get(ws_sold_date_sk, Ws) == maps:get(d_date_sk, D))]))])),
    Result = [V || {_, V} <- lists:keysort(1, [{[maps:get(customer_id, S2), maps:get(customer_first_name, S2), maps:get(customer_last_name, S2), maps:get(customer_login, S2)], #{customer_id => maps:get(customer_id, S2), customer_first_name => maps:get(customer_first_name, S2), customer_last_name => maps:get(customer_last_name, S2), customer_login => maps:get(customer_login, S2)}} || S1 <- Year_total, S2 <- Year_total, C1 <- Year_total, C2 <- Year_total, W1 <- Year_total, W2 <- Year_total, (maps:get(customer_id, S2) == maps:get(customer_id, S1)), (maps:get(customer_id, C1) == maps:get(customer_id, S1)), (maps:get(customer_id, C2) == maps:get(customer_id, S1)), (maps:get(customer_id, W1) == maps:get(customer_id, S1)), (maps:get(customer_id, W2) == maps:get(customer_id, S1)), (((((((((((((((((maps:get(sale_type, S1) == "s") andalso (maps:get(sale_type, C1) == "c")) andalso (maps:get(sale_type, W1) == "w")) andalso (maps:get(sale_type, S2) == "s")) andalso (maps:get(sale_type, C2) == "c")) andalso (maps:get(sale_type, W2) == "w")) andalso (maps:get(dyear, S1) == 2001)) andalso (maps:get(dyear, S2) == 2002)) andalso (maps:get(dyear, C1) == 2001)) andalso (maps:get(dyear, C2) == 2002)) andalso (maps:get(dyear, W1) == 2001)) andalso (maps:get(dyear, W2) == 2002)) andalso (maps:get(year_total, S1) > 0)) andalso (maps:get(year_total, C1) > 0)) andalso (maps:get(year_total, W1) > 0)) andalso (((case (maps:get(year_total, C1) > 0) of true -> (maps:get(year_total, C2) / maps:get(year_total, C1)); _ -> undefined end)) > ((case (maps:get(year_total, S1) > 0) of true -> (maps:get(year_total, S2) / maps:get(year_total, S1)); _ -> undefined end)))) andalso (((case (maps:get(year_total, C1) > 0) of true -> (maps:get(year_total, C2) / maps:get(year_total, C1)); _ -> undefined end)) > ((case (maps:get(year_total, W1) > 0) of true -> (maps:get(year_total, W2) / maps:get(year_total, W1)); _ -> undefined end))))])],
    mochi_json(Result),
    (case (Result == [#{customer_id => "C1", customer_first_name => "Alice", customer_last_name => "A", customer_login => "alice"}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
