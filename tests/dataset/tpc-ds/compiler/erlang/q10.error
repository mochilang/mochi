run: exit status 127
/tmp/q10.erl:14:168: variable '_' is unbound
%   14|     Result = [#{cd_gender => mochi_get(gender, Key0), cd_marital_status => mochi_get(marital, Key0), cd_education_status => mochi_get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => mochi_get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => mochi_get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => mochi_get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => mochi_get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => mochi_get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => mochi_get(cd_gender, A), marital => mochi_get(cd_marital_status, A), education => mochi_get(cd_education_status, A), purchase => mochi_get(cd_purchase_estimate, A), credit => mochi_get(cd_credit_rating, A), dep => mochi_get(cd_dep_count, A), depemp => mochi_get(cd_dep_employed_count, A), depcol => mochi_get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |                                                                                                                                                                        ^

/tmp/q10.erl:14:230: variable '_' is unbound
%   14|     Result = [#{cd_gender => mochi_get(gender, Key0), cd_marital_status => mochi_get(marital, Key0), cd_education_status => mochi_get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => mochi_get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => mochi_get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => mochi_get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => mochi_get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => mochi_get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => mochi_get(cd_gender, A), marital => mochi_get(cd_marital_status, A), education => mochi_get(cd_education_status, A), purchase => mochi_get(cd_purchase_estimate, A), credit => mochi_get(cd_credit_rating, A), dep => mochi_get(cd_dep_count, A), depemp => mochi_get(cd_dep_employed_count, A), depcol => mochi_get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |                                                                                                                                                                                                                                      ^

/tmp/q10.erl:14:319: variable '_' is unbound
%   14|     Result = [#{cd_gender => mochi_get(gender, Key0), cd_marital_status => mochi_get(marital, Key0), cd_education_status => mochi_get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => mochi_get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => mochi_get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => mochi_get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => mochi_get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => mochi_get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => mochi_get(cd_gender, A), marital => mochi_get(cd_marital_status, A), education => mochi_get(cd_education_status, A), purchase => mochi_get(cd_purchase_estimate, A), credit => mochi_get(cd_credit_rating, A), dep => mochi_get(cd_dep_count, A), depemp => mochi_get(cd_dep_employed_count, A), depcol => mochi_get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |                                                                                                                                                                                                                                                                                                                               ^

/tmp/q10.erl:14:381: variable '_' is unbound
%   14|     Result = [#{cd_gender => mochi_get(gender, Key0), cd_marital_status => mochi_get(marital, Key0), cd_education_status => mochi_get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => mochi_get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => mochi_get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => mochi_get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => mochi_get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => mochi_get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => mochi_get(cd_gender, A), marital => mochi_get(cd_marital_status, A), education => mochi_get(cd_education_status, A), purchase => mochi_get(cd_purchase_estimate, A), credit => mochi_get(cd_credit_rating, A), dep => mochi_get(cd_dep_count, A), depemp => mochi_get(cd_dep_employed_count, A), depcol => mochi_get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |                                                                                                                                                                                                                                                                                                                                                                                             ^

/tmp/q10.erl:14:464: variable '_' is unbound
%   14|     Result = [#{cd_gender => mochi_get(gender, Key0), cd_marital_status => mochi_get(marital, Key0), cd_education_status => mochi_get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => mochi_get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => mochi_get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => mochi_get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => mochi_get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => mochi_get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => mochi_get(cd_gender, A), marital => mochi_get(cd_marital_status, A), education => mochi_get(cd_education_status, A), purchase => mochi_get(cd_purchase_estimate, A), credit => mochi_get(cd_credit_rating, A), dep => mochi_get(cd_dep_count, A), depemp => mochi_get(cd_dep_employed_count, A), depcol => mochi_get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ^

/tmp/q10.erl:14:526: variable '_' is unbound
%   14|     Result = [#{cd_gender => mochi_get(gender, Key0), cd_marital_status => mochi_get(marital, Key0), cd_education_status => mochi_get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => mochi_get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => mochi_get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => mochi_get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => mochi_get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => mochi_get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => mochi_get(cd_gender, A), marital => mochi_get(cd_marital_status, A), education => mochi_get(cd_education_status, A), purchase => mochi_get(cd_purchase_estimate, A), credit => mochi_get(cd_credit_rating, A), dep => mochi_get(cd_dep_count, A), depemp => mochi_get(cd_dep_employed_count, A), depcol => mochi_get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |

/tmp/q10.erl:14:602: variable '_' is unbound
%   14|     Result = [#{cd_gender => mochi_get(gender, Key0), cd_marital_status => mochi_get(marital, Key0), cd_education_status => mochi_get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => mochi_get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => mochi_get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => mochi_get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => mochi_get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => mochi_get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => mochi_get(cd_gender, A), marital => mochi_get(cd_marital_status, A), education => mochi_get(cd_education_status, A), purchase => mochi_get(cd_purchase_estimate, A), credit => mochi_get(cd_credit_rating, A), dep => mochi_get(cd_dep_count, A), depemp => mochi_get(cd_dep_employed_count, A), depcol => mochi_get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |

/tmp/q10.erl:14:664: variable '_' is unbound
%   14|     Result = [#{cd_gender => mochi_get(gender, Key0), cd_marital_status => mochi_get(marital, Key0), cd_education_status => mochi_get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => mochi_get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => mochi_get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => mochi_get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => mochi_get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => mochi_get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => mochi_get(cd_gender, A), marital => mochi_get(cd_marital_status, A), education => mochi_get(cd_education_status, A), purchase => mochi_get(cd_purchase_estimate, A), credit => mochi_get(cd_credit_rating, A), dep => mochi_get(cd_dep_count, A), depemp => mochi_get(cd_dep_employed_count, A), depcol => mochi_get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |

/tmp/q10.erl:14:752: variable '_' is unbound
%   14|     Result = [#{cd_gender => mochi_get(gender, Key0), cd_marital_status => mochi_get(marital, Key0), cd_education_status => mochi_get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => mochi_get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => mochi_get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => mochi_get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => mochi_get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => mochi_get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => mochi_get(cd_gender, A), marital => mochi_get(cd_marital_status, A), education => mochi_get(cd_education_status, A), purchase => mochi_get(cd_purchase_estimate, A), credit => mochi_get(cd_credit_rating, A), dep => mochi_get(cd_dep_count, A), depemp => mochi_get(cd_dep_employed_count, A), depcol => mochi_get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |

/tmp/q10.erl:14:814: variable '_' is unbound
%   14|     Result = [#{cd_gender => mochi_get(gender, Key0), cd_marital_status => mochi_get(marital, Key0), cd_education_status => mochi_get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => mochi_get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => mochi_get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => mochi_get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => mochi_get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => mochi_get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => mochi_get(cd_gender, A), marital => mochi_get(cd_marital_status, A), education => mochi_get(cd_education_status, A), purchase => mochi_get(cd_purchase_estimate, A), credit => mochi_get(cd_credit_rating, A), dep => mochi_get(cd_dep_count, A), depemp => mochi_get(cd_dep_employed_count, A), depcol => mochi_get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |

/tmp/q10.erl:14:901: variable '_' is unbound
%   14|     Result = [#{cd_gender => mochi_get(gender, Key0), cd_marital_status => mochi_get(marital, Key0), cd_education_status => mochi_get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => mochi_get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => mochi_get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => mochi_get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => mochi_get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => mochi_get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => mochi_get(cd_gender, A), marital => mochi_get(cd_marital_status, A), education => mochi_get(cd_education_status, A), purchase => mochi_get(cd_purchase_estimate, A), credit => mochi_get(cd_credit_rating, A), dep => mochi_get(cd_dep_count, A), depemp => mochi_get(cd_dep_employed_count, A), depcol => mochi_get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |

/tmp/q10.erl:14:963: variable '_' is unbound
%   14|     Result = [#{cd_gender => mochi_get(gender, Key0), cd_marital_status => mochi_get(marital, Key0), cd_education_status => mochi_get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => mochi_get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => mochi_get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => mochi_get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => mochi_get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => mochi_get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => mochi_get(cd_gender, A), marital => mochi_get(cd_marital_status, A), education => mochi_get(cd_education_status, A), purchase => mochi_get(cd_purchase_estimate, A), credit => mochi_get(cd_credit_rating, A), dep => mochi_get(cd_dep_count, A), depemp => mochi_get(cd_dep_employed_count, A), depcol => mochi_get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |

/tmp/q10.erl:10:5: Warning: variable 'Web_sales' is unused
%   10|     Web_sales = [],
%     |     ^

/tmp/q10.erl:11:5: Warning: variable 'Catalog_sales' is unused
%   11|     Catalog_sales = [],
%     |     ^

escript: There were compilation errors.
