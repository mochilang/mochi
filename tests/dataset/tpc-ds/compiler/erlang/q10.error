run: exit status 127
/tmp/q10.erl:14:165: variable '_' is unbound
%   14|     Result = [#{cd_gender => maps:get(gender, Key0), cd_marital_status => maps:get(marital, Key0), cd_education_status => maps:get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => maps:get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => maps:get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => maps:get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => maps:get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => maps:get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => maps:get(cd_gender, A), marital => maps:get(cd_marital_status, A), education => maps:get(cd_education_status, A), purchase => maps:get(cd_purchase_estimate, A), credit => maps:get(cd_credit_rating, A), dep => maps:get(cd_dep_count, A), depemp => maps:get(cd_dep_employed_count, A), depcol => maps:get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |                                                                                                                                                                     ^

/tmp/q10.erl:14:227: variable '_' is unbound
%   14|     Result = [#{cd_gender => maps:get(gender, Key0), cd_marital_status => maps:get(marital, Key0), cd_education_status => maps:get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => maps:get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => maps:get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => maps:get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => maps:get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => maps:get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => maps:get(cd_gender, A), marital => maps:get(cd_marital_status, A), education => maps:get(cd_education_status, A), purchase => maps:get(cd_purchase_estimate, A), credit => maps:get(cd_credit_rating, A), dep => maps:get(cd_dep_count, A), depemp => maps:get(cd_dep_employed_count, A), depcol => maps:get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |                                                                                                                                                                                                                                   ^

/tmp/q10.erl:14:315: variable '_' is unbound
%   14|     Result = [#{cd_gender => maps:get(gender, Key0), cd_marital_status => maps:get(marital, Key0), cd_education_status => maps:get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => maps:get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => maps:get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => maps:get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => maps:get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => maps:get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => maps:get(cd_gender, A), marital => maps:get(cd_marital_status, A), education => maps:get(cd_education_status, A), purchase => maps:get(cd_purchase_estimate, A), credit => maps:get(cd_credit_rating, A), dep => maps:get(cd_dep_count, A), depemp => maps:get(cd_dep_employed_count, A), depcol => maps:get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |                                                                                                                                                                                                                                                                                                                           ^

/tmp/q10.erl:14:377: variable '_' is unbound
%   14|     Result = [#{cd_gender => maps:get(gender, Key0), cd_marital_status => maps:get(marital, Key0), cd_education_status => maps:get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => maps:get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => maps:get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => maps:get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => maps:get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => maps:get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => maps:get(cd_gender, A), marital => maps:get(cd_marital_status, A), education => maps:get(cd_education_status, A), purchase => maps:get(cd_purchase_estimate, A), credit => maps:get(cd_credit_rating, A), dep => maps:get(cd_dep_count, A), depemp => maps:get(cd_dep_employed_count, A), depcol => maps:get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |                                                                                                                                                                                                                                                                                                                                                                                         ^

/tmp/q10.erl:14:459: variable '_' is unbound
%   14|     Result = [#{cd_gender => maps:get(gender, Key0), cd_marital_status => maps:get(marital, Key0), cd_education_status => maps:get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => maps:get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => maps:get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => maps:get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => maps:get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => maps:get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => maps:get(cd_gender, A), marital => maps:get(cd_marital_status, A), education => maps:get(cd_education_status, A), purchase => maps:get(cd_purchase_estimate, A), credit => maps:get(cd_credit_rating, A), dep => maps:get(cd_dep_count, A), depemp => maps:get(cd_dep_employed_count, A), depcol => maps:get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ^

/tmp/q10.erl:14:521: variable '_' is unbound
%   14|     Result = [#{cd_gender => maps:get(gender, Key0), cd_marital_status => maps:get(marital, Key0), cd_education_status => maps:get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => maps:get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => maps:get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => maps:get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => maps:get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => maps:get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => maps:get(cd_gender, A), marital => maps:get(cd_marital_status, A), education => maps:get(cd_education_status, A), purchase => maps:get(cd_purchase_estimate, A), credit => maps:get(cd_credit_rating, A), dep => maps:get(cd_dep_count, A), depemp => maps:get(cd_dep_employed_count, A), depcol => maps:get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ^

/tmp/q10.erl:14:596: variable '_' is unbound
%   14|     Result = [#{cd_gender => maps:get(gender, Key0), cd_marital_status => maps:get(marital, Key0), cd_education_status => maps:get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => maps:get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => maps:get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => maps:get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => maps:get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => maps:get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => maps:get(cd_gender, A), marital => maps:get(cd_marital_status, A), education => maps:get(cd_education_status, A), purchase => maps:get(cd_purchase_estimate, A), credit => maps:get(cd_credit_rating, A), dep => maps:get(cd_dep_count, A), depemp => maps:get(cd_dep_employed_count, A), depcol => maps:get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |

/tmp/q10.erl:14:658: variable '_' is unbound
%   14|     Result = [#{cd_gender => maps:get(gender, Key0), cd_marital_status => maps:get(marital, Key0), cd_education_status => maps:get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => maps:get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => maps:get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => maps:get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => maps:get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => maps:get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => maps:get(cd_gender, A), marital => maps:get(cd_marital_status, A), education => maps:get(cd_education_status, A), purchase => maps:get(cd_purchase_estimate, A), credit => maps:get(cd_credit_rating, A), dep => maps:get(cd_dep_count, A), depemp => maps:get(cd_dep_employed_count, A), depcol => maps:get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |

/tmp/q10.erl:14:745: variable '_' is unbound
%   14|     Result = [#{cd_gender => maps:get(gender, Key0), cd_marital_status => maps:get(marital, Key0), cd_education_status => maps:get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => maps:get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => maps:get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => maps:get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => maps:get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => maps:get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => maps:get(cd_gender, A), marital => maps:get(cd_marital_status, A), education => maps:get(cd_education_status, A), purchase => maps:get(cd_purchase_estimate, A), credit => maps:get(cd_credit_rating, A), dep => maps:get(cd_dep_count, A), depemp => maps:get(cd_dep_employed_count, A), depcol => maps:get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |

/tmp/q10.erl:14:807: variable '_' is unbound
%   14|     Result = [#{cd_gender => maps:get(gender, Key0), cd_marital_status => maps:get(marital, Key0), cd_education_status => maps:get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => maps:get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => maps:get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => maps:get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => maps:get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => maps:get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => maps:get(cd_gender, A), marital => maps:get(cd_marital_status, A), education => maps:get(cd_education_status, A), purchase => maps:get(cd_purchase_estimate, A), credit => maps:get(cd_credit_rating, A), dep => maps:get(cd_dep_count, A), depemp => maps:get(cd_dep_employed_count, A), depcol => maps:get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |

/tmp/q10.erl:14:893: variable '_' is unbound
%   14|     Result = [#{cd_gender => maps:get(gender, Key0), cd_marital_status => maps:get(marital, Key0), cd_education_status => maps:get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => maps:get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => maps:get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => maps:get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => maps:get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => maps:get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => maps:get(cd_gender, A), marital => maps:get(cd_marital_status, A), education => maps:get(cd_education_status, A), purchase => maps:get(cd_purchase_estimate, A), credit => maps:get(cd_credit_rating, A), dep => maps:get(cd_dep_count, A), depemp => maps:get(cd_dep_employed_count, A), depcol => maps:get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |

/tmp/q10.erl:14:955: variable '_' is unbound
%   14|     Result = [#{cd_gender => maps:get(gender, Key0), cd_marital_status => maps:get(marital, Key0), cd_education_status => maps:get(education, Key0), cnt1 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_purchase_estimate => maps:get(purchase, Key0), cnt2 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_credit_rating => maps:get(credit, Key0), cnt3 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_count => maps:get(dep, Key0), cnt4 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_employed_count => maps:get(depemp, Key0), cnt5 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end), cd_dep_college_count => maps:get(depcol, Key0), cnt6 => (case [_ || _ <- Val0] of #{items := It} -> length(It); _ -> length([_ || _ <- Val0]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{gender => maps:get(cd_gender, A), marital => maps:get(cd_marital_status, A), education => maps:get(cd_education_status, A), purchase => maps:get(cd_purchase_estimate, A), credit => maps:get(cd_credit_rating, A), dep => maps:get(cd_dep_count, A), depemp => maps:get(cd_dep_employed_count, A), depcol => maps:get(cd_dep_college_count, A)}, A} || A <- Active]))],
%     |

/tmp/q10.erl:10:5: Warning: variable 'Web_sales' is unused
%   10|     Web_sales = [],
%     |     ^

/tmp/q10.erl:11:5: Warning: variable 'Catalog_sales' is unused
%   11|     Catalog_sales = [],
%     |     ^

escript: There were compilation errors.
