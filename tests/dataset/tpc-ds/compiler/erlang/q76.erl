#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2020-01-02T15:04:05Z
% q76.erl - generated from q76.mochi

main(_) ->
    Date_dim = [#{d_date_sk => 1, d_year => 1998, d_qoy => 1}],
    Item = [#{i_item_sk => 1, i_category => "CatA"}, #{i_item_sk => 2, i_category => "CatB"}, #{i_item_sk => 3, i_category => "CatC"}],
    Store_sales = [#{ss_customer_sk => undefined, ss_item_sk => 1, ss_ext_sales_price => 10, ss_sold_date_sk => 1}],
    Web_sales = [#{ws_bill_customer_sk => undefined, ws_item_sk => 2, ws_ext_sales_price => 15, ws_sold_date_sk => 1}],
    Catalog_sales = [#{cs_bill_customer_sk => undefined, cs_item_sk => 3, cs_ext_sales_price => 20, cs_sold_date_sk => 1}],
    Store_part = [#{channel => "store", col_name => mochi_get(ss_customer_sk, Ss), d_year => mochi_get(d_year, D), d_qoy => mochi_get(d_qoy, D), i_category => mochi_get(i_category, I), ext_sales_price => mochi_get(ss_ext_sales_price, Ss)} || Ss <- Store_sales, I <- Item, D <- Date_dim, (mochi_get(i_item_sk, I) == mochi_get(ss_item_sk, Ss)), (mochi_get(d_date_sk, D) == mochi_get(ss_sold_date_sk, Ss)), (mochi_get(ss_customer_sk, Ss) == undefined)],
    Web_part = [#{channel => "web", col_name => mochi_get(ws_bill_customer_sk, Ws), d_year => mochi_get(d_year, D), d_qoy => mochi_get(d_qoy, D), i_category => mochi_get(i_category, I), ext_sales_price => mochi_get(ws_ext_sales_price, Ws)} || Ws <- Web_sales, I <- Item, D <- Date_dim, (mochi_get(i_item_sk, I) == mochi_get(ws_item_sk, Ws)), (mochi_get(d_date_sk, D) == mochi_get(ws_sold_date_sk, Ws)), (mochi_get(ws_bill_customer_sk, Ws) == undefined)],
    Catalog_part = [#{channel => "catalog", col_name => mochi_get(cs_bill_customer_sk, Cs), d_year => mochi_get(d_year, D), d_qoy => mochi_get(d_qoy, D), i_category => mochi_get(i_category, I), ext_sales_price => mochi_get(cs_ext_sales_price, Cs)} || Cs <- Catalog_sales, I <- Item, D <- Date_dim, (mochi_get(i_item_sk, I) == mochi_get(cs_item_sk, Cs)), (mochi_get(d_date_sk, D) == mochi_get(cs_sold_date_sk, Cs)), (mochi_get(cs_bill_customer_sk, Cs) == undefined)],
    All_rows = concat(Store_part, Web_part, Catalog_part),
    Result = [V || {_, V} <- lists:keysort(1, [{mochi_get(channel, Key0), #{channel => mochi_get(channel, Key0), col_name => mochi_get(col_name, Key0), d_year => mochi_get(d_year, Key0), d_qoy => mochi_get(d_qoy, Key0), i_category => mochi_get(i_category, Key0), sales_cnt => (case Val0 of #{items := It} -> length(It); _ -> length(Val0) end), sales_amt => lists:sum([mochi_get(ext_sales_price, mochi_get(r, X)) || X <- Val0])}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{channel => mochi_get(channel, R), col_name => mochi_get(col_name, R), d_year => mochi_get(d_year, R), d_qoy => mochi_get(d_qoy, R), i_category => mochi_get(i_category, R)}, R} || R <- All_rows]))])],
    mochi_json(Result),
    (case (Result == [#{channel => "store", col_name => undefined, d_year => 1998, d_qoy => 1, i_category => "CatA", sales_cnt => 1, sales_amt => 10}, #{channel => "web", col_name => undefined, d_year => 1998, d_qoy => 1, i_category => "CatB", sales_cnt => 1, sales_amt => 15}, #{channel => "catalog", col_name => undefined, d_year => 1998, d_qoy => 1, i_category => "CatC", sales_cnt => 1, sales_amt => 20}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub);
                        _ -> erlang:error({badkey, K})
                    end;
                _ -> erlang:error({badkey, K})
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
