#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:31:22Z
% q36.erl - generated from q36.mochi

main(_) ->
    Store_sales = [#{ss_item_sk => 1, ss_store_sk => 1, ss_sold_date_sk => 1, ss_ext_sales_price => 100, ss_net_profit => 20}, #{ss_item_sk => 2, ss_store_sk => 1, ss_sold_date_sk => 1, ss_ext_sales_price => 200, ss_net_profit => 50}, #{ss_item_sk => 3, ss_store_sk => 2, ss_sold_date_sk => 1, ss_ext_sales_price => 150, ss_net_profit => 30}],
    Item = [#{i_item_sk => 1, i_category => "Books", i_class => "C1"}, #{i_item_sk => 2, i_category => "Books", i_class => "C2"}, #{i_item_sk => 3, i_category => "Electronics", i_class => "C3"}],
    Store = [#{s_store_sk => 1, s_state => "A"}, #{s_store_sk => 2, s_state => "B"}],
    Date_dim = [#{d_date_sk => 1, d_year => 2000}],
    Result = [V || {_, V} <- lists:keysort(1, [{[maps:get(category, Key0), maps:get(class, Key0)], #{i_category => maps:get(category, Key0), i_class => maps:get(class, Key0), gross_margin => (lists:sum([maps:get(ss_net_profit, X) || X <- Val0]) / lists:sum([maps:get(ss_ext_sales_price, X) || X <- Val0]))}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{category => maps:get(i_category, I), class => maps:get(i_class, I)}, #{ss => Ss, d => D, i => I, s => S}} || Ss <- Store_sales, D <- Date_dim, I <- Item, S <- Store, (maps:get(ss_sold_date_sk, Ss) == maps:get(d_date_sk, D)), (maps:get(ss_item_sk, Ss) == maps:get(i_item_sk, I)), (maps:get(ss_store_sk, Ss) == maps:get(s_store_sk, S)), ((maps:get(d_year, D) == 2000) andalso (((maps:get(s_state, S) == "A") orelse (maps:get(s_state, S) == "B"))))]))])],
    mochi_json(Result),
    (case (Result == [#{i_category => "Books", i_class => "C1", gross_margin => 0.2}, #{i_category => "Books", i_class => "C2", gross_margin => 0.25}, #{i_category => "Electronics", i_class => "C3", gross_margin => 0.2}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
