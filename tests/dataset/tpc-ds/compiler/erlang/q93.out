%    9|     T = [#{ss_customer_sk => maps:get(ss_customer_sk, Ss), act_sales => (case (Sr /= undefined) of true -> (((maps:get(ss_quantity, Ss) - maps:get(sr_return_quantity, Sr))) * maps:get(ss_sales_price, Ss)); _ -> (maps:get(ss_quantity, Ss) * maps:get(ss_sales_price, Ss)) end)} || Ss <- Store_sales, {Ss, Sr} <- mochi_left_join_item(Ss, Store_returns, fun(Ss, Sr) -> ((maps:get(ss_item_sk, Ss) == maps:get(sr_item_sk, Sr)) andalso (maps:get(ss_ticket_number, Ss) == maps:get(sr_ticket_number, Sr))) end), {Ss, R} <- mochi_left_join_item(Ss, Reason, fun(Ss, R) -> ((Sr /= undefined) andalso (maps:get(sr_reason_sk, Sr) == maps:get(r_reason_sk, R))) end), ((R == undefined) orelse (maps:get(r_reason_desc, R) == "ReasonA"))],
%     |                                                                                                                                                                                                                                                                                                            ^
%    9|     T = [#{ss_customer_sk => maps:get(ss_customer_sk, Ss), act_sales => (case (Sr /= undefined) of true -> (((maps:get(ss_quantity, Ss) - maps:get(sr_return_quantity, Sr))) * maps:get(ss_sales_price, Ss)); _ -> (maps:get(ss_quantity, Ss) * maps:get(ss_sales_price, Ss)) end)} || Ss <- Store_sales, {Ss, Sr} <- mochi_left_join_item(Ss, Store_returns, fun(Ss, Sr) -> ((maps:get(ss_item_sk, Ss) == maps:get(sr_item_sk, Sr)) andalso (maps:get(ss_ticket_number, Ss) == maps:get(sr_ticket_number, Sr))) end), {Ss, R} <- mochi_left_join_item(Ss, Reason, fun(Ss, R) -> ((Sr /= undefined) andalso (maps:get(sr_reason_sk, Sr) == maps:get(r_reason_sk, R))) end), ((R == undefined) orelse (maps:get(r_reason_desc, R) == "ReasonA"))],
%     |                                                                                                                                                                                                                                                                                                                                                                   ^
%    9|     T = [#{ss_customer_sk => maps:get(ss_customer_sk, Ss), act_sales => (case (Sr /= undefined) of true -> (((maps:get(ss_quantity, Ss) - maps:get(sr_return_quantity, Sr))) * maps:get(ss_sales_price, Ss)); _ -> (maps:get(ss_quantity, Ss) * maps:get(ss_sales_price, Ss)) end)} || Ss <- Store_sales, {Ss, Sr} <- mochi_left_join_item(Ss, Store_returns, fun(Ss, Sr) -> ((maps:get(ss_item_sk, Ss) == maps:get(sr_item_sk, Sr)) andalso (maps:get(ss_ticket_number, Ss) == maps:get(sr_ticket_number, Sr))) end), {Ss, R} <- mochi_left_join_item(Ss, Reason, fun(Ss, R) -> ((Sr /= undefined) andalso (maps:get(sr_reason_sk, Sr) == maps:get(r_reason_sk, R))) end), ((R == undefined) orelse (maps:get(r_reason_desc, R) == "ReasonA"))],
%     |
%    9|     T = [#{ss_customer_sk => maps:get(ss_customer_sk, Ss), act_sales => (case (Sr /= undefined) of true -> (((maps:get(ss_quantity, Ss) - maps:get(sr_return_quantity, Sr))) * maps:get(ss_sales_price, Ss)); _ -> (maps:get(ss_quantity, Ss) * maps:get(ss_sales_price, Ss)) end)} || Ss <- Store_sales, {Ss, Sr} <- mochi_left_join_item(Ss, Store_returns, fun(Ss, Sr) -> ((maps:get(ss_item_sk, Ss) == maps:get(sr_item_sk, Sr)) andalso (maps:get(ss_ticket_number, Ss) == maps:get(sr_ticket_number, Sr))) end), {Ss, R} <- mochi_left_join_item(Ss, Reason, fun(Ss, R) -> ((Sr /= undefined) andalso (maps:get(sr_reason_sk, Sr) == maps:get(r_reason_sk, R))) end), ((R == undefined) orelse (maps:get(r_reason_desc, R) == "ReasonA"))],
%     |
%    9|     T = [#{ss_customer_sk => maps:get(ss_customer_sk, Ss), act_sales => (case (Sr /= undefined) of true -> (((maps:get(ss_quantity, Ss) - maps:get(sr_return_quantity, Sr))) * maps:get(ss_sales_price, Ss)); _ -> (maps:get(ss_quantity, Ss) * maps:get(ss_sales_price, Ss)) end)} || Ss <- Store_sales, {Ss, Sr} <- mochi_left_join_item(Ss, Store_returns, fun(Ss, Sr) -> ((maps:get(ss_item_sk, Ss) == maps:get(sr_item_sk, Sr)) andalso (maps:get(ss_ticket_number, Ss) == maps:get(sr_ticket_number, Sr))) end), {Ss, R} <- mochi_left_join_item(Ss, Reason, fun(Ss, R) -> ((Sr /= undefined) andalso (maps:get(sr_reason_sk, Sr) == maps:get(r_reason_sk, R))) end), ((R == undefined) orelse (maps:get(r_reason_desc, R) == "ReasonA"))],
%     |
%   21| mochi_left_join(L, R, Fun) ->
%     | ^
[{"ss_customer_sk":1,"sumsales":40},{"ss_customer_sk":2,"sumsales":60}]
