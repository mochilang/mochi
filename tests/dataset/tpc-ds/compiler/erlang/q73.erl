#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:31:54Z
% q73.erl - generated from q73.mochi

main(_) ->
    Store_sales = [#{ss_ticket_number => 1, ss_customer_sk => 1, ss_sold_date_sk => 1, ss_store_sk => 1, ss_hdemo_sk => 1}],
    Date_dim = [#{d_date_sk => 1, d_dom => 1, d_year => 1998}],
    Store = [#{s_store_sk => 1, s_county => "A"}],
    Household_demographics = [#{hd_demo_sk => 1, hd_buy_potential => "1001-5000", hd_vehicle_count => 2, hd_dep_count => 3}],
    Customer = [#{c_customer_sk => 1, c_last_name => "Smith", c_first_name => "Alice", c_salutation => "Ms.", c_preferred_cust_flag => "Y"}],
    Groups = [#{key => Key0, cnt => (case Val0 of #{items := It} -> length(It); _ -> length(Val0) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{ticket => maps:get(ss_ticket_number, Ss), cust => maps:get(ss_customer_sk, Ss)}, #{ss => Ss, d => D, s => S, hd => Hd}} || Ss <- Store_sales, D <- Date_dim, S <- Store, Hd <- Household_demographics, (maps:get(d_date_sk, D) == maps:get(ss_sold_date_sk, Ss)), (maps:get(s_store_sk, S) == maps:get(ss_store_sk, Ss)), (maps:get(hd_demo_sk, Hd) == maps:get(ss_hdemo_sk, Ss)), (((((((maps:get(d_dom, D) >= 1) andalso (maps:get(d_dom, D) =< 2)) andalso (((maps:get(hd_buy_potential, Hd) == "1001-5000") orelse (maps:get(hd_buy_potential, Hd) == "0-500")))) andalso (maps:get(hd_vehicle_count, Hd) > 0)) andalso ((maps:get(hd_dep_count, Hd) / maps:get(hd_vehicle_count, Hd)) > 1)) andalso ((((maps:get(d_year, D) == 1998) orelse (maps:get(d_year, D) == 1999)) orelse (maps:get(d_year, D) == 2000)))) andalso (maps:get(s_county, S) == "A"))]))],
    Result = [V || {_, V} <- lists:keysort(1, [{[-maps:get(cnt, G), maps:get(c_last_name, C)], #{c_last_name => maps:get(c_last_name, C), c_first_name => maps:get(c_first_name, C), c_salutation => maps:get(c_salutation, C), c_preferred_cust_flag => maps:get(c_preferred_cust_flag, C), ss_ticket_number => maps:get(ticket, maps:get(key, G)), cnt => maps:get(cnt, G)}} || G <- Groups, C <- Customer, (maps:get(c_customer_sk, C) == maps:get(cust, maps:get(key, G))), ((maps:get(cnt, G) >= 1) andalso (maps:get(cnt, G) =< 5))])],
    mochi_json(Result),
    (case (Result == [#{c_last_name => "Smith", c_first_name => "Alice", c_salutation => "Ms.", c_preferred_cust_flag => "Y", ss_ticket_number => 1, cnt => 1}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
