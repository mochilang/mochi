#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-15T04:59:00Z
% q97.erl - generated from q97.mochi

main(_) ->
    Store_sales = [#{ss_customer_sk => 1, ss_item_sk => 1}, #{ss_customer_sk => 2, ss_item_sk => 1}],
    Catalog_sales = [#{cs_bill_customer_sk => 1, cs_item_sk => 1}, #{cs_bill_customer_sk => 3, cs_item_sk => 2}],
    Ssci = [#{customer_sk => maps:get(customer_sk, Key0), item_sk => maps:get(item_sk, Key0)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{customer_sk => maps:get(ss_customer_sk, Ss), item_sk => maps:get(ss_item_sk, Ss)}, Ss} || Ss <- Store_sales]))],
    Csci = [#{customer_sk => maps:get(customer_sk, Key1), item_sk => maps:get(item_sk, Key1)} || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{#{customer_sk => maps:get(cs_bill_customer_sk, Cs), item_sk => maps:get(cs_item_sk, Cs)}, Cs} || Cs <- Catalog_sales]))],
    Both = (case [1 || S <- Ssci, C <- Csci, ((maps:get(customer_sk, S) == maps:get(customer_sk, C)) andalso (maps:get(item_sk, S) == maps:get(item_sk, C)))] of #{items := It} -> length(It); _ -> length([1 || S <- Ssci, C <- Csci, ((maps:get(customer_sk, S) == maps:get(customer_sk, C)) andalso (maps:get(item_sk, S) == maps:get(item_sk, C)))]) end),
    Store_only = (case [1 || S <- Ssci, not (lists:any(fun(C) -> ((maps:get(customer_sk, S) == maps:get(customer_sk, C)) andalso (maps:get(item_sk, S) == maps:get(item_sk, C))) end, Csci))] of #{items := It} -> length(It); _ -> length([1 || S <- Ssci, not (lists:any(fun(C) -> ((maps:get(customer_sk, S) == maps:get(customer_sk, C)) andalso (maps:get(item_sk, S) == maps:get(item_sk, C))) end, Csci))]) end),
    Catalog_only = (case [1 || C <- Csci, not (lists:any(fun(S) -> ((maps:get(customer_sk, S) == maps:get(customer_sk, C)) andalso (maps:get(item_sk, S) == maps:get(item_sk, C))) end, Ssci))] of #{items := It} -> length(It); _ -> length([1 || C <- Csci, not (lists:any(fun(S) -> ((maps:get(customer_sk, S) == maps:get(customer_sk, C)) andalso (maps:get(item_sk, S) == maps:get(item_sk, C))) end, Ssci))]) end),
    Result = #{store_only => Store_only, catalog_only => Catalog_only, store_and_catalog => Both},
    mochi_json(Result),
    (case (((maps:get(store_only, Result) == 1) andalso (maps:get(catalog_only, Result) == 1)) andalso (maps:get(store_and_catalog, Result) == 1)) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
