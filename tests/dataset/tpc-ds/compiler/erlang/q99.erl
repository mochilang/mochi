#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2020-01-02T15:04:05Z
% q99.erl - generated from q99.mochi

main(_) ->
    Catalog_sales = [#{cs_ship_date_sk => 31, cs_sold_date_sk => 1, cs_warehouse_sk => 1, cs_ship_mode_sk => 1, cs_call_center_sk => 1}, #{cs_ship_date_sk => 51, cs_sold_date_sk => 1, cs_warehouse_sk => 1, cs_ship_mode_sk => 1, cs_call_center_sk => 1}, #{cs_ship_date_sk => 71, cs_sold_date_sk => 1, cs_warehouse_sk => 1, cs_ship_mode_sk => 1, cs_call_center_sk => 1}, #{cs_ship_date_sk => 101, cs_sold_date_sk => 1, cs_warehouse_sk => 1, cs_ship_mode_sk => 1, cs_call_center_sk => 1}, #{cs_ship_date_sk => 131, cs_sold_date_sk => 1, cs_warehouse_sk => 1, cs_ship_mode_sk => 1, cs_call_center_sk => 1}],
    Warehouse = [#{w_warehouse_sk => 1, w_warehouse_name => "Warehouse1"}],
    Ship_mode = [#{sm_ship_mode_sk => 1, sm_type => "EXP"}],
    Call_center = [#{cc_call_center_sk => 1, cc_name => "CC1"}],
    Grouped = [#{warehouse => mochi_get(warehouse, Key0), sm_type => mochi_get(sm_type, Key0), cc_name => mochi_get(cc_name, Key0), d30 => (case [X || X <- Val0, ((mochi_get(cs_ship_date_sk, X) - mochi_get(cs_sold_date_sk, X)) =< 30)] of #{items := It} -> length(It); _ -> length([X || X <- Val0, ((mochi_get(cs_ship_date_sk, X) - mochi_get(cs_sold_date_sk, X)) =< 30)]) end), d60 => (case [X || X <- Val0, (((mochi_get(cs_ship_date_sk, X) - mochi_get(cs_sold_date_sk, X)) > 30) andalso ((mochi_get(cs_ship_date_sk, X) - mochi_get(cs_sold_date_sk, X)) =< 60))] of #{items := It} -> length(It); _ -> length([X || X <- Val0, (((mochi_get(cs_ship_date_sk, X) - mochi_get(cs_sold_date_sk, X)) > 30) andalso ((mochi_get(cs_ship_date_sk, X) - mochi_get(cs_sold_date_sk, X)) =< 60))]) end), d90 => (case [X || X <- Val0, (((mochi_get(cs_ship_date_sk, X) - mochi_get(cs_sold_date_sk, X)) > 60) andalso ((mochi_get(cs_ship_date_sk, X) - mochi_get(cs_sold_date_sk, X)) =< 90))] of #{items := It} -> length(It); _ -> length([X || X <- Val0, (((mochi_get(cs_ship_date_sk, X) - mochi_get(cs_sold_date_sk, X)) > 60) andalso ((mochi_get(cs_ship_date_sk, X) - mochi_get(cs_sold_date_sk, X)) =< 90))]) end), d120 => (case [X || X <- Val0, (((mochi_get(cs_ship_date_sk, X) - mochi_get(cs_sold_date_sk, X)) > 90) andalso ((mochi_get(cs_ship_date_sk, X) - mochi_get(cs_sold_date_sk, X)) =< 120))] of #{items := It} -> length(It); _ -> length([X || X <- Val0, (((mochi_get(cs_ship_date_sk, X) - mochi_get(cs_sold_date_sk, X)) > 90) andalso ((mochi_get(cs_ship_date_sk, X) - mochi_get(cs_sold_date_sk, X)) =< 120))]) end), dmore => (case [X || X <- Val0, ((mochi_get(cs_ship_date_sk, X) - mochi_get(cs_sold_date_sk, X)) > 120)] of #{items := It} -> length(It); _ -> length([X || X <- Val0, ((mochi_get(cs_ship_date_sk, X) - mochi_get(cs_sold_date_sk, X)) > 120)]) end)} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{warehouse => substr(mochi_get(w_warehouse_name, W), 0, 20), sm_type => mochi_get(sm_type, Sm), cc_name => mochi_get(cc_name, Cc)}, #{cs => Cs, w => W, sm => Sm, cc => Cc}} || Cs <- Catalog_sales, W <- Warehouse, Sm <- Ship_mode, Cc <- Call_center, (mochi_get(cs_warehouse_sk, Cs) == mochi_get(w_warehouse_sk, W)), (mochi_get(cs_ship_mode_sk, Cs) == mochi_get(sm_ship_mode_sk, Sm)), (mochi_get(cs_call_center_sk, Cs) == mochi_get(cc_call_center_sk, Cc))]))],
    mochi_json(Grouped),
    (case (Grouped == [#{warehouse => "Warehouse1", sm_type => "EXP", cc_name => "CC1", d30 => 1, d60 => 1, d90 => 1, d120 => 1, dmore => 1}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub);
                        _ -> erlang:error({badkey, K})
                    end;
                _ -> erlang:error({badkey, K})
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
