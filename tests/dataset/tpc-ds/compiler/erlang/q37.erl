#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T07:25:51Z
% q37.erl - generated from q37.mochi

main(_) ->
    Item = [#{i_item_sk => 1, i_item_id => "I1", i_item_desc => "Item1", i_current_price => 30, i_manufact_id => 800}, #{i_item_sk => 2, i_item_id => "I2", i_item_desc => "Item2", i_current_price => 60, i_manufact_id => 801}],
    Inventory = [#{inv_item_sk => 1, inv_warehouse_sk => 1, inv_date_sk => 1, inv_quantity_on_hand => 200}, #{inv_item_sk => 2, inv_warehouse_sk => 1, inv_date_sk => 1, inv_quantity_on_hand => 300}],
    Date_dim = [#{d_date_sk => 1, d_date => "2000-01-15"}],
    Catalog_sales = [#{cs_item_sk => 1, cs_sold_date_sk => 1}],
    Result = [V || {_, V} <- lists:keysort(1, [{mochi_get(id, Key0), #{i_item_id => mochi_get(id, Key0), i_item_desc => mochi_get(desc, Key0), i_current_price => mochi_get(price, Key0)}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{id => mochi_get(i_item_id, I), desc => mochi_get(i_item_desc, I), price => mochi_get(i_current_price, I)}, #{i => I, inv => Inv, d => D, cs => Cs}} || I <- Item, Inv <- Inventory, D <- Date_dim, Cs <- Catalog_sales, (mochi_get(i_item_sk, I) == mochi_get(inv_item_sk, Inv)), (mochi_get(inv_date_sk, Inv) == mochi_get(d_date_sk, D)), (mochi_get(cs_item_sk, Cs) == mochi_get(i_item_sk, I)), ((((((mochi_get(i_current_price, I) >= 20) andalso (mochi_get(i_current_price, I) =< 50)) andalso (mochi_get(i_manufact_id, I) >= 800)) andalso (mochi_get(i_manufact_id, I) =< 803)) andalso (mochi_get(inv_quantity_on_hand, Inv) >= 100)) andalso (mochi_get(inv_quantity_on_hand, Inv) =< 500))]))])],
    mochi_json(Result),
    (case (Result == [#{i_item_id => "I1", i_item_desc => "Item1", i_current_price => 30}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
