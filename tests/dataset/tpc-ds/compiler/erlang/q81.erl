#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2020-01-02T15:04:05Z
% q81.erl - generated from q81.mochi

main(_) ->
    Catalog_returns = [#{cust => 1, state => "CA", amt => 40}, #{cust => 2, state => "CA", amt => 50}, #{cust => 3, state => "CA", amt => 81}, #{cust => 4, state => "TX", amt => 30}, #{cust => 5, state => "TX", amt => 20}],
    Avg_list = [#{state => Key0, avg_amt => (lists:sum([mochi_get(amt, X) || X <- Val0]) / length([mochi_get(amt, X) || X <- Val0]))} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{mochi_get(state, R), R} || R <- Catalog_returns]))],
    Avg_state = first([A || A <- Avg_list, (mochi_get(state, A) == "CA")]),
    Result_list = [mochi_get(amt, R) || R <- Catalog_returns, ((mochi_get(state, R) == "CA") andalso (mochi_get(amt, R) > (mochi_get(avg_amt, Avg_state) * 1.2)))],
    Result = first(Result_list),
    mochi_json(Result),
    (case (Result == 81) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub);
                        _ -> erlang:error({badkey, K})
                    end;
                _ -> erlang:error({badkey, K})
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
