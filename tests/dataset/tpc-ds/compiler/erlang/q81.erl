#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:52Z
% q81.erl - generated from q81.mochi

main(_) ->
    Catalog_returns = [#{cust => 1, state => "CA", amt => 40}, #{cust => 2, state => "CA", amt => 50}, #{cust => 3, state => "CA", amt => 81}, #{cust => 4, state => "TX", amt => 30}, #{cust => 5, state => "TX", amt => 20}],
    Avg_list = [#{state => Key0, avg_amt => (lists:sum([maps:get(amt, X) || X <- Val0]) / length([maps:get(amt, X) || X <- Val0]))} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{maps:get(state, R), R} || R <- Catalog_returns]))],
    Avg_state = first([A || A <- Avg_list, (maps:get(state, A) == "CA")]),
    Result_list = [maps:get(amt, R) || R <- Catalog_returns, ((maps:get(state, R) == "CA") andalso (maps:get(amt, R) > (maps:get(avg_amt, Avg_state) * 1.2)))],
    Result = first(Result_list),
    mochi_json(Result),
    (case (Result == 81) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
