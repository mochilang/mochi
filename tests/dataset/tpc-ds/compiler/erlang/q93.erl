#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T07:26:14Z
% q93.erl - generated from q93.mochi

main(_) ->
    Store_sales = [#{ss_item_sk => 1, ss_ticket_number => 1, ss_customer_sk => 1, ss_quantity => 5, ss_sales_price => 10}, #{ss_item_sk => 1, ss_ticket_number => 2, ss_customer_sk => 2, ss_quantity => 3, ss_sales_price => 20}],
    Store_returns = [#{sr_item_sk => 1, sr_ticket_number => 1, sr_reason_sk => 1, sr_return_quantity => 1}],
    Reason = [#{r_reason_sk => 1, r_reason_desc => "ReasonA"}],
    T = [#{ss_customer_sk => mochi_get(ss_customer_sk, Ss), act_sales => (case (Sr /= undefined) of true -> (((mochi_get(ss_quantity, Ss) - mochi_get(sr_return_quantity, Sr))) * mochi_get(ss_sales_price, Ss)); _ -> (mochi_get(ss_quantity, Ss) * mochi_get(ss_sales_price, Ss)) end)} || Ss <- Store_sales, {Ss, Sr} <- mochi_left_join_item(Ss, Store_returns, fun(Ss, Sr) -> ((mochi_get(ss_item_sk, Ss) == mochi_get(sr_item_sk, Sr)) andalso (mochi_get(ss_ticket_number, Ss) == mochi_get(sr_ticket_number, Sr))) end), {Ss, R} <- mochi_left_join_item(Ss, Reason, fun(Ss, R) -> ((Sr /= undefined) andalso (mochi_get(sr_reason_sk, Sr) == mochi_get(r_reason_sk, R))) end), ((R == undefined) orelse (mochi_get(r_reason_desc, R) == "ReasonA"))],
    Result = [V || {_, V} <- lists:keysort(1, [{[lists:sum([mochi_get(act_sales, Y) || Y <- Val0]), Key0], #{ss_customer_sk => Key0, sumsales => lists:sum([mochi_get(act_sales, Y) || Y <- Val0])}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{mochi_get(ss_customer_sk, X), X} || X <- T]))])],
    mochi_json(Result),
    (case (Result == [#{ss_customer_sk => 1, sumsales => 40}, #{ss_customer_sk => 2, sumsales => 60}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_left_join_item(A, B, Fun) ->
    Matches = [ {A, J} || J <- B, Fun(A, J) ],
    case Matches of
        [] -> [{A, undefined}];
        _ -> Matches
    end.

mochi_left_join(L, R, Fun) ->
    lists:flatmap(fun(X) -> mochi_left_join_item(X, R, Fun) end, L).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
