#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:48Z
% q74.erl - generated from q74.mochi

main(_) ->
    Customer = [#{c_customer_sk => 1, c_customer_id => 1, c_first_name => "Alice", c_last_name => "Smith"}],
    Date_dim = [#{d_date_sk => 1, d_year => 1998}, #{d_date_sk => 2, d_year => 1999}],
    Store_sales = [#{ss_customer_sk => 1, ss_sold_date_sk => 1, ss_net_paid => 100}, #{ss_customer_sk => 1, ss_sold_date_sk => 2, ss_net_paid => 110}],
    Web_sales = [#{ws_bill_customer_sk => 1, ws_sold_date_sk => 1, ws_net_paid => 40}, #{ws_bill_customer_sk => 1, ws_sold_date_sk => 2, ws_net_paid => 80}],
    Year_total = concat([#{customer_id => maps:get(id, Key0), customer_first_name => maps:get(first, Key0), customer_last_name => maps:get(last, Key0), year => maps:get(year, Key0), year_total => lists:sum([maps:get(ss_net_paid, maps:get(ss, X)) || X <- Val0]), sale_type => "s"} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{id => maps:get(c_customer_id, C), first => maps:get(c_first_name, C), last => maps:get(c_last_name, C), year => maps:get(d_year, D)}, #{c => C, ss => Ss, d => D}} || C <- Customer, Ss <- Store_sales, D <- Date_dim, (maps:get(c_customer_sk, C) == maps:get(ss_customer_sk, Ss)), (maps:get(d_date_sk, D) == maps:get(ss_sold_date_sk, Ss)), ((maps:get(d_year, D) == 1998) orelse (maps:get(d_year, D) == 1999))]))], [#{customer_id => maps:get(id, Key1), customer_first_name => maps:get(first, Key1), customer_last_name => maps:get(last, Key1), year => maps:get(year, Key1), year_total => lists:sum([maps:get(ws_net_paid, maps:get(ws, X)) || X <- Val1]), sale_type => "w"} || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{#{id => maps:get(c_customer_id, C), first => maps:get(c_first_name, C), last => maps:get(c_last_name, C), year => maps:get(d_year, D)}, #{c => C, ws => Ws, d => D}} || C <- Customer, Ws <- Web_sales, D <- Date_dim, (maps:get(c_customer_sk, C) == maps:get(ws_bill_customer_sk, Ws)), (maps:get(d_date_sk, D) == maps:get(ws_sold_date_sk, Ws)), ((maps:get(d_year, D) == 1998) orelse (maps:get(d_year, D) == 1999))]))]),
    S_firstyear = first([Y || Y <- Year_total, ((maps:get(sale_type, Y) == "s") andalso (maps:get(year, Y) == 1998))]),
    S_secyear = first([Y || Y <- Year_total, ((maps:get(sale_type, Y) == "s") andalso (maps:get(year, Y) == 1999))]),
    W_firstyear = first([Y || Y <- Year_total, ((maps:get(sale_type, Y) == "w") andalso (maps:get(year, Y) == 1998))]),
    W_secyear = first([Y || Y <- Year_total, ((maps:get(sale_type, Y) == "w") andalso (maps:get(year, Y) == 1999))]),
    Result = (case (((maps:get(year_total, S_firstyear) > 0) andalso (maps:get(year_total, W_firstyear) > 0)) andalso (((maps:get(year_total, W_secyear) / maps:get(year_total, W_firstyear))) > ((maps:get(year_total, S_secyear) / maps:get(year_total, S_firstyear))))) of true -> [#{customer_id => maps:get(customer_id, S_secyear), customer_first_name => maps:get(customer_first_name, S_secyear), customer_last_name => maps:get(customer_last_name, S_secyear)}]; _ -> [] end),
    mochi_json(Result),
    (case (Result == [#{customer_id => 1, customer_first_name => "Alice", customer_last_name => "Smith"}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
