#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:25Z
% q28.erl - generated from q28.mochi

main(_) ->
    Store_sales = [#{ss_quantity => 3, ss_list_price => 100, ss_coupon_amt => 50, ss_wholesale_cost => 30}, #{ss_quantity => 8, ss_list_price => 80, ss_coupon_amt => 10, ss_wholesale_cost => 20}, #{ss_quantity => 12, ss_list_price => 60, ss_coupon_amt => 5, ss_wholesale_cost => 15}],
    Bucket1 = [Ss || Ss <- Store_sales, (((maps:get(ss_quantity, Ss) >= 0) andalso (maps:get(ss_quantity, Ss) =< 5)) andalso ((((((maps:get(ss_list_price, Ss) >= 0) andalso (maps:get(ss_list_price, Ss) =< 110))) orelse (((maps:get(ss_coupon_amt, Ss) >= 0) andalso (maps:get(ss_coupon_amt, Ss) =< 1000)))) orelse (((maps:get(ss_wholesale_cost, Ss) >= 0) andalso (maps:get(ss_wholesale_cost, Ss) =< 50))))))],
    Bucket2 = [Ss || Ss <- Store_sales, (((maps:get(ss_quantity, Ss) >= 6) andalso (maps:get(ss_quantity, Ss) =< 10)) andalso ((((((maps:get(ss_list_price, Ss) >= 0) andalso (maps:get(ss_list_price, Ss) =< 110))) orelse (((maps:get(ss_coupon_amt, Ss) >= 0) andalso (maps:get(ss_coupon_amt, Ss) =< 1000)))) orelse (((maps:get(ss_wholesale_cost, Ss) >= 0) andalso (maps:get(ss_wholesale_cost, Ss) =< 50))))))],
    Result = #{b1_lp => (lists:sum([maps:get(ss_list_price, X) || X <- Bucket1]) / length([maps:get(ss_list_price, X) || X <- Bucket1])), b1_cnt => (case Bucket1 of #{items := It} -> length(It); _ -> length(Bucket1) end), b1_cntd => (case [Key0 || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{maps:get(ss_list_price, X), X} || X <- Bucket1]))] of #{items := It} -> length(It); _ -> length([Key0 || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{maps:get(ss_list_price, X), X} || X <- Bucket1]))]) end), b2_lp => (lists:sum([maps:get(ss_list_price, X) || X <- Bucket2]) / length([maps:get(ss_list_price, X) || X <- Bucket2])), b2_cnt => (case Bucket2 of #{items := It} -> length(It); _ -> length(Bucket2) end), b2_cntd => (case [Key1 || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{maps:get(ss_list_price, X), X} || X <- Bucket2]))] of #{items := It} -> length(It); _ -> length([Key1 || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{maps:get(ss_list_price, X), X} || X <- Bucket2]))]) end)},
    mochi_json(Result),
    (case (Result == #{b1_lp => 100, b1_cnt => 1, b1_cntd => 1, b2_lp => 80, b2_cnt => 1, b2_cntd => 1}) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
