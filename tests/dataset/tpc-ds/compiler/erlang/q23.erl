#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:31:11Z
% q23.erl - generated from q23.mochi

main(_) ->
    Store_sales = [#{ss_item_sk => 1, ss_sold_date_sk => 1, ss_customer_sk => 1, ss_quantity => 1, ss_sales_price => 10}, #{ss_item_sk => 1, ss_sold_date_sk => 1, ss_customer_sk => 1, ss_quantity => 1, ss_sales_price => 10}, #{ss_item_sk => 1, ss_sold_date_sk => 1, ss_customer_sk => 1, ss_quantity => 1, ss_sales_price => 10}, #{ss_item_sk => 1, ss_sold_date_sk => 1, ss_customer_sk => 1, ss_quantity => 1, ss_sales_price => 10}, #{ss_item_sk => 1, ss_sold_date_sk => 1, ss_customer_sk => 1, ss_quantity => 1, ss_sales_price => 10}, #{ss_item_sk => 2, ss_sold_date_sk => 1, ss_customer_sk => 2, ss_quantity => 1, ss_sales_price => 10}, #{ss_item_sk => 2, ss_sold_date_sk => 1, ss_customer_sk => 2, ss_quantity => 1, ss_sales_price => 10}, #{ss_item_sk => 2, ss_sold_date_sk => 1, ss_customer_sk => 2, ss_quantity => 1, ss_sales_price => 10}],
    Date_dim = [#{d_date_sk => 1, d_year => 2000, d_moy => 1}],
    Item = [#{i_item_sk => 1}, #{i_item_sk => 2}],
    Catalog_sales = [#{cs_sold_date_sk => 1, cs_item_sk => 1, cs_bill_customer_sk => 1, cs_quantity => 2, cs_list_price => 10}, #{cs_sold_date_sk => 1, cs_item_sk => 2, cs_bill_customer_sk => 2, cs_quantity => 2, cs_list_price => 10}],
    Web_sales = [#{ws_sold_date_sk => 1, ws_item_sk => 1, ws_bill_customer_sk => 1, ws_quantity => 3, ws_list_price => 10}, #{ws_sold_date_sk => 1, ws_item_sk => 2, ws_bill_customer_sk => 2, ws_quantity => 1, ws_list_price => 10}],
    Frequent_ss_items = [maps:get(item_sk, Key0) || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{item_sk => maps:get(i_item_sk, I), date_sk => maps:get(d_date_sk, D)}, #{ss => Ss, d => D, i => I}} || Ss <- Store_sales, D <- Date_dim, I <- Item, (maps:get(ss_sold_date_sk, Ss) == maps:get(d_date_sk, D)), (maps:get(ss_item_sk, Ss) == maps:get(i_item_sk, I)), (maps:get(d_year, D) == 2000)])), ((case Val0 of #{items := It} -> length(It); _ -> length(Val0) end) > 4)],
    Customer_totals = [#{cust => Key1, sales => lists:sum([(maps:get(ss_quantity, X) * maps:get(ss_sales_price, X)) || X <- Val1])} || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{maps:get(ss_customer_sk, Ss), Ss} || Ss <- Store_sales]))],
    Max_sales = lists:max([maps:get(sales, C) || C <- Customer_totals]),
    Best_ss_customer = [maps:get(cust, C) || C <- Customer_totals, (maps:get(sales, C) > (0.95 * Max_sales))],
    Catalog = [(maps:get(cs_quantity, Cs) * maps:get(cs_list_price, Cs)) || Cs <- Catalog_sales, D <- Date_dim, (maps:get(cs_sold_date_sk, Cs) == maps:get(d_date_sk, D)), ((((maps:get(d_year, D) == 2000) andalso (maps:get(d_moy, D) == 1)) andalso lists:member(maps:get(cs_bill_customer_sk, Cs), Best_ss_customer)) andalso lists:member(maps:get(cs_item_sk, Cs), Frequent_ss_items))],
    Web = [(maps:get(ws_quantity, Ws) * maps:get(ws_list_price, Ws)) || Ws <- Web_sales, D <- Date_dim, (maps:get(ws_sold_date_sk, Ws) == maps:get(d_date_sk, D)), ((((maps:get(d_year, D) == 2000) andalso (maps:get(d_moy, D) == 1)) andalso lists:member(maps:get(ws_bill_customer_sk, Ws), Best_ss_customer)) andalso lists:member(maps:get(ws_item_sk, Ws), Frequent_ss_items))],
    Result = (lists:sum(Catalog) + lists:sum(Web)),
    mochi_json(Result),
    (case (Result == 50) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
