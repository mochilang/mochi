#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.25 on 2025-07-15T04:58:55Z
% q88.erl - generated from q88.mochi

count_range(Ssales, Tdim, Hour, Start_min, End_min) ->
    Total0 = 0,
    lists:foreach(fun(Ss) -> lists:foreach(fun(T) -> (case ((((maps:get(sold_time_sk, Ss) == maps:get(time_sk, T)) andalso (maps:get(hour, T) == Hour)) andalso (maps:get(minute, T) >= Start_min)) andalso (maps:get(minute, T) < End_min)) of true -> Total1 = (Total0 + maps:get(qty, Ss)); _ -> ok end) end, Tdim) end, Ssales),
    Total1.

main(_) ->
    Time_dim = [#{time_sk => 1, hour => 8, minute => 30}, #{time_sk => 2, hour => 9, minute => 0}, #{time_sk => 3, hour => 9, minute => 30}, #{time_sk => 4, hour => 10, minute => 0}, #{time_sk => 5, hour => 10, minute => 30}, #{time_sk => 6, hour => 11, minute => 0}, #{time_sk => 7, hour => 11, minute => 30}, #{time_sk => 8, hour => 12, minute => 0}],
    Household_demographics = [#{hd_demo_sk => 1, hd_dep_count => 1, hd_vehicle_count => 1}],
    Store = [#{s_store_sk => 1, s_store_name => "ese"}],
    Store_sales = [#{sold_time_sk => 1, hdemo_sk => 1, store_sk => 1, qty => 10}, #{sold_time_sk => 2, hdemo_sk => 1, store_sk => 1, qty => 12}, #{sold_time_sk => 3, hdemo_sk => 1, store_sk => 1, qty => 14}, #{sold_time_sk => 4, hdemo_sk => 1, store_sk => 1, qty => 11}, #{sold_time_sk => 5, hdemo_sk => 1, store_sk => 1, qty => 8}, #{sold_time_sk => 6, hdemo_sk => 1, store_sk => 1, qty => 9}, #{sold_time_sk => 7, hdemo_sk => 1, store_sk => 1, qty => 10}, #{sold_time_sk => 8, hdemo_sk => 1, store_sk => 1, qty => 14}],
    H8_30_to_9 = count_range(Store_sales, Time_dim, 8, 30, 60),
    H9_to_9_30 = count_range(Store_sales, Time_dim, 9, 0, 30),
    H9_30_to_10 = count_range(Store_sales, Time_dim, 9, 30, 60),
    H10_to_10_30 = count_range(Store_sales, Time_dim, 10, 0, 30),
    H10_30_to_11 = count_range(Store_sales, Time_dim, 10, 30, 60),
    H11_to_11_30 = count_range(Store_sales, Time_dim, 11, 0, 30),
    H11_30_to_12 = count_range(Store_sales, Time_dim, 11, 30, 60),
    H12_to_12_30 = count_range(Store_sales, Time_dim, 12, 0, 30),
    Result = (((((((H8_30_to_9 + H9_to_9_30) + H9_30_to_10) + H10_to_10_30) + H10_30_to_11) + H11_to_11_30) + H11_30_to_12) + H12_to_12_30),
    mochi_json(Result),
    (case (Result == 88) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
