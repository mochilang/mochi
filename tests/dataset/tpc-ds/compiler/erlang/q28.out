%    9|     Result = #{b1_lp => (lists:sum([mochi_get(ss_list_price, X) || X <- Bucket1]) / length([mochi_get(ss_list_price, X) || X <- Bucket1])), b1_cnt => (case Bucket1 of #{items := It} -> length(It); _ -> length(Bucket1) end), b1_cntd => (case [Key0 || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{mochi_get(ss_list_price, X), X} || X <- Bucket1]))] of #{items := It} -> length(It); _ -> length([Key0 || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{mochi_get(ss_list_price, X), X} || X <- Bucket1]))]) end), b2_lp => (lists:sum([mochi_get(ss_list_price, X) || X <- Bucket2]) / length([mochi_get(ss_list_price, X) || X <- Bucket2])), b2_cnt => (case Bucket2 of #{items := It} -> length(It); _ -> length(Bucket2) end), b2_cntd => (case [Key1 || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{mochi_get(ss_list_price, X), X} || X <- Bucket2]))] of #{items := It} -> length(It); _ -> length([Key1 || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{mochi_get(ss_list_price, X), X} || X <- Bucket2]))]) end)},
%     |                                                                                                                                                                                                                                                                  ^
%    9|     Result = #{b1_lp => (lists:sum([mochi_get(ss_list_price, X) || X <- Bucket1]) / length([mochi_get(ss_list_price, X) || X <- Bucket1])), b1_cnt => (case Bucket1 of #{items := It} -> length(It); _ -> length(Bucket1) end), b1_cntd => (case [Key0 || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{mochi_get(ss_list_price, X), X} || X <- Bucket1]))] of #{items := It} -> length(It); _ -> length([Key0 || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{mochi_get(ss_list_price, X), X} || X <- Bucket1]))]) end), b2_lp => (lists:sum([mochi_get(ss_list_price, X) || X <- Bucket2]) / length([mochi_get(ss_list_price, X) || X <- Bucket2])), b2_cnt => (case Bucket2 of #{items := It} -> length(It); _ -> length(Bucket2) end), b2_cntd => (case [Key1 || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{mochi_get(ss_list_price, X), X} || X <- Bucket2]))] of #{items := It} -> length(It); _ -> length([Key1 || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{mochi_get(ss_list_price, X), X} || X <- Bucket2]))]) end)},
%     |
%    9|     Result = #{b1_lp => (lists:sum([mochi_get(ss_list_price, X) || X <- Bucket1]) / length([mochi_get(ss_list_price, X) || X <- Bucket1])), b1_cnt => (case Bucket1 of #{items := It} -> length(It); _ -> length(Bucket1) end), b1_cntd => (case [Key0 || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{mochi_get(ss_list_price, X), X} || X <- Bucket1]))] of #{items := It} -> length(It); _ -> length([Key0 || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{mochi_get(ss_list_price, X), X} || X <- Bucket1]))]) end), b2_lp => (lists:sum([mochi_get(ss_list_price, X) || X <- Bucket2]) / length([mochi_get(ss_list_price, X) || X <- Bucket2])), b2_cnt => (case Bucket2 of #{items := It} -> length(It); _ -> length(Bucket2) end), b2_cntd => (case [Key1 || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{mochi_get(ss_list_price, X), X} || X <- Bucket2]))] of #{items := It} -> length(It); _ -> length([Key1 || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{mochi_get(ss_list_price, X), X} || X <- Bucket2]))]) end)},
%     |
%    9|     Result = #{b1_lp => (lists:sum([mochi_get(ss_list_price, X) || X <- Bucket1]) / length([mochi_get(ss_list_price, X) || X <- Bucket1])), b1_cnt => (case Bucket1 of #{items := It} -> length(It); _ -> length(Bucket1) end), b1_cntd => (case [Key0 || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{mochi_get(ss_list_price, X), X} || X <- Bucket1]))] of #{items := It} -> length(It); _ -> length([Key0 || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{mochi_get(ss_list_price, X), X} || X <- Bucket1]))]) end), b2_lp => (lists:sum([mochi_get(ss_list_price, X) || X <- Bucket2]) / length([mochi_get(ss_list_price, X) || X <- Bucket2])), b2_cnt => (case Bucket2 of #{items := It} -> length(It); _ -> length(Bucket2) end), b2_cntd => (case [Key1 || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{mochi_get(ss_list_price, X), X} || X <- Bucket2]))] of #{items := It} -> length(It); _ -> length([Key1 || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{mochi_get(ss_list_price, X), X} || X <- Bucket2]))]) end)},
%     |
{"b1_lp":100.0,"b1_cnt":1,"b1_cntd":1,"b2_lp":80.0,"b2_cnt":1,"b2_cntd":1}
