#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T07:25:44Z
% q20.erl - generated from q20.mochi

main(_) ->
    Catalog_sales = [#{cs_item_sk => 1, cs_sold_date_sk => 1, cs_ext_sales_price => 100}, #{cs_item_sk => 1, cs_sold_date_sk => 1, cs_ext_sales_price => 200}, #{cs_item_sk => 2, cs_sold_date_sk => 1, cs_ext_sales_price => 150}, #{cs_item_sk => 1, cs_sold_date_sk => 2, cs_ext_sales_price => 300}, #{cs_item_sk => 2, cs_sold_date_sk => 2, cs_ext_sales_price => 150}, #{cs_item_sk => 3, cs_sold_date_sk => 1, cs_ext_sales_price => 50}],
    Item = [#{i_item_sk => 1, i_item_id => "ITEM1", i_item_desc => "Item One", i_category => "A", i_class => "X", i_current_price => 10}, #{i_item_sk => 2, i_item_id => "ITEM2", i_item_desc => "Item Two", i_category => "A", i_class => "X", i_current_price => 20}, #{i_item_sk => 3, i_item_id => "ITEM3", i_item_desc => "Item Three", i_category => "D", i_class => "Y", i_current_price => 15}],
    Date_dim = [#{d_date_sk => 1, d_date => "2000-02-10"}, #{d_date_sk => 2, d_date => "2000-02-20"}],
    Filtered = [#{i_item_id => mochi_get(id, Key0), i_item_desc => mochi_get(desc, Key0), i_category => mochi_get(cat, Key0), i_class => mochi_get(class, Key0), i_current_price => mochi_get(price, Key0), itemrevenue => lists:sum([mochi_get(cs_ext_sales_price, X) || X <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{id => mochi_get(i_item_id, I), desc => mochi_get(i_item_desc, I), cat => mochi_get(i_category, I), class => mochi_get(i_class, I), price => mochi_get(i_current_price, I)}, #{cs => Cs, i => I, d => D}} || Cs <- Catalog_sales, I <- Item, D <- Date_dim, (mochi_get(cs_item_sk, Cs) == mochi_get(i_item_sk, I)), (mochi_get(cs_sold_date_sk, Cs) == mochi_get(d_date_sk, D)), ((lists:member(mochi_get(i_category, I), ["A", "B", "C"]) andalso (mochi_get(d_date, D) >= "2000-02-01")) andalso (mochi_get(d_date, D) =< "2000-03-02"))]))],
    Class_totals = [#{class => Key1, total => lists:sum([mochi_get(itemrevenue, X) || X <- Val1])} || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{mochi_get(i_class, F), F} || F <- Filtered]))],
    Result = [V || {_, V} <- lists:keysort(1, [{[mochi_get(i_category, F), mochi_get(i_class, F), mochi_get(i_item_id, F), mochi_get(i_item_desc, F)], #{i_item_id => mochi_get(i_item_id, F), i_item_desc => mochi_get(i_item_desc, F), i_category => mochi_get(i_category, F), i_class => mochi_get(i_class, F), i_current_price => mochi_get(i_current_price, F), itemrevenue => mochi_get(itemrevenue, F), revenueratio => (((mochi_get(itemrevenue, F) * 100)) / mochi_get(total, T))}} || F <- Filtered, T <- Class_totals, (mochi_get(i_class, F) == mochi_get(class, T))])],
    mochi_json(Result),
    (case (Result == [#{i_item_id => "ITEM1", i_item_desc => "Item One", i_category => "A", i_class => "X", i_current_price => 10, itemrevenue => 600, revenueratio => 66.66666666666667}, #{i_item_id => "ITEM2", i_item_desc => "Item Two", i_category => "A", i_class => "X", i_current_price => 20, itemrevenue => 300, revenueratio => 33.333333333333336}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub, undefined);
                        _ -> undefined
                    end;
                _ -> undefined
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
