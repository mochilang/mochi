#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2020-01-02T15:04:05Z
% q3.erl - generated from q3.mochi

main(_) ->
    Date_dim = [#{d_date_sk => 1, d_year => 1998, d_moy => 12}],
    Store_sales = [#{ss_sold_date_sk => 1, ss_item_sk => 1, ss_ext_sales_price => 10}, #{ss_sold_date_sk => 1, ss_item_sk => 2, ss_ext_sales_price => 20}],
    Item = [#{i_item_sk => 1, i_manufact_id => 100, i_brand_id => 1, i_brand => "Brand1"}, #{i_item_sk => 2, i_manufact_id => 100, i_brand_id => 2, i_brand => "Brand2"}],
    Result = [V || {_, V} <- lists:keysort(1, [{[mochi_get(d_year, Key0), -lists:sum([mochi_get(ss_ext_sales_price, X) || X <- Val0]), mochi_get(brand_id, Key0)], #{d_year => mochi_get(d_year, Key0), brand_id => mochi_get(brand_id, Key0), brand => mochi_get(brand, Key0), sum_agg => lists:sum([mochi_get(ss_ext_sales_price, X) || X <- Val0])}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{d_year => mochi_get(d_year, Dt), brand_id => mochi_get(i_brand_id, I), brand => mochi_get(i_brand, I)}, #{dt => Dt, ss => Ss, i => I}} || Dt <- Date_dim, Ss <- Store_sales, I <- Item, (mochi_get(d_date_sk, Dt) == mochi_get(ss_sold_date_sk, Ss)), (mochi_get(ss_item_sk, Ss) == mochi_get(i_item_sk, I)), ((mochi_get(i_manufact_id, I) == 100) andalso (mochi_get(d_moy, Dt) == 12))]))])],
    mochi_json(Result),
    (case (Result == [#{d_year => 1998, brand_id => 2, brand => "Brand2", sum_agg => 20}, #{d_year => 1998, brand_id => 1, brand => "Brand1", sum_agg => 10}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub);
                        _ -> erlang:error({badkey, K})
                    end;
                _ -> erlang:error({badkey, K})
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
