#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:31:09Z
% q21.erl - generated from q21.mochi

main(_) ->
    Inventory = [#{inv_item_sk => 1, inv_warehouse_sk => 1, inv_date_sk => 1, inv_quantity_on_hand => 30}, #{inv_item_sk => 1, inv_warehouse_sk => 1, inv_date_sk => 2, inv_quantity_on_hand => 40}, #{inv_item_sk => 2, inv_warehouse_sk => 2, inv_date_sk => 1, inv_quantity_on_hand => 20}, #{inv_item_sk => 2, inv_warehouse_sk => 2, inv_date_sk => 2, inv_quantity_on_hand => 20}],
    Warehouse = [#{w_warehouse_sk => 1, w_warehouse_name => "Main"}, #{w_warehouse_sk => 2, w_warehouse_name => "Backup"}],
    Item = [#{i_item_sk => 1, i_item_id => "ITEM1"}, #{i_item_sk => 2, i_item_id => "ITEM2"}],
    Date_dim = [#{d_date_sk => 1, d_date => "2000-03-01"}, #{d_date_sk => 2, d_date => "2000-03-20"}],
    Before = [#{w => maps:get(w, Key0), i => maps:get(i, Key0), qty => lists:sum([maps:get(inv_quantity_on_hand, X) || X <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{w => maps:get(inv_warehouse_sk, Inv), i => maps:get(inv_item_sk, Inv)}, #{inv => Inv, d => D}} || Inv <- Inventory, D <- Date_dim, (maps:get(inv_date_sk, Inv) == maps:get(d_date_sk, D)), (maps:get(d_date, D) < "2000-03-15")]))],
    After = [#{w => maps:get(w, Key1), i => maps:get(i, Key1), qty => lists:sum([maps:get(inv_quantity_on_hand, X) || X <- Val1])} || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{#{w => maps:get(inv_warehouse_sk, Inv), i => maps:get(inv_item_sk, Inv)}, #{inv => Inv, d => D}} || Inv <- Inventory, D <- Date_dim, (maps:get(inv_date_sk, Inv) == maps:get(d_date_sk, D)), (maps:get(d_date, D) >= "2000-03-15")]))],
    Joined = [#{w_name => maps:get(w_warehouse_name, W), i_id => maps:get(i_item_id, It), before_qty => maps:get(qty, B), after_qty => maps:get(qty, A), ratio => (maps:get(qty, A) / maps:get(qty, B))} || B <- Before, A <- After, W <- Warehouse, It <- Item, ((maps:get(w, B) == maps:get(w, A)) andalso (maps:get(i, B) == maps:get(i, A))), (maps:get(w_warehouse_sk, W) == maps:get(w, B)), (maps:get(i_item_sk, It) == maps:get(i, B))],
    Result = [V || {_, V} <- lists:keysort(1, [{[maps:get(w_name, R), maps:get(i_id, R)], #{w_warehouse_name => maps:get(w_name, R), i_item_id => maps:get(i_id, R), inv_before => maps:get(before_qty, R), inv_after => maps:get(after_qty, R)}} || R <- Joined, ((maps:get(ratio, R) >= ((2 / 3))) andalso (maps:get(ratio, R) =< ((3 / 2))))])],
    mochi_json(Result),
    (case (Result == [#{w_warehouse_name => "Backup", i_item_id => "ITEM2", inv_before => 20, inv_after => 20}, #{w_warehouse_name => "Main", i_item_id => "ITEM1", inv_before => 30, inv_after => 40}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
