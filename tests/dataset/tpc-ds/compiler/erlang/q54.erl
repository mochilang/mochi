#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:31:37Z
% q54.erl - generated from q54.mochi

int(X) ->
    X.

main(_) ->
    Store_sales = [#{customer => 1, sold_date => 2, price => 60}, #{customer => 2, sold_date => 2, price => 40}],
    Date_dim = [#{d_date_sk => 2, d_month_seq => 5}],
    Customer = [#{c_customer_sk => 1, c_current_addr_sk => 1}, #{c_customer_sk => 2, c_current_addr_sk => 1}],
    Customer_address = [#{ca_address_sk => 1, ca_county => "X", ca_state => "Y"}],
    Store = [#{s_store_sk => 1, s_county => "X", s_state => "Y"}],
    Revenue = [#{customer => maps:get(c_customer_sk, C), amt => maps:get(price, Ss)} || Ss <- Store_sales, D <- Date_dim, C <- Customer, Ca <- Customer_address, S <- Store, (maps:get(sold_date, Ss) == maps:get(d_date_sk, D)), (maps:get(customer, Ss) == maps:get(c_customer_sk, C)), (((maps:get(c_current_addr_sk, C) == maps:get(ca_address_sk, Ca)) andalso (maps:get(ca_county, Ca) == "X")) andalso (maps:get(ca_state, Ca) == "Y")), (((1 == maps:get(s_store_sk, S)) andalso (maps:get(ca_county, Ca) == maps:get(s_county, S))) andalso (maps:get(ca_state, Ca) == maps:get(s_state, S)))],
    By_customer = [#{customer => Key0, revenue => lists:sum([maps:get(amt, X) || X <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{maps:get(customer, R), R} || R <- Revenue]))],
    Segments = [#{segment => maps:get(seg, Key1), num_customers => (case Val1 of #{items := It} -> length(It); _ -> length(Val1) end), segment_base => (maps:get(seg, Key1) * 50)} || {Key1, Val1} <- maps:to_list(lists:foldl(fun({Key1, Val1}, Acc1) -> L = maps:get(Key1, Acc1, []), maps:put(Key1, [Val1 | L], Acc1) end, #{}, [{#{seg => int((maps:get(revenue, R) / 50))}, R} || R <- By_customer]))],
    Result = Segments,
    mochi_json(Result),
    (case (Result == [#{segment => 1, num_customers => 1, segment_base => 50}, #{segment => 0, num_customers => 1, segment_base => 0}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
