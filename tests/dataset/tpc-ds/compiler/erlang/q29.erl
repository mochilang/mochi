#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2020-01-02T15:04:05Z
% q29.erl - generated from q29.mochi

main(_) ->
    Store_sales = [#{ss_sold_date_sk => 1, ss_item_sk => 1, ss_store_sk => 1, ss_customer_sk => 1, ss_quantity => 10, ss_ticket_number => 1}],
    Store_returns = [#{sr_returned_date_sk => 2, sr_item_sk => 1, sr_customer_sk => 1, sr_ticket_number => 1, sr_return_quantity => 2}],
    Catalog_sales = [#{cs_sold_date_sk => 3, cs_item_sk => 1, cs_bill_customer_sk => 1, cs_quantity => 5}],
    Date_dim = [#{d_date_sk => 1, d_moy => 4, d_year => 1999}, #{d_date_sk => 2, d_moy => 5, d_year => 1999}, #{d_date_sk => 3, d_moy => 5, d_year => 2000}],
    Store = [#{s_store_sk => 1, s_store_id => "S1", s_store_name => "Store1"}],
    Item = [#{i_item_sk => 1, i_item_id => "ITEM1", i_item_desc => "Desc1"}],
    Base = [#{ss_quantity => mochi_get(ss_quantity, Ss), sr_return_quantity => mochi_get(sr_return_quantity, Sr), cs_quantity => mochi_get(cs_quantity, Cs), i_item_id => mochi_get(i_item_id, I), i_item_desc => mochi_get(i_item_desc, I), s_store_id => mochi_get(s_store_id, S), s_store_name => mochi_get(s_store_name, S)} || Ss <- Store_sales, Sr <- Store_returns, Cs <- Catalog_sales, D1 <- Date_dim, D2 <- Date_dim, D3 <- Date_dim, S <- Store, I <- Item, ((mochi_get(ss_ticket_number, Ss) == mochi_get(sr_ticket_number, Sr)) andalso (mochi_get(ss_item_sk, Ss) == mochi_get(sr_item_sk, Sr))), ((mochi_get(sr_customer_sk, Sr) == mochi_get(cs_bill_customer_sk, Cs)) andalso (mochi_get(sr_item_sk, Sr) == mochi_get(cs_item_sk, Cs))), (mochi_get(d_date_sk, D1) == mochi_get(ss_sold_date_sk, Ss)), (mochi_get(d_date_sk, D2) == mochi_get(sr_returned_date_sk, Sr)), (mochi_get(d_date_sk, D3) == mochi_get(cs_sold_date_sk, Cs)), (mochi_get(s_store_sk, S) == mochi_get(ss_store_sk, Ss)), (mochi_get(i_item_sk, I) == mochi_get(ss_item_sk, Ss)), (((((mochi_get(d_moy, D1) == 4) andalso (mochi_get(d_year, D1) == 1999)) andalso (mochi_get(d_moy, D2) >= 4)) andalso (mochi_get(d_moy, D2) =< 7)) andalso lists:member(mochi_get(d_year, D3), [1999, 2000, 2001]))],
    Result = [#{i_item_id => mochi_get(item_id, Key0), i_item_desc => mochi_get(item_desc, Key0), s_store_id => mochi_get(s_store_id, Key0), s_store_name => mochi_get(s_store_name, Key0), store_sales_quantity => lists:sum([mochi_get(ss_quantity, X) || X <- Val0]), store_returns_quantity => lists:sum([mochi_get(sr_return_quantity, X) || X <- Val0]), catalog_sales_quantity => lists:sum([mochi_get(cs_quantity, X) || X <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{item_id => mochi_get(i_item_id, B), item_desc => mochi_get(i_item_desc, B), s_store_id => mochi_get(s_store_id, B), s_store_name => mochi_get(s_store_name, B)}, B} || B <- Base]))],
    mochi_json(Result),
    (case (Result == [#{i_item_id => "ITEM1", i_item_desc => "Desc1", s_store_id => "S1", s_store_name => "Store1", store_sales_quantity => 10, store_returns_quantity => 2, catalog_sales_quantity => 5}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub);
                        _ -> erlang:error({badkey, K})
                    end;
                _ -> erlang:error({badkey, K})
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
