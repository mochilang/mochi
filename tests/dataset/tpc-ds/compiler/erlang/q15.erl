#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2020-01-02T15:04:05Z
% q15.erl - generated from q15.mochi

main(_) ->
    Catalog_sales = [#{cs_bill_customer_sk => 1, cs_sales_price => 600, cs_sold_date_sk => 1}],
    Customer = [#{c_customer_sk => 1, c_current_addr_sk => 1}],
    Customer_address = [#{ca_address_sk => 1, ca_zip => "85669", ca_state => "CA"}],
    Date_dim = [#{d_date_sk => 1, d_qoy => 1, d_year => 2000}],
    Filtered = [V || {_, V} <- lists:keysort(1, [{mochi_get(zip, Key0), #{ca_zip => mochi_get(zip, Key0), sum_sales => lists:sum([mochi_get(cs_sales_price, X) || X <- Val0])}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{zip => mochi_get(ca_zip, Ca)}, #{cs => Cs, c => C, ca => Ca, d => D}} || Cs <- Catalog_sales, C <- Customer, Ca <- Customer_address, D <- Date_dim, (mochi_get(cs_bill_customer_sk, Cs) == mochi_get(c_customer_sk, C)), (mochi_get(c_current_addr_sk, C) == mochi_get(ca_address_sk, Ca)), (mochi_get(cs_sold_date_sk, Cs) == mochi_get(d_date_sk, D)), (((((lists:member(substr(mochi_get(ca_zip, Ca), 0, 5), ["85669", "86197", "88274", "83405", "86475", "85392", "85460", "80348", "81792"]) orelse lists:member(mochi_get(ca_state, Ca), ["CA", "WA", "GA"])) orelse (mochi_get(cs_sales_price, Cs) > 500))) andalso (mochi_get(d_qoy, D) == 1)) andalso (mochi_get(d_year, D) == 2000))]))])],
    mochi_json(Filtered),
    (case (Filtered == [#{ca_zip => "85669", sum_sales => 600}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_get(K, M) ->
    case maps:find(K, M) of
        {ok, V} -> V;
        error ->
            Name = atom_to_list(K),
            case string:tokens(Name, "_") of
                [Pref|_] ->
                    P = list_to_atom(Pref),
                    case maps:find(P, M) of
                        {ok, Sub} when is_map(Sub) -> maps:get(K, Sub);
                        _ -> erlang:error({badkey, K})
                    end;
                _ -> erlang:error({badkey, K})
            end
        end.
    
    mochi_escape_json([]) -> [];
    mochi_escape_json([H|T]) ->
        E = case H of
            $\ -> "\\";
            $" -> "\"";
            _ -> [H]
        end,
        E ++ mochi_escape_json(T).
    
    mochi_to_json(true) -> "true";
    mochi_to_json(false) -> "false";
    mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
    mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
    mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
    mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
    mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".
    
    mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
