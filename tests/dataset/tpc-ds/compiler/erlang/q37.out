%   10|     Result = [V || {_, V} <- lists:keysort(1, [{maps:get(id, Key0), #{i_item_id => maps:get(id, Key0), i_item_desc => maps:get(desc, Key0), i_current_price => maps:get(price, Key0)}} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{id => maps:get(i_item_id, I), desc => maps:get(i_item_desc, I), price => maps:get(i_current_price, I)}, #{i => I, inv => Inv, d => D, cs => Cs}} || I <- Item, Inv <- Inventory, D <- Date_dim, Cs <- Catalog_sales, (maps:get(i_item_sk, I) == maps:get(inv_item_sk, Inv)), (maps:get(inv_date_sk, Inv) == maps:get(d_date_sk, D)), (maps:get(cs_item_sk, Cs) == maps:get(i_item_sk, I)), ((((((maps:get(i_current_price, I) >= 20) andalso (maps:get(i_current_price, I) =< 50)) andalso (maps:get(i_manufact_id, I) >= 800)) andalso (maps:get(i_manufact_id, I) =< 803)) andalso (maps:get(inv_quantity_on_hand, Inv) >= 100)) andalso (maps:get(inv_quantity_on_hand, Inv) =< 500))]))])],
%     |                                                                                                                                                                                                  ^
[{"i_item_id":"I1","i_item_desc":"Item1","i_current_price":30}]
