#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:31:13Z
% q26.erl - generated from q26.mochi

main(_) ->
    Catalog_sales = [#{cs_sold_date_sk => 1, cs_item_sk => 1, cs_bill_cdemo_sk => 1, cs_promo_sk => 1, cs_quantity => 10, cs_list_price => 100, cs_coupon_amt => 5, cs_sales_price => 95}, #{cs_sold_date_sk => 1, cs_item_sk => 2, cs_bill_cdemo_sk => 2, cs_promo_sk => 2, cs_quantity => 5, cs_list_price => 50, cs_coupon_amt => 2, cs_sales_price => 48}],
    Customer_demographics = [#{cd_demo_sk => 1, cd_gender => "M", cd_marital_status => "S", cd_education_status => "College"}, #{cd_demo_sk => 2, cd_gender => "F", cd_marital_status => "M", cd_education_status => "High School"}],
    Date_dim = [#{d_date_sk => 1, d_year => 2000}],
    Item = [#{i_item_sk => 1, i_item_id => "ITEM1"}, #{i_item_sk => 2, i_item_id => "ITEM2"}],
    Promotion = [#{p_promo_sk => 1, p_channel_email => "N", p_channel_event => "Y"}, #{p_promo_sk => 2, p_channel_email => "Y", p_channel_event => "N"}],
    Result = [#{i_item_id => Key0, agg1 => (lists:sum([maps:get(cs_quantity, X) || X <- Val0]) / length([maps:get(cs_quantity, X) || X <- Val0])), agg2 => (lists:sum([maps:get(cs_list_price, X) || X <- Val0]) / length([maps:get(cs_list_price, X) || X <- Val0])), agg3 => (lists:sum([maps:get(cs_coupon_amt, X) || X <- Val0]) / length([maps:get(cs_coupon_amt, X) || X <- Val0])), agg4 => (lists:sum([maps:get(cs_sales_price, X) || X <- Val0]) / length([maps:get(cs_sales_price, X) || X <- Val0]))} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{maps:get(i_item_id, I), #{cs => Cs, cd => Cd, d => D, i => I, p => P}} || Cs <- Catalog_sales, Cd <- Customer_demographics, D <- Date_dim, I <- Item, P <- Promotion, (maps:get(cs_bill_cdemo_sk, Cs) == maps:get(cd_demo_sk, Cd)), (maps:get(cs_sold_date_sk, Cs) == maps:get(d_date_sk, D)), (maps:get(cs_item_sk, Cs) == maps:get(i_item_sk, I)), (maps:get(cs_promo_sk, Cs) == maps:get(p_promo_sk, P)), (((((maps:get(cd_gender, Cd) == "M") andalso (maps:get(cd_marital_status, Cd) == "S")) andalso (maps:get(cd_education_status, Cd) == "College")) andalso (((maps:get(p_channel_email, P) == "N") orelse (maps:get(p_channel_event, P) == "N")))) andalso (maps:get(d_year, D) == 2000))]))],
    mochi_json(Result),
    (case (Result == [#{i_item_id => "ITEM1", agg1 => 10, agg2 => 100, agg3 => 5, agg4 => 95}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
