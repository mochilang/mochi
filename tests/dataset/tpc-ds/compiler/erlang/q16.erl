#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:31:05Z
% q16.erl - generated from q16.mochi

distinct(Xs) ->
    Out0 = [],
    lists:foreach(fun(X) -> (case not contains(Out0, X) of true -> Out1 = Out0 ++ [X]; _ -> ok end) end, Xs),
    Out1.

main(_) ->
    Catalog_sales = [#{cs_order_number => 1, cs_ship_date_sk => 1, cs_ship_addr_sk => 1, cs_call_center_sk => 1, cs_warehouse_sk => 1, cs_ext_ship_cost => 5, cs_net_profit => 20}, #{cs_order_number => 1, cs_ship_date_sk => 1, cs_ship_addr_sk => 1, cs_call_center_sk => 1, cs_warehouse_sk => 2, cs_ext_ship_cost => 0, cs_net_profit => 0}],
    Date_dim = [#{d_date_sk => 1, d_date => "2000-03-01"}],
    Customer_address = [#{ca_address_sk => 1, ca_state => "CA"}],
    Call_center = [#{cc_call_center_sk => 1, cc_county => "CountyA"}],
    Catalog_returns = [],
    Filtered = [#{order_count => length(distinct([maps:get(cs_order_number, X) || X <- Val0])), total_shipping_cost => lists:sum([maps:get(cs_ext_ship_cost, X) || X <- Val0]), total_net_profit => lists:sum([maps:get(cs_net_profit, X) || X <- Val0])} || {Key0, Val0} <- maps:to_list(lists:foldl(fun({Key0, Val0}, Acc0) -> L = maps:get(Key0, Acc0, []), maps:put(Key0, [Val0 | L], Acc0) end, #{}, [{#{}, #{cs1 => Cs1, d => D, ca => Ca, cc => Cc}} || Cs1 <- Catalog_sales, D <- Date_dim, Ca <- Customer_address, Cc <- Call_center, (((maps:get(cs_ship_date_sk, Cs1) == maps:get(d_date_sk, D)) andalso (maps:get(d_date, D) >= "2000-03-01")) andalso (maps:get(d_date, D) =< "2000-04-30")), ((maps:get(cs_ship_addr_sk, Cs1) == maps:get(ca_address_sk, Ca)) andalso (maps:get(ca_state, Ca) == "CA")), ((maps:get(cs_call_center_sk, Cs1) == maps:get(cc_call_center_sk, Cc)) andalso (maps:get(cc_county, Cc) == "CountyA")), (lists:any(fun(Cs2) -> ((maps:get(cs_order_number, Cs1) == maps:get(cs_order_number, Cs2)) andalso (maps:get(cs_warehouse_sk, Cs1) /= maps:get(cs_warehouse_sk, Cs2))) end, Catalog_sales) andalso (lists:any(fun(Cr) -> (maps:get(cs_order_number, Cs1) == maps:get(cr_order_number, Cr)) end, Catalog_returns) == false))]))],
    mochi_json(Filtered),
    (case (Filtered == [#{order_count => 1, total_shipping_cost => 5, total_net_profit => 20}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
