#!/usr/bin/env escript
% Generated by Mochi compiler v0.10.26 on 2025-07-15T06:31:33Z
% q49.erl - generated from q49.mochi

main(_) ->
    Web = [#{item => "A", return_ratio => 0.2, currency_ratio => 0.3, return_rank => 1, currency_rank => 1}, #{item => "B", return_ratio => 0.5, currency_ratio => 0.6, return_rank => 2, currency_rank => 2}],
    Catalog = [#{item => "A", return_ratio => 0.3, currency_ratio => 0.4, return_rank => 1, currency_rank => 1}],
    Store = [#{item => "A", return_ratio => 0.25, currency_ratio => 0.35, return_rank => 1, currency_rank => 1}],
    Tmp = (concat([#{channel => "web", item => maps:get(item, W), return_ratio => maps:get(return_ratio, W), return_rank => maps:get(return_rank, W), currency_rank => maps:get(currency_rank, W)} || W <- Web, ((maps:get(return_rank, W) =< 10) orelse (maps:get(currency_rank, W) =< 10))], [#{channel => "catalog", item => maps:get(item, C), return_ratio => maps:get(return_ratio, C), return_rank => maps:get(return_rank, C), currency_rank => maps:get(currency_rank, C)} || C <- Catalog, ((maps:get(return_rank, C) =< 10) orelse (maps:get(currency_rank, C) =< 10))], [#{channel => "store", item => maps:get(item, S), return_ratio => maps:get(return_ratio, S), return_rank => maps:get(return_rank, S), currency_rank => maps:get(currency_rank, S)} || S <- Store, ((maps:get(return_rank, S) =< 10) orelse (maps:get(currency_rank, S) =< 10))])),
    Result = [V || {_, V} <- lists:keysort(1, [{[maps:get(channel, R), maps:get(return_rank, R), maps:get(currency_rank, R), maps:get(item, R)], R} || R <- Tmp])],
    mochi_json(Result),
    (case (Result == [#{channel => "catalog", item => "A", return_ratio => 0.3, return_rank => 1, currency_rank => 1}, #{channel => "store", item => "A", return_ratio => 0.25, return_rank => 1, currency_rank => 1}, #{channel => "web", item => "A", return_ratio => 0.2, return_rank => 1, currency_rank => 1}, #{channel => "web", item => "B", return_ratio => 0.5, return_rank => 2, currency_rank => 2}]) of true -> ok; _ -> erlang:error(test_failed) end).

mochi_escape_json([]) -> [];
mochi_escape_json([H|T]) ->
    E = case H of
        $\ -> "\\";
        $" -> "\"";
        _ -> [H]
    end,
    E ++ mochi_escape_json(T).

mochi_to_json(true) -> "true";
mochi_to_json(false) -> "false";
mochi_to_json(V) when is_integer(V); is_float(V) -> lists:flatten(io_lib:format("~p", [V]));
mochi_to_json(V) when is_binary(V) -> "\"" ++ mochi_escape_json(binary_to_list(V)) ++ "\"";
mochi_to_json(V) when is_list(V), (V =:= [] orelse is_integer(hd(V))) -> "\"" ++ mochi_escape_json(V) ++ "\"";
mochi_to_json(V) when is_list(V) -> "[" ++ lists:join(",", [mochi_to_json(X) || X <- V]) ++ "]";
mochi_to_json(V) when is_map(V) -> "{" ++ lists:join(",", ["\"" ++ atom_to_list(K) ++ "\":" ++ mochi_to_json(Val) || {K,Val} <- maps:to_list(V)]) ++ "}".

mochi_json(V) -> io:format("~s
", [mochi_to_json(V)]).
